
MCU_Base_Firmware_CubeMX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001d2ac  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003fb8  0801d440  0801d440  0002d440  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080213f8  080213f8  0004024c  2**0
                  CONTENTS
  4 .ARM          00000008  080213f8  080213f8  000313f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08021400  08021400  0004024c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08021400  08021400  00031400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08021404  08021404  00031404  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000024c  20000000  08021408  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006f54  20000250  08021654  00040250  2**3
                  ALLOC
 10 ._user_heap_stack 00006004  200071a4  08021654  000471a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0004024c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00076c79  00000000  00000000  0004027c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00009a38  00000000  00000000  000b6ef5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000022a8  00000000  00000000  000c0930  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002170  00000000  00000000  000c2bd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00037437  00000000  00000000  000c4d48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003f01f  00000000  00000000  000fc17f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f3641  00000000  00000000  0013b19e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0022e7df  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a360  00000000  00000000  0022e834  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000250 	.word	0x20000250
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801d424 	.word	0x0801d424

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000254 	.word	0x20000254
 80001cc:	0801d424 	.word	0x0801d424

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_uldivmod>:
 8000c08:	b953      	cbnz	r3, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0a:	b94a      	cbnz	r2, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0c:	2900      	cmp	r1, #0
 8000c0e:	bf08      	it	eq
 8000c10:	2800      	cmpeq	r0, #0
 8000c12:	bf1c      	itt	ne
 8000c14:	f04f 31ff 	movne.w	r1, #4294967295
 8000c18:	f04f 30ff 	movne.w	r0, #4294967295
 8000c1c:	f000 b9a4 	b.w	8000f68 <__aeabi_idiv0>
 8000c20:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c24:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c28:	f000 f83c 	bl	8000ca4 <__udivmoddi4>
 8000c2c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c34:	b004      	add	sp, #16
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2lz>:
 8000c38:	b538      	push	{r3, r4, r5, lr}
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	4604      	mov	r4, r0
 8000c40:	460d      	mov	r5, r1
 8000c42:	f7ff ff5b 	bl	8000afc <__aeabi_dcmplt>
 8000c46:	b928      	cbnz	r0, 8000c54 <__aeabi_d2lz+0x1c>
 8000c48:	4620      	mov	r0, r4
 8000c4a:	4629      	mov	r1, r5
 8000c4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c50:	f000 b80a 	b.w	8000c68 <__aeabi_d2ulz>
 8000c54:	4620      	mov	r0, r4
 8000c56:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000c5a:	f000 f805 	bl	8000c68 <__aeabi_d2ulz>
 8000c5e:	4240      	negs	r0, r0
 8000c60:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c64:	bd38      	pop	{r3, r4, r5, pc}
 8000c66:	bf00      	nop

08000c68 <__aeabi_d2ulz>:
 8000c68:	b5d0      	push	{r4, r6, r7, lr}
 8000c6a:	4b0c      	ldr	r3, [pc, #48]	; (8000c9c <__aeabi_d2ulz+0x34>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	4606      	mov	r6, r0
 8000c70:	460f      	mov	r7, r1
 8000c72:	f7ff fcd1 	bl	8000618 <__aeabi_dmul>
 8000c76:	f7ff ffa7 	bl	8000bc8 <__aeabi_d2uiz>
 8000c7a:	4604      	mov	r4, r0
 8000c7c:	f7ff fc52 	bl	8000524 <__aeabi_ui2d>
 8000c80:	4b07      	ldr	r3, [pc, #28]	; (8000ca0 <__aeabi_d2ulz+0x38>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	f7ff fcc8 	bl	8000618 <__aeabi_dmul>
 8000c88:	4602      	mov	r2, r0
 8000c8a:	460b      	mov	r3, r1
 8000c8c:	4630      	mov	r0, r6
 8000c8e:	4639      	mov	r1, r7
 8000c90:	f7ff fb0a 	bl	80002a8 <__aeabi_dsub>
 8000c94:	f7ff ff98 	bl	8000bc8 <__aeabi_d2uiz>
 8000c98:	4621      	mov	r1, r4
 8000c9a:	bdd0      	pop	{r4, r6, r7, pc}
 8000c9c:	3df00000 	.word	0x3df00000
 8000ca0:	41f00000 	.word	0x41f00000

08000ca4 <__udivmoddi4>:
 8000ca4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ca8:	9d08      	ldr	r5, [sp, #32]
 8000caa:	4604      	mov	r4, r0
 8000cac:	468c      	mov	ip, r1
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	f040 8083 	bne.w	8000dba <__udivmoddi4+0x116>
 8000cb4:	428a      	cmp	r2, r1
 8000cb6:	4617      	mov	r7, r2
 8000cb8:	d947      	bls.n	8000d4a <__udivmoddi4+0xa6>
 8000cba:	fab2 f282 	clz	r2, r2
 8000cbe:	b142      	cbz	r2, 8000cd2 <__udivmoddi4+0x2e>
 8000cc0:	f1c2 0020 	rsb	r0, r2, #32
 8000cc4:	fa24 f000 	lsr.w	r0, r4, r0
 8000cc8:	4091      	lsls	r1, r2
 8000cca:	4097      	lsls	r7, r2
 8000ccc:	ea40 0c01 	orr.w	ip, r0, r1
 8000cd0:	4094      	lsls	r4, r2
 8000cd2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cd6:	0c23      	lsrs	r3, r4, #16
 8000cd8:	fbbc f6f8 	udiv	r6, ip, r8
 8000cdc:	fa1f fe87 	uxth.w	lr, r7
 8000ce0:	fb08 c116 	mls	r1, r8, r6, ip
 8000ce4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ce8:	fb06 f10e 	mul.w	r1, r6, lr
 8000cec:	4299      	cmp	r1, r3
 8000cee:	d909      	bls.n	8000d04 <__udivmoddi4+0x60>
 8000cf0:	18fb      	adds	r3, r7, r3
 8000cf2:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cf6:	f080 8119 	bcs.w	8000f2c <__udivmoddi4+0x288>
 8000cfa:	4299      	cmp	r1, r3
 8000cfc:	f240 8116 	bls.w	8000f2c <__udivmoddi4+0x288>
 8000d00:	3e02      	subs	r6, #2
 8000d02:	443b      	add	r3, r7
 8000d04:	1a5b      	subs	r3, r3, r1
 8000d06:	b2a4      	uxth	r4, r4
 8000d08:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d0c:	fb08 3310 	mls	r3, r8, r0, r3
 8000d10:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d14:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d18:	45a6      	cmp	lr, r4
 8000d1a:	d909      	bls.n	8000d30 <__udivmoddi4+0x8c>
 8000d1c:	193c      	adds	r4, r7, r4
 8000d1e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d22:	f080 8105 	bcs.w	8000f30 <__udivmoddi4+0x28c>
 8000d26:	45a6      	cmp	lr, r4
 8000d28:	f240 8102 	bls.w	8000f30 <__udivmoddi4+0x28c>
 8000d2c:	3802      	subs	r0, #2
 8000d2e:	443c      	add	r4, r7
 8000d30:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d34:	eba4 040e 	sub.w	r4, r4, lr
 8000d38:	2600      	movs	r6, #0
 8000d3a:	b11d      	cbz	r5, 8000d44 <__udivmoddi4+0xa0>
 8000d3c:	40d4      	lsrs	r4, r2
 8000d3e:	2300      	movs	r3, #0
 8000d40:	e9c5 4300 	strd	r4, r3, [r5]
 8000d44:	4631      	mov	r1, r6
 8000d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4a:	b902      	cbnz	r2, 8000d4e <__udivmoddi4+0xaa>
 8000d4c:	deff      	udf	#255	; 0xff
 8000d4e:	fab2 f282 	clz	r2, r2
 8000d52:	2a00      	cmp	r2, #0
 8000d54:	d150      	bne.n	8000df8 <__udivmoddi4+0x154>
 8000d56:	1bcb      	subs	r3, r1, r7
 8000d58:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d5c:	fa1f f887 	uxth.w	r8, r7
 8000d60:	2601      	movs	r6, #1
 8000d62:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d66:	0c21      	lsrs	r1, r4, #16
 8000d68:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d6c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d70:	fb08 f30c 	mul.w	r3, r8, ip
 8000d74:	428b      	cmp	r3, r1
 8000d76:	d907      	bls.n	8000d88 <__udivmoddi4+0xe4>
 8000d78:	1879      	adds	r1, r7, r1
 8000d7a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d7e:	d202      	bcs.n	8000d86 <__udivmoddi4+0xe2>
 8000d80:	428b      	cmp	r3, r1
 8000d82:	f200 80e9 	bhi.w	8000f58 <__udivmoddi4+0x2b4>
 8000d86:	4684      	mov	ip, r0
 8000d88:	1ac9      	subs	r1, r1, r3
 8000d8a:	b2a3      	uxth	r3, r4
 8000d8c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d90:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d94:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d98:	fb08 f800 	mul.w	r8, r8, r0
 8000d9c:	45a0      	cmp	r8, r4
 8000d9e:	d907      	bls.n	8000db0 <__udivmoddi4+0x10c>
 8000da0:	193c      	adds	r4, r7, r4
 8000da2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da6:	d202      	bcs.n	8000dae <__udivmoddi4+0x10a>
 8000da8:	45a0      	cmp	r8, r4
 8000daa:	f200 80d9 	bhi.w	8000f60 <__udivmoddi4+0x2bc>
 8000dae:	4618      	mov	r0, r3
 8000db0:	eba4 0408 	sub.w	r4, r4, r8
 8000db4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000db8:	e7bf      	b.n	8000d3a <__udivmoddi4+0x96>
 8000dba:	428b      	cmp	r3, r1
 8000dbc:	d909      	bls.n	8000dd2 <__udivmoddi4+0x12e>
 8000dbe:	2d00      	cmp	r5, #0
 8000dc0:	f000 80b1 	beq.w	8000f26 <__udivmoddi4+0x282>
 8000dc4:	2600      	movs	r6, #0
 8000dc6:	e9c5 0100 	strd	r0, r1, [r5]
 8000dca:	4630      	mov	r0, r6
 8000dcc:	4631      	mov	r1, r6
 8000dce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dd2:	fab3 f683 	clz	r6, r3
 8000dd6:	2e00      	cmp	r6, #0
 8000dd8:	d14a      	bne.n	8000e70 <__udivmoddi4+0x1cc>
 8000dda:	428b      	cmp	r3, r1
 8000ddc:	d302      	bcc.n	8000de4 <__udivmoddi4+0x140>
 8000dde:	4282      	cmp	r2, r0
 8000de0:	f200 80b8 	bhi.w	8000f54 <__udivmoddi4+0x2b0>
 8000de4:	1a84      	subs	r4, r0, r2
 8000de6:	eb61 0103 	sbc.w	r1, r1, r3
 8000dea:	2001      	movs	r0, #1
 8000dec:	468c      	mov	ip, r1
 8000dee:	2d00      	cmp	r5, #0
 8000df0:	d0a8      	beq.n	8000d44 <__udivmoddi4+0xa0>
 8000df2:	e9c5 4c00 	strd	r4, ip, [r5]
 8000df6:	e7a5      	b.n	8000d44 <__udivmoddi4+0xa0>
 8000df8:	f1c2 0320 	rsb	r3, r2, #32
 8000dfc:	fa20 f603 	lsr.w	r6, r0, r3
 8000e00:	4097      	lsls	r7, r2
 8000e02:	fa01 f002 	lsl.w	r0, r1, r2
 8000e06:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e0a:	40d9      	lsrs	r1, r3
 8000e0c:	4330      	orrs	r0, r6
 8000e0e:	0c03      	lsrs	r3, r0, #16
 8000e10:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e14:	fa1f f887 	uxth.w	r8, r7
 8000e18:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e1c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e20:	fb06 f108 	mul.w	r1, r6, r8
 8000e24:	4299      	cmp	r1, r3
 8000e26:	fa04 f402 	lsl.w	r4, r4, r2
 8000e2a:	d909      	bls.n	8000e40 <__udivmoddi4+0x19c>
 8000e2c:	18fb      	adds	r3, r7, r3
 8000e2e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e32:	f080 808d 	bcs.w	8000f50 <__udivmoddi4+0x2ac>
 8000e36:	4299      	cmp	r1, r3
 8000e38:	f240 808a 	bls.w	8000f50 <__udivmoddi4+0x2ac>
 8000e3c:	3e02      	subs	r6, #2
 8000e3e:	443b      	add	r3, r7
 8000e40:	1a5b      	subs	r3, r3, r1
 8000e42:	b281      	uxth	r1, r0
 8000e44:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e48:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e4c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e50:	fb00 f308 	mul.w	r3, r0, r8
 8000e54:	428b      	cmp	r3, r1
 8000e56:	d907      	bls.n	8000e68 <__udivmoddi4+0x1c4>
 8000e58:	1879      	adds	r1, r7, r1
 8000e5a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e5e:	d273      	bcs.n	8000f48 <__udivmoddi4+0x2a4>
 8000e60:	428b      	cmp	r3, r1
 8000e62:	d971      	bls.n	8000f48 <__udivmoddi4+0x2a4>
 8000e64:	3802      	subs	r0, #2
 8000e66:	4439      	add	r1, r7
 8000e68:	1acb      	subs	r3, r1, r3
 8000e6a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e6e:	e778      	b.n	8000d62 <__udivmoddi4+0xbe>
 8000e70:	f1c6 0c20 	rsb	ip, r6, #32
 8000e74:	fa03 f406 	lsl.w	r4, r3, r6
 8000e78:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e7c:	431c      	orrs	r4, r3
 8000e7e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e82:	fa01 f306 	lsl.w	r3, r1, r6
 8000e86:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e8a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e8e:	431f      	orrs	r7, r3
 8000e90:	0c3b      	lsrs	r3, r7, #16
 8000e92:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e96:	fa1f f884 	uxth.w	r8, r4
 8000e9a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e9e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000ea2:	fb09 fa08 	mul.w	sl, r9, r8
 8000ea6:	458a      	cmp	sl, r1
 8000ea8:	fa02 f206 	lsl.w	r2, r2, r6
 8000eac:	fa00 f306 	lsl.w	r3, r0, r6
 8000eb0:	d908      	bls.n	8000ec4 <__udivmoddi4+0x220>
 8000eb2:	1861      	adds	r1, r4, r1
 8000eb4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000eb8:	d248      	bcs.n	8000f4c <__udivmoddi4+0x2a8>
 8000eba:	458a      	cmp	sl, r1
 8000ebc:	d946      	bls.n	8000f4c <__udivmoddi4+0x2a8>
 8000ebe:	f1a9 0902 	sub.w	r9, r9, #2
 8000ec2:	4421      	add	r1, r4
 8000ec4:	eba1 010a 	sub.w	r1, r1, sl
 8000ec8:	b2bf      	uxth	r7, r7
 8000eca:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ece:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ed2:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000ed6:	fb00 f808 	mul.w	r8, r0, r8
 8000eda:	45b8      	cmp	r8, r7
 8000edc:	d907      	bls.n	8000eee <__udivmoddi4+0x24a>
 8000ede:	19e7      	adds	r7, r4, r7
 8000ee0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ee4:	d22e      	bcs.n	8000f44 <__udivmoddi4+0x2a0>
 8000ee6:	45b8      	cmp	r8, r7
 8000ee8:	d92c      	bls.n	8000f44 <__udivmoddi4+0x2a0>
 8000eea:	3802      	subs	r0, #2
 8000eec:	4427      	add	r7, r4
 8000eee:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ef2:	eba7 0708 	sub.w	r7, r7, r8
 8000ef6:	fba0 8902 	umull	r8, r9, r0, r2
 8000efa:	454f      	cmp	r7, r9
 8000efc:	46c6      	mov	lr, r8
 8000efe:	4649      	mov	r1, r9
 8000f00:	d31a      	bcc.n	8000f38 <__udivmoddi4+0x294>
 8000f02:	d017      	beq.n	8000f34 <__udivmoddi4+0x290>
 8000f04:	b15d      	cbz	r5, 8000f1e <__udivmoddi4+0x27a>
 8000f06:	ebb3 020e 	subs.w	r2, r3, lr
 8000f0a:	eb67 0701 	sbc.w	r7, r7, r1
 8000f0e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f12:	40f2      	lsrs	r2, r6
 8000f14:	ea4c 0202 	orr.w	r2, ip, r2
 8000f18:	40f7      	lsrs	r7, r6
 8000f1a:	e9c5 2700 	strd	r2, r7, [r5]
 8000f1e:	2600      	movs	r6, #0
 8000f20:	4631      	mov	r1, r6
 8000f22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f26:	462e      	mov	r6, r5
 8000f28:	4628      	mov	r0, r5
 8000f2a:	e70b      	b.n	8000d44 <__udivmoddi4+0xa0>
 8000f2c:	4606      	mov	r6, r0
 8000f2e:	e6e9      	b.n	8000d04 <__udivmoddi4+0x60>
 8000f30:	4618      	mov	r0, r3
 8000f32:	e6fd      	b.n	8000d30 <__udivmoddi4+0x8c>
 8000f34:	4543      	cmp	r3, r8
 8000f36:	d2e5      	bcs.n	8000f04 <__udivmoddi4+0x260>
 8000f38:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f3c:	eb69 0104 	sbc.w	r1, r9, r4
 8000f40:	3801      	subs	r0, #1
 8000f42:	e7df      	b.n	8000f04 <__udivmoddi4+0x260>
 8000f44:	4608      	mov	r0, r1
 8000f46:	e7d2      	b.n	8000eee <__udivmoddi4+0x24a>
 8000f48:	4660      	mov	r0, ip
 8000f4a:	e78d      	b.n	8000e68 <__udivmoddi4+0x1c4>
 8000f4c:	4681      	mov	r9, r0
 8000f4e:	e7b9      	b.n	8000ec4 <__udivmoddi4+0x220>
 8000f50:	4666      	mov	r6, ip
 8000f52:	e775      	b.n	8000e40 <__udivmoddi4+0x19c>
 8000f54:	4630      	mov	r0, r6
 8000f56:	e74a      	b.n	8000dee <__udivmoddi4+0x14a>
 8000f58:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f5c:	4439      	add	r1, r7
 8000f5e:	e713      	b.n	8000d88 <__udivmoddi4+0xe4>
 8000f60:	3802      	subs	r0, #2
 8000f62:	443c      	add	r4, r7
 8000f64:	e724      	b.n	8000db0 <__udivmoddi4+0x10c>
 8000f66:	bf00      	nop

08000f68 <__aeabi_idiv0>:
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop

08000f6c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b084      	sub	sp, #16
 8000f70:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000f72:	463b      	mov	r3, r7
 8000f74:	2200      	movs	r2, #0
 8000f76:	601a      	str	r2, [r3, #0]
 8000f78:	605a      	str	r2, [r3, #4]
 8000f7a:	609a      	str	r2, [r3, #8]
 8000f7c:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000f7e:	4b37      	ldr	r3, [pc, #220]	; (800105c <MX_ADC1_Init+0xf0>)
 8000f80:	4a37      	ldr	r2, [pc, #220]	; (8001060 <MX_ADC1_Init+0xf4>)
 8000f82:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000f84:	4b35      	ldr	r3, [pc, #212]	; (800105c <MX_ADC1_Init+0xf0>)
 8000f86:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000f8a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f8c:	4b33      	ldr	r3, [pc, #204]	; (800105c <MX_ADC1_Init+0xf0>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000f92:	4b32      	ldr	r3, [pc, #200]	; (800105c <MX_ADC1_Init+0xf0>)
 8000f94:	2201      	movs	r2, #1
 8000f96:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000f98:	4b30      	ldr	r3, [pc, #192]	; (800105c <MX_ADC1_Init+0xf0>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f9e:	4b2f      	ldr	r3, [pc, #188]	; (800105c <MX_ADC1_Init+0xf0>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000fa6:	4b2d      	ldr	r3, [pc, #180]	; (800105c <MX_ADC1_Init+0xf0>)
 8000fa8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000fac:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T4_CC4;
 8000fae:	4b2b      	ldr	r3, [pc, #172]	; (800105c <MX_ADC1_Init+0xf0>)
 8000fb0:	f04f 6210 	mov.w	r2, #150994944	; 0x9000000
 8000fb4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fb6:	4b29      	ldr	r3, [pc, #164]	; (800105c <MX_ADC1_Init+0xf0>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8000fbc:	4b27      	ldr	r3, [pc, #156]	; (800105c <MX_ADC1_Init+0xf0>)
 8000fbe:	2204      	movs	r2, #4
 8000fc0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000fc2:	4b26      	ldr	r3, [pc, #152]	; (800105c <MX_ADC1_Init+0xf0>)
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fca:	4b24      	ldr	r3, [pc, #144]	; (800105c <MX_ADC1_Init+0xf0>)
 8000fcc:	2201      	movs	r2, #1
 8000fce:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000fd0:	4822      	ldr	r0, [pc, #136]	; (800105c <MX_ADC1_Init+0xf0>)
 8000fd2:	f005 fb67 	bl	80066a4 <HAL_ADC_Init>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d001      	beq.n	8000fe0 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8000fdc:	f003 f9d4 	bl	8004388 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000fe0:	2303      	movs	r3, #3
 8000fe2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fec:	463b      	mov	r3, r7
 8000fee:	4619      	mov	r1, r3
 8000ff0:	481a      	ldr	r0, [pc, #104]	; (800105c <MX_ADC1_Init+0xf0>)
 8000ff2:	f005 fca1 	bl	8006938 <HAL_ADC_ConfigChannel>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d001      	beq.n	8001000 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000ffc:	f003 f9c4 	bl	8004388 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001000:	2304      	movs	r3, #4
 8001002:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001004:	2302      	movs	r3, #2
 8001006:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001008:	463b      	mov	r3, r7
 800100a:	4619      	mov	r1, r3
 800100c:	4813      	ldr	r0, [pc, #76]	; (800105c <MX_ADC1_Init+0xf0>)
 800100e:	f005 fc93 	bl	8006938 <HAL_ADC_ConfigChannel>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d001      	beq.n	800101c <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8001018:	f003 f9b6 	bl	8004388 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800101c:	2305      	movs	r3, #5
 800101e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8001020:	2303      	movs	r3, #3
 8001022:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001024:	463b      	mov	r3, r7
 8001026:	4619      	mov	r1, r3
 8001028:	480c      	ldr	r0, [pc, #48]	; (800105c <MX_ADC1_Init+0xf0>)
 800102a:	f005 fc85 	bl	8006938 <HAL_ADC_ConfigChannel>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d001      	beq.n	8001038 <MX_ADC1_Init+0xcc>
  {
    Error_Handler();
 8001034:	f003 f9a8 	bl	8004388 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001038:	2306      	movs	r3, #6
 800103a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 800103c:	2304      	movs	r3, #4
 800103e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001040:	463b      	mov	r3, r7
 8001042:	4619      	mov	r1, r3
 8001044:	4805      	ldr	r0, [pc, #20]	; (800105c <MX_ADC1_Init+0xf0>)
 8001046:	f005 fc77 	bl	8006938 <HAL_ADC_ConfigChannel>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d001      	beq.n	8001054 <MX_ADC1_Init+0xe8>
  {
    Error_Handler();
 8001050:	f003 f99a 	bl	8004388 <Error_Handler>
  }

}
 8001054:	bf00      	nop
 8001056:	3710      	adds	r7, #16
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}
 800105c:	200007b0 	.word	0x200007b0
 8001060:	40012000 	.word	0x40012000

08001064 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b08a      	sub	sp, #40	; 0x28
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800106c:	f107 0314 	add.w	r3, r7, #20
 8001070:	2200      	movs	r2, #0
 8001072:	601a      	str	r2, [r3, #0]
 8001074:	605a      	str	r2, [r3, #4]
 8001076:	609a      	str	r2, [r3, #8]
 8001078:	60da      	str	r2, [r3, #12]
 800107a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4a2f      	ldr	r2, [pc, #188]	; (8001140 <HAL_ADC_MspInit+0xdc>)
 8001082:	4293      	cmp	r3, r2
 8001084:	d157      	bne.n	8001136 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001086:	2300      	movs	r3, #0
 8001088:	613b      	str	r3, [r7, #16]
 800108a:	4b2e      	ldr	r3, [pc, #184]	; (8001144 <HAL_ADC_MspInit+0xe0>)
 800108c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800108e:	4a2d      	ldr	r2, [pc, #180]	; (8001144 <HAL_ADC_MspInit+0xe0>)
 8001090:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001094:	6453      	str	r3, [r2, #68]	; 0x44
 8001096:	4b2b      	ldr	r3, [pc, #172]	; (8001144 <HAL_ADC_MspInit+0xe0>)
 8001098:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800109a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800109e:	613b      	str	r3, [r7, #16]
 80010a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010a2:	2300      	movs	r3, #0
 80010a4:	60fb      	str	r3, [r7, #12]
 80010a6:	4b27      	ldr	r3, [pc, #156]	; (8001144 <HAL_ADC_MspInit+0xe0>)
 80010a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010aa:	4a26      	ldr	r2, [pc, #152]	; (8001144 <HAL_ADC_MspInit+0xe0>)
 80010ac:	f043 0301 	orr.w	r3, r3, #1
 80010b0:	6313      	str	r3, [r2, #48]	; 0x30
 80010b2:	4b24      	ldr	r3, [pc, #144]	; (8001144 <HAL_ADC_MspInit+0xe0>)
 80010b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b6:	f003 0301 	and.w	r3, r3, #1
 80010ba:	60fb      	str	r3, [r7, #12]
 80010bc:	68fb      	ldr	r3, [r7, #12]
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = AIN0_Pin|AIN1_Pin|AIN2_Pin|AIN3_Pin;
 80010be:	2378      	movs	r3, #120	; 0x78
 80010c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010c2:	2303      	movs	r3, #3
 80010c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c6:	2300      	movs	r3, #0
 80010c8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ca:	f107 0314 	add.w	r3, r7, #20
 80010ce:	4619      	mov	r1, r3
 80010d0:	481d      	ldr	r0, [pc, #116]	; (8001148 <HAL_ADC_MspInit+0xe4>)
 80010d2:	f007 fbe7 	bl	80088a4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80010d6:	4b1d      	ldr	r3, [pc, #116]	; (800114c <HAL_ADC_MspInit+0xe8>)
 80010d8:	4a1d      	ldr	r2, [pc, #116]	; (8001150 <HAL_ADC_MspInit+0xec>)
 80010da:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80010dc:	4b1b      	ldr	r3, [pc, #108]	; (800114c <HAL_ADC_MspInit+0xe8>)
 80010de:	2200      	movs	r2, #0
 80010e0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80010e2:	4b1a      	ldr	r3, [pc, #104]	; (800114c <HAL_ADC_MspInit+0xe8>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80010e8:	4b18      	ldr	r3, [pc, #96]	; (800114c <HAL_ADC_MspInit+0xe8>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80010ee:	4b17      	ldr	r3, [pc, #92]	; (800114c <HAL_ADC_MspInit+0xe8>)
 80010f0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010f4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80010f6:	4b15      	ldr	r3, [pc, #84]	; (800114c <HAL_ADC_MspInit+0xe8>)
 80010f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80010fc:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80010fe:	4b13      	ldr	r3, [pc, #76]	; (800114c <HAL_ADC_MspInit+0xe8>)
 8001100:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001104:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001106:	4b11      	ldr	r3, [pc, #68]	; (800114c <HAL_ADC_MspInit+0xe8>)
 8001108:	f44f 7280 	mov.w	r2, #256	; 0x100
 800110c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800110e:	4b0f      	ldr	r3, [pc, #60]	; (800114c <HAL_ADC_MspInit+0xe8>)
 8001110:	2200      	movs	r2, #0
 8001112:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001114:	4b0d      	ldr	r3, [pc, #52]	; (800114c <HAL_ADC_MspInit+0xe8>)
 8001116:	2200      	movs	r2, #0
 8001118:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800111a:	480c      	ldr	r0, [pc, #48]	; (800114c <HAL_ADC_MspInit+0xe8>)
 800111c:	f005 ff8e 	bl	800703c <HAL_DMA_Init>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8001126:	f003 f92f 	bl	8004388 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	4a07      	ldr	r2, [pc, #28]	; (800114c <HAL_ADC_MspInit+0xe8>)
 800112e:	639a      	str	r2, [r3, #56]	; 0x38
 8001130:	4a06      	ldr	r2, [pc, #24]	; (800114c <HAL_ADC_MspInit+0xe8>)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001136:	bf00      	nop
 8001138:	3728      	adds	r7, #40	; 0x28
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	40012000 	.word	0x40012000
 8001144:	40023800 	.word	0x40023800
 8001148:	40020000 	.word	0x40020000
 800114c:	200007f8 	.word	0x200007f8
 8001150:	40026410 	.word	0x40026410
 8001154:	00000000 	.word	0x00000000

08001158 <Conversion_ADC1>:
//	Value = (Value / 60);		//Ток

	return Value;
}
double Conversion_ADC1(uint16_t ADC_value)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b086      	sub	sp, #24
 800115c:	af00      	add	r7, sp, #0
 800115e:	4603      	mov	r3, r0
 8001160:	80fb      	strh	r3, [r7, #6]
	double Value = 0;
 8001162:	f04f 0200 	mov.w	r2, #0
 8001166:	f04f 0300 	mov.w	r3, #0
 800116a:	e9c7 2304 	strd	r2, r3, [r7, #16]
	const double Resolution = 0.0008056640625;
 800116e:	a314      	add	r3, pc, #80	; (adr r3, 80011c0 <Conversion_ADC1+0x68>)
 8001170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001174:	e9c7 2302 	strd	r2, r3, [r7, #8]

	Value = (ADC_value * Resolution);
 8001178:	88fb      	ldrh	r3, [r7, #6]
 800117a:	4618      	mov	r0, r3
 800117c:	f7ff f9e2 	bl	8000544 <__aeabi_i2d>
 8001180:	4602      	mov	r2, r0
 8001182:	460b      	mov	r3, r1
 8001184:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001188:	f7ff fa46 	bl	8000618 <__aeabi_dmul>
 800118c:	4602      	mov	r2, r0
 800118e:	460b      	mov	r3, r1
 8001190:	e9c7 2304 	strd	r2, r3, [r7, #16]
	Value = (Value * 3.2323232323232);	//Напряжение
 8001194:	a30c      	add	r3, pc, #48	; (adr r3, 80011c8 <Conversion_ADC1+0x70>)
 8001196:	e9d3 2300 	ldrd	r2, r3, [r3]
 800119a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800119e:	f7ff fa3b 	bl	8000618 <__aeabi_dmul>
 80011a2:	4602      	mov	r2, r0
 80011a4:	460b      	mov	r3, r1
 80011a6:	e9c7 2304 	strd	r2, r3, [r7, #16]

	return Value;
 80011aa:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80011ae:	ec43 2b17 	vmov	d7, r2, r3
}
 80011b2:	eeb0 0a47 	vmov.f32	s0, s14
 80011b6:	eef0 0a67 	vmov.f32	s1, s15
 80011ba:	3718      	adds	r7, #24
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	66666666 	.word	0x66666666
 80011c4:	3f4a6666 	.word	0x3f4a6666
 80011c8:	48676ee8 	.word	0x48676ee8
 80011cc:	4009dbcc 	.word	0x4009dbcc

080011d0 <cJSON_strcasecmp>:
static const char *ep;

const char *cJSON_GetErrorPtr(void) {return ep;}

static int cJSON_strcasecmp(const char *s1,const char *s2)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b085      	sub	sp, #20
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
 80011d8:	6039      	str	r1, [r7, #0]
	if (!s1) return (s1==s2)?0:1;if (!s2) return 1;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d107      	bne.n	80011f0 <cJSON_strcasecmp+0x20>
 80011e0:	687a      	ldr	r2, [r7, #4]
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	429a      	cmp	r2, r3
 80011e6:	bf14      	ite	ne
 80011e8:	2301      	movne	r3, #1
 80011ea:	2300      	moveq	r3, #0
 80011ec:	b2db      	uxtb	r3, r3
 80011ee:	e055      	b.n	800129c <cJSON_strcasecmp+0xcc>
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d10d      	bne.n	8001212 <cJSON_strcasecmp+0x42>
 80011f6:	2301      	movs	r3, #1
 80011f8:	e050      	b.n	800129c <cJSON_strcasecmp+0xcc>
	for(; tolower(*s1) == tolower(*s2); ++s1, ++s2)	if(*s1 == 0)	return 0;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	781b      	ldrb	r3, [r3, #0]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d101      	bne.n	8001206 <cJSON_strcasecmp+0x36>
 8001202:	2300      	movs	r3, #0
 8001204:	e04a      	b.n	800129c <cJSON_strcasecmp+0xcc>
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	3301      	adds	r3, #1
 800120a:	607b      	str	r3, [r7, #4]
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	3301      	adds	r3, #1
 8001210:	603b      	str	r3, [r7, #0]
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	781b      	ldrb	r3, [r3, #0]
 8001216:	73fb      	strb	r3, [r7, #15]
 8001218:	7bfb      	ldrb	r3, [r7, #15]
 800121a:	3301      	adds	r3, #1
 800121c:	4a22      	ldr	r2, [pc, #136]	; (80012a8 <cJSON_strcasecmp+0xd8>)
 800121e:	4413      	add	r3, r2
 8001220:	781b      	ldrb	r3, [r3, #0]
 8001222:	f003 0303 	and.w	r3, r3, #3
 8001226:	2b01      	cmp	r3, #1
 8001228:	d103      	bne.n	8001232 <cJSON_strcasecmp+0x62>
 800122a:	7bfb      	ldrb	r3, [r7, #15]
 800122c:	f103 0220 	add.w	r2, r3, #32
 8001230:	e000      	b.n	8001234 <cJSON_strcasecmp+0x64>
 8001232:	7bfa      	ldrb	r2, [r7, #15]
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	73bb      	strb	r3, [r7, #14]
 800123a:	7bbb      	ldrb	r3, [r7, #14]
 800123c:	3301      	adds	r3, #1
 800123e:	491a      	ldr	r1, [pc, #104]	; (80012a8 <cJSON_strcasecmp+0xd8>)
 8001240:	440b      	add	r3, r1
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	f003 0303 	and.w	r3, r3, #3
 8001248:	2b01      	cmp	r3, #1
 800124a:	d102      	bne.n	8001252 <cJSON_strcasecmp+0x82>
 800124c:	7bbb      	ldrb	r3, [r7, #14]
 800124e:	3320      	adds	r3, #32
 8001250:	e000      	b.n	8001254 <cJSON_strcasecmp+0x84>
 8001252:	7bbb      	ldrb	r3, [r7, #14]
 8001254:	429a      	cmp	r2, r3
 8001256:	d0d0      	beq.n	80011fa <cJSON_strcasecmp+0x2a>
	return tolower(*(const unsigned char *)s1) - tolower(*(const unsigned char *)s2);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	737b      	strb	r3, [r7, #13]
 800125e:	7b7b      	ldrb	r3, [r7, #13]
 8001260:	3301      	adds	r3, #1
 8001262:	4a11      	ldr	r2, [pc, #68]	; (80012a8 <cJSON_strcasecmp+0xd8>)
 8001264:	4413      	add	r3, r2
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	f003 0303 	and.w	r3, r3, #3
 800126c:	2b01      	cmp	r3, #1
 800126e:	d103      	bne.n	8001278 <cJSON_strcasecmp+0xa8>
 8001270:	7b7b      	ldrb	r3, [r7, #13]
 8001272:	f103 0220 	add.w	r2, r3, #32
 8001276:	e000      	b.n	800127a <cJSON_strcasecmp+0xaa>
 8001278:	7b7a      	ldrb	r2, [r7, #13]
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	781b      	ldrb	r3, [r3, #0]
 800127e:	733b      	strb	r3, [r7, #12]
 8001280:	7b3b      	ldrb	r3, [r7, #12]
 8001282:	3301      	adds	r3, #1
 8001284:	4908      	ldr	r1, [pc, #32]	; (80012a8 <cJSON_strcasecmp+0xd8>)
 8001286:	440b      	add	r3, r1
 8001288:	781b      	ldrb	r3, [r3, #0]
 800128a:	f003 0303 	and.w	r3, r3, #3
 800128e:	2b01      	cmp	r3, #1
 8001290:	d102      	bne.n	8001298 <cJSON_strcasecmp+0xc8>
 8001292:	7b3b      	ldrb	r3, [r7, #12]
 8001294:	3320      	adds	r3, #32
 8001296:	e000      	b.n	800129a <cJSON_strcasecmp+0xca>
 8001298:	7b3b      	ldrb	r3, [r7, #12]
 800129a:	1ad3      	subs	r3, r2, r3
}
 800129c:	4618      	mov	r0, r3
 800129e:	3714      	adds	r7, #20
 80012a0:	46bd      	mov	sp, r7
 80012a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a6:	4770      	bx	lr
 80012a8:	08020ea2 	.word	0x08020ea2

080012ac <cJSON_New_Item>:
	cJSON_free	 = (hooks->free_fn)?hooks->free_fn:free;
}

/* Internal constructor. */
static cJSON *cJSON_New_Item(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0
	cJSON* node = (cJSON*)cJSON_malloc(sizeof(cJSON));
 80012b2:	4b09      	ldr	r3, [pc, #36]	; (80012d8 <cJSON_New_Item+0x2c>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	2028      	movs	r0, #40	; 0x28
 80012b8:	4798      	blx	r3
 80012ba:	6078      	str	r0, [r7, #4]
	if (node) memset(node,0,sizeof(cJSON));
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d004      	beq.n	80012cc <cJSON_New_Item+0x20>
 80012c2:	2228      	movs	r2, #40	; 0x28
 80012c4:	2100      	movs	r1, #0
 80012c6:	6878      	ldr	r0, [r7, #4]
 80012c8:	f016 fe64 	bl	8017f94 <memset>
	return node;
 80012cc:	687b      	ldr	r3, [r7, #4]
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	3708      	adds	r7, #8
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	20000000 	.word	0x20000000

080012dc <cJSON_Delete>:

/* Delete a cJSON structure. */
void cJSON_Delete(cJSON *c)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b084      	sub	sp, #16
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
	cJSON *next;
	while (c)
 80012e4:	e037      	b.n	8001356 <cJSON_Delete+0x7a>
	{
		next=c->next;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	60fb      	str	r3, [r7, #12]
		if (!(c->type&cJSON_IsReference) && c->child) cJSON_Delete(c->child);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	68db      	ldr	r3, [r3, #12]
 80012f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d108      	bne.n	800130a <cJSON_Delete+0x2e>
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	689b      	ldr	r3, [r3, #8]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d004      	beq.n	800130a <cJSON_Delete+0x2e>
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	689b      	ldr	r3, [r3, #8]
 8001304:	4618      	mov	r0, r3
 8001306:	f7ff ffe9 	bl	80012dc <cJSON_Delete>
		if (!(c->type&cJSON_IsReference) && c->valuestring) cJSON_free(c->valuestring);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	68db      	ldr	r3, [r3, #12]
 800130e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001312:	2b00      	cmp	r3, #0
 8001314:	d109      	bne.n	800132a <cJSON_Delete+0x4e>
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	691b      	ldr	r3, [r3, #16]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d005      	beq.n	800132a <cJSON_Delete+0x4e>
 800131e:	4b12      	ldr	r3, [pc, #72]	; (8001368 <cJSON_Delete+0x8c>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	687a      	ldr	r2, [r7, #4]
 8001324:	6912      	ldr	r2, [r2, #16]
 8001326:	4610      	mov	r0, r2
 8001328:	4798      	blx	r3
		if (!(c->type&cJSON_StringIsConst) && c->string) cJSON_free(c->string);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	68db      	ldr	r3, [r3, #12]
 800132e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001332:	2b00      	cmp	r3, #0
 8001334:	d109      	bne.n	800134a <cJSON_Delete+0x6e>
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6a1b      	ldr	r3, [r3, #32]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d005      	beq.n	800134a <cJSON_Delete+0x6e>
 800133e:	4b0a      	ldr	r3, [pc, #40]	; (8001368 <cJSON_Delete+0x8c>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	687a      	ldr	r2, [r7, #4]
 8001344:	6a12      	ldr	r2, [r2, #32]
 8001346:	4610      	mov	r0, r2
 8001348:	4798      	blx	r3
		cJSON_free(c);
 800134a:	4b07      	ldr	r3, [pc, #28]	; (8001368 <cJSON_Delete+0x8c>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	6878      	ldr	r0, [r7, #4]
 8001350:	4798      	blx	r3
		c=next;
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	607b      	str	r3, [r7, #4]
	while (c)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d1c4      	bne.n	80012e6 <cJSON_Delete+0xa>
	}
}
 800135c:	bf00      	nop
 800135e:	bf00      	nop
 8001360:	3710      	adds	r7, #16
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	20000004 	.word	0x20000004
 800136c:	00000000 	.word	0x00000000

08001370 <parse_number>:

/* Parse the input text to generate a number, and populate the result into item. */
static const char *parse_number(cJSON *item,const char *num)
{
 8001370:	b5b0      	push	{r4, r5, r7, lr}
 8001372:	b08a      	sub	sp, #40	; 0x28
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
 8001378:	6039      	str	r1, [r7, #0]
	double n=0,sign=1,scale=0;int subscale=0,signsubscale=1;
 800137a:	f04f 0200 	mov.w	r2, #0
 800137e:	f04f 0300 	mov.w	r3, #0
 8001382:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8001386:	f04f 0200 	mov.w	r2, #0
 800138a:	4b83      	ldr	r3, [pc, #524]	; (8001598 <parse_number+0x228>)
 800138c:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8001390:	f04f 0200 	mov.w	r2, #0
 8001394:	f04f 0300 	mov.w	r3, #0
 8001398:	e9c7 2304 	strd	r2, r3, [r7, #16]
 800139c:	2300      	movs	r3, #0
 800139e:	60fb      	str	r3, [r7, #12]
 80013a0:	2301      	movs	r3, #1
 80013a2:	60bb      	str	r3, [r7, #8]

	if (*num=='-') sign=-1,num++;	/* Has sign? */
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	2b2d      	cmp	r3, #45	; 0x2d
 80013aa:	d107      	bne.n	80013bc <parse_number+0x4c>
 80013ac:	f04f 0200 	mov.w	r2, #0
 80013b0:	4b7a      	ldr	r3, [pc, #488]	; (800159c <parse_number+0x22c>)
 80013b2:	e9c7 2306 	strd	r2, r3, [r7, #24]
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	3301      	adds	r3, #1
 80013ba:	603b      	str	r3, [r7, #0]
	if (*num=='0') num++;			/* is zero */
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	2b30      	cmp	r3, #48	; 0x30
 80013c2:	d102      	bne.n	80013ca <parse_number+0x5a>
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	3301      	adds	r3, #1
 80013c8:	603b      	str	r3, [r7, #0]
	if (*num>='1' && *num<='9')	do	n=(n*10.0)+(*num++ -'0');	while (*num>='0' && *num<='9');	/* Number? */
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	781b      	ldrb	r3, [r3, #0]
 80013ce:	2b30      	cmp	r3, #48	; 0x30
 80013d0:	d928      	bls.n	8001424 <parse_number+0xb4>
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	781b      	ldrb	r3, [r3, #0]
 80013d6:	2b39      	cmp	r3, #57	; 0x39
 80013d8:	d824      	bhi.n	8001424 <parse_number+0xb4>
 80013da:	f04f 0200 	mov.w	r2, #0
 80013de:	4b70      	ldr	r3, [pc, #448]	; (80015a0 <parse_number+0x230>)
 80013e0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80013e4:	f7ff f918 	bl	8000618 <__aeabi_dmul>
 80013e8:	4602      	mov	r2, r0
 80013ea:	460b      	mov	r3, r1
 80013ec:	4614      	mov	r4, r2
 80013ee:	461d      	mov	r5, r3
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	1c5a      	adds	r2, r3, #1
 80013f4:	603a      	str	r2, [r7, #0]
 80013f6:	781b      	ldrb	r3, [r3, #0]
 80013f8:	3b30      	subs	r3, #48	; 0x30
 80013fa:	4618      	mov	r0, r3
 80013fc:	f7ff f8a2 	bl	8000544 <__aeabi_i2d>
 8001400:	4602      	mov	r2, r0
 8001402:	460b      	mov	r3, r1
 8001404:	4620      	mov	r0, r4
 8001406:	4629      	mov	r1, r5
 8001408:	f7fe ff50 	bl	80002ac <__adddf3>
 800140c:	4602      	mov	r2, r0
 800140e:	460b      	mov	r3, r1
 8001410:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	781b      	ldrb	r3, [r3, #0]
 8001418:	2b2f      	cmp	r3, #47	; 0x2f
 800141a:	d903      	bls.n	8001424 <parse_number+0xb4>
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	2b39      	cmp	r3, #57	; 0x39
 8001422:	d9da      	bls.n	80013da <parse_number+0x6a>
	if (*num=='.' && num[1]>='0' && num[1]<='9') {num++;		do	n=(n*10.0)+(*num++ -'0'),scale--; while (*num>='0' && *num<='9');}	/* Fractional part? */
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	2b2e      	cmp	r3, #46	; 0x2e
 800142a:	d13c      	bne.n	80014a6 <parse_number+0x136>
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	3301      	adds	r3, #1
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	2b2f      	cmp	r3, #47	; 0x2f
 8001434:	d937      	bls.n	80014a6 <parse_number+0x136>
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	3301      	adds	r3, #1
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	2b39      	cmp	r3, #57	; 0x39
 800143e:	d832      	bhi.n	80014a6 <parse_number+0x136>
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	3301      	adds	r3, #1
 8001444:	603b      	str	r3, [r7, #0]
 8001446:	f04f 0200 	mov.w	r2, #0
 800144a:	4b55      	ldr	r3, [pc, #340]	; (80015a0 <parse_number+0x230>)
 800144c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001450:	f7ff f8e2 	bl	8000618 <__aeabi_dmul>
 8001454:	4602      	mov	r2, r0
 8001456:	460b      	mov	r3, r1
 8001458:	4614      	mov	r4, r2
 800145a:	461d      	mov	r5, r3
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	1c5a      	adds	r2, r3, #1
 8001460:	603a      	str	r2, [r7, #0]
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	3b30      	subs	r3, #48	; 0x30
 8001466:	4618      	mov	r0, r3
 8001468:	f7ff f86c 	bl	8000544 <__aeabi_i2d>
 800146c:	4602      	mov	r2, r0
 800146e:	460b      	mov	r3, r1
 8001470:	4620      	mov	r0, r4
 8001472:	4629      	mov	r1, r5
 8001474:	f7fe ff1a 	bl	80002ac <__adddf3>
 8001478:	4602      	mov	r2, r0
 800147a:	460b      	mov	r3, r1
 800147c:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8001480:	f04f 0200 	mov.w	r2, #0
 8001484:	4b44      	ldr	r3, [pc, #272]	; (8001598 <parse_number+0x228>)
 8001486:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800148a:	f7fe ff0d 	bl	80002a8 <__aeabi_dsub>
 800148e:	4602      	mov	r2, r0
 8001490:	460b      	mov	r3, r1
 8001492:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	781b      	ldrb	r3, [r3, #0]
 800149a:	2b2f      	cmp	r3, #47	; 0x2f
 800149c:	d903      	bls.n	80014a6 <parse_number+0x136>
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	781b      	ldrb	r3, [r3, #0]
 80014a2:	2b39      	cmp	r3, #57	; 0x39
 80014a4:	d9cf      	bls.n	8001446 <parse_number+0xd6>
	if (*num=='e' || *num=='E')		/* Exponent? */
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	781b      	ldrb	r3, [r3, #0]
 80014aa:	2b65      	cmp	r3, #101	; 0x65
 80014ac:	d003      	beq.n	80014b6 <parse_number+0x146>
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	2b45      	cmp	r3, #69	; 0x45
 80014b4:	d12a      	bne.n	800150c <parse_number+0x19c>
	{	num++;if (*num=='+') num++;	else if (*num=='-') signsubscale=-1,num++;		/* With sign? */
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	3301      	adds	r3, #1
 80014ba:	603b      	str	r3, [r7, #0]
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	2b2b      	cmp	r3, #43	; 0x2b
 80014c2:	d103      	bne.n	80014cc <parse_number+0x15c>
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	3301      	adds	r3, #1
 80014c8:	603b      	str	r3, [r7, #0]
 80014ca:	e017      	b.n	80014fc <parse_number+0x18c>
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	2b2d      	cmp	r3, #45	; 0x2d
 80014d2:	d113      	bne.n	80014fc <parse_number+0x18c>
 80014d4:	f04f 33ff 	mov.w	r3, #4294967295
 80014d8:	60bb      	str	r3, [r7, #8]
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	3301      	adds	r3, #1
 80014de:	603b      	str	r3, [r7, #0]
		while (*num>='0' && *num<='9') subscale=(subscale*10)+(*num++ - '0');	/* Number? */
 80014e0:	e00c      	b.n	80014fc <parse_number+0x18c>
 80014e2:	68fa      	ldr	r2, [r7, #12]
 80014e4:	4613      	mov	r3, r2
 80014e6:	009b      	lsls	r3, r3, #2
 80014e8:	4413      	add	r3, r2
 80014ea:	005b      	lsls	r3, r3, #1
 80014ec:	4619      	mov	r1, r3
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	1c5a      	adds	r2, r3, #1
 80014f2:	603a      	str	r2, [r7, #0]
 80014f4:	781b      	ldrb	r3, [r3, #0]
 80014f6:	3b30      	subs	r3, #48	; 0x30
 80014f8:	440b      	add	r3, r1
 80014fa:	60fb      	str	r3, [r7, #12]
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	781b      	ldrb	r3, [r3, #0]
 8001500:	2b2f      	cmp	r3, #47	; 0x2f
 8001502:	d903      	bls.n	800150c <parse_number+0x19c>
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	2b39      	cmp	r3, #57	; 0x39
 800150a:	d9ea      	bls.n	80014e2 <parse_number+0x172>
	}

	n=sign*n*pow(10.0,(scale+subscale*signsubscale));	/* number = +/- number.fraction * 10^+/- exponent */
 800150c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001510:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001514:	f7ff f880 	bl	8000618 <__aeabi_dmul>
 8001518:	4602      	mov	r2, r0
 800151a:	460b      	mov	r3, r1
 800151c:	4614      	mov	r4, r2
 800151e:	461d      	mov	r5, r3
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	68ba      	ldr	r2, [r7, #8]
 8001524:	fb02 f303 	mul.w	r3, r2, r3
 8001528:	4618      	mov	r0, r3
 800152a:	f7ff f80b 	bl	8000544 <__aeabi_i2d>
 800152e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001532:	f7fe febb 	bl	80002ac <__adddf3>
 8001536:	4602      	mov	r2, r0
 8001538:	460b      	mov	r3, r1
 800153a:	ec43 2b17 	vmov	d7, r2, r3
 800153e:	eeb0 1a47 	vmov.f32	s2, s14
 8001542:	eef0 1a67 	vmov.f32	s3, s15
 8001546:	ed9f 0b12 	vldr	d0, [pc, #72]	; 8001590 <parse_number+0x220>
 800154a:	f01a ffc3 	bl	801c4d4 <pow>
 800154e:	ec53 2b10 	vmov	r2, r3, d0
 8001552:	4620      	mov	r0, r4
 8001554:	4629      	mov	r1, r5
 8001556:	f7ff f85f 	bl	8000618 <__aeabi_dmul>
 800155a:	4602      	mov	r2, r0
 800155c:	460b      	mov	r3, r1
 800155e:	e9c7 2308 	strd	r2, r3, [r7, #32]
	
	item->valuedouble=n;
 8001562:	6879      	ldr	r1, [r7, #4]
 8001564:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001568:	e9c1 2306 	strd	r2, r3, [r1, #24]
	item->valueint=(int)n;
 800156c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001570:	f7ff fb02 	bl	8000b78 <__aeabi_d2iz>
 8001574:	4602      	mov	r2, r0
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	615a      	str	r2, [r3, #20]
	item->type=cJSON_Number;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2203      	movs	r2, #3
 800157e:	60da      	str	r2, [r3, #12]
	return num;
 8001580:	683b      	ldr	r3, [r7, #0]
}
 8001582:	4618      	mov	r0, r3
 8001584:	3728      	adds	r7, #40	; 0x28
 8001586:	46bd      	mov	sp, r7
 8001588:	bdb0      	pop	{r4, r5, r7, pc}
 800158a:	bf00      	nop
 800158c:	f3af 8000 	nop.w
 8001590:	00000000 	.word	0x00000000
 8001594:	40240000 	.word	0x40240000
 8001598:	3ff00000 	.word	0x3ff00000
 800159c:	bff00000 	.word	0xbff00000
 80015a0:	40240000 	.word	0x40240000

080015a4 <parse_hex4>:
	}
	return str;
}

static unsigned parse_hex4(const char *str)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b085      	sub	sp, #20
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
	unsigned h=0;
 80015ac:	2300      	movs	r3, #0
 80015ae:	60fb      	str	r3, [r7, #12]
	if (*str>='0' && *str<='9') h+=(*str)-'0'; else if (*str>='A' && *str<='F') h+=10+(*str)-'A'; else if (*str>='a' && *str<='f') h+=10+(*str)-'a'; else return 0;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	781b      	ldrb	r3, [r3, #0]
 80015b4:	2b2f      	cmp	r3, #47	; 0x2f
 80015b6:	d90b      	bls.n	80015d0 <parse_hex4+0x2c>
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	781b      	ldrb	r3, [r3, #0]
 80015bc:	2b39      	cmp	r3, #57	; 0x39
 80015be:	d807      	bhi.n	80015d0 <parse_hex4+0x2c>
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	461a      	mov	r2, r3
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	4413      	add	r3, r2
 80015ca:	3b30      	subs	r3, #48	; 0x30
 80015cc:	60fb      	str	r3, [r7, #12]
 80015ce:	e021      	b.n	8001614 <parse_hex4+0x70>
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	781b      	ldrb	r3, [r3, #0]
 80015d4:	2b40      	cmp	r3, #64	; 0x40
 80015d6:	d90b      	bls.n	80015f0 <parse_hex4+0x4c>
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	781b      	ldrb	r3, [r3, #0]
 80015dc:	2b46      	cmp	r3, #70	; 0x46
 80015de:	d807      	bhi.n	80015f0 <parse_hex4+0x4c>
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	461a      	mov	r2, r3
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	4413      	add	r3, r2
 80015ea:	3b37      	subs	r3, #55	; 0x37
 80015ec:	60fb      	str	r3, [r7, #12]
 80015ee:	e011      	b.n	8001614 <parse_hex4+0x70>
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	781b      	ldrb	r3, [r3, #0]
 80015f4:	2b60      	cmp	r3, #96	; 0x60
 80015f6:	d90b      	bls.n	8001610 <parse_hex4+0x6c>
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	781b      	ldrb	r3, [r3, #0]
 80015fc:	2b66      	cmp	r3, #102	; 0x66
 80015fe:	d807      	bhi.n	8001610 <parse_hex4+0x6c>
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	781b      	ldrb	r3, [r3, #0]
 8001604:	461a      	mov	r2, r3
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	4413      	add	r3, r2
 800160a:	3b57      	subs	r3, #87	; 0x57
 800160c:	60fb      	str	r3, [r7, #12]
 800160e:	e001      	b.n	8001614 <parse_hex4+0x70>
 8001610:	2300      	movs	r3, #0
 8001612:	e0a8      	b.n	8001766 <parse_hex4+0x1c2>
	h=h<<4;str++;
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	011b      	lsls	r3, r3, #4
 8001618:	60fb      	str	r3, [r7, #12]
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	3301      	adds	r3, #1
 800161e:	607b      	str	r3, [r7, #4]
	if (*str>='0' && *str<='9') h+=(*str)-'0'; else if (*str>='A' && *str<='F') h+=10+(*str)-'A'; else if (*str>='a' && *str<='f') h+=10+(*str)-'a'; else return 0;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	2b2f      	cmp	r3, #47	; 0x2f
 8001626:	d90b      	bls.n	8001640 <parse_hex4+0x9c>
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	781b      	ldrb	r3, [r3, #0]
 800162c:	2b39      	cmp	r3, #57	; 0x39
 800162e:	d807      	bhi.n	8001640 <parse_hex4+0x9c>
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	781b      	ldrb	r3, [r3, #0]
 8001634:	461a      	mov	r2, r3
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	4413      	add	r3, r2
 800163a:	3b30      	subs	r3, #48	; 0x30
 800163c:	60fb      	str	r3, [r7, #12]
 800163e:	e021      	b.n	8001684 <parse_hex4+0xe0>
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	781b      	ldrb	r3, [r3, #0]
 8001644:	2b40      	cmp	r3, #64	; 0x40
 8001646:	d90b      	bls.n	8001660 <parse_hex4+0xbc>
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	781b      	ldrb	r3, [r3, #0]
 800164c:	2b46      	cmp	r3, #70	; 0x46
 800164e:	d807      	bhi.n	8001660 <parse_hex4+0xbc>
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	781b      	ldrb	r3, [r3, #0]
 8001654:	461a      	mov	r2, r3
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	4413      	add	r3, r2
 800165a:	3b37      	subs	r3, #55	; 0x37
 800165c:	60fb      	str	r3, [r7, #12]
 800165e:	e011      	b.n	8001684 <parse_hex4+0xe0>
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	781b      	ldrb	r3, [r3, #0]
 8001664:	2b60      	cmp	r3, #96	; 0x60
 8001666:	d90b      	bls.n	8001680 <parse_hex4+0xdc>
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	781b      	ldrb	r3, [r3, #0]
 800166c:	2b66      	cmp	r3, #102	; 0x66
 800166e:	d807      	bhi.n	8001680 <parse_hex4+0xdc>
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	781b      	ldrb	r3, [r3, #0]
 8001674:	461a      	mov	r2, r3
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	4413      	add	r3, r2
 800167a:	3b57      	subs	r3, #87	; 0x57
 800167c:	60fb      	str	r3, [r7, #12]
 800167e:	e001      	b.n	8001684 <parse_hex4+0xe0>
 8001680:	2300      	movs	r3, #0
 8001682:	e070      	b.n	8001766 <parse_hex4+0x1c2>
	h=h<<4;str++;
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	011b      	lsls	r3, r3, #4
 8001688:	60fb      	str	r3, [r7, #12]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	3301      	adds	r3, #1
 800168e:	607b      	str	r3, [r7, #4]
	if (*str>='0' && *str<='9') h+=(*str)-'0'; else if (*str>='A' && *str<='F') h+=10+(*str)-'A'; else if (*str>='a' && *str<='f') h+=10+(*str)-'a'; else return 0;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	781b      	ldrb	r3, [r3, #0]
 8001694:	2b2f      	cmp	r3, #47	; 0x2f
 8001696:	d90b      	bls.n	80016b0 <parse_hex4+0x10c>
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	781b      	ldrb	r3, [r3, #0]
 800169c:	2b39      	cmp	r3, #57	; 0x39
 800169e:	d807      	bhi.n	80016b0 <parse_hex4+0x10c>
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	461a      	mov	r2, r3
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	4413      	add	r3, r2
 80016aa:	3b30      	subs	r3, #48	; 0x30
 80016ac:	60fb      	str	r3, [r7, #12]
 80016ae:	e021      	b.n	80016f4 <parse_hex4+0x150>
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	2b40      	cmp	r3, #64	; 0x40
 80016b6:	d90b      	bls.n	80016d0 <parse_hex4+0x12c>
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	781b      	ldrb	r3, [r3, #0]
 80016bc:	2b46      	cmp	r3, #70	; 0x46
 80016be:	d807      	bhi.n	80016d0 <parse_hex4+0x12c>
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	781b      	ldrb	r3, [r3, #0]
 80016c4:	461a      	mov	r2, r3
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	4413      	add	r3, r2
 80016ca:	3b37      	subs	r3, #55	; 0x37
 80016cc:	60fb      	str	r3, [r7, #12]
 80016ce:	e011      	b.n	80016f4 <parse_hex4+0x150>
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	781b      	ldrb	r3, [r3, #0]
 80016d4:	2b60      	cmp	r3, #96	; 0x60
 80016d6:	d90b      	bls.n	80016f0 <parse_hex4+0x14c>
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	781b      	ldrb	r3, [r3, #0]
 80016dc:	2b66      	cmp	r3, #102	; 0x66
 80016de:	d807      	bhi.n	80016f0 <parse_hex4+0x14c>
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	781b      	ldrb	r3, [r3, #0]
 80016e4:	461a      	mov	r2, r3
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	4413      	add	r3, r2
 80016ea:	3b57      	subs	r3, #87	; 0x57
 80016ec:	60fb      	str	r3, [r7, #12]
 80016ee:	e001      	b.n	80016f4 <parse_hex4+0x150>
 80016f0:	2300      	movs	r3, #0
 80016f2:	e038      	b.n	8001766 <parse_hex4+0x1c2>
	h=h<<4;str++;
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	011b      	lsls	r3, r3, #4
 80016f8:	60fb      	str	r3, [r7, #12]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	3301      	adds	r3, #1
 80016fe:	607b      	str	r3, [r7, #4]
	if (*str>='0' && *str<='9') h+=(*str)-'0'; else if (*str>='A' && *str<='F') h+=10+(*str)-'A'; else if (*str>='a' && *str<='f') h+=10+(*str)-'a'; else return 0;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	781b      	ldrb	r3, [r3, #0]
 8001704:	2b2f      	cmp	r3, #47	; 0x2f
 8001706:	d90b      	bls.n	8001720 <parse_hex4+0x17c>
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	781b      	ldrb	r3, [r3, #0]
 800170c:	2b39      	cmp	r3, #57	; 0x39
 800170e:	d807      	bhi.n	8001720 <parse_hex4+0x17c>
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	461a      	mov	r2, r3
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	4413      	add	r3, r2
 800171a:	3b30      	subs	r3, #48	; 0x30
 800171c:	60fb      	str	r3, [r7, #12]
 800171e:	e021      	b.n	8001764 <parse_hex4+0x1c0>
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	781b      	ldrb	r3, [r3, #0]
 8001724:	2b40      	cmp	r3, #64	; 0x40
 8001726:	d90b      	bls.n	8001740 <parse_hex4+0x19c>
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	2b46      	cmp	r3, #70	; 0x46
 800172e:	d807      	bhi.n	8001740 <parse_hex4+0x19c>
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	781b      	ldrb	r3, [r3, #0]
 8001734:	461a      	mov	r2, r3
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	4413      	add	r3, r2
 800173a:	3b37      	subs	r3, #55	; 0x37
 800173c:	60fb      	str	r3, [r7, #12]
 800173e:	e011      	b.n	8001764 <parse_hex4+0x1c0>
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	2b60      	cmp	r3, #96	; 0x60
 8001746:	d90b      	bls.n	8001760 <parse_hex4+0x1bc>
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	781b      	ldrb	r3, [r3, #0]
 800174c:	2b66      	cmp	r3, #102	; 0x66
 800174e:	d807      	bhi.n	8001760 <parse_hex4+0x1bc>
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	781b      	ldrb	r3, [r3, #0]
 8001754:	461a      	mov	r2, r3
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	4413      	add	r3, r2
 800175a:	3b57      	subs	r3, #87	; 0x57
 800175c:	60fb      	str	r3, [r7, #12]
 800175e:	e001      	b.n	8001764 <parse_hex4+0x1c0>
 8001760:	2300      	movs	r3, #0
 8001762:	e000      	b.n	8001766 <parse_hex4+0x1c2>
	return h;
 8001764:	68fb      	ldr	r3, [r7, #12]
}
 8001766:	4618      	mov	r0, r3
 8001768:	3714      	adds	r7, #20
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr
	...

08001774 <parse_string>:

/* Parse the input text into an unescaped cstring, and populate item. */
static const unsigned char firstByteMark[7] = { 0x00, 0x00, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC };
static const char *parse_string(cJSON *item,const char *str)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b088      	sub	sp, #32
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
 800177c:	6039      	str	r1, [r7, #0]
	const char *ptr=str+1;char *ptr2;char *out;int len=0;unsigned uc,uc2;
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	3301      	adds	r3, #1
 8001782:	61fb      	str	r3, [r7, #28]
 8001784:	2300      	movs	r3, #0
 8001786:	617b      	str	r3, [r7, #20]
	if (*str!='\"') {ep=str;return 0;}	/* not a string! */
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	2b22      	cmp	r3, #34	; 0x22
 800178e:	d00d      	beq.n	80017ac <parse_string+0x38>
 8001790:	4aa3      	ldr	r2, [pc, #652]	; (8001a20 <parse_string+0x2ac>)
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	6013      	str	r3, [r2, #0]
 8001796:	2300      	movs	r3, #0
 8001798:	e168      	b.n	8001a6c <parse_string+0x2f8>
	
	while (*ptr!='\"' && *ptr && ++len) if (*ptr++ == '\\') ptr++;	/* Skip escaped quotes. */
 800179a:	69fb      	ldr	r3, [r7, #28]
 800179c:	1c5a      	adds	r2, r3, #1
 800179e:	61fa      	str	r2, [r7, #28]
 80017a0:	781b      	ldrb	r3, [r3, #0]
 80017a2:	2b5c      	cmp	r3, #92	; 0x5c
 80017a4:	d102      	bne.n	80017ac <parse_string+0x38>
 80017a6:	69fb      	ldr	r3, [r7, #28]
 80017a8:	3301      	adds	r3, #1
 80017aa:	61fb      	str	r3, [r7, #28]
 80017ac:	69fb      	ldr	r3, [r7, #28]
 80017ae:	781b      	ldrb	r3, [r3, #0]
 80017b0:	2b22      	cmp	r3, #34	; 0x22
 80017b2:	d009      	beq.n	80017c8 <parse_string+0x54>
 80017b4:	69fb      	ldr	r3, [r7, #28]
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d005      	beq.n	80017c8 <parse_string+0x54>
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	3301      	adds	r3, #1
 80017c0:	617b      	str	r3, [r7, #20]
 80017c2:	697b      	ldr	r3, [r7, #20]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d1e8      	bne.n	800179a <parse_string+0x26>
	
	out=(char*)cJSON_malloc(len+1);	/* This is how long we need for the string, roughly. */
 80017c8:	4b96      	ldr	r3, [pc, #600]	; (8001a24 <parse_string+0x2b0>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	697a      	ldr	r2, [r7, #20]
 80017ce:	3201      	adds	r2, #1
 80017d0:	4610      	mov	r0, r2
 80017d2:	4798      	blx	r3
 80017d4:	60f8      	str	r0, [r7, #12]
	if (!out) return 0;
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d101      	bne.n	80017e0 <parse_string+0x6c>
 80017dc:	2300      	movs	r3, #0
 80017de:	e145      	b.n	8001a6c <parse_string+0x2f8>
	
	ptr=str+1;ptr2=out;
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	3301      	adds	r3, #1
 80017e4:	61fb      	str	r3, [r7, #28]
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	61bb      	str	r3, [r7, #24]
	while (*ptr!='\"' && *ptr)
 80017ea:	e125      	b.n	8001a38 <parse_string+0x2c4>
	{
		if (*ptr!='\\') *ptr2++=*ptr++;
 80017ec:	69fb      	ldr	r3, [r7, #28]
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	2b5c      	cmp	r3, #92	; 0x5c
 80017f2:	d008      	beq.n	8001806 <parse_string+0x92>
 80017f4:	69fa      	ldr	r2, [r7, #28]
 80017f6:	1c53      	adds	r3, r2, #1
 80017f8:	61fb      	str	r3, [r7, #28]
 80017fa:	69bb      	ldr	r3, [r7, #24]
 80017fc:	1c59      	adds	r1, r3, #1
 80017fe:	61b9      	str	r1, [r7, #24]
 8001800:	7812      	ldrb	r2, [r2, #0]
 8001802:	701a      	strb	r2, [r3, #0]
 8001804:	e118      	b.n	8001a38 <parse_string+0x2c4>
		else
		{
			ptr++;
 8001806:	69fb      	ldr	r3, [r7, #28]
 8001808:	3301      	adds	r3, #1
 800180a:	61fb      	str	r3, [r7, #28]
			switch (*ptr)
 800180c:	69fb      	ldr	r3, [r7, #28]
 800180e:	781b      	ldrb	r3, [r3, #0]
 8001810:	3b62      	subs	r3, #98	; 0x62
 8001812:	2b13      	cmp	r3, #19
 8001814:	f200 80fc 	bhi.w	8001a10 <parse_string+0x29c>
 8001818:	a201      	add	r2, pc, #4	; (adr r2, 8001820 <parse_string+0xac>)
 800181a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800181e:	bf00      	nop
 8001820:	08001871 	.word	0x08001871
 8001824:	08001a11 	.word	0x08001a11
 8001828:	08001a11 	.word	0x08001a11
 800182c:	08001a11 	.word	0x08001a11
 8001830:	0800187d 	.word	0x0800187d
 8001834:	08001a11 	.word	0x08001a11
 8001838:	08001a11 	.word	0x08001a11
 800183c:	08001a11 	.word	0x08001a11
 8001840:	08001a11 	.word	0x08001a11
 8001844:	08001a11 	.word	0x08001a11
 8001848:	08001a11 	.word	0x08001a11
 800184c:	08001a11 	.word	0x08001a11
 8001850:	08001889 	.word	0x08001889
 8001854:	08001a11 	.word	0x08001a11
 8001858:	08001a11 	.word	0x08001a11
 800185c:	08001a11 	.word	0x08001a11
 8001860:	08001895 	.word	0x08001895
 8001864:	08001a11 	.word	0x08001a11
 8001868:	080018a1 	.word	0x080018a1
 800186c:	080018ad 	.word	0x080018ad
			{
				case 'b': *ptr2++='\b';	break;
 8001870:	69bb      	ldr	r3, [r7, #24]
 8001872:	1c5a      	adds	r2, r3, #1
 8001874:	61ba      	str	r2, [r7, #24]
 8001876:	2208      	movs	r2, #8
 8001878:	701a      	strb	r2, [r3, #0]
 800187a:	e0da      	b.n	8001a32 <parse_string+0x2be>
				case 'f': *ptr2++='\f';	break;
 800187c:	69bb      	ldr	r3, [r7, #24]
 800187e:	1c5a      	adds	r2, r3, #1
 8001880:	61ba      	str	r2, [r7, #24]
 8001882:	220c      	movs	r2, #12
 8001884:	701a      	strb	r2, [r3, #0]
 8001886:	e0d4      	b.n	8001a32 <parse_string+0x2be>
				case 'n': *ptr2++='\n';	break;
 8001888:	69bb      	ldr	r3, [r7, #24]
 800188a:	1c5a      	adds	r2, r3, #1
 800188c:	61ba      	str	r2, [r7, #24]
 800188e:	220a      	movs	r2, #10
 8001890:	701a      	strb	r2, [r3, #0]
 8001892:	e0ce      	b.n	8001a32 <parse_string+0x2be>
				case 'r': *ptr2++='\r';	break;
 8001894:	69bb      	ldr	r3, [r7, #24]
 8001896:	1c5a      	adds	r2, r3, #1
 8001898:	61ba      	str	r2, [r7, #24]
 800189a:	220d      	movs	r2, #13
 800189c:	701a      	strb	r2, [r3, #0]
 800189e:	e0c8      	b.n	8001a32 <parse_string+0x2be>
				case 't': *ptr2++='\t';	break;
 80018a0:	69bb      	ldr	r3, [r7, #24]
 80018a2:	1c5a      	adds	r2, r3, #1
 80018a4:	61ba      	str	r2, [r7, #24]
 80018a6:	2209      	movs	r2, #9
 80018a8:	701a      	strb	r2, [r3, #0]
 80018aa:	e0c2      	b.n	8001a32 <parse_string+0x2be>
				case 'u':	 /* transcode utf16 to utf8. */
					uc=parse_hex4(ptr+1);ptr+=4;	/* get the unicode char. */
 80018ac:	69fb      	ldr	r3, [r7, #28]
 80018ae:	3301      	adds	r3, #1
 80018b0:	4618      	mov	r0, r3
 80018b2:	f7ff fe77 	bl	80015a4 <parse_hex4>
 80018b6:	6138      	str	r0, [r7, #16]
 80018b8:	69fb      	ldr	r3, [r7, #28]
 80018ba:	3304      	adds	r3, #4
 80018bc:	61fb      	str	r3, [r7, #28]

					if ((uc>=0xDC00 && uc<=0xDFFF) || uc==0)	break;	/* check for invalid.	*/
 80018be:	693b      	ldr	r3, [r7, #16]
 80018c0:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 80018c4:	d304      	bcc.n	80018d0 <parse_string+0x15c>
 80018c6:	693b      	ldr	r3, [r7, #16]
 80018c8:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 80018cc:	f0c0 80b0 	bcc.w	8001a30 <parse_string+0x2bc>
 80018d0:	693b      	ldr	r3, [r7, #16]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	f000 80ac 	beq.w	8001a30 <parse_string+0x2bc>

					if (uc>=0xD800 && uc<=0xDBFF)	/* UTF16 surrogate pairs.	*/
 80018d8:	693b      	ldr	r3, [r7, #16]
 80018da:	f5b3 4f58 	cmp.w	r3, #55296	; 0xd800
 80018de:	d32d      	bcc.n	800193c <parse_string+0x1c8>
 80018e0:	693b      	ldr	r3, [r7, #16]
 80018e2:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 80018e6:	d229      	bcs.n	800193c <parse_string+0x1c8>
					{
						if (ptr[1]!='\\' || ptr[2]!='u')	break;	/* missing second-half of surrogate.	*/
 80018e8:	69fb      	ldr	r3, [r7, #28]
 80018ea:	3301      	adds	r3, #1
 80018ec:	781b      	ldrb	r3, [r3, #0]
 80018ee:	2b5c      	cmp	r3, #92	; 0x5c
 80018f0:	f040 809e 	bne.w	8001a30 <parse_string+0x2bc>
 80018f4:	69fb      	ldr	r3, [r7, #28]
 80018f6:	3302      	adds	r3, #2
 80018f8:	781b      	ldrb	r3, [r3, #0]
 80018fa:	2b75      	cmp	r3, #117	; 0x75
 80018fc:	f040 8098 	bne.w	8001a30 <parse_string+0x2bc>
						uc2=parse_hex4(ptr+3);ptr+=6;
 8001900:	69fb      	ldr	r3, [r7, #28]
 8001902:	3303      	adds	r3, #3
 8001904:	4618      	mov	r0, r3
 8001906:	f7ff fe4d 	bl	80015a4 <parse_hex4>
 800190a:	60b8      	str	r0, [r7, #8]
 800190c:	69fb      	ldr	r3, [r7, #28]
 800190e:	3306      	adds	r3, #6
 8001910:	61fb      	str	r3, [r7, #28]
						if (uc2<0xDC00 || uc2>0xDFFF)		break;	/* invalid second-half of surrogate.	*/
 8001912:	68bb      	ldr	r3, [r7, #8]
 8001914:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 8001918:	f0c0 808a 	bcc.w	8001a30 <parse_string+0x2bc>
 800191c:	68bb      	ldr	r3, [r7, #8]
 800191e:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 8001922:	f080 8085 	bcs.w	8001a30 <parse_string+0x2bc>
						uc=0x10000 + (((uc&0x3FF)<<10) | (uc2&0x3FF));
 8001926:	693b      	ldr	r3, [r7, #16]
 8001928:	029a      	lsls	r2, r3, #10
 800192a:	4b3f      	ldr	r3, [pc, #252]	; (8001a28 <parse_string+0x2b4>)
 800192c:	4013      	ands	r3, r2
 800192e:	68ba      	ldr	r2, [r7, #8]
 8001930:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8001934:	4313      	orrs	r3, r2
 8001936:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800193a:	613b      	str	r3, [r7, #16]
					}

					len=4;if (uc<0x80) len=1;else if (uc<0x800) len=2;else if (uc<0x10000) len=3; ptr2+=len;
 800193c:	2304      	movs	r3, #4
 800193e:	617b      	str	r3, [r7, #20]
 8001940:	693b      	ldr	r3, [r7, #16]
 8001942:	2b7f      	cmp	r3, #127	; 0x7f
 8001944:	d802      	bhi.n	800194c <parse_string+0x1d8>
 8001946:	2301      	movs	r3, #1
 8001948:	617b      	str	r3, [r7, #20]
 800194a:	e00c      	b.n	8001966 <parse_string+0x1f2>
 800194c:	693b      	ldr	r3, [r7, #16]
 800194e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001952:	d202      	bcs.n	800195a <parse_string+0x1e6>
 8001954:	2302      	movs	r3, #2
 8001956:	617b      	str	r3, [r7, #20]
 8001958:	e005      	b.n	8001966 <parse_string+0x1f2>
 800195a:	693b      	ldr	r3, [r7, #16]
 800195c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001960:	d201      	bcs.n	8001966 <parse_string+0x1f2>
 8001962:	2303      	movs	r3, #3
 8001964:	617b      	str	r3, [r7, #20]
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	69ba      	ldr	r2, [r7, #24]
 800196a:	4413      	add	r3, r2
 800196c:	61bb      	str	r3, [r7, #24]
 800196e:	697b      	ldr	r3, [r7, #20]
 8001970:	3b01      	subs	r3, #1
 8001972:	2b03      	cmp	r3, #3
 8001974:	d847      	bhi.n	8001a06 <parse_string+0x292>
 8001976:	a201      	add	r2, pc, #4	; (adr r2, 800197c <parse_string+0x208>)
 8001978:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800197c:	080019ed 	.word	0x080019ed
 8001980:	080019cd 	.word	0x080019cd
 8001984:	080019ad 	.word	0x080019ad
 8001988:	0800198d 	.word	0x0800198d
					
					switch (len) {
						case 4: *--ptr2 =((uc | 0x80) & 0xBF); uc >>= 6;
 800198c:	693b      	ldr	r3, [r7, #16]
 800198e:	b2db      	uxtb	r3, r3
 8001990:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001994:	b2db      	uxtb	r3, r3
 8001996:	69ba      	ldr	r2, [r7, #24]
 8001998:	3a01      	subs	r2, #1
 800199a:	61ba      	str	r2, [r7, #24]
 800199c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80019a0:	b2da      	uxtb	r2, r3
 80019a2:	69bb      	ldr	r3, [r7, #24]
 80019a4:	701a      	strb	r2, [r3, #0]
 80019a6:	693b      	ldr	r3, [r7, #16]
 80019a8:	099b      	lsrs	r3, r3, #6
 80019aa:	613b      	str	r3, [r7, #16]
						case 3: *--ptr2 =((uc | 0x80) & 0xBF); uc >>= 6;
 80019ac:	693b      	ldr	r3, [r7, #16]
 80019ae:	b2db      	uxtb	r3, r3
 80019b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80019b4:	b2db      	uxtb	r3, r3
 80019b6:	69ba      	ldr	r2, [r7, #24]
 80019b8:	3a01      	subs	r2, #1
 80019ba:	61ba      	str	r2, [r7, #24]
 80019bc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80019c0:	b2da      	uxtb	r2, r3
 80019c2:	69bb      	ldr	r3, [r7, #24]
 80019c4:	701a      	strb	r2, [r3, #0]
 80019c6:	693b      	ldr	r3, [r7, #16]
 80019c8:	099b      	lsrs	r3, r3, #6
 80019ca:	613b      	str	r3, [r7, #16]
						case 2: *--ptr2 =((uc | 0x80) & 0xBF); uc >>= 6;
 80019cc:	693b      	ldr	r3, [r7, #16]
 80019ce:	b2db      	uxtb	r3, r3
 80019d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80019d4:	b2db      	uxtb	r3, r3
 80019d6:	69ba      	ldr	r2, [r7, #24]
 80019d8:	3a01      	subs	r2, #1
 80019da:	61ba      	str	r2, [r7, #24]
 80019dc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80019e0:	b2da      	uxtb	r2, r3
 80019e2:	69bb      	ldr	r3, [r7, #24]
 80019e4:	701a      	strb	r2, [r3, #0]
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	099b      	lsrs	r3, r3, #6
 80019ea:	613b      	str	r3, [r7, #16]
						case 1: *--ptr2 =(uc | firstByteMark[len]);
 80019ec:	4a0f      	ldr	r2, [pc, #60]	; (8001a2c <parse_string+0x2b8>)
 80019ee:	697b      	ldr	r3, [r7, #20]
 80019f0:	4413      	add	r3, r2
 80019f2:	781a      	ldrb	r2, [r3, #0]
 80019f4:	693b      	ldr	r3, [r7, #16]
 80019f6:	b2db      	uxtb	r3, r3
 80019f8:	69b9      	ldr	r1, [r7, #24]
 80019fa:	3901      	subs	r1, #1
 80019fc:	61b9      	str	r1, [r7, #24]
 80019fe:	4313      	orrs	r3, r2
 8001a00:	b2da      	uxtb	r2, r3
 8001a02:	69bb      	ldr	r3, [r7, #24]
 8001a04:	701a      	strb	r2, [r3, #0]
					}
					ptr2+=len;
 8001a06:	697b      	ldr	r3, [r7, #20]
 8001a08:	69ba      	ldr	r2, [r7, #24]
 8001a0a:	4413      	add	r3, r2
 8001a0c:	61bb      	str	r3, [r7, #24]
					break;
 8001a0e:	e010      	b.n	8001a32 <parse_string+0x2be>
				default:  *ptr2++=*ptr; break;
 8001a10:	69bb      	ldr	r3, [r7, #24]
 8001a12:	1c5a      	adds	r2, r3, #1
 8001a14:	61ba      	str	r2, [r7, #24]
 8001a16:	69fa      	ldr	r2, [r7, #28]
 8001a18:	7812      	ldrb	r2, [r2, #0]
 8001a1a:	701a      	strb	r2, [r3, #0]
 8001a1c:	e009      	b.n	8001a32 <parse_string+0x2be>
 8001a1e:	bf00      	nop
 8001a20:	2000026c 	.word	0x2000026c
 8001a24:	20000000 	.word	0x20000000
 8001a28:	000ffc00 	.word	0x000ffc00
 8001a2c:	08020d84 	.word	0x08020d84
			}
			ptr++;
 8001a30:	bf00      	nop
 8001a32:	69fb      	ldr	r3, [r7, #28]
 8001a34:	3301      	adds	r3, #1
 8001a36:	61fb      	str	r3, [r7, #28]
	while (*ptr!='\"' && *ptr)
 8001a38:	69fb      	ldr	r3, [r7, #28]
 8001a3a:	781b      	ldrb	r3, [r3, #0]
 8001a3c:	2b22      	cmp	r3, #34	; 0x22
 8001a3e:	d004      	beq.n	8001a4a <parse_string+0x2d6>
 8001a40:	69fb      	ldr	r3, [r7, #28]
 8001a42:	781b      	ldrb	r3, [r3, #0]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	f47f aed1 	bne.w	80017ec <parse_string+0x78>
		}
	}
	*ptr2=0;
 8001a4a:	69bb      	ldr	r3, [r7, #24]
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	701a      	strb	r2, [r3, #0]
	if (*ptr=='\"') ptr++;
 8001a50:	69fb      	ldr	r3, [r7, #28]
 8001a52:	781b      	ldrb	r3, [r3, #0]
 8001a54:	2b22      	cmp	r3, #34	; 0x22
 8001a56:	d102      	bne.n	8001a5e <parse_string+0x2ea>
 8001a58:	69fb      	ldr	r3, [r7, #28]
 8001a5a:	3301      	adds	r3, #1
 8001a5c:	61fb      	str	r3, [r7, #28]
	item->valuestring=out;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	68fa      	ldr	r2, [r7, #12]
 8001a62:	611a      	str	r2, [r3, #16]
	item->type=cJSON_String;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2204      	movs	r2, #4
 8001a68:	60da      	str	r2, [r3, #12]
	return ptr;
 8001a6a:	69fb      	ldr	r3, [r7, #28]
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	3720      	adds	r7, #32
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}

08001a74 <skip>:
static char *print_array(cJSON *item,int depth,int fmt,printbuffer *p);
static const char *parse_object(cJSON *item,const char *value);
static char *print_object(cJSON *item,int depth,int fmt,printbuffer *p);

/* Utility to jump whitespace and cr/lf */
static const char *skip(const char *in) {while (in && *in && (unsigned char)*in<=32) in++; return in;}
 8001a74:	b480      	push	{r7}
 8001a76:	b083      	sub	sp, #12
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
 8001a7c:	e002      	b.n	8001a84 <skip+0x10>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	3301      	adds	r3, #1
 8001a82:	607b      	str	r3, [r7, #4]
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d007      	beq.n	8001a9a <skip+0x26>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	781b      	ldrb	r3, [r3, #0]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d003      	beq.n	8001a9a <skip+0x26>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	781b      	ldrb	r3, [r3, #0]
 8001a96:	2b20      	cmp	r3, #32
 8001a98:	d9f1      	bls.n	8001a7e <skip+0xa>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	370c      	adds	r7, #12
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa6:	4770      	bx	lr

08001aa8 <cJSON_ParseWithOpts>:

/* Parse an object - create a new root, and populate. */
cJSON *cJSON_ParseWithOpts(const char *value,const char **return_parse_end,int require_null_terminated)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b086      	sub	sp, #24
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	60f8      	str	r0, [r7, #12]
 8001ab0:	60b9      	str	r1, [r7, #8]
 8001ab2:	607a      	str	r2, [r7, #4]
	const char *end=0;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	617b      	str	r3, [r7, #20]
	cJSON *c=cJSON_New_Item();
 8001ab8:	f7ff fbf8 	bl	80012ac <cJSON_New_Item>
 8001abc:	6138      	str	r0, [r7, #16]
	ep=0;
 8001abe:	4b1b      	ldr	r3, [pc, #108]	; (8001b2c <cJSON_ParseWithOpts+0x84>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	601a      	str	r2, [r3, #0]
	if (!c) return 0;       /* memory fail */
 8001ac4:	693b      	ldr	r3, [r7, #16]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d101      	bne.n	8001ace <cJSON_ParseWithOpts+0x26>
 8001aca:	2300      	movs	r3, #0
 8001acc:	e02a      	b.n	8001b24 <cJSON_ParseWithOpts+0x7c>

	end=parse_value(c,skip(value));
 8001ace:	68f8      	ldr	r0, [r7, #12]
 8001ad0:	f7ff ffd0 	bl	8001a74 <skip>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	6938      	ldr	r0, [r7, #16]
 8001ada:	f000 f837 	bl	8001b4c <parse_value>
 8001ade:	6178      	str	r0, [r7, #20]
	if (!end)	{cJSON_Delete(c);return 0;}	/* parse failure. ep is set. */
 8001ae0:	697b      	ldr	r3, [r7, #20]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d104      	bne.n	8001af0 <cJSON_ParseWithOpts+0x48>
 8001ae6:	6938      	ldr	r0, [r7, #16]
 8001ae8:	f7ff fbf8 	bl	80012dc <cJSON_Delete>
 8001aec:	2300      	movs	r3, #0
 8001aee:	e019      	b.n	8001b24 <cJSON_ParseWithOpts+0x7c>

	/* if we require null-terminated JSON without appended garbage, skip and then check for a null terminator */
	if (require_null_terminated) {end=skip(end);if (*end) {cJSON_Delete(c);ep=end;return 0;}}
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d00f      	beq.n	8001b16 <cJSON_ParseWithOpts+0x6e>
 8001af6:	6978      	ldr	r0, [r7, #20]
 8001af8:	f7ff ffbc 	bl	8001a74 <skip>
 8001afc:	6178      	str	r0, [r7, #20]
 8001afe:	697b      	ldr	r3, [r7, #20]
 8001b00:	781b      	ldrb	r3, [r3, #0]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d007      	beq.n	8001b16 <cJSON_ParseWithOpts+0x6e>
 8001b06:	6938      	ldr	r0, [r7, #16]
 8001b08:	f7ff fbe8 	bl	80012dc <cJSON_Delete>
 8001b0c:	4a07      	ldr	r2, [pc, #28]	; (8001b2c <cJSON_ParseWithOpts+0x84>)
 8001b0e:	697b      	ldr	r3, [r7, #20]
 8001b10:	6013      	str	r3, [r2, #0]
 8001b12:	2300      	movs	r3, #0
 8001b14:	e006      	b.n	8001b24 <cJSON_ParseWithOpts+0x7c>
	if (return_parse_end) *return_parse_end=end;
 8001b16:	68bb      	ldr	r3, [r7, #8]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d002      	beq.n	8001b22 <cJSON_ParseWithOpts+0x7a>
 8001b1c:	68bb      	ldr	r3, [r7, #8]
 8001b1e:	697a      	ldr	r2, [r7, #20]
 8001b20:	601a      	str	r2, [r3, #0]
	return c;
 8001b22:	693b      	ldr	r3, [r7, #16]
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	3718      	adds	r7, #24
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	2000026c 	.word	0x2000026c

08001b30 <cJSON_Parse>:
/* Default options for cJSON_Parse */
cJSON *cJSON_Parse(const char *value) {return cJSON_ParseWithOpts(value,0,0);}
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b082      	sub	sp, #8
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
 8001b38:	2200      	movs	r2, #0
 8001b3a:	2100      	movs	r1, #0
 8001b3c:	6878      	ldr	r0, [r7, #4]
 8001b3e:	f7ff ffb3 	bl	8001aa8 <cJSON_ParseWithOpts>
 8001b42:	4603      	mov	r3, r0
 8001b44:	4618      	mov	r0, r3
 8001b46:	3708      	adds	r7, #8
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}

08001b4c <parse_value>:
}


/* Parser core - when encountering text, process appropriately. */
static const char *parse_value(cJSON *item,const char *value)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b082      	sub	sp, #8
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
 8001b54:	6039      	str	r1, [r7, #0]
	if (!value)						return 0;	/* Fail on null. */
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d101      	bne.n	8001b60 <parse_value+0x14>
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	e060      	b.n	8001c22 <parse_value+0xd6>
	if (!strncmp(value,"null",4))	{ item->type=cJSON_NULL;  return value+4; }
 8001b60:	2204      	movs	r2, #4
 8001b62:	4932      	ldr	r1, [pc, #200]	; (8001c2c <parse_value+0xe0>)
 8001b64:	6838      	ldr	r0, [r7, #0]
 8001b66:	f016 ffed 	bl	8018b44 <strncmp>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d105      	bne.n	8001b7c <parse_value+0x30>
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2202      	movs	r2, #2
 8001b74:	60da      	str	r2, [r3, #12]
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	3304      	adds	r3, #4
 8001b7a:	e052      	b.n	8001c22 <parse_value+0xd6>
	if (!strncmp(value,"false",5))	{ item->type=cJSON_False; return value+5; }
 8001b7c:	2205      	movs	r2, #5
 8001b7e:	492c      	ldr	r1, [pc, #176]	; (8001c30 <parse_value+0xe4>)
 8001b80:	6838      	ldr	r0, [r7, #0]
 8001b82:	f016 ffdf 	bl	8018b44 <strncmp>
 8001b86:	4603      	mov	r3, r0
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d105      	bne.n	8001b98 <parse_value+0x4c>
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2200      	movs	r2, #0
 8001b90:	60da      	str	r2, [r3, #12]
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	3305      	adds	r3, #5
 8001b96:	e044      	b.n	8001c22 <parse_value+0xd6>
	if (!strncmp(value,"true",4))	{ item->type=cJSON_True; item->valueint=1;	return value+4; }
 8001b98:	2204      	movs	r2, #4
 8001b9a:	4926      	ldr	r1, [pc, #152]	; (8001c34 <parse_value+0xe8>)
 8001b9c:	6838      	ldr	r0, [r7, #0]
 8001b9e:	f016 ffd1 	bl	8018b44 <strncmp>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d108      	bne.n	8001bba <parse_value+0x6e>
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2201      	movs	r2, #1
 8001bac:	60da      	str	r2, [r3, #12]
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	615a      	str	r2, [r3, #20]
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	3304      	adds	r3, #4
 8001bb8:	e033      	b.n	8001c22 <parse_value+0xd6>
	if (*value=='\"')				{ return parse_string(item,value); }
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	781b      	ldrb	r3, [r3, #0]
 8001bbe:	2b22      	cmp	r3, #34	; 0x22
 8001bc0:	d105      	bne.n	8001bce <parse_value+0x82>
 8001bc2:	6839      	ldr	r1, [r7, #0]
 8001bc4:	6878      	ldr	r0, [r7, #4]
 8001bc6:	f7ff fdd5 	bl	8001774 <parse_string>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	e029      	b.n	8001c22 <parse_value+0xd6>
	if (*value=='-' || (*value>='0' && *value<='9'))	{ return parse_number(item,value); }
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	781b      	ldrb	r3, [r3, #0]
 8001bd2:	2b2d      	cmp	r3, #45	; 0x2d
 8001bd4:	d007      	beq.n	8001be6 <parse_value+0x9a>
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	781b      	ldrb	r3, [r3, #0]
 8001bda:	2b2f      	cmp	r3, #47	; 0x2f
 8001bdc:	d909      	bls.n	8001bf2 <parse_value+0xa6>
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	781b      	ldrb	r3, [r3, #0]
 8001be2:	2b39      	cmp	r3, #57	; 0x39
 8001be4:	d805      	bhi.n	8001bf2 <parse_value+0xa6>
 8001be6:	6839      	ldr	r1, [r7, #0]
 8001be8:	6878      	ldr	r0, [r7, #4]
 8001bea:	f7ff fbc1 	bl	8001370 <parse_number>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	e017      	b.n	8001c22 <parse_value+0xd6>
	if (*value=='[')				{ return parse_array(item,value); }
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	781b      	ldrb	r3, [r3, #0]
 8001bf6:	2b5b      	cmp	r3, #91	; 0x5b
 8001bf8:	d105      	bne.n	8001c06 <parse_value+0xba>
 8001bfa:	6839      	ldr	r1, [r7, #0]
 8001bfc:	6878      	ldr	r0, [r7, #4]
 8001bfe:	f000 f81d 	bl	8001c3c <parse_array>
 8001c02:	4603      	mov	r3, r0
 8001c04:	e00d      	b.n	8001c22 <parse_value+0xd6>
	if (*value=='{')				{ return parse_object(item,value); }
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	781b      	ldrb	r3, [r3, #0]
 8001c0a:	2b7b      	cmp	r3, #123	; 0x7b
 8001c0c:	d105      	bne.n	8001c1a <parse_value+0xce>
 8001c0e:	6839      	ldr	r1, [r7, #0]
 8001c10:	6878      	ldr	r0, [r7, #4]
 8001c12:	f000 f889 	bl	8001d28 <parse_object>
 8001c16:	4603      	mov	r3, r0
 8001c18:	e003      	b.n	8001c22 <parse_value+0xd6>

	ep=value;return 0;	/* failure. */
 8001c1a:	4a07      	ldr	r2, [pc, #28]	; (8001c38 <parse_value+0xec>)
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	6013      	str	r3, [r2, #0]
 8001c20:	2300      	movs	r3, #0
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	3708      	adds	r7, #8
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	0801d46c 	.word	0x0801d46c
 8001c30:	0801d474 	.word	0x0801d474
 8001c34:	0801d47c 	.word	0x0801d47c
 8001c38:	2000026c 	.word	0x2000026c

08001c3c <parse_array>:
	return out;
}

/* Build an array from input text. */
static const char *parse_array(cJSON *item,const char *value)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b084      	sub	sp, #16
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
 8001c44:	6039      	str	r1, [r7, #0]
	cJSON *child;
	if (*value!='[')	{ep=value;return 0;}	/* not an array! */
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	781b      	ldrb	r3, [r3, #0]
 8001c4a:	2b5b      	cmp	r3, #91	; 0x5b
 8001c4c:	d004      	beq.n	8001c58 <parse_array+0x1c>
 8001c4e:	4a35      	ldr	r2, [pc, #212]	; (8001d24 <parse_array+0xe8>)
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	6013      	str	r3, [r2, #0]
 8001c54:	2300      	movs	r3, #0
 8001c56:	e060      	b.n	8001d1a <parse_array+0xde>

	item->type=cJSON_Array;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2205      	movs	r2, #5
 8001c5c:	60da      	str	r2, [r3, #12]
	value=skip(value+1);
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	3301      	adds	r3, #1
 8001c62:	4618      	mov	r0, r3
 8001c64:	f7ff ff06 	bl	8001a74 <skip>
 8001c68:	6038      	str	r0, [r7, #0]
	if (*value==']') return value+1;	/* empty array. */
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	781b      	ldrb	r3, [r3, #0]
 8001c6e:	2b5d      	cmp	r3, #93	; 0x5d
 8001c70:	d102      	bne.n	8001c78 <parse_array+0x3c>
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	3301      	adds	r3, #1
 8001c76:	e050      	b.n	8001d1a <parse_array+0xde>

	item->child=child=cJSON_New_Item();
 8001c78:	f7ff fb18 	bl	80012ac <cJSON_New_Item>
 8001c7c:	60f8      	str	r0, [r7, #12]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	68fa      	ldr	r2, [r7, #12]
 8001c82:	609a      	str	r2, [r3, #8]
	if (!item->child) return 0;		 /* memory fail */
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	689b      	ldr	r3, [r3, #8]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d101      	bne.n	8001c90 <parse_array+0x54>
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	e044      	b.n	8001d1a <parse_array+0xde>
	value=skip(parse_value(child,skip(value)));	/* skip any spacing, get the value. */
 8001c90:	6838      	ldr	r0, [r7, #0]
 8001c92:	f7ff feef 	bl	8001a74 <skip>
 8001c96:	4603      	mov	r3, r0
 8001c98:	4619      	mov	r1, r3
 8001c9a:	68f8      	ldr	r0, [r7, #12]
 8001c9c:	f7ff ff56 	bl	8001b4c <parse_value>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f7ff fee6 	bl	8001a74 <skip>
 8001ca8:	6038      	str	r0, [r7, #0]
	if (!value) return 0;
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d125      	bne.n	8001cfc <parse_array+0xc0>
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	e032      	b.n	8001d1a <parse_array+0xde>

	while (*value==',')
	{
		cJSON *new_item;
		if (!(new_item=cJSON_New_Item())) return 0; 	/* memory fail */
 8001cb4:	f7ff fafa 	bl	80012ac <cJSON_New_Item>
 8001cb8:	60b8      	str	r0, [r7, #8]
 8001cba:	68bb      	ldr	r3, [r7, #8]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d101      	bne.n	8001cc4 <parse_array+0x88>
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	e02a      	b.n	8001d1a <parse_array+0xde>
		child->next=new_item;new_item->prev=child;child=new_item;
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	68ba      	ldr	r2, [r7, #8]
 8001cc8:	601a      	str	r2, [r3, #0]
 8001cca:	68bb      	ldr	r3, [r7, #8]
 8001ccc:	68fa      	ldr	r2, [r7, #12]
 8001cce:	605a      	str	r2, [r3, #4]
 8001cd0:	68bb      	ldr	r3, [r7, #8]
 8001cd2:	60fb      	str	r3, [r7, #12]
		value=skip(parse_value(child,skip(value+1)));
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	3301      	adds	r3, #1
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f7ff fecb 	bl	8001a74 <skip>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	68f8      	ldr	r0, [r7, #12]
 8001ce4:	f7ff ff32 	bl	8001b4c <parse_value>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	4618      	mov	r0, r3
 8001cec:	f7ff fec2 	bl	8001a74 <skip>
 8001cf0:	6038      	str	r0, [r7, #0]
		if (!value) return 0;	/* memory fail */
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d101      	bne.n	8001cfc <parse_array+0xc0>
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	e00e      	b.n	8001d1a <parse_array+0xde>
	while (*value==',')
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	781b      	ldrb	r3, [r3, #0]
 8001d00:	2b2c      	cmp	r3, #44	; 0x2c
 8001d02:	d0d7      	beq.n	8001cb4 <parse_array+0x78>
	}

	if (*value==']') return value+1;	/* end of array */
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	781b      	ldrb	r3, [r3, #0]
 8001d08:	2b5d      	cmp	r3, #93	; 0x5d
 8001d0a:	d102      	bne.n	8001d12 <parse_array+0xd6>
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	3301      	adds	r3, #1
 8001d10:	e003      	b.n	8001d1a <parse_array+0xde>
	ep=value;return 0;	/* malformed. */
 8001d12:	4a04      	ldr	r2, [pc, #16]	; (8001d24 <parse_array+0xe8>)
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	6013      	str	r3, [r2, #0]
 8001d18:	2300      	movs	r3, #0
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	3710      	adds	r7, #16
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	2000026c 	.word	0x2000026c

08001d28 <parse_object>:
	return out;	
}

/* Build an object from the text. */
static const char *parse_object(cJSON *item,const char *value)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b084      	sub	sp, #16
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
 8001d30:	6039      	str	r1, [r7, #0]
	cJSON *child;
	if (*value!='{')	{ep=value;return 0;}	/* not an object! */
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	781b      	ldrb	r3, [r3, #0]
 8001d36:	2b7b      	cmp	r3, #123	; 0x7b
 8001d38:	d004      	beq.n	8001d44 <parse_object+0x1c>
 8001d3a:	4a59      	ldr	r2, [pc, #356]	; (8001ea0 <parse_object+0x178>)
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	6013      	str	r3, [r2, #0]
 8001d40:	2300      	movs	r3, #0
 8001d42:	e0a8      	b.n	8001e96 <parse_object+0x16e>
	
	item->type=cJSON_Object;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2206      	movs	r2, #6
 8001d48:	60da      	str	r2, [r3, #12]
	value=skip(value+1);
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	3301      	adds	r3, #1
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f7ff fe90 	bl	8001a74 <skip>
 8001d54:	6038      	str	r0, [r7, #0]
	if (*value=='}') return value+1;	/* empty array. */
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	781b      	ldrb	r3, [r3, #0]
 8001d5a:	2b7d      	cmp	r3, #125	; 0x7d
 8001d5c:	d102      	bne.n	8001d64 <parse_object+0x3c>
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	3301      	adds	r3, #1
 8001d62:	e098      	b.n	8001e96 <parse_object+0x16e>
	
	item->child=child=cJSON_New_Item();
 8001d64:	f7ff faa2 	bl	80012ac <cJSON_New_Item>
 8001d68:	60f8      	str	r0, [r7, #12]
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	68fa      	ldr	r2, [r7, #12]
 8001d6e:	609a      	str	r2, [r3, #8]
	if (!item->child) return 0;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	689b      	ldr	r3, [r3, #8]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d101      	bne.n	8001d7c <parse_object+0x54>
 8001d78:	2300      	movs	r3, #0
 8001d7a:	e08c      	b.n	8001e96 <parse_object+0x16e>
	value=skip(parse_string(child,skip(value)));
 8001d7c:	6838      	ldr	r0, [r7, #0]
 8001d7e:	f7ff fe79 	bl	8001a74 <skip>
 8001d82:	4603      	mov	r3, r0
 8001d84:	4619      	mov	r1, r3
 8001d86:	68f8      	ldr	r0, [r7, #12]
 8001d88:	f7ff fcf4 	bl	8001774 <parse_string>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f7ff fe70 	bl	8001a74 <skip>
 8001d94:	6038      	str	r0, [r7, #0]
	if (!value) return 0;
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d101      	bne.n	8001da0 <parse_object+0x78>
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	e07a      	b.n	8001e96 <parse_object+0x16e>
	child->string=child->valuestring;child->valuestring=0;
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	691a      	ldr	r2, [r3, #16]
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	621a      	str	r2, [r3, #32]
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	2200      	movs	r2, #0
 8001dac:	611a      	str	r2, [r3, #16]
	if (*value!=':') {ep=value;return 0;}	/* fail! */
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	781b      	ldrb	r3, [r3, #0]
 8001db2:	2b3a      	cmp	r3, #58	; 0x3a
 8001db4:	d004      	beq.n	8001dc0 <parse_object+0x98>
 8001db6:	4a3a      	ldr	r2, [pc, #232]	; (8001ea0 <parse_object+0x178>)
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	6013      	str	r3, [r2, #0]
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	e06a      	b.n	8001e96 <parse_object+0x16e>
	value=skip(parse_value(child,skip(value+1)));	/* skip any spacing, get the value. */
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	3301      	adds	r3, #1
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f7ff fe55 	bl	8001a74 <skip>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	4619      	mov	r1, r3
 8001dce:	68f8      	ldr	r0, [r7, #12]
 8001dd0:	f7ff febc 	bl	8001b4c <parse_value>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f7ff fe4c 	bl	8001a74 <skip>
 8001ddc:	6038      	str	r0, [r7, #0]
	if (!value) return 0;
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d149      	bne.n	8001e78 <parse_object+0x150>
 8001de4:	2300      	movs	r3, #0
 8001de6:	e056      	b.n	8001e96 <parse_object+0x16e>
	
	while (*value==',')
	{
		cJSON *new_item;
		if (!(new_item=cJSON_New_Item()))	return 0; /* memory fail */
 8001de8:	f7ff fa60 	bl	80012ac <cJSON_New_Item>
 8001dec:	60b8      	str	r0, [r7, #8]
 8001dee:	68bb      	ldr	r3, [r7, #8]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d101      	bne.n	8001df8 <parse_object+0xd0>
 8001df4:	2300      	movs	r3, #0
 8001df6:	e04e      	b.n	8001e96 <parse_object+0x16e>
		child->next=new_item;new_item->prev=child;child=new_item;
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	68ba      	ldr	r2, [r7, #8]
 8001dfc:	601a      	str	r2, [r3, #0]
 8001dfe:	68bb      	ldr	r3, [r7, #8]
 8001e00:	68fa      	ldr	r2, [r7, #12]
 8001e02:	605a      	str	r2, [r3, #4]
 8001e04:	68bb      	ldr	r3, [r7, #8]
 8001e06:	60fb      	str	r3, [r7, #12]
		value=skip(parse_string(child,skip(value+1)));
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	3301      	adds	r3, #1
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f7ff fe31 	bl	8001a74 <skip>
 8001e12:	4603      	mov	r3, r0
 8001e14:	4619      	mov	r1, r3
 8001e16:	68f8      	ldr	r0, [r7, #12]
 8001e18:	f7ff fcac 	bl	8001774 <parse_string>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f7ff fe28 	bl	8001a74 <skip>
 8001e24:	6038      	str	r0, [r7, #0]
		if (!value) return 0;
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d101      	bne.n	8001e30 <parse_object+0x108>
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	e032      	b.n	8001e96 <parse_object+0x16e>
		child->string=child->valuestring;child->valuestring=0;
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	691a      	ldr	r2, [r3, #16]
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	621a      	str	r2, [r3, #32]
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	611a      	str	r2, [r3, #16]
		if (*value!=':') {ep=value;return 0;}	/* fail! */
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	781b      	ldrb	r3, [r3, #0]
 8001e42:	2b3a      	cmp	r3, #58	; 0x3a
 8001e44:	d004      	beq.n	8001e50 <parse_object+0x128>
 8001e46:	4a16      	ldr	r2, [pc, #88]	; (8001ea0 <parse_object+0x178>)
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	6013      	str	r3, [r2, #0]
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	e022      	b.n	8001e96 <parse_object+0x16e>
		value=skip(parse_value(child,skip(value+1)));	/* skip any spacing, get the value. */
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	3301      	adds	r3, #1
 8001e54:	4618      	mov	r0, r3
 8001e56:	f7ff fe0d 	bl	8001a74 <skip>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	4619      	mov	r1, r3
 8001e5e:	68f8      	ldr	r0, [r7, #12]
 8001e60:	f7ff fe74 	bl	8001b4c <parse_value>
 8001e64:	4603      	mov	r3, r0
 8001e66:	4618      	mov	r0, r3
 8001e68:	f7ff fe04 	bl	8001a74 <skip>
 8001e6c:	6038      	str	r0, [r7, #0]
		if (!value) return 0;
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d101      	bne.n	8001e78 <parse_object+0x150>
 8001e74:	2300      	movs	r3, #0
 8001e76:	e00e      	b.n	8001e96 <parse_object+0x16e>
	while (*value==',')
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	781b      	ldrb	r3, [r3, #0]
 8001e7c:	2b2c      	cmp	r3, #44	; 0x2c
 8001e7e:	d0b3      	beq.n	8001de8 <parse_object+0xc0>
	}
	
	if (*value=='}') return value+1;	/* end of array */
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	781b      	ldrb	r3, [r3, #0]
 8001e84:	2b7d      	cmp	r3, #125	; 0x7d
 8001e86:	d102      	bne.n	8001e8e <parse_object+0x166>
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	3301      	adds	r3, #1
 8001e8c:	e003      	b.n	8001e96 <parse_object+0x16e>
	ep=value;return 0;	/* malformed. */
 8001e8e:	4a04      	ldr	r2, [pc, #16]	; (8001ea0 <parse_object+0x178>)
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	6013      	str	r3, [r2, #0]
 8001e94:	2300      	movs	r3, #0
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	3710      	adds	r7, #16
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	2000026c 	.word	0x2000026c

08001ea4 <cJSON_GetObjectItem>:
}

/* Get Array size/item / object item. */
int    cJSON_GetArraySize(cJSON *array)							{cJSON *c=array->child; int i=0;while(c)i++,c=c->next;return i;}
cJSON *cJSON_GetArrayItem(cJSON *array,int item)				{cJSON *c=array->child; while (c && item>0) item--,c=c->next; return c;}
cJSON *cJSON_GetObjectItem(cJSON *object,const char *string)	{cJSON *c=object->child; while (c && cJSON_strcasecmp(c->string,string)) c=c->next; return c;}
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b084      	sub	sp, #16
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
 8001eac:	6039      	str	r1, [r7, #0]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	689b      	ldr	r3, [r3, #8]
 8001eb2:	60fb      	str	r3, [r7, #12]
 8001eb4:	e002      	b.n	8001ebc <cJSON_GetObjectItem+0x18>
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	60fb      	str	r3, [r7, #12]
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d008      	beq.n	8001ed4 <cJSON_GetObjectItem+0x30>
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	6a1b      	ldr	r3, [r3, #32]
 8001ec6:	6839      	ldr	r1, [r7, #0]
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f7ff f981 	bl	80011d0 <cJSON_strcasecmp>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d1f0      	bne.n	8001eb6 <cJSON_GetObjectItem+0x12>
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	3710      	adds	r7, #16
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}
	...

08001ee0 <USART_Tx>:
char DBG_buf[DBG_RX_BUFFER_SIZE] = {0,};
char DBG_str[DBG_RX_BUFFER_SIZE] = {0,};

//Функция передачи байта по USART3
void USART_Tx(unsigned char Data)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b083      	sub	sp, #12
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	71fb      	strb	r3, [r7, #7]
	while(!(USART3->SR & USART_SR_TC));
 8001eea:	bf00      	nop
 8001eec:	4b07      	ldr	r3, [pc, #28]	; (8001f0c <USART_Tx+0x2c>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d0f9      	beq.n	8001eec <USART_Tx+0xc>
	USART3->DR = Data;
 8001ef8:	4a04      	ldr	r2, [pc, #16]	; (8001f0c <USART_Tx+0x2c>)
 8001efa:	79fb      	ldrb	r3, [r7, #7]
 8001efc:	6053      	str	r3, [r2, #4]
}
 8001efe:	bf00      	nop
 8001f00:	370c      	adds	r7, #12
 8001f02:	46bd      	mov	sp, r7
 8001f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f08:	4770      	bx	lr
 8001f0a:	bf00      	nop
 8001f0c:	40004800 	.word	0x40004800

08001f10 <SEND_str>:
//Функция отправки сткроки
//Принимает строку для отправки
void SEND_str(char * string)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b084      	sub	sp, #16
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
	uint8_t i = 0;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	73fb      	strb	r3, [r7, #15]
	while(string[i])
 8001f1c:	e009      	b.n	8001f32 <SEND_str+0x22>
	{
		USART_Tx(string[i]);
 8001f1e:	7bfb      	ldrb	r3, [r7, #15]
 8001f20:	687a      	ldr	r2, [r7, #4]
 8001f22:	4413      	add	r3, r2
 8001f24:	781b      	ldrb	r3, [r3, #0]
 8001f26:	4618      	mov	r0, r3
 8001f28:	f7ff ffda 	bl	8001ee0 <USART_Tx>
		i++;
 8001f2c:	7bfb      	ldrb	r3, [r7, #15]
 8001f2e:	3301      	adds	r3, #1
 8001f30:	73fb      	strb	r3, [r7, #15]
	while(string[i])
 8001f32:	7bfb      	ldrb	r3, [r7, #15]
 8001f34:	687a      	ldr	r2, [r7, #4]
 8001f36:	4413      	add	r3, r2
 8001f38:	781b      	ldrb	r3, [r3, #0]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d1ef      	bne.n	8001f1e <SEND_str+0xe>
	}
}
 8001f3e:	bf00      	nop
 8001f40:	bf00      	nop
 8001f42:	3710      	adds	r7, #16
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}

08001f48 <DEBUG_main>:
void DEBUG_main(void)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b082      	sub	sp, #8
 8001f4c:	af00      	add	r7, sp, #0
	if(dbg_available()) //если послали в терминал какую-то команду, то она перенаправиться в модем
 8001f4e:	f004 faa9 	bl	80064a4 <dbg_available>
 8001f52:	4603      	mov	r3, r0
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	f000 80d5 	beq.w	8002104 <DEBUG_main+0x1bc>
	{
		uint16_t i = 0;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	80fb      	strh	r3, [r7, #6]
		uint8_t fdbg = 1;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	717b      	strb	r3, [r7, #5]
		memset(DBG_buf, 0, DBG_RX_BUFFER_SIZE);
 8001f62:	2240      	movs	r2, #64	; 0x40
 8001f64:	2100      	movs	r1, #0
 8001f66:	4869      	ldr	r0, [pc, #420]	; (800210c <DEBUG_main+0x1c4>)
 8001f68:	f016 f814 	bl	8017f94 <memset>
		HAL_Delay(50);
 8001f6c:	2032      	movs	r0, #50	; 0x32
 8001f6e:	f004 fb75 	bl	800665c <HAL_Delay>

		while(dbg_available())
 8001f72:	e010      	b.n	8001f96 <DEBUG_main+0x4e>
		{
			DBG_buf[i++] = dbg_read();
 8001f74:	f004 fab2 	bl	80064dc <dbg_read>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	4619      	mov	r1, r3
 8001f7c:	88fb      	ldrh	r3, [r7, #6]
 8001f7e:	1c5a      	adds	r2, r3, #1
 8001f80:	80fa      	strh	r2, [r7, #6]
 8001f82:	461a      	mov	r2, r3
 8001f84:	b2c9      	uxtb	r1, r1
 8001f86:	4b61      	ldr	r3, [pc, #388]	; (800210c <DEBUG_main+0x1c4>)
 8001f88:	5499      	strb	r1, [r3, r2]
			if(i > DBG_RX_BUFFER_SIZE - 1)
 8001f8a:	88fb      	ldrh	r3, [r7, #6]
 8001f8c:	2b3f      	cmp	r3, #63	; 0x3f
 8001f8e:	d808      	bhi.n	8001fa2 <DEBUG_main+0x5a>
				break;
			HAL_Delay(1);
 8001f90:	2001      	movs	r0, #1
 8001f92:	f004 fb63 	bl	800665c <HAL_Delay>
		while(dbg_available())
 8001f96:	f004 fa85 	bl	80064a4 <dbg_available>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d1e9      	bne.n	8001f74 <DEBUG_main+0x2c>
 8001fa0:	e000      	b.n	8001fa4 <DEBUG_main+0x5c>
				break;
 8001fa2:	bf00      	nop
		}
		clear_string(DBG_buf);
 8001fa4:	4859      	ldr	r0, [pc, #356]	; (800210c <DEBUG_main+0x1c4>)
 8001fa6:	f000 faa1 	bl	80024ec <clear_string>
		if(strstr(DBG_buf, "test") != NULL)
 8001faa:	4959      	ldr	r1, [pc, #356]	; (8002110 <DEBUG_main+0x1c8>)
 8001fac:	4857      	ldr	r0, [pc, #348]	; (800210c <DEBUG_main+0x1c4>)
 8001fae:	f016 fddb 	bl	8018b68 <strstr>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d003      	beq.n	8001fc0 <DEBUG_main+0x78>
		{
			SEND_str("respone\n");
 8001fb8:	4856      	ldr	r0, [pc, #344]	; (8002114 <DEBUG_main+0x1cc>)
 8001fba:	f7ff ffa9 	bl	8001f10 <SEND_str>
 8001fbe:	e098      	b.n	80020f2 <DEBUG_main+0x1aa>
//		clear_string(DBG_buf);
//		snprintf(DBG_str, DBG_RX_BUFFER_SIZE, "%s\r\n", DBG_buf);
//		c = strchr(DBG_str, '.') - DBG_str;
//		HAL_UART_Transmit(&huart2, (uint8_t*)DBG_str, c, 1000);	//strlen(DBG_str)

		else if(strstr(DBG_buf, "AIN") != NULL)
 8001fc0:	4955      	ldr	r1, [pc, #340]	; (8002118 <DEBUG_main+0x1d0>)
 8001fc2:	4852      	ldr	r0, [pc, #328]	; (800210c <DEBUG_main+0x1c4>)
 8001fc4:	f016 fdd0 	bl	8018b68 <strstr>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d003      	beq.n	8001fd6 <DEBUG_main+0x8e>
		{
			json_input("{\"INSTRUCTION\":\"SET_PERIPHERALS\",\"COMMAND\":{\"TYPE\":\"ANALOG\",\"SET\":\"[1,1,0,0,1,1,0,0]\"},\"TIME\":\"1122334455\"}");
 8001fce:	4853      	ldr	r0, [pc, #332]	; (800211c <DEBUG_main+0x1d4>)
 8001fd0:	f000 fafa 	bl	80025c8 <json_input>
 8001fd4:	e08d      	b.n	80020f2 <DEBUG_main+0x1aa>
		}
		else if(strstr(DBG_buf, "DIN") != NULL)
 8001fd6:	4952      	ldr	r1, [pc, #328]	; (8002120 <DEBUG_main+0x1d8>)
 8001fd8:	484c      	ldr	r0, [pc, #304]	; (800210c <DEBUG_main+0x1c4>)
 8001fda:	f016 fdc5 	bl	8018b68 <strstr>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d003      	beq.n	8001fec <DEBUG_main+0xa4>
		{
			json_input("{\"INSTRUCTION\":\"SET_PERIPHERALS\",\"COMMAND\":{\"TYPE\":\"DIGITAL\",\"SET\":\"[0,0,1,1,0,0,1,1]\"},\"TIME\":\"1122334455\"}");
 8001fe4:	484f      	ldr	r0, [pc, #316]	; (8002124 <DEBUG_main+0x1dc>)
 8001fe6:	f000 faef 	bl	80025c8 <json_input>
 8001fea:	e082      	b.n	80020f2 <DEBUG_main+0x1aa>
		}
		else if(strstr(DBG_buf, "OCD") != NULL)
 8001fec:	494e      	ldr	r1, [pc, #312]	; (8002128 <DEBUG_main+0x1e0>)
 8001fee:	4847      	ldr	r0, [pc, #284]	; (800210c <DEBUG_main+0x1c4>)
 8001ff0:	f016 fdba 	bl	8018b68 <strstr>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d003      	beq.n	8002002 <DEBUG_main+0xba>
		{
			json_input("{\"INSTRUCTION\":\"SET_PERIPHERALS\",\"COMMAND\":{\"TYPE\":\"OCD\",\"SET\":\"[0,1,1,0,0,1,1,0]\"},\"TIME\":\"1122334455\"}");
 8001ffa:	484c      	ldr	r0, [pc, #304]	; (800212c <DEBUG_main+0x1e4>)
 8001ffc:	f000 fae4 	bl	80025c8 <json_input>
 8002000:	e077      	b.n	80020f2 <DEBUG_main+0x1aa>
		}
		//------------------------------------------------Digital-----------------------------------------------
		else if(strstr(DBG_buf, "SP1") != NULL)
 8002002:	494b      	ldr	r1, [pc, #300]	; (8002130 <DEBUG_main+0x1e8>)
 8002004:	4841      	ldr	r0, [pc, #260]	; (800210c <DEBUG_main+0x1c4>)
 8002006:	f016 fdaf 	bl	8018b68 <strstr>
 800200a:	4603      	mov	r3, r0
 800200c:	2b00      	cmp	r3, #0
 800200e:	d003      	beq.n	8002018 <DEBUG_main+0xd0>
		{
			json_input("{\"INSTRUCTION\":\"SET_PROGRAMM\",\"COMMAND\":{\"TYPE\":\"SET_DIDO\",\"D_IN\":\"VHOD1\",\"VAR_IN\":\"0\",\"D_OUT\":\"VIHOD1\",\"VAR_OUT\":\"1\"},\"TIME\":\"1122334455\"}");
 8002010:	4848      	ldr	r0, [pc, #288]	; (8002134 <DEBUG_main+0x1ec>)
 8002012:	f000 fad9 	bl	80025c8 <json_input>
 8002016:	e06c      	b.n	80020f2 <DEBUG_main+0x1aa>
		}
		else if(strstr(DBG_buf, "SP2") != NULL)
 8002018:	4947      	ldr	r1, [pc, #284]	; (8002138 <DEBUG_main+0x1f0>)
 800201a:	483c      	ldr	r0, [pc, #240]	; (800210c <DEBUG_main+0x1c4>)
 800201c:	f016 fda4 	bl	8018b68 <strstr>
 8002020:	4603      	mov	r3, r0
 8002022:	2b00      	cmp	r3, #0
 8002024:	d003      	beq.n	800202e <DEBUG_main+0xe6>
		{
			json_input("{\"INSTRUCTION\":\"SET_PROGRAMM\",\"COMMAND\":{\"TYPE\":\"SET_DIDO\",\"D_IN\":\"VHOD1\",\"VAR_IN\":\"0\",\"D_OUT\":\"VIHOD8\",\"VAR_OUT\":\"1\"},\"TIME\":\"1122334455\"}");
 8002026:	4845      	ldr	r0, [pc, #276]	; (800213c <DEBUG_main+0x1f4>)
 8002028:	f000 face 	bl	80025c8 <json_input>
 800202c:	e061      	b.n	80020f2 <DEBUG_main+0x1aa>
		}
		//----------------------------------------------End_Digital---------------------------------------------
		//------------------------------------------------Analog------------------------------------------------
		else if(strstr(DBG_buf, "SP3") != NULL)
 800202e:	4944      	ldr	r1, [pc, #272]	; (8002140 <DEBUG_main+0x1f8>)
 8002030:	4836      	ldr	r0, [pc, #216]	; (800210c <DEBUG_main+0x1c4>)
 8002032:	f016 fd99 	bl	8018b68 <strstr>
 8002036:	4603      	mov	r3, r0
 8002038:	2b00      	cmp	r3, #0
 800203a:	d003      	beq.n	8002044 <DEBUG_main+0xfc>
		{
			json_input("{\"INSTRUCTION\":\"SET_PROGRAMM\",\"COMMAND\":{\"TYPE\":\"SET_VAIDO\",\"A_IN\":\"VHOD1\",\"RANGE_LOW\":\"2.5\",\"RANGE_HIGH\":\"3.5\",\"D_OUT\":\"VIHOD3\",\"VAR_OUT\":\"1\"},\"TIME\":\"1122334455\"}");
 800203c:	4841      	ldr	r0, [pc, #260]	; (8002144 <DEBUG_main+0x1fc>)
 800203e:	f000 fac3 	bl	80025c8 <json_input>
 8002042:	e056      	b.n	80020f2 <DEBUG_main+0x1aa>
		}
		else if(strstr(DBG_buf, "SP4") != NULL)
 8002044:	4940      	ldr	r1, [pc, #256]	; (8002148 <DEBUG_main+0x200>)
 8002046:	4831      	ldr	r0, [pc, #196]	; (800210c <DEBUG_main+0x1c4>)
 8002048:	f016 fd8e 	bl	8018b68 <strstr>
 800204c:	4603      	mov	r3, r0
 800204e:	2b00      	cmp	r3, #0
 8002050:	d003      	beq.n	800205a <DEBUG_main+0x112>
		{
			json_input("{\"INSTRUCTION\":\"SET_PROGRAMM\",\"COMMAND\":{\"TYPE\":\"SET_VAIDO\",\"A_IN\":\"VHOD1\",\"RANGE_LOW\":\"0\",\"RANGE_HIGH\":\"1\",\"D_OUT\":\"VIHOD4\",\"VAR_OUT\":\"1\"},\"TIME\":\"1122334455\"}");
 8002052:	483e      	ldr	r0, [pc, #248]	; (800214c <DEBUG_main+0x204>)
 8002054:	f000 fab8 	bl	80025c8 <json_input>
 8002058:	e04b      	b.n	80020f2 <DEBUG_main+0x1aa>
		}
		//----------------------------------------------End_Analog----------------------------------------------
		//--------------------------------------------------PWM-------------------------------------------------
		else if(strstr(DBG_buf, "SP5") != NULL)
 800205a:	493d      	ldr	r1, [pc, #244]	; (8002150 <DEBUG_main+0x208>)
 800205c:	482b      	ldr	r0, [pc, #172]	; (800210c <DEBUG_main+0x1c4>)
 800205e:	f016 fd83 	bl	8018b68 <strstr>
 8002062:	4603      	mov	r3, r0
 8002064:	2b00      	cmp	r3, #0
 8002066:	d003      	beq.n	8002070 <DEBUG_main+0x128>
		{
			json_input("{\"INSTRUCTION\":\"SET_PROGRAMM\",\"COMMAND\":{\"TYPE\":\"SET_PWM\",\"PWM_OUT\":\"PWM1\",\"D_CYCLE\":\"10\"},\"TIME\":\"1122334455\"}");
 8002068:	483a      	ldr	r0, [pc, #232]	; (8002154 <DEBUG_main+0x20c>)
 800206a:	f000 faad 	bl	80025c8 <json_input>
 800206e:	e040      	b.n	80020f2 <DEBUG_main+0x1aa>
		}
		else if(strstr(DBG_buf, "SP6") != NULL)
 8002070:	4939      	ldr	r1, [pc, #228]	; (8002158 <DEBUG_main+0x210>)
 8002072:	4826      	ldr	r0, [pc, #152]	; (800210c <DEBUG_main+0x1c4>)
 8002074:	f016 fd78 	bl	8018b68 <strstr>
 8002078:	4603      	mov	r3, r0
 800207a:	2b00      	cmp	r3, #0
 800207c:	d003      	beq.n	8002086 <DEBUG_main+0x13e>
		{
			json_input("{\"INSTRUCTION\":\"SET_PROGRAMM\",\"COMMAND\":{\"TYPE\":\"SET_PWM\",\"PWM_OUT\":\"PWM2\",\"D_CYCLE\":\"25\"},\"TIME\":\"1122334455\"}");
 800207e:	4837      	ldr	r0, [pc, #220]	; (800215c <DEBUG_main+0x214>)
 8002080:	f000 faa2 	bl	80025c8 <json_input>
 8002084:	e035      	b.n	80020f2 <DEBUG_main+0x1aa>
		}
		else if(strstr(DBG_buf, "SP7") != NULL)
 8002086:	4936      	ldr	r1, [pc, #216]	; (8002160 <DEBUG_main+0x218>)
 8002088:	4820      	ldr	r0, [pc, #128]	; (800210c <DEBUG_main+0x1c4>)
 800208a:	f016 fd6d 	bl	8018b68 <strstr>
 800208e:	4603      	mov	r3, r0
 8002090:	2b00      	cmp	r3, #0
 8002092:	d003      	beq.n	800209c <DEBUG_main+0x154>
		{
			json_input("{\"INSTRUCTION\":\"SET_PROGRAMM\",\"COMMAND\":{\"TYPE\":\"SET_PWM\",\"PWM_OUT\":\"PWM3\",\"D_CYCLE\":\"50\"},\"TIME\":\"1122334455\"}");
 8002094:	4833      	ldr	r0, [pc, #204]	; (8002164 <DEBUG_main+0x21c>)
 8002096:	f000 fa97 	bl	80025c8 <json_input>
 800209a:	e02a      	b.n	80020f2 <DEBUG_main+0x1aa>
		}
		else if(strstr(DBG_buf, "SP8") != NULL)
 800209c:	4932      	ldr	r1, [pc, #200]	; (8002168 <DEBUG_main+0x220>)
 800209e:	481b      	ldr	r0, [pc, #108]	; (800210c <DEBUG_main+0x1c4>)
 80020a0:	f016 fd62 	bl	8018b68 <strstr>
 80020a4:	4603      	mov	r3, r0
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d003      	beq.n	80020b2 <DEBUG_main+0x16a>
		{
			json_input("{\"INSTRUCTION\":\"SET_PROGRAMM\",\"COMMAND\":{\"TYPE\":\"SET_PWM\",\"PWM_OUT\":\"PWM4\",\"D_CYCLE\":\"90\"},\"TIME\":\"1122334455\"}");
 80020aa:	4830      	ldr	r0, [pc, #192]	; (800216c <DEBUG_main+0x224>)
 80020ac:	f000 fa8c 	bl	80025c8 <json_input>
 80020b0:	e01f      	b.n	80020f2 <DEBUG_main+0x1aa>
		}
		else if(strstr(DBG_buf, "SP9") != NULL)
 80020b2:	492f      	ldr	r1, [pc, #188]	; (8002170 <DEBUG_main+0x228>)
 80020b4:	4815      	ldr	r0, [pc, #84]	; (800210c <DEBUG_main+0x1c4>)
 80020b6:	f016 fd57 	bl	8018b68 <strstr>
 80020ba:	4603      	mov	r3, r0
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d003      	beq.n	80020c8 <DEBUG_main+0x180>
		{
			json_input("{\"INSTRUCTION\":\"SET_PROGRAMM\",\"COMMAND\":{\"TYPE\":\"SET_PWM\",\"PWM_OUT\":\"PWM1\",\"D_CYCLE\":\"50\"},\"TIME\":\"1122334455\"}");
 80020c0:	482c      	ldr	r0, [pc, #176]	; (8002174 <DEBUG_main+0x22c>)
 80020c2:	f000 fa81 	bl	80025c8 <json_input>
 80020c6:	e014      	b.n	80020f2 <DEBUG_main+0x1aa>
		}
		//------------------------------------------------End_PWM-----------------------------------------------
		//----------------------------------------------TEMPERATURE---------------------------------------------
		else if(strstr(DBG_buf, "TP1") != NULL)
 80020c8:	492b      	ldr	r1, [pc, #172]	; (8002178 <DEBUG_main+0x230>)
 80020ca:	4810      	ldr	r0, [pc, #64]	; (800210c <DEBUG_main+0x1c4>)
 80020cc:	f016 fd4c 	bl	8018b68 <strstr>
 80020d0:	4603      	mov	r3, r0
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d003      	beq.n	80020de <DEBUG_main+0x196>
		{
			json_input("{\"INSTRUCTION\":\"SET_PROGRAMM\",\"COMMAND\":{\"TYPE\":\"SET_TEMP_PROFILE\",\"ROM_RAW\":\"28BF1E930C000031\",\"RANGE_TEMP_LOW\":\"+28\",\"RANGE_TEMP_HIGH\":\"+50\",\"D_OUT\":\"VIHOD3\",\"VAR_OUT\":\"1\"},\"TIME\":\"1122334455\"}");
 80020d6:	4829      	ldr	r0, [pc, #164]	; (800217c <DEBUG_main+0x234>)
 80020d8:	f000 fa76 	bl	80025c8 <json_input>
 80020dc:	e009      	b.n	80020f2 <DEBUG_main+0x1aa>
		}
		else if(strstr(DBG_buf, "TP2") != NULL)
 80020de:	4928      	ldr	r1, [pc, #160]	; (8002180 <DEBUG_main+0x238>)
 80020e0:	480a      	ldr	r0, [pc, #40]	; (800210c <DEBUG_main+0x1c4>)
 80020e2:	f016 fd41 	bl	8018b68 <strstr>
 80020e6:	4603      	mov	r3, r0
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d002      	beq.n	80020f2 <DEBUG_main+0x1aa>
		{
			json_input("{\"INSTRUCTION\":\"SET_PROGRAMM\",\"COMMAND\":{\"TYPE\":\"SET_TEMP_PROFILE\",\"ROM_RAW\":\"28790E950C000069\",\"RANGE_TEMP_LOW\":\"+28\",\"RANGE_TEMP_HIGH\":\"+50\",\"D_OUT\":\"VIHOD4\",\"VAR_OUT\":\"1\"},\"TIME\":\"1122334455\"}");
 80020ec:	4825      	ldr	r0, [pc, #148]	; (8002184 <DEBUG_main+0x23c>)
 80020ee:	f000 fa6b 	bl	80025c8 <json_input>
		}
		//--------------------------------------------End_TEMPERATURE-------------------------------------------
		if(fdbg)
 80020f2:	797b      	ldrb	r3, [r7, #5]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d005      	beq.n	8002104 <DEBUG_main+0x1bc>
		{
			snprintf(DBG_str, DBG_RX_BUFFER_SIZE, "%s\n", DBG_buf);
 80020f8:	4b04      	ldr	r3, [pc, #16]	; (800210c <DEBUG_main+0x1c4>)
 80020fa:	4a23      	ldr	r2, [pc, #140]	; (8002188 <DEBUG_main+0x240>)
 80020fc:	2140      	movs	r1, #64	; 0x40
 80020fe:	4823      	ldr	r0, [pc, #140]	; (800218c <DEBUG_main+0x244>)
 8002100:	f016 fccc 	bl	8018a9c <sniprintf>

			//json_input("{\"INSTRUCTION\":\"SET_PERIPHERALS\",\"COMMAND\":{\"TYPE\":\"DIGITAL\",\"SET\":\"[0,1,1,0,0,0,0,1]\"},\"TIME\":\"1122334455\"}");
		}
	}
}
 8002104:	bf00      	nop
 8002106:	3708      	adds	r7, #8
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}
 800210c:	20000270 	.word	0x20000270
 8002110:	0801d488 	.word	0x0801d488
 8002114:	0801d490 	.word	0x0801d490
 8002118:	0801d49c 	.word	0x0801d49c
 800211c:	0801d4a0 	.word	0x0801d4a0
 8002120:	0801d50c 	.word	0x0801d50c
 8002124:	0801d510 	.word	0x0801d510
 8002128:	0801d580 	.word	0x0801d580
 800212c:	0801d584 	.word	0x0801d584
 8002130:	0801d5f0 	.word	0x0801d5f0
 8002134:	0801d5f4 	.word	0x0801d5f4
 8002138:	0801d680 	.word	0x0801d680
 800213c:	0801d684 	.word	0x0801d684
 8002140:	0801d710 	.word	0x0801d710
 8002144:	0801d714 	.word	0x0801d714
 8002148:	0801d7bc 	.word	0x0801d7bc
 800214c:	0801d7c0 	.word	0x0801d7c0
 8002150:	0801d864 	.word	0x0801d864
 8002154:	0801d868 	.word	0x0801d868
 8002158:	0801d8d8 	.word	0x0801d8d8
 800215c:	0801d8dc 	.word	0x0801d8dc
 8002160:	0801d94c 	.word	0x0801d94c
 8002164:	0801d950 	.word	0x0801d950
 8002168:	0801d9c0 	.word	0x0801d9c0
 800216c:	0801d9c4 	.word	0x0801d9c4
 8002170:	0801da34 	.word	0x0801da34
 8002174:	0801da38 	.word	0x0801da38
 8002178:	0801daa8 	.word	0x0801daa8
 800217c:	0801daac 	.word	0x0801daac
 8002180:	0801db70 	.word	0x0801db70
 8002184:	0801db74 	.word	0x0801db74
 8002188:	0801dc38 	.word	0x0801dc38
 800218c:	200002b0 	.word	0x200002b0

08002190 <DWT_Init>:
 *      Author: mmorozov
 */
#include "main.h"

void DWT_Init(void)
{
 8002190:	b480      	push	{r7}
 8002192:	af00      	add	r7, sp, #0
    SCB_DEMCR |= CoreDebug_DEMCR_TRCENA_Msk; // разрешаем использовать счётчик
 8002194:	4b08      	ldr	r3, [pc, #32]	; (80021b8 <DWT_Init+0x28>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a07      	ldr	r2, [pc, #28]	; (80021b8 <DWT_Init+0x28>)
 800219a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800219e:	6013      	str	r3, [r2, #0]
    DWT_CONTROL |= DWT_CTRL_CYCCNTENA_Msk;   // запускаем счётчик
 80021a0:	4b06      	ldr	r3, [pc, #24]	; (80021bc <DWT_Init+0x2c>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a05      	ldr	r2, [pc, #20]	; (80021bc <DWT_Init+0x2c>)
 80021a6:	f043 0301 	orr.w	r3, r3, #1
 80021aa:	6013      	str	r3, [r2, #0]
}
 80021ac:	bf00      	nop
 80021ae:	46bd      	mov	sp, r7
 80021b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b4:	4770      	bx	lr
 80021b6:	bf00      	nop
 80021b8:	e000edfc 	.word	0xe000edfc
 80021bc:	e0001000 	.word	0xe0001000

080021c0 <delay_micros>:

void delay_micros(uint32_t us)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b085      	sub	sp, #20
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
    uint32_t us_count_tic =  us * (SystemCoreClock / 1000000); // получаем кол-во тактов за 1 мкс и умножаем на наше значение
 80021c8:	4b0c      	ldr	r3, [pc, #48]	; (80021fc <delay_micros+0x3c>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a0c      	ldr	r2, [pc, #48]	; (8002200 <delay_micros+0x40>)
 80021ce:	fba2 2303 	umull	r2, r3, r2, r3
 80021d2:	0c9a      	lsrs	r2, r3, #18
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	fb02 f303 	mul.w	r3, r2, r3
 80021da:	60fb      	str	r3, [r7, #12]
    DWT->CYCCNT = 0U; // обнуляем счётчик
 80021dc:	4b09      	ldr	r3, [pc, #36]	; (8002204 <delay_micros+0x44>)
 80021de:	2200      	movs	r2, #0
 80021e0:	605a      	str	r2, [r3, #4]
    while(DWT->CYCCNT < us_count_tic);
 80021e2:	bf00      	nop
 80021e4:	4b07      	ldr	r3, [pc, #28]	; (8002204 <delay_micros+0x44>)
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	68fa      	ldr	r2, [r7, #12]
 80021ea:	429a      	cmp	r2, r3
 80021ec:	d8fa      	bhi.n	80021e4 <delay_micros+0x24>
}
 80021ee:	bf00      	nop
 80021f0:	bf00      	nop
 80021f2:	3714      	adds	r7, #20
 80021f4:	46bd      	mov	sp, r7
 80021f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fa:	4770      	bx	lr
 80021fc:	2000005c 	.word	0x2000005c
 8002200:	431bde83 	.word	0x431bde83
 8002204:	e0001000 	.word	0xe0001000

08002208 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b082      	sub	sp, #8
 800220c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800220e:	2300      	movs	r3, #0
 8002210:	607b      	str	r3, [r7, #4]
 8002212:	4b23      	ldr	r3, [pc, #140]	; (80022a0 <MX_DMA_Init+0x98>)
 8002214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002216:	4a22      	ldr	r2, [pc, #136]	; (80022a0 <MX_DMA_Init+0x98>)
 8002218:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800221c:	6313      	str	r3, [r2, #48]	; 0x30
 800221e:	4b20      	ldr	r3, [pc, #128]	; (80022a0 <MX_DMA_Init+0x98>)
 8002220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002222:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002226:	607b      	str	r3, [r7, #4]
 8002228:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800222a:	2300      	movs	r3, #0
 800222c:	603b      	str	r3, [r7, #0]
 800222e:	4b1c      	ldr	r3, [pc, #112]	; (80022a0 <MX_DMA_Init+0x98>)
 8002230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002232:	4a1b      	ldr	r2, [pc, #108]	; (80022a0 <MX_DMA_Init+0x98>)
 8002234:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002238:	6313      	str	r3, [r2, #48]	; 0x30
 800223a:	4b19      	ldr	r3, [pc, #100]	; (80022a0 <MX_DMA_Init+0x98>)
 800223c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800223e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002242:	603b      	str	r3, [r7, #0]
 8002244:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8002246:	2200      	movs	r2, #0
 8002248:	2100      	movs	r1, #0
 800224a:	200d      	movs	r0, #13
 800224c:	f004 fecc 	bl	8006fe8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8002250:	200d      	movs	r0, #13
 8002252:	f004 fee5 	bl	8007020 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8002256:	2200      	movs	r2, #0
 8002258:	2100      	movs	r1, #0
 800225a:	200f      	movs	r0, #15
 800225c:	f004 fec4 	bl	8006fe8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8002260:	200f      	movs	r0, #15
 8002262:	f004 fedd 	bl	8007020 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8002266:	2200      	movs	r2, #0
 8002268:	2100      	movs	r1, #0
 800226a:	2010      	movs	r0, #16
 800226c:	f004 febc 	bl	8006fe8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002270:	2010      	movs	r0, #16
 8002272:	f004 fed5 	bl	8007020 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 8002276:	2200      	movs	r2, #0
 8002278:	2100      	movs	r1, #0
 800227a:	202f      	movs	r0, #47	; 0x2f
 800227c:	f004 feb4 	bl	8006fe8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8002280:	202f      	movs	r0, #47	; 0x2f
 8002282:	f004 fecd 	bl	8007020 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8002286:	2200      	movs	r2, #0
 8002288:	2100      	movs	r1, #0
 800228a:	2038      	movs	r0, #56	; 0x38
 800228c:	f004 feac 	bl	8006fe8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002290:	2038      	movs	r0, #56	; 0x38
 8002292:	f004 fec5 	bl	8007020 <HAL_NVIC_EnableIRQ>

}
 8002296:	bf00      	nop
 8002298:	3708      	adds	r7, #8
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}
 800229e:	bf00      	nop
 80022a0:	40023800 	.word	0x40023800

080022a4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b08c      	sub	sp, #48	; 0x30
 80022a8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022aa:	f107 031c 	add.w	r3, r7, #28
 80022ae:	2200      	movs	r2, #0
 80022b0:	601a      	str	r2, [r3, #0]
 80022b2:	605a      	str	r2, [r3, #4]
 80022b4:	609a      	str	r2, [r3, #8]
 80022b6:	60da      	str	r2, [r3, #12]
 80022b8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80022ba:	2300      	movs	r3, #0
 80022bc:	61bb      	str	r3, [r7, #24]
 80022be:	4b84      	ldr	r3, [pc, #528]	; (80024d0 <MX_GPIO_Init+0x22c>)
 80022c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c2:	4a83      	ldr	r2, [pc, #524]	; (80024d0 <MX_GPIO_Init+0x22c>)
 80022c4:	f043 0310 	orr.w	r3, r3, #16
 80022c8:	6313      	str	r3, [r2, #48]	; 0x30
 80022ca:	4b81      	ldr	r3, [pc, #516]	; (80024d0 <MX_GPIO_Init+0x22c>)
 80022cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ce:	f003 0310 	and.w	r3, r3, #16
 80022d2:	61bb      	str	r3, [r7, #24]
 80022d4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80022d6:	2300      	movs	r3, #0
 80022d8:	617b      	str	r3, [r7, #20]
 80022da:	4b7d      	ldr	r3, [pc, #500]	; (80024d0 <MX_GPIO_Init+0x22c>)
 80022dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022de:	4a7c      	ldr	r2, [pc, #496]	; (80024d0 <MX_GPIO_Init+0x22c>)
 80022e0:	f043 0304 	orr.w	r3, r3, #4
 80022e4:	6313      	str	r3, [r2, #48]	; 0x30
 80022e6:	4b7a      	ldr	r3, [pc, #488]	; (80024d0 <MX_GPIO_Init+0x22c>)
 80022e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ea:	f003 0304 	and.w	r3, r3, #4
 80022ee:	617b      	str	r3, [r7, #20]
 80022f0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80022f2:	2300      	movs	r3, #0
 80022f4:	613b      	str	r3, [r7, #16]
 80022f6:	4b76      	ldr	r3, [pc, #472]	; (80024d0 <MX_GPIO_Init+0x22c>)
 80022f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022fa:	4a75      	ldr	r2, [pc, #468]	; (80024d0 <MX_GPIO_Init+0x22c>)
 80022fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002300:	6313      	str	r3, [r2, #48]	; 0x30
 8002302:	4b73      	ldr	r3, [pc, #460]	; (80024d0 <MX_GPIO_Init+0x22c>)
 8002304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002306:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800230a:	613b      	str	r3, [r7, #16]
 800230c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800230e:	2300      	movs	r3, #0
 8002310:	60fb      	str	r3, [r7, #12]
 8002312:	4b6f      	ldr	r3, [pc, #444]	; (80024d0 <MX_GPIO_Init+0x22c>)
 8002314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002316:	4a6e      	ldr	r2, [pc, #440]	; (80024d0 <MX_GPIO_Init+0x22c>)
 8002318:	f043 0301 	orr.w	r3, r3, #1
 800231c:	6313      	str	r3, [r2, #48]	; 0x30
 800231e:	4b6c      	ldr	r3, [pc, #432]	; (80024d0 <MX_GPIO_Init+0x22c>)
 8002320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002322:	f003 0301 	and.w	r3, r3, #1
 8002326:	60fb      	str	r3, [r7, #12]
 8002328:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800232a:	2300      	movs	r3, #0
 800232c:	60bb      	str	r3, [r7, #8]
 800232e:	4b68      	ldr	r3, [pc, #416]	; (80024d0 <MX_GPIO_Init+0x22c>)
 8002330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002332:	4a67      	ldr	r2, [pc, #412]	; (80024d0 <MX_GPIO_Init+0x22c>)
 8002334:	f043 0302 	orr.w	r3, r3, #2
 8002338:	6313      	str	r3, [r2, #48]	; 0x30
 800233a:	4b65      	ldr	r3, [pc, #404]	; (80024d0 <MX_GPIO_Init+0x22c>)
 800233c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800233e:	f003 0302 	and.w	r3, r3, #2
 8002342:	60bb      	str	r3, [r7, #8]
 8002344:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002346:	2300      	movs	r3, #0
 8002348:	607b      	str	r3, [r7, #4]
 800234a:	4b61      	ldr	r3, [pc, #388]	; (80024d0 <MX_GPIO_Init+0x22c>)
 800234c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800234e:	4a60      	ldr	r2, [pc, #384]	; (80024d0 <MX_GPIO_Init+0x22c>)
 8002350:	f043 0308 	orr.w	r3, r3, #8
 8002354:	6313      	str	r3, [r2, #48]	; 0x30
 8002356:	4b5e      	ldr	r3, [pc, #376]	; (80024d0 <MX_GPIO_Init+0x22c>)
 8002358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800235a:	f003 0308 	and.w	r3, r3, #8
 800235e:	607b      	str	r3, [r7, #4]
 8002360:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FLAG_MCU_GPIO_Port, FLAG_MCU_Pin, GPIO_PIN_SET);
 8002362:	2201      	movs	r2, #1
 8002364:	2140      	movs	r1, #64	; 0x40
 8002366:	485b      	ldr	r0, [pc, #364]	; (80024d4 <MX_GPIO_Init+0x230>)
 8002368:	f006 fc50 	bl	8008c0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PWRON_GPIO_Port, PWRON_Pin, GPIO_PIN_RESET);
 800236c:	2200      	movs	r2, #0
 800236e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002372:	4859      	ldr	r0, [pc, #356]	; (80024d8 <MX_GPIO_Init+0x234>)
 8002374:	f006 fc4a 	bl	8008c0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(O0_GPIO_Port, O0_Pin, GPIO_PIN_RESET);
 8002378:	2200      	movs	r2, #0
 800237a:	2101      	movs	r1, #1
 800237c:	4857      	ldr	r0, [pc, #348]	; (80024dc <MX_GPIO_Init+0x238>)
 800237e:	f006 fc45 	bl	8008c0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, O1_Pin|O2_Pin|CS1__Pin, GPIO_PIN_RESET);
 8002382:	2200      	movs	r2, #0
 8002384:	2143      	movs	r1, #67	; 0x43
 8002386:	4856      	ldr	r0, [pc, #344]	; (80024e0 <MX_GPIO_Init+0x23c>)
 8002388:	f006 fc40 	bl	8008c0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, O3_Pin|O4_Pin|O5_Pin|O6_Pin
 800238c:	2200      	movs	r2, #0
 800238e:	f64f 7183 	movw	r1, #65411	; 0xff83
 8002392:	4850      	ldr	r0, [pc, #320]	; (80024d4 <MX_GPIO_Init+0x230>)
 8002394:	f006 fc3a 	bl	8008c0c <HAL_GPIO_WritePin>
                          |O7_Pin|S2_Pin|S3_Pin|S4_Pin
                          |S1_Pin|WP__Pin|CS2__Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PKEY_GPIO_Port, PKEY_Pin, GPIO_PIN_SET);
 8002398:	2201      	movs	r2, #1
 800239a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800239e:	484f      	ldr	r0, [pc, #316]	; (80024dc <MX_GPIO_Init+0x238>)
 80023a0:	f006 fc34 	bl	8008c0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, WR0_Pin|WR1_Pin|PWR1_Pin|RS485_DE_Pin
 80023a4:	2200      	movs	r2, #0
 80023a6:	219b      	movs	r1, #155	; 0x9b
 80023a8:	484e      	ldr	r0, [pc, #312]	; (80024e4 <MX_GPIO_Init+0x240>)
 80023aa:	f006 fc2f 	bl	8008c0c <HAL_GPIO_WritePin>
                          |RS485_RE__Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = FLAG_MCU_Pin|O3_Pin|O4_Pin|O5_Pin
 80023ae:	f64f 73c3 	movw	r3, #65475	; 0xffc3
 80023b2:	61fb      	str	r3, [r7, #28]
                          |O6_Pin|O7_Pin|S2_Pin|S3_Pin
                          |S4_Pin|S1_Pin|WP__Pin|CS2__Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023b4:	2301      	movs	r3, #1
 80023b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023b8:	2300      	movs	r3, #0
 80023ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023bc:	2303      	movs	r3, #3
 80023be:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80023c0:	f107 031c 	add.w	r3, r7, #28
 80023c4:	4619      	mov	r1, r3
 80023c6:	4843      	ldr	r0, [pc, #268]	; (80024d4 <MX_GPIO_Init+0x230>)
 80023c8:	f006 fa6c 	bl	80088a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PWRON_Pin;
 80023cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80023d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023d2:	2301      	movs	r3, #1
 80023d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023d6:	2300      	movs	r3, #0
 80023d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023da:	2300      	movs	r3, #0
 80023dc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(PWRON_GPIO_Port, &GPIO_InitStruct);
 80023de:	f107 031c 	add.w	r3, r7, #28
 80023e2:	4619      	mov	r1, r3
 80023e4:	483c      	ldr	r0, [pc, #240]	; (80024d8 <MX_GPIO_Init+0x234>)
 80023e6:	f006 fa5d 	bl	80088a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS__M_Pin;
 80023ea:	2301      	movs	r3, #1
 80023ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023ee:	2300      	movs	r3, #0
 80023f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023f2:	2300      	movs	r3, #0
 80023f4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(CS__M_GPIO_Port, &GPIO_InitStruct);
 80023f6:	f107 031c 	add.w	r3, r7, #28
 80023fa:	4619      	mov	r1, r3
 80023fc:	4836      	ldr	r0, [pc, #216]	; (80024d8 <MX_GPIO_Init+0x234>)
 80023fe:	f006 fa51 	bl	80088a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = O0_Pin|PKEY_Pin;
 8002402:	f640 0301 	movw	r3, #2049	; 0x801
 8002406:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002408:	2301      	movs	r3, #1
 800240a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800240c:	2300      	movs	r3, #0
 800240e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002410:	2303      	movs	r3, #3
 8002412:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002414:	f107 031c 	add.w	r3, r7, #28
 8002418:	4619      	mov	r1, r3
 800241a:	4830      	ldr	r0, [pc, #192]	; (80024dc <MX_GPIO_Init+0x238>)
 800241c:	f006 fa42 	bl	80088a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = O1_Pin|O2_Pin|CS1__Pin;
 8002420:	2343      	movs	r3, #67	; 0x43
 8002422:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002424:	2301      	movs	r3, #1
 8002426:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002428:	2300      	movs	r3, #0
 800242a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800242c:	2303      	movs	r3, #3
 800242e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002430:	f107 031c 	add.w	r3, r7, #28
 8002434:	4619      	mov	r1, r3
 8002436:	482a      	ldr	r0, [pc, #168]	; (80024e0 <MX_GPIO_Init+0x23c>)
 8002438:	f006 fa34 	bl	80088a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = IN7_Pin|IN6_Pin|IN5_Pin|IN4_Pin
 800243c:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8002440:	61fb      	str	r3, [r7, #28]
                          |IN3_Pin|IN2_Pin|IN1_Pin|IN0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002442:	4b29      	ldr	r3, [pc, #164]	; (80024e8 <MX_GPIO_Init+0x244>)
 8002444:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002446:	2300      	movs	r3, #0
 8002448:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800244a:	f107 031c 	add.w	r3, r7, #28
 800244e:	4619      	mov	r1, r3
 8002450:	4824      	ldr	r0, [pc, #144]	; (80024e4 <MX_GPIO_Init+0x240>)
 8002452:	f006 fa27 	bl	80088a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = WR0_Pin;
 8002456:	2301      	movs	r3, #1
 8002458:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800245a:	2311      	movs	r3, #17
 800245c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800245e:	2300      	movs	r3, #0
 8002460:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002462:	2302      	movs	r3, #2
 8002464:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(WR0_GPIO_Port, &GPIO_InitStruct);
 8002466:	f107 031c 	add.w	r3, r7, #28
 800246a:	4619      	mov	r1, r3
 800246c:	481d      	ldr	r0, [pc, #116]	; (80024e4 <MX_GPIO_Init+0x240>)
 800246e:	f006 fa19 	bl	80088a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = WR1_Pin|PWR1_Pin|RS485_DE_Pin|RS485_RE__Pin;
 8002472:	239a      	movs	r3, #154	; 0x9a
 8002474:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002476:	2301      	movs	r3, #1
 8002478:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800247a:	2300      	movs	r3, #0
 800247c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800247e:	2303      	movs	r3, #3
 8002480:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002482:	f107 031c 	add.w	r3, r7, #28
 8002486:	4619      	mov	r1, r3
 8002488:	4816      	ldr	r0, [pc, #88]	; (80024e4 <MX_GPIO_Init+0x240>)
 800248a:	f006 fa0b 	bl	80088a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CD_Pin;
 800248e:	2380      	movs	r3, #128	; 0x80
 8002490:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002492:	2300      	movs	r3, #0
 8002494:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002496:	2300      	movs	r3, #0
 8002498:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(CD_GPIO_Port, &GPIO_InitStruct);
 800249a:	f107 031c 	add.w	r3, r7, #28
 800249e:	4619      	mov	r1, r3
 80024a0:	480f      	ldr	r0, [pc, #60]	; (80024e0 <MX_GPIO_Init+0x23c>)
 80024a2:	f006 f9ff 	bl	80088a4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80024a6:	2200      	movs	r2, #0
 80024a8:	2100      	movs	r1, #0
 80024aa:	2017      	movs	r0, #23
 80024ac:	f004 fd9c 	bl	8006fe8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80024b0:	2017      	movs	r0, #23
 80024b2:	f004 fdb5 	bl	8007020 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80024b6:	2200      	movs	r2, #0
 80024b8:	2100      	movs	r1, #0
 80024ba:	2028      	movs	r0, #40	; 0x28
 80024bc:	f004 fd94 	bl	8006fe8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80024c0:	2028      	movs	r0, #40	; 0x28
 80024c2:	f004 fdad 	bl	8007020 <HAL_NVIC_EnableIRQ>

}
 80024c6:	bf00      	nop
 80024c8:	3730      	adds	r7, #48	; 0x30
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	bf00      	nop
 80024d0:	40023800 	.word	0x40023800
 80024d4:	40021000 	.word	0x40021000
 80024d8:	40020800 	.word	0x40020800
 80024dc:	40020000 	.word	0x40020000
 80024e0:	40020400 	.word	0x40020400
 80024e4:	40020c00 	.word	0x40020c00
 80024e8:	10310000 	.word	0x10310000

080024ec <clear_string>:
	  }
  }
}
//Функция удаления символов \r и \n из строки
void clear_string(char *src)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b085      	sub	sp, #20
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
	char *dst = NULL;
 80024f4:	2300      	movs	r3, #0
 80024f6:	60fb      	str	r3, [r7, #12]
	if(!src) return;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d02f      	beq.n	800255e <clear_string+0x72>
	uint8_t i = 0;
 80024fe:	2300      	movs	r3, #0
 8002500:	72fb      	strb	r3, [r7, #11]

	for(dst = src; *src; src++)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	60fb      	str	r3, [r7, #12]
 8002506:	e022      	b.n	800254e <clear_string+0x62>
	{
		if(i < 2 && (*src == '\n' || *src == '\r'))
 8002508:	7afb      	ldrb	r3, [r7, #11]
 800250a:	2b01      	cmp	r3, #1
 800250c:	d80b      	bhi.n	8002526 <clear_string+0x3a>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	781b      	ldrb	r3, [r3, #0]
 8002512:	2b0a      	cmp	r3, #10
 8002514:	d003      	beq.n	800251e <clear_string+0x32>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	781b      	ldrb	r3, [r3, #0]
 800251a:	2b0d      	cmp	r3, #13
 800251c:	d103      	bne.n	8002526 <clear_string+0x3a>
		{
			i++;
 800251e:	7afb      	ldrb	r3, [r7, #11]
 8002520:	3301      	adds	r3, #1
 8002522:	72fb      	strb	r3, [r7, #11]
			continue;
 8002524:	e010      	b.n	8002548 <clear_string+0x5c>
		}
		else if(*src == '\n' || *src == '\r') *src = ' ';
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	781b      	ldrb	r3, [r3, #0]
 800252a:	2b0a      	cmp	r3, #10
 800252c:	d003      	beq.n	8002536 <clear_string+0x4a>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	781b      	ldrb	r3, [r3, #0]
 8002532:	2b0d      	cmp	r3, #13
 8002534:	d102      	bne.n	800253c <clear_string+0x50>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2220      	movs	r2, #32
 800253a:	701a      	strb	r2, [r3, #0]

		*dst++ = *src;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	1c5a      	adds	r2, r3, #1
 8002540:	60fa      	str	r2, [r7, #12]
 8002542:	687a      	ldr	r2, [r7, #4]
 8002544:	7812      	ldrb	r2, [r2, #0]
 8002546:	701a      	strb	r2, [r3, #0]
	for(dst = src; *src; src++)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	3301      	adds	r3, #1
 800254c:	607b      	str	r3, [r7, #4]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	781b      	ldrb	r3, [r3, #0]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d1d8      	bne.n	8002508 <clear_string+0x1c>
	}

	*dst = 0;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	2200      	movs	r2, #0
 800255a:	701a      	strb	r2, [r3, #0]
 800255c:	e000      	b.n	8002560 <clear_string+0x74>
	if(!src) return;
 800255e:	bf00      	nop
}
 8002560:	3714      	adds	r7, #20
 8002562:	46bd      	mov	sp, r7
 8002564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002568:	4770      	bx	lr
	...

0800256c <parseValue>:

//Функция разбора подстроки значений параметра
//Принимает указатель на массив символов со значениями параметра
//Ворзвращает указатель на разобранный массив символов со значениями параметра
char *parseValue(char *value)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b086      	sub	sp, #24
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
	char *tmp;
	for(int i = 1, j = 0; i < strlen(value); i++)
 8002574:	2301      	movs	r3, #1
 8002576:	617b      	str	r3, [r7, #20]
 8002578:	2300      	movs	r3, #0
 800257a:	613b      	str	r3, [r7, #16]
 800257c:	e013      	b.n	80025a6 <parseValue+0x3a>
	{
		if(i % 2)
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	f003 0301 	and.w	r3, r3, #1
 8002584:	2b00      	cmp	r3, #0
 8002586:	d00b      	beq.n	80025a0 <parseValue+0x34>
		{
			paramValue[j] = value[i];
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	687a      	ldr	r2, [r7, #4]
 800258c:	4413      	add	r3, r2
 800258e:	7819      	ldrb	r1, [r3, #0]
 8002590:	4a0c      	ldr	r2, [pc, #48]	; (80025c4 <parseValue+0x58>)
 8002592:	693b      	ldr	r3, [r7, #16]
 8002594:	4413      	add	r3, r2
 8002596:	460a      	mov	r2, r1
 8002598:	701a      	strb	r2, [r3, #0]
			j++;
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	3301      	adds	r3, #1
 800259e:	613b      	str	r3, [r7, #16]
	for(int i = 1, j = 0; i < strlen(value); i++)
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	3301      	adds	r3, #1
 80025a4:	617b      	str	r3, [r7, #20]
 80025a6:	6878      	ldr	r0, [r7, #4]
 80025a8:	f7fd fe1c 	bl	80001e4 <strlen>
 80025ac:	4602      	mov	r2, r0
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	429a      	cmp	r2, r3
 80025b2:	d8e4      	bhi.n	800257e <parseValue+0x12>
		}
	}
	tmp = paramValue;
 80025b4:	4b03      	ldr	r3, [pc, #12]	; (80025c4 <parseValue+0x58>)
 80025b6:	60fb      	str	r3, [r7, #12]

	return tmp;
 80025b8:	68fb      	ldr	r3, [r7, #12]
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	3718      	adds	r7, #24
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	bf00      	nop
 80025c4:	200009f0 	.word	0x200009f0

080025c8 <json_input>:
//Функция разбора полученной строки
void json_input(char *text)
{
 80025c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025ca:	ed2d 8b04 	vpush	{d8-d9}
 80025ce:	b0a3      	sub	sp, #140	; 0x8c
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
	cJSON *json = cJSON_Parse(text);
 80025d4:	6878      	ldr	r0, [r7, #4]
 80025d6:	f7ff faab 	bl	8001b30 <cJSON_Parse>
 80025da:	67b8      	str	r0, [r7, #120]	; 0x78

	cJSON *stime = cJSON_GetObjectItem(json, "TIME");
 80025dc:	49a5      	ldr	r1, [pc, #660]	; (8002874 <json_input+0x2ac>)
 80025de:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 80025e0:	f7ff fc60 	bl	8001ea4 <cJSON_GetObjectItem>
 80025e4:	6778      	str	r0, [r7, #116]	; 0x74
	TIME = stime->valuestring;
 80025e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80025e8:	691b      	ldr	r3, [r3, #16]
 80025ea:	4aa3      	ldr	r2, [pc, #652]	; (8002878 <json_input+0x2b0>)
 80025ec:	6013      	str	r3, [r2, #0]
	Time_Server = atoi(TIME);
 80025ee:	4ba2      	ldr	r3, [pc, #648]	; (8002878 <json_input+0x2b0>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4618      	mov	r0, r3
 80025f4:	f015 fc5f 	bl	8017eb6 <atoi>
 80025f8:	4603      	mov	r3, r0
 80025fa:	4aa0      	ldr	r2, [pc, #640]	; (800287c <json_input+0x2b4>)
 80025fc:	6013      	str	r3, [r2, #0]
	if(Time_Server > Time_Client)
 80025fe:	4b9f      	ldr	r3, [pc, #636]	; (800287c <json_input+0x2b4>)
 8002600:	681a      	ldr	r2, [r3, #0]
 8002602:	4b9f      	ldr	r3, [pc, #636]	; (8002880 <json_input+0x2b8>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	429a      	cmp	r2, r3
 8002608:	f340 856b 	ble.w	80030e2 <json_input+0xb1a>
	{
		cJSON *sInstruction = cJSON_GetObjectItem(json, "INSTRUCTION");
 800260c:	499d      	ldr	r1, [pc, #628]	; (8002884 <json_input+0x2bc>)
 800260e:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8002610:	f7ff fc48 	bl	8001ea4 <cJSON_GetObjectItem>
 8002614:	6738      	str	r0, [r7, #112]	; 0x70
		INSTRUCTION = sInstruction->valuestring;
 8002616:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002618:	691b      	ldr	r3, [r3, #16]
 800261a:	4a9b      	ldr	r2, [pc, #620]	; (8002888 <json_input+0x2c0>)
 800261c:	6013      	str	r3, [r2, #0]

		if(strcmp(INSTRUCTION, "SET_PROGRAMM") == 0)
 800261e:	4b9a      	ldr	r3, [pc, #616]	; (8002888 <json_input+0x2c0>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	499a      	ldr	r1, [pc, #616]	; (800288c <json_input+0x2c4>)
 8002624:	4618      	mov	r0, r3
 8002626:	f7fd fdd3 	bl	80001d0 <strcmp>
 800262a:	4603      	mov	r3, r0
 800262c:	2b00      	cmp	r3, #0
 800262e:	f040 8419 	bne.w	8002e64 <json_input+0x89c>
		{
			cJSON *sType = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "TYPE");
 8002632:	4997      	ldr	r1, [pc, #604]	; (8002890 <json_input+0x2c8>)
 8002634:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8002636:	f7ff fc35 	bl	8001ea4 <cJSON_GetObjectItem>
 800263a:	4603      	mov	r3, r0
 800263c:	4995      	ldr	r1, [pc, #596]	; (8002894 <json_input+0x2cc>)
 800263e:	4618      	mov	r0, r3
 8002640:	f7ff fc30 	bl	8001ea4 <cJSON_GetObjectItem>
 8002644:	65f8      	str	r0, [r7, #92]	; 0x5c
			TYPE = sType->valuestring;
 8002646:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002648:	691b      	ldr	r3, [r3, #16]
 800264a:	4a93      	ldr	r2, [pc, #588]	; (8002898 <json_input+0x2d0>)
 800264c:	6013      	str	r3, [r2, #0]

			if(strcmp(TYPE, "SET_DIDO") == 0)	//Включить/выключить цифровой выход если цифровой вход = значение(уровень)
 800264e:	4b92      	ldr	r3, [pc, #584]	; (8002898 <json_input+0x2d0>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4992      	ldr	r1, [pc, #584]	; (800289c <json_input+0x2d4>)
 8002654:	4618      	mov	r0, r3
 8002656:	f7fd fdbb 	bl	80001d0 <strcmp>
 800265a:	4603      	mov	r3, r0
 800265c:	2b00      	cmp	r3, #0
 800265e:	f040 80a8 	bne.w	80027b2 <json_input+0x1ea>
			{
				cJSON *s1 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "D_IN");
 8002662:	498b      	ldr	r1, [pc, #556]	; (8002890 <json_input+0x2c8>)
 8002664:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8002666:	f7ff fc1d 	bl	8001ea4 <cJSON_GetObjectItem>
 800266a:	4603      	mov	r3, r0
 800266c:	498c      	ldr	r1, [pc, #560]	; (80028a0 <json_input+0x2d8>)
 800266e:	4618      	mov	r0, r3
 8002670:	f7ff fc18 	bl	8001ea4 <cJSON_GetObjectItem>
 8002674:	6178      	str	r0, [r7, #20]
				cJSON *s2 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "VAR_IN");
 8002676:	4986      	ldr	r1, [pc, #536]	; (8002890 <json_input+0x2c8>)
 8002678:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800267a:	f7ff fc13 	bl	8001ea4 <cJSON_GetObjectItem>
 800267e:	4603      	mov	r3, r0
 8002680:	4988      	ldr	r1, [pc, #544]	; (80028a4 <json_input+0x2dc>)
 8002682:	4618      	mov	r0, r3
 8002684:	f7ff fc0e 	bl	8001ea4 <cJSON_GetObjectItem>
 8002688:	6138      	str	r0, [r7, #16]
				cJSON *s3 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "D_OUT");
 800268a:	4981      	ldr	r1, [pc, #516]	; (8002890 <json_input+0x2c8>)
 800268c:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800268e:	f7ff fc09 	bl	8001ea4 <cJSON_GetObjectItem>
 8002692:	4603      	mov	r3, r0
 8002694:	4984      	ldr	r1, [pc, #528]	; (80028a8 <json_input+0x2e0>)
 8002696:	4618      	mov	r0, r3
 8002698:	f7ff fc04 	bl	8001ea4 <cJSON_GetObjectItem>
 800269c:	60f8      	str	r0, [r7, #12]
				cJSON *s4 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "VAR_OUT");
 800269e:	497c      	ldr	r1, [pc, #496]	; (8002890 <json_input+0x2c8>)
 80026a0:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 80026a2:	f7ff fbff 	bl	8001ea4 <cJSON_GetObjectItem>
 80026a6:	4603      	mov	r3, r0
 80026a8:	4980      	ldr	r1, [pc, #512]	; (80028ac <json_input+0x2e4>)
 80026aa:	4618      	mov	r0, r3
 80026ac:	f7ff fbfa 	bl	8001ea4 <cJSON_GetObjectItem>
 80026b0:	60b8      	str	r0, [r7, #8]

				D_IN = s1->valuestring;
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	691b      	ldr	r3, [r3, #16]
 80026b6:	4a7e      	ldr	r2, [pc, #504]	; (80028b0 <json_input+0x2e8>)
 80026b8:	6013      	str	r3, [r2, #0]
				VAR_IN = s2->valuestring;
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	691b      	ldr	r3, [r3, #16]
 80026be:	4a7d      	ldr	r2, [pc, #500]	; (80028b4 <json_input+0x2ec>)
 80026c0:	6013      	str	r3, [r2, #0]
				D_OUT = s3->valuestring;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	691b      	ldr	r3, [r3, #16]
 80026c6:	4a7c      	ldr	r2, [pc, #496]	; (80028b8 <json_input+0x2f0>)
 80026c8:	6013      	str	r3, [r2, #0]
				VAR_OUT = s4->valuestring;
 80026ca:	68bb      	ldr	r3, [r7, #8]
 80026cc:	691b      	ldr	r3, [r3, #16]
 80026ce:	4a7b      	ldr	r2, [pc, #492]	; (80028bc <json_input+0x2f4>)
 80026d0:	6013      	str	r3, [r2, #0]

				set_dido(D_IN, (uint8_t)(atoi(VAR_IN)), D_OUT, (uint8_t)(atoi(VAR_OUT)));
 80026d2:	4b77      	ldr	r3, [pc, #476]	; (80028b0 <json_input+0x2e8>)
 80026d4:	681c      	ldr	r4, [r3, #0]
 80026d6:	4b77      	ldr	r3, [pc, #476]	; (80028b4 <json_input+0x2ec>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4618      	mov	r0, r3
 80026dc:	f015 fbeb 	bl	8017eb6 <atoi>
 80026e0:	4603      	mov	r3, r0
 80026e2:	b2dd      	uxtb	r5, r3
 80026e4:	4b74      	ldr	r3, [pc, #464]	; (80028b8 <json_input+0x2f0>)
 80026e6:	681e      	ldr	r6, [r3, #0]
 80026e8:	4b74      	ldr	r3, [pc, #464]	; (80028bc <json_input+0x2f4>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4618      	mov	r0, r3
 80026ee:	f015 fbe2 	bl	8017eb6 <atoi>
 80026f2:	4603      	mov	r3, r0
 80026f4:	b2db      	uxtb	r3, r3
 80026f6:	4632      	mov	r2, r6
 80026f8:	4629      	mov	r1, r5
 80026fa:	4620      	mov	r0, r4
 80026fc:	f000 ff74 	bl	80035e8 <set_dido>

				//---------------------------------QA---------------------------------
				SEND_str("\n");
 8002700:	486f      	ldr	r0, [pc, #444]	; (80028c0 <json_input+0x2f8>)
 8002702:	f7ff fc05 	bl	8001f10 <SEND_str>
				SEND_str(TYPE);
 8002706:	4b64      	ldr	r3, [pc, #400]	; (8002898 <json_input+0x2d0>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4618      	mov	r0, r3
 800270c:	f7ff fc00 	bl	8001f10 <SEND_str>
				SEND_str("\n");
 8002710:	486b      	ldr	r0, [pc, #428]	; (80028c0 <json_input+0x2f8>)
 8002712:	f7ff fbfd 	bl	8001f10 <SEND_str>
				SEND_str(D_IN);
 8002716:	4b66      	ldr	r3, [pc, #408]	; (80028b0 <json_input+0x2e8>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4618      	mov	r0, r3
 800271c:	f7ff fbf8 	bl	8001f10 <SEND_str>
				SEND_str(": ");
 8002720:	4868      	ldr	r0, [pc, #416]	; (80028c4 <json_input+0x2fc>)
 8002722:	f7ff fbf5 	bl	8001f10 <SEND_str>
				USART_Tx(D_IN[4]);
 8002726:	4b62      	ldr	r3, [pc, #392]	; (80028b0 <json_input+0x2e8>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	3304      	adds	r3, #4
 800272c:	781b      	ldrb	r3, [r3, #0]
 800272e:	4618      	mov	r0, r3
 8002730:	f7ff fbd6 	bl	8001ee0 <USART_Tx>
				SEND_str("\n");
 8002734:	4862      	ldr	r0, [pc, #392]	; (80028c0 <json_input+0x2f8>)
 8002736:	f7ff fbeb 	bl	8001f10 <SEND_str>
				SEND_str(VAR_IN);
 800273a:	4b5e      	ldr	r3, [pc, #376]	; (80028b4 <json_input+0x2ec>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4618      	mov	r0, r3
 8002740:	f7ff fbe6 	bl	8001f10 <SEND_str>
				SEND_str("\n");
 8002744:	485e      	ldr	r0, [pc, #376]	; (80028c0 <json_input+0x2f8>)
 8002746:	f7ff fbe3 	bl	8001f10 <SEND_str>
				SEND_str(D_OUT);
 800274a:	4b5b      	ldr	r3, [pc, #364]	; (80028b8 <json_input+0x2f0>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4618      	mov	r0, r3
 8002750:	f7ff fbde 	bl	8001f10 <SEND_str>
				SEND_str(": ");
 8002754:	485b      	ldr	r0, [pc, #364]	; (80028c4 <json_input+0x2fc>)
 8002756:	f7ff fbdb 	bl	8001f10 <SEND_str>
				USART_Tx(D_OUT[5]);
 800275a:	4b57      	ldr	r3, [pc, #348]	; (80028b8 <json_input+0x2f0>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	3305      	adds	r3, #5
 8002760:	781b      	ldrb	r3, [r3, #0]
 8002762:	4618      	mov	r0, r3
 8002764:	f7ff fbbc 	bl	8001ee0 <USART_Tx>
				SEND_str("\n");
 8002768:	4855      	ldr	r0, [pc, #340]	; (80028c0 <json_input+0x2f8>)
 800276a:	f7ff fbd1 	bl	8001f10 <SEND_str>
				SEND_str(VAR_OUT);
 800276e:	4b53      	ldr	r3, [pc, #332]	; (80028bc <json_input+0x2f4>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4618      	mov	r0, r3
 8002774:	f7ff fbcc 	bl	8001f10 <SEND_str>
				SEND_str("\n");
 8002778:	4851      	ldr	r0, [pc, #324]	; (80028c0 <json_input+0x2f8>)
 800277a:	f7ff fbc9 	bl	8001f10 <SEND_str>
				//------------------------------------------------------------------

				cJSON_Delete(json);
 800277e:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8002780:	f7fe fdac 	bl	80012dc <cJSON_Delete>
				free(stime);
 8002784:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8002786:	f015 fbc7 	bl	8017f18 <free>
				free(sInstruction);
 800278a:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800278c:	f015 fbc4 	bl	8017f18 <free>
				free(sType);
 8002790:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8002792:	f015 fbc1 	bl	8017f18 <free>
				free(s1);
 8002796:	6978      	ldr	r0, [r7, #20]
 8002798:	f015 fbbe 	bl	8017f18 <free>
				free(s2);
 800279c:	6938      	ldr	r0, [r7, #16]
 800279e:	f015 fbbb 	bl	8017f18 <free>
				free(s3);
 80027a2:	68f8      	ldr	r0, [r7, #12]
 80027a4:	f015 fbb8 	bl	8017f18 <free>
				free(s4);
 80027a8:	68b8      	ldr	r0, [r7, #8]
 80027aa:	f015 fbb5 	bl	8017f18 <free>
	else
	{
		cJSON_Delete(json);
		free(stime);
	}
}
 80027ae:	f000 bc9e 	b.w	80030ee <json_input+0xb26>
			else if(strcmp(TYPE, "SET_VAIDO") == 0)	//Включить/выключить один цифровой выход если аналоговый вход в интервале значений
 80027b2:	4b39      	ldr	r3, [pc, #228]	; (8002898 <json_input+0x2d0>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4944      	ldr	r1, [pc, #272]	; (80028c8 <json_input+0x300>)
 80027b8:	4618      	mov	r0, r3
 80027ba:	f7fd fd09 	bl	80001d0 <strcmp>
 80027be:	4603      	mov	r3, r0
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	f040 813b 	bne.w	8002a3c <json_input+0x474>
				cJSON *s1 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "A_IN");
 80027c6:	4932      	ldr	r1, [pc, #200]	; (8002890 <json_input+0x2c8>)
 80027c8:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 80027ca:	f7ff fb6b 	bl	8001ea4 <cJSON_GetObjectItem>
 80027ce:	4603      	mov	r3, r0
 80027d0:	493e      	ldr	r1, [pc, #248]	; (80028cc <json_input+0x304>)
 80027d2:	4618      	mov	r0, r3
 80027d4:	f7ff fb66 	bl	8001ea4 <cJSON_GetObjectItem>
 80027d8:	62b8      	str	r0, [r7, #40]	; 0x28
				cJSON *s2 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "RANGE_LOW");
 80027da:	492d      	ldr	r1, [pc, #180]	; (8002890 <json_input+0x2c8>)
 80027dc:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 80027de:	f7ff fb61 	bl	8001ea4 <cJSON_GetObjectItem>
 80027e2:	4603      	mov	r3, r0
 80027e4:	493a      	ldr	r1, [pc, #232]	; (80028d0 <json_input+0x308>)
 80027e6:	4618      	mov	r0, r3
 80027e8:	f7ff fb5c 	bl	8001ea4 <cJSON_GetObjectItem>
 80027ec:	6278      	str	r0, [r7, #36]	; 0x24
				cJSON *s3 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "RANGE_HIGH");
 80027ee:	4928      	ldr	r1, [pc, #160]	; (8002890 <json_input+0x2c8>)
 80027f0:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 80027f2:	f7ff fb57 	bl	8001ea4 <cJSON_GetObjectItem>
 80027f6:	4603      	mov	r3, r0
 80027f8:	4936      	ldr	r1, [pc, #216]	; (80028d4 <json_input+0x30c>)
 80027fa:	4618      	mov	r0, r3
 80027fc:	f7ff fb52 	bl	8001ea4 <cJSON_GetObjectItem>
 8002800:	6238      	str	r0, [r7, #32]
				cJSON *s4 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "D_OUT");
 8002802:	4923      	ldr	r1, [pc, #140]	; (8002890 <json_input+0x2c8>)
 8002804:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8002806:	f7ff fb4d 	bl	8001ea4 <cJSON_GetObjectItem>
 800280a:	4603      	mov	r3, r0
 800280c:	4926      	ldr	r1, [pc, #152]	; (80028a8 <json_input+0x2e0>)
 800280e:	4618      	mov	r0, r3
 8002810:	f7ff fb48 	bl	8001ea4 <cJSON_GetObjectItem>
 8002814:	61f8      	str	r0, [r7, #28]
				cJSON *s5 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "VAR_OUT");
 8002816:	491e      	ldr	r1, [pc, #120]	; (8002890 <json_input+0x2c8>)
 8002818:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800281a:	f7ff fb43 	bl	8001ea4 <cJSON_GetObjectItem>
 800281e:	4603      	mov	r3, r0
 8002820:	4922      	ldr	r1, [pc, #136]	; (80028ac <json_input+0x2e4>)
 8002822:	4618      	mov	r0, r3
 8002824:	f7ff fb3e 	bl	8001ea4 <cJSON_GetObjectItem>
 8002828:	61b8      	str	r0, [r7, #24]
				A_IN = s1->valuestring;
 800282a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800282c:	691b      	ldr	r3, [r3, #16]
 800282e:	4a2a      	ldr	r2, [pc, #168]	; (80028d8 <json_input+0x310>)
 8002830:	6013      	str	r3, [r2, #0]
				RANGE_LOW = s2->valuestring;
 8002832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002834:	691b      	ldr	r3, [r3, #16]
 8002836:	4a29      	ldr	r2, [pc, #164]	; (80028dc <json_input+0x314>)
 8002838:	6013      	str	r3, [r2, #0]
				RANGE_HIGH = s3->valuestring;
 800283a:	6a3b      	ldr	r3, [r7, #32]
 800283c:	691b      	ldr	r3, [r3, #16]
 800283e:	4a28      	ldr	r2, [pc, #160]	; (80028e0 <json_input+0x318>)
 8002840:	6013      	str	r3, [r2, #0]
				D_OUT = s4->valuestring;
 8002842:	69fb      	ldr	r3, [r7, #28]
 8002844:	691b      	ldr	r3, [r3, #16]
 8002846:	4a1c      	ldr	r2, [pc, #112]	; (80028b8 <json_input+0x2f0>)
 8002848:	6013      	str	r3, [r2, #0]
				VAR_OUT = s5->valuestring;
 800284a:	69bb      	ldr	r3, [r7, #24]
 800284c:	691b      	ldr	r3, [r3, #16]
 800284e:	4a1b      	ldr	r2, [pc, #108]	; (80028bc <json_input+0x2f4>)
 8002850:	6013      	str	r3, [r2, #0]
				if(strcmp(A_IN, "VHOD1") == 0)
 8002852:	4b21      	ldr	r3, [pc, #132]	; (80028d8 <json_input+0x310>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4923      	ldr	r1, [pc, #140]	; (80028e4 <json_input+0x31c>)
 8002858:	4618      	mov	r0, r3
 800285a:	f7fd fcb9 	bl	80001d0 <strcmp>
 800285e:	4603      	mov	r3, r0
 8002860:	2b00      	cmp	r3, #0
 8002862:	d143      	bne.n	80028ec <json_input+0x324>
					SelectChannelOne;
 8002864:	2201      	movs	r2, #1
 8002866:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800286a:	481f      	ldr	r0, [pc, #124]	; (80028e8 <json_input+0x320>)
 800286c:	f006 f9ce 	bl	8008c0c <HAL_GPIO_WritePin>
 8002870:	e06b      	b.n	800294a <json_input+0x382>
 8002872:	bf00      	nop
 8002874:	0801dc3c 	.word	0x0801dc3c
 8002878:	200009c8 	.word	0x200009c8
 800287c:	200002f0 	.word	0x200002f0
 8002880:	200002f4 	.word	0x200002f4
 8002884:	0801dc44 	.word	0x0801dc44
 8002888:	20000a18 	.word	0x20000a18
 800288c:	0801dc50 	.word	0x0801dc50
 8002890:	0801dc60 	.word	0x0801dc60
 8002894:	0801dc68 	.word	0x0801dc68
 8002898:	200009bc 	.word	0x200009bc
 800289c:	0801dc70 	.word	0x0801dc70
 80028a0:	0801dc7c 	.word	0x0801dc7c
 80028a4:	0801dc84 	.word	0x0801dc84
 80028a8:	0801dc8c 	.word	0x0801dc8c
 80028ac:	0801dc94 	.word	0x0801dc94
 80028b0:	20000a0c 	.word	0x20000a0c
 80028b4:	200009d0 	.word	0x200009d0
 80028b8:	200009fc 	.word	0x200009fc
 80028bc:	200009dc 	.word	0x200009dc
 80028c0:	0801dc9c 	.word	0x0801dc9c
 80028c4:	0801dca0 	.word	0x0801dca0
 80028c8:	0801dca4 	.word	0x0801dca4
 80028cc:	0801dcb0 	.word	0x0801dcb0
 80028d0:	0801dcb8 	.word	0x0801dcb8
 80028d4:	0801dcc4 	.word	0x0801dcc4
 80028d8:	20000a14 	.word	0x20000a14
 80028dc:	200009e0 	.word	0x200009e0
 80028e0:	20000a00 	.word	0x20000a00
 80028e4:	0801dcd0 	.word	0x0801dcd0
 80028e8:	40021000 	.word	0x40021000
				else if(strcmp(A_IN, "VHOD2") == 0)
 80028ec:	4b83      	ldr	r3, [pc, #524]	; (8002afc <json_input+0x534>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4983      	ldr	r1, [pc, #524]	; (8002b00 <json_input+0x538>)
 80028f2:	4618      	mov	r0, r3
 80028f4:	f7fd fc6c 	bl	80001d0 <strcmp>
 80028f8:	4603      	mov	r3, r0
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d106      	bne.n	800290c <json_input+0x344>
					SelectChannelTwo;
 80028fe:	2201      	movs	r2, #1
 8002900:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002904:	487f      	ldr	r0, [pc, #508]	; (8002b04 <json_input+0x53c>)
 8002906:	f006 f981 	bl	8008c0c <HAL_GPIO_WritePin>
 800290a:	e01e      	b.n	800294a <json_input+0x382>
				else if(strcmp(A_IN, "VHOD3") == 0)
 800290c:	4b7b      	ldr	r3, [pc, #492]	; (8002afc <json_input+0x534>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	497d      	ldr	r1, [pc, #500]	; (8002b08 <json_input+0x540>)
 8002912:	4618      	mov	r0, r3
 8002914:	f7fd fc5c 	bl	80001d0 <strcmp>
 8002918:	4603      	mov	r3, r0
 800291a:	2b00      	cmp	r3, #0
 800291c:	d106      	bne.n	800292c <json_input+0x364>
					SelectChannelThree;
 800291e:	2201      	movs	r2, #1
 8002920:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002924:	4877      	ldr	r0, [pc, #476]	; (8002b04 <json_input+0x53c>)
 8002926:	f006 f971 	bl	8008c0c <HAL_GPIO_WritePin>
 800292a:	e00e      	b.n	800294a <json_input+0x382>
				else if(strcmp(A_IN, "VHOD4") == 0)
 800292c:	4b73      	ldr	r3, [pc, #460]	; (8002afc <json_input+0x534>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4976      	ldr	r1, [pc, #472]	; (8002b0c <json_input+0x544>)
 8002932:	4618      	mov	r0, r3
 8002934:	f7fd fc4c 	bl	80001d0 <strcmp>
 8002938:	4603      	mov	r3, r0
 800293a:	2b00      	cmp	r3, #0
 800293c:	d105      	bne.n	800294a <json_input+0x382>
					SelectChannelFour;
 800293e:	2201      	movs	r2, #1
 8002940:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002944:	486f      	ldr	r0, [pc, #444]	; (8002b04 <json_input+0x53c>)
 8002946:	f006 f961 	bl	8008c0c <HAL_GPIO_WritePin>
				set_vaido(A_IN, atof(RANGE_LOW), atof(RANGE_HIGH), D_OUT, (uint8_t)(atoi(VAR_OUT)));
 800294a:	4b6c      	ldr	r3, [pc, #432]	; (8002afc <json_input+0x534>)
 800294c:	681c      	ldr	r4, [r3, #0]
 800294e:	4b70      	ldr	r3, [pc, #448]	; (8002b10 <json_input+0x548>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4618      	mov	r0, r3
 8002954:	f015 faac 	bl	8017eb0 <atof>
 8002958:	eeb0 8a40 	vmov.f32	s16, s0
 800295c:	eef0 8a60 	vmov.f32	s17, s1
 8002960:	4b6c      	ldr	r3, [pc, #432]	; (8002b14 <json_input+0x54c>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4618      	mov	r0, r3
 8002966:	f015 faa3 	bl	8017eb0 <atof>
 800296a:	eeb0 9a40 	vmov.f32	s18, s0
 800296e:	eef0 9a60 	vmov.f32	s19, s1
 8002972:	4b69      	ldr	r3, [pc, #420]	; (8002b18 <json_input+0x550>)
 8002974:	681d      	ldr	r5, [r3, #0]
 8002976:	4b69      	ldr	r3, [pc, #420]	; (8002b1c <json_input+0x554>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4618      	mov	r0, r3
 800297c:	f015 fa9b 	bl	8017eb6 <atoi>
 8002980:	4603      	mov	r3, r0
 8002982:	b2db      	uxtb	r3, r3
 8002984:	461a      	mov	r2, r3
 8002986:	4629      	mov	r1, r5
 8002988:	eeb0 1a49 	vmov.f32	s2, s18
 800298c:	eef0 1a69 	vmov.f32	s3, s19
 8002990:	eeb0 0a48 	vmov.f32	s0, s16
 8002994:	eef0 0a68 	vmov.f32	s1, s17
 8002998:	4620      	mov	r0, r4
 800299a:	f000 fff7 	bl	800398c <set_vaido>
				SEND_str("\n");
 800299e:	4860      	ldr	r0, [pc, #384]	; (8002b20 <json_input+0x558>)
 80029a0:	f7ff fab6 	bl	8001f10 <SEND_str>
				SEND_str(TYPE);
 80029a4:	4b5f      	ldr	r3, [pc, #380]	; (8002b24 <json_input+0x55c>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4618      	mov	r0, r3
 80029aa:	f7ff fab1 	bl	8001f10 <SEND_str>
				SEND_str("\n");
 80029ae:	485c      	ldr	r0, [pc, #368]	; (8002b20 <json_input+0x558>)
 80029b0:	f7ff faae 	bl	8001f10 <SEND_str>
				SEND_str(A_IN);
 80029b4:	4b51      	ldr	r3, [pc, #324]	; (8002afc <json_input+0x534>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4618      	mov	r0, r3
 80029ba:	f7ff faa9 	bl	8001f10 <SEND_str>
				SEND_str("\n");
 80029be:	4858      	ldr	r0, [pc, #352]	; (8002b20 <json_input+0x558>)
 80029c0:	f7ff faa6 	bl	8001f10 <SEND_str>
				SEND_str(RANGE_LOW);
 80029c4:	4b52      	ldr	r3, [pc, #328]	; (8002b10 <json_input+0x548>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4618      	mov	r0, r3
 80029ca:	f7ff faa1 	bl	8001f10 <SEND_str>
				SEND_str("\n");
 80029ce:	4854      	ldr	r0, [pc, #336]	; (8002b20 <json_input+0x558>)
 80029d0:	f7ff fa9e 	bl	8001f10 <SEND_str>
				SEND_str(RANGE_HIGH);
 80029d4:	4b4f      	ldr	r3, [pc, #316]	; (8002b14 <json_input+0x54c>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4618      	mov	r0, r3
 80029da:	f7ff fa99 	bl	8001f10 <SEND_str>
				SEND_str("\n");
 80029de:	4850      	ldr	r0, [pc, #320]	; (8002b20 <json_input+0x558>)
 80029e0:	f7ff fa96 	bl	8001f10 <SEND_str>
				SEND_str(D_OUT);
 80029e4:	4b4c      	ldr	r3, [pc, #304]	; (8002b18 <json_input+0x550>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4618      	mov	r0, r3
 80029ea:	f7ff fa91 	bl	8001f10 <SEND_str>
				SEND_str("\n");
 80029ee:	484c      	ldr	r0, [pc, #304]	; (8002b20 <json_input+0x558>)
 80029f0:	f7ff fa8e 	bl	8001f10 <SEND_str>
				SEND_str(VAR_OUT);
 80029f4:	4b49      	ldr	r3, [pc, #292]	; (8002b1c <json_input+0x554>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4618      	mov	r0, r3
 80029fa:	f7ff fa89 	bl	8001f10 <SEND_str>
				SEND_str("\n");
 80029fe:	4848      	ldr	r0, [pc, #288]	; (8002b20 <json_input+0x558>)
 8002a00:	f7ff fa86 	bl	8001f10 <SEND_str>
				cJSON_Delete(json);
 8002a04:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8002a06:	f7fe fc69 	bl	80012dc <cJSON_Delete>
				free(stime);
 8002a0a:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8002a0c:	f015 fa84 	bl	8017f18 <free>
				free(sInstruction);
 8002a10:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8002a12:	f015 fa81 	bl	8017f18 <free>
				free(sType);
 8002a16:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8002a18:	f015 fa7e 	bl	8017f18 <free>
				free(s1);
 8002a1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002a1e:	f015 fa7b 	bl	8017f18 <free>
				free(s2);
 8002a22:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002a24:	f015 fa78 	bl	8017f18 <free>
				free(s3);
 8002a28:	6a38      	ldr	r0, [r7, #32]
 8002a2a:	f015 fa75 	bl	8017f18 <free>
				free(s4);
 8002a2e:	69f8      	ldr	r0, [r7, #28]
 8002a30:	f015 fa72 	bl	8017f18 <free>
				free(s5);
 8002a34:	69b8      	ldr	r0, [r7, #24]
 8002a36:	f015 fa6f 	bl	8017f18 <free>
}
 8002a3a:	e358      	b.n	80030ee <json_input+0xb26>
			else if(strcmp(TYPE, "SET_PWM") == 0)	//Выставить коэффициент заполнения на ШИМ
 8002a3c:	4b39      	ldr	r3, [pc, #228]	; (8002b24 <json_input+0x55c>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4939      	ldr	r1, [pc, #228]	; (8002b28 <json_input+0x560>)
 8002a42:	4618      	mov	r0, r3
 8002a44:	f7fd fbc4 	bl	80001d0 <strcmp>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d178      	bne.n	8002b40 <json_input+0x578>
				cJSON *s1 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "PWM_OUT");
 8002a4e:	4937      	ldr	r1, [pc, #220]	; (8002b2c <json_input+0x564>)
 8002a50:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8002a52:	f7ff fa27 	bl	8001ea4 <cJSON_GetObjectItem>
 8002a56:	4603      	mov	r3, r0
 8002a58:	4935      	ldr	r1, [pc, #212]	; (8002b30 <json_input+0x568>)
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f7ff fa22 	bl	8001ea4 <cJSON_GetObjectItem>
 8002a60:	6338      	str	r0, [r7, #48]	; 0x30
				cJSON *s2 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "D_CYCLE");
 8002a62:	4932      	ldr	r1, [pc, #200]	; (8002b2c <json_input+0x564>)
 8002a64:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8002a66:	f7ff fa1d 	bl	8001ea4 <cJSON_GetObjectItem>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	4931      	ldr	r1, [pc, #196]	; (8002b34 <json_input+0x56c>)
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f7ff fa18 	bl	8001ea4 <cJSON_GetObjectItem>
 8002a74:	62f8      	str	r0, [r7, #44]	; 0x2c
				PWM_OUT = s1->valuestring;
 8002a76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a78:	691b      	ldr	r3, [r3, #16]
 8002a7a:	4a2f      	ldr	r2, [pc, #188]	; (8002b38 <json_input+0x570>)
 8002a7c:	6013      	str	r3, [r2, #0]
				D_CYCLE = s2->valuestring;
 8002a7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a80:	691b      	ldr	r3, [r3, #16]
 8002a82:	4a2e      	ldr	r2, [pc, #184]	; (8002b3c <json_input+0x574>)
 8002a84:	6013      	str	r3, [r2, #0]
				set_pwm(PWM_OUT, (uint32_t)(atoi(D_CYCLE)));
 8002a86:	4b2c      	ldr	r3, [pc, #176]	; (8002b38 <json_input+0x570>)
 8002a88:	681c      	ldr	r4, [r3, #0]
 8002a8a:	4b2c      	ldr	r3, [pc, #176]	; (8002b3c <json_input+0x574>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f015 fa11 	bl	8017eb6 <atoi>
 8002a94:	4603      	mov	r3, r0
 8002a96:	4619      	mov	r1, r3
 8002a98:	4620      	mov	r0, r4
 8002a9a:	f001 f8c1 	bl	8003c20 <set_pwm>
				SEND_str("\n");
 8002a9e:	4820      	ldr	r0, [pc, #128]	; (8002b20 <json_input+0x558>)
 8002aa0:	f7ff fa36 	bl	8001f10 <SEND_str>
				SEND_str(TYPE);
 8002aa4:	4b1f      	ldr	r3, [pc, #124]	; (8002b24 <json_input+0x55c>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f7ff fa31 	bl	8001f10 <SEND_str>
				SEND_str("\n");
 8002aae:	481c      	ldr	r0, [pc, #112]	; (8002b20 <json_input+0x558>)
 8002ab0:	f7ff fa2e 	bl	8001f10 <SEND_str>
				SEND_str(PWM_OUT);
 8002ab4:	4b20      	ldr	r3, [pc, #128]	; (8002b38 <json_input+0x570>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4618      	mov	r0, r3
 8002aba:	f7ff fa29 	bl	8001f10 <SEND_str>
				SEND_str("\n");
 8002abe:	4818      	ldr	r0, [pc, #96]	; (8002b20 <json_input+0x558>)
 8002ac0:	f7ff fa26 	bl	8001f10 <SEND_str>
				SEND_str(D_CYCLE);
 8002ac4:	4b1d      	ldr	r3, [pc, #116]	; (8002b3c <json_input+0x574>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4618      	mov	r0, r3
 8002aca:	f7ff fa21 	bl	8001f10 <SEND_str>
				SEND_str("\n");
 8002ace:	4814      	ldr	r0, [pc, #80]	; (8002b20 <json_input+0x558>)
 8002ad0:	f7ff fa1e 	bl	8001f10 <SEND_str>
				cJSON_Delete(json);
 8002ad4:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8002ad6:	f7fe fc01 	bl	80012dc <cJSON_Delete>
				free(stime);
 8002ada:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8002adc:	f015 fa1c 	bl	8017f18 <free>
				free(sInstruction);
 8002ae0:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8002ae2:	f015 fa19 	bl	8017f18 <free>
				free(sType);
 8002ae6:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8002ae8:	f015 fa16 	bl	8017f18 <free>
				free(s1);
 8002aec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002aee:	f015 fa13 	bl	8017f18 <free>
				free(s2);
 8002af2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002af4:	f015 fa10 	bl	8017f18 <free>
}
 8002af8:	e2f9      	b.n	80030ee <json_input+0xb26>
 8002afa:	bf00      	nop
 8002afc:	20000a14 	.word	0x20000a14
 8002b00:	0801dcd8 	.word	0x0801dcd8
 8002b04:	40021000 	.word	0x40021000
 8002b08:	0801dce0 	.word	0x0801dce0
 8002b0c:	0801dce8 	.word	0x0801dce8
 8002b10:	200009e0 	.word	0x200009e0
 8002b14:	20000a00 	.word	0x20000a00
 8002b18:	200009fc 	.word	0x200009fc
 8002b1c:	200009dc 	.word	0x200009dc
 8002b20:	0801dc9c 	.word	0x0801dc9c
 8002b24:	200009bc 	.word	0x200009bc
 8002b28:	0801dcf0 	.word	0x0801dcf0
 8002b2c:	0801dc60 	.word	0x0801dc60
 8002b30:	0801dcf8 	.word	0x0801dcf8
 8002b34:	0801dd00 	.word	0x0801dd00
 8002b38:	200009c4 	.word	0x200009c4
 8002b3c:	20000a04 	.word	0x20000a04
			else if(strcmp(TYPE, "SET_TEMP_PROFILE") == 0)	//Установить профиль температуры: Если температура в диапазоне значений то установить цыфровой выход(OCD)
 8002b40:	4b64      	ldr	r3, [pc, #400]	; (8002cd4 <json_input+0x70c>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4964      	ldr	r1, [pc, #400]	; (8002cd8 <json_input+0x710>)
 8002b46:	4618      	mov	r0, r3
 8002b48:	f7fd fb42 	bl	80001d0 <strcmp>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	f040 80dc 	bne.w	8002d0c <json_input+0x744>
				cJSON *s1 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "ROM_RAW");
 8002b54:	4961      	ldr	r1, [pc, #388]	; (8002cdc <json_input+0x714>)
 8002b56:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8002b58:	f7ff f9a4 	bl	8001ea4 <cJSON_GetObjectItem>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	4960      	ldr	r1, [pc, #384]	; (8002ce0 <json_input+0x718>)
 8002b60:	4618      	mov	r0, r3
 8002b62:	f7ff f99f 	bl	8001ea4 <cJSON_GetObjectItem>
 8002b66:	6478      	str	r0, [r7, #68]	; 0x44
				cJSON *s2 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "RANGE_TEMP_LOW");
 8002b68:	495c      	ldr	r1, [pc, #368]	; (8002cdc <json_input+0x714>)
 8002b6a:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8002b6c:	f7ff f99a 	bl	8001ea4 <cJSON_GetObjectItem>
 8002b70:	4603      	mov	r3, r0
 8002b72:	495c      	ldr	r1, [pc, #368]	; (8002ce4 <json_input+0x71c>)
 8002b74:	4618      	mov	r0, r3
 8002b76:	f7ff f995 	bl	8001ea4 <cJSON_GetObjectItem>
 8002b7a:	6438      	str	r0, [r7, #64]	; 0x40
				cJSON *s3 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "RANGE_TEMP_HIGH");
 8002b7c:	4957      	ldr	r1, [pc, #348]	; (8002cdc <json_input+0x714>)
 8002b7e:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8002b80:	f7ff f990 	bl	8001ea4 <cJSON_GetObjectItem>
 8002b84:	4603      	mov	r3, r0
 8002b86:	4958      	ldr	r1, [pc, #352]	; (8002ce8 <json_input+0x720>)
 8002b88:	4618      	mov	r0, r3
 8002b8a:	f7ff f98b 	bl	8001ea4 <cJSON_GetObjectItem>
 8002b8e:	63f8      	str	r0, [r7, #60]	; 0x3c
				cJSON *s4 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "D_OUT");
 8002b90:	4952      	ldr	r1, [pc, #328]	; (8002cdc <json_input+0x714>)
 8002b92:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8002b94:	f7ff f986 	bl	8001ea4 <cJSON_GetObjectItem>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	4954      	ldr	r1, [pc, #336]	; (8002cec <json_input+0x724>)
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f7ff f981 	bl	8001ea4 <cJSON_GetObjectItem>
 8002ba2:	63b8      	str	r0, [r7, #56]	; 0x38
				cJSON *s5 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "VAR_OUT");
 8002ba4:	494d      	ldr	r1, [pc, #308]	; (8002cdc <json_input+0x714>)
 8002ba6:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8002ba8:	f7ff f97c 	bl	8001ea4 <cJSON_GetObjectItem>
 8002bac:	4603      	mov	r3, r0
 8002bae:	4950      	ldr	r1, [pc, #320]	; (8002cf0 <json_input+0x728>)
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f7ff f977 	bl	8001ea4 <cJSON_GetObjectItem>
 8002bb6:	6378      	str	r0, [r7, #52]	; 0x34
				ROM_RAW = s1->valuestring;
 8002bb8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002bba:	691b      	ldr	r3, [r3, #16]
 8002bbc:	4a4d      	ldr	r2, [pc, #308]	; (8002cf4 <json_input+0x72c>)
 8002bbe:	6013      	str	r3, [r2, #0]
				RANGE_TEMP_LOW = s2->valuestring;
 8002bc0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002bc2:	691b      	ldr	r3, [r3, #16]
 8002bc4:	4a4c      	ldr	r2, [pc, #304]	; (8002cf8 <json_input+0x730>)
 8002bc6:	6013      	str	r3, [r2, #0]
				RANGE_TEMP_HIGH = s3->valuestring;
 8002bc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002bca:	691b      	ldr	r3, [r3, #16]
 8002bcc:	4a4b      	ldr	r2, [pc, #300]	; (8002cfc <json_input+0x734>)
 8002bce:	6013      	str	r3, [r2, #0]
				D_OUT = s4->valuestring;
 8002bd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bd2:	691b      	ldr	r3, [r3, #16]
 8002bd4:	4a4a      	ldr	r2, [pc, #296]	; (8002d00 <json_input+0x738>)
 8002bd6:	6013      	str	r3, [r2, #0]
				VAR_OUT = s5->valuestring;
 8002bd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bda:	691b      	ldr	r3, [r3, #16]
 8002bdc:	4a49      	ldr	r2, [pc, #292]	; (8002d04 <json_input+0x73c>)
 8002bde:	6013      	str	r3, [r2, #0]
				set_temperature(ROM_RAW, atof(RANGE_TEMP_LOW), atof(RANGE_TEMP_HIGH), D_OUT, (uint8_t)(atoi(VAR_OUT)));
 8002be0:	4b44      	ldr	r3, [pc, #272]	; (8002cf4 <json_input+0x72c>)
 8002be2:	681c      	ldr	r4, [r3, #0]
 8002be4:	4b44      	ldr	r3, [pc, #272]	; (8002cf8 <json_input+0x730>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4618      	mov	r0, r3
 8002bea:	f015 f961 	bl	8017eb0 <atof>
 8002bee:	eeb0 8a40 	vmov.f32	s16, s0
 8002bf2:	eef0 8a60 	vmov.f32	s17, s1
 8002bf6:	4b41      	ldr	r3, [pc, #260]	; (8002cfc <json_input+0x734>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	f015 f958 	bl	8017eb0 <atof>
 8002c00:	eeb0 9a40 	vmov.f32	s18, s0
 8002c04:	eef0 9a60 	vmov.f32	s19, s1
 8002c08:	4b3d      	ldr	r3, [pc, #244]	; (8002d00 <json_input+0x738>)
 8002c0a:	681d      	ldr	r5, [r3, #0]
 8002c0c:	4b3d      	ldr	r3, [pc, #244]	; (8002d04 <json_input+0x73c>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4618      	mov	r0, r3
 8002c12:	f015 f950 	bl	8017eb6 <atoi>
 8002c16:	4603      	mov	r3, r0
 8002c18:	b2db      	uxtb	r3, r3
 8002c1a:	461a      	mov	r2, r3
 8002c1c:	4629      	mov	r1, r5
 8002c1e:	eeb0 1a49 	vmov.f32	s2, s18
 8002c22:	eef0 1a69 	vmov.f32	s3, s19
 8002c26:	eeb0 0a48 	vmov.f32	s0, s16
 8002c2a:	eef0 0a68 	vmov.f32	s1, s17
 8002c2e:	4620      	mov	r0, r4
 8002c30:	f001 f8a4 	bl	8003d7c <set_temperature>
				SEND_str("\n");
 8002c34:	4834      	ldr	r0, [pc, #208]	; (8002d08 <json_input+0x740>)
 8002c36:	f7ff f96b 	bl	8001f10 <SEND_str>
				SEND_str(TYPE);
 8002c3a:	4b26      	ldr	r3, [pc, #152]	; (8002cd4 <json_input+0x70c>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f7ff f966 	bl	8001f10 <SEND_str>
				SEND_str("\n");
 8002c44:	4830      	ldr	r0, [pc, #192]	; (8002d08 <json_input+0x740>)
 8002c46:	f7ff f963 	bl	8001f10 <SEND_str>
				SEND_str(ROM_RAW);
 8002c4a:	4b2a      	ldr	r3, [pc, #168]	; (8002cf4 <json_input+0x72c>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4618      	mov	r0, r3
 8002c50:	f7ff f95e 	bl	8001f10 <SEND_str>
				SEND_str("\n");
 8002c54:	482c      	ldr	r0, [pc, #176]	; (8002d08 <json_input+0x740>)
 8002c56:	f7ff f95b 	bl	8001f10 <SEND_str>
				SEND_str(RANGE_TEMP_LOW);
 8002c5a:	4b27      	ldr	r3, [pc, #156]	; (8002cf8 <json_input+0x730>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f7ff f956 	bl	8001f10 <SEND_str>
				SEND_str("\n");
 8002c64:	4828      	ldr	r0, [pc, #160]	; (8002d08 <json_input+0x740>)
 8002c66:	f7ff f953 	bl	8001f10 <SEND_str>
				SEND_str(RANGE_TEMP_HIGH);
 8002c6a:	4b24      	ldr	r3, [pc, #144]	; (8002cfc <json_input+0x734>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f7ff f94e 	bl	8001f10 <SEND_str>
				SEND_str("\n");
 8002c74:	4824      	ldr	r0, [pc, #144]	; (8002d08 <json_input+0x740>)
 8002c76:	f7ff f94b 	bl	8001f10 <SEND_str>
				SEND_str(D_OUT);
 8002c7a:	4b21      	ldr	r3, [pc, #132]	; (8002d00 <json_input+0x738>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4618      	mov	r0, r3
 8002c80:	f7ff f946 	bl	8001f10 <SEND_str>
				SEND_str("\n");
 8002c84:	4820      	ldr	r0, [pc, #128]	; (8002d08 <json_input+0x740>)
 8002c86:	f7ff f943 	bl	8001f10 <SEND_str>
				SEND_str(VAR_OUT);
 8002c8a:	4b1e      	ldr	r3, [pc, #120]	; (8002d04 <json_input+0x73c>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f7ff f93e 	bl	8001f10 <SEND_str>
				SEND_str("\n");
 8002c94:	481c      	ldr	r0, [pc, #112]	; (8002d08 <json_input+0x740>)
 8002c96:	f7ff f93b 	bl	8001f10 <SEND_str>
				cJSON_Delete(json);
 8002c9a:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8002c9c:	f7fe fb1e 	bl	80012dc <cJSON_Delete>
				free(stime);
 8002ca0:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8002ca2:	f015 f939 	bl	8017f18 <free>
				free(sInstruction);
 8002ca6:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8002ca8:	f015 f936 	bl	8017f18 <free>
				free(sType);
 8002cac:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8002cae:	f015 f933 	bl	8017f18 <free>
				free(s1);
 8002cb2:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8002cb4:	f015 f930 	bl	8017f18 <free>
				free(s2);
 8002cb8:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8002cba:	f015 f92d 	bl	8017f18 <free>
				free(s3);
 8002cbe:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002cc0:	f015 f92a 	bl	8017f18 <free>
				free(s4);
 8002cc4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002cc6:	f015 f927 	bl	8017f18 <free>
				free(s5);
 8002cca:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002ccc:	f015 f924 	bl	8017f18 <free>
}
 8002cd0:	e20d      	b.n	80030ee <json_input+0xb26>
 8002cd2:	bf00      	nop
 8002cd4:	200009bc 	.word	0x200009bc
 8002cd8:	0801dd08 	.word	0x0801dd08
 8002cdc:	0801dc60 	.word	0x0801dc60
 8002ce0:	0801dd1c 	.word	0x0801dd1c
 8002ce4:	0801dd24 	.word	0x0801dd24
 8002ce8:	0801dd34 	.word	0x0801dd34
 8002cec:	0801dc8c 	.word	0x0801dc8c
 8002cf0:	0801dc94 	.word	0x0801dc94
 8002cf4:	20000a20 	.word	0x20000a20
 8002cf8:	200009b8 	.word	0x200009b8
 8002cfc:	20000a1c 	.word	0x20000a1c
 8002d00:	200009fc 	.word	0x200009fc
 8002d04:	200009dc 	.word	0x200009dc
 8002d08:	0801dc9c 	.word	0x0801dc9c
			else if(strcmp(TYPE, "SET_AIAO") == 0)	//Установить значение в аналоговый выход если аналоговый вход = значение
 8002d0c:	4b9d      	ldr	r3, [pc, #628]	; (8002f84 <json_input+0x9bc>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	499d      	ldr	r1, [pc, #628]	; (8002f88 <json_input+0x9c0>)
 8002d12:	4618      	mov	r0, r3
 8002d14:	f7fd fa5c 	bl	80001d0 <strcmp>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	f040 8095 	bne.w	8002e4a <json_input+0x882>
				cJSON *s1 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "A_IN");
 8002d20:	499a      	ldr	r1, [pc, #616]	; (8002f8c <json_input+0x9c4>)
 8002d22:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8002d24:	f7ff f8be 	bl	8001ea4 <cJSON_GetObjectItem>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	4999      	ldr	r1, [pc, #612]	; (8002f90 <json_input+0x9c8>)
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	f7ff f8b9 	bl	8001ea4 <cJSON_GetObjectItem>
 8002d32:	65b8      	str	r0, [r7, #88]	; 0x58
				cJSON *s2 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "RANGE_LOW");
 8002d34:	4995      	ldr	r1, [pc, #596]	; (8002f8c <json_input+0x9c4>)
 8002d36:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8002d38:	f7ff f8b4 	bl	8001ea4 <cJSON_GetObjectItem>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	4995      	ldr	r1, [pc, #596]	; (8002f94 <json_input+0x9cc>)
 8002d40:	4618      	mov	r0, r3
 8002d42:	f7ff f8af 	bl	8001ea4 <cJSON_GetObjectItem>
 8002d46:	6578      	str	r0, [r7, #84]	; 0x54
				cJSON *s3 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "RANGE_HIGH");
 8002d48:	4990      	ldr	r1, [pc, #576]	; (8002f8c <json_input+0x9c4>)
 8002d4a:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8002d4c:	f7ff f8aa 	bl	8001ea4 <cJSON_GetObjectItem>
 8002d50:	4603      	mov	r3, r0
 8002d52:	4991      	ldr	r1, [pc, #580]	; (8002f98 <json_input+0x9d0>)
 8002d54:	4618      	mov	r0, r3
 8002d56:	f7ff f8a5 	bl	8001ea4 <cJSON_GetObjectItem>
 8002d5a:	6538      	str	r0, [r7, #80]	; 0x50
				cJSON *s4 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "A_OUT");
 8002d5c:	498b      	ldr	r1, [pc, #556]	; (8002f8c <json_input+0x9c4>)
 8002d5e:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8002d60:	f7ff f8a0 	bl	8001ea4 <cJSON_GetObjectItem>
 8002d64:	4603      	mov	r3, r0
 8002d66:	498d      	ldr	r1, [pc, #564]	; (8002f9c <json_input+0x9d4>)
 8002d68:	4618      	mov	r0, r3
 8002d6a:	f7ff f89b 	bl	8001ea4 <cJSON_GetObjectItem>
 8002d6e:	64f8      	str	r0, [r7, #76]	; 0x4c
				cJSON *s5 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "VAR_OUT");
 8002d70:	4986      	ldr	r1, [pc, #536]	; (8002f8c <json_input+0x9c4>)
 8002d72:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8002d74:	f7ff f896 	bl	8001ea4 <cJSON_GetObjectItem>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	4989      	ldr	r1, [pc, #548]	; (8002fa0 <json_input+0x9d8>)
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f7ff f891 	bl	8001ea4 <cJSON_GetObjectItem>
 8002d82:	64b8      	str	r0, [r7, #72]	; 0x48
				A_IN = s1->valuestring;
 8002d84:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d86:	691b      	ldr	r3, [r3, #16]
 8002d88:	4a86      	ldr	r2, [pc, #536]	; (8002fa4 <json_input+0x9dc>)
 8002d8a:	6013      	str	r3, [r2, #0]
				RANGE_LOW = s2->valuestring;
 8002d8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d8e:	691b      	ldr	r3, [r3, #16]
 8002d90:	4a85      	ldr	r2, [pc, #532]	; (8002fa8 <json_input+0x9e0>)
 8002d92:	6013      	str	r3, [r2, #0]
				RANGE_HIGH = s3->valuestring;
 8002d94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d96:	691b      	ldr	r3, [r3, #16]
 8002d98:	4a84      	ldr	r2, [pc, #528]	; (8002fac <json_input+0x9e4>)
 8002d9a:	6013      	str	r3, [r2, #0]
				A_OUT = s4->valuestring;
 8002d9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d9e:	691b      	ldr	r3, [r3, #16]
 8002da0:	4a83      	ldr	r2, [pc, #524]	; (8002fb0 <json_input+0x9e8>)
 8002da2:	6013      	str	r3, [r2, #0]
				VAR_OUT = s5->valuestring;
 8002da4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002da6:	691b      	ldr	r3, [r3, #16]
 8002da8:	4a82      	ldr	r2, [pc, #520]	; (8002fb4 <json_input+0x9ec>)
 8002daa:	6013      	str	r3, [r2, #0]
				SEND_str("\n");
 8002dac:	4882      	ldr	r0, [pc, #520]	; (8002fb8 <json_input+0x9f0>)
 8002dae:	f7ff f8af 	bl	8001f10 <SEND_str>
				SEND_str(TYPE);
 8002db2:	4b74      	ldr	r3, [pc, #464]	; (8002f84 <json_input+0x9bc>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4618      	mov	r0, r3
 8002db8:	f7ff f8aa 	bl	8001f10 <SEND_str>
				SEND_str("\n");
 8002dbc:	487e      	ldr	r0, [pc, #504]	; (8002fb8 <json_input+0x9f0>)
 8002dbe:	f7ff f8a7 	bl	8001f10 <SEND_str>
				SEND_str(A_IN);
 8002dc2:	4b78      	ldr	r3, [pc, #480]	; (8002fa4 <json_input+0x9dc>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f7ff f8a2 	bl	8001f10 <SEND_str>
				SEND_str("\n");
 8002dcc:	487a      	ldr	r0, [pc, #488]	; (8002fb8 <json_input+0x9f0>)
 8002dce:	f7ff f89f 	bl	8001f10 <SEND_str>
				SEND_str(RANGE_LOW);
 8002dd2:	4b75      	ldr	r3, [pc, #468]	; (8002fa8 <json_input+0x9e0>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f7ff f89a 	bl	8001f10 <SEND_str>
				SEND_str("\n");
 8002ddc:	4876      	ldr	r0, [pc, #472]	; (8002fb8 <json_input+0x9f0>)
 8002dde:	f7ff f897 	bl	8001f10 <SEND_str>
				SEND_str(RANGE_HIGH);
 8002de2:	4b72      	ldr	r3, [pc, #456]	; (8002fac <json_input+0x9e4>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4618      	mov	r0, r3
 8002de8:	f7ff f892 	bl	8001f10 <SEND_str>
				SEND_str("\n");
 8002dec:	4872      	ldr	r0, [pc, #456]	; (8002fb8 <json_input+0x9f0>)
 8002dee:	f7ff f88f 	bl	8001f10 <SEND_str>
				SEND_str(A_OUT);
 8002df2:	4b6f      	ldr	r3, [pc, #444]	; (8002fb0 <json_input+0x9e8>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4618      	mov	r0, r3
 8002df8:	f7ff f88a 	bl	8001f10 <SEND_str>
				SEND_str("\n");
 8002dfc:	486e      	ldr	r0, [pc, #440]	; (8002fb8 <json_input+0x9f0>)
 8002dfe:	f7ff f887 	bl	8001f10 <SEND_str>
				SEND_str(VAR_OUT);
 8002e02:	4b6c      	ldr	r3, [pc, #432]	; (8002fb4 <json_input+0x9ec>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4618      	mov	r0, r3
 8002e08:	f7ff f882 	bl	8001f10 <SEND_str>
				SEND_str("\n");
 8002e0c:	486a      	ldr	r0, [pc, #424]	; (8002fb8 <json_input+0x9f0>)
 8002e0e:	f7ff f87f 	bl	8001f10 <SEND_str>
				cJSON_Delete(json);
 8002e12:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8002e14:	f7fe fa62 	bl	80012dc <cJSON_Delete>
				free(stime);
 8002e18:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8002e1a:	f015 f87d 	bl	8017f18 <free>
				free(sInstruction);
 8002e1e:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8002e20:	f015 f87a 	bl	8017f18 <free>
				free(sType);
 8002e24:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8002e26:	f015 f877 	bl	8017f18 <free>
				free(s1);
 8002e2a:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8002e2c:	f015 f874 	bl	8017f18 <free>
				free(s2);
 8002e30:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8002e32:	f015 f871 	bl	8017f18 <free>
				free(s3);
 8002e36:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8002e38:	f015 f86e 	bl	8017f18 <free>
				free(s4);
 8002e3c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8002e3e:	f015 f86b 	bl	8017f18 <free>
				free(s5);
 8002e42:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8002e44:	f015 f868 	bl	8017f18 <free>
}
 8002e48:	e151      	b.n	80030ee <json_input+0xb26>
				cJSON_Delete(json);
 8002e4a:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8002e4c:	f7fe fa46 	bl	80012dc <cJSON_Delete>
				free(stime);
 8002e50:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8002e52:	f015 f861 	bl	8017f18 <free>
				free(sInstruction);
 8002e56:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8002e58:	f015 f85e 	bl	8017f18 <free>
				free(sType);
 8002e5c:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8002e5e:	f015 f85b 	bl	8017f18 <free>
}
 8002e62:	e144      	b.n	80030ee <json_input+0xb26>
		else if(strcmp(INSTRUCTION, "SET_PERIPHERALS") == 0)
 8002e64:	4b55      	ldr	r3, [pc, #340]	; (8002fbc <json_input+0x9f4>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4955      	ldr	r1, [pc, #340]	; (8002fc0 <json_input+0x9f8>)
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	f7fd f9b0 	bl	80001d0 <strcmp>
 8002e70:	4603      	mov	r3, r0
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	f040 812e 	bne.w	80030d4 <json_input+0xb0c>
			cJSON *sType = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "TYPE");
 8002e78:	4944      	ldr	r1, [pc, #272]	; (8002f8c <json_input+0x9c4>)
 8002e7a:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8002e7c:	f7ff f812 	bl	8001ea4 <cJSON_GetObjectItem>
 8002e80:	4603      	mov	r3, r0
 8002e82:	4950      	ldr	r1, [pc, #320]	; (8002fc4 <json_input+0x9fc>)
 8002e84:	4618      	mov	r0, r3
 8002e86:	f7ff f80d 	bl	8001ea4 <cJSON_GetObjectItem>
 8002e8a:	66f8      	str	r0, [r7, #108]	; 0x6c
			TYPE = sType->valuestring;
 8002e8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e8e:	691b      	ldr	r3, [r3, #16]
 8002e90:	4a3c      	ldr	r2, [pc, #240]	; (8002f84 <json_input+0x9bc>)
 8002e92:	6013      	str	r3, [r2, #0]
			if(strcmp(TYPE, "DIGITAL") == 0)
 8002e94:	4b3b      	ldr	r3, [pc, #236]	; (8002f84 <json_input+0x9bc>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	494b      	ldr	r1, [pc, #300]	; (8002fc8 <json_input+0xa00>)
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f7fd f998 	bl	80001d0 <strcmp>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d14b      	bne.n	8002f3e <json_input+0x976>
				cJSON *s1 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "SET");
 8002ea6:	4939      	ldr	r1, [pc, #228]	; (8002f8c <json_input+0x9c4>)
 8002ea8:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8002eaa:	f7fe fffb 	bl	8001ea4 <cJSON_GetObjectItem>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	4946      	ldr	r1, [pc, #280]	; (8002fcc <json_input+0xa04>)
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f7fe fff6 	bl	8001ea4 <cJSON_GetObjectItem>
 8002eb8:	6638      	str	r0, [r7, #96]	; 0x60
				DigitalParamMass = s1->valuestring;
 8002eba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002ebc:	691b      	ldr	r3, [r3, #16]
 8002ebe:	4a44      	ldr	r2, [pc, #272]	; (8002fd0 <json_input+0xa08>)
 8002ec0:	6013      	str	r3, [r2, #0]
				test = parseValue(DigitalParamMass);
 8002ec2:	4b43      	ldr	r3, [pc, #268]	; (8002fd0 <json_input+0xa08>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f7ff fb50 	bl	800256c <parseValue>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	4a41      	ldr	r2, [pc, #260]	; (8002fd4 <json_input+0xa0c>)
 8002ed0:	6013      	str	r3, [r2, #0]
				for(int i = 0; i < 8; i++)
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002ed8:	e012      	b.n	8002f00 <json_input+0x938>
					Status_DIN[i] = (test[i] - 0x30);
 8002eda:	4b3e      	ldr	r3, [pc, #248]	; (8002fd4 <json_input+0xa0c>)
 8002edc:	681a      	ldr	r2, [r3, #0]
 8002ede:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002ee2:	4413      	add	r3, r2
 8002ee4:	781b      	ldrb	r3, [r3, #0]
 8002ee6:	3b30      	subs	r3, #48	; 0x30
 8002ee8:	b2d9      	uxtb	r1, r3
 8002eea:	4a3b      	ldr	r2, [pc, #236]	; (8002fd8 <json_input+0xa10>)
 8002eec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002ef0:	4413      	add	r3, r2
 8002ef2:	460a      	mov	r2, r1
 8002ef4:	701a      	strb	r2, [r3, #0]
				for(int i = 0; i < 8; i++)
 8002ef6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002efa:	3301      	adds	r3, #1
 8002efc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002f00:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002f04:	2b07      	cmp	r3, #7
 8002f06:	dde8      	ble.n	8002eda <json_input+0x912>
				SEND_str("\n");
 8002f08:	482b      	ldr	r0, [pc, #172]	; (8002fb8 <json_input+0x9f0>)
 8002f0a:	f7ff f801 	bl	8001f10 <SEND_str>
				SEND_str(TYPE);
 8002f0e:	4b1d      	ldr	r3, [pc, #116]	; (8002f84 <json_input+0x9bc>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4618      	mov	r0, r3
 8002f14:	f7fe fffc 	bl	8001f10 <SEND_str>
				SEND_str("\n");
 8002f18:	4827      	ldr	r0, [pc, #156]	; (8002fb8 <json_input+0x9f0>)
 8002f1a:	f7fe fff9 	bl	8001f10 <SEND_str>
				cJSON_Delete(json);
 8002f1e:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8002f20:	f7fe f9dc 	bl	80012dc <cJSON_Delete>
				free(stime);
 8002f24:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8002f26:	f014 fff7 	bl	8017f18 <free>
				free(sInstruction);
 8002f2a:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8002f2c:	f014 fff4 	bl	8017f18 <free>
				free(sType);
 8002f30:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8002f32:	f014 fff1 	bl	8017f18 <free>
				free(s1);
 8002f36:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8002f38:	f014 ffee 	bl	8017f18 <free>
}
 8002f3c:	e0d7      	b.n	80030ee <json_input+0xb26>
			else if(strcmp(TYPE, "ANALOG") == 0)
 8002f3e:	4b11      	ldr	r3, [pc, #68]	; (8002f84 <json_input+0x9bc>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4926      	ldr	r1, [pc, #152]	; (8002fdc <json_input+0xa14>)
 8002f44:	4618      	mov	r0, r3
 8002f46:	f7fd f943 	bl	80001d0 <strcmp>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d17b      	bne.n	8003048 <json_input+0xa80>
				cJSON *s1 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "SET");
 8002f50:	490e      	ldr	r1, [pc, #56]	; (8002f8c <json_input+0x9c4>)
 8002f52:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8002f54:	f7fe ffa6 	bl	8001ea4 <cJSON_GetObjectItem>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	491c      	ldr	r1, [pc, #112]	; (8002fcc <json_input+0xa04>)
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	f7fe ffa1 	bl	8001ea4 <cJSON_GetObjectItem>
 8002f62:	6678      	str	r0, [r7, #100]	; 0x64
				AnalogParamMass = s1->valuestring;
 8002f64:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002f66:	691b      	ldr	r3, [r3, #16]
 8002f68:	4a1d      	ldr	r2, [pc, #116]	; (8002fe0 <json_input+0xa18>)
 8002f6a:	6013      	str	r3, [r2, #0]
				test = parseValue(AnalogParamMass);
 8002f6c:	4b1c      	ldr	r3, [pc, #112]	; (8002fe0 <json_input+0xa18>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4618      	mov	r0, r3
 8002f72:	f7ff fafb 	bl	800256c <parseValue>
 8002f76:	4603      	mov	r3, r0
 8002f78:	4a16      	ldr	r2, [pc, #88]	; (8002fd4 <json_input+0xa0c>)
 8002f7a:	6013      	str	r3, [r2, #0]
				for(int i = 0; i < 8; i++)
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002f82:	e042      	b.n	800300a <json_input+0xa42>
 8002f84:	200009bc 	.word	0x200009bc
 8002f88:	0801dd44 	.word	0x0801dd44
 8002f8c:	0801dc60 	.word	0x0801dc60
 8002f90:	0801dcb0 	.word	0x0801dcb0
 8002f94:	0801dcb8 	.word	0x0801dcb8
 8002f98:	0801dcc4 	.word	0x0801dcc4
 8002f9c:	0801dd50 	.word	0x0801dd50
 8002fa0:	0801dc94 	.word	0x0801dc94
 8002fa4:	20000a14 	.word	0x20000a14
 8002fa8:	200009e0 	.word	0x200009e0
 8002fac:	20000a00 	.word	0x20000a00
 8002fb0:	200009f8 	.word	0x200009f8
 8002fb4:	200009dc 	.word	0x200009dc
 8002fb8:	0801dc9c 	.word	0x0801dc9c
 8002fbc:	20000a18 	.word	0x20000a18
 8002fc0:	0801dd58 	.word	0x0801dd58
 8002fc4:	0801dc68 	.word	0x0801dc68
 8002fc8:	0801dd68 	.word	0x0801dd68
 8002fcc:	0801dd70 	.word	0x0801dd70
 8002fd0:	200009c0 	.word	0x200009c0
 8002fd4:	20000a10 	.word	0x20000a10
 8002fd8:	2000036c 	.word	0x2000036c
 8002fdc:	0801dd74 	.word	0x0801dd74
 8002fe0:	200009ec 	.word	0x200009ec
					Status_AIN[i] = (test[i] - 0x30);
 8002fe4:	4b45      	ldr	r3, [pc, #276]	; (80030fc <json_input+0xb34>)
 8002fe6:	681a      	ldr	r2, [r3, #0]
 8002fe8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002fec:	4413      	add	r3, r2
 8002fee:	781b      	ldrb	r3, [r3, #0]
 8002ff0:	3b30      	subs	r3, #48	; 0x30
 8002ff2:	b2d9      	uxtb	r1, r3
 8002ff4:	4a42      	ldr	r2, [pc, #264]	; (8003100 <json_input+0xb38>)
 8002ff6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002ffa:	4413      	add	r3, r2
 8002ffc:	460a      	mov	r2, r1
 8002ffe:	701a      	strb	r2, [r3, #0]
				for(int i = 0; i < 8; i++)
 8003000:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003004:	3301      	adds	r3, #1
 8003006:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800300a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800300e:	2b07      	cmp	r3, #7
 8003010:	dde8      	ble.n	8002fe4 <json_input+0xa1c>
				SEND_str("\n");
 8003012:	483c      	ldr	r0, [pc, #240]	; (8003104 <json_input+0xb3c>)
 8003014:	f7fe ff7c 	bl	8001f10 <SEND_str>
				SEND_str(TYPE);
 8003018:	4b3b      	ldr	r3, [pc, #236]	; (8003108 <json_input+0xb40>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4618      	mov	r0, r3
 800301e:	f7fe ff77 	bl	8001f10 <SEND_str>
				SEND_str("\n");
 8003022:	4838      	ldr	r0, [pc, #224]	; (8003104 <json_input+0xb3c>)
 8003024:	f7fe ff74 	bl	8001f10 <SEND_str>
				cJSON_Delete(json);
 8003028:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800302a:	f7fe f957 	bl	80012dc <cJSON_Delete>
				free(stime);
 800302e:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8003030:	f014 ff72 	bl	8017f18 <free>
				free(sInstruction);
 8003034:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8003036:	f014 ff6f 	bl	8017f18 <free>
				free(sType);
 800303a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800303c:	f014 ff6c 	bl	8017f18 <free>
				free(s1);
 8003040:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8003042:	f014 ff69 	bl	8017f18 <free>
}
 8003046:	e052      	b.n	80030ee <json_input+0xb26>
			else if(strcmp(TYPE, "OCD") == 0)
 8003048:	4b2f      	ldr	r3, [pc, #188]	; (8003108 <json_input+0xb40>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	492f      	ldr	r1, [pc, #188]	; (800310c <json_input+0xb44>)
 800304e:	4618      	mov	r0, r3
 8003050:	f7fd f8be 	bl	80001d0 <strcmp>
 8003054:	4603      	mov	r3, r0
 8003056:	2b00      	cmp	r3, #0
 8003058:	d149      	bne.n	80030ee <json_input+0xb26>
				cJSON *s1 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "SET");
 800305a:	492d      	ldr	r1, [pc, #180]	; (8003110 <json_input+0xb48>)
 800305c:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800305e:	f7fe ff21 	bl	8001ea4 <cJSON_GetObjectItem>
 8003062:	4603      	mov	r3, r0
 8003064:	492b      	ldr	r1, [pc, #172]	; (8003114 <json_input+0xb4c>)
 8003066:	4618      	mov	r0, r3
 8003068:	f7fe ff1c 	bl	8001ea4 <cJSON_GetObjectItem>
 800306c:	66b8      	str	r0, [r7, #104]	; 0x68
				OpenCollectorDrainParamMass = s1->valuestring;
 800306e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003070:	691b      	ldr	r3, [r3, #16]
 8003072:	4a29      	ldr	r2, [pc, #164]	; (8003118 <json_input+0xb50>)
 8003074:	6013      	str	r3, [r2, #0]
				test = parseValue(OpenCollectorDrainParamMass);
 8003076:	4b28      	ldr	r3, [pc, #160]	; (8003118 <json_input+0xb50>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4618      	mov	r0, r3
 800307c:	f7ff fa76 	bl	800256c <parseValue>
 8003080:	4603      	mov	r3, r0
 8003082:	4a1e      	ldr	r2, [pc, #120]	; (80030fc <json_input+0xb34>)
 8003084:	6013      	str	r3, [r2, #0]
				for(int i = 0; i < 8; i++)
 8003086:	2300      	movs	r3, #0
 8003088:	67fb      	str	r3, [r7, #124]	; 0x7c
 800308a:	e00e      	b.n	80030aa <json_input+0xae2>
					Status_OCD[i] = (test[i] - 0x30);
 800308c:	4b1b      	ldr	r3, [pc, #108]	; (80030fc <json_input+0xb34>)
 800308e:	681a      	ldr	r2, [r3, #0]
 8003090:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003092:	4413      	add	r3, r2
 8003094:	781b      	ldrb	r3, [r3, #0]
 8003096:	3b30      	subs	r3, #48	; 0x30
 8003098:	b2d9      	uxtb	r1, r3
 800309a:	4a20      	ldr	r2, [pc, #128]	; (800311c <json_input+0xb54>)
 800309c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800309e:	4413      	add	r3, r2
 80030a0:	460a      	mov	r2, r1
 80030a2:	701a      	strb	r2, [r3, #0]
				for(int i = 0; i < 8; i++)
 80030a4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80030a6:	3301      	adds	r3, #1
 80030a8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80030aa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80030ac:	2b07      	cmp	r3, #7
 80030ae:	dded      	ble.n	800308c <json_input+0xac4>
				ReWriteOCD();
 80030b0:	f001 faee 	bl	8004690 <ReWriteOCD>
				cJSON_Delete(json);
 80030b4:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 80030b6:	f7fe f911 	bl	80012dc <cJSON_Delete>
				free(stime);
 80030ba:	6f78      	ldr	r0, [r7, #116]	; 0x74
 80030bc:	f014 ff2c 	bl	8017f18 <free>
				free(sInstruction);
 80030c0:	6f38      	ldr	r0, [r7, #112]	; 0x70
 80030c2:	f014 ff29 	bl	8017f18 <free>
				free(sType);
 80030c6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80030c8:	f014 ff26 	bl	8017f18 <free>
				free(s1);
 80030cc:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 80030ce:	f014 ff23 	bl	8017f18 <free>
}
 80030d2:	e00c      	b.n	80030ee <json_input+0xb26>
			free(stime);
 80030d4:	6f78      	ldr	r0, [r7, #116]	; 0x74
 80030d6:	f014 ff1f 	bl	8017f18 <free>
			free(sInstruction);
 80030da:	6f38      	ldr	r0, [r7, #112]	; 0x70
 80030dc:	f014 ff1c 	bl	8017f18 <free>
}
 80030e0:	e005      	b.n	80030ee <json_input+0xb26>
		cJSON_Delete(json);
 80030e2:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 80030e4:	f7fe f8fa 	bl	80012dc <cJSON_Delete>
		free(stime);
 80030e8:	6f78      	ldr	r0, [r7, #116]	; 0x74
 80030ea:	f014 ff15 	bl	8017f18 <free>
}
 80030ee:	bf00      	nop
 80030f0:	378c      	adds	r7, #140	; 0x8c
 80030f2:	46bd      	mov	sp, r7
 80030f4:	ecbd 8b04 	vpop	{d8-d9}
 80030f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80030fa:	bf00      	nop
 80030fc:	20000a10 	.word	0x20000a10
 8003100:	20000364 	.word	0x20000364
 8003104:	0801dc9c 	.word	0x0801dc9c
 8003108:	200009bc 	.word	0x200009bc
 800310c:	0801dd7c 	.word	0x0801dd7c
 8003110:	0801dc60 	.word	0x0801dc60
 8003114:	0801dd70 	.word	0x0801dd70
 8003118:	20000a28 	.word	0x20000a28
 800311c:	2000037c 	.word	0x2000037c

08003120 <CheckReWriteDiDo>:
uint16_t OCD_Pin[8] = {O0_Pin, O1_Pin, O2_Pin, O3_Pin, O4_Pin, O5_Pin, O6_Pin, O7_Pin};

//Мониторинг дискретных входов и изменение выходов открытый коллектор
//	*(Если Вход1 == 0 то Выход3 = 1) Инверсная логика на входах оптопар
void CheckReWriteDiDo(void)
{
 8003120:	b590      	push	{r4, r7, lr}
 8003122:	b083      	sub	sp, #12
 8003124:	af00      	add	r7, sp, #0
	for(int i = 0; i < 8; i++)
 8003126:	2300      	movs	r3, #0
 8003128:	607b      	str	r3, [r7, #4]
 800312a:	e0a8      	b.n	800327e <CheckReWriteDiDo+0x15e>
	{
		if(HAL_GPIO_ReadPin(DiDo[i].D_IN, DiDo[i].DIN_Pin) != DiDo[i].VAR_IN)
 800312c:	4958      	ldr	r1, [pc, #352]	; (8003290 <CheckReWriteDiDo+0x170>)
 800312e:	687a      	ldr	r2, [r7, #4]
 8003130:	4613      	mov	r3, r2
 8003132:	009b      	lsls	r3, r3, #2
 8003134:	4413      	add	r3, r2
 8003136:	009b      	lsls	r3, r3, #2
 8003138:	440b      	add	r3, r1
 800313a:	6818      	ldr	r0, [r3, #0]
 800313c:	4954      	ldr	r1, [pc, #336]	; (8003290 <CheckReWriteDiDo+0x170>)
 800313e:	687a      	ldr	r2, [r7, #4]
 8003140:	4613      	mov	r3, r2
 8003142:	009b      	lsls	r3, r3, #2
 8003144:	4413      	add	r3, r2
 8003146:	009b      	lsls	r3, r3, #2
 8003148:	440b      	add	r3, r1
 800314a:	3306      	adds	r3, #6
 800314c:	881b      	ldrh	r3, [r3, #0]
 800314e:	4619      	mov	r1, r3
 8003150:	f005 fd44 	bl	8008bdc <HAL_GPIO_ReadPin>
 8003154:	4603      	mov	r3, r0
 8003156:	4618      	mov	r0, r3
 8003158:	494d      	ldr	r1, [pc, #308]	; (8003290 <CheckReWriteDiDo+0x170>)
 800315a:	687a      	ldr	r2, [r7, #4]
 800315c:	4613      	mov	r3, r2
 800315e:	009b      	lsls	r3, r3, #2
 8003160:	4413      	add	r3, r2
 8003162:	009b      	lsls	r3, r3, #2
 8003164:	440b      	add	r3, r1
 8003166:	3304      	adds	r3, #4
 8003168:	781b      	ldrb	r3, [r3, #0]
 800316a:	4298      	cmp	r0, r3
 800316c:	d02c      	beq.n	80031c8 <CheckReWriteDiDo+0xa8>
		{
			Status_OCD[i] = DiDo[i].VAR_OUT;
 800316e:	4948      	ldr	r1, [pc, #288]	; (8003290 <CheckReWriteDiDo+0x170>)
 8003170:	687a      	ldr	r2, [r7, #4]
 8003172:	4613      	mov	r3, r2
 8003174:	009b      	lsls	r3, r3, #2
 8003176:	4413      	add	r3, r2
 8003178:	009b      	lsls	r3, r3, #2
 800317a:	440b      	add	r3, r1
 800317c:	330c      	adds	r3, #12
 800317e:	7819      	ldrb	r1, [r3, #0]
 8003180:	4a44      	ldr	r2, [pc, #272]	; (8003294 <CheckReWriteDiDo+0x174>)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	4413      	add	r3, r2
 8003186:	460a      	mov	r2, r1
 8003188:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(DiDo[i].D_OUT, DiDo[i].OCD_Pin, DiDo[i].VAR_OUT);
 800318a:	4941      	ldr	r1, [pc, #260]	; (8003290 <CheckReWriteDiDo+0x170>)
 800318c:	687a      	ldr	r2, [r7, #4]
 800318e:	4613      	mov	r3, r2
 8003190:	009b      	lsls	r3, r3, #2
 8003192:	4413      	add	r3, r2
 8003194:	009b      	lsls	r3, r3, #2
 8003196:	440b      	add	r3, r1
 8003198:	3308      	adds	r3, #8
 800319a:	6818      	ldr	r0, [r3, #0]
 800319c:	493c      	ldr	r1, [pc, #240]	; (8003290 <CheckReWriteDiDo+0x170>)
 800319e:	687a      	ldr	r2, [r7, #4]
 80031a0:	4613      	mov	r3, r2
 80031a2:	009b      	lsls	r3, r3, #2
 80031a4:	4413      	add	r3, r2
 80031a6:	009b      	lsls	r3, r3, #2
 80031a8:	440b      	add	r3, r1
 80031aa:	330e      	adds	r3, #14
 80031ac:	8819      	ldrh	r1, [r3, #0]
 80031ae:	4c38      	ldr	r4, [pc, #224]	; (8003290 <CheckReWriteDiDo+0x170>)
 80031b0:	687a      	ldr	r2, [r7, #4]
 80031b2:	4613      	mov	r3, r2
 80031b4:	009b      	lsls	r3, r3, #2
 80031b6:	4413      	add	r3, r2
 80031b8:	009b      	lsls	r3, r3, #2
 80031ba:	4423      	add	r3, r4
 80031bc:	330c      	adds	r3, #12
 80031be:	781b      	ldrb	r3, [r3, #0]
 80031c0:	461a      	mov	r2, r3
 80031c2:	f005 fd23 	bl	8008c0c <HAL_GPIO_WritePin>
 80031c6:	e057      	b.n	8003278 <CheckReWriteDiDo+0x158>
		}
		else if(HAL_GPIO_ReadPin(DiDo[i].D_IN, DiDo[i].DIN_Pin) == DiDo[i].VAR_IN)
 80031c8:	4931      	ldr	r1, [pc, #196]	; (8003290 <CheckReWriteDiDo+0x170>)
 80031ca:	687a      	ldr	r2, [r7, #4]
 80031cc:	4613      	mov	r3, r2
 80031ce:	009b      	lsls	r3, r3, #2
 80031d0:	4413      	add	r3, r2
 80031d2:	009b      	lsls	r3, r3, #2
 80031d4:	440b      	add	r3, r1
 80031d6:	6818      	ldr	r0, [r3, #0]
 80031d8:	492d      	ldr	r1, [pc, #180]	; (8003290 <CheckReWriteDiDo+0x170>)
 80031da:	687a      	ldr	r2, [r7, #4]
 80031dc:	4613      	mov	r3, r2
 80031de:	009b      	lsls	r3, r3, #2
 80031e0:	4413      	add	r3, r2
 80031e2:	009b      	lsls	r3, r3, #2
 80031e4:	440b      	add	r3, r1
 80031e6:	3306      	adds	r3, #6
 80031e8:	881b      	ldrh	r3, [r3, #0]
 80031ea:	4619      	mov	r1, r3
 80031ec:	f005 fcf6 	bl	8008bdc <HAL_GPIO_ReadPin>
 80031f0:	4603      	mov	r3, r0
 80031f2:	4618      	mov	r0, r3
 80031f4:	4926      	ldr	r1, [pc, #152]	; (8003290 <CheckReWriteDiDo+0x170>)
 80031f6:	687a      	ldr	r2, [r7, #4]
 80031f8:	4613      	mov	r3, r2
 80031fa:	009b      	lsls	r3, r3, #2
 80031fc:	4413      	add	r3, r2
 80031fe:	009b      	lsls	r3, r3, #2
 8003200:	440b      	add	r3, r1
 8003202:	3304      	adds	r3, #4
 8003204:	781b      	ldrb	r3, [r3, #0]
 8003206:	4298      	cmp	r0, r3
 8003208:	d136      	bne.n	8003278 <CheckReWriteDiDo+0x158>
		{
			Status_OCD[i] = !DiDo[i].VAR_OUT;
 800320a:	4921      	ldr	r1, [pc, #132]	; (8003290 <CheckReWriteDiDo+0x170>)
 800320c:	687a      	ldr	r2, [r7, #4]
 800320e:	4613      	mov	r3, r2
 8003210:	009b      	lsls	r3, r3, #2
 8003212:	4413      	add	r3, r2
 8003214:	009b      	lsls	r3, r3, #2
 8003216:	440b      	add	r3, r1
 8003218:	330c      	adds	r3, #12
 800321a:	781b      	ldrb	r3, [r3, #0]
 800321c:	2b00      	cmp	r3, #0
 800321e:	bf0c      	ite	eq
 8003220:	2301      	moveq	r3, #1
 8003222:	2300      	movne	r3, #0
 8003224:	b2db      	uxtb	r3, r3
 8003226:	4619      	mov	r1, r3
 8003228:	4a1a      	ldr	r2, [pc, #104]	; (8003294 <CheckReWriteDiDo+0x174>)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	4413      	add	r3, r2
 800322e:	460a      	mov	r2, r1
 8003230:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(DiDo[i].D_OUT, DiDo[i].OCD_Pin, !DiDo[i].VAR_OUT);
 8003232:	4917      	ldr	r1, [pc, #92]	; (8003290 <CheckReWriteDiDo+0x170>)
 8003234:	687a      	ldr	r2, [r7, #4]
 8003236:	4613      	mov	r3, r2
 8003238:	009b      	lsls	r3, r3, #2
 800323a:	4413      	add	r3, r2
 800323c:	009b      	lsls	r3, r3, #2
 800323e:	440b      	add	r3, r1
 8003240:	3308      	adds	r3, #8
 8003242:	6818      	ldr	r0, [r3, #0]
 8003244:	4912      	ldr	r1, [pc, #72]	; (8003290 <CheckReWriteDiDo+0x170>)
 8003246:	687a      	ldr	r2, [r7, #4]
 8003248:	4613      	mov	r3, r2
 800324a:	009b      	lsls	r3, r3, #2
 800324c:	4413      	add	r3, r2
 800324e:	009b      	lsls	r3, r3, #2
 8003250:	440b      	add	r3, r1
 8003252:	330e      	adds	r3, #14
 8003254:	8819      	ldrh	r1, [r3, #0]
 8003256:	4c0e      	ldr	r4, [pc, #56]	; (8003290 <CheckReWriteDiDo+0x170>)
 8003258:	687a      	ldr	r2, [r7, #4]
 800325a:	4613      	mov	r3, r2
 800325c:	009b      	lsls	r3, r3, #2
 800325e:	4413      	add	r3, r2
 8003260:	009b      	lsls	r3, r3, #2
 8003262:	4423      	add	r3, r4
 8003264:	330c      	adds	r3, #12
 8003266:	781b      	ldrb	r3, [r3, #0]
 8003268:	2b00      	cmp	r3, #0
 800326a:	bf0c      	ite	eq
 800326c:	2301      	moveq	r3, #1
 800326e:	2300      	movne	r3, #0
 8003270:	b2db      	uxtb	r3, r3
 8003272:	461a      	mov	r2, r3
 8003274:	f005 fcca 	bl	8008c0c <HAL_GPIO_WritePin>
	for(int i = 0; i < 8; i++)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	3301      	adds	r3, #1
 800327c:	607b      	str	r3, [r7, #4]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2b07      	cmp	r3, #7
 8003282:	f77f af53 	ble.w	800312c <CheckReWriteDiDo+0xc>
		}
	}
}
 8003286:	bf00      	nop
 8003288:	bf00      	nop
 800328a:	370c      	adds	r7, #12
 800328c:	46bd      	mov	sp, r7
 800328e:	bd90      	pop	{r4, r7, pc}
 8003290:	20000918 	.word	0x20000918
 8003294:	2000037c 	.word	0x2000037c

08003298 <CheckReWriteVAiDo>:
//Мониторинг аналоговых входов и изменение выходов открытый коллектор
void CheckReWriteVAiDo(void)
{
 8003298:	b590      	push	{r4, r7, lr}
 800329a:	b083      	sub	sp, #12
 800329c:	af00      	add	r7, sp, #0
	for(int i = 0; i < 4; i++)
 800329e:	2300      	movs	r3, #0
 80032a0:	607b      	str	r3, [r7, #4]
 80032a2:	e07b      	b.n	800339c <CheckReWriteVAiDo+0x104>
	{
		for(int j = 0; j < 8; j++)
 80032a4:	2300      	movs	r3, #0
 80032a6:	603b      	str	r3, [r7, #0]
 80032a8:	e072      	b.n	8003390 <CheckReWriteVAiDo+0xf8>
		{
			if(VAiDo[i].OCD_Pin == OCD_Pin[j])
 80032aa:	4940      	ldr	r1, [pc, #256]	; (80033ac <CheckReWriteVAiDo+0x114>)
 80032ac:	687a      	ldr	r2, [r7, #4]
 80032ae:	4613      	mov	r3, r2
 80032b0:	009b      	lsls	r3, r3, #2
 80032b2:	4413      	add	r3, r2
 80032b4:	00db      	lsls	r3, r3, #3
 80032b6:	440b      	add	r3, r1
 80032b8:	331e      	adds	r3, #30
 80032ba:	881a      	ldrh	r2, [r3, #0]
 80032bc:	493c      	ldr	r1, [pc, #240]	; (80033b0 <CheckReWriteVAiDo+0x118>)
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80032c4:	429a      	cmp	r2, r3
 80032c6:	d160      	bne.n	800338a <CheckReWriteVAiDo+0xf2>
			{
				if((adcValue[i] >= VAiDo[i].RANGE_LOW) && (VAiDo[i].RANGE_HIGH >= adcValue[i]))
 80032c8:	4a3a      	ldr	r2, [pc, #232]	; (80033b4 <CheckReWriteVAiDo+0x11c>)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	00db      	lsls	r3, r3, #3
 80032ce:	4413      	add	r3, r2
 80032d0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80032d4:	4c35      	ldr	r4, [pc, #212]	; (80033ac <CheckReWriteVAiDo+0x114>)
 80032d6:	687a      	ldr	r2, [r7, #4]
 80032d8:	4613      	mov	r3, r2
 80032da:	009b      	lsls	r3, r3, #2
 80032dc:	4413      	add	r3, r2
 80032de:	00db      	lsls	r3, r3, #3
 80032e0:	4423      	add	r3, r4
 80032e2:	3308      	adds	r3, #8
 80032e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032e8:	f7fd fc1c 	bl	8000b24 <__aeabi_dcmpge>
 80032ec:	4603      	mov	r3, r0
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d030      	beq.n	8003354 <CheckReWriteVAiDo+0xbc>
 80032f2:	492e      	ldr	r1, [pc, #184]	; (80033ac <CheckReWriteVAiDo+0x114>)
 80032f4:	687a      	ldr	r2, [r7, #4]
 80032f6:	4613      	mov	r3, r2
 80032f8:	009b      	lsls	r3, r3, #2
 80032fa:	4413      	add	r3, r2
 80032fc:	00db      	lsls	r3, r3, #3
 80032fe:	440b      	add	r3, r1
 8003300:	3310      	adds	r3, #16
 8003302:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003306:	4a2b      	ldr	r2, [pc, #172]	; (80033b4 <CheckReWriteVAiDo+0x11c>)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	00db      	lsls	r3, r3, #3
 800330c:	4413      	add	r3, r2
 800330e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003312:	f7fd fc07 	bl	8000b24 <__aeabi_dcmpge>
 8003316:	4603      	mov	r3, r0
 8003318:	2b00      	cmp	r3, #0
 800331a:	d01b      	beq.n	8003354 <CheckReWriteVAiDo+0xbc>
				{
					Status_OCD[j] = 1;
 800331c:	4a26      	ldr	r2, [pc, #152]	; (80033b8 <CheckReWriteVAiDo+0x120>)
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	4413      	add	r3, r2
 8003322:	2201      	movs	r2, #1
 8003324:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_WritePin(VAiDo[i].D_OUT, VAiDo[i].OCD_Pin, SET);
 8003326:	4921      	ldr	r1, [pc, #132]	; (80033ac <CheckReWriteVAiDo+0x114>)
 8003328:	687a      	ldr	r2, [r7, #4]
 800332a:	4613      	mov	r3, r2
 800332c:	009b      	lsls	r3, r3, #2
 800332e:	4413      	add	r3, r2
 8003330:	00db      	lsls	r3, r3, #3
 8003332:	440b      	add	r3, r1
 8003334:	3318      	adds	r3, #24
 8003336:	6818      	ldr	r0, [r3, #0]
 8003338:	491c      	ldr	r1, [pc, #112]	; (80033ac <CheckReWriteVAiDo+0x114>)
 800333a:	687a      	ldr	r2, [r7, #4]
 800333c:	4613      	mov	r3, r2
 800333e:	009b      	lsls	r3, r3, #2
 8003340:	4413      	add	r3, r2
 8003342:	00db      	lsls	r3, r3, #3
 8003344:	440b      	add	r3, r1
 8003346:	331e      	adds	r3, #30
 8003348:	881b      	ldrh	r3, [r3, #0]
 800334a:	2201      	movs	r2, #1
 800334c:	4619      	mov	r1, r3
 800334e:	f005 fc5d 	bl	8008c0c <HAL_GPIO_WritePin>
 8003352:	e01a      	b.n	800338a <CheckReWriteVAiDo+0xf2>
				}
				else
				{
					Status_OCD[j] = 0;
 8003354:	4a18      	ldr	r2, [pc, #96]	; (80033b8 <CheckReWriteVAiDo+0x120>)
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	4413      	add	r3, r2
 800335a:	2200      	movs	r2, #0
 800335c:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_WritePin(VAiDo[i].D_OUT, VAiDo[i].OCD_Pin, RESET);
 800335e:	4913      	ldr	r1, [pc, #76]	; (80033ac <CheckReWriteVAiDo+0x114>)
 8003360:	687a      	ldr	r2, [r7, #4]
 8003362:	4613      	mov	r3, r2
 8003364:	009b      	lsls	r3, r3, #2
 8003366:	4413      	add	r3, r2
 8003368:	00db      	lsls	r3, r3, #3
 800336a:	440b      	add	r3, r1
 800336c:	3318      	adds	r3, #24
 800336e:	6818      	ldr	r0, [r3, #0]
 8003370:	490e      	ldr	r1, [pc, #56]	; (80033ac <CheckReWriteVAiDo+0x114>)
 8003372:	687a      	ldr	r2, [r7, #4]
 8003374:	4613      	mov	r3, r2
 8003376:	009b      	lsls	r3, r3, #2
 8003378:	4413      	add	r3, r2
 800337a:	00db      	lsls	r3, r3, #3
 800337c:	440b      	add	r3, r1
 800337e:	331e      	adds	r3, #30
 8003380:	881b      	ldrh	r3, [r3, #0]
 8003382:	2200      	movs	r2, #0
 8003384:	4619      	mov	r1, r3
 8003386:	f005 fc41 	bl	8008c0c <HAL_GPIO_WritePin>
		for(int j = 0; j < 8; j++)
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	3301      	adds	r3, #1
 800338e:	603b      	str	r3, [r7, #0]
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	2b07      	cmp	r3, #7
 8003394:	dd89      	ble.n	80032aa <CheckReWriteVAiDo+0x12>
	for(int i = 0; i < 4; i++)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	3301      	adds	r3, #1
 800339a:	607b      	str	r3, [r7, #4]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2b03      	cmp	r3, #3
 80033a0:	dd80      	ble.n	80032a4 <CheckReWriteVAiDo+0xc>
				}
			}
		}
	}
}
 80033a2:	bf00      	nop
 80033a4:	bf00      	nop
 80033a6:	370c      	adds	r7, #12
 80033a8:	46bd      	mov	sp, r7
 80033aa:	bd90      	pop	{r4, r7, pc}
 80033ac:	20000878 	.word	0x20000878
 80033b0:	20000048 	.word	0x20000048
 80033b4:	20000300 	.word	0x20000300
 80033b8:	2000037c 	.word	0x2000037c

080033bc <CheckReWriteTSiDo>:
//Мониторинг датчиков температуры и изменение выходов открытый коллектор
void CheckReWriteTSiDo(void)
{
 80033bc:	b5b0      	push	{r4, r5, r7, lr}
 80033be:	b088      	sub	sp, #32
 80033c0:	af02      	add	r7, sp, #8
	if(OneWire_Test_Flag_Init)
 80033c2:	4b7d      	ldr	r3, [pc, #500]	; (80035b8 <CheckReWriteTSiDo+0x1fc>)
 80033c4:	781b      	ldrb	r3, [r3, #0]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d012      	beq.n	80033f0 <CheckReWriteTSiDo+0x34>
	{
		OneWire_Test_Flag_Init = false;
 80033ca:	4b7b      	ldr	r3, [pc, #492]	; (80035b8 <CheckReWriteTSiDo+0x1fc>)
 80033cc:	2200      	movs	r2, #0
 80033ce:	701a      	strb	r2, [r3, #0]
    	for(uint8_t i = 1; i <= Dev_Cnt; i++)
 80033d0:	2301      	movs	r3, #1
 80033d2:	75fb      	strb	r3, [r7, #23]
 80033d4:	e007      	b.n	80033e6 <CheckReWriteTSiDo+0x2a>
    	{
    		sensors_MeasureTemperCmd(NO_SKIP_ROM, i);
 80033d6:	7dfb      	ldrb	r3, [r7, #23]
 80033d8:	4619      	mov	r1, r3
 80033da:	2001      	movs	r0, #1
 80033dc:	f002 fb32 	bl	8005a44 <sensors_MeasureTemperCmd>
    	for(uint8_t i = 1; i <= Dev_Cnt; i++)
 80033e0:	7dfb      	ldrb	r3, [r7, #23]
 80033e2:	3301      	adds	r3, #1
 80033e4:	75fb      	strb	r3, [r7, #23]
 80033e6:	4b75      	ldr	r3, [pc, #468]	; (80035bc <CheckReWriteTSiDo+0x200>)
 80033e8:	781b      	ldrb	r3, [r3, #0]
 80033ea:	7dfa      	ldrb	r2, [r7, #23]
 80033ec:	429a      	cmp	r2, r3
 80033ee:	d9f2      	bls.n	80033d6 <CheckReWriteTSiDo+0x1a>
    	}
	}
	if(OneWire_Test_Flag_Read)
 80033f0:	4b73      	ldr	r3, [pc, #460]	; (80035c0 <CheckReWriteTSiDo+0x204>)
 80033f2:	781b      	ldrb	r3, [r3, #0]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	f000 80db 	beq.w	80035b0 <CheckReWriteTSiDo+0x1f4>
	{
		OneWire_Test_Flag_Read = false;
 80033fa:	4b71      	ldr	r3, [pc, #452]	; (80035c0 <CheckReWriteTSiDo+0x204>)
 80033fc:	2200      	movs	r2, #0
 80033fe:	701a      	strb	r2, [r3, #0]
    	for(uint8_t i = 1; i <= Dev_Cnt; i++)
 8003400:	2301      	movs	r3, #1
 8003402:	75bb      	strb	r3, [r7, #22]
 8003404:	e0ce      	b.n	80035a4 <CheckReWriteTSiDo+0x1e8>
    	{
    		for(uint8_t j = 0; j < 8; j++)
 8003406:	2300      	movs	r3, #0
 8003408:	757b      	strb	r3, [r7, #21]
 800340a:	e0c4      	b.n	8003596 <CheckReWriteTSiDo+0x1da>
    		{
    			if(TSiDo[i-1].OCD_Pin == OCD_Pin[j])
 800340c:	7dbb      	ldrb	r3, [r7, #22]
 800340e:	1e5a      	subs	r2, r3, #1
 8003410:	496c      	ldr	r1, [pc, #432]	; (80035c4 <CheckReWriteTSiDo+0x208>)
 8003412:	4613      	mov	r3, r2
 8003414:	00db      	lsls	r3, r3, #3
 8003416:	1a9b      	subs	r3, r3, r2
 8003418:	00db      	lsls	r3, r3, #3
 800341a:	440b      	add	r3, r1
 800341c:	332e      	adds	r3, #46	; 0x2e
 800341e:	881a      	ldrh	r2, [r3, #0]
 8003420:	7d7b      	ldrb	r3, [r7, #21]
 8003422:	4969      	ldr	r1, [pc, #420]	; (80035c8 <CheckReWriteTSiDo+0x20c>)
 8003424:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8003428:	429a      	cmp	r2, r3
 800342a:	f040 80b1 	bne.w	8003590 <CheckReWriteTSiDo+0x1d4>
    			{
    				sensors_ReadStratcpad(NO_SKIP_ROM, dt, i);
 800342e:	7dbb      	ldrb	r3, [r7, #22]
 8003430:	461a      	mov	r2, r3
 8003432:	4966      	ldr	r1, [pc, #408]	; (80035cc <CheckReWriteTSiDo+0x210>)
 8003434:	2001      	movs	r0, #1
 8003436:	f002 fb39 	bl	8005aac <sensors_ReadStratcpad>
    				raw_temper = ((uint16_t)dt[1]<<8)|dt[0];
 800343a:	4b64      	ldr	r3, [pc, #400]	; (80035cc <CheckReWriteTSiDo+0x210>)
 800343c:	785b      	ldrb	r3, [r3, #1]
 800343e:	021b      	lsls	r3, r3, #8
 8003440:	b21a      	sxth	r2, r3
 8003442:	4b62      	ldr	r3, [pc, #392]	; (80035cc <CheckReWriteTSiDo+0x210>)
 8003444:	781b      	ldrb	r3, [r3, #0]
 8003446:	b21b      	sxth	r3, r3
 8003448:	4313      	orrs	r3, r2
 800344a:	b21b      	sxth	r3, r3
 800344c:	b29a      	uxth	r2, r3
 800344e:	4b60      	ldr	r3, [pc, #384]	; (80035d0 <CheckReWriteTSiDo+0x214>)
 8003450:	801a      	strh	r2, [r3, #0]
    				if(sensors_GetSign(raw_temper))
 8003452:	4b5f      	ldr	r3, [pc, #380]	; (80035d0 <CheckReWriteTSiDo+0x214>)
 8003454:	881b      	ldrh	r3, [r3, #0]
 8003456:	4618      	mov	r0, r3
 8003458:	f002 fb6a 	bl	8005b30 <sensors_GetSign>
 800345c:	4603      	mov	r3, r0
 800345e:	2b00      	cmp	r3, #0
 8003460:	d003      	beq.n	800346a <CheckReWriteTSiDo+0xae>
    					c='-';
 8003462:	4b5c      	ldr	r3, [pc, #368]	; (80035d4 <CheckReWriteTSiDo+0x218>)
 8003464:	222d      	movs	r2, #45	; 0x2d
 8003466:	701a      	strb	r2, [r3, #0]
 8003468:	e002      	b.n	8003470 <CheckReWriteTSiDo+0xb4>
    				else
    					c='+';
 800346a:	4b5a      	ldr	r3, [pc, #360]	; (80035d4 <CheckReWriteTSiDo+0x218>)
 800346c:	222b      	movs	r2, #43	; 0x2b
 800346e:	701a      	strb	r2, [r3, #0]
    				char test[16];
    				temper = sensors_Convert(raw_temper);
 8003470:	4b57      	ldr	r3, [pc, #348]	; (80035d0 <CheckReWriteTSiDo+0x214>)
 8003472:	881b      	ldrh	r3, [r3, #0]
 8003474:	4618      	mov	r0, r3
 8003476:	f002 fb6e 	bl	8005b56 <sensors_Convert>
 800347a:	eef0 7a40 	vmov.f32	s15, s0
 800347e:	4b56      	ldr	r3, [pc, #344]	; (80035d8 <CheckReWriteTSiDo+0x21c>)
 8003480:	edc3 7a00 	vstr	s15, [r3]
    				sprintf(test, "%d t: %c%.2f\r\n", i, c, temper);
 8003484:	7dbc      	ldrb	r4, [r7, #22]
 8003486:	4b53      	ldr	r3, [pc, #332]	; (80035d4 <CheckReWriteTSiDo+0x218>)
 8003488:	781b      	ldrb	r3, [r3, #0]
 800348a:	461d      	mov	r5, r3
 800348c:	4b52      	ldr	r3, [pc, #328]	; (80035d8 <CheckReWriteTSiDo+0x21c>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4618      	mov	r0, r3
 8003492:	f7fd f869 	bl	8000568 <__aeabi_f2d>
 8003496:	4602      	mov	r2, r0
 8003498:	460b      	mov	r3, r1
 800349a:	1d38      	adds	r0, r7, #4
 800349c:	e9cd 2300 	strd	r2, r3, [sp]
 80034a0:	462b      	mov	r3, r5
 80034a2:	4622      	mov	r2, r4
 80034a4:	494d      	ldr	r1, [pc, #308]	; (80035dc <CheckReWriteTSiDo+0x220>)
 80034a6:	f015 fb2d 	bl	8018b04 <siprintf>
    				HAL_UART_Transmit(&huart3, (uint8_t*)test, strlen(test), 0x1000);
 80034aa:	1d3b      	adds	r3, r7, #4
 80034ac:	4618      	mov	r0, r3
 80034ae:	f7fc fe99 	bl	80001e4 <strlen>
 80034b2:	4603      	mov	r3, r0
 80034b4:	b29a      	uxth	r2, r3
 80034b6:	1d39      	adds	r1, r7, #4
 80034b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80034bc:	4848      	ldr	r0, [pc, #288]	; (80035e0 <CheckReWriteTSiDo+0x224>)
 80034be:	f007 fff6 	bl	800b4ae <HAL_UART_Transmit>

					if((temper >= TSiDo[i-1].RANGE_TEMP_LOW) && (TSiDo[i-1].RANGE_TEMP_HIGH >= temper))
 80034c2:	4b45      	ldr	r3, [pc, #276]	; (80035d8 <CheckReWriteTSiDo+0x21c>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4618      	mov	r0, r3
 80034c8:	f7fd f84e 	bl	8000568 <__aeabi_f2d>
 80034cc:	7dbb      	ldrb	r3, [r7, #22]
 80034ce:	1e5a      	subs	r2, r3, #1
 80034d0:	4c3c      	ldr	r4, [pc, #240]	; (80035c4 <CheckReWriteTSiDo+0x208>)
 80034d2:	4613      	mov	r3, r2
 80034d4:	00db      	lsls	r3, r3, #3
 80034d6:	1a9b      	subs	r3, r3, r2
 80034d8:	00db      	lsls	r3, r3, #3
 80034da:	4423      	add	r3, r4
 80034dc:	3318      	adds	r3, #24
 80034de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034e2:	f7fd fb1f 	bl	8000b24 <__aeabi_dcmpge>
 80034e6:	4603      	mov	r3, r0
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d035      	beq.n	8003558 <CheckReWriteTSiDo+0x19c>
 80034ec:	7dbb      	ldrb	r3, [r7, #22]
 80034ee:	1e5a      	subs	r2, r3, #1
 80034f0:	4934      	ldr	r1, [pc, #208]	; (80035c4 <CheckReWriteTSiDo+0x208>)
 80034f2:	4613      	mov	r3, r2
 80034f4:	00db      	lsls	r3, r3, #3
 80034f6:	1a9b      	subs	r3, r3, r2
 80034f8:	00db      	lsls	r3, r3, #3
 80034fa:	440b      	add	r3, r1
 80034fc:	3320      	adds	r3, #32
 80034fe:	e9d3 4500 	ldrd	r4, r5, [r3]
 8003502:	4b35      	ldr	r3, [pc, #212]	; (80035d8 <CheckReWriteTSiDo+0x21c>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4618      	mov	r0, r3
 8003508:	f7fd f82e 	bl	8000568 <__aeabi_f2d>
 800350c:	4602      	mov	r2, r0
 800350e:	460b      	mov	r3, r1
 8003510:	4620      	mov	r0, r4
 8003512:	4629      	mov	r1, r5
 8003514:	f7fd fb06 	bl	8000b24 <__aeabi_dcmpge>
 8003518:	4603      	mov	r3, r0
 800351a:	2b00      	cmp	r3, #0
 800351c:	d01c      	beq.n	8003558 <CheckReWriteTSiDo+0x19c>
					{
						Status_OCD[j] = 1;
 800351e:	7d7b      	ldrb	r3, [r7, #21]
 8003520:	4a30      	ldr	r2, [pc, #192]	; (80035e4 <CheckReWriteTSiDo+0x228>)
 8003522:	2101      	movs	r1, #1
 8003524:	54d1      	strb	r1, [r2, r3]
						HAL_GPIO_WritePin(TSiDo[i-1].D_OUT, TSiDo[i-1].OCD_Pin, SET);
 8003526:	7dbb      	ldrb	r3, [r7, #22]
 8003528:	1e5a      	subs	r2, r3, #1
 800352a:	4926      	ldr	r1, [pc, #152]	; (80035c4 <CheckReWriteTSiDo+0x208>)
 800352c:	4613      	mov	r3, r2
 800352e:	00db      	lsls	r3, r3, #3
 8003530:	1a9b      	subs	r3, r3, r2
 8003532:	00db      	lsls	r3, r3, #3
 8003534:	440b      	add	r3, r1
 8003536:	3328      	adds	r3, #40	; 0x28
 8003538:	6818      	ldr	r0, [r3, #0]
 800353a:	7dbb      	ldrb	r3, [r7, #22]
 800353c:	1e5a      	subs	r2, r3, #1
 800353e:	4921      	ldr	r1, [pc, #132]	; (80035c4 <CheckReWriteTSiDo+0x208>)
 8003540:	4613      	mov	r3, r2
 8003542:	00db      	lsls	r3, r3, #3
 8003544:	1a9b      	subs	r3, r3, r2
 8003546:	00db      	lsls	r3, r3, #3
 8003548:	440b      	add	r3, r1
 800354a:	332e      	adds	r3, #46	; 0x2e
 800354c:	881b      	ldrh	r3, [r3, #0]
 800354e:	2201      	movs	r2, #1
 8003550:	4619      	mov	r1, r3
 8003552:	f005 fb5b 	bl	8008c0c <HAL_GPIO_WritePin>
 8003556:	e01b      	b.n	8003590 <CheckReWriteTSiDo+0x1d4>
					}
					else
					{
						Status_OCD[j] = 0;
 8003558:	7d7b      	ldrb	r3, [r7, #21]
 800355a:	4a22      	ldr	r2, [pc, #136]	; (80035e4 <CheckReWriteTSiDo+0x228>)
 800355c:	2100      	movs	r1, #0
 800355e:	54d1      	strb	r1, [r2, r3]
						HAL_GPIO_WritePin(TSiDo[i-1].D_OUT, TSiDo[i-1].OCD_Pin, RESET);
 8003560:	7dbb      	ldrb	r3, [r7, #22]
 8003562:	1e5a      	subs	r2, r3, #1
 8003564:	4917      	ldr	r1, [pc, #92]	; (80035c4 <CheckReWriteTSiDo+0x208>)
 8003566:	4613      	mov	r3, r2
 8003568:	00db      	lsls	r3, r3, #3
 800356a:	1a9b      	subs	r3, r3, r2
 800356c:	00db      	lsls	r3, r3, #3
 800356e:	440b      	add	r3, r1
 8003570:	3328      	adds	r3, #40	; 0x28
 8003572:	6818      	ldr	r0, [r3, #0]
 8003574:	7dbb      	ldrb	r3, [r7, #22]
 8003576:	1e5a      	subs	r2, r3, #1
 8003578:	4912      	ldr	r1, [pc, #72]	; (80035c4 <CheckReWriteTSiDo+0x208>)
 800357a:	4613      	mov	r3, r2
 800357c:	00db      	lsls	r3, r3, #3
 800357e:	1a9b      	subs	r3, r3, r2
 8003580:	00db      	lsls	r3, r3, #3
 8003582:	440b      	add	r3, r1
 8003584:	332e      	adds	r3, #46	; 0x2e
 8003586:	881b      	ldrh	r3, [r3, #0]
 8003588:	2200      	movs	r2, #0
 800358a:	4619      	mov	r1, r3
 800358c:	f005 fb3e 	bl	8008c0c <HAL_GPIO_WritePin>
    		for(uint8_t j = 0; j < 8; j++)
 8003590:	7d7b      	ldrb	r3, [r7, #21]
 8003592:	3301      	adds	r3, #1
 8003594:	757b      	strb	r3, [r7, #21]
 8003596:	7d7b      	ldrb	r3, [r7, #21]
 8003598:	2b07      	cmp	r3, #7
 800359a:	f67f af37 	bls.w	800340c <CheckReWriteTSiDo+0x50>
    	for(uint8_t i = 1; i <= Dev_Cnt; i++)
 800359e:	7dbb      	ldrb	r3, [r7, #22]
 80035a0:	3301      	adds	r3, #1
 80035a2:	75bb      	strb	r3, [r7, #22]
 80035a4:	4b05      	ldr	r3, [pc, #20]	; (80035bc <CheckReWriteTSiDo+0x200>)
 80035a6:	781b      	ldrb	r3, [r3, #0]
 80035a8:	7dba      	ldrb	r2, [r7, #22]
 80035aa:	429a      	cmp	r2, r3
 80035ac:	f67f af2b 	bls.w	8003406 <CheckReWriteTSiDo+0x4a>
					}
    			}
    		}
    	}
	}
}
 80035b0:	bf00      	nop
 80035b2:	3718      	adds	r7, #24
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bdb0      	pop	{r4, r5, r7, pc}
 80035b8:	20000362 	.word	0x20000362
 80035bc:	20000a3c 	.word	0x20000a3c
 80035c0:	20000363 	.word	0x20000363
 80035c4:	200005f0 	.word	0x200005f0
 80035c8:	20000048 	.word	0x20000048
 80035cc:	20000a30 	.word	0x20000a30
 80035d0:	20000a2c 	.word	0x20000a2c
 80035d4:	20000a2e 	.word	0x20000a2e
 80035d8:	20000a38 	.word	0x20000a38
 80035dc:	0801dd80 	.word	0x0801dd80
 80035e0:	20000e3c 	.word	0x20000e3c
 80035e4:	2000037c 	.word	0x2000037c

080035e8 <set_dido>:
//Принимает "D_IN" - строку с номером цифрового входа
//Принимает "VAR_IN" - переменная состояния входа
//Принимает "D_OUT" - строку с номером цифрового выхода
//Принимает "VAR_OUT" - переменная состояния выхода
void set_dido(char *D_IN, uint8_t VAR_IN, char *D_OUT, uint8_t VAR_OUT)
{
 80035e8:	b590      	push	{r4, r7, lr}
 80035ea:	b0b3      	sub	sp, #204	; 0xcc
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	60f8      	str	r0, [r7, #12]
 80035f0:	607a      	str	r2, [r7, #4]
 80035f2:	461a      	mov	r2, r3
 80035f4:	460b      	mov	r3, r1
 80035f6:	72fb      	strb	r3, [r7, #11]
 80035f8:	4613      	mov	r3, r2
 80035fa:	72bb      	strb	r3, [r7, #10]
	char VHOD[8][10] = {"VHOD1", "VHOD2", "VHOD3", "VHOD4", "VHOD5", "VHOD6", "VHOD7", "VHOD8"};
 80035fc:	4acb      	ldr	r2, [pc, #812]	; (800392c <set_dido+0x344>)
 80035fe:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003602:	4611      	mov	r1, r2
 8003604:	2250      	movs	r2, #80	; 0x50
 8003606:	4618      	mov	r0, r3
 8003608:	f014 fc9c 	bl	8017f44 <memcpy>
	char VIHOD[8][10] = {"VIHOD1", "VIHOD2", "VIHOD3", "VIHOD4", "VIHOD5", "VIHOD6", "VIHOD7", "VIHOD8"};
 800360c:	4ac8      	ldr	r2, [pc, #800]	; (8003930 <set_dido+0x348>)
 800360e:	f107 0320 	add.w	r3, r7, #32
 8003612:	4611      	mov	r1, r2
 8003614:	2250      	movs	r2, #80	; 0x50
 8003616:	4618      	mov	r0, r3
 8003618:	f014 fc94 	bl	8017f44 <memcpy>

	uint16_t DIN_Pin[8] = {IN0_Pin, IN1_Pin, IN2_Pin, IN3_Pin, IN4_Pin, IN5_Pin, IN6_Pin, IN7_Pin};
 800361c:	4bc5      	ldr	r3, [pc, #788]	; (8003934 <set_dido+0x34c>)
 800361e:	f107 0410 	add.w	r4, r7, #16
 8003622:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003624:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	for(int i = 0; i < 8; i++)
 8003628:	2300      	movs	r3, #0
 800362a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800362e:	e1a2      	b.n	8003976 <set_dido+0x38e>
	{
		if(strcmp(D_IN, VHOD[i]) == 0)
 8003630:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8003634:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003638:	4613      	mov	r3, r2
 800363a:	009b      	lsls	r3, r3, #2
 800363c:	4413      	add	r3, r2
 800363e:	005b      	lsls	r3, r3, #1
 8003640:	440b      	add	r3, r1
 8003642:	4619      	mov	r1, r3
 8003644:	68f8      	ldr	r0, [r7, #12]
 8003646:	f7fc fdc3 	bl	80001d0 <strcmp>
 800364a:	4603      	mov	r3, r0
 800364c:	2b00      	cmp	r3, #0
 800364e:	f040 818d 	bne.w	800396c <set_dido+0x384>
		{
			if(DiDo[i].clrFlag != false)
 8003652:	49b9      	ldr	r1, [pc, #740]	; (8003938 <set_dido+0x350>)
 8003654:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003658:	4613      	mov	r3, r2
 800365a:	009b      	lsls	r3, r3, #2
 800365c:	4413      	add	r3, r2
 800365e:	009b      	lsls	r3, r3, #2
 8003660:	440b      	add	r3, r1
 8003662:	3310      	adds	r3, #16
 8003664:	781b      	ldrb	r3, [r3, #0]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d017      	beq.n	800369a <set_dido+0xb2>
				HAL_GPIO_WritePin(DiDo[i].D_OUT, DiDo[i].OCD_Pin, RESET);
 800366a:	49b3      	ldr	r1, [pc, #716]	; (8003938 <set_dido+0x350>)
 800366c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003670:	4613      	mov	r3, r2
 8003672:	009b      	lsls	r3, r3, #2
 8003674:	4413      	add	r3, r2
 8003676:	009b      	lsls	r3, r3, #2
 8003678:	440b      	add	r3, r1
 800367a:	3308      	adds	r3, #8
 800367c:	6818      	ldr	r0, [r3, #0]
 800367e:	49ae      	ldr	r1, [pc, #696]	; (8003938 <set_dido+0x350>)
 8003680:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003684:	4613      	mov	r3, r2
 8003686:	009b      	lsls	r3, r3, #2
 8003688:	4413      	add	r3, r2
 800368a:	009b      	lsls	r3, r3, #2
 800368c:	440b      	add	r3, r1
 800368e:	330e      	adds	r3, #14
 8003690:	881b      	ldrh	r3, [r3, #0]
 8003692:	2200      	movs	r2, #0
 8003694:	4619      	mov	r1, r3
 8003696:	f005 fab9 	bl	8008c0c <HAL_GPIO_WritePin>

			DiDo[i].clrFlag = true;
 800369a:	49a7      	ldr	r1, [pc, #668]	; (8003938 <set_dido+0x350>)
 800369c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80036a0:	4613      	mov	r3, r2
 80036a2:	009b      	lsls	r3, r3, #2
 80036a4:	4413      	add	r3, r2
 80036a6:	009b      	lsls	r3, r3, #2
 80036a8:	440b      	add	r3, r1
 80036aa:	3310      	adds	r3, #16
 80036ac:	2201      	movs	r2, #1
 80036ae:	701a      	strb	r2, [r3, #0]
			DiDo[i].D_IN = pVHOD[i];
 80036b0:	4aa2      	ldr	r2, [pc, #648]	; (800393c <set_dido+0x354>)
 80036b2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80036b6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80036ba:	489f      	ldr	r0, [pc, #636]	; (8003938 <set_dido+0x350>)
 80036bc:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80036c0:	4613      	mov	r3, r2
 80036c2:	009b      	lsls	r3, r3, #2
 80036c4:	4413      	add	r3, r2
 80036c6:	009b      	lsls	r3, r3, #2
 80036c8:	4403      	add	r3, r0
 80036ca:	6019      	str	r1, [r3, #0]
			DiDo[i].VAR_IN = VAR_IN;
 80036cc:	499a      	ldr	r1, [pc, #616]	; (8003938 <set_dido+0x350>)
 80036ce:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80036d2:	4613      	mov	r3, r2
 80036d4:	009b      	lsls	r3, r3, #2
 80036d6:	4413      	add	r3, r2
 80036d8:	009b      	lsls	r3, r3, #2
 80036da:	440b      	add	r3, r1
 80036dc:	3304      	adds	r3, #4
 80036de:	7afa      	ldrb	r2, [r7, #11]
 80036e0:	701a      	strb	r2, [r3, #0]
			DiDo[i].DIN_Pin = DIN_Pin[i];
 80036e2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80036e6:	005b      	lsls	r3, r3, #1
 80036e8:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 80036ec:	4413      	add	r3, r2
 80036ee:	f833 0cb8 	ldrh.w	r0, [r3, #-184]
 80036f2:	4991      	ldr	r1, [pc, #580]	; (8003938 <set_dido+0x350>)
 80036f4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80036f8:	4613      	mov	r3, r2
 80036fa:	009b      	lsls	r3, r3, #2
 80036fc:	4413      	add	r3, r2
 80036fe:	009b      	lsls	r3, r3, #2
 8003700:	440b      	add	r3, r1
 8003702:	3306      	adds	r3, #6
 8003704:	4602      	mov	r2, r0
 8003706:	801a      	strh	r2, [r3, #0]
			for(int j = 0; j < 8; j++)
 8003708:	2300      	movs	r3, #0
 800370a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800370e:	e104      	b.n	800391a <set_dido+0x332>
			{
				if(strcmp(D_OUT, VIHOD[j]) == 0)
 8003710:	f107 0120 	add.w	r1, r7, #32
 8003714:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003718:	4613      	mov	r3, r2
 800371a:	009b      	lsls	r3, r3, #2
 800371c:	4413      	add	r3, r2
 800371e:	005b      	lsls	r3, r3, #1
 8003720:	440b      	add	r3, r1
 8003722:	4619      	mov	r1, r3
 8003724:	6878      	ldr	r0, [r7, #4]
 8003726:	f7fc fd53 	bl	80001d0 <strcmp>
 800372a:	4603      	mov	r3, r0
 800372c:	2b00      	cmp	r3, #0
 800372e:	f040 80ef 	bne.w	8003910 <set_dido+0x328>
				{
					DiDo[i].D_OUT = pVIHOD[j];
 8003732:	4a83      	ldr	r2, [pc, #524]	; (8003940 <set_dido+0x358>)
 8003734:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003738:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800373c:	487e      	ldr	r0, [pc, #504]	; (8003938 <set_dido+0x350>)
 800373e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003742:	4613      	mov	r3, r2
 8003744:	009b      	lsls	r3, r3, #2
 8003746:	4413      	add	r3, r2
 8003748:	009b      	lsls	r3, r3, #2
 800374a:	4403      	add	r3, r0
 800374c:	3308      	adds	r3, #8
 800374e:	6019      	str	r1, [r3, #0]
					DiDo[i].VAR_OUT = VAR_OUT;
 8003750:	4979      	ldr	r1, [pc, #484]	; (8003938 <set_dido+0x350>)
 8003752:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003756:	4613      	mov	r3, r2
 8003758:	009b      	lsls	r3, r3, #2
 800375a:	4413      	add	r3, r2
 800375c:	009b      	lsls	r3, r3, #2
 800375e:	440b      	add	r3, r1
 8003760:	330c      	adds	r3, #12
 8003762:	7aba      	ldrb	r2, [r7, #10]
 8003764:	701a      	strb	r2, [r3, #0]
					DiDo[i].OCD_Pin = OCD_Pin[j];
 8003766:	4a77      	ldr	r2, [pc, #476]	; (8003944 <set_dido+0x35c>)
 8003768:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800376c:	f832 0013 	ldrh.w	r0, [r2, r3, lsl #1]
 8003770:	4971      	ldr	r1, [pc, #452]	; (8003938 <set_dido+0x350>)
 8003772:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003776:	4613      	mov	r3, r2
 8003778:	009b      	lsls	r3, r3, #2
 800377a:	4413      	add	r3, r2
 800377c:	009b      	lsls	r3, r3, #2
 800377e:	440b      	add	r3, r1
 8003780:	330e      	adds	r3, #14
 8003782:	4602      	mov	r2, r0
 8003784:	801a      	strh	r2, [r3, #0]

					if(HAL_GPIO_ReadPin(DiDo[i].D_IN, DiDo[i].DIN_Pin) != VAR_IN)	//(Если Вход1 == 0 то Выход3 = 1) Инверсная логика на входах оптопар
 8003786:	496c      	ldr	r1, [pc, #432]	; (8003938 <set_dido+0x350>)
 8003788:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800378c:	4613      	mov	r3, r2
 800378e:	009b      	lsls	r3, r3, #2
 8003790:	4413      	add	r3, r2
 8003792:	009b      	lsls	r3, r3, #2
 8003794:	440b      	add	r3, r1
 8003796:	6818      	ldr	r0, [r3, #0]
 8003798:	4967      	ldr	r1, [pc, #412]	; (8003938 <set_dido+0x350>)
 800379a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800379e:	4613      	mov	r3, r2
 80037a0:	009b      	lsls	r3, r3, #2
 80037a2:	4413      	add	r3, r2
 80037a4:	009b      	lsls	r3, r3, #2
 80037a6:	440b      	add	r3, r1
 80037a8:	3306      	adds	r3, #6
 80037aa:	881b      	ldrh	r3, [r3, #0]
 80037ac:	4619      	mov	r1, r3
 80037ae:	f005 fa15 	bl	8008bdc <HAL_GPIO_ReadPin>
 80037b2:	4603      	mov	r3, r0
 80037b4:	461a      	mov	r2, r3
 80037b6:	7afb      	ldrb	r3, [r7, #11]
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d021      	beq.n	8003800 <set_dido+0x218>
					{
						Status_OCD[j] = VAR_OUT;
 80037bc:	4a62      	ldr	r2, [pc, #392]	; (8003948 <set_dido+0x360>)
 80037be:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80037c2:	4413      	add	r3, r2
 80037c4:	7aba      	ldrb	r2, [r7, #10]
 80037c6:	701a      	strb	r2, [r3, #0]
						HAL_GPIO_WritePin(DiDo[i].D_OUT, DiDo[i].OCD_Pin, VAR_OUT);
 80037c8:	495b      	ldr	r1, [pc, #364]	; (8003938 <set_dido+0x350>)
 80037ca:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80037ce:	4613      	mov	r3, r2
 80037d0:	009b      	lsls	r3, r3, #2
 80037d2:	4413      	add	r3, r2
 80037d4:	009b      	lsls	r3, r3, #2
 80037d6:	440b      	add	r3, r1
 80037d8:	3308      	adds	r3, #8
 80037da:	6818      	ldr	r0, [r3, #0]
 80037dc:	4956      	ldr	r1, [pc, #344]	; (8003938 <set_dido+0x350>)
 80037de:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80037e2:	4613      	mov	r3, r2
 80037e4:	009b      	lsls	r3, r3, #2
 80037e6:	4413      	add	r3, r2
 80037e8:	009b      	lsls	r3, r3, #2
 80037ea:	440b      	add	r3, r1
 80037ec:	330e      	adds	r3, #14
 80037ee:	881b      	ldrh	r3, [r3, #0]
 80037f0:	7aba      	ldrb	r2, [r7, #10]
 80037f2:	4619      	mov	r1, r3
 80037f4:	f005 fa0a 	bl	8008c0c <HAL_GPIO_WritePin>
						SEND_str("success...\n");
 80037f8:	4854      	ldr	r0, [pc, #336]	; (800394c <set_dido+0x364>)
 80037fa:	f7fe fb89 	bl	8001f10 <SEND_str>
 80037fe:	e047      	b.n	8003890 <set_dido+0x2a8>
					}
					else if(HAL_GPIO_ReadPin(DiDo[i].D_IN, DiDo[i].DIN_Pin) == VAR_IN)
 8003800:	494d      	ldr	r1, [pc, #308]	; (8003938 <set_dido+0x350>)
 8003802:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003806:	4613      	mov	r3, r2
 8003808:	009b      	lsls	r3, r3, #2
 800380a:	4413      	add	r3, r2
 800380c:	009b      	lsls	r3, r3, #2
 800380e:	440b      	add	r3, r1
 8003810:	6818      	ldr	r0, [r3, #0]
 8003812:	4949      	ldr	r1, [pc, #292]	; (8003938 <set_dido+0x350>)
 8003814:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003818:	4613      	mov	r3, r2
 800381a:	009b      	lsls	r3, r3, #2
 800381c:	4413      	add	r3, r2
 800381e:	009b      	lsls	r3, r3, #2
 8003820:	440b      	add	r3, r1
 8003822:	3306      	adds	r3, #6
 8003824:	881b      	ldrh	r3, [r3, #0]
 8003826:	4619      	mov	r1, r3
 8003828:	f005 f9d8 	bl	8008bdc <HAL_GPIO_ReadPin>
 800382c:	4603      	mov	r3, r0
 800382e:	461a      	mov	r2, r3
 8003830:	7afb      	ldrb	r3, [r7, #11]
 8003832:	4293      	cmp	r3, r2
 8003834:	d12c      	bne.n	8003890 <set_dido+0x2a8>
					{
						Status_OCD[j] = !VAR_OUT;
 8003836:	7abb      	ldrb	r3, [r7, #10]
 8003838:	2b00      	cmp	r3, #0
 800383a:	bf0c      	ite	eq
 800383c:	2301      	moveq	r3, #1
 800383e:	2300      	movne	r3, #0
 8003840:	b2db      	uxtb	r3, r3
 8003842:	4619      	mov	r1, r3
 8003844:	4a40      	ldr	r2, [pc, #256]	; (8003948 <set_dido+0x360>)
 8003846:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800384a:	4413      	add	r3, r2
 800384c:	460a      	mov	r2, r1
 800384e:	701a      	strb	r2, [r3, #0]
						HAL_GPIO_WritePin(DiDo[i].D_OUT, DiDo[i].OCD_Pin, !VAR_OUT);
 8003850:	4939      	ldr	r1, [pc, #228]	; (8003938 <set_dido+0x350>)
 8003852:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003856:	4613      	mov	r3, r2
 8003858:	009b      	lsls	r3, r3, #2
 800385a:	4413      	add	r3, r2
 800385c:	009b      	lsls	r3, r3, #2
 800385e:	440b      	add	r3, r1
 8003860:	3308      	adds	r3, #8
 8003862:	6818      	ldr	r0, [r3, #0]
 8003864:	4934      	ldr	r1, [pc, #208]	; (8003938 <set_dido+0x350>)
 8003866:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800386a:	4613      	mov	r3, r2
 800386c:	009b      	lsls	r3, r3, #2
 800386e:	4413      	add	r3, r2
 8003870:	009b      	lsls	r3, r3, #2
 8003872:	440b      	add	r3, r1
 8003874:	330e      	adds	r3, #14
 8003876:	8819      	ldrh	r1, [r3, #0]
 8003878:	7abb      	ldrb	r3, [r7, #10]
 800387a:	2b00      	cmp	r3, #0
 800387c:	bf0c      	ite	eq
 800387e:	2301      	moveq	r3, #1
 8003880:	2300      	movne	r3, #0
 8003882:	b2db      	uxtb	r3, r3
 8003884:	461a      	mov	r2, r3
 8003886:	f005 f9c1 	bl	8008c0c <HAL_GPIO_WritePin>
						SEND_str("miss...\n");
 800388a:	4831      	ldr	r0, [pc, #196]	; (8003950 <set_dido+0x368>)
 800388c:	f7fe fb40 	bl	8001f10 <SEND_str>
					}

					//----------------------------------For debuging----------------------------------
					if(DiDo[i].D_IN == VHOD1)
 8003890:	4929      	ldr	r1, [pc, #164]	; (8003938 <set_dido+0x350>)
 8003892:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003896:	4613      	mov	r3, r2
 8003898:	009b      	lsls	r3, r3, #2
 800389a:	4413      	add	r3, r2
 800389c:	009b      	lsls	r3, r3, #2
 800389e:	440b      	add	r3, r1
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a2c      	ldr	r2, [pc, #176]	; (8003954 <set_dido+0x36c>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d102      	bne.n	80038ae <set_dido+0x2c6>
						SEND_str("1 - success...\n");
 80038a8:	482b      	ldr	r0, [pc, #172]	; (8003958 <set_dido+0x370>)
 80038aa:	f7fe fb31 	bl	8001f10 <SEND_str>
					if(DiDo[i].VAR_IN == VAR_IN)
 80038ae:	4922      	ldr	r1, [pc, #136]	; (8003938 <set_dido+0x350>)
 80038b0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80038b4:	4613      	mov	r3, r2
 80038b6:	009b      	lsls	r3, r3, #2
 80038b8:	4413      	add	r3, r2
 80038ba:	009b      	lsls	r3, r3, #2
 80038bc:	440b      	add	r3, r1
 80038be:	3304      	adds	r3, #4
 80038c0:	781b      	ldrb	r3, [r3, #0]
 80038c2:	7afa      	ldrb	r2, [r7, #11]
 80038c4:	429a      	cmp	r2, r3
 80038c6:	d102      	bne.n	80038ce <set_dido+0x2e6>
						SEND_str("2 - success...\n");
 80038c8:	4824      	ldr	r0, [pc, #144]	; (800395c <set_dido+0x374>)
 80038ca:	f7fe fb21 	bl	8001f10 <SEND_str>
					if(DiDo[i].D_OUT == VIHOD3)
 80038ce:	491a      	ldr	r1, [pc, #104]	; (8003938 <set_dido+0x350>)
 80038d0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80038d4:	4613      	mov	r3, r2
 80038d6:	009b      	lsls	r3, r3, #2
 80038d8:	4413      	add	r3, r2
 80038da:	009b      	lsls	r3, r3, #2
 80038dc:	440b      	add	r3, r1
 80038de:	3308      	adds	r3, #8
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a1f      	ldr	r2, [pc, #124]	; (8003960 <set_dido+0x378>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d102      	bne.n	80038ee <set_dido+0x306>
						SEND_str("3 - success...\n");
 80038e8:	481e      	ldr	r0, [pc, #120]	; (8003964 <set_dido+0x37c>)
 80038ea:	f7fe fb11 	bl	8001f10 <SEND_str>
					if(DiDo[i].VAR_OUT == VAR_OUT)
 80038ee:	4912      	ldr	r1, [pc, #72]	; (8003938 <set_dido+0x350>)
 80038f0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80038f4:	4613      	mov	r3, r2
 80038f6:	009b      	lsls	r3, r3, #2
 80038f8:	4413      	add	r3, r2
 80038fa:	009b      	lsls	r3, r3, #2
 80038fc:	440b      	add	r3, r1
 80038fe:	330c      	adds	r3, #12
 8003900:	781b      	ldrb	r3, [r3, #0]
 8003902:	7aba      	ldrb	r2, [r7, #10]
 8003904:	429a      	cmp	r2, r3
 8003906:	d10e      	bne.n	8003926 <set_dido+0x33e>
						SEND_str("4 - success...\n");
 8003908:	4817      	ldr	r0, [pc, #92]	; (8003968 <set_dido+0x380>)
 800390a:	f7fe fb01 	bl	8001f10 <SEND_str>
					//--------------------------------------------------------------------------------

					break;
 800390e:	e00a      	b.n	8003926 <set_dido+0x33e>
			for(int j = 0; j < 8; j++)
 8003910:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003914:	3301      	adds	r3, #1
 8003916:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800391a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800391e:	2b07      	cmp	r3, #7
 8003920:	f77f aef6 	ble.w	8003710 <set_dido+0x128>
				}
			}
			break;
 8003924:	e02d      	b.n	8003982 <set_dido+0x39a>
					break;
 8003926:	bf00      	nop
			break;
 8003928:	e02b      	b.n	8003982 <set_dido+0x39a>
 800392a:	bf00      	nop
 800392c:	0801dde8 	.word	0x0801dde8
 8003930:	0801de38 	.word	0x0801de38
 8003934:	0801de88 	.word	0x0801de88
 8003938:	20000918 	.word	0x20000918
 800393c:	20000008 	.word	0x20000008
 8003940:	20000028 	.word	0x20000028
 8003944:	20000048 	.word	0x20000048
 8003948:	2000037c 	.word	0x2000037c
 800394c:	0801dd90 	.word	0x0801dd90
 8003950:	0801dd9c 	.word	0x0801dd9c
 8003954:	40020c00 	.word	0x40020c00
 8003958:	0801dda8 	.word	0x0801dda8
 800395c:	0801ddb8 	.word	0x0801ddb8
 8003960:	40020400 	.word	0x40020400
 8003964:	0801ddc8 	.word	0x0801ddc8
 8003968:	0801ddd8 	.word	0x0801ddd8
	for(int i = 0; i < 8; i++)
 800396c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003970:	3301      	adds	r3, #1
 8003972:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003976:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800397a:	2b07      	cmp	r3, #7
 800397c:	f77f ae58 	ble.w	8003630 <set_dido+0x48>
		}
	}
}
 8003980:	bf00      	nop
 8003982:	bf00      	nop
 8003984:	37cc      	adds	r7, #204	; 0xcc
 8003986:	46bd      	mov	sp, r7
 8003988:	bd90      	pop	{r4, r7, pc}
 800398a:	bf00      	nop

0800398c <set_vaido>:
//Принимает "RANGE_LOW" - нижний предел значений
//Принимает "RANGE_HIGH" - верхний предел значений
//Принимает "D_OUT" - строку с номером цифрового выхода
//Принимает "VAR_OUT" - переменная состояния выхода
void set_vaido(char *A_IN, double RANGE_LOW, double RANGE_HIGH, char *D_OUT, uint8_t VAR_OUT)
{
 800398c:	b5b0      	push	{r4, r5, r7, lr}
 800398e:	b0b2      	sub	sp, #200	; 0xc8
 8003990:	af00      	add	r7, sp, #0
 8003992:	61f8      	str	r0, [r7, #28]
 8003994:	ed87 0b04 	vstr	d0, [r7, #16]
 8003998:	ed87 1b02 	vstr	d1, [r7, #8]
 800399c:	61b9      	str	r1, [r7, #24]
 800399e:	4613      	mov	r3, r2
 80039a0:	71fb      	strb	r3, [r7, #7]
	char VHOD[4][10] = {"VHOD1", "VHOD2", "VHOD3", "VHOD4"};
 80039a2:	4b93      	ldr	r3, [pc, #588]	; (8003bf0 <set_vaido+0x264>)
 80039a4:	f107 0498 	add.w	r4, r7, #152	; 0x98
 80039a8:	461d      	mov	r5, r3
 80039aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80039ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80039ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80039b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80039b2:	e895 0003 	ldmia.w	r5, {r0, r1}
 80039b6:	e884 0003 	stmia.w	r4, {r0, r1}
	char VIHOD[8][10] = {"VIHOD1", "VIHOD2", "VIHOD3", "VIHOD4", "VIHOD5", "VIHOD6", "VIHOD7", "VIHOD8"};
 80039ba:	4a8e      	ldr	r2, [pc, #568]	; (8003bf4 <set_vaido+0x268>)
 80039bc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80039c0:	4611      	mov	r1, r2
 80039c2:	2250      	movs	r2, #80	; 0x50
 80039c4:	4618      	mov	r0, r3
 80039c6:	f014 fabd 	bl	8017f44 <memcpy>

	uint8_t pVHOD[4] = {ADC1_IN3, ADC1_IN4, ADC1_IN5, ADC1_IN6};
 80039ca:	4b8b      	ldr	r3, [pc, #556]	; (8003bf8 <set_vaido+0x26c>)
 80039cc:	647b      	str	r3, [r7, #68]	; 0x44

	for(int i = 0; i < 4; i++)
 80039ce:	2300      	movs	r3, #0
 80039d0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80039d4:	e102      	b.n	8003bdc <set_vaido+0x250>
	{
		if(strcmp(A_IN, VHOD[i]) == 0)
 80039d6:	f107 0198 	add.w	r1, r7, #152	; 0x98
 80039da:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80039de:	4613      	mov	r3, r2
 80039e0:	009b      	lsls	r3, r3, #2
 80039e2:	4413      	add	r3, r2
 80039e4:	005b      	lsls	r3, r3, #1
 80039e6:	440b      	add	r3, r1
 80039e8:	4619      	mov	r1, r3
 80039ea:	69f8      	ldr	r0, [r7, #28]
 80039ec:	f7fc fbf0 	bl	80001d0 <strcmp>
 80039f0:	4603      	mov	r3, r0
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	f040 80ed 	bne.w	8003bd2 <set_vaido+0x246>
		{
			if(VAiDo[i].clrFlag != false)
 80039f8:	4980      	ldr	r1, [pc, #512]	; (8003bfc <set_vaido+0x270>)
 80039fa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80039fe:	4613      	mov	r3, r2
 8003a00:	009b      	lsls	r3, r3, #2
 8003a02:	4413      	add	r3, r2
 8003a04:	00db      	lsls	r3, r3, #3
 8003a06:	440b      	add	r3, r1
 8003a08:	3320      	adds	r3, #32
 8003a0a:	781b      	ldrb	r3, [r3, #0]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d017      	beq.n	8003a40 <set_vaido+0xb4>
				HAL_GPIO_WritePin(VAiDo[i].D_OUT, VAiDo[i].OCD_Pin, RESET);
 8003a10:	497a      	ldr	r1, [pc, #488]	; (8003bfc <set_vaido+0x270>)
 8003a12:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003a16:	4613      	mov	r3, r2
 8003a18:	009b      	lsls	r3, r3, #2
 8003a1a:	4413      	add	r3, r2
 8003a1c:	00db      	lsls	r3, r3, #3
 8003a1e:	440b      	add	r3, r1
 8003a20:	3318      	adds	r3, #24
 8003a22:	6818      	ldr	r0, [r3, #0]
 8003a24:	4975      	ldr	r1, [pc, #468]	; (8003bfc <set_vaido+0x270>)
 8003a26:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003a2a:	4613      	mov	r3, r2
 8003a2c:	009b      	lsls	r3, r3, #2
 8003a2e:	4413      	add	r3, r2
 8003a30:	00db      	lsls	r3, r3, #3
 8003a32:	440b      	add	r3, r1
 8003a34:	331e      	adds	r3, #30
 8003a36:	881b      	ldrh	r3, [r3, #0]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	4619      	mov	r1, r3
 8003a3c:	f005 f8e6 	bl	8008c0c <HAL_GPIO_WritePin>

			VAiDo[i].clrFlag = true;
 8003a40:	496e      	ldr	r1, [pc, #440]	; (8003bfc <set_vaido+0x270>)
 8003a42:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003a46:	4613      	mov	r3, r2
 8003a48:	009b      	lsls	r3, r3, #2
 8003a4a:	4413      	add	r3, r2
 8003a4c:	00db      	lsls	r3, r3, #3
 8003a4e:	440b      	add	r3, r1
 8003a50:	3320      	adds	r3, #32
 8003a52:	2201      	movs	r2, #1
 8003a54:	701a      	strb	r2, [r3, #0]
			VAiDo[i].A_IN = pVHOD[i];
 8003a56:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8003a5a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003a5e:	4413      	add	r3, r2
 8003a60:	7818      	ldrb	r0, [r3, #0]
 8003a62:	4966      	ldr	r1, [pc, #408]	; (8003bfc <set_vaido+0x270>)
 8003a64:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003a68:	4613      	mov	r3, r2
 8003a6a:	009b      	lsls	r3, r3, #2
 8003a6c:	4413      	add	r3, r2
 8003a6e:	00db      	lsls	r3, r3, #3
 8003a70:	440b      	add	r3, r1
 8003a72:	4602      	mov	r2, r0
 8003a74:	701a      	strb	r2, [r3, #0]
			VAiDo[i].RANGE_LOW = RANGE_LOW;
 8003a76:	4961      	ldr	r1, [pc, #388]	; (8003bfc <set_vaido+0x270>)
 8003a78:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003a7c:	4613      	mov	r3, r2
 8003a7e:	009b      	lsls	r3, r3, #2
 8003a80:	4413      	add	r3, r2
 8003a82:	00db      	lsls	r3, r3, #3
 8003a84:	440b      	add	r3, r1
 8003a86:	f103 0108 	add.w	r1, r3, #8
 8003a8a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003a8e:	e9c1 2300 	strd	r2, r3, [r1]
			VAiDo[i].RANGE_HIGH = RANGE_HIGH;
 8003a92:	495a      	ldr	r1, [pc, #360]	; (8003bfc <set_vaido+0x270>)
 8003a94:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003a98:	4613      	mov	r3, r2
 8003a9a:	009b      	lsls	r3, r3, #2
 8003a9c:	4413      	add	r3, r2
 8003a9e:	00db      	lsls	r3, r3, #3
 8003aa0:	440b      	add	r3, r1
 8003aa2:	f103 0110 	add.w	r1, r3, #16
 8003aa6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003aaa:	e9c1 2300 	strd	r2, r3, [r1]
			//DiDo[i].DIN_Pin = DIN_Pin[i];
			for(int j = 0; j < 8; j++)
 8003aae:	2300      	movs	r3, #0
 8003ab0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003ab4:	e087      	b.n	8003bc6 <set_vaido+0x23a>
			{
				if(strcmp(D_OUT, VIHOD[j]) == 0)
 8003ab6:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8003aba:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003abe:	4613      	mov	r3, r2
 8003ac0:	009b      	lsls	r3, r3, #2
 8003ac2:	4413      	add	r3, r2
 8003ac4:	005b      	lsls	r3, r3, #1
 8003ac6:	440b      	add	r3, r1
 8003ac8:	4619      	mov	r1, r3
 8003aca:	69b8      	ldr	r0, [r7, #24]
 8003acc:	f7fc fb80 	bl	80001d0 <strcmp>
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d172      	bne.n	8003bbc <set_vaido+0x230>
				{
					VAiDo[i].D_OUT = pVIHOD[j];
 8003ad6:	4a4a      	ldr	r2, [pc, #296]	; (8003c00 <set_vaido+0x274>)
 8003ad8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003adc:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003ae0:	4846      	ldr	r0, [pc, #280]	; (8003bfc <set_vaido+0x270>)
 8003ae2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003ae6:	4613      	mov	r3, r2
 8003ae8:	009b      	lsls	r3, r3, #2
 8003aea:	4413      	add	r3, r2
 8003aec:	00db      	lsls	r3, r3, #3
 8003aee:	4403      	add	r3, r0
 8003af0:	3318      	adds	r3, #24
 8003af2:	6019      	str	r1, [r3, #0]
					VAiDo[i].VAR_OUT = VAR_OUT;
 8003af4:	4941      	ldr	r1, [pc, #260]	; (8003bfc <set_vaido+0x270>)
 8003af6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003afa:	4613      	mov	r3, r2
 8003afc:	009b      	lsls	r3, r3, #2
 8003afe:	4413      	add	r3, r2
 8003b00:	00db      	lsls	r3, r3, #3
 8003b02:	440b      	add	r3, r1
 8003b04:	331c      	adds	r3, #28
 8003b06:	79fa      	ldrb	r2, [r7, #7]
 8003b08:	701a      	strb	r2, [r3, #0]
					VAiDo[i].OCD_Pin = OCD_Pin[j];
 8003b0a:	4a3e      	ldr	r2, [pc, #248]	; (8003c04 <set_vaido+0x278>)
 8003b0c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003b10:	f832 0013 	ldrh.w	r0, [r2, r3, lsl #1]
 8003b14:	4939      	ldr	r1, [pc, #228]	; (8003bfc <set_vaido+0x270>)
 8003b16:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003b1a:	4613      	mov	r3, r2
 8003b1c:	009b      	lsls	r3, r3, #2
 8003b1e:	4413      	add	r3, r2
 8003b20:	00db      	lsls	r3, r3, #3
 8003b22:	440b      	add	r3, r1
 8003b24:	331e      	adds	r3, #30
 8003b26:	4602      	mov	r2, r0
 8003b28:	801a      	strh	r2, [r3, #0]

					//------------------------------------------------
					char Buff[32];
					SEND_str("SET VALUE: ");
 8003b2a:	4837      	ldr	r0, [pc, #220]	; (8003c08 <set_vaido+0x27c>)
 8003b2c:	f7fe f9f0 	bl	8001f10 <SEND_str>
					sprintf(Buff, "%.3f", adcValue[i]);
 8003b30:	4a36      	ldr	r2, [pc, #216]	; (8003c0c <set_vaido+0x280>)
 8003b32:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003b36:	00db      	lsls	r3, r3, #3
 8003b38:	4413      	add	r3, r2
 8003b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b3e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003b42:	4933      	ldr	r1, [pc, #204]	; (8003c10 <set_vaido+0x284>)
 8003b44:	f014 ffde 	bl	8018b04 <siprintf>
					SEND_str(Buff);
 8003b48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	f7fe f9df 	bl	8001f10 <SEND_str>
					SEND_str("\nRANGE_LOW: ");
 8003b52:	4830      	ldr	r0, [pc, #192]	; (8003c14 <set_vaido+0x288>)
 8003b54:	f7fe f9dc 	bl	8001f10 <SEND_str>
					sprintf(Buff, "%.3f", VAiDo[i].RANGE_LOW);
 8003b58:	4928      	ldr	r1, [pc, #160]	; (8003bfc <set_vaido+0x270>)
 8003b5a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003b5e:	4613      	mov	r3, r2
 8003b60:	009b      	lsls	r3, r3, #2
 8003b62:	4413      	add	r3, r2
 8003b64:	00db      	lsls	r3, r3, #3
 8003b66:	440b      	add	r3, r1
 8003b68:	3308      	adds	r3, #8
 8003b6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b6e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003b72:	4927      	ldr	r1, [pc, #156]	; (8003c10 <set_vaido+0x284>)
 8003b74:	f014 ffc6 	bl	8018b04 <siprintf>
					SEND_str(Buff);
 8003b78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	f7fe f9c7 	bl	8001f10 <SEND_str>
					SEND_str("\nRANGE_HIGH: ");
 8003b82:	4825      	ldr	r0, [pc, #148]	; (8003c18 <set_vaido+0x28c>)
 8003b84:	f7fe f9c4 	bl	8001f10 <SEND_str>
					sprintf(Buff, "%.3f", VAiDo[i].RANGE_HIGH);
 8003b88:	491c      	ldr	r1, [pc, #112]	; (8003bfc <set_vaido+0x270>)
 8003b8a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003b8e:	4613      	mov	r3, r2
 8003b90:	009b      	lsls	r3, r3, #2
 8003b92:	4413      	add	r3, r2
 8003b94:	00db      	lsls	r3, r3, #3
 8003b96:	440b      	add	r3, r1
 8003b98:	3310      	adds	r3, #16
 8003b9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b9e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003ba2:	491b      	ldr	r1, [pc, #108]	; (8003c10 <set_vaido+0x284>)
 8003ba4:	f014 ffae 	bl	8018b04 <siprintf>
					SEND_str(Buff);
 8003ba8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003bac:	4618      	mov	r0, r3
 8003bae:	f7fe f9af 	bl	8001f10 <SEND_str>
					SEND_str("\n");
 8003bb2:	481a      	ldr	r0, [pc, #104]	; (8003c1c <set_vaido+0x290>)
 8003bb4:	f7fe f9ac 	bl	8001f10 <SEND_str>
					//------------------------------------------------

					break;
 8003bb8:	bf00      	nop
				}
			}
			break;
 8003bba:	e015      	b.n	8003be8 <set_vaido+0x25c>
			for(int j = 0; j < 8; j++)
 8003bbc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003bc0:	3301      	adds	r3, #1
 8003bc2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003bc6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003bca:	2b07      	cmp	r3, #7
 8003bcc:	f77f af73 	ble.w	8003ab6 <set_vaido+0x12a>
			break;
 8003bd0:	e00a      	b.n	8003be8 <set_vaido+0x25c>
	for(int i = 0; i < 4; i++)
 8003bd2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003bd6:	3301      	adds	r3, #1
 8003bd8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003bdc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003be0:	2b03      	cmp	r3, #3
 8003be2:	f77f aef8 	ble.w	80039d6 <set_vaido+0x4a>
		}
	}
}
 8003be6:	bf00      	nop
 8003be8:	bf00      	nop
 8003bea:	37c8      	adds	r7, #200	; 0xc8
 8003bec:	46bd      	mov	sp, r7
 8003bee:	bdb0      	pop	{r4, r5, r7, pc}
 8003bf0:	0801ded0 	.word	0x0801ded0
 8003bf4:	0801de38 	.word	0x0801de38
 8003bf8:	04030201 	.word	0x04030201
 8003bfc:	20000878 	.word	0x20000878
 8003c00:	20000028 	.word	0x20000028
 8003c04:	20000048 	.word	0x20000048
 8003c08:	0801de98 	.word	0x0801de98
 8003c0c:	20000300 	.word	0x20000300
 8003c10:	0801dea4 	.word	0x0801dea4
 8003c14:	0801deac 	.word	0x0801deac
 8003c18:	0801debc 	.word	0x0801debc
 8003c1c:	0801decc 	.word	0x0801decc

08003c20 <set_pwm>:
//Задать сигнал ШИМ на одном выходе
//Принимает "PWM_OUT" - строку с номером ШИМ выхода
//Принимает "D_CYCLE" - коэффициент заполнения ШИМ
void set_pwm(char *PWM_OUT, uint32_t D_CYCLE)
{
 8003c20:	b5b0      	push	{r4, r5, r7, lr}
 8003c22:	b094      	sub	sp, #80	; 0x50
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
 8003c28:	6039      	str	r1, [r7, #0]
	char PVIHOD[4][5] = {"PWM1", "PWM2", "PWM3", "PWM4"};
 8003c2a:	4b4b      	ldr	r3, [pc, #300]	; (8003d58 <set_pwm+0x138>)
 8003c2c:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8003c30:	461d      	mov	r5, r3
 8003c32:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003c34:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003c36:	682b      	ldr	r3, [r5, #0]
 8003c38:	6023      	str	r3, [r4, #0]
	uint32_t PWM_Channel[4] = {TIM_CHANNEL_1, TIM_CHANNEL_2, TIM_CHANNEL_3, TIM_CHANNEL_4};
 8003c3a:	4b48      	ldr	r3, [pc, #288]	; (8003d5c <set_pwm+0x13c>)
 8003c3c:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8003c40:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003c42:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	for(int i = 0; i < 4; i++)
 8003c46:	2300      	movs	r3, #0
 8003c48:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c4a:	e07c      	b.n	8003d46 <set_pwm+0x126>
	{
		if(strcmp(PWM_OUT, PVIHOD[i]) == 0)
 8003c4c:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8003c50:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003c52:	4613      	mov	r3, r2
 8003c54:	009b      	lsls	r3, r3, #2
 8003c56:	4413      	add	r3, r2
 8003c58:	440b      	add	r3, r1
 8003c5a:	4619      	mov	r1, r3
 8003c5c:	6878      	ldr	r0, [r7, #4]
 8003c5e:	f7fc fab7 	bl	80001d0 <strcmp>
 8003c62:	4603      	mov	r3, r0
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d16b      	bne.n	8003d40 <set_pwm+0x120>
		{
			if(PWM[i].clrFlag != false)
 8003c68:	4a3d      	ldr	r2, [pc, #244]	; (8003d60 <set_pwm+0x140>)
 8003c6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c6c:	00db      	lsls	r3, r3, #3
 8003c6e:	4413      	add	r3, r2
 8003c70:	799b      	ldrb	r3, [r3, #6]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d00b      	beq.n	8003c8e <set_pwm+0x6e>
				HAL_TIM_PWM_Start_DMA(&htim3, PWM_Channel[i], 0, 1);
 8003c76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c78:	009b      	lsls	r3, r3, #2
 8003c7a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8003c7e:	4413      	add	r3, r2
 8003c80:	f853 1c28 	ldr.w	r1, [r3, #-40]
 8003c84:	2301      	movs	r3, #1
 8003c86:	2200      	movs	r2, #0
 8003c88:	4836      	ldr	r0, [pc, #216]	; (8003d64 <set_pwm+0x144>)
 8003c8a:	f006 fcbf 	bl	800a60c <HAL_TIM_PWM_Start_DMA>

			PWM[i].clrFlag = true;
 8003c8e:	4a34      	ldr	r2, [pc, #208]	; (8003d60 <set_pwm+0x140>)
 8003c90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c92:	00db      	lsls	r3, r3, #3
 8003c94:	4413      	add	r3, r2
 8003c96:	2201      	movs	r2, #1
 8003c98:	719a      	strb	r2, [r3, #6]
			PWM[i].PWM_Channel = PWM_Channel[i];
 8003c9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c9c:	009b      	lsls	r3, r3, #2
 8003c9e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8003ca2:	4413      	add	r3, r2
 8003ca4:	f853 2c28 	ldr.w	r2, [r3, #-40]
 8003ca8:	492d      	ldr	r1, [pc, #180]	; (8003d60 <set_pwm+0x140>)
 8003caa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003cac:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
			PWM[i].D_CYCLE[0] = (D_CYCLE * 100);
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	b29b      	uxth	r3, r3
 8003cb4:	461a      	mov	r2, r3
 8003cb6:	0092      	lsls	r2, r2, #2
 8003cb8:	4413      	add	r3, r2
 8003cba:	461a      	mov	r2, r3
 8003cbc:	0091      	lsls	r1, r2, #2
 8003cbe:	461a      	mov	r2, r3
 8003cc0:	460b      	mov	r3, r1
 8003cc2:	4413      	add	r3, r2
 8003cc4:	009b      	lsls	r3, r3, #2
 8003cc6:	b299      	uxth	r1, r3
 8003cc8:	4a25      	ldr	r2, [pc, #148]	; (8003d60 <set_pwm+0x140>)
 8003cca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ccc:	00db      	lsls	r3, r3, #3
 8003cce:	4413      	add	r3, r2
 8003cd0:	460a      	mov	r2, r1
 8003cd2:	809a      	strh	r2, [r3, #4]
			HAL_TIM_PWM_Start_DMA(&htim3, PWM_Channel[i], (uint32_t*)PWM[i].D_CYCLE, 1);
 8003cd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003cd6:	009b      	lsls	r3, r3, #2
 8003cd8:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8003cdc:	4413      	add	r3, r2
 8003cde:	f853 1c28 	ldr.w	r1, [r3, #-40]
 8003ce2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ce4:	00db      	lsls	r3, r3, #3
 8003ce6:	4a1e      	ldr	r2, [pc, #120]	; (8003d60 <set_pwm+0x140>)
 8003ce8:	4413      	add	r3, r2
 8003cea:	1d1a      	adds	r2, r3, #4
 8003cec:	2301      	movs	r3, #1
 8003cee:	481d      	ldr	r0, [pc, #116]	; (8003d64 <set_pwm+0x144>)
 8003cf0:	f006 fc8c 	bl	800a60c <HAL_TIM_PWM_Start_DMA>

			//------------------------------------------------
			char Buff[32];
			SEND_str("PWM_OUT: ");
 8003cf4:	481c      	ldr	r0, [pc, #112]	; (8003d68 <set_pwm+0x148>)
 8003cf6:	f7fe f90b 	bl	8001f10 <SEND_str>
			SEND_str(PVIHOD[i]);
 8003cfa:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8003cfe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003d00:	4613      	mov	r3, r2
 8003d02:	009b      	lsls	r3, r3, #2
 8003d04:	4413      	add	r3, r2
 8003d06:	440b      	add	r3, r1
 8003d08:	4618      	mov	r0, r3
 8003d0a:	f7fe f901 	bl	8001f10 <SEND_str>
			SEND_str("\n");
 8003d0e:	4817      	ldr	r0, [pc, #92]	; (8003d6c <set_pwm+0x14c>)
 8003d10:	f7fe f8fe 	bl	8001f10 <SEND_str>
			SEND_str("DUTY_CYCLE: ");
 8003d14:	4816      	ldr	r0, [pc, #88]	; (8003d70 <set_pwm+0x150>)
 8003d16:	f7fe f8fb 	bl	8001f10 <SEND_str>
			sprintf(Buff, "%d", D_CYCLE);
 8003d1a:	f107 0308 	add.w	r3, r7, #8
 8003d1e:	683a      	ldr	r2, [r7, #0]
 8003d20:	4914      	ldr	r1, [pc, #80]	; (8003d74 <set_pwm+0x154>)
 8003d22:	4618      	mov	r0, r3
 8003d24:	f014 feee 	bl	8018b04 <siprintf>
			SEND_str(Buff);
 8003d28:	f107 0308 	add.w	r3, r7, #8
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	f7fe f8ef 	bl	8001f10 <SEND_str>
			SEND_str("%");
 8003d32:	4811      	ldr	r0, [pc, #68]	; (8003d78 <set_pwm+0x158>)
 8003d34:	f7fe f8ec 	bl	8001f10 <SEND_str>
			SEND_str("\n");
 8003d38:	480c      	ldr	r0, [pc, #48]	; (8003d6c <set_pwm+0x14c>)
 8003d3a:	f7fe f8e9 	bl	8001f10 <SEND_str>
			//------------------------------------------------

			break;
 8003d3e:	e007      	b.n	8003d50 <set_pwm+0x130>
	for(int i = 0; i < 4; i++)
 8003d40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d42:	3301      	adds	r3, #1
 8003d44:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d48:	2b03      	cmp	r3, #3
 8003d4a:	f77f af7f 	ble.w	8003c4c <set_pwm+0x2c>
		}
	}
}
 8003d4e:	bf00      	nop
 8003d50:	bf00      	nop
 8003d52:	3750      	adds	r7, #80	; 0x50
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bdb0      	pop	{r4, r5, r7, pc}
 8003d58:	0801df1c 	.word	0x0801df1c
 8003d5c:	0801df30 	.word	0x0801df30
 8003d60:	20000858 	.word	0x20000858
 8003d64:	20000c9c 	.word	0x20000c9c
 8003d68:	0801def8 	.word	0x0801def8
 8003d6c:	0801decc 	.word	0x0801decc
 8003d70:	0801df04 	.word	0x0801df04
 8003d74:	0801df14 	.word	0x0801df14
 8003d78:	0801df18 	.word	0x0801df18

08003d7c <set_temperature>:
//Принимает "RANGE_TEMP_LOW" - нижний предел значения температуры
//Принимает "RANGE_TEMP_HIGH" - верхний предел значения температуры
//Принимает "D_OUT" - строку с номером цифрового выхода
//Принимает "VAR_OUT" - переменная состояния выхода
void set_temperature(char *ROM_RAW, double RANGE_TEMP_LOW, double RANGE_TEMP_HIGH, char *D_OUT, uint8_t VAR_OUT)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b0a8      	sub	sp, #160	; 0xa0
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	61f8      	str	r0, [r7, #28]
 8003d84:	ed87 0b04 	vstr	d0, [r7, #16]
 8003d88:	ed87 1b02 	vstr	d1, [r7, #8]
 8003d8c:	61b9      	str	r1, [r7, #24]
 8003d8e:	4613      	mov	r3, r2
 8003d90:	71fb      	strb	r3, [r7, #7]
	char VIHOD[8][10] = {"VIHOD1", "VIHOD2", "VIHOD3", "VIHOD4", "VIHOD5", "VIHOD6", "VIHOD7", "VIHOD8"};
 8003d92:	4aa3      	ldr	r2, [pc, #652]	; (8004020 <set_temperature+0x2a4>)
 8003d94:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003d98:	4611      	mov	r1, r2
 8003d9a:	2250      	movs	r2, #80	; 0x50
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	f014 f8d1 	bl	8017f44 <memcpy>

	for(int i = 0; i < AMT_TEMP_SENS; i++)
 8003da2:	2300      	movs	r3, #0
 8003da4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003da8:	e130      	b.n	800400c <set_temperature+0x290>
	{
		if(strcmp(ROM_RAW, Device_RAW_ROM[i]) == 0)
 8003daa:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8003dae:	4613      	mov	r3, r2
 8003db0:	009b      	lsls	r3, r3, #2
 8003db2:	4413      	add	r3, r2
 8003db4:	009b      	lsls	r3, r3, #2
 8003db6:	4a9b      	ldr	r2, [pc, #620]	; (8004024 <set_temperature+0x2a8>)
 8003db8:	4413      	add	r3, r2
 8003dba:	4619      	mov	r1, r3
 8003dbc:	69f8      	ldr	r0, [r7, #28]
 8003dbe:	f7fc fa07 	bl	80001d0 <strcmp>
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	f040 811c 	bne.w	8004002 <set_temperature+0x286>
		{
			if(TSiDo[i].clrFlag != false)
 8003dca:	4997      	ldr	r1, [pc, #604]	; (8004028 <set_temperature+0x2ac>)
 8003dcc:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8003dd0:	4613      	mov	r3, r2
 8003dd2:	00db      	lsls	r3, r3, #3
 8003dd4:	1a9b      	subs	r3, r3, r2
 8003dd6:	00db      	lsls	r3, r3, #3
 8003dd8:	440b      	add	r3, r1
 8003dda:	3330      	adds	r3, #48	; 0x30
 8003ddc:	781b      	ldrb	r3, [r3, #0]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d017      	beq.n	8003e12 <set_temperature+0x96>
				HAL_GPIO_WritePin(TSiDo[i].D_OUT, TSiDo[i].OCD_Pin, RESET);
 8003de2:	4991      	ldr	r1, [pc, #580]	; (8004028 <set_temperature+0x2ac>)
 8003de4:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8003de8:	4613      	mov	r3, r2
 8003dea:	00db      	lsls	r3, r3, #3
 8003dec:	1a9b      	subs	r3, r3, r2
 8003dee:	00db      	lsls	r3, r3, #3
 8003df0:	440b      	add	r3, r1
 8003df2:	3328      	adds	r3, #40	; 0x28
 8003df4:	6818      	ldr	r0, [r3, #0]
 8003df6:	498c      	ldr	r1, [pc, #560]	; (8004028 <set_temperature+0x2ac>)
 8003df8:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8003dfc:	4613      	mov	r3, r2
 8003dfe:	00db      	lsls	r3, r3, #3
 8003e00:	1a9b      	subs	r3, r3, r2
 8003e02:	00db      	lsls	r3, r3, #3
 8003e04:	440b      	add	r3, r1
 8003e06:	332e      	adds	r3, #46	; 0x2e
 8003e08:	881b      	ldrh	r3, [r3, #0]
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	4619      	mov	r1, r3
 8003e0e:	f004 fefd 	bl	8008c0c <HAL_GPIO_WritePin>

			TSiDo[i].clrFlag = true;
 8003e12:	4985      	ldr	r1, [pc, #532]	; (8004028 <set_temperature+0x2ac>)
 8003e14:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8003e18:	4613      	mov	r3, r2
 8003e1a:	00db      	lsls	r3, r3, #3
 8003e1c:	1a9b      	subs	r3, r3, r2
 8003e1e:	00db      	lsls	r3, r3, #3
 8003e20:	440b      	add	r3, r1
 8003e22:	3330      	adds	r3, #48	; 0x30
 8003e24:	2201      	movs	r2, #1
 8003e26:	701a      	strb	r2, [r3, #0]
			TSiDo[i].DEVICE_NUMBER = i+1;
 8003e28:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003e2c:	b2db      	uxtb	r3, r3
 8003e2e:	3301      	adds	r3, #1
 8003e30:	b2d8      	uxtb	r0, r3
 8003e32:	497d      	ldr	r1, [pc, #500]	; (8004028 <set_temperature+0x2ac>)
 8003e34:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8003e38:	4613      	mov	r3, r2
 8003e3a:	00db      	lsls	r3, r3, #3
 8003e3c:	1a9b      	subs	r3, r3, r2
 8003e3e:	00db      	lsls	r3, r3, #3
 8003e40:	440b      	add	r3, r1
 8003e42:	4602      	mov	r2, r0
 8003e44:	701a      	strb	r2, [r3, #0]
			for(int j = 0; j < 16; j++)
 8003e46:	2300      	movs	r3, #0
 8003e48:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003e4c:	e01e      	b.n	8003e8c <set_temperature+0x110>
				TSiDo[i].ROM_RAW[j] = Device_RAW_ROM[i][j];
 8003e4e:	4975      	ldr	r1, [pc, #468]	; (8004024 <set_temperature+0x2a8>)
 8003e50:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8003e54:	4613      	mov	r3, r2
 8003e56:	009b      	lsls	r3, r3, #2
 8003e58:	4413      	add	r3, r2
 8003e5a:	009b      	lsls	r3, r3, #2
 8003e5c:	18ca      	adds	r2, r1, r3
 8003e5e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003e62:	4413      	add	r3, r2
 8003e64:	7818      	ldrb	r0, [r3, #0]
 8003e66:	4970      	ldr	r1, [pc, #448]	; (8004028 <set_temperature+0x2ac>)
 8003e68:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8003e6c:	4613      	mov	r3, r2
 8003e6e:	00db      	lsls	r3, r3, #3
 8003e70:	1a9b      	subs	r3, r3, r2
 8003e72:	00db      	lsls	r3, r3, #3
 8003e74:	18ca      	adds	r2, r1, r3
 8003e76:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003e7a:	4413      	add	r3, r2
 8003e7c:	3301      	adds	r3, #1
 8003e7e:	4602      	mov	r2, r0
 8003e80:	701a      	strb	r2, [r3, #0]
			for(int j = 0; j < 16; j++)
 8003e82:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003e86:	3301      	adds	r3, #1
 8003e88:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003e8c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003e90:	2b0f      	cmp	r3, #15
 8003e92:	dddc      	ble.n	8003e4e <set_temperature+0xd2>
			TSiDo[i].RANGE_TEMP_LOW = RANGE_TEMP_LOW;
 8003e94:	4964      	ldr	r1, [pc, #400]	; (8004028 <set_temperature+0x2ac>)
 8003e96:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8003e9a:	4613      	mov	r3, r2
 8003e9c:	00db      	lsls	r3, r3, #3
 8003e9e:	1a9b      	subs	r3, r3, r2
 8003ea0:	00db      	lsls	r3, r3, #3
 8003ea2:	440b      	add	r3, r1
 8003ea4:	f103 0118 	add.w	r1, r3, #24
 8003ea8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003eac:	e9c1 2300 	strd	r2, r3, [r1]
			TSiDo[i].RANGE_TEMP_HIGH = RANGE_TEMP_HIGH;
 8003eb0:	495d      	ldr	r1, [pc, #372]	; (8004028 <set_temperature+0x2ac>)
 8003eb2:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8003eb6:	4613      	mov	r3, r2
 8003eb8:	00db      	lsls	r3, r3, #3
 8003eba:	1a9b      	subs	r3, r3, r2
 8003ebc:	00db      	lsls	r3, r3, #3
 8003ebe:	440b      	add	r3, r1
 8003ec0:	f103 0120 	add.w	r1, r3, #32
 8003ec4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003ec8:	e9c1 2300 	strd	r2, r3, [r1]
			for(int j = 0; j < 8; j++)
 8003ecc:	2300      	movs	r3, #0
 8003ece:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003ed2:	e090      	b.n	8003ff6 <set_temperature+0x27a>
			{
				if(strcmp(D_OUT, VIHOD[j]) == 0)
 8003ed4:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8003ed8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003edc:	4613      	mov	r3, r2
 8003ede:	009b      	lsls	r3, r3, #2
 8003ee0:	4413      	add	r3, r2
 8003ee2:	005b      	lsls	r3, r3, #1
 8003ee4:	440b      	add	r3, r1
 8003ee6:	4619      	mov	r1, r3
 8003ee8:	69b8      	ldr	r0, [r7, #24]
 8003eea:	f7fc f971 	bl	80001d0 <strcmp>
 8003eee:	4603      	mov	r3, r0
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d17b      	bne.n	8003fec <set_temperature+0x270>
				{
					TSiDo[i].D_OUT = pVIHOD[j];
 8003ef4:	4a4d      	ldr	r2, [pc, #308]	; (800402c <set_temperature+0x2b0>)
 8003ef6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003efa:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003efe:	484a      	ldr	r0, [pc, #296]	; (8004028 <set_temperature+0x2ac>)
 8003f00:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8003f04:	4613      	mov	r3, r2
 8003f06:	00db      	lsls	r3, r3, #3
 8003f08:	1a9b      	subs	r3, r3, r2
 8003f0a:	00db      	lsls	r3, r3, #3
 8003f0c:	4403      	add	r3, r0
 8003f0e:	3328      	adds	r3, #40	; 0x28
 8003f10:	6019      	str	r1, [r3, #0]
					TSiDo[i].VAR_OUT = VAR_OUT;
 8003f12:	4945      	ldr	r1, [pc, #276]	; (8004028 <set_temperature+0x2ac>)
 8003f14:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8003f18:	4613      	mov	r3, r2
 8003f1a:	00db      	lsls	r3, r3, #3
 8003f1c:	1a9b      	subs	r3, r3, r2
 8003f1e:	00db      	lsls	r3, r3, #3
 8003f20:	440b      	add	r3, r1
 8003f22:	332c      	adds	r3, #44	; 0x2c
 8003f24:	79fa      	ldrb	r2, [r7, #7]
 8003f26:	701a      	strb	r2, [r3, #0]
					TSiDo[i].OCD_Pin = OCD_Pin[j];
 8003f28:	4a41      	ldr	r2, [pc, #260]	; (8004030 <set_temperature+0x2b4>)
 8003f2a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003f2e:	f832 0013 	ldrh.w	r0, [r2, r3, lsl #1]
 8003f32:	493d      	ldr	r1, [pc, #244]	; (8004028 <set_temperature+0x2ac>)
 8003f34:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8003f38:	4613      	mov	r3, r2
 8003f3a:	00db      	lsls	r3, r3, #3
 8003f3c:	1a9b      	subs	r3, r3, r2
 8003f3e:	00db      	lsls	r3, r3, #3
 8003f40:	440b      	add	r3, r1
 8003f42:	332e      	adds	r3, #46	; 0x2e
 8003f44:	4602      	mov	r2, r0
 8003f46:	801a      	strh	r2, [r3, #0]

					//------------------------------------------------
					char Buff[32];
					SEND_str("ROM_RAW: ");
 8003f48:	483a      	ldr	r0, [pc, #232]	; (8004034 <set_temperature+0x2b8>)
 8003f4a:	f7fd ffe1 	bl	8001f10 <SEND_str>
					SEND_str(ROM_RAW);
 8003f4e:	69f8      	ldr	r0, [r7, #28]
 8003f50:	f7fd ffde 	bl	8001f10 <SEND_str>
					SEND_str("\n");
 8003f54:	4838      	ldr	r0, [pc, #224]	; (8004038 <set_temperature+0x2bc>)
 8003f56:	f7fd ffdb 	bl	8001f10 <SEND_str>
					SEND_str("SET VALUE: ");
 8003f5a:	4838      	ldr	r0, [pc, #224]	; (800403c <set_temperature+0x2c0>)
 8003f5c:	f7fd ffd8 	bl	8001f10 <SEND_str>
					sprintf(Buff, "%.2f", temper);
 8003f60:	4b37      	ldr	r3, [pc, #220]	; (8004040 <set_temperature+0x2c4>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4618      	mov	r0, r3
 8003f66:	f7fc faff 	bl	8000568 <__aeabi_f2d>
 8003f6a:	4602      	mov	r2, r0
 8003f6c:	460b      	mov	r3, r1
 8003f6e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003f72:	4934      	ldr	r1, [pc, #208]	; (8004044 <set_temperature+0x2c8>)
 8003f74:	f014 fdc6 	bl	8018b04 <siprintf>
					SEND_str(Buff);
 8003f78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	f7fd ffc7 	bl	8001f10 <SEND_str>
					SEND_str("\nRANGE_TEMP_LOW: ");
 8003f82:	4831      	ldr	r0, [pc, #196]	; (8004048 <set_temperature+0x2cc>)
 8003f84:	f7fd ffc4 	bl	8001f10 <SEND_str>
					sprintf(Buff, "%.2f", TSiDo[i].RANGE_TEMP_LOW);
 8003f88:	4927      	ldr	r1, [pc, #156]	; (8004028 <set_temperature+0x2ac>)
 8003f8a:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8003f8e:	4613      	mov	r3, r2
 8003f90:	00db      	lsls	r3, r3, #3
 8003f92:	1a9b      	subs	r3, r3, r2
 8003f94:	00db      	lsls	r3, r3, #3
 8003f96:	440b      	add	r3, r1
 8003f98:	3318      	adds	r3, #24
 8003f9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f9e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003fa2:	4928      	ldr	r1, [pc, #160]	; (8004044 <set_temperature+0x2c8>)
 8003fa4:	f014 fdae 	bl	8018b04 <siprintf>
					SEND_str(Buff);
 8003fa8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003fac:	4618      	mov	r0, r3
 8003fae:	f7fd ffaf 	bl	8001f10 <SEND_str>
					SEND_str("\nRANGE_TEMP_HIGH: ");
 8003fb2:	4826      	ldr	r0, [pc, #152]	; (800404c <set_temperature+0x2d0>)
 8003fb4:	f7fd ffac 	bl	8001f10 <SEND_str>
					sprintf(Buff, "%.2f", TSiDo[i].RANGE_TEMP_HIGH);
 8003fb8:	491b      	ldr	r1, [pc, #108]	; (8004028 <set_temperature+0x2ac>)
 8003fba:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8003fbe:	4613      	mov	r3, r2
 8003fc0:	00db      	lsls	r3, r3, #3
 8003fc2:	1a9b      	subs	r3, r3, r2
 8003fc4:	00db      	lsls	r3, r3, #3
 8003fc6:	440b      	add	r3, r1
 8003fc8:	3320      	adds	r3, #32
 8003fca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fce:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003fd2:	491c      	ldr	r1, [pc, #112]	; (8004044 <set_temperature+0x2c8>)
 8003fd4:	f014 fd96 	bl	8018b04 <siprintf>
					SEND_str(Buff);
 8003fd8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003fdc:	4618      	mov	r0, r3
 8003fde:	f7fd ff97 	bl	8001f10 <SEND_str>
					SEND_str("\n");
 8003fe2:	4815      	ldr	r0, [pc, #84]	; (8004038 <set_temperature+0x2bc>)
 8003fe4:	f7fd ff94 	bl	8001f10 <SEND_str>
					//------------------------------------------------

					break;
 8003fe8:	bf00      	nop
				}
			}
			break;
 8003fea:	e015      	b.n	8004018 <set_temperature+0x29c>
			for(int j = 0; j < 8; j++)
 8003fec:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003ff0:	3301      	adds	r3, #1
 8003ff2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003ff6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003ffa:	2b07      	cmp	r3, #7
 8003ffc:	f77f af6a 	ble.w	8003ed4 <set_temperature+0x158>
			break;
 8004000:	e00a      	b.n	8004018 <set_temperature+0x29c>
	for(int i = 0; i < AMT_TEMP_SENS; i++)
 8004002:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004006:	3301      	adds	r3, #1
 8004008:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800400c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004010:	2b07      	cmp	r3, #7
 8004012:	f77f aeca 	ble.w	8003daa <set_temperature+0x2e>
		}
	}
}
 8004016:	bf00      	nop
 8004018:	bf00      	nop
 800401a:	37a0      	adds	r7, #160	; 0xa0
 800401c:	46bd      	mov	sp, r7
 800401e:	bd80      	pop	{r7, pc}
 8004020:	0801de38 	.word	0x0801de38
 8004024:	20000a40 	.word	0x20000a40
 8004028:	200005f0 	.word	0x200005f0
 800402c:	20000028 	.word	0x20000028
 8004030:	20000048 	.word	0x20000048
 8004034:	0801df40 	.word	0x0801df40
 8004038:	0801decc 	.word	0x0801decc
 800403c:	0801de98 	.word	0x0801de98
 8004040:	20000a38 	.word	0x20000a38
 8004044:	0801df4c 	.word	0x0801df4c
 8004048:	0801df54 	.word	0x0801df54
 800404c:	0801df68 	.word	0x0801df68

08004050 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004054:	f002 fac0 	bl	80065d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004058:	f000 f862 	bl	8004120 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800405c:	f7fe f922 	bl	80022a4 <MX_GPIO_Init>
  MX_DMA_Init();
 8004060:	f7fe f8d2 	bl	8002208 <MX_DMA_Init>
  MX_ADC1_Init();
 8004064:	f7fc ff82 	bl	8000f6c <MX_ADC1_Init>
  MX_SPI1_Init();
 8004068:	f000 fa06 	bl	8004478 <MX_SPI1_Init>
  MX_SPI2_Init();
 800406c:	f000 fa3a 	bl	80044e4 <MX_SPI2_Init>
  MX_TIM3_Init();
 8004070:	f001 fe40 	bl	8005cf4 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8004074:	f002 f8ca 	bl	800620c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8004078:	f002 f8f2 	bl	8006260 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800407c:	f002 f91a 	bl	80062b4 <MX_USART3_UART_Init>
  MX_LWIP_Init();
 8004080:	f007 fe94 	bl	800bdac <MX_LWIP_Init>
  MX_TIM4_Init();
 8004084:	f001 feb2 	bl	8005dec <MX_TIM4_Init>
  MX_RTC_Init();
 8004088:	f000 f986 	bl	8004398 <MX_RTC_Init>
  MX_TIM6_Init();
 800408c:	f001 ff04 	bl	8005e98 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

	HAL_Delay(5000);
 8004090:	f241 3088 	movw	r0, #5000	; 0x1388
 8004094:	f002 fae2 	bl	800665c <HAL_Delay>
	DWT_Init();
 8004098:	f7fe f87a 	bl	8002190 <DWT_Init>

	EN_Interrupt();		//Для дебага по USART3
 800409c:	f002 fa4c 	bl	8006538 <EN_Interrupt>
												//Для организации обмена данными по ethernet нужно включить:
												//net_ini(); MX_LWIP_Process();(Вкл в main) также закоментить в файле stm32f4xx_it.c строчки для отладки через DEBUG_main();

	//----------------ADC_test------------------
	//Допилить фичу переключения аналогового комутатора !!!
	HAL_GPIO_WritePin(GPIOE, S1_Pin, RESET);	//Вход аналогового комутатора - выход линии 1
 80040a0:	2200      	movs	r2, #0
 80040a2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80040a6:	4817      	ldr	r0, [pc, #92]	; (8004104 <main+0xb4>)
 80040a8:	f004 fdb0 	bl	8008c0c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, S2_Pin, RESET);
 80040ac:	2200      	movs	r2, #0
 80040ae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80040b2:	4814      	ldr	r0, [pc, #80]	; (8004104 <main+0xb4>)
 80040b4:	f004 fdaa 	bl	8008c0c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, S3_Pin, RESET);
 80040b8:	2200      	movs	r2, #0
 80040ba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80040be:	4811      	ldr	r0, [pc, #68]	; (8004104 <main+0xb4>)
 80040c0:	f004 fda4 	bl	8008c0c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, S4_Pin, RESET);
 80040c4:	2200      	movs	r2, #0
 80040c6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80040ca:	480e      	ldr	r0, [pc, #56]	; (8004104 <main+0xb4>)
 80040cc:	f004 fd9e 	bl	8008c0c <HAL_GPIO_WritePin>

	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&adc, 4);		//Стартуем АЦП
 80040d0:	2204      	movs	r2, #4
 80040d2:	490d      	ldr	r1, [pc, #52]	; (8004108 <main+0xb8>)
 80040d4:	480d      	ldr	r0, [pc, #52]	; (800410c <main+0xbc>)
 80040d6:	f002 fb29 	bl	800672c <HAL_ADC_Start_DMA>
	HAL_TIM_OC_Start(&htim4, TIM_CHANNEL_4);
 80040da:	210c      	movs	r1, #12
 80040dc:	480c      	ldr	r0, [pc, #48]	; (8004110 <main+0xc0>)
 80040de:	f006 fa2b 	bl	800a538 <HAL_TIM_OC_Start>
	//------------------------------------------

	//-------------1-WIRE_test------------------
	UpdateTempSens();
 80040e2:	f001 fd63 	bl	8005bac <UpdateTempSens>
	//------------------------------------------


//	HAL_UART_Receive_IT(&huart3,(uint8_t*)str_ethernet,1);		//Настройка прерывания COM для отладки ETH (!?)

	HAL_SPI_TransmitReceive_IT(&hspi2, (uint8_t *)SPI_tx_buf, (uint8_t *)SPI_rx_buf, 1);	//Настройка прерывания по spi для МК
 80040e6:	2301      	movs	r3, #1
 80040e8:	4a0a      	ldr	r2, [pc, #40]	; (8004114 <main+0xc4>)
 80040ea:	490b      	ldr	r1, [pc, #44]	; (8004118 <main+0xc8>)
 80040ec:	480b      	ldr	r0, [pc, #44]	; (800411c <main+0xcc>)
 80040ee:	f005 fe0b 	bl	8009d08 <HAL_SPI_TransmitReceive_IT>
		//----------------GSM_test----------------
//		GSM_RxCpltCallback();		//Обработчик принятых данных от модуля GSM
		//----------------------------------------

		//--------------SPI_test_MK---------------
		SPI_available();			//Необходимо переделать так чтобы на дисплее был только статус вывода.
 80040f2:	f000 fb59 	bl	80047a8 <SPI_available>

		//----------------PWM_test----------------
		//----------------------------------------

		//------------------DEBUG-----------------
		DEBUG_main();
 80040f6:	f7fd ff27 	bl	8001f48 <DEBUG_main>
		//----------------------------------------

		//--------------ReINIT_GPIO---------------
		CheckReWriteVAiDo();
 80040fa:	f7ff f8cd 	bl	8003298 <CheckReWriteVAiDo>
		//----------------------------------------

		//----------TEST_EXAMPLE_1-WIRE-----------
//		TempSensMain();
		CheckReWriteTSiDo();
 80040fe:	f7ff f95d 	bl	80033bc <CheckReWriteTSiDo>
		SPI_available();			//Необходимо переделать так чтобы на дисплее был только статус вывода.
 8004102:	e7f6      	b.n	80040f2 <main+0xa2>
 8004104:	40021000 	.word	0x40021000
 8004108:	200002f8 	.word	0x200002f8
 800410c:	200007b0 	.word	0x200007b0
 8004110:	20000bfc 	.word	0x20000bfc
 8004114:	2000038c 	.word	0x2000038c
 8004118:	20000390 	.word	0x20000390
 800411c:	20000b00 	.word	0x20000b00

08004120 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b098      	sub	sp, #96	; 0x60
 8004124:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004126:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800412a:	2230      	movs	r2, #48	; 0x30
 800412c:	2100      	movs	r1, #0
 800412e:	4618      	mov	r0, r3
 8004130:	f013 ff30 	bl	8017f94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004134:	f107 031c 	add.w	r3, r7, #28
 8004138:	2200      	movs	r2, #0
 800413a:	601a      	str	r2, [r3, #0]
 800413c:	605a      	str	r2, [r3, #4]
 800413e:	609a      	str	r2, [r3, #8]
 8004140:	60da      	str	r2, [r3, #12]
 8004142:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004144:	f107 030c 	add.w	r3, r7, #12
 8004148:	2200      	movs	r2, #0
 800414a:	601a      	str	r2, [r3, #0]
 800414c:	605a      	str	r2, [r3, #4]
 800414e:	609a      	str	r2, [r3, #8]
 8004150:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004152:	2300      	movs	r3, #0
 8004154:	60bb      	str	r3, [r7, #8]
 8004156:	4b31      	ldr	r3, [pc, #196]	; (800421c <SystemClock_Config+0xfc>)
 8004158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800415a:	4a30      	ldr	r2, [pc, #192]	; (800421c <SystemClock_Config+0xfc>)
 800415c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004160:	6413      	str	r3, [r2, #64]	; 0x40
 8004162:	4b2e      	ldr	r3, [pc, #184]	; (800421c <SystemClock_Config+0xfc>)
 8004164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004166:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800416a:	60bb      	str	r3, [r7, #8]
 800416c:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800416e:	2300      	movs	r3, #0
 8004170:	607b      	str	r3, [r7, #4]
 8004172:	4b2b      	ldr	r3, [pc, #172]	; (8004220 <SystemClock_Config+0x100>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4a2a      	ldr	r2, [pc, #168]	; (8004220 <SystemClock_Config+0x100>)
 8004178:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800417c:	6013      	str	r3, [r2, #0]
 800417e:	4b28      	ldr	r3, [pc, #160]	; (8004220 <SystemClock_Config+0x100>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004186:	607b      	str	r3, [r7, #4]
 8004188:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 800418a:	2305      	movs	r3, #5
 800418c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800418e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004192:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8004194:	2301      	movs	r3, #1
 8004196:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004198:	2302      	movs	r3, #2
 800419a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800419c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80041a0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80041a2:	2304      	movs	r3, #4
 80041a4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 168;
 80041a6:	23a8      	movs	r3, #168	; 0xa8
 80041a8:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80041aa:	2302      	movs	r3, #2
 80041ac:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80041ae:	2304      	movs	r3, #4
 80041b0:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80041b2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80041b6:	4618      	mov	r0, r3
 80041b8:	f004 fd5a 	bl	8008c70 <HAL_RCC_OscConfig>
 80041bc:	4603      	mov	r3, r0
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d001      	beq.n	80041c6 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80041c2:	f000 f8e1 	bl	8004388 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80041c6:	230f      	movs	r3, #15
 80041c8:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80041ca:	2302      	movs	r3, #2
 80041cc:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80041ce:	2300      	movs	r3, #0
 80041d0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80041d2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80041d6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80041d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80041dc:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80041de:	f107 031c 	add.w	r3, r7, #28
 80041e2:	2105      	movs	r1, #5
 80041e4:	4618      	mov	r0, r3
 80041e6:	f004 ffb3 	bl	8009150 <HAL_RCC_ClockConfig>
 80041ea:	4603      	mov	r3, r0
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d001      	beq.n	80041f4 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80041f0:	f000 f8ca 	bl	8004388 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80041f4:	2302      	movs	r3, #2
 80041f6:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80041f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80041fc:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80041fe:	f107 030c 	add.w	r3, r7, #12
 8004202:	4618      	mov	r0, r3
 8004204:	f005 f9d2 	bl	80095ac <HAL_RCCEx_PeriphCLKConfig>
 8004208:	4603      	mov	r3, r0
 800420a:	2b00      	cmp	r3, #0
 800420c:	d001      	beq.n	8004212 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 800420e:	f000 f8bb 	bl	8004388 <Error_Handler>
  }
}
 8004212:	bf00      	nop
 8004214:	3760      	adds	r7, #96	; 0x60
 8004216:	46bd      	mov	sp, r7
 8004218:	bd80      	pop	{r7, pc}
 800421a:	bf00      	nop
 800421c:	40023800 	.word	0x40023800
 8004220:	40007000 	.word	0x40007000

08004224 <HAL_GPIO_EXTI_Callback>:
//	{
//		UART3_RxCpltCallback();
//	}
}
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b082      	sub	sp, #8
 8004228:	af00      	add	r7, sp, #0
 800422a:	4603      	mov	r3, r0
 800422c:	80fb      	strh	r3, [r7, #6]
	CheckReWriteDiDo();
 800422e:	f7fe ff77 	bl	8003120 <CheckReWriteDiDo>
}
 8004232:	bf00      	nop
 8004234:	3708      	adds	r7, #8
 8004236:	46bd      	mov	sp, r7
 8004238:	bd80      	pop	{r7, pc}
	...

0800423c <HAL_SPI_TxRxCpltCallback>:
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800423c:	b480      	push	{r7}
 800423e:	b083      	sub	sp, #12
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]

	  //Написать обработчик сообщенй по SPI от MCU

	if(hspi == &hspi2)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	4a0a      	ldr	r2, [pc, #40]	; (8004270 <HAL_SPI_TxRxCpltCallback+0x34>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d10b      	bne.n	8004264 <HAL_SPI_TxRxCpltCallback+0x28>
	{
	    if(!hspi2.TxXferCount && !flag_iput_spi2)
 800424c:	4b08      	ldr	r3, [pc, #32]	; (8004270 <HAL_SPI_TxRxCpltCallback+0x34>)
 800424e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004250:	b29b      	uxth	r3, r3
 8004252:	2b00      	cmp	r3, #0
 8004254:	d106      	bne.n	8004264 <HAL_SPI_TxRxCpltCallback+0x28>
 8004256:	4b07      	ldr	r3, [pc, #28]	; (8004274 <HAL_SPI_TxRxCpltCallback+0x38>)
 8004258:	781b      	ldrb	r3, [r3, #0]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d102      	bne.n	8004264 <HAL_SPI_TxRxCpltCallback+0x28>
	    {
	    	flag_iput_spi2 = 1;
 800425e:	4b05      	ldr	r3, [pc, #20]	; (8004274 <HAL_SPI_TxRxCpltCallback+0x38>)
 8004260:	2201      	movs	r2, #1
 8004262:	701a      	strb	r2, [r3, #0]
	    }
	}
}
 8004264:	bf00      	nop
 8004266:	370c      	adds	r7, #12
 8004268:	46bd      	mov	sp, r7
 800426a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426e:	4770      	bx	lr
 8004270:	20000b00 	.word	0x20000b00
 8004274:	20000391 	.word	0x20000391

08004278 <HAL_ADC_ConvCpltCallback>:
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b082      	sub	sp, #8
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
    if(hadc->Instance == ADC1)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a1d      	ldr	r2, [pc, #116]	; (80042fc <HAL_ADC_ConvCpltCallback+0x84>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d133      	bne.n	80042f2 <HAL_ADC_ConvCpltCallback+0x7a>
    {
        adcValue[0] = Conversion_ADC1((uint16_t)adc[0]);
 800428a:	4b1d      	ldr	r3, [pc, #116]	; (8004300 <HAL_ADC_ConvCpltCallback+0x88>)
 800428c:	881b      	ldrh	r3, [r3, #0]
 800428e:	b29b      	uxth	r3, r3
 8004290:	4618      	mov	r0, r3
 8004292:	f7fc ff61 	bl	8001158 <Conversion_ADC1>
 8004296:	eeb0 7a40 	vmov.f32	s14, s0
 800429a:	eef0 7a60 	vmov.f32	s15, s1
 800429e:	4b19      	ldr	r3, [pc, #100]	; (8004304 <HAL_ADC_ConvCpltCallback+0x8c>)
 80042a0:	ed83 7b00 	vstr	d7, [r3]
        adcValue[1] = Conversion_ADC1((uint16_t)adc[1]);
 80042a4:	4b16      	ldr	r3, [pc, #88]	; (8004300 <HAL_ADC_ConvCpltCallback+0x88>)
 80042a6:	885b      	ldrh	r3, [r3, #2]
 80042a8:	b29b      	uxth	r3, r3
 80042aa:	4618      	mov	r0, r3
 80042ac:	f7fc ff54 	bl	8001158 <Conversion_ADC1>
 80042b0:	eeb0 7a40 	vmov.f32	s14, s0
 80042b4:	eef0 7a60 	vmov.f32	s15, s1
 80042b8:	4b12      	ldr	r3, [pc, #72]	; (8004304 <HAL_ADC_ConvCpltCallback+0x8c>)
 80042ba:	ed83 7b02 	vstr	d7, [r3, #8]
        adcValue[2] = Conversion_ADC1((uint16_t)adc[2]);
 80042be:	4b10      	ldr	r3, [pc, #64]	; (8004300 <HAL_ADC_ConvCpltCallback+0x88>)
 80042c0:	889b      	ldrh	r3, [r3, #4]
 80042c2:	b29b      	uxth	r3, r3
 80042c4:	4618      	mov	r0, r3
 80042c6:	f7fc ff47 	bl	8001158 <Conversion_ADC1>
 80042ca:	eeb0 7a40 	vmov.f32	s14, s0
 80042ce:	eef0 7a60 	vmov.f32	s15, s1
 80042d2:	4b0c      	ldr	r3, [pc, #48]	; (8004304 <HAL_ADC_ConvCpltCallback+0x8c>)
 80042d4:	ed83 7b04 	vstr	d7, [r3, #16]
        adcValue[3] = Conversion_ADC1((uint16_t)adc[3]);
 80042d8:	4b09      	ldr	r3, [pc, #36]	; (8004300 <HAL_ADC_ConvCpltCallback+0x88>)
 80042da:	88db      	ldrh	r3, [r3, #6]
 80042dc:	b29b      	uxth	r3, r3
 80042de:	4618      	mov	r0, r3
 80042e0:	f7fc ff3a 	bl	8001158 <Conversion_ADC1>
 80042e4:	eeb0 7a40 	vmov.f32	s14, s0
 80042e8:	eef0 7a60 	vmov.f32	s15, s1
 80042ec:	4b05      	ldr	r3, [pc, #20]	; (8004304 <HAL_ADC_ConvCpltCallback+0x8c>)
 80042ee:	ed83 7b06 	vstr	d7, [r3, #24]
    }
}
 80042f2:	bf00      	nop
 80042f4:	3708      	adds	r7, #8
 80042f6:	46bd      	mov	sp, r7
 80042f8:	bd80      	pop	{r7, pc}
 80042fa:	bf00      	nop
 80042fc:	40012000 	.word	0x40012000
 8004300:	200002f8 	.word	0x200002f8
 8004304:	20000300 	.word	0x20000300

08004308 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b082      	sub	sp, #8
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
    if(htim->Instance == TIM6) //check if the interrupt comes from TIM6
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a16      	ldr	r2, [pc, #88]	; (8004370 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d11f      	bne.n	800435a <HAL_TIM_PeriodElapsedCallback+0x52>
    {
		Time_Counter_Init++;
 800431a:	4b16      	ldr	r3, [pc, #88]	; (8004374 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 800431c:	781b      	ldrb	r3, [r3, #0]
 800431e:	3301      	adds	r3, #1
 8004320:	b2da      	uxtb	r2, r3
 8004322:	4b14      	ldr	r3, [pc, #80]	; (8004374 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8004324:	701a      	strb	r2, [r3, #0]
		Time_Counter_Read++;
 8004326:	4b14      	ldr	r3, [pc, #80]	; (8004378 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8004328:	781b      	ldrb	r3, [r3, #0]
 800432a:	3301      	adds	r3, #1
 800432c:	b2da      	uxtb	r2, r3
 800432e:	4b12      	ldr	r3, [pc, #72]	; (8004378 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8004330:	701a      	strb	r2, [r3, #0]

		if(Time_Counter_Init == 16)	//Запрос данных каждую 0.8 сек
 8004332:	4b10      	ldr	r3, [pc, #64]	; (8004374 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8004334:	781b      	ldrb	r3, [r3, #0]
 8004336:	2b10      	cmp	r3, #16
 8004338:	d102      	bne.n	8004340 <HAL_TIM_PeriodElapsedCallback+0x38>
        {
	    	OneWire_Test_Flag_Init = true;
 800433a:	4b10      	ldr	r3, [pc, #64]	; (800437c <HAL_TIM_PeriodElapsedCallback+0x74>)
 800433c:	2201      	movs	r2, #1
 800433e:	701a      	strb	r2, [r3, #0]
        }
		if(Time_Counter_Read == 32)	//Запрос данных каждую 1.6 сек
 8004340:	4b0d      	ldr	r3, [pc, #52]	; (8004378 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8004342:	781b      	ldrb	r3, [r3, #0]
 8004344:	2b20      	cmp	r3, #32
 8004346:	d108      	bne.n	800435a <HAL_TIM_PeriodElapsedCallback+0x52>
        {
	    	OneWire_Test_Flag_Read = true;
 8004348:	4b0d      	ldr	r3, [pc, #52]	; (8004380 <HAL_TIM_PeriodElapsedCallback+0x78>)
 800434a:	2201      	movs	r2, #1
 800434c:	701a      	strb	r2, [r3, #0]

	    	Time_Counter_Init = 0;
 800434e:	4b09      	ldr	r3, [pc, #36]	; (8004374 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8004350:	2200      	movs	r2, #0
 8004352:	701a      	strb	r2, [r3, #0]
	    	Time_Counter_Read = 0;
 8004354:	4b08      	ldr	r3, [pc, #32]	; (8004378 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8004356:	2200      	movs	r2, #0
 8004358:	701a      	strb	r2, [r3, #0]
        }
    }

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4a09      	ldr	r2, [pc, #36]	; (8004384 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d101      	bne.n	8004368 <HAL_TIM_PeriodElapsedCallback+0x60>
    HAL_IncTick();
 8004364:	f002 f95a 	bl	800661c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8004368:	bf00      	nop
 800436a:	3708      	adds	r7, #8
 800436c:	46bd      	mov	sp, r7
 800436e:	bd80      	pop	{r7, pc}
 8004370:	40001000 	.word	0x40001000
 8004374:	20000360 	.word	0x20000360
 8004378:	20000361 	.word	0x20000361
 800437c:	20000362 	.word	0x20000362
 8004380:	20000363 	.word	0x20000363
 8004384:	40010000 	.word	0x40010000

08004388 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004388:	b480      	push	{r7}
 800438a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800438c:	bf00      	nop
 800438e:	46bd      	mov	sp, r7
 8004390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004394:	4770      	bx	lr
	...

08004398 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b086      	sub	sp, #24
 800439c:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef sTime = {0};
 800439e:	1d3b      	adds	r3, r7, #4
 80043a0:	2200      	movs	r2, #0
 80043a2:	601a      	str	r2, [r3, #0]
 80043a4:	605a      	str	r2, [r3, #4]
 80043a6:	609a      	str	r2, [r3, #8]
 80043a8:	60da      	str	r2, [r3, #12]
 80043aa:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80043ac:	2300      	movs	r3, #0
 80043ae:	603b      	str	r3, [r7, #0]

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80043b0:	4b24      	ldr	r3, [pc, #144]	; (8004444 <MX_RTC_Init+0xac>)
 80043b2:	4a25      	ldr	r2, [pc, #148]	; (8004448 <MX_RTC_Init+0xb0>)
 80043b4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80043b6:	4b23      	ldr	r3, [pc, #140]	; (8004444 <MX_RTC_Init+0xac>)
 80043b8:	2200      	movs	r2, #0
 80043ba:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80043bc:	4b21      	ldr	r3, [pc, #132]	; (8004444 <MX_RTC_Init+0xac>)
 80043be:	227f      	movs	r2, #127	; 0x7f
 80043c0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80043c2:	4b20      	ldr	r3, [pc, #128]	; (8004444 <MX_RTC_Init+0xac>)
 80043c4:	22ff      	movs	r2, #255	; 0xff
 80043c6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80043c8:	4b1e      	ldr	r3, [pc, #120]	; (8004444 <MX_RTC_Init+0xac>)
 80043ca:	2200      	movs	r2, #0
 80043cc:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80043ce:	4b1d      	ldr	r3, [pc, #116]	; (8004444 <MX_RTC_Init+0xac>)
 80043d0:	2200      	movs	r2, #0
 80043d2:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80043d4:	4b1b      	ldr	r3, [pc, #108]	; (8004444 <MX_RTC_Init+0xac>)
 80043d6:	2200      	movs	r2, #0
 80043d8:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80043da:	481a      	ldr	r0, [pc, #104]	; (8004444 <MX_RTC_Init+0xac>)
 80043dc:	f005 f9c8 	bl	8009770 <HAL_RTC_Init>
 80043e0:	4603      	mov	r3, r0
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d001      	beq.n	80043ea <MX_RTC_Init+0x52>
  {
    Error_Handler();
 80043e6:	f7ff ffcf 	bl	8004388 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 10;
 80043ea:	230a      	movs	r3, #10
 80043ec:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 34;
 80043ee:	2322      	movs	r3, #34	; 0x22
 80043f0:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 80043f2:	2300      	movs	r3, #0
 80043f4:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80043f6:	2300      	movs	r3, #0
 80043f8:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80043fa:	2300      	movs	r3, #0
 80043fc:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80043fe:	1d3b      	adds	r3, r7, #4
 8004400:	2200      	movs	r2, #0
 8004402:	4619      	mov	r1, r3
 8004404:	480f      	ldr	r0, [pc, #60]	; (8004444 <MX_RTC_Init+0xac>)
 8004406:	f005 fa44 	bl	8009892 <HAL_RTC_SetTime>
 800440a:	4603      	mov	r3, r0
 800440c:	2b00      	cmp	r3, #0
 800440e:	d001      	beq.n	8004414 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8004410:	f7ff ffba 	bl	8004388 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_TUESDAY;
 8004414:	2302      	movs	r3, #2
 8004416:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_APRIL;
 8004418:	2304      	movs	r3, #4
 800441a:	707b      	strb	r3, [r7, #1]
  sDate.Date = 20;
 800441c:	2314      	movs	r3, #20
 800441e:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 21;
 8004420:	2315      	movs	r3, #21
 8004422:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8004424:	463b      	mov	r3, r7
 8004426:	2200      	movs	r2, #0
 8004428:	4619      	mov	r1, r3
 800442a:	4806      	ldr	r0, [pc, #24]	; (8004444 <MX_RTC_Init+0xac>)
 800442c:	f005 faee 	bl	8009a0c <HAL_RTC_SetDate>
 8004430:	4603      	mov	r3, r0
 8004432:	2b00      	cmp	r3, #0
 8004434:	d001      	beq.n	800443a <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8004436:	f7ff ffa7 	bl	8004388 <Error_Handler>
  }

}
 800443a:	bf00      	nop
 800443c:	3718      	adds	r7, #24
 800443e:	46bd      	mov	sp, r7
 8004440:	bd80      	pop	{r7, pc}
 8004442:	bf00      	nop
 8004444:	20000ae0 	.word	0x20000ae0
 8004448:	40002800 	.word	0x40002800

0800444c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 800444c:	b480      	push	{r7}
 800444e:	b083      	sub	sp, #12
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4a05      	ldr	r2, [pc, #20]	; (8004470 <HAL_RTC_MspInit+0x24>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d102      	bne.n	8004464 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800445e:	4b05      	ldr	r3, [pc, #20]	; (8004474 <HAL_RTC_MspInit+0x28>)
 8004460:	2201      	movs	r2, #1
 8004462:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8004464:	bf00      	nop
 8004466:	370c      	adds	r7, #12
 8004468:	46bd      	mov	sp, r7
 800446a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446e:	4770      	bx	lr
 8004470:	40002800 	.word	0x40002800
 8004474:	42470e3c 	.word	0x42470e3c

08004478 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 800447c:	4b17      	ldr	r3, [pc, #92]	; (80044dc <MX_SPI1_Init+0x64>)
 800447e:	4a18      	ldr	r2, [pc, #96]	; (80044e0 <MX_SPI1_Init+0x68>)
 8004480:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004482:	4b16      	ldr	r3, [pc, #88]	; (80044dc <MX_SPI1_Init+0x64>)
 8004484:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004488:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800448a:	4b14      	ldr	r3, [pc, #80]	; (80044dc <MX_SPI1_Init+0x64>)
 800448c:	2200      	movs	r2, #0
 800448e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004490:	4b12      	ldr	r3, [pc, #72]	; (80044dc <MX_SPI1_Init+0x64>)
 8004492:	2200      	movs	r2, #0
 8004494:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004496:	4b11      	ldr	r3, [pc, #68]	; (80044dc <MX_SPI1_Init+0x64>)
 8004498:	2200      	movs	r2, #0
 800449a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800449c:	4b0f      	ldr	r3, [pc, #60]	; (80044dc <MX_SPI1_Init+0x64>)
 800449e:	2200      	movs	r2, #0
 80044a0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80044a2:	4b0e      	ldr	r3, [pc, #56]	; (80044dc <MX_SPI1_Init+0x64>)
 80044a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80044a8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80044aa:	4b0c      	ldr	r3, [pc, #48]	; (80044dc <MX_SPI1_Init+0x64>)
 80044ac:	2200      	movs	r2, #0
 80044ae:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80044b0:	4b0a      	ldr	r3, [pc, #40]	; (80044dc <MX_SPI1_Init+0x64>)
 80044b2:	2200      	movs	r2, #0
 80044b4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80044b6:	4b09      	ldr	r3, [pc, #36]	; (80044dc <MX_SPI1_Init+0x64>)
 80044b8:	2200      	movs	r2, #0
 80044ba:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80044bc:	4b07      	ldr	r3, [pc, #28]	; (80044dc <MX_SPI1_Init+0x64>)
 80044be:	2200      	movs	r2, #0
 80044c0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80044c2:	4b06      	ldr	r3, [pc, #24]	; (80044dc <MX_SPI1_Init+0x64>)
 80044c4:	220a      	movs	r2, #10
 80044c6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80044c8:	4804      	ldr	r0, [pc, #16]	; (80044dc <MX_SPI1_Init+0x64>)
 80044ca:	f005 fbb8 	bl	8009c3e <HAL_SPI_Init>
 80044ce:	4603      	mov	r3, r0
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d001      	beq.n	80044d8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80044d4:	f7ff ff58 	bl	8004388 <Error_Handler>
  }

}
 80044d8:	bf00      	nop
 80044da:	bd80      	pop	{r7, pc}
 80044dc:	20000b58 	.word	0x20000b58
 80044e0:	40013000 	.word	0x40013000

080044e4 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 80044e8:	4b15      	ldr	r3, [pc, #84]	; (8004540 <MX_SPI2_Init+0x5c>)
 80044ea:	4a16      	ldr	r2, [pc, #88]	; (8004544 <MX_SPI2_Init+0x60>)
 80044ec:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 80044ee:	4b14      	ldr	r3, [pc, #80]	; (8004540 <MX_SPI2_Init+0x5c>)
 80044f0:	2200      	movs	r2, #0
 80044f2:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80044f4:	4b12      	ldr	r3, [pc, #72]	; (8004540 <MX_SPI2_Init+0x5c>)
 80044f6:	2200      	movs	r2, #0
 80044f8:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80044fa:	4b11      	ldr	r3, [pc, #68]	; (8004540 <MX_SPI2_Init+0x5c>)
 80044fc:	2200      	movs	r2, #0
 80044fe:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004500:	4b0f      	ldr	r3, [pc, #60]	; (8004540 <MX_SPI2_Init+0x5c>)
 8004502:	2200      	movs	r2, #0
 8004504:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004506:	4b0e      	ldr	r3, [pc, #56]	; (8004540 <MX_SPI2_Init+0x5c>)
 8004508:	2200      	movs	r2, #0
 800450a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 800450c:	4b0c      	ldr	r3, [pc, #48]	; (8004540 <MX_SPI2_Init+0x5c>)
 800450e:	2200      	movs	r2, #0
 8004510:	619a      	str	r2, [r3, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004512:	4b0b      	ldr	r3, [pc, #44]	; (8004540 <MX_SPI2_Init+0x5c>)
 8004514:	2200      	movs	r2, #0
 8004516:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8004518:	4b09      	ldr	r3, [pc, #36]	; (8004540 <MX_SPI2_Init+0x5c>)
 800451a:	2200      	movs	r2, #0
 800451c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800451e:	4b08      	ldr	r3, [pc, #32]	; (8004540 <MX_SPI2_Init+0x5c>)
 8004520:	2200      	movs	r2, #0
 8004522:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8004524:	4b06      	ldr	r3, [pc, #24]	; (8004540 <MX_SPI2_Init+0x5c>)
 8004526:	220a      	movs	r2, #10
 8004528:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800452a:	4805      	ldr	r0, [pc, #20]	; (8004540 <MX_SPI2_Init+0x5c>)
 800452c:	f005 fb87 	bl	8009c3e <HAL_SPI_Init>
 8004530:	4603      	mov	r3, r0
 8004532:	2b00      	cmp	r3, #0
 8004534:	d001      	beq.n	800453a <MX_SPI2_Init+0x56>
  {
    Error_Handler();
 8004536:	f7ff ff27 	bl	8004388 <Error_Handler>
  }

}
 800453a:	bf00      	nop
 800453c:	bd80      	pop	{r7, pc}
 800453e:	bf00      	nop
 8004540:	20000b00 	.word	0x20000b00
 8004544:	40003800 	.word	0x40003800

08004548 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b08c      	sub	sp, #48	; 0x30
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004550:	f107 031c 	add.w	r3, r7, #28
 8004554:	2200      	movs	r2, #0
 8004556:	601a      	str	r2, [r3, #0]
 8004558:	605a      	str	r2, [r3, #4]
 800455a:	609a      	str	r2, [r3, #8]
 800455c:	60da      	str	r2, [r3, #12]
 800455e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4a45      	ldr	r2, [pc, #276]	; (800467c <HAL_SPI_MspInit+0x134>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d12c      	bne.n	80045c4 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800456a:	2300      	movs	r3, #0
 800456c:	61bb      	str	r3, [r7, #24]
 800456e:	4b44      	ldr	r3, [pc, #272]	; (8004680 <HAL_SPI_MspInit+0x138>)
 8004570:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004572:	4a43      	ldr	r2, [pc, #268]	; (8004680 <HAL_SPI_MspInit+0x138>)
 8004574:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004578:	6453      	str	r3, [r2, #68]	; 0x44
 800457a:	4b41      	ldr	r3, [pc, #260]	; (8004680 <HAL_SPI_MspInit+0x138>)
 800457c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800457e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004582:	61bb      	str	r3, [r7, #24]
 8004584:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004586:	2300      	movs	r3, #0
 8004588:	617b      	str	r3, [r7, #20]
 800458a:	4b3d      	ldr	r3, [pc, #244]	; (8004680 <HAL_SPI_MspInit+0x138>)
 800458c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800458e:	4a3c      	ldr	r2, [pc, #240]	; (8004680 <HAL_SPI_MspInit+0x138>)
 8004590:	f043 0302 	orr.w	r3, r3, #2
 8004594:	6313      	str	r3, [r2, #48]	; 0x30
 8004596:	4b3a      	ldr	r3, [pc, #232]	; (8004680 <HAL_SPI_MspInit+0x138>)
 8004598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800459a:	f003 0302 	and.w	r3, r3, #2
 800459e:	617b      	str	r3, [r7, #20]
 80045a0:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SCK_Pin|MISO_Pin|MOSI_Pin;
 80045a2:	2338      	movs	r3, #56	; 0x38
 80045a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045a6:	2302      	movs	r3, #2
 80045a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045aa:	2300      	movs	r3, #0
 80045ac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80045ae:	2303      	movs	r3, #3
 80045b0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80045b2:	2305      	movs	r3, #5
 80045b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80045b6:	f107 031c 	add.w	r3, r7, #28
 80045ba:	4619      	mov	r1, r3
 80045bc:	4831      	ldr	r0, [pc, #196]	; (8004684 <HAL_SPI_MspInit+0x13c>)
 80045be:	f004 f971 	bl	80088a4 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80045c2:	e057      	b.n	8004674 <HAL_SPI_MspInit+0x12c>
  else if(spiHandle->Instance==SPI2)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4a2f      	ldr	r2, [pc, #188]	; (8004688 <HAL_SPI_MspInit+0x140>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d152      	bne.n	8004674 <HAL_SPI_MspInit+0x12c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80045ce:	2300      	movs	r3, #0
 80045d0:	613b      	str	r3, [r7, #16]
 80045d2:	4b2b      	ldr	r3, [pc, #172]	; (8004680 <HAL_SPI_MspInit+0x138>)
 80045d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045d6:	4a2a      	ldr	r2, [pc, #168]	; (8004680 <HAL_SPI_MspInit+0x138>)
 80045d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80045dc:	6413      	str	r3, [r2, #64]	; 0x40
 80045de:	4b28      	ldr	r3, [pc, #160]	; (8004680 <HAL_SPI_MspInit+0x138>)
 80045e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80045e6:	613b      	str	r3, [r7, #16]
 80045e8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80045ea:	2300      	movs	r3, #0
 80045ec:	60fb      	str	r3, [r7, #12]
 80045ee:	4b24      	ldr	r3, [pc, #144]	; (8004680 <HAL_SPI_MspInit+0x138>)
 80045f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045f2:	4a23      	ldr	r2, [pc, #140]	; (8004680 <HAL_SPI_MspInit+0x138>)
 80045f4:	f043 0304 	orr.w	r3, r3, #4
 80045f8:	6313      	str	r3, [r2, #48]	; 0x30
 80045fa:	4b21      	ldr	r3, [pc, #132]	; (8004680 <HAL_SPI_MspInit+0x138>)
 80045fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045fe:	f003 0304 	and.w	r3, r3, #4
 8004602:	60fb      	str	r3, [r7, #12]
 8004604:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004606:	2300      	movs	r3, #0
 8004608:	60bb      	str	r3, [r7, #8]
 800460a:	4b1d      	ldr	r3, [pc, #116]	; (8004680 <HAL_SPI_MspInit+0x138>)
 800460c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800460e:	4a1c      	ldr	r2, [pc, #112]	; (8004680 <HAL_SPI_MspInit+0x138>)
 8004610:	f043 0302 	orr.w	r3, r3, #2
 8004614:	6313      	str	r3, [r2, #48]	; 0x30
 8004616:	4b1a      	ldr	r3, [pc, #104]	; (8004680 <HAL_SPI_MspInit+0x138>)
 8004618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800461a:	f003 0302 	and.w	r3, r3, #2
 800461e:	60bb      	str	r3, [r7, #8]
 8004620:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = MISO_M_Pin|MOSI_M_Pin;
 8004622:	230c      	movs	r3, #12
 8004624:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004626:	2302      	movs	r3, #2
 8004628:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800462a:	2300      	movs	r3, #0
 800462c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800462e:	2303      	movs	r3, #3
 8004630:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004632:	2305      	movs	r3, #5
 8004634:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004636:	f107 031c 	add.w	r3, r7, #28
 800463a:	4619      	mov	r1, r3
 800463c:	4813      	ldr	r0, [pc, #76]	; (800468c <HAL_SPI_MspInit+0x144>)
 800463e:	f004 f931 	bl	80088a4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SCK_M_Pin|GPIO_PIN_9;
 8004642:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8004646:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004648:	2302      	movs	r3, #2
 800464a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800464c:	2300      	movs	r3, #0
 800464e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004650:	2303      	movs	r3, #3
 8004652:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004654:	2305      	movs	r3, #5
 8004656:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004658:	f107 031c 	add.w	r3, r7, #28
 800465c:	4619      	mov	r1, r3
 800465e:	4809      	ldr	r0, [pc, #36]	; (8004684 <HAL_SPI_MspInit+0x13c>)
 8004660:	f004 f920 	bl	80088a4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8004664:	2200      	movs	r2, #0
 8004666:	2100      	movs	r1, #0
 8004668:	2024      	movs	r0, #36	; 0x24
 800466a:	f002 fcbd 	bl	8006fe8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 800466e:	2024      	movs	r0, #36	; 0x24
 8004670:	f002 fcd6 	bl	8007020 <HAL_NVIC_EnableIRQ>
}
 8004674:	bf00      	nop
 8004676:	3730      	adds	r7, #48	; 0x30
 8004678:	46bd      	mov	sp, r7
 800467a:	bd80      	pop	{r7, pc}
 800467c:	40013000 	.word	0x40013000
 8004680:	40023800 	.word	0x40023800
 8004684:	40020400 	.word	0x40020400
 8004688:	40003800 	.word	0x40003800
 800468c:	40020800 	.word	0x40020800

08004690 <ReWriteOCD>:
//char trans_str[64] = {0,};


//Функция обновления значений в массиве данных коллекторных выходов
void ReWriteOCD(void)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	af00      	add	r7, sp, #0
	if(Status_OCD[0])
 8004694:	4b40      	ldr	r3, [pc, #256]	; (8004798 <ReWriteOCD+0x108>)
 8004696:	781b      	ldrb	r3, [r3, #0]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d005      	beq.n	80046a8 <ReWriteOCD+0x18>
		HAL_GPIO_WritePin(O0_GPIO_Port, O0_Pin, SET);
 800469c:	2201      	movs	r2, #1
 800469e:	2101      	movs	r1, #1
 80046a0:	483e      	ldr	r0, [pc, #248]	; (800479c <ReWriteOCD+0x10c>)
 80046a2:	f004 fab3 	bl	8008c0c <HAL_GPIO_WritePin>
 80046a6:	e004      	b.n	80046b2 <ReWriteOCD+0x22>
	else
		HAL_GPIO_WritePin(O0_GPIO_Port, O0_Pin, RESET);
 80046a8:	2200      	movs	r2, #0
 80046aa:	2101      	movs	r1, #1
 80046ac:	483b      	ldr	r0, [pc, #236]	; (800479c <ReWriteOCD+0x10c>)
 80046ae:	f004 faad 	bl	8008c0c <HAL_GPIO_WritePin>
	if(Status_OCD[1])
 80046b2:	4b39      	ldr	r3, [pc, #228]	; (8004798 <ReWriteOCD+0x108>)
 80046b4:	785b      	ldrb	r3, [r3, #1]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d005      	beq.n	80046c6 <ReWriteOCD+0x36>
		HAL_GPIO_WritePin(O1_GPIO_Port, O1_Pin, SET);
 80046ba:	2201      	movs	r2, #1
 80046bc:	2101      	movs	r1, #1
 80046be:	4838      	ldr	r0, [pc, #224]	; (80047a0 <ReWriteOCD+0x110>)
 80046c0:	f004 faa4 	bl	8008c0c <HAL_GPIO_WritePin>
 80046c4:	e004      	b.n	80046d0 <ReWriteOCD+0x40>
	else
		HAL_GPIO_WritePin(O1_GPIO_Port, O1_Pin, RESET);
 80046c6:	2200      	movs	r2, #0
 80046c8:	2101      	movs	r1, #1
 80046ca:	4835      	ldr	r0, [pc, #212]	; (80047a0 <ReWriteOCD+0x110>)
 80046cc:	f004 fa9e 	bl	8008c0c <HAL_GPIO_WritePin>
	if(Status_OCD[2])
 80046d0:	4b31      	ldr	r3, [pc, #196]	; (8004798 <ReWriteOCD+0x108>)
 80046d2:	789b      	ldrb	r3, [r3, #2]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d005      	beq.n	80046e4 <ReWriteOCD+0x54>
		HAL_GPIO_WritePin(O2_GPIO_Port, O2_Pin, SET);
 80046d8:	2201      	movs	r2, #1
 80046da:	2102      	movs	r1, #2
 80046dc:	4830      	ldr	r0, [pc, #192]	; (80047a0 <ReWriteOCD+0x110>)
 80046de:	f004 fa95 	bl	8008c0c <HAL_GPIO_WritePin>
 80046e2:	e004      	b.n	80046ee <ReWriteOCD+0x5e>
	else
		HAL_GPIO_WritePin(O2_GPIO_Port, O2_Pin, RESET);
 80046e4:	2200      	movs	r2, #0
 80046e6:	2102      	movs	r1, #2
 80046e8:	482d      	ldr	r0, [pc, #180]	; (80047a0 <ReWriteOCD+0x110>)
 80046ea:	f004 fa8f 	bl	8008c0c <HAL_GPIO_WritePin>
	if(Status_OCD[3])
 80046ee:	4b2a      	ldr	r3, [pc, #168]	; (8004798 <ReWriteOCD+0x108>)
 80046f0:	78db      	ldrb	r3, [r3, #3]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d005      	beq.n	8004702 <ReWriteOCD+0x72>
		HAL_GPIO_WritePin(O3_GPIO_Port, O3_Pin, SET);
 80046f6:	2201      	movs	r2, #1
 80046f8:	2180      	movs	r1, #128	; 0x80
 80046fa:	482a      	ldr	r0, [pc, #168]	; (80047a4 <ReWriteOCD+0x114>)
 80046fc:	f004 fa86 	bl	8008c0c <HAL_GPIO_WritePin>
 8004700:	e004      	b.n	800470c <ReWriteOCD+0x7c>
	else
		HAL_GPIO_WritePin(O3_GPIO_Port, O3_Pin, RESET);
 8004702:	2200      	movs	r2, #0
 8004704:	2180      	movs	r1, #128	; 0x80
 8004706:	4827      	ldr	r0, [pc, #156]	; (80047a4 <ReWriteOCD+0x114>)
 8004708:	f004 fa80 	bl	8008c0c <HAL_GPIO_WritePin>
	if(Status_OCD[4])
 800470c:	4b22      	ldr	r3, [pc, #136]	; (8004798 <ReWriteOCD+0x108>)
 800470e:	791b      	ldrb	r3, [r3, #4]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d006      	beq.n	8004722 <ReWriteOCD+0x92>
		HAL_GPIO_WritePin(O4_GPIO_Port, O4_Pin, SET);
 8004714:	2201      	movs	r2, #1
 8004716:	f44f 7180 	mov.w	r1, #256	; 0x100
 800471a:	4822      	ldr	r0, [pc, #136]	; (80047a4 <ReWriteOCD+0x114>)
 800471c:	f004 fa76 	bl	8008c0c <HAL_GPIO_WritePin>
 8004720:	e005      	b.n	800472e <ReWriteOCD+0x9e>
	else
		HAL_GPIO_WritePin(O4_GPIO_Port, O4_Pin, RESET);
 8004722:	2200      	movs	r2, #0
 8004724:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004728:	481e      	ldr	r0, [pc, #120]	; (80047a4 <ReWriteOCD+0x114>)
 800472a:	f004 fa6f 	bl	8008c0c <HAL_GPIO_WritePin>
	if(Status_OCD[5])
 800472e:	4b1a      	ldr	r3, [pc, #104]	; (8004798 <ReWriteOCD+0x108>)
 8004730:	795b      	ldrb	r3, [r3, #5]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d006      	beq.n	8004744 <ReWriteOCD+0xb4>
		HAL_GPIO_WritePin(O5_GPIO_Port, O5_Pin, SET);
 8004736:	2201      	movs	r2, #1
 8004738:	f44f 7100 	mov.w	r1, #512	; 0x200
 800473c:	4819      	ldr	r0, [pc, #100]	; (80047a4 <ReWriteOCD+0x114>)
 800473e:	f004 fa65 	bl	8008c0c <HAL_GPIO_WritePin>
 8004742:	e005      	b.n	8004750 <ReWriteOCD+0xc0>
	else
		HAL_GPIO_WritePin(O5_GPIO_Port, O5_Pin, RESET);
 8004744:	2200      	movs	r2, #0
 8004746:	f44f 7100 	mov.w	r1, #512	; 0x200
 800474a:	4816      	ldr	r0, [pc, #88]	; (80047a4 <ReWriteOCD+0x114>)
 800474c:	f004 fa5e 	bl	8008c0c <HAL_GPIO_WritePin>
	if(Status_OCD[6])
 8004750:	4b11      	ldr	r3, [pc, #68]	; (8004798 <ReWriteOCD+0x108>)
 8004752:	799b      	ldrb	r3, [r3, #6]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d006      	beq.n	8004766 <ReWriteOCD+0xd6>
		HAL_GPIO_WritePin(O6_GPIO_Port, O6_Pin, SET);
 8004758:	2201      	movs	r2, #1
 800475a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800475e:	4811      	ldr	r0, [pc, #68]	; (80047a4 <ReWriteOCD+0x114>)
 8004760:	f004 fa54 	bl	8008c0c <HAL_GPIO_WritePin>
 8004764:	e005      	b.n	8004772 <ReWriteOCD+0xe2>
	else
		HAL_GPIO_WritePin(O6_GPIO_Port, O6_Pin, RESET);
 8004766:	2200      	movs	r2, #0
 8004768:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800476c:	480d      	ldr	r0, [pc, #52]	; (80047a4 <ReWriteOCD+0x114>)
 800476e:	f004 fa4d 	bl	8008c0c <HAL_GPIO_WritePin>
	if(Status_OCD[7])
 8004772:	4b09      	ldr	r3, [pc, #36]	; (8004798 <ReWriteOCD+0x108>)
 8004774:	79db      	ldrb	r3, [r3, #7]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d006      	beq.n	8004788 <ReWriteOCD+0xf8>
		HAL_GPIO_WritePin(O7_GPIO_Port, O7_Pin, SET);
 800477a:	2201      	movs	r2, #1
 800477c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004780:	4808      	ldr	r0, [pc, #32]	; (80047a4 <ReWriteOCD+0x114>)
 8004782:	f004 fa43 	bl	8008c0c <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(O7_GPIO_Port, O7_Pin, RESET);
}
 8004786:	e005      	b.n	8004794 <ReWriteOCD+0x104>
		HAL_GPIO_WritePin(O7_GPIO_Port, O7_Pin, RESET);
 8004788:	2200      	movs	r2, #0
 800478a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800478e:	4805      	ldr	r0, [pc, #20]	; (80047a4 <ReWriteOCD+0x114>)
 8004790:	f004 fa3c 	bl	8008c0c <HAL_GPIO_WritePin>
}
 8004794:	bf00      	nop
 8004796:	bd80      	pop	{r7, pc}
 8004798:	2000037c 	.word	0x2000037c
 800479c:	40020000 	.word	0x40020000
 80047a0:	40020400 	.word	0x40020400
 80047a4:	40021000 	.word	0x40021000

080047a8 <SPI_available>:
		HAL_GPIO_WritePin(WR1_GPIO_Port, WR1_Pin, RESET);
}
//Функция обработки посылок от интрефейсного МК
//Обновляет значения в массивах данных входов/выходов
void SPI_available(void)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	af00      	add	r7, sp, #0
	if(flag_iput_spi2)
 80047ac:	4bd6      	ldr	r3, [pc, #856]	; (8004b08 <SPI_available+0x360>)
 80047ae:	781b      	ldrb	r3, [r3, #0]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	f000 8470 	beq.w	8005096 <SPI_available+0x8ee>
	{
		switch(SPI_rx_buf[0])	//Избаиться от постоянной проверки кейс условий!
 80047b6:	4bd5      	ldr	r3, [pc, #852]	; (8004b0c <SPI_available+0x364>)
 80047b8:	781b      	ldrb	r3, [r3, #0]
 80047ba:	3b01      	subs	r3, #1
 80047bc:	2b65      	cmp	r3, #101	; 0x65
 80047be:	f200 82de 	bhi.w	8004d7e <SPI_available+0x5d6>
 80047c2:	a201      	add	r2, pc, #4	; (adr r2, 80047c8 <SPI_available+0x20>)
 80047c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047c8:	08004961 	.word	0x08004961
 80047cc:	08004973 	.word	0x08004973
 80047d0:	08004985 	.word	0x08004985
 80047d4:	08004997 	.word	0x08004997
 80047d8:	080049a9 	.word	0x080049a9
 80047dc:	080049bb 	.word	0x080049bb
 80047e0:	080049cd 	.word	0x080049cd
 80047e4:	080049df 	.word	0x080049df
 80047e8:	080049f1 	.word	0x080049f1
 80047ec:	08004d7f 	.word	0x08004d7f
 80047f0:	08004d7f 	.word	0x08004d7f
 80047f4:	08004d7f 	.word	0x08004d7f
 80047f8:	08004d7f 	.word	0x08004d7f
 80047fc:	08004d7f 	.word	0x08004d7f
 8004800:	08004d7f 	.word	0x08004d7f
 8004804:	08004a05 	.word	0x08004a05
 8004808:	08004a19 	.word	0x08004a19
 800480c:	08004a2d 	.word	0x08004a2d
 8004810:	08004a41 	.word	0x08004a41
 8004814:	08004a55 	.word	0x08004a55
 8004818:	08004a69 	.word	0x08004a69
 800481c:	08004a7d 	.word	0x08004a7d
 8004820:	08004a91 	.word	0x08004a91
 8004824:	08004aa5 	.word	0x08004aa5
 8004828:	08004ab9 	.word	0x08004ab9
 800482c:	08004d7f 	.word	0x08004d7f
 8004830:	08004d7f 	.word	0x08004d7f
 8004834:	08004d7f 	.word	0x08004d7f
 8004838:	08004d7f 	.word	0x08004d7f
 800483c:	08004d7f 	.word	0x08004d7f
 8004840:	08004d7f 	.word	0x08004d7f
 8004844:	08004acd 	.word	0x08004acd
 8004848:	08004ae1 	.word	0x08004ae1
 800484c:	08004af5 	.word	0x08004af5
 8004850:	08004b29 	.word	0x08004b29
 8004854:	08004b3d 	.word	0x08004b3d
 8004858:	08004b51 	.word	0x08004b51
 800485c:	08004b65 	.word	0x08004b65
 8004860:	08004b79 	.word	0x08004b79
 8004864:	08004b8d 	.word	0x08004b8d
 8004868:	08004ba1 	.word	0x08004ba1
 800486c:	08004d7f 	.word	0x08004d7f
 8004870:	08004d7f 	.word	0x08004d7f
 8004874:	08004d7f 	.word	0x08004d7f
 8004878:	08004d7f 	.word	0x08004d7f
 800487c:	08004d7f 	.word	0x08004d7f
 8004880:	08004d7f 	.word	0x08004d7f
 8004884:	08004bb5 	.word	0x08004bb5
 8004888:	08004bc9 	.word	0x08004bc9
 800488c:	08004bdd 	.word	0x08004bdd
 8004890:	08004bf1 	.word	0x08004bf1
 8004894:	08004c03 	.word	0x08004c03
 8004898:	08004c15 	.word	0x08004c15
 800489c:	08004c27 	.word	0x08004c27
 80048a0:	08004c39 	.word	0x08004c39
 80048a4:	08004c4b 	.word	0x08004c4b
 80048a8:	08004c5d 	.word	0x08004c5d
 80048ac:	08004d7f 	.word	0x08004d7f
 80048b0:	08004d7f 	.word	0x08004d7f
 80048b4:	08004d7f 	.word	0x08004d7f
 80048b8:	08004d7f 	.word	0x08004d7f
 80048bc:	08004d7f 	.word	0x08004d7f
 80048c0:	08004d7f 	.word	0x08004d7f
 80048c4:	08004c6f 	.word	0x08004c6f
 80048c8:	08004d7f 	.word	0x08004d7f
 80048cc:	08004d7f 	.word	0x08004d7f
 80048d0:	08004d7f 	.word	0x08004d7f
 80048d4:	08004d7f 	.word	0x08004d7f
 80048d8:	08004d7f 	.word	0x08004d7f
 80048dc:	08004d7f 	.word	0x08004d7f
 80048e0:	08004d7f 	.word	0x08004d7f
 80048e4:	08004d7f 	.word	0x08004d7f
 80048e8:	08004c81 	.word	0x08004c81
 80048ec:	08004d7f 	.word	0x08004d7f
 80048f0:	08004d7f 	.word	0x08004d7f
 80048f4:	08004d7f 	.word	0x08004d7f
 80048f8:	08004d7f 	.word	0x08004d7f
 80048fc:	08004d7f 	.word	0x08004d7f
 8004900:	08004d7f 	.word	0x08004d7f
 8004904:	08004c93 	.word	0x08004c93
 8004908:	08004ca5 	.word	0x08004ca5
 800490c:	08004cb7 	.word	0x08004cb7
 8004910:	08004cc9 	.word	0x08004cc9
 8004914:	08004cdd 	.word	0x08004cdd
 8004918:	08004cf1 	.word	0x08004cf1
 800491c:	08004d05 	.word	0x08004d05
 8004920:	08004d19 	.word	0x08004d19
 8004924:	08004d2b 	.word	0x08004d2b
 8004928:	08004d3d 	.word	0x08004d3d
 800492c:	08004d7f 	.word	0x08004d7f
 8004930:	08004d7f 	.word	0x08004d7f
 8004934:	08004d7f 	.word	0x08004d7f
 8004938:	08004d7f 	.word	0x08004d7f
 800493c:	08004d7f 	.word	0x08004d7f
 8004940:	08004d7f 	.word	0x08004d7f
 8004944:	08004d6d 	.word	0x08004d6d
 8004948:	08004d7f 	.word	0x08004d7f
 800494c:	08004d7f 	.word	0x08004d7f
 8004950:	08004d7f 	.word	0x08004d7f
 8004954:	08004d7f 	.word	0x08004d7f
 8004958:	08004d7f 	.word	0x08004d7f
 800495c:	08004d7f 	.word	0x08004d7f
		{
				//------------------------Открытый коллектор------------------------
			case OC0_ON:
				Status_OCD[0] = 1;
 8004960:	4b6b      	ldr	r3, [pc, #428]	; (8004b10 <SPI_available+0x368>)
 8004962:	2201      	movs	r2, #1
 8004964:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(O0_GPIO_Port, O0_Pin, SET);
 8004966:	2201      	movs	r2, #1
 8004968:	2101      	movs	r1, #1
 800496a:	486a      	ldr	r0, [pc, #424]	; (8004b14 <SPI_available+0x36c>)
 800496c:	f004 f94e 	bl	8008c0c <HAL_GPIO_WritePin>
				break;
 8004970:	e205      	b.n	8004d7e <SPI_available+0x5d6>
			case OC0_OFF:
				Status_OCD[0] = 0;
 8004972:	4b67      	ldr	r3, [pc, #412]	; (8004b10 <SPI_available+0x368>)
 8004974:	2200      	movs	r2, #0
 8004976:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(O0_GPIO_Port, O0_Pin, RESET);
 8004978:	2200      	movs	r2, #0
 800497a:	2101      	movs	r1, #1
 800497c:	4865      	ldr	r0, [pc, #404]	; (8004b14 <SPI_available+0x36c>)
 800497e:	f004 f945 	bl	8008c0c <HAL_GPIO_WritePin>
				break;
 8004982:	e1fc      	b.n	8004d7e <SPI_available+0x5d6>
			case OC1_ON:
				Status_OCD[1] = 1;
 8004984:	4b62      	ldr	r3, [pc, #392]	; (8004b10 <SPI_available+0x368>)
 8004986:	2201      	movs	r2, #1
 8004988:	705a      	strb	r2, [r3, #1]
				HAL_GPIO_WritePin(O1_GPIO_Port, O1_Pin, SET);
 800498a:	2201      	movs	r2, #1
 800498c:	2101      	movs	r1, #1
 800498e:	4862      	ldr	r0, [pc, #392]	; (8004b18 <SPI_available+0x370>)
 8004990:	f004 f93c 	bl	8008c0c <HAL_GPIO_WritePin>
				break;
 8004994:	e1f3      	b.n	8004d7e <SPI_available+0x5d6>
			case OC1_OFF:
				Status_OCD[1] = 0;
 8004996:	4b5e      	ldr	r3, [pc, #376]	; (8004b10 <SPI_available+0x368>)
 8004998:	2200      	movs	r2, #0
 800499a:	705a      	strb	r2, [r3, #1]
				HAL_GPIO_WritePin(O1_GPIO_Port, O1_Pin, RESET);
 800499c:	2200      	movs	r2, #0
 800499e:	2101      	movs	r1, #1
 80049a0:	485d      	ldr	r0, [pc, #372]	; (8004b18 <SPI_available+0x370>)
 80049a2:	f004 f933 	bl	8008c0c <HAL_GPIO_WritePin>
				break;
 80049a6:	e1ea      	b.n	8004d7e <SPI_available+0x5d6>
			case OC2_ON:
				Status_OCD[2] = 1;
 80049a8:	4b59      	ldr	r3, [pc, #356]	; (8004b10 <SPI_available+0x368>)
 80049aa:	2201      	movs	r2, #1
 80049ac:	709a      	strb	r2, [r3, #2]
				HAL_GPIO_WritePin(O2_GPIO_Port, O2_Pin, SET);
 80049ae:	2201      	movs	r2, #1
 80049b0:	2102      	movs	r1, #2
 80049b2:	4859      	ldr	r0, [pc, #356]	; (8004b18 <SPI_available+0x370>)
 80049b4:	f004 f92a 	bl	8008c0c <HAL_GPIO_WritePin>
				break;
 80049b8:	e1e1      	b.n	8004d7e <SPI_available+0x5d6>
			case OC2_OFF:
				Status_OCD[2] = 0;
 80049ba:	4b55      	ldr	r3, [pc, #340]	; (8004b10 <SPI_available+0x368>)
 80049bc:	2200      	movs	r2, #0
 80049be:	709a      	strb	r2, [r3, #2]
				HAL_GPIO_WritePin(O2_GPIO_Port, O2_Pin, RESET);
 80049c0:	2200      	movs	r2, #0
 80049c2:	2102      	movs	r1, #2
 80049c4:	4854      	ldr	r0, [pc, #336]	; (8004b18 <SPI_available+0x370>)
 80049c6:	f004 f921 	bl	8008c0c <HAL_GPIO_WritePin>
				break;
 80049ca:	e1d8      	b.n	8004d7e <SPI_available+0x5d6>
			case OC3_ON:
				Status_OCD[3] = 1;
 80049cc:	4b50      	ldr	r3, [pc, #320]	; (8004b10 <SPI_available+0x368>)
 80049ce:	2201      	movs	r2, #1
 80049d0:	70da      	strb	r2, [r3, #3]
				HAL_GPIO_WritePin(O3_GPIO_Port, O3_Pin, SET);
 80049d2:	2201      	movs	r2, #1
 80049d4:	2180      	movs	r1, #128	; 0x80
 80049d6:	4851      	ldr	r0, [pc, #324]	; (8004b1c <SPI_available+0x374>)
 80049d8:	f004 f918 	bl	8008c0c <HAL_GPIO_WritePin>
				break;
 80049dc:	e1cf      	b.n	8004d7e <SPI_available+0x5d6>
			case OC3_OFF:
				Status_OCD[3] = 0;
 80049de:	4b4c      	ldr	r3, [pc, #304]	; (8004b10 <SPI_available+0x368>)
 80049e0:	2200      	movs	r2, #0
 80049e2:	70da      	strb	r2, [r3, #3]
				HAL_GPIO_WritePin(O3_GPIO_Port, O3_Pin, RESET);
 80049e4:	2200      	movs	r2, #0
 80049e6:	2180      	movs	r1, #128	; 0x80
 80049e8:	484c      	ldr	r0, [pc, #304]	; (8004b1c <SPI_available+0x374>)
 80049ea:	f004 f90f 	bl	8008c0c <HAL_GPIO_WritePin>
				break;
 80049ee:	e1c6      	b.n	8004d7e <SPI_available+0x5d6>
			case OC4_ON:
				Status_OCD[4] = 1;
 80049f0:	4b47      	ldr	r3, [pc, #284]	; (8004b10 <SPI_available+0x368>)
 80049f2:	2201      	movs	r2, #1
 80049f4:	711a      	strb	r2, [r3, #4]
				HAL_GPIO_WritePin(O4_GPIO_Port, O4_Pin, SET);
 80049f6:	2201      	movs	r2, #1
 80049f8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80049fc:	4847      	ldr	r0, [pc, #284]	; (8004b1c <SPI_available+0x374>)
 80049fe:	f004 f905 	bl	8008c0c <HAL_GPIO_WritePin>
				break;
 8004a02:	e1bc      	b.n	8004d7e <SPI_available+0x5d6>
			case OC4_OFF:
				Status_OCD[4] = 0;
 8004a04:	4b42      	ldr	r3, [pc, #264]	; (8004b10 <SPI_available+0x368>)
 8004a06:	2200      	movs	r2, #0
 8004a08:	711a      	strb	r2, [r3, #4]
				HAL_GPIO_WritePin(O4_GPIO_Port, O4_Pin, RESET);
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004a10:	4842      	ldr	r0, [pc, #264]	; (8004b1c <SPI_available+0x374>)
 8004a12:	f004 f8fb 	bl	8008c0c <HAL_GPIO_WritePin>
				break;
 8004a16:	e1b2      	b.n	8004d7e <SPI_available+0x5d6>
			case OC5_ON:
				Status_OCD[5] = 1;
 8004a18:	4b3d      	ldr	r3, [pc, #244]	; (8004b10 <SPI_available+0x368>)
 8004a1a:	2201      	movs	r2, #1
 8004a1c:	715a      	strb	r2, [r3, #5]
				HAL_GPIO_WritePin(O5_GPIO_Port, O5_Pin, SET);
 8004a1e:	2201      	movs	r2, #1
 8004a20:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004a24:	483d      	ldr	r0, [pc, #244]	; (8004b1c <SPI_available+0x374>)
 8004a26:	f004 f8f1 	bl	8008c0c <HAL_GPIO_WritePin>
				break;
 8004a2a:	e1a8      	b.n	8004d7e <SPI_available+0x5d6>
			case OC5_OFF:
				Status_OCD[5] = 0;
 8004a2c:	4b38      	ldr	r3, [pc, #224]	; (8004b10 <SPI_available+0x368>)
 8004a2e:	2200      	movs	r2, #0
 8004a30:	715a      	strb	r2, [r3, #5]
				HAL_GPIO_WritePin(O5_GPIO_Port, O5_Pin, RESET);
 8004a32:	2200      	movs	r2, #0
 8004a34:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004a38:	4838      	ldr	r0, [pc, #224]	; (8004b1c <SPI_available+0x374>)
 8004a3a:	f004 f8e7 	bl	8008c0c <HAL_GPIO_WritePin>
				break;
 8004a3e:	e19e      	b.n	8004d7e <SPI_available+0x5d6>
			case OC6_ON:
				Status_OCD[6] = 1;
 8004a40:	4b33      	ldr	r3, [pc, #204]	; (8004b10 <SPI_available+0x368>)
 8004a42:	2201      	movs	r2, #1
 8004a44:	719a      	strb	r2, [r3, #6]
				HAL_GPIO_WritePin(O6_GPIO_Port, O6_Pin, SET);
 8004a46:	2201      	movs	r2, #1
 8004a48:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004a4c:	4833      	ldr	r0, [pc, #204]	; (8004b1c <SPI_available+0x374>)
 8004a4e:	f004 f8dd 	bl	8008c0c <HAL_GPIO_WritePin>
				break;
 8004a52:	e194      	b.n	8004d7e <SPI_available+0x5d6>
			case OC6_OFF:
				Status_OCD[6] = 0;
 8004a54:	4b2e      	ldr	r3, [pc, #184]	; (8004b10 <SPI_available+0x368>)
 8004a56:	2200      	movs	r2, #0
 8004a58:	719a      	strb	r2, [r3, #6]
				HAL_GPIO_WritePin(O6_GPIO_Port, O6_Pin, RESET);
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004a60:	482e      	ldr	r0, [pc, #184]	; (8004b1c <SPI_available+0x374>)
 8004a62:	f004 f8d3 	bl	8008c0c <HAL_GPIO_WritePin>
				break;
 8004a66:	e18a      	b.n	8004d7e <SPI_available+0x5d6>
			case OC7_ON:
				Status_OCD[7] = 1;
 8004a68:	4b29      	ldr	r3, [pc, #164]	; (8004b10 <SPI_available+0x368>)
 8004a6a:	2201      	movs	r2, #1
 8004a6c:	71da      	strb	r2, [r3, #7]
				HAL_GPIO_WritePin(O7_GPIO_Port, O7_Pin, SET);
 8004a6e:	2201      	movs	r2, #1
 8004a70:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004a74:	4829      	ldr	r0, [pc, #164]	; (8004b1c <SPI_available+0x374>)
 8004a76:	f004 f8c9 	bl	8008c0c <HAL_GPIO_WritePin>
				break;
 8004a7a:	e180      	b.n	8004d7e <SPI_available+0x5d6>
			case OC7_OFF:
				Status_OCD[7] = 0;
 8004a7c:	4b24      	ldr	r3, [pc, #144]	; (8004b10 <SPI_available+0x368>)
 8004a7e:	2200      	movs	r2, #0
 8004a80:	71da      	strb	r2, [r3, #7]
				HAL_GPIO_WritePin(O7_GPIO_Port, O7_Pin, RESET);
 8004a82:	2200      	movs	r2, #0
 8004a84:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004a88:	4824      	ldr	r0, [pc, #144]	; (8004b1c <SPI_available+0x374>)
 8004a8a:	f004 f8bf 	bl	8008c0c <HAL_GPIO_WritePin>
				break;
 8004a8e:	e176      	b.n	8004d7e <SPI_available+0x5d6>
				//------------------------------------------------------------------
				//--------------------------Цифровые входы--------------------------
			case DIN0_R:
				Status_DIN[0] = 1;
 8004a90:	4b23      	ldr	r3, [pc, #140]	; (8004b20 <SPI_available+0x378>)
 8004a92:	2201      	movs	r2, #1
 8004a94:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(IN0_GPIO_Port, IN0_Pin, SET);
 8004a96:	2201      	movs	r2, #1
 8004a98:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004a9c:	4821      	ldr	r0, [pc, #132]	; (8004b24 <SPI_available+0x37c>)
 8004a9e:	f004 f8b5 	bl	8008c0c <HAL_GPIO_WritePin>
				break;
 8004aa2:	e16c      	b.n	8004d7e <SPI_available+0x5d6>
			case DIN0_F:
				Status_DIN[0] = 0;
 8004aa4:	4b1e      	ldr	r3, [pc, #120]	; (8004b20 <SPI_available+0x378>)
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(IN0_GPIO_Port, IN0_Pin, RESET);
 8004aaa:	2200      	movs	r2, #0
 8004aac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004ab0:	481c      	ldr	r0, [pc, #112]	; (8004b24 <SPI_available+0x37c>)
 8004ab2:	f004 f8ab 	bl	8008c0c <HAL_GPIO_WritePin>
				break;
 8004ab6:	e162      	b.n	8004d7e <SPI_available+0x5d6>
			case DIN1_R:
				Status_DIN[1] = 1;
 8004ab8:	4b19      	ldr	r3, [pc, #100]	; (8004b20 <SPI_available+0x378>)
 8004aba:	2201      	movs	r2, #1
 8004abc:	705a      	strb	r2, [r3, #1]
				HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, SET);
 8004abe:	2201      	movs	r2, #1
 8004ac0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004ac4:	4817      	ldr	r0, [pc, #92]	; (8004b24 <SPI_available+0x37c>)
 8004ac6:	f004 f8a1 	bl	8008c0c <HAL_GPIO_WritePin>
				break;
 8004aca:	e158      	b.n	8004d7e <SPI_available+0x5d6>
			case DIN1_F:
				Status_DIN[1] = 0;
 8004acc:	4b14      	ldr	r3, [pc, #80]	; (8004b20 <SPI_available+0x378>)
 8004ace:	2200      	movs	r2, #0
 8004ad0:	705a      	strb	r2, [r3, #1]
				HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, RESET);
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004ad8:	4812      	ldr	r0, [pc, #72]	; (8004b24 <SPI_available+0x37c>)
 8004ada:	f004 f897 	bl	8008c0c <HAL_GPIO_WritePin>
				break;
 8004ade:	e14e      	b.n	8004d7e <SPI_available+0x5d6>
			case DIN2_R:
				Status_DIN[2] = 1;
 8004ae0:	4b0f      	ldr	r3, [pc, #60]	; (8004b20 <SPI_available+0x378>)
 8004ae2:	2201      	movs	r2, #1
 8004ae4:	709a      	strb	r2, [r3, #2]
				HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, SET);
 8004ae6:	2201      	movs	r2, #1
 8004ae8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004aec:	480d      	ldr	r0, [pc, #52]	; (8004b24 <SPI_available+0x37c>)
 8004aee:	f004 f88d 	bl	8008c0c <HAL_GPIO_WritePin>
				break;
 8004af2:	e144      	b.n	8004d7e <SPI_available+0x5d6>
			case DIN2_F:
				Status_DIN[2] = 0;
 8004af4:	4b0a      	ldr	r3, [pc, #40]	; (8004b20 <SPI_available+0x378>)
 8004af6:	2200      	movs	r2, #0
 8004af8:	709a      	strb	r2, [r3, #2]
				HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, RESET);
 8004afa:	2200      	movs	r2, #0
 8004afc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004b00:	4808      	ldr	r0, [pc, #32]	; (8004b24 <SPI_available+0x37c>)
 8004b02:	f004 f883 	bl	8008c0c <HAL_GPIO_WritePin>
				break;
 8004b06:	e13a      	b.n	8004d7e <SPI_available+0x5d6>
 8004b08:	20000391 	.word	0x20000391
 8004b0c:	2000038c 	.word	0x2000038c
 8004b10:	2000037c 	.word	0x2000037c
 8004b14:	40020000 	.word	0x40020000
 8004b18:	40020400 	.word	0x40020400
 8004b1c:	40021000 	.word	0x40021000
 8004b20:	2000036c 	.word	0x2000036c
 8004b24:	40020c00 	.word	0x40020c00
			case DIN3_R:
				Status_DIN[3] = 1;
 8004b28:	4b89      	ldr	r3, [pc, #548]	; (8004d50 <SPI_available+0x5a8>)
 8004b2a:	2201      	movs	r2, #1
 8004b2c:	70da      	strb	r2, [r3, #3]
				HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, SET);
 8004b2e:	2201      	movs	r2, #1
 8004b30:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004b34:	4887      	ldr	r0, [pc, #540]	; (8004d54 <SPI_available+0x5ac>)
 8004b36:	f004 f869 	bl	8008c0c <HAL_GPIO_WritePin>
				break;
 8004b3a:	e120      	b.n	8004d7e <SPI_available+0x5d6>
			case DIN3_F:
				Status_DIN[3] = 0;
 8004b3c:	4b84      	ldr	r3, [pc, #528]	; (8004d50 <SPI_available+0x5a8>)
 8004b3e:	2200      	movs	r2, #0
 8004b40:	70da      	strb	r2, [r3, #3]
				HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, RESET);
 8004b42:	2200      	movs	r2, #0
 8004b44:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004b48:	4882      	ldr	r0, [pc, #520]	; (8004d54 <SPI_available+0x5ac>)
 8004b4a:	f004 f85f 	bl	8008c0c <HAL_GPIO_WritePin>
				break;
 8004b4e:	e116      	b.n	8004d7e <SPI_available+0x5d6>
			case DIN4_R:
				Status_DIN[4] = 1;
 8004b50:	4b7f      	ldr	r3, [pc, #508]	; (8004d50 <SPI_available+0x5a8>)
 8004b52:	2201      	movs	r2, #1
 8004b54:	711a      	strb	r2, [r3, #4]
				HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, SET);
 8004b56:	2201      	movs	r2, #1
 8004b58:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004b5c:	487d      	ldr	r0, [pc, #500]	; (8004d54 <SPI_available+0x5ac>)
 8004b5e:	f004 f855 	bl	8008c0c <HAL_GPIO_WritePin>
				break;
 8004b62:	e10c      	b.n	8004d7e <SPI_available+0x5d6>
			case DIN4_F:
				Status_DIN[4] = 0;
 8004b64:	4b7a      	ldr	r3, [pc, #488]	; (8004d50 <SPI_available+0x5a8>)
 8004b66:	2200      	movs	r2, #0
 8004b68:	711a      	strb	r2, [r3, #4]
				HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, RESET);
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004b70:	4878      	ldr	r0, [pc, #480]	; (8004d54 <SPI_available+0x5ac>)
 8004b72:	f004 f84b 	bl	8008c0c <HAL_GPIO_WritePin>
				break;
 8004b76:	e102      	b.n	8004d7e <SPI_available+0x5d6>
			case DIN5_R:
				Status_DIN[5] = 1;
 8004b78:	4b75      	ldr	r3, [pc, #468]	; (8004d50 <SPI_available+0x5a8>)
 8004b7a:	2201      	movs	r2, #1
 8004b7c:	715a      	strb	r2, [r3, #5]
				HAL_GPIO_WritePin(IN5_GPIO_Port, IN5_Pin, SET);
 8004b7e:	2201      	movs	r2, #1
 8004b80:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004b84:	4873      	ldr	r0, [pc, #460]	; (8004d54 <SPI_available+0x5ac>)
 8004b86:	f004 f841 	bl	8008c0c <HAL_GPIO_WritePin>
				break;
 8004b8a:	e0f8      	b.n	8004d7e <SPI_available+0x5d6>
			case DIN5_F:
				Status_DIN[5] = 0;
 8004b8c:	4b70      	ldr	r3, [pc, #448]	; (8004d50 <SPI_available+0x5a8>)
 8004b8e:	2200      	movs	r2, #0
 8004b90:	715a      	strb	r2, [r3, #5]
				HAL_GPIO_WritePin(IN5_GPIO_Port, IN5_Pin, RESET);
 8004b92:	2200      	movs	r2, #0
 8004b94:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004b98:	486e      	ldr	r0, [pc, #440]	; (8004d54 <SPI_available+0x5ac>)
 8004b9a:	f004 f837 	bl	8008c0c <HAL_GPIO_WritePin>
				break;
 8004b9e:	e0ee      	b.n	8004d7e <SPI_available+0x5d6>
			case DIN6_R:
				Status_DIN[6] = 1;
 8004ba0:	4b6b      	ldr	r3, [pc, #428]	; (8004d50 <SPI_available+0x5a8>)
 8004ba2:	2201      	movs	r2, #1
 8004ba4:	719a      	strb	r2, [r3, #6]
				HAL_GPIO_WritePin(IN6_GPIO_Port, IN6_Pin, SET);
 8004ba6:	2201      	movs	r2, #1
 8004ba8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004bac:	4869      	ldr	r0, [pc, #420]	; (8004d54 <SPI_available+0x5ac>)
 8004bae:	f004 f82d 	bl	8008c0c <HAL_GPIO_WritePin>
				break;
 8004bb2:	e0e4      	b.n	8004d7e <SPI_available+0x5d6>
			case DIN6_F:
				Status_DIN[6] = 0;
 8004bb4:	4b66      	ldr	r3, [pc, #408]	; (8004d50 <SPI_available+0x5a8>)
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	719a      	strb	r2, [r3, #6]
				HAL_GPIO_WritePin(IN6_GPIO_Port, IN6_Pin, RESET);
 8004bba:	2200      	movs	r2, #0
 8004bbc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004bc0:	4864      	ldr	r0, [pc, #400]	; (8004d54 <SPI_available+0x5ac>)
 8004bc2:	f004 f823 	bl	8008c0c <HAL_GPIO_WritePin>
				break;
 8004bc6:	e0da      	b.n	8004d7e <SPI_available+0x5d6>
			case DIN7_R:
				Status_DIN[7] = 1;
 8004bc8:	4b61      	ldr	r3, [pc, #388]	; (8004d50 <SPI_available+0x5a8>)
 8004bca:	2201      	movs	r2, #1
 8004bcc:	71da      	strb	r2, [r3, #7]
				HAL_GPIO_WritePin(IN7_GPIO_Port, IN7_Pin, SET);
 8004bce:	2201      	movs	r2, #1
 8004bd0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004bd4:	485f      	ldr	r0, [pc, #380]	; (8004d54 <SPI_available+0x5ac>)
 8004bd6:	f004 f819 	bl	8008c0c <HAL_GPIO_WritePin>
				break;
 8004bda:	e0d0      	b.n	8004d7e <SPI_available+0x5d6>
			case DIN7_F:
				Status_DIN[7] = 0;
 8004bdc:	4b5c      	ldr	r3, [pc, #368]	; (8004d50 <SPI_available+0x5a8>)
 8004bde:	2200      	movs	r2, #0
 8004be0:	71da      	strb	r2, [r3, #7]
				HAL_GPIO_WritePin(IN7_GPIO_Port, IN7_Pin, RESET);
 8004be2:	2200      	movs	r2, #0
 8004be4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004be8:	485a      	ldr	r0, [pc, #360]	; (8004d54 <SPI_available+0x5ac>)
 8004bea:	f004 f80f 	bl	8008c0c <HAL_GPIO_WritePin>
				break;
 8004bee:	e0c6      	b.n	8004d7e <SPI_available+0x5d6>
				//------------------------------------------------------------------
				//-------------------------Аналоговые входы-------------------------
			case AIN0_ON:
				Status_AIN[0] = 1;
 8004bf0:	4b59      	ldr	r3, [pc, #356]	; (8004d58 <SPI_available+0x5b0>)
 8004bf2:	2201      	movs	r2, #1
 8004bf4:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(AIN0_GPIO_Port, AIN0_Pin, SET);
 8004bf6:	2201      	movs	r2, #1
 8004bf8:	2108      	movs	r1, #8
 8004bfa:	4858      	ldr	r0, [pc, #352]	; (8004d5c <SPI_available+0x5b4>)
 8004bfc:	f004 f806 	bl	8008c0c <HAL_GPIO_WritePin>
				break;
 8004c00:	e0bd      	b.n	8004d7e <SPI_available+0x5d6>
			case AIN0_OFF:
				Status_AIN[0] = 0;
 8004c02:	4b55      	ldr	r3, [pc, #340]	; (8004d58 <SPI_available+0x5b0>)
 8004c04:	2200      	movs	r2, #0
 8004c06:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(AIN0_GPIO_Port, AIN0_Pin, RESET);
 8004c08:	2200      	movs	r2, #0
 8004c0a:	2108      	movs	r1, #8
 8004c0c:	4853      	ldr	r0, [pc, #332]	; (8004d5c <SPI_available+0x5b4>)
 8004c0e:	f003 fffd 	bl	8008c0c <HAL_GPIO_WritePin>
				break;
 8004c12:	e0b4      	b.n	8004d7e <SPI_available+0x5d6>
			case AIN1_ON:
				Status_AIN[1] = 1;
 8004c14:	4b50      	ldr	r3, [pc, #320]	; (8004d58 <SPI_available+0x5b0>)
 8004c16:	2201      	movs	r2, #1
 8004c18:	705a      	strb	r2, [r3, #1]
				HAL_GPIO_WritePin(AIN1_GPIO_Port, AIN1_Pin, SET);
 8004c1a:	2201      	movs	r2, #1
 8004c1c:	2110      	movs	r1, #16
 8004c1e:	484f      	ldr	r0, [pc, #316]	; (8004d5c <SPI_available+0x5b4>)
 8004c20:	f003 fff4 	bl	8008c0c <HAL_GPIO_WritePin>
				break;
 8004c24:	e0ab      	b.n	8004d7e <SPI_available+0x5d6>
			case AIN1_OFF:
				Status_AIN[1] = 0;
 8004c26:	4b4c      	ldr	r3, [pc, #304]	; (8004d58 <SPI_available+0x5b0>)
 8004c28:	2200      	movs	r2, #0
 8004c2a:	705a      	strb	r2, [r3, #1]
				HAL_GPIO_WritePin(AIN1_GPIO_Port, AIN1_Pin, RESET);
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	2110      	movs	r1, #16
 8004c30:	484a      	ldr	r0, [pc, #296]	; (8004d5c <SPI_available+0x5b4>)
 8004c32:	f003 ffeb 	bl	8008c0c <HAL_GPIO_WritePin>
				break;
 8004c36:	e0a2      	b.n	8004d7e <SPI_available+0x5d6>
			case AIN2_ON:
				Status_AIN[2] = 1;
 8004c38:	4b47      	ldr	r3, [pc, #284]	; (8004d58 <SPI_available+0x5b0>)
 8004c3a:	2201      	movs	r2, #1
 8004c3c:	709a      	strb	r2, [r3, #2]
				HAL_GPIO_WritePin(AIN2_GPIO_Port, AIN2_Pin, SET);
 8004c3e:	2201      	movs	r2, #1
 8004c40:	2120      	movs	r1, #32
 8004c42:	4846      	ldr	r0, [pc, #280]	; (8004d5c <SPI_available+0x5b4>)
 8004c44:	f003 ffe2 	bl	8008c0c <HAL_GPIO_WritePin>
				break;
 8004c48:	e099      	b.n	8004d7e <SPI_available+0x5d6>
			case AIN2_OFF:
				Status_AIN[2] = 0;
 8004c4a:	4b43      	ldr	r3, [pc, #268]	; (8004d58 <SPI_available+0x5b0>)
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	709a      	strb	r2, [r3, #2]
				HAL_GPIO_WritePin(AIN2_GPIO_Port, AIN2_Pin, RESET);
 8004c50:	2200      	movs	r2, #0
 8004c52:	2120      	movs	r1, #32
 8004c54:	4841      	ldr	r0, [pc, #260]	; (8004d5c <SPI_available+0x5b4>)
 8004c56:	f003 ffd9 	bl	8008c0c <HAL_GPIO_WritePin>
				break;
 8004c5a:	e090      	b.n	8004d7e <SPI_available+0x5d6>
			case AIN3_ON:
				Status_AIN[3] = 1;
 8004c5c:	4b3e      	ldr	r3, [pc, #248]	; (8004d58 <SPI_available+0x5b0>)
 8004c5e:	2201      	movs	r2, #1
 8004c60:	70da      	strb	r2, [r3, #3]
				HAL_GPIO_WritePin(AIN3_GPIO_Port, AIN3_Pin, SET);
 8004c62:	2201      	movs	r2, #1
 8004c64:	2140      	movs	r1, #64	; 0x40
 8004c66:	483d      	ldr	r0, [pc, #244]	; (8004d5c <SPI_available+0x5b4>)
 8004c68:	f003 ffd0 	bl	8008c0c <HAL_GPIO_WritePin>
				break;
 8004c6c:	e087      	b.n	8004d7e <SPI_available+0x5d6>
			case AIN3_OFF:
				Status_AIN[3] = 0;
 8004c6e:	4b3a      	ldr	r3, [pc, #232]	; (8004d58 <SPI_available+0x5b0>)
 8004c70:	2200      	movs	r2, #0
 8004c72:	70da      	strb	r2, [r3, #3]
				HAL_GPIO_WritePin(AIN3_GPIO_Port, AIN3_Pin, RESET);
 8004c74:	2200      	movs	r2, #0
 8004c76:	2140      	movs	r1, #64	; 0x40
 8004c78:	4838      	ldr	r0, [pc, #224]	; (8004d5c <SPI_available+0x5b4>)
 8004c7a:	f003 ffc7 	bl	8008c0c <HAL_GPIO_WritePin>
				break;
 8004c7e:	e07e      	b.n	8004d7e <SPI_available+0x5d6>
				//------------------------------------------------------------------
				//----------------------------Выходы ШИМ----------------------------
			case PWM0_ON:
				Status_PWM[0] = 1;
 8004c80:	4b37      	ldr	r3, [pc, #220]	; (8004d60 <SPI_available+0x5b8>)
 8004c82:	2201      	movs	r2, #1
 8004c84:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(PWM0_GPIO_Port, PWM0_Pin, SET);
 8004c86:	2201      	movs	r2, #1
 8004c88:	2140      	movs	r1, #64	; 0x40
 8004c8a:	4836      	ldr	r0, [pc, #216]	; (8004d64 <SPI_available+0x5bc>)
 8004c8c:	f003 ffbe 	bl	8008c0c <HAL_GPIO_WritePin>
				break;
 8004c90:	e075      	b.n	8004d7e <SPI_available+0x5d6>
			case PWM0_OFF:
				Status_PWM[0] = 0;
 8004c92:	4b33      	ldr	r3, [pc, #204]	; (8004d60 <SPI_available+0x5b8>)
 8004c94:	2200      	movs	r2, #0
 8004c96:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(PWM0_GPIO_Port, PWM0_Pin, RESET);
 8004c98:	2200      	movs	r2, #0
 8004c9a:	2140      	movs	r1, #64	; 0x40
 8004c9c:	4831      	ldr	r0, [pc, #196]	; (8004d64 <SPI_available+0x5bc>)
 8004c9e:	f003 ffb5 	bl	8008c0c <HAL_GPIO_WritePin>
				break;
 8004ca2:	e06c      	b.n	8004d7e <SPI_available+0x5d6>
			case PWM1_ON:
				Status_PWM[1] = 1;
 8004ca4:	4b2e      	ldr	r3, [pc, #184]	; (8004d60 <SPI_available+0x5b8>)
 8004ca6:	2201      	movs	r2, #1
 8004ca8:	705a      	strb	r2, [r3, #1]
				HAL_GPIO_WritePin(PWM1_GPIO_Port, PWM1_Pin, SET);
 8004caa:	2201      	movs	r2, #1
 8004cac:	2180      	movs	r1, #128	; 0x80
 8004cae:	482d      	ldr	r0, [pc, #180]	; (8004d64 <SPI_available+0x5bc>)
 8004cb0:	f003 ffac 	bl	8008c0c <HAL_GPIO_WritePin>
				break;
 8004cb4:	e063      	b.n	8004d7e <SPI_available+0x5d6>
			case PWM1_OFF:
				Status_PWM[1] = 0;
 8004cb6:	4b2a      	ldr	r3, [pc, #168]	; (8004d60 <SPI_available+0x5b8>)
 8004cb8:	2200      	movs	r2, #0
 8004cba:	705a      	strb	r2, [r3, #1]
				HAL_GPIO_WritePin(PWM1_GPIO_Port, PWM1_Pin, RESET);
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	2180      	movs	r1, #128	; 0x80
 8004cc0:	4828      	ldr	r0, [pc, #160]	; (8004d64 <SPI_available+0x5bc>)
 8004cc2:	f003 ffa3 	bl	8008c0c <HAL_GPIO_WritePin>
				break;
 8004cc6:	e05a      	b.n	8004d7e <SPI_available+0x5d6>
			case PWM2_ON:
				Status_PWM[2] = 1;
 8004cc8:	4b25      	ldr	r3, [pc, #148]	; (8004d60 <SPI_available+0x5b8>)
 8004cca:	2201      	movs	r2, #1
 8004ccc:	709a      	strb	r2, [r3, #2]
				HAL_GPIO_WritePin(PWM2_GPIO_Port, PWM2_Pin, SET);
 8004cce:	2201      	movs	r2, #1
 8004cd0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004cd4:	4823      	ldr	r0, [pc, #140]	; (8004d64 <SPI_available+0x5bc>)
 8004cd6:	f003 ff99 	bl	8008c0c <HAL_GPIO_WritePin>
				break;
 8004cda:	e050      	b.n	8004d7e <SPI_available+0x5d6>
			case PWM2_OFF:
				Status_PWM[2] = 0;
 8004cdc:	4b20      	ldr	r3, [pc, #128]	; (8004d60 <SPI_available+0x5b8>)
 8004cde:	2200      	movs	r2, #0
 8004ce0:	709a      	strb	r2, [r3, #2]
				HAL_GPIO_WritePin(PWM2_GPIO_Port, PWM2_Pin, RESET);
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004ce8:	481e      	ldr	r0, [pc, #120]	; (8004d64 <SPI_available+0x5bc>)
 8004cea:	f003 ff8f 	bl	8008c0c <HAL_GPIO_WritePin>
				break;
 8004cee:	e046      	b.n	8004d7e <SPI_available+0x5d6>
			case PWM3_ON:
				Status_PWM[3] = 1;
 8004cf0:	4b1b      	ldr	r3, [pc, #108]	; (8004d60 <SPI_available+0x5b8>)
 8004cf2:	2201      	movs	r2, #1
 8004cf4:	70da      	strb	r2, [r3, #3]
				HAL_GPIO_WritePin(PWM3_GPIO_Port, PWM3_Pin, SET);
 8004cf6:	2201      	movs	r2, #1
 8004cf8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004cfc:	4819      	ldr	r0, [pc, #100]	; (8004d64 <SPI_available+0x5bc>)
 8004cfe:	f003 ff85 	bl	8008c0c <HAL_GPIO_WritePin>
				break;
 8004d02:	e03c      	b.n	8004d7e <SPI_available+0x5d6>
			case PWM3_OFF:
				Status_PWM[3] = 0;
 8004d04:	4b16      	ldr	r3, [pc, #88]	; (8004d60 <SPI_available+0x5b8>)
 8004d06:	2200      	movs	r2, #0
 8004d08:	70da      	strb	r2, [r3, #3]
				HAL_GPIO_WritePin(PWM3_GPIO_Port, PWM3_Pin, RESET);
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004d10:	4814      	ldr	r0, [pc, #80]	; (8004d64 <SPI_available+0x5bc>)
 8004d12:	f003 ff7b 	bl	8008c0c <HAL_GPIO_WritePin>
				break;
 8004d16:	e032      	b.n	8004d7e <SPI_available+0x5d6>
				//------------------------------------------------------------------
				//--------------------------Выходы 1-Wire---------------------------
			case WR0_ON:
				Status_1WR[0] = 1;
 8004d18:	4b13      	ldr	r3, [pc, #76]	; (8004d68 <SPI_available+0x5c0>)
 8004d1a:	2201      	movs	r2, #1
 8004d1c:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(WR0_GPIO_Port, WR0_Pin, SET);
 8004d1e:	2201      	movs	r2, #1
 8004d20:	2101      	movs	r1, #1
 8004d22:	480c      	ldr	r0, [pc, #48]	; (8004d54 <SPI_available+0x5ac>)
 8004d24:	f003 ff72 	bl	8008c0c <HAL_GPIO_WritePin>
				break;
 8004d28:	e029      	b.n	8004d7e <SPI_available+0x5d6>
			case WR0_OFF:
				Status_1WR[0] = 0;
 8004d2a:	4b0f      	ldr	r3, [pc, #60]	; (8004d68 <SPI_available+0x5c0>)
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(WR0_GPIO_Port, WR0_Pin, RESET);
 8004d30:	2200      	movs	r2, #0
 8004d32:	2101      	movs	r1, #1
 8004d34:	4807      	ldr	r0, [pc, #28]	; (8004d54 <SPI_available+0x5ac>)
 8004d36:	f003 ff69 	bl	8008c0c <HAL_GPIO_WritePin>
				break;
 8004d3a:	e020      	b.n	8004d7e <SPI_available+0x5d6>
			case WR1_ON:
				Status_1WR[1] = 1;
 8004d3c:	4b0a      	ldr	r3, [pc, #40]	; (8004d68 <SPI_available+0x5c0>)
 8004d3e:	2201      	movs	r2, #1
 8004d40:	705a      	strb	r2, [r3, #1]
				HAL_GPIO_WritePin(WR1_GPIO_Port, WR1_Pin, SET);
 8004d42:	2201      	movs	r2, #1
 8004d44:	2102      	movs	r1, #2
 8004d46:	4803      	ldr	r0, [pc, #12]	; (8004d54 <SPI_available+0x5ac>)
 8004d48:	f003 ff60 	bl	8008c0c <HAL_GPIO_WritePin>
				break;
 8004d4c:	e017      	b.n	8004d7e <SPI_available+0x5d6>
 8004d4e:	bf00      	nop
 8004d50:	2000036c 	.word	0x2000036c
 8004d54:	40020c00 	.word	0x40020c00
 8004d58:	20000364 	.word	0x20000364
 8004d5c:	40020000 	.word	0x40020000
 8004d60:	20000374 	.word	0x20000374
 8004d64:	40020800 	.word	0x40020800
 8004d68:	20000384 	.word	0x20000384
			case WR1_OFF:
				Status_1WR[1] = 0;
 8004d6c:	4ba1      	ldr	r3, [pc, #644]	; (8004ff4 <SPI_available+0x84c>)
 8004d6e:	2200      	movs	r2, #0
 8004d70:	705a      	strb	r2, [r3, #1]
				HAL_GPIO_WritePin(WR1_GPIO_Port, WR1_Pin, RESET);
 8004d72:	2200      	movs	r2, #0
 8004d74:	2102      	movs	r1, #2
 8004d76:	48a0      	ldr	r0, [pc, #640]	; (8004ff8 <SPI_available+0x850>)
 8004d78:	f003 ff48 	bl	8008c0c <HAL_GPIO_WritePin>
				break;
 8004d7c:	bf00      	nop
				break;
			case INTERFACE_TEST:
				break;
				//------------------------------------------------------------------
		}
		if(SPI_rx_buf[0] == MCU_OUTPUT)
 8004d7e:	4b9f      	ldr	r3, [pc, #636]	; (8004ffc <SPI_available+0x854>)
 8004d80:	781b      	ldrb	r3, [r3, #0]
 8004d82:	2bc0      	cmp	r3, #192	; 0xc0
 8004d84:	d136      	bne.n	8004df4 <SPI_available+0x64c>
		{
			tp = 1;
 8004d86:	4b9e      	ldr	r3, [pc, #632]	; (8005000 <SPI_available+0x858>)
 8004d88:	2201      	movs	r2, #1
 8004d8a:	701a      	strb	r2, [r3, #0]
			tp1 = 1;
 8004d8c:	4b9d      	ldr	r3, [pc, #628]	; (8005004 <SPI_available+0x85c>)
 8004d8e:	2201      	movs	r2, #1
 8004d90:	701a      	strb	r2, [r3, #0]
			SEND_str("start\n");
 8004d92:	489d      	ldr	r0, [pc, #628]	; (8005008 <SPI_available+0x860>)
 8004d94:	f7fd f8bc 	bl	8001f10 <SEND_str>
			SEND_str("status_OCD ");
 8004d98:	489c      	ldr	r0, [pc, #624]	; (800500c <SPI_available+0x864>)
 8004d9a:	f7fd f8b9 	bl	8001f10 <SEND_str>
			USART_Tx(Status_OCD[0]);
 8004d9e:	4b9c      	ldr	r3, [pc, #624]	; (8005010 <SPI_available+0x868>)
 8004da0:	781b      	ldrb	r3, [r3, #0]
 8004da2:	4618      	mov	r0, r3
 8004da4:	f7fd f89c 	bl	8001ee0 <USART_Tx>
			USART_Tx(Status_OCD[1]);
 8004da8:	4b99      	ldr	r3, [pc, #612]	; (8005010 <SPI_available+0x868>)
 8004daa:	785b      	ldrb	r3, [r3, #1]
 8004dac:	4618      	mov	r0, r3
 8004dae:	f7fd f897 	bl	8001ee0 <USART_Tx>
			USART_Tx(Status_OCD[2]);
 8004db2:	4b97      	ldr	r3, [pc, #604]	; (8005010 <SPI_available+0x868>)
 8004db4:	789b      	ldrb	r3, [r3, #2]
 8004db6:	4618      	mov	r0, r3
 8004db8:	f7fd f892 	bl	8001ee0 <USART_Tx>
			USART_Tx(Status_OCD[3]);
 8004dbc:	4b94      	ldr	r3, [pc, #592]	; (8005010 <SPI_available+0x868>)
 8004dbe:	78db      	ldrb	r3, [r3, #3]
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	f7fd f88d 	bl	8001ee0 <USART_Tx>
			USART_Tx(Status_OCD[4]);
 8004dc6:	4b92      	ldr	r3, [pc, #584]	; (8005010 <SPI_available+0x868>)
 8004dc8:	791b      	ldrb	r3, [r3, #4]
 8004dca:	4618      	mov	r0, r3
 8004dcc:	f7fd f888 	bl	8001ee0 <USART_Tx>
			USART_Tx(Status_OCD[5]);
 8004dd0:	4b8f      	ldr	r3, [pc, #572]	; (8005010 <SPI_available+0x868>)
 8004dd2:	795b      	ldrb	r3, [r3, #5]
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	f7fd f883 	bl	8001ee0 <USART_Tx>
			USART_Tx(Status_OCD[6]);
 8004dda:	4b8d      	ldr	r3, [pc, #564]	; (8005010 <SPI_available+0x868>)
 8004ddc:	799b      	ldrb	r3, [r3, #6]
 8004dde:	4618      	mov	r0, r3
 8004de0:	f7fd f87e 	bl	8001ee0 <USART_Tx>
			USART_Tx(Status_OCD[7]);
 8004de4:	4b8a      	ldr	r3, [pc, #552]	; (8005010 <SPI_available+0x868>)
 8004de6:	79db      	ldrb	r3, [r3, #7]
 8004de8:	4618      	mov	r0, r3
 8004dea:	f7fd f879 	bl	8001ee0 <USART_Tx>
			SEND_str(" END_status_OCD\n");
 8004dee:	4889      	ldr	r0, [pc, #548]	; (8005014 <SPI_available+0x86c>)
 8004df0:	f7fd f88e 	bl	8001f10 <SEND_str>
//			else
//				HAL_GPIO_WritePin(O7_GPIO_Port, O7_Pin, RESET);
			//-------------------------------------------------------

		}
		if(tp)
 8004df4:	4b82      	ldr	r3, [pc, #520]	; (8005000 <SPI_available+0x858>)
 8004df6:	781b      	ldrb	r3, [r3, #0]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	f000 811f 	beq.w	800503c <SPI_available+0x894>
		{
			if(i == 0)
 8004dfe:	4b86      	ldr	r3, [pc, #536]	; (8005018 <SPI_available+0x870>)
 8004e00:	781b      	ldrb	r3, [r3, #0]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d128      	bne.n	8004e58 <SPI_available+0x6b0>
			{
				SPI_tx_buf[0] = Status_AIN[j];
 8004e06:	4b85      	ldr	r3, [pc, #532]	; (800501c <SPI_available+0x874>)
 8004e08:	781b      	ldrb	r3, [r3, #0]
 8004e0a:	461a      	mov	r2, r3
 8004e0c:	4b84      	ldr	r3, [pc, #528]	; (8005020 <SPI_available+0x878>)
 8004e0e:	5c9a      	ldrb	r2, [r3, r2]
 8004e10:	4b84      	ldr	r3, [pc, #528]	; (8005024 <SPI_available+0x87c>)
 8004e12:	701a      	strb	r2, [r3, #0]
				j++;
 8004e14:	4b81      	ldr	r3, [pc, #516]	; (800501c <SPI_available+0x874>)
 8004e16:	781b      	ldrb	r3, [r3, #0]
 8004e18:	3301      	adds	r3, #1
 8004e1a:	b2da      	uxtb	r2, r3
 8004e1c:	4b7f      	ldr	r3, [pc, #508]	; (800501c <SPI_available+0x874>)
 8004e1e:	701a      	strb	r2, [r3, #0]
				if(j > 7)
 8004e20:	4b7e      	ldr	r3, [pc, #504]	; (800501c <SPI_available+0x874>)
 8004e22:	781b      	ldrb	r3, [r3, #0]
 8004e24:	2b07      	cmp	r3, #7
 8004e26:	d908      	bls.n	8004e3a <SPI_available+0x692>
				{
					j = 0;
 8004e28:	4b7c      	ldr	r3, [pc, #496]	; (800501c <SPI_available+0x874>)
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	701a      	strb	r2, [r3, #0]
					i++;
 8004e2e:	4b7a      	ldr	r3, [pc, #488]	; (8005018 <SPI_available+0x870>)
 8004e30:	781b      	ldrb	r3, [r3, #0]
 8004e32:	3301      	adds	r3, #1
 8004e34:	b2da      	uxtb	r2, r3
 8004e36:	4b78      	ldr	r3, [pc, #480]	; (8005018 <SPI_available+0x870>)
 8004e38:	701a      	strb	r2, [r3, #0]
				}
				flag_iput_spi2 = 0;
 8004e3a:	4b7b      	ldr	r3, [pc, #492]	; (8005028 <SPI_available+0x880>)
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	701a      	strb	r2, [r3, #0]
				HAL_SPI_TransmitReceive_IT(&hspi2, (uint8_t *)SPI_tx_buf, (uint8_t *)SPI_rx_buf, 1);
 8004e40:	2301      	movs	r3, #1
 8004e42:	4a6e      	ldr	r2, [pc, #440]	; (8004ffc <SPI_available+0x854>)
 8004e44:	4977      	ldr	r1, [pc, #476]	; (8005024 <SPI_available+0x87c>)
 8004e46:	4879      	ldr	r0, [pc, #484]	; (800502c <SPI_available+0x884>)
 8004e48:	f004 ff5e 	bl	8009d08 <HAL_SPI_TransmitReceive_IT>
				while(!flag_iput_spi2) {;}
 8004e4c:	bf00      	nop
 8004e4e:	4b76      	ldr	r3, [pc, #472]	; (8005028 <SPI_available+0x880>)
 8004e50:	781b      	ldrb	r3, [r3, #0]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d0fb      	beq.n	8004e4e <SPI_available+0x6a6>
 8004e56:	e10c      	b.n	8005072 <SPI_available+0x8ca>
			}
			else if(i == 1)
 8004e58:	4b6f      	ldr	r3, [pc, #444]	; (8005018 <SPI_available+0x870>)
 8004e5a:	781b      	ldrb	r3, [r3, #0]
 8004e5c:	2b01      	cmp	r3, #1
 8004e5e:	d128      	bne.n	8004eb2 <SPI_available+0x70a>
			{
				SPI_tx_buf[0] = Status_DIN[j];
 8004e60:	4b6e      	ldr	r3, [pc, #440]	; (800501c <SPI_available+0x874>)
 8004e62:	781b      	ldrb	r3, [r3, #0]
 8004e64:	461a      	mov	r2, r3
 8004e66:	4b72      	ldr	r3, [pc, #456]	; (8005030 <SPI_available+0x888>)
 8004e68:	5c9a      	ldrb	r2, [r3, r2]
 8004e6a:	4b6e      	ldr	r3, [pc, #440]	; (8005024 <SPI_available+0x87c>)
 8004e6c:	701a      	strb	r2, [r3, #0]
				j++;
 8004e6e:	4b6b      	ldr	r3, [pc, #428]	; (800501c <SPI_available+0x874>)
 8004e70:	781b      	ldrb	r3, [r3, #0]
 8004e72:	3301      	adds	r3, #1
 8004e74:	b2da      	uxtb	r2, r3
 8004e76:	4b69      	ldr	r3, [pc, #420]	; (800501c <SPI_available+0x874>)
 8004e78:	701a      	strb	r2, [r3, #0]
				if(j > 7)
 8004e7a:	4b68      	ldr	r3, [pc, #416]	; (800501c <SPI_available+0x874>)
 8004e7c:	781b      	ldrb	r3, [r3, #0]
 8004e7e:	2b07      	cmp	r3, #7
 8004e80:	d908      	bls.n	8004e94 <SPI_available+0x6ec>
				{
					j = 0;
 8004e82:	4b66      	ldr	r3, [pc, #408]	; (800501c <SPI_available+0x874>)
 8004e84:	2200      	movs	r2, #0
 8004e86:	701a      	strb	r2, [r3, #0]
					i++;
 8004e88:	4b63      	ldr	r3, [pc, #396]	; (8005018 <SPI_available+0x870>)
 8004e8a:	781b      	ldrb	r3, [r3, #0]
 8004e8c:	3301      	adds	r3, #1
 8004e8e:	b2da      	uxtb	r2, r3
 8004e90:	4b61      	ldr	r3, [pc, #388]	; (8005018 <SPI_available+0x870>)
 8004e92:	701a      	strb	r2, [r3, #0]
				}
				flag_iput_spi2 = 0;
 8004e94:	4b64      	ldr	r3, [pc, #400]	; (8005028 <SPI_available+0x880>)
 8004e96:	2200      	movs	r2, #0
 8004e98:	701a      	strb	r2, [r3, #0]
				HAL_SPI_TransmitReceive_IT(&hspi2, (uint8_t *)SPI_tx_buf, (uint8_t *)SPI_rx_buf, 1);
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	4a57      	ldr	r2, [pc, #348]	; (8004ffc <SPI_available+0x854>)
 8004e9e:	4961      	ldr	r1, [pc, #388]	; (8005024 <SPI_available+0x87c>)
 8004ea0:	4862      	ldr	r0, [pc, #392]	; (800502c <SPI_available+0x884>)
 8004ea2:	f004 ff31 	bl	8009d08 <HAL_SPI_TransmitReceive_IT>
				while(!flag_iput_spi2) {;}
 8004ea6:	bf00      	nop
 8004ea8:	4b5f      	ldr	r3, [pc, #380]	; (8005028 <SPI_available+0x880>)
 8004eaa:	781b      	ldrb	r3, [r3, #0]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d0fb      	beq.n	8004ea8 <SPI_available+0x700>
 8004eb0:	e0df      	b.n	8005072 <SPI_available+0x8ca>
			}
			else if(i == 2)
 8004eb2:	4b59      	ldr	r3, [pc, #356]	; (8005018 <SPI_available+0x870>)
 8004eb4:	781b      	ldrb	r3, [r3, #0]
 8004eb6:	2b02      	cmp	r3, #2
 8004eb8:	d128      	bne.n	8004f0c <SPI_available+0x764>
			{
				SPI_tx_buf[0] = Status_PWM[j];
 8004eba:	4b58      	ldr	r3, [pc, #352]	; (800501c <SPI_available+0x874>)
 8004ebc:	781b      	ldrb	r3, [r3, #0]
 8004ebe:	461a      	mov	r2, r3
 8004ec0:	4b5c      	ldr	r3, [pc, #368]	; (8005034 <SPI_available+0x88c>)
 8004ec2:	5c9a      	ldrb	r2, [r3, r2]
 8004ec4:	4b57      	ldr	r3, [pc, #348]	; (8005024 <SPI_available+0x87c>)
 8004ec6:	701a      	strb	r2, [r3, #0]
				j++;
 8004ec8:	4b54      	ldr	r3, [pc, #336]	; (800501c <SPI_available+0x874>)
 8004eca:	781b      	ldrb	r3, [r3, #0]
 8004ecc:	3301      	adds	r3, #1
 8004ece:	b2da      	uxtb	r2, r3
 8004ed0:	4b52      	ldr	r3, [pc, #328]	; (800501c <SPI_available+0x874>)
 8004ed2:	701a      	strb	r2, [r3, #0]
				if(j > 7)
 8004ed4:	4b51      	ldr	r3, [pc, #324]	; (800501c <SPI_available+0x874>)
 8004ed6:	781b      	ldrb	r3, [r3, #0]
 8004ed8:	2b07      	cmp	r3, #7
 8004eda:	d908      	bls.n	8004eee <SPI_available+0x746>
				{
					j = 0;
 8004edc:	4b4f      	ldr	r3, [pc, #316]	; (800501c <SPI_available+0x874>)
 8004ede:	2200      	movs	r2, #0
 8004ee0:	701a      	strb	r2, [r3, #0]
					i++;
 8004ee2:	4b4d      	ldr	r3, [pc, #308]	; (8005018 <SPI_available+0x870>)
 8004ee4:	781b      	ldrb	r3, [r3, #0]
 8004ee6:	3301      	adds	r3, #1
 8004ee8:	b2da      	uxtb	r2, r3
 8004eea:	4b4b      	ldr	r3, [pc, #300]	; (8005018 <SPI_available+0x870>)
 8004eec:	701a      	strb	r2, [r3, #0]
				}
				flag_iput_spi2 = 0;
 8004eee:	4b4e      	ldr	r3, [pc, #312]	; (8005028 <SPI_available+0x880>)
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	701a      	strb	r2, [r3, #0]
				HAL_SPI_TransmitReceive_IT(&hspi2, (uint8_t *)SPI_tx_buf, (uint8_t *)SPI_rx_buf, 1);
 8004ef4:	2301      	movs	r3, #1
 8004ef6:	4a41      	ldr	r2, [pc, #260]	; (8004ffc <SPI_available+0x854>)
 8004ef8:	494a      	ldr	r1, [pc, #296]	; (8005024 <SPI_available+0x87c>)
 8004efa:	484c      	ldr	r0, [pc, #304]	; (800502c <SPI_available+0x884>)
 8004efc:	f004 ff04 	bl	8009d08 <HAL_SPI_TransmitReceive_IT>
				while(!flag_iput_spi2) {;}
 8004f00:	bf00      	nop
 8004f02:	4b49      	ldr	r3, [pc, #292]	; (8005028 <SPI_available+0x880>)
 8004f04:	781b      	ldrb	r3, [r3, #0]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d0fb      	beq.n	8004f02 <SPI_available+0x75a>
 8004f0a:	e0b2      	b.n	8005072 <SPI_available+0x8ca>
			}
			else if(i == 3)
 8004f0c:	4b42      	ldr	r3, [pc, #264]	; (8005018 <SPI_available+0x870>)
 8004f0e:	781b      	ldrb	r3, [r3, #0]
 8004f10:	2b03      	cmp	r3, #3
 8004f12:	d128      	bne.n	8004f66 <SPI_available+0x7be>
			{
				SPI_tx_buf[0] = Status_OCD[j];
 8004f14:	4b41      	ldr	r3, [pc, #260]	; (800501c <SPI_available+0x874>)
 8004f16:	781b      	ldrb	r3, [r3, #0]
 8004f18:	461a      	mov	r2, r3
 8004f1a:	4b3d      	ldr	r3, [pc, #244]	; (8005010 <SPI_available+0x868>)
 8004f1c:	5c9a      	ldrb	r2, [r3, r2]
 8004f1e:	4b41      	ldr	r3, [pc, #260]	; (8005024 <SPI_available+0x87c>)
 8004f20:	701a      	strb	r2, [r3, #0]
				j++;
 8004f22:	4b3e      	ldr	r3, [pc, #248]	; (800501c <SPI_available+0x874>)
 8004f24:	781b      	ldrb	r3, [r3, #0]
 8004f26:	3301      	adds	r3, #1
 8004f28:	b2da      	uxtb	r2, r3
 8004f2a:	4b3c      	ldr	r3, [pc, #240]	; (800501c <SPI_available+0x874>)
 8004f2c:	701a      	strb	r2, [r3, #0]
				if(j > 7)
 8004f2e:	4b3b      	ldr	r3, [pc, #236]	; (800501c <SPI_available+0x874>)
 8004f30:	781b      	ldrb	r3, [r3, #0]
 8004f32:	2b07      	cmp	r3, #7
 8004f34:	d908      	bls.n	8004f48 <SPI_available+0x7a0>
				{
					j = 0;
 8004f36:	4b39      	ldr	r3, [pc, #228]	; (800501c <SPI_available+0x874>)
 8004f38:	2200      	movs	r2, #0
 8004f3a:	701a      	strb	r2, [r3, #0]
					i++;
 8004f3c:	4b36      	ldr	r3, [pc, #216]	; (8005018 <SPI_available+0x870>)
 8004f3e:	781b      	ldrb	r3, [r3, #0]
 8004f40:	3301      	adds	r3, #1
 8004f42:	b2da      	uxtb	r2, r3
 8004f44:	4b34      	ldr	r3, [pc, #208]	; (8005018 <SPI_available+0x870>)
 8004f46:	701a      	strb	r2, [r3, #0]
				}
				flag_iput_spi2 = 0;
 8004f48:	4b37      	ldr	r3, [pc, #220]	; (8005028 <SPI_available+0x880>)
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	701a      	strb	r2, [r3, #0]
				HAL_SPI_TransmitReceive_IT(&hspi2, (uint8_t *)SPI_tx_buf, (uint8_t *)SPI_rx_buf, 1);
 8004f4e:	2301      	movs	r3, #1
 8004f50:	4a2a      	ldr	r2, [pc, #168]	; (8004ffc <SPI_available+0x854>)
 8004f52:	4934      	ldr	r1, [pc, #208]	; (8005024 <SPI_available+0x87c>)
 8004f54:	4835      	ldr	r0, [pc, #212]	; (800502c <SPI_available+0x884>)
 8004f56:	f004 fed7 	bl	8009d08 <HAL_SPI_TransmitReceive_IT>
				while(!flag_iput_spi2) {;}
 8004f5a:	bf00      	nop
 8004f5c:	4b32      	ldr	r3, [pc, #200]	; (8005028 <SPI_available+0x880>)
 8004f5e:	781b      	ldrb	r3, [r3, #0]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d0fb      	beq.n	8004f5c <SPI_available+0x7b4>
 8004f64:	e085      	b.n	8005072 <SPI_available+0x8ca>
			}
			else if(i == 4)
 8004f66:	4b2c      	ldr	r3, [pc, #176]	; (8005018 <SPI_available+0x870>)
 8004f68:	781b      	ldrb	r3, [r3, #0]
 8004f6a:	2b04      	cmp	r3, #4
 8004f6c:	d128      	bne.n	8004fc0 <SPI_available+0x818>
			{
				SPI_tx_buf[0] = Status_1WR[j];
 8004f6e:	4b2b      	ldr	r3, [pc, #172]	; (800501c <SPI_available+0x874>)
 8004f70:	781b      	ldrb	r3, [r3, #0]
 8004f72:	461a      	mov	r2, r3
 8004f74:	4b1f      	ldr	r3, [pc, #124]	; (8004ff4 <SPI_available+0x84c>)
 8004f76:	5c9a      	ldrb	r2, [r3, r2]
 8004f78:	4b2a      	ldr	r3, [pc, #168]	; (8005024 <SPI_available+0x87c>)
 8004f7a:	701a      	strb	r2, [r3, #0]
				j++;
 8004f7c:	4b27      	ldr	r3, [pc, #156]	; (800501c <SPI_available+0x874>)
 8004f7e:	781b      	ldrb	r3, [r3, #0]
 8004f80:	3301      	adds	r3, #1
 8004f82:	b2da      	uxtb	r2, r3
 8004f84:	4b25      	ldr	r3, [pc, #148]	; (800501c <SPI_available+0x874>)
 8004f86:	701a      	strb	r2, [r3, #0]
				if(j > 7)
 8004f88:	4b24      	ldr	r3, [pc, #144]	; (800501c <SPI_available+0x874>)
 8004f8a:	781b      	ldrb	r3, [r3, #0]
 8004f8c:	2b07      	cmp	r3, #7
 8004f8e:	d908      	bls.n	8004fa2 <SPI_available+0x7fa>
				{
					j = 0;
 8004f90:	4b22      	ldr	r3, [pc, #136]	; (800501c <SPI_available+0x874>)
 8004f92:	2200      	movs	r2, #0
 8004f94:	701a      	strb	r2, [r3, #0]
					i++;
 8004f96:	4b20      	ldr	r3, [pc, #128]	; (8005018 <SPI_available+0x870>)
 8004f98:	781b      	ldrb	r3, [r3, #0]
 8004f9a:	3301      	adds	r3, #1
 8004f9c:	b2da      	uxtb	r2, r3
 8004f9e:	4b1e      	ldr	r3, [pc, #120]	; (8005018 <SPI_available+0x870>)
 8004fa0:	701a      	strb	r2, [r3, #0]
				}
//				else
//				{
					flag_iput_spi2 = 0;
 8004fa2:	4b21      	ldr	r3, [pc, #132]	; (8005028 <SPI_available+0x880>)
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	701a      	strb	r2, [r3, #0]
					HAL_SPI_TransmitReceive_IT(&hspi2, (uint8_t *)SPI_tx_buf, (uint8_t *)SPI_rx_buf, 1);
 8004fa8:	2301      	movs	r3, #1
 8004faa:	4a14      	ldr	r2, [pc, #80]	; (8004ffc <SPI_available+0x854>)
 8004fac:	491d      	ldr	r1, [pc, #116]	; (8005024 <SPI_available+0x87c>)
 8004fae:	481f      	ldr	r0, [pc, #124]	; (800502c <SPI_available+0x884>)
 8004fb0:	f004 feaa 	bl	8009d08 <HAL_SPI_TransmitReceive_IT>
					while(!flag_iput_spi2) {;}
 8004fb4:	bf00      	nop
 8004fb6:	4b1c      	ldr	r3, [pc, #112]	; (8005028 <SPI_available+0x880>)
 8004fb8:	781b      	ldrb	r3, [r3, #0]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d0fb      	beq.n	8004fb6 <SPI_available+0x80e>
 8004fbe:	e058      	b.n	8005072 <SPI_available+0x8ca>
//				}
			}
			else if(i == 5)
 8004fc0:	4b15      	ldr	r3, [pc, #84]	; (8005018 <SPI_available+0x870>)
 8004fc2:	781b      	ldrb	r3, [r3, #0]
 8004fc4:	2b05      	cmp	r3, #5
 8004fc6:	d154      	bne.n	8005072 <SPI_available+0x8ca>
			{
				i = 0;
 8004fc8:	4b13      	ldr	r3, [pc, #76]	; (8005018 <SPI_available+0x870>)
 8004fca:	2200      	movs	r2, #0
 8004fcc:	701a      	strb	r2, [r3, #0]
				j = 0;
 8004fce:	4b13      	ldr	r3, [pc, #76]	; (800501c <SPI_available+0x874>)
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	701a      	strb	r2, [r3, #0]
				tp = 0;
 8004fd4:	4b0a      	ldr	r3, [pc, #40]	; (8005000 <SPI_available+0x858>)
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	701a      	strb	r2, [r3, #0]
				SEND_str("the_end\n");
 8004fda:	4817      	ldr	r0, [pc, #92]	; (8005038 <SPI_available+0x890>)
 8004fdc:	f7fc ff98 	bl	8001f10 <SEND_str>
				flag_iput_spi2 = 0;
 8004fe0:	4b11      	ldr	r3, [pc, #68]	; (8005028 <SPI_available+0x880>)
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	701a      	strb	r2, [r3, #0]
				HAL_SPI_TransmitReceive_IT(&hspi2, (uint8_t *)SPI_tx_buf, (uint8_t *)SPI_rx_buf, 1);
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	4a04      	ldr	r2, [pc, #16]	; (8004ffc <SPI_available+0x854>)
 8004fea:	490e      	ldr	r1, [pc, #56]	; (8005024 <SPI_available+0x87c>)
 8004fec:	480f      	ldr	r0, [pc, #60]	; (800502c <SPI_available+0x884>)
 8004fee:	f004 fe8b 	bl	8009d08 <HAL_SPI_TransmitReceive_IT>
 8004ff2:	e03e      	b.n	8005072 <SPI_available+0x8ca>
 8004ff4:	20000384 	.word	0x20000384
 8004ff8:	40020c00 	.word	0x40020c00
 8004ffc:	2000038c 	.word	0x2000038c
 8005000:	20000394 	.word	0x20000394
 8005004:	20000058 	.word	0x20000058
 8005008:	0801df7c 	.word	0x0801df7c
 800500c:	0801df84 	.word	0x0801df84
 8005010:	2000037c 	.word	0x2000037c
 8005014:	0801df90 	.word	0x0801df90
 8005018:	20000392 	.word	0x20000392
 800501c:	20000393 	.word	0x20000393
 8005020:	20000364 	.word	0x20000364
 8005024:	20000390 	.word	0x20000390
 8005028:	20000391 	.word	0x20000391
 800502c:	20000b00 	.word	0x20000b00
 8005030:	2000036c 	.word	0x2000036c
 8005034:	20000374 	.word	0x20000374
 8005038:	0801dfa4 	.word	0x0801dfa4
			}
		}
		else if(SPI_rx_buf[0] == MCU_RELAY_CNT)
 800503c:	4b17      	ldr	r3, [pc, #92]	; (800509c <SPI_available+0x8f4>)
 800503e:	781b      	ldrb	r3, [r3, #0]
 8005040:	2ba1      	cmp	r3, #161	; 0xa1
 8005042:	d016      	beq.n	8005072 <SPI_available+0x8ca>
		{
			//По этой комманде надо прислать КОЛ-ВО подключенных блоков расширения РЕЛЕ (от 0 до 10)
		}
		else if(SPI_rx_buf[0] == MCU_DIGITAL_CNT)
 8005044:	4b15      	ldr	r3, [pc, #84]	; (800509c <SPI_available+0x8f4>)
 8005046:	781b      	ldrb	r3, [r3, #0]
 8005048:	2ba2      	cmp	r3, #162	; 0xa2
 800504a:	d012      	beq.n	8005072 <SPI_available+0x8ca>
		{
			//По этой комманде надо прислать КОЛ-ВО подключенных блоков расширения ЦИФРОВЫХ ВХОДОВ (от 0 до 10)
		}
		else if(SPI_rx_buf[0] == MCU_DIMMING_CNT)
 800504c:	4b13      	ldr	r3, [pc, #76]	; (800509c <SPI_available+0x8f4>)
 800504e:	781b      	ldrb	r3, [r3, #0]
 8005050:	2ba3      	cmp	r3, #163	; 0xa3
 8005052:	d00e      	beq.n	8005072 <SPI_available+0x8ca>
		{
			//По этой комманде надо прислать КОЛ-ВО подключенных блоков расширения ДИММИРОВАНИЯ (от 0 до 10)
		}
		else if(SPI_rx_buf[0] == MCU_INTERFACE_CNT)
 8005054:	4b11      	ldr	r3, [pc, #68]	; (800509c <SPI_available+0x8f4>)
 8005056:	781b      	ldrb	r3, [r3, #0]
 8005058:	2ba4      	cmp	r3, #164	; 0xa4
 800505a:	d00a      	beq.n	8005072 <SPI_available+0x8ca>
		{
			//По этой комманде надо прислать КОЛ-ВО подключенных блоков расширения ИНТЕРФЕЙСОВ (от 0 до 10)
		}
		else if(SPI_rx_buf[0] == MCU_RELAY_ADR)
 800505c:	4b0f      	ldr	r3, [pc, #60]	; (800509c <SPI_available+0x8f4>)
 800505e:	781b      	ldrb	r3, [r3, #0]
 8005060:	2bb1      	cmp	r3, #177	; 0xb1
 8005062:	d006      	beq.n	8005072 <SPI_available+0x8ca>
		{
			//По этой комманде надо прислать АДРЕСА подключенных блоков расширения РЕЛЕ (от 2 до 11)
		}
		else if(SPI_rx_buf[0] == MCU_DIGITAL_ADR)
 8005064:	4b0d      	ldr	r3, [pc, #52]	; (800509c <SPI_available+0x8f4>)
 8005066:	781b      	ldrb	r3, [r3, #0]
 8005068:	2bb2      	cmp	r3, #178	; 0xb2
 800506a:	d002      	beq.n	8005072 <SPI_available+0x8ca>
		{
			//По этой комманде надо прислать АДРЕСА подключенных блоков расширения ЦИФРОВЫХ ВХОДОВ (от 12 до 21)
		}
		else if(SPI_rx_buf[0] == MCU_DIMMING_ADR)
 800506c:	4b0b      	ldr	r3, [pc, #44]	; (800509c <SPI_available+0x8f4>)
 800506e:	781b      	ldrb	r3, [r3, #0]
 8005070:	2bb3      	cmp	r3, #179	; 0xb3
		}
		else if(SPI_rx_buf[0] == MCU_INTERFACE_ADR)
		{
			//По этой комманде надо прислать АДРЕСА подключенных блоков расширения ИНТЕРФЕЙСОВ (от 32 до 41)
		}
		if(!tp)
 8005072:	4b0b      	ldr	r3, [pc, #44]	; (80050a0 <SPI_available+0x8f8>)
 8005074:	781b      	ldrb	r3, [r3, #0]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d10d      	bne.n	8005096 <SPI_available+0x8ee>
//			{
//				tp1 = 0;
//			}
//			else
//			{
				flag_iput_spi2 = 1;		//Fix bag! so so
 800507a:	4b0a      	ldr	r3, [pc, #40]	; (80050a4 <SPI_available+0x8fc>)
 800507c:	2201      	movs	r2, #1
 800507e:	701a      	strb	r2, [r3, #0]
				HAL_SPI_TransmitReceive_IT(&hspi2, (uint8_t *)SPI_tx_buf, (uint8_t *)SPI_rx_buf, 1);
 8005080:	2301      	movs	r3, #1
 8005082:	4a06      	ldr	r2, [pc, #24]	; (800509c <SPI_available+0x8f4>)
 8005084:	4908      	ldr	r1, [pc, #32]	; (80050a8 <SPI_available+0x900>)
 8005086:	4809      	ldr	r0, [pc, #36]	; (80050ac <SPI_available+0x904>)
 8005088:	f004 fe3e 	bl	8009d08 <HAL_SPI_TransmitReceive_IT>
				while(!flag_iput_spi2) {;}
 800508c:	bf00      	nop
 800508e:	4b05      	ldr	r3, [pc, #20]	; (80050a4 <SPI_available+0x8fc>)
 8005090:	781b      	ldrb	r3, [r3, #0]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d0fb      	beq.n	800508e <SPI_available+0x8e6>
		//				HAL_SPI_TransmitReceive_IT(&hspi2, (uint8_t *)SPI_tx_buf, (uint8_t *)SPI_rx_buf, 1);
		//				while(!flag_iput_spi2) {;}
		//			}
		//		}
	}
}
 8005096:	bf00      	nop
 8005098:	bd80      	pop	{r7, pc}
 800509a:	bf00      	nop
 800509c:	2000038c 	.word	0x2000038c
 80050a0:	20000394 	.word	0x20000394
 80050a4:	20000391 	.word	0x20000391
 80050a8:	20000390 	.word	0x20000390
 80050ac:	20000b00 	.word	0x20000b00

080050b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80050b0:	b480      	push	{r7}
 80050b2:	b083      	sub	sp, #12
 80050b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80050b6:	2300      	movs	r3, #0
 80050b8:	607b      	str	r3, [r7, #4]
 80050ba:	4b10      	ldr	r3, [pc, #64]	; (80050fc <HAL_MspInit+0x4c>)
 80050bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050be:	4a0f      	ldr	r2, [pc, #60]	; (80050fc <HAL_MspInit+0x4c>)
 80050c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80050c4:	6453      	str	r3, [r2, #68]	; 0x44
 80050c6:	4b0d      	ldr	r3, [pc, #52]	; (80050fc <HAL_MspInit+0x4c>)
 80050c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80050ce:	607b      	str	r3, [r7, #4]
 80050d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80050d2:	2300      	movs	r3, #0
 80050d4:	603b      	str	r3, [r7, #0]
 80050d6:	4b09      	ldr	r3, [pc, #36]	; (80050fc <HAL_MspInit+0x4c>)
 80050d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050da:	4a08      	ldr	r2, [pc, #32]	; (80050fc <HAL_MspInit+0x4c>)
 80050dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050e0:	6413      	str	r3, [r2, #64]	; 0x40
 80050e2:	4b06      	ldr	r3, [pc, #24]	; (80050fc <HAL_MspInit+0x4c>)
 80050e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050ea:	603b      	str	r3, [r7, #0]
 80050ec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80050ee:	bf00      	nop
 80050f0:	370c      	adds	r7, #12
 80050f2:	46bd      	mov	sp, r7
 80050f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f8:	4770      	bx	lr
 80050fa:	bf00      	nop
 80050fc:	40023800 	.word	0x40023800

08005100 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b08c      	sub	sp, #48	; 0x30
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8005108:	2300      	movs	r3, #0
 800510a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800510c:	2300      	movs	r3, #0
 800510e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8005110:	2200      	movs	r2, #0
 8005112:	6879      	ldr	r1, [r7, #4]
 8005114:	2019      	movs	r0, #25
 8005116:	f001 ff67 	bl	8006fe8 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800511a:	2019      	movs	r0, #25
 800511c:	f001 ff80 	bl	8007020 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8005120:	2300      	movs	r3, #0
 8005122:	60fb      	str	r3, [r7, #12]
 8005124:	4b1f      	ldr	r3, [pc, #124]	; (80051a4 <HAL_InitTick+0xa4>)
 8005126:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005128:	4a1e      	ldr	r2, [pc, #120]	; (80051a4 <HAL_InitTick+0xa4>)
 800512a:	f043 0301 	orr.w	r3, r3, #1
 800512e:	6453      	str	r3, [r2, #68]	; 0x44
 8005130:	4b1c      	ldr	r3, [pc, #112]	; (80051a4 <HAL_InitTick+0xa4>)
 8005132:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005134:	f003 0301 	and.w	r3, r3, #1
 8005138:	60fb      	str	r3, [r7, #12]
 800513a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800513c:	f107 0210 	add.w	r2, r7, #16
 8005140:	f107 0314 	add.w	r3, r7, #20
 8005144:	4611      	mov	r1, r2
 8005146:	4618      	mov	r0, r3
 8005148:	f004 f9fe 	bl	8009548 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 800514c:	f004 f9e8 	bl	8009520 <HAL_RCC_GetPCLK2Freq>
 8005150:	4603      	mov	r3, r0
 8005152:	005b      	lsls	r3, r3, #1
 8005154:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8005156:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005158:	4a13      	ldr	r2, [pc, #76]	; (80051a8 <HAL_InitTick+0xa8>)
 800515a:	fba2 2303 	umull	r2, r3, r2, r3
 800515e:	0c9b      	lsrs	r3, r3, #18
 8005160:	3b01      	subs	r3, #1
 8005162:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8005164:	4b11      	ldr	r3, [pc, #68]	; (80051ac <HAL_InitTick+0xac>)
 8005166:	4a12      	ldr	r2, [pc, #72]	; (80051b0 <HAL_InitTick+0xb0>)
 8005168:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 800516a:	4b10      	ldr	r3, [pc, #64]	; (80051ac <HAL_InitTick+0xac>)
 800516c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005170:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8005172:	4a0e      	ldr	r2, [pc, #56]	; (80051ac <HAL_InitTick+0xac>)
 8005174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005176:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8005178:	4b0c      	ldr	r3, [pc, #48]	; (80051ac <HAL_InitTick+0xac>)
 800517a:	2200      	movs	r2, #0
 800517c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800517e:	4b0b      	ldr	r3, [pc, #44]	; (80051ac <HAL_InitTick+0xac>)
 8005180:	2200      	movs	r2, #0
 8005182:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8005184:	4809      	ldr	r0, [pc, #36]	; (80051ac <HAL_InitTick+0xac>)
 8005186:	f005 f95d 	bl	800a444 <HAL_TIM_Base_Init>
 800518a:	4603      	mov	r3, r0
 800518c:	2b00      	cmp	r3, #0
 800518e:	d104      	bne.n	800519a <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8005190:	4806      	ldr	r0, [pc, #24]	; (80051ac <HAL_InitTick+0xac>)
 8005192:	f005 f982 	bl	800a49a <HAL_TIM_Base_Start_IT>
 8005196:	4603      	mov	r3, r0
 8005198:	e000      	b.n	800519c <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 800519a:	2301      	movs	r3, #1
}
 800519c:	4618      	mov	r0, r3
 800519e:	3730      	adds	r7, #48	; 0x30
 80051a0:	46bd      	mov	sp, r7
 80051a2:	bd80      	pop	{r7, pc}
 80051a4:	40023800 	.word	0x40023800
 80051a8:	431bde83 	.word	0x431bde83
 80051ac:	20000bb0 	.word	0x20000bb0
 80051b0:	40010000 	.word	0x40010000

080051b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80051b4:	b480      	push	{r7}
 80051b6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80051b8:	bf00      	nop
 80051ba:	46bd      	mov	sp, r7
 80051bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c0:	4770      	bx	lr

080051c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80051c2:	b480      	push	{r7}
 80051c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80051c6:	e7fe      	b.n	80051c6 <HardFault_Handler+0x4>

080051c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80051c8:	b480      	push	{r7}
 80051ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80051cc:	e7fe      	b.n	80051cc <MemManage_Handler+0x4>

080051ce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80051ce:	b480      	push	{r7}
 80051d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80051d2:	e7fe      	b.n	80051d2 <BusFault_Handler+0x4>

080051d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80051d4:	b480      	push	{r7}
 80051d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80051d8:	e7fe      	b.n	80051d8 <UsageFault_Handler+0x4>

080051da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80051da:	b480      	push	{r7}
 80051dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80051de:	bf00      	nop
 80051e0:	46bd      	mov	sp, r7
 80051e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e6:	4770      	bx	lr

080051e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80051e8:	b480      	push	{r7}
 80051ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80051ec:	bf00      	nop
 80051ee:	46bd      	mov	sp, r7
 80051f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f4:	4770      	bx	lr

080051f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80051f6:	b480      	push	{r7}
 80051f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80051fa:	bf00      	nop
 80051fc:	46bd      	mov	sp, r7
 80051fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005202:	4770      	bx	lr

08005204 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005204:	b480      	push	{r7}
 8005206:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005208:	bf00      	nop
 800520a:	46bd      	mov	sp, r7
 800520c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005210:	4770      	bx	lr
	...

08005214 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8005214:	b580      	push	{r7, lr}
 8005216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch4_up);
 8005218:	4802      	ldr	r0, [pc, #8]	; (8005224 <DMA1_Stream2_IRQHandler+0x10>)
 800521a:	f002 f837 	bl	800728c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800521e:	bf00      	nop
 8005220:	bd80      	pop	{r7, pc}
 8005222:	bf00      	nop
 8005224:	20000ddc 	.word	0x20000ddc

08005228 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8005228:	b580      	push	{r7, lr}
 800522a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1_trig);
 800522c:	4802      	ldr	r0, [pc, #8]	; (8005238 <DMA1_Stream4_IRQHandler+0x10>)
 800522e:	f002 f82d 	bl	800728c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8005232:	bf00      	nop
 8005234:	bd80      	pop	{r7, pc}
 8005236:	bf00      	nop
 8005238:	20000cdc 	.word	0x20000cdc

0800523c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800523c:	b580      	push	{r7, lr}
 800523e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch2);
 8005240:	4802      	ldr	r0, [pc, #8]	; (800524c <DMA1_Stream5_IRQHandler+0x10>)
 8005242:	f002 f823 	bl	800728c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8005246:	bf00      	nop
 8005248:	bd80      	pop	{r7, pc}
 800524a:	bf00      	nop
 800524c:	20000d3c 	.word	0x20000d3c

08005250 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8005250:	b580      	push	{r7, lr}
 8005252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8005254:	f44f 7080 	mov.w	r0, #256	; 0x100
 8005258:	f003 fcf2 	bl	8008c40 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 800525c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8005260:	f003 fcee 	bl	8008c40 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8005264:	bf00      	nop
 8005266:	bd80      	pop	{r7, pc}

08005268 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8005268:	b580      	push	{r7, lr}
 800526a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800526c:	4802      	ldr	r0, [pc, #8]	; (8005278 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800526e:	f005 fadf 	bl	800a830 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8005272:	bf00      	nop
 8005274:	bd80      	pop	{r7, pc}
 8005276:	bf00      	nop
 8005278:	20000bb0 	.word	0x20000bb0

0800527c <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 800527c:	b580      	push	{r7, lr}
 800527e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8005280:	4802      	ldr	r0, [pc, #8]	; (800528c <SPI2_IRQHandler+0x10>)
 8005282:	f004 fdd5 	bl	8009e30 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8005286:	bf00      	nop
 8005288:	bd80      	pop	{r7, pc}
 800528a:	bf00      	nop
 800528c:	20000b00 	.word	0x20000b00

08005290 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8005290:	b480      	push	{r7}
 8005292:	b083      	sub	sp, #12
 8005294:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	if(((huart1.Instance->SR & USART_SR_RXNE) != RESET) && ((huart1.Instance->CR1 & USART_CR1_RXNEIE) != RESET))
 8005296:	4b18      	ldr	r3, [pc, #96]	; (80052f8 <USART1_IRQHandler+0x68>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f003 0320 	and.w	r3, r3, #32
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d022      	beq.n	80052ea <USART1_IRQHandler+0x5a>
 80052a4:	4b14      	ldr	r3, [pc, #80]	; (80052f8 <USART1_IRQHandler+0x68>)
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	68db      	ldr	r3, [r3, #12]
 80052aa:	f003 0320 	and.w	r3, r3, #32
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d01b      	beq.n	80052ea <USART1_IRQHandler+0x5a>
	{
		uint8_t rbyte = (uint8_t)(huart1.Instance->DR & (uint8_t)0x00FF); // читает байт из регистра
 80052b2:	4b11      	ldr	r3, [pc, #68]	; (80052f8 <USART1_IRQHandler+0x68>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	685b      	ldr	r3, [r3, #4]
 80052b8:	71fb      	strb	r3, [r7, #7]
		gsm_rx_buffer_index_t i = (uint16_t)(gsm_rx_buffer_head + 1) % GSM_RX_BUFFER_SIZE;
 80052ba:	4b10      	ldr	r3, [pc, #64]	; (80052fc <USART1_IRQHandler+0x6c>)
 80052bc:	781b      	ldrb	r3, [r3, #0]
 80052be:	b2db      	uxtb	r3, r3
 80052c0:	3301      	adds	r3, #1
 80052c2:	b2db      	uxtb	r3, r3
 80052c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80052c8:	71bb      	strb	r3, [r7, #6]

		if(i != gsm_rx_buffer_tail)
 80052ca:	4b0d      	ldr	r3, [pc, #52]	; (8005300 <USART1_IRQHandler+0x70>)
 80052cc:	781b      	ldrb	r3, [r3, #0]
 80052ce:	b2db      	uxtb	r3, r3
 80052d0:	79ba      	ldrb	r2, [r7, #6]
 80052d2:	429a      	cmp	r2, r3
 80052d4:	d009      	beq.n	80052ea <USART1_IRQHandler+0x5a>
		{
			gsm_rx_buffer[gsm_rx_buffer_head] = rbyte;
 80052d6:	4b09      	ldr	r3, [pc, #36]	; (80052fc <USART1_IRQHandler+0x6c>)
 80052d8:	781b      	ldrb	r3, [r3, #0]
 80052da:	b2db      	uxtb	r3, r3
 80052dc:	4619      	mov	r1, r3
 80052de:	4a09      	ldr	r2, [pc, #36]	; (8005304 <USART1_IRQHandler+0x74>)
 80052e0:	79fb      	ldrb	r3, [r7, #7]
 80052e2:	5453      	strb	r3, [r2, r1]
			gsm_rx_buffer_head = i;
 80052e4:	4a05      	ldr	r2, [pc, #20]	; (80052fc <USART1_IRQHandler+0x6c>)
 80052e6:	79bb      	ldrb	r3, [r7, #6]
 80052e8:	7013      	strb	r3, [r2, #0]
		}
	}

	return;
 80052ea:	bf00      	nop
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80052ec:	370c      	adds	r7, #12
 80052ee:	46bd      	mov	sp, r7
 80052f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f4:	4770      	bx	lr
 80052f6:	bf00      	nop
 80052f8:	20000e7c 	.word	0x20000e7c
 80052fc:	2000039c 	.word	0x2000039c
 8005300:	2000039d 	.word	0x2000039d
 8005304:	200003a0 	.word	0x200003a0

08005308 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8005308:	b480      	push	{r7}
 800530a:	b083      	sub	sp, #12
 800530c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	if(((huart2.Instance->SR & USART_SR_RXNE) != RESET) && ((huart2.Instance->CR1 & USART_CR1_RXNEIE) != RESET))
 800530e:	4b18      	ldr	r3, [pc, #96]	; (8005370 <USART2_IRQHandler+0x68>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f003 0320 	and.w	r3, r3, #32
 8005318:	2b00      	cmp	r3, #0
 800531a:	d022      	beq.n	8005362 <USART2_IRQHandler+0x5a>
 800531c:	4b14      	ldr	r3, [pc, #80]	; (8005370 <USART2_IRQHandler+0x68>)
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	68db      	ldr	r3, [r3, #12]
 8005322:	f003 0320 	and.w	r3, r3, #32
 8005326:	2b00      	cmp	r3, #0
 8005328:	d01b      	beq.n	8005362 <USART2_IRQHandler+0x5a>
	{
		uint8_t rbyte = (uint8_t)(huart2.Instance->DR & (uint8_t)0x00FF); // читает байт из регистра
 800532a:	4b11      	ldr	r3, [pc, #68]	; (8005370 <USART2_IRQHandler+0x68>)
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	685b      	ldr	r3, [r3, #4]
 8005330:	71fb      	strb	r3, [r7, #7]
		rs485_rx_buffer_index_t i = (uint16_t)(rs485_rx_buffer_head + 1) % RS485_RX_BUFFER_SIZE;
 8005332:	4b10      	ldr	r3, [pc, #64]	; (8005374 <USART2_IRQHandler+0x6c>)
 8005334:	781b      	ldrb	r3, [r3, #0]
 8005336:	b2db      	uxtb	r3, r3
 8005338:	3301      	adds	r3, #1
 800533a:	b2db      	uxtb	r3, r3
 800533c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005340:	71bb      	strb	r3, [r7, #6]

		if(i != rs485_rx_buffer_tail)
 8005342:	4b0d      	ldr	r3, [pc, #52]	; (8005378 <USART2_IRQHandler+0x70>)
 8005344:	781b      	ldrb	r3, [r3, #0]
 8005346:	b2db      	uxtb	r3, r3
 8005348:	79ba      	ldrb	r2, [r7, #6]
 800534a:	429a      	cmp	r2, r3
 800534c:	d009      	beq.n	8005362 <USART2_IRQHandler+0x5a>
		{
			rs485_rx_buffer[rs485_rx_buffer_head] = rbyte;
 800534e:	4b09      	ldr	r3, [pc, #36]	; (8005374 <USART2_IRQHandler+0x6c>)
 8005350:	781b      	ldrb	r3, [r3, #0]
 8005352:	b2db      	uxtb	r3, r3
 8005354:	4619      	mov	r1, r3
 8005356:	4a09      	ldr	r2, [pc, #36]	; (800537c <USART2_IRQHandler+0x74>)
 8005358:	79fb      	ldrb	r3, [r7, #7]
 800535a:	5453      	strb	r3, [r2, r1]
			rs485_rx_buffer_head = i;
 800535c:	4a05      	ldr	r2, [pc, #20]	; (8005374 <USART2_IRQHandler+0x6c>)
 800535e:	79bb      	ldrb	r3, [r7, #6]
 8005360:	7013      	strb	r3, [r2, #0]
		}
	}

	return;
 8005362:	bf00      	nop
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8005364:	370c      	adds	r7, #12
 8005366:	46bd      	mov	sp, r7
 8005368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536c:	4770      	bx	lr
 800536e:	bf00      	nop
 8005370:	20000ebc 	.word	0x20000ebc
 8005374:	20000424 	.word	0x20000424
 8005378:	20000425 	.word	0x20000425
 800537c:	20000428 	.word	0x20000428

08005380 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8005380:	b480      	push	{r7}
 8005382:	b083      	sub	sp, #12
 8005384:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
//Раскоментить для дебага по USART(кроме отладки по Ethernet)

	if(((huart3.Instance->SR & USART_SR_RXNE) != RESET) && ((huart3.Instance->CR1 & USART_CR1_RXNEIE) != RESET))
 8005386:	4b18      	ldr	r3, [pc, #96]	; (80053e8 <USART3_IRQHandler+0x68>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f003 0320 	and.w	r3, r3, #32
 8005390:	2b00      	cmp	r3, #0
 8005392:	d022      	beq.n	80053da <USART3_IRQHandler+0x5a>
 8005394:	4b14      	ldr	r3, [pc, #80]	; (80053e8 <USART3_IRQHandler+0x68>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	68db      	ldr	r3, [r3, #12]
 800539a:	f003 0320 	and.w	r3, r3, #32
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d01b      	beq.n	80053da <USART3_IRQHandler+0x5a>
	{
		uint8_t rbyte = (uint8_t)(huart3.Instance->DR & (uint8_t)0x00FF); // читает байт из регистра
 80053a2:	4b11      	ldr	r3, [pc, #68]	; (80053e8 <USART3_IRQHandler+0x68>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	685b      	ldr	r3, [r3, #4]
 80053a8:	71fb      	strb	r3, [r7, #7]
		dbg_rx_buffer_index_t i = (uint16_t)(dbg_rx_buffer_head + 1) % DBG_RX_BUFFER_SIZE;
 80053aa:	4b10      	ldr	r3, [pc, #64]	; (80053ec <USART3_IRQHandler+0x6c>)
 80053ac:	781b      	ldrb	r3, [r3, #0]
 80053ae:	b2db      	uxtb	r3, r3
 80053b0:	3301      	adds	r3, #1
 80053b2:	b2db      	uxtb	r3, r3
 80053b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80053b8:	71bb      	strb	r3, [r7, #6]

		if(i != dbg_rx_buffer_tail)
 80053ba:	4b0d      	ldr	r3, [pc, #52]	; (80053f0 <USART3_IRQHandler+0x70>)
 80053bc:	781b      	ldrb	r3, [r3, #0]
 80053be:	b2db      	uxtb	r3, r3
 80053c0:	79ba      	ldrb	r2, [r7, #6]
 80053c2:	429a      	cmp	r2, r3
 80053c4:	d009      	beq.n	80053da <USART3_IRQHandler+0x5a>
		{
			dbg_rx_buffer[dbg_rx_buffer_head] = rbyte;
 80053c6:	4b09      	ldr	r3, [pc, #36]	; (80053ec <USART3_IRQHandler+0x6c>)
 80053c8:	781b      	ldrb	r3, [r3, #0]
 80053ca:	b2db      	uxtb	r3, r3
 80053cc:	4619      	mov	r1, r3
 80053ce:	4a09      	ldr	r2, [pc, #36]	; (80053f4 <USART3_IRQHandler+0x74>)
 80053d0:	79fb      	ldrb	r3, [r7, #7]
 80053d2:	5453      	strb	r3, [r2, r1]
			dbg_rx_buffer_head = i;
 80053d4:	4a05      	ldr	r2, [pc, #20]	; (80053ec <USART3_IRQHandler+0x6c>)
 80053d6:	79bb      	ldrb	r3, [r7, #6]
 80053d8:	7013      	strb	r3, [r2, #0]
		}
	}

	return;
 80053da:	bf00      	nop
  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80053dc:	370c      	adds	r7, #12
 80053de:	46bd      	mov	sp, r7
 80053e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e4:	4770      	bx	lr
 80053e6:	bf00      	nop
 80053e8:	20000e3c 	.word	0x20000e3c
 80053ec:	200003e0 	.word	0x200003e0
 80053f0:	200003e1 	.word	0x200003e1
 80053f4:	200003e4 	.word	0x200003e4

080053f8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 80053fc:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8005400:	f003 fc1e 	bl	8008c40 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8005404:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8005408:	f003 fc1a 	bl	8008c40 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 800540c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8005410:	f003 fc16 	bl	8008c40 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8005414:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8005418:	f003 fc12 	bl	8008c40 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 800541c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8005420:	f003 fc0e 	bl	8008c40 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8005424:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8005428:	f003 fc0a 	bl	8008c40 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800542c:	bf00      	nop
 800542e:	bd80      	pop	{r7, pc}

08005430 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8005430:	b580      	push	{r7, lr}
 8005432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch3);
 8005434:	4802      	ldr	r0, [pc, #8]	; (8005440 <DMA1_Stream7_IRQHandler+0x10>)
 8005436:	f001 ff29 	bl	800728c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 800543a:	bf00      	nop
 800543c:	bd80      	pop	{r7, pc}
 800543e:	bf00      	nop
 8005440:	20000c3c 	.word	0x20000c3c

08005444 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8005444:	b580      	push	{r7, lr}
 8005446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8005448:	4802      	ldr	r0, [pc, #8]	; (8005454 <TIM6_DAC_IRQHandler+0x10>)
 800544a:	f005 f9f1 	bl	800a830 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800544e:	bf00      	nop
 8005450:	bd80      	pop	{r7, pc}
 8005452:	bf00      	nop
 8005454:	20000d9c 	.word	0x20000d9c

08005458 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8005458:	b580      	push	{r7, lr}
 800545a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800545c:	4802      	ldr	r0, [pc, #8]	; (8005468 <DMA2_Stream0_IRQHandler+0x10>)
 800545e:	f001 ff15 	bl	800728c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8005462:	bf00      	nop
 8005464:	bd80      	pop	{r7, pc}
 8005466:	bf00      	nop
 8005468:	200007f8 	.word	0x200007f8

0800546c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800546c:	b480      	push	{r7}
 800546e:	af00      	add	r7, sp, #0
	return 1;
 8005470:	2301      	movs	r3, #1
}
 8005472:	4618      	mov	r0, r3
 8005474:	46bd      	mov	sp, r7
 8005476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547a:	4770      	bx	lr

0800547c <_kill>:

int _kill(int pid, int sig)
{
 800547c:	b480      	push	{r7}
 800547e:	b083      	sub	sp, #12
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
 8005484:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8005486:	4b05      	ldr	r3, [pc, #20]	; (800549c <_kill+0x20>)
 8005488:	2216      	movs	r2, #22
 800548a:	601a      	str	r2, [r3, #0]
	return -1;
 800548c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005490:	4618      	mov	r0, r3
 8005492:	370c      	adds	r7, #12
 8005494:	46bd      	mov	sp, r7
 8005496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549a:	4770      	bx	lr
 800549c:	20007194 	.word	0x20007194

080054a0 <_exit>:

void _exit (int status)
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b082      	sub	sp, #8
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80054a8:	f04f 31ff 	mov.w	r1, #4294967295
 80054ac:	6878      	ldr	r0, [r7, #4]
 80054ae:	f7ff ffe5 	bl	800547c <_kill>
	while (1) {}		/* Make sure we hang here */
 80054b2:	e7fe      	b.n	80054b2 <_exit+0x12>

080054b4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b086      	sub	sp, #24
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	60f8      	str	r0, [r7, #12]
 80054bc:	60b9      	str	r1, [r7, #8]
 80054be:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80054c0:	2300      	movs	r3, #0
 80054c2:	617b      	str	r3, [r7, #20]
 80054c4:	e00a      	b.n	80054dc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80054c6:	f3af 8000 	nop.w
 80054ca:	4601      	mov	r1, r0
 80054cc:	68bb      	ldr	r3, [r7, #8]
 80054ce:	1c5a      	adds	r2, r3, #1
 80054d0:	60ba      	str	r2, [r7, #8]
 80054d2:	b2ca      	uxtb	r2, r1
 80054d4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80054d6:	697b      	ldr	r3, [r7, #20]
 80054d8:	3301      	adds	r3, #1
 80054da:	617b      	str	r3, [r7, #20]
 80054dc:	697a      	ldr	r2, [r7, #20]
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	429a      	cmp	r2, r3
 80054e2:	dbf0      	blt.n	80054c6 <_read+0x12>
	}

return len;
 80054e4:	687b      	ldr	r3, [r7, #4]
}
 80054e6:	4618      	mov	r0, r3
 80054e8:	3718      	adds	r7, #24
 80054ea:	46bd      	mov	sp, r7
 80054ec:	bd80      	pop	{r7, pc}

080054ee <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80054ee:	b580      	push	{r7, lr}
 80054f0:	b086      	sub	sp, #24
 80054f2:	af00      	add	r7, sp, #0
 80054f4:	60f8      	str	r0, [r7, #12]
 80054f6:	60b9      	str	r1, [r7, #8]
 80054f8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80054fa:	2300      	movs	r3, #0
 80054fc:	617b      	str	r3, [r7, #20]
 80054fe:	e009      	b.n	8005514 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8005500:	68bb      	ldr	r3, [r7, #8]
 8005502:	1c5a      	adds	r2, r3, #1
 8005504:	60ba      	str	r2, [r7, #8]
 8005506:	781b      	ldrb	r3, [r3, #0]
 8005508:	4618      	mov	r0, r3
 800550a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800550e:	697b      	ldr	r3, [r7, #20]
 8005510:	3301      	adds	r3, #1
 8005512:	617b      	str	r3, [r7, #20]
 8005514:	697a      	ldr	r2, [r7, #20]
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	429a      	cmp	r2, r3
 800551a:	dbf1      	blt.n	8005500 <_write+0x12>
	}
	return len;
 800551c:	687b      	ldr	r3, [r7, #4]
}
 800551e:	4618      	mov	r0, r3
 8005520:	3718      	adds	r7, #24
 8005522:	46bd      	mov	sp, r7
 8005524:	bd80      	pop	{r7, pc}

08005526 <_close>:

int _close(int file)
{
 8005526:	b480      	push	{r7}
 8005528:	b083      	sub	sp, #12
 800552a:	af00      	add	r7, sp, #0
 800552c:	6078      	str	r0, [r7, #4]
	return -1;
 800552e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005532:	4618      	mov	r0, r3
 8005534:	370c      	adds	r7, #12
 8005536:	46bd      	mov	sp, r7
 8005538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553c:	4770      	bx	lr

0800553e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800553e:	b480      	push	{r7}
 8005540:	b083      	sub	sp, #12
 8005542:	af00      	add	r7, sp, #0
 8005544:	6078      	str	r0, [r7, #4]
 8005546:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800554e:	605a      	str	r2, [r3, #4]
	return 0;
 8005550:	2300      	movs	r3, #0
}
 8005552:	4618      	mov	r0, r3
 8005554:	370c      	adds	r7, #12
 8005556:	46bd      	mov	sp, r7
 8005558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555c:	4770      	bx	lr

0800555e <_isatty>:

int _isatty(int file)
{
 800555e:	b480      	push	{r7}
 8005560:	b083      	sub	sp, #12
 8005562:	af00      	add	r7, sp, #0
 8005564:	6078      	str	r0, [r7, #4]
	return 1;
 8005566:	2301      	movs	r3, #1
}
 8005568:	4618      	mov	r0, r3
 800556a:	370c      	adds	r7, #12
 800556c:	46bd      	mov	sp, r7
 800556e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005572:	4770      	bx	lr

08005574 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005574:	b480      	push	{r7}
 8005576:	b085      	sub	sp, #20
 8005578:	af00      	add	r7, sp, #0
 800557a:	60f8      	str	r0, [r7, #12]
 800557c:	60b9      	str	r1, [r7, #8]
 800557e:	607a      	str	r2, [r7, #4]
	return 0;
 8005580:	2300      	movs	r3, #0
}
 8005582:	4618      	mov	r0, r3
 8005584:	3714      	adds	r7, #20
 8005586:	46bd      	mov	sp, r7
 8005588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558c:	4770      	bx	lr
	...

08005590 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005590:	b480      	push	{r7}
 8005592:	b087      	sub	sp, #28
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005598:	4a14      	ldr	r2, [pc, #80]	; (80055ec <_sbrk+0x5c>)
 800559a:	4b15      	ldr	r3, [pc, #84]	; (80055f0 <_sbrk+0x60>)
 800559c:	1ad3      	subs	r3, r2, r3
 800559e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80055a0:	697b      	ldr	r3, [r7, #20]
 80055a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80055a4:	4b13      	ldr	r3, [pc, #76]	; (80055f4 <_sbrk+0x64>)
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d102      	bne.n	80055b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80055ac:	4b11      	ldr	r3, [pc, #68]	; (80055f4 <_sbrk+0x64>)
 80055ae:	4a12      	ldr	r2, [pc, #72]	; (80055f8 <_sbrk+0x68>)
 80055b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80055b2:	4b10      	ldr	r3, [pc, #64]	; (80055f4 <_sbrk+0x64>)
 80055b4:	681a      	ldr	r2, [r3, #0]
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	4413      	add	r3, r2
 80055ba:	693a      	ldr	r2, [r7, #16]
 80055bc:	429a      	cmp	r2, r3
 80055be:	d205      	bcs.n	80055cc <_sbrk+0x3c>
  {
    errno = ENOMEM;
 80055c0:	4b0e      	ldr	r3, [pc, #56]	; (80055fc <_sbrk+0x6c>)
 80055c2:	220c      	movs	r2, #12
 80055c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80055c6:	f04f 33ff 	mov.w	r3, #4294967295
 80055ca:	e009      	b.n	80055e0 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 80055cc:	4b09      	ldr	r3, [pc, #36]	; (80055f4 <_sbrk+0x64>)
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80055d2:	4b08      	ldr	r3, [pc, #32]	; (80055f4 <_sbrk+0x64>)
 80055d4:	681a      	ldr	r2, [r3, #0]
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	4413      	add	r3, r2
 80055da:	4a06      	ldr	r2, [pc, #24]	; (80055f4 <_sbrk+0x64>)
 80055dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80055de:	68fb      	ldr	r3, [r7, #12]
}
 80055e0:	4618      	mov	r0, r3
 80055e2:	371c      	adds	r7, #28
 80055e4:	46bd      	mov	sp, r7
 80055e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ea:	4770      	bx	lr
 80055ec:	20020000 	.word	0x20020000
 80055f0:	00004000 	.word	0x00004000
 80055f4:	20000398 	.word	0x20000398
 80055f8:	200071a8 	.word	0x200071a8
 80055fc:	20007194 	.word	0x20007194

08005600 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005600:	b480      	push	{r7}
 8005602:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005604:	4b08      	ldr	r3, [pc, #32]	; (8005628 <SystemInit+0x28>)
 8005606:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800560a:	4a07      	ldr	r2, [pc, #28]	; (8005628 <SystemInit+0x28>)
 800560c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005610:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005614:	4b04      	ldr	r3, [pc, #16]	; (8005628 <SystemInit+0x28>)
 8005616:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800561a:	609a      	str	r2, [r3, #8]
#endif
}
 800561c:	bf00      	nop
 800561e:	46bd      	mov	sp, r7
 8005620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005624:	4770      	bx	lr
 8005626:	bf00      	nop
 8005628:	e000ed00 	.word	0xe000ed00

0800562c <sensors_Reset>:
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
}
//--------------------------------------------------
uint8_t sensors_Reset(void)
{
 800562c:	b580      	push	{r7, lr}
 800562e:	b082      	sub	sp, #8
 8005630:	af00      	add	r7, sp, #0
	uint16_t status;

	SET_LOW;					//низкий уровень
 8005632:	4b13      	ldr	r3, [pc, #76]	; (8005680 <sensors_Reset+0x54>)
 8005634:	695b      	ldr	r3, [r3, #20]
 8005636:	4a12      	ldr	r2, [pc, #72]	; (8005680 <sensors_Reset+0x54>)
 8005638:	f023 0301 	bic.w	r3, r3, #1
 800563c:	6153      	str	r3, [r2, #20]
	delay_micros(480);			//задержка как минимум на 480 микросекунд
 800563e:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 8005642:	f7fc fdbd 	bl	80021c0 <delay_micros>
	SET_HIGH;					//высокий уровень
 8005646:	4b0e      	ldr	r3, [pc, #56]	; (8005680 <sensors_Reset+0x54>)
 8005648:	695b      	ldr	r3, [r3, #20]
 800564a:	4a0d      	ldr	r2, [pc, #52]	; (8005680 <sensors_Reset+0x54>)
 800564c:	f043 0301 	orr.w	r3, r3, #1
 8005650:	6153      	str	r3, [r2, #20]
	delay_micros(60);			//задержка как минимум на 60 микросекунд
 8005652:	203c      	movs	r0, #60	; 0x3c
 8005654:	f7fc fdb4 	bl	80021c0 <delay_micros>
	status = GET_STATUS_PIN;	//провер¤ем уровень
 8005658:	4b09      	ldr	r3, [pc, #36]	; (8005680 <sensors_Reset+0x54>)
 800565a:	691b      	ldr	r3, [r3, #16]
 800565c:	b29b      	uxth	r3, r3
 800565e:	f003 0301 	and.w	r3, r3, #1
 8005662:	80fb      	strh	r3, [r7, #6]
	delay_micros(480);			//задержка как минимум на 480 микросекунд
 8005664:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 8005668:	f7fc fdaa 	bl	80021c0 <delay_micros>
  	  	  	  	  	  	  		//(на всякий случай подождЄм побольше, так как могут быть неточности в задержке)
	return (status ? 1 : 0);	//вернЄм результат
 800566c:	88fb      	ldrh	r3, [r7, #6]
 800566e:	2b00      	cmp	r3, #0
 8005670:	bf14      	ite	ne
 8005672:	2301      	movne	r3, #1
 8005674:	2300      	moveq	r3, #0
 8005676:	b2db      	uxtb	r3, r3
}
 8005678:	4618      	mov	r0, r3
 800567a:	3708      	adds	r7, #8
 800567c:	46bd      	mov	sp, r7
 800567e:	bd80      	pop	{r7, pc}
 8005680:	40020c00 	.word	0x40020c00

08005684 <sensors_ReadBit>:
//----------------------------------------------------------
uint8_t sensors_ReadBit(void)
{
 8005684:	b580      	push	{r7, lr}
 8005686:	b082      	sub	sp, #8
 8005688:	af00      	add	r7, sp, #0
	uint8_t bit = 0;
 800568a:	2300      	movs	r3, #0
 800568c:	71fb      	strb	r3, [r7, #7]

	SET_LOW;							//низкий уровень
 800568e:	4b12      	ldr	r3, [pc, #72]	; (80056d8 <sensors_ReadBit+0x54>)
 8005690:	695b      	ldr	r3, [r3, #20]
 8005692:	4a11      	ldr	r2, [pc, #68]	; (80056d8 <sensors_ReadBit+0x54>)
 8005694:	f023 0301 	bic.w	r3, r3, #1
 8005698:	6153      	str	r3, [r2, #20]
	delay_micros(1);
 800569a:	2001      	movs	r0, #1
 800569c:	f7fc fd90 	bl	80021c0 <delay_micros>
	SET_HIGH;							//высокий уровень
 80056a0:	4b0d      	ldr	r3, [pc, #52]	; (80056d8 <sensors_ReadBit+0x54>)
 80056a2:	695b      	ldr	r3, [r3, #20]
 80056a4:	4a0c      	ldr	r2, [pc, #48]	; (80056d8 <sensors_ReadBit+0x54>)
 80056a6:	f043 0301 	orr.w	r3, r3, #1
 80056aa:	6153      	str	r3, [r2, #20]
	delay_micros(14);
 80056ac:	200e      	movs	r0, #14
 80056ae:	f7fc fd87 	bl	80021c0 <delay_micros>
	bit = (GET_STATUS_PIN ? 1 : 0);		//провер¤ем уровень
 80056b2:	4b09      	ldr	r3, [pc, #36]	; (80056d8 <sensors_ReadBit+0x54>)
 80056b4:	691b      	ldr	r3, [r3, #16]
 80056b6:	f003 0301 	and.w	r3, r3, #1
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	bf14      	ite	ne
 80056be:	2301      	movne	r3, #1
 80056c0:	2300      	moveq	r3, #0
 80056c2:	b2db      	uxtb	r3, r3
 80056c4:	71fb      	strb	r3, [r7, #7]
	delay_micros(45);
 80056c6:	202d      	movs	r0, #45	; 0x2d
 80056c8:	f7fc fd7a 	bl	80021c0 <delay_micros>

	return bit;
 80056cc:	79fb      	ldrb	r3, [r7, #7]
}
 80056ce:	4618      	mov	r0, r3
 80056d0:	3708      	adds	r7, #8
 80056d2:	46bd      	mov	sp, r7
 80056d4:	bd80      	pop	{r7, pc}
 80056d6:	bf00      	nop
 80056d8:	40020c00 	.word	0x40020c00

080056dc <sensors_ReadByte>:
//-----------------------------------------------
uint8_t sensors_ReadByte(void)
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	b082      	sub	sp, #8
 80056e0:	af00      	add	r7, sp, #0
	uint8_t data = 0;
 80056e2:	2300      	movs	r3, #0
 80056e4:	71fb      	strb	r3, [r7, #7]

	for (uint8_t i = 0; i <= 7; i++)
 80056e6:	2300      	movs	r3, #0
 80056e8:	71bb      	strb	r3, [r7, #6]
 80056ea:	e00d      	b.n	8005708 <sensors_ReadByte+0x2c>
		data += sensors_ReadBit() << i;
 80056ec:	f7ff ffca 	bl	8005684 <sensors_ReadBit>
 80056f0:	4603      	mov	r3, r0
 80056f2:	461a      	mov	r2, r3
 80056f4:	79bb      	ldrb	r3, [r7, #6]
 80056f6:	fa02 f303 	lsl.w	r3, r2, r3
 80056fa:	b2da      	uxtb	r2, r3
 80056fc:	79fb      	ldrb	r3, [r7, #7]
 80056fe:	4413      	add	r3, r2
 8005700:	71fb      	strb	r3, [r7, #7]
	for (uint8_t i = 0; i <= 7; i++)
 8005702:	79bb      	ldrb	r3, [r7, #6]
 8005704:	3301      	adds	r3, #1
 8005706:	71bb      	strb	r3, [r7, #6]
 8005708:	79bb      	ldrb	r3, [r7, #6]
 800570a:	2b07      	cmp	r3, #7
 800570c:	d9ee      	bls.n	80056ec <sensors_ReadByte+0x10>

	return data;
 800570e:	79fb      	ldrb	r3, [r7, #7]
}
 8005710:	4618      	mov	r0, r3
 8005712:	3708      	adds	r7, #8
 8005714:	46bd      	mov	sp, r7
 8005716:	bd80      	pop	{r7, pc}

08005718 <sensors_WriteBit>:
//-----------------------------------------------
void sensors_WriteBit(uint8_t bit)
{
 8005718:	b580      	push	{r7, lr}
 800571a:	b082      	sub	sp, #8
 800571c:	af00      	add	r7, sp, #0
 800571e:	4603      	mov	r3, r0
 8005720:	71fb      	strb	r3, [r7, #7]
	SET_LOW;
 8005722:	4b11      	ldr	r3, [pc, #68]	; (8005768 <sensors_WriteBit+0x50>)
 8005724:	695b      	ldr	r3, [r3, #20]
 8005726:	4a10      	ldr	r2, [pc, #64]	; (8005768 <sensors_WriteBit+0x50>)
 8005728:	f023 0301 	bic.w	r3, r3, #1
 800572c:	6153      	str	r3, [r2, #20]
	delay_micros(bit ? 1 : 60);
 800572e:	79fb      	ldrb	r3, [r7, #7]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d001      	beq.n	8005738 <sensors_WriteBit+0x20>
 8005734:	2301      	movs	r3, #1
 8005736:	e000      	b.n	800573a <sensors_WriteBit+0x22>
 8005738:	233c      	movs	r3, #60	; 0x3c
 800573a:	4618      	mov	r0, r3
 800573c:	f7fc fd40 	bl	80021c0 <delay_micros>
	SET_HIGH;
 8005740:	4b09      	ldr	r3, [pc, #36]	; (8005768 <sensors_WriteBit+0x50>)
 8005742:	695b      	ldr	r3, [r3, #20]
 8005744:	4a08      	ldr	r2, [pc, #32]	; (8005768 <sensors_WriteBit+0x50>)
 8005746:	f043 0301 	orr.w	r3, r3, #1
 800574a:	6153      	str	r3, [r2, #20]
	delay_micros(bit ? 60 : 1);
 800574c:	79fb      	ldrb	r3, [r7, #7]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d001      	beq.n	8005756 <sensors_WriteBit+0x3e>
 8005752:	233c      	movs	r3, #60	; 0x3c
 8005754:	e000      	b.n	8005758 <sensors_WriteBit+0x40>
 8005756:	2301      	movs	r3, #1
 8005758:	4618      	mov	r0, r3
 800575a:	f7fc fd31 	bl	80021c0 <delay_micros>
}
 800575e:	bf00      	nop
 8005760:	3708      	adds	r7, #8
 8005762:	46bd      	mov	sp, r7
 8005764:	bd80      	pop	{r7, pc}
 8005766:	bf00      	nop
 8005768:	40020c00 	.word	0x40020c00

0800576c <sensors_WriteByte>:
//-----------------------------------------------
void sensors_WriteByte(uint8_t dt)
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b084      	sub	sp, #16
 8005770:	af00      	add	r7, sp, #0
 8005772:	4603      	mov	r3, r0
 8005774:	71fb      	strb	r3, [r7, #7]
	for (uint8_t i = 0; i < 8; i++)
 8005776:	2300      	movs	r3, #0
 8005778:	73fb      	strb	r3, [r7, #15]
 800577a:	e010      	b.n	800579e <sensors_WriteByte+0x32>
	{
		sensors_WriteBit(dt >> i & 1);
 800577c:	79fa      	ldrb	r2, [r7, #7]
 800577e:	7bfb      	ldrb	r3, [r7, #15]
 8005780:	fa42 f303 	asr.w	r3, r2, r3
 8005784:	b2db      	uxtb	r3, r3
 8005786:	f003 0301 	and.w	r3, r3, #1
 800578a:	b2db      	uxtb	r3, r3
 800578c:	4618      	mov	r0, r3
 800578e:	f7ff ffc3 	bl	8005718 <sensors_WriteBit>
		//Delay Protection
		delay_micros(5);
 8005792:	2005      	movs	r0, #5
 8005794:	f7fc fd14 	bl	80021c0 <delay_micros>
	for (uint8_t i = 0; i < 8; i++)
 8005798:	7bfb      	ldrb	r3, [r7, #15]
 800579a:	3301      	adds	r3, #1
 800579c:	73fb      	strb	r3, [r7, #15]
 800579e:	7bfb      	ldrb	r3, [r7, #15]
 80057a0:	2b07      	cmp	r3, #7
 80057a2:	d9eb      	bls.n	800577c <sensors_WriteByte+0x10>
	}
}
 80057a4:	bf00      	nop
 80057a6:	bf00      	nop
 80057a8:	3710      	adds	r7, #16
 80057aa:	46bd      	mov	sp, r7
 80057ac:	bd80      	pop	{r7, pc}
	...

080057b0 <sensors_SearchRom>:
//-----------------------------------------------
uint8_t sensors_SearchRom(uint8_t *Addr)
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b086      	sub	sp, #24
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
	uint8_t last_zero, rom_byte_number, search_result;
	uint8_t id_bit, cmp_id_bit;
	uint8_t rom_byte_mask, search_direction;

	//проинициализируем переменные
	id_bit_number = 1;
 80057b8:	2301      	movs	r3, #1
 80057ba:	75fb      	strb	r3, [r7, #23]
	last_zero = 0;
 80057bc:	2300      	movs	r3, #0
 80057be:	75bb      	strb	r3, [r7, #22]
	rom_byte_number = 0;
 80057c0:	2300      	movs	r3, #0
 80057c2:	757b      	strb	r3, [r7, #21]
	rom_byte_mask = 1;
 80057c4:	2301      	movs	r3, #1
 80057c6:	74fb      	strb	r3, [r7, #19]
	search_result = 0;
 80057c8:	2300      	movs	r3, #0
 80057ca:	753b      	strb	r3, [r7, #20]
	if (!LastDeviceFlag)
 80057cc:	4b55      	ldr	r3, [pc, #340]	; (8005924 <sensors_SearchRom+0x174>)
 80057ce:	781b      	ldrb	r3, [r3, #0]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d104      	bne.n	80057de <sensors_SearchRom+0x2e>
	{
		sensors_Reset();
 80057d4:	f7ff ff2a 	bl	800562c <sensors_Reset>
		sensors_WriteByte(0xF0);
 80057d8:	20f0      	movs	r0, #240	; 0xf0
 80057da:	f7ff ffc7 	bl	800576c <sensors_WriteByte>
	}
	do
	{
		id_bit = sensors_ReadBit();
 80057de:	f7ff ff51 	bl	8005684 <sensors_ReadBit>
 80057e2:	4603      	mov	r3, r0
 80057e4:	72fb      	strb	r3, [r7, #11]
		cmp_id_bit = sensors_ReadBit();
 80057e6:	f7ff ff4d 	bl	8005684 <sensors_ReadBit>
 80057ea:	4603      	mov	r3, r0
 80057ec:	72bb      	strb	r3, [r7, #10]
		if ((id_bit == 1) && (cmp_id_bit == 1))
 80057ee:	7afb      	ldrb	r3, [r7, #11]
 80057f0:	2b01      	cmp	r3, #1
 80057f2:	d102      	bne.n	80057fa <sensors_SearchRom+0x4a>
 80057f4:	7abb      	ldrb	r3, [r7, #10]
 80057f6:	2b01      	cmp	r3, #1
 80057f8:	d05c      	beq.n	80058b4 <sensors_SearchRom+0x104>
			break;
		else
		{
			if (id_bit != cmp_id_bit)
 80057fa:	7afa      	ldrb	r2, [r7, #11]
 80057fc:	7abb      	ldrb	r3, [r7, #10]
 80057fe:	429a      	cmp	r2, r3
 8005800:	d002      	beq.n	8005808 <sensors_SearchRom+0x58>
				search_direction = id_bit; // bit write value for search
 8005802:	7afb      	ldrb	r3, [r7, #11]
 8005804:	74bb      	strb	r3, [r7, #18]
 8005806:	e025      	b.n	8005854 <sensors_SearchRom+0xa4>
			else
			{
				if (id_bit_number < LastDiscrepancy)
 8005808:	4b47      	ldr	r3, [pc, #284]	; (8005928 <sensors_SearchRom+0x178>)
 800580a:	781b      	ldrb	r3, [r3, #0]
 800580c:	7dfa      	ldrb	r2, [r7, #23]
 800580e:	429a      	cmp	r2, r3
 8005810:	d20c      	bcs.n	800582c <sensors_SearchRom+0x7c>
					search_direction = ((ROM_NO[rom_byte_number] & rom_byte_mask) > 0);
 8005812:	7d7b      	ldrb	r3, [r7, #21]
 8005814:	4a45      	ldr	r2, [pc, #276]	; (800592c <sensors_SearchRom+0x17c>)
 8005816:	5cd2      	ldrb	r2, [r2, r3]
 8005818:	7cfb      	ldrb	r3, [r7, #19]
 800581a:	4013      	ands	r3, r2
 800581c:	b2db      	uxtb	r3, r3
 800581e:	2b00      	cmp	r3, #0
 8005820:	bf14      	ite	ne
 8005822:	2301      	movne	r3, #1
 8005824:	2300      	moveq	r3, #0
 8005826:	b2db      	uxtb	r3, r3
 8005828:	74bb      	strb	r3, [r7, #18]
 800582a:	e008      	b.n	800583e <sensors_SearchRom+0x8e>
				else
					search_direction = (id_bit_number == LastDiscrepancy);
 800582c:	4b3e      	ldr	r3, [pc, #248]	; (8005928 <sensors_SearchRom+0x178>)
 800582e:	781b      	ldrb	r3, [r3, #0]
 8005830:	7dfa      	ldrb	r2, [r7, #23]
 8005832:	429a      	cmp	r2, r3
 8005834:	bf0c      	ite	eq
 8005836:	2301      	moveq	r3, #1
 8005838:	2300      	movne	r3, #0
 800583a:	b2db      	uxtb	r3, r3
 800583c:	74bb      	strb	r3, [r7, #18]
				if (search_direction == 0)
 800583e:	7cbb      	ldrb	r3, [r7, #18]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d107      	bne.n	8005854 <sensors_SearchRom+0xa4>
				{
					last_zero = id_bit_number;
 8005844:	7dfb      	ldrb	r3, [r7, #23]
 8005846:	75bb      	strb	r3, [r7, #22]
					if (last_zero < 9)
 8005848:	7dbb      	ldrb	r3, [r7, #22]
 800584a:	2b08      	cmp	r3, #8
 800584c:	d802      	bhi.n	8005854 <sensors_SearchRom+0xa4>
					LastFamilyDiscrepancy = last_zero;
 800584e:	4a38      	ldr	r2, [pc, #224]	; (8005930 <sensors_SearchRom+0x180>)
 8005850:	7dbb      	ldrb	r3, [r7, #22]
 8005852:	7013      	strb	r3, [r2, #0]
				}
			}
			if (search_direction == 1)
 8005854:	7cbb      	ldrb	r3, [r7, #18]
 8005856:	2b01      	cmp	r3, #1
 8005858:	d109      	bne.n	800586e <sensors_SearchRom+0xbe>
				ROM_NO[rom_byte_number] |= rom_byte_mask;
 800585a:	7d7b      	ldrb	r3, [r7, #21]
 800585c:	4a33      	ldr	r2, [pc, #204]	; (800592c <sensors_SearchRom+0x17c>)
 800585e:	5cd1      	ldrb	r1, [r2, r3]
 8005860:	7d7b      	ldrb	r3, [r7, #21]
 8005862:	7cfa      	ldrb	r2, [r7, #19]
 8005864:	430a      	orrs	r2, r1
 8005866:	b2d1      	uxtb	r1, r2
 8005868:	4a30      	ldr	r2, [pc, #192]	; (800592c <sensors_SearchRom+0x17c>)
 800586a:	54d1      	strb	r1, [r2, r3]
 800586c:	e00d      	b.n	800588a <sensors_SearchRom+0xda>
			else
				ROM_NO[rom_byte_number] &= ~rom_byte_mask;
 800586e:	7d7b      	ldrb	r3, [r7, #21]
 8005870:	4a2e      	ldr	r2, [pc, #184]	; (800592c <sensors_SearchRom+0x17c>)
 8005872:	5cd3      	ldrb	r3, [r2, r3]
 8005874:	b25a      	sxtb	r2, r3
 8005876:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800587a:	43db      	mvns	r3, r3
 800587c:	b25b      	sxtb	r3, r3
 800587e:	4013      	ands	r3, r2
 8005880:	b25a      	sxtb	r2, r3
 8005882:	7d7b      	ldrb	r3, [r7, #21]
 8005884:	b2d1      	uxtb	r1, r2
 8005886:	4a29      	ldr	r2, [pc, #164]	; (800592c <sensors_SearchRom+0x17c>)
 8005888:	54d1      	strb	r1, [r2, r3]
			sensors_WriteBit(search_direction);
 800588a:	7cbb      	ldrb	r3, [r7, #18]
 800588c:	4618      	mov	r0, r3
 800588e:	f7ff ff43 	bl	8005718 <sensors_WriteBit>
			id_bit_number++;
 8005892:	7dfb      	ldrb	r3, [r7, #23]
 8005894:	3301      	adds	r3, #1
 8005896:	75fb      	strb	r3, [r7, #23]
			rom_byte_mask <<= 1;
 8005898:	7cfb      	ldrb	r3, [r7, #19]
 800589a:	005b      	lsls	r3, r3, #1
 800589c:	74fb      	strb	r3, [r7, #19]
			if (rom_byte_mask == 0)
 800589e:	7cfb      	ldrb	r3, [r7, #19]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d104      	bne.n	80058ae <sensors_SearchRom+0xfe>
			{
				rom_byte_number++;
 80058a4:	7d7b      	ldrb	r3, [r7, #21]
 80058a6:	3301      	adds	r3, #1
 80058a8:	757b      	strb	r3, [r7, #21]
				rom_byte_mask = 1;
 80058aa:	2301      	movs	r3, #1
 80058ac:	74fb      	strb	r3, [r7, #19]
			}
		}
	} while(rom_byte_number < 8);		//считываем байты с 0 до 7 в цикле
 80058ae:	7d7b      	ldrb	r3, [r7, #21]
 80058b0:	2b07      	cmp	r3, #7
 80058b2:	d994      	bls.n	80057de <sensors_SearchRom+0x2e>

	if (!(id_bit_number < 65))
 80058b4:	7dfb      	ldrb	r3, [r7, #23]
 80058b6:	2b40      	cmp	r3, #64	; 0x40
 80058b8:	d90b      	bls.n	80058d2 <sensors_SearchRom+0x122>
	{
		// search successful so set LastDiscrepancy,LastDeviceFlag,search_result
		LastDiscrepancy = last_zero;
 80058ba:	4a1b      	ldr	r2, [pc, #108]	; (8005928 <sensors_SearchRom+0x178>)
 80058bc:	7dbb      	ldrb	r3, [r7, #22]
 80058be:	7013      	strb	r3, [r2, #0]
		// check for last device
		if (LastDiscrepancy == 0)
 80058c0:	4b19      	ldr	r3, [pc, #100]	; (8005928 <sensors_SearchRom+0x178>)
 80058c2:	781b      	ldrb	r3, [r3, #0]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d102      	bne.n	80058ce <sensors_SearchRom+0x11e>
			LastDeviceFlag = 1;
 80058c8:	4b16      	ldr	r3, [pc, #88]	; (8005924 <sensors_SearchRom+0x174>)
 80058ca:	2201      	movs	r2, #1
 80058cc:	701a      	strb	r2, [r3, #0]
		search_result = 1;	
 80058ce:	2301      	movs	r3, #1
 80058d0:	753b      	strb	r3, [r7, #20]
	}
	if (!search_result || !ROM_NO[0])
 80058d2:	7d3b      	ldrb	r3, [r7, #20]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d003      	beq.n	80058e0 <sensors_SearchRom+0x130>
 80058d8:	4b14      	ldr	r3, [pc, #80]	; (800592c <sensors_SearchRom+0x17c>)
 80058da:	781b      	ldrb	r3, [r3, #0]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d10b      	bne.n	80058f8 <sensors_SearchRom+0x148>
	{
		LastDiscrepancy = 0;
 80058e0:	4b11      	ldr	r3, [pc, #68]	; (8005928 <sensors_SearchRom+0x178>)
 80058e2:	2200      	movs	r2, #0
 80058e4:	701a      	strb	r2, [r3, #0]
		LastDeviceFlag = 0;
 80058e6:	4b0f      	ldr	r3, [pc, #60]	; (8005924 <sensors_SearchRom+0x174>)
 80058e8:	2200      	movs	r2, #0
 80058ea:	701a      	strb	r2, [r3, #0]
		LastFamilyDiscrepancy = 0;
 80058ec:	4b10      	ldr	r3, [pc, #64]	; (8005930 <sensors_SearchRom+0x180>)
 80058ee:	2200      	movs	r2, #0
 80058f0:	701a      	strb	r2, [r3, #0]
		search_result = 0;
 80058f2:	2300      	movs	r3, #0
 80058f4:	753b      	strb	r3, [r7, #20]
 80058f6:	e010      	b.n	800591a <sensors_SearchRom+0x16a>
	}
	else
	{
		for (int i = 0; i < 8; i++)
 80058f8:	2300      	movs	r3, #0
 80058fa:	60fb      	str	r3, [r7, #12]
 80058fc:	e00a      	b.n	8005914 <sensors_SearchRom+0x164>
			Addr[i] = ROM_NO[i];
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	687a      	ldr	r2, [r7, #4]
 8005902:	4413      	add	r3, r2
 8005904:	4909      	ldr	r1, [pc, #36]	; (800592c <sensors_SearchRom+0x17c>)
 8005906:	68fa      	ldr	r2, [r7, #12]
 8005908:	440a      	add	r2, r1
 800590a:	7812      	ldrb	r2, [r2, #0]
 800590c:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < 8; i++)
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	3301      	adds	r3, #1
 8005912:	60fb      	str	r3, [r7, #12]
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	2b07      	cmp	r3, #7
 8005918:	ddf1      	ble.n	80058fe <sensors_SearchRom+0x14e>
	}
	return search_result;
 800591a:	7d3b      	ldrb	r3, [r7, #20]
}
 800591c:	4618      	mov	r0, r3
 800591e:	3718      	adds	r7, #24
 8005920:	46bd      	mov	sp, r7
 8005922:	bd80      	pop	{r7, pc}
 8005924:	20000bf9 	.word	0x20000bf9
 8005928:	20000bfa 	.word	0x20000bfa
 800592c:	20000bf0 	.word	0x20000bf0
 8005930:	20000bf8 	.word	0x20000bf8

08005934 <sensors_init>:
//-----------------------------------------------
uint8_t sensors_init(uint8_t mode)
{
 8005934:	b580      	push	{r7, lr}
 8005936:	b086      	sub	sp, #24
 8005938:	af00      	add	r7, sp, #0
 800593a:	4603      	mov	r3, r0
 800593c:	71fb      	strb	r3, [r7, #7]
	int i = 0, j=0;
 800593e:	2300      	movs	r3, #0
 8005940:	617b      	str	r3, [r7, #20]
 8005942:	2300      	movs	r3, #0
 8005944:	613b      	str	r3, [r7, #16]
	uint8_t dt[8];
	if(mode == SKIP_ROM)
 8005946:	79fb      	ldrb	r3, [r7, #7]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d116      	bne.n	800597a <sensors_init+0x46>
	{
		if(sensors_Reset())
 800594c:	f7ff fe6e 	bl	800562c <sensors_Reset>
 8005950:	4603      	mov	r3, r0
 8005952:	2b00      	cmp	r3, #0
 8005954:	d001      	beq.n	800595a <sensors_init+0x26>
			return 1;
 8005956:	2301      	movs	r3, #1
 8005958:	e06b      	b.n	8005a32 <sensors_init+0xfe>
		//SKIP ROM
		sensors_WriteByte(0xCC);
 800595a:	20cc      	movs	r0, #204	; 0xcc
 800595c:	f7ff ff06 	bl	800576c <sensors_WriteByte>
		//WRITE SCRATCHPAD
		sensors_WriteByte(0x4E);
 8005960:	204e      	movs	r0, #78	; 0x4e
 8005962:	f7ff ff03 	bl	800576c <sensors_WriteByte>
		//TH REGISTER 100 градусов
		sensors_WriteByte(0x64);
 8005966:	2064      	movs	r0, #100	; 0x64
 8005968:	f7ff ff00 	bl	800576c <sensors_WriteByte>
		//TL REGISTER - 30 градусов
		sensors_WriteByte(0x9E);
 800596c:	209e      	movs	r0, #158	; 0x9e
 800596e:	f7ff fefd 	bl	800576c <sensors_WriteByte>
		//Resolution 12 bit
		sensors_WriteByte(RESOLUTION_12BIT);
 8005972:	207f      	movs	r0, #127	; 0x7f
 8005974:	f7ff fefa 	bl	800576c <sensors_WriteByte>
 8005978:	e05a      	b.n	8005a30 <sensors_init+0xfc>
	}
	else
	{
		for(i = 1; i <= 8; i++)
 800597a:	2301      	movs	r3, #1
 800597c:	617b      	str	r3, [r7, #20]
 800597e:	e01c      	b.n	80059ba <sensors_init+0x86>
		{
			if(sensors_SearchRom(dt))
 8005980:	f107 0308 	add.w	r3, r7, #8
 8005984:	4618      	mov	r0, r3
 8005986:	f7ff ff13 	bl	80057b0 <sensors_SearchRom>
 800598a:	4603      	mov	r3, r0
 800598c:	2b00      	cmp	r3, #0
 800598e:	d018      	beq.n	80059c2 <sensors_init+0x8e>
			{
				Dev_Cnt++;
 8005990:	4b2a      	ldr	r3, [pc, #168]	; (8005a3c <sensors_init+0x108>)
 8005992:	781b      	ldrb	r3, [r3, #0]
 8005994:	3301      	adds	r3, #1
 8005996:	b2da      	uxtb	r2, r3
 8005998:	4b28      	ldr	r3, [pc, #160]	; (8005a3c <sensors_init+0x108>)
 800599a:	701a      	strb	r2, [r3, #0]
				memcpy(Dev_ID[Dev_Cnt-1], dt, sizeof(dt));
 800599c:	4b27      	ldr	r3, [pc, #156]	; (8005a3c <sensors_init+0x108>)
 800599e:	781b      	ldrb	r3, [r3, #0]
 80059a0:	3b01      	subs	r3, #1
 80059a2:	00db      	lsls	r3, r3, #3
 80059a4:	4a26      	ldr	r2, [pc, #152]	; (8005a40 <sensors_init+0x10c>)
 80059a6:	4413      	add	r3, r2
 80059a8:	461a      	mov	r2, r3
 80059aa:	f107 0308 	add.w	r3, r7, #8
 80059ae:	cb03      	ldmia	r3!, {r0, r1}
 80059b0:	6010      	str	r0, [r2, #0]
 80059b2:	6051      	str	r1, [r2, #4]
		for(i = 1; i <= 8; i++)
 80059b4:	697b      	ldr	r3, [r7, #20]
 80059b6:	3301      	adds	r3, #1
 80059b8:	617b      	str	r3, [r7, #20]
 80059ba:	697b      	ldr	r3, [r7, #20]
 80059bc:	2b08      	cmp	r3, #8
 80059be:	dddf      	ble.n	8005980 <sensors_init+0x4c>
 80059c0:	e000      	b.n	80059c4 <sensors_init+0x90>
			}
			else break;
 80059c2:	bf00      	nop
		}
		for(i = 1; i <= Dev_Cnt; i++)
 80059c4:	2301      	movs	r3, #1
 80059c6:	617b      	str	r3, [r7, #20]
 80059c8:	e02c      	b.n	8005a24 <sensors_init+0xf0>
		{
			if(sensors_Reset())
 80059ca:	f7ff fe2f 	bl	800562c <sensors_Reset>
 80059ce:	4603      	mov	r3, r0
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d001      	beq.n	80059d8 <sensors_init+0xa4>
				return 1;
 80059d4:	2301      	movs	r3, #1
 80059d6:	e02c      	b.n	8005a32 <sensors_init+0xfe>
			//Match Rom
			sensors_WriteByte(0x55);
 80059d8:	2055      	movs	r0, #85	; 0x55
 80059da:	f7ff fec7 	bl	800576c <sensors_WriteByte>
			for(j = 0; j <= 7; j++)
 80059de:	2300      	movs	r3, #0
 80059e0:	613b      	str	r3, [r7, #16]
 80059e2:	e00d      	b.n	8005a00 <sensors_init+0xcc>
			{
				sensors_WriteByte(Dev_ID[i-1][j]);
 80059e4:	697b      	ldr	r3, [r7, #20]
 80059e6:	3b01      	subs	r3, #1
 80059e8:	4a15      	ldr	r2, [pc, #84]	; (8005a40 <sensors_init+0x10c>)
 80059ea:	00db      	lsls	r3, r3, #3
 80059ec:	441a      	add	r2, r3
 80059ee:	693b      	ldr	r3, [r7, #16]
 80059f0:	4413      	add	r3, r2
 80059f2:	781b      	ldrb	r3, [r3, #0]
 80059f4:	4618      	mov	r0, r3
 80059f6:	f7ff feb9 	bl	800576c <sensors_WriteByte>
			for(j = 0; j <= 7; j++)
 80059fa:	693b      	ldr	r3, [r7, #16]
 80059fc:	3301      	adds	r3, #1
 80059fe:	613b      	str	r3, [r7, #16]
 8005a00:	693b      	ldr	r3, [r7, #16]
 8005a02:	2b07      	cmp	r3, #7
 8005a04:	ddee      	ble.n	80059e4 <sensors_init+0xb0>
			}
			//WRITE SCRATCHPAD
			sensors_WriteByte(0x4E);
 8005a06:	204e      	movs	r0, #78	; 0x4e
 8005a08:	f7ff feb0 	bl	800576c <sensors_WriteByte>
			//TH REGISTER 100 градусов
			sensors_WriteByte(0x64);
 8005a0c:	2064      	movs	r0, #100	; 0x64
 8005a0e:	f7ff fead 	bl	800576c <sensors_WriteByte>
			//TL REGISTER - 30 градусов
			sensors_WriteByte(0x9E);
 8005a12:	209e      	movs	r0, #158	; 0x9e
 8005a14:	f7ff feaa 	bl	800576c <sensors_WriteByte>
			//Resolution 12 bit
			sensors_WriteByte(RESOLUTION_12BIT);
 8005a18:	207f      	movs	r0, #127	; 0x7f
 8005a1a:	f7ff fea7 	bl	800576c <sensors_WriteByte>
		for(i = 1; i <= Dev_Cnt; i++)
 8005a1e:	697b      	ldr	r3, [r7, #20]
 8005a20:	3301      	adds	r3, #1
 8005a22:	617b      	str	r3, [r7, #20]
 8005a24:	4b05      	ldr	r3, [pc, #20]	; (8005a3c <sensors_init+0x108>)
 8005a26:	781b      	ldrb	r3, [r3, #0]
 8005a28:	461a      	mov	r2, r3
 8005a2a:	697b      	ldr	r3, [r7, #20]
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	ddcc      	ble.n	80059ca <sensors_init+0x96>
		}
	}
	return 0;
 8005a30:	2300      	movs	r3, #0
}
 8005a32:	4618      	mov	r0, r3
 8005a34:	3718      	adds	r7, #24
 8005a36:	46bd      	mov	sp, r7
 8005a38:	bd80      	pop	{r7, pc}
 8005a3a:	bf00      	nop
 8005a3c:	20000a3c 	.word	0x20000a3c
 8005a40:	20000320 	.word	0x20000320

08005a44 <sensors_MeasureTemperCmd>:
//----------------------------------------------------------
void sensors_MeasureTemperCmd(uint8_t mode, uint8_t DevNum)
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b084      	sub	sp, #16
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	4603      	mov	r3, r0
 8005a4c:	460a      	mov	r2, r1
 8005a4e:	71fb      	strb	r3, [r7, #7]
 8005a50:	4613      	mov	r3, r2
 8005a52:	71bb      	strb	r3, [r7, #6]
	int i = 0;
 8005a54:	2300      	movs	r3, #0
 8005a56:	60fb      	str	r3, [r7, #12]
	sensors_Reset();
 8005a58:	f7ff fde8 	bl	800562c <sensors_Reset>
	if(mode == SKIP_ROM)
 8005a5c:	79fb      	ldrb	r3, [r7, #7]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d103      	bne.n	8005a6a <sensors_MeasureTemperCmd+0x26>
	{
    //SKIP ROM
		sensors_WriteByte(0xCC);
 8005a62:	20cc      	movs	r0, #204	; 0xcc
 8005a64:	f7ff fe82 	bl	800576c <sensors_WriteByte>
 8005a68:	e016      	b.n	8005a98 <sensors_MeasureTemperCmd+0x54>
	}
	else
	{
		//Match Rom
		sensors_WriteByte(0x55);
 8005a6a:	2055      	movs	r0, #85	; 0x55
 8005a6c:	f7ff fe7e 	bl	800576c <sensors_WriteByte>
		for(i = 0; i <= 7; i++)
 8005a70:	2300      	movs	r3, #0
 8005a72:	60fb      	str	r3, [r7, #12]
 8005a74:	e00d      	b.n	8005a92 <sensors_MeasureTemperCmd+0x4e>
		{
			sensors_WriteByte(Dev_ID[DevNum-1][i]);
 8005a76:	79bb      	ldrb	r3, [r7, #6]
 8005a78:	3b01      	subs	r3, #1
 8005a7a:	4a0b      	ldr	r2, [pc, #44]	; (8005aa8 <sensors_MeasureTemperCmd+0x64>)
 8005a7c:	00db      	lsls	r3, r3, #3
 8005a7e:	441a      	add	r2, r3
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	4413      	add	r3, r2
 8005a84:	781b      	ldrb	r3, [r3, #0]
 8005a86:	4618      	mov	r0, r3
 8005a88:	f7ff fe70 	bl	800576c <sensors_WriteByte>
		for(i = 0; i <= 7; i++)
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	3301      	adds	r3, #1
 8005a90:	60fb      	str	r3, [r7, #12]
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	2b07      	cmp	r3, #7
 8005a96:	ddee      	ble.n	8005a76 <sensors_MeasureTemperCmd+0x32>
		}
	}
	//CONVERT T
	sensors_WriteByte(0x44);
 8005a98:	2044      	movs	r0, #68	; 0x44
 8005a9a:	f7ff fe67 	bl	800576c <sensors_WriteByte>
}
 8005a9e:	bf00      	nop
 8005aa0:	3710      	adds	r7, #16
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	bd80      	pop	{r7, pc}
 8005aa6:	bf00      	nop
 8005aa8:	20000320 	.word	0x20000320

08005aac <sensors_ReadStratcpad>:
//----------------------------------------------------------
void sensors_ReadStratcpad(uint8_t mode, uint8_t *Data, uint8_t DevNum)
{
 8005aac:	b590      	push	{r4, r7, lr}
 8005aae:	b085      	sub	sp, #20
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	4603      	mov	r3, r0
 8005ab4:	6039      	str	r1, [r7, #0]
 8005ab6:	71fb      	strb	r3, [r7, #7]
 8005ab8:	4613      	mov	r3, r2
 8005aba:	71bb      	strb	r3, [r7, #6]
	uint8_t i;
	sensors_Reset();
 8005abc:	f7ff fdb6 	bl	800562c <sensors_Reset>
	if(mode == SKIP_ROM)
 8005ac0:	79fb      	ldrb	r3, [r7, #7]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d103      	bne.n	8005ace <sensors_ReadStratcpad+0x22>
	{
		//SKIP ROM
		sensors_WriteByte(0xCC);
 8005ac6:	20cc      	movs	r0, #204	; 0xcc
 8005ac8:	f7ff fe50 	bl	800576c <sensors_WriteByte>
 8005acc:	e016      	b.n	8005afc <sensors_ReadStratcpad+0x50>
	}
	else
	{
		//Match Rom
		sensors_WriteByte(0x55);
 8005ace:	2055      	movs	r0, #85	; 0x55
 8005ad0:	f7ff fe4c 	bl	800576c <sensors_WriteByte>
		for(i = 0; i <= 7; i++)
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	73fb      	strb	r3, [r7, #15]
 8005ad8:	e00d      	b.n	8005af6 <sensors_ReadStratcpad+0x4a>
		{
			sensors_WriteByte(Dev_ID[DevNum-1][i]);
 8005ada:	79bb      	ldrb	r3, [r7, #6]
 8005adc:	1e5a      	subs	r2, r3, #1
 8005ade:	7bfb      	ldrb	r3, [r7, #15]
 8005ae0:	4912      	ldr	r1, [pc, #72]	; (8005b2c <sensors_ReadStratcpad+0x80>)
 8005ae2:	00d2      	lsls	r2, r2, #3
 8005ae4:	440a      	add	r2, r1
 8005ae6:	4413      	add	r3, r2
 8005ae8:	781b      	ldrb	r3, [r3, #0]
 8005aea:	4618      	mov	r0, r3
 8005aec:	f7ff fe3e 	bl	800576c <sensors_WriteByte>
		for(i = 0; i <= 7; i++)
 8005af0:	7bfb      	ldrb	r3, [r7, #15]
 8005af2:	3301      	adds	r3, #1
 8005af4:	73fb      	strb	r3, [r7, #15]
 8005af6:	7bfb      	ldrb	r3, [r7, #15]
 8005af8:	2b07      	cmp	r3, #7
 8005afa:	d9ee      	bls.n	8005ada <sensors_ReadStratcpad+0x2e>
		}
	}
	//READ SCRATCHPAD
	sensors_WriteByte(0xBE);
 8005afc:	20be      	movs	r0, #190	; 0xbe
 8005afe:	f7ff fe35 	bl	800576c <sensors_WriteByte>
	for(i = 0; i < 8; i++)
 8005b02:	2300      	movs	r3, #0
 8005b04:	73fb      	strb	r3, [r7, #15]
 8005b06:	e009      	b.n	8005b1c <sensors_ReadStratcpad+0x70>
	{
		Data[i] = sensors_ReadByte();
 8005b08:	7bfb      	ldrb	r3, [r7, #15]
 8005b0a:	683a      	ldr	r2, [r7, #0]
 8005b0c:	18d4      	adds	r4, r2, r3
 8005b0e:	f7ff fde5 	bl	80056dc <sensors_ReadByte>
 8005b12:	4603      	mov	r3, r0
 8005b14:	7023      	strb	r3, [r4, #0]
	for(i = 0; i < 8; i++)
 8005b16:	7bfb      	ldrb	r3, [r7, #15]
 8005b18:	3301      	adds	r3, #1
 8005b1a:	73fb      	strb	r3, [r7, #15]
 8005b1c:	7bfb      	ldrb	r3, [r7, #15]
 8005b1e:	2b07      	cmp	r3, #7
 8005b20:	d9f2      	bls.n	8005b08 <sensors_ReadStratcpad+0x5c>
	}
}
 8005b22:	bf00      	nop
 8005b24:	bf00      	nop
 8005b26:	3714      	adds	r7, #20
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	bd90      	pop	{r4, r7, pc}
 8005b2c:	20000320 	.word	0x20000320

08005b30 <sensors_GetSign>:
//----------------------------------------------------------
uint8_t sensors_GetSign(uint16_t dt)
{
 8005b30:	b480      	push	{r7}
 8005b32:	b083      	sub	sp, #12
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	4603      	mov	r3, r0
 8005b38:	80fb      	strh	r3, [r7, #6]
	//ѕроверим 11-й бит
	if (dt&(1<<11))
 8005b3a:	88fb      	ldrh	r3, [r7, #6]
 8005b3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d001      	beq.n	8005b48 <sensors_GetSign+0x18>
		return 1;
 8005b44:	2301      	movs	r3, #1
 8005b46:	e000      	b.n	8005b4a <sensors_GetSign+0x1a>
	else
		return 0;
 8005b48:	2300      	movs	r3, #0
}
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	370c      	adds	r7, #12
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b54:	4770      	bx	lr

08005b56 <sensors_Convert>:
//----------------------------------------------------------
float sensors_Convert(uint16_t dt)
{
 8005b56:	b480      	push	{r7}
 8005b58:	b085      	sub	sp, #20
 8005b5a:	af00      	add	r7, sp, #0
 8005b5c:	4603      	mov	r3, r0
 8005b5e:	80fb      	strh	r3, [r7, #6]
	float t;

	t = (float)((dt&0x07FF)>>4);		//отборосим знаковые и дробные биты
 8005b60:	88fb      	ldrh	r3, [r7, #6]
 8005b62:	111b      	asrs	r3, r3, #4
 8005b64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b68:	ee07 3a90 	vmov	s15, r3
 8005b6c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005b70:	edc7 7a03 	vstr	s15, [r7, #12]
	t += (float)(dt&0x000F) / 16.0f;	//ѕрибавим дробную часть
 8005b74:	88fb      	ldrh	r3, [r7, #6]
 8005b76:	f003 030f 	and.w	r3, r3, #15
 8005b7a:	ee07 3a90 	vmov	s15, r3
 8005b7e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005b82:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8005b86:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005b8a:	ed97 7a03 	vldr	s14, [r7, #12]
 8005b8e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005b92:	edc7 7a03 	vstr	s15, [r7, #12]

	return t;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	ee07 3a90 	vmov	s15, r3
}
 8005b9c:	eeb0 0a67 	vmov.f32	s0, s15
 8005ba0:	3714      	adds	r7, #20
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba8:	4770      	bx	lr
	...

08005bac <UpdateTempSens>:
//----------------------------------------------------------
void UpdateTempSens(void)
{
 8005bac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005bae:	b08b      	sub	sp, #44	; 0x2c
 8005bb0:	af06      	add	r7, sp, #24
	sensors_init(NO_SKIP_ROM);
 8005bb2:	2001      	movs	r0, #1
 8005bb4:	f7ff febe 	bl	8005934 <sensors_init>

	for(uint8_t i = 0; i < Dev_Cnt; i++)
 8005bb8:	2300      	movs	r3, #0
 8005bba:	73fb      	strb	r3, [r7, #15]
 8005bbc:	e079      	b.n	8005cb2 <UpdateTempSens+0x106>
	{
		sprintf(Device_RAW_ROM[i],"%02X%02X%02X%02X%02X%02X%02X%02X", Dev_ID[i][0], Dev_ID[i][1], Dev_ID[i][2], Dev_ID[i][3], Dev_ID[i][4], Dev_ID[i][5], Dev_ID[i][6], Dev_ID[i][7]);
 8005bbe:	7bfa      	ldrb	r2, [r7, #15]
 8005bc0:	4613      	mov	r3, r2
 8005bc2:	009b      	lsls	r3, r3, #2
 8005bc4:	4413      	add	r3, r2
 8005bc6:	009b      	lsls	r3, r3, #2
 8005bc8:	4a42      	ldr	r2, [pc, #264]	; (8005cd4 <UpdateTempSens+0x128>)
 8005bca:	1898      	adds	r0, r3, r2
 8005bcc:	7bfb      	ldrb	r3, [r7, #15]
 8005bce:	4a42      	ldr	r2, [pc, #264]	; (8005cd8 <UpdateTempSens+0x12c>)
 8005bd0:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 8005bd4:	469c      	mov	ip, r3
 8005bd6:	7bfb      	ldrb	r3, [r7, #15]
 8005bd8:	4a3f      	ldr	r2, [pc, #252]	; (8005cd8 <UpdateTempSens+0x12c>)
 8005bda:	00db      	lsls	r3, r3, #3
 8005bdc:	4413      	add	r3, r2
 8005bde:	785b      	ldrb	r3, [r3, #1]
 8005be0:	469e      	mov	lr, r3
 8005be2:	7bfb      	ldrb	r3, [r7, #15]
 8005be4:	4a3c      	ldr	r2, [pc, #240]	; (8005cd8 <UpdateTempSens+0x12c>)
 8005be6:	00db      	lsls	r3, r3, #3
 8005be8:	4413      	add	r3, r2
 8005bea:	789b      	ldrb	r3, [r3, #2]
 8005bec:	4619      	mov	r1, r3
 8005bee:	7bfb      	ldrb	r3, [r7, #15]
 8005bf0:	4a39      	ldr	r2, [pc, #228]	; (8005cd8 <UpdateTempSens+0x12c>)
 8005bf2:	00db      	lsls	r3, r3, #3
 8005bf4:	4413      	add	r3, r2
 8005bf6:	78db      	ldrb	r3, [r3, #3]
 8005bf8:	461c      	mov	r4, r3
 8005bfa:	7bfb      	ldrb	r3, [r7, #15]
 8005bfc:	4a36      	ldr	r2, [pc, #216]	; (8005cd8 <UpdateTempSens+0x12c>)
 8005bfe:	00db      	lsls	r3, r3, #3
 8005c00:	4413      	add	r3, r2
 8005c02:	791b      	ldrb	r3, [r3, #4]
 8005c04:	461d      	mov	r5, r3
 8005c06:	7bfb      	ldrb	r3, [r7, #15]
 8005c08:	4a33      	ldr	r2, [pc, #204]	; (8005cd8 <UpdateTempSens+0x12c>)
 8005c0a:	00db      	lsls	r3, r3, #3
 8005c0c:	4413      	add	r3, r2
 8005c0e:	795b      	ldrb	r3, [r3, #5]
 8005c10:	461e      	mov	r6, r3
 8005c12:	7bfb      	ldrb	r3, [r7, #15]
 8005c14:	4a30      	ldr	r2, [pc, #192]	; (8005cd8 <UpdateTempSens+0x12c>)
 8005c16:	00db      	lsls	r3, r3, #3
 8005c18:	4413      	add	r3, r2
 8005c1a:	799b      	ldrb	r3, [r3, #6]
 8005c1c:	607b      	str	r3, [r7, #4]
 8005c1e:	7bfb      	ldrb	r3, [r7, #15]
 8005c20:	4a2d      	ldr	r2, [pc, #180]	; (8005cd8 <UpdateTempSens+0x12c>)
 8005c22:	00db      	lsls	r3, r3, #3
 8005c24:	4413      	add	r3, r2
 8005c26:	79db      	ldrb	r3, [r3, #7]
 8005c28:	9305      	str	r3, [sp, #20]
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	9304      	str	r3, [sp, #16]
 8005c2e:	9603      	str	r6, [sp, #12]
 8005c30:	9502      	str	r5, [sp, #8]
 8005c32:	9401      	str	r4, [sp, #4]
 8005c34:	9100      	str	r1, [sp, #0]
 8005c36:	4673      	mov	r3, lr
 8005c38:	4662      	mov	r2, ip
 8005c3a:	4928      	ldr	r1, [pc, #160]	; (8005cdc <UpdateTempSens+0x130>)
 8005c3c:	f012 ff62 	bl	8018b04 <siprintf>
		if(strcmp(Device_RAW_ROM[i], "28790E950C000069") == 0)
 8005c40:	7bfa      	ldrb	r2, [r7, #15]
 8005c42:	4613      	mov	r3, r2
 8005c44:	009b      	lsls	r3, r3, #2
 8005c46:	4413      	add	r3, r2
 8005c48:	009b      	lsls	r3, r3, #2
 8005c4a:	4a22      	ldr	r2, [pc, #136]	; (8005cd4 <UpdateTempSens+0x128>)
 8005c4c:	4413      	add	r3, r2
 8005c4e:	4924      	ldr	r1, [pc, #144]	; (8005ce0 <UpdateTempSens+0x134>)
 8005c50:	4618      	mov	r0, r3
 8005c52:	f7fa fabd 	bl	80001d0 <strcmp>
 8005c56:	4603      	mov	r3, r0
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d10c      	bne.n	8005c76 <UpdateTempSens+0xca>
		{
			SEND_str(Device_RAW_ROM[i]);
 8005c5c:	7bfa      	ldrb	r2, [r7, #15]
 8005c5e:	4613      	mov	r3, r2
 8005c60:	009b      	lsls	r3, r3, #2
 8005c62:	4413      	add	r3, r2
 8005c64:	009b      	lsls	r3, r3, #2
 8005c66:	4a1b      	ldr	r2, [pc, #108]	; (8005cd4 <UpdateTempSens+0x128>)
 8005c68:	4413      	add	r3, r2
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	f7fc f950 	bl	8001f10 <SEND_str>
			SEND_str(" - YES\n");
 8005c70:	481c      	ldr	r0, [pc, #112]	; (8005ce4 <UpdateTempSens+0x138>)
 8005c72:	f7fc f94d 	bl	8001f10 <SEND_str>
		}
		if(strcmp(Device_RAW_ROM[i], "28BF1E930C000031") == 0)
 8005c76:	7bfa      	ldrb	r2, [r7, #15]
 8005c78:	4613      	mov	r3, r2
 8005c7a:	009b      	lsls	r3, r3, #2
 8005c7c:	4413      	add	r3, r2
 8005c7e:	009b      	lsls	r3, r3, #2
 8005c80:	4a14      	ldr	r2, [pc, #80]	; (8005cd4 <UpdateTempSens+0x128>)
 8005c82:	4413      	add	r3, r2
 8005c84:	4918      	ldr	r1, [pc, #96]	; (8005ce8 <UpdateTempSens+0x13c>)
 8005c86:	4618      	mov	r0, r3
 8005c88:	f7fa faa2 	bl	80001d0 <strcmp>
 8005c8c:	4603      	mov	r3, r0
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d10c      	bne.n	8005cac <UpdateTempSens+0x100>
		{
			SEND_str(Device_RAW_ROM[i]);
 8005c92:	7bfa      	ldrb	r2, [r7, #15]
 8005c94:	4613      	mov	r3, r2
 8005c96:	009b      	lsls	r3, r3, #2
 8005c98:	4413      	add	r3, r2
 8005c9a:	009b      	lsls	r3, r3, #2
 8005c9c:	4a0d      	ldr	r2, [pc, #52]	; (8005cd4 <UpdateTempSens+0x128>)
 8005c9e:	4413      	add	r3, r2
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	f7fc f935 	bl	8001f10 <SEND_str>
			SEND_str(" - YES\n");
 8005ca6:	480f      	ldr	r0, [pc, #60]	; (8005ce4 <UpdateTempSens+0x138>)
 8005ca8:	f7fc f932 	bl	8001f10 <SEND_str>
	for(uint8_t i = 0; i < Dev_Cnt; i++)
 8005cac:	7bfb      	ldrb	r3, [r7, #15]
 8005cae:	3301      	adds	r3, #1
 8005cb0:	73fb      	strb	r3, [r7, #15]
 8005cb2:	4b0e      	ldr	r3, [pc, #56]	; (8005cec <UpdateTempSens+0x140>)
 8005cb4:	781b      	ldrb	r3, [r3, #0]
 8005cb6:	7bfa      	ldrb	r2, [r7, #15]
 8005cb8:	429a      	cmp	r2, r3
 8005cba:	d380      	bcc.n	8005bbe <UpdateTempSens+0x12>
		}
	}

	__HAL_TIM_CLEAR_FLAG(&htim6, TIM_SR_UIF); // очищаем флаг
 8005cbc:	4b0c      	ldr	r3, [pc, #48]	; (8005cf0 <UpdateTempSens+0x144>)
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f06f 0201 	mvn.w	r2, #1
 8005cc4:	611a      	str	r2, [r3, #16]
	HAL_TIM_Base_Start_IT(&htim6);
 8005cc6:	480a      	ldr	r0, [pc, #40]	; (8005cf0 <UpdateTempSens+0x144>)
 8005cc8:	f004 fbe7 	bl	800a49a <HAL_TIM_Base_Start_IT>
}
 8005ccc:	bf00      	nop
 8005cce:	3714      	adds	r7, #20
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005cd4:	20000a40 	.word	0x20000a40
 8005cd8:	20000320 	.word	0x20000320
 8005cdc:	0801dfb0 	.word	0x0801dfb0
 8005ce0:	0801dfd4 	.word	0x0801dfd4
 8005ce4:	0801dfe8 	.word	0x0801dfe8
 8005ce8:	0801dff0 	.word	0x0801dff0
 8005cec:	20000a3c 	.word	0x20000a3c
 8005cf0:	20000d9c 	.word	0x20000d9c

08005cf4 <MX_TIM3_Init>:
DMA_HandleTypeDef hdma_tim3_ch3;
DMA_HandleTypeDef hdma_tim3_ch4_up;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b08a      	sub	sp, #40	; 0x28
 8005cf8:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005cfa:	f107 0320 	add.w	r3, r7, #32
 8005cfe:	2200      	movs	r2, #0
 8005d00:	601a      	str	r2, [r3, #0]
 8005d02:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005d04:	1d3b      	adds	r3, r7, #4
 8005d06:	2200      	movs	r2, #0
 8005d08:	601a      	str	r2, [r3, #0]
 8005d0a:	605a      	str	r2, [r3, #4]
 8005d0c:	609a      	str	r2, [r3, #8]
 8005d0e:	60da      	str	r2, [r3, #12]
 8005d10:	611a      	str	r2, [r3, #16]
 8005d12:	615a      	str	r2, [r3, #20]
 8005d14:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 8005d16:	4b33      	ldr	r3, [pc, #204]	; (8005de4 <MX_TIM3_Init+0xf0>)
 8005d18:	4a33      	ldr	r2, [pc, #204]	; (8005de8 <MX_TIM3_Init+0xf4>)
 8005d1a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 3;
 8005d1c:	4b31      	ldr	r3, [pc, #196]	; (8005de4 <MX_TIM3_Init+0xf0>)
 8005d1e:	2203      	movs	r2, #3
 8005d20:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005d22:	4b30      	ldr	r3, [pc, #192]	; (8005de4 <MX_TIM3_Init+0xf0>)
 8005d24:	2200      	movs	r2, #0
 8005d26:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000;
 8005d28:	4b2e      	ldr	r3, [pc, #184]	; (8005de4 <MX_TIM3_Init+0xf0>)
 8005d2a:	f242 7210 	movw	r2, #10000	; 0x2710
 8005d2e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005d30:	4b2c      	ldr	r3, [pc, #176]	; (8005de4 <MX_TIM3_Init+0xf0>)
 8005d32:	2200      	movs	r2, #0
 8005d34:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005d36:	4b2b      	ldr	r3, [pc, #172]	; (8005de4 <MX_TIM3_Init+0xf0>)
 8005d38:	2200      	movs	r2, #0
 8005d3a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8005d3c:	4829      	ldr	r0, [pc, #164]	; (8005de4 <MX_TIM3_Init+0xf0>)
 8005d3e:	f004 fc39 	bl	800a5b4 <HAL_TIM_PWM_Init>
 8005d42:	4603      	mov	r3, r0
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d001      	beq.n	8005d4c <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8005d48:	f7fe fb1e 	bl	8004388 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005d4c:	2300      	movs	r3, #0
 8005d4e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005d50:	2300      	movs	r3, #0
 8005d52:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8005d54:	f107 0320 	add.w	r3, r7, #32
 8005d58:	4619      	mov	r1, r3
 8005d5a:	4822      	ldr	r0, [pc, #136]	; (8005de4 <MX_TIM3_Init+0xf0>)
 8005d5c:	f005 faca 	bl	800b2f4 <HAL_TIMEx_MasterConfigSynchronization>
 8005d60:	4603      	mov	r3, r0
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d001      	beq.n	8005d6a <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8005d66:	f7fe fb0f 	bl	8004388 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005d6a:	2360      	movs	r3, #96	; 0x60
 8005d6c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1000;
 8005d6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005d72:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005d74:	2300      	movs	r3, #0
 8005d76:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8005d78:	2304      	movs	r3, #4
 8005d7a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005d7c:	1d3b      	adds	r3, r7, #4
 8005d7e:	2200      	movs	r2, #0
 8005d80:	4619      	mov	r1, r3
 8005d82:	4818      	ldr	r0, [pc, #96]	; (8005de4 <MX_TIM3_Init+0xf0>)
 8005d84:	f004 febc 	bl	800ab00 <HAL_TIM_PWM_ConfigChannel>
 8005d88:	4603      	mov	r3, r0
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d001      	beq.n	8005d92 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8005d8e:	f7fe fafb 	bl	8004388 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8005d92:	1d3b      	adds	r3, r7, #4
 8005d94:	2204      	movs	r2, #4
 8005d96:	4619      	mov	r1, r3
 8005d98:	4812      	ldr	r0, [pc, #72]	; (8005de4 <MX_TIM3_Init+0xf0>)
 8005d9a:	f004 feb1 	bl	800ab00 <HAL_TIM_PWM_ConfigChannel>
 8005d9e:	4603      	mov	r3, r0
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d001      	beq.n	8005da8 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8005da4:	f7fe faf0 	bl	8004388 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8005da8:	1d3b      	adds	r3, r7, #4
 8005daa:	2208      	movs	r2, #8
 8005dac:	4619      	mov	r1, r3
 8005dae:	480d      	ldr	r0, [pc, #52]	; (8005de4 <MX_TIM3_Init+0xf0>)
 8005db0:	f004 fea6 	bl	800ab00 <HAL_TIM_PWM_ConfigChannel>
 8005db4:	4603      	mov	r3, r0
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d001      	beq.n	8005dbe <MX_TIM3_Init+0xca>
  {
    Error_Handler();
 8005dba:	f7fe fae5 	bl	8004388 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8005dbe:	1d3b      	adds	r3, r7, #4
 8005dc0:	220c      	movs	r2, #12
 8005dc2:	4619      	mov	r1, r3
 8005dc4:	4807      	ldr	r0, [pc, #28]	; (8005de4 <MX_TIM3_Init+0xf0>)
 8005dc6:	f004 fe9b 	bl	800ab00 <HAL_TIM_PWM_ConfigChannel>
 8005dca:	4603      	mov	r3, r0
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d001      	beq.n	8005dd4 <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 8005dd0:	f7fe fada 	bl	8004388 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 8005dd4:	4803      	ldr	r0, [pc, #12]	; (8005de4 <MX_TIM3_Init+0xf0>)
 8005dd6:	f000 f9df 	bl	8006198 <HAL_TIM_MspPostInit>

}
 8005dda:	bf00      	nop
 8005ddc:	3728      	adds	r7, #40	; 0x28
 8005dde:	46bd      	mov	sp, r7
 8005de0:	bd80      	pop	{r7, pc}
 8005de2:	bf00      	nop
 8005de4:	20000c9c 	.word	0x20000c9c
 8005de8:	40000400 	.word	0x40000400

08005dec <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b08a      	sub	sp, #40	; 0x28
 8005df0:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005df2:	f107 0320 	add.w	r3, r7, #32
 8005df6:	2200      	movs	r2, #0
 8005df8:	601a      	str	r2, [r3, #0]
 8005dfa:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005dfc:	1d3b      	adds	r3, r7, #4
 8005dfe:	2200      	movs	r2, #0
 8005e00:	601a      	str	r2, [r3, #0]
 8005e02:	605a      	str	r2, [r3, #4]
 8005e04:	609a      	str	r2, [r3, #8]
 8005e06:	60da      	str	r2, [r3, #12]
 8005e08:	611a      	str	r2, [r3, #16]
 8005e0a:	615a      	str	r2, [r3, #20]
 8005e0c:	619a      	str	r2, [r3, #24]

  htim4.Instance = TIM4;
 8005e0e:	4b20      	ldr	r3, [pc, #128]	; (8005e90 <MX_TIM4_Init+0xa4>)
 8005e10:	4a20      	ldr	r2, [pc, #128]	; (8005e94 <MX_TIM4_Init+0xa8>)
 8005e12:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8005e14:	4b1e      	ldr	r3, [pc, #120]	; (8005e90 <MX_TIM4_Init+0xa4>)
 8005e16:	2200      	movs	r2, #0
 8005e18:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005e1a:	4b1d      	ldr	r3, [pc, #116]	; (8005e90 <MX_TIM4_Init+0xa4>)
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65000;
 8005e20:	4b1b      	ldr	r3, [pc, #108]	; (8005e90 <MX_TIM4_Init+0xa4>)
 8005e22:	f64f 52e8 	movw	r2, #65000	; 0xfde8
 8005e26:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005e28:	4b19      	ldr	r3, [pc, #100]	; (8005e90 <MX_TIM4_Init+0xa4>)
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005e2e:	4b18      	ldr	r3, [pc, #96]	; (8005e90 <MX_TIM4_Init+0xa4>)
 8005e30:	2200      	movs	r2, #0
 8005e32:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 8005e34:	4816      	ldr	r0, [pc, #88]	; (8005e90 <MX_TIM4_Init+0xa4>)
 8005e36:	f004 fb54 	bl	800a4e2 <HAL_TIM_OC_Init>
 8005e3a:	4603      	mov	r3, r0
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d001      	beq.n	8005e44 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8005e40:	f7fe faa2 	bl	8004388 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005e44:	2300      	movs	r3, #0
 8005e46:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005e48:	2300      	movs	r3, #0
 8005e4a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8005e4c:	f107 0320 	add.w	r3, r7, #32
 8005e50:	4619      	mov	r1, r3
 8005e52:	480f      	ldr	r0, [pc, #60]	; (8005e90 <MX_TIM4_Init+0xa4>)
 8005e54:	f005 fa4e 	bl	800b2f4 <HAL_TIMEx_MasterConfigSynchronization>
 8005e58:	4603      	mov	r3, r0
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d001      	beq.n	8005e62 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8005e5e:	f7fe fa93 	bl	8004388 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8005e62:	2330      	movs	r3, #48	; 0x30
 8005e64:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8005e66:	2300      	movs	r3, #0
 8005e68:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005e6e:	2300      	movs	r3, #0
 8005e70:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8005e72:	1d3b      	adds	r3, r7, #4
 8005e74:	220c      	movs	r2, #12
 8005e76:	4619      	mov	r1, r3
 8005e78:	4805      	ldr	r0, [pc, #20]	; (8005e90 <MX_TIM4_Init+0xa4>)
 8005e7a:	f004 fde1 	bl	800aa40 <HAL_TIM_OC_ConfigChannel>
 8005e7e:	4603      	mov	r3, r0
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d001      	beq.n	8005e88 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8005e84:	f7fe fa80 	bl	8004388 <Error_Handler>
  }

}
 8005e88:	bf00      	nop
 8005e8a:	3728      	adds	r7, #40	; 0x28
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	bd80      	pop	{r7, pc}
 8005e90:	20000bfc 	.word	0x20000bfc
 8005e94:	40000800 	.word	0x40000800

08005e98 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b082      	sub	sp, #8
 8005e9c:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005e9e:	463b      	mov	r3, r7
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	601a      	str	r2, [r3, #0]
 8005ea4:	605a      	str	r2, [r3, #4]

  htim6.Instance = TIM6;
 8005ea6:	4b15      	ldr	r3, [pc, #84]	; (8005efc <MX_TIM6_Init+0x64>)
 8005ea8:	4a15      	ldr	r2, [pc, #84]	; (8005f00 <MX_TIM6_Init+0x68>)
 8005eaa:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 83;
 8005eac:	4b13      	ldr	r3, [pc, #76]	; (8005efc <MX_TIM6_Init+0x64>)
 8005eae:	2253      	movs	r2, #83	; 0x53
 8005eb0:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005eb2:	4b12      	ldr	r3, [pc, #72]	; (8005efc <MX_TIM6_Init+0x64>)
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 49999;
 8005eb8:	4b10      	ldr	r3, [pc, #64]	; (8005efc <MX_TIM6_Init+0x64>)
 8005eba:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8005ebe:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005ec0:	4b0e      	ldr	r3, [pc, #56]	; (8005efc <MX_TIM6_Init+0x64>)
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8005ec6:	480d      	ldr	r0, [pc, #52]	; (8005efc <MX_TIM6_Init+0x64>)
 8005ec8:	f004 fabc 	bl	800a444 <HAL_TIM_Base_Init>
 8005ecc:	4603      	mov	r3, r0
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d001      	beq.n	8005ed6 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8005ed2:	f7fe fa59 	bl	8004388 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005eda:	2300      	movs	r3, #0
 8005edc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8005ede:	463b      	mov	r3, r7
 8005ee0:	4619      	mov	r1, r3
 8005ee2:	4806      	ldr	r0, [pc, #24]	; (8005efc <MX_TIM6_Init+0x64>)
 8005ee4:	f005 fa06 	bl	800b2f4 <HAL_TIMEx_MasterConfigSynchronization>
 8005ee8:	4603      	mov	r3, r0
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d001      	beq.n	8005ef2 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8005eee:	f7fe fa4b 	bl	8004388 <Error_Handler>
  }

}
 8005ef2:	bf00      	nop
 8005ef4:	3708      	adds	r7, #8
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	bd80      	pop	{r7, pc}
 8005efa:	bf00      	nop
 8005efc:	20000d9c 	.word	0x20000d9c
 8005f00:	40001000 	.word	0x40001000

08005f04 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b084      	sub	sp, #16
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	4a72      	ldr	r2, [pc, #456]	; (80060dc <HAL_TIM_PWM_MspInit+0x1d8>)
 8005f12:	4293      	cmp	r3, r2
 8005f14:	f040 80de 	bne.w	80060d4 <HAL_TIM_PWM_MspInit+0x1d0>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005f18:	2300      	movs	r3, #0
 8005f1a:	60fb      	str	r3, [r7, #12]
 8005f1c:	4b70      	ldr	r3, [pc, #448]	; (80060e0 <HAL_TIM_PWM_MspInit+0x1dc>)
 8005f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f20:	4a6f      	ldr	r2, [pc, #444]	; (80060e0 <HAL_TIM_PWM_MspInit+0x1dc>)
 8005f22:	f043 0302 	orr.w	r3, r3, #2
 8005f26:	6413      	str	r3, [r2, #64]	; 0x40
 8005f28:	4b6d      	ldr	r3, [pc, #436]	; (80060e0 <HAL_TIM_PWM_MspInit+0x1dc>)
 8005f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f2c:	f003 0302 	and.w	r3, r3, #2
 8005f30:	60fb      	str	r3, [r7, #12]
 8005f32:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 DMA Init */
    /* TIM3_CH1_TRIG Init */
    hdma_tim3_ch1_trig.Instance = DMA1_Stream4;
 8005f34:	4b6b      	ldr	r3, [pc, #428]	; (80060e4 <HAL_TIM_PWM_MspInit+0x1e0>)
 8005f36:	4a6c      	ldr	r2, [pc, #432]	; (80060e8 <HAL_TIM_PWM_MspInit+0x1e4>)
 8005f38:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1_trig.Init.Channel = DMA_CHANNEL_5;
 8005f3a:	4b6a      	ldr	r3, [pc, #424]	; (80060e4 <HAL_TIM_PWM_MspInit+0x1e0>)
 8005f3c:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8005f40:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1_trig.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005f42:	4b68      	ldr	r3, [pc, #416]	; (80060e4 <HAL_TIM_PWM_MspInit+0x1e0>)
 8005f44:	2240      	movs	r2, #64	; 0x40
 8005f46:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 8005f48:	4b66      	ldr	r3, [pc, #408]	; (80060e4 <HAL_TIM_PWM_MspInit+0x1e0>)
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1_trig.Init.MemInc = DMA_MINC_ENABLE;
 8005f4e:	4b65      	ldr	r3, [pc, #404]	; (80060e4 <HAL_TIM_PWM_MspInit+0x1e0>)
 8005f50:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005f54:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8005f56:	4b63      	ldr	r3, [pc, #396]	; (80060e4 <HAL_TIM_PWM_MspInit+0x1e0>)
 8005f58:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005f5c:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1_trig.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8005f5e:	4b61      	ldr	r3, [pc, #388]	; (80060e4 <HAL_TIM_PWM_MspInit+0x1e0>)
 8005f60:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005f64:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1_trig.Init.Mode = DMA_CIRCULAR;
 8005f66:	4b5f      	ldr	r3, [pc, #380]	; (80060e4 <HAL_TIM_PWM_MspInit+0x1e0>)
 8005f68:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005f6c:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1_trig.Init.Priority = DMA_PRIORITY_LOW;
 8005f6e:	4b5d      	ldr	r3, [pc, #372]	; (80060e4 <HAL_TIM_PWM_MspInit+0x1e0>)
 8005f70:	2200      	movs	r2, #0
 8005f72:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch1_trig.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005f74:	4b5b      	ldr	r3, [pc, #364]	; (80060e4 <HAL_TIM_PWM_MspInit+0x1e0>)
 8005f76:	2200      	movs	r2, #0
 8005f78:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch1_trig) != HAL_OK)
 8005f7a:	485a      	ldr	r0, [pc, #360]	; (80060e4 <HAL_TIM_PWM_MspInit+0x1e0>)
 8005f7c:	f001 f85e 	bl	800703c <HAL_DMA_Init>
 8005f80:	4603      	mov	r3, r0
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d001      	beq.n	8005f8a <HAL_TIM_PWM_MspInit+0x86>
    {
      Error_Handler();
 8005f86:	f7fe f9ff 	bl	8004388 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1_trig);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	4a55      	ldr	r2, [pc, #340]	; (80060e4 <HAL_TIM_PWM_MspInit+0x1e0>)
 8005f8e:	625a      	str	r2, [r3, #36]	; 0x24
 8005f90:	4a54      	ldr	r2, [pc, #336]	; (80060e4 <HAL_TIM_PWM_MspInit+0x1e0>)
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_TRIGGER],hdma_tim3_ch1_trig);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	4a52      	ldr	r2, [pc, #328]	; (80060e4 <HAL_TIM_PWM_MspInit+0x1e0>)
 8005f9a:	639a      	str	r2, [r3, #56]	; 0x38
 8005f9c:	4a51      	ldr	r2, [pc, #324]	; (80060e4 <HAL_TIM_PWM_MspInit+0x1e0>)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM3_CH2 Init */
    hdma_tim3_ch2.Instance = DMA1_Stream5;
 8005fa2:	4b52      	ldr	r3, [pc, #328]	; (80060ec <HAL_TIM_PWM_MspInit+0x1e8>)
 8005fa4:	4a52      	ldr	r2, [pc, #328]	; (80060f0 <HAL_TIM_PWM_MspInit+0x1ec>)
 8005fa6:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch2.Init.Channel = DMA_CHANNEL_5;
 8005fa8:	4b50      	ldr	r3, [pc, #320]	; (80060ec <HAL_TIM_PWM_MspInit+0x1e8>)
 8005faa:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8005fae:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005fb0:	4b4e      	ldr	r3, [pc, #312]	; (80060ec <HAL_TIM_PWM_MspInit+0x1e8>)
 8005fb2:	2240      	movs	r2, #64	; 0x40
 8005fb4:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8005fb6:	4b4d      	ldr	r3, [pc, #308]	; (80060ec <HAL_TIM_PWM_MspInit+0x1e8>)
 8005fb8:	2200      	movs	r2, #0
 8005fba:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8005fbc:	4b4b      	ldr	r3, [pc, #300]	; (80060ec <HAL_TIM_PWM_MspInit+0x1e8>)
 8005fbe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005fc2:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8005fc4:	4b49      	ldr	r3, [pc, #292]	; (80060ec <HAL_TIM_PWM_MspInit+0x1e8>)
 8005fc6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005fca:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8005fcc:	4b47      	ldr	r3, [pc, #284]	; (80060ec <HAL_TIM_PWM_MspInit+0x1e8>)
 8005fce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005fd2:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch2.Init.Mode = DMA_CIRCULAR;
 8005fd4:	4b45      	ldr	r3, [pc, #276]	; (80060ec <HAL_TIM_PWM_MspInit+0x1e8>)
 8005fd6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005fda:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8005fdc:	4b43      	ldr	r3, [pc, #268]	; (80060ec <HAL_TIM_PWM_MspInit+0x1e8>)
 8005fde:	2200      	movs	r2, #0
 8005fe0:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005fe2:	4b42      	ldr	r3, [pc, #264]	; (80060ec <HAL_TIM_PWM_MspInit+0x1e8>)
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch2) != HAL_OK)
 8005fe8:	4840      	ldr	r0, [pc, #256]	; (80060ec <HAL_TIM_PWM_MspInit+0x1e8>)
 8005fea:	f001 f827 	bl	800703c <HAL_DMA_Init>
 8005fee:	4603      	mov	r3, r0
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d001      	beq.n	8005ff8 <HAL_TIM_PWM_MspInit+0xf4>
    {
      Error_Handler();
 8005ff4:	f7fe f9c8 	bl	8004388 <Error_Handler>
    }

    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC2],hdma_tim3_ch2);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	4a3c      	ldr	r2, [pc, #240]	; (80060ec <HAL_TIM_PWM_MspInit+0x1e8>)
 8005ffc:	629a      	str	r2, [r3, #40]	; 0x28
 8005ffe:	4a3b      	ldr	r2, [pc, #236]	; (80060ec <HAL_TIM_PWM_MspInit+0x1e8>)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM3_CH3 Init */
    hdma_tim3_ch3.Instance = DMA1_Stream7;
 8006004:	4b3b      	ldr	r3, [pc, #236]	; (80060f4 <HAL_TIM_PWM_MspInit+0x1f0>)
 8006006:	4a3c      	ldr	r2, [pc, #240]	; (80060f8 <HAL_TIM_PWM_MspInit+0x1f4>)
 8006008:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch3.Init.Channel = DMA_CHANNEL_5;
 800600a:	4b3a      	ldr	r3, [pc, #232]	; (80060f4 <HAL_TIM_PWM_MspInit+0x1f0>)
 800600c:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8006010:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006012:	4b38      	ldr	r3, [pc, #224]	; (80060f4 <HAL_TIM_PWM_MspInit+0x1f0>)
 8006014:	2240      	movs	r2, #64	; 0x40
 8006016:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8006018:	4b36      	ldr	r3, [pc, #216]	; (80060f4 <HAL_TIM_PWM_MspInit+0x1f0>)
 800601a:	2200      	movs	r2, #0
 800601c:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch3.Init.MemInc = DMA_MINC_ENABLE;
 800601e:	4b35      	ldr	r3, [pc, #212]	; (80060f4 <HAL_TIM_PWM_MspInit+0x1f0>)
 8006020:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006024:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8006026:	4b33      	ldr	r3, [pc, #204]	; (80060f4 <HAL_TIM_PWM_MspInit+0x1f0>)
 8006028:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800602c:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800602e:	4b31      	ldr	r3, [pc, #196]	; (80060f4 <HAL_TIM_PWM_MspInit+0x1f0>)
 8006030:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006034:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch3.Init.Mode = DMA_CIRCULAR;
 8006036:	4b2f      	ldr	r3, [pc, #188]	; (80060f4 <HAL_TIM_PWM_MspInit+0x1f0>)
 8006038:	f44f 7280 	mov.w	r2, #256	; 0x100
 800603c:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch3.Init.Priority = DMA_PRIORITY_LOW;
 800603e:	4b2d      	ldr	r3, [pc, #180]	; (80060f4 <HAL_TIM_PWM_MspInit+0x1f0>)
 8006040:	2200      	movs	r2, #0
 8006042:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006044:	4b2b      	ldr	r3, [pc, #172]	; (80060f4 <HAL_TIM_PWM_MspInit+0x1f0>)
 8006046:	2200      	movs	r2, #0
 8006048:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch3) != HAL_OK)
 800604a:	482a      	ldr	r0, [pc, #168]	; (80060f4 <HAL_TIM_PWM_MspInit+0x1f0>)
 800604c:	f000 fff6 	bl	800703c <HAL_DMA_Init>
 8006050:	4603      	mov	r3, r0
 8006052:	2b00      	cmp	r3, #0
 8006054:	d001      	beq.n	800605a <HAL_TIM_PWM_MspInit+0x156>
    {
      Error_Handler();
 8006056:	f7fe f997 	bl	8004388 <Error_Handler>
    }

    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC3],hdma_tim3_ch3);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	4a25      	ldr	r2, [pc, #148]	; (80060f4 <HAL_TIM_PWM_MspInit+0x1f0>)
 800605e:	62da      	str	r2, [r3, #44]	; 0x2c
 8006060:	4a24      	ldr	r2, [pc, #144]	; (80060f4 <HAL_TIM_PWM_MspInit+0x1f0>)
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM3_CH4_UP Init */
    hdma_tim3_ch4_up.Instance = DMA1_Stream2;
 8006066:	4b25      	ldr	r3, [pc, #148]	; (80060fc <HAL_TIM_PWM_MspInit+0x1f8>)
 8006068:	4a25      	ldr	r2, [pc, #148]	; (8006100 <HAL_TIM_PWM_MspInit+0x1fc>)
 800606a:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch4_up.Init.Channel = DMA_CHANNEL_5;
 800606c:	4b23      	ldr	r3, [pc, #140]	; (80060fc <HAL_TIM_PWM_MspInit+0x1f8>)
 800606e:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8006072:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch4_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006074:	4b21      	ldr	r3, [pc, #132]	; (80060fc <HAL_TIM_PWM_MspInit+0x1f8>)
 8006076:	2240      	movs	r2, #64	; 0x40
 8006078:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch4_up.Init.PeriphInc = DMA_PINC_DISABLE;
 800607a:	4b20      	ldr	r3, [pc, #128]	; (80060fc <HAL_TIM_PWM_MspInit+0x1f8>)
 800607c:	2200      	movs	r2, #0
 800607e:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch4_up.Init.MemInc = DMA_MINC_ENABLE;
 8006080:	4b1e      	ldr	r3, [pc, #120]	; (80060fc <HAL_TIM_PWM_MspInit+0x1f8>)
 8006082:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006086:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch4_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8006088:	4b1c      	ldr	r3, [pc, #112]	; (80060fc <HAL_TIM_PWM_MspInit+0x1f8>)
 800608a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800608e:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch4_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8006090:	4b1a      	ldr	r3, [pc, #104]	; (80060fc <HAL_TIM_PWM_MspInit+0x1f8>)
 8006092:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006096:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch4_up.Init.Mode = DMA_CIRCULAR;
 8006098:	4b18      	ldr	r3, [pc, #96]	; (80060fc <HAL_TIM_PWM_MspInit+0x1f8>)
 800609a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800609e:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch4_up.Init.Priority = DMA_PRIORITY_LOW;
 80060a0:	4b16      	ldr	r3, [pc, #88]	; (80060fc <HAL_TIM_PWM_MspInit+0x1f8>)
 80060a2:	2200      	movs	r2, #0
 80060a4:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch4_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80060a6:	4b15      	ldr	r3, [pc, #84]	; (80060fc <HAL_TIM_PWM_MspInit+0x1f8>)
 80060a8:	2200      	movs	r2, #0
 80060aa:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch4_up) != HAL_OK)
 80060ac:	4813      	ldr	r0, [pc, #76]	; (80060fc <HAL_TIM_PWM_MspInit+0x1f8>)
 80060ae:	f000 ffc5 	bl	800703c <HAL_DMA_Init>
 80060b2:	4603      	mov	r3, r0
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d001      	beq.n	80060bc <HAL_TIM_PWM_MspInit+0x1b8>
    {
      Error_Handler();
 80060b8:	f7fe f966 	bl	8004388 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC4],hdma_tim3_ch4_up);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	4a0f      	ldr	r2, [pc, #60]	; (80060fc <HAL_TIM_PWM_MspInit+0x1f8>)
 80060c0:	631a      	str	r2, [r3, #48]	; 0x30
 80060c2:	4a0e      	ldr	r2, [pc, #56]	; (80060fc <HAL_TIM_PWM_MspInit+0x1f8>)
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_UPDATE],hdma_tim3_ch4_up);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	4a0c      	ldr	r2, [pc, #48]	; (80060fc <HAL_TIM_PWM_MspInit+0x1f8>)
 80060cc:	621a      	str	r2, [r3, #32]
 80060ce:	4a0b      	ldr	r2, [pc, #44]	; (80060fc <HAL_TIM_PWM_MspInit+0x1f8>)
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80060d4:	bf00      	nop
 80060d6:	3710      	adds	r7, #16
 80060d8:	46bd      	mov	sp, r7
 80060da:	bd80      	pop	{r7, pc}
 80060dc:	40000400 	.word	0x40000400
 80060e0:	40023800 	.word	0x40023800
 80060e4:	20000cdc 	.word	0x20000cdc
 80060e8:	40026070 	.word	0x40026070
 80060ec:	20000d3c 	.word	0x20000d3c
 80060f0:	40026088 	.word	0x40026088
 80060f4:	20000c3c 	.word	0x20000c3c
 80060f8:	400260b8 	.word	0x400260b8
 80060fc:	20000ddc 	.word	0x20000ddc
 8006100:	40026040 	.word	0x40026040

08006104 <HAL_TIM_OC_MspInit>:

void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* tim_ocHandle)
{
 8006104:	b480      	push	{r7}
 8006106:	b085      	sub	sp, #20
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]

  if(tim_ocHandle->Instance==TIM4)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	4a0b      	ldr	r2, [pc, #44]	; (8006140 <HAL_TIM_OC_MspInit+0x3c>)
 8006112:	4293      	cmp	r3, r2
 8006114:	d10d      	bne.n	8006132 <HAL_TIM_OC_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8006116:	2300      	movs	r3, #0
 8006118:	60fb      	str	r3, [r7, #12]
 800611a:	4b0a      	ldr	r3, [pc, #40]	; (8006144 <HAL_TIM_OC_MspInit+0x40>)
 800611c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800611e:	4a09      	ldr	r2, [pc, #36]	; (8006144 <HAL_TIM_OC_MspInit+0x40>)
 8006120:	f043 0304 	orr.w	r3, r3, #4
 8006124:	6413      	str	r3, [r2, #64]	; 0x40
 8006126:	4b07      	ldr	r3, [pc, #28]	; (8006144 <HAL_TIM_OC_MspInit+0x40>)
 8006128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800612a:	f003 0304 	and.w	r3, r3, #4
 800612e:	60fb      	str	r3, [r7, #12]
 8006130:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8006132:	bf00      	nop
 8006134:	3714      	adds	r7, #20
 8006136:	46bd      	mov	sp, r7
 8006138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613c:	4770      	bx	lr
 800613e:	bf00      	nop
 8006140:	40000800 	.word	0x40000800
 8006144:	40023800 	.word	0x40023800

08006148 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8006148:	b580      	push	{r7, lr}
 800614a:	b084      	sub	sp, #16
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	4a0e      	ldr	r2, [pc, #56]	; (8006190 <HAL_TIM_Base_MspInit+0x48>)
 8006156:	4293      	cmp	r3, r2
 8006158:	d115      	bne.n	8006186 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800615a:	2300      	movs	r3, #0
 800615c:	60fb      	str	r3, [r7, #12]
 800615e:	4b0d      	ldr	r3, [pc, #52]	; (8006194 <HAL_TIM_Base_MspInit+0x4c>)
 8006160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006162:	4a0c      	ldr	r2, [pc, #48]	; (8006194 <HAL_TIM_Base_MspInit+0x4c>)
 8006164:	f043 0310 	orr.w	r3, r3, #16
 8006168:	6413      	str	r3, [r2, #64]	; 0x40
 800616a:	4b0a      	ldr	r3, [pc, #40]	; (8006194 <HAL_TIM_Base_MspInit+0x4c>)
 800616c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800616e:	f003 0310 	and.w	r3, r3, #16
 8006172:	60fb      	str	r3, [r7, #12]
 8006174:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8006176:	2200      	movs	r2, #0
 8006178:	2100      	movs	r1, #0
 800617a:	2036      	movs	r0, #54	; 0x36
 800617c:	f000 ff34 	bl	8006fe8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8006180:	2036      	movs	r0, #54	; 0x36
 8006182:	f000 ff4d 	bl	8007020 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8006186:	bf00      	nop
 8006188:	3710      	adds	r7, #16
 800618a:	46bd      	mov	sp, r7
 800618c:	bd80      	pop	{r7, pc}
 800618e:	bf00      	nop
 8006190:	40001000 	.word	0x40001000
 8006194:	40023800 	.word	0x40023800

08006198 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8006198:	b580      	push	{r7, lr}
 800619a:	b088      	sub	sp, #32
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80061a0:	f107 030c 	add.w	r3, r7, #12
 80061a4:	2200      	movs	r2, #0
 80061a6:	601a      	str	r2, [r3, #0]
 80061a8:	605a      	str	r2, [r3, #4]
 80061aa:	609a      	str	r2, [r3, #8]
 80061ac:	60da      	str	r2, [r3, #12]
 80061ae:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	4a12      	ldr	r2, [pc, #72]	; (8006200 <HAL_TIM_MspPostInit+0x68>)
 80061b6:	4293      	cmp	r3, r2
 80061b8:	d11e      	bne.n	80061f8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80061ba:	2300      	movs	r3, #0
 80061bc:	60bb      	str	r3, [r7, #8]
 80061be:	4b11      	ldr	r3, [pc, #68]	; (8006204 <HAL_TIM_MspPostInit+0x6c>)
 80061c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061c2:	4a10      	ldr	r2, [pc, #64]	; (8006204 <HAL_TIM_MspPostInit+0x6c>)
 80061c4:	f043 0304 	orr.w	r3, r3, #4
 80061c8:	6313      	str	r3, [r2, #48]	; 0x30
 80061ca:	4b0e      	ldr	r3, [pc, #56]	; (8006204 <HAL_TIM_MspPostInit+0x6c>)
 80061cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061ce:	f003 0304 	and.w	r3, r3, #4
 80061d2:	60bb      	str	r3, [r7, #8]
 80061d4:	68bb      	ldr	r3, [r7, #8]
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    PC8     ------> TIM3_CH3
    PC9     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = PWM0_Pin|PWM1_Pin|PWM2_Pin|PWM3_Pin;
 80061d6:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80061da:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80061dc:	2302      	movs	r3, #2
 80061de:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80061e0:	2300      	movs	r3, #0
 80061e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80061e4:	2303      	movs	r3, #3
 80061e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80061e8:	2302      	movs	r3, #2
 80061ea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80061ec:	f107 030c 	add.w	r3, r7, #12
 80061f0:	4619      	mov	r1, r3
 80061f2:	4805      	ldr	r0, [pc, #20]	; (8006208 <HAL_TIM_MspPostInit+0x70>)
 80061f4:	f002 fb56 	bl	80088a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80061f8:	bf00      	nop
 80061fa:	3720      	adds	r7, #32
 80061fc:	46bd      	mov	sp, r7
 80061fe:	bd80      	pop	{r7, pc}
 8006200:	40000400 	.word	0x40000400
 8006204:	40023800 	.word	0x40023800
 8006208:	40020800 	.word	0x40020800

0800620c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800620c:	b580      	push	{r7, lr}
 800620e:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8006210:	4b11      	ldr	r3, [pc, #68]	; (8006258 <MX_USART1_UART_Init+0x4c>)
 8006212:	4a12      	ldr	r2, [pc, #72]	; (800625c <MX_USART1_UART_Init+0x50>)
 8006214:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600;
 8006216:	4b10      	ldr	r3, [pc, #64]	; (8006258 <MX_USART1_UART_Init+0x4c>)
 8006218:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 800621c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800621e:	4b0e      	ldr	r3, [pc, #56]	; (8006258 <MX_USART1_UART_Init+0x4c>)
 8006220:	2200      	movs	r2, #0
 8006222:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8006224:	4b0c      	ldr	r3, [pc, #48]	; (8006258 <MX_USART1_UART_Init+0x4c>)
 8006226:	2200      	movs	r2, #0
 8006228:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800622a:	4b0b      	ldr	r3, [pc, #44]	; (8006258 <MX_USART1_UART_Init+0x4c>)
 800622c:	2200      	movs	r2, #0
 800622e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8006230:	4b09      	ldr	r3, [pc, #36]	; (8006258 <MX_USART1_UART_Init+0x4c>)
 8006232:	220c      	movs	r2, #12
 8006234:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006236:	4b08      	ldr	r3, [pc, #32]	; (8006258 <MX_USART1_UART_Init+0x4c>)
 8006238:	2200      	movs	r2, #0
 800623a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800623c:	4b06      	ldr	r3, [pc, #24]	; (8006258 <MX_USART1_UART_Init+0x4c>)
 800623e:	2200      	movs	r2, #0
 8006240:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8006242:	4805      	ldr	r0, [pc, #20]	; (8006258 <MX_USART1_UART_Init+0x4c>)
 8006244:	f005 f8e6 	bl	800b414 <HAL_UART_Init>
 8006248:	4603      	mov	r3, r0
 800624a:	2b00      	cmp	r3, #0
 800624c:	d001      	beq.n	8006252 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800624e:	f7fe f89b 	bl	8004388 <Error_Handler>
  }

}
 8006252:	bf00      	nop
 8006254:	bd80      	pop	{r7, pc}
 8006256:	bf00      	nop
 8006258:	20000e7c 	.word	0x20000e7c
 800625c:	40011000 	.word	0x40011000

08006260 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8006260:	b580      	push	{r7, lr}
 8006262:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8006264:	4b11      	ldr	r3, [pc, #68]	; (80062ac <MX_USART2_UART_Init+0x4c>)
 8006266:	4a12      	ldr	r2, [pc, #72]	; (80062b0 <MX_USART2_UART_Init+0x50>)
 8006268:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800626a:	4b10      	ldr	r3, [pc, #64]	; (80062ac <MX_USART2_UART_Init+0x4c>)
 800626c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006270:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8006272:	4b0e      	ldr	r3, [pc, #56]	; (80062ac <MX_USART2_UART_Init+0x4c>)
 8006274:	2200      	movs	r2, #0
 8006276:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8006278:	4b0c      	ldr	r3, [pc, #48]	; (80062ac <MX_USART2_UART_Init+0x4c>)
 800627a:	2200      	movs	r2, #0
 800627c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800627e:	4b0b      	ldr	r3, [pc, #44]	; (80062ac <MX_USART2_UART_Init+0x4c>)
 8006280:	2200      	movs	r2, #0
 8006282:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8006284:	4b09      	ldr	r3, [pc, #36]	; (80062ac <MX_USART2_UART_Init+0x4c>)
 8006286:	220c      	movs	r2, #12
 8006288:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800628a:	4b08      	ldr	r3, [pc, #32]	; (80062ac <MX_USART2_UART_Init+0x4c>)
 800628c:	2200      	movs	r2, #0
 800628e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8006290:	4b06      	ldr	r3, [pc, #24]	; (80062ac <MX_USART2_UART_Init+0x4c>)
 8006292:	2200      	movs	r2, #0
 8006294:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8006296:	4805      	ldr	r0, [pc, #20]	; (80062ac <MX_USART2_UART_Init+0x4c>)
 8006298:	f005 f8bc 	bl	800b414 <HAL_UART_Init>
 800629c:	4603      	mov	r3, r0
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d001      	beq.n	80062a6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80062a2:	f7fe f871 	bl	8004388 <Error_Handler>
  }

}
 80062a6:	bf00      	nop
 80062a8:	bd80      	pop	{r7, pc}
 80062aa:	bf00      	nop
 80062ac:	20000ebc 	.word	0x20000ebc
 80062b0:	40004400 	.word	0x40004400

080062b4 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80062b4:	b580      	push	{r7, lr}
 80062b6:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 80062b8:	4b11      	ldr	r3, [pc, #68]	; (8006300 <MX_USART3_UART_Init+0x4c>)
 80062ba:	4a12      	ldr	r2, [pc, #72]	; (8006304 <MX_USART3_UART_Init+0x50>)
 80062bc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 57600;
 80062be:	4b10      	ldr	r3, [pc, #64]	; (8006300 <MX_USART3_UART_Init+0x4c>)
 80062c0:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 80062c4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80062c6:	4b0e      	ldr	r3, [pc, #56]	; (8006300 <MX_USART3_UART_Init+0x4c>)
 80062c8:	2200      	movs	r2, #0
 80062ca:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80062cc:	4b0c      	ldr	r3, [pc, #48]	; (8006300 <MX_USART3_UART_Init+0x4c>)
 80062ce:	2200      	movs	r2, #0
 80062d0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80062d2:	4b0b      	ldr	r3, [pc, #44]	; (8006300 <MX_USART3_UART_Init+0x4c>)
 80062d4:	2200      	movs	r2, #0
 80062d6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80062d8:	4b09      	ldr	r3, [pc, #36]	; (8006300 <MX_USART3_UART_Init+0x4c>)
 80062da:	220c      	movs	r2, #12
 80062dc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80062de:	4b08      	ldr	r3, [pc, #32]	; (8006300 <MX_USART3_UART_Init+0x4c>)
 80062e0:	2200      	movs	r2, #0
 80062e2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80062e4:	4b06      	ldr	r3, [pc, #24]	; (8006300 <MX_USART3_UART_Init+0x4c>)
 80062e6:	2200      	movs	r2, #0
 80062e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80062ea:	4805      	ldr	r0, [pc, #20]	; (8006300 <MX_USART3_UART_Init+0x4c>)
 80062ec:	f005 f892 	bl	800b414 <HAL_UART_Init>
 80062f0:	4603      	mov	r3, r0
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d001      	beq.n	80062fa <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80062f6:	f7fe f847 	bl	8004388 <Error_Handler>
  }

}
 80062fa:	bf00      	nop
 80062fc:	bd80      	pop	{r7, pc}
 80062fe:	bf00      	nop
 8006300:	20000e3c 	.word	0x20000e3c
 8006304:	40004800 	.word	0x40004800

08006308 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8006308:	b580      	push	{r7, lr}
 800630a:	b08e      	sub	sp, #56	; 0x38
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006310:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006314:	2200      	movs	r2, #0
 8006316:	601a      	str	r2, [r3, #0]
 8006318:	605a      	str	r2, [r3, #4]
 800631a:	609a      	str	r2, [r3, #8]
 800631c:	60da      	str	r2, [r3, #12]
 800631e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	4a58      	ldr	r2, [pc, #352]	; (8006488 <HAL_UART_MspInit+0x180>)
 8006326:	4293      	cmp	r3, r2
 8006328:	d135      	bne.n	8006396 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800632a:	2300      	movs	r3, #0
 800632c:	623b      	str	r3, [r7, #32]
 800632e:	4b57      	ldr	r3, [pc, #348]	; (800648c <HAL_UART_MspInit+0x184>)
 8006330:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006332:	4a56      	ldr	r2, [pc, #344]	; (800648c <HAL_UART_MspInit+0x184>)
 8006334:	f043 0310 	orr.w	r3, r3, #16
 8006338:	6453      	str	r3, [r2, #68]	; 0x44
 800633a:	4b54      	ldr	r3, [pc, #336]	; (800648c <HAL_UART_MspInit+0x184>)
 800633c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800633e:	f003 0310 	and.w	r3, r3, #16
 8006342:	623b      	str	r3, [r7, #32]
 8006344:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006346:	2300      	movs	r3, #0
 8006348:	61fb      	str	r3, [r7, #28]
 800634a:	4b50      	ldr	r3, [pc, #320]	; (800648c <HAL_UART_MspInit+0x184>)
 800634c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800634e:	4a4f      	ldr	r2, [pc, #316]	; (800648c <HAL_UART_MspInit+0x184>)
 8006350:	f043 0301 	orr.w	r3, r3, #1
 8006354:	6313      	str	r3, [r2, #48]	; 0x30
 8006356:	4b4d      	ldr	r3, [pc, #308]	; (800648c <HAL_UART_MspInit+0x184>)
 8006358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800635a:	f003 0301 	and.w	r3, r3, #1
 800635e:	61fb      	str	r3, [r7, #28]
 8006360:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = SIM_RxD_Pin|SIM_TxD_Pin;
 8006362:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8006366:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006368:	2302      	movs	r3, #2
 800636a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800636c:	2300      	movs	r3, #0
 800636e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006370:	2303      	movs	r3, #3
 8006372:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8006374:	2307      	movs	r3, #7
 8006376:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006378:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800637c:	4619      	mov	r1, r3
 800637e:	4844      	ldr	r0, [pc, #272]	; (8006490 <HAL_UART_MspInit+0x188>)
 8006380:	f002 fa90 	bl	80088a4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8006384:	2200      	movs	r2, #0
 8006386:	2100      	movs	r1, #0
 8006388:	2025      	movs	r0, #37	; 0x25
 800638a:	f000 fe2d 	bl	8006fe8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800638e:	2025      	movs	r0, #37	; 0x25
 8006390:	f000 fe46 	bl	8007020 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8006394:	e073      	b.n	800647e <HAL_UART_MspInit+0x176>
  else if(uartHandle->Instance==USART2)
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	4a3e      	ldr	r2, [pc, #248]	; (8006494 <HAL_UART_MspInit+0x18c>)
 800639c:	4293      	cmp	r3, r2
 800639e:	d134      	bne.n	800640a <HAL_UART_MspInit+0x102>
    __HAL_RCC_USART2_CLK_ENABLE();
 80063a0:	2300      	movs	r3, #0
 80063a2:	61bb      	str	r3, [r7, #24]
 80063a4:	4b39      	ldr	r3, [pc, #228]	; (800648c <HAL_UART_MspInit+0x184>)
 80063a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063a8:	4a38      	ldr	r2, [pc, #224]	; (800648c <HAL_UART_MspInit+0x184>)
 80063aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80063ae:	6413      	str	r3, [r2, #64]	; 0x40
 80063b0:	4b36      	ldr	r3, [pc, #216]	; (800648c <HAL_UART_MspInit+0x184>)
 80063b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063b8:	61bb      	str	r3, [r7, #24]
 80063ba:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80063bc:	2300      	movs	r3, #0
 80063be:	617b      	str	r3, [r7, #20]
 80063c0:	4b32      	ldr	r3, [pc, #200]	; (800648c <HAL_UART_MspInit+0x184>)
 80063c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063c4:	4a31      	ldr	r2, [pc, #196]	; (800648c <HAL_UART_MspInit+0x184>)
 80063c6:	f043 0308 	orr.w	r3, r3, #8
 80063ca:	6313      	str	r3, [r2, #48]	; 0x30
 80063cc:	4b2f      	ldr	r3, [pc, #188]	; (800648c <HAL_UART_MspInit+0x184>)
 80063ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063d0:	f003 0308 	and.w	r3, r3, #8
 80063d4:	617b      	str	r3, [r7, #20]
 80063d6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = RS485_RxD_Pin|RS485_TxD_Pin;
 80063d8:	2360      	movs	r3, #96	; 0x60
 80063da:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80063dc:	2302      	movs	r3, #2
 80063de:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80063e0:	2300      	movs	r3, #0
 80063e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80063e4:	2303      	movs	r3, #3
 80063e6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80063e8:	2307      	movs	r3, #7
 80063ea:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80063ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80063f0:	4619      	mov	r1, r3
 80063f2:	4829      	ldr	r0, [pc, #164]	; (8006498 <HAL_UART_MspInit+0x190>)
 80063f4:	f002 fa56 	bl	80088a4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80063f8:	2200      	movs	r2, #0
 80063fa:	2100      	movs	r1, #0
 80063fc:	2026      	movs	r0, #38	; 0x26
 80063fe:	f000 fdf3 	bl	8006fe8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8006402:	2026      	movs	r0, #38	; 0x26
 8006404:	f000 fe0c 	bl	8007020 <HAL_NVIC_EnableIRQ>
}
 8006408:	e039      	b.n	800647e <HAL_UART_MspInit+0x176>
  else if(uartHandle->Instance==USART3)
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	4a23      	ldr	r2, [pc, #140]	; (800649c <HAL_UART_MspInit+0x194>)
 8006410:	4293      	cmp	r3, r2
 8006412:	d134      	bne.n	800647e <HAL_UART_MspInit+0x176>
    __HAL_RCC_USART3_CLK_ENABLE();
 8006414:	2300      	movs	r3, #0
 8006416:	613b      	str	r3, [r7, #16]
 8006418:	4b1c      	ldr	r3, [pc, #112]	; (800648c <HAL_UART_MspInit+0x184>)
 800641a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800641c:	4a1b      	ldr	r2, [pc, #108]	; (800648c <HAL_UART_MspInit+0x184>)
 800641e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006422:	6413      	str	r3, [r2, #64]	; 0x40
 8006424:	4b19      	ldr	r3, [pc, #100]	; (800648c <HAL_UART_MspInit+0x184>)
 8006426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006428:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800642c:	613b      	str	r3, [r7, #16]
 800642e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006430:	2300      	movs	r3, #0
 8006432:	60fb      	str	r3, [r7, #12]
 8006434:	4b15      	ldr	r3, [pc, #84]	; (800648c <HAL_UART_MspInit+0x184>)
 8006436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006438:	4a14      	ldr	r2, [pc, #80]	; (800648c <HAL_UART_MspInit+0x184>)
 800643a:	f043 0304 	orr.w	r3, r3, #4
 800643e:	6313      	str	r3, [r2, #48]	; 0x30
 8006440:	4b12      	ldr	r3, [pc, #72]	; (800648c <HAL_UART_MspInit+0x184>)
 8006442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006444:	f003 0304 	and.w	r3, r3, #4
 8006448:	60fb      	str	r3, [r7, #12]
 800644a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = COM_RxD_Pin|COM_TxD_Pin;
 800644c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8006450:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006452:	2302      	movs	r3, #2
 8006454:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006456:	2300      	movs	r3, #0
 8006458:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800645a:	2303      	movs	r3, #3
 800645c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800645e:	2307      	movs	r3, #7
 8006460:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006462:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006466:	4619      	mov	r1, r3
 8006468:	480d      	ldr	r0, [pc, #52]	; (80064a0 <HAL_UART_MspInit+0x198>)
 800646a:	f002 fa1b 	bl	80088a4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800646e:	2200      	movs	r2, #0
 8006470:	2100      	movs	r1, #0
 8006472:	2027      	movs	r0, #39	; 0x27
 8006474:	f000 fdb8 	bl	8006fe8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8006478:	2027      	movs	r0, #39	; 0x27
 800647a:	f000 fdd1 	bl	8007020 <HAL_NVIC_EnableIRQ>
}
 800647e:	bf00      	nop
 8006480:	3738      	adds	r7, #56	; 0x38
 8006482:	46bd      	mov	sp, r7
 8006484:	bd80      	pop	{r7, pc}
 8006486:	bf00      	nop
 8006488:	40011000 	.word	0x40011000
 800648c:	40023800 	.word	0x40023800
 8006490:	40020000 	.word	0x40020000
 8006494:	40004400 	.word	0x40004400
 8006498:	40020c00 	.word	0x40020c00
 800649c:	40004800 	.word	0x40004800
 80064a0:	40020800 	.word	0x40020800

080064a4 <dbg_available>:
volatile dbg_rx_buffer_index_t dbg_rx_buffer_head = 0;
volatile dbg_rx_buffer_index_t dbg_rx_buffer_tail = 0;
uint8_t dbg_rx_buffer[DBG_RX_BUFFER_SIZE] = {0,};

int16_t dbg_available(void)
{
 80064a4:	b480      	push	{r7}
 80064a6:	af00      	add	r7, sp, #0
	return ((uint16_t)(DBG_RX_BUFFER_SIZE + dbg_rx_buffer_head - dbg_rx_buffer_tail)) % DBG_RX_BUFFER_SIZE;
 80064a8:	4b0a      	ldr	r3, [pc, #40]	; (80064d4 <dbg_available+0x30>)
 80064aa:	781b      	ldrb	r3, [r3, #0]
 80064ac:	b2db      	uxtb	r3, r3
 80064ae:	b29a      	uxth	r2, r3
 80064b0:	4b09      	ldr	r3, [pc, #36]	; (80064d8 <dbg_available+0x34>)
 80064b2:	781b      	ldrb	r3, [r3, #0]
 80064b4:	b2db      	uxtb	r3, r3
 80064b6:	b29b      	uxth	r3, r3
 80064b8:	1ad3      	subs	r3, r2, r3
 80064ba:	b29b      	uxth	r3, r3
 80064bc:	3340      	adds	r3, #64	; 0x40
 80064be:	b29b      	uxth	r3, r3
 80064c0:	b21b      	sxth	r3, r3
 80064c2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80064c6:	b21b      	sxth	r3, r3
}
 80064c8:	4618      	mov	r0, r3
 80064ca:	46bd      	mov	sp, r7
 80064cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d0:	4770      	bx	lr
 80064d2:	bf00      	nop
 80064d4:	200003e0 	.word	0x200003e0
 80064d8:	200003e1 	.word	0x200003e1

080064dc <dbg_read>:

int16_t dbg_read(void)
{
 80064dc:	b480      	push	{r7}
 80064de:	b083      	sub	sp, #12
 80064e0:	af00      	add	r7, sp, #0
	if(dbg_rx_buffer_head == dbg_rx_buffer_tail)
 80064e2:	4b12      	ldr	r3, [pc, #72]	; (800652c <dbg_read+0x50>)
 80064e4:	781b      	ldrb	r3, [r3, #0]
 80064e6:	b2da      	uxtb	r2, r3
 80064e8:	4b11      	ldr	r3, [pc, #68]	; (8006530 <dbg_read+0x54>)
 80064ea:	781b      	ldrb	r3, [r3, #0]
 80064ec:	b2db      	uxtb	r3, r3
 80064ee:	429a      	cmp	r2, r3
 80064f0:	d102      	bne.n	80064f8 <dbg_read+0x1c>
	{
		return -1;
 80064f2:	f04f 33ff 	mov.w	r3, #4294967295
 80064f6:	e012      	b.n	800651e <dbg_read+0x42>
	}
	else
	{
		uint8_t c = dbg_rx_buffer[dbg_rx_buffer_tail];
 80064f8:	4b0d      	ldr	r3, [pc, #52]	; (8006530 <dbg_read+0x54>)
 80064fa:	781b      	ldrb	r3, [r3, #0]
 80064fc:	b2db      	uxtb	r3, r3
 80064fe:	461a      	mov	r2, r3
 8006500:	4b0c      	ldr	r3, [pc, #48]	; (8006534 <dbg_read+0x58>)
 8006502:	5c9b      	ldrb	r3, [r3, r2]
 8006504:	71fb      	strb	r3, [r7, #7]
		dbg_rx_buffer_tail = (dbg_rx_buffer_index_t)(dbg_rx_buffer_tail + 1) % DBG_RX_BUFFER_SIZE;
 8006506:	4b0a      	ldr	r3, [pc, #40]	; (8006530 <dbg_read+0x54>)
 8006508:	781b      	ldrb	r3, [r3, #0]
 800650a:	b2db      	uxtb	r3, r3
 800650c:	3301      	adds	r3, #1
 800650e:	b2db      	uxtb	r3, r3
 8006510:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006514:	b2da      	uxtb	r2, r3
 8006516:	4b06      	ldr	r3, [pc, #24]	; (8006530 <dbg_read+0x54>)
 8006518:	701a      	strb	r2, [r3, #0]
		return c;
 800651a:	79fb      	ldrb	r3, [r7, #7]
 800651c:	b21b      	sxth	r3, r3
	}
}
 800651e:	4618      	mov	r0, r3
 8006520:	370c      	adds	r7, #12
 8006522:	46bd      	mov	sp, r7
 8006524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006528:	4770      	bx	lr
 800652a:	bf00      	nop
 800652c:	200003e0 	.word	0x200003e0
 8006530:	200003e1 	.word	0x200003e1
 8006534:	200003e4 	.word	0x200003e4

08006538 <EN_Interrupt>:
		return c;
	}
}
//-----------------------------------------------------------------------------------------------------------------
void EN_Interrupt(void)
{
 8006538:	b480      	push	{r7}
 800653a:	af00      	add	r7, sp, #0
	__HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE);
 800653c:	4b0e      	ldr	r3, [pc, #56]	; (8006578 <EN_Interrupt+0x40>)
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	68da      	ldr	r2, [r3, #12]
 8006542:	4b0d      	ldr	r3, [pc, #52]	; (8006578 <EN_Interrupt+0x40>)
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f042 0220 	orr.w	r2, r2, #32
 800654a:	60da      	str	r2, [r3, #12]
	__HAL_UART_ENABLE_IT(&huart3, UART_IT_RXNE);
 800654c:	4b0b      	ldr	r3, [pc, #44]	; (800657c <EN_Interrupt+0x44>)
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	68da      	ldr	r2, [r3, #12]
 8006552:	4b0a      	ldr	r3, [pc, #40]	; (800657c <EN_Interrupt+0x44>)
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f042 0220 	orr.w	r2, r2, #32
 800655a:	60da      	str	r2, [r3, #12]
	__HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE);
 800655c:	4b08      	ldr	r3, [pc, #32]	; (8006580 <EN_Interrupt+0x48>)
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	68da      	ldr	r2, [r3, #12]
 8006562:	4b07      	ldr	r3, [pc, #28]	; (8006580 <EN_Interrupt+0x48>)
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f042 0220 	orr.w	r2, r2, #32
 800656a:	60da      	str	r2, [r3, #12]

	//__HAL_SPI_ENABLE_IT(&hspi2, SPI_IT_RXNE);
}
 800656c:	bf00      	nop
 800656e:	46bd      	mov	sp, r7
 8006570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006574:	4770      	bx	lr
 8006576:	bf00      	nop
 8006578:	20000e7c 	.word	0x20000e7c
 800657c:	20000e3c 	.word	0x20000e3c
 8006580:	20000ebc 	.word	0x20000ebc

08006584 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8006584:	f8df d034 	ldr.w	sp, [pc, #52]	; 80065bc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8006588:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800658a:	e003      	b.n	8006594 <LoopCopyDataInit>

0800658c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800658c:	4b0c      	ldr	r3, [pc, #48]	; (80065c0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800658e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8006590:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8006592:	3104      	adds	r1, #4

08006594 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8006594:	480b      	ldr	r0, [pc, #44]	; (80065c4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8006596:	4b0c      	ldr	r3, [pc, #48]	; (80065c8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8006598:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800659a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800659c:	d3f6      	bcc.n	800658c <CopyDataInit>
  ldr  r2, =_sbss
 800659e:	4a0b      	ldr	r2, [pc, #44]	; (80065cc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80065a0:	e002      	b.n	80065a8 <LoopFillZerobss>

080065a2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80065a2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80065a4:	f842 3b04 	str.w	r3, [r2], #4

080065a8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80065a8:	4b09      	ldr	r3, [pc, #36]	; (80065d0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80065aa:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80065ac:	d3f9      	bcc.n	80065a2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80065ae:	f7ff f827 	bl	8005600 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80065b2:	f011 fc85 	bl	8017ec0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80065b6:	f7fd fd4b 	bl	8004050 <main>
  bx  lr    
 80065ba:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80065bc:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80065c0:	08021408 	.word	0x08021408
  ldr  r0, =_sdata
 80065c4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80065c8:	2000024c 	.word	0x2000024c
  ldr  r2, =_sbss
 80065cc:	20000250 	.word	0x20000250
  ldr  r3, = _ebss
 80065d0:	200071a4 	.word	0x200071a4

080065d4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80065d4:	e7fe      	b.n	80065d4 <ADC_IRQHandler>
	...

080065d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80065d8:	b580      	push	{r7, lr}
 80065da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80065dc:	4b0e      	ldr	r3, [pc, #56]	; (8006618 <HAL_Init+0x40>)
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	4a0d      	ldr	r2, [pc, #52]	; (8006618 <HAL_Init+0x40>)
 80065e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80065e6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80065e8:	4b0b      	ldr	r3, [pc, #44]	; (8006618 <HAL_Init+0x40>)
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	4a0a      	ldr	r2, [pc, #40]	; (8006618 <HAL_Init+0x40>)
 80065ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80065f2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80065f4:	4b08      	ldr	r3, [pc, #32]	; (8006618 <HAL_Init+0x40>)
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	4a07      	ldr	r2, [pc, #28]	; (8006618 <HAL_Init+0x40>)
 80065fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80065fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006600:	2003      	movs	r0, #3
 8006602:	f000 fce6 	bl	8006fd2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006606:	2000      	movs	r0, #0
 8006608:	f7fe fd7a 	bl	8005100 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800660c:	f7fe fd50 	bl	80050b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006610:	2300      	movs	r3, #0
}
 8006612:	4618      	mov	r0, r3
 8006614:	bd80      	pop	{r7, pc}
 8006616:	bf00      	nop
 8006618:	40023c00 	.word	0x40023c00

0800661c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800661c:	b480      	push	{r7}
 800661e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006620:	4b06      	ldr	r3, [pc, #24]	; (800663c <HAL_IncTick+0x20>)
 8006622:	781b      	ldrb	r3, [r3, #0]
 8006624:	461a      	mov	r2, r3
 8006626:	4b06      	ldr	r3, [pc, #24]	; (8006640 <HAL_IncTick+0x24>)
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	4413      	add	r3, r2
 800662c:	4a04      	ldr	r2, [pc, #16]	; (8006640 <HAL_IncTick+0x24>)
 800662e:	6013      	str	r3, [r2, #0]
}
 8006630:	bf00      	nop
 8006632:	46bd      	mov	sp, r7
 8006634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006638:	4770      	bx	lr
 800663a:	bf00      	nop
 800663c:	20000064 	.word	0x20000064
 8006640:	20000efc 	.word	0x20000efc

08006644 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006644:	b480      	push	{r7}
 8006646:	af00      	add	r7, sp, #0
  return uwTick;
 8006648:	4b03      	ldr	r3, [pc, #12]	; (8006658 <HAL_GetTick+0x14>)
 800664a:	681b      	ldr	r3, [r3, #0]
}
 800664c:	4618      	mov	r0, r3
 800664e:	46bd      	mov	sp, r7
 8006650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006654:	4770      	bx	lr
 8006656:	bf00      	nop
 8006658:	20000efc 	.word	0x20000efc

0800665c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800665c:	b580      	push	{r7, lr}
 800665e:	b084      	sub	sp, #16
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006664:	f7ff ffee 	bl	8006644 <HAL_GetTick>
 8006668:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006674:	d005      	beq.n	8006682 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006676:	4b0a      	ldr	r3, [pc, #40]	; (80066a0 <HAL_Delay+0x44>)
 8006678:	781b      	ldrb	r3, [r3, #0]
 800667a:	461a      	mov	r2, r3
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	4413      	add	r3, r2
 8006680:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8006682:	bf00      	nop
 8006684:	f7ff ffde 	bl	8006644 <HAL_GetTick>
 8006688:	4602      	mov	r2, r0
 800668a:	68bb      	ldr	r3, [r7, #8]
 800668c:	1ad3      	subs	r3, r2, r3
 800668e:	68fa      	ldr	r2, [r7, #12]
 8006690:	429a      	cmp	r2, r3
 8006692:	d8f7      	bhi.n	8006684 <HAL_Delay+0x28>
  {
  }
}
 8006694:	bf00      	nop
 8006696:	bf00      	nop
 8006698:	3710      	adds	r7, #16
 800669a:	46bd      	mov	sp, r7
 800669c:	bd80      	pop	{r7, pc}
 800669e:	bf00      	nop
 80066a0:	20000064 	.word	0x20000064

080066a4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80066a4:	b580      	push	{r7, lr}
 80066a6:	b084      	sub	sp, #16
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80066ac:	2300      	movs	r3, #0
 80066ae:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d101      	bne.n	80066ba <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80066b6:	2301      	movs	r3, #1
 80066b8:	e033      	b.n	8006722 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d109      	bne.n	80066d6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80066c2:	6878      	ldr	r0, [r7, #4]
 80066c4:	f7fa fcce 	bl	8001064 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2200      	movs	r2, #0
 80066cc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	2200      	movs	r2, #0
 80066d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066da:	f003 0310 	and.w	r3, r3, #16
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d118      	bne.n	8006714 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066e6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80066ea:	f023 0302 	bic.w	r3, r3, #2
 80066ee:	f043 0202 	orr.w	r2, r3, #2
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80066f6:	6878      	ldr	r0, [r7, #4]
 80066f8:	f000 fa40 	bl	8006b7c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2200      	movs	r2, #0
 8006700:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006706:	f023 0303 	bic.w	r3, r3, #3
 800670a:	f043 0201 	orr.w	r2, r3, #1
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	641a      	str	r2, [r3, #64]	; 0x40
 8006712:	e001      	b.n	8006718 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8006714:	2301      	movs	r3, #1
 8006716:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2200      	movs	r2, #0
 800671c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8006720:	7bfb      	ldrb	r3, [r7, #15]
}
 8006722:	4618      	mov	r0, r3
 8006724:	3710      	adds	r7, #16
 8006726:	46bd      	mov	sp, r7
 8006728:	bd80      	pop	{r7, pc}
	...

0800672c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800672c:	b580      	push	{r7, lr}
 800672e:	b086      	sub	sp, #24
 8006730:	af00      	add	r7, sp, #0
 8006732:	60f8      	str	r0, [r7, #12]
 8006734:	60b9      	str	r1, [r7, #8]
 8006736:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8006738:	2300      	movs	r3, #0
 800673a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006742:	2b01      	cmp	r3, #1
 8006744:	d101      	bne.n	800674a <HAL_ADC_Start_DMA+0x1e>
 8006746:	2302      	movs	r3, #2
 8006748:	e0cc      	b.n	80068e4 <HAL_ADC_Start_DMA+0x1b8>
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	2201      	movs	r2, #1
 800674e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	689b      	ldr	r3, [r3, #8]
 8006758:	f003 0301 	and.w	r3, r3, #1
 800675c:	2b01      	cmp	r3, #1
 800675e:	d018      	beq.n	8006792 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	689a      	ldr	r2, [r3, #8]
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f042 0201 	orr.w	r2, r2, #1
 800676e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8006770:	4b5e      	ldr	r3, [pc, #376]	; (80068ec <HAL_ADC_Start_DMA+0x1c0>)
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	4a5e      	ldr	r2, [pc, #376]	; (80068f0 <HAL_ADC_Start_DMA+0x1c4>)
 8006776:	fba2 2303 	umull	r2, r3, r2, r3
 800677a:	0c9a      	lsrs	r2, r3, #18
 800677c:	4613      	mov	r3, r2
 800677e:	005b      	lsls	r3, r3, #1
 8006780:	4413      	add	r3, r2
 8006782:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8006784:	e002      	b.n	800678c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8006786:	693b      	ldr	r3, [r7, #16]
 8006788:	3b01      	subs	r3, #1
 800678a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800678c:	693b      	ldr	r3, [r7, #16]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d1f9      	bne.n	8006786 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	689b      	ldr	r3, [r3, #8]
 8006798:	f003 0301 	and.w	r3, r3, #1
 800679c:	2b01      	cmp	r3, #1
 800679e:	f040 80a0 	bne.w	80068e2 <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067a6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80067aa:	f023 0301 	bic.w	r3, r3, #1
 80067ae:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	685b      	ldr	r3, [r3, #4]
 80067bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d007      	beq.n	80067d4 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067c8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80067cc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80067dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067e0:	d106      	bne.n	80067f0 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067e6:	f023 0206 	bic.w	r2, r3, #6
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	645a      	str	r2, [r3, #68]	; 0x44
 80067ee:	e002      	b.n	80067f6 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	2200      	movs	r2, #0
 80067f4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	2200      	movs	r2, #0
 80067fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80067fe:	4b3d      	ldr	r3, [pc, #244]	; (80068f4 <HAL_ADC_Start_DMA+0x1c8>)
 8006800:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006806:	4a3c      	ldr	r2, [pc, #240]	; (80068f8 <HAL_ADC_Start_DMA+0x1cc>)
 8006808:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800680e:	4a3b      	ldr	r2, [pc, #236]	; (80068fc <HAL_ADC_Start_DMA+0x1d0>)
 8006810:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006816:	4a3a      	ldr	r2, [pc, #232]	; (8006900 <HAL_ADC_Start_DMA+0x1d4>)
 8006818:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8006822:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	685a      	ldr	r2, [r3, #4]
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8006832:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	689a      	ldr	r2, [r3, #8]
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006842:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	334c      	adds	r3, #76	; 0x4c
 800684e:	4619      	mov	r1, r3
 8006850:	68ba      	ldr	r2, [r7, #8]
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	f000 fca0 	bl	8007198 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8006858:	697b      	ldr	r3, [r7, #20]
 800685a:	685b      	ldr	r3, [r3, #4]
 800685c:	f003 031f 	and.w	r3, r3, #31
 8006860:	2b00      	cmp	r3, #0
 8006862:	d12a      	bne.n	80068ba <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	4a26      	ldr	r2, [pc, #152]	; (8006904 <HAL_ADC_Start_DMA+0x1d8>)
 800686a:	4293      	cmp	r3, r2
 800686c:	d015      	beq.n	800689a <HAL_ADC_Start_DMA+0x16e>
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	4a25      	ldr	r2, [pc, #148]	; (8006908 <HAL_ADC_Start_DMA+0x1dc>)
 8006874:	4293      	cmp	r3, r2
 8006876:	d105      	bne.n	8006884 <HAL_ADC_Start_DMA+0x158>
 8006878:	4b1e      	ldr	r3, [pc, #120]	; (80068f4 <HAL_ADC_Start_DMA+0x1c8>)
 800687a:	685b      	ldr	r3, [r3, #4]
 800687c:	f003 031f 	and.w	r3, r3, #31
 8006880:	2b00      	cmp	r3, #0
 8006882:	d00a      	beq.n	800689a <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	4a20      	ldr	r2, [pc, #128]	; (800690c <HAL_ADC_Start_DMA+0x1e0>)
 800688a:	4293      	cmp	r3, r2
 800688c:	d129      	bne.n	80068e2 <HAL_ADC_Start_DMA+0x1b6>
 800688e:	4b19      	ldr	r3, [pc, #100]	; (80068f4 <HAL_ADC_Start_DMA+0x1c8>)
 8006890:	685b      	ldr	r3, [r3, #4]
 8006892:	f003 0310 	and.w	r3, r3, #16
 8006896:	2b00      	cmp	r3, #0
 8006898:	d123      	bne.n	80068e2 <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	689b      	ldr	r3, [r3, #8]
 80068a0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d11c      	bne.n	80068e2 <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	689a      	ldr	r2, [r3, #8]
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80068b6:	609a      	str	r2, [r3, #8]
 80068b8:	e013      	b.n	80068e2 <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	4a11      	ldr	r2, [pc, #68]	; (8006904 <HAL_ADC_Start_DMA+0x1d8>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d10e      	bne.n	80068e2 <HAL_ADC_Start_DMA+0x1b6>
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	689b      	ldr	r3, [r3, #8]
 80068ca:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d107      	bne.n	80068e2 <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	689a      	ldr	r2, [r3, #8]
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80068e0:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80068e2:	2300      	movs	r3, #0
}
 80068e4:	4618      	mov	r0, r3
 80068e6:	3718      	adds	r7, #24
 80068e8:	46bd      	mov	sp, r7
 80068ea:	bd80      	pop	{r7, pc}
 80068ec:	2000005c 	.word	0x2000005c
 80068f0:	431bde83 	.word	0x431bde83
 80068f4:	40012300 	.word	0x40012300
 80068f8:	08006d75 	.word	0x08006d75
 80068fc:	08006e2f 	.word	0x08006e2f
 8006900:	08006e4b 	.word	0x08006e4b
 8006904:	40012000 	.word	0x40012000
 8006908:	40012100 	.word	0x40012100
 800690c:	40012200 	.word	0x40012200

08006910 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8006910:	b480      	push	{r7}
 8006912:	b083      	sub	sp, #12
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8006918:	bf00      	nop
 800691a:	370c      	adds	r7, #12
 800691c:	46bd      	mov	sp, r7
 800691e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006922:	4770      	bx	lr

08006924 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8006924:	b480      	push	{r7}
 8006926:	b083      	sub	sp, #12
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800692c:	bf00      	nop
 800692e:	370c      	adds	r7, #12
 8006930:	46bd      	mov	sp, r7
 8006932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006936:	4770      	bx	lr

08006938 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8006938:	b480      	push	{r7}
 800693a:	b085      	sub	sp, #20
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
 8006940:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8006942:	2300      	movs	r3, #0
 8006944:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800694c:	2b01      	cmp	r3, #1
 800694e:	d101      	bne.n	8006954 <HAL_ADC_ConfigChannel+0x1c>
 8006950:	2302      	movs	r3, #2
 8006952:	e105      	b.n	8006b60 <HAL_ADC_ConfigChannel+0x228>
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2201      	movs	r2, #1
 8006958:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	2b09      	cmp	r3, #9
 8006962:	d925      	bls.n	80069b0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	68d9      	ldr	r1, [r3, #12]
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	b29b      	uxth	r3, r3
 8006970:	461a      	mov	r2, r3
 8006972:	4613      	mov	r3, r2
 8006974:	005b      	lsls	r3, r3, #1
 8006976:	4413      	add	r3, r2
 8006978:	3b1e      	subs	r3, #30
 800697a:	2207      	movs	r2, #7
 800697c:	fa02 f303 	lsl.w	r3, r2, r3
 8006980:	43da      	mvns	r2, r3
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	400a      	ands	r2, r1
 8006988:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	68d9      	ldr	r1, [r3, #12]
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	689a      	ldr	r2, [r3, #8]
 8006994:	683b      	ldr	r3, [r7, #0]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	b29b      	uxth	r3, r3
 800699a:	4618      	mov	r0, r3
 800699c:	4603      	mov	r3, r0
 800699e:	005b      	lsls	r3, r3, #1
 80069a0:	4403      	add	r3, r0
 80069a2:	3b1e      	subs	r3, #30
 80069a4:	409a      	lsls	r2, r3
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	430a      	orrs	r2, r1
 80069ac:	60da      	str	r2, [r3, #12]
 80069ae:	e022      	b.n	80069f6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	6919      	ldr	r1, [r3, #16]
 80069b6:	683b      	ldr	r3, [r7, #0]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	b29b      	uxth	r3, r3
 80069bc:	461a      	mov	r2, r3
 80069be:	4613      	mov	r3, r2
 80069c0:	005b      	lsls	r3, r3, #1
 80069c2:	4413      	add	r3, r2
 80069c4:	2207      	movs	r2, #7
 80069c6:	fa02 f303 	lsl.w	r3, r2, r3
 80069ca:	43da      	mvns	r2, r3
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	400a      	ands	r2, r1
 80069d2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	6919      	ldr	r1, [r3, #16]
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	689a      	ldr	r2, [r3, #8]
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	b29b      	uxth	r3, r3
 80069e4:	4618      	mov	r0, r3
 80069e6:	4603      	mov	r3, r0
 80069e8:	005b      	lsls	r3, r3, #1
 80069ea:	4403      	add	r3, r0
 80069ec:	409a      	lsls	r2, r3
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	430a      	orrs	r2, r1
 80069f4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80069f6:	683b      	ldr	r3, [r7, #0]
 80069f8:	685b      	ldr	r3, [r3, #4]
 80069fa:	2b06      	cmp	r3, #6
 80069fc:	d824      	bhi.n	8006a48 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	685a      	ldr	r2, [r3, #4]
 8006a08:	4613      	mov	r3, r2
 8006a0a:	009b      	lsls	r3, r3, #2
 8006a0c:	4413      	add	r3, r2
 8006a0e:	3b05      	subs	r3, #5
 8006a10:	221f      	movs	r2, #31
 8006a12:	fa02 f303 	lsl.w	r3, r2, r3
 8006a16:	43da      	mvns	r2, r3
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	400a      	ands	r2, r1
 8006a1e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	b29b      	uxth	r3, r3
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	683b      	ldr	r3, [r7, #0]
 8006a30:	685a      	ldr	r2, [r3, #4]
 8006a32:	4613      	mov	r3, r2
 8006a34:	009b      	lsls	r3, r3, #2
 8006a36:	4413      	add	r3, r2
 8006a38:	3b05      	subs	r3, #5
 8006a3a:	fa00 f203 	lsl.w	r2, r0, r3
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	430a      	orrs	r2, r1
 8006a44:	635a      	str	r2, [r3, #52]	; 0x34
 8006a46:	e04c      	b.n	8006ae2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	685b      	ldr	r3, [r3, #4]
 8006a4c:	2b0c      	cmp	r3, #12
 8006a4e:	d824      	bhi.n	8006a9a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006a56:	683b      	ldr	r3, [r7, #0]
 8006a58:	685a      	ldr	r2, [r3, #4]
 8006a5a:	4613      	mov	r3, r2
 8006a5c:	009b      	lsls	r3, r3, #2
 8006a5e:	4413      	add	r3, r2
 8006a60:	3b23      	subs	r3, #35	; 0x23
 8006a62:	221f      	movs	r2, #31
 8006a64:	fa02 f303 	lsl.w	r3, r2, r3
 8006a68:	43da      	mvns	r2, r3
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	400a      	ands	r2, r1
 8006a70:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	b29b      	uxth	r3, r3
 8006a7e:	4618      	mov	r0, r3
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	685a      	ldr	r2, [r3, #4]
 8006a84:	4613      	mov	r3, r2
 8006a86:	009b      	lsls	r3, r3, #2
 8006a88:	4413      	add	r3, r2
 8006a8a:	3b23      	subs	r3, #35	; 0x23
 8006a8c:	fa00 f203 	lsl.w	r2, r0, r3
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	430a      	orrs	r2, r1
 8006a96:	631a      	str	r2, [r3, #48]	; 0x30
 8006a98:	e023      	b.n	8006ae2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	685a      	ldr	r2, [r3, #4]
 8006aa4:	4613      	mov	r3, r2
 8006aa6:	009b      	lsls	r3, r3, #2
 8006aa8:	4413      	add	r3, r2
 8006aaa:	3b41      	subs	r3, #65	; 0x41
 8006aac:	221f      	movs	r2, #31
 8006aae:	fa02 f303 	lsl.w	r3, r2, r3
 8006ab2:	43da      	mvns	r2, r3
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	400a      	ands	r2, r1
 8006aba:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006ac2:	683b      	ldr	r3, [r7, #0]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	b29b      	uxth	r3, r3
 8006ac8:	4618      	mov	r0, r3
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	685a      	ldr	r2, [r3, #4]
 8006ace:	4613      	mov	r3, r2
 8006ad0:	009b      	lsls	r3, r3, #2
 8006ad2:	4413      	add	r3, r2
 8006ad4:	3b41      	subs	r3, #65	; 0x41
 8006ad6:	fa00 f203 	lsl.w	r2, r0, r3
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	430a      	orrs	r2, r1
 8006ae0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006ae2:	4b22      	ldr	r3, [pc, #136]	; (8006b6c <HAL_ADC_ConfigChannel+0x234>)
 8006ae4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	4a21      	ldr	r2, [pc, #132]	; (8006b70 <HAL_ADC_ConfigChannel+0x238>)
 8006aec:	4293      	cmp	r3, r2
 8006aee:	d109      	bne.n	8006b04 <HAL_ADC_ConfigChannel+0x1cc>
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	2b12      	cmp	r3, #18
 8006af6:	d105      	bne.n	8006b04 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	685b      	ldr	r3, [r3, #4]
 8006afc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	4a19      	ldr	r2, [pc, #100]	; (8006b70 <HAL_ADC_ConfigChannel+0x238>)
 8006b0a:	4293      	cmp	r3, r2
 8006b0c:	d123      	bne.n	8006b56 <HAL_ADC_ConfigChannel+0x21e>
 8006b0e:	683b      	ldr	r3, [r7, #0]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	2b10      	cmp	r3, #16
 8006b14:	d003      	beq.n	8006b1e <HAL_ADC_ConfigChannel+0x1e6>
 8006b16:	683b      	ldr	r3, [r7, #0]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	2b11      	cmp	r3, #17
 8006b1c:	d11b      	bne.n	8006b56 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	685b      	ldr	r3, [r3, #4]
 8006b22:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8006b2a:	683b      	ldr	r3, [r7, #0]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	2b10      	cmp	r3, #16
 8006b30:	d111      	bne.n	8006b56 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8006b32:	4b10      	ldr	r3, [pc, #64]	; (8006b74 <HAL_ADC_ConfigChannel+0x23c>)
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	4a10      	ldr	r2, [pc, #64]	; (8006b78 <HAL_ADC_ConfigChannel+0x240>)
 8006b38:	fba2 2303 	umull	r2, r3, r2, r3
 8006b3c:	0c9a      	lsrs	r2, r3, #18
 8006b3e:	4613      	mov	r3, r2
 8006b40:	009b      	lsls	r3, r3, #2
 8006b42:	4413      	add	r3, r2
 8006b44:	005b      	lsls	r3, r3, #1
 8006b46:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8006b48:	e002      	b.n	8006b50 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8006b4a:	68bb      	ldr	r3, [r7, #8]
 8006b4c:	3b01      	subs	r3, #1
 8006b4e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8006b50:	68bb      	ldr	r3, [r7, #8]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d1f9      	bne.n	8006b4a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	2200      	movs	r2, #0
 8006b5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8006b5e:	2300      	movs	r3, #0
}
 8006b60:	4618      	mov	r0, r3
 8006b62:	3714      	adds	r7, #20
 8006b64:	46bd      	mov	sp, r7
 8006b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6a:	4770      	bx	lr
 8006b6c:	40012300 	.word	0x40012300
 8006b70:	40012000 	.word	0x40012000
 8006b74:	2000005c 	.word	0x2000005c
 8006b78:	431bde83 	.word	0x431bde83

08006b7c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006b7c:	b480      	push	{r7}
 8006b7e:	b085      	sub	sp, #20
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006b84:	4b79      	ldr	r3, [pc, #484]	; (8006d6c <ADC_Init+0x1f0>)
 8006b86:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	685b      	ldr	r3, [r3, #4]
 8006b8c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	685a      	ldr	r2, [r3, #4]
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	685b      	ldr	r3, [r3, #4]
 8006b9c:	431a      	orrs	r2, r3
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	685a      	ldr	r2, [r3, #4]
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006bb0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	6859      	ldr	r1, [r3, #4]
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	691b      	ldr	r3, [r3, #16]
 8006bbc:	021a      	lsls	r2, r3, #8
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	430a      	orrs	r2, r1
 8006bc4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	685a      	ldr	r2, [r3, #4]
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8006bd4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	6859      	ldr	r1, [r3, #4]
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	689a      	ldr	r2, [r3, #8]
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	430a      	orrs	r2, r1
 8006be6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	689a      	ldr	r2, [r3, #8]
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006bf6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	6899      	ldr	r1, [r3, #8]
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	68da      	ldr	r2, [r3, #12]
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	430a      	orrs	r2, r1
 8006c08:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c0e:	4a58      	ldr	r2, [pc, #352]	; (8006d70 <ADC_Init+0x1f4>)
 8006c10:	4293      	cmp	r3, r2
 8006c12:	d022      	beq.n	8006c5a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	689a      	ldr	r2, [r3, #8]
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006c22:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	6899      	ldr	r1, [r3, #8]
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	430a      	orrs	r2, r1
 8006c34:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	689a      	ldr	r2, [r3, #8]
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006c44:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	6899      	ldr	r1, [r3, #8]
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	430a      	orrs	r2, r1
 8006c56:	609a      	str	r2, [r3, #8]
 8006c58:	e00f      	b.n	8006c7a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	689a      	ldr	r2, [r3, #8]
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006c68:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	689a      	ldr	r2, [r3, #8]
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006c78:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	689a      	ldr	r2, [r3, #8]
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	f022 0202 	bic.w	r2, r2, #2
 8006c88:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	6899      	ldr	r1, [r3, #8]
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	7e1b      	ldrb	r3, [r3, #24]
 8006c94:	005a      	lsls	r2, r3, #1
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	430a      	orrs	r2, r1
 8006c9c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d01b      	beq.n	8006ce0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	685a      	ldr	r2, [r3, #4]
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006cb6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	685a      	ldr	r2, [r3, #4]
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8006cc6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	6859      	ldr	r1, [r3, #4]
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cd2:	3b01      	subs	r3, #1
 8006cd4:	035a      	lsls	r2, r3, #13
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	430a      	orrs	r2, r1
 8006cdc:	605a      	str	r2, [r3, #4]
 8006cde:	e007      	b.n	8006cf0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	685a      	ldr	r2, [r3, #4]
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006cee:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8006cfe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	69db      	ldr	r3, [r3, #28]
 8006d0a:	3b01      	subs	r3, #1
 8006d0c:	051a      	lsls	r2, r3, #20
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	430a      	orrs	r2, r1
 8006d14:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	689a      	ldr	r2, [r3, #8]
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006d24:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	6899      	ldr	r1, [r3, #8]
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006d32:	025a      	lsls	r2, r3, #9
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	430a      	orrs	r2, r1
 8006d3a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	689a      	ldr	r2, [r3, #8]
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d4a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	6899      	ldr	r1, [r3, #8]
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	695b      	ldr	r3, [r3, #20]
 8006d56:	029a      	lsls	r2, r3, #10
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	430a      	orrs	r2, r1
 8006d5e:	609a      	str	r2, [r3, #8]
}
 8006d60:	bf00      	nop
 8006d62:	3714      	adds	r7, #20
 8006d64:	46bd      	mov	sp, r7
 8006d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6a:	4770      	bx	lr
 8006d6c:	40012300 	.word	0x40012300
 8006d70:	0f000001 	.word	0x0f000001

08006d74 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b084      	sub	sp, #16
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d80:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d86:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d13c      	bne.n	8006e08 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d92:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	689b      	ldr	r3, [r3, #8]
 8006da0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d12b      	bne.n	8006e00 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d127      	bne.n	8006e00 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006db6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d006      	beq.n	8006dcc <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	689b      	ldr	r3, [r3, #8]
 8006dc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d119      	bne.n	8006e00 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	685a      	ldr	r2, [r3, #4]
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	f022 0220 	bic.w	r2, r2, #32
 8006dda:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006de0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d105      	bne.n	8006e00 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006df8:	f043 0201 	orr.w	r2, r3, #1
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006e00:	68f8      	ldr	r0, [r7, #12]
 8006e02:	f7fd fa39 	bl	8004278 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8006e06:	e00e      	b.n	8006e26 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e0c:	f003 0310 	and.w	r3, r3, #16
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d003      	beq.n	8006e1c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8006e14:	68f8      	ldr	r0, [r7, #12]
 8006e16:	f7ff fd85 	bl	8006924 <HAL_ADC_ErrorCallback>
}
 8006e1a:	e004      	b.n	8006e26 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e22:	6878      	ldr	r0, [r7, #4]
 8006e24:	4798      	blx	r3
}
 8006e26:	bf00      	nop
 8006e28:	3710      	adds	r7, #16
 8006e2a:	46bd      	mov	sp, r7
 8006e2c:	bd80      	pop	{r7, pc}

08006e2e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8006e2e:	b580      	push	{r7, lr}
 8006e30:	b084      	sub	sp, #16
 8006e32:	af00      	add	r7, sp, #0
 8006e34:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e3a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8006e3c:	68f8      	ldr	r0, [r7, #12]
 8006e3e:	f7ff fd67 	bl	8006910 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006e42:	bf00      	nop
 8006e44:	3710      	adds	r7, #16
 8006e46:	46bd      	mov	sp, r7
 8006e48:	bd80      	pop	{r7, pc}

08006e4a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8006e4a:	b580      	push	{r7, lr}
 8006e4c:	b084      	sub	sp, #16
 8006e4e:	af00      	add	r7, sp, #0
 8006e50:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e56:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	2240      	movs	r2, #64	; 0x40
 8006e5c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e62:	f043 0204 	orr.w	r2, r3, #4
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8006e6a:	68f8      	ldr	r0, [r7, #12]
 8006e6c:	f7ff fd5a 	bl	8006924 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006e70:	bf00      	nop
 8006e72:	3710      	adds	r7, #16
 8006e74:	46bd      	mov	sp, r7
 8006e76:	bd80      	pop	{r7, pc}

08006e78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006e78:	b480      	push	{r7}
 8006e7a:	b085      	sub	sp, #20
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	f003 0307 	and.w	r3, r3, #7
 8006e86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006e88:	4b0c      	ldr	r3, [pc, #48]	; (8006ebc <__NVIC_SetPriorityGrouping+0x44>)
 8006e8a:	68db      	ldr	r3, [r3, #12]
 8006e8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006e8e:	68ba      	ldr	r2, [r7, #8]
 8006e90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006e94:	4013      	ands	r3, r2
 8006e96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006e9c:	68bb      	ldr	r3, [r7, #8]
 8006e9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006ea0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006ea4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006ea8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006eaa:	4a04      	ldr	r2, [pc, #16]	; (8006ebc <__NVIC_SetPriorityGrouping+0x44>)
 8006eac:	68bb      	ldr	r3, [r7, #8]
 8006eae:	60d3      	str	r3, [r2, #12]
}
 8006eb0:	bf00      	nop
 8006eb2:	3714      	adds	r7, #20
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eba:	4770      	bx	lr
 8006ebc:	e000ed00 	.word	0xe000ed00

08006ec0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006ec0:	b480      	push	{r7}
 8006ec2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006ec4:	4b04      	ldr	r3, [pc, #16]	; (8006ed8 <__NVIC_GetPriorityGrouping+0x18>)
 8006ec6:	68db      	ldr	r3, [r3, #12]
 8006ec8:	0a1b      	lsrs	r3, r3, #8
 8006eca:	f003 0307 	and.w	r3, r3, #7
}
 8006ece:	4618      	mov	r0, r3
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed6:	4770      	bx	lr
 8006ed8:	e000ed00 	.word	0xe000ed00

08006edc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006edc:	b480      	push	{r7}
 8006ede:	b083      	sub	sp, #12
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	4603      	mov	r3, r0
 8006ee4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006ee6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	db0b      	blt.n	8006f06 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006eee:	79fb      	ldrb	r3, [r7, #7]
 8006ef0:	f003 021f 	and.w	r2, r3, #31
 8006ef4:	4907      	ldr	r1, [pc, #28]	; (8006f14 <__NVIC_EnableIRQ+0x38>)
 8006ef6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006efa:	095b      	lsrs	r3, r3, #5
 8006efc:	2001      	movs	r0, #1
 8006efe:	fa00 f202 	lsl.w	r2, r0, r2
 8006f02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006f06:	bf00      	nop
 8006f08:	370c      	adds	r7, #12
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f10:	4770      	bx	lr
 8006f12:	bf00      	nop
 8006f14:	e000e100 	.word	0xe000e100

08006f18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006f18:	b480      	push	{r7}
 8006f1a:	b083      	sub	sp, #12
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	4603      	mov	r3, r0
 8006f20:	6039      	str	r1, [r7, #0]
 8006f22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006f24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	db0a      	blt.n	8006f42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006f2c:	683b      	ldr	r3, [r7, #0]
 8006f2e:	b2da      	uxtb	r2, r3
 8006f30:	490c      	ldr	r1, [pc, #48]	; (8006f64 <__NVIC_SetPriority+0x4c>)
 8006f32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006f36:	0112      	lsls	r2, r2, #4
 8006f38:	b2d2      	uxtb	r2, r2
 8006f3a:	440b      	add	r3, r1
 8006f3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006f40:	e00a      	b.n	8006f58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006f42:	683b      	ldr	r3, [r7, #0]
 8006f44:	b2da      	uxtb	r2, r3
 8006f46:	4908      	ldr	r1, [pc, #32]	; (8006f68 <__NVIC_SetPriority+0x50>)
 8006f48:	79fb      	ldrb	r3, [r7, #7]
 8006f4a:	f003 030f 	and.w	r3, r3, #15
 8006f4e:	3b04      	subs	r3, #4
 8006f50:	0112      	lsls	r2, r2, #4
 8006f52:	b2d2      	uxtb	r2, r2
 8006f54:	440b      	add	r3, r1
 8006f56:	761a      	strb	r2, [r3, #24]
}
 8006f58:	bf00      	nop
 8006f5a:	370c      	adds	r7, #12
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f62:	4770      	bx	lr
 8006f64:	e000e100 	.word	0xe000e100
 8006f68:	e000ed00 	.word	0xe000ed00

08006f6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006f6c:	b480      	push	{r7}
 8006f6e:	b089      	sub	sp, #36	; 0x24
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	60f8      	str	r0, [r7, #12]
 8006f74:	60b9      	str	r1, [r7, #8]
 8006f76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	f003 0307 	and.w	r3, r3, #7
 8006f7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006f80:	69fb      	ldr	r3, [r7, #28]
 8006f82:	f1c3 0307 	rsb	r3, r3, #7
 8006f86:	2b04      	cmp	r3, #4
 8006f88:	bf28      	it	cs
 8006f8a:	2304      	movcs	r3, #4
 8006f8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006f8e:	69fb      	ldr	r3, [r7, #28]
 8006f90:	3304      	adds	r3, #4
 8006f92:	2b06      	cmp	r3, #6
 8006f94:	d902      	bls.n	8006f9c <NVIC_EncodePriority+0x30>
 8006f96:	69fb      	ldr	r3, [r7, #28]
 8006f98:	3b03      	subs	r3, #3
 8006f9a:	e000      	b.n	8006f9e <NVIC_EncodePriority+0x32>
 8006f9c:	2300      	movs	r3, #0
 8006f9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006fa0:	f04f 32ff 	mov.w	r2, #4294967295
 8006fa4:	69bb      	ldr	r3, [r7, #24]
 8006fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8006faa:	43da      	mvns	r2, r3
 8006fac:	68bb      	ldr	r3, [r7, #8]
 8006fae:	401a      	ands	r2, r3
 8006fb0:	697b      	ldr	r3, [r7, #20]
 8006fb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006fb4:	f04f 31ff 	mov.w	r1, #4294967295
 8006fb8:	697b      	ldr	r3, [r7, #20]
 8006fba:	fa01 f303 	lsl.w	r3, r1, r3
 8006fbe:	43d9      	mvns	r1, r3
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006fc4:	4313      	orrs	r3, r2
         );
}
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	3724      	adds	r7, #36	; 0x24
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd0:	4770      	bx	lr

08006fd2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006fd2:	b580      	push	{r7, lr}
 8006fd4:	b082      	sub	sp, #8
 8006fd6:	af00      	add	r7, sp, #0
 8006fd8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006fda:	6878      	ldr	r0, [r7, #4]
 8006fdc:	f7ff ff4c 	bl	8006e78 <__NVIC_SetPriorityGrouping>
}
 8006fe0:	bf00      	nop
 8006fe2:	3708      	adds	r7, #8
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	bd80      	pop	{r7, pc}

08006fe8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	b086      	sub	sp, #24
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	4603      	mov	r3, r0
 8006ff0:	60b9      	str	r1, [r7, #8]
 8006ff2:	607a      	str	r2, [r7, #4]
 8006ff4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006ffa:	f7ff ff61 	bl	8006ec0 <__NVIC_GetPriorityGrouping>
 8006ffe:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007000:	687a      	ldr	r2, [r7, #4]
 8007002:	68b9      	ldr	r1, [r7, #8]
 8007004:	6978      	ldr	r0, [r7, #20]
 8007006:	f7ff ffb1 	bl	8006f6c <NVIC_EncodePriority>
 800700a:	4602      	mov	r2, r0
 800700c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007010:	4611      	mov	r1, r2
 8007012:	4618      	mov	r0, r3
 8007014:	f7ff ff80 	bl	8006f18 <__NVIC_SetPriority>
}
 8007018:	bf00      	nop
 800701a:	3718      	adds	r7, #24
 800701c:	46bd      	mov	sp, r7
 800701e:	bd80      	pop	{r7, pc}

08007020 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007020:	b580      	push	{r7, lr}
 8007022:	b082      	sub	sp, #8
 8007024:	af00      	add	r7, sp, #0
 8007026:	4603      	mov	r3, r0
 8007028:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800702a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800702e:	4618      	mov	r0, r3
 8007030:	f7ff ff54 	bl	8006edc <__NVIC_EnableIRQ>
}
 8007034:	bf00      	nop
 8007036:	3708      	adds	r7, #8
 8007038:	46bd      	mov	sp, r7
 800703a:	bd80      	pop	{r7, pc}

0800703c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800703c:	b580      	push	{r7, lr}
 800703e:	b086      	sub	sp, #24
 8007040:	af00      	add	r7, sp, #0
 8007042:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8007044:	2300      	movs	r3, #0
 8007046:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8007048:	f7ff fafc 	bl	8006644 <HAL_GetTick>
 800704c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	2b00      	cmp	r3, #0
 8007052:	d101      	bne.n	8007058 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8007054:	2301      	movs	r3, #1
 8007056:	e099      	b.n	800718c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2200      	movs	r2, #0
 800705c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	2202      	movs	r2, #2
 8007064:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	681a      	ldr	r2, [r3, #0]
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	f022 0201 	bic.w	r2, r2, #1
 8007076:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007078:	e00f      	b.n	800709a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800707a:	f7ff fae3 	bl	8006644 <HAL_GetTick>
 800707e:	4602      	mov	r2, r0
 8007080:	693b      	ldr	r3, [r7, #16]
 8007082:	1ad3      	subs	r3, r2, r3
 8007084:	2b05      	cmp	r3, #5
 8007086:	d908      	bls.n	800709a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2220      	movs	r2, #32
 800708c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	2203      	movs	r2, #3
 8007092:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8007096:	2303      	movs	r3, #3
 8007098:	e078      	b.n	800718c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f003 0301 	and.w	r3, r3, #1
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d1e8      	bne.n	800707a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80070b0:	697a      	ldr	r2, [r7, #20]
 80070b2:	4b38      	ldr	r3, [pc, #224]	; (8007194 <HAL_DMA_Init+0x158>)
 80070b4:	4013      	ands	r3, r2
 80070b6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	685a      	ldr	r2, [r3, #4]
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	689b      	ldr	r3, [r3, #8]
 80070c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80070c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	691b      	ldr	r3, [r3, #16]
 80070cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80070d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	699b      	ldr	r3, [r3, #24]
 80070d8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80070de:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	6a1b      	ldr	r3, [r3, #32]
 80070e4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80070e6:	697a      	ldr	r2, [r7, #20]
 80070e8:	4313      	orrs	r3, r2
 80070ea:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070f0:	2b04      	cmp	r3, #4
 80070f2:	d107      	bne.n	8007104 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070fc:	4313      	orrs	r3, r2
 80070fe:	697a      	ldr	r2, [r7, #20]
 8007100:	4313      	orrs	r3, r2
 8007102:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	697a      	ldr	r2, [r7, #20]
 800710a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	695b      	ldr	r3, [r3, #20]
 8007112:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8007114:	697b      	ldr	r3, [r7, #20]
 8007116:	f023 0307 	bic.w	r3, r3, #7
 800711a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007120:	697a      	ldr	r2, [r7, #20]
 8007122:	4313      	orrs	r3, r2
 8007124:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800712a:	2b04      	cmp	r3, #4
 800712c:	d117      	bne.n	800715e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007132:	697a      	ldr	r2, [r7, #20]
 8007134:	4313      	orrs	r3, r2
 8007136:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800713c:	2b00      	cmp	r3, #0
 800713e:	d00e      	beq.n	800715e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8007140:	6878      	ldr	r0, [r7, #4]
 8007142:	f000 fa91 	bl	8007668 <DMA_CheckFifoParam>
 8007146:	4603      	mov	r3, r0
 8007148:	2b00      	cmp	r3, #0
 800714a:	d008      	beq.n	800715e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2240      	movs	r2, #64	; 0x40
 8007150:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	2201      	movs	r2, #1
 8007156:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800715a:	2301      	movs	r3, #1
 800715c:	e016      	b.n	800718c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	697a      	ldr	r2, [r7, #20]
 8007164:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007166:	6878      	ldr	r0, [r7, #4]
 8007168:	f000 fa48 	bl	80075fc <DMA_CalcBaseAndBitshift>
 800716c:	4603      	mov	r3, r0
 800716e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007174:	223f      	movs	r2, #63	; 0x3f
 8007176:	409a      	lsls	r2, r3
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2200      	movs	r2, #0
 8007180:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	2201      	movs	r2, #1
 8007186:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800718a:	2300      	movs	r3, #0
}
 800718c:	4618      	mov	r0, r3
 800718e:	3718      	adds	r7, #24
 8007190:	46bd      	mov	sp, r7
 8007192:	bd80      	pop	{r7, pc}
 8007194:	f010803f 	.word	0xf010803f

08007198 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007198:	b580      	push	{r7, lr}
 800719a:	b086      	sub	sp, #24
 800719c:	af00      	add	r7, sp, #0
 800719e:	60f8      	str	r0, [r7, #12]
 80071a0:	60b9      	str	r1, [r7, #8]
 80071a2:	607a      	str	r2, [r7, #4]
 80071a4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80071a6:	2300      	movs	r3, #0
 80071a8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071ae:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80071b6:	2b01      	cmp	r3, #1
 80071b8:	d101      	bne.n	80071be <HAL_DMA_Start_IT+0x26>
 80071ba:	2302      	movs	r3, #2
 80071bc:	e040      	b.n	8007240 <HAL_DMA_Start_IT+0xa8>
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	2201      	movs	r2, #1
 80071c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80071cc:	b2db      	uxtb	r3, r3
 80071ce:	2b01      	cmp	r3, #1
 80071d0:	d12f      	bne.n	8007232 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	2202      	movs	r2, #2
 80071d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	2200      	movs	r2, #0
 80071de:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	687a      	ldr	r2, [r7, #4]
 80071e4:	68b9      	ldr	r1, [r7, #8]
 80071e6:	68f8      	ldr	r0, [r7, #12]
 80071e8:	f000 f9da 	bl	80075a0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80071f0:	223f      	movs	r2, #63	; 0x3f
 80071f2:	409a      	lsls	r2, r3
 80071f4:	693b      	ldr	r3, [r7, #16]
 80071f6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	681a      	ldr	r2, [r3, #0]
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	f042 0216 	orr.w	r2, r2, #22
 8007206:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800720c:	2b00      	cmp	r3, #0
 800720e:	d007      	beq.n	8007220 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	681a      	ldr	r2, [r3, #0]
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	f042 0208 	orr.w	r2, r2, #8
 800721e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	681a      	ldr	r2, [r3, #0]
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	f042 0201 	orr.w	r2, r2, #1
 800722e:	601a      	str	r2, [r3, #0]
 8007230:	e005      	b.n	800723e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	2200      	movs	r2, #0
 8007236:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800723a:	2302      	movs	r3, #2
 800723c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800723e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007240:	4618      	mov	r0, r3
 8007242:	3718      	adds	r7, #24
 8007244:	46bd      	mov	sp, r7
 8007246:	bd80      	pop	{r7, pc}

08007248 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007248:	b480      	push	{r7}
 800724a:	b083      	sub	sp, #12
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007256:	b2db      	uxtb	r3, r3
 8007258:	2b02      	cmp	r3, #2
 800725a:	d004      	beq.n	8007266 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	2280      	movs	r2, #128	; 0x80
 8007260:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8007262:	2301      	movs	r3, #1
 8007264:	e00c      	b.n	8007280 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	2205      	movs	r2, #5
 800726a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	681a      	ldr	r2, [r3, #0]
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	f022 0201 	bic.w	r2, r2, #1
 800727c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800727e:	2300      	movs	r3, #0
}
 8007280:	4618      	mov	r0, r3
 8007282:	370c      	adds	r7, #12
 8007284:	46bd      	mov	sp, r7
 8007286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728a:	4770      	bx	lr

0800728c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800728c:	b580      	push	{r7, lr}
 800728e:	b086      	sub	sp, #24
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8007294:	2300      	movs	r3, #0
 8007296:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007298:	4b92      	ldr	r3, [pc, #584]	; (80074e4 <HAL_DMA_IRQHandler+0x258>)
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	4a92      	ldr	r2, [pc, #584]	; (80074e8 <HAL_DMA_IRQHandler+0x25c>)
 800729e:	fba2 2303 	umull	r2, r3, r2, r3
 80072a2:	0a9b      	lsrs	r3, r3, #10
 80072a4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072aa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80072ac:	693b      	ldr	r3, [r7, #16]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072b6:	2208      	movs	r2, #8
 80072b8:	409a      	lsls	r2, r3
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	4013      	ands	r3, r2
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d01a      	beq.n	80072f8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	f003 0304 	and.w	r3, r3, #4
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d013      	beq.n	80072f8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	681a      	ldr	r2, [r3, #0]
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	f022 0204 	bic.w	r2, r2, #4
 80072de:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072e4:	2208      	movs	r2, #8
 80072e6:	409a      	lsls	r2, r3
 80072e8:	693b      	ldr	r3, [r7, #16]
 80072ea:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072f0:	f043 0201 	orr.w	r2, r3, #1
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072fc:	2201      	movs	r2, #1
 80072fe:	409a      	lsls	r2, r3
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	4013      	ands	r3, r2
 8007304:	2b00      	cmp	r3, #0
 8007306:	d012      	beq.n	800732e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	695b      	ldr	r3, [r3, #20]
 800730e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007312:	2b00      	cmp	r3, #0
 8007314:	d00b      	beq.n	800732e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800731a:	2201      	movs	r2, #1
 800731c:	409a      	lsls	r2, r3
 800731e:	693b      	ldr	r3, [r7, #16]
 8007320:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007326:	f043 0202 	orr.w	r2, r3, #2
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007332:	2204      	movs	r2, #4
 8007334:	409a      	lsls	r2, r3
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	4013      	ands	r3, r2
 800733a:	2b00      	cmp	r3, #0
 800733c:	d012      	beq.n	8007364 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	f003 0302 	and.w	r3, r3, #2
 8007348:	2b00      	cmp	r3, #0
 800734a:	d00b      	beq.n	8007364 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007350:	2204      	movs	r2, #4
 8007352:	409a      	lsls	r2, r3
 8007354:	693b      	ldr	r3, [r7, #16]
 8007356:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800735c:	f043 0204 	orr.w	r2, r3, #4
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007368:	2210      	movs	r2, #16
 800736a:	409a      	lsls	r2, r3
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	4013      	ands	r3, r2
 8007370:	2b00      	cmp	r3, #0
 8007372:	d043      	beq.n	80073fc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	f003 0308 	and.w	r3, r3, #8
 800737e:	2b00      	cmp	r3, #0
 8007380:	d03c      	beq.n	80073fc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007386:	2210      	movs	r2, #16
 8007388:	409a      	lsls	r2, r3
 800738a:	693b      	ldr	r3, [r7, #16]
 800738c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007398:	2b00      	cmp	r3, #0
 800739a:	d018      	beq.n	80073ce <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d108      	bne.n	80073bc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d024      	beq.n	80073fc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073b6:	6878      	ldr	r0, [r7, #4]
 80073b8:	4798      	blx	r3
 80073ba:	e01f      	b.n	80073fc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d01b      	beq.n	80073fc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80073c8:	6878      	ldr	r0, [r7, #4]
 80073ca:	4798      	blx	r3
 80073cc:	e016      	b.n	80073fc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d107      	bne.n	80073ec <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	681a      	ldr	r2, [r3, #0]
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	f022 0208 	bic.w	r2, r2, #8
 80073ea:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d003      	beq.n	80073fc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073f8:	6878      	ldr	r0, [r7, #4]
 80073fa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007400:	2220      	movs	r2, #32
 8007402:	409a      	lsls	r2, r3
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	4013      	ands	r3, r2
 8007408:	2b00      	cmp	r3, #0
 800740a:	f000 808e 	beq.w	800752a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	f003 0310 	and.w	r3, r3, #16
 8007418:	2b00      	cmp	r3, #0
 800741a:	f000 8086 	beq.w	800752a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007422:	2220      	movs	r2, #32
 8007424:	409a      	lsls	r2, r3
 8007426:	693b      	ldr	r3, [r7, #16]
 8007428:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007430:	b2db      	uxtb	r3, r3
 8007432:	2b05      	cmp	r3, #5
 8007434:	d136      	bne.n	80074a4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	681a      	ldr	r2, [r3, #0]
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	f022 0216 	bic.w	r2, r2, #22
 8007444:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	695a      	ldr	r2, [r3, #20]
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007454:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800745a:	2b00      	cmp	r3, #0
 800745c:	d103      	bne.n	8007466 <HAL_DMA_IRQHandler+0x1da>
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007462:	2b00      	cmp	r3, #0
 8007464:	d007      	beq.n	8007476 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	681a      	ldr	r2, [r3, #0]
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	f022 0208 	bic.w	r2, r2, #8
 8007474:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800747a:	223f      	movs	r2, #63	; 0x3f
 800747c:	409a      	lsls	r2, r3
 800747e:	693b      	ldr	r3, [r7, #16]
 8007480:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	2200      	movs	r2, #0
 8007486:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	2201      	movs	r2, #1
 800748e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007496:	2b00      	cmp	r3, #0
 8007498:	d07d      	beq.n	8007596 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800749e:	6878      	ldr	r0, [r7, #4]
 80074a0:	4798      	blx	r3
        }
        return;
 80074a2:	e078      	b.n	8007596 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d01c      	beq.n	80074ec <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d108      	bne.n	80074d2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d030      	beq.n	800752a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074cc:	6878      	ldr	r0, [r7, #4]
 80074ce:	4798      	blx	r3
 80074d0:	e02b      	b.n	800752a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d027      	beq.n	800752a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074de:	6878      	ldr	r0, [r7, #4]
 80074e0:	4798      	blx	r3
 80074e2:	e022      	b.n	800752a <HAL_DMA_IRQHandler+0x29e>
 80074e4:	2000005c 	.word	0x2000005c
 80074e8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d10f      	bne.n	800751a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	681a      	ldr	r2, [r3, #0]
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	f022 0210 	bic.w	r2, r2, #16
 8007508:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	2200      	movs	r2, #0
 800750e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	2201      	movs	r2, #1
 8007516:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800751e:	2b00      	cmp	r3, #0
 8007520:	d003      	beq.n	800752a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007526:	6878      	ldr	r0, [r7, #4]
 8007528:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800752e:	2b00      	cmp	r3, #0
 8007530:	d032      	beq.n	8007598 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007536:	f003 0301 	and.w	r3, r3, #1
 800753a:	2b00      	cmp	r3, #0
 800753c:	d022      	beq.n	8007584 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	2205      	movs	r2, #5
 8007542:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	681a      	ldr	r2, [r3, #0]
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	f022 0201 	bic.w	r2, r2, #1
 8007554:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8007556:	68bb      	ldr	r3, [r7, #8]
 8007558:	3301      	adds	r3, #1
 800755a:	60bb      	str	r3, [r7, #8]
 800755c:	697a      	ldr	r2, [r7, #20]
 800755e:	429a      	cmp	r2, r3
 8007560:	d307      	bcc.n	8007572 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	f003 0301 	and.w	r3, r3, #1
 800756c:	2b00      	cmp	r3, #0
 800756e:	d1f2      	bne.n	8007556 <HAL_DMA_IRQHandler+0x2ca>
 8007570:	e000      	b.n	8007574 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8007572:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2200      	movs	r2, #0
 8007578:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	2201      	movs	r2, #1
 8007580:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007588:	2b00      	cmp	r3, #0
 800758a:	d005      	beq.n	8007598 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007590:	6878      	ldr	r0, [r7, #4]
 8007592:	4798      	blx	r3
 8007594:	e000      	b.n	8007598 <HAL_DMA_IRQHandler+0x30c>
        return;
 8007596:	bf00      	nop
    }
  }
}
 8007598:	3718      	adds	r7, #24
 800759a:	46bd      	mov	sp, r7
 800759c:	bd80      	pop	{r7, pc}
 800759e:	bf00      	nop

080075a0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80075a0:	b480      	push	{r7}
 80075a2:	b085      	sub	sp, #20
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	60f8      	str	r0, [r7, #12]
 80075a8:	60b9      	str	r1, [r7, #8]
 80075aa:	607a      	str	r2, [r7, #4]
 80075ac:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	681a      	ldr	r2, [r3, #0]
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80075bc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	683a      	ldr	r2, [r7, #0]
 80075c4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	689b      	ldr	r3, [r3, #8]
 80075ca:	2b40      	cmp	r3, #64	; 0x40
 80075cc:	d108      	bne.n	80075e0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	687a      	ldr	r2, [r7, #4]
 80075d4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	68ba      	ldr	r2, [r7, #8]
 80075dc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80075de:	e007      	b.n	80075f0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	68ba      	ldr	r2, [r7, #8]
 80075e6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	687a      	ldr	r2, [r7, #4]
 80075ee:	60da      	str	r2, [r3, #12]
}
 80075f0:	bf00      	nop
 80075f2:	3714      	adds	r7, #20
 80075f4:	46bd      	mov	sp, r7
 80075f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fa:	4770      	bx	lr

080075fc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80075fc:	b480      	push	{r7}
 80075fe:	b085      	sub	sp, #20
 8007600:	af00      	add	r7, sp, #0
 8007602:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	b2db      	uxtb	r3, r3
 800760a:	3b10      	subs	r3, #16
 800760c:	4a14      	ldr	r2, [pc, #80]	; (8007660 <DMA_CalcBaseAndBitshift+0x64>)
 800760e:	fba2 2303 	umull	r2, r3, r2, r3
 8007612:	091b      	lsrs	r3, r3, #4
 8007614:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8007616:	4a13      	ldr	r2, [pc, #76]	; (8007664 <DMA_CalcBaseAndBitshift+0x68>)
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	4413      	add	r3, r2
 800761c:	781b      	ldrb	r3, [r3, #0]
 800761e:	461a      	mov	r2, r3
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	2b03      	cmp	r3, #3
 8007628:	d909      	bls.n	800763e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8007632:	f023 0303 	bic.w	r3, r3, #3
 8007636:	1d1a      	adds	r2, r3, #4
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	659a      	str	r2, [r3, #88]	; 0x58
 800763c:	e007      	b.n	800764e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8007646:	f023 0303 	bic.w	r3, r3, #3
 800764a:	687a      	ldr	r2, [r7, #4]
 800764c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007652:	4618      	mov	r0, r3
 8007654:	3714      	adds	r7, #20
 8007656:	46bd      	mov	sp, r7
 8007658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765c:	4770      	bx	lr
 800765e:	bf00      	nop
 8007660:	aaaaaaab 	.word	0xaaaaaaab
 8007664:	08020da4 	.word	0x08020da4

08007668 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007668:	b480      	push	{r7}
 800766a:	b085      	sub	sp, #20
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007670:	2300      	movs	r3, #0
 8007672:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007678:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	699b      	ldr	r3, [r3, #24]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d11f      	bne.n	80076c2 <DMA_CheckFifoParam+0x5a>
 8007682:	68bb      	ldr	r3, [r7, #8]
 8007684:	2b03      	cmp	r3, #3
 8007686:	d856      	bhi.n	8007736 <DMA_CheckFifoParam+0xce>
 8007688:	a201      	add	r2, pc, #4	; (adr r2, 8007690 <DMA_CheckFifoParam+0x28>)
 800768a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800768e:	bf00      	nop
 8007690:	080076a1 	.word	0x080076a1
 8007694:	080076b3 	.word	0x080076b3
 8007698:	080076a1 	.word	0x080076a1
 800769c:	08007737 	.word	0x08007737
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d046      	beq.n	800773a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80076ac:	2301      	movs	r3, #1
 80076ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80076b0:	e043      	b.n	800773a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076b6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80076ba:	d140      	bne.n	800773e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80076bc:	2301      	movs	r3, #1
 80076be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80076c0:	e03d      	b.n	800773e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	699b      	ldr	r3, [r3, #24]
 80076c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80076ca:	d121      	bne.n	8007710 <DMA_CheckFifoParam+0xa8>
 80076cc:	68bb      	ldr	r3, [r7, #8]
 80076ce:	2b03      	cmp	r3, #3
 80076d0:	d837      	bhi.n	8007742 <DMA_CheckFifoParam+0xda>
 80076d2:	a201      	add	r2, pc, #4	; (adr r2, 80076d8 <DMA_CheckFifoParam+0x70>)
 80076d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076d8:	080076e9 	.word	0x080076e9
 80076dc:	080076ef 	.word	0x080076ef
 80076e0:	080076e9 	.word	0x080076e9
 80076e4:	08007701 	.word	0x08007701
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80076e8:	2301      	movs	r3, #1
 80076ea:	73fb      	strb	r3, [r7, #15]
      break;
 80076ec:	e030      	b.n	8007750 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076f2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d025      	beq.n	8007746 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80076fa:	2301      	movs	r3, #1
 80076fc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80076fe:	e022      	b.n	8007746 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007704:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007708:	d11f      	bne.n	800774a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800770a:	2301      	movs	r3, #1
 800770c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800770e:	e01c      	b.n	800774a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8007710:	68bb      	ldr	r3, [r7, #8]
 8007712:	2b02      	cmp	r3, #2
 8007714:	d903      	bls.n	800771e <DMA_CheckFifoParam+0xb6>
 8007716:	68bb      	ldr	r3, [r7, #8]
 8007718:	2b03      	cmp	r3, #3
 800771a:	d003      	beq.n	8007724 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800771c:	e018      	b.n	8007750 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800771e:	2301      	movs	r3, #1
 8007720:	73fb      	strb	r3, [r7, #15]
      break;
 8007722:	e015      	b.n	8007750 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007728:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800772c:	2b00      	cmp	r3, #0
 800772e:	d00e      	beq.n	800774e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8007730:	2301      	movs	r3, #1
 8007732:	73fb      	strb	r3, [r7, #15]
      break;
 8007734:	e00b      	b.n	800774e <DMA_CheckFifoParam+0xe6>
      break;
 8007736:	bf00      	nop
 8007738:	e00a      	b.n	8007750 <DMA_CheckFifoParam+0xe8>
      break;
 800773a:	bf00      	nop
 800773c:	e008      	b.n	8007750 <DMA_CheckFifoParam+0xe8>
      break;
 800773e:	bf00      	nop
 8007740:	e006      	b.n	8007750 <DMA_CheckFifoParam+0xe8>
      break;
 8007742:	bf00      	nop
 8007744:	e004      	b.n	8007750 <DMA_CheckFifoParam+0xe8>
      break;
 8007746:	bf00      	nop
 8007748:	e002      	b.n	8007750 <DMA_CheckFifoParam+0xe8>
      break;   
 800774a:	bf00      	nop
 800774c:	e000      	b.n	8007750 <DMA_CheckFifoParam+0xe8>
      break;
 800774e:	bf00      	nop
    }
  } 
  
  return status; 
 8007750:	7bfb      	ldrb	r3, [r7, #15]
}
 8007752:	4618      	mov	r0, r3
 8007754:	3714      	adds	r7, #20
 8007756:	46bd      	mov	sp, r7
 8007758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775c:	4770      	bx	lr
 800775e:	bf00      	nop

08007760 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8007760:	b580      	push	{r7, lr}
 8007762:	b088      	sub	sp, #32
 8007764:	af00      	add	r7, sp, #0
 8007766:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8007768:	2300      	movs	r3, #0
 800776a:	61fb      	str	r3, [r7, #28]
 800776c:	2300      	movs	r3, #0
 800776e:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 8007770:	4baa      	ldr	r3, [pc, #680]	; (8007a1c <HAL_ETH_Init+0x2bc>)
 8007772:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 8007774:	2300      	movs	r3, #0
 8007776:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8007778:	2300      	movs	r3, #0
 800777a:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2b00      	cmp	r3, #0
 8007780:	d101      	bne.n	8007786 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8007782:	2301      	movs	r3, #1
 8007784:	e183      	b.n	8007a8e <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800778c:	b2db      	uxtb	r3, r3
 800778e:	2b00      	cmp	r3, #0
 8007790:	d106      	bne.n	80077a0 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	2200      	movs	r2, #0
 8007796:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800779a:	6878      	ldr	r0, [r7, #4]
 800779c:	f004 fb4c 	bl	800be38 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80077a0:	2300      	movs	r3, #0
 80077a2:	60bb      	str	r3, [r7, #8]
 80077a4:	4b9e      	ldr	r3, [pc, #632]	; (8007a20 <HAL_ETH_Init+0x2c0>)
 80077a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077a8:	4a9d      	ldr	r2, [pc, #628]	; (8007a20 <HAL_ETH_Init+0x2c0>)
 80077aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80077ae:	6453      	str	r3, [r2, #68]	; 0x44
 80077b0:	4b9b      	ldr	r3, [pc, #620]	; (8007a20 <HAL_ETH_Init+0x2c0>)
 80077b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80077b8:	60bb      	str	r3, [r7, #8]
 80077ba:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80077bc:	4b99      	ldr	r3, [pc, #612]	; (8007a24 <HAL_ETH_Init+0x2c4>)
 80077be:	685b      	ldr	r3, [r3, #4]
 80077c0:	4a98      	ldr	r2, [pc, #608]	; (8007a24 <HAL_ETH_Init+0x2c4>)
 80077c2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80077c6:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80077c8:	4b96      	ldr	r3, [pc, #600]	; (8007a24 <HAL_ETH_Init+0x2c4>)
 80077ca:	685a      	ldr	r2, [r3, #4]
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	6a1b      	ldr	r3, [r3, #32]
 80077d0:	4994      	ldr	r1, [pc, #592]	; (8007a24 <HAL_ETH_Init+0x2c4>)
 80077d2:	4313      	orrs	r3, r2
 80077d4:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80077de:	681a      	ldr	r2, [r3, #0]
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	f042 0201 	orr.w	r2, r2, #1
 80077e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80077ec:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80077ee:	f7fe ff29 	bl	8006644 <HAL_GetTick>
 80077f2:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80077f4:	e011      	b.n	800781a <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 80077f6:	f7fe ff25 	bl	8006644 <HAL_GetTick>
 80077fa:	4602      	mov	r2, r0
 80077fc:	697b      	ldr	r3, [r7, #20]
 80077fe:	1ad3      	subs	r3, r2, r3
 8007800:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8007804:	d909      	bls.n	800781a <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	2203      	movs	r2, #3
 800780a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	2200      	movs	r2, #0
 8007812:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 8007816:	2303      	movs	r3, #3
 8007818:	e139      	b.n	8007a8e <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	f003 0301 	and.w	r3, r3, #1
 8007828:	2b00      	cmp	r3, #0
 800782a:	d1e4      	bne.n	80077f6 <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	691b      	ldr	r3, [r3, #16]
 8007832:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8007834:	69fb      	ldr	r3, [r7, #28]
 8007836:	f023 031c 	bic.w	r3, r3, #28
 800783a:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800783c:	f001 fe50 	bl	80094e0 <HAL_RCC_GetHCLKFreq>
 8007840:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8007842:	69bb      	ldr	r3, [r7, #24]
 8007844:	4a78      	ldr	r2, [pc, #480]	; (8007a28 <HAL_ETH_Init+0x2c8>)
 8007846:	4293      	cmp	r3, r2
 8007848:	d908      	bls.n	800785c <HAL_ETH_Init+0xfc>
 800784a:	69bb      	ldr	r3, [r7, #24]
 800784c:	4a77      	ldr	r2, [pc, #476]	; (8007a2c <HAL_ETH_Init+0x2cc>)
 800784e:	4293      	cmp	r3, r2
 8007850:	d804      	bhi.n	800785c <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8007852:	69fb      	ldr	r3, [r7, #28]
 8007854:	f043 0308 	orr.w	r3, r3, #8
 8007858:	61fb      	str	r3, [r7, #28]
 800785a:	e027      	b.n	80078ac <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 800785c:	69bb      	ldr	r3, [r7, #24]
 800785e:	4a73      	ldr	r2, [pc, #460]	; (8007a2c <HAL_ETH_Init+0x2cc>)
 8007860:	4293      	cmp	r3, r2
 8007862:	d908      	bls.n	8007876 <HAL_ETH_Init+0x116>
 8007864:	69bb      	ldr	r3, [r7, #24]
 8007866:	4a6d      	ldr	r2, [pc, #436]	; (8007a1c <HAL_ETH_Init+0x2bc>)
 8007868:	4293      	cmp	r3, r2
 800786a:	d204      	bcs.n	8007876 <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 800786c:	69fb      	ldr	r3, [r7, #28]
 800786e:	f043 030c 	orr.w	r3, r3, #12
 8007872:	61fb      	str	r3, [r7, #28]
 8007874:	e01a      	b.n	80078ac <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8007876:	69bb      	ldr	r3, [r7, #24]
 8007878:	4a68      	ldr	r2, [pc, #416]	; (8007a1c <HAL_ETH_Init+0x2bc>)
 800787a:	4293      	cmp	r3, r2
 800787c:	d303      	bcc.n	8007886 <HAL_ETH_Init+0x126>
 800787e:	69bb      	ldr	r3, [r7, #24]
 8007880:	4a6b      	ldr	r2, [pc, #428]	; (8007a30 <HAL_ETH_Init+0x2d0>)
 8007882:	4293      	cmp	r3, r2
 8007884:	d911      	bls.n	80078aa <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8007886:	69bb      	ldr	r3, [r7, #24]
 8007888:	4a69      	ldr	r2, [pc, #420]	; (8007a30 <HAL_ETH_Init+0x2d0>)
 800788a:	4293      	cmp	r3, r2
 800788c:	d908      	bls.n	80078a0 <HAL_ETH_Init+0x140>
 800788e:	69bb      	ldr	r3, [r7, #24]
 8007890:	4a68      	ldr	r2, [pc, #416]	; (8007a34 <HAL_ETH_Init+0x2d4>)
 8007892:	4293      	cmp	r3, r2
 8007894:	d804      	bhi.n	80078a0 <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8007896:	69fb      	ldr	r3, [r7, #28]
 8007898:	f043 0304 	orr.w	r3, r3, #4
 800789c:	61fb      	str	r3, [r7, #28]
 800789e:	e005      	b.n	80078ac <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 80078a0:	69fb      	ldr	r3, [r7, #28]
 80078a2:	f043 0310 	orr.w	r3, r3, #16
 80078a6:	61fb      	str	r3, [r7, #28]
 80078a8:	e000      	b.n	80078ac <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 80078aa:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	69fa      	ldr	r2, [r7, #28]
 80078b2:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 80078b4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80078b8:	2100      	movs	r1, #0
 80078ba:	6878      	ldr	r0, [r7, #4]
 80078bc:	f000 fb14 	bl	8007ee8 <HAL_ETH_WritePHYRegister>
 80078c0:	4603      	mov	r3, r0
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d00b      	beq.n	80078de <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 80078c6:	2301      	movs	r3, #1
 80078c8:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 80078ca:	6939      	ldr	r1, [r7, #16]
 80078cc:	6878      	ldr	r0, [r7, #4]
 80078ce:	f000 fcc9 	bl	8008264 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	2201      	movs	r2, #1
 80078d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 80078da:	2301      	movs	r3, #1
 80078dc:	e0d7      	b.n	8007a8e <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 80078de:	20ff      	movs	r0, #255	; 0xff
 80078e0:	f7fe febc 	bl	800665c <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	685b      	ldr	r3, [r3, #4]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	f000 80a5 	beq.w	8007a38 <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80078ee:	f7fe fea9 	bl	8006644 <HAL_GetTick>
 80078f2:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80078f4:	f107 030c 	add.w	r3, r7, #12
 80078f8:	461a      	mov	r2, r3
 80078fa:	2101      	movs	r1, #1
 80078fc:	6878      	ldr	r0, [r7, #4]
 80078fe:	f000 fa8b 	bl	8007e18 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8007902:	f7fe fe9f 	bl	8006644 <HAL_GetTick>
 8007906:	4602      	mov	r2, r0
 8007908:	697b      	ldr	r3, [r7, #20]
 800790a:	1ad3      	subs	r3, r2, r3
 800790c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007910:	4293      	cmp	r3, r2
 8007912:	d90f      	bls.n	8007934 <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8007914:	2301      	movs	r3, #1
 8007916:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8007918:	6939      	ldr	r1, [r7, #16]
 800791a:	6878      	ldr	r0, [r7, #4]
 800791c:	f000 fca2 	bl	8008264 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	2201      	movs	r2, #1
 8007924:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	2200      	movs	r2, #0
 800792c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8007930:	2303      	movs	r3, #3
 8007932:	e0ac      	b.n	8007a8e <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	f003 0304 	and.w	r3, r3, #4
 800793a:	2b00      	cmp	r3, #0
 800793c:	d0da      	beq.n	80078f4 <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 800793e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007942:	2100      	movs	r1, #0
 8007944:	6878      	ldr	r0, [r7, #4]
 8007946:	f000 facf 	bl	8007ee8 <HAL_ETH_WritePHYRegister>
 800794a:	4603      	mov	r3, r0
 800794c:	2b00      	cmp	r3, #0
 800794e:	d00b      	beq.n	8007968 <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8007950:	2301      	movs	r3, #1
 8007952:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8007954:	6939      	ldr	r1, [r7, #16]
 8007956:	6878      	ldr	r0, [r7, #4]
 8007958:	f000 fc84 	bl	8008264 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	2201      	movs	r2, #1
 8007960:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8007964:	2301      	movs	r3, #1
 8007966:	e092      	b.n	8007a8e <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8007968:	f7fe fe6c 	bl	8006644 <HAL_GetTick>
 800796c:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800796e:	f107 030c 	add.w	r3, r7, #12
 8007972:	461a      	mov	r2, r3
 8007974:	2101      	movs	r1, #1
 8007976:	6878      	ldr	r0, [r7, #4]
 8007978:	f000 fa4e 	bl	8007e18 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 800797c:	f7fe fe62 	bl	8006644 <HAL_GetTick>
 8007980:	4602      	mov	r2, r0
 8007982:	697b      	ldr	r3, [r7, #20]
 8007984:	1ad3      	subs	r3, r2, r3
 8007986:	f241 3288 	movw	r2, #5000	; 0x1388
 800798a:	4293      	cmp	r3, r2
 800798c:	d90f      	bls.n	80079ae <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 800798e:	2301      	movs	r3, #1
 8007990:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8007992:	6939      	ldr	r1, [r7, #16]
 8007994:	6878      	ldr	r0, [r7, #4]
 8007996:	f000 fc65 	bl	8008264 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	2201      	movs	r2, #1
 800799e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	2200      	movs	r2, #0
 80079a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80079aa:	2303      	movs	r3, #3
 80079ac:	e06f      	b.n	8007a8e <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	f003 0320 	and.w	r3, r3, #32
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d0da      	beq.n	800796e <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 80079b8:	f107 030c 	add.w	r3, r7, #12
 80079bc:	461a      	mov	r2, r3
 80079be:	211f      	movs	r1, #31
 80079c0:	6878      	ldr	r0, [r7, #4]
 80079c2:	f000 fa29 	bl	8007e18 <HAL_ETH_ReadPHYRegister>
 80079c6:	4603      	mov	r3, r0
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d00b      	beq.n	80079e4 <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80079cc:	2301      	movs	r3, #1
 80079ce:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80079d0:	6939      	ldr	r1, [r7, #16]
 80079d2:	6878      	ldr	r0, [r7, #4]
 80079d4:	f000 fc46 	bl	8008264 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	2201      	movs	r2, #1
 80079dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80079e0:	2301      	movs	r3, #1
 80079e2:	e054      	b.n	8007a8e <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	f003 0310 	and.w	r3, r3, #16
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d004      	beq.n	80079f8 <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80079f4:	60da      	str	r2, [r3, #12]
 80079f6:	e002      	b.n	80079fe <HAL_ETH_Init+0x29e>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	2200      	movs	r2, #0
 80079fc:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	f003 0304 	and.w	r3, r3, #4
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d003      	beq.n	8007a10 <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	2200      	movs	r2, #0
 8007a0c:	609a      	str	r2, [r3, #8]
 8007a0e:	e035      	b.n	8007a7c <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007a16:	609a      	str	r2, [r3, #8]
 8007a18:	e030      	b.n	8007a7c <HAL_ETH_Init+0x31c>
 8007a1a:	bf00      	nop
 8007a1c:	03938700 	.word	0x03938700
 8007a20:	40023800 	.word	0x40023800
 8007a24:	40013800 	.word	0x40013800
 8007a28:	01312cff 	.word	0x01312cff
 8007a2c:	02160ebf 	.word	0x02160ebf
 8007a30:	05f5e0ff 	.word	0x05f5e0ff
 8007a34:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	68db      	ldr	r3, [r3, #12]
 8007a3c:	08db      	lsrs	r3, r3, #3
 8007a3e:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	689b      	ldr	r3, [r3, #8]
 8007a44:	085b      	lsrs	r3, r3, #1
 8007a46:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8007a48:	4313      	orrs	r3, r2
 8007a4a:	b29b      	uxth	r3, r3
 8007a4c:	461a      	mov	r2, r3
 8007a4e:	2100      	movs	r1, #0
 8007a50:	6878      	ldr	r0, [r7, #4]
 8007a52:	f000 fa49 	bl	8007ee8 <HAL_ETH_WritePHYRegister>
 8007a56:	4603      	mov	r3, r0
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d00b      	beq.n	8007a74 <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8007a5c:	2301      	movs	r3, #1
 8007a5e:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8007a60:	6939      	ldr	r1, [r7, #16]
 8007a62:	6878      	ldr	r0, [r7, #4]
 8007a64:	f000 fbfe 	bl	8008264 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	2201      	movs	r2, #1
 8007a6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8007a70:	2301      	movs	r3, #1
 8007a72:	e00c      	b.n	8007a8e <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8007a74:	f640 70ff 	movw	r0, #4095	; 0xfff
 8007a78:	f7fe fdf0 	bl	800665c <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8007a7c:	6939      	ldr	r1, [r7, #16]
 8007a7e:	6878      	ldr	r0, [r7, #4]
 8007a80:	f000 fbf0 	bl	8008264 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	2201      	movs	r2, #1
 8007a88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8007a8c:	2300      	movs	r3, #0
}
 8007a8e:	4618      	mov	r0, r3
 8007a90:	3720      	adds	r7, #32
 8007a92:	46bd      	mov	sp, r7
 8007a94:	bd80      	pop	{r7, pc}
 8007a96:	bf00      	nop

08007a98 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8007a98:	b480      	push	{r7}
 8007a9a:	b087      	sub	sp, #28
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	60f8      	str	r0, [r7, #12]
 8007aa0:	60b9      	str	r1, [r7, #8]
 8007aa2:	607a      	str	r2, [r7, #4]
 8007aa4:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007ab0:	2b01      	cmp	r3, #1
 8007ab2:	d101      	bne.n	8007ab8 <HAL_ETH_DMATxDescListInit+0x20>
 8007ab4:	2302      	movs	r3, #2
 8007ab6:	e052      	b.n	8007b5e <HAL_ETH_DMATxDescListInit+0xc6>
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	2201      	movs	r2, #1
 8007abc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	2202      	movs	r2, #2
 8007ac4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	68ba      	ldr	r2, [r7, #8]
 8007acc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0U; i < TxBuffCount; i++)
 8007ace:	2300      	movs	r3, #0
 8007ad0:	617b      	str	r3, [r7, #20]
 8007ad2:	e030      	b.n	8007b36 <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8007ad4:	697b      	ldr	r3, [r7, #20]
 8007ad6:	015b      	lsls	r3, r3, #5
 8007ad8:	68ba      	ldr	r2, [r7, #8]
 8007ada:	4413      	add	r3, r2
 8007adc:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8007ade:	693b      	ldr	r3, [r7, #16]
 8007ae0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007ae4:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8007ae6:	697b      	ldr	r3, [r7, #20]
 8007ae8:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8007aec:	fb02 f303 	mul.w	r3, r2, r3
 8007af0:	687a      	ldr	r2, [r7, #4]
 8007af2:	4413      	add	r3, r2
 8007af4:	461a      	mov	r2, r3
 8007af6:	693b      	ldr	r3, [r7, #16]
 8007af8:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	69db      	ldr	r3, [r3, #28]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d105      	bne.n	8007b0e <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8007b02:	693b      	ldr	r3, [r7, #16]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8007b0a:	693b      	ldr	r3, [r7, #16]
 8007b0c:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1U))
 8007b0e:	683b      	ldr	r3, [r7, #0]
 8007b10:	3b01      	subs	r3, #1
 8007b12:	697a      	ldr	r2, [r7, #20]
 8007b14:	429a      	cmp	r2, r3
 8007b16:	d208      	bcs.n	8007b2a <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 8007b18:	697b      	ldr	r3, [r7, #20]
 8007b1a:	3301      	adds	r3, #1
 8007b1c:	015b      	lsls	r3, r3, #5
 8007b1e:	68ba      	ldr	r2, [r7, #8]
 8007b20:	4413      	add	r3, r2
 8007b22:	461a      	mov	r2, r3
 8007b24:	693b      	ldr	r3, [r7, #16]
 8007b26:	60da      	str	r2, [r3, #12]
 8007b28:	e002      	b.n	8007b30 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 8007b2a:	68ba      	ldr	r2, [r7, #8]
 8007b2c:	693b      	ldr	r3, [r7, #16]
 8007b2e:	60da      	str	r2, [r3, #12]
  for(i=0U; i < TxBuffCount; i++)
 8007b30:	697b      	ldr	r3, [r7, #20]
 8007b32:	3301      	adds	r3, #1
 8007b34:	617b      	str	r3, [r7, #20]
 8007b36:	697a      	ldr	r2, [r7, #20]
 8007b38:	683b      	ldr	r3, [r7, #0]
 8007b3a:	429a      	cmp	r2, r3
 8007b3c:	d3ca      	bcc.n	8007ad4 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	68ba      	ldr	r2, [r7, #8]
 8007b44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b48:	3310      	adds	r3, #16
 8007b4a:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	2201      	movs	r2, #1
 8007b50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	2200      	movs	r2, #0
 8007b58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8007b5c:	2300      	movs	r3, #0
}
 8007b5e:	4618      	mov	r0, r3
 8007b60:	371c      	adds	r7, #28
 8007b62:	46bd      	mov	sp, r7
 8007b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b68:	4770      	bx	lr

08007b6a <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 8007b6a:	b480      	push	{r7}
 8007b6c:	b087      	sub	sp, #28
 8007b6e:	af00      	add	r7, sp, #0
 8007b70:	60f8      	str	r0, [r7, #12]
 8007b72:	60b9      	str	r1, [r7, #8]
 8007b74:	607a      	str	r2, [r7, #4]
 8007b76:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8007b78:	2300      	movs	r3, #0
 8007b7a:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007b82:	2b01      	cmp	r3, #1
 8007b84:	d101      	bne.n	8007b8a <HAL_ETH_DMARxDescListInit+0x20>
 8007b86:	2302      	movs	r3, #2
 8007b88:	e056      	b.n	8007c38 <HAL_ETH_DMARxDescListInit+0xce>
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	2201      	movs	r2, #1
 8007b8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	2202      	movs	r2, #2
 8007b96:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	68ba      	ldr	r2, [r7, #8]
 8007b9e:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0U; i < RxBuffCount; i++)
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	617b      	str	r3, [r7, #20]
 8007ba4:	e034      	b.n	8007c10 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 8007ba6:	697b      	ldr	r3, [r7, #20]
 8007ba8:	015b      	lsls	r3, r3, #5
 8007baa:	68ba      	ldr	r2, [r7, #8]
 8007bac:	4413      	add	r3, r2
 8007bae:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8007bb0:	693b      	ldr	r3, [r7, #16]
 8007bb2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007bb6:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8007bb8:	693b      	ldr	r3, [r7, #16]
 8007bba:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8007bbe:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8007bc0:	697b      	ldr	r3, [r7, #20]
 8007bc2:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8007bc6:	fb02 f303 	mul.w	r3, r2, r3
 8007bca:	687a      	ldr	r2, [r7, #4]
 8007bcc:	4413      	add	r3, r2
 8007bce:	461a      	mov	r2, r3
 8007bd0:	693b      	ldr	r3, [r7, #16]
 8007bd2:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	699b      	ldr	r3, [r3, #24]
 8007bd8:	2b01      	cmp	r3, #1
 8007bda:	d105      	bne.n	8007be8 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8007bdc:	693b      	ldr	r3, [r7, #16]
 8007bde:	685b      	ldr	r3, [r3, #4]
 8007be0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007be4:	693b      	ldr	r3, [r7, #16]
 8007be6:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1U))
 8007be8:	683b      	ldr	r3, [r7, #0]
 8007bea:	3b01      	subs	r3, #1
 8007bec:	697a      	ldr	r2, [r7, #20]
 8007bee:	429a      	cmp	r2, r3
 8007bf0:	d208      	bcs.n	8007c04 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 8007bf2:	697b      	ldr	r3, [r7, #20]
 8007bf4:	3301      	adds	r3, #1
 8007bf6:	015b      	lsls	r3, r3, #5
 8007bf8:	68ba      	ldr	r2, [r7, #8]
 8007bfa:	4413      	add	r3, r2
 8007bfc:	461a      	mov	r2, r3
 8007bfe:	693b      	ldr	r3, [r7, #16]
 8007c00:	60da      	str	r2, [r3, #12]
 8007c02:	e002      	b.n	8007c0a <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8007c04:	68ba      	ldr	r2, [r7, #8]
 8007c06:	693b      	ldr	r3, [r7, #16]
 8007c08:	60da      	str	r2, [r3, #12]
  for(i=0U; i < RxBuffCount; i++)
 8007c0a:	697b      	ldr	r3, [r7, #20]
 8007c0c:	3301      	adds	r3, #1
 8007c0e:	617b      	str	r3, [r7, #20]
 8007c10:	697a      	ldr	r2, [r7, #20]
 8007c12:	683b      	ldr	r3, [r7, #0]
 8007c14:	429a      	cmp	r2, r3
 8007c16:	d3c6      	bcc.n	8007ba6 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	68ba      	ldr	r2, [r7, #8]
 8007c1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c22:	330c      	adds	r3, #12
 8007c24:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	2201      	movs	r2, #1
 8007c2a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	2200      	movs	r2, #0
 8007c32:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8007c36:	2300      	movs	r3, #0
}
 8007c38:	4618      	mov	r0, r3
 8007c3a:	371c      	adds	r7, #28
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c42:	4770      	bx	lr

08007c44 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8007c44:	b480      	push	{r7}
 8007c46:	b087      	sub	sp, #28
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]
 8007c4c:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 8007c4e:	2300      	movs	r3, #0
 8007c50:	617b      	str	r3, [r7, #20]
 8007c52:	2300      	movs	r3, #0
 8007c54:	60fb      	str	r3, [r7, #12]
 8007c56:	2300      	movs	r3, #0
 8007c58:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007c60:	2b01      	cmp	r3, #1
 8007c62:	d101      	bne.n	8007c68 <HAL_ETH_TransmitFrame+0x24>
 8007c64:	2302      	movs	r3, #2
 8007c66:	e0cd      	b.n	8007e04 <HAL_ETH_TransmitFrame+0x1c0>
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	2201      	movs	r2, #1
 8007c6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	2202      	movs	r2, #2
 8007c74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0U) 
 8007c78:	683b      	ldr	r3, [r7, #0]
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d109      	bne.n	8007c92 <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	2201      	movs	r2, #1
 8007c82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	2200      	movs	r2, #0
 8007c8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 8007c8e:	2301      	movs	r3, #1
 8007c90:	e0b8      	b.n	8007e04 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	da09      	bge.n	8007cb0 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	2212      	movs	r2, #18
 8007ca0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	2200      	movs	r2, #0
 8007ca8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 8007cac:	2301      	movs	r3, #1
 8007cae:	e0a9      	b.n	8007e04 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8007cb0:	683b      	ldr	r3, [r7, #0]
 8007cb2:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8007cb6:	4293      	cmp	r3, r2
 8007cb8:	d915      	bls.n	8007ce6 <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8007cba:	683b      	ldr	r3, [r7, #0]
 8007cbc:	4a54      	ldr	r2, [pc, #336]	; (8007e10 <HAL_ETH_TransmitFrame+0x1cc>)
 8007cbe:	fba2 2303 	umull	r2, r3, r2, r3
 8007cc2:	0a9b      	lsrs	r3, r3, #10
 8007cc4:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8007cc6:	683a      	ldr	r2, [r7, #0]
 8007cc8:	4b51      	ldr	r3, [pc, #324]	; (8007e10 <HAL_ETH_TransmitFrame+0x1cc>)
 8007cca:	fba3 1302 	umull	r1, r3, r3, r2
 8007cce:	0a9b      	lsrs	r3, r3, #10
 8007cd0:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8007cd4:	fb01 f303 	mul.w	r3, r1, r3
 8007cd8:	1ad3      	subs	r3, r2, r3
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d005      	beq.n	8007cea <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 8007cde:	697b      	ldr	r3, [r7, #20]
 8007ce0:	3301      	adds	r3, #1
 8007ce2:	617b      	str	r3, [r7, #20]
 8007ce4:	e001      	b.n	8007cea <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1U;
 8007ce6:	2301      	movs	r3, #1
 8007ce8:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 8007cea:	697b      	ldr	r3, [r7, #20]
 8007cec:	2b01      	cmp	r3, #1
 8007cee:	d11c      	bne.n	8007d2a <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cf4:	681a      	ldr	r2, [r3, #0]
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cfa:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8007cfe:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d04:	683a      	ldr	r2, [r7, #0]
 8007d06:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8007d0a:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d10:	681a      	ldr	r2, [r3, #0]
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d16:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8007d1a:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d20:	68db      	ldr	r3, [r3, #12]
 8007d22:	461a      	mov	r2, r3
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	62da      	str	r2, [r3, #44]	; 0x2c
 8007d28:	e04b      	b.n	8007dc2 <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0U; i< bufcount; i++)
 8007d2a:	2300      	movs	r3, #0
 8007d2c:	613b      	str	r3, [r7, #16]
 8007d2e:	e044      	b.n	8007dba <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d34:	681a      	ldr	r2, [r3, #0]
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d3a:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8007d3e:	601a      	str	r2, [r3, #0]
      
      if (i == 0U) 
 8007d40:	693b      	ldr	r3, [r7, #16]
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d107      	bne.n	8007d56 <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d4a:	681a      	ldr	r2, [r3, #0]
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d50:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8007d54:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d5a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8007d5e:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 8007d60:	697b      	ldr	r3, [r7, #20]
 8007d62:	3b01      	subs	r3, #1
 8007d64:	693a      	ldr	r2, [r7, #16]
 8007d66:	429a      	cmp	r2, r3
 8007d68:	d116      	bne.n	8007d98 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d6e:	681a      	ldr	r2, [r3, #0]
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d74:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8007d78:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 8007d7a:	697b      	ldr	r3, [r7, #20]
 8007d7c:	4a25      	ldr	r2, [pc, #148]	; (8007e14 <HAL_ETH_TransmitFrame+0x1d0>)
 8007d7e:	fb02 f203 	mul.w	r2, r2, r3
 8007d82:	683b      	ldr	r3, [r7, #0]
 8007d84:	4413      	add	r3, r2
 8007d86:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8007d8a:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d90:	68fa      	ldr	r2, [r7, #12]
 8007d92:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8007d96:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d9c:	681a      	ldr	r2, [r3, #0]
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007da2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8007da6:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dac:	68db      	ldr	r3, [r3, #12]
 8007dae:	461a      	mov	r2, r3
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 8007db4:	693b      	ldr	r3, [r7, #16]
 8007db6:	3301      	adds	r3, #1
 8007db8:	613b      	str	r3, [r7, #16]
 8007dba:	693a      	ldr	r2, [r7, #16]
 8007dbc:	697b      	ldr	r3, [r7, #20]
 8007dbe:	429a      	cmp	r2, r3
 8007dc0:	d3b6      	bcc.n	8007d30 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007dca:	3314      	adds	r3, #20
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	f003 0304 	and.w	r3, r3, #4
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d00d      	beq.n	8007df2 <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007dde:	3314      	adds	r3, #20
 8007de0:	2204      	movs	r2, #4
 8007de2:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007dec:	3304      	adds	r3, #4
 8007dee:	2200      	movs	r2, #0
 8007df0:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	2201      	movs	r2, #1
 8007df6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	2200      	movs	r2, #0
 8007dfe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8007e02:	2300      	movs	r3, #0
}
 8007e04:	4618      	mov	r0, r3
 8007e06:	371c      	adds	r7, #28
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0e:	4770      	bx	lr
 8007e10:	ac02b00b 	.word	0xac02b00b
 8007e14:	fffffa0c 	.word	0xfffffa0c

08007e18 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8007e18:	b580      	push	{r7, lr}
 8007e1a:	b086      	sub	sp, #24
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	60f8      	str	r0, [r7, #12]
 8007e20:	460b      	mov	r3, r1
 8007e22:	607a      	str	r2, [r7, #4]
 8007e24:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 8007e26:	2300      	movs	r3, #0
 8007e28:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8007e2a:	2300      	movs	r3, #0
 8007e2c:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007e34:	b2db      	uxtb	r3, r3
 8007e36:	2b82      	cmp	r3, #130	; 0x82
 8007e38:	d101      	bne.n	8007e3e <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8007e3a:	2302      	movs	r3, #2
 8007e3c:	e050      	b.n	8007ee0 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	2282      	movs	r2, #130	; 0x82
 8007e42:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	691b      	ldr	r3, [r3, #16]
 8007e4c:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8007e4e:	697b      	ldr	r3, [r7, #20]
 8007e50:	f003 031c 	and.w	r3, r3, #28
 8007e54:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	8a1b      	ldrh	r3, [r3, #16]
 8007e5a:	02db      	lsls	r3, r3, #11
 8007e5c:	b29b      	uxth	r3, r3
 8007e5e:	697a      	ldr	r2, [r7, #20]
 8007e60:	4313      	orrs	r3, r2
 8007e62:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8007e64:	897b      	ldrh	r3, [r7, #10]
 8007e66:	019b      	lsls	r3, r3, #6
 8007e68:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8007e6c:	697a      	ldr	r2, [r7, #20]
 8007e6e:	4313      	orrs	r3, r2
 8007e70:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8007e72:	697b      	ldr	r3, [r7, #20]
 8007e74:	f023 0302 	bic.w	r3, r3, #2
 8007e78:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8007e7a:	697b      	ldr	r3, [r7, #20]
 8007e7c:	f043 0301 	orr.w	r3, r3, #1
 8007e80:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	697a      	ldr	r2, [r7, #20]
 8007e88:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8007e8a:	f7fe fbdb 	bl	8006644 <HAL_GetTick>
 8007e8e:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8007e90:	e015      	b.n	8007ebe <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8007e92:	f7fe fbd7 	bl	8006644 <HAL_GetTick>
 8007e96:	4602      	mov	r2, r0
 8007e98:	693b      	ldr	r3, [r7, #16]
 8007e9a:	1ad3      	subs	r3, r2, r3
 8007e9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ea0:	d309      	bcc.n	8007eb6 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	2201      	movs	r2, #1
 8007ea6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	2200      	movs	r2, #0
 8007eae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8007eb2:	2303      	movs	r3, #3
 8007eb4:	e014      	b.n	8007ee0 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	691b      	ldr	r3, [r3, #16]
 8007ebc:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8007ebe:	697b      	ldr	r3, [r7, #20]
 8007ec0:	f003 0301 	and.w	r3, r3, #1
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d1e4      	bne.n	8007e92 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	695b      	ldr	r3, [r3, #20]
 8007ece:	b29b      	uxth	r3, r3
 8007ed0:	461a      	mov	r2, r3
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	2201      	movs	r2, #1
 8007eda:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8007ede:	2300      	movs	r3, #0
}
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	3718      	adds	r7, #24
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	bd80      	pop	{r7, pc}

08007ee8 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8007ee8:	b580      	push	{r7, lr}
 8007eea:	b086      	sub	sp, #24
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	60f8      	str	r0, [r7, #12]
 8007ef0:	460b      	mov	r3, r1
 8007ef2:	607a      	str	r2, [r7, #4]
 8007ef4:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8007efa:	2300      	movs	r3, #0
 8007efc:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007f04:	b2db      	uxtb	r3, r3
 8007f06:	2b42      	cmp	r3, #66	; 0x42
 8007f08:	d101      	bne.n	8007f0e <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8007f0a:	2302      	movs	r3, #2
 8007f0c:	e04e      	b.n	8007fac <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	2242      	movs	r2, #66	; 0x42
 8007f12:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	691b      	ldr	r3, [r3, #16]
 8007f1c:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8007f1e:	697b      	ldr	r3, [r7, #20]
 8007f20:	f003 031c 	and.w	r3, r3, #28
 8007f24:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	8a1b      	ldrh	r3, [r3, #16]
 8007f2a:	02db      	lsls	r3, r3, #11
 8007f2c:	b29b      	uxth	r3, r3
 8007f2e:	697a      	ldr	r2, [r7, #20]
 8007f30:	4313      	orrs	r3, r2
 8007f32:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8007f34:	897b      	ldrh	r3, [r7, #10]
 8007f36:	019b      	lsls	r3, r3, #6
 8007f38:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8007f3c:	697a      	ldr	r2, [r7, #20]
 8007f3e:	4313      	orrs	r3, r2
 8007f40:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8007f42:	697b      	ldr	r3, [r7, #20]
 8007f44:	f043 0302 	orr.w	r3, r3, #2
 8007f48:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8007f4a:	697b      	ldr	r3, [r7, #20]
 8007f4c:	f043 0301 	orr.w	r3, r3, #1
 8007f50:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	b29a      	uxth	r2, r3
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	697a      	ldr	r2, [r7, #20]
 8007f62:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8007f64:	f7fe fb6e 	bl	8006644 <HAL_GetTick>
 8007f68:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8007f6a:	e015      	b.n	8007f98 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8007f6c:	f7fe fb6a 	bl	8006644 <HAL_GetTick>
 8007f70:	4602      	mov	r2, r0
 8007f72:	693b      	ldr	r3, [r7, #16]
 8007f74:	1ad3      	subs	r3, r2, r3
 8007f76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f7a:	d309      	bcc.n	8007f90 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	2201      	movs	r2, #1
 8007f80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	2200      	movs	r2, #0
 8007f88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8007f8c:	2303      	movs	r3, #3
 8007f8e:	e00d      	b.n	8007fac <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	691b      	ldr	r3, [r3, #16]
 8007f96:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8007f98:	697b      	ldr	r3, [r7, #20]
 8007f9a:	f003 0301 	and.w	r3, r3, #1
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d1e4      	bne.n	8007f6c <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	2201      	movs	r2, #1
 8007fa6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8007faa:	2300      	movs	r3, #0
}
 8007fac:	4618      	mov	r0, r3
 8007fae:	3718      	adds	r7, #24
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	bd80      	pop	{r7, pc}

08007fb4 <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8007fb4:	b580      	push	{r7, lr}
 8007fb6:	b082      	sub	sp, #8
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007fc2:	2b01      	cmp	r3, #1
 8007fc4:	d101      	bne.n	8007fca <HAL_ETH_Start+0x16>
 8007fc6:	2302      	movs	r3, #2
 8007fc8:	e01f      	b.n	800800a <HAL_ETH_Start+0x56>
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	2201      	movs	r2, #1
 8007fce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	2202      	movs	r2, #2
 8007fd6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8007fda:	6878      	ldr	r0, [r7, #4]
 8007fdc:	f000 fb44 	bl	8008668 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8007fe0:	6878      	ldr	r0, [r7, #4]
 8007fe2:	f000 fb7b 	bl	80086dc <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8007fe6:	6878      	ldr	r0, [r7, #4]
 8007fe8:	f000 fc12 	bl	8008810 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8007fec:	6878      	ldr	r0, [r7, #4]
 8007fee:	f000 fbaf 	bl	8008750 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8007ff2:	6878      	ldr	r0, [r7, #4]
 8007ff4:	f000 fbdc 	bl	80087b0 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	2201      	movs	r2, #1
 8007ffc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	2200      	movs	r2, #0
 8008004:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8008008:	2300      	movs	r3, #0
}
 800800a:	4618      	mov	r0, r3
 800800c:	3708      	adds	r7, #8
 800800e:	46bd      	mov	sp, r7
 8008010:	bd80      	pop	{r7, pc}

08008012 <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 8008012:	b580      	push	{r7, lr}
 8008014:	b082      	sub	sp, #8
 8008016:	af00      	add	r7, sp, #0
 8008018:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008020:	2b01      	cmp	r3, #1
 8008022:	d101      	bne.n	8008028 <HAL_ETH_Stop+0x16>
 8008024:	2302      	movs	r3, #2
 8008026:	e01f      	b.n	8008068 <HAL_ETH_Stop+0x56>
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	2201      	movs	r2, #1
 800802c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	2202      	movs	r2, #2
 8008034:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 8008038:	6878      	ldr	r0, [r7, #4]
 800803a:	f000 fba1 	bl	8008780 <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 800803e:	6878      	ldr	r0, [r7, #4]
 8008040:	f000 fbce 	bl	80087e0 <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 8008044:	6878      	ldr	r0, [r7, #4]
 8008046:	f000 fb66 	bl	8008716 <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 800804a:	6878      	ldr	r0, [r7, #4]
 800804c:	f000 fbe0 	bl	8008810 <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 8008050:	6878      	ldr	r0, [r7, #4]
 8008052:	f000 fb26 	bl	80086a2 <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	2201      	movs	r2, #1
 800805a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	2200      	movs	r2, #0
 8008062:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8008066:	2300      	movs	r3, #0
}
 8008068:	4618      	mov	r0, r3
 800806a:	3708      	adds	r7, #8
 800806c:	46bd      	mov	sp, r7
 800806e:	bd80      	pop	{r7, pc}

08008070 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 8008070:	b580      	push	{r7, lr}
 8008072:	b084      	sub	sp, #16
 8008074:	af00      	add	r7, sp, #0
 8008076:	6078      	str	r0, [r7, #4]
 8008078:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0U;
 800807a:	2300      	movs	r3, #0
 800807c:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008084:	2b01      	cmp	r3, #1
 8008086:	d101      	bne.n	800808c <HAL_ETH_ConfigMAC+0x1c>
 8008088:	2302      	movs	r3, #2
 800808a:	e0e4      	b.n	8008256 <HAL_ETH_ConfigMAC+0x1e6>
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	2201      	movs	r2, #1
 8008090:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	2202      	movs	r2, #2
 8008098:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 800809c:	683b      	ldr	r3, [r7, #0]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	f000 80b1 	beq.w	8008206 <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80080ac:	68fa      	ldr	r2, [r7, #12]
 80080ae:	4b6c      	ldr	r3, [pc, #432]	; (8008260 <HAL_ETH_ConfigMAC+0x1f0>)
 80080b0:	4013      	ands	r3, r2
 80080b2:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 80080b4:	683b      	ldr	r3, [r7, #0]
 80080b6:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 80080b8:	683b      	ldr	r3, [r7, #0]
 80080ba:	685b      	ldr	r3, [r3, #4]
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 80080bc:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 80080be:	683b      	ldr	r3, [r7, #0]
 80080c0:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 80080c2:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 80080c4:	683b      	ldr	r3, [r7, #0]
 80080c6:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 80080c8:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 80080ce:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 80080d0:	683b      	ldr	r3, [r7, #0]
 80080d2:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 80080d4:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 80080d6:	683b      	ldr	r3, [r7, #0]
 80080d8:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 80080da:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 80080e0:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 80080e2:	683b      	ldr	r3, [r7, #0]
 80080e4:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 80080e6:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 80080e8:	683b      	ldr	r3, [r7, #0]
 80080ea:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 80080ec:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 80080ee:	683b      	ldr	r3, [r7, #0]
 80080f0:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 80080f2:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 80080f4:	683b      	ldr	r3, [r7, #0]
 80080f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 80080f8:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 80080fa:	683b      	ldr	r3, [r7, #0]
 80080fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 80080fe:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8008100:	68fa      	ldr	r2, [r7, #12]
 8008102:	4313      	orrs	r3, r2
 8008104:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	68fa      	ldr	r2, [r7, #12]
 800810c:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8008116:	2001      	movs	r0, #1
 8008118:	f7fe faa0 	bl	800665c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1; 
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	68fa      	ldr	r2, [r7, #12]
 8008122:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8008124:	683b      	ldr	r3, [r7, #0]
 8008126:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 8008128:	683b      	ldr	r3, [r7, #0]
 800812a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 800812c:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 800812e:	683b      	ldr	r3, [r7, #0]
 8008130:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 8008132:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 8008134:	683b      	ldr	r3, [r7, #0]
 8008136:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 8008138:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 800813a:	683b      	ldr	r3, [r7, #0]
 800813c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 800813e:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 8008140:	683b      	ldr	r3, [r7, #0]
 8008142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 8008144:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 8008146:	683b      	ldr	r3, [r7, #0]
 8008148:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 800814a:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 800814e:	683b      	ldr	r3, [r7, #0]
 8008150:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 8008156:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8008158:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFFR;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	685b      	ldr	r3, [r3, #4]
 8008160:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8008162:	2001      	movs	r0, #1
 8008164:	f7fe fa7a 	bl	800665c <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg1;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	68fa      	ldr	r2, [r7, #12]
 800816e:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	683a      	ldr	r2, [r7, #0]
 8008176:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8008178:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	683a      	ldr	r2, [r7, #0]
 8008180:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8008182:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg1 = (heth->Instance)->MACFCR;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	699b      	ldr	r3, [r3, #24]
 800818a:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800818c:	68fa      	ldr	r2, [r7, #12]
 800818e:	f64f 7341 	movw	r3, #65345	; 0xff41
 8008192:	4013      	ands	r3, r2
 8008194:	60fb      	str	r3, [r7, #12]
     
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8008196:	683b      	ldr	r3, [r7, #0]
 8008198:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800819a:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 800819c:	683b      	ldr	r3, [r7, #0]
 800819e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 80081a0:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 80081a2:	683b      	ldr	r3, [r7, #0]
 80081a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 80081a6:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 80081a8:	683b      	ldr	r3, [r7, #0]
 80081aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 80081ac:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 80081ae:	683b      	ldr	r3, [r7, #0]
 80081b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 80081b2:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 80081b4:	683b      	ldr	r3, [r7, #0]
 80081b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 80081b8:	4313      	orrs	r3, r2
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 80081ba:	68fa      	ldr	r2, [r7, #12]
 80081bc:	4313      	orrs	r3, r2
 80081be:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	68fa      	ldr	r2, [r7, #12]
 80081c6:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFCR;
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	699b      	ldr	r3, [r3, #24]
 80081ce:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80081d0:	2001      	movs	r0, #1
 80081d2:	f7fe fa43 	bl	800665c <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg1;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	68fa      	ldr	r2, [r7, #12]
 80081dc:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 80081de:	683b      	ldr	r3, [r7, #0]
 80081e0:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 80081e2:	683b      	ldr	r3, [r7, #0]
 80081e4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	430a      	orrs	r2, r1
 80081ec:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg1 = (heth->Instance)->MACVLANTR;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	69db      	ldr	r3, [r3, #28]
 80081f4:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 80081f6:	2001      	movs	r0, #1
 80081f8:	f7fe fa30 	bl	800665c <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg1;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	68fa      	ldr	r2, [r7, #12]
 8008202:	61da      	str	r2, [r3, #28]
 8008204:	e01e      	b.n	8008244 <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg1 &= ~(0x00004800U);
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8008214:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	689a      	ldr	r2, [r3, #8]
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	68db      	ldr	r3, [r3, #12]
 800821e:	4313      	orrs	r3, r2
 8008220:	68fa      	ldr	r2, [r7, #12]
 8008222:	4313      	orrs	r3, r2
 8008224:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	68fa      	ldr	r2, [r7, #12]
 800822c:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8008236:	2001      	movs	r0, #1
 8008238:	f7fe fa10 	bl	800665c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	68fa      	ldr	r2, [r7, #12]
 8008242:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	2201      	movs	r2, #1
 8008248:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	2200      	movs	r2, #0
 8008250:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 8008254:	2300      	movs	r3, #0
}
 8008256:	4618      	mov	r0, r3
 8008258:	3710      	adds	r7, #16
 800825a:	46bd      	mov	sp, r7
 800825c:	bd80      	pop	{r7, pc}
 800825e:	bf00      	nop
 8008260:	ff20810f 	.word	0xff20810f

08008264 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8008264:	b580      	push	{r7, lr}
 8008266:	b0b0      	sub	sp, #192	; 0xc0
 8008268:	af00      	add	r7, sp, #0
 800826a:	6078      	str	r0, [r7, #4]
 800826c:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 800826e:	2300      	movs	r3, #0
 8008270:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8008274:	683b      	ldr	r3, [r7, #0]
 8008276:	2b00      	cmp	r3, #0
 8008278:	d007      	beq.n	800828a <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008280:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8008288:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 800828a:	2300      	movs	r3, #0
 800828c:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 800828e:	2300      	movs	r3, #0
 8008290:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8008292:	2300      	movs	r3, #0
 8008294:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8008296:	2300      	movs	r3, #0
 8008298:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 800829a:	2300      	movs	r3, #0
 800829c:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 800829e:	2300      	movs	r3, #0
 80082a0:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	69db      	ldr	r3, [r3, #28]
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d103      	bne.n	80082b2 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 80082aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80082ae:	663b      	str	r3, [r7, #96]	; 0x60
 80082b0:	e001      	b.n	80082b6 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 80082b2:	2300      	movs	r3, #0
 80082b4:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 80082b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80082ba:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 80082bc:	2300      	movs	r3, #0
 80082be:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80082c0:	2300      	movs	r3, #0
 80082c2:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 80082c4:	2300      	movs	r3, #0
 80082c6:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 80082c8:	2300      	movs	r3, #0
 80082ca:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 80082cc:	2300      	movs	r3, #0
 80082ce:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 80082d0:	2340      	movs	r3, #64	; 0x40
 80082d2:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 80082d4:	2300      	movs	r3, #0
 80082d6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 80082da:	2300      	movs	r3, #0
 80082dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 80082e0:	2300      	movs	r3, #0
 80082e2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 80082e6:	2300      	movs	r3, #0
 80082e8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 80082ec:	2300      	movs	r3, #0
 80082ee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 80082f2:	2300      	movs	r3, #0
 80082f4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 80082f8:	2300      	movs	r3, #0
 80082fa:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 80082fe:	2300      	movs	r3, #0
 8008300:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8008304:	2380      	movs	r3, #128	; 0x80
 8008306:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800830a:	2300      	movs	r3, #0
 800830c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8008310:	2300      	movs	r3, #0
 8008312:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8008316:	2300      	movs	r3, #0
 8008318:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 800831c:	2300      	movs	r3, #0
 800831e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8008322:	2300      	movs	r3, #0
 8008324:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 8008328:	2300      	movs	r3, #0
 800832a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8008338:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800833c:	4bac      	ldr	r3, [pc, #688]	; (80085f0 <ETH_MACDMAConfig+0x38c>)
 800833e:	4013      	ands	r3, r2
 8008340:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8008344:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8008346:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8008348:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 800834a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 800834c:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 800834e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8008350:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8008356:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8008358:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 800835a:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 800835c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 800835e:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8008364:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8008366:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8008368:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 800836a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 800836c:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 800836e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8008370:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8008372:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8008374:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8008376:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8008378:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 800837a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800837e:	4313      	orrs	r3, r2
 8008380:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800838c:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8008398:	2001      	movs	r0, #1
 800839a:	f7fe f95f 	bl	800665c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80083a6:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80083a8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 80083aa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80083ac:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 80083ae:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 80083b0:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 80083b2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 80083b6:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 80083b8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 80083bc:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 80083be:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 80083c2:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 80083c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 80083c8:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 80083cc:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 80083d4:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80083d6:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	685b      	ldr	r3, [r3, #4]
 80083de:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80083e2:	2001      	movs	r0, #1
 80083e4:	f7fe f93a 	bl	800665c <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80083f0:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80083fa:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8008404:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	699b      	ldr	r3, [r3, #24]
 800840c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8008410:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8008414:	f64f 7341 	movw	r3, #65345	; 0xff41
 8008418:	4013      	ands	r3, r2
 800841a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 800841e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008422:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8008424:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8008428:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 800842a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 800842e:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8008430:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8008434:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8008436:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 800843a:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 800843c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8008440:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8008442:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8008446:	4313      	orrs	r3, r2
 8008448:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8008454:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	699b      	ldr	r3, [r3, #24]
 800845c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8008460:	2001      	movs	r0, #1
 8008462:	f7fe f8fb 	bl	800665c <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800846e:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8008470:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8008474:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	430a      	orrs	r2, r1
 800847e:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	69db      	ldr	r3, [r3, #28]
 8008486:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800848a:	2001      	movs	r0, #1
 800848c:	f7fe f8e6 	bl	800665c <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8008498:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 800849a:	2300      	movs	r3, #0
 800849c:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 800849e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80084a2:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 80084a4:	2300      	movs	r3, #0
 80084a6:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 80084a8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80084ac:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80084ae:	2300      	movs	r3, #0
 80084b0:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 80084b2:	2300      	movs	r3, #0
 80084b4:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 80084b6:	2300      	movs	r3, #0
 80084b8:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80084ba:	2300      	movs	r3, #0
 80084bc:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 80084be:	2304      	movs	r3, #4
 80084c0:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 80084c2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80084c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 80084c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80084cc:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80084ce:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80084d2:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80084d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80084d8:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 80084da:	2380      	movs	r3, #128	; 0x80
 80084dc:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 80084de:	2300      	movs	r3, #0
 80084e0:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80084e2:	2300      	movs	r3, #0
 80084e4:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80084ee:	3318      	adds	r3, #24
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80084f6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80084fa:	4b3e      	ldr	r3, [pc, #248]	; (80085f4 <ETH_MACDMAConfig+0x390>)
 80084fc:	4013      	ands	r3, r2
 80084fe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8008502:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8008504:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8008506:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8008508:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 800850a:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 800850c:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 800850e:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8008510:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8008512:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8008514:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8008516:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8008518:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 800851a:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 800851c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 800851e:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8008520:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8008522:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8008524:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8008528:	4313      	orrs	r3, r2
 800852a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008536:	3318      	adds	r3, #24
 8008538:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800853c:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008546:	3318      	adds	r3, #24
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800854e:	2001      	movs	r0, #1
 8008550:	f7fe f884 	bl	800665c <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800855c:	3318      	adds	r3, #24
 800855e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8008562:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8008564:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8008566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8008568:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 800856a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 800856c:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 800856e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8008570:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8008572:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8008574:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 8008576:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008578:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 800857a:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 800857c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 800857e:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8008588:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800858c:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800859c:	2001      	movs	r0, #1
 800859e:	f7fe f85d 	bl	800665c <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80085aa:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80085ae:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	699b      	ldr	r3, [r3, #24]
 80085b4:	2b01      	cmp	r3, #1
 80085b6:	d10f      	bne.n	80085d8 <ETH_MACDMAConfig+0x374>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80085c0:	331c      	adds	r3, #28
 80085c2:	681a      	ldr	r2, [r3, #0]
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80085cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80085d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80085d4:	331c      	adds	r3, #28
 80085d6:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	695b      	ldr	r3, [r3, #20]
 80085dc:	461a      	mov	r2, r3
 80085de:	2100      	movs	r1, #0
 80085e0:	6878      	ldr	r0, [r7, #4]
 80085e2:	f000 f809 	bl	80085f8 <ETH_MACAddressConfig>
}
 80085e6:	bf00      	nop
 80085e8:	37c0      	adds	r7, #192	; 0xc0
 80085ea:	46bd      	mov	sp, r7
 80085ec:	bd80      	pop	{r7, pc}
 80085ee:	bf00      	nop
 80085f0:	ff20810f 	.word	0xff20810f
 80085f4:	f8de3f23 	.word	0xf8de3f23

080085f8 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80085f8:	b480      	push	{r7}
 80085fa:	b087      	sub	sp, #28
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	60f8      	str	r0, [r7, #12]
 8008600:	60b9      	str	r1, [r7, #8]
 8008602:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	3305      	adds	r3, #5
 8008608:	781b      	ldrb	r3, [r3, #0]
 800860a:	021b      	lsls	r3, r3, #8
 800860c:	687a      	ldr	r2, [r7, #4]
 800860e:	3204      	adds	r2, #4
 8008610:	7812      	ldrb	r2, [r2, #0]
 8008612:	4313      	orrs	r3, r2
 8008614:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8008616:	68ba      	ldr	r2, [r7, #8]
 8008618:	4b11      	ldr	r3, [pc, #68]	; (8008660 <ETH_MACAddressConfig+0x68>)
 800861a:	4413      	add	r3, r2
 800861c:	461a      	mov	r2, r3
 800861e:	697b      	ldr	r3, [r7, #20]
 8008620:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	3303      	adds	r3, #3
 8008626:	781b      	ldrb	r3, [r3, #0]
 8008628:	061a      	lsls	r2, r3, #24
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	3302      	adds	r3, #2
 800862e:	781b      	ldrb	r3, [r3, #0]
 8008630:	041b      	lsls	r3, r3, #16
 8008632:	431a      	orrs	r2, r3
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	3301      	adds	r3, #1
 8008638:	781b      	ldrb	r3, [r3, #0]
 800863a:	021b      	lsls	r3, r3, #8
 800863c:	4313      	orrs	r3, r2
 800863e:	687a      	ldr	r2, [r7, #4]
 8008640:	7812      	ldrb	r2, [r2, #0]
 8008642:	4313      	orrs	r3, r2
 8008644:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8008646:	68ba      	ldr	r2, [r7, #8]
 8008648:	4b06      	ldr	r3, [pc, #24]	; (8008664 <ETH_MACAddressConfig+0x6c>)
 800864a:	4413      	add	r3, r2
 800864c:	461a      	mov	r2, r3
 800864e:	697b      	ldr	r3, [r7, #20]
 8008650:	6013      	str	r3, [r2, #0]
}
 8008652:	bf00      	nop
 8008654:	371c      	adds	r7, #28
 8008656:	46bd      	mov	sp, r7
 8008658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800865c:	4770      	bx	lr
 800865e:	bf00      	nop
 8008660:	40028040 	.word	0x40028040
 8008664:	40028044 	.word	0x40028044

08008668 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 8008668:	b580      	push	{r7, lr}
 800866a:	b084      	sub	sp, #16
 800866c:	af00      	add	r7, sp, #0
 800866e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8008670:	2300      	movs	r3, #0
 8008672:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	681a      	ldr	r2, [r3, #0]
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	f042 0208 	orr.w	r2, r2, #8
 8008682:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800868c:	2001      	movs	r0, #1
 800868e:	f000 f8e9 	bl	8008864 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	68fa      	ldr	r2, [r7, #12]
 8008698:	601a      	str	r2, [r3, #0]
}
 800869a:	bf00      	nop
 800869c:	3710      	adds	r7, #16
 800869e:	46bd      	mov	sp, r7
 80086a0:	bd80      	pop	{r7, pc}

080086a2 <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 80086a2:	b580      	push	{r7, lr}
 80086a4:	b084      	sub	sp, #16
 80086a6:	af00      	add	r7, sp, #0
 80086a8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80086aa:	2300      	movs	r3, #0
 80086ac:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	681a      	ldr	r2, [r3, #0]
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	f022 0208 	bic.w	r2, r2, #8
 80086bc:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80086c6:	2001      	movs	r0, #1
 80086c8:	f000 f8cc 	bl	8008864 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	68fa      	ldr	r2, [r7, #12]
 80086d2:	601a      	str	r2, [r3, #0]
}
 80086d4:	bf00      	nop
 80086d6:	3710      	adds	r7, #16
 80086d8:	46bd      	mov	sp, r7
 80086da:	bd80      	pop	{r7, pc}

080086dc <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 80086dc:	b580      	push	{r7, lr}
 80086de:	b084      	sub	sp, #16
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80086e4:	2300      	movs	r3, #0
 80086e6:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	681a      	ldr	r2, [r3, #0]
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	f042 0204 	orr.w	r2, r2, #4
 80086f6:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8008700:	2001      	movs	r0, #1
 8008702:	f000 f8af 	bl	8008864 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	68fa      	ldr	r2, [r7, #12]
 800870c:	601a      	str	r2, [r3, #0]
}
 800870e:	bf00      	nop
 8008710:	3710      	adds	r7, #16
 8008712:	46bd      	mov	sp, r7
 8008714:	bd80      	pop	{r7, pc}

08008716 <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8008716:	b580      	push	{r7, lr}
 8008718:	b084      	sub	sp, #16
 800871a:	af00      	add	r7, sp, #0
 800871c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 800871e:	2300      	movs	r3, #0
 8008720:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	681a      	ldr	r2, [r3, #0]
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	f022 0204 	bic.w	r2, r2, #4
 8008730:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800873a:	2001      	movs	r0, #1
 800873c:	f000 f892 	bl	8008864 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	68fa      	ldr	r2, [r7, #12]
 8008746:	601a      	str	r2, [r3, #0]
}
 8008748:	bf00      	nop
 800874a:	3710      	adds	r7, #16
 800874c:	46bd      	mov	sp, r7
 800874e:	bd80      	pop	{r7, pc}

08008750 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8008750:	b480      	push	{r7}
 8008752:	b083      	sub	sp, #12
 8008754:	af00      	add	r7, sp, #0
 8008756:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008760:	3318      	adds	r3, #24
 8008762:	681a      	ldr	r2, [r3, #0]
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800876c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008770:	3318      	adds	r3, #24
 8008772:	601a      	str	r2, [r3, #0]
}
 8008774:	bf00      	nop
 8008776:	370c      	adds	r7, #12
 8008778:	46bd      	mov	sp, r7
 800877a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800877e:	4770      	bx	lr

08008780 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8008780:	b480      	push	{r7}
 8008782:	b083      	sub	sp, #12
 8008784:	af00      	add	r7, sp, #0
 8008786:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008790:	3318      	adds	r3, #24
 8008792:	681a      	ldr	r2, [r3, #0]
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800879c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80087a0:	3318      	adds	r3, #24
 80087a2:	601a      	str	r2, [r3, #0]
}
 80087a4:	bf00      	nop
 80087a6:	370c      	adds	r7, #12
 80087a8:	46bd      	mov	sp, r7
 80087aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ae:	4770      	bx	lr

080087b0 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 80087b0:	b480      	push	{r7}
 80087b2:	b083      	sub	sp, #12
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80087c0:	3318      	adds	r3, #24
 80087c2:	681a      	ldr	r2, [r3, #0]
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	f042 0202 	orr.w	r2, r2, #2
 80087cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80087d0:	3318      	adds	r3, #24
 80087d2:	601a      	str	r2, [r3, #0]
}
 80087d4:	bf00      	nop
 80087d6:	370c      	adds	r7, #12
 80087d8:	46bd      	mov	sp, r7
 80087da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087de:	4770      	bx	lr

080087e0 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 80087e0:	b480      	push	{r7}
 80087e2:	b083      	sub	sp, #12
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80087f0:	3318      	adds	r3, #24
 80087f2:	681a      	ldr	r2, [r3, #0]
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	f022 0202 	bic.w	r2, r2, #2
 80087fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008800:	3318      	adds	r3, #24
 8008802:	601a      	str	r2, [r3, #0]
}
 8008804:	bf00      	nop
 8008806:	370c      	adds	r7, #12
 8008808:	46bd      	mov	sp, r7
 800880a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880e:	4770      	bx	lr

08008810 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8008810:	b580      	push	{r7, lr}
 8008812:	b084      	sub	sp, #16
 8008814:	af00      	add	r7, sp, #0
 8008816:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8008818:	2300      	movs	r3, #0
 800881a:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008824:	3318      	adds	r3, #24
 8008826:	681a      	ldr	r2, [r3, #0]
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8008830:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008834:	3318      	adds	r3, #24
 8008836:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008840:	3318      	adds	r3, #24
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8008846:	2001      	movs	r0, #1
 8008848:	f000 f80c 	bl	8008864 <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	68fa      	ldr	r2, [r7, #12]
 8008852:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008856:	3318      	adds	r3, #24
 8008858:	601a      	str	r2, [r3, #0]
}
 800885a:	bf00      	nop
 800885c:	3710      	adds	r7, #16
 800885e:	46bd      	mov	sp, r7
 8008860:	bd80      	pop	{r7, pc}
	...

08008864 <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 8008864:	b480      	push	{r7}
 8008866:	b085      	sub	sp, #20
 8008868:	af00      	add	r7, sp, #0
 800886a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800886c:	4b0b      	ldr	r3, [pc, #44]	; (800889c <ETH_Delay+0x38>)
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	4a0b      	ldr	r2, [pc, #44]	; (80088a0 <ETH_Delay+0x3c>)
 8008872:	fba2 2303 	umull	r2, r3, r2, r3
 8008876:	0a5b      	lsrs	r3, r3, #9
 8008878:	687a      	ldr	r2, [r7, #4]
 800887a:	fb02 f303 	mul.w	r3, r2, r3
 800887e:	60fb      	str	r3, [r7, #12]
  do 
  {
    __NOP();
 8008880:	bf00      	nop
  } 
  while (Delay --);
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	1e5a      	subs	r2, r3, #1
 8008886:	60fa      	str	r2, [r7, #12]
 8008888:	2b00      	cmp	r3, #0
 800888a:	d1f9      	bne.n	8008880 <ETH_Delay+0x1c>
}
 800888c:	bf00      	nop
 800888e:	bf00      	nop
 8008890:	3714      	adds	r7, #20
 8008892:	46bd      	mov	sp, r7
 8008894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008898:	4770      	bx	lr
 800889a:	bf00      	nop
 800889c:	2000005c 	.word	0x2000005c
 80088a0:	10624dd3 	.word	0x10624dd3

080088a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80088a4:	b480      	push	{r7}
 80088a6:	b089      	sub	sp, #36	; 0x24
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	6078      	str	r0, [r7, #4]
 80088ac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80088ae:	2300      	movs	r3, #0
 80088b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80088b2:	2300      	movs	r3, #0
 80088b4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80088b6:	2300      	movs	r3, #0
 80088b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80088ba:	2300      	movs	r3, #0
 80088bc:	61fb      	str	r3, [r7, #28]
 80088be:	e16b      	b.n	8008b98 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80088c0:	2201      	movs	r2, #1
 80088c2:	69fb      	ldr	r3, [r7, #28]
 80088c4:	fa02 f303 	lsl.w	r3, r2, r3
 80088c8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80088ca:	683b      	ldr	r3, [r7, #0]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	697a      	ldr	r2, [r7, #20]
 80088d0:	4013      	ands	r3, r2
 80088d2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80088d4:	693a      	ldr	r2, [r7, #16]
 80088d6:	697b      	ldr	r3, [r7, #20]
 80088d8:	429a      	cmp	r2, r3
 80088da:	f040 815a 	bne.w	8008b92 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80088de:	683b      	ldr	r3, [r7, #0]
 80088e0:	685b      	ldr	r3, [r3, #4]
 80088e2:	2b01      	cmp	r3, #1
 80088e4:	d00b      	beq.n	80088fe <HAL_GPIO_Init+0x5a>
 80088e6:	683b      	ldr	r3, [r7, #0]
 80088e8:	685b      	ldr	r3, [r3, #4]
 80088ea:	2b02      	cmp	r3, #2
 80088ec:	d007      	beq.n	80088fe <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80088ee:	683b      	ldr	r3, [r7, #0]
 80088f0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80088f2:	2b11      	cmp	r3, #17
 80088f4:	d003      	beq.n	80088fe <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80088f6:	683b      	ldr	r3, [r7, #0]
 80088f8:	685b      	ldr	r3, [r3, #4]
 80088fa:	2b12      	cmp	r3, #18
 80088fc:	d130      	bne.n	8008960 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	689b      	ldr	r3, [r3, #8]
 8008902:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8008904:	69fb      	ldr	r3, [r7, #28]
 8008906:	005b      	lsls	r3, r3, #1
 8008908:	2203      	movs	r2, #3
 800890a:	fa02 f303 	lsl.w	r3, r2, r3
 800890e:	43db      	mvns	r3, r3
 8008910:	69ba      	ldr	r2, [r7, #24]
 8008912:	4013      	ands	r3, r2
 8008914:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008916:	683b      	ldr	r3, [r7, #0]
 8008918:	68da      	ldr	r2, [r3, #12]
 800891a:	69fb      	ldr	r3, [r7, #28]
 800891c:	005b      	lsls	r3, r3, #1
 800891e:	fa02 f303 	lsl.w	r3, r2, r3
 8008922:	69ba      	ldr	r2, [r7, #24]
 8008924:	4313      	orrs	r3, r2
 8008926:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	69ba      	ldr	r2, [r7, #24]
 800892c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	685b      	ldr	r3, [r3, #4]
 8008932:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008934:	2201      	movs	r2, #1
 8008936:	69fb      	ldr	r3, [r7, #28]
 8008938:	fa02 f303 	lsl.w	r3, r2, r3
 800893c:	43db      	mvns	r3, r3
 800893e:	69ba      	ldr	r2, [r7, #24]
 8008940:	4013      	ands	r3, r2
 8008942:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8008944:	683b      	ldr	r3, [r7, #0]
 8008946:	685b      	ldr	r3, [r3, #4]
 8008948:	091b      	lsrs	r3, r3, #4
 800894a:	f003 0201 	and.w	r2, r3, #1
 800894e:	69fb      	ldr	r3, [r7, #28]
 8008950:	fa02 f303 	lsl.w	r3, r2, r3
 8008954:	69ba      	ldr	r2, [r7, #24]
 8008956:	4313      	orrs	r3, r2
 8008958:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	69ba      	ldr	r2, [r7, #24]
 800895e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	68db      	ldr	r3, [r3, #12]
 8008964:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8008966:	69fb      	ldr	r3, [r7, #28]
 8008968:	005b      	lsls	r3, r3, #1
 800896a:	2203      	movs	r2, #3
 800896c:	fa02 f303 	lsl.w	r3, r2, r3
 8008970:	43db      	mvns	r3, r3
 8008972:	69ba      	ldr	r2, [r7, #24]
 8008974:	4013      	ands	r3, r2
 8008976:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008978:	683b      	ldr	r3, [r7, #0]
 800897a:	689a      	ldr	r2, [r3, #8]
 800897c:	69fb      	ldr	r3, [r7, #28]
 800897e:	005b      	lsls	r3, r3, #1
 8008980:	fa02 f303 	lsl.w	r3, r2, r3
 8008984:	69ba      	ldr	r2, [r7, #24]
 8008986:	4313      	orrs	r3, r2
 8008988:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	69ba      	ldr	r2, [r7, #24]
 800898e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008990:	683b      	ldr	r3, [r7, #0]
 8008992:	685b      	ldr	r3, [r3, #4]
 8008994:	2b02      	cmp	r3, #2
 8008996:	d003      	beq.n	80089a0 <HAL_GPIO_Init+0xfc>
 8008998:	683b      	ldr	r3, [r7, #0]
 800899a:	685b      	ldr	r3, [r3, #4]
 800899c:	2b12      	cmp	r3, #18
 800899e:	d123      	bne.n	80089e8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80089a0:	69fb      	ldr	r3, [r7, #28]
 80089a2:	08da      	lsrs	r2, r3, #3
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	3208      	adds	r2, #8
 80089a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80089ae:	69fb      	ldr	r3, [r7, #28]
 80089b0:	f003 0307 	and.w	r3, r3, #7
 80089b4:	009b      	lsls	r3, r3, #2
 80089b6:	220f      	movs	r2, #15
 80089b8:	fa02 f303 	lsl.w	r3, r2, r3
 80089bc:	43db      	mvns	r3, r3
 80089be:	69ba      	ldr	r2, [r7, #24]
 80089c0:	4013      	ands	r3, r2
 80089c2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80089c4:	683b      	ldr	r3, [r7, #0]
 80089c6:	691a      	ldr	r2, [r3, #16]
 80089c8:	69fb      	ldr	r3, [r7, #28]
 80089ca:	f003 0307 	and.w	r3, r3, #7
 80089ce:	009b      	lsls	r3, r3, #2
 80089d0:	fa02 f303 	lsl.w	r3, r2, r3
 80089d4:	69ba      	ldr	r2, [r7, #24]
 80089d6:	4313      	orrs	r3, r2
 80089d8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80089da:	69fb      	ldr	r3, [r7, #28]
 80089dc:	08da      	lsrs	r2, r3, #3
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	3208      	adds	r2, #8
 80089e2:	69b9      	ldr	r1, [r7, #24]
 80089e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80089ee:	69fb      	ldr	r3, [r7, #28]
 80089f0:	005b      	lsls	r3, r3, #1
 80089f2:	2203      	movs	r2, #3
 80089f4:	fa02 f303 	lsl.w	r3, r2, r3
 80089f8:	43db      	mvns	r3, r3
 80089fa:	69ba      	ldr	r2, [r7, #24]
 80089fc:	4013      	ands	r3, r2
 80089fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008a00:	683b      	ldr	r3, [r7, #0]
 8008a02:	685b      	ldr	r3, [r3, #4]
 8008a04:	f003 0203 	and.w	r2, r3, #3
 8008a08:	69fb      	ldr	r3, [r7, #28]
 8008a0a:	005b      	lsls	r3, r3, #1
 8008a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8008a10:	69ba      	ldr	r2, [r7, #24]
 8008a12:	4313      	orrs	r3, r2
 8008a14:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	69ba      	ldr	r2, [r7, #24]
 8008a1a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8008a1c:	683b      	ldr	r3, [r7, #0]
 8008a1e:	685b      	ldr	r3, [r3, #4]
 8008a20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	f000 80b4 	beq.w	8008b92 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	60fb      	str	r3, [r7, #12]
 8008a2e:	4b60      	ldr	r3, [pc, #384]	; (8008bb0 <HAL_GPIO_Init+0x30c>)
 8008a30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a32:	4a5f      	ldr	r2, [pc, #380]	; (8008bb0 <HAL_GPIO_Init+0x30c>)
 8008a34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008a38:	6453      	str	r3, [r2, #68]	; 0x44
 8008a3a:	4b5d      	ldr	r3, [pc, #372]	; (8008bb0 <HAL_GPIO_Init+0x30c>)
 8008a3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008a42:	60fb      	str	r3, [r7, #12]
 8008a44:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008a46:	4a5b      	ldr	r2, [pc, #364]	; (8008bb4 <HAL_GPIO_Init+0x310>)
 8008a48:	69fb      	ldr	r3, [r7, #28]
 8008a4a:	089b      	lsrs	r3, r3, #2
 8008a4c:	3302      	adds	r3, #2
 8008a4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008a52:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8008a54:	69fb      	ldr	r3, [r7, #28]
 8008a56:	f003 0303 	and.w	r3, r3, #3
 8008a5a:	009b      	lsls	r3, r3, #2
 8008a5c:	220f      	movs	r2, #15
 8008a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8008a62:	43db      	mvns	r3, r3
 8008a64:	69ba      	ldr	r2, [r7, #24]
 8008a66:	4013      	ands	r3, r2
 8008a68:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	4a52      	ldr	r2, [pc, #328]	; (8008bb8 <HAL_GPIO_Init+0x314>)
 8008a6e:	4293      	cmp	r3, r2
 8008a70:	d02b      	beq.n	8008aca <HAL_GPIO_Init+0x226>
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	4a51      	ldr	r2, [pc, #324]	; (8008bbc <HAL_GPIO_Init+0x318>)
 8008a76:	4293      	cmp	r3, r2
 8008a78:	d025      	beq.n	8008ac6 <HAL_GPIO_Init+0x222>
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	4a50      	ldr	r2, [pc, #320]	; (8008bc0 <HAL_GPIO_Init+0x31c>)
 8008a7e:	4293      	cmp	r3, r2
 8008a80:	d01f      	beq.n	8008ac2 <HAL_GPIO_Init+0x21e>
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	4a4f      	ldr	r2, [pc, #316]	; (8008bc4 <HAL_GPIO_Init+0x320>)
 8008a86:	4293      	cmp	r3, r2
 8008a88:	d019      	beq.n	8008abe <HAL_GPIO_Init+0x21a>
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	4a4e      	ldr	r2, [pc, #312]	; (8008bc8 <HAL_GPIO_Init+0x324>)
 8008a8e:	4293      	cmp	r3, r2
 8008a90:	d013      	beq.n	8008aba <HAL_GPIO_Init+0x216>
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	4a4d      	ldr	r2, [pc, #308]	; (8008bcc <HAL_GPIO_Init+0x328>)
 8008a96:	4293      	cmp	r3, r2
 8008a98:	d00d      	beq.n	8008ab6 <HAL_GPIO_Init+0x212>
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	4a4c      	ldr	r2, [pc, #304]	; (8008bd0 <HAL_GPIO_Init+0x32c>)
 8008a9e:	4293      	cmp	r3, r2
 8008aa0:	d007      	beq.n	8008ab2 <HAL_GPIO_Init+0x20e>
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	4a4b      	ldr	r2, [pc, #300]	; (8008bd4 <HAL_GPIO_Init+0x330>)
 8008aa6:	4293      	cmp	r3, r2
 8008aa8:	d101      	bne.n	8008aae <HAL_GPIO_Init+0x20a>
 8008aaa:	2307      	movs	r3, #7
 8008aac:	e00e      	b.n	8008acc <HAL_GPIO_Init+0x228>
 8008aae:	2308      	movs	r3, #8
 8008ab0:	e00c      	b.n	8008acc <HAL_GPIO_Init+0x228>
 8008ab2:	2306      	movs	r3, #6
 8008ab4:	e00a      	b.n	8008acc <HAL_GPIO_Init+0x228>
 8008ab6:	2305      	movs	r3, #5
 8008ab8:	e008      	b.n	8008acc <HAL_GPIO_Init+0x228>
 8008aba:	2304      	movs	r3, #4
 8008abc:	e006      	b.n	8008acc <HAL_GPIO_Init+0x228>
 8008abe:	2303      	movs	r3, #3
 8008ac0:	e004      	b.n	8008acc <HAL_GPIO_Init+0x228>
 8008ac2:	2302      	movs	r3, #2
 8008ac4:	e002      	b.n	8008acc <HAL_GPIO_Init+0x228>
 8008ac6:	2301      	movs	r3, #1
 8008ac8:	e000      	b.n	8008acc <HAL_GPIO_Init+0x228>
 8008aca:	2300      	movs	r3, #0
 8008acc:	69fa      	ldr	r2, [r7, #28]
 8008ace:	f002 0203 	and.w	r2, r2, #3
 8008ad2:	0092      	lsls	r2, r2, #2
 8008ad4:	4093      	lsls	r3, r2
 8008ad6:	69ba      	ldr	r2, [r7, #24]
 8008ad8:	4313      	orrs	r3, r2
 8008ada:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008adc:	4935      	ldr	r1, [pc, #212]	; (8008bb4 <HAL_GPIO_Init+0x310>)
 8008ade:	69fb      	ldr	r3, [r7, #28]
 8008ae0:	089b      	lsrs	r3, r3, #2
 8008ae2:	3302      	adds	r3, #2
 8008ae4:	69ba      	ldr	r2, [r7, #24]
 8008ae6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8008aea:	4b3b      	ldr	r3, [pc, #236]	; (8008bd8 <HAL_GPIO_Init+0x334>)
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008af0:	693b      	ldr	r3, [r7, #16]
 8008af2:	43db      	mvns	r3, r3
 8008af4:	69ba      	ldr	r2, [r7, #24]
 8008af6:	4013      	ands	r3, r2
 8008af8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8008afa:	683b      	ldr	r3, [r7, #0]
 8008afc:	685b      	ldr	r3, [r3, #4]
 8008afe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d003      	beq.n	8008b0e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8008b06:	69ba      	ldr	r2, [r7, #24]
 8008b08:	693b      	ldr	r3, [r7, #16]
 8008b0a:	4313      	orrs	r3, r2
 8008b0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8008b0e:	4a32      	ldr	r2, [pc, #200]	; (8008bd8 <HAL_GPIO_Init+0x334>)
 8008b10:	69bb      	ldr	r3, [r7, #24]
 8008b12:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8008b14:	4b30      	ldr	r3, [pc, #192]	; (8008bd8 <HAL_GPIO_Init+0x334>)
 8008b16:	685b      	ldr	r3, [r3, #4]
 8008b18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008b1a:	693b      	ldr	r3, [r7, #16]
 8008b1c:	43db      	mvns	r3, r3
 8008b1e:	69ba      	ldr	r2, [r7, #24]
 8008b20:	4013      	ands	r3, r2
 8008b22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8008b24:	683b      	ldr	r3, [r7, #0]
 8008b26:	685b      	ldr	r3, [r3, #4]
 8008b28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d003      	beq.n	8008b38 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8008b30:	69ba      	ldr	r2, [r7, #24]
 8008b32:	693b      	ldr	r3, [r7, #16]
 8008b34:	4313      	orrs	r3, r2
 8008b36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8008b38:	4a27      	ldr	r2, [pc, #156]	; (8008bd8 <HAL_GPIO_Init+0x334>)
 8008b3a:	69bb      	ldr	r3, [r7, #24]
 8008b3c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8008b3e:	4b26      	ldr	r3, [pc, #152]	; (8008bd8 <HAL_GPIO_Init+0x334>)
 8008b40:	689b      	ldr	r3, [r3, #8]
 8008b42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008b44:	693b      	ldr	r3, [r7, #16]
 8008b46:	43db      	mvns	r3, r3
 8008b48:	69ba      	ldr	r2, [r7, #24]
 8008b4a:	4013      	ands	r3, r2
 8008b4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8008b4e:	683b      	ldr	r3, [r7, #0]
 8008b50:	685b      	ldr	r3, [r3, #4]
 8008b52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d003      	beq.n	8008b62 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8008b5a:	69ba      	ldr	r2, [r7, #24]
 8008b5c:	693b      	ldr	r3, [r7, #16]
 8008b5e:	4313      	orrs	r3, r2
 8008b60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8008b62:	4a1d      	ldr	r2, [pc, #116]	; (8008bd8 <HAL_GPIO_Init+0x334>)
 8008b64:	69bb      	ldr	r3, [r7, #24]
 8008b66:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8008b68:	4b1b      	ldr	r3, [pc, #108]	; (8008bd8 <HAL_GPIO_Init+0x334>)
 8008b6a:	68db      	ldr	r3, [r3, #12]
 8008b6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008b6e:	693b      	ldr	r3, [r7, #16]
 8008b70:	43db      	mvns	r3, r3
 8008b72:	69ba      	ldr	r2, [r7, #24]
 8008b74:	4013      	ands	r3, r2
 8008b76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8008b78:	683b      	ldr	r3, [r7, #0]
 8008b7a:	685b      	ldr	r3, [r3, #4]
 8008b7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d003      	beq.n	8008b8c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8008b84:	69ba      	ldr	r2, [r7, #24]
 8008b86:	693b      	ldr	r3, [r7, #16]
 8008b88:	4313      	orrs	r3, r2
 8008b8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8008b8c:	4a12      	ldr	r2, [pc, #72]	; (8008bd8 <HAL_GPIO_Init+0x334>)
 8008b8e:	69bb      	ldr	r3, [r7, #24]
 8008b90:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008b92:	69fb      	ldr	r3, [r7, #28]
 8008b94:	3301      	adds	r3, #1
 8008b96:	61fb      	str	r3, [r7, #28]
 8008b98:	69fb      	ldr	r3, [r7, #28]
 8008b9a:	2b0f      	cmp	r3, #15
 8008b9c:	f67f ae90 	bls.w	80088c0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8008ba0:	bf00      	nop
 8008ba2:	bf00      	nop
 8008ba4:	3724      	adds	r7, #36	; 0x24
 8008ba6:	46bd      	mov	sp, r7
 8008ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bac:	4770      	bx	lr
 8008bae:	bf00      	nop
 8008bb0:	40023800 	.word	0x40023800
 8008bb4:	40013800 	.word	0x40013800
 8008bb8:	40020000 	.word	0x40020000
 8008bbc:	40020400 	.word	0x40020400
 8008bc0:	40020800 	.word	0x40020800
 8008bc4:	40020c00 	.word	0x40020c00
 8008bc8:	40021000 	.word	0x40021000
 8008bcc:	40021400 	.word	0x40021400
 8008bd0:	40021800 	.word	0x40021800
 8008bd4:	40021c00 	.word	0x40021c00
 8008bd8:	40013c00 	.word	0x40013c00

08008bdc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008bdc:	b480      	push	{r7}
 8008bde:	b085      	sub	sp, #20
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	6078      	str	r0, [r7, #4]
 8008be4:	460b      	mov	r3, r1
 8008be6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	691a      	ldr	r2, [r3, #16]
 8008bec:	887b      	ldrh	r3, [r7, #2]
 8008bee:	4013      	ands	r3, r2
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d002      	beq.n	8008bfa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008bf4:	2301      	movs	r3, #1
 8008bf6:	73fb      	strb	r3, [r7, #15]
 8008bf8:	e001      	b.n	8008bfe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008bfa:	2300      	movs	r3, #0
 8008bfc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008bfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c00:	4618      	mov	r0, r3
 8008c02:	3714      	adds	r7, #20
 8008c04:	46bd      	mov	sp, r7
 8008c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0a:	4770      	bx	lr

08008c0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008c0c:	b480      	push	{r7}
 8008c0e:	b083      	sub	sp, #12
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	6078      	str	r0, [r7, #4]
 8008c14:	460b      	mov	r3, r1
 8008c16:	807b      	strh	r3, [r7, #2]
 8008c18:	4613      	mov	r3, r2
 8008c1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008c1c:	787b      	ldrb	r3, [r7, #1]
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d003      	beq.n	8008c2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008c22:	887a      	ldrh	r2, [r7, #2]
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8008c28:	e003      	b.n	8008c32 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8008c2a:	887b      	ldrh	r3, [r7, #2]
 8008c2c:	041a      	lsls	r2, r3, #16
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	619a      	str	r2, [r3, #24]
}
 8008c32:	bf00      	nop
 8008c34:	370c      	adds	r7, #12
 8008c36:	46bd      	mov	sp, r7
 8008c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c3c:	4770      	bx	lr
	...

08008c40 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008c40:	b580      	push	{r7, lr}
 8008c42:	b082      	sub	sp, #8
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	4603      	mov	r3, r0
 8008c48:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8008c4a:	4b08      	ldr	r3, [pc, #32]	; (8008c6c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008c4c:	695a      	ldr	r2, [r3, #20]
 8008c4e:	88fb      	ldrh	r3, [r7, #6]
 8008c50:	4013      	ands	r3, r2
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d006      	beq.n	8008c64 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8008c56:	4a05      	ldr	r2, [pc, #20]	; (8008c6c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008c58:	88fb      	ldrh	r3, [r7, #6]
 8008c5a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008c5c:	88fb      	ldrh	r3, [r7, #6]
 8008c5e:	4618      	mov	r0, r3
 8008c60:	f7fb fae0 	bl	8004224 <HAL_GPIO_EXTI_Callback>
  }
}
 8008c64:	bf00      	nop
 8008c66:	3708      	adds	r7, #8
 8008c68:	46bd      	mov	sp, r7
 8008c6a:	bd80      	pop	{r7, pc}
 8008c6c:	40013c00 	.word	0x40013c00

08008c70 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008c70:	b580      	push	{r7, lr}
 8008c72:	b086      	sub	sp, #24
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d101      	bne.n	8008c82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008c7e:	2301      	movs	r3, #1
 8008c80:	e25b      	b.n	800913a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	f003 0301 	and.w	r3, r3, #1
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d075      	beq.n	8008d7a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008c8e:	4ba3      	ldr	r3, [pc, #652]	; (8008f1c <HAL_RCC_OscConfig+0x2ac>)
 8008c90:	689b      	ldr	r3, [r3, #8]
 8008c92:	f003 030c 	and.w	r3, r3, #12
 8008c96:	2b04      	cmp	r3, #4
 8008c98:	d00c      	beq.n	8008cb4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008c9a:	4ba0      	ldr	r3, [pc, #640]	; (8008f1c <HAL_RCC_OscConfig+0x2ac>)
 8008c9c:	689b      	ldr	r3, [r3, #8]
 8008c9e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008ca2:	2b08      	cmp	r3, #8
 8008ca4:	d112      	bne.n	8008ccc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008ca6:	4b9d      	ldr	r3, [pc, #628]	; (8008f1c <HAL_RCC_OscConfig+0x2ac>)
 8008ca8:	685b      	ldr	r3, [r3, #4]
 8008caa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008cae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008cb2:	d10b      	bne.n	8008ccc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008cb4:	4b99      	ldr	r3, [pc, #612]	; (8008f1c <HAL_RCC_OscConfig+0x2ac>)
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d05b      	beq.n	8008d78 <HAL_RCC_OscConfig+0x108>
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	685b      	ldr	r3, [r3, #4]
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d157      	bne.n	8008d78 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008cc8:	2301      	movs	r3, #1
 8008cca:	e236      	b.n	800913a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	685b      	ldr	r3, [r3, #4]
 8008cd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008cd4:	d106      	bne.n	8008ce4 <HAL_RCC_OscConfig+0x74>
 8008cd6:	4b91      	ldr	r3, [pc, #580]	; (8008f1c <HAL_RCC_OscConfig+0x2ac>)
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	4a90      	ldr	r2, [pc, #576]	; (8008f1c <HAL_RCC_OscConfig+0x2ac>)
 8008cdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008ce0:	6013      	str	r3, [r2, #0]
 8008ce2:	e01d      	b.n	8008d20 <HAL_RCC_OscConfig+0xb0>
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	685b      	ldr	r3, [r3, #4]
 8008ce8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008cec:	d10c      	bne.n	8008d08 <HAL_RCC_OscConfig+0x98>
 8008cee:	4b8b      	ldr	r3, [pc, #556]	; (8008f1c <HAL_RCC_OscConfig+0x2ac>)
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	4a8a      	ldr	r2, [pc, #552]	; (8008f1c <HAL_RCC_OscConfig+0x2ac>)
 8008cf4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008cf8:	6013      	str	r3, [r2, #0]
 8008cfa:	4b88      	ldr	r3, [pc, #544]	; (8008f1c <HAL_RCC_OscConfig+0x2ac>)
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	4a87      	ldr	r2, [pc, #540]	; (8008f1c <HAL_RCC_OscConfig+0x2ac>)
 8008d00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008d04:	6013      	str	r3, [r2, #0]
 8008d06:	e00b      	b.n	8008d20 <HAL_RCC_OscConfig+0xb0>
 8008d08:	4b84      	ldr	r3, [pc, #528]	; (8008f1c <HAL_RCC_OscConfig+0x2ac>)
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	4a83      	ldr	r2, [pc, #524]	; (8008f1c <HAL_RCC_OscConfig+0x2ac>)
 8008d0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008d12:	6013      	str	r3, [r2, #0]
 8008d14:	4b81      	ldr	r3, [pc, #516]	; (8008f1c <HAL_RCC_OscConfig+0x2ac>)
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	4a80      	ldr	r2, [pc, #512]	; (8008f1c <HAL_RCC_OscConfig+0x2ac>)
 8008d1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008d1e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	685b      	ldr	r3, [r3, #4]
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d013      	beq.n	8008d50 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008d28:	f7fd fc8c 	bl	8006644 <HAL_GetTick>
 8008d2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008d2e:	e008      	b.n	8008d42 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008d30:	f7fd fc88 	bl	8006644 <HAL_GetTick>
 8008d34:	4602      	mov	r2, r0
 8008d36:	693b      	ldr	r3, [r7, #16]
 8008d38:	1ad3      	subs	r3, r2, r3
 8008d3a:	2b64      	cmp	r3, #100	; 0x64
 8008d3c:	d901      	bls.n	8008d42 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008d3e:	2303      	movs	r3, #3
 8008d40:	e1fb      	b.n	800913a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008d42:	4b76      	ldr	r3, [pc, #472]	; (8008f1c <HAL_RCC_OscConfig+0x2ac>)
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d0f0      	beq.n	8008d30 <HAL_RCC_OscConfig+0xc0>
 8008d4e:	e014      	b.n	8008d7a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008d50:	f7fd fc78 	bl	8006644 <HAL_GetTick>
 8008d54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008d56:	e008      	b.n	8008d6a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008d58:	f7fd fc74 	bl	8006644 <HAL_GetTick>
 8008d5c:	4602      	mov	r2, r0
 8008d5e:	693b      	ldr	r3, [r7, #16]
 8008d60:	1ad3      	subs	r3, r2, r3
 8008d62:	2b64      	cmp	r3, #100	; 0x64
 8008d64:	d901      	bls.n	8008d6a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008d66:	2303      	movs	r3, #3
 8008d68:	e1e7      	b.n	800913a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008d6a:	4b6c      	ldr	r3, [pc, #432]	; (8008f1c <HAL_RCC_OscConfig+0x2ac>)
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d1f0      	bne.n	8008d58 <HAL_RCC_OscConfig+0xe8>
 8008d76:	e000      	b.n	8008d7a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008d78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	f003 0302 	and.w	r3, r3, #2
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d063      	beq.n	8008e4e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008d86:	4b65      	ldr	r3, [pc, #404]	; (8008f1c <HAL_RCC_OscConfig+0x2ac>)
 8008d88:	689b      	ldr	r3, [r3, #8]
 8008d8a:	f003 030c 	and.w	r3, r3, #12
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d00b      	beq.n	8008daa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008d92:	4b62      	ldr	r3, [pc, #392]	; (8008f1c <HAL_RCC_OscConfig+0x2ac>)
 8008d94:	689b      	ldr	r3, [r3, #8]
 8008d96:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008d9a:	2b08      	cmp	r3, #8
 8008d9c:	d11c      	bne.n	8008dd8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008d9e:	4b5f      	ldr	r3, [pc, #380]	; (8008f1c <HAL_RCC_OscConfig+0x2ac>)
 8008da0:	685b      	ldr	r3, [r3, #4]
 8008da2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d116      	bne.n	8008dd8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008daa:	4b5c      	ldr	r3, [pc, #368]	; (8008f1c <HAL_RCC_OscConfig+0x2ac>)
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	f003 0302 	and.w	r3, r3, #2
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d005      	beq.n	8008dc2 <HAL_RCC_OscConfig+0x152>
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	68db      	ldr	r3, [r3, #12]
 8008dba:	2b01      	cmp	r3, #1
 8008dbc:	d001      	beq.n	8008dc2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8008dbe:	2301      	movs	r3, #1
 8008dc0:	e1bb      	b.n	800913a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008dc2:	4b56      	ldr	r3, [pc, #344]	; (8008f1c <HAL_RCC_OscConfig+0x2ac>)
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	691b      	ldr	r3, [r3, #16]
 8008dce:	00db      	lsls	r3, r3, #3
 8008dd0:	4952      	ldr	r1, [pc, #328]	; (8008f1c <HAL_RCC_OscConfig+0x2ac>)
 8008dd2:	4313      	orrs	r3, r2
 8008dd4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008dd6:	e03a      	b.n	8008e4e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	68db      	ldr	r3, [r3, #12]
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d020      	beq.n	8008e22 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008de0:	4b4f      	ldr	r3, [pc, #316]	; (8008f20 <HAL_RCC_OscConfig+0x2b0>)
 8008de2:	2201      	movs	r2, #1
 8008de4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008de6:	f7fd fc2d 	bl	8006644 <HAL_GetTick>
 8008dea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008dec:	e008      	b.n	8008e00 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008dee:	f7fd fc29 	bl	8006644 <HAL_GetTick>
 8008df2:	4602      	mov	r2, r0
 8008df4:	693b      	ldr	r3, [r7, #16]
 8008df6:	1ad3      	subs	r3, r2, r3
 8008df8:	2b02      	cmp	r3, #2
 8008dfa:	d901      	bls.n	8008e00 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008dfc:	2303      	movs	r3, #3
 8008dfe:	e19c      	b.n	800913a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008e00:	4b46      	ldr	r3, [pc, #280]	; (8008f1c <HAL_RCC_OscConfig+0x2ac>)
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	f003 0302 	and.w	r3, r3, #2
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d0f0      	beq.n	8008dee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008e0c:	4b43      	ldr	r3, [pc, #268]	; (8008f1c <HAL_RCC_OscConfig+0x2ac>)
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	691b      	ldr	r3, [r3, #16]
 8008e18:	00db      	lsls	r3, r3, #3
 8008e1a:	4940      	ldr	r1, [pc, #256]	; (8008f1c <HAL_RCC_OscConfig+0x2ac>)
 8008e1c:	4313      	orrs	r3, r2
 8008e1e:	600b      	str	r3, [r1, #0]
 8008e20:	e015      	b.n	8008e4e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008e22:	4b3f      	ldr	r3, [pc, #252]	; (8008f20 <HAL_RCC_OscConfig+0x2b0>)
 8008e24:	2200      	movs	r2, #0
 8008e26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e28:	f7fd fc0c 	bl	8006644 <HAL_GetTick>
 8008e2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008e2e:	e008      	b.n	8008e42 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008e30:	f7fd fc08 	bl	8006644 <HAL_GetTick>
 8008e34:	4602      	mov	r2, r0
 8008e36:	693b      	ldr	r3, [r7, #16]
 8008e38:	1ad3      	subs	r3, r2, r3
 8008e3a:	2b02      	cmp	r3, #2
 8008e3c:	d901      	bls.n	8008e42 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8008e3e:	2303      	movs	r3, #3
 8008e40:	e17b      	b.n	800913a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008e42:	4b36      	ldr	r3, [pc, #216]	; (8008f1c <HAL_RCC_OscConfig+0x2ac>)
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	f003 0302 	and.w	r3, r3, #2
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d1f0      	bne.n	8008e30 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	f003 0308 	and.w	r3, r3, #8
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d030      	beq.n	8008ebc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	695b      	ldr	r3, [r3, #20]
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d016      	beq.n	8008e90 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008e62:	4b30      	ldr	r3, [pc, #192]	; (8008f24 <HAL_RCC_OscConfig+0x2b4>)
 8008e64:	2201      	movs	r2, #1
 8008e66:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008e68:	f7fd fbec 	bl	8006644 <HAL_GetTick>
 8008e6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008e6e:	e008      	b.n	8008e82 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008e70:	f7fd fbe8 	bl	8006644 <HAL_GetTick>
 8008e74:	4602      	mov	r2, r0
 8008e76:	693b      	ldr	r3, [r7, #16]
 8008e78:	1ad3      	subs	r3, r2, r3
 8008e7a:	2b02      	cmp	r3, #2
 8008e7c:	d901      	bls.n	8008e82 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8008e7e:	2303      	movs	r3, #3
 8008e80:	e15b      	b.n	800913a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008e82:	4b26      	ldr	r3, [pc, #152]	; (8008f1c <HAL_RCC_OscConfig+0x2ac>)
 8008e84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008e86:	f003 0302 	and.w	r3, r3, #2
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d0f0      	beq.n	8008e70 <HAL_RCC_OscConfig+0x200>
 8008e8e:	e015      	b.n	8008ebc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008e90:	4b24      	ldr	r3, [pc, #144]	; (8008f24 <HAL_RCC_OscConfig+0x2b4>)
 8008e92:	2200      	movs	r2, #0
 8008e94:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008e96:	f7fd fbd5 	bl	8006644 <HAL_GetTick>
 8008e9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008e9c:	e008      	b.n	8008eb0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008e9e:	f7fd fbd1 	bl	8006644 <HAL_GetTick>
 8008ea2:	4602      	mov	r2, r0
 8008ea4:	693b      	ldr	r3, [r7, #16]
 8008ea6:	1ad3      	subs	r3, r2, r3
 8008ea8:	2b02      	cmp	r3, #2
 8008eaa:	d901      	bls.n	8008eb0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8008eac:	2303      	movs	r3, #3
 8008eae:	e144      	b.n	800913a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008eb0:	4b1a      	ldr	r3, [pc, #104]	; (8008f1c <HAL_RCC_OscConfig+0x2ac>)
 8008eb2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008eb4:	f003 0302 	and.w	r3, r3, #2
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d1f0      	bne.n	8008e9e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	f003 0304 	and.w	r3, r3, #4
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	f000 80a0 	beq.w	800900a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008eca:	2300      	movs	r3, #0
 8008ecc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008ece:	4b13      	ldr	r3, [pc, #76]	; (8008f1c <HAL_RCC_OscConfig+0x2ac>)
 8008ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ed2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d10f      	bne.n	8008efa <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008eda:	2300      	movs	r3, #0
 8008edc:	60bb      	str	r3, [r7, #8]
 8008ede:	4b0f      	ldr	r3, [pc, #60]	; (8008f1c <HAL_RCC_OscConfig+0x2ac>)
 8008ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ee2:	4a0e      	ldr	r2, [pc, #56]	; (8008f1c <HAL_RCC_OscConfig+0x2ac>)
 8008ee4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008ee8:	6413      	str	r3, [r2, #64]	; 0x40
 8008eea:	4b0c      	ldr	r3, [pc, #48]	; (8008f1c <HAL_RCC_OscConfig+0x2ac>)
 8008eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008eee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008ef2:	60bb      	str	r3, [r7, #8]
 8008ef4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008ef6:	2301      	movs	r3, #1
 8008ef8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008efa:	4b0b      	ldr	r3, [pc, #44]	; (8008f28 <HAL_RCC_OscConfig+0x2b8>)
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d121      	bne.n	8008f4a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008f06:	4b08      	ldr	r3, [pc, #32]	; (8008f28 <HAL_RCC_OscConfig+0x2b8>)
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	4a07      	ldr	r2, [pc, #28]	; (8008f28 <HAL_RCC_OscConfig+0x2b8>)
 8008f0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008f10:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008f12:	f7fd fb97 	bl	8006644 <HAL_GetTick>
 8008f16:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008f18:	e011      	b.n	8008f3e <HAL_RCC_OscConfig+0x2ce>
 8008f1a:	bf00      	nop
 8008f1c:	40023800 	.word	0x40023800
 8008f20:	42470000 	.word	0x42470000
 8008f24:	42470e80 	.word	0x42470e80
 8008f28:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008f2c:	f7fd fb8a 	bl	8006644 <HAL_GetTick>
 8008f30:	4602      	mov	r2, r0
 8008f32:	693b      	ldr	r3, [r7, #16]
 8008f34:	1ad3      	subs	r3, r2, r3
 8008f36:	2b02      	cmp	r3, #2
 8008f38:	d901      	bls.n	8008f3e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8008f3a:	2303      	movs	r3, #3
 8008f3c:	e0fd      	b.n	800913a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008f3e:	4b81      	ldr	r3, [pc, #516]	; (8009144 <HAL_RCC_OscConfig+0x4d4>)
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d0f0      	beq.n	8008f2c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	689b      	ldr	r3, [r3, #8]
 8008f4e:	2b01      	cmp	r3, #1
 8008f50:	d106      	bne.n	8008f60 <HAL_RCC_OscConfig+0x2f0>
 8008f52:	4b7d      	ldr	r3, [pc, #500]	; (8009148 <HAL_RCC_OscConfig+0x4d8>)
 8008f54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f56:	4a7c      	ldr	r2, [pc, #496]	; (8009148 <HAL_RCC_OscConfig+0x4d8>)
 8008f58:	f043 0301 	orr.w	r3, r3, #1
 8008f5c:	6713      	str	r3, [r2, #112]	; 0x70
 8008f5e:	e01c      	b.n	8008f9a <HAL_RCC_OscConfig+0x32a>
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	689b      	ldr	r3, [r3, #8]
 8008f64:	2b05      	cmp	r3, #5
 8008f66:	d10c      	bne.n	8008f82 <HAL_RCC_OscConfig+0x312>
 8008f68:	4b77      	ldr	r3, [pc, #476]	; (8009148 <HAL_RCC_OscConfig+0x4d8>)
 8008f6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f6c:	4a76      	ldr	r2, [pc, #472]	; (8009148 <HAL_RCC_OscConfig+0x4d8>)
 8008f6e:	f043 0304 	orr.w	r3, r3, #4
 8008f72:	6713      	str	r3, [r2, #112]	; 0x70
 8008f74:	4b74      	ldr	r3, [pc, #464]	; (8009148 <HAL_RCC_OscConfig+0x4d8>)
 8008f76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f78:	4a73      	ldr	r2, [pc, #460]	; (8009148 <HAL_RCC_OscConfig+0x4d8>)
 8008f7a:	f043 0301 	orr.w	r3, r3, #1
 8008f7e:	6713      	str	r3, [r2, #112]	; 0x70
 8008f80:	e00b      	b.n	8008f9a <HAL_RCC_OscConfig+0x32a>
 8008f82:	4b71      	ldr	r3, [pc, #452]	; (8009148 <HAL_RCC_OscConfig+0x4d8>)
 8008f84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f86:	4a70      	ldr	r2, [pc, #448]	; (8009148 <HAL_RCC_OscConfig+0x4d8>)
 8008f88:	f023 0301 	bic.w	r3, r3, #1
 8008f8c:	6713      	str	r3, [r2, #112]	; 0x70
 8008f8e:	4b6e      	ldr	r3, [pc, #440]	; (8009148 <HAL_RCC_OscConfig+0x4d8>)
 8008f90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f92:	4a6d      	ldr	r2, [pc, #436]	; (8009148 <HAL_RCC_OscConfig+0x4d8>)
 8008f94:	f023 0304 	bic.w	r3, r3, #4
 8008f98:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	689b      	ldr	r3, [r3, #8]
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d015      	beq.n	8008fce <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008fa2:	f7fd fb4f 	bl	8006644 <HAL_GetTick>
 8008fa6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008fa8:	e00a      	b.n	8008fc0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008faa:	f7fd fb4b 	bl	8006644 <HAL_GetTick>
 8008fae:	4602      	mov	r2, r0
 8008fb0:	693b      	ldr	r3, [r7, #16]
 8008fb2:	1ad3      	subs	r3, r2, r3
 8008fb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8008fb8:	4293      	cmp	r3, r2
 8008fba:	d901      	bls.n	8008fc0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8008fbc:	2303      	movs	r3, #3
 8008fbe:	e0bc      	b.n	800913a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008fc0:	4b61      	ldr	r3, [pc, #388]	; (8009148 <HAL_RCC_OscConfig+0x4d8>)
 8008fc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008fc4:	f003 0302 	and.w	r3, r3, #2
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d0ee      	beq.n	8008faa <HAL_RCC_OscConfig+0x33a>
 8008fcc:	e014      	b.n	8008ff8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008fce:	f7fd fb39 	bl	8006644 <HAL_GetTick>
 8008fd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008fd4:	e00a      	b.n	8008fec <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008fd6:	f7fd fb35 	bl	8006644 <HAL_GetTick>
 8008fda:	4602      	mov	r2, r0
 8008fdc:	693b      	ldr	r3, [r7, #16]
 8008fde:	1ad3      	subs	r3, r2, r3
 8008fe0:	f241 3288 	movw	r2, #5000	; 0x1388
 8008fe4:	4293      	cmp	r3, r2
 8008fe6:	d901      	bls.n	8008fec <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8008fe8:	2303      	movs	r3, #3
 8008fea:	e0a6      	b.n	800913a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008fec:	4b56      	ldr	r3, [pc, #344]	; (8009148 <HAL_RCC_OscConfig+0x4d8>)
 8008fee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ff0:	f003 0302 	and.w	r3, r3, #2
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d1ee      	bne.n	8008fd6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008ff8:	7dfb      	ldrb	r3, [r7, #23]
 8008ffa:	2b01      	cmp	r3, #1
 8008ffc:	d105      	bne.n	800900a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008ffe:	4b52      	ldr	r3, [pc, #328]	; (8009148 <HAL_RCC_OscConfig+0x4d8>)
 8009000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009002:	4a51      	ldr	r2, [pc, #324]	; (8009148 <HAL_RCC_OscConfig+0x4d8>)
 8009004:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009008:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	699b      	ldr	r3, [r3, #24]
 800900e:	2b00      	cmp	r3, #0
 8009010:	f000 8092 	beq.w	8009138 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009014:	4b4c      	ldr	r3, [pc, #304]	; (8009148 <HAL_RCC_OscConfig+0x4d8>)
 8009016:	689b      	ldr	r3, [r3, #8]
 8009018:	f003 030c 	and.w	r3, r3, #12
 800901c:	2b08      	cmp	r3, #8
 800901e:	d05c      	beq.n	80090da <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	699b      	ldr	r3, [r3, #24]
 8009024:	2b02      	cmp	r3, #2
 8009026:	d141      	bne.n	80090ac <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009028:	4b48      	ldr	r3, [pc, #288]	; (800914c <HAL_RCC_OscConfig+0x4dc>)
 800902a:	2200      	movs	r2, #0
 800902c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800902e:	f7fd fb09 	bl	8006644 <HAL_GetTick>
 8009032:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009034:	e008      	b.n	8009048 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009036:	f7fd fb05 	bl	8006644 <HAL_GetTick>
 800903a:	4602      	mov	r2, r0
 800903c:	693b      	ldr	r3, [r7, #16]
 800903e:	1ad3      	subs	r3, r2, r3
 8009040:	2b02      	cmp	r3, #2
 8009042:	d901      	bls.n	8009048 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8009044:	2303      	movs	r3, #3
 8009046:	e078      	b.n	800913a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009048:	4b3f      	ldr	r3, [pc, #252]	; (8009148 <HAL_RCC_OscConfig+0x4d8>)
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009050:	2b00      	cmp	r3, #0
 8009052:	d1f0      	bne.n	8009036 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	69da      	ldr	r2, [r3, #28]
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	6a1b      	ldr	r3, [r3, #32]
 800905c:	431a      	orrs	r2, r3
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009062:	019b      	lsls	r3, r3, #6
 8009064:	431a      	orrs	r2, r3
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800906a:	085b      	lsrs	r3, r3, #1
 800906c:	3b01      	subs	r3, #1
 800906e:	041b      	lsls	r3, r3, #16
 8009070:	431a      	orrs	r2, r3
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009076:	061b      	lsls	r3, r3, #24
 8009078:	4933      	ldr	r1, [pc, #204]	; (8009148 <HAL_RCC_OscConfig+0x4d8>)
 800907a:	4313      	orrs	r3, r2
 800907c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800907e:	4b33      	ldr	r3, [pc, #204]	; (800914c <HAL_RCC_OscConfig+0x4dc>)
 8009080:	2201      	movs	r2, #1
 8009082:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009084:	f7fd fade 	bl	8006644 <HAL_GetTick>
 8009088:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800908a:	e008      	b.n	800909e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800908c:	f7fd fada 	bl	8006644 <HAL_GetTick>
 8009090:	4602      	mov	r2, r0
 8009092:	693b      	ldr	r3, [r7, #16]
 8009094:	1ad3      	subs	r3, r2, r3
 8009096:	2b02      	cmp	r3, #2
 8009098:	d901      	bls.n	800909e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800909a:	2303      	movs	r3, #3
 800909c:	e04d      	b.n	800913a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800909e:	4b2a      	ldr	r3, [pc, #168]	; (8009148 <HAL_RCC_OscConfig+0x4d8>)
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d0f0      	beq.n	800908c <HAL_RCC_OscConfig+0x41c>
 80090aa:	e045      	b.n	8009138 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80090ac:	4b27      	ldr	r3, [pc, #156]	; (800914c <HAL_RCC_OscConfig+0x4dc>)
 80090ae:	2200      	movs	r2, #0
 80090b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80090b2:	f7fd fac7 	bl	8006644 <HAL_GetTick>
 80090b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80090b8:	e008      	b.n	80090cc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80090ba:	f7fd fac3 	bl	8006644 <HAL_GetTick>
 80090be:	4602      	mov	r2, r0
 80090c0:	693b      	ldr	r3, [r7, #16]
 80090c2:	1ad3      	subs	r3, r2, r3
 80090c4:	2b02      	cmp	r3, #2
 80090c6:	d901      	bls.n	80090cc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80090c8:	2303      	movs	r3, #3
 80090ca:	e036      	b.n	800913a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80090cc:	4b1e      	ldr	r3, [pc, #120]	; (8009148 <HAL_RCC_OscConfig+0x4d8>)
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d1f0      	bne.n	80090ba <HAL_RCC_OscConfig+0x44a>
 80090d8:	e02e      	b.n	8009138 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	699b      	ldr	r3, [r3, #24]
 80090de:	2b01      	cmp	r3, #1
 80090e0:	d101      	bne.n	80090e6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80090e2:	2301      	movs	r3, #1
 80090e4:	e029      	b.n	800913a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80090e6:	4b18      	ldr	r3, [pc, #96]	; (8009148 <HAL_RCC_OscConfig+0x4d8>)
 80090e8:	685b      	ldr	r3, [r3, #4]
 80090ea:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	69db      	ldr	r3, [r3, #28]
 80090f6:	429a      	cmp	r2, r3
 80090f8:	d11c      	bne.n	8009134 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009104:	429a      	cmp	r2, r3
 8009106:	d115      	bne.n	8009134 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8009108:	68fa      	ldr	r2, [r7, #12]
 800910a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800910e:	4013      	ands	r3, r2
 8009110:	687a      	ldr	r2, [r7, #4]
 8009112:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8009114:	4293      	cmp	r3, r2
 8009116:	d10d      	bne.n	8009134 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8009122:	429a      	cmp	r2, r3
 8009124:	d106      	bne.n	8009134 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8009130:	429a      	cmp	r2, r3
 8009132:	d001      	beq.n	8009138 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8009134:	2301      	movs	r3, #1
 8009136:	e000      	b.n	800913a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8009138:	2300      	movs	r3, #0
}
 800913a:	4618      	mov	r0, r3
 800913c:	3718      	adds	r7, #24
 800913e:	46bd      	mov	sp, r7
 8009140:	bd80      	pop	{r7, pc}
 8009142:	bf00      	nop
 8009144:	40007000 	.word	0x40007000
 8009148:	40023800 	.word	0x40023800
 800914c:	42470060 	.word	0x42470060

08009150 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009150:	b580      	push	{r7, lr}
 8009152:	b084      	sub	sp, #16
 8009154:	af00      	add	r7, sp, #0
 8009156:	6078      	str	r0, [r7, #4]
 8009158:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	2b00      	cmp	r3, #0
 800915e:	d101      	bne.n	8009164 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009160:	2301      	movs	r3, #1
 8009162:	e0cc      	b.n	80092fe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009164:	4b68      	ldr	r3, [pc, #416]	; (8009308 <HAL_RCC_ClockConfig+0x1b8>)
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	f003 030f 	and.w	r3, r3, #15
 800916c:	683a      	ldr	r2, [r7, #0]
 800916e:	429a      	cmp	r2, r3
 8009170:	d90c      	bls.n	800918c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009172:	4b65      	ldr	r3, [pc, #404]	; (8009308 <HAL_RCC_ClockConfig+0x1b8>)
 8009174:	683a      	ldr	r2, [r7, #0]
 8009176:	b2d2      	uxtb	r2, r2
 8009178:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800917a:	4b63      	ldr	r3, [pc, #396]	; (8009308 <HAL_RCC_ClockConfig+0x1b8>)
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	f003 030f 	and.w	r3, r3, #15
 8009182:	683a      	ldr	r2, [r7, #0]
 8009184:	429a      	cmp	r2, r3
 8009186:	d001      	beq.n	800918c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8009188:	2301      	movs	r3, #1
 800918a:	e0b8      	b.n	80092fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	f003 0302 	and.w	r3, r3, #2
 8009194:	2b00      	cmp	r3, #0
 8009196:	d020      	beq.n	80091da <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	f003 0304 	and.w	r3, r3, #4
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d005      	beq.n	80091b0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80091a4:	4b59      	ldr	r3, [pc, #356]	; (800930c <HAL_RCC_ClockConfig+0x1bc>)
 80091a6:	689b      	ldr	r3, [r3, #8]
 80091a8:	4a58      	ldr	r2, [pc, #352]	; (800930c <HAL_RCC_ClockConfig+0x1bc>)
 80091aa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80091ae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	f003 0308 	and.w	r3, r3, #8
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d005      	beq.n	80091c8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80091bc:	4b53      	ldr	r3, [pc, #332]	; (800930c <HAL_RCC_ClockConfig+0x1bc>)
 80091be:	689b      	ldr	r3, [r3, #8]
 80091c0:	4a52      	ldr	r2, [pc, #328]	; (800930c <HAL_RCC_ClockConfig+0x1bc>)
 80091c2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80091c6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80091c8:	4b50      	ldr	r3, [pc, #320]	; (800930c <HAL_RCC_ClockConfig+0x1bc>)
 80091ca:	689b      	ldr	r3, [r3, #8]
 80091cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	689b      	ldr	r3, [r3, #8]
 80091d4:	494d      	ldr	r1, [pc, #308]	; (800930c <HAL_RCC_ClockConfig+0x1bc>)
 80091d6:	4313      	orrs	r3, r2
 80091d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	f003 0301 	and.w	r3, r3, #1
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d044      	beq.n	8009270 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	685b      	ldr	r3, [r3, #4]
 80091ea:	2b01      	cmp	r3, #1
 80091ec:	d107      	bne.n	80091fe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80091ee:	4b47      	ldr	r3, [pc, #284]	; (800930c <HAL_RCC_ClockConfig+0x1bc>)
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d119      	bne.n	800922e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80091fa:	2301      	movs	r3, #1
 80091fc:	e07f      	b.n	80092fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	685b      	ldr	r3, [r3, #4]
 8009202:	2b02      	cmp	r3, #2
 8009204:	d003      	beq.n	800920e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800920a:	2b03      	cmp	r3, #3
 800920c:	d107      	bne.n	800921e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800920e:	4b3f      	ldr	r3, [pc, #252]	; (800930c <HAL_RCC_ClockConfig+0x1bc>)
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009216:	2b00      	cmp	r3, #0
 8009218:	d109      	bne.n	800922e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800921a:	2301      	movs	r3, #1
 800921c:	e06f      	b.n	80092fe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800921e:	4b3b      	ldr	r3, [pc, #236]	; (800930c <HAL_RCC_ClockConfig+0x1bc>)
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	f003 0302 	and.w	r3, r3, #2
 8009226:	2b00      	cmp	r3, #0
 8009228:	d101      	bne.n	800922e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800922a:	2301      	movs	r3, #1
 800922c:	e067      	b.n	80092fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800922e:	4b37      	ldr	r3, [pc, #220]	; (800930c <HAL_RCC_ClockConfig+0x1bc>)
 8009230:	689b      	ldr	r3, [r3, #8]
 8009232:	f023 0203 	bic.w	r2, r3, #3
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	685b      	ldr	r3, [r3, #4]
 800923a:	4934      	ldr	r1, [pc, #208]	; (800930c <HAL_RCC_ClockConfig+0x1bc>)
 800923c:	4313      	orrs	r3, r2
 800923e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009240:	f7fd fa00 	bl	8006644 <HAL_GetTick>
 8009244:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009246:	e00a      	b.n	800925e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009248:	f7fd f9fc 	bl	8006644 <HAL_GetTick>
 800924c:	4602      	mov	r2, r0
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	1ad3      	subs	r3, r2, r3
 8009252:	f241 3288 	movw	r2, #5000	; 0x1388
 8009256:	4293      	cmp	r3, r2
 8009258:	d901      	bls.n	800925e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800925a:	2303      	movs	r3, #3
 800925c:	e04f      	b.n	80092fe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800925e:	4b2b      	ldr	r3, [pc, #172]	; (800930c <HAL_RCC_ClockConfig+0x1bc>)
 8009260:	689b      	ldr	r3, [r3, #8]
 8009262:	f003 020c 	and.w	r2, r3, #12
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	685b      	ldr	r3, [r3, #4]
 800926a:	009b      	lsls	r3, r3, #2
 800926c:	429a      	cmp	r2, r3
 800926e:	d1eb      	bne.n	8009248 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009270:	4b25      	ldr	r3, [pc, #148]	; (8009308 <HAL_RCC_ClockConfig+0x1b8>)
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	f003 030f 	and.w	r3, r3, #15
 8009278:	683a      	ldr	r2, [r7, #0]
 800927a:	429a      	cmp	r2, r3
 800927c:	d20c      	bcs.n	8009298 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800927e:	4b22      	ldr	r3, [pc, #136]	; (8009308 <HAL_RCC_ClockConfig+0x1b8>)
 8009280:	683a      	ldr	r2, [r7, #0]
 8009282:	b2d2      	uxtb	r2, r2
 8009284:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009286:	4b20      	ldr	r3, [pc, #128]	; (8009308 <HAL_RCC_ClockConfig+0x1b8>)
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	f003 030f 	and.w	r3, r3, #15
 800928e:	683a      	ldr	r2, [r7, #0]
 8009290:	429a      	cmp	r2, r3
 8009292:	d001      	beq.n	8009298 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8009294:	2301      	movs	r3, #1
 8009296:	e032      	b.n	80092fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	f003 0304 	and.w	r3, r3, #4
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d008      	beq.n	80092b6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80092a4:	4b19      	ldr	r3, [pc, #100]	; (800930c <HAL_RCC_ClockConfig+0x1bc>)
 80092a6:	689b      	ldr	r3, [r3, #8]
 80092a8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	68db      	ldr	r3, [r3, #12]
 80092b0:	4916      	ldr	r1, [pc, #88]	; (800930c <HAL_RCC_ClockConfig+0x1bc>)
 80092b2:	4313      	orrs	r3, r2
 80092b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	f003 0308 	and.w	r3, r3, #8
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d009      	beq.n	80092d6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80092c2:	4b12      	ldr	r3, [pc, #72]	; (800930c <HAL_RCC_ClockConfig+0x1bc>)
 80092c4:	689b      	ldr	r3, [r3, #8]
 80092c6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	691b      	ldr	r3, [r3, #16]
 80092ce:	00db      	lsls	r3, r3, #3
 80092d0:	490e      	ldr	r1, [pc, #56]	; (800930c <HAL_RCC_ClockConfig+0x1bc>)
 80092d2:	4313      	orrs	r3, r2
 80092d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80092d6:	f000 f821 	bl	800931c <HAL_RCC_GetSysClockFreq>
 80092da:	4602      	mov	r2, r0
 80092dc:	4b0b      	ldr	r3, [pc, #44]	; (800930c <HAL_RCC_ClockConfig+0x1bc>)
 80092de:	689b      	ldr	r3, [r3, #8]
 80092e0:	091b      	lsrs	r3, r3, #4
 80092e2:	f003 030f 	and.w	r3, r3, #15
 80092e6:	490a      	ldr	r1, [pc, #40]	; (8009310 <HAL_RCC_ClockConfig+0x1c0>)
 80092e8:	5ccb      	ldrb	r3, [r1, r3]
 80092ea:	fa22 f303 	lsr.w	r3, r2, r3
 80092ee:	4a09      	ldr	r2, [pc, #36]	; (8009314 <HAL_RCC_ClockConfig+0x1c4>)
 80092f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80092f2:	4b09      	ldr	r3, [pc, #36]	; (8009318 <HAL_RCC_ClockConfig+0x1c8>)
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	4618      	mov	r0, r3
 80092f8:	f7fb ff02 	bl	8005100 <HAL_InitTick>

  return HAL_OK;
 80092fc:	2300      	movs	r3, #0
}
 80092fe:	4618      	mov	r0, r3
 8009300:	3710      	adds	r7, #16
 8009302:	46bd      	mov	sp, r7
 8009304:	bd80      	pop	{r7, pc}
 8009306:	bf00      	nop
 8009308:	40023c00 	.word	0x40023c00
 800930c:	40023800 	.word	0x40023800
 8009310:	08020d8c 	.word	0x08020d8c
 8009314:	2000005c 	.word	0x2000005c
 8009318:	20000060 	.word	0x20000060

0800931c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800931c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8009320:	b084      	sub	sp, #16
 8009322:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8009324:	2300      	movs	r3, #0
 8009326:	607b      	str	r3, [r7, #4]
 8009328:	2300      	movs	r3, #0
 800932a:	60fb      	str	r3, [r7, #12]
 800932c:	2300      	movs	r3, #0
 800932e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8009330:	2300      	movs	r3, #0
 8009332:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009334:	4b67      	ldr	r3, [pc, #412]	; (80094d4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8009336:	689b      	ldr	r3, [r3, #8]
 8009338:	f003 030c 	and.w	r3, r3, #12
 800933c:	2b08      	cmp	r3, #8
 800933e:	d00d      	beq.n	800935c <HAL_RCC_GetSysClockFreq+0x40>
 8009340:	2b08      	cmp	r3, #8
 8009342:	f200 80bd 	bhi.w	80094c0 <HAL_RCC_GetSysClockFreq+0x1a4>
 8009346:	2b00      	cmp	r3, #0
 8009348:	d002      	beq.n	8009350 <HAL_RCC_GetSysClockFreq+0x34>
 800934a:	2b04      	cmp	r3, #4
 800934c:	d003      	beq.n	8009356 <HAL_RCC_GetSysClockFreq+0x3a>
 800934e:	e0b7      	b.n	80094c0 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009350:	4b61      	ldr	r3, [pc, #388]	; (80094d8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8009352:	60bb      	str	r3, [r7, #8]
       break;
 8009354:	e0b7      	b.n	80094c6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8009356:	4b61      	ldr	r3, [pc, #388]	; (80094dc <HAL_RCC_GetSysClockFreq+0x1c0>)
 8009358:	60bb      	str	r3, [r7, #8]
      break;
 800935a:	e0b4      	b.n	80094c6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800935c:	4b5d      	ldr	r3, [pc, #372]	; (80094d4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800935e:	685b      	ldr	r3, [r3, #4]
 8009360:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009364:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009366:	4b5b      	ldr	r3, [pc, #364]	; (80094d4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8009368:	685b      	ldr	r3, [r3, #4]
 800936a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800936e:	2b00      	cmp	r3, #0
 8009370:	d04d      	beq.n	800940e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009372:	4b58      	ldr	r3, [pc, #352]	; (80094d4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8009374:	685b      	ldr	r3, [r3, #4]
 8009376:	099b      	lsrs	r3, r3, #6
 8009378:	461a      	mov	r2, r3
 800937a:	f04f 0300 	mov.w	r3, #0
 800937e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8009382:	f04f 0100 	mov.w	r1, #0
 8009386:	ea02 0800 	and.w	r8, r2, r0
 800938a:	ea03 0901 	and.w	r9, r3, r1
 800938e:	4640      	mov	r0, r8
 8009390:	4649      	mov	r1, r9
 8009392:	f04f 0200 	mov.w	r2, #0
 8009396:	f04f 0300 	mov.w	r3, #0
 800939a:	014b      	lsls	r3, r1, #5
 800939c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80093a0:	0142      	lsls	r2, r0, #5
 80093a2:	4610      	mov	r0, r2
 80093a4:	4619      	mov	r1, r3
 80093a6:	ebb0 0008 	subs.w	r0, r0, r8
 80093aa:	eb61 0109 	sbc.w	r1, r1, r9
 80093ae:	f04f 0200 	mov.w	r2, #0
 80093b2:	f04f 0300 	mov.w	r3, #0
 80093b6:	018b      	lsls	r3, r1, #6
 80093b8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80093bc:	0182      	lsls	r2, r0, #6
 80093be:	1a12      	subs	r2, r2, r0
 80093c0:	eb63 0301 	sbc.w	r3, r3, r1
 80093c4:	f04f 0000 	mov.w	r0, #0
 80093c8:	f04f 0100 	mov.w	r1, #0
 80093cc:	00d9      	lsls	r1, r3, #3
 80093ce:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80093d2:	00d0      	lsls	r0, r2, #3
 80093d4:	4602      	mov	r2, r0
 80093d6:	460b      	mov	r3, r1
 80093d8:	eb12 0208 	adds.w	r2, r2, r8
 80093dc:	eb43 0309 	adc.w	r3, r3, r9
 80093e0:	f04f 0000 	mov.w	r0, #0
 80093e4:	f04f 0100 	mov.w	r1, #0
 80093e8:	0259      	lsls	r1, r3, #9
 80093ea:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80093ee:	0250      	lsls	r0, r2, #9
 80093f0:	4602      	mov	r2, r0
 80093f2:	460b      	mov	r3, r1
 80093f4:	4610      	mov	r0, r2
 80093f6:	4619      	mov	r1, r3
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	461a      	mov	r2, r3
 80093fc:	f04f 0300 	mov.w	r3, #0
 8009400:	f7f7 fc02 	bl	8000c08 <__aeabi_uldivmod>
 8009404:	4602      	mov	r2, r0
 8009406:	460b      	mov	r3, r1
 8009408:	4613      	mov	r3, r2
 800940a:	60fb      	str	r3, [r7, #12]
 800940c:	e04a      	b.n	80094a4 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800940e:	4b31      	ldr	r3, [pc, #196]	; (80094d4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8009410:	685b      	ldr	r3, [r3, #4]
 8009412:	099b      	lsrs	r3, r3, #6
 8009414:	461a      	mov	r2, r3
 8009416:	f04f 0300 	mov.w	r3, #0
 800941a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800941e:	f04f 0100 	mov.w	r1, #0
 8009422:	ea02 0400 	and.w	r4, r2, r0
 8009426:	ea03 0501 	and.w	r5, r3, r1
 800942a:	4620      	mov	r0, r4
 800942c:	4629      	mov	r1, r5
 800942e:	f04f 0200 	mov.w	r2, #0
 8009432:	f04f 0300 	mov.w	r3, #0
 8009436:	014b      	lsls	r3, r1, #5
 8009438:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800943c:	0142      	lsls	r2, r0, #5
 800943e:	4610      	mov	r0, r2
 8009440:	4619      	mov	r1, r3
 8009442:	1b00      	subs	r0, r0, r4
 8009444:	eb61 0105 	sbc.w	r1, r1, r5
 8009448:	f04f 0200 	mov.w	r2, #0
 800944c:	f04f 0300 	mov.w	r3, #0
 8009450:	018b      	lsls	r3, r1, #6
 8009452:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8009456:	0182      	lsls	r2, r0, #6
 8009458:	1a12      	subs	r2, r2, r0
 800945a:	eb63 0301 	sbc.w	r3, r3, r1
 800945e:	f04f 0000 	mov.w	r0, #0
 8009462:	f04f 0100 	mov.w	r1, #0
 8009466:	00d9      	lsls	r1, r3, #3
 8009468:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800946c:	00d0      	lsls	r0, r2, #3
 800946e:	4602      	mov	r2, r0
 8009470:	460b      	mov	r3, r1
 8009472:	1912      	adds	r2, r2, r4
 8009474:	eb45 0303 	adc.w	r3, r5, r3
 8009478:	f04f 0000 	mov.w	r0, #0
 800947c:	f04f 0100 	mov.w	r1, #0
 8009480:	0299      	lsls	r1, r3, #10
 8009482:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8009486:	0290      	lsls	r0, r2, #10
 8009488:	4602      	mov	r2, r0
 800948a:	460b      	mov	r3, r1
 800948c:	4610      	mov	r0, r2
 800948e:	4619      	mov	r1, r3
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	461a      	mov	r2, r3
 8009494:	f04f 0300 	mov.w	r3, #0
 8009498:	f7f7 fbb6 	bl	8000c08 <__aeabi_uldivmod>
 800949c:	4602      	mov	r2, r0
 800949e:	460b      	mov	r3, r1
 80094a0:	4613      	mov	r3, r2
 80094a2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80094a4:	4b0b      	ldr	r3, [pc, #44]	; (80094d4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80094a6:	685b      	ldr	r3, [r3, #4]
 80094a8:	0c1b      	lsrs	r3, r3, #16
 80094aa:	f003 0303 	and.w	r3, r3, #3
 80094ae:	3301      	adds	r3, #1
 80094b0:	005b      	lsls	r3, r3, #1
 80094b2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80094b4:	68fa      	ldr	r2, [r7, #12]
 80094b6:	683b      	ldr	r3, [r7, #0]
 80094b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80094bc:	60bb      	str	r3, [r7, #8]
      break;
 80094be:	e002      	b.n	80094c6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80094c0:	4b05      	ldr	r3, [pc, #20]	; (80094d8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80094c2:	60bb      	str	r3, [r7, #8]
      break;
 80094c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80094c6:	68bb      	ldr	r3, [r7, #8]
}
 80094c8:	4618      	mov	r0, r3
 80094ca:	3710      	adds	r7, #16
 80094cc:	46bd      	mov	sp, r7
 80094ce:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80094d2:	bf00      	nop
 80094d4:	40023800 	.word	0x40023800
 80094d8:	00f42400 	.word	0x00f42400
 80094dc:	007a1200 	.word	0x007a1200

080094e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80094e0:	b480      	push	{r7}
 80094e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80094e4:	4b03      	ldr	r3, [pc, #12]	; (80094f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80094e6:	681b      	ldr	r3, [r3, #0]
}
 80094e8:	4618      	mov	r0, r3
 80094ea:	46bd      	mov	sp, r7
 80094ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f0:	4770      	bx	lr
 80094f2:	bf00      	nop
 80094f4:	2000005c 	.word	0x2000005c

080094f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80094f8:	b580      	push	{r7, lr}
 80094fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80094fc:	f7ff fff0 	bl	80094e0 <HAL_RCC_GetHCLKFreq>
 8009500:	4602      	mov	r2, r0
 8009502:	4b05      	ldr	r3, [pc, #20]	; (8009518 <HAL_RCC_GetPCLK1Freq+0x20>)
 8009504:	689b      	ldr	r3, [r3, #8]
 8009506:	0a9b      	lsrs	r3, r3, #10
 8009508:	f003 0307 	and.w	r3, r3, #7
 800950c:	4903      	ldr	r1, [pc, #12]	; (800951c <HAL_RCC_GetPCLK1Freq+0x24>)
 800950e:	5ccb      	ldrb	r3, [r1, r3]
 8009510:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009514:	4618      	mov	r0, r3
 8009516:	bd80      	pop	{r7, pc}
 8009518:	40023800 	.word	0x40023800
 800951c:	08020d9c 	.word	0x08020d9c

08009520 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009520:	b580      	push	{r7, lr}
 8009522:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8009524:	f7ff ffdc 	bl	80094e0 <HAL_RCC_GetHCLKFreq>
 8009528:	4602      	mov	r2, r0
 800952a:	4b05      	ldr	r3, [pc, #20]	; (8009540 <HAL_RCC_GetPCLK2Freq+0x20>)
 800952c:	689b      	ldr	r3, [r3, #8]
 800952e:	0b5b      	lsrs	r3, r3, #13
 8009530:	f003 0307 	and.w	r3, r3, #7
 8009534:	4903      	ldr	r1, [pc, #12]	; (8009544 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009536:	5ccb      	ldrb	r3, [r1, r3]
 8009538:	fa22 f303 	lsr.w	r3, r2, r3
}
 800953c:	4618      	mov	r0, r3
 800953e:	bd80      	pop	{r7, pc}
 8009540:	40023800 	.word	0x40023800
 8009544:	08020d9c 	.word	0x08020d9c

08009548 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8009548:	b480      	push	{r7}
 800954a:	b083      	sub	sp, #12
 800954c:	af00      	add	r7, sp, #0
 800954e:	6078      	str	r0, [r7, #4]
 8009550:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	220f      	movs	r2, #15
 8009556:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8009558:	4b12      	ldr	r3, [pc, #72]	; (80095a4 <HAL_RCC_GetClockConfig+0x5c>)
 800955a:	689b      	ldr	r3, [r3, #8]
 800955c:	f003 0203 	and.w	r2, r3, #3
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8009564:	4b0f      	ldr	r3, [pc, #60]	; (80095a4 <HAL_RCC_GetClockConfig+0x5c>)
 8009566:	689b      	ldr	r3, [r3, #8]
 8009568:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8009570:	4b0c      	ldr	r3, [pc, #48]	; (80095a4 <HAL_RCC_GetClockConfig+0x5c>)
 8009572:	689b      	ldr	r3, [r3, #8]
 8009574:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800957c:	4b09      	ldr	r3, [pc, #36]	; (80095a4 <HAL_RCC_GetClockConfig+0x5c>)
 800957e:	689b      	ldr	r3, [r3, #8]
 8009580:	08db      	lsrs	r3, r3, #3
 8009582:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800958a:	4b07      	ldr	r3, [pc, #28]	; (80095a8 <HAL_RCC_GetClockConfig+0x60>)
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	f003 020f 	and.w	r2, r3, #15
 8009592:	683b      	ldr	r3, [r7, #0]
 8009594:	601a      	str	r2, [r3, #0]
}
 8009596:	bf00      	nop
 8009598:	370c      	adds	r7, #12
 800959a:	46bd      	mov	sp, r7
 800959c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a0:	4770      	bx	lr
 80095a2:	bf00      	nop
 80095a4:	40023800 	.word	0x40023800
 80095a8:	40023c00 	.word	0x40023c00

080095ac <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80095ac:	b580      	push	{r7, lr}
 80095ae:	b086      	sub	sp, #24
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80095b4:	2300      	movs	r3, #0
 80095b6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80095b8:	2300      	movs	r3, #0
 80095ba:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	f003 0301 	and.w	r3, r3, #1
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d105      	bne.n	80095d4 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d035      	beq.n	8009640 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80095d4:	4b62      	ldr	r3, [pc, #392]	; (8009760 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80095d6:	2200      	movs	r2, #0
 80095d8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80095da:	f7fd f833 	bl	8006644 <HAL_GetTick>
 80095de:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80095e0:	e008      	b.n	80095f4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80095e2:	f7fd f82f 	bl	8006644 <HAL_GetTick>
 80095e6:	4602      	mov	r2, r0
 80095e8:	697b      	ldr	r3, [r7, #20]
 80095ea:	1ad3      	subs	r3, r2, r3
 80095ec:	2b02      	cmp	r3, #2
 80095ee:	d901      	bls.n	80095f4 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80095f0:	2303      	movs	r3, #3
 80095f2:	e0b0      	b.n	8009756 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80095f4:	4b5b      	ldr	r3, [pc, #364]	; (8009764 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d1f0      	bne.n	80095e2 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	685b      	ldr	r3, [r3, #4]
 8009604:	019a      	lsls	r2, r3, #6
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	689b      	ldr	r3, [r3, #8]
 800960a:	071b      	lsls	r3, r3, #28
 800960c:	4955      	ldr	r1, [pc, #340]	; (8009764 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800960e:	4313      	orrs	r3, r2
 8009610:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8009614:	4b52      	ldr	r3, [pc, #328]	; (8009760 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8009616:	2201      	movs	r2, #1
 8009618:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800961a:	f7fd f813 	bl	8006644 <HAL_GetTick>
 800961e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009620:	e008      	b.n	8009634 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8009622:	f7fd f80f 	bl	8006644 <HAL_GetTick>
 8009626:	4602      	mov	r2, r0
 8009628:	697b      	ldr	r3, [r7, #20]
 800962a:	1ad3      	subs	r3, r2, r3
 800962c:	2b02      	cmp	r3, #2
 800962e:	d901      	bls.n	8009634 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009630:	2303      	movs	r3, #3
 8009632:	e090      	b.n	8009756 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009634:	4b4b      	ldr	r3, [pc, #300]	; (8009764 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800963c:	2b00      	cmp	r3, #0
 800963e:	d0f0      	beq.n	8009622 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	f003 0302 	and.w	r3, r3, #2
 8009648:	2b00      	cmp	r3, #0
 800964a:	f000 8083 	beq.w	8009754 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800964e:	2300      	movs	r3, #0
 8009650:	60fb      	str	r3, [r7, #12]
 8009652:	4b44      	ldr	r3, [pc, #272]	; (8009764 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009656:	4a43      	ldr	r2, [pc, #268]	; (8009764 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009658:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800965c:	6413      	str	r3, [r2, #64]	; 0x40
 800965e:	4b41      	ldr	r3, [pc, #260]	; (8009764 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009662:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009666:	60fb      	str	r3, [r7, #12]
 8009668:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800966a:	4b3f      	ldr	r3, [pc, #252]	; (8009768 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	4a3e      	ldr	r2, [pc, #248]	; (8009768 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8009670:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009674:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009676:	f7fc ffe5 	bl	8006644 <HAL_GetTick>
 800967a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800967c:	e008      	b.n	8009690 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800967e:	f7fc ffe1 	bl	8006644 <HAL_GetTick>
 8009682:	4602      	mov	r2, r0
 8009684:	697b      	ldr	r3, [r7, #20]
 8009686:	1ad3      	subs	r3, r2, r3
 8009688:	2b02      	cmp	r3, #2
 800968a:	d901      	bls.n	8009690 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 800968c:	2303      	movs	r3, #3
 800968e:	e062      	b.n	8009756 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8009690:	4b35      	ldr	r3, [pc, #212]	; (8009768 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009698:	2b00      	cmp	r3, #0
 800969a:	d0f0      	beq.n	800967e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800969c:	4b31      	ldr	r3, [pc, #196]	; (8009764 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800969e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80096a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80096a4:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80096a6:	693b      	ldr	r3, [r7, #16]
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d02f      	beq.n	800970c <HAL_RCCEx_PeriphCLKConfig+0x160>
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	68db      	ldr	r3, [r3, #12]
 80096b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80096b4:	693a      	ldr	r2, [r7, #16]
 80096b6:	429a      	cmp	r2, r3
 80096b8:	d028      	beq.n	800970c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80096ba:	4b2a      	ldr	r3, [pc, #168]	; (8009764 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80096bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80096be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80096c2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80096c4:	4b29      	ldr	r3, [pc, #164]	; (800976c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80096c6:	2201      	movs	r2, #1
 80096c8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80096ca:	4b28      	ldr	r3, [pc, #160]	; (800976c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80096cc:	2200      	movs	r2, #0
 80096ce:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80096d0:	4a24      	ldr	r2, [pc, #144]	; (8009764 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80096d2:	693b      	ldr	r3, [r7, #16]
 80096d4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80096d6:	4b23      	ldr	r3, [pc, #140]	; (8009764 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80096d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80096da:	f003 0301 	and.w	r3, r3, #1
 80096de:	2b01      	cmp	r3, #1
 80096e0:	d114      	bne.n	800970c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80096e2:	f7fc ffaf 	bl	8006644 <HAL_GetTick>
 80096e6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80096e8:	e00a      	b.n	8009700 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80096ea:	f7fc ffab 	bl	8006644 <HAL_GetTick>
 80096ee:	4602      	mov	r2, r0
 80096f0:	697b      	ldr	r3, [r7, #20]
 80096f2:	1ad3      	subs	r3, r2, r3
 80096f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80096f8:	4293      	cmp	r3, r2
 80096fa:	d901      	bls.n	8009700 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80096fc:	2303      	movs	r3, #3
 80096fe:	e02a      	b.n	8009756 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009700:	4b18      	ldr	r3, [pc, #96]	; (8009764 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009702:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009704:	f003 0302 	and.w	r3, r3, #2
 8009708:	2b00      	cmp	r3, #0
 800970a:	d0ee      	beq.n	80096ea <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	68db      	ldr	r3, [r3, #12]
 8009710:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009714:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009718:	d10d      	bne.n	8009736 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800971a:	4b12      	ldr	r3, [pc, #72]	; (8009764 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800971c:	689b      	ldr	r3, [r3, #8]
 800971e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	68db      	ldr	r3, [r3, #12]
 8009726:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800972a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800972e:	490d      	ldr	r1, [pc, #52]	; (8009764 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009730:	4313      	orrs	r3, r2
 8009732:	608b      	str	r3, [r1, #8]
 8009734:	e005      	b.n	8009742 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8009736:	4b0b      	ldr	r3, [pc, #44]	; (8009764 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009738:	689b      	ldr	r3, [r3, #8]
 800973a:	4a0a      	ldr	r2, [pc, #40]	; (8009764 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800973c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8009740:	6093      	str	r3, [r2, #8]
 8009742:	4b08      	ldr	r3, [pc, #32]	; (8009764 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009744:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	68db      	ldr	r3, [r3, #12]
 800974a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800974e:	4905      	ldr	r1, [pc, #20]	; (8009764 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009750:	4313      	orrs	r3, r2
 8009752:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8009754:	2300      	movs	r3, #0
}
 8009756:	4618      	mov	r0, r3
 8009758:	3718      	adds	r7, #24
 800975a:	46bd      	mov	sp, r7
 800975c:	bd80      	pop	{r7, pc}
 800975e:	bf00      	nop
 8009760:	42470068 	.word	0x42470068
 8009764:	40023800 	.word	0x40023800
 8009768:	40007000 	.word	0x40007000
 800976c:	42470e40 	.word	0x42470e40

08009770 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8009770:	b580      	push	{r7, lr}
 8009772:	b082      	sub	sp, #8
 8009774:	af00      	add	r7, sp, #0
 8009776:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	2b00      	cmp	r3, #0
 800977c:	d101      	bne.n	8009782 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800977e:	2301      	movs	r3, #1
 8009780:	e083      	b.n	800988a <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	7f5b      	ldrb	r3, [r3, #29]
 8009786:	b2db      	uxtb	r3, r3
 8009788:	2b00      	cmp	r3, #0
 800978a:	d105      	bne.n	8009798 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	2200      	movs	r2, #0
 8009790:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8009792:	6878      	ldr	r0, [r7, #4]
 8009794:	f7fa fe5a 	bl	800444c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	2202      	movs	r2, #2
 800979c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	22ca      	movs	r2, #202	; 0xca
 80097a4:	625a      	str	r2, [r3, #36]	; 0x24
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	2253      	movs	r2, #83	; 0x53
 80097ac:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80097ae:	6878      	ldr	r0, [r7, #4]
 80097b0:	f000 f9fb 	bl	8009baa <RTC_EnterInitMode>
 80097b4:	4603      	mov	r3, r0
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d008      	beq.n	80097cc <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	22ff      	movs	r2, #255	; 0xff
 80097c0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	2204      	movs	r2, #4
 80097c6:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 80097c8:	2301      	movs	r3, #1
 80097ca:	e05e      	b.n	800988a <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	689b      	ldr	r3, [r3, #8]
 80097d2:	687a      	ldr	r2, [r7, #4]
 80097d4:	6812      	ldr	r2, [r2, #0]
 80097d6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80097da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80097de:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	6899      	ldr	r1, [r3, #8]
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	685a      	ldr	r2, [r3, #4]
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	691b      	ldr	r3, [r3, #16]
 80097ee:	431a      	orrs	r2, r3
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	695b      	ldr	r3, [r3, #20]
 80097f4:	431a      	orrs	r2, r3
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	430a      	orrs	r2, r1
 80097fc:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	687a      	ldr	r2, [r7, #4]
 8009804:	68d2      	ldr	r2, [r2, #12]
 8009806:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	6919      	ldr	r1, [r3, #16]
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	689b      	ldr	r3, [r3, #8]
 8009812:	041a      	lsls	r2, r3, #16
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	430a      	orrs	r2, r1
 800981a:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	68da      	ldr	r2, [r3, #12]
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800982a:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	689b      	ldr	r3, [r3, #8]
 8009832:	f003 0320 	and.w	r3, r3, #32
 8009836:	2b00      	cmp	r3, #0
 8009838:	d10e      	bne.n	8009858 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800983a:	6878      	ldr	r0, [r7, #4]
 800983c:	f000 f98d 	bl	8009b5a <HAL_RTC_WaitForSynchro>
 8009840:	4603      	mov	r3, r0
 8009842:	2b00      	cmp	r3, #0
 8009844:	d008      	beq.n	8009858 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	22ff      	movs	r2, #255	; 0xff
 800984c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	2204      	movs	r2, #4
 8009852:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8009854:	2301      	movs	r3, #1
 8009856:	e018      	b.n	800988a <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8009866:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	699a      	ldr	r2, [r3, #24]
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	430a      	orrs	r2, r1
 8009878:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	22ff      	movs	r2, #255	; 0xff
 8009880:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	2201      	movs	r2, #1
 8009886:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8009888:	2300      	movs	r3, #0
  }
}
 800988a:	4618      	mov	r0, r3
 800988c:	3708      	adds	r7, #8
 800988e:	46bd      	mov	sp, r7
 8009890:	bd80      	pop	{r7, pc}

08009892 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8009892:	b590      	push	{r4, r7, lr}
 8009894:	b087      	sub	sp, #28
 8009896:	af00      	add	r7, sp, #0
 8009898:	60f8      	str	r0, [r7, #12]
 800989a:	60b9      	str	r1, [r7, #8]
 800989c:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800989e:	2300      	movs	r3, #0
 80098a0:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	7f1b      	ldrb	r3, [r3, #28]
 80098a6:	2b01      	cmp	r3, #1
 80098a8:	d101      	bne.n	80098ae <HAL_RTC_SetTime+0x1c>
 80098aa:	2302      	movs	r3, #2
 80098ac:	e0aa      	b.n	8009a04 <HAL_RTC_SetTime+0x172>
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	2201      	movs	r2, #1
 80098b2:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	2202      	movs	r2, #2
 80098b8:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d126      	bne.n	800990e <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	689b      	ldr	r3, [r3, #8]
 80098c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d102      	bne.n	80098d4 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80098ce:	68bb      	ldr	r3, [r7, #8]
 80098d0:	2200      	movs	r2, #0
 80098d2:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80098d4:	68bb      	ldr	r3, [r7, #8]
 80098d6:	781b      	ldrb	r3, [r3, #0]
 80098d8:	4618      	mov	r0, r3
 80098da:	f000 f992 	bl	8009c02 <RTC_ByteToBcd2>
 80098de:	4603      	mov	r3, r0
 80098e0:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80098e2:	68bb      	ldr	r3, [r7, #8]
 80098e4:	785b      	ldrb	r3, [r3, #1]
 80098e6:	4618      	mov	r0, r3
 80098e8:	f000 f98b 	bl	8009c02 <RTC_ByteToBcd2>
 80098ec:	4603      	mov	r3, r0
 80098ee:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80098f0:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 80098f2:	68bb      	ldr	r3, [r7, #8]
 80098f4:	789b      	ldrb	r3, [r3, #2]
 80098f6:	4618      	mov	r0, r3
 80098f8:	f000 f983 	bl	8009c02 <RTC_ByteToBcd2>
 80098fc:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80098fe:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8009902:	68bb      	ldr	r3, [r7, #8]
 8009904:	78db      	ldrb	r3, [r3, #3]
 8009906:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8009908:	4313      	orrs	r3, r2
 800990a:	617b      	str	r3, [r7, #20]
 800990c:	e018      	b.n	8009940 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	689b      	ldr	r3, [r3, #8]
 8009914:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009918:	2b00      	cmp	r3, #0
 800991a:	d102      	bne.n	8009922 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800991c:	68bb      	ldr	r3, [r7, #8]
 800991e:	2200      	movs	r2, #0
 8009920:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8009922:	68bb      	ldr	r3, [r7, #8]
 8009924:	781b      	ldrb	r3, [r3, #0]
 8009926:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8009928:	68bb      	ldr	r3, [r7, #8]
 800992a:	785b      	ldrb	r3, [r3, #1]
 800992c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800992e:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8009930:	68ba      	ldr	r2, [r7, #8]
 8009932:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8009934:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8009936:	68bb      	ldr	r3, [r7, #8]
 8009938:	78db      	ldrb	r3, [r3, #3]
 800993a:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800993c:	4313      	orrs	r3, r2
 800993e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	22ca      	movs	r2, #202	; 0xca
 8009946:	625a      	str	r2, [r3, #36]	; 0x24
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	2253      	movs	r2, #83	; 0x53
 800994e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8009950:	68f8      	ldr	r0, [r7, #12]
 8009952:	f000 f92a 	bl	8009baa <RTC_EnterInitMode>
 8009956:	4603      	mov	r3, r0
 8009958:	2b00      	cmp	r3, #0
 800995a:	d00b      	beq.n	8009974 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	22ff      	movs	r2, #255	; 0xff
 8009962:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	2204      	movs	r2, #4
 8009968:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	2200      	movs	r2, #0
 800996e:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8009970:	2301      	movs	r3, #1
 8009972:	e047      	b.n	8009a04 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	681a      	ldr	r2, [r3, #0]
 8009978:	697b      	ldr	r3, [r7, #20]
 800997a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800997e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8009982:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	689a      	ldr	r2, [r3, #8]
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8009992:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	6899      	ldr	r1, [r3, #8]
 800999a:	68bb      	ldr	r3, [r7, #8]
 800999c:	68da      	ldr	r2, [r3, #12]
 800999e:	68bb      	ldr	r3, [r7, #8]
 80099a0:	691b      	ldr	r3, [r3, #16]
 80099a2:	431a      	orrs	r2, r3
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	430a      	orrs	r2, r1
 80099aa:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	68da      	ldr	r2, [r3, #12]
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80099ba:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	689b      	ldr	r3, [r3, #8]
 80099c2:	f003 0320 	and.w	r3, r3, #32
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d111      	bne.n	80099ee <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80099ca:	68f8      	ldr	r0, [r7, #12]
 80099cc:	f000 f8c5 	bl	8009b5a <HAL_RTC_WaitForSynchro>
 80099d0:	4603      	mov	r3, r0
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d00b      	beq.n	80099ee <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	22ff      	movs	r2, #255	; 0xff
 80099dc:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	2204      	movs	r2, #4
 80099e2:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	2200      	movs	r2, #0
 80099e8:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80099ea:	2301      	movs	r3, #1
 80099ec:	e00a      	b.n	8009a04 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	22ff      	movs	r2, #255	; 0xff
 80099f4:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	2201      	movs	r2, #1
 80099fa:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	2200      	movs	r2, #0
 8009a00:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8009a02:	2300      	movs	r3, #0
  }
}
 8009a04:	4618      	mov	r0, r3
 8009a06:	371c      	adds	r7, #28
 8009a08:	46bd      	mov	sp, r7
 8009a0a:	bd90      	pop	{r4, r7, pc}

08009a0c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8009a0c:	b590      	push	{r4, r7, lr}
 8009a0e:	b087      	sub	sp, #28
 8009a10:	af00      	add	r7, sp, #0
 8009a12:	60f8      	str	r0, [r7, #12]
 8009a14:	60b9      	str	r1, [r7, #8]
 8009a16:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8009a18:	2300      	movs	r3, #0
 8009a1a:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	7f1b      	ldrb	r3, [r3, #28]
 8009a20:	2b01      	cmp	r3, #1
 8009a22:	d101      	bne.n	8009a28 <HAL_RTC_SetDate+0x1c>
 8009a24:	2302      	movs	r3, #2
 8009a26:	e094      	b.n	8009b52 <HAL_RTC_SetDate+0x146>
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	2201      	movs	r2, #1
 8009a2c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	2202      	movs	r2, #2
 8009a32:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d10e      	bne.n	8009a58 <HAL_RTC_SetDate+0x4c>
 8009a3a:	68bb      	ldr	r3, [r7, #8]
 8009a3c:	785b      	ldrb	r3, [r3, #1]
 8009a3e:	f003 0310 	and.w	r3, r3, #16
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d008      	beq.n	8009a58 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8009a46:	68bb      	ldr	r3, [r7, #8]
 8009a48:	785b      	ldrb	r3, [r3, #1]
 8009a4a:	f023 0310 	bic.w	r3, r3, #16
 8009a4e:	b2db      	uxtb	r3, r3
 8009a50:	330a      	adds	r3, #10
 8009a52:	b2da      	uxtb	r2, r3
 8009a54:	68bb      	ldr	r3, [r7, #8]
 8009a56:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d11c      	bne.n	8009a98 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8009a5e:	68bb      	ldr	r3, [r7, #8]
 8009a60:	78db      	ldrb	r3, [r3, #3]
 8009a62:	4618      	mov	r0, r3
 8009a64:	f000 f8cd 	bl	8009c02 <RTC_ByteToBcd2>
 8009a68:	4603      	mov	r3, r0
 8009a6a:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8009a6c:	68bb      	ldr	r3, [r7, #8]
 8009a6e:	785b      	ldrb	r3, [r3, #1]
 8009a70:	4618      	mov	r0, r3
 8009a72:	f000 f8c6 	bl	8009c02 <RTC_ByteToBcd2>
 8009a76:	4603      	mov	r3, r0
 8009a78:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8009a7a:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8009a7c:	68bb      	ldr	r3, [r7, #8]
 8009a7e:	789b      	ldrb	r3, [r3, #2]
 8009a80:	4618      	mov	r0, r3
 8009a82:	f000 f8be 	bl	8009c02 <RTC_ByteToBcd2>
 8009a86:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8009a88:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 8009a8c:	68bb      	ldr	r3, [r7, #8]
 8009a8e:	781b      	ldrb	r3, [r3, #0]
 8009a90:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8009a92:	4313      	orrs	r3, r2
 8009a94:	617b      	str	r3, [r7, #20]
 8009a96:	e00e      	b.n	8009ab6 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8009a98:	68bb      	ldr	r3, [r7, #8]
 8009a9a:	78db      	ldrb	r3, [r3, #3]
 8009a9c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8009a9e:	68bb      	ldr	r3, [r7, #8]
 8009aa0:	785b      	ldrb	r3, [r3, #1]
 8009aa2:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8009aa4:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8009aa6:	68ba      	ldr	r2, [r7, #8]
 8009aa8:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8009aaa:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8009aac:	68bb      	ldr	r3, [r7, #8]
 8009aae:	781b      	ldrb	r3, [r3, #0]
 8009ab0:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8009ab2:	4313      	orrs	r3, r2
 8009ab4:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	22ca      	movs	r2, #202	; 0xca
 8009abc:	625a      	str	r2, [r3, #36]	; 0x24
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	2253      	movs	r2, #83	; 0x53
 8009ac4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8009ac6:	68f8      	ldr	r0, [r7, #12]
 8009ac8:	f000 f86f 	bl	8009baa <RTC_EnterInitMode>
 8009acc:	4603      	mov	r3, r0
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d00b      	beq.n	8009aea <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	22ff      	movs	r2, #255	; 0xff
 8009ad8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	2204      	movs	r2, #4
 8009ade:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	2200      	movs	r2, #0
 8009ae4:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8009ae6:	2301      	movs	r3, #1
 8009ae8:	e033      	b.n	8009b52 <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	681a      	ldr	r2, [r3, #0]
 8009aee:	697b      	ldr	r3, [r7, #20]
 8009af0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8009af4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8009af8:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	68da      	ldr	r2, [r3, #12]
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009b08:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	689b      	ldr	r3, [r3, #8]
 8009b10:	f003 0320 	and.w	r3, r3, #32
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d111      	bne.n	8009b3c <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009b18:	68f8      	ldr	r0, [r7, #12]
 8009b1a:	f000 f81e 	bl	8009b5a <HAL_RTC_WaitForSynchro>
 8009b1e:	4603      	mov	r3, r0
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d00b      	beq.n	8009b3c <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	22ff      	movs	r2, #255	; 0xff
 8009b2a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	2204      	movs	r2, #4
 8009b30:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	2200      	movs	r2, #0
 8009b36:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8009b38:	2301      	movs	r3, #1
 8009b3a:	e00a      	b.n	8009b52 <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	22ff      	movs	r2, #255	; 0xff
 8009b42:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	2201      	movs	r2, #1
 8009b48:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	2200      	movs	r2, #0
 8009b4e:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8009b50:	2300      	movs	r3, #0
  }
}
 8009b52:	4618      	mov	r0, r3
 8009b54:	371c      	adds	r7, #28
 8009b56:	46bd      	mov	sp, r7
 8009b58:	bd90      	pop	{r4, r7, pc}

08009b5a <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8009b5a:	b580      	push	{r7, lr}
 8009b5c:	b084      	sub	sp, #16
 8009b5e:	af00      	add	r7, sp, #0
 8009b60:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009b62:	2300      	movs	r3, #0
 8009b64:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	68da      	ldr	r2, [r3, #12]
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8009b74:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009b76:	f7fc fd65 	bl	8006644 <HAL_GetTick>
 8009b7a:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8009b7c:	e009      	b.n	8009b92 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8009b7e:	f7fc fd61 	bl	8006644 <HAL_GetTick>
 8009b82:	4602      	mov	r2, r0
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	1ad3      	subs	r3, r2, r3
 8009b88:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009b8c:	d901      	bls.n	8009b92 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8009b8e:	2303      	movs	r3, #3
 8009b90:	e007      	b.n	8009ba2 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	68db      	ldr	r3, [r3, #12]
 8009b98:	f003 0320 	and.w	r3, r3, #32
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d0ee      	beq.n	8009b7e <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8009ba0:	2300      	movs	r3, #0
}
 8009ba2:	4618      	mov	r0, r3
 8009ba4:	3710      	adds	r7, #16
 8009ba6:	46bd      	mov	sp, r7
 8009ba8:	bd80      	pop	{r7, pc}

08009baa <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8009baa:	b580      	push	{r7, lr}
 8009bac:	b084      	sub	sp, #16
 8009bae:	af00      	add	r7, sp, #0
 8009bb0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009bb2:	2300      	movs	r3, #0
 8009bb4:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	68db      	ldr	r3, [r3, #12]
 8009bbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d119      	bne.n	8009bf8 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	f04f 32ff 	mov.w	r2, #4294967295
 8009bcc:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009bce:	f7fc fd39 	bl	8006644 <HAL_GetTick>
 8009bd2:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8009bd4:	e009      	b.n	8009bea <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8009bd6:	f7fc fd35 	bl	8006644 <HAL_GetTick>
 8009bda:	4602      	mov	r2, r0
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	1ad3      	subs	r3, r2, r3
 8009be0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009be4:	d901      	bls.n	8009bea <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8009be6:	2303      	movs	r3, #3
 8009be8:	e007      	b.n	8009bfa <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	68db      	ldr	r3, [r3, #12]
 8009bf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d0ee      	beq.n	8009bd6 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8009bf8:	2300      	movs	r3, #0
}
 8009bfa:	4618      	mov	r0, r3
 8009bfc:	3710      	adds	r7, #16
 8009bfe:	46bd      	mov	sp, r7
 8009c00:	bd80      	pop	{r7, pc}

08009c02 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8009c02:	b480      	push	{r7}
 8009c04:	b085      	sub	sp, #20
 8009c06:	af00      	add	r7, sp, #0
 8009c08:	4603      	mov	r3, r0
 8009c0a:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8009c0c:	2300      	movs	r3, #0
 8009c0e:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 8009c10:	e005      	b.n	8009c1e <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	3301      	adds	r3, #1
 8009c16:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8009c18:	79fb      	ldrb	r3, [r7, #7]
 8009c1a:	3b0a      	subs	r3, #10
 8009c1c:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 8009c1e:	79fb      	ldrb	r3, [r7, #7]
 8009c20:	2b09      	cmp	r3, #9
 8009c22:	d8f6      	bhi.n	8009c12 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	b2db      	uxtb	r3, r3
 8009c28:	011b      	lsls	r3, r3, #4
 8009c2a:	b2da      	uxtb	r2, r3
 8009c2c:	79fb      	ldrb	r3, [r7, #7]
 8009c2e:	4313      	orrs	r3, r2
 8009c30:	b2db      	uxtb	r3, r3
}
 8009c32:	4618      	mov	r0, r3
 8009c34:	3714      	adds	r7, #20
 8009c36:	46bd      	mov	sp, r7
 8009c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c3c:	4770      	bx	lr

08009c3e <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009c3e:	b580      	push	{r7, lr}
 8009c40:	b082      	sub	sp, #8
 8009c42:	af00      	add	r7, sp, #0
 8009c44:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d101      	bne.n	8009c50 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009c4c:	2301      	movs	r3, #1
 8009c4e:	e056      	b.n	8009cfe <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	2200      	movs	r2, #0
 8009c54:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009c5c:	b2db      	uxtb	r3, r3
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d106      	bne.n	8009c70 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	2200      	movs	r2, #0
 8009c66:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009c6a:	6878      	ldr	r0, [r7, #4]
 8009c6c:	f7fa fc6c 	bl	8004548 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	2202      	movs	r2, #2
 8009c74:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	681a      	ldr	r2, [r3, #0]
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009c86:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	685a      	ldr	r2, [r3, #4]
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	689b      	ldr	r3, [r3, #8]
 8009c90:	431a      	orrs	r2, r3
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	68db      	ldr	r3, [r3, #12]
 8009c96:	431a      	orrs	r2, r3
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	691b      	ldr	r3, [r3, #16]
 8009c9c:	431a      	orrs	r2, r3
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	695b      	ldr	r3, [r3, #20]
 8009ca2:	431a      	orrs	r2, r3
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	699b      	ldr	r3, [r3, #24]
 8009ca8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009cac:	431a      	orrs	r2, r3
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	69db      	ldr	r3, [r3, #28]
 8009cb2:	431a      	orrs	r2, r3
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	6a1b      	ldr	r3, [r3, #32]
 8009cb8:	ea42 0103 	orr.w	r1, r2, r3
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	430a      	orrs	r2, r1
 8009cc6:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	699b      	ldr	r3, [r3, #24]
 8009ccc:	0c1b      	lsrs	r3, r3, #16
 8009cce:	f003 0104 	and.w	r1, r3, #4
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	430a      	orrs	r2, r1
 8009cdc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	69da      	ldr	r2, [r3, #28]
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009cec:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	2200      	movs	r2, #0
 8009cf2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	2201      	movs	r2, #1
 8009cf8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8009cfc:	2300      	movs	r3, #0
}
 8009cfe:	4618      	mov	r0, r3
 8009d00:	3708      	adds	r7, #8
 8009d02:	46bd      	mov	sp, r7
 8009d04:	bd80      	pop	{r7, pc}
	...

08009d08 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8009d08:	b480      	push	{r7}
 8009d0a:	b087      	sub	sp, #28
 8009d0c:	af00      	add	r7, sp, #0
 8009d0e:	60f8      	str	r0, [r7, #12]
 8009d10:	60b9      	str	r1, [r7, #8]
 8009d12:	607a      	str	r2, [r7, #4]
 8009d14:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8009d16:	2300      	movs	r3, #0
 8009d18:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009d20:	2b01      	cmp	r3, #1
 8009d22:	d101      	bne.n	8009d28 <HAL_SPI_TransmitReceive_IT+0x20>
 8009d24:	2302      	movs	r3, #2
 8009d26:	e075      	b.n	8009e14 <HAL_SPI_TransmitReceive_IT+0x10c>
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	2201      	movs	r2, #1
 8009d2c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009d36:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	685b      	ldr	r3, [r3, #4]
 8009d3c:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8009d3e:	7dbb      	ldrb	r3, [r7, #22]
 8009d40:	2b01      	cmp	r3, #1
 8009d42:	d00d      	beq.n	8009d60 <HAL_SPI_TransmitReceive_IT+0x58>
 8009d44:	693b      	ldr	r3, [r7, #16]
 8009d46:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009d4a:	d106      	bne.n	8009d5a <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	689b      	ldr	r3, [r3, #8]
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d102      	bne.n	8009d5a <HAL_SPI_TransmitReceive_IT+0x52>
 8009d54:	7dbb      	ldrb	r3, [r7, #22]
 8009d56:	2b04      	cmp	r3, #4
 8009d58:	d002      	beq.n	8009d60 <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 8009d5a:	2302      	movs	r3, #2
 8009d5c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009d5e:	e054      	b.n	8009e0a <HAL_SPI_TransmitReceive_IT+0x102>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009d60:	68bb      	ldr	r3, [r7, #8]
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d005      	beq.n	8009d72 <HAL_SPI_TransmitReceive_IT+0x6a>
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d002      	beq.n	8009d72 <HAL_SPI_TransmitReceive_IT+0x6a>
 8009d6c:	887b      	ldrh	r3, [r7, #2]
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d102      	bne.n	8009d78 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 8009d72:	2301      	movs	r3, #1
 8009d74:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009d76:	e048      	b.n	8009e0a <HAL_SPI_TransmitReceive_IT+0x102>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009d7e:	b2db      	uxtb	r3, r3
 8009d80:	2b04      	cmp	r3, #4
 8009d82:	d003      	beq.n	8009d8c <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	2205      	movs	r2, #5
 8009d88:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	2200      	movs	r2, #0
 8009d90:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	68ba      	ldr	r2, [r7, #8]
 8009d96:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	887a      	ldrh	r2, [r7, #2]
 8009d9c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	887a      	ldrh	r2, [r7, #2]
 8009da2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	687a      	ldr	r2, [r7, #4]
 8009da8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	887a      	ldrh	r2, [r7, #2]
 8009dae:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	887a      	ldrh	r2, [r7, #2]
 8009db4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	68db      	ldr	r3, [r3, #12]
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d006      	beq.n	8009dcc <HAL_SPI_TransmitReceive_IT+0xc4>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	4a17      	ldr	r2, [pc, #92]	; (8009e20 <HAL_SPI_TransmitReceive_IT+0x118>)
 8009dc2:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	4a17      	ldr	r2, [pc, #92]	; (8009e24 <HAL_SPI_TransmitReceive_IT+0x11c>)
 8009dc8:	645a      	str	r2, [r3, #68]	; 0x44
 8009dca:	e005      	b.n	8009dd8 <HAL_SPI_TransmitReceive_IT+0xd0>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	4a16      	ldr	r2, [pc, #88]	; (8009e28 <HAL_SPI_TransmitReceive_IT+0x120>)
 8009dd0:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	4a15      	ldr	r2, [pc, #84]	; (8009e2c <HAL_SPI_TransmitReceive_IT+0x124>)
 8009dd6:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	685a      	ldr	r2, [r3, #4]
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 8009de6:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009df2:	2b40      	cmp	r3, #64	; 0x40
 8009df4:	d008      	beq.n	8009e08 <HAL_SPI_TransmitReceive_IT+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	681a      	ldr	r2, [r3, #0]
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009e04:	601a      	str	r2, [r3, #0]
 8009e06:	e000      	b.n	8009e0a <HAL_SPI_TransmitReceive_IT+0x102>
  }

error :
 8009e08:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	2200      	movs	r2, #0
 8009e0e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009e12:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e14:	4618      	mov	r0, r3
 8009e16:	371c      	adds	r7, #28
 8009e18:	46bd      	mov	sp, r7
 8009e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e1e:	4770      	bx	lr
 8009e20:	0800a145 	.word	0x0800a145
 8009e24:	0800a1a5 	.word	0x0800a1a5
 8009e28:	0800a081 	.word	0x0800a081
 8009e2c:	0800a0e5 	.word	0x0800a0e5

08009e30 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8009e30:	b580      	push	{r7, lr}
 8009e32:	b088      	sub	sp, #32
 8009e34:	af00      	add	r7, sp, #0
 8009e36:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	685b      	ldr	r3, [r3, #4]
 8009e3e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	689b      	ldr	r3, [r3, #8]
 8009e46:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8009e48:	69bb      	ldr	r3, [r7, #24]
 8009e4a:	099b      	lsrs	r3, r3, #6
 8009e4c:	f003 0301 	and.w	r3, r3, #1
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d10f      	bne.n	8009e74 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8009e54:	69bb      	ldr	r3, [r7, #24]
 8009e56:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d00a      	beq.n	8009e74 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8009e5e:	69fb      	ldr	r3, [r7, #28]
 8009e60:	099b      	lsrs	r3, r3, #6
 8009e62:	f003 0301 	and.w	r3, r3, #1
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d004      	beq.n	8009e74 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e6e:	6878      	ldr	r0, [r7, #4]
 8009e70:	4798      	blx	r3
    return;
 8009e72:	e0d7      	b.n	800a024 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8009e74:	69bb      	ldr	r3, [r7, #24]
 8009e76:	085b      	lsrs	r3, r3, #1
 8009e78:	f003 0301 	and.w	r3, r3, #1
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d00a      	beq.n	8009e96 <HAL_SPI_IRQHandler+0x66>
 8009e80:	69fb      	ldr	r3, [r7, #28]
 8009e82:	09db      	lsrs	r3, r3, #7
 8009e84:	f003 0301 	and.w	r3, r3, #1
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d004      	beq.n	8009e96 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e90:	6878      	ldr	r0, [r7, #4]
 8009e92:	4798      	blx	r3
    return;
 8009e94:	e0c6      	b.n	800a024 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8009e96:	69bb      	ldr	r3, [r7, #24]
 8009e98:	095b      	lsrs	r3, r3, #5
 8009e9a:	f003 0301 	and.w	r3, r3, #1
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d10c      	bne.n	8009ebc <HAL_SPI_IRQHandler+0x8c>
 8009ea2:	69bb      	ldr	r3, [r7, #24]
 8009ea4:	099b      	lsrs	r3, r3, #6
 8009ea6:	f003 0301 	and.w	r3, r3, #1
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d106      	bne.n	8009ebc <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8009eae:	69bb      	ldr	r3, [r7, #24]
 8009eb0:	0a1b      	lsrs	r3, r3, #8
 8009eb2:	f003 0301 	and.w	r3, r3, #1
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	f000 80b4 	beq.w	800a024 <HAL_SPI_IRQHandler+0x1f4>
 8009ebc:	69fb      	ldr	r3, [r7, #28]
 8009ebe:	095b      	lsrs	r3, r3, #5
 8009ec0:	f003 0301 	and.w	r3, r3, #1
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	f000 80ad 	beq.w	800a024 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8009eca:	69bb      	ldr	r3, [r7, #24]
 8009ecc:	099b      	lsrs	r3, r3, #6
 8009ece:	f003 0301 	and.w	r3, r3, #1
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d023      	beq.n	8009f1e <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009edc:	b2db      	uxtb	r3, r3
 8009ede:	2b03      	cmp	r3, #3
 8009ee0:	d011      	beq.n	8009f06 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ee6:	f043 0204 	orr.w	r2, r3, #4
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009eee:	2300      	movs	r3, #0
 8009ef0:	617b      	str	r3, [r7, #20]
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	68db      	ldr	r3, [r3, #12]
 8009ef8:	617b      	str	r3, [r7, #20]
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	689b      	ldr	r3, [r3, #8]
 8009f00:	617b      	str	r3, [r7, #20]
 8009f02:	697b      	ldr	r3, [r7, #20]
 8009f04:	e00b      	b.n	8009f1e <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009f06:	2300      	movs	r3, #0
 8009f08:	613b      	str	r3, [r7, #16]
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	68db      	ldr	r3, [r3, #12]
 8009f10:	613b      	str	r3, [r7, #16]
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	689b      	ldr	r3, [r3, #8]
 8009f18:	613b      	str	r3, [r7, #16]
 8009f1a:	693b      	ldr	r3, [r7, #16]
        return;
 8009f1c:	e082      	b.n	800a024 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8009f1e:	69bb      	ldr	r3, [r7, #24]
 8009f20:	095b      	lsrs	r3, r3, #5
 8009f22:	f003 0301 	and.w	r3, r3, #1
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d014      	beq.n	8009f54 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f2e:	f043 0201 	orr.w	r2, r3, #1
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8009f36:	2300      	movs	r3, #0
 8009f38:	60fb      	str	r3, [r7, #12]
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	689b      	ldr	r3, [r3, #8]
 8009f40:	60fb      	str	r3, [r7, #12]
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	681a      	ldr	r2, [r3, #0]
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009f50:	601a      	str	r2, [r3, #0]
 8009f52:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8009f54:	69bb      	ldr	r3, [r7, #24]
 8009f56:	0a1b      	lsrs	r3, r3, #8
 8009f58:	f003 0301 	and.w	r3, r3, #1
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d00c      	beq.n	8009f7a <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f64:	f043 0208 	orr.w	r2, r3, #8
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8009f6c:	2300      	movs	r3, #0
 8009f6e:	60bb      	str	r3, [r7, #8]
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	689b      	ldr	r3, [r3, #8]
 8009f76:	60bb      	str	r3, [r7, #8]
 8009f78:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d04f      	beq.n	800a022 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	685a      	ldr	r2, [r3, #4]
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009f90:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	2201      	movs	r2, #1
 8009f96:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8009f9a:	69fb      	ldr	r3, [r7, #28]
 8009f9c:	f003 0302 	and.w	r3, r3, #2
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d104      	bne.n	8009fae <HAL_SPI_IRQHandler+0x17e>
 8009fa4:	69fb      	ldr	r3, [r7, #28]
 8009fa6:	f003 0301 	and.w	r3, r3, #1
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d034      	beq.n	800a018 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	685a      	ldr	r2, [r3, #4]
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	f022 0203 	bic.w	r2, r2, #3
 8009fbc:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d011      	beq.n	8009fea <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009fca:	4a18      	ldr	r2, [pc, #96]	; (800a02c <HAL_SPI_IRQHandler+0x1fc>)
 8009fcc:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009fd2:	4618      	mov	r0, r3
 8009fd4:	f7fd f938 	bl	8007248 <HAL_DMA_Abort_IT>
 8009fd8:	4603      	mov	r3, r0
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d005      	beq.n	8009fea <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009fe2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d016      	beq.n	800a020 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009ff6:	4a0d      	ldr	r2, [pc, #52]	; (800a02c <HAL_SPI_IRQHandler+0x1fc>)
 8009ff8:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009ffe:	4618      	mov	r0, r3
 800a000:	f7fd f922 	bl	8007248 <HAL_DMA_Abort_IT>
 800a004:	4603      	mov	r3, r0
 800a006:	2b00      	cmp	r3, #0
 800a008:	d00a      	beq.n	800a020 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a00e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800a016:	e003      	b.n	800a020 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800a018:	6878      	ldr	r0, [r7, #4]
 800a01a:	f000 f813 	bl	800a044 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800a01e:	e000      	b.n	800a022 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800a020:	bf00      	nop
    return;
 800a022:	bf00      	nop
  }
}
 800a024:	3720      	adds	r7, #32
 800a026:	46bd      	mov	sp, r7
 800a028:	bd80      	pop	{r7, pc}
 800a02a:	bf00      	nop
 800a02c:	0800a059 	.word	0x0800a059

0800a030 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800a030:	b480      	push	{r7}
 800a032:	b083      	sub	sp, #12
 800a034:	af00      	add	r7, sp, #0
 800a036:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800a038:	bf00      	nop
 800a03a:	370c      	adds	r7, #12
 800a03c:	46bd      	mov	sp, r7
 800a03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a042:	4770      	bx	lr

0800a044 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800a044:	b480      	push	{r7}
 800a046:	b083      	sub	sp, #12
 800a048:	af00      	add	r7, sp, #0
 800a04a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800a04c:	bf00      	nop
 800a04e:	370c      	adds	r7, #12
 800a050:	46bd      	mov	sp, r7
 800a052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a056:	4770      	bx	lr

0800a058 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a058:	b580      	push	{r7, lr}
 800a05a:	b084      	sub	sp, #16
 800a05c:	af00      	add	r7, sp, #0
 800a05e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a064:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	2200      	movs	r2, #0
 800a06a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	2200      	movs	r2, #0
 800a070:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800a072:	68f8      	ldr	r0, [r7, #12]
 800a074:	f7ff ffe6 	bl	800a044 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800a078:	bf00      	nop
 800a07a:	3710      	adds	r7, #16
 800a07c:	46bd      	mov	sp, r7
 800a07e:	bd80      	pop	{r7, pc}

0800a080 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800a080:	b580      	push	{r7, lr}
 800a082:	b082      	sub	sp, #8
 800a084:	af00      	add	r7, sp, #0
 800a086:	6078      	str	r0, [r7, #4]
  /* Receive data in 8bit mode */
  *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	f103 020c 	add.w	r2, r3, #12
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a094:	7812      	ldrb	r2, [r2, #0]
 800a096:	b2d2      	uxtb	r2, r2
 800a098:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a09e:	1c5a      	adds	r2, r3, #1
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a0a8:	b29b      	uxth	r3, r3
 800a0aa:	3b01      	subs	r3, #1
 800a0ac:	b29a      	uxth	r2, r3
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a0b6:	b29b      	uxth	r3, r3
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d10f      	bne.n	800a0dc <SPI_2linesRxISR_8BIT+0x5c>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	685a      	ldr	r2, [r3, #4]
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800a0ca:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a0d0:	b29b      	uxth	r3, r3
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d102      	bne.n	800a0dc <SPI_2linesRxISR_8BIT+0x5c>
    {
      SPI_CloseRxTx_ISR(hspi);
 800a0d6:	6878      	ldr	r0, [r7, #4]
 800a0d8:	f000 f940 	bl	800a35c <SPI_CloseRxTx_ISR>
    }
  }
}
 800a0dc:	bf00      	nop
 800a0de:	3708      	adds	r7, #8
 800a0e0:	46bd      	mov	sp, r7
 800a0e2:	bd80      	pop	{r7, pc}

0800a0e4 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800a0e4:	b580      	push	{r7, lr}
 800a0e6:	b082      	sub	sp, #8
 800a0e8:	af00      	add	r7, sp, #0
 800a0ea:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	330c      	adds	r3, #12
 800a0f6:	7812      	ldrb	r2, [r2, #0]
 800a0f8:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0fe:	1c5a      	adds	r2, r3, #1
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a108:	b29b      	uxth	r3, r3
 800a10a:	3b01      	subs	r3, #1
 800a10c:	b29a      	uxth	r2, r3
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a116:	b29b      	uxth	r3, r3
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d10f      	bne.n	800a13c <SPI_2linesTxISR_8BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	685a      	ldr	r2, [r3, #4]
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a12a:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a130:	b29b      	uxth	r3, r3
 800a132:	2b00      	cmp	r3, #0
 800a134:	d102      	bne.n	800a13c <SPI_2linesTxISR_8BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 800a136:	6878      	ldr	r0, [r7, #4]
 800a138:	f000 f910 	bl	800a35c <SPI_CloseRxTx_ISR>
    }
  }
}
 800a13c:	bf00      	nop
 800a13e:	3708      	adds	r7, #8
 800a140:	46bd      	mov	sp, r7
 800a142:	bd80      	pop	{r7, pc}

0800a144 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800a144:	b580      	push	{r7, lr}
 800a146:	b082      	sub	sp, #8
 800a148:	af00      	add	r7, sp, #0
 800a14a:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	68da      	ldr	r2, [r3, #12]
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a156:	b292      	uxth	r2, r2
 800a158:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a15e:	1c9a      	adds	r2, r3, #2
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a168:	b29b      	uxth	r3, r3
 800a16a:	3b01      	subs	r3, #1
 800a16c:	b29a      	uxth	r2, r3
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->RxXferCount == 0U)
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a176:	b29b      	uxth	r3, r3
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d10f      	bne.n	800a19c <SPI_2linesRxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	685a      	ldr	r2, [r3, #4]
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a18a:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a190:	b29b      	uxth	r3, r3
 800a192:	2b00      	cmp	r3, #0
 800a194:	d102      	bne.n	800a19c <SPI_2linesRxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 800a196:	6878      	ldr	r0, [r7, #4]
 800a198:	f000 f8e0 	bl	800a35c <SPI_CloseRxTx_ISR>
    }
  }
}
 800a19c:	bf00      	nop
 800a19e:	3708      	adds	r7, #8
 800a1a0:	46bd      	mov	sp, r7
 800a1a2:	bd80      	pop	{r7, pc}

0800a1a4 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800a1a4:	b580      	push	{r7, lr}
 800a1a6:	b082      	sub	sp, #8
 800a1a8:	af00      	add	r7, sp, #0
 800a1aa:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1b0:	881a      	ldrh	r2, [r3, #0]
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1bc:	1c9a      	adds	r2, r3, #2
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a1c6:	b29b      	uxth	r3, r3
 800a1c8:	3b01      	subs	r3, #1
 800a1ca:	b29a      	uxth	r2, r3
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a1d4:	b29b      	uxth	r3, r3
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d10f      	bne.n	800a1fa <SPI_2linesTxISR_16BIT+0x56>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	685a      	ldr	r2, [r3, #4]
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a1e8:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a1ee:	b29b      	uxth	r3, r3
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d102      	bne.n	800a1fa <SPI_2linesTxISR_16BIT+0x56>
    {
      SPI_CloseRxTx_ISR(hspi);
 800a1f4:	6878      	ldr	r0, [r7, #4]
 800a1f6:	f000 f8b1 	bl	800a35c <SPI_CloseRxTx_ISR>
    }
  }
}
 800a1fa:	bf00      	nop
 800a1fc:	3708      	adds	r7, #8
 800a1fe:	46bd      	mov	sp, r7
 800a200:	bd80      	pop	{r7, pc}

0800a202 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a202:	b580      	push	{r7, lr}
 800a204:	b084      	sub	sp, #16
 800a206:	af00      	add	r7, sp, #0
 800a208:	60f8      	str	r0, [r7, #12]
 800a20a:	60b9      	str	r1, [r7, #8]
 800a20c:	603b      	str	r3, [r7, #0]
 800a20e:	4613      	mov	r3, r2
 800a210:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a212:	e04c      	b.n	800a2ae <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800a214:	683b      	ldr	r3, [r7, #0]
 800a216:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a21a:	d048      	beq.n	800a2ae <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800a21c:	f7fc fa12 	bl	8006644 <HAL_GetTick>
 800a220:	4602      	mov	r2, r0
 800a222:	69bb      	ldr	r3, [r7, #24]
 800a224:	1ad3      	subs	r3, r2, r3
 800a226:	683a      	ldr	r2, [r7, #0]
 800a228:	429a      	cmp	r2, r3
 800a22a:	d902      	bls.n	800a232 <SPI_WaitFlagStateUntilTimeout+0x30>
 800a22c:	683b      	ldr	r3, [r7, #0]
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d13d      	bne.n	800a2ae <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	685a      	ldr	r2, [r3, #4]
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800a240:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	685b      	ldr	r3, [r3, #4]
 800a246:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a24a:	d111      	bne.n	800a270 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	689b      	ldr	r3, [r3, #8]
 800a250:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a254:	d004      	beq.n	800a260 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	689b      	ldr	r3, [r3, #8]
 800a25a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a25e:	d107      	bne.n	800a270 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	681a      	ldr	r2, [r3, #0]
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a26e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a274:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a278:	d10f      	bne.n	800a29a <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	681a      	ldr	r2, [r3, #0]
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a288:	601a      	str	r2, [r3, #0]
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	681a      	ldr	r2, [r3, #0]
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a298:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	2201      	movs	r2, #1
 800a29e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	2200      	movs	r2, #0
 800a2a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800a2aa:	2303      	movs	r3, #3
 800a2ac:	e00f      	b.n	800a2ce <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	689a      	ldr	r2, [r3, #8]
 800a2b4:	68bb      	ldr	r3, [r7, #8]
 800a2b6:	4013      	ands	r3, r2
 800a2b8:	68ba      	ldr	r2, [r7, #8]
 800a2ba:	429a      	cmp	r2, r3
 800a2bc:	bf0c      	ite	eq
 800a2be:	2301      	moveq	r3, #1
 800a2c0:	2300      	movne	r3, #0
 800a2c2:	b2db      	uxtb	r3, r3
 800a2c4:	461a      	mov	r2, r3
 800a2c6:	79fb      	ldrb	r3, [r7, #7]
 800a2c8:	429a      	cmp	r2, r3
 800a2ca:	d1a3      	bne.n	800a214 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800a2cc:	2300      	movs	r3, #0
}
 800a2ce:	4618      	mov	r0, r3
 800a2d0:	3710      	adds	r7, #16
 800a2d2:	46bd      	mov	sp, r7
 800a2d4:	bd80      	pop	{r7, pc}
	...

0800a2d8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800a2d8:	b580      	push	{r7, lr}
 800a2da:	b088      	sub	sp, #32
 800a2dc:	af02      	add	r7, sp, #8
 800a2de:	60f8      	str	r0, [r7, #12]
 800a2e0:	60b9      	str	r1, [r7, #8]
 800a2e2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800a2e4:	4b1b      	ldr	r3, [pc, #108]	; (800a354 <SPI_EndRxTxTransaction+0x7c>)
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	4a1b      	ldr	r2, [pc, #108]	; (800a358 <SPI_EndRxTxTransaction+0x80>)
 800a2ea:	fba2 2303 	umull	r2, r3, r2, r3
 800a2ee:	0d5b      	lsrs	r3, r3, #21
 800a2f0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a2f4:	fb02 f303 	mul.w	r3, r2, r3
 800a2f8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	685b      	ldr	r3, [r3, #4]
 800a2fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a302:	d112      	bne.n	800a32a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	9300      	str	r3, [sp, #0]
 800a308:	68bb      	ldr	r3, [r7, #8]
 800a30a:	2200      	movs	r2, #0
 800a30c:	2180      	movs	r1, #128	; 0x80
 800a30e:	68f8      	ldr	r0, [r7, #12]
 800a310:	f7ff ff77 	bl	800a202 <SPI_WaitFlagStateUntilTimeout>
 800a314:	4603      	mov	r3, r0
 800a316:	2b00      	cmp	r3, #0
 800a318:	d016      	beq.n	800a348 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a31e:	f043 0220 	orr.w	r2, r3, #32
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800a326:	2303      	movs	r3, #3
 800a328:	e00f      	b.n	800a34a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800a32a:	697b      	ldr	r3, [r7, #20]
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d00a      	beq.n	800a346 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800a330:	697b      	ldr	r3, [r7, #20]
 800a332:	3b01      	subs	r3, #1
 800a334:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	689b      	ldr	r3, [r3, #8]
 800a33c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a340:	2b80      	cmp	r3, #128	; 0x80
 800a342:	d0f2      	beq.n	800a32a <SPI_EndRxTxTransaction+0x52>
 800a344:	e000      	b.n	800a348 <SPI_EndRxTxTransaction+0x70>
        break;
 800a346:	bf00      	nop
  }

  return HAL_OK;
 800a348:	2300      	movs	r3, #0
}
 800a34a:	4618      	mov	r0, r3
 800a34c:	3718      	adds	r7, #24
 800a34e:	46bd      	mov	sp, r7
 800a350:	bd80      	pop	{r7, pc}
 800a352:	bf00      	nop
 800a354:	2000005c 	.word	0x2000005c
 800a358:	165e9f81 	.word	0x165e9f81

0800a35c <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 800a35c:	b580      	push	{r7, lr}
 800a35e:	b086      	sub	sp, #24
 800a360:	af00      	add	r7, sp, #0
 800a362:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 800a364:	4b35      	ldr	r3, [pc, #212]	; (800a43c <SPI_CloseRxTx_ISR+0xe0>)
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	4a35      	ldr	r2, [pc, #212]	; (800a440 <SPI_CloseRxTx_ISR+0xe4>)
 800a36a:	fba2 2303 	umull	r2, r3, r2, r3
 800a36e:	0a5b      	lsrs	r3, r3, #9
 800a370:	2264      	movs	r2, #100	; 0x64
 800a372:	fb02 f303 	mul.w	r3, r2, r3
 800a376:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800a378:	f7fc f964 	bl	8006644 <HAL_GetTick>
 800a37c:	6178      	str	r0, [r7, #20]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	685a      	ldr	r2, [r3, #4]
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	f022 0220 	bic.w	r2, r2, #32
 800a38c:	605a      	str	r2, [r3, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 800a38e:	693b      	ldr	r3, [r7, #16]
 800a390:	2b00      	cmp	r3, #0
 800a392:	d106      	bne.n	800a3a2 <SPI_CloseRxTx_ISR+0x46>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a398:	f043 0220 	orr.w	r2, r3, #32
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a3a0:	e009      	b.n	800a3b6 <SPI_CloseRxTx_ISR+0x5a>
    }
    count--;
 800a3a2:	693b      	ldr	r3, [r7, #16]
 800a3a4:	3b01      	subs	r3, #1
 800a3a6:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	689b      	ldr	r3, [r3, #8]
 800a3ae:	f003 0302 	and.w	r3, r3, #2
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d0eb      	beq.n	800a38e <SPI_CloseRxTx_ISR+0x32>

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800a3b6:	697a      	ldr	r2, [r7, #20]
 800a3b8:	2164      	movs	r1, #100	; 0x64
 800a3ba:	6878      	ldr	r0, [r7, #4]
 800a3bc:	f7ff ff8c 	bl	800a2d8 <SPI_EndRxTxTransaction>
 800a3c0:	4603      	mov	r3, r0
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d005      	beq.n	800a3d2 <SPI_CloseRxTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a3ca:	f043 0220 	orr.w	r2, r3, #32
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	689b      	ldr	r3, [r3, #8]
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d10a      	bne.n	800a3f0 <SPI_CloseRxTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a3da:	2300      	movs	r3, #0
 800a3dc:	60fb      	str	r3, [r7, #12]
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	68db      	ldr	r3, [r3, #12]
 800a3e4:	60fb      	str	r3, [r7, #12]
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	689b      	ldr	r3, [r3, #8]
 800a3ec:	60fb      	str	r3, [r7, #12]
 800a3ee:	68fb      	ldr	r3, [r7, #12]
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d115      	bne.n	800a424 <SPI_CloseRxTx_ISR+0xc8>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a3fe:	b2db      	uxtb	r3, r3
 800a400:	2b04      	cmp	r3, #4
 800a402:	d107      	bne.n	800a414 <SPI_CloseRxTx_ISR+0xb8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	2201      	movs	r2, #1
 800a408:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 800a40c:	6878      	ldr	r0, [r7, #4]
 800a40e:	f7ff fe0f 	bl	800a030 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 800a412:	e00e      	b.n	800a432 <SPI_CloseRxTx_ISR+0xd6>
        hspi->State = HAL_SPI_STATE_READY;
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	2201      	movs	r2, #1
 800a418:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        HAL_SPI_TxRxCpltCallback(hspi);
 800a41c:	6878      	ldr	r0, [r7, #4]
 800a41e:	f7f9 ff0d 	bl	800423c <HAL_SPI_TxRxCpltCallback>
}
 800a422:	e006      	b.n	800a432 <SPI_CloseRxTx_ISR+0xd6>
      hspi->State = HAL_SPI_STATE_READY;
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	2201      	movs	r2, #1
 800a428:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      HAL_SPI_ErrorCallback(hspi);
 800a42c:	6878      	ldr	r0, [r7, #4]
 800a42e:	f7ff fe09 	bl	800a044 <HAL_SPI_ErrorCallback>
}
 800a432:	bf00      	nop
 800a434:	3718      	adds	r7, #24
 800a436:	46bd      	mov	sp, r7
 800a438:	bd80      	pop	{r7, pc}
 800a43a:	bf00      	nop
 800a43c:	2000005c 	.word	0x2000005c
 800a440:	057619f1 	.word	0x057619f1

0800a444 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a444:	b580      	push	{r7, lr}
 800a446:	b082      	sub	sp, #8
 800a448:	af00      	add	r7, sp, #0
 800a44a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d101      	bne.n	800a456 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a452:	2301      	movs	r3, #1
 800a454:	e01d      	b.n	800a492 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a45c:	b2db      	uxtb	r3, r3
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d106      	bne.n	800a470 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	2200      	movs	r2, #0
 800a466:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a46a:	6878      	ldr	r0, [r7, #4]
 800a46c:	f7fb fe6c 	bl	8006148 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	2202      	movs	r2, #2
 800a474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	681a      	ldr	r2, [r3, #0]
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	3304      	adds	r3, #4
 800a480:	4619      	mov	r1, r3
 800a482:	4610      	mov	r0, r2
 800a484:	f000 fcc0 	bl	800ae08 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	2201      	movs	r2, #1
 800a48c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a490:	2300      	movs	r3, #0
}
 800a492:	4618      	mov	r0, r3
 800a494:	3708      	adds	r7, #8
 800a496:	46bd      	mov	sp, r7
 800a498:	bd80      	pop	{r7, pc}

0800a49a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a49a:	b480      	push	{r7}
 800a49c:	b085      	sub	sp, #20
 800a49e:	af00      	add	r7, sp, #0
 800a4a0:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	68da      	ldr	r2, [r3, #12]
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	f042 0201 	orr.w	r2, r2, #1
 800a4b0:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	689b      	ldr	r3, [r3, #8]
 800a4b8:	f003 0307 	and.w	r3, r3, #7
 800a4bc:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	2b06      	cmp	r3, #6
 800a4c2:	d007      	beq.n	800a4d4 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	681a      	ldr	r2, [r3, #0]
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	f042 0201 	orr.w	r2, r2, #1
 800a4d2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a4d4:	2300      	movs	r3, #0
}
 800a4d6:	4618      	mov	r0, r3
 800a4d8:	3714      	adds	r7, #20
 800a4da:	46bd      	mov	sp, r7
 800a4dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e0:	4770      	bx	lr

0800a4e2 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800a4e2:	b580      	push	{r7, lr}
 800a4e4:	b082      	sub	sp, #8
 800a4e6:	af00      	add	r7, sp, #0
 800a4e8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d101      	bne.n	800a4f4 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800a4f0:	2301      	movs	r3, #1
 800a4f2:	e01d      	b.n	800a530 <HAL_TIM_OC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a4fa:	b2db      	uxtb	r3, r3
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d106      	bne.n	800a50e <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	2200      	movs	r2, #0
 800a504:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800a508:	6878      	ldr	r0, [r7, #4]
 800a50a:	f7fb fdfb 	bl	8006104 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	2202      	movs	r2, #2
 800a512:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	681a      	ldr	r2, [r3, #0]
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	3304      	adds	r3, #4
 800a51e:	4619      	mov	r1, r3
 800a520:	4610      	mov	r0, r2
 800a522:	f000 fc71 	bl	800ae08 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	2201      	movs	r2, #1
 800a52a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a52e:	2300      	movs	r3, #0
}
 800a530:	4618      	mov	r0, r3
 800a532:	3708      	adds	r7, #8
 800a534:	46bd      	mov	sp, r7
 800a536:	bd80      	pop	{r7, pc}

0800a538 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a538:	b580      	push	{r7, lr}
 800a53a:	b084      	sub	sp, #16
 800a53c:	af00      	add	r7, sp, #0
 800a53e:	6078      	str	r0, [r7, #4]
 800a540:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	2201      	movs	r2, #1
 800a548:	6839      	ldr	r1, [r7, #0]
 800a54a:	4618      	mov	r0, r3
 800a54c:	f000 feac 	bl	800b2a8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	4a15      	ldr	r2, [pc, #84]	; (800a5ac <HAL_TIM_OC_Start+0x74>)
 800a556:	4293      	cmp	r3, r2
 800a558:	d004      	beq.n	800a564 <HAL_TIM_OC_Start+0x2c>
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	4a14      	ldr	r2, [pc, #80]	; (800a5b0 <HAL_TIM_OC_Start+0x78>)
 800a560:	4293      	cmp	r3, r2
 800a562:	d101      	bne.n	800a568 <HAL_TIM_OC_Start+0x30>
 800a564:	2301      	movs	r3, #1
 800a566:	e000      	b.n	800a56a <HAL_TIM_OC_Start+0x32>
 800a568:	2300      	movs	r3, #0
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d007      	beq.n	800a57e <HAL_TIM_OC_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a57c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	689b      	ldr	r3, [r3, #8]
 800a584:	f003 0307 	and.w	r3, r3, #7
 800a588:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	2b06      	cmp	r3, #6
 800a58e:	d007      	beq.n	800a5a0 <HAL_TIM_OC_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	681a      	ldr	r2, [r3, #0]
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	f042 0201 	orr.w	r2, r2, #1
 800a59e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a5a0:	2300      	movs	r3, #0
}
 800a5a2:	4618      	mov	r0, r3
 800a5a4:	3710      	adds	r7, #16
 800a5a6:	46bd      	mov	sp, r7
 800a5a8:	bd80      	pop	{r7, pc}
 800a5aa:	bf00      	nop
 800a5ac:	40010000 	.word	0x40010000
 800a5b0:	40010400 	.word	0x40010400

0800a5b4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a5b4:	b580      	push	{r7, lr}
 800a5b6:	b082      	sub	sp, #8
 800a5b8:	af00      	add	r7, sp, #0
 800a5ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d101      	bne.n	800a5c6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a5c2:	2301      	movs	r3, #1
 800a5c4:	e01d      	b.n	800a602 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a5cc:	b2db      	uxtb	r3, r3
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d106      	bne.n	800a5e0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	2200      	movs	r2, #0
 800a5d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a5da:	6878      	ldr	r0, [r7, #4]
 800a5dc:	f7fb fc92 	bl	8005f04 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	2202      	movs	r2, #2
 800a5e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	681a      	ldr	r2, [r3, #0]
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	3304      	adds	r3, #4
 800a5f0:	4619      	mov	r1, r3
 800a5f2:	4610      	mov	r0, r2
 800a5f4:	f000 fc08 	bl	800ae08 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	2201      	movs	r2, #1
 800a5fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a600:	2300      	movs	r3, #0
}
 800a602:	4618      	mov	r0, r3
 800a604:	3708      	adds	r7, #8
 800a606:	46bd      	mov	sp, r7
 800a608:	bd80      	pop	{r7, pc}
	...

0800a60c <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 800a60c:	b580      	push	{r7, lr}
 800a60e:	b086      	sub	sp, #24
 800a610:	af00      	add	r7, sp, #0
 800a612:	60f8      	str	r0, [r7, #12]
 800a614:	60b9      	str	r1, [r7, #8]
 800a616:	607a      	str	r2, [r7, #4]
 800a618:	807b      	strh	r3, [r7, #2]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  if (htim->State == HAL_TIM_STATE_BUSY)
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a620:	b2db      	uxtb	r3, r3
 800a622:	2b02      	cmp	r3, #2
 800a624:	d101      	bne.n	800a62a <HAL_TIM_PWM_Start_DMA+0x1e>
  {
    return HAL_BUSY;
 800a626:	2302      	movs	r3, #2
 800a628:	e0f3      	b.n	800a812 <HAL_TIM_PWM_Start_DMA+0x206>
  }
  else if (htim->State == HAL_TIM_STATE_READY)
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a630:	b2db      	uxtb	r3, r3
 800a632:	2b01      	cmp	r3, #1
 800a634:	d10b      	bne.n	800a64e <HAL_TIM_PWM_Start_DMA+0x42>
  {
    if ((pData == NULL) && (Length > 0U))
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d104      	bne.n	800a646 <HAL_TIM_PWM_Start_DMA+0x3a>
 800a63c:	887b      	ldrh	r3, [r7, #2]
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d001      	beq.n	800a646 <HAL_TIM_PWM_Start_DMA+0x3a>
    {
      return HAL_ERROR;
 800a642:	2301      	movs	r3, #1
 800a644:	e0e5      	b.n	800a812 <HAL_TIM_PWM_Start_DMA+0x206>
    }
    else
    {
      htim->State = HAL_TIM_STATE_BUSY;
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	2202      	movs	r2, #2
 800a64a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800a64e:	68bb      	ldr	r3, [r7, #8]
 800a650:	2b0c      	cmp	r3, #12
 800a652:	f200 80ad 	bhi.w	800a7b0 <HAL_TIM_PWM_Start_DMA+0x1a4>
 800a656:	a201      	add	r2, pc, #4	; (adr r2, 800a65c <HAL_TIM_PWM_Start_DMA+0x50>)
 800a658:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a65c:	0800a691 	.word	0x0800a691
 800a660:	0800a7b1 	.word	0x0800a7b1
 800a664:	0800a7b1 	.word	0x0800a7b1
 800a668:	0800a7b1 	.word	0x0800a7b1
 800a66c:	0800a6d9 	.word	0x0800a6d9
 800a670:	0800a7b1 	.word	0x0800a7b1
 800a674:	0800a7b1 	.word	0x0800a7b1
 800a678:	0800a7b1 	.word	0x0800a7b1
 800a67c:	0800a721 	.word	0x0800a721
 800a680:	0800a7b1 	.word	0x0800a7b1
 800a684:	0800a7b1 	.word	0x0800a7b1
 800a688:	0800a7b1 	.word	0x0800a7b1
 800a68c:	0800a769 	.word	0x0800a769
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a694:	4a61      	ldr	r2, [pc, #388]	; (800a81c <HAL_TIM_PWM_Start_DMA+0x210>)
 800a696:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a69c:	4a60      	ldr	r2, [pc, #384]	; (800a820 <HAL_TIM_PWM_Start_DMA+0x214>)
 800a69e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6a4:	4a5f      	ldr	r2, [pc, #380]	; (800a824 <HAL_TIM_PWM_Start_DMA+0x218>)
 800a6a6:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1, Length) != HAL_OK)
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800a6ac:	6879      	ldr	r1, [r7, #4]
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	3334      	adds	r3, #52	; 0x34
 800a6b4:	461a      	mov	r2, r3
 800a6b6:	887b      	ldrh	r3, [r7, #2]
 800a6b8:	f7fc fd6e 	bl	8007198 <HAL_DMA_Start_IT>
 800a6bc:	4603      	mov	r3, r0
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d001      	beq.n	800a6c6 <HAL_TIM_PWM_Start_DMA+0xba>
      {
        return HAL_ERROR;
 800a6c2:	2301      	movs	r3, #1
 800a6c4:	e0a5      	b.n	800a812 <HAL_TIM_PWM_Start_DMA+0x206>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	68da      	ldr	r2, [r3, #12]
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a6d4:	60da      	str	r2, [r3, #12]
      break;
 800a6d6:	e06c      	b.n	800a7b2 <HAL_TIM_PWM_Start_DMA+0x1a6>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6dc:	4a4f      	ldr	r2, [pc, #316]	; (800a81c <HAL_TIM_PWM_Start_DMA+0x210>)
 800a6de:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6e4:	4a4e      	ldr	r2, [pc, #312]	; (800a820 <HAL_TIM_PWM_Start_DMA+0x214>)
 800a6e6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6ec:	4a4d      	ldr	r2, [pc, #308]	; (800a824 <HAL_TIM_PWM_Start_DMA+0x218>)
 800a6ee:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2, Length) != HAL_OK)
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800a6f4:	6879      	ldr	r1, [r7, #4]
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	3338      	adds	r3, #56	; 0x38
 800a6fc:	461a      	mov	r2, r3
 800a6fe:	887b      	ldrh	r3, [r7, #2]
 800a700:	f7fc fd4a 	bl	8007198 <HAL_DMA_Start_IT>
 800a704:	4603      	mov	r3, r0
 800a706:	2b00      	cmp	r3, #0
 800a708:	d001      	beq.n	800a70e <HAL_TIM_PWM_Start_DMA+0x102>
      {
        return HAL_ERROR;
 800a70a:	2301      	movs	r3, #1
 800a70c:	e081      	b.n	800a812 <HAL_TIM_PWM_Start_DMA+0x206>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	68da      	ldr	r2, [r3, #12]
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a71c:	60da      	str	r2, [r3, #12]
      break;
 800a71e:	e048      	b.n	800a7b2 <HAL_TIM_PWM_Start_DMA+0x1a6>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a724:	4a3d      	ldr	r2, [pc, #244]	; (800a81c <HAL_TIM_PWM_Start_DMA+0x210>)
 800a726:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a72c:	4a3c      	ldr	r2, [pc, #240]	; (800a820 <HAL_TIM_PWM_Start_DMA+0x214>)
 800a72e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a734:	4a3b      	ldr	r2, [pc, #236]	; (800a824 <HAL_TIM_PWM_Start_DMA+0x218>)
 800a736:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3, Length) != HAL_OK)
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800a73c:	6879      	ldr	r1, [r7, #4]
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	333c      	adds	r3, #60	; 0x3c
 800a744:	461a      	mov	r2, r3
 800a746:	887b      	ldrh	r3, [r7, #2]
 800a748:	f7fc fd26 	bl	8007198 <HAL_DMA_Start_IT>
 800a74c:	4603      	mov	r3, r0
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d001      	beq.n	800a756 <HAL_TIM_PWM_Start_DMA+0x14a>
      {
        return HAL_ERROR;
 800a752:	2301      	movs	r3, #1
 800a754:	e05d      	b.n	800a812 <HAL_TIM_PWM_Start_DMA+0x206>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	68da      	ldr	r2, [r3, #12]
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a764:	60da      	str	r2, [r3, #12]
      break;
 800a766:	e024      	b.n	800a7b2 <HAL_TIM_PWM_Start_DMA+0x1a6>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a76c:	4a2b      	ldr	r2, [pc, #172]	; (800a81c <HAL_TIM_PWM_Start_DMA+0x210>)
 800a76e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a774:	4a2a      	ldr	r2, [pc, #168]	; (800a820 <HAL_TIM_PWM_Start_DMA+0x214>)
 800a776:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a77c:	4a29      	ldr	r2, [pc, #164]	; (800a824 <HAL_TIM_PWM_Start_DMA+0x218>)
 800a77e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4, Length) != HAL_OK)
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800a784:	6879      	ldr	r1, [r7, #4]
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	3340      	adds	r3, #64	; 0x40
 800a78c:	461a      	mov	r2, r3
 800a78e:	887b      	ldrh	r3, [r7, #2]
 800a790:	f7fc fd02 	bl	8007198 <HAL_DMA_Start_IT>
 800a794:	4603      	mov	r3, r0
 800a796:	2b00      	cmp	r3, #0
 800a798:	d001      	beq.n	800a79e <HAL_TIM_PWM_Start_DMA+0x192>
      {
        return HAL_ERROR;
 800a79a:	2301      	movs	r3, #1
 800a79c:	e039      	b.n	800a812 <HAL_TIM_PWM_Start_DMA+0x206>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	68da      	ldr	r2, [r3, #12]
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800a7ac:	60da      	str	r2, [r3, #12]
      break;
 800a7ae:	e000      	b.n	800a7b2 <HAL_TIM_PWM_Start_DMA+0x1a6>
    }

    default:
      break;
 800a7b0:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	2201      	movs	r2, #1
 800a7b8:	68b9      	ldr	r1, [r7, #8]
 800a7ba:	4618      	mov	r0, r3
 800a7bc:	f000 fd74 	bl	800b2a8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	4a18      	ldr	r2, [pc, #96]	; (800a828 <HAL_TIM_PWM_Start_DMA+0x21c>)
 800a7c6:	4293      	cmp	r3, r2
 800a7c8:	d004      	beq.n	800a7d4 <HAL_TIM_PWM_Start_DMA+0x1c8>
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	4a17      	ldr	r2, [pc, #92]	; (800a82c <HAL_TIM_PWM_Start_DMA+0x220>)
 800a7d0:	4293      	cmp	r3, r2
 800a7d2:	d101      	bne.n	800a7d8 <HAL_TIM_PWM_Start_DMA+0x1cc>
 800a7d4:	2301      	movs	r3, #1
 800a7d6:	e000      	b.n	800a7da <HAL_TIM_PWM_Start_DMA+0x1ce>
 800a7d8:	2300      	movs	r3, #0
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d007      	beq.n	800a7ee <HAL_TIM_PWM_Start_DMA+0x1e2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a7ec:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	689b      	ldr	r3, [r3, #8]
 800a7f4:	f003 0307 	and.w	r3, r3, #7
 800a7f8:	617b      	str	r3, [r7, #20]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a7fa:	697b      	ldr	r3, [r7, #20]
 800a7fc:	2b06      	cmp	r3, #6
 800a7fe:	d007      	beq.n	800a810 <HAL_TIM_PWM_Start_DMA+0x204>
  {
    __HAL_TIM_ENABLE(htim);
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	681a      	ldr	r2, [r3, #0]
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	f042 0201 	orr.w	r2, r2, #1
 800a80e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a810:	2300      	movs	r3, #0
}
 800a812:	4618      	mov	r0, r3
 800a814:	3718      	adds	r7, #24
 800a816:	46bd      	mov	sp, r7
 800a818:	bd80      	pop	{r7, pc}
 800a81a:	bf00      	nop
 800a81c:	0800ad29 	.word	0x0800ad29
 800a820:	0800ad99 	.word	0x0800ad99
 800a824:	0800ad05 	.word	0x0800ad05
 800a828:	40010000 	.word	0x40010000
 800a82c:	40010400 	.word	0x40010400

0800a830 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a830:	b580      	push	{r7, lr}
 800a832:	b082      	sub	sp, #8
 800a834:	af00      	add	r7, sp, #0
 800a836:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	691b      	ldr	r3, [r3, #16]
 800a83e:	f003 0302 	and.w	r3, r3, #2
 800a842:	2b02      	cmp	r3, #2
 800a844:	d122      	bne.n	800a88c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	68db      	ldr	r3, [r3, #12]
 800a84c:	f003 0302 	and.w	r3, r3, #2
 800a850:	2b02      	cmp	r3, #2
 800a852:	d11b      	bne.n	800a88c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	f06f 0202 	mvn.w	r2, #2
 800a85c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	2201      	movs	r2, #1
 800a862:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	699b      	ldr	r3, [r3, #24]
 800a86a:	f003 0303 	and.w	r3, r3, #3
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d003      	beq.n	800a87a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a872:	6878      	ldr	r0, [r7, #4]
 800a874:	f000 fa14 	bl	800aca0 <HAL_TIM_IC_CaptureCallback>
 800a878:	e005      	b.n	800a886 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a87a:	6878      	ldr	r0, [r7, #4]
 800a87c:	f000 fa06 	bl	800ac8c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a880:	6878      	ldr	r0, [r7, #4]
 800a882:	f000 fa17 	bl	800acb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	2200      	movs	r2, #0
 800a88a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	691b      	ldr	r3, [r3, #16]
 800a892:	f003 0304 	and.w	r3, r3, #4
 800a896:	2b04      	cmp	r3, #4
 800a898:	d122      	bne.n	800a8e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	68db      	ldr	r3, [r3, #12]
 800a8a0:	f003 0304 	and.w	r3, r3, #4
 800a8a4:	2b04      	cmp	r3, #4
 800a8a6:	d11b      	bne.n	800a8e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	f06f 0204 	mvn.w	r2, #4
 800a8b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	2202      	movs	r2, #2
 800a8b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	699b      	ldr	r3, [r3, #24]
 800a8be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d003      	beq.n	800a8ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a8c6:	6878      	ldr	r0, [r7, #4]
 800a8c8:	f000 f9ea 	bl	800aca0 <HAL_TIM_IC_CaptureCallback>
 800a8cc:	e005      	b.n	800a8da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a8ce:	6878      	ldr	r0, [r7, #4]
 800a8d0:	f000 f9dc 	bl	800ac8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a8d4:	6878      	ldr	r0, [r7, #4]
 800a8d6:	f000 f9ed 	bl	800acb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	2200      	movs	r2, #0
 800a8de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	691b      	ldr	r3, [r3, #16]
 800a8e6:	f003 0308 	and.w	r3, r3, #8
 800a8ea:	2b08      	cmp	r3, #8
 800a8ec:	d122      	bne.n	800a934 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	68db      	ldr	r3, [r3, #12]
 800a8f4:	f003 0308 	and.w	r3, r3, #8
 800a8f8:	2b08      	cmp	r3, #8
 800a8fa:	d11b      	bne.n	800a934 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	f06f 0208 	mvn.w	r2, #8
 800a904:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	2204      	movs	r2, #4
 800a90a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	69db      	ldr	r3, [r3, #28]
 800a912:	f003 0303 	and.w	r3, r3, #3
 800a916:	2b00      	cmp	r3, #0
 800a918:	d003      	beq.n	800a922 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a91a:	6878      	ldr	r0, [r7, #4]
 800a91c:	f000 f9c0 	bl	800aca0 <HAL_TIM_IC_CaptureCallback>
 800a920:	e005      	b.n	800a92e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a922:	6878      	ldr	r0, [r7, #4]
 800a924:	f000 f9b2 	bl	800ac8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a928:	6878      	ldr	r0, [r7, #4]
 800a92a:	f000 f9c3 	bl	800acb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	2200      	movs	r2, #0
 800a932:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	691b      	ldr	r3, [r3, #16]
 800a93a:	f003 0310 	and.w	r3, r3, #16
 800a93e:	2b10      	cmp	r3, #16
 800a940:	d122      	bne.n	800a988 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	68db      	ldr	r3, [r3, #12]
 800a948:	f003 0310 	and.w	r3, r3, #16
 800a94c:	2b10      	cmp	r3, #16
 800a94e:	d11b      	bne.n	800a988 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	f06f 0210 	mvn.w	r2, #16
 800a958:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	2208      	movs	r2, #8
 800a95e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	69db      	ldr	r3, [r3, #28]
 800a966:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d003      	beq.n	800a976 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a96e:	6878      	ldr	r0, [r7, #4]
 800a970:	f000 f996 	bl	800aca0 <HAL_TIM_IC_CaptureCallback>
 800a974:	e005      	b.n	800a982 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a976:	6878      	ldr	r0, [r7, #4]
 800a978:	f000 f988 	bl	800ac8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a97c:	6878      	ldr	r0, [r7, #4]
 800a97e:	f000 f999 	bl	800acb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	2200      	movs	r2, #0
 800a986:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	691b      	ldr	r3, [r3, #16]
 800a98e:	f003 0301 	and.w	r3, r3, #1
 800a992:	2b01      	cmp	r3, #1
 800a994:	d10e      	bne.n	800a9b4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	68db      	ldr	r3, [r3, #12]
 800a99c:	f003 0301 	and.w	r3, r3, #1
 800a9a0:	2b01      	cmp	r3, #1
 800a9a2:	d107      	bne.n	800a9b4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	f06f 0201 	mvn.w	r2, #1
 800a9ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a9ae:	6878      	ldr	r0, [r7, #4]
 800a9b0:	f7f9 fcaa 	bl	8004308 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	691b      	ldr	r3, [r3, #16]
 800a9ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a9be:	2b80      	cmp	r3, #128	; 0x80
 800a9c0:	d10e      	bne.n	800a9e0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	68db      	ldr	r3, [r3, #12]
 800a9c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a9cc:	2b80      	cmp	r3, #128	; 0x80
 800a9ce:	d107      	bne.n	800a9e0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a9d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a9da:	6878      	ldr	r0, [r7, #4]
 800a9dc:	f000 fd10 	bl	800b400 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	691b      	ldr	r3, [r3, #16]
 800a9e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a9ea:	2b40      	cmp	r3, #64	; 0x40
 800a9ec:	d10e      	bne.n	800aa0c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	68db      	ldr	r3, [r3, #12]
 800a9f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a9f8:	2b40      	cmp	r3, #64	; 0x40
 800a9fa:	d107      	bne.n	800aa0c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800aa04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800aa06:	6878      	ldr	r0, [r7, #4]
 800aa08:	f000 f968 	bl	800acdc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	691b      	ldr	r3, [r3, #16]
 800aa12:	f003 0320 	and.w	r3, r3, #32
 800aa16:	2b20      	cmp	r3, #32
 800aa18:	d10e      	bne.n	800aa38 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	68db      	ldr	r3, [r3, #12]
 800aa20:	f003 0320 	and.w	r3, r3, #32
 800aa24:	2b20      	cmp	r3, #32
 800aa26:	d107      	bne.n	800aa38 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	f06f 0220 	mvn.w	r2, #32
 800aa30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800aa32:	6878      	ldr	r0, [r7, #4]
 800aa34:	f000 fcda 	bl	800b3ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800aa38:	bf00      	nop
 800aa3a:	3708      	adds	r7, #8
 800aa3c:	46bd      	mov	sp, r7
 800aa3e:	bd80      	pop	{r7, pc}

0800aa40 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800aa40:	b580      	push	{r7, lr}
 800aa42:	b084      	sub	sp, #16
 800aa44:	af00      	add	r7, sp, #0
 800aa46:	60f8      	str	r0, [r7, #12]
 800aa48:	60b9      	str	r1, [r7, #8]
 800aa4a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800aa52:	2b01      	cmp	r3, #1
 800aa54:	d101      	bne.n	800aa5a <HAL_TIM_OC_ConfigChannel+0x1a>
 800aa56:	2302      	movs	r3, #2
 800aa58:	e04e      	b.n	800aaf8 <HAL_TIM_OC_ConfigChannel+0xb8>
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	2201      	movs	r2, #1
 800aa5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	2202      	movs	r2, #2
 800aa66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	2b0c      	cmp	r3, #12
 800aa6e:	d839      	bhi.n	800aae4 <HAL_TIM_OC_ConfigChannel+0xa4>
 800aa70:	a201      	add	r2, pc, #4	; (adr r2, 800aa78 <HAL_TIM_OC_ConfigChannel+0x38>)
 800aa72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa76:	bf00      	nop
 800aa78:	0800aaad 	.word	0x0800aaad
 800aa7c:	0800aae5 	.word	0x0800aae5
 800aa80:	0800aae5 	.word	0x0800aae5
 800aa84:	0800aae5 	.word	0x0800aae5
 800aa88:	0800aabb 	.word	0x0800aabb
 800aa8c:	0800aae5 	.word	0x0800aae5
 800aa90:	0800aae5 	.word	0x0800aae5
 800aa94:	0800aae5 	.word	0x0800aae5
 800aa98:	0800aac9 	.word	0x0800aac9
 800aa9c:	0800aae5 	.word	0x0800aae5
 800aaa0:	0800aae5 	.word	0x0800aae5
 800aaa4:	0800aae5 	.word	0x0800aae5
 800aaa8:	0800aad7 	.word	0x0800aad7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	68b9      	ldr	r1, [r7, #8]
 800aab2:	4618      	mov	r0, r3
 800aab4:	f000 fa48 	bl	800af48 <TIM_OC1_SetConfig>
      break;
 800aab8:	e015      	b.n	800aae6 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	68b9      	ldr	r1, [r7, #8]
 800aac0:	4618      	mov	r0, r3
 800aac2:	f000 fab1 	bl	800b028 <TIM_OC2_SetConfig>
      break;
 800aac6:	e00e      	b.n	800aae6 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	68b9      	ldr	r1, [r7, #8]
 800aace:	4618      	mov	r0, r3
 800aad0:	f000 fb20 	bl	800b114 <TIM_OC3_SetConfig>
      break;
 800aad4:	e007      	b.n	800aae6 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	68b9      	ldr	r1, [r7, #8]
 800aadc:	4618      	mov	r0, r3
 800aade:	f000 fb8d 	bl	800b1fc <TIM_OC4_SetConfig>
      break;
 800aae2:	e000      	b.n	800aae6 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      break;
 800aae4:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	2201      	movs	r2, #1
 800aaea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	2200      	movs	r2, #0
 800aaf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800aaf6:	2300      	movs	r3, #0
}
 800aaf8:	4618      	mov	r0, r3
 800aafa:	3710      	adds	r7, #16
 800aafc:	46bd      	mov	sp, r7
 800aafe:	bd80      	pop	{r7, pc}

0800ab00 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800ab00:	b580      	push	{r7, lr}
 800ab02:	b084      	sub	sp, #16
 800ab04:	af00      	add	r7, sp, #0
 800ab06:	60f8      	str	r0, [r7, #12]
 800ab08:	60b9      	str	r1, [r7, #8]
 800ab0a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ab12:	2b01      	cmp	r3, #1
 800ab14:	d101      	bne.n	800ab1a <HAL_TIM_PWM_ConfigChannel+0x1a>
 800ab16:	2302      	movs	r3, #2
 800ab18:	e0b4      	b.n	800ac84 <HAL_TIM_PWM_ConfigChannel+0x184>
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	2201      	movs	r2, #1
 800ab1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	2202      	movs	r2, #2
 800ab26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	2b0c      	cmp	r3, #12
 800ab2e:	f200 809f 	bhi.w	800ac70 <HAL_TIM_PWM_ConfigChannel+0x170>
 800ab32:	a201      	add	r2, pc, #4	; (adr r2, 800ab38 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800ab34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab38:	0800ab6d 	.word	0x0800ab6d
 800ab3c:	0800ac71 	.word	0x0800ac71
 800ab40:	0800ac71 	.word	0x0800ac71
 800ab44:	0800ac71 	.word	0x0800ac71
 800ab48:	0800abad 	.word	0x0800abad
 800ab4c:	0800ac71 	.word	0x0800ac71
 800ab50:	0800ac71 	.word	0x0800ac71
 800ab54:	0800ac71 	.word	0x0800ac71
 800ab58:	0800abef 	.word	0x0800abef
 800ab5c:	0800ac71 	.word	0x0800ac71
 800ab60:	0800ac71 	.word	0x0800ac71
 800ab64:	0800ac71 	.word	0x0800ac71
 800ab68:	0800ac2f 	.word	0x0800ac2f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	68b9      	ldr	r1, [r7, #8]
 800ab72:	4618      	mov	r0, r3
 800ab74:	f000 f9e8 	bl	800af48 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	699a      	ldr	r2, [r3, #24]
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	f042 0208 	orr.w	r2, r2, #8
 800ab86:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	699a      	ldr	r2, [r3, #24]
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	f022 0204 	bic.w	r2, r2, #4
 800ab96:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	6999      	ldr	r1, [r3, #24]
 800ab9e:	68bb      	ldr	r3, [r7, #8]
 800aba0:	691a      	ldr	r2, [r3, #16]
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	430a      	orrs	r2, r1
 800aba8:	619a      	str	r2, [r3, #24]
      break;
 800abaa:	e062      	b.n	800ac72 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	68b9      	ldr	r1, [r7, #8]
 800abb2:	4618      	mov	r0, r3
 800abb4:	f000 fa38 	bl	800b028 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	699a      	ldr	r2, [r3, #24]
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800abc6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	699a      	ldr	r2, [r3, #24]
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800abd6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	6999      	ldr	r1, [r3, #24]
 800abde:	68bb      	ldr	r3, [r7, #8]
 800abe0:	691b      	ldr	r3, [r3, #16]
 800abe2:	021a      	lsls	r2, r3, #8
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	430a      	orrs	r2, r1
 800abea:	619a      	str	r2, [r3, #24]
      break;
 800abec:	e041      	b.n	800ac72 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	68b9      	ldr	r1, [r7, #8]
 800abf4:	4618      	mov	r0, r3
 800abf6:	f000 fa8d 	bl	800b114 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	69da      	ldr	r2, [r3, #28]
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	f042 0208 	orr.w	r2, r2, #8
 800ac08:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	69da      	ldr	r2, [r3, #28]
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	f022 0204 	bic.w	r2, r2, #4
 800ac18:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	69d9      	ldr	r1, [r3, #28]
 800ac20:	68bb      	ldr	r3, [r7, #8]
 800ac22:	691a      	ldr	r2, [r3, #16]
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	430a      	orrs	r2, r1
 800ac2a:	61da      	str	r2, [r3, #28]
      break;
 800ac2c:	e021      	b.n	800ac72 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	68b9      	ldr	r1, [r7, #8]
 800ac34:	4618      	mov	r0, r3
 800ac36:	f000 fae1 	bl	800b1fc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	69da      	ldr	r2, [r3, #28]
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ac48:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	69da      	ldr	r2, [r3, #28]
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ac58:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	69d9      	ldr	r1, [r3, #28]
 800ac60:	68bb      	ldr	r3, [r7, #8]
 800ac62:	691b      	ldr	r3, [r3, #16]
 800ac64:	021a      	lsls	r2, r3, #8
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	430a      	orrs	r2, r1
 800ac6c:	61da      	str	r2, [r3, #28]
      break;
 800ac6e:	e000      	b.n	800ac72 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800ac70:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	2201      	movs	r2, #1
 800ac76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	2200      	movs	r2, #0
 800ac7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ac82:	2300      	movs	r3, #0
}
 800ac84:	4618      	mov	r0, r3
 800ac86:	3710      	adds	r7, #16
 800ac88:	46bd      	mov	sp, r7
 800ac8a:	bd80      	pop	{r7, pc}

0800ac8c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ac8c:	b480      	push	{r7}
 800ac8e:	b083      	sub	sp, #12
 800ac90:	af00      	add	r7, sp, #0
 800ac92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ac94:	bf00      	nop
 800ac96:	370c      	adds	r7, #12
 800ac98:	46bd      	mov	sp, r7
 800ac9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac9e:	4770      	bx	lr

0800aca0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800aca0:	b480      	push	{r7}
 800aca2:	b083      	sub	sp, #12
 800aca4:	af00      	add	r7, sp, #0
 800aca6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800aca8:	bf00      	nop
 800acaa:	370c      	adds	r7, #12
 800acac:	46bd      	mov	sp, r7
 800acae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acb2:	4770      	bx	lr

0800acb4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800acb4:	b480      	push	{r7}
 800acb6:	b083      	sub	sp, #12
 800acb8:	af00      	add	r7, sp, #0
 800acba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800acbc:	bf00      	nop
 800acbe:	370c      	adds	r7, #12
 800acc0:	46bd      	mov	sp, r7
 800acc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acc6:	4770      	bx	lr

0800acc8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800acc8:	b480      	push	{r7}
 800acca:	b083      	sub	sp, #12
 800accc:	af00      	add	r7, sp, #0
 800acce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800acd0:	bf00      	nop
 800acd2:	370c      	adds	r7, #12
 800acd4:	46bd      	mov	sp, r7
 800acd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acda:	4770      	bx	lr

0800acdc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800acdc:	b480      	push	{r7}
 800acde:	b083      	sub	sp, #12
 800ace0:	af00      	add	r7, sp, #0
 800ace2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ace4:	bf00      	nop
 800ace6:	370c      	adds	r7, #12
 800ace8:	46bd      	mov	sp, r7
 800acea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acee:	4770      	bx	lr

0800acf0 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800acf0:	b480      	push	{r7}
 800acf2:	b083      	sub	sp, #12
 800acf4:	af00      	add	r7, sp, #0
 800acf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800acf8:	bf00      	nop
 800acfa:	370c      	adds	r7, #12
 800acfc:	46bd      	mov	sp, r7
 800acfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad02:	4770      	bx	lr

0800ad04 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800ad04:	b580      	push	{r7, lr}
 800ad06:	b084      	sub	sp, #16
 800ad08:	af00      	add	r7, sp, #0
 800ad0a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad10:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	2201      	movs	r2, #1
 800ad16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800ad1a:	68f8      	ldr	r0, [r7, #12]
 800ad1c:	f7ff ffe8 	bl	800acf0 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
}
 800ad20:	bf00      	nop
 800ad22:	3710      	adds	r7, #16
 800ad24:	46bd      	mov	sp, r7
 800ad26:	bd80      	pop	{r7, pc}

0800ad28 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 800ad28:	b580      	push	{r7, lr}
 800ad2a:	b084      	sub	sp, #16
 800ad2c:	af00      	add	r7, sp, #0
 800ad2e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad34:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	2201      	movs	r2, #1
 800ad3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad42:	687a      	ldr	r2, [r7, #4]
 800ad44:	429a      	cmp	r2, r3
 800ad46:	d103      	bne.n	800ad50 <TIM_DMADelayPulseCplt+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	2201      	movs	r2, #1
 800ad4c:	771a      	strb	r2, [r3, #28]
 800ad4e:	e019      	b.n	800ad84 <TIM_DMADelayPulseCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad54:	687a      	ldr	r2, [r7, #4]
 800ad56:	429a      	cmp	r2, r3
 800ad58:	d103      	bne.n	800ad62 <TIM_DMADelayPulseCplt+0x3a>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	2202      	movs	r2, #2
 800ad5e:	771a      	strb	r2, [r3, #28]
 800ad60:	e010      	b.n	800ad84 <TIM_DMADelayPulseCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad66:	687a      	ldr	r2, [r7, #4]
 800ad68:	429a      	cmp	r2, r3
 800ad6a:	d103      	bne.n	800ad74 <TIM_DMADelayPulseCplt+0x4c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	2204      	movs	r2, #4
 800ad70:	771a      	strb	r2, [r3, #28]
 800ad72:	e007      	b.n	800ad84 <TIM_DMADelayPulseCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad78:	687a      	ldr	r2, [r7, #4]
 800ad7a:	429a      	cmp	r2, r3
 800ad7c:	d102      	bne.n	800ad84 <TIM_DMADelayPulseCplt+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	2208      	movs	r2, #8
 800ad82:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ad84:	68f8      	ldr	r0, [r7, #12]
 800ad86:	f7ff ff95 	bl	800acb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	2200      	movs	r2, #0
 800ad8e:	771a      	strb	r2, [r3, #28]
}
 800ad90:	bf00      	nop
 800ad92:	3710      	adds	r7, #16
 800ad94:	46bd      	mov	sp, r7
 800ad96:	bd80      	pop	{r7, pc}

0800ad98 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ad98:	b580      	push	{r7, lr}
 800ad9a:	b084      	sub	sp, #16
 800ad9c:	af00      	add	r7, sp, #0
 800ad9e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ada4:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	2201      	movs	r2, #1
 800adaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adb2:	687a      	ldr	r2, [r7, #4]
 800adb4:	429a      	cmp	r2, r3
 800adb6:	d103      	bne.n	800adc0 <TIM_DMADelayPulseHalfCplt+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	2201      	movs	r2, #1
 800adbc:	771a      	strb	r2, [r3, #28]
 800adbe:	e019      	b.n	800adf4 <TIM_DMADelayPulseHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800adc4:	687a      	ldr	r2, [r7, #4]
 800adc6:	429a      	cmp	r2, r3
 800adc8:	d103      	bne.n	800add2 <TIM_DMADelayPulseHalfCplt+0x3a>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	2202      	movs	r2, #2
 800adce:	771a      	strb	r2, [r3, #28]
 800add0:	e010      	b.n	800adf4 <TIM_DMADelayPulseHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800add6:	687a      	ldr	r2, [r7, #4]
 800add8:	429a      	cmp	r2, r3
 800adda:	d103      	bne.n	800ade4 <TIM_DMADelayPulseHalfCplt+0x4c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	2204      	movs	r2, #4
 800ade0:	771a      	strb	r2, [r3, #28]
 800ade2:	e007      	b.n	800adf4 <TIM_DMADelayPulseHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ade8:	687a      	ldr	r2, [r7, #4]
 800adea:	429a      	cmp	r2, r3
 800adec:	d102      	bne.n	800adf4 <TIM_DMADelayPulseHalfCplt+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	2208      	movs	r2, #8
 800adf2:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 800adf4:	68f8      	ldr	r0, [r7, #12]
 800adf6:	f7ff ff67 	bl	800acc8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	2200      	movs	r2, #0
 800adfe:	771a      	strb	r2, [r3, #28]
}
 800ae00:	bf00      	nop
 800ae02:	3710      	adds	r7, #16
 800ae04:	46bd      	mov	sp, r7
 800ae06:	bd80      	pop	{r7, pc}

0800ae08 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800ae08:	b480      	push	{r7}
 800ae0a:	b085      	sub	sp, #20
 800ae0c:	af00      	add	r7, sp, #0
 800ae0e:	6078      	str	r0, [r7, #4]
 800ae10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	4a40      	ldr	r2, [pc, #256]	; (800af1c <TIM_Base_SetConfig+0x114>)
 800ae1c:	4293      	cmp	r3, r2
 800ae1e:	d013      	beq.n	800ae48 <TIM_Base_SetConfig+0x40>
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ae26:	d00f      	beq.n	800ae48 <TIM_Base_SetConfig+0x40>
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	4a3d      	ldr	r2, [pc, #244]	; (800af20 <TIM_Base_SetConfig+0x118>)
 800ae2c:	4293      	cmp	r3, r2
 800ae2e:	d00b      	beq.n	800ae48 <TIM_Base_SetConfig+0x40>
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	4a3c      	ldr	r2, [pc, #240]	; (800af24 <TIM_Base_SetConfig+0x11c>)
 800ae34:	4293      	cmp	r3, r2
 800ae36:	d007      	beq.n	800ae48 <TIM_Base_SetConfig+0x40>
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	4a3b      	ldr	r2, [pc, #236]	; (800af28 <TIM_Base_SetConfig+0x120>)
 800ae3c:	4293      	cmp	r3, r2
 800ae3e:	d003      	beq.n	800ae48 <TIM_Base_SetConfig+0x40>
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	4a3a      	ldr	r2, [pc, #232]	; (800af2c <TIM_Base_SetConfig+0x124>)
 800ae44:	4293      	cmp	r3, r2
 800ae46:	d108      	bne.n	800ae5a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ae4e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ae50:	683b      	ldr	r3, [r7, #0]
 800ae52:	685b      	ldr	r3, [r3, #4]
 800ae54:	68fa      	ldr	r2, [r7, #12]
 800ae56:	4313      	orrs	r3, r2
 800ae58:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	4a2f      	ldr	r2, [pc, #188]	; (800af1c <TIM_Base_SetConfig+0x114>)
 800ae5e:	4293      	cmp	r3, r2
 800ae60:	d02b      	beq.n	800aeba <TIM_Base_SetConfig+0xb2>
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ae68:	d027      	beq.n	800aeba <TIM_Base_SetConfig+0xb2>
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	4a2c      	ldr	r2, [pc, #176]	; (800af20 <TIM_Base_SetConfig+0x118>)
 800ae6e:	4293      	cmp	r3, r2
 800ae70:	d023      	beq.n	800aeba <TIM_Base_SetConfig+0xb2>
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	4a2b      	ldr	r2, [pc, #172]	; (800af24 <TIM_Base_SetConfig+0x11c>)
 800ae76:	4293      	cmp	r3, r2
 800ae78:	d01f      	beq.n	800aeba <TIM_Base_SetConfig+0xb2>
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	4a2a      	ldr	r2, [pc, #168]	; (800af28 <TIM_Base_SetConfig+0x120>)
 800ae7e:	4293      	cmp	r3, r2
 800ae80:	d01b      	beq.n	800aeba <TIM_Base_SetConfig+0xb2>
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	4a29      	ldr	r2, [pc, #164]	; (800af2c <TIM_Base_SetConfig+0x124>)
 800ae86:	4293      	cmp	r3, r2
 800ae88:	d017      	beq.n	800aeba <TIM_Base_SetConfig+0xb2>
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	4a28      	ldr	r2, [pc, #160]	; (800af30 <TIM_Base_SetConfig+0x128>)
 800ae8e:	4293      	cmp	r3, r2
 800ae90:	d013      	beq.n	800aeba <TIM_Base_SetConfig+0xb2>
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	4a27      	ldr	r2, [pc, #156]	; (800af34 <TIM_Base_SetConfig+0x12c>)
 800ae96:	4293      	cmp	r3, r2
 800ae98:	d00f      	beq.n	800aeba <TIM_Base_SetConfig+0xb2>
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	4a26      	ldr	r2, [pc, #152]	; (800af38 <TIM_Base_SetConfig+0x130>)
 800ae9e:	4293      	cmp	r3, r2
 800aea0:	d00b      	beq.n	800aeba <TIM_Base_SetConfig+0xb2>
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	4a25      	ldr	r2, [pc, #148]	; (800af3c <TIM_Base_SetConfig+0x134>)
 800aea6:	4293      	cmp	r3, r2
 800aea8:	d007      	beq.n	800aeba <TIM_Base_SetConfig+0xb2>
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	4a24      	ldr	r2, [pc, #144]	; (800af40 <TIM_Base_SetConfig+0x138>)
 800aeae:	4293      	cmp	r3, r2
 800aeb0:	d003      	beq.n	800aeba <TIM_Base_SetConfig+0xb2>
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	4a23      	ldr	r2, [pc, #140]	; (800af44 <TIM_Base_SetConfig+0x13c>)
 800aeb6:	4293      	cmp	r3, r2
 800aeb8:	d108      	bne.n	800aecc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800aec0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800aec2:	683b      	ldr	r3, [r7, #0]
 800aec4:	68db      	ldr	r3, [r3, #12]
 800aec6:	68fa      	ldr	r2, [r7, #12]
 800aec8:	4313      	orrs	r3, r2
 800aeca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800aed2:	683b      	ldr	r3, [r7, #0]
 800aed4:	695b      	ldr	r3, [r3, #20]
 800aed6:	4313      	orrs	r3, r2
 800aed8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	68fa      	ldr	r2, [r7, #12]
 800aede:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800aee0:	683b      	ldr	r3, [r7, #0]
 800aee2:	689a      	ldr	r2, [r3, #8]
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800aee8:	683b      	ldr	r3, [r7, #0]
 800aeea:	681a      	ldr	r2, [r3, #0]
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	4a0a      	ldr	r2, [pc, #40]	; (800af1c <TIM_Base_SetConfig+0x114>)
 800aef4:	4293      	cmp	r3, r2
 800aef6:	d003      	beq.n	800af00 <TIM_Base_SetConfig+0xf8>
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	4a0c      	ldr	r2, [pc, #48]	; (800af2c <TIM_Base_SetConfig+0x124>)
 800aefc:	4293      	cmp	r3, r2
 800aefe:	d103      	bne.n	800af08 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800af00:	683b      	ldr	r3, [r7, #0]
 800af02:	691a      	ldr	r2, [r3, #16]
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	2201      	movs	r2, #1
 800af0c:	615a      	str	r2, [r3, #20]
}
 800af0e:	bf00      	nop
 800af10:	3714      	adds	r7, #20
 800af12:	46bd      	mov	sp, r7
 800af14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af18:	4770      	bx	lr
 800af1a:	bf00      	nop
 800af1c:	40010000 	.word	0x40010000
 800af20:	40000400 	.word	0x40000400
 800af24:	40000800 	.word	0x40000800
 800af28:	40000c00 	.word	0x40000c00
 800af2c:	40010400 	.word	0x40010400
 800af30:	40014000 	.word	0x40014000
 800af34:	40014400 	.word	0x40014400
 800af38:	40014800 	.word	0x40014800
 800af3c:	40001800 	.word	0x40001800
 800af40:	40001c00 	.word	0x40001c00
 800af44:	40002000 	.word	0x40002000

0800af48 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800af48:	b480      	push	{r7}
 800af4a:	b087      	sub	sp, #28
 800af4c:	af00      	add	r7, sp, #0
 800af4e:	6078      	str	r0, [r7, #4]
 800af50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	6a1b      	ldr	r3, [r3, #32]
 800af56:	f023 0201 	bic.w	r2, r3, #1
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	6a1b      	ldr	r3, [r3, #32]
 800af62:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	685b      	ldr	r3, [r3, #4]
 800af68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	699b      	ldr	r3, [r3, #24]
 800af6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800af76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	f023 0303 	bic.w	r3, r3, #3
 800af7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800af80:	683b      	ldr	r3, [r7, #0]
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	68fa      	ldr	r2, [r7, #12]
 800af86:	4313      	orrs	r3, r2
 800af88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800af8a:	697b      	ldr	r3, [r7, #20]
 800af8c:	f023 0302 	bic.w	r3, r3, #2
 800af90:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800af92:	683b      	ldr	r3, [r7, #0]
 800af94:	689b      	ldr	r3, [r3, #8]
 800af96:	697a      	ldr	r2, [r7, #20]
 800af98:	4313      	orrs	r3, r2
 800af9a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	4a20      	ldr	r2, [pc, #128]	; (800b020 <TIM_OC1_SetConfig+0xd8>)
 800afa0:	4293      	cmp	r3, r2
 800afa2:	d003      	beq.n	800afac <TIM_OC1_SetConfig+0x64>
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	4a1f      	ldr	r2, [pc, #124]	; (800b024 <TIM_OC1_SetConfig+0xdc>)
 800afa8:	4293      	cmp	r3, r2
 800afaa:	d10c      	bne.n	800afc6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800afac:	697b      	ldr	r3, [r7, #20]
 800afae:	f023 0308 	bic.w	r3, r3, #8
 800afb2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800afb4:	683b      	ldr	r3, [r7, #0]
 800afb6:	68db      	ldr	r3, [r3, #12]
 800afb8:	697a      	ldr	r2, [r7, #20]
 800afba:	4313      	orrs	r3, r2
 800afbc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800afbe:	697b      	ldr	r3, [r7, #20]
 800afc0:	f023 0304 	bic.w	r3, r3, #4
 800afc4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	4a15      	ldr	r2, [pc, #84]	; (800b020 <TIM_OC1_SetConfig+0xd8>)
 800afca:	4293      	cmp	r3, r2
 800afcc:	d003      	beq.n	800afd6 <TIM_OC1_SetConfig+0x8e>
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	4a14      	ldr	r2, [pc, #80]	; (800b024 <TIM_OC1_SetConfig+0xdc>)
 800afd2:	4293      	cmp	r3, r2
 800afd4:	d111      	bne.n	800affa <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800afd6:	693b      	ldr	r3, [r7, #16]
 800afd8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800afdc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800afde:	693b      	ldr	r3, [r7, #16]
 800afe0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800afe4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800afe6:	683b      	ldr	r3, [r7, #0]
 800afe8:	695b      	ldr	r3, [r3, #20]
 800afea:	693a      	ldr	r2, [r7, #16]
 800afec:	4313      	orrs	r3, r2
 800afee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800aff0:	683b      	ldr	r3, [r7, #0]
 800aff2:	699b      	ldr	r3, [r3, #24]
 800aff4:	693a      	ldr	r2, [r7, #16]
 800aff6:	4313      	orrs	r3, r2
 800aff8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	693a      	ldr	r2, [r7, #16]
 800affe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	68fa      	ldr	r2, [r7, #12]
 800b004:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b006:	683b      	ldr	r3, [r7, #0]
 800b008:	685a      	ldr	r2, [r3, #4]
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	697a      	ldr	r2, [r7, #20]
 800b012:	621a      	str	r2, [r3, #32]
}
 800b014:	bf00      	nop
 800b016:	371c      	adds	r7, #28
 800b018:	46bd      	mov	sp, r7
 800b01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b01e:	4770      	bx	lr
 800b020:	40010000 	.word	0x40010000
 800b024:	40010400 	.word	0x40010400

0800b028 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b028:	b480      	push	{r7}
 800b02a:	b087      	sub	sp, #28
 800b02c:	af00      	add	r7, sp, #0
 800b02e:	6078      	str	r0, [r7, #4]
 800b030:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	6a1b      	ldr	r3, [r3, #32]
 800b036:	f023 0210 	bic.w	r2, r3, #16
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	6a1b      	ldr	r3, [r3, #32]
 800b042:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	685b      	ldr	r3, [r3, #4]
 800b048:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	699b      	ldr	r3, [r3, #24]
 800b04e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b056:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b05e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b060:	683b      	ldr	r3, [r7, #0]
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	021b      	lsls	r3, r3, #8
 800b066:	68fa      	ldr	r2, [r7, #12]
 800b068:	4313      	orrs	r3, r2
 800b06a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b06c:	697b      	ldr	r3, [r7, #20]
 800b06e:	f023 0320 	bic.w	r3, r3, #32
 800b072:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b074:	683b      	ldr	r3, [r7, #0]
 800b076:	689b      	ldr	r3, [r3, #8]
 800b078:	011b      	lsls	r3, r3, #4
 800b07a:	697a      	ldr	r2, [r7, #20]
 800b07c:	4313      	orrs	r3, r2
 800b07e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	4a22      	ldr	r2, [pc, #136]	; (800b10c <TIM_OC2_SetConfig+0xe4>)
 800b084:	4293      	cmp	r3, r2
 800b086:	d003      	beq.n	800b090 <TIM_OC2_SetConfig+0x68>
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	4a21      	ldr	r2, [pc, #132]	; (800b110 <TIM_OC2_SetConfig+0xe8>)
 800b08c:	4293      	cmp	r3, r2
 800b08e:	d10d      	bne.n	800b0ac <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b090:	697b      	ldr	r3, [r7, #20]
 800b092:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b096:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b098:	683b      	ldr	r3, [r7, #0]
 800b09a:	68db      	ldr	r3, [r3, #12]
 800b09c:	011b      	lsls	r3, r3, #4
 800b09e:	697a      	ldr	r2, [r7, #20]
 800b0a0:	4313      	orrs	r3, r2
 800b0a2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b0a4:	697b      	ldr	r3, [r7, #20]
 800b0a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b0aa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	4a17      	ldr	r2, [pc, #92]	; (800b10c <TIM_OC2_SetConfig+0xe4>)
 800b0b0:	4293      	cmp	r3, r2
 800b0b2:	d003      	beq.n	800b0bc <TIM_OC2_SetConfig+0x94>
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	4a16      	ldr	r2, [pc, #88]	; (800b110 <TIM_OC2_SetConfig+0xe8>)
 800b0b8:	4293      	cmp	r3, r2
 800b0ba:	d113      	bne.n	800b0e4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b0bc:	693b      	ldr	r3, [r7, #16]
 800b0be:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b0c2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b0c4:	693b      	ldr	r3, [r7, #16]
 800b0c6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b0ca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b0cc:	683b      	ldr	r3, [r7, #0]
 800b0ce:	695b      	ldr	r3, [r3, #20]
 800b0d0:	009b      	lsls	r3, r3, #2
 800b0d2:	693a      	ldr	r2, [r7, #16]
 800b0d4:	4313      	orrs	r3, r2
 800b0d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b0d8:	683b      	ldr	r3, [r7, #0]
 800b0da:	699b      	ldr	r3, [r3, #24]
 800b0dc:	009b      	lsls	r3, r3, #2
 800b0de:	693a      	ldr	r2, [r7, #16]
 800b0e0:	4313      	orrs	r3, r2
 800b0e2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	693a      	ldr	r2, [r7, #16]
 800b0e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	68fa      	ldr	r2, [r7, #12]
 800b0ee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b0f0:	683b      	ldr	r3, [r7, #0]
 800b0f2:	685a      	ldr	r2, [r3, #4]
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	697a      	ldr	r2, [r7, #20]
 800b0fc:	621a      	str	r2, [r3, #32]
}
 800b0fe:	bf00      	nop
 800b100:	371c      	adds	r7, #28
 800b102:	46bd      	mov	sp, r7
 800b104:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b108:	4770      	bx	lr
 800b10a:	bf00      	nop
 800b10c:	40010000 	.word	0x40010000
 800b110:	40010400 	.word	0x40010400

0800b114 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b114:	b480      	push	{r7}
 800b116:	b087      	sub	sp, #28
 800b118:	af00      	add	r7, sp, #0
 800b11a:	6078      	str	r0, [r7, #4]
 800b11c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	6a1b      	ldr	r3, [r3, #32]
 800b122:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	6a1b      	ldr	r3, [r3, #32]
 800b12e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	685b      	ldr	r3, [r3, #4]
 800b134:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	69db      	ldr	r3, [r3, #28]
 800b13a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b142:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b144:	68fb      	ldr	r3, [r7, #12]
 800b146:	f023 0303 	bic.w	r3, r3, #3
 800b14a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b14c:	683b      	ldr	r3, [r7, #0]
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	68fa      	ldr	r2, [r7, #12]
 800b152:	4313      	orrs	r3, r2
 800b154:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b156:	697b      	ldr	r3, [r7, #20]
 800b158:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b15c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b15e:	683b      	ldr	r3, [r7, #0]
 800b160:	689b      	ldr	r3, [r3, #8]
 800b162:	021b      	lsls	r3, r3, #8
 800b164:	697a      	ldr	r2, [r7, #20]
 800b166:	4313      	orrs	r3, r2
 800b168:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	4a21      	ldr	r2, [pc, #132]	; (800b1f4 <TIM_OC3_SetConfig+0xe0>)
 800b16e:	4293      	cmp	r3, r2
 800b170:	d003      	beq.n	800b17a <TIM_OC3_SetConfig+0x66>
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	4a20      	ldr	r2, [pc, #128]	; (800b1f8 <TIM_OC3_SetConfig+0xe4>)
 800b176:	4293      	cmp	r3, r2
 800b178:	d10d      	bne.n	800b196 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b17a:	697b      	ldr	r3, [r7, #20]
 800b17c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b180:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b182:	683b      	ldr	r3, [r7, #0]
 800b184:	68db      	ldr	r3, [r3, #12]
 800b186:	021b      	lsls	r3, r3, #8
 800b188:	697a      	ldr	r2, [r7, #20]
 800b18a:	4313      	orrs	r3, r2
 800b18c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b18e:	697b      	ldr	r3, [r7, #20]
 800b190:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b194:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	4a16      	ldr	r2, [pc, #88]	; (800b1f4 <TIM_OC3_SetConfig+0xe0>)
 800b19a:	4293      	cmp	r3, r2
 800b19c:	d003      	beq.n	800b1a6 <TIM_OC3_SetConfig+0x92>
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	4a15      	ldr	r2, [pc, #84]	; (800b1f8 <TIM_OC3_SetConfig+0xe4>)
 800b1a2:	4293      	cmp	r3, r2
 800b1a4:	d113      	bne.n	800b1ce <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b1a6:	693b      	ldr	r3, [r7, #16]
 800b1a8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b1ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b1ae:	693b      	ldr	r3, [r7, #16]
 800b1b0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b1b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b1b6:	683b      	ldr	r3, [r7, #0]
 800b1b8:	695b      	ldr	r3, [r3, #20]
 800b1ba:	011b      	lsls	r3, r3, #4
 800b1bc:	693a      	ldr	r2, [r7, #16]
 800b1be:	4313      	orrs	r3, r2
 800b1c0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b1c2:	683b      	ldr	r3, [r7, #0]
 800b1c4:	699b      	ldr	r3, [r3, #24]
 800b1c6:	011b      	lsls	r3, r3, #4
 800b1c8:	693a      	ldr	r2, [r7, #16]
 800b1ca:	4313      	orrs	r3, r2
 800b1cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	693a      	ldr	r2, [r7, #16]
 800b1d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	68fa      	ldr	r2, [r7, #12]
 800b1d8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b1da:	683b      	ldr	r3, [r7, #0]
 800b1dc:	685a      	ldr	r2, [r3, #4]
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	697a      	ldr	r2, [r7, #20]
 800b1e6:	621a      	str	r2, [r3, #32]
}
 800b1e8:	bf00      	nop
 800b1ea:	371c      	adds	r7, #28
 800b1ec:	46bd      	mov	sp, r7
 800b1ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1f2:	4770      	bx	lr
 800b1f4:	40010000 	.word	0x40010000
 800b1f8:	40010400 	.word	0x40010400

0800b1fc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b1fc:	b480      	push	{r7}
 800b1fe:	b087      	sub	sp, #28
 800b200:	af00      	add	r7, sp, #0
 800b202:	6078      	str	r0, [r7, #4]
 800b204:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	6a1b      	ldr	r3, [r3, #32]
 800b20a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	6a1b      	ldr	r3, [r3, #32]
 800b216:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	685b      	ldr	r3, [r3, #4]
 800b21c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	69db      	ldr	r3, [r3, #28]
 800b222:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b22a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b232:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b234:	683b      	ldr	r3, [r7, #0]
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	021b      	lsls	r3, r3, #8
 800b23a:	68fa      	ldr	r2, [r7, #12]
 800b23c:	4313      	orrs	r3, r2
 800b23e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b240:	693b      	ldr	r3, [r7, #16]
 800b242:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b246:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b248:	683b      	ldr	r3, [r7, #0]
 800b24a:	689b      	ldr	r3, [r3, #8]
 800b24c:	031b      	lsls	r3, r3, #12
 800b24e:	693a      	ldr	r2, [r7, #16]
 800b250:	4313      	orrs	r3, r2
 800b252:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	4a12      	ldr	r2, [pc, #72]	; (800b2a0 <TIM_OC4_SetConfig+0xa4>)
 800b258:	4293      	cmp	r3, r2
 800b25a:	d003      	beq.n	800b264 <TIM_OC4_SetConfig+0x68>
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	4a11      	ldr	r2, [pc, #68]	; (800b2a4 <TIM_OC4_SetConfig+0xa8>)
 800b260:	4293      	cmp	r3, r2
 800b262:	d109      	bne.n	800b278 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b264:	697b      	ldr	r3, [r7, #20]
 800b266:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b26a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b26c:	683b      	ldr	r3, [r7, #0]
 800b26e:	695b      	ldr	r3, [r3, #20]
 800b270:	019b      	lsls	r3, r3, #6
 800b272:	697a      	ldr	r2, [r7, #20]
 800b274:	4313      	orrs	r3, r2
 800b276:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	697a      	ldr	r2, [r7, #20]
 800b27c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	68fa      	ldr	r2, [r7, #12]
 800b282:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b284:	683b      	ldr	r3, [r7, #0]
 800b286:	685a      	ldr	r2, [r3, #4]
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	693a      	ldr	r2, [r7, #16]
 800b290:	621a      	str	r2, [r3, #32]
}
 800b292:	bf00      	nop
 800b294:	371c      	adds	r7, #28
 800b296:	46bd      	mov	sp, r7
 800b298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b29c:	4770      	bx	lr
 800b29e:	bf00      	nop
 800b2a0:	40010000 	.word	0x40010000
 800b2a4:	40010400 	.word	0x40010400

0800b2a8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b2a8:	b480      	push	{r7}
 800b2aa:	b087      	sub	sp, #28
 800b2ac:	af00      	add	r7, sp, #0
 800b2ae:	60f8      	str	r0, [r7, #12]
 800b2b0:	60b9      	str	r1, [r7, #8]
 800b2b2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b2b4:	68bb      	ldr	r3, [r7, #8]
 800b2b6:	f003 031f 	and.w	r3, r3, #31
 800b2ba:	2201      	movs	r2, #1
 800b2bc:	fa02 f303 	lsl.w	r3, r2, r3
 800b2c0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	6a1a      	ldr	r2, [r3, #32]
 800b2c6:	697b      	ldr	r3, [r7, #20]
 800b2c8:	43db      	mvns	r3, r3
 800b2ca:	401a      	ands	r2, r3
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	6a1a      	ldr	r2, [r3, #32]
 800b2d4:	68bb      	ldr	r3, [r7, #8]
 800b2d6:	f003 031f 	and.w	r3, r3, #31
 800b2da:	6879      	ldr	r1, [r7, #4]
 800b2dc:	fa01 f303 	lsl.w	r3, r1, r3
 800b2e0:	431a      	orrs	r2, r3
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	621a      	str	r2, [r3, #32]
}
 800b2e6:	bf00      	nop
 800b2e8:	371c      	adds	r7, #28
 800b2ea:	46bd      	mov	sp, r7
 800b2ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2f0:	4770      	bx	lr
	...

0800b2f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b2f4:	b480      	push	{r7}
 800b2f6:	b085      	sub	sp, #20
 800b2f8:	af00      	add	r7, sp, #0
 800b2fa:	6078      	str	r0, [r7, #4]
 800b2fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b304:	2b01      	cmp	r3, #1
 800b306:	d101      	bne.n	800b30c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b308:	2302      	movs	r3, #2
 800b30a:	e05a      	b.n	800b3c2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	2201      	movs	r2, #1
 800b310:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	2202      	movs	r2, #2
 800b318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	685b      	ldr	r3, [r3, #4]
 800b322:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	689b      	ldr	r3, [r3, #8]
 800b32a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b332:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b334:	683b      	ldr	r3, [r7, #0]
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	68fa      	ldr	r2, [r7, #12]
 800b33a:	4313      	orrs	r3, r2
 800b33c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	68fa      	ldr	r2, [r7, #12]
 800b344:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	4a21      	ldr	r2, [pc, #132]	; (800b3d0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800b34c:	4293      	cmp	r3, r2
 800b34e:	d022      	beq.n	800b396 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b358:	d01d      	beq.n	800b396 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	4a1d      	ldr	r2, [pc, #116]	; (800b3d4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800b360:	4293      	cmp	r3, r2
 800b362:	d018      	beq.n	800b396 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	4a1b      	ldr	r2, [pc, #108]	; (800b3d8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800b36a:	4293      	cmp	r3, r2
 800b36c:	d013      	beq.n	800b396 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	4a1a      	ldr	r2, [pc, #104]	; (800b3dc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800b374:	4293      	cmp	r3, r2
 800b376:	d00e      	beq.n	800b396 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	4a18      	ldr	r2, [pc, #96]	; (800b3e0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800b37e:	4293      	cmp	r3, r2
 800b380:	d009      	beq.n	800b396 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	4a17      	ldr	r2, [pc, #92]	; (800b3e4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800b388:	4293      	cmp	r3, r2
 800b38a:	d004      	beq.n	800b396 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	4a15      	ldr	r2, [pc, #84]	; (800b3e8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800b392:	4293      	cmp	r3, r2
 800b394:	d10c      	bne.n	800b3b0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b396:	68bb      	ldr	r3, [r7, #8]
 800b398:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b39c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b39e:	683b      	ldr	r3, [r7, #0]
 800b3a0:	685b      	ldr	r3, [r3, #4]
 800b3a2:	68ba      	ldr	r2, [r7, #8]
 800b3a4:	4313      	orrs	r3, r2
 800b3a6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	68ba      	ldr	r2, [r7, #8]
 800b3ae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	2201      	movs	r2, #1
 800b3b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	2200      	movs	r2, #0
 800b3bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b3c0:	2300      	movs	r3, #0
}
 800b3c2:	4618      	mov	r0, r3
 800b3c4:	3714      	adds	r7, #20
 800b3c6:	46bd      	mov	sp, r7
 800b3c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3cc:	4770      	bx	lr
 800b3ce:	bf00      	nop
 800b3d0:	40010000 	.word	0x40010000
 800b3d4:	40000400 	.word	0x40000400
 800b3d8:	40000800 	.word	0x40000800
 800b3dc:	40000c00 	.word	0x40000c00
 800b3e0:	40010400 	.word	0x40010400
 800b3e4:	40014000 	.word	0x40014000
 800b3e8:	40001800 	.word	0x40001800

0800b3ec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b3ec:	b480      	push	{r7}
 800b3ee:	b083      	sub	sp, #12
 800b3f0:	af00      	add	r7, sp, #0
 800b3f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b3f4:	bf00      	nop
 800b3f6:	370c      	adds	r7, #12
 800b3f8:	46bd      	mov	sp, r7
 800b3fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3fe:	4770      	bx	lr

0800b400 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b400:	b480      	push	{r7}
 800b402:	b083      	sub	sp, #12
 800b404:	af00      	add	r7, sp, #0
 800b406:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b408:	bf00      	nop
 800b40a:	370c      	adds	r7, #12
 800b40c:	46bd      	mov	sp, r7
 800b40e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b412:	4770      	bx	lr

0800b414 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b414:	b580      	push	{r7, lr}
 800b416:	b082      	sub	sp, #8
 800b418:	af00      	add	r7, sp, #0
 800b41a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d101      	bne.n	800b426 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b422:	2301      	movs	r3, #1
 800b424:	e03f      	b.n	800b4a6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800b42c:	b2db      	uxtb	r3, r3
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d106      	bne.n	800b440 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	2200      	movs	r2, #0
 800b436:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b43a:	6878      	ldr	r0, [r7, #4]
 800b43c:	f7fa ff64 	bl	8006308 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	2224      	movs	r2, #36	; 0x24
 800b444:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	68da      	ldr	r2, [r3, #12]
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b456:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800b458:	6878      	ldr	r0, [r7, #4]
 800b45a:	f000 f90b 	bl	800b674 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	691a      	ldr	r2, [r3, #16]
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b46c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	695a      	ldr	r2, [r3, #20]
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b47c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	68da      	ldr	r2, [r3, #12]
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b48c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	2200      	movs	r2, #0
 800b492:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	2220      	movs	r2, #32
 800b498:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	2220      	movs	r2, #32
 800b4a0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800b4a4:	2300      	movs	r3, #0
}
 800b4a6:	4618      	mov	r0, r3
 800b4a8:	3708      	adds	r7, #8
 800b4aa:	46bd      	mov	sp, r7
 800b4ac:	bd80      	pop	{r7, pc}

0800b4ae <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b4ae:	b580      	push	{r7, lr}
 800b4b0:	b088      	sub	sp, #32
 800b4b2:	af02      	add	r7, sp, #8
 800b4b4:	60f8      	str	r0, [r7, #12]
 800b4b6:	60b9      	str	r1, [r7, #8]
 800b4b8:	603b      	str	r3, [r7, #0]
 800b4ba:	4613      	mov	r3, r2
 800b4bc:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800b4be:	2300      	movs	r3, #0
 800b4c0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b4c2:	68fb      	ldr	r3, [r7, #12]
 800b4c4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800b4c8:	b2db      	uxtb	r3, r3
 800b4ca:	2b20      	cmp	r3, #32
 800b4cc:	f040 8083 	bne.w	800b5d6 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800b4d0:	68bb      	ldr	r3, [r7, #8]
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d002      	beq.n	800b4dc <HAL_UART_Transmit+0x2e>
 800b4d6:	88fb      	ldrh	r3, [r7, #6]
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d101      	bne.n	800b4e0 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800b4dc:	2301      	movs	r3, #1
 800b4de:	e07b      	b.n	800b5d8 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800b4e6:	2b01      	cmp	r3, #1
 800b4e8:	d101      	bne.n	800b4ee <HAL_UART_Transmit+0x40>
 800b4ea:	2302      	movs	r3, #2
 800b4ec:	e074      	b.n	800b5d8 <HAL_UART_Transmit+0x12a>
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	2201      	movs	r2, #1
 800b4f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	2200      	movs	r2, #0
 800b4fa:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	2221      	movs	r2, #33	; 0x21
 800b500:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800b504:	f7fb f89e 	bl	8006644 <HAL_GetTick>
 800b508:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800b50a:	68fb      	ldr	r3, [r7, #12]
 800b50c:	88fa      	ldrh	r2, [r7, #6]
 800b50e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	88fa      	ldrh	r2, [r7, #6]
 800b514:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800b516:	68fb      	ldr	r3, [r7, #12]
 800b518:	2200      	movs	r2, #0
 800b51a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800b51e:	e042      	b.n	800b5a6 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b524:	b29b      	uxth	r3, r3
 800b526:	3b01      	subs	r3, #1
 800b528:	b29a      	uxth	r2, r3
 800b52a:	68fb      	ldr	r3, [r7, #12]
 800b52c:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	689b      	ldr	r3, [r3, #8]
 800b532:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b536:	d122      	bne.n	800b57e <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b538:	683b      	ldr	r3, [r7, #0]
 800b53a:	9300      	str	r3, [sp, #0]
 800b53c:	697b      	ldr	r3, [r7, #20]
 800b53e:	2200      	movs	r2, #0
 800b540:	2180      	movs	r1, #128	; 0x80
 800b542:	68f8      	ldr	r0, [r7, #12]
 800b544:	f000 f84c 	bl	800b5e0 <UART_WaitOnFlagUntilTimeout>
 800b548:	4603      	mov	r3, r0
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d001      	beq.n	800b552 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800b54e:	2303      	movs	r3, #3
 800b550:	e042      	b.n	800b5d8 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800b552:	68bb      	ldr	r3, [r7, #8]
 800b554:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800b556:	693b      	ldr	r3, [r7, #16]
 800b558:	881b      	ldrh	r3, [r3, #0]
 800b55a:	461a      	mov	r2, r3
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b564:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800b566:	68fb      	ldr	r3, [r7, #12]
 800b568:	691b      	ldr	r3, [r3, #16]
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d103      	bne.n	800b576 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800b56e:	68bb      	ldr	r3, [r7, #8]
 800b570:	3302      	adds	r3, #2
 800b572:	60bb      	str	r3, [r7, #8]
 800b574:	e017      	b.n	800b5a6 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800b576:	68bb      	ldr	r3, [r7, #8]
 800b578:	3301      	adds	r3, #1
 800b57a:	60bb      	str	r3, [r7, #8]
 800b57c:	e013      	b.n	800b5a6 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b57e:	683b      	ldr	r3, [r7, #0]
 800b580:	9300      	str	r3, [sp, #0]
 800b582:	697b      	ldr	r3, [r7, #20]
 800b584:	2200      	movs	r2, #0
 800b586:	2180      	movs	r1, #128	; 0x80
 800b588:	68f8      	ldr	r0, [r7, #12]
 800b58a:	f000 f829 	bl	800b5e0 <UART_WaitOnFlagUntilTimeout>
 800b58e:	4603      	mov	r3, r0
 800b590:	2b00      	cmp	r3, #0
 800b592:	d001      	beq.n	800b598 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 800b594:	2303      	movs	r3, #3
 800b596:	e01f      	b.n	800b5d8 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800b598:	68bb      	ldr	r3, [r7, #8]
 800b59a:	1c5a      	adds	r2, r3, #1
 800b59c:	60ba      	str	r2, [r7, #8]
 800b59e:	781a      	ldrb	r2, [r3, #0]
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800b5a6:	68fb      	ldr	r3, [r7, #12]
 800b5a8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b5aa:	b29b      	uxth	r3, r3
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d1b7      	bne.n	800b520 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b5b0:	683b      	ldr	r3, [r7, #0]
 800b5b2:	9300      	str	r3, [sp, #0]
 800b5b4:	697b      	ldr	r3, [r7, #20]
 800b5b6:	2200      	movs	r2, #0
 800b5b8:	2140      	movs	r1, #64	; 0x40
 800b5ba:	68f8      	ldr	r0, [r7, #12]
 800b5bc:	f000 f810 	bl	800b5e0 <UART_WaitOnFlagUntilTimeout>
 800b5c0:	4603      	mov	r3, r0
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d001      	beq.n	800b5ca <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800b5c6:	2303      	movs	r3, #3
 800b5c8:	e006      	b.n	800b5d8 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	2220      	movs	r2, #32
 800b5ce:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800b5d2:	2300      	movs	r3, #0
 800b5d4:	e000      	b.n	800b5d8 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800b5d6:	2302      	movs	r3, #2
  }
}
 800b5d8:	4618      	mov	r0, r3
 800b5da:	3718      	adds	r7, #24
 800b5dc:	46bd      	mov	sp, r7
 800b5de:	bd80      	pop	{r7, pc}

0800b5e0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800b5e0:	b580      	push	{r7, lr}
 800b5e2:	b084      	sub	sp, #16
 800b5e4:	af00      	add	r7, sp, #0
 800b5e6:	60f8      	str	r0, [r7, #12]
 800b5e8:	60b9      	str	r1, [r7, #8]
 800b5ea:	603b      	str	r3, [r7, #0]
 800b5ec:	4613      	mov	r3, r2
 800b5ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b5f0:	e02c      	b.n	800b64c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b5f2:	69bb      	ldr	r3, [r7, #24]
 800b5f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b5f8:	d028      	beq.n	800b64c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800b5fa:	69bb      	ldr	r3, [r7, #24]
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d007      	beq.n	800b610 <UART_WaitOnFlagUntilTimeout+0x30>
 800b600:	f7fb f820 	bl	8006644 <HAL_GetTick>
 800b604:	4602      	mov	r2, r0
 800b606:	683b      	ldr	r3, [r7, #0]
 800b608:	1ad3      	subs	r3, r2, r3
 800b60a:	69ba      	ldr	r2, [r7, #24]
 800b60c:	429a      	cmp	r2, r3
 800b60e:	d21d      	bcs.n	800b64c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b610:	68fb      	ldr	r3, [r7, #12]
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	68da      	ldr	r2, [r3, #12]
 800b616:	68fb      	ldr	r3, [r7, #12]
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800b61e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	695a      	ldr	r2, [r3, #20]
 800b626:	68fb      	ldr	r3, [r7, #12]
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	f022 0201 	bic.w	r2, r2, #1
 800b62e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800b630:	68fb      	ldr	r3, [r7, #12]
 800b632:	2220      	movs	r2, #32
 800b634:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	2220      	movs	r2, #32
 800b63c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	2200      	movs	r2, #0
 800b644:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800b648:	2303      	movs	r3, #3
 800b64a:	e00f      	b.n	800b66c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	681a      	ldr	r2, [r3, #0]
 800b652:	68bb      	ldr	r3, [r7, #8]
 800b654:	4013      	ands	r3, r2
 800b656:	68ba      	ldr	r2, [r7, #8]
 800b658:	429a      	cmp	r2, r3
 800b65a:	bf0c      	ite	eq
 800b65c:	2301      	moveq	r3, #1
 800b65e:	2300      	movne	r3, #0
 800b660:	b2db      	uxtb	r3, r3
 800b662:	461a      	mov	r2, r3
 800b664:	79fb      	ldrb	r3, [r7, #7]
 800b666:	429a      	cmp	r2, r3
 800b668:	d0c3      	beq.n	800b5f2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800b66a:	2300      	movs	r3, #0
}
 800b66c:	4618      	mov	r0, r3
 800b66e:	3710      	adds	r7, #16
 800b670:	46bd      	mov	sp, r7
 800b672:	bd80      	pop	{r7, pc}

0800b674 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b674:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b678:	b0bd      	sub	sp, #244	; 0xf4
 800b67a:	af00      	add	r7, sp, #0
 800b67c:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b680:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	691b      	ldr	r3, [r3, #16]
 800b688:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800b68c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b690:	68d9      	ldr	r1, [r3, #12]
 800b692:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b696:	681a      	ldr	r2, [r3, #0]
 800b698:	ea40 0301 	orr.w	r3, r0, r1
 800b69c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800b69e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b6a2:	689a      	ldr	r2, [r3, #8]
 800b6a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b6a8:	691b      	ldr	r3, [r3, #16]
 800b6aa:	431a      	orrs	r2, r3
 800b6ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b6b0:	695b      	ldr	r3, [r3, #20]
 800b6b2:	431a      	orrs	r2, r3
 800b6b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b6b8:	69db      	ldr	r3, [r3, #28]
 800b6ba:	4313      	orrs	r3, r2
 800b6bc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  MODIFY_REG(huart->Instance->CR1,
 800b6c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	68db      	ldr	r3, [r3, #12]
 800b6c8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800b6cc:	f021 010c 	bic.w	r1, r1, #12
 800b6d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b6d4:	681a      	ldr	r2, [r3, #0]
 800b6d6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800b6da:	430b      	orrs	r3, r1
 800b6dc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b6de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	695b      	ldr	r3, [r3, #20]
 800b6e6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800b6ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b6ee:	6999      	ldr	r1, [r3, #24]
 800b6f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b6f4:	681a      	ldr	r2, [r3, #0]
 800b6f6:	ea40 0301 	orr.w	r3, r0, r1
 800b6fa:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b6fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b700:	69db      	ldr	r3, [r3, #28]
 800b702:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b706:	f040 81a5 	bne.w	800ba54 <UART_SetConfig+0x3e0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b70a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b70e:	681a      	ldr	r2, [r3, #0]
 800b710:	4bcd      	ldr	r3, [pc, #820]	; (800ba48 <UART_SetConfig+0x3d4>)
 800b712:	429a      	cmp	r2, r3
 800b714:	d006      	beq.n	800b724 <UART_SetConfig+0xb0>
 800b716:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b71a:	681a      	ldr	r2, [r3, #0]
 800b71c:	4bcb      	ldr	r3, [pc, #812]	; (800ba4c <UART_SetConfig+0x3d8>)
 800b71e:	429a      	cmp	r2, r3
 800b720:	f040 80cb 	bne.w	800b8ba <UART_SetConfig+0x246>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800b724:	f7fd fefc 	bl	8009520 <HAL_RCC_GetPCLK2Freq>
 800b728:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b72c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800b730:	461c      	mov	r4, r3
 800b732:	f04f 0500 	mov.w	r5, #0
 800b736:	4622      	mov	r2, r4
 800b738:	462b      	mov	r3, r5
 800b73a:	1891      	adds	r1, r2, r2
 800b73c:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 800b740:	415b      	adcs	r3, r3
 800b742:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800b746:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800b74a:	1912      	adds	r2, r2, r4
 800b74c:	eb45 0303 	adc.w	r3, r5, r3
 800b750:	f04f 0000 	mov.w	r0, #0
 800b754:	f04f 0100 	mov.w	r1, #0
 800b758:	00d9      	lsls	r1, r3, #3
 800b75a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800b75e:	00d0      	lsls	r0, r2, #3
 800b760:	4602      	mov	r2, r0
 800b762:	460b      	mov	r3, r1
 800b764:	1911      	adds	r1, r2, r4
 800b766:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 800b76a:	416b      	adcs	r3, r5
 800b76c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b770:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b774:	685b      	ldr	r3, [r3, #4]
 800b776:	461a      	mov	r2, r3
 800b778:	f04f 0300 	mov.w	r3, #0
 800b77c:	1891      	adds	r1, r2, r2
 800b77e:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 800b782:	415b      	adcs	r3, r3
 800b784:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b788:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 800b78c:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 800b790:	f7f5 fa3a 	bl	8000c08 <__aeabi_uldivmod>
 800b794:	4602      	mov	r2, r0
 800b796:	460b      	mov	r3, r1
 800b798:	4bad      	ldr	r3, [pc, #692]	; (800ba50 <UART_SetConfig+0x3dc>)
 800b79a:	fba3 2302 	umull	r2, r3, r3, r2
 800b79e:	095b      	lsrs	r3, r3, #5
 800b7a0:	011e      	lsls	r6, r3, #4
 800b7a2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800b7a6:	461c      	mov	r4, r3
 800b7a8:	f04f 0500 	mov.w	r5, #0
 800b7ac:	4622      	mov	r2, r4
 800b7ae:	462b      	mov	r3, r5
 800b7b0:	1891      	adds	r1, r2, r2
 800b7b2:	67b9      	str	r1, [r7, #120]	; 0x78
 800b7b4:	415b      	adcs	r3, r3
 800b7b6:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b7b8:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800b7bc:	1912      	adds	r2, r2, r4
 800b7be:	eb45 0303 	adc.w	r3, r5, r3
 800b7c2:	f04f 0000 	mov.w	r0, #0
 800b7c6:	f04f 0100 	mov.w	r1, #0
 800b7ca:	00d9      	lsls	r1, r3, #3
 800b7cc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800b7d0:	00d0      	lsls	r0, r2, #3
 800b7d2:	4602      	mov	r2, r0
 800b7d4:	460b      	mov	r3, r1
 800b7d6:	1911      	adds	r1, r2, r4
 800b7d8:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 800b7dc:	416b      	adcs	r3, r5
 800b7de:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800b7e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b7e6:	685b      	ldr	r3, [r3, #4]
 800b7e8:	461a      	mov	r2, r3
 800b7ea:	f04f 0300 	mov.w	r3, #0
 800b7ee:	1891      	adds	r1, r2, r2
 800b7f0:	6739      	str	r1, [r7, #112]	; 0x70
 800b7f2:	415b      	adcs	r3, r3
 800b7f4:	677b      	str	r3, [r7, #116]	; 0x74
 800b7f6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800b7fa:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 800b7fe:	f7f5 fa03 	bl	8000c08 <__aeabi_uldivmod>
 800b802:	4602      	mov	r2, r0
 800b804:	460b      	mov	r3, r1
 800b806:	4b92      	ldr	r3, [pc, #584]	; (800ba50 <UART_SetConfig+0x3dc>)
 800b808:	fba3 1302 	umull	r1, r3, r3, r2
 800b80c:	095b      	lsrs	r3, r3, #5
 800b80e:	2164      	movs	r1, #100	; 0x64
 800b810:	fb01 f303 	mul.w	r3, r1, r3
 800b814:	1ad3      	subs	r3, r2, r3
 800b816:	00db      	lsls	r3, r3, #3
 800b818:	3332      	adds	r3, #50	; 0x32
 800b81a:	4a8d      	ldr	r2, [pc, #564]	; (800ba50 <UART_SetConfig+0x3dc>)
 800b81c:	fba2 2303 	umull	r2, r3, r2, r3
 800b820:	095b      	lsrs	r3, r3, #5
 800b822:	005b      	lsls	r3, r3, #1
 800b824:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800b828:	441e      	add	r6, r3
 800b82a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800b82e:	4618      	mov	r0, r3
 800b830:	f04f 0100 	mov.w	r1, #0
 800b834:	4602      	mov	r2, r0
 800b836:	460b      	mov	r3, r1
 800b838:	1894      	adds	r4, r2, r2
 800b83a:	66bc      	str	r4, [r7, #104]	; 0x68
 800b83c:	415b      	adcs	r3, r3
 800b83e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b840:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800b844:	1812      	adds	r2, r2, r0
 800b846:	eb41 0303 	adc.w	r3, r1, r3
 800b84a:	f04f 0400 	mov.w	r4, #0
 800b84e:	f04f 0500 	mov.w	r5, #0
 800b852:	00dd      	lsls	r5, r3, #3
 800b854:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800b858:	00d4      	lsls	r4, r2, #3
 800b85a:	4622      	mov	r2, r4
 800b85c:	462b      	mov	r3, r5
 800b85e:	1814      	adds	r4, r2, r0
 800b860:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 800b864:	414b      	adcs	r3, r1
 800b866:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b86a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b86e:	685b      	ldr	r3, [r3, #4]
 800b870:	461a      	mov	r2, r3
 800b872:	f04f 0300 	mov.w	r3, #0
 800b876:	1891      	adds	r1, r2, r2
 800b878:	6639      	str	r1, [r7, #96]	; 0x60
 800b87a:	415b      	adcs	r3, r3
 800b87c:	667b      	str	r3, [r7, #100]	; 0x64
 800b87e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800b882:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800b886:	f7f5 f9bf 	bl	8000c08 <__aeabi_uldivmod>
 800b88a:	4602      	mov	r2, r0
 800b88c:	460b      	mov	r3, r1
 800b88e:	4b70      	ldr	r3, [pc, #448]	; (800ba50 <UART_SetConfig+0x3dc>)
 800b890:	fba3 1302 	umull	r1, r3, r3, r2
 800b894:	095b      	lsrs	r3, r3, #5
 800b896:	2164      	movs	r1, #100	; 0x64
 800b898:	fb01 f303 	mul.w	r3, r1, r3
 800b89c:	1ad3      	subs	r3, r2, r3
 800b89e:	00db      	lsls	r3, r3, #3
 800b8a0:	3332      	adds	r3, #50	; 0x32
 800b8a2:	4a6b      	ldr	r2, [pc, #428]	; (800ba50 <UART_SetConfig+0x3dc>)
 800b8a4:	fba2 2303 	umull	r2, r3, r2, r3
 800b8a8:	095b      	lsrs	r3, r3, #5
 800b8aa:	f003 0207 	and.w	r2, r3, #7
 800b8ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	4432      	add	r2, r6
 800b8b6:	609a      	str	r2, [r3, #8]
 800b8b8:	e26d      	b.n	800bd96 <UART_SetConfig+0x722>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800b8ba:	f7fd fe1d 	bl	80094f8 <HAL_RCC_GetPCLK1Freq>
 800b8be:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b8c2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800b8c6:	461c      	mov	r4, r3
 800b8c8:	f04f 0500 	mov.w	r5, #0
 800b8cc:	4622      	mov	r2, r4
 800b8ce:	462b      	mov	r3, r5
 800b8d0:	1891      	adds	r1, r2, r2
 800b8d2:	65b9      	str	r1, [r7, #88]	; 0x58
 800b8d4:	415b      	adcs	r3, r3
 800b8d6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b8d8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800b8dc:	1912      	adds	r2, r2, r4
 800b8de:	eb45 0303 	adc.w	r3, r5, r3
 800b8e2:	f04f 0000 	mov.w	r0, #0
 800b8e6:	f04f 0100 	mov.w	r1, #0
 800b8ea:	00d9      	lsls	r1, r3, #3
 800b8ec:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800b8f0:	00d0      	lsls	r0, r2, #3
 800b8f2:	4602      	mov	r2, r0
 800b8f4:	460b      	mov	r3, r1
 800b8f6:	1911      	adds	r1, r2, r4
 800b8f8:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 800b8fc:	416b      	adcs	r3, r5
 800b8fe:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b902:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b906:	685b      	ldr	r3, [r3, #4]
 800b908:	461a      	mov	r2, r3
 800b90a:	f04f 0300 	mov.w	r3, #0
 800b90e:	1891      	adds	r1, r2, r2
 800b910:	6539      	str	r1, [r7, #80]	; 0x50
 800b912:	415b      	adcs	r3, r3
 800b914:	657b      	str	r3, [r7, #84]	; 0x54
 800b916:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800b91a:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 800b91e:	f7f5 f973 	bl	8000c08 <__aeabi_uldivmod>
 800b922:	4602      	mov	r2, r0
 800b924:	460b      	mov	r3, r1
 800b926:	4b4a      	ldr	r3, [pc, #296]	; (800ba50 <UART_SetConfig+0x3dc>)
 800b928:	fba3 2302 	umull	r2, r3, r3, r2
 800b92c:	095b      	lsrs	r3, r3, #5
 800b92e:	011e      	lsls	r6, r3, #4
 800b930:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800b934:	461c      	mov	r4, r3
 800b936:	f04f 0500 	mov.w	r5, #0
 800b93a:	4622      	mov	r2, r4
 800b93c:	462b      	mov	r3, r5
 800b93e:	1891      	adds	r1, r2, r2
 800b940:	64b9      	str	r1, [r7, #72]	; 0x48
 800b942:	415b      	adcs	r3, r3
 800b944:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b946:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800b94a:	1912      	adds	r2, r2, r4
 800b94c:	eb45 0303 	adc.w	r3, r5, r3
 800b950:	f04f 0000 	mov.w	r0, #0
 800b954:	f04f 0100 	mov.w	r1, #0
 800b958:	00d9      	lsls	r1, r3, #3
 800b95a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800b95e:	00d0      	lsls	r0, r2, #3
 800b960:	4602      	mov	r2, r0
 800b962:	460b      	mov	r3, r1
 800b964:	1911      	adds	r1, r2, r4
 800b966:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 800b96a:	416b      	adcs	r3, r5
 800b96c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800b970:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b974:	685b      	ldr	r3, [r3, #4]
 800b976:	461a      	mov	r2, r3
 800b978:	f04f 0300 	mov.w	r3, #0
 800b97c:	1891      	adds	r1, r2, r2
 800b97e:	6439      	str	r1, [r7, #64]	; 0x40
 800b980:	415b      	adcs	r3, r3
 800b982:	647b      	str	r3, [r7, #68]	; 0x44
 800b984:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800b988:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 800b98c:	f7f5 f93c 	bl	8000c08 <__aeabi_uldivmod>
 800b990:	4602      	mov	r2, r0
 800b992:	460b      	mov	r3, r1
 800b994:	4b2e      	ldr	r3, [pc, #184]	; (800ba50 <UART_SetConfig+0x3dc>)
 800b996:	fba3 1302 	umull	r1, r3, r3, r2
 800b99a:	095b      	lsrs	r3, r3, #5
 800b99c:	2164      	movs	r1, #100	; 0x64
 800b99e:	fb01 f303 	mul.w	r3, r1, r3
 800b9a2:	1ad3      	subs	r3, r2, r3
 800b9a4:	00db      	lsls	r3, r3, #3
 800b9a6:	3332      	adds	r3, #50	; 0x32
 800b9a8:	4a29      	ldr	r2, [pc, #164]	; (800ba50 <UART_SetConfig+0x3dc>)
 800b9aa:	fba2 2303 	umull	r2, r3, r2, r3
 800b9ae:	095b      	lsrs	r3, r3, #5
 800b9b0:	005b      	lsls	r3, r3, #1
 800b9b2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800b9b6:	441e      	add	r6, r3
 800b9b8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800b9bc:	4618      	mov	r0, r3
 800b9be:	f04f 0100 	mov.w	r1, #0
 800b9c2:	4602      	mov	r2, r0
 800b9c4:	460b      	mov	r3, r1
 800b9c6:	1894      	adds	r4, r2, r2
 800b9c8:	63bc      	str	r4, [r7, #56]	; 0x38
 800b9ca:	415b      	adcs	r3, r3
 800b9cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b9ce:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800b9d2:	1812      	adds	r2, r2, r0
 800b9d4:	eb41 0303 	adc.w	r3, r1, r3
 800b9d8:	f04f 0400 	mov.w	r4, #0
 800b9dc:	f04f 0500 	mov.w	r5, #0
 800b9e0:	00dd      	lsls	r5, r3, #3
 800b9e2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800b9e6:	00d4      	lsls	r4, r2, #3
 800b9e8:	4622      	mov	r2, r4
 800b9ea:	462b      	mov	r3, r5
 800b9ec:	1814      	adds	r4, r2, r0
 800b9ee:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 800b9f2:	414b      	adcs	r3, r1
 800b9f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b9f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b9fc:	685b      	ldr	r3, [r3, #4]
 800b9fe:	461a      	mov	r2, r3
 800ba00:	f04f 0300 	mov.w	r3, #0
 800ba04:	1891      	adds	r1, r2, r2
 800ba06:	6339      	str	r1, [r7, #48]	; 0x30
 800ba08:	415b      	adcs	r3, r3
 800ba0a:	637b      	str	r3, [r7, #52]	; 0x34
 800ba0c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800ba10:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800ba14:	f7f5 f8f8 	bl	8000c08 <__aeabi_uldivmod>
 800ba18:	4602      	mov	r2, r0
 800ba1a:	460b      	mov	r3, r1
 800ba1c:	4b0c      	ldr	r3, [pc, #48]	; (800ba50 <UART_SetConfig+0x3dc>)
 800ba1e:	fba3 1302 	umull	r1, r3, r3, r2
 800ba22:	095b      	lsrs	r3, r3, #5
 800ba24:	2164      	movs	r1, #100	; 0x64
 800ba26:	fb01 f303 	mul.w	r3, r1, r3
 800ba2a:	1ad3      	subs	r3, r2, r3
 800ba2c:	00db      	lsls	r3, r3, #3
 800ba2e:	3332      	adds	r3, #50	; 0x32
 800ba30:	4a07      	ldr	r2, [pc, #28]	; (800ba50 <UART_SetConfig+0x3dc>)
 800ba32:	fba2 2303 	umull	r2, r3, r2, r3
 800ba36:	095b      	lsrs	r3, r3, #5
 800ba38:	f003 0207 	and.w	r2, r3, #7
 800ba3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	4432      	add	r2, r6
 800ba44:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800ba46:	e1a6      	b.n	800bd96 <UART_SetConfig+0x722>
 800ba48:	40011000 	.word	0x40011000
 800ba4c:	40011400 	.word	0x40011400
 800ba50:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800ba54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ba58:	681a      	ldr	r2, [r3, #0]
 800ba5a:	4bd1      	ldr	r3, [pc, #836]	; (800bda0 <UART_SetConfig+0x72c>)
 800ba5c:	429a      	cmp	r2, r3
 800ba5e:	d006      	beq.n	800ba6e <UART_SetConfig+0x3fa>
 800ba60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ba64:	681a      	ldr	r2, [r3, #0]
 800ba66:	4bcf      	ldr	r3, [pc, #828]	; (800bda4 <UART_SetConfig+0x730>)
 800ba68:	429a      	cmp	r2, r3
 800ba6a:	f040 80ca 	bne.w	800bc02 <UART_SetConfig+0x58e>
      pclk = HAL_RCC_GetPCLK2Freq();
 800ba6e:	f7fd fd57 	bl	8009520 <HAL_RCC_GetPCLK2Freq>
 800ba72:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800ba76:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800ba7a:	461c      	mov	r4, r3
 800ba7c:	f04f 0500 	mov.w	r5, #0
 800ba80:	4622      	mov	r2, r4
 800ba82:	462b      	mov	r3, r5
 800ba84:	1891      	adds	r1, r2, r2
 800ba86:	62b9      	str	r1, [r7, #40]	; 0x28
 800ba88:	415b      	adcs	r3, r3
 800ba8a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ba8c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800ba90:	1912      	adds	r2, r2, r4
 800ba92:	eb45 0303 	adc.w	r3, r5, r3
 800ba96:	f04f 0000 	mov.w	r0, #0
 800ba9a:	f04f 0100 	mov.w	r1, #0
 800ba9e:	00d9      	lsls	r1, r3, #3
 800baa0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800baa4:	00d0      	lsls	r0, r2, #3
 800baa6:	4602      	mov	r2, r0
 800baa8:	460b      	mov	r3, r1
 800baaa:	eb12 0a04 	adds.w	sl, r2, r4
 800baae:	eb43 0b05 	adc.w	fp, r3, r5
 800bab2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bab6:	685b      	ldr	r3, [r3, #4]
 800bab8:	4618      	mov	r0, r3
 800baba:	f04f 0100 	mov.w	r1, #0
 800babe:	f04f 0200 	mov.w	r2, #0
 800bac2:	f04f 0300 	mov.w	r3, #0
 800bac6:	008b      	lsls	r3, r1, #2
 800bac8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800bacc:	0082      	lsls	r2, r0, #2
 800bace:	4650      	mov	r0, sl
 800bad0:	4659      	mov	r1, fp
 800bad2:	f7f5 f899 	bl	8000c08 <__aeabi_uldivmod>
 800bad6:	4602      	mov	r2, r0
 800bad8:	460b      	mov	r3, r1
 800bada:	4bb3      	ldr	r3, [pc, #716]	; (800bda8 <UART_SetConfig+0x734>)
 800badc:	fba3 2302 	umull	r2, r3, r3, r2
 800bae0:	095b      	lsrs	r3, r3, #5
 800bae2:	011e      	lsls	r6, r3, #4
 800bae4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800bae8:	4618      	mov	r0, r3
 800baea:	f04f 0100 	mov.w	r1, #0
 800baee:	4602      	mov	r2, r0
 800baf0:	460b      	mov	r3, r1
 800baf2:	1894      	adds	r4, r2, r2
 800baf4:	623c      	str	r4, [r7, #32]
 800baf6:	415b      	adcs	r3, r3
 800baf8:	627b      	str	r3, [r7, #36]	; 0x24
 800bafa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800bafe:	1812      	adds	r2, r2, r0
 800bb00:	eb41 0303 	adc.w	r3, r1, r3
 800bb04:	f04f 0400 	mov.w	r4, #0
 800bb08:	f04f 0500 	mov.w	r5, #0
 800bb0c:	00dd      	lsls	r5, r3, #3
 800bb0e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800bb12:	00d4      	lsls	r4, r2, #3
 800bb14:	4622      	mov	r2, r4
 800bb16:	462b      	mov	r3, r5
 800bb18:	1814      	adds	r4, r2, r0
 800bb1a:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 800bb1e:	414b      	adcs	r3, r1
 800bb20:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800bb24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bb28:	685b      	ldr	r3, [r3, #4]
 800bb2a:	4618      	mov	r0, r3
 800bb2c:	f04f 0100 	mov.w	r1, #0
 800bb30:	f04f 0200 	mov.w	r2, #0
 800bb34:	f04f 0300 	mov.w	r3, #0
 800bb38:	008b      	lsls	r3, r1, #2
 800bb3a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800bb3e:	0082      	lsls	r2, r0, #2
 800bb40:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 800bb44:	f7f5 f860 	bl	8000c08 <__aeabi_uldivmod>
 800bb48:	4602      	mov	r2, r0
 800bb4a:	460b      	mov	r3, r1
 800bb4c:	4b96      	ldr	r3, [pc, #600]	; (800bda8 <UART_SetConfig+0x734>)
 800bb4e:	fba3 1302 	umull	r1, r3, r3, r2
 800bb52:	095b      	lsrs	r3, r3, #5
 800bb54:	2164      	movs	r1, #100	; 0x64
 800bb56:	fb01 f303 	mul.w	r3, r1, r3
 800bb5a:	1ad3      	subs	r3, r2, r3
 800bb5c:	011b      	lsls	r3, r3, #4
 800bb5e:	3332      	adds	r3, #50	; 0x32
 800bb60:	4a91      	ldr	r2, [pc, #580]	; (800bda8 <UART_SetConfig+0x734>)
 800bb62:	fba2 2303 	umull	r2, r3, r2, r3
 800bb66:	095b      	lsrs	r3, r3, #5
 800bb68:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bb6c:	441e      	add	r6, r3
 800bb6e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800bb72:	4618      	mov	r0, r3
 800bb74:	f04f 0100 	mov.w	r1, #0
 800bb78:	4602      	mov	r2, r0
 800bb7a:	460b      	mov	r3, r1
 800bb7c:	1894      	adds	r4, r2, r2
 800bb7e:	61bc      	str	r4, [r7, #24]
 800bb80:	415b      	adcs	r3, r3
 800bb82:	61fb      	str	r3, [r7, #28]
 800bb84:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800bb88:	1812      	adds	r2, r2, r0
 800bb8a:	eb41 0303 	adc.w	r3, r1, r3
 800bb8e:	f04f 0400 	mov.w	r4, #0
 800bb92:	f04f 0500 	mov.w	r5, #0
 800bb96:	00dd      	lsls	r5, r3, #3
 800bb98:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800bb9c:	00d4      	lsls	r4, r2, #3
 800bb9e:	4622      	mov	r2, r4
 800bba0:	462b      	mov	r3, r5
 800bba2:	1814      	adds	r4, r2, r0
 800bba4:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 800bba8:	414b      	adcs	r3, r1
 800bbaa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800bbae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bbb2:	685b      	ldr	r3, [r3, #4]
 800bbb4:	4618      	mov	r0, r3
 800bbb6:	f04f 0100 	mov.w	r1, #0
 800bbba:	f04f 0200 	mov.w	r2, #0
 800bbbe:	f04f 0300 	mov.w	r3, #0
 800bbc2:	008b      	lsls	r3, r1, #2
 800bbc4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800bbc8:	0082      	lsls	r2, r0, #2
 800bbca:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 800bbce:	f7f5 f81b 	bl	8000c08 <__aeabi_uldivmod>
 800bbd2:	4602      	mov	r2, r0
 800bbd4:	460b      	mov	r3, r1
 800bbd6:	4b74      	ldr	r3, [pc, #464]	; (800bda8 <UART_SetConfig+0x734>)
 800bbd8:	fba3 1302 	umull	r1, r3, r3, r2
 800bbdc:	095b      	lsrs	r3, r3, #5
 800bbde:	2164      	movs	r1, #100	; 0x64
 800bbe0:	fb01 f303 	mul.w	r3, r1, r3
 800bbe4:	1ad3      	subs	r3, r2, r3
 800bbe6:	011b      	lsls	r3, r3, #4
 800bbe8:	3332      	adds	r3, #50	; 0x32
 800bbea:	4a6f      	ldr	r2, [pc, #444]	; (800bda8 <UART_SetConfig+0x734>)
 800bbec:	fba2 2303 	umull	r2, r3, r2, r3
 800bbf0:	095b      	lsrs	r3, r3, #5
 800bbf2:	f003 020f 	and.w	r2, r3, #15
 800bbf6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	4432      	add	r2, r6
 800bbfe:	609a      	str	r2, [r3, #8]
 800bc00:	e0c9      	b.n	800bd96 <UART_SetConfig+0x722>
      pclk = HAL_RCC_GetPCLK1Freq();
 800bc02:	f7fd fc79 	bl	80094f8 <HAL_RCC_GetPCLK1Freq>
 800bc06:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800bc0a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800bc0e:	461c      	mov	r4, r3
 800bc10:	f04f 0500 	mov.w	r5, #0
 800bc14:	4622      	mov	r2, r4
 800bc16:	462b      	mov	r3, r5
 800bc18:	1891      	adds	r1, r2, r2
 800bc1a:	6139      	str	r1, [r7, #16]
 800bc1c:	415b      	adcs	r3, r3
 800bc1e:	617b      	str	r3, [r7, #20]
 800bc20:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800bc24:	1912      	adds	r2, r2, r4
 800bc26:	eb45 0303 	adc.w	r3, r5, r3
 800bc2a:	f04f 0000 	mov.w	r0, #0
 800bc2e:	f04f 0100 	mov.w	r1, #0
 800bc32:	00d9      	lsls	r1, r3, #3
 800bc34:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800bc38:	00d0      	lsls	r0, r2, #3
 800bc3a:	4602      	mov	r2, r0
 800bc3c:	460b      	mov	r3, r1
 800bc3e:	eb12 0804 	adds.w	r8, r2, r4
 800bc42:	eb43 0905 	adc.w	r9, r3, r5
 800bc46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bc4a:	685b      	ldr	r3, [r3, #4]
 800bc4c:	4618      	mov	r0, r3
 800bc4e:	f04f 0100 	mov.w	r1, #0
 800bc52:	f04f 0200 	mov.w	r2, #0
 800bc56:	f04f 0300 	mov.w	r3, #0
 800bc5a:	008b      	lsls	r3, r1, #2
 800bc5c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800bc60:	0082      	lsls	r2, r0, #2
 800bc62:	4640      	mov	r0, r8
 800bc64:	4649      	mov	r1, r9
 800bc66:	f7f4 ffcf 	bl	8000c08 <__aeabi_uldivmod>
 800bc6a:	4602      	mov	r2, r0
 800bc6c:	460b      	mov	r3, r1
 800bc6e:	4b4e      	ldr	r3, [pc, #312]	; (800bda8 <UART_SetConfig+0x734>)
 800bc70:	fba3 2302 	umull	r2, r3, r3, r2
 800bc74:	095b      	lsrs	r3, r3, #5
 800bc76:	011e      	lsls	r6, r3, #4
 800bc78:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800bc7c:	4618      	mov	r0, r3
 800bc7e:	f04f 0100 	mov.w	r1, #0
 800bc82:	4602      	mov	r2, r0
 800bc84:	460b      	mov	r3, r1
 800bc86:	1894      	adds	r4, r2, r2
 800bc88:	60bc      	str	r4, [r7, #8]
 800bc8a:	415b      	adcs	r3, r3
 800bc8c:	60fb      	str	r3, [r7, #12]
 800bc8e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800bc92:	1812      	adds	r2, r2, r0
 800bc94:	eb41 0303 	adc.w	r3, r1, r3
 800bc98:	f04f 0400 	mov.w	r4, #0
 800bc9c:	f04f 0500 	mov.w	r5, #0
 800bca0:	00dd      	lsls	r5, r3, #3
 800bca2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800bca6:	00d4      	lsls	r4, r2, #3
 800bca8:	4622      	mov	r2, r4
 800bcaa:	462b      	mov	r3, r5
 800bcac:	1814      	adds	r4, r2, r0
 800bcae:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 800bcb2:	414b      	adcs	r3, r1
 800bcb4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800bcb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bcbc:	685b      	ldr	r3, [r3, #4]
 800bcbe:	4618      	mov	r0, r3
 800bcc0:	f04f 0100 	mov.w	r1, #0
 800bcc4:	f04f 0200 	mov.w	r2, #0
 800bcc8:	f04f 0300 	mov.w	r3, #0
 800bccc:	008b      	lsls	r3, r1, #2
 800bcce:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800bcd2:	0082      	lsls	r2, r0, #2
 800bcd4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800bcd8:	f7f4 ff96 	bl	8000c08 <__aeabi_uldivmod>
 800bcdc:	4602      	mov	r2, r0
 800bcde:	460b      	mov	r3, r1
 800bce0:	4b31      	ldr	r3, [pc, #196]	; (800bda8 <UART_SetConfig+0x734>)
 800bce2:	fba3 1302 	umull	r1, r3, r3, r2
 800bce6:	095b      	lsrs	r3, r3, #5
 800bce8:	2164      	movs	r1, #100	; 0x64
 800bcea:	fb01 f303 	mul.w	r3, r1, r3
 800bcee:	1ad3      	subs	r3, r2, r3
 800bcf0:	011b      	lsls	r3, r3, #4
 800bcf2:	3332      	adds	r3, #50	; 0x32
 800bcf4:	4a2c      	ldr	r2, [pc, #176]	; (800bda8 <UART_SetConfig+0x734>)
 800bcf6:	fba2 2303 	umull	r2, r3, r2, r3
 800bcfa:	095b      	lsrs	r3, r3, #5
 800bcfc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bd00:	441e      	add	r6, r3
 800bd02:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800bd06:	4618      	mov	r0, r3
 800bd08:	f04f 0100 	mov.w	r1, #0
 800bd0c:	4602      	mov	r2, r0
 800bd0e:	460b      	mov	r3, r1
 800bd10:	1894      	adds	r4, r2, r2
 800bd12:	603c      	str	r4, [r7, #0]
 800bd14:	415b      	adcs	r3, r3
 800bd16:	607b      	str	r3, [r7, #4]
 800bd18:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bd1c:	1812      	adds	r2, r2, r0
 800bd1e:	eb41 0303 	adc.w	r3, r1, r3
 800bd22:	f04f 0400 	mov.w	r4, #0
 800bd26:	f04f 0500 	mov.w	r5, #0
 800bd2a:	00dd      	lsls	r5, r3, #3
 800bd2c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800bd30:	00d4      	lsls	r4, r2, #3
 800bd32:	4622      	mov	r2, r4
 800bd34:	462b      	mov	r3, r5
 800bd36:	1814      	adds	r4, r2, r0
 800bd38:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 800bd3c:	414b      	adcs	r3, r1
 800bd3e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800bd42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bd46:	685b      	ldr	r3, [r3, #4]
 800bd48:	4618      	mov	r0, r3
 800bd4a:	f04f 0100 	mov.w	r1, #0
 800bd4e:	f04f 0200 	mov.w	r2, #0
 800bd52:	f04f 0300 	mov.w	r3, #0
 800bd56:	008b      	lsls	r3, r1, #2
 800bd58:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800bd5c:	0082      	lsls	r2, r0, #2
 800bd5e:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 800bd62:	f7f4 ff51 	bl	8000c08 <__aeabi_uldivmod>
 800bd66:	4602      	mov	r2, r0
 800bd68:	460b      	mov	r3, r1
 800bd6a:	4b0f      	ldr	r3, [pc, #60]	; (800bda8 <UART_SetConfig+0x734>)
 800bd6c:	fba3 1302 	umull	r1, r3, r3, r2
 800bd70:	095b      	lsrs	r3, r3, #5
 800bd72:	2164      	movs	r1, #100	; 0x64
 800bd74:	fb01 f303 	mul.w	r3, r1, r3
 800bd78:	1ad3      	subs	r3, r2, r3
 800bd7a:	011b      	lsls	r3, r3, #4
 800bd7c:	3332      	adds	r3, #50	; 0x32
 800bd7e:	4a0a      	ldr	r2, [pc, #40]	; (800bda8 <UART_SetConfig+0x734>)
 800bd80:	fba2 2303 	umull	r2, r3, r2, r3
 800bd84:	095b      	lsrs	r3, r3, #5
 800bd86:	f003 020f 	and.w	r2, r3, #15
 800bd8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	4432      	add	r2, r6
 800bd92:	609a      	str	r2, [r3, #8]
}
 800bd94:	e7ff      	b.n	800bd96 <UART_SetConfig+0x722>
 800bd96:	bf00      	nop
 800bd98:	37f4      	adds	r7, #244	; 0xf4
 800bd9a:	46bd      	mov	sp, r7
 800bd9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bda0:	40011000 	.word	0x40011000
 800bda4:	40011400 	.word	0x40011400
 800bda8:	51eb851f 	.word	0x51eb851f

0800bdac <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800bdac:	b580      	push	{r7, lr}
 800bdae:	b084      	sub	sp, #16
 800bdb0:	af04      	add	r7, sp, #16
  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 800bdb2:	f000 fb1f 	bl	800c3f4 <lwip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 800bdb6:	4b19      	ldr	r3, [pc, #100]	; (800be1c <MX_LWIP_Init+0x70>)
 800bdb8:	2200      	movs	r2, #0
 800bdba:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 800bdbc:	4b18      	ldr	r3, [pc, #96]	; (800be20 <MX_LWIP_Init+0x74>)
 800bdbe:	2200      	movs	r2, #0
 800bdc0:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 800bdc2:	4b18      	ldr	r3, [pc, #96]	; (800be24 <MX_LWIP_Init+0x78>)
 800bdc4:	2200      	movs	r2, #0
 800bdc6:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 800bdc8:	4b17      	ldr	r3, [pc, #92]	; (800be28 <MX_LWIP_Init+0x7c>)
 800bdca:	9302      	str	r3, [sp, #8]
 800bdcc:	4b17      	ldr	r3, [pc, #92]	; (800be2c <MX_LWIP_Init+0x80>)
 800bdce:	9301      	str	r3, [sp, #4]
 800bdd0:	2300      	movs	r3, #0
 800bdd2:	9300      	str	r3, [sp, #0]
 800bdd4:	4b13      	ldr	r3, [pc, #76]	; (800be24 <MX_LWIP_Init+0x78>)
 800bdd6:	4a12      	ldr	r2, [pc, #72]	; (800be20 <MX_LWIP_Init+0x74>)
 800bdd8:	4910      	ldr	r1, [pc, #64]	; (800be1c <MX_LWIP_Init+0x70>)
 800bdda:	4815      	ldr	r0, [pc, #84]	; (800be30 <MX_LWIP_Init+0x84>)
 800bddc:	f000 ffb0 	bl	800cd40 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800bde0:	4813      	ldr	r0, [pc, #76]	; (800be30 <MX_LWIP_Init+0x84>)
 800bde2:	f001 f967 	bl	800d0b4 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800bde6:	4b12      	ldr	r3, [pc, #72]	; (800be30 <MX_LWIP_Init+0x84>)
 800bde8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800bdec:	089b      	lsrs	r3, r3, #2
 800bdee:	f003 0301 	and.w	r3, r3, #1
 800bdf2:	b2db      	uxtb	r3, r3
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d003      	beq.n	800be00 <MX_LWIP_Init+0x54>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 800bdf8:	480d      	ldr	r0, [pc, #52]	; (800be30 <MX_LWIP_Init+0x84>)
 800bdfa:	f001 f96b 	bl	800d0d4 <netif_set_up>
 800bdfe:	e002      	b.n	800be06 <MX_LWIP_Init+0x5a>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 800be00:	480b      	ldr	r0, [pc, #44]	; (800be30 <MX_LWIP_Init+0x84>)
 800be02:	f001 f9d3 	bl	800d1ac <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 800be06:	490b      	ldr	r1, [pc, #44]	; (800be34 <MX_LWIP_Init+0x88>)
 800be08:	4809      	ldr	r0, [pc, #36]	; (800be30 <MX_LWIP_Init+0x84>)
 800be0a:	f001 fa01 	bl	800d210 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 800be0e:	4808      	ldr	r0, [pc, #32]	; (800be30 <MX_LWIP_Init+0x84>)
 800be10:	f008 fa92 	bl	8014338 <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800be14:	bf00      	nop
 800be16:	46bd      	mov	sp, r7
 800be18:	bd80      	pop	{r7, pc}
 800be1a:	bf00      	nop
 800be1c:	20000f38 	.word	0x20000f38
 800be20:	20000f3c 	.word	0x20000f3c
 800be24:	20000f40 	.word	0x20000f40
 800be28:	08017d05 	.word	0x08017d05
 800be2c:	0800c221 	.word	0x0800c221
 800be30:	20000f00 	.word	0x20000f00
 800be34:	0800c28d 	.word	0x0800c28d

0800be38 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800be38:	b580      	push	{r7, lr}
 800be3a:	b08e      	sub	sp, #56	; 0x38
 800be3c:	af00      	add	r7, sp, #0
 800be3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800be40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800be44:	2200      	movs	r2, #0
 800be46:	601a      	str	r2, [r3, #0]
 800be48:	605a      	str	r2, [r3, #4]
 800be4a:	609a      	str	r2, [r3, #8]
 800be4c:	60da      	str	r2, [r3, #12]
 800be4e:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	681b      	ldr	r3, [r3, #0]
 800be54:	4a46      	ldr	r2, [pc, #280]	; (800bf70 <HAL_ETH_MspInit+0x138>)
 800be56:	4293      	cmp	r3, r2
 800be58:	f040 8085 	bne.w	800bf66 <HAL_ETH_MspInit+0x12e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 800be5c:	2300      	movs	r3, #0
 800be5e:	623b      	str	r3, [r7, #32]
 800be60:	4b44      	ldr	r3, [pc, #272]	; (800bf74 <HAL_ETH_MspInit+0x13c>)
 800be62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be64:	4a43      	ldr	r2, [pc, #268]	; (800bf74 <HAL_ETH_MspInit+0x13c>)
 800be66:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800be6a:	6313      	str	r3, [r2, #48]	; 0x30
 800be6c:	4b41      	ldr	r3, [pc, #260]	; (800bf74 <HAL_ETH_MspInit+0x13c>)
 800be6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800be74:	623b      	str	r3, [r7, #32]
 800be76:	6a3b      	ldr	r3, [r7, #32]
 800be78:	2300      	movs	r3, #0
 800be7a:	61fb      	str	r3, [r7, #28]
 800be7c:	4b3d      	ldr	r3, [pc, #244]	; (800bf74 <HAL_ETH_MspInit+0x13c>)
 800be7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be80:	4a3c      	ldr	r2, [pc, #240]	; (800bf74 <HAL_ETH_MspInit+0x13c>)
 800be82:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800be86:	6313      	str	r3, [r2, #48]	; 0x30
 800be88:	4b3a      	ldr	r3, [pc, #232]	; (800bf74 <HAL_ETH_MspInit+0x13c>)
 800be8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be8c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800be90:	61fb      	str	r3, [r7, #28]
 800be92:	69fb      	ldr	r3, [r7, #28]
 800be94:	2300      	movs	r3, #0
 800be96:	61bb      	str	r3, [r7, #24]
 800be98:	4b36      	ldr	r3, [pc, #216]	; (800bf74 <HAL_ETH_MspInit+0x13c>)
 800be9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be9c:	4a35      	ldr	r2, [pc, #212]	; (800bf74 <HAL_ETH_MspInit+0x13c>)
 800be9e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800bea2:	6313      	str	r3, [r2, #48]	; 0x30
 800bea4:	4b33      	ldr	r3, [pc, #204]	; (800bf74 <HAL_ETH_MspInit+0x13c>)
 800bea6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bea8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800beac:	61bb      	str	r3, [r7, #24]
 800beae:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800beb0:	2300      	movs	r3, #0
 800beb2:	617b      	str	r3, [r7, #20]
 800beb4:	4b2f      	ldr	r3, [pc, #188]	; (800bf74 <HAL_ETH_MspInit+0x13c>)
 800beb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800beb8:	4a2e      	ldr	r2, [pc, #184]	; (800bf74 <HAL_ETH_MspInit+0x13c>)
 800beba:	f043 0304 	orr.w	r3, r3, #4
 800bebe:	6313      	str	r3, [r2, #48]	; 0x30
 800bec0:	4b2c      	ldr	r3, [pc, #176]	; (800bf74 <HAL_ETH_MspInit+0x13c>)
 800bec2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bec4:	f003 0304 	and.w	r3, r3, #4
 800bec8:	617b      	str	r3, [r7, #20]
 800beca:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800becc:	2300      	movs	r3, #0
 800bece:	613b      	str	r3, [r7, #16]
 800bed0:	4b28      	ldr	r3, [pc, #160]	; (800bf74 <HAL_ETH_MspInit+0x13c>)
 800bed2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bed4:	4a27      	ldr	r2, [pc, #156]	; (800bf74 <HAL_ETH_MspInit+0x13c>)
 800bed6:	f043 0301 	orr.w	r3, r3, #1
 800beda:	6313      	str	r3, [r2, #48]	; 0x30
 800bedc:	4b25      	ldr	r3, [pc, #148]	; (800bf74 <HAL_ETH_MspInit+0x13c>)
 800bede:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bee0:	f003 0301 	and.w	r3, r3, #1
 800bee4:	613b      	str	r3, [r7, #16]
 800bee6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800bee8:	2300      	movs	r3, #0
 800beea:	60fb      	str	r3, [r7, #12]
 800beec:	4b21      	ldr	r3, [pc, #132]	; (800bf74 <HAL_ETH_MspInit+0x13c>)
 800beee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bef0:	4a20      	ldr	r2, [pc, #128]	; (800bf74 <HAL_ETH_MspInit+0x13c>)
 800bef2:	f043 0302 	orr.w	r3, r3, #2
 800bef6:	6313      	str	r3, [r2, #48]	; 0x30
 800bef8:	4b1e      	ldr	r3, [pc, #120]	; (800bf74 <HAL_ETH_MspInit+0x13c>)
 800befa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800befc:	f003 0302 	and.w	r3, r3, #2
 800bf00:	60fb      	str	r3, [r7, #12]
 800bf02:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800bf04:	2332      	movs	r3, #50	; 0x32
 800bf06:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bf08:	2302      	movs	r3, #2
 800bf0a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bf0c:	2300      	movs	r3, #0
 800bf0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bf10:	2303      	movs	r3, #3
 800bf12:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800bf14:	230b      	movs	r3, #11
 800bf16:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800bf18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bf1c:	4619      	mov	r1, r3
 800bf1e:	4816      	ldr	r0, [pc, #88]	; (800bf78 <HAL_ETH_MspInit+0x140>)
 800bf20:	f7fc fcc0 	bl	80088a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800bf24:	2386      	movs	r3, #134	; 0x86
 800bf26:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bf28:	2302      	movs	r3, #2
 800bf2a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bf2c:	2300      	movs	r3, #0
 800bf2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bf30:	2303      	movs	r3, #3
 800bf32:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800bf34:	230b      	movs	r3, #11
 800bf36:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bf38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bf3c:	4619      	mov	r1, r3
 800bf3e:	480f      	ldr	r0, [pc, #60]	; (800bf7c <HAL_ETH_MspInit+0x144>)
 800bf40:	f7fc fcb0 	bl	80088a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 800bf44:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800bf48:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bf4a:	2302      	movs	r3, #2
 800bf4c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bf4e:	2300      	movs	r3, #0
 800bf50:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bf52:	2303      	movs	r3, #3
 800bf54:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800bf56:	230b      	movs	r3, #11
 800bf58:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800bf5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bf5e:	4619      	mov	r1, r3
 800bf60:	4807      	ldr	r0, [pc, #28]	; (800bf80 <HAL_ETH_MspInit+0x148>)
 800bf62:	f7fc fc9f 	bl	80088a4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800bf66:	bf00      	nop
 800bf68:	3738      	adds	r7, #56	; 0x38
 800bf6a:	46bd      	mov	sp, r7
 800bf6c:	bd80      	pop	{r7, pc}
 800bf6e:	bf00      	nop
 800bf70:	40028000 	.word	0x40028000
 800bf74:	40023800 	.word	0x40023800
 800bf78:	40020800 	.word	0x40020800
 800bf7c:	40020000 	.word	0x40020000
 800bf80:	40020400 	.word	0x40020400

0800bf84 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800bf84:	b580      	push	{r7, lr}
 800bf86:	b086      	sub	sp, #24
 800bf88:	af00      	add	r7, sp, #0
 800bf8a:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 800bf8c:	2300      	movs	r3, #0
 800bf8e:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800bf90:	4b4e      	ldr	r3, [pc, #312]	; (800c0cc <low_level_init+0x148>)
 800bf92:	4a4f      	ldr	r2, [pc, #316]	; (800c0d0 <low_level_init+0x14c>)
 800bf94:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 800bf96:	4b4d      	ldr	r3, [pc, #308]	; (800c0cc <low_level_init+0x148>)
 800bf98:	2201      	movs	r2, #1
 800bf9a:	605a      	str	r2, [r3, #4]
  heth.Init.PhyAddress = DP83848_PHY_ADDRESS;
 800bf9c:	4b4b      	ldr	r3, [pc, #300]	; (800c0cc <low_level_init+0x148>)
 800bf9e:	2201      	movs	r2, #1
 800bfa0:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x02;
 800bfa2:	2302      	movs	r3, #2
 800bfa4:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x00;
 800bfa6:	2300      	movs	r3, #0
 800bfa8:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0x00;
 800bfaa:	2300      	movs	r3, #0
 800bfac:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 800bfae:	2300      	movs	r3, #0
 800bfb0:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 800bfb2:	2300      	movs	r3, #0
 800bfb4:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 800bfb6:	2300      	movs	r3, #0
 800bfb8:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 800bfba:	4a44      	ldr	r2, [pc, #272]	; (800c0cc <low_level_init+0x148>)
 800bfbc:	f107 0308 	add.w	r3, r7, #8
 800bfc0:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 800bfc2:	4b42      	ldr	r3, [pc, #264]	; (800c0cc <low_level_init+0x148>)
 800bfc4:	2200      	movs	r2, #0
 800bfc6:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 800bfc8:	4b40      	ldr	r3, [pc, #256]	; (800c0cc <low_level_init+0x148>)
 800bfca:	2200      	movs	r2, #0
 800bfcc:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 800bfce:	4b3f      	ldr	r3, [pc, #252]	; (800c0cc <low_level_init+0x148>)
 800bfd0:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800bfd4:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800bfd6:	483d      	ldr	r0, [pc, #244]	; (800c0cc <low_level_init+0x148>)
 800bfd8:	f7fb fbc2 	bl	8007760 <HAL_ETH_Init>
 800bfdc:	4603      	mov	r3, r0
 800bfde:	75fb      	strb	r3, [r7, #23]

  if (hal_eth_init_status == HAL_OK)
 800bfe0:	7dfb      	ldrb	r3, [r7, #23]
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	d108      	bne.n	800bff8 <low_level_init+0x74>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800bfec:	f043 0304 	orr.w	r3, r3, #4
 800bff0:	b2da      	uxtb	r2, r3
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 800bff8:	2304      	movs	r3, #4
 800bffa:	4a36      	ldr	r2, [pc, #216]	; (800c0d4 <low_level_init+0x150>)
 800bffc:	4936      	ldr	r1, [pc, #216]	; (800c0d8 <low_level_init+0x154>)
 800bffe:	4833      	ldr	r0, [pc, #204]	; (800c0cc <low_level_init+0x148>)
 800c000:	f7fb fd4a 	bl	8007a98 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 800c004:	2304      	movs	r3, #4
 800c006:	4a35      	ldr	r2, [pc, #212]	; (800c0dc <low_level_init+0x158>)
 800c008:	4935      	ldr	r1, [pc, #212]	; (800c0e0 <low_level_init+0x15c>)
 800c00a:	4830      	ldr	r0, [pc, #192]	; (800c0cc <low_level_init+0x148>)
 800c00c:	f7fb fdad 	bl	8007b6a <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	2206      	movs	r2, #6
 800c014:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800c018:	4b2c      	ldr	r3, [pc, #176]	; (800c0cc <low_level_init+0x148>)
 800c01a:	695b      	ldr	r3, [r3, #20]
 800c01c:	781a      	ldrb	r2, [r3, #0]
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800c024:	4b29      	ldr	r3, [pc, #164]	; (800c0cc <low_level_init+0x148>)
 800c026:	695b      	ldr	r3, [r3, #20]
 800c028:	785a      	ldrb	r2, [r3, #1]
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800c030:	4b26      	ldr	r3, [pc, #152]	; (800c0cc <low_level_init+0x148>)
 800c032:	695b      	ldr	r3, [r3, #20]
 800c034:	789a      	ldrb	r2, [r3, #2]
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800c03c:	4b23      	ldr	r3, [pc, #140]	; (800c0cc <low_level_init+0x148>)
 800c03e:	695b      	ldr	r3, [r3, #20]
 800c040:	78da      	ldrb	r2, [r3, #3]
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800c048:	4b20      	ldr	r3, [pc, #128]	; (800c0cc <low_level_init+0x148>)
 800c04a:	695b      	ldr	r3, [r3, #20]
 800c04c:	791a      	ldrb	r2, [r3, #4]
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800c054:	4b1d      	ldr	r3, [pc, #116]	; (800c0cc <low_level_init+0x148>)
 800c056:	695b      	ldr	r3, [r3, #20]
 800c058:	795a      	ldrb	r2, [r3, #5]
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

  /* maximum transfer unit */
  netif->mtu = 1500;
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800c066:	851a      	strh	r2, [r3, #40]	; 0x28

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c06e:	f043 030a 	orr.w	r3, r3, #10
 800c072:	b2da      	uxtb	r2, r3
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 800c07a:	4814      	ldr	r0, [pc, #80]	; (800c0cc <low_level_init+0x148>)
 800c07c:	f7fb ff9a 	bl	8007fb4 <HAL_ETH_Start>

/* USER CODE END PHY_PRE_CONFIG */

  /**** Configure PHY to generate an interrupt when Eth Link state changes ****/
  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_MICR, &regvalue);
 800c080:	f107 0310 	add.w	r3, r7, #16
 800c084:	461a      	mov	r2, r3
 800c086:	2111      	movs	r1, #17
 800c088:	4810      	ldr	r0, [pc, #64]	; (800c0cc <low_level_init+0x148>)
 800c08a:	f7fb fec5 	bl	8007e18 <HAL_ETH_ReadPHYRegister>

  regvalue |= (PHY_MICR_INT_EN | PHY_MICR_INT_OE);
 800c08e:	693b      	ldr	r3, [r7, #16]
 800c090:	f043 0303 	orr.w	r3, r3, #3
 800c094:	613b      	str	r3, [r7, #16]

  /* Enable Interrupts */
  HAL_ETH_WritePHYRegister(&heth, PHY_MICR, regvalue );
 800c096:	693b      	ldr	r3, [r7, #16]
 800c098:	461a      	mov	r2, r3
 800c09a:	2111      	movs	r1, #17
 800c09c:	480b      	ldr	r0, [pc, #44]	; (800c0cc <low_level_init+0x148>)
 800c09e:	f7fb ff23 	bl	8007ee8 <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_MISR, &regvalue);
 800c0a2:	f107 0310 	add.w	r3, r7, #16
 800c0a6:	461a      	mov	r2, r3
 800c0a8:	2112      	movs	r1, #18
 800c0aa:	4808      	ldr	r0, [pc, #32]	; (800c0cc <low_level_init+0x148>)
 800c0ac:	f7fb feb4 	bl	8007e18 <HAL_ETH_ReadPHYRegister>

  regvalue |= PHY_MISR_LINK_INT_EN;
 800c0b0:	693b      	ldr	r3, [r7, #16]
 800c0b2:	f043 0320 	orr.w	r3, r3, #32
 800c0b6:	613b      	str	r3, [r7, #16]

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_MISR, regvalue);
 800c0b8:	693b      	ldr	r3, [r7, #16]
 800c0ba:	461a      	mov	r2, r3
 800c0bc:	2112      	movs	r1, #18
 800c0be:	4803      	ldr	r0, [pc, #12]	; (800c0cc <low_level_init+0x148>)
 800c0c0:	f7fb ff12 	bl	8007ee8 <HAL_ETH_WritePHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800c0c4:	bf00      	nop
 800c0c6:	3718      	adds	r7, #24
 800c0c8:	46bd      	mov	sp, r7
 800c0ca:	bd80      	pop	{r7, pc}
 800c0cc:	20002814 	.word	0x20002814
 800c0d0:	40028000 	.word	0x40028000
 800c0d4:	2000285c 	.word	0x2000285c
 800c0d8:	20000f44 	.word	0x20000f44
 800c0dc:	20000fc4 	.word	0x20000fc4
 800c0e0:	20002794 	.word	0x20002794

0800c0e4 <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800c0e4:	b580      	push	{r7, lr}
 800c0e6:	b08a      	sub	sp, #40	; 0x28
 800c0e8:	af00      	add	r7, sp, #0
 800c0ea:	6078      	str	r0, [r7, #4]
 800c0ec:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 800c0ee:	4b4b      	ldr	r3, [pc, #300]	; (800c21c <low_level_output+0x138>)
 800c0f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0f2:	689b      	ldr	r3, [r3, #8]
 800c0f4:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 800c0f6:	2300      	movs	r3, #0
 800c0f8:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 800c0fa:	2300      	movs	r3, #0
 800c0fc:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 800c0fe:	2300      	movs	r3, #0
 800c100:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 800c102:	2300      	movs	r3, #0
 800c104:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 800c106:	4b45      	ldr	r3, [pc, #276]	; (800c21c <low_level_output+0x138>)
 800c108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c10a:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 800c10c:	2300      	movs	r3, #0
 800c10e:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 800c110:	683b      	ldr	r3, [r7, #0]
 800c112:	623b      	str	r3, [r7, #32]
 800c114:	e05a      	b.n	800c1cc <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800c116:	69bb      	ldr	r3, [r7, #24]
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	da03      	bge.n	800c126 <low_level_output+0x42>
      {
        errval = ERR_USE;
 800c11e:	23f8      	movs	r3, #248	; 0xf8
 800c120:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 800c124:	e05c      	b.n	800c1e0 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 800c126:	6a3b      	ldr	r3, [r7, #32]
 800c128:	895b      	ldrh	r3, [r3, #10]
 800c12a:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 800c12c:	2300      	movs	r3, #0
 800c12e:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800c130:	e02f      	b.n	800c192 <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 800c132:	69fa      	ldr	r2, [r7, #28]
 800c134:	693b      	ldr	r3, [r7, #16]
 800c136:	18d0      	adds	r0, r2, r3
 800c138:	6a3b      	ldr	r3, [r7, #32]
 800c13a:	685a      	ldr	r2, [r3, #4]
 800c13c:	68bb      	ldr	r3, [r7, #8]
 800c13e:	18d1      	adds	r1, r2, r3
 800c140:	693b      	ldr	r3, [r7, #16]
 800c142:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 800c146:	3304      	adds	r3, #4
 800c148:	461a      	mov	r2, r3
 800c14a:	f00b fefb 	bl	8017f44 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 800c14e:	69bb      	ldr	r3, [r7, #24]
 800c150:	68db      	ldr	r3, [r3, #12]
 800c152:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800c154:	69bb      	ldr	r3, [r7, #24]
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	2b00      	cmp	r3, #0
 800c15a:	da03      	bge.n	800c164 <low_level_output+0x80>
        {
          errval = ERR_USE;
 800c15c:	23f8      	movs	r3, #248	; 0xf8
 800c15e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 800c162:	e03d      	b.n	800c1e0 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 800c164:	69bb      	ldr	r3, [r7, #24]
 800c166:	689b      	ldr	r3, [r3, #8]
 800c168:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 800c16a:	693a      	ldr	r2, [r7, #16]
 800c16c:	68fb      	ldr	r3, [r7, #12]
 800c16e:	4413      	add	r3, r2
 800c170:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 800c174:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 800c176:	68ba      	ldr	r2, [r7, #8]
 800c178:	693b      	ldr	r3, [r7, #16]
 800c17a:	1ad3      	subs	r3, r2, r3
 800c17c:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800c180:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 800c182:	697a      	ldr	r2, [r7, #20]
 800c184:	693b      	ldr	r3, [r7, #16]
 800c186:	1ad3      	subs	r3, r2, r3
 800c188:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800c18c:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 800c18e:	2300      	movs	r3, #0
 800c190:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800c192:	68fa      	ldr	r2, [r7, #12]
 800c194:	693b      	ldr	r3, [r7, #16]
 800c196:	4413      	add	r3, r2
 800c198:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800c19c:	4293      	cmp	r3, r2
 800c19e:	d8c8      	bhi.n	800c132 <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 800c1a0:	69fa      	ldr	r2, [r7, #28]
 800c1a2:	693b      	ldr	r3, [r7, #16]
 800c1a4:	18d0      	adds	r0, r2, r3
 800c1a6:	6a3b      	ldr	r3, [r7, #32]
 800c1a8:	685a      	ldr	r2, [r3, #4]
 800c1aa:	68bb      	ldr	r3, [r7, #8]
 800c1ac:	4413      	add	r3, r2
 800c1ae:	68fa      	ldr	r2, [r7, #12]
 800c1b0:	4619      	mov	r1, r3
 800c1b2:	f00b fec7 	bl	8017f44 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 800c1b6:	693a      	ldr	r2, [r7, #16]
 800c1b8:	68fb      	ldr	r3, [r7, #12]
 800c1ba:	4413      	add	r3, r2
 800c1bc:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 800c1be:	697a      	ldr	r2, [r7, #20]
 800c1c0:	68fb      	ldr	r3, [r7, #12]
 800c1c2:	4413      	add	r3, r2
 800c1c4:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 800c1c6:	6a3b      	ldr	r3, [r7, #32]
 800c1c8:	681b      	ldr	r3, [r3, #0]
 800c1ca:	623b      	str	r3, [r7, #32]
 800c1cc:	6a3b      	ldr	r3, [r7, #32]
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	d1a1      	bne.n	800c116 <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 800c1d2:	6979      	ldr	r1, [r7, #20]
 800c1d4:	4811      	ldr	r0, [pc, #68]	; (800c21c <low_level_output+0x138>)
 800c1d6:	f7fb fd35 	bl	8007c44 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 800c1da:	2300      	movs	r3, #0
 800c1dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 800c1e0:	4b0e      	ldr	r3, [pc, #56]	; (800c21c <low_level_output+0x138>)
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c1e8:	3314      	adds	r3, #20
 800c1ea:	681b      	ldr	r3, [r3, #0]
 800c1ec:	f003 0320 	and.w	r3, r3, #32
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d00d      	beq.n	800c210 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 800c1f4:	4b09      	ldr	r3, [pc, #36]	; (800c21c <low_level_output+0x138>)
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c1fc:	3314      	adds	r3, #20
 800c1fe:	2220      	movs	r2, #32
 800c200:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 800c202:	4b06      	ldr	r3, [pc, #24]	; (800c21c <low_level_output+0x138>)
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c20a:	3304      	adds	r3, #4
 800c20c:	2200      	movs	r2, #0
 800c20e:	601a      	str	r2, [r3, #0]
  }
  return errval;
 800c210:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800c214:	4618      	mov	r0, r3
 800c216:	3728      	adds	r7, #40	; 0x28
 800c218:	46bd      	mov	sp, r7
 800c21a:	bd80      	pop	{r7, pc}
 800c21c:	20002814 	.word	0x20002814

0800c220 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800c220:	b580      	push	{r7, lr}
 800c222:	b082      	sub	sp, #8
 800c224:	af00      	add	r7, sp, #0
 800c226:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	d106      	bne.n	800c23c <ethernetif_init+0x1c>
 800c22e:	4b0e      	ldr	r3, [pc, #56]	; (800c268 <ethernetif_init+0x48>)
 800c230:	f44f 7203 	mov.w	r2, #524	; 0x20c
 800c234:	490d      	ldr	r1, [pc, #52]	; (800c26c <ethernetif_init+0x4c>)
 800c236:	480e      	ldr	r0, [pc, #56]	; (800c270 <ethernetif_init+0x50>)
 800c238:	f00c fbc8 	bl	80189cc <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	2273      	movs	r2, #115	; 0x73
 800c240:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  netif->name[1] = IFNAME1;
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	2274      	movs	r2, #116	; 0x74
 800c248:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	4a09      	ldr	r2, [pc, #36]	; (800c274 <ethernetif_init+0x54>)
 800c250:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	4a08      	ldr	r2, [pc, #32]	; (800c278 <ethernetif_init+0x58>)
 800c256:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800c258:	6878      	ldr	r0, [r7, #4]
 800c25a:	f7ff fe93 	bl	800bf84 <low_level_init>

  return ERR_OK;
 800c25e:	2300      	movs	r3, #0
}
 800c260:	4618      	mov	r0, r3
 800c262:	3708      	adds	r7, #8
 800c264:	46bd      	mov	sp, r7
 800c266:	bd80      	pop	{r7, pc}
 800c268:	0801e004 	.word	0x0801e004
 800c26c:	0801e020 	.word	0x0801e020
 800c270:	0801e030 	.word	0x0801e030
 800c274:	0801618d 	.word	0x0801618d
 800c278:	0800c0e5 	.word	0x0800c0e5

0800c27c <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 800c27c:	b580      	push	{r7, lr}
 800c27e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800c280:	f7fa f9e0 	bl	8006644 <HAL_GetTick>
 800c284:	4603      	mov	r3, r0
}
 800c286:	4618      	mov	r0, r3
 800c288:	bd80      	pop	{r7, pc}
	...

0800c28c <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 800c28c:	b580      	push	{r7, lr}
 800c28e:	b084      	sub	sp, #16
 800c290:	af00      	add	r7, sp, #0
 800c292:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 800c294:	2300      	movs	r3, #0
 800c296:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 800c298:	2300      	movs	r3, #0
 800c29a:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c2a2:	089b      	lsrs	r3, r3, #2
 800c2a4:	f003 0301 	and.w	r3, r3, #1
 800c2a8:	b2db      	uxtb	r3, r3
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	d05d      	beq.n	800c36a <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 800c2ae:	4b34      	ldr	r3, [pc, #208]	; (800c380 <ethernetif_update_config+0xf4>)
 800c2b0:	685b      	ldr	r3, [r3, #4]
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	d03f      	beq.n	800c336 <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 800c2b6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800c2ba:	2100      	movs	r1, #0
 800c2bc:	4830      	ldr	r0, [pc, #192]	; (800c380 <ethernetif_update_config+0xf4>)
 800c2be:	f7fb fe13 	bl	8007ee8 <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 800c2c2:	f7fa f9bf 	bl	8006644 <HAL_GetTick>
 800c2c6:	4603      	mov	r3, r0
 800c2c8:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 800c2ca:	f107 0308 	add.w	r3, r7, #8
 800c2ce:	461a      	mov	r2, r3
 800c2d0:	2101      	movs	r1, #1
 800c2d2:	482b      	ldr	r0, [pc, #172]	; (800c380 <ethernetif_update_config+0xf4>)
 800c2d4:	f7fb fda0 	bl	8007e18 <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 800c2d8:	f7fa f9b4 	bl	8006644 <HAL_GetTick>
 800c2dc:	4602      	mov	r2, r0
 800c2de:	68fb      	ldr	r3, [r7, #12]
 800c2e0:	1ad3      	subs	r3, r2, r3
 800c2e2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c2e6:	d828      	bhi.n	800c33a <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 800c2e8:	68bb      	ldr	r3, [r7, #8]
 800c2ea:	f003 0320 	and.w	r3, r3, #32
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d0eb      	beq.n	800c2ca <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 800c2f2:	f107 0308 	add.w	r3, r7, #8
 800c2f6:	461a      	mov	r2, r3
 800c2f8:	211f      	movs	r1, #31
 800c2fa:	4821      	ldr	r0, [pc, #132]	; (800c380 <ethernetif_update_config+0xf4>)
 800c2fc:	f7fb fd8c 	bl	8007e18 <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 800c300:	68bb      	ldr	r3, [r7, #8]
 800c302:	f003 0310 	and.w	r3, r3, #16
 800c306:	2b00      	cmp	r3, #0
 800c308:	d004      	beq.n	800c314 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 800c30a:	4b1d      	ldr	r3, [pc, #116]	; (800c380 <ethernetif_update_config+0xf4>)
 800c30c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c310:	60da      	str	r2, [r3, #12]
 800c312:	e002      	b.n	800c31a <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 800c314:	4b1a      	ldr	r3, [pc, #104]	; (800c380 <ethernetif_update_config+0xf4>)
 800c316:	2200      	movs	r2, #0
 800c318:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 800c31a:	68bb      	ldr	r3, [r7, #8]
 800c31c:	f003 0304 	and.w	r3, r3, #4
 800c320:	2b00      	cmp	r3, #0
 800c322:	d003      	beq.n	800c32c <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 800c324:	4b16      	ldr	r3, [pc, #88]	; (800c380 <ethernetif_update_config+0xf4>)
 800c326:	2200      	movs	r2, #0
 800c328:	609a      	str	r2, [r3, #8]
 800c32a:	e016      	b.n	800c35a <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 800c32c:	4b14      	ldr	r3, [pc, #80]	; (800c380 <ethernetif_update_config+0xf4>)
 800c32e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800c332:	609a      	str	r2, [r3, #8]
 800c334:	e011      	b.n	800c35a <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 800c336:	bf00      	nop
 800c338:	e000      	b.n	800c33c <ethernetif_update_config+0xb0>
          goto error;
 800c33a:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 800c33c:	4b10      	ldr	r3, [pc, #64]	; (800c380 <ethernetif_update_config+0xf4>)
 800c33e:	68db      	ldr	r3, [r3, #12]
 800c340:	08db      	lsrs	r3, r3, #3
 800c342:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 800c344:	4b0e      	ldr	r3, [pc, #56]	; (800c380 <ethernetif_update_config+0xf4>)
 800c346:	689b      	ldr	r3, [r3, #8]
 800c348:	085b      	lsrs	r3, r3, #1
 800c34a:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 800c34c:	4313      	orrs	r3, r2
 800c34e:	b29b      	uxth	r3, r3
 800c350:	461a      	mov	r2, r3
 800c352:	2100      	movs	r1, #0
 800c354:	480a      	ldr	r0, [pc, #40]	; (800c380 <ethernetif_update_config+0xf4>)
 800c356:	f7fb fdc7 	bl	8007ee8 <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 800c35a:	2100      	movs	r1, #0
 800c35c:	4808      	ldr	r0, [pc, #32]	; (800c380 <ethernetif_update_config+0xf4>)
 800c35e:	f7fb fe87 	bl	8008070 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 800c362:	4807      	ldr	r0, [pc, #28]	; (800c380 <ethernetif_update_config+0xf4>)
 800c364:	f7fb fe26 	bl	8007fb4 <HAL_ETH_Start>
 800c368:	e002      	b.n	800c370 <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 800c36a:	4805      	ldr	r0, [pc, #20]	; (800c380 <ethernetif_update_config+0xf4>)
 800c36c:	f7fb fe51 	bl	8008012 <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 800c370:	6878      	ldr	r0, [r7, #4]
 800c372:	f000 f807 	bl	800c384 <ethernetif_notify_conn_changed>
}
 800c376:	bf00      	nop
 800c378:	3710      	adds	r7, #16
 800c37a:	46bd      	mov	sp, r7
 800c37c:	bd80      	pop	{r7, pc}
 800c37e:	bf00      	nop
 800c380:	20002814 	.word	0x20002814

0800c384 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 800c384:	b480      	push	{r7}
 800c386:	b083      	sub	sp, #12
 800c388:	af00      	add	r7, sp, #0
 800c38a:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 800c38c:	bf00      	nop
 800c38e:	370c      	adds	r7, #12
 800c390:	46bd      	mov	sp, r7
 800c392:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c396:	4770      	bx	lr

0800c398 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800c398:	b480      	push	{r7}
 800c39a:	b083      	sub	sp, #12
 800c39c:	af00      	add	r7, sp, #0
 800c39e:	4603      	mov	r3, r0
 800c3a0:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800c3a2:	88fb      	ldrh	r3, [r7, #6]
 800c3a4:	021b      	lsls	r3, r3, #8
 800c3a6:	b21a      	sxth	r2, r3
 800c3a8:	88fb      	ldrh	r3, [r7, #6]
 800c3aa:	0a1b      	lsrs	r3, r3, #8
 800c3ac:	b29b      	uxth	r3, r3
 800c3ae:	b21b      	sxth	r3, r3
 800c3b0:	4313      	orrs	r3, r2
 800c3b2:	b21b      	sxth	r3, r3
 800c3b4:	b29b      	uxth	r3, r3
}
 800c3b6:	4618      	mov	r0, r3
 800c3b8:	370c      	adds	r7, #12
 800c3ba:	46bd      	mov	sp, r7
 800c3bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3c0:	4770      	bx	lr

0800c3c2 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800c3c2:	b480      	push	{r7}
 800c3c4:	b083      	sub	sp, #12
 800c3c6:	af00      	add	r7, sp, #0
 800c3c8:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	061a      	lsls	r2, r3, #24
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	021b      	lsls	r3, r3, #8
 800c3d2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c3d6:	431a      	orrs	r2, r3
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	0a1b      	lsrs	r3, r3, #8
 800c3dc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800c3e0:	431a      	orrs	r2, r3
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	0e1b      	lsrs	r3, r3, #24
 800c3e6:	4313      	orrs	r3, r2
}
 800c3e8:	4618      	mov	r0, r3
 800c3ea:	370c      	adds	r7, #12
 800c3ec:	46bd      	mov	sp, r7
 800c3ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3f2:	4770      	bx	lr

0800c3f4 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800c3f4:	b580      	push	{r7, lr}
 800c3f6:	b082      	sub	sp, #8
 800c3f8:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800c3fa:	2300      	movs	r3, #0
 800c3fc:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 800c3fe:	f000 f8d5 	bl	800c5ac <mem_init>
  memp_init();
 800c402:	f000 fbdb 	bl	800cbbc <memp_init>
  pbuf_init();
  netif_init();
 800c406:	f000 fc93 	bl	800cd30 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800c40a:	f006 ff5d 	bl	80132c8 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800c40e:	f001 fcfd 	bl	800de0c <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800c412:	f006 ff11 	bl	8013238 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800c416:	bf00      	nop
 800c418:	3708      	adds	r7, #8
 800c41a:	46bd      	mov	sp, r7
 800c41c:	bd80      	pop	{r7, pc}
	...

0800c420 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800c420:	b480      	push	{r7}
 800c422:	b083      	sub	sp, #12
 800c424:	af00      	add	r7, sp, #0
 800c426:	4603      	mov	r3, r0
 800c428:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800c42a:	4b05      	ldr	r3, [pc, #20]	; (800c440 <ptr_to_mem+0x20>)
 800c42c:	681a      	ldr	r2, [r3, #0]
 800c42e:	88fb      	ldrh	r3, [r7, #6]
 800c430:	4413      	add	r3, r2
}
 800c432:	4618      	mov	r0, r3
 800c434:	370c      	adds	r7, #12
 800c436:	46bd      	mov	sp, r7
 800c438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c43c:	4770      	bx	lr
 800c43e:	bf00      	nop
 800c440:	20000468 	.word	0x20000468

0800c444 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800c444:	b480      	push	{r7}
 800c446:	b083      	sub	sp, #12
 800c448:	af00      	add	r7, sp, #0
 800c44a:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800c44c:	4b05      	ldr	r3, [pc, #20]	; (800c464 <mem_to_ptr+0x20>)
 800c44e:	681b      	ldr	r3, [r3, #0]
 800c450:	687a      	ldr	r2, [r7, #4]
 800c452:	1ad3      	subs	r3, r2, r3
 800c454:	b29b      	uxth	r3, r3
}
 800c456:	4618      	mov	r0, r3
 800c458:	370c      	adds	r7, #12
 800c45a:	46bd      	mov	sp, r7
 800c45c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c460:	4770      	bx	lr
 800c462:	bf00      	nop
 800c464:	20000468 	.word	0x20000468

0800c468 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800c468:	b590      	push	{r4, r7, lr}
 800c46a:	b085      	sub	sp, #20
 800c46c:	af00      	add	r7, sp, #0
 800c46e:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800c470:	4b45      	ldr	r3, [pc, #276]	; (800c588 <plug_holes+0x120>)
 800c472:	681b      	ldr	r3, [r3, #0]
 800c474:	687a      	ldr	r2, [r7, #4]
 800c476:	429a      	cmp	r2, r3
 800c478:	d206      	bcs.n	800c488 <plug_holes+0x20>
 800c47a:	4b44      	ldr	r3, [pc, #272]	; (800c58c <plug_holes+0x124>)
 800c47c:	f240 12df 	movw	r2, #479	; 0x1df
 800c480:	4943      	ldr	r1, [pc, #268]	; (800c590 <plug_holes+0x128>)
 800c482:	4844      	ldr	r0, [pc, #272]	; (800c594 <plug_holes+0x12c>)
 800c484:	f00c faa2 	bl	80189cc <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800c488:	4b43      	ldr	r3, [pc, #268]	; (800c598 <plug_holes+0x130>)
 800c48a:	681b      	ldr	r3, [r3, #0]
 800c48c:	687a      	ldr	r2, [r7, #4]
 800c48e:	429a      	cmp	r2, r3
 800c490:	d306      	bcc.n	800c4a0 <plug_holes+0x38>
 800c492:	4b3e      	ldr	r3, [pc, #248]	; (800c58c <plug_holes+0x124>)
 800c494:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800c498:	4940      	ldr	r1, [pc, #256]	; (800c59c <plug_holes+0x134>)
 800c49a:	483e      	ldr	r0, [pc, #248]	; (800c594 <plug_holes+0x12c>)
 800c49c:	f00c fa96 	bl	80189cc <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	791b      	ldrb	r3, [r3, #4]
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d006      	beq.n	800c4b6 <plug_holes+0x4e>
 800c4a8:	4b38      	ldr	r3, [pc, #224]	; (800c58c <plug_holes+0x124>)
 800c4aa:	f240 12e1 	movw	r2, #481	; 0x1e1
 800c4ae:	493c      	ldr	r1, [pc, #240]	; (800c5a0 <plug_holes+0x138>)
 800c4b0:	4838      	ldr	r0, [pc, #224]	; (800c594 <plug_holes+0x12c>)
 800c4b2:	f00c fa8b 	bl	80189cc <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	881b      	ldrh	r3, [r3, #0]
 800c4ba:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c4be:	d906      	bls.n	800c4ce <plug_holes+0x66>
 800c4c0:	4b32      	ldr	r3, [pc, #200]	; (800c58c <plug_holes+0x124>)
 800c4c2:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800c4c6:	4937      	ldr	r1, [pc, #220]	; (800c5a4 <plug_holes+0x13c>)
 800c4c8:	4832      	ldr	r0, [pc, #200]	; (800c594 <plug_holes+0x12c>)
 800c4ca:	f00c fa7f 	bl	80189cc <iprintf>

  nmem = ptr_to_mem(mem->next);
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	881b      	ldrh	r3, [r3, #0]
 800c4d2:	4618      	mov	r0, r3
 800c4d4:	f7ff ffa4 	bl	800c420 <ptr_to_mem>
 800c4d8:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800c4da:	687a      	ldr	r2, [r7, #4]
 800c4dc:	68fb      	ldr	r3, [r7, #12]
 800c4de:	429a      	cmp	r2, r3
 800c4e0:	d024      	beq.n	800c52c <plug_holes+0xc4>
 800c4e2:	68fb      	ldr	r3, [r7, #12]
 800c4e4:	791b      	ldrb	r3, [r3, #4]
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	d120      	bne.n	800c52c <plug_holes+0xc4>
 800c4ea:	4b2b      	ldr	r3, [pc, #172]	; (800c598 <plug_holes+0x130>)
 800c4ec:	681b      	ldr	r3, [r3, #0]
 800c4ee:	68fa      	ldr	r2, [r7, #12]
 800c4f0:	429a      	cmp	r2, r3
 800c4f2:	d01b      	beq.n	800c52c <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800c4f4:	4b2c      	ldr	r3, [pc, #176]	; (800c5a8 <plug_holes+0x140>)
 800c4f6:	681b      	ldr	r3, [r3, #0]
 800c4f8:	68fa      	ldr	r2, [r7, #12]
 800c4fa:	429a      	cmp	r2, r3
 800c4fc:	d102      	bne.n	800c504 <plug_holes+0x9c>
      lfree = mem;
 800c4fe:	4a2a      	ldr	r2, [pc, #168]	; (800c5a8 <plug_holes+0x140>)
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800c504:	68fb      	ldr	r3, [r7, #12]
 800c506:	881a      	ldrh	r2, [r3, #0]
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800c50c:	68fb      	ldr	r3, [r7, #12]
 800c50e:	881b      	ldrh	r3, [r3, #0]
 800c510:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c514:	d00a      	beq.n	800c52c <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800c516:	68fb      	ldr	r3, [r7, #12]
 800c518:	881b      	ldrh	r3, [r3, #0]
 800c51a:	4618      	mov	r0, r3
 800c51c:	f7ff ff80 	bl	800c420 <ptr_to_mem>
 800c520:	4604      	mov	r4, r0
 800c522:	6878      	ldr	r0, [r7, #4]
 800c524:	f7ff ff8e 	bl	800c444 <mem_to_ptr>
 800c528:	4603      	mov	r3, r0
 800c52a:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	885b      	ldrh	r3, [r3, #2]
 800c530:	4618      	mov	r0, r3
 800c532:	f7ff ff75 	bl	800c420 <ptr_to_mem>
 800c536:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800c538:	68ba      	ldr	r2, [r7, #8]
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	429a      	cmp	r2, r3
 800c53e:	d01f      	beq.n	800c580 <plug_holes+0x118>
 800c540:	68bb      	ldr	r3, [r7, #8]
 800c542:	791b      	ldrb	r3, [r3, #4]
 800c544:	2b00      	cmp	r3, #0
 800c546:	d11b      	bne.n	800c580 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800c548:	4b17      	ldr	r3, [pc, #92]	; (800c5a8 <plug_holes+0x140>)
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	687a      	ldr	r2, [r7, #4]
 800c54e:	429a      	cmp	r2, r3
 800c550:	d102      	bne.n	800c558 <plug_holes+0xf0>
      lfree = pmem;
 800c552:	4a15      	ldr	r2, [pc, #84]	; (800c5a8 <plug_holes+0x140>)
 800c554:	68bb      	ldr	r3, [r7, #8]
 800c556:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	881a      	ldrh	r2, [r3, #0]
 800c55c:	68bb      	ldr	r3, [r7, #8]
 800c55e:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	881b      	ldrh	r3, [r3, #0]
 800c564:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c568:	d00a      	beq.n	800c580 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	881b      	ldrh	r3, [r3, #0]
 800c56e:	4618      	mov	r0, r3
 800c570:	f7ff ff56 	bl	800c420 <ptr_to_mem>
 800c574:	4604      	mov	r4, r0
 800c576:	68b8      	ldr	r0, [r7, #8]
 800c578:	f7ff ff64 	bl	800c444 <mem_to_ptr>
 800c57c:	4603      	mov	r3, r0
 800c57e:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800c580:	bf00      	nop
 800c582:	3714      	adds	r7, #20
 800c584:	46bd      	mov	sp, r7
 800c586:	bd90      	pop	{r4, r7, pc}
 800c588:	20000468 	.word	0x20000468
 800c58c:	0801e058 	.word	0x0801e058
 800c590:	0801e088 	.word	0x0801e088
 800c594:	0801e0a0 	.word	0x0801e0a0
 800c598:	2000046c 	.word	0x2000046c
 800c59c:	0801e0c8 	.word	0x0801e0c8
 800c5a0:	0801e0e4 	.word	0x0801e0e4
 800c5a4:	0801e100 	.word	0x0801e100
 800c5a8:	20000470 	.word	0x20000470

0800c5ac <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800c5ac:	b580      	push	{r7, lr}
 800c5ae:	b082      	sub	sp, #8
 800c5b0:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800c5b2:	4b18      	ldr	r3, [pc, #96]	; (800c614 <mem_init+0x68>)
 800c5b4:	3303      	adds	r3, #3
 800c5b6:	f023 0303 	bic.w	r3, r3, #3
 800c5ba:	461a      	mov	r2, r3
 800c5bc:	4b16      	ldr	r3, [pc, #88]	; (800c618 <mem_init+0x6c>)
 800c5be:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800c5c0:	4b15      	ldr	r3, [pc, #84]	; (800c618 <mem_init+0x6c>)
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800c5cc:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	2200      	movs	r2, #0
 800c5d2:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	2200      	movs	r2, #0
 800c5d8:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800c5da:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800c5de:	f7ff ff1f 	bl	800c420 <ptr_to_mem>
 800c5e2:	4603      	mov	r3, r0
 800c5e4:	4a0d      	ldr	r2, [pc, #52]	; (800c61c <mem_init+0x70>)
 800c5e6:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800c5e8:	4b0c      	ldr	r3, [pc, #48]	; (800c61c <mem_init+0x70>)
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	2201      	movs	r2, #1
 800c5ee:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800c5f0:	4b0a      	ldr	r3, [pc, #40]	; (800c61c <mem_init+0x70>)
 800c5f2:	681b      	ldr	r3, [r3, #0]
 800c5f4:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800c5f8:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800c5fa:	4b08      	ldr	r3, [pc, #32]	; (800c61c <mem_init+0x70>)
 800c5fc:	681b      	ldr	r3, [r3, #0]
 800c5fe:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800c602:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800c604:	4b04      	ldr	r3, [pc, #16]	; (800c618 <mem_init+0x6c>)
 800c606:	681b      	ldr	r3, [r3, #0]
 800c608:	4a05      	ldr	r2, [pc, #20]	; (800c620 <mem_init+0x74>)
 800c60a:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 800c60c:	bf00      	nop
 800c60e:	3708      	adds	r7, #8
 800c610:	46bd      	mov	sp, r7
 800c612:	bd80      	pop	{r7, pc}
 800c614:	20004044 	.word	0x20004044
 800c618:	20000468 	.word	0x20000468
 800c61c:	2000046c 	.word	0x2000046c
 800c620:	20000470 	.word	0x20000470

0800c624 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800c624:	b580      	push	{r7, lr}
 800c626:	b086      	sub	sp, #24
 800c628:	af00      	add	r7, sp, #0
 800c62a:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800c62c:	6878      	ldr	r0, [r7, #4]
 800c62e:	f7ff ff09 	bl	800c444 <mem_to_ptr>
 800c632:	4603      	mov	r3, r0
 800c634:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	881b      	ldrh	r3, [r3, #0]
 800c63a:	4618      	mov	r0, r3
 800c63c:	f7ff fef0 	bl	800c420 <ptr_to_mem>
 800c640:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	885b      	ldrh	r3, [r3, #2]
 800c646:	4618      	mov	r0, r3
 800c648:	f7ff feea 	bl	800c420 <ptr_to_mem>
 800c64c:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	881b      	ldrh	r3, [r3, #0]
 800c652:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c656:	d818      	bhi.n	800c68a <mem_link_valid+0x66>
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	885b      	ldrh	r3, [r3, #2]
 800c65c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c660:	d813      	bhi.n	800c68a <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800c666:	8afa      	ldrh	r2, [r7, #22]
 800c668:	429a      	cmp	r2, r3
 800c66a:	d004      	beq.n	800c676 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800c66c:	68fb      	ldr	r3, [r7, #12]
 800c66e:	881b      	ldrh	r3, [r3, #0]
 800c670:	8afa      	ldrh	r2, [r7, #22]
 800c672:	429a      	cmp	r2, r3
 800c674:	d109      	bne.n	800c68a <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800c676:	4b08      	ldr	r3, [pc, #32]	; (800c698 <mem_link_valid+0x74>)
 800c678:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800c67a:	693a      	ldr	r2, [r7, #16]
 800c67c:	429a      	cmp	r2, r3
 800c67e:	d006      	beq.n	800c68e <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800c680:	693b      	ldr	r3, [r7, #16]
 800c682:	885b      	ldrh	r3, [r3, #2]
 800c684:	8afa      	ldrh	r2, [r7, #22]
 800c686:	429a      	cmp	r2, r3
 800c688:	d001      	beq.n	800c68e <mem_link_valid+0x6a>
    return 0;
 800c68a:	2300      	movs	r3, #0
 800c68c:	e000      	b.n	800c690 <mem_link_valid+0x6c>
  }
  return 1;
 800c68e:	2301      	movs	r3, #1
}
 800c690:	4618      	mov	r0, r3
 800c692:	3718      	adds	r7, #24
 800c694:	46bd      	mov	sp, r7
 800c696:	bd80      	pop	{r7, pc}
 800c698:	2000046c 	.word	0x2000046c

0800c69c <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800c69c:	b580      	push	{r7, lr}
 800c69e:	b084      	sub	sp, #16
 800c6a0:	af00      	add	r7, sp, #0
 800c6a2:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	d04c      	beq.n	800c744 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	f003 0303 	and.w	r3, r3, #3
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	d007      	beq.n	800c6c4 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800c6b4:	4b25      	ldr	r3, [pc, #148]	; (800c74c <mem_free+0xb0>)
 800c6b6:	f240 2273 	movw	r2, #627	; 0x273
 800c6ba:	4925      	ldr	r1, [pc, #148]	; (800c750 <mem_free+0xb4>)
 800c6bc:	4825      	ldr	r0, [pc, #148]	; (800c754 <mem_free+0xb8>)
 800c6be:	f00c f985 	bl	80189cc <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800c6c2:	e040      	b.n	800c746 <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	3b08      	subs	r3, #8
 800c6c8:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800c6ca:	4b23      	ldr	r3, [pc, #140]	; (800c758 <mem_free+0xbc>)
 800c6cc:	681b      	ldr	r3, [r3, #0]
 800c6ce:	68fa      	ldr	r2, [r7, #12]
 800c6d0:	429a      	cmp	r2, r3
 800c6d2:	d306      	bcc.n	800c6e2 <mem_free+0x46>
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	f103 020c 	add.w	r2, r3, #12
 800c6da:	4b20      	ldr	r3, [pc, #128]	; (800c75c <mem_free+0xc0>)
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	429a      	cmp	r2, r3
 800c6e0:	d907      	bls.n	800c6f2 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800c6e2:	4b1a      	ldr	r3, [pc, #104]	; (800c74c <mem_free+0xb0>)
 800c6e4:	f240 227f 	movw	r2, #639	; 0x27f
 800c6e8:	491d      	ldr	r1, [pc, #116]	; (800c760 <mem_free+0xc4>)
 800c6ea:	481a      	ldr	r0, [pc, #104]	; (800c754 <mem_free+0xb8>)
 800c6ec:	f00c f96e 	bl	80189cc <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800c6f0:	e029      	b.n	800c746 <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 800c6f2:	68fb      	ldr	r3, [r7, #12]
 800c6f4:	791b      	ldrb	r3, [r3, #4]
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	d107      	bne.n	800c70a <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800c6fa:	4b14      	ldr	r3, [pc, #80]	; (800c74c <mem_free+0xb0>)
 800c6fc:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800c700:	4918      	ldr	r1, [pc, #96]	; (800c764 <mem_free+0xc8>)
 800c702:	4814      	ldr	r0, [pc, #80]	; (800c754 <mem_free+0xb8>)
 800c704:	f00c f962 	bl	80189cc <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800c708:	e01d      	b.n	800c746 <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 800c70a:	68f8      	ldr	r0, [r7, #12]
 800c70c:	f7ff ff8a 	bl	800c624 <mem_link_valid>
 800c710:	4603      	mov	r3, r0
 800c712:	2b00      	cmp	r3, #0
 800c714:	d107      	bne.n	800c726 <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800c716:	4b0d      	ldr	r3, [pc, #52]	; (800c74c <mem_free+0xb0>)
 800c718:	f240 2295 	movw	r2, #661	; 0x295
 800c71c:	4912      	ldr	r1, [pc, #72]	; (800c768 <mem_free+0xcc>)
 800c71e:	480d      	ldr	r0, [pc, #52]	; (800c754 <mem_free+0xb8>)
 800c720:	f00c f954 	bl	80189cc <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800c724:	e00f      	b.n	800c746 <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 800c726:	68fb      	ldr	r3, [r7, #12]
 800c728:	2200      	movs	r2, #0
 800c72a:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800c72c:	4b0f      	ldr	r3, [pc, #60]	; (800c76c <mem_free+0xd0>)
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	68fa      	ldr	r2, [r7, #12]
 800c732:	429a      	cmp	r2, r3
 800c734:	d202      	bcs.n	800c73c <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800c736:	4a0d      	ldr	r2, [pc, #52]	; (800c76c <mem_free+0xd0>)
 800c738:	68fb      	ldr	r3, [r7, #12]
 800c73a:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800c73c:	68f8      	ldr	r0, [r7, #12]
 800c73e:	f7ff fe93 	bl	800c468 <plug_holes>
 800c742:	e000      	b.n	800c746 <mem_free+0xaa>
    return;
 800c744:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 800c746:	3710      	adds	r7, #16
 800c748:	46bd      	mov	sp, r7
 800c74a:	bd80      	pop	{r7, pc}
 800c74c:	0801e058 	.word	0x0801e058
 800c750:	0801e12c 	.word	0x0801e12c
 800c754:	0801e0a0 	.word	0x0801e0a0
 800c758:	20000468 	.word	0x20000468
 800c75c:	2000046c 	.word	0x2000046c
 800c760:	0801e150 	.word	0x0801e150
 800c764:	0801e16c 	.word	0x0801e16c
 800c768:	0801e194 	.word	0x0801e194
 800c76c:	20000470 	.word	0x20000470

0800c770 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800c770:	b580      	push	{r7, lr}
 800c772:	b088      	sub	sp, #32
 800c774:	af00      	add	r7, sp, #0
 800c776:	6078      	str	r0, [r7, #4]
 800c778:	460b      	mov	r3, r1
 800c77a:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800c77c:	887b      	ldrh	r3, [r7, #2]
 800c77e:	3303      	adds	r3, #3
 800c780:	b29b      	uxth	r3, r3
 800c782:	f023 0303 	bic.w	r3, r3, #3
 800c786:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800c788:	8bfb      	ldrh	r3, [r7, #30]
 800c78a:	2b0b      	cmp	r3, #11
 800c78c:	d801      	bhi.n	800c792 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800c78e:	230c      	movs	r3, #12
 800c790:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800c792:	8bfb      	ldrh	r3, [r7, #30]
 800c794:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c798:	d803      	bhi.n	800c7a2 <mem_trim+0x32>
 800c79a:	8bfa      	ldrh	r2, [r7, #30]
 800c79c:	887b      	ldrh	r3, [r7, #2]
 800c79e:	429a      	cmp	r2, r3
 800c7a0:	d201      	bcs.n	800c7a6 <mem_trim+0x36>
    return NULL;
 800c7a2:	2300      	movs	r3, #0
 800c7a4:	e0cc      	b.n	800c940 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800c7a6:	4b68      	ldr	r3, [pc, #416]	; (800c948 <mem_trim+0x1d8>)
 800c7a8:	681b      	ldr	r3, [r3, #0]
 800c7aa:	687a      	ldr	r2, [r7, #4]
 800c7ac:	429a      	cmp	r2, r3
 800c7ae:	d304      	bcc.n	800c7ba <mem_trim+0x4a>
 800c7b0:	4b66      	ldr	r3, [pc, #408]	; (800c94c <mem_trim+0x1dc>)
 800c7b2:	681b      	ldr	r3, [r3, #0]
 800c7b4:	687a      	ldr	r2, [r7, #4]
 800c7b6:	429a      	cmp	r2, r3
 800c7b8:	d306      	bcc.n	800c7c8 <mem_trim+0x58>
 800c7ba:	4b65      	ldr	r3, [pc, #404]	; (800c950 <mem_trim+0x1e0>)
 800c7bc:	f240 22d1 	movw	r2, #721	; 0x2d1
 800c7c0:	4964      	ldr	r1, [pc, #400]	; (800c954 <mem_trim+0x1e4>)
 800c7c2:	4865      	ldr	r0, [pc, #404]	; (800c958 <mem_trim+0x1e8>)
 800c7c4:	f00c f902 	bl	80189cc <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800c7c8:	4b5f      	ldr	r3, [pc, #380]	; (800c948 <mem_trim+0x1d8>)
 800c7ca:	681b      	ldr	r3, [r3, #0]
 800c7cc:	687a      	ldr	r2, [r7, #4]
 800c7ce:	429a      	cmp	r2, r3
 800c7d0:	d304      	bcc.n	800c7dc <mem_trim+0x6c>
 800c7d2:	4b5e      	ldr	r3, [pc, #376]	; (800c94c <mem_trim+0x1dc>)
 800c7d4:	681b      	ldr	r3, [r3, #0]
 800c7d6:	687a      	ldr	r2, [r7, #4]
 800c7d8:	429a      	cmp	r2, r3
 800c7da:	d301      	bcc.n	800c7e0 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	e0af      	b.n	800c940 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	3b08      	subs	r3, #8
 800c7e4:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800c7e6:	69b8      	ldr	r0, [r7, #24]
 800c7e8:	f7ff fe2c 	bl	800c444 <mem_to_ptr>
 800c7ec:	4603      	mov	r3, r0
 800c7ee:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800c7f0:	69bb      	ldr	r3, [r7, #24]
 800c7f2:	881a      	ldrh	r2, [r3, #0]
 800c7f4:	8afb      	ldrh	r3, [r7, #22]
 800c7f6:	1ad3      	subs	r3, r2, r3
 800c7f8:	b29b      	uxth	r3, r3
 800c7fa:	3b08      	subs	r3, #8
 800c7fc:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800c7fe:	8bfa      	ldrh	r2, [r7, #30]
 800c800:	8abb      	ldrh	r3, [r7, #20]
 800c802:	429a      	cmp	r2, r3
 800c804:	d906      	bls.n	800c814 <mem_trim+0xa4>
 800c806:	4b52      	ldr	r3, [pc, #328]	; (800c950 <mem_trim+0x1e0>)
 800c808:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800c80c:	4953      	ldr	r1, [pc, #332]	; (800c95c <mem_trim+0x1ec>)
 800c80e:	4852      	ldr	r0, [pc, #328]	; (800c958 <mem_trim+0x1e8>)
 800c810:	f00c f8dc 	bl	80189cc <iprintf>
  if (newsize > size) {
 800c814:	8bfa      	ldrh	r2, [r7, #30]
 800c816:	8abb      	ldrh	r3, [r7, #20]
 800c818:	429a      	cmp	r2, r3
 800c81a:	d901      	bls.n	800c820 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 800c81c:	2300      	movs	r3, #0
 800c81e:	e08f      	b.n	800c940 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 800c820:	8bfa      	ldrh	r2, [r7, #30]
 800c822:	8abb      	ldrh	r3, [r7, #20]
 800c824:	429a      	cmp	r2, r3
 800c826:	d101      	bne.n	800c82c <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	e089      	b.n	800c940 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 800c82c:	69bb      	ldr	r3, [r7, #24]
 800c82e:	881b      	ldrh	r3, [r3, #0]
 800c830:	4618      	mov	r0, r3
 800c832:	f7ff fdf5 	bl	800c420 <ptr_to_mem>
 800c836:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800c838:	693b      	ldr	r3, [r7, #16]
 800c83a:	791b      	ldrb	r3, [r3, #4]
 800c83c:	2b00      	cmp	r3, #0
 800c83e:	d13f      	bne.n	800c8c0 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800c840:	69bb      	ldr	r3, [r7, #24]
 800c842:	881b      	ldrh	r3, [r3, #0]
 800c844:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c848:	d106      	bne.n	800c858 <mem_trim+0xe8>
 800c84a:	4b41      	ldr	r3, [pc, #260]	; (800c950 <mem_trim+0x1e0>)
 800c84c:	f240 22f5 	movw	r2, #757	; 0x2f5
 800c850:	4943      	ldr	r1, [pc, #268]	; (800c960 <mem_trim+0x1f0>)
 800c852:	4841      	ldr	r0, [pc, #260]	; (800c958 <mem_trim+0x1e8>)
 800c854:	f00c f8ba 	bl	80189cc <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800c858:	693b      	ldr	r3, [r7, #16]
 800c85a:	881b      	ldrh	r3, [r3, #0]
 800c85c:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800c85e:	8afa      	ldrh	r2, [r7, #22]
 800c860:	8bfb      	ldrh	r3, [r7, #30]
 800c862:	4413      	add	r3, r2
 800c864:	b29b      	uxth	r3, r3
 800c866:	3308      	adds	r3, #8
 800c868:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800c86a:	4b3e      	ldr	r3, [pc, #248]	; (800c964 <mem_trim+0x1f4>)
 800c86c:	681b      	ldr	r3, [r3, #0]
 800c86e:	693a      	ldr	r2, [r7, #16]
 800c870:	429a      	cmp	r2, r3
 800c872:	d106      	bne.n	800c882 <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 800c874:	89fb      	ldrh	r3, [r7, #14]
 800c876:	4618      	mov	r0, r3
 800c878:	f7ff fdd2 	bl	800c420 <ptr_to_mem>
 800c87c:	4603      	mov	r3, r0
 800c87e:	4a39      	ldr	r2, [pc, #228]	; (800c964 <mem_trim+0x1f4>)
 800c880:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800c882:	89fb      	ldrh	r3, [r7, #14]
 800c884:	4618      	mov	r0, r3
 800c886:	f7ff fdcb 	bl	800c420 <ptr_to_mem>
 800c88a:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800c88c:	693b      	ldr	r3, [r7, #16]
 800c88e:	2200      	movs	r2, #0
 800c890:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800c892:	693b      	ldr	r3, [r7, #16]
 800c894:	89ba      	ldrh	r2, [r7, #12]
 800c896:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800c898:	693b      	ldr	r3, [r7, #16]
 800c89a:	8afa      	ldrh	r2, [r7, #22]
 800c89c:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800c89e:	69bb      	ldr	r3, [r7, #24]
 800c8a0:	89fa      	ldrh	r2, [r7, #14]
 800c8a2:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800c8a4:	693b      	ldr	r3, [r7, #16]
 800c8a6:	881b      	ldrh	r3, [r3, #0]
 800c8a8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c8ac:	d047      	beq.n	800c93e <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800c8ae:	693b      	ldr	r3, [r7, #16]
 800c8b0:	881b      	ldrh	r3, [r3, #0]
 800c8b2:	4618      	mov	r0, r3
 800c8b4:	f7ff fdb4 	bl	800c420 <ptr_to_mem>
 800c8b8:	4602      	mov	r2, r0
 800c8ba:	89fb      	ldrh	r3, [r7, #14]
 800c8bc:	8053      	strh	r3, [r2, #2]
 800c8be:	e03e      	b.n	800c93e <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800c8c0:	8bfb      	ldrh	r3, [r7, #30]
 800c8c2:	f103 0214 	add.w	r2, r3, #20
 800c8c6:	8abb      	ldrh	r3, [r7, #20]
 800c8c8:	429a      	cmp	r2, r3
 800c8ca:	d838      	bhi.n	800c93e <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800c8cc:	8afa      	ldrh	r2, [r7, #22]
 800c8ce:	8bfb      	ldrh	r3, [r7, #30]
 800c8d0:	4413      	add	r3, r2
 800c8d2:	b29b      	uxth	r3, r3
 800c8d4:	3308      	adds	r3, #8
 800c8d6:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800c8d8:	69bb      	ldr	r3, [r7, #24]
 800c8da:	881b      	ldrh	r3, [r3, #0]
 800c8dc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c8e0:	d106      	bne.n	800c8f0 <mem_trim+0x180>
 800c8e2:	4b1b      	ldr	r3, [pc, #108]	; (800c950 <mem_trim+0x1e0>)
 800c8e4:	f240 3216 	movw	r2, #790	; 0x316
 800c8e8:	491d      	ldr	r1, [pc, #116]	; (800c960 <mem_trim+0x1f0>)
 800c8ea:	481b      	ldr	r0, [pc, #108]	; (800c958 <mem_trim+0x1e8>)
 800c8ec:	f00c f86e 	bl	80189cc <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800c8f0:	89fb      	ldrh	r3, [r7, #14]
 800c8f2:	4618      	mov	r0, r3
 800c8f4:	f7ff fd94 	bl	800c420 <ptr_to_mem>
 800c8f8:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800c8fa:	4b1a      	ldr	r3, [pc, #104]	; (800c964 <mem_trim+0x1f4>)
 800c8fc:	681b      	ldr	r3, [r3, #0]
 800c8fe:	693a      	ldr	r2, [r7, #16]
 800c900:	429a      	cmp	r2, r3
 800c902:	d202      	bcs.n	800c90a <mem_trim+0x19a>
      lfree = mem2;
 800c904:	4a17      	ldr	r2, [pc, #92]	; (800c964 <mem_trim+0x1f4>)
 800c906:	693b      	ldr	r3, [r7, #16]
 800c908:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800c90a:	693b      	ldr	r3, [r7, #16]
 800c90c:	2200      	movs	r2, #0
 800c90e:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800c910:	69bb      	ldr	r3, [r7, #24]
 800c912:	881a      	ldrh	r2, [r3, #0]
 800c914:	693b      	ldr	r3, [r7, #16]
 800c916:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800c918:	693b      	ldr	r3, [r7, #16]
 800c91a:	8afa      	ldrh	r2, [r7, #22]
 800c91c:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800c91e:	69bb      	ldr	r3, [r7, #24]
 800c920:	89fa      	ldrh	r2, [r7, #14]
 800c922:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800c924:	693b      	ldr	r3, [r7, #16]
 800c926:	881b      	ldrh	r3, [r3, #0]
 800c928:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c92c:	d007      	beq.n	800c93e <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800c92e:	693b      	ldr	r3, [r7, #16]
 800c930:	881b      	ldrh	r3, [r3, #0]
 800c932:	4618      	mov	r0, r3
 800c934:	f7ff fd74 	bl	800c420 <ptr_to_mem>
 800c938:	4602      	mov	r2, r0
 800c93a:	89fb      	ldrh	r3, [r7, #14]
 800c93c:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 800c93e:	687b      	ldr	r3, [r7, #4]
}
 800c940:	4618      	mov	r0, r3
 800c942:	3720      	adds	r7, #32
 800c944:	46bd      	mov	sp, r7
 800c946:	bd80      	pop	{r7, pc}
 800c948:	20000468 	.word	0x20000468
 800c94c:	2000046c 	.word	0x2000046c
 800c950:	0801e058 	.word	0x0801e058
 800c954:	0801e1c8 	.word	0x0801e1c8
 800c958:	0801e0a0 	.word	0x0801e0a0
 800c95c:	0801e1e0 	.word	0x0801e1e0
 800c960:	0801e200 	.word	0x0801e200
 800c964:	20000470 	.word	0x20000470

0800c968 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800c968:	b580      	push	{r7, lr}
 800c96a:	b088      	sub	sp, #32
 800c96c:	af00      	add	r7, sp, #0
 800c96e:	4603      	mov	r3, r0
 800c970:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800c972:	88fb      	ldrh	r3, [r7, #6]
 800c974:	2b00      	cmp	r3, #0
 800c976:	d101      	bne.n	800c97c <mem_malloc+0x14>
    return NULL;
 800c978:	2300      	movs	r3, #0
 800c97a:	e0d9      	b.n	800cb30 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800c97c:	88fb      	ldrh	r3, [r7, #6]
 800c97e:	3303      	adds	r3, #3
 800c980:	b29b      	uxth	r3, r3
 800c982:	f023 0303 	bic.w	r3, r3, #3
 800c986:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800c988:	8bbb      	ldrh	r3, [r7, #28]
 800c98a:	2b0b      	cmp	r3, #11
 800c98c:	d801      	bhi.n	800c992 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800c98e:	230c      	movs	r3, #12
 800c990:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800c992:	8bbb      	ldrh	r3, [r7, #28]
 800c994:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c998:	d803      	bhi.n	800c9a2 <mem_malloc+0x3a>
 800c99a:	8bba      	ldrh	r2, [r7, #28]
 800c99c:	88fb      	ldrh	r3, [r7, #6]
 800c99e:	429a      	cmp	r2, r3
 800c9a0:	d201      	bcs.n	800c9a6 <mem_malloc+0x3e>
    return NULL;
 800c9a2:	2300      	movs	r3, #0
 800c9a4:	e0c4      	b.n	800cb30 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800c9a6:	4b64      	ldr	r3, [pc, #400]	; (800cb38 <mem_malloc+0x1d0>)
 800c9a8:	681b      	ldr	r3, [r3, #0]
 800c9aa:	4618      	mov	r0, r3
 800c9ac:	f7ff fd4a 	bl	800c444 <mem_to_ptr>
 800c9b0:	4603      	mov	r3, r0
 800c9b2:	83fb      	strh	r3, [r7, #30]
 800c9b4:	e0b4      	b.n	800cb20 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800c9b6:	8bfb      	ldrh	r3, [r7, #30]
 800c9b8:	4618      	mov	r0, r3
 800c9ba:	f7ff fd31 	bl	800c420 <ptr_to_mem>
 800c9be:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800c9c0:	697b      	ldr	r3, [r7, #20]
 800c9c2:	791b      	ldrb	r3, [r3, #4]
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	f040 80a4 	bne.w	800cb12 <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800c9ca:	697b      	ldr	r3, [r7, #20]
 800c9cc:	881b      	ldrh	r3, [r3, #0]
 800c9ce:	461a      	mov	r2, r3
 800c9d0:	8bfb      	ldrh	r3, [r7, #30]
 800c9d2:	1ad3      	subs	r3, r2, r3
 800c9d4:	f1a3 0208 	sub.w	r2, r3, #8
 800c9d8:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800c9da:	429a      	cmp	r2, r3
 800c9dc:	f0c0 8099 	bcc.w	800cb12 <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800c9e0:	697b      	ldr	r3, [r7, #20]
 800c9e2:	881b      	ldrh	r3, [r3, #0]
 800c9e4:	461a      	mov	r2, r3
 800c9e6:	8bfb      	ldrh	r3, [r7, #30]
 800c9e8:	1ad3      	subs	r3, r2, r3
 800c9ea:	f1a3 0208 	sub.w	r2, r3, #8
 800c9ee:	8bbb      	ldrh	r3, [r7, #28]
 800c9f0:	3314      	adds	r3, #20
 800c9f2:	429a      	cmp	r2, r3
 800c9f4:	d333      	bcc.n	800ca5e <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800c9f6:	8bfa      	ldrh	r2, [r7, #30]
 800c9f8:	8bbb      	ldrh	r3, [r7, #28]
 800c9fa:	4413      	add	r3, r2
 800c9fc:	b29b      	uxth	r3, r3
 800c9fe:	3308      	adds	r3, #8
 800ca00:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800ca02:	8a7b      	ldrh	r3, [r7, #18]
 800ca04:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ca08:	d106      	bne.n	800ca18 <mem_malloc+0xb0>
 800ca0a:	4b4c      	ldr	r3, [pc, #304]	; (800cb3c <mem_malloc+0x1d4>)
 800ca0c:	f240 3287 	movw	r2, #903	; 0x387
 800ca10:	494b      	ldr	r1, [pc, #300]	; (800cb40 <mem_malloc+0x1d8>)
 800ca12:	484c      	ldr	r0, [pc, #304]	; (800cb44 <mem_malloc+0x1dc>)
 800ca14:	f00b ffda 	bl	80189cc <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800ca18:	8a7b      	ldrh	r3, [r7, #18]
 800ca1a:	4618      	mov	r0, r3
 800ca1c:	f7ff fd00 	bl	800c420 <ptr_to_mem>
 800ca20:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800ca22:	68fb      	ldr	r3, [r7, #12]
 800ca24:	2200      	movs	r2, #0
 800ca26:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800ca28:	697b      	ldr	r3, [r7, #20]
 800ca2a:	881a      	ldrh	r2, [r3, #0]
 800ca2c:	68fb      	ldr	r3, [r7, #12]
 800ca2e:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800ca30:	68fb      	ldr	r3, [r7, #12]
 800ca32:	8bfa      	ldrh	r2, [r7, #30]
 800ca34:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800ca36:	697b      	ldr	r3, [r7, #20]
 800ca38:	8a7a      	ldrh	r2, [r7, #18]
 800ca3a:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800ca3c:	697b      	ldr	r3, [r7, #20]
 800ca3e:	2201      	movs	r2, #1
 800ca40:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800ca42:	68fb      	ldr	r3, [r7, #12]
 800ca44:	881b      	ldrh	r3, [r3, #0]
 800ca46:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ca4a:	d00b      	beq.n	800ca64 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800ca4c:	68fb      	ldr	r3, [r7, #12]
 800ca4e:	881b      	ldrh	r3, [r3, #0]
 800ca50:	4618      	mov	r0, r3
 800ca52:	f7ff fce5 	bl	800c420 <ptr_to_mem>
 800ca56:	4602      	mov	r2, r0
 800ca58:	8a7b      	ldrh	r3, [r7, #18]
 800ca5a:	8053      	strh	r3, [r2, #2]
 800ca5c:	e002      	b.n	800ca64 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800ca5e:	697b      	ldr	r3, [r7, #20]
 800ca60:	2201      	movs	r2, #1
 800ca62:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800ca64:	4b34      	ldr	r3, [pc, #208]	; (800cb38 <mem_malloc+0x1d0>)
 800ca66:	681b      	ldr	r3, [r3, #0]
 800ca68:	697a      	ldr	r2, [r7, #20]
 800ca6a:	429a      	cmp	r2, r3
 800ca6c:	d127      	bne.n	800cabe <mem_malloc+0x156>
          struct mem *cur = lfree;
 800ca6e:	4b32      	ldr	r3, [pc, #200]	; (800cb38 <mem_malloc+0x1d0>)
 800ca70:	681b      	ldr	r3, [r3, #0]
 800ca72:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800ca74:	e005      	b.n	800ca82 <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800ca76:	69bb      	ldr	r3, [r7, #24]
 800ca78:	881b      	ldrh	r3, [r3, #0]
 800ca7a:	4618      	mov	r0, r3
 800ca7c:	f7ff fcd0 	bl	800c420 <ptr_to_mem>
 800ca80:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800ca82:	69bb      	ldr	r3, [r7, #24]
 800ca84:	791b      	ldrb	r3, [r3, #4]
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	d004      	beq.n	800ca94 <mem_malloc+0x12c>
 800ca8a:	4b2f      	ldr	r3, [pc, #188]	; (800cb48 <mem_malloc+0x1e0>)
 800ca8c:	681b      	ldr	r3, [r3, #0]
 800ca8e:	69ba      	ldr	r2, [r7, #24]
 800ca90:	429a      	cmp	r2, r3
 800ca92:	d1f0      	bne.n	800ca76 <mem_malloc+0x10e>
          }
          lfree = cur;
 800ca94:	4a28      	ldr	r2, [pc, #160]	; (800cb38 <mem_malloc+0x1d0>)
 800ca96:	69bb      	ldr	r3, [r7, #24]
 800ca98:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800ca9a:	4b27      	ldr	r3, [pc, #156]	; (800cb38 <mem_malloc+0x1d0>)
 800ca9c:	681a      	ldr	r2, [r3, #0]
 800ca9e:	4b2a      	ldr	r3, [pc, #168]	; (800cb48 <mem_malloc+0x1e0>)
 800caa0:	681b      	ldr	r3, [r3, #0]
 800caa2:	429a      	cmp	r2, r3
 800caa4:	d00b      	beq.n	800cabe <mem_malloc+0x156>
 800caa6:	4b24      	ldr	r3, [pc, #144]	; (800cb38 <mem_malloc+0x1d0>)
 800caa8:	681b      	ldr	r3, [r3, #0]
 800caaa:	791b      	ldrb	r3, [r3, #4]
 800caac:	2b00      	cmp	r3, #0
 800caae:	d006      	beq.n	800cabe <mem_malloc+0x156>
 800cab0:	4b22      	ldr	r3, [pc, #136]	; (800cb3c <mem_malloc+0x1d4>)
 800cab2:	f240 32b5 	movw	r2, #949	; 0x3b5
 800cab6:	4925      	ldr	r1, [pc, #148]	; (800cb4c <mem_malloc+0x1e4>)
 800cab8:	4822      	ldr	r0, [pc, #136]	; (800cb44 <mem_malloc+0x1dc>)
 800caba:	f00b ff87 	bl	80189cc <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800cabe:	8bba      	ldrh	r2, [r7, #28]
 800cac0:	697b      	ldr	r3, [r7, #20]
 800cac2:	4413      	add	r3, r2
 800cac4:	3308      	adds	r3, #8
 800cac6:	4a20      	ldr	r2, [pc, #128]	; (800cb48 <mem_malloc+0x1e0>)
 800cac8:	6812      	ldr	r2, [r2, #0]
 800caca:	4293      	cmp	r3, r2
 800cacc:	d906      	bls.n	800cadc <mem_malloc+0x174>
 800cace:	4b1b      	ldr	r3, [pc, #108]	; (800cb3c <mem_malloc+0x1d4>)
 800cad0:	f240 32b9 	movw	r2, #953	; 0x3b9
 800cad4:	491e      	ldr	r1, [pc, #120]	; (800cb50 <mem_malloc+0x1e8>)
 800cad6:	481b      	ldr	r0, [pc, #108]	; (800cb44 <mem_malloc+0x1dc>)
 800cad8:	f00b ff78 	bl	80189cc <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800cadc:	697b      	ldr	r3, [r7, #20]
 800cade:	f003 0303 	and.w	r3, r3, #3
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	d006      	beq.n	800caf4 <mem_malloc+0x18c>
 800cae6:	4b15      	ldr	r3, [pc, #84]	; (800cb3c <mem_malloc+0x1d4>)
 800cae8:	f240 32bb 	movw	r2, #955	; 0x3bb
 800caec:	4919      	ldr	r1, [pc, #100]	; (800cb54 <mem_malloc+0x1ec>)
 800caee:	4815      	ldr	r0, [pc, #84]	; (800cb44 <mem_malloc+0x1dc>)
 800caf0:	f00b ff6c 	bl	80189cc <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800caf4:	697b      	ldr	r3, [r7, #20]
 800caf6:	f003 0303 	and.w	r3, r3, #3
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	d006      	beq.n	800cb0c <mem_malloc+0x1a4>
 800cafe:	4b0f      	ldr	r3, [pc, #60]	; (800cb3c <mem_malloc+0x1d4>)
 800cb00:	f240 32bd 	movw	r2, #957	; 0x3bd
 800cb04:	4914      	ldr	r1, [pc, #80]	; (800cb58 <mem_malloc+0x1f0>)
 800cb06:	480f      	ldr	r0, [pc, #60]	; (800cb44 <mem_malloc+0x1dc>)
 800cb08:	f00b ff60 	bl	80189cc <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800cb0c:	697b      	ldr	r3, [r7, #20]
 800cb0e:	3308      	adds	r3, #8
 800cb10:	e00e      	b.n	800cb30 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 800cb12:	8bfb      	ldrh	r3, [r7, #30]
 800cb14:	4618      	mov	r0, r3
 800cb16:	f7ff fc83 	bl	800c420 <ptr_to_mem>
 800cb1a:	4603      	mov	r3, r0
 800cb1c:	881b      	ldrh	r3, [r3, #0]
 800cb1e:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800cb20:	8bfa      	ldrh	r2, [r7, #30]
 800cb22:	8bbb      	ldrh	r3, [r7, #28]
 800cb24:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800cb28:	429a      	cmp	r2, r3
 800cb2a:	f4ff af44 	bcc.w	800c9b6 <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800cb2e:	2300      	movs	r3, #0
}
 800cb30:	4618      	mov	r0, r3
 800cb32:	3720      	adds	r7, #32
 800cb34:	46bd      	mov	sp, r7
 800cb36:	bd80      	pop	{r7, pc}
 800cb38:	20000470 	.word	0x20000470
 800cb3c:	0801e058 	.word	0x0801e058
 800cb40:	0801e200 	.word	0x0801e200
 800cb44:	0801e0a0 	.word	0x0801e0a0
 800cb48:	2000046c 	.word	0x2000046c
 800cb4c:	0801e214 	.word	0x0801e214
 800cb50:	0801e230 	.word	0x0801e230
 800cb54:	0801e260 	.word	0x0801e260
 800cb58:	0801e290 	.word	0x0801e290

0800cb5c <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800cb5c:	b480      	push	{r7}
 800cb5e:	b085      	sub	sp, #20
 800cb60:	af00      	add	r7, sp, #0
 800cb62:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	689b      	ldr	r3, [r3, #8]
 800cb68:	2200      	movs	r2, #0
 800cb6a:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	685b      	ldr	r3, [r3, #4]
 800cb70:	3303      	adds	r3, #3
 800cb72:	f023 0303 	bic.w	r3, r3, #3
 800cb76:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800cb78:	2300      	movs	r3, #0
 800cb7a:	60fb      	str	r3, [r7, #12]
 800cb7c:	e011      	b.n	800cba2 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	689b      	ldr	r3, [r3, #8]
 800cb82:	681a      	ldr	r2, [r3, #0]
 800cb84:	68bb      	ldr	r3, [r7, #8]
 800cb86:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	689b      	ldr	r3, [r3, #8]
 800cb8c:	68ba      	ldr	r2, [r7, #8]
 800cb8e:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	881b      	ldrh	r3, [r3, #0]
 800cb94:	461a      	mov	r2, r3
 800cb96:	68bb      	ldr	r3, [r7, #8]
 800cb98:	4413      	add	r3, r2
 800cb9a:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800cb9c:	68fb      	ldr	r3, [r7, #12]
 800cb9e:	3301      	adds	r3, #1
 800cba0:	60fb      	str	r3, [r7, #12]
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	885b      	ldrh	r3, [r3, #2]
 800cba6:	461a      	mov	r2, r3
 800cba8:	68fb      	ldr	r3, [r7, #12]
 800cbaa:	4293      	cmp	r3, r2
 800cbac:	dbe7      	blt.n	800cb7e <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800cbae:	bf00      	nop
 800cbb0:	bf00      	nop
 800cbb2:	3714      	adds	r7, #20
 800cbb4:	46bd      	mov	sp, r7
 800cbb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbba:	4770      	bx	lr

0800cbbc <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800cbbc:	b580      	push	{r7, lr}
 800cbbe:	b082      	sub	sp, #8
 800cbc0:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800cbc2:	2300      	movs	r3, #0
 800cbc4:	80fb      	strh	r3, [r7, #6]
 800cbc6:	e009      	b.n	800cbdc <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800cbc8:	88fb      	ldrh	r3, [r7, #6]
 800cbca:	4a08      	ldr	r2, [pc, #32]	; (800cbec <memp_init+0x30>)
 800cbcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cbd0:	4618      	mov	r0, r3
 800cbd2:	f7ff ffc3 	bl	800cb5c <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800cbd6:	88fb      	ldrh	r3, [r7, #6]
 800cbd8:	3301      	adds	r3, #1
 800cbda:	80fb      	strh	r3, [r7, #6]
 800cbdc:	88fb      	ldrh	r3, [r7, #6]
 800cbde:	2b08      	cmp	r3, #8
 800cbe0:	d9f2      	bls.n	800cbc8 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800cbe2:	bf00      	nop
 800cbe4:	bf00      	nop
 800cbe6:	3708      	adds	r7, #8
 800cbe8:	46bd      	mov	sp, r7
 800cbea:	bd80      	pop	{r7, pc}
 800cbec:	08020e18 	.word	0x08020e18

0800cbf0 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800cbf0:	b580      	push	{r7, lr}
 800cbf2:	b084      	sub	sp, #16
 800cbf4:	af00      	add	r7, sp, #0
 800cbf6:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	689b      	ldr	r3, [r3, #8]
 800cbfc:	681b      	ldr	r3, [r3, #0]
 800cbfe:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800cc00:	68fb      	ldr	r3, [r7, #12]
 800cc02:	2b00      	cmp	r3, #0
 800cc04:	d012      	beq.n	800cc2c <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	689b      	ldr	r3, [r3, #8]
 800cc0a:	68fa      	ldr	r2, [r7, #12]
 800cc0c:	6812      	ldr	r2, [r2, #0]
 800cc0e:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800cc10:	68fb      	ldr	r3, [r7, #12]
 800cc12:	f003 0303 	and.w	r3, r3, #3
 800cc16:	2b00      	cmp	r3, #0
 800cc18:	d006      	beq.n	800cc28 <do_memp_malloc_pool+0x38>
 800cc1a:	4b07      	ldr	r3, [pc, #28]	; (800cc38 <do_memp_malloc_pool+0x48>)
 800cc1c:	f44f 728c 	mov.w	r2, #280	; 0x118
 800cc20:	4906      	ldr	r1, [pc, #24]	; (800cc3c <do_memp_malloc_pool+0x4c>)
 800cc22:	4807      	ldr	r0, [pc, #28]	; (800cc40 <do_memp_malloc_pool+0x50>)
 800cc24:	f00b fed2 	bl	80189cc <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800cc28:	68fb      	ldr	r3, [r7, #12]
 800cc2a:	e000      	b.n	800cc2e <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800cc2c:	2300      	movs	r3, #0
}
 800cc2e:	4618      	mov	r0, r3
 800cc30:	3710      	adds	r7, #16
 800cc32:	46bd      	mov	sp, r7
 800cc34:	bd80      	pop	{r7, pc}
 800cc36:	bf00      	nop
 800cc38:	0801e2b4 	.word	0x0801e2b4
 800cc3c:	0801e2e4 	.word	0x0801e2e4
 800cc40:	0801e308 	.word	0x0801e308

0800cc44 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800cc44:	b580      	push	{r7, lr}
 800cc46:	b084      	sub	sp, #16
 800cc48:	af00      	add	r7, sp, #0
 800cc4a:	4603      	mov	r3, r0
 800cc4c:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800cc4e:	79fb      	ldrb	r3, [r7, #7]
 800cc50:	2b08      	cmp	r3, #8
 800cc52:	d908      	bls.n	800cc66 <memp_malloc+0x22>
 800cc54:	4b0a      	ldr	r3, [pc, #40]	; (800cc80 <memp_malloc+0x3c>)
 800cc56:	f240 1257 	movw	r2, #343	; 0x157
 800cc5a:	490a      	ldr	r1, [pc, #40]	; (800cc84 <memp_malloc+0x40>)
 800cc5c:	480a      	ldr	r0, [pc, #40]	; (800cc88 <memp_malloc+0x44>)
 800cc5e:	f00b feb5 	bl	80189cc <iprintf>
 800cc62:	2300      	movs	r3, #0
 800cc64:	e008      	b.n	800cc78 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800cc66:	79fb      	ldrb	r3, [r7, #7]
 800cc68:	4a08      	ldr	r2, [pc, #32]	; (800cc8c <memp_malloc+0x48>)
 800cc6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cc6e:	4618      	mov	r0, r3
 800cc70:	f7ff ffbe 	bl	800cbf0 <do_memp_malloc_pool>
 800cc74:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800cc76:	68fb      	ldr	r3, [r7, #12]
}
 800cc78:	4618      	mov	r0, r3
 800cc7a:	3710      	adds	r7, #16
 800cc7c:	46bd      	mov	sp, r7
 800cc7e:	bd80      	pop	{r7, pc}
 800cc80:	0801e2b4 	.word	0x0801e2b4
 800cc84:	0801e344 	.word	0x0801e344
 800cc88:	0801e308 	.word	0x0801e308
 800cc8c:	08020e18 	.word	0x08020e18

0800cc90 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800cc90:	b580      	push	{r7, lr}
 800cc92:	b084      	sub	sp, #16
 800cc94:	af00      	add	r7, sp, #0
 800cc96:	6078      	str	r0, [r7, #4]
 800cc98:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800cc9a:	683b      	ldr	r3, [r7, #0]
 800cc9c:	f003 0303 	and.w	r3, r3, #3
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	d006      	beq.n	800ccb2 <do_memp_free_pool+0x22>
 800cca4:	4b0a      	ldr	r3, [pc, #40]	; (800ccd0 <do_memp_free_pool+0x40>)
 800cca6:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800ccaa:	490a      	ldr	r1, [pc, #40]	; (800ccd4 <do_memp_free_pool+0x44>)
 800ccac:	480a      	ldr	r0, [pc, #40]	; (800ccd8 <do_memp_free_pool+0x48>)
 800ccae:	f00b fe8d 	bl	80189cc <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800ccb2:	683b      	ldr	r3, [r7, #0]
 800ccb4:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	689b      	ldr	r3, [r3, #8]
 800ccba:	681a      	ldr	r2, [r3, #0]
 800ccbc:	68fb      	ldr	r3, [r7, #12]
 800ccbe:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	689b      	ldr	r3, [r3, #8]
 800ccc4:	68fa      	ldr	r2, [r7, #12]
 800ccc6:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 800ccc8:	bf00      	nop
 800ccca:	3710      	adds	r7, #16
 800cccc:	46bd      	mov	sp, r7
 800ccce:	bd80      	pop	{r7, pc}
 800ccd0:	0801e2b4 	.word	0x0801e2b4
 800ccd4:	0801e364 	.word	0x0801e364
 800ccd8:	0801e308 	.word	0x0801e308

0800ccdc <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800ccdc:	b580      	push	{r7, lr}
 800ccde:	b082      	sub	sp, #8
 800cce0:	af00      	add	r7, sp, #0
 800cce2:	4603      	mov	r3, r0
 800cce4:	6039      	str	r1, [r7, #0]
 800cce6:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800cce8:	79fb      	ldrb	r3, [r7, #7]
 800ccea:	2b08      	cmp	r3, #8
 800ccec:	d907      	bls.n	800ccfe <memp_free+0x22>
 800ccee:	4b0c      	ldr	r3, [pc, #48]	; (800cd20 <memp_free+0x44>)
 800ccf0:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800ccf4:	490b      	ldr	r1, [pc, #44]	; (800cd24 <memp_free+0x48>)
 800ccf6:	480c      	ldr	r0, [pc, #48]	; (800cd28 <memp_free+0x4c>)
 800ccf8:	f00b fe68 	bl	80189cc <iprintf>
 800ccfc:	e00c      	b.n	800cd18 <memp_free+0x3c>

  if (mem == NULL) {
 800ccfe:	683b      	ldr	r3, [r7, #0]
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	d008      	beq.n	800cd16 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800cd04:	79fb      	ldrb	r3, [r7, #7]
 800cd06:	4a09      	ldr	r2, [pc, #36]	; (800cd2c <memp_free+0x50>)
 800cd08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cd0c:	6839      	ldr	r1, [r7, #0]
 800cd0e:	4618      	mov	r0, r3
 800cd10:	f7ff ffbe 	bl	800cc90 <do_memp_free_pool>
 800cd14:	e000      	b.n	800cd18 <memp_free+0x3c>
    return;
 800cd16:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800cd18:	3708      	adds	r7, #8
 800cd1a:	46bd      	mov	sp, r7
 800cd1c:	bd80      	pop	{r7, pc}
 800cd1e:	bf00      	nop
 800cd20:	0801e2b4 	.word	0x0801e2b4
 800cd24:	0801e384 	.word	0x0801e384
 800cd28:	0801e308 	.word	0x0801e308
 800cd2c:	08020e18 	.word	0x08020e18

0800cd30 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800cd30:	b480      	push	{r7}
 800cd32:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800cd34:	bf00      	nop
 800cd36:	46bd      	mov	sp, r7
 800cd38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd3c:	4770      	bx	lr
	...

0800cd40 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800cd40:	b580      	push	{r7, lr}
 800cd42:	b086      	sub	sp, #24
 800cd44:	af00      	add	r7, sp, #0
 800cd46:	60f8      	str	r0, [r7, #12]
 800cd48:	60b9      	str	r1, [r7, #8]
 800cd4a:	607a      	str	r2, [r7, #4]
 800cd4c:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800cd4e:	68fb      	ldr	r3, [r7, #12]
 800cd50:	2b00      	cmp	r3, #0
 800cd52:	d108      	bne.n	800cd66 <netif_add+0x26>
 800cd54:	4b5b      	ldr	r3, [pc, #364]	; (800cec4 <netif_add+0x184>)
 800cd56:	f240 1227 	movw	r2, #295	; 0x127
 800cd5a:	495b      	ldr	r1, [pc, #364]	; (800cec8 <netif_add+0x188>)
 800cd5c:	485b      	ldr	r0, [pc, #364]	; (800cecc <netif_add+0x18c>)
 800cd5e:	f00b fe35 	bl	80189cc <iprintf>
 800cd62:	2300      	movs	r3, #0
 800cd64:	e0a9      	b.n	800ceba <netif_add+0x17a>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800cd66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	d108      	bne.n	800cd7e <netif_add+0x3e>
 800cd6c:	4b55      	ldr	r3, [pc, #340]	; (800cec4 <netif_add+0x184>)
 800cd6e:	f44f 7294 	mov.w	r2, #296	; 0x128
 800cd72:	4957      	ldr	r1, [pc, #348]	; (800ced0 <netif_add+0x190>)
 800cd74:	4855      	ldr	r0, [pc, #340]	; (800cecc <netif_add+0x18c>)
 800cd76:	f00b fe29 	bl	80189cc <iprintf>
 800cd7a:	2300      	movs	r3, #0
 800cd7c:	e09d      	b.n	800ceba <netif_add+0x17a>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800cd7e:	68bb      	ldr	r3, [r7, #8]
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d101      	bne.n	800cd88 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800cd84:	4b53      	ldr	r3, [pc, #332]	; (800ced4 <netif_add+0x194>)
 800cd86:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	d101      	bne.n	800cd92 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800cd8e:	4b51      	ldr	r3, [pc, #324]	; (800ced4 <netif_add+0x194>)
 800cd90:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800cd92:	683b      	ldr	r3, [r7, #0]
 800cd94:	2b00      	cmp	r3, #0
 800cd96:	d101      	bne.n	800cd9c <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800cd98:	4b4e      	ldr	r3, [pc, #312]	; (800ced4 <netif_add+0x194>)
 800cd9a:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800cd9c:	68fb      	ldr	r3, [r7, #12]
 800cd9e:	2200      	movs	r2, #0
 800cda0:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800cda2:	68fb      	ldr	r3, [r7, #12]
 800cda4:	2200      	movs	r2, #0
 800cda6:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800cda8:	68fb      	ldr	r3, [r7, #12]
 800cdaa:	2200      	movs	r2, #0
 800cdac:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800cdae:	68fb      	ldr	r3, [r7, #12]
 800cdb0:	4a49      	ldr	r2, [pc, #292]	; (800ced8 <netif_add+0x198>)
 800cdb2:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800cdb4:	68fb      	ldr	r3, [r7, #12]
 800cdb6:	2200      	movs	r2, #0
 800cdb8:	851a      	strh	r2, [r3, #40]	; 0x28
  netif->flags = 0;
 800cdba:	68fb      	ldr	r3, [r7, #12]
 800cdbc:	2200      	movs	r2, #0
 800cdbe:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 800cdc2:	68fb      	ldr	r3, [r7, #12]
 800cdc4:	3324      	adds	r3, #36	; 0x24
 800cdc6:	2204      	movs	r2, #4
 800cdc8:	2100      	movs	r1, #0
 800cdca:	4618      	mov	r0, r3
 800cdcc:	f00b f8e2 	bl	8017f94 <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800cdd0:	68fb      	ldr	r3, [r7, #12]
 800cdd2:	2200      	movs	r2, #0
 800cdd4:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800cdd6:	68fb      	ldr	r3, [r7, #12]
 800cdd8:	6a3a      	ldr	r2, [r7, #32]
 800cdda:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800cddc:	4b3f      	ldr	r3, [pc, #252]	; (800cedc <netif_add+0x19c>)
 800cdde:	781a      	ldrb	r2, [r3, #0]
 800cde0:	68fb      	ldr	r3, [r7, #12]
 800cde2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  netif->input = input;
 800cde6:	68fb      	ldr	r3, [r7, #12]
 800cde8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cdea:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800cdec:	683b      	ldr	r3, [r7, #0]
 800cdee:	687a      	ldr	r2, [r7, #4]
 800cdf0:	68b9      	ldr	r1, [r7, #8]
 800cdf2:	68f8      	ldr	r0, [r7, #12]
 800cdf4:	f000 f914 	bl	800d020 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800cdf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdfa:	68f8      	ldr	r0, [r7, #12]
 800cdfc:	4798      	blx	r3
 800cdfe:	4603      	mov	r3, r0
 800ce00:	2b00      	cmp	r3, #0
 800ce02:	d001      	beq.n	800ce08 <netif_add+0xc8>
    return NULL;
 800ce04:	2300      	movs	r3, #0
 800ce06:	e058      	b.n	800ceba <netif_add+0x17a>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800ce08:	68fb      	ldr	r3, [r7, #12]
 800ce0a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ce0e:	2bff      	cmp	r3, #255	; 0xff
 800ce10:	d103      	bne.n	800ce1a <netif_add+0xda>
        netif->num = 0;
 800ce12:	68fb      	ldr	r3, [r7, #12]
 800ce14:	2200      	movs	r2, #0
 800ce16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }
      num_netifs = 0;
 800ce1a:	2300      	movs	r3, #0
 800ce1c:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800ce1e:	4b30      	ldr	r3, [pc, #192]	; (800cee0 <netif_add+0x1a0>)
 800ce20:	681b      	ldr	r3, [r3, #0]
 800ce22:	617b      	str	r3, [r7, #20]
 800ce24:	e02b      	b.n	800ce7e <netif_add+0x13e>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800ce26:	697a      	ldr	r2, [r7, #20]
 800ce28:	68fb      	ldr	r3, [r7, #12]
 800ce2a:	429a      	cmp	r2, r3
 800ce2c:	d106      	bne.n	800ce3c <netif_add+0xfc>
 800ce2e:	4b25      	ldr	r3, [pc, #148]	; (800cec4 <netif_add+0x184>)
 800ce30:	f240 128b 	movw	r2, #395	; 0x18b
 800ce34:	492b      	ldr	r1, [pc, #172]	; (800cee4 <netif_add+0x1a4>)
 800ce36:	4825      	ldr	r0, [pc, #148]	; (800cecc <netif_add+0x18c>)
 800ce38:	f00b fdc8 	bl	80189cc <iprintf>
        num_netifs++;
 800ce3c:	693b      	ldr	r3, [r7, #16]
 800ce3e:	3301      	adds	r3, #1
 800ce40:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800ce42:	693b      	ldr	r3, [r7, #16]
 800ce44:	2bff      	cmp	r3, #255	; 0xff
 800ce46:	dd06      	ble.n	800ce56 <netif_add+0x116>
 800ce48:	4b1e      	ldr	r3, [pc, #120]	; (800cec4 <netif_add+0x184>)
 800ce4a:	f240 128d 	movw	r2, #397	; 0x18d
 800ce4e:	4926      	ldr	r1, [pc, #152]	; (800cee8 <netif_add+0x1a8>)
 800ce50:	481e      	ldr	r0, [pc, #120]	; (800cecc <netif_add+0x18c>)
 800ce52:	f00b fdbb 	bl	80189cc <iprintf>
        if (netif2->num == netif->num) {
 800ce56:	697b      	ldr	r3, [r7, #20]
 800ce58:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 800ce5c:	68fb      	ldr	r3, [r7, #12]
 800ce5e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ce62:	429a      	cmp	r2, r3
 800ce64:	d108      	bne.n	800ce78 <netif_add+0x138>
          netif->num++;
 800ce66:	68fb      	ldr	r3, [r7, #12]
 800ce68:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ce6c:	3301      	adds	r3, #1
 800ce6e:	b2da      	uxtb	r2, r3
 800ce70:	68fb      	ldr	r3, [r7, #12]
 800ce72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          break;
 800ce76:	e005      	b.n	800ce84 <netif_add+0x144>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800ce78:	697b      	ldr	r3, [r7, #20]
 800ce7a:	681b      	ldr	r3, [r3, #0]
 800ce7c:	617b      	str	r3, [r7, #20]
 800ce7e:	697b      	ldr	r3, [r7, #20]
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	d1d0      	bne.n	800ce26 <netif_add+0xe6>
        }
      }
    } while (netif2 != NULL);
 800ce84:	697b      	ldr	r3, [r7, #20]
 800ce86:	2b00      	cmp	r3, #0
 800ce88:	d1be      	bne.n	800ce08 <netif_add+0xc8>
  }
  if (netif->num == 254) {
 800ce8a:	68fb      	ldr	r3, [r7, #12]
 800ce8c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ce90:	2bfe      	cmp	r3, #254	; 0xfe
 800ce92:	d103      	bne.n	800ce9c <netif_add+0x15c>
    netif_num = 0;
 800ce94:	4b11      	ldr	r3, [pc, #68]	; (800cedc <netif_add+0x19c>)
 800ce96:	2200      	movs	r2, #0
 800ce98:	701a      	strb	r2, [r3, #0]
 800ce9a:	e006      	b.n	800ceaa <netif_add+0x16a>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800ce9c:	68fb      	ldr	r3, [r7, #12]
 800ce9e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800cea2:	3301      	adds	r3, #1
 800cea4:	b2da      	uxtb	r2, r3
 800cea6:	4b0d      	ldr	r3, [pc, #52]	; (800cedc <netif_add+0x19c>)
 800cea8:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800ceaa:	4b0d      	ldr	r3, [pc, #52]	; (800cee0 <netif_add+0x1a0>)
 800ceac:	681a      	ldr	r2, [r3, #0]
 800ceae:	68fb      	ldr	r3, [r7, #12]
 800ceb0:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800ceb2:	4a0b      	ldr	r2, [pc, #44]	; (800cee0 <netif_add+0x1a0>)
 800ceb4:	68fb      	ldr	r3, [r7, #12]
 800ceb6:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800ceb8:	68fb      	ldr	r3, [r7, #12]
}
 800ceba:	4618      	mov	r0, r3
 800cebc:	3718      	adds	r7, #24
 800cebe:	46bd      	mov	sp, r7
 800cec0:	bd80      	pop	{r7, pc}
 800cec2:	bf00      	nop
 800cec4:	0801e3a0 	.word	0x0801e3a0
 800cec8:	0801e434 	.word	0x0801e434
 800cecc:	0801e3f0 	.word	0x0801e3f0
 800ced0:	0801e450 	.word	0x0801e450
 800ced4:	08020e8c 	.word	0x08020e8c
 800ced8:	0800d233 	.word	0x0800d233
 800cedc:	20000498 	.word	0x20000498
 800cee0:	20007140 	.word	0x20007140
 800cee4:	0801e474 	.word	0x0801e474
 800cee8:	0801e488 	.word	0x0801e488

0800ceec <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800ceec:	b580      	push	{r7, lr}
 800ceee:	b082      	sub	sp, #8
 800cef0:	af00      	add	r7, sp, #0
 800cef2:	6078      	str	r0, [r7, #4]
 800cef4:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800cef6:	6839      	ldr	r1, [r7, #0]
 800cef8:	6878      	ldr	r0, [r7, #4]
 800cefa:	f002 facf 	bl	800f49c <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800cefe:	6839      	ldr	r1, [r7, #0]
 800cf00:	6878      	ldr	r0, [r7, #4]
 800cf02:	f006 fe6d 	bl	8013be0 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800cf06:	bf00      	nop
 800cf08:	3708      	adds	r7, #8
 800cf0a:	46bd      	mov	sp, r7
 800cf0c:	bd80      	pop	{r7, pc}
	...

0800cf10 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800cf10:	b580      	push	{r7, lr}
 800cf12:	b086      	sub	sp, #24
 800cf14:	af00      	add	r7, sp, #0
 800cf16:	60f8      	str	r0, [r7, #12]
 800cf18:	60b9      	str	r1, [r7, #8]
 800cf1a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800cf1c:	68bb      	ldr	r3, [r7, #8]
 800cf1e:	2b00      	cmp	r3, #0
 800cf20:	d106      	bne.n	800cf30 <netif_do_set_ipaddr+0x20>
 800cf22:	4b1d      	ldr	r3, [pc, #116]	; (800cf98 <netif_do_set_ipaddr+0x88>)
 800cf24:	f240 12cb 	movw	r2, #459	; 0x1cb
 800cf28:	491c      	ldr	r1, [pc, #112]	; (800cf9c <netif_do_set_ipaddr+0x8c>)
 800cf2a:	481d      	ldr	r0, [pc, #116]	; (800cfa0 <netif_do_set_ipaddr+0x90>)
 800cf2c:	f00b fd4e 	bl	80189cc <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	d106      	bne.n	800cf44 <netif_do_set_ipaddr+0x34>
 800cf36:	4b18      	ldr	r3, [pc, #96]	; (800cf98 <netif_do_set_ipaddr+0x88>)
 800cf38:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800cf3c:	4917      	ldr	r1, [pc, #92]	; (800cf9c <netif_do_set_ipaddr+0x8c>)
 800cf3e:	4818      	ldr	r0, [pc, #96]	; (800cfa0 <netif_do_set_ipaddr+0x90>)
 800cf40:	f00b fd44 	bl	80189cc <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800cf44:	68bb      	ldr	r3, [r7, #8]
 800cf46:	681a      	ldr	r2, [r3, #0]
 800cf48:	68fb      	ldr	r3, [r7, #12]
 800cf4a:	3304      	adds	r3, #4
 800cf4c:	681b      	ldr	r3, [r3, #0]
 800cf4e:	429a      	cmp	r2, r3
 800cf50:	d01c      	beq.n	800cf8c <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800cf52:	68bb      	ldr	r3, [r7, #8]
 800cf54:	681b      	ldr	r3, [r3, #0]
 800cf56:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800cf58:	68fb      	ldr	r3, [r7, #12]
 800cf5a:	3304      	adds	r3, #4
 800cf5c:	681a      	ldr	r2, [r3, #0]
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800cf62:	f107 0314 	add.w	r3, r7, #20
 800cf66:	4619      	mov	r1, r3
 800cf68:	6878      	ldr	r0, [r7, #4]
 800cf6a:	f7ff ffbf 	bl	800ceec <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800cf6e:	68bb      	ldr	r3, [r7, #8]
 800cf70:	2b00      	cmp	r3, #0
 800cf72:	d002      	beq.n	800cf7a <netif_do_set_ipaddr+0x6a>
 800cf74:	68bb      	ldr	r3, [r7, #8]
 800cf76:	681b      	ldr	r3, [r3, #0]
 800cf78:	e000      	b.n	800cf7c <netif_do_set_ipaddr+0x6c>
 800cf7a:	2300      	movs	r3, #0
 800cf7c:	68fa      	ldr	r2, [r7, #12]
 800cf7e:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800cf80:	2101      	movs	r1, #1
 800cf82:	68f8      	ldr	r0, [r7, #12]
 800cf84:	f000 f8d2 	bl	800d12c <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800cf88:	2301      	movs	r3, #1
 800cf8a:	e000      	b.n	800cf8e <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800cf8c:	2300      	movs	r3, #0
}
 800cf8e:	4618      	mov	r0, r3
 800cf90:	3718      	adds	r7, #24
 800cf92:	46bd      	mov	sp, r7
 800cf94:	bd80      	pop	{r7, pc}
 800cf96:	bf00      	nop
 800cf98:	0801e3a0 	.word	0x0801e3a0
 800cf9c:	0801e4b8 	.word	0x0801e4b8
 800cfa0:	0801e3f0 	.word	0x0801e3f0

0800cfa4 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800cfa4:	b480      	push	{r7}
 800cfa6:	b085      	sub	sp, #20
 800cfa8:	af00      	add	r7, sp, #0
 800cfaa:	60f8      	str	r0, [r7, #12]
 800cfac:	60b9      	str	r1, [r7, #8]
 800cfae:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800cfb0:	68bb      	ldr	r3, [r7, #8]
 800cfb2:	681a      	ldr	r2, [r3, #0]
 800cfb4:	68fb      	ldr	r3, [r7, #12]
 800cfb6:	3308      	adds	r3, #8
 800cfb8:	681b      	ldr	r3, [r3, #0]
 800cfba:	429a      	cmp	r2, r3
 800cfbc:	d00a      	beq.n	800cfd4 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800cfbe:	68bb      	ldr	r3, [r7, #8]
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	d002      	beq.n	800cfca <netif_do_set_netmask+0x26>
 800cfc4:	68bb      	ldr	r3, [r7, #8]
 800cfc6:	681b      	ldr	r3, [r3, #0]
 800cfc8:	e000      	b.n	800cfcc <netif_do_set_netmask+0x28>
 800cfca:	2300      	movs	r3, #0
 800cfcc:	68fa      	ldr	r2, [r7, #12]
 800cfce:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800cfd0:	2301      	movs	r3, #1
 800cfd2:	e000      	b.n	800cfd6 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800cfd4:	2300      	movs	r3, #0
}
 800cfd6:	4618      	mov	r0, r3
 800cfd8:	3714      	adds	r7, #20
 800cfda:	46bd      	mov	sp, r7
 800cfdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfe0:	4770      	bx	lr

0800cfe2 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800cfe2:	b480      	push	{r7}
 800cfe4:	b085      	sub	sp, #20
 800cfe6:	af00      	add	r7, sp, #0
 800cfe8:	60f8      	str	r0, [r7, #12]
 800cfea:	60b9      	str	r1, [r7, #8]
 800cfec:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800cfee:	68bb      	ldr	r3, [r7, #8]
 800cff0:	681a      	ldr	r2, [r3, #0]
 800cff2:	68fb      	ldr	r3, [r7, #12]
 800cff4:	330c      	adds	r3, #12
 800cff6:	681b      	ldr	r3, [r3, #0]
 800cff8:	429a      	cmp	r2, r3
 800cffa:	d00a      	beq.n	800d012 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800cffc:	68bb      	ldr	r3, [r7, #8]
 800cffe:	2b00      	cmp	r3, #0
 800d000:	d002      	beq.n	800d008 <netif_do_set_gw+0x26>
 800d002:	68bb      	ldr	r3, [r7, #8]
 800d004:	681b      	ldr	r3, [r3, #0]
 800d006:	e000      	b.n	800d00a <netif_do_set_gw+0x28>
 800d008:	2300      	movs	r3, #0
 800d00a:	68fa      	ldr	r2, [r7, #12]
 800d00c:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800d00e:	2301      	movs	r3, #1
 800d010:	e000      	b.n	800d014 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800d012:	2300      	movs	r3, #0
}
 800d014:	4618      	mov	r0, r3
 800d016:	3714      	adds	r7, #20
 800d018:	46bd      	mov	sp, r7
 800d01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d01e:	4770      	bx	lr

0800d020 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800d020:	b580      	push	{r7, lr}
 800d022:	b088      	sub	sp, #32
 800d024:	af00      	add	r7, sp, #0
 800d026:	60f8      	str	r0, [r7, #12]
 800d028:	60b9      	str	r1, [r7, #8]
 800d02a:	607a      	str	r2, [r7, #4]
 800d02c:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800d02e:	2300      	movs	r3, #0
 800d030:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800d032:	2300      	movs	r3, #0
 800d034:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800d036:	68bb      	ldr	r3, [r7, #8]
 800d038:	2b00      	cmp	r3, #0
 800d03a:	d101      	bne.n	800d040 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800d03c:	4b1c      	ldr	r3, [pc, #112]	; (800d0b0 <netif_set_addr+0x90>)
 800d03e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	2b00      	cmp	r3, #0
 800d044:	d101      	bne.n	800d04a <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800d046:	4b1a      	ldr	r3, [pc, #104]	; (800d0b0 <netif_set_addr+0x90>)
 800d048:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800d04a:	683b      	ldr	r3, [r7, #0]
 800d04c:	2b00      	cmp	r3, #0
 800d04e:	d101      	bne.n	800d054 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800d050:	4b17      	ldr	r3, [pc, #92]	; (800d0b0 <netif_set_addr+0x90>)
 800d052:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800d054:	68bb      	ldr	r3, [r7, #8]
 800d056:	2b00      	cmp	r3, #0
 800d058:	d003      	beq.n	800d062 <netif_set_addr+0x42>
 800d05a:	68bb      	ldr	r3, [r7, #8]
 800d05c:	681b      	ldr	r3, [r3, #0]
 800d05e:	2b00      	cmp	r3, #0
 800d060:	d101      	bne.n	800d066 <netif_set_addr+0x46>
 800d062:	2301      	movs	r3, #1
 800d064:	e000      	b.n	800d068 <netif_set_addr+0x48>
 800d066:	2300      	movs	r3, #0
 800d068:	617b      	str	r3, [r7, #20]
  if (remove) {
 800d06a:	697b      	ldr	r3, [r7, #20]
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	d006      	beq.n	800d07e <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800d070:	f107 0310 	add.w	r3, r7, #16
 800d074:	461a      	mov	r2, r3
 800d076:	68b9      	ldr	r1, [r7, #8]
 800d078:	68f8      	ldr	r0, [r7, #12]
 800d07a:	f7ff ff49 	bl	800cf10 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800d07e:	69fa      	ldr	r2, [r7, #28]
 800d080:	6879      	ldr	r1, [r7, #4]
 800d082:	68f8      	ldr	r0, [r7, #12]
 800d084:	f7ff ff8e 	bl	800cfa4 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800d088:	69ba      	ldr	r2, [r7, #24]
 800d08a:	6839      	ldr	r1, [r7, #0]
 800d08c:	68f8      	ldr	r0, [r7, #12]
 800d08e:	f7ff ffa8 	bl	800cfe2 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800d092:	697b      	ldr	r3, [r7, #20]
 800d094:	2b00      	cmp	r3, #0
 800d096:	d106      	bne.n	800d0a6 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800d098:	f107 0310 	add.w	r3, r7, #16
 800d09c:	461a      	mov	r2, r3
 800d09e:	68b9      	ldr	r1, [r7, #8]
 800d0a0:	68f8      	ldr	r0, [r7, #12]
 800d0a2:	f7ff ff35 	bl	800cf10 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800d0a6:	bf00      	nop
 800d0a8:	3720      	adds	r7, #32
 800d0aa:	46bd      	mov	sp, r7
 800d0ac:	bd80      	pop	{r7, pc}
 800d0ae:	bf00      	nop
 800d0b0:	08020e8c 	.word	0x08020e8c

0800d0b4 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800d0b4:	b480      	push	{r7}
 800d0b6:	b083      	sub	sp, #12
 800d0b8:	af00      	add	r7, sp, #0
 800d0ba:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800d0bc:	4a04      	ldr	r2, [pc, #16]	; (800d0d0 <netif_set_default+0x1c>)
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800d0c2:	bf00      	nop
 800d0c4:	370c      	adds	r7, #12
 800d0c6:	46bd      	mov	sp, r7
 800d0c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0cc:	4770      	bx	lr
 800d0ce:	bf00      	nop
 800d0d0:	20007144 	.word	0x20007144

0800d0d4 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800d0d4:	b580      	push	{r7, lr}
 800d0d6:	b082      	sub	sp, #8
 800d0d8:	af00      	add	r7, sp, #0
 800d0da:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	d107      	bne.n	800d0f2 <netif_set_up+0x1e>
 800d0e2:	4b0f      	ldr	r3, [pc, #60]	; (800d120 <netif_set_up+0x4c>)
 800d0e4:	f44f 7254 	mov.w	r2, #848	; 0x350
 800d0e8:	490e      	ldr	r1, [pc, #56]	; (800d124 <netif_set_up+0x50>)
 800d0ea:	480f      	ldr	r0, [pc, #60]	; (800d128 <netif_set_up+0x54>)
 800d0ec:	f00b fc6e 	bl	80189cc <iprintf>
 800d0f0:	e013      	b.n	800d11a <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800d0f8:	f003 0301 	and.w	r3, r3, #1
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	d10c      	bne.n	800d11a <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800d106:	f043 0301 	orr.w	r3, r3, #1
 800d10a:	b2da      	uxtb	r2, r3
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800d112:	2103      	movs	r1, #3
 800d114:	6878      	ldr	r0, [r7, #4]
 800d116:	f000 f809 	bl	800d12c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800d11a:	3708      	adds	r7, #8
 800d11c:	46bd      	mov	sp, r7
 800d11e:	bd80      	pop	{r7, pc}
 800d120:	0801e3a0 	.word	0x0801e3a0
 800d124:	0801e528 	.word	0x0801e528
 800d128:	0801e3f0 	.word	0x0801e3f0

0800d12c <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800d12c:	b580      	push	{r7, lr}
 800d12e:	b082      	sub	sp, #8
 800d130:	af00      	add	r7, sp, #0
 800d132:	6078      	str	r0, [r7, #4]
 800d134:	460b      	mov	r3, r1
 800d136:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	d106      	bne.n	800d14c <netif_issue_reports+0x20>
 800d13e:	4b18      	ldr	r3, [pc, #96]	; (800d1a0 <netif_issue_reports+0x74>)
 800d140:	f240 326d 	movw	r2, #877	; 0x36d
 800d144:	4917      	ldr	r1, [pc, #92]	; (800d1a4 <netif_issue_reports+0x78>)
 800d146:	4818      	ldr	r0, [pc, #96]	; (800d1a8 <netif_issue_reports+0x7c>)
 800d148:	f00b fc40 	bl	80189cc <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800d152:	f003 0304 	and.w	r3, r3, #4
 800d156:	2b00      	cmp	r3, #0
 800d158:	d01e      	beq.n	800d198 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800d160:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800d164:	2b00      	cmp	r3, #0
 800d166:	d017      	beq.n	800d198 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800d168:	78fb      	ldrb	r3, [r7, #3]
 800d16a:	f003 0301 	and.w	r3, r3, #1
 800d16e:	2b00      	cmp	r3, #0
 800d170:	d013      	beq.n	800d19a <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	3304      	adds	r3, #4
 800d176:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800d178:	2b00      	cmp	r3, #0
 800d17a:	d00e      	beq.n	800d19a <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800d182:	f003 0308 	and.w	r3, r3, #8
 800d186:	2b00      	cmp	r3, #0
 800d188:	d007      	beq.n	800d19a <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	3304      	adds	r3, #4
 800d18e:	4619      	mov	r1, r3
 800d190:	6878      	ldr	r0, [r7, #4]
 800d192:	f009 fae9 	bl	8016768 <etharp_request>
 800d196:	e000      	b.n	800d19a <netif_issue_reports+0x6e>
    return;
 800d198:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800d19a:	3708      	adds	r7, #8
 800d19c:	46bd      	mov	sp, r7
 800d19e:	bd80      	pop	{r7, pc}
 800d1a0:	0801e3a0 	.word	0x0801e3a0
 800d1a4:	0801e544 	.word	0x0801e544
 800d1a8:	0801e3f0 	.word	0x0801e3f0

0800d1ac <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800d1ac:	b580      	push	{r7, lr}
 800d1ae:	b082      	sub	sp, #8
 800d1b0:	af00      	add	r7, sp, #0
 800d1b2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	d107      	bne.n	800d1ca <netif_set_down+0x1e>
 800d1ba:	4b12      	ldr	r3, [pc, #72]	; (800d204 <netif_set_down+0x58>)
 800d1bc:	f240 329b 	movw	r2, #923	; 0x39b
 800d1c0:	4911      	ldr	r1, [pc, #68]	; (800d208 <netif_set_down+0x5c>)
 800d1c2:	4812      	ldr	r0, [pc, #72]	; (800d20c <netif_set_down+0x60>)
 800d1c4:	f00b fc02 	bl	80189cc <iprintf>
 800d1c8:	e019      	b.n	800d1fe <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800d1d0:	f003 0301 	and.w	r3, r3, #1
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	d012      	beq.n	800d1fe <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800d1de:	f023 0301 	bic.w	r3, r3, #1
 800d1e2:	b2da      	uxtb	r2, r3
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800d1f0:	f003 0308 	and.w	r3, r3, #8
 800d1f4:	2b00      	cmp	r3, #0
 800d1f6:	d002      	beq.n	800d1fe <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800d1f8:	6878      	ldr	r0, [r7, #4]
 800d1fa:	f008 fe6f 	bl	8015edc <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800d1fe:	3708      	adds	r7, #8
 800d200:	46bd      	mov	sp, r7
 800d202:	bd80      	pop	{r7, pc}
 800d204:	0801e3a0 	.word	0x0801e3a0
 800d208:	0801e568 	.word	0x0801e568
 800d20c:	0801e3f0 	.word	0x0801e3f0

0800d210 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800d210:	b480      	push	{r7}
 800d212:	b083      	sub	sp, #12
 800d214:	af00      	add	r7, sp, #0
 800d216:	6078      	str	r0, [r7, #4]
 800d218:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	2b00      	cmp	r3, #0
 800d21e:	d002      	beq.n	800d226 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	683a      	ldr	r2, [r7, #0]
 800d224:	61da      	str	r2, [r3, #28]
  }
}
 800d226:	bf00      	nop
 800d228:	370c      	adds	r7, #12
 800d22a:	46bd      	mov	sp, r7
 800d22c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d230:	4770      	bx	lr

0800d232 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800d232:	b480      	push	{r7}
 800d234:	b085      	sub	sp, #20
 800d236:	af00      	add	r7, sp, #0
 800d238:	60f8      	str	r0, [r7, #12]
 800d23a:	60b9      	str	r1, [r7, #8]
 800d23c:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800d23e:	f06f 030b 	mvn.w	r3, #11
}
 800d242:	4618      	mov	r0, r3
 800d244:	3714      	adds	r7, #20
 800d246:	46bd      	mov	sp, r7
 800d248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d24c:	4770      	bx	lr
	...

0800d250 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800d250:	b480      	push	{r7}
 800d252:	b085      	sub	sp, #20
 800d254:	af00      	add	r7, sp, #0
 800d256:	4603      	mov	r3, r0
 800d258:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800d25a:	79fb      	ldrb	r3, [r7, #7]
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	d013      	beq.n	800d288 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800d260:	4b0d      	ldr	r3, [pc, #52]	; (800d298 <netif_get_by_index+0x48>)
 800d262:	681b      	ldr	r3, [r3, #0]
 800d264:	60fb      	str	r3, [r7, #12]
 800d266:	e00c      	b.n	800d282 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800d268:	68fb      	ldr	r3, [r7, #12]
 800d26a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d26e:	3301      	adds	r3, #1
 800d270:	b2db      	uxtb	r3, r3
 800d272:	79fa      	ldrb	r2, [r7, #7]
 800d274:	429a      	cmp	r2, r3
 800d276:	d101      	bne.n	800d27c <netif_get_by_index+0x2c>
        return netif; /* found! */
 800d278:	68fb      	ldr	r3, [r7, #12]
 800d27a:	e006      	b.n	800d28a <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800d27c:	68fb      	ldr	r3, [r7, #12]
 800d27e:	681b      	ldr	r3, [r3, #0]
 800d280:	60fb      	str	r3, [r7, #12]
 800d282:	68fb      	ldr	r3, [r7, #12]
 800d284:	2b00      	cmp	r3, #0
 800d286:	d1ef      	bne.n	800d268 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800d288:	2300      	movs	r3, #0
}
 800d28a:	4618      	mov	r0, r3
 800d28c:	3714      	adds	r7, #20
 800d28e:	46bd      	mov	sp, r7
 800d290:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d294:	4770      	bx	lr
 800d296:	bf00      	nop
 800d298:	20007140 	.word	0x20007140

0800d29c <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800d29c:	b480      	push	{r7}
 800d29e:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 800d2a0:	4b03      	ldr	r3, [pc, #12]	; (800d2b0 <pbuf_pool_is_empty+0x14>)
 800d2a2:	2201      	movs	r2, #1
 800d2a4:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800d2a6:	bf00      	nop
 800d2a8:	46bd      	mov	sp, r7
 800d2aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2ae:	4770      	bx	lr
 800d2b0:	20007148 	.word	0x20007148

0800d2b4 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800d2b4:	b480      	push	{r7}
 800d2b6:	b085      	sub	sp, #20
 800d2b8:	af00      	add	r7, sp, #0
 800d2ba:	60f8      	str	r0, [r7, #12]
 800d2bc:	60b9      	str	r1, [r7, #8]
 800d2be:	4611      	mov	r1, r2
 800d2c0:	461a      	mov	r2, r3
 800d2c2:	460b      	mov	r3, r1
 800d2c4:	80fb      	strh	r3, [r7, #6]
 800d2c6:	4613      	mov	r3, r2
 800d2c8:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800d2ca:	68fb      	ldr	r3, [r7, #12]
 800d2cc:	2200      	movs	r2, #0
 800d2ce:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800d2d0:	68fb      	ldr	r3, [r7, #12]
 800d2d2:	68ba      	ldr	r2, [r7, #8]
 800d2d4:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800d2d6:	68fb      	ldr	r3, [r7, #12]
 800d2d8:	88fa      	ldrh	r2, [r7, #6]
 800d2da:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800d2dc:	68fb      	ldr	r3, [r7, #12]
 800d2de:	88ba      	ldrh	r2, [r7, #4]
 800d2e0:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800d2e2:	8b3b      	ldrh	r3, [r7, #24]
 800d2e4:	b2da      	uxtb	r2, r3
 800d2e6:	68fb      	ldr	r3, [r7, #12]
 800d2e8:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800d2ea:	68fb      	ldr	r3, [r7, #12]
 800d2ec:	7f3a      	ldrb	r2, [r7, #28]
 800d2ee:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800d2f0:	68fb      	ldr	r3, [r7, #12]
 800d2f2:	2201      	movs	r2, #1
 800d2f4:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800d2f6:	68fb      	ldr	r3, [r7, #12]
 800d2f8:	2200      	movs	r2, #0
 800d2fa:	73da      	strb	r2, [r3, #15]
}
 800d2fc:	bf00      	nop
 800d2fe:	3714      	adds	r7, #20
 800d300:	46bd      	mov	sp, r7
 800d302:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d306:	4770      	bx	lr

0800d308 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800d308:	b580      	push	{r7, lr}
 800d30a:	b08c      	sub	sp, #48	; 0x30
 800d30c:	af02      	add	r7, sp, #8
 800d30e:	4603      	mov	r3, r0
 800d310:	71fb      	strb	r3, [r7, #7]
 800d312:	460b      	mov	r3, r1
 800d314:	80bb      	strh	r3, [r7, #4]
 800d316:	4613      	mov	r3, r2
 800d318:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800d31a:	79fb      	ldrb	r3, [r7, #7]
 800d31c:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800d31e:	887b      	ldrh	r3, [r7, #2]
 800d320:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800d324:	d07f      	beq.n	800d426 <pbuf_alloc+0x11e>
 800d326:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800d32a:	f300 80c8 	bgt.w	800d4be <pbuf_alloc+0x1b6>
 800d32e:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800d332:	d010      	beq.n	800d356 <pbuf_alloc+0x4e>
 800d334:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800d338:	f300 80c1 	bgt.w	800d4be <pbuf_alloc+0x1b6>
 800d33c:	2b01      	cmp	r3, #1
 800d33e:	d002      	beq.n	800d346 <pbuf_alloc+0x3e>
 800d340:	2b41      	cmp	r3, #65	; 0x41
 800d342:	f040 80bc 	bne.w	800d4be <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800d346:	887a      	ldrh	r2, [r7, #2]
 800d348:	88bb      	ldrh	r3, [r7, #4]
 800d34a:	4619      	mov	r1, r3
 800d34c:	2000      	movs	r0, #0
 800d34e:	f000 f8d1 	bl	800d4f4 <pbuf_alloc_reference>
 800d352:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800d354:	e0bd      	b.n	800d4d2 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800d356:	2300      	movs	r3, #0
 800d358:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800d35a:	2300      	movs	r3, #0
 800d35c:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800d35e:	88bb      	ldrh	r3, [r7, #4]
 800d360:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800d362:	2008      	movs	r0, #8
 800d364:	f7ff fc6e 	bl	800cc44 <memp_malloc>
 800d368:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800d36a:	693b      	ldr	r3, [r7, #16]
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	d109      	bne.n	800d384 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800d370:	f7ff ff94 	bl	800d29c <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800d374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d376:	2b00      	cmp	r3, #0
 800d378:	d002      	beq.n	800d380 <pbuf_alloc+0x78>
            pbuf_free(p);
 800d37a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d37c:	f000 faa8 	bl	800d8d0 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800d380:	2300      	movs	r3, #0
 800d382:	e0a7      	b.n	800d4d4 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800d384:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d386:	3303      	adds	r3, #3
 800d388:	b29b      	uxth	r3, r3
 800d38a:	f023 0303 	bic.w	r3, r3, #3
 800d38e:	b29b      	uxth	r3, r3
 800d390:	f5c3 7301 	rsb	r3, r3, #516	; 0x204
 800d394:	b29b      	uxth	r3, r3
 800d396:	8b7a      	ldrh	r2, [r7, #26]
 800d398:	4293      	cmp	r3, r2
 800d39a:	bf28      	it	cs
 800d39c:	4613      	movcs	r3, r2
 800d39e:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800d3a0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d3a2:	3310      	adds	r3, #16
 800d3a4:	693a      	ldr	r2, [r7, #16]
 800d3a6:	4413      	add	r3, r2
 800d3a8:	3303      	adds	r3, #3
 800d3aa:	f023 0303 	bic.w	r3, r3, #3
 800d3ae:	4618      	mov	r0, r3
 800d3b0:	89f9      	ldrh	r1, [r7, #14]
 800d3b2:	8b7a      	ldrh	r2, [r7, #26]
 800d3b4:	2300      	movs	r3, #0
 800d3b6:	9301      	str	r3, [sp, #4]
 800d3b8:	887b      	ldrh	r3, [r7, #2]
 800d3ba:	9300      	str	r3, [sp, #0]
 800d3bc:	460b      	mov	r3, r1
 800d3be:	4601      	mov	r1, r0
 800d3c0:	6938      	ldr	r0, [r7, #16]
 800d3c2:	f7ff ff77 	bl	800d2b4 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800d3c6:	693b      	ldr	r3, [r7, #16]
 800d3c8:	685b      	ldr	r3, [r3, #4]
 800d3ca:	f003 0303 	and.w	r3, r3, #3
 800d3ce:	2b00      	cmp	r3, #0
 800d3d0:	d006      	beq.n	800d3e0 <pbuf_alloc+0xd8>
 800d3d2:	4b42      	ldr	r3, [pc, #264]	; (800d4dc <pbuf_alloc+0x1d4>)
 800d3d4:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d3d8:	4941      	ldr	r1, [pc, #260]	; (800d4e0 <pbuf_alloc+0x1d8>)
 800d3da:	4842      	ldr	r0, [pc, #264]	; (800d4e4 <pbuf_alloc+0x1dc>)
 800d3dc:	f00b faf6 	bl	80189cc <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800d3e0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d3e2:	3303      	adds	r3, #3
 800d3e4:	f023 0303 	bic.w	r3, r3, #3
 800d3e8:	f5b3 7f01 	cmp.w	r3, #516	; 0x204
 800d3ec:	d106      	bne.n	800d3fc <pbuf_alloc+0xf4>
 800d3ee:	4b3b      	ldr	r3, [pc, #236]	; (800d4dc <pbuf_alloc+0x1d4>)
 800d3f0:	f44f 7281 	mov.w	r2, #258	; 0x102
 800d3f4:	493c      	ldr	r1, [pc, #240]	; (800d4e8 <pbuf_alloc+0x1e0>)
 800d3f6:	483b      	ldr	r0, [pc, #236]	; (800d4e4 <pbuf_alloc+0x1dc>)
 800d3f8:	f00b fae8 	bl	80189cc <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800d3fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3fe:	2b00      	cmp	r3, #0
 800d400:	d102      	bne.n	800d408 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800d402:	693b      	ldr	r3, [r7, #16]
 800d404:	627b      	str	r3, [r7, #36]	; 0x24
 800d406:	e002      	b.n	800d40e <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800d408:	69fb      	ldr	r3, [r7, #28]
 800d40a:	693a      	ldr	r2, [r7, #16]
 800d40c:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800d40e:	693b      	ldr	r3, [r7, #16]
 800d410:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800d412:	8b7a      	ldrh	r2, [r7, #26]
 800d414:	89fb      	ldrh	r3, [r7, #14]
 800d416:	1ad3      	subs	r3, r2, r3
 800d418:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800d41a:	2300      	movs	r3, #0
 800d41c:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800d41e:	8b7b      	ldrh	r3, [r7, #26]
 800d420:	2b00      	cmp	r3, #0
 800d422:	d19e      	bne.n	800d362 <pbuf_alloc+0x5a>
      break;
 800d424:	e055      	b.n	800d4d2 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800d426:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d428:	3303      	adds	r3, #3
 800d42a:	b29b      	uxth	r3, r3
 800d42c:	f023 0303 	bic.w	r3, r3, #3
 800d430:	b29a      	uxth	r2, r3
 800d432:	88bb      	ldrh	r3, [r7, #4]
 800d434:	3303      	adds	r3, #3
 800d436:	b29b      	uxth	r3, r3
 800d438:	f023 0303 	bic.w	r3, r3, #3
 800d43c:	b29b      	uxth	r3, r3
 800d43e:	4413      	add	r3, r2
 800d440:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800d442:	8b3b      	ldrh	r3, [r7, #24]
 800d444:	3310      	adds	r3, #16
 800d446:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800d448:	8b3a      	ldrh	r2, [r7, #24]
 800d44a:	88bb      	ldrh	r3, [r7, #4]
 800d44c:	3303      	adds	r3, #3
 800d44e:	f023 0303 	bic.w	r3, r3, #3
 800d452:	429a      	cmp	r2, r3
 800d454:	d306      	bcc.n	800d464 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800d456:	8afa      	ldrh	r2, [r7, #22]
 800d458:	88bb      	ldrh	r3, [r7, #4]
 800d45a:	3303      	adds	r3, #3
 800d45c:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800d460:	429a      	cmp	r2, r3
 800d462:	d201      	bcs.n	800d468 <pbuf_alloc+0x160>
        return NULL;
 800d464:	2300      	movs	r3, #0
 800d466:	e035      	b.n	800d4d4 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800d468:	8afb      	ldrh	r3, [r7, #22]
 800d46a:	4618      	mov	r0, r3
 800d46c:	f7ff fa7c 	bl	800c968 <mem_malloc>
 800d470:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800d472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d474:	2b00      	cmp	r3, #0
 800d476:	d101      	bne.n	800d47c <pbuf_alloc+0x174>
        return NULL;
 800d478:	2300      	movs	r3, #0
 800d47a:	e02b      	b.n	800d4d4 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800d47c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d47e:	3310      	adds	r3, #16
 800d480:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d482:	4413      	add	r3, r2
 800d484:	3303      	adds	r3, #3
 800d486:	f023 0303 	bic.w	r3, r3, #3
 800d48a:	4618      	mov	r0, r3
 800d48c:	88b9      	ldrh	r1, [r7, #4]
 800d48e:	88ba      	ldrh	r2, [r7, #4]
 800d490:	2300      	movs	r3, #0
 800d492:	9301      	str	r3, [sp, #4]
 800d494:	887b      	ldrh	r3, [r7, #2]
 800d496:	9300      	str	r3, [sp, #0]
 800d498:	460b      	mov	r3, r1
 800d49a:	4601      	mov	r1, r0
 800d49c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d49e:	f7ff ff09 	bl	800d2b4 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800d4a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4a4:	685b      	ldr	r3, [r3, #4]
 800d4a6:	f003 0303 	and.w	r3, r3, #3
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	d010      	beq.n	800d4d0 <pbuf_alloc+0x1c8>
 800d4ae:	4b0b      	ldr	r3, [pc, #44]	; (800d4dc <pbuf_alloc+0x1d4>)
 800d4b0:	f44f 7291 	mov.w	r2, #290	; 0x122
 800d4b4:	490d      	ldr	r1, [pc, #52]	; (800d4ec <pbuf_alloc+0x1e4>)
 800d4b6:	480b      	ldr	r0, [pc, #44]	; (800d4e4 <pbuf_alloc+0x1dc>)
 800d4b8:	f00b fa88 	bl	80189cc <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800d4bc:	e008      	b.n	800d4d0 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800d4be:	4b07      	ldr	r3, [pc, #28]	; (800d4dc <pbuf_alloc+0x1d4>)
 800d4c0:	f240 1227 	movw	r2, #295	; 0x127
 800d4c4:	490a      	ldr	r1, [pc, #40]	; (800d4f0 <pbuf_alloc+0x1e8>)
 800d4c6:	4807      	ldr	r0, [pc, #28]	; (800d4e4 <pbuf_alloc+0x1dc>)
 800d4c8:	f00b fa80 	bl	80189cc <iprintf>
      return NULL;
 800d4cc:	2300      	movs	r3, #0
 800d4ce:	e001      	b.n	800d4d4 <pbuf_alloc+0x1cc>
      break;
 800d4d0:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800d4d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d4d4:	4618      	mov	r0, r3
 800d4d6:	3728      	adds	r7, #40	; 0x28
 800d4d8:	46bd      	mov	sp, r7
 800d4da:	bd80      	pop	{r7, pc}
 800d4dc:	0801e5d0 	.word	0x0801e5d0
 800d4e0:	0801e600 	.word	0x0801e600
 800d4e4:	0801e630 	.word	0x0801e630
 800d4e8:	0801e658 	.word	0x0801e658
 800d4ec:	0801e68c 	.word	0x0801e68c
 800d4f0:	0801e6b8 	.word	0x0801e6b8

0800d4f4 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800d4f4:	b580      	push	{r7, lr}
 800d4f6:	b086      	sub	sp, #24
 800d4f8:	af02      	add	r7, sp, #8
 800d4fa:	6078      	str	r0, [r7, #4]
 800d4fc:	460b      	mov	r3, r1
 800d4fe:	807b      	strh	r3, [r7, #2]
 800d500:	4613      	mov	r3, r2
 800d502:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800d504:	883b      	ldrh	r3, [r7, #0]
 800d506:	2b41      	cmp	r3, #65	; 0x41
 800d508:	d009      	beq.n	800d51e <pbuf_alloc_reference+0x2a>
 800d50a:	883b      	ldrh	r3, [r7, #0]
 800d50c:	2b01      	cmp	r3, #1
 800d50e:	d006      	beq.n	800d51e <pbuf_alloc_reference+0x2a>
 800d510:	4b0f      	ldr	r3, [pc, #60]	; (800d550 <pbuf_alloc_reference+0x5c>)
 800d512:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800d516:	490f      	ldr	r1, [pc, #60]	; (800d554 <pbuf_alloc_reference+0x60>)
 800d518:	480f      	ldr	r0, [pc, #60]	; (800d558 <pbuf_alloc_reference+0x64>)
 800d51a:	f00b fa57 	bl	80189cc <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800d51e:	2007      	movs	r0, #7
 800d520:	f7ff fb90 	bl	800cc44 <memp_malloc>
 800d524:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800d526:	68fb      	ldr	r3, [r7, #12]
 800d528:	2b00      	cmp	r3, #0
 800d52a:	d101      	bne.n	800d530 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800d52c:	2300      	movs	r3, #0
 800d52e:	e00b      	b.n	800d548 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800d530:	8879      	ldrh	r1, [r7, #2]
 800d532:	887a      	ldrh	r2, [r7, #2]
 800d534:	2300      	movs	r3, #0
 800d536:	9301      	str	r3, [sp, #4]
 800d538:	883b      	ldrh	r3, [r7, #0]
 800d53a:	9300      	str	r3, [sp, #0]
 800d53c:	460b      	mov	r3, r1
 800d53e:	6879      	ldr	r1, [r7, #4]
 800d540:	68f8      	ldr	r0, [r7, #12]
 800d542:	f7ff feb7 	bl	800d2b4 <pbuf_init_alloced_pbuf>
  return p;
 800d546:	68fb      	ldr	r3, [r7, #12]
}
 800d548:	4618      	mov	r0, r3
 800d54a:	3710      	adds	r7, #16
 800d54c:	46bd      	mov	sp, r7
 800d54e:	bd80      	pop	{r7, pc}
 800d550:	0801e5d0 	.word	0x0801e5d0
 800d554:	0801e6d4 	.word	0x0801e6d4
 800d558:	0801e630 	.word	0x0801e630

0800d55c <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800d55c:	b580      	push	{r7, lr}
 800d55e:	b088      	sub	sp, #32
 800d560:	af02      	add	r7, sp, #8
 800d562:	607b      	str	r3, [r7, #4]
 800d564:	4603      	mov	r3, r0
 800d566:	73fb      	strb	r3, [r7, #15]
 800d568:	460b      	mov	r3, r1
 800d56a:	81bb      	strh	r3, [r7, #12]
 800d56c:	4613      	mov	r3, r2
 800d56e:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800d570:	7bfb      	ldrb	r3, [r7, #15]
 800d572:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800d574:	8a7b      	ldrh	r3, [r7, #18]
 800d576:	3303      	adds	r3, #3
 800d578:	f023 0203 	bic.w	r2, r3, #3
 800d57c:	89bb      	ldrh	r3, [r7, #12]
 800d57e:	441a      	add	r2, r3
 800d580:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d582:	429a      	cmp	r2, r3
 800d584:	d901      	bls.n	800d58a <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800d586:	2300      	movs	r3, #0
 800d588:	e018      	b.n	800d5bc <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800d58a:	6a3b      	ldr	r3, [r7, #32]
 800d58c:	2b00      	cmp	r3, #0
 800d58e:	d007      	beq.n	800d5a0 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800d590:	8a7b      	ldrh	r3, [r7, #18]
 800d592:	3303      	adds	r3, #3
 800d594:	f023 0303 	bic.w	r3, r3, #3
 800d598:	6a3a      	ldr	r2, [r7, #32]
 800d59a:	4413      	add	r3, r2
 800d59c:	617b      	str	r3, [r7, #20]
 800d59e:	e001      	b.n	800d5a4 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800d5a0:	2300      	movs	r3, #0
 800d5a2:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800d5a4:	6878      	ldr	r0, [r7, #4]
 800d5a6:	89b9      	ldrh	r1, [r7, #12]
 800d5a8:	89ba      	ldrh	r2, [r7, #12]
 800d5aa:	2302      	movs	r3, #2
 800d5ac:	9301      	str	r3, [sp, #4]
 800d5ae:	897b      	ldrh	r3, [r7, #10]
 800d5b0:	9300      	str	r3, [sp, #0]
 800d5b2:	460b      	mov	r3, r1
 800d5b4:	6979      	ldr	r1, [r7, #20]
 800d5b6:	f7ff fe7d 	bl	800d2b4 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800d5ba:	687b      	ldr	r3, [r7, #4]
}
 800d5bc:	4618      	mov	r0, r3
 800d5be:	3718      	adds	r7, #24
 800d5c0:	46bd      	mov	sp, r7
 800d5c2:	bd80      	pop	{r7, pc}

0800d5c4 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800d5c4:	b580      	push	{r7, lr}
 800d5c6:	b084      	sub	sp, #16
 800d5c8:	af00      	add	r7, sp, #0
 800d5ca:	6078      	str	r0, [r7, #4]
 800d5cc:	460b      	mov	r3, r1
 800d5ce:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	2b00      	cmp	r3, #0
 800d5d4:	d106      	bne.n	800d5e4 <pbuf_realloc+0x20>
 800d5d6:	4b3a      	ldr	r3, [pc, #232]	; (800d6c0 <pbuf_realloc+0xfc>)
 800d5d8:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800d5dc:	4939      	ldr	r1, [pc, #228]	; (800d6c4 <pbuf_realloc+0x100>)
 800d5de:	483a      	ldr	r0, [pc, #232]	; (800d6c8 <pbuf_realloc+0x104>)
 800d5e0:	f00b f9f4 	bl	80189cc <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	891b      	ldrh	r3, [r3, #8]
 800d5e8:	887a      	ldrh	r2, [r7, #2]
 800d5ea:	429a      	cmp	r2, r3
 800d5ec:	d263      	bcs.n	800d6b6 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	891a      	ldrh	r2, [r3, #8]
 800d5f2:	887b      	ldrh	r3, [r7, #2]
 800d5f4:	1ad3      	subs	r3, r2, r3
 800d5f6:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800d5f8:	887b      	ldrh	r3, [r7, #2]
 800d5fa:	817b      	strh	r3, [r7, #10]
  q = p;
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800d600:	e018      	b.n	800d634 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800d602:	68fb      	ldr	r3, [r7, #12]
 800d604:	895b      	ldrh	r3, [r3, #10]
 800d606:	897a      	ldrh	r2, [r7, #10]
 800d608:	1ad3      	subs	r3, r2, r3
 800d60a:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800d60c:	68fb      	ldr	r3, [r7, #12]
 800d60e:	891a      	ldrh	r2, [r3, #8]
 800d610:	893b      	ldrh	r3, [r7, #8]
 800d612:	1ad3      	subs	r3, r2, r3
 800d614:	b29a      	uxth	r2, r3
 800d616:	68fb      	ldr	r3, [r7, #12]
 800d618:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800d61a:	68fb      	ldr	r3, [r7, #12]
 800d61c:	681b      	ldr	r3, [r3, #0]
 800d61e:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800d620:	68fb      	ldr	r3, [r7, #12]
 800d622:	2b00      	cmp	r3, #0
 800d624:	d106      	bne.n	800d634 <pbuf_realloc+0x70>
 800d626:	4b26      	ldr	r3, [pc, #152]	; (800d6c0 <pbuf_realloc+0xfc>)
 800d628:	f240 12af 	movw	r2, #431	; 0x1af
 800d62c:	4927      	ldr	r1, [pc, #156]	; (800d6cc <pbuf_realloc+0x108>)
 800d62e:	4826      	ldr	r0, [pc, #152]	; (800d6c8 <pbuf_realloc+0x104>)
 800d630:	f00b f9cc 	bl	80189cc <iprintf>
  while (rem_len > q->len) {
 800d634:	68fb      	ldr	r3, [r7, #12]
 800d636:	895b      	ldrh	r3, [r3, #10]
 800d638:	897a      	ldrh	r2, [r7, #10]
 800d63a:	429a      	cmp	r2, r3
 800d63c:	d8e1      	bhi.n	800d602 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800d63e:	68fb      	ldr	r3, [r7, #12]
 800d640:	7b1b      	ldrb	r3, [r3, #12]
 800d642:	f003 030f 	and.w	r3, r3, #15
 800d646:	2b00      	cmp	r3, #0
 800d648:	d121      	bne.n	800d68e <pbuf_realloc+0xca>
 800d64a:	68fb      	ldr	r3, [r7, #12]
 800d64c:	895b      	ldrh	r3, [r3, #10]
 800d64e:	897a      	ldrh	r2, [r7, #10]
 800d650:	429a      	cmp	r2, r3
 800d652:	d01c      	beq.n	800d68e <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800d654:	68fb      	ldr	r3, [r7, #12]
 800d656:	7b5b      	ldrb	r3, [r3, #13]
 800d658:	f003 0302 	and.w	r3, r3, #2
 800d65c:	2b00      	cmp	r3, #0
 800d65e:	d116      	bne.n	800d68e <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800d660:	68fb      	ldr	r3, [r7, #12]
 800d662:	685a      	ldr	r2, [r3, #4]
 800d664:	68fb      	ldr	r3, [r7, #12]
 800d666:	1ad3      	subs	r3, r2, r3
 800d668:	b29a      	uxth	r2, r3
 800d66a:	897b      	ldrh	r3, [r7, #10]
 800d66c:	4413      	add	r3, r2
 800d66e:	b29b      	uxth	r3, r3
 800d670:	4619      	mov	r1, r3
 800d672:	68f8      	ldr	r0, [r7, #12]
 800d674:	f7ff f87c 	bl	800c770 <mem_trim>
 800d678:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800d67a:	68fb      	ldr	r3, [r7, #12]
 800d67c:	2b00      	cmp	r3, #0
 800d67e:	d106      	bne.n	800d68e <pbuf_realloc+0xca>
 800d680:	4b0f      	ldr	r3, [pc, #60]	; (800d6c0 <pbuf_realloc+0xfc>)
 800d682:	f240 12bd 	movw	r2, #445	; 0x1bd
 800d686:	4912      	ldr	r1, [pc, #72]	; (800d6d0 <pbuf_realloc+0x10c>)
 800d688:	480f      	ldr	r0, [pc, #60]	; (800d6c8 <pbuf_realloc+0x104>)
 800d68a:	f00b f99f 	bl	80189cc <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800d68e:	68fb      	ldr	r3, [r7, #12]
 800d690:	897a      	ldrh	r2, [r7, #10]
 800d692:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800d694:	68fb      	ldr	r3, [r7, #12]
 800d696:	895a      	ldrh	r2, [r3, #10]
 800d698:	68fb      	ldr	r3, [r7, #12]
 800d69a:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800d69c:	68fb      	ldr	r3, [r7, #12]
 800d69e:	681b      	ldr	r3, [r3, #0]
 800d6a0:	2b00      	cmp	r3, #0
 800d6a2:	d004      	beq.n	800d6ae <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800d6a4:	68fb      	ldr	r3, [r7, #12]
 800d6a6:	681b      	ldr	r3, [r3, #0]
 800d6a8:	4618      	mov	r0, r3
 800d6aa:	f000 f911 	bl	800d8d0 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800d6ae:	68fb      	ldr	r3, [r7, #12]
 800d6b0:	2200      	movs	r2, #0
 800d6b2:	601a      	str	r2, [r3, #0]
 800d6b4:	e000      	b.n	800d6b8 <pbuf_realloc+0xf4>
    return;
 800d6b6:	bf00      	nop

}
 800d6b8:	3710      	adds	r7, #16
 800d6ba:	46bd      	mov	sp, r7
 800d6bc:	bd80      	pop	{r7, pc}
 800d6be:	bf00      	nop
 800d6c0:	0801e5d0 	.word	0x0801e5d0
 800d6c4:	0801e6e8 	.word	0x0801e6e8
 800d6c8:	0801e630 	.word	0x0801e630
 800d6cc:	0801e700 	.word	0x0801e700
 800d6d0:	0801e718 	.word	0x0801e718

0800d6d4 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800d6d4:	b580      	push	{r7, lr}
 800d6d6:	b086      	sub	sp, #24
 800d6d8:	af00      	add	r7, sp, #0
 800d6da:	60f8      	str	r0, [r7, #12]
 800d6dc:	60b9      	str	r1, [r7, #8]
 800d6de:	4613      	mov	r3, r2
 800d6e0:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800d6e2:	68fb      	ldr	r3, [r7, #12]
 800d6e4:	2b00      	cmp	r3, #0
 800d6e6:	d106      	bne.n	800d6f6 <pbuf_add_header_impl+0x22>
 800d6e8:	4b2b      	ldr	r3, [pc, #172]	; (800d798 <pbuf_add_header_impl+0xc4>)
 800d6ea:	f240 12df 	movw	r2, #479	; 0x1df
 800d6ee:	492b      	ldr	r1, [pc, #172]	; (800d79c <pbuf_add_header_impl+0xc8>)
 800d6f0:	482b      	ldr	r0, [pc, #172]	; (800d7a0 <pbuf_add_header_impl+0xcc>)
 800d6f2:	f00b f96b 	bl	80189cc <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800d6f6:	68fb      	ldr	r3, [r7, #12]
 800d6f8:	2b00      	cmp	r3, #0
 800d6fa:	d003      	beq.n	800d704 <pbuf_add_header_impl+0x30>
 800d6fc:	68bb      	ldr	r3, [r7, #8]
 800d6fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d702:	d301      	bcc.n	800d708 <pbuf_add_header_impl+0x34>
    return 1;
 800d704:	2301      	movs	r3, #1
 800d706:	e043      	b.n	800d790 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800d708:	68bb      	ldr	r3, [r7, #8]
 800d70a:	2b00      	cmp	r3, #0
 800d70c:	d101      	bne.n	800d712 <pbuf_add_header_impl+0x3e>
    return 0;
 800d70e:	2300      	movs	r3, #0
 800d710:	e03e      	b.n	800d790 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800d712:	68bb      	ldr	r3, [r7, #8]
 800d714:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800d716:	68fb      	ldr	r3, [r7, #12]
 800d718:	891a      	ldrh	r2, [r3, #8]
 800d71a:	8a7b      	ldrh	r3, [r7, #18]
 800d71c:	4413      	add	r3, r2
 800d71e:	b29b      	uxth	r3, r3
 800d720:	8a7a      	ldrh	r2, [r7, #18]
 800d722:	429a      	cmp	r2, r3
 800d724:	d901      	bls.n	800d72a <pbuf_add_header_impl+0x56>
    return 1;
 800d726:	2301      	movs	r3, #1
 800d728:	e032      	b.n	800d790 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800d72a:	68fb      	ldr	r3, [r7, #12]
 800d72c:	7b1b      	ldrb	r3, [r3, #12]
 800d72e:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800d730:	8a3b      	ldrh	r3, [r7, #16]
 800d732:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d736:	2b00      	cmp	r3, #0
 800d738:	d00c      	beq.n	800d754 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800d73a:	68fb      	ldr	r3, [r7, #12]
 800d73c:	685a      	ldr	r2, [r3, #4]
 800d73e:	68bb      	ldr	r3, [r7, #8]
 800d740:	425b      	negs	r3, r3
 800d742:	4413      	add	r3, r2
 800d744:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800d746:	68fb      	ldr	r3, [r7, #12]
 800d748:	3310      	adds	r3, #16
 800d74a:	697a      	ldr	r2, [r7, #20]
 800d74c:	429a      	cmp	r2, r3
 800d74e:	d20d      	bcs.n	800d76c <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800d750:	2301      	movs	r3, #1
 800d752:	e01d      	b.n	800d790 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800d754:	79fb      	ldrb	r3, [r7, #7]
 800d756:	2b00      	cmp	r3, #0
 800d758:	d006      	beq.n	800d768 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800d75a:	68fb      	ldr	r3, [r7, #12]
 800d75c:	685a      	ldr	r2, [r3, #4]
 800d75e:	68bb      	ldr	r3, [r7, #8]
 800d760:	425b      	negs	r3, r3
 800d762:	4413      	add	r3, r2
 800d764:	617b      	str	r3, [r7, #20]
 800d766:	e001      	b.n	800d76c <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800d768:	2301      	movs	r3, #1
 800d76a:	e011      	b.n	800d790 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800d76c:	68fb      	ldr	r3, [r7, #12]
 800d76e:	697a      	ldr	r2, [r7, #20]
 800d770:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800d772:	68fb      	ldr	r3, [r7, #12]
 800d774:	895a      	ldrh	r2, [r3, #10]
 800d776:	8a7b      	ldrh	r3, [r7, #18]
 800d778:	4413      	add	r3, r2
 800d77a:	b29a      	uxth	r2, r3
 800d77c:	68fb      	ldr	r3, [r7, #12]
 800d77e:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800d780:	68fb      	ldr	r3, [r7, #12]
 800d782:	891a      	ldrh	r2, [r3, #8]
 800d784:	8a7b      	ldrh	r3, [r7, #18]
 800d786:	4413      	add	r3, r2
 800d788:	b29a      	uxth	r2, r3
 800d78a:	68fb      	ldr	r3, [r7, #12]
 800d78c:	811a      	strh	r2, [r3, #8]


  return 0;
 800d78e:	2300      	movs	r3, #0
}
 800d790:	4618      	mov	r0, r3
 800d792:	3718      	adds	r7, #24
 800d794:	46bd      	mov	sp, r7
 800d796:	bd80      	pop	{r7, pc}
 800d798:	0801e5d0 	.word	0x0801e5d0
 800d79c:	0801e734 	.word	0x0801e734
 800d7a0:	0801e630 	.word	0x0801e630

0800d7a4 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800d7a4:	b580      	push	{r7, lr}
 800d7a6:	b082      	sub	sp, #8
 800d7a8:	af00      	add	r7, sp, #0
 800d7aa:	6078      	str	r0, [r7, #4]
 800d7ac:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800d7ae:	2200      	movs	r2, #0
 800d7b0:	6839      	ldr	r1, [r7, #0]
 800d7b2:	6878      	ldr	r0, [r7, #4]
 800d7b4:	f7ff ff8e 	bl	800d6d4 <pbuf_add_header_impl>
 800d7b8:	4603      	mov	r3, r0
}
 800d7ba:	4618      	mov	r0, r3
 800d7bc:	3708      	adds	r7, #8
 800d7be:	46bd      	mov	sp, r7
 800d7c0:	bd80      	pop	{r7, pc}
	...

0800d7c4 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800d7c4:	b580      	push	{r7, lr}
 800d7c6:	b084      	sub	sp, #16
 800d7c8:	af00      	add	r7, sp, #0
 800d7ca:	6078      	str	r0, [r7, #4]
 800d7cc:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	2b00      	cmp	r3, #0
 800d7d2:	d106      	bne.n	800d7e2 <pbuf_remove_header+0x1e>
 800d7d4:	4b20      	ldr	r3, [pc, #128]	; (800d858 <pbuf_remove_header+0x94>)
 800d7d6:	f240 224b 	movw	r2, #587	; 0x24b
 800d7da:	4920      	ldr	r1, [pc, #128]	; (800d85c <pbuf_remove_header+0x98>)
 800d7dc:	4820      	ldr	r0, [pc, #128]	; (800d860 <pbuf_remove_header+0x9c>)
 800d7de:	f00b f8f5 	bl	80189cc <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	2b00      	cmp	r3, #0
 800d7e6:	d003      	beq.n	800d7f0 <pbuf_remove_header+0x2c>
 800d7e8:	683b      	ldr	r3, [r7, #0]
 800d7ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d7ee:	d301      	bcc.n	800d7f4 <pbuf_remove_header+0x30>
    return 1;
 800d7f0:	2301      	movs	r3, #1
 800d7f2:	e02c      	b.n	800d84e <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800d7f4:	683b      	ldr	r3, [r7, #0]
 800d7f6:	2b00      	cmp	r3, #0
 800d7f8:	d101      	bne.n	800d7fe <pbuf_remove_header+0x3a>
    return 0;
 800d7fa:	2300      	movs	r3, #0
 800d7fc:	e027      	b.n	800d84e <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800d7fe:	683b      	ldr	r3, [r7, #0]
 800d800:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	895b      	ldrh	r3, [r3, #10]
 800d806:	89fa      	ldrh	r2, [r7, #14]
 800d808:	429a      	cmp	r2, r3
 800d80a:	d908      	bls.n	800d81e <pbuf_remove_header+0x5a>
 800d80c:	4b12      	ldr	r3, [pc, #72]	; (800d858 <pbuf_remove_header+0x94>)
 800d80e:	f240 2255 	movw	r2, #597	; 0x255
 800d812:	4914      	ldr	r1, [pc, #80]	; (800d864 <pbuf_remove_header+0xa0>)
 800d814:	4812      	ldr	r0, [pc, #72]	; (800d860 <pbuf_remove_header+0x9c>)
 800d816:	f00b f8d9 	bl	80189cc <iprintf>
 800d81a:	2301      	movs	r3, #1
 800d81c:	e017      	b.n	800d84e <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	685b      	ldr	r3, [r3, #4]
 800d822:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	685a      	ldr	r2, [r3, #4]
 800d828:	683b      	ldr	r3, [r7, #0]
 800d82a:	441a      	add	r2, r3
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	895a      	ldrh	r2, [r3, #10]
 800d834:	89fb      	ldrh	r3, [r7, #14]
 800d836:	1ad3      	subs	r3, r2, r3
 800d838:	b29a      	uxth	r2, r3
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	891a      	ldrh	r2, [r3, #8]
 800d842:	89fb      	ldrh	r3, [r7, #14]
 800d844:	1ad3      	subs	r3, r2, r3
 800d846:	b29a      	uxth	r2, r3
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800d84c:	2300      	movs	r3, #0
}
 800d84e:	4618      	mov	r0, r3
 800d850:	3710      	adds	r7, #16
 800d852:	46bd      	mov	sp, r7
 800d854:	bd80      	pop	{r7, pc}
 800d856:	bf00      	nop
 800d858:	0801e5d0 	.word	0x0801e5d0
 800d85c:	0801e734 	.word	0x0801e734
 800d860:	0801e630 	.word	0x0801e630
 800d864:	0801e740 	.word	0x0801e740

0800d868 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800d868:	b580      	push	{r7, lr}
 800d86a:	b082      	sub	sp, #8
 800d86c:	af00      	add	r7, sp, #0
 800d86e:	6078      	str	r0, [r7, #4]
 800d870:	460b      	mov	r3, r1
 800d872:	807b      	strh	r3, [r7, #2]
 800d874:	4613      	mov	r3, r2
 800d876:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800d878:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d87c:	2b00      	cmp	r3, #0
 800d87e:	da08      	bge.n	800d892 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800d880:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d884:	425b      	negs	r3, r3
 800d886:	4619      	mov	r1, r3
 800d888:	6878      	ldr	r0, [r7, #4]
 800d88a:	f7ff ff9b 	bl	800d7c4 <pbuf_remove_header>
 800d88e:	4603      	mov	r3, r0
 800d890:	e007      	b.n	800d8a2 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800d892:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d896:	787a      	ldrb	r2, [r7, #1]
 800d898:	4619      	mov	r1, r3
 800d89a:	6878      	ldr	r0, [r7, #4]
 800d89c:	f7ff ff1a 	bl	800d6d4 <pbuf_add_header_impl>
 800d8a0:	4603      	mov	r3, r0
  }
}
 800d8a2:	4618      	mov	r0, r3
 800d8a4:	3708      	adds	r7, #8
 800d8a6:	46bd      	mov	sp, r7
 800d8a8:	bd80      	pop	{r7, pc}

0800d8aa <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800d8aa:	b580      	push	{r7, lr}
 800d8ac:	b082      	sub	sp, #8
 800d8ae:	af00      	add	r7, sp, #0
 800d8b0:	6078      	str	r0, [r7, #4]
 800d8b2:	460b      	mov	r3, r1
 800d8b4:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800d8b6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d8ba:	2201      	movs	r2, #1
 800d8bc:	4619      	mov	r1, r3
 800d8be:	6878      	ldr	r0, [r7, #4]
 800d8c0:	f7ff ffd2 	bl	800d868 <pbuf_header_impl>
 800d8c4:	4603      	mov	r3, r0
}
 800d8c6:	4618      	mov	r0, r3
 800d8c8:	3708      	adds	r7, #8
 800d8ca:	46bd      	mov	sp, r7
 800d8cc:	bd80      	pop	{r7, pc}
	...

0800d8d0 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800d8d0:	b580      	push	{r7, lr}
 800d8d2:	b086      	sub	sp, #24
 800d8d4:	af00      	add	r7, sp, #0
 800d8d6:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	2b00      	cmp	r3, #0
 800d8dc:	d10b      	bne.n	800d8f6 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	2b00      	cmp	r3, #0
 800d8e2:	d106      	bne.n	800d8f2 <pbuf_free+0x22>
 800d8e4:	4b38      	ldr	r3, [pc, #224]	; (800d9c8 <pbuf_free+0xf8>)
 800d8e6:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800d8ea:	4938      	ldr	r1, [pc, #224]	; (800d9cc <pbuf_free+0xfc>)
 800d8ec:	4838      	ldr	r0, [pc, #224]	; (800d9d0 <pbuf_free+0x100>)
 800d8ee:	f00b f86d 	bl	80189cc <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800d8f2:	2300      	movs	r3, #0
 800d8f4:	e063      	b.n	800d9be <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800d8f6:	2300      	movs	r3, #0
 800d8f8:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800d8fa:	e05c      	b.n	800d9b6 <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	7b9b      	ldrb	r3, [r3, #14]
 800d900:	2b00      	cmp	r3, #0
 800d902:	d106      	bne.n	800d912 <pbuf_free+0x42>
 800d904:	4b30      	ldr	r3, [pc, #192]	; (800d9c8 <pbuf_free+0xf8>)
 800d906:	f240 22f1 	movw	r2, #753	; 0x2f1
 800d90a:	4932      	ldr	r1, [pc, #200]	; (800d9d4 <pbuf_free+0x104>)
 800d90c:	4830      	ldr	r0, [pc, #192]	; (800d9d0 <pbuf_free+0x100>)
 800d90e:	f00b f85d 	bl	80189cc <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	7b9b      	ldrb	r3, [r3, #14]
 800d916:	3b01      	subs	r3, #1
 800d918:	b2da      	uxtb	r2, r3
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	739a      	strb	r2, [r3, #14]
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	7b9b      	ldrb	r3, [r3, #14]
 800d922:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800d924:	7dbb      	ldrb	r3, [r7, #22]
 800d926:	2b00      	cmp	r3, #0
 800d928:	d143      	bne.n	800d9b2 <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	681b      	ldr	r3, [r3, #0]
 800d92e:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	7b1b      	ldrb	r3, [r3, #12]
 800d934:	f003 030f 	and.w	r3, r3, #15
 800d938:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	7b5b      	ldrb	r3, [r3, #13]
 800d93e:	f003 0302 	and.w	r3, r3, #2
 800d942:	2b00      	cmp	r3, #0
 800d944:	d011      	beq.n	800d96a <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800d94a:	68bb      	ldr	r3, [r7, #8]
 800d94c:	691b      	ldr	r3, [r3, #16]
 800d94e:	2b00      	cmp	r3, #0
 800d950:	d106      	bne.n	800d960 <pbuf_free+0x90>
 800d952:	4b1d      	ldr	r3, [pc, #116]	; (800d9c8 <pbuf_free+0xf8>)
 800d954:	f240 22ff 	movw	r2, #767	; 0x2ff
 800d958:	491f      	ldr	r1, [pc, #124]	; (800d9d8 <pbuf_free+0x108>)
 800d95a:	481d      	ldr	r0, [pc, #116]	; (800d9d0 <pbuf_free+0x100>)
 800d95c:	f00b f836 	bl	80189cc <iprintf>
        pc->custom_free_function(p);
 800d960:	68bb      	ldr	r3, [r7, #8]
 800d962:	691b      	ldr	r3, [r3, #16]
 800d964:	6878      	ldr	r0, [r7, #4]
 800d966:	4798      	blx	r3
 800d968:	e01d      	b.n	800d9a6 <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800d96a:	7bfb      	ldrb	r3, [r7, #15]
 800d96c:	2b02      	cmp	r3, #2
 800d96e:	d104      	bne.n	800d97a <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 800d970:	6879      	ldr	r1, [r7, #4]
 800d972:	2008      	movs	r0, #8
 800d974:	f7ff f9b2 	bl	800ccdc <memp_free>
 800d978:	e015      	b.n	800d9a6 <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800d97a:	7bfb      	ldrb	r3, [r7, #15]
 800d97c:	2b01      	cmp	r3, #1
 800d97e:	d104      	bne.n	800d98a <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 800d980:	6879      	ldr	r1, [r7, #4]
 800d982:	2007      	movs	r0, #7
 800d984:	f7ff f9aa 	bl	800ccdc <memp_free>
 800d988:	e00d      	b.n	800d9a6 <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800d98a:	7bfb      	ldrb	r3, [r7, #15]
 800d98c:	2b00      	cmp	r3, #0
 800d98e:	d103      	bne.n	800d998 <pbuf_free+0xc8>
          mem_free(p);
 800d990:	6878      	ldr	r0, [r7, #4]
 800d992:	f7fe fe83 	bl	800c69c <mem_free>
 800d996:	e006      	b.n	800d9a6 <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800d998:	4b0b      	ldr	r3, [pc, #44]	; (800d9c8 <pbuf_free+0xf8>)
 800d99a:	f240 320f 	movw	r2, #783	; 0x30f
 800d99e:	490f      	ldr	r1, [pc, #60]	; (800d9dc <pbuf_free+0x10c>)
 800d9a0:	480b      	ldr	r0, [pc, #44]	; (800d9d0 <pbuf_free+0x100>)
 800d9a2:	f00b f813 	bl	80189cc <iprintf>
        }
      }
      count++;
 800d9a6:	7dfb      	ldrb	r3, [r7, #23]
 800d9a8:	3301      	adds	r3, #1
 800d9aa:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 800d9ac:	693b      	ldr	r3, [r7, #16]
 800d9ae:	607b      	str	r3, [r7, #4]
 800d9b0:	e001      	b.n	800d9b6 <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800d9b2:	2300      	movs	r3, #0
 800d9b4:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	2b00      	cmp	r3, #0
 800d9ba:	d19f      	bne.n	800d8fc <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800d9bc:	7dfb      	ldrb	r3, [r7, #23]
}
 800d9be:	4618      	mov	r0, r3
 800d9c0:	3718      	adds	r7, #24
 800d9c2:	46bd      	mov	sp, r7
 800d9c4:	bd80      	pop	{r7, pc}
 800d9c6:	bf00      	nop
 800d9c8:	0801e5d0 	.word	0x0801e5d0
 800d9cc:	0801e734 	.word	0x0801e734
 800d9d0:	0801e630 	.word	0x0801e630
 800d9d4:	0801e760 	.word	0x0801e760
 800d9d8:	0801e778 	.word	0x0801e778
 800d9dc:	0801e79c 	.word	0x0801e79c

0800d9e0 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800d9e0:	b480      	push	{r7}
 800d9e2:	b085      	sub	sp, #20
 800d9e4:	af00      	add	r7, sp, #0
 800d9e6:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800d9e8:	2300      	movs	r3, #0
 800d9ea:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800d9ec:	e005      	b.n	800d9fa <pbuf_clen+0x1a>
    ++len;
 800d9ee:	89fb      	ldrh	r3, [r7, #14]
 800d9f0:	3301      	adds	r3, #1
 800d9f2:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	681b      	ldr	r3, [r3, #0]
 800d9f8:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	2b00      	cmp	r3, #0
 800d9fe:	d1f6      	bne.n	800d9ee <pbuf_clen+0xe>
  }
  return len;
 800da00:	89fb      	ldrh	r3, [r7, #14]
}
 800da02:	4618      	mov	r0, r3
 800da04:	3714      	adds	r7, #20
 800da06:	46bd      	mov	sp, r7
 800da08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da0c:	4770      	bx	lr
	...

0800da10 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800da10:	b580      	push	{r7, lr}
 800da12:	b082      	sub	sp, #8
 800da14:	af00      	add	r7, sp, #0
 800da16:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	2b00      	cmp	r3, #0
 800da1c:	d010      	beq.n	800da40 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	7b9b      	ldrb	r3, [r3, #14]
 800da22:	3301      	adds	r3, #1
 800da24:	b2da      	uxtb	r2, r3
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	7b9b      	ldrb	r3, [r3, #14]
 800da2e:	2b00      	cmp	r3, #0
 800da30:	d106      	bne.n	800da40 <pbuf_ref+0x30>
 800da32:	4b05      	ldr	r3, [pc, #20]	; (800da48 <pbuf_ref+0x38>)
 800da34:	f240 3242 	movw	r2, #834	; 0x342
 800da38:	4904      	ldr	r1, [pc, #16]	; (800da4c <pbuf_ref+0x3c>)
 800da3a:	4805      	ldr	r0, [pc, #20]	; (800da50 <pbuf_ref+0x40>)
 800da3c:	f00a ffc6 	bl	80189cc <iprintf>
  }
}
 800da40:	bf00      	nop
 800da42:	3708      	adds	r7, #8
 800da44:	46bd      	mov	sp, r7
 800da46:	bd80      	pop	{r7, pc}
 800da48:	0801e5d0 	.word	0x0801e5d0
 800da4c:	0801e7b0 	.word	0x0801e7b0
 800da50:	0801e630 	.word	0x0801e630

0800da54 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800da54:	b580      	push	{r7, lr}
 800da56:	b084      	sub	sp, #16
 800da58:	af00      	add	r7, sp, #0
 800da5a:	6078      	str	r0, [r7, #4]
 800da5c:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	2b00      	cmp	r3, #0
 800da62:	d002      	beq.n	800da6a <pbuf_cat+0x16>
 800da64:	683b      	ldr	r3, [r7, #0]
 800da66:	2b00      	cmp	r3, #0
 800da68:	d107      	bne.n	800da7a <pbuf_cat+0x26>
 800da6a:	4b20      	ldr	r3, [pc, #128]	; (800daec <pbuf_cat+0x98>)
 800da6c:	f240 3259 	movw	r2, #857	; 0x359
 800da70:	491f      	ldr	r1, [pc, #124]	; (800daf0 <pbuf_cat+0x9c>)
 800da72:	4820      	ldr	r0, [pc, #128]	; (800daf4 <pbuf_cat+0xa0>)
 800da74:	f00a ffaa 	bl	80189cc <iprintf>
 800da78:	e034      	b.n	800dae4 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	60fb      	str	r3, [r7, #12]
 800da7e:	e00a      	b.n	800da96 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800da80:	68fb      	ldr	r3, [r7, #12]
 800da82:	891a      	ldrh	r2, [r3, #8]
 800da84:	683b      	ldr	r3, [r7, #0]
 800da86:	891b      	ldrh	r3, [r3, #8]
 800da88:	4413      	add	r3, r2
 800da8a:	b29a      	uxth	r2, r3
 800da8c:	68fb      	ldr	r3, [r7, #12]
 800da8e:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800da90:	68fb      	ldr	r3, [r7, #12]
 800da92:	681b      	ldr	r3, [r3, #0]
 800da94:	60fb      	str	r3, [r7, #12]
 800da96:	68fb      	ldr	r3, [r7, #12]
 800da98:	681b      	ldr	r3, [r3, #0]
 800da9a:	2b00      	cmp	r3, #0
 800da9c:	d1f0      	bne.n	800da80 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800da9e:	68fb      	ldr	r3, [r7, #12]
 800daa0:	891a      	ldrh	r2, [r3, #8]
 800daa2:	68fb      	ldr	r3, [r7, #12]
 800daa4:	895b      	ldrh	r3, [r3, #10]
 800daa6:	429a      	cmp	r2, r3
 800daa8:	d006      	beq.n	800dab8 <pbuf_cat+0x64>
 800daaa:	4b10      	ldr	r3, [pc, #64]	; (800daec <pbuf_cat+0x98>)
 800daac:	f240 3262 	movw	r2, #866	; 0x362
 800dab0:	4911      	ldr	r1, [pc, #68]	; (800daf8 <pbuf_cat+0xa4>)
 800dab2:	4810      	ldr	r0, [pc, #64]	; (800daf4 <pbuf_cat+0xa0>)
 800dab4:	f00a ff8a 	bl	80189cc <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800dab8:	68fb      	ldr	r3, [r7, #12]
 800daba:	681b      	ldr	r3, [r3, #0]
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	d006      	beq.n	800dace <pbuf_cat+0x7a>
 800dac0:	4b0a      	ldr	r3, [pc, #40]	; (800daec <pbuf_cat+0x98>)
 800dac2:	f240 3263 	movw	r2, #867	; 0x363
 800dac6:	490d      	ldr	r1, [pc, #52]	; (800dafc <pbuf_cat+0xa8>)
 800dac8:	480a      	ldr	r0, [pc, #40]	; (800daf4 <pbuf_cat+0xa0>)
 800daca:	f00a ff7f 	bl	80189cc <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800dace:	68fb      	ldr	r3, [r7, #12]
 800dad0:	891a      	ldrh	r2, [r3, #8]
 800dad2:	683b      	ldr	r3, [r7, #0]
 800dad4:	891b      	ldrh	r3, [r3, #8]
 800dad6:	4413      	add	r3, r2
 800dad8:	b29a      	uxth	r2, r3
 800dada:	68fb      	ldr	r3, [r7, #12]
 800dadc:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800dade:	68fb      	ldr	r3, [r7, #12]
 800dae0:	683a      	ldr	r2, [r7, #0]
 800dae2:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800dae4:	3710      	adds	r7, #16
 800dae6:	46bd      	mov	sp, r7
 800dae8:	bd80      	pop	{r7, pc}
 800daea:	bf00      	nop
 800daec:	0801e5d0 	.word	0x0801e5d0
 800daf0:	0801e7c4 	.word	0x0801e7c4
 800daf4:	0801e630 	.word	0x0801e630
 800daf8:	0801e7fc 	.word	0x0801e7fc
 800dafc:	0801e82c 	.word	0x0801e82c

0800db00 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800db00:	b580      	push	{r7, lr}
 800db02:	b082      	sub	sp, #8
 800db04:	af00      	add	r7, sp, #0
 800db06:	6078      	str	r0, [r7, #4]
 800db08:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800db0a:	6839      	ldr	r1, [r7, #0]
 800db0c:	6878      	ldr	r0, [r7, #4]
 800db0e:	f7ff ffa1 	bl	800da54 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800db12:	6838      	ldr	r0, [r7, #0]
 800db14:	f7ff ff7c 	bl	800da10 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800db18:	bf00      	nop
 800db1a:	3708      	adds	r7, #8
 800db1c:	46bd      	mov	sp, r7
 800db1e:	bd80      	pop	{r7, pc}

0800db20 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800db20:	b580      	push	{r7, lr}
 800db22:	b086      	sub	sp, #24
 800db24:	af00      	add	r7, sp, #0
 800db26:	6078      	str	r0, [r7, #4]
 800db28:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800db2a:	2300      	movs	r3, #0
 800db2c:	617b      	str	r3, [r7, #20]
 800db2e:	2300      	movs	r3, #0
 800db30:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	2b00      	cmp	r3, #0
 800db36:	d008      	beq.n	800db4a <pbuf_copy+0x2a>
 800db38:	683b      	ldr	r3, [r7, #0]
 800db3a:	2b00      	cmp	r3, #0
 800db3c:	d005      	beq.n	800db4a <pbuf_copy+0x2a>
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	891a      	ldrh	r2, [r3, #8]
 800db42:	683b      	ldr	r3, [r7, #0]
 800db44:	891b      	ldrh	r3, [r3, #8]
 800db46:	429a      	cmp	r2, r3
 800db48:	d209      	bcs.n	800db5e <pbuf_copy+0x3e>
 800db4a:	4b57      	ldr	r3, [pc, #348]	; (800dca8 <pbuf_copy+0x188>)
 800db4c:	f240 32c9 	movw	r2, #969	; 0x3c9
 800db50:	4956      	ldr	r1, [pc, #344]	; (800dcac <pbuf_copy+0x18c>)
 800db52:	4857      	ldr	r0, [pc, #348]	; (800dcb0 <pbuf_copy+0x190>)
 800db54:	f00a ff3a 	bl	80189cc <iprintf>
 800db58:	f06f 030f 	mvn.w	r3, #15
 800db5c:	e09f      	b.n	800dc9e <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	895b      	ldrh	r3, [r3, #10]
 800db62:	461a      	mov	r2, r3
 800db64:	697b      	ldr	r3, [r7, #20]
 800db66:	1ad2      	subs	r2, r2, r3
 800db68:	683b      	ldr	r3, [r7, #0]
 800db6a:	895b      	ldrh	r3, [r3, #10]
 800db6c:	4619      	mov	r1, r3
 800db6e:	693b      	ldr	r3, [r7, #16]
 800db70:	1acb      	subs	r3, r1, r3
 800db72:	429a      	cmp	r2, r3
 800db74:	d306      	bcc.n	800db84 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800db76:	683b      	ldr	r3, [r7, #0]
 800db78:	895b      	ldrh	r3, [r3, #10]
 800db7a:	461a      	mov	r2, r3
 800db7c:	693b      	ldr	r3, [r7, #16]
 800db7e:	1ad3      	subs	r3, r2, r3
 800db80:	60fb      	str	r3, [r7, #12]
 800db82:	e005      	b.n	800db90 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	895b      	ldrh	r3, [r3, #10]
 800db88:	461a      	mov	r2, r3
 800db8a:	697b      	ldr	r3, [r7, #20]
 800db8c:	1ad3      	subs	r3, r2, r3
 800db8e:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	685a      	ldr	r2, [r3, #4]
 800db94:	697b      	ldr	r3, [r7, #20]
 800db96:	18d0      	adds	r0, r2, r3
 800db98:	683b      	ldr	r3, [r7, #0]
 800db9a:	685a      	ldr	r2, [r3, #4]
 800db9c:	693b      	ldr	r3, [r7, #16]
 800db9e:	4413      	add	r3, r2
 800dba0:	68fa      	ldr	r2, [r7, #12]
 800dba2:	4619      	mov	r1, r3
 800dba4:	f00a f9ce 	bl	8017f44 <memcpy>
    offset_to += len;
 800dba8:	697a      	ldr	r2, [r7, #20]
 800dbaa:	68fb      	ldr	r3, [r7, #12]
 800dbac:	4413      	add	r3, r2
 800dbae:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800dbb0:	693a      	ldr	r2, [r7, #16]
 800dbb2:	68fb      	ldr	r3, [r7, #12]
 800dbb4:	4413      	add	r3, r2
 800dbb6:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	895b      	ldrh	r3, [r3, #10]
 800dbbc:	461a      	mov	r2, r3
 800dbbe:	697b      	ldr	r3, [r7, #20]
 800dbc0:	4293      	cmp	r3, r2
 800dbc2:	d906      	bls.n	800dbd2 <pbuf_copy+0xb2>
 800dbc4:	4b38      	ldr	r3, [pc, #224]	; (800dca8 <pbuf_copy+0x188>)
 800dbc6:	f240 32d9 	movw	r2, #985	; 0x3d9
 800dbca:	493a      	ldr	r1, [pc, #232]	; (800dcb4 <pbuf_copy+0x194>)
 800dbcc:	4838      	ldr	r0, [pc, #224]	; (800dcb0 <pbuf_copy+0x190>)
 800dbce:	f00a fefd 	bl	80189cc <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800dbd2:	683b      	ldr	r3, [r7, #0]
 800dbd4:	895b      	ldrh	r3, [r3, #10]
 800dbd6:	461a      	mov	r2, r3
 800dbd8:	693b      	ldr	r3, [r7, #16]
 800dbda:	4293      	cmp	r3, r2
 800dbdc:	d906      	bls.n	800dbec <pbuf_copy+0xcc>
 800dbde:	4b32      	ldr	r3, [pc, #200]	; (800dca8 <pbuf_copy+0x188>)
 800dbe0:	f240 32da 	movw	r2, #986	; 0x3da
 800dbe4:	4934      	ldr	r1, [pc, #208]	; (800dcb8 <pbuf_copy+0x198>)
 800dbe6:	4832      	ldr	r0, [pc, #200]	; (800dcb0 <pbuf_copy+0x190>)
 800dbe8:	f00a fef0 	bl	80189cc <iprintf>
    if (offset_from >= p_from->len) {
 800dbec:	683b      	ldr	r3, [r7, #0]
 800dbee:	895b      	ldrh	r3, [r3, #10]
 800dbf0:	461a      	mov	r2, r3
 800dbf2:	693b      	ldr	r3, [r7, #16]
 800dbf4:	4293      	cmp	r3, r2
 800dbf6:	d304      	bcc.n	800dc02 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800dbf8:	2300      	movs	r3, #0
 800dbfa:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800dbfc:	683b      	ldr	r3, [r7, #0]
 800dbfe:	681b      	ldr	r3, [r3, #0]
 800dc00:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	895b      	ldrh	r3, [r3, #10]
 800dc06:	461a      	mov	r2, r3
 800dc08:	697b      	ldr	r3, [r7, #20]
 800dc0a:	4293      	cmp	r3, r2
 800dc0c:	d114      	bne.n	800dc38 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800dc0e:	2300      	movs	r3, #0
 800dc10:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	681b      	ldr	r3, [r3, #0]
 800dc16:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	2b00      	cmp	r3, #0
 800dc1c:	d10c      	bne.n	800dc38 <pbuf_copy+0x118>
 800dc1e:	683b      	ldr	r3, [r7, #0]
 800dc20:	2b00      	cmp	r3, #0
 800dc22:	d009      	beq.n	800dc38 <pbuf_copy+0x118>
 800dc24:	4b20      	ldr	r3, [pc, #128]	; (800dca8 <pbuf_copy+0x188>)
 800dc26:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800dc2a:	4924      	ldr	r1, [pc, #144]	; (800dcbc <pbuf_copy+0x19c>)
 800dc2c:	4820      	ldr	r0, [pc, #128]	; (800dcb0 <pbuf_copy+0x190>)
 800dc2e:	f00a fecd 	bl	80189cc <iprintf>
 800dc32:	f06f 030f 	mvn.w	r3, #15
 800dc36:	e032      	b.n	800dc9e <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800dc38:	683b      	ldr	r3, [r7, #0]
 800dc3a:	2b00      	cmp	r3, #0
 800dc3c:	d013      	beq.n	800dc66 <pbuf_copy+0x146>
 800dc3e:	683b      	ldr	r3, [r7, #0]
 800dc40:	895a      	ldrh	r2, [r3, #10]
 800dc42:	683b      	ldr	r3, [r7, #0]
 800dc44:	891b      	ldrh	r3, [r3, #8]
 800dc46:	429a      	cmp	r2, r3
 800dc48:	d10d      	bne.n	800dc66 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800dc4a:	683b      	ldr	r3, [r7, #0]
 800dc4c:	681b      	ldr	r3, [r3, #0]
 800dc4e:	2b00      	cmp	r3, #0
 800dc50:	d009      	beq.n	800dc66 <pbuf_copy+0x146>
 800dc52:	4b15      	ldr	r3, [pc, #84]	; (800dca8 <pbuf_copy+0x188>)
 800dc54:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800dc58:	4919      	ldr	r1, [pc, #100]	; (800dcc0 <pbuf_copy+0x1a0>)
 800dc5a:	4815      	ldr	r0, [pc, #84]	; (800dcb0 <pbuf_copy+0x190>)
 800dc5c:	f00a feb6 	bl	80189cc <iprintf>
 800dc60:	f06f 0305 	mvn.w	r3, #5
 800dc64:	e01b      	b.n	800dc9e <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	2b00      	cmp	r3, #0
 800dc6a:	d013      	beq.n	800dc94 <pbuf_copy+0x174>
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	895a      	ldrh	r2, [r3, #10]
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	891b      	ldrh	r3, [r3, #8]
 800dc74:	429a      	cmp	r2, r3
 800dc76:	d10d      	bne.n	800dc94 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	681b      	ldr	r3, [r3, #0]
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	d009      	beq.n	800dc94 <pbuf_copy+0x174>
 800dc80:	4b09      	ldr	r3, [pc, #36]	; (800dca8 <pbuf_copy+0x188>)
 800dc82:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800dc86:	490e      	ldr	r1, [pc, #56]	; (800dcc0 <pbuf_copy+0x1a0>)
 800dc88:	4809      	ldr	r0, [pc, #36]	; (800dcb0 <pbuf_copy+0x190>)
 800dc8a:	f00a fe9f 	bl	80189cc <iprintf>
 800dc8e:	f06f 0305 	mvn.w	r3, #5
 800dc92:	e004      	b.n	800dc9e <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800dc94:	683b      	ldr	r3, [r7, #0]
 800dc96:	2b00      	cmp	r3, #0
 800dc98:	f47f af61 	bne.w	800db5e <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800dc9c:	2300      	movs	r3, #0
}
 800dc9e:	4618      	mov	r0, r3
 800dca0:	3718      	adds	r7, #24
 800dca2:	46bd      	mov	sp, r7
 800dca4:	bd80      	pop	{r7, pc}
 800dca6:	bf00      	nop
 800dca8:	0801e5d0 	.word	0x0801e5d0
 800dcac:	0801e878 	.word	0x0801e878
 800dcb0:	0801e630 	.word	0x0801e630
 800dcb4:	0801e8a8 	.word	0x0801e8a8
 800dcb8:	0801e8c0 	.word	0x0801e8c0
 800dcbc:	0801e8dc 	.word	0x0801e8dc
 800dcc0:	0801e8ec 	.word	0x0801e8ec

0800dcc4 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800dcc4:	b580      	push	{r7, lr}
 800dcc6:	b088      	sub	sp, #32
 800dcc8:	af00      	add	r7, sp, #0
 800dcca:	60f8      	str	r0, [r7, #12]
 800dccc:	60b9      	str	r1, [r7, #8]
 800dcce:	4611      	mov	r1, r2
 800dcd0:	461a      	mov	r2, r3
 800dcd2:	460b      	mov	r3, r1
 800dcd4:	80fb      	strh	r3, [r7, #6]
 800dcd6:	4613      	mov	r3, r2
 800dcd8:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800dcda:	2300      	movs	r3, #0
 800dcdc:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800dcde:	2300      	movs	r3, #0
 800dce0:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800dce2:	68fb      	ldr	r3, [r7, #12]
 800dce4:	2b00      	cmp	r3, #0
 800dce6:	d108      	bne.n	800dcfa <pbuf_copy_partial+0x36>
 800dce8:	4b2b      	ldr	r3, [pc, #172]	; (800dd98 <pbuf_copy_partial+0xd4>)
 800dcea:	f240 420a 	movw	r2, #1034	; 0x40a
 800dcee:	492b      	ldr	r1, [pc, #172]	; (800dd9c <pbuf_copy_partial+0xd8>)
 800dcf0:	482b      	ldr	r0, [pc, #172]	; (800dda0 <pbuf_copy_partial+0xdc>)
 800dcf2:	f00a fe6b 	bl	80189cc <iprintf>
 800dcf6:	2300      	movs	r3, #0
 800dcf8:	e04a      	b.n	800dd90 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800dcfa:	68bb      	ldr	r3, [r7, #8]
 800dcfc:	2b00      	cmp	r3, #0
 800dcfe:	d108      	bne.n	800dd12 <pbuf_copy_partial+0x4e>
 800dd00:	4b25      	ldr	r3, [pc, #148]	; (800dd98 <pbuf_copy_partial+0xd4>)
 800dd02:	f240 420b 	movw	r2, #1035	; 0x40b
 800dd06:	4927      	ldr	r1, [pc, #156]	; (800dda4 <pbuf_copy_partial+0xe0>)
 800dd08:	4825      	ldr	r0, [pc, #148]	; (800dda0 <pbuf_copy_partial+0xdc>)
 800dd0a:	f00a fe5f 	bl	80189cc <iprintf>
 800dd0e:	2300      	movs	r3, #0
 800dd10:	e03e      	b.n	800dd90 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800dd12:	68fb      	ldr	r3, [r7, #12]
 800dd14:	61fb      	str	r3, [r7, #28]
 800dd16:	e034      	b.n	800dd82 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800dd18:	88bb      	ldrh	r3, [r7, #4]
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	d00a      	beq.n	800dd34 <pbuf_copy_partial+0x70>
 800dd1e:	69fb      	ldr	r3, [r7, #28]
 800dd20:	895b      	ldrh	r3, [r3, #10]
 800dd22:	88ba      	ldrh	r2, [r7, #4]
 800dd24:	429a      	cmp	r2, r3
 800dd26:	d305      	bcc.n	800dd34 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800dd28:	69fb      	ldr	r3, [r7, #28]
 800dd2a:	895b      	ldrh	r3, [r3, #10]
 800dd2c:	88ba      	ldrh	r2, [r7, #4]
 800dd2e:	1ad3      	subs	r3, r2, r3
 800dd30:	80bb      	strh	r3, [r7, #4]
 800dd32:	e023      	b.n	800dd7c <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800dd34:	69fb      	ldr	r3, [r7, #28]
 800dd36:	895a      	ldrh	r2, [r3, #10]
 800dd38:	88bb      	ldrh	r3, [r7, #4]
 800dd3a:	1ad3      	subs	r3, r2, r3
 800dd3c:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800dd3e:	8b3a      	ldrh	r2, [r7, #24]
 800dd40:	88fb      	ldrh	r3, [r7, #6]
 800dd42:	429a      	cmp	r2, r3
 800dd44:	d901      	bls.n	800dd4a <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800dd46:	88fb      	ldrh	r3, [r7, #6]
 800dd48:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800dd4a:	8b7b      	ldrh	r3, [r7, #26]
 800dd4c:	68ba      	ldr	r2, [r7, #8]
 800dd4e:	18d0      	adds	r0, r2, r3
 800dd50:	69fb      	ldr	r3, [r7, #28]
 800dd52:	685a      	ldr	r2, [r3, #4]
 800dd54:	88bb      	ldrh	r3, [r7, #4]
 800dd56:	4413      	add	r3, r2
 800dd58:	8b3a      	ldrh	r2, [r7, #24]
 800dd5a:	4619      	mov	r1, r3
 800dd5c:	f00a f8f2 	bl	8017f44 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800dd60:	8afa      	ldrh	r2, [r7, #22]
 800dd62:	8b3b      	ldrh	r3, [r7, #24]
 800dd64:	4413      	add	r3, r2
 800dd66:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800dd68:	8b7a      	ldrh	r2, [r7, #26]
 800dd6a:	8b3b      	ldrh	r3, [r7, #24]
 800dd6c:	4413      	add	r3, r2
 800dd6e:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800dd70:	88fa      	ldrh	r2, [r7, #6]
 800dd72:	8b3b      	ldrh	r3, [r7, #24]
 800dd74:	1ad3      	subs	r3, r2, r3
 800dd76:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800dd78:	2300      	movs	r3, #0
 800dd7a:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800dd7c:	69fb      	ldr	r3, [r7, #28]
 800dd7e:	681b      	ldr	r3, [r3, #0]
 800dd80:	61fb      	str	r3, [r7, #28]
 800dd82:	88fb      	ldrh	r3, [r7, #6]
 800dd84:	2b00      	cmp	r3, #0
 800dd86:	d002      	beq.n	800dd8e <pbuf_copy_partial+0xca>
 800dd88:	69fb      	ldr	r3, [r7, #28]
 800dd8a:	2b00      	cmp	r3, #0
 800dd8c:	d1c4      	bne.n	800dd18 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800dd8e:	8afb      	ldrh	r3, [r7, #22]
}
 800dd90:	4618      	mov	r0, r3
 800dd92:	3720      	adds	r7, #32
 800dd94:	46bd      	mov	sp, r7
 800dd96:	bd80      	pop	{r7, pc}
 800dd98:	0801e5d0 	.word	0x0801e5d0
 800dd9c:	0801e918 	.word	0x0801e918
 800dda0:	0801e630 	.word	0x0801e630
 800dda4:	0801e938 	.word	0x0801e938

0800dda8 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800dda8:	b580      	push	{r7, lr}
 800ddaa:	b084      	sub	sp, #16
 800ddac:	af00      	add	r7, sp, #0
 800ddae:	4603      	mov	r3, r0
 800ddb0:	603a      	str	r2, [r7, #0]
 800ddb2:	71fb      	strb	r3, [r7, #7]
 800ddb4:	460b      	mov	r3, r1
 800ddb6:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800ddb8:	683b      	ldr	r3, [r7, #0]
 800ddba:	8919      	ldrh	r1, [r3, #8]
 800ddbc:	88ba      	ldrh	r2, [r7, #4]
 800ddbe:	79fb      	ldrb	r3, [r7, #7]
 800ddc0:	4618      	mov	r0, r3
 800ddc2:	f7ff faa1 	bl	800d308 <pbuf_alloc>
 800ddc6:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800ddc8:	68fb      	ldr	r3, [r7, #12]
 800ddca:	2b00      	cmp	r3, #0
 800ddcc:	d101      	bne.n	800ddd2 <pbuf_clone+0x2a>
    return NULL;
 800ddce:	2300      	movs	r3, #0
 800ddd0:	e011      	b.n	800ddf6 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800ddd2:	6839      	ldr	r1, [r7, #0]
 800ddd4:	68f8      	ldr	r0, [r7, #12]
 800ddd6:	f7ff fea3 	bl	800db20 <pbuf_copy>
 800ddda:	4603      	mov	r3, r0
 800dddc:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800ddde:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800dde2:	2b00      	cmp	r3, #0
 800dde4:	d006      	beq.n	800ddf4 <pbuf_clone+0x4c>
 800dde6:	4b06      	ldr	r3, [pc, #24]	; (800de00 <pbuf_clone+0x58>)
 800dde8:	f240 5224 	movw	r2, #1316	; 0x524
 800ddec:	4905      	ldr	r1, [pc, #20]	; (800de04 <pbuf_clone+0x5c>)
 800ddee:	4806      	ldr	r0, [pc, #24]	; (800de08 <pbuf_clone+0x60>)
 800ddf0:	f00a fdec 	bl	80189cc <iprintf>
  return q;
 800ddf4:	68fb      	ldr	r3, [r7, #12]
}
 800ddf6:	4618      	mov	r0, r3
 800ddf8:	3710      	adds	r7, #16
 800ddfa:	46bd      	mov	sp, r7
 800ddfc:	bd80      	pop	{r7, pc}
 800ddfe:	bf00      	nop
 800de00:	0801e5d0 	.word	0x0801e5d0
 800de04:	0801ea44 	.word	0x0801ea44
 800de08:	0801e630 	.word	0x0801e630

0800de0c <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800de0c:	b580      	push	{r7, lr}
 800de0e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800de10:	f00a fdf4 	bl	80189fc <rand>
 800de14:	4603      	mov	r3, r0
 800de16:	b29b      	uxth	r3, r3
 800de18:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800de1c:	b29b      	uxth	r3, r3
 800de1e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800de22:	b29a      	uxth	r2, r3
 800de24:	4b01      	ldr	r3, [pc, #4]	; (800de2c <tcp_init+0x20>)
 800de26:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800de28:	bf00      	nop
 800de2a:	bd80      	pop	{r7, pc}
 800de2c:	20000066 	.word	0x20000066

0800de30 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800de30:	b580      	push	{r7, lr}
 800de32:	b082      	sub	sp, #8
 800de34:	af00      	add	r7, sp, #0
 800de36:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	7d1b      	ldrb	r3, [r3, #20]
 800de3c:	2b01      	cmp	r3, #1
 800de3e:	d105      	bne.n	800de4c <tcp_free+0x1c>
 800de40:	4b06      	ldr	r3, [pc, #24]	; (800de5c <tcp_free+0x2c>)
 800de42:	22d4      	movs	r2, #212	; 0xd4
 800de44:	4906      	ldr	r1, [pc, #24]	; (800de60 <tcp_free+0x30>)
 800de46:	4807      	ldr	r0, [pc, #28]	; (800de64 <tcp_free+0x34>)
 800de48:	f00a fdc0 	bl	80189cc <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800de4c:	6879      	ldr	r1, [r7, #4]
 800de4e:	2001      	movs	r0, #1
 800de50:	f7fe ff44 	bl	800ccdc <memp_free>
}
 800de54:	bf00      	nop
 800de56:	3708      	adds	r7, #8
 800de58:	46bd      	mov	sp, r7
 800de5a:	bd80      	pop	{r7, pc}
 800de5c:	0801ead0 	.word	0x0801ead0
 800de60:	0801eb00 	.word	0x0801eb00
 800de64:	0801eb14 	.word	0x0801eb14

0800de68 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800de68:	b580      	push	{r7, lr}
 800de6a:	b082      	sub	sp, #8
 800de6c:	af00      	add	r7, sp, #0
 800de6e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	7d1b      	ldrb	r3, [r3, #20]
 800de74:	2b01      	cmp	r3, #1
 800de76:	d105      	bne.n	800de84 <tcp_free_listen+0x1c>
 800de78:	4b06      	ldr	r3, [pc, #24]	; (800de94 <tcp_free_listen+0x2c>)
 800de7a:	22df      	movs	r2, #223	; 0xdf
 800de7c:	4906      	ldr	r1, [pc, #24]	; (800de98 <tcp_free_listen+0x30>)
 800de7e:	4807      	ldr	r0, [pc, #28]	; (800de9c <tcp_free_listen+0x34>)
 800de80:	f00a fda4 	bl	80189cc <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800de84:	6879      	ldr	r1, [r7, #4]
 800de86:	2002      	movs	r0, #2
 800de88:	f7fe ff28 	bl	800ccdc <memp_free>
}
 800de8c:	bf00      	nop
 800de8e:	3708      	adds	r7, #8
 800de90:	46bd      	mov	sp, r7
 800de92:	bd80      	pop	{r7, pc}
 800de94:	0801ead0 	.word	0x0801ead0
 800de98:	0801eb3c 	.word	0x0801eb3c
 800de9c:	0801eb14 	.word	0x0801eb14

0800dea0 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800dea0:	b580      	push	{r7, lr}
 800dea2:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800dea4:	f000 fea2 	bl	800ebec <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800dea8:	4b07      	ldr	r3, [pc, #28]	; (800dec8 <tcp_tmr+0x28>)
 800deaa:	781b      	ldrb	r3, [r3, #0]
 800deac:	3301      	adds	r3, #1
 800deae:	b2da      	uxtb	r2, r3
 800deb0:	4b05      	ldr	r3, [pc, #20]	; (800dec8 <tcp_tmr+0x28>)
 800deb2:	701a      	strb	r2, [r3, #0]
 800deb4:	4b04      	ldr	r3, [pc, #16]	; (800dec8 <tcp_tmr+0x28>)
 800deb6:	781b      	ldrb	r3, [r3, #0]
 800deb8:	f003 0301 	and.w	r3, r3, #1
 800debc:	2b00      	cmp	r3, #0
 800debe:	d001      	beq.n	800dec4 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800dec0:	f000 fb54 	bl	800e56c <tcp_slowtmr>
  }
}
 800dec4:	bf00      	nop
 800dec6:	bd80      	pop	{r7, pc}
 800dec8:	20000499 	.word	0x20000499

0800decc <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800decc:	b580      	push	{r7, lr}
 800dece:	b084      	sub	sp, #16
 800ded0:	af00      	add	r7, sp, #0
 800ded2:	6078      	str	r0, [r7, #4]
 800ded4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800ded6:	683b      	ldr	r3, [r7, #0]
 800ded8:	2b00      	cmp	r3, #0
 800deda:	d105      	bne.n	800dee8 <tcp_remove_listener+0x1c>
 800dedc:	4b0d      	ldr	r3, [pc, #52]	; (800df14 <tcp_remove_listener+0x48>)
 800dede:	22ff      	movs	r2, #255	; 0xff
 800dee0:	490d      	ldr	r1, [pc, #52]	; (800df18 <tcp_remove_listener+0x4c>)
 800dee2:	480e      	ldr	r0, [pc, #56]	; (800df1c <tcp_remove_listener+0x50>)
 800dee4:	f00a fd72 	bl	80189cc <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	60fb      	str	r3, [r7, #12]
 800deec:	e00a      	b.n	800df04 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800deee:	68fb      	ldr	r3, [r7, #12]
 800def0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800def2:	683a      	ldr	r2, [r7, #0]
 800def4:	429a      	cmp	r2, r3
 800def6:	d102      	bne.n	800defe <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800def8:	68fb      	ldr	r3, [r7, #12]
 800defa:	2200      	movs	r2, #0
 800defc:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800defe:	68fb      	ldr	r3, [r7, #12]
 800df00:	68db      	ldr	r3, [r3, #12]
 800df02:	60fb      	str	r3, [r7, #12]
 800df04:	68fb      	ldr	r3, [r7, #12]
 800df06:	2b00      	cmp	r3, #0
 800df08:	d1f1      	bne.n	800deee <tcp_remove_listener+0x22>
    }
  }
}
 800df0a:	bf00      	nop
 800df0c:	bf00      	nop
 800df0e:	3710      	adds	r7, #16
 800df10:	46bd      	mov	sp, r7
 800df12:	bd80      	pop	{r7, pc}
 800df14:	0801ead0 	.word	0x0801ead0
 800df18:	0801eb58 	.word	0x0801eb58
 800df1c:	0801eb14 	.word	0x0801eb14

0800df20 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800df20:	b580      	push	{r7, lr}
 800df22:	b084      	sub	sp, #16
 800df24:	af00      	add	r7, sp, #0
 800df26:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	2b00      	cmp	r3, #0
 800df2c:	d106      	bne.n	800df3c <tcp_listen_closed+0x1c>
 800df2e:	4b14      	ldr	r3, [pc, #80]	; (800df80 <tcp_listen_closed+0x60>)
 800df30:	f240 1211 	movw	r2, #273	; 0x111
 800df34:	4913      	ldr	r1, [pc, #76]	; (800df84 <tcp_listen_closed+0x64>)
 800df36:	4814      	ldr	r0, [pc, #80]	; (800df88 <tcp_listen_closed+0x68>)
 800df38:	f00a fd48 	bl	80189cc <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	7d1b      	ldrb	r3, [r3, #20]
 800df40:	2b01      	cmp	r3, #1
 800df42:	d006      	beq.n	800df52 <tcp_listen_closed+0x32>
 800df44:	4b0e      	ldr	r3, [pc, #56]	; (800df80 <tcp_listen_closed+0x60>)
 800df46:	f44f 7289 	mov.w	r2, #274	; 0x112
 800df4a:	4910      	ldr	r1, [pc, #64]	; (800df8c <tcp_listen_closed+0x6c>)
 800df4c:	480e      	ldr	r0, [pc, #56]	; (800df88 <tcp_listen_closed+0x68>)
 800df4e:	f00a fd3d 	bl	80189cc <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800df52:	2301      	movs	r3, #1
 800df54:	60fb      	str	r3, [r7, #12]
 800df56:	e00b      	b.n	800df70 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800df58:	4a0d      	ldr	r2, [pc, #52]	; (800df90 <tcp_listen_closed+0x70>)
 800df5a:	68fb      	ldr	r3, [r7, #12]
 800df5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800df60:	681b      	ldr	r3, [r3, #0]
 800df62:	6879      	ldr	r1, [r7, #4]
 800df64:	4618      	mov	r0, r3
 800df66:	f7ff ffb1 	bl	800decc <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800df6a:	68fb      	ldr	r3, [r7, #12]
 800df6c:	3301      	adds	r3, #1
 800df6e:	60fb      	str	r3, [r7, #12]
 800df70:	68fb      	ldr	r3, [r7, #12]
 800df72:	2b03      	cmp	r3, #3
 800df74:	d9f0      	bls.n	800df58 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800df76:	bf00      	nop
 800df78:	bf00      	nop
 800df7a:	3710      	adds	r7, #16
 800df7c:	46bd      	mov	sp, r7
 800df7e:	bd80      	pop	{r7, pc}
 800df80:	0801ead0 	.word	0x0801ead0
 800df84:	0801eb80 	.word	0x0801eb80
 800df88:	0801eb14 	.word	0x0801eb14
 800df8c:	0801eb8c 	.word	0x0801eb8c
 800df90:	08020e54 	.word	0x08020e54

0800df94 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800df94:	b5b0      	push	{r4, r5, r7, lr}
 800df96:	b088      	sub	sp, #32
 800df98:	af04      	add	r7, sp, #16
 800df9a:	6078      	str	r0, [r7, #4]
 800df9c:	460b      	mov	r3, r1
 800df9e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	2b00      	cmp	r3, #0
 800dfa4:	d106      	bne.n	800dfb4 <tcp_close_shutdown+0x20>
 800dfa6:	4b63      	ldr	r3, [pc, #396]	; (800e134 <tcp_close_shutdown+0x1a0>)
 800dfa8:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800dfac:	4962      	ldr	r1, [pc, #392]	; (800e138 <tcp_close_shutdown+0x1a4>)
 800dfae:	4863      	ldr	r0, [pc, #396]	; (800e13c <tcp_close_shutdown+0x1a8>)
 800dfb0:	f00a fd0c 	bl	80189cc <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800dfb4:	78fb      	ldrb	r3, [r7, #3]
 800dfb6:	2b00      	cmp	r3, #0
 800dfb8:	d066      	beq.n	800e088 <tcp_close_shutdown+0xf4>
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	7d1b      	ldrb	r3, [r3, #20]
 800dfbe:	2b04      	cmp	r3, #4
 800dfc0:	d003      	beq.n	800dfca <tcp_close_shutdown+0x36>
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	7d1b      	ldrb	r3, [r3, #20]
 800dfc6:	2b07      	cmp	r3, #7
 800dfc8:	d15e      	bne.n	800e088 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dfce:	2b00      	cmp	r3, #0
 800dfd0:	d104      	bne.n	800dfdc <tcp_close_shutdown+0x48>
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dfd6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800dfda:	d055      	beq.n	800e088 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	8b5b      	ldrh	r3, [r3, #26]
 800dfe0:	f003 0310 	and.w	r3, r3, #16
 800dfe4:	2b00      	cmp	r3, #0
 800dfe6:	d106      	bne.n	800dff6 <tcp_close_shutdown+0x62>
 800dfe8:	4b52      	ldr	r3, [pc, #328]	; (800e134 <tcp_close_shutdown+0x1a0>)
 800dfea:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800dfee:	4954      	ldr	r1, [pc, #336]	; (800e140 <tcp_close_shutdown+0x1ac>)
 800dff0:	4852      	ldr	r0, [pc, #328]	; (800e13c <tcp_close_shutdown+0x1a8>)
 800dff2:	f00a fceb 	bl	80189cc <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800dffe:	687d      	ldr	r5, [r7, #4]
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	3304      	adds	r3, #4
 800e004:	687a      	ldr	r2, [r7, #4]
 800e006:	8ad2      	ldrh	r2, [r2, #22]
 800e008:	6879      	ldr	r1, [r7, #4]
 800e00a:	8b09      	ldrh	r1, [r1, #24]
 800e00c:	9102      	str	r1, [sp, #8]
 800e00e:	9201      	str	r2, [sp, #4]
 800e010:	9300      	str	r3, [sp, #0]
 800e012:	462b      	mov	r3, r5
 800e014:	4622      	mov	r2, r4
 800e016:	4601      	mov	r1, r0
 800e018:	6878      	ldr	r0, [r7, #4]
 800e01a:	f004 fe8d 	bl	8012d38 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800e01e:	6878      	ldr	r0, [r7, #4]
 800e020:	f001 f8c6 	bl	800f1b0 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800e024:	4b47      	ldr	r3, [pc, #284]	; (800e144 <tcp_close_shutdown+0x1b0>)
 800e026:	681b      	ldr	r3, [r3, #0]
 800e028:	687a      	ldr	r2, [r7, #4]
 800e02a:	429a      	cmp	r2, r3
 800e02c:	d105      	bne.n	800e03a <tcp_close_shutdown+0xa6>
 800e02e:	4b45      	ldr	r3, [pc, #276]	; (800e144 <tcp_close_shutdown+0x1b0>)
 800e030:	681b      	ldr	r3, [r3, #0]
 800e032:	68db      	ldr	r3, [r3, #12]
 800e034:	4a43      	ldr	r2, [pc, #268]	; (800e144 <tcp_close_shutdown+0x1b0>)
 800e036:	6013      	str	r3, [r2, #0]
 800e038:	e013      	b.n	800e062 <tcp_close_shutdown+0xce>
 800e03a:	4b42      	ldr	r3, [pc, #264]	; (800e144 <tcp_close_shutdown+0x1b0>)
 800e03c:	681b      	ldr	r3, [r3, #0]
 800e03e:	60fb      	str	r3, [r7, #12]
 800e040:	e00c      	b.n	800e05c <tcp_close_shutdown+0xc8>
 800e042:	68fb      	ldr	r3, [r7, #12]
 800e044:	68db      	ldr	r3, [r3, #12]
 800e046:	687a      	ldr	r2, [r7, #4]
 800e048:	429a      	cmp	r2, r3
 800e04a:	d104      	bne.n	800e056 <tcp_close_shutdown+0xc2>
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	68da      	ldr	r2, [r3, #12]
 800e050:	68fb      	ldr	r3, [r7, #12]
 800e052:	60da      	str	r2, [r3, #12]
 800e054:	e005      	b.n	800e062 <tcp_close_shutdown+0xce>
 800e056:	68fb      	ldr	r3, [r7, #12]
 800e058:	68db      	ldr	r3, [r3, #12]
 800e05a:	60fb      	str	r3, [r7, #12]
 800e05c:	68fb      	ldr	r3, [r7, #12]
 800e05e:	2b00      	cmp	r3, #0
 800e060:	d1ef      	bne.n	800e042 <tcp_close_shutdown+0xae>
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	2200      	movs	r2, #0
 800e066:	60da      	str	r2, [r3, #12]
 800e068:	4b37      	ldr	r3, [pc, #220]	; (800e148 <tcp_close_shutdown+0x1b4>)
 800e06a:	2201      	movs	r2, #1
 800e06c:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800e06e:	4b37      	ldr	r3, [pc, #220]	; (800e14c <tcp_close_shutdown+0x1b8>)
 800e070:	681b      	ldr	r3, [r3, #0]
 800e072:	687a      	ldr	r2, [r7, #4]
 800e074:	429a      	cmp	r2, r3
 800e076:	d102      	bne.n	800e07e <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800e078:	f003 fd5a 	bl	8011b30 <tcp_trigger_input_pcb_close>
 800e07c:	e002      	b.n	800e084 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800e07e:	6878      	ldr	r0, [r7, #4]
 800e080:	f7ff fed6 	bl	800de30 <tcp_free>
      }
      return ERR_OK;
 800e084:	2300      	movs	r3, #0
 800e086:	e050      	b.n	800e12a <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	7d1b      	ldrb	r3, [r3, #20]
 800e08c:	2b02      	cmp	r3, #2
 800e08e:	d03b      	beq.n	800e108 <tcp_close_shutdown+0x174>
 800e090:	2b02      	cmp	r3, #2
 800e092:	dc44      	bgt.n	800e11e <tcp_close_shutdown+0x18a>
 800e094:	2b00      	cmp	r3, #0
 800e096:	d002      	beq.n	800e09e <tcp_close_shutdown+0x10a>
 800e098:	2b01      	cmp	r3, #1
 800e09a:	d02a      	beq.n	800e0f2 <tcp_close_shutdown+0x15e>
 800e09c:	e03f      	b.n	800e11e <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	8adb      	ldrh	r3, [r3, #22]
 800e0a2:	2b00      	cmp	r3, #0
 800e0a4:	d021      	beq.n	800e0ea <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800e0a6:	4b2a      	ldr	r3, [pc, #168]	; (800e150 <tcp_close_shutdown+0x1bc>)
 800e0a8:	681b      	ldr	r3, [r3, #0]
 800e0aa:	687a      	ldr	r2, [r7, #4]
 800e0ac:	429a      	cmp	r2, r3
 800e0ae:	d105      	bne.n	800e0bc <tcp_close_shutdown+0x128>
 800e0b0:	4b27      	ldr	r3, [pc, #156]	; (800e150 <tcp_close_shutdown+0x1bc>)
 800e0b2:	681b      	ldr	r3, [r3, #0]
 800e0b4:	68db      	ldr	r3, [r3, #12]
 800e0b6:	4a26      	ldr	r2, [pc, #152]	; (800e150 <tcp_close_shutdown+0x1bc>)
 800e0b8:	6013      	str	r3, [r2, #0]
 800e0ba:	e013      	b.n	800e0e4 <tcp_close_shutdown+0x150>
 800e0bc:	4b24      	ldr	r3, [pc, #144]	; (800e150 <tcp_close_shutdown+0x1bc>)
 800e0be:	681b      	ldr	r3, [r3, #0]
 800e0c0:	60bb      	str	r3, [r7, #8]
 800e0c2:	e00c      	b.n	800e0de <tcp_close_shutdown+0x14a>
 800e0c4:	68bb      	ldr	r3, [r7, #8]
 800e0c6:	68db      	ldr	r3, [r3, #12]
 800e0c8:	687a      	ldr	r2, [r7, #4]
 800e0ca:	429a      	cmp	r2, r3
 800e0cc:	d104      	bne.n	800e0d8 <tcp_close_shutdown+0x144>
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	68da      	ldr	r2, [r3, #12]
 800e0d2:	68bb      	ldr	r3, [r7, #8]
 800e0d4:	60da      	str	r2, [r3, #12]
 800e0d6:	e005      	b.n	800e0e4 <tcp_close_shutdown+0x150>
 800e0d8:	68bb      	ldr	r3, [r7, #8]
 800e0da:	68db      	ldr	r3, [r3, #12]
 800e0dc:	60bb      	str	r3, [r7, #8]
 800e0de:	68bb      	ldr	r3, [r7, #8]
 800e0e0:	2b00      	cmp	r3, #0
 800e0e2:	d1ef      	bne.n	800e0c4 <tcp_close_shutdown+0x130>
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	2200      	movs	r2, #0
 800e0e8:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800e0ea:	6878      	ldr	r0, [r7, #4]
 800e0ec:	f7ff fea0 	bl	800de30 <tcp_free>
      break;
 800e0f0:	e01a      	b.n	800e128 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800e0f2:	6878      	ldr	r0, [r7, #4]
 800e0f4:	f7ff ff14 	bl	800df20 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800e0f8:	6879      	ldr	r1, [r7, #4]
 800e0fa:	4816      	ldr	r0, [pc, #88]	; (800e154 <tcp_close_shutdown+0x1c0>)
 800e0fc:	f001 f8a8 	bl	800f250 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800e100:	6878      	ldr	r0, [r7, #4]
 800e102:	f7ff feb1 	bl	800de68 <tcp_free_listen>
      break;
 800e106:	e00f      	b.n	800e128 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800e108:	6879      	ldr	r1, [r7, #4]
 800e10a:	480e      	ldr	r0, [pc, #56]	; (800e144 <tcp_close_shutdown+0x1b0>)
 800e10c:	f001 f8a0 	bl	800f250 <tcp_pcb_remove>
 800e110:	4b0d      	ldr	r3, [pc, #52]	; (800e148 <tcp_close_shutdown+0x1b4>)
 800e112:	2201      	movs	r2, #1
 800e114:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800e116:	6878      	ldr	r0, [r7, #4]
 800e118:	f7ff fe8a 	bl	800de30 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800e11c:	e004      	b.n	800e128 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800e11e:	6878      	ldr	r0, [r7, #4]
 800e120:	f000 f81a 	bl	800e158 <tcp_close_shutdown_fin>
 800e124:	4603      	mov	r3, r0
 800e126:	e000      	b.n	800e12a <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800e128:	2300      	movs	r3, #0
}
 800e12a:	4618      	mov	r0, r3
 800e12c:	3710      	adds	r7, #16
 800e12e:	46bd      	mov	sp, r7
 800e130:	bdb0      	pop	{r4, r5, r7, pc}
 800e132:	bf00      	nop
 800e134:	0801ead0 	.word	0x0801ead0
 800e138:	0801eba4 	.word	0x0801eba4
 800e13c:	0801eb14 	.word	0x0801eb14
 800e140:	0801ebc4 	.word	0x0801ebc4
 800e144:	20007150 	.word	0x20007150
 800e148:	2000714c 	.word	0x2000714c
 800e14c:	20007164 	.word	0x20007164
 800e150:	2000715c 	.word	0x2000715c
 800e154:	20007158 	.word	0x20007158

0800e158 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800e158:	b580      	push	{r7, lr}
 800e15a:	b084      	sub	sp, #16
 800e15c:	af00      	add	r7, sp, #0
 800e15e:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	2b00      	cmp	r3, #0
 800e164:	d106      	bne.n	800e174 <tcp_close_shutdown_fin+0x1c>
 800e166:	4b2e      	ldr	r3, [pc, #184]	; (800e220 <tcp_close_shutdown_fin+0xc8>)
 800e168:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800e16c:	492d      	ldr	r1, [pc, #180]	; (800e224 <tcp_close_shutdown_fin+0xcc>)
 800e16e:	482e      	ldr	r0, [pc, #184]	; (800e228 <tcp_close_shutdown_fin+0xd0>)
 800e170:	f00a fc2c 	bl	80189cc <iprintf>

  switch (pcb->state) {
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	7d1b      	ldrb	r3, [r3, #20]
 800e178:	2b07      	cmp	r3, #7
 800e17a:	d020      	beq.n	800e1be <tcp_close_shutdown_fin+0x66>
 800e17c:	2b07      	cmp	r3, #7
 800e17e:	dc2b      	bgt.n	800e1d8 <tcp_close_shutdown_fin+0x80>
 800e180:	2b03      	cmp	r3, #3
 800e182:	d002      	beq.n	800e18a <tcp_close_shutdown_fin+0x32>
 800e184:	2b04      	cmp	r3, #4
 800e186:	d00d      	beq.n	800e1a4 <tcp_close_shutdown_fin+0x4c>
 800e188:	e026      	b.n	800e1d8 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800e18a:	6878      	ldr	r0, [r7, #4]
 800e18c:	f003 fee2 	bl	8011f54 <tcp_send_fin>
 800e190:	4603      	mov	r3, r0
 800e192:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800e194:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e198:	2b00      	cmp	r3, #0
 800e19a:	d11f      	bne.n	800e1dc <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	2205      	movs	r2, #5
 800e1a0:	751a      	strb	r2, [r3, #20]
      }
      break;
 800e1a2:	e01b      	b.n	800e1dc <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800e1a4:	6878      	ldr	r0, [r7, #4]
 800e1a6:	f003 fed5 	bl	8011f54 <tcp_send_fin>
 800e1aa:	4603      	mov	r3, r0
 800e1ac:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800e1ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e1b2:	2b00      	cmp	r3, #0
 800e1b4:	d114      	bne.n	800e1e0 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	2205      	movs	r2, #5
 800e1ba:	751a      	strb	r2, [r3, #20]
      }
      break;
 800e1bc:	e010      	b.n	800e1e0 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800e1be:	6878      	ldr	r0, [r7, #4]
 800e1c0:	f003 fec8 	bl	8011f54 <tcp_send_fin>
 800e1c4:	4603      	mov	r3, r0
 800e1c6:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800e1c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e1cc:	2b00      	cmp	r3, #0
 800e1ce:	d109      	bne.n	800e1e4 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	2209      	movs	r2, #9
 800e1d4:	751a      	strb	r2, [r3, #20]
      }
      break;
 800e1d6:	e005      	b.n	800e1e4 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800e1d8:	2300      	movs	r3, #0
 800e1da:	e01c      	b.n	800e216 <tcp_close_shutdown_fin+0xbe>
      break;
 800e1dc:	bf00      	nop
 800e1de:	e002      	b.n	800e1e6 <tcp_close_shutdown_fin+0x8e>
      break;
 800e1e0:	bf00      	nop
 800e1e2:	e000      	b.n	800e1e6 <tcp_close_shutdown_fin+0x8e>
      break;
 800e1e4:	bf00      	nop
  }

  if (err == ERR_OK) {
 800e1e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e1ea:	2b00      	cmp	r3, #0
 800e1ec:	d103      	bne.n	800e1f6 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800e1ee:	6878      	ldr	r0, [r7, #4]
 800e1f0:	f003 ffee 	bl	80121d0 <tcp_output>
 800e1f4:	e00d      	b.n	800e212 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800e1f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e1fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e1fe:	d108      	bne.n	800e212 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	8b5b      	ldrh	r3, [r3, #26]
 800e204:	f043 0308 	orr.w	r3, r3, #8
 800e208:	b29a      	uxth	r2, r3
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800e20e:	2300      	movs	r3, #0
 800e210:	e001      	b.n	800e216 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800e212:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e216:	4618      	mov	r0, r3
 800e218:	3710      	adds	r7, #16
 800e21a:	46bd      	mov	sp, r7
 800e21c:	bd80      	pop	{r7, pc}
 800e21e:	bf00      	nop
 800e220:	0801ead0 	.word	0x0801ead0
 800e224:	0801eb80 	.word	0x0801eb80
 800e228:	0801eb14 	.word	0x0801eb14

0800e22c <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800e22c:	b580      	push	{r7, lr}
 800e22e:	b082      	sub	sp, #8
 800e230:	af00      	add	r7, sp, #0
 800e232:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	2b00      	cmp	r3, #0
 800e238:	d109      	bne.n	800e24e <tcp_close+0x22>
 800e23a:	4b0f      	ldr	r3, [pc, #60]	; (800e278 <tcp_close+0x4c>)
 800e23c:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800e240:	490e      	ldr	r1, [pc, #56]	; (800e27c <tcp_close+0x50>)
 800e242:	480f      	ldr	r0, [pc, #60]	; (800e280 <tcp_close+0x54>)
 800e244:	f00a fbc2 	bl	80189cc <iprintf>
 800e248:	f06f 030f 	mvn.w	r3, #15
 800e24c:	e00f      	b.n	800e26e <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	7d1b      	ldrb	r3, [r3, #20]
 800e252:	2b01      	cmp	r3, #1
 800e254:	d006      	beq.n	800e264 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	8b5b      	ldrh	r3, [r3, #26]
 800e25a:	f043 0310 	orr.w	r3, r3, #16
 800e25e:	b29a      	uxth	r2, r3
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800e264:	2101      	movs	r1, #1
 800e266:	6878      	ldr	r0, [r7, #4]
 800e268:	f7ff fe94 	bl	800df94 <tcp_close_shutdown>
 800e26c:	4603      	mov	r3, r0
}
 800e26e:	4618      	mov	r0, r3
 800e270:	3708      	adds	r7, #8
 800e272:	46bd      	mov	sp, r7
 800e274:	bd80      	pop	{r7, pc}
 800e276:	bf00      	nop
 800e278:	0801ead0 	.word	0x0801ead0
 800e27c:	0801ebe0 	.word	0x0801ebe0
 800e280:	0801eb14 	.word	0x0801eb14

0800e284 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800e284:	b580      	push	{r7, lr}
 800e286:	b08e      	sub	sp, #56	; 0x38
 800e288:	af04      	add	r7, sp, #16
 800e28a:	6078      	str	r0, [r7, #4]
 800e28c:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	2b00      	cmp	r3, #0
 800e292:	d107      	bne.n	800e2a4 <tcp_abandon+0x20>
 800e294:	4b52      	ldr	r3, [pc, #328]	; (800e3e0 <tcp_abandon+0x15c>)
 800e296:	f240 223d 	movw	r2, #573	; 0x23d
 800e29a:	4952      	ldr	r1, [pc, #328]	; (800e3e4 <tcp_abandon+0x160>)
 800e29c:	4852      	ldr	r0, [pc, #328]	; (800e3e8 <tcp_abandon+0x164>)
 800e29e:	f00a fb95 	bl	80189cc <iprintf>
 800e2a2:	e099      	b.n	800e3d8 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	7d1b      	ldrb	r3, [r3, #20]
 800e2a8:	2b01      	cmp	r3, #1
 800e2aa:	d106      	bne.n	800e2ba <tcp_abandon+0x36>
 800e2ac:	4b4c      	ldr	r3, [pc, #304]	; (800e3e0 <tcp_abandon+0x15c>)
 800e2ae:	f44f 7210 	mov.w	r2, #576	; 0x240
 800e2b2:	494e      	ldr	r1, [pc, #312]	; (800e3ec <tcp_abandon+0x168>)
 800e2b4:	484c      	ldr	r0, [pc, #304]	; (800e3e8 <tcp_abandon+0x164>)
 800e2b6:	f00a fb89 	bl	80189cc <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	7d1b      	ldrb	r3, [r3, #20]
 800e2be:	2b0a      	cmp	r3, #10
 800e2c0:	d107      	bne.n	800e2d2 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800e2c2:	6879      	ldr	r1, [r7, #4]
 800e2c4:	484a      	ldr	r0, [pc, #296]	; (800e3f0 <tcp_abandon+0x16c>)
 800e2c6:	f000 ffc3 	bl	800f250 <tcp_pcb_remove>
    tcp_free(pcb);
 800e2ca:	6878      	ldr	r0, [r7, #4]
 800e2cc:	f7ff fdb0 	bl	800de30 <tcp_free>
 800e2d0:	e082      	b.n	800e3d8 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800e2d2:	2300      	movs	r3, #0
 800e2d4:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800e2d6:	2300      	movs	r3, #0
 800e2d8:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e2de:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e2e4:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e2ec:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	691b      	ldr	r3, [r3, #16]
 800e2f2:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	7d1b      	ldrb	r3, [r3, #20]
 800e2f8:	2b00      	cmp	r3, #0
 800e2fa:	d126      	bne.n	800e34a <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	8adb      	ldrh	r3, [r3, #22]
 800e300:	2b00      	cmp	r3, #0
 800e302:	d02e      	beq.n	800e362 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800e304:	4b3b      	ldr	r3, [pc, #236]	; (800e3f4 <tcp_abandon+0x170>)
 800e306:	681b      	ldr	r3, [r3, #0]
 800e308:	687a      	ldr	r2, [r7, #4]
 800e30a:	429a      	cmp	r2, r3
 800e30c:	d105      	bne.n	800e31a <tcp_abandon+0x96>
 800e30e:	4b39      	ldr	r3, [pc, #228]	; (800e3f4 <tcp_abandon+0x170>)
 800e310:	681b      	ldr	r3, [r3, #0]
 800e312:	68db      	ldr	r3, [r3, #12]
 800e314:	4a37      	ldr	r2, [pc, #220]	; (800e3f4 <tcp_abandon+0x170>)
 800e316:	6013      	str	r3, [r2, #0]
 800e318:	e013      	b.n	800e342 <tcp_abandon+0xbe>
 800e31a:	4b36      	ldr	r3, [pc, #216]	; (800e3f4 <tcp_abandon+0x170>)
 800e31c:	681b      	ldr	r3, [r3, #0]
 800e31e:	61fb      	str	r3, [r7, #28]
 800e320:	e00c      	b.n	800e33c <tcp_abandon+0xb8>
 800e322:	69fb      	ldr	r3, [r7, #28]
 800e324:	68db      	ldr	r3, [r3, #12]
 800e326:	687a      	ldr	r2, [r7, #4]
 800e328:	429a      	cmp	r2, r3
 800e32a:	d104      	bne.n	800e336 <tcp_abandon+0xb2>
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	68da      	ldr	r2, [r3, #12]
 800e330:	69fb      	ldr	r3, [r7, #28]
 800e332:	60da      	str	r2, [r3, #12]
 800e334:	e005      	b.n	800e342 <tcp_abandon+0xbe>
 800e336:	69fb      	ldr	r3, [r7, #28]
 800e338:	68db      	ldr	r3, [r3, #12]
 800e33a:	61fb      	str	r3, [r7, #28]
 800e33c:	69fb      	ldr	r3, [r7, #28]
 800e33e:	2b00      	cmp	r3, #0
 800e340:	d1ef      	bne.n	800e322 <tcp_abandon+0x9e>
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	2200      	movs	r2, #0
 800e346:	60da      	str	r2, [r3, #12]
 800e348:	e00b      	b.n	800e362 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800e34a:	683b      	ldr	r3, [r7, #0]
 800e34c:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	8adb      	ldrh	r3, [r3, #22]
 800e352:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800e354:	6879      	ldr	r1, [r7, #4]
 800e356:	4828      	ldr	r0, [pc, #160]	; (800e3f8 <tcp_abandon+0x174>)
 800e358:	f000 ff7a 	bl	800f250 <tcp_pcb_remove>
 800e35c:	4b27      	ldr	r3, [pc, #156]	; (800e3fc <tcp_abandon+0x178>)
 800e35e:	2201      	movs	r2, #1
 800e360:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800e362:	687b      	ldr	r3, [r7, #4]
 800e364:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e366:	2b00      	cmp	r3, #0
 800e368:	d004      	beq.n	800e374 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e36e:	4618      	mov	r0, r3
 800e370:	f000 fd1c 	bl	800edac <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e378:	2b00      	cmp	r3, #0
 800e37a:	d004      	beq.n	800e386 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e380:	4618      	mov	r0, r3
 800e382:	f000 fd13 	bl	800edac <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e38a:	2b00      	cmp	r3, #0
 800e38c:	d004      	beq.n	800e398 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e392:	4618      	mov	r0, r3
 800e394:	f000 fd0a 	bl	800edac <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800e398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e39a:	2b00      	cmp	r3, #0
 800e39c:	d00e      	beq.n	800e3bc <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800e39e:	6879      	ldr	r1, [r7, #4]
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	3304      	adds	r3, #4
 800e3a4:	687a      	ldr	r2, [r7, #4]
 800e3a6:	8b12      	ldrh	r2, [r2, #24]
 800e3a8:	9202      	str	r2, [sp, #8]
 800e3aa:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800e3ac:	9201      	str	r2, [sp, #4]
 800e3ae:	9300      	str	r3, [sp, #0]
 800e3b0:	460b      	mov	r3, r1
 800e3b2:	697a      	ldr	r2, [r7, #20]
 800e3b4:	69b9      	ldr	r1, [r7, #24]
 800e3b6:	6878      	ldr	r0, [r7, #4]
 800e3b8:	f004 fcbe 	bl	8012d38 <tcp_rst>
    }
    last_state = pcb->state;
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	7d1b      	ldrb	r3, [r3, #20]
 800e3c0:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800e3c2:	6878      	ldr	r0, [r7, #4]
 800e3c4:	f7ff fd34 	bl	800de30 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800e3c8:	693b      	ldr	r3, [r7, #16]
 800e3ca:	2b00      	cmp	r3, #0
 800e3cc:	d004      	beq.n	800e3d8 <tcp_abandon+0x154>
 800e3ce:	693b      	ldr	r3, [r7, #16]
 800e3d0:	f06f 010c 	mvn.w	r1, #12
 800e3d4:	68f8      	ldr	r0, [r7, #12]
 800e3d6:	4798      	blx	r3
  }
}
 800e3d8:	3728      	adds	r7, #40	; 0x28
 800e3da:	46bd      	mov	sp, r7
 800e3dc:	bd80      	pop	{r7, pc}
 800e3de:	bf00      	nop
 800e3e0:	0801ead0 	.word	0x0801ead0
 800e3e4:	0801ec14 	.word	0x0801ec14
 800e3e8:	0801eb14 	.word	0x0801eb14
 800e3ec:	0801ec30 	.word	0x0801ec30
 800e3f0:	20007160 	.word	0x20007160
 800e3f4:	2000715c 	.word	0x2000715c
 800e3f8:	20007150 	.word	0x20007150
 800e3fc:	2000714c 	.word	0x2000714c

0800e400 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800e400:	b580      	push	{r7, lr}
 800e402:	b082      	sub	sp, #8
 800e404:	af00      	add	r7, sp, #0
 800e406:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800e408:	2101      	movs	r1, #1
 800e40a:	6878      	ldr	r0, [r7, #4]
 800e40c:	f7ff ff3a 	bl	800e284 <tcp_abandon>
}
 800e410:	bf00      	nop
 800e412:	3708      	adds	r7, #8
 800e414:	46bd      	mov	sp, r7
 800e416:	bd80      	pop	{r7, pc}

0800e418 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800e418:	b580      	push	{r7, lr}
 800e41a:	b084      	sub	sp, #16
 800e41c:	af00      	add	r7, sp, #0
 800e41e:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	2b00      	cmp	r3, #0
 800e424:	d106      	bne.n	800e434 <tcp_update_rcv_ann_wnd+0x1c>
 800e426:	4b25      	ldr	r3, [pc, #148]	; (800e4bc <tcp_update_rcv_ann_wnd+0xa4>)
 800e428:	f240 32a6 	movw	r2, #934	; 0x3a6
 800e42c:	4924      	ldr	r1, [pc, #144]	; (800e4c0 <tcp_update_rcv_ann_wnd+0xa8>)
 800e42e:	4825      	ldr	r0, [pc, #148]	; (800e4c4 <tcp_update_rcv_ann_wnd+0xac>)
 800e430:	f00a facc 	bl	80189cc <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e438:	687a      	ldr	r2, [r7, #4]
 800e43a:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800e43c:	4413      	add	r3, r2
 800e43e:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e444:	687a      	ldr	r2, [r7, #4]
 800e446:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800e448:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800e44c:	bf28      	it	cs
 800e44e:	f44f 6280 	movcs.w	r2, #1024	; 0x400
 800e452:	b292      	uxth	r2, r2
 800e454:	4413      	add	r3, r2
 800e456:	68fa      	ldr	r2, [r7, #12]
 800e458:	1ad3      	subs	r3, r2, r3
 800e45a:	2b00      	cmp	r3, #0
 800e45c:	db08      	blt.n	800e470 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e46a:	68fa      	ldr	r2, [r7, #12]
 800e46c:	1ad3      	subs	r3, r2, r3
 800e46e:	e020      	b.n	800e4b2 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e478:	1ad3      	subs	r3, r2, r3
 800e47a:	2b00      	cmp	r3, #0
 800e47c:	dd03      	ble.n	800e486 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	2200      	movs	r2, #0
 800e482:	855a      	strh	r2, [r3, #42]	; 0x2a
 800e484:	e014      	b.n	800e4b0 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e48e:	1ad3      	subs	r3, r2, r3
 800e490:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800e492:	68bb      	ldr	r3, [r7, #8]
 800e494:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e498:	d306      	bcc.n	800e4a8 <tcp_update_rcv_ann_wnd+0x90>
 800e49a:	4b08      	ldr	r3, [pc, #32]	; (800e4bc <tcp_update_rcv_ann_wnd+0xa4>)
 800e49c:	f240 32b6 	movw	r2, #950	; 0x3b6
 800e4a0:	4909      	ldr	r1, [pc, #36]	; (800e4c8 <tcp_update_rcv_ann_wnd+0xb0>)
 800e4a2:	4808      	ldr	r0, [pc, #32]	; (800e4c4 <tcp_update_rcv_ann_wnd+0xac>)
 800e4a4:	f00a fa92 	bl	80189cc <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800e4a8:	68bb      	ldr	r3, [r7, #8]
 800e4aa:	b29a      	uxth	r2, r3
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800e4b0:	2300      	movs	r3, #0
  }
}
 800e4b2:	4618      	mov	r0, r3
 800e4b4:	3710      	adds	r7, #16
 800e4b6:	46bd      	mov	sp, r7
 800e4b8:	bd80      	pop	{r7, pc}
 800e4ba:	bf00      	nop
 800e4bc:	0801ead0 	.word	0x0801ead0
 800e4c0:	0801ed2c 	.word	0x0801ed2c
 800e4c4:	0801eb14 	.word	0x0801eb14
 800e4c8:	0801ed50 	.word	0x0801ed50

0800e4cc <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800e4cc:	b580      	push	{r7, lr}
 800e4ce:	b084      	sub	sp, #16
 800e4d0:	af00      	add	r7, sp, #0
 800e4d2:	6078      	str	r0, [r7, #4]
 800e4d4:	460b      	mov	r3, r1
 800e4d6:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	2b00      	cmp	r3, #0
 800e4dc:	d107      	bne.n	800e4ee <tcp_recved+0x22>
 800e4de:	4b1f      	ldr	r3, [pc, #124]	; (800e55c <tcp_recved+0x90>)
 800e4e0:	f240 32cf 	movw	r2, #975	; 0x3cf
 800e4e4:	491e      	ldr	r1, [pc, #120]	; (800e560 <tcp_recved+0x94>)
 800e4e6:	481f      	ldr	r0, [pc, #124]	; (800e564 <tcp_recved+0x98>)
 800e4e8:	f00a fa70 	bl	80189cc <iprintf>
 800e4ec:	e032      	b.n	800e554 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	7d1b      	ldrb	r3, [r3, #20]
 800e4f2:	2b01      	cmp	r3, #1
 800e4f4:	d106      	bne.n	800e504 <tcp_recved+0x38>
 800e4f6:	4b19      	ldr	r3, [pc, #100]	; (800e55c <tcp_recved+0x90>)
 800e4f8:	f240 32d2 	movw	r2, #978	; 0x3d2
 800e4fc:	491a      	ldr	r1, [pc, #104]	; (800e568 <tcp_recved+0x9c>)
 800e4fe:	4819      	ldr	r0, [pc, #100]	; (800e564 <tcp_recved+0x98>)
 800e500:	f00a fa64 	bl	80189cc <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800e508:	887b      	ldrh	r3, [r7, #2]
 800e50a:	4413      	add	r3, r2
 800e50c:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800e50e:	89fb      	ldrh	r3, [r7, #14]
 800e510:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e514:	d804      	bhi.n	800e520 <tcp_recved+0x54>
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e51a:	89fa      	ldrh	r2, [r7, #14]
 800e51c:	429a      	cmp	r2, r3
 800e51e:	d204      	bcs.n	800e52a <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e526:	851a      	strh	r2, [r3, #40]	; 0x28
 800e528:	e002      	b.n	800e530 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	89fa      	ldrh	r2, [r7, #14]
 800e52e:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800e530:	6878      	ldr	r0, [r7, #4]
 800e532:	f7ff ff71 	bl	800e418 <tcp_update_rcv_ann_wnd>
 800e536:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800e538:	68bb      	ldr	r3, [r7, #8]
 800e53a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e53e:	d309      	bcc.n	800e554 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	8b5b      	ldrh	r3, [r3, #26]
 800e544:	f043 0302 	orr.w	r3, r3, #2
 800e548:	b29a      	uxth	r2, r3
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800e54e:	6878      	ldr	r0, [r7, #4]
 800e550:	f003 fe3e 	bl	80121d0 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800e554:	3710      	adds	r7, #16
 800e556:	46bd      	mov	sp, r7
 800e558:	bd80      	pop	{r7, pc}
 800e55a:	bf00      	nop
 800e55c:	0801ead0 	.word	0x0801ead0
 800e560:	0801ed6c 	.word	0x0801ed6c
 800e564:	0801eb14 	.word	0x0801eb14
 800e568:	0801ed84 	.word	0x0801ed84

0800e56c <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800e56c:	b5b0      	push	{r4, r5, r7, lr}
 800e56e:	b090      	sub	sp, #64	; 0x40
 800e570:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800e572:	2300      	movs	r3, #0
 800e574:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800e578:	4b94      	ldr	r3, [pc, #592]	; (800e7cc <tcp_slowtmr+0x260>)
 800e57a:	681b      	ldr	r3, [r3, #0]
 800e57c:	3301      	adds	r3, #1
 800e57e:	4a93      	ldr	r2, [pc, #588]	; (800e7cc <tcp_slowtmr+0x260>)
 800e580:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800e582:	4b93      	ldr	r3, [pc, #588]	; (800e7d0 <tcp_slowtmr+0x264>)
 800e584:	781b      	ldrb	r3, [r3, #0]
 800e586:	3301      	adds	r3, #1
 800e588:	b2da      	uxtb	r2, r3
 800e58a:	4b91      	ldr	r3, [pc, #580]	; (800e7d0 <tcp_slowtmr+0x264>)
 800e58c:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800e58e:	2300      	movs	r3, #0
 800e590:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800e592:	4b90      	ldr	r3, [pc, #576]	; (800e7d4 <tcp_slowtmr+0x268>)
 800e594:	681b      	ldr	r3, [r3, #0]
 800e596:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800e598:	e29f      	b.n	800eada <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800e59a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e59c:	7d1b      	ldrb	r3, [r3, #20]
 800e59e:	2b00      	cmp	r3, #0
 800e5a0:	d106      	bne.n	800e5b0 <tcp_slowtmr+0x44>
 800e5a2:	4b8d      	ldr	r3, [pc, #564]	; (800e7d8 <tcp_slowtmr+0x26c>)
 800e5a4:	f240 42be 	movw	r2, #1214	; 0x4be
 800e5a8:	498c      	ldr	r1, [pc, #560]	; (800e7dc <tcp_slowtmr+0x270>)
 800e5aa:	488d      	ldr	r0, [pc, #564]	; (800e7e0 <tcp_slowtmr+0x274>)
 800e5ac:	f00a fa0e 	bl	80189cc <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800e5b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5b2:	7d1b      	ldrb	r3, [r3, #20]
 800e5b4:	2b01      	cmp	r3, #1
 800e5b6:	d106      	bne.n	800e5c6 <tcp_slowtmr+0x5a>
 800e5b8:	4b87      	ldr	r3, [pc, #540]	; (800e7d8 <tcp_slowtmr+0x26c>)
 800e5ba:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800e5be:	4989      	ldr	r1, [pc, #548]	; (800e7e4 <tcp_slowtmr+0x278>)
 800e5c0:	4887      	ldr	r0, [pc, #540]	; (800e7e0 <tcp_slowtmr+0x274>)
 800e5c2:	f00a fa03 	bl	80189cc <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800e5c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5c8:	7d1b      	ldrb	r3, [r3, #20]
 800e5ca:	2b0a      	cmp	r3, #10
 800e5cc:	d106      	bne.n	800e5dc <tcp_slowtmr+0x70>
 800e5ce:	4b82      	ldr	r3, [pc, #520]	; (800e7d8 <tcp_slowtmr+0x26c>)
 800e5d0:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800e5d4:	4984      	ldr	r1, [pc, #528]	; (800e7e8 <tcp_slowtmr+0x27c>)
 800e5d6:	4882      	ldr	r0, [pc, #520]	; (800e7e0 <tcp_slowtmr+0x274>)
 800e5d8:	f00a f9f8 	bl	80189cc <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800e5dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5de:	7f9a      	ldrb	r2, [r3, #30]
 800e5e0:	4b7b      	ldr	r3, [pc, #492]	; (800e7d0 <tcp_slowtmr+0x264>)
 800e5e2:	781b      	ldrb	r3, [r3, #0]
 800e5e4:	429a      	cmp	r2, r3
 800e5e6:	d105      	bne.n	800e5f4 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800e5e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5ea:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800e5ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5ee:	68db      	ldr	r3, [r3, #12]
 800e5f0:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800e5f2:	e272      	b.n	800eada <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 800e5f4:	4b76      	ldr	r3, [pc, #472]	; (800e7d0 <tcp_slowtmr+0x264>)
 800e5f6:	781a      	ldrb	r2, [r3, #0]
 800e5f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5fa:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800e5fc:	2300      	movs	r3, #0
 800e5fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800e602:	2300      	movs	r3, #0
 800e604:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800e608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e60a:	7d1b      	ldrb	r3, [r3, #20]
 800e60c:	2b02      	cmp	r3, #2
 800e60e:	d10a      	bne.n	800e626 <tcp_slowtmr+0xba>
 800e610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e612:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e616:	2b05      	cmp	r3, #5
 800e618:	d905      	bls.n	800e626 <tcp_slowtmr+0xba>
      ++pcb_remove;
 800e61a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e61e:	3301      	adds	r3, #1
 800e620:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e624:	e11e      	b.n	800e864 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800e626:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e628:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e62c:	2b0b      	cmp	r3, #11
 800e62e:	d905      	bls.n	800e63c <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800e630:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e634:	3301      	adds	r3, #1
 800e636:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e63a:	e113      	b.n	800e864 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800e63c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e63e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800e642:	2b00      	cmp	r3, #0
 800e644:	d075      	beq.n	800e732 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800e646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e648:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e64a:	2b00      	cmp	r3, #0
 800e64c:	d006      	beq.n	800e65c <tcp_slowtmr+0xf0>
 800e64e:	4b62      	ldr	r3, [pc, #392]	; (800e7d8 <tcp_slowtmr+0x26c>)
 800e650:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800e654:	4965      	ldr	r1, [pc, #404]	; (800e7ec <tcp_slowtmr+0x280>)
 800e656:	4862      	ldr	r0, [pc, #392]	; (800e7e0 <tcp_slowtmr+0x274>)
 800e658:	f00a f9b8 	bl	80189cc <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800e65c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e65e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e660:	2b00      	cmp	r3, #0
 800e662:	d106      	bne.n	800e672 <tcp_slowtmr+0x106>
 800e664:	4b5c      	ldr	r3, [pc, #368]	; (800e7d8 <tcp_slowtmr+0x26c>)
 800e666:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800e66a:	4961      	ldr	r1, [pc, #388]	; (800e7f0 <tcp_slowtmr+0x284>)
 800e66c:	485c      	ldr	r0, [pc, #368]	; (800e7e0 <tcp_slowtmr+0x274>)
 800e66e:	f00a f9ad 	bl	80189cc <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800e672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e674:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800e678:	2b0b      	cmp	r3, #11
 800e67a:	d905      	bls.n	800e688 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800e67c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e680:	3301      	adds	r3, #1
 800e682:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e686:	e0ed      	b.n	800e864 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800e688:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e68a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800e68e:	3b01      	subs	r3, #1
 800e690:	4a58      	ldr	r2, [pc, #352]	; (800e7f4 <tcp_slowtmr+0x288>)
 800e692:	5cd3      	ldrb	r3, [r2, r3]
 800e694:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800e696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e698:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800e69c:	7c7a      	ldrb	r2, [r7, #17]
 800e69e:	429a      	cmp	r2, r3
 800e6a0:	d907      	bls.n	800e6b2 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800e6a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6a4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800e6a8:	3301      	adds	r3, #1
 800e6aa:	b2da      	uxtb	r2, r3
 800e6ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6ae:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800e6b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6b4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800e6b8:	7c7a      	ldrb	r2, [r7, #17]
 800e6ba:	429a      	cmp	r2, r3
 800e6bc:	f200 80d2 	bhi.w	800e864 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800e6c0:	2301      	movs	r3, #1
 800e6c2:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800e6c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6c6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e6ca:	2b00      	cmp	r3, #0
 800e6cc:	d108      	bne.n	800e6e0 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800e6ce:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e6d0:	f004 fc24 	bl	8012f1c <tcp_zero_window_probe>
 800e6d4:	4603      	mov	r3, r0
 800e6d6:	2b00      	cmp	r3, #0
 800e6d8:	d014      	beq.n	800e704 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800e6da:	2300      	movs	r3, #0
 800e6dc:	623b      	str	r3, [r7, #32]
 800e6de:	e011      	b.n	800e704 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800e6e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6e2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e6e6:	4619      	mov	r1, r3
 800e6e8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e6ea:	f003 faeb 	bl	8011cc4 <tcp_split_unsent_seg>
 800e6ee:	4603      	mov	r3, r0
 800e6f0:	2b00      	cmp	r3, #0
 800e6f2:	d107      	bne.n	800e704 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800e6f4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e6f6:	f003 fd6b 	bl	80121d0 <tcp_output>
 800e6fa:	4603      	mov	r3, r0
 800e6fc:	2b00      	cmp	r3, #0
 800e6fe:	d101      	bne.n	800e704 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800e700:	2300      	movs	r3, #0
 800e702:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800e704:	6a3b      	ldr	r3, [r7, #32]
 800e706:	2b00      	cmp	r3, #0
 800e708:	f000 80ac 	beq.w	800e864 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800e70c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e70e:	2200      	movs	r2, #0
 800e710:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800e714:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e716:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800e71a:	2b06      	cmp	r3, #6
 800e71c:	f200 80a2 	bhi.w	800e864 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800e720:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e722:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800e726:	3301      	adds	r3, #1
 800e728:	b2da      	uxtb	r2, r3
 800e72a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e72c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800e730:	e098      	b.n	800e864 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800e732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e734:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800e738:	2b00      	cmp	r3, #0
 800e73a:	db0f      	blt.n	800e75c <tcp_slowtmr+0x1f0>
 800e73c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e73e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800e742:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800e746:	4293      	cmp	r3, r2
 800e748:	d008      	beq.n	800e75c <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800e74a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e74c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800e750:	b29b      	uxth	r3, r3
 800e752:	3301      	adds	r3, #1
 800e754:	b29b      	uxth	r3, r3
 800e756:	b21a      	sxth	r2, r3
 800e758:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e75a:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800e75c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e75e:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800e762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e764:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800e768:	429a      	cmp	r2, r3
 800e76a:	db7b      	blt.n	800e864 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800e76c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e76e:	f004 f821 	bl	80127b4 <tcp_rexmit_rto_prepare>
 800e772:	4603      	mov	r3, r0
 800e774:	2b00      	cmp	r3, #0
 800e776:	d007      	beq.n	800e788 <tcp_slowtmr+0x21c>
 800e778:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e77a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e77c:	2b00      	cmp	r3, #0
 800e77e:	d171      	bne.n	800e864 <tcp_slowtmr+0x2f8>
 800e780:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e782:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e784:	2b00      	cmp	r3, #0
 800e786:	d06d      	beq.n	800e864 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800e788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e78a:	7d1b      	ldrb	r3, [r3, #20]
 800e78c:	2b02      	cmp	r3, #2
 800e78e:	d03a      	beq.n	800e806 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800e790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e792:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e796:	2b0c      	cmp	r3, #12
 800e798:	bf28      	it	cs
 800e79a:	230c      	movcs	r3, #12
 800e79c:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800e79e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7a0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800e7a4:	10db      	asrs	r3, r3, #3
 800e7a6:	b21b      	sxth	r3, r3
 800e7a8:	461a      	mov	r2, r3
 800e7aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7ac:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800e7b0:	4413      	add	r3, r2
 800e7b2:	7efa      	ldrb	r2, [r7, #27]
 800e7b4:	4910      	ldr	r1, [pc, #64]	; (800e7f8 <tcp_slowtmr+0x28c>)
 800e7b6:	5c8a      	ldrb	r2, [r1, r2]
 800e7b8:	4093      	lsls	r3, r2
 800e7ba:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800e7bc:	697b      	ldr	r3, [r7, #20]
 800e7be:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800e7c2:	4293      	cmp	r3, r2
 800e7c4:	dc1a      	bgt.n	800e7fc <tcp_slowtmr+0x290>
 800e7c6:	697b      	ldr	r3, [r7, #20]
 800e7c8:	b21a      	sxth	r2, r3
 800e7ca:	e019      	b.n	800e800 <tcp_slowtmr+0x294>
 800e7cc:	20007154 	.word	0x20007154
 800e7d0:	2000049a 	.word	0x2000049a
 800e7d4:	20007150 	.word	0x20007150
 800e7d8:	0801ead0 	.word	0x0801ead0
 800e7dc:	0801ee14 	.word	0x0801ee14
 800e7e0:	0801eb14 	.word	0x0801eb14
 800e7e4:	0801ee40 	.word	0x0801ee40
 800e7e8:	0801ee6c 	.word	0x0801ee6c
 800e7ec:	0801ee9c 	.word	0x0801ee9c
 800e7f0:	0801eed0 	.word	0x0801eed0
 800e7f4:	08020e4c 	.word	0x08020e4c
 800e7f8:	08020e3c 	.word	0x08020e3c
 800e7fc:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800e800:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e802:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800e806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e808:	2200      	movs	r2, #0
 800e80a:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800e80c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e80e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800e812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e814:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e818:	4293      	cmp	r3, r2
 800e81a:	bf28      	it	cs
 800e81c:	4613      	movcs	r3, r2
 800e81e:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800e820:	8a7b      	ldrh	r3, [r7, #18]
 800e822:	085b      	lsrs	r3, r3, #1
 800e824:	b29a      	uxth	r2, r3
 800e826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e828:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800e82c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e82e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800e832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e834:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e836:	005b      	lsls	r3, r3, #1
 800e838:	b29b      	uxth	r3, r3
 800e83a:	429a      	cmp	r2, r3
 800e83c:	d206      	bcs.n	800e84c <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800e83e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e840:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e842:	005b      	lsls	r3, r3, #1
 800e844:	b29a      	uxth	r2, r3
 800e846:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e848:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800e84c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e84e:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800e850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e852:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800e856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e858:	2200      	movs	r2, #0
 800e85a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800e85e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e860:	f004 f818 	bl	8012894 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800e864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e866:	7d1b      	ldrb	r3, [r3, #20]
 800e868:	2b06      	cmp	r3, #6
 800e86a:	d111      	bne.n	800e890 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800e86c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e86e:	8b5b      	ldrh	r3, [r3, #26]
 800e870:	f003 0310 	and.w	r3, r3, #16
 800e874:	2b00      	cmp	r3, #0
 800e876:	d00b      	beq.n	800e890 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e878:	4b9d      	ldr	r3, [pc, #628]	; (800eaf0 <tcp_slowtmr+0x584>)
 800e87a:	681a      	ldr	r2, [r3, #0]
 800e87c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e87e:	6a1b      	ldr	r3, [r3, #32]
 800e880:	1ad3      	subs	r3, r2, r3
 800e882:	2b28      	cmp	r3, #40	; 0x28
 800e884:	d904      	bls.n	800e890 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800e886:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e88a:	3301      	adds	r3, #1
 800e88c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800e890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e892:	7a5b      	ldrb	r3, [r3, #9]
 800e894:	f003 0308 	and.w	r3, r3, #8
 800e898:	2b00      	cmp	r3, #0
 800e89a:	d04c      	beq.n	800e936 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 800e89c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e89e:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800e8a0:	2b04      	cmp	r3, #4
 800e8a2:	d003      	beq.n	800e8ac <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800e8a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8a6:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800e8a8:	2b07      	cmp	r3, #7
 800e8aa:	d144      	bne.n	800e936 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e8ac:	4b90      	ldr	r3, [pc, #576]	; (800eaf0 <tcp_slowtmr+0x584>)
 800e8ae:	681a      	ldr	r2, [r3, #0]
 800e8b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8b2:	6a1b      	ldr	r3, [r3, #32]
 800e8b4:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800e8b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800e8bc:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 800e8c0:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 800e8c4:	498b      	ldr	r1, [pc, #556]	; (800eaf4 <tcp_slowtmr+0x588>)
 800e8c6:	fba1 1303 	umull	r1, r3, r1, r3
 800e8ca:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e8cc:	429a      	cmp	r2, r3
 800e8ce:	d90a      	bls.n	800e8e6 <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800e8d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e8d4:	3301      	adds	r3, #1
 800e8d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800e8da:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e8de:	3301      	adds	r3, #1
 800e8e0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800e8e4:	e027      	b.n	800e936 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e8e6:	4b82      	ldr	r3, [pc, #520]	; (800eaf0 <tcp_slowtmr+0x584>)
 800e8e8:	681a      	ldr	r2, [r3, #0]
 800e8ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8ec:	6a1b      	ldr	r3, [r3, #32]
 800e8ee:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800e8f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8f2:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800e8f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8f8:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800e8fc:	4618      	mov	r0, r3
 800e8fe:	4b7e      	ldr	r3, [pc, #504]	; (800eaf8 <tcp_slowtmr+0x58c>)
 800e900:	fb03 f300 	mul.w	r3, r3, r0
 800e904:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800e906:	497b      	ldr	r1, [pc, #492]	; (800eaf4 <tcp_slowtmr+0x588>)
 800e908:	fba1 1303 	umull	r1, r3, r1, r3
 800e90c:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e90e:	429a      	cmp	r2, r3
 800e910:	d911      	bls.n	800e936 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 800e912:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e914:	f004 fac2 	bl	8012e9c <tcp_keepalive>
 800e918:	4603      	mov	r3, r0
 800e91a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800e91e:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800e922:	2b00      	cmp	r3, #0
 800e924:	d107      	bne.n	800e936 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 800e926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e928:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800e92c:	3301      	adds	r3, #1
 800e92e:	b2da      	uxtb	r2, r3
 800e930:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e932:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800e936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e938:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e93a:	2b00      	cmp	r3, #0
 800e93c:	d011      	beq.n	800e962 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800e93e:	4b6c      	ldr	r3, [pc, #432]	; (800eaf0 <tcp_slowtmr+0x584>)
 800e940:	681a      	ldr	r2, [r3, #0]
 800e942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e944:	6a1b      	ldr	r3, [r3, #32]
 800e946:	1ad2      	subs	r2, r2, r3
 800e948:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e94a:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800e94e:	4619      	mov	r1, r3
 800e950:	460b      	mov	r3, r1
 800e952:	005b      	lsls	r3, r3, #1
 800e954:	440b      	add	r3, r1
 800e956:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800e958:	429a      	cmp	r2, r3
 800e95a:	d302      	bcc.n	800e962 <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800e95c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e95e:	f000 fddb 	bl	800f518 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800e962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e964:	7d1b      	ldrb	r3, [r3, #20]
 800e966:	2b03      	cmp	r3, #3
 800e968:	d10b      	bne.n	800e982 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e96a:	4b61      	ldr	r3, [pc, #388]	; (800eaf0 <tcp_slowtmr+0x584>)
 800e96c:	681a      	ldr	r2, [r3, #0]
 800e96e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e970:	6a1b      	ldr	r3, [r3, #32]
 800e972:	1ad3      	subs	r3, r2, r3
 800e974:	2b28      	cmp	r3, #40	; 0x28
 800e976:	d904      	bls.n	800e982 <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800e978:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e97c:	3301      	adds	r3, #1
 800e97e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800e982:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e984:	7d1b      	ldrb	r3, [r3, #20]
 800e986:	2b09      	cmp	r3, #9
 800e988:	d10b      	bne.n	800e9a2 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800e98a:	4b59      	ldr	r3, [pc, #356]	; (800eaf0 <tcp_slowtmr+0x584>)
 800e98c:	681a      	ldr	r2, [r3, #0]
 800e98e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e990:	6a1b      	ldr	r3, [r3, #32]
 800e992:	1ad3      	subs	r3, r2, r3
 800e994:	2bf0      	cmp	r3, #240	; 0xf0
 800e996:	d904      	bls.n	800e9a2 <tcp_slowtmr+0x436>
        ++pcb_remove;
 800e998:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e99c:	3301      	adds	r3, #1
 800e99e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800e9a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e9a6:	2b00      	cmp	r3, #0
 800e9a8:	d060      	beq.n	800ea6c <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800e9aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e9b0:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800e9b2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e9b4:	f000 fbfc 	bl	800f1b0 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800e9b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9ba:	2b00      	cmp	r3, #0
 800e9bc:	d010      	beq.n	800e9e0 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800e9be:	4b4f      	ldr	r3, [pc, #316]	; (800eafc <tcp_slowtmr+0x590>)
 800e9c0:	681b      	ldr	r3, [r3, #0]
 800e9c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e9c4:	429a      	cmp	r2, r3
 800e9c6:	d106      	bne.n	800e9d6 <tcp_slowtmr+0x46a>
 800e9c8:	4b4d      	ldr	r3, [pc, #308]	; (800eb00 <tcp_slowtmr+0x594>)
 800e9ca:	f240 526d 	movw	r2, #1389	; 0x56d
 800e9ce:	494d      	ldr	r1, [pc, #308]	; (800eb04 <tcp_slowtmr+0x598>)
 800e9d0:	484d      	ldr	r0, [pc, #308]	; (800eb08 <tcp_slowtmr+0x59c>)
 800e9d2:	f009 fffb 	bl	80189cc <iprintf>
        prev->next = pcb->next;
 800e9d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9d8:	68da      	ldr	r2, [r3, #12]
 800e9da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9dc:	60da      	str	r2, [r3, #12]
 800e9de:	e00f      	b.n	800ea00 <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800e9e0:	4b46      	ldr	r3, [pc, #280]	; (800eafc <tcp_slowtmr+0x590>)
 800e9e2:	681b      	ldr	r3, [r3, #0]
 800e9e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e9e6:	429a      	cmp	r2, r3
 800e9e8:	d006      	beq.n	800e9f8 <tcp_slowtmr+0x48c>
 800e9ea:	4b45      	ldr	r3, [pc, #276]	; (800eb00 <tcp_slowtmr+0x594>)
 800e9ec:	f240 5271 	movw	r2, #1393	; 0x571
 800e9f0:	4946      	ldr	r1, [pc, #280]	; (800eb0c <tcp_slowtmr+0x5a0>)
 800e9f2:	4845      	ldr	r0, [pc, #276]	; (800eb08 <tcp_slowtmr+0x59c>)
 800e9f4:	f009 ffea 	bl	80189cc <iprintf>
        tcp_active_pcbs = pcb->next;
 800e9f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9fa:	68db      	ldr	r3, [r3, #12]
 800e9fc:	4a3f      	ldr	r2, [pc, #252]	; (800eafc <tcp_slowtmr+0x590>)
 800e9fe:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800ea00:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ea04:	2b00      	cmp	r3, #0
 800ea06:	d013      	beq.n	800ea30 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800ea08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea0a:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800ea0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea0e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800ea10:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800ea12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea14:	3304      	adds	r3, #4
 800ea16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ea18:	8ad2      	ldrh	r2, [r2, #22]
 800ea1a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ea1c:	8b09      	ldrh	r1, [r1, #24]
 800ea1e:	9102      	str	r1, [sp, #8]
 800ea20:	9201      	str	r2, [sp, #4]
 800ea22:	9300      	str	r3, [sp, #0]
 800ea24:	462b      	mov	r3, r5
 800ea26:	4622      	mov	r2, r4
 800ea28:	4601      	mov	r1, r0
 800ea2a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ea2c:	f004 f984 	bl	8012d38 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800ea30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea32:	691b      	ldr	r3, [r3, #16]
 800ea34:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800ea36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea38:	7d1b      	ldrb	r3, [r3, #20]
 800ea3a:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800ea3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea3e:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800ea40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea42:	68db      	ldr	r3, [r3, #12]
 800ea44:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800ea46:	6838      	ldr	r0, [r7, #0]
 800ea48:	f7ff f9f2 	bl	800de30 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800ea4c:	4b30      	ldr	r3, [pc, #192]	; (800eb10 <tcp_slowtmr+0x5a4>)
 800ea4e:	2200      	movs	r2, #0
 800ea50:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800ea52:	68fb      	ldr	r3, [r7, #12]
 800ea54:	2b00      	cmp	r3, #0
 800ea56:	d004      	beq.n	800ea62 <tcp_slowtmr+0x4f6>
 800ea58:	68fb      	ldr	r3, [r7, #12]
 800ea5a:	f06f 010c 	mvn.w	r1, #12
 800ea5e:	68b8      	ldr	r0, [r7, #8]
 800ea60:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800ea62:	4b2b      	ldr	r3, [pc, #172]	; (800eb10 <tcp_slowtmr+0x5a4>)
 800ea64:	781b      	ldrb	r3, [r3, #0]
 800ea66:	2b00      	cmp	r3, #0
 800ea68:	d037      	beq.n	800eada <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 800ea6a:	e590      	b.n	800e58e <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800ea6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea6e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800ea70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea72:	68db      	ldr	r3, [r3, #12]
 800ea74:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800ea76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea78:	7f1b      	ldrb	r3, [r3, #28]
 800ea7a:	3301      	adds	r3, #1
 800ea7c:	b2da      	uxtb	r2, r3
 800ea7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea80:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800ea82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea84:	7f1a      	ldrb	r2, [r3, #28]
 800ea86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea88:	7f5b      	ldrb	r3, [r3, #29]
 800ea8a:	429a      	cmp	r2, r3
 800ea8c:	d325      	bcc.n	800eada <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 800ea8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea90:	2200      	movs	r2, #0
 800ea92:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800ea94:	4b1e      	ldr	r3, [pc, #120]	; (800eb10 <tcp_slowtmr+0x5a4>)
 800ea96:	2200      	movs	r2, #0
 800ea98:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800ea9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800eaa0:	2b00      	cmp	r3, #0
 800eaa2:	d00b      	beq.n	800eabc <tcp_slowtmr+0x550>
 800eaa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eaa6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800eaaa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800eaac:	6912      	ldr	r2, [r2, #16]
 800eaae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800eab0:	4610      	mov	r0, r2
 800eab2:	4798      	blx	r3
 800eab4:	4603      	mov	r3, r0
 800eab6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800eaba:	e002      	b.n	800eac2 <tcp_slowtmr+0x556>
 800eabc:	2300      	movs	r3, #0
 800eabe:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800eac2:	4b13      	ldr	r3, [pc, #76]	; (800eb10 <tcp_slowtmr+0x5a4>)
 800eac4:	781b      	ldrb	r3, [r3, #0]
 800eac6:	2b00      	cmp	r3, #0
 800eac8:	d000      	beq.n	800eacc <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 800eaca:	e560      	b.n	800e58e <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800eacc:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800ead0:	2b00      	cmp	r3, #0
 800ead2:	d102      	bne.n	800eada <tcp_slowtmr+0x56e>
          tcp_output(prev);
 800ead4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ead6:	f003 fb7b 	bl	80121d0 <tcp_output>
  while (pcb != NULL) {
 800eada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eadc:	2b00      	cmp	r3, #0
 800eade:	f47f ad5c 	bne.w	800e59a <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800eae2:	2300      	movs	r3, #0
 800eae4:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800eae6:	4b0b      	ldr	r3, [pc, #44]	; (800eb14 <tcp_slowtmr+0x5a8>)
 800eae8:	681b      	ldr	r3, [r3, #0]
 800eaea:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800eaec:	e067      	b.n	800ebbe <tcp_slowtmr+0x652>
 800eaee:	bf00      	nop
 800eaf0:	20007154 	.word	0x20007154
 800eaf4:	10624dd3 	.word	0x10624dd3
 800eaf8:	000124f8 	.word	0x000124f8
 800eafc:	20007150 	.word	0x20007150
 800eb00:	0801ead0 	.word	0x0801ead0
 800eb04:	0801ef08 	.word	0x0801ef08
 800eb08:	0801eb14 	.word	0x0801eb14
 800eb0c:	0801ef34 	.word	0x0801ef34
 800eb10:	2000714c 	.word	0x2000714c
 800eb14:	20007160 	.word	0x20007160
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800eb18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb1a:	7d1b      	ldrb	r3, [r3, #20]
 800eb1c:	2b0a      	cmp	r3, #10
 800eb1e:	d006      	beq.n	800eb2e <tcp_slowtmr+0x5c2>
 800eb20:	4b2b      	ldr	r3, [pc, #172]	; (800ebd0 <tcp_slowtmr+0x664>)
 800eb22:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800eb26:	492b      	ldr	r1, [pc, #172]	; (800ebd4 <tcp_slowtmr+0x668>)
 800eb28:	482b      	ldr	r0, [pc, #172]	; (800ebd8 <tcp_slowtmr+0x66c>)
 800eb2a:	f009 ff4f 	bl	80189cc <iprintf>
    pcb_remove = 0;
 800eb2e:	2300      	movs	r3, #0
 800eb30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800eb34:	4b29      	ldr	r3, [pc, #164]	; (800ebdc <tcp_slowtmr+0x670>)
 800eb36:	681a      	ldr	r2, [r3, #0]
 800eb38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb3a:	6a1b      	ldr	r3, [r3, #32]
 800eb3c:	1ad3      	subs	r3, r2, r3
 800eb3e:	2bf0      	cmp	r3, #240	; 0xf0
 800eb40:	d904      	bls.n	800eb4c <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800eb42:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800eb46:	3301      	adds	r3, #1
 800eb48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800eb4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800eb50:	2b00      	cmp	r3, #0
 800eb52:	d02f      	beq.n	800ebb4 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800eb54:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800eb56:	f000 fb2b 	bl	800f1b0 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800eb5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb5c:	2b00      	cmp	r3, #0
 800eb5e:	d010      	beq.n	800eb82 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800eb60:	4b1f      	ldr	r3, [pc, #124]	; (800ebe0 <tcp_slowtmr+0x674>)
 800eb62:	681b      	ldr	r3, [r3, #0]
 800eb64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800eb66:	429a      	cmp	r2, r3
 800eb68:	d106      	bne.n	800eb78 <tcp_slowtmr+0x60c>
 800eb6a:	4b19      	ldr	r3, [pc, #100]	; (800ebd0 <tcp_slowtmr+0x664>)
 800eb6c:	f240 52af 	movw	r2, #1455	; 0x5af
 800eb70:	491c      	ldr	r1, [pc, #112]	; (800ebe4 <tcp_slowtmr+0x678>)
 800eb72:	4819      	ldr	r0, [pc, #100]	; (800ebd8 <tcp_slowtmr+0x66c>)
 800eb74:	f009 ff2a 	bl	80189cc <iprintf>
        prev->next = pcb->next;
 800eb78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb7a:	68da      	ldr	r2, [r3, #12]
 800eb7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb7e:	60da      	str	r2, [r3, #12]
 800eb80:	e00f      	b.n	800eba2 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800eb82:	4b17      	ldr	r3, [pc, #92]	; (800ebe0 <tcp_slowtmr+0x674>)
 800eb84:	681b      	ldr	r3, [r3, #0]
 800eb86:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800eb88:	429a      	cmp	r2, r3
 800eb8a:	d006      	beq.n	800eb9a <tcp_slowtmr+0x62e>
 800eb8c:	4b10      	ldr	r3, [pc, #64]	; (800ebd0 <tcp_slowtmr+0x664>)
 800eb8e:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800eb92:	4915      	ldr	r1, [pc, #84]	; (800ebe8 <tcp_slowtmr+0x67c>)
 800eb94:	4810      	ldr	r0, [pc, #64]	; (800ebd8 <tcp_slowtmr+0x66c>)
 800eb96:	f009 ff19 	bl	80189cc <iprintf>
        tcp_tw_pcbs = pcb->next;
 800eb9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb9c:	68db      	ldr	r3, [r3, #12]
 800eb9e:	4a10      	ldr	r2, [pc, #64]	; (800ebe0 <tcp_slowtmr+0x674>)
 800eba0:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800eba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eba4:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800eba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eba8:	68db      	ldr	r3, [r3, #12]
 800ebaa:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800ebac:	69f8      	ldr	r0, [r7, #28]
 800ebae:	f7ff f93f 	bl	800de30 <tcp_free>
 800ebb2:	e004      	b.n	800ebbe <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800ebb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebb6:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800ebb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebba:	68db      	ldr	r3, [r3, #12]
 800ebbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800ebbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebc0:	2b00      	cmp	r3, #0
 800ebc2:	d1a9      	bne.n	800eb18 <tcp_slowtmr+0x5ac>
    }
  }
}
 800ebc4:	bf00      	nop
 800ebc6:	bf00      	nop
 800ebc8:	3730      	adds	r7, #48	; 0x30
 800ebca:	46bd      	mov	sp, r7
 800ebcc:	bdb0      	pop	{r4, r5, r7, pc}
 800ebce:	bf00      	nop
 800ebd0:	0801ead0 	.word	0x0801ead0
 800ebd4:	0801ef60 	.word	0x0801ef60
 800ebd8:	0801eb14 	.word	0x0801eb14
 800ebdc:	20007154 	.word	0x20007154
 800ebe0:	20007160 	.word	0x20007160
 800ebe4:	0801ef90 	.word	0x0801ef90
 800ebe8:	0801efb8 	.word	0x0801efb8

0800ebec <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800ebec:	b580      	push	{r7, lr}
 800ebee:	b082      	sub	sp, #8
 800ebf0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800ebf2:	4b2d      	ldr	r3, [pc, #180]	; (800eca8 <tcp_fasttmr+0xbc>)
 800ebf4:	781b      	ldrb	r3, [r3, #0]
 800ebf6:	3301      	adds	r3, #1
 800ebf8:	b2da      	uxtb	r2, r3
 800ebfa:	4b2b      	ldr	r3, [pc, #172]	; (800eca8 <tcp_fasttmr+0xbc>)
 800ebfc:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800ebfe:	4b2b      	ldr	r3, [pc, #172]	; (800ecac <tcp_fasttmr+0xc0>)
 800ec00:	681b      	ldr	r3, [r3, #0]
 800ec02:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800ec04:	e048      	b.n	800ec98 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	7f9a      	ldrb	r2, [r3, #30]
 800ec0a:	4b27      	ldr	r3, [pc, #156]	; (800eca8 <tcp_fasttmr+0xbc>)
 800ec0c:	781b      	ldrb	r3, [r3, #0]
 800ec0e:	429a      	cmp	r2, r3
 800ec10:	d03f      	beq.n	800ec92 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800ec12:	4b25      	ldr	r3, [pc, #148]	; (800eca8 <tcp_fasttmr+0xbc>)
 800ec14:	781a      	ldrb	r2, [r3, #0]
 800ec16:	687b      	ldr	r3, [r7, #4]
 800ec18:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	8b5b      	ldrh	r3, [r3, #26]
 800ec1e:	f003 0301 	and.w	r3, r3, #1
 800ec22:	2b00      	cmp	r3, #0
 800ec24:	d010      	beq.n	800ec48 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	8b5b      	ldrh	r3, [r3, #26]
 800ec2a:	f043 0302 	orr.w	r3, r3, #2
 800ec2e:	b29a      	uxth	r2, r3
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800ec34:	6878      	ldr	r0, [r7, #4]
 800ec36:	f003 facb 	bl	80121d0 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	8b5b      	ldrh	r3, [r3, #26]
 800ec3e:	f023 0303 	bic.w	r3, r3, #3
 800ec42:	b29a      	uxth	r2, r3
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	8b5b      	ldrh	r3, [r3, #26]
 800ec4c:	f003 0308 	and.w	r3, r3, #8
 800ec50:	2b00      	cmp	r3, #0
 800ec52:	d009      	beq.n	800ec68 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	8b5b      	ldrh	r3, [r3, #26]
 800ec58:	f023 0308 	bic.w	r3, r3, #8
 800ec5c:	b29a      	uxth	r2, r3
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800ec62:	6878      	ldr	r0, [r7, #4]
 800ec64:	f7ff fa78 	bl	800e158 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	68db      	ldr	r3, [r3, #12]
 800ec6c:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ec72:	2b00      	cmp	r3, #0
 800ec74:	d00a      	beq.n	800ec8c <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800ec76:	4b0e      	ldr	r3, [pc, #56]	; (800ecb0 <tcp_fasttmr+0xc4>)
 800ec78:	2200      	movs	r2, #0
 800ec7a:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800ec7c:	6878      	ldr	r0, [r7, #4]
 800ec7e:	f000 f819 	bl	800ecb4 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800ec82:	4b0b      	ldr	r3, [pc, #44]	; (800ecb0 <tcp_fasttmr+0xc4>)
 800ec84:	781b      	ldrb	r3, [r3, #0]
 800ec86:	2b00      	cmp	r3, #0
 800ec88:	d000      	beq.n	800ec8c <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800ec8a:	e7b8      	b.n	800ebfe <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800ec8c:	683b      	ldr	r3, [r7, #0]
 800ec8e:	607b      	str	r3, [r7, #4]
 800ec90:	e002      	b.n	800ec98 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	68db      	ldr	r3, [r3, #12]
 800ec96:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	2b00      	cmp	r3, #0
 800ec9c:	d1b3      	bne.n	800ec06 <tcp_fasttmr+0x1a>
    }
  }
}
 800ec9e:	bf00      	nop
 800eca0:	bf00      	nop
 800eca2:	3708      	adds	r7, #8
 800eca4:	46bd      	mov	sp, r7
 800eca6:	bd80      	pop	{r7, pc}
 800eca8:	2000049a 	.word	0x2000049a
 800ecac:	20007150 	.word	0x20007150
 800ecb0:	2000714c 	.word	0x2000714c

0800ecb4 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800ecb4:	b590      	push	{r4, r7, lr}
 800ecb6:	b085      	sub	sp, #20
 800ecb8:	af00      	add	r7, sp, #0
 800ecba:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	2b00      	cmp	r3, #0
 800ecc0:	d109      	bne.n	800ecd6 <tcp_process_refused_data+0x22>
 800ecc2:	4b37      	ldr	r3, [pc, #220]	; (800eda0 <tcp_process_refused_data+0xec>)
 800ecc4:	f240 6209 	movw	r2, #1545	; 0x609
 800ecc8:	4936      	ldr	r1, [pc, #216]	; (800eda4 <tcp_process_refused_data+0xf0>)
 800ecca:	4837      	ldr	r0, [pc, #220]	; (800eda8 <tcp_process_refused_data+0xf4>)
 800eccc:	f009 fe7e 	bl	80189cc <iprintf>
 800ecd0:	f06f 030f 	mvn.w	r3, #15
 800ecd4:	e060      	b.n	800ed98 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ecda:	7b5b      	ldrb	r3, [r3, #13]
 800ecdc:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ece2:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800ece4:	687b      	ldr	r3, [r7, #4]
 800ece6:	2200      	movs	r2, #0
 800ece8:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800ecea:	687b      	ldr	r3, [r7, #4]
 800ecec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ecf0:	2b00      	cmp	r3, #0
 800ecf2:	d00b      	beq.n	800ed0c <tcp_process_refused_data+0x58>
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800ecfa:	687b      	ldr	r3, [r7, #4]
 800ecfc:	6918      	ldr	r0, [r3, #16]
 800ecfe:	2300      	movs	r3, #0
 800ed00:	68ba      	ldr	r2, [r7, #8]
 800ed02:	6879      	ldr	r1, [r7, #4]
 800ed04:	47a0      	blx	r4
 800ed06:	4603      	mov	r3, r0
 800ed08:	73fb      	strb	r3, [r7, #15]
 800ed0a:	e007      	b.n	800ed1c <tcp_process_refused_data+0x68>
 800ed0c:	2300      	movs	r3, #0
 800ed0e:	68ba      	ldr	r2, [r7, #8]
 800ed10:	6879      	ldr	r1, [r7, #4]
 800ed12:	2000      	movs	r0, #0
 800ed14:	f000 f8a4 	bl	800ee60 <tcp_recv_null>
 800ed18:	4603      	mov	r3, r0
 800ed1a:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800ed1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ed20:	2b00      	cmp	r3, #0
 800ed22:	d12a      	bne.n	800ed7a <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800ed24:	7bbb      	ldrb	r3, [r7, #14]
 800ed26:	f003 0320 	and.w	r3, r3, #32
 800ed2a:	2b00      	cmp	r3, #0
 800ed2c:	d033      	beq.n	800ed96 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ed32:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ed36:	d005      	beq.n	800ed44 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ed3c:	3301      	adds	r3, #1
 800ed3e:	b29a      	uxth	r2, r3
 800ed40:	687b      	ldr	r3, [r7, #4]
 800ed42:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ed4a:	2b00      	cmp	r3, #0
 800ed4c:	d00b      	beq.n	800ed66 <tcp_process_refused_data+0xb2>
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	6918      	ldr	r0, [r3, #16]
 800ed58:	2300      	movs	r3, #0
 800ed5a:	2200      	movs	r2, #0
 800ed5c:	6879      	ldr	r1, [r7, #4]
 800ed5e:	47a0      	blx	r4
 800ed60:	4603      	mov	r3, r0
 800ed62:	73fb      	strb	r3, [r7, #15]
 800ed64:	e001      	b.n	800ed6a <tcp_process_refused_data+0xb6>
 800ed66:	2300      	movs	r3, #0
 800ed68:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800ed6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ed6e:	f113 0f0d 	cmn.w	r3, #13
 800ed72:	d110      	bne.n	800ed96 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800ed74:	f06f 030c 	mvn.w	r3, #12
 800ed78:	e00e      	b.n	800ed98 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800ed7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ed7e:	f113 0f0d 	cmn.w	r3, #13
 800ed82:	d102      	bne.n	800ed8a <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800ed84:	f06f 030c 	mvn.w	r3, #12
 800ed88:	e006      	b.n	800ed98 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	68ba      	ldr	r2, [r7, #8]
 800ed8e:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800ed90:	f06f 0304 	mvn.w	r3, #4
 800ed94:	e000      	b.n	800ed98 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800ed96:	2300      	movs	r3, #0
}
 800ed98:	4618      	mov	r0, r3
 800ed9a:	3714      	adds	r7, #20
 800ed9c:	46bd      	mov	sp, r7
 800ed9e:	bd90      	pop	{r4, r7, pc}
 800eda0:	0801ead0 	.word	0x0801ead0
 800eda4:	0801efe0 	.word	0x0801efe0
 800eda8:	0801eb14 	.word	0x0801eb14

0800edac <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800edac:	b580      	push	{r7, lr}
 800edae:	b084      	sub	sp, #16
 800edb0:	af00      	add	r7, sp, #0
 800edb2:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800edb4:	e007      	b.n	800edc6 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	681b      	ldr	r3, [r3, #0]
 800edba:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800edbc:	6878      	ldr	r0, [r7, #4]
 800edbe:	f000 f80a 	bl	800edd6 <tcp_seg_free>
    seg = next;
 800edc2:	68fb      	ldr	r3, [r7, #12]
 800edc4:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	2b00      	cmp	r3, #0
 800edca:	d1f4      	bne.n	800edb6 <tcp_segs_free+0xa>
  }
}
 800edcc:	bf00      	nop
 800edce:	bf00      	nop
 800edd0:	3710      	adds	r7, #16
 800edd2:	46bd      	mov	sp, r7
 800edd4:	bd80      	pop	{r7, pc}

0800edd6 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800edd6:	b580      	push	{r7, lr}
 800edd8:	b082      	sub	sp, #8
 800edda:	af00      	add	r7, sp, #0
 800eddc:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	2b00      	cmp	r3, #0
 800ede2:	d00c      	beq.n	800edfe <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	685b      	ldr	r3, [r3, #4]
 800ede8:	2b00      	cmp	r3, #0
 800edea:	d004      	beq.n	800edf6 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	685b      	ldr	r3, [r3, #4]
 800edf0:	4618      	mov	r0, r3
 800edf2:	f7fe fd6d 	bl	800d8d0 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800edf6:	6879      	ldr	r1, [r7, #4]
 800edf8:	2003      	movs	r0, #3
 800edfa:	f7fd ff6f 	bl	800ccdc <memp_free>
  }
}
 800edfe:	bf00      	nop
 800ee00:	3708      	adds	r7, #8
 800ee02:	46bd      	mov	sp, r7
 800ee04:	bd80      	pop	{r7, pc}
	...

0800ee08 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800ee08:	b580      	push	{r7, lr}
 800ee0a:	b084      	sub	sp, #16
 800ee0c:	af00      	add	r7, sp, #0
 800ee0e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	2b00      	cmp	r3, #0
 800ee14:	d106      	bne.n	800ee24 <tcp_seg_copy+0x1c>
 800ee16:	4b0f      	ldr	r3, [pc, #60]	; (800ee54 <tcp_seg_copy+0x4c>)
 800ee18:	f240 6282 	movw	r2, #1666	; 0x682
 800ee1c:	490e      	ldr	r1, [pc, #56]	; (800ee58 <tcp_seg_copy+0x50>)
 800ee1e:	480f      	ldr	r0, [pc, #60]	; (800ee5c <tcp_seg_copy+0x54>)
 800ee20:	f009 fdd4 	bl	80189cc <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800ee24:	2003      	movs	r0, #3
 800ee26:	f7fd ff0d 	bl	800cc44 <memp_malloc>
 800ee2a:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800ee2c:	68fb      	ldr	r3, [r7, #12]
 800ee2e:	2b00      	cmp	r3, #0
 800ee30:	d101      	bne.n	800ee36 <tcp_seg_copy+0x2e>
    return NULL;
 800ee32:	2300      	movs	r3, #0
 800ee34:	e00a      	b.n	800ee4c <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800ee36:	2210      	movs	r2, #16
 800ee38:	6879      	ldr	r1, [r7, #4]
 800ee3a:	68f8      	ldr	r0, [r7, #12]
 800ee3c:	f009 f882 	bl	8017f44 <memcpy>
  pbuf_ref(cseg->p);
 800ee40:	68fb      	ldr	r3, [r7, #12]
 800ee42:	685b      	ldr	r3, [r3, #4]
 800ee44:	4618      	mov	r0, r3
 800ee46:	f7fe fde3 	bl	800da10 <pbuf_ref>
  return cseg;
 800ee4a:	68fb      	ldr	r3, [r7, #12]
}
 800ee4c:	4618      	mov	r0, r3
 800ee4e:	3710      	adds	r7, #16
 800ee50:	46bd      	mov	sp, r7
 800ee52:	bd80      	pop	{r7, pc}
 800ee54:	0801ead0 	.word	0x0801ead0
 800ee58:	0801f024 	.word	0x0801f024
 800ee5c:	0801eb14 	.word	0x0801eb14

0800ee60 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800ee60:	b580      	push	{r7, lr}
 800ee62:	b084      	sub	sp, #16
 800ee64:	af00      	add	r7, sp, #0
 800ee66:	60f8      	str	r0, [r7, #12]
 800ee68:	60b9      	str	r1, [r7, #8]
 800ee6a:	607a      	str	r2, [r7, #4]
 800ee6c:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800ee6e:	68bb      	ldr	r3, [r7, #8]
 800ee70:	2b00      	cmp	r3, #0
 800ee72:	d109      	bne.n	800ee88 <tcp_recv_null+0x28>
 800ee74:	4b12      	ldr	r3, [pc, #72]	; (800eec0 <tcp_recv_null+0x60>)
 800ee76:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800ee7a:	4912      	ldr	r1, [pc, #72]	; (800eec4 <tcp_recv_null+0x64>)
 800ee7c:	4812      	ldr	r0, [pc, #72]	; (800eec8 <tcp_recv_null+0x68>)
 800ee7e:	f009 fda5 	bl	80189cc <iprintf>
 800ee82:	f06f 030f 	mvn.w	r3, #15
 800ee86:	e016      	b.n	800eeb6 <tcp_recv_null+0x56>

  if (p != NULL) {
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	2b00      	cmp	r3, #0
 800ee8c:	d009      	beq.n	800eea2 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800ee8e:	687b      	ldr	r3, [r7, #4]
 800ee90:	891b      	ldrh	r3, [r3, #8]
 800ee92:	4619      	mov	r1, r3
 800ee94:	68b8      	ldr	r0, [r7, #8]
 800ee96:	f7ff fb19 	bl	800e4cc <tcp_recved>
    pbuf_free(p);
 800ee9a:	6878      	ldr	r0, [r7, #4]
 800ee9c:	f7fe fd18 	bl	800d8d0 <pbuf_free>
 800eea0:	e008      	b.n	800eeb4 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800eea2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800eea6:	2b00      	cmp	r3, #0
 800eea8:	d104      	bne.n	800eeb4 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800eeaa:	68b8      	ldr	r0, [r7, #8]
 800eeac:	f7ff f9be 	bl	800e22c <tcp_close>
 800eeb0:	4603      	mov	r3, r0
 800eeb2:	e000      	b.n	800eeb6 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800eeb4:	2300      	movs	r3, #0
}
 800eeb6:	4618      	mov	r0, r3
 800eeb8:	3710      	adds	r7, #16
 800eeba:	46bd      	mov	sp, r7
 800eebc:	bd80      	pop	{r7, pc}
 800eebe:	bf00      	nop
 800eec0:	0801ead0 	.word	0x0801ead0
 800eec4:	0801f040 	.word	0x0801f040
 800eec8:	0801eb14 	.word	0x0801eb14

0800eecc <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800eecc:	b580      	push	{r7, lr}
 800eece:	b086      	sub	sp, #24
 800eed0:	af00      	add	r7, sp, #0
 800eed2:	4603      	mov	r3, r0
 800eed4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800eed6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800eeda:	2b00      	cmp	r3, #0
 800eedc:	db01      	blt.n	800eee2 <tcp_kill_prio+0x16>
 800eede:	79fb      	ldrb	r3, [r7, #7]
 800eee0:	e000      	b.n	800eee4 <tcp_kill_prio+0x18>
 800eee2:	237f      	movs	r3, #127	; 0x7f
 800eee4:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800eee6:	7afb      	ldrb	r3, [r7, #11]
 800eee8:	2b00      	cmp	r3, #0
 800eeea:	d034      	beq.n	800ef56 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800eeec:	7afb      	ldrb	r3, [r7, #11]
 800eeee:	3b01      	subs	r3, #1
 800eef0:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800eef2:	2300      	movs	r3, #0
 800eef4:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800eef6:	2300      	movs	r3, #0
 800eef8:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800eefa:	4b19      	ldr	r3, [pc, #100]	; (800ef60 <tcp_kill_prio+0x94>)
 800eefc:	681b      	ldr	r3, [r3, #0]
 800eefe:	617b      	str	r3, [r7, #20]
 800ef00:	e01f      	b.n	800ef42 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800ef02:	697b      	ldr	r3, [r7, #20]
 800ef04:	7d5b      	ldrb	r3, [r3, #21]
 800ef06:	7afa      	ldrb	r2, [r7, #11]
 800ef08:	429a      	cmp	r2, r3
 800ef0a:	d80c      	bhi.n	800ef26 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800ef0c:	697b      	ldr	r3, [r7, #20]
 800ef0e:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800ef10:	7afa      	ldrb	r2, [r7, #11]
 800ef12:	429a      	cmp	r2, r3
 800ef14:	d112      	bne.n	800ef3c <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800ef16:	4b13      	ldr	r3, [pc, #76]	; (800ef64 <tcp_kill_prio+0x98>)
 800ef18:	681a      	ldr	r2, [r3, #0]
 800ef1a:	697b      	ldr	r3, [r7, #20]
 800ef1c:	6a1b      	ldr	r3, [r3, #32]
 800ef1e:	1ad3      	subs	r3, r2, r3
 800ef20:	68fa      	ldr	r2, [r7, #12]
 800ef22:	429a      	cmp	r2, r3
 800ef24:	d80a      	bhi.n	800ef3c <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800ef26:	4b0f      	ldr	r3, [pc, #60]	; (800ef64 <tcp_kill_prio+0x98>)
 800ef28:	681a      	ldr	r2, [r3, #0]
 800ef2a:	697b      	ldr	r3, [r7, #20]
 800ef2c:	6a1b      	ldr	r3, [r3, #32]
 800ef2e:	1ad3      	subs	r3, r2, r3
 800ef30:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800ef32:	697b      	ldr	r3, [r7, #20]
 800ef34:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800ef36:	697b      	ldr	r3, [r7, #20]
 800ef38:	7d5b      	ldrb	r3, [r3, #21]
 800ef3a:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ef3c:	697b      	ldr	r3, [r7, #20]
 800ef3e:	68db      	ldr	r3, [r3, #12]
 800ef40:	617b      	str	r3, [r7, #20]
 800ef42:	697b      	ldr	r3, [r7, #20]
 800ef44:	2b00      	cmp	r3, #0
 800ef46:	d1dc      	bne.n	800ef02 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800ef48:	693b      	ldr	r3, [r7, #16]
 800ef4a:	2b00      	cmp	r3, #0
 800ef4c:	d004      	beq.n	800ef58 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800ef4e:	6938      	ldr	r0, [r7, #16]
 800ef50:	f7ff fa56 	bl	800e400 <tcp_abort>
 800ef54:	e000      	b.n	800ef58 <tcp_kill_prio+0x8c>
    return;
 800ef56:	bf00      	nop
  }
}
 800ef58:	3718      	adds	r7, #24
 800ef5a:	46bd      	mov	sp, r7
 800ef5c:	bd80      	pop	{r7, pc}
 800ef5e:	bf00      	nop
 800ef60:	20007150 	.word	0x20007150
 800ef64:	20007154 	.word	0x20007154

0800ef68 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800ef68:	b580      	push	{r7, lr}
 800ef6a:	b086      	sub	sp, #24
 800ef6c:	af00      	add	r7, sp, #0
 800ef6e:	4603      	mov	r3, r0
 800ef70:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800ef72:	79fb      	ldrb	r3, [r7, #7]
 800ef74:	2b08      	cmp	r3, #8
 800ef76:	d009      	beq.n	800ef8c <tcp_kill_state+0x24>
 800ef78:	79fb      	ldrb	r3, [r7, #7]
 800ef7a:	2b09      	cmp	r3, #9
 800ef7c:	d006      	beq.n	800ef8c <tcp_kill_state+0x24>
 800ef7e:	4b1a      	ldr	r3, [pc, #104]	; (800efe8 <tcp_kill_state+0x80>)
 800ef80:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800ef84:	4919      	ldr	r1, [pc, #100]	; (800efec <tcp_kill_state+0x84>)
 800ef86:	481a      	ldr	r0, [pc, #104]	; (800eff0 <tcp_kill_state+0x88>)
 800ef88:	f009 fd20 	bl	80189cc <iprintf>

  inactivity = 0;
 800ef8c:	2300      	movs	r3, #0
 800ef8e:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800ef90:	2300      	movs	r3, #0
 800ef92:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ef94:	4b17      	ldr	r3, [pc, #92]	; (800eff4 <tcp_kill_state+0x8c>)
 800ef96:	681b      	ldr	r3, [r3, #0]
 800ef98:	617b      	str	r3, [r7, #20]
 800ef9a:	e017      	b.n	800efcc <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800ef9c:	697b      	ldr	r3, [r7, #20]
 800ef9e:	7d1b      	ldrb	r3, [r3, #20]
 800efa0:	79fa      	ldrb	r2, [r7, #7]
 800efa2:	429a      	cmp	r2, r3
 800efa4:	d10f      	bne.n	800efc6 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800efa6:	4b14      	ldr	r3, [pc, #80]	; (800eff8 <tcp_kill_state+0x90>)
 800efa8:	681a      	ldr	r2, [r3, #0]
 800efaa:	697b      	ldr	r3, [r7, #20]
 800efac:	6a1b      	ldr	r3, [r3, #32]
 800efae:	1ad3      	subs	r3, r2, r3
 800efb0:	68fa      	ldr	r2, [r7, #12]
 800efb2:	429a      	cmp	r2, r3
 800efb4:	d807      	bhi.n	800efc6 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800efb6:	4b10      	ldr	r3, [pc, #64]	; (800eff8 <tcp_kill_state+0x90>)
 800efb8:	681a      	ldr	r2, [r3, #0]
 800efba:	697b      	ldr	r3, [r7, #20]
 800efbc:	6a1b      	ldr	r3, [r3, #32]
 800efbe:	1ad3      	subs	r3, r2, r3
 800efc0:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800efc2:	697b      	ldr	r3, [r7, #20]
 800efc4:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800efc6:	697b      	ldr	r3, [r7, #20]
 800efc8:	68db      	ldr	r3, [r3, #12]
 800efca:	617b      	str	r3, [r7, #20]
 800efcc:	697b      	ldr	r3, [r7, #20]
 800efce:	2b00      	cmp	r3, #0
 800efd0:	d1e4      	bne.n	800ef9c <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800efd2:	693b      	ldr	r3, [r7, #16]
 800efd4:	2b00      	cmp	r3, #0
 800efd6:	d003      	beq.n	800efe0 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800efd8:	2100      	movs	r1, #0
 800efda:	6938      	ldr	r0, [r7, #16]
 800efdc:	f7ff f952 	bl	800e284 <tcp_abandon>
  }
}
 800efe0:	bf00      	nop
 800efe2:	3718      	adds	r7, #24
 800efe4:	46bd      	mov	sp, r7
 800efe6:	bd80      	pop	{r7, pc}
 800efe8:	0801ead0 	.word	0x0801ead0
 800efec:	0801f05c 	.word	0x0801f05c
 800eff0:	0801eb14 	.word	0x0801eb14
 800eff4:	20007150 	.word	0x20007150
 800eff8:	20007154 	.word	0x20007154

0800effc <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800effc:	b580      	push	{r7, lr}
 800effe:	b084      	sub	sp, #16
 800f000:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800f002:	2300      	movs	r3, #0
 800f004:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800f006:	2300      	movs	r3, #0
 800f008:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f00a:	4b12      	ldr	r3, [pc, #72]	; (800f054 <tcp_kill_timewait+0x58>)
 800f00c:	681b      	ldr	r3, [r3, #0]
 800f00e:	60fb      	str	r3, [r7, #12]
 800f010:	e012      	b.n	800f038 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800f012:	4b11      	ldr	r3, [pc, #68]	; (800f058 <tcp_kill_timewait+0x5c>)
 800f014:	681a      	ldr	r2, [r3, #0]
 800f016:	68fb      	ldr	r3, [r7, #12]
 800f018:	6a1b      	ldr	r3, [r3, #32]
 800f01a:	1ad3      	subs	r3, r2, r3
 800f01c:	687a      	ldr	r2, [r7, #4]
 800f01e:	429a      	cmp	r2, r3
 800f020:	d807      	bhi.n	800f032 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800f022:	4b0d      	ldr	r3, [pc, #52]	; (800f058 <tcp_kill_timewait+0x5c>)
 800f024:	681a      	ldr	r2, [r3, #0]
 800f026:	68fb      	ldr	r3, [r7, #12]
 800f028:	6a1b      	ldr	r3, [r3, #32]
 800f02a:	1ad3      	subs	r3, r2, r3
 800f02c:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800f02e:	68fb      	ldr	r3, [r7, #12]
 800f030:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f032:	68fb      	ldr	r3, [r7, #12]
 800f034:	68db      	ldr	r3, [r3, #12]
 800f036:	60fb      	str	r3, [r7, #12]
 800f038:	68fb      	ldr	r3, [r7, #12]
 800f03a:	2b00      	cmp	r3, #0
 800f03c:	d1e9      	bne.n	800f012 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800f03e:	68bb      	ldr	r3, [r7, #8]
 800f040:	2b00      	cmp	r3, #0
 800f042:	d002      	beq.n	800f04a <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800f044:	68b8      	ldr	r0, [r7, #8]
 800f046:	f7ff f9db 	bl	800e400 <tcp_abort>
  }
}
 800f04a:	bf00      	nop
 800f04c:	3710      	adds	r7, #16
 800f04e:	46bd      	mov	sp, r7
 800f050:	bd80      	pop	{r7, pc}
 800f052:	bf00      	nop
 800f054:	20007160 	.word	0x20007160
 800f058:	20007154 	.word	0x20007154

0800f05c <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800f05c:	b580      	push	{r7, lr}
 800f05e:	b082      	sub	sp, #8
 800f060:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800f062:	4b10      	ldr	r3, [pc, #64]	; (800f0a4 <tcp_handle_closepend+0x48>)
 800f064:	681b      	ldr	r3, [r3, #0]
 800f066:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800f068:	e014      	b.n	800f094 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	68db      	ldr	r3, [r3, #12]
 800f06e:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	8b5b      	ldrh	r3, [r3, #26]
 800f074:	f003 0308 	and.w	r3, r3, #8
 800f078:	2b00      	cmp	r3, #0
 800f07a:	d009      	beq.n	800f090 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800f07c:	687b      	ldr	r3, [r7, #4]
 800f07e:	8b5b      	ldrh	r3, [r3, #26]
 800f080:	f023 0308 	bic.w	r3, r3, #8
 800f084:	b29a      	uxth	r2, r3
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800f08a:	6878      	ldr	r0, [r7, #4]
 800f08c:	f7ff f864 	bl	800e158 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800f090:	683b      	ldr	r3, [r7, #0]
 800f092:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	2b00      	cmp	r3, #0
 800f098:	d1e7      	bne.n	800f06a <tcp_handle_closepend+0xe>
  }
}
 800f09a:	bf00      	nop
 800f09c:	bf00      	nop
 800f09e:	3708      	adds	r7, #8
 800f0a0:	46bd      	mov	sp, r7
 800f0a2:	bd80      	pop	{r7, pc}
 800f0a4:	20007150 	.word	0x20007150

0800f0a8 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800f0a8:	b580      	push	{r7, lr}
 800f0aa:	b084      	sub	sp, #16
 800f0ac:	af00      	add	r7, sp, #0
 800f0ae:	4603      	mov	r3, r0
 800f0b0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f0b2:	2001      	movs	r0, #1
 800f0b4:	f7fd fdc6 	bl	800cc44 <memp_malloc>
 800f0b8:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800f0ba:	68fb      	ldr	r3, [r7, #12]
 800f0bc:	2b00      	cmp	r3, #0
 800f0be:	d126      	bne.n	800f10e <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800f0c0:	f7ff ffcc 	bl	800f05c <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800f0c4:	f7ff ff9a 	bl	800effc <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f0c8:	2001      	movs	r0, #1
 800f0ca:	f7fd fdbb 	bl	800cc44 <memp_malloc>
 800f0ce:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800f0d0:	68fb      	ldr	r3, [r7, #12]
 800f0d2:	2b00      	cmp	r3, #0
 800f0d4:	d11b      	bne.n	800f10e <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800f0d6:	2009      	movs	r0, #9
 800f0d8:	f7ff ff46 	bl	800ef68 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f0dc:	2001      	movs	r0, #1
 800f0de:	f7fd fdb1 	bl	800cc44 <memp_malloc>
 800f0e2:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800f0e4:	68fb      	ldr	r3, [r7, #12]
 800f0e6:	2b00      	cmp	r3, #0
 800f0e8:	d111      	bne.n	800f10e <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800f0ea:	2008      	movs	r0, #8
 800f0ec:	f7ff ff3c 	bl	800ef68 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f0f0:	2001      	movs	r0, #1
 800f0f2:	f7fd fda7 	bl	800cc44 <memp_malloc>
 800f0f6:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800f0f8:	68fb      	ldr	r3, [r7, #12]
 800f0fa:	2b00      	cmp	r3, #0
 800f0fc:	d107      	bne.n	800f10e <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800f0fe:	79fb      	ldrb	r3, [r7, #7]
 800f100:	4618      	mov	r0, r3
 800f102:	f7ff fee3 	bl	800eecc <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f106:	2001      	movs	r0, #1
 800f108:	f7fd fd9c 	bl	800cc44 <memp_malloc>
 800f10c:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800f10e:	68fb      	ldr	r3, [r7, #12]
 800f110:	2b00      	cmp	r3, #0
 800f112:	d03f      	beq.n	800f194 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800f114:	229c      	movs	r2, #156	; 0x9c
 800f116:	2100      	movs	r1, #0
 800f118:	68f8      	ldr	r0, [r7, #12]
 800f11a:	f008 ff3b 	bl	8017f94 <memset>
    pcb->prio = prio;
 800f11e:	68fb      	ldr	r3, [r7, #12]
 800f120:	79fa      	ldrb	r2, [r7, #7]
 800f122:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800f124:	68fb      	ldr	r3, [r7, #12]
 800f126:	f44f 62e6 	mov.w	r2, #1840	; 0x730
 800f12a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800f12e:	68fb      	ldr	r3, [r7, #12]
 800f130:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f134:	855a      	strh	r2, [r3, #42]	; 0x2a
 800f136:	68fb      	ldr	r3, [r7, #12]
 800f138:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800f13a:	68fb      	ldr	r3, [r7, #12]
 800f13c:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800f13e:	68fb      	ldr	r3, [r7, #12]
 800f140:	22ff      	movs	r2, #255	; 0xff
 800f142:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800f144:	68fb      	ldr	r3, [r7, #12]
 800f146:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800f14a:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800f14c:	68fb      	ldr	r3, [r7, #12]
 800f14e:	2206      	movs	r2, #6
 800f150:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800f154:	68fb      	ldr	r3, [r7, #12]
 800f156:	2206      	movs	r2, #6
 800f158:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800f15a:	68fb      	ldr	r3, [r7, #12]
 800f15c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f160:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800f162:	68fb      	ldr	r3, [r7, #12]
 800f164:	2201      	movs	r2, #1
 800f166:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800f16a:	4b0d      	ldr	r3, [pc, #52]	; (800f1a0 <tcp_alloc+0xf8>)
 800f16c:	681a      	ldr	r2, [r3, #0]
 800f16e:	68fb      	ldr	r3, [r7, #12]
 800f170:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800f172:	4b0c      	ldr	r3, [pc, #48]	; (800f1a4 <tcp_alloc+0xfc>)
 800f174:	781a      	ldrb	r2, [r3, #0]
 800f176:	68fb      	ldr	r3, [r7, #12]
 800f178:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800f17a:	68fb      	ldr	r3, [r7, #12]
 800f17c:	f44f 62e6 	mov.w	r2, #1840	; 0x730
 800f180:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800f184:	68fb      	ldr	r3, [r7, #12]
 800f186:	4a08      	ldr	r2, [pc, #32]	; (800f1a8 <tcp_alloc+0x100>)
 800f188:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800f18c:	68fb      	ldr	r3, [r7, #12]
 800f18e:	4a07      	ldr	r2, [pc, #28]	; (800f1ac <tcp_alloc+0x104>)
 800f190:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800f194:	68fb      	ldr	r3, [r7, #12]
}
 800f196:	4618      	mov	r0, r3
 800f198:	3710      	adds	r7, #16
 800f19a:	46bd      	mov	sp, r7
 800f19c:	bd80      	pop	{r7, pc}
 800f19e:	bf00      	nop
 800f1a0:	20007154 	.word	0x20007154
 800f1a4:	2000049a 	.word	0x2000049a
 800f1a8:	0800ee61 	.word	0x0800ee61
 800f1ac:	006ddd00 	.word	0x006ddd00

0800f1b0 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800f1b0:	b580      	push	{r7, lr}
 800f1b2:	b082      	sub	sp, #8
 800f1b4:	af00      	add	r7, sp, #0
 800f1b6:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	2b00      	cmp	r3, #0
 800f1bc:	d107      	bne.n	800f1ce <tcp_pcb_purge+0x1e>
 800f1be:	4b21      	ldr	r3, [pc, #132]	; (800f244 <tcp_pcb_purge+0x94>)
 800f1c0:	f640 0251 	movw	r2, #2129	; 0x851
 800f1c4:	4920      	ldr	r1, [pc, #128]	; (800f248 <tcp_pcb_purge+0x98>)
 800f1c6:	4821      	ldr	r0, [pc, #132]	; (800f24c <tcp_pcb_purge+0x9c>)
 800f1c8:	f009 fc00 	bl	80189cc <iprintf>
 800f1cc:	e037      	b.n	800f23e <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	7d1b      	ldrb	r3, [r3, #20]
 800f1d2:	2b00      	cmp	r3, #0
 800f1d4:	d033      	beq.n	800f23e <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800f1d6:	687b      	ldr	r3, [r7, #4]
 800f1d8:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800f1da:	2b0a      	cmp	r3, #10
 800f1dc:	d02f      	beq.n	800f23e <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800f1de:	687b      	ldr	r3, [r7, #4]
 800f1e0:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800f1e2:	2b01      	cmp	r3, #1
 800f1e4:	d02b      	beq.n	800f23e <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800f1e6:	687b      	ldr	r3, [r7, #4]
 800f1e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f1ea:	2b00      	cmp	r3, #0
 800f1ec:	d007      	beq.n	800f1fe <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f1f2:	4618      	mov	r0, r3
 800f1f4:	f7fe fb6c 	bl	800d8d0 <pbuf_free>
      pcb->refused_data = NULL;
 800f1f8:	687b      	ldr	r3, [r7, #4]
 800f1fa:	2200      	movs	r2, #0
 800f1fc:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800f1fe:	687b      	ldr	r3, [r7, #4]
 800f200:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f202:	2b00      	cmp	r3, #0
 800f204:	d002      	beq.n	800f20c <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800f206:	6878      	ldr	r0, [r7, #4]
 800f208:	f000 f986 	bl	800f518 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f212:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f218:	4618      	mov	r0, r3
 800f21a:	f7ff fdc7 	bl	800edac <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800f21e:	687b      	ldr	r3, [r7, #4]
 800f220:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f222:	4618      	mov	r0, r3
 800f224:	f7ff fdc2 	bl	800edac <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	2200      	movs	r2, #0
 800f22c:	66da      	str	r2, [r3, #108]	; 0x6c
 800f22e:	687b      	ldr	r3, [r7, #4]
 800f230:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800f232:	687b      	ldr	r3, [r7, #4]
 800f234:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	2200      	movs	r2, #0
 800f23a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800f23e:	3708      	adds	r7, #8
 800f240:	46bd      	mov	sp, r7
 800f242:	bd80      	pop	{r7, pc}
 800f244:	0801ead0 	.word	0x0801ead0
 800f248:	0801f11c 	.word	0x0801f11c
 800f24c:	0801eb14 	.word	0x0801eb14

0800f250 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800f250:	b580      	push	{r7, lr}
 800f252:	b084      	sub	sp, #16
 800f254:	af00      	add	r7, sp, #0
 800f256:	6078      	str	r0, [r7, #4]
 800f258:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800f25a:	683b      	ldr	r3, [r7, #0]
 800f25c:	2b00      	cmp	r3, #0
 800f25e:	d106      	bne.n	800f26e <tcp_pcb_remove+0x1e>
 800f260:	4b3e      	ldr	r3, [pc, #248]	; (800f35c <tcp_pcb_remove+0x10c>)
 800f262:	f640 0283 	movw	r2, #2179	; 0x883
 800f266:	493e      	ldr	r1, [pc, #248]	; (800f360 <tcp_pcb_remove+0x110>)
 800f268:	483e      	ldr	r0, [pc, #248]	; (800f364 <tcp_pcb_remove+0x114>)
 800f26a:	f009 fbaf 	bl	80189cc <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	2b00      	cmp	r3, #0
 800f272:	d106      	bne.n	800f282 <tcp_pcb_remove+0x32>
 800f274:	4b39      	ldr	r3, [pc, #228]	; (800f35c <tcp_pcb_remove+0x10c>)
 800f276:	f640 0284 	movw	r2, #2180	; 0x884
 800f27a:	493b      	ldr	r1, [pc, #236]	; (800f368 <tcp_pcb_remove+0x118>)
 800f27c:	4839      	ldr	r0, [pc, #228]	; (800f364 <tcp_pcb_remove+0x114>)
 800f27e:	f009 fba5 	bl	80189cc <iprintf>

  TCP_RMV(pcblist, pcb);
 800f282:	687b      	ldr	r3, [r7, #4]
 800f284:	681b      	ldr	r3, [r3, #0]
 800f286:	683a      	ldr	r2, [r7, #0]
 800f288:	429a      	cmp	r2, r3
 800f28a:	d105      	bne.n	800f298 <tcp_pcb_remove+0x48>
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	681b      	ldr	r3, [r3, #0]
 800f290:	68da      	ldr	r2, [r3, #12]
 800f292:	687b      	ldr	r3, [r7, #4]
 800f294:	601a      	str	r2, [r3, #0]
 800f296:	e013      	b.n	800f2c0 <tcp_pcb_remove+0x70>
 800f298:	687b      	ldr	r3, [r7, #4]
 800f29a:	681b      	ldr	r3, [r3, #0]
 800f29c:	60fb      	str	r3, [r7, #12]
 800f29e:	e00c      	b.n	800f2ba <tcp_pcb_remove+0x6a>
 800f2a0:	68fb      	ldr	r3, [r7, #12]
 800f2a2:	68db      	ldr	r3, [r3, #12]
 800f2a4:	683a      	ldr	r2, [r7, #0]
 800f2a6:	429a      	cmp	r2, r3
 800f2a8:	d104      	bne.n	800f2b4 <tcp_pcb_remove+0x64>
 800f2aa:	683b      	ldr	r3, [r7, #0]
 800f2ac:	68da      	ldr	r2, [r3, #12]
 800f2ae:	68fb      	ldr	r3, [r7, #12]
 800f2b0:	60da      	str	r2, [r3, #12]
 800f2b2:	e005      	b.n	800f2c0 <tcp_pcb_remove+0x70>
 800f2b4:	68fb      	ldr	r3, [r7, #12]
 800f2b6:	68db      	ldr	r3, [r3, #12]
 800f2b8:	60fb      	str	r3, [r7, #12]
 800f2ba:	68fb      	ldr	r3, [r7, #12]
 800f2bc:	2b00      	cmp	r3, #0
 800f2be:	d1ef      	bne.n	800f2a0 <tcp_pcb_remove+0x50>
 800f2c0:	683b      	ldr	r3, [r7, #0]
 800f2c2:	2200      	movs	r2, #0
 800f2c4:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800f2c6:	6838      	ldr	r0, [r7, #0]
 800f2c8:	f7ff ff72 	bl	800f1b0 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800f2cc:	683b      	ldr	r3, [r7, #0]
 800f2ce:	7d1b      	ldrb	r3, [r3, #20]
 800f2d0:	2b0a      	cmp	r3, #10
 800f2d2:	d013      	beq.n	800f2fc <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800f2d4:	683b      	ldr	r3, [r7, #0]
 800f2d6:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800f2d8:	2b01      	cmp	r3, #1
 800f2da:	d00f      	beq.n	800f2fc <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800f2dc:	683b      	ldr	r3, [r7, #0]
 800f2de:	8b5b      	ldrh	r3, [r3, #26]
 800f2e0:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800f2e4:	2b00      	cmp	r3, #0
 800f2e6:	d009      	beq.n	800f2fc <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800f2e8:	683b      	ldr	r3, [r7, #0]
 800f2ea:	8b5b      	ldrh	r3, [r3, #26]
 800f2ec:	f043 0302 	orr.w	r3, r3, #2
 800f2f0:	b29a      	uxth	r2, r3
 800f2f2:	683b      	ldr	r3, [r7, #0]
 800f2f4:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800f2f6:	6838      	ldr	r0, [r7, #0]
 800f2f8:	f002 ff6a 	bl	80121d0 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800f2fc:	683b      	ldr	r3, [r7, #0]
 800f2fe:	7d1b      	ldrb	r3, [r3, #20]
 800f300:	2b01      	cmp	r3, #1
 800f302:	d020      	beq.n	800f346 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800f304:	683b      	ldr	r3, [r7, #0]
 800f306:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f308:	2b00      	cmp	r3, #0
 800f30a:	d006      	beq.n	800f31a <tcp_pcb_remove+0xca>
 800f30c:	4b13      	ldr	r3, [pc, #76]	; (800f35c <tcp_pcb_remove+0x10c>)
 800f30e:	f640 0293 	movw	r2, #2195	; 0x893
 800f312:	4916      	ldr	r1, [pc, #88]	; (800f36c <tcp_pcb_remove+0x11c>)
 800f314:	4813      	ldr	r0, [pc, #76]	; (800f364 <tcp_pcb_remove+0x114>)
 800f316:	f009 fb59 	bl	80189cc <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800f31a:	683b      	ldr	r3, [r7, #0]
 800f31c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f31e:	2b00      	cmp	r3, #0
 800f320:	d006      	beq.n	800f330 <tcp_pcb_remove+0xe0>
 800f322:	4b0e      	ldr	r3, [pc, #56]	; (800f35c <tcp_pcb_remove+0x10c>)
 800f324:	f640 0294 	movw	r2, #2196	; 0x894
 800f328:	4911      	ldr	r1, [pc, #68]	; (800f370 <tcp_pcb_remove+0x120>)
 800f32a:	480e      	ldr	r0, [pc, #56]	; (800f364 <tcp_pcb_remove+0x114>)
 800f32c:	f009 fb4e 	bl	80189cc <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800f330:	683b      	ldr	r3, [r7, #0]
 800f332:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f334:	2b00      	cmp	r3, #0
 800f336:	d006      	beq.n	800f346 <tcp_pcb_remove+0xf6>
 800f338:	4b08      	ldr	r3, [pc, #32]	; (800f35c <tcp_pcb_remove+0x10c>)
 800f33a:	f640 0296 	movw	r2, #2198	; 0x896
 800f33e:	490d      	ldr	r1, [pc, #52]	; (800f374 <tcp_pcb_remove+0x124>)
 800f340:	4808      	ldr	r0, [pc, #32]	; (800f364 <tcp_pcb_remove+0x114>)
 800f342:	f009 fb43 	bl	80189cc <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800f346:	683b      	ldr	r3, [r7, #0]
 800f348:	2200      	movs	r2, #0
 800f34a:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800f34c:	683b      	ldr	r3, [r7, #0]
 800f34e:	2200      	movs	r2, #0
 800f350:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800f352:	bf00      	nop
 800f354:	3710      	adds	r7, #16
 800f356:	46bd      	mov	sp, r7
 800f358:	bd80      	pop	{r7, pc}
 800f35a:	bf00      	nop
 800f35c:	0801ead0 	.word	0x0801ead0
 800f360:	0801f138 	.word	0x0801f138
 800f364:	0801eb14 	.word	0x0801eb14
 800f368:	0801f154 	.word	0x0801f154
 800f36c:	0801f174 	.word	0x0801f174
 800f370:	0801f18c 	.word	0x0801f18c
 800f374:	0801f1a8 	.word	0x0801f1a8

0800f378 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800f378:	b580      	push	{r7, lr}
 800f37a:	b082      	sub	sp, #8
 800f37c:	af00      	add	r7, sp, #0
 800f37e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	2b00      	cmp	r3, #0
 800f384:	d106      	bne.n	800f394 <tcp_next_iss+0x1c>
 800f386:	4b0a      	ldr	r3, [pc, #40]	; (800f3b0 <tcp_next_iss+0x38>)
 800f388:	f640 02af 	movw	r2, #2223	; 0x8af
 800f38c:	4909      	ldr	r1, [pc, #36]	; (800f3b4 <tcp_next_iss+0x3c>)
 800f38e:	480a      	ldr	r0, [pc, #40]	; (800f3b8 <tcp_next_iss+0x40>)
 800f390:	f009 fb1c 	bl	80189cc <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800f394:	4b09      	ldr	r3, [pc, #36]	; (800f3bc <tcp_next_iss+0x44>)
 800f396:	681a      	ldr	r2, [r3, #0]
 800f398:	4b09      	ldr	r3, [pc, #36]	; (800f3c0 <tcp_next_iss+0x48>)
 800f39a:	681b      	ldr	r3, [r3, #0]
 800f39c:	4413      	add	r3, r2
 800f39e:	4a07      	ldr	r2, [pc, #28]	; (800f3bc <tcp_next_iss+0x44>)
 800f3a0:	6013      	str	r3, [r2, #0]
  return iss;
 800f3a2:	4b06      	ldr	r3, [pc, #24]	; (800f3bc <tcp_next_iss+0x44>)
 800f3a4:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800f3a6:	4618      	mov	r0, r3
 800f3a8:	3708      	adds	r7, #8
 800f3aa:	46bd      	mov	sp, r7
 800f3ac:	bd80      	pop	{r7, pc}
 800f3ae:	bf00      	nop
 800f3b0:	0801ead0 	.word	0x0801ead0
 800f3b4:	0801f1c0 	.word	0x0801f1c0
 800f3b8:	0801eb14 	.word	0x0801eb14
 800f3bc:	20000068 	.word	0x20000068
 800f3c0:	20007154 	.word	0x20007154

0800f3c4 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800f3c4:	b580      	push	{r7, lr}
 800f3c6:	b086      	sub	sp, #24
 800f3c8:	af00      	add	r7, sp, #0
 800f3ca:	4603      	mov	r3, r0
 800f3cc:	60b9      	str	r1, [r7, #8]
 800f3ce:	607a      	str	r2, [r7, #4]
 800f3d0:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800f3d2:	687b      	ldr	r3, [r7, #4]
 800f3d4:	2b00      	cmp	r3, #0
 800f3d6:	d106      	bne.n	800f3e6 <tcp_eff_send_mss_netif+0x22>
 800f3d8:	4b14      	ldr	r3, [pc, #80]	; (800f42c <tcp_eff_send_mss_netif+0x68>)
 800f3da:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800f3de:	4914      	ldr	r1, [pc, #80]	; (800f430 <tcp_eff_send_mss_netif+0x6c>)
 800f3e0:	4814      	ldr	r0, [pc, #80]	; (800f434 <tcp_eff_send_mss_netif+0x70>)
 800f3e2:	f009 faf3 	bl	80189cc <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800f3e6:	68bb      	ldr	r3, [r7, #8]
 800f3e8:	2b00      	cmp	r3, #0
 800f3ea:	d101      	bne.n	800f3f0 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800f3ec:	89fb      	ldrh	r3, [r7, #14]
 800f3ee:	e019      	b.n	800f424 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800f3f0:	68bb      	ldr	r3, [r7, #8]
 800f3f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f3f4:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800f3f6:	8afb      	ldrh	r3, [r7, #22]
 800f3f8:	2b00      	cmp	r3, #0
 800f3fa:	d012      	beq.n	800f422 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800f3fc:	2328      	movs	r3, #40	; 0x28
 800f3fe:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800f400:	8afa      	ldrh	r2, [r7, #22]
 800f402:	8abb      	ldrh	r3, [r7, #20]
 800f404:	429a      	cmp	r2, r3
 800f406:	d904      	bls.n	800f412 <tcp_eff_send_mss_netif+0x4e>
 800f408:	8afa      	ldrh	r2, [r7, #22]
 800f40a:	8abb      	ldrh	r3, [r7, #20]
 800f40c:	1ad3      	subs	r3, r2, r3
 800f40e:	b29b      	uxth	r3, r3
 800f410:	e000      	b.n	800f414 <tcp_eff_send_mss_netif+0x50>
 800f412:	2300      	movs	r3, #0
 800f414:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800f416:	8a7a      	ldrh	r2, [r7, #18]
 800f418:	89fb      	ldrh	r3, [r7, #14]
 800f41a:	4293      	cmp	r3, r2
 800f41c:	bf28      	it	cs
 800f41e:	4613      	movcs	r3, r2
 800f420:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800f422:	89fb      	ldrh	r3, [r7, #14]
}
 800f424:	4618      	mov	r0, r3
 800f426:	3718      	adds	r7, #24
 800f428:	46bd      	mov	sp, r7
 800f42a:	bd80      	pop	{r7, pc}
 800f42c:	0801ead0 	.word	0x0801ead0
 800f430:	0801f1dc 	.word	0x0801f1dc
 800f434:	0801eb14 	.word	0x0801eb14

0800f438 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800f438:	b580      	push	{r7, lr}
 800f43a:	b084      	sub	sp, #16
 800f43c:	af00      	add	r7, sp, #0
 800f43e:	6078      	str	r0, [r7, #4]
 800f440:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800f442:	683b      	ldr	r3, [r7, #0]
 800f444:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	2b00      	cmp	r3, #0
 800f44a:	d119      	bne.n	800f480 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800f44c:	4b10      	ldr	r3, [pc, #64]	; (800f490 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800f44e:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800f452:	4910      	ldr	r1, [pc, #64]	; (800f494 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800f454:	4810      	ldr	r0, [pc, #64]	; (800f498 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800f456:	f009 fab9 	bl	80189cc <iprintf>

  while (pcb != NULL) {
 800f45a:	e011      	b.n	800f480 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800f45c:	68fb      	ldr	r3, [r7, #12]
 800f45e:	681a      	ldr	r2, [r3, #0]
 800f460:	687b      	ldr	r3, [r7, #4]
 800f462:	681b      	ldr	r3, [r3, #0]
 800f464:	429a      	cmp	r2, r3
 800f466:	d108      	bne.n	800f47a <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800f468:	68fb      	ldr	r3, [r7, #12]
 800f46a:	68db      	ldr	r3, [r3, #12]
 800f46c:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800f46e:	68f8      	ldr	r0, [r7, #12]
 800f470:	f7fe ffc6 	bl	800e400 <tcp_abort>
      pcb = next;
 800f474:	68bb      	ldr	r3, [r7, #8]
 800f476:	60fb      	str	r3, [r7, #12]
 800f478:	e002      	b.n	800f480 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800f47a:	68fb      	ldr	r3, [r7, #12]
 800f47c:	68db      	ldr	r3, [r3, #12]
 800f47e:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800f480:	68fb      	ldr	r3, [r7, #12]
 800f482:	2b00      	cmp	r3, #0
 800f484:	d1ea      	bne.n	800f45c <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800f486:	bf00      	nop
 800f488:	bf00      	nop
 800f48a:	3710      	adds	r7, #16
 800f48c:	46bd      	mov	sp, r7
 800f48e:	bd80      	pop	{r7, pc}
 800f490:	0801ead0 	.word	0x0801ead0
 800f494:	0801f204 	.word	0x0801f204
 800f498:	0801eb14 	.word	0x0801eb14

0800f49c <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800f49c:	b580      	push	{r7, lr}
 800f49e:	b084      	sub	sp, #16
 800f4a0:	af00      	add	r7, sp, #0
 800f4a2:	6078      	str	r0, [r7, #4]
 800f4a4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	2b00      	cmp	r3, #0
 800f4aa:	d02a      	beq.n	800f502 <tcp_netif_ip_addr_changed+0x66>
 800f4ac:	687b      	ldr	r3, [r7, #4]
 800f4ae:	681b      	ldr	r3, [r3, #0]
 800f4b0:	2b00      	cmp	r3, #0
 800f4b2:	d026      	beq.n	800f502 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800f4b4:	4b15      	ldr	r3, [pc, #84]	; (800f50c <tcp_netif_ip_addr_changed+0x70>)
 800f4b6:	681b      	ldr	r3, [r3, #0]
 800f4b8:	4619      	mov	r1, r3
 800f4ba:	6878      	ldr	r0, [r7, #4]
 800f4bc:	f7ff ffbc 	bl	800f438 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800f4c0:	4b13      	ldr	r3, [pc, #76]	; (800f510 <tcp_netif_ip_addr_changed+0x74>)
 800f4c2:	681b      	ldr	r3, [r3, #0]
 800f4c4:	4619      	mov	r1, r3
 800f4c6:	6878      	ldr	r0, [r7, #4]
 800f4c8:	f7ff ffb6 	bl	800f438 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800f4cc:	683b      	ldr	r3, [r7, #0]
 800f4ce:	2b00      	cmp	r3, #0
 800f4d0:	d017      	beq.n	800f502 <tcp_netif_ip_addr_changed+0x66>
 800f4d2:	683b      	ldr	r3, [r7, #0]
 800f4d4:	681b      	ldr	r3, [r3, #0]
 800f4d6:	2b00      	cmp	r3, #0
 800f4d8:	d013      	beq.n	800f502 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f4da:	4b0e      	ldr	r3, [pc, #56]	; (800f514 <tcp_netif_ip_addr_changed+0x78>)
 800f4dc:	681b      	ldr	r3, [r3, #0]
 800f4de:	60fb      	str	r3, [r7, #12]
 800f4e0:	e00c      	b.n	800f4fc <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800f4e2:	68fb      	ldr	r3, [r7, #12]
 800f4e4:	681a      	ldr	r2, [r3, #0]
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	681b      	ldr	r3, [r3, #0]
 800f4ea:	429a      	cmp	r2, r3
 800f4ec:	d103      	bne.n	800f4f6 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800f4ee:	683b      	ldr	r3, [r7, #0]
 800f4f0:	681a      	ldr	r2, [r3, #0]
 800f4f2:	68fb      	ldr	r3, [r7, #12]
 800f4f4:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f4f6:	68fb      	ldr	r3, [r7, #12]
 800f4f8:	68db      	ldr	r3, [r3, #12]
 800f4fa:	60fb      	str	r3, [r7, #12]
 800f4fc:	68fb      	ldr	r3, [r7, #12]
 800f4fe:	2b00      	cmp	r3, #0
 800f500:	d1ef      	bne.n	800f4e2 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800f502:	bf00      	nop
 800f504:	3710      	adds	r7, #16
 800f506:	46bd      	mov	sp, r7
 800f508:	bd80      	pop	{r7, pc}
 800f50a:	bf00      	nop
 800f50c:	20007150 	.word	0x20007150
 800f510:	2000715c 	.word	0x2000715c
 800f514:	20007158 	.word	0x20007158

0800f518 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800f518:	b580      	push	{r7, lr}
 800f51a:	b082      	sub	sp, #8
 800f51c:	af00      	add	r7, sp, #0
 800f51e:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f524:	2b00      	cmp	r3, #0
 800f526:	d007      	beq.n	800f538 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800f528:	687b      	ldr	r3, [r7, #4]
 800f52a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f52c:	4618      	mov	r0, r3
 800f52e:	f7ff fc3d 	bl	800edac <tcp_segs_free>
    pcb->ooseq = NULL;
 800f532:	687b      	ldr	r3, [r7, #4]
 800f534:	2200      	movs	r2, #0
 800f536:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800f538:	bf00      	nop
 800f53a:	3708      	adds	r7, #8
 800f53c:	46bd      	mov	sp, r7
 800f53e:	bd80      	pop	{r7, pc}

0800f540 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800f540:	b590      	push	{r4, r7, lr}
 800f542:	b08d      	sub	sp, #52	; 0x34
 800f544:	af04      	add	r7, sp, #16
 800f546:	6078      	str	r0, [r7, #4]
 800f548:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800f54a:	687b      	ldr	r3, [r7, #4]
 800f54c:	2b00      	cmp	r3, #0
 800f54e:	d105      	bne.n	800f55c <tcp_input+0x1c>
 800f550:	4b9b      	ldr	r3, [pc, #620]	; (800f7c0 <tcp_input+0x280>)
 800f552:	2283      	movs	r2, #131	; 0x83
 800f554:	499b      	ldr	r1, [pc, #620]	; (800f7c4 <tcp_input+0x284>)
 800f556:	489c      	ldr	r0, [pc, #624]	; (800f7c8 <tcp_input+0x288>)
 800f558:	f009 fa38 	bl	80189cc <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	685b      	ldr	r3, [r3, #4]
 800f560:	4a9a      	ldr	r2, [pc, #616]	; (800f7cc <tcp_input+0x28c>)
 800f562:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800f564:	687b      	ldr	r3, [r7, #4]
 800f566:	895b      	ldrh	r3, [r3, #10]
 800f568:	2b13      	cmp	r3, #19
 800f56a:	f240 83c4 	bls.w	800fcf6 <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800f56e:	4b98      	ldr	r3, [pc, #608]	; (800f7d0 <tcp_input+0x290>)
 800f570:	695b      	ldr	r3, [r3, #20]
 800f572:	4a97      	ldr	r2, [pc, #604]	; (800f7d0 <tcp_input+0x290>)
 800f574:	6812      	ldr	r2, [r2, #0]
 800f576:	4611      	mov	r1, r2
 800f578:	4618      	mov	r0, r3
 800f57a:	f007 fd49 	bl	8017010 <ip4_addr_isbroadcast_u32>
 800f57e:	4603      	mov	r3, r0
 800f580:	2b00      	cmp	r3, #0
 800f582:	f040 83ba 	bne.w	800fcfa <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800f586:	4b92      	ldr	r3, [pc, #584]	; (800f7d0 <tcp_input+0x290>)
 800f588:	695b      	ldr	r3, [r3, #20]
 800f58a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800f58e:	2be0      	cmp	r3, #224	; 0xe0
 800f590:	f000 83b3 	beq.w	800fcfa <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800f594:	4b8d      	ldr	r3, [pc, #564]	; (800f7cc <tcp_input+0x28c>)
 800f596:	681b      	ldr	r3, [r3, #0]
 800f598:	899b      	ldrh	r3, [r3, #12]
 800f59a:	b29b      	uxth	r3, r3
 800f59c:	4618      	mov	r0, r3
 800f59e:	f7fc fefb 	bl	800c398 <lwip_htons>
 800f5a2:	4603      	mov	r3, r0
 800f5a4:	0b1b      	lsrs	r3, r3, #12
 800f5a6:	b29b      	uxth	r3, r3
 800f5a8:	b2db      	uxtb	r3, r3
 800f5aa:	009b      	lsls	r3, r3, #2
 800f5ac:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800f5ae:	7cbb      	ldrb	r3, [r7, #18]
 800f5b0:	2b13      	cmp	r3, #19
 800f5b2:	f240 83a4 	bls.w	800fcfe <tcp_input+0x7be>
 800f5b6:	7cbb      	ldrb	r3, [r7, #18]
 800f5b8:	b29a      	uxth	r2, r3
 800f5ba:	687b      	ldr	r3, [r7, #4]
 800f5bc:	891b      	ldrh	r3, [r3, #8]
 800f5be:	429a      	cmp	r2, r3
 800f5c0:	f200 839d 	bhi.w	800fcfe <tcp_input+0x7be>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800f5c4:	7cbb      	ldrb	r3, [r7, #18]
 800f5c6:	b29b      	uxth	r3, r3
 800f5c8:	3b14      	subs	r3, #20
 800f5ca:	b29a      	uxth	r2, r3
 800f5cc:	4b81      	ldr	r3, [pc, #516]	; (800f7d4 <tcp_input+0x294>)
 800f5ce:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800f5d0:	4b81      	ldr	r3, [pc, #516]	; (800f7d8 <tcp_input+0x298>)
 800f5d2:	2200      	movs	r2, #0
 800f5d4:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800f5d6:	687b      	ldr	r3, [r7, #4]
 800f5d8:	895a      	ldrh	r2, [r3, #10]
 800f5da:	7cbb      	ldrb	r3, [r7, #18]
 800f5dc:	b29b      	uxth	r3, r3
 800f5de:	429a      	cmp	r2, r3
 800f5e0:	d309      	bcc.n	800f5f6 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800f5e2:	4b7c      	ldr	r3, [pc, #496]	; (800f7d4 <tcp_input+0x294>)
 800f5e4:	881a      	ldrh	r2, [r3, #0]
 800f5e6:	4b7d      	ldr	r3, [pc, #500]	; (800f7dc <tcp_input+0x29c>)
 800f5e8:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800f5ea:	7cbb      	ldrb	r3, [r7, #18]
 800f5ec:	4619      	mov	r1, r3
 800f5ee:	6878      	ldr	r0, [r7, #4]
 800f5f0:	f7fe f8e8 	bl	800d7c4 <pbuf_remove_header>
 800f5f4:	e04e      	b.n	800f694 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800f5f6:	687b      	ldr	r3, [r7, #4]
 800f5f8:	681b      	ldr	r3, [r3, #0]
 800f5fa:	2b00      	cmp	r3, #0
 800f5fc:	d105      	bne.n	800f60a <tcp_input+0xca>
 800f5fe:	4b70      	ldr	r3, [pc, #448]	; (800f7c0 <tcp_input+0x280>)
 800f600:	22c2      	movs	r2, #194	; 0xc2
 800f602:	4977      	ldr	r1, [pc, #476]	; (800f7e0 <tcp_input+0x2a0>)
 800f604:	4870      	ldr	r0, [pc, #448]	; (800f7c8 <tcp_input+0x288>)
 800f606:	f009 f9e1 	bl	80189cc <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800f60a:	2114      	movs	r1, #20
 800f60c:	6878      	ldr	r0, [r7, #4]
 800f60e:	f7fe f8d9 	bl	800d7c4 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800f612:	687b      	ldr	r3, [r7, #4]
 800f614:	895a      	ldrh	r2, [r3, #10]
 800f616:	4b71      	ldr	r3, [pc, #452]	; (800f7dc <tcp_input+0x29c>)
 800f618:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800f61a:	4b6e      	ldr	r3, [pc, #440]	; (800f7d4 <tcp_input+0x294>)
 800f61c:	881a      	ldrh	r2, [r3, #0]
 800f61e:	4b6f      	ldr	r3, [pc, #444]	; (800f7dc <tcp_input+0x29c>)
 800f620:	881b      	ldrh	r3, [r3, #0]
 800f622:	1ad3      	subs	r3, r2, r3
 800f624:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800f626:	4b6d      	ldr	r3, [pc, #436]	; (800f7dc <tcp_input+0x29c>)
 800f628:	881b      	ldrh	r3, [r3, #0]
 800f62a:	4619      	mov	r1, r3
 800f62c:	6878      	ldr	r0, [r7, #4]
 800f62e:	f7fe f8c9 	bl	800d7c4 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800f632:	687b      	ldr	r3, [r7, #4]
 800f634:	681b      	ldr	r3, [r3, #0]
 800f636:	895b      	ldrh	r3, [r3, #10]
 800f638:	8a3a      	ldrh	r2, [r7, #16]
 800f63a:	429a      	cmp	r2, r3
 800f63c:	f200 8361 	bhi.w	800fd02 <tcp_input+0x7c2>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	681b      	ldr	r3, [r3, #0]
 800f644:	685b      	ldr	r3, [r3, #4]
 800f646:	4a64      	ldr	r2, [pc, #400]	; (800f7d8 <tcp_input+0x298>)
 800f648:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	681b      	ldr	r3, [r3, #0]
 800f64e:	8a3a      	ldrh	r2, [r7, #16]
 800f650:	4611      	mov	r1, r2
 800f652:	4618      	mov	r0, r3
 800f654:	f7fe f8b6 	bl	800d7c4 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	891a      	ldrh	r2, [r3, #8]
 800f65c:	8a3b      	ldrh	r3, [r7, #16]
 800f65e:	1ad3      	subs	r3, r2, r3
 800f660:	b29a      	uxth	r2, r3
 800f662:	687b      	ldr	r3, [r7, #4]
 800f664:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800f666:	687b      	ldr	r3, [r7, #4]
 800f668:	895b      	ldrh	r3, [r3, #10]
 800f66a:	2b00      	cmp	r3, #0
 800f66c:	d005      	beq.n	800f67a <tcp_input+0x13a>
 800f66e:	4b54      	ldr	r3, [pc, #336]	; (800f7c0 <tcp_input+0x280>)
 800f670:	22df      	movs	r2, #223	; 0xdf
 800f672:	495c      	ldr	r1, [pc, #368]	; (800f7e4 <tcp_input+0x2a4>)
 800f674:	4854      	ldr	r0, [pc, #336]	; (800f7c8 <tcp_input+0x288>)
 800f676:	f009 f9a9 	bl	80189cc <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800f67a:	687b      	ldr	r3, [r7, #4]
 800f67c:	891a      	ldrh	r2, [r3, #8]
 800f67e:	687b      	ldr	r3, [r7, #4]
 800f680:	681b      	ldr	r3, [r3, #0]
 800f682:	891b      	ldrh	r3, [r3, #8]
 800f684:	429a      	cmp	r2, r3
 800f686:	d005      	beq.n	800f694 <tcp_input+0x154>
 800f688:	4b4d      	ldr	r3, [pc, #308]	; (800f7c0 <tcp_input+0x280>)
 800f68a:	22e0      	movs	r2, #224	; 0xe0
 800f68c:	4956      	ldr	r1, [pc, #344]	; (800f7e8 <tcp_input+0x2a8>)
 800f68e:	484e      	ldr	r0, [pc, #312]	; (800f7c8 <tcp_input+0x288>)
 800f690:	f009 f99c 	bl	80189cc <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800f694:	4b4d      	ldr	r3, [pc, #308]	; (800f7cc <tcp_input+0x28c>)
 800f696:	681b      	ldr	r3, [r3, #0]
 800f698:	881b      	ldrh	r3, [r3, #0]
 800f69a:	b29b      	uxth	r3, r3
 800f69c:	4a4b      	ldr	r2, [pc, #300]	; (800f7cc <tcp_input+0x28c>)
 800f69e:	6814      	ldr	r4, [r2, #0]
 800f6a0:	4618      	mov	r0, r3
 800f6a2:	f7fc fe79 	bl	800c398 <lwip_htons>
 800f6a6:	4603      	mov	r3, r0
 800f6a8:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800f6aa:	4b48      	ldr	r3, [pc, #288]	; (800f7cc <tcp_input+0x28c>)
 800f6ac:	681b      	ldr	r3, [r3, #0]
 800f6ae:	885b      	ldrh	r3, [r3, #2]
 800f6b0:	b29b      	uxth	r3, r3
 800f6b2:	4a46      	ldr	r2, [pc, #280]	; (800f7cc <tcp_input+0x28c>)
 800f6b4:	6814      	ldr	r4, [r2, #0]
 800f6b6:	4618      	mov	r0, r3
 800f6b8:	f7fc fe6e 	bl	800c398 <lwip_htons>
 800f6bc:	4603      	mov	r3, r0
 800f6be:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800f6c0:	4b42      	ldr	r3, [pc, #264]	; (800f7cc <tcp_input+0x28c>)
 800f6c2:	681b      	ldr	r3, [r3, #0]
 800f6c4:	685b      	ldr	r3, [r3, #4]
 800f6c6:	4a41      	ldr	r2, [pc, #260]	; (800f7cc <tcp_input+0x28c>)
 800f6c8:	6814      	ldr	r4, [r2, #0]
 800f6ca:	4618      	mov	r0, r3
 800f6cc:	f7fc fe79 	bl	800c3c2 <lwip_htonl>
 800f6d0:	4603      	mov	r3, r0
 800f6d2:	6063      	str	r3, [r4, #4]
 800f6d4:	6863      	ldr	r3, [r4, #4]
 800f6d6:	4a45      	ldr	r2, [pc, #276]	; (800f7ec <tcp_input+0x2ac>)
 800f6d8:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800f6da:	4b3c      	ldr	r3, [pc, #240]	; (800f7cc <tcp_input+0x28c>)
 800f6dc:	681b      	ldr	r3, [r3, #0]
 800f6de:	689b      	ldr	r3, [r3, #8]
 800f6e0:	4a3a      	ldr	r2, [pc, #232]	; (800f7cc <tcp_input+0x28c>)
 800f6e2:	6814      	ldr	r4, [r2, #0]
 800f6e4:	4618      	mov	r0, r3
 800f6e6:	f7fc fe6c 	bl	800c3c2 <lwip_htonl>
 800f6ea:	4603      	mov	r3, r0
 800f6ec:	60a3      	str	r3, [r4, #8]
 800f6ee:	68a3      	ldr	r3, [r4, #8]
 800f6f0:	4a3f      	ldr	r2, [pc, #252]	; (800f7f0 <tcp_input+0x2b0>)
 800f6f2:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800f6f4:	4b35      	ldr	r3, [pc, #212]	; (800f7cc <tcp_input+0x28c>)
 800f6f6:	681b      	ldr	r3, [r3, #0]
 800f6f8:	89db      	ldrh	r3, [r3, #14]
 800f6fa:	b29b      	uxth	r3, r3
 800f6fc:	4a33      	ldr	r2, [pc, #204]	; (800f7cc <tcp_input+0x28c>)
 800f6fe:	6814      	ldr	r4, [r2, #0]
 800f700:	4618      	mov	r0, r3
 800f702:	f7fc fe49 	bl	800c398 <lwip_htons>
 800f706:	4603      	mov	r3, r0
 800f708:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800f70a:	4b30      	ldr	r3, [pc, #192]	; (800f7cc <tcp_input+0x28c>)
 800f70c:	681b      	ldr	r3, [r3, #0]
 800f70e:	899b      	ldrh	r3, [r3, #12]
 800f710:	b29b      	uxth	r3, r3
 800f712:	4618      	mov	r0, r3
 800f714:	f7fc fe40 	bl	800c398 <lwip_htons>
 800f718:	4603      	mov	r3, r0
 800f71a:	b2db      	uxtb	r3, r3
 800f71c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f720:	b2da      	uxtb	r2, r3
 800f722:	4b34      	ldr	r3, [pc, #208]	; (800f7f4 <tcp_input+0x2b4>)
 800f724:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800f726:	687b      	ldr	r3, [r7, #4]
 800f728:	891a      	ldrh	r2, [r3, #8]
 800f72a:	4b33      	ldr	r3, [pc, #204]	; (800f7f8 <tcp_input+0x2b8>)
 800f72c:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800f72e:	4b31      	ldr	r3, [pc, #196]	; (800f7f4 <tcp_input+0x2b4>)
 800f730:	781b      	ldrb	r3, [r3, #0]
 800f732:	f003 0303 	and.w	r3, r3, #3
 800f736:	2b00      	cmp	r3, #0
 800f738:	d00c      	beq.n	800f754 <tcp_input+0x214>
    tcplen++;
 800f73a:	4b2f      	ldr	r3, [pc, #188]	; (800f7f8 <tcp_input+0x2b8>)
 800f73c:	881b      	ldrh	r3, [r3, #0]
 800f73e:	3301      	adds	r3, #1
 800f740:	b29a      	uxth	r2, r3
 800f742:	4b2d      	ldr	r3, [pc, #180]	; (800f7f8 <tcp_input+0x2b8>)
 800f744:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800f746:	687b      	ldr	r3, [r7, #4]
 800f748:	891a      	ldrh	r2, [r3, #8]
 800f74a:	4b2b      	ldr	r3, [pc, #172]	; (800f7f8 <tcp_input+0x2b8>)
 800f74c:	881b      	ldrh	r3, [r3, #0]
 800f74e:	429a      	cmp	r2, r3
 800f750:	f200 82d9 	bhi.w	800fd06 <tcp_input+0x7c6>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800f754:	2300      	movs	r3, #0
 800f756:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f758:	4b28      	ldr	r3, [pc, #160]	; (800f7fc <tcp_input+0x2bc>)
 800f75a:	681b      	ldr	r3, [r3, #0]
 800f75c:	61fb      	str	r3, [r7, #28]
 800f75e:	e09d      	b.n	800f89c <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800f760:	69fb      	ldr	r3, [r7, #28]
 800f762:	7d1b      	ldrb	r3, [r3, #20]
 800f764:	2b00      	cmp	r3, #0
 800f766:	d105      	bne.n	800f774 <tcp_input+0x234>
 800f768:	4b15      	ldr	r3, [pc, #84]	; (800f7c0 <tcp_input+0x280>)
 800f76a:	22fb      	movs	r2, #251	; 0xfb
 800f76c:	4924      	ldr	r1, [pc, #144]	; (800f800 <tcp_input+0x2c0>)
 800f76e:	4816      	ldr	r0, [pc, #88]	; (800f7c8 <tcp_input+0x288>)
 800f770:	f009 f92c 	bl	80189cc <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800f774:	69fb      	ldr	r3, [r7, #28]
 800f776:	7d1b      	ldrb	r3, [r3, #20]
 800f778:	2b0a      	cmp	r3, #10
 800f77a:	d105      	bne.n	800f788 <tcp_input+0x248>
 800f77c:	4b10      	ldr	r3, [pc, #64]	; (800f7c0 <tcp_input+0x280>)
 800f77e:	22fc      	movs	r2, #252	; 0xfc
 800f780:	4920      	ldr	r1, [pc, #128]	; (800f804 <tcp_input+0x2c4>)
 800f782:	4811      	ldr	r0, [pc, #68]	; (800f7c8 <tcp_input+0x288>)
 800f784:	f009 f922 	bl	80189cc <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800f788:	69fb      	ldr	r3, [r7, #28]
 800f78a:	7d1b      	ldrb	r3, [r3, #20]
 800f78c:	2b01      	cmp	r3, #1
 800f78e:	d105      	bne.n	800f79c <tcp_input+0x25c>
 800f790:	4b0b      	ldr	r3, [pc, #44]	; (800f7c0 <tcp_input+0x280>)
 800f792:	22fd      	movs	r2, #253	; 0xfd
 800f794:	491c      	ldr	r1, [pc, #112]	; (800f808 <tcp_input+0x2c8>)
 800f796:	480c      	ldr	r0, [pc, #48]	; (800f7c8 <tcp_input+0x288>)
 800f798:	f009 f918 	bl	80189cc <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f79c:	69fb      	ldr	r3, [r7, #28]
 800f79e:	7a1b      	ldrb	r3, [r3, #8]
 800f7a0:	2b00      	cmp	r3, #0
 800f7a2:	d033      	beq.n	800f80c <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f7a4:	69fb      	ldr	r3, [r7, #28]
 800f7a6:	7a1a      	ldrb	r2, [r3, #8]
 800f7a8:	4b09      	ldr	r3, [pc, #36]	; (800f7d0 <tcp_input+0x290>)
 800f7aa:	685b      	ldr	r3, [r3, #4]
 800f7ac:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800f7b0:	3301      	adds	r3, #1
 800f7b2:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f7b4:	429a      	cmp	r2, r3
 800f7b6:	d029      	beq.n	800f80c <tcp_input+0x2cc>
      prev = pcb;
 800f7b8:	69fb      	ldr	r3, [r7, #28]
 800f7ba:	61bb      	str	r3, [r7, #24]
      continue;
 800f7bc:	e06b      	b.n	800f896 <tcp_input+0x356>
 800f7be:	bf00      	nop
 800f7c0:	0801f238 	.word	0x0801f238
 800f7c4:	0801f26c 	.word	0x0801f26c
 800f7c8:	0801f284 	.word	0x0801f284
 800f7cc:	200004ac 	.word	0x200004ac
 800f7d0:	2000402c 	.word	0x2000402c
 800f7d4:	200004b0 	.word	0x200004b0
 800f7d8:	200004b4 	.word	0x200004b4
 800f7dc:	200004b2 	.word	0x200004b2
 800f7e0:	0801f2ac 	.word	0x0801f2ac
 800f7e4:	0801f2bc 	.word	0x0801f2bc
 800f7e8:	0801f2c8 	.word	0x0801f2c8
 800f7ec:	200004bc 	.word	0x200004bc
 800f7f0:	200004c0 	.word	0x200004c0
 800f7f4:	200004c8 	.word	0x200004c8
 800f7f8:	200004c6 	.word	0x200004c6
 800f7fc:	20007150 	.word	0x20007150
 800f800:	0801f2e8 	.word	0x0801f2e8
 800f804:	0801f310 	.word	0x0801f310
 800f808:	0801f33c 	.word	0x0801f33c
    }

    if (pcb->remote_port == tcphdr->src &&
 800f80c:	69fb      	ldr	r3, [r7, #28]
 800f80e:	8b1a      	ldrh	r2, [r3, #24]
 800f810:	4b94      	ldr	r3, [pc, #592]	; (800fa64 <tcp_input+0x524>)
 800f812:	681b      	ldr	r3, [r3, #0]
 800f814:	881b      	ldrh	r3, [r3, #0]
 800f816:	b29b      	uxth	r3, r3
 800f818:	429a      	cmp	r2, r3
 800f81a:	d13a      	bne.n	800f892 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800f81c:	69fb      	ldr	r3, [r7, #28]
 800f81e:	8ada      	ldrh	r2, [r3, #22]
 800f820:	4b90      	ldr	r3, [pc, #576]	; (800fa64 <tcp_input+0x524>)
 800f822:	681b      	ldr	r3, [r3, #0]
 800f824:	885b      	ldrh	r3, [r3, #2]
 800f826:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800f828:	429a      	cmp	r2, r3
 800f82a:	d132      	bne.n	800f892 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f82c:	69fb      	ldr	r3, [r7, #28]
 800f82e:	685a      	ldr	r2, [r3, #4]
 800f830:	4b8d      	ldr	r3, [pc, #564]	; (800fa68 <tcp_input+0x528>)
 800f832:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800f834:	429a      	cmp	r2, r3
 800f836:	d12c      	bne.n	800f892 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800f838:	69fb      	ldr	r3, [r7, #28]
 800f83a:	681a      	ldr	r2, [r3, #0]
 800f83c:	4b8a      	ldr	r3, [pc, #552]	; (800fa68 <tcp_input+0x528>)
 800f83e:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f840:	429a      	cmp	r2, r3
 800f842:	d126      	bne.n	800f892 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800f844:	69fb      	ldr	r3, [r7, #28]
 800f846:	68db      	ldr	r3, [r3, #12]
 800f848:	69fa      	ldr	r2, [r7, #28]
 800f84a:	429a      	cmp	r2, r3
 800f84c:	d106      	bne.n	800f85c <tcp_input+0x31c>
 800f84e:	4b87      	ldr	r3, [pc, #540]	; (800fa6c <tcp_input+0x52c>)
 800f850:	f240 120d 	movw	r2, #269	; 0x10d
 800f854:	4986      	ldr	r1, [pc, #536]	; (800fa70 <tcp_input+0x530>)
 800f856:	4887      	ldr	r0, [pc, #540]	; (800fa74 <tcp_input+0x534>)
 800f858:	f009 f8b8 	bl	80189cc <iprintf>
      if (prev != NULL) {
 800f85c:	69bb      	ldr	r3, [r7, #24]
 800f85e:	2b00      	cmp	r3, #0
 800f860:	d00a      	beq.n	800f878 <tcp_input+0x338>
        prev->next = pcb->next;
 800f862:	69fb      	ldr	r3, [r7, #28]
 800f864:	68da      	ldr	r2, [r3, #12]
 800f866:	69bb      	ldr	r3, [r7, #24]
 800f868:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800f86a:	4b83      	ldr	r3, [pc, #524]	; (800fa78 <tcp_input+0x538>)
 800f86c:	681a      	ldr	r2, [r3, #0]
 800f86e:	69fb      	ldr	r3, [r7, #28]
 800f870:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800f872:	4a81      	ldr	r2, [pc, #516]	; (800fa78 <tcp_input+0x538>)
 800f874:	69fb      	ldr	r3, [r7, #28]
 800f876:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800f878:	69fb      	ldr	r3, [r7, #28]
 800f87a:	68db      	ldr	r3, [r3, #12]
 800f87c:	69fa      	ldr	r2, [r7, #28]
 800f87e:	429a      	cmp	r2, r3
 800f880:	d111      	bne.n	800f8a6 <tcp_input+0x366>
 800f882:	4b7a      	ldr	r3, [pc, #488]	; (800fa6c <tcp_input+0x52c>)
 800f884:	f240 1215 	movw	r2, #277	; 0x115
 800f888:	497c      	ldr	r1, [pc, #496]	; (800fa7c <tcp_input+0x53c>)
 800f88a:	487a      	ldr	r0, [pc, #488]	; (800fa74 <tcp_input+0x534>)
 800f88c:	f009 f89e 	bl	80189cc <iprintf>
      break;
 800f890:	e009      	b.n	800f8a6 <tcp_input+0x366>
    }
    prev = pcb;
 800f892:	69fb      	ldr	r3, [r7, #28]
 800f894:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f896:	69fb      	ldr	r3, [r7, #28]
 800f898:	68db      	ldr	r3, [r3, #12]
 800f89a:	61fb      	str	r3, [r7, #28]
 800f89c:	69fb      	ldr	r3, [r7, #28]
 800f89e:	2b00      	cmp	r3, #0
 800f8a0:	f47f af5e 	bne.w	800f760 <tcp_input+0x220>
 800f8a4:	e000      	b.n	800f8a8 <tcp_input+0x368>
      break;
 800f8a6:	bf00      	nop
  }

  if (pcb == NULL) {
 800f8a8:	69fb      	ldr	r3, [r7, #28]
 800f8aa:	2b00      	cmp	r3, #0
 800f8ac:	f040 8095 	bne.w	800f9da <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f8b0:	4b73      	ldr	r3, [pc, #460]	; (800fa80 <tcp_input+0x540>)
 800f8b2:	681b      	ldr	r3, [r3, #0]
 800f8b4:	61fb      	str	r3, [r7, #28]
 800f8b6:	e03f      	b.n	800f938 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800f8b8:	69fb      	ldr	r3, [r7, #28]
 800f8ba:	7d1b      	ldrb	r3, [r3, #20]
 800f8bc:	2b0a      	cmp	r3, #10
 800f8be:	d006      	beq.n	800f8ce <tcp_input+0x38e>
 800f8c0:	4b6a      	ldr	r3, [pc, #424]	; (800fa6c <tcp_input+0x52c>)
 800f8c2:	f240 121f 	movw	r2, #287	; 0x11f
 800f8c6:	496f      	ldr	r1, [pc, #444]	; (800fa84 <tcp_input+0x544>)
 800f8c8:	486a      	ldr	r0, [pc, #424]	; (800fa74 <tcp_input+0x534>)
 800f8ca:	f009 f87f 	bl	80189cc <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f8ce:	69fb      	ldr	r3, [r7, #28]
 800f8d0:	7a1b      	ldrb	r3, [r3, #8]
 800f8d2:	2b00      	cmp	r3, #0
 800f8d4:	d009      	beq.n	800f8ea <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f8d6:	69fb      	ldr	r3, [r7, #28]
 800f8d8:	7a1a      	ldrb	r2, [r3, #8]
 800f8da:	4b63      	ldr	r3, [pc, #396]	; (800fa68 <tcp_input+0x528>)
 800f8dc:	685b      	ldr	r3, [r3, #4]
 800f8de:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800f8e2:	3301      	adds	r3, #1
 800f8e4:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f8e6:	429a      	cmp	r2, r3
 800f8e8:	d122      	bne.n	800f930 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800f8ea:	69fb      	ldr	r3, [r7, #28]
 800f8ec:	8b1a      	ldrh	r2, [r3, #24]
 800f8ee:	4b5d      	ldr	r3, [pc, #372]	; (800fa64 <tcp_input+0x524>)
 800f8f0:	681b      	ldr	r3, [r3, #0]
 800f8f2:	881b      	ldrh	r3, [r3, #0]
 800f8f4:	b29b      	uxth	r3, r3
 800f8f6:	429a      	cmp	r2, r3
 800f8f8:	d11b      	bne.n	800f932 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800f8fa:	69fb      	ldr	r3, [r7, #28]
 800f8fc:	8ada      	ldrh	r2, [r3, #22]
 800f8fe:	4b59      	ldr	r3, [pc, #356]	; (800fa64 <tcp_input+0x524>)
 800f900:	681b      	ldr	r3, [r3, #0]
 800f902:	885b      	ldrh	r3, [r3, #2]
 800f904:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800f906:	429a      	cmp	r2, r3
 800f908:	d113      	bne.n	800f932 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f90a:	69fb      	ldr	r3, [r7, #28]
 800f90c:	685a      	ldr	r2, [r3, #4]
 800f90e:	4b56      	ldr	r3, [pc, #344]	; (800fa68 <tcp_input+0x528>)
 800f910:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800f912:	429a      	cmp	r2, r3
 800f914:	d10d      	bne.n	800f932 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800f916:	69fb      	ldr	r3, [r7, #28]
 800f918:	681a      	ldr	r2, [r3, #0]
 800f91a:	4b53      	ldr	r3, [pc, #332]	; (800fa68 <tcp_input+0x528>)
 800f91c:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f91e:	429a      	cmp	r2, r3
 800f920:	d107      	bne.n	800f932 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800f922:	69f8      	ldr	r0, [r7, #28]
 800f924:	f000 fb54 	bl	800ffd0 <tcp_timewait_input>
        }
        pbuf_free(p);
 800f928:	6878      	ldr	r0, [r7, #4]
 800f92a:	f7fd ffd1 	bl	800d8d0 <pbuf_free>
        return;
 800f92e:	e1f0      	b.n	800fd12 <tcp_input+0x7d2>
        continue;
 800f930:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f932:	69fb      	ldr	r3, [r7, #28]
 800f934:	68db      	ldr	r3, [r3, #12]
 800f936:	61fb      	str	r3, [r7, #28]
 800f938:	69fb      	ldr	r3, [r7, #28]
 800f93a:	2b00      	cmp	r3, #0
 800f93c:	d1bc      	bne.n	800f8b8 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800f93e:	2300      	movs	r3, #0
 800f940:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f942:	4b51      	ldr	r3, [pc, #324]	; (800fa88 <tcp_input+0x548>)
 800f944:	681b      	ldr	r3, [r3, #0]
 800f946:	617b      	str	r3, [r7, #20]
 800f948:	e02a      	b.n	800f9a0 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800f94a:	697b      	ldr	r3, [r7, #20]
 800f94c:	7a1b      	ldrb	r3, [r3, #8]
 800f94e:	2b00      	cmp	r3, #0
 800f950:	d00c      	beq.n	800f96c <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f952:	697b      	ldr	r3, [r7, #20]
 800f954:	7a1a      	ldrb	r2, [r3, #8]
 800f956:	4b44      	ldr	r3, [pc, #272]	; (800fa68 <tcp_input+0x528>)
 800f958:	685b      	ldr	r3, [r3, #4]
 800f95a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800f95e:	3301      	adds	r3, #1
 800f960:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800f962:	429a      	cmp	r2, r3
 800f964:	d002      	beq.n	800f96c <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800f966:	697b      	ldr	r3, [r7, #20]
 800f968:	61bb      	str	r3, [r7, #24]
        continue;
 800f96a:	e016      	b.n	800f99a <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800f96c:	697b      	ldr	r3, [r7, #20]
 800f96e:	8ada      	ldrh	r2, [r3, #22]
 800f970:	4b3c      	ldr	r3, [pc, #240]	; (800fa64 <tcp_input+0x524>)
 800f972:	681b      	ldr	r3, [r3, #0]
 800f974:	885b      	ldrh	r3, [r3, #2]
 800f976:	b29b      	uxth	r3, r3
 800f978:	429a      	cmp	r2, r3
 800f97a:	d10c      	bne.n	800f996 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800f97c:	697b      	ldr	r3, [r7, #20]
 800f97e:	681a      	ldr	r2, [r3, #0]
 800f980:	4b39      	ldr	r3, [pc, #228]	; (800fa68 <tcp_input+0x528>)
 800f982:	695b      	ldr	r3, [r3, #20]
 800f984:	429a      	cmp	r2, r3
 800f986:	d00f      	beq.n	800f9a8 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800f988:	697b      	ldr	r3, [r7, #20]
 800f98a:	2b00      	cmp	r3, #0
 800f98c:	d00d      	beq.n	800f9aa <tcp_input+0x46a>
 800f98e:	697b      	ldr	r3, [r7, #20]
 800f990:	681b      	ldr	r3, [r3, #0]
 800f992:	2b00      	cmp	r3, #0
 800f994:	d009      	beq.n	800f9aa <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800f996:	697b      	ldr	r3, [r7, #20]
 800f998:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f99a:	697b      	ldr	r3, [r7, #20]
 800f99c:	68db      	ldr	r3, [r3, #12]
 800f99e:	617b      	str	r3, [r7, #20]
 800f9a0:	697b      	ldr	r3, [r7, #20]
 800f9a2:	2b00      	cmp	r3, #0
 800f9a4:	d1d1      	bne.n	800f94a <tcp_input+0x40a>
 800f9a6:	e000      	b.n	800f9aa <tcp_input+0x46a>
            break;
 800f9a8:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800f9aa:	697b      	ldr	r3, [r7, #20]
 800f9ac:	2b00      	cmp	r3, #0
 800f9ae:	d014      	beq.n	800f9da <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800f9b0:	69bb      	ldr	r3, [r7, #24]
 800f9b2:	2b00      	cmp	r3, #0
 800f9b4:	d00a      	beq.n	800f9cc <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800f9b6:	697b      	ldr	r3, [r7, #20]
 800f9b8:	68da      	ldr	r2, [r3, #12]
 800f9ba:	69bb      	ldr	r3, [r7, #24]
 800f9bc:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800f9be:	4b32      	ldr	r3, [pc, #200]	; (800fa88 <tcp_input+0x548>)
 800f9c0:	681a      	ldr	r2, [r3, #0]
 800f9c2:	697b      	ldr	r3, [r7, #20]
 800f9c4:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800f9c6:	4a30      	ldr	r2, [pc, #192]	; (800fa88 <tcp_input+0x548>)
 800f9c8:	697b      	ldr	r3, [r7, #20]
 800f9ca:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800f9cc:	6978      	ldr	r0, [r7, #20]
 800f9ce:	f000 fa01 	bl	800fdd4 <tcp_listen_input>
      }
      pbuf_free(p);
 800f9d2:	6878      	ldr	r0, [r7, #4]
 800f9d4:	f7fd ff7c 	bl	800d8d0 <pbuf_free>
      return;
 800f9d8:	e19b      	b.n	800fd12 <tcp_input+0x7d2>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800f9da:	69fb      	ldr	r3, [r7, #28]
 800f9dc:	2b00      	cmp	r3, #0
 800f9de:	f000 8160 	beq.w	800fca2 <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800f9e2:	4b2a      	ldr	r3, [pc, #168]	; (800fa8c <tcp_input+0x54c>)
 800f9e4:	2200      	movs	r2, #0
 800f9e6:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800f9e8:	687b      	ldr	r3, [r7, #4]
 800f9ea:	891a      	ldrh	r2, [r3, #8]
 800f9ec:	4b27      	ldr	r3, [pc, #156]	; (800fa8c <tcp_input+0x54c>)
 800f9ee:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800f9f0:	4a26      	ldr	r2, [pc, #152]	; (800fa8c <tcp_input+0x54c>)
 800f9f2:	687b      	ldr	r3, [r7, #4]
 800f9f4:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800f9f6:	4b1b      	ldr	r3, [pc, #108]	; (800fa64 <tcp_input+0x524>)
 800f9f8:	681b      	ldr	r3, [r3, #0]
 800f9fa:	4a24      	ldr	r2, [pc, #144]	; (800fa8c <tcp_input+0x54c>)
 800f9fc:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800f9fe:	4b24      	ldr	r3, [pc, #144]	; (800fa90 <tcp_input+0x550>)
 800fa00:	2200      	movs	r2, #0
 800fa02:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800fa04:	4b23      	ldr	r3, [pc, #140]	; (800fa94 <tcp_input+0x554>)
 800fa06:	2200      	movs	r2, #0
 800fa08:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800fa0a:	4b23      	ldr	r3, [pc, #140]	; (800fa98 <tcp_input+0x558>)
 800fa0c:	2200      	movs	r2, #0
 800fa0e:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800fa10:	4b22      	ldr	r3, [pc, #136]	; (800fa9c <tcp_input+0x55c>)
 800fa12:	781b      	ldrb	r3, [r3, #0]
 800fa14:	f003 0308 	and.w	r3, r3, #8
 800fa18:	2b00      	cmp	r3, #0
 800fa1a:	d006      	beq.n	800fa2a <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 800fa1c:	687b      	ldr	r3, [r7, #4]
 800fa1e:	7b5b      	ldrb	r3, [r3, #13]
 800fa20:	f043 0301 	orr.w	r3, r3, #1
 800fa24:	b2da      	uxtb	r2, r3
 800fa26:	687b      	ldr	r3, [r7, #4]
 800fa28:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800fa2a:	69fb      	ldr	r3, [r7, #28]
 800fa2c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fa2e:	2b00      	cmp	r3, #0
 800fa30:	d038      	beq.n	800faa4 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800fa32:	69f8      	ldr	r0, [r7, #28]
 800fa34:	f7ff f93e 	bl	800ecb4 <tcp_process_refused_data>
 800fa38:	4603      	mov	r3, r0
 800fa3a:	f113 0f0d 	cmn.w	r3, #13
 800fa3e:	d007      	beq.n	800fa50 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800fa40:	69fb      	ldr	r3, [r7, #28]
 800fa42:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800fa44:	2b00      	cmp	r3, #0
 800fa46:	d02d      	beq.n	800faa4 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800fa48:	4b15      	ldr	r3, [pc, #84]	; (800faa0 <tcp_input+0x560>)
 800fa4a:	881b      	ldrh	r3, [r3, #0]
 800fa4c:	2b00      	cmp	r3, #0
 800fa4e:	d029      	beq.n	800faa4 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800fa50:	69fb      	ldr	r3, [r7, #28]
 800fa52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fa54:	2b00      	cmp	r3, #0
 800fa56:	f040 8104 	bne.w	800fc62 <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800fa5a:	69f8      	ldr	r0, [r7, #28]
 800fa5c:	f003 f9bc 	bl	8012dd8 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800fa60:	e0ff      	b.n	800fc62 <tcp_input+0x722>
 800fa62:	bf00      	nop
 800fa64:	200004ac 	.word	0x200004ac
 800fa68:	2000402c 	.word	0x2000402c
 800fa6c:	0801f238 	.word	0x0801f238
 800fa70:	0801f364 	.word	0x0801f364
 800fa74:	0801f284 	.word	0x0801f284
 800fa78:	20007150 	.word	0x20007150
 800fa7c:	0801f390 	.word	0x0801f390
 800fa80:	20007160 	.word	0x20007160
 800fa84:	0801f3bc 	.word	0x0801f3bc
 800fa88:	20007158 	.word	0x20007158
 800fa8c:	2000049c 	.word	0x2000049c
 800fa90:	200004cc 	.word	0x200004cc
 800fa94:	200004c9 	.word	0x200004c9
 800fa98:	200004c4 	.word	0x200004c4
 800fa9c:	200004c8 	.word	0x200004c8
 800faa0:	200004c6 	.word	0x200004c6
      }
    }
    tcp_input_pcb = pcb;
 800faa4:	4a9c      	ldr	r2, [pc, #624]	; (800fd18 <tcp_input+0x7d8>)
 800faa6:	69fb      	ldr	r3, [r7, #28]
 800faa8:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800faaa:	69f8      	ldr	r0, [r7, #28]
 800faac:	f000 fb0a 	bl	80100c4 <tcp_process>
 800fab0:	4603      	mov	r3, r0
 800fab2:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800fab4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800fab8:	f113 0f0d 	cmn.w	r3, #13
 800fabc:	f000 80d3 	beq.w	800fc66 <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 800fac0:	4b96      	ldr	r3, [pc, #600]	; (800fd1c <tcp_input+0x7dc>)
 800fac2:	781b      	ldrb	r3, [r3, #0]
 800fac4:	f003 0308 	and.w	r3, r3, #8
 800fac8:	2b00      	cmp	r3, #0
 800faca:	d015      	beq.n	800faf8 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800facc:	69fb      	ldr	r3, [r7, #28]
 800face:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fad2:	2b00      	cmp	r3, #0
 800fad4:	d008      	beq.n	800fae8 <tcp_input+0x5a8>
 800fad6:	69fb      	ldr	r3, [r7, #28]
 800fad8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fadc:	69fa      	ldr	r2, [r7, #28]
 800fade:	6912      	ldr	r2, [r2, #16]
 800fae0:	f06f 010d 	mvn.w	r1, #13
 800fae4:	4610      	mov	r0, r2
 800fae6:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800fae8:	69f9      	ldr	r1, [r7, #28]
 800faea:	488d      	ldr	r0, [pc, #564]	; (800fd20 <tcp_input+0x7e0>)
 800faec:	f7ff fbb0 	bl	800f250 <tcp_pcb_remove>
        tcp_free(pcb);
 800faf0:	69f8      	ldr	r0, [r7, #28]
 800faf2:	f7fe f99d 	bl	800de30 <tcp_free>
 800faf6:	e0c1      	b.n	800fc7c <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 800faf8:	2300      	movs	r3, #0
 800fafa:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800fafc:	4b89      	ldr	r3, [pc, #548]	; (800fd24 <tcp_input+0x7e4>)
 800fafe:	881b      	ldrh	r3, [r3, #0]
 800fb00:	2b00      	cmp	r3, #0
 800fb02:	d01d      	beq.n	800fb40 <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800fb04:	4b87      	ldr	r3, [pc, #540]	; (800fd24 <tcp_input+0x7e4>)
 800fb06:	881b      	ldrh	r3, [r3, #0]
 800fb08:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800fb0a:	69fb      	ldr	r3, [r7, #28]
 800fb0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800fb10:	2b00      	cmp	r3, #0
 800fb12:	d00a      	beq.n	800fb2a <tcp_input+0x5ea>
 800fb14:	69fb      	ldr	r3, [r7, #28]
 800fb16:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800fb1a:	69fa      	ldr	r2, [r7, #28]
 800fb1c:	6910      	ldr	r0, [r2, #16]
 800fb1e:	89fa      	ldrh	r2, [r7, #14]
 800fb20:	69f9      	ldr	r1, [r7, #28]
 800fb22:	4798      	blx	r3
 800fb24:	4603      	mov	r3, r0
 800fb26:	74fb      	strb	r3, [r7, #19]
 800fb28:	e001      	b.n	800fb2e <tcp_input+0x5ee>
 800fb2a:	2300      	movs	r3, #0
 800fb2c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800fb2e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800fb32:	f113 0f0d 	cmn.w	r3, #13
 800fb36:	f000 8098 	beq.w	800fc6a <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 800fb3a:	4b7a      	ldr	r3, [pc, #488]	; (800fd24 <tcp_input+0x7e4>)
 800fb3c:	2200      	movs	r2, #0
 800fb3e:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800fb40:	69f8      	ldr	r0, [r7, #28]
 800fb42:	f000 f907 	bl	800fd54 <tcp_input_delayed_close>
 800fb46:	4603      	mov	r3, r0
 800fb48:	2b00      	cmp	r3, #0
 800fb4a:	f040 8090 	bne.w	800fc6e <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800fb4e:	4b76      	ldr	r3, [pc, #472]	; (800fd28 <tcp_input+0x7e8>)
 800fb50:	681b      	ldr	r3, [r3, #0]
 800fb52:	2b00      	cmp	r3, #0
 800fb54:	d041      	beq.n	800fbda <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800fb56:	69fb      	ldr	r3, [r7, #28]
 800fb58:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fb5a:	2b00      	cmp	r3, #0
 800fb5c:	d006      	beq.n	800fb6c <tcp_input+0x62c>
 800fb5e:	4b73      	ldr	r3, [pc, #460]	; (800fd2c <tcp_input+0x7ec>)
 800fb60:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800fb64:	4972      	ldr	r1, [pc, #456]	; (800fd30 <tcp_input+0x7f0>)
 800fb66:	4873      	ldr	r0, [pc, #460]	; (800fd34 <tcp_input+0x7f4>)
 800fb68:	f008 ff30 	bl	80189cc <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800fb6c:	69fb      	ldr	r3, [r7, #28]
 800fb6e:	8b5b      	ldrh	r3, [r3, #26]
 800fb70:	f003 0310 	and.w	r3, r3, #16
 800fb74:	2b00      	cmp	r3, #0
 800fb76:	d008      	beq.n	800fb8a <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800fb78:	4b6b      	ldr	r3, [pc, #428]	; (800fd28 <tcp_input+0x7e8>)
 800fb7a:	681b      	ldr	r3, [r3, #0]
 800fb7c:	4618      	mov	r0, r3
 800fb7e:	f7fd fea7 	bl	800d8d0 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800fb82:	69f8      	ldr	r0, [r7, #28]
 800fb84:	f7fe fc3c 	bl	800e400 <tcp_abort>
            goto aborted;
 800fb88:	e078      	b.n	800fc7c <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800fb8a:	69fb      	ldr	r3, [r7, #28]
 800fb8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fb90:	2b00      	cmp	r3, #0
 800fb92:	d00c      	beq.n	800fbae <tcp_input+0x66e>
 800fb94:	69fb      	ldr	r3, [r7, #28]
 800fb96:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800fb9a:	69fb      	ldr	r3, [r7, #28]
 800fb9c:	6918      	ldr	r0, [r3, #16]
 800fb9e:	4b62      	ldr	r3, [pc, #392]	; (800fd28 <tcp_input+0x7e8>)
 800fba0:	681a      	ldr	r2, [r3, #0]
 800fba2:	2300      	movs	r3, #0
 800fba4:	69f9      	ldr	r1, [r7, #28]
 800fba6:	47a0      	blx	r4
 800fba8:	4603      	mov	r3, r0
 800fbaa:	74fb      	strb	r3, [r7, #19]
 800fbac:	e008      	b.n	800fbc0 <tcp_input+0x680>
 800fbae:	4b5e      	ldr	r3, [pc, #376]	; (800fd28 <tcp_input+0x7e8>)
 800fbb0:	681a      	ldr	r2, [r3, #0]
 800fbb2:	2300      	movs	r3, #0
 800fbb4:	69f9      	ldr	r1, [r7, #28]
 800fbb6:	2000      	movs	r0, #0
 800fbb8:	f7ff f952 	bl	800ee60 <tcp_recv_null>
 800fbbc:	4603      	mov	r3, r0
 800fbbe:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800fbc0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800fbc4:	f113 0f0d 	cmn.w	r3, #13
 800fbc8:	d053      	beq.n	800fc72 <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800fbca:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800fbce:	2b00      	cmp	r3, #0
 800fbd0:	d003      	beq.n	800fbda <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800fbd2:	4b55      	ldr	r3, [pc, #340]	; (800fd28 <tcp_input+0x7e8>)
 800fbd4:	681a      	ldr	r2, [r3, #0]
 800fbd6:	69fb      	ldr	r3, [r7, #28]
 800fbd8:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800fbda:	4b50      	ldr	r3, [pc, #320]	; (800fd1c <tcp_input+0x7dc>)
 800fbdc:	781b      	ldrb	r3, [r3, #0]
 800fbde:	f003 0320 	and.w	r3, r3, #32
 800fbe2:	2b00      	cmp	r3, #0
 800fbe4:	d030      	beq.n	800fc48 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 800fbe6:	69fb      	ldr	r3, [r7, #28]
 800fbe8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fbea:	2b00      	cmp	r3, #0
 800fbec:	d009      	beq.n	800fc02 <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800fbee:	69fb      	ldr	r3, [r7, #28]
 800fbf0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fbf2:	7b5a      	ldrb	r2, [r3, #13]
 800fbf4:	69fb      	ldr	r3, [r7, #28]
 800fbf6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fbf8:	f042 0220 	orr.w	r2, r2, #32
 800fbfc:	b2d2      	uxtb	r2, r2
 800fbfe:	735a      	strb	r2, [r3, #13]
 800fc00:	e022      	b.n	800fc48 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800fc02:	69fb      	ldr	r3, [r7, #28]
 800fc04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fc06:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800fc0a:	d005      	beq.n	800fc18 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 800fc0c:	69fb      	ldr	r3, [r7, #28]
 800fc0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fc10:	3301      	adds	r3, #1
 800fc12:	b29a      	uxth	r2, r3
 800fc14:	69fb      	ldr	r3, [r7, #28]
 800fc16:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800fc18:	69fb      	ldr	r3, [r7, #28]
 800fc1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fc1e:	2b00      	cmp	r3, #0
 800fc20:	d00b      	beq.n	800fc3a <tcp_input+0x6fa>
 800fc22:	69fb      	ldr	r3, [r7, #28]
 800fc24:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800fc28:	69fb      	ldr	r3, [r7, #28]
 800fc2a:	6918      	ldr	r0, [r3, #16]
 800fc2c:	2300      	movs	r3, #0
 800fc2e:	2200      	movs	r2, #0
 800fc30:	69f9      	ldr	r1, [r7, #28]
 800fc32:	47a0      	blx	r4
 800fc34:	4603      	mov	r3, r0
 800fc36:	74fb      	strb	r3, [r7, #19]
 800fc38:	e001      	b.n	800fc3e <tcp_input+0x6fe>
 800fc3a:	2300      	movs	r3, #0
 800fc3c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800fc3e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800fc42:	f113 0f0d 	cmn.w	r3, #13
 800fc46:	d016      	beq.n	800fc76 <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800fc48:	4b33      	ldr	r3, [pc, #204]	; (800fd18 <tcp_input+0x7d8>)
 800fc4a:	2200      	movs	r2, #0
 800fc4c:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800fc4e:	69f8      	ldr	r0, [r7, #28]
 800fc50:	f000 f880 	bl	800fd54 <tcp_input_delayed_close>
 800fc54:	4603      	mov	r3, r0
 800fc56:	2b00      	cmp	r3, #0
 800fc58:	d10f      	bne.n	800fc7a <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800fc5a:	69f8      	ldr	r0, [r7, #28]
 800fc5c:	f002 fab8 	bl	80121d0 <tcp_output>
 800fc60:	e00c      	b.n	800fc7c <tcp_input+0x73c>
        goto aborted;
 800fc62:	bf00      	nop
 800fc64:	e00a      	b.n	800fc7c <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800fc66:	bf00      	nop
 800fc68:	e008      	b.n	800fc7c <tcp_input+0x73c>
              goto aborted;
 800fc6a:	bf00      	nop
 800fc6c:	e006      	b.n	800fc7c <tcp_input+0x73c>
          goto aborted;
 800fc6e:	bf00      	nop
 800fc70:	e004      	b.n	800fc7c <tcp_input+0x73c>
            goto aborted;
 800fc72:	bf00      	nop
 800fc74:	e002      	b.n	800fc7c <tcp_input+0x73c>
              goto aborted;
 800fc76:	bf00      	nop
 800fc78:	e000      	b.n	800fc7c <tcp_input+0x73c>
          goto aborted;
 800fc7a:	bf00      	nop
    tcp_input_pcb = NULL;
 800fc7c:	4b26      	ldr	r3, [pc, #152]	; (800fd18 <tcp_input+0x7d8>)
 800fc7e:	2200      	movs	r2, #0
 800fc80:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800fc82:	4b29      	ldr	r3, [pc, #164]	; (800fd28 <tcp_input+0x7e8>)
 800fc84:	2200      	movs	r2, #0
 800fc86:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800fc88:	4b2b      	ldr	r3, [pc, #172]	; (800fd38 <tcp_input+0x7f8>)
 800fc8a:	685b      	ldr	r3, [r3, #4]
 800fc8c:	2b00      	cmp	r3, #0
 800fc8e:	d03f      	beq.n	800fd10 <tcp_input+0x7d0>
      pbuf_free(inseg.p);
 800fc90:	4b29      	ldr	r3, [pc, #164]	; (800fd38 <tcp_input+0x7f8>)
 800fc92:	685b      	ldr	r3, [r3, #4]
 800fc94:	4618      	mov	r0, r3
 800fc96:	f7fd fe1b 	bl	800d8d0 <pbuf_free>
      inseg.p = NULL;
 800fc9a:	4b27      	ldr	r3, [pc, #156]	; (800fd38 <tcp_input+0x7f8>)
 800fc9c:	2200      	movs	r2, #0
 800fc9e:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800fca0:	e036      	b.n	800fd10 <tcp_input+0x7d0>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800fca2:	4b26      	ldr	r3, [pc, #152]	; (800fd3c <tcp_input+0x7fc>)
 800fca4:	681b      	ldr	r3, [r3, #0]
 800fca6:	899b      	ldrh	r3, [r3, #12]
 800fca8:	b29b      	uxth	r3, r3
 800fcaa:	4618      	mov	r0, r3
 800fcac:	f7fc fb74 	bl	800c398 <lwip_htons>
 800fcb0:	4603      	mov	r3, r0
 800fcb2:	b2db      	uxtb	r3, r3
 800fcb4:	f003 0304 	and.w	r3, r3, #4
 800fcb8:	2b00      	cmp	r3, #0
 800fcba:	d118      	bne.n	800fcee <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fcbc:	4b20      	ldr	r3, [pc, #128]	; (800fd40 <tcp_input+0x800>)
 800fcbe:	6819      	ldr	r1, [r3, #0]
 800fcc0:	4b20      	ldr	r3, [pc, #128]	; (800fd44 <tcp_input+0x804>)
 800fcc2:	881b      	ldrh	r3, [r3, #0]
 800fcc4:	461a      	mov	r2, r3
 800fcc6:	4b20      	ldr	r3, [pc, #128]	; (800fd48 <tcp_input+0x808>)
 800fcc8:	681b      	ldr	r3, [r3, #0]
 800fcca:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fccc:	4b1b      	ldr	r3, [pc, #108]	; (800fd3c <tcp_input+0x7fc>)
 800fcce:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fcd0:	885b      	ldrh	r3, [r3, #2]
 800fcd2:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fcd4:	4a19      	ldr	r2, [pc, #100]	; (800fd3c <tcp_input+0x7fc>)
 800fcd6:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fcd8:	8812      	ldrh	r2, [r2, #0]
 800fcda:	b292      	uxth	r2, r2
 800fcdc:	9202      	str	r2, [sp, #8]
 800fcde:	9301      	str	r3, [sp, #4]
 800fce0:	4b1a      	ldr	r3, [pc, #104]	; (800fd4c <tcp_input+0x80c>)
 800fce2:	9300      	str	r3, [sp, #0]
 800fce4:	4b1a      	ldr	r3, [pc, #104]	; (800fd50 <tcp_input+0x810>)
 800fce6:	4602      	mov	r2, r0
 800fce8:	2000      	movs	r0, #0
 800fcea:	f003 f825 	bl	8012d38 <tcp_rst>
    pbuf_free(p);
 800fcee:	6878      	ldr	r0, [r7, #4]
 800fcf0:	f7fd fdee 	bl	800d8d0 <pbuf_free>
  return;
 800fcf4:	e00c      	b.n	800fd10 <tcp_input+0x7d0>
    goto dropped;
 800fcf6:	bf00      	nop
 800fcf8:	e006      	b.n	800fd08 <tcp_input+0x7c8>
    goto dropped;
 800fcfa:	bf00      	nop
 800fcfc:	e004      	b.n	800fd08 <tcp_input+0x7c8>
    goto dropped;
 800fcfe:	bf00      	nop
 800fd00:	e002      	b.n	800fd08 <tcp_input+0x7c8>
      goto dropped;
 800fd02:	bf00      	nop
 800fd04:	e000      	b.n	800fd08 <tcp_input+0x7c8>
      goto dropped;
 800fd06:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800fd08:	6878      	ldr	r0, [r7, #4]
 800fd0a:	f7fd fde1 	bl	800d8d0 <pbuf_free>
 800fd0e:	e000      	b.n	800fd12 <tcp_input+0x7d2>
  return;
 800fd10:	bf00      	nop
}
 800fd12:	3724      	adds	r7, #36	; 0x24
 800fd14:	46bd      	mov	sp, r7
 800fd16:	bd90      	pop	{r4, r7, pc}
 800fd18:	20007164 	.word	0x20007164
 800fd1c:	200004c9 	.word	0x200004c9
 800fd20:	20007150 	.word	0x20007150
 800fd24:	200004c4 	.word	0x200004c4
 800fd28:	200004cc 	.word	0x200004cc
 800fd2c:	0801f238 	.word	0x0801f238
 800fd30:	0801f3ec 	.word	0x0801f3ec
 800fd34:	0801f284 	.word	0x0801f284
 800fd38:	2000049c 	.word	0x2000049c
 800fd3c:	200004ac 	.word	0x200004ac
 800fd40:	200004c0 	.word	0x200004c0
 800fd44:	200004c6 	.word	0x200004c6
 800fd48:	200004bc 	.word	0x200004bc
 800fd4c:	2000403c 	.word	0x2000403c
 800fd50:	20004040 	.word	0x20004040

0800fd54 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800fd54:	b580      	push	{r7, lr}
 800fd56:	b082      	sub	sp, #8
 800fd58:	af00      	add	r7, sp, #0
 800fd5a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800fd5c:	687b      	ldr	r3, [r7, #4]
 800fd5e:	2b00      	cmp	r3, #0
 800fd60:	d106      	bne.n	800fd70 <tcp_input_delayed_close+0x1c>
 800fd62:	4b17      	ldr	r3, [pc, #92]	; (800fdc0 <tcp_input_delayed_close+0x6c>)
 800fd64:	f240 225a 	movw	r2, #602	; 0x25a
 800fd68:	4916      	ldr	r1, [pc, #88]	; (800fdc4 <tcp_input_delayed_close+0x70>)
 800fd6a:	4817      	ldr	r0, [pc, #92]	; (800fdc8 <tcp_input_delayed_close+0x74>)
 800fd6c:	f008 fe2e 	bl	80189cc <iprintf>

  if (recv_flags & TF_CLOSED) {
 800fd70:	4b16      	ldr	r3, [pc, #88]	; (800fdcc <tcp_input_delayed_close+0x78>)
 800fd72:	781b      	ldrb	r3, [r3, #0]
 800fd74:	f003 0310 	and.w	r3, r3, #16
 800fd78:	2b00      	cmp	r3, #0
 800fd7a:	d01c      	beq.n	800fdb6 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800fd7c:	687b      	ldr	r3, [r7, #4]
 800fd7e:	8b5b      	ldrh	r3, [r3, #26]
 800fd80:	f003 0310 	and.w	r3, r3, #16
 800fd84:	2b00      	cmp	r3, #0
 800fd86:	d10d      	bne.n	800fda4 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800fd88:	687b      	ldr	r3, [r7, #4]
 800fd8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fd8e:	2b00      	cmp	r3, #0
 800fd90:	d008      	beq.n	800fda4 <tcp_input_delayed_close+0x50>
 800fd92:	687b      	ldr	r3, [r7, #4]
 800fd94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fd98:	687a      	ldr	r2, [r7, #4]
 800fd9a:	6912      	ldr	r2, [r2, #16]
 800fd9c:	f06f 010e 	mvn.w	r1, #14
 800fda0:	4610      	mov	r0, r2
 800fda2:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800fda4:	6879      	ldr	r1, [r7, #4]
 800fda6:	480a      	ldr	r0, [pc, #40]	; (800fdd0 <tcp_input_delayed_close+0x7c>)
 800fda8:	f7ff fa52 	bl	800f250 <tcp_pcb_remove>
    tcp_free(pcb);
 800fdac:	6878      	ldr	r0, [r7, #4]
 800fdae:	f7fe f83f 	bl	800de30 <tcp_free>
    return 1;
 800fdb2:	2301      	movs	r3, #1
 800fdb4:	e000      	b.n	800fdb8 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800fdb6:	2300      	movs	r3, #0
}
 800fdb8:	4618      	mov	r0, r3
 800fdba:	3708      	adds	r7, #8
 800fdbc:	46bd      	mov	sp, r7
 800fdbe:	bd80      	pop	{r7, pc}
 800fdc0:	0801f238 	.word	0x0801f238
 800fdc4:	0801f408 	.word	0x0801f408
 800fdc8:	0801f284 	.word	0x0801f284
 800fdcc:	200004c9 	.word	0x200004c9
 800fdd0:	20007150 	.word	0x20007150

0800fdd4 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800fdd4:	b590      	push	{r4, r7, lr}
 800fdd6:	b08b      	sub	sp, #44	; 0x2c
 800fdd8:	af04      	add	r7, sp, #16
 800fdda:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800fddc:	4b6f      	ldr	r3, [pc, #444]	; (800ff9c <tcp_listen_input+0x1c8>)
 800fdde:	781b      	ldrb	r3, [r3, #0]
 800fde0:	f003 0304 	and.w	r3, r3, #4
 800fde4:	2b00      	cmp	r3, #0
 800fde6:	f040 80d2 	bne.w	800ff8e <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800fdea:	687b      	ldr	r3, [r7, #4]
 800fdec:	2b00      	cmp	r3, #0
 800fdee:	d106      	bne.n	800fdfe <tcp_listen_input+0x2a>
 800fdf0:	4b6b      	ldr	r3, [pc, #428]	; (800ffa0 <tcp_listen_input+0x1cc>)
 800fdf2:	f240 2281 	movw	r2, #641	; 0x281
 800fdf6:	496b      	ldr	r1, [pc, #428]	; (800ffa4 <tcp_listen_input+0x1d0>)
 800fdf8:	486b      	ldr	r0, [pc, #428]	; (800ffa8 <tcp_listen_input+0x1d4>)
 800fdfa:	f008 fde7 	bl	80189cc <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800fdfe:	4b67      	ldr	r3, [pc, #412]	; (800ff9c <tcp_listen_input+0x1c8>)
 800fe00:	781b      	ldrb	r3, [r3, #0]
 800fe02:	f003 0310 	and.w	r3, r3, #16
 800fe06:	2b00      	cmp	r3, #0
 800fe08:	d019      	beq.n	800fe3e <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fe0a:	4b68      	ldr	r3, [pc, #416]	; (800ffac <tcp_listen_input+0x1d8>)
 800fe0c:	6819      	ldr	r1, [r3, #0]
 800fe0e:	4b68      	ldr	r3, [pc, #416]	; (800ffb0 <tcp_listen_input+0x1dc>)
 800fe10:	881b      	ldrh	r3, [r3, #0]
 800fe12:	461a      	mov	r2, r3
 800fe14:	4b67      	ldr	r3, [pc, #412]	; (800ffb4 <tcp_listen_input+0x1e0>)
 800fe16:	681b      	ldr	r3, [r3, #0]
 800fe18:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fe1a:	4b67      	ldr	r3, [pc, #412]	; (800ffb8 <tcp_listen_input+0x1e4>)
 800fe1c:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fe1e:	885b      	ldrh	r3, [r3, #2]
 800fe20:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fe22:	4a65      	ldr	r2, [pc, #404]	; (800ffb8 <tcp_listen_input+0x1e4>)
 800fe24:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fe26:	8812      	ldrh	r2, [r2, #0]
 800fe28:	b292      	uxth	r2, r2
 800fe2a:	9202      	str	r2, [sp, #8]
 800fe2c:	9301      	str	r3, [sp, #4]
 800fe2e:	4b63      	ldr	r3, [pc, #396]	; (800ffbc <tcp_listen_input+0x1e8>)
 800fe30:	9300      	str	r3, [sp, #0]
 800fe32:	4b63      	ldr	r3, [pc, #396]	; (800ffc0 <tcp_listen_input+0x1ec>)
 800fe34:	4602      	mov	r2, r0
 800fe36:	6878      	ldr	r0, [r7, #4]
 800fe38:	f002 ff7e 	bl	8012d38 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800fe3c:	e0a9      	b.n	800ff92 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800fe3e:	4b57      	ldr	r3, [pc, #348]	; (800ff9c <tcp_listen_input+0x1c8>)
 800fe40:	781b      	ldrb	r3, [r3, #0]
 800fe42:	f003 0302 	and.w	r3, r3, #2
 800fe46:	2b00      	cmp	r3, #0
 800fe48:	f000 80a3 	beq.w	800ff92 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800fe4c:	687b      	ldr	r3, [r7, #4]
 800fe4e:	7d5b      	ldrb	r3, [r3, #21]
 800fe50:	4618      	mov	r0, r3
 800fe52:	f7ff f929 	bl	800f0a8 <tcp_alloc>
 800fe56:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800fe58:	697b      	ldr	r3, [r7, #20]
 800fe5a:	2b00      	cmp	r3, #0
 800fe5c:	d111      	bne.n	800fe82 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800fe5e:	687b      	ldr	r3, [r7, #4]
 800fe60:	699b      	ldr	r3, [r3, #24]
 800fe62:	2b00      	cmp	r3, #0
 800fe64:	d00a      	beq.n	800fe7c <tcp_listen_input+0xa8>
 800fe66:	687b      	ldr	r3, [r7, #4]
 800fe68:	699b      	ldr	r3, [r3, #24]
 800fe6a:	687a      	ldr	r2, [r7, #4]
 800fe6c:	6910      	ldr	r0, [r2, #16]
 800fe6e:	f04f 32ff 	mov.w	r2, #4294967295
 800fe72:	2100      	movs	r1, #0
 800fe74:	4798      	blx	r3
 800fe76:	4603      	mov	r3, r0
 800fe78:	73bb      	strb	r3, [r7, #14]
      return;
 800fe7a:	e08b      	b.n	800ff94 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800fe7c:	23f0      	movs	r3, #240	; 0xf0
 800fe7e:	73bb      	strb	r3, [r7, #14]
      return;
 800fe80:	e088      	b.n	800ff94 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800fe82:	4b50      	ldr	r3, [pc, #320]	; (800ffc4 <tcp_listen_input+0x1f0>)
 800fe84:	695a      	ldr	r2, [r3, #20]
 800fe86:	697b      	ldr	r3, [r7, #20]
 800fe88:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800fe8a:	4b4e      	ldr	r3, [pc, #312]	; (800ffc4 <tcp_listen_input+0x1f0>)
 800fe8c:	691a      	ldr	r2, [r3, #16]
 800fe8e:	697b      	ldr	r3, [r7, #20]
 800fe90:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800fe92:	687b      	ldr	r3, [r7, #4]
 800fe94:	8ada      	ldrh	r2, [r3, #22]
 800fe96:	697b      	ldr	r3, [r7, #20]
 800fe98:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800fe9a:	4b47      	ldr	r3, [pc, #284]	; (800ffb8 <tcp_listen_input+0x1e4>)
 800fe9c:	681b      	ldr	r3, [r3, #0]
 800fe9e:	881b      	ldrh	r3, [r3, #0]
 800fea0:	b29a      	uxth	r2, r3
 800fea2:	697b      	ldr	r3, [r7, #20]
 800fea4:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800fea6:	697b      	ldr	r3, [r7, #20]
 800fea8:	2203      	movs	r2, #3
 800feaa:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800feac:	4b41      	ldr	r3, [pc, #260]	; (800ffb4 <tcp_listen_input+0x1e0>)
 800feae:	681b      	ldr	r3, [r3, #0]
 800feb0:	1c5a      	adds	r2, r3, #1
 800feb2:	697b      	ldr	r3, [r7, #20]
 800feb4:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800feb6:	697b      	ldr	r3, [r7, #20]
 800feb8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800feba:	697b      	ldr	r3, [r7, #20]
 800febc:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800febe:	6978      	ldr	r0, [r7, #20]
 800fec0:	f7ff fa5a 	bl	800f378 <tcp_next_iss>
 800fec4:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800fec6:	697b      	ldr	r3, [r7, #20]
 800fec8:	693a      	ldr	r2, [r7, #16]
 800feca:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800fecc:	697b      	ldr	r3, [r7, #20]
 800fece:	693a      	ldr	r2, [r7, #16]
 800fed0:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800fed2:	697b      	ldr	r3, [r7, #20]
 800fed4:	693a      	ldr	r2, [r7, #16]
 800fed6:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800fed8:	697b      	ldr	r3, [r7, #20]
 800feda:	693a      	ldr	r2, [r7, #16]
 800fedc:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800fede:	4b35      	ldr	r3, [pc, #212]	; (800ffb4 <tcp_listen_input+0x1e0>)
 800fee0:	681b      	ldr	r3, [r3, #0]
 800fee2:	1e5a      	subs	r2, r3, #1
 800fee4:	697b      	ldr	r3, [r7, #20]
 800fee6:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800fee8:	687b      	ldr	r3, [r7, #4]
 800feea:	691a      	ldr	r2, [r3, #16]
 800feec:	697b      	ldr	r3, [r7, #20]
 800feee:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800fef0:	697b      	ldr	r3, [r7, #20]
 800fef2:	687a      	ldr	r2, [r7, #4]
 800fef4:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800fef6:	687b      	ldr	r3, [r7, #4]
 800fef8:	7a5b      	ldrb	r3, [r3, #9]
 800fefa:	f003 030c 	and.w	r3, r3, #12
 800fefe:	b2da      	uxtb	r2, r3
 800ff00:	697b      	ldr	r3, [r7, #20]
 800ff02:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800ff04:	687b      	ldr	r3, [r7, #4]
 800ff06:	7a1a      	ldrb	r2, [r3, #8]
 800ff08:	697b      	ldr	r3, [r7, #20]
 800ff0a:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800ff0c:	4b2e      	ldr	r3, [pc, #184]	; (800ffc8 <tcp_listen_input+0x1f4>)
 800ff0e:	681a      	ldr	r2, [r3, #0]
 800ff10:	697b      	ldr	r3, [r7, #20]
 800ff12:	60da      	str	r2, [r3, #12]
 800ff14:	4a2c      	ldr	r2, [pc, #176]	; (800ffc8 <tcp_listen_input+0x1f4>)
 800ff16:	697b      	ldr	r3, [r7, #20]
 800ff18:	6013      	str	r3, [r2, #0]
 800ff1a:	f003 f8cd 	bl	80130b8 <tcp_timer_needed>
 800ff1e:	4b2b      	ldr	r3, [pc, #172]	; (800ffcc <tcp_listen_input+0x1f8>)
 800ff20:	2201      	movs	r2, #1
 800ff22:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800ff24:	6978      	ldr	r0, [r7, #20]
 800ff26:	f001 fd8d 	bl	8011a44 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800ff2a:	4b23      	ldr	r3, [pc, #140]	; (800ffb8 <tcp_listen_input+0x1e4>)
 800ff2c:	681b      	ldr	r3, [r3, #0]
 800ff2e:	89db      	ldrh	r3, [r3, #14]
 800ff30:	b29a      	uxth	r2, r3
 800ff32:	697b      	ldr	r3, [r7, #20]
 800ff34:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800ff38:	697b      	ldr	r3, [r7, #20]
 800ff3a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800ff3e:	697b      	ldr	r3, [r7, #20]
 800ff40:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800ff44:	697b      	ldr	r3, [r7, #20]
 800ff46:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800ff48:	697b      	ldr	r3, [r7, #20]
 800ff4a:	3304      	adds	r3, #4
 800ff4c:	4618      	mov	r0, r3
 800ff4e:	f006 fdab 	bl	8016aa8 <ip4_route>
 800ff52:	4601      	mov	r1, r0
 800ff54:	697b      	ldr	r3, [r7, #20]
 800ff56:	3304      	adds	r3, #4
 800ff58:	461a      	mov	r2, r3
 800ff5a:	4620      	mov	r0, r4
 800ff5c:	f7ff fa32 	bl	800f3c4 <tcp_eff_send_mss_netif>
 800ff60:	4603      	mov	r3, r0
 800ff62:	461a      	mov	r2, r3
 800ff64:	697b      	ldr	r3, [r7, #20]
 800ff66:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800ff68:	2112      	movs	r1, #18
 800ff6a:	6978      	ldr	r0, [r7, #20]
 800ff6c:	f002 f842 	bl	8011ff4 <tcp_enqueue_flags>
 800ff70:	4603      	mov	r3, r0
 800ff72:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800ff74:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ff78:	2b00      	cmp	r3, #0
 800ff7a:	d004      	beq.n	800ff86 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800ff7c:	2100      	movs	r1, #0
 800ff7e:	6978      	ldr	r0, [r7, #20]
 800ff80:	f7fe f980 	bl	800e284 <tcp_abandon>
      return;
 800ff84:	e006      	b.n	800ff94 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800ff86:	6978      	ldr	r0, [r7, #20]
 800ff88:	f002 f922 	bl	80121d0 <tcp_output>
  return;
 800ff8c:	e001      	b.n	800ff92 <tcp_listen_input+0x1be>
    return;
 800ff8e:	bf00      	nop
 800ff90:	e000      	b.n	800ff94 <tcp_listen_input+0x1c0>
  return;
 800ff92:	bf00      	nop
}
 800ff94:	371c      	adds	r7, #28
 800ff96:	46bd      	mov	sp, r7
 800ff98:	bd90      	pop	{r4, r7, pc}
 800ff9a:	bf00      	nop
 800ff9c:	200004c8 	.word	0x200004c8
 800ffa0:	0801f238 	.word	0x0801f238
 800ffa4:	0801f430 	.word	0x0801f430
 800ffa8:	0801f284 	.word	0x0801f284
 800ffac:	200004c0 	.word	0x200004c0
 800ffb0:	200004c6 	.word	0x200004c6
 800ffb4:	200004bc 	.word	0x200004bc
 800ffb8:	200004ac 	.word	0x200004ac
 800ffbc:	2000403c 	.word	0x2000403c
 800ffc0:	20004040 	.word	0x20004040
 800ffc4:	2000402c 	.word	0x2000402c
 800ffc8:	20007150 	.word	0x20007150
 800ffcc:	2000714c 	.word	0x2000714c

0800ffd0 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800ffd0:	b580      	push	{r7, lr}
 800ffd2:	b086      	sub	sp, #24
 800ffd4:	af04      	add	r7, sp, #16
 800ffd6:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800ffd8:	4b2f      	ldr	r3, [pc, #188]	; (8010098 <tcp_timewait_input+0xc8>)
 800ffda:	781b      	ldrb	r3, [r3, #0]
 800ffdc:	f003 0304 	and.w	r3, r3, #4
 800ffe0:	2b00      	cmp	r3, #0
 800ffe2:	d153      	bne.n	801008c <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800ffe4:	687b      	ldr	r3, [r7, #4]
 800ffe6:	2b00      	cmp	r3, #0
 800ffe8:	d106      	bne.n	800fff8 <tcp_timewait_input+0x28>
 800ffea:	4b2c      	ldr	r3, [pc, #176]	; (801009c <tcp_timewait_input+0xcc>)
 800ffec:	f240 22ee 	movw	r2, #750	; 0x2ee
 800fff0:	492b      	ldr	r1, [pc, #172]	; (80100a0 <tcp_timewait_input+0xd0>)
 800fff2:	482c      	ldr	r0, [pc, #176]	; (80100a4 <tcp_timewait_input+0xd4>)
 800fff4:	f008 fcea 	bl	80189cc <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800fff8:	4b27      	ldr	r3, [pc, #156]	; (8010098 <tcp_timewait_input+0xc8>)
 800fffa:	781b      	ldrb	r3, [r3, #0]
 800fffc:	f003 0302 	and.w	r3, r3, #2
 8010000:	2b00      	cmp	r3, #0
 8010002:	d02a      	beq.n	801005a <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8010004:	4b28      	ldr	r3, [pc, #160]	; (80100a8 <tcp_timewait_input+0xd8>)
 8010006:	681a      	ldr	r2, [r3, #0]
 8010008:	687b      	ldr	r3, [r7, #4]
 801000a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801000c:	1ad3      	subs	r3, r2, r3
 801000e:	2b00      	cmp	r3, #0
 8010010:	db2d      	blt.n	801006e <tcp_timewait_input+0x9e>
 8010012:	4b25      	ldr	r3, [pc, #148]	; (80100a8 <tcp_timewait_input+0xd8>)
 8010014:	681a      	ldr	r2, [r3, #0]
 8010016:	687b      	ldr	r3, [r7, #4]
 8010018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801001a:	6879      	ldr	r1, [r7, #4]
 801001c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801001e:	440b      	add	r3, r1
 8010020:	1ad3      	subs	r3, r2, r3
 8010022:	2b00      	cmp	r3, #0
 8010024:	dc23      	bgt.n	801006e <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010026:	4b21      	ldr	r3, [pc, #132]	; (80100ac <tcp_timewait_input+0xdc>)
 8010028:	6819      	ldr	r1, [r3, #0]
 801002a:	4b21      	ldr	r3, [pc, #132]	; (80100b0 <tcp_timewait_input+0xe0>)
 801002c:	881b      	ldrh	r3, [r3, #0]
 801002e:	461a      	mov	r2, r3
 8010030:	4b1d      	ldr	r3, [pc, #116]	; (80100a8 <tcp_timewait_input+0xd8>)
 8010032:	681b      	ldr	r3, [r3, #0]
 8010034:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010036:	4b1f      	ldr	r3, [pc, #124]	; (80100b4 <tcp_timewait_input+0xe4>)
 8010038:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801003a:	885b      	ldrh	r3, [r3, #2]
 801003c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801003e:	4a1d      	ldr	r2, [pc, #116]	; (80100b4 <tcp_timewait_input+0xe4>)
 8010040:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010042:	8812      	ldrh	r2, [r2, #0]
 8010044:	b292      	uxth	r2, r2
 8010046:	9202      	str	r2, [sp, #8]
 8010048:	9301      	str	r3, [sp, #4]
 801004a:	4b1b      	ldr	r3, [pc, #108]	; (80100b8 <tcp_timewait_input+0xe8>)
 801004c:	9300      	str	r3, [sp, #0]
 801004e:	4b1b      	ldr	r3, [pc, #108]	; (80100bc <tcp_timewait_input+0xec>)
 8010050:	4602      	mov	r2, r0
 8010052:	6878      	ldr	r0, [r7, #4]
 8010054:	f002 fe70 	bl	8012d38 <tcp_rst>
      return;
 8010058:	e01b      	b.n	8010092 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 801005a:	4b0f      	ldr	r3, [pc, #60]	; (8010098 <tcp_timewait_input+0xc8>)
 801005c:	781b      	ldrb	r3, [r3, #0]
 801005e:	f003 0301 	and.w	r3, r3, #1
 8010062:	2b00      	cmp	r3, #0
 8010064:	d003      	beq.n	801006e <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8010066:	4b16      	ldr	r3, [pc, #88]	; (80100c0 <tcp_timewait_input+0xf0>)
 8010068:	681a      	ldr	r2, [r3, #0]
 801006a:	687b      	ldr	r3, [r7, #4]
 801006c:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 801006e:	4b10      	ldr	r3, [pc, #64]	; (80100b0 <tcp_timewait_input+0xe0>)
 8010070:	881b      	ldrh	r3, [r3, #0]
 8010072:	2b00      	cmp	r3, #0
 8010074:	d00c      	beq.n	8010090 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8010076:	687b      	ldr	r3, [r7, #4]
 8010078:	8b5b      	ldrh	r3, [r3, #26]
 801007a:	f043 0302 	orr.w	r3, r3, #2
 801007e:	b29a      	uxth	r2, r3
 8010080:	687b      	ldr	r3, [r7, #4]
 8010082:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8010084:	6878      	ldr	r0, [r7, #4]
 8010086:	f002 f8a3 	bl	80121d0 <tcp_output>
  }
  return;
 801008a:	e001      	b.n	8010090 <tcp_timewait_input+0xc0>
    return;
 801008c:	bf00      	nop
 801008e:	e000      	b.n	8010092 <tcp_timewait_input+0xc2>
  return;
 8010090:	bf00      	nop
}
 8010092:	3708      	adds	r7, #8
 8010094:	46bd      	mov	sp, r7
 8010096:	bd80      	pop	{r7, pc}
 8010098:	200004c8 	.word	0x200004c8
 801009c:	0801f238 	.word	0x0801f238
 80100a0:	0801f450 	.word	0x0801f450
 80100a4:	0801f284 	.word	0x0801f284
 80100a8:	200004bc 	.word	0x200004bc
 80100ac:	200004c0 	.word	0x200004c0
 80100b0:	200004c6 	.word	0x200004c6
 80100b4:	200004ac 	.word	0x200004ac
 80100b8:	2000403c 	.word	0x2000403c
 80100bc:	20004040 	.word	0x20004040
 80100c0:	20007154 	.word	0x20007154

080100c4 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 80100c4:	b590      	push	{r4, r7, lr}
 80100c6:	b08d      	sub	sp, #52	; 0x34
 80100c8:	af04      	add	r7, sp, #16
 80100ca:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 80100cc:	2300      	movs	r3, #0
 80100ce:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 80100d0:	2300      	movs	r3, #0
 80100d2:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 80100d4:	687b      	ldr	r3, [r7, #4]
 80100d6:	2b00      	cmp	r3, #0
 80100d8:	d106      	bne.n	80100e8 <tcp_process+0x24>
 80100da:	4ba5      	ldr	r3, [pc, #660]	; (8010370 <tcp_process+0x2ac>)
 80100dc:	f44f 7247 	mov.w	r2, #796	; 0x31c
 80100e0:	49a4      	ldr	r1, [pc, #656]	; (8010374 <tcp_process+0x2b0>)
 80100e2:	48a5      	ldr	r0, [pc, #660]	; (8010378 <tcp_process+0x2b4>)
 80100e4:	f008 fc72 	bl	80189cc <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 80100e8:	4ba4      	ldr	r3, [pc, #656]	; (801037c <tcp_process+0x2b8>)
 80100ea:	781b      	ldrb	r3, [r3, #0]
 80100ec:	f003 0304 	and.w	r3, r3, #4
 80100f0:	2b00      	cmp	r3, #0
 80100f2:	d04e      	beq.n	8010192 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 80100f4:	687b      	ldr	r3, [r7, #4]
 80100f6:	7d1b      	ldrb	r3, [r3, #20]
 80100f8:	2b02      	cmp	r3, #2
 80100fa:	d108      	bne.n	801010e <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 80100fc:	687b      	ldr	r3, [r7, #4]
 80100fe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010100:	4b9f      	ldr	r3, [pc, #636]	; (8010380 <tcp_process+0x2bc>)
 8010102:	681b      	ldr	r3, [r3, #0]
 8010104:	429a      	cmp	r2, r3
 8010106:	d123      	bne.n	8010150 <tcp_process+0x8c>
        acceptable = 1;
 8010108:	2301      	movs	r3, #1
 801010a:	76fb      	strb	r3, [r7, #27]
 801010c:	e020      	b.n	8010150 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 801010e:	687b      	ldr	r3, [r7, #4]
 8010110:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010112:	4b9c      	ldr	r3, [pc, #624]	; (8010384 <tcp_process+0x2c0>)
 8010114:	681b      	ldr	r3, [r3, #0]
 8010116:	429a      	cmp	r2, r3
 8010118:	d102      	bne.n	8010120 <tcp_process+0x5c>
        acceptable = 1;
 801011a:	2301      	movs	r3, #1
 801011c:	76fb      	strb	r3, [r7, #27]
 801011e:	e017      	b.n	8010150 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8010120:	4b98      	ldr	r3, [pc, #608]	; (8010384 <tcp_process+0x2c0>)
 8010122:	681a      	ldr	r2, [r3, #0]
 8010124:	687b      	ldr	r3, [r7, #4]
 8010126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010128:	1ad3      	subs	r3, r2, r3
 801012a:	2b00      	cmp	r3, #0
 801012c:	db10      	blt.n	8010150 <tcp_process+0x8c>
 801012e:	4b95      	ldr	r3, [pc, #596]	; (8010384 <tcp_process+0x2c0>)
 8010130:	681a      	ldr	r2, [r3, #0]
 8010132:	687b      	ldr	r3, [r7, #4]
 8010134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010136:	6879      	ldr	r1, [r7, #4]
 8010138:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801013a:	440b      	add	r3, r1
 801013c:	1ad3      	subs	r3, r2, r3
 801013e:	2b00      	cmp	r3, #0
 8010140:	dc06      	bgt.n	8010150 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8010142:	687b      	ldr	r3, [r7, #4]
 8010144:	8b5b      	ldrh	r3, [r3, #26]
 8010146:	f043 0302 	orr.w	r3, r3, #2
 801014a:	b29a      	uxth	r2, r3
 801014c:	687b      	ldr	r3, [r7, #4]
 801014e:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8010150:	7efb      	ldrb	r3, [r7, #27]
 8010152:	2b00      	cmp	r3, #0
 8010154:	d01b      	beq.n	801018e <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8010156:	687b      	ldr	r3, [r7, #4]
 8010158:	7d1b      	ldrb	r3, [r3, #20]
 801015a:	2b00      	cmp	r3, #0
 801015c:	d106      	bne.n	801016c <tcp_process+0xa8>
 801015e:	4b84      	ldr	r3, [pc, #528]	; (8010370 <tcp_process+0x2ac>)
 8010160:	f44f 724e 	mov.w	r2, #824	; 0x338
 8010164:	4988      	ldr	r1, [pc, #544]	; (8010388 <tcp_process+0x2c4>)
 8010166:	4884      	ldr	r0, [pc, #528]	; (8010378 <tcp_process+0x2b4>)
 8010168:	f008 fc30 	bl	80189cc <iprintf>
      recv_flags |= TF_RESET;
 801016c:	4b87      	ldr	r3, [pc, #540]	; (801038c <tcp_process+0x2c8>)
 801016e:	781b      	ldrb	r3, [r3, #0]
 8010170:	f043 0308 	orr.w	r3, r3, #8
 8010174:	b2da      	uxtb	r2, r3
 8010176:	4b85      	ldr	r3, [pc, #532]	; (801038c <tcp_process+0x2c8>)
 8010178:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 801017a:	687b      	ldr	r3, [r7, #4]
 801017c:	8b5b      	ldrh	r3, [r3, #26]
 801017e:	f023 0301 	bic.w	r3, r3, #1
 8010182:	b29a      	uxth	r2, r3
 8010184:	687b      	ldr	r3, [r7, #4]
 8010186:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8010188:	f06f 030d 	mvn.w	r3, #13
 801018c:	e37a      	b.n	8010884 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 801018e:	2300      	movs	r3, #0
 8010190:	e378      	b.n	8010884 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8010192:	4b7a      	ldr	r3, [pc, #488]	; (801037c <tcp_process+0x2b8>)
 8010194:	781b      	ldrb	r3, [r3, #0]
 8010196:	f003 0302 	and.w	r3, r3, #2
 801019a:	2b00      	cmp	r3, #0
 801019c:	d010      	beq.n	80101c0 <tcp_process+0xfc>
 801019e:	687b      	ldr	r3, [r7, #4]
 80101a0:	7d1b      	ldrb	r3, [r3, #20]
 80101a2:	2b02      	cmp	r3, #2
 80101a4:	d00c      	beq.n	80101c0 <tcp_process+0xfc>
 80101a6:	687b      	ldr	r3, [r7, #4]
 80101a8:	7d1b      	ldrb	r3, [r3, #20]
 80101aa:	2b03      	cmp	r3, #3
 80101ac:	d008      	beq.n	80101c0 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 80101ae:	687b      	ldr	r3, [r7, #4]
 80101b0:	8b5b      	ldrh	r3, [r3, #26]
 80101b2:	f043 0302 	orr.w	r3, r3, #2
 80101b6:	b29a      	uxth	r2, r3
 80101b8:	687b      	ldr	r3, [r7, #4]
 80101ba:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 80101bc:	2300      	movs	r3, #0
 80101be:	e361      	b.n	8010884 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 80101c0:	687b      	ldr	r3, [r7, #4]
 80101c2:	8b5b      	ldrh	r3, [r3, #26]
 80101c4:	f003 0310 	and.w	r3, r3, #16
 80101c8:	2b00      	cmp	r3, #0
 80101ca:	d103      	bne.n	80101d4 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 80101cc:	4b70      	ldr	r3, [pc, #448]	; (8010390 <tcp_process+0x2cc>)
 80101ce:	681a      	ldr	r2, [r3, #0]
 80101d0:	687b      	ldr	r3, [r7, #4]
 80101d2:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 80101d4:	687b      	ldr	r3, [r7, #4]
 80101d6:	2200      	movs	r2, #0
 80101d8:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 80101dc:	687b      	ldr	r3, [r7, #4]
 80101de:	2200      	movs	r2, #0
 80101e0:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 80101e4:	6878      	ldr	r0, [r7, #4]
 80101e6:	f001 fc2d 	bl	8011a44 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 80101ea:	687b      	ldr	r3, [r7, #4]
 80101ec:	7d1b      	ldrb	r3, [r3, #20]
 80101ee:	3b02      	subs	r3, #2
 80101f0:	2b07      	cmp	r3, #7
 80101f2:	f200 8337 	bhi.w	8010864 <tcp_process+0x7a0>
 80101f6:	a201      	add	r2, pc, #4	; (adr r2, 80101fc <tcp_process+0x138>)
 80101f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80101fc:	0801021d 	.word	0x0801021d
 8010200:	0801044d 	.word	0x0801044d
 8010204:	080105c5 	.word	0x080105c5
 8010208:	080105ef 	.word	0x080105ef
 801020c:	08010713 	.word	0x08010713
 8010210:	080105c5 	.word	0x080105c5
 8010214:	0801079f 	.word	0x0801079f
 8010218:	0801082f 	.word	0x0801082f
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 801021c:	4b57      	ldr	r3, [pc, #348]	; (801037c <tcp_process+0x2b8>)
 801021e:	781b      	ldrb	r3, [r3, #0]
 8010220:	f003 0310 	and.w	r3, r3, #16
 8010224:	2b00      	cmp	r3, #0
 8010226:	f000 80e4 	beq.w	80103f2 <tcp_process+0x32e>
 801022a:	4b54      	ldr	r3, [pc, #336]	; (801037c <tcp_process+0x2b8>)
 801022c:	781b      	ldrb	r3, [r3, #0]
 801022e:	f003 0302 	and.w	r3, r3, #2
 8010232:	2b00      	cmp	r3, #0
 8010234:	f000 80dd 	beq.w	80103f2 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8010238:	687b      	ldr	r3, [r7, #4]
 801023a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801023c:	1c5a      	adds	r2, r3, #1
 801023e:	4b50      	ldr	r3, [pc, #320]	; (8010380 <tcp_process+0x2bc>)
 8010240:	681b      	ldr	r3, [r3, #0]
 8010242:	429a      	cmp	r2, r3
 8010244:	f040 80d5 	bne.w	80103f2 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8010248:	4b4e      	ldr	r3, [pc, #312]	; (8010384 <tcp_process+0x2c0>)
 801024a:	681b      	ldr	r3, [r3, #0]
 801024c:	1c5a      	adds	r2, r3, #1
 801024e:	687b      	ldr	r3, [r7, #4]
 8010250:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8010252:	687b      	ldr	r3, [r7, #4]
 8010254:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010256:	687b      	ldr	r3, [r7, #4]
 8010258:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 801025a:	4b49      	ldr	r3, [pc, #292]	; (8010380 <tcp_process+0x2bc>)
 801025c:	681a      	ldr	r2, [r3, #0]
 801025e:	687b      	ldr	r3, [r7, #4]
 8010260:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8010262:	4b4c      	ldr	r3, [pc, #304]	; (8010394 <tcp_process+0x2d0>)
 8010264:	681b      	ldr	r3, [r3, #0]
 8010266:	89db      	ldrh	r3, [r3, #14]
 8010268:	b29a      	uxth	r2, r3
 801026a:	687b      	ldr	r3, [r7, #4]
 801026c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8010270:	687b      	ldr	r3, [r7, #4]
 8010272:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8010276:	687b      	ldr	r3, [r7, #4]
 8010278:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 801027c:	4b41      	ldr	r3, [pc, #260]	; (8010384 <tcp_process+0x2c0>)
 801027e:	681b      	ldr	r3, [r3, #0]
 8010280:	1e5a      	subs	r2, r3, #1
 8010282:	687b      	ldr	r3, [r7, #4]
 8010284:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8010286:	687b      	ldr	r3, [r7, #4]
 8010288:	2204      	movs	r2, #4
 801028a:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 801028c:	687b      	ldr	r3, [r7, #4]
 801028e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8010290:	687b      	ldr	r3, [r7, #4]
 8010292:	3304      	adds	r3, #4
 8010294:	4618      	mov	r0, r3
 8010296:	f006 fc07 	bl	8016aa8 <ip4_route>
 801029a:	4601      	mov	r1, r0
 801029c:	687b      	ldr	r3, [r7, #4]
 801029e:	3304      	adds	r3, #4
 80102a0:	461a      	mov	r2, r3
 80102a2:	4620      	mov	r0, r4
 80102a4:	f7ff f88e 	bl	800f3c4 <tcp_eff_send_mss_netif>
 80102a8:	4603      	mov	r3, r0
 80102aa:	461a      	mov	r2, r3
 80102ac:	687b      	ldr	r3, [r7, #4]
 80102ae:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80102b0:	687b      	ldr	r3, [r7, #4]
 80102b2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80102b4:	009a      	lsls	r2, r3, #2
 80102b6:	687b      	ldr	r3, [r7, #4]
 80102b8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80102ba:	005b      	lsls	r3, r3, #1
 80102bc:	f241 111c 	movw	r1, #4380	; 0x111c
 80102c0:	428b      	cmp	r3, r1
 80102c2:	bf38      	it	cc
 80102c4:	460b      	movcc	r3, r1
 80102c6:	429a      	cmp	r2, r3
 80102c8:	d204      	bcs.n	80102d4 <tcp_process+0x210>
 80102ca:	687b      	ldr	r3, [r7, #4]
 80102cc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80102ce:	009b      	lsls	r3, r3, #2
 80102d0:	b29b      	uxth	r3, r3
 80102d2:	e00d      	b.n	80102f0 <tcp_process+0x22c>
 80102d4:	687b      	ldr	r3, [r7, #4]
 80102d6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80102d8:	005b      	lsls	r3, r3, #1
 80102da:	f241 121c 	movw	r2, #4380	; 0x111c
 80102de:	4293      	cmp	r3, r2
 80102e0:	d904      	bls.n	80102ec <tcp_process+0x228>
 80102e2:	687b      	ldr	r3, [r7, #4]
 80102e4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80102e6:	005b      	lsls	r3, r3, #1
 80102e8:	b29b      	uxth	r3, r3
 80102ea:	e001      	b.n	80102f0 <tcp_process+0x22c>
 80102ec:	f241 131c 	movw	r3, #4380	; 0x111c
 80102f0:	687a      	ldr	r2, [r7, #4]
 80102f2:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 80102f6:	687b      	ldr	r3, [r7, #4]
 80102f8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80102fc:	2b00      	cmp	r3, #0
 80102fe:	d106      	bne.n	801030e <tcp_process+0x24a>
 8010300:	4b1b      	ldr	r3, [pc, #108]	; (8010370 <tcp_process+0x2ac>)
 8010302:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8010306:	4924      	ldr	r1, [pc, #144]	; (8010398 <tcp_process+0x2d4>)
 8010308:	481b      	ldr	r0, [pc, #108]	; (8010378 <tcp_process+0x2b4>)
 801030a:	f008 fb5f 	bl	80189cc <iprintf>
        --pcb->snd_queuelen;
 801030e:	687b      	ldr	r3, [r7, #4]
 8010310:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010314:	3b01      	subs	r3, #1
 8010316:	b29a      	uxth	r2, r3
 8010318:	687b      	ldr	r3, [r7, #4]
 801031a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 801031e:	687b      	ldr	r3, [r7, #4]
 8010320:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010322:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8010324:	69fb      	ldr	r3, [r7, #28]
 8010326:	2b00      	cmp	r3, #0
 8010328:	d111      	bne.n	801034e <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 801032a:	687b      	ldr	r3, [r7, #4]
 801032c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801032e:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8010330:	69fb      	ldr	r3, [r7, #28]
 8010332:	2b00      	cmp	r3, #0
 8010334:	d106      	bne.n	8010344 <tcp_process+0x280>
 8010336:	4b0e      	ldr	r3, [pc, #56]	; (8010370 <tcp_process+0x2ac>)
 8010338:	f44f 725d 	mov.w	r2, #884	; 0x374
 801033c:	4917      	ldr	r1, [pc, #92]	; (801039c <tcp_process+0x2d8>)
 801033e:	480e      	ldr	r0, [pc, #56]	; (8010378 <tcp_process+0x2b4>)
 8010340:	f008 fb44 	bl	80189cc <iprintf>
          pcb->unsent = rseg->next;
 8010344:	69fb      	ldr	r3, [r7, #28]
 8010346:	681a      	ldr	r2, [r3, #0]
 8010348:	687b      	ldr	r3, [r7, #4]
 801034a:	66da      	str	r2, [r3, #108]	; 0x6c
 801034c:	e003      	b.n	8010356 <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 801034e:	69fb      	ldr	r3, [r7, #28]
 8010350:	681a      	ldr	r2, [r3, #0]
 8010352:	687b      	ldr	r3, [r7, #4]
 8010354:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8010356:	69f8      	ldr	r0, [r7, #28]
 8010358:	f7fe fd3d 	bl	800edd6 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 801035c:	687b      	ldr	r3, [r7, #4]
 801035e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010360:	2b00      	cmp	r3, #0
 8010362:	d11d      	bne.n	80103a0 <tcp_process+0x2dc>
          pcb->rtime = -1;
 8010364:	687b      	ldr	r3, [r7, #4]
 8010366:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801036a:	861a      	strh	r2, [r3, #48]	; 0x30
 801036c:	e01f      	b.n	80103ae <tcp_process+0x2ea>
 801036e:	bf00      	nop
 8010370:	0801f238 	.word	0x0801f238
 8010374:	0801f470 	.word	0x0801f470
 8010378:	0801f284 	.word	0x0801f284
 801037c:	200004c8 	.word	0x200004c8
 8010380:	200004c0 	.word	0x200004c0
 8010384:	200004bc 	.word	0x200004bc
 8010388:	0801f48c 	.word	0x0801f48c
 801038c:	200004c9 	.word	0x200004c9
 8010390:	20007154 	.word	0x20007154
 8010394:	200004ac 	.word	0x200004ac
 8010398:	0801f4ac 	.word	0x0801f4ac
 801039c:	0801f4c4 	.word	0x0801f4c4
        } else {
          pcb->rtime = 0;
 80103a0:	687b      	ldr	r3, [r7, #4]
 80103a2:	2200      	movs	r2, #0
 80103a4:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 80103a6:	687b      	ldr	r3, [r7, #4]
 80103a8:	2200      	movs	r2, #0
 80103aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 80103ae:	687b      	ldr	r3, [r7, #4]
 80103b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80103b4:	2b00      	cmp	r3, #0
 80103b6:	d00a      	beq.n	80103ce <tcp_process+0x30a>
 80103b8:	687b      	ldr	r3, [r7, #4]
 80103ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80103be:	687a      	ldr	r2, [r7, #4]
 80103c0:	6910      	ldr	r0, [r2, #16]
 80103c2:	2200      	movs	r2, #0
 80103c4:	6879      	ldr	r1, [r7, #4]
 80103c6:	4798      	blx	r3
 80103c8:	4603      	mov	r3, r0
 80103ca:	76bb      	strb	r3, [r7, #26]
 80103cc:	e001      	b.n	80103d2 <tcp_process+0x30e>
 80103ce:	2300      	movs	r3, #0
 80103d0:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 80103d2:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80103d6:	f113 0f0d 	cmn.w	r3, #13
 80103da:	d102      	bne.n	80103e2 <tcp_process+0x31e>
          return ERR_ABRT;
 80103dc:	f06f 030c 	mvn.w	r3, #12
 80103e0:	e250      	b.n	8010884 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 80103e2:	687b      	ldr	r3, [r7, #4]
 80103e4:	8b5b      	ldrh	r3, [r3, #26]
 80103e6:	f043 0302 	orr.w	r3, r3, #2
 80103ea:	b29a      	uxth	r2, r3
 80103ec:	687b      	ldr	r3, [r7, #4]
 80103ee:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 80103f0:	e23a      	b.n	8010868 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 80103f2:	4b9d      	ldr	r3, [pc, #628]	; (8010668 <tcp_process+0x5a4>)
 80103f4:	781b      	ldrb	r3, [r3, #0]
 80103f6:	f003 0310 	and.w	r3, r3, #16
 80103fa:	2b00      	cmp	r3, #0
 80103fc:	f000 8234 	beq.w	8010868 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010400:	4b9a      	ldr	r3, [pc, #616]	; (801066c <tcp_process+0x5a8>)
 8010402:	6819      	ldr	r1, [r3, #0]
 8010404:	4b9a      	ldr	r3, [pc, #616]	; (8010670 <tcp_process+0x5ac>)
 8010406:	881b      	ldrh	r3, [r3, #0]
 8010408:	461a      	mov	r2, r3
 801040a:	4b9a      	ldr	r3, [pc, #616]	; (8010674 <tcp_process+0x5b0>)
 801040c:	681b      	ldr	r3, [r3, #0]
 801040e:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010410:	4b99      	ldr	r3, [pc, #612]	; (8010678 <tcp_process+0x5b4>)
 8010412:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010414:	885b      	ldrh	r3, [r3, #2]
 8010416:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010418:	4a97      	ldr	r2, [pc, #604]	; (8010678 <tcp_process+0x5b4>)
 801041a:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801041c:	8812      	ldrh	r2, [r2, #0]
 801041e:	b292      	uxth	r2, r2
 8010420:	9202      	str	r2, [sp, #8]
 8010422:	9301      	str	r3, [sp, #4]
 8010424:	4b95      	ldr	r3, [pc, #596]	; (801067c <tcp_process+0x5b8>)
 8010426:	9300      	str	r3, [sp, #0]
 8010428:	4b95      	ldr	r3, [pc, #596]	; (8010680 <tcp_process+0x5bc>)
 801042a:	4602      	mov	r2, r0
 801042c:	6878      	ldr	r0, [r7, #4]
 801042e:	f002 fc83 	bl	8012d38 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8010432:	687b      	ldr	r3, [r7, #4]
 8010434:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010438:	2b05      	cmp	r3, #5
 801043a:	f200 8215 	bhi.w	8010868 <tcp_process+0x7a4>
          pcb->rtime = 0;
 801043e:	687b      	ldr	r3, [r7, #4]
 8010440:	2200      	movs	r2, #0
 8010442:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8010444:	6878      	ldr	r0, [r7, #4]
 8010446:	f002 fa4d 	bl	80128e4 <tcp_rexmit_rto>
      break;
 801044a:	e20d      	b.n	8010868 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 801044c:	4b86      	ldr	r3, [pc, #536]	; (8010668 <tcp_process+0x5a4>)
 801044e:	781b      	ldrb	r3, [r3, #0]
 8010450:	f003 0310 	and.w	r3, r3, #16
 8010454:	2b00      	cmp	r3, #0
 8010456:	f000 80a1 	beq.w	801059c <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801045a:	4b84      	ldr	r3, [pc, #528]	; (801066c <tcp_process+0x5a8>)
 801045c:	681a      	ldr	r2, [r3, #0]
 801045e:	687b      	ldr	r3, [r7, #4]
 8010460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010462:	1ad3      	subs	r3, r2, r3
 8010464:	3b01      	subs	r3, #1
 8010466:	2b00      	cmp	r3, #0
 8010468:	db7e      	blt.n	8010568 <tcp_process+0x4a4>
 801046a:	4b80      	ldr	r3, [pc, #512]	; (801066c <tcp_process+0x5a8>)
 801046c:	681a      	ldr	r2, [r3, #0]
 801046e:	687b      	ldr	r3, [r7, #4]
 8010470:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010472:	1ad3      	subs	r3, r2, r3
 8010474:	2b00      	cmp	r3, #0
 8010476:	dc77      	bgt.n	8010568 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8010478:	687b      	ldr	r3, [r7, #4]
 801047a:	2204      	movs	r2, #4
 801047c:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 801047e:	687b      	ldr	r3, [r7, #4]
 8010480:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010482:	2b00      	cmp	r3, #0
 8010484:	d102      	bne.n	801048c <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8010486:	23fa      	movs	r3, #250	; 0xfa
 8010488:	76bb      	strb	r3, [r7, #26]
 801048a:	e01d      	b.n	80104c8 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 801048c:	687b      	ldr	r3, [r7, #4]
 801048e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010490:	699b      	ldr	r3, [r3, #24]
 8010492:	2b00      	cmp	r3, #0
 8010494:	d106      	bne.n	80104a4 <tcp_process+0x3e0>
 8010496:	4b7b      	ldr	r3, [pc, #492]	; (8010684 <tcp_process+0x5c0>)
 8010498:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 801049c:	497a      	ldr	r1, [pc, #488]	; (8010688 <tcp_process+0x5c4>)
 801049e:	487b      	ldr	r0, [pc, #492]	; (801068c <tcp_process+0x5c8>)
 80104a0:	f008 fa94 	bl	80189cc <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 80104a4:	687b      	ldr	r3, [r7, #4]
 80104a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80104a8:	699b      	ldr	r3, [r3, #24]
 80104aa:	2b00      	cmp	r3, #0
 80104ac:	d00a      	beq.n	80104c4 <tcp_process+0x400>
 80104ae:	687b      	ldr	r3, [r7, #4]
 80104b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80104b2:	699b      	ldr	r3, [r3, #24]
 80104b4:	687a      	ldr	r2, [r7, #4]
 80104b6:	6910      	ldr	r0, [r2, #16]
 80104b8:	2200      	movs	r2, #0
 80104ba:	6879      	ldr	r1, [r7, #4]
 80104bc:	4798      	blx	r3
 80104be:	4603      	mov	r3, r0
 80104c0:	76bb      	strb	r3, [r7, #26]
 80104c2:	e001      	b.n	80104c8 <tcp_process+0x404>
 80104c4:	23f0      	movs	r3, #240	; 0xf0
 80104c6:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 80104c8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80104cc:	2b00      	cmp	r3, #0
 80104ce:	d00a      	beq.n	80104e6 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 80104d0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80104d4:	f113 0f0d 	cmn.w	r3, #13
 80104d8:	d002      	beq.n	80104e0 <tcp_process+0x41c>
              tcp_abort(pcb);
 80104da:	6878      	ldr	r0, [r7, #4]
 80104dc:	f7fd ff90 	bl	800e400 <tcp_abort>
            }
            return ERR_ABRT;
 80104e0:	f06f 030c 	mvn.w	r3, #12
 80104e4:	e1ce      	b.n	8010884 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 80104e6:	6878      	ldr	r0, [r7, #4]
 80104e8:	f000 fae0 	bl	8010aac <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 80104ec:	4b68      	ldr	r3, [pc, #416]	; (8010690 <tcp_process+0x5cc>)
 80104ee:	881b      	ldrh	r3, [r3, #0]
 80104f0:	2b00      	cmp	r3, #0
 80104f2:	d005      	beq.n	8010500 <tcp_process+0x43c>
            recv_acked--;
 80104f4:	4b66      	ldr	r3, [pc, #408]	; (8010690 <tcp_process+0x5cc>)
 80104f6:	881b      	ldrh	r3, [r3, #0]
 80104f8:	3b01      	subs	r3, #1
 80104fa:	b29a      	uxth	r2, r3
 80104fc:	4b64      	ldr	r3, [pc, #400]	; (8010690 <tcp_process+0x5cc>)
 80104fe:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8010500:	687b      	ldr	r3, [r7, #4]
 8010502:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010504:	009a      	lsls	r2, r3, #2
 8010506:	687b      	ldr	r3, [r7, #4]
 8010508:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801050a:	005b      	lsls	r3, r3, #1
 801050c:	f241 111c 	movw	r1, #4380	; 0x111c
 8010510:	428b      	cmp	r3, r1
 8010512:	bf38      	it	cc
 8010514:	460b      	movcc	r3, r1
 8010516:	429a      	cmp	r2, r3
 8010518:	d204      	bcs.n	8010524 <tcp_process+0x460>
 801051a:	687b      	ldr	r3, [r7, #4]
 801051c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801051e:	009b      	lsls	r3, r3, #2
 8010520:	b29b      	uxth	r3, r3
 8010522:	e00d      	b.n	8010540 <tcp_process+0x47c>
 8010524:	687b      	ldr	r3, [r7, #4]
 8010526:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010528:	005b      	lsls	r3, r3, #1
 801052a:	f241 121c 	movw	r2, #4380	; 0x111c
 801052e:	4293      	cmp	r3, r2
 8010530:	d904      	bls.n	801053c <tcp_process+0x478>
 8010532:	687b      	ldr	r3, [r7, #4]
 8010534:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010536:	005b      	lsls	r3, r3, #1
 8010538:	b29b      	uxth	r3, r3
 801053a:	e001      	b.n	8010540 <tcp_process+0x47c>
 801053c:	f241 131c 	movw	r3, #4380	; 0x111c
 8010540:	687a      	ldr	r2, [r7, #4]
 8010542:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8010546:	4b53      	ldr	r3, [pc, #332]	; (8010694 <tcp_process+0x5d0>)
 8010548:	781b      	ldrb	r3, [r3, #0]
 801054a:	f003 0320 	and.w	r3, r3, #32
 801054e:	2b00      	cmp	r3, #0
 8010550:	d037      	beq.n	80105c2 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8010552:	687b      	ldr	r3, [r7, #4]
 8010554:	8b5b      	ldrh	r3, [r3, #26]
 8010556:	f043 0302 	orr.w	r3, r3, #2
 801055a:	b29a      	uxth	r2, r3
 801055c:	687b      	ldr	r3, [r7, #4]
 801055e:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8010560:	687b      	ldr	r3, [r7, #4]
 8010562:	2207      	movs	r2, #7
 8010564:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8010566:	e02c      	b.n	80105c2 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010568:	4b40      	ldr	r3, [pc, #256]	; (801066c <tcp_process+0x5a8>)
 801056a:	6819      	ldr	r1, [r3, #0]
 801056c:	4b40      	ldr	r3, [pc, #256]	; (8010670 <tcp_process+0x5ac>)
 801056e:	881b      	ldrh	r3, [r3, #0]
 8010570:	461a      	mov	r2, r3
 8010572:	4b40      	ldr	r3, [pc, #256]	; (8010674 <tcp_process+0x5b0>)
 8010574:	681b      	ldr	r3, [r3, #0]
 8010576:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010578:	4b3f      	ldr	r3, [pc, #252]	; (8010678 <tcp_process+0x5b4>)
 801057a:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801057c:	885b      	ldrh	r3, [r3, #2]
 801057e:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010580:	4a3d      	ldr	r2, [pc, #244]	; (8010678 <tcp_process+0x5b4>)
 8010582:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010584:	8812      	ldrh	r2, [r2, #0]
 8010586:	b292      	uxth	r2, r2
 8010588:	9202      	str	r2, [sp, #8]
 801058a:	9301      	str	r3, [sp, #4]
 801058c:	4b3b      	ldr	r3, [pc, #236]	; (801067c <tcp_process+0x5b8>)
 801058e:	9300      	str	r3, [sp, #0]
 8010590:	4b3b      	ldr	r3, [pc, #236]	; (8010680 <tcp_process+0x5bc>)
 8010592:	4602      	mov	r2, r0
 8010594:	6878      	ldr	r0, [r7, #4]
 8010596:	f002 fbcf 	bl	8012d38 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 801059a:	e167      	b.n	801086c <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 801059c:	4b32      	ldr	r3, [pc, #200]	; (8010668 <tcp_process+0x5a4>)
 801059e:	781b      	ldrb	r3, [r3, #0]
 80105a0:	f003 0302 	and.w	r3, r3, #2
 80105a4:	2b00      	cmp	r3, #0
 80105a6:	f000 8161 	beq.w	801086c <tcp_process+0x7a8>
 80105aa:	687b      	ldr	r3, [r7, #4]
 80105ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80105ae:	1e5a      	subs	r2, r3, #1
 80105b0:	4b30      	ldr	r3, [pc, #192]	; (8010674 <tcp_process+0x5b0>)
 80105b2:	681b      	ldr	r3, [r3, #0]
 80105b4:	429a      	cmp	r2, r3
 80105b6:	f040 8159 	bne.w	801086c <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 80105ba:	6878      	ldr	r0, [r7, #4]
 80105bc:	f002 f9b4 	bl	8012928 <tcp_rexmit>
      break;
 80105c0:	e154      	b.n	801086c <tcp_process+0x7a8>
 80105c2:	e153      	b.n	801086c <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 80105c4:	6878      	ldr	r0, [r7, #4]
 80105c6:	f000 fa71 	bl	8010aac <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 80105ca:	4b32      	ldr	r3, [pc, #200]	; (8010694 <tcp_process+0x5d0>)
 80105cc:	781b      	ldrb	r3, [r3, #0]
 80105ce:	f003 0320 	and.w	r3, r3, #32
 80105d2:	2b00      	cmp	r3, #0
 80105d4:	f000 814c 	beq.w	8010870 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 80105d8:	687b      	ldr	r3, [r7, #4]
 80105da:	8b5b      	ldrh	r3, [r3, #26]
 80105dc:	f043 0302 	orr.w	r3, r3, #2
 80105e0:	b29a      	uxth	r2, r3
 80105e2:	687b      	ldr	r3, [r7, #4]
 80105e4:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 80105e6:	687b      	ldr	r3, [r7, #4]
 80105e8:	2207      	movs	r2, #7
 80105ea:	751a      	strb	r2, [r3, #20]
      }
      break;
 80105ec:	e140      	b.n	8010870 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 80105ee:	6878      	ldr	r0, [r7, #4]
 80105f0:	f000 fa5c 	bl	8010aac <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80105f4:	4b27      	ldr	r3, [pc, #156]	; (8010694 <tcp_process+0x5d0>)
 80105f6:	781b      	ldrb	r3, [r3, #0]
 80105f8:	f003 0320 	and.w	r3, r3, #32
 80105fc:	2b00      	cmp	r3, #0
 80105fe:	d071      	beq.n	80106e4 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8010600:	4b19      	ldr	r3, [pc, #100]	; (8010668 <tcp_process+0x5a4>)
 8010602:	781b      	ldrb	r3, [r3, #0]
 8010604:	f003 0310 	and.w	r3, r3, #16
 8010608:	2b00      	cmp	r3, #0
 801060a:	d060      	beq.n	80106ce <tcp_process+0x60a>
 801060c:	687b      	ldr	r3, [r7, #4]
 801060e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010610:	4b16      	ldr	r3, [pc, #88]	; (801066c <tcp_process+0x5a8>)
 8010612:	681b      	ldr	r3, [r3, #0]
 8010614:	429a      	cmp	r2, r3
 8010616:	d15a      	bne.n	80106ce <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8010618:	687b      	ldr	r3, [r7, #4]
 801061a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801061c:	2b00      	cmp	r3, #0
 801061e:	d156      	bne.n	80106ce <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8010620:	687b      	ldr	r3, [r7, #4]
 8010622:	8b5b      	ldrh	r3, [r3, #26]
 8010624:	f043 0302 	orr.w	r3, r3, #2
 8010628:	b29a      	uxth	r2, r3
 801062a:	687b      	ldr	r3, [r7, #4]
 801062c:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 801062e:	6878      	ldr	r0, [r7, #4]
 8010630:	f7fe fdbe 	bl	800f1b0 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8010634:	4b18      	ldr	r3, [pc, #96]	; (8010698 <tcp_process+0x5d4>)
 8010636:	681b      	ldr	r3, [r3, #0]
 8010638:	687a      	ldr	r2, [r7, #4]
 801063a:	429a      	cmp	r2, r3
 801063c:	d105      	bne.n	801064a <tcp_process+0x586>
 801063e:	4b16      	ldr	r3, [pc, #88]	; (8010698 <tcp_process+0x5d4>)
 8010640:	681b      	ldr	r3, [r3, #0]
 8010642:	68db      	ldr	r3, [r3, #12]
 8010644:	4a14      	ldr	r2, [pc, #80]	; (8010698 <tcp_process+0x5d4>)
 8010646:	6013      	str	r3, [r2, #0]
 8010648:	e02e      	b.n	80106a8 <tcp_process+0x5e4>
 801064a:	4b13      	ldr	r3, [pc, #76]	; (8010698 <tcp_process+0x5d4>)
 801064c:	681b      	ldr	r3, [r3, #0]
 801064e:	617b      	str	r3, [r7, #20]
 8010650:	e027      	b.n	80106a2 <tcp_process+0x5de>
 8010652:	697b      	ldr	r3, [r7, #20]
 8010654:	68db      	ldr	r3, [r3, #12]
 8010656:	687a      	ldr	r2, [r7, #4]
 8010658:	429a      	cmp	r2, r3
 801065a:	d11f      	bne.n	801069c <tcp_process+0x5d8>
 801065c:	687b      	ldr	r3, [r7, #4]
 801065e:	68da      	ldr	r2, [r3, #12]
 8010660:	697b      	ldr	r3, [r7, #20]
 8010662:	60da      	str	r2, [r3, #12]
 8010664:	e020      	b.n	80106a8 <tcp_process+0x5e4>
 8010666:	bf00      	nop
 8010668:	200004c8 	.word	0x200004c8
 801066c:	200004c0 	.word	0x200004c0
 8010670:	200004c6 	.word	0x200004c6
 8010674:	200004bc 	.word	0x200004bc
 8010678:	200004ac 	.word	0x200004ac
 801067c:	2000403c 	.word	0x2000403c
 8010680:	20004040 	.word	0x20004040
 8010684:	0801f238 	.word	0x0801f238
 8010688:	0801f4d8 	.word	0x0801f4d8
 801068c:	0801f284 	.word	0x0801f284
 8010690:	200004c4 	.word	0x200004c4
 8010694:	200004c9 	.word	0x200004c9
 8010698:	20007150 	.word	0x20007150
 801069c:	697b      	ldr	r3, [r7, #20]
 801069e:	68db      	ldr	r3, [r3, #12]
 80106a0:	617b      	str	r3, [r7, #20]
 80106a2:	697b      	ldr	r3, [r7, #20]
 80106a4:	2b00      	cmp	r3, #0
 80106a6:	d1d4      	bne.n	8010652 <tcp_process+0x58e>
 80106a8:	687b      	ldr	r3, [r7, #4]
 80106aa:	2200      	movs	r2, #0
 80106ac:	60da      	str	r2, [r3, #12]
 80106ae:	4b77      	ldr	r3, [pc, #476]	; (801088c <tcp_process+0x7c8>)
 80106b0:	2201      	movs	r2, #1
 80106b2:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 80106b4:	687b      	ldr	r3, [r7, #4]
 80106b6:	220a      	movs	r2, #10
 80106b8:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 80106ba:	4b75      	ldr	r3, [pc, #468]	; (8010890 <tcp_process+0x7cc>)
 80106bc:	681a      	ldr	r2, [r3, #0]
 80106be:	687b      	ldr	r3, [r7, #4]
 80106c0:	60da      	str	r2, [r3, #12]
 80106c2:	4a73      	ldr	r2, [pc, #460]	; (8010890 <tcp_process+0x7cc>)
 80106c4:	687b      	ldr	r3, [r7, #4]
 80106c6:	6013      	str	r3, [r2, #0]
 80106c8:	f002 fcf6 	bl	80130b8 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 80106cc:	e0d2      	b.n	8010874 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 80106ce:	687b      	ldr	r3, [r7, #4]
 80106d0:	8b5b      	ldrh	r3, [r3, #26]
 80106d2:	f043 0302 	orr.w	r3, r3, #2
 80106d6:	b29a      	uxth	r2, r3
 80106d8:	687b      	ldr	r3, [r7, #4]
 80106da:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 80106dc:	687b      	ldr	r3, [r7, #4]
 80106de:	2208      	movs	r2, #8
 80106e0:	751a      	strb	r2, [r3, #20]
      break;
 80106e2:	e0c7      	b.n	8010874 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80106e4:	4b6b      	ldr	r3, [pc, #428]	; (8010894 <tcp_process+0x7d0>)
 80106e6:	781b      	ldrb	r3, [r3, #0]
 80106e8:	f003 0310 	and.w	r3, r3, #16
 80106ec:	2b00      	cmp	r3, #0
 80106ee:	f000 80c1 	beq.w	8010874 <tcp_process+0x7b0>
 80106f2:	687b      	ldr	r3, [r7, #4]
 80106f4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80106f6:	4b68      	ldr	r3, [pc, #416]	; (8010898 <tcp_process+0x7d4>)
 80106f8:	681b      	ldr	r3, [r3, #0]
 80106fa:	429a      	cmp	r2, r3
 80106fc:	f040 80ba 	bne.w	8010874 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8010700:	687b      	ldr	r3, [r7, #4]
 8010702:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8010704:	2b00      	cmp	r3, #0
 8010706:	f040 80b5 	bne.w	8010874 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 801070a:	687b      	ldr	r3, [r7, #4]
 801070c:	2206      	movs	r2, #6
 801070e:	751a      	strb	r2, [r3, #20]
      break;
 8010710:	e0b0      	b.n	8010874 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8010712:	6878      	ldr	r0, [r7, #4]
 8010714:	f000 f9ca 	bl	8010aac <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8010718:	4b60      	ldr	r3, [pc, #384]	; (801089c <tcp_process+0x7d8>)
 801071a:	781b      	ldrb	r3, [r3, #0]
 801071c:	f003 0320 	and.w	r3, r3, #32
 8010720:	2b00      	cmp	r3, #0
 8010722:	f000 80a9 	beq.w	8010878 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8010726:	687b      	ldr	r3, [r7, #4]
 8010728:	8b5b      	ldrh	r3, [r3, #26]
 801072a:	f043 0302 	orr.w	r3, r3, #2
 801072e:	b29a      	uxth	r2, r3
 8010730:	687b      	ldr	r3, [r7, #4]
 8010732:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8010734:	6878      	ldr	r0, [r7, #4]
 8010736:	f7fe fd3b 	bl	800f1b0 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801073a:	4b59      	ldr	r3, [pc, #356]	; (80108a0 <tcp_process+0x7dc>)
 801073c:	681b      	ldr	r3, [r3, #0]
 801073e:	687a      	ldr	r2, [r7, #4]
 8010740:	429a      	cmp	r2, r3
 8010742:	d105      	bne.n	8010750 <tcp_process+0x68c>
 8010744:	4b56      	ldr	r3, [pc, #344]	; (80108a0 <tcp_process+0x7dc>)
 8010746:	681b      	ldr	r3, [r3, #0]
 8010748:	68db      	ldr	r3, [r3, #12]
 801074a:	4a55      	ldr	r2, [pc, #340]	; (80108a0 <tcp_process+0x7dc>)
 801074c:	6013      	str	r3, [r2, #0]
 801074e:	e013      	b.n	8010778 <tcp_process+0x6b4>
 8010750:	4b53      	ldr	r3, [pc, #332]	; (80108a0 <tcp_process+0x7dc>)
 8010752:	681b      	ldr	r3, [r3, #0]
 8010754:	613b      	str	r3, [r7, #16]
 8010756:	e00c      	b.n	8010772 <tcp_process+0x6ae>
 8010758:	693b      	ldr	r3, [r7, #16]
 801075a:	68db      	ldr	r3, [r3, #12]
 801075c:	687a      	ldr	r2, [r7, #4]
 801075e:	429a      	cmp	r2, r3
 8010760:	d104      	bne.n	801076c <tcp_process+0x6a8>
 8010762:	687b      	ldr	r3, [r7, #4]
 8010764:	68da      	ldr	r2, [r3, #12]
 8010766:	693b      	ldr	r3, [r7, #16]
 8010768:	60da      	str	r2, [r3, #12]
 801076a:	e005      	b.n	8010778 <tcp_process+0x6b4>
 801076c:	693b      	ldr	r3, [r7, #16]
 801076e:	68db      	ldr	r3, [r3, #12]
 8010770:	613b      	str	r3, [r7, #16]
 8010772:	693b      	ldr	r3, [r7, #16]
 8010774:	2b00      	cmp	r3, #0
 8010776:	d1ef      	bne.n	8010758 <tcp_process+0x694>
 8010778:	687b      	ldr	r3, [r7, #4]
 801077a:	2200      	movs	r2, #0
 801077c:	60da      	str	r2, [r3, #12]
 801077e:	4b43      	ldr	r3, [pc, #268]	; (801088c <tcp_process+0x7c8>)
 8010780:	2201      	movs	r2, #1
 8010782:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8010784:	687b      	ldr	r3, [r7, #4]
 8010786:	220a      	movs	r2, #10
 8010788:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801078a:	4b41      	ldr	r3, [pc, #260]	; (8010890 <tcp_process+0x7cc>)
 801078c:	681a      	ldr	r2, [r3, #0]
 801078e:	687b      	ldr	r3, [r7, #4]
 8010790:	60da      	str	r2, [r3, #12]
 8010792:	4a3f      	ldr	r2, [pc, #252]	; (8010890 <tcp_process+0x7cc>)
 8010794:	687b      	ldr	r3, [r7, #4]
 8010796:	6013      	str	r3, [r2, #0]
 8010798:	f002 fc8e 	bl	80130b8 <tcp_timer_needed>
      }
      break;
 801079c:	e06c      	b.n	8010878 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 801079e:	6878      	ldr	r0, [r7, #4]
 80107a0:	f000 f984 	bl	8010aac <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80107a4:	4b3b      	ldr	r3, [pc, #236]	; (8010894 <tcp_process+0x7d0>)
 80107a6:	781b      	ldrb	r3, [r3, #0]
 80107a8:	f003 0310 	and.w	r3, r3, #16
 80107ac:	2b00      	cmp	r3, #0
 80107ae:	d065      	beq.n	801087c <tcp_process+0x7b8>
 80107b0:	687b      	ldr	r3, [r7, #4]
 80107b2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80107b4:	4b38      	ldr	r3, [pc, #224]	; (8010898 <tcp_process+0x7d4>)
 80107b6:	681b      	ldr	r3, [r3, #0]
 80107b8:	429a      	cmp	r2, r3
 80107ba:	d15f      	bne.n	801087c <tcp_process+0x7b8>
 80107bc:	687b      	ldr	r3, [r7, #4]
 80107be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80107c0:	2b00      	cmp	r3, #0
 80107c2:	d15b      	bne.n	801087c <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 80107c4:	6878      	ldr	r0, [r7, #4]
 80107c6:	f7fe fcf3 	bl	800f1b0 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80107ca:	4b35      	ldr	r3, [pc, #212]	; (80108a0 <tcp_process+0x7dc>)
 80107cc:	681b      	ldr	r3, [r3, #0]
 80107ce:	687a      	ldr	r2, [r7, #4]
 80107d0:	429a      	cmp	r2, r3
 80107d2:	d105      	bne.n	80107e0 <tcp_process+0x71c>
 80107d4:	4b32      	ldr	r3, [pc, #200]	; (80108a0 <tcp_process+0x7dc>)
 80107d6:	681b      	ldr	r3, [r3, #0]
 80107d8:	68db      	ldr	r3, [r3, #12]
 80107da:	4a31      	ldr	r2, [pc, #196]	; (80108a0 <tcp_process+0x7dc>)
 80107dc:	6013      	str	r3, [r2, #0]
 80107de:	e013      	b.n	8010808 <tcp_process+0x744>
 80107e0:	4b2f      	ldr	r3, [pc, #188]	; (80108a0 <tcp_process+0x7dc>)
 80107e2:	681b      	ldr	r3, [r3, #0]
 80107e4:	60fb      	str	r3, [r7, #12]
 80107e6:	e00c      	b.n	8010802 <tcp_process+0x73e>
 80107e8:	68fb      	ldr	r3, [r7, #12]
 80107ea:	68db      	ldr	r3, [r3, #12]
 80107ec:	687a      	ldr	r2, [r7, #4]
 80107ee:	429a      	cmp	r2, r3
 80107f0:	d104      	bne.n	80107fc <tcp_process+0x738>
 80107f2:	687b      	ldr	r3, [r7, #4]
 80107f4:	68da      	ldr	r2, [r3, #12]
 80107f6:	68fb      	ldr	r3, [r7, #12]
 80107f8:	60da      	str	r2, [r3, #12]
 80107fa:	e005      	b.n	8010808 <tcp_process+0x744>
 80107fc:	68fb      	ldr	r3, [r7, #12]
 80107fe:	68db      	ldr	r3, [r3, #12]
 8010800:	60fb      	str	r3, [r7, #12]
 8010802:	68fb      	ldr	r3, [r7, #12]
 8010804:	2b00      	cmp	r3, #0
 8010806:	d1ef      	bne.n	80107e8 <tcp_process+0x724>
 8010808:	687b      	ldr	r3, [r7, #4]
 801080a:	2200      	movs	r2, #0
 801080c:	60da      	str	r2, [r3, #12]
 801080e:	4b1f      	ldr	r3, [pc, #124]	; (801088c <tcp_process+0x7c8>)
 8010810:	2201      	movs	r2, #1
 8010812:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8010814:	687b      	ldr	r3, [r7, #4]
 8010816:	220a      	movs	r2, #10
 8010818:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801081a:	4b1d      	ldr	r3, [pc, #116]	; (8010890 <tcp_process+0x7cc>)
 801081c:	681a      	ldr	r2, [r3, #0]
 801081e:	687b      	ldr	r3, [r7, #4]
 8010820:	60da      	str	r2, [r3, #12]
 8010822:	4a1b      	ldr	r2, [pc, #108]	; (8010890 <tcp_process+0x7cc>)
 8010824:	687b      	ldr	r3, [r7, #4]
 8010826:	6013      	str	r3, [r2, #0]
 8010828:	f002 fc46 	bl	80130b8 <tcp_timer_needed>
      }
      break;
 801082c:	e026      	b.n	801087c <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 801082e:	6878      	ldr	r0, [r7, #4]
 8010830:	f000 f93c 	bl	8010aac <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8010834:	4b17      	ldr	r3, [pc, #92]	; (8010894 <tcp_process+0x7d0>)
 8010836:	781b      	ldrb	r3, [r3, #0]
 8010838:	f003 0310 	and.w	r3, r3, #16
 801083c:	2b00      	cmp	r3, #0
 801083e:	d01f      	beq.n	8010880 <tcp_process+0x7bc>
 8010840:	687b      	ldr	r3, [r7, #4]
 8010842:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010844:	4b14      	ldr	r3, [pc, #80]	; (8010898 <tcp_process+0x7d4>)
 8010846:	681b      	ldr	r3, [r3, #0]
 8010848:	429a      	cmp	r2, r3
 801084a:	d119      	bne.n	8010880 <tcp_process+0x7bc>
 801084c:	687b      	ldr	r3, [r7, #4]
 801084e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010850:	2b00      	cmp	r3, #0
 8010852:	d115      	bne.n	8010880 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8010854:	4b11      	ldr	r3, [pc, #68]	; (801089c <tcp_process+0x7d8>)
 8010856:	781b      	ldrb	r3, [r3, #0]
 8010858:	f043 0310 	orr.w	r3, r3, #16
 801085c:	b2da      	uxtb	r2, r3
 801085e:	4b0f      	ldr	r3, [pc, #60]	; (801089c <tcp_process+0x7d8>)
 8010860:	701a      	strb	r2, [r3, #0]
      }
      break;
 8010862:	e00d      	b.n	8010880 <tcp_process+0x7bc>
    default:
      break;
 8010864:	bf00      	nop
 8010866:	e00c      	b.n	8010882 <tcp_process+0x7be>
      break;
 8010868:	bf00      	nop
 801086a:	e00a      	b.n	8010882 <tcp_process+0x7be>
      break;
 801086c:	bf00      	nop
 801086e:	e008      	b.n	8010882 <tcp_process+0x7be>
      break;
 8010870:	bf00      	nop
 8010872:	e006      	b.n	8010882 <tcp_process+0x7be>
      break;
 8010874:	bf00      	nop
 8010876:	e004      	b.n	8010882 <tcp_process+0x7be>
      break;
 8010878:	bf00      	nop
 801087a:	e002      	b.n	8010882 <tcp_process+0x7be>
      break;
 801087c:	bf00      	nop
 801087e:	e000      	b.n	8010882 <tcp_process+0x7be>
      break;
 8010880:	bf00      	nop
  }
  return ERR_OK;
 8010882:	2300      	movs	r3, #0
}
 8010884:	4618      	mov	r0, r3
 8010886:	3724      	adds	r7, #36	; 0x24
 8010888:	46bd      	mov	sp, r7
 801088a:	bd90      	pop	{r4, r7, pc}
 801088c:	2000714c 	.word	0x2000714c
 8010890:	20007160 	.word	0x20007160
 8010894:	200004c8 	.word	0x200004c8
 8010898:	200004c0 	.word	0x200004c0
 801089c:	200004c9 	.word	0x200004c9
 80108a0:	20007150 	.word	0x20007150

080108a4 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 80108a4:	b590      	push	{r4, r7, lr}
 80108a6:	b085      	sub	sp, #20
 80108a8:	af00      	add	r7, sp, #0
 80108aa:	6078      	str	r0, [r7, #4]
 80108ac:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 80108ae:	687b      	ldr	r3, [r7, #4]
 80108b0:	2b00      	cmp	r3, #0
 80108b2:	d106      	bne.n	80108c2 <tcp_oos_insert_segment+0x1e>
 80108b4:	4b3b      	ldr	r3, [pc, #236]	; (80109a4 <tcp_oos_insert_segment+0x100>)
 80108b6:	f240 421f 	movw	r2, #1055	; 0x41f
 80108ba:	493b      	ldr	r1, [pc, #236]	; (80109a8 <tcp_oos_insert_segment+0x104>)
 80108bc:	483b      	ldr	r0, [pc, #236]	; (80109ac <tcp_oos_insert_segment+0x108>)
 80108be:	f008 f885 	bl	80189cc <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80108c2:	687b      	ldr	r3, [r7, #4]
 80108c4:	68db      	ldr	r3, [r3, #12]
 80108c6:	899b      	ldrh	r3, [r3, #12]
 80108c8:	b29b      	uxth	r3, r3
 80108ca:	4618      	mov	r0, r3
 80108cc:	f7fb fd64 	bl	800c398 <lwip_htons>
 80108d0:	4603      	mov	r3, r0
 80108d2:	b2db      	uxtb	r3, r3
 80108d4:	f003 0301 	and.w	r3, r3, #1
 80108d8:	2b00      	cmp	r3, #0
 80108da:	d028      	beq.n	801092e <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 80108dc:	6838      	ldr	r0, [r7, #0]
 80108de:	f7fe fa65 	bl	800edac <tcp_segs_free>
    next = NULL;
 80108e2:	2300      	movs	r3, #0
 80108e4:	603b      	str	r3, [r7, #0]
 80108e6:	e056      	b.n	8010996 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80108e8:	683b      	ldr	r3, [r7, #0]
 80108ea:	68db      	ldr	r3, [r3, #12]
 80108ec:	899b      	ldrh	r3, [r3, #12]
 80108ee:	b29b      	uxth	r3, r3
 80108f0:	4618      	mov	r0, r3
 80108f2:	f7fb fd51 	bl	800c398 <lwip_htons>
 80108f6:	4603      	mov	r3, r0
 80108f8:	b2db      	uxtb	r3, r3
 80108fa:	f003 0301 	and.w	r3, r3, #1
 80108fe:	2b00      	cmp	r3, #0
 8010900:	d00d      	beq.n	801091e <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8010902:	687b      	ldr	r3, [r7, #4]
 8010904:	68db      	ldr	r3, [r3, #12]
 8010906:	899b      	ldrh	r3, [r3, #12]
 8010908:	b29c      	uxth	r4, r3
 801090a:	2001      	movs	r0, #1
 801090c:	f7fb fd44 	bl	800c398 <lwip_htons>
 8010910:	4603      	mov	r3, r0
 8010912:	461a      	mov	r2, r3
 8010914:	687b      	ldr	r3, [r7, #4]
 8010916:	68db      	ldr	r3, [r3, #12]
 8010918:	4322      	orrs	r2, r4
 801091a:	b292      	uxth	r2, r2
 801091c:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 801091e:	683b      	ldr	r3, [r7, #0]
 8010920:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8010922:	683b      	ldr	r3, [r7, #0]
 8010924:	681b      	ldr	r3, [r3, #0]
 8010926:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8010928:	68f8      	ldr	r0, [r7, #12]
 801092a:	f7fe fa54 	bl	800edd6 <tcp_seg_free>
    while (next &&
 801092e:	683b      	ldr	r3, [r7, #0]
 8010930:	2b00      	cmp	r3, #0
 8010932:	d00e      	beq.n	8010952 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8010934:	687b      	ldr	r3, [r7, #4]
 8010936:	891b      	ldrh	r3, [r3, #8]
 8010938:	461a      	mov	r2, r3
 801093a:	4b1d      	ldr	r3, [pc, #116]	; (80109b0 <tcp_oos_insert_segment+0x10c>)
 801093c:	681b      	ldr	r3, [r3, #0]
 801093e:	441a      	add	r2, r3
 8010940:	683b      	ldr	r3, [r7, #0]
 8010942:	68db      	ldr	r3, [r3, #12]
 8010944:	685b      	ldr	r3, [r3, #4]
 8010946:	6839      	ldr	r1, [r7, #0]
 8010948:	8909      	ldrh	r1, [r1, #8]
 801094a:	440b      	add	r3, r1
 801094c:	1ad3      	subs	r3, r2, r3
    while (next &&
 801094e:	2b00      	cmp	r3, #0
 8010950:	daca      	bge.n	80108e8 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8010952:	683b      	ldr	r3, [r7, #0]
 8010954:	2b00      	cmp	r3, #0
 8010956:	d01e      	beq.n	8010996 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8010958:	687b      	ldr	r3, [r7, #4]
 801095a:	891b      	ldrh	r3, [r3, #8]
 801095c:	461a      	mov	r2, r3
 801095e:	4b14      	ldr	r3, [pc, #80]	; (80109b0 <tcp_oos_insert_segment+0x10c>)
 8010960:	681b      	ldr	r3, [r3, #0]
 8010962:	441a      	add	r2, r3
 8010964:	683b      	ldr	r3, [r7, #0]
 8010966:	68db      	ldr	r3, [r3, #12]
 8010968:	685b      	ldr	r3, [r3, #4]
 801096a:	1ad3      	subs	r3, r2, r3
    if (next &&
 801096c:	2b00      	cmp	r3, #0
 801096e:	dd12      	ble.n	8010996 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8010970:	683b      	ldr	r3, [r7, #0]
 8010972:	68db      	ldr	r3, [r3, #12]
 8010974:	685b      	ldr	r3, [r3, #4]
 8010976:	b29a      	uxth	r2, r3
 8010978:	4b0d      	ldr	r3, [pc, #52]	; (80109b0 <tcp_oos_insert_segment+0x10c>)
 801097a:	681b      	ldr	r3, [r3, #0]
 801097c:	b29b      	uxth	r3, r3
 801097e:	1ad3      	subs	r3, r2, r3
 8010980:	b29a      	uxth	r2, r3
 8010982:	687b      	ldr	r3, [r7, #4]
 8010984:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8010986:	687b      	ldr	r3, [r7, #4]
 8010988:	685a      	ldr	r2, [r3, #4]
 801098a:	687b      	ldr	r3, [r7, #4]
 801098c:	891b      	ldrh	r3, [r3, #8]
 801098e:	4619      	mov	r1, r3
 8010990:	4610      	mov	r0, r2
 8010992:	f7fc fe17 	bl	800d5c4 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8010996:	687b      	ldr	r3, [r7, #4]
 8010998:	683a      	ldr	r2, [r7, #0]
 801099a:	601a      	str	r2, [r3, #0]
}
 801099c:	bf00      	nop
 801099e:	3714      	adds	r7, #20
 80109a0:	46bd      	mov	sp, r7
 80109a2:	bd90      	pop	{r4, r7, pc}
 80109a4:	0801f238 	.word	0x0801f238
 80109a8:	0801f4f8 	.word	0x0801f4f8
 80109ac:	0801f284 	.word	0x0801f284
 80109b0:	200004bc 	.word	0x200004bc

080109b4 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 80109b4:	b5b0      	push	{r4, r5, r7, lr}
 80109b6:	b086      	sub	sp, #24
 80109b8:	af00      	add	r7, sp, #0
 80109ba:	60f8      	str	r0, [r7, #12]
 80109bc:	60b9      	str	r1, [r7, #8]
 80109be:	607a      	str	r2, [r7, #4]
 80109c0:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 80109c2:	e03e      	b.n	8010a42 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 80109c4:	68bb      	ldr	r3, [r7, #8]
 80109c6:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 80109c8:	68bb      	ldr	r3, [r7, #8]
 80109ca:	681b      	ldr	r3, [r3, #0]
 80109cc:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 80109ce:	697b      	ldr	r3, [r7, #20]
 80109d0:	685b      	ldr	r3, [r3, #4]
 80109d2:	4618      	mov	r0, r3
 80109d4:	f7fd f804 	bl	800d9e0 <pbuf_clen>
 80109d8:	4603      	mov	r3, r0
 80109da:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 80109dc:	68fb      	ldr	r3, [r7, #12]
 80109de:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80109e2:	8a7a      	ldrh	r2, [r7, #18]
 80109e4:	429a      	cmp	r2, r3
 80109e6:	d906      	bls.n	80109f6 <tcp_free_acked_segments+0x42>
 80109e8:	4b2a      	ldr	r3, [pc, #168]	; (8010a94 <tcp_free_acked_segments+0xe0>)
 80109ea:	f240 4257 	movw	r2, #1111	; 0x457
 80109ee:	492a      	ldr	r1, [pc, #168]	; (8010a98 <tcp_free_acked_segments+0xe4>)
 80109f0:	482a      	ldr	r0, [pc, #168]	; (8010a9c <tcp_free_acked_segments+0xe8>)
 80109f2:	f007 ffeb 	bl	80189cc <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 80109f6:	68fb      	ldr	r3, [r7, #12]
 80109f8:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 80109fc:	8a7b      	ldrh	r3, [r7, #18]
 80109fe:	1ad3      	subs	r3, r2, r3
 8010a00:	b29a      	uxth	r2, r3
 8010a02:	68fb      	ldr	r3, [r7, #12]
 8010a04:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8010a08:	697b      	ldr	r3, [r7, #20]
 8010a0a:	891a      	ldrh	r2, [r3, #8]
 8010a0c:	4b24      	ldr	r3, [pc, #144]	; (8010aa0 <tcp_free_acked_segments+0xec>)
 8010a0e:	881b      	ldrh	r3, [r3, #0]
 8010a10:	4413      	add	r3, r2
 8010a12:	b29a      	uxth	r2, r3
 8010a14:	4b22      	ldr	r3, [pc, #136]	; (8010aa0 <tcp_free_acked_segments+0xec>)
 8010a16:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8010a18:	6978      	ldr	r0, [r7, #20]
 8010a1a:	f7fe f9dc 	bl	800edd6 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8010a1e:	68fb      	ldr	r3, [r7, #12]
 8010a20:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010a24:	2b00      	cmp	r3, #0
 8010a26:	d00c      	beq.n	8010a42 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8010a28:	68bb      	ldr	r3, [r7, #8]
 8010a2a:	2b00      	cmp	r3, #0
 8010a2c:	d109      	bne.n	8010a42 <tcp_free_acked_segments+0x8e>
 8010a2e:	683b      	ldr	r3, [r7, #0]
 8010a30:	2b00      	cmp	r3, #0
 8010a32:	d106      	bne.n	8010a42 <tcp_free_acked_segments+0x8e>
 8010a34:	4b17      	ldr	r3, [pc, #92]	; (8010a94 <tcp_free_acked_segments+0xe0>)
 8010a36:	f240 4261 	movw	r2, #1121	; 0x461
 8010a3a:	491a      	ldr	r1, [pc, #104]	; (8010aa4 <tcp_free_acked_segments+0xf0>)
 8010a3c:	4817      	ldr	r0, [pc, #92]	; (8010a9c <tcp_free_acked_segments+0xe8>)
 8010a3e:	f007 ffc5 	bl	80189cc <iprintf>
  while (seg_list != NULL &&
 8010a42:	68bb      	ldr	r3, [r7, #8]
 8010a44:	2b00      	cmp	r3, #0
 8010a46:	d020      	beq.n	8010a8a <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8010a48:	68bb      	ldr	r3, [r7, #8]
 8010a4a:	68db      	ldr	r3, [r3, #12]
 8010a4c:	685b      	ldr	r3, [r3, #4]
 8010a4e:	4618      	mov	r0, r3
 8010a50:	f7fb fcb7 	bl	800c3c2 <lwip_htonl>
 8010a54:	4604      	mov	r4, r0
 8010a56:	68bb      	ldr	r3, [r7, #8]
 8010a58:	891b      	ldrh	r3, [r3, #8]
 8010a5a:	461d      	mov	r5, r3
 8010a5c:	68bb      	ldr	r3, [r7, #8]
 8010a5e:	68db      	ldr	r3, [r3, #12]
 8010a60:	899b      	ldrh	r3, [r3, #12]
 8010a62:	b29b      	uxth	r3, r3
 8010a64:	4618      	mov	r0, r3
 8010a66:	f7fb fc97 	bl	800c398 <lwip_htons>
 8010a6a:	4603      	mov	r3, r0
 8010a6c:	b2db      	uxtb	r3, r3
 8010a6e:	f003 0303 	and.w	r3, r3, #3
 8010a72:	2b00      	cmp	r3, #0
 8010a74:	d001      	beq.n	8010a7a <tcp_free_acked_segments+0xc6>
 8010a76:	2301      	movs	r3, #1
 8010a78:	e000      	b.n	8010a7c <tcp_free_acked_segments+0xc8>
 8010a7a:	2300      	movs	r3, #0
 8010a7c:	442b      	add	r3, r5
 8010a7e:	18e2      	adds	r2, r4, r3
 8010a80:	4b09      	ldr	r3, [pc, #36]	; (8010aa8 <tcp_free_acked_segments+0xf4>)
 8010a82:	681b      	ldr	r3, [r3, #0]
 8010a84:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8010a86:	2b00      	cmp	r3, #0
 8010a88:	dd9c      	ble.n	80109c4 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8010a8a:	68bb      	ldr	r3, [r7, #8]
}
 8010a8c:	4618      	mov	r0, r3
 8010a8e:	3718      	adds	r7, #24
 8010a90:	46bd      	mov	sp, r7
 8010a92:	bdb0      	pop	{r4, r5, r7, pc}
 8010a94:	0801f238 	.word	0x0801f238
 8010a98:	0801f520 	.word	0x0801f520
 8010a9c:	0801f284 	.word	0x0801f284
 8010aa0:	200004c4 	.word	0x200004c4
 8010aa4:	0801f548 	.word	0x0801f548
 8010aa8:	200004c0 	.word	0x200004c0

08010aac <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8010aac:	b5b0      	push	{r4, r5, r7, lr}
 8010aae:	b094      	sub	sp, #80	; 0x50
 8010ab0:	af00      	add	r7, sp, #0
 8010ab2:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8010ab4:	2300      	movs	r3, #0
 8010ab6:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8010ab8:	687b      	ldr	r3, [r7, #4]
 8010aba:	2b00      	cmp	r3, #0
 8010abc:	d106      	bne.n	8010acc <tcp_receive+0x20>
 8010abe:	4ba6      	ldr	r3, [pc, #664]	; (8010d58 <tcp_receive+0x2ac>)
 8010ac0:	f240 427b 	movw	r2, #1147	; 0x47b
 8010ac4:	49a5      	ldr	r1, [pc, #660]	; (8010d5c <tcp_receive+0x2b0>)
 8010ac6:	48a6      	ldr	r0, [pc, #664]	; (8010d60 <tcp_receive+0x2b4>)
 8010ac8:	f007 ff80 	bl	80189cc <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8010acc:	687b      	ldr	r3, [r7, #4]
 8010ace:	7d1b      	ldrb	r3, [r3, #20]
 8010ad0:	2b03      	cmp	r3, #3
 8010ad2:	d806      	bhi.n	8010ae2 <tcp_receive+0x36>
 8010ad4:	4ba0      	ldr	r3, [pc, #640]	; (8010d58 <tcp_receive+0x2ac>)
 8010ad6:	f240 427c 	movw	r2, #1148	; 0x47c
 8010ada:	49a2      	ldr	r1, [pc, #648]	; (8010d64 <tcp_receive+0x2b8>)
 8010adc:	48a0      	ldr	r0, [pc, #640]	; (8010d60 <tcp_receive+0x2b4>)
 8010ade:	f007 ff75 	bl	80189cc <iprintf>

  if (flags & TCP_ACK) {
 8010ae2:	4ba1      	ldr	r3, [pc, #644]	; (8010d68 <tcp_receive+0x2bc>)
 8010ae4:	781b      	ldrb	r3, [r3, #0]
 8010ae6:	f003 0310 	and.w	r3, r3, #16
 8010aea:	2b00      	cmp	r3, #0
 8010aec:	f000 8263 	beq.w	8010fb6 <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8010af0:	687b      	ldr	r3, [r7, #4]
 8010af2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010af6:	461a      	mov	r2, r3
 8010af8:	687b      	ldr	r3, [r7, #4]
 8010afa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010afc:	4413      	add	r3, r2
 8010afe:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8010b00:	687b      	ldr	r3, [r7, #4]
 8010b02:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010b04:	4b99      	ldr	r3, [pc, #612]	; (8010d6c <tcp_receive+0x2c0>)
 8010b06:	681b      	ldr	r3, [r3, #0]
 8010b08:	1ad3      	subs	r3, r2, r3
 8010b0a:	2b00      	cmp	r3, #0
 8010b0c:	db1b      	blt.n	8010b46 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8010b0e:	687b      	ldr	r3, [r7, #4]
 8010b10:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010b12:	4b96      	ldr	r3, [pc, #600]	; (8010d6c <tcp_receive+0x2c0>)
 8010b14:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8010b16:	429a      	cmp	r2, r3
 8010b18:	d106      	bne.n	8010b28 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8010b1a:	687b      	ldr	r3, [r7, #4]
 8010b1c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8010b1e:	4b94      	ldr	r3, [pc, #592]	; (8010d70 <tcp_receive+0x2c4>)
 8010b20:	681b      	ldr	r3, [r3, #0]
 8010b22:	1ad3      	subs	r3, r2, r3
 8010b24:	2b00      	cmp	r3, #0
 8010b26:	db0e      	blt.n	8010b46 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8010b28:	687b      	ldr	r3, [r7, #4]
 8010b2a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8010b2c:	4b90      	ldr	r3, [pc, #576]	; (8010d70 <tcp_receive+0x2c4>)
 8010b2e:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8010b30:	429a      	cmp	r2, r3
 8010b32:	d125      	bne.n	8010b80 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8010b34:	4b8f      	ldr	r3, [pc, #572]	; (8010d74 <tcp_receive+0x2c8>)
 8010b36:	681b      	ldr	r3, [r3, #0]
 8010b38:	89db      	ldrh	r3, [r3, #14]
 8010b3a:	b29a      	uxth	r2, r3
 8010b3c:	687b      	ldr	r3, [r7, #4]
 8010b3e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010b42:	429a      	cmp	r2, r3
 8010b44:	d91c      	bls.n	8010b80 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8010b46:	4b8b      	ldr	r3, [pc, #556]	; (8010d74 <tcp_receive+0x2c8>)
 8010b48:	681b      	ldr	r3, [r3, #0]
 8010b4a:	89db      	ldrh	r3, [r3, #14]
 8010b4c:	b29a      	uxth	r2, r3
 8010b4e:	687b      	ldr	r3, [r7, #4]
 8010b50:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8010b54:	687b      	ldr	r3, [r7, #4]
 8010b56:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8010b5a:	687b      	ldr	r3, [r7, #4]
 8010b5c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010b60:	429a      	cmp	r2, r3
 8010b62:	d205      	bcs.n	8010b70 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8010b64:	687b      	ldr	r3, [r7, #4]
 8010b66:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8010b6a:	687b      	ldr	r3, [r7, #4]
 8010b6c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8010b70:	4b7e      	ldr	r3, [pc, #504]	; (8010d6c <tcp_receive+0x2c0>)
 8010b72:	681a      	ldr	r2, [r3, #0]
 8010b74:	687b      	ldr	r3, [r7, #4]
 8010b76:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8010b78:	4b7d      	ldr	r3, [pc, #500]	; (8010d70 <tcp_receive+0x2c4>)
 8010b7a:	681a      	ldr	r2, [r3, #0]
 8010b7c:	687b      	ldr	r3, [r7, #4]
 8010b7e:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8010b80:	4b7b      	ldr	r3, [pc, #492]	; (8010d70 <tcp_receive+0x2c4>)
 8010b82:	681a      	ldr	r2, [r3, #0]
 8010b84:	687b      	ldr	r3, [r7, #4]
 8010b86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010b88:	1ad3      	subs	r3, r2, r3
 8010b8a:	2b00      	cmp	r3, #0
 8010b8c:	dc58      	bgt.n	8010c40 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8010b8e:	4b7a      	ldr	r3, [pc, #488]	; (8010d78 <tcp_receive+0x2cc>)
 8010b90:	881b      	ldrh	r3, [r3, #0]
 8010b92:	2b00      	cmp	r3, #0
 8010b94:	d14b      	bne.n	8010c2e <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8010b96:	687b      	ldr	r3, [r7, #4]
 8010b98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010b9a:	687a      	ldr	r2, [r7, #4]
 8010b9c:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8010ba0:	4413      	add	r3, r2
 8010ba2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010ba4:	429a      	cmp	r2, r3
 8010ba6:	d142      	bne.n	8010c2e <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8010ba8:	687b      	ldr	r3, [r7, #4]
 8010baa:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8010bae:	2b00      	cmp	r3, #0
 8010bb0:	db3d      	blt.n	8010c2e <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8010bb2:	687b      	ldr	r3, [r7, #4]
 8010bb4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010bb6:	4b6e      	ldr	r3, [pc, #440]	; (8010d70 <tcp_receive+0x2c4>)
 8010bb8:	681b      	ldr	r3, [r3, #0]
 8010bba:	429a      	cmp	r2, r3
 8010bbc:	d137      	bne.n	8010c2e <tcp_receive+0x182>
              found_dupack = 1;
 8010bbe:	2301      	movs	r3, #1
 8010bc0:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8010bc2:	687b      	ldr	r3, [r7, #4]
 8010bc4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010bc8:	2bff      	cmp	r3, #255	; 0xff
 8010bca:	d007      	beq.n	8010bdc <tcp_receive+0x130>
                ++pcb->dupacks;
 8010bcc:	687b      	ldr	r3, [r7, #4]
 8010bce:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010bd2:	3301      	adds	r3, #1
 8010bd4:	b2da      	uxtb	r2, r3
 8010bd6:	687b      	ldr	r3, [r7, #4]
 8010bd8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8010bdc:	687b      	ldr	r3, [r7, #4]
 8010bde:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010be2:	2b03      	cmp	r3, #3
 8010be4:	d91b      	bls.n	8010c1e <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8010be6:	687b      	ldr	r3, [r7, #4]
 8010be8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010bec:	687b      	ldr	r3, [r7, #4]
 8010bee:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010bf0:	4413      	add	r3, r2
 8010bf2:	b29a      	uxth	r2, r3
 8010bf4:	687b      	ldr	r3, [r7, #4]
 8010bf6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010bfa:	429a      	cmp	r2, r3
 8010bfc:	d30a      	bcc.n	8010c14 <tcp_receive+0x168>
 8010bfe:	687b      	ldr	r3, [r7, #4]
 8010c00:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010c04:	687b      	ldr	r3, [r7, #4]
 8010c06:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010c08:	4413      	add	r3, r2
 8010c0a:	b29a      	uxth	r2, r3
 8010c0c:	687b      	ldr	r3, [r7, #4]
 8010c0e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8010c12:	e004      	b.n	8010c1e <tcp_receive+0x172>
 8010c14:	687b      	ldr	r3, [r7, #4]
 8010c16:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010c1a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 8010c1e:	687b      	ldr	r3, [r7, #4]
 8010c20:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010c24:	2b02      	cmp	r3, #2
 8010c26:	d902      	bls.n	8010c2e <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8010c28:	6878      	ldr	r0, [r7, #4]
 8010c2a:	f001 fee9 	bl	8012a00 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8010c2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010c30:	2b00      	cmp	r3, #0
 8010c32:	f040 8160 	bne.w	8010ef6 <tcp_receive+0x44a>
        pcb->dupacks = 0;
 8010c36:	687b      	ldr	r3, [r7, #4]
 8010c38:	2200      	movs	r2, #0
 8010c3a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8010c3e:	e15a      	b.n	8010ef6 <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010c40:	4b4b      	ldr	r3, [pc, #300]	; (8010d70 <tcp_receive+0x2c4>)
 8010c42:	681a      	ldr	r2, [r3, #0]
 8010c44:	687b      	ldr	r3, [r7, #4]
 8010c46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010c48:	1ad3      	subs	r3, r2, r3
 8010c4a:	3b01      	subs	r3, #1
 8010c4c:	2b00      	cmp	r3, #0
 8010c4e:	f2c0 814d 	blt.w	8010eec <tcp_receive+0x440>
 8010c52:	4b47      	ldr	r3, [pc, #284]	; (8010d70 <tcp_receive+0x2c4>)
 8010c54:	681a      	ldr	r2, [r3, #0]
 8010c56:	687b      	ldr	r3, [r7, #4]
 8010c58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010c5a:	1ad3      	subs	r3, r2, r3
 8010c5c:	2b00      	cmp	r3, #0
 8010c5e:	f300 8145 	bgt.w	8010eec <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8010c62:	687b      	ldr	r3, [r7, #4]
 8010c64:	8b5b      	ldrh	r3, [r3, #26]
 8010c66:	f003 0304 	and.w	r3, r3, #4
 8010c6a:	2b00      	cmp	r3, #0
 8010c6c:	d010      	beq.n	8010c90 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8010c6e:	687b      	ldr	r3, [r7, #4]
 8010c70:	8b5b      	ldrh	r3, [r3, #26]
 8010c72:	f023 0304 	bic.w	r3, r3, #4
 8010c76:	b29a      	uxth	r2, r3
 8010c78:	687b      	ldr	r3, [r7, #4]
 8010c7a:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8010c7c:	687b      	ldr	r3, [r7, #4]
 8010c7e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8010c82:	687b      	ldr	r3, [r7, #4]
 8010c84:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8010c88:	687b      	ldr	r3, [r7, #4]
 8010c8a:	2200      	movs	r2, #0
 8010c8c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8010c90:	687b      	ldr	r3, [r7, #4]
 8010c92:	2200      	movs	r2, #0
 8010c94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8010c98:	687b      	ldr	r3, [r7, #4]
 8010c9a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010c9e:	10db      	asrs	r3, r3, #3
 8010ca0:	b21b      	sxth	r3, r3
 8010ca2:	b29a      	uxth	r2, r3
 8010ca4:	687b      	ldr	r3, [r7, #4]
 8010ca6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8010caa:	b29b      	uxth	r3, r3
 8010cac:	4413      	add	r3, r2
 8010cae:	b29b      	uxth	r3, r3
 8010cb0:	b21a      	sxth	r2, r3
 8010cb2:	687b      	ldr	r3, [r7, #4]
 8010cb4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8010cb8:	4b2d      	ldr	r3, [pc, #180]	; (8010d70 <tcp_receive+0x2c4>)
 8010cba:	681b      	ldr	r3, [r3, #0]
 8010cbc:	b29a      	uxth	r2, r3
 8010cbe:	687b      	ldr	r3, [r7, #4]
 8010cc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010cc2:	b29b      	uxth	r3, r3
 8010cc4:	1ad3      	subs	r3, r2, r3
 8010cc6:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8010cc8:	687b      	ldr	r3, [r7, #4]
 8010cca:	2200      	movs	r2, #0
 8010ccc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8010cd0:	4b27      	ldr	r3, [pc, #156]	; (8010d70 <tcp_receive+0x2c4>)
 8010cd2:	681a      	ldr	r2, [r3, #0]
 8010cd4:	687b      	ldr	r3, [r7, #4]
 8010cd6:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8010cd8:	687b      	ldr	r3, [r7, #4]
 8010cda:	7d1b      	ldrb	r3, [r3, #20]
 8010cdc:	2b03      	cmp	r3, #3
 8010cde:	f240 8096 	bls.w	8010e0e <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 8010ce2:	687b      	ldr	r3, [r7, #4]
 8010ce4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010ce8:	687b      	ldr	r3, [r7, #4]
 8010cea:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8010cee:	429a      	cmp	r2, r3
 8010cf0:	d244      	bcs.n	8010d7c <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8010cf2:	687b      	ldr	r3, [r7, #4]
 8010cf4:	8b5b      	ldrh	r3, [r3, #26]
 8010cf6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010cfa:	2b00      	cmp	r3, #0
 8010cfc:	d001      	beq.n	8010d02 <tcp_receive+0x256>
 8010cfe:	2301      	movs	r3, #1
 8010d00:	e000      	b.n	8010d04 <tcp_receive+0x258>
 8010d02:	2302      	movs	r3, #2
 8010d04:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8010d08:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8010d0c:	b29a      	uxth	r2, r3
 8010d0e:	687b      	ldr	r3, [r7, #4]
 8010d10:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010d12:	fb12 f303 	smulbb	r3, r2, r3
 8010d16:	b29b      	uxth	r3, r3
 8010d18:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8010d1a:	4293      	cmp	r3, r2
 8010d1c:	bf28      	it	cs
 8010d1e:	4613      	movcs	r3, r2
 8010d20:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8010d22:	687b      	ldr	r3, [r7, #4]
 8010d24:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010d28:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010d2a:	4413      	add	r3, r2
 8010d2c:	b29a      	uxth	r2, r3
 8010d2e:	687b      	ldr	r3, [r7, #4]
 8010d30:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010d34:	429a      	cmp	r2, r3
 8010d36:	d309      	bcc.n	8010d4c <tcp_receive+0x2a0>
 8010d38:	687b      	ldr	r3, [r7, #4]
 8010d3a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010d3e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010d40:	4413      	add	r3, r2
 8010d42:	b29a      	uxth	r2, r3
 8010d44:	687b      	ldr	r3, [r7, #4]
 8010d46:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8010d4a:	e060      	b.n	8010e0e <tcp_receive+0x362>
 8010d4c:	687b      	ldr	r3, [r7, #4]
 8010d4e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010d52:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8010d56:	e05a      	b.n	8010e0e <tcp_receive+0x362>
 8010d58:	0801f238 	.word	0x0801f238
 8010d5c:	0801f568 	.word	0x0801f568
 8010d60:	0801f284 	.word	0x0801f284
 8010d64:	0801f584 	.word	0x0801f584
 8010d68:	200004c8 	.word	0x200004c8
 8010d6c:	200004bc 	.word	0x200004bc
 8010d70:	200004c0 	.word	0x200004c0
 8010d74:	200004ac 	.word	0x200004ac
 8010d78:	200004c6 	.word	0x200004c6
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8010d7c:	687b      	ldr	r3, [r7, #4]
 8010d7e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8010d82:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010d84:	4413      	add	r3, r2
 8010d86:	b29a      	uxth	r2, r3
 8010d88:	687b      	ldr	r3, [r7, #4]
 8010d8a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8010d8e:	429a      	cmp	r2, r3
 8010d90:	d309      	bcc.n	8010da6 <tcp_receive+0x2fa>
 8010d92:	687b      	ldr	r3, [r7, #4]
 8010d94:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8010d98:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010d9a:	4413      	add	r3, r2
 8010d9c:	b29a      	uxth	r2, r3
 8010d9e:	687b      	ldr	r3, [r7, #4]
 8010da0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8010da4:	e004      	b.n	8010db0 <tcp_receive+0x304>
 8010da6:	687b      	ldr	r3, [r7, #4]
 8010da8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010dac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8010db0:	687b      	ldr	r3, [r7, #4]
 8010db2:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8010db6:	687b      	ldr	r3, [r7, #4]
 8010db8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010dbc:	429a      	cmp	r2, r3
 8010dbe:	d326      	bcc.n	8010e0e <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8010dc0:	687b      	ldr	r3, [r7, #4]
 8010dc2:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8010dc6:	687b      	ldr	r3, [r7, #4]
 8010dc8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010dcc:	1ad3      	subs	r3, r2, r3
 8010dce:	b29a      	uxth	r2, r3
 8010dd0:	687b      	ldr	r3, [r7, #4]
 8010dd2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8010dd6:	687b      	ldr	r3, [r7, #4]
 8010dd8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010ddc:	687b      	ldr	r3, [r7, #4]
 8010dde:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010de0:	4413      	add	r3, r2
 8010de2:	b29a      	uxth	r2, r3
 8010de4:	687b      	ldr	r3, [r7, #4]
 8010de6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010dea:	429a      	cmp	r2, r3
 8010dec:	d30a      	bcc.n	8010e04 <tcp_receive+0x358>
 8010dee:	687b      	ldr	r3, [r7, #4]
 8010df0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010df4:	687b      	ldr	r3, [r7, #4]
 8010df6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010df8:	4413      	add	r3, r2
 8010dfa:	b29a      	uxth	r2, r3
 8010dfc:	687b      	ldr	r3, [r7, #4]
 8010dfe:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8010e02:	e004      	b.n	8010e0e <tcp_receive+0x362>
 8010e04:	687b      	ldr	r3, [r7, #4]
 8010e06:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010e0a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8010e0e:	687b      	ldr	r3, [r7, #4]
 8010e10:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8010e12:	687b      	ldr	r3, [r7, #4]
 8010e14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010e16:	4a98      	ldr	r2, [pc, #608]	; (8011078 <tcp_receive+0x5cc>)
 8010e18:	6878      	ldr	r0, [r7, #4]
 8010e1a:	f7ff fdcb 	bl	80109b4 <tcp_free_acked_segments>
 8010e1e:	4602      	mov	r2, r0
 8010e20:	687b      	ldr	r3, [r7, #4]
 8010e22:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8010e24:	687b      	ldr	r3, [r7, #4]
 8010e26:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8010e28:	687b      	ldr	r3, [r7, #4]
 8010e2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010e2c:	4a93      	ldr	r2, [pc, #588]	; (801107c <tcp_receive+0x5d0>)
 8010e2e:	6878      	ldr	r0, [r7, #4]
 8010e30:	f7ff fdc0 	bl	80109b4 <tcp_free_acked_segments>
 8010e34:	4602      	mov	r2, r0
 8010e36:	687b      	ldr	r3, [r7, #4]
 8010e38:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8010e3a:	687b      	ldr	r3, [r7, #4]
 8010e3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010e3e:	2b00      	cmp	r3, #0
 8010e40:	d104      	bne.n	8010e4c <tcp_receive+0x3a0>
        pcb->rtime = -1;
 8010e42:	687b      	ldr	r3, [r7, #4]
 8010e44:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010e48:	861a      	strh	r2, [r3, #48]	; 0x30
 8010e4a:	e002      	b.n	8010e52 <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 8010e4c:	687b      	ldr	r3, [r7, #4]
 8010e4e:	2200      	movs	r2, #0
 8010e50:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8010e52:	687b      	ldr	r3, [r7, #4]
 8010e54:	2200      	movs	r2, #0
 8010e56:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8010e58:	687b      	ldr	r3, [r7, #4]
 8010e5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010e5c:	2b00      	cmp	r3, #0
 8010e5e:	d103      	bne.n	8010e68 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 8010e60:	687b      	ldr	r3, [r7, #4]
 8010e62:	2200      	movs	r2, #0
 8010e64:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8010e68:	687b      	ldr	r3, [r7, #4]
 8010e6a:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8010e6e:	4b84      	ldr	r3, [pc, #528]	; (8011080 <tcp_receive+0x5d4>)
 8010e70:	881b      	ldrh	r3, [r3, #0]
 8010e72:	4413      	add	r3, r2
 8010e74:	b29a      	uxth	r2, r3
 8010e76:	687b      	ldr	r3, [r7, #4]
 8010e78:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8010e7c:	687b      	ldr	r3, [r7, #4]
 8010e7e:	8b5b      	ldrh	r3, [r3, #26]
 8010e80:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010e84:	2b00      	cmp	r3, #0
 8010e86:	d035      	beq.n	8010ef4 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8010e88:	687b      	ldr	r3, [r7, #4]
 8010e8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010e8c:	2b00      	cmp	r3, #0
 8010e8e:	d118      	bne.n	8010ec2 <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 8010e90:	687b      	ldr	r3, [r7, #4]
 8010e92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010e94:	2b00      	cmp	r3, #0
 8010e96:	d00c      	beq.n	8010eb2 <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8010e98:	687b      	ldr	r3, [r7, #4]
 8010e9a:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8010e9c:	687b      	ldr	r3, [r7, #4]
 8010e9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010ea0:	68db      	ldr	r3, [r3, #12]
 8010ea2:	685b      	ldr	r3, [r3, #4]
 8010ea4:	4618      	mov	r0, r3
 8010ea6:	f7fb fa8c 	bl	800c3c2 <lwip_htonl>
 8010eaa:	4603      	mov	r3, r0
 8010eac:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8010eae:	2b00      	cmp	r3, #0
 8010eb0:	dc20      	bgt.n	8010ef4 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 8010eb2:	687b      	ldr	r3, [r7, #4]
 8010eb4:	8b5b      	ldrh	r3, [r3, #26]
 8010eb6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8010eba:	b29a      	uxth	r2, r3
 8010ebc:	687b      	ldr	r3, [r7, #4]
 8010ebe:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010ec0:	e018      	b.n	8010ef4 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8010ec2:	687b      	ldr	r3, [r7, #4]
 8010ec4:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8010ec6:	687b      	ldr	r3, [r7, #4]
 8010ec8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010eca:	68db      	ldr	r3, [r3, #12]
 8010ecc:	685b      	ldr	r3, [r3, #4]
 8010ece:	4618      	mov	r0, r3
 8010ed0:	f7fb fa77 	bl	800c3c2 <lwip_htonl>
 8010ed4:	4603      	mov	r3, r0
 8010ed6:	1ae3      	subs	r3, r4, r3
 8010ed8:	2b00      	cmp	r3, #0
 8010eda:	dc0b      	bgt.n	8010ef4 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 8010edc:	687b      	ldr	r3, [r7, #4]
 8010ede:	8b5b      	ldrh	r3, [r3, #26]
 8010ee0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8010ee4:	b29a      	uxth	r2, r3
 8010ee6:	687b      	ldr	r3, [r7, #4]
 8010ee8:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010eea:	e003      	b.n	8010ef4 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8010eec:	6878      	ldr	r0, [r7, #4]
 8010eee:	f001 ff73 	bl	8012dd8 <tcp_send_empty_ack>
 8010ef2:	e000      	b.n	8010ef6 <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010ef4:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8010ef6:	687b      	ldr	r3, [r7, #4]
 8010ef8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010efa:	2b00      	cmp	r3, #0
 8010efc:	d05b      	beq.n	8010fb6 <tcp_receive+0x50a>
 8010efe:	687b      	ldr	r3, [r7, #4]
 8010f00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010f02:	4b60      	ldr	r3, [pc, #384]	; (8011084 <tcp_receive+0x5d8>)
 8010f04:	681b      	ldr	r3, [r3, #0]
 8010f06:	1ad3      	subs	r3, r2, r3
 8010f08:	2b00      	cmp	r3, #0
 8010f0a:	da54      	bge.n	8010fb6 <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8010f0c:	4b5e      	ldr	r3, [pc, #376]	; (8011088 <tcp_receive+0x5dc>)
 8010f0e:	681b      	ldr	r3, [r3, #0]
 8010f10:	b29a      	uxth	r2, r3
 8010f12:	687b      	ldr	r3, [r7, #4]
 8010f14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010f16:	b29b      	uxth	r3, r3
 8010f18:	1ad3      	subs	r3, r2, r3
 8010f1a:	b29b      	uxth	r3, r3
 8010f1c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8010f20:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8010f24:	687b      	ldr	r3, [r7, #4]
 8010f26:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010f2a:	10db      	asrs	r3, r3, #3
 8010f2c:	b21b      	sxth	r3, r3
 8010f2e:	b29b      	uxth	r3, r3
 8010f30:	1ad3      	subs	r3, r2, r3
 8010f32:	b29b      	uxth	r3, r3
 8010f34:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8010f38:	687b      	ldr	r3, [r7, #4]
 8010f3a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010f3e:	b29a      	uxth	r2, r3
 8010f40:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8010f44:	4413      	add	r3, r2
 8010f46:	b29b      	uxth	r3, r3
 8010f48:	b21a      	sxth	r2, r3
 8010f4a:	687b      	ldr	r3, [r7, #4]
 8010f4c:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8010f4e:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8010f52:	2b00      	cmp	r3, #0
 8010f54:	da05      	bge.n	8010f62 <tcp_receive+0x4b6>
        m = (s16_t) - m;
 8010f56:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8010f5a:	425b      	negs	r3, r3
 8010f5c:	b29b      	uxth	r3, r3
 8010f5e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8010f62:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8010f66:	687b      	ldr	r3, [r7, #4]
 8010f68:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8010f6c:	109b      	asrs	r3, r3, #2
 8010f6e:	b21b      	sxth	r3, r3
 8010f70:	b29b      	uxth	r3, r3
 8010f72:	1ad3      	subs	r3, r2, r3
 8010f74:	b29b      	uxth	r3, r3
 8010f76:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8010f7a:	687b      	ldr	r3, [r7, #4]
 8010f7c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8010f80:	b29a      	uxth	r2, r3
 8010f82:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8010f86:	4413      	add	r3, r2
 8010f88:	b29b      	uxth	r3, r3
 8010f8a:	b21a      	sxth	r2, r3
 8010f8c:	687b      	ldr	r3, [r7, #4]
 8010f8e:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8010f90:	687b      	ldr	r3, [r7, #4]
 8010f92:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010f96:	10db      	asrs	r3, r3, #3
 8010f98:	b21b      	sxth	r3, r3
 8010f9a:	b29a      	uxth	r2, r3
 8010f9c:	687b      	ldr	r3, [r7, #4]
 8010f9e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8010fa2:	b29b      	uxth	r3, r3
 8010fa4:	4413      	add	r3, r2
 8010fa6:	b29b      	uxth	r3, r3
 8010fa8:	b21a      	sxth	r2, r3
 8010faa:	687b      	ldr	r3, [r7, #4]
 8010fac:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8010fb0:	687b      	ldr	r3, [r7, #4]
 8010fb2:	2200      	movs	r2, #0
 8010fb4:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8010fb6:	4b35      	ldr	r3, [pc, #212]	; (801108c <tcp_receive+0x5e0>)
 8010fb8:	881b      	ldrh	r3, [r3, #0]
 8010fba:	2b00      	cmp	r3, #0
 8010fbc:	f000 84e1 	beq.w	8011982 <tcp_receive+0xed6>
 8010fc0:	687b      	ldr	r3, [r7, #4]
 8010fc2:	7d1b      	ldrb	r3, [r3, #20]
 8010fc4:	2b06      	cmp	r3, #6
 8010fc6:	f200 84dc 	bhi.w	8011982 <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8010fca:	687b      	ldr	r3, [r7, #4]
 8010fcc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010fce:	4b30      	ldr	r3, [pc, #192]	; (8011090 <tcp_receive+0x5e4>)
 8010fd0:	681b      	ldr	r3, [r3, #0]
 8010fd2:	1ad3      	subs	r3, r2, r3
 8010fd4:	3b01      	subs	r3, #1
 8010fd6:	2b00      	cmp	r3, #0
 8010fd8:	f2c0 808e 	blt.w	80110f8 <tcp_receive+0x64c>
 8010fdc:	687b      	ldr	r3, [r7, #4]
 8010fde:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010fe0:	4b2a      	ldr	r3, [pc, #168]	; (801108c <tcp_receive+0x5e0>)
 8010fe2:	881b      	ldrh	r3, [r3, #0]
 8010fe4:	4619      	mov	r1, r3
 8010fe6:	4b2a      	ldr	r3, [pc, #168]	; (8011090 <tcp_receive+0x5e4>)
 8010fe8:	681b      	ldr	r3, [r3, #0]
 8010fea:	440b      	add	r3, r1
 8010fec:	1ad3      	subs	r3, r2, r3
 8010fee:	3301      	adds	r3, #1
 8010ff0:	2b00      	cmp	r3, #0
 8010ff2:	f300 8081 	bgt.w	80110f8 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8010ff6:	4b27      	ldr	r3, [pc, #156]	; (8011094 <tcp_receive+0x5e8>)
 8010ff8:	685b      	ldr	r3, [r3, #4]
 8010ffa:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8010ffc:	687b      	ldr	r3, [r7, #4]
 8010ffe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011000:	4b23      	ldr	r3, [pc, #140]	; (8011090 <tcp_receive+0x5e4>)
 8011002:	681b      	ldr	r3, [r3, #0]
 8011004:	1ad3      	subs	r3, r2, r3
 8011006:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8011008:	4b22      	ldr	r3, [pc, #136]	; (8011094 <tcp_receive+0x5e8>)
 801100a:	685b      	ldr	r3, [r3, #4]
 801100c:	2b00      	cmp	r3, #0
 801100e:	d106      	bne.n	801101e <tcp_receive+0x572>
 8011010:	4b21      	ldr	r3, [pc, #132]	; (8011098 <tcp_receive+0x5ec>)
 8011012:	f240 5294 	movw	r2, #1428	; 0x594
 8011016:	4921      	ldr	r1, [pc, #132]	; (801109c <tcp_receive+0x5f0>)
 8011018:	4821      	ldr	r0, [pc, #132]	; (80110a0 <tcp_receive+0x5f4>)
 801101a:	f007 fcd7 	bl	80189cc <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 801101e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011020:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8011024:	4293      	cmp	r3, r2
 8011026:	d906      	bls.n	8011036 <tcp_receive+0x58a>
 8011028:	4b1b      	ldr	r3, [pc, #108]	; (8011098 <tcp_receive+0x5ec>)
 801102a:	f240 5295 	movw	r2, #1429	; 0x595
 801102e:	491d      	ldr	r1, [pc, #116]	; (80110a4 <tcp_receive+0x5f8>)
 8011030:	481b      	ldr	r0, [pc, #108]	; (80110a0 <tcp_receive+0x5f4>)
 8011032:	f007 fccb 	bl	80189cc <iprintf>
      off = (u16_t)off32;
 8011036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011038:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 801103c:	4b15      	ldr	r3, [pc, #84]	; (8011094 <tcp_receive+0x5e8>)
 801103e:	685b      	ldr	r3, [r3, #4]
 8011040:	891b      	ldrh	r3, [r3, #8]
 8011042:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011046:	429a      	cmp	r2, r3
 8011048:	d906      	bls.n	8011058 <tcp_receive+0x5ac>
 801104a:	4b13      	ldr	r3, [pc, #76]	; (8011098 <tcp_receive+0x5ec>)
 801104c:	f240 5297 	movw	r2, #1431	; 0x597
 8011050:	4915      	ldr	r1, [pc, #84]	; (80110a8 <tcp_receive+0x5fc>)
 8011052:	4813      	ldr	r0, [pc, #76]	; (80110a0 <tcp_receive+0x5f4>)
 8011054:	f007 fcba 	bl	80189cc <iprintf>
      inseg.len -= off;
 8011058:	4b0e      	ldr	r3, [pc, #56]	; (8011094 <tcp_receive+0x5e8>)
 801105a:	891a      	ldrh	r2, [r3, #8]
 801105c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011060:	1ad3      	subs	r3, r2, r3
 8011062:	b29a      	uxth	r2, r3
 8011064:	4b0b      	ldr	r3, [pc, #44]	; (8011094 <tcp_receive+0x5e8>)
 8011066:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8011068:	4b0a      	ldr	r3, [pc, #40]	; (8011094 <tcp_receive+0x5e8>)
 801106a:	685b      	ldr	r3, [r3, #4]
 801106c:	891a      	ldrh	r2, [r3, #8]
 801106e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011072:	1ad3      	subs	r3, r2, r3
 8011074:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8011076:	e029      	b.n	80110cc <tcp_receive+0x620>
 8011078:	0801f5a0 	.word	0x0801f5a0
 801107c:	0801f5a8 	.word	0x0801f5a8
 8011080:	200004c4 	.word	0x200004c4
 8011084:	200004c0 	.word	0x200004c0
 8011088:	20007154 	.word	0x20007154
 801108c:	200004c6 	.word	0x200004c6
 8011090:	200004bc 	.word	0x200004bc
 8011094:	2000049c 	.word	0x2000049c
 8011098:	0801f238 	.word	0x0801f238
 801109c:	0801f5b0 	.word	0x0801f5b0
 80110a0:	0801f284 	.word	0x0801f284
 80110a4:	0801f5c0 	.word	0x0801f5c0
 80110a8:	0801f5d0 	.word	0x0801f5d0
        off -= p->len;
 80110ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80110ae:	895b      	ldrh	r3, [r3, #10]
 80110b0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80110b4:	1ad3      	subs	r3, r2, r3
 80110b6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 80110ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80110bc:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80110be:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 80110c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80110c2:	2200      	movs	r2, #0
 80110c4:	815a      	strh	r2, [r3, #10]
        p = p->next;
 80110c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80110c8:	681b      	ldr	r3, [r3, #0]
 80110ca:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 80110cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80110ce:	895b      	ldrh	r3, [r3, #10]
 80110d0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80110d4:	429a      	cmp	r2, r3
 80110d6:	d8e9      	bhi.n	80110ac <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 80110d8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80110dc:	4619      	mov	r1, r3
 80110de:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80110e0:	f7fc fb70 	bl	800d7c4 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 80110e4:	687b      	ldr	r3, [r7, #4]
 80110e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80110e8:	4a91      	ldr	r2, [pc, #580]	; (8011330 <tcp_receive+0x884>)
 80110ea:	6013      	str	r3, [r2, #0]
 80110ec:	4b91      	ldr	r3, [pc, #580]	; (8011334 <tcp_receive+0x888>)
 80110ee:	68db      	ldr	r3, [r3, #12]
 80110f0:	4a8f      	ldr	r2, [pc, #572]	; (8011330 <tcp_receive+0x884>)
 80110f2:	6812      	ldr	r2, [r2, #0]
 80110f4:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80110f6:	e00d      	b.n	8011114 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 80110f8:	4b8d      	ldr	r3, [pc, #564]	; (8011330 <tcp_receive+0x884>)
 80110fa:	681a      	ldr	r2, [r3, #0]
 80110fc:	687b      	ldr	r3, [r7, #4]
 80110fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011100:	1ad3      	subs	r3, r2, r3
 8011102:	2b00      	cmp	r3, #0
 8011104:	da06      	bge.n	8011114 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8011106:	687b      	ldr	r3, [r7, #4]
 8011108:	8b5b      	ldrh	r3, [r3, #26]
 801110a:	f043 0302 	orr.w	r3, r3, #2
 801110e:	b29a      	uxth	r2, r3
 8011110:	687b      	ldr	r3, [r7, #4]
 8011112:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8011114:	4b86      	ldr	r3, [pc, #536]	; (8011330 <tcp_receive+0x884>)
 8011116:	681a      	ldr	r2, [r3, #0]
 8011118:	687b      	ldr	r3, [r7, #4]
 801111a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801111c:	1ad3      	subs	r3, r2, r3
 801111e:	2b00      	cmp	r3, #0
 8011120:	f2c0 842a 	blt.w	8011978 <tcp_receive+0xecc>
 8011124:	4b82      	ldr	r3, [pc, #520]	; (8011330 <tcp_receive+0x884>)
 8011126:	681a      	ldr	r2, [r3, #0]
 8011128:	687b      	ldr	r3, [r7, #4]
 801112a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801112c:	6879      	ldr	r1, [r7, #4]
 801112e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011130:	440b      	add	r3, r1
 8011132:	1ad3      	subs	r3, r2, r3
 8011134:	3301      	adds	r3, #1
 8011136:	2b00      	cmp	r3, #0
 8011138:	f300 841e 	bgt.w	8011978 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 801113c:	687b      	ldr	r3, [r7, #4]
 801113e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011140:	4b7b      	ldr	r3, [pc, #492]	; (8011330 <tcp_receive+0x884>)
 8011142:	681b      	ldr	r3, [r3, #0]
 8011144:	429a      	cmp	r2, r3
 8011146:	f040 829a 	bne.w	801167e <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 801114a:	4b7a      	ldr	r3, [pc, #488]	; (8011334 <tcp_receive+0x888>)
 801114c:	891c      	ldrh	r4, [r3, #8]
 801114e:	4b79      	ldr	r3, [pc, #484]	; (8011334 <tcp_receive+0x888>)
 8011150:	68db      	ldr	r3, [r3, #12]
 8011152:	899b      	ldrh	r3, [r3, #12]
 8011154:	b29b      	uxth	r3, r3
 8011156:	4618      	mov	r0, r3
 8011158:	f7fb f91e 	bl	800c398 <lwip_htons>
 801115c:	4603      	mov	r3, r0
 801115e:	b2db      	uxtb	r3, r3
 8011160:	f003 0303 	and.w	r3, r3, #3
 8011164:	2b00      	cmp	r3, #0
 8011166:	d001      	beq.n	801116c <tcp_receive+0x6c0>
 8011168:	2301      	movs	r3, #1
 801116a:	e000      	b.n	801116e <tcp_receive+0x6c2>
 801116c:	2300      	movs	r3, #0
 801116e:	4423      	add	r3, r4
 8011170:	b29a      	uxth	r2, r3
 8011172:	4b71      	ldr	r3, [pc, #452]	; (8011338 <tcp_receive+0x88c>)
 8011174:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8011176:	687b      	ldr	r3, [r7, #4]
 8011178:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801117a:	4b6f      	ldr	r3, [pc, #444]	; (8011338 <tcp_receive+0x88c>)
 801117c:	881b      	ldrh	r3, [r3, #0]
 801117e:	429a      	cmp	r2, r3
 8011180:	d275      	bcs.n	801126e <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8011182:	4b6c      	ldr	r3, [pc, #432]	; (8011334 <tcp_receive+0x888>)
 8011184:	68db      	ldr	r3, [r3, #12]
 8011186:	899b      	ldrh	r3, [r3, #12]
 8011188:	b29b      	uxth	r3, r3
 801118a:	4618      	mov	r0, r3
 801118c:	f7fb f904 	bl	800c398 <lwip_htons>
 8011190:	4603      	mov	r3, r0
 8011192:	b2db      	uxtb	r3, r3
 8011194:	f003 0301 	and.w	r3, r3, #1
 8011198:	2b00      	cmp	r3, #0
 801119a:	d01f      	beq.n	80111dc <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 801119c:	4b65      	ldr	r3, [pc, #404]	; (8011334 <tcp_receive+0x888>)
 801119e:	68db      	ldr	r3, [r3, #12]
 80111a0:	899b      	ldrh	r3, [r3, #12]
 80111a2:	b29b      	uxth	r3, r3
 80111a4:	b21b      	sxth	r3, r3
 80111a6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80111aa:	b21c      	sxth	r4, r3
 80111ac:	4b61      	ldr	r3, [pc, #388]	; (8011334 <tcp_receive+0x888>)
 80111ae:	68db      	ldr	r3, [r3, #12]
 80111b0:	899b      	ldrh	r3, [r3, #12]
 80111b2:	b29b      	uxth	r3, r3
 80111b4:	4618      	mov	r0, r3
 80111b6:	f7fb f8ef 	bl	800c398 <lwip_htons>
 80111ba:	4603      	mov	r3, r0
 80111bc:	b2db      	uxtb	r3, r3
 80111be:	b29b      	uxth	r3, r3
 80111c0:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80111c4:	b29b      	uxth	r3, r3
 80111c6:	4618      	mov	r0, r3
 80111c8:	f7fb f8e6 	bl	800c398 <lwip_htons>
 80111cc:	4603      	mov	r3, r0
 80111ce:	b21b      	sxth	r3, r3
 80111d0:	4323      	orrs	r3, r4
 80111d2:	b21a      	sxth	r2, r3
 80111d4:	4b57      	ldr	r3, [pc, #348]	; (8011334 <tcp_receive+0x888>)
 80111d6:	68db      	ldr	r3, [r3, #12]
 80111d8:	b292      	uxth	r2, r2
 80111da:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 80111dc:	687b      	ldr	r3, [r7, #4]
 80111de:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80111e0:	4b54      	ldr	r3, [pc, #336]	; (8011334 <tcp_receive+0x888>)
 80111e2:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80111e4:	4b53      	ldr	r3, [pc, #332]	; (8011334 <tcp_receive+0x888>)
 80111e6:	68db      	ldr	r3, [r3, #12]
 80111e8:	899b      	ldrh	r3, [r3, #12]
 80111ea:	b29b      	uxth	r3, r3
 80111ec:	4618      	mov	r0, r3
 80111ee:	f7fb f8d3 	bl	800c398 <lwip_htons>
 80111f2:	4603      	mov	r3, r0
 80111f4:	b2db      	uxtb	r3, r3
 80111f6:	f003 0302 	and.w	r3, r3, #2
 80111fa:	2b00      	cmp	r3, #0
 80111fc:	d005      	beq.n	801120a <tcp_receive+0x75e>
            inseg.len -= 1;
 80111fe:	4b4d      	ldr	r3, [pc, #308]	; (8011334 <tcp_receive+0x888>)
 8011200:	891b      	ldrh	r3, [r3, #8]
 8011202:	3b01      	subs	r3, #1
 8011204:	b29a      	uxth	r2, r3
 8011206:	4b4b      	ldr	r3, [pc, #300]	; (8011334 <tcp_receive+0x888>)
 8011208:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 801120a:	4b4a      	ldr	r3, [pc, #296]	; (8011334 <tcp_receive+0x888>)
 801120c:	685b      	ldr	r3, [r3, #4]
 801120e:	4a49      	ldr	r2, [pc, #292]	; (8011334 <tcp_receive+0x888>)
 8011210:	8912      	ldrh	r2, [r2, #8]
 8011212:	4611      	mov	r1, r2
 8011214:	4618      	mov	r0, r3
 8011216:	f7fc f9d5 	bl	800d5c4 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 801121a:	4b46      	ldr	r3, [pc, #280]	; (8011334 <tcp_receive+0x888>)
 801121c:	891c      	ldrh	r4, [r3, #8]
 801121e:	4b45      	ldr	r3, [pc, #276]	; (8011334 <tcp_receive+0x888>)
 8011220:	68db      	ldr	r3, [r3, #12]
 8011222:	899b      	ldrh	r3, [r3, #12]
 8011224:	b29b      	uxth	r3, r3
 8011226:	4618      	mov	r0, r3
 8011228:	f7fb f8b6 	bl	800c398 <lwip_htons>
 801122c:	4603      	mov	r3, r0
 801122e:	b2db      	uxtb	r3, r3
 8011230:	f003 0303 	and.w	r3, r3, #3
 8011234:	2b00      	cmp	r3, #0
 8011236:	d001      	beq.n	801123c <tcp_receive+0x790>
 8011238:	2301      	movs	r3, #1
 801123a:	e000      	b.n	801123e <tcp_receive+0x792>
 801123c:	2300      	movs	r3, #0
 801123e:	4423      	add	r3, r4
 8011240:	b29a      	uxth	r2, r3
 8011242:	4b3d      	ldr	r3, [pc, #244]	; (8011338 <tcp_receive+0x88c>)
 8011244:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8011246:	4b3c      	ldr	r3, [pc, #240]	; (8011338 <tcp_receive+0x88c>)
 8011248:	881b      	ldrh	r3, [r3, #0]
 801124a:	461a      	mov	r2, r3
 801124c:	4b38      	ldr	r3, [pc, #224]	; (8011330 <tcp_receive+0x884>)
 801124e:	681b      	ldr	r3, [r3, #0]
 8011250:	441a      	add	r2, r3
 8011252:	687b      	ldr	r3, [r7, #4]
 8011254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011256:	6879      	ldr	r1, [r7, #4]
 8011258:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801125a:	440b      	add	r3, r1
 801125c:	429a      	cmp	r2, r3
 801125e:	d006      	beq.n	801126e <tcp_receive+0x7c2>
 8011260:	4b36      	ldr	r3, [pc, #216]	; (801133c <tcp_receive+0x890>)
 8011262:	f240 52cb 	movw	r2, #1483	; 0x5cb
 8011266:	4936      	ldr	r1, [pc, #216]	; (8011340 <tcp_receive+0x894>)
 8011268:	4836      	ldr	r0, [pc, #216]	; (8011344 <tcp_receive+0x898>)
 801126a:	f007 fbaf 	bl	80189cc <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 801126e:	687b      	ldr	r3, [r7, #4]
 8011270:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011272:	2b00      	cmp	r3, #0
 8011274:	f000 80e7 	beq.w	8011446 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8011278:	4b2e      	ldr	r3, [pc, #184]	; (8011334 <tcp_receive+0x888>)
 801127a:	68db      	ldr	r3, [r3, #12]
 801127c:	899b      	ldrh	r3, [r3, #12]
 801127e:	b29b      	uxth	r3, r3
 8011280:	4618      	mov	r0, r3
 8011282:	f7fb f889 	bl	800c398 <lwip_htons>
 8011286:	4603      	mov	r3, r0
 8011288:	b2db      	uxtb	r3, r3
 801128a:	f003 0301 	and.w	r3, r3, #1
 801128e:	2b00      	cmp	r3, #0
 8011290:	d010      	beq.n	80112b4 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8011292:	e00a      	b.n	80112aa <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8011294:	687b      	ldr	r3, [r7, #4]
 8011296:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011298:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 801129a:	687b      	ldr	r3, [r7, #4]
 801129c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801129e:	681a      	ldr	r2, [r3, #0]
 80112a0:	687b      	ldr	r3, [r7, #4]
 80112a2:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 80112a4:	68f8      	ldr	r0, [r7, #12]
 80112a6:	f7fd fd96 	bl	800edd6 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 80112aa:	687b      	ldr	r3, [r7, #4]
 80112ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80112ae:	2b00      	cmp	r3, #0
 80112b0:	d1f0      	bne.n	8011294 <tcp_receive+0x7e8>
 80112b2:	e0c8      	b.n	8011446 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 80112b4:	687b      	ldr	r3, [r7, #4]
 80112b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80112b8:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 80112ba:	e052      	b.n	8011362 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80112bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80112be:	68db      	ldr	r3, [r3, #12]
 80112c0:	899b      	ldrh	r3, [r3, #12]
 80112c2:	b29b      	uxth	r3, r3
 80112c4:	4618      	mov	r0, r3
 80112c6:	f7fb f867 	bl	800c398 <lwip_htons>
 80112ca:	4603      	mov	r3, r0
 80112cc:	b2db      	uxtb	r3, r3
 80112ce:	f003 0301 	and.w	r3, r3, #1
 80112d2:	2b00      	cmp	r3, #0
 80112d4:	d03d      	beq.n	8011352 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 80112d6:	4b17      	ldr	r3, [pc, #92]	; (8011334 <tcp_receive+0x888>)
 80112d8:	68db      	ldr	r3, [r3, #12]
 80112da:	899b      	ldrh	r3, [r3, #12]
 80112dc:	b29b      	uxth	r3, r3
 80112de:	4618      	mov	r0, r3
 80112e0:	f7fb f85a 	bl	800c398 <lwip_htons>
 80112e4:	4603      	mov	r3, r0
 80112e6:	b2db      	uxtb	r3, r3
 80112e8:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80112ec:	2b00      	cmp	r3, #0
 80112ee:	d130      	bne.n	8011352 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 80112f0:	4b10      	ldr	r3, [pc, #64]	; (8011334 <tcp_receive+0x888>)
 80112f2:	68db      	ldr	r3, [r3, #12]
 80112f4:	899b      	ldrh	r3, [r3, #12]
 80112f6:	b29c      	uxth	r4, r3
 80112f8:	2001      	movs	r0, #1
 80112fa:	f7fb f84d 	bl	800c398 <lwip_htons>
 80112fe:	4603      	mov	r3, r0
 8011300:	461a      	mov	r2, r3
 8011302:	4b0c      	ldr	r3, [pc, #48]	; (8011334 <tcp_receive+0x888>)
 8011304:	68db      	ldr	r3, [r3, #12]
 8011306:	4322      	orrs	r2, r4
 8011308:	b292      	uxth	r2, r2
 801130a:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 801130c:	4b09      	ldr	r3, [pc, #36]	; (8011334 <tcp_receive+0x888>)
 801130e:	891c      	ldrh	r4, [r3, #8]
 8011310:	4b08      	ldr	r3, [pc, #32]	; (8011334 <tcp_receive+0x888>)
 8011312:	68db      	ldr	r3, [r3, #12]
 8011314:	899b      	ldrh	r3, [r3, #12]
 8011316:	b29b      	uxth	r3, r3
 8011318:	4618      	mov	r0, r3
 801131a:	f7fb f83d 	bl	800c398 <lwip_htons>
 801131e:	4603      	mov	r3, r0
 8011320:	b2db      	uxtb	r3, r3
 8011322:	f003 0303 	and.w	r3, r3, #3
 8011326:	2b00      	cmp	r3, #0
 8011328:	d00e      	beq.n	8011348 <tcp_receive+0x89c>
 801132a:	2301      	movs	r3, #1
 801132c:	e00d      	b.n	801134a <tcp_receive+0x89e>
 801132e:	bf00      	nop
 8011330:	200004bc 	.word	0x200004bc
 8011334:	2000049c 	.word	0x2000049c
 8011338:	200004c6 	.word	0x200004c6
 801133c:	0801f238 	.word	0x0801f238
 8011340:	0801f5e0 	.word	0x0801f5e0
 8011344:	0801f284 	.word	0x0801f284
 8011348:	2300      	movs	r3, #0
 801134a:	4423      	add	r3, r4
 801134c:	b29a      	uxth	r2, r3
 801134e:	4b98      	ldr	r3, [pc, #608]	; (80115b0 <tcp_receive+0xb04>)
 8011350:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8011352:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011354:	613b      	str	r3, [r7, #16]
              next = next->next;
 8011356:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011358:	681b      	ldr	r3, [r3, #0]
 801135a:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 801135c:	6938      	ldr	r0, [r7, #16]
 801135e:	f7fd fd3a 	bl	800edd6 <tcp_seg_free>
            while (next &&
 8011362:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011364:	2b00      	cmp	r3, #0
 8011366:	d00e      	beq.n	8011386 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8011368:	4b91      	ldr	r3, [pc, #580]	; (80115b0 <tcp_receive+0xb04>)
 801136a:	881b      	ldrh	r3, [r3, #0]
 801136c:	461a      	mov	r2, r3
 801136e:	4b91      	ldr	r3, [pc, #580]	; (80115b4 <tcp_receive+0xb08>)
 8011370:	681b      	ldr	r3, [r3, #0]
 8011372:	441a      	add	r2, r3
 8011374:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011376:	68db      	ldr	r3, [r3, #12]
 8011378:	685b      	ldr	r3, [r3, #4]
 801137a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801137c:	8909      	ldrh	r1, [r1, #8]
 801137e:	440b      	add	r3, r1
 8011380:	1ad3      	subs	r3, r2, r3
            while (next &&
 8011382:	2b00      	cmp	r3, #0
 8011384:	da9a      	bge.n	80112bc <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8011386:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011388:	2b00      	cmp	r3, #0
 801138a:	d059      	beq.n	8011440 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 801138c:	4b88      	ldr	r3, [pc, #544]	; (80115b0 <tcp_receive+0xb04>)
 801138e:	881b      	ldrh	r3, [r3, #0]
 8011390:	461a      	mov	r2, r3
 8011392:	4b88      	ldr	r3, [pc, #544]	; (80115b4 <tcp_receive+0xb08>)
 8011394:	681b      	ldr	r3, [r3, #0]
 8011396:	441a      	add	r2, r3
 8011398:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801139a:	68db      	ldr	r3, [r3, #12]
 801139c:	685b      	ldr	r3, [r3, #4]
 801139e:	1ad3      	subs	r3, r2, r3
            if (next &&
 80113a0:	2b00      	cmp	r3, #0
 80113a2:	dd4d      	ble.n	8011440 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 80113a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80113a6:	68db      	ldr	r3, [r3, #12]
 80113a8:	685b      	ldr	r3, [r3, #4]
 80113aa:	b29a      	uxth	r2, r3
 80113ac:	4b81      	ldr	r3, [pc, #516]	; (80115b4 <tcp_receive+0xb08>)
 80113ae:	681b      	ldr	r3, [r3, #0]
 80113b0:	b29b      	uxth	r3, r3
 80113b2:	1ad3      	subs	r3, r2, r3
 80113b4:	b29a      	uxth	r2, r3
 80113b6:	4b80      	ldr	r3, [pc, #512]	; (80115b8 <tcp_receive+0xb0c>)
 80113b8:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80113ba:	4b7f      	ldr	r3, [pc, #508]	; (80115b8 <tcp_receive+0xb0c>)
 80113bc:	68db      	ldr	r3, [r3, #12]
 80113be:	899b      	ldrh	r3, [r3, #12]
 80113c0:	b29b      	uxth	r3, r3
 80113c2:	4618      	mov	r0, r3
 80113c4:	f7fa ffe8 	bl	800c398 <lwip_htons>
 80113c8:	4603      	mov	r3, r0
 80113ca:	b2db      	uxtb	r3, r3
 80113cc:	f003 0302 	and.w	r3, r3, #2
 80113d0:	2b00      	cmp	r3, #0
 80113d2:	d005      	beq.n	80113e0 <tcp_receive+0x934>
                inseg.len -= 1;
 80113d4:	4b78      	ldr	r3, [pc, #480]	; (80115b8 <tcp_receive+0xb0c>)
 80113d6:	891b      	ldrh	r3, [r3, #8]
 80113d8:	3b01      	subs	r3, #1
 80113da:	b29a      	uxth	r2, r3
 80113dc:	4b76      	ldr	r3, [pc, #472]	; (80115b8 <tcp_receive+0xb0c>)
 80113de:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 80113e0:	4b75      	ldr	r3, [pc, #468]	; (80115b8 <tcp_receive+0xb0c>)
 80113e2:	685b      	ldr	r3, [r3, #4]
 80113e4:	4a74      	ldr	r2, [pc, #464]	; (80115b8 <tcp_receive+0xb0c>)
 80113e6:	8912      	ldrh	r2, [r2, #8]
 80113e8:	4611      	mov	r1, r2
 80113ea:	4618      	mov	r0, r3
 80113ec:	f7fc f8ea 	bl	800d5c4 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 80113f0:	4b71      	ldr	r3, [pc, #452]	; (80115b8 <tcp_receive+0xb0c>)
 80113f2:	891c      	ldrh	r4, [r3, #8]
 80113f4:	4b70      	ldr	r3, [pc, #448]	; (80115b8 <tcp_receive+0xb0c>)
 80113f6:	68db      	ldr	r3, [r3, #12]
 80113f8:	899b      	ldrh	r3, [r3, #12]
 80113fa:	b29b      	uxth	r3, r3
 80113fc:	4618      	mov	r0, r3
 80113fe:	f7fa ffcb 	bl	800c398 <lwip_htons>
 8011402:	4603      	mov	r3, r0
 8011404:	b2db      	uxtb	r3, r3
 8011406:	f003 0303 	and.w	r3, r3, #3
 801140a:	2b00      	cmp	r3, #0
 801140c:	d001      	beq.n	8011412 <tcp_receive+0x966>
 801140e:	2301      	movs	r3, #1
 8011410:	e000      	b.n	8011414 <tcp_receive+0x968>
 8011412:	2300      	movs	r3, #0
 8011414:	4423      	add	r3, r4
 8011416:	b29a      	uxth	r2, r3
 8011418:	4b65      	ldr	r3, [pc, #404]	; (80115b0 <tcp_receive+0xb04>)
 801141a:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 801141c:	4b64      	ldr	r3, [pc, #400]	; (80115b0 <tcp_receive+0xb04>)
 801141e:	881b      	ldrh	r3, [r3, #0]
 8011420:	461a      	mov	r2, r3
 8011422:	4b64      	ldr	r3, [pc, #400]	; (80115b4 <tcp_receive+0xb08>)
 8011424:	681b      	ldr	r3, [r3, #0]
 8011426:	441a      	add	r2, r3
 8011428:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801142a:	68db      	ldr	r3, [r3, #12]
 801142c:	685b      	ldr	r3, [r3, #4]
 801142e:	429a      	cmp	r2, r3
 8011430:	d006      	beq.n	8011440 <tcp_receive+0x994>
 8011432:	4b62      	ldr	r3, [pc, #392]	; (80115bc <tcp_receive+0xb10>)
 8011434:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8011438:	4961      	ldr	r1, [pc, #388]	; (80115c0 <tcp_receive+0xb14>)
 801143a:	4862      	ldr	r0, [pc, #392]	; (80115c4 <tcp_receive+0xb18>)
 801143c:	f007 fac6 	bl	80189cc <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8011440:	687b      	ldr	r3, [r7, #4]
 8011442:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011444:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8011446:	4b5a      	ldr	r3, [pc, #360]	; (80115b0 <tcp_receive+0xb04>)
 8011448:	881b      	ldrh	r3, [r3, #0]
 801144a:	461a      	mov	r2, r3
 801144c:	4b59      	ldr	r3, [pc, #356]	; (80115b4 <tcp_receive+0xb08>)
 801144e:	681b      	ldr	r3, [r3, #0]
 8011450:	441a      	add	r2, r3
 8011452:	687b      	ldr	r3, [r7, #4]
 8011454:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8011456:	687b      	ldr	r3, [r7, #4]
 8011458:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801145a:	4b55      	ldr	r3, [pc, #340]	; (80115b0 <tcp_receive+0xb04>)
 801145c:	881b      	ldrh	r3, [r3, #0]
 801145e:	429a      	cmp	r2, r3
 8011460:	d206      	bcs.n	8011470 <tcp_receive+0x9c4>
 8011462:	4b56      	ldr	r3, [pc, #344]	; (80115bc <tcp_receive+0xb10>)
 8011464:	f240 6207 	movw	r2, #1543	; 0x607
 8011468:	4957      	ldr	r1, [pc, #348]	; (80115c8 <tcp_receive+0xb1c>)
 801146a:	4856      	ldr	r0, [pc, #344]	; (80115c4 <tcp_receive+0xb18>)
 801146c:	f007 faae 	bl	80189cc <iprintf>
        pcb->rcv_wnd -= tcplen;
 8011470:	687b      	ldr	r3, [r7, #4]
 8011472:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011474:	4b4e      	ldr	r3, [pc, #312]	; (80115b0 <tcp_receive+0xb04>)
 8011476:	881b      	ldrh	r3, [r3, #0]
 8011478:	1ad3      	subs	r3, r2, r3
 801147a:	b29a      	uxth	r2, r3
 801147c:	687b      	ldr	r3, [r7, #4]
 801147e:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8011480:	6878      	ldr	r0, [r7, #4]
 8011482:	f7fc ffc9 	bl	800e418 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8011486:	4b4c      	ldr	r3, [pc, #304]	; (80115b8 <tcp_receive+0xb0c>)
 8011488:	685b      	ldr	r3, [r3, #4]
 801148a:	891b      	ldrh	r3, [r3, #8]
 801148c:	2b00      	cmp	r3, #0
 801148e:	d006      	beq.n	801149e <tcp_receive+0x9f2>
          recv_data = inseg.p;
 8011490:	4b49      	ldr	r3, [pc, #292]	; (80115b8 <tcp_receive+0xb0c>)
 8011492:	685b      	ldr	r3, [r3, #4]
 8011494:	4a4d      	ldr	r2, [pc, #308]	; (80115cc <tcp_receive+0xb20>)
 8011496:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8011498:	4b47      	ldr	r3, [pc, #284]	; (80115b8 <tcp_receive+0xb0c>)
 801149a:	2200      	movs	r2, #0
 801149c:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801149e:	4b46      	ldr	r3, [pc, #280]	; (80115b8 <tcp_receive+0xb0c>)
 80114a0:	68db      	ldr	r3, [r3, #12]
 80114a2:	899b      	ldrh	r3, [r3, #12]
 80114a4:	b29b      	uxth	r3, r3
 80114a6:	4618      	mov	r0, r3
 80114a8:	f7fa ff76 	bl	800c398 <lwip_htons>
 80114ac:	4603      	mov	r3, r0
 80114ae:	b2db      	uxtb	r3, r3
 80114b0:	f003 0301 	and.w	r3, r3, #1
 80114b4:	2b00      	cmp	r3, #0
 80114b6:	f000 80b8 	beq.w	801162a <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 80114ba:	4b45      	ldr	r3, [pc, #276]	; (80115d0 <tcp_receive+0xb24>)
 80114bc:	781b      	ldrb	r3, [r3, #0]
 80114be:	f043 0320 	orr.w	r3, r3, #32
 80114c2:	b2da      	uxtb	r2, r3
 80114c4:	4b42      	ldr	r3, [pc, #264]	; (80115d0 <tcp_receive+0xb24>)
 80114c6:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 80114c8:	e0af      	b.n	801162a <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 80114ca:	687b      	ldr	r3, [r7, #4]
 80114cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80114ce:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 80114d0:	687b      	ldr	r3, [r7, #4]
 80114d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80114d4:	68db      	ldr	r3, [r3, #12]
 80114d6:	685b      	ldr	r3, [r3, #4]
 80114d8:	4a36      	ldr	r2, [pc, #216]	; (80115b4 <tcp_receive+0xb08>)
 80114da:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 80114dc:	68bb      	ldr	r3, [r7, #8]
 80114de:	891b      	ldrh	r3, [r3, #8]
 80114e0:	461c      	mov	r4, r3
 80114e2:	68bb      	ldr	r3, [r7, #8]
 80114e4:	68db      	ldr	r3, [r3, #12]
 80114e6:	899b      	ldrh	r3, [r3, #12]
 80114e8:	b29b      	uxth	r3, r3
 80114ea:	4618      	mov	r0, r3
 80114ec:	f7fa ff54 	bl	800c398 <lwip_htons>
 80114f0:	4603      	mov	r3, r0
 80114f2:	b2db      	uxtb	r3, r3
 80114f4:	f003 0303 	and.w	r3, r3, #3
 80114f8:	2b00      	cmp	r3, #0
 80114fa:	d001      	beq.n	8011500 <tcp_receive+0xa54>
 80114fc:	2301      	movs	r3, #1
 80114fe:	e000      	b.n	8011502 <tcp_receive+0xa56>
 8011500:	2300      	movs	r3, #0
 8011502:	191a      	adds	r2, r3, r4
 8011504:	687b      	ldr	r3, [r7, #4]
 8011506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011508:	441a      	add	r2, r3
 801150a:	687b      	ldr	r3, [r7, #4]
 801150c:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801150e:	687b      	ldr	r3, [r7, #4]
 8011510:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011512:	461c      	mov	r4, r3
 8011514:	68bb      	ldr	r3, [r7, #8]
 8011516:	891b      	ldrh	r3, [r3, #8]
 8011518:	461d      	mov	r5, r3
 801151a:	68bb      	ldr	r3, [r7, #8]
 801151c:	68db      	ldr	r3, [r3, #12]
 801151e:	899b      	ldrh	r3, [r3, #12]
 8011520:	b29b      	uxth	r3, r3
 8011522:	4618      	mov	r0, r3
 8011524:	f7fa ff38 	bl	800c398 <lwip_htons>
 8011528:	4603      	mov	r3, r0
 801152a:	b2db      	uxtb	r3, r3
 801152c:	f003 0303 	and.w	r3, r3, #3
 8011530:	2b00      	cmp	r3, #0
 8011532:	d001      	beq.n	8011538 <tcp_receive+0xa8c>
 8011534:	2301      	movs	r3, #1
 8011536:	e000      	b.n	801153a <tcp_receive+0xa8e>
 8011538:	2300      	movs	r3, #0
 801153a:	442b      	add	r3, r5
 801153c:	429c      	cmp	r4, r3
 801153e:	d206      	bcs.n	801154e <tcp_receive+0xaa2>
 8011540:	4b1e      	ldr	r3, [pc, #120]	; (80115bc <tcp_receive+0xb10>)
 8011542:	f240 622b 	movw	r2, #1579	; 0x62b
 8011546:	4923      	ldr	r1, [pc, #140]	; (80115d4 <tcp_receive+0xb28>)
 8011548:	481e      	ldr	r0, [pc, #120]	; (80115c4 <tcp_receive+0xb18>)
 801154a:	f007 fa3f 	bl	80189cc <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 801154e:	68bb      	ldr	r3, [r7, #8]
 8011550:	891b      	ldrh	r3, [r3, #8]
 8011552:	461c      	mov	r4, r3
 8011554:	68bb      	ldr	r3, [r7, #8]
 8011556:	68db      	ldr	r3, [r3, #12]
 8011558:	899b      	ldrh	r3, [r3, #12]
 801155a:	b29b      	uxth	r3, r3
 801155c:	4618      	mov	r0, r3
 801155e:	f7fa ff1b 	bl	800c398 <lwip_htons>
 8011562:	4603      	mov	r3, r0
 8011564:	b2db      	uxtb	r3, r3
 8011566:	f003 0303 	and.w	r3, r3, #3
 801156a:	2b00      	cmp	r3, #0
 801156c:	d001      	beq.n	8011572 <tcp_receive+0xac6>
 801156e:	2301      	movs	r3, #1
 8011570:	e000      	b.n	8011574 <tcp_receive+0xac8>
 8011572:	2300      	movs	r3, #0
 8011574:	1919      	adds	r1, r3, r4
 8011576:	687b      	ldr	r3, [r7, #4]
 8011578:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801157a:	b28b      	uxth	r3, r1
 801157c:	1ad3      	subs	r3, r2, r3
 801157e:	b29a      	uxth	r2, r3
 8011580:	687b      	ldr	r3, [r7, #4]
 8011582:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8011584:	6878      	ldr	r0, [r7, #4]
 8011586:	f7fc ff47 	bl	800e418 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 801158a:	68bb      	ldr	r3, [r7, #8]
 801158c:	685b      	ldr	r3, [r3, #4]
 801158e:	891b      	ldrh	r3, [r3, #8]
 8011590:	2b00      	cmp	r3, #0
 8011592:	d028      	beq.n	80115e6 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8011594:	4b0d      	ldr	r3, [pc, #52]	; (80115cc <tcp_receive+0xb20>)
 8011596:	681b      	ldr	r3, [r3, #0]
 8011598:	2b00      	cmp	r3, #0
 801159a:	d01d      	beq.n	80115d8 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 801159c:	4b0b      	ldr	r3, [pc, #44]	; (80115cc <tcp_receive+0xb20>)
 801159e:	681a      	ldr	r2, [r3, #0]
 80115a0:	68bb      	ldr	r3, [r7, #8]
 80115a2:	685b      	ldr	r3, [r3, #4]
 80115a4:	4619      	mov	r1, r3
 80115a6:	4610      	mov	r0, r2
 80115a8:	f7fc fa54 	bl	800da54 <pbuf_cat>
 80115ac:	e018      	b.n	80115e0 <tcp_receive+0xb34>
 80115ae:	bf00      	nop
 80115b0:	200004c6 	.word	0x200004c6
 80115b4:	200004bc 	.word	0x200004bc
 80115b8:	2000049c 	.word	0x2000049c
 80115bc:	0801f238 	.word	0x0801f238
 80115c0:	0801f618 	.word	0x0801f618
 80115c4:	0801f284 	.word	0x0801f284
 80115c8:	0801f654 	.word	0x0801f654
 80115cc:	200004cc 	.word	0x200004cc
 80115d0:	200004c9 	.word	0x200004c9
 80115d4:	0801f674 	.word	0x0801f674
            } else {
              recv_data = cseg->p;
 80115d8:	68bb      	ldr	r3, [r7, #8]
 80115da:	685b      	ldr	r3, [r3, #4]
 80115dc:	4a70      	ldr	r2, [pc, #448]	; (80117a0 <tcp_receive+0xcf4>)
 80115de:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 80115e0:	68bb      	ldr	r3, [r7, #8]
 80115e2:	2200      	movs	r2, #0
 80115e4:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80115e6:	68bb      	ldr	r3, [r7, #8]
 80115e8:	68db      	ldr	r3, [r3, #12]
 80115ea:	899b      	ldrh	r3, [r3, #12]
 80115ec:	b29b      	uxth	r3, r3
 80115ee:	4618      	mov	r0, r3
 80115f0:	f7fa fed2 	bl	800c398 <lwip_htons>
 80115f4:	4603      	mov	r3, r0
 80115f6:	b2db      	uxtb	r3, r3
 80115f8:	f003 0301 	and.w	r3, r3, #1
 80115fc:	2b00      	cmp	r3, #0
 80115fe:	d00d      	beq.n	801161c <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8011600:	4b68      	ldr	r3, [pc, #416]	; (80117a4 <tcp_receive+0xcf8>)
 8011602:	781b      	ldrb	r3, [r3, #0]
 8011604:	f043 0320 	orr.w	r3, r3, #32
 8011608:	b2da      	uxtb	r2, r3
 801160a:	4b66      	ldr	r3, [pc, #408]	; (80117a4 <tcp_receive+0xcf8>)
 801160c:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 801160e:	687b      	ldr	r3, [r7, #4]
 8011610:	7d1b      	ldrb	r3, [r3, #20]
 8011612:	2b04      	cmp	r3, #4
 8011614:	d102      	bne.n	801161c <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 8011616:	687b      	ldr	r3, [r7, #4]
 8011618:	2207      	movs	r2, #7
 801161a:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 801161c:	68bb      	ldr	r3, [r7, #8]
 801161e:	681a      	ldr	r2, [r3, #0]
 8011620:	687b      	ldr	r3, [r7, #4]
 8011622:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8011624:	68b8      	ldr	r0, [r7, #8]
 8011626:	f7fd fbd6 	bl	800edd6 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 801162a:	687b      	ldr	r3, [r7, #4]
 801162c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801162e:	2b00      	cmp	r3, #0
 8011630:	d008      	beq.n	8011644 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8011632:	687b      	ldr	r3, [r7, #4]
 8011634:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011636:	68db      	ldr	r3, [r3, #12]
 8011638:	685a      	ldr	r2, [r3, #4]
 801163a:	687b      	ldr	r3, [r7, #4]
 801163c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 801163e:	429a      	cmp	r2, r3
 8011640:	f43f af43 	beq.w	80114ca <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8011644:	687b      	ldr	r3, [r7, #4]
 8011646:	8b5b      	ldrh	r3, [r3, #26]
 8011648:	f003 0301 	and.w	r3, r3, #1
 801164c:	2b00      	cmp	r3, #0
 801164e:	d00e      	beq.n	801166e <tcp_receive+0xbc2>
 8011650:	687b      	ldr	r3, [r7, #4]
 8011652:	8b5b      	ldrh	r3, [r3, #26]
 8011654:	f023 0301 	bic.w	r3, r3, #1
 8011658:	b29a      	uxth	r2, r3
 801165a:	687b      	ldr	r3, [r7, #4]
 801165c:	835a      	strh	r2, [r3, #26]
 801165e:	687b      	ldr	r3, [r7, #4]
 8011660:	8b5b      	ldrh	r3, [r3, #26]
 8011662:	f043 0302 	orr.w	r3, r3, #2
 8011666:	b29a      	uxth	r2, r3
 8011668:	687b      	ldr	r3, [r7, #4]
 801166a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 801166c:	e188      	b.n	8011980 <tcp_receive+0xed4>
        tcp_ack(pcb);
 801166e:	687b      	ldr	r3, [r7, #4]
 8011670:	8b5b      	ldrh	r3, [r3, #26]
 8011672:	f043 0301 	orr.w	r3, r3, #1
 8011676:	b29a      	uxth	r2, r3
 8011678:	687b      	ldr	r3, [r7, #4]
 801167a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 801167c:	e180      	b.n	8011980 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 801167e:	687b      	ldr	r3, [r7, #4]
 8011680:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011682:	2b00      	cmp	r3, #0
 8011684:	d106      	bne.n	8011694 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8011686:	4848      	ldr	r0, [pc, #288]	; (80117a8 <tcp_receive+0xcfc>)
 8011688:	f7fd fbbe 	bl	800ee08 <tcp_seg_copy>
 801168c:	4602      	mov	r2, r0
 801168e:	687b      	ldr	r3, [r7, #4]
 8011690:	675a      	str	r2, [r3, #116]	; 0x74
 8011692:	e16d      	b.n	8011970 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8011694:	2300      	movs	r3, #0
 8011696:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8011698:	687b      	ldr	r3, [r7, #4]
 801169a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801169c:	63bb      	str	r3, [r7, #56]	; 0x38
 801169e:	e157      	b.n	8011950 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 80116a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116a2:	68db      	ldr	r3, [r3, #12]
 80116a4:	685a      	ldr	r2, [r3, #4]
 80116a6:	4b41      	ldr	r3, [pc, #260]	; (80117ac <tcp_receive+0xd00>)
 80116a8:	681b      	ldr	r3, [r3, #0]
 80116aa:	429a      	cmp	r2, r3
 80116ac:	d11d      	bne.n	80116ea <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 80116ae:	4b3e      	ldr	r3, [pc, #248]	; (80117a8 <tcp_receive+0xcfc>)
 80116b0:	891a      	ldrh	r2, [r3, #8]
 80116b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116b4:	891b      	ldrh	r3, [r3, #8]
 80116b6:	429a      	cmp	r2, r3
 80116b8:	f240 814f 	bls.w	801195a <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80116bc:	483a      	ldr	r0, [pc, #232]	; (80117a8 <tcp_receive+0xcfc>)
 80116be:	f7fd fba3 	bl	800ee08 <tcp_seg_copy>
 80116c2:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 80116c4:	697b      	ldr	r3, [r7, #20]
 80116c6:	2b00      	cmp	r3, #0
 80116c8:	f000 8149 	beq.w	801195e <tcp_receive+0xeb2>
                  if (prev != NULL) {
 80116cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80116ce:	2b00      	cmp	r3, #0
 80116d0:	d003      	beq.n	80116da <tcp_receive+0xc2e>
                    prev->next = cseg;
 80116d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80116d4:	697a      	ldr	r2, [r7, #20]
 80116d6:	601a      	str	r2, [r3, #0]
 80116d8:	e002      	b.n	80116e0 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 80116da:	687b      	ldr	r3, [r7, #4]
 80116dc:	697a      	ldr	r2, [r7, #20]
 80116de:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 80116e0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80116e2:	6978      	ldr	r0, [r7, #20]
 80116e4:	f7ff f8de 	bl	80108a4 <tcp_oos_insert_segment>
                }
                break;
 80116e8:	e139      	b.n	801195e <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 80116ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80116ec:	2b00      	cmp	r3, #0
 80116ee:	d117      	bne.n	8011720 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 80116f0:	4b2e      	ldr	r3, [pc, #184]	; (80117ac <tcp_receive+0xd00>)
 80116f2:	681a      	ldr	r2, [r3, #0]
 80116f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116f6:	68db      	ldr	r3, [r3, #12]
 80116f8:	685b      	ldr	r3, [r3, #4]
 80116fa:	1ad3      	subs	r3, r2, r3
 80116fc:	2b00      	cmp	r3, #0
 80116fe:	da57      	bge.n	80117b0 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8011700:	4829      	ldr	r0, [pc, #164]	; (80117a8 <tcp_receive+0xcfc>)
 8011702:	f7fd fb81 	bl	800ee08 <tcp_seg_copy>
 8011706:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8011708:	69bb      	ldr	r3, [r7, #24]
 801170a:	2b00      	cmp	r3, #0
 801170c:	f000 8129 	beq.w	8011962 <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 8011710:	687b      	ldr	r3, [r7, #4]
 8011712:	69ba      	ldr	r2, [r7, #24]
 8011714:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 8011716:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011718:	69b8      	ldr	r0, [r7, #24]
 801171a:	f7ff f8c3 	bl	80108a4 <tcp_oos_insert_segment>
                  }
                  break;
 801171e:	e120      	b.n	8011962 <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8011720:	4b22      	ldr	r3, [pc, #136]	; (80117ac <tcp_receive+0xd00>)
 8011722:	681a      	ldr	r2, [r3, #0]
 8011724:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011726:	68db      	ldr	r3, [r3, #12]
 8011728:	685b      	ldr	r3, [r3, #4]
 801172a:	1ad3      	subs	r3, r2, r3
 801172c:	3b01      	subs	r3, #1
 801172e:	2b00      	cmp	r3, #0
 8011730:	db3e      	blt.n	80117b0 <tcp_receive+0xd04>
 8011732:	4b1e      	ldr	r3, [pc, #120]	; (80117ac <tcp_receive+0xd00>)
 8011734:	681a      	ldr	r2, [r3, #0]
 8011736:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011738:	68db      	ldr	r3, [r3, #12]
 801173a:	685b      	ldr	r3, [r3, #4]
 801173c:	1ad3      	subs	r3, r2, r3
 801173e:	3301      	adds	r3, #1
 8011740:	2b00      	cmp	r3, #0
 8011742:	dc35      	bgt.n	80117b0 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8011744:	4818      	ldr	r0, [pc, #96]	; (80117a8 <tcp_receive+0xcfc>)
 8011746:	f7fd fb5f 	bl	800ee08 <tcp_seg_copy>
 801174a:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 801174c:	69fb      	ldr	r3, [r7, #28]
 801174e:	2b00      	cmp	r3, #0
 8011750:	f000 8109 	beq.w	8011966 <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8011754:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011756:	68db      	ldr	r3, [r3, #12]
 8011758:	685b      	ldr	r3, [r3, #4]
 801175a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801175c:	8912      	ldrh	r2, [r2, #8]
 801175e:	441a      	add	r2, r3
 8011760:	4b12      	ldr	r3, [pc, #72]	; (80117ac <tcp_receive+0xd00>)
 8011762:	681b      	ldr	r3, [r3, #0]
 8011764:	1ad3      	subs	r3, r2, r3
 8011766:	2b00      	cmp	r3, #0
 8011768:	dd12      	ble.n	8011790 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 801176a:	4b10      	ldr	r3, [pc, #64]	; (80117ac <tcp_receive+0xd00>)
 801176c:	681b      	ldr	r3, [r3, #0]
 801176e:	b29a      	uxth	r2, r3
 8011770:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011772:	68db      	ldr	r3, [r3, #12]
 8011774:	685b      	ldr	r3, [r3, #4]
 8011776:	b29b      	uxth	r3, r3
 8011778:	1ad3      	subs	r3, r2, r3
 801177a:	b29a      	uxth	r2, r3
 801177c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801177e:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8011780:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011782:	685a      	ldr	r2, [r3, #4]
 8011784:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011786:	891b      	ldrh	r3, [r3, #8]
 8011788:	4619      	mov	r1, r3
 801178a:	4610      	mov	r0, r2
 801178c:	f7fb ff1a 	bl	800d5c4 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8011790:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011792:	69fa      	ldr	r2, [r7, #28]
 8011794:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8011796:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011798:	69f8      	ldr	r0, [r7, #28]
 801179a:	f7ff f883 	bl	80108a4 <tcp_oos_insert_segment>
                  }
                  break;
 801179e:	e0e2      	b.n	8011966 <tcp_receive+0xeba>
 80117a0:	200004cc 	.word	0x200004cc
 80117a4:	200004c9 	.word	0x200004c9
 80117a8:	2000049c 	.word	0x2000049c
 80117ac:	200004bc 	.word	0x200004bc
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 80117b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80117b2:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 80117b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80117b6:	681b      	ldr	r3, [r3, #0]
 80117b8:	2b00      	cmp	r3, #0
 80117ba:	f040 80c6 	bne.w	801194a <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 80117be:	4b80      	ldr	r3, [pc, #512]	; (80119c0 <tcp_receive+0xf14>)
 80117c0:	681a      	ldr	r2, [r3, #0]
 80117c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80117c4:	68db      	ldr	r3, [r3, #12]
 80117c6:	685b      	ldr	r3, [r3, #4]
 80117c8:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 80117ca:	2b00      	cmp	r3, #0
 80117cc:	f340 80bd 	ble.w	801194a <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80117d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80117d2:	68db      	ldr	r3, [r3, #12]
 80117d4:	899b      	ldrh	r3, [r3, #12]
 80117d6:	b29b      	uxth	r3, r3
 80117d8:	4618      	mov	r0, r3
 80117da:	f7fa fddd 	bl	800c398 <lwip_htons>
 80117de:	4603      	mov	r3, r0
 80117e0:	b2db      	uxtb	r3, r3
 80117e2:	f003 0301 	and.w	r3, r3, #1
 80117e6:	2b00      	cmp	r3, #0
 80117e8:	f040 80bf 	bne.w	801196a <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 80117ec:	4875      	ldr	r0, [pc, #468]	; (80119c4 <tcp_receive+0xf18>)
 80117ee:	f7fd fb0b 	bl	800ee08 <tcp_seg_copy>
 80117f2:	4602      	mov	r2, r0
 80117f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80117f6:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 80117f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80117fa:	681b      	ldr	r3, [r3, #0]
 80117fc:	2b00      	cmp	r3, #0
 80117fe:	f000 80b6 	beq.w	801196e <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8011802:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011804:	68db      	ldr	r3, [r3, #12]
 8011806:	685b      	ldr	r3, [r3, #4]
 8011808:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801180a:	8912      	ldrh	r2, [r2, #8]
 801180c:	441a      	add	r2, r3
 801180e:	4b6c      	ldr	r3, [pc, #432]	; (80119c0 <tcp_receive+0xf14>)
 8011810:	681b      	ldr	r3, [r3, #0]
 8011812:	1ad3      	subs	r3, r2, r3
 8011814:	2b00      	cmp	r3, #0
 8011816:	dd12      	ble.n	801183e <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8011818:	4b69      	ldr	r3, [pc, #420]	; (80119c0 <tcp_receive+0xf14>)
 801181a:	681b      	ldr	r3, [r3, #0]
 801181c:	b29a      	uxth	r2, r3
 801181e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011820:	68db      	ldr	r3, [r3, #12]
 8011822:	685b      	ldr	r3, [r3, #4]
 8011824:	b29b      	uxth	r3, r3
 8011826:	1ad3      	subs	r3, r2, r3
 8011828:	b29a      	uxth	r2, r3
 801182a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801182c:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 801182e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011830:	685a      	ldr	r2, [r3, #4]
 8011832:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011834:	891b      	ldrh	r3, [r3, #8]
 8011836:	4619      	mov	r1, r3
 8011838:	4610      	mov	r0, r2
 801183a:	f7fb fec3 	bl	800d5c4 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 801183e:	4b62      	ldr	r3, [pc, #392]	; (80119c8 <tcp_receive+0xf1c>)
 8011840:	881b      	ldrh	r3, [r3, #0]
 8011842:	461a      	mov	r2, r3
 8011844:	4b5e      	ldr	r3, [pc, #376]	; (80119c0 <tcp_receive+0xf14>)
 8011846:	681b      	ldr	r3, [r3, #0]
 8011848:	441a      	add	r2, r3
 801184a:	687b      	ldr	r3, [r7, #4]
 801184c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801184e:	6879      	ldr	r1, [r7, #4]
 8011850:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011852:	440b      	add	r3, r1
 8011854:	1ad3      	subs	r3, r2, r3
 8011856:	2b00      	cmp	r3, #0
 8011858:	f340 8089 	ble.w	801196e <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 801185c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801185e:	681b      	ldr	r3, [r3, #0]
 8011860:	68db      	ldr	r3, [r3, #12]
 8011862:	899b      	ldrh	r3, [r3, #12]
 8011864:	b29b      	uxth	r3, r3
 8011866:	4618      	mov	r0, r3
 8011868:	f7fa fd96 	bl	800c398 <lwip_htons>
 801186c:	4603      	mov	r3, r0
 801186e:	b2db      	uxtb	r3, r3
 8011870:	f003 0301 	and.w	r3, r3, #1
 8011874:	2b00      	cmp	r3, #0
 8011876:	d022      	beq.n	80118be <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8011878:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801187a:	681b      	ldr	r3, [r3, #0]
 801187c:	68db      	ldr	r3, [r3, #12]
 801187e:	899b      	ldrh	r3, [r3, #12]
 8011880:	b29b      	uxth	r3, r3
 8011882:	b21b      	sxth	r3, r3
 8011884:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8011888:	b21c      	sxth	r4, r3
 801188a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801188c:	681b      	ldr	r3, [r3, #0]
 801188e:	68db      	ldr	r3, [r3, #12]
 8011890:	899b      	ldrh	r3, [r3, #12]
 8011892:	b29b      	uxth	r3, r3
 8011894:	4618      	mov	r0, r3
 8011896:	f7fa fd7f 	bl	800c398 <lwip_htons>
 801189a:	4603      	mov	r3, r0
 801189c:	b2db      	uxtb	r3, r3
 801189e:	b29b      	uxth	r3, r3
 80118a0:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80118a4:	b29b      	uxth	r3, r3
 80118a6:	4618      	mov	r0, r3
 80118a8:	f7fa fd76 	bl	800c398 <lwip_htons>
 80118ac:	4603      	mov	r3, r0
 80118ae:	b21b      	sxth	r3, r3
 80118b0:	4323      	orrs	r3, r4
 80118b2:	b21a      	sxth	r2, r3
 80118b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80118b6:	681b      	ldr	r3, [r3, #0]
 80118b8:	68db      	ldr	r3, [r3, #12]
 80118ba:	b292      	uxth	r2, r2
 80118bc:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 80118be:	687b      	ldr	r3, [r7, #4]
 80118c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80118c2:	b29a      	uxth	r2, r3
 80118c4:	687b      	ldr	r3, [r7, #4]
 80118c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80118c8:	4413      	add	r3, r2
 80118ca:	b299      	uxth	r1, r3
 80118cc:	4b3c      	ldr	r3, [pc, #240]	; (80119c0 <tcp_receive+0xf14>)
 80118ce:	681b      	ldr	r3, [r3, #0]
 80118d0:	b29a      	uxth	r2, r3
 80118d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80118d4:	681b      	ldr	r3, [r3, #0]
 80118d6:	1a8a      	subs	r2, r1, r2
 80118d8:	b292      	uxth	r2, r2
 80118da:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 80118dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80118de:	681b      	ldr	r3, [r3, #0]
 80118e0:	685a      	ldr	r2, [r3, #4]
 80118e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80118e4:	681b      	ldr	r3, [r3, #0]
 80118e6:	891b      	ldrh	r3, [r3, #8]
 80118e8:	4619      	mov	r1, r3
 80118ea:	4610      	mov	r0, r2
 80118ec:	f7fb fe6a 	bl	800d5c4 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 80118f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80118f2:	681b      	ldr	r3, [r3, #0]
 80118f4:	891c      	ldrh	r4, [r3, #8]
 80118f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80118f8:	681b      	ldr	r3, [r3, #0]
 80118fa:	68db      	ldr	r3, [r3, #12]
 80118fc:	899b      	ldrh	r3, [r3, #12]
 80118fe:	b29b      	uxth	r3, r3
 8011900:	4618      	mov	r0, r3
 8011902:	f7fa fd49 	bl	800c398 <lwip_htons>
 8011906:	4603      	mov	r3, r0
 8011908:	b2db      	uxtb	r3, r3
 801190a:	f003 0303 	and.w	r3, r3, #3
 801190e:	2b00      	cmp	r3, #0
 8011910:	d001      	beq.n	8011916 <tcp_receive+0xe6a>
 8011912:	2301      	movs	r3, #1
 8011914:	e000      	b.n	8011918 <tcp_receive+0xe6c>
 8011916:	2300      	movs	r3, #0
 8011918:	4423      	add	r3, r4
 801191a:	b29a      	uxth	r2, r3
 801191c:	4b2a      	ldr	r3, [pc, #168]	; (80119c8 <tcp_receive+0xf1c>)
 801191e:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8011920:	4b29      	ldr	r3, [pc, #164]	; (80119c8 <tcp_receive+0xf1c>)
 8011922:	881b      	ldrh	r3, [r3, #0]
 8011924:	461a      	mov	r2, r3
 8011926:	4b26      	ldr	r3, [pc, #152]	; (80119c0 <tcp_receive+0xf14>)
 8011928:	681b      	ldr	r3, [r3, #0]
 801192a:	441a      	add	r2, r3
 801192c:	687b      	ldr	r3, [r7, #4]
 801192e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011930:	6879      	ldr	r1, [r7, #4]
 8011932:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011934:	440b      	add	r3, r1
 8011936:	429a      	cmp	r2, r3
 8011938:	d019      	beq.n	801196e <tcp_receive+0xec2>
 801193a:	4b24      	ldr	r3, [pc, #144]	; (80119cc <tcp_receive+0xf20>)
 801193c:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 8011940:	4923      	ldr	r1, [pc, #140]	; (80119d0 <tcp_receive+0xf24>)
 8011942:	4824      	ldr	r0, [pc, #144]	; (80119d4 <tcp_receive+0xf28>)
 8011944:	f007 f842 	bl	80189cc <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8011948:	e011      	b.n	801196e <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801194a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801194c:	681b      	ldr	r3, [r3, #0]
 801194e:	63bb      	str	r3, [r7, #56]	; 0x38
 8011950:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011952:	2b00      	cmp	r3, #0
 8011954:	f47f aea4 	bne.w	80116a0 <tcp_receive+0xbf4>
 8011958:	e00a      	b.n	8011970 <tcp_receive+0xec4>
                break;
 801195a:	bf00      	nop
 801195c:	e008      	b.n	8011970 <tcp_receive+0xec4>
                break;
 801195e:	bf00      	nop
 8011960:	e006      	b.n	8011970 <tcp_receive+0xec4>
                  break;
 8011962:	bf00      	nop
 8011964:	e004      	b.n	8011970 <tcp_receive+0xec4>
                  break;
 8011966:	bf00      	nop
 8011968:	e002      	b.n	8011970 <tcp_receive+0xec4>
                  break;
 801196a:	bf00      	nop
 801196c:	e000      	b.n	8011970 <tcp_receive+0xec4>
                break;
 801196e:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8011970:	6878      	ldr	r0, [r7, #4]
 8011972:	f001 fa31 	bl	8012dd8 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8011976:	e003      	b.n	8011980 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8011978:	6878      	ldr	r0, [r7, #4]
 801197a:	f001 fa2d 	bl	8012dd8 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801197e:	e01a      	b.n	80119b6 <tcp_receive+0xf0a>
 8011980:	e019      	b.n	80119b6 <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8011982:	4b0f      	ldr	r3, [pc, #60]	; (80119c0 <tcp_receive+0xf14>)
 8011984:	681a      	ldr	r2, [r3, #0]
 8011986:	687b      	ldr	r3, [r7, #4]
 8011988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801198a:	1ad3      	subs	r3, r2, r3
 801198c:	2b00      	cmp	r3, #0
 801198e:	db0a      	blt.n	80119a6 <tcp_receive+0xefa>
 8011990:	4b0b      	ldr	r3, [pc, #44]	; (80119c0 <tcp_receive+0xf14>)
 8011992:	681a      	ldr	r2, [r3, #0]
 8011994:	687b      	ldr	r3, [r7, #4]
 8011996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011998:	6879      	ldr	r1, [r7, #4]
 801199a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801199c:	440b      	add	r3, r1
 801199e:	1ad3      	subs	r3, r2, r3
 80119a0:	3301      	adds	r3, #1
 80119a2:	2b00      	cmp	r3, #0
 80119a4:	dd07      	ble.n	80119b6 <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 80119a6:	687b      	ldr	r3, [r7, #4]
 80119a8:	8b5b      	ldrh	r3, [r3, #26]
 80119aa:	f043 0302 	orr.w	r3, r3, #2
 80119ae:	b29a      	uxth	r2, r3
 80119b0:	687b      	ldr	r3, [r7, #4]
 80119b2:	835a      	strh	r2, [r3, #26]
    }
  }
}
 80119b4:	e7ff      	b.n	80119b6 <tcp_receive+0xf0a>
 80119b6:	bf00      	nop
 80119b8:	3750      	adds	r7, #80	; 0x50
 80119ba:	46bd      	mov	sp, r7
 80119bc:	bdb0      	pop	{r4, r5, r7, pc}
 80119be:	bf00      	nop
 80119c0:	200004bc 	.word	0x200004bc
 80119c4:	2000049c 	.word	0x2000049c
 80119c8:	200004c6 	.word	0x200004c6
 80119cc:	0801f238 	.word	0x0801f238
 80119d0:	0801f5e0 	.word	0x0801f5e0
 80119d4:	0801f284 	.word	0x0801f284

080119d8 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 80119d8:	b480      	push	{r7}
 80119da:	b083      	sub	sp, #12
 80119dc:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 80119de:	4b15      	ldr	r3, [pc, #84]	; (8011a34 <tcp_get_next_optbyte+0x5c>)
 80119e0:	881b      	ldrh	r3, [r3, #0]
 80119e2:	1c5a      	adds	r2, r3, #1
 80119e4:	b291      	uxth	r1, r2
 80119e6:	4a13      	ldr	r2, [pc, #76]	; (8011a34 <tcp_get_next_optbyte+0x5c>)
 80119e8:	8011      	strh	r1, [r2, #0]
 80119ea:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 80119ec:	4b12      	ldr	r3, [pc, #72]	; (8011a38 <tcp_get_next_optbyte+0x60>)
 80119ee:	681b      	ldr	r3, [r3, #0]
 80119f0:	2b00      	cmp	r3, #0
 80119f2:	d004      	beq.n	80119fe <tcp_get_next_optbyte+0x26>
 80119f4:	4b11      	ldr	r3, [pc, #68]	; (8011a3c <tcp_get_next_optbyte+0x64>)
 80119f6:	881b      	ldrh	r3, [r3, #0]
 80119f8:	88fa      	ldrh	r2, [r7, #6]
 80119fa:	429a      	cmp	r2, r3
 80119fc:	d208      	bcs.n	8011a10 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 80119fe:	4b10      	ldr	r3, [pc, #64]	; (8011a40 <tcp_get_next_optbyte+0x68>)
 8011a00:	681b      	ldr	r3, [r3, #0]
 8011a02:	3314      	adds	r3, #20
 8011a04:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8011a06:	88fb      	ldrh	r3, [r7, #6]
 8011a08:	683a      	ldr	r2, [r7, #0]
 8011a0a:	4413      	add	r3, r2
 8011a0c:	781b      	ldrb	r3, [r3, #0]
 8011a0e:	e00b      	b.n	8011a28 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8011a10:	88fb      	ldrh	r3, [r7, #6]
 8011a12:	b2da      	uxtb	r2, r3
 8011a14:	4b09      	ldr	r3, [pc, #36]	; (8011a3c <tcp_get_next_optbyte+0x64>)
 8011a16:	881b      	ldrh	r3, [r3, #0]
 8011a18:	b2db      	uxtb	r3, r3
 8011a1a:	1ad3      	subs	r3, r2, r3
 8011a1c:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8011a1e:	4b06      	ldr	r3, [pc, #24]	; (8011a38 <tcp_get_next_optbyte+0x60>)
 8011a20:	681a      	ldr	r2, [r3, #0]
 8011a22:	797b      	ldrb	r3, [r7, #5]
 8011a24:	4413      	add	r3, r2
 8011a26:	781b      	ldrb	r3, [r3, #0]
  }
}
 8011a28:	4618      	mov	r0, r3
 8011a2a:	370c      	adds	r7, #12
 8011a2c:	46bd      	mov	sp, r7
 8011a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a32:	4770      	bx	lr
 8011a34:	200004b8 	.word	0x200004b8
 8011a38:	200004b4 	.word	0x200004b4
 8011a3c:	200004b2 	.word	0x200004b2
 8011a40:	200004ac 	.word	0x200004ac

08011a44 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8011a44:	b580      	push	{r7, lr}
 8011a46:	b084      	sub	sp, #16
 8011a48:	af00      	add	r7, sp, #0
 8011a4a:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8011a4c:	687b      	ldr	r3, [r7, #4]
 8011a4e:	2b00      	cmp	r3, #0
 8011a50:	d106      	bne.n	8011a60 <tcp_parseopt+0x1c>
 8011a52:	4b32      	ldr	r3, [pc, #200]	; (8011b1c <tcp_parseopt+0xd8>)
 8011a54:	f240 727d 	movw	r2, #1917	; 0x77d
 8011a58:	4931      	ldr	r1, [pc, #196]	; (8011b20 <tcp_parseopt+0xdc>)
 8011a5a:	4832      	ldr	r0, [pc, #200]	; (8011b24 <tcp_parseopt+0xe0>)
 8011a5c:	f006 ffb6 	bl	80189cc <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8011a60:	4b31      	ldr	r3, [pc, #196]	; (8011b28 <tcp_parseopt+0xe4>)
 8011a62:	881b      	ldrh	r3, [r3, #0]
 8011a64:	2b00      	cmp	r3, #0
 8011a66:	d055      	beq.n	8011b14 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8011a68:	4b30      	ldr	r3, [pc, #192]	; (8011b2c <tcp_parseopt+0xe8>)
 8011a6a:	2200      	movs	r2, #0
 8011a6c:	801a      	strh	r2, [r3, #0]
 8011a6e:	e045      	b.n	8011afc <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 8011a70:	f7ff ffb2 	bl	80119d8 <tcp_get_next_optbyte>
 8011a74:	4603      	mov	r3, r0
 8011a76:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8011a78:	7bfb      	ldrb	r3, [r7, #15]
 8011a7a:	2b02      	cmp	r3, #2
 8011a7c:	d006      	beq.n	8011a8c <tcp_parseopt+0x48>
 8011a7e:	2b02      	cmp	r3, #2
 8011a80:	dc2b      	bgt.n	8011ada <tcp_parseopt+0x96>
 8011a82:	2b00      	cmp	r3, #0
 8011a84:	d041      	beq.n	8011b0a <tcp_parseopt+0xc6>
 8011a86:	2b01      	cmp	r3, #1
 8011a88:	d127      	bne.n	8011ada <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 8011a8a:	e037      	b.n	8011afc <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8011a8c:	f7ff ffa4 	bl	80119d8 <tcp_get_next_optbyte>
 8011a90:	4603      	mov	r3, r0
 8011a92:	2b04      	cmp	r3, #4
 8011a94:	d13b      	bne.n	8011b0e <tcp_parseopt+0xca>
 8011a96:	4b25      	ldr	r3, [pc, #148]	; (8011b2c <tcp_parseopt+0xe8>)
 8011a98:	881b      	ldrh	r3, [r3, #0]
 8011a9a:	3301      	adds	r3, #1
 8011a9c:	4a22      	ldr	r2, [pc, #136]	; (8011b28 <tcp_parseopt+0xe4>)
 8011a9e:	8812      	ldrh	r2, [r2, #0]
 8011aa0:	4293      	cmp	r3, r2
 8011aa2:	da34      	bge.n	8011b0e <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8011aa4:	f7ff ff98 	bl	80119d8 <tcp_get_next_optbyte>
 8011aa8:	4603      	mov	r3, r0
 8011aaa:	b29b      	uxth	r3, r3
 8011aac:	021b      	lsls	r3, r3, #8
 8011aae:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8011ab0:	f7ff ff92 	bl	80119d8 <tcp_get_next_optbyte>
 8011ab4:	4603      	mov	r3, r0
 8011ab6:	b29a      	uxth	r2, r3
 8011ab8:	89bb      	ldrh	r3, [r7, #12]
 8011aba:	4313      	orrs	r3, r2
 8011abc:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8011abe:	89bb      	ldrh	r3, [r7, #12]
 8011ac0:	f5b3 7fe6 	cmp.w	r3, #460	; 0x1cc
 8011ac4:	d804      	bhi.n	8011ad0 <tcp_parseopt+0x8c>
 8011ac6:	89bb      	ldrh	r3, [r7, #12]
 8011ac8:	2b00      	cmp	r3, #0
 8011aca:	d001      	beq.n	8011ad0 <tcp_parseopt+0x8c>
 8011acc:	89ba      	ldrh	r2, [r7, #12]
 8011ace:	e001      	b.n	8011ad4 <tcp_parseopt+0x90>
 8011ad0:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8011ad4:	687b      	ldr	r3, [r7, #4]
 8011ad6:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8011ad8:	e010      	b.n	8011afc <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8011ada:	f7ff ff7d 	bl	80119d8 <tcp_get_next_optbyte>
 8011ade:	4603      	mov	r3, r0
 8011ae0:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8011ae2:	7afb      	ldrb	r3, [r7, #11]
 8011ae4:	2b01      	cmp	r3, #1
 8011ae6:	d914      	bls.n	8011b12 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8011ae8:	7afb      	ldrb	r3, [r7, #11]
 8011aea:	b29a      	uxth	r2, r3
 8011aec:	4b0f      	ldr	r3, [pc, #60]	; (8011b2c <tcp_parseopt+0xe8>)
 8011aee:	881b      	ldrh	r3, [r3, #0]
 8011af0:	4413      	add	r3, r2
 8011af2:	b29b      	uxth	r3, r3
 8011af4:	3b02      	subs	r3, #2
 8011af6:	b29a      	uxth	r2, r3
 8011af8:	4b0c      	ldr	r3, [pc, #48]	; (8011b2c <tcp_parseopt+0xe8>)
 8011afa:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8011afc:	4b0b      	ldr	r3, [pc, #44]	; (8011b2c <tcp_parseopt+0xe8>)
 8011afe:	881a      	ldrh	r2, [r3, #0]
 8011b00:	4b09      	ldr	r3, [pc, #36]	; (8011b28 <tcp_parseopt+0xe4>)
 8011b02:	881b      	ldrh	r3, [r3, #0]
 8011b04:	429a      	cmp	r2, r3
 8011b06:	d3b3      	bcc.n	8011a70 <tcp_parseopt+0x2c>
 8011b08:	e004      	b.n	8011b14 <tcp_parseopt+0xd0>
          return;
 8011b0a:	bf00      	nop
 8011b0c:	e002      	b.n	8011b14 <tcp_parseopt+0xd0>
            return;
 8011b0e:	bf00      	nop
 8011b10:	e000      	b.n	8011b14 <tcp_parseopt+0xd0>
            return;
 8011b12:	bf00      	nop
      }
    }
  }
}
 8011b14:	3710      	adds	r7, #16
 8011b16:	46bd      	mov	sp, r7
 8011b18:	bd80      	pop	{r7, pc}
 8011b1a:	bf00      	nop
 8011b1c:	0801f238 	.word	0x0801f238
 8011b20:	0801f69c 	.word	0x0801f69c
 8011b24:	0801f284 	.word	0x0801f284
 8011b28:	200004b0 	.word	0x200004b0
 8011b2c:	200004b8 	.word	0x200004b8

08011b30 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8011b30:	b480      	push	{r7}
 8011b32:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8011b34:	4b05      	ldr	r3, [pc, #20]	; (8011b4c <tcp_trigger_input_pcb_close+0x1c>)
 8011b36:	781b      	ldrb	r3, [r3, #0]
 8011b38:	f043 0310 	orr.w	r3, r3, #16
 8011b3c:	b2da      	uxtb	r2, r3
 8011b3e:	4b03      	ldr	r3, [pc, #12]	; (8011b4c <tcp_trigger_input_pcb_close+0x1c>)
 8011b40:	701a      	strb	r2, [r3, #0]
}
 8011b42:	bf00      	nop
 8011b44:	46bd      	mov	sp, r7
 8011b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b4a:	4770      	bx	lr
 8011b4c:	200004c9 	.word	0x200004c9

08011b50 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8011b50:	b580      	push	{r7, lr}
 8011b52:	b084      	sub	sp, #16
 8011b54:	af00      	add	r7, sp, #0
 8011b56:	60f8      	str	r0, [r7, #12]
 8011b58:	60b9      	str	r1, [r7, #8]
 8011b5a:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8011b5c:	68fb      	ldr	r3, [r7, #12]
 8011b5e:	2b00      	cmp	r3, #0
 8011b60:	d00a      	beq.n	8011b78 <tcp_route+0x28>
 8011b62:	68fb      	ldr	r3, [r7, #12]
 8011b64:	7a1b      	ldrb	r3, [r3, #8]
 8011b66:	2b00      	cmp	r3, #0
 8011b68:	d006      	beq.n	8011b78 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8011b6a:	68fb      	ldr	r3, [r7, #12]
 8011b6c:	7a1b      	ldrb	r3, [r3, #8]
 8011b6e:	4618      	mov	r0, r3
 8011b70:	f7fb fb6e 	bl	800d250 <netif_get_by_index>
 8011b74:	4603      	mov	r3, r0
 8011b76:	e003      	b.n	8011b80 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8011b78:	6878      	ldr	r0, [r7, #4]
 8011b7a:	f004 ff95 	bl	8016aa8 <ip4_route>
 8011b7e:	4603      	mov	r3, r0
  }
}
 8011b80:	4618      	mov	r0, r3
 8011b82:	3710      	adds	r7, #16
 8011b84:	46bd      	mov	sp, r7
 8011b86:	bd80      	pop	{r7, pc}

08011b88 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8011b88:	b590      	push	{r4, r7, lr}
 8011b8a:	b087      	sub	sp, #28
 8011b8c:	af00      	add	r7, sp, #0
 8011b8e:	60f8      	str	r0, [r7, #12]
 8011b90:	60b9      	str	r1, [r7, #8]
 8011b92:	603b      	str	r3, [r7, #0]
 8011b94:	4613      	mov	r3, r2
 8011b96:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8011b98:	68fb      	ldr	r3, [r7, #12]
 8011b9a:	2b00      	cmp	r3, #0
 8011b9c:	d105      	bne.n	8011baa <tcp_create_segment+0x22>
 8011b9e:	4b44      	ldr	r3, [pc, #272]	; (8011cb0 <tcp_create_segment+0x128>)
 8011ba0:	22a3      	movs	r2, #163	; 0xa3
 8011ba2:	4944      	ldr	r1, [pc, #272]	; (8011cb4 <tcp_create_segment+0x12c>)
 8011ba4:	4844      	ldr	r0, [pc, #272]	; (8011cb8 <tcp_create_segment+0x130>)
 8011ba6:	f006 ff11 	bl	80189cc <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8011baa:	68bb      	ldr	r3, [r7, #8]
 8011bac:	2b00      	cmp	r3, #0
 8011bae:	d105      	bne.n	8011bbc <tcp_create_segment+0x34>
 8011bb0:	4b3f      	ldr	r3, [pc, #252]	; (8011cb0 <tcp_create_segment+0x128>)
 8011bb2:	22a4      	movs	r2, #164	; 0xa4
 8011bb4:	4941      	ldr	r1, [pc, #260]	; (8011cbc <tcp_create_segment+0x134>)
 8011bb6:	4840      	ldr	r0, [pc, #256]	; (8011cb8 <tcp_create_segment+0x130>)
 8011bb8:	f006 ff08 	bl	80189cc <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8011bbc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8011bc0:	009b      	lsls	r3, r3, #2
 8011bc2:	b2db      	uxtb	r3, r3
 8011bc4:	f003 0304 	and.w	r3, r3, #4
 8011bc8:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8011bca:	2003      	movs	r0, #3
 8011bcc:	f7fb f83a 	bl	800cc44 <memp_malloc>
 8011bd0:	6138      	str	r0, [r7, #16]
 8011bd2:	693b      	ldr	r3, [r7, #16]
 8011bd4:	2b00      	cmp	r3, #0
 8011bd6:	d104      	bne.n	8011be2 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8011bd8:	68b8      	ldr	r0, [r7, #8]
 8011bda:	f7fb fe79 	bl	800d8d0 <pbuf_free>
    return NULL;
 8011bde:	2300      	movs	r3, #0
 8011be0:	e061      	b.n	8011ca6 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 8011be2:	693b      	ldr	r3, [r7, #16]
 8011be4:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8011be8:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8011bea:	693b      	ldr	r3, [r7, #16]
 8011bec:	2200      	movs	r2, #0
 8011bee:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8011bf0:	693b      	ldr	r3, [r7, #16]
 8011bf2:	68ba      	ldr	r2, [r7, #8]
 8011bf4:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8011bf6:	68bb      	ldr	r3, [r7, #8]
 8011bf8:	891a      	ldrh	r2, [r3, #8]
 8011bfa:	7dfb      	ldrb	r3, [r7, #23]
 8011bfc:	b29b      	uxth	r3, r3
 8011bfe:	429a      	cmp	r2, r3
 8011c00:	d205      	bcs.n	8011c0e <tcp_create_segment+0x86>
 8011c02:	4b2b      	ldr	r3, [pc, #172]	; (8011cb0 <tcp_create_segment+0x128>)
 8011c04:	22b0      	movs	r2, #176	; 0xb0
 8011c06:	492e      	ldr	r1, [pc, #184]	; (8011cc0 <tcp_create_segment+0x138>)
 8011c08:	482b      	ldr	r0, [pc, #172]	; (8011cb8 <tcp_create_segment+0x130>)
 8011c0a:	f006 fedf 	bl	80189cc <iprintf>
  seg->len = p->tot_len - optlen;
 8011c0e:	68bb      	ldr	r3, [r7, #8]
 8011c10:	891a      	ldrh	r2, [r3, #8]
 8011c12:	7dfb      	ldrb	r3, [r7, #23]
 8011c14:	b29b      	uxth	r3, r3
 8011c16:	1ad3      	subs	r3, r2, r3
 8011c18:	b29a      	uxth	r2, r3
 8011c1a:	693b      	ldr	r3, [r7, #16]
 8011c1c:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8011c1e:	2114      	movs	r1, #20
 8011c20:	68b8      	ldr	r0, [r7, #8]
 8011c22:	f7fb fdbf 	bl	800d7a4 <pbuf_add_header>
 8011c26:	4603      	mov	r3, r0
 8011c28:	2b00      	cmp	r3, #0
 8011c2a:	d004      	beq.n	8011c36 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8011c2c:	6938      	ldr	r0, [r7, #16]
 8011c2e:	f7fd f8d2 	bl	800edd6 <tcp_seg_free>
    return NULL;
 8011c32:	2300      	movs	r3, #0
 8011c34:	e037      	b.n	8011ca6 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8011c36:	693b      	ldr	r3, [r7, #16]
 8011c38:	685b      	ldr	r3, [r3, #4]
 8011c3a:	685a      	ldr	r2, [r3, #4]
 8011c3c:	693b      	ldr	r3, [r7, #16]
 8011c3e:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8011c40:	68fb      	ldr	r3, [r7, #12]
 8011c42:	8ada      	ldrh	r2, [r3, #22]
 8011c44:	693b      	ldr	r3, [r7, #16]
 8011c46:	68dc      	ldr	r4, [r3, #12]
 8011c48:	4610      	mov	r0, r2
 8011c4a:	f7fa fba5 	bl	800c398 <lwip_htons>
 8011c4e:	4603      	mov	r3, r0
 8011c50:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8011c52:	68fb      	ldr	r3, [r7, #12]
 8011c54:	8b1a      	ldrh	r2, [r3, #24]
 8011c56:	693b      	ldr	r3, [r7, #16]
 8011c58:	68dc      	ldr	r4, [r3, #12]
 8011c5a:	4610      	mov	r0, r2
 8011c5c:	f7fa fb9c 	bl	800c398 <lwip_htons>
 8011c60:	4603      	mov	r3, r0
 8011c62:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8011c64:	693b      	ldr	r3, [r7, #16]
 8011c66:	68dc      	ldr	r4, [r3, #12]
 8011c68:	6838      	ldr	r0, [r7, #0]
 8011c6a:	f7fa fbaa 	bl	800c3c2 <lwip_htonl>
 8011c6e:	4603      	mov	r3, r0
 8011c70:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8011c72:	7dfb      	ldrb	r3, [r7, #23]
 8011c74:	089b      	lsrs	r3, r3, #2
 8011c76:	b2db      	uxtb	r3, r3
 8011c78:	b29b      	uxth	r3, r3
 8011c7a:	3305      	adds	r3, #5
 8011c7c:	b29b      	uxth	r3, r3
 8011c7e:	031b      	lsls	r3, r3, #12
 8011c80:	b29a      	uxth	r2, r3
 8011c82:	79fb      	ldrb	r3, [r7, #7]
 8011c84:	b29b      	uxth	r3, r3
 8011c86:	4313      	orrs	r3, r2
 8011c88:	b29a      	uxth	r2, r3
 8011c8a:	693b      	ldr	r3, [r7, #16]
 8011c8c:	68dc      	ldr	r4, [r3, #12]
 8011c8e:	4610      	mov	r0, r2
 8011c90:	f7fa fb82 	bl	800c398 <lwip_htons>
 8011c94:	4603      	mov	r3, r0
 8011c96:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8011c98:	693b      	ldr	r3, [r7, #16]
 8011c9a:	68db      	ldr	r3, [r3, #12]
 8011c9c:	2200      	movs	r2, #0
 8011c9e:	749a      	strb	r2, [r3, #18]
 8011ca0:	2200      	movs	r2, #0
 8011ca2:	74da      	strb	r2, [r3, #19]
  return seg;
 8011ca4:	693b      	ldr	r3, [r7, #16]
}
 8011ca6:	4618      	mov	r0, r3
 8011ca8:	371c      	adds	r7, #28
 8011caa:	46bd      	mov	sp, r7
 8011cac:	bd90      	pop	{r4, r7, pc}
 8011cae:	bf00      	nop
 8011cb0:	0801f6b8 	.word	0x0801f6b8
 8011cb4:	0801f6ec 	.word	0x0801f6ec
 8011cb8:	0801f70c 	.word	0x0801f70c
 8011cbc:	0801f734 	.word	0x0801f734
 8011cc0:	0801f758 	.word	0x0801f758

08011cc4 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8011cc4:	b590      	push	{r4, r7, lr}
 8011cc6:	b08b      	sub	sp, #44	; 0x2c
 8011cc8:	af02      	add	r7, sp, #8
 8011cca:	6078      	str	r0, [r7, #4]
 8011ccc:	460b      	mov	r3, r1
 8011cce:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8011cd0:	2300      	movs	r3, #0
 8011cd2:	61fb      	str	r3, [r7, #28]
 8011cd4:	2300      	movs	r3, #0
 8011cd6:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8011cd8:	2300      	movs	r3, #0
 8011cda:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8011cdc:	687b      	ldr	r3, [r7, #4]
 8011cde:	2b00      	cmp	r3, #0
 8011ce0:	d106      	bne.n	8011cf0 <tcp_split_unsent_seg+0x2c>
 8011ce2:	4b95      	ldr	r3, [pc, #596]	; (8011f38 <tcp_split_unsent_seg+0x274>)
 8011ce4:	f240 324b 	movw	r2, #843	; 0x34b
 8011ce8:	4994      	ldr	r1, [pc, #592]	; (8011f3c <tcp_split_unsent_seg+0x278>)
 8011cea:	4895      	ldr	r0, [pc, #596]	; (8011f40 <tcp_split_unsent_seg+0x27c>)
 8011cec:	f006 fe6e 	bl	80189cc <iprintf>

  useg = pcb->unsent;
 8011cf0:	687b      	ldr	r3, [r7, #4]
 8011cf2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011cf4:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8011cf6:	697b      	ldr	r3, [r7, #20]
 8011cf8:	2b00      	cmp	r3, #0
 8011cfa:	d102      	bne.n	8011d02 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8011cfc:	f04f 33ff 	mov.w	r3, #4294967295
 8011d00:	e116      	b.n	8011f30 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8011d02:	887b      	ldrh	r3, [r7, #2]
 8011d04:	2b00      	cmp	r3, #0
 8011d06:	d109      	bne.n	8011d1c <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8011d08:	4b8b      	ldr	r3, [pc, #556]	; (8011f38 <tcp_split_unsent_seg+0x274>)
 8011d0a:	f240 3253 	movw	r2, #851	; 0x353
 8011d0e:	498d      	ldr	r1, [pc, #564]	; (8011f44 <tcp_split_unsent_seg+0x280>)
 8011d10:	488b      	ldr	r0, [pc, #556]	; (8011f40 <tcp_split_unsent_seg+0x27c>)
 8011d12:	f006 fe5b 	bl	80189cc <iprintf>
    return ERR_VAL;
 8011d16:	f06f 0305 	mvn.w	r3, #5
 8011d1a:	e109      	b.n	8011f30 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8011d1c:	697b      	ldr	r3, [r7, #20]
 8011d1e:	891b      	ldrh	r3, [r3, #8]
 8011d20:	887a      	ldrh	r2, [r7, #2]
 8011d22:	429a      	cmp	r2, r3
 8011d24:	d301      	bcc.n	8011d2a <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8011d26:	2300      	movs	r3, #0
 8011d28:	e102      	b.n	8011f30 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8011d2a:	687b      	ldr	r3, [r7, #4]
 8011d2c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011d2e:	887a      	ldrh	r2, [r7, #2]
 8011d30:	429a      	cmp	r2, r3
 8011d32:	d906      	bls.n	8011d42 <tcp_split_unsent_seg+0x7e>
 8011d34:	4b80      	ldr	r3, [pc, #512]	; (8011f38 <tcp_split_unsent_seg+0x274>)
 8011d36:	f240 325b 	movw	r2, #859	; 0x35b
 8011d3a:	4983      	ldr	r1, [pc, #524]	; (8011f48 <tcp_split_unsent_seg+0x284>)
 8011d3c:	4880      	ldr	r0, [pc, #512]	; (8011f40 <tcp_split_unsent_seg+0x27c>)
 8011d3e:	f006 fe45 	bl	80189cc <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8011d42:	697b      	ldr	r3, [r7, #20]
 8011d44:	891b      	ldrh	r3, [r3, #8]
 8011d46:	2b00      	cmp	r3, #0
 8011d48:	d106      	bne.n	8011d58 <tcp_split_unsent_seg+0x94>
 8011d4a:	4b7b      	ldr	r3, [pc, #492]	; (8011f38 <tcp_split_unsent_seg+0x274>)
 8011d4c:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8011d50:	497e      	ldr	r1, [pc, #504]	; (8011f4c <tcp_split_unsent_seg+0x288>)
 8011d52:	487b      	ldr	r0, [pc, #492]	; (8011f40 <tcp_split_unsent_seg+0x27c>)
 8011d54:	f006 fe3a 	bl	80189cc <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8011d58:	697b      	ldr	r3, [r7, #20]
 8011d5a:	7a9b      	ldrb	r3, [r3, #10]
 8011d5c:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8011d5e:	7bfb      	ldrb	r3, [r7, #15]
 8011d60:	009b      	lsls	r3, r3, #2
 8011d62:	b2db      	uxtb	r3, r3
 8011d64:	f003 0304 	and.w	r3, r3, #4
 8011d68:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8011d6a:	697b      	ldr	r3, [r7, #20]
 8011d6c:	891a      	ldrh	r2, [r3, #8]
 8011d6e:	887b      	ldrh	r3, [r7, #2]
 8011d70:	1ad3      	subs	r3, r2, r3
 8011d72:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8011d74:	7bbb      	ldrb	r3, [r7, #14]
 8011d76:	b29a      	uxth	r2, r3
 8011d78:	89bb      	ldrh	r3, [r7, #12]
 8011d7a:	4413      	add	r3, r2
 8011d7c:	b29b      	uxth	r3, r3
 8011d7e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011d82:	4619      	mov	r1, r3
 8011d84:	2036      	movs	r0, #54	; 0x36
 8011d86:	f7fb fabf 	bl	800d308 <pbuf_alloc>
 8011d8a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8011d8c:	693b      	ldr	r3, [r7, #16]
 8011d8e:	2b00      	cmp	r3, #0
 8011d90:	f000 80b7 	beq.w	8011f02 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8011d94:	697b      	ldr	r3, [r7, #20]
 8011d96:	685b      	ldr	r3, [r3, #4]
 8011d98:	891a      	ldrh	r2, [r3, #8]
 8011d9a:	697b      	ldr	r3, [r7, #20]
 8011d9c:	891b      	ldrh	r3, [r3, #8]
 8011d9e:	1ad3      	subs	r3, r2, r3
 8011da0:	b29a      	uxth	r2, r3
 8011da2:	887b      	ldrh	r3, [r7, #2]
 8011da4:	4413      	add	r3, r2
 8011da6:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8011da8:	697b      	ldr	r3, [r7, #20]
 8011daa:	6858      	ldr	r0, [r3, #4]
 8011dac:	693b      	ldr	r3, [r7, #16]
 8011dae:	685a      	ldr	r2, [r3, #4]
 8011db0:	7bbb      	ldrb	r3, [r7, #14]
 8011db2:	18d1      	adds	r1, r2, r3
 8011db4:	897b      	ldrh	r3, [r7, #10]
 8011db6:	89ba      	ldrh	r2, [r7, #12]
 8011db8:	f7fb ff84 	bl	800dcc4 <pbuf_copy_partial>
 8011dbc:	4603      	mov	r3, r0
 8011dbe:	461a      	mov	r2, r3
 8011dc0:	89bb      	ldrh	r3, [r7, #12]
 8011dc2:	4293      	cmp	r3, r2
 8011dc4:	f040 809f 	bne.w	8011f06 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8011dc8:	697b      	ldr	r3, [r7, #20]
 8011dca:	68db      	ldr	r3, [r3, #12]
 8011dcc:	899b      	ldrh	r3, [r3, #12]
 8011dce:	b29b      	uxth	r3, r3
 8011dd0:	4618      	mov	r0, r3
 8011dd2:	f7fa fae1 	bl	800c398 <lwip_htons>
 8011dd6:	4603      	mov	r3, r0
 8011dd8:	b2db      	uxtb	r3, r3
 8011dda:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011dde:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8011de0:	2300      	movs	r3, #0
 8011de2:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8011de4:	7efb      	ldrb	r3, [r7, #27]
 8011de6:	f003 0308 	and.w	r3, r3, #8
 8011dea:	2b00      	cmp	r3, #0
 8011dec:	d007      	beq.n	8011dfe <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8011dee:	7efb      	ldrb	r3, [r7, #27]
 8011df0:	f023 0308 	bic.w	r3, r3, #8
 8011df4:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8011df6:	7ebb      	ldrb	r3, [r7, #26]
 8011df8:	f043 0308 	orr.w	r3, r3, #8
 8011dfc:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8011dfe:	7efb      	ldrb	r3, [r7, #27]
 8011e00:	f003 0301 	and.w	r3, r3, #1
 8011e04:	2b00      	cmp	r3, #0
 8011e06:	d007      	beq.n	8011e18 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8011e08:	7efb      	ldrb	r3, [r7, #27]
 8011e0a:	f023 0301 	bic.w	r3, r3, #1
 8011e0e:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8011e10:	7ebb      	ldrb	r3, [r7, #26]
 8011e12:	f043 0301 	orr.w	r3, r3, #1
 8011e16:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8011e18:	697b      	ldr	r3, [r7, #20]
 8011e1a:	68db      	ldr	r3, [r3, #12]
 8011e1c:	685b      	ldr	r3, [r3, #4]
 8011e1e:	4618      	mov	r0, r3
 8011e20:	f7fa facf 	bl	800c3c2 <lwip_htonl>
 8011e24:	4602      	mov	r2, r0
 8011e26:	887b      	ldrh	r3, [r7, #2]
 8011e28:	18d1      	adds	r1, r2, r3
 8011e2a:	7eba      	ldrb	r2, [r7, #26]
 8011e2c:	7bfb      	ldrb	r3, [r7, #15]
 8011e2e:	9300      	str	r3, [sp, #0]
 8011e30:	460b      	mov	r3, r1
 8011e32:	6939      	ldr	r1, [r7, #16]
 8011e34:	6878      	ldr	r0, [r7, #4]
 8011e36:	f7ff fea7 	bl	8011b88 <tcp_create_segment>
 8011e3a:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8011e3c:	69fb      	ldr	r3, [r7, #28]
 8011e3e:	2b00      	cmp	r3, #0
 8011e40:	d063      	beq.n	8011f0a <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8011e42:	697b      	ldr	r3, [r7, #20]
 8011e44:	685b      	ldr	r3, [r3, #4]
 8011e46:	4618      	mov	r0, r3
 8011e48:	f7fb fdca 	bl	800d9e0 <pbuf_clen>
 8011e4c:	4603      	mov	r3, r0
 8011e4e:	461a      	mov	r2, r3
 8011e50:	687b      	ldr	r3, [r7, #4]
 8011e52:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011e56:	1a9b      	subs	r3, r3, r2
 8011e58:	b29a      	uxth	r2, r3
 8011e5a:	687b      	ldr	r3, [r7, #4]
 8011e5c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8011e60:	697b      	ldr	r3, [r7, #20]
 8011e62:	6858      	ldr	r0, [r3, #4]
 8011e64:	697b      	ldr	r3, [r7, #20]
 8011e66:	685b      	ldr	r3, [r3, #4]
 8011e68:	891a      	ldrh	r2, [r3, #8]
 8011e6a:	89bb      	ldrh	r3, [r7, #12]
 8011e6c:	1ad3      	subs	r3, r2, r3
 8011e6e:	b29b      	uxth	r3, r3
 8011e70:	4619      	mov	r1, r3
 8011e72:	f7fb fba7 	bl	800d5c4 <pbuf_realloc>
  useg->len -= remainder;
 8011e76:	697b      	ldr	r3, [r7, #20]
 8011e78:	891a      	ldrh	r2, [r3, #8]
 8011e7a:	89bb      	ldrh	r3, [r7, #12]
 8011e7c:	1ad3      	subs	r3, r2, r3
 8011e7e:	b29a      	uxth	r2, r3
 8011e80:	697b      	ldr	r3, [r7, #20]
 8011e82:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8011e84:	697b      	ldr	r3, [r7, #20]
 8011e86:	68db      	ldr	r3, [r3, #12]
 8011e88:	899b      	ldrh	r3, [r3, #12]
 8011e8a:	b29c      	uxth	r4, r3
 8011e8c:	7efb      	ldrb	r3, [r7, #27]
 8011e8e:	b29b      	uxth	r3, r3
 8011e90:	4618      	mov	r0, r3
 8011e92:	f7fa fa81 	bl	800c398 <lwip_htons>
 8011e96:	4603      	mov	r3, r0
 8011e98:	461a      	mov	r2, r3
 8011e9a:	697b      	ldr	r3, [r7, #20]
 8011e9c:	68db      	ldr	r3, [r3, #12]
 8011e9e:	4322      	orrs	r2, r4
 8011ea0:	b292      	uxth	r2, r2
 8011ea2:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8011ea4:	697b      	ldr	r3, [r7, #20]
 8011ea6:	685b      	ldr	r3, [r3, #4]
 8011ea8:	4618      	mov	r0, r3
 8011eaa:	f7fb fd99 	bl	800d9e0 <pbuf_clen>
 8011eae:	4603      	mov	r3, r0
 8011eb0:	461a      	mov	r2, r3
 8011eb2:	687b      	ldr	r3, [r7, #4]
 8011eb4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011eb8:	4413      	add	r3, r2
 8011eba:	b29a      	uxth	r2, r3
 8011ebc:	687b      	ldr	r3, [r7, #4]
 8011ebe:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8011ec2:	69fb      	ldr	r3, [r7, #28]
 8011ec4:	685b      	ldr	r3, [r3, #4]
 8011ec6:	4618      	mov	r0, r3
 8011ec8:	f7fb fd8a 	bl	800d9e0 <pbuf_clen>
 8011ecc:	4603      	mov	r3, r0
 8011ece:	461a      	mov	r2, r3
 8011ed0:	687b      	ldr	r3, [r7, #4]
 8011ed2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011ed6:	4413      	add	r3, r2
 8011ed8:	b29a      	uxth	r2, r3
 8011eda:	687b      	ldr	r3, [r7, #4]
 8011edc:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8011ee0:	697b      	ldr	r3, [r7, #20]
 8011ee2:	681a      	ldr	r2, [r3, #0]
 8011ee4:	69fb      	ldr	r3, [r7, #28]
 8011ee6:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8011ee8:	697b      	ldr	r3, [r7, #20]
 8011eea:	69fa      	ldr	r2, [r7, #28]
 8011eec:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8011eee:	69fb      	ldr	r3, [r7, #28]
 8011ef0:	681b      	ldr	r3, [r3, #0]
 8011ef2:	2b00      	cmp	r3, #0
 8011ef4:	d103      	bne.n	8011efe <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8011ef6:	687b      	ldr	r3, [r7, #4]
 8011ef8:	2200      	movs	r2, #0
 8011efa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8011efe:	2300      	movs	r3, #0
 8011f00:	e016      	b.n	8011f30 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8011f02:	bf00      	nop
 8011f04:	e002      	b.n	8011f0c <tcp_split_unsent_seg+0x248>
    goto memerr;
 8011f06:	bf00      	nop
 8011f08:	e000      	b.n	8011f0c <tcp_split_unsent_seg+0x248>
    goto memerr;
 8011f0a:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8011f0c:	69fb      	ldr	r3, [r7, #28]
 8011f0e:	2b00      	cmp	r3, #0
 8011f10:	d006      	beq.n	8011f20 <tcp_split_unsent_seg+0x25c>
 8011f12:	4b09      	ldr	r3, [pc, #36]	; (8011f38 <tcp_split_unsent_seg+0x274>)
 8011f14:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8011f18:	490d      	ldr	r1, [pc, #52]	; (8011f50 <tcp_split_unsent_seg+0x28c>)
 8011f1a:	4809      	ldr	r0, [pc, #36]	; (8011f40 <tcp_split_unsent_seg+0x27c>)
 8011f1c:	f006 fd56 	bl	80189cc <iprintf>
  if (p != NULL) {
 8011f20:	693b      	ldr	r3, [r7, #16]
 8011f22:	2b00      	cmp	r3, #0
 8011f24:	d002      	beq.n	8011f2c <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8011f26:	6938      	ldr	r0, [r7, #16]
 8011f28:	f7fb fcd2 	bl	800d8d0 <pbuf_free>
  }

  return ERR_MEM;
 8011f2c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8011f30:	4618      	mov	r0, r3
 8011f32:	3724      	adds	r7, #36	; 0x24
 8011f34:	46bd      	mov	sp, r7
 8011f36:	bd90      	pop	{r4, r7, pc}
 8011f38:	0801f6b8 	.word	0x0801f6b8
 8011f3c:	0801fa4c 	.word	0x0801fa4c
 8011f40:	0801f70c 	.word	0x0801f70c
 8011f44:	0801fa70 	.word	0x0801fa70
 8011f48:	0801fa94 	.word	0x0801fa94
 8011f4c:	0801faa4 	.word	0x0801faa4
 8011f50:	0801fab4 	.word	0x0801fab4

08011f54 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8011f54:	b590      	push	{r4, r7, lr}
 8011f56:	b085      	sub	sp, #20
 8011f58:	af00      	add	r7, sp, #0
 8011f5a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8011f5c:	687b      	ldr	r3, [r7, #4]
 8011f5e:	2b00      	cmp	r3, #0
 8011f60:	d106      	bne.n	8011f70 <tcp_send_fin+0x1c>
 8011f62:	4b21      	ldr	r3, [pc, #132]	; (8011fe8 <tcp_send_fin+0x94>)
 8011f64:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8011f68:	4920      	ldr	r1, [pc, #128]	; (8011fec <tcp_send_fin+0x98>)
 8011f6a:	4821      	ldr	r0, [pc, #132]	; (8011ff0 <tcp_send_fin+0x9c>)
 8011f6c:	f006 fd2e 	bl	80189cc <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8011f70:	687b      	ldr	r3, [r7, #4]
 8011f72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011f74:	2b00      	cmp	r3, #0
 8011f76:	d02e      	beq.n	8011fd6 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8011f78:	687b      	ldr	r3, [r7, #4]
 8011f7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011f7c:	60fb      	str	r3, [r7, #12]
 8011f7e:	e002      	b.n	8011f86 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8011f80:	68fb      	ldr	r3, [r7, #12]
 8011f82:	681b      	ldr	r3, [r3, #0]
 8011f84:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8011f86:	68fb      	ldr	r3, [r7, #12]
 8011f88:	681b      	ldr	r3, [r3, #0]
 8011f8a:	2b00      	cmp	r3, #0
 8011f8c:	d1f8      	bne.n	8011f80 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8011f8e:	68fb      	ldr	r3, [r7, #12]
 8011f90:	68db      	ldr	r3, [r3, #12]
 8011f92:	899b      	ldrh	r3, [r3, #12]
 8011f94:	b29b      	uxth	r3, r3
 8011f96:	4618      	mov	r0, r3
 8011f98:	f7fa f9fe 	bl	800c398 <lwip_htons>
 8011f9c:	4603      	mov	r3, r0
 8011f9e:	b2db      	uxtb	r3, r3
 8011fa0:	f003 0307 	and.w	r3, r3, #7
 8011fa4:	2b00      	cmp	r3, #0
 8011fa6:	d116      	bne.n	8011fd6 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8011fa8:	68fb      	ldr	r3, [r7, #12]
 8011faa:	68db      	ldr	r3, [r3, #12]
 8011fac:	899b      	ldrh	r3, [r3, #12]
 8011fae:	b29c      	uxth	r4, r3
 8011fb0:	2001      	movs	r0, #1
 8011fb2:	f7fa f9f1 	bl	800c398 <lwip_htons>
 8011fb6:	4603      	mov	r3, r0
 8011fb8:	461a      	mov	r2, r3
 8011fba:	68fb      	ldr	r3, [r7, #12]
 8011fbc:	68db      	ldr	r3, [r3, #12]
 8011fbe:	4322      	orrs	r2, r4
 8011fc0:	b292      	uxth	r2, r2
 8011fc2:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8011fc4:	687b      	ldr	r3, [r7, #4]
 8011fc6:	8b5b      	ldrh	r3, [r3, #26]
 8011fc8:	f043 0320 	orr.w	r3, r3, #32
 8011fcc:	b29a      	uxth	r2, r3
 8011fce:	687b      	ldr	r3, [r7, #4]
 8011fd0:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8011fd2:	2300      	movs	r3, #0
 8011fd4:	e004      	b.n	8011fe0 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8011fd6:	2101      	movs	r1, #1
 8011fd8:	6878      	ldr	r0, [r7, #4]
 8011fda:	f000 f80b 	bl	8011ff4 <tcp_enqueue_flags>
 8011fde:	4603      	mov	r3, r0
}
 8011fe0:	4618      	mov	r0, r3
 8011fe2:	3714      	adds	r7, #20
 8011fe4:	46bd      	mov	sp, r7
 8011fe6:	bd90      	pop	{r4, r7, pc}
 8011fe8:	0801f6b8 	.word	0x0801f6b8
 8011fec:	0801fac0 	.word	0x0801fac0
 8011ff0:	0801f70c 	.word	0x0801f70c

08011ff4 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8011ff4:	b580      	push	{r7, lr}
 8011ff6:	b08a      	sub	sp, #40	; 0x28
 8011ff8:	af02      	add	r7, sp, #8
 8011ffa:	6078      	str	r0, [r7, #4]
 8011ffc:	460b      	mov	r3, r1
 8011ffe:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8012000:	2300      	movs	r3, #0
 8012002:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8012004:	2300      	movs	r3, #0
 8012006:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8012008:	78fb      	ldrb	r3, [r7, #3]
 801200a:	f003 0303 	and.w	r3, r3, #3
 801200e:	2b00      	cmp	r3, #0
 8012010:	d106      	bne.n	8012020 <tcp_enqueue_flags+0x2c>
 8012012:	4b67      	ldr	r3, [pc, #412]	; (80121b0 <tcp_enqueue_flags+0x1bc>)
 8012014:	f240 4211 	movw	r2, #1041	; 0x411
 8012018:	4966      	ldr	r1, [pc, #408]	; (80121b4 <tcp_enqueue_flags+0x1c0>)
 801201a:	4867      	ldr	r0, [pc, #412]	; (80121b8 <tcp_enqueue_flags+0x1c4>)
 801201c:	f006 fcd6 	bl	80189cc <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8012020:	687b      	ldr	r3, [r7, #4]
 8012022:	2b00      	cmp	r3, #0
 8012024:	d106      	bne.n	8012034 <tcp_enqueue_flags+0x40>
 8012026:	4b62      	ldr	r3, [pc, #392]	; (80121b0 <tcp_enqueue_flags+0x1bc>)
 8012028:	f240 4213 	movw	r2, #1043	; 0x413
 801202c:	4963      	ldr	r1, [pc, #396]	; (80121bc <tcp_enqueue_flags+0x1c8>)
 801202e:	4862      	ldr	r0, [pc, #392]	; (80121b8 <tcp_enqueue_flags+0x1c4>)
 8012030:	f006 fccc 	bl	80189cc <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8012034:	78fb      	ldrb	r3, [r7, #3]
 8012036:	f003 0302 	and.w	r3, r3, #2
 801203a:	2b00      	cmp	r3, #0
 801203c:	d001      	beq.n	8012042 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 801203e:	2301      	movs	r3, #1
 8012040:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8012042:	7ffb      	ldrb	r3, [r7, #31]
 8012044:	009b      	lsls	r3, r3, #2
 8012046:	b2db      	uxtb	r3, r3
 8012048:	f003 0304 	and.w	r3, r3, #4
 801204c:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801204e:	7dfb      	ldrb	r3, [r7, #23]
 8012050:	b29b      	uxth	r3, r3
 8012052:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012056:	4619      	mov	r1, r3
 8012058:	2036      	movs	r0, #54	; 0x36
 801205a:	f7fb f955 	bl	800d308 <pbuf_alloc>
 801205e:	6138      	str	r0, [r7, #16]
 8012060:	693b      	ldr	r3, [r7, #16]
 8012062:	2b00      	cmp	r3, #0
 8012064:	d109      	bne.n	801207a <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012066:	687b      	ldr	r3, [r7, #4]
 8012068:	8b5b      	ldrh	r3, [r3, #26]
 801206a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801206e:	b29a      	uxth	r2, r3
 8012070:	687b      	ldr	r3, [r7, #4]
 8012072:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8012074:	f04f 33ff 	mov.w	r3, #4294967295
 8012078:	e095      	b.n	80121a6 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 801207a:	693b      	ldr	r3, [r7, #16]
 801207c:	895a      	ldrh	r2, [r3, #10]
 801207e:	7dfb      	ldrb	r3, [r7, #23]
 8012080:	b29b      	uxth	r3, r3
 8012082:	429a      	cmp	r2, r3
 8012084:	d206      	bcs.n	8012094 <tcp_enqueue_flags+0xa0>
 8012086:	4b4a      	ldr	r3, [pc, #296]	; (80121b0 <tcp_enqueue_flags+0x1bc>)
 8012088:	f240 4239 	movw	r2, #1081	; 0x439
 801208c:	494c      	ldr	r1, [pc, #304]	; (80121c0 <tcp_enqueue_flags+0x1cc>)
 801208e:	484a      	ldr	r0, [pc, #296]	; (80121b8 <tcp_enqueue_flags+0x1c4>)
 8012090:	f006 fc9c 	bl	80189cc <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8012094:	687b      	ldr	r3, [r7, #4]
 8012096:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8012098:	78fa      	ldrb	r2, [r7, #3]
 801209a:	7ffb      	ldrb	r3, [r7, #31]
 801209c:	9300      	str	r3, [sp, #0]
 801209e:	460b      	mov	r3, r1
 80120a0:	6939      	ldr	r1, [r7, #16]
 80120a2:	6878      	ldr	r0, [r7, #4]
 80120a4:	f7ff fd70 	bl	8011b88 <tcp_create_segment>
 80120a8:	60f8      	str	r0, [r7, #12]
 80120aa:	68fb      	ldr	r3, [r7, #12]
 80120ac:	2b00      	cmp	r3, #0
 80120ae:	d109      	bne.n	80120c4 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80120b0:	687b      	ldr	r3, [r7, #4]
 80120b2:	8b5b      	ldrh	r3, [r3, #26]
 80120b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80120b8:	b29a      	uxth	r2, r3
 80120ba:	687b      	ldr	r3, [r7, #4]
 80120bc:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80120be:	f04f 33ff 	mov.w	r3, #4294967295
 80120c2:	e070      	b.n	80121a6 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 80120c4:	68fb      	ldr	r3, [r7, #12]
 80120c6:	68db      	ldr	r3, [r3, #12]
 80120c8:	f003 0303 	and.w	r3, r3, #3
 80120cc:	2b00      	cmp	r3, #0
 80120ce:	d006      	beq.n	80120de <tcp_enqueue_flags+0xea>
 80120d0:	4b37      	ldr	r3, [pc, #220]	; (80121b0 <tcp_enqueue_flags+0x1bc>)
 80120d2:	f240 4242 	movw	r2, #1090	; 0x442
 80120d6:	493b      	ldr	r1, [pc, #236]	; (80121c4 <tcp_enqueue_flags+0x1d0>)
 80120d8:	4837      	ldr	r0, [pc, #220]	; (80121b8 <tcp_enqueue_flags+0x1c4>)
 80120da:	f006 fc77 	bl	80189cc <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 80120de:	68fb      	ldr	r3, [r7, #12]
 80120e0:	891b      	ldrh	r3, [r3, #8]
 80120e2:	2b00      	cmp	r3, #0
 80120e4:	d006      	beq.n	80120f4 <tcp_enqueue_flags+0x100>
 80120e6:	4b32      	ldr	r3, [pc, #200]	; (80121b0 <tcp_enqueue_flags+0x1bc>)
 80120e8:	f240 4243 	movw	r2, #1091	; 0x443
 80120ec:	4936      	ldr	r1, [pc, #216]	; (80121c8 <tcp_enqueue_flags+0x1d4>)
 80120ee:	4832      	ldr	r0, [pc, #200]	; (80121b8 <tcp_enqueue_flags+0x1c4>)
 80120f0:	f006 fc6c 	bl	80189cc <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 80120f4:	687b      	ldr	r3, [r7, #4]
 80120f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80120f8:	2b00      	cmp	r3, #0
 80120fa:	d103      	bne.n	8012104 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 80120fc:	687b      	ldr	r3, [r7, #4]
 80120fe:	68fa      	ldr	r2, [r7, #12]
 8012100:	66da      	str	r2, [r3, #108]	; 0x6c
 8012102:	e00d      	b.n	8012120 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8012104:	687b      	ldr	r3, [r7, #4]
 8012106:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012108:	61bb      	str	r3, [r7, #24]
 801210a:	e002      	b.n	8012112 <tcp_enqueue_flags+0x11e>
 801210c:	69bb      	ldr	r3, [r7, #24]
 801210e:	681b      	ldr	r3, [r3, #0]
 8012110:	61bb      	str	r3, [r7, #24]
 8012112:	69bb      	ldr	r3, [r7, #24]
 8012114:	681b      	ldr	r3, [r3, #0]
 8012116:	2b00      	cmp	r3, #0
 8012118:	d1f8      	bne.n	801210c <tcp_enqueue_flags+0x118>
    useg->next = seg;
 801211a:	69bb      	ldr	r3, [r7, #24]
 801211c:	68fa      	ldr	r2, [r7, #12]
 801211e:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8012120:	687b      	ldr	r3, [r7, #4]
 8012122:	2200      	movs	r2, #0
 8012124:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8012128:	78fb      	ldrb	r3, [r7, #3]
 801212a:	f003 0302 	and.w	r3, r3, #2
 801212e:	2b00      	cmp	r3, #0
 8012130:	d104      	bne.n	801213c <tcp_enqueue_flags+0x148>
 8012132:	78fb      	ldrb	r3, [r7, #3]
 8012134:	f003 0301 	and.w	r3, r3, #1
 8012138:	2b00      	cmp	r3, #0
 801213a:	d004      	beq.n	8012146 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 801213c:	687b      	ldr	r3, [r7, #4]
 801213e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012140:	1c5a      	adds	r2, r3, #1
 8012142:	687b      	ldr	r3, [r7, #4]
 8012144:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8012146:	78fb      	ldrb	r3, [r7, #3]
 8012148:	f003 0301 	and.w	r3, r3, #1
 801214c:	2b00      	cmp	r3, #0
 801214e:	d006      	beq.n	801215e <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8012150:	687b      	ldr	r3, [r7, #4]
 8012152:	8b5b      	ldrh	r3, [r3, #26]
 8012154:	f043 0320 	orr.w	r3, r3, #32
 8012158:	b29a      	uxth	r2, r3
 801215a:	687b      	ldr	r3, [r7, #4]
 801215c:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801215e:	68fb      	ldr	r3, [r7, #12]
 8012160:	685b      	ldr	r3, [r3, #4]
 8012162:	4618      	mov	r0, r3
 8012164:	f7fb fc3c 	bl	800d9e0 <pbuf_clen>
 8012168:	4603      	mov	r3, r0
 801216a:	461a      	mov	r2, r3
 801216c:	687b      	ldr	r3, [r7, #4]
 801216e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012172:	4413      	add	r3, r2
 8012174:	b29a      	uxth	r2, r3
 8012176:	687b      	ldr	r3, [r7, #4]
 8012178:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801217c:	687b      	ldr	r3, [r7, #4]
 801217e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012182:	2b00      	cmp	r3, #0
 8012184:	d00e      	beq.n	80121a4 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8012186:	687b      	ldr	r3, [r7, #4]
 8012188:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801218a:	2b00      	cmp	r3, #0
 801218c:	d10a      	bne.n	80121a4 <tcp_enqueue_flags+0x1b0>
 801218e:	687b      	ldr	r3, [r7, #4]
 8012190:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012192:	2b00      	cmp	r3, #0
 8012194:	d106      	bne.n	80121a4 <tcp_enqueue_flags+0x1b0>
 8012196:	4b06      	ldr	r3, [pc, #24]	; (80121b0 <tcp_enqueue_flags+0x1bc>)
 8012198:	f240 4265 	movw	r2, #1125	; 0x465
 801219c:	490b      	ldr	r1, [pc, #44]	; (80121cc <tcp_enqueue_flags+0x1d8>)
 801219e:	4806      	ldr	r0, [pc, #24]	; (80121b8 <tcp_enqueue_flags+0x1c4>)
 80121a0:	f006 fc14 	bl	80189cc <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 80121a4:	2300      	movs	r3, #0
}
 80121a6:	4618      	mov	r0, r3
 80121a8:	3720      	adds	r7, #32
 80121aa:	46bd      	mov	sp, r7
 80121ac:	bd80      	pop	{r7, pc}
 80121ae:	bf00      	nop
 80121b0:	0801f6b8 	.word	0x0801f6b8
 80121b4:	0801fadc 	.word	0x0801fadc
 80121b8:	0801f70c 	.word	0x0801f70c
 80121bc:	0801fb34 	.word	0x0801fb34
 80121c0:	0801fb54 	.word	0x0801fb54
 80121c4:	0801fb90 	.word	0x0801fb90
 80121c8:	0801fba8 	.word	0x0801fba8
 80121cc:	0801fbd4 	.word	0x0801fbd4

080121d0 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 80121d0:	b5b0      	push	{r4, r5, r7, lr}
 80121d2:	b08a      	sub	sp, #40	; 0x28
 80121d4:	af00      	add	r7, sp, #0
 80121d6:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 80121d8:	687b      	ldr	r3, [r7, #4]
 80121da:	2b00      	cmp	r3, #0
 80121dc:	d106      	bne.n	80121ec <tcp_output+0x1c>
 80121de:	4b9e      	ldr	r3, [pc, #632]	; (8012458 <tcp_output+0x288>)
 80121e0:	f240 42e1 	movw	r2, #1249	; 0x4e1
 80121e4:	499d      	ldr	r1, [pc, #628]	; (801245c <tcp_output+0x28c>)
 80121e6:	489e      	ldr	r0, [pc, #632]	; (8012460 <tcp_output+0x290>)
 80121e8:	f006 fbf0 	bl	80189cc <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 80121ec:	687b      	ldr	r3, [r7, #4]
 80121ee:	7d1b      	ldrb	r3, [r3, #20]
 80121f0:	2b01      	cmp	r3, #1
 80121f2:	d106      	bne.n	8012202 <tcp_output+0x32>
 80121f4:	4b98      	ldr	r3, [pc, #608]	; (8012458 <tcp_output+0x288>)
 80121f6:	f240 42e3 	movw	r2, #1251	; 0x4e3
 80121fa:	499a      	ldr	r1, [pc, #616]	; (8012464 <tcp_output+0x294>)
 80121fc:	4898      	ldr	r0, [pc, #608]	; (8012460 <tcp_output+0x290>)
 80121fe:	f006 fbe5 	bl	80189cc <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8012202:	4b99      	ldr	r3, [pc, #612]	; (8012468 <tcp_output+0x298>)
 8012204:	681b      	ldr	r3, [r3, #0]
 8012206:	687a      	ldr	r2, [r7, #4]
 8012208:	429a      	cmp	r2, r3
 801220a:	d101      	bne.n	8012210 <tcp_output+0x40>
    return ERR_OK;
 801220c:	2300      	movs	r3, #0
 801220e:	e1ce      	b.n	80125ae <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8012210:	687b      	ldr	r3, [r7, #4]
 8012212:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012216:	687b      	ldr	r3, [r7, #4]
 8012218:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801221c:	4293      	cmp	r3, r2
 801221e:	bf28      	it	cs
 8012220:	4613      	movcs	r3, r2
 8012222:	b29b      	uxth	r3, r3
 8012224:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8012226:	687b      	ldr	r3, [r7, #4]
 8012228:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801222a:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 801222c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801222e:	2b00      	cmp	r3, #0
 8012230:	d10b      	bne.n	801224a <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8012232:	687b      	ldr	r3, [r7, #4]
 8012234:	8b5b      	ldrh	r3, [r3, #26]
 8012236:	f003 0302 	and.w	r3, r3, #2
 801223a:	2b00      	cmp	r3, #0
 801223c:	f000 81aa 	beq.w	8012594 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8012240:	6878      	ldr	r0, [r7, #4]
 8012242:	f000 fdc9 	bl	8012dd8 <tcp_send_empty_ack>
 8012246:	4603      	mov	r3, r0
 8012248:	e1b1      	b.n	80125ae <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 801224a:	6879      	ldr	r1, [r7, #4]
 801224c:	687b      	ldr	r3, [r7, #4]
 801224e:	3304      	adds	r3, #4
 8012250:	461a      	mov	r2, r3
 8012252:	6878      	ldr	r0, [r7, #4]
 8012254:	f7ff fc7c 	bl	8011b50 <tcp_route>
 8012258:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 801225a:	697b      	ldr	r3, [r7, #20]
 801225c:	2b00      	cmp	r3, #0
 801225e:	d102      	bne.n	8012266 <tcp_output+0x96>
    return ERR_RTE;
 8012260:	f06f 0303 	mvn.w	r3, #3
 8012264:	e1a3      	b.n	80125ae <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8012266:	687b      	ldr	r3, [r7, #4]
 8012268:	2b00      	cmp	r3, #0
 801226a:	d003      	beq.n	8012274 <tcp_output+0xa4>
 801226c:	687b      	ldr	r3, [r7, #4]
 801226e:	681b      	ldr	r3, [r3, #0]
 8012270:	2b00      	cmp	r3, #0
 8012272:	d111      	bne.n	8012298 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8012274:	697b      	ldr	r3, [r7, #20]
 8012276:	2b00      	cmp	r3, #0
 8012278:	d002      	beq.n	8012280 <tcp_output+0xb0>
 801227a:	697b      	ldr	r3, [r7, #20]
 801227c:	3304      	adds	r3, #4
 801227e:	e000      	b.n	8012282 <tcp_output+0xb2>
 8012280:	2300      	movs	r3, #0
 8012282:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8012284:	693b      	ldr	r3, [r7, #16]
 8012286:	2b00      	cmp	r3, #0
 8012288:	d102      	bne.n	8012290 <tcp_output+0xc0>
      return ERR_RTE;
 801228a:	f06f 0303 	mvn.w	r3, #3
 801228e:	e18e      	b.n	80125ae <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8012290:	693b      	ldr	r3, [r7, #16]
 8012292:	681a      	ldr	r2, [r3, #0]
 8012294:	687b      	ldr	r3, [r7, #4]
 8012296:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8012298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801229a:	68db      	ldr	r3, [r3, #12]
 801229c:	685b      	ldr	r3, [r3, #4]
 801229e:	4618      	mov	r0, r3
 80122a0:	f7fa f88f 	bl	800c3c2 <lwip_htonl>
 80122a4:	4602      	mov	r2, r0
 80122a6:	687b      	ldr	r3, [r7, #4]
 80122a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80122aa:	1ad3      	subs	r3, r2, r3
 80122ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80122ae:	8912      	ldrh	r2, [r2, #8]
 80122b0:	4413      	add	r3, r2
 80122b2:	69ba      	ldr	r2, [r7, #24]
 80122b4:	429a      	cmp	r2, r3
 80122b6:	d227      	bcs.n	8012308 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 80122b8:	687b      	ldr	r3, [r7, #4]
 80122ba:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80122be:	461a      	mov	r2, r3
 80122c0:	69bb      	ldr	r3, [r7, #24]
 80122c2:	4293      	cmp	r3, r2
 80122c4:	d114      	bne.n	80122f0 <tcp_output+0x120>
 80122c6:	687b      	ldr	r3, [r7, #4]
 80122c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80122ca:	2b00      	cmp	r3, #0
 80122cc:	d110      	bne.n	80122f0 <tcp_output+0x120>
 80122ce:	687b      	ldr	r3, [r7, #4]
 80122d0:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80122d4:	2b00      	cmp	r3, #0
 80122d6:	d10b      	bne.n	80122f0 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 80122d8:	687b      	ldr	r3, [r7, #4]
 80122da:	2200      	movs	r2, #0
 80122dc:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 80122e0:	687b      	ldr	r3, [r7, #4]
 80122e2:	2201      	movs	r2, #1
 80122e4:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 80122e8:	687b      	ldr	r3, [r7, #4]
 80122ea:	2200      	movs	r2, #0
 80122ec:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 80122f0:	687b      	ldr	r3, [r7, #4]
 80122f2:	8b5b      	ldrh	r3, [r3, #26]
 80122f4:	f003 0302 	and.w	r3, r3, #2
 80122f8:	2b00      	cmp	r3, #0
 80122fa:	f000 814d 	beq.w	8012598 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 80122fe:	6878      	ldr	r0, [r7, #4]
 8012300:	f000 fd6a 	bl	8012dd8 <tcp_send_empty_ack>
 8012304:	4603      	mov	r3, r0
 8012306:	e152      	b.n	80125ae <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8012308:	687b      	ldr	r3, [r7, #4]
 801230a:	2200      	movs	r2, #0
 801230c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8012310:	687b      	ldr	r3, [r7, #4]
 8012312:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012314:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8012316:	6a3b      	ldr	r3, [r7, #32]
 8012318:	2b00      	cmp	r3, #0
 801231a:	f000 811c 	beq.w	8012556 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 801231e:	e002      	b.n	8012326 <tcp_output+0x156>
 8012320:	6a3b      	ldr	r3, [r7, #32]
 8012322:	681b      	ldr	r3, [r3, #0]
 8012324:	623b      	str	r3, [r7, #32]
 8012326:	6a3b      	ldr	r3, [r7, #32]
 8012328:	681b      	ldr	r3, [r3, #0]
 801232a:	2b00      	cmp	r3, #0
 801232c:	d1f8      	bne.n	8012320 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 801232e:	e112      	b.n	8012556 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8012330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012332:	68db      	ldr	r3, [r3, #12]
 8012334:	899b      	ldrh	r3, [r3, #12]
 8012336:	b29b      	uxth	r3, r3
 8012338:	4618      	mov	r0, r3
 801233a:	f7fa f82d 	bl	800c398 <lwip_htons>
 801233e:	4603      	mov	r3, r0
 8012340:	b2db      	uxtb	r3, r3
 8012342:	f003 0304 	and.w	r3, r3, #4
 8012346:	2b00      	cmp	r3, #0
 8012348:	d006      	beq.n	8012358 <tcp_output+0x188>
 801234a:	4b43      	ldr	r3, [pc, #268]	; (8012458 <tcp_output+0x288>)
 801234c:	f240 5236 	movw	r2, #1334	; 0x536
 8012350:	4946      	ldr	r1, [pc, #280]	; (801246c <tcp_output+0x29c>)
 8012352:	4843      	ldr	r0, [pc, #268]	; (8012460 <tcp_output+0x290>)
 8012354:	f006 fb3a 	bl	80189cc <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8012358:	687b      	ldr	r3, [r7, #4]
 801235a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801235c:	2b00      	cmp	r3, #0
 801235e:	d01f      	beq.n	80123a0 <tcp_output+0x1d0>
 8012360:	687b      	ldr	r3, [r7, #4]
 8012362:	8b5b      	ldrh	r3, [r3, #26]
 8012364:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8012368:	2b00      	cmp	r3, #0
 801236a:	d119      	bne.n	80123a0 <tcp_output+0x1d0>
 801236c:	687b      	ldr	r3, [r7, #4]
 801236e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012370:	2b00      	cmp	r3, #0
 8012372:	d00b      	beq.n	801238c <tcp_output+0x1bc>
 8012374:	687b      	ldr	r3, [r7, #4]
 8012376:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012378:	681b      	ldr	r3, [r3, #0]
 801237a:	2b00      	cmp	r3, #0
 801237c:	d110      	bne.n	80123a0 <tcp_output+0x1d0>
 801237e:	687b      	ldr	r3, [r7, #4]
 8012380:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012382:	891a      	ldrh	r2, [r3, #8]
 8012384:	687b      	ldr	r3, [r7, #4]
 8012386:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012388:	429a      	cmp	r2, r3
 801238a:	d209      	bcs.n	80123a0 <tcp_output+0x1d0>
 801238c:	687b      	ldr	r3, [r7, #4]
 801238e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8012392:	2b00      	cmp	r3, #0
 8012394:	d004      	beq.n	80123a0 <tcp_output+0x1d0>
 8012396:	687b      	ldr	r3, [r7, #4]
 8012398:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801239c:	2b0f      	cmp	r3, #15
 801239e:	d901      	bls.n	80123a4 <tcp_output+0x1d4>
 80123a0:	2301      	movs	r3, #1
 80123a2:	e000      	b.n	80123a6 <tcp_output+0x1d6>
 80123a4:	2300      	movs	r3, #0
 80123a6:	2b00      	cmp	r3, #0
 80123a8:	d106      	bne.n	80123b8 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 80123aa:	687b      	ldr	r3, [r7, #4]
 80123ac:	8b5b      	ldrh	r3, [r3, #26]
 80123ae:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80123b2:	2b00      	cmp	r3, #0
 80123b4:	f000 80e4 	beq.w	8012580 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 80123b8:	687b      	ldr	r3, [r7, #4]
 80123ba:	7d1b      	ldrb	r3, [r3, #20]
 80123bc:	2b02      	cmp	r3, #2
 80123be:	d00d      	beq.n	80123dc <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 80123c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123c2:	68db      	ldr	r3, [r3, #12]
 80123c4:	899b      	ldrh	r3, [r3, #12]
 80123c6:	b29c      	uxth	r4, r3
 80123c8:	2010      	movs	r0, #16
 80123ca:	f7f9 ffe5 	bl	800c398 <lwip_htons>
 80123ce:	4603      	mov	r3, r0
 80123d0:	461a      	mov	r2, r3
 80123d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123d4:	68db      	ldr	r3, [r3, #12]
 80123d6:	4322      	orrs	r2, r4
 80123d8:	b292      	uxth	r2, r2
 80123da:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 80123dc:	697a      	ldr	r2, [r7, #20]
 80123de:	6879      	ldr	r1, [r7, #4]
 80123e0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80123e2:	f000 f909 	bl	80125f8 <tcp_output_segment>
 80123e6:	4603      	mov	r3, r0
 80123e8:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 80123ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80123ee:	2b00      	cmp	r3, #0
 80123f0:	d009      	beq.n	8012406 <tcp_output+0x236>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80123f2:	687b      	ldr	r3, [r7, #4]
 80123f4:	8b5b      	ldrh	r3, [r3, #26]
 80123f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80123fa:	b29a      	uxth	r2, r3
 80123fc:	687b      	ldr	r3, [r7, #4]
 80123fe:	835a      	strh	r2, [r3, #26]
      return err;
 8012400:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012404:	e0d3      	b.n	80125ae <tcp_output+0x3de>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8012406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012408:	681a      	ldr	r2, [r3, #0]
 801240a:	687b      	ldr	r3, [r7, #4]
 801240c:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 801240e:	687b      	ldr	r3, [r7, #4]
 8012410:	7d1b      	ldrb	r3, [r3, #20]
 8012412:	2b02      	cmp	r3, #2
 8012414:	d006      	beq.n	8012424 <tcp_output+0x254>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8012416:	687b      	ldr	r3, [r7, #4]
 8012418:	8b5b      	ldrh	r3, [r3, #26]
 801241a:	f023 0303 	bic.w	r3, r3, #3
 801241e:	b29a      	uxth	r2, r3
 8012420:	687b      	ldr	r3, [r7, #4]
 8012422:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8012424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012426:	68db      	ldr	r3, [r3, #12]
 8012428:	685b      	ldr	r3, [r3, #4]
 801242a:	4618      	mov	r0, r3
 801242c:	f7f9 ffc9 	bl	800c3c2 <lwip_htonl>
 8012430:	4604      	mov	r4, r0
 8012432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012434:	891b      	ldrh	r3, [r3, #8]
 8012436:	461d      	mov	r5, r3
 8012438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801243a:	68db      	ldr	r3, [r3, #12]
 801243c:	899b      	ldrh	r3, [r3, #12]
 801243e:	b29b      	uxth	r3, r3
 8012440:	4618      	mov	r0, r3
 8012442:	f7f9 ffa9 	bl	800c398 <lwip_htons>
 8012446:	4603      	mov	r3, r0
 8012448:	b2db      	uxtb	r3, r3
 801244a:	f003 0303 	and.w	r3, r3, #3
 801244e:	2b00      	cmp	r3, #0
 8012450:	d00e      	beq.n	8012470 <tcp_output+0x2a0>
 8012452:	2301      	movs	r3, #1
 8012454:	e00d      	b.n	8012472 <tcp_output+0x2a2>
 8012456:	bf00      	nop
 8012458:	0801f6b8 	.word	0x0801f6b8
 801245c:	0801fbfc 	.word	0x0801fbfc
 8012460:	0801f70c 	.word	0x0801f70c
 8012464:	0801fc14 	.word	0x0801fc14
 8012468:	20007164 	.word	0x20007164
 801246c:	0801fc3c 	.word	0x0801fc3c
 8012470:	2300      	movs	r3, #0
 8012472:	442b      	add	r3, r5
 8012474:	4423      	add	r3, r4
 8012476:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8012478:	687b      	ldr	r3, [r7, #4]
 801247a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801247c:	68bb      	ldr	r3, [r7, #8]
 801247e:	1ad3      	subs	r3, r2, r3
 8012480:	2b00      	cmp	r3, #0
 8012482:	da02      	bge.n	801248a <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8012484:	687b      	ldr	r3, [r7, #4]
 8012486:	68ba      	ldr	r2, [r7, #8]
 8012488:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 801248a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801248c:	891b      	ldrh	r3, [r3, #8]
 801248e:	461c      	mov	r4, r3
 8012490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012492:	68db      	ldr	r3, [r3, #12]
 8012494:	899b      	ldrh	r3, [r3, #12]
 8012496:	b29b      	uxth	r3, r3
 8012498:	4618      	mov	r0, r3
 801249a:	f7f9 ff7d 	bl	800c398 <lwip_htons>
 801249e:	4603      	mov	r3, r0
 80124a0:	b2db      	uxtb	r3, r3
 80124a2:	f003 0303 	and.w	r3, r3, #3
 80124a6:	2b00      	cmp	r3, #0
 80124a8:	d001      	beq.n	80124ae <tcp_output+0x2de>
 80124aa:	2301      	movs	r3, #1
 80124ac:	e000      	b.n	80124b0 <tcp_output+0x2e0>
 80124ae:	2300      	movs	r3, #0
 80124b0:	4423      	add	r3, r4
 80124b2:	2b00      	cmp	r3, #0
 80124b4:	d049      	beq.n	801254a <tcp_output+0x37a>
      seg->next = NULL;
 80124b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124b8:	2200      	movs	r2, #0
 80124ba:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 80124bc:	687b      	ldr	r3, [r7, #4]
 80124be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80124c0:	2b00      	cmp	r3, #0
 80124c2:	d105      	bne.n	80124d0 <tcp_output+0x300>
        pcb->unacked = seg;
 80124c4:	687b      	ldr	r3, [r7, #4]
 80124c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80124c8:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 80124ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124cc:	623b      	str	r3, [r7, #32]
 80124ce:	e03f      	b.n	8012550 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 80124d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124d2:	68db      	ldr	r3, [r3, #12]
 80124d4:	685b      	ldr	r3, [r3, #4]
 80124d6:	4618      	mov	r0, r3
 80124d8:	f7f9 ff73 	bl	800c3c2 <lwip_htonl>
 80124dc:	4604      	mov	r4, r0
 80124de:	6a3b      	ldr	r3, [r7, #32]
 80124e0:	68db      	ldr	r3, [r3, #12]
 80124e2:	685b      	ldr	r3, [r3, #4]
 80124e4:	4618      	mov	r0, r3
 80124e6:	f7f9 ff6c 	bl	800c3c2 <lwip_htonl>
 80124ea:	4603      	mov	r3, r0
 80124ec:	1ae3      	subs	r3, r4, r3
 80124ee:	2b00      	cmp	r3, #0
 80124f0:	da24      	bge.n	801253c <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 80124f2:	687b      	ldr	r3, [r7, #4]
 80124f4:	3370      	adds	r3, #112	; 0x70
 80124f6:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80124f8:	e002      	b.n	8012500 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 80124fa:	69fb      	ldr	r3, [r7, #28]
 80124fc:	681b      	ldr	r3, [r3, #0]
 80124fe:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8012500:	69fb      	ldr	r3, [r7, #28]
 8012502:	681b      	ldr	r3, [r3, #0]
 8012504:	2b00      	cmp	r3, #0
 8012506:	d011      	beq.n	801252c <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8012508:	69fb      	ldr	r3, [r7, #28]
 801250a:	681b      	ldr	r3, [r3, #0]
 801250c:	68db      	ldr	r3, [r3, #12]
 801250e:	685b      	ldr	r3, [r3, #4]
 8012510:	4618      	mov	r0, r3
 8012512:	f7f9 ff56 	bl	800c3c2 <lwip_htonl>
 8012516:	4604      	mov	r4, r0
 8012518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801251a:	68db      	ldr	r3, [r3, #12]
 801251c:	685b      	ldr	r3, [r3, #4]
 801251e:	4618      	mov	r0, r3
 8012520:	f7f9 ff4f 	bl	800c3c2 <lwip_htonl>
 8012524:	4603      	mov	r3, r0
 8012526:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8012528:	2b00      	cmp	r3, #0
 801252a:	dbe6      	blt.n	80124fa <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 801252c:	69fb      	ldr	r3, [r7, #28]
 801252e:	681a      	ldr	r2, [r3, #0]
 8012530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012532:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8012534:	69fb      	ldr	r3, [r7, #28]
 8012536:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012538:	601a      	str	r2, [r3, #0]
 801253a:	e009      	b.n	8012550 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 801253c:	6a3b      	ldr	r3, [r7, #32]
 801253e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012540:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8012542:	6a3b      	ldr	r3, [r7, #32]
 8012544:	681b      	ldr	r3, [r3, #0]
 8012546:	623b      	str	r3, [r7, #32]
 8012548:	e002      	b.n	8012550 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 801254a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801254c:	f7fc fc43 	bl	800edd6 <tcp_seg_free>
    }
    seg = pcb->unsent;
 8012550:	687b      	ldr	r3, [r7, #4]
 8012552:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012554:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8012556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012558:	2b00      	cmp	r3, #0
 801255a:	d012      	beq.n	8012582 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 801255c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801255e:	68db      	ldr	r3, [r3, #12]
 8012560:	685b      	ldr	r3, [r3, #4]
 8012562:	4618      	mov	r0, r3
 8012564:	f7f9 ff2d 	bl	800c3c2 <lwip_htonl>
 8012568:	4602      	mov	r2, r0
 801256a:	687b      	ldr	r3, [r7, #4]
 801256c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801256e:	1ad3      	subs	r3, r2, r3
 8012570:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012572:	8912      	ldrh	r2, [r2, #8]
 8012574:	4413      	add	r3, r2
  while (seg != NULL &&
 8012576:	69ba      	ldr	r2, [r7, #24]
 8012578:	429a      	cmp	r2, r3
 801257a:	f4bf aed9 	bcs.w	8012330 <tcp_output+0x160>
 801257e:	e000      	b.n	8012582 <tcp_output+0x3b2>
      break;
 8012580:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8012582:	687b      	ldr	r3, [r7, #4]
 8012584:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012586:	2b00      	cmp	r3, #0
 8012588:	d108      	bne.n	801259c <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801258a:	687b      	ldr	r3, [r7, #4]
 801258c:	2200      	movs	r2, #0
 801258e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8012592:	e004      	b.n	801259e <tcp_output+0x3ce>
    goto output_done;
 8012594:	bf00      	nop
 8012596:	e002      	b.n	801259e <tcp_output+0x3ce>
    goto output_done;
 8012598:	bf00      	nop
 801259a:	e000      	b.n	801259e <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 801259c:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801259e:	687b      	ldr	r3, [r7, #4]
 80125a0:	8b5b      	ldrh	r3, [r3, #26]
 80125a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80125a6:	b29a      	uxth	r2, r3
 80125a8:	687b      	ldr	r3, [r7, #4]
 80125aa:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 80125ac:	2300      	movs	r3, #0
}
 80125ae:	4618      	mov	r0, r3
 80125b0:	3728      	adds	r7, #40	; 0x28
 80125b2:	46bd      	mov	sp, r7
 80125b4:	bdb0      	pop	{r4, r5, r7, pc}
 80125b6:	bf00      	nop

080125b8 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 80125b8:	b580      	push	{r7, lr}
 80125ba:	b082      	sub	sp, #8
 80125bc:	af00      	add	r7, sp, #0
 80125be:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 80125c0:	687b      	ldr	r3, [r7, #4]
 80125c2:	2b00      	cmp	r3, #0
 80125c4:	d106      	bne.n	80125d4 <tcp_output_segment_busy+0x1c>
 80125c6:	4b09      	ldr	r3, [pc, #36]	; (80125ec <tcp_output_segment_busy+0x34>)
 80125c8:	f240 529a 	movw	r2, #1434	; 0x59a
 80125cc:	4908      	ldr	r1, [pc, #32]	; (80125f0 <tcp_output_segment_busy+0x38>)
 80125ce:	4809      	ldr	r0, [pc, #36]	; (80125f4 <tcp_output_segment_busy+0x3c>)
 80125d0:	f006 f9fc 	bl	80189cc <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 80125d4:	687b      	ldr	r3, [r7, #4]
 80125d6:	685b      	ldr	r3, [r3, #4]
 80125d8:	7b9b      	ldrb	r3, [r3, #14]
 80125da:	2b01      	cmp	r3, #1
 80125dc:	d001      	beq.n	80125e2 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 80125de:	2301      	movs	r3, #1
 80125e0:	e000      	b.n	80125e4 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 80125e2:	2300      	movs	r3, #0
}
 80125e4:	4618      	mov	r0, r3
 80125e6:	3708      	adds	r7, #8
 80125e8:	46bd      	mov	sp, r7
 80125ea:	bd80      	pop	{r7, pc}
 80125ec:	0801f6b8 	.word	0x0801f6b8
 80125f0:	0801fc54 	.word	0x0801fc54
 80125f4:	0801f70c 	.word	0x0801f70c

080125f8 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 80125f8:	b5b0      	push	{r4, r5, r7, lr}
 80125fa:	b08c      	sub	sp, #48	; 0x30
 80125fc:	af04      	add	r7, sp, #16
 80125fe:	60f8      	str	r0, [r7, #12]
 8012600:	60b9      	str	r1, [r7, #8]
 8012602:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8012604:	68fb      	ldr	r3, [r7, #12]
 8012606:	2b00      	cmp	r3, #0
 8012608:	d106      	bne.n	8012618 <tcp_output_segment+0x20>
 801260a:	4b63      	ldr	r3, [pc, #396]	; (8012798 <tcp_output_segment+0x1a0>)
 801260c:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8012610:	4962      	ldr	r1, [pc, #392]	; (801279c <tcp_output_segment+0x1a4>)
 8012612:	4863      	ldr	r0, [pc, #396]	; (80127a0 <tcp_output_segment+0x1a8>)
 8012614:	f006 f9da 	bl	80189cc <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8012618:	68bb      	ldr	r3, [r7, #8]
 801261a:	2b00      	cmp	r3, #0
 801261c:	d106      	bne.n	801262c <tcp_output_segment+0x34>
 801261e:	4b5e      	ldr	r3, [pc, #376]	; (8012798 <tcp_output_segment+0x1a0>)
 8012620:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8012624:	495f      	ldr	r1, [pc, #380]	; (80127a4 <tcp_output_segment+0x1ac>)
 8012626:	485e      	ldr	r0, [pc, #376]	; (80127a0 <tcp_output_segment+0x1a8>)
 8012628:	f006 f9d0 	bl	80189cc <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 801262c:	687b      	ldr	r3, [r7, #4]
 801262e:	2b00      	cmp	r3, #0
 8012630:	d106      	bne.n	8012640 <tcp_output_segment+0x48>
 8012632:	4b59      	ldr	r3, [pc, #356]	; (8012798 <tcp_output_segment+0x1a0>)
 8012634:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8012638:	495b      	ldr	r1, [pc, #364]	; (80127a8 <tcp_output_segment+0x1b0>)
 801263a:	4859      	ldr	r0, [pc, #356]	; (80127a0 <tcp_output_segment+0x1a8>)
 801263c:	f006 f9c6 	bl	80189cc <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8012640:	68f8      	ldr	r0, [r7, #12]
 8012642:	f7ff ffb9 	bl	80125b8 <tcp_output_segment_busy>
 8012646:	4603      	mov	r3, r0
 8012648:	2b00      	cmp	r3, #0
 801264a:	d001      	beq.n	8012650 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 801264c:	2300      	movs	r3, #0
 801264e:	e09f      	b.n	8012790 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8012650:	68bb      	ldr	r3, [r7, #8]
 8012652:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012654:	68fb      	ldr	r3, [r7, #12]
 8012656:	68dc      	ldr	r4, [r3, #12]
 8012658:	4610      	mov	r0, r2
 801265a:	f7f9 feb2 	bl	800c3c2 <lwip_htonl>
 801265e:	4603      	mov	r3, r0
 8012660:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8012662:	68bb      	ldr	r3, [r7, #8]
 8012664:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8012666:	68fb      	ldr	r3, [r7, #12]
 8012668:	68dc      	ldr	r4, [r3, #12]
 801266a:	4610      	mov	r0, r2
 801266c:	f7f9 fe94 	bl	800c398 <lwip_htons>
 8012670:	4603      	mov	r3, r0
 8012672:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8012674:	68bb      	ldr	r3, [r7, #8]
 8012676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012678:	68ba      	ldr	r2, [r7, #8]
 801267a:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801267c:	441a      	add	r2, r3
 801267e:	68bb      	ldr	r3, [r7, #8]
 8012680:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8012682:	68fb      	ldr	r3, [r7, #12]
 8012684:	68db      	ldr	r3, [r3, #12]
 8012686:	3314      	adds	r3, #20
 8012688:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 801268a:	68fb      	ldr	r3, [r7, #12]
 801268c:	7a9b      	ldrb	r3, [r3, #10]
 801268e:	f003 0301 	and.w	r3, r3, #1
 8012692:	2b00      	cmp	r3, #0
 8012694:	d015      	beq.n	80126c2 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8012696:	68bb      	ldr	r3, [r7, #8]
 8012698:	3304      	adds	r3, #4
 801269a:	461a      	mov	r2, r3
 801269c:	6879      	ldr	r1, [r7, #4]
 801269e:	f44f 70e6 	mov.w	r0, #460	; 0x1cc
 80126a2:	f7fc fe8f 	bl	800f3c4 <tcp_eff_send_mss_netif>
 80126a6:	4603      	mov	r3, r0
 80126a8:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 80126aa:	8b7b      	ldrh	r3, [r7, #26]
 80126ac:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 80126b0:	4618      	mov	r0, r3
 80126b2:	f7f9 fe86 	bl	800c3c2 <lwip_htonl>
 80126b6:	4602      	mov	r2, r0
 80126b8:	69fb      	ldr	r3, [r7, #28]
 80126ba:	601a      	str	r2, [r3, #0]
    opts += 1;
 80126bc:	69fb      	ldr	r3, [r7, #28]
 80126be:	3304      	adds	r3, #4
 80126c0:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 80126c2:	68bb      	ldr	r3, [r7, #8]
 80126c4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80126c8:	2b00      	cmp	r3, #0
 80126ca:	da02      	bge.n	80126d2 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 80126cc:	68bb      	ldr	r3, [r7, #8]
 80126ce:	2200      	movs	r2, #0
 80126d0:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 80126d2:	68bb      	ldr	r3, [r7, #8]
 80126d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80126d6:	2b00      	cmp	r3, #0
 80126d8:	d10c      	bne.n	80126f4 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 80126da:	4b34      	ldr	r3, [pc, #208]	; (80127ac <tcp_output_segment+0x1b4>)
 80126dc:	681a      	ldr	r2, [r3, #0]
 80126de:	68bb      	ldr	r3, [r7, #8]
 80126e0:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 80126e2:	68fb      	ldr	r3, [r7, #12]
 80126e4:	68db      	ldr	r3, [r3, #12]
 80126e6:	685b      	ldr	r3, [r3, #4]
 80126e8:	4618      	mov	r0, r3
 80126ea:	f7f9 fe6a 	bl	800c3c2 <lwip_htonl>
 80126ee:	4602      	mov	r2, r0
 80126f0:	68bb      	ldr	r3, [r7, #8]
 80126f2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 80126f4:	68fb      	ldr	r3, [r7, #12]
 80126f6:	68da      	ldr	r2, [r3, #12]
 80126f8:	68fb      	ldr	r3, [r7, #12]
 80126fa:	685b      	ldr	r3, [r3, #4]
 80126fc:	685b      	ldr	r3, [r3, #4]
 80126fe:	1ad3      	subs	r3, r2, r3
 8012700:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8012702:	68fb      	ldr	r3, [r7, #12]
 8012704:	685b      	ldr	r3, [r3, #4]
 8012706:	8959      	ldrh	r1, [r3, #10]
 8012708:	68fb      	ldr	r3, [r7, #12]
 801270a:	685b      	ldr	r3, [r3, #4]
 801270c:	8b3a      	ldrh	r2, [r7, #24]
 801270e:	1a8a      	subs	r2, r1, r2
 8012710:	b292      	uxth	r2, r2
 8012712:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8012714:	68fb      	ldr	r3, [r7, #12]
 8012716:	685b      	ldr	r3, [r3, #4]
 8012718:	8919      	ldrh	r1, [r3, #8]
 801271a:	68fb      	ldr	r3, [r7, #12]
 801271c:	685b      	ldr	r3, [r3, #4]
 801271e:	8b3a      	ldrh	r2, [r7, #24]
 8012720:	1a8a      	subs	r2, r1, r2
 8012722:	b292      	uxth	r2, r2
 8012724:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8012726:	68fb      	ldr	r3, [r7, #12]
 8012728:	685b      	ldr	r3, [r3, #4]
 801272a:	68fa      	ldr	r2, [r7, #12]
 801272c:	68d2      	ldr	r2, [r2, #12]
 801272e:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8012730:	68fb      	ldr	r3, [r7, #12]
 8012732:	68db      	ldr	r3, [r3, #12]
 8012734:	2200      	movs	r2, #0
 8012736:	741a      	strb	r2, [r3, #16]
 8012738:	2200      	movs	r2, #0
 801273a:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 801273c:	68fb      	ldr	r3, [r7, #12]
 801273e:	68db      	ldr	r3, [r3, #12]
 8012740:	f103 0214 	add.w	r2, r3, #20
 8012744:	68fb      	ldr	r3, [r7, #12]
 8012746:	7a9b      	ldrb	r3, [r3, #10]
 8012748:	009b      	lsls	r3, r3, #2
 801274a:	f003 0304 	and.w	r3, r3, #4
 801274e:	4413      	add	r3, r2
 8012750:	69fa      	ldr	r2, [r7, #28]
 8012752:	429a      	cmp	r2, r3
 8012754:	d006      	beq.n	8012764 <tcp_output_segment+0x16c>
 8012756:	4b10      	ldr	r3, [pc, #64]	; (8012798 <tcp_output_segment+0x1a0>)
 8012758:	f240 621c 	movw	r2, #1564	; 0x61c
 801275c:	4914      	ldr	r1, [pc, #80]	; (80127b0 <tcp_output_segment+0x1b8>)
 801275e:	4810      	ldr	r0, [pc, #64]	; (80127a0 <tcp_output_segment+0x1a8>)
 8012760:	f006 f934 	bl	80189cc <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8012764:	68fb      	ldr	r3, [r7, #12]
 8012766:	6858      	ldr	r0, [r3, #4]
 8012768:	68b9      	ldr	r1, [r7, #8]
 801276a:	68bb      	ldr	r3, [r7, #8]
 801276c:	1d1c      	adds	r4, r3, #4
 801276e:	68bb      	ldr	r3, [r7, #8]
 8012770:	7add      	ldrb	r5, [r3, #11]
 8012772:	68bb      	ldr	r3, [r7, #8]
 8012774:	7a9b      	ldrb	r3, [r3, #10]
 8012776:	687a      	ldr	r2, [r7, #4]
 8012778:	9202      	str	r2, [sp, #8]
 801277a:	2206      	movs	r2, #6
 801277c:	9201      	str	r2, [sp, #4]
 801277e:	9300      	str	r3, [sp, #0]
 8012780:	462b      	mov	r3, r5
 8012782:	4622      	mov	r2, r4
 8012784:	f004 fb6c 	bl	8016e60 <ip4_output_if>
 8012788:	4603      	mov	r3, r0
 801278a:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 801278c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012790:	4618      	mov	r0, r3
 8012792:	3720      	adds	r7, #32
 8012794:	46bd      	mov	sp, r7
 8012796:	bdb0      	pop	{r4, r5, r7, pc}
 8012798:	0801f6b8 	.word	0x0801f6b8
 801279c:	0801fc7c 	.word	0x0801fc7c
 80127a0:	0801f70c 	.word	0x0801f70c
 80127a4:	0801fc9c 	.word	0x0801fc9c
 80127a8:	0801fcbc 	.word	0x0801fcbc
 80127ac:	20007154 	.word	0x20007154
 80127b0:	0801fce0 	.word	0x0801fce0

080127b4 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 80127b4:	b5b0      	push	{r4, r5, r7, lr}
 80127b6:	b084      	sub	sp, #16
 80127b8:	af00      	add	r7, sp, #0
 80127ba:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 80127bc:	687b      	ldr	r3, [r7, #4]
 80127be:	2b00      	cmp	r3, #0
 80127c0:	d106      	bne.n	80127d0 <tcp_rexmit_rto_prepare+0x1c>
 80127c2:	4b31      	ldr	r3, [pc, #196]	; (8012888 <tcp_rexmit_rto_prepare+0xd4>)
 80127c4:	f240 6263 	movw	r2, #1635	; 0x663
 80127c8:	4930      	ldr	r1, [pc, #192]	; (801288c <tcp_rexmit_rto_prepare+0xd8>)
 80127ca:	4831      	ldr	r0, [pc, #196]	; (8012890 <tcp_rexmit_rto_prepare+0xdc>)
 80127cc:	f006 f8fe 	bl	80189cc <iprintf>

  if (pcb->unacked == NULL) {
 80127d0:	687b      	ldr	r3, [r7, #4]
 80127d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80127d4:	2b00      	cmp	r3, #0
 80127d6:	d102      	bne.n	80127de <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 80127d8:	f06f 0305 	mvn.w	r3, #5
 80127dc:	e050      	b.n	8012880 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80127de:	687b      	ldr	r3, [r7, #4]
 80127e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80127e2:	60fb      	str	r3, [r7, #12]
 80127e4:	e00b      	b.n	80127fe <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 80127e6:	68f8      	ldr	r0, [r7, #12]
 80127e8:	f7ff fee6 	bl	80125b8 <tcp_output_segment_busy>
 80127ec:	4603      	mov	r3, r0
 80127ee:	2b00      	cmp	r3, #0
 80127f0:	d002      	beq.n	80127f8 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 80127f2:	f06f 0305 	mvn.w	r3, #5
 80127f6:	e043      	b.n	8012880 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80127f8:	68fb      	ldr	r3, [r7, #12]
 80127fa:	681b      	ldr	r3, [r3, #0]
 80127fc:	60fb      	str	r3, [r7, #12]
 80127fe:	68fb      	ldr	r3, [r7, #12]
 8012800:	681b      	ldr	r3, [r3, #0]
 8012802:	2b00      	cmp	r3, #0
 8012804:	d1ef      	bne.n	80127e6 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8012806:	68f8      	ldr	r0, [r7, #12]
 8012808:	f7ff fed6 	bl	80125b8 <tcp_output_segment_busy>
 801280c:	4603      	mov	r3, r0
 801280e:	2b00      	cmp	r3, #0
 8012810:	d002      	beq.n	8012818 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8012812:	f06f 0305 	mvn.w	r3, #5
 8012816:	e033      	b.n	8012880 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8012818:	687b      	ldr	r3, [r7, #4]
 801281a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 801281c:	68fb      	ldr	r3, [r7, #12]
 801281e:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8012820:	687b      	ldr	r3, [r7, #4]
 8012822:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8012824:	687b      	ldr	r3, [r7, #4]
 8012826:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8012828:	687b      	ldr	r3, [r7, #4]
 801282a:	2200      	movs	r2, #0
 801282c:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 801282e:	687b      	ldr	r3, [r7, #4]
 8012830:	8b5b      	ldrh	r3, [r3, #26]
 8012832:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8012836:	b29a      	uxth	r2, r3
 8012838:	687b      	ldr	r3, [r7, #4]
 801283a:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801283c:	68fb      	ldr	r3, [r7, #12]
 801283e:	68db      	ldr	r3, [r3, #12]
 8012840:	685b      	ldr	r3, [r3, #4]
 8012842:	4618      	mov	r0, r3
 8012844:	f7f9 fdbd 	bl	800c3c2 <lwip_htonl>
 8012848:	4604      	mov	r4, r0
 801284a:	68fb      	ldr	r3, [r7, #12]
 801284c:	891b      	ldrh	r3, [r3, #8]
 801284e:	461d      	mov	r5, r3
 8012850:	68fb      	ldr	r3, [r7, #12]
 8012852:	68db      	ldr	r3, [r3, #12]
 8012854:	899b      	ldrh	r3, [r3, #12]
 8012856:	b29b      	uxth	r3, r3
 8012858:	4618      	mov	r0, r3
 801285a:	f7f9 fd9d 	bl	800c398 <lwip_htons>
 801285e:	4603      	mov	r3, r0
 8012860:	b2db      	uxtb	r3, r3
 8012862:	f003 0303 	and.w	r3, r3, #3
 8012866:	2b00      	cmp	r3, #0
 8012868:	d001      	beq.n	801286e <tcp_rexmit_rto_prepare+0xba>
 801286a:	2301      	movs	r3, #1
 801286c:	e000      	b.n	8012870 <tcp_rexmit_rto_prepare+0xbc>
 801286e:	2300      	movs	r3, #0
 8012870:	442b      	add	r3, r5
 8012872:	18e2      	adds	r2, r4, r3
 8012874:	687b      	ldr	r3, [r7, #4]
 8012876:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8012878:	687b      	ldr	r3, [r7, #4]
 801287a:	2200      	movs	r2, #0
 801287c:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 801287e:	2300      	movs	r3, #0
}
 8012880:	4618      	mov	r0, r3
 8012882:	3710      	adds	r7, #16
 8012884:	46bd      	mov	sp, r7
 8012886:	bdb0      	pop	{r4, r5, r7, pc}
 8012888:	0801f6b8 	.word	0x0801f6b8
 801288c:	0801fcf4 	.word	0x0801fcf4
 8012890:	0801f70c 	.word	0x0801f70c

08012894 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8012894:	b580      	push	{r7, lr}
 8012896:	b082      	sub	sp, #8
 8012898:	af00      	add	r7, sp, #0
 801289a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 801289c:	687b      	ldr	r3, [r7, #4]
 801289e:	2b00      	cmp	r3, #0
 80128a0:	d106      	bne.n	80128b0 <tcp_rexmit_rto_commit+0x1c>
 80128a2:	4b0d      	ldr	r3, [pc, #52]	; (80128d8 <tcp_rexmit_rto_commit+0x44>)
 80128a4:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 80128a8:	490c      	ldr	r1, [pc, #48]	; (80128dc <tcp_rexmit_rto_commit+0x48>)
 80128aa:	480d      	ldr	r0, [pc, #52]	; (80128e0 <tcp_rexmit_rto_commit+0x4c>)
 80128ac:	f006 f88e 	bl	80189cc <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 80128b0:	687b      	ldr	r3, [r7, #4]
 80128b2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80128b6:	2bff      	cmp	r3, #255	; 0xff
 80128b8:	d007      	beq.n	80128ca <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 80128ba:	687b      	ldr	r3, [r7, #4]
 80128bc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80128c0:	3301      	adds	r3, #1
 80128c2:	b2da      	uxtb	r2, r3
 80128c4:	687b      	ldr	r3, [r7, #4]
 80128c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 80128ca:	6878      	ldr	r0, [r7, #4]
 80128cc:	f7ff fc80 	bl	80121d0 <tcp_output>
}
 80128d0:	bf00      	nop
 80128d2:	3708      	adds	r7, #8
 80128d4:	46bd      	mov	sp, r7
 80128d6:	bd80      	pop	{r7, pc}
 80128d8:	0801f6b8 	.word	0x0801f6b8
 80128dc:	0801fd18 	.word	0x0801fd18
 80128e0:	0801f70c 	.word	0x0801f70c

080128e4 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 80128e4:	b580      	push	{r7, lr}
 80128e6:	b082      	sub	sp, #8
 80128e8:	af00      	add	r7, sp, #0
 80128ea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 80128ec:	687b      	ldr	r3, [r7, #4]
 80128ee:	2b00      	cmp	r3, #0
 80128f0:	d106      	bne.n	8012900 <tcp_rexmit_rto+0x1c>
 80128f2:	4b0a      	ldr	r3, [pc, #40]	; (801291c <tcp_rexmit_rto+0x38>)
 80128f4:	f240 62ad 	movw	r2, #1709	; 0x6ad
 80128f8:	4909      	ldr	r1, [pc, #36]	; (8012920 <tcp_rexmit_rto+0x3c>)
 80128fa:	480a      	ldr	r0, [pc, #40]	; (8012924 <tcp_rexmit_rto+0x40>)
 80128fc:	f006 f866 	bl	80189cc <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8012900:	6878      	ldr	r0, [r7, #4]
 8012902:	f7ff ff57 	bl	80127b4 <tcp_rexmit_rto_prepare>
 8012906:	4603      	mov	r3, r0
 8012908:	2b00      	cmp	r3, #0
 801290a:	d102      	bne.n	8012912 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 801290c:	6878      	ldr	r0, [r7, #4]
 801290e:	f7ff ffc1 	bl	8012894 <tcp_rexmit_rto_commit>
  }
}
 8012912:	bf00      	nop
 8012914:	3708      	adds	r7, #8
 8012916:	46bd      	mov	sp, r7
 8012918:	bd80      	pop	{r7, pc}
 801291a:	bf00      	nop
 801291c:	0801f6b8 	.word	0x0801f6b8
 8012920:	0801fd3c 	.word	0x0801fd3c
 8012924:	0801f70c 	.word	0x0801f70c

08012928 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8012928:	b590      	push	{r4, r7, lr}
 801292a:	b085      	sub	sp, #20
 801292c:	af00      	add	r7, sp, #0
 801292e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8012930:	687b      	ldr	r3, [r7, #4]
 8012932:	2b00      	cmp	r3, #0
 8012934:	d106      	bne.n	8012944 <tcp_rexmit+0x1c>
 8012936:	4b2f      	ldr	r3, [pc, #188]	; (80129f4 <tcp_rexmit+0xcc>)
 8012938:	f240 62c1 	movw	r2, #1729	; 0x6c1
 801293c:	492e      	ldr	r1, [pc, #184]	; (80129f8 <tcp_rexmit+0xd0>)
 801293e:	482f      	ldr	r0, [pc, #188]	; (80129fc <tcp_rexmit+0xd4>)
 8012940:	f006 f844 	bl	80189cc <iprintf>

  if (pcb->unacked == NULL) {
 8012944:	687b      	ldr	r3, [r7, #4]
 8012946:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012948:	2b00      	cmp	r3, #0
 801294a:	d102      	bne.n	8012952 <tcp_rexmit+0x2a>
    return ERR_VAL;
 801294c:	f06f 0305 	mvn.w	r3, #5
 8012950:	e04c      	b.n	80129ec <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8012952:	687b      	ldr	r3, [r7, #4]
 8012954:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012956:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8012958:	68b8      	ldr	r0, [r7, #8]
 801295a:	f7ff fe2d 	bl	80125b8 <tcp_output_segment_busy>
 801295e:	4603      	mov	r3, r0
 8012960:	2b00      	cmp	r3, #0
 8012962:	d002      	beq.n	801296a <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8012964:	f06f 0305 	mvn.w	r3, #5
 8012968:	e040      	b.n	80129ec <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 801296a:	68bb      	ldr	r3, [r7, #8]
 801296c:	681a      	ldr	r2, [r3, #0]
 801296e:	687b      	ldr	r3, [r7, #4]
 8012970:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 8012972:	687b      	ldr	r3, [r7, #4]
 8012974:	336c      	adds	r3, #108	; 0x6c
 8012976:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8012978:	e002      	b.n	8012980 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 801297a:	68fb      	ldr	r3, [r7, #12]
 801297c:	681b      	ldr	r3, [r3, #0]
 801297e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8012980:	68fb      	ldr	r3, [r7, #12]
 8012982:	681b      	ldr	r3, [r3, #0]
 8012984:	2b00      	cmp	r3, #0
 8012986:	d011      	beq.n	80129ac <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8012988:	68fb      	ldr	r3, [r7, #12]
 801298a:	681b      	ldr	r3, [r3, #0]
 801298c:	68db      	ldr	r3, [r3, #12]
 801298e:	685b      	ldr	r3, [r3, #4]
 8012990:	4618      	mov	r0, r3
 8012992:	f7f9 fd16 	bl	800c3c2 <lwip_htonl>
 8012996:	4604      	mov	r4, r0
 8012998:	68bb      	ldr	r3, [r7, #8]
 801299a:	68db      	ldr	r3, [r3, #12]
 801299c:	685b      	ldr	r3, [r3, #4]
 801299e:	4618      	mov	r0, r3
 80129a0:	f7f9 fd0f 	bl	800c3c2 <lwip_htonl>
 80129a4:	4603      	mov	r3, r0
 80129a6:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 80129a8:	2b00      	cmp	r3, #0
 80129aa:	dbe6      	blt.n	801297a <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 80129ac:	68fb      	ldr	r3, [r7, #12]
 80129ae:	681a      	ldr	r2, [r3, #0]
 80129b0:	68bb      	ldr	r3, [r7, #8]
 80129b2:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 80129b4:	68fb      	ldr	r3, [r7, #12]
 80129b6:	68ba      	ldr	r2, [r7, #8]
 80129b8:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 80129ba:	68bb      	ldr	r3, [r7, #8]
 80129bc:	681b      	ldr	r3, [r3, #0]
 80129be:	2b00      	cmp	r3, #0
 80129c0:	d103      	bne.n	80129ca <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80129c2:	687b      	ldr	r3, [r7, #4]
 80129c4:	2200      	movs	r2, #0
 80129c6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 80129ca:	687b      	ldr	r3, [r7, #4]
 80129cc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80129d0:	2bff      	cmp	r3, #255	; 0xff
 80129d2:	d007      	beq.n	80129e4 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 80129d4:	687b      	ldr	r3, [r7, #4]
 80129d6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80129da:	3301      	adds	r3, #1
 80129dc:	b2da      	uxtb	r2, r3
 80129de:	687b      	ldr	r3, [r7, #4]
 80129e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 80129e4:	687b      	ldr	r3, [r7, #4]
 80129e6:	2200      	movs	r2, #0
 80129e8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 80129ea:	2300      	movs	r3, #0
}
 80129ec:	4618      	mov	r0, r3
 80129ee:	3714      	adds	r7, #20
 80129f0:	46bd      	mov	sp, r7
 80129f2:	bd90      	pop	{r4, r7, pc}
 80129f4:	0801f6b8 	.word	0x0801f6b8
 80129f8:	0801fd58 	.word	0x0801fd58
 80129fc:	0801f70c 	.word	0x0801f70c

08012a00 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8012a00:	b580      	push	{r7, lr}
 8012a02:	b082      	sub	sp, #8
 8012a04:	af00      	add	r7, sp, #0
 8012a06:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8012a08:	687b      	ldr	r3, [r7, #4]
 8012a0a:	2b00      	cmp	r3, #0
 8012a0c:	d106      	bne.n	8012a1c <tcp_rexmit_fast+0x1c>
 8012a0e:	4b2a      	ldr	r3, [pc, #168]	; (8012ab8 <tcp_rexmit_fast+0xb8>)
 8012a10:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8012a14:	4929      	ldr	r1, [pc, #164]	; (8012abc <tcp_rexmit_fast+0xbc>)
 8012a16:	482a      	ldr	r0, [pc, #168]	; (8012ac0 <tcp_rexmit_fast+0xc0>)
 8012a18:	f005 ffd8 	bl	80189cc <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8012a1c:	687b      	ldr	r3, [r7, #4]
 8012a1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012a20:	2b00      	cmp	r3, #0
 8012a22:	d044      	beq.n	8012aae <tcp_rexmit_fast+0xae>
 8012a24:	687b      	ldr	r3, [r7, #4]
 8012a26:	8b5b      	ldrh	r3, [r3, #26]
 8012a28:	f003 0304 	and.w	r3, r3, #4
 8012a2c:	2b00      	cmp	r3, #0
 8012a2e:	d13e      	bne.n	8012aae <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8012a30:	6878      	ldr	r0, [r7, #4]
 8012a32:	f7ff ff79 	bl	8012928 <tcp_rexmit>
 8012a36:	4603      	mov	r3, r0
 8012a38:	2b00      	cmp	r3, #0
 8012a3a:	d138      	bne.n	8012aae <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8012a3c:	687b      	ldr	r3, [r7, #4]
 8012a3e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8012a42:	687b      	ldr	r3, [r7, #4]
 8012a44:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012a48:	4293      	cmp	r3, r2
 8012a4a:	bf28      	it	cs
 8012a4c:	4613      	movcs	r3, r2
 8012a4e:	b29b      	uxth	r3, r3
 8012a50:	0fda      	lsrs	r2, r3, #31
 8012a52:	4413      	add	r3, r2
 8012a54:	105b      	asrs	r3, r3, #1
 8012a56:	b29a      	uxth	r2, r3
 8012a58:	687b      	ldr	r3, [r7, #4]
 8012a5a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8012a5e:	687b      	ldr	r3, [r7, #4]
 8012a60:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8012a64:	461a      	mov	r2, r3
 8012a66:	687b      	ldr	r3, [r7, #4]
 8012a68:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012a6a:	005b      	lsls	r3, r3, #1
 8012a6c:	429a      	cmp	r2, r3
 8012a6e:	d206      	bcs.n	8012a7e <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8012a70:	687b      	ldr	r3, [r7, #4]
 8012a72:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012a74:	005b      	lsls	r3, r3, #1
 8012a76:	b29a      	uxth	r2, r3
 8012a78:	687b      	ldr	r3, [r7, #4]
 8012a7a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8012a7e:	687b      	ldr	r3, [r7, #4]
 8012a80:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8012a84:	687b      	ldr	r3, [r7, #4]
 8012a86:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012a88:	4619      	mov	r1, r3
 8012a8a:	0049      	lsls	r1, r1, #1
 8012a8c:	440b      	add	r3, r1
 8012a8e:	b29b      	uxth	r3, r3
 8012a90:	4413      	add	r3, r2
 8012a92:	b29a      	uxth	r2, r3
 8012a94:	687b      	ldr	r3, [r7, #4]
 8012a96:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8012a9a:	687b      	ldr	r3, [r7, #4]
 8012a9c:	8b5b      	ldrh	r3, [r3, #26]
 8012a9e:	f043 0304 	orr.w	r3, r3, #4
 8012aa2:	b29a      	uxth	r2, r3
 8012aa4:	687b      	ldr	r3, [r7, #4]
 8012aa6:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8012aa8:	687b      	ldr	r3, [r7, #4]
 8012aaa:	2200      	movs	r2, #0
 8012aac:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8012aae:	bf00      	nop
 8012ab0:	3708      	adds	r7, #8
 8012ab2:	46bd      	mov	sp, r7
 8012ab4:	bd80      	pop	{r7, pc}
 8012ab6:	bf00      	nop
 8012ab8:	0801f6b8 	.word	0x0801f6b8
 8012abc:	0801fd70 	.word	0x0801fd70
 8012ac0:	0801f70c 	.word	0x0801f70c

08012ac4 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8012ac4:	b580      	push	{r7, lr}
 8012ac6:	b086      	sub	sp, #24
 8012ac8:	af00      	add	r7, sp, #0
 8012aca:	60f8      	str	r0, [r7, #12]
 8012acc:	607b      	str	r3, [r7, #4]
 8012ace:	460b      	mov	r3, r1
 8012ad0:	817b      	strh	r3, [r7, #10]
 8012ad2:	4613      	mov	r3, r2
 8012ad4:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8012ad6:	897a      	ldrh	r2, [r7, #10]
 8012ad8:	893b      	ldrh	r3, [r7, #8]
 8012ada:	4413      	add	r3, r2
 8012adc:	b29b      	uxth	r3, r3
 8012ade:	3314      	adds	r3, #20
 8012ae0:	b29b      	uxth	r3, r3
 8012ae2:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012ae6:	4619      	mov	r1, r3
 8012ae8:	2022      	movs	r0, #34	; 0x22
 8012aea:	f7fa fc0d 	bl	800d308 <pbuf_alloc>
 8012aee:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8012af0:	697b      	ldr	r3, [r7, #20]
 8012af2:	2b00      	cmp	r3, #0
 8012af4:	d04d      	beq.n	8012b92 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8012af6:	897b      	ldrh	r3, [r7, #10]
 8012af8:	3313      	adds	r3, #19
 8012afa:	697a      	ldr	r2, [r7, #20]
 8012afc:	8952      	ldrh	r2, [r2, #10]
 8012afe:	4293      	cmp	r3, r2
 8012b00:	db06      	blt.n	8012b10 <tcp_output_alloc_header_common+0x4c>
 8012b02:	4b26      	ldr	r3, [pc, #152]	; (8012b9c <tcp_output_alloc_header_common+0xd8>)
 8012b04:	f240 7223 	movw	r2, #1827	; 0x723
 8012b08:	4925      	ldr	r1, [pc, #148]	; (8012ba0 <tcp_output_alloc_header_common+0xdc>)
 8012b0a:	4826      	ldr	r0, [pc, #152]	; (8012ba4 <tcp_output_alloc_header_common+0xe0>)
 8012b0c:	f005 ff5e 	bl	80189cc <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8012b10:	697b      	ldr	r3, [r7, #20]
 8012b12:	685b      	ldr	r3, [r3, #4]
 8012b14:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8012b16:	8c3b      	ldrh	r3, [r7, #32]
 8012b18:	4618      	mov	r0, r3
 8012b1a:	f7f9 fc3d 	bl	800c398 <lwip_htons>
 8012b1e:	4603      	mov	r3, r0
 8012b20:	461a      	mov	r2, r3
 8012b22:	693b      	ldr	r3, [r7, #16]
 8012b24:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8012b26:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012b28:	4618      	mov	r0, r3
 8012b2a:	f7f9 fc35 	bl	800c398 <lwip_htons>
 8012b2e:	4603      	mov	r3, r0
 8012b30:	461a      	mov	r2, r3
 8012b32:	693b      	ldr	r3, [r7, #16]
 8012b34:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8012b36:	693b      	ldr	r3, [r7, #16]
 8012b38:	687a      	ldr	r2, [r7, #4]
 8012b3a:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8012b3c:	68f8      	ldr	r0, [r7, #12]
 8012b3e:	f7f9 fc40 	bl	800c3c2 <lwip_htonl>
 8012b42:	4602      	mov	r2, r0
 8012b44:	693b      	ldr	r3, [r7, #16]
 8012b46:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8012b48:	897b      	ldrh	r3, [r7, #10]
 8012b4a:	089b      	lsrs	r3, r3, #2
 8012b4c:	b29b      	uxth	r3, r3
 8012b4e:	3305      	adds	r3, #5
 8012b50:	b29b      	uxth	r3, r3
 8012b52:	031b      	lsls	r3, r3, #12
 8012b54:	b29a      	uxth	r2, r3
 8012b56:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8012b5a:	b29b      	uxth	r3, r3
 8012b5c:	4313      	orrs	r3, r2
 8012b5e:	b29b      	uxth	r3, r3
 8012b60:	4618      	mov	r0, r3
 8012b62:	f7f9 fc19 	bl	800c398 <lwip_htons>
 8012b66:	4603      	mov	r3, r0
 8012b68:	461a      	mov	r2, r3
 8012b6a:	693b      	ldr	r3, [r7, #16]
 8012b6c:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8012b6e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8012b70:	4618      	mov	r0, r3
 8012b72:	f7f9 fc11 	bl	800c398 <lwip_htons>
 8012b76:	4603      	mov	r3, r0
 8012b78:	461a      	mov	r2, r3
 8012b7a:	693b      	ldr	r3, [r7, #16]
 8012b7c:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8012b7e:	693b      	ldr	r3, [r7, #16]
 8012b80:	2200      	movs	r2, #0
 8012b82:	741a      	strb	r2, [r3, #16]
 8012b84:	2200      	movs	r2, #0
 8012b86:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8012b88:	693b      	ldr	r3, [r7, #16]
 8012b8a:	2200      	movs	r2, #0
 8012b8c:	749a      	strb	r2, [r3, #18]
 8012b8e:	2200      	movs	r2, #0
 8012b90:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8012b92:	697b      	ldr	r3, [r7, #20]
}
 8012b94:	4618      	mov	r0, r3
 8012b96:	3718      	adds	r7, #24
 8012b98:	46bd      	mov	sp, r7
 8012b9a:	bd80      	pop	{r7, pc}
 8012b9c:	0801f6b8 	.word	0x0801f6b8
 8012ba0:	0801fd90 	.word	0x0801fd90
 8012ba4:	0801f70c 	.word	0x0801f70c

08012ba8 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8012ba8:	b5b0      	push	{r4, r5, r7, lr}
 8012baa:	b08a      	sub	sp, #40	; 0x28
 8012bac:	af04      	add	r7, sp, #16
 8012bae:	60f8      	str	r0, [r7, #12]
 8012bb0:	607b      	str	r3, [r7, #4]
 8012bb2:	460b      	mov	r3, r1
 8012bb4:	817b      	strh	r3, [r7, #10]
 8012bb6:	4613      	mov	r3, r2
 8012bb8:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8012bba:	68fb      	ldr	r3, [r7, #12]
 8012bbc:	2b00      	cmp	r3, #0
 8012bbe:	d106      	bne.n	8012bce <tcp_output_alloc_header+0x26>
 8012bc0:	4b15      	ldr	r3, [pc, #84]	; (8012c18 <tcp_output_alloc_header+0x70>)
 8012bc2:	f240 7242 	movw	r2, #1858	; 0x742
 8012bc6:	4915      	ldr	r1, [pc, #84]	; (8012c1c <tcp_output_alloc_header+0x74>)
 8012bc8:	4815      	ldr	r0, [pc, #84]	; (8012c20 <tcp_output_alloc_header+0x78>)
 8012bca:	f005 feff 	bl	80189cc <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8012bce:	68fb      	ldr	r3, [r7, #12]
 8012bd0:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8012bd2:	68fb      	ldr	r3, [r7, #12]
 8012bd4:	8adb      	ldrh	r3, [r3, #22]
 8012bd6:	68fa      	ldr	r2, [r7, #12]
 8012bd8:	8b12      	ldrh	r2, [r2, #24]
 8012bda:	68f9      	ldr	r1, [r7, #12]
 8012bdc:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 8012bde:	893d      	ldrh	r5, [r7, #8]
 8012be0:	897c      	ldrh	r4, [r7, #10]
 8012be2:	9103      	str	r1, [sp, #12]
 8012be4:	2110      	movs	r1, #16
 8012be6:	9102      	str	r1, [sp, #8]
 8012be8:	9201      	str	r2, [sp, #4]
 8012bea:	9300      	str	r3, [sp, #0]
 8012bec:	687b      	ldr	r3, [r7, #4]
 8012bee:	462a      	mov	r2, r5
 8012bf0:	4621      	mov	r1, r4
 8012bf2:	f7ff ff67 	bl	8012ac4 <tcp_output_alloc_header_common>
 8012bf6:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8012bf8:	697b      	ldr	r3, [r7, #20]
 8012bfa:	2b00      	cmp	r3, #0
 8012bfc:	d006      	beq.n	8012c0c <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8012bfe:	68fb      	ldr	r3, [r7, #12]
 8012c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012c02:	68fa      	ldr	r2, [r7, #12]
 8012c04:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8012c06:	441a      	add	r2, r3
 8012c08:	68fb      	ldr	r3, [r7, #12]
 8012c0a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8012c0c:	697b      	ldr	r3, [r7, #20]
}
 8012c0e:	4618      	mov	r0, r3
 8012c10:	3718      	adds	r7, #24
 8012c12:	46bd      	mov	sp, r7
 8012c14:	bdb0      	pop	{r4, r5, r7, pc}
 8012c16:	bf00      	nop
 8012c18:	0801f6b8 	.word	0x0801f6b8
 8012c1c:	0801fdc0 	.word	0x0801fdc0
 8012c20:	0801f70c 	.word	0x0801f70c

08012c24 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8012c24:	b580      	push	{r7, lr}
 8012c26:	b088      	sub	sp, #32
 8012c28:	af00      	add	r7, sp, #0
 8012c2a:	60f8      	str	r0, [r7, #12]
 8012c2c:	60b9      	str	r1, [r7, #8]
 8012c2e:	4611      	mov	r1, r2
 8012c30:	461a      	mov	r2, r3
 8012c32:	460b      	mov	r3, r1
 8012c34:	71fb      	strb	r3, [r7, #7]
 8012c36:	4613      	mov	r3, r2
 8012c38:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8012c3a:	2300      	movs	r3, #0
 8012c3c:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8012c3e:	68bb      	ldr	r3, [r7, #8]
 8012c40:	2b00      	cmp	r3, #0
 8012c42:	d106      	bne.n	8012c52 <tcp_output_fill_options+0x2e>
 8012c44:	4b13      	ldr	r3, [pc, #76]	; (8012c94 <tcp_output_fill_options+0x70>)
 8012c46:	f240 7256 	movw	r2, #1878	; 0x756
 8012c4a:	4913      	ldr	r1, [pc, #76]	; (8012c98 <tcp_output_fill_options+0x74>)
 8012c4c:	4813      	ldr	r0, [pc, #76]	; (8012c9c <tcp_output_fill_options+0x78>)
 8012c4e:	f005 febd 	bl	80189cc <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8012c52:	68bb      	ldr	r3, [r7, #8]
 8012c54:	685b      	ldr	r3, [r3, #4]
 8012c56:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8012c58:	69bb      	ldr	r3, [r7, #24]
 8012c5a:	3314      	adds	r3, #20
 8012c5c:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8012c5e:	69bb      	ldr	r3, [r7, #24]
 8012c60:	f103 0214 	add.w	r2, r3, #20
 8012c64:	8bfb      	ldrh	r3, [r7, #30]
 8012c66:	009b      	lsls	r3, r3, #2
 8012c68:	4619      	mov	r1, r3
 8012c6a:	79fb      	ldrb	r3, [r7, #7]
 8012c6c:	009b      	lsls	r3, r3, #2
 8012c6e:	f003 0304 	and.w	r3, r3, #4
 8012c72:	440b      	add	r3, r1
 8012c74:	4413      	add	r3, r2
 8012c76:	697a      	ldr	r2, [r7, #20]
 8012c78:	429a      	cmp	r2, r3
 8012c7a:	d006      	beq.n	8012c8a <tcp_output_fill_options+0x66>
 8012c7c:	4b05      	ldr	r3, [pc, #20]	; (8012c94 <tcp_output_fill_options+0x70>)
 8012c7e:	f240 7275 	movw	r2, #1909	; 0x775
 8012c82:	4907      	ldr	r1, [pc, #28]	; (8012ca0 <tcp_output_fill_options+0x7c>)
 8012c84:	4805      	ldr	r0, [pc, #20]	; (8012c9c <tcp_output_fill_options+0x78>)
 8012c86:	f005 fea1 	bl	80189cc <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8012c8a:	bf00      	nop
 8012c8c:	3720      	adds	r7, #32
 8012c8e:	46bd      	mov	sp, r7
 8012c90:	bd80      	pop	{r7, pc}
 8012c92:	bf00      	nop
 8012c94:	0801f6b8 	.word	0x0801f6b8
 8012c98:	0801fde8 	.word	0x0801fde8
 8012c9c:	0801f70c 	.word	0x0801f70c
 8012ca0:	0801fce0 	.word	0x0801fce0

08012ca4 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8012ca4:	b580      	push	{r7, lr}
 8012ca6:	b08a      	sub	sp, #40	; 0x28
 8012ca8:	af04      	add	r7, sp, #16
 8012caa:	60f8      	str	r0, [r7, #12]
 8012cac:	60b9      	str	r1, [r7, #8]
 8012cae:	607a      	str	r2, [r7, #4]
 8012cb0:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8012cb2:	68bb      	ldr	r3, [r7, #8]
 8012cb4:	2b00      	cmp	r3, #0
 8012cb6:	d106      	bne.n	8012cc6 <tcp_output_control_segment+0x22>
 8012cb8:	4b1c      	ldr	r3, [pc, #112]	; (8012d2c <tcp_output_control_segment+0x88>)
 8012cba:	f240 7287 	movw	r2, #1927	; 0x787
 8012cbe:	491c      	ldr	r1, [pc, #112]	; (8012d30 <tcp_output_control_segment+0x8c>)
 8012cc0:	481c      	ldr	r0, [pc, #112]	; (8012d34 <tcp_output_control_segment+0x90>)
 8012cc2:	f005 fe83 	bl	80189cc <iprintf>

  netif = tcp_route(pcb, src, dst);
 8012cc6:	683a      	ldr	r2, [r7, #0]
 8012cc8:	6879      	ldr	r1, [r7, #4]
 8012cca:	68f8      	ldr	r0, [r7, #12]
 8012ccc:	f7fe ff40 	bl	8011b50 <tcp_route>
 8012cd0:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8012cd2:	693b      	ldr	r3, [r7, #16]
 8012cd4:	2b00      	cmp	r3, #0
 8012cd6:	d102      	bne.n	8012cde <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8012cd8:	23fc      	movs	r3, #252	; 0xfc
 8012cda:	75fb      	strb	r3, [r7, #23]
 8012cdc:	e01c      	b.n	8012d18 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8012cde:	68fb      	ldr	r3, [r7, #12]
 8012ce0:	2b00      	cmp	r3, #0
 8012ce2:	d006      	beq.n	8012cf2 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8012ce4:	68fb      	ldr	r3, [r7, #12]
 8012ce6:	7adb      	ldrb	r3, [r3, #11]
 8012ce8:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8012cea:	68fb      	ldr	r3, [r7, #12]
 8012cec:	7a9b      	ldrb	r3, [r3, #10]
 8012cee:	757b      	strb	r3, [r7, #21]
 8012cf0:	e003      	b.n	8012cfa <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8012cf2:	23ff      	movs	r3, #255	; 0xff
 8012cf4:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8012cf6:	2300      	movs	r3, #0
 8012cf8:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8012cfa:	7dba      	ldrb	r2, [r7, #22]
 8012cfc:	693b      	ldr	r3, [r7, #16]
 8012cfe:	9302      	str	r3, [sp, #8]
 8012d00:	2306      	movs	r3, #6
 8012d02:	9301      	str	r3, [sp, #4]
 8012d04:	7d7b      	ldrb	r3, [r7, #21]
 8012d06:	9300      	str	r3, [sp, #0]
 8012d08:	4613      	mov	r3, r2
 8012d0a:	683a      	ldr	r2, [r7, #0]
 8012d0c:	6879      	ldr	r1, [r7, #4]
 8012d0e:	68b8      	ldr	r0, [r7, #8]
 8012d10:	f004 f8a6 	bl	8016e60 <ip4_output_if>
 8012d14:	4603      	mov	r3, r0
 8012d16:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8012d18:	68b8      	ldr	r0, [r7, #8]
 8012d1a:	f7fa fdd9 	bl	800d8d0 <pbuf_free>
  return err;
 8012d1e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012d22:	4618      	mov	r0, r3
 8012d24:	3718      	adds	r7, #24
 8012d26:	46bd      	mov	sp, r7
 8012d28:	bd80      	pop	{r7, pc}
 8012d2a:	bf00      	nop
 8012d2c:	0801f6b8 	.word	0x0801f6b8
 8012d30:	0801fe10 	.word	0x0801fe10
 8012d34:	0801f70c 	.word	0x0801f70c

08012d38 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8012d38:	b590      	push	{r4, r7, lr}
 8012d3a:	b08b      	sub	sp, #44	; 0x2c
 8012d3c:	af04      	add	r7, sp, #16
 8012d3e:	60f8      	str	r0, [r7, #12]
 8012d40:	60b9      	str	r1, [r7, #8]
 8012d42:	607a      	str	r2, [r7, #4]
 8012d44:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8012d46:	683b      	ldr	r3, [r7, #0]
 8012d48:	2b00      	cmp	r3, #0
 8012d4a:	d106      	bne.n	8012d5a <tcp_rst+0x22>
 8012d4c:	4b1e      	ldr	r3, [pc, #120]	; (8012dc8 <tcp_rst+0x90>)
 8012d4e:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8012d52:	491e      	ldr	r1, [pc, #120]	; (8012dcc <tcp_rst+0x94>)
 8012d54:	481e      	ldr	r0, [pc, #120]	; (8012dd0 <tcp_rst+0x98>)
 8012d56:	f005 fe39 	bl	80189cc <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8012d5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d5c:	2b00      	cmp	r3, #0
 8012d5e:	d106      	bne.n	8012d6e <tcp_rst+0x36>
 8012d60:	4b19      	ldr	r3, [pc, #100]	; (8012dc8 <tcp_rst+0x90>)
 8012d62:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8012d66:	491b      	ldr	r1, [pc, #108]	; (8012dd4 <tcp_rst+0x9c>)
 8012d68:	4819      	ldr	r0, [pc, #100]	; (8012dd0 <tcp_rst+0x98>)
 8012d6a:	f005 fe2f 	bl	80189cc <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8012d6e:	2300      	movs	r3, #0
 8012d70:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8012d72:	2308      	movs	r3, #8
 8012d74:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8012d76:	7dfb      	ldrb	r3, [r7, #23]
 8012d78:	b29c      	uxth	r4, r3
 8012d7a:	68b8      	ldr	r0, [r7, #8]
 8012d7c:	f7f9 fb21 	bl	800c3c2 <lwip_htonl>
 8012d80:	4602      	mov	r2, r0
 8012d82:	8abb      	ldrh	r3, [r7, #20]
 8012d84:	9303      	str	r3, [sp, #12]
 8012d86:	2314      	movs	r3, #20
 8012d88:	9302      	str	r3, [sp, #8]
 8012d8a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8012d8c:	9301      	str	r3, [sp, #4]
 8012d8e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8012d90:	9300      	str	r3, [sp, #0]
 8012d92:	4613      	mov	r3, r2
 8012d94:	2200      	movs	r2, #0
 8012d96:	4621      	mov	r1, r4
 8012d98:	6878      	ldr	r0, [r7, #4]
 8012d9a:	f7ff fe93 	bl	8012ac4 <tcp_output_alloc_header_common>
 8012d9e:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8012da0:	693b      	ldr	r3, [r7, #16]
 8012da2:	2b00      	cmp	r3, #0
 8012da4:	d00c      	beq.n	8012dc0 <tcp_rst+0x88>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8012da6:	7dfb      	ldrb	r3, [r7, #23]
 8012da8:	2200      	movs	r2, #0
 8012daa:	6939      	ldr	r1, [r7, #16]
 8012dac:	68f8      	ldr	r0, [r7, #12]
 8012dae:	f7ff ff39 	bl	8012c24 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8012db2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012db4:	683a      	ldr	r2, [r7, #0]
 8012db6:	6939      	ldr	r1, [r7, #16]
 8012db8:	68f8      	ldr	r0, [r7, #12]
 8012dba:	f7ff ff73 	bl	8012ca4 <tcp_output_control_segment>
 8012dbe:	e000      	b.n	8012dc2 <tcp_rst+0x8a>
    return;
 8012dc0:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8012dc2:	371c      	adds	r7, #28
 8012dc4:	46bd      	mov	sp, r7
 8012dc6:	bd90      	pop	{r4, r7, pc}
 8012dc8:	0801f6b8 	.word	0x0801f6b8
 8012dcc:	0801fe3c 	.word	0x0801fe3c
 8012dd0:	0801f70c 	.word	0x0801f70c
 8012dd4:	0801fe58 	.word	0x0801fe58

08012dd8 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8012dd8:	b590      	push	{r4, r7, lr}
 8012dda:	b087      	sub	sp, #28
 8012ddc:	af00      	add	r7, sp, #0
 8012dde:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8012de0:	2300      	movs	r3, #0
 8012de2:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8012de4:	2300      	movs	r3, #0
 8012de6:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8012de8:	687b      	ldr	r3, [r7, #4]
 8012dea:	2b00      	cmp	r3, #0
 8012dec:	d106      	bne.n	8012dfc <tcp_send_empty_ack+0x24>
 8012dee:	4b28      	ldr	r3, [pc, #160]	; (8012e90 <tcp_send_empty_ack+0xb8>)
 8012df0:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8012df4:	4927      	ldr	r1, [pc, #156]	; (8012e94 <tcp_send_empty_ack+0xbc>)
 8012df6:	4828      	ldr	r0, [pc, #160]	; (8012e98 <tcp_send_empty_ack+0xc0>)
 8012df8:	f005 fde8 	bl	80189cc <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8012dfc:	7dfb      	ldrb	r3, [r7, #23]
 8012dfe:	009b      	lsls	r3, r3, #2
 8012e00:	b2db      	uxtb	r3, r3
 8012e02:	f003 0304 	and.w	r3, r3, #4
 8012e06:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8012e08:	7d7b      	ldrb	r3, [r7, #21]
 8012e0a:	b29c      	uxth	r4, r3
 8012e0c:	687b      	ldr	r3, [r7, #4]
 8012e0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012e10:	4618      	mov	r0, r3
 8012e12:	f7f9 fad6 	bl	800c3c2 <lwip_htonl>
 8012e16:	4603      	mov	r3, r0
 8012e18:	2200      	movs	r2, #0
 8012e1a:	4621      	mov	r1, r4
 8012e1c:	6878      	ldr	r0, [r7, #4]
 8012e1e:	f7ff fec3 	bl	8012ba8 <tcp_output_alloc_header>
 8012e22:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8012e24:	693b      	ldr	r3, [r7, #16]
 8012e26:	2b00      	cmp	r3, #0
 8012e28:	d109      	bne.n	8012e3e <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8012e2a:	687b      	ldr	r3, [r7, #4]
 8012e2c:	8b5b      	ldrh	r3, [r3, #26]
 8012e2e:	f043 0303 	orr.w	r3, r3, #3
 8012e32:	b29a      	uxth	r2, r3
 8012e34:	687b      	ldr	r3, [r7, #4]
 8012e36:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8012e38:	f06f 0301 	mvn.w	r3, #1
 8012e3c:	e023      	b.n	8012e86 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8012e3e:	7dbb      	ldrb	r3, [r7, #22]
 8012e40:	7dfa      	ldrb	r2, [r7, #23]
 8012e42:	6939      	ldr	r1, [r7, #16]
 8012e44:	6878      	ldr	r0, [r7, #4]
 8012e46:	f7ff feed 	bl	8012c24 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8012e4a:	687a      	ldr	r2, [r7, #4]
 8012e4c:	687b      	ldr	r3, [r7, #4]
 8012e4e:	3304      	adds	r3, #4
 8012e50:	6939      	ldr	r1, [r7, #16]
 8012e52:	6878      	ldr	r0, [r7, #4]
 8012e54:	f7ff ff26 	bl	8012ca4 <tcp_output_control_segment>
 8012e58:	4603      	mov	r3, r0
 8012e5a:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8012e5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012e60:	2b00      	cmp	r3, #0
 8012e62:	d007      	beq.n	8012e74 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8012e64:	687b      	ldr	r3, [r7, #4]
 8012e66:	8b5b      	ldrh	r3, [r3, #26]
 8012e68:	f043 0303 	orr.w	r3, r3, #3
 8012e6c:	b29a      	uxth	r2, r3
 8012e6e:	687b      	ldr	r3, [r7, #4]
 8012e70:	835a      	strh	r2, [r3, #26]
 8012e72:	e006      	b.n	8012e82 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8012e74:	687b      	ldr	r3, [r7, #4]
 8012e76:	8b5b      	ldrh	r3, [r3, #26]
 8012e78:	f023 0303 	bic.w	r3, r3, #3
 8012e7c:	b29a      	uxth	r2, r3
 8012e7e:	687b      	ldr	r3, [r7, #4]
 8012e80:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8012e82:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8012e86:	4618      	mov	r0, r3
 8012e88:	371c      	adds	r7, #28
 8012e8a:	46bd      	mov	sp, r7
 8012e8c:	bd90      	pop	{r4, r7, pc}
 8012e8e:	bf00      	nop
 8012e90:	0801f6b8 	.word	0x0801f6b8
 8012e94:	0801fe74 	.word	0x0801fe74
 8012e98:	0801f70c 	.word	0x0801f70c

08012e9c <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8012e9c:	b590      	push	{r4, r7, lr}
 8012e9e:	b087      	sub	sp, #28
 8012ea0:	af00      	add	r7, sp, #0
 8012ea2:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8012ea4:	2300      	movs	r3, #0
 8012ea6:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8012ea8:	687b      	ldr	r3, [r7, #4]
 8012eaa:	2b00      	cmp	r3, #0
 8012eac:	d106      	bne.n	8012ebc <tcp_keepalive+0x20>
 8012eae:	4b18      	ldr	r3, [pc, #96]	; (8012f10 <tcp_keepalive+0x74>)
 8012eb0:	f640 0224 	movw	r2, #2084	; 0x824
 8012eb4:	4917      	ldr	r1, [pc, #92]	; (8012f14 <tcp_keepalive+0x78>)
 8012eb6:	4818      	ldr	r0, [pc, #96]	; (8012f18 <tcp_keepalive+0x7c>)
 8012eb8:	f005 fd88 	bl	80189cc <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8012ebc:	7dfb      	ldrb	r3, [r7, #23]
 8012ebe:	b29c      	uxth	r4, r3
 8012ec0:	687b      	ldr	r3, [r7, #4]
 8012ec2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012ec4:	3b01      	subs	r3, #1
 8012ec6:	4618      	mov	r0, r3
 8012ec8:	f7f9 fa7b 	bl	800c3c2 <lwip_htonl>
 8012ecc:	4603      	mov	r3, r0
 8012ece:	2200      	movs	r2, #0
 8012ed0:	4621      	mov	r1, r4
 8012ed2:	6878      	ldr	r0, [r7, #4]
 8012ed4:	f7ff fe68 	bl	8012ba8 <tcp_output_alloc_header>
 8012ed8:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8012eda:	693b      	ldr	r3, [r7, #16]
 8012edc:	2b00      	cmp	r3, #0
 8012ede:	d102      	bne.n	8012ee6 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8012ee0:	f04f 33ff 	mov.w	r3, #4294967295
 8012ee4:	e010      	b.n	8012f08 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8012ee6:	7dfb      	ldrb	r3, [r7, #23]
 8012ee8:	2200      	movs	r2, #0
 8012eea:	6939      	ldr	r1, [r7, #16]
 8012eec:	6878      	ldr	r0, [r7, #4]
 8012eee:	f7ff fe99 	bl	8012c24 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8012ef2:	687a      	ldr	r2, [r7, #4]
 8012ef4:	687b      	ldr	r3, [r7, #4]
 8012ef6:	3304      	adds	r3, #4
 8012ef8:	6939      	ldr	r1, [r7, #16]
 8012efa:	6878      	ldr	r0, [r7, #4]
 8012efc:	f7ff fed2 	bl	8012ca4 <tcp_output_control_segment>
 8012f00:	4603      	mov	r3, r0
 8012f02:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8012f04:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8012f08:	4618      	mov	r0, r3
 8012f0a:	371c      	adds	r7, #28
 8012f0c:	46bd      	mov	sp, r7
 8012f0e:	bd90      	pop	{r4, r7, pc}
 8012f10:	0801f6b8 	.word	0x0801f6b8
 8012f14:	0801fe94 	.word	0x0801fe94
 8012f18:	0801f70c 	.word	0x0801f70c

08012f1c <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8012f1c:	b590      	push	{r4, r7, lr}
 8012f1e:	b08b      	sub	sp, #44	; 0x2c
 8012f20:	af00      	add	r7, sp, #0
 8012f22:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8012f24:	2300      	movs	r3, #0
 8012f26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8012f2a:	687b      	ldr	r3, [r7, #4]
 8012f2c:	2b00      	cmp	r3, #0
 8012f2e:	d106      	bne.n	8012f3e <tcp_zero_window_probe+0x22>
 8012f30:	4b4c      	ldr	r3, [pc, #304]	; (8013064 <tcp_zero_window_probe+0x148>)
 8012f32:	f640 024f 	movw	r2, #2127	; 0x84f
 8012f36:	494c      	ldr	r1, [pc, #304]	; (8013068 <tcp_zero_window_probe+0x14c>)
 8012f38:	484c      	ldr	r0, [pc, #304]	; (801306c <tcp_zero_window_probe+0x150>)
 8012f3a:	f005 fd47 	bl	80189cc <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8012f3e:	687b      	ldr	r3, [r7, #4]
 8012f40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012f42:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8012f44:	6a3b      	ldr	r3, [r7, #32]
 8012f46:	2b00      	cmp	r3, #0
 8012f48:	d101      	bne.n	8012f4e <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8012f4a:	2300      	movs	r3, #0
 8012f4c:	e086      	b.n	801305c <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8012f4e:	687b      	ldr	r3, [r7, #4]
 8012f50:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8012f54:	2bff      	cmp	r3, #255	; 0xff
 8012f56:	d007      	beq.n	8012f68 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8012f58:	687b      	ldr	r3, [r7, #4]
 8012f5a:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8012f5e:	3301      	adds	r3, #1
 8012f60:	b2da      	uxtb	r2, r3
 8012f62:	687b      	ldr	r3, [r7, #4]
 8012f64:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8012f68:	6a3b      	ldr	r3, [r7, #32]
 8012f6a:	68db      	ldr	r3, [r3, #12]
 8012f6c:	899b      	ldrh	r3, [r3, #12]
 8012f6e:	b29b      	uxth	r3, r3
 8012f70:	4618      	mov	r0, r3
 8012f72:	f7f9 fa11 	bl	800c398 <lwip_htons>
 8012f76:	4603      	mov	r3, r0
 8012f78:	b2db      	uxtb	r3, r3
 8012f7a:	f003 0301 	and.w	r3, r3, #1
 8012f7e:	2b00      	cmp	r3, #0
 8012f80:	d005      	beq.n	8012f8e <tcp_zero_window_probe+0x72>
 8012f82:	6a3b      	ldr	r3, [r7, #32]
 8012f84:	891b      	ldrh	r3, [r3, #8]
 8012f86:	2b00      	cmp	r3, #0
 8012f88:	d101      	bne.n	8012f8e <tcp_zero_window_probe+0x72>
 8012f8a:	2301      	movs	r3, #1
 8012f8c:	e000      	b.n	8012f90 <tcp_zero_window_probe+0x74>
 8012f8e:	2300      	movs	r3, #0
 8012f90:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8012f92:	7ffb      	ldrb	r3, [r7, #31]
 8012f94:	2b00      	cmp	r3, #0
 8012f96:	bf0c      	ite	eq
 8012f98:	2301      	moveq	r3, #1
 8012f9a:	2300      	movne	r3, #0
 8012f9c:	b2db      	uxtb	r3, r3
 8012f9e:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8012fa0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012fa4:	b299      	uxth	r1, r3
 8012fa6:	6a3b      	ldr	r3, [r7, #32]
 8012fa8:	68db      	ldr	r3, [r3, #12]
 8012faa:	685b      	ldr	r3, [r3, #4]
 8012fac:	8bba      	ldrh	r2, [r7, #28]
 8012fae:	6878      	ldr	r0, [r7, #4]
 8012fb0:	f7ff fdfa 	bl	8012ba8 <tcp_output_alloc_header>
 8012fb4:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8012fb6:	69bb      	ldr	r3, [r7, #24]
 8012fb8:	2b00      	cmp	r3, #0
 8012fba:	d102      	bne.n	8012fc2 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8012fbc:	f04f 33ff 	mov.w	r3, #4294967295
 8012fc0:	e04c      	b.n	801305c <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8012fc2:	69bb      	ldr	r3, [r7, #24]
 8012fc4:	685b      	ldr	r3, [r3, #4]
 8012fc6:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8012fc8:	7ffb      	ldrb	r3, [r7, #31]
 8012fca:	2b00      	cmp	r3, #0
 8012fcc:	d011      	beq.n	8012ff2 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8012fce:	697b      	ldr	r3, [r7, #20]
 8012fd0:	899b      	ldrh	r3, [r3, #12]
 8012fd2:	b29b      	uxth	r3, r3
 8012fd4:	b21b      	sxth	r3, r3
 8012fd6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8012fda:	b21c      	sxth	r4, r3
 8012fdc:	2011      	movs	r0, #17
 8012fde:	f7f9 f9db 	bl	800c398 <lwip_htons>
 8012fe2:	4603      	mov	r3, r0
 8012fe4:	b21b      	sxth	r3, r3
 8012fe6:	4323      	orrs	r3, r4
 8012fe8:	b21b      	sxth	r3, r3
 8012fea:	b29a      	uxth	r2, r3
 8012fec:	697b      	ldr	r3, [r7, #20]
 8012fee:	819a      	strh	r2, [r3, #12]
 8012ff0:	e010      	b.n	8013014 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8012ff2:	69bb      	ldr	r3, [r7, #24]
 8012ff4:	685b      	ldr	r3, [r3, #4]
 8012ff6:	3314      	adds	r3, #20
 8012ff8:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8012ffa:	6a3b      	ldr	r3, [r7, #32]
 8012ffc:	6858      	ldr	r0, [r3, #4]
 8012ffe:	6a3b      	ldr	r3, [r7, #32]
 8013000:	685b      	ldr	r3, [r3, #4]
 8013002:	891a      	ldrh	r2, [r3, #8]
 8013004:	6a3b      	ldr	r3, [r7, #32]
 8013006:	891b      	ldrh	r3, [r3, #8]
 8013008:	1ad3      	subs	r3, r2, r3
 801300a:	b29b      	uxth	r3, r3
 801300c:	2201      	movs	r2, #1
 801300e:	6939      	ldr	r1, [r7, #16]
 8013010:	f7fa fe58 	bl	800dcc4 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8013014:	6a3b      	ldr	r3, [r7, #32]
 8013016:	68db      	ldr	r3, [r3, #12]
 8013018:	685b      	ldr	r3, [r3, #4]
 801301a:	4618      	mov	r0, r3
 801301c:	f7f9 f9d1 	bl	800c3c2 <lwip_htonl>
 8013020:	4603      	mov	r3, r0
 8013022:	3301      	adds	r3, #1
 8013024:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8013026:	687b      	ldr	r3, [r7, #4]
 8013028:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801302a:	68fb      	ldr	r3, [r7, #12]
 801302c:	1ad3      	subs	r3, r2, r3
 801302e:	2b00      	cmp	r3, #0
 8013030:	da02      	bge.n	8013038 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8013032:	687b      	ldr	r3, [r7, #4]
 8013034:	68fa      	ldr	r2, [r7, #12]
 8013036:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8013038:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801303c:	2200      	movs	r2, #0
 801303e:	69b9      	ldr	r1, [r7, #24]
 8013040:	6878      	ldr	r0, [r7, #4]
 8013042:	f7ff fdef 	bl	8012c24 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8013046:	687a      	ldr	r2, [r7, #4]
 8013048:	687b      	ldr	r3, [r7, #4]
 801304a:	3304      	adds	r3, #4
 801304c:	69b9      	ldr	r1, [r7, #24]
 801304e:	6878      	ldr	r0, [r7, #4]
 8013050:	f7ff fe28 	bl	8012ca4 <tcp_output_control_segment>
 8013054:	4603      	mov	r3, r0
 8013056:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8013058:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801305c:	4618      	mov	r0, r3
 801305e:	372c      	adds	r7, #44	; 0x2c
 8013060:	46bd      	mov	sp, r7
 8013062:	bd90      	pop	{r4, r7, pc}
 8013064:	0801f6b8 	.word	0x0801f6b8
 8013068:	0801feb0 	.word	0x0801feb0
 801306c:	0801f70c 	.word	0x0801f70c

08013070 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8013070:	b580      	push	{r7, lr}
 8013072:	b082      	sub	sp, #8
 8013074:	af00      	add	r7, sp, #0
 8013076:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8013078:	f7fa ff12 	bl	800dea0 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 801307c:	4b0a      	ldr	r3, [pc, #40]	; (80130a8 <tcpip_tcp_timer+0x38>)
 801307e:	681b      	ldr	r3, [r3, #0]
 8013080:	2b00      	cmp	r3, #0
 8013082:	d103      	bne.n	801308c <tcpip_tcp_timer+0x1c>
 8013084:	4b09      	ldr	r3, [pc, #36]	; (80130ac <tcpip_tcp_timer+0x3c>)
 8013086:	681b      	ldr	r3, [r3, #0]
 8013088:	2b00      	cmp	r3, #0
 801308a:	d005      	beq.n	8013098 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801308c:	2200      	movs	r2, #0
 801308e:	4908      	ldr	r1, [pc, #32]	; (80130b0 <tcpip_tcp_timer+0x40>)
 8013090:	20fa      	movs	r0, #250	; 0xfa
 8013092:	f000 f8f3 	bl	801327c <sys_timeout>
 8013096:	e003      	b.n	80130a0 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8013098:	4b06      	ldr	r3, [pc, #24]	; (80130b4 <tcpip_tcp_timer+0x44>)
 801309a:	2200      	movs	r2, #0
 801309c:	601a      	str	r2, [r3, #0]
  }
}
 801309e:	bf00      	nop
 80130a0:	bf00      	nop
 80130a2:	3708      	adds	r7, #8
 80130a4:	46bd      	mov	sp, r7
 80130a6:	bd80      	pop	{r7, pc}
 80130a8:	20007150 	.word	0x20007150
 80130ac:	20007160 	.word	0x20007160
 80130b0:	08013071 	.word	0x08013071
 80130b4:	200004d8 	.word	0x200004d8

080130b8 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 80130b8:	b580      	push	{r7, lr}
 80130ba:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 80130bc:	4b0a      	ldr	r3, [pc, #40]	; (80130e8 <tcp_timer_needed+0x30>)
 80130be:	681b      	ldr	r3, [r3, #0]
 80130c0:	2b00      	cmp	r3, #0
 80130c2:	d10f      	bne.n	80130e4 <tcp_timer_needed+0x2c>
 80130c4:	4b09      	ldr	r3, [pc, #36]	; (80130ec <tcp_timer_needed+0x34>)
 80130c6:	681b      	ldr	r3, [r3, #0]
 80130c8:	2b00      	cmp	r3, #0
 80130ca:	d103      	bne.n	80130d4 <tcp_timer_needed+0x1c>
 80130cc:	4b08      	ldr	r3, [pc, #32]	; (80130f0 <tcp_timer_needed+0x38>)
 80130ce:	681b      	ldr	r3, [r3, #0]
 80130d0:	2b00      	cmp	r3, #0
 80130d2:	d007      	beq.n	80130e4 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 80130d4:	4b04      	ldr	r3, [pc, #16]	; (80130e8 <tcp_timer_needed+0x30>)
 80130d6:	2201      	movs	r2, #1
 80130d8:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80130da:	2200      	movs	r2, #0
 80130dc:	4905      	ldr	r1, [pc, #20]	; (80130f4 <tcp_timer_needed+0x3c>)
 80130de:	20fa      	movs	r0, #250	; 0xfa
 80130e0:	f000 f8cc 	bl	801327c <sys_timeout>
  }
}
 80130e4:	bf00      	nop
 80130e6:	bd80      	pop	{r7, pc}
 80130e8:	200004d8 	.word	0x200004d8
 80130ec:	20007150 	.word	0x20007150
 80130f0:	20007160 	.word	0x20007160
 80130f4:	08013071 	.word	0x08013071

080130f8 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 80130f8:	b580      	push	{r7, lr}
 80130fa:	b086      	sub	sp, #24
 80130fc:	af00      	add	r7, sp, #0
 80130fe:	60f8      	str	r0, [r7, #12]
 8013100:	60b9      	str	r1, [r7, #8]
 8013102:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8013104:	2006      	movs	r0, #6
 8013106:	f7f9 fd9d 	bl	800cc44 <memp_malloc>
 801310a:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 801310c:	693b      	ldr	r3, [r7, #16]
 801310e:	2b00      	cmp	r3, #0
 8013110:	d109      	bne.n	8013126 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8013112:	693b      	ldr	r3, [r7, #16]
 8013114:	2b00      	cmp	r3, #0
 8013116:	d151      	bne.n	80131bc <sys_timeout_abs+0xc4>
 8013118:	4b2a      	ldr	r3, [pc, #168]	; (80131c4 <sys_timeout_abs+0xcc>)
 801311a:	22be      	movs	r2, #190	; 0xbe
 801311c:	492a      	ldr	r1, [pc, #168]	; (80131c8 <sys_timeout_abs+0xd0>)
 801311e:	482b      	ldr	r0, [pc, #172]	; (80131cc <sys_timeout_abs+0xd4>)
 8013120:	f005 fc54 	bl	80189cc <iprintf>
    return;
 8013124:	e04a      	b.n	80131bc <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8013126:	693b      	ldr	r3, [r7, #16]
 8013128:	2200      	movs	r2, #0
 801312a:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 801312c:	693b      	ldr	r3, [r7, #16]
 801312e:	68ba      	ldr	r2, [r7, #8]
 8013130:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8013132:	693b      	ldr	r3, [r7, #16]
 8013134:	687a      	ldr	r2, [r7, #4]
 8013136:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8013138:	693b      	ldr	r3, [r7, #16]
 801313a:	68fa      	ldr	r2, [r7, #12]
 801313c:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801313e:	4b24      	ldr	r3, [pc, #144]	; (80131d0 <sys_timeout_abs+0xd8>)
 8013140:	681b      	ldr	r3, [r3, #0]
 8013142:	2b00      	cmp	r3, #0
 8013144:	d103      	bne.n	801314e <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8013146:	4a22      	ldr	r2, [pc, #136]	; (80131d0 <sys_timeout_abs+0xd8>)
 8013148:	693b      	ldr	r3, [r7, #16]
 801314a:	6013      	str	r3, [r2, #0]
    return;
 801314c:	e037      	b.n	80131be <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 801314e:	693b      	ldr	r3, [r7, #16]
 8013150:	685a      	ldr	r2, [r3, #4]
 8013152:	4b1f      	ldr	r3, [pc, #124]	; (80131d0 <sys_timeout_abs+0xd8>)
 8013154:	681b      	ldr	r3, [r3, #0]
 8013156:	685b      	ldr	r3, [r3, #4]
 8013158:	1ad3      	subs	r3, r2, r3
 801315a:	0fdb      	lsrs	r3, r3, #31
 801315c:	f003 0301 	and.w	r3, r3, #1
 8013160:	b2db      	uxtb	r3, r3
 8013162:	2b00      	cmp	r3, #0
 8013164:	d007      	beq.n	8013176 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8013166:	4b1a      	ldr	r3, [pc, #104]	; (80131d0 <sys_timeout_abs+0xd8>)
 8013168:	681a      	ldr	r2, [r3, #0]
 801316a:	693b      	ldr	r3, [r7, #16]
 801316c:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 801316e:	4a18      	ldr	r2, [pc, #96]	; (80131d0 <sys_timeout_abs+0xd8>)
 8013170:	693b      	ldr	r3, [r7, #16]
 8013172:	6013      	str	r3, [r2, #0]
 8013174:	e023      	b.n	80131be <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8013176:	4b16      	ldr	r3, [pc, #88]	; (80131d0 <sys_timeout_abs+0xd8>)
 8013178:	681b      	ldr	r3, [r3, #0]
 801317a:	617b      	str	r3, [r7, #20]
 801317c:	e01a      	b.n	80131b4 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 801317e:	697b      	ldr	r3, [r7, #20]
 8013180:	681b      	ldr	r3, [r3, #0]
 8013182:	2b00      	cmp	r3, #0
 8013184:	d00b      	beq.n	801319e <sys_timeout_abs+0xa6>
 8013186:	693b      	ldr	r3, [r7, #16]
 8013188:	685a      	ldr	r2, [r3, #4]
 801318a:	697b      	ldr	r3, [r7, #20]
 801318c:	681b      	ldr	r3, [r3, #0]
 801318e:	685b      	ldr	r3, [r3, #4]
 8013190:	1ad3      	subs	r3, r2, r3
 8013192:	0fdb      	lsrs	r3, r3, #31
 8013194:	f003 0301 	and.w	r3, r3, #1
 8013198:	b2db      	uxtb	r3, r3
 801319a:	2b00      	cmp	r3, #0
 801319c:	d007      	beq.n	80131ae <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 801319e:	697b      	ldr	r3, [r7, #20]
 80131a0:	681a      	ldr	r2, [r3, #0]
 80131a2:	693b      	ldr	r3, [r7, #16]
 80131a4:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 80131a6:	697b      	ldr	r3, [r7, #20]
 80131a8:	693a      	ldr	r2, [r7, #16]
 80131aa:	601a      	str	r2, [r3, #0]
        break;
 80131ac:	e007      	b.n	80131be <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 80131ae:	697b      	ldr	r3, [r7, #20]
 80131b0:	681b      	ldr	r3, [r3, #0]
 80131b2:	617b      	str	r3, [r7, #20]
 80131b4:	697b      	ldr	r3, [r7, #20]
 80131b6:	2b00      	cmp	r3, #0
 80131b8:	d1e1      	bne.n	801317e <sys_timeout_abs+0x86>
 80131ba:	e000      	b.n	80131be <sys_timeout_abs+0xc6>
    return;
 80131bc:	bf00      	nop
      }
    }
  }
}
 80131be:	3718      	adds	r7, #24
 80131c0:	46bd      	mov	sp, r7
 80131c2:	bd80      	pop	{r7, pc}
 80131c4:	0801fed4 	.word	0x0801fed4
 80131c8:	0801ff08 	.word	0x0801ff08
 80131cc:	0801ff48 	.word	0x0801ff48
 80131d0:	200004d0 	.word	0x200004d0

080131d4 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 80131d4:	b580      	push	{r7, lr}
 80131d6:	b086      	sub	sp, #24
 80131d8:	af00      	add	r7, sp, #0
 80131da:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 80131dc:	687b      	ldr	r3, [r7, #4]
 80131de:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 80131e0:	697b      	ldr	r3, [r7, #20]
 80131e2:	685b      	ldr	r3, [r3, #4]
 80131e4:	4798      	blx	r3

  now = sys_now();
 80131e6:	f7f9 f849 	bl	800c27c <sys_now>
 80131ea:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 80131ec:	697b      	ldr	r3, [r7, #20]
 80131ee:	681a      	ldr	r2, [r3, #0]
 80131f0:	4b0f      	ldr	r3, [pc, #60]	; (8013230 <lwip_cyclic_timer+0x5c>)
 80131f2:	681b      	ldr	r3, [r3, #0]
 80131f4:	4413      	add	r3, r2
 80131f6:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 80131f8:	68fa      	ldr	r2, [r7, #12]
 80131fa:	693b      	ldr	r3, [r7, #16]
 80131fc:	1ad3      	subs	r3, r2, r3
 80131fe:	0fdb      	lsrs	r3, r3, #31
 8013200:	f003 0301 	and.w	r3, r3, #1
 8013204:	b2db      	uxtb	r3, r3
 8013206:	2b00      	cmp	r3, #0
 8013208:	d009      	beq.n	801321e <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801320a:	697b      	ldr	r3, [r7, #20]
 801320c:	681a      	ldr	r2, [r3, #0]
 801320e:	693b      	ldr	r3, [r7, #16]
 8013210:	4413      	add	r3, r2
 8013212:	687a      	ldr	r2, [r7, #4]
 8013214:	4907      	ldr	r1, [pc, #28]	; (8013234 <lwip_cyclic_timer+0x60>)
 8013216:	4618      	mov	r0, r3
 8013218:	f7ff ff6e 	bl	80130f8 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 801321c:	e004      	b.n	8013228 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801321e:	687a      	ldr	r2, [r7, #4]
 8013220:	4904      	ldr	r1, [pc, #16]	; (8013234 <lwip_cyclic_timer+0x60>)
 8013222:	68f8      	ldr	r0, [r7, #12]
 8013224:	f7ff ff68 	bl	80130f8 <sys_timeout_abs>
}
 8013228:	bf00      	nop
 801322a:	3718      	adds	r7, #24
 801322c:	46bd      	mov	sp, r7
 801322e:	bd80      	pop	{r7, pc}
 8013230:	200004d4 	.word	0x200004d4
 8013234:	080131d5 	.word	0x080131d5

08013238 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8013238:	b580      	push	{r7, lr}
 801323a:	b082      	sub	sp, #8
 801323c:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801323e:	2301      	movs	r3, #1
 8013240:	607b      	str	r3, [r7, #4]
 8013242:	e00e      	b.n	8013262 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8013244:	4a0b      	ldr	r2, [pc, #44]	; (8013274 <sys_timeouts_init+0x3c>)
 8013246:	687b      	ldr	r3, [r7, #4]
 8013248:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 801324c:	687b      	ldr	r3, [r7, #4]
 801324e:	00db      	lsls	r3, r3, #3
 8013250:	4a08      	ldr	r2, [pc, #32]	; (8013274 <sys_timeouts_init+0x3c>)
 8013252:	4413      	add	r3, r2
 8013254:	461a      	mov	r2, r3
 8013256:	4908      	ldr	r1, [pc, #32]	; (8013278 <sys_timeouts_init+0x40>)
 8013258:	f000 f810 	bl	801327c <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801325c:	687b      	ldr	r3, [r7, #4]
 801325e:	3301      	adds	r3, #1
 8013260:	607b      	str	r3, [r7, #4]
 8013262:	687b      	ldr	r3, [r7, #4]
 8013264:	2b04      	cmp	r3, #4
 8013266:	d9ed      	bls.n	8013244 <sys_timeouts_init+0xc>
  }
}
 8013268:	bf00      	nop
 801326a:	bf00      	nop
 801326c:	3708      	adds	r7, #8
 801326e:	46bd      	mov	sp, r7
 8013270:	bd80      	pop	{r7, pc}
 8013272:	bf00      	nop
 8013274:	08020e64 	.word	0x08020e64
 8013278:	080131d5 	.word	0x080131d5

0801327c <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 801327c:	b580      	push	{r7, lr}
 801327e:	b086      	sub	sp, #24
 8013280:	af00      	add	r7, sp, #0
 8013282:	60f8      	str	r0, [r7, #12]
 8013284:	60b9      	str	r1, [r7, #8]
 8013286:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8013288:	68fb      	ldr	r3, [r7, #12]
 801328a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801328e:	d306      	bcc.n	801329e <sys_timeout+0x22>
 8013290:	4b0a      	ldr	r3, [pc, #40]	; (80132bc <sys_timeout+0x40>)
 8013292:	f240 1229 	movw	r2, #297	; 0x129
 8013296:	490a      	ldr	r1, [pc, #40]	; (80132c0 <sys_timeout+0x44>)
 8013298:	480a      	ldr	r0, [pc, #40]	; (80132c4 <sys_timeout+0x48>)
 801329a:	f005 fb97 	bl	80189cc <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801329e:	f7f8 ffed 	bl	800c27c <sys_now>
 80132a2:	4602      	mov	r2, r0
 80132a4:	68fb      	ldr	r3, [r7, #12]
 80132a6:	4413      	add	r3, r2
 80132a8:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 80132aa:	687a      	ldr	r2, [r7, #4]
 80132ac:	68b9      	ldr	r1, [r7, #8]
 80132ae:	6978      	ldr	r0, [r7, #20]
 80132b0:	f7ff ff22 	bl	80130f8 <sys_timeout_abs>
#endif
}
 80132b4:	bf00      	nop
 80132b6:	3718      	adds	r7, #24
 80132b8:	46bd      	mov	sp, r7
 80132ba:	bd80      	pop	{r7, pc}
 80132bc:	0801fed4 	.word	0x0801fed4
 80132c0:	0801ff70 	.word	0x0801ff70
 80132c4:	0801ff48 	.word	0x0801ff48

080132c8 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 80132c8:	b580      	push	{r7, lr}
 80132ca:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80132cc:	f005 fb96 	bl	80189fc <rand>
 80132d0:	4603      	mov	r3, r0
 80132d2:	b29b      	uxth	r3, r3
 80132d4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80132d8:	b29b      	uxth	r3, r3
 80132da:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80132de:	b29a      	uxth	r2, r3
 80132e0:	4b01      	ldr	r3, [pc, #4]	; (80132e8 <udp_init+0x20>)
 80132e2:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80132e4:	bf00      	nop
 80132e6:	bd80      	pop	{r7, pc}
 80132e8:	2000006c 	.word	0x2000006c

080132ec <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 80132ec:	b480      	push	{r7}
 80132ee:	b083      	sub	sp, #12
 80132f0:	af00      	add	r7, sp, #0
  u16_t n = 0;
 80132f2:	2300      	movs	r3, #0
 80132f4:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 80132f6:	4b17      	ldr	r3, [pc, #92]	; (8013354 <udp_new_port+0x68>)
 80132f8:	881b      	ldrh	r3, [r3, #0]
 80132fa:	1c5a      	adds	r2, r3, #1
 80132fc:	b291      	uxth	r1, r2
 80132fe:	4a15      	ldr	r2, [pc, #84]	; (8013354 <udp_new_port+0x68>)
 8013300:	8011      	strh	r1, [r2, #0]
 8013302:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013306:	4293      	cmp	r3, r2
 8013308:	d103      	bne.n	8013312 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 801330a:	4b12      	ldr	r3, [pc, #72]	; (8013354 <udp_new_port+0x68>)
 801330c:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8013310:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013312:	4b11      	ldr	r3, [pc, #68]	; (8013358 <udp_new_port+0x6c>)
 8013314:	681b      	ldr	r3, [r3, #0]
 8013316:	603b      	str	r3, [r7, #0]
 8013318:	e011      	b.n	801333e <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 801331a:	683b      	ldr	r3, [r7, #0]
 801331c:	8a5a      	ldrh	r2, [r3, #18]
 801331e:	4b0d      	ldr	r3, [pc, #52]	; (8013354 <udp_new_port+0x68>)
 8013320:	881b      	ldrh	r3, [r3, #0]
 8013322:	429a      	cmp	r2, r3
 8013324:	d108      	bne.n	8013338 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8013326:	88fb      	ldrh	r3, [r7, #6]
 8013328:	3301      	adds	r3, #1
 801332a:	80fb      	strh	r3, [r7, #6]
 801332c:	88fb      	ldrh	r3, [r7, #6]
 801332e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8013332:	d3e0      	bcc.n	80132f6 <udp_new_port+0xa>
        return 0;
 8013334:	2300      	movs	r3, #0
 8013336:	e007      	b.n	8013348 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013338:	683b      	ldr	r3, [r7, #0]
 801333a:	68db      	ldr	r3, [r3, #12]
 801333c:	603b      	str	r3, [r7, #0]
 801333e:	683b      	ldr	r3, [r7, #0]
 8013340:	2b00      	cmp	r3, #0
 8013342:	d1ea      	bne.n	801331a <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8013344:	4b03      	ldr	r3, [pc, #12]	; (8013354 <udp_new_port+0x68>)
 8013346:	881b      	ldrh	r3, [r3, #0]
}
 8013348:	4618      	mov	r0, r3
 801334a:	370c      	adds	r7, #12
 801334c:	46bd      	mov	sp, r7
 801334e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013352:	4770      	bx	lr
 8013354:	2000006c 	.word	0x2000006c
 8013358:	20007168 	.word	0x20007168

0801335c <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 801335c:	b580      	push	{r7, lr}
 801335e:	b084      	sub	sp, #16
 8013360:	af00      	add	r7, sp, #0
 8013362:	60f8      	str	r0, [r7, #12]
 8013364:	60b9      	str	r1, [r7, #8]
 8013366:	4613      	mov	r3, r2
 8013368:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 801336a:	68fb      	ldr	r3, [r7, #12]
 801336c:	2b00      	cmp	r3, #0
 801336e:	d105      	bne.n	801337c <udp_input_local_match+0x20>
 8013370:	4b27      	ldr	r3, [pc, #156]	; (8013410 <udp_input_local_match+0xb4>)
 8013372:	2287      	movs	r2, #135	; 0x87
 8013374:	4927      	ldr	r1, [pc, #156]	; (8013414 <udp_input_local_match+0xb8>)
 8013376:	4828      	ldr	r0, [pc, #160]	; (8013418 <udp_input_local_match+0xbc>)
 8013378:	f005 fb28 	bl	80189cc <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 801337c:	68bb      	ldr	r3, [r7, #8]
 801337e:	2b00      	cmp	r3, #0
 8013380:	d105      	bne.n	801338e <udp_input_local_match+0x32>
 8013382:	4b23      	ldr	r3, [pc, #140]	; (8013410 <udp_input_local_match+0xb4>)
 8013384:	2288      	movs	r2, #136	; 0x88
 8013386:	4925      	ldr	r1, [pc, #148]	; (801341c <udp_input_local_match+0xc0>)
 8013388:	4823      	ldr	r0, [pc, #140]	; (8013418 <udp_input_local_match+0xbc>)
 801338a:	f005 fb1f 	bl	80189cc <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801338e:	68fb      	ldr	r3, [r7, #12]
 8013390:	7a1b      	ldrb	r3, [r3, #8]
 8013392:	2b00      	cmp	r3, #0
 8013394:	d00b      	beq.n	80133ae <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8013396:	68fb      	ldr	r3, [r7, #12]
 8013398:	7a1a      	ldrb	r2, [r3, #8]
 801339a:	4b21      	ldr	r3, [pc, #132]	; (8013420 <udp_input_local_match+0xc4>)
 801339c:	685b      	ldr	r3, [r3, #4]
 801339e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80133a2:	3301      	adds	r3, #1
 80133a4:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80133a6:	429a      	cmp	r2, r3
 80133a8:	d001      	beq.n	80133ae <udp_input_local_match+0x52>
    return 0;
 80133aa:	2300      	movs	r3, #0
 80133ac:	e02b      	b.n	8013406 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 80133ae:	79fb      	ldrb	r3, [r7, #7]
 80133b0:	2b00      	cmp	r3, #0
 80133b2:	d018      	beq.n	80133e6 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80133b4:	68fb      	ldr	r3, [r7, #12]
 80133b6:	2b00      	cmp	r3, #0
 80133b8:	d013      	beq.n	80133e2 <udp_input_local_match+0x86>
 80133ba:	68fb      	ldr	r3, [r7, #12]
 80133bc:	681b      	ldr	r3, [r3, #0]
 80133be:	2b00      	cmp	r3, #0
 80133c0:	d00f      	beq.n	80133e2 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80133c2:	4b17      	ldr	r3, [pc, #92]	; (8013420 <udp_input_local_match+0xc4>)
 80133c4:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80133c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80133ca:	d00a      	beq.n	80133e2 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 80133cc:	68fb      	ldr	r3, [r7, #12]
 80133ce:	681a      	ldr	r2, [r3, #0]
 80133d0:	4b13      	ldr	r3, [pc, #76]	; (8013420 <udp_input_local_match+0xc4>)
 80133d2:	695b      	ldr	r3, [r3, #20]
 80133d4:	405a      	eors	r2, r3
 80133d6:	68bb      	ldr	r3, [r7, #8]
 80133d8:	3308      	adds	r3, #8
 80133da:	681b      	ldr	r3, [r3, #0]
 80133dc:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80133de:	2b00      	cmp	r3, #0
 80133e0:	d110      	bne.n	8013404 <udp_input_local_match+0xa8>
          return 1;
 80133e2:	2301      	movs	r3, #1
 80133e4:	e00f      	b.n	8013406 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80133e6:	68fb      	ldr	r3, [r7, #12]
 80133e8:	2b00      	cmp	r3, #0
 80133ea:	d009      	beq.n	8013400 <udp_input_local_match+0xa4>
 80133ec:	68fb      	ldr	r3, [r7, #12]
 80133ee:	681b      	ldr	r3, [r3, #0]
 80133f0:	2b00      	cmp	r3, #0
 80133f2:	d005      	beq.n	8013400 <udp_input_local_match+0xa4>
 80133f4:	68fb      	ldr	r3, [r7, #12]
 80133f6:	681a      	ldr	r2, [r3, #0]
 80133f8:	4b09      	ldr	r3, [pc, #36]	; (8013420 <udp_input_local_match+0xc4>)
 80133fa:	695b      	ldr	r3, [r3, #20]
 80133fc:	429a      	cmp	r2, r3
 80133fe:	d101      	bne.n	8013404 <udp_input_local_match+0xa8>
        return 1;
 8013400:	2301      	movs	r3, #1
 8013402:	e000      	b.n	8013406 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8013404:	2300      	movs	r3, #0
}
 8013406:	4618      	mov	r0, r3
 8013408:	3710      	adds	r7, #16
 801340a:	46bd      	mov	sp, r7
 801340c:	bd80      	pop	{r7, pc}
 801340e:	bf00      	nop
 8013410:	0801ffbc 	.word	0x0801ffbc
 8013414:	0801ffec 	.word	0x0801ffec
 8013418:	08020010 	.word	0x08020010
 801341c:	08020038 	.word	0x08020038
 8013420:	2000402c 	.word	0x2000402c

08013424 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8013424:	b590      	push	{r4, r7, lr}
 8013426:	b08d      	sub	sp, #52	; 0x34
 8013428:	af02      	add	r7, sp, #8
 801342a:	6078      	str	r0, [r7, #4]
 801342c:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 801342e:	2300      	movs	r3, #0
 8013430:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8013432:	687b      	ldr	r3, [r7, #4]
 8013434:	2b00      	cmp	r3, #0
 8013436:	d105      	bne.n	8013444 <udp_input+0x20>
 8013438:	4b7c      	ldr	r3, [pc, #496]	; (801362c <udp_input+0x208>)
 801343a:	22cf      	movs	r2, #207	; 0xcf
 801343c:	497c      	ldr	r1, [pc, #496]	; (8013630 <udp_input+0x20c>)
 801343e:	487d      	ldr	r0, [pc, #500]	; (8013634 <udp_input+0x210>)
 8013440:	f005 fac4 	bl	80189cc <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8013444:	683b      	ldr	r3, [r7, #0]
 8013446:	2b00      	cmp	r3, #0
 8013448:	d105      	bne.n	8013456 <udp_input+0x32>
 801344a:	4b78      	ldr	r3, [pc, #480]	; (801362c <udp_input+0x208>)
 801344c:	22d0      	movs	r2, #208	; 0xd0
 801344e:	497a      	ldr	r1, [pc, #488]	; (8013638 <udp_input+0x214>)
 8013450:	4878      	ldr	r0, [pc, #480]	; (8013634 <udp_input+0x210>)
 8013452:	f005 fabb 	bl	80189cc <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8013456:	687b      	ldr	r3, [r7, #4]
 8013458:	895b      	ldrh	r3, [r3, #10]
 801345a:	2b07      	cmp	r3, #7
 801345c:	d803      	bhi.n	8013466 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 801345e:	6878      	ldr	r0, [r7, #4]
 8013460:	f7fa fa36 	bl	800d8d0 <pbuf_free>
    goto end;
 8013464:	e0de      	b.n	8013624 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8013466:	687b      	ldr	r3, [r7, #4]
 8013468:	685b      	ldr	r3, [r3, #4]
 801346a:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 801346c:	4b73      	ldr	r3, [pc, #460]	; (801363c <udp_input+0x218>)
 801346e:	695b      	ldr	r3, [r3, #20]
 8013470:	4a72      	ldr	r2, [pc, #456]	; (801363c <udp_input+0x218>)
 8013472:	6812      	ldr	r2, [r2, #0]
 8013474:	4611      	mov	r1, r2
 8013476:	4618      	mov	r0, r3
 8013478:	f003 fdca 	bl	8017010 <ip4_addr_isbroadcast_u32>
 801347c:	4603      	mov	r3, r0
 801347e:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8013480:	697b      	ldr	r3, [r7, #20]
 8013482:	881b      	ldrh	r3, [r3, #0]
 8013484:	b29b      	uxth	r3, r3
 8013486:	4618      	mov	r0, r3
 8013488:	f7f8 ff86 	bl	800c398 <lwip_htons>
 801348c:	4603      	mov	r3, r0
 801348e:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8013490:	697b      	ldr	r3, [r7, #20]
 8013492:	885b      	ldrh	r3, [r3, #2]
 8013494:	b29b      	uxth	r3, r3
 8013496:	4618      	mov	r0, r3
 8013498:	f7f8 ff7e 	bl	800c398 <lwip_htons>
 801349c:	4603      	mov	r3, r0
 801349e:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 80134a0:	2300      	movs	r3, #0
 80134a2:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 80134a4:	2300      	movs	r3, #0
 80134a6:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 80134a8:	2300      	movs	r3, #0
 80134aa:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80134ac:	4b64      	ldr	r3, [pc, #400]	; (8013640 <udp_input+0x21c>)
 80134ae:	681b      	ldr	r3, [r3, #0]
 80134b0:	627b      	str	r3, [r7, #36]	; 0x24
 80134b2:	e054      	b.n	801355e <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 80134b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80134b6:	8a5b      	ldrh	r3, [r3, #18]
 80134b8:	89fa      	ldrh	r2, [r7, #14]
 80134ba:	429a      	cmp	r2, r3
 80134bc:	d14a      	bne.n	8013554 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 80134be:	7cfb      	ldrb	r3, [r7, #19]
 80134c0:	461a      	mov	r2, r3
 80134c2:	6839      	ldr	r1, [r7, #0]
 80134c4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80134c6:	f7ff ff49 	bl	801335c <udp_input_local_match>
 80134ca:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 80134cc:	2b00      	cmp	r3, #0
 80134ce:	d041      	beq.n	8013554 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 80134d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80134d2:	7c1b      	ldrb	r3, [r3, #16]
 80134d4:	f003 0304 	and.w	r3, r3, #4
 80134d8:	2b00      	cmp	r3, #0
 80134da:	d11d      	bne.n	8013518 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 80134dc:	69fb      	ldr	r3, [r7, #28]
 80134de:	2b00      	cmp	r3, #0
 80134e0:	d102      	bne.n	80134e8 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 80134e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80134e4:	61fb      	str	r3, [r7, #28]
 80134e6:	e017      	b.n	8013518 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 80134e8:	7cfb      	ldrb	r3, [r7, #19]
 80134ea:	2b00      	cmp	r3, #0
 80134ec:	d014      	beq.n	8013518 <udp_input+0xf4>
 80134ee:	4b53      	ldr	r3, [pc, #332]	; (801363c <udp_input+0x218>)
 80134f0:	695b      	ldr	r3, [r3, #20]
 80134f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80134f6:	d10f      	bne.n	8013518 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 80134f8:	69fb      	ldr	r3, [r7, #28]
 80134fa:	681a      	ldr	r2, [r3, #0]
 80134fc:	683b      	ldr	r3, [r7, #0]
 80134fe:	3304      	adds	r3, #4
 8013500:	681b      	ldr	r3, [r3, #0]
 8013502:	429a      	cmp	r2, r3
 8013504:	d008      	beq.n	8013518 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8013506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013508:	681a      	ldr	r2, [r3, #0]
 801350a:	683b      	ldr	r3, [r7, #0]
 801350c:	3304      	adds	r3, #4
 801350e:	681b      	ldr	r3, [r3, #0]
 8013510:	429a      	cmp	r2, r3
 8013512:	d101      	bne.n	8013518 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8013514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013516:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8013518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801351a:	8a9b      	ldrh	r3, [r3, #20]
 801351c:	8a3a      	ldrh	r2, [r7, #16]
 801351e:	429a      	cmp	r2, r3
 8013520:	d118      	bne.n	8013554 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8013522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013524:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8013526:	2b00      	cmp	r3, #0
 8013528:	d005      	beq.n	8013536 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801352a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801352c:	685a      	ldr	r2, [r3, #4]
 801352e:	4b43      	ldr	r3, [pc, #268]	; (801363c <udp_input+0x218>)
 8013530:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8013532:	429a      	cmp	r2, r3
 8013534:	d10e      	bne.n	8013554 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8013536:	6a3b      	ldr	r3, [r7, #32]
 8013538:	2b00      	cmp	r3, #0
 801353a:	d014      	beq.n	8013566 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 801353c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801353e:	68da      	ldr	r2, [r3, #12]
 8013540:	6a3b      	ldr	r3, [r7, #32]
 8013542:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8013544:	4b3e      	ldr	r3, [pc, #248]	; (8013640 <udp_input+0x21c>)
 8013546:	681a      	ldr	r2, [r3, #0]
 8013548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801354a:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 801354c:	4a3c      	ldr	r2, [pc, #240]	; (8013640 <udp_input+0x21c>)
 801354e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013550:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8013552:	e008      	b.n	8013566 <udp_input+0x142>
      }
    }

    prev = pcb;
 8013554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013556:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801355a:	68db      	ldr	r3, [r3, #12]
 801355c:	627b      	str	r3, [r7, #36]	; 0x24
 801355e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013560:	2b00      	cmp	r3, #0
 8013562:	d1a7      	bne.n	80134b4 <udp_input+0x90>
 8013564:	e000      	b.n	8013568 <udp_input+0x144>
        break;
 8013566:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8013568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801356a:	2b00      	cmp	r3, #0
 801356c:	d101      	bne.n	8013572 <udp_input+0x14e>
    pcb = uncon_pcb;
 801356e:	69fb      	ldr	r3, [r7, #28]
 8013570:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8013572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013574:	2b00      	cmp	r3, #0
 8013576:	d002      	beq.n	801357e <udp_input+0x15a>
    for_us = 1;
 8013578:	2301      	movs	r3, #1
 801357a:	76fb      	strb	r3, [r7, #27]
 801357c:	e00a      	b.n	8013594 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 801357e:	683b      	ldr	r3, [r7, #0]
 8013580:	3304      	adds	r3, #4
 8013582:	681a      	ldr	r2, [r3, #0]
 8013584:	4b2d      	ldr	r3, [pc, #180]	; (801363c <udp_input+0x218>)
 8013586:	695b      	ldr	r3, [r3, #20]
 8013588:	429a      	cmp	r2, r3
 801358a:	bf0c      	ite	eq
 801358c:	2301      	moveq	r3, #1
 801358e:	2300      	movne	r3, #0
 8013590:	b2db      	uxtb	r3, r3
 8013592:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8013594:	7efb      	ldrb	r3, [r7, #27]
 8013596:	2b00      	cmp	r3, #0
 8013598:	d041      	beq.n	801361e <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801359a:	2108      	movs	r1, #8
 801359c:	6878      	ldr	r0, [r7, #4]
 801359e:	f7fa f911 	bl	800d7c4 <pbuf_remove_header>
 80135a2:	4603      	mov	r3, r0
 80135a4:	2b00      	cmp	r3, #0
 80135a6:	d00a      	beq.n	80135be <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 80135a8:	4b20      	ldr	r3, [pc, #128]	; (801362c <udp_input+0x208>)
 80135aa:	f44f 72b8 	mov.w	r2, #368	; 0x170
 80135ae:	4925      	ldr	r1, [pc, #148]	; (8013644 <udp_input+0x220>)
 80135b0:	4820      	ldr	r0, [pc, #128]	; (8013634 <udp_input+0x210>)
 80135b2:	f005 fa0b 	bl	80189cc <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 80135b6:	6878      	ldr	r0, [r7, #4]
 80135b8:	f7fa f98a 	bl	800d8d0 <pbuf_free>
      goto end;
 80135bc:	e032      	b.n	8013624 <udp_input+0x200>
    }

    if (pcb != NULL) {
 80135be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80135c0:	2b00      	cmp	r3, #0
 80135c2:	d012      	beq.n	80135ea <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 80135c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80135c6:	699b      	ldr	r3, [r3, #24]
 80135c8:	2b00      	cmp	r3, #0
 80135ca:	d00a      	beq.n	80135e2 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 80135cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80135ce:	699c      	ldr	r4, [r3, #24]
 80135d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80135d2:	69d8      	ldr	r0, [r3, #28]
 80135d4:	8a3b      	ldrh	r3, [r7, #16]
 80135d6:	9300      	str	r3, [sp, #0]
 80135d8:	4b1b      	ldr	r3, [pc, #108]	; (8013648 <udp_input+0x224>)
 80135da:	687a      	ldr	r2, [r7, #4]
 80135dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80135de:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 80135e0:	e021      	b.n	8013626 <udp_input+0x202>
        pbuf_free(p);
 80135e2:	6878      	ldr	r0, [r7, #4]
 80135e4:	f7fa f974 	bl	800d8d0 <pbuf_free>
        goto end;
 80135e8:	e01c      	b.n	8013624 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 80135ea:	7cfb      	ldrb	r3, [r7, #19]
 80135ec:	2b00      	cmp	r3, #0
 80135ee:	d112      	bne.n	8013616 <udp_input+0x1f2>
 80135f0:	4b12      	ldr	r3, [pc, #72]	; (801363c <udp_input+0x218>)
 80135f2:	695b      	ldr	r3, [r3, #20]
 80135f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80135f8:	2be0      	cmp	r3, #224	; 0xe0
 80135fa:	d00c      	beq.n	8013616 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 80135fc:	4b0f      	ldr	r3, [pc, #60]	; (801363c <udp_input+0x218>)
 80135fe:	899b      	ldrh	r3, [r3, #12]
 8013600:	3308      	adds	r3, #8
 8013602:	b29b      	uxth	r3, r3
 8013604:	b21b      	sxth	r3, r3
 8013606:	4619      	mov	r1, r3
 8013608:	6878      	ldr	r0, [r7, #4]
 801360a:	f7fa f94e 	bl	800d8aa <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801360e:	2103      	movs	r1, #3
 8013610:	6878      	ldr	r0, [r7, #4]
 8013612:	f003 f9bf 	bl	8016994 <icmp_dest_unreach>
      pbuf_free(p);
 8013616:	6878      	ldr	r0, [r7, #4]
 8013618:	f7fa f95a 	bl	800d8d0 <pbuf_free>
  return;
 801361c:	e003      	b.n	8013626 <udp_input+0x202>
    pbuf_free(p);
 801361e:	6878      	ldr	r0, [r7, #4]
 8013620:	f7fa f956 	bl	800d8d0 <pbuf_free>
  return;
 8013624:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8013626:	372c      	adds	r7, #44	; 0x2c
 8013628:	46bd      	mov	sp, r7
 801362a:	bd90      	pop	{r4, r7, pc}
 801362c:	0801ffbc 	.word	0x0801ffbc
 8013630:	08020060 	.word	0x08020060
 8013634:	08020010 	.word	0x08020010
 8013638:	08020078 	.word	0x08020078
 801363c:	2000402c 	.word	0x2000402c
 8013640:	20007168 	.word	0x20007168
 8013644:	08020094 	.word	0x08020094
 8013648:	2000403c 	.word	0x2000403c

0801364c <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 801364c:	b580      	push	{r7, lr}
 801364e:	b088      	sub	sp, #32
 8013650:	af02      	add	r7, sp, #8
 8013652:	60f8      	str	r0, [r7, #12]
 8013654:	60b9      	str	r1, [r7, #8]
 8013656:	607a      	str	r2, [r7, #4]
 8013658:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 801365a:	68fb      	ldr	r3, [r7, #12]
 801365c:	2b00      	cmp	r3, #0
 801365e:	d109      	bne.n	8013674 <udp_sendto_if+0x28>
 8013660:	4b2e      	ldr	r3, [pc, #184]	; (801371c <udp_sendto_if+0xd0>)
 8013662:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013666:	492e      	ldr	r1, [pc, #184]	; (8013720 <udp_sendto_if+0xd4>)
 8013668:	482e      	ldr	r0, [pc, #184]	; (8013724 <udp_sendto_if+0xd8>)
 801366a:	f005 f9af 	bl	80189cc <iprintf>
 801366e:	f06f 030f 	mvn.w	r3, #15
 8013672:	e04f      	b.n	8013714 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8013674:	68bb      	ldr	r3, [r7, #8]
 8013676:	2b00      	cmp	r3, #0
 8013678:	d109      	bne.n	801368e <udp_sendto_if+0x42>
 801367a:	4b28      	ldr	r3, [pc, #160]	; (801371c <udp_sendto_if+0xd0>)
 801367c:	f240 2281 	movw	r2, #641	; 0x281
 8013680:	4929      	ldr	r1, [pc, #164]	; (8013728 <udp_sendto_if+0xdc>)
 8013682:	4828      	ldr	r0, [pc, #160]	; (8013724 <udp_sendto_if+0xd8>)
 8013684:	f005 f9a2 	bl	80189cc <iprintf>
 8013688:	f06f 030f 	mvn.w	r3, #15
 801368c:	e042      	b.n	8013714 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801368e:	687b      	ldr	r3, [r7, #4]
 8013690:	2b00      	cmp	r3, #0
 8013692:	d109      	bne.n	80136a8 <udp_sendto_if+0x5c>
 8013694:	4b21      	ldr	r3, [pc, #132]	; (801371c <udp_sendto_if+0xd0>)
 8013696:	f240 2282 	movw	r2, #642	; 0x282
 801369a:	4924      	ldr	r1, [pc, #144]	; (801372c <udp_sendto_if+0xe0>)
 801369c:	4821      	ldr	r0, [pc, #132]	; (8013724 <udp_sendto_if+0xd8>)
 801369e:	f005 f995 	bl	80189cc <iprintf>
 80136a2:	f06f 030f 	mvn.w	r3, #15
 80136a6:	e035      	b.n	8013714 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 80136a8:	6a3b      	ldr	r3, [r7, #32]
 80136aa:	2b00      	cmp	r3, #0
 80136ac:	d109      	bne.n	80136c2 <udp_sendto_if+0x76>
 80136ae:	4b1b      	ldr	r3, [pc, #108]	; (801371c <udp_sendto_if+0xd0>)
 80136b0:	f240 2283 	movw	r2, #643	; 0x283
 80136b4:	491e      	ldr	r1, [pc, #120]	; (8013730 <udp_sendto_if+0xe4>)
 80136b6:	481b      	ldr	r0, [pc, #108]	; (8013724 <udp_sendto_if+0xd8>)
 80136b8:	f005 f988 	bl	80189cc <iprintf>
 80136bc:	f06f 030f 	mvn.w	r3, #15
 80136c0:	e028      	b.n	8013714 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80136c2:	68fb      	ldr	r3, [r7, #12]
 80136c4:	2b00      	cmp	r3, #0
 80136c6:	d009      	beq.n	80136dc <udp_sendto_if+0x90>
 80136c8:	68fb      	ldr	r3, [r7, #12]
 80136ca:	681b      	ldr	r3, [r3, #0]
 80136cc:	2b00      	cmp	r3, #0
 80136ce:	d005      	beq.n	80136dc <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 80136d0:	68fb      	ldr	r3, [r7, #12]
 80136d2:	681b      	ldr	r3, [r3, #0]
 80136d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80136d8:	2be0      	cmp	r3, #224	; 0xe0
 80136da:	d103      	bne.n	80136e4 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 80136dc:	6a3b      	ldr	r3, [r7, #32]
 80136de:	3304      	adds	r3, #4
 80136e0:	617b      	str	r3, [r7, #20]
 80136e2:	e00b      	b.n	80136fc <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 80136e4:	68fb      	ldr	r3, [r7, #12]
 80136e6:	681a      	ldr	r2, [r3, #0]
 80136e8:	6a3b      	ldr	r3, [r7, #32]
 80136ea:	3304      	adds	r3, #4
 80136ec:	681b      	ldr	r3, [r3, #0]
 80136ee:	429a      	cmp	r2, r3
 80136f0:	d002      	beq.n	80136f8 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 80136f2:	f06f 0303 	mvn.w	r3, #3
 80136f6:	e00d      	b.n	8013714 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 80136f8:	68fb      	ldr	r3, [r7, #12]
 80136fa:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 80136fc:	887a      	ldrh	r2, [r7, #2]
 80136fe:	697b      	ldr	r3, [r7, #20]
 8013700:	9301      	str	r3, [sp, #4]
 8013702:	6a3b      	ldr	r3, [r7, #32]
 8013704:	9300      	str	r3, [sp, #0]
 8013706:	4613      	mov	r3, r2
 8013708:	687a      	ldr	r2, [r7, #4]
 801370a:	68b9      	ldr	r1, [r7, #8]
 801370c:	68f8      	ldr	r0, [r7, #12]
 801370e:	f000 f811 	bl	8013734 <udp_sendto_if_src>
 8013712:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8013714:	4618      	mov	r0, r3
 8013716:	3718      	adds	r7, #24
 8013718:	46bd      	mov	sp, r7
 801371a:	bd80      	pop	{r7, pc}
 801371c:	0801ffbc 	.word	0x0801ffbc
 8013720:	08020130 	.word	0x08020130
 8013724:	08020010 	.word	0x08020010
 8013728:	0802014c 	.word	0x0802014c
 801372c:	08020168 	.word	0x08020168
 8013730:	08020188 	.word	0x08020188

08013734 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8013734:	b580      	push	{r7, lr}
 8013736:	b08c      	sub	sp, #48	; 0x30
 8013738:	af04      	add	r7, sp, #16
 801373a:	60f8      	str	r0, [r7, #12]
 801373c:	60b9      	str	r1, [r7, #8]
 801373e:	607a      	str	r2, [r7, #4]
 8013740:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8013742:	68fb      	ldr	r3, [r7, #12]
 8013744:	2b00      	cmp	r3, #0
 8013746:	d109      	bne.n	801375c <udp_sendto_if_src+0x28>
 8013748:	4b65      	ldr	r3, [pc, #404]	; (80138e0 <udp_sendto_if_src+0x1ac>)
 801374a:	f240 22d1 	movw	r2, #721	; 0x2d1
 801374e:	4965      	ldr	r1, [pc, #404]	; (80138e4 <udp_sendto_if_src+0x1b0>)
 8013750:	4865      	ldr	r0, [pc, #404]	; (80138e8 <udp_sendto_if_src+0x1b4>)
 8013752:	f005 f93b 	bl	80189cc <iprintf>
 8013756:	f06f 030f 	mvn.w	r3, #15
 801375a:	e0bc      	b.n	80138d6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 801375c:	68bb      	ldr	r3, [r7, #8]
 801375e:	2b00      	cmp	r3, #0
 8013760:	d109      	bne.n	8013776 <udp_sendto_if_src+0x42>
 8013762:	4b5f      	ldr	r3, [pc, #380]	; (80138e0 <udp_sendto_if_src+0x1ac>)
 8013764:	f240 22d2 	movw	r2, #722	; 0x2d2
 8013768:	4960      	ldr	r1, [pc, #384]	; (80138ec <udp_sendto_if_src+0x1b8>)
 801376a:	485f      	ldr	r0, [pc, #380]	; (80138e8 <udp_sendto_if_src+0x1b4>)
 801376c:	f005 f92e 	bl	80189cc <iprintf>
 8013770:	f06f 030f 	mvn.w	r3, #15
 8013774:	e0af      	b.n	80138d6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8013776:	687b      	ldr	r3, [r7, #4]
 8013778:	2b00      	cmp	r3, #0
 801377a:	d109      	bne.n	8013790 <udp_sendto_if_src+0x5c>
 801377c:	4b58      	ldr	r3, [pc, #352]	; (80138e0 <udp_sendto_if_src+0x1ac>)
 801377e:	f240 22d3 	movw	r2, #723	; 0x2d3
 8013782:	495b      	ldr	r1, [pc, #364]	; (80138f0 <udp_sendto_if_src+0x1bc>)
 8013784:	4858      	ldr	r0, [pc, #352]	; (80138e8 <udp_sendto_if_src+0x1b4>)
 8013786:	f005 f921 	bl	80189cc <iprintf>
 801378a:	f06f 030f 	mvn.w	r3, #15
 801378e:	e0a2      	b.n	80138d6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8013790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013792:	2b00      	cmp	r3, #0
 8013794:	d109      	bne.n	80137aa <udp_sendto_if_src+0x76>
 8013796:	4b52      	ldr	r3, [pc, #328]	; (80138e0 <udp_sendto_if_src+0x1ac>)
 8013798:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 801379c:	4955      	ldr	r1, [pc, #340]	; (80138f4 <udp_sendto_if_src+0x1c0>)
 801379e:	4852      	ldr	r0, [pc, #328]	; (80138e8 <udp_sendto_if_src+0x1b4>)
 80137a0:	f005 f914 	bl	80189cc <iprintf>
 80137a4:	f06f 030f 	mvn.w	r3, #15
 80137a8:	e095      	b.n	80138d6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 80137aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80137ac:	2b00      	cmp	r3, #0
 80137ae:	d109      	bne.n	80137c4 <udp_sendto_if_src+0x90>
 80137b0:	4b4b      	ldr	r3, [pc, #300]	; (80138e0 <udp_sendto_if_src+0x1ac>)
 80137b2:	f240 22d5 	movw	r2, #725	; 0x2d5
 80137b6:	4950      	ldr	r1, [pc, #320]	; (80138f8 <udp_sendto_if_src+0x1c4>)
 80137b8:	484b      	ldr	r0, [pc, #300]	; (80138e8 <udp_sendto_if_src+0x1b4>)
 80137ba:	f005 f907 	bl	80189cc <iprintf>
 80137be:	f06f 030f 	mvn.w	r3, #15
 80137c2:	e088      	b.n	80138d6 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 80137c4:	68fb      	ldr	r3, [r7, #12]
 80137c6:	8a5b      	ldrh	r3, [r3, #18]
 80137c8:	2b00      	cmp	r3, #0
 80137ca:	d10f      	bne.n	80137ec <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 80137cc:	68f9      	ldr	r1, [r7, #12]
 80137ce:	68fb      	ldr	r3, [r7, #12]
 80137d0:	8a5b      	ldrh	r3, [r3, #18]
 80137d2:	461a      	mov	r2, r3
 80137d4:	68f8      	ldr	r0, [r7, #12]
 80137d6:	f000 f893 	bl	8013900 <udp_bind>
 80137da:	4603      	mov	r3, r0
 80137dc:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 80137de:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80137e2:	2b00      	cmp	r3, #0
 80137e4:	d002      	beq.n	80137ec <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 80137e6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80137ea:	e074      	b.n	80138d6 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 80137ec:	68bb      	ldr	r3, [r7, #8]
 80137ee:	891b      	ldrh	r3, [r3, #8]
 80137f0:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 80137f4:	4293      	cmp	r3, r2
 80137f6:	d902      	bls.n	80137fe <udp_sendto_if_src+0xca>
    return ERR_MEM;
 80137f8:	f04f 33ff 	mov.w	r3, #4294967295
 80137fc:	e06b      	b.n	80138d6 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 80137fe:	2108      	movs	r1, #8
 8013800:	68b8      	ldr	r0, [r7, #8]
 8013802:	f7f9 ffcf 	bl	800d7a4 <pbuf_add_header>
 8013806:	4603      	mov	r3, r0
 8013808:	2b00      	cmp	r3, #0
 801380a:	d015      	beq.n	8013838 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 801380c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013810:	2108      	movs	r1, #8
 8013812:	2022      	movs	r0, #34	; 0x22
 8013814:	f7f9 fd78 	bl	800d308 <pbuf_alloc>
 8013818:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 801381a:	69fb      	ldr	r3, [r7, #28]
 801381c:	2b00      	cmp	r3, #0
 801381e:	d102      	bne.n	8013826 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8013820:	f04f 33ff 	mov.w	r3, #4294967295
 8013824:	e057      	b.n	80138d6 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 8013826:	68bb      	ldr	r3, [r7, #8]
 8013828:	891b      	ldrh	r3, [r3, #8]
 801382a:	2b00      	cmp	r3, #0
 801382c:	d006      	beq.n	801383c <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 801382e:	68b9      	ldr	r1, [r7, #8]
 8013830:	69f8      	ldr	r0, [r7, #28]
 8013832:	f7fa f965 	bl	800db00 <pbuf_chain>
 8013836:	e001      	b.n	801383c <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8013838:	68bb      	ldr	r3, [r7, #8]
 801383a:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 801383c:	69fb      	ldr	r3, [r7, #28]
 801383e:	895b      	ldrh	r3, [r3, #10]
 8013840:	2b07      	cmp	r3, #7
 8013842:	d806      	bhi.n	8013852 <udp_sendto_if_src+0x11e>
 8013844:	4b26      	ldr	r3, [pc, #152]	; (80138e0 <udp_sendto_if_src+0x1ac>)
 8013846:	f240 320d 	movw	r2, #781	; 0x30d
 801384a:	492c      	ldr	r1, [pc, #176]	; (80138fc <udp_sendto_if_src+0x1c8>)
 801384c:	4826      	ldr	r0, [pc, #152]	; (80138e8 <udp_sendto_if_src+0x1b4>)
 801384e:	f005 f8bd 	bl	80189cc <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8013852:	69fb      	ldr	r3, [r7, #28]
 8013854:	685b      	ldr	r3, [r3, #4]
 8013856:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8013858:	68fb      	ldr	r3, [r7, #12]
 801385a:	8a5b      	ldrh	r3, [r3, #18]
 801385c:	4618      	mov	r0, r3
 801385e:	f7f8 fd9b 	bl	800c398 <lwip_htons>
 8013862:	4603      	mov	r3, r0
 8013864:	461a      	mov	r2, r3
 8013866:	697b      	ldr	r3, [r7, #20]
 8013868:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 801386a:	887b      	ldrh	r3, [r7, #2]
 801386c:	4618      	mov	r0, r3
 801386e:	f7f8 fd93 	bl	800c398 <lwip_htons>
 8013872:	4603      	mov	r3, r0
 8013874:	461a      	mov	r2, r3
 8013876:	697b      	ldr	r3, [r7, #20]
 8013878:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 801387a:	697b      	ldr	r3, [r7, #20]
 801387c:	2200      	movs	r2, #0
 801387e:	719a      	strb	r2, [r3, #6]
 8013880:	2200      	movs	r2, #0
 8013882:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8013884:	69fb      	ldr	r3, [r7, #28]
 8013886:	891b      	ldrh	r3, [r3, #8]
 8013888:	4618      	mov	r0, r3
 801388a:	f7f8 fd85 	bl	800c398 <lwip_htons>
 801388e:	4603      	mov	r3, r0
 8013890:	461a      	mov	r2, r3
 8013892:	697b      	ldr	r3, [r7, #20]
 8013894:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 8013896:	2311      	movs	r3, #17
 8013898:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 801389a:	68fb      	ldr	r3, [r7, #12]
 801389c:	7adb      	ldrb	r3, [r3, #11]
 801389e:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 80138a0:	68fb      	ldr	r3, [r7, #12]
 80138a2:	7a9b      	ldrb	r3, [r3, #10]
 80138a4:	7cb9      	ldrb	r1, [r7, #18]
 80138a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80138a8:	9202      	str	r2, [sp, #8]
 80138aa:	7cfa      	ldrb	r2, [r7, #19]
 80138ac:	9201      	str	r2, [sp, #4]
 80138ae:	9300      	str	r3, [sp, #0]
 80138b0:	460b      	mov	r3, r1
 80138b2:	687a      	ldr	r2, [r7, #4]
 80138b4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80138b6:	69f8      	ldr	r0, [r7, #28]
 80138b8:	f003 fafc 	bl	8016eb4 <ip4_output_if_src>
 80138bc:	4603      	mov	r3, r0
 80138be:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 80138c0:	69fa      	ldr	r2, [r7, #28]
 80138c2:	68bb      	ldr	r3, [r7, #8]
 80138c4:	429a      	cmp	r2, r3
 80138c6:	d004      	beq.n	80138d2 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 80138c8:	69f8      	ldr	r0, [r7, #28]
 80138ca:	f7fa f801 	bl	800d8d0 <pbuf_free>
    q = NULL;
 80138ce:	2300      	movs	r3, #0
 80138d0:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 80138d2:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 80138d6:	4618      	mov	r0, r3
 80138d8:	3720      	adds	r7, #32
 80138da:	46bd      	mov	sp, r7
 80138dc:	bd80      	pop	{r7, pc}
 80138de:	bf00      	nop
 80138e0:	0801ffbc 	.word	0x0801ffbc
 80138e4:	080201a8 	.word	0x080201a8
 80138e8:	08020010 	.word	0x08020010
 80138ec:	080201c8 	.word	0x080201c8
 80138f0:	080201e8 	.word	0x080201e8
 80138f4:	0802020c 	.word	0x0802020c
 80138f8:	08020230 	.word	0x08020230
 80138fc:	08020254 	.word	0x08020254

08013900 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8013900:	b580      	push	{r7, lr}
 8013902:	b086      	sub	sp, #24
 8013904:	af00      	add	r7, sp, #0
 8013906:	60f8      	str	r0, [r7, #12]
 8013908:	60b9      	str	r1, [r7, #8]
 801390a:	4613      	mov	r3, r2
 801390c:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801390e:	68bb      	ldr	r3, [r7, #8]
 8013910:	2b00      	cmp	r3, #0
 8013912:	d101      	bne.n	8013918 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8013914:	4b39      	ldr	r3, [pc, #228]	; (80139fc <udp_bind+0xfc>)
 8013916:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8013918:	68fb      	ldr	r3, [r7, #12]
 801391a:	2b00      	cmp	r3, #0
 801391c:	d109      	bne.n	8013932 <udp_bind+0x32>
 801391e:	4b38      	ldr	r3, [pc, #224]	; (8013a00 <udp_bind+0x100>)
 8013920:	f240 32b7 	movw	r2, #951	; 0x3b7
 8013924:	4937      	ldr	r1, [pc, #220]	; (8013a04 <udp_bind+0x104>)
 8013926:	4838      	ldr	r0, [pc, #224]	; (8013a08 <udp_bind+0x108>)
 8013928:	f005 f850 	bl	80189cc <iprintf>
 801392c:	f06f 030f 	mvn.w	r3, #15
 8013930:	e060      	b.n	80139f4 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8013932:	2300      	movs	r3, #0
 8013934:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013936:	4b35      	ldr	r3, [pc, #212]	; (8013a0c <udp_bind+0x10c>)
 8013938:	681b      	ldr	r3, [r3, #0]
 801393a:	617b      	str	r3, [r7, #20]
 801393c:	e009      	b.n	8013952 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 801393e:	68fa      	ldr	r2, [r7, #12]
 8013940:	697b      	ldr	r3, [r7, #20]
 8013942:	429a      	cmp	r2, r3
 8013944:	d102      	bne.n	801394c <udp_bind+0x4c>
      rebind = 1;
 8013946:	2301      	movs	r3, #1
 8013948:	74fb      	strb	r3, [r7, #19]
      break;
 801394a:	e005      	b.n	8013958 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801394c:	697b      	ldr	r3, [r7, #20]
 801394e:	68db      	ldr	r3, [r3, #12]
 8013950:	617b      	str	r3, [r7, #20]
 8013952:	697b      	ldr	r3, [r7, #20]
 8013954:	2b00      	cmp	r3, #0
 8013956:	d1f2      	bne.n	801393e <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8013958:	88fb      	ldrh	r3, [r7, #6]
 801395a:	2b00      	cmp	r3, #0
 801395c:	d109      	bne.n	8013972 <udp_bind+0x72>
    port = udp_new_port();
 801395e:	f7ff fcc5 	bl	80132ec <udp_new_port>
 8013962:	4603      	mov	r3, r0
 8013964:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8013966:	88fb      	ldrh	r3, [r7, #6]
 8013968:	2b00      	cmp	r3, #0
 801396a:	d12c      	bne.n	80139c6 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 801396c:	f06f 0307 	mvn.w	r3, #7
 8013970:	e040      	b.n	80139f4 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013972:	4b26      	ldr	r3, [pc, #152]	; (8013a0c <udp_bind+0x10c>)
 8013974:	681b      	ldr	r3, [r3, #0]
 8013976:	617b      	str	r3, [r7, #20]
 8013978:	e022      	b.n	80139c0 <udp_bind+0xc0>
      if (pcb != ipcb) {
 801397a:	68fa      	ldr	r2, [r7, #12]
 801397c:	697b      	ldr	r3, [r7, #20]
 801397e:	429a      	cmp	r2, r3
 8013980:	d01b      	beq.n	80139ba <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8013982:	697b      	ldr	r3, [r7, #20]
 8013984:	8a5b      	ldrh	r3, [r3, #18]
 8013986:	88fa      	ldrh	r2, [r7, #6]
 8013988:	429a      	cmp	r2, r3
 801398a:	d116      	bne.n	80139ba <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801398c:	697b      	ldr	r3, [r7, #20]
 801398e:	681a      	ldr	r2, [r3, #0]
 8013990:	68bb      	ldr	r3, [r7, #8]
 8013992:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8013994:	429a      	cmp	r2, r3
 8013996:	d00d      	beq.n	80139b4 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8013998:	68bb      	ldr	r3, [r7, #8]
 801399a:	2b00      	cmp	r3, #0
 801399c:	d00a      	beq.n	80139b4 <udp_bind+0xb4>
 801399e:	68bb      	ldr	r3, [r7, #8]
 80139a0:	681b      	ldr	r3, [r3, #0]
 80139a2:	2b00      	cmp	r3, #0
 80139a4:	d006      	beq.n	80139b4 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 80139a6:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80139a8:	2b00      	cmp	r3, #0
 80139aa:	d003      	beq.n	80139b4 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 80139ac:	697b      	ldr	r3, [r7, #20]
 80139ae:	681b      	ldr	r3, [r3, #0]
 80139b0:	2b00      	cmp	r3, #0
 80139b2:	d102      	bne.n	80139ba <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 80139b4:	f06f 0307 	mvn.w	r3, #7
 80139b8:	e01c      	b.n	80139f4 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80139ba:	697b      	ldr	r3, [r7, #20]
 80139bc:	68db      	ldr	r3, [r3, #12]
 80139be:	617b      	str	r3, [r7, #20]
 80139c0:	697b      	ldr	r3, [r7, #20]
 80139c2:	2b00      	cmp	r3, #0
 80139c4:	d1d9      	bne.n	801397a <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 80139c6:	68bb      	ldr	r3, [r7, #8]
 80139c8:	2b00      	cmp	r3, #0
 80139ca:	d002      	beq.n	80139d2 <udp_bind+0xd2>
 80139cc:	68bb      	ldr	r3, [r7, #8]
 80139ce:	681b      	ldr	r3, [r3, #0]
 80139d0:	e000      	b.n	80139d4 <udp_bind+0xd4>
 80139d2:	2300      	movs	r3, #0
 80139d4:	68fa      	ldr	r2, [r7, #12]
 80139d6:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 80139d8:	68fb      	ldr	r3, [r7, #12]
 80139da:	88fa      	ldrh	r2, [r7, #6]
 80139dc:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 80139de:	7cfb      	ldrb	r3, [r7, #19]
 80139e0:	2b00      	cmp	r3, #0
 80139e2:	d106      	bne.n	80139f2 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 80139e4:	4b09      	ldr	r3, [pc, #36]	; (8013a0c <udp_bind+0x10c>)
 80139e6:	681a      	ldr	r2, [r3, #0]
 80139e8:	68fb      	ldr	r3, [r7, #12]
 80139ea:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 80139ec:	4a07      	ldr	r2, [pc, #28]	; (8013a0c <udp_bind+0x10c>)
 80139ee:	68fb      	ldr	r3, [r7, #12]
 80139f0:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 80139f2:	2300      	movs	r3, #0
}
 80139f4:	4618      	mov	r0, r3
 80139f6:	3718      	adds	r7, #24
 80139f8:	46bd      	mov	sp, r7
 80139fa:	bd80      	pop	{r7, pc}
 80139fc:	08020e8c 	.word	0x08020e8c
 8013a00:	0801ffbc 	.word	0x0801ffbc
 8013a04:	08020284 	.word	0x08020284
 8013a08:	08020010 	.word	0x08020010
 8013a0c:	20007168 	.word	0x20007168

08013a10 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8013a10:	b580      	push	{r7, lr}
 8013a12:	b086      	sub	sp, #24
 8013a14:	af00      	add	r7, sp, #0
 8013a16:	60f8      	str	r0, [r7, #12]
 8013a18:	60b9      	str	r1, [r7, #8]
 8013a1a:	4613      	mov	r3, r2
 8013a1c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8013a1e:	68fb      	ldr	r3, [r7, #12]
 8013a20:	2b00      	cmp	r3, #0
 8013a22:	d109      	bne.n	8013a38 <udp_connect+0x28>
 8013a24:	4b2c      	ldr	r3, [pc, #176]	; (8013ad8 <udp_connect+0xc8>)
 8013a26:	f240 4235 	movw	r2, #1077	; 0x435
 8013a2a:	492c      	ldr	r1, [pc, #176]	; (8013adc <udp_connect+0xcc>)
 8013a2c:	482c      	ldr	r0, [pc, #176]	; (8013ae0 <udp_connect+0xd0>)
 8013a2e:	f004 ffcd 	bl	80189cc <iprintf>
 8013a32:	f06f 030f 	mvn.w	r3, #15
 8013a36:	e04b      	b.n	8013ad0 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8013a38:	68bb      	ldr	r3, [r7, #8]
 8013a3a:	2b00      	cmp	r3, #0
 8013a3c:	d109      	bne.n	8013a52 <udp_connect+0x42>
 8013a3e:	4b26      	ldr	r3, [pc, #152]	; (8013ad8 <udp_connect+0xc8>)
 8013a40:	f240 4236 	movw	r2, #1078	; 0x436
 8013a44:	4927      	ldr	r1, [pc, #156]	; (8013ae4 <udp_connect+0xd4>)
 8013a46:	4826      	ldr	r0, [pc, #152]	; (8013ae0 <udp_connect+0xd0>)
 8013a48:	f004 ffc0 	bl	80189cc <iprintf>
 8013a4c:	f06f 030f 	mvn.w	r3, #15
 8013a50:	e03e      	b.n	8013ad0 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 8013a52:	68fb      	ldr	r3, [r7, #12]
 8013a54:	8a5b      	ldrh	r3, [r3, #18]
 8013a56:	2b00      	cmp	r3, #0
 8013a58:	d10f      	bne.n	8013a7a <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8013a5a:	68f9      	ldr	r1, [r7, #12]
 8013a5c:	68fb      	ldr	r3, [r7, #12]
 8013a5e:	8a5b      	ldrh	r3, [r3, #18]
 8013a60:	461a      	mov	r2, r3
 8013a62:	68f8      	ldr	r0, [r7, #12]
 8013a64:	f7ff ff4c 	bl	8013900 <udp_bind>
 8013a68:	4603      	mov	r3, r0
 8013a6a:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8013a6c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013a70:	2b00      	cmp	r3, #0
 8013a72:	d002      	beq.n	8013a7a <udp_connect+0x6a>
      return err;
 8013a74:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013a78:	e02a      	b.n	8013ad0 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 8013a7a:	68bb      	ldr	r3, [r7, #8]
 8013a7c:	2b00      	cmp	r3, #0
 8013a7e:	d002      	beq.n	8013a86 <udp_connect+0x76>
 8013a80:	68bb      	ldr	r3, [r7, #8]
 8013a82:	681b      	ldr	r3, [r3, #0]
 8013a84:	e000      	b.n	8013a88 <udp_connect+0x78>
 8013a86:	2300      	movs	r3, #0
 8013a88:	68fa      	ldr	r2, [r7, #12]
 8013a8a:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 8013a8c:	68fb      	ldr	r3, [r7, #12]
 8013a8e:	88fa      	ldrh	r2, [r7, #6]
 8013a90:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 8013a92:	68fb      	ldr	r3, [r7, #12]
 8013a94:	7c1b      	ldrb	r3, [r3, #16]
 8013a96:	f043 0304 	orr.w	r3, r3, #4
 8013a9a:	b2da      	uxtb	r2, r3
 8013a9c:	68fb      	ldr	r3, [r7, #12]
 8013a9e:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013aa0:	4b11      	ldr	r3, [pc, #68]	; (8013ae8 <udp_connect+0xd8>)
 8013aa2:	681b      	ldr	r3, [r3, #0]
 8013aa4:	617b      	str	r3, [r7, #20]
 8013aa6:	e008      	b.n	8013aba <udp_connect+0xaa>
    if (pcb == ipcb) {
 8013aa8:	68fa      	ldr	r2, [r7, #12]
 8013aaa:	697b      	ldr	r3, [r7, #20]
 8013aac:	429a      	cmp	r2, r3
 8013aae:	d101      	bne.n	8013ab4 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 8013ab0:	2300      	movs	r3, #0
 8013ab2:	e00d      	b.n	8013ad0 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013ab4:	697b      	ldr	r3, [r7, #20]
 8013ab6:	68db      	ldr	r3, [r3, #12]
 8013ab8:	617b      	str	r3, [r7, #20]
 8013aba:	697b      	ldr	r3, [r7, #20]
 8013abc:	2b00      	cmp	r3, #0
 8013abe:	d1f3      	bne.n	8013aa8 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 8013ac0:	4b09      	ldr	r3, [pc, #36]	; (8013ae8 <udp_connect+0xd8>)
 8013ac2:	681a      	ldr	r2, [r3, #0]
 8013ac4:	68fb      	ldr	r3, [r7, #12]
 8013ac6:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 8013ac8:	4a07      	ldr	r2, [pc, #28]	; (8013ae8 <udp_connect+0xd8>)
 8013aca:	68fb      	ldr	r3, [r7, #12]
 8013acc:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 8013ace:	2300      	movs	r3, #0
}
 8013ad0:	4618      	mov	r0, r3
 8013ad2:	3718      	adds	r7, #24
 8013ad4:	46bd      	mov	sp, r7
 8013ad6:	bd80      	pop	{r7, pc}
 8013ad8:	0801ffbc 	.word	0x0801ffbc
 8013adc:	0802029c 	.word	0x0802029c
 8013ae0:	08020010 	.word	0x08020010
 8013ae4:	080202b8 	.word	0x080202b8
 8013ae8:	20007168 	.word	0x20007168

08013aec <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8013aec:	b580      	push	{r7, lr}
 8013aee:	b084      	sub	sp, #16
 8013af0:	af00      	add	r7, sp, #0
 8013af2:	60f8      	str	r0, [r7, #12]
 8013af4:	60b9      	str	r1, [r7, #8]
 8013af6:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8013af8:	68fb      	ldr	r3, [r7, #12]
 8013afa:	2b00      	cmp	r3, #0
 8013afc:	d107      	bne.n	8013b0e <udp_recv+0x22>
 8013afe:	4b08      	ldr	r3, [pc, #32]	; (8013b20 <udp_recv+0x34>)
 8013b00:	f240 428a 	movw	r2, #1162	; 0x48a
 8013b04:	4907      	ldr	r1, [pc, #28]	; (8013b24 <udp_recv+0x38>)
 8013b06:	4808      	ldr	r0, [pc, #32]	; (8013b28 <udp_recv+0x3c>)
 8013b08:	f004 ff60 	bl	80189cc <iprintf>
 8013b0c:	e005      	b.n	8013b1a <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8013b0e:	68fb      	ldr	r3, [r7, #12]
 8013b10:	68ba      	ldr	r2, [r7, #8]
 8013b12:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8013b14:	68fb      	ldr	r3, [r7, #12]
 8013b16:	687a      	ldr	r2, [r7, #4]
 8013b18:	61da      	str	r2, [r3, #28]
}
 8013b1a:	3710      	adds	r7, #16
 8013b1c:	46bd      	mov	sp, r7
 8013b1e:	bd80      	pop	{r7, pc}
 8013b20:	0801ffbc 	.word	0x0801ffbc
 8013b24:	080202f0 	.word	0x080202f0
 8013b28:	08020010 	.word	0x08020010

08013b2c <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8013b2c:	b580      	push	{r7, lr}
 8013b2e:	b084      	sub	sp, #16
 8013b30:	af00      	add	r7, sp, #0
 8013b32:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8013b34:	687b      	ldr	r3, [r7, #4]
 8013b36:	2b00      	cmp	r3, #0
 8013b38:	d107      	bne.n	8013b4a <udp_remove+0x1e>
 8013b3a:	4b19      	ldr	r3, [pc, #100]	; (8013ba0 <udp_remove+0x74>)
 8013b3c:	f240 42a1 	movw	r2, #1185	; 0x4a1
 8013b40:	4918      	ldr	r1, [pc, #96]	; (8013ba4 <udp_remove+0x78>)
 8013b42:	4819      	ldr	r0, [pc, #100]	; (8013ba8 <udp_remove+0x7c>)
 8013b44:	f004 ff42 	bl	80189cc <iprintf>
 8013b48:	e026      	b.n	8013b98 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8013b4a:	4b18      	ldr	r3, [pc, #96]	; (8013bac <udp_remove+0x80>)
 8013b4c:	681b      	ldr	r3, [r3, #0]
 8013b4e:	687a      	ldr	r2, [r7, #4]
 8013b50:	429a      	cmp	r2, r3
 8013b52:	d105      	bne.n	8013b60 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8013b54:	4b15      	ldr	r3, [pc, #84]	; (8013bac <udp_remove+0x80>)
 8013b56:	681b      	ldr	r3, [r3, #0]
 8013b58:	68db      	ldr	r3, [r3, #12]
 8013b5a:	4a14      	ldr	r2, [pc, #80]	; (8013bac <udp_remove+0x80>)
 8013b5c:	6013      	str	r3, [r2, #0]
 8013b5e:	e017      	b.n	8013b90 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8013b60:	4b12      	ldr	r3, [pc, #72]	; (8013bac <udp_remove+0x80>)
 8013b62:	681b      	ldr	r3, [r3, #0]
 8013b64:	60fb      	str	r3, [r7, #12]
 8013b66:	e010      	b.n	8013b8a <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8013b68:	68fb      	ldr	r3, [r7, #12]
 8013b6a:	68db      	ldr	r3, [r3, #12]
 8013b6c:	2b00      	cmp	r3, #0
 8013b6e:	d009      	beq.n	8013b84 <udp_remove+0x58>
 8013b70:	68fb      	ldr	r3, [r7, #12]
 8013b72:	68db      	ldr	r3, [r3, #12]
 8013b74:	687a      	ldr	r2, [r7, #4]
 8013b76:	429a      	cmp	r2, r3
 8013b78:	d104      	bne.n	8013b84 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8013b7a:	687b      	ldr	r3, [r7, #4]
 8013b7c:	68da      	ldr	r2, [r3, #12]
 8013b7e:	68fb      	ldr	r3, [r7, #12]
 8013b80:	60da      	str	r2, [r3, #12]
        break;
 8013b82:	e005      	b.n	8013b90 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8013b84:	68fb      	ldr	r3, [r7, #12]
 8013b86:	68db      	ldr	r3, [r3, #12]
 8013b88:	60fb      	str	r3, [r7, #12]
 8013b8a:	68fb      	ldr	r3, [r7, #12]
 8013b8c:	2b00      	cmp	r3, #0
 8013b8e:	d1eb      	bne.n	8013b68 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8013b90:	6879      	ldr	r1, [r7, #4]
 8013b92:	2000      	movs	r0, #0
 8013b94:	f7f9 f8a2 	bl	800ccdc <memp_free>
}
 8013b98:	3710      	adds	r7, #16
 8013b9a:	46bd      	mov	sp, r7
 8013b9c:	bd80      	pop	{r7, pc}
 8013b9e:	bf00      	nop
 8013ba0:	0801ffbc 	.word	0x0801ffbc
 8013ba4:	08020308 	.word	0x08020308
 8013ba8:	08020010 	.word	0x08020010
 8013bac:	20007168 	.word	0x20007168

08013bb0 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8013bb0:	b580      	push	{r7, lr}
 8013bb2:	b082      	sub	sp, #8
 8013bb4:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8013bb6:	2000      	movs	r0, #0
 8013bb8:	f7f9 f844 	bl	800cc44 <memp_malloc>
 8013bbc:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8013bbe:	687b      	ldr	r3, [r7, #4]
 8013bc0:	2b00      	cmp	r3, #0
 8013bc2:	d007      	beq.n	8013bd4 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8013bc4:	2220      	movs	r2, #32
 8013bc6:	2100      	movs	r1, #0
 8013bc8:	6878      	ldr	r0, [r7, #4]
 8013bca:	f004 f9e3 	bl	8017f94 <memset>
    pcb->ttl = UDP_TTL;
 8013bce:	687b      	ldr	r3, [r7, #4]
 8013bd0:	22ff      	movs	r2, #255	; 0xff
 8013bd2:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8013bd4:	687b      	ldr	r3, [r7, #4]
}
 8013bd6:	4618      	mov	r0, r3
 8013bd8:	3708      	adds	r7, #8
 8013bda:	46bd      	mov	sp, r7
 8013bdc:	bd80      	pop	{r7, pc}
	...

08013be0 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8013be0:	b480      	push	{r7}
 8013be2:	b085      	sub	sp, #20
 8013be4:	af00      	add	r7, sp, #0
 8013be6:	6078      	str	r0, [r7, #4]
 8013be8:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8013bea:	687b      	ldr	r3, [r7, #4]
 8013bec:	2b00      	cmp	r3, #0
 8013bee:	d01e      	beq.n	8013c2e <udp_netif_ip_addr_changed+0x4e>
 8013bf0:	687b      	ldr	r3, [r7, #4]
 8013bf2:	681b      	ldr	r3, [r3, #0]
 8013bf4:	2b00      	cmp	r3, #0
 8013bf6:	d01a      	beq.n	8013c2e <udp_netif_ip_addr_changed+0x4e>
 8013bf8:	683b      	ldr	r3, [r7, #0]
 8013bfa:	2b00      	cmp	r3, #0
 8013bfc:	d017      	beq.n	8013c2e <udp_netif_ip_addr_changed+0x4e>
 8013bfe:	683b      	ldr	r3, [r7, #0]
 8013c00:	681b      	ldr	r3, [r3, #0]
 8013c02:	2b00      	cmp	r3, #0
 8013c04:	d013      	beq.n	8013c2e <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8013c06:	4b0d      	ldr	r3, [pc, #52]	; (8013c3c <udp_netif_ip_addr_changed+0x5c>)
 8013c08:	681b      	ldr	r3, [r3, #0]
 8013c0a:	60fb      	str	r3, [r7, #12]
 8013c0c:	e00c      	b.n	8013c28 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8013c0e:	68fb      	ldr	r3, [r7, #12]
 8013c10:	681a      	ldr	r2, [r3, #0]
 8013c12:	687b      	ldr	r3, [r7, #4]
 8013c14:	681b      	ldr	r3, [r3, #0]
 8013c16:	429a      	cmp	r2, r3
 8013c18:	d103      	bne.n	8013c22 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8013c1a:	683b      	ldr	r3, [r7, #0]
 8013c1c:	681a      	ldr	r2, [r3, #0]
 8013c1e:	68fb      	ldr	r3, [r7, #12]
 8013c20:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8013c22:	68fb      	ldr	r3, [r7, #12]
 8013c24:	68db      	ldr	r3, [r3, #12]
 8013c26:	60fb      	str	r3, [r7, #12]
 8013c28:	68fb      	ldr	r3, [r7, #12]
 8013c2a:	2b00      	cmp	r3, #0
 8013c2c:	d1ef      	bne.n	8013c0e <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8013c2e:	bf00      	nop
 8013c30:	3714      	adds	r7, #20
 8013c32:	46bd      	mov	sp, r7
 8013c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c38:	4770      	bx	lr
 8013c3a:	bf00      	nop
 8013c3c:	20007168 	.word	0x20007168

08013c40 <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 8013c40:	b580      	push	{r7, lr}
 8013c42:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 8013c44:	4b20      	ldr	r3, [pc, #128]	; (8013cc8 <dhcp_inc_pcb_refcount+0x88>)
 8013c46:	781b      	ldrb	r3, [r3, #0]
 8013c48:	2b00      	cmp	r3, #0
 8013c4a:	d133      	bne.n	8013cb4 <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 8013c4c:	4b1f      	ldr	r3, [pc, #124]	; (8013ccc <dhcp_inc_pcb_refcount+0x8c>)
 8013c4e:	681b      	ldr	r3, [r3, #0]
 8013c50:	2b00      	cmp	r3, #0
 8013c52:	d005      	beq.n	8013c60 <dhcp_inc_pcb_refcount+0x20>
 8013c54:	4b1e      	ldr	r3, [pc, #120]	; (8013cd0 <dhcp_inc_pcb_refcount+0x90>)
 8013c56:	22e5      	movs	r2, #229	; 0xe5
 8013c58:	491e      	ldr	r1, [pc, #120]	; (8013cd4 <dhcp_inc_pcb_refcount+0x94>)
 8013c5a:	481f      	ldr	r0, [pc, #124]	; (8013cd8 <dhcp_inc_pcb_refcount+0x98>)
 8013c5c:	f004 feb6 	bl	80189cc <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 8013c60:	f7ff ffa6 	bl	8013bb0 <udp_new>
 8013c64:	4603      	mov	r3, r0
 8013c66:	4a19      	ldr	r2, [pc, #100]	; (8013ccc <dhcp_inc_pcb_refcount+0x8c>)
 8013c68:	6013      	str	r3, [r2, #0]

    if (dhcp_pcb == NULL) {
 8013c6a:	4b18      	ldr	r3, [pc, #96]	; (8013ccc <dhcp_inc_pcb_refcount+0x8c>)
 8013c6c:	681b      	ldr	r3, [r3, #0]
 8013c6e:	2b00      	cmp	r3, #0
 8013c70:	d102      	bne.n	8013c78 <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 8013c72:	f04f 33ff 	mov.w	r3, #4294967295
 8013c76:	e024      	b.n	8013cc2 <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 8013c78:	4b14      	ldr	r3, [pc, #80]	; (8013ccc <dhcp_inc_pcb_refcount+0x8c>)
 8013c7a:	681b      	ldr	r3, [r3, #0]
 8013c7c:	7a5a      	ldrb	r2, [r3, #9]
 8013c7e:	4b13      	ldr	r3, [pc, #76]	; (8013ccc <dhcp_inc_pcb_refcount+0x8c>)
 8013c80:	681b      	ldr	r3, [r3, #0]
 8013c82:	f042 0220 	orr.w	r2, r2, #32
 8013c86:	b2d2      	uxtb	r2, r2
 8013c88:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 8013c8a:	4b10      	ldr	r3, [pc, #64]	; (8013ccc <dhcp_inc_pcb_refcount+0x8c>)
 8013c8c:	681b      	ldr	r3, [r3, #0]
 8013c8e:	2244      	movs	r2, #68	; 0x44
 8013c90:	4912      	ldr	r1, [pc, #72]	; (8013cdc <dhcp_inc_pcb_refcount+0x9c>)
 8013c92:	4618      	mov	r0, r3
 8013c94:	f7ff fe34 	bl	8013900 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 8013c98:	4b0c      	ldr	r3, [pc, #48]	; (8013ccc <dhcp_inc_pcb_refcount+0x8c>)
 8013c9a:	681b      	ldr	r3, [r3, #0]
 8013c9c:	2243      	movs	r2, #67	; 0x43
 8013c9e:	490f      	ldr	r1, [pc, #60]	; (8013cdc <dhcp_inc_pcb_refcount+0x9c>)
 8013ca0:	4618      	mov	r0, r3
 8013ca2:	f7ff feb5 	bl	8013a10 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 8013ca6:	4b09      	ldr	r3, [pc, #36]	; (8013ccc <dhcp_inc_pcb_refcount+0x8c>)
 8013ca8:	681b      	ldr	r3, [r3, #0]
 8013caa:	2200      	movs	r2, #0
 8013cac:	490c      	ldr	r1, [pc, #48]	; (8013ce0 <dhcp_inc_pcb_refcount+0xa0>)
 8013cae:	4618      	mov	r0, r3
 8013cb0:	f7ff ff1c 	bl	8013aec <udp_recv>
  }

  dhcp_pcb_refcount++;
 8013cb4:	4b04      	ldr	r3, [pc, #16]	; (8013cc8 <dhcp_inc_pcb_refcount+0x88>)
 8013cb6:	781b      	ldrb	r3, [r3, #0]
 8013cb8:	3301      	adds	r3, #1
 8013cba:	b2da      	uxtb	r2, r3
 8013cbc:	4b02      	ldr	r3, [pc, #8]	; (8013cc8 <dhcp_inc_pcb_refcount+0x88>)
 8013cbe:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 8013cc0:	2300      	movs	r3, #0
}
 8013cc2:	4618      	mov	r0, r3
 8013cc4:	bd80      	pop	{r7, pc}
 8013cc6:	bf00      	nop
 8013cc8:	200004e0 	.word	0x200004e0
 8013ccc:	200004dc 	.word	0x200004dc
 8013cd0:	08020320 	.word	0x08020320
 8013cd4:	08020358 	.word	0x08020358
 8013cd8:	08020380 	.word	0x08020380
 8013cdc:	08020e8c 	.word	0x08020e8c
 8013ce0:	080154fd 	.word	0x080154fd

08013ce4 <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 8013ce4:	b580      	push	{r7, lr}
 8013ce6:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 8013ce8:	4b0e      	ldr	r3, [pc, #56]	; (8013d24 <dhcp_dec_pcb_refcount+0x40>)
 8013cea:	781b      	ldrb	r3, [r3, #0]
 8013cec:	2b00      	cmp	r3, #0
 8013cee:	d105      	bne.n	8013cfc <dhcp_dec_pcb_refcount+0x18>
 8013cf0:	4b0d      	ldr	r3, [pc, #52]	; (8013d28 <dhcp_dec_pcb_refcount+0x44>)
 8013cf2:	22ff      	movs	r2, #255	; 0xff
 8013cf4:	490d      	ldr	r1, [pc, #52]	; (8013d2c <dhcp_dec_pcb_refcount+0x48>)
 8013cf6:	480e      	ldr	r0, [pc, #56]	; (8013d30 <dhcp_dec_pcb_refcount+0x4c>)
 8013cf8:	f004 fe68 	bl	80189cc <iprintf>
  dhcp_pcb_refcount--;
 8013cfc:	4b09      	ldr	r3, [pc, #36]	; (8013d24 <dhcp_dec_pcb_refcount+0x40>)
 8013cfe:	781b      	ldrb	r3, [r3, #0]
 8013d00:	3b01      	subs	r3, #1
 8013d02:	b2da      	uxtb	r2, r3
 8013d04:	4b07      	ldr	r3, [pc, #28]	; (8013d24 <dhcp_dec_pcb_refcount+0x40>)
 8013d06:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 8013d08:	4b06      	ldr	r3, [pc, #24]	; (8013d24 <dhcp_dec_pcb_refcount+0x40>)
 8013d0a:	781b      	ldrb	r3, [r3, #0]
 8013d0c:	2b00      	cmp	r3, #0
 8013d0e:	d107      	bne.n	8013d20 <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 8013d10:	4b08      	ldr	r3, [pc, #32]	; (8013d34 <dhcp_dec_pcb_refcount+0x50>)
 8013d12:	681b      	ldr	r3, [r3, #0]
 8013d14:	4618      	mov	r0, r3
 8013d16:	f7ff ff09 	bl	8013b2c <udp_remove>
    dhcp_pcb = NULL;
 8013d1a:	4b06      	ldr	r3, [pc, #24]	; (8013d34 <dhcp_dec_pcb_refcount+0x50>)
 8013d1c:	2200      	movs	r2, #0
 8013d1e:	601a      	str	r2, [r3, #0]
  }
}
 8013d20:	bf00      	nop
 8013d22:	bd80      	pop	{r7, pc}
 8013d24:	200004e0 	.word	0x200004e0
 8013d28:	08020320 	.word	0x08020320
 8013d2c:	080203a8 	.word	0x080203a8
 8013d30:	08020380 	.word	0x08020380
 8013d34:	200004dc 	.word	0x200004dc

08013d38 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 8013d38:	b580      	push	{r7, lr}
 8013d3a:	b084      	sub	sp, #16
 8013d3c:	af00      	add	r7, sp, #0
 8013d3e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013d40:	687b      	ldr	r3, [r7, #4]
 8013d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013d44:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8013d46:	210c      	movs	r1, #12
 8013d48:	68f8      	ldr	r0, [r7, #12]
 8013d4a:	f001 f819 	bl	8014d80 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8013d4e:	4b06      	ldr	r3, [pc, #24]	; (8013d68 <dhcp_handle_nak+0x30>)
 8013d50:	4a05      	ldr	r2, [pc, #20]	; (8013d68 <dhcp_handle_nak+0x30>)
 8013d52:	4905      	ldr	r1, [pc, #20]	; (8013d68 <dhcp_handle_nak+0x30>)
 8013d54:	6878      	ldr	r0, [r7, #4]
 8013d56:	f7f9 f963 	bl	800d020 <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 8013d5a:	6878      	ldr	r0, [r7, #4]
 8013d5c:	f000 fc0c 	bl	8014578 <dhcp_discover>
}
 8013d60:	bf00      	nop
 8013d62:	3710      	adds	r7, #16
 8013d64:	46bd      	mov	sp, r7
 8013d66:	bd80      	pop	{r7, pc}
 8013d68:	08020e8c 	.word	0x08020e8c

08013d6c <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 8013d6c:	b580      	push	{r7, lr}
 8013d6e:	b084      	sub	sp, #16
 8013d70:	af00      	add	r7, sp, #0
 8013d72:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013d74:	687b      	ldr	r3, [r7, #4]
 8013d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013d78:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 8013d7a:	2108      	movs	r1, #8
 8013d7c:	68f8      	ldr	r0, [r7, #12]
 8013d7e:	f000 ffff 	bl	8014d80 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 8013d82:	68fb      	ldr	r3, [r7, #12]
 8013d84:	331c      	adds	r3, #28
 8013d86:	2200      	movs	r2, #0
 8013d88:	4619      	mov	r1, r3
 8013d8a:	6878      	ldr	r0, [r7, #4]
 8013d8c:	f002 fb00 	bl	8016390 <etharp_query>
 8013d90:	4603      	mov	r3, r0
 8013d92:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 8013d94:	68fb      	ldr	r3, [r7, #12]
 8013d96:	799b      	ldrb	r3, [r3, #6]
 8013d98:	2bff      	cmp	r3, #255	; 0xff
 8013d9a:	d005      	beq.n	8013da8 <dhcp_check+0x3c>
    dhcp->tries++;
 8013d9c:	68fb      	ldr	r3, [r7, #12]
 8013d9e:	799b      	ldrb	r3, [r3, #6]
 8013da0:	3301      	adds	r3, #1
 8013da2:	b2da      	uxtb	r2, r3
 8013da4:	68fb      	ldr	r3, [r7, #12]
 8013da6:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 8013da8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8013dac:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8013dae:	893b      	ldrh	r3, [r7, #8]
 8013db0:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8013db4:	4a06      	ldr	r2, [pc, #24]	; (8013dd0 <dhcp_check+0x64>)
 8013db6:	fb82 1203 	smull	r1, r2, r2, r3
 8013dba:	1152      	asrs	r2, r2, #5
 8013dbc:	17db      	asrs	r3, r3, #31
 8013dbe:	1ad3      	subs	r3, r2, r3
 8013dc0:	b29a      	uxth	r2, r3
 8013dc2:	68fb      	ldr	r3, [r7, #12]
 8013dc4:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 8013dc6:	bf00      	nop
 8013dc8:	3710      	adds	r7, #16
 8013dca:	46bd      	mov	sp, r7
 8013dcc:	bd80      	pop	{r7, pc}
 8013dce:	bf00      	nop
 8013dd0:	10624dd3 	.word	0x10624dd3

08013dd4 <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 8013dd4:	b580      	push	{r7, lr}
 8013dd6:	b084      	sub	sp, #16
 8013dd8:	af00      	add	r7, sp, #0
 8013dda:	6078      	str	r0, [r7, #4]
 8013ddc:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013dde:	687b      	ldr	r3, [r7, #4]
 8013de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013de2:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 8013de4:	4b0c      	ldr	r3, [pc, #48]	; (8013e18 <dhcp_handle_offer+0x44>)
 8013de6:	789b      	ldrb	r3, [r3, #2]
 8013de8:	2b00      	cmp	r3, #0
 8013dea:	d011      	beq.n	8013e10 <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 8013dec:	68fb      	ldr	r3, [r7, #12]
 8013dee:	2200      	movs	r2, #0
 8013df0:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 8013df2:	4b0a      	ldr	r3, [pc, #40]	; (8013e1c <dhcp_handle_offer+0x48>)
 8013df4:	689b      	ldr	r3, [r3, #8]
 8013df6:	4618      	mov	r0, r3
 8013df8:	f7f8 fae3 	bl	800c3c2 <lwip_htonl>
 8013dfc:	4602      	mov	r2, r0
 8013dfe:	68fb      	ldr	r3, [r7, #12]
 8013e00:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8013e02:	683b      	ldr	r3, [r7, #0]
 8013e04:	691a      	ldr	r2, [r3, #16]
 8013e06:	68fb      	ldr	r3, [r7, #12]
 8013e08:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 8013e0a:	6878      	ldr	r0, [r7, #4]
 8013e0c:	f000 f808 	bl	8013e20 <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 8013e10:	bf00      	nop
 8013e12:	3710      	adds	r7, #16
 8013e14:	46bd      	mov	sp, r7
 8013e16:	bd80      	pop	{r7, pc}
 8013e18:	2000716c 	.word	0x2000716c
 8013e1c:	20007174 	.word	0x20007174

08013e20 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 8013e20:	b5b0      	push	{r4, r5, r7, lr}
 8013e22:	b08a      	sub	sp, #40	; 0x28
 8013e24:	af02      	add	r7, sp, #8
 8013e26:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 8013e28:	687b      	ldr	r3, [r7, #4]
 8013e2a:	2b00      	cmp	r3, #0
 8013e2c:	d109      	bne.n	8013e42 <dhcp_select+0x22>
 8013e2e:	4b71      	ldr	r3, [pc, #452]	; (8013ff4 <dhcp_select+0x1d4>)
 8013e30:	f240 1277 	movw	r2, #375	; 0x177
 8013e34:	4970      	ldr	r1, [pc, #448]	; (8013ff8 <dhcp_select+0x1d8>)
 8013e36:	4871      	ldr	r0, [pc, #452]	; (8013ffc <dhcp_select+0x1dc>)
 8013e38:	f004 fdc8 	bl	80189cc <iprintf>
 8013e3c:	f06f 030f 	mvn.w	r3, #15
 8013e40:	e0d3      	b.n	8013fea <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 8013e42:	687b      	ldr	r3, [r7, #4]
 8013e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013e46:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 8013e48:	69bb      	ldr	r3, [r7, #24]
 8013e4a:	2b00      	cmp	r3, #0
 8013e4c:	d109      	bne.n	8013e62 <dhcp_select+0x42>
 8013e4e:	4b69      	ldr	r3, [pc, #420]	; (8013ff4 <dhcp_select+0x1d4>)
 8013e50:	f240 1279 	movw	r2, #377	; 0x179
 8013e54:	496a      	ldr	r1, [pc, #424]	; (8014000 <dhcp_select+0x1e0>)
 8013e56:	4869      	ldr	r0, [pc, #420]	; (8013ffc <dhcp_select+0x1dc>)
 8013e58:	f004 fdb8 	bl	80189cc <iprintf>
 8013e5c:	f06f 0305 	mvn.w	r3, #5
 8013e60:	e0c3      	b.n	8013fea <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 8013e62:	2101      	movs	r1, #1
 8013e64:	69b8      	ldr	r0, [r7, #24]
 8013e66:	f000 ff8b 	bl	8014d80 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8013e6a:	f107 030c 	add.w	r3, r7, #12
 8013e6e:	2203      	movs	r2, #3
 8013e70:	69b9      	ldr	r1, [r7, #24]
 8013e72:	6878      	ldr	r0, [r7, #4]
 8013e74:	f001 fc10 	bl	8015698 <dhcp_create_msg>
 8013e78:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8013e7a:	697b      	ldr	r3, [r7, #20]
 8013e7c:	2b00      	cmp	r3, #0
 8013e7e:	f000 8085 	beq.w	8013f8c <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8013e82:	697b      	ldr	r3, [r7, #20]
 8013e84:	685b      	ldr	r3, [r3, #4]
 8013e86:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8013e88:	89b8      	ldrh	r0, [r7, #12]
 8013e8a:	693b      	ldr	r3, [r7, #16]
 8013e8c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013e90:	2302      	movs	r3, #2
 8013e92:	2239      	movs	r2, #57	; 0x39
 8013e94:	f000 ff8e 	bl	8014db4 <dhcp_option>
 8013e98:	4603      	mov	r3, r0
 8013e9a:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8013e9c:	89b8      	ldrh	r0, [r7, #12]
 8013e9e:	693b      	ldr	r3, [r7, #16]
 8013ea0:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013ea4:	687b      	ldr	r3, [r7, #4]
 8013ea6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013ea8:	461a      	mov	r2, r3
 8013eaa:	f000 ffdd 	bl	8014e68 <dhcp_option_short>
 8013eae:	4603      	mov	r3, r0
 8013eb0:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8013eb2:	89b8      	ldrh	r0, [r7, #12]
 8013eb4:	693b      	ldr	r3, [r7, #16]
 8013eb6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013eba:	2304      	movs	r3, #4
 8013ebc:	2232      	movs	r2, #50	; 0x32
 8013ebe:	f000 ff79 	bl	8014db4 <dhcp_option>
 8013ec2:	4603      	mov	r3, r0
 8013ec4:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8013ec6:	89bc      	ldrh	r4, [r7, #12]
 8013ec8:	693b      	ldr	r3, [r7, #16]
 8013eca:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8013ece:	69bb      	ldr	r3, [r7, #24]
 8013ed0:	69db      	ldr	r3, [r3, #28]
 8013ed2:	4618      	mov	r0, r3
 8013ed4:	f7f8 fa75 	bl	800c3c2 <lwip_htonl>
 8013ed8:	4603      	mov	r3, r0
 8013eda:	461a      	mov	r2, r3
 8013edc:	4629      	mov	r1, r5
 8013ede:	4620      	mov	r0, r4
 8013ee0:	f000 fff4 	bl	8014ecc <dhcp_option_long>
 8013ee4:	4603      	mov	r3, r0
 8013ee6:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8013ee8:	89b8      	ldrh	r0, [r7, #12]
 8013eea:	693b      	ldr	r3, [r7, #16]
 8013eec:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013ef0:	2304      	movs	r3, #4
 8013ef2:	2236      	movs	r2, #54	; 0x36
 8013ef4:	f000 ff5e 	bl	8014db4 <dhcp_option>
 8013ef8:	4603      	mov	r3, r0
 8013efa:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 8013efc:	89bc      	ldrh	r4, [r7, #12]
 8013efe:	693b      	ldr	r3, [r7, #16]
 8013f00:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8013f04:	69bb      	ldr	r3, [r7, #24]
 8013f06:	699b      	ldr	r3, [r3, #24]
 8013f08:	4618      	mov	r0, r3
 8013f0a:	f7f8 fa5a 	bl	800c3c2 <lwip_htonl>
 8013f0e:	4603      	mov	r3, r0
 8013f10:	461a      	mov	r2, r3
 8013f12:	4629      	mov	r1, r5
 8013f14:	4620      	mov	r0, r4
 8013f16:	f000 ffd9 	bl	8014ecc <dhcp_option_long>
 8013f1a:	4603      	mov	r3, r0
 8013f1c:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8013f1e:	89b8      	ldrh	r0, [r7, #12]
 8013f20:	693b      	ldr	r3, [r7, #16]
 8013f22:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013f26:	2303      	movs	r3, #3
 8013f28:	2237      	movs	r2, #55	; 0x37
 8013f2a:	f000 ff43 	bl	8014db4 <dhcp_option>
 8013f2e:	4603      	mov	r3, r0
 8013f30:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8013f32:	2300      	movs	r3, #0
 8013f34:	77bb      	strb	r3, [r7, #30]
 8013f36:	e00e      	b.n	8013f56 <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8013f38:	89b8      	ldrh	r0, [r7, #12]
 8013f3a:	693b      	ldr	r3, [r7, #16]
 8013f3c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013f40:	7fbb      	ldrb	r3, [r7, #30]
 8013f42:	4a30      	ldr	r2, [pc, #192]	; (8014004 <dhcp_select+0x1e4>)
 8013f44:	5cd3      	ldrb	r3, [r2, r3]
 8013f46:	461a      	mov	r2, r3
 8013f48:	f000 ff68 	bl	8014e1c <dhcp_option_byte>
 8013f4c:	4603      	mov	r3, r0
 8013f4e:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8013f50:	7fbb      	ldrb	r3, [r7, #30]
 8013f52:	3301      	adds	r3, #1
 8013f54:	77bb      	strb	r3, [r7, #30]
 8013f56:	7fbb      	ldrb	r3, [r7, #30]
 8013f58:	2b02      	cmp	r3, #2
 8013f5a:	d9ed      	bls.n	8013f38 <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8013f5c:	89b8      	ldrh	r0, [r7, #12]
 8013f5e:	693b      	ldr	r3, [r7, #16]
 8013f60:	33f0      	adds	r3, #240	; 0xf0
 8013f62:	697a      	ldr	r2, [r7, #20]
 8013f64:	4619      	mov	r1, r3
 8013f66:	f001 fc6d 	bl	8015844 <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8013f6a:	4b27      	ldr	r3, [pc, #156]	; (8014008 <dhcp_select+0x1e8>)
 8013f6c:	6818      	ldr	r0, [r3, #0]
 8013f6e:	4b27      	ldr	r3, [pc, #156]	; (801400c <dhcp_select+0x1ec>)
 8013f70:	9301      	str	r3, [sp, #4]
 8013f72:	687b      	ldr	r3, [r7, #4]
 8013f74:	9300      	str	r3, [sp, #0]
 8013f76:	2343      	movs	r3, #67	; 0x43
 8013f78:	4a25      	ldr	r2, [pc, #148]	; (8014010 <dhcp_select+0x1f0>)
 8013f7a:	6979      	ldr	r1, [r7, #20]
 8013f7c:	f7ff fbda 	bl	8013734 <udp_sendto_if_src>
 8013f80:	4603      	mov	r3, r0
 8013f82:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8013f84:	6978      	ldr	r0, [r7, #20]
 8013f86:	f7f9 fca3 	bl	800d8d0 <pbuf_free>
 8013f8a:	e001      	b.n	8013f90 <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8013f8c:	23ff      	movs	r3, #255	; 0xff
 8013f8e:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8013f90:	69bb      	ldr	r3, [r7, #24]
 8013f92:	799b      	ldrb	r3, [r3, #6]
 8013f94:	2bff      	cmp	r3, #255	; 0xff
 8013f96:	d005      	beq.n	8013fa4 <dhcp_select+0x184>
    dhcp->tries++;
 8013f98:	69bb      	ldr	r3, [r7, #24]
 8013f9a:	799b      	ldrb	r3, [r3, #6]
 8013f9c:	3301      	adds	r3, #1
 8013f9e:	b2da      	uxtb	r2, r3
 8013fa0:	69bb      	ldr	r3, [r7, #24]
 8013fa2:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8013fa4:	69bb      	ldr	r3, [r7, #24]
 8013fa6:	799b      	ldrb	r3, [r3, #6]
 8013fa8:	2b05      	cmp	r3, #5
 8013faa:	d80d      	bhi.n	8013fc8 <dhcp_select+0x1a8>
 8013fac:	69bb      	ldr	r3, [r7, #24]
 8013fae:	799b      	ldrb	r3, [r3, #6]
 8013fb0:	461a      	mov	r2, r3
 8013fb2:	2301      	movs	r3, #1
 8013fb4:	4093      	lsls	r3, r2
 8013fb6:	b29b      	uxth	r3, r3
 8013fb8:	461a      	mov	r2, r3
 8013fba:	0152      	lsls	r2, r2, #5
 8013fbc:	1ad2      	subs	r2, r2, r3
 8013fbe:	0092      	lsls	r2, r2, #2
 8013fc0:	4413      	add	r3, r2
 8013fc2:	00db      	lsls	r3, r3, #3
 8013fc4:	b29b      	uxth	r3, r3
 8013fc6:	e001      	b.n	8013fcc <dhcp_select+0x1ac>
 8013fc8:	f64e 2360 	movw	r3, #60000	; 0xea60
 8013fcc:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8013fce:	89fb      	ldrh	r3, [r7, #14]
 8013fd0:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8013fd4:	4a0f      	ldr	r2, [pc, #60]	; (8014014 <dhcp_select+0x1f4>)
 8013fd6:	fb82 1203 	smull	r1, r2, r2, r3
 8013fda:	1152      	asrs	r2, r2, #5
 8013fdc:	17db      	asrs	r3, r3, #31
 8013fde:	1ad3      	subs	r3, r2, r3
 8013fe0:	b29a      	uxth	r2, r3
 8013fe2:	69bb      	ldr	r3, [r7, #24]
 8013fe4:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8013fe6:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8013fea:	4618      	mov	r0, r3
 8013fec:	3720      	adds	r7, #32
 8013fee:	46bd      	mov	sp, r7
 8013ff0:	bdb0      	pop	{r4, r5, r7, pc}
 8013ff2:	bf00      	nop
 8013ff4:	08020320 	.word	0x08020320
 8013ff8:	080203cc 	.word	0x080203cc
 8013ffc:	08020380 	.word	0x08020380
 8014000:	080203e8 	.word	0x080203e8
 8014004:	20000070 	.word	0x20000070
 8014008:	200004dc 	.word	0x200004dc
 801400c:	08020e8c 	.word	0x08020e8c
 8014010:	08020e90 	.word	0x08020e90
 8014014:	10624dd3 	.word	0x10624dd3

08014018 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 8014018:	b580      	push	{r7, lr}
 801401a:	b082      	sub	sp, #8
 801401c:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 801401e:	4b27      	ldr	r3, [pc, #156]	; (80140bc <dhcp_coarse_tmr+0xa4>)
 8014020:	681b      	ldr	r3, [r3, #0]
 8014022:	607b      	str	r3, [r7, #4]
 8014024:	e042      	b.n	80140ac <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8014026:	687b      	ldr	r3, [r7, #4]
 8014028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801402a:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 801402c:	683b      	ldr	r3, [r7, #0]
 801402e:	2b00      	cmp	r3, #0
 8014030:	d039      	beq.n	80140a6 <dhcp_coarse_tmr+0x8e>
 8014032:	683b      	ldr	r3, [r7, #0]
 8014034:	795b      	ldrb	r3, [r3, #5]
 8014036:	2b00      	cmp	r3, #0
 8014038:	d035      	beq.n	80140a6 <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 801403a:	683b      	ldr	r3, [r7, #0]
 801403c:	8a9b      	ldrh	r3, [r3, #20]
 801403e:	2b00      	cmp	r3, #0
 8014040:	d012      	beq.n	8014068 <dhcp_coarse_tmr+0x50>
 8014042:	683b      	ldr	r3, [r7, #0]
 8014044:	8a5b      	ldrh	r3, [r3, #18]
 8014046:	3301      	adds	r3, #1
 8014048:	b29a      	uxth	r2, r3
 801404a:	683b      	ldr	r3, [r7, #0]
 801404c:	825a      	strh	r2, [r3, #18]
 801404e:	683b      	ldr	r3, [r7, #0]
 8014050:	8a5a      	ldrh	r2, [r3, #18]
 8014052:	683b      	ldr	r3, [r7, #0]
 8014054:	8a9b      	ldrh	r3, [r3, #20]
 8014056:	429a      	cmp	r2, r3
 8014058:	d106      	bne.n	8014068 <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 801405a:	6878      	ldr	r0, [r7, #4]
 801405c:	f000 fdf6 	bl	8014c4c <dhcp_release_and_stop>
        dhcp_start(netif);
 8014060:	6878      	ldr	r0, [r7, #4]
 8014062:	f000 f969 	bl	8014338 <dhcp_start>
 8014066:	e01e      	b.n	80140a6 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 8014068:	683b      	ldr	r3, [r7, #0]
 801406a:	8a1b      	ldrh	r3, [r3, #16]
 801406c:	2b00      	cmp	r3, #0
 801406e:	d00b      	beq.n	8014088 <dhcp_coarse_tmr+0x70>
 8014070:	683b      	ldr	r3, [r7, #0]
 8014072:	8a1b      	ldrh	r3, [r3, #16]
 8014074:	1e5a      	subs	r2, r3, #1
 8014076:	b291      	uxth	r1, r2
 8014078:	683a      	ldr	r2, [r7, #0]
 801407a:	8211      	strh	r1, [r2, #16]
 801407c:	2b01      	cmp	r3, #1
 801407e:	d103      	bne.n	8014088 <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 8014080:	6878      	ldr	r0, [r7, #4]
 8014082:	f000 f8c6 	bl	8014212 <dhcp_t2_timeout>
 8014086:	e00e      	b.n	80140a6 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 8014088:	683b      	ldr	r3, [r7, #0]
 801408a:	89db      	ldrh	r3, [r3, #14]
 801408c:	2b00      	cmp	r3, #0
 801408e:	d00a      	beq.n	80140a6 <dhcp_coarse_tmr+0x8e>
 8014090:	683b      	ldr	r3, [r7, #0]
 8014092:	89db      	ldrh	r3, [r3, #14]
 8014094:	1e5a      	subs	r2, r3, #1
 8014096:	b291      	uxth	r1, r2
 8014098:	683a      	ldr	r2, [r7, #0]
 801409a:	81d1      	strh	r1, [r2, #14]
 801409c:	2b01      	cmp	r3, #1
 801409e:	d102      	bne.n	80140a6 <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 80140a0:	6878      	ldr	r0, [r7, #4]
 80140a2:	f000 f888 	bl	80141b6 <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 80140a6:	687b      	ldr	r3, [r7, #4]
 80140a8:	681b      	ldr	r3, [r3, #0]
 80140aa:	607b      	str	r3, [r7, #4]
 80140ac:	687b      	ldr	r3, [r7, #4]
 80140ae:	2b00      	cmp	r3, #0
 80140b0:	d1b9      	bne.n	8014026 <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 80140b2:	bf00      	nop
 80140b4:	bf00      	nop
 80140b6:	3708      	adds	r7, #8
 80140b8:	46bd      	mov	sp, r7
 80140ba:	bd80      	pop	{r7, pc}
 80140bc:	20007140 	.word	0x20007140

080140c0 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 80140c0:	b580      	push	{r7, lr}
 80140c2:	b082      	sub	sp, #8
 80140c4:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 80140c6:	4b16      	ldr	r3, [pc, #88]	; (8014120 <dhcp_fine_tmr+0x60>)
 80140c8:	681b      	ldr	r3, [r3, #0]
 80140ca:	607b      	str	r3, [r7, #4]
 80140cc:	e020      	b.n	8014110 <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 80140ce:	687b      	ldr	r3, [r7, #4]
 80140d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80140d2:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 80140d4:	683b      	ldr	r3, [r7, #0]
 80140d6:	2b00      	cmp	r3, #0
 80140d8:	d017      	beq.n	801410a <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 80140da:	683b      	ldr	r3, [r7, #0]
 80140dc:	891b      	ldrh	r3, [r3, #8]
 80140de:	2b01      	cmp	r3, #1
 80140e0:	d906      	bls.n	80140f0 <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 80140e2:	683b      	ldr	r3, [r7, #0]
 80140e4:	891b      	ldrh	r3, [r3, #8]
 80140e6:	3b01      	subs	r3, #1
 80140e8:	b29a      	uxth	r2, r3
 80140ea:	683b      	ldr	r3, [r7, #0]
 80140ec:	811a      	strh	r2, [r3, #8]
 80140ee:	e00c      	b.n	801410a <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 80140f0:	683b      	ldr	r3, [r7, #0]
 80140f2:	891b      	ldrh	r3, [r3, #8]
 80140f4:	2b01      	cmp	r3, #1
 80140f6:	d108      	bne.n	801410a <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 80140f8:	683b      	ldr	r3, [r7, #0]
 80140fa:	891b      	ldrh	r3, [r3, #8]
 80140fc:	3b01      	subs	r3, #1
 80140fe:	b29a      	uxth	r2, r3
 8014100:	683b      	ldr	r3, [r7, #0]
 8014102:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 8014104:	6878      	ldr	r0, [r7, #4]
 8014106:	f000 f80d 	bl	8014124 <dhcp_timeout>
  NETIF_FOREACH(netif) {
 801410a:	687b      	ldr	r3, [r7, #4]
 801410c:	681b      	ldr	r3, [r3, #0]
 801410e:	607b      	str	r3, [r7, #4]
 8014110:	687b      	ldr	r3, [r7, #4]
 8014112:	2b00      	cmp	r3, #0
 8014114:	d1db      	bne.n	80140ce <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 8014116:	bf00      	nop
 8014118:	bf00      	nop
 801411a:	3708      	adds	r7, #8
 801411c:	46bd      	mov	sp, r7
 801411e:	bd80      	pop	{r7, pc}
 8014120:	20007140 	.word	0x20007140

08014124 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 8014124:	b580      	push	{r7, lr}
 8014126:	b084      	sub	sp, #16
 8014128:	af00      	add	r7, sp, #0
 801412a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801412c:	687b      	ldr	r3, [r7, #4]
 801412e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014130:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 8014132:	68fb      	ldr	r3, [r7, #12]
 8014134:	795b      	ldrb	r3, [r3, #5]
 8014136:	2b0c      	cmp	r3, #12
 8014138:	d003      	beq.n	8014142 <dhcp_timeout+0x1e>
 801413a:	68fb      	ldr	r3, [r7, #12]
 801413c:	795b      	ldrb	r3, [r3, #5]
 801413e:	2b06      	cmp	r3, #6
 8014140:	d103      	bne.n	801414a <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 8014142:	6878      	ldr	r0, [r7, #4]
 8014144:	f000 fa18 	bl	8014578 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 8014148:	e031      	b.n	80141ae <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 801414a:	68fb      	ldr	r3, [r7, #12]
 801414c:	795b      	ldrb	r3, [r3, #5]
 801414e:	2b01      	cmp	r3, #1
 8014150:	d10e      	bne.n	8014170 <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 8014152:	68fb      	ldr	r3, [r7, #12]
 8014154:	799b      	ldrb	r3, [r3, #6]
 8014156:	2b05      	cmp	r3, #5
 8014158:	d803      	bhi.n	8014162 <dhcp_timeout+0x3e>
      dhcp_select(netif);
 801415a:	6878      	ldr	r0, [r7, #4]
 801415c:	f7ff fe60 	bl	8013e20 <dhcp_select>
}
 8014160:	e025      	b.n	80141ae <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 8014162:	6878      	ldr	r0, [r7, #4]
 8014164:	f000 fd72 	bl	8014c4c <dhcp_release_and_stop>
      dhcp_start(netif);
 8014168:	6878      	ldr	r0, [r7, #4]
 801416a:	f000 f8e5 	bl	8014338 <dhcp_start>
}
 801416e:	e01e      	b.n	80141ae <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 8014170:	68fb      	ldr	r3, [r7, #12]
 8014172:	795b      	ldrb	r3, [r3, #5]
 8014174:	2b08      	cmp	r3, #8
 8014176:	d10b      	bne.n	8014190 <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 8014178:	68fb      	ldr	r3, [r7, #12]
 801417a:	799b      	ldrb	r3, [r3, #6]
 801417c:	2b01      	cmp	r3, #1
 801417e:	d803      	bhi.n	8014188 <dhcp_timeout+0x64>
      dhcp_check(netif);
 8014180:	6878      	ldr	r0, [r7, #4]
 8014182:	f7ff fdf3 	bl	8013d6c <dhcp_check>
}
 8014186:	e012      	b.n	80141ae <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 8014188:	6878      	ldr	r0, [r7, #4]
 801418a:	f000 fa97 	bl	80146bc <dhcp_bind>
}
 801418e:	e00e      	b.n	80141ae <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 8014190:	68fb      	ldr	r3, [r7, #12]
 8014192:	795b      	ldrb	r3, [r3, #5]
 8014194:	2b03      	cmp	r3, #3
 8014196:	d10a      	bne.n	80141ae <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 8014198:	68fb      	ldr	r3, [r7, #12]
 801419a:	799b      	ldrb	r3, [r3, #6]
 801419c:	2b01      	cmp	r3, #1
 801419e:	d803      	bhi.n	80141a8 <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 80141a0:	6878      	ldr	r0, [r7, #4]
 80141a2:	f000 fc9d 	bl	8014ae0 <dhcp_reboot>
}
 80141a6:	e002      	b.n	80141ae <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 80141a8:	6878      	ldr	r0, [r7, #4]
 80141aa:	f000 f9e5 	bl	8014578 <dhcp_discover>
}
 80141ae:	bf00      	nop
 80141b0:	3710      	adds	r7, #16
 80141b2:	46bd      	mov	sp, r7
 80141b4:	bd80      	pop	{r7, pc}

080141b6 <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 80141b6:	b580      	push	{r7, lr}
 80141b8:	b084      	sub	sp, #16
 80141ba:	af00      	add	r7, sp, #0
 80141bc:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80141be:	687b      	ldr	r3, [r7, #4]
 80141c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80141c2:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 80141c4:	68fb      	ldr	r3, [r7, #12]
 80141c6:	795b      	ldrb	r3, [r3, #5]
 80141c8:	2b01      	cmp	r3, #1
 80141ca:	d007      	beq.n	80141dc <dhcp_t1_timeout+0x26>
 80141cc:	68fb      	ldr	r3, [r7, #12]
 80141ce:	795b      	ldrb	r3, [r3, #5]
 80141d0:	2b0a      	cmp	r3, #10
 80141d2:	d003      	beq.n	80141dc <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 80141d4:	68fb      	ldr	r3, [r7, #12]
 80141d6:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 80141d8:	2b05      	cmp	r3, #5
 80141da:	d116      	bne.n	801420a <dhcp_t1_timeout+0x54>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 80141dc:	6878      	ldr	r0, [r7, #4]
 80141de:	f000 fb47 	bl	8014870 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 80141e2:	68fb      	ldr	r3, [r7, #12]
 80141e4:	899b      	ldrh	r3, [r3, #12]
 80141e6:	461a      	mov	r2, r3
 80141e8:	68fb      	ldr	r3, [r7, #12]
 80141ea:	8a5b      	ldrh	r3, [r3, #18]
 80141ec:	1ad3      	subs	r3, r2, r3
 80141ee:	2b01      	cmp	r3, #1
 80141f0:	dd0b      	ble.n	801420a <dhcp_t1_timeout+0x54>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 80141f2:	68fb      	ldr	r3, [r7, #12]
 80141f4:	899b      	ldrh	r3, [r3, #12]
 80141f6:	461a      	mov	r2, r3
 80141f8:	68fb      	ldr	r3, [r7, #12]
 80141fa:	8a5b      	ldrh	r3, [r3, #18]
 80141fc:	1ad3      	subs	r3, r2, r3
 80141fe:	0fda      	lsrs	r2, r3, #31
 8014200:	4413      	add	r3, r2
 8014202:	105b      	asrs	r3, r3, #1
 8014204:	b29a      	uxth	r2, r3
 8014206:	68fb      	ldr	r3, [r7, #12]
 8014208:	81da      	strh	r2, [r3, #14]
    }
  }
}
 801420a:	bf00      	nop
 801420c:	3710      	adds	r7, #16
 801420e:	46bd      	mov	sp, r7
 8014210:	bd80      	pop	{r7, pc}

08014212 <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 8014212:	b580      	push	{r7, lr}
 8014214:	b084      	sub	sp, #16
 8014216:	af00      	add	r7, sp, #0
 8014218:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801421a:	687b      	ldr	r3, [r7, #4]
 801421c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801421e:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8014220:	68fb      	ldr	r3, [r7, #12]
 8014222:	795b      	ldrb	r3, [r3, #5]
 8014224:	2b01      	cmp	r3, #1
 8014226:	d00b      	beq.n	8014240 <dhcp_t2_timeout+0x2e>
 8014228:	68fb      	ldr	r3, [r7, #12]
 801422a:	795b      	ldrb	r3, [r3, #5]
 801422c:	2b0a      	cmp	r3, #10
 801422e:	d007      	beq.n	8014240 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8014230:	68fb      	ldr	r3, [r7, #12]
 8014232:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8014234:	2b05      	cmp	r3, #5
 8014236:	d003      	beq.n	8014240 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8014238:	68fb      	ldr	r3, [r7, #12]
 801423a:	795b      	ldrb	r3, [r3, #5]
 801423c:	2b04      	cmp	r3, #4
 801423e:	d116      	bne.n	801426e <dhcp_t2_timeout+0x5c>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 8014240:	6878      	ldr	r0, [r7, #4]
 8014242:	f000 fbb1 	bl	80149a8 <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8014246:	68fb      	ldr	r3, [r7, #12]
 8014248:	8a9b      	ldrh	r3, [r3, #20]
 801424a:	461a      	mov	r2, r3
 801424c:	68fb      	ldr	r3, [r7, #12]
 801424e:	8a5b      	ldrh	r3, [r3, #18]
 8014250:	1ad3      	subs	r3, r2, r3
 8014252:	2b01      	cmp	r3, #1
 8014254:	dd0b      	ble.n	801426e <dhcp_t2_timeout+0x5c>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 8014256:	68fb      	ldr	r3, [r7, #12]
 8014258:	8a9b      	ldrh	r3, [r3, #20]
 801425a:	461a      	mov	r2, r3
 801425c:	68fb      	ldr	r3, [r7, #12]
 801425e:	8a5b      	ldrh	r3, [r3, #18]
 8014260:	1ad3      	subs	r3, r2, r3
 8014262:	0fda      	lsrs	r2, r3, #31
 8014264:	4413      	add	r3, r2
 8014266:	105b      	asrs	r3, r3, #1
 8014268:	b29a      	uxth	r2, r3
 801426a:	68fb      	ldr	r3, [r7, #12]
 801426c:	821a      	strh	r2, [r3, #16]
    }
  }
}
 801426e:	bf00      	nop
 8014270:	3710      	adds	r7, #16
 8014272:	46bd      	mov	sp, r7
 8014274:	bd80      	pop	{r7, pc}
	...

08014278 <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 8014278:	b580      	push	{r7, lr}
 801427a:	b084      	sub	sp, #16
 801427c:	af00      	add	r7, sp, #0
 801427e:	6078      	str	r0, [r7, #4]
 8014280:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014282:	687b      	ldr	r3, [r7, #4]
 8014284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014286:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8014288:	68fb      	ldr	r3, [r7, #12]
 801428a:	2200      	movs	r2, #0
 801428c:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 801428e:	68fb      	ldr	r3, [r7, #12]
 8014290:	2200      	movs	r2, #0
 8014292:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 8014294:	4b26      	ldr	r3, [pc, #152]	; (8014330 <dhcp_handle_ack+0xb8>)
 8014296:	78db      	ldrb	r3, [r3, #3]
 8014298:	2b00      	cmp	r3, #0
 801429a:	d003      	beq.n	80142a4 <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 801429c:	4b25      	ldr	r3, [pc, #148]	; (8014334 <dhcp_handle_ack+0xbc>)
 801429e:	68da      	ldr	r2, [r3, #12]
 80142a0:	68fb      	ldr	r3, [r7, #12]
 80142a2:	629a      	str	r2, [r3, #40]	; 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 80142a4:	4b22      	ldr	r3, [pc, #136]	; (8014330 <dhcp_handle_ack+0xb8>)
 80142a6:	791b      	ldrb	r3, [r3, #4]
 80142a8:	2b00      	cmp	r3, #0
 80142aa:	d004      	beq.n	80142b6 <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 80142ac:	4b21      	ldr	r3, [pc, #132]	; (8014334 <dhcp_handle_ack+0xbc>)
 80142ae:	691a      	ldr	r2, [r3, #16]
 80142b0:	68fb      	ldr	r3, [r7, #12]
 80142b2:	62da      	str	r2, [r3, #44]	; 0x2c
 80142b4:	e004      	b.n	80142c0 <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 80142b6:	68fb      	ldr	r3, [r7, #12]
 80142b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80142ba:	085a      	lsrs	r2, r3, #1
 80142bc:	68fb      	ldr	r3, [r7, #12]
 80142be:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 80142c0:	4b1b      	ldr	r3, [pc, #108]	; (8014330 <dhcp_handle_ack+0xb8>)
 80142c2:	795b      	ldrb	r3, [r3, #5]
 80142c4:	2b00      	cmp	r3, #0
 80142c6:	d004      	beq.n	80142d2 <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 80142c8:	4b1a      	ldr	r3, [pc, #104]	; (8014334 <dhcp_handle_ack+0xbc>)
 80142ca:	695a      	ldr	r2, [r3, #20]
 80142cc:	68fb      	ldr	r3, [r7, #12]
 80142ce:	631a      	str	r2, [r3, #48]	; 0x30
 80142d0:	e007      	b.n	80142e2 <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 80142d2:	68fb      	ldr	r3, [r7, #12]
 80142d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80142d6:	4613      	mov	r3, r2
 80142d8:	00db      	lsls	r3, r3, #3
 80142da:	1a9b      	subs	r3, r3, r2
 80142dc:	08da      	lsrs	r2, r3, #3
 80142de:	68fb      	ldr	r3, [r7, #12]
 80142e0:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 80142e2:	683b      	ldr	r3, [r7, #0]
 80142e4:	691a      	ldr	r2, [r3, #16]
 80142e6:	68fb      	ldr	r3, [r7, #12]
 80142e8:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 80142ea:	4b11      	ldr	r3, [pc, #68]	; (8014330 <dhcp_handle_ack+0xb8>)
 80142ec:	799b      	ldrb	r3, [r3, #6]
 80142ee:	2b00      	cmp	r3, #0
 80142f0:	d00b      	beq.n	801430a <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 80142f2:	4b10      	ldr	r3, [pc, #64]	; (8014334 <dhcp_handle_ack+0xbc>)
 80142f4:	699b      	ldr	r3, [r3, #24]
 80142f6:	4618      	mov	r0, r3
 80142f8:	f7f8 f863 	bl	800c3c2 <lwip_htonl>
 80142fc:	4602      	mov	r2, r0
 80142fe:	68fb      	ldr	r3, [r7, #12]
 8014300:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 8014302:	68fb      	ldr	r3, [r7, #12]
 8014304:	2201      	movs	r2, #1
 8014306:	71da      	strb	r2, [r3, #7]
 8014308:	e002      	b.n	8014310 <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 801430a:	68fb      	ldr	r3, [r7, #12]
 801430c:	2200      	movs	r2, #0
 801430e:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 8014310:	4b07      	ldr	r3, [pc, #28]	; (8014330 <dhcp_handle_ack+0xb8>)
 8014312:	79db      	ldrb	r3, [r3, #7]
 8014314:	2b00      	cmp	r3, #0
 8014316:	d007      	beq.n	8014328 <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 8014318:	4b06      	ldr	r3, [pc, #24]	; (8014334 <dhcp_handle_ack+0xbc>)
 801431a:	69db      	ldr	r3, [r3, #28]
 801431c:	4618      	mov	r0, r3
 801431e:	f7f8 f850 	bl	800c3c2 <lwip_htonl>
 8014322:	4602      	mov	r2, r0
 8014324:	68fb      	ldr	r3, [r7, #12]
 8014326:	625a      	str	r2, [r3, #36]	; 0x24
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 8014328:	bf00      	nop
 801432a:	3710      	adds	r7, #16
 801432c:	46bd      	mov	sp, r7
 801432e:	bd80      	pop	{r7, pc}
 8014330:	2000716c 	.word	0x2000716c
 8014334:	20007174 	.word	0x20007174

08014338 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 8014338:	b580      	push	{r7, lr}
 801433a:	b084      	sub	sp, #16
 801433c:	af00      	add	r7, sp, #0
 801433e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 8014340:	687b      	ldr	r3, [r7, #4]
 8014342:	2b00      	cmp	r3, #0
 8014344:	d109      	bne.n	801435a <dhcp_start+0x22>
 8014346:	4b37      	ldr	r3, [pc, #220]	; (8014424 <dhcp_start+0xec>)
 8014348:	f240 22e7 	movw	r2, #743	; 0x2e7
 801434c:	4936      	ldr	r1, [pc, #216]	; (8014428 <dhcp_start+0xf0>)
 801434e:	4837      	ldr	r0, [pc, #220]	; (801442c <dhcp_start+0xf4>)
 8014350:	f004 fb3c 	bl	80189cc <iprintf>
 8014354:	f06f 030f 	mvn.w	r3, #15
 8014358:	e060      	b.n	801441c <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 801435a:	687b      	ldr	r3, [r7, #4]
 801435c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8014360:	f003 0301 	and.w	r3, r3, #1
 8014364:	2b00      	cmp	r3, #0
 8014366:	d109      	bne.n	801437c <dhcp_start+0x44>
 8014368:	4b2e      	ldr	r3, [pc, #184]	; (8014424 <dhcp_start+0xec>)
 801436a:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 801436e:	4930      	ldr	r1, [pc, #192]	; (8014430 <dhcp_start+0xf8>)
 8014370:	482e      	ldr	r0, [pc, #184]	; (801442c <dhcp_start+0xf4>)
 8014372:	f004 fb2b 	bl	80189cc <iprintf>
 8014376:	f06f 030f 	mvn.w	r3, #15
 801437a:	e04f      	b.n	801441c <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 801437c:	687b      	ldr	r3, [r7, #4]
 801437e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014380:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 8014382:	687b      	ldr	r3, [r7, #4]
 8014384:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014386:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 801438a:	d202      	bcs.n	8014392 <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 801438c:	f04f 33ff 	mov.w	r3, #4294967295
 8014390:	e044      	b.n	801441c <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 8014392:	68fb      	ldr	r3, [r7, #12]
 8014394:	2b00      	cmp	r3, #0
 8014396:	d10d      	bne.n	80143b4 <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 8014398:	2034      	movs	r0, #52	; 0x34
 801439a:	f7f8 fae5 	bl	800c968 <mem_malloc>
 801439e:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 80143a0:	68fb      	ldr	r3, [r7, #12]
 80143a2:	2b00      	cmp	r3, #0
 80143a4:	d102      	bne.n	80143ac <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 80143a6:	f04f 33ff 	mov.w	r3, #4294967295
 80143aa:	e037      	b.n	801441c <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 80143ac:	687b      	ldr	r3, [r7, #4]
 80143ae:	68fa      	ldr	r2, [r7, #12]
 80143b0:	625a      	str	r2, [r3, #36]	; 0x24
 80143b2:	e005      	b.n	80143c0 <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 80143b4:	68fb      	ldr	r3, [r7, #12]
 80143b6:	791b      	ldrb	r3, [r3, #4]
 80143b8:	2b00      	cmp	r3, #0
 80143ba:	d001      	beq.n	80143c0 <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 80143bc:	f7ff fc92 	bl	8013ce4 <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 80143c0:	2234      	movs	r2, #52	; 0x34
 80143c2:	2100      	movs	r1, #0
 80143c4:	68f8      	ldr	r0, [r7, #12]
 80143c6:	f003 fde5 	bl	8017f94 <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 80143ca:	f7ff fc39 	bl	8013c40 <dhcp_inc_pcb_refcount>
 80143ce:	4603      	mov	r3, r0
 80143d0:	2b00      	cmp	r3, #0
 80143d2:	d002      	beq.n	80143da <dhcp_start+0xa2>
    return ERR_MEM;
 80143d4:	f04f 33ff 	mov.w	r3, #4294967295
 80143d8:	e020      	b.n	801441c <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 80143da:	68fb      	ldr	r3, [r7, #12]
 80143dc:	2201      	movs	r2, #1
 80143de:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 80143e0:	687b      	ldr	r3, [r7, #4]
 80143e2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80143e6:	f003 0304 	and.w	r3, r3, #4
 80143ea:	2b00      	cmp	r3, #0
 80143ec:	d105      	bne.n	80143fa <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 80143ee:	2102      	movs	r1, #2
 80143f0:	68f8      	ldr	r0, [r7, #12]
 80143f2:	f000 fcc5 	bl	8014d80 <dhcp_set_state>
    return ERR_OK;
 80143f6:	2300      	movs	r3, #0
 80143f8:	e010      	b.n	801441c <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 80143fa:	6878      	ldr	r0, [r7, #4]
 80143fc:	f000 f8bc 	bl	8014578 <dhcp_discover>
 8014400:	4603      	mov	r3, r0
 8014402:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 8014404:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8014408:	2b00      	cmp	r3, #0
 801440a:	d005      	beq.n	8014418 <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 801440c:	6878      	ldr	r0, [r7, #4]
 801440e:	f000 fc1d 	bl	8014c4c <dhcp_release_and_stop>
    return ERR_MEM;
 8014412:	f04f 33ff 	mov.w	r3, #4294967295
 8014416:	e001      	b.n	801441c <dhcp_start+0xe4>
  }
  return result;
 8014418:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801441c:	4618      	mov	r0, r3
 801441e:	3710      	adds	r7, #16
 8014420:	46bd      	mov	sp, r7
 8014422:	bd80      	pop	{r7, pc}
 8014424:	08020320 	.word	0x08020320
 8014428:	08020404 	.word	0x08020404
 801442c:	08020380 	.word	0x08020380
 8014430:	08020448 	.word	0x08020448

08014434 <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 8014434:	b580      	push	{r7, lr}
 8014436:	b084      	sub	sp, #16
 8014438:	af00      	add	r7, sp, #0
 801443a:	6078      	str	r0, [r7, #4]
 801443c:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801443e:	687b      	ldr	r3, [r7, #4]
 8014440:	2b00      	cmp	r3, #0
 8014442:	d107      	bne.n	8014454 <dhcp_arp_reply+0x20>
 8014444:	4b0e      	ldr	r3, [pc, #56]	; (8014480 <dhcp_arp_reply+0x4c>)
 8014446:	f240 328b 	movw	r2, #907	; 0x38b
 801444a:	490e      	ldr	r1, [pc, #56]	; (8014484 <dhcp_arp_reply+0x50>)
 801444c:	480e      	ldr	r0, [pc, #56]	; (8014488 <dhcp_arp_reply+0x54>)
 801444e:	f004 fabd 	bl	80189cc <iprintf>
 8014452:	e012      	b.n	801447a <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 8014454:	687b      	ldr	r3, [r7, #4]
 8014456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014458:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 801445a:	68fb      	ldr	r3, [r7, #12]
 801445c:	2b00      	cmp	r3, #0
 801445e:	d00c      	beq.n	801447a <dhcp_arp_reply+0x46>
 8014460:	68fb      	ldr	r3, [r7, #12]
 8014462:	795b      	ldrb	r3, [r3, #5]
 8014464:	2b08      	cmp	r3, #8
 8014466:	d108      	bne.n	801447a <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 8014468:	683b      	ldr	r3, [r7, #0]
 801446a:	681a      	ldr	r2, [r3, #0]
 801446c:	68fb      	ldr	r3, [r7, #12]
 801446e:	69db      	ldr	r3, [r3, #28]
 8014470:	429a      	cmp	r2, r3
 8014472:	d102      	bne.n	801447a <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 8014474:	6878      	ldr	r0, [r7, #4]
 8014476:	f000 f809 	bl	801448c <dhcp_decline>
    }
  }
}
 801447a:	3710      	adds	r7, #16
 801447c:	46bd      	mov	sp, r7
 801447e:	bd80      	pop	{r7, pc}
 8014480:	08020320 	.word	0x08020320
 8014484:	08020404 	.word	0x08020404
 8014488:	08020380 	.word	0x08020380

0801448c <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 801448c:	b5b0      	push	{r4, r5, r7, lr}
 801448e:	b08a      	sub	sp, #40	; 0x28
 8014490:	af02      	add	r7, sp, #8
 8014492:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014494:	687b      	ldr	r3, [r7, #4]
 8014496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014498:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 801449a:	210c      	movs	r1, #12
 801449c:	69b8      	ldr	r0, [r7, #24]
 801449e:	f000 fc6f 	bl	8014d80 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 80144a2:	f107 030c 	add.w	r3, r7, #12
 80144a6:	2204      	movs	r2, #4
 80144a8:	69b9      	ldr	r1, [r7, #24]
 80144aa:	6878      	ldr	r0, [r7, #4]
 80144ac:	f001 f8f4 	bl	8015698 <dhcp_create_msg>
 80144b0:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 80144b2:	697b      	ldr	r3, [r7, #20]
 80144b4:	2b00      	cmp	r3, #0
 80144b6:	d035      	beq.n	8014524 <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80144b8:	697b      	ldr	r3, [r7, #20]
 80144ba:	685b      	ldr	r3, [r3, #4]
 80144bc:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 80144be:	89b8      	ldrh	r0, [r7, #12]
 80144c0:	693b      	ldr	r3, [r7, #16]
 80144c2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80144c6:	2304      	movs	r3, #4
 80144c8:	2232      	movs	r2, #50	; 0x32
 80144ca:	f000 fc73 	bl	8014db4 <dhcp_option>
 80144ce:	4603      	mov	r3, r0
 80144d0:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 80144d2:	89bc      	ldrh	r4, [r7, #12]
 80144d4:	693b      	ldr	r3, [r7, #16]
 80144d6:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 80144da:	69bb      	ldr	r3, [r7, #24]
 80144dc:	69db      	ldr	r3, [r3, #28]
 80144de:	4618      	mov	r0, r3
 80144e0:	f7f7 ff6f 	bl	800c3c2 <lwip_htonl>
 80144e4:	4603      	mov	r3, r0
 80144e6:	461a      	mov	r2, r3
 80144e8:	4629      	mov	r1, r5
 80144ea:	4620      	mov	r0, r4
 80144ec:	f000 fcee 	bl	8014ecc <dhcp_option_long>
 80144f0:	4603      	mov	r3, r0
 80144f2:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80144f4:	89b8      	ldrh	r0, [r7, #12]
 80144f6:	693b      	ldr	r3, [r7, #16]
 80144f8:	33f0      	adds	r3, #240	; 0xf0
 80144fa:	697a      	ldr	r2, [r7, #20]
 80144fc:	4619      	mov	r1, r3
 80144fe:	f001 f9a1 	bl	8015844 <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8014502:	4b19      	ldr	r3, [pc, #100]	; (8014568 <dhcp_decline+0xdc>)
 8014504:	6818      	ldr	r0, [r3, #0]
 8014506:	4b19      	ldr	r3, [pc, #100]	; (801456c <dhcp_decline+0xe0>)
 8014508:	9301      	str	r3, [sp, #4]
 801450a:	687b      	ldr	r3, [r7, #4]
 801450c:	9300      	str	r3, [sp, #0]
 801450e:	2343      	movs	r3, #67	; 0x43
 8014510:	4a17      	ldr	r2, [pc, #92]	; (8014570 <dhcp_decline+0xe4>)
 8014512:	6979      	ldr	r1, [r7, #20]
 8014514:	f7ff f90e 	bl	8013734 <udp_sendto_if_src>
 8014518:	4603      	mov	r3, r0
 801451a:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801451c:	6978      	ldr	r0, [r7, #20]
 801451e:	f7f9 f9d7 	bl	800d8d0 <pbuf_free>
 8014522:	e001      	b.n	8014528 <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8014524:	23ff      	movs	r3, #255	; 0xff
 8014526:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8014528:	69bb      	ldr	r3, [r7, #24]
 801452a:	799b      	ldrb	r3, [r3, #6]
 801452c:	2bff      	cmp	r3, #255	; 0xff
 801452e:	d005      	beq.n	801453c <dhcp_decline+0xb0>
    dhcp->tries++;
 8014530:	69bb      	ldr	r3, [r7, #24]
 8014532:	799b      	ldrb	r3, [r3, #6]
 8014534:	3301      	adds	r3, #1
 8014536:	b2da      	uxtb	r2, r3
 8014538:	69bb      	ldr	r3, [r7, #24]
 801453a:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 801453c:	f242 7310 	movw	r3, #10000	; 0x2710
 8014540:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8014542:	89fb      	ldrh	r3, [r7, #14]
 8014544:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8014548:	4a0a      	ldr	r2, [pc, #40]	; (8014574 <dhcp_decline+0xe8>)
 801454a:	fb82 1203 	smull	r1, r2, r2, r3
 801454e:	1152      	asrs	r2, r2, #5
 8014550:	17db      	asrs	r3, r3, #31
 8014552:	1ad3      	subs	r3, r2, r3
 8014554:	b29a      	uxth	r2, r3
 8014556:	69bb      	ldr	r3, [r7, #24]
 8014558:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801455a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801455e:	4618      	mov	r0, r3
 8014560:	3720      	adds	r7, #32
 8014562:	46bd      	mov	sp, r7
 8014564:	bdb0      	pop	{r4, r5, r7, pc}
 8014566:	bf00      	nop
 8014568:	200004dc 	.word	0x200004dc
 801456c:	08020e8c 	.word	0x08020e8c
 8014570:	08020e90 	.word	0x08020e90
 8014574:	10624dd3 	.word	0x10624dd3

08014578 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 8014578:	b580      	push	{r7, lr}
 801457a:	b08a      	sub	sp, #40	; 0x28
 801457c:	af02      	add	r7, sp, #8
 801457e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014580:	687b      	ldr	r3, [r7, #4]
 8014582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014584:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 8014586:	2300      	movs	r3, #0
 8014588:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 801458a:	69bb      	ldr	r3, [r7, #24]
 801458c:	2200      	movs	r2, #0
 801458e:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 8014590:	2106      	movs	r1, #6
 8014592:	69b8      	ldr	r0, [r7, #24]
 8014594:	f000 fbf4 	bl	8014d80 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 8014598:	f107 0308 	add.w	r3, r7, #8
 801459c:	2201      	movs	r2, #1
 801459e:	69b9      	ldr	r1, [r7, #24]
 80145a0:	6878      	ldr	r0, [r7, #4]
 80145a2:	f001 f879 	bl	8015698 <dhcp_create_msg>
 80145a6:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 80145a8:	693b      	ldr	r3, [r7, #16]
 80145aa:	2b00      	cmp	r3, #0
 80145ac:	d04b      	beq.n	8014646 <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80145ae:	693b      	ldr	r3, [r7, #16]
 80145b0:	685b      	ldr	r3, [r3, #4]
 80145b2:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80145b4:	8938      	ldrh	r0, [r7, #8]
 80145b6:	68fb      	ldr	r3, [r7, #12]
 80145b8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80145bc:	2302      	movs	r3, #2
 80145be:	2239      	movs	r2, #57	; 0x39
 80145c0:	f000 fbf8 	bl	8014db4 <dhcp_option>
 80145c4:	4603      	mov	r3, r0
 80145c6:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80145c8:	8938      	ldrh	r0, [r7, #8]
 80145ca:	68fb      	ldr	r3, [r7, #12]
 80145cc:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80145d0:	687b      	ldr	r3, [r7, #4]
 80145d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80145d4:	461a      	mov	r2, r3
 80145d6:	f000 fc47 	bl	8014e68 <dhcp_option_short>
 80145da:	4603      	mov	r3, r0
 80145dc:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80145de:	8938      	ldrh	r0, [r7, #8]
 80145e0:	68fb      	ldr	r3, [r7, #12]
 80145e2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80145e6:	2303      	movs	r3, #3
 80145e8:	2237      	movs	r2, #55	; 0x37
 80145ea:	f000 fbe3 	bl	8014db4 <dhcp_option>
 80145ee:	4603      	mov	r3, r0
 80145f0:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80145f2:	2300      	movs	r3, #0
 80145f4:	77fb      	strb	r3, [r7, #31]
 80145f6:	e00e      	b.n	8014616 <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80145f8:	8938      	ldrh	r0, [r7, #8]
 80145fa:	68fb      	ldr	r3, [r7, #12]
 80145fc:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014600:	7ffb      	ldrb	r3, [r7, #31]
 8014602:	4a29      	ldr	r2, [pc, #164]	; (80146a8 <dhcp_discover+0x130>)
 8014604:	5cd3      	ldrb	r3, [r2, r3]
 8014606:	461a      	mov	r2, r3
 8014608:	f000 fc08 	bl	8014e1c <dhcp_option_byte>
 801460c:	4603      	mov	r3, r0
 801460e:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8014610:	7ffb      	ldrb	r3, [r7, #31]
 8014612:	3301      	adds	r3, #1
 8014614:	77fb      	strb	r3, [r7, #31]
 8014616:	7ffb      	ldrb	r3, [r7, #31]
 8014618:	2b02      	cmp	r3, #2
 801461a:	d9ed      	bls.n	80145f8 <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801461c:	8938      	ldrh	r0, [r7, #8]
 801461e:	68fb      	ldr	r3, [r7, #12]
 8014620:	33f0      	adds	r3, #240	; 0xf0
 8014622:	693a      	ldr	r2, [r7, #16]
 8014624:	4619      	mov	r1, r3
 8014626:	f001 f90d 	bl	8015844 <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 801462a:	4b20      	ldr	r3, [pc, #128]	; (80146ac <dhcp_discover+0x134>)
 801462c:	6818      	ldr	r0, [r3, #0]
 801462e:	4b20      	ldr	r3, [pc, #128]	; (80146b0 <dhcp_discover+0x138>)
 8014630:	9301      	str	r3, [sp, #4]
 8014632:	687b      	ldr	r3, [r7, #4]
 8014634:	9300      	str	r3, [sp, #0]
 8014636:	2343      	movs	r3, #67	; 0x43
 8014638:	4a1e      	ldr	r2, [pc, #120]	; (80146b4 <dhcp_discover+0x13c>)
 801463a:	6939      	ldr	r1, [r7, #16]
 801463c:	f7ff f87a 	bl	8013734 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 8014640:	6938      	ldr	r0, [r7, #16]
 8014642:	f7f9 f945 	bl	800d8d0 <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 8014646:	69bb      	ldr	r3, [r7, #24]
 8014648:	799b      	ldrb	r3, [r3, #6]
 801464a:	2bff      	cmp	r3, #255	; 0xff
 801464c:	d005      	beq.n	801465a <dhcp_discover+0xe2>
    dhcp->tries++;
 801464e:	69bb      	ldr	r3, [r7, #24]
 8014650:	799b      	ldrb	r3, [r3, #6]
 8014652:	3301      	adds	r3, #1
 8014654:	b2da      	uxtb	r2, r3
 8014656:	69bb      	ldr	r3, [r7, #24]
 8014658:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 801465a:	69bb      	ldr	r3, [r7, #24]
 801465c:	799b      	ldrb	r3, [r3, #6]
 801465e:	2b05      	cmp	r3, #5
 8014660:	d80d      	bhi.n	801467e <dhcp_discover+0x106>
 8014662:	69bb      	ldr	r3, [r7, #24]
 8014664:	799b      	ldrb	r3, [r3, #6]
 8014666:	461a      	mov	r2, r3
 8014668:	2301      	movs	r3, #1
 801466a:	4093      	lsls	r3, r2
 801466c:	b29b      	uxth	r3, r3
 801466e:	461a      	mov	r2, r3
 8014670:	0152      	lsls	r2, r2, #5
 8014672:	1ad2      	subs	r2, r2, r3
 8014674:	0092      	lsls	r2, r2, #2
 8014676:	4413      	add	r3, r2
 8014678:	00db      	lsls	r3, r3, #3
 801467a:	b29b      	uxth	r3, r3
 801467c:	e001      	b.n	8014682 <dhcp_discover+0x10a>
 801467e:	f64e 2360 	movw	r3, #60000	; 0xea60
 8014682:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8014684:	897b      	ldrh	r3, [r7, #10]
 8014686:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801468a:	4a0b      	ldr	r2, [pc, #44]	; (80146b8 <dhcp_discover+0x140>)
 801468c:	fb82 1203 	smull	r1, r2, r2, r3
 8014690:	1152      	asrs	r2, r2, #5
 8014692:	17db      	asrs	r3, r3, #31
 8014694:	1ad3      	subs	r3, r2, r3
 8014696:	b29a      	uxth	r2, r3
 8014698:	69bb      	ldr	r3, [r7, #24]
 801469a:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801469c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80146a0:	4618      	mov	r0, r3
 80146a2:	3720      	adds	r7, #32
 80146a4:	46bd      	mov	sp, r7
 80146a6:	bd80      	pop	{r7, pc}
 80146a8:	20000070 	.word	0x20000070
 80146ac:	200004dc 	.word	0x200004dc
 80146b0:	08020e8c 	.word	0x08020e8c
 80146b4:	08020e90 	.word	0x08020e90
 80146b8:	10624dd3 	.word	0x10624dd3

080146bc <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 80146bc:	b580      	push	{r7, lr}
 80146be:	b088      	sub	sp, #32
 80146c0:	af00      	add	r7, sp, #0
 80146c2:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 80146c4:	687b      	ldr	r3, [r7, #4]
 80146c6:	2b00      	cmp	r3, #0
 80146c8:	d107      	bne.n	80146da <dhcp_bind+0x1e>
 80146ca:	4b64      	ldr	r3, [pc, #400]	; (801485c <dhcp_bind+0x1a0>)
 80146cc:	f240 4215 	movw	r2, #1045	; 0x415
 80146d0:	4963      	ldr	r1, [pc, #396]	; (8014860 <dhcp_bind+0x1a4>)
 80146d2:	4864      	ldr	r0, [pc, #400]	; (8014864 <dhcp_bind+0x1a8>)
 80146d4:	f004 f97a 	bl	80189cc <iprintf>
 80146d8:	e0bc      	b.n	8014854 <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 80146da:	687b      	ldr	r3, [r7, #4]
 80146dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80146de:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 80146e0:	69bb      	ldr	r3, [r7, #24]
 80146e2:	2b00      	cmp	r3, #0
 80146e4:	d107      	bne.n	80146f6 <dhcp_bind+0x3a>
 80146e6:	4b5d      	ldr	r3, [pc, #372]	; (801485c <dhcp_bind+0x1a0>)
 80146e8:	f240 4217 	movw	r2, #1047	; 0x417
 80146ec:	495e      	ldr	r1, [pc, #376]	; (8014868 <dhcp_bind+0x1ac>)
 80146ee:	485d      	ldr	r0, [pc, #372]	; (8014864 <dhcp_bind+0x1a8>)
 80146f0:	f004 f96c 	bl	80189cc <iprintf>
 80146f4:	e0ae      	b.n	8014854 <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 80146f6:	69bb      	ldr	r3, [r7, #24]
 80146f8:	2200      	movs	r2, #0
 80146fa:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 80146fc:	69bb      	ldr	r3, [r7, #24]
 80146fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014700:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014704:	d019      	beq.n	801473a <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8014706:	69bb      	ldr	r3, [r7, #24]
 8014708:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801470a:	331e      	adds	r3, #30
 801470c:	4a57      	ldr	r2, [pc, #348]	; (801486c <dhcp_bind+0x1b0>)
 801470e:	fba2 2303 	umull	r2, r3, r2, r3
 8014712:	095b      	lsrs	r3, r3, #5
 8014714:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8014716:	69fb      	ldr	r3, [r7, #28]
 8014718:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801471c:	d302      	bcc.n	8014724 <dhcp_bind+0x68>
      timeout = 0xffff;
 801471e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014722:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 8014724:	69fb      	ldr	r3, [r7, #28]
 8014726:	b29a      	uxth	r2, r3
 8014728:	69bb      	ldr	r3, [r7, #24]
 801472a:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 801472c:	69bb      	ldr	r3, [r7, #24]
 801472e:	8a9b      	ldrh	r3, [r3, #20]
 8014730:	2b00      	cmp	r3, #0
 8014732:	d102      	bne.n	801473a <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 8014734:	69bb      	ldr	r3, [r7, #24]
 8014736:	2201      	movs	r2, #1
 8014738:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 801473a:	69bb      	ldr	r3, [r7, #24]
 801473c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801473e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014742:	d01d      	beq.n	8014780 <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8014744:	69bb      	ldr	r3, [r7, #24]
 8014746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014748:	331e      	adds	r3, #30
 801474a:	4a48      	ldr	r2, [pc, #288]	; (801486c <dhcp_bind+0x1b0>)
 801474c:	fba2 2303 	umull	r2, r3, r2, r3
 8014750:	095b      	lsrs	r3, r3, #5
 8014752:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8014754:	69fb      	ldr	r3, [r7, #28]
 8014756:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801475a:	d302      	bcc.n	8014762 <dhcp_bind+0xa6>
      timeout = 0xffff;
 801475c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014760:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 8014762:	69fb      	ldr	r3, [r7, #28]
 8014764:	b29a      	uxth	r2, r3
 8014766:	69bb      	ldr	r3, [r7, #24]
 8014768:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 801476a:	69bb      	ldr	r3, [r7, #24]
 801476c:	895b      	ldrh	r3, [r3, #10]
 801476e:	2b00      	cmp	r3, #0
 8014770:	d102      	bne.n	8014778 <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 8014772:	69bb      	ldr	r3, [r7, #24]
 8014774:	2201      	movs	r2, #1
 8014776:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 8014778:	69bb      	ldr	r3, [r7, #24]
 801477a:	895a      	ldrh	r2, [r3, #10]
 801477c:	69bb      	ldr	r3, [r7, #24]
 801477e:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 8014780:	69bb      	ldr	r3, [r7, #24]
 8014782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014784:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014788:	d01d      	beq.n	80147c6 <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801478a:	69bb      	ldr	r3, [r7, #24]
 801478c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801478e:	331e      	adds	r3, #30
 8014790:	4a36      	ldr	r2, [pc, #216]	; (801486c <dhcp_bind+0x1b0>)
 8014792:	fba2 2303 	umull	r2, r3, r2, r3
 8014796:	095b      	lsrs	r3, r3, #5
 8014798:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 801479a:	69fb      	ldr	r3, [r7, #28]
 801479c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80147a0:	d302      	bcc.n	80147a8 <dhcp_bind+0xec>
      timeout = 0xffff;
 80147a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80147a6:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 80147a8:	69fb      	ldr	r3, [r7, #28]
 80147aa:	b29a      	uxth	r2, r3
 80147ac:	69bb      	ldr	r3, [r7, #24]
 80147ae:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 80147b0:	69bb      	ldr	r3, [r7, #24]
 80147b2:	899b      	ldrh	r3, [r3, #12]
 80147b4:	2b00      	cmp	r3, #0
 80147b6:	d102      	bne.n	80147be <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 80147b8:	69bb      	ldr	r3, [r7, #24]
 80147ba:	2201      	movs	r2, #1
 80147bc:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 80147be:	69bb      	ldr	r3, [r7, #24]
 80147c0:	899a      	ldrh	r2, [r3, #12]
 80147c2:	69bb      	ldr	r3, [r7, #24]
 80147c4:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 80147c6:	69bb      	ldr	r3, [r7, #24]
 80147c8:	895a      	ldrh	r2, [r3, #10]
 80147ca:	69bb      	ldr	r3, [r7, #24]
 80147cc:	899b      	ldrh	r3, [r3, #12]
 80147ce:	429a      	cmp	r2, r3
 80147d0:	d306      	bcc.n	80147e0 <dhcp_bind+0x124>
 80147d2:	69bb      	ldr	r3, [r7, #24]
 80147d4:	899b      	ldrh	r3, [r3, #12]
 80147d6:	2b00      	cmp	r3, #0
 80147d8:	d002      	beq.n	80147e0 <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 80147da:	69bb      	ldr	r3, [r7, #24]
 80147dc:	2200      	movs	r2, #0
 80147de:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 80147e0:	69bb      	ldr	r3, [r7, #24]
 80147e2:	79db      	ldrb	r3, [r3, #7]
 80147e4:	2b00      	cmp	r3, #0
 80147e6:	d003      	beq.n	80147f0 <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 80147e8:	69bb      	ldr	r3, [r7, #24]
 80147ea:	6a1b      	ldr	r3, [r3, #32]
 80147ec:	613b      	str	r3, [r7, #16]
 80147ee:	e014      	b.n	801481a <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 80147f0:	69bb      	ldr	r3, [r7, #24]
 80147f2:	331c      	adds	r3, #28
 80147f4:	781b      	ldrb	r3, [r3, #0]
 80147f6:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 80147f8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80147fc:	2b00      	cmp	r3, #0
 80147fe:	db02      	blt.n	8014806 <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 8014800:	23ff      	movs	r3, #255	; 0xff
 8014802:	613b      	str	r3, [r7, #16]
 8014804:	e009      	b.n	801481a <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 8014806:	7dfb      	ldrb	r3, [r7, #23]
 8014808:	2bbf      	cmp	r3, #191	; 0xbf
 801480a:	d903      	bls.n	8014814 <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 801480c:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8014810:	613b      	str	r3, [r7, #16]
 8014812:	e002      	b.n	801481a <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 8014814:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014818:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 801481a:	69bb      	ldr	r3, [r7, #24]
 801481c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801481e:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 8014820:	68fb      	ldr	r3, [r7, #12]
 8014822:	2b00      	cmp	r3, #0
 8014824:	d108      	bne.n	8014838 <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 8014826:	69bb      	ldr	r3, [r7, #24]
 8014828:	69da      	ldr	r2, [r3, #28]
 801482a:	693b      	ldr	r3, [r7, #16]
 801482c:	4013      	ands	r3, r2
 801482e:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 8014830:	68fb      	ldr	r3, [r7, #12]
 8014832:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8014836:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 8014838:	210a      	movs	r1, #10
 801483a:	69b8      	ldr	r0, [r7, #24]
 801483c:	f000 faa0 	bl	8014d80 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 8014840:	69bb      	ldr	r3, [r7, #24]
 8014842:	f103 011c 	add.w	r1, r3, #28
 8014846:	f107 030c 	add.w	r3, r7, #12
 801484a:	f107 0210 	add.w	r2, r7, #16
 801484e:	6878      	ldr	r0, [r7, #4]
 8014850:	f7f8 fbe6 	bl	800d020 <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 8014854:	3720      	adds	r7, #32
 8014856:	46bd      	mov	sp, r7
 8014858:	bd80      	pop	{r7, pc}
 801485a:	bf00      	nop
 801485c:	08020320 	.word	0x08020320
 8014860:	08020480 	.word	0x08020480
 8014864:	08020380 	.word	0x08020380
 8014868:	0802049c 	.word	0x0802049c
 801486c:	88888889 	.word	0x88888889

08014870 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 8014870:	b580      	push	{r7, lr}
 8014872:	b08a      	sub	sp, #40	; 0x28
 8014874:	af02      	add	r7, sp, #8
 8014876:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014878:	687b      	ldr	r3, [r7, #4]
 801487a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801487c:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 801487e:	2105      	movs	r1, #5
 8014880:	69b8      	ldr	r0, [r7, #24]
 8014882:	f000 fa7d 	bl	8014d80 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8014886:	f107 030c 	add.w	r3, r7, #12
 801488a:	2203      	movs	r2, #3
 801488c:	69b9      	ldr	r1, [r7, #24]
 801488e:	6878      	ldr	r0, [r7, #4]
 8014890:	f000 ff02 	bl	8015698 <dhcp_create_msg>
 8014894:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8014896:	697b      	ldr	r3, [r7, #20]
 8014898:	2b00      	cmp	r3, #0
 801489a:	d04e      	beq.n	801493a <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801489c:	697b      	ldr	r3, [r7, #20]
 801489e:	685b      	ldr	r3, [r3, #4]
 80148a0:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80148a2:	89b8      	ldrh	r0, [r7, #12]
 80148a4:	693b      	ldr	r3, [r7, #16]
 80148a6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80148aa:	2302      	movs	r3, #2
 80148ac:	2239      	movs	r2, #57	; 0x39
 80148ae:	f000 fa81 	bl	8014db4 <dhcp_option>
 80148b2:	4603      	mov	r3, r0
 80148b4:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80148b6:	89b8      	ldrh	r0, [r7, #12]
 80148b8:	693b      	ldr	r3, [r7, #16]
 80148ba:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80148be:	687b      	ldr	r3, [r7, #4]
 80148c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80148c2:	461a      	mov	r2, r3
 80148c4:	f000 fad0 	bl	8014e68 <dhcp_option_short>
 80148c8:	4603      	mov	r3, r0
 80148ca:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80148cc:	89b8      	ldrh	r0, [r7, #12]
 80148ce:	693b      	ldr	r3, [r7, #16]
 80148d0:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80148d4:	2303      	movs	r3, #3
 80148d6:	2237      	movs	r2, #55	; 0x37
 80148d8:	f000 fa6c 	bl	8014db4 <dhcp_option>
 80148dc:	4603      	mov	r3, r0
 80148de:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80148e0:	2300      	movs	r3, #0
 80148e2:	77bb      	strb	r3, [r7, #30]
 80148e4:	e00e      	b.n	8014904 <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80148e6:	89b8      	ldrh	r0, [r7, #12]
 80148e8:	693b      	ldr	r3, [r7, #16]
 80148ea:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80148ee:	7fbb      	ldrb	r3, [r7, #30]
 80148f0:	4a2a      	ldr	r2, [pc, #168]	; (801499c <dhcp_renew+0x12c>)
 80148f2:	5cd3      	ldrb	r3, [r2, r3]
 80148f4:	461a      	mov	r2, r3
 80148f6:	f000 fa91 	bl	8014e1c <dhcp_option_byte>
 80148fa:	4603      	mov	r3, r0
 80148fc:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80148fe:	7fbb      	ldrb	r3, [r7, #30]
 8014900:	3301      	adds	r3, #1
 8014902:	77bb      	strb	r3, [r7, #30]
 8014904:	7fbb      	ldrb	r3, [r7, #30]
 8014906:	2b02      	cmp	r3, #2
 8014908:	d9ed      	bls.n	80148e6 <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801490a:	89b8      	ldrh	r0, [r7, #12]
 801490c:	693b      	ldr	r3, [r7, #16]
 801490e:	33f0      	adds	r3, #240	; 0xf0
 8014910:	697a      	ldr	r2, [r7, #20]
 8014912:	4619      	mov	r1, r3
 8014914:	f000 ff96 	bl	8015844 <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8014918:	4b21      	ldr	r3, [pc, #132]	; (80149a0 <dhcp_renew+0x130>)
 801491a:	6818      	ldr	r0, [r3, #0]
 801491c:	69bb      	ldr	r3, [r7, #24]
 801491e:	f103 0218 	add.w	r2, r3, #24
 8014922:	687b      	ldr	r3, [r7, #4]
 8014924:	9300      	str	r3, [sp, #0]
 8014926:	2343      	movs	r3, #67	; 0x43
 8014928:	6979      	ldr	r1, [r7, #20]
 801492a:	f7fe fe8f 	bl	801364c <udp_sendto_if>
 801492e:	4603      	mov	r3, r0
 8014930:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8014932:	6978      	ldr	r0, [r7, #20]
 8014934:	f7f8 ffcc 	bl	800d8d0 <pbuf_free>
 8014938:	e001      	b.n	801493e <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801493a:	23ff      	movs	r3, #255	; 0xff
 801493c:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801493e:	69bb      	ldr	r3, [r7, #24]
 8014940:	799b      	ldrb	r3, [r3, #6]
 8014942:	2bff      	cmp	r3, #255	; 0xff
 8014944:	d005      	beq.n	8014952 <dhcp_renew+0xe2>
    dhcp->tries++;
 8014946:	69bb      	ldr	r3, [r7, #24]
 8014948:	799b      	ldrb	r3, [r3, #6]
 801494a:	3301      	adds	r3, #1
 801494c:	b2da      	uxtb	r2, r3
 801494e:	69bb      	ldr	r3, [r7, #24]
 8014950:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 8014952:	69bb      	ldr	r3, [r7, #24]
 8014954:	799b      	ldrb	r3, [r3, #6]
 8014956:	2b09      	cmp	r3, #9
 8014958:	d80a      	bhi.n	8014970 <dhcp_renew+0x100>
 801495a:	69bb      	ldr	r3, [r7, #24]
 801495c:	799b      	ldrb	r3, [r3, #6]
 801495e:	b29b      	uxth	r3, r3
 8014960:	461a      	mov	r2, r3
 8014962:	0152      	lsls	r2, r2, #5
 8014964:	1ad2      	subs	r2, r2, r3
 8014966:	0092      	lsls	r2, r2, #2
 8014968:	4413      	add	r3, r2
 801496a:	011b      	lsls	r3, r3, #4
 801496c:	b29b      	uxth	r3, r3
 801496e:	e001      	b.n	8014974 <dhcp_renew+0x104>
 8014970:	f644 6320 	movw	r3, #20000	; 0x4e20
 8014974:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8014976:	89fb      	ldrh	r3, [r7, #14]
 8014978:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801497c:	4a09      	ldr	r2, [pc, #36]	; (80149a4 <dhcp_renew+0x134>)
 801497e:	fb82 1203 	smull	r1, r2, r2, r3
 8014982:	1152      	asrs	r2, r2, #5
 8014984:	17db      	asrs	r3, r3, #31
 8014986:	1ad3      	subs	r3, r2, r3
 8014988:	b29a      	uxth	r2, r3
 801498a:	69bb      	ldr	r3, [r7, #24]
 801498c:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801498e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8014992:	4618      	mov	r0, r3
 8014994:	3720      	adds	r7, #32
 8014996:	46bd      	mov	sp, r7
 8014998:	bd80      	pop	{r7, pc}
 801499a:	bf00      	nop
 801499c:	20000070 	.word	0x20000070
 80149a0:	200004dc 	.word	0x200004dc
 80149a4:	10624dd3 	.word	0x10624dd3

080149a8 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 80149a8:	b580      	push	{r7, lr}
 80149aa:	b08a      	sub	sp, #40	; 0x28
 80149ac:	af02      	add	r7, sp, #8
 80149ae:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80149b0:	687b      	ldr	r3, [r7, #4]
 80149b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80149b4:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 80149b6:	2104      	movs	r1, #4
 80149b8:	69b8      	ldr	r0, [r7, #24]
 80149ba:	f000 f9e1 	bl	8014d80 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 80149be:	f107 030c 	add.w	r3, r7, #12
 80149c2:	2203      	movs	r2, #3
 80149c4:	69b9      	ldr	r1, [r7, #24]
 80149c6:	6878      	ldr	r0, [r7, #4]
 80149c8:	f000 fe66 	bl	8015698 <dhcp_create_msg>
 80149cc:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 80149ce:	697b      	ldr	r3, [r7, #20]
 80149d0:	2b00      	cmp	r3, #0
 80149d2:	d04c      	beq.n	8014a6e <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80149d4:	697b      	ldr	r3, [r7, #20]
 80149d6:	685b      	ldr	r3, [r3, #4]
 80149d8:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80149da:	89b8      	ldrh	r0, [r7, #12]
 80149dc:	693b      	ldr	r3, [r7, #16]
 80149de:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80149e2:	2302      	movs	r3, #2
 80149e4:	2239      	movs	r2, #57	; 0x39
 80149e6:	f000 f9e5 	bl	8014db4 <dhcp_option>
 80149ea:	4603      	mov	r3, r0
 80149ec:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80149ee:	89b8      	ldrh	r0, [r7, #12]
 80149f0:	693b      	ldr	r3, [r7, #16]
 80149f2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80149f6:	687b      	ldr	r3, [r7, #4]
 80149f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80149fa:	461a      	mov	r2, r3
 80149fc:	f000 fa34 	bl	8014e68 <dhcp_option_short>
 8014a00:	4603      	mov	r3, r0
 8014a02:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8014a04:	89b8      	ldrh	r0, [r7, #12]
 8014a06:	693b      	ldr	r3, [r7, #16]
 8014a08:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014a0c:	2303      	movs	r3, #3
 8014a0e:	2237      	movs	r2, #55	; 0x37
 8014a10:	f000 f9d0 	bl	8014db4 <dhcp_option>
 8014a14:	4603      	mov	r3, r0
 8014a16:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8014a18:	2300      	movs	r3, #0
 8014a1a:	77bb      	strb	r3, [r7, #30]
 8014a1c:	e00e      	b.n	8014a3c <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8014a1e:	89b8      	ldrh	r0, [r7, #12]
 8014a20:	693b      	ldr	r3, [r7, #16]
 8014a22:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014a26:	7fbb      	ldrb	r3, [r7, #30]
 8014a28:	4a29      	ldr	r2, [pc, #164]	; (8014ad0 <dhcp_rebind+0x128>)
 8014a2a:	5cd3      	ldrb	r3, [r2, r3]
 8014a2c:	461a      	mov	r2, r3
 8014a2e:	f000 f9f5 	bl	8014e1c <dhcp_option_byte>
 8014a32:	4603      	mov	r3, r0
 8014a34:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8014a36:	7fbb      	ldrb	r3, [r7, #30]
 8014a38:	3301      	adds	r3, #1
 8014a3a:	77bb      	strb	r3, [r7, #30]
 8014a3c:	7fbb      	ldrb	r3, [r7, #30]
 8014a3e:	2b02      	cmp	r3, #2
 8014a40:	d9ed      	bls.n	8014a1e <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8014a42:	89b8      	ldrh	r0, [r7, #12]
 8014a44:	693b      	ldr	r3, [r7, #16]
 8014a46:	33f0      	adds	r3, #240	; 0xf0
 8014a48:	697a      	ldr	r2, [r7, #20]
 8014a4a:	4619      	mov	r1, r3
 8014a4c:	f000 fefa 	bl	8015844 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8014a50:	4b20      	ldr	r3, [pc, #128]	; (8014ad4 <dhcp_rebind+0x12c>)
 8014a52:	6818      	ldr	r0, [r3, #0]
 8014a54:	687b      	ldr	r3, [r7, #4]
 8014a56:	9300      	str	r3, [sp, #0]
 8014a58:	2343      	movs	r3, #67	; 0x43
 8014a5a:	4a1f      	ldr	r2, [pc, #124]	; (8014ad8 <dhcp_rebind+0x130>)
 8014a5c:	6979      	ldr	r1, [r7, #20]
 8014a5e:	f7fe fdf5 	bl	801364c <udp_sendto_if>
 8014a62:	4603      	mov	r3, r0
 8014a64:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8014a66:	6978      	ldr	r0, [r7, #20]
 8014a68:	f7f8 ff32 	bl	800d8d0 <pbuf_free>
 8014a6c:	e001      	b.n	8014a72 <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8014a6e:	23ff      	movs	r3, #255	; 0xff
 8014a70:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8014a72:	69bb      	ldr	r3, [r7, #24]
 8014a74:	799b      	ldrb	r3, [r3, #6]
 8014a76:	2bff      	cmp	r3, #255	; 0xff
 8014a78:	d005      	beq.n	8014a86 <dhcp_rebind+0xde>
    dhcp->tries++;
 8014a7a:	69bb      	ldr	r3, [r7, #24]
 8014a7c:	799b      	ldrb	r3, [r3, #6]
 8014a7e:	3301      	adds	r3, #1
 8014a80:	b2da      	uxtb	r2, r3
 8014a82:	69bb      	ldr	r3, [r7, #24]
 8014a84:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8014a86:	69bb      	ldr	r3, [r7, #24]
 8014a88:	799b      	ldrb	r3, [r3, #6]
 8014a8a:	2b09      	cmp	r3, #9
 8014a8c:	d80a      	bhi.n	8014aa4 <dhcp_rebind+0xfc>
 8014a8e:	69bb      	ldr	r3, [r7, #24]
 8014a90:	799b      	ldrb	r3, [r3, #6]
 8014a92:	b29b      	uxth	r3, r3
 8014a94:	461a      	mov	r2, r3
 8014a96:	0152      	lsls	r2, r2, #5
 8014a98:	1ad2      	subs	r2, r2, r3
 8014a9a:	0092      	lsls	r2, r2, #2
 8014a9c:	4413      	add	r3, r2
 8014a9e:	00db      	lsls	r3, r3, #3
 8014aa0:	b29b      	uxth	r3, r3
 8014aa2:	e001      	b.n	8014aa8 <dhcp_rebind+0x100>
 8014aa4:	f242 7310 	movw	r3, #10000	; 0x2710
 8014aa8:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8014aaa:	89fb      	ldrh	r3, [r7, #14]
 8014aac:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8014ab0:	4a0a      	ldr	r2, [pc, #40]	; (8014adc <dhcp_rebind+0x134>)
 8014ab2:	fb82 1203 	smull	r1, r2, r2, r3
 8014ab6:	1152      	asrs	r2, r2, #5
 8014ab8:	17db      	asrs	r3, r3, #31
 8014aba:	1ad3      	subs	r3, r2, r3
 8014abc:	b29a      	uxth	r2, r3
 8014abe:	69bb      	ldr	r3, [r7, #24]
 8014ac0:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8014ac2:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8014ac6:	4618      	mov	r0, r3
 8014ac8:	3720      	adds	r7, #32
 8014aca:	46bd      	mov	sp, r7
 8014acc:	bd80      	pop	{r7, pc}
 8014ace:	bf00      	nop
 8014ad0:	20000070 	.word	0x20000070
 8014ad4:	200004dc 	.word	0x200004dc
 8014ad8:	08020e90 	.word	0x08020e90
 8014adc:	10624dd3 	.word	0x10624dd3

08014ae0 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 8014ae0:	b5b0      	push	{r4, r5, r7, lr}
 8014ae2:	b08a      	sub	sp, #40	; 0x28
 8014ae4:	af02      	add	r7, sp, #8
 8014ae6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014ae8:	687b      	ldr	r3, [r7, #4]
 8014aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014aec:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 8014aee:	2103      	movs	r1, #3
 8014af0:	69b8      	ldr	r0, [r7, #24]
 8014af2:	f000 f945 	bl	8014d80 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8014af6:	f107 030c 	add.w	r3, r7, #12
 8014afa:	2203      	movs	r2, #3
 8014afc:	69b9      	ldr	r1, [r7, #24]
 8014afe:	6878      	ldr	r0, [r7, #4]
 8014b00:	f000 fdca 	bl	8015698 <dhcp_create_msg>
 8014b04:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8014b06:	697b      	ldr	r3, [r7, #20]
 8014b08:	2b00      	cmp	r3, #0
 8014b0a:	d066      	beq.n	8014bda <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8014b0c:	697b      	ldr	r3, [r7, #20]
 8014b0e:	685b      	ldr	r3, [r3, #4]
 8014b10:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8014b12:	89b8      	ldrh	r0, [r7, #12]
 8014b14:	693b      	ldr	r3, [r7, #16]
 8014b16:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014b1a:	2302      	movs	r3, #2
 8014b1c:	2239      	movs	r2, #57	; 0x39
 8014b1e:	f000 f949 	bl	8014db4 <dhcp_option>
 8014b22:	4603      	mov	r3, r0
 8014b24:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 8014b26:	89b8      	ldrh	r0, [r7, #12]
 8014b28:	693b      	ldr	r3, [r7, #16]
 8014b2a:	33f0      	adds	r3, #240	; 0xf0
 8014b2c:	f44f 7210 	mov.w	r2, #576	; 0x240
 8014b30:	4619      	mov	r1, r3
 8014b32:	f000 f999 	bl	8014e68 <dhcp_option_short>
 8014b36:	4603      	mov	r3, r0
 8014b38:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8014b3a:	89b8      	ldrh	r0, [r7, #12]
 8014b3c:	693b      	ldr	r3, [r7, #16]
 8014b3e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014b42:	2304      	movs	r3, #4
 8014b44:	2232      	movs	r2, #50	; 0x32
 8014b46:	f000 f935 	bl	8014db4 <dhcp_option>
 8014b4a:	4603      	mov	r3, r0
 8014b4c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8014b4e:	89bc      	ldrh	r4, [r7, #12]
 8014b50:	693b      	ldr	r3, [r7, #16]
 8014b52:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8014b56:	69bb      	ldr	r3, [r7, #24]
 8014b58:	69db      	ldr	r3, [r3, #28]
 8014b5a:	4618      	mov	r0, r3
 8014b5c:	f7f7 fc31 	bl	800c3c2 <lwip_htonl>
 8014b60:	4603      	mov	r3, r0
 8014b62:	461a      	mov	r2, r3
 8014b64:	4629      	mov	r1, r5
 8014b66:	4620      	mov	r0, r4
 8014b68:	f000 f9b0 	bl	8014ecc <dhcp_option_long>
 8014b6c:	4603      	mov	r3, r0
 8014b6e:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8014b70:	89b8      	ldrh	r0, [r7, #12]
 8014b72:	693b      	ldr	r3, [r7, #16]
 8014b74:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014b78:	2303      	movs	r3, #3
 8014b7a:	2237      	movs	r2, #55	; 0x37
 8014b7c:	f000 f91a 	bl	8014db4 <dhcp_option>
 8014b80:	4603      	mov	r3, r0
 8014b82:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8014b84:	2300      	movs	r3, #0
 8014b86:	77bb      	strb	r3, [r7, #30]
 8014b88:	e00e      	b.n	8014ba8 <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8014b8a:	89b8      	ldrh	r0, [r7, #12]
 8014b8c:	693b      	ldr	r3, [r7, #16]
 8014b8e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014b92:	7fbb      	ldrb	r3, [r7, #30]
 8014b94:	4a29      	ldr	r2, [pc, #164]	; (8014c3c <dhcp_reboot+0x15c>)
 8014b96:	5cd3      	ldrb	r3, [r2, r3]
 8014b98:	461a      	mov	r2, r3
 8014b9a:	f000 f93f 	bl	8014e1c <dhcp_option_byte>
 8014b9e:	4603      	mov	r3, r0
 8014ba0:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8014ba2:	7fbb      	ldrb	r3, [r7, #30]
 8014ba4:	3301      	adds	r3, #1
 8014ba6:	77bb      	strb	r3, [r7, #30]
 8014ba8:	7fbb      	ldrb	r3, [r7, #30]
 8014baa:	2b02      	cmp	r3, #2
 8014bac:	d9ed      	bls.n	8014b8a <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8014bae:	89b8      	ldrh	r0, [r7, #12]
 8014bb0:	693b      	ldr	r3, [r7, #16]
 8014bb2:	33f0      	adds	r3, #240	; 0xf0
 8014bb4:	697a      	ldr	r2, [r7, #20]
 8014bb6:	4619      	mov	r1, r3
 8014bb8:	f000 fe44 	bl	8015844 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8014bbc:	4b20      	ldr	r3, [pc, #128]	; (8014c40 <dhcp_reboot+0x160>)
 8014bbe:	6818      	ldr	r0, [r3, #0]
 8014bc0:	687b      	ldr	r3, [r7, #4]
 8014bc2:	9300      	str	r3, [sp, #0]
 8014bc4:	2343      	movs	r3, #67	; 0x43
 8014bc6:	4a1f      	ldr	r2, [pc, #124]	; (8014c44 <dhcp_reboot+0x164>)
 8014bc8:	6979      	ldr	r1, [r7, #20]
 8014bca:	f7fe fd3f 	bl	801364c <udp_sendto_if>
 8014bce:	4603      	mov	r3, r0
 8014bd0:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8014bd2:	6978      	ldr	r0, [r7, #20]
 8014bd4:	f7f8 fe7c 	bl	800d8d0 <pbuf_free>
 8014bd8:	e001      	b.n	8014bde <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8014bda:	23ff      	movs	r3, #255	; 0xff
 8014bdc:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8014bde:	69bb      	ldr	r3, [r7, #24]
 8014be0:	799b      	ldrb	r3, [r3, #6]
 8014be2:	2bff      	cmp	r3, #255	; 0xff
 8014be4:	d005      	beq.n	8014bf2 <dhcp_reboot+0x112>
    dhcp->tries++;
 8014be6:	69bb      	ldr	r3, [r7, #24]
 8014be8:	799b      	ldrb	r3, [r3, #6]
 8014bea:	3301      	adds	r3, #1
 8014bec:	b2da      	uxtb	r2, r3
 8014bee:	69bb      	ldr	r3, [r7, #24]
 8014bf0:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8014bf2:	69bb      	ldr	r3, [r7, #24]
 8014bf4:	799b      	ldrb	r3, [r3, #6]
 8014bf6:	2b09      	cmp	r3, #9
 8014bf8:	d80a      	bhi.n	8014c10 <dhcp_reboot+0x130>
 8014bfa:	69bb      	ldr	r3, [r7, #24]
 8014bfc:	799b      	ldrb	r3, [r3, #6]
 8014bfe:	b29b      	uxth	r3, r3
 8014c00:	461a      	mov	r2, r3
 8014c02:	0152      	lsls	r2, r2, #5
 8014c04:	1ad2      	subs	r2, r2, r3
 8014c06:	0092      	lsls	r2, r2, #2
 8014c08:	4413      	add	r3, r2
 8014c0a:	00db      	lsls	r3, r3, #3
 8014c0c:	b29b      	uxth	r3, r3
 8014c0e:	e001      	b.n	8014c14 <dhcp_reboot+0x134>
 8014c10:	f242 7310 	movw	r3, #10000	; 0x2710
 8014c14:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8014c16:	89fb      	ldrh	r3, [r7, #14]
 8014c18:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8014c1c:	4a0a      	ldr	r2, [pc, #40]	; (8014c48 <dhcp_reboot+0x168>)
 8014c1e:	fb82 1203 	smull	r1, r2, r2, r3
 8014c22:	1152      	asrs	r2, r2, #5
 8014c24:	17db      	asrs	r3, r3, #31
 8014c26:	1ad3      	subs	r3, r2, r3
 8014c28:	b29a      	uxth	r2, r3
 8014c2a:	69bb      	ldr	r3, [r7, #24]
 8014c2c:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8014c2e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8014c32:	4618      	mov	r0, r3
 8014c34:	3720      	adds	r7, #32
 8014c36:	46bd      	mov	sp, r7
 8014c38:	bdb0      	pop	{r4, r5, r7, pc}
 8014c3a:	bf00      	nop
 8014c3c:	20000070 	.word	0x20000070
 8014c40:	200004dc 	.word	0x200004dc
 8014c44:	08020e90 	.word	0x08020e90
 8014c48:	10624dd3 	.word	0x10624dd3

08014c4c <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 8014c4c:	b5b0      	push	{r4, r5, r7, lr}
 8014c4e:	b08a      	sub	sp, #40	; 0x28
 8014c50:	af02      	add	r7, sp, #8
 8014c52:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014c54:	687b      	ldr	r3, [r7, #4]
 8014c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014c58:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 8014c5a:	69fb      	ldr	r3, [r7, #28]
 8014c5c:	2b00      	cmp	r3, #0
 8014c5e:	f000 8084 	beq.w	8014d6a <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 8014c62:	69fb      	ldr	r3, [r7, #28]
 8014c64:	795b      	ldrb	r3, [r3, #5]
 8014c66:	2b00      	cmp	r3, #0
 8014c68:	f000 8081 	beq.w	8014d6e <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 8014c6c:	69fb      	ldr	r3, [r7, #28]
 8014c6e:	699b      	ldr	r3, [r3, #24]
 8014c70:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 8014c72:	69fb      	ldr	r3, [r7, #28]
 8014c74:	2200      	movs	r2, #0
 8014c76:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 8014c78:	69fb      	ldr	r3, [r7, #28]
 8014c7a:	2200      	movs	r2, #0
 8014c7c:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8014c7e:	69fb      	ldr	r3, [r7, #28]
 8014c80:	2200      	movs	r2, #0
 8014c82:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8014c84:	69fb      	ldr	r3, [r7, #28]
 8014c86:	2200      	movs	r2, #0
 8014c88:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 8014c8a:	69fb      	ldr	r3, [r7, #28]
 8014c8c:	2200      	movs	r2, #0
 8014c8e:	631a      	str	r2, [r3, #48]	; 0x30
 8014c90:	69fb      	ldr	r3, [r7, #28]
 8014c92:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8014c94:	69fb      	ldr	r3, [r7, #28]
 8014c96:	62da      	str	r2, [r3, #44]	; 0x2c
 8014c98:	69fb      	ldr	r3, [r7, #28]
 8014c9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014c9c:	69fb      	ldr	r3, [r7, #28]
 8014c9e:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 8014ca0:	69fb      	ldr	r3, [r7, #28]
 8014ca2:	2200      	movs	r2, #0
 8014ca4:	829a      	strh	r2, [r3, #20]
 8014ca6:	69fb      	ldr	r3, [r7, #28]
 8014ca8:	8a9a      	ldrh	r2, [r3, #20]
 8014caa:	69fb      	ldr	r3, [r7, #28]
 8014cac:	825a      	strh	r2, [r3, #18]
 8014cae:	69fb      	ldr	r3, [r7, #28]
 8014cb0:	8a5a      	ldrh	r2, [r3, #18]
 8014cb2:	69fb      	ldr	r3, [r7, #28]
 8014cb4:	821a      	strh	r2, [r3, #16]
 8014cb6:	69fb      	ldr	r3, [r7, #28]
 8014cb8:	8a1a      	ldrh	r2, [r3, #16]
 8014cba:	69fb      	ldr	r3, [r7, #28]
 8014cbc:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 8014cbe:	6878      	ldr	r0, [r7, #4]
 8014cc0:	f000 fdee 	bl	80158a0 <dhcp_supplied_address>
 8014cc4:	4603      	mov	r3, r0
 8014cc6:	2b00      	cmp	r3, #0
 8014cc8:	d03b      	beq.n	8014d42 <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 8014cca:	f107 030e 	add.w	r3, r7, #14
 8014cce:	2207      	movs	r2, #7
 8014cd0:	69f9      	ldr	r1, [r7, #28]
 8014cd2:	6878      	ldr	r0, [r7, #4]
 8014cd4:	f000 fce0 	bl	8015698 <dhcp_create_msg>
 8014cd8:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 8014cda:	69bb      	ldr	r3, [r7, #24]
 8014cdc:	2b00      	cmp	r3, #0
 8014cde:	d030      	beq.n	8014d42 <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8014ce0:	69bb      	ldr	r3, [r7, #24]
 8014ce2:	685b      	ldr	r3, [r3, #4]
 8014ce4:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8014ce6:	89f8      	ldrh	r0, [r7, #14]
 8014ce8:	697b      	ldr	r3, [r7, #20]
 8014cea:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014cee:	2304      	movs	r3, #4
 8014cf0:	2236      	movs	r2, #54	; 0x36
 8014cf2:	f000 f85f 	bl	8014db4 <dhcp_option>
 8014cf6:	4603      	mov	r3, r0
 8014cf8:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 8014cfa:	89fc      	ldrh	r4, [r7, #14]
 8014cfc:	697b      	ldr	r3, [r7, #20]
 8014cfe:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8014d02:	693b      	ldr	r3, [r7, #16]
 8014d04:	4618      	mov	r0, r3
 8014d06:	f7f7 fb5c 	bl	800c3c2 <lwip_htonl>
 8014d0a:	4603      	mov	r3, r0
 8014d0c:	461a      	mov	r2, r3
 8014d0e:	4629      	mov	r1, r5
 8014d10:	4620      	mov	r0, r4
 8014d12:	f000 f8db 	bl	8014ecc <dhcp_option_long>
 8014d16:	4603      	mov	r3, r0
 8014d18:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8014d1a:	89f8      	ldrh	r0, [r7, #14]
 8014d1c:	697b      	ldr	r3, [r7, #20]
 8014d1e:	33f0      	adds	r3, #240	; 0xf0
 8014d20:	69ba      	ldr	r2, [r7, #24]
 8014d22:	4619      	mov	r1, r3
 8014d24:	f000 fd8e 	bl	8015844 <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8014d28:	4b13      	ldr	r3, [pc, #76]	; (8014d78 <dhcp_release_and_stop+0x12c>)
 8014d2a:	6818      	ldr	r0, [r3, #0]
 8014d2c:	f107 0210 	add.w	r2, r7, #16
 8014d30:	687b      	ldr	r3, [r7, #4]
 8014d32:	9300      	str	r3, [sp, #0]
 8014d34:	2343      	movs	r3, #67	; 0x43
 8014d36:	69b9      	ldr	r1, [r7, #24]
 8014d38:	f7fe fc88 	bl	801364c <udp_sendto_if>
      pbuf_free(p_out);
 8014d3c:	69b8      	ldr	r0, [r7, #24]
 8014d3e:	f7f8 fdc7 	bl	800d8d0 <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8014d42:	4b0e      	ldr	r3, [pc, #56]	; (8014d7c <dhcp_release_and_stop+0x130>)
 8014d44:	4a0d      	ldr	r2, [pc, #52]	; (8014d7c <dhcp_release_and_stop+0x130>)
 8014d46:	490d      	ldr	r1, [pc, #52]	; (8014d7c <dhcp_release_and_stop+0x130>)
 8014d48:	6878      	ldr	r0, [r7, #4]
 8014d4a:	f7f8 f969 	bl	800d020 <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 8014d4e:	2100      	movs	r1, #0
 8014d50:	69f8      	ldr	r0, [r7, #28]
 8014d52:	f000 f815 	bl	8014d80 <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 8014d56:	69fb      	ldr	r3, [r7, #28]
 8014d58:	791b      	ldrb	r3, [r3, #4]
 8014d5a:	2b00      	cmp	r3, #0
 8014d5c:	d008      	beq.n	8014d70 <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8014d5e:	f7fe ffc1 	bl	8013ce4 <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 8014d62:	69fb      	ldr	r3, [r7, #28]
 8014d64:	2200      	movs	r2, #0
 8014d66:	711a      	strb	r2, [r3, #4]
 8014d68:	e002      	b.n	8014d70 <dhcp_release_and_stop+0x124>
    return;
 8014d6a:	bf00      	nop
 8014d6c:	e000      	b.n	8014d70 <dhcp_release_and_stop+0x124>
    return;
 8014d6e:	bf00      	nop
  }
}
 8014d70:	3720      	adds	r7, #32
 8014d72:	46bd      	mov	sp, r7
 8014d74:	bdb0      	pop	{r4, r5, r7, pc}
 8014d76:	bf00      	nop
 8014d78:	200004dc 	.word	0x200004dc
 8014d7c:	08020e8c 	.word	0x08020e8c

08014d80 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 8014d80:	b480      	push	{r7}
 8014d82:	b083      	sub	sp, #12
 8014d84:	af00      	add	r7, sp, #0
 8014d86:	6078      	str	r0, [r7, #4]
 8014d88:	460b      	mov	r3, r1
 8014d8a:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 8014d8c:	687b      	ldr	r3, [r7, #4]
 8014d8e:	795b      	ldrb	r3, [r3, #5]
 8014d90:	78fa      	ldrb	r2, [r7, #3]
 8014d92:	429a      	cmp	r2, r3
 8014d94:	d008      	beq.n	8014da8 <dhcp_set_state+0x28>
    dhcp->state = new_state;
 8014d96:	687b      	ldr	r3, [r7, #4]
 8014d98:	78fa      	ldrb	r2, [r7, #3]
 8014d9a:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 8014d9c:	687b      	ldr	r3, [r7, #4]
 8014d9e:	2200      	movs	r2, #0
 8014da0:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 8014da2:	687b      	ldr	r3, [r7, #4]
 8014da4:	2200      	movs	r2, #0
 8014da6:	811a      	strh	r2, [r3, #8]
  }
}
 8014da8:	bf00      	nop
 8014daa:	370c      	adds	r7, #12
 8014dac:	46bd      	mov	sp, r7
 8014dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014db2:	4770      	bx	lr

08014db4 <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 8014db4:	b580      	push	{r7, lr}
 8014db6:	b082      	sub	sp, #8
 8014db8:	af00      	add	r7, sp, #0
 8014dba:	6039      	str	r1, [r7, #0]
 8014dbc:	4611      	mov	r1, r2
 8014dbe:	461a      	mov	r2, r3
 8014dc0:	4603      	mov	r3, r0
 8014dc2:	80fb      	strh	r3, [r7, #6]
 8014dc4:	460b      	mov	r3, r1
 8014dc6:	717b      	strb	r3, [r7, #5]
 8014dc8:	4613      	mov	r3, r2
 8014dca:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8014dcc:	88fa      	ldrh	r2, [r7, #6]
 8014dce:	793b      	ldrb	r3, [r7, #4]
 8014dd0:	4413      	add	r3, r2
 8014dd2:	3302      	adds	r3, #2
 8014dd4:	2b44      	cmp	r3, #68	; 0x44
 8014dd6:	d906      	bls.n	8014de6 <dhcp_option+0x32>
 8014dd8:	4b0d      	ldr	r3, [pc, #52]	; (8014e10 <dhcp_option+0x5c>)
 8014dda:	f240 529a 	movw	r2, #1434	; 0x59a
 8014dde:	490d      	ldr	r1, [pc, #52]	; (8014e14 <dhcp_option+0x60>)
 8014de0:	480d      	ldr	r0, [pc, #52]	; (8014e18 <dhcp_option+0x64>)
 8014de2:	f003 fdf3 	bl	80189cc <iprintf>
  options[options_out_len++] = option_type;
 8014de6:	88fb      	ldrh	r3, [r7, #6]
 8014de8:	1c5a      	adds	r2, r3, #1
 8014dea:	80fa      	strh	r2, [r7, #6]
 8014dec:	461a      	mov	r2, r3
 8014dee:	683b      	ldr	r3, [r7, #0]
 8014df0:	4413      	add	r3, r2
 8014df2:	797a      	ldrb	r2, [r7, #5]
 8014df4:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 8014df6:	88fb      	ldrh	r3, [r7, #6]
 8014df8:	1c5a      	adds	r2, r3, #1
 8014dfa:	80fa      	strh	r2, [r7, #6]
 8014dfc:	461a      	mov	r2, r3
 8014dfe:	683b      	ldr	r3, [r7, #0]
 8014e00:	4413      	add	r3, r2
 8014e02:	793a      	ldrb	r2, [r7, #4]
 8014e04:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8014e06:	88fb      	ldrh	r3, [r7, #6]
}
 8014e08:	4618      	mov	r0, r3
 8014e0a:	3708      	adds	r7, #8
 8014e0c:	46bd      	mov	sp, r7
 8014e0e:	bd80      	pop	{r7, pc}
 8014e10:	08020320 	.word	0x08020320
 8014e14:	080204b4 	.word	0x080204b4
 8014e18:	08020380 	.word	0x08020380

08014e1c <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 8014e1c:	b580      	push	{r7, lr}
 8014e1e:	b082      	sub	sp, #8
 8014e20:	af00      	add	r7, sp, #0
 8014e22:	4603      	mov	r3, r0
 8014e24:	6039      	str	r1, [r7, #0]
 8014e26:	80fb      	strh	r3, [r7, #6]
 8014e28:	4613      	mov	r3, r2
 8014e2a:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8014e2c:	88fb      	ldrh	r3, [r7, #6]
 8014e2e:	2b43      	cmp	r3, #67	; 0x43
 8014e30:	d906      	bls.n	8014e40 <dhcp_option_byte+0x24>
 8014e32:	4b0a      	ldr	r3, [pc, #40]	; (8014e5c <dhcp_option_byte+0x40>)
 8014e34:	f240 52a6 	movw	r2, #1446	; 0x5a6
 8014e38:	4909      	ldr	r1, [pc, #36]	; (8014e60 <dhcp_option_byte+0x44>)
 8014e3a:	480a      	ldr	r0, [pc, #40]	; (8014e64 <dhcp_option_byte+0x48>)
 8014e3c:	f003 fdc6 	bl	80189cc <iprintf>
  options[options_out_len++] = value;
 8014e40:	88fb      	ldrh	r3, [r7, #6]
 8014e42:	1c5a      	adds	r2, r3, #1
 8014e44:	80fa      	strh	r2, [r7, #6]
 8014e46:	461a      	mov	r2, r3
 8014e48:	683b      	ldr	r3, [r7, #0]
 8014e4a:	4413      	add	r3, r2
 8014e4c:	797a      	ldrb	r2, [r7, #5]
 8014e4e:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8014e50:	88fb      	ldrh	r3, [r7, #6]
}
 8014e52:	4618      	mov	r0, r3
 8014e54:	3708      	adds	r7, #8
 8014e56:	46bd      	mov	sp, r7
 8014e58:	bd80      	pop	{r7, pc}
 8014e5a:	bf00      	nop
 8014e5c:	08020320 	.word	0x08020320
 8014e60:	080204f8 	.word	0x080204f8
 8014e64:	08020380 	.word	0x08020380

08014e68 <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 8014e68:	b580      	push	{r7, lr}
 8014e6a:	b082      	sub	sp, #8
 8014e6c:	af00      	add	r7, sp, #0
 8014e6e:	4603      	mov	r3, r0
 8014e70:	6039      	str	r1, [r7, #0]
 8014e72:	80fb      	strh	r3, [r7, #6]
 8014e74:	4613      	mov	r3, r2
 8014e76:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8014e78:	88fb      	ldrh	r3, [r7, #6]
 8014e7a:	3302      	adds	r3, #2
 8014e7c:	2b44      	cmp	r3, #68	; 0x44
 8014e7e:	d906      	bls.n	8014e8e <dhcp_option_short+0x26>
 8014e80:	4b0f      	ldr	r3, [pc, #60]	; (8014ec0 <dhcp_option_short+0x58>)
 8014e82:	f240 52ae 	movw	r2, #1454	; 0x5ae
 8014e86:	490f      	ldr	r1, [pc, #60]	; (8014ec4 <dhcp_option_short+0x5c>)
 8014e88:	480f      	ldr	r0, [pc, #60]	; (8014ec8 <dhcp_option_short+0x60>)
 8014e8a:	f003 fd9f 	bl	80189cc <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8014e8e:	88bb      	ldrh	r3, [r7, #4]
 8014e90:	0a1b      	lsrs	r3, r3, #8
 8014e92:	b29a      	uxth	r2, r3
 8014e94:	88fb      	ldrh	r3, [r7, #6]
 8014e96:	1c59      	adds	r1, r3, #1
 8014e98:	80f9      	strh	r1, [r7, #6]
 8014e9a:	4619      	mov	r1, r3
 8014e9c:	683b      	ldr	r3, [r7, #0]
 8014e9e:	440b      	add	r3, r1
 8014ea0:	b2d2      	uxtb	r2, r2
 8014ea2:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 8014ea4:	88fb      	ldrh	r3, [r7, #6]
 8014ea6:	1c5a      	adds	r2, r3, #1
 8014ea8:	80fa      	strh	r2, [r7, #6]
 8014eaa:	461a      	mov	r2, r3
 8014eac:	683b      	ldr	r3, [r7, #0]
 8014eae:	4413      	add	r3, r2
 8014eb0:	88ba      	ldrh	r2, [r7, #4]
 8014eb2:	b2d2      	uxtb	r2, r2
 8014eb4:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8014eb6:	88fb      	ldrh	r3, [r7, #6]
}
 8014eb8:	4618      	mov	r0, r3
 8014eba:	3708      	adds	r7, #8
 8014ebc:	46bd      	mov	sp, r7
 8014ebe:	bd80      	pop	{r7, pc}
 8014ec0:	08020320 	.word	0x08020320
 8014ec4:	08020530 	.word	0x08020530
 8014ec8:	08020380 	.word	0x08020380

08014ecc <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 8014ecc:	b580      	push	{r7, lr}
 8014ece:	b084      	sub	sp, #16
 8014ed0:	af00      	add	r7, sp, #0
 8014ed2:	4603      	mov	r3, r0
 8014ed4:	60b9      	str	r1, [r7, #8]
 8014ed6:	607a      	str	r2, [r7, #4]
 8014ed8:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 8014eda:	89fb      	ldrh	r3, [r7, #14]
 8014edc:	3304      	adds	r3, #4
 8014ede:	2b44      	cmp	r3, #68	; 0x44
 8014ee0:	d906      	bls.n	8014ef0 <dhcp_option_long+0x24>
 8014ee2:	4b19      	ldr	r3, [pc, #100]	; (8014f48 <dhcp_option_long+0x7c>)
 8014ee4:	f240 52b7 	movw	r2, #1463	; 0x5b7
 8014ee8:	4918      	ldr	r1, [pc, #96]	; (8014f4c <dhcp_option_long+0x80>)
 8014eea:	4819      	ldr	r0, [pc, #100]	; (8014f50 <dhcp_option_long+0x84>)
 8014eec:	f003 fd6e 	bl	80189cc <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 8014ef0:	687b      	ldr	r3, [r7, #4]
 8014ef2:	0e1a      	lsrs	r2, r3, #24
 8014ef4:	89fb      	ldrh	r3, [r7, #14]
 8014ef6:	1c59      	adds	r1, r3, #1
 8014ef8:	81f9      	strh	r1, [r7, #14]
 8014efa:	4619      	mov	r1, r3
 8014efc:	68bb      	ldr	r3, [r7, #8]
 8014efe:	440b      	add	r3, r1
 8014f00:	b2d2      	uxtb	r2, r2
 8014f02:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 8014f04:	687b      	ldr	r3, [r7, #4]
 8014f06:	0c1a      	lsrs	r2, r3, #16
 8014f08:	89fb      	ldrh	r3, [r7, #14]
 8014f0a:	1c59      	adds	r1, r3, #1
 8014f0c:	81f9      	strh	r1, [r7, #14]
 8014f0e:	4619      	mov	r1, r3
 8014f10:	68bb      	ldr	r3, [r7, #8]
 8014f12:	440b      	add	r3, r1
 8014f14:	b2d2      	uxtb	r2, r2
 8014f16:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 8014f18:	687b      	ldr	r3, [r7, #4]
 8014f1a:	0a1a      	lsrs	r2, r3, #8
 8014f1c:	89fb      	ldrh	r3, [r7, #14]
 8014f1e:	1c59      	adds	r1, r3, #1
 8014f20:	81f9      	strh	r1, [r7, #14]
 8014f22:	4619      	mov	r1, r3
 8014f24:	68bb      	ldr	r3, [r7, #8]
 8014f26:	440b      	add	r3, r1
 8014f28:	b2d2      	uxtb	r2, r2
 8014f2a:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 8014f2c:	89fb      	ldrh	r3, [r7, #14]
 8014f2e:	1c5a      	adds	r2, r3, #1
 8014f30:	81fa      	strh	r2, [r7, #14]
 8014f32:	461a      	mov	r2, r3
 8014f34:	68bb      	ldr	r3, [r7, #8]
 8014f36:	4413      	add	r3, r2
 8014f38:	687a      	ldr	r2, [r7, #4]
 8014f3a:	b2d2      	uxtb	r2, r2
 8014f3c:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8014f3e:	89fb      	ldrh	r3, [r7, #14]
}
 8014f40:	4618      	mov	r0, r3
 8014f42:	3710      	adds	r7, #16
 8014f44:	46bd      	mov	sp, r7
 8014f46:	bd80      	pop	{r7, pc}
 8014f48:	08020320 	.word	0x08020320
 8014f4c:	0802056c 	.word	0x0802056c
 8014f50:	08020380 	.word	0x08020380

08014f54 <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 8014f54:	b580      	push	{r7, lr}
 8014f56:	b090      	sub	sp, #64	; 0x40
 8014f58:	af00      	add	r7, sp, #0
 8014f5a:	6078      	str	r0, [r7, #4]
 8014f5c:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 8014f5e:	2300      	movs	r3, #0
 8014f60:	62fb      	str	r3, [r7, #44]	; 0x2c
  int parse_sname_as_options = 0;
 8014f62:	2300      	movs	r3, #0
 8014f64:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 8014f66:	2208      	movs	r2, #8
 8014f68:	2100      	movs	r1, #0
 8014f6a:	48be      	ldr	r0, [pc, #760]	; (8015264 <dhcp_parse_reply+0x310>)
 8014f6c:	f003 f812 	bl	8017f94 <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 8014f70:	687b      	ldr	r3, [r7, #4]
 8014f72:	895b      	ldrh	r3, [r3, #10]
 8014f74:	2b2b      	cmp	r3, #43	; 0x2b
 8014f76:	d802      	bhi.n	8014f7e <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 8014f78:	f06f 0301 	mvn.w	r3, #1
 8014f7c:	e2a8      	b.n	80154d0 <dhcp_parse_reply+0x57c>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 8014f7e:	687b      	ldr	r3, [r7, #4]
 8014f80:	685b      	ldr	r3, [r3, #4]
 8014f82:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 8014f84:	23f0      	movs	r3, #240	; 0xf0
 8014f86:	86fb      	strh	r3, [r7, #54]	; 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 8014f88:	687b      	ldr	r3, [r7, #4]
 8014f8a:	891b      	ldrh	r3, [r3, #8]
 8014f8c:	86bb      	strh	r3, [r7, #52]	; 0x34
again:
  q = p;
 8014f8e:	687b      	ldr	r3, [r7, #4]
 8014f90:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 8014f92:	e00c      	b.n	8014fae <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 8014f94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014f96:	895b      	ldrh	r3, [r3, #10]
 8014f98:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8014f9a:	1ad3      	subs	r3, r2, r3
 8014f9c:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 8014f9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014fa0:	895b      	ldrh	r3, [r3, #10]
 8014fa2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8014fa4:	1ad3      	subs	r3, r2, r3
 8014fa6:	86bb      	strh	r3, [r7, #52]	; 0x34
    q = q->next;
 8014fa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014faa:	681b      	ldr	r3, [r3, #0]
 8014fac:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 8014fae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014fb0:	2b00      	cmp	r3, #0
 8014fb2:	d004      	beq.n	8014fbe <dhcp_parse_reply+0x6a>
 8014fb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014fb6:	895b      	ldrh	r3, [r3, #10]
 8014fb8:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8014fba:	429a      	cmp	r2, r3
 8014fbc:	d2ea      	bcs.n	8014f94 <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 8014fbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014fc0:	2b00      	cmp	r3, #0
 8014fc2:	d102      	bne.n	8014fca <dhcp_parse_reply+0x76>
    return ERR_BUF;
 8014fc4:	f06f 0301 	mvn.w	r3, #1
 8014fc8:	e282      	b.n	80154d0 <dhcp_parse_reply+0x57c>
  }
  offset = options_idx;
 8014fca:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8014fcc:	877b      	strh	r3, [r7, #58]	; 0x3a
  offset_max = options_idx_max;
 8014fce:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8014fd0:	873b      	strh	r3, [r7, #56]	; 0x38
  options = (u8_t *)q->payload;
 8014fd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014fd4:	685b      	ldr	r3, [r3, #4]
 8014fd6:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8014fd8:	e23a      	b.n	8015450 <dhcp_parse_reply+0x4fc>
    u8_t op = options[offset];
 8014fda:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8014fdc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8014fde:	4413      	add	r3, r2
 8014fe0:	781b      	ldrb	r3, [r3, #0]
 8014fe2:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 8014fe4:	2300      	movs	r3, #0
 8014fe6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    int decode_idx = -1;
 8014fea:	f04f 33ff 	mov.w	r3, #4294967295
 8014fee:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 8014ff0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8014ff2:	3302      	adds	r3, #2
 8014ff4:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 8014ff6:	8bfa      	ldrh	r2, [r7, #30]
 8014ff8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8014ffa:	429a      	cmp	r2, r3
 8014ffc:	d202      	bcs.n	8015004 <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 8014ffe:	f06f 0301 	mvn.w	r3, #1
 8015002:	e265      	b.n	80154d0 <dhcp_parse_reply+0x57c>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 8015004:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015006:	3301      	adds	r3, #1
 8015008:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801500a:	8952      	ldrh	r2, [r2, #10]
 801500c:	4293      	cmp	r3, r2
 801500e:	da07      	bge.n	8015020 <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 8015010:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015012:	3301      	adds	r3, #1
 8015014:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8015016:	4413      	add	r3, r2
 8015018:	781b      	ldrb	r3, [r3, #0]
 801501a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801501e:	e00b      	b.n	8015038 <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 8015020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015022:	681b      	ldr	r3, [r3, #0]
 8015024:	2b00      	cmp	r3, #0
 8015026:	d004      	beq.n	8015032 <dhcp_parse_reply+0xde>
 8015028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801502a:	681b      	ldr	r3, [r3, #0]
 801502c:	685b      	ldr	r3, [r3, #4]
 801502e:	781b      	ldrb	r3, [r3, #0]
 8015030:	e000      	b.n	8015034 <dhcp_parse_reply+0xe0>
 8015032:	2300      	movs	r3, #0
 8015034:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 8015038:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801503c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    switch (op) {
 8015040:	7dfb      	ldrb	r3, [r7, #23]
 8015042:	2b3b      	cmp	r3, #59	; 0x3b
 8015044:	f200 812d 	bhi.w	80152a2 <dhcp_parse_reply+0x34e>
 8015048:	a201      	add	r2, pc, #4	; (adr r2, 8015050 <dhcp_parse_reply+0xfc>)
 801504a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801504e:	bf00      	nop
 8015050:	08015141 	.word	0x08015141
 8015054:	08015151 	.word	0x08015151
 8015058:	080152a3 	.word	0x080152a3
 801505c:	08015173 	.word	0x08015173
 8015060:	080152a3 	.word	0x080152a3
 8015064:	080152a3 	.word	0x080152a3
 8015068:	080152a3 	.word	0x080152a3
 801506c:	080152a3 	.word	0x080152a3
 8015070:	080152a3 	.word	0x080152a3
 8015074:	080152a3 	.word	0x080152a3
 8015078:	080152a3 	.word	0x080152a3
 801507c:	080152a3 	.word	0x080152a3
 8015080:	080152a3 	.word	0x080152a3
 8015084:	080152a3 	.word	0x080152a3
 8015088:	080152a3 	.word	0x080152a3
 801508c:	080152a3 	.word	0x080152a3
 8015090:	080152a3 	.word	0x080152a3
 8015094:	080152a3 	.word	0x080152a3
 8015098:	080152a3 	.word	0x080152a3
 801509c:	080152a3 	.word	0x080152a3
 80150a0:	080152a3 	.word	0x080152a3
 80150a4:	080152a3 	.word	0x080152a3
 80150a8:	080152a3 	.word	0x080152a3
 80150ac:	080152a3 	.word	0x080152a3
 80150b0:	080152a3 	.word	0x080152a3
 80150b4:	080152a3 	.word	0x080152a3
 80150b8:	080152a3 	.word	0x080152a3
 80150bc:	080152a3 	.word	0x080152a3
 80150c0:	080152a3 	.word	0x080152a3
 80150c4:	080152a3 	.word	0x080152a3
 80150c8:	080152a3 	.word	0x080152a3
 80150cc:	080152a3 	.word	0x080152a3
 80150d0:	080152a3 	.word	0x080152a3
 80150d4:	080152a3 	.word	0x080152a3
 80150d8:	080152a3 	.word	0x080152a3
 80150dc:	080152a3 	.word	0x080152a3
 80150e0:	080152a3 	.word	0x080152a3
 80150e4:	080152a3 	.word	0x080152a3
 80150e8:	080152a3 	.word	0x080152a3
 80150ec:	080152a3 	.word	0x080152a3
 80150f0:	080152a3 	.word	0x080152a3
 80150f4:	080152a3 	.word	0x080152a3
 80150f8:	080152a3 	.word	0x080152a3
 80150fc:	080152a3 	.word	0x080152a3
 8015100:	080152a3 	.word	0x080152a3
 8015104:	080152a3 	.word	0x080152a3
 8015108:	080152a3 	.word	0x080152a3
 801510c:	080152a3 	.word	0x080152a3
 8015110:	080152a3 	.word	0x080152a3
 8015114:	080152a3 	.word	0x080152a3
 8015118:	080152a3 	.word	0x080152a3
 801511c:	0801519f 	.word	0x0801519f
 8015120:	080151c1 	.word	0x080151c1
 8015124:	080151fd 	.word	0x080151fd
 8015128:	0801521f 	.word	0x0801521f
 801512c:	080152a3 	.word	0x080152a3
 8015130:	080152a3 	.word	0x080152a3
 8015134:	080152a3 	.word	0x080152a3
 8015138:	08015241 	.word	0x08015241
 801513c:	08015281 	.word	0x08015281
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 8015140:	2300      	movs	r3, #0
 8015142:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8015146:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801514a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        /* will be increased below */
        break;
 801514e:	e0ac      	b.n	80152aa <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8015150:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015154:	2b04      	cmp	r3, #4
 8015156:	d009      	beq.n	801516c <dhcp_parse_reply+0x218>
 8015158:	4b43      	ldr	r3, [pc, #268]	; (8015268 <dhcp_parse_reply+0x314>)
 801515a:	f240 622e 	movw	r2, #1582	; 0x62e
 801515e:	4943      	ldr	r1, [pc, #268]	; (801526c <dhcp_parse_reply+0x318>)
 8015160:	4843      	ldr	r0, [pc, #268]	; (8015270 <dhcp_parse_reply+0x31c>)
 8015162:	f003 fc33 	bl	80189cc <iprintf>
 8015166:	f06f 0305 	mvn.w	r3, #5
 801516a:	e1b1      	b.n	80154d0 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 801516c:	2306      	movs	r3, #6
 801516e:	623b      	str	r3, [r7, #32]
        break;
 8015170:	e09b      	b.n	80152aa <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 8015172:	2304      	movs	r3, #4
 8015174:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 8015178:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801517c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015180:	429a      	cmp	r2, r3
 8015182:	d209      	bcs.n	8015198 <dhcp_parse_reply+0x244>
 8015184:	4b38      	ldr	r3, [pc, #224]	; (8015268 <dhcp_parse_reply+0x314>)
 8015186:	f240 6233 	movw	r2, #1587	; 0x633
 801518a:	493a      	ldr	r1, [pc, #232]	; (8015274 <dhcp_parse_reply+0x320>)
 801518c:	4838      	ldr	r0, [pc, #224]	; (8015270 <dhcp_parse_reply+0x31c>)
 801518e:	f003 fc1d 	bl	80189cc <iprintf>
 8015192:	f06f 0305 	mvn.w	r3, #5
 8015196:	e19b      	b.n	80154d0 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 8015198:	2307      	movs	r3, #7
 801519a:	623b      	str	r3, [r7, #32]
        break;
 801519c:	e085      	b.n	80152aa <dhcp_parse_reply+0x356>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801519e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80151a2:	2b04      	cmp	r3, #4
 80151a4:	d009      	beq.n	80151ba <dhcp_parse_reply+0x266>
 80151a6:	4b30      	ldr	r3, [pc, #192]	; (8015268 <dhcp_parse_reply+0x314>)
 80151a8:	f240 6241 	movw	r2, #1601	; 0x641
 80151ac:	492f      	ldr	r1, [pc, #188]	; (801526c <dhcp_parse_reply+0x318>)
 80151ae:	4830      	ldr	r0, [pc, #192]	; (8015270 <dhcp_parse_reply+0x31c>)
 80151b0:	f003 fc0c 	bl	80189cc <iprintf>
 80151b4:	f06f 0305 	mvn.w	r3, #5
 80151b8:	e18a      	b.n	80154d0 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 80151ba:	2303      	movs	r3, #3
 80151bc:	623b      	str	r3, [r7, #32]
        break;
 80151be:	e074      	b.n	80152aa <dhcp_parse_reply+0x356>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 80151c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80151c4:	2b01      	cmp	r3, #1
 80151c6:	d009      	beq.n	80151dc <dhcp_parse_reply+0x288>
 80151c8:	4b27      	ldr	r3, [pc, #156]	; (8015268 <dhcp_parse_reply+0x314>)
 80151ca:	f240 624f 	movw	r2, #1615	; 0x64f
 80151ce:	492a      	ldr	r1, [pc, #168]	; (8015278 <dhcp_parse_reply+0x324>)
 80151d0:	4827      	ldr	r0, [pc, #156]	; (8015270 <dhcp_parse_reply+0x31c>)
 80151d2:	f003 fbfb 	bl	80189cc <iprintf>
 80151d6:	f06f 0305 	mvn.w	r3, #5
 80151da:	e179      	b.n	80154d0 <dhcp_parse_reply+0x57c>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 80151dc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80151de:	2bf0      	cmp	r3, #240	; 0xf0
 80151e0:	d009      	beq.n	80151f6 <dhcp_parse_reply+0x2a2>
 80151e2:	4b21      	ldr	r3, [pc, #132]	; (8015268 <dhcp_parse_reply+0x314>)
 80151e4:	f240 6251 	movw	r2, #1617	; 0x651
 80151e8:	4924      	ldr	r1, [pc, #144]	; (801527c <dhcp_parse_reply+0x328>)
 80151ea:	4821      	ldr	r0, [pc, #132]	; (8015270 <dhcp_parse_reply+0x31c>)
 80151ec:	f003 fbee 	bl	80189cc <iprintf>
 80151f0:	f06f 0305 	mvn.w	r3, #5
 80151f4:	e16c      	b.n	80154d0 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 80151f6:	2300      	movs	r3, #0
 80151f8:	623b      	str	r3, [r7, #32]
        break;
 80151fa:	e056      	b.n	80152aa <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 80151fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015200:	2b01      	cmp	r3, #1
 8015202:	d009      	beq.n	8015218 <dhcp_parse_reply+0x2c4>
 8015204:	4b18      	ldr	r3, [pc, #96]	; (8015268 <dhcp_parse_reply+0x314>)
 8015206:	f240 6255 	movw	r2, #1621	; 0x655
 801520a:	491b      	ldr	r1, [pc, #108]	; (8015278 <dhcp_parse_reply+0x324>)
 801520c:	4818      	ldr	r0, [pc, #96]	; (8015270 <dhcp_parse_reply+0x31c>)
 801520e:	f003 fbdd 	bl	80189cc <iprintf>
 8015212:	f06f 0305 	mvn.w	r3, #5
 8015216:	e15b      	b.n	80154d0 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 8015218:	2301      	movs	r3, #1
 801521a:	623b      	str	r3, [r7, #32]
        break;
 801521c:	e045      	b.n	80152aa <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801521e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015222:	2b04      	cmp	r3, #4
 8015224:	d009      	beq.n	801523a <dhcp_parse_reply+0x2e6>
 8015226:	4b10      	ldr	r3, [pc, #64]	; (8015268 <dhcp_parse_reply+0x314>)
 8015228:	f240 6259 	movw	r2, #1625	; 0x659
 801522c:	490f      	ldr	r1, [pc, #60]	; (801526c <dhcp_parse_reply+0x318>)
 801522e:	4810      	ldr	r0, [pc, #64]	; (8015270 <dhcp_parse_reply+0x31c>)
 8015230:	f003 fbcc 	bl	80189cc <iprintf>
 8015234:	f06f 0305 	mvn.w	r3, #5
 8015238:	e14a      	b.n	80154d0 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 801523a:	2302      	movs	r3, #2
 801523c:	623b      	str	r3, [r7, #32]
        break;
 801523e:	e034      	b.n	80152aa <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8015240:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015244:	2b04      	cmp	r3, #4
 8015246:	d009      	beq.n	801525c <dhcp_parse_reply+0x308>
 8015248:	4b07      	ldr	r3, [pc, #28]	; (8015268 <dhcp_parse_reply+0x314>)
 801524a:	f240 625d 	movw	r2, #1629	; 0x65d
 801524e:	4907      	ldr	r1, [pc, #28]	; (801526c <dhcp_parse_reply+0x318>)
 8015250:	4807      	ldr	r0, [pc, #28]	; (8015270 <dhcp_parse_reply+0x31c>)
 8015252:	f003 fbbb 	bl	80189cc <iprintf>
 8015256:	f06f 0305 	mvn.w	r3, #5
 801525a:	e139      	b.n	80154d0 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_T1;
 801525c:	2304      	movs	r3, #4
 801525e:	623b      	str	r3, [r7, #32]
        break;
 8015260:	e023      	b.n	80152aa <dhcp_parse_reply+0x356>
 8015262:	bf00      	nop
 8015264:	2000716c 	.word	0x2000716c
 8015268:	08020320 	.word	0x08020320
 801526c:	080205a8 	.word	0x080205a8
 8015270:	08020380 	.word	0x08020380
 8015274:	080205b4 	.word	0x080205b4
 8015278:	080205c8 	.word	0x080205c8
 801527c:	080205d4 	.word	0x080205d4
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8015280:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015284:	2b04      	cmp	r3, #4
 8015286:	d009      	beq.n	801529c <dhcp_parse_reply+0x348>
 8015288:	4b93      	ldr	r3, [pc, #588]	; (80154d8 <dhcp_parse_reply+0x584>)
 801528a:	f240 6261 	movw	r2, #1633	; 0x661
 801528e:	4993      	ldr	r1, [pc, #588]	; (80154dc <dhcp_parse_reply+0x588>)
 8015290:	4893      	ldr	r0, [pc, #588]	; (80154e0 <dhcp_parse_reply+0x58c>)
 8015292:	f003 fb9b 	bl	80189cc <iprintf>
 8015296:	f06f 0305 	mvn.w	r3, #5
 801529a:	e119      	b.n	80154d0 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_T2;
 801529c:	2305      	movs	r3, #5
 801529e:	623b      	str	r3, [r7, #32]
        break;
 80152a0:	e003      	b.n	80152aa <dhcp_parse_reply+0x356>
      default:
        decode_len = 0;
 80152a2:	2300      	movs	r3, #0
 80152a4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 80152a8:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 80152aa:	7dfb      	ldrb	r3, [r7, #23]
 80152ac:	2b00      	cmp	r3, #0
 80152ae:	d103      	bne.n	80152b8 <dhcp_parse_reply+0x364>
      offset++;
 80152b0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80152b2:	3301      	adds	r3, #1
 80152b4:	877b      	strh	r3, [r7, #58]	; 0x3a
 80152b6:	e0a1      	b.n	80153fc <dhcp_parse_reply+0x4a8>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 80152b8:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80152ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80152be:	4413      	add	r3, r2
 80152c0:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 80152c4:	4293      	cmp	r3, r2
 80152c6:	dd02      	ble.n	80152ce <dhcp_parse_reply+0x37a>
        /* overflow */
        return ERR_BUF;
 80152c8:	f06f 0301 	mvn.w	r3, #1
 80152cc:	e100      	b.n	80154d0 <dhcp_parse_reply+0x57c>
      }
      offset = (u16_t)(offset + len + 2);
 80152ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80152d2:	b29a      	uxth	r2, r3
 80152d4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80152d6:	4413      	add	r3, r2
 80152d8:	b29b      	uxth	r3, r3
 80152da:	3302      	adds	r3, #2
 80152dc:	877b      	strh	r3, [r7, #58]	; 0x3a
      if (decode_len > 0) {
 80152de:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80152e2:	2b00      	cmp	r3, #0
 80152e4:	f000 808a 	beq.w	80153fc <dhcp_parse_reply+0x4a8>
        u32_t value = 0;
 80152e8:	2300      	movs	r3, #0
 80152ea:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 80152ec:	6a3b      	ldr	r3, [r7, #32]
 80152ee:	2b00      	cmp	r3, #0
 80152f0:	db02      	blt.n	80152f8 <dhcp_parse_reply+0x3a4>
 80152f2:	6a3b      	ldr	r3, [r7, #32]
 80152f4:	2b07      	cmp	r3, #7
 80152f6:	dd06      	ble.n	8015306 <dhcp_parse_reply+0x3b2>
 80152f8:	4b77      	ldr	r3, [pc, #476]	; (80154d8 <dhcp_parse_reply+0x584>)
 80152fa:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 80152fe:	4979      	ldr	r1, [pc, #484]	; (80154e4 <dhcp_parse_reply+0x590>)
 8015300:	4877      	ldr	r0, [pc, #476]	; (80154e0 <dhcp_parse_reply+0x58c>)
 8015302:	f003 fb63 	bl	80189cc <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 8015306:	4a78      	ldr	r2, [pc, #480]	; (80154e8 <dhcp_parse_reply+0x594>)
 8015308:	6a3b      	ldr	r3, [r7, #32]
 801530a:	4413      	add	r3, r2
 801530c:	781b      	ldrb	r3, [r3, #0]
 801530e:	2b00      	cmp	r3, #0
 8015310:	d174      	bne.n	80153fc <dhcp_parse_reply+0x4a8>
          copy_len = LWIP_MIN(decode_len, 4);
 8015312:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015316:	2b04      	cmp	r3, #4
 8015318:	bf28      	it	cs
 801531a:	2304      	movcs	r3, #4
 801531c:	b2db      	uxtb	r3, r3
 801531e:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 8015320:	8bfb      	ldrh	r3, [r7, #30]
 8015322:	8aba      	ldrh	r2, [r7, #20]
 8015324:	f107 0108 	add.w	r1, r7, #8
 8015328:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801532a:	f7f8 fccb 	bl	800dcc4 <pbuf_copy_partial>
 801532e:	4603      	mov	r3, r0
 8015330:	461a      	mov	r2, r3
 8015332:	8abb      	ldrh	r3, [r7, #20]
 8015334:	4293      	cmp	r3, r2
 8015336:	d002      	beq.n	801533e <dhcp_parse_reply+0x3ea>
            return ERR_BUF;
 8015338:	f06f 0301 	mvn.w	r3, #1
 801533c:	e0c8      	b.n	80154d0 <dhcp_parse_reply+0x57c>
          }
          if (decode_len > 4) {
 801533e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015342:	2b04      	cmp	r3, #4
 8015344:	d933      	bls.n	80153ae <dhcp_parse_reply+0x45a>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 8015346:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801534a:	f003 0303 	and.w	r3, r3, #3
 801534e:	b2db      	uxtb	r3, r3
 8015350:	2b00      	cmp	r3, #0
 8015352:	d009      	beq.n	8015368 <dhcp_parse_reply+0x414>
 8015354:	4b60      	ldr	r3, [pc, #384]	; (80154d8 <dhcp_parse_reply+0x584>)
 8015356:	f240 6281 	movw	r2, #1665	; 0x681
 801535a:	4964      	ldr	r1, [pc, #400]	; (80154ec <dhcp_parse_reply+0x598>)
 801535c:	4860      	ldr	r0, [pc, #384]	; (80154e0 <dhcp_parse_reply+0x58c>)
 801535e:	f003 fb35 	bl	80189cc <iprintf>
 8015362:	f06f 0305 	mvn.w	r3, #5
 8015366:	e0b3      	b.n	80154d0 <dhcp_parse_reply+0x57c>
            dhcp_got_option(dhcp, decode_idx);
 8015368:	4a5f      	ldr	r2, [pc, #380]	; (80154e8 <dhcp_parse_reply+0x594>)
 801536a:	6a3b      	ldr	r3, [r7, #32]
 801536c:	4413      	add	r3, r2
 801536e:	2201      	movs	r2, #1
 8015370:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 8015372:	68bb      	ldr	r3, [r7, #8]
 8015374:	4618      	mov	r0, r3
 8015376:	f7f7 f824 	bl	800c3c2 <lwip_htonl>
 801537a:	4602      	mov	r2, r0
 801537c:	495c      	ldr	r1, [pc, #368]	; (80154f0 <dhcp_parse_reply+0x59c>)
 801537e:	6a3b      	ldr	r3, [r7, #32]
 8015380:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 8015384:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015388:	3b04      	subs	r3, #4
 801538a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 801538e:	8bfb      	ldrh	r3, [r7, #30]
 8015390:	3304      	adds	r3, #4
 8015392:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 8015394:	8a7a      	ldrh	r2, [r7, #18]
 8015396:	8bfb      	ldrh	r3, [r7, #30]
 8015398:	429a      	cmp	r2, r3
 801539a:	d202      	bcs.n	80153a2 <dhcp_parse_reply+0x44e>
              /* overflow */
              return ERR_BUF;
 801539c:	f06f 0301 	mvn.w	r3, #1
 80153a0:	e096      	b.n	80154d0 <dhcp_parse_reply+0x57c>
            }
            val_offset = next_val_offset;
 80153a2:	8a7b      	ldrh	r3, [r7, #18]
 80153a4:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 80153a6:	6a3b      	ldr	r3, [r7, #32]
 80153a8:	3301      	adds	r3, #1
 80153aa:	623b      	str	r3, [r7, #32]
            goto decode_next;
 80153ac:	e79e      	b.n	80152ec <dhcp_parse_reply+0x398>
          } else if (decode_len == 4) {
 80153ae:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80153b2:	2b04      	cmp	r3, #4
 80153b4:	d106      	bne.n	80153c4 <dhcp_parse_reply+0x470>
            value = lwip_ntohl(value);
 80153b6:	68bb      	ldr	r3, [r7, #8]
 80153b8:	4618      	mov	r0, r3
 80153ba:	f7f7 f802 	bl	800c3c2 <lwip_htonl>
 80153be:	4603      	mov	r3, r0
 80153c0:	60bb      	str	r3, [r7, #8]
 80153c2:	e011      	b.n	80153e8 <dhcp_parse_reply+0x494>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 80153c4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80153c8:	2b01      	cmp	r3, #1
 80153ca:	d009      	beq.n	80153e0 <dhcp_parse_reply+0x48c>
 80153cc:	4b42      	ldr	r3, [pc, #264]	; (80154d8 <dhcp_parse_reply+0x584>)
 80153ce:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 80153d2:	4948      	ldr	r1, [pc, #288]	; (80154f4 <dhcp_parse_reply+0x5a0>)
 80153d4:	4842      	ldr	r0, [pc, #264]	; (80154e0 <dhcp_parse_reply+0x58c>)
 80153d6:	f003 faf9 	bl	80189cc <iprintf>
 80153da:	f06f 0305 	mvn.w	r3, #5
 80153de:	e077      	b.n	80154d0 <dhcp_parse_reply+0x57c>
            value = ((u8_t *)&value)[0];
 80153e0:	f107 0308 	add.w	r3, r7, #8
 80153e4:	781b      	ldrb	r3, [r3, #0]
 80153e6:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 80153e8:	4a3f      	ldr	r2, [pc, #252]	; (80154e8 <dhcp_parse_reply+0x594>)
 80153ea:	6a3b      	ldr	r3, [r7, #32]
 80153ec:	4413      	add	r3, r2
 80153ee:	2201      	movs	r2, #1
 80153f0:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 80153f2:	68ba      	ldr	r2, [r7, #8]
 80153f4:	493e      	ldr	r1, [pc, #248]	; (80154f0 <dhcp_parse_reply+0x59c>)
 80153f6:	6a3b      	ldr	r3, [r7, #32]
 80153f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 80153fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80153fe:	895b      	ldrh	r3, [r3, #10]
 8015400:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8015402:	429a      	cmp	r2, r3
 8015404:	d324      	bcc.n	8015450 <dhcp_parse_reply+0x4fc>
      offset = (u16_t)(offset - q->len);
 8015406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015408:	895b      	ldrh	r3, [r3, #10]
 801540a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801540c:	1ad3      	subs	r3, r2, r3
 801540e:	877b      	strh	r3, [r7, #58]	; 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 8015410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015412:	895b      	ldrh	r3, [r3, #10]
 8015414:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8015416:	1ad3      	subs	r3, r2, r3
 8015418:	873b      	strh	r3, [r7, #56]	; 0x38
      if (offset < offset_max) {
 801541a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801541c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801541e:	429a      	cmp	r2, r3
 8015420:	d213      	bcs.n	801544a <dhcp_parse_reply+0x4f6>
        q = q->next;
 8015422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015424:	681b      	ldr	r3, [r3, #0]
 8015426:	633b      	str	r3, [r7, #48]	; 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 8015428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801542a:	2b00      	cmp	r3, #0
 801542c:	d109      	bne.n	8015442 <dhcp_parse_reply+0x4ee>
 801542e:	4b2a      	ldr	r3, [pc, #168]	; (80154d8 <dhcp_parse_reply+0x584>)
 8015430:	f240 629d 	movw	r2, #1693	; 0x69d
 8015434:	4930      	ldr	r1, [pc, #192]	; (80154f8 <dhcp_parse_reply+0x5a4>)
 8015436:	482a      	ldr	r0, [pc, #168]	; (80154e0 <dhcp_parse_reply+0x58c>)
 8015438:	f003 fac8 	bl	80189cc <iprintf>
 801543c:	f06f 0305 	mvn.w	r3, #5
 8015440:	e046      	b.n	80154d0 <dhcp_parse_reply+0x57c>
        options = (u8_t *)q->payload;
 8015442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015444:	685b      	ldr	r3, [r3, #4]
 8015446:	63fb      	str	r3, [r7, #60]	; 0x3c
 8015448:	e002      	b.n	8015450 <dhcp_parse_reply+0x4fc>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 801544a:	f06f 0301 	mvn.w	r3, #1
 801544e:	e03f      	b.n	80154d0 <dhcp_parse_reply+0x57c>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8015450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015452:	2b00      	cmp	r3, #0
 8015454:	d00a      	beq.n	801546c <dhcp_parse_reply+0x518>
 8015456:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8015458:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801545a:	429a      	cmp	r2, r3
 801545c:	d206      	bcs.n	801546c <dhcp_parse_reply+0x518>
 801545e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015460:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8015462:	4413      	add	r3, r2
 8015464:	781b      	ldrb	r3, [r3, #0]
 8015466:	2bff      	cmp	r3, #255	; 0xff
 8015468:	f47f adb7 	bne.w	8014fda <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 801546c:	4b1e      	ldr	r3, [pc, #120]	; (80154e8 <dhcp_parse_reply+0x594>)
 801546e:	781b      	ldrb	r3, [r3, #0]
 8015470:	2b00      	cmp	r3, #0
 8015472:	d018      	beq.n	80154a6 <dhcp_parse_reply+0x552>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8015474:	4b1e      	ldr	r3, [pc, #120]	; (80154f0 <dhcp_parse_reply+0x59c>)
 8015476:	681b      	ldr	r3, [r3, #0]
 8015478:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 801547a:	4b1b      	ldr	r3, [pc, #108]	; (80154e8 <dhcp_parse_reply+0x594>)
 801547c:	2200      	movs	r2, #0
 801547e:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 8015480:	68fb      	ldr	r3, [r7, #12]
 8015482:	2b01      	cmp	r3, #1
 8015484:	d102      	bne.n	801548c <dhcp_parse_reply+0x538>
      parse_file_as_options = 1;
 8015486:	2301      	movs	r3, #1
 8015488:	62fb      	str	r3, [r7, #44]	; 0x2c
 801548a:	e00c      	b.n	80154a6 <dhcp_parse_reply+0x552>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 801548c:	68fb      	ldr	r3, [r7, #12]
 801548e:	2b02      	cmp	r3, #2
 8015490:	d102      	bne.n	8015498 <dhcp_parse_reply+0x544>
      parse_sname_as_options = 1;
 8015492:	2301      	movs	r3, #1
 8015494:	62bb      	str	r3, [r7, #40]	; 0x28
 8015496:	e006      	b.n	80154a6 <dhcp_parse_reply+0x552>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 8015498:	68fb      	ldr	r3, [r7, #12]
 801549a:	2b03      	cmp	r3, #3
 801549c:	d103      	bne.n	80154a6 <dhcp_parse_reply+0x552>
      parse_sname_as_options = 1;
 801549e:	2301      	movs	r3, #1
 80154a0:	62bb      	str	r3, [r7, #40]	; 0x28
      parse_file_as_options = 1;
 80154a2:	2301      	movs	r3, #1
 80154a4:	62fb      	str	r3, [r7, #44]	; 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 80154a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80154a8:	2b00      	cmp	r3, #0
 80154aa:	d006      	beq.n	80154ba <dhcp_parse_reply+0x566>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 80154ac:	2300      	movs	r3, #0
 80154ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    options_idx = DHCP_FILE_OFS;
 80154b0:	236c      	movs	r3, #108	; 0x6c
 80154b2:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 80154b4:	23ec      	movs	r3, #236	; 0xec
 80154b6:	86bb      	strh	r3, [r7, #52]	; 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 80154b8:	e569      	b.n	8014f8e <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 80154ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80154bc:	2b00      	cmp	r3, #0
 80154be:	d006      	beq.n	80154ce <dhcp_parse_reply+0x57a>
    parse_sname_as_options = 0;
 80154c0:	2300      	movs	r3, #0
 80154c2:	62bb      	str	r3, [r7, #40]	; 0x28
    options_idx = DHCP_SNAME_OFS;
 80154c4:	232c      	movs	r3, #44	; 0x2c
 80154c6:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 80154c8:	236c      	movs	r3, #108	; 0x6c
 80154ca:	86bb      	strh	r3, [r7, #52]	; 0x34
    goto again;
 80154cc:	e55f      	b.n	8014f8e <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 80154ce:	2300      	movs	r3, #0
}
 80154d0:	4618      	mov	r0, r3
 80154d2:	3740      	adds	r7, #64	; 0x40
 80154d4:	46bd      	mov	sp, r7
 80154d6:	bd80      	pop	{r7, pc}
 80154d8:	08020320 	.word	0x08020320
 80154dc:	080205a8 	.word	0x080205a8
 80154e0:	08020380 	.word	0x08020380
 80154e4:	080205ec 	.word	0x080205ec
 80154e8:	2000716c 	.word	0x2000716c
 80154ec:	08020600 	.word	0x08020600
 80154f0:	20007174 	.word	0x20007174
 80154f4:	08020618 	.word	0x08020618
 80154f8:	0802062c 	.word	0x0802062c

080154fc <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 80154fc:	b580      	push	{r7, lr}
 80154fe:	b08a      	sub	sp, #40	; 0x28
 8015500:	af00      	add	r7, sp, #0
 8015502:	60f8      	str	r0, [r7, #12]
 8015504:	60b9      	str	r1, [r7, #8]
 8015506:	607a      	str	r2, [r7, #4]
 8015508:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 801550a:	4b60      	ldr	r3, [pc, #384]	; (801568c <dhcp_recv+0x190>)
 801550c:	685b      	ldr	r3, [r3, #4]
 801550e:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8015510:	6a3b      	ldr	r3, [r7, #32]
 8015512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015514:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 8015516:	687b      	ldr	r3, [r7, #4]
 8015518:	685b      	ldr	r3, [r3, #4]
 801551a:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 801551c:	69fb      	ldr	r3, [r7, #28]
 801551e:	2b00      	cmp	r3, #0
 8015520:	f000 809d 	beq.w	801565e <dhcp_recv+0x162>
 8015524:	69fb      	ldr	r3, [r7, #28]
 8015526:	791b      	ldrb	r3, [r3, #4]
 8015528:	2b00      	cmp	r3, #0
 801552a:	f000 8098 	beq.w	801565e <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 801552e:	687b      	ldr	r3, [r7, #4]
 8015530:	895b      	ldrh	r3, [r3, #10]
 8015532:	2b2b      	cmp	r3, #43	; 0x2b
 8015534:	f240 8095 	bls.w	8015662 <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 8015538:	69bb      	ldr	r3, [r7, #24]
 801553a:	781b      	ldrb	r3, [r3, #0]
 801553c:	2b02      	cmp	r3, #2
 801553e:	f040 8092 	bne.w	8015666 <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8015542:	2300      	movs	r3, #0
 8015544:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8015548:	e012      	b.n	8015570 <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 801554a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801554e:	6a3a      	ldr	r2, [r7, #32]
 8015550:	4413      	add	r3, r2
 8015552:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 8015556:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801555a:	69b9      	ldr	r1, [r7, #24]
 801555c:	440b      	add	r3, r1
 801555e:	7f1b      	ldrb	r3, [r3, #28]
 8015560:	429a      	cmp	r2, r3
 8015562:	f040 8082 	bne.w	801566a <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8015566:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801556a:	3301      	adds	r3, #1
 801556c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8015570:	6a3b      	ldr	r3, [r7, #32]
 8015572:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8015576:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801557a:	429a      	cmp	r2, r3
 801557c:	d203      	bcs.n	8015586 <dhcp_recv+0x8a>
 801557e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015582:	2b05      	cmp	r3, #5
 8015584:	d9e1      	bls.n	801554a <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 8015586:	69bb      	ldr	r3, [r7, #24]
 8015588:	685b      	ldr	r3, [r3, #4]
 801558a:	4618      	mov	r0, r3
 801558c:	f7f6 ff19 	bl	800c3c2 <lwip_htonl>
 8015590:	4602      	mov	r2, r0
 8015592:	69fb      	ldr	r3, [r7, #28]
 8015594:	681b      	ldr	r3, [r3, #0]
 8015596:	429a      	cmp	r2, r3
 8015598:	d169      	bne.n	801566e <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 801559a:	69f9      	ldr	r1, [r7, #28]
 801559c:	6878      	ldr	r0, [r7, #4]
 801559e:	f7ff fcd9 	bl	8014f54 <dhcp_parse_reply>
 80155a2:	4603      	mov	r3, r0
 80155a4:	2b00      	cmp	r3, #0
 80155a6:	d164      	bne.n	8015672 <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 80155a8:	4b39      	ldr	r3, [pc, #228]	; (8015690 <dhcp_recv+0x194>)
 80155aa:	785b      	ldrb	r3, [r3, #1]
 80155ac:	2b00      	cmp	r3, #0
 80155ae:	d062      	beq.n	8015676 <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 80155b0:	687b      	ldr	r3, [r7, #4]
 80155b2:	685b      	ldr	r3, [r3, #4]
 80155b4:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 80155b6:	4b37      	ldr	r3, [pc, #220]	; (8015694 <dhcp_recv+0x198>)
 80155b8:	685b      	ldr	r3, [r3, #4]
 80155ba:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 80155bc:	7cfb      	ldrb	r3, [r7, #19]
 80155be:	2b05      	cmp	r3, #5
 80155c0:	d12a      	bne.n	8015618 <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 80155c2:	69fb      	ldr	r3, [r7, #28]
 80155c4:	795b      	ldrb	r3, [r3, #5]
 80155c6:	2b01      	cmp	r3, #1
 80155c8:	d112      	bne.n	80155f0 <dhcp_recv+0xf4>
      dhcp_handle_ack(netif, msg_in);
 80155ca:	6979      	ldr	r1, [r7, #20]
 80155cc:	6a38      	ldr	r0, [r7, #32]
 80155ce:	f7fe fe53 	bl	8014278 <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 80155d2:	6a3b      	ldr	r3, [r7, #32]
 80155d4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80155d8:	f003 0308 	and.w	r3, r3, #8
 80155dc:	2b00      	cmp	r3, #0
 80155de:	d003      	beq.n	80155e8 <dhcp_recv+0xec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 80155e0:	6a38      	ldr	r0, [r7, #32]
 80155e2:	f7fe fbc3 	bl	8013d6c <dhcp_check>
 80155e6:	e049      	b.n	801567c <dhcp_recv+0x180>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 80155e8:	6a38      	ldr	r0, [r7, #32]
 80155ea:	f7ff f867 	bl	80146bc <dhcp_bind>
 80155ee:	e045      	b.n	801567c <dhcp_recv+0x180>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 80155f0:	69fb      	ldr	r3, [r7, #28]
 80155f2:	795b      	ldrb	r3, [r3, #5]
 80155f4:	2b03      	cmp	r3, #3
 80155f6:	d007      	beq.n	8015608 <dhcp_recv+0x10c>
 80155f8:	69fb      	ldr	r3, [r7, #28]
 80155fa:	795b      	ldrb	r3, [r3, #5]
 80155fc:	2b04      	cmp	r3, #4
 80155fe:	d003      	beq.n	8015608 <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 8015600:	69fb      	ldr	r3, [r7, #28]
 8015602:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8015604:	2b05      	cmp	r3, #5
 8015606:	d139      	bne.n	801567c <dhcp_recv+0x180>
      dhcp_handle_ack(netif, msg_in);
 8015608:	6979      	ldr	r1, [r7, #20]
 801560a:	6a38      	ldr	r0, [r7, #32]
 801560c:	f7fe fe34 	bl	8014278 <dhcp_handle_ack>
      dhcp_bind(netif);
 8015610:	6a38      	ldr	r0, [r7, #32]
 8015612:	f7ff f853 	bl	80146bc <dhcp_bind>
 8015616:	e031      	b.n	801567c <dhcp_recv+0x180>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 8015618:	7cfb      	ldrb	r3, [r7, #19]
 801561a:	2b06      	cmp	r3, #6
 801561c:	d113      	bne.n	8015646 <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801561e:	69fb      	ldr	r3, [r7, #28]
 8015620:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 8015622:	2b03      	cmp	r3, #3
 8015624:	d00b      	beq.n	801563e <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8015626:	69fb      	ldr	r3, [r7, #28]
 8015628:	795b      	ldrb	r3, [r3, #5]
 801562a:	2b01      	cmp	r3, #1
 801562c:	d007      	beq.n	801563e <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 801562e:	69fb      	ldr	r3, [r7, #28]
 8015630:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8015632:	2b04      	cmp	r3, #4
 8015634:	d003      	beq.n	801563e <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8015636:	69fb      	ldr	r3, [r7, #28]
 8015638:	795b      	ldrb	r3, [r3, #5]
 801563a:	2b05      	cmp	r3, #5
 801563c:	d103      	bne.n	8015646 <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 801563e:	6a38      	ldr	r0, [r7, #32]
 8015640:	f7fe fb7a 	bl	8013d38 <dhcp_handle_nak>
 8015644:	e01a      	b.n	801567c <dhcp_recv+0x180>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 8015646:	7cfb      	ldrb	r3, [r7, #19]
 8015648:	2b02      	cmp	r3, #2
 801564a:	d116      	bne.n	801567a <dhcp_recv+0x17e>
 801564c:	69fb      	ldr	r3, [r7, #28]
 801564e:	795b      	ldrb	r3, [r3, #5]
 8015650:	2b06      	cmp	r3, #6
 8015652:	d112      	bne.n	801567a <dhcp_recv+0x17e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 8015654:	6979      	ldr	r1, [r7, #20]
 8015656:	6a38      	ldr	r0, [r7, #32]
 8015658:	f7fe fbbc 	bl	8013dd4 <dhcp_handle_offer>
 801565c:	e00e      	b.n	801567c <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801565e:	bf00      	nop
 8015660:	e00c      	b.n	801567c <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8015662:	bf00      	nop
 8015664:	e00a      	b.n	801567c <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8015666:	bf00      	nop
 8015668:	e008      	b.n	801567c <dhcp_recv+0x180>
      goto free_pbuf_and_return;
 801566a:	bf00      	nop
 801566c:	e006      	b.n	801567c <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801566e:	bf00      	nop
 8015670:	e004      	b.n	801567c <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8015672:	bf00      	nop
 8015674:	e002      	b.n	801567c <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8015676:	bf00      	nop
 8015678:	e000      	b.n	801567c <dhcp_recv+0x180>
  }

free_pbuf_and_return:
 801567a:	bf00      	nop
  pbuf_free(p);
 801567c:	6878      	ldr	r0, [r7, #4]
 801567e:	f7f8 f927 	bl	800d8d0 <pbuf_free>
}
 8015682:	bf00      	nop
 8015684:	3728      	adds	r7, #40	; 0x28
 8015686:	46bd      	mov	sp, r7
 8015688:	bd80      	pop	{r7, pc}
 801568a:	bf00      	nop
 801568c:	2000402c 	.word	0x2000402c
 8015690:	2000716c 	.word	0x2000716c
 8015694:	20007174 	.word	0x20007174

08015698 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 8015698:	b580      	push	{r7, lr}
 801569a:	b088      	sub	sp, #32
 801569c:	af00      	add	r7, sp, #0
 801569e:	60f8      	str	r0, [r7, #12]
 80156a0:	60b9      	str	r1, [r7, #8]
 80156a2:	603b      	str	r3, [r7, #0]
 80156a4:	4613      	mov	r3, r2
 80156a6:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 80156a8:	68fb      	ldr	r3, [r7, #12]
 80156aa:	2b00      	cmp	r3, #0
 80156ac:	d108      	bne.n	80156c0 <dhcp_create_msg+0x28>
 80156ae:	4b5f      	ldr	r3, [pc, #380]	; (801582c <dhcp_create_msg+0x194>)
 80156b0:	f240 7269 	movw	r2, #1897	; 0x769
 80156b4:	495e      	ldr	r1, [pc, #376]	; (8015830 <dhcp_create_msg+0x198>)
 80156b6:	485f      	ldr	r0, [pc, #380]	; (8015834 <dhcp_create_msg+0x19c>)
 80156b8:	f003 f988 	bl	80189cc <iprintf>
 80156bc:	2300      	movs	r3, #0
 80156be:	e0b1      	b.n	8015824 <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 80156c0:	68bb      	ldr	r3, [r7, #8]
 80156c2:	2b00      	cmp	r3, #0
 80156c4:	d108      	bne.n	80156d8 <dhcp_create_msg+0x40>
 80156c6:	4b59      	ldr	r3, [pc, #356]	; (801582c <dhcp_create_msg+0x194>)
 80156c8:	f240 726a 	movw	r2, #1898	; 0x76a
 80156cc:	495a      	ldr	r1, [pc, #360]	; (8015838 <dhcp_create_msg+0x1a0>)
 80156ce:	4859      	ldr	r0, [pc, #356]	; (8015834 <dhcp_create_msg+0x19c>)
 80156d0:	f003 f97c 	bl	80189cc <iprintf>
 80156d4:	2300      	movs	r3, #0
 80156d6:	e0a5      	b.n	8015824 <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 80156d8:	f44f 7220 	mov.w	r2, #640	; 0x280
 80156dc:	f44f 719a 	mov.w	r1, #308	; 0x134
 80156e0:	2036      	movs	r0, #54	; 0x36
 80156e2:	f7f7 fe11 	bl	800d308 <pbuf_alloc>
 80156e6:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 80156e8:	69bb      	ldr	r3, [r7, #24]
 80156ea:	2b00      	cmp	r3, #0
 80156ec:	d101      	bne.n	80156f2 <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 80156ee:	2300      	movs	r3, #0
 80156f0:	e098      	b.n	8015824 <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 80156f2:	69bb      	ldr	r3, [r7, #24]
 80156f4:	895b      	ldrh	r3, [r3, #10]
 80156f6:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 80156fa:	d206      	bcs.n	801570a <dhcp_create_msg+0x72>
 80156fc:	4b4b      	ldr	r3, [pc, #300]	; (801582c <dhcp_create_msg+0x194>)
 80156fe:	f240 7271 	movw	r2, #1905	; 0x771
 8015702:	494e      	ldr	r1, [pc, #312]	; (801583c <dhcp_create_msg+0x1a4>)
 8015704:	484b      	ldr	r0, [pc, #300]	; (8015834 <dhcp_create_msg+0x19c>)
 8015706:	f003 f961 	bl	80189cc <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 801570a:	79fb      	ldrb	r3, [r7, #7]
 801570c:	2b03      	cmp	r3, #3
 801570e:	d103      	bne.n	8015718 <dhcp_create_msg+0x80>
 8015710:	68bb      	ldr	r3, [r7, #8]
 8015712:	795b      	ldrb	r3, [r3, #5]
 8015714:	2b03      	cmp	r3, #3
 8015716:	d10d      	bne.n	8015734 <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 8015718:	68bb      	ldr	r3, [r7, #8]
 801571a:	799b      	ldrb	r3, [r3, #6]
 801571c:	2b00      	cmp	r3, #0
 801571e:	d105      	bne.n	801572c <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 8015720:	f003 f96c 	bl	80189fc <rand>
 8015724:	4603      	mov	r3, r0
 8015726:	461a      	mov	r2, r3
 8015728:	4b45      	ldr	r3, [pc, #276]	; (8015840 <dhcp_create_msg+0x1a8>)
 801572a:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 801572c:	4b44      	ldr	r3, [pc, #272]	; (8015840 <dhcp_create_msg+0x1a8>)
 801572e:	681a      	ldr	r2, [r3, #0]
 8015730:	68bb      	ldr	r3, [r7, #8]
 8015732:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 8015734:	69bb      	ldr	r3, [r7, #24]
 8015736:	685b      	ldr	r3, [r3, #4]
 8015738:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 801573a:	f44f 729a 	mov.w	r2, #308	; 0x134
 801573e:	2100      	movs	r1, #0
 8015740:	6978      	ldr	r0, [r7, #20]
 8015742:	f002 fc27 	bl	8017f94 <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 8015746:	697b      	ldr	r3, [r7, #20]
 8015748:	2201      	movs	r2, #1
 801574a:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 801574c:	697b      	ldr	r3, [r7, #20]
 801574e:	2201      	movs	r2, #1
 8015750:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 8015752:	68fb      	ldr	r3, [r7, #12]
 8015754:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8015758:	697b      	ldr	r3, [r7, #20]
 801575a:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 801575c:	68bb      	ldr	r3, [r7, #8]
 801575e:	681b      	ldr	r3, [r3, #0]
 8015760:	4618      	mov	r0, r3
 8015762:	f7f6 fe2e 	bl	800c3c2 <lwip_htonl>
 8015766:	4602      	mov	r2, r0
 8015768:	697b      	ldr	r3, [r7, #20]
 801576a:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 801576c:	79fb      	ldrb	r3, [r7, #7]
 801576e:	2b08      	cmp	r3, #8
 8015770:	d010      	beq.n	8015794 <dhcp_create_msg+0xfc>
 8015772:	79fb      	ldrb	r3, [r7, #7]
 8015774:	2b04      	cmp	r3, #4
 8015776:	d00d      	beq.n	8015794 <dhcp_create_msg+0xfc>
 8015778:	79fb      	ldrb	r3, [r7, #7]
 801577a:	2b07      	cmp	r3, #7
 801577c:	d00a      	beq.n	8015794 <dhcp_create_msg+0xfc>
 801577e:	79fb      	ldrb	r3, [r7, #7]
 8015780:	2b03      	cmp	r3, #3
 8015782:	d10c      	bne.n	801579e <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8015784:	68bb      	ldr	r3, [r7, #8]
 8015786:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 8015788:	2b05      	cmp	r3, #5
 801578a:	d003      	beq.n	8015794 <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 801578c:	68bb      	ldr	r3, [r7, #8]
 801578e:	795b      	ldrb	r3, [r3, #5]
 8015790:	2b04      	cmp	r3, #4
 8015792:	d104      	bne.n	801579e <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 8015794:	68fb      	ldr	r3, [r7, #12]
 8015796:	3304      	adds	r3, #4
 8015798:	681a      	ldr	r2, [r3, #0]
 801579a:	697b      	ldr	r3, [r7, #20]
 801579c:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801579e:	2300      	movs	r3, #0
 80157a0:	83fb      	strh	r3, [r7, #30]
 80157a2:	e00c      	b.n	80157be <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 80157a4:	8bfa      	ldrh	r2, [r7, #30]
 80157a6:	8bfb      	ldrh	r3, [r7, #30]
 80157a8:	68f9      	ldr	r1, [r7, #12]
 80157aa:	440a      	add	r2, r1
 80157ac:	f892 102a 	ldrb.w	r1, [r2, #42]	; 0x2a
 80157b0:	697a      	ldr	r2, [r7, #20]
 80157b2:	4413      	add	r3, r2
 80157b4:	460a      	mov	r2, r1
 80157b6:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 80157b8:	8bfb      	ldrh	r3, [r7, #30]
 80157ba:	3301      	adds	r3, #1
 80157bc:	83fb      	strh	r3, [r7, #30]
 80157be:	8bfb      	ldrh	r3, [r7, #30]
 80157c0:	2b05      	cmp	r3, #5
 80157c2:	d9ef      	bls.n	80157a4 <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 80157c4:	697b      	ldr	r3, [r7, #20]
 80157c6:	2200      	movs	r2, #0
 80157c8:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 80157cc:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 80157d0:	2200      	movs	r2, #0
 80157d2:	f062 027d 	orn	r2, r2, #125	; 0x7d
 80157d6:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 80157da:	2200      	movs	r2, #0
 80157dc:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 80157e0:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 80157e4:	2200      	movs	r2, #0
 80157e6:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 80157ea:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 80157ee:	697b      	ldr	r3, [r7, #20]
 80157f0:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80157f4:	2301      	movs	r3, #1
 80157f6:	2235      	movs	r2, #53	; 0x35
 80157f8:	2000      	movs	r0, #0
 80157fa:	f7ff fadb 	bl	8014db4 <dhcp_option>
 80157fe:	4603      	mov	r3, r0
 8015800:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 8015802:	697b      	ldr	r3, [r7, #20]
 8015804:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015808:	79fa      	ldrb	r2, [r7, #7]
 801580a:	8a7b      	ldrh	r3, [r7, #18]
 801580c:	4618      	mov	r0, r3
 801580e:	f7ff fb05 	bl	8014e1c <dhcp_option_byte>
 8015812:	4603      	mov	r3, r0
 8015814:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 8015816:	683b      	ldr	r3, [r7, #0]
 8015818:	2b00      	cmp	r3, #0
 801581a:	d002      	beq.n	8015822 <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 801581c:	683b      	ldr	r3, [r7, #0]
 801581e:	8a7a      	ldrh	r2, [r7, #18]
 8015820:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 8015822:	69bb      	ldr	r3, [r7, #24]
}
 8015824:	4618      	mov	r0, r3
 8015826:	3720      	adds	r7, #32
 8015828:	46bd      	mov	sp, r7
 801582a:	bd80      	pop	{r7, pc}
 801582c:	08020320 	.word	0x08020320
 8015830:	08020640 	.word	0x08020640
 8015834:	08020380 	.word	0x08020380
 8015838:	08020660 	.word	0x08020660
 801583c:	08020680 	.word	0x08020680
 8015840:	200004e4 	.word	0x200004e4

08015844 <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 8015844:	b580      	push	{r7, lr}
 8015846:	b084      	sub	sp, #16
 8015848:	af00      	add	r7, sp, #0
 801584a:	4603      	mov	r3, r0
 801584c:	60b9      	str	r1, [r7, #8]
 801584e:	607a      	str	r2, [r7, #4]
 8015850:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 8015852:	89fb      	ldrh	r3, [r7, #14]
 8015854:	1c5a      	adds	r2, r3, #1
 8015856:	81fa      	strh	r2, [r7, #14]
 8015858:	461a      	mov	r2, r3
 801585a:	68bb      	ldr	r3, [r7, #8]
 801585c:	4413      	add	r3, r2
 801585e:	22ff      	movs	r2, #255	; 0xff
 8015860:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8015862:	e007      	b.n	8015874 <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 8015864:	89fb      	ldrh	r3, [r7, #14]
 8015866:	1c5a      	adds	r2, r3, #1
 8015868:	81fa      	strh	r2, [r7, #14]
 801586a:	461a      	mov	r2, r3
 801586c:	68bb      	ldr	r3, [r7, #8]
 801586e:	4413      	add	r3, r2
 8015870:	2200      	movs	r2, #0
 8015872:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8015874:	89fb      	ldrh	r3, [r7, #14]
 8015876:	2b43      	cmp	r3, #67	; 0x43
 8015878:	d904      	bls.n	8015884 <dhcp_option_trailer+0x40>
 801587a:	89fb      	ldrh	r3, [r7, #14]
 801587c:	f003 0303 	and.w	r3, r3, #3
 8015880:	2b00      	cmp	r3, #0
 8015882:	d002      	beq.n	801588a <dhcp_option_trailer+0x46>
 8015884:	89fb      	ldrh	r3, [r7, #14]
 8015886:	2b43      	cmp	r3, #67	; 0x43
 8015888:	d9ec      	bls.n	8015864 <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 801588a:	89fb      	ldrh	r3, [r7, #14]
 801588c:	33f0      	adds	r3, #240	; 0xf0
 801588e:	b29b      	uxth	r3, r3
 8015890:	4619      	mov	r1, r3
 8015892:	6878      	ldr	r0, [r7, #4]
 8015894:	f7f7 fe96 	bl	800d5c4 <pbuf_realloc>
}
 8015898:	bf00      	nop
 801589a:	3710      	adds	r7, #16
 801589c:	46bd      	mov	sp, r7
 801589e:	bd80      	pop	{r7, pc}

080158a0 <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 80158a0:	b480      	push	{r7}
 80158a2:	b085      	sub	sp, #20
 80158a4:	af00      	add	r7, sp, #0
 80158a6:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 80158a8:	687b      	ldr	r3, [r7, #4]
 80158aa:	2b00      	cmp	r3, #0
 80158ac:	d017      	beq.n	80158de <dhcp_supplied_address+0x3e>
 80158ae:	687b      	ldr	r3, [r7, #4]
 80158b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80158b2:	2b00      	cmp	r3, #0
 80158b4:	d013      	beq.n	80158de <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 80158b6:	687b      	ldr	r3, [r7, #4]
 80158b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80158ba:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 80158bc:	68fb      	ldr	r3, [r7, #12]
 80158be:	795b      	ldrb	r3, [r3, #5]
 80158c0:	2b0a      	cmp	r3, #10
 80158c2:	d007      	beq.n	80158d4 <dhcp_supplied_address+0x34>
 80158c4:	68fb      	ldr	r3, [r7, #12]
 80158c6:	795b      	ldrb	r3, [r3, #5]
 80158c8:	2b05      	cmp	r3, #5
 80158ca:	d003      	beq.n	80158d4 <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 80158cc:	68fb      	ldr	r3, [r7, #12]
 80158ce:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 80158d0:	2b04      	cmp	r3, #4
 80158d2:	d101      	bne.n	80158d8 <dhcp_supplied_address+0x38>
 80158d4:	2301      	movs	r3, #1
 80158d6:	e000      	b.n	80158da <dhcp_supplied_address+0x3a>
 80158d8:	2300      	movs	r3, #0
 80158da:	b2db      	uxtb	r3, r3
 80158dc:	e000      	b.n	80158e0 <dhcp_supplied_address+0x40>
  }
  return 0;
 80158de:	2300      	movs	r3, #0
}
 80158e0:	4618      	mov	r0, r3
 80158e2:	3714      	adds	r7, #20
 80158e4:	46bd      	mov	sp, r7
 80158e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158ea:	4770      	bx	lr

080158ec <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 80158ec:	b580      	push	{r7, lr}
 80158ee:	b082      	sub	sp, #8
 80158f0:	af00      	add	r7, sp, #0
 80158f2:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 80158f4:	4915      	ldr	r1, [pc, #84]	; (801594c <etharp_free_entry+0x60>)
 80158f6:	687a      	ldr	r2, [r7, #4]
 80158f8:	4613      	mov	r3, r2
 80158fa:	005b      	lsls	r3, r3, #1
 80158fc:	4413      	add	r3, r2
 80158fe:	00db      	lsls	r3, r3, #3
 8015900:	440b      	add	r3, r1
 8015902:	681b      	ldr	r3, [r3, #0]
 8015904:	2b00      	cmp	r3, #0
 8015906:	d013      	beq.n	8015930 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8015908:	4910      	ldr	r1, [pc, #64]	; (801594c <etharp_free_entry+0x60>)
 801590a:	687a      	ldr	r2, [r7, #4]
 801590c:	4613      	mov	r3, r2
 801590e:	005b      	lsls	r3, r3, #1
 8015910:	4413      	add	r3, r2
 8015912:	00db      	lsls	r3, r3, #3
 8015914:	440b      	add	r3, r1
 8015916:	681b      	ldr	r3, [r3, #0]
 8015918:	4618      	mov	r0, r3
 801591a:	f7f7 ffd9 	bl	800d8d0 <pbuf_free>
    arp_table[i].q = NULL;
 801591e:	490b      	ldr	r1, [pc, #44]	; (801594c <etharp_free_entry+0x60>)
 8015920:	687a      	ldr	r2, [r7, #4]
 8015922:	4613      	mov	r3, r2
 8015924:	005b      	lsls	r3, r3, #1
 8015926:	4413      	add	r3, r2
 8015928:	00db      	lsls	r3, r3, #3
 801592a:	440b      	add	r3, r1
 801592c:	2200      	movs	r2, #0
 801592e:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8015930:	4906      	ldr	r1, [pc, #24]	; (801594c <etharp_free_entry+0x60>)
 8015932:	687a      	ldr	r2, [r7, #4]
 8015934:	4613      	mov	r3, r2
 8015936:	005b      	lsls	r3, r3, #1
 8015938:	4413      	add	r3, r2
 801593a:	00db      	lsls	r3, r3, #3
 801593c:	440b      	add	r3, r1
 801593e:	3314      	adds	r3, #20
 8015940:	2200      	movs	r2, #0
 8015942:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8015944:	bf00      	nop
 8015946:	3708      	adds	r7, #8
 8015948:	46bd      	mov	sp, r7
 801594a:	bd80      	pop	{r7, pc}
 801594c:	200004e8 	.word	0x200004e8

08015950 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8015950:	b580      	push	{r7, lr}
 8015952:	b082      	sub	sp, #8
 8015954:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015956:	2300      	movs	r3, #0
 8015958:	607b      	str	r3, [r7, #4]
 801595a:	e096      	b.n	8015a8a <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 801595c:	494f      	ldr	r1, [pc, #316]	; (8015a9c <etharp_tmr+0x14c>)
 801595e:	687a      	ldr	r2, [r7, #4]
 8015960:	4613      	mov	r3, r2
 8015962:	005b      	lsls	r3, r3, #1
 8015964:	4413      	add	r3, r2
 8015966:	00db      	lsls	r3, r3, #3
 8015968:	440b      	add	r3, r1
 801596a:	3314      	adds	r3, #20
 801596c:	781b      	ldrb	r3, [r3, #0]
 801596e:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8015970:	78fb      	ldrb	r3, [r7, #3]
 8015972:	2b00      	cmp	r3, #0
 8015974:	f000 8086 	beq.w	8015a84 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8015978:	4948      	ldr	r1, [pc, #288]	; (8015a9c <etharp_tmr+0x14c>)
 801597a:	687a      	ldr	r2, [r7, #4]
 801597c:	4613      	mov	r3, r2
 801597e:	005b      	lsls	r3, r3, #1
 8015980:	4413      	add	r3, r2
 8015982:	00db      	lsls	r3, r3, #3
 8015984:	440b      	add	r3, r1
 8015986:	3312      	adds	r3, #18
 8015988:	881b      	ldrh	r3, [r3, #0]
 801598a:	3301      	adds	r3, #1
 801598c:	b298      	uxth	r0, r3
 801598e:	4943      	ldr	r1, [pc, #268]	; (8015a9c <etharp_tmr+0x14c>)
 8015990:	687a      	ldr	r2, [r7, #4]
 8015992:	4613      	mov	r3, r2
 8015994:	005b      	lsls	r3, r3, #1
 8015996:	4413      	add	r3, r2
 8015998:	00db      	lsls	r3, r3, #3
 801599a:	440b      	add	r3, r1
 801599c:	3312      	adds	r3, #18
 801599e:	4602      	mov	r2, r0
 80159a0:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80159a2:	493e      	ldr	r1, [pc, #248]	; (8015a9c <etharp_tmr+0x14c>)
 80159a4:	687a      	ldr	r2, [r7, #4]
 80159a6:	4613      	mov	r3, r2
 80159a8:	005b      	lsls	r3, r3, #1
 80159aa:	4413      	add	r3, r2
 80159ac:	00db      	lsls	r3, r3, #3
 80159ae:	440b      	add	r3, r1
 80159b0:	3312      	adds	r3, #18
 80159b2:	881b      	ldrh	r3, [r3, #0]
 80159b4:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80159b8:	d215      	bcs.n	80159e6 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80159ba:	4938      	ldr	r1, [pc, #224]	; (8015a9c <etharp_tmr+0x14c>)
 80159bc:	687a      	ldr	r2, [r7, #4]
 80159be:	4613      	mov	r3, r2
 80159c0:	005b      	lsls	r3, r3, #1
 80159c2:	4413      	add	r3, r2
 80159c4:	00db      	lsls	r3, r3, #3
 80159c6:	440b      	add	r3, r1
 80159c8:	3314      	adds	r3, #20
 80159ca:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80159cc:	2b01      	cmp	r3, #1
 80159ce:	d10e      	bne.n	80159ee <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 80159d0:	4932      	ldr	r1, [pc, #200]	; (8015a9c <etharp_tmr+0x14c>)
 80159d2:	687a      	ldr	r2, [r7, #4]
 80159d4:	4613      	mov	r3, r2
 80159d6:	005b      	lsls	r3, r3, #1
 80159d8:	4413      	add	r3, r2
 80159da:	00db      	lsls	r3, r3, #3
 80159dc:	440b      	add	r3, r1
 80159de:	3312      	adds	r3, #18
 80159e0:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80159e2:	2b04      	cmp	r3, #4
 80159e4:	d903      	bls.n	80159ee <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 80159e6:	6878      	ldr	r0, [r7, #4]
 80159e8:	f7ff ff80 	bl	80158ec <etharp_free_entry>
 80159ec:	e04a      	b.n	8015a84 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 80159ee:	492b      	ldr	r1, [pc, #172]	; (8015a9c <etharp_tmr+0x14c>)
 80159f0:	687a      	ldr	r2, [r7, #4]
 80159f2:	4613      	mov	r3, r2
 80159f4:	005b      	lsls	r3, r3, #1
 80159f6:	4413      	add	r3, r2
 80159f8:	00db      	lsls	r3, r3, #3
 80159fa:	440b      	add	r3, r1
 80159fc:	3314      	adds	r3, #20
 80159fe:	781b      	ldrb	r3, [r3, #0]
 8015a00:	2b03      	cmp	r3, #3
 8015a02:	d10a      	bne.n	8015a1a <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8015a04:	4925      	ldr	r1, [pc, #148]	; (8015a9c <etharp_tmr+0x14c>)
 8015a06:	687a      	ldr	r2, [r7, #4]
 8015a08:	4613      	mov	r3, r2
 8015a0a:	005b      	lsls	r3, r3, #1
 8015a0c:	4413      	add	r3, r2
 8015a0e:	00db      	lsls	r3, r3, #3
 8015a10:	440b      	add	r3, r1
 8015a12:	3314      	adds	r3, #20
 8015a14:	2204      	movs	r2, #4
 8015a16:	701a      	strb	r2, [r3, #0]
 8015a18:	e034      	b.n	8015a84 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8015a1a:	4920      	ldr	r1, [pc, #128]	; (8015a9c <etharp_tmr+0x14c>)
 8015a1c:	687a      	ldr	r2, [r7, #4]
 8015a1e:	4613      	mov	r3, r2
 8015a20:	005b      	lsls	r3, r3, #1
 8015a22:	4413      	add	r3, r2
 8015a24:	00db      	lsls	r3, r3, #3
 8015a26:	440b      	add	r3, r1
 8015a28:	3314      	adds	r3, #20
 8015a2a:	781b      	ldrb	r3, [r3, #0]
 8015a2c:	2b04      	cmp	r3, #4
 8015a2e:	d10a      	bne.n	8015a46 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8015a30:	491a      	ldr	r1, [pc, #104]	; (8015a9c <etharp_tmr+0x14c>)
 8015a32:	687a      	ldr	r2, [r7, #4]
 8015a34:	4613      	mov	r3, r2
 8015a36:	005b      	lsls	r3, r3, #1
 8015a38:	4413      	add	r3, r2
 8015a3a:	00db      	lsls	r3, r3, #3
 8015a3c:	440b      	add	r3, r1
 8015a3e:	3314      	adds	r3, #20
 8015a40:	2202      	movs	r2, #2
 8015a42:	701a      	strb	r2, [r3, #0]
 8015a44:	e01e      	b.n	8015a84 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8015a46:	4915      	ldr	r1, [pc, #84]	; (8015a9c <etharp_tmr+0x14c>)
 8015a48:	687a      	ldr	r2, [r7, #4]
 8015a4a:	4613      	mov	r3, r2
 8015a4c:	005b      	lsls	r3, r3, #1
 8015a4e:	4413      	add	r3, r2
 8015a50:	00db      	lsls	r3, r3, #3
 8015a52:	440b      	add	r3, r1
 8015a54:	3314      	adds	r3, #20
 8015a56:	781b      	ldrb	r3, [r3, #0]
 8015a58:	2b01      	cmp	r3, #1
 8015a5a:	d113      	bne.n	8015a84 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8015a5c:	490f      	ldr	r1, [pc, #60]	; (8015a9c <etharp_tmr+0x14c>)
 8015a5e:	687a      	ldr	r2, [r7, #4]
 8015a60:	4613      	mov	r3, r2
 8015a62:	005b      	lsls	r3, r3, #1
 8015a64:	4413      	add	r3, r2
 8015a66:	00db      	lsls	r3, r3, #3
 8015a68:	440b      	add	r3, r1
 8015a6a:	3308      	adds	r3, #8
 8015a6c:	6818      	ldr	r0, [r3, #0]
 8015a6e:	687a      	ldr	r2, [r7, #4]
 8015a70:	4613      	mov	r3, r2
 8015a72:	005b      	lsls	r3, r3, #1
 8015a74:	4413      	add	r3, r2
 8015a76:	00db      	lsls	r3, r3, #3
 8015a78:	4a08      	ldr	r2, [pc, #32]	; (8015a9c <etharp_tmr+0x14c>)
 8015a7a:	4413      	add	r3, r2
 8015a7c:	3304      	adds	r3, #4
 8015a7e:	4619      	mov	r1, r3
 8015a80:	f000 fe72 	bl	8016768 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015a84:	687b      	ldr	r3, [r7, #4]
 8015a86:	3301      	adds	r3, #1
 8015a88:	607b      	str	r3, [r7, #4]
 8015a8a:	687b      	ldr	r3, [r7, #4]
 8015a8c:	2b09      	cmp	r3, #9
 8015a8e:	f77f af65 	ble.w	801595c <etharp_tmr+0xc>
      }
    }
  }
}
 8015a92:	bf00      	nop
 8015a94:	bf00      	nop
 8015a96:	3708      	adds	r7, #8
 8015a98:	46bd      	mov	sp, r7
 8015a9a:	bd80      	pop	{r7, pc}
 8015a9c:	200004e8 	.word	0x200004e8

08015aa0 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8015aa0:	b580      	push	{r7, lr}
 8015aa2:	b08a      	sub	sp, #40	; 0x28
 8015aa4:	af00      	add	r7, sp, #0
 8015aa6:	60f8      	str	r0, [r7, #12]
 8015aa8:	460b      	mov	r3, r1
 8015aaa:	607a      	str	r2, [r7, #4]
 8015aac:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8015aae:	230a      	movs	r3, #10
 8015ab0:	84fb      	strh	r3, [r7, #38]	; 0x26
 8015ab2:	230a      	movs	r3, #10
 8015ab4:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8015ab6:	230a      	movs	r3, #10
 8015ab8:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8015aba:	2300      	movs	r3, #0
 8015abc:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8015abe:	230a      	movs	r3, #10
 8015ac0:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8015ac2:	2300      	movs	r3, #0
 8015ac4:	83bb      	strh	r3, [r7, #28]
 8015ac6:	2300      	movs	r3, #0
 8015ac8:	837b      	strh	r3, [r7, #26]
 8015aca:	2300      	movs	r3, #0
 8015acc:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015ace:	2300      	movs	r3, #0
 8015ad0:	843b      	strh	r3, [r7, #32]
 8015ad2:	e0ae      	b.n	8015c32 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8015ad4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015ad8:	49a6      	ldr	r1, [pc, #664]	; (8015d74 <etharp_find_entry+0x2d4>)
 8015ada:	4613      	mov	r3, r2
 8015adc:	005b      	lsls	r3, r3, #1
 8015ade:	4413      	add	r3, r2
 8015ae0:	00db      	lsls	r3, r3, #3
 8015ae2:	440b      	add	r3, r1
 8015ae4:	3314      	adds	r3, #20
 8015ae6:	781b      	ldrb	r3, [r3, #0]
 8015ae8:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8015aea:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8015aee:	2b0a      	cmp	r3, #10
 8015af0:	d105      	bne.n	8015afe <etharp_find_entry+0x5e>
 8015af2:	7dfb      	ldrb	r3, [r7, #23]
 8015af4:	2b00      	cmp	r3, #0
 8015af6:	d102      	bne.n	8015afe <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8015af8:	8c3b      	ldrh	r3, [r7, #32]
 8015afa:	847b      	strh	r3, [r7, #34]	; 0x22
 8015afc:	e095      	b.n	8015c2a <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8015afe:	7dfb      	ldrb	r3, [r7, #23]
 8015b00:	2b00      	cmp	r3, #0
 8015b02:	f000 8092 	beq.w	8015c2a <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8015b06:	7dfb      	ldrb	r3, [r7, #23]
 8015b08:	2b01      	cmp	r3, #1
 8015b0a:	d009      	beq.n	8015b20 <etharp_find_entry+0x80>
 8015b0c:	7dfb      	ldrb	r3, [r7, #23]
 8015b0e:	2b01      	cmp	r3, #1
 8015b10:	d806      	bhi.n	8015b20 <etharp_find_entry+0x80>
 8015b12:	4b99      	ldr	r3, [pc, #612]	; (8015d78 <etharp_find_entry+0x2d8>)
 8015b14:	f240 1223 	movw	r2, #291	; 0x123
 8015b18:	4998      	ldr	r1, [pc, #608]	; (8015d7c <etharp_find_entry+0x2dc>)
 8015b1a:	4899      	ldr	r0, [pc, #612]	; (8015d80 <etharp_find_entry+0x2e0>)
 8015b1c:	f002 ff56 	bl	80189cc <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8015b20:	68fb      	ldr	r3, [r7, #12]
 8015b22:	2b00      	cmp	r3, #0
 8015b24:	d020      	beq.n	8015b68 <etharp_find_entry+0xc8>
 8015b26:	68fb      	ldr	r3, [r7, #12]
 8015b28:	6819      	ldr	r1, [r3, #0]
 8015b2a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015b2e:	4891      	ldr	r0, [pc, #580]	; (8015d74 <etharp_find_entry+0x2d4>)
 8015b30:	4613      	mov	r3, r2
 8015b32:	005b      	lsls	r3, r3, #1
 8015b34:	4413      	add	r3, r2
 8015b36:	00db      	lsls	r3, r3, #3
 8015b38:	4403      	add	r3, r0
 8015b3a:	3304      	adds	r3, #4
 8015b3c:	681b      	ldr	r3, [r3, #0]
 8015b3e:	4299      	cmp	r1, r3
 8015b40:	d112      	bne.n	8015b68 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8015b42:	687b      	ldr	r3, [r7, #4]
 8015b44:	2b00      	cmp	r3, #0
 8015b46:	d00c      	beq.n	8015b62 <etharp_find_entry+0xc2>
 8015b48:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015b4c:	4989      	ldr	r1, [pc, #548]	; (8015d74 <etharp_find_entry+0x2d4>)
 8015b4e:	4613      	mov	r3, r2
 8015b50:	005b      	lsls	r3, r3, #1
 8015b52:	4413      	add	r3, r2
 8015b54:	00db      	lsls	r3, r3, #3
 8015b56:	440b      	add	r3, r1
 8015b58:	3308      	adds	r3, #8
 8015b5a:	681b      	ldr	r3, [r3, #0]
 8015b5c:	687a      	ldr	r2, [r7, #4]
 8015b5e:	429a      	cmp	r2, r3
 8015b60:	d102      	bne.n	8015b68 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8015b62:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8015b66:	e100      	b.n	8015d6a <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8015b68:	7dfb      	ldrb	r3, [r7, #23]
 8015b6a:	2b01      	cmp	r3, #1
 8015b6c:	d140      	bne.n	8015bf0 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8015b6e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015b72:	4980      	ldr	r1, [pc, #512]	; (8015d74 <etharp_find_entry+0x2d4>)
 8015b74:	4613      	mov	r3, r2
 8015b76:	005b      	lsls	r3, r3, #1
 8015b78:	4413      	add	r3, r2
 8015b7a:	00db      	lsls	r3, r3, #3
 8015b7c:	440b      	add	r3, r1
 8015b7e:	681b      	ldr	r3, [r3, #0]
 8015b80:	2b00      	cmp	r3, #0
 8015b82:	d01a      	beq.n	8015bba <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8015b84:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015b88:	497a      	ldr	r1, [pc, #488]	; (8015d74 <etharp_find_entry+0x2d4>)
 8015b8a:	4613      	mov	r3, r2
 8015b8c:	005b      	lsls	r3, r3, #1
 8015b8e:	4413      	add	r3, r2
 8015b90:	00db      	lsls	r3, r3, #3
 8015b92:	440b      	add	r3, r1
 8015b94:	3312      	adds	r3, #18
 8015b96:	881b      	ldrh	r3, [r3, #0]
 8015b98:	8bba      	ldrh	r2, [r7, #28]
 8015b9a:	429a      	cmp	r2, r3
 8015b9c:	d845      	bhi.n	8015c2a <etharp_find_entry+0x18a>
            old_queue = i;
 8015b9e:	8c3b      	ldrh	r3, [r7, #32]
 8015ba0:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8015ba2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015ba6:	4973      	ldr	r1, [pc, #460]	; (8015d74 <etharp_find_entry+0x2d4>)
 8015ba8:	4613      	mov	r3, r2
 8015baa:	005b      	lsls	r3, r3, #1
 8015bac:	4413      	add	r3, r2
 8015bae:	00db      	lsls	r3, r3, #3
 8015bb0:	440b      	add	r3, r1
 8015bb2:	3312      	adds	r3, #18
 8015bb4:	881b      	ldrh	r3, [r3, #0]
 8015bb6:	83bb      	strh	r3, [r7, #28]
 8015bb8:	e037      	b.n	8015c2a <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8015bba:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015bbe:	496d      	ldr	r1, [pc, #436]	; (8015d74 <etharp_find_entry+0x2d4>)
 8015bc0:	4613      	mov	r3, r2
 8015bc2:	005b      	lsls	r3, r3, #1
 8015bc4:	4413      	add	r3, r2
 8015bc6:	00db      	lsls	r3, r3, #3
 8015bc8:	440b      	add	r3, r1
 8015bca:	3312      	adds	r3, #18
 8015bcc:	881b      	ldrh	r3, [r3, #0]
 8015bce:	8b7a      	ldrh	r2, [r7, #26]
 8015bd0:	429a      	cmp	r2, r3
 8015bd2:	d82a      	bhi.n	8015c2a <etharp_find_entry+0x18a>
            old_pending = i;
 8015bd4:	8c3b      	ldrh	r3, [r7, #32]
 8015bd6:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8015bd8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015bdc:	4965      	ldr	r1, [pc, #404]	; (8015d74 <etharp_find_entry+0x2d4>)
 8015bde:	4613      	mov	r3, r2
 8015be0:	005b      	lsls	r3, r3, #1
 8015be2:	4413      	add	r3, r2
 8015be4:	00db      	lsls	r3, r3, #3
 8015be6:	440b      	add	r3, r1
 8015be8:	3312      	adds	r3, #18
 8015bea:	881b      	ldrh	r3, [r3, #0]
 8015bec:	837b      	strh	r3, [r7, #26]
 8015bee:	e01c      	b.n	8015c2a <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8015bf0:	7dfb      	ldrb	r3, [r7, #23]
 8015bf2:	2b01      	cmp	r3, #1
 8015bf4:	d919      	bls.n	8015c2a <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8015bf6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015bfa:	495e      	ldr	r1, [pc, #376]	; (8015d74 <etharp_find_entry+0x2d4>)
 8015bfc:	4613      	mov	r3, r2
 8015bfe:	005b      	lsls	r3, r3, #1
 8015c00:	4413      	add	r3, r2
 8015c02:	00db      	lsls	r3, r3, #3
 8015c04:	440b      	add	r3, r1
 8015c06:	3312      	adds	r3, #18
 8015c08:	881b      	ldrh	r3, [r3, #0]
 8015c0a:	8b3a      	ldrh	r2, [r7, #24]
 8015c0c:	429a      	cmp	r2, r3
 8015c0e:	d80c      	bhi.n	8015c2a <etharp_find_entry+0x18a>
            old_stable = i;
 8015c10:	8c3b      	ldrh	r3, [r7, #32]
 8015c12:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8015c14:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015c18:	4956      	ldr	r1, [pc, #344]	; (8015d74 <etharp_find_entry+0x2d4>)
 8015c1a:	4613      	mov	r3, r2
 8015c1c:	005b      	lsls	r3, r3, #1
 8015c1e:	4413      	add	r3, r2
 8015c20:	00db      	lsls	r3, r3, #3
 8015c22:	440b      	add	r3, r1
 8015c24:	3312      	adds	r3, #18
 8015c26:	881b      	ldrh	r3, [r3, #0]
 8015c28:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015c2a:	8c3b      	ldrh	r3, [r7, #32]
 8015c2c:	3301      	adds	r3, #1
 8015c2e:	b29b      	uxth	r3, r3
 8015c30:	843b      	strh	r3, [r7, #32]
 8015c32:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8015c36:	2b09      	cmp	r3, #9
 8015c38:	f77f af4c 	ble.w	8015ad4 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8015c3c:	7afb      	ldrb	r3, [r7, #11]
 8015c3e:	f003 0302 	and.w	r3, r3, #2
 8015c42:	2b00      	cmp	r3, #0
 8015c44:	d108      	bne.n	8015c58 <etharp_find_entry+0x1b8>
 8015c46:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8015c4a:	2b0a      	cmp	r3, #10
 8015c4c:	d107      	bne.n	8015c5e <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8015c4e:	7afb      	ldrb	r3, [r7, #11]
 8015c50:	f003 0301 	and.w	r3, r3, #1
 8015c54:	2b00      	cmp	r3, #0
 8015c56:	d102      	bne.n	8015c5e <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8015c58:	f04f 33ff 	mov.w	r3, #4294967295
 8015c5c:	e085      	b.n	8015d6a <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8015c5e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8015c62:	2b09      	cmp	r3, #9
 8015c64:	dc02      	bgt.n	8015c6c <etharp_find_entry+0x1cc>
    i = empty;
 8015c66:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015c68:	843b      	strh	r3, [r7, #32]
 8015c6a:	e039      	b.n	8015ce0 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8015c6c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8015c70:	2b09      	cmp	r3, #9
 8015c72:	dc14      	bgt.n	8015c9e <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8015c74:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015c76:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8015c78:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015c7c:	493d      	ldr	r1, [pc, #244]	; (8015d74 <etharp_find_entry+0x2d4>)
 8015c7e:	4613      	mov	r3, r2
 8015c80:	005b      	lsls	r3, r3, #1
 8015c82:	4413      	add	r3, r2
 8015c84:	00db      	lsls	r3, r3, #3
 8015c86:	440b      	add	r3, r1
 8015c88:	681b      	ldr	r3, [r3, #0]
 8015c8a:	2b00      	cmp	r3, #0
 8015c8c:	d018      	beq.n	8015cc0 <etharp_find_entry+0x220>
 8015c8e:	4b3a      	ldr	r3, [pc, #232]	; (8015d78 <etharp_find_entry+0x2d8>)
 8015c90:	f240 126d 	movw	r2, #365	; 0x16d
 8015c94:	493b      	ldr	r1, [pc, #236]	; (8015d84 <etharp_find_entry+0x2e4>)
 8015c96:	483a      	ldr	r0, [pc, #232]	; (8015d80 <etharp_find_entry+0x2e0>)
 8015c98:	f002 fe98 	bl	80189cc <iprintf>
 8015c9c:	e010      	b.n	8015cc0 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8015c9e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8015ca2:	2b09      	cmp	r3, #9
 8015ca4:	dc02      	bgt.n	8015cac <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8015ca6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8015ca8:	843b      	strh	r3, [r7, #32]
 8015caa:	e009      	b.n	8015cc0 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8015cac:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8015cb0:	2b09      	cmp	r3, #9
 8015cb2:	dc02      	bgt.n	8015cba <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8015cb4:	8bfb      	ldrh	r3, [r7, #30]
 8015cb6:	843b      	strh	r3, [r7, #32]
 8015cb8:	e002      	b.n	8015cc0 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8015cba:	f04f 33ff 	mov.w	r3, #4294967295
 8015cbe:	e054      	b.n	8015d6a <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8015cc0:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8015cc4:	2b09      	cmp	r3, #9
 8015cc6:	dd06      	ble.n	8015cd6 <etharp_find_entry+0x236>
 8015cc8:	4b2b      	ldr	r3, [pc, #172]	; (8015d78 <etharp_find_entry+0x2d8>)
 8015cca:	f240 127f 	movw	r2, #383	; 0x17f
 8015cce:	492e      	ldr	r1, [pc, #184]	; (8015d88 <etharp_find_entry+0x2e8>)
 8015cd0:	482b      	ldr	r0, [pc, #172]	; (8015d80 <etharp_find_entry+0x2e0>)
 8015cd2:	f002 fe7b 	bl	80189cc <iprintf>
    etharp_free_entry(i);
 8015cd6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8015cda:	4618      	mov	r0, r3
 8015cdc:	f7ff fe06 	bl	80158ec <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8015ce0:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8015ce4:	2b09      	cmp	r3, #9
 8015ce6:	dd06      	ble.n	8015cf6 <etharp_find_entry+0x256>
 8015ce8:	4b23      	ldr	r3, [pc, #140]	; (8015d78 <etharp_find_entry+0x2d8>)
 8015cea:	f240 1283 	movw	r2, #387	; 0x183
 8015cee:	4926      	ldr	r1, [pc, #152]	; (8015d88 <etharp_find_entry+0x2e8>)
 8015cf0:	4823      	ldr	r0, [pc, #140]	; (8015d80 <etharp_find_entry+0x2e0>)
 8015cf2:	f002 fe6b 	bl	80189cc <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8015cf6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015cfa:	491e      	ldr	r1, [pc, #120]	; (8015d74 <etharp_find_entry+0x2d4>)
 8015cfc:	4613      	mov	r3, r2
 8015cfe:	005b      	lsls	r3, r3, #1
 8015d00:	4413      	add	r3, r2
 8015d02:	00db      	lsls	r3, r3, #3
 8015d04:	440b      	add	r3, r1
 8015d06:	3314      	adds	r3, #20
 8015d08:	781b      	ldrb	r3, [r3, #0]
 8015d0a:	2b00      	cmp	r3, #0
 8015d0c:	d006      	beq.n	8015d1c <etharp_find_entry+0x27c>
 8015d0e:	4b1a      	ldr	r3, [pc, #104]	; (8015d78 <etharp_find_entry+0x2d8>)
 8015d10:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8015d14:	491d      	ldr	r1, [pc, #116]	; (8015d8c <etharp_find_entry+0x2ec>)
 8015d16:	481a      	ldr	r0, [pc, #104]	; (8015d80 <etharp_find_entry+0x2e0>)
 8015d18:	f002 fe58 	bl	80189cc <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8015d1c:	68fb      	ldr	r3, [r7, #12]
 8015d1e:	2b00      	cmp	r3, #0
 8015d20:	d00b      	beq.n	8015d3a <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8015d22:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015d26:	68fb      	ldr	r3, [r7, #12]
 8015d28:	6819      	ldr	r1, [r3, #0]
 8015d2a:	4812      	ldr	r0, [pc, #72]	; (8015d74 <etharp_find_entry+0x2d4>)
 8015d2c:	4613      	mov	r3, r2
 8015d2e:	005b      	lsls	r3, r3, #1
 8015d30:	4413      	add	r3, r2
 8015d32:	00db      	lsls	r3, r3, #3
 8015d34:	4403      	add	r3, r0
 8015d36:	3304      	adds	r3, #4
 8015d38:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8015d3a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015d3e:	490d      	ldr	r1, [pc, #52]	; (8015d74 <etharp_find_entry+0x2d4>)
 8015d40:	4613      	mov	r3, r2
 8015d42:	005b      	lsls	r3, r3, #1
 8015d44:	4413      	add	r3, r2
 8015d46:	00db      	lsls	r3, r3, #3
 8015d48:	440b      	add	r3, r1
 8015d4a:	3312      	adds	r3, #18
 8015d4c:	2200      	movs	r2, #0
 8015d4e:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8015d50:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015d54:	4907      	ldr	r1, [pc, #28]	; (8015d74 <etharp_find_entry+0x2d4>)
 8015d56:	4613      	mov	r3, r2
 8015d58:	005b      	lsls	r3, r3, #1
 8015d5a:	4413      	add	r3, r2
 8015d5c:	00db      	lsls	r3, r3, #3
 8015d5e:	440b      	add	r3, r1
 8015d60:	3308      	adds	r3, #8
 8015d62:	687a      	ldr	r2, [r7, #4]
 8015d64:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8015d66:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8015d6a:	4618      	mov	r0, r3
 8015d6c:	3728      	adds	r7, #40	; 0x28
 8015d6e:	46bd      	mov	sp, r7
 8015d70:	bd80      	pop	{r7, pc}
 8015d72:	bf00      	nop
 8015d74:	200004e8 	.word	0x200004e8
 8015d78:	080206c0 	.word	0x080206c0
 8015d7c:	080206f8 	.word	0x080206f8
 8015d80:	08020738 	.word	0x08020738
 8015d84:	08020760 	.word	0x08020760
 8015d88:	08020778 	.word	0x08020778
 8015d8c:	0802078c 	.word	0x0802078c

08015d90 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8015d90:	b580      	push	{r7, lr}
 8015d92:	b088      	sub	sp, #32
 8015d94:	af02      	add	r7, sp, #8
 8015d96:	60f8      	str	r0, [r7, #12]
 8015d98:	60b9      	str	r1, [r7, #8]
 8015d9a:	607a      	str	r2, [r7, #4]
 8015d9c:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8015d9e:	68fb      	ldr	r3, [r7, #12]
 8015da0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8015da4:	2b06      	cmp	r3, #6
 8015da6:	d006      	beq.n	8015db6 <etharp_update_arp_entry+0x26>
 8015da8:	4b48      	ldr	r3, [pc, #288]	; (8015ecc <etharp_update_arp_entry+0x13c>)
 8015daa:	f240 12a9 	movw	r2, #425	; 0x1a9
 8015dae:	4948      	ldr	r1, [pc, #288]	; (8015ed0 <etharp_update_arp_entry+0x140>)
 8015db0:	4848      	ldr	r0, [pc, #288]	; (8015ed4 <etharp_update_arp_entry+0x144>)
 8015db2:	f002 fe0b 	bl	80189cc <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8015db6:	68bb      	ldr	r3, [r7, #8]
 8015db8:	2b00      	cmp	r3, #0
 8015dba:	d012      	beq.n	8015de2 <etharp_update_arp_entry+0x52>
 8015dbc:	68bb      	ldr	r3, [r7, #8]
 8015dbe:	681b      	ldr	r3, [r3, #0]
 8015dc0:	2b00      	cmp	r3, #0
 8015dc2:	d00e      	beq.n	8015de2 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8015dc4:	68bb      	ldr	r3, [r7, #8]
 8015dc6:	681b      	ldr	r3, [r3, #0]
 8015dc8:	68f9      	ldr	r1, [r7, #12]
 8015dca:	4618      	mov	r0, r3
 8015dcc:	f001 f920 	bl	8017010 <ip4_addr_isbroadcast_u32>
 8015dd0:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8015dd2:	2b00      	cmp	r3, #0
 8015dd4:	d105      	bne.n	8015de2 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8015dd6:	68bb      	ldr	r3, [r7, #8]
 8015dd8:	681b      	ldr	r3, [r3, #0]
 8015dda:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8015dde:	2be0      	cmp	r3, #224	; 0xe0
 8015de0:	d102      	bne.n	8015de8 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8015de2:	f06f 030f 	mvn.w	r3, #15
 8015de6:	e06c      	b.n	8015ec2 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8015de8:	78fb      	ldrb	r3, [r7, #3]
 8015dea:	68fa      	ldr	r2, [r7, #12]
 8015dec:	4619      	mov	r1, r3
 8015dee:	68b8      	ldr	r0, [r7, #8]
 8015df0:	f7ff fe56 	bl	8015aa0 <etharp_find_entry>
 8015df4:	4603      	mov	r3, r0
 8015df6:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8015df8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8015dfc:	2b00      	cmp	r3, #0
 8015dfe:	da02      	bge.n	8015e06 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8015e00:	8afb      	ldrh	r3, [r7, #22]
 8015e02:	b25b      	sxtb	r3, r3
 8015e04:	e05d      	b.n	8015ec2 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8015e06:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015e0a:	4933      	ldr	r1, [pc, #204]	; (8015ed8 <etharp_update_arp_entry+0x148>)
 8015e0c:	4613      	mov	r3, r2
 8015e0e:	005b      	lsls	r3, r3, #1
 8015e10:	4413      	add	r3, r2
 8015e12:	00db      	lsls	r3, r3, #3
 8015e14:	440b      	add	r3, r1
 8015e16:	3314      	adds	r3, #20
 8015e18:	2202      	movs	r2, #2
 8015e1a:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8015e1c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015e20:	492d      	ldr	r1, [pc, #180]	; (8015ed8 <etharp_update_arp_entry+0x148>)
 8015e22:	4613      	mov	r3, r2
 8015e24:	005b      	lsls	r3, r3, #1
 8015e26:	4413      	add	r3, r2
 8015e28:	00db      	lsls	r3, r3, #3
 8015e2a:	440b      	add	r3, r1
 8015e2c:	3308      	adds	r3, #8
 8015e2e:	68fa      	ldr	r2, [r7, #12]
 8015e30:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8015e32:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015e36:	4613      	mov	r3, r2
 8015e38:	005b      	lsls	r3, r3, #1
 8015e3a:	4413      	add	r3, r2
 8015e3c:	00db      	lsls	r3, r3, #3
 8015e3e:	3308      	adds	r3, #8
 8015e40:	4a25      	ldr	r2, [pc, #148]	; (8015ed8 <etharp_update_arp_entry+0x148>)
 8015e42:	4413      	add	r3, r2
 8015e44:	3304      	adds	r3, #4
 8015e46:	2206      	movs	r2, #6
 8015e48:	6879      	ldr	r1, [r7, #4]
 8015e4a:	4618      	mov	r0, r3
 8015e4c:	f002 f87a 	bl	8017f44 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8015e50:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015e54:	4920      	ldr	r1, [pc, #128]	; (8015ed8 <etharp_update_arp_entry+0x148>)
 8015e56:	4613      	mov	r3, r2
 8015e58:	005b      	lsls	r3, r3, #1
 8015e5a:	4413      	add	r3, r2
 8015e5c:	00db      	lsls	r3, r3, #3
 8015e5e:	440b      	add	r3, r1
 8015e60:	3312      	adds	r3, #18
 8015e62:	2200      	movs	r2, #0
 8015e64:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8015e66:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015e6a:	491b      	ldr	r1, [pc, #108]	; (8015ed8 <etharp_update_arp_entry+0x148>)
 8015e6c:	4613      	mov	r3, r2
 8015e6e:	005b      	lsls	r3, r3, #1
 8015e70:	4413      	add	r3, r2
 8015e72:	00db      	lsls	r3, r3, #3
 8015e74:	440b      	add	r3, r1
 8015e76:	681b      	ldr	r3, [r3, #0]
 8015e78:	2b00      	cmp	r3, #0
 8015e7a:	d021      	beq.n	8015ec0 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8015e7c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015e80:	4915      	ldr	r1, [pc, #84]	; (8015ed8 <etharp_update_arp_entry+0x148>)
 8015e82:	4613      	mov	r3, r2
 8015e84:	005b      	lsls	r3, r3, #1
 8015e86:	4413      	add	r3, r2
 8015e88:	00db      	lsls	r3, r3, #3
 8015e8a:	440b      	add	r3, r1
 8015e8c:	681b      	ldr	r3, [r3, #0]
 8015e8e:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8015e90:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015e94:	4910      	ldr	r1, [pc, #64]	; (8015ed8 <etharp_update_arp_entry+0x148>)
 8015e96:	4613      	mov	r3, r2
 8015e98:	005b      	lsls	r3, r3, #1
 8015e9a:	4413      	add	r3, r2
 8015e9c:	00db      	lsls	r3, r3, #3
 8015e9e:	440b      	add	r3, r1
 8015ea0:	2200      	movs	r2, #0
 8015ea2:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8015ea4:	68fb      	ldr	r3, [r7, #12]
 8015ea6:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 8015eaa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8015eae:	9300      	str	r3, [sp, #0]
 8015eb0:	687b      	ldr	r3, [r7, #4]
 8015eb2:	6939      	ldr	r1, [r7, #16]
 8015eb4:	68f8      	ldr	r0, [r7, #12]
 8015eb6:	f001 ffb3 	bl	8017e20 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8015eba:	6938      	ldr	r0, [r7, #16]
 8015ebc:	f7f7 fd08 	bl	800d8d0 <pbuf_free>
  }
  return ERR_OK;
 8015ec0:	2300      	movs	r3, #0
}
 8015ec2:	4618      	mov	r0, r3
 8015ec4:	3718      	adds	r7, #24
 8015ec6:	46bd      	mov	sp, r7
 8015ec8:	bd80      	pop	{r7, pc}
 8015eca:	bf00      	nop
 8015ecc:	080206c0 	.word	0x080206c0
 8015ed0:	080207b8 	.word	0x080207b8
 8015ed4:	08020738 	.word	0x08020738
 8015ed8:	200004e8 	.word	0x200004e8

08015edc <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8015edc:	b580      	push	{r7, lr}
 8015ede:	b084      	sub	sp, #16
 8015ee0:	af00      	add	r7, sp, #0
 8015ee2:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015ee4:	2300      	movs	r3, #0
 8015ee6:	60fb      	str	r3, [r7, #12]
 8015ee8:	e01e      	b.n	8015f28 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8015eea:	4913      	ldr	r1, [pc, #76]	; (8015f38 <etharp_cleanup_netif+0x5c>)
 8015eec:	68fa      	ldr	r2, [r7, #12]
 8015eee:	4613      	mov	r3, r2
 8015ef0:	005b      	lsls	r3, r3, #1
 8015ef2:	4413      	add	r3, r2
 8015ef4:	00db      	lsls	r3, r3, #3
 8015ef6:	440b      	add	r3, r1
 8015ef8:	3314      	adds	r3, #20
 8015efa:	781b      	ldrb	r3, [r3, #0]
 8015efc:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8015efe:	7afb      	ldrb	r3, [r7, #11]
 8015f00:	2b00      	cmp	r3, #0
 8015f02:	d00e      	beq.n	8015f22 <etharp_cleanup_netif+0x46>
 8015f04:	490c      	ldr	r1, [pc, #48]	; (8015f38 <etharp_cleanup_netif+0x5c>)
 8015f06:	68fa      	ldr	r2, [r7, #12]
 8015f08:	4613      	mov	r3, r2
 8015f0a:	005b      	lsls	r3, r3, #1
 8015f0c:	4413      	add	r3, r2
 8015f0e:	00db      	lsls	r3, r3, #3
 8015f10:	440b      	add	r3, r1
 8015f12:	3308      	adds	r3, #8
 8015f14:	681b      	ldr	r3, [r3, #0]
 8015f16:	687a      	ldr	r2, [r7, #4]
 8015f18:	429a      	cmp	r2, r3
 8015f1a:	d102      	bne.n	8015f22 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8015f1c:	68f8      	ldr	r0, [r7, #12]
 8015f1e:	f7ff fce5 	bl	80158ec <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015f22:	68fb      	ldr	r3, [r7, #12]
 8015f24:	3301      	adds	r3, #1
 8015f26:	60fb      	str	r3, [r7, #12]
 8015f28:	68fb      	ldr	r3, [r7, #12]
 8015f2a:	2b09      	cmp	r3, #9
 8015f2c:	dddd      	ble.n	8015eea <etharp_cleanup_netif+0xe>
    }
  }
}
 8015f2e:	bf00      	nop
 8015f30:	bf00      	nop
 8015f32:	3710      	adds	r7, #16
 8015f34:	46bd      	mov	sp, r7
 8015f36:	bd80      	pop	{r7, pc}
 8015f38:	200004e8 	.word	0x200004e8

08015f3c <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8015f3c:	b5b0      	push	{r4, r5, r7, lr}
 8015f3e:	b08a      	sub	sp, #40	; 0x28
 8015f40:	af04      	add	r7, sp, #16
 8015f42:	6078      	str	r0, [r7, #4]
 8015f44:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8015f46:	683b      	ldr	r3, [r7, #0]
 8015f48:	2b00      	cmp	r3, #0
 8015f4a:	d107      	bne.n	8015f5c <etharp_input+0x20>
 8015f4c:	4b3f      	ldr	r3, [pc, #252]	; (801604c <etharp_input+0x110>)
 8015f4e:	f240 228a 	movw	r2, #650	; 0x28a
 8015f52:	493f      	ldr	r1, [pc, #252]	; (8016050 <etharp_input+0x114>)
 8015f54:	483f      	ldr	r0, [pc, #252]	; (8016054 <etharp_input+0x118>)
 8015f56:	f002 fd39 	bl	80189cc <iprintf>
 8015f5a:	e074      	b.n	8016046 <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 8015f5c:	687b      	ldr	r3, [r7, #4]
 8015f5e:	685b      	ldr	r3, [r3, #4]
 8015f60:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8015f62:	693b      	ldr	r3, [r7, #16]
 8015f64:	881b      	ldrh	r3, [r3, #0]
 8015f66:	b29b      	uxth	r3, r3
 8015f68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8015f6c:	d10c      	bne.n	8015f88 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8015f6e:	693b      	ldr	r3, [r7, #16]
 8015f70:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8015f72:	2b06      	cmp	r3, #6
 8015f74:	d108      	bne.n	8015f88 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8015f76:	693b      	ldr	r3, [r7, #16]
 8015f78:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8015f7a:	2b04      	cmp	r3, #4
 8015f7c:	d104      	bne.n	8015f88 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8015f7e:	693b      	ldr	r3, [r7, #16]
 8015f80:	885b      	ldrh	r3, [r3, #2]
 8015f82:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8015f84:	2b08      	cmp	r3, #8
 8015f86:	d003      	beq.n	8015f90 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8015f88:	6878      	ldr	r0, [r7, #4]
 8015f8a:	f7f7 fca1 	bl	800d8d0 <pbuf_free>
    return;
 8015f8e:	e05a      	b.n	8016046 <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8015f90:	693b      	ldr	r3, [r7, #16]
 8015f92:	330e      	adds	r3, #14
 8015f94:	681b      	ldr	r3, [r3, #0]
 8015f96:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8015f98:	693b      	ldr	r3, [r7, #16]
 8015f9a:	3318      	adds	r3, #24
 8015f9c:	681b      	ldr	r3, [r3, #0]
 8015f9e:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8015fa0:	683b      	ldr	r3, [r7, #0]
 8015fa2:	3304      	adds	r3, #4
 8015fa4:	681b      	ldr	r3, [r3, #0]
 8015fa6:	2b00      	cmp	r3, #0
 8015fa8:	d102      	bne.n	8015fb0 <etharp_input+0x74>
    for_us = 0;
 8015faa:	2300      	movs	r3, #0
 8015fac:	75fb      	strb	r3, [r7, #23]
 8015fae:	e009      	b.n	8015fc4 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8015fb0:	68ba      	ldr	r2, [r7, #8]
 8015fb2:	683b      	ldr	r3, [r7, #0]
 8015fb4:	3304      	adds	r3, #4
 8015fb6:	681b      	ldr	r3, [r3, #0]
 8015fb8:	429a      	cmp	r2, r3
 8015fba:	bf0c      	ite	eq
 8015fbc:	2301      	moveq	r3, #1
 8015fbe:	2300      	movne	r3, #0
 8015fc0:	b2db      	uxtb	r3, r3
 8015fc2:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8015fc4:	693b      	ldr	r3, [r7, #16]
 8015fc6:	f103 0208 	add.w	r2, r3, #8
 8015fca:	7dfb      	ldrb	r3, [r7, #23]
 8015fcc:	2b00      	cmp	r3, #0
 8015fce:	d001      	beq.n	8015fd4 <etharp_input+0x98>
 8015fd0:	2301      	movs	r3, #1
 8015fd2:	e000      	b.n	8015fd6 <etharp_input+0x9a>
 8015fd4:	2302      	movs	r3, #2
 8015fd6:	f107 010c 	add.w	r1, r7, #12
 8015fda:	6838      	ldr	r0, [r7, #0]
 8015fdc:	f7ff fed8 	bl	8015d90 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8015fe0:	693b      	ldr	r3, [r7, #16]
 8015fe2:	88db      	ldrh	r3, [r3, #6]
 8015fe4:	b29b      	uxth	r3, r3
 8015fe6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8015fea:	d003      	beq.n	8015ff4 <etharp_input+0xb8>
 8015fec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015ff0:	d01e      	beq.n	8016030 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8015ff2:	e025      	b.n	8016040 <etharp_input+0x104>
      if (for_us) {
 8015ff4:	7dfb      	ldrb	r3, [r7, #23]
 8015ff6:	2b00      	cmp	r3, #0
 8015ff8:	d021      	beq.n	801603e <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8015ffa:	683b      	ldr	r3, [r7, #0]
 8015ffc:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 8016000:	693b      	ldr	r3, [r7, #16]
 8016002:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8016006:	683b      	ldr	r3, [r7, #0]
 8016008:	f103 052a 	add.w	r5, r3, #42	; 0x2a
 801600c:	683b      	ldr	r3, [r7, #0]
 801600e:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8016010:	693a      	ldr	r2, [r7, #16]
 8016012:	3208      	adds	r2, #8
        etharp_raw(netif,
 8016014:	2102      	movs	r1, #2
 8016016:	9103      	str	r1, [sp, #12]
 8016018:	f107 010c 	add.w	r1, r7, #12
 801601c:	9102      	str	r1, [sp, #8]
 801601e:	9201      	str	r2, [sp, #4]
 8016020:	9300      	str	r3, [sp, #0]
 8016022:	462b      	mov	r3, r5
 8016024:	4622      	mov	r2, r4
 8016026:	4601      	mov	r1, r0
 8016028:	6838      	ldr	r0, [r7, #0]
 801602a:	f000 faef 	bl	801660c <etharp_raw>
      break;
 801602e:	e006      	b.n	801603e <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 8016030:	f107 030c 	add.w	r3, r7, #12
 8016034:	4619      	mov	r1, r3
 8016036:	6838      	ldr	r0, [r7, #0]
 8016038:	f7fe f9fc 	bl	8014434 <dhcp_arp_reply>
      break;
 801603c:	e000      	b.n	8016040 <etharp_input+0x104>
      break;
 801603e:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8016040:	6878      	ldr	r0, [r7, #4]
 8016042:	f7f7 fc45 	bl	800d8d0 <pbuf_free>
}
 8016046:	3718      	adds	r7, #24
 8016048:	46bd      	mov	sp, r7
 801604a:	bdb0      	pop	{r4, r5, r7, pc}
 801604c:	080206c0 	.word	0x080206c0
 8016050:	08020810 	.word	0x08020810
 8016054:	08020738 	.word	0x08020738

08016058 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8016058:	b580      	push	{r7, lr}
 801605a:	b086      	sub	sp, #24
 801605c:	af02      	add	r7, sp, #8
 801605e:	60f8      	str	r0, [r7, #12]
 8016060:	60b9      	str	r1, [r7, #8]
 8016062:	4613      	mov	r3, r2
 8016064:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8016066:	79fa      	ldrb	r2, [r7, #7]
 8016068:	4944      	ldr	r1, [pc, #272]	; (801617c <etharp_output_to_arp_index+0x124>)
 801606a:	4613      	mov	r3, r2
 801606c:	005b      	lsls	r3, r3, #1
 801606e:	4413      	add	r3, r2
 8016070:	00db      	lsls	r3, r3, #3
 8016072:	440b      	add	r3, r1
 8016074:	3314      	adds	r3, #20
 8016076:	781b      	ldrb	r3, [r3, #0]
 8016078:	2b01      	cmp	r3, #1
 801607a:	d806      	bhi.n	801608a <etharp_output_to_arp_index+0x32>
 801607c:	4b40      	ldr	r3, [pc, #256]	; (8016180 <etharp_output_to_arp_index+0x128>)
 801607e:	f240 22ee 	movw	r2, #750	; 0x2ee
 8016082:	4940      	ldr	r1, [pc, #256]	; (8016184 <etharp_output_to_arp_index+0x12c>)
 8016084:	4840      	ldr	r0, [pc, #256]	; (8016188 <etharp_output_to_arp_index+0x130>)
 8016086:	f002 fca1 	bl	80189cc <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801608a:	79fa      	ldrb	r2, [r7, #7]
 801608c:	493b      	ldr	r1, [pc, #236]	; (801617c <etharp_output_to_arp_index+0x124>)
 801608e:	4613      	mov	r3, r2
 8016090:	005b      	lsls	r3, r3, #1
 8016092:	4413      	add	r3, r2
 8016094:	00db      	lsls	r3, r3, #3
 8016096:	440b      	add	r3, r1
 8016098:	3314      	adds	r3, #20
 801609a:	781b      	ldrb	r3, [r3, #0]
 801609c:	2b02      	cmp	r3, #2
 801609e:	d153      	bne.n	8016148 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 80160a0:	79fa      	ldrb	r2, [r7, #7]
 80160a2:	4936      	ldr	r1, [pc, #216]	; (801617c <etharp_output_to_arp_index+0x124>)
 80160a4:	4613      	mov	r3, r2
 80160a6:	005b      	lsls	r3, r3, #1
 80160a8:	4413      	add	r3, r2
 80160aa:	00db      	lsls	r3, r3, #3
 80160ac:	440b      	add	r3, r1
 80160ae:	3312      	adds	r3, #18
 80160b0:	881b      	ldrh	r3, [r3, #0]
 80160b2:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 80160b6:	d919      	bls.n	80160ec <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 80160b8:	79fa      	ldrb	r2, [r7, #7]
 80160ba:	4613      	mov	r3, r2
 80160bc:	005b      	lsls	r3, r3, #1
 80160be:	4413      	add	r3, r2
 80160c0:	00db      	lsls	r3, r3, #3
 80160c2:	4a2e      	ldr	r2, [pc, #184]	; (801617c <etharp_output_to_arp_index+0x124>)
 80160c4:	4413      	add	r3, r2
 80160c6:	3304      	adds	r3, #4
 80160c8:	4619      	mov	r1, r3
 80160ca:	68f8      	ldr	r0, [r7, #12]
 80160cc:	f000 fb4c 	bl	8016768 <etharp_request>
 80160d0:	4603      	mov	r3, r0
 80160d2:	2b00      	cmp	r3, #0
 80160d4:	d138      	bne.n	8016148 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80160d6:	79fa      	ldrb	r2, [r7, #7]
 80160d8:	4928      	ldr	r1, [pc, #160]	; (801617c <etharp_output_to_arp_index+0x124>)
 80160da:	4613      	mov	r3, r2
 80160dc:	005b      	lsls	r3, r3, #1
 80160de:	4413      	add	r3, r2
 80160e0:	00db      	lsls	r3, r3, #3
 80160e2:	440b      	add	r3, r1
 80160e4:	3314      	adds	r3, #20
 80160e6:	2203      	movs	r2, #3
 80160e8:	701a      	strb	r2, [r3, #0]
 80160ea:	e02d      	b.n	8016148 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 80160ec:	79fa      	ldrb	r2, [r7, #7]
 80160ee:	4923      	ldr	r1, [pc, #140]	; (801617c <etharp_output_to_arp_index+0x124>)
 80160f0:	4613      	mov	r3, r2
 80160f2:	005b      	lsls	r3, r3, #1
 80160f4:	4413      	add	r3, r2
 80160f6:	00db      	lsls	r3, r3, #3
 80160f8:	440b      	add	r3, r1
 80160fa:	3312      	adds	r3, #18
 80160fc:	881b      	ldrh	r3, [r3, #0]
 80160fe:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8016102:	d321      	bcc.n	8016148 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8016104:	79fa      	ldrb	r2, [r7, #7]
 8016106:	4613      	mov	r3, r2
 8016108:	005b      	lsls	r3, r3, #1
 801610a:	4413      	add	r3, r2
 801610c:	00db      	lsls	r3, r3, #3
 801610e:	4a1b      	ldr	r2, [pc, #108]	; (801617c <etharp_output_to_arp_index+0x124>)
 8016110:	4413      	add	r3, r2
 8016112:	1d19      	adds	r1, r3, #4
 8016114:	79fa      	ldrb	r2, [r7, #7]
 8016116:	4613      	mov	r3, r2
 8016118:	005b      	lsls	r3, r3, #1
 801611a:	4413      	add	r3, r2
 801611c:	00db      	lsls	r3, r3, #3
 801611e:	3308      	adds	r3, #8
 8016120:	4a16      	ldr	r2, [pc, #88]	; (801617c <etharp_output_to_arp_index+0x124>)
 8016122:	4413      	add	r3, r2
 8016124:	3304      	adds	r3, #4
 8016126:	461a      	mov	r2, r3
 8016128:	68f8      	ldr	r0, [r7, #12]
 801612a:	f000 fafb 	bl	8016724 <etharp_request_dst>
 801612e:	4603      	mov	r3, r0
 8016130:	2b00      	cmp	r3, #0
 8016132:	d109      	bne.n	8016148 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8016134:	79fa      	ldrb	r2, [r7, #7]
 8016136:	4911      	ldr	r1, [pc, #68]	; (801617c <etharp_output_to_arp_index+0x124>)
 8016138:	4613      	mov	r3, r2
 801613a:	005b      	lsls	r3, r3, #1
 801613c:	4413      	add	r3, r2
 801613e:	00db      	lsls	r3, r3, #3
 8016140:	440b      	add	r3, r1
 8016142:	3314      	adds	r3, #20
 8016144:	2203      	movs	r2, #3
 8016146:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8016148:	68fb      	ldr	r3, [r7, #12]
 801614a:	f103 012a 	add.w	r1, r3, #42	; 0x2a
 801614e:	79fa      	ldrb	r2, [r7, #7]
 8016150:	4613      	mov	r3, r2
 8016152:	005b      	lsls	r3, r3, #1
 8016154:	4413      	add	r3, r2
 8016156:	00db      	lsls	r3, r3, #3
 8016158:	3308      	adds	r3, #8
 801615a:	4a08      	ldr	r2, [pc, #32]	; (801617c <etharp_output_to_arp_index+0x124>)
 801615c:	4413      	add	r3, r2
 801615e:	3304      	adds	r3, #4
 8016160:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8016164:	9200      	str	r2, [sp, #0]
 8016166:	460a      	mov	r2, r1
 8016168:	68b9      	ldr	r1, [r7, #8]
 801616a:	68f8      	ldr	r0, [r7, #12]
 801616c:	f001 fe58 	bl	8017e20 <ethernet_output>
 8016170:	4603      	mov	r3, r0
}
 8016172:	4618      	mov	r0, r3
 8016174:	3710      	adds	r7, #16
 8016176:	46bd      	mov	sp, r7
 8016178:	bd80      	pop	{r7, pc}
 801617a:	bf00      	nop
 801617c:	200004e8 	.word	0x200004e8
 8016180:	080206c0 	.word	0x080206c0
 8016184:	08020830 	.word	0x08020830
 8016188:	08020738 	.word	0x08020738

0801618c <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 801618c:	b580      	push	{r7, lr}
 801618e:	b08a      	sub	sp, #40	; 0x28
 8016190:	af02      	add	r7, sp, #8
 8016192:	60f8      	str	r0, [r7, #12]
 8016194:	60b9      	str	r1, [r7, #8]
 8016196:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8016198:	687b      	ldr	r3, [r7, #4]
 801619a:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 801619c:	68fb      	ldr	r3, [r7, #12]
 801619e:	2b00      	cmp	r3, #0
 80161a0:	d106      	bne.n	80161b0 <etharp_output+0x24>
 80161a2:	4b73      	ldr	r3, [pc, #460]	; (8016370 <etharp_output+0x1e4>)
 80161a4:	f240 321e 	movw	r2, #798	; 0x31e
 80161a8:	4972      	ldr	r1, [pc, #456]	; (8016374 <etharp_output+0x1e8>)
 80161aa:	4873      	ldr	r0, [pc, #460]	; (8016378 <etharp_output+0x1ec>)
 80161ac:	f002 fc0e 	bl	80189cc <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 80161b0:	68bb      	ldr	r3, [r7, #8]
 80161b2:	2b00      	cmp	r3, #0
 80161b4:	d106      	bne.n	80161c4 <etharp_output+0x38>
 80161b6:	4b6e      	ldr	r3, [pc, #440]	; (8016370 <etharp_output+0x1e4>)
 80161b8:	f240 321f 	movw	r2, #799	; 0x31f
 80161bc:	496f      	ldr	r1, [pc, #444]	; (801637c <etharp_output+0x1f0>)
 80161be:	486e      	ldr	r0, [pc, #440]	; (8016378 <etharp_output+0x1ec>)
 80161c0:	f002 fc04 	bl	80189cc <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 80161c4:	687b      	ldr	r3, [r7, #4]
 80161c6:	2b00      	cmp	r3, #0
 80161c8:	d106      	bne.n	80161d8 <etharp_output+0x4c>
 80161ca:	4b69      	ldr	r3, [pc, #420]	; (8016370 <etharp_output+0x1e4>)
 80161cc:	f44f 7248 	mov.w	r2, #800	; 0x320
 80161d0:	496b      	ldr	r1, [pc, #428]	; (8016380 <etharp_output+0x1f4>)
 80161d2:	4869      	ldr	r0, [pc, #420]	; (8016378 <etharp_output+0x1ec>)
 80161d4:	f002 fbfa 	bl	80189cc <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 80161d8:	687b      	ldr	r3, [r7, #4]
 80161da:	681b      	ldr	r3, [r3, #0]
 80161dc:	68f9      	ldr	r1, [r7, #12]
 80161de:	4618      	mov	r0, r3
 80161e0:	f000 ff16 	bl	8017010 <ip4_addr_isbroadcast_u32>
 80161e4:	4603      	mov	r3, r0
 80161e6:	2b00      	cmp	r3, #0
 80161e8:	d002      	beq.n	80161f0 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 80161ea:	4b66      	ldr	r3, [pc, #408]	; (8016384 <etharp_output+0x1f8>)
 80161ec:	61fb      	str	r3, [r7, #28]
 80161ee:	e0af      	b.n	8016350 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 80161f0:	687b      	ldr	r3, [r7, #4]
 80161f2:	681b      	ldr	r3, [r3, #0]
 80161f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80161f8:	2be0      	cmp	r3, #224	; 0xe0
 80161fa:	d118      	bne.n	801622e <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 80161fc:	2301      	movs	r3, #1
 80161fe:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8016200:	2300      	movs	r3, #0
 8016202:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8016204:	235e      	movs	r3, #94	; 0x5e
 8016206:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8016208:	687b      	ldr	r3, [r7, #4]
 801620a:	3301      	adds	r3, #1
 801620c:	781b      	ldrb	r3, [r3, #0]
 801620e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016212:	b2db      	uxtb	r3, r3
 8016214:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8016216:	687b      	ldr	r3, [r7, #4]
 8016218:	3302      	adds	r3, #2
 801621a:	781b      	ldrb	r3, [r3, #0]
 801621c:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801621e:	687b      	ldr	r3, [r7, #4]
 8016220:	3303      	adds	r3, #3
 8016222:	781b      	ldrb	r3, [r3, #0]
 8016224:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8016226:	f107 0310 	add.w	r3, r7, #16
 801622a:	61fb      	str	r3, [r7, #28]
 801622c:	e090      	b.n	8016350 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801622e:	687b      	ldr	r3, [r7, #4]
 8016230:	681a      	ldr	r2, [r3, #0]
 8016232:	68fb      	ldr	r3, [r7, #12]
 8016234:	3304      	adds	r3, #4
 8016236:	681b      	ldr	r3, [r3, #0]
 8016238:	405a      	eors	r2, r3
 801623a:	68fb      	ldr	r3, [r7, #12]
 801623c:	3308      	adds	r3, #8
 801623e:	681b      	ldr	r3, [r3, #0]
 8016240:	4013      	ands	r3, r2
 8016242:	2b00      	cmp	r3, #0
 8016244:	d012      	beq.n	801626c <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8016246:	687b      	ldr	r3, [r7, #4]
 8016248:	681b      	ldr	r3, [r3, #0]
 801624a:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801624c:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8016250:	4293      	cmp	r3, r2
 8016252:	d00b      	beq.n	801626c <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8016254:	68fb      	ldr	r3, [r7, #12]
 8016256:	330c      	adds	r3, #12
 8016258:	681b      	ldr	r3, [r3, #0]
 801625a:	2b00      	cmp	r3, #0
 801625c:	d003      	beq.n	8016266 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 801625e:	68fb      	ldr	r3, [r7, #12]
 8016260:	330c      	adds	r3, #12
 8016262:	61bb      	str	r3, [r7, #24]
 8016264:	e002      	b.n	801626c <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8016266:	f06f 0303 	mvn.w	r3, #3
 801626a:	e07d      	b.n	8016368 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801626c:	4b46      	ldr	r3, [pc, #280]	; (8016388 <etharp_output+0x1fc>)
 801626e:	781b      	ldrb	r3, [r3, #0]
 8016270:	4619      	mov	r1, r3
 8016272:	4a46      	ldr	r2, [pc, #280]	; (801638c <etharp_output+0x200>)
 8016274:	460b      	mov	r3, r1
 8016276:	005b      	lsls	r3, r3, #1
 8016278:	440b      	add	r3, r1
 801627a:	00db      	lsls	r3, r3, #3
 801627c:	4413      	add	r3, r2
 801627e:	3314      	adds	r3, #20
 8016280:	781b      	ldrb	r3, [r3, #0]
 8016282:	2b01      	cmp	r3, #1
 8016284:	d925      	bls.n	80162d2 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8016286:	4b40      	ldr	r3, [pc, #256]	; (8016388 <etharp_output+0x1fc>)
 8016288:	781b      	ldrb	r3, [r3, #0]
 801628a:	4619      	mov	r1, r3
 801628c:	4a3f      	ldr	r2, [pc, #252]	; (801638c <etharp_output+0x200>)
 801628e:	460b      	mov	r3, r1
 8016290:	005b      	lsls	r3, r3, #1
 8016292:	440b      	add	r3, r1
 8016294:	00db      	lsls	r3, r3, #3
 8016296:	4413      	add	r3, r2
 8016298:	3308      	adds	r3, #8
 801629a:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801629c:	68fa      	ldr	r2, [r7, #12]
 801629e:	429a      	cmp	r2, r3
 80162a0:	d117      	bne.n	80162d2 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 80162a2:	69bb      	ldr	r3, [r7, #24]
 80162a4:	681a      	ldr	r2, [r3, #0]
 80162a6:	4b38      	ldr	r3, [pc, #224]	; (8016388 <etharp_output+0x1fc>)
 80162a8:	781b      	ldrb	r3, [r3, #0]
 80162aa:	4618      	mov	r0, r3
 80162ac:	4937      	ldr	r1, [pc, #220]	; (801638c <etharp_output+0x200>)
 80162ae:	4603      	mov	r3, r0
 80162b0:	005b      	lsls	r3, r3, #1
 80162b2:	4403      	add	r3, r0
 80162b4:	00db      	lsls	r3, r3, #3
 80162b6:	440b      	add	r3, r1
 80162b8:	3304      	adds	r3, #4
 80162ba:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 80162bc:	429a      	cmp	r2, r3
 80162be:	d108      	bne.n	80162d2 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 80162c0:	4b31      	ldr	r3, [pc, #196]	; (8016388 <etharp_output+0x1fc>)
 80162c2:	781b      	ldrb	r3, [r3, #0]
 80162c4:	461a      	mov	r2, r3
 80162c6:	68b9      	ldr	r1, [r7, #8]
 80162c8:	68f8      	ldr	r0, [r7, #12]
 80162ca:	f7ff fec5 	bl	8016058 <etharp_output_to_arp_index>
 80162ce:	4603      	mov	r3, r0
 80162d0:	e04a      	b.n	8016368 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80162d2:	2300      	movs	r3, #0
 80162d4:	75fb      	strb	r3, [r7, #23]
 80162d6:	e031      	b.n	801633c <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80162d8:	7dfa      	ldrb	r2, [r7, #23]
 80162da:	492c      	ldr	r1, [pc, #176]	; (801638c <etharp_output+0x200>)
 80162dc:	4613      	mov	r3, r2
 80162de:	005b      	lsls	r3, r3, #1
 80162e0:	4413      	add	r3, r2
 80162e2:	00db      	lsls	r3, r3, #3
 80162e4:	440b      	add	r3, r1
 80162e6:	3314      	adds	r3, #20
 80162e8:	781b      	ldrb	r3, [r3, #0]
 80162ea:	2b01      	cmp	r3, #1
 80162ec:	d923      	bls.n	8016336 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 80162ee:	7dfa      	ldrb	r2, [r7, #23]
 80162f0:	4926      	ldr	r1, [pc, #152]	; (801638c <etharp_output+0x200>)
 80162f2:	4613      	mov	r3, r2
 80162f4:	005b      	lsls	r3, r3, #1
 80162f6:	4413      	add	r3, r2
 80162f8:	00db      	lsls	r3, r3, #3
 80162fa:	440b      	add	r3, r1
 80162fc:	3308      	adds	r3, #8
 80162fe:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8016300:	68fa      	ldr	r2, [r7, #12]
 8016302:	429a      	cmp	r2, r3
 8016304:	d117      	bne.n	8016336 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8016306:	69bb      	ldr	r3, [r7, #24]
 8016308:	6819      	ldr	r1, [r3, #0]
 801630a:	7dfa      	ldrb	r2, [r7, #23]
 801630c:	481f      	ldr	r0, [pc, #124]	; (801638c <etharp_output+0x200>)
 801630e:	4613      	mov	r3, r2
 8016310:	005b      	lsls	r3, r3, #1
 8016312:	4413      	add	r3, r2
 8016314:	00db      	lsls	r3, r3, #3
 8016316:	4403      	add	r3, r0
 8016318:	3304      	adds	r3, #4
 801631a:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 801631c:	4299      	cmp	r1, r3
 801631e:	d10a      	bne.n	8016336 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8016320:	4a19      	ldr	r2, [pc, #100]	; (8016388 <etharp_output+0x1fc>)
 8016322:	7dfb      	ldrb	r3, [r7, #23]
 8016324:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8016326:	7dfb      	ldrb	r3, [r7, #23]
 8016328:	461a      	mov	r2, r3
 801632a:	68b9      	ldr	r1, [r7, #8]
 801632c:	68f8      	ldr	r0, [r7, #12]
 801632e:	f7ff fe93 	bl	8016058 <etharp_output_to_arp_index>
 8016332:	4603      	mov	r3, r0
 8016334:	e018      	b.n	8016368 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8016336:	7dfb      	ldrb	r3, [r7, #23]
 8016338:	3301      	adds	r3, #1
 801633a:	75fb      	strb	r3, [r7, #23]
 801633c:	7dfb      	ldrb	r3, [r7, #23]
 801633e:	2b09      	cmp	r3, #9
 8016340:	d9ca      	bls.n	80162d8 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8016342:	68ba      	ldr	r2, [r7, #8]
 8016344:	69b9      	ldr	r1, [r7, #24]
 8016346:	68f8      	ldr	r0, [r7, #12]
 8016348:	f000 f822 	bl	8016390 <etharp_query>
 801634c:	4603      	mov	r3, r0
 801634e:	e00b      	b.n	8016368 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8016350:	68fb      	ldr	r3, [r7, #12]
 8016352:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 8016356:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801635a:	9300      	str	r3, [sp, #0]
 801635c:	69fb      	ldr	r3, [r7, #28]
 801635e:	68b9      	ldr	r1, [r7, #8]
 8016360:	68f8      	ldr	r0, [r7, #12]
 8016362:	f001 fd5d 	bl	8017e20 <ethernet_output>
 8016366:	4603      	mov	r3, r0
}
 8016368:	4618      	mov	r0, r3
 801636a:	3720      	adds	r7, #32
 801636c:	46bd      	mov	sp, r7
 801636e:	bd80      	pop	{r7, pc}
 8016370:	080206c0 	.word	0x080206c0
 8016374:	08020810 	.word	0x08020810
 8016378:	08020738 	.word	0x08020738
 801637c:	08020860 	.word	0x08020860
 8016380:	08020800 	.word	0x08020800
 8016384:	08020e94 	.word	0x08020e94
 8016388:	200005d8 	.word	0x200005d8
 801638c:	200004e8 	.word	0x200004e8

08016390 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8016390:	b580      	push	{r7, lr}
 8016392:	b08c      	sub	sp, #48	; 0x30
 8016394:	af02      	add	r7, sp, #8
 8016396:	60f8      	str	r0, [r7, #12]
 8016398:	60b9      	str	r1, [r7, #8]
 801639a:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 801639c:	68fb      	ldr	r3, [r7, #12]
 801639e:	332a      	adds	r3, #42	; 0x2a
 80163a0:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 80163a2:	23ff      	movs	r3, #255	; 0xff
 80163a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 80163a8:	2300      	movs	r3, #0
 80163aa:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80163ac:	68bb      	ldr	r3, [r7, #8]
 80163ae:	681b      	ldr	r3, [r3, #0]
 80163b0:	68f9      	ldr	r1, [r7, #12]
 80163b2:	4618      	mov	r0, r3
 80163b4:	f000 fe2c 	bl	8017010 <ip4_addr_isbroadcast_u32>
 80163b8:	4603      	mov	r3, r0
 80163ba:	2b00      	cmp	r3, #0
 80163bc:	d10c      	bne.n	80163d8 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80163be:	68bb      	ldr	r3, [r7, #8]
 80163c0:	681b      	ldr	r3, [r3, #0]
 80163c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80163c6:	2be0      	cmp	r3, #224	; 0xe0
 80163c8:	d006      	beq.n	80163d8 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80163ca:	68bb      	ldr	r3, [r7, #8]
 80163cc:	2b00      	cmp	r3, #0
 80163ce:	d003      	beq.n	80163d8 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 80163d0:	68bb      	ldr	r3, [r7, #8]
 80163d2:	681b      	ldr	r3, [r3, #0]
 80163d4:	2b00      	cmp	r3, #0
 80163d6:	d102      	bne.n	80163de <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80163d8:	f06f 030f 	mvn.w	r3, #15
 80163dc:	e101      	b.n	80165e2 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 80163de:	68fa      	ldr	r2, [r7, #12]
 80163e0:	2101      	movs	r1, #1
 80163e2:	68b8      	ldr	r0, [r7, #8]
 80163e4:	f7ff fb5c 	bl	8015aa0 <etharp_find_entry>
 80163e8:	4603      	mov	r3, r0
 80163ea:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 80163ec:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80163f0:	2b00      	cmp	r3, #0
 80163f2:	da02      	bge.n	80163fa <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 80163f4:	8a7b      	ldrh	r3, [r7, #18]
 80163f6:	b25b      	sxtb	r3, r3
 80163f8:	e0f3      	b.n	80165e2 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 80163fa:	8a7b      	ldrh	r3, [r7, #18]
 80163fc:	2b7e      	cmp	r3, #126	; 0x7e
 80163fe:	d906      	bls.n	801640e <etharp_query+0x7e>
 8016400:	4b7a      	ldr	r3, [pc, #488]	; (80165ec <etharp_query+0x25c>)
 8016402:	f240 32c1 	movw	r2, #961	; 0x3c1
 8016406:	497a      	ldr	r1, [pc, #488]	; (80165f0 <etharp_query+0x260>)
 8016408:	487a      	ldr	r0, [pc, #488]	; (80165f4 <etharp_query+0x264>)
 801640a:	f002 fadf 	bl	80189cc <iprintf>
  i = (netif_addr_idx_t)i_err;
 801640e:	8a7b      	ldrh	r3, [r7, #18]
 8016410:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8016412:	7c7a      	ldrb	r2, [r7, #17]
 8016414:	4978      	ldr	r1, [pc, #480]	; (80165f8 <etharp_query+0x268>)
 8016416:	4613      	mov	r3, r2
 8016418:	005b      	lsls	r3, r3, #1
 801641a:	4413      	add	r3, r2
 801641c:	00db      	lsls	r3, r3, #3
 801641e:	440b      	add	r3, r1
 8016420:	3314      	adds	r3, #20
 8016422:	781b      	ldrb	r3, [r3, #0]
 8016424:	2b00      	cmp	r3, #0
 8016426:	d115      	bne.n	8016454 <etharp_query+0xc4>
    is_new_entry = 1;
 8016428:	2301      	movs	r3, #1
 801642a:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 801642c:	7c7a      	ldrb	r2, [r7, #17]
 801642e:	4972      	ldr	r1, [pc, #456]	; (80165f8 <etharp_query+0x268>)
 8016430:	4613      	mov	r3, r2
 8016432:	005b      	lsls	r3, r3, #1
 8016434:	4413      	add	r3, r2
 8016436:	00db      	lsls	r3, r3, #3
 8016438:	440b      	add	r3, r1
 801643a:	3314      	adds	r3, #20
 801643c:	2201      	movs	r2, #1
 801643e:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8016440:	7c7a      	ldrb	r2, [r7, #17]
 8016442:	496d      	ldr	r1, [pc, #436]	; (80165f8 <etharp_query+0x268>)
 8016444:	4613      	mov	r3, r2
 8016446:	005b      	lsls	r3, r3, #1
 8016448:	4413      	add	r3, r2
 801644a:	00db      	lsls	r3, r3, #3
 801644c:	440b      	add	r3, r1
 801644e:	3308      	adds	r3, #8
 8016450:	68fa      	ldr	r2, [r7, #12]
 8016452:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8016454:	7c7a      	ldrb	r2, [r7, #17]
 8016456:	4968      	ldr	r1, [pc, #416]	; (80165f8 <etharp_query+0x268>)
 8016458:	4613      	mov	r3, r2
 801645a:	005b      	lsls	r3, r3, #1
 801645c:	4413      	add	r3, r2
 801645e:	00db      	lsls	r3, r3, #3
 8016460:	440b      	add	r3, r1
 8016462:	3314      	adds	r3, #20
 8016464:	781b      	ldrb	r3, [r3, #0]
 8016466:	2b01      	cmp	r3, #1
 8016468:	d011      	beq.n	801648e <etharp_query+0xfe>
 801646a:	7c7a      	ldrb	r2, [r7, #17]
 801646c:	4962      	ldr	r1, [pc, #392]	; (80165f8 <etharp_query+0x268>)
 801646e:	4613      	mov	r3, r2
 8016470:	005b      	lsls	r3, r3, #1
 8016472:	4413      	add	r3, r2
 8016474:	00db      	lsls	r3, r3, #3
 8016476:	440b      	add	r3, r1
 8016478:	3314      	adds	r3, #20
 801647a:	781b      	ldrb	r3, [r3, #0]
 801647c:	2b01      	cmp	r3, #1
 801647e:	d806      	bhi.n	801648e <etharp_query+0xfe>
 8016480:	4b5a      	ldr	r3, [pc, #360]	; (80165ec <etharp_query+0x25c>)
 8016482:	f240 32cd 	movw	r2, #973	; 0x3cd
 8016486:	495d      	ldr	r1, [pc, #372]	; (80165fc <etharp_query+0x26c>)
 8016488:	485a      	ldr	r0, [pc, #360]	; (80165f4 <etharp_query+0x264>)
 801648a:	f002 fa9f 	bl	80189cc <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801648e:	6a3b      	ldr	r3, [r7, #32]
 8016490:	2b00      	cmp	r3, #0
 8016492:	d102      	bne.n	801649a <etharp_query+0x10a>
 8016494:	687b      	ldr	r3, [r7, #4]
 8016496:	2b00      	cmp	r3, #0
 8016498:	d10c      	bne.n	80164b4 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801649a:	68b9      	ldr	r1, [r7, #8]
 801649c:	68f8      	ldr	r0, [r7, #12]
 801649e:	f000 f963 	bl	8016768 <etharp_request>
 80164a2:	4603      	mov	r3, r0
 80164a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 80164a8:	687b      	ldr	r3, [r7, #4]
 80164aa:	2b00      	cmp	r3, #0
 80164ac:	d102      	bne.n	80164b4 <etharp_query+0x124>
      return result;
 80164ae:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80164b2:	e096      	b.n	80165e2 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 80164b4:	687b      	ldr	r3, [r7, #4]
 80164b6:	2b00      	cmp	r3, #0
 80164b8:	d106      	bne.n	80164c8 <etharp_query+0x138>
 80164ba:	4b4c      	ldr	r3, [pc, #304]	; (80165ec <etharp_query+0x25c>)
 80164bc:	f240 32e1 	movw	r2, #993	; 0x3e1
 80164c0:	494f      	ldr	r1, [pc, #316]	; (8016600 <etharp_query+0x270>)
 80164c2:	484c      	ldr	r0, [pc, #304]	; (80165f4 <etharp_query+0x264>)
 80164c4:	f002 fa82 	bl	80189cc <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 80164c8:	7c7a      	ldrb	r2, [r7, #17]
 80164ca:	494b      	ldr	r1, [pc, #300]	; (80165f8 <etharp_query+0x268>)
 80164cc:	4613      	mov	r3, r2
 80164ce:	005b      	lsls	r3, r3, #1
 80164d0:	4413      	add	r3, r2
 80164d2:	00db      	lsls	r3, r3, #3
 80164d4:	440b      	add	r3, r1
 80164d6:	3314      	adds	r3, #20
 80164d8:	781b      	ldrb	r3, [r3, #0]
 80164da:	2b01      	cmp	r3, #1
 80164dc:	d917      	bls.n	801650e <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 80164de:	4a49      	ldr	r2, [pc, #292]	; (8016604 <etharp_query+0x274>)
 80164e0:	7c7b      	ldrb	r3, [r7, #17]
 80164e2:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 80164e4:	7c7a      	ldrb	r2, [r7, #17]
 80164e6:	4613      	mov	r3, r2
 80164e8:	005b      	lsls	r3, r3, #1
 80164ea:	4413      	add	r3, r2
 80164ec:	00db      	lsls	r3, r3, #3
 80164ee:	3308      	adds	r3, #8
 80164f0:	4a41      	ldr	r2, [pc, #260]	; (80165f8 <etharp_query+0x268>)
 80164f2:	4413      	add	r3, r2
 80164f4:	3304      	adds	r3, #4
 80164f6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80164fa:	9200      	str	r2, [sp, #0]
 80164fc:	697a      	ldr	r2, [r7, #20]
 80164fe:	6879      	ldr	r1, [r7, #4]
 8016500:	68f8      	ldr	r0, [r7, #12]
 8016502:	f001 fc8d 	bl	8017e20 <ethernet_output>
 8016506:	4603      	mov	r3, r0
 8016508:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801650c:	e067      	b.n	80165de <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801650e:	7c7a      	ldrb	r2, [r7, #17]
 8016510:	4939      	ldr	r1, [pc, #228]	; (80165f8 <etharp_query+0x268>)
 8016512:	4613      	mov	r3, r2
 8016514:	005b      	lsls	r3, r3, #1
 8016516:	4413      	add	r3, r2
 8016518:	00db      	lsls	r3, r3, #3
 801651a:	440b      	add	r3, r1
 801651c:	3314      	adds	r3, #20
 801651e:	781b      	ldrb	r3, [r3, #0]
 8016520:	2b01      	cmp	r3, #1
 8016522:	d15c      	bne.n	80165de <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8016524:	2300      	movs	r3, #0
 8016526:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8016528:	687b      	ldr	r3, [r7, #4]
 801652a:	61fb      	str	r3, [r7, #28]
    while (p) {
 801652c:	e01c      	b.n	8016568 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 801652e:	69fb      	ldr	r3, [r7, #28]
 8016530:	895a      	ldrh	r2, [r3, #10]
 8016532:	69fb      	ldr	r3, [r7, #28]
 8016534:	891b      	ldrh	r3, [r3, #8]
 8016536:	429a      	cmp	r2, r3
 8016538:	d10a      	bne.n	8016550 <etharp_query+0x1c0>
 801653a:	69fb      	ldr	r3, [r7, #28]
 801653c:	681b      	ldr	r3, [r3, #0]
 801653e:	2b00      	cmp	r3, #0
 8016540:	d006      	beq.n	8016550 <etharp_query+0x1c0>
 8016542:	4b2a      	ldr	r3, [pc, #168]	; (80165ec <etharp_query+0x25c>)
 8016544:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8016548:	492f      	ldr	r1, [pc, #188]	; (8016608 <etharp_query+0x278>)
 801654a:	482a      	ldr	r0, [pc, #168]	; (80165f4 <etharp_query+0x264>)
 801654c:	f002 fa3e 	bl	80189cc <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8016550:	69fb      	ldr	r3, [r7, #28]
 8016552:	7b1b      	ldrb	r3, [r3, #12]
 8016554:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016558:	2b00      	cmp	r3, #0
 801655a:	d002      	beq.n	8016562 <etharp_query+0x1d2>
        copy_needed = 1;
 801655c:	2301      	movs	r3, #1
 801655e:	61bb      	str	r3, [r7, #24]
        break;
 8016560:	e005      	b.n	801656e <etharp_query+0x1de>
      }
      p = p->next;
 8016562:	69fb      	ldr	r3, [r7, #28]
 8016564:	681b      	ldr	r3, [r3, #0]
 8016566:	61fb      	str	r3, [r7, #28]
    while (p) {
 8016568:	69fb      	ldr	r3, [r7, #28]
 801656a:	2b00      	cmp	r3, #0
 801656c:	d1df      	bne.n	801652e <etharp_query+0x19e>
    }
    if (copy_needed) {
 801656e:	69bb      	ldr	r3, [r7, #24]
 8016570:	2b00      	cmp	r3, #0
 8016572:	d007      	beq.n	8016584 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8016574:	687a      	ldr	r2, [r7, #4]
 8016576:	f44f 7120 	mov.w	r1, #640	; 0x280
 801657a:	200e      	movs	r0, #14
 801657c:	f7f7 fc14 	bl	800dda8 <pbuf_clone>
 8016580:	61f8      	str	r0, [r7, #28]
 8016582:	e004      	b.n	801658e <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8016584:	687b      	ldr	r3, [r7, #4]
 8016586:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8016588:	69f8      	ldr	r0, [r7, #28]
 801658a:	f7f7 fa41 	bl	800da10 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 801658e:	69fb      	ldr	r3, [r7, #28]
 8016590:	2b00      	cmp	r3, #0
 8016592:	d021      	beq.n	80165d8 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8016594:	7c7a      	ldrb	r2, [r7, #17]
 8016596:	4918      	ldr	r1, [pc, #96]	; (80165f8 <etharp_query+0x268>)
 8016598:	4613      	mov	r3, r2
 801659a:	005b      	lsls	r3, r3, #1
 801659c:	4413      	add	r3, r2
 801659e:	00db      	lsls	r3, r3, #3
 80165a0:	440b      	add	r3, r1
 80165a2:	681b      	ldr	r3, [r3, #0]
 80165a4:	2b00      	cmp	r3, #0
 80165a6:	d00a      	beq.n	80165be <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 80165a8:	7c7a      	ldrb	r2, [r7, #17]
 80165aa:	4913      	ldr	r1, [pc, #76]	; (80165f8 <etharp_query+0x268>)
 80165ac:	4613      	mov	r3, r2
 80165ae:	005b      	lsls	r3, r3, #1
 80165b0:	4413      	add	r3, r2
 80165b2:	00db      	lsls	r3, r3, #3
 80165b4:	440b      	add	r3, r1
 80165b6:	681b      	ldr	r3, [r3, #0]
 80165b8:	4618      	mov	r0, r3
 80165ba:	f7f7 f989 	bl	800d8d0 <pbuf_free>
      }
      arp_table[i].q = p;
 80165be:	7c7a      	ldrb	r2, [r7, #17]
 80165c0:	490d      	ldr	r1, [pc, #52]	; (80165f8 <etharp_query+0x268>)
 80165c2:	4613      	mov	r3, r2
 80165c4:	005b      	lsls	r3, r3, #1
 80165c6:	4413      	add	r3, r2
 80165c8:	00db      	lsls	r3, r3, #3
 80165ca:	440b      	add	r3, r1
 80165cc:	69fa      	ldr	r2, [r7, #28]
 80165ce:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 80165d0:	2300      	movs	r3, #0
 80165d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80165d6:	e002      	b.n	80165de <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 80165d8:	23ff      	movs	r3, #255	; 0xff
 80165da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 80165de:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80165e2:	4618      	mov	r0, r3
 80165e4:	3728      	adds	r7, #40	; 0x28
 80165e6:	46bd      	mov	sp, r7
 80165e8:	bd80      	pop	{r7, pc}
 80165ea:	bf00      	nop
 80165ec:	080206c0 	.word	0x080206c0
 80165f0:	0802086c 	.word	0x0802086c
 80165f4:	08020738 	.word	0x08020738
 80165f8:	200004e8 	.word	0x200004e8
 80165fc:	0802087c 	.word	0x0802087c
 8016600:	08020860 	.word	0x08020860
 8016604:	200005d8 	.word	0x200005d8
 8016608:	080208a4 	.word	0x080208a4

0801660c <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 801660c:	b580      	push	{r7, lr}
 801660e:	b08a      	sub	sp, #40	; 0x28
 8016610:	af02      	add	r7, sp, #8
 8016612:	60f8      	str	r0, [r7, #12]
 8016614:	60b9      	str	r1, [r7, #8]
 8016616:	607a      	str	r2, [r7, #4]
 8016618:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801661a:	2300      	movs	r3, #0
 801661c:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801661e:	68fb      	ldr	r3, [r7, #12]
 8016620:	2b00      	cmp	r3, #0
 8016622:	d106      	bne.n	8016632 <etharp_raw+0x26>
 8016624:	4b3a      	ldr	r3, [pc, #232]	; (8016710 <etharp_raw+0x104>)
 8016626:	f240 4257 	movw	r2, #1111	; 0x457
 801662a:	493a      	ldr	r1, [pc, #232]	; (8016714 <etharp_raw+0x108>)
 801662c:	483a      	ldr	r0, [pc, #232]	; (8016718 <etharp_raw+0x10c>)
 801662e:	f002 f9cd 	bl	80189cc <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8016632:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016636:	211c      	movs	r1, #28
 8016638:	200e      	movs	r0, #14
 801663a:	f7f6 fe65 	bl	800d308 <pbuf_alloc>
 801663e:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8016640:	69bb      	ldr	r3, [r7, #24]
 8016642:	2b00      	cmp	r3, #0
 8016644:	d102      	bne.n	801664c <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8016646:	f04f 33ff 	mov.w	r3, #4294967295
 801664a:	e05d      	b.n	8016708 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 801664c:	69bb      	ldr	r3, [r7, #24]
 801664e:	895b      	ldrh	r3, [r3, #10]
 8016650:	2b1b      	cmp	r3, #27
 8016652:	d806      	bhi.n	8016662 <etharp_raw+0x56>
 8016654:	4b2e      	ldr	r3, [pc, #184]	; (8016710 <etharp_raw+0x104>)
 8016656:	f240 4262 	movw	r2, #1122	; 0x462
 801665a:	4930      	ldr	r1, [pc, #192]	; (801671c <etharp_raw+0x110>)
 801665c:	482e      	ldr	r0, [pc, #184]	; (8016718 <etharp_raw+0x10c>)
 801665e:	f002 f9b5 	bl	80189cc <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8016662:	69bb      	ldr	r3, [r7, #24]
 8016664:	685b      	ldr	r3, [r3, #4]
 8016666:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8016668:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801666a:	4618      	mov	r0, r3
 801666c:	f7f5 fe94 	bl	800c398 <lwip_htons>
 8016670:	4603      	mov	r3, r0
 8016672:	461a      	mov	r2, r3
 8016674:	697b      	ldr	r3, [r7, #20]
 8016676:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8016678:	68fb      	ldr	r3, [r7, #12]
 801667a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801667e:	2b06      	cmp	r3, #6
 8016680:	d006      	beq.n	8016690 <etharp_raw+0x84>
 8016682:	4b23      	ldr	r3, [pc, #140]	; (8016710 <etharp_raw+0x104>)
 8016684:	f240 4269 	movw	r2, #1129	; 0x469
 8016688:	4925      	ldr	r1, [pc, #148]	; (8016720 <etharp_raw+0x114>)
 801668a:	4823      	ldr	r0, [pc, #140]	; (8016718 <etharp_raw+0x10c>)
 801668c:	f002 f99e 	bl	80189cc <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8016690:	697b      	ldr	r3, [r7, #20]
 8016692:	3308      	adds	r3, #8
 8016694:	2206      	movs	r2, #6
 8016696:	6839      	ldr	r1, [r7, #0]
 8016698:	4618      	mov	r0, r3
 801669a:	f001 fc53 	bl	8017f44 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 801669e:	697b      	ldr	r3, [r7, #20]
 80166a0:	3312      	adds	r3, #18
 80166a2:	2206      	movs	r2, #6
 80166a4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80166a6:	4618      	mov	r0, r3
 80166a8:	f001 fc4c 	bl	8017f44 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 80166ac:	697b      	ldr	r3, [r7, #20]
 80166ae:	330e      	adds	r3, #14
 80166b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80166b2:	6812      	ldr	r2, [r2, #0]
 80166b4:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 80166b6:	697b      	ldr	r3, [r7, #20]
 80166b8:	3318      	adds	r3, #24
 80166ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80166bc:	6812      	ldr	r2, [r2, #0]
 80166be:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 80166c0:	697b      	ldr	r3, [r7, #20]
 80166c2:	2200      	movs	r2, #0
 80166c4:	701a      	strb	r2, [r3, #0]
 80166c6:	2200      	movs	r2, #0
 80166c8:	f042 0201 	orr.w	r2, r2, #1
 80166cc:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 80166ce:	697b      	ldr	r3, [r7, #20]
 80166d0:	2200      	movs	r2, #0
 80166d2:	f042 0208 	orr.w	r2, r2, #8
 80166d6:	709a      	strb	r2, [r3, #2]
 80166d8:	2200      	movs	r2, #0
 80166da:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 80166dc:	697b      	ldr	r3, [r7, #20]
 80166de:	2206      	movs	r2, #6
 80166e0:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 80166e2:	697b      	ldr	r3, [r7, #20]
 80166e4:	2204      	movs	r2, #4
 80166e6:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 80166e8:	f640 0306 	movw	r3, #2054	; 0x806
 80166ec:	9300      	str	r3, [sp, #0]
 80166ee:	687b      	ldr	r3, [r7, #4]
 80166f0:	68ba      	ldr	r2, [r7, #8]
 80166f2:	69b9      	ldr	r1, [r7, #24]
 80166f4:	68f8      	ldr	r0, [r7, #12]
 80166f6:	f001 fb93 	bl	8017e20 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 80166fa:	69b8      	ldr	r0, [r7, #24]
 80166fc:	f7f7 f8e8 	bl	800d8d0 <pbuf_free>
  p = NULL;
 8016700:	2300      	movs	r3, #0
 8016702:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8016704:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8016708:	4618      	mov	r0, r3
 801670a:	3720      	adds	r7, #32
 801670c:	46bd      	mov	sp, r7
 801670e:	bd80      	pop	{r7, pc}
 8016710:	080206c0 	.word	0x080206c0
 8016714:	08020810 	.word	0x08020810
 8016718:	08020738 	.word	0x08020738
 801671c:	080208c0 	.word	0x080208c0
 8016720:	080208f4 	.word	0x080208f4

08016724 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8016724:	b580      	push	{r7, lr}
 8016726:	b088      	sub	sp, #32
 8016728:	af04      	add	r7, sp, #16
 801672a:	60f8      	str	r0, [r7, #12]
 801672c:	60b9      	str	r1, [r7, #8]
 801672e:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8016730:	68fb      	ldr	r3, [r7, #12]
 8016732:	f103 012a 	add.w	r1, r3, #42	; 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8016736:	68fb      	ldr	r3, [r7, #12]
 8016738:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 801673c:	68fb      	ldr	r3, [r7, #12]
 801673e:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8016740:	2201      	movs	r2, #1
 8016742:	9203      	str	r2, [sp, #12]
 8016744:	68ba      	ldr	r2, [r7, #8]
 8016746:	9202      	str	r2, [sp, #8]
 8016748:	4a06      	ldr	r2, [pc, #24]	; (8016764 <etharp_request_dst+0x40>)
 801674a:	9201      	str	r2, [sp, #4]
 801674c:	9300      	str	r3, [sp, #0]
 801674e:	4603      	mov	r3, r0
 8016750:	687a      	ldr	r2, [r7, #4]
 8016752:	68f8      	ldr	r0, [r7, #12]
 8016754:	f7ff ff5a 	bl	801660c <etharp_raw>
 8016758:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801675a:	4618      	mov	r0, r3
 801675c:	3710      	adds	r7, #16
 801675e:	46bd      	mov	sp, r7
 8016760:	bd80      	pop	{r7, pc}
 8016762:	bf00      	nop
 8016764:	08020e9c 	.word	0x08020e9c

08016768 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8016768:	b580      	push	{r7, lr}
 801676a:	b082      	sub	sp, #8
 801676c:	af00      	add	r7, sp, #0
 801676e:	6078      	str	r0, [r7, #4]
 8016770:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8016772:	4a05      	ldr	r2, [pc, #20]	; (8016788 <etharp_request+0x20>)
 8016774:	6839      	ldr	r1, [r7, #0]
 8016776:	6878      	ldr	r0, [r7, #4]
 8016778:	f7ff ffd4 	bl	8016724 <etharp_request_dst>
 801677c:	4603      	mov	r3, r0
}
 801677e:	4618      	mov	r0, r3
 8016780:	3708      	adds	r7, #8
 8016782:	46bd      	mov	sp, r7
 8016784:	bd80      	pop	{r7, pc}
 8016786:	bf00      	nop
 8016788:	08020e94 	.word	0x08020e94

0801678c <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 801678c:	b580      	push	{r7, lr}
 801678e:	b08e      	sub	sp, #56	; 0x38
 8016790:	af04      	add	r7, sp, #16
 8016792:	6078      	str	r0, [r7, #4]
 8016794:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8016796:	4b79      	ldr	r3, [pc, #484]	; (801697c <icmp_input+0x1f0>)
 8016798:	689b      	ldr	r3, [r3, #8]
 801679a:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 801679c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801679e:	781b      	ldrb	r3, [r3, #0]
 80167a0:	f003 030f 	and.w	r3, r3, #15
 80167a4:	b2db      	uxtb	r3, r3
 80167a6:	009b      	lsls	r3, r3, #2
 80167a8:	b2db      	uxtb	r3, r3
 80167aa:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 80167ac:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80167ae:	2b13      	cmp	r3, #19
 80167b0:	f240 80cd 	bls.w	801694e <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 80167b4:	687b      	ldr	r3, [r7, #4]
 80167b6:	895b      	ldrh	r3, [r3, #10]
 80167b8:	2b03      	cmp	r3, #3
 80167ba:	f240 80ca 	bls.w	8016952 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 80167be:	687b      	ldr	r3, [r7, #4]
 80167c0:	685b      	ldr	r3, [r3, #4]
 80167c2:	781b      	ldrb	r3, [r3, #0]
 80167c4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 80167c8:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80167cc:	2b00      	cmp	r3, #0
 80167ce:	f000 80b7 	beq.w	8016940 <icmp_input+0x1b4>
 80167d2:	2b08      	cmp	r3, #8
 80167d4:	f040 80b7 	bne.w	8016946 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 80167d8:	4b69      	ldr	r3, [pc, #420]	; (8016980 <icmp_input+0x1f4>)
 80167da:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80167dc:	4b67      	ldr	r3, [pc, #412]	; (801697c <icmp_input+0x1f0>)
 80167de:	695b      	ldr	r3, [r3, #20]
 80167e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80167e4:	2be0      	cmp	r3, #224	; 0xe0
 80167e6:	f000 80bb 	beq.w	8016960 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 80167ea:	4b64      	ldr	r3, [pc, #400]	; (801697c <icmp_input+0x1f0>)
 80167ec:	695b      	ldr	r3, [r3, #20]
 80167ee:	4a63      	ldr	r2, [pc, #396]	; (801697c <icmp_input+0x1f0>)
 80167f0:	6812      	ldr	r2, [r2, #0]
 80167f2:	4611      	mov	r1, r2
 80167f4:	4618      	mov	r0, r3
 80167f6:	f000 fc0b 	bl	8017010 <ip4_addr_isbroadcast_u32>
 80167fa:	4603      	mov	r3, r0
 80167fc:	2b00      	cmp	r3, #0
 80167fe:	f040 80b1 	bne.w	8016964 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8016802:	687b      	ldr	r3, [r7, #4]
 8016804:	891b      	ldrh	r3, [r3, #8]
 8016806:	2b07      	cmp	r3, #7
 8016808:	f240 80a5 	bls.w	8016956 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801680c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801680e:	330e      	adds	r3, #14
 8016810:	4619      	mov	r1, r3
 8016812:	6878      	ldr	r0, [r7, #4]
 8016814:	f7f6 ffc6 	bl	800d7a4 <pbuf_add_header>
 8016818:	4603      	mov	r3, r0
 801681a:	2b00      	cmp	r3, #0
 801681c:	d04b      	beq.n	80168b6 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 801681e:	687b      	ldr	r3, [r7, #4]
 8016820:	891a      	ldrh	r2, [r3, #8]
 8016822:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016824:	4413      	add	r3, r2
 8016826:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8016828:	687b      	ldr	r3, [r7, #4]
 801682a:	891b      	ldrh	r3, [r3, #8]
 801682c:	8b7a      	ldrh	r2, [r7, #26]
 801682e:	429a      	cmp	r2, r3
 8016830:	f0c0 809a 	bcc.w	8016968 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8016834:	8b7b      	ldrh	r3, [r7, #26]
 8016836:	f44f 7220 	mov.w	r2, #640	; 0x280
 801683a:	4619      	mov	r1, r3
 801683c:	200e      	movs	r0, #14
 801683e:	f7f6 fd63 	bl	800d308 <pbuf_alloc>
 8016842:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8016844:	697b      	ldr	r3, [r7, #20]
 8016846:	2b00      	cmp	r3, #0
 8016848:	f000 8090 	beq.w	801696c <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 801684c:	697b      	ldr	r3, [r7, #20]
 801684e:	895b      	ldrh	r3, [r3, #10]
 8016850:	461a      	mov	r2, r3
 8016852:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016854:	3308      	adds	r3, #8
 8016856:	429a      	cmp	r2, r3
 8016858:	d203      	bcs.n	8016862 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 801685a:	6978      	ldr	r0, [r7, #20]
 801685c:	f7f7 f838 	bl	800d8d0 <pbuf_free>
          goto icmperr;
 8016860:	e085      	b.n	801696e <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8016862:	697b      	ldr	r3, [r7, #20]
 8016864:	685b      	ldr	r3, [r3, #4]
 8016866:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8016868:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801686a:	4618      	mov	r0, r3
 801686c:	f001 fb6a 	bl	8017f44 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8016870:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016872:	4619      	mov	r1, r3
 8016874:	6978      	ldr	r0, [r7, #20]
 8016876:	f7f6 ffa5 	bl	800d7c4 <pbuf_remove_header>
 801687a:	4603      	mov	r3, r0
 801687c:	2b00      	cmp	r3, #0
 801687e:	d009      	beq.n	8016894 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8016880:	4b40      	ldr	r3, [pc, #256]	; (8016984 <icmp_input+0x1f8>)
 8016882:	22b6      	movs	r2, #182	; 0xb6
 8016884:	4940      	ldr	r1, [pc, #256]	; (8016988 <icmp_input+0x1fc>)
 8016886:	4841      	ldr	r0, [pc, #260]	; (801698c <icmp_input+0x200>)
 8016888:	f002 f8a0 	bl	80189cc <iprintf>
          pbuf_free(r);
 801688c:	6978      	ldr	r0, [r7, #20]
 801688e:	f7f7 f81f 	bl	800d8d0 <pbuf_free>
          goto icmperr;
 8016892:	e06c      	b.n	801696e <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8016894:	6879      	ldr	r1, [r7, #4]
 8016896:	6978      	ldr	r0, [r7, #20]
 8016898:	f7f7 f942 	bl	800db20 <pbuf_copy>
 801689c:	4603      	mov	r3, r0
 801689e:	2b00      	cmp	r3, #0
 80168a0:	d003      	beq.n	80168aa <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 80168a2:	6978      	ldr	r0, [r7, #20]
 80168a4:	f7f7 f814 	bl	800d8d0 <pbuf_free>
          goto icmperr;
 80168a8:	e061      	b.n	801696e <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 80168aa:	6878      	ldr	r0, [r7, #4]
 80168ac:	f7f7 f810 	bl	800d8d0 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 80168b0:	697b      	ldr	r3, [r7, #20]
 80168b2:	607b      	str	r3, [r7, #4]
 80168b4:	e00f      	b.n	80168d6 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80168b6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80168b8:	330e      	adds	r3, #14
 80168ba:	4619      	mov	r1, r3
 80168bc:	6878      	ldr	r0, [r7, #4]
 80168be:	f7f6 ff81 	bl	800d7c4 <pbuf_remove_header>
 80168c2:	4603      	mov	r3, r0
 80168c4:	2b00      	cmp	r3, #0
 80168c6:	d006      	beq.n	80168d6 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 80168c8:	4b2e      	ldr	r3, [pc, #184]	; (8016984 <icmp_input+0x1f8>)
 80168ca:	22c7      	movs	r2, #199	; 0xc7
 80168cc:	4930      	ldr	r1, [pc, #192]	; (8016990 <icmp_input+0x204>)
 80168ce:	482f      	ldr	r0, [pc, #188]	; (801698c <icmp_input+0x200>)
 80168d0:	f002 f87c 	bl	80189cc <iprintf>
          goto icmperr;
 80168d4:	e04b      	b.n	801696e <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 80168d6:	687b      	ldr	r3, [r7, #4]
 80168d8:	685b      	ldr	r3, [r3, #4]
 80168da:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 80168dc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80168de:	4619      	mov	r1, r3
 80168e0:	6878      	ldr	r0, [r7, #4]
 80168e2:	f7f6 ff5f 	bl	800d7a4 <pbuf_add_header>
 80168e6:	4603      	mov	r3, r0
 80168e8:	2b00      	cmp	r3, #0
 80168ea:	d12b      	bne.n	8016944 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 80168ec:	687b      	ldr	r3, [r7, #4]
 80168ee:	685b      	ldr	r3, [r3, #4]
 80168f0:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 80168f2:	69fb      	ldr	r3, [r7, #28]
 80168f4:	681a      	ldr	r2, [r3, #0]
 80168f6:	68fb      	ldr	r3, [r7, #12]
 80168f8:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 80168fa:	4b20      	ldr	r3, [pc, #128]	; (801697c <icmp_input+0x1f0>)
 80168fc:	691a      	ldr	r2, [r3, #16]
 80168fe:	68fb      	ldr	r3, [r7, #12]
 8016900:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8016902:	693b      	ldr	r3, [r7, #16]
 8016904:	2200      	movs	r2, #0
 8016906:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8016908:	693b      	ldr	r3, [r7, #16]
 801690a:	2200      	movs	r2, #0
 801690c:	709a      	strb	r2, [r3, #2]
 801690e:	2200      	movs	r2, #0
 8016910:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8016912:	68fb      	ldr	r3, [r7, #12]
 8016914:	22ff      	movs	r2, #255	; 0xff
 8016916:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8016918:	68fb      	ldr	r3, [r7, #12]
 801691a:	2200      	movs	r2, #0
 801691c:	729a      	strb	r2, [r3, #10]
 801691e:	2200      	movs	r2, #0
 8016920:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8016922:	683b      	ldr	r3, [r7, #0]
 8016924:	9302      	str	r3, [sp, #8]
 8016926:	2301      	movs	r3, #1
 8016928:	9301      	str	r3, [sp, #4]
 801692a:	2300      	movs	r3, #0
 801692c:	9300      	str	r3, [sp, #0]
 801692e:	23ff      	movs	r3, #255	; 0xff
 8016930:	2200      	movs	r2, #0
 8016932:	69f9      	ldr	r1, [r7, #28]
 8016934:	6878      	ldr	r0, [r7, #4]
 8016936:	f000 fa93 	bl	8016e60 <ip4_output_if>
 801693a:	4603      	mov	r3, r0
 801693c:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 801693e:	e001      	b.n	8016944 <icmp_input+0x1b8>
      break;
 8016940:	bf00      	nop
 8016942:	e000      	b.n	8016946 <icmp_input+0x1ba>
      break;
 8016944:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8016946:	6878      	ldr	r0, [r7, #4]
 8016948:	f7f6 ffc2 	bl	800d8d0 <pbuf_free>
  return;
 801694c:	e013      	b.n	8016976 <icmp_input+0x1ea>
    goto lenerr;
 801694e:	bf00      	nop
 8016950:	e002      	b.n	8016958 <icmp_input+0x1cc>
    goto lenerr;
 8016952:	bf00      	nop
 8016954:	e000      	b.n	8016958 <icmp_input+0x1cc>
        goto lenerr;
 8016956:	bf00      	nop
lenerr:
  pbuf_free(p);
 8016958:	6878      	ldr	r0, [r7, #4]
 801695a:	f7f6 ffb9 	bl	800d8d0 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801695e:	e00a      	b.n	8016976 <icmp_input+0x1ea>
        goto icmperr;
 8016960:	bf00      	nop
 8016962:	e004      	b.n	801696e <icmp_input+0x1e2>
        goto icmperr;
 8016964:	bf00      	nop
 8016966:	e002      	b.n	801696e <icmp_input+0x1e2>
          goto icmperr;
 8016968:	bf00      	nop
 801696a:	e000      	b.n	801696e <icmp_input+0x1e2>
          goto icmperr;
 801696c:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 801696e:	6878      	ldr	r0, [r7, #4]
 8016970:	f7f6 ffae 	bl	800d8d0 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8016974:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8016976:	3728      	adds	r7, #40	; 0x28
 8016978:	46bd      	mov	sp, r7
 801697a:	bd80      	pop	{r7, pc}
 801697c:	2000402c 	.word	0x2000402c
 8016980:	20004040 	.word	0x20004040
 8016984:	08020938 	.word	0x08020938
 8016988:	08020970 	.word	0x08020970
 801698c:	080209a8 	.word	0x080209a8
 8016990:	080209d0 	.word	0x080209d0

08016994 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8016994:	b580      	push	{r7, lr}
 8016996:	b082      	sub	sp, #8
 8016998:	af00      	add	r7, sp, #0
 801699a:	6078      	str	r0, [r7, #4]
 801699c:	460b      	mov	r3, r1
 801699e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 80169a0:	78fb      	ldrb	r3, [r7, #3]
 80169a2:	461a      	mov	r2, r3
 80169a4:	2103      	movs	r1, #3
 80169a6:	6878      	ldr	r0, [r7, #4]
 80169a8:	f000 f814 	bl	80169d4 <icmp_send_response>
}
 80169ac:	bf00      	nop
 80169ae:	3708      	adds	r7, #8
 80169b0:	46bd      	mov	sp, r7
 80169b2:	bd80      	pop	{r7, pc}

080169b4 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 80169b4:	b580      	push	{r7, lr}
 80169b6:	b082      	sub	sp, #8
 80169b8:	af00      	add	r7, sp, #0
 80169ba:	6078      	str	r0, [r7, #4]
 80169bc:	460b      	mov	r3, r1
 80169be:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 80169c0:	78fb      	ldrb	r3, [r7, #3]
 80169c2:	461a      	mov	r2, r3
 80169c4:	210b      	movs	r1, #11
 80169c6:	6878      	ldr	r0, [r7, #4]
 80169c8:	f000 f804 	bl	80169d4 <icmp_send_response>
}
 80169cc:	bf00      	nop
 80169ce:	3708      	adds	r7, #8
 80169d0:	46bd      	mov	sp, r7
 80169d2:	bd80      	pop	{r7, pc}

080169d4 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 80169d4:	b580      	push	{r7, lr}
 80169d6:	b08c      	sub	sp, #48	; 0x30
 80169d8:	af04      	add	r7, sp, #16
 80169da:	6078      	str	r0, [r7, #4]
 80169dc:	460b      	mov	r3, r1
 80169de:	70fb      	strb	r3, [r7, #3]
 80169e0:	4613      	mov	r3, r2
 80169e2:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 80169e4:	f44f 7220 	mov.w	r2, #640	; 0x280
 80169e8:	2124      	movs	r1, #36	; 0x24
 80169ea:	2022      	movs	r0, #34	; 0x22
 80169ec:	f7f6 fc8c 	bl	800d308 <pbuf_alloc>
 80169f0:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 80169f2:	69fb      	ldr	r3, [r7, #28]
 80169f4:	2b00      	cmp	r3, #0
 80169f6:	d04c      	beq.n	8016a92 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 80169f8:	69fb      	ldr	r3, [r7, #28]
 80169fa:	895b      	ldrh	r3, [r3, #10]
 80169fc:	2b23      	cmp	r3, #35	; 0x23
 80169fe:	d806      	bhi.n	8016a0e <icmp_send_response+0x3a>
 8016a00:	4b26      	ldr	r3, [pc, #152]	; (8016a9c <icmp_send_response+0xc8>)
 8016a02:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8016a06:	4926      	ldr	r1, [pc, #152]	; (8016aa0 <icmp_send_response+0xcc>)
 8016a08:	4826      	ldr	r0, [pc, #152]	; (8016aa4 <icmp_send_response+0xd0>)
 8016a0a:	f001 ffdf 	bl	80189cc <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8016a0e:	687b      	ldr	r3, [r7, #4]
 8016a10:	685b      	ldr	r3, [r3, #4]
 8016a12:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8016a14:	69fb      	ldr	r3, [r7, #28]
 8016a16:	685b      	ldr	r3, [r3, #4]
 8016a18:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8016a1a:	697b      	ldr	r3, [r7, #20]
 8016a1c:	78fa      	ldrb	r2, [r7, #3]
 8016a1e:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8016a20:	697b      	ldr	r3, [r7, #20]
 8016a22:	78ba      	ldrb	r2, [r7, #2]
 8016a24:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8016a26:	697b      	ldr	r3, [r7, #20]
 8016a28:	2200      	movs	r2, #0
 8016a2a:	711a      	strb	r2, [r3, #4]
 8016a2c:	2200      	movs	r2, #0
 8016a2e:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8016a30:	697b      	ldr	r3, [r7, #20]
 8016a32:	2200      	movs	r2, #0
 8016a34:	719a      	strb	r2, [r3, #6]
 8016a36:	2200      	movs	r2, #0
 8016a38:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8016a3a:	69fb      	ldr	r3, [r7, #28]
 8016a3c:	685b      	ldr	r3, [r3, #4]
 8016a3e:	f103 0008 	add.w	r0, r3, #8
 8016a42:	687b      	ldr	r3, [r7, #4]
 8016a44:	685b      	ldr	r3, [r3, #4]
 8016a46:	221c      	movs	r2, #28
 8016a48:	4619      	mov	r1, r3
 8016a4a:	f001 fa7b 	bl	8017f44 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8016a4e:	69bb      	ldr	r3, [r7, #24]
 8016a50:	68db      	ldr	r3, [r3, #12]
 8016a52:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8016a54:	f107 030c 	add.w	r3, r7, #12
 8016a58:	4618      	mov	r0, r3
 8016a5a:	f000 f825 	bl	8016aa8 <ip4_route>
 8016a5e:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8016a60:	693b      	ldr	r3, [r7, #16]
 8016a62:	2b00      	cmp	r3, #0
 8016a64:	d011      	beq.n	8016a8a <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8016a66:	697b      	ldr	r3, [r7, #20]
 8016a68:	2200      	movs	r2, #0
 8016a6a:	709a      	strb	r2, [r3, #2]
 8016a6c:	2200      	movs	r2, #0
 8016a6e:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8016a70:	f107 020c 	add.w	r2, r7, #12
 8016a74:	693b      	ldr	r3, [r7, #16]
 8016a76:	9302      	str	r3, [sp, #8]
 8016a78:	2301      	movs	r3, #1
 8016a7a:	9301      	str	r3, [sp, #4]
 8016a7c:	2300      	movs	r3, #0
 8016a7e:	9300      	str	r3, [sp, #0]
 8016a80:	23ff      	movs	r3, #255	; 0xff
 8016a82:	2100      	movs	r1, #0
 8016a84:	69f8      	ldr	r0, [r7, #28]
 8016a86:	f000 f9eb 	bl	8016e60 <ip4_output_if>
  }
  pbuf_free(q);
 8016a8a:	69f8      	ldr	r0, [r7, #28]
 8016a8c:	f7f6 ff20 	bl	800d8d0 <pbuf_free>
 8016a90:	e000      	b.n	8016a94 <icmp_send_response+0xc0>
    return;
 8016a92:	bf00      	nop
}
 8016a94:	3720      	adds	r7, #32
 8016a96:	46bd      	mov	sp, r7
 8016a98:	bd80      	pop	{r7, pc}
 8016a9a:	bf00      	nop
 8016a9c:	08020938 	.word	0x08020938
 8016aa0:	08020a04 	.word	0x08020a04
 8016aa4:	080209a8 	.word	0x080209a8

08016aa8 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8016aa8:	b480      	push	{r7}
 8016aaa:	b085      	sub	sp, #20
 8016aac:	af00      	add	r7, sp, #0
 8016aae:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8016ab0:	4b33      	ldr	r3, [pc, #204]	; (8016b80 <ip4_route+0xd8>)
 8016ab2:	681b      	ldr	r3, [r3, #0]
 8016ab4:	60fb      	str	r3, [r7, #12]
 8016ab6:	e036      	b.n	8016b26 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8016ab8:	68fb      	ldr	r3, [r7, #12]
 8016aba:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8016abe:	f003 0301 	and.w	r3, r3, #1
 8016ac2:	b2db      	uxtb	r3, r3
 8016ac4:	2b00      	cmp	r3, #0
 8016ac6:	d02b      	beq.n	8016b20 <ip4_route+0x78>
 8016ac8:	68fb      	ldr	r3, [r7, #12]
 8016aca:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8016ace:	089b      	lsrs	r3, r3, #2
 8016ad0:	f003 0301 	and.w	r3, r3, #1
 8016ad4:	b2db      	uxtb	r3, r3
 8016ad6:	2b00      	cmp	r3, #0
 8016ad8:	d022      	beq.n	8016b20 <ip4_route+0x78>
 8016ada:	68fb      	ldr	r3, [r7, #12]
 8016adc:	3304      	adds	r3, #4
 8016ade:	681b      	ldr	r3, [r3, #0]
 8016ae0:	2b00      	cmp	r3, #0
 8016ae2:	d01d      	beq.n	8016b20 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8016ae4:	687b      	ldr	r3, [r7, #4]
 8016ae6:	681a      	ldr	r2, [r3, #0]
 8016ae8:	68fb      	ldr	r3, [r7, #12]
 8016aea:	3304      	adds	r3, #4
 8016aec:	681b      	ldr	r3, [r3, #0]
 8016aee:	405a      	eors	r2, r3
 8016af0:	68fb      	ldr	r3, [r7, #12]
 8016af2:	3308      	adds	r3, #8
 8016af4:	681b      	ldr	r3, [r3, #0]
 8016af6:	4013      	ands	r3, r2
 8016af8:	2b00      	cmp	r3, #0
 8016afa:	d101      	bne.n	8016b00 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8016afc:	68fb      	ldr	r3, [r7, #12]
 8016afe:	e038      	b.n	8016b72 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8016b00:	68fb      	ldr	r3, [r7, #12]
 8016b02:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8016b06:	f003 0302 	and.w	r3, r3, #2
 8016b0a:	2b00      	cmp	r3, #0
 8016b0c:	d108      	bne.n	8016b20 <ip4_route+0x78>
 8016b0e:	687b      	ldr	r3, [r7, #4]
 8016b10:	681a      	ldr	r2, [r3, #0]
 8016b12:	68fb      	ldr	r3, [r7, #12]
 8016b14:	330c      	adds	r3, #12
 8016b16:	681b      	ldr	r3, [r3, #0]
 8016b18:	429a      	cmp	r2, r3
 8016b1a:	d101      	bne.n	8016b20 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8016b1c:	68fb      	ldr	r3, [r7, #12]
 8016b1e:	e028      	b.n	8016b72 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8016b20:	68fb      	ldr	r3, [r7, #12]
 8016b22:	681b      	ldr	r3, [r3, #0]
 8016b24:	60fb      	str	r3, [r7, #12]
 8016b26:	68fb      	ldr	r3, [r7, #12]
 8016b28:	2b00      	cmp	r3, #0
 8016b2a:	d1c5      	bne.n	8016ab8 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8016b2c:	4b15      	ldr	r3, [pc, #84]	; (8016b84 <ip4_route+0xdc>)
 8016b2e:	681b      	ldr	r3, [r3, #0]
 8016b30:	2b00      	cmp	r3, #0
 8016b32:	d01a      	beq.n	8016b6a <ip4_route+0xc2>
 8016b34:	4b13      	ldr	r3, [pc, #76]	; (8016b84 <ip4_route+0xdc>)
 8016b36:	681b      	ldr	r3, [r3, #0]
 8016b38:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8016b3c:	f003 0301 	and.w	r3, r3, #1
 8016b40:	2b00      	cmp	r3, #0
 8016b42:	d012      	beq.n	8016b6a <ip4_route+0xc2>
 8016b44:	4b0f      	ldr	r3, [pc, #60]	; (8016b84 <ip4_route+0xdc>)
 8016b46:	681b      	ldr	r3, [r3, #0]
 8016b48:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8016b4c:	f003 0304 	and.w	r3, r3, #4
 8016b50:	2b00      	cmp	r3, #0
 8016b52:	d00a      	beq.n	8016b6a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8016b54:	4b0b      	ldr	r3, [pc, #44]	; (8016b84 <ip4_route+0xdc>)
 8016b56:	681b      	ldr	r3, [r3, #0]
 8016b58:	3304      	adds	r3, #4
 8016b5a:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8016b5c:	2b00      	cmp	r3, #0
 8016b5e:	d004      	beq.n	8016b6a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8016b60:	687b      	ldr	r3, [r7, #4]
 8016b62:	681b      	ldr	r3, [r3, #0]
 8016b64:	b2db      	uxtb	r3, r3
 8016b66:	2b7f      	cmp	r3, #127	; 0x7f
 8016b68:	d101      	bne.n	8016b6e <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8016b6a:	2300      	movs	r3, #0
 8016b6c:	e001      	b.n	8016b72 <ip4_route+0xca>
  }

  return netif_default;
 8016b6e:	4b05      	ldr	r3, [pc, #20]	; (8016b84 <ip4_route+0xdc>)
 8016b70:	681b      	ldr	r3, [r3, #0]
}
 8016b72:	4618      	mov	r0, r3
 8016b74:	3714      	adds	r7, #20
 8016b76:	46bd      	mov	sp, r7
 8016b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b7c:	4770      	bx	lr
 8016b7e:	bf00      	nop
 8016b80:	20007140 	.word	0x20007140
 8016b84:	20007144 	.word	0x20007144

08016b88 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8016b88:	b580      	push	{r7, lr}
 8016b8a:	b082      	sub	sp, #8
 8016b8c:	af00      	add	r7, sp, #0
 8016b8e:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8016b90:	687b      	ldr	r3, [r7, #4]
 8016b92:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8016b96:	f003 0301 	and.w	r3, r3, #1
 8016b9a:	b2db      	uxtb	r3, r3
 8016b9c:	2b00      	cmp	r3, #0
 8016b9e:	d016      	beq.n	8016bce <ip4_input_accept+0x46>
 8016ba0:	687b      	ldr	r3, [r7, #4]
 8016ba2:	3304      	adds	r3, #4
 8016ba4:	681b      	ldr	r3, [r3, #0]
 8016ba6:	2b00      	cmp	r3, #0
 8016ba8:	d011      	beq.n	8016bce <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8016baa:	4b0b      	ldr	r3, [pc, #44]	; (8016bd8 <ip4_input_accept+0x50>)
 8016bac:	695a      	ldr	r2, [r3, #20]
 8016bae:	687b      	ldr	r3, [r7, #4]
 8016bb0:	3304      	adds	r3, #4
 8016bb2:	681b      	ldr	r3, [r3, #0]
 8016bb4:	429a      	cmp	r2, r3
 8016bb6:	d008      	beq.n	8016bca <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8016bb8:	4b07      	ldr	r3, [pc, #28]	; (8016bd8 <ip4_input_accept+0x50>)
 8016bba:	695b      	ldr	r3, [r3, #20]
 8016bbc:	6879      	ldr	r1, [r7, #4]
 8016bbe:	4618      	mov	r0, r3
 8016bc0:	f000 fa26 	bl	8017010 <ip4_addr_isbroadcast_u32>
 8016bc4:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8016bc6:	2b00      	cmp	r3, #0
 8016bc8:	d001      	beq.n	8016bce <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8016bca:	2301      	movs	r3, #1
 8016bcc:	e000      	b.n	8016bd0 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8016bce:	2300      	movs	r3, #0
}
 8016bd0:	4618      	mov	r0, r3
 8016bd2:	3708      	adds	r7, #8
 8016bd4:	46bd      	mov	sp, r7
 8016bd6:	bd80      	pop	{r7, pc}
 8016bd8:	2000402c 	.word	0x2000402c

08016bdc <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8016bdc:	b580      	push	{r7, lr}
 8016bde:	b088      	sub	sp, #32
 8016be0:	af00      	add	r7, sp, #0
 8016be2:	6078      	str	r0, [r7, #4]
 8016be4:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 8016be6:	2301      	movs	r3, #1
 8016be8:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8016bea:	687b      	ldr	r3, [r7, #4]
 8016bec:	685b      	ldr	r3, [r3, #4]
 8016bee:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 8016bf0:	69fb      	ldr	r3, [r7, #28]
 8016bf2:	781b      	ldrb	r3, [r3, #0]
 8016bf4:	091b      	lsrs	r3, r3, #4
 8016bf6:	b2db      	uxtb	r3, r3
 8016bf8:	2b04      	cmp	r3, #4
 8016bfa:	d004      	beq.n	8016c06 <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8016bfc:	6878      	ldr	r0, [r7, #4]
 8016bfe:	f7f6 fe67 	bl	800d8d0 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8016c02:	2300      	movs	r3, #0
 8016c04:	e123      	b.n	8016e4e <ip4_input+0x272>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8016c06:	69fb      	ldr	r3, [r7, #28]
 8016c08:	781b      	ldrb	r3, [r3, #0]
 8016c0a:	f003 030f 	and.w	r3, r3, #15
 8016c0e:	b2db      	uxtb	r3, r3
 8016c10:	009b      	lsls	r3, r3, #2
 8016c12:	b2db      	uxtb	r3, r3
 8016c14:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8016c16:	69fb      	ldr	r3, [r7, #28]
 8016c18:	885b      	ldrh	r3, [r3, #2]
 8016c1a:	b29b      	uxth	r3, r3
 8016c1c:	4618      	mov	r0, r3
 8016c1e:	f7f5 fbbb 	bl	800c398 <lwip_htons>
 8016c22:	4603      	mov	r3, r0
 8016c24:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8016c26:	687b      	ldr	r3, [r7, #4]
 8016c28:	891b      	ldrh	r3, [r3, #8]
 8016c2a:	8a3a      	ldrh	r2, [r7, #16]
 8016c2c:	429a      	cmp	r2, r3
 8016c2e:	d204      	bcs.n	8016c3a <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 8016c30:	8a3b      	ldrh	r3, [r7, #16]
 8016c32:	4619      	mov	r1, r3
 8016c34:	6878      	ldr	r0, [r7, #4]
 8016c36:	f7f6 fcc5 	bl	800d5c4 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8016c3a:	687b      	ldr	r3, [r7, #4]
 8016c3c:	895b      	ldrh	r3, [r3, #10]
 8016c3e:	8a7a      	ldrh	r2, [r7, #18]
 8016c40:	429a      	cmp	r2, r3
 8016c42:	d807      	bhi.n	8016c54 <ip4_input+0x78>
 8016c44:	687b      	ldr	r3, [r7, #4]
 8016c46:	891b      	ldrh	r3, [r3, #8]
 8016c48:	8a3a      	ldrh	r2, [r7, #16]
 8016c4a:	429a      	cmp	r2, r3
 8016c4c:	d802      	bhi.n	8016c54 <ip4_input+0x78>
 8016c4e:	8a7b      	ldrh	r3, [r7, #18]
 8016c50:	2b13      	cmp	r3, #19
 8016c52:	d804      	bhi.n	8016c5e <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8016c54:	6878      	ldr	r0, [r7, #4]
 8016c56:	f7f6 fe3b 	bl	800d8d0 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8016c5a:	2300      	movs	r3, #0
 8016c5c:	e0f7      	b.n	8016e4e <ip4_input+0x272>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8016c5e:	69fb      	ldr	r3, [r7, #28]
 8016c60:	691b      	ldr	r3, [r3, #16]
 8016c62:	4a7d      	ldr	r2, [pc, #500]	; (8016e58 <ip4_input+0x27c>)
 8016c64:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8016c66:	69fb      	ldr	r3, [r7, #28]
 8016c68:	68db      	ldr	r3, [r3, #12]
 8016c6a:	4a7b      	ldr	r2, [pc, #492]	; (8016e58 <ip4_input+0x27c>)
 8016c6c:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8016c6e:	4b7a      	ldr	r3, [pc, #488]	; (8016e58 <ip4_input+0x27c>)
 8016c70:	695b      	ldr	r3, [r3, #20]
 8016c72:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8016c76:	2be0      	cmp	r3, #224	; 0xe0
 8016c78:	d112      	bne.n	8016ca0 <ip4_input+0xc4>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8016c7a:	683b      	ldr	r3, [r7, #0]
 8016c7c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8016c80:	f003 0301 	and.w	r3, r3, #1
 8016c84:	b2db      	uxtb	r3, r3
 8016c86:	2b00      	cmp	r3, #0
 8016c88:	d007      	beq.n	8016c9a <ip4_input+0xbe>
 8016c8a:	683b      	ldr	r3, [r7, #0]
 8016c8c:	3304      	adds	r3, #4
 8016c8e:	681b      	ldr	r3, [r3, #0]
 8016c90:	2b00      	cmp	r3, #0
 8016c92:	d002      	beq.n	8016c9a <ip4_input+0xbe>
      netif = inp;
 8016c94:	683b      	ldr	r3, [r7, #0]
 8016c96:	61bb      	str	r3, [r7, #24]
 8016c98:	e02a      	b.n	8016cf0 <ip4_input+0x114>
    } else {
      netif = NULL;
 8016c9a:	2300      	movs	r3, #0
 8016c9c:	61bb      	str	r3, [r7, #24]
 8016c9e:	e027      	b.n	8016cf0 <ip4_input+0x114>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8016ca0:	6838      	ldr	r0, [r7, #0]
 8016ca2:	f7ff ff71 	bl	8016b88 <ip4_input_accept>
 8016ca6:	4603      	mov	r3, r0
 8016ca8:	2b00      	cmp	r3, #0
 8016caa:	d002      	beq.n	8016cb2 <ip4_input+0xd6>
      netif = inp;
 8016cac:	683b      	ldr	r3, [r7, #0]
 8016cae:	61bb      	str	r3, [r7, #24]
 8016cb0:	e01e      	b.n	8016cf0 <ip4_input+0x114>
    } else {
      netif = NULL;
 8016cb2:	2300      	movs	r3, #0
 8016cb4:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8016cb6:	4b68      	ldr	r3, [pc, #416]	; (8016e58 <ip4_input+0x27c>)
 8016cb8:	695b      	ldr	r3, [r3, #20]
 8016cba:	b2db      	uxtb	r3, r3
 8016cbc:	2b7f      	cmp	r3, #127	; 0x7f
 8016cbe:	d017      	beq.n	8016cf0 <ip4_input+0x114>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8016cc0:	4b66      	ldr	r3, [pc, #408]	; (8016e5c <ip4_input+0x280>)
 8016cc2:	681b      	ldr	r3, [r3, #0]
 8016cc4:	61bb      	str	r3, [r7, #24]
 8016cc6:	e00e      	b.n	8016ce6 <ip4_input+0x10a>
          if (netif == inp) {
 8016cc8:	69ba      	ldr	r2, [r7, #24]
 8016cca:	683b      	ldr	r3, [r7, #0]
 8016ccc:	429a      	cmp	r2, r3
 8016cce:	d006      	beq.n	8016cde <ip4_input+0x102>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8016cd0:	69b8      	ldr	r0, [r7, #24]
 8016cd2:	f7ff ff59 	bl	8016b88 <ip4_input_accept>
 8016cd6:	4603      	mov	r3, r0
 8016cd8:	2b00      	cmp	r3, #0
 8016cda:	d108      	bne.n	8016cee <ip4_input+0x112>
 8016cdc:	e000      	b.n	8016ce0 <ip4_input+0x104>
            continue;
 8016cde:	bf00      	nop
        NETIF_FOREACH(netif) {
 8016ce0:	69bb      	ldr	r3, [r7, #24]
 8016ce2:	681b      	ldr	r3, [r3, #0]
 8016ce4:	61bb      	str	r3, [r7, #24]
 8016ce6:	69bb      	ldr	r3, [r7, #24]
 8016ce8:	2b00      	cmp	r3, #0
 8016cea:	d1ed      	bne.n	8016cc8 <ip4_input+0xec>
 8016cec:	e000      	b.n	8016cf0 <ip4_input+0x114>
            break;
 8016cee:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 8016cf0:	69bb      	ldr	r3, [r7, #24]
 8016cf2:	2b00      	cmp	r3, #0
 8016cf4:	d111      	bne.n	8016d1a <ip4_input+0x13e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 8016cf6:	69fb      	ldr	r3, [r7, #28]
 8016cf8:	7a5b      	ldrb	r3, [r3, #9]
 8016cfa:	2b11      	cmp	r3, #17
 8016cfc:	d10d      	bne.n	8016d1a <ip4_input+0x13e>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 8016cfe:	8a7b      	ldrh	r3, [r7, #18]
 8016d00:	69fa      	ldr	r2, [r7, #28]
 8016d02:	4413      	add	r3, r2
 8016d04:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 8016d06:	68fb      	ldr	r3, [r7, #12]
 8016d08:	885b      	ldrh	r3, [r3, #2]
 8016d0a:	b29b      	uxth	r3, r3
 8016d0c:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 8016d10:	d103      	bne.n	8016d1a <ip4_input+0x13e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 8016d12:	683b      	ldr	r3, [r7, #0]
 8016d14:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 8016d16:	2300      	movs	r3, #0
 8016d18:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 8016d1a:	697b      	ldr	r3, [r7, #20]
 8016d1c:	2b00      	cmp	r3, #0
 8016d1e:	d017      	beq.n	8016d50 <ip4_input+0x174>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 8016d20:	4b4d      	ldr	r3, [pc, #308]	; (8016e58 <ip4_input+0x27c>)
 8016d22:	691b      	ldr	r3, [r3, #16]
 8016d24:	2b00      	cmp	r3, #0
 8016d26:	d013      	beq.n	8016d50 <ip4_input+0x174>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8016d28:	4b4b      	ldr	r3, [pc, #300]	; (8016e58 <ip4_input+0x27c>)
 8016d2a:	691b      	ldr	r3, [r3, #16]
 8016d2c:	6839      	ldr	r1, [r7, #0]
 8016d2e:	4618      	mov	r0, r3
 8016d30:	f000 f96e 	bl	8017010 <ip4_addr_isbroadcast_u32>
 8016d34:	4603      	mov	r3, r0
 8016d36:	2b00      	cmp	r3, #0
 8016d38:	d105      	bne.n	8016d46 <ip4_input+0x16a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8016d3a:	4b47      	ldr	r3, [pc, #284]	; (8016e58 <ip4_input+0x27c>)
 8016d3c:	691b      	ldr	r3, [r3, #16]
 8016d3e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8016d42:	2be0      	cmp	r3, #224	; 0xe0
 8016d44:	d104      	bne.n	8016d50 <ip4_input+0x174>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8016d46:	6878      	ldr	r0, [r7, #4]
 8016d48:	f7f6 fdc2 	bl	800d8d0 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8016d4c:	2300      	movs	r3, #0
 8016d4e:	e07e      	b.n	8016e4e <ip4_input+0x272>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8016d50:	69bb      	ldr	r3, [r7, #24]
 8016d52:	2b00      	cmp	r3, #0
 8016d54:	d104      	bne.n	8016d60 <ip4_input+0x184>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8016d56:	6878      	ldr	r0, [r7, #4]
 8016d58:	f7f6 fdba 	bl	800d8d0 <pbuf_free>
    return ERR_OK;
 8016d5c:	2300      	movs	r3, #0
 8016d5e:	e076      	b.n	8016e4e <ip4_input+0x272>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8016d60:	69fb      	ldr	r3, [r7, #28]
 8016d62:	88db      	ldrh	r3, [r3, #6]
 8016d64:	b29b      	uxth	r3, r3
 8016d66:	461a      	mov	r2, r3
 8016d68:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8016d6c:	4013      	ands	r3, r2
 8016d6e:	2b00      	cmp	r3, #0
 8016d70:	d00b      	beq.n	8016d8a <ip4_input+0x1ae>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8016d72:	6878      	ldr	r0, [r7, #4]
 8016d74:	f000 fc92 	bl	801769c <ip4_reass>
 8016d78:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8016d7a:	687b      	ldr	r3, [r7, #4]
 8016d7c:	2b00      	cmp	r3, #0
 8016d7e:	d101      	bne.n	8016d84 <ip4_input+0x1a8>
      return ERR_OK;
 8016d80:	2300      	movs	r3, #0
 8016d82:	e064      	b.n	8016e4e <ip4_input+0x272>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8016d84:	687b      	ldr	r3, [r7, #4]
 8016d86:	685b      	ldr	r3, [r3, #4]
 8016d88:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8016d8a:	4a33      	ldr	r2, [pc, #204]	; (8016e58 <ip4_input+0x27c>)
 8016d8c:	69bb      	ldr	r3, [r7, #24]
 8016d8e:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8016d90:	4a31      	ldr	r2, [pc, #196]	; (8016e58 <ip4_input+0x27c>)
 8016d92:	683b      	ldr	r3, [r7, #0]
 8016d94:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8016d96:	4a30      	ldr	r2, [pc, #192]	; (8016e58 <ip4_input+0x27c>)
 8016d98:	69fb      	ldr	r3, [r7, #28]
 8016d9a:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8016d9c:	69fb      	ldr	r3, [r7, #28]
 8016d9e:	781b      	ldrb	r3, [r3, #0]
 8016da0:	f003 030f 	and.w	r3, r3, #15
 8016da4:	b2db      	uxtb	r3, r3
 8016da6:	009b      	lsls	r3, r3, #2
 8016da8:	b2db      	uxtb	r3, r3
 8016daa:	b29a      	uxth	r2, r3
 8016dac:	4b2a      	ldr	r3, [pc, #168]	; (8016e58 <ip4_input+0x27c>)
 8016dae:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8016db0:	8a7b      	ldrh	r3, [r7, #18]
 8016db2:	4619      	mov	r1, r3
 8016db4:	6878      	ldr	r0, [r7, #4]
 8016db6:	f7f6 fd05 	bl	800d7c4 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8016dba:	69fb      	ldr	r3, [r7, #28]
 8016dbc:	7a5b      	ldrb	r3, [r3, #9]
 8016dbe:	2b11      	cmp	r3, #17
 8016dc0:	d006      	beq.n	8016dd0 <ip4_input+0x1f4>
 8016dc2:	2b11      	cmp	r3, #17
 8016dc4:	dc13      	bgt.n	8016dee <ip4_input+0x212>
 8016dc6:	2b01      	cmp	r3, #1
 8016dc8:	d00c      	beq.n	8016de4 <ip4_input+0x208>
 8016dca:	2b06      	cmp	r3, #6
 8016dcc:	d005      	beq.n	8016dda <ip4_input+0x1fe>
 8016dce:	e00e      	b.n	8016dee <ip4_input+0x212>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8016dd0:	6839      	ldr	r1, [r7, #0]
 8016dd2:	6878      	ldr	r0, [r7, #4]
 8016dd4:	f7fc fb26 	bl	8013424 <udp_input>
        break;
 8016dd8:	e026      	b.n	8016e28 <ip4_input+0x24c>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8016dda:	6839      	ldr	r1, [r7, #0]
 8016ddc:	6878      	ldr	r0, [r7, #4]
 8016dde:	f7f8 fbaf 	bl	800f540 <tcp_input>
        break;
 8016de2:	e021      	b.n	8016e28 <ip4_input+0x24c>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8016de4:	6839      	ldr	r1, [r7, #0]
 8016de6:	6878      	ldr	r0, [r7, #4]
 8016de8:	f7ff fcd0 	bl	801678c <icmp_input>
        break;
 8016dec:	e01c      	b.n	8016e28 <ip4_input+0x24c>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8016dee:	4b1a      	ldr	r3, [pc, #104]	; (8016e58 <ip4_input+0x27c>)
 8016df0:	695b      	ldr	r3, [r3, #20]
 8016df2:	69b9      	ldr	r1, [r7, #24]
 8016df4:	4618      	mov	r0, r3
 8016df6:	f000 f90b 	bl	8017010 <ip4_addr_isbroadcast_u32>
 8016dfa:	4603      	mov	r3, r0
 8016dfc:	2b00      	cmp	r3, #0
 8016dfe:	d10f      	bne.n	8016e20 <ip4_input+0x244>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8016e00:	4b15      	ldr	r3, [pc, #84]	; (8016e58 <ip4_input+0x27c>)
 8016e02:	695b      	ldr	r3, [r3, #20]
 8016e04:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8016e08:	2be0      	cmp	r3, #224	; 0xe0
 8016e0a:	d009      	beq.n	8016e20 <ip4_input+0x244>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8016e0c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8016e10:	4619      	mov	r1, r3
 8016e12:	6878      	ldr	r0, [r7, #4]
 8016e14:	f7f6 fd49 	bl	800d8aa <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8016e18:	2102      	movs	r1, #2
 8016e1a:	6878      	ldr	r0, [r7, #4]
 8016e1c:	f7ff fdba 	bl	8016994 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8016e20:	6878      	ldr	r0, [r7, #4]
 8016e22:	f7f6 fd55 	bl	800d8d0 <pbuf_free>
        break;
 8016e26:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8016e28:	4b0b      	ldr	r3, [pc, #44]	; (8016e58 <ip4_input+0x27c>)
 8016e2a:	2200      	movs	r2, #0
 8016e2c:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8016e2e:	4b0a      	ldr	r3, [pc, #40]	; (8016e58 <ip4_input+0x27c>)
 8016e30:	2200      	movs	r2, #0
 8016e32:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8016e34:	4b08      	ldr	r3, [pc, #32]	; (8016e58 <ip4_input+0x27c>)
 8016e36:	2200      	movs	r2, #0
 8016e38:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8016e3a:	4b07      	ldr	r3, [pc, #28]	; (8016e58 <ip4_input+0x27c>)
 8016e3c:	2200      	movs	r2, #0
 8016e3e:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8016e40:	4b05      	ldr	r3, [pc, #20]	; (8016e58 <ip4_input+0x27c>)
 8016e42:	2200      	movs	r2, #0
 8016e44:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8016e46:	4b04      	ldr	r3, [pc, #16]	; (8016e58 <ip4_input+0x27c>)
 8016e48:	2200      	movs	r2, #0
 8016e4a:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8016e4c:	2300      	movs	r3, #0
}
 8016e4e:	4618      	mov	r0, r3
 8016e50:	3720      	adds	r7, #32
 8016e52:	46bd      	mov	sp, r7
 8016e54:	bd80      	pop	{r7, pc}
 8016e56:	bf00      	nop
 8016e58:	2000402c 	.word	0x2000402c
 8016e5c:	20007140 	.word	0x20007140

08016e60 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8016e60:	b580      	push	{r7, lr}
 8016e62:	b08a      	sub	sp, #40	; 0x28
 8016e64:	af04      	add	r7, sp, #16
 8016e66:	60f8      	str	r0, [r7, #12]
 8016e68:	60b9      	str	r1, [r7, #8]
 8016e6a:	607a      	str	r2, [r7, #4]
 8016e6c:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8016e6e:	68bb      	ldr	r3, [r7, #8]
 8016e70:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8016e72:	687b      	ldr	r3, [r7, #4]
 8016e74:	2b00      	cmp	r3, #0
 8016e76:	d009      	beq.n	8016e8c <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8016e78:	68bb      	ldr	r3, [r7, #8]
 8016e7a:	2b00      	cmp	r3, #0
 8016e7c:	d003      	beq.n	8016e86 <ip4_output_if+0x26>
 8016e7e:	68bb      	ldr	r3, [r7, #8]
 8016e80:	681b      	ldr	r3, [r3, #0]
 8016e82:	2b00      	cmp	r3, #0
 8016e84:	d102      	bne.n	8016e8c <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8016e86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016e88:	3304      	adds	r3, #4
 8016e8a:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8016e8c:	78fa      	ldrb	r2, [r7, #3]
 8016e8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016e90:	9302      	str	r3, [sp, #8]
 8016e92:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8016e96:	9301      	str	r3, [sp, #4]
 8016e98:	f897 3020 	ldrb.w	r3, [r7, #32]
 8016e9c:	9300      	str	r3, [sp, #0]
 8016e9e:	4613      	mov	r3, r2
 8016ea0:	687a      	ldr	r2, [r7, #4]
 8016ea2:	6979      	ldr	r1, [r7, #20]
 8016ea4:	68f8      	ldr	r0, [r7, #12]
 8016ea6:	f000 f805 	bl	8016eb4 <ip4_output_if_src>
 8016eaa:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8016eac:	4618      	mov	r0, r3
 8016eae:	3718      	adds	r7, #24
 8016eb0:	46bd      	mov	sp, r7
 8016eb2:	bd80      	pop	{r7, pc}

08016eb4 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8016eb4:	b580      	push	{r7, lr}
 8016eb6:	b088      	sub	sp, #32
 8016eb8:	af00      	add	r7, sp, #0
 8016eba:	60f8      	str	r0, [r7, #12]
 8016ebc:	60b9      	str	r1, [r7, #8]
 8016ebe:	607a      	str	r2, [r7, #4]
 8016ec0:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8016ec2:	68fb      	ldr	r3, [r7, #12]
 8016ec4:	7b9b      	ldrb	r3, [r3, #14]
 8016ec6:	2b01      	cmp	r3, #1
 8016ec8:	d006      	beq.n	8016ed8 <ip4_output_if_src+0x24>
 8016eca:	4b4b      	ldr	r3, [pc, #300]	; (8016ff8 <ip4_output_if_src+0x144>)
 8016ecc:	f44f 7255 	mov.w	r2, #852	; 0x354
 8016ed0:	494a      	ldr	r1, [pc, #296]	; (8016ffc <ip4_output_if_src+0x148>)
 8016ed2:	484b      	ldr	r0, [pc, #300]	; (8017000 <ip4_output_if_src+0x14c>)
 8016ed4:	f001 fd7a 	bl	80189cc <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8016ed8:	687b      	ldr	r3, [r7, #4]
 8016eda:	2b00      	cmp	r3, #0
 8016edc:	d060      	beq.n	8016fa0 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8016ede:	2314      	movs	r3, #20
 8016ee0:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8016ee2:	2114      	movs	r1, #20
 8016ee4:	68f8      	ldr	r0, [r7, #12]
 8016ee6:	f7f6 fc5d 	bl	800d7a4 <pbuf_add_header>
 8016eea:	4603      	mov	r3, r0
 8016eec:	2b00      	cmp	r3, #0
 8016eee:	d002      	beq.n	8016ef6 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8016ef0:	f06f 0301 	mvn.w	r3, #1
 8016ef4:	e07c      	b.n	8016ff0 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8016ef6:	68fb      	ldr	r3, [r7, #12]
 8016ef8:	685b      	ldr	r3, [r3, #4]
 8016efa:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8016efc:	68fb      	ldr	r3, [r7, #12]
 8016efe:	895b      	ldrh	r3, [r3, #10]
 8016f00:	2b13      	cmp	r3, #19
 8016f02:	d806      	bhi.n	8016f12 <ip4_output_if_src+0x5e>
 8016f04:	4b3c      	ldr	r3, [pc, #240]	; (8016ff8 <ip4_output_if_src+0x144>)
 8016f06:	f44f 7262 	mov.w	r2, #904	; 0x388
 8016f0a:	493e      	ldr	r1, [pc, #248]	; (8017004 <ip4_output_if_src+0x150>)
 8016f0c:	483c      	ldr	r0, [pc, #240]	; (8017000 <ip4_output_if_src+0x14c>)
 8016f0e:	f001 fd5d 	bl	80189cc <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8016f12:	69fb      	ldr	r3, [r7, #28]
 8016f14:	78fa      	ldrb	r2, [r7, #3]
 8016f16:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8016f18:	69fb      	ldr	r3, [r7, #28]
 8016f1a:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8016f1e:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8016f20:	687b      	ldr	r3, [r7, #4]
 8016f22:	681a      	ldr	r2, [r3, #0]
 8016f24:	69fb      	ldr	r3, [r7, #28]
 8016f26:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8016f28:	8b7b      	ldrh	r3, [r7, #26]
 8016f2a:	089b      	lsrs	r3, r3, #2
 8016f2c:	b29b      	uxth	r3, r3
 8016f2e:	b2db      	uxtb	r3, r3
 8016f30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016f34:	b2da      	uxtb	r2, r3
 8016f36:	69fb      	ldr	r3, [r7, #28]
 8016f38:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8016f3a:	69fb      	ldr	r3, [r7, #28]
 8016f3c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8016f40:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8016f42:	68fb      	ldr	r3, [r7, #12]
 8016f44:	891b      	ldrh	r3, [r3, #8]
 8016f46:	4618      	mov	r0, r3
 8016f48:	f7f5 fa26 	bl	800c398 <lwip_htons>
 8016f4c:	4603      	mov	r3, r0
 8016f4e:	461a      	mov	r2, r3
 8016f50:	69fb      	ldr	r3, [r7, #28]
 8016f52:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8016f54:	69fb      	ldr	r3, [r7, #28]
 8016f56:	2200      	movs	r2, #0
 8016f58:	719a      	strb	r2, [r3, #6]
 8016f5a:	2200      	movs	r2, #0
 8016f5c:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8016f5e:	4b2a      	ldr	r3, [pc, #168]	; (8017008 <ip4_output_if_src+0x154>)
 8016f60:	881b      	ldrh	r3, [r3, #0]
 8016f62:	4618      	mov	r0, r3
 8016f64:	f7f5 fa18 	bl	800c398 <lwip_htons>
 8016f68:	4603      	mov	r3, r0
 8016f6a:	461a      	mov	r2, r3
 8016f6c:	69fb      	ldr	r3, [r7, #28]
 8016f6e:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8016f70:	4b25      	ldr	r3, [pc, #148]	; (8017008 <ip4_output_if_src+0x154>)
 8016f72:	881b      	ldrh	r3, [r3, #0]
 8016f74:	3301      	adds	r3, #1
 8016f76:	b29a      	uxth	r2, r3
 8016f78:	4b23      	ldr	r3, [pc, #140]	; (8017008 <ip4_output_if_src+0x154>)
 8016f7a:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8016f7c:	68bb      	ldr	r3, [r7, #8]
 8016f7e:	2b00      	cmp	r3, #0
 8016f80:	d104      	bne.n	8016f8c <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8016f82:	4b22      	ldr	r3, [pc, #136]	; (801700c <ip4_output_if_src+0x158>)
 8016f84:	681a      	ldr	r2, [r3, #0]
 8016f86:	69fb      	ldr	r3, [r7, #28]
 8016f88:	60da      	str	r2, [r3, #12]
 8016f8a:	e003      	b.n	8016f94 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8016f8c:	68bb      	ldr	r3, [r7, #8]
 8016f8e:	681a      	ldr	r2, [r3, #0]
 8016f90:	69fb      	ldr	r3, [r7, #28]
 8016f92:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8016f94:	69fb      	ldr	r3, [r7, #28]
 8016f96:	2200      	movs	r2, #0
 8016f98:	729a      	strb	r2, [r3, #10]
 8016f9a:	2200      	movs	r2, #0
 8016f9c:	72da      	strb	r2, [r3, #11]
 8016f9e:	e00f      	b.n	8016fc0 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8016fa0:	68fb      	ldr	r3, [r7, #12]
 8016fa2:	895b      	ldrh	r3, [r3, #10]
 8016fa4:	2b13      	cmp	r3, #19
 8016fa6:	d802      	bhi.n	8016fae <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8016fa8:	f06f 0301 	mvn.w	r3, #1
 8016fac:	e020      	b.n	8016ff0 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8016fae:	68fb      	ldr	r3, [r7, #12]
 8016fb0:	685b      	ldr	r3, [r3, #4]
 8016fb2:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8016fb4:	69fb      	ldr	r3, [r7, #28]
 8016fb6:	691b      	ldr	r3, [r3, #16]
 8016fb8:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8016fba:	f107 0314 	add.w	r3, r7, #20
 8016fbe:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8016fc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016fc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016fc4:	2b00      	cmp	r3, #0
 8016fc6:	d00c      	beq.n	8016fe2 <ip4_output_if_src+0x12e>
 8016fc8:	68fb      	ldr	r3, [r7, #12]
 8016fca:	891a      	ldrh	r2, [r3, #8]
 8016fcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016fce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016fd0:	429a      	cmp	r2, r3
 8016fd2:	d906      	bls.n	8016fe2 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8016fd4:	687a      	ldr	r2, [r7, #4]
 8016fd6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8016fd8:	68f8      	ldr	r0, [r7, #12]
 8016fda:	f000 fd4d 	bl	8017a78 <ip4_frag>
 8016fde:	4603      	mov	r3, r0
 8016fe0:	e006      	b.n	8016ff0 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8016fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016fe4:	695b      	ldr	r3, [r3, #20]
 8016fe6:	687a      	ldr	r2, [r7, #4]
 8016fe8:	68f9      	ldr	r1, [r7, #12]
 8016fea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016fec:	4798      	blx	r3
 8016fee:	4603      	mov	r3, r0
}
 8016ff0:	4618      	mov	r0, r3
 8016ff2:	3720      	adds	r7, #32
 8016ff4:	46bd      	mov	sp, r7
 8016ff6:	bd80      	pop	{r7, pc}
 8016ff8:	08020a30 	.word	0x08020a30
 8016ffc:	08020a64 	.word	0x08020a64
 8017000:	08020a70 	.word	0x08020a70
 8017004:	08020a98 	.word	0x08020a98
 8017008:	200005da 	.word	0x200005da
 801700c:	08020e8c 	.word	0x08020e8c

08017010 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8017010:	b480      	push	{r7}
 8017012:	b085      	sub	sp, #20
 8017014:	af00      	add	r7, sp, #0
 8017016:	6078      	str	r0, [r7, #4]
 8017018:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801701a:	687b      	ldr	r3, [r7, #4]
 801701c:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801701e:	687b      	ldr	r3, [r7, #4]
 8017020:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017024:	d002      	beq.n	801702c <ip4_addr_isbroadcast_u32+0x1c>
 8017026:	687b      	ldr	r3, [r7, #4]
 8017028:	2b00      	cmp	r3, #0
 801702a:	d101      	bne.n	8017030 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 801702c:	2301      	movs	r3, #1
 801702e:	e02a      	b.n	8017086 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8017030:	683b      	ldr	r3, [r7, #0]
 8017032:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8017036:	f003 0302 	and.w	r3, r3, #2
 801703a:	2b00      	cmp	r3, #0
 801703c:	d101      	bne.n	8017042 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801703e:	2300      	movs	r3, #0
 8017040:	e021      	b.n	8017086 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8017042:	683b      	ldr	r3, [r7, #0]
 8017044:	3304      	adds	r3, #4
 8017046:	681b      	ldr	r3, [r3, #0]
 8017048:	687a      	ldr	r2, [r7, #4]
 801704a:	429a      	cmp	r2, r3
 801704c:	d101      	bne.n	8017052 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801704e:	2300      	movs	r3, #0
 8017050:	e019      	b.n	8017086 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8017052:	68fa      	ldr	r2, [r7, #12]
 8017054:	683b      	ldr	r3, [r7, #0]
 8017056:	3304      	adds	r3, #4
 8017058:	681b      	ldr	r3, [r3, #0]
 801705a:	405a      	eors	r2, r3
 801705c:	683b      	ldr	r3, [r7, #0]
 801705e:	3308      	adds	r3, #8
 8017060:	681b      	ldr	r3, [r3, #0]
 8017062:	4013      	ands	r3, r2
 8017064:	2b00      	cmp	r3, #0
 8017066:	d10d      	bne.n	8017084 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8017068:	683b      	ldr	r3, [r7, #0]
 801706a:	3308      	adds	r3, #8
 801706c:	681b      	ldr	r3, [r3, #0]
 801706e:	43da      	mvns	r2, r3
 8017070:	687b      	ldr	r3, [r7, #4]
 8017072:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8017074:	683b      	ldr	r3, [r7, #0]
 8017076:	3308      	adds	r3, #8
 8017078:	681b      	ldr	r3, [r3, #0]
 801707a:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801707c:	429a      	cmp	r2, r3
 801707e:	d101      	bne.n	8017084 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8017080:	2301      	movs	r3, #1
 8017082:	e000      	b.n	8017086 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8017084:	2300      	movs	r3, #0
  }
}
 8017086:	4618      	mov	r0, r3
 8017088:	3714      	adds	r7, #20
 801708a:	46bd      	mov	sp, r7
 801708c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017090:	4770      	bx	lr
	...

08017094 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8017094:	b580      	push	{r7, lr}
 8017096:	b084      	sub	sp, #16
 8017098:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801709a:	2300      	movs	r3, #0
 801709c:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801709e:	4b12      	ldr	r3, [pc, #72]	; (80170e8 <ip_reass_tmr+0x54>)
 80170a0:	681b      	ldr	r3, [r3, #0]
 80170a2:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 80170a4:	e018      	b.n	80170d8 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 80170a6:	68fb      	ldr	r3, [r7, #12]
 80170a8:	7fdb      	ldrb	r3, [r3, #31]
 80170aa:	2b00      	cmp	r3, #0
 80170ac:	d00b      	beq.n	80170c6 <ip_reass_tmr+0x32>
      r->timer--;
 80170ae:	68fb      	ldr	r3, [r7, #12]
 80170b0:	7fdb      	ldrb	r3, [r3, #31]
 80170b2:	3b01      	subs	r3, #1
 80170b4:	b2da      	uxtb	r2, r3
 80170b6:	68fb      	ldr	r3, [r7, #12]
 80170b8:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 80170ba:	68fb      	ldr	r3, [r7, #12]
 80170bc:	60bb      	str	r3, [r7, #8]
      r = r->next;
 80170be:	68fb      	ldr	r3, [r7, #12]
 80170c0:	681b      	ldr	r3, [r3, #0]
 80170c2:	60fb      	str	r3, [r7, #12]
 80170c4:	e008      	b.n	80170d8 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 80170c6:	68fb      	ldr	r3, [r7, #12]
 80170c8:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 80170ca:	68fb      	ldr	r3, [r7, #12]
 80170cc:	681b      	ldr	r3, [r3, #0]
 80170ce:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 80170d0:	68b9      	ldr	r1, [r7, #8]
 80170d2:	6878      	ldr	r0, [r7, #4]
 80170d4:	f000 f80a 	bl	80170ec <ip_reass_free_complete_datagram>
  while (r != NULL) {
 80170d8:	68fb      	ldr	r3, [r7, #12]
 80170da:	2b00      	cmp	r3, #0
 80170dc:	d1e3      	bne.n	80170a6 <ip_reass_tmr+0x12>
    }
  }
}
 80170de:	bf00      	nop
 80170e0:	bf00      	nop
 80170e2:	3710      	adds	r7, #16
 80170e4:	46bd      	mov	sp, r7
 80170e6:	bd80      	pop	{r7, pc}
 80170e8:	200005dc 	.word	0x200005dc

080170ec <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80170ec:	b580      	push	{r7, lr}
 80170ee:	b088      	sub	sp, #32
 80170f0:	af00      	add	r7, sp, #0
 80170f2:	6078      	str	r0, [r7, #4]
 80170f4:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 80170f6:	2300      	movs	r3, #0
 80170f8:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 80170fa:	683a      	ldr	r2, [r7, #0]
 80170fc:	687b      	ldr	r3, [r7, #4]
 80170fe:	429a      	cmp	r2, r3
 8017100:	d105      	bne.n	801710e <ip_reass_free_complete_datagram+0x22>
 8017102:	4b45      	ldr	r3, [pc, #276]	; (8017218 <ip_reass_free_complete_datagram+0x12c>)
 8017104:	22ab      	movs	r2, #171	; 0xab
 8017106:	4945      	ldr	r1, [pc, #276]	; (801721c <ip_reass_free_complete_datagram+0x130>)
 8017108:	4845      	ldr	r0, [pc, #276]	; (8017220 <ip_reass_free_complete_datagram+0x134>)
 801710a:	f001 fc5f 	bl	80189cc <iprintf>
  if (prev != NULL) {
 801710e:	683b      	ldr	r3, [r7, #0]
 8017110:	2b00      	cmp	r3, #0
 8017112:	d00a      	beq.n	801712a <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8017114:	683b      	ldr	r3, [r7, #0]
 8017116:	681b      	ldr	r3, [r3, #0]
 8017118:	687a      	ldr	r2, [r7, #4]
 801711a:	429a      	cmp	r2, r3
 801711c:	d005      	beq.n	801712a <ip_reass_free_complete_datagram+0x3e>
 801711e:	4b3e      	ldr	r3, [pc, #248]	; (8017218 <ip_reass_free_complete_datagram+0x12c>)
 8017120:	22ad      	movs	r2, #173	; 0xad
 8017122:	4940      	ldr	r1, [pc, #256]	; (8017224 <ip_reass_free_complete_datagram+0x138>)
 8017124:	483e      	ldr	r0, [pc, #248]	; (8017220 <ip_reass_free_complete_datagram+0x134>)
 8017126:	f001 fc51 	bl	80189cc <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801712a:	687b      	ldr	r3, [r7, #4]
 801712c:	685b      	ldr	r3, [r3, #4]
 801712e:	685b      	ldr	r3, [r3, #4]
 8017130:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8017132:	697b      	ldr	r3, [r7, #20]
 8017134:	889b      	ldrh	r3, [r3, #4]
 8017136:	b29b      	uxth	r3, r3
 8017138:	2b00      	cmp	r3, #0
 801713a:	d12a      	bne.n	8017192 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 801713c:	687b      	ldr	r3, [r7, #4]
 801713e:	685b      	ldr	r3, [r3, #4]
 8017140:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8017142:	697b      	ldr	r3, [r7, #20]
 8017144:	681a      	ldr	r2, [r3, #0]
 8017146:	687b      	ldr	r3, [r7, #4]
 8017148:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801714a:	69bb      	ldr	r3, [r7, #24]
 801714c:	6858      	ldr	r0, [r3, #4]
 801714e:	687b      	ldr	r3, [r7, #4]
 8017150:	3308      	adds	r3, #8
 8017152:	2214      	movs	r2, #20
 8017154:	4619      	mov	r1, r3
 8017156:	f000 fef5 	bl	8017f44 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801715a:	2101      	movs	r1, #1
 801715c:	69b8      	ldr	r0, [r7, #24]
 801715e:	f7ff fc29 	bl	80169b4 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8017162:	69b8      	ldr	r0, [r7, #24]
 8017164:	f7f6 fc3c 	bl	800d9e0 <pbuf_clen>
 8017168:	4603      	mov	r3, r0
 801716a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801716c:	8bfa      	ldrh	r2, [r7, #30]
 801716e:	8a7b      	ldrh	r3, [r7, #18]
 8017170:	4413      	add	r3, r2
 8017172:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8017176:	db05      	blt.n	8017184 <ip_reass_free_complete_datagram+0x98>
 8017178:	4b27      	ldr	r3, [pc, #156]	; (8017218 <ip_reass_free_complete_datagram+0x12c>)
 801717a:	22bc      	movs	r2, #188	; 0xbc
 801717c:	492a      	ldr	r1, [pc, #168]	; (8017228 <ip_reass_free_complete_datagram+0x13c>)
 801717e:	4828      	ldr	r0, [pc, #160]	; (8017220 <ip_reass_free_complete_datagram+0x134>)
 8017180:	f001 fc24 	bl	80189cc <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8017184:	8bfa      	ldrh	r2, [r7, #30]
 8017186:	8a7b      	ldrh	r3, [r7, #18]
 8017188:	4413      	add	r3, r2
 801718a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 801718c:	69b8      	ldr	r0, [r7, #24]
 801718e:	f7f6 fb9f 	bl	800d8d0 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8017192:	687b      	ldr	r3, [r7, #4]
 8017194:	685b      	ldr	r3, [r3, #4]
 8017196:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8017198:	e01f      	b.n	80171da <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801719a:	69bb      	ldr	r3, [r7, #24]
 801719c:	685b      	ldr	r3, [r3, #4]
 801719e:	617b      	str	r3, [r7, #20]
    pcur = p;
 80171a0:	69bb      	ldr	r3, [r7, #24]
 80171a2:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 80171a4:	697b      	ldr	r3, [r7, #20]
 80171a6:	681b      	ldr	r3, [r3, #0]
 80171a8:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 80171aa:	68f8      	ldr	r0, [r7, #12]
 80171ac:	f7f6 fc18 	bl	800d9e0 <pbuf_clen>
 80171b0:	4603      	mov	r3, r0
 80171b2:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80171b4:	8bfa      	ldrh	r2, [r7, #30]
 80171b6:	8a7b      	ldrh	r3, [r7, #18]
 80171b8:	4413      	add	r3, r2
 80171ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80171be:	db05      	blt.n	80171cc <ip_reass_free_complete_datagram+0xe0>
 80171c0:	4b15      	ldr	r3, [pc, #84]	; (8017218 <ip_reass_free_complete_datagram+0x12c>)
 80171c2:	22cc      	movs	r2, #204	; 0xcc
 80171c4:	4918      	ldr	r1, [pc, #96]	; (8017228 <ip_reass_free_complete_datagram+0x13c>)
 80171c6:	4816      	ldr	r0, [pc, #88]	; (8017220 <ip_reass_free_complete_datagram+0x134>)
 80171c8:	f001 fc00 	bl	80189cc <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80171cc:	8bfa      	ldrh	r2, [r7, #30]
 80171ce:	8a7b      	ldrh	r3, [r7, #18]
 80171d0:	4413      	add	r3, r2
 80171d2:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 80171d4:	68f8      	ldr	r0, [r7, #12]
 80171d6:	f7f6 fb7b 	bl	800d8d0 <pbuf_free>
  while (p != NULL) {
 80171da:	69bb      	ldr	r3, [r7, #24]
 80171dc:	2b00      	cmp	r3, #0
 80171de:	d1dc      	bne.n	801719a <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 80171e0:	6839      	ldr	r1, [r7, #0]
 80171e2:	6878      	ldr	r0, [r7, #4]
 80171e4:	f000 f8c2 	bl	801736c <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 80171e8:	4b10      	ldr	r3, [pc, #64]	; (801722c <ip_reass_free_complete_datagram+0x140>)
 80171ea:	881b      	ldrh	r3, [r3, #0]
 80171ec:	8bfa      	ldrh	r2, [r7, #30]
 80171ee:	429a      	cmp	r2, r3
 80171f0:	d905      	bls.n	80171fe <ip_reass_free_complete_datagram+0x112>
 80171f2:	4b09      	ldr	r3, [pc, #36]	; (8017218 <ip_reass_free_complete_datagram+0x12c>)
 80171f4:	22d2      	movs	r2, #210	; 0xd2
 80171f6:	490e      	ldr	r1, [pc, #56]	; (8017230 <ip_reass_free_complete_datagram+0x144>)
 80171f8:	4809      	ldr	r0, [pc, #36]	; (8017220 <ip_reass_free_complete_datagram+0x134>)
 80171fa:	f001 fbe7 	bl	80189cc <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 80171fe:	4b0b      	ldr	r3, [pc, #44]	; (801722c <ip_reass_free_complete_datagram+0x140>)
 8017200:	881a      	ldrh	r2, [r3, #0]
 8017202:	8bfb      	ldrh	r3, [r7, #30]
 8017204:	1ad3      	subs	r3, r2, r3
 8017206:	b29a      	uxth	r2, r3
 8017208:	4b08      	ldr	r3, [pc, #32]	; (801722c <ip_reass_free_complete_datagram+0x140>)
 801720a:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 801720c:	8bfb      	ldrh	r3, [r7, #30]
}
 801720e:	4618      	mov	r0, r3
 8017210:	3720      	adds	r7, #32
 8017212:	46bd      	mov	sp, r7
 8017214:	bd80      	pop	{r7, pc}
 8017216:	bf00      	nop
 8017218:	08020ac8 	.word	0x08020ac8
 801721c:	08020b04 	.word	0x08020b04
 8017220:	08020b10 	.word	0x08020b10
 8017224:	08020b38 	.word	0x08020b38
 8017228:	08020b4c 	.word	0x08020b4c
 801722c:	200005e0 	.word	0x200005e0
 8017230:	08020b6c 	.word	0x08020b6c

08017234 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8017234:	b580      	push	{r7, lr}
 8017236:	b08a      	sub	sp, #40	; 0x28
 8017238:	af00      	add	r7, sp, #0
 801723a:	6078      	str	r0, [r7, #4]
 801723c:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801723e:	2300      	movs	r3, #0
 8017240:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8017242:	2300      	movs	r3, #0
 8017244:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8017246:	2300      	movs	r3, #0
 8017248:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801724a:	2300      	movs	r3, #0
 801724c:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801724e:	2300      	movs	r3, #0
 8017250:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8017252:	4b28      	ldr	r3, [pc, #160]	; (80172f4 <ip_reass_remove_oldest_datagram+0xc0>)
 8017254:	681b      	ldr	r3, [r3, #0]
 8017256:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8017258:	e030      	b.n	80172bc <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801725a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801725c:	695a      	ldr	r2, [r3, #20]
 801725e:	687b      	ldr	r3, [r7, #4]
 8017260:	68db      	ldr	r3, [r3, #12]
 8017262:	429a      	cmp	r2, r3
 8017264:	d10c      	bne.n	8017280 <ip_reass_remove_oldest_datagram+0x4c>
 8017266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017268:	699a      	ldr	r2, [r3, #24]
 801726a:	687b      	ldr	r3, [r7, #4]
 801726c:	691b      	ldr	r3, [r3, #16]
 801726e:	429a      	cmp	r2, r3
 8017270:	d106      	bne.n	8017280 <ip_reass_remove_oldest_datagram+0x4c>
 8017272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017274:	899a      	ldrh	r2, [r3, #12]
 8017276:	687b      	ldr	r3, [r7, #4]
 8017278:	889b      	ldrh	r3, [r3, #4]
 801727a:	b29b      	uxth	r3, r3
 801727c:	429a      	cmp	r2, r3
 801727e:	d014      	beq.n	80172aa <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8017280:	693b      	ldr	r3, [r7, #16]
 8017282:	3301      	adds	r3, #1
 8017284:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8017286:	6a3b      	ldr	r3, [r7, #32]
 8017288:	2b00      	cmp	r3, #0
 801728a:	d104      	bne.n	8017296 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 801728c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801728e:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8017290:	69fb      	ldr	r3, [r7, #28]
 8017292:	61bb      	str	r3, [r7, #24]
 8017294:	e009      	b.n	80172aa <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8017296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017298:	7fda      	ldrb	r2, [r3, #31]
 801729a:	6a3b      	ldr	r3, [r7, #32]
 801729c:	7fdb      	ldrb	r3, [r3, #31]
 801729e:	429a      	cmp	r2, r3
 80172a0:	d803      	bhi.n	80172aa <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 80172a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80172a4:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80172a6:	69fb      	ldr	r3, [r7, #28]
 80172a8:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 80172aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80172ac:	681b      	ldr	r3, [r3, #0]
 80172ae:	2b00      	cmp	r3, #0
 80172b0:	d001      	beq.n	80172b6 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 80172b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80172b4:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 80172b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80172b8:	681b      	ldr	r3, [r3, #0]
 80172ba:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80172bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80172be:	2b00      	cmp	r3, #0
 80172c0:	d1cb      	bne.n	801725a <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 80172c2:	6a3b      	ldr	r3, [r7, #32]
 80172c4:	2b00      	cmp	r3, #0
 80172c6:	d008      	beq.n	80172da <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 80172c8:	69b9      	ldr	r1, [r7, #24]
 80172ca:	6a38      	ldr	r0, [r7, #32]
 80172cc:	f7ff ff0e 	bl	80170ec <ip_reass_free_complete_datagram>
 80172d0:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 80172d2:	697a      	ldr	r2, [r7, #20]
 80172d4:	68fb      	ldr	r3, [r7, #12]
 80172d6:	4413      	add	r3, r2
 80172d8:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 80172da:	697a      	ldr	r2, [r7, #20]
 80172dc:	683b      	ldr	r3, [r7, #0]
 80172de:	429a      	cmp	r2, r3
 80172e0:	da02      	bge.n	80172e8 <ip_reass_remove_oldest_datagram+0xb4>
 80172e2:	693b      	ldr	r3, [r7, #16]
 80172e4:	2b01      	cmp	r3, #1
 80172e6:	dcac      	bgt.n	8017242 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 80172e8:	697b      	ldr	r3, [r7, #20]
}
 80172ea:	4618      	mov	r0, r3
 80172ec:	3728      	adds	r7, #40	; 0x28
 80172ee:	46bd      	mov	sp, r7
 80172f0:	bd80      	pop	{r7, pc}
 80172f2:	bf00      	nop
 80172f4:	200005dc 	.word	0x200005dc

080172f8 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 80172f8:	b580      	push	{r7, lr}
 80172fa:	b084      	sub	sp, #16
 80172fc:	af00      	add	r7, sp, #0
 80172fe:	6078      	str	r0, [r7, #4]
 8017300:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8017302:	2004      	movs	r0, #4
 8017304:	f7f5 fc9e 	bl	800cc44 <memp_malloc>
 8017308:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801730a:	68fb      	ldr	r3, [r7, #12]
 801730c:	2b00      	cmp	r3, #0
 801730e:	d110      	bne.n	8017332 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8017310:	6839      	ldr	r1, [r7, #0]
 8017312:	6878      	ldr	r0, [r7, #4]
 8017314:	f7ff ff8e 	bl	8017234 <ip_reass_remove_oldest_datagram>
 8017318:	4602      	mov	r2, r0
 801731a:	683b      	ldr	r3, [r7, #0]
 801731c:	4293      	cmp	r3, r2
 801731e:	dc03      	bgt.n	8017328 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8017320:	2004      	movs	r0, #4
 8017322:	f7f5 fc8f 	bl	800cc44 <memp_malloc>
 8017326:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8017328:	68fb      	ldr	r3, [r7, #12]
 801732a:	2b00      	cmp	r3, #0
 801732c:	d101      	bne.n	8017332 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801732e:	2300      	movs	r3, #0
 8017330:	e016      	b.n	8017360 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8017332:	2220      	movs	r2, #32
 8017334:	2100      	movs	r1, #0
 8017336:	68f8      	ldr	r0, [r7, #12]
 8017338:	f000 fe2c 	bl	8017f94 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 801733c:	68fb      	ldr	r3, [r7, #12]
 801733e:	220f      	movs	r2, #15
 8017340:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8017342:	4b09      	ldr	r3, [pc, #36]	; (8017368 <ip_reass_enqueue_new_datagram+0x70>)
 8017344:	681a      	ldr	r2, [r3, #0]
 8017346:	68fb      	ldr	r3, [r7, #12]
 8017348:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801734a:	4a07      	ldr	r2, [pc, #28]	; (8017368 <ip_reass_enqueue_new_datagram+0x70>)
 801734c:	68fb      	ldr	r3, [r7, #12]
 801734e:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8017350:	68fb      	ldr	r3, [r7, #12]
 8017352:	3308      	adds	r3, #8
 8017354:	2214      	movs	r2, #20
 8017356:	6879      	ldr	r1, [r7, #4]
 8017358:	4618      	mov	r0, r3
 801735a:	f000 fdf3 	bl	8017f44 <memcpy>
  return ipr;
 801735e:	68fb      	ldr	r3, [r7, #12]
}
 8017360:	4618      	mov	r0, r3
 8017362:	3710      	adds	r7, #16
 8017364:	46bd      	mov	sp, r7
 8017366:	bd80      	pop	{r7, pc}
 8017368:	200005dc 	.word	0x200005dc

0801736c <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801736c:	b580      	push	{r7, lr}
 801736e:	b082      	sub	sp, #8
 8017370:	af00      	add	r7, sp, #0
 8017372:	6078      	str	r0, [r7, #4]
 8017374:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8017376:	4b10      	ldr	r3, [pc, #64]	; (80173b8 <ip_reass_dequeue_datagram+0x4c>)
 8017378:	681b      	ldr	r3, [r3, #0]
 801737a:	687a      	ldr	r2, [r7, #4]
 801737c:	429a      	cmp	r2, r3
 801737e:	d104      	bne.n	801738a <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8017380:	687b      	ldr	r3, [r7, #4]
 8017382:	681b      	ldr	r3, [r3, #0]
 8017384:	4a0c      	ldr	r2, [pc, #48]	; (80173b8 <ip_reass_dequeue_datagram+0x4c>)
 8017386:	6013      	str	r3, [r2, #0]
 8017388:	e00d      	b.n	80173a6 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801738a:	683b      	ldr	r3, [r7, #0]
 801738c:	2b00      	cmp	r3, #0
 801738e:	d106      	bne.n	801739e <ip_reass_dequeue_datagram+0x32>
 8017390:	4b0a      	ldr	r3, [pc, #40]	; (80173bc <ip_reass_dequeue_datagram+0x50>)
 8017392:	f240 1245 	movw	r2, #325	; 0x145
 8017396:	490a      	ldr	r1, [pc, #40]	; (80173c0 <ip_reass_dequeue_datagram+0x54>)
 8017398:	480a      	ldr	r0, [pc, #40]	; (80173c4 <ip_reass_dequeue_datagram+0x58>)
 801739a:	f001 fb17 	bl	80189cc <iprintf>
    prev->next = ipr->next;
 801739e:	687b      	ldr	r3, [r7, #4]
 80173a0:	681a      	ldr	r2, [r3, #0]
 80173a2:	683b      	ldr	r3, [r7, #0]
 80173a4:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 80173a6:	6879      	ldr	r1, [r7, #4]
 80173a8:	2004      	movs	r0, #4
 80173aa:	f7f5 fc97 	bl	800ccdc <memp_free>
}
 80173ae:	bf00      	nop
 80173b0:	3708      	adds	r7, #8
 80173b2:	46bd      	mov	sp, r7
 80173b4:	bd80      	pop	{r7, pc}
 80173b6:	bf00      	nop
 80173b8:	200005dc 	.word	0x200005dc
 80173bc:	08020ac8 	.word	0x08020ac8
 80173c0:	08020b90 	.word	0x08020b90
 80173c4:	08020b10 	.word	0x08020b10

080173c8 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 80173c8:	b580      	push	{r7, lr}
 80173ca:	b08c      	sub	sp, #48	; 0x30
 80173cc:	af00      	add	r7, sp, #0
 80173ce:	60f8      	str	r0, [r7, #12]
 80173d0:	60b9      	str	r1, [r7, #8]
 80173d2:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 80173d4:	2300      	movs	r3, #0
 80173d6:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 80173d8:	2301      	movs	r3, #1
 80173da:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 80173dc:	68bb      	ldr	r3, [r7, #8]
 80173de:	685b      	ldr	r3, [r3, #4]
 80173e0:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80173e2:	69fb      	ldr	r3, [r7, #28]
 80173e4:	885b      	ldrh	r3, [r3, #2]
 80173e6:	b29b      	uxth	r3, r3
 80173e8:	4618      	mov	r0, r3
 80173ea:	f7f4 ffd5 	bl	800c398 <lwip_htons>
 80173ee:	4603      	mov	r3, r0
 80173f0:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 80173f2:	69fb      	ldr	r3, [r7, #28]
 80173f4:	781b      	ldrb	r3, [r3, #0]
 80173f6:	f003 030f 	and.w	r3, r3, #15
 80173fa:	b2db      	uxtb	r3, r3
 80173fc:	009b      	lsls	r3, r3, #2
 80173fe:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8017400:	7e7b      	ldrb	r3, [r7, #25]
 8017402:	b29b      	uxth	r3, r3
 8017404:	8b7a      	ldrh	r2, [r7, #26]
 8017406:	429a      	cmp	r2, r3
 8017408:	d202      	bcs.n	8017410 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801740a:	f04f 33ff 	mov.w	r3, #4294967295
 801740e:	e135      	b.n	801767c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8017410:	7e7b      	ldrb	r3, [r7, #25]
 8017412:	b29b      	uxth	r3, r3
 8017414:	8b7a      	ldrh	r2, [r7, #26]
 8017416:	1ad3      	subs	r3, r2, r3
 8017418:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801741a:	69fb      	ldr	r3, [r7, #28]
 801741c:	88db      	ldrh	r3, [r3, #6]
 801741e:	b29b      	uxth	r3, r3
 8017420:	4618      	mov	r0, r3
 8017422:	f7f4 ffb9 	bl	800c398 <lwip_htons>
 8017426:	4603      	mov	r3, r0
 8017428:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801742c:	b29b      	uxth	r3, r3
 801742e:	00db      	lsls	r3, r3, #3
 8017430:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8017432:	68bb      	ldr	r3, [r7, #8]
 8017434:	685b      	ldr	r3, [r3, #4]
 8017436:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8017438:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801743a:	2200      	movs	r2, #0
 801743c:	701a      	strb	r2, [r3, #0]
 801743e:	2200      	movs	r2, #0
 8017440:	705a      	strb	r2, [r3, #1]
 8017442:	2200      	movs	r2, #0
 8017444:	709a      	strb	r2, [r3, #2]
 8017446:	2200      	movs	r2, #0
 8017448:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801744a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801744c:	8afa      	ldrh	r2, [r7, #22]
 801744e:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8017450:	8afa      	ldrh	r2, [r7, #22]
 8017452:	8b7b      	ldrh	r3, [r7, #26]
 8017454:	4413      	add	r3, r2
 8017456:	b29a      	uxth	r2, r3
 8017458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801745a:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 801745c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801745e:	88db      	ldrh	r3, [r3, #6]
 8017460:	b29b      	uxth	r3, r3
 8017462:	8afa      	ldrh	r2, [r7, #22]
 8017464:	429a      	cmp	r2, r3
 8017466:	d902      	bls.n	801746e <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017468:	f04f 33ff 	mov.w	r3, #4294967295
 801746c:	e106      	b.n	801767c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801746e:	68fb      	ldr	r3, [r7, #12]
 8017470:	685b      	ldr	r3, [r3, #4]
 8017472:	627b      	str	r3, [r7, #36]	; 0x24
 8017474:	e068      	b.n	8017548 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8017476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017478:	685b      	ldr	r3, [r3, #4]
 801747a:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 801747c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801747e:	889b      	ldrh	r3, [r3, #4]
 8017480:	b29a      	uxth	r2, r3
 8017482:	693b      	ldr	r3, [r7, #16]
 8017484:	889b      	ldrh	r3, [r3, #4]
 8017486:	b29b      	uxth	r3, r3
 8017488:	429a      	cmp	r2, r3
 801748a:	d235      	bcs.n	80174f8 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 801748c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801748e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017490:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8017492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017494:	2b00      	cmp	r3, #0
 8017496:	d020      	beq.n	80174da <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8017498:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801749a:	889b      	ldrh	r3, [r3, #4]
 801749c:	b29a      	uxth	r2, r3
 801749e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80174a0:	88db      	ldrh	r3, [r3, #6]
 80174a2:	b29b      	uxth	r3, r3
 80174a4:	429a      	cmp	r2, r3
 80174a6:	d307      	bcc.n	80174b8 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 80174a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80174aa:	88db      	ldrh	r3, [r3, #6]
 80174ac:	b29a      	uxth	r2, r3
 80174ae:	693b      	ldr	r3, [r7, #16]
 80174b0:	889b      	ldrh	r3, [r3, #4]
 80174b2:	b29b      	uxth	r3, r3
 80174b4:	429a      	cmp	r2, r3
 80174b6:	d902      	bls.n	80174be <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80174b8:	f04f 33ff 	mov.w	r3, #4294967295
 80174bc:	e0de      	b.n	801767c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 80174be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80174c0:	68ba      	ldr	r2, [r7, #8]
 80174c2:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 80174c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80174c6:	88db      	ldrh	r3, [r3, #6]
 80174c8:	b29a      	uxth	r2, r3
 80174ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80174cc:	889b      	ldrh	r3, [r3, #4]
 80174ce:	b29b      	uxth	r3, r3
 80174d0:	429a      	cmp	r2, r3
 80174d2:	d03d      	beq.n	8017550 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80174d4:	2300      	movs	r3, #0
 80174d6:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 80174d8:	e03a      	b.n	8017550 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 80174da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80174dc:	88db      	ldrh	r3, [r3, #6]
 80174de:	b29a      	uxth	r2, r3
 80174e0:	693b      	ldr	r3, [r7, #16]
 80174e2:	889b      	ldrh	r3, [r3, #4]
 80174e4:	b29b      	uxth	r3, r3
 80174e6:	429a      	cmp	r2, r3
 80174e8:	d902      	bls.n	80174f0 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80174ea:	f04f 33ff 	mov.w	r3, #4294967295
 80174ee:	e0c5      	b.n	801767c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 80174f0:	68fb      	ldr	r3, [r7, #12]
 80174f2:	68ba      	ldr	r2, [r7, #8]
 80174f4:	605a      	str	r2, [r3, #4]
      break;
 80174f6:	e02b      	b.n	8017550 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 80174f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80174fa:	889b      	ldrh	r3, [r3, #4]
 80174fc:	b29a      	uxth	r2, r3
 80174fe:	693b      	ldr	r3, [r7, #16]
 8017500:	889b      	ldrh	r3, [r3, #4]
 8017502:	b29b      	uxth	r3, r3
 8017504:	429a      	cmp	r2, r3
 8017506:	d102      	bne.n	801750e <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017508:	f04f 33ff 	mov.w	r3, #4294967295
 801750c:	e0b6      	b.n	801767c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801750e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017510:	889b      	ldrh	r3, [r3, #4]
 8017512:	b29a      	uxth	r2, r3
 8017514:	693b      	ldr	r3, [r7, #16]
 8017516:	88db      	ldrh	r3, [r3, #6]
 8017518:	b29b      	uxth	r3, r3
 801751a:	429a      	cmp	r2, r3
 801751c:	d202      	bcs.n	8017524 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801751e:	f04f 33ff 	mov.w	r3, #4294967295
 8017522:	e0ab      	b.n	801767c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8017524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017526:	2b00      	cmp	r3, #0
 8017528:	d009      	beq.n	801753e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801752a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801752c:	88db      	ldrh	r3, [r3, #6]
 801752e:	b29a      	uxth	r2, r3
 8017530:	693b      	ldr	r3, [r7, #16]
 8017532:	889b      	ldrh	r3, [r3, #4]
 8017534:	b29b      	uxth	r3, r3
 8017536:	429a      	cmp	r2, r3
 8017538:	d001      	beq.n	801753e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801753a:	2300      	movs	r3, #0
 801753c:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801753e:	693b      	ldr	r3, [r7, #16]
 8017540:	681b      	ldr	r3, [r3, #0]
 8017542:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8017544:	693b      	ldr	r3, [r7, #16]
 8017546:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8017548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801754a:	2b00      	cmp	r3, #0
 801754c:	d193      	bne.n	8017476 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801754e:	e000      	b.n	8017552 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8017550:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8017552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017554:	2b00      	cmp	r3, #0
 8017556:	d12d      	bne.n	80175b4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8017558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801755a:	2b00      	cmp	r3, #0
 801755c:	d01c      	beq.n	8017598 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801755e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017560:	88db      	ldrh	r3, [r3, #6]
 8017562:	b29a      	uxth	r2, r3
 8017564:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017566:	889b      	ldrh	r3, [r3, #4]
 8017568:	b29b      	uxth	r3, r3
 801756a:	429a      	cmp	r2, r3
 801756c:	d906      	bls.n	801757c <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801756e:	4b45      	ldr	r3, [pc, #276]	; (8017684 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8017570:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8017574:	4944      	ldr	r1, [pc, #272]	; (8017688 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8017576:	4845      	ldr	r0, [pc, #276]	; (801768c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8017578:	f001 fa28 	bl	80189cc <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 801757c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801757e:	68ba      	ldr	r2, [r7, #8]
 8017580:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8017582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017584:	88db      	ldrh	r3, [r3, #6]
 8017586:	b29a      	uxth	r2, r3
 8017588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801758a:	889b      	ldrh	r3, [r3, #4]
 801758c:	b29b      	uxth	r3, r3
 801758e:	429a      	cmp	r2, r3
 8017590:	d010      	beq.n	80175b4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8017592:	2300      	movs	r3, #0
 8017594:	623b      	str	r3, [r7, #32]
 8017596:	e00d      	b.n	80175b4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8017598:	68fb      	ldr	r3, [r7, #12]
 801759a:	685b      	ldr	r3, [r3, #4]
 801759c:	2b00      	cmp	r3, #0
 801759e:	d006      	beq.n	80175ae <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 80175a0:	4b38      	ldr	r3, [pc, #224]	; (8017684 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80175a2:	f44f 72df 	mov.w	r2, #446	; 0x1be
 80175a6:	493a      	ldr	r1, [pc, #232]	; (8017690 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 80175a8:	4838      	ldr	r0, [pc, #224]	; (801768c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80175aa:	f001 fa0f 	bl	80189cc <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 80175ae:	68fb      	ldr	r3, [r7, #12]
 80175b0:	68ba      	ldr	r2, [r7, #8]
 80175b2:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80175b4:	687b      	ldr	r3, [r7, #4]
 80175b6:	2b00      	cmp	r3, #0
 80175b8:	d105      	bne.n	80175c6 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 80175ba:	68fb      	ldr	r3, [r7, #12]
 80175bc:	7f9b      	ldrb	r3, [r3, #30]
 80175be:	f003 0301 	and.w	r3, r3, #1
 80175c2:	2b00      	cmp	r3, #0
 80175c4:	d059      	beq.n	801767a <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 80175c6:	6a3b      	ldr	r3, [r7, #32]
 80175c8:	2b00      	cmp	r3, #0
 80175ca:	d04f      	beq.n	801766c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 80175cc:	68fb      	ldr	r3, [r7, #12]
 80175ce:	685b      	ldr	r3, [r3, #4]
 80175d0:	2b00      	cmp	r3, #0
 80175d2:	d006      	beq.n	80175e2 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 80175d4:	68fb      	ldr	r3, [r7, #12]
 80175d6:	685b      	ldr	r3, [r3, #4]
 80175d8:	685b      	ldr	r3, [r3, #4]
 80175da:	889b      	ldrh	r3, [r3, #4]
 80175dc:	b29b      	uxth	r3, r3
 80175de:	2b00      	cmp	r3, #0
 80175e0:	d002      	beq.n	80175e8 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 80175e2:	2300      	movs	r3, #0
 80175e4:	623b      	str	r3, [r7, #32]
 80175e6:	e041      	b.n	801766c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 80175e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80175ea:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 80175ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80175ee:	681b      	ldr	r3, [r3, #0]
 80175f0:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80175f2:	e012      	b.n	801761a <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 80175f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80175f6:	685b      	ldr	r3, [r3, #4]
 80175f8:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 80175fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80175fc:	88db      	ldrh	r3, [r3, #6]
 80175fe:	b29a      	uxth	r2, r3
 8017600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017602:	889b      	ldrh	r3, [r3, #4]
 8017604:	b29b      	uxth	r3, r3
 8017606:	429a      	cmp	r2, r3
 8017608:	d002      	beq.n	8017610 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801760a:	2300      	movs	r3, #0
 801760c:	623b      	str	r3, [r7, #32]
            break;
 801760e:	e007      	b.n	8017620 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8017610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017612:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8017614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017616:	681b      	ldr	r3, [r3, #0]
 8017618:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801761a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801761c:	2b00      	cmp	r3, #0
 801761e:	d1e9      	bne.n	80175f4 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8017620:	6a3b      	ldr	r3, [r7, #32]
 8017622:	2b00      	cmp	r3, #0
 8017624:	d022      	beq.n	801766c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8017626:	68fb      	ldr	r3, [r7, #12]
 8017628:	685b      	ldr	r3, [r3, #4]
 801762a:	2b00      	cmp	r3, #0
 801762c:	d106      	bne.n	801763c <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801762e:	4b15      	ldr	r3, [pc, #84]	; (8017684 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8017630:	f240 12df 	movw	r2, #479	; 0x1df
 8017634:	4917      	ldr	r1, [pc, #92]	; (8017694 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8017636:	4815      	ldr	r0, [pc, #84]	; (801768c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8017638:	f001 f9c8 	bl	80189cc <iprintf>
          LWIP_ASSERT("sanity check",
 801763c:	68fb      	ldr	r3, [r7, #12]
 801763e:	685b      	ldr	r3, [r3, #4]
 8017640:	685b      	ldr	r3, [r3, #4]
 8017642:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017644:	429a      	cmp	r2, r3
 8017646:	d106      	bne.n	8017656 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8017648:	4b0e      	ldr	r3, [pc, #56]	; (8017684 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801764a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 801764e:	4911      	ldr	r1, [pc, #68]	; (8017694 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8017650:	480e      	ldr	r0, [pc, #56]	; (801768c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8017652:	f001 f9bb 	bl	80189cc <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8017656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017658:	681b      	ldr	r3, [r3, #0]
 801765a:	2b00      	cmp	r3, #0
 801765c:	d006      	beq.n	801766c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801765e:	4b09      	ldr	r3, [pc, #36]	; (8017684 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8017660:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8017664:	490c      	ldr	r1, [pc, #48]	; (8017698 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8017666:	4809      	ldr	r0, [pc, #36]	; (801768c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8017668:	f001 f9b0 	bl	80189cc <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 801766c:	6a3b      	ldr	r3, [r7, #32]
 801766e:	2b00      	cmp	r3, #0
 8017670:	bf14      	ite	ne
 8017672:	2301      	movne	r3, #1
 8017674:	2300      	moveq	r3, #0
 8017676:	b2db      	uxtb	r3, r3
 8017678:	e000      	b.n	801767c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801767a:	2300      	movs	r3, #0
}
 801767c:	4618      	mov	r0, r3
 801767e:	3730      	adds	r7, #48	; 0x30
 8017680:	46bd      	mov	sp, r7
 8017682:	bd80      	pop	{r7, pc}
 8017684:	08020ac8 	.word	0x08020ac8
 8017688:	08020bac 	.word	0x08020bac
 801768c:	08020b10 	.word	0x08020b10
 8017690:	08020bcc 	.word	0x08020bcc
 8017694:	08020c04 	.word	0x08020c04
 8017698:	08020c14 	.word	0x08020c14

0801769c <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 801769c:	b580      	push	{r7, lr}
 801769e:	b08e      	sub	sp, #56	; 0x38
 80176a0:	af00      	add	r7, sp, #0
 80176a2:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 80176a4:	687b      	ldr	r3, [r7, #4]
 80176a6:	685b      	ldr	r3, [r3, #4]
 80176a8:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 80176aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80176ac:	781b      	ldrb	r3, [r3, #0]
 80176ae:	f003 030f 	and.w	r3, r3, #15
 80176b2:	b2db      	uxtb	r3, r3
 80176b4:	009b      	lsls	r3, r3, #2
 80176b6:	b2db      	uxtb	r3, r3
 80176b8:	2b14      	cmp	r3, #20
 80176ba:	f040 8167 	bne.w	801798c <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 80176be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80176c0:	88db      	ldrh	r3, [r3, #6]
 80176c2:	b29b      	uxth	r3, r3
 80176c4:	4618      	mov	r0, r3
 80176c6:	f7f4 fe67 	bl	800c398 <lwip_htons>
 80176ca:	4603      	mov	r3, r0
 80176cc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80176d0:	b29b      	uxth	r3, r3
 80176d2:	00db      	lsls	r3, r3, #3
 80176d4:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80176d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80176d8:	885b      	ldrh	r3, [r3, #2]
 80176da:	b29b      	uxth	r3, r3
 80176dc:	4618      	mov	r0, r3
 80176de:	f7f4 fe5b 	bl	800c398 <lwip_htons>
 80176e2:	4603      	mov	r3, r0
 80176e4:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 80176e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80176e8:	781b      	ldrb	r3, [r3, #0]
 80176ea:	f003 030f 	and.w	r3, r3, #15
 80176ee:	b2db      	uxtb	r3, r3
 80176f0:	009b      	lsls	r3, r3, #2
 80176f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 80176f6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80176fa:	b29b      	uxth	r3, r3
 80176fc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80176fe:	429a      	cmp	r2, r3
 8017700:	f0c0 8146 	bcc.w	8017990 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8017704:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8017708:	b29b      	uxth	r3, r3
 801770a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801770c:	1ad3      	subs	r3, r2, r3
 801770e:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8017710:	6878      	ldr	r0, [r7, #4]
 8017712:	f7f6 f965 	bl	800d9e0 <pbuf_clen>
 8017716:	4603      	mov	r3, r0
 8017718:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801771a:	4b9f      	ldr	r3, [pc, #636]	; (8017998 <ip4_reass+0x2fc>)
 801771c:	881b      	ldrh	r3, [r3, #0]
 801771e:	461a      	mov	r2, r3
 8017720:	8c3b      	ldrh	r3, [r7, #32]
 8017722:	4413      	add	r3, r2
 8017724:	2b0a      	cmp	r3, #10
 8017726:	dd10      	ble.n	801774a <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8017728:	8c3b      	ldrh	r3, [r7, #32]
 801772a:	4619      	mov	r1, r3
 801772c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801772e:	f7ff fd81 	bl	8017234 <ip_reass_remove_oldest_datagram>
 8017732:	4603      	mov	r3, r0
 8017734:	2b00      	cmp	r3, #0
 8017736:	f000 812d 	beq.w	8017994 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801773a:	4b97      	ldr	r3, [pc, #604]	; (8017998 <ip4_reass+0x2fc>)
 801773c:	881b      	ldrh	r3, [r3, #0]
 801773e:	461a      	mov	r2, r3
 8017740:	8c3b      	ldrh	r3, [r7, #32]
 8017742:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8017744:	2b0a      	cmp	r3, #10
 8017746:	f300 8125 	bgt.w	8017994 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801774a:	4b94      	ldr	r3, [pc, #592]	; (801799c <ip4_reass+0x300>)
 801774c:	681b      	ldr	r3, [r3, #0]
 801774e:	633b      	str	r3, [r7, #48]	; 0x30
 8017750:	e015      	b.n	801777e <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8017752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017754:	695a      	ldr	r2, [r3, #20]
 8017756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017758:	68db      	ldr	r3, [r3, #12]
 801775a:	429a      	cmp	r2, r3
 801775c:	d10c      	bne.n	8017778 <ip4_reass+0xdc>
 801775e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017760:	699a      	ldr	r2, [r3, #24]
 8017762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017764:	691b      	ldr	r3, [r3, #16]
 8017766:	429a      	cmp	r2, r3
 8017768:	d106      	bne.n	8017778 <ip4_reass+0xdc>
 801776a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801776c:	899a      	ldrh	r2, [r3, #12]
 801776e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017770:	889b      	ldrh	r3, [r3, #4]
 8017772:	b29b      	uxth	r3, r3
 8017774:	429a      	cmp	r2, r3
 8017776:	d006      	beq.n	8017786 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8017778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801777a:	681b      	ldr	r3, [r3, #0]
 801777c:	633b      	str	r3, [r7, #48]	; 0x30
 801777e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017780:	2b00      	cmp	r3, #0
 8017782:	d1e6      	bne.n	8017752 <ip4_reass+0xb6>
 8017784:	e000      	b.n	8017788 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8017786:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8017788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801778a:	2b00      	cmp	r3, #0
 801778c:	d109      	bne.n	80177a2 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801778e:	8c3b      	ldrh	r3, [r7, #32]
 8017790:	4619      	mov	r1, r3
 8017792:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017794:	f7ff fdb0 	bl	80172f8 <ip_reass_enqueue_new_datagram>
 8017798:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801779a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801779c:	2b00      	cmp	r3, #0
 801779e:	d11c      	bne.n	80177da <ip4_reass+0x13e>
      goto nullreturn;
 80177a0:	e109      	b.n	80179b6 <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80177a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80177a4:	88db      	ldrh	r3, [r3, #6]
 80177a6:	b29b      	uxth	r3, r3
 80177a8:	4618      	mov	r0, r3
 80177aa:	f7f4 fdf5 	bl	800c398 <lwip_htons>
 80177ae:	4603      	mov	r3, r0
 80177b0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80177b4:	2b00      	cmp	r3, #0
 80177b6:	d110      	bne.n	80177da <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 80177b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80177ba:	89db      	ldrh	r3, [r3, #14]
 80177bc:	4618      	mov	r0, r3
 80177be:	f7f4 fdeb 	bl	800c398 <lwip_htons>
 80177c2:	4603      	mov	r3, r0
 80177c4:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80177c8:	2b00      	cmp	r3, #0
 80177ca:	d006      	beq.n	80177da <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 80177cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80177ce:	3308      	adds	r3, #8
 80177d0:	2214      	movs	r2, #20
 80177d2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80177d4:	4618      	mov	r0, r3
 80177d6:	f000 fbb5 	bl	8017f44 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 80177da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80177dc:	88db      	ldrh	r3, [r3, #6]
 80177de:	b29b      	uxth	r3, r3
 80177e0:	f003 0320 	and.w	r3, r3, #32
 80177e4:	2b00      	cmp	r3, #0
 80177e6:	bf0c      	ite	eq
 80177e8:	2301      	moveq	r3, #1
 80177ea:	2300      	movne	r3, #0
 80177ec:	b2db      	uxtb	r3, r3
 80177ee:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 80177f0:	69fb      	ldr	r3, [r7, #28]
 80177f2:	2b00      	cmp	r3, #0
 80177f4:	d00e      	beq.n	8017814 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 80177f6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80177f8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80177fa:	4413      	add	r3, r2
 80177fc:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 80177fe:	8b7a      	ldrh	r2, [r7, #26]
 8017800:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8017802:	429a      	cmp	r2, r3
 8017804:	f0c0 80a0 	bcc.w	8017948 <ip4_reass+0x2ac>
 8017808:	8b7b      	ldrh	r3, [r7, #26]
 801780a:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 801780e:	4293      	cmp	r3, r2
 8017810:	f200 809a 	bhi.w	8017948 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8017814:	69fa      	ldr	r2, [r7, #28]
 8017816:	6879      	ldr	r1, [r7, #4]
 8017818:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801781a:	f7ff fdd5 	bl	80173c8 <ip_reass_chain_frag_into_datagram_and_validate>
 801781e:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8017820:	697b      	ldr	r3, [r7, #20]
 8017822:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017826:	f000 8091 	beq.w	801794c <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801782a:	4b5b      	ldr	r3, [pc, #364]	; (8017998 <ip4_reass+0x2fc>)
 801782c:	881a      	ldrh	r2, [r3, #0]
 801782e:	8c3b      	ldrh	r3, [r7, #32]
 8017830:	4413      	add	r3, r2
 8017832:	b29a      	uxth	r2, r3
 8017834:	4b58      	ldr	r3, [pc, #352]	; (8017998 <ip4_reass+0x2fc>)
 8017836:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8017838:	69fb      	ldr	r3, [r7, #28]
 801783a:	2b00      	cmp	r3, #0
 801783c:	d00d      	beq.n	801785a <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801783e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8017840:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017842:	4413      	add	r3, r2
 8017844:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8017846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017848:	8a7a      	ldrh	r2, [r7, #18]
 801784a:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801784c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801784e:	7f9b      	ldrb	r3, [r3, #30]
 8017850:	f043 0301 	orr.w	r3, r3, #1
 8017854:	b2da      	uxtb	r2, r3
 8017856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017858:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801785a:	697b      	ldr	r3, [r7, #20]
 801785c:	2b01      	cmp	r3, #1
 801785e:	d171      	bne.n	8017944 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8017860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017862:	8b9b      	ldrh	r3, [r3, #28]
 8017864:	3314      	adds	r3, #20
 8017866:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8017868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801786a:	685b      	ldr	r3, [r3, #4]
 801786c:	685b      	ldr	r3, [r3, #4]
 801786e:	681b      	ldr	r3, [r3, #0]
 8017870:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8017872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017874:	685b      	ldr	r3, [r3, #4]
 8017876:	685b      	ldr	r3, [r3, #4]
 8017878:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801787a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801787c:	3308      	adds	r3, #8
 801787e:	2214      	movs	r2, #20
 8017880:	4619      	mov	r1, r3
 8017882:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017884:	f000 fb5e 	bl	8017f44 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8017888:	8a3b      	ldrh	r3, [r7, #16]
 801788a:	4618      	mov	r0, r3
 801788c:	f7f4 fd84 	bl	800c398 <lwip_htons>
 8017890:	4603      	mov	r3, r0
 8017892:	461a      	mov	r2, r3
 8017894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017896:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8017898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801789a:	2200      	movs	r2, #0
 801789c:	719a      	strb	r2, [r3, #6]
 801789e:	2200      	movs	r2, #0
 80178a0:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 80178a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80178a4:	2200      	movs	r2, #0
 80178a6:	729a      	strb	r2, [r3, #10]
 80178a8:	2200      	movs	r2, #0
 80178aa:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 80178ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80178ae:	685b      	ldr	r3, [r3, #4]
 80178b0:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 80178b2:	e00d      	b.n	80178d0 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 80178b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80178b6:	685b      	ldr	r3, [r3, #4]
 80178b8:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 80178ba:	2114      	movs	r1, #20
 80178bc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80178be:	f7f5 ff81 	bl	800d7c4 <pbuf_remove_header>
      pbuf_cat(p, r);
 80178c2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80178c4:	6878      	ldr	r0, [r7, #4]
 80178c6:	f7f6 f8c5 	bl	800da54 <pbuf_cat>
      r = iprh->next_pbuf;
 80178ca:	68fb      	ldr	r3, [r7, #12]
 80178cc:	681b      	ldr	r3, [r3, #0]
 80178ce:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 80178d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80178d2:	2b00      	cmp	r3, #0
 80178d4:	d1ee      	bne.n	80178b4 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 80178d6:	4b31      	ldr	r3, [pc, #196]	; (801799c <ip4_reass+0x300>)
 80178d8:	681b      	ldr	r3, [r3, #0]
 80178da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80178dc:	429a      	cmp	r2, r3
 80178de:	d102      	bne.n	80178e6 <ip4_reass+0x24a>
      ipr_prev = NULL;
 80178e0:	2300      	movs	r3, #0
 80178e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80178e4:	e010      	b.n	8017908 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80178e6:	4b2d      	ldr	r3, [pc, #180]	; (801799c <ip4_reass+0x300>)
 80178e8:	681b      	ldr	r3, [r3, #0]
 80178ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80178ec:	e007      	b.n	80178fe <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 80178ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80178f0:	681b      	ldr	r3, [r3, #0]
 80178f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80178f4:	429a      	cmp	r2, r3
 80178f6:	d006      	beq.n	8017906 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80178f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80178fa:	681b      	ldr	r3, [r3, #0]
 80178fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80178fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017900:	2b00      	cmp	r3, #0
 8017902:	d1f4      	bne.n	80178ee <ip4_reass+0x252>
 8017904:	e000      	b.n	8017908 <ip4_reass+0x26c>
          break;
 8017906:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8017908:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801790a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801790c:	f7ff fd2e 	bl	801736c <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8017910:	6878      	ldr	r0, [r7, #4]
 8017912:	f7f6 f865 	bl	800d9e0 <pbuf_clen>
 8017916:	4603      	mov	r3, r0
 8017918:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801791a:	4b1f      	ldr	r3, [pc, #124]	; (8017998 <ip4_reass+0x2fc>)
 801791c:	881b      	ldrh	r3, [r3, #0]
 801791e:	8c3a      	ldrh	r2, [r7, #32]
 8017920:	429a      	cmp	r2, r3
 8017922:	d906      	bls.n	8017932 <ip4_reass+0x296>
 8017924:	4b1e      	ldr	r3, [pc, #120]	; (80179a0 <ip4_reass+0x304>)
 8017926:	f240 229b 	movw	r2, #667	; 0x29b
 801792a:	491e      	ldr	r1, [pc, #120]	; (80179a4 <ip4_reass+0x308>)
 801792c:	481e      	ldr	r0, [pc, #120]	; (80179a8 <ip4_reass+0x30c>)
 801792e:	f001 f84d 	bl	80189cc <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8017932:	4b19      	ldr	r3, [pc, #100]	; (8017998 <ip4_reass+0x2fc>)
 8017934:	881a      	ldrh	r2, [r3, #0]
 8017936:	8c3b      	ldrh	r3, [r7, #32]
 8017938:	1ad3      	subs	r3, r2, r3
 801793a:	b29a      	uxth	r2, r3
 801793c:	4b16      	ldr	r3, [pc, #88]	; (8017998 <ip4_reass+0x2fc>)
 801793e:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8017940:	687b      	ldr	r3, [r7, #4]
 8017942:	e03c      	b.n	80179be <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8017944:	2300      	movs	r3, #0
 8017946:	e03a      	b.n	80179be <ip4_reass+0x322>
      goto nullreturn_ipr;
 8017948:	bf00      	nop
 801794a:	e000      	b.n	801794e <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 801794c:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801794e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017950:	2b00      	cmp	r3, #0
 8017952:	d106      	bne.n	8017962 <ip4_reass+0x2c6>
 8017954:	4b12      	ldr	r3, [pc, #72]	; (80179a0 <ip4_reass+0x304>)
 8017956:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 801795a:	4914      	ldr	r1, [pc, #80]	; (80179ac <ip4_reass+0x310>)
 801795c:	4812      	ldr	r0, [pc, #72]	; (80179a8 <ip4_reass+0x30c>)
 801795e:	f001 f835 	bl	80189cc <iprintf>
  if (ipr->p == NULL) {
 8017962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017964:	685b      	ldr	r3, [r3, #4]
 8017966:	2b00      	cmp	r3, #0
 8017968:	d124      	bne.n	80179b4 <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801796a:	4b0c      	ldr	r3, [pc, #48]	; (801799c <ip4_reass+0x300>)
 801796c:	681b      	ldr	r3, [r3, #0]
 801796e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017970:	429a      	cmp	r2, r3
 8017972:	d006      	beq.n	8017982 <ip4_reass+0x2e6>
 8017974:	4b0a      	ldr	r3, [pc, #40]	; (80179a0 <ip4_reass+0x304>)
 8017976:	f240 22ab 	movw	r2, #683	; 0x2ab
 801797a:	490d      	ldr	r1, [pc, #52]	; (80179b0 <ip4_reass+0x314>)
 801797c:	480a      	ldr	r0, [pc, #40]	; (80179a8 <ip4_reass+0x30c>)
 801797e:	f001 f825 	bl	80189cc <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8017982:	2100      	movs	r1, #0
 8017984:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017986:	f7ff fcf1 	bl	801736c <ip_reass_dequeue_datagram>
 801798a:	e014      	b.n	80179b6 <ip4_reass+0x31a>
    goto nullreturn;
 801798c:	bf00      	nop
 801798e:	e012      	b.n	80179b6 <ip4_reass+0x31a>
    goto nullreturn;
 8017990:	bf00      	nop
 8017992:	e010      	b.n	80179b6 <ip4_reass+0x31a>
      goto nullreturn;
 8017994:	bf00      	nop
 8017996:	e00e      	b.n	80179b6 <ip4_reass+0x31a>
 8017998:	200005e0 	.word	0x200005e0
 801799c:	200005dc 	.word	0x200005dc
 80179a0:	08020ac8 	.word	0x08020ac8
 80179a4:	08020c38 	.word	0x08020c38
 80179a8:	08020b10 	.word	0x08020b10
 80179ac:	08020c54 	.word	0x08020c54
 80179b0:	08020c60 	.word	0x08020c60
  }

nullreturn:
 80179b4:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 80179b6:	6878      	ldr	r0, [r7, #4]
 80179b8:	f7f5 ff8a 	bl	800d8d0 <pbuf_free>
  return NULL;
 80179bc:	2300      	movs	r3, #0
}
 80179be:	4618      	mov	r0, r3
 80179c0:	3738      	adds	r7, #56	; 0x38
 80179c2:	46bd      	mov	sp, r7
 80179c4:	bd80      	pop	{r7, pc}
 80179c6:	bf00      	nop

080179c8 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 80179c8:	b580      	push	{r7, lr}
 80179ca:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 80179cc:	2005      	movs	r0, #5
 80179ce:	f7f5 f939 	bl	800cc44 <memp_malloc>
 80179d2:	4603      	mov	r3, r0
}
 80179d4:	4618      	mov	r0, r3
 80179d6:	bd80      	pop	{r7, pc}

080179d8 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 80179d8:	b580      	push	{r7, lr}
 80179da:	b082      	sub	sp, #8
 80179dc:	af00      	add	r7, sp, #0
 80179de:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 80179e0:	687b      	ldr	r3, [r7, #4]
 80179e2:	2b00      	cmp	r3, #0
 80179e4:	d106      	bne.n	80179f4 <ip_frag_free_pbuf_custom_ref+0x1c>
 80179e6:	4b07      	ldr	r3, [pc, #28]	; (8017a04 <ip_frag_free_pbuf_custom_ref+0x2c>)
 80179e8:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 80179ec:	4906      	ldr	r1, [pc, #24]	; (8017a08 <ip_frag_free_pbuf_custom_ref+0x30>)
 80179ee:	4807      	ldr	r0, [pc, #28]	; (8017a0c <ip_frag_free_pbuf_custom_ref+0x34>)
 80179f0:	f000 ffec 	bl	80189cc <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 80179f4:	6879      	ldr	r1, [r7, #4]
 80179f6:	2005      	movs	r0, #5
 80179f8:	f7f5 f970 	bl	800ccdc <memp_free>
}
 80179fc:	bf00      	nop
 80179fe:	3708      	adds	r7, #8
 8017a00:	46bd      	mov	sp, r7
 8017a02:	bd80      	pop	{r7, pc}
 8017a04:	08020ac8 	.word	0x08020ac8
 8017a08:	08020c80 	.word	0x08020c80
 8017a0c:	08020b10 	.word	0x08020b10

08017a10 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8017a10:	b580      	push	{r7, lr}
 8017a12:	b084      	sub	sp, #16
 8017a14:	af00      	add	r7, sp, #0
 8017a16:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8017a18:	687b      	ldr	r3, [r7, #4]
 8017a1a:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8017a1c:	68fb      	ldr	r3, [r7, #12]
 8017a1e:	2b00      	cmp	r3, #0
 8017a20:	d106      	bne.n	8017a30 <ipfrag_free_pbuf_custom+0x20>
 8017a22:	4b11      	ldr	r3, [pc, #68]	; (8017a68 <ipfrag_free_pbuf_custom+0x58>)
 8017a24:	f240 22ce 	movw	r2, #718	; 0x2ce
 8017a28:	4910      	ldr	r1, [pc, #64]	; (8017a6c <ipfrag_free_pbuf_custom+0x5c>)
 8017a2a:	4811      	ldr	r0, [pc, #68]	; (8017a70 <ipfrag_free_pbuf_custom+0x60>)
 8017a2c:	f000 ffce 	bl	80189cc <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8017a30:	68fa      	ldr	r2, [r7, #12]
 8017a32:	687b      	ldr	r3, [r7, #4]
 8017a34:	429a      	cmp	r2, r3
 8017a36:	d006      	beq.n	8017a46 <ipfrag_free_pbuf_custom+0x36>
 8017a38:	4b0b      	ldr	r3, [pc, #44]	; (8017a68 <ipfrag_free_pbuf_custom+0x58>)
 8017a3a:	f240 22cf 	movw	r2, #719	; 0x2cf
 8017a3e:	490d      	ldr	r1, [pc, #52]	; (8017a74 <ipfrag_free_pbuf_custom+0x64>)
 8017a40:	480b      	ldr	r0, [pc, #44]	; (8017a70 <ipfrag_free_pbuf_custom+0x60>)
 8017a42:	f000 ffc3 	bl	80189cc <iprintf>
  if (pcr->original != NULL) {
 8017a46:	68fb      	ldr	r3, [r7, #12]
 8017a48:	695b      	ldr	r3, [r3, #20]
 8017a4a:	2b00      	cmp	r3, #0
 8017a4c:	d004      	beq.n	8017a58 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8017a4e:	68fb      	ldr	r3, [r7, #12]
 8017a50:	695b      	ldr	r3, [r3, #20]
 8017a52:	4618      	mov	r0, r3
 8017a54:	f7f5 ff3c 	bl	800d8d0 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8017a58:	68f8      	ldr	r0, [r7, #12]
 8017a5a:	f7ff ffbd 	bl	80179d8 <ip_frag_free_pbuf_custom_ref>
}
 8017a5e:	bf00      	nop
 8017a60:	3710      	adds	r7, #16
 8017a62:	46bd      	mov	sp, r7
 8017a64:	bd80      	pop	{r7, pc}
 8017a66:	bf00      	nop
 8017a68:	08020ac8 	.word	0x08020ac8
 8017a6c:	08020c8c 	.word	0x08020c8c
 8017a70:	08020b10 	.word	0x08020b10
 8017a74:	08020c98 	.word	0x08020c98

08017a78 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8017a78:	b580      	push	{r7, lr}
 8017a7a:	b094      	sub	sp, #80	; 0x50
 8017a7c:	af02      	add	r7, sp, #8
 8017a7e:	60f8      	str	r0, [r7, #12]
 8017a80:	60b9      	str	r1, [r7, #8]
 8017a82:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8017a84:	2300      	movs	r3, #0
 8017a86:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8017a8a:	68bb      	ldr	r3, [r7, #8]
 8017a8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017a8e:	3b14      	subs	r3, #20
 8017a90:	2b00      	cmp	r3, #0
 8017a92:	da00      	bge.n	8017a96 <ip4_frag+0x1e>
 8017a94:	3307      	adds	r3, #7
 8017a96:	10db      	asrs	r3, r3, #3
 8017a98:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8017a9a:	2314      	movs	r3, #20
 8017a9c:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8017a9e:	68fb      	ldr	r3, [r7, #12]
 8017aa0:	685b      	ldr	r3, [r3, #4]
 8017aa2:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8017aa4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017aa6:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8017aa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017aaa:	781b      	ldrb	r3, [r3, #0]
 8017aac:	f003 030f 	and.w	r3, r3, #15
 8017ab0:	b2db      	uxtb	r3, r3
 8017ab2:	009b      	lsls	r3, r3, #2
 8017ab4:	b2db      	uxtb	r3, r3
 8017ab6:	2b14      	cmp	r3, #20
 8017ab8:	d002      	beq.n	8017ac0 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8017aba:	f06f 0305 	mvn.w	r3, #5
 8017abe:	e110      	b.n	8017ce2 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8017ac0:	68fb      	ldr	r3, [r7, #12]
 8017ac2:	895b      	ldrh	r3, [r3, #10]
 8017ac4:	2b13      	cmp	r3, #19
 8017ac6:	d809      	bhi.n	8017adc <ip4_frag+0x64>
 8017ac8:	4b88      	ldr	r3, [pc, #544]	; (8017cec <ip4_frag+0x274>)
 8017aca:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8017ace:	4988      	ldr	r1, [pc, #544]	; (8017cf0 <ip4_frag+0x278>)
 8017ad0:	4888      	ldr	r0, [pc, #544]	; (8017cf4 <ip4_frag+0x27c>)
 8017ad2:	f000 ff7b 	bl	80189cc <iprintf>
 8017ad6:	f06f 0305 	mvn.w	r3, #5
 8017ada:	e102      	b.n	8017ce2 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8017adc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017ade:	88db      	ldrh	r3, [r3, #6]
 8017ae0:	b29b      	uxth	r3, r3
 8017ae2:	4618      	mov	r0, r3
 8017ae4:	f7f4 fc58 	bl	800c398 <lwip_htons>
 8017ae8:	4603      	mov	r3, r0
 8017aea:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8017aec:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8017aee:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017af2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8017af6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8017af8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8017afc:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8017afe:	68fb      	ldr	r3, [r7, #12]
 8017b00:	891b      	ldrh	r3, [r3, #8]
 8017b02:	3b14      	subs	r3, #20
 8017b04:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8017b08:	e0e1      	b.n	8017cce <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8017b0a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8017b0c:	00db      	lsls	r3, r3, #3
 8017b0e:	b29b      	uxth	r3, r3
 8017b10:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8017b14:	4293      	cmp	r3, r2
 8017b16:	bf28      	it	cs
 8017b18:	4613      	movcs	r3, r2
 8017b1a:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8017b1c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8017b20:	2114      	movs	r1, #20
 8017b22:	200e      	movs	r0, #14
 8017b24:	f7f5 fbf0 	bl	800d308 <pbuf_alloc>
 8017b28:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8017b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017b2c:	2b00      	cmp	r3, #0
 8017b2e:	f000 80d5 	beq.w	8017cdc <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8017b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017b34:	895b      	ldrh	r3, [r3, #10]
 8017b36:	2b13      	cmp	r3, #19
 8017b38:	d806      	bhi.n	8017b48 <ip4_frag+0xd0>
 8017b3a:	4b6c      	ldr	r3, [pc, #432]	; (8017cec <ip4_frag+0x274>)
 8017b3c:	f44f 7249 	mov.w	r2, #804	; 0x324
 8017b40:	496d      	ldr	r1, [pc, #436]	; (8017cf8 <ip4_frag+0x280>)
 8017b42:	486c      	ldr	r0, [pc, #432]	; (8017cf4 <ip4_frag+0x27c>)
 8017b44:	f000 ff42 	bl	80189cc <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8017b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017b4a:	685b      	ldr	r3, [r3, #4]
 8017b4c:	2214      	movs	r2, #20
 8017b4e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8017b50:	4618      	mov	r0, r3
 8017b52:	f000 f9f7 	bl	8017f44 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8017b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017b58:	685b      	ldr	r3, [r3, #4]
 8017b5a:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8017b5c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8017b5e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8017b62:	e064      	b.n	8017c2e <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8017b64:	68fb      	ldr	r3, [r7, #12]
 8017b66:	895a      	ldrh	r2, [r3, #10]
 8017b68:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8017b6a:	1ad3      	subs	r3, r2, r3
 8017b6c:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8017b6e:	68fb      	ldr	r3, [r7, #12]
 8017b70:	895b      	ldrh	r3, [r3, #10]
 8017b72:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8017b74:	429a      	cmp	r2, r3
 8017b76:	d906      	bls.n	8017b86 <ip4_frag+0x10e>
 8017b78:	4b5c      	ldr	r3, [pc, #368]	; (8017cec <ip4_frag+0x274>)
 8017b7a:	f240 322d 	movw	r2, #813	; 0x32d
 8017b7e:	495f      	ldr	r1, [pc, #380]	; (8017cfc <ip4_frag+0x284>)
 8017b80:	485c      	ldr	r0, [pc, #368]	; (8017cf4 <ip4_frag+0x27c>)
 8017b82:	f000 ff23 	bl	80189cc <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8017b86:	8bfa      	ldrh	r2, [r7, #30]
 8017b88:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8017b8c:	4293      	cmp	r3, r2
 8017b8e:	bf28      	it	cs
 8017b90:	4613      	movcs	r3, r2
 8017b92:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8017b96:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8017b9a:	2b00      	cmp	r3, #0
 8017b9c:	d105      	bne.n	8017baa <ip4_frag+0x132>
        poff = 0;
 8017b9e:	2300      	movs	r3, #0
 8017ba0:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8017ba2:	68fb      	ldr	r3, [r7, #12]
 8017ba4:	681b      	ldr	r3, [r3, #0]
 8017ba6:	60fb      	str	r3, [r7, #12]
        continue;
 8017ba8:	e041      	b.n	8017c2e <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8017baa:	f7ff ff0d 	bl	80179c8 <ip_frag_alloc_pbuf_custom_ref>
 8017bae:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8017bb0:	69bb      	ldr	r3, [r7, #24]
 8017bb2:	2b00      	cmp	r3, #0
 8017bb4:	d103      	bne.n	8017bbe <ip4_frag+0x146>
        pbuf_free(rambuf);
 8017bb6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017bb8:	f7f5 fe8a 	bl	800d8d0 <pbuf_free>
        goto memerr;
 8017bbc:	e08f      	b.n	8017cde <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8017bbe:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8017bc0:	68fb      	ldr	r3, [r7, #12]
 8017bc2:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8017bc4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8017bc6:	4413      	add	r3, r2
 8017bc8:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8017bcc:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8017bd0:	9201      	str	r2, [sp, #4]
 8017bd2:	9300      	str	r3, [sp, #0]
 8017bd4:	4603      	mov	r3, r0
 8017bd6:	2241      	movs	r2, #65	; 0x41
 8017bd8:	2000      	movs	r0, #0
 8017bda:	f7f5 fcbf 	bl	800d55c <pbuf_alloced_custom>
 8017bde:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8017be0:	697b      	ldr	r3, [r7, #20]
 8017be2:	2b00      	cmp	r3, #0
 8017be4:	d106      	bne.n	8017bf4 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8017be6:	69b8      	ldr	r0, [r7, #24]
 8017be8:	f7ff fef6 	bl	80179d8 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8017bec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017bee:	f7f5 fe6f 	bl	800d8d0 <pbuf_free>
        goto memerr;
 8017bf2:	e074      	b.n	8017cde <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8017bf4:	68f8      	ldr	r0, [r7, #12]
 8017bf6:	f7f5 ff0b 	bl	800da10 <pbuf_ref>
      pcr->original = p;
 8017bfa:	69bb      	ldr	r3, [r7, #24]
 8017bfc:	68fa      	ldr	r2, [r7, #12]
 8017bfe:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8017c00:	69bb      	ldr	r3, [r7, #24]
 8017c02:	4a3f      	ldr	r2, [pc, #252]	; (8017d00 <ip4_frag+0x288>)
 8017c04:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8017c06:	6979      	ldr	r1, [r7, #20]
 8017c08:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017c0a:	f7f5 ff23 	bl	800da54 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8017c0e:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8017c12:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8017c16:	1ad3      	subs	r3, r2, r3
 8017c18:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8017c1c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8017c20:	2b00      	cmp	r3, #0
 8017c22:	d004      	beq.n	8017c2e <ip4_frag+0x1b6>
        poff = 0;
 8017c24:	2300      	movs	r3, #0
 8017c26:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8017c28:	68fb      	ldr	r3, [r7, #12]
 8017c2a:	681b      	ldr	r3, [r3, #0]
 8017c2c:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8017c2e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8017c32:	2b00      	cmp	r3, #0
 8017c34:	d196      	bne.n	8017b64 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8017c36:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8017c38:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8017c3c:	4413      	add	r3, r2
 8017c3e:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8017c40:	68bb      	ldr	r3, [r7, #8]
 8017c42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017c44:	f1a3 0213 	sub.w	r2, r3, #19
 8017c48:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8017c4c:	429a      	cmp	r2, r3
 8017c4e:	bfcc      	ite	gt
 8017c50:	2301      	movgt	r3, #1
 8017c52:	2300      	movle	r3, #0
 8017c54:	b2db      	uxtb	r3, r3
 8017c56:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8017c58:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8017c5c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017c60:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8017c62:	6a3b      	ldr	r3, [r7, #32]
 8017c64:	2b00      	cmp	r3, #0
 8017c66:	d002      	beq.n	8017c6e <ip4_frag+0x1f6>
 8017c68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017c6a:	2b00      	cmp	r3, #0
 8017c6c:	d003      	beq.n	8017c76 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8017c6e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8017c70:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8017c74:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8017c76:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8017c78:	4618      	mov	r0, r3
 8017c7a:	f7f4 fb8d 	bl	800c398 <lwip_htons>
 8017c7e:	4603      	mov	r3, r0
 8017c80:	461a      	mov	r2, r3
 8017c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017c84:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8017c86:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8017c88:	3314      	adds	r3, #20
 8017c8a:	b29b      	uxth	r3, r3
 8017c8c:	4618      	mov	r0, r3
 8017c8e:	f7f4 fb83 	bl	800c398 <lwip_htons>
 8017c92:	4603      	mov	r3, r0
 8017c94:	461a      	mov	r2, r3
 8017c96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017c98:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8017c9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017c9c:	2200      	movs	r2, #0
 8017c9e:	729a      	strb	r2, [r3, #10]
 8017ca0:	2200      	movs	r2, #0
 8017ca2:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8017ca4:	68bb      	ldr	r3, [r7, #8]
 8017ca6:	695b      	ldr	r3, [r3, #20]
 8017ca8:	687a      	ldr	r2, [r7, #4]
 8017caa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8017cac:	68b8      	ldr	r0, [r7, #8]
 8017cae:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8017cb0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017cb2:	f7f5 fe0d 	bl	800d8d0 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8017cb6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8017cba:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8017cbc:	1ad3      	subs	r3, r2, r3
 8017cbe:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8017cc2:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8017cc6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8017cc8:	4413      	add	r3, r2
 8017cca:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8017cce:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8017cd2:	2b00      	cmp	r3, #0
 8017cd4:	f47f af19 	bne.w	8017b0a <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8017cd8:	2300      	movs	r3, #0
 8017cda:	e002      	b.n	8017ce2 <ip4_frag+0x26a>
      goto memerr;
 8017cdc:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8017cde:	f04f 33ff 	mov.w	r3, #4294967295
}
 8017ce2:	4618      	mov	r0, r3
 8017ce4:	3748      	adds	r7, #72	; 0x48
 8017ce6:	46bd      	mov	sp, r7
 8017ce8:	bd80      	pop	{r7, pc}
 8017cea:	bf00      	nop
 8017cec:	08020ac8 	.word	0x08020ac8
 8017cf0:	08020ca4 	.word	0x08020ca4
 8017cf4:	08020b10 	.word	0x08020b10
 8017cf8:	08020cc0 	.word	0x08020cc0
 8017cfc:	08020ce0 	.word	0x08020ce0
 8017d00:	08017a11 	.word	0x08017a11

08017d04 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8017d04:	b580      	push	{r7, lr}
 8017d06:	b086      	sub	sp, #24
 8017d08:	af00      	add	r7, sp, #0
 8017d0a:	6078      	str	r0, [r7, #4]
 8017d0c:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8017d0e:	230e      	movs	r3, #14
 8017d10:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8017d12:	687b      	ldr	r3, [r7, #4]
 8017d14:	895b      	ldrh	r3, [r3, #10]
 8017d16:	2b0e      	cmp	r3, #14
 8017d18:	d96e      	bls.n	8017df8 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8017d1a:	687b      	ldr	r3, [r7, #4]
 8017d1c:	7bdb      	ldrb	r3, [r3, #15]
 8017d1e:	2b00      	cmp	r3, #0
 8017d20:	d106      	bne.n	8017d30 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8017d22:	683b      	ldr	r3, [r7, #0]
 8017d24:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8017d28:	3301      	adds	r3, #1
 8017d2a:	b2da      	uxtb	r2, r3
 8017d2c:	687b      	ldr	r3, [r7, #4]
 8017d2e:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8017d30:	687b      	ldr	r3, [r7, #4]
 8017d32:	685b      	ldr	r3, [r3, #4]
 8017d34:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8017d36:	693b      	ldr	r3, [r7, #16]
 8017d38:	7b1a      	ldrb	r2, [r3, #12]
 8017d3a:	7b5b      	ldrb	r3, [r3, #13]
 8017d3c:	021b      	lsls	r3, r3, #8
 8017d3e:	4313      	orrs	r3, r2
 8017d40:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8017d42:	693b      	ldr	r3, [r7, #16]
 8017d44:	781b      	ldrb	r3, [r3, #0]
 8017d46:	f003 0301 	and.w	r3, r3, #1
 8017d4a:	2b00      	cmp	r3, #0
 8017d4c:	d023      	beq.n	8017d96 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8017d4e:	693b      	ldr	r3, [r7, #16]
 8017d50:	781b      	ldrb	r3, [r3, #0]
 8017d52:	2b01      	cmp	r3, #1
 8017d54:	d10f      	bne.n	8017d76 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8017d56:	693b      	ldr	r3, [r7, #16]
 8017d58:	785b      	ldrb	r3, [r3, #1]
 8017d5a:	2b00      	cmp	r3, #0
 8017d5c:	d11b      	bne.n	8017d96 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8017d5e:	693b      	ldr	r3, [r7, #16]
 8017d60:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8017d62:	2b5e      	cmp	r3, #94	; 0x5e
 8017d64:	d117      	bne.n	8017d96 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8017d66:	687b      	ldr	r3, [r7, #4]
 8017d68:	7b5b      	ldrb	r3, [r3, #13]
 8017d6a:	f043 0310 	orr.w	r3, r3, #16
 8017d6e:	b2da      	uxtb	r2, r3
 8017d70:	687b      	ldr	r3, [r7, #4]
 8017d72:	735a      	strb	r2, [r3, #13]
 8017d74:	e00f      	b.n	8017d96 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8017d76:	693b      	ldr	r3, [r7, #16]
 8017d78:	2206      	movs	r2, #6
 8017d7a:	4928      	ldr	r1, [pc, #160]	; (8017e1c <ethernet_input+0x118>)
 8017d7c:	4618      	mov	r0, r3
 8017d7e:	f000 f8d3 	bl	8017f28 <memcmp>
 8017d82:	4603      	mov	r3, r0
 8017d84:	2b00      	cmp	r3, #0
 8017d86:	d106      	bne.n	8017d96 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8017d88:	687b      	ldr	r3, [r7, #4]
 8017d8a:	7b5b      	ldrb	r3, [r3, #13]
 8017d8c:	f043 0308 	orr.w	r3, r3, #8
 8017d90:	b2da      	uxtb	r2, r3
 8017d92:	687b      	ldr	r3, [r7, #4]
 8017d94:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8017d96:	89fb      	ldrh	r3, [r7, #14]
 8017d98:	2b08      	cmp	r3, #8
 8017d9a:	d003      	beq.n	8017da4 <ethernet_input+0xa0>
 8017d9c:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8017da0:	d014      	beq.n	8017dcc <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8017da2:	e032      	b.n	8017e0a <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8017da4:	683b      	ldr	r3, [r7, #0]
 8017da6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8017daa:	f003 0308 	and.w	r3, r3, #8
 8017dae:	2b00      	cmp	r3, #0
 8017db0:	d024      	beq.n	8017dfc <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8017db2:	8afb      	ldrh	r3, [r7, #22]
 8017db4:	4619      	mov	r1, r3
 8017db6:	6878      	ldr	r0, [r7, #4]
 8017db8:	f7f5 fd04 	bl	800d7c4 <pbuf_remove_header>
 8017dbc:	4603      	mov	r3, r0
 8017dbe:	2b00      	cmp	r3, #0
 8017dc0:	d11e      	bne.n	8017e00 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8017dc2:	6839      	ldr	r1, [r7, #0]
 8017dc4:	6878      	ldr	r0, [r7, #4]
 8017dc6:	f7fe ff09 	bl	8016bdc <ip4_input>
      break;
 8017dca:	e013      	b.n	8017df4 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8017dcc:	683b      	ldr	r3, [r7, #0]
 8017dce:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8017dd2:	f003 0308 	and.w	r3, r3, #8
 8017dd6:	2b00      	cmp	r3, #0
 8017dd8:	d014      	beq.n	8017e04 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8017dda:	8afb      	ldrh	r3, [r7, #22]
 8017ddc:	4619      	mov	r1, r3
 8017dde:	6878      	ldr	r0, [r7, #4]
 8017de0:	f7f5 fcf0 	bl	800d7c4 <pbuf_remove_header>
 8017de4:	4603      	mov	r3, r0
 8017de6:	2b00      	cmp	r3, #0
 8017de8:	d10e      	bne.n	8017e08 <ethernet_input+0x104>
        etharp_input(p, netif);
 8017dea:	6839      	ldr	r1, [r7, #0]
 8017dec:	6878      	ldr	r0, [r7, #4]
 8017dee:	f7fe f8a5 	bl	8015f3c <etharp_input>
      break;
 8017df2:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8017df4:	2300      	movs	r3, #0
 8017df6:	e00c      	b.n	8017e12 <ethernet_input+0x10e>
    goto free_and_return;
 8017df8:	bf00      	nop
 8017dfa:	e006      	b.n	8017e0a <ethernet_input+0x106>
        goto free_and_return;
 8017dfc:	bf00      	nop
 8017dfe:	e004      	b.n	8017e0a <ethernet_input+0x106>
        goto free_and_return;
 8017e00:	bf00      	nop
 8017e02:	e002      	b.n	8017e0a <ethernet_input+0x106>
        goto free_and_return;
 8017e04:	bf00      	nop
 8017e06:	e000      	b.n	8017e0a <ethernet_input+0x106>
        goto free_and_return;
 8017e08:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8017e0a:	6878      	ldr	r0, [r7, #4]
 8017e0c:	f7f5 fd60 	bl	800d8d0 <pbuf_free>
  return ERR_OK;
 8017e10:	2300      	movs	r3, #0
}
 8017e12:	4618      	mov	r0, r3
 8017e14:	3718      	adds	r7, #24
 8017e16:	46bd      	mov	sp, r7
 8017e18:	bd80      	pop	{r7, pc}
 8017e1a:	bf00      	nop
 8017e1c:	08020e94 	.word	0x08020e94

08017e20 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8017e20:	b580      	push	{r7, lr}
 8017e22:	b086      	sub	sp, #24
 8017e24:	af00      	add	r7, sp, #0
 8017e26:	60f8      	str	r0, [r7, #12]
 8017e28:	60b9      	str	r1, [r7, #8]
 8017e2a:	607a      	str	r2, [r7, #4]
 8017e2c:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8017e2e:	8c3b      	ldrh	r3, [r7, #32]
 8017e30:	4618      	mov	r0, r3
 8017e32:	f7f4 fab1 	bl	800c398 <lwip_htons>
 8017e36:	4603      	mov	r3, r0
 8017e38:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8017e3a:	210e      	movs	r1, #14
 8017e3c:	68b8      	ldr	r0, [r7, #8]
 8017e3e:	f7f5 fcb1 	bl	800d7a4 <pbuf_add_header>
 8017e42:	4603      	mov	r3, r0
 8017e44:	2b00      	cmp	r3, #0
 8017e46:	d125      	bne.n	8017e94 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8017e48:	68bb      	ldr	r3, [r7, #8]
 8017e4a:	685b      	ldr	r3, [r3, #4]
 8017e4c:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8017e4e:	693b      	ldr	r3, [r7, #16]
 8017e50:	8afa      	ldrh	r2, [r7, #22]
 8017e52:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8017e54:	693b      	ldr	r3, [r7, #16]
 8017e56:	2206      	movs	r2, #6
 8017e58:	6839      	ldr	r1, [r7, #0]
 8017e5a:	4618      	mov	r0, r3
 8017e5c:	f000 f872 	bl	8017f44 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8017e60:	693b      	ldr	r3, [r7, #16]
 8017e62:	3306      	adds	r3, #6
 8017e64:	2206      	movs	r2, #6
 8017e66:	6879      	ldr	r1, [r7, #4]
 8017e68:	4618      	mov	r0, r3
 8017e6a:	f000 f86b 	bl	8017f44 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8017e6e:	68fb      	ldr	r3, [r7, #12]
 8017e70:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8017e74:	2b06      	cmp	r3, #6
 8017e76:	d006      	beq.n	8017e86 <ethernet_output+0x66>
 8017e78:	4b0a      	ldr	r3, [pc, #40]	; (8017ea4 <ethernet_output+0x84>)
 8017e7a:	f44f 7299 	mov.w	r2, #306	; 0x132
 8017e7e:	490a      	ldr	r1, [pc, #40]	; (8017ea8 <ethernet_output+0x88>)
 8017e80:	480a      	ldr	r0, [pc, #40]	; (8017eac <ethernet_output+0x8c>)
 8017e82:	f000 fda3 	bl	80189cc <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8017e86:	68fb      	ldr	r3, [r7, #12]
 8017e88:	699b      	ldr	r3, [r3, #24]
 8017e8a:	68b9      	ldr	r1, [r7, #8]
 8017e8c:	68f8      	ldr	r0, [r7, #12]
 8017e8e:	4798      	blx	r3
 8017e90:	4603      	mov	r3, r0
 8017e92:	e002      	b.n	8017e9a <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8017e94:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8017e96:	f06f 0301 	mvn.w	r3, #1
}
 8017e9a:	4618      	mov	r0, r3
 8017e9c:	3718      	adds	r7, #24
 8017e9e:	46bd      	mov	sp, r7
 8017ea0:	bd80      	pop	{r7, pc}
 8017ea2:	bf00      	nop
 8017ea4:	08020cf0 	.word	0x08020cf0
 8017ea8:	08020d28 	.word	0x08020d28
 8017eac:	08020d5c 	.word	0x08020d5c

08017eb0 <atof>:
 8017eb0:	2100      	movs	r1, #0
 8017eb2:	f001 bc97 	b.w	80197e4 <strtod>

08017eb6 <atoi>:
 8017eb6:	220a      	movs	r2, #10
 8017eb8:	2100      	movs	r1, #0
 8017eba:	f001 bd23 	b.w	8019904 <strtol>
	...

08017ec0 <__libc_init_array>:
 8017ec0:	b570      	push	{r4, r5, r6, lr}
 8017ec2:	4d0d      	ldr	r5, [pc, #52]	; (8017ef8 <__libc_init_array+0x38>)
 8017ec4:	4c0d      	ldr	r4, [pc, #52]	; (8017efc <__libc_init_array+0x3c>)
 8017ec6:	1b64      	subs	r4, r4, r5
 8017ec8:	10a4      	asrs	r4, r4, #2
 8017eca:	2600      	movs	r6, #0
 8017ecc:	42a6      	cmp	r6, r4
 8017ece:	d109      	bne.n	8017ee4 <__libc_init_array+0x24>
 8017ed0:	4d0b      	ldr	r5, [pc, #44]	; (8017f00 <__libc_init_array+0x40>)
 8017ed2:	4c0c      	ldr	r4, [pc, #48]	; (8017f04 <__libc_init_array+0x44>)
 8017ed4:	f005 faa6 	bl	801d424 <_init>
 8017ed8:	1b64      	subs	r4, r4, r5
 8017eda:	10a4      	asrs	r4, r4, #2
 8017edc:	2600      	movs	r6, #0
 8017ede:	42a6      	cmp	r6, r4
 8017ee0:	d105      	bne.n	8017eee <__libc_init_array+0x2e>
 8017ee2:	bd70      	pop	{r4, r5, r6, pc}
 8017ee4:	f855 3b04 	ldr.w	r3, [r5], #4
 8017ee8:	4798      	blx	r3
 8017eea:	3601      	adds	r6, #1
 8017eec:	e7ee      	b.n	8017ecc <__libc_init_array+0xc>
 8017eee:	f855 3b04 	ldr.w	r3, [r5], #4
 8017ef2:	4798      	blx	r3
 8017ef4:	3601      	adds	r6, #1
 8017ef6:	e7f2      	b.n	8017ede <__libc_init_array+0x1e>
 8017ef8:	08021400 	.word	0x08021400
 8017efc:	08021400 	.word	0x08021400
 8017f00:	08021400 	.word	0x08021400
 8017f04:	08021404 	.word	0x08021404

08017f08 <malloc>:
 8017f08:	4b02      	ldr	r3, [pc, #8]	; (8017f14 <malloc+0xc>)
 8017f0a:	4601      	mov	r1, r0
 8017f0c:	6818      	ldr	r0, [r3, #0]
 8017f0e:	f000 b899 	b.w	8018044 <_malloc_r>
 8017f12:	bf00      	nop
 8017f14:	20000074 	.word	0x20000074

08017f18 <free>:
 8017f18:	4b02      	ldr	r3, [pc, #8]	; (8017f24 <free+0xc>)
 8017f1a:	4601      	mov	r1, r0
 8017f1c:	6818      	ldr	r0, [r3, #0]
 8017f1e:	f000 b841 	b.w	8017fa4 <_free_r>
 8017f22:	bf00      	nop
 8017f24:	20000074 	.word	0x20000074

08017f28 <memcmp>:
 8017f28:	b530      	push	{r4, r5, lr}
 8017f2a:	3901      	subs	r1, #1
 8017f2c:	2400      	movs	r4, #0
 8017f2e:	42a2      	cmp	r2, r4
 8017f30:	d101      	bne.n	8017f36 <memcmp+0xe>
 8017f32:	2000      	movs	r0, #0
 8017f34:	e005      	b.n	8017f42 <memcmp+0x1a>
 8017f36:	5d03      	ldrb	r3, [r0, r4]
 8017f38:	3401      	adds	r4, #1
 8017f3a:	5d0d      	ldrb	r5, [r1, r4]
 8017f3c:	42ab      	cmp	r3, r5
 8017f3e:	d0f6      	beq.n	8017f2e <memcmp+0x6>
 8017f40:	1b58      	subs	r0, r3, r5
 8017f42:	bd30      	pop	{r4, r5, pc}

08017f44 <memcpy>:
 8017f44:	440a      	add	r2, r1
 8017f46:	4291      	cmp	r1, r2
 8017f48:	f100 33ff 	add.w	r3, r0, #4294967295
 8017f4c:	d100      	bne.n	8017f50 <memcpy+0xc>
 8017f4e:	4770      	bx	lr
 8017f50:	b510      	push	{r4, lr}
 8017f52:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017f56:	f803 4f01 	strb.w	r4, [r3, #1]!
 8017f5a:	4291      	cmp	r1, r2
 8017f5c:	d1f9      	bne.n	8017f52 <memcpy+0xe>
 8017f5e:	bd10      	pop	{r4, pc}

08017f60 <memmove>:
 8017f60:	4288      	cmp	r0, r1
 8017f62:	b510      	push	{r4, lr}
 8017f64:	eb01 0402 	add.w	r4, r1, r2
 8017f68:	d902      	bls.n	8017f70 <memmove+0x10>
 8017f6a:	4284      	cmp	r4, r0
 8017f6c:	4623      	mov	r3, r4
 8017f6e:	d807      	bhi.n	8017f80 <memmove+0x20>
 8017f70:	1e43      	subs	r3, r0, #1
 8017f72:	42a1      	cmp	r1, r4
 8017f74:	d008      	beq.n	8017f88 <memmove+0x28>
 8017f76:	f811 2b01 	ldrb.w	r2, [r1], #1
 8017f7a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8017f7e:	e7f8      	b.n	8017f72 <memmove+0x12>
 8017f80:	4402      	add	r2, r0
 8017f82:	4601      	mov	r1, r0
 8017f84:	428a      	cmp	r2, r1
 8017f86:	d100      	bne.n	8017f8a <memmove+0x2a>
 8017f88:	bd10      	pop	{r4, pc}
 8017f8a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8017f8e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8017f92:	e7f7      	b.n	8017f84 <memmove+0x24>

08017f94 <memset>:
 8017f94:	4402      	add	r2, r0
 8017f96:	4603      	mov	r3, r0
 8017f98:	4293      	cmp	r3, r2
 8017f9a:	d100      	bne.n	8017f9e <memset+0xa>
 8017f9c:	4770      	bx	lr
 8017f9e:	f803 1b01 	strb.w	r1, [r3], #1
 8017fa2:	e7f9      	b.n	8017f98 <memset+0x4>

08017fa4 <_free_r>:
 8017fa4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017fa6:	2900      	cmp	r1, #0
 8017fa8:	d048      	beq.n	801803c <_free_r+0x98>
 8017faa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017fae:	9001      	str	r0, [sp, #4]
 8017fb0:	2b00      	cmp	r3, #0
 8017fb2:	f1a1 0404 	sub.w	r4, r1, #4
 8017fb6:	bfb8      	it	lt
 8017fb8:	18e4      	addlt	r4, r4, r3
 8017fba:	f002 ffdb 	bl	801af74 <__malloc_lock>
 8017fbe:	4a20      	ldr	r2, [pc, #128]	; (8018040 <_free_r+0x9c>)
 8017fc0:	9801      	ldr	r0, [sp, #4]
 8017fc2:	6813      	ldr	r3, [r2, #0]
 8017fc4:	4615      	mov	r5, r2
 8017fc6:	b933      	cbnz	r3, 8017fd6 <_free_r+0x32>
 8017fc8:	6063      	str	r3, [r4, #4]
 8017fca:	6014      	str	r4, [r2, #0]
 8017fcc:	b003      	add	sp, #12
 8017fce:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017fd2:	f002 bfd5 	b.w	801af80 <__malloc_unlock>
 8017fd6:	42a3      	cmp	r3, r4
 8017fd8:	d90b      	bls.n	8017ff2 <_free_r+0x4e>
 8017fda:	6821      	ldr	r1, [r4, #0]
 8017fdc:	1862      	adds	r2, r4, r1
 8017fde:	4293      	cmp	r3, r2
 8017fe0:	bf04      	itt	eq
 8017fe2:	681a      	ldreq	r2, [r3, #0]
 8017fe4:	685b      	ldreq	r3, [r3, #4]
 8017fe6:	6063      	str	r3, [r4, #4]
 8017fe8:	bf04      	itt	eq
 8017fea:	1852      	addeq	r2, r2, r1
 8017fec:	6022      	streq	r2, [r4, #0]
 8017fee:	602c      	str	r4, [r5, #0]
 8017ff0:	e7ec      	b.n	8017fcc <_free_r+0x28>
 8017ff2:	461a      	mov	r2, r3
 8017ff4:	685b      	ldr	r3, [r3, #4]
 8017ff6:	b10b      	cbz	r3, 8017ffc <_free_r+0x58>
 8017ff8:	42a3      	cmp	r3, r4
 8017ffa:	d9fa      	bls.n	8017ff2 <_free_r+0x4e>
 8017ffc:	6811      	ldr	r1, [r2, #0]
 8017ffe:	1855      	adds	r5, r2, r1
 8018000:	42a5      	cmp	r5, r4
 8018002:	d10b      	bne.n	801801c <_free_r+0x78>
 8018004:	6824      	ldr	r4, [r4, #0]
 8018006:	4421      	add	r1, r4
 8018008:	1854      	adds	r4, r2, r1
 801800a:	42a3      	cmp	r3, r4
 801800c:	6011      	str	r1, [r2, #0]
 801800e:	d1dd      	bne.n	8017fcc <_free_r+0x28>
 8018010:	681c      	ldr	r4, [r3, #0]
 8018012:	685b      	ldr	r3, [r3, #4]
 8018014:	6053      	str	r3, [r2, #4]
 8018016:	4421      	add	r1, r4
 8018018:	6011      	str	r1, [r2, #0]
 801801a:	e7d7      	b.n	8017fcc <_free_r+0x28>
 801801c:	d902      	bls.n	8018024 <_free_r+0x80>
 801801e:	230c      	movs	r3, #12
 8018020:	6003      	str	r3, [r0, #0]
 8018022:	e7d3      	b.n	8017fcc <_free_r+0x28>
 8018024:	6825      	ldr	r5, [r4, #0]
 8018026:	1961      	adds	r1, r4, r5
 8018028:	428b      	cmp	r3, r1
 801802a:	bf04      	itt	eq
 801802c:	6819      	ldreq	r1, [r3, #0]
 801802e:	685b      	ldreq	r3, [r3, #4]
 8018030:	6063      	str	r3, [r4, #4]
 8018032:	bf04      	itt	eq
 8018034:	1949      	addeq	r1, r1, r5
 8018036:	6021      	streq	r1, [r4, #0]
 8018038:	6054      	str	r4, [r2, #4]
 801803a:	e7c7      	b.n	8017fcc <_free_r+0x28>
 801803c:	b003      	add	sp, #12
 801803e:	bd30      	pop	{r4, r5, pc}
 8018040:	200005e4 	.word	0x200005e4

08018044 <_malloc_r>:
 8018044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018046:	1ccd      	adds	r5, r1, #3
 8018048:	f025 0503 	bic.w	r5, r5, #3
 801804c:	3508      	adds	r5, #8
 801804e:	2d0c      	cmp	r5, #12
 8018050:	bf38      	it	cc
 8018052:	250c      	movcc	r5, #12
 8018054:	2d00      	cmp	r5, #0
 8018056:	4606      	mov	r6, r0
 8018058:	db01      	blt.n	801805e <_malloc_r+0x1a>
 801805a:	42a9      	cmp	r1, r5
 801805c:	d903      	bls.n	8018066 <_malloc_r+0x22>
 801805e:	230c      	movs	r3, #12
 8018060:	6033      	str	r3, [r6, #0]
 8018062:	2000      	movs	r0, #0
 8018064:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018066:	f002 ff85 	bl	801af74 <__malloc_lock>
 801806a:	4921      	ldr	r1, [pc, #132]	; (80180f0 <_malloc_r+0xac>)
 801806c:	680a      	ldr	r2, [r1, #0]
 801806e:	4614      	mov	r4, r2
 8018070:	b99c      	cbnz	r4, 801809a <_malloc_r+0x56>
 8018072:	4f20      	ldr	r7, [pc, #128]	; (80180f4 <_malloc_r+0xb0>)
 8018074:	683b      	ldr	r3, [r7, #0]
 8018076:	b923      	cbnz	r3, 8018082 <_malloc_r+0x3e>
 8018078:	4621      	mov	r1, r4
 801807a:	4630      	mov	r0, r6
 801807c:	f000 fcfe 	bl	8018a7c <_sbrk_r>
 8018080:	6038      	str	r0, [r7, #0]
 8018082:	4629      	mov	r1, r5
 8018084:	4630      	mov	r0, r6
 8018086:	f000 fcf9 	bl	8018a7c <_sbrk_r>
 801808a:	1c43      	adds	r3, r0, #1
 801808c:	d123      	bne.n	80180d6 <_malloc_r+0x92>
 801808e:	230c      	movs	r3, #12
 8018090:	6033      	str	r3, [r6, #0]
 8018092:	4630      	mov	r0, r6
 8018094:	f002 ff74 	bl	801af80 <__malloc_unlock>
 8018098:	e7e3      	b.n	8018062 <_malloc_r+0x1e>
 801809a:	6823      	ldr	r3, [r4, #0]
 801809c:	1b5b      	subs	r3, r3, r5
 801809e:	d417      	bmi.n	80180d0 <_malloc_r+0x8c>
 80180a0:	2b0b      	cmp	r3, #11
 80180a2:	d903      	bls.n	80180ac <_malloc_r+0x68>
 80180a4:	6023      	str	r3, [r4, #0]
 80180a6:	441c      	add	r4, r3
 80180a8:	6025      	str	r5, [r4, #0]
 80180aa:	e004      	b.n	80180b6 <_malloc_r+0x72>
 80180ac:	6863      	ldr	r3, [r4, #4]
 80180ae:	42a2      	cmp	r2, r4
 80180b0:	bf0c      	ite	eq
 80180b2:	600b      	streq	r3, [r1, #0]
 80180b4:	6053      	strne	r3, [r2, #4]
 80180b6:	4630      	mov	r0, r6
 80180b8:	f002 ff62 	bl	801af80 <__malloc_unlock>
 80180bc:	f104 000b 	add.w	r0, r4, #11
 80180c0:	1d23      	adds	r3, r4, #4
 80180c2:	f020 0007 	bic.w	r0, r0, #7
 80180c6:	1ac2      	subs	r2, r0, r3
 80180c8:	d0cc      	beq.n	8018064 <_malloc_r+0x20>
 80180ca:	1a1b      	subs	r3, r3, r0
 80180cc:	50a3      	str	r3, [r4, r2]
 80180ce:	e7c9      	b.n	8018064 <_malloc_r+0x20>
 80180d0:	4622      	mov	r2, r4
 80180d2:	6864      	ldr	r4, [r4, #4]
 80180d4:	e7cc      	b.n	8018070 <_malloc_r+0x2c>
 80180d6:	1cc4      	adds	r4, r0, #3
 80180d8:	f024 0403 	bic.w	r4, r4, #3
 80180dc:	42a0      	cmp	r0, r4
 80180de:	d0e3      	beq.n	80180a8 <_malloc_r+0x64>
 80180e0:	1a21      	subs	r1, r4, r0
 80180e2:	4630      	mov	r0, r6
 80180e4:	f000 fcca 	bl	8018a7c <_sbrk_r>
 80180e8:	3001      	adds	r0, #1
 80180ea:	d1dd      	bne.n	80180a8 <_malloc_r+0x64>
 80180ec:	e7cf      	b.n	801808e <_malloc_r+0x4a>
 80180ee:	bf00      	nop
 80180f0:	200005e4 	.word	0x200005e4
 80180f4:	200005e8 	.word	0x200005e8

080180f8 <__cvt>:
 80180f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80180fc:	ec55 4b10 	vmov	r4, r5, d0
 8018100:	2d00      	cmp	r5, #0
 8018102:	460e      	mov	r6, r1
 8018104:	4619      	mov	r1, r3
 8018106:	462b      	mov	r3, r5
 8018108:	bfbb      	ittet	lt
 801810a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801810e:	461d      	movlt	r5, r3
 8018110:	2300      	movge	r3, #0
 8018112:	232d      	movlt	r3, #45	; 0x2d
 8018114:	700b      	strb	r3, [r1, #0]
 8018116:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018118:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 801811c:	4691      	mov	r9, r2
 801811e:	f023 0820 	bic.w	r8, r3, #32
 8018122:	bfbc      	itt	lt
 8018124:	4622      	movlt	r2, r4
 8018126:	4614      	movlt	r4, r2
 8018128:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801812c:	d005      	beq.n	801813a <__cvt+0x42>
 801812e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8018132:	d100      	bne.n	8018136 <__cvt+0x3e>
 8018134:	3601      	adds	r6, #1
 8018136:	2102      	movs	r1, #2
 8018138:	e000      	b.n	801813c <__cvt+0x44>
 801813a:	2103      	movs	r1, #3
 801813c:	ab03      	add	r3, sp, #12
 801813e:	9301      	str	r3, [sp, #4]
 8018140:	ab02      	add	r3, sp, #8
 8018142:	9300      	str	r3, [sp, #0]
 8018144:	ec45 4b10 	vmov	d0, r4, r5
 8018148:	4653      	mov	r3, sl
 801814a:	4632      	mov	r2, r6
 801814c:	f001 fc90 	bl	8019a70 <_dtoa_r>
 8018150:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8018154:	4607      	mov	r7, r0
 8018156:	d102      	bne.n	801815e <__cvt+0x66>
 8018158:	f019 0f01 	tst.w	r9, #1
 801815c:	d022      	beq.n	80181a4 <__cvt+0xac>
 801815e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8018162:	eb07 0906 	add.w	r9, r7, r6
 8018166:	d110      	bne.n	801818a <__cvt+0x92>
 8018168:	783b      	ldrb	r3, [r7, #0]
 801816a:	2b30      	cmp	r3, #48	; 0x30
 801816c:	d10a      	bne.n	8018184 <__cvt+0x8c>
 801816e:	2200      	movs	r2, #0
 8018170:	2300      	movs	r3, #0
 8018172:	4620      	mov	r0, r4
 8018174:	4629      	mov	r1, r5
 8018176:	f7e8 fcb7 	bl	8000ae8 <__aeabi_dcmpeq>
 801817a:	b918      	cbnz	r0, 8018184 <__cvt+0x8c>
 801817c:	f1c6 0601 	rsb	r6, r6, #1
 8018180:	f8ca 6000 	str.w	r6, [sl]
 8018184:	f8da 3000 	ldr.w	r3, [sl]
 8018188:	4499      	add	r9, r3
 801818a:	2200      	movs	r2, #0
 801818c:	2300      	movs	r3, #0
 801818e:	4620      	mov	r0, r4
 8018190:	4629      	mov	r1, r5
 8018192:	f7e8 fca9 	bl	8000ae8 <__aeabi_dcmpeq>
 8018196:	b108      	cbz	r0, 801819c <__cvt+0xa4>
 8018198:	f8cd 900c 	str.w	r9, [sp, #12]
 801819c:	2230      	movs	r2, #48	; 0x30
 801819e:	9b03      	ldr	r3, [sp, #12]
 80181a0:	454b      	cmp	r3, r9
 80181a2:	d307      	bcc.n	80181b4 <__cvt+0xbc>
 80181a4:	9b03      	ldr	r3, [sp, #12]
 80181a6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80181a8:	1bdb      	subs	r3, r3, r7
 80181aa:	4638      	mov	r0, r7
 80181ac:	6013      	str	r3, [r2, #0]
 80181ae:	b004      	add	sp, #16
 80181b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80181b4:	1c59      	adds	r1, r3, #1
 80181b6:	9103      	str	r1, [sp, #12]
 80181b8:	701a      	strb	r2, [r3, #0]
 80181ba:	e7f0      	b.n	801819e <__cvt+0xa6>

080181bc <__exponent>:
 80181bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80181be:	4603      	mov	r3, r0
 80181c0:	2900      	cmp	r1, #0
 80181c2:	bfb8      	it	lt
 80181c4:	4249      	neglt	r1, r1
 80181c6:	f803 2b02 	strb.w	r2, [r3], #2
 80181ca:	bfb4      	ite	lt
 80181cc:	222d      	movlt	r2, #45	; 0x2d
 80181ce:	222b      	movge	r2, #43	; 0x2b
 80181d0:	2909      	cmp	r1, #9
 80181d2:	7042      	strb	r2, [r0, #1]
 80181d4:	dd2a      	ble.n	801822c <__exponent+0x70>
 80181d6:	f10d 0407 	add.w	r4, sp, #7
 80181da:	46a4      	mov	ip, r4
 80181dc:	270a      	movs	r7, #10
 80181de:	46a6      	mov	lr, r4
 80181e0:	460a      	mov	r2, r1
 80181e2:	fb91 f6f7 	sdiv	r6, r1, r7
 80181e6:	fb07 1516 	mls	r5, r7, r6, r1
 80181ea:	3530      	adds	r5, #48	; 0x30
 80181ec:	2a63      	cmp	r2, #99	; 0x63
 80181ee:	f104 34ff 	add.w	r4, r4, #4294967295
 80181f2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80181f6:	4631      	mov	r1, r6
 80181f8:	dcf1      	bgt.n	80181de <__exponent+0x22>
 80181fa:	3130      	adds	r1, #48	; 0x30
 80181fc:	f1ae 0502 	sub.w	r5, lr, #2
 8018200:	f804 1c01 	strb.w	r1, [r4, #-1]
 8018204:	1c44      	adds	r4, r0, #1
 8018206:	4629      	mov	r1, r5
 8018208:	4561      	cmp	r1, ip
 801820a:	d30a      	bcc.n	8018222 <__exponent+0x66>
 801820c:	f10d 0209 	add.w	r2, sp, #9
 8018210:	eba2 020e 	sub.w	r2, r2, lr
 8018214:	4565      	cmp	r5, ip
 8018216:	bf88      	it	hi
 8018218:	2200      	movhi	r2, #0
 801821a:	4413      	add	r3, r2
 801821c:	1a18      	subs	r0, r3, r0
 801821e:	b003      	add	sp, #12
 8018220:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018222:	f811 2b01 	ldrb.w	r2, [r1], #1
 8018226:	f804 2f01 	strb.w	r2, [r4, #1]!
 801822a:	e7ed      	b.n	8018208 <__exponent+0x4c>
 801822c:	2330      	movs	r3, #48	; 0x30
 801822e:	3130      	adds	r1, #48	; 0x30
 8018230:	7083      	strb	r3, [r0, #2]
 8018232:	70c1      	strb	r1, [r0, #3]
 8018234:	1d03      	adds	r3, r0, #4
 8018236:	e7f1      	b.n	801821c <__exponent+0x60>

08018238 <_printf_float>:
 8018238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801823c:	ed2d 8b02 	vpush	{d8}
 8018240:	b08d      	sub	sp, #52	; 0x34
 8018242:	460c      	mov	r4, r1
 8018244:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8018248:	4616      	mov	r6, r2
 801824a:	461f      	mov	r7, r3
 801824c:	4605      	mov	r5, r0
 801824e:	f002 fe77 	bl	801af40 <_localeconv_r>
 8018252:	f8d0 a000 	ldr.w	sl, [r0]
 8018256:	4650      	mov	r0, sl
 8018258:	f7e7 ffc4 	bl	80001e4 <strlen>
 801825c:	2300      	movs	r3, #0
 801825e:	930a      	str	r3, [sp, #40]	; 0x28
 8018260:	6823      	ldr	r3, [r4, #0]
 8018262:	9305      	str	r3, [sp, #20]
 8018264:	f8d8 3000 	ldr.w	r3, [r8]
 8018268:	f894 b018 	ldrb.w	fp, [r4, #24]
 801826c:	3307      	adds	r3, #7
 801826e:	f023 0307 	bic.w	r3, r3, #7
 8018272:	f103 0208 	add.w	r2, r3, #8
 8018276:	f8c8 2000 	str.w	r2, [r8]
 801827a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801827e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8018282:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8018286:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801828a:	9307      	str	r3, [sp, #28]
 801828c:	f8cd 8018 	str.w	r8, [sp, #24]
 8018290:	ee08 0a10 	vmov	s16, r0
 8018294:	4b9f      	ldr	r3, [pc, #636]	; (8018514 <_printf_float+0x2dc>)
 8018296:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801829a:	f04f 32ff 	mov.w	r2, #4294967295
 801829e:	f7e8 fc55 	bl	8000b4c <__aeabi_dcmpun>
 80182a2:	bb88      	cbnz	r0, 8018308 <_printf_float+0xd0>
 80182a4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80182a8:	4b9a      	ldr	r3, [pc, #616]	; (8018514 <_printf_float+0x2dc>)
 80182aa:	f04f 32ff 	mov.w	r2, #4294967295
 80182ae:	f7e8 fc2f 	bl	8000b10 <__aeabi_dcmple>
 80182b2:	bb48      	cbnz	r0, 8018308 <_printf_float+0xd0>
 80182b4:	2200      	movs	r2, #0
 80182b6:	2300      	movs	r3, #0
 80182b8:	4640      	mov	r0, r8
 80182ba:	4649      	mov	r1, r9
 80182bc:	f7e8 fc1e 	bl	8000afc <__aeabi_dcmplt>
 80182c0:	b110      	cbz	r0, 80182c8 <_printf_float+0x90>
 80182c2:	232d      	movs	r3, #45	; 0x2d
 80182c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80182c8:	4b93      	ldr	r3, [pc, #588]	; (8018518 <_printf_float+0x2e0>)
 80182ca:	4894      	ldr	r0, [pc, #592]	; (801851c <_printf_float+0x2e4>)
 80182cc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80182d0:	bf94      	ite	ls
 80182d2:	4698      	movls	r8, r3
 80182d4:	4680      	movhi	r8, r0
 80182d6:	2303      	movs	r3, #3
 80182d8:	6123      	str	r3, [r4, #16]
 80182da:	9b05      	ldr	r3, [sp, #20]
 80182dc:	f023 0204 	bic.w	r2, r3, #4
 80182e0:	6022      	str	r2, [r4, #0]
 80182e2:	f04f 0900 	mov.w	r9, #0
 80182e6:	9700      	str	r7, [sp, #0]
 80182e8:	4633      	mov	r3, r6
 80182ea:	aa0b      	add	r2, sp, #44	; 0x2c
 80182ec:	4621      	mov	r1, r4
 80182ee:	4628      	mov	r0, r5
 80182f0:	f000 f9d8 	bl	80186a4 <_printf_common>
 80182f4:	3001      	adds	r0, #1
 80182f6:	f040 8090 	bne.w	801841a <_printf_float+0x1e2>
 80182fa:	f04f 30ff 	mov.w	r0, #4294967295
 80182fe:	b00d      	add	sp, #52	; 0x34
 8018300:	ecbd 8b02 	vpop	{d8}
 8018304:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018308:	4642      	mov	r2, r8
 801830a:	464b      	mov	r3, r9
 801830c:	4640      	mov	r0, r8
 801830e:	4649      	mov	r1, r9
 8018310:	f7e8 fc1c 	bl	8000b4c <__aeabi_dcmpun>
 8018314:	b140      	cbz	r0, 8018328 <_printf_float+0xf0>
 8018316:	464b      	mov	r3, r9
 8018318:	2b00      	cmp	r3, #0
 801831a:	bfbc      	itt	lt
 801831c:	232d      	movlt	r3, #45	; 0x2d
 801831e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8018322:	487f      	ldr	r0, [pc, #508]	; (8018520 <_printf_float+0x2e8>)
 8018324:	4b7f      	ldr	r3, [pc, #508]	; (8018524 <_printf_float+0x2ec>)
 8018326:	e7d1      	b.n	80182cc <_printf_float+0x94>
 8018328:	6863      	ldr	r3, [r4, #4]
 801832a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 801832e:	9206      	str	r2, [sp, #24]
 8018330:	1c5a      	adds	r2, r3, #1
 8018332:	d13f      	bne.n	80183b4 <_printf_float+0x17c>
 8018334:	2306      	movs	r3, #6
 8018336:	6063      	str	r3, [r4, #4]
 8018338:	9b05      	ldr	r3, [sp, #20]
 801833a:	6861      	ldr	r1, [r4, #4]
 801833c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8018340:	2300      	movs	r3, #0
 8018342:	9303      	str	r3, [sp, #12]
 8018344:	ab0a      	add	r3, sp, #40	; 0x28
 8018346:	e9cd b301 	strd	fp, r3, [sp, #4]
 801834a:	ab09      	add	r3, sp, #36	; 0x24
 801834c:	ec49 8b10 	vmov	d0, r8, r9
 8018350:	9300      	str	r3, [sp, #0]
 8018352:	6022      	str	r2, [r4, #0]
 8018354:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8018358:	4628      	mov	r0, r5
 801835a:	f7ff fecd 	bl	80180f8 <__cvt>
 801835e:	9b06      	ldr	r3, [sp, #24]
 8018360:	9909      	ldr	r1, [sp, #36]	; 0x24
 8018362:	2b47      	cmp	r3, #71	; 0x47
 8018364:	4680      	mov	r8, r0
 8018366:	d108      	bne.n	801837a <_printf_float+0x142>
 8018368:	1cc8      	adds	r0, r1, #3
 801836a:	db02      	blt.n	8018372 <_printf_float+0x13a>
 801836c:	6863      	ldr	r3, [r4, #4]
 801836e:	4299      	cmp	r1, r3
 8018370:	dd41      	ble.n	80183f6 <_printf_float+0x1be>
 8018372:	f1ab 0b02 	sub.w	fp, fp, #2
 8018376:	fa5f fb8b 	uxtb.w	fp, fp
 801837a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801837e:	d820      	bhi.n	80183c2 <_printf_float+0x18a>
 8018380:	3901      	subs	r1, #1
 8018382:	465a      	mov	r2, fp
 8018384:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8018388:	9109      	str	r1, [sp, #36]	; 0x24
 801838a:	f7ff ff17 	bl	80181bc <__exponent>
 801838e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8018390:	1813      	adds	r3, r2, r0
 8018392:	2a01      	cmp	r2, #1
 8018394:	4681      	mov	r9, r0
 8018396:	6123      	str	r3, [r4, #16]
 8018398:	dc02      	bgt.n	80183a0 <_printf_float+0x168>
 801839a:	6822      	ldr	r2, [r4, #0]
 801839c:	07d2      	lsls	r2, r2, #31
 801839e:	d501      	bpl.n	80183a4 <_printf_float+0x16c>
 80183a0:	3301      	adds	r3, #1
 80183a2:	6123      	str	r3, [r4, #16]
 80183a4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80183a8:	2b00      	cmp	r3, #0
 80183aa:	d09c      	beq.n	80182e6 <_printf_float+0xae>
 80183ac:	232d      	movs	r3, #45	; 0x2d
 80183ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80183b2:	e798      	b.n	80182e6 <_printf_float+0xae>
 80183b4:	9a06      	ldr	r2, [sp, #24]
 80183b6:	2a47      	cmp	r2, #71	; 0x47
 80183b8:	d1be      	bne.n	8018338 <_printf_float+0x100>
 80183ba:	2b00      	cmp	r3, #0
 80183bc:	d1bc      	bne.n	8018338 <_printf_float+0x100>
 80183be:	2301      	movs	r3, #1
 80183c0:	e7b9      	b.n	8018336 <_printf_float+0xfe>
 80183c2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80183c6:	d118      	bne.n	80183fa <_printf_float+0x1c2>
 80183c8:	2900      	cmp	r1, #0
 80183ca:	6863      	ldr	r3, [r4, #4]
 80183cc:	dd0b      	ble.n	80183e6 <_printf_float+0x1ae>
 80183ce:	6121      	str	r1, [r4, #16]
 80183d0:	b913      	cbnz	r3, 80183d8 <_printf_float+0x1a0>
 80183d2:	6822      	ldr	r2, [r4, #0]
 80183d4:	07d0      	lsls	r0, r2, #31
 80183d6:	d502      	bpl.n	80183de <_printf_float+0x1a6>
 80183d8:	3301      	adds	r3, #1
 80183da:	440b      	add	r3, r1
 80183dc:	6123      	str	r3, [r4, #16]
 80183de:	65a1      	str	r1, [r4, #88]	; 0x58
 80183e0:	f04f 0900 	mov.w	r9, #0
 80183e4:	e7de      	b.n	80183a4 <_printf_float+0x16c>
 80183e6:	b913      	cbnz	r3, 80183ee <_printf_float+0x1b6>
 80183e8:	6822      	ldr	r2, [r4, #0]
 80183ea:	07d2      	lsls	r2, r2, #31
 80183ec:	d501      	bpl.n	80183f2 <_printf_float+0x1ba>
 80183ee:	3302      	adds	r3, #2
 80183f0:	e7f4      	b.n	80183dc <_printf_float+0x1a4>
 80183f2:	2301      	movs	r3, #1
 80183f4:	e7f2      	b.n	80183dc <_printf_float+0x1a4>
 80183f6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80183fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80183fc:	4299      	cmp	r1, r3
 80183fe:	db05      	blt.n	801840c <_printf_float+0x1d4>
 8018400:	6823      	ldr	r3, [r4, #0]
 8018402:	6121      	str	r1, [r4, #16]
 8018404:	07d8      	lsls	r0, r3, #31
 8018406:	d5ea      	bpl.n	80183de <_printf_float+0x1a6>
 8018408:	1c4b      	adds	r3, r1, #1
 801840a:	e7e7      	b.n	80183dc <_printf_float+0x1a4>
 801840c:	2900      	cmp	r1, #0
 801840e:	bfd4      	ite	le
 8018410:	f1c1 0202 	rsble	r2, r1, #2
 8018414:	2201      	movgt	r2, #1
 8018416:	4413      	add	r3, r2
 8018418:	e7e0      	b.n	80183dc <_printf_float+0x1a4>
 801841a:	6823      	ldr	r3, [r4, #0]
 801841c:	055a      	lsls	r2, r3, #21
 801841e:	d407      	bmi.n	8018430 <_printf_float+0x1f8>
 8018420:	6923      	ldr	r3, [r4, #16]
 8018422:	4642      	mov	r2, r8
 8018424:	4631      	mov	r1, r6
 8018426:	4628      	mov	r0, r5
 8018428:	47b8      	blx	r7
 801842a:	3001      	adds	r0, #1
 801842c:	d12c      	bne.n	8018488 <_printf_float+0x250>
 801842e:	e764      	b.n	80182fa <_printf_float+0xc2>
 8018430:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8018434:	f240 80e0 	bls.w	80185f8 <_printf_float+0x3c0>
 8018438:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801843c:	2200      	movs	r2, #0
 801843e:	2300      	movs	r3, #0
 8018440:	f7e8 fb52 	bl	8000ae8 <__aeabi_dcmpeq>
 8018444:	2800      	cmp	r0, #0
 8018446:	d034      	beq.n	80184b2 <_printf_float+0x27a>
 8018448:	4a37      	ldr	r2, [pc, #220]	; (8018528 <_printf_float+0x2f0>)
 801844a:	2301      	movs	r3, #1
 801844c:	4631      	mov	r1, r6
 801844e:	4628      	mov	r0, r5
 8018450:	47b8      	blx	r7
 8018452:	3001      	adds	r0, #1
 8018454:	f43f af51 	beq.w	80182fa <_printf_float+0xc2>
 8018458:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801845c:	429a      	cmp	r2, r3
 801845e:	db02      	blt.n	8018466 <_printf_float+0x22e>
 8018460:	6823      	ldr	r3, [r4, #0]
 8018462:	07d8      	lsls	r0, r3, #31
 8018464:	d510      	bpl.n	8018488 <_printf_float+0x250>
 8018466:	ee18 3a10 	vmov	r3, s16
 801846a:	4652      	mov	r2, sl
 801846c:	4631      	mov	r1, r6
 801846e:	4628      	mov	r0, r5
 8018470:	47b8      	blx	r7
 8018472:	3001      	adds	r0, #1
 8018474:	f43f af41 	beq.w	80182fa <_printf_float+0xc2>
 8018478:	f04f 0800 	mov.w	r8, #0
 801847c:	f104 091a 	add.w	r9, r4, #26
 8018480:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018482:	3b01      	subs	r3, #1
 8018484:	4543      	cmp	r3, r8
 8018486:	dc09      	bgt.n	801849c <_printf_float+0x264>
 8018488:	6823      	ldr	r3, [r4, #0]
 801848a:	079b      	lsls	r3, r3, #30
 801848c:	f100 8105 	bmi.w	801869a <_printf_float+0x462>
 8018490:	68e0      	ldr	r0, [r4, #12]
 8018492:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018494:	4298      	cmp	r0, r3
 8018496:	bfb8      	it	lt
 8018498:	4618      	movlt	r0, r3
 801849a:	e730      	b.n	80182fe <_printf_float+0xc6>
 801849c:	2301      	movs	r3, #1
 801849e:	464a      	mov	r2, r9
 80184a0:	4631      	mov	r1, r6
 80184a2:	4628      	mov	r0, r5
 80184a4:	47b8      	blx	r7
 80184a6:	3001      	adds	r0, #1
 80184a8:	f43f af27 	beq.w	80182fa <_printf_float+0xc2>
 80184ac:	f108 0801 	add.w	r8, r8, #1
 80184b0:	e7e6      	b.n	8018480 <_printf_float+0x248>
 80184b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80184b4:	2b00      	cmp	r3, #0
 80184b6:	dc39      	bgt.n	801852c <_printf_float+0x2f4>
 80184b8:	4a1b      	ldr	r2, [pc, #108]	; (8018528 <_printf_float+0x2f0>)
 80184ba:	2301      	movs	r3, #1
 80184bc:	4631      	mov	r1, r6
 80184be:	4628      	mov	r0, r5
 80184c0:	47b8      	blx	r7
 80184c2:	3001      	adds	r0, #1
 80184c4:	f43f af19 	beq.w	80182fa <_printf_float+0xc2>
 80184c8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80184cc:	4313      	orrs	r3, r2
 80184ce:	d102      	bne.n	80184d6 <_printf_float+0x29e>
 80184d0:	6823      	ldr	r3, [r4, #0]
 80184d2:	07d9      	lsls	r1, r3, #31
 80184d4:	d5d8      	bpl.n	8018488 <_printf_float+0x250>
 80184d6:	ee18 3a10 	vmov	r3, s16
 80184da:	4652      	mov	r2, sl
 80184dc:	4631      	mov	r1, r6
 80184de:	4628      	mov	r0, r5
 80184e0:	47b8      	blx	r7
 80184e2:	3001      	adds	r0, #1
 80184e4:	f43f af09 	beq.w	80182fa <_printf_float+0xc2>
 80184e8:	f04f 0900 	mov.w	r9, #0
 80184ec:	f104 0a1a 	add.w	sl, r4, #26
 80184f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80184f2:	425b      	negs	r3, r3
 80184f4:	454b      	cmp	r3, r9
 80184f6:	dc01      	bgt.n	80184fc <_printf_float+0x2c4>
 80184f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80184fa:	e792      	b.n	8018422 <_printf_float+0x1ea>
 80184fc:	2301      	movs	r3, #1
 80184fe:	4652      	mov	r2, sl
 8018500:	4631      	mov	r1, r6
 8018502:	4628      	mov	r0, r5
 8018504:	47b8      	blx	r7
 8018506:	3001      	adds	r0, #1
 8018508:	f43f aef7 	beq.w	80182fa <_printf_float+0xc2>
 801850c:	f109 0901 	add.w	r9, r9, #1
 8018510:	e7ee      	b.n	80184f0 <_printf_float+0x2b8>
 8018512:	bf00      	nop
 8018514:	7fefffff 	.word	0x7fefffff
 8018518:	08020fa8 	.word	0x08020fa8
 801851c:	08020fac 	.word	0x08020fac
 8018520:	08020fb4 	.word	0x08020fb4
 8018524:	08020fb0 	.word	0x08020fb0
 8018528:	08020fb8 	.word	0x08020fb8
 801852c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801852e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8018530:	429a      	cmp	r2, r3
 8018532:	bfa8      	it	ge
 8018534:	461a      	movge	r2, r3
 8018536:	2a00      	cmp	r2, #0
 8018538:	4691      	mov	r9, r2
 801853a:	dc37      	bgt.n	80185ac <_printf_float+0x374>
 801853c:	f04f 0b00 	mov.w	fp, #0
 8018540:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8018544:	f104 021a 	add.w	r2, r4, #26
 8018548:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801854a:	9305      	str	r3, [sp, #20]
 801854c:	eba3 0309 	sub.w	r3, r3, r9
 8018550:	455b      	cmp	r3, fp
 8018552:	dc33      	bgt.n	80185bc <_printf_float+0x384>
 8018554:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8018558:	429a      	cmp	r2, r3
 801855a:	db3b      	blt.n	80185d4 <_printf_float+0x39c>
 801855c:	6823      	ldr	r3, [r4, #0]
 801855e:	07da      	lsls	r2, r3, #31
 8018560:	d438      	bmi.n	80185d4 <_printf_float+0x39c>
 8018562:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8018564:	9b05      	ldr	r3, [sp, #20]
 8018566:	9909      	ldr	r1, [sp, #36]	; 0x24
 8018568:	1ad3      	subs	r3, r2, r3
 801856a:	eba2 0901 	sub.w	r9, r2, r1
 801856e:	4599      	cmp	r9, r3
 8018570:	bfa8      	it	ge
 8018572:	4699      	movge	r9, r3
 8018574:	f1b9 0f00 	cmp.w	r9, #0
 8018578:	dc35      	bgt.n	80185e6 <_printf_float+0x3ae>
 801857a:	f04f 0800 	mov.w	r8, #0
 801857e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8018582:	f104 0a1a 	add.w	sl, r4, #26
 8018586:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801858a:	1a9b      	subs	r3, r3, r2
 801858c:	eba3 0309 	sub.w	r3, r3, r9
 8018590:	4543      	cmp	r3, r8
 8018592:	f77f af79 	ble.w	8018488 <_printf_float+0x250>
 8018596:	2301      	movs	r3, #1
 8018598:	4652      	mov	r2, sl
 801859a:	4631      	mov	r1, r6
 801859c:	4628      	mov	r0, r5
 801859e:	47b8      	blx	r7
 80185a0:	3001      	adds	r0, #1
 80185a2:	f43f aeaa 	beq.w	80182fa <_printf_float+0xc2>
 80185a6:	f108 0801 	add.w	r8, r8, #1
 80185aa:	e7ec      	b.n	8018586 <_printf_float+0x34e>
 80185ac:	4613      	mov	r3, r2
 80185ae:	4631      	mov	r1, r6
 80185b0:	4642      	mov	r2, r8
 80185b2:	4628      	mov	r0, r5
 80185b4:	47b8      	blx	r7
 80185b6:	3001      	adds	r0, #1
 80185b8:	d1c0      	bne.n	801853c <_printf_float+0x304>
 80185ba:	e69e      	b.n	80182fa <_printf_float+0xc2>
 80185bc:	2301      	movs	r3, #1
 80185be:	4631      	mov	r1, r6
 80185c0:	4628      	mov	r0, r5
 80185c2:	9205      	str	r2, [sp, #20]
 80185c4:	47b8      	blx	r7
 80185c6:	3001      	adds	r0, #1
 80185c8:	f43f ae97 	beq.w	80182fa <_printf_float+0xc2>
 80185cc:	9a05      	ldr	r2, [sp, #20]
 80185ce:	f10b 0b01 	add.w	fp, fp, #1
 80185d2:	e7b9      	b.n	8018548 <_printf_float+0x310>
 80185d4:	ee18 3a10 	vmov	r3, s16
 80185d8:	4652      	mov	r2, sl
 80185da:	4631      	mov	r1, r6
 80185dc:	4628      	mov	r0, r5
 80185de:	47b8      	blx	r7
 80185e0:	3001      	adds	r0, #1
 80185e2:	d1be      	bne.n	8018562 <_printf_float+0x32a>
 80185e4:	e689      	b.n	80182fa <_printf_float+0xc2>
 80185e6:	9a05      	ldr	r2, [sp, #20]
 80185e8:	464b      	mov	r3, r9
 80185ea:	4442      	add	r2, r8
 80185ec:	4631      	mov	r1, r6
 80185ee:	4628      	mov	r0, r5
 80185f0:	47b8      	blx	r7
 80185f2:	3001      	adds	r0, #1
 80185f4:	d1c1      	bne.n	801857a <_printf_float+0x342>
 80185f6:	e680      	b.n	80182fa <_printf_float+0xc2>
 80185f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80185fa:	2a01      	cmp	r2, #1
 80185fc:	dc01      	bgt.n	8018602 <_printf_float+0x3ca>
 80185fe:	07db      	lsls	r3, r3, #31
 8018600:	d538      	bpl.n	8018674 <_printf_float+0x43c>
 8018602:	2301      	movs	r3, #1
 8018604:	4642      	mov	r2, r8
 8018606:	4631      	mov	r1, r6
 8018608:	4628      	mov	r0, r5
 801860a:	47b8      	blx	r7
 801860c:	3001      	adds	r0, #1
 801860e:	f43f ae74 	beq.w	80182fa <_printf_float+0xc2>
 8018612:	ee18 3a10 	vmov	r3, s16
 8018616:	4652      	mov	r2, sl
 8018618:	4631      	mov	r1, r6
 801861a:	4628      	mov	r0, r5
 801861c:	47b8      	blx	r7
 801861e:	3001      	adds	r0, #1
 8018620:	f43f ae6b 	beq.w	80182fa <_printf_float+0xc2>
 8018624:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8018628:	2200      	movs	r2, #0
 801862a:	2300      	movs	r3, #0
 801862c:	f7e8 fa5c 	bl	8000ae8 <__aeabi_dcmpeq>
 8018630:	b9d8      	cbnz	r0, 801866a <_printf_float+0x432>
 8018632:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018634:	f108 0201 	add.w	r2, r8, #1
 8018638:	3b01      	subs	r3, #1
 801863a:	4631      	mov	r1, r6
 801863c:	4628      	mov	r0, r5
 801863e:	47b8      	blx	r7
 8018640:	3001      	adds	r0, #1
 8018642:	d10e      	bne.n	8018662 <_printf_float+0x42a>
 8018644:	e659      	b.n	80182fa <_printf_float+0xc2>
 8018646:	2301      	movs	r3, #1
 8018648:	4652      	mov	r2, sl
 801864a:	4631      	mov	r1, r6
 801864c:	4628      	mov	r0, r5
 801864e:	47b8      	blx	r7
 8018650:	3001      	adds	r0, #1
 8018652:	f43f ae52 	beq.w	80182fa <_printf_float+0xc2>
 8018656:	f108 0801 	add.w	r8, r8, #1
 801865a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801865c:	3b01      	subs	r3, #1
 801865e:	4543      	cmp	r3, r8
 8018660:	dcf1      	bgt.n	8018646 <_printf_float+0x40e>
 8018662:	464b      	mov	r3, r9
 8018664:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8018668:	e6dc      	b.n	8018424 <_printf_float+0x1ec>
 801866a:	f04f 0800 	mov.w	r8, #0
 801866e:	f104 0a1a 	add.w	sl, r4, #26
 8018672:	e7f2      	b.n	801865a <_printf_float+0x422>
 8018674:	2301      	movs	r3, #1
 8018676:	4642      	mov	r2, r8
 8018678:	e7df      	b.n	801863a <_printf_float+0x402>
 801867a:	2301      	movs	r3, #1
 801867c:	464a      	mov	r2, r9
 801867e:	4631      	mov	r1, r6
 8018680:	4628      	mov	r0, r5
 8018682:	47b8      	blx	r7
 8018684:	3001      	adds	r0, #1
 8018686:	f43f ae38 	beq.w	80182fa <_printf_float+0xc2>
 801868a:	f108 0801 	add.w	r8, r8, #1
 801868e:	68e3      	ldr	r3, [r4, #12]
 8018690:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8018692:	1a5b      	subs	r3, r3, r1
 8018694:	4543      	cmp	r3, r8
 8018696:	dcf0      	bgt.n	801867a <_printf_float+0x442>
 8018698:	e6fa      	b.n	8018490 <_printf_float+0x258>
 801869a:	f04f 0800 	mov.w	r8, #0
 801869e:	f104 0919 	add.w	r9, r4, #25
 80186a2:	e7f4      	b.n	801868e <_printf_float+0x456>

080186a4 <_printf_common>:
 80186a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80186a8:	4616      	mov	r6, r2
 80186aa:	4699      	mov	r9, r3
 80186ac:	688a      	ldr	r2, [r1, #8]
 80186ae:	690b      	ldr	r3, [r1, #16]
 80186b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80186b4:	4293      	cmp	r3, r2
 80186b6:	bfb8      	it	lt
 80186b8:	4613      	movlt	r3, r2
 80186ba:	6033      	str	r3, [r6, #0]
 80186bc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80186c0:	4607      	mov	r7, r0
 80186c2:	460c      	mov	r4, r1
 80186c4:	b10a      	cbz	r2, 80186ca <_printf_common+0x26>
 80186c6:	3301      	adds	r3, #1
 80186c8:	6033      	str	r3, [r6, #0]
 80186ca:	6823      	ldr	r3, [r4, #0]
 80186cc:	0699      	lsls	r1, r3, #26
 80186ce:	bf42      	ittt	mi
 80186d0:	6833      	ldrmi	r3, [r6, #0]
 80186d2:	3302      	addmi	r3, #2
 80186d4:	6033      	strmi	r3, [r6, #0]
 80186d6:	6825      	ldr	r5, [r4, #0]
 80186d8:	f015 0506 	ands.w	r5, r5, #6
 80186dc:	d106      	bne.n	80186ec <_printf_common+0x48>
 80186de:	f104 0a19 	add.w	sl, r4, #25
 80186e2:	68e3      	ldr	r3, [r4, #12]
 80186e4:	6832      	ldr	r2, [r6, #0]
 80186e6:	1a9b      	subs	r3, r3, r2
 80186e8:	42ab      	cmp	r3, r5
 80186ea:	dc26      	bgt.n	801873a <_printf_common+0x96>
 80186ec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80186f0:	1e13      	subs	r3, r2, #0
 80186f2:	6822      	ldr	r2, [r4, #0]
 80186f4:	bf18      	it	ne
 80186f6:	2301      	movne	r3, #1
 80186f8:	0692      	lsls	r2, r2, #26
 80186fa:	d42b      	bmi.n	8018754 <_printf_common+0xb0>
 80186fc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8018700:	4649      	mov	r1, r9
 8018702:	4638      	mov	r0, r7
 8018704:	47c0      	blx	r8
 8018706:	3001      	adds	r0, #1
 8018708:	d01e      	beq.n	8018748 <_printf_common+0xa4>
 801870a:	6823      	ldr	r3, [r4, #0]
 801870c:	68e5      	ldr	r5, [r4, #12]
 801870e:	6832      	ldr	r2, [r6, #0]
 8018710:	f003 0306 	and.w	r3, r3, #6
 8018714:	2b04      	cmp	r3, #4
 8018716:	bf08      	it	eq
 8018718:	1aad      	subeq	r5, r5, r2
 801871a:	68a3      	ldr	r3, [r4, #8]
 801871c:	6922      	ldr	r2, [r4, #16]
 801871e:	bf0c      	ite	eq
 8018720:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8018724:	2500      	movne	r5, #0
 8018726:	4293      	cmp	r3, r2
 8018728:	bfc4      	itt	gt
 801872a:	1a9b      	subgt	r3, r3, r2
 801872c:	18ed      	addgt	r5, r5, r3
 801872e:	2600      	movs	r6, #0
 8018730:	341a      	adds	r4, #26
 8018732:	42b5      	cmp	r5, r6
 8018734:	d11a      	bne.n	801876c <_printf_common+0xc8>
 8018736:	2000      	movs	r0, #0
 8018738:	e008      	b.n	801874c <_printf_common+0xa8>
 801873a:	2301      	movs	r3, #1
 801873c:	4652      	mov	r2, sl
 801873e:	4649      	mov	r1, r9
 8018740:	4638      	mov	r0, r7
 8018742:	47c0      	blx	r8
 8018744:	3001      	adds	r0, #1
 8018746:	d103      	bne.n	8018750 <_printf_common+0xac>
 8018748:	f04f 30ff 	mov.w	r0, #4294967295
 801874c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018750:	3501      	adds	r5, #1
 8018752:	e7c6      	b.n	80186e2 <_printf_common+0x3e>
 8018754:	18e1      	adds	r1, r4, r3
 8018756:	1c5a      	adds	r2, r3, #1
 8018758:	2030      	movs	r0, #48	; 0x30
 801875a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801875e:	4422      	add	r2, r4
 8018760:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8018764:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8018768:	3302      	adds	r3, #2
 801876a:	e7c7      	b.n	80186fc <_printf_common+0x58>
 801876c:	2301      	movs	r3, #1
 801876e:	4622      	mov	r2, r4
 8018770:	4649      	mov	r1, r9
 8018772:	4638      	mov	r0, r7
 8018774:	47c0      	blx	r8
 8018776:	3001      	adds	r0, #1
 8018778:	d0e6      	beq.n	8018748 <_printf_common+0xa4>
 801877a:	3601      	adds	r6, #1
 801877c:	e7d9      	b.n	8018732 <_printf_common+0x8e>
	...

08018780 <_printf_i>:
 8018780:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8018784:	460c      	mov	r4, r1
 8018786:	4691      	mov	r9, r2
 8018788:	7e27      	ldrb	r7, [r4, #24]
 801878a:	990c      	ldr	r1, [sp, #48]	; 0x30
 801878c:	2f78      	cmp	r7, #120	; 0x78
 801878e:	4680      	mov	r8, r0
 8018790:	469a      	mov	sl, r3
 8018792:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8018796:	d807      	bhi.n	80187a8 <_printf_i+0x28>
 8018798:	2f62      	cmp	r7, #98	; 0x62
 801879a:	d80a      	bhi.n	80187b2 <_printf_i+0x32>
 801879c:	2f00      	cmp	r7, #0
 801879e:	f000 80d8 	beq.w	8018952 <_printf_i+0x1d2>
 80187a2:	2f58      	cmp	r7, #88	; 0x58
 80187a4:	f000 80a3 	beq.w	80188ee <_printf_i+0x16e>
 80187a8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80187ac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80187b0:	e03a      	b.n	8018828 <_printf_i+0xa8>
 80187b2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80187b6:	2b15      	cmp	r3, #21
 80187b8:	d8f6      	bhi.n	80187a8 <_printf_i+0x28>
 80187ba:	a001      	add	r0, pc, #4	; (adr r0, 80187c0 <_printf_i+0x40>)
 80187bc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80187c0:	08018819 	.word	0x08018819
 80187c4:	0801882d 	.word	0x0801882d
 80187c8:	080187a9 	.word	0x080187a9
 80187cc:	080187a9 	.word	0x080187a9
 80187d0:	080187a9 	.word	0x080187a9
 80187d4:	080187a9 	.word	0x080187a9
 80187d8:	0801882d 	.word	0x0801882d
 80187dc:	080187a9 	.word	0x080187a9
 80187e0:	080187a9 	.word	0x080187a9
 80187e4:	080187a9 	.word	0x080187a9
 80187e8:	080187a9 	.word	0x080187a9
 80187ec:	08018939 	.word	0x08018939
 80187f0:	0801885d 	.word	0x0801885d
 80187f4:	0801891b 	.word	0x0801891b
 80187f8:	080187a9 	.word	0x080187a9
 80187fc:	080187a9 	.word	0x080187a9
 8018800:	0801895b 	.word	0x0801895b
 8018804:	080187a9 	.word	0x080187a9
 8018808:	0801885d 	.word	0x0801885d
 801880c:	080187a9 	.word	0x080187a9
 8018810:	080187a9 	.word	0x080187a9
 8018814:	08018923 	.word	0x08018923
 8018818:	680b      	ldr	r3, [r1, #0]
 801881a:	1d1a      	adds	r2, r3, #4
 801881c:	681b      	ldr	r3, [r3, #0]
 801881e:	600a      	str	r2, [r1, #0]
 8018820:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8018824:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8018828:	2301      	movs	r3, #1
 801882a:	e0a3      	b.n	8018974 <_printf_i+0x1f4>
 801882c:	6825      	ldr	r5, [r4, #0]
 801882e:	6808      	ldr	r0, [r1, #0]
 8018830:	062e      	lsls	r6, r5, #24
 8018832:	f100 0304 	add.w	r3, r0, #4
 8018836:	d50a      	bpl.n	801884e <_printf_i+0xce>
 8018838:	6805      	ldr	r5, [r0, #0]
 801883a:	600b      	str	r3, [r1, #0]
 801883c:	2d00      	cmp	r5, #0
 801883e:	da03      	bge.n	8018848 <_printf_i+0xc8>
 8018840:	232d      	movs	r3, #45	; 0x2d
 8018842:	426d      	negs	r5, r5
 8018844:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8018848:	485e      	ldr	r0, [pc, #376]	; (80189c4 <_printf_i+0x244>)
 801884a:	230a      	movs	r3, #10
 801884c:	e019      	b.n	8018882 <_printf_i+0x102>
 801884e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8018852:	6805      	ldr	r5, [r0, #0]
 8018854:	600b      	str	r3, [r1, #0]
 8018856:	bf18      	it	ne
 8018858:	b22d      	sxthne	r5, r5
 801885a:	e7ef      	b.n	801883c <_printf_i+0xbc>
 801885c:	680b      	ldr	r3, [r1, #0]
 801885e:	6825      	ldr	r5, [r4, #0]
 8018860:	1d18      	adds	r0, r3, #4
 8018862:	6008      	str	r0, [r1, #0]
 8018864:	0628      	lsls	r0, r5, #24
 8018866:	d501      	bpl.n	801886c <_printf_i+0xec>
 8018868:	681d      	ldr	r5, [r3, #0]
 801886a:	e002      	b.n	8018872 <_printf_i+0xf2>
 801886c:	0669      	lsls	r1, r5, #25
 801886e:	d5fb      	bpl.n	8018868 <_printf_i+0xe8>
 8018870:	881d      	ldrh	r5, [r3, #0]
 8018872:	4854      	ldr	r0, [pc, #336]	; (80189c4 <_printf_i+0x244>)
 8018874:	2f6f      	cmp	r7, #111	; 0x6f
 8018876:	bf0c      	ite	eq
 8018878:	2308      	moveq	r3, #8
 801887a:	230a      	movne	r3, #10
 801887c:	2100      	movs	r1, #0
 801887e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8018882:	6866      	ldr	r6, [r4, #4]
 8018884:	60a6      	str	r6, [r4, #8]
 8018886:	2e00      	cmp	r6, #0
 8018888:	bfa2      	ittt	ge
 801888a:	6821      	ldrge	r1, [r4, #0]
 801888c:	f021 0104 	bicge.w	r1, r1, #4
 8018890:	6021      	strge	r1, [r4, #0]
 8018892:	b90d      	cbnz	r5, 8018898 <_printf_i+0x118>
 8018894:	2e00      	cmp	r6, #0
 8018896:	d04d      	beq.n	8018934 <_printf_i+0x1b4>
 8018898:	4616      	mov	r6, r2
 801889a:	fbb5 f1f3 	udiv	r1, r5, r3
 801889e:	fb03 5711 	mls	r7, r3, r1, r5
 80188a2:	5dc7      	ldrb	r7, [r0, r7]
 80188a4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80188a8:	462f      	mov	r7, r5
 80188aa:	42bb      	cmp	r3, r7
 80188ac:	460d      	mov	r5, r1
 80188ae:	d9f4      	bls.n	801889a <_printf_i+0x11a>
 80188b0:	2b08      	cmp	r3, #8
 80188b2:	d10b      	bne.n	80188cc <_printf_i+0x14c>
 80188b4:	6823      	ldr	r3, [r4, #0]
 80188b6:	07df      	lsls	r7, r3, #31
 80188b8:	d508      	bpl.n	80188cc <_printf_i+0x14c>
 80188ba:	6923      	ldr	r3, [r4, #16]
 80188bc:	6861      	ldr	r1, [r4, #4]
 80188be:	4299      	cmp	r1, r3
 80188c0:	bfde      	ittt	le
 80188c2:	2330      	movle	r3, #48	; 0x30
 80188c4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80188c8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80188cc:	1b92      	subs	r2, r2, r6
 80188ce:	6122      	str	r2, [r4, #16]
 80188d0:	f8cd a000 	str.w	sl, [sp]
 80188d4:	464b      	mov	r3, r9
 80188d6:	aa03      	add	r2, sp, #12
 80188d8:	4621      	mov	r1, r4
 80188da:	4640      	mov	r0, r8
 80188dc:	f7ff fee2 	bl	80186a4 <_printf_common>
 80188e0:	3001      	adds	r0, #1
 80188e2:	d14c      	bne.n	801897e <_printf_i+0x1fe>
 80188e4:	f04f 30ff 	mov.w	r0, #4294967295
 80188e8:	b004      	add	sp, #16
 80188ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80188ee:	4835      	ldr	r0, [pc, #212]	; (80189c4 <_printf_i+0x244>)
 80188f0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80188f4:	6823      	ldr	r3, [r4, #0]
 80188f6:	680e      	ldr	r6, [r1, #0]
 80188f8:	061f      	lsls	r7, r3, #24
 80188fa:	f856 5b04 	ldr.w	r5, [r6], #4
 80188fe:	600e      	str	r6, [r1, #0]
 8018900:	d514      	bpl.n	801892c <_printf_i+0x1ac>
 8018902:	07d9      	lsls	r1, r3, #31
 8018904:	bf44      	itt	mi
 8018906:	f043 0320 	orrmi.w	r3, r3, #32
 801890a:	6023      	strmi	r3, [r4, #0]
 801890c:	b91d      	cbnz	r5, 8018916 <_printf_i+0x196>
 801890e:	6823      	ldr	r3, [r4, #0]
 8018910:	f023 0320 	bic.w	r3, r3, #32
 8018914:	6023      	str	r3, [r4, #0]
 8018916:	2310      	movs	r3, #16
 8018918:	e7b0      	b.n	801887c <_printf_i+0xfc>
 801891a:	6823      	ldr	r3, [r4, #0]
 801891c:	f043 0320 	orr.w	r3, r3, #32
 8018920:	6023      	str	r3, [r4, #0]
 8018922:	2378      	movs	r3, #120	; 0x78
 8018924:	4828      	ldr	r0, [pc, #160]	; (80189c8 <_printf_i+0x248>)
 8018926:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801892a:	e7e3      	b.n	80188f4 <_printf_i+0x174>
 801892c:	065e      	lsls	r6, r3, #25
 801892e:	bf48      	it	mi
 8018930:	b2ad      	uxthmi	r5, r5
 8018932:	e7e6      	b.n	8018902 <_printf_i+0x182>
 8018934:	4616      	mov	r6, r2
 8018936:	e7bb      	b.n	80188b0 <_printf_i+0x130>
 8018938:	680b      	ldr	r3, [r1, #0]
 801893a:	6826      	ldr	r6, [r4, #0]
 801893c:	6960      	ldr	r0, [r4, #20]
 801893e:	1d1d      	adds	r5, r3, #4
 8018940:	600d      	str	r5, [r1, #0]
 8018942:	0635      	lsls	r5, r6, #24
 8018944:	681b      	ldr	r3, [r3, #0]
 8018946:	d501      	bpl.n	801894c <_printf_i+0x1cc>
 8018948:	6018      	str	r0, [r3, #0]
 801894a:	e002      	b.n	8018952 <_printf_i+0x1d2>
 801894c:	0671      	lsls	r1, r6, #25
 801894e:	d5fb      	bpl.n	8018948 <_printf_i+0x1c8>
 8018950:	8018      	strh	r0, [r3, #0]
 8018952:	2300      	movs	r3, #0
 8018954:	6123      	str	r3, [r4, #16]
 8018956:	4616      	mov	r6, r2
 8018958:	e7ba      	b.n	80188d0 <_printf_i+0x150>
 801895a:	680b      	ldr	r3, [r1, #0]
 801895c:	1d1a      	adds	r2, r3, #4
 801895e:	600a      	str	r2, [r1, #0]
 8018960:	681e      	ldr	r6, [r3, #0]
 8018962:	6862      	ldr	r2, [r4, #4]
 8018964:	2100      	movs	r1, #0
 8018966:	4630      	mov	r0, r6
 8018968:	f7e7 fc4a 	bl	8000200 <memchr>
 801896c:	b108      	cbz	r0, 8018972 <_printf_i+0x1f2>
 801896e:	1b80      	subs	r0, r0, r6
 8018970:	6060      	str	r0, [r4, #4]
 8018972:	6863      	ldr	r3, [r4, #4]
 8018974:	6123      	str	r3, [r4, #16]
 8018976:	2300      	movs	r3, #0
 8018978:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801897c:	e7a8      	b.n	80188d0 <_printf_i+0x150>
 801897e:	6923      	ldr	r3, [r4, #16]
 8018980:	4632      	mov	r2, r6
 8018982:	4649      	mov	r1, r9
 8018984:	4640      	mov	r0, r8
 8018986:	47d0      	blx	sl
 8018988:	3001      	adds	r0, #1
 801898a:	d0ab      	beq.n	80188e4 <_printf_i+0x164>
 801898c:	6823      	ldr	r3, [r4, #0]
 801898e:	079b      	lsls	r3, r3, #30
 8018990:	d413      	bmi.n	80189ba <_printf_i+0x23a>
 8018992:	68e0      	ldr	r0, [r4, #12]
 8018994:	9b03      	ldr	r3, [sp, #12]
 8018996:	4298      	cmp	r0, r3
 8018998:	bfb8      	it	lt
 801899a:	4618      	movlt	r0, r3
 801899c:	e7a4      	b.n	80188e8 <_printf_i+0x168>
 801899e:	2301      	movs	r3, #1
 80189a0:	4632      	mov	r2, r6
 80189a2:	4649      	mov	r1, r9
 80189a4:	4640      	mov	r0, r8
 80189a6:	47d0      	blx	sl
 80189a8:	3001      	adds	r0, #1
 80189aa:	d09b      	beq.n	80188e4 <_printf_i+0x164>
 80189ac:	3501      	adds	r5, #1
 80189ae:	68e3      	ldr	r3, [r4, #12]
 80189b0:	9903      	ldr	r1, [sp, #12]
 80189b2:	1a5b      	subs	r3, r3, r1
 80189b4:	42ab      	cmp	r3, r5
 80189b6:	dcf2      	bgt.n	801899e <_printf_i+0x21e>
 80189b8:	e7eb      	b.n	8018992 <_printf_i+0x212>
 80189ba:	2500      	movs	r5, #0
 80189bc:	f104 0619 	add.w	r6, r4, #25
 80189c0:	e7f5      	b.n	80189ae <_printf_i+0x22e>
 80189c2:	bf00      	nop
 80189c4:	08020fba 	.word	0x08020fba
 80189c8:	08020fcb 	.word	0x08020fcb

080189cc <iprintf>:
 80189cc:	b40f      	push	{r0, r1, r2, r3}
 80189ce:	4b0a      	ldr	r3, [pc, #40]	; (80189f8 <iprintf+0x2c>)
 80189d0:	b513      	push	{r0, r1, r4, lr}
 80189d2:	681c      	ldr	r4, [r3, #0]
 80189d4:	b124      	cbz	r4, 80189e0 <iprintf+0x14>
 80189d6:	69a3      	ldr	r3, [r4, #24]
 80189d8:	b913      	cbnz	r3, 80189e0 <iprintf+0x14>
 80189da:	4620      	mov	r0, r4
 80189dc:	f001 fe92 	bl	801a704 <__sinit>
 80189e0:	ab05      	add	r3, sp, #20
 80189e2:	9a04      	ldr	r2, [sp, #16]
 80189e4:	68a1      	ldr	r1, [r4, #8]
 80189e6:	9301      	str	r3, [sp, #4]
 80189e8:	4620      	mov	r0, r4
 80189ea:	f003 f91f 	bl	801bc2c <_vfiprintf_r>
 80189ee:	b002      	add	sp, #8
 80189f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80189f4:	b004      	add	sp, #16
 80189f6:	4770      	bx	lr
 80189f8:	20000074 	.word	0x20000074

080189fc <rand>:
 80189fc:	4b17      	ldr	r3, [pc, #92]	; (8018a5c <rand+0x60>)
 80189fe:	b510      	push	{r4, lr}
 8018a00:	681c      	ldr	r4, [r3, #0]
 8018a02:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8018a04:	b9b3      	cbnz	r3, 8018a34 <rand+0x38>
 8018a06:	2018      	movs	r0, #24
 8018a08:	f7ff fa7e 	bl	8017f08 <malloc>
 8018a0c:	63a0      	str	r0, [r4, #56]	; 0x38
 8018a0e:	b928      	cbnz	r0, 8018a1c <rand+0x20>
 8018a10:	4602      	mov	r2, r0
 8018a12:	4b13      	ldr	r3, [pc, #76]	; (8018a60 <rand+0x64>)
 8018a14:	4813      	ldr	r0, [pc, #76]	; (8018a64 <rand+0x68>)
 8018a16:	214e      	movs	r1, #78	; 0x4e
 8018a18:	f000 ff7e 	bl	8019918 <__assert_func>
 8018a1c:	4a12      	ldr	r2, [pc, #72]	; (8018a68 <rand+0x6c>)
 8018a1e:	4b13      	ldr	r3, [pc, #76]	; (8018a6c <rand+0x70>)
 8018a20:	e9c0 2300 	strd	r2, r3, [r0]
 8018a24:	4b12      	ldr	r3, [pc, #72]	; (8018a70 <rand+0x74>)
 8018a26:	6083      	str	r3, [r0, #8]
 8018a28:	230b      	movs	r3, #11
 8018a2a:	8183      	strh	r3, [r0, #12]
 8018a2c:	2201      	movs	r2, #1
 8018a2e:	2300      	movs	r3, #0
 8018a30:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8018a34:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8018a36:	480f      	ldr	r0, [pc, #60]	; (8018a74 <rand+0x78>)
 8018a38:	690a      	ldr	r2, [r1, #16]
 8018a3a:	694b      	ldr	r3, [r1, #20]
 8018a3c:	4c0e      	ldr	r4, [pc, #56]	; (8018a78 <rand+0x7c>)
 8018a3e:	4350      	muls	r0, r2
 8018a40:	fb04 0003 	mla	r0, r4, r3, r0
 8018a44:	fba2 3404 	umull	r3, r4, r2, r4
 8018a48:	1c5a      	adds	r2, r3, #1
 8018a4a:	4404      	add	r4, r0
 8018a4c:	f144 0000 	adc.w	r0, r4, #0
 8018a50:	e9c1 2004 	strd	r2, r0, [r1, #16]
 8018a54:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8018a58:	bd10      	pop	{r4, pc}
 8018a5a:	bf00      	nop
 8018a5c:	20000074 	.word	0x20000074
 8018a60:	08020fdc 	.word	0x08020fdc
 8018a64:	08020ff3 	.word	0x08020ff3
 8018a68:	abcd330e 	.word	0xabcd330e
 8018a6c:	e66d1234 	.word	0xe66d1234
 8018a70:	0005deec 	.word	0x0005deec
 8018a74:	5851f42d 	.word	0x5851f42d
 8018a78:	4c957f2d 	.word	0x4c957f2d

08018a7c <_sbrk_r>:
 8018a7c:	b538      	push	{r3, r4, r5, lr}
 8018a7e:	4d06      	ldr	r5, [pc, #24]	; (8018a98 <_sbrk_r+0x1c>)
 8018a80:	2300      	movs	r3, #0
 8018a82:	4604      	mov	r4, r0
 8018a84:	4608      	mov	r0, r1
 8018a86:	602b      	str	r3, [r5, #0]
 8018a88:	f7ec fd82 	bl	8005590 <_sbrk>
 8018a8c:	1c43      	adds	r3, r0, #1
 8018a8e:	d102      	bne.n	8018a96 <_sbrk_r+0x1a>
 8018a90:	682b      	ldr	r3, [r5, #0]
 8018a92:	b103      	cbz	r3, 8018a96 <_sbrk_r+0x1a>
 8018a94:	6023      	str	r3, [r4, #0]
 8018a96:	bd38      	pop	{r3, r4, r5, pc}
 8018a98:	20007194 	.word	0x20007194

08018a9c <sniprintf>:
 8018a9c:	b40c      	push	{r2, r3}
 8018a9e:	b530      	push	{r4, r5, lr}
 8018aa0:	4b17      	ldr	r3, [pc, #92]	; (8018b00 <sniprintf+0x64>)
 8018aa2:	1e0c      	subs	r4, r1, #0
 8018aa4:	681d      	ldr	r5, [r3, #0]
 8018aa6:	b09d      	sub	sp, #116	; 0x74
 8018aa8:	da08      	bge.n	8018abc <sniprintf+0x20>
 8018aaa:	238b      	movs	r3, #139	; 0x8b
 8018aac:	602b      	str	r3, [r5, #0]
 8018aae:	f04f 30ff 	mov.w	r0, #4294967295
 8018ab2:	b01d      	add	sp, #116	; 0x74
 8018ab4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8018ab8:	b002      	add	sp, #8
 8018aba:	4770      	bx	lr
 8018abc:	f44f 7302 	mov.w	r3, #520	; 0x208
 8018ac0:	f8ad 3014 	strh.w	r3, [sp, #20]
 8018ac4:	bf14      	ite	ne
 8018ac6:	f104 33ff 	addne.w	r3, r4, #4294967295
 8018aca:	4623      	moveq	r3, r4
 8018acc:	9304      	str	r3, [sp, #16]
 8018ace:	9307      	str	r3, [sp, #28]
 8018ad0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018ad4:	9002      	str	r0, [sp, #8]
 8018ad6:	9006      	str	r0, [sp, #24]
 8018ad8:	f8ad 3016 	strh.w	r3, [sp, #22]
 8018adc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8018ade:	ab21      	add	r3, sp, #132	; 0x84
 8018ae0:	a902      	add	r1, sp, #8
 8018ae2:	4628      	mov	r0, r5
 8018ae4:	9301      	str	r3, [sp, #4]
 8018ae6:	f002 ff77 	bl	801b9d8 <_svfiprintf_r>
 8018aea:	1c43      	adds	r3, r0, #1
 8018aec:	bfbc      	itt	lt
 8018aee:	238b      	movlt	r3, #139	; 0x8b
 8018af0:	602b      	strlt	r3, [r5, #0]
 8018af2:	2c00      	cmp	r4, #0
 8018af4:	d0dd      	beq.n	8018ab2 <sniprintf+0x16>
 8018af6:	9b02      	ldr	r3, [sp, #8]
 8018af8:	2200      	movs	r2, #0
 8018afa:	701a      	strb	r2, [r3, #0]
 8018afc:	e7d9      	b.n	8018ab2 <sniprintf+0x16>
 8018afe:	bf00      	nop
 8018b00:	20000074 	.word	0x20000074

08018b04 <siprintf>:
 8018b04:	b40e      	push	{r1, r2, r3}
 8018b06:	b500      	push	{lr}
 8018b08:	b09c      	sub	sp, #112	; 0x70
 8018b0a:	ab1d      	add	r3, sp, #116	; 0x74
 8018b0c:	9002      	str	r0, [sp, #8]
 8018b0e:	9006      	str	r0, [sp, #24]
 8018b10:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8018b14:	4809      	ldr	r0, [pc, #36]	; (8018b3c <siprintf+0x38>)
 8018b16:	9107      	str	r1, [sp, #28]
 8018b18:	9104      	str	r1, [sp, #16]
 8018b1a:	4909      	ldr	r1, [pc, #36]	; (8018b40 <siprintf+0x3c>)
 8018b1c:	f853 2b04 	ldr.w	r2, [r3], #4
 8018b20:	9105      	str	r1, [sp, #20]
 8018b22:	6800      	ldr	r0, [r0, #0]
 8018b24:	9301      	str	r3, [sp, #4]
 8018b26:	a902      	add	r1, sp, #8
 8018b28:	f002 ff56 	bl	801b9d8 <_svfiprintf_r>
 8018b2c:	9b02      	ldr	r3, [sp, #8]
 8018b2e:	2200      	movs	r2, #0
 8018b30:	701a      	strb	r2, [r3, #0]
 8018b32:	b01c      	add	sp, #112	; 0x70
 8018b34:	f85d eb04 	ldr.w	lr, [sp], #4
 8018b38:	b003      	add	sp, #12
 8018b3a:	4770      	bx	lr
 8018b3c:	20000074 	.word	0x20000074
 8018b40:	ffff0208 	.word	0xffff0208

08018b44 <strncmp>:
 8018b44:	b510      	push	{r4, lr}
 8018b46:	b16a      	cbz	r2, 8018b64 <strncmp+0x20>
 8018b48:	3901      	subs	r1, #1
 8018b4a:	1884      	adds	r4, r0, r2
 8018b4c:	f810 3b01 	ldrb.w	r3, [r0], #1
 8018b50:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8018b54:	4293      	cmp	r3, r2
 8018b56:	d103      	bne.n	8018b60 <strncmp+0x1c>
 8018b58:	42a0      	cmp	r0, r4
 8018b5a:	d001      	beq.n	8018b60 <strncmp+0x1c>
 8018b5c:	2b00      	cmp	r3, #0
 8018b5e:	d1f5      	bne.n	8018b4c <strncmp+0x8>
 8018b60:	1a98      	subs	r0, r3, r2
 8018b62:	bd10      	pop	{r4, pc}
 8018b64:	4610      	mov	r0, r2
 8018b66:	e7fc      	b.n	8018b62 <strncmp+0x1e>

08018b68 <strstr>:
 8018b68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018b6a:	780c      	ldrb	r4, [r1, #0]
 8018b6c:	b164      	cbz	r4, 8018b88 <strstr+0x20>
 8018b6e:	4603      	mov	r3, r0
 8018b70:	781a      	ldrb	r2, [r3, #0]
 8018b72:	4618      	mov	r0, r3
 8018b74:	1c5e      	adds	r6, r3, #1
 8018b76:	b90a      	cbnz	r2, 8018b7c <strstr+0x14>
 8018b78:	4610      	mov	r0, r2
 8018b7a:	e005      	b.n	8018b88 <strstr+0x20>
 8018b7c:	4294      	cmp	r4, r2
 8018b7e:	d108      	bne.n	8018b92 <strstr+0x2a>
 8018b80:	460d      	mov	r5, r1
 8018b82:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8018b86:	b902      	cbnz	r2, 8018b8a <strstr+0x22>
 8018b88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018b8a:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8018b8e:	4297      	cmp	r7, r2
 8018b90:	d0f7      	beq.n	8018b82 <strstr+0x1a>
 8018b92:	4633      	mov	r3, r6
 8018b94:	e7ec      	b.n	8018b70 <strstr+0x8>

08018b96 <sulp>:
 8018b96:	b570      	push	{r4, r5, r6, lr}
 8018b98:	4604      	mov	r4, r0
 8018b9a:	460d      	mov	r5, r1
 8018b9c:	ec45 4b10 	vmov	d0, r4, r5
 8018ba0:	4616      	mov	r6, r2
 8018ba2:	f002 fd5f 	bl	801b664 <__ulp>
 8018ba6:	ec51 0b10 	vmov	r0, r1, d0
 8018baa:	b17e      	cbz	r6, 8018bcc <sulp+0x36>
 8018bac:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8018bb0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8018bb4:	2b00      	cmp	r3, #0
 8018bb6:	dd09      	ble.n	8018bcc <sulp+0x36>
 8018bb8:	051b      	lsls	r3, r3, #20
 8018bba:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8018bbe:	2400      	movs	r4, #0
 8018bc0:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8018bc4:	4622      	mov	r2, r4
 8018bc6:	462b      	mov	r3, r5
 8018bc8:	f7e7 fd26 	bl	8000618 <__aeabi_dmul>
 8018bcc:	bd70      	pop	{r4, r5, r6, pc}
	...

08018bd0 <_strtod_l>:
 8018bd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018bd4:	b0a3      	sub	sp, #140	; 0x8c
 8018bd6:	461f      	mov	r7, r3
 8018bd8:	2300      	movs	r3, #0
 8018bda:	931e      	str	r3, [sp, #120]	; 0x78
 8018bdc:	4ba4      	ldr	r3, [pc, #656]	; (8018e70 <_strtod_l+0x2a0>)
 8018bde:	9219      	str	r2, [sp, #100]	; 0x64
 8018be0:	681b      	ldr	r3, [r3, #0]
 8018be2:	9307      	str	r3, [sp, #28]
 8018be4:	4604      	mov	r4, r0
 8018be6:	4618      	mov	r0, r3
 8018be8:	4688      	mov	r8, r1
 8018bea:	f7e7 fafb 	bl	80001e4 <strlen>
 8018bee:	f04f 0a00 	mov.w	sl, #0
 8018bf2:	4605      	mov	r5, r0
 8018bf4:	f04f 0b00 	mov.w	fp, #0
 8018bf8:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8018bfc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8018bfe:	781a      	ldrb	r2, [r3, #0]
 8018c00:	2a2b      	cmp	r2, #43	; 0x2b
 8018c02:	d04c      	beq.n	8018c9e <_strtod_l+0xce>
 8018c04:	d839      	bhi.n	8018c7a <_strtod_l+0xaa>
 8018c06:	2a0d      	cmp	r2, #13
 8018c08:	d832      	bhi.n	8018c70 <_strtod_l+0xa0>
 8018c0a:	2a08      	cmp	r2, #8
 8018c0c:	d832      	bhi.n	8018c74 <_strtod_l+0xa4>
 8018c0e:	2a00      	cmp	r2, #0
 8018c10:	d03c      	beq.n	8018c8c <_strtod_l+0xbc>
 8018c12:	2300      	movs	r3, #0
 8018c14:	930e      	str	r3, [sp, #56]	; 0x38
 8018c16:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8018c18:	7833      	ldrb	r3, [r6, #0]
 8018c1a:	2b30      	cmp	r3, #48	; 0x30
 8018c1c:	f040 80b4 	bne.w	8018d88 <_strtod_l+0x1b8>
 8018c20:	7873      	ldrb	r3, [r6, #1]
 8018c22:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8018c26:	2b58      	cmp	r3, #88	; 0x58
 8018c28:	d16c      	bne.n	8018d04 <_strtod_l+0x134>
 8018c2a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018c2c:	9301      	str	r3, [sp, #4]
 8018c2e:	ab1e      	add	r3, sp, #120	; 0x78
 8018c30:	9702      	str	r7, [sp, #8]
 8018c32:	9300      	str	r3, [sp, #0]
 8018c34:	4a8f      	ldr	r2, [pc, #572]	; (8018e74 <_strtod_l+0x2a4>)
 8018c36:	ab1f      	add	r3, sp, #124	; 0x7c
 8018c38:	a91d      	add	r1, sp, #116	; 0x74
 8018c3a:	4620      	mov	r0, r4
 8018c3c:	f001 fe78 	bl	801a930 <__gethex>
 8018c40:	f010 0707 	ands.w	r7, r0, #7
 8018c44:	4605      	mov	r5, r0
 8018c46:	d005      	beq.n	8018c54 <_strtod_l+0x84>
 8018c48:	2f06      	cmp	r7, #6
 8018c4a:	d12a      	bne.n	8018ca2 <_strtod_l+0xd2>
 8018c4c:	3601      	adds	r6, #1
 8018c4e:	2300      	movs	r3, #0
 8018c50:	961d      	str	r6, [sp, #116]	; 0x74
 8018c52:	930e      	str	r3, [sp, #56]	; 0x38
 8018c54:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8018c56:	2b00      	cmp	r3, #0
 8018c58:	f040 8596 	bne.w	8019788 <_strtod_l+0xbb8>
 8018c5c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018c5e:	b1db      	cbz	r3, 8018c98 <_strtod_l+0xc8>
 8018c60:	4652      	mov	r2, sl
 8018c62:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8018c66:	ec43 2b10 	vmov	d0, r2, r3
 8018c6a:	b023      	add	sp, #140	; 0x8c
 8018c6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018c70:	2a20      	cmp	r2, #32
 8018c72:	d1ce      	bne.n	8018c12 <_strtod_l+0x42>
 8018c74:	3301      	adds	r3, #1
 8018c76:	931d      	str	r3, [sp, #116]	; 0x74
 8018c78:	e7c0      	b.n	8018bfc <_strtod_l+0x2c>
 8018c7a:	2a2d      	cmp	r2, #45	; 0x2d
 8018c7c:	d1c9      	bne.n	8018c12 <_strtod_l+0x42>
 8018c7e:	2201      	movs	r2, #1
 8018c80:	920e      	str	r2, [sp, #56]	; 0x38
 8018c82:	1c5a      	adds	r2, r3, #1
 8018c84:	921d      	str	r2, [sp, #116]	; 0x74
 8018c86:	785b      	ldrb	r3, [r3, #1]
 8018c88:	2b00      	cmp	r3, #0
 8018c8a:	d1c4      	bne.n	8018c16 <_strtod_l+0x46>
 8018c8c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8018c8e:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8018c92:	2b00      	cmp	r3, #0
 8018c94:	f040 8576 	bne.w	8019784 <_strtod_l+0xbb4>
 8018c98:	4652      	mov	r2, sl
 8018c9a:	465b      	mov	r3, fp
 8018c9c:	e7e3      	b.n	8018c66 <_strtod_l+0x96>
 8018c9e:	2200      	movs	r2, #0
 8018ca0:	e7ee      	b.n	8018c80 <_strtod_l+0xb0>
 8018ca2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8018ca4:	b13a      	cbz	r2, 8018cb6 <_strtod_l+0xe6>
 8018ca6:	2135      	movs	r1, #53	; 0x35
 8018ca8:	a820      	add	r0, sp, #128	; 0x80
 8018caa:	f002 fde6 	bl	801b87a <__copybits>
 8018cae:	991e      	ldr	r1, [sp, #120]	; 0x78
 8018cb0:	4620      	mov	r0, r4
 8018cb2:	f002 f9ab 	bl	801b00c <_Bfree>
 8018cb6:	3f01      	subs	r7, #1
 8018cb8:	2f05      	cmp	r7, #5
 8018cba:	d807      	bhi.n	8018ccc <_strtod_l+0xfc>
 8018cbc:	e8df f007 	tbb	[pc, r7]
 8018cc0:	1d180b0e 	.word	0x1d180b0e
 8018cc4:	030e      	.short	0x030e
 8018cc6:	f04f 0b00 	mov.w	fp, #0
 8018cca:	46da      	mov	sl, fp
 8018ccc:	0728      	lsls	r0, r5, #28
 8018cce:	d5c1      	bpl.n	8018c54 <_strtod_l+0x84>
 8018cd0:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8018cd4:	e7be      	b.n	8018c54 <_strtod_l+0x84>
 8018cd6:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 8018cda:	e7f7      	b.n	8018ccc <_strtod_l+0xfc>
 8018cdc:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8018ce0:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8018ce2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8018ce6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8018cea:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8018cee:	e7ed      	b.n	8018ccc <_strtod_l+0xfc>
 8018cf0:	f8df b184 	ldr.w	fp, [pc, #388]	; 8018e78 <_strtod_l+0x2a8>
 8018cf4:	f04f 0a00 	mov.w	sl, #0
 8018cf8:	e7e8      	b.n	8018ccc <_strtod_l+0xfc>
 8018cfa:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8018cfe:	f04f 3aff 	mov.w	sl, #4294967295
 8018d02:	e7e3      	b.n	8018ccc <_strtod_l+0xfc>
 8018d04:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8018d06:	1c5a      	adds	r2, r3, #1
 8018d08:	921d      	str	r2, [sp, #116]	; 0x74
 8018d0a:	785b      	ldrb	r3, [r3, #1]
 8018d0c:	2b30      	cmp	r3, #48	; 0x30
 8018d0e:	d0f9      	beq.n	8018d04 <_strtod_l+0x134>
 8018d10:	2b00      	cmp	r3, #0
 8018d12:	d09f      	beq.n	8018c54 <_strtod_l+0x84>
 8018d14:	2301      	movs	r3, #1
 8018d16:	f04f 0900 	mov.w	r9, #0
 8018d1a:	9304      	str	r3, [sp, #16]
 8018d1c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8018d1e:	930a      	str	r3, [sp, #40]	; 0x28
 8018d20:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8018d24:	464f      	mov	r7, r9
 8018d26:	220a      	movs	r2, #10
 8018d28:	981d      	ldr	r0, [sp, #116]	; 0x74
 8018d2a:	7806      	ldrb	r6, [r0, #0]
 8018d2c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8018d30:	b2d9      	uxtb	r1, r3
 8018d32:	2909      	cmp	r1, #9
 8018d34:	d92a      	bls.n	8018d8c <_strtod_l+0x1bc>
 8018d36:	9907      	ldr	r1, [sp, #28]
 8018d38:	462a      	mov	r2, r5
 8018d3a:	f7ff ff03 	bl	8018b44 <strncmp>
 8018d3e:	b398      	cbz	r0, 8018da8 <_strtod_l+0x1d8>
 8018d40:	2000      	movs	r0, #0
 8018d42:	4633      	mov	r3, r6
 8018d44:	463d      	mov	r5, r7
 8018d46:	9007      	str	r0, [sp, #28]
 8018d48:	4602      	mov	r2, r0
 8018d4a:	2b65      	cmp	r3, #101	; 0x65
 8018d4c:	d001      	beq.n	8018d52 <_strtod_l+0x182>
 8018d4e:	2b45      	cmp	r3, #69	; 0x45
 8018d50:	d118      	bne.n	8018d84 <_strtod_l+0x1b4>
 8018d52:	b91d      	cbnz	r5, 8018d5c <_strtod_l+0x18c>
 8018d54:	9b04      	ldr	r3, [sp, #16]
 8018d56:	4303      	orrs	r3, r0
 8018d58:	d098      	beq.n	8018c8c <_strtod_l+0xbc>
 8018d5a:	2500      	movs	r5, #0
 8018d5c:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8018d60:	f108 0301 	add.w	r3, r8, #1
 8018d64:	931d      	str	r3, [sp, #116]	; 0x74
 8018d66:	f898 3001 	ldrb.w	r3, [r8, #1]
 8018d6a:	2b2b      	cmp	r3, #43	; 0x2b
 8018d6c:	d075      	beq.n	8018e5a <_strtod_l+0x28a>
 8018d6e:	2b2d      	cmp	r3, #45	; 0x2d
 8018d70:	d07b      	beq.n	8018e6a <_strtod_l+0x29a>
 8018d72:	f04f 0c00 	mov.w	ip, #0
 8018d76:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8018d7a:	2909      	cmp	r1, #9
 8018d7c:	f240 8082 	bls.w	8018e84 <_strtod_l+0x2b4>
 8018d80:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8018d84:	2600      	movs	r6, #0
 8018d86:	e09d      	b.n	8018ec4 <_strtod_l+0x2f4>
 8018d88:	2300      	movs	r3, #0
 8018d8a:	e7c4      	b.n	8018d16 <_strtod_l+0x146>
 8018d8c:	2f08      	cmp	r7, #8
 8018d8e:	bfd8      	it	le
 8018d90:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8018d92:	f100 0001 	add.w	r0, r0, #1
 8018d96:	bfda      	itte	le
 8018d98:	fb02 3301 	mlale	r3, r2, r1, r3
 8018d9c:	9309      	strle	r3, [sp, #36]	; 0x24
 8018d9e:	fb02 3909 	mlagt	r9, r2, r9, r3
 8018da2:	3701      	adds	r7, #1
 8018da4:	901d      	str	r0, [sp, #116]	; 0x74
 8018da6:	e7bf      	b.n	8018d28 <_strtod_l+0x158>
 8018da8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8018daa:	195a      	adds	r2, r3, r5
 8018dac:	921d      	str	r2, [sp, #116]	; 0x74
 8018dae:	5d5b      	ldrb	r3, [r3, r5]
 8018db0:	2f00      	cmp	r7, #0
 8018db2:	d037      	beq.n	8018e24 <_strtod_l+0x254>
 8018db4:	9007      	str	r0, [sp, #28]
 8018db6:	463d      	mov	r5, r7
 8018db8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8018dbc:	2a09      	cmp	r2, #9
 8018dbe:	d912      	bls.n	8018de6 <_strtod_l+0x216>
 8018dc0:	2201      	movs	r2, #1
 8018dc2:	e7c2      	b.n	8018d4a <_strtod_l+0x17a>
 8018dc4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8018dc6:	1c5a      	adds	r2, r3, #1
 8018dc8:	921d      	str	r2, [sp, #116]	; 0x74
 8018dca:	785b      	ldrb	r3, [r3, #1]
 8018dcc:	3001      	adds	r0, #1
 8018dce:	2b30      	cmp	r3, #48	; 0x30
 8018dd0:	d0f8      	beq.n	8018dc4 <_strtod_l+0x1f4>
 8018dd2:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8018dd6:	2a08      	cmp	r2, #8
 8018dd8:	f200 84db 	bhi.w	8019792 <_strtod_l+0xbc2>
 8018ddc:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8018dde:	9007      	str	r0, [sp, #28]
 8018de0:	2000      	movs	r0, #0
 8018de2:	920a      	str	r2, [sp, #40]	; 0x28
 8018de4:	4605      	mov	r5, r0
 8018de6:	3b30      	subs	r3, #48	; 0x30
 8018de8:	f100 0201 	add.w	r2, r0, #1
 8018dec:	d014      	beq.n	8018e18 <_strtod_l+0x248>
 8018dee:	9907      	ldr	r1, [sp, #28]
 8018df0:	4411      	add	r1, r2
 8018df2:	9107      	str	r1, [sp, #28]
 8018df4:	462a      	mov	r2, r5
 8018df6:	eb00 0e05 	add.w	lr, r0, r5
 8018dfa:	210a      	movs	r1, #10
 8018dfc:	4572      	cmp	r2, lr
 8018dfe:	d113      	bne.n	8018e28 <_strtod_l+0x258>
 8018e00:	182a      	adds	r2, r5, r0
 8018e02:	2a08      	cmp	r2, #8
 8018e04:	f105 0501 	add.w	r5, r5, #1
 8018e08:	4405      	add	r5, r0
 8018e0a:	dc1c      	bgt.n	8018e46 <_strtod_l+0x276>
 8018e0c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8018e0e:	220a      	movs	r2, #10
 8018e10:	fb02 3301 	mla	r3, r2, r1, r3
 8018e14:	9309      	str	r3, [sp, #36]	; 0x24
 8018e16:	2200      	movs	r2, #0
 8018e18:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8018e1a:	1c59      	adds	r1, r3, #1
 8018e1c:	911d      	str	r1, [sp, #116]	; 0x74
 8018e1e:	785b      	ldrb	r3, [r3, #1]
 8018e20:	4610      	mov	r0, r2
 8018e22:	e7c9      	b.n	8018db8 <_strtod_l+0x1e8>
 8018e24:	4638      	mov	r0, r7
 8018e26:	e7d2      	b.n	8018dce <_strtod_l+0x1fe>
 8018e28:	2a08      	cmp	r2, #8
 8018e2a:	dc04      	bgt.n	8018e36 <_strtod_l+0x266>
 8018e2c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8018e2e:	434e      	muls	r6, r1
 8018e30:	9609      	str	r6, [sp, #36]	; 0x24
 8018e32:	3201      	adds	r2, #1
 8018e34:	e7e2      	b.n	8018dfc <_strtod_l+0x22c>
 8018e36:	f102 0c01 	add.w	ip, r2, #1
 8018e3a:	f1bc 0f10 	cmp.w	ip, #16
 8018e3e:	bfd8      	it	le
 8018e40:	fb01 f909 	mulle.w	r9, r1, r9
 8018e44:	e7f5      	b.n	8018e32 <_strtod_l+0x262>
 8018e46:	2d10      	cmp	r5, #16
 8018e48:	bfdc      	itt	le
 8018e4a:	220a      	movle	r2, #10
 8018e4c:	fb02 3909 	mlale	r9, r2, r9, r3
 8018e50:	e7e1      	b.n	8018e16 <_strtod_l+0x246>
 8018e52:	2300      	movs	r3, #0
 8018e54:	9307      	str	r3, [sp, #28]
 8018e56:	2201      	movs	r2, #1
 8018e58:	e77c      	b.n	8018d54 <_strtod_l+0x184>
 8018e5a:	f04f 0c00 	mov.w	ip, #0
 8018e5e:	f108 0302 	add.w	r3, r8, #2
 8018e62:	931d      	str	r3, [sp, #116]	; 0x74
 8018e64:	f898 3002 	ldrb.w	r3, [r8, #2]
 8018e68:	e785      	b.n	8018d76 <_strtod_l+0x1a6>
 8018e6a:	f04f 0c01 	mov.w	ip, #1
 8018e6e:	e7f6      	b.n	8018e5e <_strtod_l+0x28e>
 8018e70:	08021230 	.word	0x08021230
 8018e74:	08021054 	.word	0x08021054
 8018e78:	7ff00000 	.word	0x7ff00000
 8018e7c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8018e7e:	1c59      	adds	r1, r3, #1
 8018e80:	911d      	str	r1, [sp, #116]	; 0x74
 8018e82:	785b      	ldrb	r3, [r3, #1]
 8018e84:	2b30      	cmp	r3, #48	; 0x30
 8018e86:	d0f9      	beq.n	8018e7c <_strtod_l+0x2ac>
 8018e88:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8018e8c:	2908      	cmp	r1, #8
 8018e8e:	f63f af79 	bhi.w	8018d84 <_strtod_l+0x1b4>
 8018e92:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8018e96:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8018e98:	9308      	str	r3, [sp, #32]
 8018e9a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8018e9c:	1c59      	adds	r1, r3, #1
 8018e9e:	911d      	str	r1, [sp, #116]	; 0x74
 8018ea0:	785b      	ldrb	r3, [r3, #1]
 8018ea2:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8018ea6:	2e09      	cmp	r6, #9
 8018ea8:	d937      	bls.n	8018f1a <_strtod_l+0x34a>
 8018eaa:	9e08      	ldr	r6, [sp, #32]
 8018eac:	1b89      	subs	r1, r1, r6
 8018eae:	2908      	cmp	r1, #8
 8018eb0:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8018eb4:	dc02      	bgt.n	8018ebc <_strtod_l+0x2ec>
 8018eb6:	4576      	cmp	r6, lr
 8018eb8:	bfa8      	it	ge
 8018eba:	4676      	movge	r6, lr
 8018ebc:	f1bc 0f00 	cmp.w	ip, #0
 8018ec0:	d000      	beq.n	8018ec4 <_strtod_l+0x2f4>
 8018ec2:	4276      	negs	r6, r6
 8018ec4:	2d00      	cmp	r5, #0
 8018ec6:	d14f      	bne.n	8018f68 <_strtod_l+0x398>
 8018ec8:	9904      	ldr	r1, [sp, #16]
 8018eca:	4301      	orrs	r1, r0
 8018ecc:	f47f aec2 	bne.w	8018c54 <_strtod_l+0x84>
 8018ed0:	2a00      	cmp	r2, #0
 8018ed2:	f47f aedb 	bne.w	8018c8c <_strtod_l+0xbc>
 8018ed6:	2b69      	cmp	r3, #105	; 0x69
 8018ed8:	d027      	beq.n	8018f2a <_strtod_l+0x35a>
 8018eda:	dc24      	bgt.n	8018f26 <_strtod_l+0x356>
 8018edc:	2b49      	cmp	r3, #73	; 0x49
 8018ede:	d024      	beq.n	8018f2a <_strtod_l+0x35a>
 8018ee0:	2b4e      	cmp	r3, #78	; 0x4e
 8018ee2:	f47f aed3 	bne.w	8018c8c <_strtod_l+0xbc>
 8018ee6:	499e      	ldr	r1, [pc, #632]	; (8019160 <_strtod_l+0x590>)
 8018ee8:	a81d      	add	r0, sp, #116	; 0x74
 8018eea:	f001 ff79 	bl	801ade0 <__match>
 8018eee:	2800      	cmp	r0, #0
 8018ef0:	f43f aecc 	beq.w	8018c8c <_strtod_l+0xbc>
 8018ef4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8018ef6:	781b      	ldrb	r3, [r3, #0]
 8018ef8:	2b28      	cmp	r3, #40	; 0x28
 8018efa:	d12d      	bne.n	8018f58 <_strtod_l+0x388>
 8018efc:	4999      	ldr	r1, [pc, #612]	; (8019164 <_strtod_l+0x594>)
 8018efe:	aa20      	add	r2, sp, #128	; 0x80
 8018f00:	a81d      	add	r0, sp, #116	; 0x74
 8018f02:	f001 ff81 	bl	801ae08 <__hexnan>
 8018f06:	2805      	cmp	r0, #5
 8018f08:	d126      	bne.n	8018f58 <_strtod_l+0x388>
 8018f0a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8018f0c:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8018f10:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8018f14:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8018f18:	e69c      	b.n	8018c54 <_strtod_l+0x84>
 8018f1a:	210a      	movs	r1, #10
 8018f1c:	fb01 3e0e 	mla	lr, r1, lr, r3
 8018f20:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8018f24:	e7b9      	b.n	8018e9a <_strtod_l+0x2ca>
 8018f26:	2b6e      	cmp	r3, #110	; 0x6e
 8018f28:	e7db      	b.n	8018ee2 <_strtod_l+0x312>
 8018f2a:	498f      	ldr	r1, [pc, #572]	; (8019168 <_strtod_l+0x598>)
 8018f2c:	a81d      	add	r0, sp, #116	; 0x74
 8018f2e:	f001 ff57 	bl	801ade0 <__match>
 8018f32:	2800      	cmp	r0, #0
 8018f34:	f43f aeaa 	beq.w	8018c8c <_strtod_l+0xbc>
 8018f38:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8018f3a:	498c      	ldr	r1, [pc, #560]	; (801916c <_strtod_l+0x59c>)
 8018f3c:	3b01      	subs	r3, #1
 8018f3e:	a81d      	add	r0, sp, #116	; 0x74
 8018f40:	931d      	str	r3, [sp, #116]	; 0x74
 8018f42:	f001 ff4d 	bl	801ade0 <__match>
 8018f46:	b910      	cbnz	r0, 8018f4e <_strtod_l+0x37e>
 8018f48:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8018f4a:	3301      	adds	r3, #1
 8018f4c:	931d      	str	r3, [sp, #116]	; 0x74
 8018f4e:	f8df b22c 	ldr.w	fp, [pc, #556]	; 801917c <_strtod_l+0x5ac>
 8018f52:	f04f 0a00 	mov.w	sl, #0
 8018f56:	e67d      	b.n	8018c54 <_strtod_l+0x84>
 8018f58:	4885      	ldr	r0, [pc, #532]	; (8019170 <_strtod_l+0x5a0>)
 8018f5a:	f002 ff99 	bl	801be90 <nan>
 8018f5e:	ed8d 0b04 	vstr	d0, [sp, #16]
 8018f62:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8018f66:	e675      	b.n	8018c54 <_strtod_l+0x84>
 8018f68:	9b07      	ldr	r3, [sp, #28]
 8018f6a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8018f6c:	1af3      	subs	r3, r6, r3
 8018f6e:	2f00      	cmp	r7, #0
 8018f70:	bf08      	it	eq
 8018f72:	462f      	moveq	r7, r5
 8018f74:	2d10      	cmp	r5, #16
 8018f76:	9308      	str	r3, [sp, #32]
 8018f78:	46a8      	mov	r8, r5
 8018f7a:	bfa8      	it	ge
 8018f7c:	f04f 0810 	movge.w	r8, #16
 8018f80:	f7e7 fad0 	bl	8000524 <__aeabi_ui2d>
 8018f84:	2d09      	cmp	r5, #9
 8018f86:	4682      	mov	sl, r0
 8018f88:	468b      	mov	fp, r1
 8018f8a:	dd13      	ble.n	8018fb4 <_strtod_l+0x3e4>
 8018f8c:	4b79      	ldr	r3, [pc, #484]	; (8019174 <_strtod_l+0x5a4>)
 8018f8e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8018f92:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8018f96:	f7e7 fb3f 	bl	8000618 <__aeabi_dmul>
 8018f9a:	4682      	mov	sl, r0
 8018f9c:	4648      	mov	r0, r9
 8018f9e:	468b      	mov	fp, r1
 8018fa0:	f7e7 fac0 	bl	8000524 <__aeabi_ui2d>
 8018fa4:	4602      	mov	r2, r0
 8018fa6:	460b      	mov	r3, r1
 8018fa8:	4650      	mov	r0, sl
 8018faa:	4659      	mov	r1, fp
 8018fac:	f7e7 f97e 	bl	80002ac <__adddf3>
 8018fb0:	4682      	mov	sl, r0
 8018fb2:	468b      	mov	fp, r1
 8018fb4:	2d0f      	cmp	r5, #15
 8018fb6:	dc38      	bgt.n	801902a <_strtod_l+0x45a>
 8018fb8:	9b08      	ldr	r3, [sp, #32]
 8018fba:	2b00      	cmp	r3, #0
 8018fbc:	f43f ae4a 	beq.w	8018c54 <_strtod_l+0x84>
 8018fc0:	dd24      	ble.n	801900c <_strtod_l+0x43c>
 8018fc2:	2b16      	cmp	r3, #22
 8018fc4:	dc0b      	bgt.n	8018fde <_strtod_l+0x40e>
 8018fc6:	4d6b      	ldr	r5, [pc, #428]	; (8019174 <_strtod_l+0x5a4>)
 8018fc8:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8018fcc:	e9d5 0100 	ldrd	r0, r1, [r5]
 8018fd0:	4652      	mov	r2, sl
 8018fd2:	465b      	mov	r3, fp
 8018fd4:	f7e7 fb20 	bl	8000618 <__aeabi_dmul>
 8018fd8:	4682      	mov	sl, r0
 8018fda:	468b      	mov	fp, r1
 8018fdc:	e63a      	b.n	8018c54 <_strtod_l+0x84>
 8018fde:	9a08      	ldr	r2, [sp, #32]
 8018fe0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8018fe4:	4293      	cmp	r3, r2
 8018fe6:	db20      	blt.n	801902a <_strtod_l+0x45a>
 8018fe8:	4c62      	ldr	r4, [pc, #392]	; (8019174 <_strtod_l+0x5a4>)
 8018fea:	f1c5 050f 	rsb	r5, r5, #15
 8018fee:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8018ff2:	4652      	mov	r2, sl
 8018ff4:	465b      	mov	r3, fp
 8018ff6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018ffa:	f7e7 fb0d 	bl	8000618 <__aeabi_dmul>
 8018ffe:	9b08      	ldr	r3, [sp, #32]
 8019000:	1b5d      	subs	r5, r3, r5
 8019002:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8019006:	e9d4 2300 	ldrd	r2, r3, [r4]
 801900a:	e7e3      	b.n	8018fd4 <_strtod_l+0x404>
 801900c:	9b08      	ldr	r3, [sp, #32]
 801900e:	3316      	adds	r3, #22
 8019010:	db0b      	blt.n	801902a <_strtod_l+0x45a>
 8019012:	9b07      	ldr	r3, [sp, #28]
 8019014:	4a57      	ldr	r2, [pc, #348]	; (8019174 <_strtod_l+0x5a4>)
 8019016:	1b9e      	subs	r6, r3, r6
 8019018:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 801901c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8019020:	4650      	mov	r0, sl
 8019022:	4659      	mov	r1, fp
 8019024:	f7e7 fc22 	bl	800086c <__aeabi_ddiv>
 8019028:	e7d6      	b.n	8018fd8 <_strtod_l+0x408>
 801902a:	9b08      	ldr	r3, [sp, #32]
 801902c:	eba5 0808 	sub.w	r8, r5, r8
 8019030:	4498      	add	r8, r3
 8019032:	f1b8 0f00 	cmp.w	r8, #0
 8019036:	dd71      	ble.n	801911c <_strtod_l+0x54c>
 8019038:	f018 030f 	ands.w	r3, r8, #15
 801903c:	d00a      	beq.n	8019054 <_strtod_l+0x484>
 801903e:	494d      	ldr	r1, [pc, #308]	; (8019174 <_strtod_l+0x5a4>)
 8019040:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8019044:	4652      	mov	r2, sl
 8019046:	465b      	mov	r3, fp
 8019048:	e9d1 0100 	ldrd	r0, r1, [r1]
 801904c:	f7e7 fae4 	bl	8000618 <__aeabi_dmul>
 8019050:	4682      	mov	sl, r0
 8019052:	468b      	mov	fp, r1
 8019054:	f038 080f 	bics.w	r8, r8, #15
 8019058:	d04d      	beq.n	80190f6 <_strtod_l+0x526>
 801905a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 801905e:	dd22      	ble.n	80190a6 <_strtod_l+0x4d6>
 8019060:	2500      	movs	r5, #0
 8019062:	462e      	mov	r6, r5
 8019064:	9509      	str	r5, [sp, #36]	; 0x24
 8019066:	9507      	str	r5, [sp, #28]
 8019068:	2322      	movs	r3, #34	; 0x22
 801906a:	f8df b110 	ldr.w	fp, [pc, #272]	; 801917c <_strtod_l+0x5ac>
 801906e:	6023      	str	r3, [r4, #0]
 8019070:	f04f 0a00 	mov.w	sl, #0
 8019074:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019076:	2b00      	cmp	r3, #0
 8019078:	f43f adec 	beq.w	8018c54 <_strtod_l+0x84>
 801907c:	991e      	ldr	r1, [sp, #120]	; 0x78
 801907e:	4620      	mov	r0, r4
 8019080:	f001 ffc4 	bl	801b00c <_Bfree>
 8019084:	9907      	ldr	r1, [sp, #28]
 8019086:	4620      	mov	r0, r4
 8019088:	f001 ffc0 	bl	801b00c <_Bfree>
 801908c:	4631      	mov	r1, r6
 801908e:	4620      	mov	r0, r4
 8019090:	f001 ffbc 	bl	801b00c <_Bfree>
 8019094:	9909      	ldr	r1, [sp, #36]	; 0x24
 8019096:	4620      	mov	r0, r4
 8019098:	f001 ffb8 	bl	801b00c <_Bfree>
 801909c:	4629      	mov	r1, r5
 801909e:	4620      	mov	r0, r4
 80190a0:	f001 ffb4 	bl	801b00c <_Bfree>
 80190a4:	e5d6      	b.n	8018c54 <_strtod_l+0x84>
 80190a6:	2300      	movs	r3, #0
 80190a8:	ea4f 1828 	mov.w	r8, r8, asr #4
 80190ac:	4650      	mov	r0, sl
 80190ae:	4659      	mov	r1, fp
 80190b0:	4699      	mov	r9, r3
 80190b2:	f1b8 0f01 	cmp.w	r8, #1
 80190b6:	dc21      	bgt.n	80190fc <_strtod_l+0x52c>
 80190b8:	b10b      	cbz	r3, 80190be <_strtod_l+0x4ee>
 80190ba:	4682      	mov	sl, r0
 80190bc:	468b      	mov	fp, r1
 80190be:	4b2e      	ldr	r3, [pc, #184]	; (8019178 <_strtod_l+0x5a8>)
 80190c0:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80190c4:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 80190c8:	4652      	mov	r2, sl
 80190ca:	465b      	mov	r3, fp
 80190cc:	e9d9 0100 	ldrd	r0, r1, [r9]
 80190d0:	f7e7 faa2 	bl	8000618 <__aeabi_dmul>
 80190d4:	4b29      	ldr	r3, [pc, #164]	; (801917c <_strtod_l+0x5ac>)
 80190d6:	460a      	mov	r2, r1
 80190d8:	400b      	ands	r3, r1
 80190da:	4929      	ldr	r1, [pc, #164]	; (8019180 <_strtod_l+0x5b0>)
 80190dc:	428b      	cmp	r3, r1
 80190de:	4682      	mov	sl, r0
 80190e0:	d8be      	bhi.n	8019060 <_strtod_l+0x490>
 80190e2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80190e6:	428b      	cmp	r3, r1
 80190e8:	bf86      	itte	hi
 80190ea:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8019184 <_strtod_l+0x5b4>
 80190ee:	f04f 3aff 	movhi.w	sl, #4294967295
 80190f2:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80190f6:	2300      	movs	r3, #0
 80190f8:	9304      	str	r3, [sp, #16]
 80190fa:	e081      	b.n	8019200 <_strtod_l+0x630>
 80190fc:	f018 0f01 	tst.w	r8, #1
 8019100:	d007      	beq.n	8019112 <_strtod_l+0x542>
 8019102:	4b1d      	ldr	r3, [pc, #116]	; (8019178 <_strtod_l+0x5a8>)
 8019104:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8019108:	e9d3 2300 	ldrd	r2, r3, [r3]
 801910c:	f7e7 fa84 	bl	8000618 <__aeabi_dmul>
 8019110:	2301      	movs	r3, #1
 8019112:	f109 0901 	add.w	r9, r9, #1
 8019116:	ea4f 0868 	mov.w	r8, r8, asr #1
 801911a:	e7ca      	b.n	80190b2 <_strtod_l+0x4e2>
 801911c:	d0eb      	beq.n	80190f6 <_strtod_l+0x526>
 801911e:	f1c8 0800 	rsb	r8, r8, #0
 8019122:	f018 020f 	ands.w	r2, r8, #15
 8019126:	d00a      	beq.n	801913e <_strtod_l+0x56e>
 8019128:	4b12      	ldr	r3, [pc, #72]	; (8019174 <_strtod_l+0x5a4>)
 801912a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801912e:	4650      	mov	r0, sl
 8019130:	4659      	mov	r1, fp
 8019132:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019136:	f7e7 fb99 	bl	800086c <__aeabi_ddiv>
 801913a:	4682      	mov	sl, r0
 801913c:	468b      	mov	fp, r1
 801913e:	ea5f 1828 	movs.w	r8, r8, asr #4
 8019142:	d0d8      	beq.n	80190f6 <_strtod_l+0x526>
 8019144:	f1b8 0f1f 	cmp.w	r8, #31
 8019148:	dd1e      	ble.n	8019188 <_strtod_l+0x5b8>
 801914a:	2500      	movs	r5, #0
 801914c:	462e      	mov	r6, r5
 801914e:	9509      	str	r5, [sp, #36]	; 0x24
 8019150:	9507      	str	r5, [sp, #28]
 8019152:	2322      	movs	r3, #34	; 0x22
 8019154:	f04f 0a00 	mov.w	sl, #0
 8019158:	f04f 0b00 	mov.w	fp, #0
 801915c:	6023      	str	r3, [r4, #0]
 801915e:	e789      	b.n	8019074 <_strtod_l+0x4a4>
 8019160:	08020fb5 	.word	0x08020fb5
 8019164:	08021068 	.word	0x08021068
 8019168:	08020fad 	.word	0x08020fad
 801916c:	080210e7 	.word	0x080210e7
 8019170:	080210e3 	.word	0x080210e3
 8019174:	080212d0 	.word	0x080212d0
 8019178:	080212a8 	.word	0x080212a8
 801917c:	7ff00000 	.word	0x7ff00000
 8019180:	7ca00000 	.word	0x7ca00000
 8019184:	7fefffff 	.word	0x7fefffff
 8019188:	f018 0310 	ands.w	r3, r8, #16
 801918c:	bf18      	it	ne
 801918e:	236a      	movne	r3, #106	; 0x6a
 8019190:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8019548 <_strtod_l+0x978>
 8019194:	9304      	str	r3, [sp, #16]
 8019196:	4650      	mov	r0, sl
 8019198:	4659      	mov	r1, fp
 801919a:	2300      	movs	r3, #0
 801919c:	f018 0f01 	tst.w	r8, #1
 80191a0:	d004      	beq.n	80191ac <_strtod_l+0x5dc>
 80191a2:	e9d9 2300 	ldrd	r2, r3, [r9]
 80191a6:	f7e7 fa37 	bl	8000618 <__aeabi_dmul>
 80191aa:	2301      	movs	r3, #1
 80191ac:	ea5f 0868 	movs.w	r8, r8, asr #1
 80191b0:	f109 0908 	add.w	r9, r9, #8
 80191b4:	d1f2      	bne.n	801919c <_strtod_l+0x5cc>
 80191b6:	b10b      	cbz	r3, 80191bc <_strtod_l+0x5ec>
 80191b8:	4682      	mov	sl, r0
 80191ba:	468b      	mov	fp, r1
 80191bc:	9b04      	ldr	r3, [sp, #16]
 80191be:	b1bb      	cbz	r3, 80191f0 <_strtod_l+0x620>
 80191c0:	f3cb 530a 	ubfx	r3, fp, #20, #11
 80191c4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80191c8:	2b00      	cmp	r3, #0
 80191ca:	4659      	mov	r1, fp
 80191cc:	dd10      	ble.n	80191f0 <_strtod_l+0x620>
 80191ce:	2b1f      	cmp	r3, #31
 80191d0:	f340 8128 	ble.w	8019424 <_strtod_l+0x854>
 80191d4:	2b34      	cmp	r3, #52	; 0x34
 80191d6:	bfde      	ittt	le
 80191d8:	3b20      	suble	r3, #32
 80191da:	f04f 32ff 	movle.w	r2, #4294967295
 80191de:	fa02 f303 	lslle.w	r3, r2, r3
 80191e2:	f04f 0a00 	mov.w	sl, #0
 80191e6:	bfcc      	ite	gt
 80191e8:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80191ec:	ea03 0b01 	andle.w	fp, r3, r1
 80191f0:	2200      	movs	r2, #0
 80191f2:	2300      	movs	r3, #0
 80191f4:	4650      	mov	r0, sl
 80191f6:	4659      	mov	r1, fp
 80191f8:	f7e7 fc76 	bl	8000ae8 <__aeabi_dcmpeq>
 80191fc:	2800      	cmp	r0, #0
 80191fe:	d1a4      	bne.n	801914a <_strtod_l+0x57a>
 8019200:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019202:	9300      	str	r3, [sp, #0]
 8019204:	990a      	ldr	r1, [sp, #40]	; 0x28
 8019206:	462b      	mov	r3, r5
 8019208:	463a      	mov	r2, r7
 801920a:	4620      	mov	r0, r4
 801920c:	f001 ff6a 	bl	801b0e4 <__s2b>
 8019210:	9009      	str	r0, [sp, #36]	; 0x24
 8019212:	2800      	cmp	r0, #0
 8019214:	f43f af24 	beq.w	8019060 <_strtod_l+0x490>
 8019218:	9b07      	ldr	r3, [sp, #28]
 801921a:	1b9e      	subs	r6, r3, r6
 801921c:	9b08      	ldr	r3, [sp, #32]
 801921e:	2b00      	cmp	r3, #0
 8019220:	bfb4      	ite	lt
 8019222:	4633      	movlt	r3, r6
 8019224:	2300      	movge	r3, #0
 8019226:	9310      	str	r3, [sp, #64]	; 0x40
 8019228:	9b08      	ldr	r3, [sp, #32]
 801922a:	2500      	movs	r5, #0
 801922c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8019230:	9318      	str	r3, [sp, #96]	; 0x60
 8019232:	462e      	mov	r6, r5
 8019234:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019236:	4620      	mov	r0, r4
 8019238:	6859      	ldr	r1, [r3, #4]
 801923a:	f001 fea7 	bl	801af8c <_Balloc>
 801923e:	9007      	str	r0, [sp, #28]
 8019240:	2800      	cmp	r0, #0
 8019242:	f43f af11 	beq.w	8019068 <_strtod_l+0x498>
 8019246:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019248:	691a      	ldr	r2, [r3, #16]
 801924a:	3202      	adds	r2, #2
 801924c:	f103 010c 	add.w	r1, r3, #12
 8019250:	0092      	lsls	r2, r2, #2
 8019252:	300c      	adds	r0, #12
 8019254:	f7fe fe76 	bl	8017f44 <memcpy>
 8019258:	ec4b ab10 	vmov	d0, sl, fp
 801925c:	aa20      	add	r2, sp, #128	; 0x80
 801925e:	a91f      	add	r1, sp, #124	; 0x7c
 8019260:	4620      	mov	r0, r4
 8019262:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8019266:	f002 fa79 	bl	801b75c <__d2b>
 801926a:	901e      	str	r0, [sp, #120]	; 0x78
 801926c:	2800      	cmp	r0, #0
 801926e:	f43f aefb 	beq.w	8019068 <_strtod_l+0x498>
 8019272:	2101      	movs	r1, #1
 8019274:	4620      	mov	r0, r4
 8019276:	f001 ffcf 	bl	801b218 <__i2b>
 801927a:	4606      	mov	r6, r0
 801927c:	2800      	cmp	r0, #0
 801927e:	f43f aef3 	beq.w	8019068 <_strtod_l+0x498>
 8019282:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8019284:	9904      	ldr	r1, [sp, #16]
 8019286:	2b00      	cmp	r3, #0
 8019288:	bfab      	itete	ge
 801928a:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 801928c:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 801928e:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8019290:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 8019294:	bfac      	ite	ge
 8019296:	eb03 0902 	addge.w	r9, r3, r2
 801929a:	1ad7      	sublt	r7, r2, r3
 801929c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801929e:	eba3 0801 	sub.w	r8, r3, r1
 80192a2:	4490      	add	r8, r2
 80192a4:	4ba3      	ldr	r3, [pc, #652]	; (8019534 <_strtod_l+0x964>)
 80192a6:	f108 38ff 	add.w	r8, r8, #4294967295
 80192aa:	4598      	cmp	r8, r3
 80192ac:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80192b0:	f280 80cc 	bge.w	801944c <_strtod_l+0x87c>
 80192b4:	eba3 0308 	sub.w	r3, r3, r8
 80192b8:	2b1f      	cmp	r3, #31
 80192ba:	eba2 0203 	sub.w	r2, r2, r3
 80192be:	f04f 0101 	mov.w	r1, #1
 80192c2:	f300 80b6 	bgt.w	8019432 <_strtod_l+0x862>
 80192c6:	fa01 f303 	lsl.w	r3, r1, r3
 80192ca:	9311      	str	r3, [sp, #68]	; 0x44
 80192cc:	2300      	movs	r3, #0
 80192ce:	930c      	str	r3, [sp, #48]	; 0x30
 80192d0:	eb09 0802 	add.w	r8, r9, r2
 80192d4:	9b04      	ldr	r3, [sp, #16]
 80192d6:	45c1      	cmp	r9, r8
 80192d8:	4417      	add	r7, r2
 80192da:	441f      	add	r7, r3
 80192dc:	464b      	mov	r3, r9
 80192de:	bfa8      	it	ge
 80192e0:	4643      	movge	r3, r8
 80192e2:	42bb      	cmp	r3, r7
 80192e4:	bfa8      	it	ge
 80192e6:	463b      	movge	r3, r7
 80192e8:	2b00      	cmp	r3, #0
 80192ea:	bfc2      	ittt	gt
 80192ec:	eba8 0803 	subgt.w	r8, r8, r3
 80192f0:	1aff      	subgt	r7, r7, r3
 80192f2:	eba9 0903 	subgt.w	r9, r9, r3
 80192f6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80192f8:	2b00      	cmp	r3, #0
 80192fa:	dd17      	ble.n	801932c <_strtod_l+0x75c>
 80192fc:	4631      	mov	r1, r6
 80192fe:	461a      	mov	r2, r3
 8019300:	4620      	mov	r0, r4
 8019302:	f002 f845 	bl	801b390 <__pow5mult>
 8019306:	4606      	mov	r6, r0
 8019308:	2800      	cmp	r0, #0
 801930a:	f43f aead 	beq.w	8019068 <_strtod_l+0x498>
 801930e:	4601      	mov	r1, r0
 8019310:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8019312:	4620      	mov	r0, r4
 8019314:	f001 ff96 	bl	801b244 <__multiply>
 8019318:	900f      	str	r0, [sp, #60]	; 0x3c
 801931a:	2800      	cmp	r0, #0
 801931c:	f43f aea4 	beq.w	8019068 <_strtod_l+0x498>
 8019320:	991e      	ldr	r1, [sp, #120]	; 0x78
 8019322:	4620      	mov	r0, r4
 8019324:	f001 fe72 	bl	801b00c <_Bfree>
 8019328:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801932a:	931e      	str	r3, [sp, #120]	; 0x78
 801932c:	f1b8 0f00 	cmp.w	r8, #0
 8019330:	f300 8091 	bgt.w	8019456 <_strtod_l+0x886>
 8019334:	9b08      	ldr	r3, [sp, #32]
 8019336:	2b00      	cmp	r3, #0
 8019338:	dd08      	ble.n	801934c <_strtod_l+0x77c>
 801933a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801933c:	9907      	ldr	r1, [sp, #28]
 801933e:	4620      	mov	r0, r4
 8019340:	f002 f826 	bl	801b390 <__pow5mult>
 8019344:	9007      	str	r0, [sp, #28]
 8019346:	2800      	cmp	r0, #0
 8019348:	f43f ae8e 	beq.w	8019068 <_strtod_l+0x498>
 801934c:	2f00      	cmp	r7, #0
 801934e:	dd08      	ble.n	8019362 <_strtod_l+0x792>
 8019350:	9907      	ldr	r1, [sp, #28]
 8019352:	463a      	mov	r2, r7
 8019354:	4620      	mov	r0, r4
 8019356:	f002 f875 	bl	801b444 <__lshift>
 801935a:	9007      	str	r0, [sp, #28]
 801935c:	2800      	cmp	r0, #0
 801935e:	f43f ae83 	beq.w	8019068 <_strtod_l+0x498>
 8019362:	f1b9 0f00 	cmp.w	r9, #0
 8019366:	dd08      	ble.n	801937a <_strtod_l+0x7aa>
 8019368:	4631      	mov	r1, r6
 801936a:	464a      	mov	r2, r9
 801936c:	4620      	mov	r0, r4
 801936e:	f002 f869 	bl	801b444 <__lshift>
 8019372:	4606      	mov	r6, r0
 8019374:	2800      	cmp	r0, #0
 8019376:	f43f ae77 	beq.w	8019068 <_strtod_l+0x498>
 801937a:	9a07      	ldr	r2, [sp, #28]
 801937c:	991e      	ldr	r1, [sp, #120]	; 0x78
 801937e:	4620      	mov	r0, r4
 8019380:	f002 f8e8 	bl	801b554 <__mdiff>
 8019384:	4605      	mov	r5, r0
 8019386:	2800      	cmp	r0, #0
 8019388:	f43f ae6e 	beq.w	8019068 <_strtod_l+0x498>
 801938c:	68c3      	ldr	r3, [r0, #12]
 801938e:	930f      	str	r3, [sp, #60]	; 0x3c
 8019390:	2300      	movs	r3, #0
 8019392:	60c3      	str	r3, [r0, #12]
 8019394:	4631      	mov	r1, r6
 8019396:	f002 f8c1 	bl	801b51c <__mcmp>
 801939a:	2800      	cmp	r0, #0
 801939c:	da65      	bge.n	801946a <_strtod_l+0x89a>
 801939e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80193a0:	ea53 030a 	orrs.w	r3, r3, sl
 80193a4:	f040 8087 	bne.w	80194b6 <_strtod_l+0x8e6>
 80193a8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80193ac:	2b00      	cmp	r3, #0
 80193ae:	f040 8082 	bne.w	80194b6 <_strtod_l+0x8e6>
 80193b2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80193b6:	0d1b      	lsrs	r3, r3, #20
 80193b8:	051b      	lsls	r3, r3, #20
 80193ba:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80193be:	d97a      	bls.n	80194b6 <_strtod_l+0x8e6>
 80193c0:	696b      	ldr	r3, [r5, #20]
 80193c2:	b913      	cbnz	r3, 80193ca <_strtod_l+0x7fa>
 80193c4:	692b      	ldr	r3, [r5, #16]
 80193c6:	2b01      	cmp	r3, #1
 80193c8:	dd75      	ble.n	80194b6 <_strtod_l+0x8e6>
 80193ca:	4629      	mov	r1, r5
 80193cc:	2201      	movs	r2, #1
 80193ce:	4620      	mov	r0, r4
 80193d0:	f002 f838 	bl	801b444 <__lshift>
 80193d4:	4631      	mov	r1, r6
 80193d6:	4605      	mov	r5, r0
 80193d8:	f002 f8a0 	bl	801b51c <__mcmp>
 80193dc:	2800      	cmp	r0, #0
 80193de:	dd6a      	ble.n	80194b6 <_strtod_l+0x8e6>
 80193e0:	9904      	ldr	r1, [sp, #16]
 80193e2:	4a55      	ldr	r2, [pc, #340]	; (8019538 <_strtod_l+0x968>)
 80193e4:	465b      	mov	r3, fp
 80193e6:	2900      	cmp	r1, #0
 80193e8:	f000 8085 	beq.w	80194f6 <_strtod_l+0x926>
 80193ec:	ea02 010b 	and.w	r1, r2, fp
 80193f0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80193f4:	dc7f      	bgt.n	80194f6 <_strtod_l+0x926>
 80193f6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80193fa:	f77f aeaa 	ble.w	8019152 <_strtod_l+0x582>
 80193fe:	4a4f      	ldr	r2, [pc, #316]	; (801953c <_strtod_l+0x96c>)
 8019400:	2300      	movs	r3, #0
 8019402:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 8019406:	4650      	mov	r0, sl
 8019408:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 801940c:	4659      	mov	r1, fp
 801940e:	f7e7 f903 	bl	8000618 <__aeabi_dmul>
 8019412:	460b      	mov	r3, r1
 8019414:	4303      	orrs	r3, r0
 8019416:	bf08      	it	eq
 8019418:	2322      	moveq	r3, #34	; 0x22
 801941a:	4682      	mov	sl, r0
 801941c:	468b      	mov	fp, r1
 801941e:	bf08      	it	eq
 8019420:	6023      	streq	r3, [r4, #0]
 8019422:	e62b      	b.n	801907c <_strtod_l+0x4ac>
 8019424:	f04f 32ff 	mov.w	r2, #4294967295
 8019428:	fa02 f303 	lsl.w	r3, r2, r3
 801942c:	ea03 0a0a 	and.w	sl, r3, sl
 8019430:	e6de      	b.n	80191f0 <_strtod_l+0x620>
 8019432:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8019436:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 801943a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 801943e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8019442:	fa01 f308 	lsl.w	r3, r1, r8
 8019446:	930c      	str	r3, [sp, #48]	; 0x30
 8019448:	9111      	str	r1, [sp, #68]	; 0x44
 801944a:	e741      	b.n	80192d0 <_strtod_l+0x700>
 801944c:	2300      	movs	r3, #0
 801944e:	930c      	str	r3, [sp, #48]	; 0x30
 8019450:	2301      	movs	r3, #1
 8019452:	9311      	str	r3, [sp, #68]	; 0x44
 8019454:	e73c      	b.n	80192d0 <_strtod_l+0x700>
 8019456:	991e      	ldr	r1, [sp, #120]	; 0x78
 8019458:	4642      	mov	r2, r8
 801945a:	4620      	mov	r0, r4
 801945c:	f001 fff2 	bl	801b444 <__lshift>
 8019460:	901e      	str	r0, [sp, #120]	; 0x78
 8019462:	2800      	cmp	r0, #0
 8019464:	f47f af66 	bne.w	8019334 <_strtod_l+0x764>
 8019468:	e5fe      	b.n	8019068 <_strtod_l+0x498>
 801946a:	465f      	mov	r7, fp
 801946c:	d16e      	bne.n	801954c <_strtod_l+0x97c>
 801946e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8019470:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8019474:	b342      	cbz	r2, 80194c8 <_strtod_l+0x8f8>
 8019476:	4a32      	ldr	r2, [pc, #200]	; (8019540 <_strtod_l+0x970>)
 8019478:	4293      	cmp	r3, r2
 801947a:	d128      	bne.n	80194ce <_strtod_l+0x8fe>
 801947c:	9b04      	ldr	r3, [sp, #16]
 801947e:	4650      	mov	r0, sl
 8019480:	b1eb      	cbz	r3, 80194be <_strtod_l+0x8ee>
 8019482:	4a2d      	ldr	r2, [pc, #180]	; (8019538 <_strtod_l+0x968>)
 8019484:	403a      	ands	r2, r7
 8019486:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 801948a:	f04f 31ff 	mov.w	r1, #4294967295
 801948e:	d819      	bhi.n	80194c4 <_strtod_l+0x8f4>
 8019490:	0d12      	lsrs	r2, r2, #20
 8019492:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8019496:	fa01 f303 	lsl.w	r3, r1, r3
 801949a:	4298      	cmp	r0, r3
 801949c:	d117      	bne.n	80194ce <_strtod_l+0x8fe>
 801949e:	4b29      	ldr	r3, [pc, #164]	; (8019544 <_strtod_l+0x974>)
 80194a0:	429f      	cmp	r7, r3
 80194a2:	d102      	bne.n	80194aa <_strtod_l+0x8da>
 80194a4:	3001      	adds	r0, #1
 80194a6:	f43f addf 	beq.w	8019068 <_strtod_l+0x498>
 80194aa:	4b23      	ldr	r3, [pc, #140]	; (8019538 <_strtod_l+0x968>)
 80194ac:	403b      	ands	r3, r7
 80194ae:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80194b2:	f04f 0a00 	mov.w	sl, #0
 80194b6:	9b04      	ldr	r3, [sp, #16]
 80194b8:	2b00      	cmp	r3, #0
 80194ba:	d1a0      	bne.n	80193fe <_strtod_l+0x82e>
 80194bc:	e5de      	b.n	801907c <_strtod_l+0x4ac>
 80194be:	f04f 33ff 	mov.w	r3, #4294967295
 80194c2:	e7ea      	b.n	801949a <_strtod_l+0x8ca>
 80194c4:	460b      	mov	r3, r1
 80194c6:	e7e8      	b.n	801949a <_strtod_l+0x8ca>
 80194c8:	ea53 030a 	orrs.w	r3, r3, sl
 80194cc:	d088      	beq.n	80193e0 <_strtod_l+0x810>
 80194ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80194d0:	b1db      	cbz	r3, 801950a <_strtod_l+0x93a>
 80194d2:	423b      	tst	r3, r7
 80194d4:	d0ef      	beq.n	80194b6 <_strtod_l+0x8e6>
 80194d6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80194d8:	9a04      	ldr	r2, [sp, #16]
 80194da:	4650      	mov	r0, sl
 80194dc:	4659      	mov	r1, fp
 80194de:	b1c3      	cbz	r3, 8019512 <_strtod_l+0x942>
 80194e0:	f7ff fb59 	bl	8018b96 <sulp>
 80194e4:	4602      	mov	r2, r0
 80194e6:	460b      	mov	r3, r1
 80194e8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80194ec:	f7e6 fede 	bl	80002ac <__adddf3>
 80194f0:	4682      	mov	sl, r0
 80194f2:	468b      	mov	fp, r1
 80194f4:	e7df      	b.n	80194b6 <_strtod_l+0x8e6>
 80194f6:	4013      	ands	r3, r2
 80194f8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80194fc:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8019500:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8019504:	f04f 3aff 	mov.w	sl, #4294967295
 8019508:	e7d5      	b.n	80194b6 <_strtod_l+0x8e6>
 801950a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801950c:	ea13 0f0a 	tst.w	r3, sl
 8019510:	e7e0      	b.n	80194d4 <_strtod_l+0x904>
 8019512:	f7ff fb40 	bl	8018b96 <sulp>
 8019516:	4602      	mov	r2, r0
 8019518:	460b      	mov	r3, r1
 801951a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801951e:	f7e6 fec3 	bl	80002a8 <__aeabi_dsub>
 8019522:	2200      	movs	r2, #0
 8019524:	2300      	movs	r3, #0
 8019526:	4682      	mov	sl, r0
 8019528:	468b      	mov	fp, r1
 801952a:	f7e7 fadd 	bl	8000ae8 <__aeabi_dcmpeq>
 801952e:	2800      	cmp	r0, #0
 8019530:	d0c1      	beq.n	80194b6 <_strtod_l+0x8e6>
 8019532:	e60e      	b.n	8019152 <_strtod_l+0x582>
 8019534:	fffffc02 	.word	0xfffffc02
 8019538:	7ff00000 	.word	0x7ff00000
 801953c:	39500000 	.word	0x39500000
 8019540:	000fffff 	.word	0x000fffff
 8019544:	7fefffff 	.word	0x7fefffff
 8019548:	08021080 	.word	0x08021080
 801954c:	4631      	mov	r1, r6
 801954e:	4628      	mov	r0, r5
 8019550:	f002 f960 	bl	801b814 <__ratio>
 8019554:	ec59 8b10 	vmov	r8, r9, d0
 8019558:	ee10 0a10 	vmov	r0, s0
 801955c:	2200      	movs	r2, #0
 801955e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8019562:	4649      	mov	r1, r9
 8019564:	f7e7 fad4 	bl	8000b10 <__aeabi_dcmple>
 8019568:	2800      	cmp	r0, #0
 801956a:	d07c      	beq.n	8019666 <_strtod_l+0xa96>
 801956c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801956e:	2b00      	cmp	r3, #0
 8019570:	d04c      	beq.n	801960c <_strtod_l+0xa3c>
 8019572:	4b95      	ldr	r3, [pc, #596]	; (80197c8 <_strtod_l+0xbf8>)
 8019574:	2200      	movs	r2, #0
 8019576:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 801957a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 80197c8 <_strtod_l+0xbf8>
 801957e:	f04f 0800 	mov.w	r8, #0
 8019582:	4b92      	ldr	r3, [pc, #584]	; (80197cc <_strtod_l+0xbfc>)
 8019584:	403b      	ands	r3, r7
 8019586:	9311      	str	r3, [sp, #68]	; 0x44
 8019588:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801958a:	4b91      	ldr	r3, [pc, #580]	; (80197d0 <_strtod_l+0xc00>)
 801958c:	429a      	cmp	r2, r3
 801958e:	f040 80b2 	bne.w	80196f6 <_strtod_l+0xb26>
 8019592:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8019596:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801959a:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 801959e:	ec4b ab10 	vmov	d0, sl, fp
 80195a2:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 80195a6:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80195aa:	f002 f85b 	bl	801b664 <__ulp>
 80195ae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80195b2:	ec53 2b10 	vmov	r2, r3, d0
 80195b6:	f7e7 f82f 	bl	8000618 <__aeabi_dmul>
 80195ba:	4652      	mov	r2, sl
 80195bc:	465b      	mov	r3, fp
 80195be:	f7e6 fe75 	bl	80002ac <__adddf3>
 80195c2:	460b      	mov	r3, r1
 80195c4:	4981      	ldr	r1, [pc, #516]	; (80197cc <_strtod_l+0xbfc>)
 80195c6:	4a83      	ldr	r2, [pc, #524]	; (80197d4 <_strtod_l+0xc04>)
 80195c8:	4019      	ands	r1, r3
 80195ca:	4291      	cmp	r1, r2
 80195cc:	4682      	mov	sl, r0
 80195ce:	d95e      	bls.n	801968e <_strtod_l+0xabe>
 80195d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80195d2:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80195d6:	4293      	cmp	r3, r2
 80195d8:	d103      	bne.n	80195e2 <_strtod_l+0xa12>
 80195da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80195dc:	3301      	adds	r3, #1
 80195de:	f43f ad43 	beq.w	8019068 <_strtod_l+0x498>
 80195e2:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 80197e0 <_strtod_l+0xc10>
 80195e6:	f04f 3aff 	mov.w	sl, #4294967295
 80195ea:	991e      	ldr	r1, [sp, #120]	; 0x78
 80195ec:	4620      	mov	r0, r4
 80195ee:	f001 fd0d 	bl	801b00c <_Bfree>
 80195f2:	9907      	ldr	r1, [sp, #28]
 80195f4:	4620      	mov	r0, r4
 80195f6:	f001 fd09 	bl	801b00c <_Bfree>
 80195fa:	4631      	mov	r1, r6
 80195fc:	4620      	mov	r0, r4
 80195fe:	f001 fd05 	bl	801b00c <_Bfree>
 8019602:	4629      	mov	r1, r5
 8019604:	4620      	mov	r0, r4
 8019606:	f001 fd01 	bl	801b00c <_Bfree>
 801960a:	e613      	b.n	8019234 <_strtod_l+0x664>
 801960c:	f1ba 0f00 	cmp.w	sl, #0
 8019610:	d11b      	bne.n	801964a <_strtod_l+0xa7a>
 8019612:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8019616:	b9f3      	cbnz	r3, 8019656 <_strtod_l+0xa86>
 8019618:	4b6b      	ldr	r3, [pc, #428]	; (80197c8 <_strtod_l+0xbf8>)
 801961a:	2200      	movs	r2, #0
 801961c:	4640      	mov	r0, r8
 801961e:	4649      	mov	r1, r9
 8019620:	f7e7 fa6c 	bl	8000afc <__aeabi_dcmplt>
 8019624:	b9d0      	cbnz	r0, 801965c <_strtod_l+0xa8c>
 8019626:	4640      	mov	r0, r8
 8019628:	4649      	mov	r1, r9
 801962a:	4b6b      	ldr	r3, [pc, #428]	; (80197d8 <_strtod_l+0xc08>)
 801962c:	2200      	movs	r2, #0
 801962e:	f7e6 fff3 	bl	8000618 <__aeabi_dmul>
 8019632:	4680      	mov	r8, r0
 8019634:	4689      	mov	r9, r1
 8019636:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801963a:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 801963e:	931b      	str	r3, [sp, #108]	; 0x6c
 8019640:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 8019644:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8019648:	e79b      	b.n	8019582 <_strtod_l+0x9b2>
 801964a:	f1ba 0f01 	cmp.w	sl, #1
 801964e:	d102      	bne.n	8019656 <_strtod_l+0xa86>
 8019650:	2f00      	cmp	r7, #0
 8019652:	f43f ad7e 	beq.w	8019152 <_strtod_l+0x582>
 8019656:	4b61      	ldr	r3, [pc, #388]	; (80197dc <_strtod_l+0xc0c>)
 8019658:	2200      	movs	r2, #0
 801965a:	e78c      	b.n	8019576 <_strtod_l+0x9a6>
 801965c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80197d8 <_strtod_l+0xc08>
 8019660:	f04f 0800 	mov.w	r8, #0
 8019664:	e7e7      	b.n	8019636 <_strtod_l+0xa66>
 8019666:	4b5c      	ldr	r3, [pc, #368]	; (80197d8 <_strtod_l+0xc08>)
 8019668:	4640      	mov	r0, r8
 801966a:	4649      	mov	r1, r9
 801966c:	2200      	movs	r2, #0
 801966e:	f7e6 ffd3 	bl	8000618 <__aeabi_dmul>
 8019672:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8019674:	4680      	mov	r8, r0
 8019676:	4689      	mov	r9, r1
 8019678:	b933      	cbnz	r3, 8019688 <_strtod_l+0xab8>
 801967a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801967e:	9012      	str	r0, [sp, #72]	; 0x48
 8019680:	9313      	str	r3, [sp, #76]	; 0x4c
 8019682:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8019686:	e7dd      	b.n	8019644 <_strtod_l+0xa74>
 8019688:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 801968c:	e7f9      	b.n	8019682 <_strtod_l+0xab2>
 801968e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8019692:	9b04      	ldr	r3, [sp, #16]
 8019694:	2b00      	cmp	r3, #0
 8019696:	d1a8      	bne.n	80195ea <_strtod_l+0xa1a>
 8019698:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801969c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801969e:	0d1b      	lsrs	r3, r3, #20
 80196a0:	051b      	lsls	r3, r3, #20
 80196a2:	429a      	cmp	r2, r3
 80196a4:	d1a1      	bne.n	80195ea <_strtod_l+0xa1a>
 80196a6:	4640      	mov	r0, r8
 80196a8:	4649      	mov	r1, r9
 80196aa:	f7e7 fac5 	bl	8000c38 <__aeabi_d2lz>
 80196ae:	f7e6 ff85 	bl	80005bc <__aeabi_l2d>
 80196b2:	4602      	mov	r2, r0
 80196b4:	460b      	mov	r3, r1
 80196b6:	4640      	mov	r0, r8
 80196b8:	4649      	mov	r1, r9
 80196ba:	f7e6 fdf5 	bl	80002a8 <__aeabi_dsub>
 80196be:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80196c0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80196c4:	ea43 030a 	orr.w	r3, r3, sl
 80196c8:	4313      	orrs	r3, r2
 80196ca:	4680      	mov	r8, r0
 80196cc:	4689      	mov	r9, r1
 80196ce:	d053      	beq.n	8019778 <_strtod_l+0xba8>
 80196d0:	a335      	add	r3, pc, #212	; (adr r3, 80197a8 <_strtod_l+0xbd8>)
 80196d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80196d6:	f7e7 fa11 	bl	8000afc <__aeabi_dcmplt>
 80196da:	2800      	cmp	r0, #0
 80196dc:	f47f acce 	bne.w	801907c <_strtod_l+0x4ac>
 80196e0:	a333      	add	r3, pc, #204	; (adr r3, 80197b0 <_strtod_l+0xbe0>)
 80196e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80196e6:	4640      	mov	r0, r8
 80196e8:	4649      	mov	r1, r9
 80196ea:	f7e7 fa25 	bl	8000b38 <__aeabi_dcmpgt>
 80196ee:	2800      	cmp	r0, #0
 80196f0:	f43f af7b 	beq.w	80195ea <_strtod_l+0xa1a>
 80196f4:	e4c2      	b.n	801907c <_strtod_l+0x4ac>
 80196f6:	9b04      	ldr	r3, [sp, #16]
 80196f8:	b333      	cbz	r3, 8019748 <_strtod_l+0xb78>
 80196fa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80196fc:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8019700:	d822      	bhi.n	8019748 <_strtod_l+0xb78>
 8019702:	a32d      	add	r3, pc, #180	; (adr r3, 80197b8 <_strtod_l+0xbe8>)
 8019704:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019708:	4640      	mov	r0, r8
 801970a:	4649      	mov	r1, r9
 801970c:	f7e7 fa00 	bl	8000b10 <__aeabi_dcmple>
 8019710:	b1a0      	cbz	r0, 801973c <_strtod_l+0xb6c>
 8019712:	4649      	mov	r1, r9
 8019714:	4640      	mov	r0, r8
 8019716:	f7e7 fa57 	bl	8000bc8 <__aeabi_d2uiz>
 801971a:	2801      	cmp	r0, #1
 801971c:	bf38      	it	cc
 801971e:	2001      	movcc	r0, #1
 8019720:	f7e6 ff00 	bl	8000524 <__aeabi_ui2d>
 8019724:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8019726:	4680      	mov	r8, r0
 8019728:	4689      	mov	r9, r1
 801972a:	bb13      	cbnz	r3, 8019772 <_strtod_l+0xba2>
 801972c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8019730:	9014      	str	r0, [sp, #80]	; 0x50
 8019732:	9315      	str	r3, [sp, #84]	; 0x54
 8019734:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8019738:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 801973c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801973e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8019740:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8019744:	1a9b      	subs	r3, r3, r2
 8019746:	930d      	str	r3, [sp, #52]	; 0x34
 8019748:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801974c:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8019750:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8019754:	f001 ff86 	bl	801b664 <__ulp>
 8019758:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801975c:	ec53 2b10 	vmov	r2, r3, d0
 8019760:	f7e6 ff5a 	bl	8000618 <__aeabi_dmul>
 8019764:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8019768:	f7e6 fda0 	bl	80002ac <__adddf3>
 801976c:	4682      	mov	sl, r0
 801976e:	468b      	mov	fp, r1
 8019770:	e78f      	b.n	8019692 <_strtod_l+0xac2>
 8019772:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 8019776:	e7dd      	b.n	8019734 <_strtod_l+0xb64>
 8019778:	a311      	add	r3, pc, #68	; (adr r3, 80197c0 <_strtod_l+0xbf0>)
 801977a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801977e:	f7e7 f9bd 	bl	8000afc <__aeabi_dcmplt>
 8019782:	e7b4      	b.n	80196ee <_strtod_l+0xb1e>
 8019784:	2300      	movs	r3, #0
 8019786:	930e      	str	r3, [sp, #56]	; 0x38
 8019788:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801978a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801978c:	6013      	str	r3, [r2, #0]
 801978e:	f7ff ba65 	b.w	8018c5c <_strtod_l+0x8c>
 8019792:	2b65      	cmp	r3, #101	; 0x65
 8019794:	f43f ab5d 	beq.w	8018e52 <_strtod_l+0x282>
 8019798:	2b45      	cmp	r3, #69	; 0x45
 801979a:	f43f ab5a 	beq.w	8018e52 <_strtod_l+0x282>
 801979e:	2201      	movs	r2, #1
 80197a0:	f7ff bb92 	b.w	8018ec8 <_strtod_l+0x2f8>
 80197a4:	f3af 8000 	nop.w
 80197a8:	94a03595 	.word	0x94a03595
 80197ac:	3fdfffff 	.word	0x3fdfffff
 80197b0:	35afe535 	.word	0x35afe535
 80197b4:	3fe00000 	.word	0x3fe00000
 80197b8:	ffc00000 	.word	0xffc00000
 80197bc:	41dfffff 	.word	0x41dfffff
 80197c0:	94a03595 	.word	0x94a03595
 80197c4:	3fcfffff 	.word	0x3fcfffff
 80197c8:	3ff00000 	.word	0x3ff00000
 80197cc:	7ff00000 	.word	0x7ff00000
 80197d0:	7fe00000 	.word	0x7fe00000
 80197d4:	7c9fffff 	.word	0x7c9fffff
 80197d8:	3fe00000 	.word	0x3fe00000
 80197dc:	bff00000 	.word	0xbff00000
 80197e0:	7fefffff 	.word	0x7fefffff

080197e4 <strtod>:
 80197e4:	460a      	mov	r2, r1
 80197e6:	4601      	mov	r1, r0
 80197e8:	4802      	ldr	r0, [pc, #8]	; (80197f4 <strtod+0x10>)
 80197ea:	4b03      	ldr	r3, [pc, #12]	; (80197f8 <strtod+0x14>)
 80197ec:	6800      	ldr	r0, [r0, #0]
 80197ee:	f7ff b9ef 	b.w	8018bd0 <_strtod_l>
 80197f2:	bf00      	nop
 80197f4:	20000074 	.word	0x20000074
 80197f8:	200000dc 	.word	0x200000dc

080197fc <_strtol_l.isra.0>:
 80197fc:	2b01      	cmp	r3, #1
 80197fe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019802:	d001      	beq.n	8019808 <_strtol_l.isra.0+0xc>
 8019804:	2b24      	cmp	r3, #36	; 0x24
 8019806:	d906      	bls.n	8019816 <_strtol_l.isra.0+0x1a>
 8019808:	f000 ff1e 	bl	801a648 <__errno>
 801980c:	2316      	movs	r3, #22
 801980e:	6003      	str	r3, [r0, #0]
 8019810:	2000      	movs	r0, #0
 8019812:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019816:	4f3a      	ldr	r7, [pc, #232]	; (8019900 <_strtol_l.isra.0+0x104>)
 8019818:	468e      	mov	lr, r1
 801981a:	4676      	mov	r6, lr
 801981c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8019820:	5de5      	ldrb	r5, [r4, r7]
 8019822:	f015 0508 	ands.w	r5, r5, #8
 8019826:	d1f8      	bne.n	801981a <_strtol_l.isra.0+0x1e>
 8019828:	2c2d      	cmp	r4, #45	; 0x2d
 801982a:	d134      	bne.n	8019896 <_strtol_l.isra.0+0x9a>
 801982c:	f89e 4000 	ldrb.w	r4, [lr]
 8019830:	f04f 0801 	mov.w	r8, #1
 8019834:	f106 0e02 	add.w	lr, r6, #2
 8019838:	2b00      	cmp	r3, #0
 801983a:	d05c      	beq.n	80198f6 <_strtol_l.isra.0+0xfa>
 801983c:	2b10      	cmp	r3, #16
 801983e:	d10c      	bne.n	801985a <_strtol_l.isra.0+0x5e>
 8019840:	2c30      	cmp	r4, #48	; 0x30
 8019842:	d10a      	bne.n	801985a <_strtol_l.isra.0+0x5e>
 8019844:	f89e 4000 	ldrb.w	r4, [lr]
 8019848:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801984c:	2c58      	cmp	r4, #88	; 0x58
 801984e:	d14d      	bne.n	80198ec <_strtol_l.isra.0+0xf0>
 8019850:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8019854:	2310      	movs	r3, #16
 8019856:	f10e 0e02 	add.w	lr, lr, #2
 801985a:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 801985e:	f10c 3cff 	add.w	ip, ip, #4294967295
 8019862:	2600      	movs	r6, #0
 8019864:	fbbc f9f3 	udiv	r9, ip, r3
 8019868:	4635      	mov	r5, r6
 801986a:	fb03 ca19 	mls	sl, r3, r9, ip
 801986e:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8019872:	2f09      	cmp	r7, #9
 8019874:	d818      	bhi.n	80198a8 <_strtol_l.isra.0+0xac>
 8019876:	463c      	mov	r4, r7
 8019878:	42a3      	cmp	r3, r4
 801987a:	dd24      	ble.n	80198c6 <_strtol_l.isra.0+0xca>
 801987c:	2e00      	cmp	r6, #0
 801987e:	db1f      	blt.n	80198c0 <_strtol_l.isra.0+0xc4>
 8019880:	45a9      	cmp	r9, r5
 8019882:	d31d      	bcc.n	80198c0 <_strtol_l.isra.0+0xc4>
 8019884:	d101      	bne.n	801988a <_strtol_l.isra.0+0x8e>
 8019886:	45a2      	cmp	sl, r4
 8019888:	db1a      	blt.n	80198c0 <_strtol_l.isra.0+0xc4>
 801988a:	fb05 4503 	mla	r5, r5, r3, r4
 801988e:	2601      	movs	r6, #1
 8019890:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8019894:	e7eb      	b.n	801986e <_strtol_l.isra.0+0x72>
 8019896:	2c2b      	cmp	r4, #43	; 0x2b
 8019898:	bf08      	it	eq
 801989a:	f89e 4000 	ldrbeq.w	r4, [lr]
 801989e:	46a8      	mov	r8, r5
 80198a0:	bf08      	it	eq
 80198a2:	f106 0e02 	addeq.w	lr, r6, #2
 80198a6:	e7c7      	b.n	8019838 <_strtol_l.isra.0+0x3c>
 80198a8:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80198ac:	2f19      	cmp	r7, #25
 80198ae:	d801      	bhi.n	80198b4 <_strtol_l.isra.0+0xb8>
 80198b0:	3c37      	subs	r4, #55	; 0x37
 80198b2:	e7e1      	b.n	8019878 <_strtol_l.isra.0+0x7c>
 80198b4:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80198b8:	2f19      	cmp	r7, #25
 80198ba:	d804      	bhi.n	80198c6 <_strtol_l.isra.0+0xca>
 80198bc:	3c57      	subs	r4, #87	; 0x57
 80198be:	e7db      	b.n	8019878 <_strtol_l.isra.0+0x7c>
 80198c0:	f04f 36ff 	mov.w	r6, #4294967295
 80198c4:	e7e4      	b.n	8019890 <_strtol_l.isra.0+0x94>
 80198c6:	2e00      	cmp	r6, #0
 80198c8:	da05      	bge.n	80198d6 <_strtol_l.isra.0+0xda>
 80198ca:	2322      	movs	r3, #34	; 0x22
 80198cc:	6003      	str	r3, [r0, #0]
 80198ce:	4665      	mov	r5, ip
 80198d0:	b942      	cbnz	r2, 80198e4 <_strtol_l.isra.0+0xe8>
 80198d2:	4628      	mov	r0, r5
 80198d4:	e79d      	b.n	8019812 <_strtol_l.isra.0+0x16>
 80198d6:	f1b8 0f00 	cmp.w	r8, #0
 80198da:	d000      	beq.n	80198de <_strtol_l.isra.0+0xe2>
 80198dc:	426d      	negs	r5, r5
 80198de:	2a00      	cmp	r2, #0
 80198e0:	d0f7      	beq.n	80198d2 <_strtol_l.isra.0+0xd6>
 80198e2:	b10e      	cbz	r6, 80198e8 <_strtol_l.isra.0+0xec>
 80198e4:	f10e 31ff 	add.w	r1, lr, #4294967295
 80198e8:	6011      	str	r1, [r2, #0]
 80198ea:	e7f2      	b.n	80198d2 <_strtol_l.isra.0+0xd6>
 80198ec:	2430      	movs	r4, #48	; 0x30
 80198ee:	2b00      	cmp	r3, #0
 80198f0:	d1b3      	bne.n	801985a <_strtol_l.isra.0+0x5e>
 80198f2:	2308      	movs	r3, #8
 80198f4:	e7b1      	b.n	801985a <_strtol_l.isra.0+0x5e>
 80198f6:	2c30      	cmp	r4, #48	; 0x30
 80198f8:	d0a4      	beq.n	8019844 <_strtol_l.isra.0+0x48>
 80198fa:	230a      	movs	r3, #10
 80198fc:	e7ad      	b.n	801985a <_strtol_l.isra.0+0x5e>
 80198fe:	bf00      	nop
 8019900:	08020ea3 	.word	0x08020ea3

08019904 <strtol>:
 8019904:	4613      	mov	r3, r2
 8019906:	460a      	mov	r2, r1
 8019908:	4601      	mov	r1, r0
 801990a:	4802      	ldr	r0, [pc, #8]	; (8019914 <strtol+0x10>)
 801990c:	6800      	ldr	r0, [r0, #0]
 801990e:	f7ff bf75 	b.w	80197fc <_strtol_l.isra.0>
 8019912:	bf00      	nop
 8019914:	20000074 	.word	0x20000074

08019918 <__assert_func>:
 8019918:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801991a:	4614      	mov	r4, r2
 801991c:	461a      	mov	r2, r3
 801991e:	4b09      	ldr	r3, [pc, #36]	; (8019944 <__assert_func+0x2c>)
 8019920:	681b      	ldr	r3, [r3, #0]
 8019922:	4605      	mov	r5, r0
 8019924:	68d8      	ldr	r0, [r3, #12]
 8019926:	b14c      	cbz	r4, 801993c <__assert_func+0x24>
 8019928:	4b07      	ldr	r3, [pc, #28]	; (8019948 <__assert_func+0x30>)
 801992a:	9100      	str	r1, [sp, #0]
 801992c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8019930:	4906      	ldr	r1, [pc, #24]	; (801994c <__assert_func+0x34>)
 8019932:	462b      	mov	r3, r5
 8019934:	f000 ff64 	bl	801a800 <fiprintf>
 8019938:	f002 fbd6 	bl	801c0e8 <abort>
 801993c:	4b04      	ldr	r3, [pc, #16]	; (8019950 <__assert_func+0x38>)
 801993e:	461c      	mov	r4, r3
 8019940:	e7f3      	b.n	801992a <__assert_func+0x12>
 8019942:	bf00      	nop
 8019944:	20000074 	.word	0x20000074
 8019948:	080210a8 	.word	0x080210a8
 801994c:	080210b5 	.word	0x080210b5
 8019950:	080210e3 	.word	0x080210e3

08019954 <quorem>:
 8019954:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019958:	6903      	ldr	r3, [r0, #16]
 801995a:	690c      	ldr	r4, [r1, #16]
 801995c:	42a3      	cmp	r3, r4
 801995e:	4607      	mov	r7, r0
 8019960:	f2c0 8081 	blt.w	8019a66 <quorem+0x112>
 8019964:	3c01      	subs	r4, #1
 8019966:	f101 0814 	add.w	r8, r1, #20
 801996a:	f100 0514 	add.w	r5, r0, #20
 801996e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8019972:	9301      	str	r3, [sp, #4]
 8019974:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8019978:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801997c:	3301      	adds	r3, #1
 801997e:	429a      	cmp	r2, r3
 8019980:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8019984:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8019988:	fbb2 f6f3 	udiv	r6, r2, r3
 801998c:	d331      	bcc.n	80199f2 <quorem+0x9e>
 801998e:	f04f 0e00 	mov.w	lr, #0
 8019992:	4640      	mov	r0, r8
 8019994:	46ac      	mov	ip, r5
 8019996:	46f2      	mov	sl, lr
 8019998:	f850 2b04 	ldr.w	r2, [r0], #4
 801999c:	b293      	uxth	r3, r2
 801999e:	fb06 e303 	mla	r3, r6, r3, lr
 80199a2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80199a6:	b29b      	uxth	r3, r3
 80199a8:	ebaa 0303 	sub.w	r3, sl, r3
 80199ac:	0c12      	lsrs	r2, r2, #16
 80199ae:	f8dc a000 	ldr.w	sl, [ip]
 80199b2:	fb06 e202 	mla	r2, r6, r2, lr
 80199b6:	fa13 f38a 	uxtah	r3, r3, sl
 80199ba:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80199be:	fa1f fa82 	uxth.w	sl, r2
 80199c2:	f8dc 2000 	ldr.w	r2, [ip]
 80199c6:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80199ca:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80199ce:	b29b      	uxth	r3, r3
 80199d0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80199d4:	4581      	cmp	r9, r0
 80199d6:	f84c 3b04 	str.w	r3, [ip], #4
 80199da:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80199de:	d2db      	bcs.n	8019998 <quorem+0x44>
 80199e0:	f855 300b 	ldr.w	r3, [r5, fp]
 80199e4:	b92b      	cbnz	r3, 80199f2 <quorem+0x9e>
 80199e6:	9b01      	ldr	r3, [sp, #4]
 80199e8:	3b04      	subs	r3, #4
 80199ea:	429d      	cmp	r5, r3
 80199ec:	461a      	mov	r2, r3
 80199ee:	d32e      	bcc.n	8019a4e <quorem+0xfa>
 80199f0:	613c      	str	r4, [r7, #16]
 80199f2:	4638      	mov	r0, r7
 80199f4:	f001 fd92 	bl	801b51c <__mcmp>
 80199f8:	2800      	cmp	r0, #0
 80199fa:	db24      	blt.n	8019a46 <quorem+0xf2>
 80199fc:	3601      	adds	r6, #1
 80199fe:	4628      	mov	r0, r5
 8019a00:	f04f 0c00 	mov.w	ip, #0
 8019a04:	f858 2b04 	ldr.w	r2, [r8], #4
 8019a08:	f8d0 e000 	ldr.w	lr, [r0]
 8019a0c:	b293      	uxth	r3, r2
 8019a0e:	ebac 0303 	sub.w	r3, ip, r3
 8019a12:	0c12      	lsrs	r2, r2, #16
 8019a14:	fa13 f38e 	uxtah	r3, r3, lr
 8019a18:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8019a1c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8019a20:	b29b      	uxth	r3, r3
 8019a22:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8019a26:	45c1      	cmp	r9, r8
 8019a28:	f840 3b04 	str.w	r3, [r0], #4
 8019a2c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8019a30:	d2e8      	bcs.n	8019a04 <quorem+0xb0>
 8019a32:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8019a36:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8019a3a:	b922      	cbnz	r2, 8019a46 <quorem+0xf2>
 8019a3c:	3b04      	subs	r3, #4
 8019a3e:	429d      	cmp	r5, r3
 8019a40:	461a      	mov	r2, r3
 8019a42:	d30a      	bcc.n	8019a5a <quorem+0x106>
 8019a44:	613c      	str	r4, [r7, #16]
 8019a46:	4630      	mov	r0, r6
 8019a48:	b003      	add	sp, #12
 8019a4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019a4e:	6812      	ldr	r2, [r2, #0]
 8019a50:	3b04      	subs	r3, #4
 8019a52:	2a00      	cmp	r2, #0
 8019a54:	d1cc      	bne.n	80199f0 <quorem+0x9c>
 8019a56:	3c01      	subs	r4, #1
 8019a58:	e7c7      	b.n	80199ea <quorem+0x96>
 8019a5a:	6812      	ldr	r2, [r2, #0]
 8019a5c:	3b04      	subs	r3, #4
 8019a5e:	2a00      	cmp	r2, #0
 8019a60:	d1f0      	bne.n	8019a44 <quorem+0xf0>
 8019a62:	3c01      	subs	r4, #1
 8019a64:	e7eb      	b.n	8019a3e <quorem+0xea>
 8019a66:	2000      	movs	r0, #0
 8019a68:	e7ee      	b.n	8019a48 <quorem+0xf4>
 8019a6a:	0000      	movs	r0, r0
 8019a6c:	0000      	movs	r0, r0
	...

08019a70 <_dtoa_r>:
 8019a70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019a74:	ed2d 8b02 	vpush	{d8}
 8019a78:	ec57 6b10 	vmov	r6, r7, d0
 8019a7c:	b095      	sub	sp, #84	; 0x54
 8019a7e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8019a80:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8019a84:	9105      	str	r1, [sp, #20]
 8019a86:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8019a8a:	4604      	mov	r4, r0
 8019a8c:	9209      	str	r2, [sp, #36]	; 0x24
 8019a8e:	930f      	str	r3, [sp, #60]	; 0x3c
 8019a90:	b975      	cbnz	r5, 8019ab0 <_dtoa_r+0x40>
 8019a92:	2010      	movs	r0, #16
 8019a94:	f7fe fa38 	bl	8017f08 <malloc>
 8019a98:	4602      	mov	r2, r0
 8019a9a:	6260      	str	r0, [r4, #36]	; 0x24
 8019a9c:	b920      	cbnz	r0, 8019aa8 <_dtoa_r+0x38>
 8019a9e:	4bb2      	ldr	r3, [pc, #712]	; (8019d68 <_dtoa_r+0x2f8>)
 8019aa0:	21ea      	movs	r1, #234	; 0xea
 8019aa2:	48b2      	ldr	r0, [pc, #712]	; (8019d6c <_dtoa_r+0x2fc>)
 8019aa4:	f7ff ff38 	bl	8019918 <__assert_func>
 8019aa8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8019aac:	6005      	str	r5, [r0, #0]
 8019aae:	60c5      	str	r5, [r0, #12]
 8019ab0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8019ab2:	6819      	ldr	r1, [r3, #0]
 8019ab4:	b151      	cbz	r1, 8019acc <_dtoa_r+0x5c>
 8019ab6:	685a      	ldr	r2, [r3, #4]
 8019ab8:	604a      	str	r2, [r1, #4]
 8019aba:	2301      	movs	r3, #1
 8019abc:	4093      	lsls	r3, r2
 8019abe:	608b      	str	r3, [r1, #8]
 8019ac0:	4620      	mov	r0, r4
 8019ac2:	f001 faa3 	bl	801b00c <_Bfree>
 8019ac6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8019ac8:	2200      	movs	r2, #0
 8019aca:	601a      	str	r2, [r3, #0]
 8019acc:	1e3b      	subs	r3, r7, #0
 8019ace:	bfb9      	ittee	lt
 8019ad0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8019ad4:	9303      	strlt	r3, [sp, #12]
 8019ad6:	2300      	movge	r3, #0
 8019ad8:	f8c8 3000 	strge.w	r3, [r8]
 8019adc:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8019ae0:	4ba3      	ldr	r3, [pc, #652]	; (8019d70 <_dtoa_r+0x300>)
 8019ae2:	bfbc      	itt	lt
 8019ae4:	2201      	movlt	r2, #1
 8019ae6:	f8c8 2000 	strlt.w	r2, [r8]
 8019aea:	ea33 0309 	bics.w	r3, r3, r9
 8019aee:	d11b      	bne.n	8019b28 <_dtoa_r+0xb8>
 8019af0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8019af2:	f242 730f 	movw	r3, #9999	; 0x270f
 8019af6:	6013      	str	r3, [r2, #0]
 8019af8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8019afc:	4333      	orrs	r3, r6
 8019afe:	f000 857a 	beq.w	801a5f6 <_dtoa_r+0xb86>
 8019b02:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8019b04:	b963      	cbnz	r3, 8019b20 <_dtoa_r+0xb0>
 8019b06:	4b9b      	ldr	r3, [pc, #620]	; (8019d74 <_dtoa_r+0x304>)
 8019b08:	e024      	b.n	8019b54 <_dtoa_r+0xe4>
 8019b0a:	4b9b      	ldr	r3, [pc, #620]	; (8019d78 <_dtoa_r+0x308>)
 8019b0c:	9300      	str	r3, [sp, #0]
 8019b0e:	3308      	adds	r3, #8
 8019b10:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8019b12:	6013      	str	r3, [r2, #0]
 8019b14:	9800      	ldr	r0, [sp, #0]
 8019b16:	b015      	add	sp, #84	; 0x54
 8019b18:	ecbd 8b02 	vpop	{d8}
 8019b1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019b20:	4b94      	ldr	r3, [pc, #592]	; (8019d74 <_dtoa_r+0x304>)
 8019b22:	9300      	str	r3, [sp, #0]
 8019b24:	3303      	adds	r3, #3
 8019b26:	e7f3      	b.n	8019b10 <_dtoa_r+0xa0>
 8019b28:	ed9d 7b02 	vldr	d7, [sp, #8]
 8019b2c:	2200      	movs	r2, #0
 8019b2e:	ec51 0b17 	vmov	r0, r1, d7
 8019b32:	2300      	movs	r3, #0
 8019b34:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8019b38:	f7e6 ffd6 	bl	8000ae8 <__aeabi_dcmpeq>
 8019b3c:	4680      	mov	r8, r0
 8019b3e:	b158      	cbz	r0, 8019b58 <_dtoa_r+0xe8>
 8019b40:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8019b42:	2301      	movs	r3, #1
 8019b44:	6013      	str	r3, [r2, #0]
 8019b46:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8019b48:	2b00      	cmp	r3, #0
 8019b4a:	f000 8551 	beq.w	801a5f0 <_dtoa_r+0xb80>
 8019b4e:	488b      	ldr	r0, [pc, #556]	; (8019d7c <_dtoa_r+0x30c>)
 8019b50:	6018      	str	r0, [r3, #0]
 8019b52:	1e43      	subs	r3, r0, #1
 8019b54:	9300      	str	r3, [sp, #0]
 8019b56:	e7dd      	b.n	8019b14 <_dtoa_r+0xa4>
 8019b58:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8019b5c:	aa12      	add	r2, sp, #72	; 0x48
 8019b5e:	a913      	add	r1, sp, #76	; 0x4c
 8019b60:	4620      	mov	r0, r4
 8019b62:	f001 fdfb 	bl	801b75c <__d2b>
 8019b66:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8019b6a:	4683      	mov	fp, r0
 8019b6c:	2d00      	cmp	r5, #0
 8019b6e:	d07c      	beq.n	8019c6a <_dtoa_r+0x1fa>
 8019b70:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019b72:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8019b76:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8019b7a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8019b7e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8019b82:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8019b86:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8019b8a:	4b7d      	ldr	r3, [pc, #500]	; (8019d80 <_dtoa_r+0x310>)
 8019b8c:	2200      	movs	r2, #0
 8019b8e:	4630      	mov	r0, r6
 8019b90:	4639      	mov	r1, r7
 8019b92:	f7e6 fb89 	bl	80002a8 <__aeabi_dsub>
 8019b96:	a36e      	add	r3, pc, #440	; (adr r3, 8019d50 <_dtoa_r+0x2e0>)
 8019b98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019b9c:	f7e6 fd3c 	bl	8000618 <__aeabi_dmul>
 8019ba0:	a36d      	add	r3, pc, #436	; (adr r3, 8019d58 <_dtoa_r+0x2e8>)
 8019ba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019ba6:	f7e6 fb81 	bl	80002ac <__adddf3>
 8019baa:	4606      	mov	r6, r0
 8019bac:	4628      	mov	r0, r5
 8019bae:	460f      	mov	r7, r1
 8019bb0:	f7e6 fcc8 	bl	8000544 <__aeabi_i2d>
 8019bb4:	a36a      	add	r3, pc, #424	; (adr r3, 8019d60 <_dtoa_r+0x2f0>)
 8019bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019bba:	f7e6 fd2d 	bl	8000618 <__aeabi_dmul>
 8019bbe:	4602      	mov	r2, r0
 8019bc0:	460b      	mov	r3, r1
 8019bc2:	4630      	mov	r0, r6
 8019bc4:	4639      	mov	r1, r7
 8019bc6:	f7e6 fb71 	bl	80002ac <__adddf3>
 8019bca:	4606      	mov	r6, r0
 8019bcc:	460f      	mov	r7, r1
 8019bce:	f7e6 ffd3 	bl	8000b78 <__aeabi_d2iz>
 8019bd2:	2200      	movs	r2, #0
 8019bd4:	4682      	mov	sl, r0
 8019bd6:	2300      	movs	r3, #0
 8019bd8:	4630      	mov	r0, r6
 8019bda:	4639      	mov	r1, r7
 8019bdc:	f7e6 ff8e 	bl	8000afc <__aeabi_dcmplt>
 8019be0:	b148      	cbz	r0, 8019bf6 <_dtoa_r+0x186>
 8019be2:	4650      	mov	r0, sl
 8019be4:	f7e6 fcae 	bl	8000544 <__aeabi_i2d>
 8019be8:	4632      	mov	r2, r6
 8019bea:	463b      	mov	r3, r7
 8019bec:	f7e6 ff7c 	bl	8000ae8 <__aeabi_dcmpeq>
 8019bf0:	b908      	cbnz	r0, 8019bf6 <_dtoa_r+0x186>
 8019bf2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8019bf6:	f1ba 0f16 	cmp.w	sl, #22
 8019bfa:	d854      	bhi.n	8019ca6 <_dtoa_r+0x236>
 8019bfc:	4b61      	ldr	r3, [pc, #388]	; (8019d84 <_dtoa_r+0x314>)
 8019bfe:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8019c02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019c06:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8019c0a:	f7e6 ff77 	bl	8000afc <__aeabi_dcmplt>
 8019c0e:	2800      	cmp	r0, #0
 8019c10:	d04b      	beq.n	8019caa <_dtoa_r+0x23a>
 8019c12:	f10a 3aff 	add.w	sl, sl, #4294967295
 8019c16:	2300      	movs	r3, #0
 8019c18:	930e      	str	r3, [sp, #56]	; 0x38
 8019c1a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8019c1c:	1b5d      	subs	r5, r3, r5
 8019c1e:	1e6b      	subs	r3, r5, #1
 8019c20:	9304      	str	r3, [sp, #16]
 8019c22:	bf43      	ittte	mi
 8019c24:	2300      	movmi	r3, #0
 8019c26:	f1c5 0801 	rsbmi	r8, r5, #1
 8019c2a:	9304      	strmi	r3, [sp, #16]
 8019c2c:	f04f 0800 	movpl.w	r8, #0
 8019c30:	f1ba 0f00 	cmp.w	sl, #0
 8019c34:	db3b      	blt.n	8019cae <_dtoa_r+0x23e>
 8019c36:	9b04      	ldr	r3, [sp, #16]
 8019c38:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8019c3c:	4453      	add	r3, sl
 8019c3e:	9304      	str	r3, [sp, #16]
 8019c40:	2300      	movs	r3, #0
 8019c42:	9306      	str	r3, [sp, #24]
 8019c44:	9b05      	ldr	r3, [sp, #20]
 8019c46:	2b09      	cmp	r3, #9
 8019c48:	d869      	bhi.n	8019d1e <_dtoa_r+0x2ae>
 8019c4a:	2b05      	cmp	r3, #5
 8019c4c:	bfc4      	itt	gt
 8019c4e:	3b04      	subgt	r3, #4
 8019c50:	9305      	strgt	r3, [sp, #20]
 8019c52:	9b05      	ldr	r3, [sp, #20]
 8019c54:	f1a3 0302 	sub.w	r3, r3, #2
 8019c58:	bfcc      	ite	gt
 8019c5a:	2500      	movgt	r5, #0
 8019c5c:	2501      	movle	r5, #1
 8019c5e:	2b03      	cmp	r3, #3
 8019c60:	d869      	bhi.n	8019d36 <_dtoa_r+0x2c6>
 8019c62:	e8df f003 	tbb	[pc, r3]
 8019c66:	4e2c      	.short	0x4e2c
 8019c68:	5a4c      	.short	0x5a4c
 8019c6a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8019c6e:	441d      	add	r5, r3
 8019c70:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8019c74:	2b20      	cmp	r3, #32
 8019c76:	bfc1      	itttt	gt
 8019c78:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8019c7c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8019c80:	fa09 f303 	lslgt.w	r3, r9, r3
 8019c84:	fa26 f000 	lsrgt.w	r0, r6, r0
 8019c88:	bfda      	itte	le
 8019c8a:	f1c3 0320 	rsble	r3, r3, #32
 8019c8e:	fa06 f003 	lslle.w	r0, r6, r3
 8019c92:	4318      	orrgt	r0, r3
 8019c94:	f7e6 fc46 	bl	8000524 <__aeabi_ui2d>
 8019c98:	2301      	movs	r3, #1
 8019c9a:	4606      	mov	r6, r0
 8019c9c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8019ca0:	3d01      	subs	r5, #1
 8019ca2:	9310      	str	r3, [sp, #64]	; 0x40
 8019ca4:	e771      	b.n	8019b8a <_dtoa_r+0x11a>
 8019ca6:	2301      	movs	r3, #1
 8019ca8:	e7b6      	b.n	8019c18 <_dtoa_r+0x1a8>
 8019caa:	900e      	str	r0, [sp, #56]	; 0x38
 8019cac:	e7b5      	b.n	8019c1a <_dtoa_r+0x1aa>
 8019cae:	f1ca 0300 	rsb	r3, sl, #0
 8019cb2:	9306      	str	r3, [sp, #24]
 8019cb4:	2300      	movs	r3, #0
 8019cb6:	eba8 080a 	sub.w	r8, r8, sl
 8019cba:	930d      	str	r3, [sp, #52]	; 0x34
 8019cbc:	e7c2      	b.n	8019c44 <_dtoa_r+0x1d4>
 8019cbe:	2300      	movs	r3, #0
 8019cc0:	9308      	str	r3, [sp, #32]
 8019cc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019cc4:	2b00      	cmp	r3, #0
 8019cc6:	dc39      	bgt.n	8019d3c <_dtoa_r+0x2cc>
 8019cc8:	f04f 0901 	mov.w	r9, #1
 8019ccc:	f8cd 9004 	str.w	r9, [sp, #4]
 8019cd0:	464b      	mov	r3, r9
 8019cd2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8019cd6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8019cd8:	2200      	movs	r2, #0
 8019cda:	6042      	str	r2, [r0, #4]
 8019cdc:	2204      	movs	r2, #4
 8019cde:	f102 0614 	add.w	r6, r2, #20
 8019ce2:	429e      	cmp	r6, r3
 8019ce4:	6841      	ldr	r1, [r0, #4]
 8019ce6:	d92f      	bls.n	8019d48 <_dtoa_r+0x2d8>
 8019ce8:	4620      	mov	r0, r4
 8019cea:	f001 f94f 	bl	801af8c <_Balloc>
 8019cee:	9000      	str	r0, [sp, #0]
 8019cf0:	2800      	cmp	r0, #0
 8019cf2:	d14b      	bne.n	8019d8c <_dtoa_r+0x31c>
 8019cf4:	4b24      	ldr	r3, [pc, #144]	; (8019d88 <_dtoa_r+0x318>)
 8019cf6:	4602      	mov	r2, r0
 8019cf8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8019cfc:	e6d1      	b.n	8019aa2 <_dtoa_r+0x32>
 8019cfe:	2301      	movs	r3, #1
 8019d00:	e7de      	b.n	8019cc0 <_dtoa_r+0x250>
 8019d02:	2300      	movs	r3, #0
 8019d04:	9308      	str	r3, [sp, #32]
 8019d06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019d08:	eb0a 0903 	add.w	r9, sl, r3
 8019d0c:	f109 0301 	add.w	r3, r9, #1
 8019d10:	2b01      	cmp	r3, #1
 8019d12:	9301      	str	r3, [sp, #4]
 8019d14:	bfb8      	it	lt
 8019d16:	2301      	movlt	r3, #1
 8019d18:	e7dd      	b.n	8019cd6 <_dtoa_r+0x266>
 8019d1a:	2301      	movs	r3, #1
 8019d1c:	e7f2      	b.n	8019d04 <_dtoa_r+0x294>
 8019d1e:	2501      	movs	r5, #1
 8019d20:	2300      	movs	r3, #0
 8019d22:	9305      	str	r3, [sp, #20]
 8019d24:	9508      	str	r5, [sp, #32]
 8019d26:	f04f 39ff 	mov.w	r9, #4294967295
 8019d2a:	2200      	movs	r2, #0
 8019d2c:	f8cd 9004 	str.w	r9, [sp, #4]
 8019d30:	2312      	movs	r3, #18
 8019d32:	9209      	str	r2, [sp, #36]	; 0x24
 8019d34:	e7cf      	b.n	8019cd6 <_dtoa_r+0x266>
 8019d36:	2301      	movs	r3, #1
 8019d38:	9308      	str	r3, [sp, #32]
 8019d3a:	e7f4      	b.n	8019d26 <_dtoa_r+0x2b6>
 8019d3c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8019d40:	f8cd 9004 	str.w	r9, [sp, #4]
 8019d44:	464b      	mov	r3, r9
 8019d46:	e7c6      	b.n	8019cd6 <_dtoa_r+0x266>
 8019d48:	3101      	adds	r1, #1
 8019d4a:	6041      	str	r1, [r0, #4]
 8019d4c:	0052      	lsls	r2, r2, #1
 8019d4e:	e7c6      	b.n	8019cde <_dtoa_r+0x26e>
 8019d50:	636f4361 	.word	0x636f4361
 8019d54:	3fd287a7 	.word	0x3fd287a7
 8019d58:	8b60c8b3 	.word	0x8b60c8b3
 8019d5c:	3fc68a28 	.word	0x3fc68a28
 8019d60:	509f79fb 	.word	0x509f79fb
 8019d64:	3fd34413 	.word	0x3fd34413
 8019d68:	08020fdc 	.word	0x08020fdc
 8019d6c:	080210f1 	.word	0x080210f1
 8019d70:	7ff00000 	.word	0x7ff00000
 8019d74:	080210ed 	.word	0x080210ed
 8019d78:	080210e4 	.word	0x080210e4
 8019d7c:	08020fb9 	.word	0x08020fb9
 8019d80:	3ff80000 	.word	0x3ff80000
 8019d84:	080212d0 	.word	0x080212d0
 8019d88:	08021150 	.word	0x08021150
 8019d8c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8019d8e:	9a00      	ldr	r2, [sp, #0]
 8019d90:	601a      	str	r2, [r3, #0]
 8019d92:	9b01      	ldr	r3, [sp, #4]
 8019d94:	2b0e      	cmp	r3, #14
 8019d96:	f200 80ad 	bhi.w	8019ef4 <_dtoa_r+0x484>
 8019d9a:	2d00      	cmp	r5, #0
 8019d9c:	f000 80aa 	beq.w	8019ef4 <_dtoa_r+0x484>
 8019da0:	f1ba 0f00 	cmp.w	sl, #0
 8019da4:	dd36      	ble.n	8019e14 <_dtoa_r+0x3a4>
 8019da6:	4ac3      	ldr	r2, [pc, #780]	; (801a0b4 <_dtoa_r+0x644>)
 8019da8:	f00a 030f 	and.w	r3, sl, #15
 8019dac:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8019db0:	ed93 7b00 	vldr	d7, [r3]
 8019db4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8019db8:	ea4f 172a 	mov.w	r7, sl, asr #4
 8019dbc:	eeb0 8a47 	vmov.f32	s16, s14
 8019dc0:	eef0 8a67 	vmov.f32	s17, s15
 8019dc4:	d016      	beq.n	8019df4 <_dtoa_r+0x384>
 8019dc6:	4bbc      	ldr	r3, [pc, #752]	; (801a0b8 <_dtoa_r+0x648>)
 8019dc8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8019dcc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8019dd0:	f7e6 fd4c 	bl	800086c <__aeabi_ddiv>
 8019dd4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8019dd8:	f007 070f 	and.w	r7, r7, #15
 8019ddc:	2503      	movs	r5, #3
 8019dde:	4eb6      	ldr	r6, [pc, #728]	; (801a0b8 <_dtoa_r+0x648>)
 8019de0:	b957      	cbnz	r7, 8019df8 <_dtoa_r+0x388>
 8019de2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8019de6:	ec53 2b18 	vmov	r2, r3, d8
 8019dea:	f7e6 fd3f 	bl	800086c <__aeabi_ddiv>
 8019dee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8019df2:	e029      	b.n	8019e48 <_dtoa_r+0x3d8>
 8019df4:	2502      	movs	r5, #2
 8019df6:	e7f2      	b.n	8019dde <_dtoa_r+0x36e>
 8019df8:	07f9      	lsls	r1, r7, #31
 8019dfa:	d508      	bpl.n	8019e0e <_dtoa_r+0x39e>
 8019dfc:	ec51 0b18 	vmov	r0, r1, d8
 8019e00:	e9d6 2300 	ldrd	r2, r3, [r6]
 8019e04:	f7e6 fc08 	bl	8000618 <__aeabi_dmul>
 8019e08:	ec41 0b18 	vmov	d8, r0, r1
 8019e0c:	3501      	adds	r5, #1
 8019e0e:	107f      	asrs	r7, r7, #1
 8019e10:	3608      	adds	r6, #8
 8019e12:	e7e5      	b.n	8019de0 <_dtoa_r+0x370>
 8019e14:	f000 80a6 	beq.w	8019f64 <_dtoa_r+0x4f4>
 8019e18:	f1ca 0600 	rsb	r6, sl, #0
 8019e1c:	4ba5      	ldr	r3, [pc, #660]	; (801a0b4 <_dtoa_r+0x644>)
 8019e1e:	4fa6      	ldr	r7, [pc, #664]	; (801a0b8 <_dtoa_r+0x648>)
 8019e20:	f006 020f 	and.w	r2, r6, #15
 8019e24:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8019e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019e2c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8019e30:	f7e6 fbf2 	bl	8000618 <__aeabi_dmul>
 8019e34:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8019e38:	1136      	asrs	r6, r6, #4
 8019e3a:	2300      	movs	r3, #0
 8019e3c:	2502      	movs	r5, #2
 8019e3e:	2e00      	cmp	r6, #0
 8019e40:	f040 8085 	bne.w	8019f4e <_dtoa_r+0x4de>
 8019e44:	2b00      	cmp	r3, #0
 8019e46:	d1d2      	bne.n	8019dee <_dtoa_r+0x37e>
 8019e48:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019e4a:	2b00      	cmp	r3, #0
 8019e4c:	f000 808c 	beq.w	8019f68 <_dtoa_r+0x4f8>
 8019e50:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8019e54:	4b99      	ldr	r3, [pc, #612]	; (801a0bc <_dtoa_r+0x64c>)
 8019e56:	2200      	movs	r2, #0
 8019e58:	4630      	mov	r0, r6
 8019e5a:	4639      	mov	r1, r7
 8019e5c:	f7e6 fe4e 	bl	8000afc <__aeabi_dcmplt>
 8019e60:	2800      	cmp	r0, #0
 8019e62:	f000 8081 	beq.w	8019f68 <_dtoa_r+0x4f8>
 8019e66:	9b01      	ldr	r3, [sp, #4]
 8019e68:	2b00      	cmp	r3, #0
 8019e6a:	d07d      	beq.n	8019f68 <_dtoa_r+0x4f8>
 8019e6c:	f1b9 0f00 	cmp.w	r9, #0
 8019e70:	dd3c      	ble.n	8019eec <_dtoa_r+0x47c>
 8019e72:	f10a 33ff 	add.w	r3, sl, #4294967295
 8019e76:	9307      	str	r3, [sp, #28]
 8019e78:	2200      	movs	r2, #0
 8019e7a:	4b91      	ldr	r3, [pc, #580]	; (801a0c0 <_dtoa_r+0x650>)
 8019e7c:	4630      	mov	r0, r6
 8019e7e:	4639      	mov	r1, r7
 8019e80:	f7e6 fbca 	bl	8000618 <__aeabi_dmul>
 8019e84:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8019e88:	3501      	adds	r5, #1
 8019e8a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8019e8e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8019e92:	4628      	mov	r0, r5
 8019e94:	f7e6 fb56 	bl	8000544 <__aeabi_i2d>
 8019e98:	4632      	mov	r2, r6
 8019e9a:	463b      	mov	r3, r7
 8019e9c:	f7e6 fbbc 	bl	8000618 <__aeabi_dmul>
 8019ea0:	4b88      	ldr	r3, [pc, #544]	; (801a0c4 <_dtoa_r+0x654>)
 8019ea2:	2200      	movs	r2, #0
 8019ea4:	f7e6 fa02 	bl	80002ac <__adddf3>
 8019ea8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8019eac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8019eb0:	9303      	str	r3, [sp, #12]
 8019eb2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019eb4:	2b00      	cmp	r3, #0
 8019eb6:	d15c      	bne.n	8019f72 <_dtoa_r+0x502>
 8019eb8:	4b83      	ldr	r3, [pc, #524]	; (801a0c8 <_dtoa_r+0x658>)
 8019eba:	2200      	movs	r2, #0
 8019ebc:	4630      	mov	r0, r6
 8019ebe:	4639      	mov	r1, r7
 8019ec0:	f7e6 f9f2 	bl	80002a8 <__aeabi_dsub>
 8019ec4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8019ec8:	4606      	mov	r6, r0
 8019eca:	460f      	mov	r7, r1
 8019ecc:	f7e6 fe34 	bl	8000b38 <__aeabi_dcmpgt>
 8019ed0:	2800      	cmp	r0, #0
 8019ed2:	f040 8296 	bne.w	801a402 <_dtoa_r+0x992>
 8019ed6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8019eda:	4630      	mov	r0, r6
 8019edc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8019ee0:	4639      	mov	r1, r7
 8019ee2:	f7e6 fe0b 	bl	8000afc <__aeabi_dcmplt>
 8019ee6:	2800      	cmp	r0, #0
 8019ee8:	f040 8288 	bne.w	801a3fc <_dtoa_r+0x98c>
 8019eec:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8019ef0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8019ef4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8019ef6:	2b00      	cmp	r3, #0
 8019ef8:	f2c0 8158 	blt.w	801a1ac <_dtoa_r+0x73c>
 8019efc:	f1ba 0f0e 	cmp.w	sl, #14
 8019f00:	f300 8154 	bgt.w	801a1ac <_dtoa_r+0x73c>
 8019f04:	4b6b      	ldr	r3, [pc, #428]	; (801a0b4 <_dtoa_r+0x644>)
 8019f06:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8019f0a:	e9d3 8900 	ldrd	r8, r9, [r3]
 8019f0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019f10:	2b00      	cmp	r3, #0
 8019f12:	f280 80e3 	bge.w	801a0dc <_dtoa_r+0x66c>
 8019f16:	9b01      	ldr	r3, [sp, #4]
 8019f18:	2b00      	cmp	r3, #0
 8019f1a:	f300 80df 	bgt.w	801a0dc <_dtoa_r+0x66c>
 8019f1e:	f040 826d 	bne.w	801a3fc <_dtoa_r+0x98c>
 8019f22:	4b69      	ldr	r3, [pc, #420]	; (801a0c8 <_dtoa_r+0x658>)
 8019f24:	2200      	movs	r2, #0
 8019f26:	4640      	mov	r0, r8
 8019f28:	4649      	mov	r1, r9
 8019f2a:	f7e6 fb75 	bl	8000618 <__aeabi_dmul>
 8019f2e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8019f32:	f7e6 fdf7 	bl	8000b24 <__aeabi_dcmpge>
 8019f36:	9e01      	ldr	r6, [sp, #4]
 8019f38:	4637      	mov	r7, r6
 8019f3a:	2800      	cmp	r0, #0
 8019f3c:	f040 8243 	bne.w	801a3c6 <_dtoa_r+0x956>
 8019f40:	9d00      	ldr	r5, [sp, #0]
 8019f42:	2331      	movs	r3, #49	; 0x31
 8019f44:	f805 3b01 	strb.w	r3, [r5], #1
 8019f48:	f10a 0a01 	add.w	sl, sl, #1
 8019f4c:	e23f      	b.n	801a3ce <_dtoa_r+0x95e>
 8019f4e:	07f2      	lsls	r2, r6, #31
 8019f50:	d505      	bpl.n	8019f5e <_dtoa_r+0x4ee>
 8019f52:	e9d7 2300 	ldrd	r2, r3, [r7]
 8019f56:	f7e6 fb5f 	bl	8000618 <__aeabi_dmul>
 8019f5a:	3501      	adds	r5, #1
 8019f5c:	2301      	movs	r3, #1
 8019f5e:	1076      	asrs	r6, r6, #1
 8019f60:	3708      	adds	r7, #8
 8019f62:	e76c      	b.n	8019e3e <_dtoa_r+0x3ce>
 8019f64:	2502      	movs	r5, #2
 8019f66:	e76f      	b.n	8019e48 <_dtoa_r+0x3d8>
 8019f68:	9b01      	ldr	r3, [sp, #4]
 8019f6a:	f8cd a01c 	str.w	sl, [sp, #28]
 8019f6e:	930c      	str	r3, [sp, #48]	; 0x30
 8019f70:	e78d      	b.n	8019e8e <_dtoa_r+0x41e>
 8019f72:	9900      	ldr	r1, [sp, #0]
 8019f74:	980c      	ldr	r0, [sp, #48]	; 0x30
 8019f76:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8019f78:	4b4e      	ldr	r3, [pc, #312]	; (801a0b4 <_dtoa_r+0x644>)
 8019f7a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8019f7e:	4401      	add	r1, r0
 8019f80:	9102      	str	r1, [sp, #8]
 8019f82:	9908      	ldr	r1, [sp, #32]
 8019f84:	eeb0 8a47 	vmov.f32	s16, s14
 8019f88:	eef0 8a67 	vmov.f32	s17, s15
 8019f8c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8019f90:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8019f94:	2900      	cmp	r1, #0
 8019f96:	d045      	beq.n	801a024 <_dtoa_r+0x5b4>
 8019f98:	494c      	ldr	r1, [pc, #304]	; (801a0cc <_dtoa_r+0x65c>)
 8019f9a:	2000      	movs	r0, #0
 8019f9c:	f7e6 fc66 	bl	800086c <__aeabi_ddiv>
 8019fa0:	ec53 2b18 	vmov	r2, r3, d8
 8019fa4:	f7e6 f980 	bl	80002a8 <__aeabi_dsub>
 8019fa8:	9d00      	ldr	r5, [sp, #0]
 8019faa:	ec41 0b18 	vmov	d8, r0, r1
 8019fae:	4639      	mov	r1, r7
 8019fb0:	4630      	mov	r0, r6
 8019fb2:	f7e6 fde1 	bl	8000b78 <__aeabi_d2iz>
 8019fb6:	900c      	str	r0, [sp, #48]	; 0x30
 8019fb8:	f7e6 fac4 	bl	8000544 <__aeabi_i2d>
 8019fbc:	4602      	mov	r2, r0
 8019fbe:	460b      	mov	r3, r1
 8019fc0:	4630      	mov	r0, r6
 8019fc2:	4639      	mov	r1, r7
 8019fc4:	f7e6 f970 	bl	80002a8 <__aeabi_dsub>
 8019fc8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019fca:	3330      	adds	r3, #48	; 0x30
 8019fcc:	f805 3b01 	strb.w	r3, [r5], #1
 8019fd0:	ec53 2b18 	vmov	r2, r3, d8
 8019fd4:	4606      	mov	r6, r0
 8019fd6:	460f      	mov	r7, r1
 8019fd8:	f7e6 fd90 	bl	8000afc <__aeabi_dcmplt>
 8019fdc:	2800      	cmp	r0, #0
 8019fde:	d165      	bne.n	801a0ac <_dtoa_r+0x63c>
 8019fe0:	4632      	mov	r2, r6
 8019fe2:	463b      	mov	r3, r7
 8019fe4:	4935      	ldr	r1, [pc, #212]	; (801a0bc <_dtoa_r+0x64c>)
 8019fe6:	2000      	movs	r0, #0
 8019fe8:	f7e6 f95e 	bl	80002a8 <__aeabi_dsub>
 8019fec:	ec53 2b18 	vmov	r2, r3, d8
 8019ff0:	f7e6 fd84 	bl	8000afc <__aeabi_dcmplt>
 8019ff4:	2800      	cmp	r0, #0
 8019ff6:	f040 80b9 	bne.w	801a16c <_dtoa_r+0x6fc>
 8019ffa:	9b02      	ldr	r3, [sp, #8]
 8019ffc:	429d      	cmp	r5, r3
 8019ffe:	f43f af75 	beq.w	8019eec <_dtoa_r+0x47c>
 801a002:	4b2f      	ldr	r3, [pc, #188]	; (801a0c0 <_dtoa_r+0x650>)
 801a004:	ec51 0b18 	vmov	r0, r1, d8
 801a008:	2200      	movs	r2, #0
 801a00a:	f7e6 fb05 	bl	8000618 <__aeabi_dmul>
 801a00e:	4b2c      	ldr	r3, [pc, #176]	; (801a0c0 <_dtoa_r+0x650>)
 801a010:	ec41 0b18 	vmov	d8, r0, r1
 801a014:	2200      	movs	r2, #0
 801a016:	4630      	mov	r0, r6
 801a018:	4639      	mov	r1, r7
 801a01a:	f7e6 fafd 	bl	8000618 <__aeabi_dmul>
 801a01e:	4606      	mov	r6, r0
 801a020:	460f      	mov	r7, r1
 801a022:	e7c4      	b.n	8019fae <_dtoa_r+0x53e>
 801a024:	ec51 0b17 	vmov	r0, r1, d7
 801a028:	f7e6 faf6 	bl	8000618 <__aeabi_dmul>
 801a02c:	9b02      	ldr	r3, [sp, #8]
 801a02e:	9d00      	ldr	r5, [sp, #0]
 801a030:	930c      	str	r3, [sp, #48]	; 0x30
 801a032:	ec41 0b18 	vmov	d8, r0, r1
 801a036:	4639      	mov	r1, r7
 801a038:	4630      	mov	r0, r6
 801a03a:	f7e6 fd9d 	bl	8000b78 <__aeabi_d2iz>
 801a03e:	9011      	str	r0, [sp, #68]	; 0x44
 801a040:	f7e6 fa80 	bl	8000544 <__aeabi_i2d>
 801a044:	4602      	mov	r2, r0
 801a046:	460b      	mov	r3, r1
 801a048:	4630      	mov	r0, r6
 801a04a:	4639      	mov	r1, r7
 801a04c:	f7e6 f92c 	bl	80002a8 <__aeabi_dsub>
 801a050:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801a052:	3330      	adds	r3, #48	; 0x30
 801a054:	f805 3b01 	strb.w	r3, [r5], #1
 801a058:	9b02      	ldr	r3, [sp, #8]
 801a05a:	429d      	cmp	r5, r3
 801a05c:	4606      	mov	r6, r0
 801a05e:	460f      	mov	r7, r1
 801a060:	f04f 0200 	mov.w	r2, #0
 801a064:	d134      	bne.n	801a0d0 <_dtoa_r+0x660>
 801a066:	4b19      	ldr	r3, [pc, #100]	; (801a0cc <_dtoa_r+0x65c>)
 801a068:	ec51 0b18 	vmov	r0, r1, d8
 801a06c:	f7e6 f91e 	bl	80002ac <__adddf3>
 801a070:	4602      	mov	r2, r0
 801a072:	460b      	mov	r3, r1
 801a074:	4630      	mov	r0, r6
 801a076:	4639      	mov	r1, r7
 801a078:	f7e6 fd5e 	bl	8000b38 <__aeabi_dcmpgt>
 801a07c:	2800      	cmp	r0, #0
 801a07e:	d175      	bne.n	801a16c <_dtoa_r+0x6fc>
 801a080:	ec53 2b18 	vmov	r2, r3, d8
 801a084:	4911      	ldr	r1, [pc, #68]	; (801a0cc <_dtoa_r+0x65c>)
 801a086:	2000      	movs	r0, #0
 801a088:	f7e6 f90e 	bl	80002a8 <__aeabi_dsub>
 801a08c:	4602      	mov	r2, r0
 801a08e:	460b      	mov	r3, r1
 801a090:	4630      	mov	r0, r6
 801a092:	4639      	mov	r1, r7
 801a094:	f7e6 fd32 	bl	8000afc <__aeabi_dcmplt>
 801a098:	2800      	cmp	r0, #0
 801a09a:	f43f af27 	beq.w	8019eec <_dtoa_r+0x47c>
 801a09e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801a0a0:	1e6b      	subs	r3, r5, #1
 801a0a2:	930c      	str	r3, [sp, #48]	; 0x30
 801a0a4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801a0a8:	2b30      	cmp	r3, #48	; 0x30
 801a0aa:	d0f8      	beq.n	801a09e <_dtoa_r+0x62e>
 801a0ac:	f8dd a01c 	ldr.w	sl, [sp, #28]
 801a0b0:	e04a      	b.n	801a148 <_dtoa_r+0x6d8>
 801a0b2:	bf00      	nop
 801a0b4:	080212d0 	.word	0x080212d0
 801a0b8:	080212a8 	.word	0x080212a8
 801a0bc:	3ff00000 	.word	0x3ff00000
 801a0c0:	40240000 	.word	0x40240000
 801a0c4:	401c0000 	.word	0x401c0000
 801a0c8:	40140000 	.word	0x40140000
 801a0cc:	3fe00000 	.word	0x3fe00000
 801a0d0:	4baf      	ldr	r3, [pc, #700]	; (801a390 <_dtoa_r+0x920>)
 801a0d2:	f7e6 faa1 	bl	8000618 <__aeabi_dmul>
 801a0d6:	4606      	mov	r6, r0
 801a0d8:	460f      	mov	r7, r1
 801a0da:	e7ac      	b.n	801a036 <_dtoa_r+0x5c6>
 801a0dc:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801a0e0:	9d00      	ldr	r5, [sp, #0]
 801a0e2:	4642      	mov	r2, r8
 801a0e4:	464b      	mov	r3, r9
 801a0e6:	4630      	mov	r0, r6
 801a0e8:	4639      	mov	r1, r7
 801a0ea:	f7e6 fbbf 	bl	800086c <__aeabi_ddiv>
 801a0ee:	f7e6 fd43 	bl	8000b78 <__aeabi_d2iz>
 801a0f2:	9002      	str	r0, [sp, #8]
 801a0f4:	f7e6 fa26 	bl	8000544 <__aeabi_i2d>
 801a0f8:	4642      	mov	r2, r8
 801a0fa:	464b      	mov	r3, r9
 801a0fc:	f7e6 fa8c 	bl	8000618 <__aeabi_dmul>
 801a100:	4602      	mov	r2, r0
 801a102:	460b      	mov	r3, r1
 801a104:	4630      	mov	r0, r6
 801a106:	4639      	mov	r1, r7
 801a108:	f7e6 f8ce 	bl	80002a8 <__aeabi_dsub>
 801a10c:	9e02      	ldr	r6, [sp, #8]
 801a10e:	9f01      	ldr	r7, [sp, #4]
 801a110:	3630      	adds	r6, #48	; 0x30
 801a112:	f805 6b01 	strb.w	r6, [r5], #1
 801a116:	9e00      	ldr	r6, [sp, #0]
 801a118:	1bae      	subs	r6, r5, r6
 801a11a:	42b7      	cmp	r7, r6
 801a11c:	4602      	mov	r2, r0
 801a11e:	460b      	mov	r3, r1
 801a120:	d137      	bne.n	801a192 <_dtoa_r+0x722>
 801a122:	f7e6 f8c3 	bl	80002ac <__adddf3>
 801a126:	4642      	mov	r2, r8
 801a128:	464b      	mov	r3, r9
 801a12a:	4606      	mov	r6, r0
 801a12c:	460f      	mov	r7, r1
 801a12e:	f7e6 fd03 	bl	8000b38 <__aeabi_dcmpgt>
 801a132:	b9c8      	cbnz	r0, 801a168 <_dtoa_r+0x6f8>
 801a134:	4642      	mov	r2, r8
 801a136:	464b      	mov	r3, r9
 801a138:	4630      	mov	r0, r6
 801a13a:	4639      	mov	r1, r7
 801a13c:	f7e6 fcd4 	bl	8000ae8 <__aeabi_dcmpeq>
 801a140:	b110      	cbz	r0, 801a148 <_dtoa_r+0x6d8>
 801a142:	9b02      	ldr	r3, [sp, #8]
 801a144:	07d9      	lsls	r1, r3, #31
 801a146:	d40f      	bmi.n	801a168 <_dtoa_r+0x6f8>
 801a148:	4620      	mov	r0, r4
 801a14a:	4659      	mov	r1, fp
 801a14c:	f000 ff5e 	bl	801b00c <_Bfree>
 801a150:	2300      	movs	r3, #0
 801a152:	702b      	strb	r3, [r5, #0]
 801a154:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801a156:	f10a 0001 	add.w	r0, sl, #1
 801a15a:	6018      	str	r0, [r3, #0]
 801a15c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801a15e:	2b00      	cmp	r3, #0
 801a160:	f43f acd8 	beq.w	8019b14 <_dtoa_r+0xa4>
 801a164:	601d      	str	r5, [r3, #0]
 801a166:	e4d5      	b.n	8019b14 <_dtoa_r+0xa4>
 801a168:	f8cd a01c 	str.w	sl, [sp, #28]
 801a16c:	462b      	mov	r3, r5
 801a16e:	461d      	mov	r5, r3
 801a170:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801a174:	2a39      	cmp	r2, #57	; 0x39
 801a176:	d108      	bne.n	801a18a <_dtoa_r+0x71a>
 801a178:	9a00      	ldr	r2, [sp, #0]
 801a17a:	429a      	cmp	r2, r3
 801a17c:	d1f7      	bne.n	801a16e <_dtoa_r+0x6fe>
 801a17e:	9a07      	ldr	r2, [sp, #28]
 801a180:	9900      	ldr	r1, [sp, #0]
 801a182:	3201      	adds	r2, #1
 801a184:	9207      	str	r2, [sp, #28]
 801a186:	2230      	movs	r2, #48	; 0x30
 801a188:	700a      	strb	r2, [r1, #0]
 801a18a:	781a      	ldrb	r2, [r3, #0]
 801a18c:	3201      	adds	r2, #1
 801a18e:	701a      	strb	r2, [r3, #0]
 801a190:	e78c      	b.n	801a0ac <_dtoa_r+0x63c>
 801a192:	4b7f      	ldr	r3, [pc, #508]	; (801a390 <_dtoa_r+0x920>)
 801a194:	2200      	movs	r2, #0
 801a196:	f7e6 fa3f 	bl	8000618 <__aeabi_dmul>
 801a19a:	2200      	movs	r2, #0
 801a19c:	2300      	movs	r3, #0
 801a19e:	4606      	mov	r6, r0
 801a1a0:	460f      	mov	r7, r1
 801a1a2:	f7e6 fca1 	bl	8000ae8 <__aeabi_dcmpeq>
 801a1a6:	2800      	cmp	r0, #0
 801a1a8:	d09b      	beq.n	801a0e2 <_dtoa_r+0x672>
 801a1aa:	e7cd      	b.n	801a148 <_dtoa_r+0x6d8>
 801a1ac:	9a08      	ldr	r2, [sp, #32]
 801a1ae:	2a00      	cmp	r2, #0
 801a1b0:	f000 80c4 	beq.w	801a33c <_dtoa_r+0x8cc>
 801a1b4:	9a05      	ldr	r2, [sp, #20]
 801a1b6:	2a01      	cmp	r2, #1
 801a1b8:	f300 80a8 	bgt.w	801a30c <_dtoa_r+0x89c>
 801a1bc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801a1be:	2a00      	cmp	r2, #0
 801a1c0:	f000 80a0 	beq.w	801a304 <_dtoa_r+0x894>
 801a1c4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801a1c8:	9e06      	ldr	r6, [sp, #24]
 801a1ca:	4645      	mov	r5, r8
 801a1cc:	9a04      	ldr	r2, [sp, #16]
 801a1ce:	2101      	movs	r1, #1
 801a1d0:	441a      	add	r2, r3
 801a1d2:	4620      	mov	r0, r4
 801a1d4:	4498      	add	r8, r3
 801a1d6:	9204      	str	r2, [sp, #16]
 801a1d8:	f001 f81e 	bl	801b218 <__i2b>
 801a1dc:	4607      	mov	r7, r0
 801a1de:	2d00      	cmp	r5, #0
 801a1e0:	dd0b      	ble.n	801a1fa <_dtoa_r+0x78a>
 801a1e2:	9b04      	ldr	r3, [sp, #16]
 801a1e4:	2b00      	cmp	r3, #0
 801a1e6:	dd08      	ble.n	801a1fa <_dtoa_r+0x78a>
 801a1e8:	42ab      	cmp	r3, r5
 801a1ea:	9a04      	ldr	r2, [sp, #16]
 801a1ec:	bfa8      	it	ge
 801a1ee:	462b      	movge	r3, r5
 801a1f0:	eba8 0803 	sub.w	r8, r8, r3
 801a1f4:	1aed      	subs	r5, r5, r3
 801a1f6:	1ad3      	subs	r3, r2, r3
 801a1f8:	9304      	str	r3, [sp, #16]
 801a1fa:	9b06      	ldr	r3, [sp, #24]
 801a1fc:	b1fb      	cbz	r3, 801a23e <_dtoa_r+0x7ce>
 801a1fe:	9b08      	ldr	r3, [sp, #32]
 801a200:	2b00      	cmp	r3, #0
 801a202:	f000 809f 	beq.w	801a344 <_dtoa_r+0x8d4>
 801a206:	2e00      	cmp	r6, #0
 801a208:	dd11      	ble.n	801a22e <_dtoa_r+0x7be>
 801a20a:	4639      	mov	r1, r7
 801a20c:	4632      	mov	r2, r6
 801a20e:	4620      	mov	r0, r4
 801a210:	f001 f8be 	bl	801b390 <__pow5mult>
 801a214:	465a      	mov	r2, fp
 801a216:	4601      	mov	r1, r0
 801a218:	4607      	mov	r7, r0
 801a21a:	4620      	mov	r0, r4
 801a21c:	f001 f812 	bl	801b244 <__multiply>
 801a220:	4659      	mov	r1, fp
 801a222:	9007      	str	r0, [sp, #28]
 801a224:	4620      	mov	r0, r4
 801a226:	f000 fef1 	bl	801b00c <_Bfree>
 801a22a:	9b07      	ldr	r3, [sp, #28]
 801a22c:	469b      	mov	fp, r3
 801a22e:	9b06      	ldr	r3, [sp, #24]
 801a230:	1b9a      	subs	r2, r3, r6
 801a232:	d004      	beq.n	801a23e <_dtoa_r+0x7ce>
 801a234:	4659      	mov	r1, fp
 801a236:	4620      	mov	r0, r4
 801a238:	f001 f8aa 	bl	801b390 <__pow5mult>
 801a23c:	4683      	mov	fp, r0
 801a23e:	2101      	movs	r1, #1
 801a240:	4620      	mov	r0, r4
 801a242:	f000 ffe9 	bl	801b218 <__i2b>
 801a246:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a248:	2b00      	cmp	r3, #0
 801a24a:	4606      	mov	r6, r0
 801a24c:	dd7c      	ble.n	801a348 <_dtoa_r+0x8d8>
 801a24e:	461a      	mov	r2, r3
 801a250:	4601      	mov	r1, r0
 801a252:	4620      	mov	r0, r4
 801a254:	f001 f89c 	bl	801b390 <__pow5mult>
 801a258:	9b05      	ldr	r3, [sp, #20]
 801a25a:	2b01      	cmp	r3, #1
 801a25c:	4606      	mov	r6, r0
 801a25e:	dd76      	ble.n	801a34e <_dtoa_r+0x8de>
 801a260:	2300      	movs	r3, #0
 801a262:	9306      	str	r3, [sp, #24]
 801a264:	6933      	ldr	r3, [r6, #16]
 801a266:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801a26a:	6918      	ldr	r0, [r3, #16]
 801a26c:	f000 ff84 	bl	801b178 <__hi0bits>
 801a270:	f1c0 0020 	rsb	r0, r0, #32
 801a274:	9b04      	ldr	r3, [sp, #16]
 801a276:	4418      	add	r0, r3
 801a278:	f010 001f 	ands.w	r0, r0, #31
 801a27c:	f000 8086 	beq.w	801a38c <_dtoa_r+0x91c>
 801a280:	f1c0 0320 	rsb	r3, r0, #32
 801a284:	2b04      	cmp	r3, #4
 801a286:	dd7f      	ble.n	801a388 <_dtoa_r+0x918>
 801a288:	f1c0 001c 	rsb	r0, r0, #28
 801a28c:	9b04      	ldr	r3, [sp, #16]
 801a28e:	4403      	add	r3, r0
 801a290:	4480      	add	r8, r0
 801a292:	4405      	add	r5, r0
 801a294:	9304      	str	r3, [sp, #16]
 801a296:	f1b8 0f00 	cmp.w	r8, #0
 801a29a:	dd05      	ble.n	801a2a8 <_dtoa_r+0x838>
 801a29c:	4659      	mov	r1, fp
 801a29e:	4642      	mov	r2, r8
 801a2a0:	4620      	mov	r0, r4
 801a2a2:	f001 f8cf 	bl	801b444 <__lshift>
 801a2a6:	4683      	mov	fp, r0
 801a2a8:	9b04      	ldr	r3, [sp, #16]
 801a2aa:	2b00      	cmp	r3, #0
 801a2ac:	dd05      	ble.n	801a2ba <_dtoa_r+0x84a>
 801a2ae:	4631      	mov	r1, r6
 801a2b0:	461a      	mov	r2, r3
 801a2b2:	4620      	mov	r0, r4
 801a2b4:	f001 f8c6 	bl	801b444 <__lshift>
 801a2b8:	4606      	mov	r6, r0
 801a2ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a2bc:	2b00      	cmp	r3, #0
 801a2be:	d069      	beq.n	801a394 <_dtoa_r+0x924>
 801a2c0:	4631      	mov	r1, r6
 801a2c2:	4658      	mov	r0, fp
 801a2c4:	f001 f92a 	bl	801b51c <__mcmp>
 801a2c8:	2800      	cmp	r0, #0
 801a2ca:	da63      	bge.n	801a394 <_dtoa_r+0x924>
 801a2cc:	2300      	movs	r3, #0
 801a2ce:	4659      	mov	r1, fp
 801a2d0:	220a      	movs	r2, #10
 801a2d2:	4620      	mov	r0, r4
 801a2d4:	f000 febc 	bl	801b050 <__multadd>
 801a2d8:	9b08      	ldr	r3, [sp, #32]
 801a2da:	f10a 3aff 	add.w	sl, sl, #4294967295
 801a2de:	4683      	mov	fp, r0
 801a2e0:	2b00      	cmp	r3, #0
 801a2e2:	f000 818f 	beq.w	801a604 <_dtoa_r+0xb94>
 801a2e6:	4639      	mov	r1, r7
 801a2e8:	2300      	movs	r3, #0
 801a2ea:	220a      	movs	r2, #10
 801a2ec:	4620      	mov	r0, r4
 801a2ee:	f000 feaf 	bl	801b050 <__multadd>
 801a2f2:	f1b9 0f00 	cmp.w	r9, #0
 801a2f6:	4607      	mov	r7, r0
 801a2f8:	f300 808e 	bgt.w	801a418 <_dtoa_r+0x9a8>
 801a2fc:	9b05      	ldr	r3, [sp, #20]
 801a2fe:	2b02      	cmp	r3, #2
 801a300:	dc50      	bgt.n	801a3a4 <_dtoa_r+0x934>
 801a302:	e089      	b.n	801a418 <_dtoa_r+0x9a8>
 801a304:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801a306:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801a30a:	e75d      	b.n	801a1c8 <_dtoa_r+0x758>
 801a30c:	9b01      	ldr	r3, [sp, #4]
 801a30e:	1e5e      	subs	r6, r3, #1
 801a310:	9b06      	ldr	r3, [sp, #24]
 801a312:	42b3      	cmp	r3, r6
 801a314:	bfbf      	itttt	lt
 801a316:	9b06      	ldrlt	r3, [sp, #24]
 801a318:	9606      	strlt	r6, [sp, #24]
 801a31a:	1af2      	sublt	r2, r6, r3
 801a31c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 801a31e:	bfb6      	itet	lt
 801a320:	189b      	addlt	r3, r3, r2
 801a322:	1b9e      	subge	r6, r3, r6
 801a324:	930d      	strlt	r3, [sp, #52]	; 0x34
 801a326:	9b01      	ldr	r3, [sp, #4]
 801a328:	bfb8      	it	lt
 801a32a:	2600      	movlt	r6, #0
 801a32c:	2b00      	cmp	r3, #0
 801a32e:	bfb5      	itete	lt
 801a330:	eba8 0503 	sublt.w	r5, r8, r3
 801a334:	9b01      	ldrge	r3, [sp, #4]
 801a336:	2300      	movlt	r3, #0
 801a338:	4645      	movge	r5, r8
 801a33a:	e747      	b.n	801a1cc <_dtoa_r+0x75c>
 801a33c:	9e06      	ldr	r6, [sp, #24]
 801a33e:	9f08      	ldr	r7, [sp, #32]
 801a340:	4645      	mov	r5, r8
 801a342:	e74c      	b.n	801a1de <_dtoa_r+0x76e>
 801a344:	9a06      	ldr	r2, [sp, #24]
 801a346:	e775      	b.n	801a234 <_dtoa_r+0x7c4>
 801a348:	9b05      	ldr	r3, [sp, #20]
 801a34a:	2b01      	cmp	r3, #1
 801a34c:	dc18      	bgt.n	801a380 <_dtoa_r+0x910>
 801a34e:	9b02      	ldr	r3, [sp, #8]
 801a350:	b9b3      	cbnz	r3, 801a380 <_dtoa_r+0x910>
 801a352:	9b03      	ldr	r3, [sp, #12]
 801a354:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801a358:	b9a3      	cbnz	r3, 801a384 <_dtoa_r+0x914>
 801a35a:	9b03      	ldr	r3, [sp, #12]
 801a35c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801a360:	0d1b      	lsrs	r3, r3, #20
 801a362:	051b      	lsls	r3, r3, #20
 801a364:	b12b      	cbz	r3, 801a372 <_dtoa_r+0x902>
 801a366:	9b04      	ldr	r3, [sp, #16]
 801a368:	3301      	adds	r3, #1
 801a36a:	9304      	str	r3, [sp, #16]
 801a36c:	f108 0801 	add.w	r8, r8, #1
 801a370:	2301      	movs	r3, #1
 801a372:	9306      	str	r3, [sp, #24]
 801a374:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a376:	2b00      	cmp	r3, #0
 801a378:	f47f af74 	bne.w	801a264 <_dtoa_r+0x7f4>
 801a37c:	2001      	movs	r0, #1
 801a37e:	e779      	b.n	801a274 <_dtoa_r+0x804>
 801a380:	2300      	movs	r3, #0
 801a382:	e7f6      	b.n	801a372 <_dtoa_r+0x902>
 801a384:	9b02      	ldr	r3, [sp, #8]
 801a386:	e7f4      	b.n	801a372 <_dtoa_r+0x902>
 801a388:	d085      	beq.n	801a296 <_dtoa_r+0x826>
 801a38a:	4618      	mov	r0, r3
 801a38c:	301c      	adds	r0, #28
 801a38e:	e77d      	b.n	801a28c <_dtoa_r+0x81c>
 801a390:	40240000 	.word	0x40240000
 801a394:	9b01      	ldr	r3, [sp, #4]
 801a396:	2b00      	cmp	r3, #0
 801a398:	dc38      	bgt.n	801a40c <_dtoa_r+0x99c>
 801a39a:	9b05      	ldr	r3, [sp, #20]
 801a39c:	2b02      	cmp	r3, #2
 801a39e:	dd35      	ble.n	801a40c <_dtoa_r+0x99c>
 801a3a0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801a3a4:	f1b9 0f00 	cmp.w	r9, #0
 801a3a8:	d10d      	bne.n	801a3c6 <_dtoa_r+0x956>
 801a3aa:	4631      	mov	r1, r6
 801a3ac:	464b      	mov	r3, r9
 801a3ae:	2205      	movs	r2, #5
 801a3b0:	4620      	mov	r0, r4
 801a3b2:	f000 fe4d 	bl	801b050 <__multadd>
 801a3b6:	4601      	mov	r1, r0
 801a3b8:	4606      	mov	r6, r0
 801a3ba:	4658      	mov	r0, fp
 801a3bc:	f001 f8ae 	bl	801b51c <__mcmp>
 801a3c0:	2800      	cmp	r0, #0
 801a3c2:	f73f adbd 	bgt.w	8019f40 <_dtoa_r+0x4d0>
 801a3c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a3c8:	9d00      	ldr	r5, [sp, #0]
 801a3ca:	ea6f 0a03 	mvn.w	sl, r3
 801a3ce:	f04f 0800 	mov.w	r8, #0
 801a3d2:	4631      	mov	r1, r6
 801a3d4:	4620      	mov	r0, r4
 801a3d6:	f000 fe19 	bl	801b00c <_Bfree>
 801a3da:	2f00      	cmp	r7, #0
 801a3dc:	f43f aeb4 	beq.w	801a148 <_dtoa_r+0x6d8>
 801a3e0:	f1b8 0f00 	cmp.w	r8, #0
 801a3e4:	d005      	beq.n	801a3f2 <_dtoa_r+0x982>
 801a3e6:	45b8      	cmp	r8, r7
 801a3e8:	d003      	beq.n	801a3f2 <_dtoa_r+0x982>
 801a3ea:	4641      	mov	r1, r8
 801a3ec:	4620      	mov	r0, r4
 801a3ee:	f000 fe0d 	bl	801b00c <_Bfree>
 801a3f2:	4639      	mov	r1, r7
 801a3f4:	4620      	mov	r0, r4
 801a3f6:	f000 fe09 	bl	801b00c <_Bfree>
 801a3fa:	e6a5      	b.n	801a148 <_dtoa_r+0x6d8>
 801a3fc:	2600      	movs	r6, #0
 801a3fe:	4637      	mov	r7, r6
 801a400:	e7e1      	b.n	801a3c6 <_dtoa_r+0x956>
 801a402:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801a404:	f8dd a01c 	ldr.w	sl, [sp, #28]
 801a408:	4637      	mov	r7, r6
 801a40a:	e599      	b.n	8019f40 <_dtoa_r+0x4d0>
 801a40c:	9b08      	ldr	r3, [sp, #32]
 801a40e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801a412:	2b00      	cmp	r3, #0
 801a414:	f000 80fd 	beq.w	801a612 <_dtoa_r+0xba2>
 801a418:	2d00      	cmp	r5, #0
 801a41a:	dd05      	ble.n	801a428 <_dtoa_r+0x9b8>
 801a41c:	4639      	mov	r1, r7
 801a41e:	462a      	mov	r2, r5
 801a420:	4620      	mov	r0, r4
 801a422:	f001 f80f 	bl	801b444 <__lshift>
 801a426:	4607      	mov	r7, r0
 801a428:	9b06      	ldr	r3, [sp, #24]
 801a42a:	2b00      	cmp	r3, #0
 801a42c:	d05c      	beq.n	801a4e8 <_dtoa_r+0xa78>
 801a42e:	6879      	ldr	r1, [r7, #4]
 801a430:	4620      	mov	r0, r4
 801a432:	f000 fdab 	bl	801af8c <_Balloc>
 801a436:	4605      	mov	r5, r0
 801a438:	b928      	cbnz	r0, 801a446 <_dtoa_r+0x9d6>
 801a43a:	4b80      	ldr	r3, [pc, #512]	; (801a63c <_dtoa_r+0xbcc>)
 801a43c:	4602      	mov	r2, r0
 801a43e:	f240 21ea 	movw	r1, #746	; 0x2ea
 801a442:	f7ff bb2e 	b.w	8019aa2 <_dtoa_r+0x32>
 801a446:	693a      	ldr	r2, [r7, #16]
 801a448:	3202      	adds	r2, #2
 801a44a:	0092      	lsls	r2, r2, #2
 801a44c:	f107 010c 	add.w	r1, r7, #12
 801a450:	300c      	adds	r0, #12
 801a452:	f7fd fd77 	bl	8017f44 <memcpy>
 801a456:	2201      	movs	r2, #1
 801a458:	4629      	mov	r1, r5
 801a45a:	4620      	mov	r0, r4
 801a45c:	f000 fff2 	bl	801b444 <__lshift>
 801a460:	9b00      	ldr	r3, [sp, #0]
 801a462:	3301      	adds	r3, #1
 801a464:	9301      	str	r3, [sp, #4]
 801a466:	9b00      	ldr	r3, [sp, #0]
 801a468:	444b      	add	r3, r9
 801a46a:	9307      	str	r3, [sp, #28]
 801a46c:	9b02      	ldr	r3, [sp, #8]
 801a46e:	f003 0301 	and.w	r3, r3, #1
 801a472:	46b8      	mov	r8, r7
 801a474:	9306      	str	r3, [sp, #24]
 801a476:	4607      	mov	r7, r0
 801a478:	9b01      	ldr	r3, [sp, #4]
 801a47a:	4631      	mov	r1, r6
 801a47c:	3b01      	subs	r3, #1
 801a47e:	4658      	mov	r0, fp
 801a480:	9302      	str	r3, [sp, #8]
 801a482:	f7ff fa67 	bl	8019954 <quorem>
 801a486:	4603      	mov	r3, r0
 801a488:	3330      	adds	r3, #48	; 0x30
 801a48a:	9004      	str	r0, [sp, #16]
 801a48c:	4641      	mov	r1, r8
 801a48e:	4658      	mov	r0, fp
 801a490:	9308      	str	r3, [sp, #32]
 801a492:	f001 f843 	bl	801b51c <__mcmp>
 801a496:	463a      	mov	r2, r7
 801a498:	4681      	mov	r9, r0
 801a49a:	4631      	mov	r1, r6
 801a49c:	4620      	mov	r0, r4
 801a49e:	f001 f859 	bl	801b554 <__mdiff>
 801a4a2:	68c2      	ldr	r2, [r0, #12]
 801a4a4:	9b08      	ldr	r3, [sp, #32]
 801a4a6:	4605      	mov	r5, r0
 801a4a8:	bb02      	cbnz	r2, 801a4ec <_dtoa_r+0xa7c>
 801a4aa:	4601      	mov	r1, r0
 801a4ac:	4658      	mov	r0, fp
 801a4ae:	f001 f835 	bl	801b51c <__mcmp>
 801a4b2:	9b08      	ldr	r3, [sp, #32]
 801a4b4:	4602      	mov	r2, r0
 801a4b6:	4629      	mov	r1, r5
 801a4b8:	4620      	mov	r0, r4
 801a4ba:	e9cd 3208 	strd	r3, r2, [sp, #32]
 801a4be:	f000 fda5 	bl	801b00c <_Bfree>
 801a4c2:	9b05      	ldr	r3, [sp, #20]
 801a4c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a4c6:	9d01      	ldr	r5, [sp, #4]
 801a4c8:	ea43 0102 	orr.w	r1, r3, r2
 801a4cc:	9b06      	ldr	r3, [sp, #24]
 801a4ce:	430b      	orrs	r3, r1
 801a4d0:	9b08      	ldr	r3, [sp, #32]
 801a4d2:	d10d      	bne.n	801a4f0 <_dtoa_r+0xa80>
 801a4d4:	2b39      	cmp	r3, #57	; 0x39
 801a4d6:	d029      	beq.n	801a52c <_dtoa_r+0xabc>
 801a4d8:	f1b9 0f00 	cmp.w	r9, #0
 801a4dc:	dd01      	ble.n	801a4e2 <_dtoa_r+0xa72>
 801a4de:	9b04      	ldr	r3, [sp, #16]
 801a4e0:	3331      	adds	r3, #49	; 0x31
 801a4e2:	9a02      	ldr	r2, [sp, #8]
 801a4e4:	7013      	strb	r3, [r2, #0]
 801a4e6:	e774      	b.n	801a3d2 <_dtoa_r+0x962>
 801a4e8:	4638      	mov	r0, r7
 801a4ea:	e7b9      	b.n	801a460 <_dtoa_r+0x9f0>
 801a4ec:	2201      	movs	r2, #1
 801a4ee:	e7e2      	b.n	801a4b6 <_dtoa_r+0xa46>
 801a4f0:	f1b9 0f00 	cmp.w	r9, #0
 801a4f4:	db06      	blt.n	801a504 <_dtoa_r+0xa94>
 801a4f6:	9905      	ldr	r1, [sp, #20]
 801a4f8:	ea41 0909 	orr.w	r9, r1, r9
 801a4fc:	9906      	ldr	r1, [sp, #24]
 801a4fe:	ea59 0101 	orrs.w	r1, r9, r1
 801a502:	d120      	bne.n	801a546 <_dtoa_r+0xad6>
 801a504:	2a00      	cmp	r2, #0
 801a506:	ddec      	ble.n	801a4e2 <_dtoa_r+0xa72>
 801a508:	4659      	mov	r1, fp
 801a50a:	2201      	movs	r2, #1
 801a50c:	4620      	mov	r0, r4
 801a50e:	9301      	str	r3, [sp, #4]
 801a510:	f000 ff98 	bl	801b444 <__lshift>
 801a514:	4631      	mov	r1, r6
 801a516:	4683      	mov	fp, r0
 801a518:	f001 f800 	bl	801b51c <__mcmp>
 801a51c:	2800      	cmp	r0, #0
 801a51e:	9b01      	ldr	r3, [sp, #4]
 801a520:	dc02      	bgt.n	801a528 <_dtoa_r+0xab8>
 801a522:	d1de      	bne.n	801a4e2 <_dtoa_r+0xa72>
 801a524:	07da      	lsls	r2, r3, #31
 801a526:	d5dc      	bpl.n	801a4e2 <_dtoa_r+0xa72>
 801a528:	2b39      	cmp	r3, #57	; 0x39
 801a52a:	d1d8      	bne.n	801a4de <_dtoa_r+0xa6e>
 801a52c:	9a02      	ldr	r2, [sp, #8]
 801a52e:	2339      	movs	r3, #57	; 0x39
 801a530:	7013      	strb	r3, [r2, #0]
 801a532:	462b      	mov	r3, r5
 801a534:	461d      	mov	r5, r3
 801a536:	3b01      	subs	r3, #1
 801a538:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801a53c:	2a39      	cmp	r2, #57	; 0x39
 801a53e:	d050      	beq.n	801a5e2 <_dtoa_r+0xb72>
 801a540:	3201      	adds	r2, #1
 801a542:	701a      	strb	r2, [r3, #0]
 801a544:	e745      	b.n	801a3d2 <_dtoa_r+0x962>
 801a546:	2a00      	cmp	r2, #0
 801a548:	dd03      	ble.n	801a552 <_dtoa_r+0xae2>
 801a54a:	2b39      	cmp	r3, #57	; 0x39
 801a54c:	d0ee      	beq.n	801a52c <_dtoa_r+0xabc>
 801a54e:	3301      	adds	r3, #1
 801a550:	e7c7      	b.n	801a4e2 <_dtoa_r+0xa72>
 801a552:	9a01      	ldr	r2, [sp, #4]
 801a554:	9907      	ldr	r1, [sp, #28]
 801a556:	f802 3c01 	strb.w	r3, [r2, #-1]
 801a55a:	428a      	cmp	r2, r1
 801a55c:	d02a      	beq.n	801a5b4 <_dtoa_r+0xb44>
 801a55e:	4659      	mov	r1, fp
 801a560:	2300      	movs	r3, #0
 801a562:	220a      	movs	r2, #10
 801a564:	4620      	mov	r0, r4
 801a566:	f000 fd73 	bl	801b050 <__multadd>
 801a56a:	45b8      	cmp	r8, r7
 801a56c:	4683      	mov	fp, r0
 801a56e:	f04f 0300 	mov.w	r3, #0
 801a572:	f04f 020a 	mov.w	r2, #10
 801a576:	4641      	mov	r1, r8
 801a578:	4620      	mov	r0, r4
 801a57a:	d107      	bne.n	801a58c <_dtoa_r+0xb1c>
 801a57c:	f000 fd68 	bl	801b050 <__multadd>
 801a580:	4680      	mov	r8, r0
 801a582:	4607      	mov	r7, r0
 801a584:	9b01      	ldr	r3, [sp, #4]
 801a586:	3301      	adds	r3, #1
 801a588:	9301      	str	r3, [sp, #4]
 801a58a:	e775      	b.n	801a478 <_dtoa_r+0xa08>
 801a58c:	f000 fd60 	bl	801b050 <__multadd>
 801a590:	4639      	mov	r1, r7
 801a592:	4680      	mov	r8, r0
 801a594:	2300      	movs	r3, #0
 801a596:	220a      	movs	r2, #10
 801a598:	4620      	mov	r0, r4
 801a59a:	f000 fd59 	bl	801b050 <__multadd>
 801a59e:	4607      	mov	r7, r0
 801a5a0:	e7f0      	b.n	801a584 <_dtoa_r+0xb14>
 801a5a2:	f1b9 0f00 	cmp.w	r9, #0
 801a5a6:	9a00      	ldr	r2, [sp, #0]
 801a5a8:	bfcc      	ite	gt
 801a5aa:	464d      	movgt	r5, r9
 801a5ac:	2501      	movle	r5, #1
 801a5ae:	4415      	add	r5, r2
 801a5b0:	f04f 0800 	mov.w	r8, #0
 801a5b4:	4659      	mov	r1, fp
 801a5b6:	2201      	movs	r2, #1
 801a5b8:	4620      	mov	r0, r4
 801a5ba:	9301      	str	r3, [sp, #4]
 801a5bc:	f000 ff42 	bl	801b444 <__lshift>
 801a5c0:	4631      	mov	r1, r6
 801a5c2:	4683      	mov	fp, r0
 801a5c4:	f000 ffaa 	bl	801b51c <__mcmp>
 801a5c8:	2800      	cmp	r0, #0
 801a5ca:	dcb2      	bgt.n	801a532 <_dtoa_r+0xac2>
 801a5cc:	d102      	bne.n	801a5d4 <_dtoa_r+0xb64>
 801a5ce:	9b01      	ldr	r3, [sp, #4]
 801a5d0:	07db      	lsls	r3, r3, #31
 801a5d2:	d4ae      	bmi.n	801a532 <_dtoa_r+0xac2>
 801a5d4:	462b      	mov	r3, r5
 801a5d6:	461d      	mov	r5, r3
 801a5d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801a5dc:	2a30      	cmp	r2, #48	; 0x30
 801a5de:	d0fa      	beq.n	801a5d6 <_dtoa_r+0xb66>
 801a5e0:	e6f7      	b.n	801a3d2 <_dtoa_r+0x962>
 801a5e2:	9a00      	ldr	r2, [sp, #0]
 801a5e4:	429a      	cmp	r2, r3
 801a5e6:	d1a5      	bne.n	801a534 <_dtoa_r+0xac4>
 801a5e8:	f10a 0a01 	add.w	sl, sl, #1
 801a5ec:	2331      	movs	r3, #49	; 0x31
 801a5ee:	e779      	b.n	801a4e4 <_dtoa_r+0xa74>
 801a5f0:	4b13      	ldr	r3, [pc, #76]	; (801a640 <_dtoa_r+0xbd0>)
 801a5f2:	f7ff baaf 	b.w	8019b54 <_dtoa_r+0xe4>
 801a5f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801a5f8:	2b00      	cmp	r3, #0
 801a5fa:	f47f aa86 	bne.w	8019b0a <_dtoa_r+0x9a>
 801a5fe:	4b11      	ldr	r3, [pc, #68]	; (801a644 <_dtoa_r+0xbd4>)
 801a600:	f7ff baa8 	b.w	8019b54 <_dtoa_r+0xe4>
 801a604:	f1b9 0f00 	cmp.w	r9, #0
 801a608:	dc03      	bgt.n	801a612 <_dtoa_r+0xba2>
 801a60a:	9b05      	ldr	r3, [sp, #20]
 801a60c:	2b02      	cmp	r3, #2
 801a60e:	f73f aec9 	bgt.w	801a3a4 <_dtoa_r+0x934>
 801a612:	9d00      	ldr	r5, [sp, #0]
 801a614:	4631      	mov	r1, r6
 801a616:	4658      	mov	r0, fp
 801a618:	f7ff f99c 	bl	8019954 <quorem>
 801a61c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 801a620:	f805 3b01 	strb.w	r3, [r5], #1
 801a624:	9a00      	ldr	r2, [sp, #0]
 801a626:	1aaa      	subs	r2, r5, r2
 801a628:	4591      	cmp	r9, r2
 801a62a:	ddba      	ble.n	801a5a2 <_dtoa_r+0xb32>
 801a62c:	4659      	mov	r1, fp
 801a62e:	2300      	movs	r3, #0
 801a630:	220a      	movs	r2, #10
 801a632:	4620      	mov	r0, r4
 801a634:	f000 fd0c 	bl	801b050 <__multadd>
 801a638:	4683      	mov	fp, r0
 801a63a:	e7eb      	b.n	801a614 <_dtoa_r+0xba4>
 801a63c:	08021150 	.word	0x08021150
 801a640:	08020fb8 	.word	0x08020fb8
 801a644:	080210e4 	.word	0x080210e4

0801a648 <__errno>:
 801a648:	4b01      	ldr	r3, [pc, #4]	; (801a650 <__errno+0x8>)
 801a64a:	6818      	ldr	r0, [r3, #0]
 801a64c:	4770      	bx	lr
 801a64e:	bf00      	nop
 801a650:	20000074 	.word	0x20000074

0801a654 <std>:
 801a654:	2300      	movs	r3, #0
 801a656:	b510      	push	{r4, lr}
 801a658:	4604      	mov	r4, r0
 801a65a:	e9c0 3300 	strd	r3, r3, [r0]
 801a65e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801a662:	6083      	str	r3, [r0, #8]
 801a664:	8181      	strh	r1, [r0, #12]
 801a666:	6643      	str	r3, [r0, #100]	; 0x64
 801a668:	81c2      	strh	r2, [r0, #14]
 801a66a:	6183      	str	r3, [r0, #24]
 801a66c:	4619      	mov	r1, r3
 801a66e:	2208      	movs	r2, #8
 801a670:	305c      	adds	r0, #92	; 0x5c
 801a672:	f7fd fc8f 	bl	8017f94 <memset>
 801a676:	4b05      	ldr	r3, [pc, #20]	; (801a68c <std+0x38>)
 801a678:	6263      	str	r3, [r4, #36]	; 0x24
 801a67a:	4b05      	ldr	r3, [pc, #20]	; (801a690 <std+0x3c>)
 801a67c:	62a3      	str	r3, [r4, #40]	; 0x28
 801a67e:	4b05      	ldr	r3, [pc, #20]	; (801a694 <std+0x40>)
 801a680:	62e3      	str	r3, [r4, #44]	; 0x2c
 801a682:	4b05      	ldr	r3, [pc, #20]	; (801a698 <std+0x44>)
 801a684:	6224      	str	r4, [r4, #32]
 801a686:	6323      	str	r3, [r4, #48]	; 0x30
 801a688:	bd10      	pop	{r4, pc}
 801a68a:	bf00      	nop
 801a68c:	0801bea1 	.word	0x0801bea1
 801a690:	0801bec3 	.word	0x0801bec3
 801a694:	0801befb 	.word	0x0801befb
 801a698:	0801bf1f 	.word	0x0801bf1f

0801a69c <_cleanup_r>:
 801a69c:	4901      	ldr	r1, [pc, #4]	; (801a6a4 <_cleanup_r+0x8>)
 801a69e:	f000 b8c1 	b.w	801a824 <_fwalk_reent>
 801a6a2:	bf00      	nop
 801a6a4:	0801c225 	.word	0x0801c225

0801a6a8 <__sfmoreglue>:
 801a6a8:	b570      	push	{r4, r5, r6, lr}
 801a6aa:	1e4a      	subs	r2, r1, #1
 801a6ac:	2568      	movs	r5, #104	; 0x68
 801a6ae:	4355      	muls	r5, r2
 801a6b0:	460e      	mov	r6, r1
 801a6b2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801a6b6:	f7fd fcc5 	bl	8018044 <_malloc_r>
 801a6ba:	4604      	mov	r4, r0
 801a6bc:	b140      	cbz	r0, 801a6d0 <__sfmoreglue+0x28>
 801a6be:	2100      	movs	r1, #0
 801a6c0:	e9c0 1600 	strd	r1, r6, [r0]
 801a6c4:	300c      	adds	r0, #12
 801a6c6:	60a0      	str	r0, [r4, #8]
 801a6c8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801a6cc:	f7fd fc62 	bl	8017f94 <memset>
 801a6d0:	4620      	mov	r0, r4
 801a6d2:	bd70      	pop	{r4, r5, r6, pc}

0801a6d4 <__sfp_lock_acquire>:
 801a6d4:	4801      	ldr	r0, [pc, #4]	; (801a6dc <__sfp_lock_acquire+0x8>)
 801a6d6:	f000 bc38 	b.w	801af4a <__retarget_lock_acquire_recursive>
 801a6da:	bf00      	nop
 801a6dc:	200071a0 	.word	0x200071a0

0801a6e0 <__sfp_lock_release>:
 801a6e0:	4801      	ldr	r0, [pc, #4]	; (801a6e8 <__sfp_lock_release+0x8>)
 801a6e2:	f000 bc33 	b.w	801af4c <__retarget_lock_release_recursive>
 801a6e6:	bf00      	nop
 801a6e8:	200071a0 	.word	0x200071a0

0801a6ec <__sinit_lock_acquire>:
 801a6ec:	4801      	ldr	r0, [pc, #4]	; (801a6f4 <__sinit_lock_acquire+0x8>)
 801a6ee:	f000 bc2c 	b.w	801af4a <__retarget_lock_acquire_recursive>
 801a6f2:	bf00      	nop
 801a6f4:	2000719b 	.word	0x2000719b

0801a6f8 <__sinit_lock_release>:
 801a6f8:	4801      	ldr	r0, [pc, #4]	; (801a700 <__sinit_lock_release+0x8>)
 801a6fa:	f000 bc27 	b.w	801af4c <__retarget_lock_release_recursive>
 801a6fe:	bf00      	nop
 801a700:	2000719b 	.word	0x2000719b

0801a704 <__sinit>:
 801a704:	b510      	push	{r4, lr}
 801a706:	4604      	mov	r4, r0
 801a708:	f7ff fff0 	bl	801a6ec <__sinit_lock_acquire>
 801a70c:	69a3      	ldr	r3, [r4, #24]
 801a70e:	b11b      	cbz	r3, 801a718 <__sinit+0x14>
 801a710:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a714:	f7ff bff0 	b.w	801a6f8 <__sinit_lock_release>
 801a718:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801a71c:	6523      	str	r3, [r4, #80]	; 0x50
 801a71e:	4b13      	ldr	r3, [pc, #76]	; (801a76c <__sinit+0x68>)
 801a720:	4a13      	ldr	r2, [pc, #76]	; (801a770 <__sinit+0x6c>)
 801a722:	681b      	ldr	r3, [r3, #0]
 801a724:	62a2      	str	r2, [r4, #40]	; 0x28
 801a726:	42a3      	cmp	r3, r4
 801a728:	bf04      	itt	eq
 801a72a:	2301      	moveq	r3, #1
 801a72c:	61a3      	streq	r3, [r4, #24]
 801a72e:	4620      	mov	r0, r4
 801a730:	f000 f820 	bl	801a774 <__sfp>
 801a734:	6060      	str	r0, [r4, #4]
 801a736:	4620      	mov	r0, r4
 801a738:	f000 f81c 	bl	801a774 <__sfp>
 801a73c:	60a0      	str	r0, [r4, #8]
 801a73e:	4620      	mov	r0, r4
 801a740:	f000 f818 	bl	801a774 <__sfp>
 801a744:	2200      	movs	r2, #0
 801a746:	60e0      	str	r0, [r4, #12]
 801a748:	2104      	movs	r1, #4
 801a74a:	6860      	ldr	r0, [r4, #4]
 801a74c:	f7ff ff82 	bl	801a654 <std>
 801a750:	68a0      	ldr	r0, [r4, #8]
 801a752:	2201      	movs	r2, #1
 801a754:	2109      	movs	r1, #9
 801a756:	f7ff ff7d 	bl	801a654 <std>
 801a75a:	68e0      	ldr	r0, [r4, #12]
 801a75c:	2202      	movs	r2, #2
 801a75e:	2112      	movs	r1, #18
 801a760:	f7ff ff78 	bl	801a654 <std>
 801a764:	2301      	movs	r3, #1
 801a766:	61a3      	str	r3, [r4, #24]
 801a768:	e7d2      	b.n	801a710 <__sinit+0xc>
 801a76a:	bf00      	nop
 801a76c:	08020fa4 	.word	0x08020fa4
 801a770:	0801a69d 	.word	0x0801a69d

0801a774 <__sfp>:
 801a774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a776:	4607      	mov	r7, r0
 801a778:	f7ff ffac 	bl	801a6d4 <__sfp_lock_acquire>
 801a77c:	4b1e      	ldr	r3, [pc, #120]	; (801a7f8 <__sfp+0x84>)
 801a77e:	681e      	ldr	r6, [r3, #0]
 801a780:	69b3      	ldr	r3, [r6, #24]
 801a782:	b913      	cbnz	r3, 801a78a <__sfp+0x16>
 801a784:	4630      	mov	r0, r6
 801a786:	f7ff ffbd 	bl	801a704 <__sinit>
 801a78a:	3648      	adds	r6, #72	; 0x48
 801a78c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801a790:	3b01      	subs	r3, #1
 801a792:	d503      	bpl.n	801a79c <__sfp+0x28>
 801a794:	6833      	ldr	r3, [r6, #0]
 801a796:	b30b      	cbz	r3, 801a7dc <__sfp+0x68>
 801a798:	6836      	ldr	r6, [r6, #0]
 801a79a:	e7f7      	b.n	801a78c <__sfp+0x18>
 801a79c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801a7a0:	b9d5      	cbnz	r5, 801a7d8 <__sfp+0x64>
 801a7a2:	4b16      	ldr	r3, [pc, #88]	; (801a7fc <__sfp+0x88>)
 801a7a4:	60e3      	str	r3, [r4, #12]
 801a7a6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801a7aa:	6665      	str	r5, [r4, #100]	; 0x64
 801a7ac:	f000 fbcc 	bl	801af48 <__retarget_lock_init_recursive>
 801a7b0:	f7ff ff96 	bl	801a6e0 <__sfp_lock_release>
 801a7b4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801a7b8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801a7bc:	6025      	str	r5, [r4, #0]
 801a7be:	61a5      	str	r5, [r4, #24]
 801a7c0:	2208      	movs	r2, #8
 801a7c2:	4629      	mov	r1, r5
 801a7c4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801a7c8:	f7fd fbe4 	bl	8017f94 <memset>
 801a7cc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801a7d0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801a7d4:	4620      	mov	r0, r4
 801a7d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a7d8:	3468      	adds	r4, #104	; 0x68
 801a7da:	e7d9      	b.n	801a790 <__sfp+0x1c>
 801a7dc:	2104      	movs	r1, #4
 801a7de:	4638      	mov	r0, r7
 801a7e0:	f7ff ff62 	bl	801a6a8 <__sfmoreglue>
 801a7e4:	4604      	mov	r4, r0
 801a7e6:	6030      	str	r0, [r6, #0]
 801a7e8:	2800      	cmp	r0, #0
 801a7ea:	d1d5      	bne.n	801a798 <__sfp+0x24>
 801a7ec:	f7ff ff78 	bl	801a6e0 <__sfp_lock_release>
 801a7f0:	230c      	movs	r3, #12
 801a7f2:	603b      	str	r3, [r7, #0]
 801a7f4:	e7ee      	b.n	801a7d4 <__sfp+0x60>
 801a7f6:	bf00      	nop
 801a7f8:	08020fa4 	.word	0x08020fa4
 801a7fc:	ffff0001 	.word	0xffff0001

0801a800 <fiprintf>:
 801a800:	b40e      	push	{r1, r2, r3}
 801a802:	b503      	push	{r0, r1, lr}
 801a804:	4601      	mov	r1, r0
 801a806:	ab03      	add	r3, sp, #12
 801a808:	4805      	ldr	r0, [pc, #20]	; (801a820 <fiprintf+0x20>)
 801a80a:	f853 2b04 	ldr.w	r2, [r3], #4
 801a80e:	6800      	ldr	r0, [r0, #0]
 801a810:	9301      	str	r3, [sp, #4]
 801a812:	f001 fa0b 	bl	801bc2c <_vfiprintf_r>
 801a816:	b002      	add	sp, #8
 801a818:	f85d eb04 	ldr.w	lr, [sp], #4
 801a81c:	b003      	add	sp, #12
 801a81e:	4770      	bx	lr
 801a820:	20000074 	.word	0x20000074

0801a824 <_fwalk_reent>:
 801a824:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a828:	4606      	mov	r6, r0
 801a82a:	4688      	mov	r8, r1
 801a82c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801a830:	2700      	movs	r7, #0
 801a832:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801a836:	f1b9 0901 	subs.w	r9, r9, #1
 801a83a:	d505      	bpl.n	801a848 <_fwalk_reent+0x24>
 801a83c:	6824      	ldr	r4, [r4, #0]
 801a83e:	2c00      	cmp	r4, #0
 801a840:	d1f7      	bne.n	801a832 <_fwalk_reent+0xe>
 801a842:	4638      	mov	r0, r7
 801a844:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a848:	89ab      	ldrh	r3, [r5, #12]
 801a84a:	2b01      	cmp	r3, #1
 801a84c:	d907      	bls.n	801a85e <_fwalk_reent+0x3a>
 801a84e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801a852:	3301      	adds	r3, #1
 801a854:	d003      	beq.n	801a85e <_fwalk_reent+0x3a>
 801a856:	4629      	mov	r1, r5
 801a858:	4630      	mov	r0, r6
 801a85a:	47c0      	blx	r8
 801a85c:	4307      	orrs	r7, r0
 801a85e:	3568      	adds	r5, #104	; 0x68
 801a860:	e7e9      	b.n	801a836 <_fwalk_reent+0x12>

0801a862 <rshift>:
 801a862:	6903      	ldr	r3, [r0, #16]
 801a864:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801a868:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a86c:	ea4f 1261 	mov.w	r2, r1, asr #5
 801a870:	f100 0414 	add.w	r4, r0, #20
 801a874:	dd45      	ble.n	801a902 <rshift+0xa0>
 801a876:	f011 011f 	ands.w	r1, r1, #31
 801a87a:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801a87e:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801a882:	d10c      	bne.n	801a89e <rshift+0x3c>
 801a884:	f100 0710 	add.w	r7, r0, #16
 801a888:	4629      	mov	r1, r5
 801a88a:	42b1      	cmp	r1, r6
 801a88c:	d334      	bcc.n	801a8f8 <rshift+0x96>
 801a88e:	1a9b      	subs	r3, r3, r2
 801a890:	009b      	lsls	r3, r3, #2
 801a892:	1eea      	subs	r2, r5, #3
 801a894:	4296      	cmp	r6, r2
 801a896:	bf38      	it	cc
 801a898:	2300      	movcc	r3, #0
 801a89a:	4423      	add	r3, r4
 801a89c:	e015      	b.n	801a8ca <rshift+0x68>
 801a89e:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801a8a2:	f1c1 0820 	rsb	r8, r1, #32
 801a8a6:	40cf      	lsrs	r7, r1
 801a8a8:	f105 0e04 	add.w	lr, r5, #4
 801a8ac:	46a1      	mov	r9, r4
 801a8ae:	4576      	cmp	r6, lr
 801a8b0:	46f4      	mov	ip, lr
 801a8b2:	d815      	bhi.n	801a8e0 <rshift+0x7e>
 801a8b4:	1a9b      	subs	r3, r3, r2
 801a8b6:	009a      	lsls	r2, r3, #2
 801a8b8:	3a04      	subs	r2, #4
 801a8ba:	3501      	adds	r5, #1
 801a8bc:	42ae      	cmp	r6, r5
 801a8be:	bf38      	it	cc
 801a8c0:	2200      	movcc	r2, #0
 801a8c2:	18a3      	adds	r3, r4, r2
 801a8c4:	50a7      	str	r7, [r4, r2]
 801a8c6:	b107      	cbz	r7, 801a8ca <rshift+0x68>
 801a8c8:	3304      	adds	r3, #4
 801a8ca:	1b1a      	subs	r2, r3, r4
 801a8cc:	42a3      	cmp	r3, r4
 801a8ce:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801a8d2:	bf08      	it	eq
 801a8d4:	2300      	moveq	r3, #0
 801a8d6:	6102      	str	r2, [r0, #16]
 801a8d8:	bf08      	it	eq
 801a8da:	6143      	streq	r3, [r0, #20]
 801a8dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a8e0:	f8dc c000 	ldr.w	ip, [ip]
 801a8e4:	fa0c fc08 	lsl.w	ip, ip, r8
 801a8e8:	ea4c 0707 	orr.w	r7, ip, r7
 801a8ec:	f849 7b04 	str.w	r7, [r9], #4
 801a8f0:	f85e 7b04 	ldr.w	r7, [lr], #4
 801a8f4:	40cf      	lsrs	r7, r1
 801a8f6:	e7da      	b.n	801a8ae <rshift+0x4c>
 801a8f8:	f851 cb04 	ldr.w	ip, [r1], #4
 801a8fc:	f847 cf04 	str.w	ip, [r7, #4]!
 801a900:	e7c3      	b.n	801a88a <rshift+0x28>
 801a902:	4623      	mov	r3, r4
 801a904:	e7e1      	b.n	801a8ca <rshift+0x68>

0801a906 <__hexdig_fun>:
 801a906:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801a90a:	2b09      	cmp	r3, #9
 801a90c:	d802      	bhi.n	801a914 <__hexdig_fun+0xe>
 801a90e:	3820      	subs	r0, #32
 801a910:	b2c0      	uxtb	r0, r0
 801a912:	4770      	bx	lr
 801a914:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801a918:	2b05      	cmp	r3, #5
 801a91a:	d801      	bhi.n	801a920 <__hexdig_fun+0x1a>
 801a91c:	3847      	subs	r0, #71	; 0x47
 801a91e:	e7f7      	b.n	801a910 <__hexdig_fun+0xa>
 801a920:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801a924:	2b05      	cmp	r3, #5
 801a926:	d801      	bhi.n	801a92c <__hexdig_fun+0x26>
 801a928:	3827      	subs	r0, #39	; 0x27
 801a92a:	e7f1      	b.n	801a910 <__hexdig_fun+0xa>
 801a92c:	2000      	movs	r0, #0
 801a92e:	4770      	bx	lr

0801a930 <__gethex>:
 801a930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a934:	ed2d 8b02 	vpush	{d8}
 801a938:	b089      	sub	sp, #36	; 0x24
 801a93a:	ee08 0a10 	vmov	s16, r0
 801a93e:	9304      	str	r3, [sp, #16]
 801a940:	4bbc      	ldr	r3, [pc, #752]	; (801ac34 <__gethex+0x304>)
 801a942:	681b      	ldr	r3, [r3, #0]
 801a944:	9301      	str	r3, [sp, #4]
 801a946:	4618      	mov	r0, r3
 801a948:	468b      	mov	fp, r1
 801a94a:	4690      	mov	r8, r2
 801a94c:	f7e5 fc4a 	bl	80001e4 <strlen>
 801a950:	9b01      	ldr	r3, [sp, #4]
 801a952:	f8db 2000 	ldr.w	r2, [fp]
 801a956:	4403      	add	r3, r0
 801a958:	4682      	mov	sl, r0
 801a95a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801a95e:	9305      	str	r3, [sp, #20]
 801a960:	1c93      	adds	r3, r2, #2
 801a962:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801a966:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801a96a:	32fe      	adds	r2, #254	; 0xfe
 801a96c:	18d1      	adds	r1, r2, r3
 801a96e:	461f      	mov	r7, r3
 801a970:	f813 0b01 	ldrb.w	r0, [r3], #1
 801a974:	9100      	str	r1, [sp, #0]
 801a976:	2830      	cmp	r0, #48	; 0x30
 801a978:	d0f8      	beq.n	801a96c <__gethex+0x3c>
 801a97a:	f7ff ffc4 	bl	801a906 <__hexdig_fun>
 801a97e:	4604      	mov	r4, r0
 801a980:	2800      	cmp	r0, #0
 801a982:	d13a      	bne.n	801a9fa <__gethex+0xca>
 801a984:	9901      	ldr	r1, [sp, #4]
 801a986:	4652      	mov	r2, sl
 801a988:	4638      	mov	r0, r7
 801a98a:	f7fe f8db 	bl	8018b44 <strncmp>
 801a98e:	4605      	mov	r5, r0
 801a990:	2800      	cmp	r0, #0
 801a992:	d168      	bne.n	801aa66 <__gethex+0x136>
 801a994:	f817 000a 	ldrb.w	r0, [r7, sl]
 801a998:	eb07 060a 	add.w	r6, r7, sl
 801a99c:	f7ff ffb3 	bl	801a906 <__hexdig_fun>
 801a9a0:	2800      	cmp	r0, #0
 801a9a2:	d062      	beq.n	801aa6a <__gethex+0x13a>
 801a9a4:	4633      	mov	r3, r6
 801a9a6:	7818      	ldrb	r0, [r3, #0]
 801a9a8:	2830      	cmp	r0, #48	; 0x30
 801a9aa:	461f      	mov	r7, r3
 801a9ac:	f103 0301 	add.w	r3, r3, #1
 801a9b0:	d0f9      	beq.n	801a9a6 <__gethex+0x76>
 801a9b2:	f7ff ffa8 	bl	801a906 <__hexdig_fun>
 801a9b6:	2301      	movs	r3, #1
 801a9b8:	fab0 f480 	clz	r4, r0
 801a9bc:	0964      	lsrs	r4, r4, #5
 801a9be:	4635      	mov	r5, r6
 801a9c0:	9300      	str	r3, [sp, #0]
 801a9c2:	463a      	mov	r2, r7
 801a9c4:	4616      	mov	r6, r2
 801a9c6:	3201      	adds	r2, #1
 801a9c8:	7830      	ldrb	r0, [r6, #0]
 801a9ca:	f7ff ff9c 	bl	801a906 <__hexdig_fun>
 801a9ce:	2800      	cmp	r0, #0
 801a9d0:	d1f8      	bne.n	801a9c4 <__gethex+0x94>
 801a9d2:	9901      	ldr	r1, [sp, #4]
 801a9d4:	4652      	mov	r2, sl
 801a9d6:	4630      	mov	r0, r6
 801a9d8:	f7fe f8b4 	bl	8018b44 <strncmp>
 801a9dc:	b980      	cbnz	r0, 801aa00 <__gethex+0xd0>
 801a9de:	b94d      	cbnz	r5, 801a9f4 <__gethex+0xc4>
 801a9e0:	eb06 050a 	add.w	r5, r6, sl
 801a9e4:	462a      	mov	r2, r5
 801a9e6:	4616      	mov	r6, r2
 801a9e8:	3201      	adds	r2, #1
 801a9ea:	7830      	ldrb	r0, [r6, #0]
 801a9ec:	f7ff ff8b 	bl	801a906 <__hexdig_fun>
 801a9f0:	2800      	cmp	r0, #0
 801a9f2:	d1f8      	bne.n	801a9e6 <__gethex+0xb6>
 801a9f4:	1bad      	subs	r5, r5, r6
 801a9f6:	00ad      	lsls	r5, r5, #2
 801a9f8:	e004      	b.n	801aa04 <__gethex+0xd4>
 801a9fa:	2400      	movs	r4, #0
 801a9fc:	4625      	mov	r5, r4
 801a9fe:	e7e0      	b.n	801a9c2 <__gethex+0x92>
 801aa00:	2d00      	cmp	r5, #0
 801aa02:	d1f7      	bne.n	801a9f4 <__gethex+0xc4>
 801aa04:	7833      	ldrb	r3, [r6, #0]
 801aa06:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801aa0a:	2b50      	cmp	r3, #80	; 0x50
 801aa0c:	d13b      	bne.n	801aa86 <__gethex+0x156>
 801aa0e:	7873      	ldrb	r3, [r6, #1]
 801aa10:	2b2b      	cmp	r3, #43	; 0x2b
 801aa12:	d02c      	beq.n	801aa6e <__gethex+0x13e>
 801aa14:	2b2d      	cmp	r3, #45	; 0x2d
 801aa16:	d02e      	beq.n	801aa76 <__gethex+0x146>
 801aa18:	1c71      	adds	r1, r6, #1
 801aa1a:	f04f 0900 	mov.w	r9, #0
 801aa1e:	7808      	ldrb	r0, [r1, #0]
 801aa20:	f7ff ff71 	bl	801a906 <__hexdig_fun>
 801aa24:	1e43      	subs	r3, r0, #1
 801aa26:	b2db      	uxtb	r3, r3
 801aa28:	2b18      	cmp	r3, #24
 801aa2a:	d82c      	bhi.n	801aa86 <__gethex+0x156>
 801aa2c:	f1a0 0210 	sub.w	r2, r0, #16
 801aa30:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801aa34:	f7ff ff67 	bl	801a906 <__hexdig_fun>
 801aa38:	1e43      	subs	r3, r0, #1
 801aa3a:	b2db      	uxtb	r3, r3
 801aa3c:	2b18      	cmp	r3, #24
 801aa3e:	d91d      	bls.n	801aa7c <__gethex+0x14c>
 801aa40:	f1b9 0f00 	cmp.w	r9, #0
 801aa44:	d000      	beq.n	801aa48 <__gethex+0x118>
 801aa46:	4252      	negs	r2, r2
 801aa48:	4415      	add	r5, r2
 801aa4a:	f8cb 1000 	str.w	r1, [fp]
 801aa4e:	b1e4      	cbz	r4, 801aa8a <__gethex+0x15a>
 801aa50:	9b00      	ldr	r3, [sp, #0]
 801aa52:	2b00      	cmp	r3, #0
 801aa54:	bf14      	ite	ne
 801aa56:	2700      	movne	r7, #0
 801aa58:	2706      	moveq	r7, #6
 801aa5a:	4638      	mov	r0, r7
 801aa5c:	b009      	add	sp, #36	; 0x24
 801aa5e:	ecbd 8b02 	vpop	{d8}
 801aa62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aa66:	463e      	mov	r6, r7
 801aa68:	4625      	mov	r5, r4
 801aa6a:	2401      	movs	r4, #1
 801aa6c:	e7ca      	b.n	801aa04 <__gethex+0xd4>
 801aa6e:	f04f 0900 	mov.w	r9, #0
 801aa72:	1cb1      	adds	r1, r6, #2
 801aa74:	e7d3      	b.n	801aa1e <__gethex+0xee>
 801aa76:	f04f 0901 	mov.w	r9, #1
 801aa7a:	e7fa      	b.n	801aa72 <__gethex+0x142>
 801aa7c:	230a      	movs	r3, #10
 801aa7e:	fb03 0202 	mla	r2, r3, r2, r0
 801aa82:	3a10      	subs	r2, #16
 801aa84:	e7d4      	b.n	801aa30 <__gethex+0x100>
 801aa86:	4631      	mov	r1, r6
 801aa88:	e7df      	b.n	801aa4a <__gethex+0x11a>
 801aa8a:	1bf3      	subs	r3, r6, r7
 801aa8c:	3b01      	subs	r3, #1
 801aa8e:	4621      	mov	r1, r4
 801aa90:	2b07      	cmp	r3, #7
 801aa92:	dc0b      	bgt.n	801aaac <__gethex+0x17c>
 801aa94:	ee18 0a10 	vmov	r0, s16
 801aa98:	f000 fa78 	bl	801af8c <_Balloc>
 801aa9c:	4604      	mov	r4, r0
 801aa9e:	b940      	cbnz	r0, 801aab2 <__gethex+0x182>
 801aaa0:	4b65      	ldr	r3, [pc, #404]	; (801ac38 <__gethex+0x308>)
 801aaa2:	4602      	mov	r2, r0
 801aaa4:	21de      	movs	r1, #222	; 0xde
 801aaa6:	4865      	ldr	r0, [pc, #404]	; (801ac3c <__gethex+0x30c>)
 801aaa8:	f7fe ff36 	bl	8019918 <__assert_func>
 801aaac:	3101      	adds	r1, #1
 801aaae:	105b      	asrs	r3, r3, #1
 801aab0:	e7ee      	b.n	801aa90 <__gethex+0x160>
 801aab2:	f100 0914 	add.w	r9, r0, #20
 801aab6:	f04f 0b00 	mov.w	fp, #0
 801aaba:	f1ca 0301 	rsb	r3, sl, #1
 801aabe:	f8cd 9008 	str.w	r9, [sp, #8]
 801aac2:	f8cd b000 	str.w	fp, [sp]
 801aac6:	9306      	str	r3, [sp, #24]
 801aac8:	42b7      	cmp	r7, r6
 801aaca:	d340      	bcc.n	801ab4e <__gethex+0x21e>
 801aacc:	9802      	ldr	r0, [sp, #8]
 801aace:	9b00      	ldr	r3, [sp, #0]
 801aad0:	f840 3b04 	str.w	r3, [r0], #4
 801aad4:	eba0 0009 	sub.w	r0, r0, r9
 801aad8:	1080      	asrs	r0, r0, #2
 801aada:	0146      	lsls	r6, r0, #5
 801aadc:	6120      	str	r0, [r4, #16]
 801aade:	4618      	mov	r0, r3
 801aae0:	f000 fb4a 	bl	801b178 <__hi0bits>
 801aae4:	1a30      	subs	r0, r6, r0
 801aae6:	f8d8 6000 	ldr.w	r6, [r8]
 801aaea:	42b0      	cmp	r0, r6
 801aaec:	dd63      	ble.n	801abb6 <__gethex+0x286>
 801aaee:	1b87      	subs	r7, r0, r6
 801aaf0:	4639      	mov	r1, r7
 801aaf2:	4620      	mov	r0, r4
 801aaf4:	f000 fee4 	bl	801b8c0 <__any_on>
 801aaf8:	4682      	mov	sl, r0
 801aafa:	b1a8      	cbz	r0, 801ab28 <__gethex+0x1f8>
 801aafc:	1e7b      	subs	r3, r7, #1
 801aafe:	1159      	asrs	r1, r3, #5
 801ab00:	f003 021f 	and.w	r2, r3, #31
 801ab04:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 801ab08:	f04f 0a01 	mov.w	sl, #1
 801ab0c:	fa0a f202 	lsl.w	r2, sl, r2
 801ab10:	420a      	tst	r2, r1
 801ab12:	d009      	beq.n	801ab28 <__gethex+0x1f8>
 801ab14:	4553      	cmp	r3, sl
 801ab16:	dd05      	ble.n	801ab24 <__gethex+0x1f4>
 801ab18:	1eb9      	subs	r1, r7, #2
 801ab1a:	4620      	mov	r0, r4
 801ab1c:	f000 fed0 	bl	801b8c0 <__any_on>
 801ab20:	2800      	cmp	r0, #0
 801ab22:	d145      	bne.n	801abb0 <__gethex+0x280>
 801ab24:	f04f 0a02 	mov.w	sl, #2
 801ab28:	4639      	mov	r1, r7
 801ab2a:	4620      	mov	r0, r4
 801ab2c:	f7ff fe99 	bl	801a862 <rshift>
 801ab30:	443d      	add	r5, r7
 801ab32:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801ab36:	42ab      	cmp	r3, r5
 801ab38:	da4c      	bge.n	801abd4 <__gethex+0x2a4>
 801ab3a:	ee18 0a10 	vmov	r0, s16
 801ab3e:	4621      	mov	r1, r4
 801ab40:	f000 fa64 	bl	801b00c <_Bfree>
 801ab44:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801ab46:	2300      	movs	r3, #0
 801ab48:	6013      	str	r3, [r2, #0]
 801ab4a:	27a3      	movs	r7, #163	; 0xa3
 801ab4c:	e785      	b.n	801aa5a <__gethex+0x12a>
 801ab4e:	1e73      	subs	r3, r6, #1
 801ab50:	9a05      	ldr	r2, [sp, #20]
 801ab52:	9303      	str	r3, [sp, #12]
 801ab54:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801ab58:	4293      	cmp	r3, r2
 801ab5a:	d019      	beq.n	801ab90 <__gethex+0x260>
 801ab5c:	f1bb 0f20 	cmp.w	fp, #32
 801ab60:	d107      	bne.n	801ab72 <__gethex+0x242>
 801ab62:	9b02      	ldr	r3, [sp, #8]
 801ab64:	9a00      	ldr	r2, [sp, #0]
 801ab66:	f843 2b04 	str.w	r2, [r3], #4
 801ab6a:	9302      	str	r3, [sp, #8]
 801ab6c:	2300      	movs	r3, #0
 801ab6e:	9300      	str	r3, [sp, #0]
 801ab70:	469b      	mov	fp, r3
 801ab72:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 801ab76:	f7ff fec6 	bl	801a906 <__hexdig_fun>
 801ab7a:	9b00      	ldr	r3, [sp, #0]
 801ab7c:	f000 000f 	and.w	r0, r0, #15
 801ab80:	fa00 f00b 	lsl.w	r0, r0, fp
 801ab84:	4303      	orrs	r3, r0
 801ab86:	9300      	str	r3, [sp, #0]
 801ab88:	f10b 0b04 	add.w	fp, fp, #4
 801ab8c:	9b03      	ldr	r3, [sp, #12]
 801ab8e:	e00d      	b.n	801abac <__gethex+0x27c>
 801ab90:	9b03      	ldr	r3, [sp, #12]
 801ab92:	9a06      	ldr	r2, [sp, #24]
 801ab94:	4413      	add	r3, r2
 801ab96:	42bb      	cmp	r3, r7
 801ab98:	d3e0      	bcc.n	801ab5c <__gethex+0x22c>
 801ab9a:	4618      	mov	r0, r3
 801ab9c:	9901      	ldr	r1, [sp, #4]
 801ab9e:	9307      	str	r3, [sp, #28]
 801aba0:	4652      	mov	r2, sl
 801aba2:	f7fd ffcf 	bl	8018b44 <strncmp>
 801aba6:	9b07      	ldr	r3, [sp, #28]
 801aba8:	2800      	cmp	r0, #0
 801abaa:	d1d7      	bne.n	801ab5c <__gethex+0x22c>
 801abac:	461e      	mov	r6, r3
 801abae:	e78b      	b.n	801aac8 <__gethex+0x198>
 801abb0:	f04f 0a03 	mov.w	sl, #3
 801abb4:	e7b8      	b.n	801ab28 <__gethex+0x1f8>
 801abb6:	da0a      	bge.n	801abce <__gethex+0x29e>
 801abb8:	1a37      	subs	r7, r6, r0
 801abba:	4621      	mov	r1, r4
 801abbc:	ee18 0a10 	vmov	r0, s16
 801abc0:	463a      	mov	r2, r7
 801abc2:	f000 fc3f 	bl	801b444 <__lshift>
 801abc6:	1bed      	subs	r5, r5, r7
 801abc8:	4604      	mov	r4, r0
 801abca:	f100 0914 	add.w	r9, r0, #20
 801abce:	f04f 0a00 	mov.w	sl, #0
 801abd2:	e7ae      	b.n	801ab32 <__gethex+0x202>
 801abd4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801abd8:	42a8      	cmp	r0, r5
 801abda:	dd72      	ble.n	801acc2 <__gethex+0x392>
 801abdc:	1b45      	subs	r5, r0, r5
 801abde:	42ae      	cmp	r6, r5
 801abe0:	dc36      	bgt.n	801ac50 <__gethex+0x320>
 801abe2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801abe6:	2b02      	cmp	r3, #2
 801abe8:	d02a      	beq.n	801ac40 <__gethex+0x310>
 801abea:	2b03      	cmp	r3, #3
 801abec:	d02c      	beq.n	801ac48 <__gethex+0x318>
 801abee:	2b01      	cmp	r3, #1
 801abf0:	d115      	bne.n	801ac1e <__gethex+0x2ee>
 801abf2:	42ae      	cmp	r6, r5
 801abf4:	d113      	bne.n	801ac1e <__gethex+0x2ee>
 801abf6:	2e01      	cmp	r6, #1
 801abf8:	d10b      	bne.n	801ac12 <__gethex+0x2e2>
 801abfa:	9a04      	ldr	r2, [sp, #16]
 801abfc:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801ac00:	6013      	str	r3, [r2, #0]
 801ac02:	2301      	movs	r3, #1
 801ac04:	6123      	str	r3, [r4, #16]
 801ac06:	f8c9 3000 	str.w	r3, [r9]
 801ac0a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801ac0c:	2762      	movs	r7, #98	; 0x62
 801ac0e:	601c      	str	r4, [r3, #0]
 801ac10:	e723      	b.n	801aa5a <__gethex+0x12a>
 801ac12:	1e71      	subs	r1, r6, #1
 801ac14:	4620      	mov	r0, r4
 801ac16:	f000 fe53 	bl	801b8c0 <__any_on>
 801ac1a:	2800      	cmp	r0, #0
 801ac1c:	d1ed      	bne.n	801abfa <__gethex+0x2ca>
 801ac1e:	ee18 0a10 	vmov	r0, s16
 801ac22:	4621      	mov	r1, r4
 801ac24:	f000 f9f2 	bl	801b00c <_Bfree>
 801ac28:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801ac2a:	2300      	movs	r3, #0
 801ac2c:	6013      	str	r3, [r2, #0]
 801ac2e:	2750      	movs	r7, #80	; 0x50
 801ac30:	e713      	b.n	801aa5a <__gethex+0x12a>
 801ac32:	bf00      	nop
 801ac34:	08021230 	.word	0x08021230
 801ac38:	08021150 	.word	0x08021150
 801ac3c:	080211c4 	.word	0x080211c4
 801ac40:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801ac42:	2b00      	cmp	r3, #0
 801ac44:	d1eb      	bne.n	801ac1e <__gethex+0x2ee>
 801ac46:	e7d8      	b.n	801abfa <__gethex+0x2ca>
 801ac48:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801ac4a:	2b00      	cmp	r3, #0
 801ac4c:	d1d5      	bne.n	801abfa <__gethex+0x2ca>
 801ac4e:	e7e6      	b.n	801ac1e <__gethex+0x2ee>
 801ac50:	1e6f      	subs	r7, r5, #1
 801ac52:	f1ba 0f00 	cmp.w	sl, #0
 801ac56:	d131      	bne.n	801acbc <__gethex+0x38c>
 801ac58:	b127      	cbz	r7, 801ac64 <__gethex+0x334>
 801ac5a:	4639      	mov	r1, r7
 801ac5c:	4620      	mov	r0, r4
 801ac5e:	f000 fe2f 	bl	801b8c0 <__any_on>
 801ac62:	4682      	mov	sl, r0
 801ac64:	117b      	asrs	r3, r7, #5
 801ac66:	2101      	movs	r1, #1
 801ac68:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 801ac6c:	f007 071f 	and.w	r7, r7, #31
 801ac70:	fa01 f707 	lsl.w	r7, r1, r7
 801ac74:	421f      	tst	r7, r3
 801ac76:	4629      	mov	r1, r5
 801ac78:	4620      	mov	r0, r4
 801ac7a:	bf18      	it	ne
 801ac7c:	f04a 0a02 	orrne.w	sl, sl, #2
 801ac80:	1b76      	subs	r6, r6, r5
 801ac82:	f7ff fdee 	bl	801a862 <rshift>
 801ac86:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801ac8a:	2702      	movs	r7, #2
 801ac8c:	f1ba 0f00 	cmp.w	sl, #0
 801ac90:	d048      	beq.n	801ad24 <__gethex+0x3f4>
 801ac92:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801ac96:	2b02      	cmp	r3, #2
 801ac98:	d015      	beq.n	801acc6 <__gethex+0x396>
 801ac9a:	2b03      	cmp	r3, #3
 801ac9c:	d017      	beq.n	801acce <__gethex+0x39e>
 801ac9e:	2b01      	cmp	r3, #1
 801aca0:	d109      	bne.n	801acb6 <__gethex+0x386>
 801aca2:	f01a 0f02 	tst.w	sl, #2
 801aca6:	d006      	beq.n	801acb6 <__gethex+0x386>
 801aca8:	f8d9 0000 	ldr.w	r0, [r9]
 801acac:	ea4a 0a00 	orr.w	sl, sl, r0
 801acb0:	f01a 0f01 	tst.w	sl, #1
 801acb4:	d10e      	bne.n	801acd4 <__gethex+0x3a4>
 801acb6:	f047 0710 	orr.w	r7, r7, #16
 801acba:	e033      	b.n	801ad24 <__gethex+0x3f4>
 801acbc:	f04f 0a01 	mov.w	sl, #1
 801acc0:	e7d0      	b.n	801ac64 <__gethex+0x334>
 801acc2:	2701      	movs	r7, #1
 801acc4:	e7e2      	b.n	801ac8c <__gethex+0x35c>
 801acc6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801acc8:	f1c3 0301 	rsb	r3, r3, #1
 801accc:	9315      	str	r3, [sp, #84]	; 0x54
 801acce:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801acd0:	2b00      	cmp	r3, #0
 801acd2:	d0f0      	beq.n	801acb6 <__gethex+0x386>
 801acd4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801acd8:	f104 0314 	add.w	r3, r4, #20
 801acdc:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801ace0:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801ace4:	f04f 0c00 	mov.w	ip, #0
 801ace8:	4618      	mov	r0, r3
 801acea:	f853 2b04 	ldr.w	r2, [r3], #4
 801acee:	f1b2 3fff 	cmp.w	r2, #4294967295
 801acf2:	d01c      	beq.n	801ad2e <__gethex+0x3fe>
 801acf4:	3201      	adds	r2, #1
 801acf6:	6002      	str	r2, [r0, #0]
 801acf8:	2f02      	cmp	r7, #2
 801acfa:	f104 0314 	add.w	r3, r4, #20
 801acfe:	d13f      	bne.n	801ad80 <__gethex+0x450>
 801ad00:	f8d8 2000 	ldr.w	r2, [r8]
 801ad04:	3a01      	subs	r2, #1
 801ad06:	42b2      	cmp	r2, r6
 801ad08:	d10a      	bne.n	801ad20 <__gethex+0x3f0>
 801ad0a:	1171      	asrs	r1, r6, #5
 801ad0c:	2201      	movs	r2, #1
 801ad0e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801ad12:	f006 061f 	and.w	r6, r6, #31
 801ad16:	fa02 f606 	lsl.w	r6, r2, r6
 801ad1a:	421e      	tst	r6, r3
 801ad1c:	bf18      	it	ne
 801ad1e:	4617      	movne	r7, r2
 801ad20:	f047 0720 	orr.w	r7, r7, #32
 801ad24:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801ad26:	601c      	str	r4, [r3, #0]
 801ad28:	9b04      	ldr	r3, [sp, #16]
 801ad2a:	601d      	str	r5, [r3, #0]
 801ad2c:	e695      	b.n	801aa5a <__gethex+0x12a>
 801ad2e:	4299      	cmp	r1, r3
 801ad30:	f843 cc04 	str.w	ip, [r3, #-4]
 801ad34:	d8d8      	bhi.n	801ace8 <__gethex+0x3b8>
 801ad36:	68a3      	ldr	r3, [r4, #8]
 801ad38:	459b      	cmp	fp, r3
 801ad3a:	db19      	blt.n	801ad70 <__gethex+0x440>
 801ad3c:	6861      	ldr	r1, [r4, #4]
 801ad3e:	ee18 0a10 	vmov	r0, s16
 801ad42:	3101      	adds	r1, #1
 801ad44:	f000 f922 	bl	801af8c <_Balloc>
 801ad48:	4681      	mov	r9, r0
 801ad4a:	b918      	cbnz	r0, 801ad54 <__gethex+0x424>
 801ad4c:	4b1a      	ldr	r3, [pc, #104]	; (801adb8 <__gethex+0x488>)
 801ad4e:	4602      	mov	r2, r0
 801ad50:	2184      	movs	r1, #132	; 0x84
 801ad52:	e6a8      	b.n	801aaa6 <__gethex+0x176>
 801ad54:	6922      	ldr	r2, [r4, #16]
 801ad56:	3202      	adds	r2, #2
 801ad58:	f104 010c 	add.w	r1, r4, #12
 801ad5c:	0092      	lsls	r2, r2, #2
 801ad5e:	300c      	adds	r0, #12
 801ad60:	f7fd f8f0 	bl	8017f44 <memcpy>
 801ad64:	4621      	mov	r1, r4
 801ad66:	ee18 0a10 	vmov	r0, s16
 801ad6a:	f000 f94f 	bl	801b00c <_Bfree>
 801ad6e:	464c      	mov	r4, r9
 801ad70:	6923      	ldr	r3, [r4, #16]
 801ad72:	1c5a      	adds	r2, r3, #1
 801ad74:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801ad78:	6122      	str	r2, [r4, #16]
 801ad7a:	2201      	movs	r2, #1
 801ad7c:	615a      	str	r2, [r3, #20]
 801ad7e:	e7bb      	b.n	801acf8 <__gethex+0x3c8>
 801ad80:	6922      	ldr	r2, [r4, #16]
 801ad82:	455a      	cmp	r2, fp
 801ad84:	dd0b      	ble.n	801ad9e <__gethex+0x46e>
 801ad86:	2101      	movs	r1, #1
 801ad88:	4620      	mov	r0, r4
 801ad8a:	f7ff fd6a 	bl	801a862 <rshift>
 801ad8e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801ad92:	3501      	adds	r5, #1
 801ad94:	42ab      	cmp	r3, r5
 801ad96:	f6ff aed0 	blt.w	801ab3a <__gethex+0x20a>
 801ad9a:	2701      	movs	r7, #1
 801ad9c:	e7c0      	b.n	801ad20 <__gethex+0x3f0>
 801ad9e:	f016 061f 	ands.w	r6, r6, #31
 801ada2:	d0fa      	beq.n	801ad9a <__gethex+0x46a>
 801ada4:	449a      	add	sl, r3
 801ada6:	f1c6 0620 	rsb	r6, r6, #32
 801adaa:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 801adae:	f000 f9e3 	bl	801b178 <__hi0bits>
 801adb2:	42b0      	cmp	r0, r6
 801adb4:	dbe7      	blt.n	801ad86 <__gethex+0x456>
 801adb6:	e7f0      	b.n	801ad9a <__gethex+0x46a>
 801adb8:	08021150 	.word	0x08021150

0801adbc <L_shift>:
 801adbc:	f1c2 0208 	rsb	r2, r2, #8
 801adc0:	0092      	lsls	r2, r2, #2
 801adc2:	b570      	push	{r4, r5, r6, lr}
 801adc4:	f1c2 0620 	rsb	r6, r2, #32
 801adc8:	6843      	ldr	r3, [r0, #4]
 801adca:	6804      	ldr	r4, [r0, #0]
 801adcc:	fa03 f506 	lsl.w	r5, r3, r6
 801add0:	432c      	orrs	r4, r5
 801add2:	40d3      	lsrs	r3, r2
 801add4:	6004      	str	r4, [r0, #0]
 801add6:	f840 3f04 	str.w	r3, [r0, #4]!
 801adda:	4288      	cmp	r0, r1
 801addc:	d3f4      	bcc.n	801adc8 <L_shift+0xc>
 801adde:	bd70      	pop	{r4, r5, r6, pc}

0801ade0 <__match>:
 801ade0:	b530      	push	{r4, r5, lr}
 801ade2:	6803      	ldr	r3, [r0, #0]
 801ade4:	3301      	adds	r3, #1
 801ade6:	f811 4b01 	ldrb.w	r4, [r1], #1
 801adea:	b914      	cbnz	r4, 801adf2 <__match+0x12>
 801adec:	6003      	str	r3, [r0, #0]
 801adee:	2001      	movs	r0, #1
 801adf0:	bd30      	pop	{r4, r5, pc}
 801adf2:	f813 2b01 	ldrb.w	r2, [r3], #1
 801adf6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801adfa:	2d19      	cmp	r5, #25
 801adfc:	bf98      	it	ls
 801adfe:	3220      	addls	r2, #32
 801ae00:	42a2      	cmp	r2, r4
 801ae02:	d0f0      	beq.n	801ade6 <__match+0x6>
 801ae04:	2000      	movs	r0, #0
 801ae06:	e7f3      	b.n	801adf0 <__match+0x10>

0801ae08 <__hexnan>:
 801ae08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ae0c:	680b      	ldr	r3, [r1, #0]
 801ae0e:	6801      	ldr	r1, [r0, #0]
 801ae10:	115e      	asrs	r6, r3, #5
 801ae12:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801ae16:	f013 031f 	ands.w	r3, r3, #31
 801ae1a:	b087      	sub	sp, #28
 801ae1c:	bf18      	it	ne
 801ae1e:	3604      	addne	r6, #4
 801ae20:	2500      	movs	r5, #0
 801ae22:	1f37      	subs	r7, r6, #4
 801ae24:	4682      	mov	sl, r0
 801ae26:	4690      	mov	r8, r2
 801ae28:	9301      	str	r3, [sp, #4]
 801ae2a:	f846 5c04 	str.w	r5, [r6, #-4]
 801ae2e:	46b9      	mov	r9, r7
 801ae30:	463c      	mov	r4, r7
 801ae32:	9502      	str	r5, [sp, #8]
 801ae34:	46ab      	mov	fp, r5
 801ae36:	784a      	ldrb	r2, [r1, #1]
 801ae38:	1c4b      	adds	r3, r1, #1
 801ae3a:	9303      	str	r3, [sp, #12]
 801ae3c:	b342      	cbz	r2, 801ae90 <__hexnan+0x88>
 801ae3e:	4610      	mov	r0, r2
 801ae40:	9105      	str	r1, [sp, #20]
 801ae42:	9204      	str	r2, [sp, #16]
 801ae44:	f7ff fd5f 	bl	801a906 <__hexdig_fun>
 801ae48:	2800      	cmp	r0, #0
 801ae4a:	d14f      	bne.n	801aeec <__hexnan+0xe4>
 801ae4c:	9a04      	ldr	r2, [sp, #16]
 801ae4e:	9905      	ldr	r1, [sp, #20]
 801ae50:	2a20      	cmp	r2, #32
 801ae52:	d818      	bhi.n	801ae86 <__hexnan+0x7e>
 801ae54:	9b02      	ldr	r3, [sp, #8]
 801ae56:	459b      	cmp	fp, r3
 801ae58:	dd13      	ble.n	801ae82 <__hexnan+0x7a>
 801ae5a:	454c      	cmp	r4, r9
 801ae5c:	d206      	bcs.n	801ae6c <__hexnan+0x64>
 801ae5e:	2d07      	cmp	r5, #7
 801ae60:	dc04      	bgt.n	801ae6c <__hexnan+0x64>
 801ae62:	462a      	mov	r2, r5
 801ae64:	4649      	mov	r1, r9
 801ae66:	4620      	mov	r0, r4
 801ae68:	f7ff ffa8 	bl	801adbc <L_shift>
 801ae6c:	4544      	cmp	r4, r8
 801ae6e:	d950      	bls.n	801af12 <__hexnan+0x10a>
 801ae70:	2300      	movs	r3, #0
 801ae72:	f1a4 0904 	sub.w	r9, r4, #4
 801ae76:	f844 3c04 	str.w	r3, [r4, #-4]
 801ae7a:	f8cd b008 	str.w	fp, [sp, #8]
 801ae7e:	464c      	mov	r4, r9
 801ae80:	461d      	mov	r5, r3
 801ae82:	9903      	ldr	r1, [sp, #12]
 801ae84:	e7d7      	b.n	801ae36 <__hexnan+0x2e>
 801ae86:	2a29      	cmp	r2, #41	; 0x29
 801ae88:	d156      	bne.n	801af38 <__hexnan+0x130>
 801ae8a:	3102      	adds	r1, #2
 801ae8c:	f8ca 1000 	str.w	r1, [sl]
 801ae90:	f1bb 0f00 	cmp.w	fp, #0
 801ae94:	d050      	beq.n	801af38 <__hexnan+0x130>
 801ae96:	454c      	cmp	r4, r9
 801ae98:	d206      	bcs.n	801aea8 <__hexnan+0xa0>
 801ae9a:	2d07      	cmp	r5, #7
 801ae9c:	dc04      	bgt.n	801aea8 <__hexnan+0xa0>
 801ae9e:	462a      	mov	r2, r5
 801aea0:	4649      	mov	r1, r9
 801aea2:	4620      	mov	r0, r4
 801aea4:	f7ff ff8a 	bl	801adbc <L_shift>
 801aea8:	4544      	cmp	r4, r8
 801aeaa:	d934      	bls.n	801af16 <__hexnan+0x10e>
 801aeac:	f1a8 0204 	sub.w	r2, r8, #4
 801aeb0:	4623      	mov	r3, r4
 801aeb2:	f853 1b04 	ldr.w	r1, [r3], #4
 801aeb6:	f842 1f04 	str.w	r1, [r2, #4]!
 801aeba:	429f      	cmp	r7, r3
 801aebc:	d2f9      	bcs.n	801aeb2 <__hexnan+0xaa>
 801aebe:	1b3b      	subs	r3, r7, r4
 801aec0:	f023 0303 	bic.w	r3, r3, #3
 801aec4:	3304      	adds	r3, #4
 801aec6:	3401      	adds	r4, #1
 801aec8:	3e03      	subs	r6, #3
 801aeca:	42b4      	cmp	r4, r6
 801aecc:	bf88      	it	hi
 801aece:	2304      	movhi	r3, #4
 801aed0:	4443      	add	r3, r8
 801aed2:	2200      	movs	r2, #0
 801aed4:	f843 2b04 	str.w	r2, [r3], #4
 801aed8:	429f      	cmp	r7, r3
 801aeda:	d2fb      	bcs.n	801aed4 <__hexnan+0xcc>
 801aedc:	683b      	ldr	r3, [r7, #0]
 801aede:	b91b      	cbnz	r3, 801aee8 <__hexnan+0xe0>
 801aee0:	4547      	cmp	r7, r8
 801aee2:	d127      	bne.n	801af34 <__hexnan+0x12c>
 801aee4:	2301      	movs	r3, #1
 801aee6:	603b      	str	r3, [r7, #0]
 801aee8:	2005      	movs	r0, #5
 801aeea:	e026      	b.n	801af3a <__hexnan+0x132>
 801aeec:	3501      	adds	r5, #1
 801aeee:	2d08      	cmp	r5, #8
 801aef0:	f10b 0b01 	add.w	fp, fp, #1
 801aef4:	dd06      	ble.n	801af04 <__hexnan+0xfc>
 801aef6:	4544      	cmp	r4, r8
 801aef8:	d9c3      	bls.n	801ae82 <__hexnan+0x7a>
 801aefa:	2300      	movs	r3, #0
 801aefc:	f844 3c04 	str.w	r3, [r4, #-4]
 801af00:	2501      	movs	r5, #1
 801af02:	3c04      	subs	r4, #4
 801af04:	6822      	ldr	r2, [r4, #0]
 801af06:	f000 000f 	and.w	r0, r0, #15
 801af0a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 801af0e:	6022      	str	r2, [r4, #0]
 801af10:	e7b7      	b.n	801ae82 <__hexnan+0x7a>
 801af12:	2508      	movs	r5, #8
 801af14:	e7b5      	b.n	801ae82 <__hexnan+0x7a>
 801af16:	9b01      	ldr	r3, [sp, #4]
 801af18:	2b00      	cmp	r3, #0
 801af1a:	d0df      	beq.n	801aedc <__hexnan+0xd4>
 801af1c:	f04f 32ff 	mov.w	r2, #4294967295
 801af20:	f1c3 0320 	rsb	r3, r3, #32
 801af24:	fa22 f303 	lsr.w	r3, r2, r3
 801af28:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801af2c:	401a      	ands	r2, r3
 801af2e:	f846 2c04 	str.w	r2, [r6, #-4]
 801af32:	e7d3      	b.n	801aedc <__hexnan+0xd4>
 801af34:	3f04      	subs	r7, #4
 801af36:	e7d1      	b.n	801aedc <__hexnan+0xd4>
 801af38:	2004      	movs	r0, #4
 801af3a:	b007      	add	sp, #28
 801af3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801af40 <_localeconv_r>:
 801af40:	4800      	ldr	r0, [pc, #0]	; (801af44 <_localeconv_r+0x4>)
 801af42:	4770      	bx	lr
 801af44:	200001cc 	.word	0x200001cc

0801af48 <__retarget_lock_init_recursive>:
 801af48:	4770      	bx	lr

0801af4a <__retarget_lock_acquire_recursive>:
 801af4a:	4770      	bx	lr

0801af4c <__retarget_lock_release_recursive>:
 801af4c:	4770      	bx	lr

0801af4e <__ascii_mbtowc>:
 801af4e:	b082      	sub	sp, #8
 801af50:	b901      	cbnz	r1, 801af54 <__ascii_mbtowc+0x6>
 801af52:	a901      	add	r1, sp, #4
 801af54:	b142      	cbz	r2, 801af68 <__ascii_mbtowc+0x1a>
 801af56:	b14b      	cbz	r3, 801af6c <__ascii_mbtowc+0x1e>
 801af58:	7813      	ldrb	r3, [r2, #0]
 801af5a:	600b      	str	r3, [r1, #0]
 801af5c:	7812      	ldrb	r2, [r2, #0]
 801af5e:	1e10      	subs	r0, r2, #0
 801af60:	bf18      	it	ne
 801af62:	2001      	movne	r0, #1
 801af64:	b002      	add	sp, #8
 801af66:	4770      	bx	lr
 801af68:	4610      	mov	r0, r2
 801af6a:	e7fb      	b.n	801af64 <__ascii_mbtowc+0x16>
 801af6c:	f06f 0001 	mvn.w	r0, #1
 801af70:	e7f8      	b.n	801af64 <__ascii_mbtowc+0x16>
	...

0801af74 <__malloc_lock>:
 801af74:	4801      	ldr	r0, [pc, #4]	; (801af7c <__malloc_lock+0x8>)
 801af76:	f7ff bfe8 	b.w	801af4a <__retarget_lock_acquire_recursive>
 801af7a:	bf00      	nop
 801af7c:	2000719c 	.word	0x2000719c

0801af80 <__malloc_unlock>:
 801af80:	4801      	ldr	r0, [pc, #4]	; (801af88 <__malloc_unlock+0x8>)
 801af82:	f7ff bfe3 	b.w	801af4c <__retarget_lock_release_recursive>
 801af86:	bf00      	nop
 801af88:	2000719c 	.word	0x2000719c

0801af8c <_Balloc>:
 801af8c:	b570      	push	{r4, r5, r6, lr}
 801af8e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801af90:	4604      	mov	r4, r0
 801af92:	460d      	mov	r5, r1
 801af94:	b976      	cbnz	r6, 801afb4 <_Balloc+0x28>
 801af96:	2010      	movs	r0, #16
 801af98:	f7fc ffb6 	bl	8017f08 <malloc>
 801af9c:	4602      	mov	r2, r0
 801af9e:	6260      	str	r0, [r4, #36]	; 0x24
 801afa0:	b920      	cbnz	r0, 801afac <_Balloc+0x20>
 801afa2:	4b18      	ldr	r3, [pc, #96]	; (801b004 <_Balloc+0x78>)
 801afa4:	4818      	ldr	r0, [pc, #96]	; (801b008 <_Balloc+0x7c>)
 801afa6:	2166      	movs	r1, #102	; 0x66
 801afa8:	f7fe fcb6 	bl	8019918 <__assert_func>
 801afac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801afb0:	6006      	str	r6, [r0, #0]
 801afb2:	60c6      	str	r6, [r0, #12]
 801afb4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801afb6:	68f3      	ldr	r3, [r6, #12]
 801afb8:	b183      	cbz	r3, 801afdc <_Balloc+0x50>
 801afba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801afbc:	68db      	ldr	r3, [r3, #12]
 801afbe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801afc2:	b9b8      	cbnz	r0, 801aff4 <_Balloc+0x68>
 801afc4:	2101      	movs	r1, #1
 801afc6:	fa01 f605 	lsl.w	r6, r1, r5
 801afca:	1d72      	adds	r2, r6, #5
 801afcc:	0092      	lsls	r2, r2, #2
 801afce:	4620      	mov	r0, r4
 801afd0:	f000 fc97 	bl	801b902 <_calloc_r>
 801afd4:	b160      	cbz	r0, 801aff0 <_Balloc+0x64>
 801afd6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801afda:	e00e      	b.n	801affa <_Balloc+0x6e>
 801afdc:	2221      	movs	r2, #33	; 0x21
 801afde:	2104      	movs	r1, #4
 801afe0:	4620      	mov	r0, r4
 801afe2:	f000 fc8e 	bl	801b902 <_calloc_r>
 801afe6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801afe8:	60f0      	str	r0, [r6, #12]
 801afea:	68db      	ldr	r3, [r3, #12]
 801afec:	2b00      	cmp	r3, #0
 801afee:	d1e4      	bne.n	801afba <_Balloc+0x2e>
 801aff0:	2000      	movs	r0, #0
 801aff2:	bd70      	pop	{r4, r5, r6, pc}
 801aff4:	6802      	ldr	r2, [r0, #0]
 801aff6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801affa:	2300      	movs	r3, #0
 801affc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801b000:	e7f7      	b.n	801aff2 <_Balloc+0x66>
 801b002:	bf00      	nop
 801b004:	08020fdc 	.word	0x08020fdc
 801b008:	08021244 	.word	0x08021244

0801b00c <_Bfree>:
 801b00c:	b570      	push	{r4, r5, r6, lr}
 801b00e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801b010:	4605      	mov	r5, r0
 801b012:	460c      	mov	r4, r1
 801b014:	b976      	cbnz	r6, 801b034 <_Bfree+0x28>
 801b016:	2010      	movs	r0, #16
 801b018:	f7fc ff76 	bl	8017f08 <malloc>
 801b01c:	4602      	mov	r2, r0
 801b01e:	6268      	str	r0, [r5, #36]	; 0x24
 801b020:	b920      	cbnz	r0, 801b02c <_Bfree+0x20>
 801b022:	4b09      	ldr	r3, [pc, #36]	; (801b048 <_Bfree+0x3c>)
 801b024:	4809      	ldr	r0, [pc, #36]	; (801b04c <_Bfree+0x40>)
 801b026:	218a      	movs	r1, #138	; 0x8a
 801b028:	f7fe fc76 	bl	8019918 <__assert_func>
 801b02c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801b030:	6006      	str	r6, [r0, #0]
 801b032:	60c6      	str	r6, [r0, #12]
 801b034:	b13c      	cbz	r4, 801b046 <_Bfree+0x3a>
 801b036:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801b038:	6862      	ldr	r2, [r4, #4]
 801b03a:	68db      	ldr	r3, [r3, #12]
 801b03c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801b040:	6021      	str	r1, [r4, #0]
 801b042:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801b046:	bd70      	pop	{r4, r5, r6, pc}
 801b048:	08020fdc 	.word	0x08020fdc
 801b04c:	08021244 	.word	0x08021244

0801b050 <__multadd>:
 801b050:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b054:	690e      	ldr	r6, [r1, #16]
 801b056:	4607      	mov	r7, r0
 801b058:	4698      	mov	r8, r3
 801b05a:	460c      	mov	r4, r1
 801b05c:	f101 0014 	add.w	r0, r1, #20
 801b060:	2300      	movs	r3, #0
 801b062:	6805      	ldr	r5, [r0, #0]
 801b064:	b2a9      	uxth	r1, r5
 801b066:	fb02 8101 	mla	r1, r2, r1, r8
 801b06a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 801b06e:	0c2d      	lsrs	r5, r5, #16
 801b070:	fb02 c505 	mla	r5, r2, r5, ip
 801b074:	b289      	uxth	r1, r1
 801b076:	3301      	adds	r3, #1
 801b078:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 801b07c:	429e      	cmp	r6, r3
 801b07e:	f840 1b04 	str.w	r1, [r0], #4
 801b082:	ea4f 4815 	mov.w	r8, r5, lsr #16
 801b086:	dcec      	bgt.n	801b062 <__multadd+0x12>
 801b088:	f1b8 0f00 	cmp.w	r8, #0
 801b08c:	d022      	beq.n	801b0d4 <__multadd+0x84>
 801b08e:	68a3      	ldr	r3, [r4, #8]
 801b090:	42b3      	cmp	r3, r6
 801b092:	dc19      	bgt.n	801b0c8 <__multadd+0x78>
 801b094:	6861      	ldr	r1, [r4, #4]
 801b096:	4638      	mov	r0, r7
 801b098:	3101      	adds	r1, #1
 801b09a:	f7ff ff77 	bl	801af8c <_Balloc>
 801b09e:	4605      	mov	r5, r0
 801b0a0:	b928      	cbnz	r0, 801b0ae <__multadd+0x5e>
 801b0a2:	4602      	mov	r2, r0
 801b0a4:	4b0d      	ldr	r3, [pc, #52]	; (801b0dc <__multadd+0x8c>)
 801b0a6:	480e      	ldr	r0, [pc, #56]	; (801b0e0 <__multadd+0x90>)
 801b0a8:	21b5      	movs	r1, #181	; 0xb5
 801b0aa:	f7fe fc35 	bl	8019918 <__assert_func>
 801b0ae:	6922      	ldr	r2, [r4, #16]
 801b0b0:	3202      	adds	r2, #2
 801b0b2:	f104 010c 	add.w	r1, r4, #12
 801b0b6:	0092      	lsls	r2, r2, #2
 801b0b8:	300c      	adds	r0, #12
 801b0ba:	f7fc ff43 	bl	8017f44 <memcpy>
 801b0be:	4621      	mov	r1, r4
 801b0c0:	4638      	mov	r0, r7
 801b0c2:	f7ff ffa3 	bl	801b00c <_Bfree>
 801b0c6:	462c      	mov	r4, r5
 801b0c8:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 801b0cc:	3601      	adds	r6, #1
 801b0ce:	f8c3 8014 	str.w	r8, [r3, #20]
 801b0d2:	6126      	str	r6, [r4, #16]
 801b0d4:	4620      	mov	r0, r4
 801b0d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b0da:	bf00      	nop
 801b0dc:	08021150 	.word	0x08021150
 801b0e0:	08021244 	.word	0x08021244

0801b0e4 <__s2b>:
 801b0e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b0e8:	460c      	mov	r4, r1
 801b0ea:	4615      	mov	r5, r2
 801b0ec:	461f      	mov	r7, r3
 801b0ee:	2209      	movs	r2, #9
 801b0f0:	3308      	adds	r3, #8
 801b0f2:	4606      	mov	r6, r0
 801b0f4:	fb93 f3f2 	sdiv	r3, r3, r2
 801b0f8:	2100      	movs	r1, #0
 801b0fa:	2201      	movs	r2, #1
 801b0fc:	429a      	cmp	r2, r3
 801b0fe:	db09      	blt.n	801b114 <__s2b+0x30>
 801b100:	4630      	mov	r0, r6
 801b102:	f7ff ff43 	bl	801af8c <_Balloc>
 801b106:	b940      	cbnz	r0, 801b11a <__s2b+0x36>
 801b108:	4602      	mov	r2, r0
 801b10a:	4b19      	ldr	r3, [pc, #100]	; (801b170 <__s2b+0x8c>)
 801b10c:	4819      	ldr	r0, [pc, #100]	; (801b174 <__s2b+0x90>)
 801b10e:	21ce      	movs	r1, #206	; 0xce
 801b110:	f7fe fc02 	bl	8019918 <__assert_func>
 801b114:	0052      	lsls	r2, r2, #1
 801b116:	3101      	adds	r1, #1
 801b118:	e7f0      	b.n	801b0fc <__s2b+0x18>
 801b11a:	9b08      	ldr	r3, [sp, #32]
 801b11c:	6143      	str	r3, [r0, #20]
 801b11e:	2d09      	cmp	r5, #9
 801b120:	f04f 0301 	mov.w	r3, #1
 801b124:	6103      	str	r3, [r0, #16]
 801b126:	dd16      	ble.n	801b156 <__s2b+0x72>
 801b128:	f104 0909 	add.w	r9, r4, #9
 801b12c:	46c8      	mov	r8, r9
 801b12e:	442c      	add	r4, r5
 801b130:	f818 3b01 	ldrb.w	r3, [r8], #1
 801b134:	4601      	mov	r1, r0
 801b136:	3b30      	subs	r3, #48	; 0x30
 801b138:	220a      	movs	r2, #10
 801b13a:	4630      	mov	r0, r6
 801b13c:	f7ff ff88 	bl	801b050 <__multadd>
 801b140:	45a0      	cmp	r8, r4
 801b142:	d1f5      	bne.n	801b130 <__s2b+0x4c>
 801b144:	f1a5 0408 	sub.w	r4, r5, #8
 801b148:	444c      	add	r4, r9
 801b14a:	1b2d      	subs	r5, r5, r4
 801b14c:	1963      	adds	r3, r4, r5
 801b14e:	42bb      	cmp	r3, r7
 801b150:	db04      	blt.n	801b15c <__s2b+0x78>
 801b152:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b156:	340a      	adds	r4, #10
 801b158:	2509      	movs	r5, #9
 801b15a:	e7f6      	b.n	801b14a <__s2b+0x66>
 801b15c:	f814 3b01 	ldrb.w	r3, [r4], #1
 801b160:	4601      	mov	r1, r0
 801b162:	3b30      	subs	r3, #48	; 0x30
 801b164:	220a      	movs	r2, #10
 801b166:	4630      	mov	r0, r6
 801b168:	f7ff ff72 	bl	801b050 <__multadd>
 801b16c:	e7ee      	b.n	801b14c <__s2b+0x68>
 801b16e:	bf00      	nop
 801b170:	08021150 	.word	0x08021150
 801b174:	08021244 	.word	0x08021244

0801b178 <__hi0bits>:
 801b178:	0c03      	lsrs	r3, r0, #16
 801b17a:	041b      	lsls	r3, r3, #16
 801b17c:	b9d3      	cbnz	r3, 801b1b4 <__hi0bits+0x3c>
 801b17e:	0400      	lsls	r0, r0, #16
 801b180:	2310      	movs	r3, #16
 801b182:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801b186:	bf04      	itt	eq
 801b188:	0200      	lsleq	r0, r0, #8
 801b18a:	3308      	addeq	r3, #8
 801b18c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801b190:	bf04      	itt	eq
 801b192:	0100      	lsleq	r0, r0, #4
 801b194:	3304      	addeq	r3, #4
 801b196:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801b19a:	bf04      	itt	eq
 801b19c:	0080      	lsleq	r0, r0, #2
 801b19e:	3302      	addeq	r3, #2
 801b1a0:	2800      	cmp	r0, #0
 801b1a2:	db05      	blt.n	801b1b0 <__hi0bits+0x38>
 801b1a4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801b1a8:	f103 0301 	add.w	r3, r3, #1
 801b1ac:	bf08      	it	eq
 801b1ae:	2320      	moveq	r3, #32
 801b1b0:	4618      	mov	r0, r3
 801b1b2:	4770      	bx	lr
 801b1b4:	2300      	movs	r3, #0
 801b1b6:	e7e4      	b.n	801b182 <__hi0bits+0xa>

0801b1b8 <__lo0bits>:
 801b1b8:	6803      	ldr	r3, [r0, #0]
 801b1ba:	f013 0207 	ands.w	r2, r3, #7
 801b1be:	4601      	mov	r1, r0
 801b1c0:	d00b      	beq.n	801b1da <__lo0bits+0x22>
 801b1c2:	07da      	lsls	r2, r3, #31
 801b1c4:	d424      	bmi.n	801b210 <__lo0bits+0x58>
 801b1c6:	0798      	lsls	r0, r3, #30
 801b1c8:	bf49      	itett	mi
 801b1ca:	085b      	lsrmi	r3, r3, #1
 801b1cc:	089b      	lsrpl	r3, r3, #2
 801b1ce:	2001      	movmi	r0, #1
 801b1d0:	600b      	strmi	r3, [r1, #0]
 801b1d2:	bf5c      	itt	pl
 801b1d4:	600b      	strpl	r3, [r1, #0]
 801b1d6:	2002      	movpl	r0, #2
 801b1d8:	4770      	bx	lr
 801b1da:	b298      	uxth	r0, r3
 801b1dc:	b9b0      	cbnz	r0, 801b20c <__lo0bits+0x54>
 801b1de:	0c1b      	lsrs	r3, r3, #16
 801b1e0:	2010      	movs	r0, #16
 801b1e2:	f013 0fff 	tst.w	r3, #255	; 0xff
 801b1e6:	bf04      	itt	eq
 801b1e8:	0a1b      	lsreq	r3, r3, #8
 801b1ea:	3008      	addeq	r0, #8
 801b1ec:	071a      	lsls	r2, r3, #28
 801b1ee:	bf04      	itt	eq
 801b1f0:	091b      	lsreq	r3, r3, #4
 801b1f2:	3004      	addeq	r0, #4
 801b1f4:	079a      	lsls	r2, r3, #30
 801b1f6:	bf04      	itt	eq
 801b1f8:	089b      	lsreq	r3, r3, #2
 801b1fa:	3002      	addeq	r0, #2
 801b1fc:	07da      	lsls	r2, r3, #31
 801b1fe:	d403      	bmi.n	801b208 <__lo0bits+0x50>
 801b200:	085b      	lsrs	r3, r3, #1
 801b202:	f100 0001 	add.w	r0, r0, #1
 801b206:	d005      	beq.n	801b214 <__lo0bits+0x5c>
 801b208:	600b      	str	r3, [r1, #0]
 801b20a:	4770      	bx	lr
 801b20c:	4610      	mov	r0, r2
 801b20e:	e7e8      	b.n	801b1e2 <__lo0bits+0x2a>
 801b210:	2000      	movs	r0, #0
 801b212:	4770      	bx	lr
 801b214:	2020      	movs	r0, #32
 801b216:	4770      	bx	lr

0801b218 <__i2b>:
 801b218:	b510      	push	{r4, lr}
 801b21a:	460c      	mov	r4, r1
 801b21c:	2101      	movs	r1, #1
 801b21e:	f7ff feb5 	bl	801af8c <_Balloc>
 801b222:	4602      	mov	r2, r0
 801b224:	b928      	cbnz	r0, 801b232 <__i2b+0x1a>
 801b226:	4b05      	ldr	r3, [pc, #20]	; (801b23c <__i2b+0x24>)
 801b228:	4805      	ldr	r0, [pc, #20]	; (801b240 <__i2b+0x28>)
 801b22a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801b22e:	f7fe fb73 	bl	8019918 <__assert_func>
 801b232:	2301      	movs	r3, #1
 801b234:	6144      	str	r4, [r0, #20]
 801b236:	6103      	str	r3, [r0, #16]
 801b238:	bd10      	pop	{r4, pc}
 801b23a:	bf00      	nop
 801b23c:	08021150 	.word	0x08021150
 801b240:	08021244 	.word	0x08021244

0801b244 <__multiply>:
 801b244:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b248:	4614      	mov	r4, r2
 801b24a:	690a      	ldr	r2, [r1, #16]
 801b24c:	6923      	ldr	r3, [r4, #16]
 801b24e:	429a      	cmp	r2, r3
 801b250:	bfb8      	it	lt
 801b252:	460b      	movlt	r3, r1
 801b254:	460d      	mov	r5, r1
 801b256:	bfbc      	itt	lt
 801b258:	4625      	movlt	r5, r4
 801b25a:	461c      	movlt	r4, r3
 801b25c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 801b260:	f8d4 9010 	ldr.w	r9, [r4, #16]
 801b264:	68ab      	ldr	r3, [r5, #8]
 801b266:	6869      	ldr	r1, [r5, #4]
 801b268:	eb0a 0709 	add.w	r7, sl, r9
 801b26c:	42bb      	cmp	r3, r7
 801b26e:	b085      	sub	sp, #20
 801b270:	bfb8      	it	lt
 801b272:	3101      	addlt	r1, #1
 801b274:	f7ff fe8a 	bl	801af8c <_Balloc>
 801b278:	b930      	cbnz	r0, 801b288 <__multiply+0x44>
 801b27a:	4602      	mov	r2, r0
 801b27c:	4b42      	ldr	r3, [pc, #264]	; (801b388 <__multiply+0x144>)
 801b27e:	4843      	ldr	r0, [pc, #268]	; (801b38c <__multiply+0x148>)
 801b280:	f240 115d 	movw	r1, #349	; 0x15d
 801b284:	f7fe fb48 	bl	8019918 <__assert_func>
 801b288:	f100 0614 	add.w	r6, r0, #20
 801b28c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 801b290:	4633      	mov	r3, r6
 801b292:	2200      	movs	r2, #0
 801b294:	4543      	cmp	r3, r8
 801b296:	d31e      	bcc.n	801b2d6 <__multiply+0x92>
 801b298:	f105 0c14 	add.w	ip, r5, #20
 801b29c:	f104 0314 	add.w	r3, r4, #20
 801b2a0:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 801b2a4:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 801b2a8:	9202      	str	r2, [sp, #8]
 801b2aa:	ebac 0205 	sub.w	r2, ip, r5
 801b2ae:	3a15      	subs	r2, #21
 801b2b0:	f022 0203 	bic.w	r2, r2, #3
 801b2b4:	3204      	adds	r2, #4
 801b2b6:	f105 0115 	add.w	r1, r5, #21
 801b2ba:	458c      	cmp	ip, r1
 801b2bc:	bf38      	it	cc
 801b2be:	2204      	movcc	r2, #4
 801b2c0:	9201      	str	r2, [sp, #4]
 801b2c2:	9a02      	ldr	r2, [sp, #8]
 801b2c4:	9303      	str	r3, [sp, #12]
 801b2c6:	429a      	cmp	r2, r3
 801b2c8:	d808      	bhi.n	801b2dc <__multiply+0x98>
 801b2ca:	2f00      	cmp	r7, #0
 801b2cc:	dc55      	bgt.n	801b37a <__multiply+0x136>
 801b2ce:	6107      	str	r7, [r0, #16]
 801b2d0:	b005      	add	sp, #20
 801b2d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b2d6:	f843 2b04 	str.w	r2, [r3], #4
 801b2da:	e7db      	b.n	801b294 <__multiply+0x50>
 801b2dc:	f8b3 a000 	ldrh.w	sl, [r3]
 801b2e0:	f1ba 0f00 	cmp.w	sl, #0
 801b2e4:	d020      	beq.n	801b328 <__multiply+0xe4>
 801b2e6:	f105 0e14 	add.w	lr, r5, #20
 801b2ea:	46b1      	mov	r9, r6
 801b2ec:	2200      	movs	r2, #0
 801b2ee:	f85e 4b04 	ldr.w	r4, [lr], #4
 801b2f2:	f8d9 b000 	ldr.w	fp, [r9]
 801b2f6:	b2a1      	uxth	r1, r4
 801b2f8:	fa1f fb8b 	uxth.w	fp, fp
 801b2fc:	fb0a b101 	mla	r1, sl, r1, fp
 801b300:	4411      	add	r1, r2
 801b302:	f8d9 2000 	ldr.w	r2, [r9]
 801b306:	0c24      	lsrs	r4, r4, #16
 801b308:	0c12      	lsrs	r2, r2, #16
 801b30a:	fb0a 2404 	mla	r4, sl, r4, r2
 801b30e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 801b312:	b289      	uxth	r1, r1
 801b314:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 801b318:	45f4      	cmp	ip, lr
 801b31a:	f849 1b04 	str.w	r1, [r9], #4
 801b31e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 801b322:	d8e4      	bhi.n	801b2ee <__multiply+0xaa>
 801b324:	9901      	ldr	r1, [sp, #4]
 801b326:	5072      	str	r2, [r6, r1]
 801b328:	9a03      	ldr	r2, [sp, #12]
 801b32a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801b32e:	3304      	adds	r3, #4
 801b330:	f1b9 0f00 	cmp.w	r9, #0
 801b334:	d01f      	beq.n	801b376 <__multiply+0x132>
 801b336:	6834      	ldr	r4, [r6, #0]
 801b338:	f105 0114 	add.w	r1, r5, #20
 801b33c:	46b6      	mov	lr, r6
 801b33e:	f04f 0a00 	mov.w	sl, #0
 801b342:	880a      	ldrh	r2, [r1, #0]
 801b344:	f8be b002 	ldrh.w	fp, [lr, #2]
 801b348:	fb09 b202 	mla	r2, r9, r2, fp
 801b34c:	4492      	add	sl, r2
 801b34e:	b2a4      	uxth	r4, r4
 801b350:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 801b354:	f84e 4b04 	str.w	r4, [lr], #4
 801b358:	f851 4b04 	ldr.w	r4, [r1], #4
 801b35c:	f8be 2000 	ldrh.w	r2, [lr]
 801b360:	0c24      	lsrs	r4, r4, #16
 801b362:	fb09 2404 	mla	r4, r9, r4, r2
 801b366:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 801b36a:	458c      	cmp	ip, r1
 801b36c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 801b370:	d8e7      	bhi.n	801b342 <__multiply+0xfe>
 801b372:	9a01      	ldr	r2, [sp, #4]
 801b374:	50b4      	str	r4, [r6, r2]
 801b376:	3604      	adds	r6, #4
 801b378:	e7a3      	b.n	801b2c2 <__multiply+0x7e>
 801b37a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801b37e:	2b00      	cmp	r3, #0
 801b380:	d1a5      	bne.n	801b2ce <__multiply+0x8a>
 801b382:	3f01      	subs	r7, #1
 801b384:	e7a1      	b.n	801b2ca <__multiply+0x86>
 801b386:	bf00      	nop
 801b388:	08021150 	.word	0x08021150
 801b38c:	08021244 	.word	0x08021244

0801b390 <__pow5mult>:
 801b390:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b394:	4615      	mov	r5, r2
 801b396:	f012 0203 	ands.w	r2, r2, #3
 801b39a:	4606      	mov	r6, r0
 801b39c:	460f      	mov	r7, r1
 801b39e:	d007      	beq.n	801b3b0 <__pow5mult+0x20>
 801b3a0:	4c25      	ldr	r4, [pc, #148]	; (801b438 <__pow5mult+0xa8>)
 801b3a2:	3a01      	subs	r2, #1
 801b3a4:	2300      	movs	r3, #0
 801b3a6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801b3aa:	f7ff fe51 	bl	801b050 <__multadd>
 801b3ae:	4607      	mov	r7, r0
 801b3b0:	10ad      	asrs	r5, r5, #2
 801b3b2:	d03d      	beq.n	801b430 <__pow5mult+0xa0>
 801b3b4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801b3b6:	b97c      	cbnz	r4, 801b3d8 <__pow5mult+0x48>
 801b3b8:	2010      	movs	r0, #16
 801b3ba:	f7fc fda5 	bl	8017f08 <malloc>
 801b3be:	4602      	mov	r2, r0
 801b3c0:	6270      	str	r0, [r6, #36]	; 0x24
 801b3c2:	b928      	cbnz	r0, 801b3d0 <__pow5mult+0x40>
 801b3c4:	4b1d      	ldr	r3, [pc, #116]	; (801b43c <__pow5mult+0xac>)
 801b3c6:	481e      	ldr	r0, [pc, #120]	; (801b440 <__pow5mult+0xb0>)
 801b3c8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801b3cc:	f7fe faa4 	bl	8019918 <__assert_func>
 801b3d0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801b3d4:	6004      	str	r4, [r0, #0]
 801b3d6:	60c4      	str	r4, [r0, #12]
 801b3d8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801b3dc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801b3e0:	b94c      	cbnz	r4, 801b3f6 <__pow5mult+0x66>
 801b3e2:	f240 2171 	movw	r1, #625	; 0x271
 801b3e6:	4630      	mov	r0, r6
 801b3e8:	f7ff ff16 	bl	801b218 <__i2b>
 801b3ec:	2300      	movs	r3, #0
 801b3ee:	f8c8 0008 	str.w	r0, [r8, #8]
 801b3f2:	4604      	mov	r4, r0
 801b3f4:	6003      	str	r3, [r0, #0]
 801b3f6:	f04f 0900 	mov.w	r9, #0
 801b3fa:	07eb      	lsls	r3, r5, #31
 801b3fc:	d50a      	bpl.n	801b414 <__pow5mult+0x84>
 801b3fe:	4639      	mov	r1, r7
 801b400:	4622      	mov	r2, r4
 801b402:	4630      	mov	r0, r6
 801b404:	f7ff ff1e 	bl	801b244 <__multiply>
 801b408:	4639      	mov	r1, r7
 801b40a:	4680      	mov	r8, r0
 801b40c:	4630      	mov	r0, r6
 801b40e:	f7ff fdfd 	bl	801b00c <_Bfree>
 801b412:	4647      	mov	r7, r8
 801b414:	106d      	asrs	r5, r5, #1
 801b416:	d00b      	beq.n	801b430 <__pow5mult+0xa0>
 801b418:	6820      	ldr	r0, [r4, #0]
 801b41a:	b938      	cbnz	r0, 801b42c <__pow5mult+0x9c>
 801b41c:	4622      	mov	r2, r4
 801b41e:	4621      	mov	r1, r4
 801b420:	4630      	mov	r0, r6
 801b422:	f7ff ff0f 	bl	801b244 <__multiply>
 801b426:	6020      	str	r0, [r4, #0]
 801b428:	f8c0 9000 	str.w	r9, [r0]
 801b42c:	4604      	mov	r4, r0
 801b42e:	e7e4      	b.n	801b3fa <__pow5mult+0x6a>
 801b430:	4638      	mov	r0, r7
 801b432:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b436:	bf00      	nop
 801b438:	08021398 	.word	0x08021398
 801b43c:	08020fdc 	.word	0x08020fdc
 801b440:	08021244 	.word	0x08021244

0801b444 <__lshift>:
 801b444:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b448:	460c      	mov	r4, r1
 801b44a:	6849      	ldr	r1, [r1, #4]
 801b44c:	6923      	ldr	r3, [r4, #16]
 801b44e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801b452:	68a3      	ldr	r3, [r4, #8]
 801b454:	4607      	mov	r7, r0
 801b456:	4691      	mov	r9, r2
 801b458:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801b45c:	f108 0601 	add.w	r6, r8, #1
 801b460:	42b3      	cmp	r3, r6
 801b462:	db0b      	blt.n	801b47c <__lshift+0x38>
 801b464:	4638      	mov	r0, r7
 801b466:	f7ff fd91 	bl	801af8c <_Balloc>
 801b46a:	4605      	mov	r5, r0
 801b46c:	b948      	cbnz	r0, 801b482 <__lshift+0x3e>
 801b46e:	4602      	mov	r2, r0
 801b470:	4b28      	ldr	r3, [pc, #160]	; (801b514 <__lshift+0xd0>)
 801b472:	4829      	ldr	r0, [pc, #164]	; (801b518 <__lshift+0xd4>)
 801b474:	f240 11d9 	movw	r1, #473	; 0x1d9
 801b478:	f7fe fa4e 	bl	8019918 <__assert_func>
 801b47c:	3101      	adds	r1, #1
 801b47e:	005b      	lsls	r3, r3, #1
 801b480:	e7ee      	b.n	801b460 <__lshift+0x1c>
 801b482:	2300      	movs	r3, #0
 801b484:	f100 0114 	add.w	r1, r0, #20
 801b488:	f100 0210 	add.w	r2, r0, #16
 801b48c:	4618      	mov	r0, r3
 801b48e:	4553      	cmp	r3, sl
 801b490:	db33      	blt.n	801b4fa <__lshift+0xb6>
 801b492:	6920      	ldr	r0, [r4, #16]
 801b494:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801b498:	f104 0314 	add.w	r3, r4, #20
 801b49c:	f019 091f 	ands.w	r9, r9, #31
 801b4a0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801b4a4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801b4a8:	d02b      	beq.n	801b502 <__lshift+0xbe>
 801b4aa:	f1c9 0e20 	rsb	lr, r9, #32
 801b4ae:	468a      	mov	sl, r1
 801b4b0:	2200      	movs	r2, #0
 801b4b2:	6818      	ldr	r0, [r3, #0]
 801b4b4:	fa00 f009 	lsl.w	r0, r0, r9
 801b4b8:	4302      	orrs	r2, r0
 801b4ba:	f84a 2b04 	str.w	r2, [sl], #4
 801b4be:	f853 2b04 	ldr.w	r2, [r3], #4
 801b4c2:	459c      	cmp	ip, r3
 801b4c4:	fa22 f20e 	lsr.w	r2, r2, lr
 801b4c8:	d8f3      	bhi.n	801b4b2 <__lshift+0x6e>
 801b4ca:	ebac 0304 	sub.w	r3, ip, r4
 801b4ce:	3b15      	subs	r3, #21
 801b4d0:	f023 0303 	bic.w	r3, r3, #3
 801b4d4:	3304      	adds	r3, #4
 801b4d6:	f104 0015 	add.w	r0, r4, #21
 801b4da:	4584      	cmp	ip, r0
 801b4dc:	bf38      	it	cc
 801b4de:	2304      	movcc	r3, #4
 801b4e0:	50ca      	str	r2, [r1, r3]
 801b4e2:	b10a      	cbz	r2, 801b4e8 <__lshift+0xa4>
 801b4e4:	f108 0602 	add.w	r6, r8, #2
 801b4e8:	3e01      	subs	r6, #1
 801b4ea:	4638      	mov	r0, r7
 801b4ec:	612e      	str	r6, [r5, #16]
 801b4ee:	4621      	mov	r1, r4
 801b4f0:	f7ff fd8c 	bl	801b00c <_Bfree>
 801b4f4:	4628      	mov	r0, r5
 801b4f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b4fa:	f842 0f04 	str.w	r0, [r2, #4]!
 801b4fe:	3301      	adds	r3, #1
 801b500:	e7c5      	b.n	801b48e <__lshift+0x4a>
 801b502:	3904      	subs	r1, #4
 801b504:	f853 2b04 	ldr.w	r2, [r3], #4
 801b508:	f841 2f04 	str.w	r2, [r1, #4]!
 801b50c:	459c      	cmp	ip, r3
 801b50e:	d8f9      	bhi.n	801b504 <__lshift+0xc0>
 801b510:	e7ea      	b.n	801b4e8 <__lshift+0xa4>
 801b512:	bf00      	nop
 801b514:	08021150 	.word	0x08021150
 801b518:	08021244 	.word	0x08021244

0801b51c <__mcmp>:
 801b51c:	b530      	push	{r4, r5, lr}
 801b51e:	6902      	ldr	r2, [r0, #16]
 801b520:	690c      	ldr	r4, [r1, #16]
 801b522:	1b12      	subs	r2, r2, r4
 801b524:	d10e      	bne.n	801b544 <__mcmp+0x28>
 801b526:	f100 0314 	add.w	r3, r0, #20
 801b52a:	3114      	adds	r1, #20
 801b52c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801b530:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801b534:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801b538:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801b53c:	42a5      	cmp	r5, r4
 801b53e:	d003      	beq.n	801b548 <__mcmp+0x2c>
 801b540:	d305      	bcc.n	801b54e <__mcmp+0x32>
 801b542:	2201      	movs	r2, #1
 801b544:	4610      	mov	r0, r2
 801b546:	bd30      	pop	{r4, r5, pc}
 801b548:	4283      	cmp	r3, r0
 801b54a:	d3f3      	bcc.n	801b534 <__mcmp+0x18>
 801b54c:	e7fa      	b.n	801b544 <__mcmp+0x28>
 801b54e:	f04f 32ff 	mov.w	r2, #4294967295
 801b552:	e7f7      	b.n	801b544 <__mcmp+0x28>

0801b554 <__mdiff>:
 801b554:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b558:	460c      	mov	r4, r1
 801b55a:	4606      	mov	r6, r0
 801b55c:	4611      	mov	r1, r2
 801b55e:	4620      	mov	r0, r4
 801b560:	4617      	mov	r7, r2
 801b562:	f7ff ffdb 	bl	801b51c <__mcmp>
 801b566:	1e05      	subs	r5, r0, #0
 801b568:	d110      	bne.n	801b58c <__mdiff+0x38>
 801b56a:	4629      	mov	r1, r5
 801b56c:	4630      	mov	r0, r6
 801b56e:	f7ff fd0d 	bl	801af8c <_Balloc>
 801b572:	b930      	cbnz	r0, 801b582 <__mdiff+0x2e>
 801b574:	4b39      	ldr	r3, [pc, #228]	; (801b65c <__mdiff+0x108>)
 801b576:	4602      	mov	r2, r0
 801b578:	f240 2132 	movw	r1, #562	; 0x232
 801b57c:	4838      	ldr	r0, [pc, #224]	; (801b660 <__mdiff+0x10c>)
 801b57e:	f7fe f9cb 	bl	8019918 <__assert_func>
 801b582:	2301      	movs	r3, #1
 801b584:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801b588:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b58c:	bfa4      	itt	ge
 801b58e:	463b      	movge	r3, r7
 801b590:	4627      	movge	r7, r4
 801b592:	4630      	mov	r0, r6
 801b594:	6879      	ldr	r1, [r7, #4]
 801b596:	bfa6      	itte	ge
 801b598:	461c      	movge	r4, r3
 801b59a:	2500      	movge	r5, #0
 801b59c:	2501      	movlt	r5, #1
 801b59e:	f7ff fcf5 	bl	801af8c <_Balloc>
 801b5a2:	b920      	cbnz	r0, 801b5ae <__mdiff+0x5a>
 801b5a4:	4b2d      	ldr	r3, [pc, #180]	; (801b65c <__mdiff+0x108>)
 801b5a6:	4602      	mov	r2, r0
 801b5a8:	f44f 7110 	mov.w	r1, #576	; 0x240
 801b5ac:	e7e6      	b.n	801b57c <__mdiff+0x28>
 801b5ae:	693e      	ldr	r6, [r7, #16]
 801b5b0:	60c5      	str	r5, [r0, #12]
 801b5b2:	6925      	ldr	r5, [r4, #16]
 801b5b4:	f107 0114 	add.w	r1, r7, #20
 801b5b8:	f104 0914 	add.w	r9, r4, #20
 801b5bc:	f100 0e14 	add.w	lr, r0, #20
 801b5c0:	f107 0210 	add.w	r2, r7, #16
 801b5c4:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 801b5c8:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 801b5cc:	46f2      	mov	sl, lr
 801b5ce:	2700      	movs	r7, #0
 801b5d0:	f859 3b04 	ldr.w	r3, [r9], #4
 801b5d4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801b5d8:	fa1f f883 	uxth.w	r8, r3
 801b5dc:	fa17 f78b 	uxtah	r7, r7, fp
 801b5e0:	0c1b      	lsrs	r3, r3, #16
 801b5e2:	eba7 0808 	sub.w	r8, r7, r8
 801b5e6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801b5ea:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801b5ee:	fa1f f888 	uxth.w	r8, r8
 801b5f2:	141f      	asrs	r7, r3, #16
 801b5f4:	454d      	cmp	r5, r9
 801b5f6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801b5fa:	f84a 3b04 	str.w	r3, [sl], #4
 801b5fe:	d8e7      	bhi.n	801b5d0 <__mdiff+0x7c>
 801b600:	1b2b      	subs	r3, r5, r4
 801b602:	3b15      	subs	r3, #21
 801b604:	f023 0303 	bic.w	r3, r3, #3
 801b608:	3304      	adds	r3, #4
 801b60a:	3415      	adds	r4, #21
 801b60c:	42a5      	cmp	r5, r4
 801b60e:	bf38      	it	cc
 801b610:	2304      	movcc	r3, #4
 801b612:	4419      	add	r1, r3
 801b614:	4473      	add	r3, lr
 801b616:	469e      	mov	lr, r3
 801b618:	460d      	mov	r5, r1
 801b61a:	4565      	cmp	r5, ip
 801b61c:	d30e      	bcc.n	801b63c <__mdiff+0xe8>
 801b61e:	f10c 0203 	add.w	r2, ip, #3
 801b622:	1a52      	subs	r2, r2, r1
 801b624:	f022 0203 	bic.w	r2, r2, #3
 801b628:	3903      	subs	r1, #3
 801b62a:	458c      	cmp	ip, r1
 801b62c:	bf38      	it	cc
 801b62e:	2200      	movcc	r2, #0
 801b630:	441a      	add	r2, r3
 801b632:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801b636:	b17b      	cbz	r3, 801b658 <__mdiff+0x104>
 801b638:	6106      	str	r6, [r0, #16]
 801b63a:	e7a5      	b.n	801b588 <__mdiff+0x34>
 801b63c:	f855 8b04 	ldr.w	r8, [r5], #4
 801b640:	fa17 f488 	uxtah	r4, r7, r8
 801b644:	1422      	asrs	r2, r4, #16
 801b646:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 801b64a:	b2a4      	uxth	r4, r4
 801b64c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 801b650:	f84e 4b04 	str.w	r4, [lr], #4
 801b654:	1417      	asrs	r7, r2, #16
 801b656:	e7e0      	b.n	801b61a <__mdiff+0xc6>
 801b658:	3e01      	subs	r6, #1
 801b65a:	e7ea      	b.n	801b632 <__mdiff+0xde>
 801b65c:	08021150 	.word	0x08021150
 801b660:	08021244 	.word	0x08021244

0801b664 <__ulp>:
 801b664:	b082      	sub	sp, #8
 801b666:	ed8d 0b00 	vstr	d0, [sp]
 801b66a:	9b01      	ldr	r3, [sp, #4]
 801b66c:	4912      	ldr	r1, [pc, #72]	; (801b6b8 <__ulp+0x54>)
 801b66e:	4019      	ands	r1, r3
 801b670:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 801b674:	2900      	cmp	r1, #0
 801b676:	dd05      	ble.n	801b684 <__ulp+0x20>
 801b678:	2200      	movs	r2, #0
 801b67a:	460b      	mov	r3, r1
 801b67c:	ec43 2b10 	vmov	d0, r2, r3
 801b680:	b002      	add	sp, #8
 801b682:	4770      	bx	lr
 801b684:	4249      	negs	r1, r1
 801b686:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 801b68a:	ea4f 5021 	mov.w	r0, r1, asr #20
 801b68e:	f04f 0200 	mov.w	r2, #0
 801b692:	f04f 0300 	mov.w	r3, #0
 801b696:	da04      	bge.n	801b6a2 <__ulp+0x3e>
 801b698:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 801b69c:	fa41 f300 	asr.w	r3, r1, r0
 801b6a0:	e7ec      	b.n	801b67c <__ulp+0x18>
 801b6a2:	f1a0 0114 	sub.w	r1, r0, #20
 801b6a6:	291e      	cmp	r1, #30
 801b6a8:	bfda      	itte	le
 801b6aa:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 801b6ae:	fa20 f101 	lsrle.w	r1, r0, r1
 801b6b2:	2101      	movgt	r1, #1
 801b6b4:	460a      	mov	r2, r1
 801b6b6:	e7e1      	b.n	801b67c <__ulp+0x18>
 801b6b8:	7ff00000 	.word	0x7ff00000

0801b6bc <__b2d>:
 801b6bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b6be:	6905      	ldr	r5, [r0, #16]
 801b6c0:	f100 0714 	add.w	r7, r0, #20
 801b6c4:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 801b6c8:	1f2e      	subs	r6, r5, #4
 801b6ca:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801b6ce:	4620      	mov	r0, r4
 801b6d0:	f7ff fd52 	bl	801b178 <__hi0bits>
 801b6d4:	f1c0 0320 	rsb	r3, r0, #32
 801b6d8:	280a      	cmp	r0, #10
 801b6da:	f8df c07c 	ldr.w	ip, [pc, #124]	; 801b758 <__b2d+0x9c>
 801b6de:	600b      	str	r3, [r1, #0]
 801b6e0:	dc14      	bgt.n	801b70c <__b2d+0x50>
 801b6e2:	f1c0 0e0b 	rsb	lr, r0, #11
 801b6e6:	fa24 f10e 	lsr.w	r1, r4, lr
 801b6ea:	42b7      	cmp	r7, r6
 801b6ec:	ea41 030c 	orr.w	r3, r1, ip
 801b6f0:	bf34      	ite	cc
 801b6f2:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801b6f6:	2100      	movcs	r1, #0
 801b6f8:	3015      	adds	r0, #21
 801b6fa:	fa04 f000 	lsl.w	r0, r4, r0
 801b6fe:	fa21 f10e 	lsr.w	r1, r1, lr
 801b702:	ea40 0201 	orr.w	r2, r0, r1
 801b706:	ec43 2b10 	vmov	d0, r2, r3
 801b70a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b70c:	42b7      	cmp	r7, r6
 801b70e:	bf3a      	itte	cc
 801b710:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801b714:	f1a5 0608 	subcc.w	r6, r5, #8
 801b718:	2100      	movcs	r1, #0
 801b71a:	380b      	subs	r0, #11
 801b71c:	d017      	beq.n	801b74e <__b2d+0x92>
 801b71e:	f1c0 0c20 	rsb	ip, r0, #32
 801b722:	fa04 f500 	lsl.w	r5, r4, r0
 801b726:	42be      	cmp	r6, r7
 801b728:	fa21 f40c 	lsr.w	r4, r1, ip
 801b72c:	ea45 0504 	orr.w	r5, r5, r4
 801b730:	bf8c      	ite	hi
 801b732:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 801b736:	2400      	movls	r4, #0
 801b738:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 801b73c:	fa01 f000 	lsl.w	r0, r1, r0
 801b740:	fa24 f40c 	lsr.w	r4, r4, ip
 801b744:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801b748:	ea40 0204 	orr.w	r2, r0, r4
 801b74c:	e7db      	b.n	801b706 <__b2d+0x4a>
 801b74e:	ea44 030c 	orr.w	r3, r4, ip
 801b752:	460a      	mov	r2, r1
 801b754:	e7d7      	b.n	801b706 <__b2d+0x4a>
 801b756:	bf00      	nop
 801b758:	3ff00000 	.word	0x3ff00000

0801b75c <__d2b>:
 801b75c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801b760:	4689      	mov	r9, r1
 801b762:	2101      	movs	r1, #1
 801b764:	ec57 6b10 	vmov	r6, r7, d0
 801b768:	4690      	mov	r8, r2
 801b76a:	f7ff fc0f 	bl	801af8c <_Balloc>
 801b76e:	4604      	mov	r4, r0
 801b770:	b930      	cbnz	r0, 801b780 <__d2b+0x24>
 801b772:	4602      	mov	r2, r0
 801b774:	4b25      	ldr	r3, [pc, #148]	; (801b80c <__d2b+0xb0>)
 801b776:	4826      	ldr	r0, [pc, #152]	; (801b810 <__d2b+0xb4>)
 801b778:	f240 310a 	movw	r1, #778	; 0x30a
 801b77c:	f7fe f8cc 	bl	8019918 <__assert_func>
 801b780:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801b784:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801b788:	bb35      	cbnz	r5, 801b7d8 <__d2b+0x7c>
 801b78a:	2e00      	cmp	r6, #0
 801b78c:	9301      	str	r3, [sp, #4]
 801b78e:	d028      	beq.n	801b7e2 <__d2b+0x86>
 801b790:	4668      	mov	r0, sp
 801b792:	9600      	str	r6, [sp, #0]
 801b794:	f7ff fd10 	bl	801b1b8 <__lo0bits>
 801b798:	9900      	ldr	r1, [sp, #0]
 801b79a:	b300      	cbz	r0, 801b7de <__d2b+0x82>
 801b79c:	9a01      	ldr	r2, [sp, #4]
 801b79e:	f1c0 0320 	rsb	r3, r0, #32
 801b7a2:	fa02 f303 	lsl.w	r3, r2, r3
 801b7a6:	430b      	orrs	r3, r1
 801b7a8:	40c2      	lsrs	r2, r0
 801b7aa:	6163      	str	r3, [r4, #20]
 801b7ac:	9201      	str	r2, [sp, #4]
 801b7ae:	9b01      	ldr	r3, [sp, #4]
 801b7b0:	61a3      	str	r3, [r4, #24]
 801b7b2:	2b00      	cmp	r3, #0
 801b7b4:	bf14      	ite	ne
 801b7b6:	2202      	movne	r2, #2
 801b7b8:	2201      	moveq	r2, #1
 801b7ba:	6122      	str	r2, [r4, #16]
 801b7bc:	b1d5      	cbz	r5, 801b7f4 <__d2b+0x98>
 801b7be:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801b7c2:	4405      	add	r5, r0
 801b7c4:	f8c9 5000 	str.w	r5, [r9]
 801b7c8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801b7cc:	f8c8 0000 	str.w	r0, [r8]
 801b7d0:	4620      	mov	r0, r4
 801b7d2:	b003      	add	sp, #12
 801b7d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b7d8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801b7dc:	e7d5      	b.n	801b78a <__d2b+0x2e>
 801b7de:	6161      	str	r1, [r4, #20]
 801b7e0:	e7e5      	b.n	801b7ae <__d2b+0x52>
 801b7e2:	a801      	add	r0, sp, #4
 801b7e4:	f7ff fce8 	bl	801b1b8 <__lo0bits>
 801b7e8:	9b01      	ldr	r3, [sp, #4]
 801b7ea:	6163      	str	r3, [r4, #20]
 801b7ec:	2201      	movs	r2, #1
 801b7ee:	6122      	str	r2, [r4, #16]
 801b7f0:	3020      	adds	r0, #32
 801b7f2:	e7e3      	b.n	801b7bc <__d2b+0x60>
 801b7f4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801b7f8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801b7fc:	f8c9 0000 	str.w	r0, [r9]
 801b800:	6918      	ldr	r0, [r3, #16]
 801b802:	f7ff fcb9 	bl	801b178 <__hi0bits>
 801b806:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801b80a:	e7df      	b.n	801b7cc <__d2b+0x70>
 801b80c:	08021150 	.word	0x08021150
 801b810:	08021244 	.word	0x08021244

0801b814 <__ratio>:
 801b814:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b818:	4688      	mov	r8, r1
 801b81a:	4669      	mov	r1, sp
 801b81c:	4681      	mov	r9, r0
 801b81e:	f7ff ff4d 	bl	801b6bc <__b2d>
 801b822:	a901      	add	r1, sp, #4
 801b824:	4640      	mov	r0, r8
 801b826:	ec55 4b10 	vmov	r4, r5, d0
 801b82a:	f7ff ff47 	bl	801b6bc <__b2d>
 801b82e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801b832:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801b836:	eba3 0c02 	sub.w	ip, r3, r2
 801b83a:	e9dd 3200 	ldrd	r3, r2, [sp]
 801b83e:	1a9b      	subs	r3, r3, r2
 801b840:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801b844:	ec51 0b10 	vmov	r0, r1, d0
 801b848:	2b00      	cmp	r3, #0
 801b84a:	bfd6      	itet	le
 801b84c:	460a      	movle	r2, r1
 801b84e:	462a      	movgt	r2, r5
 801b850:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801b854:	468b      	mov	fp, r1
 801b856:	462f      	mov	r7, r5
 801b858:	bfd4      	ite	le
 801b85a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 801b85e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801b862:	4620      	mov	r0, r4
 801b864:	ee10 2a10 	vmov	r2, s0
 801b868:	465b      	mov	r3, fp
 801b86a:	4639      	mov	r1, r7
 801b86c:	f7e4 fffe 	bl	800086c <__aeabi_ddiv>
 801b870:	ec41 0b10 	vmov	d0, r0, r1
 801b874:	b003      	add	sp, #12
 801b876:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b87a <__copybits>:
 801b87a:	3901      	subs	r1, #1
 801b87c:	b570      	push	{r4, r5, r6, lr}
 801b87e:	1149      	asrs	r1, r1, #5
 801b880:	6914      	ldr	r4, [r2, #16]
 801b882:	3101      	adds	r1, #1
 801b884:	f102 0314 	add.w	r3, r2, #20
 801b888:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801b88c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801b890:	1f05      	subs	r5, r0, #4
 801b892:	42a3      	cmp	r3, r4
 801b894:	d30c      	bcc.n	801b8b0 <__copybits+0x36>
 801b896:	1aa3      	subs	r3, r4, r2
 801b898:	3b11      	subs	r3, #17
 801b89a:	f023 0303 	bic.w	r3, r3, #3
 801b89e:	3211      	adds	r2, #17
 801b8a0:	42a2      	cmp	r2, r4
 801b8a2:	bf88      	it	hi
 801b8a4:	2300      	movhi	r3, #0
 801b8a6:	4418      	add	r0, r3
 801b8a8:	2300      	movs	r3, #0
 801b8aa:	4288      	cmp	r0, r1
 801b8ac:	d305      	bcc.n	801b8ba <__copybits+0x40>
 801b8ae:	bd70      	pop	{r4, r5, r6, pc}
 801b8b0:	f853 6b04 	ldr.w	r6, [r3], #4
 801b8b4:	f845 6f04 	str.w	r6, [r5, #4]!
 801b8b8:	e7eb      	b.n	801b892 <__copybits+0x18>
 801b8ba:	f840 3b04 	str.w	r3, [r0], #4
 801b8be:	e7f4      	b.n	801b8aa <__copybits+0x30>

0801b8c0 <__any_on>:
 801b8c0:	f100 0214 	add.w	r2, r0, #20
 801b8c4:	6900      	ldr	r0, [r0, #16]
 801b8c6:	114b      	asrs	r3, r1, #5
 801b8c8:	4298      	cmp	r0, r3
 801b8ca:	b510      	push	{r4, lr}
 801b8cc:	db11      	blt.n	801b8f2 <__any_on+0x32>
 801b8ce:	dd0a      	ble.n	801b8e6 <__any_on+0x26>
 801b8d0:	f011 011f 	ands.w	r1, r1, #31
 801b8d4:	d007      	beq.n	801b8e6 <__any_on+0x26>
 801b8d6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801b8da:	fa24 f001 	lsr.w	r0, r4, r1
 801b8de:	fa00 f101 	lsl.w	r1, r0, r1
 801b8e2:	428c      	cmp	r4, r1
 801b8e4:	d10b      	bne.n	801b8fe <__any_on+0x3e>
 801b8e6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801b8ea:	4293      	cmp	r3, r2
 801b8ec:	d803      	bhi.n	801b8f6 <__any_on+0x36>
 801b8ee:	2000      	movs	r0, #0
 801b8f0:	bd10      	pop	{r4, pc}
 801b8f2:	4603      	mov	r3, r0
 801b8f4:	e7f7      	b.n	801b8e6 <__any_on+0x26>
 801b8f6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801b8fa:	2900      	cmp	r1, #0
 801b8fc:	d0f5      	beq.n	801b8ea <__any_on+0x2a>
 801b8fe:	2001      	movs	r0, #1
 801b900:	e7f6      	b.n	801b8f0 <__any_on+0x30>

0801b902 <_calloc_r>:
 801b902:	b513      	push	{r0, r1, r4, lr}
 801b904:	434a      	muls	r2, r1
 801b906:	4611      	mov	r1, r2
 801b908:	9201      	str	r2, [sp, #4]
 801b90a:	f7fc fb9b 	bl	8018044 <_malloc_r>
 801b90e:	4604      	mov	r4, r0
 801b910:	b118      	cbz	r0, 801b91a <_calloc_r+0x18>
 801b912:	9a01      	ldr	r2, [sp, #4]
 801b914:	2100      	movs	r1, #0
 801b916:	f7fc fb3d 	bl	8017f94 <memset>
 801b91a:	4620      	mov	r0, r4
 801b91c:	b002      	add	sp, #8
 801b91e:	bd10      	pop	{r4, pc}

0801b920 <__ssputs_r>:
 801b920:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b924:	688e      	ldr	r6, [r1, #8]
 801b926:	429e      	cmp	r6, r3
 801b928:	4682      	mov	sl, r0
 801b92a:	460c      	mov	r4, r1
 801b92c:	4690      	mov	r8, r2
 801b92e:	461f      	mov	r7, r3
 801b930:	d838      	bhi.n	801b9a4 <__ssputs_r+0x84>
 801b932:	898a      	ldrh	r2, [r1, #12]
 801b934:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801b938:	d032      	beq.n	801b9a0 <__ssputs_r+0x80>
 801b93a:	6825      	ldr	r5, [r4, #0]
 801b93c:	6909      	ldr	r1, [r1, #16]
 801b93e:	eba5 0901 	sub.w	r9, r5, r1
 801b942:	6965      	ldr	r5, [r4, #20]
 801b944:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801b948:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801b94c:	3301      	adds	r3, #1
 801b94e:	444b      	add	r3, r9
 801b950:	106d      	asrs	r5, r5, #1
 801b952:	429d      	cmp	r5, r3
 801b954:	bf38      	it	cc
 801b956:	461d      	movcc	r5, r3
 801b958:	0553      	lsls	r3, r2, #21
 801b95a:	d531      	bpl.n	801b9c0 <__ssputs_r+0xa0>
 801b95c:	4629      	mov	r1, r5
 801b95e:	f7fc fb71 	bl	8018044 <_malloc_r>
 801b962:	4606      	mov	r6, r0
 801b964:	b950      	cbnz	r0, 801b97c <__ssputs_r+0x5c>
 801b966:	230c      	movs	r3, #12
 801b968:	f8ca 3000 	str.w	r3, [sl]
 801b96c:	89a3      	ldrh	r3, [r4, #12]
 801b96e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b972:	81a3      	strh	r3, [r4, #12]
 801b974:	f04f 30ff 	mov.w	r0, #4294967295
 801b978:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b97c:	6921      	ldr	r1, [r4, #16]
 801b97e:	464a      	mov	r2, r9
 801b980:	f7fc fae0 	bl	8017f44 <memcpy>
 801b984:	89a3      	ldrh	r3, [r4, #12]
 801b986:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801b98a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801b98e:	81a3      	strh	r3, [r4, #12]
 801b990:	6126      	str	r6, [r4, #16]
 801b992:	6165      	str	r5, [r4, #20]
 801b994:	444e      	add	r6, r9
 801b996:	eba5 0509 	sub.w	r5, r5, r9
 801b99a:	6026      	str	r6, [r4, #0]
 801b99c:	60a5      	str	r5, [r4, #8]
 801b99e:	463e      	mov	r6, r7
 801b9a0:	42be      	cmp	r6, r7
 801b9a2:	d900      	bls.n	801b9a6 <__ssputs_r+0x86>
 801b9a4:	463e      	mov	r6, r7
 801b9a6:	4632      	mov	r2, r6
 801b9a8:	6820      	ldr	r0, [r4, #0]
 801b9aa:	4641      	mov	r1, r8
 801b9ac:	f7fc fad8 	bl	8017f60 <memmove>
 801b9b0:	68a3      	ldr	r3, [r4, #8]
 801b9b2:	6822      	ldr	r2, [r4, #0]
 801b9b4:	1b9b      	subs	r3, r3, r6
 801b9b6:	4432      	add	r2, r6
 801b9b8:	60a3      	str	r3, [r4, #8]
 801b9ba:	6022      	str	r2, [r4, #0]
 801b9bc:	2000      	movs	r0, #0
 801b9be:	e7db      	b.n	801b978 <__ssputs_r+0x58>
 801b9c0:	462a      	mov	r2, r5
 801b9c2:	f000 fce1 	bl	801c388 <_realloc_r>
 801b9c6:	4606      	mov	r6, r0
 801b9c8:	2800      	cmp	r0, #0
 801b9ca:	d1e1      	bne.n	801b990 <__ssputs_r+0x70>
 801b9cc:	6921      	ldr	r1, [r4, #16]
 801b9ce:	4650      	mov	r0, sl
 801b9d0:	f7fc fae8 	bl	8017fa4 <_free_r>
 801b9d4:	e7c7      	b.n	801b966 <__ssputs_r+0x46>
	...

0801b9d8 <_svfiprintf_r>:
 801b9d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b9dc:	4698      	mov	r8, r3
 801b9de:	898b      	ldrh	r3, [r1, #12]
 801b9e0:	061b      	lsls	r3, r3, #24
 801b9e2:	b09d      	sub	sp, #116	; 0x74
 801b9e4:	4607      	mov	r7, r0
 801b9e6:	460d      	mov	r5, r1
 801b9e8:	4614      	mov	r4, r2
 801b9ea:	d50e      	bpl.n	801ba0a <_svfiprintf_r+0x32>
 801b9ec:	690b      	ldr	r3, [r1, #16]
 801b9ee:	b963      	cbnz	r3, 801ba0a <_svfiprintf_r+0x32>
 801b9f0:	2140      	movs	r1, #64	; 0x40
 801b9f2:	f7fc fb27 	bl	8018044 <_malloc_r>
 801b9f6:	6028      	str	r0, [r5, #0]
 801b9f8:	6128      	str	r0, [r5, #16]
 801b9fa:	b920      	cbnz	r0, 801ba06 <_svfiprintf_r+0x2e>
 801b9fc:	230c      	movs	r3, #12
 801b9fe:	603b      	str	r3, [r7, #0]
 801ba00:	f04f 30ff 	mov.w	r0, #4294967295
 801ba04:	e0d1      	b.n	801bbaa <_svfiprintf_r+0x1d2>
 801ba06:	2340      	movs	r3, #64	; 0x40
 801ba08:	616b      	str	r3, [r5, #20]
 801ba0a:	2300      	movs	r3, #0
 801ba0c:	9309      	str	r3, [sp, #36]	; 0x24
 801ba0e:	2320      	movs	r3, #32
 801ba10:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801ba14:	f8cd 800c 	str.w	r8, [sp, #12]
 801ba18:	2330      	movs	r3, #48	; 0x30
 801ba1a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801bbc4 <_svfiprintf_r+0x1ec>
 801ba1e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801ba22:	f04f 0901 	mov.w	r9, #1
 801ba26:	4623      	mov	r3, r4
 801ba28:	469a      	mov	sl, r3
 801ba2a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801ba2e:	b10a      	cbz	r2, 801ba34 <_svfiprintf_r+0x5c>
 801ba30:	2a25      	cmp	r2, #37	; 0x25
 801ba32:	d1f9      	bne.n	801ba28 <_svfiprintf_r+0x50>
 801ba34:	ebba 0b04 	subs.w	fp, sl, r4
 801ba38:	d00b      	beq.n	801ba52 <_svfiprintf_r+0x7a>
 801ba3a:	465b      	mov	r3, fp
 801ba3c:	4622      	mov	r2, r4
 801ba3e:	4629      	mov	r1, r5
 801ba40:	4638      	mov	r0, r7
 801ba42:	f7ff ff6d 	bl	801b920 <__ssputs_r>
 801ba46:	3001      	adds	r0, #1
 801ba48:	f000 80aa 	beq.w	801bba0 <_svfiprintf_r+0x1c8>
 801ba4c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801ba4e:	445a      	add	r2, fp
 801ba50:	9209      	str	r2, [sp, #36]	; 0x24
 801ba52:	f89a 3000 	ldrb.w	r3, [sl]
 801ba56:	2b00      	cmp	r3, #0
 801ba58:	f000 80a2 	beq.w	801bba0 <_svfiprintf_r+0x1c8>
 801ba5c:	2300      	movs	r3, #0
 801ba5e:	f04f 32ff 	mov.w	r2, #4294967295
 801ba62:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801ba66:	f10a 0a01 	add.w	sl, sl, #1
 801ba6a:	9304      	str	r3, [sp, #16]
 801ba6c:	9307      	str	r3, [sp, #28]
 801ba6e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801ba72:	931a      	str	r3, [sp, #104]	; 0x68
 801ba74:	4654      	mov	r4, sl
 801ba76:	2205      	movs	r2, #5
 801ba78:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ba7c:	4851      	ldr	r0, [pc, #324]	; (801bbc4 <_svfiprintf_r+0x1ec>)
 801ba7e:	f7e4 fbbf 	bl	8000200 <memchr>
 801ba82:	9a04      	ldr	r2, [sp, #16]
 801ba84:	b9d8      	cbnz	r0, 801babe <_svfiprintf_r+0xe6>
 801ba86:	06d0      	lsls	r0, r2, #27
 801ba88:	bf44      	itt	mi
 801ba8a:	2320      	movmi	r3, #32
 801ba8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801ba90:	0711      	lsls	r1, r2, #28
 801ba92:	bf44      	itt	mi
 801ba94:	232b      	movmi	r3, #43	; 0x2b
 801ba96:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801ba9a:	f89a 3000 	ldrb.w	r3, [sl]
 801ba9e:	2b2a      	cmp	r3, #42	; 0x2a
 801baa0:	d015      	beq.n	801bace <_svfiprintf_r+0xf6>
 801baa2:	9a07      	ldr	r2, [sp, #28]
 801baa4:	4654      	mov	r4, sl
 801baa6:	2000      	movs	r0, #0
 801baa8:	f04f 0c0a 	mov.w	ip, #10
 801baac:	4621      	mov	r1, r4
 801baae:	f811 3b01 	ldrb.w	r3, [r1], #1
 801bab2:	3b30      	subs	r3, #48	; 0x30
 801bab4:	2b09      	cmp	r3, #9
 801bab6:	d94e      	bls.n	801bb56 <_svfiprintf_r+0x17e>
 801bab8:	b1b0      	cbz	r0, 801bae8 <_svfiprintf_r+0x110>
 801baba:	9207      	str	r2, [sp, #28]
 801babc:	e014      	b.n	801bae8 <_svfiprintf_r+0x110>
 801babe:	eba0 0308 	sub.w	r3, r0, r8
 801bac2:	fa09 f303 	lsl.w	r3, r9, r3
 801bac6:	4313      	orrs	r3, r2
 801bac8:	9304      	str	r3, [sp, #16]
 801baca:	46a2      	mov	sl, r4
 801bacc:	e7d2      	b.n	801ba74 <_svfiprintf_r+0x9c>
 801bace:	9b03      	ldr	r3, [sp, #12]
 801bad0:	1d19      	adds	r1, r3, #4
 801bad2:	681b      	ldr	r3, [r3, #0]
 801bad4:	9103      	str	r1, [sp, #12]
 801bad6:	2b00      	cmp	r3, #0
 801bad8:	bfbb      	ittet	lt
 801bada:	425b      	neglt	r3, r3
 801badc:	f042 0202 	orrlt.w	r2, r2, #2
 801bae0:	9307      	strge	r3, [sp, #28]
 801bae2:	9307      	strlt	r3, [sp, #28]
 801bae4:	bfb8      	it	lt
 801bae6:	9204      	strlt	r2, [sp, #16]
 801bae8:	7823      	ldrb	r3, [r4, #0]
 801baea:	2b2e      	cmp	r3, #46	; 0x2e
 801baec:	d10c      	bne.n	801bb08 <_svfiprintf_r+0x130>
 801baee:	7863      	ldrb	r3, [r4, #1]
 801baf0:	2b2a      	cmp	r3, #42	; 0x2a
 801baf2:	d135      	bne.n	801bb60 <_svfiprintf_r+0x188>
 801baf4:	9b03      	ldr	r3, [sp, #12]
 801baf6:	1d1a      	adds	r2, r3, #4
 801baf8:	681b      	ldr	r3, [r3, #0]
 801bafa:	9203      	str	r2, [sp, #12]
 801bafc:	2b00      	cmp	r3, #0
 801bafe:	bfb8      	it	lt
 801bb00:	f04f 33ff 	movlt.w	r3, #4294967295
 801bb04:	3402      	adds	r4, #2
 801bb06:	9305      	str	r3, [sp, #20]
 801bb08:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801bbd4 <_svfiprintf_r+0x1fc>
 801bb0c:	7821      	ldrb	r1, [r4, #0]
 801bb0e:	2203      	movs	r2, #3
 801bb10:	4650      	mov	r0, sl
 801bb12:	f7e4 fb75 	bl	8000200 <memchr>
 801bb16:	b140      	cbz	r0, 801bb2a <_svfiprintf_r+0x152>
 801bb18:	2340      	movs	r3, #64	; 0x40
 801bb1a:	eba0 000a 	sub.w	r0, r0, sl
 801bb1e:	fa03 f000 	lsl.w	r0, r3, r0
 801bb22:	9b04      	ldr	r3, [sp, #16]
 801bb24:	4303      	orrs	r3, r0
 801bb26:	3401      	adds	r4, #1
 801bb28:	9304      	str	r3, [sp, #16]
 801bb2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801bb2e:	4826      	ldr	r0, [pc, #152]	; (801bbc8 <_svfiprintf_r+0x1f0>)
 801bb30:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801bb34:	2206      	movs	r2, #6
 801bb36:	f7e4 fb63 	bl	8000200 <memchr>
 801bb3a:	2800      	cmp	r0, #0
 801bb3c:	d038      	beq.n	801bbb0 <_svfiprintf_r+0x1d8>
 801bb3e:	4b23      	ldr	r3, [pc, #140]	; (801bbcc <_svfiprintf_r+0x1f4>)
 801bb40:	bb1b      	cbnz	r3, 801bb8a <_svfiprintf_r+0x1b2>
 801bb42:	9b03      	ldr	r3, [sp, #12]
 801bb44:	3307      	adds	r3, #7
 801bb46:	f023 0307 	bic.w	r3, r3, #7
 801bb4a:	3308      	adds	r3, #8
 801bb4c:	9303      	str	r3, [sp, #12]
 801bb4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bb50:	4433      	add	r3, r6
 801bb52:	9309      	str	r3, [sp, #36]	; 0x24
 801bb54:	e767      	b.n	801ba26 <_svfiprintf_r+0x4e>
 801bb56:	fb0c 3202 	mla	r2, ip, r2, r3
 801bb5a:	460c      	mov	r4, r1
 801bb5c:	2001      	movs	r0, #1
 801bb5e:	e7a5      	b.n	801baac <_svfiprintf_r+0xd4>
 801bb60:	2300      	movs	r3, #0
 801bb62:	3401      	adds	r4, #1
 801bb64:	9305      	str	r3, [sp, #20]
 801bb66:	4619      	mov	r1, r3
 801bb68:	f04f 0c0a 	mov.w	ip, #10
 801bb6c:	4620      	mov	r0, r4
 801bb6e:	f810 2b01 	ldrb.w	r2, [r0], #1
 801bb72:	3a30      	subs	r2, #48	; 0x30
 801bb74:	2a09      	cmp	r2, #9
 801bb76:	d903      	bls.n	801bb80 <_svfiprintf_r+0x1a8>
 801bb78:	2b00      	cmp	r3, #0
 801bb7a:	d0c5      	beq.n	801bb08 <_svfiprintf_r+0x130>
 801bb7c:	9105      	str	r1, [sp, #20]
 801bb7e:	e7c3      	b.n	801bb08 <_svfiprintf_r+0x130>
 801bb80:	fb0c 2101 	mla	r1, ip, r1, r2
 801bb84:	4604      	mov	r4, r0
 801bb86:	2301      	movs	r3, #1
 801bb88:	e7f0      	b.n	801bb6c <_svfiprintf_r+0x194>
 801bb8a:	ab03      	add	r3, sp, #12
 801bb8c:	9300      	str	r3, [sp, #0]
 801bb8e:	462a      	mov	r2, r5
 801bb90:	4b0f      	ldr	r3, [pc, #60]	; (801bbd0 <_svfiprintf_r+0x1f8>)
 801bb92:	a904      	add	r1, sp, #16
 801bb94:	4638      	mov	r0, r7
 801bb96:	f7fc fb4f 	bl	8018238 <_printf_float>
 801bb9a:	1c42      	adds	r2, r0, #1
 801bb9c:	4606      	mov	r6, r0
 801bb9e:	d1d6      	bne.n	801bb4e <_svfiprintf_r+0x176>
 801bba0:	89ab      	ldrh	r3, [r5, #12]
 801bba2:	065b      	lsls	r3, r3, #25
 801bba4:	f53f af2c 	bmi.w	801ba00 <_svfiprintf_r+0x28>
 801bba8:	9809      	ldr	r0, [sp, #36]	; 0x24
 801bbaa:	b01d      	add	sp, #116	; 0x74
 801bbac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bbb0:	ab03      	add	r3, sp, #12
 801bbb2:	9300      	str	r3, [sp, #0]
 801bbb4:	462a      	mov	r2, r5
 801bbb6:	4b06      	ldr	r3, [pc, #24]	; (801bbd0 <_svfiprintf_r+0x1f8>)
 801bbb8:	a904      	add	r1, sp, #16
 801bbba:	4638      	mov	r0, r7
 801bbbc:	f7fc fde0 	bl	8018780 <_printf_i>
 801bbc0:	e7eb      	b.n	801bb9a <_svfiprintf_r+0x1c2>
 801bbc2:	bf00      	nop
 801bbc4:	080213a4 	.word	0x080213a4
 801bbc8:	080213ae 	.word	0x080213ae
 801bbcc:	08018239 	.word	0x08018239
 801bbd0:	0801b921 	.word	0x0801b921
 801bbd4:	080213aa 	.word	0x080213aa

0801bbd8 <__sfputc_r>:
 801bbd8:	6893      	ldr	r3, [r2, #8]
 801bbda:	3b01      	subs	r3, #1
 801bbdc:	2b00      	cmp	r3, #0
 801bbde:	b410      	push	{r4}
 801bbe0:	6093      	str	r3, [r2, #8]
 801bbe2:	da08      	bge.n	801bbf6 <__sfputc_r+0x1e>
 801bbe4:	6994      	ldr	r4, [r2, #24]
 801bbe6:	42a3      	cmp	r3, r4
 801bbe8:	db01      	blt.n	801bbee <__sfputc_r+0x16>
 801bbea:	290a      	cmp	r1, #10
 801bbec:	d103      	bne.n	801bbf6 <__sfputc_r+0x1e>
 801bbee:	f85d 4b04 	ldr.w	r4, [sp], #4
 801bbf2:	f000 b999 	b.w	801bf28 <__swbuf_r>
 801bbf6:	6813      	ldr	r3, [r2, #0]
 801bbf8:	1c58      	adds	r0, r3, #1
 801bbfa:	6010      	str	r0, [r2, #0]
 801bbfc:	7019      	strb	r1, [r3, #0]
 801bbfe:	4608      	mov	r0, r1
 801bc00:	f85d 4b04 	ldr.w	r4, [sp], #4
 801bc04:	4770      	bx	lr

0801bc06 <__sfputs_r>:
 801bc06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bc08:	4606      	mov	r6, r0
 801bc0a:	460f      	mov	r7, r1
 801bc0c:	4614      	mov	r4, r2
 801bc0e:	18d5      	adds	r5, r2, r3
 801bc10:	42ac      	cmp	r4, r5
 801bc12:	d101      	bne.n	801bc18 <__sfputs_r+0x12>
 801bc14:	2000      	movs	r0, #0
 801bc16:	e007      	b.n	801bc28 <__sfputs_r+0x22>
 801bc18:	f814 1b01 	ldrb.w	r1, [r4], #1
 801bc1c:	463a      	mov	r2, r7
 801bc1e:	4630      	mov	r0, r6
 801bc20:	f7ff ffda 	bl	801bbd8 <__sfputc_r>
 801bc24:	1c43      	adds	r3, r0, #1
 801bc26:	d1f3      	bne.n	801bc10 <__sfputs_r+0xa>
 801bc28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801bc2c <_vfiprintf_r>:
 801bc2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bc30:	460d      	mov	r5, r1
 801bc32:	b09d      	sub	sp, #116	; 0x74
 801bc34:	4614      	mov	r4, r2
 801bc36:	4698      	mov	r8, r3
 801bc38:	4606      	mov	r6, r0
 801bc3a:	b118      	cbz	r0, 801bc44 <_vfiprintf_r+0x18>
 801bc3c:	6983      	ldr	r3, [r0, #24]
 801bc3e:	b90b      	cbnz	r3, 801bc44 <_vfiprintf_r+0x18>
 801bc40:	f7fe fd60 	bl	801a704 <__sinit>
 801bc44:	4b89      	ldr	r3, [pc, #548]	; (801be6c <_vfiprintf_r+0x240>)
 801bc46:	429d      	cmp	r5, r3
 801bc48:	d11b      	bne.n	801bc82 <_vfiprintf_r+0x56>
 801bc4a:	6875      	ldr	r5, [r6, #4]
 801bc4c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801bc4e:	07d9      	lsls	r1, r3, #31
 801bc50:	d405      	bmi.n	801bc5e <_vfiprintf_r+0x32>
 801bc52:	89ab      	ldrh	r3, [r5, #12]
 801bc54:	059a      	lsls	r2, r3, #22
 801bc56:	d402      	bmi.n	801bc5e <_vfiprintf_r+0x32>
 801bc58:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801bc5a:	f7ff f976 	bl	801af4a <__retarget_lock_acquire_recursive>
 801bc5e:	89ab      	ldrh	r3, [r5, #12]
 801bc60:	071b      	lsls	r3, r3, #28
 801bc62:	d501      	bpl.n	801bc68 <_vfiprintf_r+0x3c>
 801bc64:	692b      	ldr	r3, [r5, #16]
 801bc66:	b9eb      	cbnz	r3, 801bca4 <_vfiprintf_r+0x78>
 801bc68:	4629      	mov	r1, r5
 801bc6a:	4630      	mov	r0, r6
 801bc6c:	f000 f9ce 	bl	801c00c <__swsetup_r>
 801bc70:	b1c0      	cbz	r0, 801bca4 <_vfiprintf_r+0x78>
 801bc72:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801bc74:	07dc      	lsls	r4, r3, #31
 801bc76:	d50e      	bpl.n	801bc96 <_vfiprintf_r+0x6a>
 801bc78:	f04f 30ff 	mov.w	r0, #4294967295
 801bc7c:	b01d      	add	sp, #116	; 0x74
 801bc7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bc82:	4b7b      	ldr	r3, [pc, #492]	; (801be70 <_vfiprintf_r+0x244>)
 801bc84:	429d      	cmp	r5, r3
 801bc86:	d101      	bne.n	801bc8c <_vfiprintf_r+0x60>
 801bc88:	68b5      	ldr	r5, [r6, #8]
 801bc8a:	e7df      	b.n	801bc4c <_vfiprintf_r+0x20>
 801bc8c:	4b79      	ldr	r3, [pc, #484]	; (801be74 <_vfiprintf_r+0x248>)
 801bc8e:	429d      	cmp	r5, r3
 801bc90:	bf08      	it	eq
 801bc92:	68f5      	ldreq	r5, [r6, #12]
 801bc94:	e7da      	b.n	801bc4c <_vfiprintf_r+0x20>
 801bc96:	89ab      	ldrh	r3, [r5, #12]
 801bc98:	0598      	lsls	r0, r3, #22
 801bc9a:	d4ed      	bmi.n	801bc78 <_vfiprintf_r+0x4c>
 801bc9c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801bc9e:	f7ff f955 	bl	801af4c <__retarget_lock_release_recursive>
 801bca2:	e7e9      	b.n	801bc78 <_vfiprintf_r+0x4c>
 801bca4:	2300      	movs	r3, #0
 801bca6:	9309      	str	r3, [sp, #36]	; 0x24
 801bca8:	2320      	movs	r3, #32
 801bcaa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801bcae:	f8cd 800c 	str.w	r8, [sp, #12]
 801bcb2:	2330      	movs	r3, #48	; 0x30
 801bcb4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801be78 <_vfiprintf_r+0x24c>
 801bcb8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801bcbc:	f04f 0901 	mov.w	r9, #1
 801bcc0:	4623      	mov	r3, r4
 801bcc2:	469a      	mov	sl, r3
 801bcc4:	f813 2b01 	ldrb.w	r2, [r3], #1
 801bcc8:	b10a      	cbz	r2, 801bcce <_vfiprintf_r+0xa2>
 801bcca:	2a25      	cmp	r2, #37	; 0x25
 801bccc:	d1f9      	bne.n	801bcc2 <_vfiprintf_r+0x96>
 801bcce:	ebba 0b04 	subs.w	fp, sl, r4
 801bcd2:	d00b      	beq.n	801bcec <_vfiprintf_r+0xc0>
 801bcd4:	465b      	mov	r3, fp
 801bcd6:	4622      	mov	r2, r4
 801bcd8:	4629      	mov	r1, r5
 801bcda:	4630      	mov	r0, r6
 801bcdc:	f7ff ff93 	bl	801bc06 <__sfputs_r>
 801bce0:	3001      	adds	r0, #1
 801bce2:	f000 80aa 	beq.w	801be3a <_vfiprintf_r+0x20e>
 801bce6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801bce8:	445a      	add	r2, fp
 801bcea:	9209      	str	r2, [sp, #36]	; 0x24
 801bcec:	f89a 3000 	ldrb.w	r3, [sl]
 801bcf0:	2b00      	cmp	r3, #0
 801bcf2:	f000 80a2 	beq.w	801be3a <_vfiprintf_r+0x20e>
 801bcf6:	2300      	movs	r3, #0
 801bcf8:	f04f 32ff 	mov.w	r2, #4294967295
 801bcfc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801bd00:	f10a 0a01 	add.w	sl, sl, #1
 801bd04:	9304      	str	r3, [sp, #16]
 801bd06:	9307      	str	r3, [sp, #28]
 801bd08:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801bd0c:	931a      	str	r3, [sp, #104]	; 0x68
 801bd0e:	4654      	mov	r4, sl
 801bd10:	2205      	movs	r2, #5
 801bd12:	f814 1b01 	ldrb.w	r1, [r4], #1
 801bd16:	4858      	ldr	r0, [pc, #352]	; (801be78 <_vfiprintf_r+0x24c>)
 801bd18:	f7e4 fa72 	bl	8000200 <memchr>
 801bd1c:	9a04      	ldr	r2, [sp, #16]
 801bd1e:	b9d8      	cbnz	r0, 801bd58 <_vfiprintf_r+0x12c>
 801bd20:	06d1      	lsls	r1, r2, #27
 801bd22:	bf44      	itt	mi
 801bd24:	2320      	movmi	r3, #32
 801bd26:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801bd2a:	0713      	lsls	r3, r2, #28
 801bd2c:	bf44      	itt	mi
 801bd2e:	232b      	movmi	r3, #43	; 0x2b
 801bd30:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801bd34:	f89a 3000 	ldrb.w	r3, [sl]
 801bd38:	2b2a      	cmp	r3, #42	; 0x2a
 801bd3a:	d015      	beq.n	801bd68 <_vfiprintf_r+0x13c>
 801bd3c:	9a07      	ldr	r2, [sp, #28]
 801bd3e:	4654      	mov	r4, sl
 801bd40:	2000      	movs	r0, #0
 801bd42:	f04f 0c0a 	mov.w	ip, #10
 801bd46:	4621      	mov	r1, r4
 801bd48:	f811 3b01 	ldrb.w	r3, [r1], #1
 801bd4c:	3b30      	subs	r3, #48	; 0x30
 801bd4e:	2b09      	cmp	r3, #9
 801bd50:	d94e      	bls.n	801bdf0 <_vfiprintf_r+0x1c4>
 801bd52:	b1b0      	cbz	r0, 801bd82 <_vfiprintf_r+0x156>
 801bd54:	9207      	str	r2, [sp, #28]
 801bd56:	e014      	b.n	801bd82 <_vfiprintf_r+0x156>
 801bd58:	eba0 0308 	sub.w	r3, r0, r8
 801bd5c:	fa09 f303 	lsl.w	r3, r9, r3
 801bd60:	4313      	orrs	r3, r2
 801bd62:	9304      	str	r3, [sp, #16]
 801bd64:	46a2      	mov	sl, r4
 801bd66:	e7d2      	b.n	801bd0e <_vfiprintf_r+0xe2>
 801bd68:	9b03      	ldr	r3, [sp, #12]
 801bd6a:	1d19      	adds	r1, r3, #4
 801bd6c:	681b      	ldr	r3, [r3, #0]
 801bd6e:	9103      	str	r1, [sp, #12]
 801bd70:	2b00      	cmp	r3, #0
 801bd72:	bfbb      	ittet	lt
 801bd74:	425b      	neglt	r3, r3
 801bd76:	f042 0202 	orrlt.w	r2, r2, #2
 801bd7a:	9307      	strge	r3, [sp, #28]
 801bd7c:	9307      	strlt	r3, [sp, #28]
 801bd7e:	bfb8      	it	lt
 801bd80:	9204      	strlt	r2, [sp, #16]
 801bd82:	7823      	ldrb	r3, [r4, #0]
 801bd84:	2b2e      	cmp	r3, #46	; 0x2e
 801bd86:	d10c      	bne.n	801bda2 <_vfiprintf_r+0x176>
 801bd88:	7863      	ldrb	r3, [r4, #1]
 801bd8a:	2b2a      	cmp	r3, #42	; 0x2a
 801bd8c:	d135      	bne.n	801bdfa <_vfiprintf_r+0x1ce>
 801bd8e:	9b03      	ldr	r3, [sp, #12]
 801bd90:	1d1a      	adds	r2, r3, #4
 801bd92:	681b      	ldr	r3, [r3, #0]
 801bd94:	9203      	str	r2, [sp, #12]
 801bd96:	2b00      	cmp	r3, #0
 801bd98:	bfb8      	it	lt
 801bd9a:	f04f 33ff 	movlt.w	r3, #4294967295
 801bd9e:	3402      	adds	r4, #2
 801bda0:	9305      	str	r3, [sp, #20]
 801bda2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801be88 <_vfiprintf_r+0x25c>
 801bda6:	7821      	ldrb	r1, [r4, #0]
 801bda8:	2203      	movs	r2, #3
 801bdaa:	4650      	mov	r0, sl
 801bdac:	f7e4 fa28 	bl	8000200 <memchr>
 801bdb0:	b140      	cbz	r0, 801bdc4 <_vfiprintf_r+0x198>
 801bdb2:	2340      	movs	r3, #64	; 0x40
 801bdb4:	eba0 000a 	sub.w	r0, r0, sl
 801bdb8:	fa03 f000 	lsl.w	r0, r3, r0
 801bdbc:	9b04      	ldr	r3, [sp, #16]
 801bdbe:	4303      	orrs	r3, r0
 801bdc0:	3401      	adds	r4, #1
 801bdc2:	9304      	str	r3, [sp, #16]
 801bdc4:	f814 1b01 	ldrb.w	r1, [r4], #1
 801bdc8:	482c      	ldr	r0, [pc, #176]	; (801be7c <_vfiprintf_r+0x250>)
 801bdca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801bdce:	2206      	movs	r2, #6
 801bdd0:	f7e4 fa16 	bl	8000200 <memchr>
 801bdd4:	2800      	cmp	r0, #0
 801bdd6:	d03f      	beq.n	801be58 <_vfiprintf_r+0x22c>
 801bdd8:	4b29      	ldr	r3, [pc, #164]	; (801be80 <_vfiprintf_r+0x254>)
 801bdda:	bb1b      	cbnz	r3, 801be24 <_vfiprintf_r+0x1f8>
 801bddc:	9b03      	ldr	r3, [sp, #12]
 801bdde:	3307      	adds	r3, #7
 801bde0:	f023 0307 	bic.w	r3, r3, #7
 801bde4:	3308      	adds	r3, #8
 801bde6:	9303      	str	r3, [sp, #12]
 801bde8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bdea:	443b      	add	r3, r7
 801bdec:	9309      	str	r3, [sp, #36]	; 0x24
 801bdee:	e767      	b.n	801bcc0 <_vfiprintf_r+0x94>
 801bdf0:	fb0c 3202 	mla	r2, ip, r2, r3
 801bdf4:	460c      	mov	r4, r1
 801bdf6:	2001      	movs	r0, #1
 801bdf8:	e7a5      	b.n	801bd46 <_vfiprintf_r+0x11a>
 801bdfa:	2300      	movs	r3, #0
 801bdfc:	3401      	adds	r4, #1
 801bdfe:	9305      	str	r3, [sp, #20]
 801be00:	4619      	mov	r1, r3
 801be02:	f04f 0c0a 	mov.w	ip, #10
 801be06:	4620      	mov	r0, r4
 801be08:	f810 2b01 	ldrb.w	r2, [r0], #1
 801be0c:	3a30      	subs	r2, #48	; 0x30
 801be0e:	2a09      	cmp	r2, #9
 801be10:	d903      	bls.n	801be1a <_vfiprintf_r+0x1ee>
 801be12:	2b00      	cmp	r3, #0
 801be14:	d0c5      	beq.n	801bda2 <_vfiprintf_r+0x176>
 801be16:	9105      	str	r1, [sp, #20]
 801be18:	e7c3      	b.n	801bda2 <_vfiprintf_r+0x176>
 801be1a:	fb0c 2101 	mla	r1, ip, r1, r2
 801be1e:	4604      	mov	r4, r0
 801be20:	2301      	movs	r3, #1
 801be22:	e7f0      	b.n	801be06 <_vfiprintf_r+0x1da>
 801be24:	ab03      	add	r3, sp, #12
 801be26:	9300      	str	r3, [sp, #0]
 801be28:	462a      	mov	r2, r5
 801be2a:	4b16      	ldr	r3, [pc, #88]	; (801be84 <_vfiprintf_r+0x258>)
 801be2c:	a904      	add	r1, sp, #16
 801be2e:	4630      	mov	r0, r6
 801be30:	f7fc fa02 	bl	8018238 <_printf_float>
 801be34:	4607      	mov	r7, r0
 801be36:	1c78      	adds	r0, r7, #1
 801be38:	d1d6      	bne.n	801bde8 <_vfiprintf_r+0x1bc>
 801be3a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801be3c:	07d9      	lsls	r1, r3, #31
 801be3e:	d405      	bmi.n	801be4c <_vfiprintf_r+0x220>
 801be40:	89ab      	ldrh	r3, [r5, #12]
 801be42:	059a      	lsls	r2, r3, #22
 801be44:	d402      	bmi.n	801be4c <_vfiprintf_r+0x220>
 801be46:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801be48:	f7ff f880 	bl	801af4c <__retarget_lock_release_recursive>
 801be4c:	89ab      	ldrh	r3, [r5, #12]
 801be4e:	065b      	lsls	r3, r3, #25
 801be50:	f53f af12 	bmi.w	801bc78 <_vfiprintf_r+0x4c>
 801be54:	9809      	ldr	r0, [sp, #36]	; 0x24
 801be56:	e711      	b.n	801bc7c <_vfiprintf_r+0x50>
 801be58:	ab03      	add	r3, sp, #12
 801be5a:	9300      	str	r3, [sp, #0]
 801be5c:	462a      	mov	r2, r5
 801be5e:	4b09      	ldr	r3, [pc, #36]	; (801be84 <_vfiprintf_r+0x258>)
 801be60:	a904      	add	r1, sp, #16
 801be62:	4630      	mov	r0, r6
 801be64:	f7fc fc8c 	bl	8018780 <_printf_i>
 801be68:	e7e4      	b.n	801be34 <_vfiprintf_r+0x208>
 801be6a:	bf00      	nop
 801be6c:	08021184 	.word	0x08021184
 801be70:	080211a4 	.word	0x080211a4
 801be74:	08021164 	.word	0x08021164
 801be78:	080213a4 	.word	0x080213a4
 801be7c:	080213ae 	.word	0x080213ae
 801be80:	08018239 	.word	0x08018239
 801be84:	0801bc07 	.word	0x0801bc07
 801be88:	080213aa 	.word	0x080213aa
 801be8c:	00000000 	.word	0x00000000

0801be90 <nan>:
 801be90:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801be98 <nan+0x8>
 801be94:	4770      	bx	lr
 801be96:	bf00      	nop
 801be98:	00000000 	.word	0x00000000
 801be9c:	7ff80000 	.word	0x7ff80000

0801bea0 <__sread>:
 801bea0:	b510      	push	{r4, lr}
 801bea2:	460c      	mov	r4, r1
 801bea4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801bea8:	f000 fa94 	bl	801c3d4 <_read_r>
 801beac:	2800      	cmp	r0, #0
 801beae:	bfab      	itete	ge
 801beb0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801beb2:	89a3      	ldrhlt	r3, [r4, #12]
 801beb4:	181b      	addge	r3, r3, r0
 801beb6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801beba:	bfac      	ite	ge
 801bebc:	6563      	strge	r3, [r4, #84]	; 0x54
 801bebe:	81a3      	strhlt	r3, [r4, #12]
 801bec0:	bd10      	pop	{r4, pc}

0801bec2 <__swrite>:
 801bec2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bec6:	461f      	mov	r7, r3
 801bec8:	898b      	ldrh	r3, [r1, #12]
 801beca:	05db      	lsls	r3, r3, #23
 801becc:	4605      	mov	r5, r0
 801bece:	460c      	mov	r4, r1
 801bed0:	4616      	mov	r6, r2
 801bed2:	d505      	bpl.n	801bee0 <__swrite+0x1e>
 801bed4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801bed8:	2302      	movs	r3, #2
 801beda:	2200      	movs	r2, #0
 801bedc:	f000 f9de 	bl	801c29c <_lseek_r>
 801bee0:	89a3      	ldrh	r3, [r4, #12]
 801bee2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801bee6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801beea:	81a3      	strh	r3, [r4, #12]
 801beec:	4632      	mov	r2, r6
 801beee:	463b      	mov	r3, r7
 801bef0:	4628      	mov	r0, r5
 801bef2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801bef6:	f000 b877 	b.w	801bfe8 <_write_r>

0801befa <__sseek>:
 801befa:	b510      	push	{r4, lr}
 801befc:	460c      	mov	r4, r1
 801befe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801bf02:	f000 f9cb 	bl	801c29c <_lseek_r>
 801bf06:	1c43      	adds	r3, r0, #1
 801bf08:	89a3      	ldrh	r3, [r4, #12]
 801bf0a:	bf15      	itete	ne
 801bf0c:	6560      	strne	r0, [r4, #84]	; 0x54
 801bf0e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801bf12:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801bf16:	81a3      	strheq	r3, [r4, #12]
 801bf18:	bf18      	it	ne
 801bf1a:	81a3      	strhne	r3, [r4, #12]
 801bf1c:	bd10      	pop	{r4, pc}

0801bf1e <__sclose>:
 801bf1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801bf22:	f000 b8e9 	b.w	801c0f8 <_close_r>
	...

0801bf28 <__swbuf_r>:
 801bf28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bf2a:	460e      	mov	r6, r1
 801bf2c:	4614      	mov	r4, r2
 801bf2e:	4605      	mov	r5, r0
 801bf30:	b118      	cbz	r0, 801bf3a <__swbuf_r+0x12>
 801bf32:	6983      	ldr	r3, [r0, #24]
 801bf34:	b90b      	cbnz	r3, 801bf3a <__swbuf_r+0x12>
 801bf36:	f7fe fbe5 	bl	801a704 <__sinit>
 801bf3a:	4b21      	ldr	r3, [pc, #132]	; (801bfc0 <__swbuf_r+0x98>)
 801bf3c:	429c      	cmp	r4, r3
 801bf3e:	d12b      	bne.n	801bf98 <__swbuf_r+0x70>
 801bf40:	686c      	ldr	r4, [r5, #4]
 801bf42:	69a3      	ldr	r3, [r4, #24]
 801bf44:	60a3      	str	r3, [r4, #8]
 801bf46:	89a3      	ldrh	r3, [r4, #12]
 801bf48:	071a      	lsls	r2, r3, #28
 801bf4a:	d52f      	bpl.n	801bfac <__swbuf_r+0x84>
 801bf4c:	6923      	ldr	r3, [r4, #16]
 801bf4e:	b36b      	cbz	r3, 801bfac <__swbuf_r+0x84>
 801bf50:	6923      	ldr	r3, [r4, #16]
 801bf52:	6820      	ldr	r0, [r4, #0]
 801bf54:	1ac0      	subs	r0, r0, r3
 801bf56:	6963      	ldr	r3, [r4, #20]
 801bf58:	b2f6      	uxtb	r6, r6
 801bf5a:	4283      	cmp	r3, r0
 801bf5c:	4637      	mov	r7, r6
 801bf5e:	dc04      	bgt.n	801bf6a <__swbuf_r+0x42>
 801bf60:	4621      	mov	r1, r4
 801bf62:	4628      	mov	r0, r5
 801bf64:	f000 f95e 	bl	801c224 <_fflush_r>
 801bf68:	bb30      	cbnz	r0, 801bfb8 <__swbuf_r+0x90>
 801bf6a:	68a3      	ldr	r3, [r4, #8]
 801bf6c:	3b01      	subs	r3, #1
 801bf6e:	60a3      	str	r3, [r4, #8]
 801bf70:	6823      	ldr	r3, [r4, #0]
 801bf72:	1c5a      	adds	r2, r3, #1
 801bf74:	6022      	str	r2, [r4, #0]
 801bf76:	701e      	strb	r6, [r3, #0]
 801bf78:	6963      	ldr	r3, [r4, #20]
 801bf7a:	3001      	adds	r0, #1
 801bf7c:	4283      	cmp	r3, r0
 801bf7e:	d004      	beq.n	801bf8a <__swbuf_r+0x62>
 801bf80:	89a3      	ldrh	r3, [r4, #12]
 801bf82:	07db      	lsls	r3, r3, #31
 801bf84:	d506      	bpl.n	801bf94 <__swbuf_r+0x6c>
 801bf86:	2e0a      	cmp	r6, #10
 801bf88:	d104      	bne.n	801bf94 <__swbuf_r+0x6c>
 801bf8a:	4621      	mov	r1, r4
 801bf8c:	4628      	mov	r0, r5
 801bf8e:	f000 f949 	bl	801c224 <_fflush_r>
 801bf92:	b988      	cbnz	r0, 801bfb8 <__swbuf_r+0x90>
 801bf94:	4638      	mov	r0, r7
 801bf96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bf98:	4b0a      	ldr	r3, [pc, #40]	; (801bfc4 <__swbuf_r+0x9c>)
 801bf9a:	429c      	cmp	r4, r3
 801bf9c:	d101      	bne.n	801bfa2 <__swbuf_r+0x7a>
 801bf9e:	68ac      	ldr	r4, [r5, #8]
 801bfa0:	e7cf      	b.n	801bf42 <__swbuf_r+0x1a>
 801bfa2:	4b09      	ldr	r3, [pc, #36]	; (801bfc8 <__swbuf_r+0xa0>)
 801bfa4:	429c      	cmp	r4, r3
 801bfa6:	bf08      	it	eq
 801bfa8:	68ec      	ldreq	r4, [r5, #12]
 801bfaa:	e7ca      	b.n	801bf42 <__swbuf_r+0x1a>
 801bfac:	4621      	mov	r1, r4
 801bfae:	4628      	mov	r0, r5
 801bfb0:	f000 f82c 	bl	801c00c <__swsetup_r>
 801bfb4:	2800      	cmp	r0, #0
 801bfb6:	d0cb      	beq.n	801bf50 <__swbuf_r+0x28>
 801bfb8:	f04f 37ff 	mov.w	r7, #4294967295
 801bfbc:	e7ea      	b.n	801bf94 <__swbuf_r+0x6c>
 801bfbe:	bf00      	nop
 801bfc0:	08021184 	.word	0x08021184
 801bfc4:	080211a4 	.word	0x080211a4
 801bfc8:	08021164 	.word	0x08021164

0801bfcc <__ascii_wctomb>:
 801bfcc:	b149      	cbz	r1, 801bfe2 <__ascii_wctomb+0x16>
 801bfce:	2aff      	cmp	r2, #255	; 0xff
 801bfd0:	bf85      	ittet	hi
 801bfd2:	238a      	movhi	r3, #138	; 0x8a
 801bfd4:	6003      	strhi	r3, [r0, #0]
 801bfd6:	700a      	strbls	r2, [r1, #0]
 801bfd8:	f04f 30ff 	movhi.w	r0, #4294967295
 801bfdc:	bf98      	it	ls
 801bfde:	2001      	movls	r0, #1
 801bfe0:	4770      	bx	lr
 801bfe2:	4608      	mov	r0, r1
 801bfe4:	4770      	bx	lr
	...

0801bfe8 <_write_r>:
 801bfe8:	b538      	push	{r3, r4, r5, lr}
 801bfea:	4d07      	ldr	r5, [pc, #28]	; (801c008 <_write_r+0x20>)
 801bfec:	4604      	mov	r4, r0
 801bfee:	4608      	mov	r0, r1
 801bff0:	4611      	mov	r1, r2
 801bff2:	2200      	movs	r2, #0
 801bff4:	602a      	str	r2, [r5, #0]
 801bff6:	461a      	mov	r2, r3
 801bff8:	f7e9 fa79 	bl	80054ee <_write>
 801bffc:	1c43      	adds	r3, r0, #1
 801bffe:	d102      	bne.n	801c006 <_write_r+0x1e>
 801c000:	682b      	ldr	r3, [r5, #0]
 801c002:	b103      	cbz	r3, 801c006 <_write_r+0x1e>
 801c004:	6023      	str	r3, [r4, #0]
 801c006:	bd38      	pop	{r3, r4, r5, pc}
 801c008:	20007194 	.word	0x20007194

0801c00c <__swsetup_r>:
 801c00c:	4b32      	ldr	r3, [pc, #200]	; (801c0d8 <__swsetup_r+0xcc>)
 801c00e:	b570      	push	{r4, r5, r6, lr}
 801c010:	681d      	ldr	r5, [r3, #0]
 801c012:	4606      	mov	r6, r0
 801c014:	460c      	mov	r4, r1
 801c016:	b125      	cbz	r5, 801c022 <__swsetup_r+0x16>
 801c018:	69ab      	ldr	r3, [r5, #24]
 801c01a:	b913      	cbnz	r3, 801c022 <__swsetup_r+0x16>
 801c01c:	4628      	mov	r0, r5
 801c01e:	f7fe fb71 	bl	801a704 <__sinit>
 801c022:	4b2e      	ldr	r3, [pc, #184]	; (801c0dc <__swsetup_r+0xd0>)
 801c024:	429c      	cmp	r4, r3
 801c026:	d10f      	bne.n	801c048 <__swsetup_r+0x3c>
 801c028:	686c      	ldr	r4, [r5, #4]
 801c02a:	89a3      	ldrh	r3, [r4, #12]
 801c02c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801c030:	0719      	lsls	r1, r3, #28
 801c032:	d42c      	bmi.n	801c08e <__swsetup_r+0x82>
 801c034:	06dd      	lsls	r5, r3, #27
 801c036:	d411      	bmi.n	801c05c <__swsetup_r+0x50>
 801c038:	2309      	movs	r3, #9
 801c03a:	6033      	str	r3, [r6, #0]
 801c03c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801c040:	81a3      	strh	r3, [r4, #12]
 801c042:	f04f 30ff 	mov.w	r0, #4294967295
 801c046:	e03e      	b.n	801c0c6 <__swsetup_r+0xba>
 801c048:	4b25      	ldr	r3, [pc, #148]	; (801c0e0 <__swsetup_r+0xd4>)
 801c04a:	429c      	cmp	r4, r3
 801c04c:	d101      	bne.n	801c052 <__swsetup_r+0x46>
 801c04e:	68ac      	ldr	r4, [r5, #8]
 801c050:	e7eb      	b.n	801c02a <__swsetup_r+0x1e>
 801c052:	4b24      	ldr	r3, [pc, #144]	; (801c0e4 <__swsetup_r+0xd8>)
 801c054:	429c      	cmp	r4, r3
 801c056:	bf08      	it	eq
 801c058:	68ec      	ldreq	r4, [r5, #12]
 801c05a:	e7e6      	b.n	801c02a <__swsetup_r+0x1e>
 801c05c:	0758      	lsls	r0, r3, #29
 801c05e:	d512      	bpl.n	801c086 <__swsetup_r+0x7a>
 801c060:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801c062:	b141      	cbz	r1, 801c076 <__swsetup_r+0x6a>
 801c064:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801c068:	4299      	cmp	r1, r3
 801c06a:	d002      	beq.n	801c072 <__swsetup_r+0x66>
 801c06c:	4630      	mov	r0, r6
 801c06e:	f7fb ff99 	bl	8017fa4 <_free_r>
 801c072:	2300      	movs	r3, #0
 801c074:	6363      	str	r3, [r4, #52]	; 0x34
 801c076:	89a3      	ldrh	r3, [r4, #12]
 801c078:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801c07c:	81a3      	strh	r3, [r4, #12]
 801c07e:	2300      	movs	r3, #0
 801c080:	6063      	str	r3, [r4, #4]
 801c082:	6923      	ldr	r3, [r4, #16]
 801c084:	6023      	str	r3, [r4, #0]
 801c086:	89a3      	ldrh	r3, [r4, #12]
 801c088:	f043 0308 	orr.w	r3, r3, #8
 801c08c:	81a3      	strh	r3, [r4, #12]
 801c08e:	6923      	ldr	r3, [r4, #16]
 801c090:	b94b      	cbnz	r3, 801c0a6 <__swsetup_r+0x9a>
 801c092:	89a3      	ldrh	r3, [r4, #12]
 801c094:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801c098:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801c09c:	d003      	beq.n	801c0a6 <__swsetup_r+0x9a>
 801c09e:	4621      	mov	r1, r4
 801c0a0:	4630      	mov	r0, r6
 801c0a2:	f000 f931 	bl	801c308 <__smakebuf_r>
 801c0a6:	89a0      	ldrh	r0, [r4, #12]
 801c0a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801c0ac:	f010 0301 	ands.w	r3, r0, #1
 801c0b0:	d00a      	beq.n	801c0c8 <__swsetup_r+0xbc>
 801c0b2:	2300      	movs	r3, #0
 801c0b4:	60a3      	str	r3, [r4, #8]
 801c0b6:	6963      	ldr	r3, [r4, #20]
 801c0b8:	425b      	negs	r3, r3
 801c0ba:	61a3      	str	r3, [r4, #24]
 801c0bc:	6923      	ldr	r3, [r4, #16]
 801c0be:	b943      	cbnz	r3, 801c0d2 <__swsetup_r+0xc6>
 801c0c0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801c0c4:	d1ba      	bne.n	801c03c <__swsetup_r+0x30>
 801c0c6:	bd70      	pop	{r4, r5, r6, pc}
 801c0c8:	0781      	lsls	r1, r0, #30
 801c0ca:	bf58      	it	pl
 801c0cc:	6963      	ldrpl	r3, [r4, #20]
 801c0ce:	60a3      	str	r3, [r4, #8]
 801c0d0:	e7f4      	b.n	801c0bc <__swsetup_r+0xb0>
 801c0d2:	2000      	movs	r0, #0
 801c0d4:	e7f7      	b.n	801c0c6 <__swsetup_r+0xba>
 801c0d6:	bf00      	nop
 801c0d8:	20000074 	.word	0x20000074
 801c0dc:	08021184 	.word	0x08021184
 801c0e0:	080211a4 	.word	0x080211a4
 801c0e4:	08021164 	.word	0x08021164

0801c0e8 <abort>:
 801c0e8:	b508      	push	{r3, lr}
 801c0ea:	2006      	movs	r0, #6
 801c0ec:	f000 f9ac 	bl	801c448 <raise>
 801c0f0:	2001      	movs	r0, #1
 801c0f2:	f7e9 f9d5 	bl	80054a0 <_exit>
	...

0801c0f8 <_close_r>:
 801c0f8:	b538      	push	{r3, r4, r5, lr}
 801c0fa:	4d06      	ldr	r5, [pc, #24]	; (801c114 <_close_r+0x1c>)
 801c0fc:	2300      	movs	r3, #0
 801c0fe:	4604      	mov	r4, r0
 801c100:	4608      	mov	r0, r1
 801c102:	602b      	str	r3, [r5, #0]
 801c104:	f7e9 fa0f 	bl	8005526 <_close>
 801c108:	1c43      	adds	r3, r0, #1
 801c10a:	d102      	bne.n	801c112 <_close_r+0x1a>
 801c10c:	682b      	ldr	r3, [r5, #0]
 801c10e:	b103      	cbz	r3, 801c112 <_close_r+0x1a>
 801c110:	6023      	str	r3, [r4, #0]
 801c112:	bd38      	pop	{r3, r4, r5, pc}
 801c114:	20007194 	.word	0x20007194

0801c118 <__sflush_r>:
 801c118:	898a      	ldrh	r2, [r1, #12]
 801c11a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c11e:	4605      	mov	r5, r0
 801c120:	0710      	lsls	r0, r2, #28
 801c122:	460c      	mov	r4, r1
 801c124:	d458      	bmi.n	801c1d8 <__sflush_r+0xc0>
 801c126:	684b      	ldr	r3, [r1, #4]
 801c128:	2b00      	cmp	r3, #0
 801c12a:	dc05      	bgt.n	801c138 <__sflush_r+0x20>
 801c12c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801c12e:	2b00      	cmp	r3, #0
 801c130:	dc02      	bgt.n	801c138 <__sflush_r+0x20>
 801c132:	2000      	movs	r0, #0
 801c134:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c138:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801c13a:	2e00      	cmp	r6, #0
 801c13c:	d0f9      	beq.n	801c132 <__sflush_r+0x1a>
 801c13e:	2300      	movs	r3, #0
 801c140:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801c144:	682f      	ldr	r7, [r5, #0]
 801c146:	602b      	str	r3, [r5, #0]
 801c148:	d032      	beq.n	801c1b0 <__sflush_r+0x98>
 801c14a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801c14c:	89a3      	ldrh	r3, [r4, #12]
 801c14e:	075a      	lsls	r2, r3, #29
 801c150:	d505      	bpl.n	801c15e <__sflush_r+0x46>
 801c152:	6863      	ldr	r3, [r4, #4]
 801c154:	1ac0      	subs	r0, r0, r3
 801c156:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801c158:	b10b      	cbz	r3, 801c15e <__sflush_r+0x46>
 801c15a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801c15c:	1ac0      	subs	r0, r0, r3
 801c15e:	2300      	movs	r3, #0
 801c160:	4602      	mov	r2, r0
 801c162:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801c164:	6a21      	ldr	r1, [r4, #32]
 801c166:	4628      	mov	r0, r5
 801c168:	47b0      	blx	r6
 801c16a:	1c43      	adds	r3, r0, #1
 801c16c:	89a3      	ldrh	r3, [r4, #12]
 801c16e:	d106      	bne.n	801c17e <__sflush_r+0x66>
 801c170:	6829      	ldr	r1, [r5, #0]
 801c172:	291d      	cmp	r1, #29
 801c174:	d82c      	bhi.n	801c1d0 <__sflush_r+0xb8>
 801c176:	4a2a      	ldr	r2, [pc, #168]	; (801c220 <__sflush_r+0x108>)
 801c178:	40ca      	lsrs	r2, r1
 801c17a:	07d6      	lsls	r6, r2, #31
 801c17c:	d528      	bpl.n	801c1d0 <__sflush_r+0xb8>
 801c17e:	2200      	movs	r2, #0
 801c180:	6062      	str	r2, [r4, #4]
 801c182:	04d9      	lsls	r1, r3, #19
 801c184:	6922      	ldr	r2, [r4, #16]
 801c186:	6022      	str	r2, [r4, #0]
 801c188:	d504      	bpl.n	801c194 <__sflush_r+0x7c>
 801c18a:	1c42      	adds	r2, r0, #1
 801c18c:	d101      	bne.n	801c192 <__sflush_r+0x7a>
 801c18e:	682b      	ldr	r3, [r5, #0]
 801c190:	b903      	cbnz	r3, 801c194 <__sflush_r+0x7c>
 801c192:	6560      	str	r0, [r4, #84]	; 0x54
 801c194:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801c196:	602f      	str	r7, [r5, #0]
 801c198:	2900      	cmp	r1, #0
 801c19a:	d0ca      	beq.n	801c132 <__sflush_r+0x1a>
 801c19c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801c1a0:	4299      	cmp	r1, r3
 801c1a2:	d002      	beq.n	801c1aa <__sflush_r+0x92>
 801c1a4:	4628      	mov	r0, r5
 801c1a6:	f7fb fefd 	bl	8017fa4 <_free_r>
 801c1aa:	2000      	movs	r0, #0
 801c1ac:	6360      	str	r0, [r4, #52]	; 0x34
 801c1ae:	e7c1      	b.n	801c134 <__sflush_r+0x1c>
 801c1b0:	6a21      	ldr	r1, [r4, #32]
 801c1b2:	2301      	movs	r3, #1
 801c1b4:	4628      	mov	r0, r5
 801c1b6:	47b0      	blx	r6
 801c1b8:	1c41      	adds	r1, r0, #1
 801c1ba:	d1c7      	bne.n	801c14c <__sflush_r+0x34>
 801c1bc:	682b      	ldr	r3, [r5, #0]
 801c1be:	2b00      	cmp	r3, #0
 801c1c0:	d0c4      	beq.n	801c14c <__sflush_r+0x34>
 801c1c2:	2b1d      	cmp	r3, #29
 801c1c4:	d001      	beq.n	801c1ca <__sflush_r+0xb2>
 801c1c6:	2b16      	cmp	r3, #22
 801c1c8:	d101      	bne.n	801c1ce <__sflush_r+0xb6>
 801c1ca:	602f      	str	r7, [r5, #0]
 801c1cc:	e7b1      	b.n	801c132 <__sflush_r+0x1a>
 801c1ce:	89a3      	ldrh	r3, [r4, #12]
 801c1d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801c1d4:	81a3      	strh	r3, [r4, #12]
 801c1d6:	e7ad      	b.n	801c134 <__sflush_r+0x1c>
 801c1d8:	690f      	ldr	r7, [r1, #16]
 801c1da:	2f00      	cmp	r7, #0
 801c1dc:	d0a9      	beq.n	801c132 <__sflush_r+0x1a>
 801c1de:	0793      	lsls	r3, r2, #30
 801c1e0:	680e      	ldr	r6, [r1, #0]
 801c1e2:	bf08      	it	eq
 801c1e4:	694b      	ldreq	r3, [r1, #20]
 801c1e6:	600f      	str	r7, [r1, #0]
 801c1e8:	bf18      	it	ne
 801c1ea:	2300      	movne	r3, #0
 801c1ec:	eba6 0807 	sub.w	r8, r6, r7
 801c1f0:	608b      	str	r3, [r1, #8]
 801c1f2:	f1b8 0f00 	cmp.w	r8, #0
 801c1f6:	dd9c      	ble.n	801c132 <__sflush_r+0x1a>
 801c1f8:	6a21      	ldr	r1, [r4, #32]
 801c1fa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801c1fc:	4643      	mov	r3, r8
 801c1fe:	463a      	mov	r2, r7
 801c200:	4628      	mov	r0, r5
 801c202:	47b0      	blx	r6
 801c204:	2800      	cmp	r0, #0
 801c206:	dc06      	bgt.n	801c216 <__sflush_r+0xfe>
 801c208:	89a3      	ldrh	r3, [r4, #12]
 801c20a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801c20e:	81a3      	strh	r3, [r4, #12]
 801c210:	f04f 30ff 	mov.w	r0, #4294967295
 801c214:	e78e      	b.n	801c134 <__sflush_r+0x1c>
 801c216:	4407      	add	r7, r0
 801c218:	eba8 0800 	sub.w	r8, r8, r0
 801c21c:	e7e9      	b.n	801c1f2 <__sflush_r+0xda>
 801c21e:	bf00      	nop
 801c220:	20400001 	.word	0x20400001

0801c224 <_fflush_r>:
 801c224:	b538      	push	{r3, r4, r5, lr}
 801c226:	690b      	ldr	r3, [r1, #16]
 801c228:	4605      	mov	r5, r0
 801c22a:	460c      	mov	r4, r1
 801c22c:	b913      	cbnz	r3, 801c234 <_fflush_r+0x10>
 801c22e:	2500      	movs	r5, #0
 801c230:	4628      	mov	r0, r5
 801c232:	bd38      	pop	{r3, r4, r5, pc}
 801c234:	b118      	cbz	r0, 801c23e <_fflush_r+0x1a>
 801c236:	6983      	ldr	r3, [r0, #24]
 801c238:	b90b      	cbnz	r3, 801c23e <_fflush_r+0x1a>
 801c23a:	f7fe fa63 	bl	801a704 <__sinit>
 801c23e:	4b14      	ldr	r3, [pc, #80]	; (801c290 <_fflush_r+0x6c>)
 801c240:	429c      	cmp	r4, r3
 801c242:	d11b      	bne.n	801c27c <_fflush_r+0x58>
 801c244:	686c      	ldr	r4, [r5, #4]
 801c246:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c24a:	2b00      	cmp	r3, #0
 801c24c:	d0ef      	beq.n	801c22e <_fflush_r+0xa>
 801c24e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801c250:	07d0      	lsls	r0, r2, #31
 801c252:	d404      	bmi.n	801c25e <_fflush_r+0x3a>
 801c254:	0599      	lsls	r1, r3, #22
 801c256:	d402      	bmi.n	801c25e <_fflush_r+0x3a>
 801c258:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801c25a:	f7fe fe76 	bl	801af4a <__retarget_lock_acquire_recursive>
 801c25e:	4628      	mov	r0, r5
 801c260:	4621      	mov	r1, r4
 801c262:	f7ff ff59 	bl	801c118 <__sflush_r>
 801c266:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801c268:	07da      	lsls	r2, r3, #31
 801c26a:	4605      	mov	r5, r0
 801c26c:	d4e0      	bmi.n	801c230 <_fflush_r+0xc>
 801c26e:	89a3      	ldrh	r3, [r4, #12]
 801c270:	059b      	lsls	r3, r3, #22
 801c272:	d4dd      	bmi.n	801c230 <_fflush_r+0xc>
 801c274:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801c276:	f7fe fe69 	bl	801af4c <__retarget_lock_release_recursive>
 801c27a:	e7d9      	b.n	801c230 <_fflush_r+0xc>
 801c27c:	4b05      	ldr	r3, [pc, #20]	; (801c294 <_fflush_r+0x70>)
 801c27e:	429c      	cmp	r4, r3
 801c280:	d101      	bne.n	801c286 <_fflush_r+0x62>
 801c282:	68ac      	ldr	r4, [r5, #8]
 801c284:	e7df      	b.n	801c246 <_fflush_r+0x22>
 801c286:	4b04      	ldr	r3, [pc, #16]	; (801c298 <_fflush_r+0x74>)
 801c288:	429c      	cmp	r4, r3
 801c28a:	bf08      	it	eq
 801c28c:	68ec      	ldreq	r4, [r5, #12]
 801c28e:	e7da      	b.n	801c246 <_fflush_r+0x22>
 801c290:	08021184 	.word	0x08021184
 801c294:	080211a4 	.word	0x080211a4
 801c298:	08021164 	.word	0x08021164

0801c29c <_lseek_r>:
 801c29c:	b538      	push	{r3, r4, r5, lr}
 801c29e:	4d07      	ldr	r5, [pc, #28]	; (801c2bc <_lseek_r+0x20>)
 801c2a0:	4604      	mov	r4, r0
 801c2a2:	4608      	mov	r0, r1
 801c2a4:	4611      	mov	r1, r2
 801c2a6:	2200      	movs	r2, #0
 801c2a8:	602a      	str	r2, [r5, #0]
 801c2aa:	461a      	mov	r2, r3
 801c2ac:	f7e9 f962 	bl	8005574 <_lseek>
 801c2b0:	1c43      	adds	r3, r0, #1
 801c2b2:	d102      	bne.n	801c2ba <_lseek_r+0x1e>
 801c2b4:	682b      	ldr	r3, [r5, #0]
 801c2b6:	b103      	cbz	r3, 801c2ba <_lseek_r+0x1e>
 801c2b8:	6023      	str	r3, [r4, #0]
 801c2ba:	bd38      	pop	{r3, r4, r5, pc}
 801c2bc:	20007194 	.word	0x20007194

0801c2c0 <__swhatbuf_r>:
 801c2c0:	b570      	push	{r4, r5, r6, lr}
 801c2c2:	460e      	mov	r6, r1
 801c2c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c2c8:	2900      	cmp	r1, #0
 801c2ca:	b096      	sub	sp, #88	; 0x58
 801c2cc:	4614      	mov	r4, r2
 801c2ce:	461d      	mov	r5, r3
 801c2d0:	da07      	bge.n	801c2e2 <__swhatbuf_r+0x22>
 801c2d2:	2300      	movs	r3, #0
 801c2d4:	602b      	str	r3, [r5, #0]
 801c2d6:	89b3      	ldrh	r3, [r6, #12]
 801c2d8:	061a      	lsls	r2, r3, #24
 801c2da:	d410      	bmi.n	801c2fe <__swhatbuf_r+0x3e>
 801c2dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801c2e0:	e00e      	b.n	801c300 <__swhatbuf_r+0x40>
 801c2e2:	466a      	mov	r2, sp
 801c2e4:	f000 f8cc 	bl	801c480 <_fstat_r>
 801c2e8:	2800      	cmp	r0, #0
 801c2ea:	dbf2      	blt.n	801c2d2 <__swhatbuf_r+0x12>
 801c2ec:	9a01      	ldr	r2, [sp, #4]
 801c2ee:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801c2f2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801c2f6:	425a      	negs	r2, r3
 801c2f8:	415a      	adcs	r2, r3
 801c2fa:	602a      	str	r2, [r5, #0]
 801c2fc:	e7ee      	b.n	801c2dc <__swhatbuf_r+0x1c>
 801c2fe:	2340      	movs	r3, #64	; 0x40
 801c300:	2000      	movs	r0, #0
 801c302:	6023      	str	r3, [r4, #0]
 801c304:	b016      	add	sp, #88	; 0x58
 801c306:	bd70      	pop	{r4, r5, r6, pc}

0801c308 <__smakebuf_r>:
 801c308:	898b      	ldrh	r3, [r1, #12]
 801c30a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801c30c:	079d      	lsls	r5, r3, #30
 801c30e:	4606      	mov	r6, r0
 801c310:	460c      	mov	r4, r1
 801c312:	d507      	bpl.n	801c324 <__smakebuf_r+0x1c>
 801c314:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801c318:	6023      	str	r3, [r4, #0]
 801c31a:	6123      	str	r3, [r4, #16]
 801c31c:	2301      	movs	r3, #1
 801c31e:	6163      	str	r3, [r4, #20]
 801c320:	b002      	add	sp, #8
 801c322:	bd70      	pop	{r4, r5, r6, pc}
 801c324:	ab01      	add	r3, sp, #4
 801c326:	466a      	mov	r2, sp
 801c328:	f7ff ffca 	bl	801c2c0 <__swhatbuf_r>
 801c32c:	9900      	ldr	r1, [sp, #0]
 801c32e:	4605      	mov	r5, r0
 801c330:	4630      	mov	r0, r6
 801c332:	f7fb fe87 	bl	8018044 <_malloc_r>
 801c336:	b948      	cbnz	r0, 801c34c <__smakebuf_r+0x44>
 801c338:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c33c:	059a      	lsls	r2, r3, #22
 801c33e:	d4ef      	bmi.n	801c320 <__smakebuf_r+0x18>
 801c340:	f023 0303 	bic.w	r3, r3, #3
 801c344:	f043 0302 	orr.w	r3, r3, #2
 801c348:	81a3      	strh	r3, [r4, #12]
 801c34a:	e7e3      	b.n	801c314 <__smakebuf_r+0xc>
 801c34c:	4b0d      	ldr	r3, [pc, #52]	; (801c384 <__smakebuf_r+0x7c>)
 801c34e:	62b3      	str	r3, [r6, #40]	; 0x28
 801c350:	89a3      	ldrh	r3, [r4, #12]
 801c352:	6020      	str	r0, [r4, #0]
 801c354:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801c358:	81a3      	strh	r3, [r4, #12]
 801c35a:	9b00      	ldr	r3, [sp, #0]
 801c35c:	6163      	str	r3, [r4, #20]
 801c35e:	9b01      	ldr	r3, [sp, #4]
 801c360:	6120      	str	r0, [r4, #16]
 801c362:	b15b      	cbz	r3, 801c37c <__smakebuf_r+0x74>
 801c364:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801c368:	4630      	mov	r0, r6
 801c36a:	f000 f89b 	bl	801c4a4 <_isatty_r>
 801c36e:	b128      	cbz	r0, 801c37c <__smakebuf_r+0x74>
 801c370:	89a3      	ldrh	r3, [r4, #12]
 801c372:	f023 0303 	bic.w	r3, r3, #3
 801c376:	f043 0301 	orr.w	r3, r3, #1
 801c37a:	81a3      	strh	r3, [r4, #12]
 801c37c:	89a0      	ldrh	r0, [r4, #12]
 801c37e:	4305      	orrs	r5, r0
 801c380:	81a5      	strh	r5, [r4, #12]
 801c382:	e7cd      	b.n	801c320 <__smakebuf_r+0x18>
 801c384:	0801a69d 	.word	0x0801a69d

0801c388 <_realloc_r>:
 801c388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c38a:	4607      	mov	r7, r0
 801c38c:	4614      	mov	r4, r2
 801c38e:	460e      	mov	r6, r1
 801c390:	b921      	cbnz	r1, 801c39c <_realloc_r+0x14>
 801c392:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801c396:	4611      	mov	r1, r2
 801c398:	f7fb be54 	b.w	8018044 <_malloc_r>
 801c39c:	b922      	cbnz	r2, 801c3a8 <_realloc_r+0x20>
 801c39e:	f7fb fe01 	bl	8017fa4 <_free_r>
 801c3a2:	4625      	mov	r5, r4
 801c3a4:	4628      	mov	r0, r5
 801c3a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c3a8:	f000 f88c 	bl	801c4c4 <_malloc_usable_size_r>
 801c3ac:	42a0      	cmp	r0, r4
 801c3ae:	d20f      	bcs.n	801c3d0 <_realloc_r+0x48>
 801c3b0:	4621      	mov	r1, r4
 801c3b2:	4638      	mov	r0, r7
 801c3b4:	f7fb fe46 	bl	8018044 <_malloc_r>
 801c3b8:	4605      	mov	r5, r0
 801c3ba:	2800      	cmp	r0, #0
 801c3bc:	d0f2      	beq.n	801c3a4 <_realloc_r+0x1c>
 801c3be:	4631      	mov	r1, r6
 801c3c0:	4622      	mov	r2, r4
 801c3c2:	f7fb fdbf 	bl	8017f44 <memcpy>
 801c3c6:	4631      	mov	r1, r6
 801c3c8:	4638      	mov	r0, r7
 801c3ca:	f7fb fdeb 	bl	8017fa4 <_free_r>
 801c3ce:	e7e9      	b.n	801c3a4 <_realloc_r+0x1c>
 801c3d0:	4635      	mov	r5, r6
 801c3d2:	e7e7      	b.n	801c3a4 <_realloc_r+0x1c>

0801c3d4 <_read_r>:
 801c3d4:	b538      	push	{r3, r4, r5, lr}
 801c3d6:	4d07      	ldr	r5, [pc, #28]	; (801c3f4 <_read_r+0x20>)
 801c3d8:	4604      	mov	r4, r0
 801c3da:	4608      	mov	r0, r1
 801c3dc:	4611      	mov	r1, r2
 801c3de:	2200      	movs	r2, #0
 801c3e0:	602a      	str	r2, [r5, #0]
 801c3e2:	461a      	mov	r2, r3
 801c3e4:	f7e9 f866 	bl	80054b4 <_read>
 801c3e8:	1c43      	adds	r3, r0, #1
 801c3ea:	d102      	bne.n	801c3f2 <_read_r+0x1e>
 801c3ec:	682b      	ldr	r3, [r5, #0]
 801c3ee:	b103      	cbz	r3, 801c3f2 <_read_r+0x1e>
 801c3f0:	6023      	str	r3, [r4, #0]
 801c3f2:	bd38      	pop	{r3, r4, r5, pc}
 801c3f4:	20007194 	.word	0x20007194

0801c3f8 <_raise_r>:
 801c3f8:	291f      	cmp	r1, #31
 801c3fa:	b538      	push	{r3, r4, r5, lr}
 801c3fc:	4604      	mov	r4, r0
 801c3fe:	460d      	mov	r5, r1
 801c400:	d904      	bls.n	801c40c <_raise_r+0x14>
 801c402:	2316      	movs	r3, #22
 801c404:	6003      	str	r3, [r0, #0]
 801c406:	f04f 30ff 	mov.w	r0, #4294967295
 801c40a:	bd38      	pop	{r3, r4, r5, pc}
 801c40c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801c40e:	b112      	cbz	r2, 801c416 <_raise_r+0x1e>
 801c410:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801c414:	b94b      	cbnz	r3, 801c42a <_raise_r+0x32>
 801c416:	4620      	mov	r0, r4
 801c418:	f000 f830 	bl	801c47c <_getpid_r>
 801c41c:	462a      	mov	r2, r5
 801c41e:	4601      	mov	r1, r0
 801c420:	4620      	mov	r0, r4
 801c422:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801c426:	f000 b817 	b.w	801c458 <_kill_r>
 801c42a:	2b01      	cmp	r3, #1
 801c42c:	d00a      	beq.n	801c444 <_raise_r+0x4c>
 801c42e:	1c59      	adds	r1, r3, #1
 801c430:	d103      	bne.n	801c43a <_raise_r+0x42>
 801c432:	2316      	movs	r3, #22
 801c434:	6003      	str	r3, [r0, #0]
 801c436:	2001      	movs	r0, #1
 801c438:	e7e7      	b.n	801c40a <_raise_r+0x12>
 801c43a:	2400      	movs	r4, #0
 801c43c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801c440:	4628      	mov	r0, r5
 801c442:	4798      	blx	r3
 801c444:	2000      	movs	r0, #0
 801c446:	e7e0      	b.n	801c40a <_raise_r+0x12>

0801c448 <raise>:
 801c448:	4b02      	ldr	r3, [pc, #8]	; (801c454 <raise+0xc>)
 801c44a:	4601      	mov	r1, r0
 801c44c:	6818      	ldr	r0, [r3, #0]
 801c44e:	f7ff bfd3 	b.w	801c3f8 <_raise_r>
 801c452:	bf00      	nop
 801c454:	20000074 	.word	0x20000074

0801c458 <_kill_r>:
 801c458:	b538      	push	{r3, r4, r5, lr}
 801c45a:	4d07      	ldr	r5, [pc, #28]	; (801c478 <_kill_r+0x20>)
 801c45c:	2300      	movs	r3, #0
 801c45e:	4604      	mov	r4, r0
 801c460:	4608      	mov	r0, r1
 801c462:	4611      	mov	r1, r2
 801c464:	602b      	str	r3, [r5, #0]
 801c466:	f7e9 f809 	bl	800547c <_kill>
 801c46a:	1c43      	adds	r3, r0, #1
 801c46c:	d102      	bne.n	801c474 <_kill_r+0x1c>
 801c46e:	682b      	ldr	r3, [r5, #0]
 801c470:	b103      	cbz	r3, 801c474 <_kill_r+0x1c>
 801c472:	6023      	str	r3, [r4, #0]
 801c474:	bd38      	pop	{r3, r4, r5, pc}
 801c476:	bf00      	nop
 801c478:	20007194 	.word	0x20007194

0801c47c <_getpid_r>:
 801c47c:	f7e8 bff6 	b.w	800546c <_getpid>

0801c480 <_fstat_r>:
 801c480:	b538      	push	{r3, r4, r5, lr}
 801c482:	4d07      	ldr	r5, [pc, #28]	; (801c4a0 <_fstat_r+0x20>)
 801c484:	2300      	movs	r3, #0
 801c486:	4604      	mov	r4, r0
 801c488:	4608      	mov	r0, r1
 801c48a:	4611      	mov	r1, r2
 801c48c:	602b      	str	r3, [r5, #0]
 801c48e:	f7e9 f856 	bl	800553e <_fstat>
 801c492:	1c43      	adds	r3, r0, #1
 801c494:	d102      	bne.n	801c49c <_fstat_r+0x1c>
 801c496:	682b      	ldr	r3, [r5, #0]
 801c498:	b103      	cbz	r3, 801c49c <_fstat_r+0x1c>
 801c49a:	6023      	str	r3, [r4, #0]
 801c49c:	bd38      	pop	{r3, r4, r5, pc}
 801c49e:	bf00      	nop
 801c4a0:	20007194 	.word	0x20007194

0801c4a4 <_isatty_r>:
 801c4a4:	b538      	push	{r3, r4, r5, lr}
 801c4a6:	4d06      	ldr	r5, [pc, #24]	; (801c4c0 <_isatty_r+0x1c>)
 801c4a8:	2300      	movs	r3, #0
 801c4aa:	4604      	mov	r4, r0
 801c4ac:	4608      	mov	r0, r1
 801c4ae:	602b      	str	r3, [r5, #0]
 801c4b0:	f7e9 f855 	bl	800555e <_isatty>
 801c4b4:	1c43      	adds	r3, r0, #1
 801c4b6:	d102      	bne.n	801c4be <_isatty_r+0x1a>
 801c4b8:	682b      	ldr	r3, [r5, #0]
 801c4ba:	b103      	cbz	r3, 801c4be <_isatty_r+0x1a>
 801c4bc:	6023      	str	r3, [r4, #0]
 801c4be:	bd38      	pop	{r3, r4, r5, pc}
 801c4c0:	20007194 	.word	0x20007194

0801c4c4 <_malloc_usable_size_r>:
 801c4c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801c4c8:	1f18      	subs	r0, r3, #4
 801c4ca:	2b00      	cmp	r3, #0
 801c4cc:	bfbc      	itt	lt
 801c4ce:	580b      	ldrlt	r3, [r1, r0]
 801c4d0:	18c0      	addlt	r0, r0, r3
 801c4d2:	4770      	bx	lr

0801c4d4 <pow>:
 801c4d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c4d8:	ec59 8b10 	vmov	r8, r9, d0
 801c4dc:	ec57 6b11 	vmov	r6, r7, d1
 801c4e0:	f000 f8a6 	bl	801c630 <__ieee754_pow>
 801c4e4:	4b4e      	ldr	r3, [pc, #312]	; (801c620 <pow+0x14c>)
 801c4e6:	f993 3000 	ldrsb.w	r3, [r3]
 801c4ea:	3301      	adds	r3, #1
 801c4ec:	ec55 4b10 	vmov	r4, r5, d0
 801c4f0:	d015      	beq.n	801c51e <pow+0x4a>
 801c4f2:	4632      	mov	r2, r6
 801c4f4:	463b      	mov	r3, r7
 801c4f6:	4630      	mov	r0, r6
 801c4f8:	4639      	mov	r1, r7
 801c4fa:	f7e4 fb27 	bl	8000b4c <__aeabi_dcmpun>
 801c4fe:	b970      	cbnz	r0, 801c51e <pow+0x4a>
 801c500:	4642      	mov	r2, r8
 801c502:	464b      	mov	r3, r9
 801c504:	4640      	mov	r0, r8
 801c506:	4649      	mov	r1, r9
 801c508:	f7e4 fb20 	bl	8000b4c <__aeabi_dcmpun>
 801c50c:	2200      	movs	r2, #0
 801c50e:	2300      	movs	r3, #0
 801c510:	b148      	cbz	r0, 801c526 <pow+0x52>
 801c512:	4630      	mov	r0, r6
 801c514:	4639      	mov	r1, r7
 801c516:	f7e4 fae7 	bl	8000ae8 <__aeabi_dcmpeq>
 801c51a:	2800      	cmp	r0, #0
 801c51c:	d17d      	bne.n	801c61a <pow+0x146>
 801c51e:	ec45 4b10 	vmov	d0, r4, r5
 801c522:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c526:	4640      	mov	r0, r8
 801c528:	4649      	mov	r1, r9
 801c52a:	f7e4 fadd 	bl	8000ae8 <__aeabi_dcmpeq>
 801c52e:	b1e0      	cbz	r0, 801c56a <pow+0x96>
 801c530:	2200      	movs	r2, #0
 801c532:	2300      	movs	r3, #0
 801c534:	4630      	mov	r0, r6
 801c536:	4639      	mov	r1, r7
 801c538:	f7e4 fad6 	bl	8000ae8 <__aeabi_dcmpeq>
 801c53c:	2800      	cmp	r0, #0
 801c53e:	d16c      	bne.n	801c61a <pow+0x146>
 801c540:	ec47 6b10 	vmov	d0, r6, r7
 801c544:	f000 fe53 	bl	801d1ee <finite>
 801c548:	2800      	cmp	r0, #0
 801c54a:	d0e8      	beq.n	801c51e <pow+0x4a>
 801c54c:	2200      	movs	r2, #0
 801c54e:	2300      	movs	r3, #0
 801c550:	4630      	mov	r0, r6
 801c552:	4639      	mov	r1, r7
 801c554:	f7e4 fad2 	bl	8000afc <__aeabi_dcmplt>
 801c558:	2800      	cmp	r0, #0
 801c55a:	d0e0      	beq.n	801c51e <pow+0x4a>
 801c55c:	f7fe f874 	bl	801a648 <__errno>
 801c560:	2321      	movs	r3, #33	; 0x21
 801c562:	6003      	str	r3, [r0, #0]
 801c564:	2400      	movs	r4, #0
 801c566:	4d2f      	ldr	r5, [pc, #188]	; (801c624 <pow+0x150>)
 801c568:	e7d9      	b.n	801c51e <pow+0x4a>
 801c56a:	ec45 4b10 	vmov	d0, r4, r5
 801c56e:	f000 fe3e 	bl	801d1ee <finite>
 801c572:	bbb8      	cbnz	r0, 801c5e4 <pow+0x110>
 801c574:	ec49 8b10 	vmov	d0, r8, r9
 801c578:	f000 fe39 	bl	801d1ee <finite>
 801c57c:	b390      	cbz	r0, 801c5e4 <pow+0x110>
 801c57e:	ec47 6b10 	vmov	d0, r6, r7
 801c582:	f000 fe34 	bl	801d1ee <finite>
 801c586:	b368      	cbz	r0, 801c5e4 <pow+0x110>
 801c588:	4622      	mov	r2, r4
 801c58a:	462b      	mov	r3, r5
 801c58c:	4620      	mov	r0, r4
 801c58e:	4629      	mov	r1, r5
 801c590:	f7e4 fadc 	bl	8000b4c <__aeabi_dcmpun>
 801c594:	b160      	cbz	r0, 801c5b0 <pow+0xdc>
 801c596:	f7fe f857 	bl	801a648 <__errno>
 801c59a:	2321      	movs	r3, #33	; 0x21
 801c59c:	6003      	str	r3, [r0, #0]
 801c59e:	2200      	movs	r2, #0
 801c5a0:	2300      	movs	r3, #0
 801c5a2:	4610      	mov	r0, r2
 801c5a4:	4619      	mov	r1, r3
 801c5a6:	f7e4 f961 	bl	800086c <__aeabi_ddiv>
 801c5aa:	4604      	mov	r4, r0
 801c5ac:	460d      	mov	r5, r1
 801c5ae:	e7b6      	b.n	801c51e <pow+0x4a>
 801c5b0:	f7fe f84a 	bl	801a648 <__errno>
 801c5b4:	2322      	movs	r3, #34	; 0x22
 801c5b6:	6003      	str	r3, [r0, #0]
 801c5b8:	2200      	movs	r2, #0
 801c5ba:	2300      	movs	r3, #0
 801c5bc:	4640      	mov	r0, r8
 801c5be:	4649      	mov	r1, r9
 801c5c0:	f7e4 fa9c 	bl	8000afc <__aeabi_dcmplt>
 801c5c4:	2400      	movs	r4, #0
 801c5c6:	b158      	cbz	r0, 801c5e0 <pow+0x10c>
 801c5c8:	ec47 6b10 	vmov	d0, r6, r7
 801c5cc:	f000 fe1a 	bl	801d204 <rint>
 801c5d0:	4632      	mov	r2, r6
 801c5d2:	ec51 0b10 	vmov	r0, r1, d0
 801c5d6:	463b      	mov	r3, r7
 801c5d8:	f7e4 fa86 	bl	8000ae8 <__aeabi_dcmpeq>
 801c5dc:	2800      	cmp	r0, #0
 801c5de:	d0c2      	beq.n	801c566 <pow+0x92>
 801c5e0:	4d11      	ldr	r5, [pc, #68]	; (801c628 <pow+0x154>)
 801c5e2:	e79c      	b.n	801c51e <pow+0x4a>
 801c5e4:	2200      	movs	r2, #0
 801c5e6:	2300      	movs	r3, #0
 801c5e8:	4620      	mov	r0, r4
 801c5ea:	4629      	mov	r1, r5
 801c5ec:	f7e4 fa7c 	bl	8000ae8 <__aeabi_dcmpeq>
 801c5f0:	2800      	cmp	r0, #0
 801c5f2:	d094      	beq.n	801c51e <pow+0x4a>
 801c5f4:	ec49 8b10 	vmov	d0, r8, r9
 801c5f8:	f000 fdf9 	bl	801d1ee <finite>
 801c5fc:	2800      	cmp	r0, #0
 801c5fe:	d08e      	beq.n	801c51e <pow+0x4a>
 801c600:	ec47 6b10 	vmov	d0, r6, r7
 801c604:	f000 fdf3 	bl	801d1ee <finite>
 801c608:	2800      	cmp	r0, #0
 801c60a:	d088      	beq.n	801c51e <pow+0x4a>
 801c60c:	f7fe f81c 	bl	801a648 <__errno>
 801c610:	2322      	movs	r3, #34	; 0x22
 801c612:	6003      	str	r3, [r0, #0]
 801c614:	2400      	movs	r4, #0
 801c616:	2500      	movs	r5, #0
 801c618:	e781      	b.n	801c51e <pow+0x4a>
 801c61a:	4d04      	ldr	r5, [pc, #16]	; (801c62c <pow+0x158>)
 801c61c:	2400      	movs	r4, #0
 801c61e:	e77e      	b.n	801c51e <pow+0x4a>
 801c620:	20000248 	.word	0x20000248
 801c624:	fff00000 	.word	0xfff00000
 801c628:	7ff00000 	.word	0x7ff00000
 801c62c:	3ff00000 	.word	0x3ff00000

0801c630 <__ieee754_pow>:
 801c630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c634:	ed2d 8b06 	vpush	{d8-d10}
 801c638:	b08d      	sub	sp, #52	; 0x34
 801c63a:	ed8d 1b02 	vstr	d1, [sp, #8]
 801c63e:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 801c642:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 801c646:	ea56 0100 	orrs.w	r1, r6, r0
 801c64a:	ec53 2b10 	vmov	r2, r3, d0
 801c64e:	f000 84d1 	beq.w	801cff4 <__ieee754_pow+0x9c4>
 801c652:	497f      	ldr	r1, [pc, #508]	; (801c850 <__ieee754_pow+0x220>)
 801c654:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 801c658:	428c      	cmp	r4, r1
 801c65a:	ee10 8a10 	vmov	r8, s0
 801c65e:	4699      	mov	r9, r3
 801c660:	dc09      	bgt.n	801c676 <__ieee754_pow+0x46>
 801c662:	d103      	bne.n	801c66c <__ieee754_pow+0x3c>
 801c664:	b97a      	cbnz	r2, 801c686 <__ieee754_pow+0x56>
 801c666:	42a6      	cmp	r6, r4
 801c668:	dd02      	ble.n	801c670 <__ieee754_pow+0x40>
 801c66a:	e00c      	b.n	801c686 <__ieee754_pow+0x56>
 801c66c:	428e      	cmp	r6, r1
 801c66e:	dc02      	bgt.n	801c676 <__ieee754_pow+0x46>
 801c670:	428e      	cmp	r6, r1
 801c672:	d110      	bne.n	801c696 <__ieee754_pow+0x66>
 801c674:	b178      	cbz	r0, 801c696 <__ieee754_pow+0x66>
 801c676:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801c67a:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801c67e:	ea54 0308 	orrs.w	r3, r4, r8
 801c682:	f000 84b7 	beq.w	801cff4 <__ieee754_pow+0x9c4>
 801c686:	4873      	ldr	r0, [pc, #460]	; (801c854 <__ieee754_pow+0x224>)
 801c688:	b00d      	add	sp, #52	; 0x34
 801c68a:	ecbd 8b06 	vpop	{d8-d10}
 801c68e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c692:	f7ff bbfd 	b.w	801be90 <nan>
 801c696:	f1b9 0f00 	cmp.w	r9, #0
 801c69a:	da36      	bge.n	801c70a <__ieee754_pow+0xda>
 801c69c:	496e      	ldr	r1, [pc, #440]	; (801c858 <__ieee754_pow+0x228>)
 801c69e:	428e      	cmp	r6, r1
 801c6a0:	dc51      	bgt.n	801c746 <__ieee754_pow+0x116>
 801c6a2:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 801c6a6:	428e      	cmp	r6, r1
 801c6a8:	f340 84af 	ble.w	801d00a <__ieee754_pow+0x9da>
 801c6ac:	1531      	asrs	r1, r6, #20
 801c6ae:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 801c6b2:	2914      	cmp	r1, #20
 801c6b4:	dd0f      	ble.n	801c6d6 <__ieee754_pow+0xa6>
 801c6b6:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 801c6ba:	fa20 fc01 	lsr.w	ip, r0, r1
 801c6be:	fa0c f101 	lsl.w	r1, ip, r1
 801c6c2:	4281      	cmp	r1, r0
 801c6c4:	f040 84a1 	bne.w	801d00a <__ieee754_pow+0x9da>
 801c6c8:	f00c 0c01 	and.w	ip, ip, #1
 801c6cc:	f1cc 0102 	rsb	r1, ip, #2
 801c6d0:	9100      	str	r1, [sp, #0]
 801c6d2:	b180      	cbz	r0, 801c6f6 <__ieee754_pow+0xc6>
 801c6d4:	e059      	b.n	801c78a <__ieee754_pow+0x15a>
 801c6d6:	2800      	cmp	r0, #0
 801c6d8:	d155      	bne.n	801c786 <__ieee754_pow+0x156>
 801c6da:	f1c1 0114 	rsb	r1, r1, #20
 801c6de:	fa46 fc01 	asr.w	ip, r6, r1
 801c6e2:	fa0c f101 	lsl.w	r1, ip, r1
 801c6e6:	42b1      	cmp	r1, r6
 801c6e8:	f040 848c 	bne.w	801d004 <__ieee754_pow+0x9d4>
 801c6ec:	f00c 0c01 	and.w	ip, ip, #1
 801c6f0:	f1cc 0102 	rsb	r1, ip, #2
 801c6f4:	9100      	str	r1, [sp, #0]
 801c6f6:	4959      	ldr	r1, [pc, #356]	; (801c85c <__ieee754_pow+0x22c>)
 801c6f8:	428e      	cmp	r6, r1
 801c6fa:	d12d      	bne.n	801c758 <__ieee754_pow+0x128>
 801c6fc:	2f00      	cmp	r7, #0
 801c6fe:	da79      	bge.n	801c7f4 <__ieee754_pow+0x1c4>
 801c700:	4956      	ldr	r1, [pc, #344]	; (801c85c <__ieee754_pow+0x22c>)
 801c702:	2000      	movs	r0, #0
 801c704:	f7e4 f8b2 	bl	800086c <__aeabi_ddiv>
 801c708:	e016      	b.n	801c738 <__ieee754_pow+0x108>
 801c70a:	2100      	movs	r1, #0
 801c70c:	9100      	str	r1, [sp, #0]
 801c70e:	2800      	cmp	r0, #0
 801c710:	d13b      	bne.n	801c78a <__ieee754_pow+0x15a>
 801c712:	494f      	ldr	r1, [pc, #316]	; (801c850 <__ieee754_pow+0x220>)
 801c714:	428e      	cmp	r6, r1
 801c716:	d1ee      	bne.n	801c6f6 <__ieee754_pow+0xc6>
 801c718:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 801c71c:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 801c720:	ea53 0308 	orrs.w	r3, r3, r8
 801c724:	f000 8466 	beq.w	801cff4 <__ieee754_pow+0x9c4>
 801c728:	4b4d      	ldr	r3, [pc, #308]	; (801c860 <__ieee754_pow+0x230>)
 801c72a:	429c      	cmp	r4, r3
 801c72c:	dd0d      	ble.n	801c74a <__ieee754_pow+0x11a>
 801c72e:	2f00      	cmp	r7, #0
 801c730:	f280 8464 	bge.w	801cffc <__ieee754_pow+0x9cc>
 801c734:	2000      	movs	r0, #0
 801c736:	2100      	movs	r1, #0
 801c738:	ec41 0b10 	vmov	d0, r0, r1
 801c73c:	b00d      	add	sp, #52	; 0x34
 801c73e:	ecbd 8b06 	vpop	{d8-d10}
 801c742:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c746:	2102      	movs	r1, #2
 801c748:	e7e0      	b.n	801c70c <__ieee754_pow+0xdc>
 801c74a:	2f00      	cmp	r7, #0
 801c74c:	daf2      	bge.n	801c734 <__ieee754_pow+0x104>
 801c74e:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 801c752:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801c756:	e7ef      	b.n	801c738 <__ieee754_pow+0x108>
 801c758:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 801c75c:	d104      	bne.n	801c768 <__ieee754_pow+0x138>
 801c75e:	4610      	mov	r0, r2
 801c760:	4619      	mov	r1, r3
 801c762:	f7e3 ff59 	bl	8000618 <__aeabi_dmul>
 801c766:	e7e7      	b.n	801c738 <__ieee754_pow+0x108>
 801c768:	493e      	ldr	r1, [pc, #248]	; (801c864 <__ieee754_pow+0x234>)
 801c76a:	428f      	cmp	r7, r1
 801c76c:	d10d      	bne.n	801c78a <__ieee754_pow+0x15a>
 801c76e:	f1b9 0f00 	cmp.w	r9, #0
 801c772:	db0a      	blt.n	801c78a <__ieee754_pow+0x15a>
 801c774:	ec43 2b10 	vmov	d0, r2, r3
 801c778:	b00d      	add	sp, #52	; 0x34
 801c77a:	ecbd 8b06 	vpop	{d8-d10}
 801c77e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c782:	f000 bc77 	b.w	801d074 <__ieee754_sqrt>
 801c786:	2100      	movs	r1, #0
 801c788:	9100      	str	r1, [sp, #0]
 801c78a:	ec43 2b10 	vmov	d0, r2, r3
 801c78e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801c792:	f000 fd23 	bl	801d1dc <fabs>
 801c796:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801c79a:	ec51 0b10 	vmov	r0, r1, d0
 801c79e:	f1b8 0f00 	cmp.w	r8, #0
 801c7a2:	d12a      	bne.n	801c7fa <__ieee754_pow+0x1ca>
 801c7a4:	b12c      	cbz	r4, 801c7b2 <__ieee754_pow+0x182>
 801c7a6:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 801c85c <__ieee754_pow+0x22c>
 801c7aa:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 801c7ae:	45e6      	cmp	lr, ip
 801c7b0:	d123      	bne.n	801c7fa <__ieee754_pow+0x1ca>
 801c7b2:	2f00      	cmp	r7, #0
 801c7b4:	da05      	bge.n	801c7c2 <__ieee754_pow+0x192>
 801c7b6:	4602      	mov	r2, r0
 801c7b8:	460b      	mov	r3, r1
 801c7ba:	2000      	movs	r0, #0
 801c7bc:	4927      	ldr	r1, [pc, #156]	; (801c85c <__ieee754_pow+0x22c>)
 801c7be:	f7e4 f855 	bl	800086c <__aeabi_ddiv>
 801c7c2:	f1b9 0f00 	cmp.w	r9, #0
 801c7c6:	dab7      	bge.n	801c738 <__ieee754_pow+0x108>
 801c7c8:	9b00      	ldr	r3, [sp, #0]
 801c7ca:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801c7ce:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801c7d2:	4323      	orrs	r3, r4
 801c7d4:	d108      	bne.n	801c7e8 <__ieee754_pow+0x1b8>
 801c7d6:	4602      	mov	r2, r0
 801c7d8:	460b      	mov	r3, r1
 801c7da:	4610      	mov	r0, r2
 801c7dc:	4619      	mov	r1, r3
 801c7de:	f7e3 fd63 	bl	80002a8 <__aeabi_dsub>
 801c7e2:	4602      	mov	r2, r0
 801c7e4:	460b      	mov	r3, r1
 801c7e6:	e78d      	b.n	801c704 <__ieee754_pow+0xd4>
 801c7e8:	9b00      	ldr	r3, [sp, #0]
 801c7ea:	2b01      	cmp	r3, #1
 801c7ec:	d1a4      	bne.n	801c738 <__ieee754_pow+0x108>
 801c7ee:	4602      	mov	r2, r0
 801c7f0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801c7f4:	4610      	mov	r0, r2
 801c7f6:	4619      	mov	r1, r3
 801c7f8:	e79e      	b.n	801c738 <__ieee754_pow+0x108>
 801c7fa:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 801c7fe:	f10c 35ff 	add.w	r5, ip, #4294967295
 801c802:	950a      	str	r5, [sp, #40]	; 0x28
 801c804:	9d00      	ldr	r5, [sp, #0]
 801c806:	46ac      	mov	ip, r5
 801c808:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801c80a:	ea5c 0505 	orrs.w	r5, ip, r5
 801c80e:	d0e4      	beq.n	801c7da <__ieee754_pow+0x1aa>
 801c810:	4b15      	ldr	r3, [pc, #84]	; (801c868 <__ieee754_pow+0x238>)
 801c812:	429e      	cmp	r6, r3
 801c814:	f340 80fc 	ble.w	801ca10 <__ieee754_pow+0x3e0>
 801c818:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 801c81c:	429e      	cmp	r6, r3
 801c81e:	4b10      	ldr	r3, [pc, #64]	; (801c860 <__ieee754_pow+0x230>)
 801c820:	dd07      	ble.n	801c832 <__ieee754_pow+0x202>
 801c822:	429c      	cmp	r4, r3
 801c824:	dc0a      	bgt.n	801c83c <__ieee754_pow+0x20c>
 801c826:	2f00      	cmp	r7, #0
 801c828:	da84      	bge.n	801c734 <__ieee754_pow+0x104>
 801c82a:	a307      	add	r3, pc, #28	; (adr r3, 801c848 <__ieee754_pow+0x218>)
 801c82c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c830:	e795      	b.n	801c75e <__ieee754_pow+0x12e>
 801c832:	429c      	cmp	r4, r3
 801c834:	dbf7      	blt.n	801c826 <__ieee754_pow+0x1f6>
 801c836:	4b09      	ldr	r3, [pc, #36]	; (801c85c <__ieee754_pow+0x22c>)
 801c838:	429c      	cmp	r4, r3
 801c83a:	dd17      	ble.n	801c86c <__ieee754_pow+0x23c>
 801c83c:	2f00      	cmp	r7, #0
 801c83e:	dcf4      	bgt.n	801c82a <__ieee754_pow+0x1fa>
 801c840:	e778      	b.n	801c734 <__ieee754_pow+0x104>
 801c842:	bf00      	nop
 801c844:	f3af 8000 	nop.w
 801c848:	8800759c 	.word	0x8800759c
 801c84c:	7e37e43c 	.word	0x7e37e43c
 801c850:	7ff00000 	.word	0x7ff00000
 801c854:	080210e3 	.word	0x080210e3
 801c858:	433fffff 	.word	0x433fffff
 801c85c:	3ff00000 	.word	0x3ff00000
 801c860:	3fefffff 	.word	0x3fefffff
 801c864:	3fe00000 	.word	0x3fe00000
 801c868:	41e00000 	.word	0x41e00000
 801c86c:	4b64      	ldr	r3, [pc, #400]	; (801ca00 <__ieee754_pow+0x3d0>)
 801c86e:	2200      	movs	r2, #0
 801c870:	f7e3 fd1a 	bl	80002a8 <__aeabi_dsub>
 801c874:	a356      	add	r3, pc, #344	; (adr r3, 801c9d0 <__ieee754_pow+0x3a0>)
 801c876:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c87a:	4604      	mov	r4, r0
 801c87c:	460d      	mov	r5, r1
 801c87e:	f7e3 fecb 	bl	8000618 <__aeabi_dmul>
 801c882:	a355      	add	r3, pc, #340	; (adr r3, 801c9d8 <__ieee754_pow+0x3a8>)
 801c884:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c888:	4606      	mov	r6, r0
 801c88a:	460f      	mov	r7, r1
 801c88c:	4620      	mov	r0, r4
 801c88e:	4629      	mov	r1, r5
 801c890:	f7e3 fec2 	bl	8000618 <__aeabi_dmul>
 801c894:	4b5b      	ldr	r3, [pc, #364]	; (801ca04 <__ieee754_pow+0x3d4>)
 801c896:	4682      	mov	sl, r0
 801c898:	468b      	mov	fp, r1
 801c89a:	2200      	movs	r2, #0
 801c89c:	4620      	mov	r0, r4
 801c89e:	4629      	mov	r1, r5
 801c8a0:	f7e3 feba 	bl	8000618 <__aeabi_dmul>
 801c8a4:	4602      	mov	r2, r0
 801c8a6:	460b      	mov	r3, r1
 801c8a8:	a14d      	add	r1, pc, #308	; (adr r1, 801c9e0 <__ieee754_pow+0x3b0>)
 801c8aa:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c8ae:	f7e3 fcfb 	bl	80002a8 <__aeabi_dsub>
 801c8b2:	4622      	mov	r2, r4
 801c8b4:	462b      	mov	r3, r5
 801c8b6:	f7e3 feaf 	bl	8000618 <__aeabi_dmul>
 801c8ba:	4602      	mov	r2, r0
 801c8bc:	460b      	mov	r3, r1
 801c8be:	2000      	movs	r0, #0
 801c8c0:	4951      	ldr	r1, [pc, #324]	; (801ca08 <__ieee754_pow+0x3d8>)
 801c8c2:	f7e3 fcf1 	bl	80002a8 <__aeabi_dsub>
 801c8c6:	4622      	mov	r2, r4
 801c8c8:	4680      	mov	r8, r0
 801c8ca:	4689      	mov	r9, r1
 801c8cc:	462b      	mov	r3, r5
 801c8ce:	4620      	mov	r0, r4
 801c8d0:	4629      	mov	r1, r5
 801c8d2:	f7e3 fea1 	bl	8000618 <__aeabi_dmul>
 801c8d6:	4602      	mov	r2, r0
 801c8d8:	460b      	mov	r3, r1
 801c8da:	4640      	mov	r0, r8
 801c8dc:	4649      	mov	r1, r9
 801c8de:	f7e3 fe9b 	bl	8000618 <__aeabi_dmul>
 801c8e2:	a341      	add	r3, pc, #260	; (adr r3, 801c9e8 <__ieee754_pow+0x3b8>)
 801c8e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c8e8:	f7e3 fe96 	bl	8000618 <__aeabi_dmul>
 801c8ec:	4602      	mov	r2, r0
 801c8ee:	460b      	mov	r3, r1
 801c8f0:	4650      	mov	r0, sl
 801c8f2:	4659      	mov	r1, fp
 801c8f4:	f7e3 fcd8 	bl	80002a8 <__aeabi_dsub>
 801c8f8:	4602      	mov	r2, r0
 801c8fa:	460b      	mov	r3, r1
 801c8fc:	4680      	mov	r8, r0
 801c8fe:	4689      	mov	r9, r1
 801c900:	4630      	mov	r0, r6
 801c902:	4639      	mov	r1, r7
 801c904:	f7e3 fcd2 	bl	80002ac <__adddf3>
 801c908:	2400      	movs	r4, #0
 801c90a:	4632      	mov	r2, r6
 801c90c:	463b      	mov	r3, r7
 801c90e:	4620      	mov	r0, r4
 801c910:	460d      	mov	r5, r1
 801c912:	f7e3 fcc9 	bl	80002a8 <__aeabi_dsub>
 801c916:	4602      	mov	r2, r0
 801c918:	460b      	mov	r3, r1
 801c91a:	4640      	mov	r0, r8
 801c91c:	4649      	mov	r1, r9
 801c91e:	f7e3 fcc3 	bl	80002a8 <__aeabi_dsub>
 801c922:	9b00      	ldr	r3, [sp, #0]
 801c924:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801c926:	3b01      	subs	r3, #1
 801c928:	4313      	orrs	r3, r2
 801c92a:	4682      	mov	sl, r0
 801c92c:	468b      	mov	fp, r1
 801c92e:	f040 81f1 	bne.w	801cd14 <__ieee754_pow+0x6e4>
 801c932:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 801c9f0 <__ieee754_pow+0x3c0>
 801c936:	eeb0 8a47 	vmov.f32	s16, s14
 801c93a:	eef0 8a67 	vmov.f32	s17, s15
 801c93e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801c942:	2600      	movs	r6, #0
 801c944:	4632      	mov	r2, r6
 801c946:	463b      	mov	r3, r7
 801c948:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801c94c:	f7e3 fcac 	bl	80002a8 <__aeabi_dsub>
 801c950:	4622      	mov	r2, r4
 801c952:	462b      	mov	r3, r5
 801c954:	f7e3 fe60 	bl	8000618 <__aeabi_dmul>
 801c958:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801c95c:	4680      	mov	r8, r0
 801c95e:	4689      	mov	r9, r1
 801c960:	4650      	mov	r0, sl
 801c962:	4659      	mov	r1, fp
 801c964:	f7e3 fe58 	bl	8000618 <__aeabi_dmul>
 801c968:	4602      	mov	r2, r0
 801c96a:	460b      	mov	r3, r1
 801c96c:	4640      	mov	r0, r8
 801c96e:	4649      	mov	r1, r9
 801c970:	f7e3 fc9c 	bl	80002ac <__adddf3>
 801c974:	4632      	mov	r2, r6
 801c976:	463b      	mov	r3, r7
 801c978:	4680      	mov	r8, r0
 801c97a:	4689      	mov	r9, r1
 801c97c:	4620      	mov	r0, r4
 801c97e:	4629      	mov	r1, r5
 801c980:	f7e3 fe4a 	bl	8000618 <__aeabi_dmul>
 801c984:	460b      	mov	r3, r1
 801c986:	4604      	mov	r4, r0
 801c988:	460d      	mov	r5, r1
 801c98a:	4602      	mov	r2, r0
 801c98c:	4649      	mov	r1, r9
 801c98e:	4640      	mov	r0, r8
 801c990:	f7e3 fc8c 	bl	80002ac <__adddf3>
 801c994:	4b1d      	ldr	r3, [pc, #116]	; (801ca0c <__ieee754_pow+0x3dc>)
 801c996:	4299      	cmp	r1, r3
 801c998:	ec45 4b19 	vmov	d9, r4, r5
 801c99c:	4606      	mov	r6, r0
 801c99e:	460f      	mov	r7, r1
 801c9a0:	468b      	mov	fp, r1
 801c9a2:	f340 82fe 	ble.w	801cfa2 <__ieee754_pow+0x972>
 801c9a6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 801c9aa:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 801c9ae:	4303      	orrs	r3, r0
 801c9b0:	f000 81f0 	beq.w	801cd94 <__ieee754_pow+0x764>
 801c9b4:	a310      	add	r3, pc, #64	; (adr r3, 801c9f8 <__ieee754_pow+0x3c8>)
 801c9b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c9ba:	ec51 0b18 	vmov	r0, r1, d8
 801c9be:	f7e3 fe2b 	bl	8000618 <__aeabi_dmul>
 801c9c2:	a30d      	add	r3, pc, #52	; (adr r3, 801c9f8 <__ieee754_pow+0x3c8>)
 801c9c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c9c8:	e6cb      	b.n	801c762 <__ieee754_pow+0x132>
 801c9ca:	bf00      	nop
 801c9cc:	f3af 8000 	nop.w
 801c9d0:	60000000 	.word	0x60000000
 801c9d4:	3ff71547 	.word	0x3ff71547
 801c9d8:	f85ddf44 	.word	0xf85ddf44
 801c9dc:	3e54ae0b 	.word	0x3e54ae0b
 801c9e0:	55555555 	.word	0x55555555
 801c9e4:	3fd55555 	.word	0x3fd55555
 801c9e8:	652b82fe 	.word	0x652b82fe
 801c9ec:	3ff71547 	.word	0x3ff71547
 801c9f0:	00000000 	.word	0x00000000
 801c9f4:	bff00000 	.word	0xbff00000
 801c9f8:	8800759c 	.word	0x8800759c
 801c9fc:	7e37e43c 	.word	0x7e37e43c
 801ca00:	3ff00000 	.word	0x3ff00000
 801ca04:	3fd00000 	.word	0x3fd00000
 801ca08:	3fe00000 	.word	0x3fe00000
 801ca0c:	408fffff 	.word	0x408fffff
 801ca10:	4bd7      	ldr	r3, [pc, #860]	; (801cd70 <__ieee754_pow+0x740>)
 801ca12:	ea03 0309 	and.w	r3, r3, r9
 801ca16:	2200      	movs	r2, #0
 801ca18:	b92b      	cbnz	r3, 801ca26 <__ieee754_pow+0x3f6>
 801ca1a:	4bd6      	ldr	r3, [pc, #856]	; (801cd74 <__ieee754_pow+0x744>)
 801ca1c:	f7e3 fdfc 	bl	8000618 <__aeabi_dmul>
 801ca20:	f06f 0234 	mvn.w	r2, #52	; 0x34
 801ca24:	460c      	mov	r4, r1
 801ca26:	1523      	asrs	r3, r4, #20
 801ca28:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801ca2c:	4413      	add	r3, r2
 801ca2e:	9309      	str	r3, [sp, #36]	; 0x24
 801ca30:	4bd1      	ldr	r3, [pc, #836]	; (801cd78 <__ieee754_pow+0x748>)
 801ca32:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801ca36:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 801ca3a:	429c      	cmp	r4, r3
 801ca3c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 801ca40:	dd08      	ble.n	801ca54 <__ieee754_pow+0x424>
 801ca42:	4bce      	ldr	r3, [pc, #824]	; (801cd7c <__ieee754_pow+0x74c>)
 801ca44:	429c      	cmp	r4, r3
 801ca46:	f340 8163 	ble.w	801cd10 <__ieee754_pow+0x6e0>
 801ca4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ca4c:	3301      	adds	r3, #1
 801ca4e:	9309      	str	r3, [sp, #36]	; 0x24
 801ca50:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 801ca54:	2400      	movs	r4, #0
 801ca56:	00e3      	lsls	r3, r4, #3
 801ca58:	930b      	str	r3, [sp, #44]	; 0x2c
 801ca5a:	4bc9      	ldr	r3, [pc, #804]	; (801cd80 <__ieee754_pow+0x750>)
 801ca5c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801ca60:	ed93 7b00 	vldr	d7, [r3]
 801ca64:	4629      	mov	r1, r5
 801ca66:	ec53 2b17 	vmov	r2, r3, d7
 801ca6a:	eeb0 8a47 	vmov.f32	s16, s14
 801ca6e:	eef0 8a67 	vmov.f32	s17, s15
 801ca72:	4682      	mov	sl, r0
 801ca74:	f7e3 fc18 	bl	80002a8 <__aeabi_dsub>
 801ca78:	4652      	mov	r2, sl
 801ca7a:	4606      	mov	r6, r0
 801ca7c:	460f      	mov	r7, r1
 801ca7e:	462b      	mov	r3, r5
 801ca80:	ec51 0b18 	vmov	r0, r1, d8
 801ca84:	f7e3 fc12 	bl	80002ac <__adddf3>
 801ca88:	4602      	mov	r2, r0
 801ca8a:	460b      	mov	r3, r1
 801ca8c:	2000      	movs	r0, #0
 801ca8e:	49bd      	ldr	r1, [pc, #756]	; (801cd84 <__ieee754_pow+0x754>)
 801ca90:	f7e3 feec 	bl	800086c <__aeabi_ddiv>
 801ca94:	ec41 0b19 	vmov	d9, r0, r1
 801ca98:	4602      	mov	r2, r0
 801ca9a:	460b      	mov	r3, r1
 801ca9c:	4630      	mov	r0, r6
 801ca9e:	4639      	mov	r1, r7
 801caa0:	f7e3 fdba 	bl	8000618 <__aeabi_dmul>
 801caa4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801caa8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801caac:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801cab0:	2300      	movs	r3, #0
 801cab2:	9304      	str	r3, [sp, #16]
 801cab4:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 801cab8:	46ab      	mov	fp, r5
 801caba:	106d      	asrs	r5, r5, #1
 801cabc:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 801cac0:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 801cac4:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 801cac8:	2200      	movs	r2, #0
 801caca:	4640      	mov	r0, r8
 801cacc:	4649      	mov	r1, r9
 801cace:	4614      	mov	r4, r2
 801cad0:	461d      	mov	r5, r3
 801cad2:	f7e3 fda1 	bl	8000618 <__aeabi_dmul>
 801cad6:	4602      	mov	r2, r0
 801cad8:	460b      	mov	r3, r1
 801cada:	4630      	mov	r0, r6
 801cadc:	4639      	mov	r1, r7
 801cade:	f7e3 fbe3 	bl	80002a8 <__aeabi_dsub>
 801cae2:	ec53 2b18 	vmov	r2, r3, d8
 801cae6:	4606      	mov	r6, r0
 801cae8:	460f      	mov	r7, r1
 801caea:	4620      	mov	r0, r4
 801caec:	4629      	mov	r1, r5
 801caee:	f7e3 fbdb 	bl	80002a8 <__aeabi_dsub>
 801caf2:	4602      	mov	r2, r0
 801caf4:	460b      	mov	r3, r1
 801caf6:	4650      	mov	r0, sl
 801caf8:	4659      	mov	r1, fp
 801cafa:	f7e3 fbd5 	bl	80002a8 <__aeabi_dsub>
 801cafe:	4642      	mov	r2, r8
 801cb00:	464b      	mov	r3, r9
 801cb02:	f7e3 fd89 	bl	8000618 <__aeabi_dmul>
 801cb06:	4602      	mov	r2, r0
 801cb08:	460b      	mov	r3, r1
 801cb0a:	4630      	mov	r0, r6
 801cb0c:	4639      	mov	r1, r7
 801cb0e:	f7e3 fbcb 	bl	80002a8 <__aeabi_dsub>
 801cb12:	ec53 2b19 	vmov	r2, r3, d9
 801cb16:	f7e3 fd7f 	bl	8000618 <__aeabi_dmul>
 801cb1a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801cb1e:	ec41 0b18 	vmov	d8, r0, r1
 801cb22:	4610      	mov	r0, r2
 801cb24:	4619      	mov	r1, r3
 801cb26:	f7e3 fd77 	bl	8000618 <__aeabi_dmul>
 801cb2a:	a37d      	add	r3, pc, #500	; (adr r3, 801cd20 <__ieee754_pow+0x6f0>)
 801cb2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cb30:	4604      	mov	r4, r0
 801cb32:	460d      	mov	r5, r1
 801cb34:	f7e3 fd70 	bl	8000618 <__aeabi_dmul>
 801cb38:	a37b      	add	r3, pc, #492	; (adr r3, 801cd28 <__ieee754_pow+0x6f8>)
 801cb3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cb3e:	f7e3 fbb5 	bl	80002ac <__adddf3>
 801cb42:	4622      	mov	r2, r4
 801cb44:	462b      	mov	r3, r5
 801cb46:	f7e3 fd67 	bl	8000618 <__aeabi_dmul>
 801cb4a:	a379      	add	r3, pc, #484	; (adr r3, 801cd30 <__ieee754_pow+0x700>)
 801cb4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cb50:	f7e3 fbac 	bl	80002ac <__adddf3>
 801cb54:	4622      	mov	r2, r4
 801cb56:	462b      	mov	r3, r5
 801cb58:	f7e3 fd5e 	bl	8000618 <__aeabi_dmul>
 801cb5c:	a376      	add	r3, pc, #472	; (adr r3, 801cd38 <__ieee754_pow+0x708>)
 801cb5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cb62:	f7e3 fba3 	bl	80002ac <__adddf3>
 801cb66:	4622      	mov	r2, r4
 801cb68:	462b      	mov	r3, r5
 801cb6a:	f7e3 fd55 	bl	8000618 <__aeabi_dmul>
 801cb6e:	a374      	add	r3, pc, #464	; (adr r3, 801cd40 <__ieee754_pow+0x710>)
 801cb70:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cb74:	f7e3 fb9a 	bl	80002ac <__adddf3>
 801cb78:	4622      	mov	r2, r4
 801cb7a:	462b      	mov	r3, r5
 801cb7c:	f7e3 fd4c 	bl	8000618 <__aeabi_dmul>
 801cb80:	a371      	add	r3, pc, #452	; (adr r3, 801cd48 <__ieee754_pow+0x718>)
 801cb82:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cb86:	f7e3 fb91 	bl	80002ac <__adddf3>
 801cb8a:	4622      	mov	r2, r4
 801cb8c:	4606      	mov	r6, r0
 801cb8e:	460f      	mov	r7, r1
 801cb90:	462b      	mov	r3, r5
 801cb92:	4620      	mov	r0, r4
 801cb94:	4629      	mov	r1, r5
 801cb96:	f7e3 fd3f 	bl	8000618 <__aeabi_dmul>
 801cb9a:	4602      	mov	r2, r0
 801cb9c:	460b      	mov	r3, r1
 801cb9e:	4630      	mov	r0, r6
 801cba0:	4639      	mov	r1, r7
 801cba2:	f7e3 fd39 	bl	8000618 <__aeabi_dmul>
 801cba6:	4642      	mov	r2, r8
 801cba8:	4604      	mov	r4, r0
 801cbaa:	460d      	mov	r5, r1
 801cbac:	464b      	mov	r3, r9
 801cbae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801cbb2:	f7e3 fb7b 	bl	80002ac <__adddf3>
 801cbb6:	ec53 2b18 	vmov	r2, r3, d8
 801cbba:	f7e3 fd2d 	bl	8000618 <__aeabi_dmul>
 801cbbe:	4622      	mov	r2, r4
 801cbc0:	462b      	mov	r3, r5
 801cbc2:	f7e3 fb73 	bl	80002ac <__adddf3>
 801cbc6:	4642      	mov	r2, r8
 801cbc8:	4682      	mov	sl, r0
 801cbca:	468b      	mov	fp, r1
 801cbcc:	464b      	mov	r3, r9
 801cbce:	4640      	mov	r0, r8
 801cbd0:	4649      	mov	r1, r9
 801cbd2:	f7e3 fd21 	bl	8000618 <__aeabi_dmul>
 801cbd6:	4b6c      	ldr	r3, [pc, #432]	; (801cd88 <__ieee754_pow+0x758>)
 801cbd8:	2200      	movs	r2, #0
 801cbda:	4606      	mov	r6, r0
 801cbdc:	460f      	mov	r7, r1
 801cbde:	f7e3 fb65 	bl	80002ac <__adddf3>
 801cbe2:	4652      	mov	r2, sl
 801cbe4:	465b      	mov	r3, fp
 801cbe6:	f7e3 fb61 	bl	80002ac <__adddf3>
 801cbea:	9c04      	ldr	r4, [sp, #16]
 801cbec:	460d      	mov	r5, r1
 801cbee:	4622      	mov	r2, r4
 801cbf0:	460b      	mov	r3, r1
 801cbf2:	4640      	mov	r0, r8
 801cbf4:	4649      	mov	r1, r9
 801cbf6:	f7e3 fd0f 	bl	8000618 <__aeabi_dmul>
 801cbfa:	4b63      	ldr	r3, [pc, #396]	; (801cd88 <__ieee754_pow+0x758>)
 801cbfc:	4680      	mov	r8, r0
 801cbfe:	4689      	mov	r9, r1
 801cc00:	2200      	movs	r2, #0
 801cc02:	4620      	mov	r0, r4
 801cc04:	4629      	mov	r1, r5
 801cc06:	f7e3 fb4f 	bl	80002a8 <__aeabi_dsub>
 801cc0a:	4632      	mov	r2, r6
 801cc0c:	463b      	mov	r3, r7
 801cc0e:	f7e3 fb4b 	bl	80002a8 <__aeabi_dsub>
 801cc12:	4602      	mov	r2, r0
 801cc14:	460b      	mov	r3, r1
 801cc16:	4650      	mov	r0, sl
 801cc18:	4659      	mov	r1, fp
 801cc1a:	f7e3 fb45 	bl	80002a8 <__aeabi_dsub>
 801cc1e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801cc22:	f7e3 fcf9 	bl	8000618 <__aeabi_dmul>
 801cc26:	4622      	mov	r2, r4
 801cc28:	4606      	mov	r6, r0
 801cc2a:	460f      	mov	r7, r1
 801cc2c:	462b      	mov	r3, r5
 801cc2e:	ec51 0b18 	vmov	r0, r1, d8
 801cc32:	f7e3 fcf1 	bl	8000618 <__aeabi_dmul>
 801cc36:	4602      	mov	r2, r0
 801cc38:	460b      	mov	r3, r1
 801cc3a:	4630      	mov	r0, r6
 801cc3c:	4639      	mov	r1, r7
 801cc3e:	f7e3 fb35 	bl	80002ac <__adddf3>
 801cc42:	4606      	mov	r6, r0
 801cc44:	460f      	mov	r7, r1
 801cc46:	4602      	mov	r2, r0
 801cc48:	460b      	mov	r3, r1
 801cc4a:	4640      	mov	r0, r8
 801cc4c:	4649      	mov	r1, r9
 801cc4e:	f7e3 fb2d 	bl	80002ac <__adddf3>
 801cc52:	9c04      	ldr	r4, [sp, #16]
 801cc54:	a33e      	add	r3, pc, #248	; (adr r3, 801cd50 <__ieee754_pow+0x720>)
 801cc56:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cc5a:	4620      	mov	r0, r4
 801cc5c:	460d      	mov	r5, r1
 801cc5e:	f7e3 fcdb 	bl	8000618 <__aeabi_dmul>
 801cc62:	4642      	mov	r2, r8
 801cc64:	ec41 0b18 	vmov	d8, r0, r1
 801cc68:	464b      	mov	r3, r9
 801cc6a:	4620      	mov	r0, r4
 801cc6c:	4629      	mov	r1, r5
 801cc6e:	f7e3 fb1b 	bl	80002a8 <__aeabi_dsub>
 801cc72:	4602      	mov	r2, r0
 801cc74:	460b      	mov	r3, r1
 801cc76:	4630      	mov	r0, r6
 801cc78:	4639      	mov	r1, r7
 801cc7a:	f7e3 fb15 	bl	80002a8 <__aeabi_dsub>
 801cc7e:	a336      	add	r3, pc, #216	; (adr r3, 801cd58 <__ieee754_pow+0x728>)
 801cc80:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cc84:	f7e3 fcc8 	bl	8000618 <__aeabi_dmul>
 801cc88:	a335      	add	r3, pc, #212	; (adr r3, 801cd60 <__ieee754_pow+0x730>)
 801cc8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cc8e:	4606      	mov	r6, r0
 801cc90:	460f      	mov	r7, r1
 801cc92:	4620      	mov	r0, r4
 801cc94:	4629      	mov	r1, r5
 801cc96:	f7e3 fcbf 	bl	8000618 <__aeabi_dmul>
 801cc9a:	4602      	mov	r2, r0
 801cc9c:	460b      	mov	r3, r1
 801cc9e:	4630      	mov	r0, r6
 801cca0:	4639      	mov	r1, r7
 801cca2:	f7e3 fb03 	bl	80002ac <__adddf3>
 801cca6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801cca8:	4b38      	ldr	r3, [pc, #224]	; (801cd8c <__ieee754_pow+0x75c>)
 801ccaa:	4413      	add	r3, r2
 801ccac:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ccb0:	f7e3 fafc 	bl	80002ac <__adddf3>
 801ccb4:	4682      	mov	sl, r0
 801ccb6:	9809      	ldr	r0, [sp, #36]	; 0x24
 801ccb8:	468b      	mov	fp, r1
 801ccba:	f7e3 fc43 	bl	8000544 <__aeabi_i2d>
 801ccbe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801ccc0:	4b33      	ldr	r3, [pc, #204]	; (801cd90 <__ieee754_pow+0x760>)
 801ccc2:	4413      	add	r3, r2
 801ccc4:	e9d3 8900 	ldrd	r8, r9, [r3]
 801ccc8:	4606      	mov	r6, r0
 801ccca:	460f      	mov	r7, r1
 801cccc:	4652      	mov	r2, sl
 801ccce:	465b      	mov	r3, fp
 801ccd0:	ec51 0b18 	vmov	r0, r1, d8
 801ccd4:	f7e3 faea 	bl	80002ac <__adddf3>
 801ccd8:	4642      	mov	r2, r8
 801ccda:	464b      	mov	r3, r9
 801ccdc:	f7e3 fae6 	bl	80002ac <__adddf3>
 801cce0:	4632      	mov	r2, r6
 801cce2:	463b      	mov	r3, r7
 801cce4:	f7e3 fae2 	bl	80002ac <__adddf3>
 801cce8:	9c04      	ldr	r4, [sp, #16]
 801ccea:	4632      	mov	r2, r6
 801ccec:	463b      	mov	r3, r7
 801ccee:	4620      	mov	r0, r4
 801ccf0:	460d      	mov	r5, r1
 801ccf2:	f7e3 fad9 	bl	80002a8 <__aeabi_dsub>
 801ccf6:	4642      	mov	r2, r8
 801ccf8:	464b      	mov	r3, r9
 801ccfa:	f7e3 fad5 	bl	80002a8 <__aeabi_dsub>
 801ccfe:	ec53 2b18 	vmov	r2, r3, d8
 801cd02:	f7e3 fad1 	bl	80002a8 <__aeabi_dsub>
 801cd06:	4602      	mov	r2, r0
 801cd08:	460b      	mov	r3, r1
 801cd0a:	4650      	mov	r0, sl
 801cd0c:	4659      	mov	r1, fp
 801cd0e:	e606      	b.n	801c91e <__ieee754_pow+0x2ee>
 801cd10:	2401      	movs	r4, #1
 801cd12:	e6a0      	b.n	801ca56 <__ieee754_pow+0x426>
 801cd14:	ed9f 7b14 	vldr	d7, [pc, #80]	; 801cd68 <__ieee754_pow+0x738>
 801cd18:	e60d      	b.n	801c936 <__ieee754_pow+0x306>
 801cd1a:	bf00      	nop
 801cd1c:	f3af 8000 	nop.w
 801cd20:	4a454eef 	.word	0x4a454eef
 801cd24:	3fca7e28 	.word	0x3fca7e28
 801cd28:	93c9db65 	.word	0x93c9db65
 801cd2c:	3fcd864a 	.word	0x3fcd864a
 801cd30:	a91d4101 	.word	0xa91d4101
 801cd34:	3fd17460 	.word	0x3fd17460
 801cd38:	518f264d 	.word	0x518f264d
 801cd3c:	3fd55555 	.word	0x3fd55555
 801cd40:	db6fabff 	.word	0xdb6fabff
 801cd44:	3fdb6db6 	.word	0x3fdb6db6
 801cd48:	33333303 	.word	0x33333303
 801cd4c:	3fe33333 	.word	0x3fe33333
 801cd50:	e0000000 	.word	0xe0000000
 801cd54:	3feec709 	.word	0x3feec709
 801cd58:	dc3a03fd 	.word	0xdc3a03fd
 801cd5c:	3feec709 	.word	0x3feec709
 801cd60:	145b01f5 	.word	0x145b01f5
 801cd64:	be3e2fe0 	.word	0xbe3e2fe0
 801cd68:	00000000 	.word	0x00000000
 801cd6c:	3ff00000 	.word	0x3ff00000
 801cd70:	7ff00000 	.word	0x7ff00000
 801cd74:	43400000 	.word	0x43400000
 801cd78:	0003988e 	.word	0x0003988e
 801cd7c:	000bb679 	.word	0x000bb679
 801cd80:	080213b8 	.word	0x080213b8
 801cd84:	3ff00000 	.word	0x3ff00000
 801cd88:	40080000 	.word	0x40080000
 801cd8c:	080213d8 	.word	0x080213d8
 801cd90:	080213c8 	.word	0x080213c8
 801cd94:	a3b5      	add	r3, pc, #724	; (adr r3, 801d06c <__ieee754_pow+0xa3c>)
 801cd96:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cd9a:	4640      	mov	r0, r8
 801cd9c:	4649      	mov	r1, r9
 801cd9e:	f7e3 fa85 	bl	80002ac <__adddf3>
 801cda2:	4622      	mov	r2, r4
 801cda4:	ec41 0b1a 	vmov	d10, r0, r1
 801cda8:	462b      	mov	r3, r5
 801cdaa:	4630      	mov	r0, r6
 801cdac:	4639      	mov	r1, r7
 801cdae:	f7e3 fa7b 	bl	80002a8 <__aeabi_dsub>
 801cdb2:	4602      	mov	r2, r0
 801cdb4:	460b      	mov	r3, r1
 801cdb6:	ec51 0b1a 	vmov	r0, r1, d10
 801cdba:	f7e3 febd 	bl	8000b38 <__aeabi_dcmpgt>
 801cdbe:	2800      	cmp	r0, #0
 801cdc0:	f47f adf8 	bne.w	801c9b4 <__ieee754_pow+0x384>
 801cdc4:	4aa4      	ldr	r2, [pc, #656]	; (801d058 <__ieee754_pow+0xa28>)
 801cdc6:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801cdca:	4293      	cmp	r3, r2
 801cdcc:	f340 810b 	ble.w	801cfe6 <__ieee754_pow+0x9b6>
 801cdd0:	151b      	asrs	r3, r3, #20
 801cdd2:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 801cdd6:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 801cdda:	fa4a f303 	asr.w	r3, sl, r3
 801cdde:	445b      	add	r3, fp
 801cde0:	f3c3 520a 	ubfx	r2, r3, #20, #11
 801cde4:	4e9d      	ldr	r6, [pc, #628]	; (801d05c <__ieee754_pow+0xa2c>)
 801cde6:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 801cdea:	4116      	asrs	r6, r2
 801cdec:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 801cdf0:	2000      	movs	r0, #0
 801cdf2:	ea23 0106 	bic.w	r1, r3, r6
 801cdf6:	f1c2 0214 	rsb	r2, r2, #20
 801cdfa:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 801cdfe:	fa4a fa02 	asr.w	sl, sl, r2
 801ce02:	f1bb 0f00 	cmp.w	fp, #0
 801ce06:	4602      	mov	r2, r0
 801ce08:	460b      	mov	r3, r1
 801ce0a:	4620      	mov	r0, r4
 801ce0c:	4629      	mov	r1, r5
 801ce0e:	bfb8      	it	lt
 801ce10:	f1ca 0a00 	rsblt	sl, sl, #0
 801ce14:	f7e3 fa48 	bl	80002a8 <__aeabi_dsub>
 801ce18:	ec41 0b19 	vmov	d9, r0, r1
 801ce1c:	4642      	mov	r2, r8
 801ce1e:	464b      	mov	r3, r9
 801ce20:	ec51 0b19 	vmov	r0, r1, d9
 801ce24:	f7e3 fa42 	bl	80002ac <__adddf3>
 801ce28:	2400      	movs	r4, #0
 801ce2a:	a379      	add	r3, pc, #484	; (adr r3, 801d010 <__ieee754_pow+0x9e0>)
 801ce2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ce30:	4620      	mov	r0, r4
 801ce32:	460d      	mov	r5, r1
 801ce34:	f7e3 fbf0 	bl	8000618 <__aeabi_dmul>
 801ce38:	ec53 2b19 	vmov	r2, r3, d9
 801ce3c:	4606      	mov	r6, r0
 801ce3e:	460f      	mov	r7, r1
 801ce40:	4620      	mov	r0, r4
 801ce42:	4629      	mov	r1, r5
 801ce44:	f7e3 fa30 	bl	80002a8 <__aeabi_dsub>
 801ce48:	4602      	mov	r2, r0
 801ce4a:	460b      	mov	r3, r1
 801ce4c:	4640      	mov	r0, r8
 801ce4e:	4649      	mov	r1, r9
 801ce50:	f7e3 fa2a 	bl	80002a8 <__aeabi_dsub>
 801ce54:	a370      	add	r3, pc, #448	; (adr r3, 801d018 <__ieee754_pow+0x9e8>)
 801ce56:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ce5a:	f7e3 fbdd 	bl	8000618 <__aeabi_dmul>
 801ce5e:	a370      	add	r3, pc, #448	; (adr r3, 801d020 <__ieee754_pow+0x9f0>)
 801ce60:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ce64:	4680      	mov	r8, r0
 801ce66:	4689      	mov	r9, r1
 801ce68:	4620      	mov	r0, r4
 801ce6a:	4629      	mov	r1, r5
 801ce6c:	f7e3 fbd4 	bl	8000618 <__aeabi_dmul>
 801ce70:	4602      	mov	r2, r0
 801ce72:	460b      	mov	r3, r1
 801ce74:	4640      	mov	r0, r8
 801ce76:	4649      	mov	r1, r9
 801ce78:	f7e3 fa18 	bl	80002ac <__adddf3>
 801ce7c:	4604      	mov	r4, r0
 801ce7e:	460d      	mov	r5, r1
 801ce80:	4602      	mov	r2, r0
 801ce82:	460b      	mov	r3, r1
 801ce84:	4630      	mov	r0, r6
 801ce86:	4639      	mov	r1, r7
 801ce88:	f7e3 fa10 	bl	80002ac <__adddf3>
 801ce8c:	4632      	mov	r2, r6
 801ce8e:	463b      	mov	r3, r7
 801ce90:	4680      	mov	r8, r0
 801ce92:	4689      	mov	r9, r1
 801ce94:	f7e3 fa08 	bl	80002a8 <__aeabi_dsub>
 801ce98:	4602      	mov	r2, r0
 801ce9a:	460b      	mov	r3, r1
 801ce9c:	4620      	mov	r0, r4
 801ce9e:	4629      	mov	r1, r5
 801cea0:	f7e3 fa02 	bl	80002a8 <__aeabi_dsub>
 801cea4:	4642      	mov	r2, r8
 801cea6:	4606      	mov	r6, r0
 801cea8:	460f      	mov	r7, r1
 801ceaa:	464b      	mov	r3, r9
 801ceac:	4640      	mov	r0, r8
 801ceae:	4649      	mov	r1, r9
 801ceb0:	f7e3 fbb2 	bl	8000618 <__aeabi_dmul>
 801ceb4:	a35c      	add	r3, pc, #368	; (adr r3, 801d028 <__ieee754_pow+0x9f8>)
 801ceb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ceba:	4604      	mov	r4, r0
 801cebc:	460d      	mov	r5, r1
 801cebe:	f7e3 fbab 	bl	8000618 <__aeabi_dmul>
 801cec2:	a35b      	add	r3, pc, #364	; (adr r3, 801d030 <__ieee754_pow+0xa00>)
 801cec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cec8:	f7e3 f9ee 	bl	80002a8 <__aeabi_dsub>
 801cecc:	4622      	mov	r2, r4
 801cece:	462b      	mov	r3, r5
 801ced0:	f7e3 fba2 	bl	8000618 <__aeabi_dmul>
 801ced4:	a358      	add	r3, pc, #352	; (adr r3, 801d038 <__ieee754_pow+0xa08>)
 801ced6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ceda:	f7e3 f9e7 	bl	80002ac <__adddf3>
 801cede:	4622      	mov	r2, r4
 801cee0:	462b      	mov	r3, r5
 801cee2:	f7e3 fb99 	bl	8000618 <__aeabi_dmul>
 801cee6:	a356      	add	r3, pc, #344	; (adr r3, 801d040 <__ieee754_pow+0xa10>)
 801cee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ceec:	f7e3 f9dc 	bl	80002a8 <__aeabi_dsub>
 801cef0:	4622      	mov	r2, r4
 801cef2:	462b      	mov	r3, r5
 801cef4:	f7e3 fb90 	bl	8000618 <__aeabi_dmul>
 801cef8:	a353      	add	r3, pc, #332	; (adr r3, 801d048 <__ieee754_pow+0xa18>)
 801cefa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cefe:	f7e3 f9d5 	bl	80002ac <__adddf3>
 801cf02:	4622      	mov	r2, r4
 801cf04:	462b      	mov	r3, r5
 801cf06:	f7e3 fb87 	bl	8000618 <__aeabi_dmul>
 801cf0a:	4602      	mov	r2, r0
 801cf0c:	460b      	mov	r3, r1
 801cf0e:	4640      	mov	r0, r8
 801cf10:	4649      	mov	r1, r9
 801cf12:	f7e3 f9c9 	bl	80002a8 <__aeabi_dsub>
 801cf16:	4604      	mov	r4, r0
 801cf18:	460d      	mov	r5, r1
 801cf1a:	4602      	mov	r2, r0
 801cf1c:	460b      	mov	r3, r1
 801cf1e:	4640      	mov	r0, r8
 801cf20:	4649      	mov	r1, r9
 801cf22:	f7e3 fb79 	bl	8000618 <__aeabi_dmul>
 801cf26:	2200      	movs	r2, #0
 801cf28:	ec41 0b19 	vmov	d9, r0, r1
 801cf2c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801cf30:	4620      	mov	r0, r4
 801cf32:	4629      	mov	r1, r5
 801cf34:	f7e3 f9b8 	bl	80002a8 <__aeabi_dsub>
 801cf38:	4602      	mov	r2, r0
 801cf3a:	460b      	mov	r3, r1
 801cf3c:	ec51 0b19 	vmov	r0, r1, d9
 801cf40:	f7e3 fc94 	bl	800086c <__aeabi_ddiv>
 801cf44:	4632      	mov	r2, r6
 801cf46:	4604      	mov	r4, r0
 801cf48:	460d      	mov	r5, r1
 801cf4a:	463b      	mov	r3, r7
 801cf4c:	4640      	mov	r0, r8
 801cf4e:	4649      	mov	r1, r9
 801cf50:	f7e3 fb62 	bl	8000618 <__aeabi_dmul>
 801cf54:	4632      	mov	r2, r6
 801cf56:	463b      	mov	r3, r7
 801cf58:	f7e3 f9a8 	bl	80002ac <__adddf3>
 801cf5c:	4602      	mov	r2, r0
 801cf5e:	460b      	mov	r3, r1
 801cf60:	4620      	mov	r0, r4
 801cf62:	4629      	mov	r1, r5
 801cf64:	f7e3 f9a0 	bl	80002a8 <__aeabi_dsub>
 801cf68:	4642      	mov	r2, r8
 801cf6a:	464b      	mov	r3, r9
 801cf6c:	f7e3 f99c 	bl	80002a8 <__aeabi_dsub>
 801cf70:	460b      	mov	r3, r1
 801cf72:	4602      	mov	r2, r0
 801cf74:	493a      	ldr	r1, [pc, #232]	; (801d060 <__ieee754_pow+0xa30>)
 801cf76:	2000      	movs	r0, #0
 801cf78:	f7e3 f996 	bl	80002a8 <__aeabi_dsub>
 801cf7c:	e9cd 0100 	strd	r0, r1, [sp]
 801cf80:	9b01      	ldr	r3, [sp, #4]
 801cf82:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 801cf86:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801cf8a:	da2f      	bge.n	801cfec <__ieee754_pow+0x9bc>
 801cf8c:	4650      	mov	r0, sl
 801cf8e:	ed9d 0b00 	vldr	d0, [sp]
 801cf92:	f000 f9c1 	bl	801d318 <scalbn>
 801cf96:	ec51 0b10 	vmov	r0, r1, d0
 801cf9a:	ec53 2b18 	vmov	r2, r3, d8
 801cf9e:	f7ff bbe0 	b.w	801c762 <__ieee754_pow+0x132>
 801cfa2:	4b30      	ldr	r3, [pc, #192]	; (801d064 <__ieee754_pow+0xa34>)
 801cfa4:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 801cfa8:	429e      	cmp	r6, r3
 801cfaa:	f77f af0b 	ble.w	801cdc4 <__ieee754_pow+0x794>
 801cfae:	4b2e      	ldr	r3, [pc, #184]	; (801d068 <__ieee754_pow+0xa38>)
 801cfb0:	440b      	add	r3, r1
 801cfb2:	4303      	orrs	r3, r0
 801cfb4:	d00b      	beq.n	801cfce <__ieee754_pow+0x99e>
 801cfb6:	a326      	add	r3, pc, #152	; (adr r3, 801d050 <__ieee754_pow+0xa20>)
 801cfb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cfbc:	ec51 0b18 	vmov	r0, r1, d8
 801cfc0:	f7e3 fb2a 	bl	8000618 <__aeabi_dmul>
 801cfc4:	a322      	add	r3, pc, #136	; (adr r3, 801d050 <__ieee754_pow+0xa20>)
 801cfc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cfca:	f7ff bbca 	b.w	801c762 <__ieee754_pow+0x132>
 801cfce:	4622      	mov	r2, r4
 801cfd0:	462b      	mov	r3, r5
 801cfd2:	f7e3 f969 	bl	80002a8 <__aeabi_dsub>
 801cfd6:	4642      	mov	r2, r8
 801cfd8:	464b      	mov	r3, r9
 801cfda:	f7e3 fda3 	bl	8000b24 <__aeabi_dcmpge>
 801cfde:	2800      	cmp	r0, #0
 801cfe0:	f43f aef0 	beq.w	801cdc4 <__ieee754_pow+0x794>
 801cfe4:	e7e7      	b.n	801cfb6 <__ieee754_pow+0x986>
 801cfe6:	f04f 0a00 	mov.w	sl, #0
 801cfea:	e717      	b.n	801ce1c <__ieee754_pow+0x7ec>
 801cfec:	e9dd 0100 	ldrd	r0, r1, [sp]
 801cff0:	4619      	mov	r1, r3
 801cff2:	e7d2      	b.n	801cf9a <__ieee754_pow+0x96a>
 801cff4:	491a      	ldr	r1, [pc, #104]	; (801d060 <__ieee754_pow+0xa30>)
 801cff6:	2000      	movs	r0, #0
 801cff8:	f7ff bb9e 	b.w	801c738 <__ieee754_pow+0x108>
 801cffc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801d000:	f7ff bb9a 	b.w	801c738 <__ieee754_pow+0x108>
 801d004:	9000      	str	r0, [sp, #0]
 801d006:	f7ff bb76 	b.w	801c6f6 <__ieee754_pow+0xc6>
 801d00a:	2100      	movs	r1, #0
 801d00c:	f7ff bb60 	b.w	801c6d0 <__ieee754_pow+0xa0>
 801d010:	00000000 	.word	0x00000000
 801d014:	3fe62e43 	.word	0x3fe62e43
 801d018:	fefa39ef 	.word	0xfefa39ef
 801d01c:	3fe62e42 	.word	0x3fe62e42
 801d020:	0ca86c39 	.word	0x0ca86c39
 801d024:	be205c61 	.word	0xbe205c61
 801d028:	72bea4d0 	.word	0x72bea4d0
 801d02c:	3e663769 	.word	0x3e663769
 801d030:	c5d26bf1 	.word	0xc5d26bf1
 801d034:	3ebbbd41 	.word	0x3ebbbd41
 801d038:	af25de2c 	.word	0xaf25de2c
 801d03c:	3f11566a 	.word	0x3f11566a
 801d040:	16bebd93 	.word	0x16bebd93
 801d044:	3f66c16c 	.word	0x3f66c16c
 801d048:	5555553e 	.word	0x5555553e
 801d04c:	3fc55555 	.word	0x3fc55555
 801d050:	c2f8f359 	.word	0xc2f8f359
 801d054:	01a56e1f 	.word	0x01a56e1f
 801d058:	3fe00000 	.word	0x3fe00000
 801d05c:	000fffff 	.word	0x000fffff
 801d060:	3ff00000 	.word	0x3ff00000
 801d064:	4090cbff 	.word	0x4090cbff
 801d068:	3f6f3400 	.word	0x3f6f3400
 801d06c:	652b82fe 	.word	0x652b82fe
 801d070:	3c971547 	.word	0x3c971547

0801d074 <__ieee754_sqrt>:
 801d074:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d078:	ec55 4b10 	vmov	r4, r5, d0
 801d07c:	4e56      	ldr	r6, [pc, #344]	; (801d1d8 <__ieee754_sqrt+0x164>)
 801d07e:	43ae      	bics	r6, r5
 801d080:	ee10 0a10 	vmov	r0, s0
 801d084:	ee10 3a10 	vmov	r3, s0
 801d088:	4629      	mov	r1, r5
 801d08a:	462a      	mov	r2, r5
 801d08c:	d110      	bne.n	801d0b0 <__ieee754_sqrt+0x3c>
 801d08e:	ee10 2a10 	vmov	r2, s0
 801d092:	462b      	mov	r3, r5
 801d094:	f7e3 fac0 	bl	8000618 <__aeabi_dmul>
 801d098:	4602      	mov	r2, r0
 801d09a:	460b      	mov	r3, r1
 801d09c:	4620      	mov	r0, r4
 801d09e:	4629      	mov	r1, r5
 801d0a0:	f7e3 f904 	bl	80002ac <__adddf3>
 801d0a4:	4604      	mov	r4, r0
 801d0a6:	460d      	mov	r5, r1
 801d0a8:	ec45 4b10 	vmov	d0, r4, r5
 801d0ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d0b0:	2d00      	cmp	r5, #0
 801d0b2:	dc10      	bgt.n	801d0d6 <__ieee754_sqrt+0x62>
 801d0b4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801d0b8:	4330      	orrs	r0, r6
 801d0ba:	d0f5      	beq.n	801d0a8 <__ieee754_sqrt+0x34>
 801d0bc:	b15d      	cbz	r5, 801d0d6 <__ieee754_sqrt+0x62>
 801d0be:	ee10 2a10 	vmov	r2, s0
 801d0c2:	462b      	mov	r3, r5
 801d0c4:	ee10 0a10 	vmov	r0, s0
 801d0c8:	f7e3 f8ee 	bl	80002a8 <__aeabi_dsub>
 801d0cc:	4602      	mov	r2, r0
 801d0ce:	460b      	mov	r3, r1
 801d0d0:	f7e3 fbcc 	bl	800086c <__aeabi_ddiv>
 801d0d4:	e7e6      	b.n	801d0a4 <__ieee754_sqrt+0x30>
 801d0d6:	1509      	asrs	r1, r1, #20
 801d0d8:	d076      	beq.n	801d1c8 <__ieee754_sqrt+0x154>
 801d0da:	f3c2 0213 	ubfx	r2, r2, #0, #20
 801d0de:	07ce      	lsls	r6, r1, #31
 801d0e0:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 801d0e4:	bf5e      	ittt	pl
 801d0e6:	0fda      	lsrpl	r2, r3, #31
 801d0e8:	005b      	lslpl	r3, r3, #1
 801d0ea:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 801d0ee:	0fda      	lsrs	r2, r3, #31
 801d0f0:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 801d0f4:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 801d0f8:	2000      	movs	r0, #0
 801d0fa:	106d      	asrs	r5, r5, #1
 801d0fc:	005b      	lsls	r3, r3, #1
 801d0fe:	f04f 0e16 	mov.w	lr, #22
 801d102:	4684      	mov	ip, r0
 801d104:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801d108:	eb0c 0401 	add.w	r4, ip, r1
 801d10c:	4294      	cmp	r4, r2
 801d10e:	bfde      	ittt	le
 801d110:	1b12      	suble	r2, r2, r4
 801d112:	eb04 0c01 	addle.w	ip, r4, r1
 801d116:	1840      	addle	r0, r0, r1
 801d118:	0052      	lsls	r2, r2, #1
 801d11a:	f1be 0e01 	subs.w	lr, lr, #1
 801d11e:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 801d122:	ea4f 0151 	mov.w	r1, r1, lsr #1
 801d126:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801d12a:	d1ed      	bne.n	801d108 <__ieee754_sqrt+0x94>
 801d12c:	4671      	mov	r1, lr
 801d12e:	2720      	movs	r7, #32
 801d130:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 801d134:	4562      	cmp	r2, ip
 801d136:	eb04 060e 	add.w	r6, r4, lr
 801d13a:	dc02      	bgt.n	801d142 <__ieee754_sqrt+0xce>
 801d13c:	d113      	bne.n	801d166 <__ieee754_sqrt+0xf2>
 801d13e:	429e      	cmp	r6, r3
 801d140:	d811      	bhi.n	801d166 <__ieee754_sqrt+0xf2>
 801d142:	2e00      	cmp	r6, #0
 801d144:	eb06 0e04 	add.w	lr, r6, r4
 801d148:	da43      	bge.n	801d1d2 <__ieee754_sqrt+0x15e>
 801d14a:	f1be 0f00 	cmp.w	lr, #0
 801d14e:	db40      	blt.n	801d1d2 <__ieee754_sqrt+0x15e>
 801d150:	f10c 0801 	add.w	r8, ip, #1
 801d154:	eba2 020c 	sub.w	r2, r2, ip
 801d158:	429e      	cmp	r6, r3
 801d15a:	bf88      	it	hi
 801d15c:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801d160:	1b9b      	subs	r3, r3, r6
 801d162:	4421      	add	r1, r4
 801d164:	46c4      	mov	ip, r8
 801d166:	0052      	lsls	r2, r2, #1
 801d168:	3f01      	subs	r7, #1
 801d16a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 801d16e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 801d172:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801d176:	d1dd      	bne.n	801d134 <__ieee754_sqrt+0xc0>
 801d178:	4313      	orrs	r3, r2
 801d17a:	d006      	beq.n	801d18a <__ieee754_sqrt+0x116>
 801d17c:	1c4c      	adds	r4, r1, #1
 801d17e:	bf13      	iteet	ne
 801d180:	3101      	addne	r1, #1
 801d182:	3001      	addeq	r0, #1
 801d184:	4639      	moveq	r1, r7
 801d186:	f021 0101 	bicne.w	r1, r1, #1
 801d18a:	1043      	asrs	r3, r0, #1
 801d18c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 801d190:	0849      	lsrs	r1, r1, #1
 801d192:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 801d196:	07c2      	lsls	r2, r0, #31
 801d198:	bf48      	it	mi
 801d19a:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 801d19e:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 801d1a2:	460c      	mov	r4, r1
 801d1a4:	463d      	mov	r5, r7
 801d1a6:	e77f      	b.n	801d0a8 <__ieee754_sqrt+0x34>
 801d1a8:	0ada      	lsrs	r2, r3, #11
 801d1aa:	3815      	subs	r0, #21
 801d1ac:	055b      	lsls	r3, r3, #21
 801d1ae:	2a00      	cmp	r2, #0
 801d1b0:	d0fa      	beq.n	801d1a8 <__ieee754_sqrt+0x134>
 801d1b2:	02d7      	lsls	r7, r2, #11
 801d1b4:	d50a      	bpl.n	801d1cc <__ieee754_sqrt+0x158>
 801d1b6:	f1c1 0420 	rsb	r4, r1, #32
 801d1ba:	fa23 f404 	lsr.w	r4, r3, r4
 801d1be:	1e4d      	subs	r5, r1, #1
 801d1c0:	408b      	lsls	r3, r1
 801d1c2:	4322      	orrs	r2, r4
 801d1c4:	1b41      	subs	r1, r0, r5
 801d1c6:	e788      	b.n	801d0da <__ieee754_sqrt+0x66>
 801d1c8:	4608      	mov	r0, r1
 801d1ca:	e7f0      	b.n	801d1ae <__ieee754_sqrt+0x13a>
 801d1cc:	0052      	lsls	r2, r2, #1
 801d1ce:	3101      	adds	r1, #1
 801d1d0:	e7ef      	b.n	801d1b2 <__ieee754_sqrt+0x13e>
 801d1d2:	46e0      	mov	r8, ip
 801d1d4:	e7be      	b.n	801d154 <__ieee754_sqrt+0xe0>
 801d1d6:	bf00      	nop
 801d1d8:	7ff00000 	.word	0x7ff00000

0801d1dc <fabs>:
 801d1dc:	ec51 0b10 	vmov	r0, r1, d0
 801d1e0:	ee10 2a10 	vmov	r2, s0
 801d1e4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801d1e8:	ec43 2b10 	vmov	d0, r2, r3
 801d1ec:	4770      	bx	lr

0801d1ee <finite>:
 801d1ee:	b082      	sub	sp, #8
 801d1f0:	ed8d 0b00 	vstr	d0, [sp]
 801d1f4:	9801      	ldr	r0, [sp, #4]
 801d1f6:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 801d1fa:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 801d1fe:	0fc0      	lsrs	r0, r0, #31
 801d200:	b002      	add	sp, #8
 801d202:	4770      	bx	lr

0801d204 <rint>:
 801d204:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801d206:	ec51 0b10 	vmov	r0, r1, d0
 801d20a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801d20e:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 801d212:	2e13      	cmp	r6, #19
 801d214:	ee10 4a10 	vmov	r4, s0
 801d218:	460b      	mov	r3, r1
 801d21a:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 801d21e:	dc58      	bgt.n	801d2d2 <rint+0xce>
 801d220:	2e00      	cmp	r6, #0
 801d222:	da2b      	bge.n	801d27c <rint+0x78>
 801d224:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 801d228:	4302      	orrs	r2, r0
 801d22a:	d023      	beq.n	801d274 <rint+0x70>
 801d22c:	f3c1 0213 	ubfx	r2, r1, #0, #20
 801d230:	4302      	orrs	r2, r0
 801d232:	4254      	negs	r4, r2
 801d234:	4314      	orrs	r4, r2
 801d236:	0c4b      	lsrs	r3, r1, #17
 801d238:	0b24      	lsrs	r4, r4, #12
 801d23a:	045b      	lsls	r3, r3, #17
 801d23c:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 801d240:	ea44 0103 	orr.w	r1, r4, r3
 801d244:	4b32      	ldr	r3, [pc, #200]	; (801d310 <rint+0x10c>)
 801d246:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801d24a:	e9d3 6700 	ldrd	r6, r7, [r3]
 801d24e:	4602      	mov	r2, r0
 801d250:	460b      	mov	r3, r1
 801d252:	4630      	mov	r0, r6
 801d254:	4639      	mov	r1, r7
 801d256:	f7e3 f829 	bl	80002ac <__adddf3>
 801d25a:	e9cd 0100 	strd	r0, r1, [sp]
 801d25e:	463b      	mov	r3, r7
 801d260:	e9dd 0100 	ldrd	r0, r1, [sp]
 801d264:	4632      	mov	r2, r6
 801d266:	f7e3 f81f 	bl	80002a8 <__aeabi_dsub>
 801d26a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801d26e:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 801d272:	4639      	mov	r1, r7
 801d274:	ec41 0b10 	vmov	d0, r0, r1
 801d278:	b003      	add	sp, #12
 801d27a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d27c:	4a25      	ldr	r2, [pc, #148]	; (801d314 <rint+0x110>)
 801d27e:	4132      	asrs	r2, r6
 801d280:	ea01 0702 	and.w	r7, r1, r2
 801d284:	4307      	orrs	r7, r0
 801d286:	d0f5      	beq.n	801d274 <rint+0x70>
 801d288:	0851      	lsrs	r1, r2, #1
 801d28a:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 801d28e:	4314      	orrs	r4, r2
 801d290:	d00c      	beq.n	801d2ac <rint+0xa8>
 801d292:	ea23 0201 	bic.w	r2, r3, r1
 801d296:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 801d29a:	2e13      	cmp	r6, #19
 801d29c:	fa43 f606 	asr.w	r6, r3, r6
 801d2a0:	bf0c      	ite	eq
 801d2a2:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 801d2a6:	2400      	movne	r4, #0
 801d2a8:	ea42 0306 	orr.w	r3, r2, r6
 801d2ac:	4918      	ldr	r1, [pc, #96]	; (801d310 <rint+0x10c>)
 801d2ae:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 801d2b2:	4622      	mov	r2, r4
 801d2b4:	e9d5 4500 	ldrd	r4, r5, [r5]
 801d2b8:	4620      	mov	r0, r4
 801d2ba:	4629      	mov	r1, r5
 801d2bc:	f7e2 fff6 	bl	80002ac <__adddf3>
 801d2c0:	e9cd 0100 	strd	r0, r1, [sp]
 801d2c4:	e9dd 0100 	ldrd	r0, r1, [sp]
 801d2c8:	4622      	mov	r2, r4
 801d2ca:	462b      	mov	r3, r5
 801d2cc:	f7e2 ffec 	bl	80002a8 <__aeabi_dsub>
 801d2d0:	e7d0      	b.n	801d274 <rint+0x70>
 801d2d2:	2e33      	cmp	r6, #51	; 0x33
 801d2d4:	dd07      	ble.n	801d2e6 <rint+0xe2>
 801d2d6:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801d2da:	d1cb      	bne.n	801d274 <rint+0x70>
 801d2dc:	ee10 2a10 	vmov	r2, s0
 801d2e0:	f7e2 ffe4 	bl	80002ac <__adddf3>
 801d2e4:	e7c6      	b.n	801d274 <rint+0x70>
 801d2e6:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 801d2ea:	f04f 36ff 	mov.w	r6, #4294967295
 801d2ee:	40d6      	lsrs	r6, r2
 801d2f0:	4230      	tst	r0, r6
 801d2f2:	d0bf      	beq.n	801d274 <rint+0x70>
 801d2f4:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 801d2f8:	ea4f 0156 	mov.w	r1, r6, lsr #1
 801d2fc:	bf1f      	itttt	ne
 801d2fe:	ea24 0101 	bicne.w	r1, r4, r1
 801d302:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 801d306:	fa44 f202 	asrne.w	r2, r4, r2
 801d30a:	ea41 0402 	orrne.w	r4, r1, r2
 801d30e:	e7cd      	b.n	801d2ac <rint+0xa8>
 801d310:	080213e8 	.word	0x080213e8
 801d314:	000fffff 	.word	0x000fffff

0801d318 <scalbn>:
 801d318:	b570      	push	{r4, r5, r6, lr}
 801d31a:	ec55 4b10 	vmov	r4, r5, d0
 801d31e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801d322:	4606      	mov	r6, r0
 801d324:	462b      	mov	r3, r5
 801d326:	b99a      	cbnz	r2, 801d350 <scalbn+0x38>
 801d328:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801d32c:	4323      	orrs	r3, r4
 801d32e:	d036      	beq.n	801d39e <scalbn+0x86>
 801d330:	4b39      	ldr	r3, [pc, #228]	; (801d418 <scalbn+0x100>)
 801d332:	4629      	mov	r1, r5
 801d334:	ee10 0a10 	vmov	r0, s0
 801d338:	2200      	movs	r2, #0
 801d33a:	f7e3 f96d 	bl	8000618 <__aeabi_dmul>
 801d33e:	4b37      	ldr	r3, [pc, #220]	; (801d41c <scalbn+0x104>)
 801d340:	429e      	cmp	r6, r3
 801d342:	4604      	mov	r4, r0
 801d344:	460d      	mov	r5, r1
 801d346:	da10      	bge.n	801d36a <scalbn+0x52>
 801d348:	a32b      	add	r3, pc, #172	; (adr r3, 801d3f8 <scalbn+0xe0>)
 801d34a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d34e:	e03a      	b.n	801d3c6 <scalbn+0xae>
 801d350:	f240 71ff 	movw	r1, #2047	; 0x7ff
 801d354:	428a      	cmp	r2, r1
 801d356:	d10c      	bne.n	801d372 <scalbn+0x5a>
 801d358:	ee10 2a10 	vmov	r2, s0
 801d35c:	4620      	mov	r0, r4
 801d35e:	4629      	mov	r1, r5
 801d360:	f7e2 ffa4 	bl	80002ac <__adddf3>
 801d364:	4604      	mov	r4, r0
 801d366:	460d      	mov	r5, r1
 801d368:	e019      	b.n	801d39e <scalbn+0x86>
 801d36a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801d36e:	460b      	mov	r3, r1
 801d370:	3a36      	subs	r2, #54	; 0x36
 801d372:	4432      	add	r2, r6
 801d374:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801d378:	428a      	cmp	r2, r1
 801d37a:	dd08      	ble.n	801d38e <scalbn+0x76>
 801d37c:	2d00      	cmp	r5, #0
 801d37e:	a120      	add	r1, pc, #128	; (adr r1, 801d400 <scalbn+0xe8>)
 801d380:	e9d1 0100 	ldrd	r0, r1, [r1]
 801d384:	da1c      	bge.n	801d3c0 <scalbn+0xa8>
 801d386:	a120      	add	r1, pc, #128	; (adr r1, 801d408 <scalbn+0xf0>)
 801d388:	e9d1 0100 	ldrd	r0, r1, [r1]
 801d38c:	e018      	b.n	801d3c0 <scalbn+0xa8>
 801d38e:	2a00      	cmp	r2, #0
 801d390:	dd08      	ble.n	801d3a4 <scalbn+0x8c>
 801d392:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801d396:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801d39a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801d39e:	ec45 4b10 	vmov	d0, r4, r5
 801d3a2:	bd70      	pop	{r4, r5, r6, pc}
 801d3a4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801d3a8:	da19      	bge.n	801d3de <scalbn+0xc6>
 801d3aa:	f24c 3350 	movw	r3, #50000	; 0xc350
 801d3ae:	429e      	cmp	r6, r3
 801d3b0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 801d3b4:	dd0a      	ble.n	801d3cc <scalbn+0xb4>
 801d3b6:	a112      	add	r1, pc, #72	; (adr r1, 801d400 <scalbn+0xe8>)
 801d3b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 801d3bc:	2b00      	cmp	r3, #0
 801d3be:	d1e2      	bne.n	801d386 <scalbn+0x6e>
 801d3c0:	a30f      	add	r3, pc, #60	; (adr r3, 801d400 <scalbn+0xe8>)
 801d3c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d3c6:	f7e3 f927 	bl	8000618 <__aeabi_dmul>
 801d3ca:	e7cb      	b.n	801d364 <scalbn+0x4c>
 801d3cc:	a10a      	add	r1, pc, #40	; (adr r1, 801d3f8 <scalbn+0xe0>)
 801d3ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 801d3d2:	2b00      	cmp	r3, #0
 801d3d4:	d0b8      	beq.n	801d348 <scalbn+0x30>
 801d3d6:	a10e      	add	r1, pc, #56	; (adr r1, 801d410 <scalbn+0xf8>)
 801d3d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 801d3dc:	e7b4      	b.n	801d348 <scalbn+0x30>
 801d3de:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801d3e2:	3236      	adds	r2, #54	; 0x36
 801d3e4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801d3e8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801d3ec:	4620      	mov	r0, r4
 801d3ee:	4b0c      	ldr	r3, [pc, #48]	; (801d420 <scalbn+0x108>)
 801d3f0:	2200      	movs	r2, #0
 801d3f2:	e7e8      	b.n	801d3c6 <scalbn+0xae>
 801d3f4:	f3af 8000 	nop.w
 801d3f8:	c2f8f359 	.word	0xc2f8f359
 801d3fc:	01a56e1f 	.word	0x01a56e1f
 801d400:	8800759c 	.word	0x8800759c
 801d404:	7e37e43c 	.word	0x7e37e43c
 801d408:	8800759c 	.word	0x8800759c
 801d40c:	fe37e43c 	.word	0xfe37e43c
 801d410:	c2f8f359 	.word	0xc2f8f359
 801d414:	81a56e1f 	.word	0x81a56e1f
 801d418:	43500000 	.word	0x43500000
 801d41c:	ffff3cb0 	.word	0xffff3cb0
 801d420:	3c900000 	.word	0x3c900000

0801d424 <_init>:
 801d424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d426:	bf00      	nop
 801d428:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801d42a:	bc08      	pop	{r3}
 801d42c:	469e      	mov	lr, r3
 801d42e:	4770      	bx	lr

0801d430 <_fini>:
 801d430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d432:	bf00      	nop
 801d434:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801d436:	bc08      	pop	{r3}
 801d438:	469e      	mov	lr, r3
 801d43a:	4770      	bx	lr
