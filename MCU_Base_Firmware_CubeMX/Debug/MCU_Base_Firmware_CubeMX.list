
MCU_Base_Firmware_CubeMX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001c154  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003d48  0801c2e8  0801c2e8  0002c2e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08020030  08020030  0004024c  2**0
                  CONTENTS
  4 .ARM          00000008  08020030  08020030  00030030  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08020038  08020038  0004024c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08020038  08020038  00030038  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802003c  0802003c  0003003c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000024c  20000000  08020040  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006c40  20000250  0802028c  00040250  2**3
                  ALLOC
 10 ._user_heap_stack 00006000  20006e90  0802028c  00046e90  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0004024c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00070987  00000000  00000000  0004027c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00009478  00000000  00000000  000b0c03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000021d0  00000000  00000000  000ba080  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002090  00000000  00000000  000bc250  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000363a3  00000000  00000000  000be2e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003cbc7  00000000  00000000  000f4683  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f316b  00000000  00000000  0013124a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  002243b5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a034  00000000  00000000  00224408  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000250 	.word	0x20000250
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801c2cc 	.word	0x0801c2cc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000254 	.word	0x20000254
 80001cc:	0801c2cc 	.word	0x0801c2cc

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_uldivmod>:
 8000c08:	b953      	cbnz	r3, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0a:	b94a      	cbnz	r2, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0c:	2900      	cmp	r1, #0
 8000c0e:	bf08      	it	eq
 8000c10:	2800      	cmpeq	r0, #0
 8000c12:	bf1c      	itt	ne
 8000c14:	f04f 31ff 	movne.w	r1, #4294967295
 8000c18:	f04f 30ff 	movne.w	r0, #4294967295
 8000c1c:	f000 b9a4 	b.w	8000f68 <__aeabi_idiv0>
 8000c20:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c24:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c28:	f000 f83c 	bl	8000ca4 <__udivmoddi4>
 8000c2c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c34:	b004      	add	sp, #16
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2lz>:
 8000c38:	b538      	push	{r3, r4, r5, lr}
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	4604      	mov	r4, r0
 8000c40:	460d      	mov	r5, r1
 8000c42:	f7ff ff5b 	bl	8000afc <__aeabi_dcmplt>
 8000c46:	b928      	cbnz	r0, 8000c54 <__aeabi_d2lz+0x1c>
 8000c48:	4620      	mov	r0, r4
 8000c4a:	4629      	mov	r1, r5
 8000c4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c50:	f000 b80a 	b.w	8000c68 <__aeabi_d2ulz>
 8000c54:	4620      	mov	r0, r4
 8000c56:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000c5a:	f000 f805 	bl	8000c68 <__aeabi_d2ulz>
 8000c5e:	4240      	negs	r0, r0
 8000c60:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c64:	bd38      	pop	{r3, r4, r5, pc}
 8000c66:	bf00      	nop

08000c68 <__aeabi_d2ulz>:
 8000c68:	b5d0      	push	{r4, r6, r7, lr}
 8000c6a:	4b0c      	ldr	r3, [pc, #48]	; (8000c9c <__aeabi_d2ulz+0x34>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	4606      	mov	r6, r0
 8000c70:	460f      	mov	r7, r1
 8000c72:	f7ff fcd1 	bl	8000618 <__aeabi_dmul>
 8000c76:	f7ff ffa7 	bl	8000bc8 <__aeabi_d2uiz>
 8000c7a:	4604      	mov	r4, r0
 8000c7c:	f7ff fc52 	bl	8000524 <__aeabi_ui2d>
 8000c80:	4b07      	ldr	r3, [pc, #28]	; (8000ca0 <__aeabi_d2ulz+0x38>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	f7ff fcc8 	bl	8000618 <__aeabi_dmul>
 8000c88:	4602      	mov	r2, r0
 8000c8a:	460b      	mov	r3, r1
 8000c8c:	4630      	mov	r0, r6
 8000c8e:	4639      	mov	r1, r7
 8000c90:	f7ff fb0a 	bl	80002a8 <__aeabi_dsub>
 8000c94:	f7ff ff98 	bl	8000bc8 <__aeabi_d2uiz>
 8000c98:	4621      	mov	r1, r4
 8000c9a:	bdd0      	pop	{r4, r6, r7, pc}
 8000c9c:	3df00000 	.word	0x3df00000
 8000ca0:	41f00000 	.word	0x41f00000

08000ca4 <__udivmoddi4>:
 8000ca4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ca8:	9d08      	ldr	r5, [sp, #32]
 8000caa:	4604      	mov	r4, r0
 8000cac:	468c      	mov	ip, r1
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	f040 8083 	bne.w	8000dba <__udivmoddi4+0x116>
 8000cb4:	428a      	cmp	r2, r1
 8000cb6:	4617      	mov	r7, r2
 8000cb8:	d947      	bls.n	8000d4a <__udivmoddi4+0xa6>
 8000cba:	fab2 f282 	clz	r2, r2
 8000cbe:	b142      	cbz	r2, 8000cd2 <__udivmoddi4+0x2e>
 8000cc0:	f1c2 0020 	rsb	r0, r2, #32
 8000cc4:	fa24 f000 	lsr.w	r0, r4, r0
 8000cc8:	4091      	lsls	r1, r2
 8000cca:	4097      	lsls	r7, r2
 8000ccc:	ea40 0c01 	orr.w	ip, r0, r1
 8000cd0:	4094      	lsls	r4, r2
 8000cd2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cd6:	0c23      	lsrs	r3, r4, #16
 8000cd8:	fbbc f6f8 	udiv	r6, ip, r8
 8000cdc:	fa1f fe87 	uxth.w	lr, r7
 8000ce0:	fb08 c116 	mls	r1, r8, r6, ip
 8000ce4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ce8:	fb06 f10e 	mul.w	r1, r6, lr
 8000cec:	4299      	cmp	r1, r3
 8000cee:	d909      	bls.n	8000d04 <__udivmoddi4+0x60>
 8000cf0:	18fb      	adds	r3, r7, r3
 8000cf2:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cf6:	f080 8119 	bcs.w	8000f2c <__udivmoddi4+0x288>
 8000cfa:	4299      	cmp	r1, r3
 8000cfc:	f240 8116 	bls.w	8000f2c <__udivmoddi4+0x288>
 8000d00:	3e02      	subs	r6, #2
 8000d02:	443b      	add	r3, r7
 8000d04:	1a5b      	subs	r3, r3, r1
 8000d06:	b2a4      	uxth	r4, r4
 8000d08:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d0c:	fb08 3310 	mls	r3, r8, r0, r3
 8000d10:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d14:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d18:	45a6      	cmp	lr, r4
 8000d1a:	d909      	bls.n	8000d30 <__udivmoddi4+0x8c>
 8000d1c:	193c      	adds	r4, r7, r4
 8000d1e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d22:	f080 8105 	bcs.w	8000f30 <__udivmoddi4+0x28c>
 8000d26:	45a6      	cmp	lr, r4
 8000d28:	f240 8102 	bls.w	8000f30 <__udivmoddi4+0x28c>
 8000d2c:	3802      	subs	r0, #2
 8000d2e:	443c      	add	r4, r7
 8000d30:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d34:	eba4 040e 	sub.w	r4, r4, lr
 8000d38:	2600      	movs	r6, #0
 8000d3a:	b11d      	cbz	r5, 8000d44 <__udivmoddi4+0xa0>
 8000d3c:	40d4      	lsrs	r4, r2
 8000d3e:	2300      	movs	r3, #0
 8000d40:	e9c5 4300 	strd	r4, r3, [r5]
 8000d44:	4631      	mov	r1, r6
 8000d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4a:	b902      	cbnz	r2, 8000d4e <__udivmoddi4+0xaa>
 8000d4c:	deff      	udf	#255	; 0xff
 8000d4e:	fab2 f282 	clz	r2, r2
 8000d52:	2a00      	cmp	r2, #0
 8000d54:	d150      	bne.n	8000df8 <__udivmoddi4+0x154>
 8000d56:	1bcb      	subs	r3, r1, r7
 8000d58:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d5c:	fa1f f887 	uxth.w	r8, r7
 8000d60:	2601      	movs	r6, #1
 8000d62:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d66:	0c21      	lsrs	r1, r4, #16
 8000d68:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d6c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d70:	fb08 f30c 	mul.w	r3, r8, ip
 8000d74:	428b      	cmp	r3, r1
 8000d76:	d907      	bls.n	8000d88 <__udivmoddi4+0xe4>
 8000d78:	1879      	adds	r1, r7, r1
 8000d7a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d7e:	d202      	bcs.n	8000d86 <__udivmoddi4+0xe2>
 8000d80:	428b      	cmp	r3, r1
 8000d82:	f200 80e9 	bhi.w	8000f58 <__udivmoddi4+0x2b4>
 8000d86:	4684      	mov	ip, r0
 8000d88:	1ac9      	subs	r1, r1, r3
 8000d8a:	b2a3      	uxth	r3, r4
 8000d8c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d90:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d94:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d98:	fb08 f800 	mul.w	r8, r8, r0
 8000d9c:	45a0      	cmp	r8, r4
 8000d9e:	d907      	bls.n	8000db0 <__udivmoddi4+0x10c>
 8000da0:	193c      	adds	r4, r7, r4
 8000da2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da6:	d202      	bcs.n	8000dae <__udivmoddi4+0x10a>
 8000da8:	45a0      	cmp	r8, r4
 8000daa:	f200 80d9 	bhi.w	8000f60 <__udivmoddi4+0x2bc>
 8000dae:	4618      	mov	r0, r3
 8000db0:	eba4 0408 	sub.w	r4, r4, r8
 8000db4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000db8:	e7bf      	b.n	8000d3a <__udivmoddi4+0x96>
 8000dba:	428b      	cmp	r3, r1
 8000dbc:	d909      	bls.n	8000dd2 <__udivmoddi4+0x12e>
 8000dbe:	2d00      	cmp	r5, #0
 8000dc0:	f000 80b1 	beq.w	8000f26 <__udivmoddi4+0x282>
 8000dc4:	2600      	movs	r6, #0
 8000dc6:	e9c5 0100 	strd	r0, r1, [r5]
 8000dca:	4630      	mov	r0, r6
 8000dcc:	4631      	mov	r1, r6
 8000dce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dd2:	fab3 f683 	clz	r6, r3
 8000dd6:	2e00      	cmp	r6, #0
 8000dd8:	d14a      	bne.n	8000e70 <__udivmoddi4+0x1cc>
 8000dda:	428b      	cmp	r3, r1
 8000ddc:	d302      	bcc.n	8000de4 <__udivmoddi4+0x140>
 8000dde:	4282      	cmp	r2, r0
 8000de0:	f200 80b8 	bhi.w	8000f54 <__udivmoddi4+0x2b0>
 8000de4:	1a84      	subs	r4, r0, r2
 8000de6:	eb61 0103 	sbc.w	r1, r1, r3
 8000dea:	2001      	movs	r0, #1
 8000dec:	468c      	mov	ip, r1
 8000dee:	2d00      	cmp	r5, #0
 8000df0:	d0a8      	beq.n	8000d44 <__udivmoddi4+0xa0>
 8000df2:	e9c5 4c00 	strd	r4, ip, [r5]
 8000df6:	e7a5      	b.n	8000d44 <__udivmoddi4+0xa0>
 8000df8:	f1c2 0320 	rsb	r3, r2, #32
 8000dfc:	fa20 f603 	lsr.w	r6, r0, r3
 8000e00:	4097      	lsls	r7, r2
 8000e02:	fa01 f002 	lsl.w	r0, r1, r2
 8000e06:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e0a:	40d9      	lsrs	r1, r3
 8000e0c:	4330      	orrs	r0, r6
 8000e0e:	0c03      	lsrs	r3, r0, #16
 8000e10:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e14:	fa1f f887 	uxth.w	r8, r7
 8000e18:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e1c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e20:	fb06 f108 	mul.w	r1, r6, r8
 8000e24:	4299      	cmp	r1, r3
 8000e26:	fa04 f402 	lsl.w	r4, r4, r2
 8000e2a:	d909      	bls.n	8000e40 <__udivmoddi4+0x19c>
 8000e2c:	18fb      	adds	r3, r7, r3
 8000e2e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e32:	f080 808d 	bcs.w	8000f50 <__udivmoddi4+0x2ac>
 8000e36:	4299      	cmp	r1, r3
 8000e38:	f240 808a 	bls.w	8000f50 <__udivmoddi4+0x2ac>
 8000e3c:	3e02      	subs	r6, #2
 8000e3e:	443b      	add	r3, r7
 8000e40:	1a5b      	subs	r3, r3, r1
 8000e42:	b281      	uxth	r1, r0
 8000e44:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e48:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e4c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e50:	fb00 f308 	mul.w	r3, r0, r8
 8000e54:	428b      	cmp	r3, r1
 8000e56:	d907      	bls.n	8000e68 <__udivmoddi4+0x1c4>
 8000e58:	1879      	adds	r1, r7, r1
 8000e5a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e5e:	d273      	bcs.n	8000f48 <__udivmoddi4+0x2a4>
 8000e60:	428b      	cmp	r3, r1
 8000e62:	d971      	bls.n	8000f48 <__udivmoddi4+0x2a4>
 8000e64:	3802      	subs	r0, #2
 8000e66:	4439      	add	r1, r7
 8000e68:	1acb      	subs	r3, r1, r3
 8000e6a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e6e:	e778      	b.n	8000d62 <__udivmoddi4+0xbe>
 8000e70:	f1c6 0c20 	rsb	ip, r6, #32
 8000e74:	fa03 f406 	lsl.w	r4, r3, r6
 8000e78:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e7c:	431c      	orrs	r4, r3
 8000e7e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e82:	fa01 f306 	lsl.w	r3, r1, r6
 8000e86:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e8a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e8e:	431f      	orrs	r7, r3
 8000e90:	0c3b      	lsrs	r3, r7, #16
 8000e92:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e96:	fa1f f884 	uxth.w	r8, r4
 8000e9a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e9e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000ea2:	fb09 fa08 	mul.w	sl, r9, r8
 8000ea6:	458a      	cmp	sl, r1
 8000ea8:	fa02 f206 	lsl.w	r2, r2, r6
 8000eac:	fa00 f306 	lsl.w	r3, r0, r6
 8000eb0:	d908      	bls.n	8000ec4 <__udivmoddi4+0x220>
 8000eb2:	1861      	adds	r1, r4, r1
 8000eb4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000eb8:	d248      	bcs.n	8000f4c <__udivmoddi4+0x2a8>
 8000eba:	458a      	cmp	sl, r1
 8000ebc:	d946      	bls.n	8000f4c <__udivmoddi4+0x2a8>
 8000ebe:	f1a9 0902 	sub.w	r9, r9, #2
 8000ec2:	4421      	add	r1, r4
 8000ec4:	eba1 010a 	sub.w	r1, r1, sl
 8000ec8:	b2bf      	uxth	r7, r7
 8000eca:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ece:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ed2:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000ed6:	fb00 f808 	mul.w	r8, r0, r8
 8000eda:	45b8      	cmp	r8, r7
 8000edc:	d907      	bls.n	8000eee <__udivmoddi4+0x24a>
 8000ede:	19e7      	adds	r7, r4, r7
 8000ee0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ee4:	d22e      	bcs.n	8000f44 <__udivmoddi4+0x2a0>
 8000ee6:	45b8      	cmp	r8, r7
 8000ee8:	d92c      	bls.n	8000f44 <__udivmoddi4+0x2a0>
 8000eea:	3802      	subs	r0, #2
 8000eec:	4427      	add	r7, r4
 8000eee:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ef2:	eba7 0708 	sub.w	r7, r7, r8
 8000ef6:	fba0 8902 	umull	r8, r9, r0, r2
 8000efa:	454f      	cmp	r7, r9
 8000efc:	46c6      	mov	lr, r8
 8000efe:	4649      	mov	r1, r9
 8000f00:	d31a      	bcc.n	8000f38 <__udivmoddi4+0x294>
 8000f02:	d017      	beq.n	8000f34 <__udivmoddi4+0x290>
 8000f04:	b15d      	cbz	r5, 8000f1e <__udivmoddi4+0x27a>
 8000f06:	ebb3 020e 	subs.w	r2, r3, lr
 8000f0a:	eb67 0701 	sbc.w	r7, r7, r1
 8000f0e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f12:	40f2      	lsrs	r2, r6
 8000f14:	ea4c 0202 	orr.w	r2, ip, r2
 8000f18:	40f7      	lsrs	r7, r6
 8000f1a:	e9c5 2700 	strd	r2, r7, [r5]
 8000f1e:	2600      	movs	r6, #0
 8000f20:	4631      	mov	r1, r6
 8000f22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f26:	462e      	mov	r6, r5
 8000f28:	4628      	mov	r0, r5
 8000f2a:	e70b      	b.n	8000d44 <__udivmoddi4+0xa0>
 8000f2c:	4606      	mov	r6, r0
 8000f2e:	e6e9      	b.n	8000d04 <__udivmoddi4+0x60>
 8000f30:	4618      	mov	r0, r3
 8000f32:	e6fd      	b.n	8000d30 <__udivmoddi4+0x8c>
 8000f34:	4543      	cmp	r3, r8
 8000f36:	d2e5      	bcs.n	8000f04 <__udivmoddi4+0x260>
 8000f38:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f3c:	eb69 0104 	sbc.w	r1, r9, r4
 8000f40:	3801      	subs	r0, #1
 8000f42:	e7df      	b.n	8000f04 <__udivmoddi4+0x260>
 8000f44:	4608      	mov	r0, r1
 8000f46:	e7d2      	b.n	8000eee <__udivmoddi4+0x24a>
 8000f48:	4660      	mov	r0, ip
 8000f4a:	e78d      	b.n	8000e68 <__udivmoddi4+0x1c4>
 8000f4c:	4681      	mov	r9, r0
 8000f4e:	e7b9      	b.n	8000ec4 <__udivmoddi4+0x220>
 8000f50:	4666      	mov	r6, ip
 8000f52:	e775      	b.n	8000e40 <__udivmoddi4+0x19c>
 8000f54:	4630      	mov	r0, r6
 8000f56:	e74a      	b.n	8000dee <__udivmoddi4+0x14a>
 8000f58:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f5c:	4439      	add	r1, r7
 8000f5e:	e713      	b.n	8000d88 <__udivmoddi4+0xe4>
 8000f60:	3802      	subs	r0, #2
 8000f62:	443c      	add	r4, r7
 8000f64:	e724      	b.n	8000db0 <__udivmoddi4+0x10c>
 8000f66:	bf00      	nop

08000f68 <__aeabi_idiv0>:
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop

08000f6c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b084      	sub	sp, #16
 8000f70:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000f72:	463b      	mov	r3, r7
 8000f74:	2200      	movs	r2, #0
 8000f76:	601a      	str	r2, [r3, #0]
 8000f78:	605a      	str	r2, [r3, #4]
 8000f7a:	609a      	str	r2, [r3, #8]
 8000f7c:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000f7e:	4b37      	ldr	r3, [pc, #220]	; (800105c <MX_ADC1_Init+0xf0>)
 8000f80:	4a37      	ldr	r2, [pc, #220]	; (8001060 <MX_ADC1_Init+0xf4>)
 8000f82:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000f84:	4b35      	ldr	r3, [pc, #212]	; (800105c <MX_ADC1_Init+0xf0>)
 8000f86:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000f8a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f8c:	4b33      	ldr	r3, [pc, #204]	; (800105c <MX_ADC1_Init+0xf0>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000f92:	4b32      	ldr	r3, [pc, #200]	; (800105c <MX_ADC1_Init+0xf0>)
 8000f94:	2201      	movs	r2, #1
 8000f96:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000f98:	4b30      	ldr	r3, [pc, #192]	; (800105c <MX_ADC1_Init+0xf0>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f9e:	4b2f      	ldr	r3, [pc, #188]	; (800105c <MX_ADC1_Init+0xf0>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000fa6:	4b2d      	ldr	r3, [pc, #180]	; (800105c <MX_ADC1_Init+0xf0>)
 8000fa8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000fac:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T4_CC4;
 8000fae:	4b2b      	ldr	r3, [pc, #172]	; (800105c <MX_ADC1_Init+0xf0>)
 8000fb0:	f04f 6210 	mov.w	r2, #150994944	; 0x9000000
 8000fb4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fb6:	4b29      	ldr	r3, [pc, #164]	; (800105c <MX_ADC1_Init+0xf0>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8000fbc:	4b27      	ldr	r3, [pc, #156]	; (800105c <MX_ADC1_Init+0xf0>)
 8000fbe:	2204      	movs	r2, #4
 8000fc0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000fc2:	4b26      	ldr	r3, [pc, #152]	; (800105c <MX_ADC1_Init+0xf0>)
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fca:	4b24      	ldr	r3, [pc, #144]	; (800105c <MX_ADC1_Init+0xf0>)
 8000fcc:	2201      	movs	r2, #1
 8000fce:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000fd0:	4822      	ldr	r0, [pc, #136]	; (800105c <MX_ADC1_Init+0xf0>)
 8000fd2:	f004 fb91 	bl	80056f8 <HAL_ADC_Init>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d001      	beq.n	8000fe0 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8000fdc:	f002 fdca 	bl	8003b74 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000fe0:	2303      	movs	r3, #3
 8000fe2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fec:	463b      	mov	r3, r7
 8000fee:	4619      	mov	r1, r3
 8000ff0:	481a      	ldr	r0, [pc, #104]	; (800105c <MX_ADC1_Init+0xf0>)
 8000ff2:	f004 fccb 	bl	800598c <HAL_ADC_ConfigChannel>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d001      	beq.n	8001000 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000ffc:	f002 fdba 	bl	8003b74 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001000:	2304      	movs	r3, #4
 8001002:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001004:	2302      	movs	r3, #2
 8001006:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001008:	463b      	mov	r3, r7
 800100a:	4619      	mov	r1, r3
 800100c:	4813      	ldr	r0, [pc, #76]	; (800105c <MX_ADC1_Init+0xf0>)
 800100e:	f004 fcbd 	bl	800598c <HAL_ADC_ConfigChannel>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d001      	beq.n	800101c <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8001018:	f002 fdac 	bl	8003b74 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800101c:	2305      	movs	r3, #5
 800101e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8001020:	2303      	movs	r3, #3
 8001022:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001024:	463b      	mov	r3, r7
 8001026:	4619      	mov	r1, r3
 8001028:	480c      	ldr	r0, [pc, #48]	; (800105c <MX_ADC1_Init+0xf0>)
 800102a:	f004 fcaf 	bl	800598c <HAL_ADC_ConfigChannel>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d001      	beq.n	8001038 <MX_ADC1_Init+0xcc>
  {
    Error_Handler();
 8001034:	f002 fd9e 	bl	8003b74 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001038:	2306      	movs	r3, #6
 800103a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 800103c:	2304      	movs	r3, #4
 800103e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001040:	463b      	mov	r3, r7
 8001042:	4619      	mov	r1, r3
 8001044:	4805      	ldr	r0, [pc, #20]	; (800105c <MX_ADC1_Init+0xf0>)
 8001046:	f004 fca1 	bl	800598c <HAL_ADC_ConfigChannel>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d001      	beq.n	8001054 <MX_ADC1_Init+0xe8>
  {
    Error_Handler();
 8001050:	f002 fd90 	bl	8003b74 <Error_Handler>
  }

}
 8001054:	bf00      	nop
 8001056:	3710      	adds	r7, #16
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}
 800105c:	200005a8 	.word	0x200005a8
 8001060:	40012000 	.word	0x40012000

08001064 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b08a      	sub	sp, #40	; 0x28
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800106c:	f107 0314 	add.w	r3, r7, #20
 8001070:	2200      	movs	r2, #0
 8001072:	601a      	str	r2, [r3, #0]
 8001074:	605a      	str	r2, [r3, #4]
 8001076:	609a      	str	r2, [r3, #8]
 8001078:	60da      	str	r2, [r3, #12]
 800107a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4a2f      	ldr	r2, [pc, #188]	; (8001140 <HAL_ADC_MspInit+0xdc>)
 8001082:	4293      	cmp	r3, r2
 8001084:	d157      	bne.n	8001136 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001086:	2300      	movs	r3, #0
 8001088:	613b      	str	r3, [r7, #16]
 800108a:	4b2e      	ldr	r3, [pc, #184]	; (8001144 <HAL_ADC_MspInit+0xe0>)
 800108c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800108e:	4a2d      	ldr	r2, [pc, #180]	; (8001144 <HAL_ADC_MspInit+0xe0>)
 8001090:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001094:	6453      	str	r3, [r2, #68]	; 0x44
 8001096:	4b2b      	ldr	r3, [pc, #172]	; (8001144 <HAL_ADC_MspInit+0xe0>)
 8001098:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800109a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800109e:	613b      	str	r3, [r7, #16]
 80010a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010a2:	2300      	movs	r3, #0
 80010a4:	60fb      	str	r3, [r7, #12]
 80010a6:	4b27      	ldr	r3, [pc, #156]	; (8001144 <HAL_ADC_MspInit+0xe0>)
 80010a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010aa:	4a26      	ldr	r2, [pc, #152]	; (8001144 <HAL_ADC_MspInit+0xe0>)
 80010ac:	f043 0301 	orr.w	r3, r3, #1
 80010b0:	6313      	str	r3, [r2, #48]	; 0x30
 80010b2:	4b24      	ldr	r3, [pc, #144]	; (8001144 <HAL_ADC_MspInit+0xe0>)
 80010b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b6:	f003 0301 	and.w	r3, r3, #1
 80010ba:	60fb      	str	r3, [r7, #12]
 80010bc:	68fb      	ldr	r3, [r7, #12]
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = AIN0_Pin|AIN1_Pin|AIN2_Pin|AIN3_Pin;
 80010be:	2378      	movs	r3, #120	; 0x78
 80010c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010c2:	2303      	movs	r3, #3
 80010c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c6:	2300      	movs	r3, #0
 80010c8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ca:	f107 0314 	add.w	r3, r7, #20
 80010ce:	4619      	mov	r1, r3
 80010d0:	481d      	ldr	r0, [pc, #116]	; (8001148 <HAL_ADC_MspInit+0xe4>)
 80010d2:	f006 fc11 	bl	80078f8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80010d6:	4b1d      	ldr	r3, [pc, #116]	; (800114c <HAL_ADC_MspInit+0xe8>)
 80010d8:	4a1d      	ldr	r2, [pc, #116]	; (8001150 <HAL_ADC_MspInit+0xec>)
 80010da:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80010dc:	4b1b      	ldr	r3, [pc, #108]	; (800114c <HAL_ADC_MspInit+0xe8>)
 80010de:	2200      	movs	r2, #0
 80010e0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80010e2:	4b1a      	ldr	r3, [pc, #104]	; (800114c <HAL_ADC_MspInit+0xe8>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80010e8:	4b18      	ldr	r3, [pc, #96]	; (800114c <HAL_ADC_MspInit+0xe8>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80010ee:	4b17      	ldr	r3, [pc, #92]	; (800114c <HAL_ADC_MspInit+0xe8>)
 80010f0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010f4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80010f6:	4b15      	ldr	r3, [pc, #84]	; (800114c <HAL_ADC_MspInit+0xe8>)
 80010f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80010fc:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80010fe:	4b13      	ldr	r3, [pc, #76]	; (800114c <HAL_ADC_MspInit+0xe8>)
 8001100:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001104:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001106:	4b11      	ldr	r3, [pc, #68]	; (800114c <HAL_ADC_MspInit+0xe8>)
 8001108:	f44f 7280 	mov.w	r2, #256	; 0x100
 800110c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800110e:	4b0f      	ldr	r3, [pc, #60]	; (800114c <HAL_ADC_MspInit+0xe8>)
 8001110:	2200      	movs	r2, #0
 8001112:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001114:	4b0d      	ldr	r3, [pc, #52]	; (800114c <HAL_ADC_MspInit+0xe8>)
 8001116:	2200      	movs	r2, #0
 8001118:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800111a:	480c      	ldr	r0, [pc, #48]	; (800114c <HAL_ADC_MspInit+0xe8>)
 800111c:	f004 ffb8 	bl	8006090 <HAL_DMA_Init>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8001126:	f002 fd25 	bl	8003b74 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	4a07      	ldr	r2, [pc, #28]	; (800114c <HAL_ADC_MspInit+0xe8>)
 800112e:	639a      	str	r2, [r3, #56]	; 0x38
 8001130:	4a06      	ldr	r2, [pc, #24]	; (800114c <HAL_ADC_MspInit+0xe8>)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001136:	bf00      	nop
 8001138:	3728      	adds	r7, #40	; 0x28
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	40012000 	.word	0x40012000
 8001144:	40023800 	.word	0x40023800
 8001148:	40020000 	.word	0x40020000
 800114c:	200005f0 	.word	0x200005f0
 8001150:	40026410 	.word	0x40026410
 8001154:	00000000 	.word	0x00000000

08001158 <Conversion_ADC1>:
//	Value = (Value / 60);		//Ток

	return Value;
}
double Conversion_ADC1(uint16_t ADC_value)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b086      	sub	sp, #24
 800115c:	af00      	add	r7, sp, #0
 800115e:	4603      	mov	r3, r0
 8001160:	80fb      	strh	r3, [r7, #6]
	double Value = 0;
 8001162:	f04f 0200 	mov.w	r2, #0
 8001166:	f04f 0300 	mov.w	r3, #0
 800116a:	e9c7 2304 	strd	r2, r3, [r7, #16]
	const double Resolution = 0.0008056640625;
 800116e:	a314      	add	r3, pc, #80	; (adr r3, 80011c0 <Conversion_ADC1+0x68>)
 8001170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001174:	e9c7 2302 	strd	r2, r3, [r7, #8]

	Value = (ADC_value * Resolution);
 8001178:	88fb      	ldrh	r3, [r7, #6]
 800117a:	4618      	mov	r0, r3
 800117c:	f7ff f9e2 	bl	8000544 <__aeabi_i2d>
 8001180:	4602      	mov	r2, r0
 8001182:	460b      	mov	r3, r1
 8001184:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001188:	f7ff fa46 	bl	8000618 <__aeabi_dmul>
 800118c:	4602      	mov	r2, r0
 800118e:	460b      	mov	r3, r1
 8001190:	e9c7 2304 	strd	r2, r3, [r7, #16]
	Value = (Value * 3.2323232323232);	//Напряжение
 8001194:	a30c      	add	r3, pc, #48	; (adr r3, 80011c8 <Conversion_ADC1+0x70>)
 8001196:	e9d3 2300 	ldrd	r2, r3, [r3]
 800119a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800119e:	f7ff fa3b 	bl	8000618 <__aeabi_dmul>
 80011a2:	4602      	mov	r2, r0
 80011a4:	460b      	mov	r3, r1
 80011a6:	e9c7 2304 	strd	r2, r3, [r7, #16]

	return Value;
 80011aa:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80011ae:	ec43 2b17 	vmov	d7, r2, r3
}
 80011b2:	eeb0 0a47 	vmov.f32	s0, s14
 80011b6:	eef0 0a67 	vmov.f32	s1, s15
 80011ba:	3718      	adds	r7, #24
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	66666666 	.word	0x66666666
 80011c4:	3f4a6666 	.word	0x3f4a6666
 80011c8:	48676ee8 	.word	0x48676ee8
 80011cc:	4009dbcc 	.word	0x4009dbcc

080011d0 <cJSON_strcasecmp>:
static const char *ep;

const char *cJSON_GetErrorPtr(void) {return ep;}

static int cJSON_strcasecmp(const char *s1,const char *s2)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b085      	sub	sp, #20
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
 80011d8:	6039      	str	r1, [r7, #0]
	if (!s1) return (s1==s2)?0:1;if (!s2) return 1;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d107      	bne.n	80011f0 <cJSON_strcasecmp+0x20>
 80011e0:	687a      	ldr	r2, [r7, #4]
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	429a      	cmp	r2, r3
 80011e6:	bf14      	ite	ne
 80011e8:	2301      	movne	r3, #1
 80011ea:	2300      	moveq	r3, #0
 80011ec:	b2db      	uxtb	r3, r3
 80011ee:	e055      	b.n	800129c <cJSON_strcasecmp+0xcc>
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d10d      	bne.n	8001212 <cJSON_strcasecmp+0x42>
 80011f6:	2301      	movs	r3, #1
 80011f8:	e050      	b.n	800129c <cJSON_strcasecmp+0xcc>
	for(; tolower(*s1) == tolower(*s2); ++s1, ++s2)	if(*s1 == 0)	return 0;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	781b      	ldrb	r3, [r3, #0]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d101      	bne.n	8001206 <cJSON_strcasecmp+0x36>
 8001202:	2300      	movs	r3, #0
 8001204:	e04a      	b.n	800129c <cJSON_strcasecmp+0xcc>
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	3301      	adds	r3, #1
 800120a:	607b      	str	r3, [r7, #4]
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	3301      	adds	r3, #1
 8001210:	603b      	str	r3, [r7, #0]
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	781b      	ldrb	r3, [r3, #0]
 8001216:	73fb      	strb	r3, [r7, #15]
 8001218:	7bfb      	ldrb	r3, [r7, #15]
 800121a:	3301      	adds	r3, #1
 800121c:	4a22      	ldr	r2, [pc, #136]	; (80012a8 <cJSON_strcasecmp+0xd8>)
 800121e:	4413      	add	r3, r2
 8001220:	781b      	ldrb	r3, [r3, #0]
 8001222:	f003 0303 	and.w	r3, r3, #3
 8001226:	2b01      	cmp	r3, #1
 8001228:	d103      	bne.n	8001232 <cJSON_strcasecmp+0x62>
 800122a:	7bfb      	ldrb	r3, [r7, #15]
 800122c:	f103 0220 	add.w	r2, r3, #32
 8001230:	e000      	b.n	8001234 <cJSON_strcasecmp+0x64>
 8001232:	7bfa      	ldrb	r2, [r7, #15]
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	73bb      	strb	r3, [r7, #14]
 800123a:	7bbb      	ldrb	r3, [r7, #14]
 800123c:	3301      	adds	r3, #1
 800123e:	491a      	ldr	r1, [pc, #104]	; (80012a8 <cJSON_strcasecmp+0xd8>)
 8001240:	440b      	add	r3, r1
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	f003 0303 	and.w	r3, r3, #3
 8001248:	2b01      	cmp	r3, #1
 800124a:	d102      	bne.n	8001252 <cJSON_strcasecmp+0x82>
 800124c:	7bbb      	ldrb	r3, [r7, #14]
 800124e:	3320      	adds	r3, #32
 8001250:	e000      	b.n	8001254 <cJSON_strcasecmp+0x84>
 8001252:	7bbb      	ldrb	r3, [r7, #14]
 8001254:	429a      	cmp	r2, r3
 8001256:	d0d0      	beq.n	80011fa <cJSON_strcasecmp+0x2a>
	return tolower(*(const unsigned char *)s1) - tolower(*(const unsigned char *)s2);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	737b      	strb	r3, [r7, #13]
 800125e:	7b7b      	ldrb	r3, [r7, #13]
 8001260:	3301      	adds	r3, #1
 8001262:	4a11      	ldr	r2, [pc, #68]	; (80012a8 <cJSON_strcasecmp+0xd8>)
 8001264:	4413      	add	r3, r2
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	f003 0303 	and.w	r3, r3, #3
 800126c:	2b01      	cmp	r3, #1
 800126e:	d103      	bne.n	8001278 <cJSON_strcasecmp+0xa8>
 8001270:	7b7b      	ldrb	r3, [r7, #13]
 8001272:	f103 0220 	add.w	r2, r3, #32
 8001276:	e000      	b.n	800127a <cJSON_strcasecmp+0xaa>
 8001278:	7b7a      	ldrb	r2, [r7, #13]
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	781b      	ldrb	r3, [r3, #0]
 800127e:	733b      	strb	r3, [r7, #12]
 8001280:	7b3b      	ldrb	r3, [r7, #12]
 8001282:	3301      	adds	r3, #1
 8001284:	4908      	ldr	r1, [pc, #32]	; (80012a8 <cJSON_strcasecmp+0xd8>)
 8001286:	440b      	add	r3, r1
 8001288:	781b      	ldrb	r3, [r3, #0]
 800128a:	f003 0303 	and.w	r3, r3, #3
 800128e:	2b01      	cmp	r3, #1
 8001290:	d102      	bne.n	8001298 <cJSON_strcasecmp+0xc8>
 8001292:	7b3b      	ldrb	r3, [r7, #12]
 8001294:	3320      	adds	r3, #32
 8001296:	e000      	b.n	800129a <cJSON_strcasecmp+0xca>
 8001298:	7b3b      	ldrb	r3, [r7, #12]
 800129a:	1ad3      	subs	r3, r2, r3
}
 800129c:	4618      	mov	r0, r3
 800129e:	3714      	adds	r7, #20
 80012a0:	46bd      	mov	sp, r7
 80012a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a6:	4770      	bx	lr
 80012a8:	0801fade 	.word	0x0801fade

080012ac <cJSON_New_Item>:
	cJSON_free	 = (hooks->free_fn)?hooks->free_fn:free;
}

/* Internal constructor. */
static cJSON *cJSON_New_Item(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0
	cJSON* node = (cJSON*)cJSON_malloc(sizeof(cJSON));
 80012b2:	4b09      	ldr	r3, [pc, #36]	; (80012d8 <cJSON_New_Item+0x2c>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	2028      	movs	r0, #40	; 0x28
 80012b8:	4798      	blx	r3
 80012ba:	6078      	str	r0, [r7, #4]
	if (node) memset(node,0,sizeof(cJSON));
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d004      	beq.n	80012cc <cJSON_New_Item+0x20>
 80012c2:	2228      	movs	r2, #40	; 0x28
 80012c4:	2100      	movs	r1, #0
 80012c6:	6878      	ldr	r0, [r7, #4]
 80012c8:	f015 fdb6 	bl	8016e38 <memset>
	return node;
 80012cc:	687b      	ldr	r3, [r7, #4]
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	3708      	adds	r7, #8
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	20000000 	.word	0x20000000

080012dc <cJSON_Delete>:

/* Delete a cJSON structure. */
void cJSON_Delete(cJSON *c)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b084      	sub	sp, #16
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
	cJSON *next;
	while (c)
 80012e4:	e037      	b.n	8001356 <cJSON_Delete+0x7a>
	{
		next=c->next;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	60fb      	str	r3, [r7, #12]
		if (!(c->type&cJSON_IsReference) && c->child) cJSON_Delete(c->child);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	68db      	ldr	r3, [r3, #12]
 80012f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d108      	bne.n	800130a <cJSON_Delete+0x2e>
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	689b      	ldr	r3, [r3, #8]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d004      	beq.n	800130a <cJSON_Delete+0x2e>
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	689b      	ldr	r3, [r3, #8]
 8001304:	4618      	mov	r0, r3
 8001306:	f7ff ffe9 	bl	80012dc <cJSON_Delete>
		if (!(c->type&cJSON_IsReference) && c->valuestring) cJSON_free(c->valuestring);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	68db      	ldr	r3, [r3, #12]
 800130e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001312:	2b00      	cmp	r3, #0
 8001314:	d109      	bne.n	800132a <cJSON_Delete+0x4e>
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	691b      	ldr	r3, [r3, #16]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d005      	beq.n	800132a <cJSON_Delete+0x4e>
 800131e:	4b12      	ldr	r3, [pc, #72]	; (8001368 <cJSON_Delete+0x8c>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	687a      	ldr	r2, [r7, #4]
 8001324:	6912      	ldr	r2, [r2, #16]
 8001326:	4610      	mov	r0, r2
 8001328:	4798      	blx	r3
		if (!(c->type&cJSON_StringIsConst) && c->string) cJSON_free(c->string);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	68db      	ldr	r3, [r3, #12]
 800132e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001332:	2b00      	cmp	r3, #0
 8001334:	d109      	bne.n	800134a <cJSON_Delete+0x6e>
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6a1b      	ldr	r3, [r3, #32]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d005      	beq.n	800134a <cJSON_Delete+0x6e>
 800133e:	4b0a      	ldr	r3, [pc, #40]	; (8001368 <cJSON_Delete+0x8c>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	687a      	ldr	r2, [r7, #4]
 8001344:	6a12      	ldr	r2, [r2, #32]
 8001346:	4610      	mov	r0, r2
 8001348:	4798      	blx	r3
		cJSON_free(c);
 800134a:	4b07      	ldr	r3, [pc, #28]	; (8001368 <cJSON_Delete+0x8c>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	6878      	ldr	r0, [r7, #4]
 8001350:	4798      	blx	r3
		c=next;
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	607b      	str	r3, [r7, #4]
	while (c)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d1c4      	bne.n	80012e6 <cJSON_Delete+0xa>
	}
}
 800135c:	bf00      	nop
 800135e:	bf00      	nop
 8001360:	3710      	adds	r7, #16
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	20000004 	.word	0x20000004
 800136c:	00000000 	.word	0x00000000

08001370 <parse_number>:

/* Parse the input text to generate a number, and populate the result into item. */
static const char *parse_number(cJSON *item,const char *num)
{
 8001370:	b5b0      	push	{r4, r5, r7, lr}
 8001372:	b08a      	sub	sp, #40	; 0x28
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
 8001378:	6039      	str	r1, [r7, #0]
	double n=0,sign=1,scale=0;int subscale=0,signsubscale=1;
 800137a:	f04f 0200 	mov.w	r2, #0
 800137e:	f04f 0300 	mov.w	r3, #0
 8001382:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8001386:	f04f 0200 	mov.w	r2, #0
 800138a:	4b83      	ldr	r3, [pc, #524]	; (8001598 <parse_number+0x228>)
 800138c:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8001390:	f04f 0200 	mov.w	r2, #0
 8001394:	f04f 0300 	mov.w	r3, #0
 8001398:	e9c7 2304 	strd	r2, r3, [r7, #16]
 800139c:	2300      	movs	r3, #0
 800139e:	60fb      	str	r3, [r7, #12]
 80013a0:	2301      	movs	r3, #1
 80013a2:	60bb      	str	r3, [r7, #8]

	if (*num=='-') sign=-1,num++;	/* Has sign? */
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	2b2d      	cmp	r3, #45	; 0x2d
 80013aa:	d107      	bne.n	80013bc <parse_number+0x4c>
 80013ac:	f04f 0200 	mov.w	r2, #0
 80013b0:	4b7a      	ldr	r3, [pc, #488]	; (800159c <parse_number+0x22c>)
 80013b2:	e9c7 2306 	strd	r2, r3, [r7, #24]
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	3301      	adds	r3, #1
 80013ba:	603b      	str	r3, [r7, #0]
	if (*num=='0') num++;			/* is zero */
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	2b30      	cmp	r3, #48	; 0x30
 80013c2:	d102      	bne.n	80013ca <parse_number+0x5a>
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	3301      	adds	r3, #1
 80013c8:	603b      	str	r3, [r7, #0]
	if (*num>='1' && *num<='9')	do	n=(n*10.0)+(*num++ -'0');	while (*num>='0' && *num<='9');	/* Number? */
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	781b      	ldrb	r3, [r3, #0]
 80013ce:	2b30      	cmp	r3, #48	; 0x30
 80013d0:	d928      	bls.n	8001424 <parse_number+0xb4>
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	781b      	ldrb	r3, [r3, #0]
 80013d6:	2b39      	cmp	r3, #57	; 0x39
 80013d8:	d824      	bhi.n	8001424 <parse_number+0xb4>
 80013da:	f04f 0200 	mov.w	r2, #0
 80013de:	4b70      	ldr	r3, [pc, #448]	; (80015a0 <parse_number+0x230>)
 80013e0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80013e4:	f7ff f918 	bl	8000618 <__aeabi_dmul>
 80013e8:	4602      	mov	r2, r0
 80013ea:	460b      	mov	r3, r1
 80013ec:	4614      	mov	r4, r2
 80013ee:	461d      	mov	r5, r3
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	1c5a      	adds	r2, r3, #1
 80013f4:	603a      	str	r2, [r7, #0]
 80013f6:	781b      	ldrb	r3, [r3, #0]
 80013f8:	3b30      	subs	r3, #48	; 0x30
 80013fa:	4618      	mov	r0, r3
 80013fc:	f7ff f8a2 	bl	8000544 <__aeabi_i2d>
 8001400:	4602      	mov	r2, r0
 8001402:	460b      	mov	r3, r1
 8001404:	4620      	mov	r0, r4
 8001406:	4629      	mov	r1, r5
 8001408:	f7fe ff50 	bl	80002ac <__adddf3>
 800140c:	4602      	mov	r2, r0
 800140e:	460b      	mov	r3, r1
 8001410:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	781b      	ldrb	r3, [r3, #0]
 8001418:	2b2f      	cmp	r3, #47	; 0x2f
 800141a:	d903      	bls.n	8001424 <parse_number+0xb4>
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	2b39      	cmp	r3, #57	; 0x39
 8001422:	d9da      	bls.n	80013da <parse_number+0x6a>
	if (*num=='.' && num[1]>='0' && num[1]<='9') {num++;		do	n=(n*10.0)+(*num++ -'0'),scale--; while (*num>='0' && *num<='9');}	/* Fractional part? */
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	2b2e      	cmp	r3, #46	; 0x2e
 800142a:	d13c      	bne.n	80014a6 <parse_number+0x136>
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	3301      	adds	r3, #1
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	2b2f      	cmp	r3, #47	; 0x2f
 8001434:	d937      	bls.n	80014a6 <parse_number+0x136>
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	3301      	adds	r3, #1
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	2b39      	cmp	r3, #57	; 0x39
 800143e:	d832      	bhi.n	80014a6 <parse_number+0x136>
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	3301      	adds	r3, #1
 8001444:	603b      	str	r3, [r7, #0]
 8001446:	f04f 0200 	mov.w	r2, #0
 800144a:	4b55      	ldr	r3, [pc, #340]	; (80015a0 <parse_number+0x230>)
 800144c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001450:	f7ff f8e2 	bl	8000618 <__aeabi_dmul>
 8001454:	4602      	mov	r2, r0
 8001456:	460b      	mov	r3, r1
 8001458:	4614      	mov	r4, r2
 800145a:	461d      	mov	r5, r3
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	1c5a      	adds	r2, r3, #1
 8001460:	603a      	str	r2, [r7, #0]
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	3b30      	subs	r3, #48	; 0x30
 8001466:	4618      	mov	r0, r3
 8001468:	f7ff f86c 	bl	8000544 <__aeabi_i2d>
 800146c:	4602      	mov	r2, r0
 800146e:	460b      	mov	r3, r1
 8001470:	4620      	mov	r0, r4
 8001472:	4629      	mov	r1, r5
 8001474:	f7fe ff1a 	bl	80002ac <__adddf3>
 8001478:	4602      	mov	r2, r0
 800147a:	460b      	mov	r3, r1
 800147c:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8001480:	f04f 0200 	mov.w	r2, #0
 8001484:	4b44      	ldr	r3, [pc, #272]	; (8001598 <parse_number+0x228>)
 8001486:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800148a:	f7fe ff0d 	bl	80002a8 <__aeabi_dsub>
 800148e:	4602      	mov	r2, r0
 8001490:	460b      	mov	r3, r1
 8001492:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	781b      	ldrb	r3, [r3, #0]
 800149a:	2b2f      	cmp	r3, #47	; 0x2f
 800149c:	d903      	bls.n	80014a6 <parse_number+0x136>
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	781b      	ldrb	r3, [r3, #0]
 80014a2:	2b39      	cmp	r3, #57	; 0x39
 80014a4:	d9cf      	bls.n	8001446 <parse_number+0xd6>
	if (*num=='e' || *num=='E')		/* Exponent? */
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	781b      	ldrb	r3, [r3, #0]
 80014aa:	2b65      	cmp	r3, #101	; 0x65
 80014ac:	d003      	beq.n	80014b6 <parse_number+0x146>
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	2b45      	cmp	r3, #69	; 0x45
 80014b4:	d12a      	bne.n	800150c <parse_number+0x19c>
	{	num++;if (*num=='+') num++;	else if (*num=='-') signsubscale=-1,num++;		/* With sign? */
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	3301      	adds	r3, #1
 80014ba:	603b      	str	r3, [r7, #0]
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	2b2b      	cmp	r3, #43	; 0x2b
 80014c2:	d103      	bne.n	80014cc <parse_number+0x15c>
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	3301      	adds	r3, #1
 80014c8:	603b      	str	r3, [r7, #0]
 80014ca:	e017      	b.n	80014fc <parse_number+0x18c>
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	2b2d      	cmp	r3, #45	; 0x2d
 80014d2:	d113      	bne.n	80014fc <parse_number+0x18c>
 80014d4:	f04f 33ff 	mov.w	r3, #4294967295
 80014d8:	60bb      	str	r3, [r7, #8]
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	3301      	adds	r3, #1
 80014de:	603b      	str	r3, [r7, #0]
		while (*num>='0' && *num<='9') subscale=(subscale*10)+(*num++ - '0');	/* Number? */
 80014e0:	e00c      	b.n	80014fc <parse_number+0x18c>
 80014e2:	68fa      	ldr	r2, [r7, #12]
 80014e4:	4613      	mov	r3, r2
 80014e6:	009b      	lsls	r3, r3, #2
 80014e8:	4413      	add	r3, r2
 80014ea:	005b      	lsls	r3, r3, #1
 80014ec:	4619      	mov	r1, r3
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	1c5a      	adds	r2, r3, #1
 80014f2:	603a      	str	r2, [r7, #0]
 80014f4:	781b      	ldrb	r3, [r3, #0]
 80014f6:	3b30      	subs	r3, #48	; 0x30
 80014f8:	440b      	add	r3, r1
 80014fa:	60fb      	str	r3, [r7, #12]
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	781b      	ldrb	r3, [r3, #0]
 8001500:	2b2f      	cmp	r3, #47	; 0x2f
 8001502:	d903      	bls.n	800150c <parse_number+0x19c>
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	2b39      	cmp	r3, #57	; 0x39
 800150a:	d9ea      	bls.n	80014e2 <parse_number+0x172>
	}

	n=sign*n*pow(10.0,(scale+subscale*signsubscale));	/* number = +/- number.fraction * 10^+/- exponent */
 800150c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001510:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001514:	f7ff f880 	bl	8000618 <__aeabi_dmul>
 8001518:	4602      	mov	r2, r0
 800151a:	460b      	mov	r3, r1
 800151c:	4614      	mov	r4, r2
 800151e:	461d      	mov	r5, r3
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	68ba      	ldr	r2, [r7, #8]
 8001524:	fb02 f303 	mul.w	r3, r2, r3
 8001528:	4618      	mov	r0, r3
 800152a:	f7ff f80b 	bl	8000544 <__aeabi_i2d>
 800152e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001532:	f7fe febb 	bl	80002ac <__adddf3>
 8001536:	4602      	mov	r2, r0
 8001538:	460b      	mov	r3, r1
 800153a:	ec43 2b17 	vmov	d7, r2, r3
 800153e:	eeb0 1a47 	vmov.f32	s2, s14
 8001542:	eef0 1a67 	vmov.f32	s3, s15
 8001546:	ed9f 0b12 	vldr	d0, [pc, #72]	; 8001590 <parse_number+0x220>
 800154a:	f019 ff17 	bl	801b37c <pow>
 800154e:	ec53 2b10 	vmov	r2, r3, d0
 8001552:	4620      	mov	r0, r4
 8001554:	4629      	mov	r1, r5
 8001556:	f7ff f85f 	bl	8000618 <__aeabi_dmul>
 800155a:	4602      	mov	r2, r0
 800155c:	460b      	mov	r3, r1
 800155e:	e9c7 2308 	strd	r2, r3, [r7, #32]
	
	item->valuedouble=n;
 8001562:	6879      	ldr	r1, [r7, #4]
 8001564:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001568:	e9c1 2306 	strd	r2, r3, [r1, #24]
	item->valueint=(int)n;
 800156c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001570:	f7ff fb02 	bl	8000b78 <__aeabi_d2iz>
 8001574:	4602      	mov	r2, r0
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	615a      	str	r2, [r3, #20]
	item->type=cJSON_Number;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2203      	movs	r2, #3
 800157e:	60da      	str	r2, [r3, #12]
	return num;
 8001580:	683b      	ldr	r3, [r7, #0]
}
 8001582:	4618      	mov	r0, r3
 8001584:	3728      	adds	r7, #40	; 0x28
 8001586:	46bd      	mov	sp, r7
 8001588:	bdb0      	pop	{r4, r5, r7, pc}
 800158a:	bf00      	nop
 800158c:	f3af 8000 	nop.w
 8001590:	00000000 	.word	0x00000000
 8001594:	40240000 	.word	0x40240000
 8001598:	3ff00000 	.word	0x3ff00000
 800159c:	bff00000 	.word	0xbff00000
 80015a0:	40240000 	.word	0x40240000

080015a4 <parse_hex4>:
	}
	return str;
}

static unsigned parse_hex4(const char *str)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b085      	sub	sp, #20
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
	unsigned h=0;
 80015ac:	2300      	movs	r3, #0
 80015ae:	60fb      	str	r3, [r7, #12]
	if (*str>='0' && *str<='9') h+=(*str)-'0'; else if (*str>='A' && *str<='F') h+=10+(*str)-'A'; else if (*str>='a' && *str<='f') h+=10+(*str)-'a'; else return 0;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	781b      	ldrb	r3, [r3, #0]
 80015b4:	2b2f      	cmp	r3, #47	; 0x2f
 80015b6:	d90b      	bls.n	80015d0 <parse_hex4+0x2c>
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	781b      	ldrb	r3, [r3, #0]
 80015bc:	2b39      	cmp	r3, #57	; 0x39
 80015be:	d807      	bhi.n	80015d0 <parse_hex4+0x2c>
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	461a      	mov	r2, r3
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	4413      	add	r3, r2
 80015ca:	3b30      	subs	r3, #48	; 0x30
 80015cc:	60fb      	str	r3, [r7, #12]
 80015ce:	e021      	b.n	8001614 <parse_hex4+0x70>
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	781b      	ldrb	r3, [r3, #0]
 80015d4:	2b40      	cmp	r3, #64	; 0x40
 80015d6:	d90b      	bls.n	80015f0 <parse_hex4+0x4c>
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	781b      	ldrb	r3, [r3, #0]
 80015dc:	2b46      	cmp	r3, #70	; 0x46
 80015de:	d807      	bhi.n	80015f0 <parse_hex4+0x4c>
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	461a      	mov	r2, r3
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	4413      	add	r3, r2
 80015ea:	3b37      	subs	r3, #55	; 0x37
 80015ec:	60fb      	str	r3, [r7, #12]
 80015ee:	e011      	b.n	8001614 <parse_hex4+0x70>
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	781b      	ldrb	r3, [r3, #0]
 80015f4:	2b60      	cmp	r3, #96	; 0x60
 80015f6:	d90b      	bls.n	8001610 <parse_hex4+0x6c>
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	781b      	ldrb	r3, [r3, #0]
 80015fc:	2b66      	cmp	r3, #102	; 0x66
 80015fe:	d807      	bhi.n	8001610 <parse_hex4+0x6c>
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	781b      	ldrb	r3, [r3, #0]
 8001604:	461a      	mov	r2, r3
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	4413      	add	r3, r2
 800160a:	3b57      	subs	r3, #87	; 0x57
 800160c:	60fb      	str	r3, [r7, #12]
 800160e:	e001      	b.n	8001614 <parse_hex4+0x70>
 8001610:	2300      	movs	r3, #0
 8001612:	e0a8      	b.n	8001766 <parse_hex4+0x1c2>
	h=h<<4;str++;
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	011b      	lsls	r3, r3, #4
 8001618:	60fb      	str	r3, [r7, #12]
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	3301      	adds	r3, #1
 800161e:	607b      	str	r3, [r7, #4]
	if (*str>='0' && *str<='9') h+=(*str)-'0'; else if (*str>='A' && *str<='F') h+=10+(*str)-'A'; else if (*str>='a' && *str<='f') h+=10+(*str)-'a'; else return 0;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	2b2f      	cmp	r3, #47	; 0x2f
 8001626:	d90b      	bls.n	8001640 <parse_hex4+0x9c>
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	781b      	ldrb	r3, [r3, #0]
 800162c:	2b39      	cmp	r3, #57	; 0x39
 800162e:	d807      	bhi.n	8001640 <parse_hex4+0x9c>
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	781b      	ldrb	r3, [r3, #0]
 8001634:	461a      	mov	r2, r3
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	4413      	add	r3, r2
 800163a:	3b30      	subs	r3, #48	; 0x30
 800163c:	60fb      	str	r3, [r7, #12]
 800163e:	e021      	b.n	8001684 <parse_hex4+0xe0>
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	781b      	ldrb	r3, [r3, #0]
 8001644:	2b40      	cmp	r3, #64	; 0x40
 8001646:	d90b      	bls.n	8001660 <parse_hex4+0xbc>
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	781b      	ldrb	r3, [r3, #0]
 800164c:	2b46      	cmp	r3, #70	; 0x46
 800164e:	d807      	bhi.n	8001660 <parse_hex4+0xbc>
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	781b      	ldrb	r3, [r3, #0]
 8001654:	461a      	mov	r2, r3
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	4413      	add	r3, r2
 800165a:	3b37      	subs	r3, #55	; 0x37
 800165c:	60fb      	str	r3, [r7, #12]
 800165e:	e011      	b.n	8001684 <parse_hex4+0xe0>
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	781b      	ldrb	r3, [r3, #0]
 8001664:	2b60      	cmp	r3, #96	; 0x60
 8001666:	d90b      	bls.n	8001680 <parse_hex4+0xdc>
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	781b      	ldrb	r3, [r3, #0]
 800166c:	2b66      	cmp	r3, #102	; 0x66
 800166e:	d807      	bhi.n	8001680 <parse_hex4+0xdc>
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	781b      	ldrb	r3, [r3, #0]
 8001674:	461a      	mov	r2, r3
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	4413      	add	r3, r2
 800167a:	3b57      	subs	r3, #87	; 0x57
 800167c:	60fb      	str	r3, [r7, #12]
 800167e:	e001      	b.n	8001684 <parse_hex4+0xe0>
 8001680:	2300      	movs	r3, #0
 8001682:	e070      	b.n	8001766 <parse_hex4+0x1c2>
	h=h<<4;str++;
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	011b      	lsls	r3, r3, #4
 8001688:	60fb      	str	r3, [r7, #12]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	3301      	adds	r3, #1
 800168e:	607b      	str	r3, [r7, #4]
	if (*str>='0' && *str<='9') h+=(*str)-'0'; else if (*str>='A' && *str<='F') h+=10+(*str)-'A'; else if (*str>='a' && *str<='f') h+=10+(*str)-'a'; else return 0;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	781b      	ldrb	r3, [r3, #0]
 8001694:	2b2f      	cmp	r3, #47	; 0x2f
 8001696:	d90b      	bls.n	80016b0 <parse_hex4+0x10c>
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	781b      	ldrb	r3, [r3, #0]
 800169c:	2b39      	cmp	r3, #57	; 0x39
 800169e:	d807      	bhi.n	80016b0 <parse_hex4+0x10c>
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	461a      	mov	r2, r3
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	4413      	add	r3, r2
 80016aa:	3b30      	subs	r3, #48	; 0x30
 80016ac:	60fb      	str	r3, [r7, #12]
 80016ae:	e021      	b.n	80016f4 <parse_hex4+0x150>
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	2b40      	cmp	r3, #64	; 0x40
 80016b6:	d90b      	bls.n	80016d0 <parse_hex4+0x12c>
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	781b      	ldrb	r3, [r3, #0]
 80016bc:	2b46      	cmp	r3, #70	; 0x46
 80016be:	d807      	bhi.n	80016d0 <parse_hex4+0x12c>
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	781b      	ldrb	r3, [r3, #0]
 80016c4:	461a      	mov	r2, r3
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	4413      	add	r3, r2
 80016ca:	3b37      	subs	r3, #55	; 0x37
 80016cc:	60fb      	str	r3, [r7, #12]
 80016ce:	e011      	b.n	80016f4 <parse_hex4+0x150>
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	781b      	ldrb	r3, [r3, #0]
 80016d4:	2b60      	cmp	r3, #96	; 0x60
 80016d6:	d90b      	bls.n	80016f0 <parse_hex4+0x14c>
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	781b      	ldrb	r3, [r3, #0]
 80016dc:	2b66      	cmp	r3, #102	; 0x66
 80016de:	d807      	bhi.n	80016f0 <parse_hex4+0x14c>
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	781b      	ldrb	r3, [r3, #0]
 80016e4:	461a      	mov	r2, r3
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	4413      	add	r3, r2
 80016ea:	3b57      	subs	r3, #87	; 0x57
 80016ec:	60fb      	str	r3, [r7, #12]
 80016ee:	e001      	b.n	80016f4 <parse_hex4+0x150>
 80016f0:	2300      	movs	r3, #0
 80016f2:	e038      	b.n	8001766 <parse_hex4+0x1c2>
	h=h<<4;str++;
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	011b      	lsls	r3, r3, #4
 80016f8:	60fb      	str	r3, [r7, #12]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	3301      	adds	r3, #1
 80016fe:	607b      	str	r3, [r7, #4]
	if (*str>='0' && *str<='9') h+=(*str)-'0'; else if (*str>='A' && *str<='F') h+=10+(*str)-'A'; else if (*str>='a' && *str<='f') h+=10+(*str)-'a'; else return 0;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	781b      	ldrb	r3, [r3, #0]
 8001704:	2b2f      	cmp	r3, #47	; 0x2f
 8001706:	d90b      	bls.n	8001720 <parse_hex4+0x17c>
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	781b      	ldrb	r3, [r3, #0]
 800170c:	2b39      	cmp	r3, #57	; 0x39
 800170e:	d807      	bhi.n	8001720 <parse_hex4+0x17c>
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	461a      	mov	r2, r3
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	4413      	add	r3, r2
 800171a:	3b30      	subs	r3, #48	; 0x30
 800171c:	60fb      	str	r3, [r7, #12]
 800171e:	e021      	b.n	8001764 <parse_hex4+0x1c0>
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	781b      	ldrb	r3, [r3, #0]
 8001724:	2b40      	cmp	r3, #64	; 0x40
 8001726:	d90b      	bls.n	8001740 <parse_hex4+0x19c>
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	2b46      	cmp	r3, #70	; 0x46
 800172e:	d807      	bhi.n	8001740 <parse_hex4+0x19c>
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	781b      	ldrb	r3, [r3, #0]
 8001734:	461a      	mov	r2, r3
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	4413      	add	r3, r2
 800173a:	3b37      	subs	r3, #55	; 0x37
 800173c:	60fb      	str	r3, [r7, #12]
 800173e:	e011      	b.n	8001764 <parse_hex4+0x1c0>
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	2b60      	cmp	r3, #96	; 0x60
 8001746:	d90b      	bls.n	8001760 <parse_hex4+0x1bc>
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	781b      	ldrb	r3, [r3, #0]
 800174c:	2b66      	cmp	r3, #102	; 0x66
 800174e:	d807      	bhi.n	8001760 <parse_hex4+0x1bc>
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	781b      	ldrb	r3, [r3, #0]
 8001754:	461a      	mov	r2, r3
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	4413      	add	r3, r2
 800175a:	3b57      	subs	r3, #87	; 0x57
 800175c:	60fb      	str	r3, [r7, #12]
 800175e:	e001      	b.n	8001764 <parse_hex4+0x1c0>
 8001760:	2300      	movs	r3, #0
 8001762:	e000      	b.n	8001766 <parse_hex4+0x1c2>
	return h;
 8001764:	68fb      	ldr	r3, [r7, #12]
}
 8001766:	4618      	mov	r0, r3
 8001768:	3714      	adds	r7, #20
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr
	...

08001774 <parse_string>:

/* Parse the input text into an unescaped cstring, and populate item. */
static const unsigned char firstByteMark[7] = { 0x00, 0x00, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC };
static const char *parse_string(cJSON *item,const char *str)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b088      	sub	sp, #32
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
 800177c:	6039      	str	r1, [r7, #0]
	const char *ptr=str+1;char *ptr2;char *out;int len=0;unsigned uc,uc2;
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	3301      	adds	r3, #1
 8001782:	61fb      	str	r3, [r7, #28]
 8001784:	2300      	movs	r3, #0
 8001786:	617b      	str	r3, [r7, #20]
	if (*str!='\"') {ep=str;return 0;}	/* not a string! */
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	2b22      	cmp	r3, #34	; 0x22
 800178e:	d00d      	beq.n	80017ac <parse_string+0x38>
 8001790:	4aa3      	ldr	r2, [pc, #652]	; (8001a20 <parse_string+0x2ac>)
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	6013      	str	r3, [r2, #0]
 8001796:	2300      	movs	r3, #0
 8001798:	e168      	b.n	8001a6c <parse_string+0x2f8>
	
	while (*ptr!='\"' && *ptr && ++len) if (*ptr++ == '\\') ptr++;	/* Skip escaped quotes. */
 800179a:	69fb      	ldr	r3, [r7, #28]
 800179c:	1c5a      	adds	r2, r3, #1
 800179e:	61fa      	str	r2, [r7, #28]
 80017a0:	781b      	ldrb	r3, [r3, #0]
 80017a2:	2b5c      	cmp	r3, #92	; 0x5c
 80017a4:	d102      	bne.n	80017ac <parse_string+0x38>
 80017a6:	69fb      	ldr	r3, [r7, #28]
 80017a8:	3301      	adds	r3, #1
 80017aa:	61fb      	str	r3, [r7, #28]
 80017ac:	69fb      	ldr	r3, [r7, #28]
 80017ae:	781b      	ldrb	r3, [r3, #0]
 80017b0:	2b22      	cmp	r3, #34	; 0x22
 80017b2:	d009      	beq.n	80017c8 <parse_string+0x54>
 80017b4:	69fb      	ldr	r3, [r7, #28]
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d005      	beq.n	80017c8 <parse_string+0x54>
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	3301      	adds	r3, #1
 80017c0:	617b      	str	r3, [r7, #20]
 80017c2:	697b      	ldr	r3, [r7, #20]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d1e8      	bne.n	800179a <parse_string+0x26>
	
	out=(char*)cJSON_malloc(len+1);	/* This is how long we need for the string, roughly. */
 80017c8:	4b96      	ldr	r3, [pc, #600]	; (8001a24 <parse_string+0x2b0>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	697a      	ldr	r2, [r7, #20]
 80017ce:	3201      	adds	r2, #1
 80017d0:	4610      	mov	r0, r2
 80017d2:	4798      	blx	r3
 80017d4:	60f8      	str	r0, [r7, #12]
	if (!out) return 0;
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d101      	bne.n	80017e0 <parse_string+0x6c>
 80017dc:	2300      	movs	r3, #0
 80017de:	e145      	b.n	8001a6c <parse_string+0x2f8>
	
	ptr=str+1;ptr2=out;
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	3301      	adds	r3, #1
 80017e4:	61fb      	str	r3, [r7, #28]
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	61bb      	str	r3, [r7, #24]
	while (*ptr!='\"' && *ptr)
 80017ea:	e125      	b.n	8001a38 <parse_string+0x2c4>
	{
		if (*ptr!='\\') *ptr2++=*ptr++;
 80017ec:	69fb      	ldr	r3, [r7, #28]
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	2b5c      	cmp	r3, #92	; 0x5c
 80017f2:	d008      	beq.n	8001806 <parse_string+0x92>
 80017f4:	69fa      	ldr	r2, [r7, #28]
 80017f6:	1c53      	adds	r3, r2, #1
 80017f8:	61fb      	str	r3, [r7, #28]
 80017fa:	69bb      	ldr	r3, [r7, #24]
 80017fc:	1c59      	adds	r1, r3, #1
 80017fe:	61b9      	str	r1, [r7, #24]
 8001800:	7812      	ldrb	r2, [r2, #0]
 8001802:	701a      	strb	r2, [r3, #0]
 8001804:	e118      	b.n	8001a38 <parse_string+0x2c4>
		else
		{
			ptr++;
 8001806:	69fb      	ldr	r3, [r7, #28]
 8001808:	3301      	adds	r3, #1
 800180a:	61fb      	str	r3, [r7, #28]
			switch (*ptr)
 800180c:	69fb      	ldr	r3, [r7, #28]
 800180e:	781b      	ldrb	r3, [r3, #0]
 8001810:	3b62      	subs	r3, #98	; 0x62
 8001812:	2b13      	cmp	r3, #19
 8001814:	f200 80fc 	bhi.w	8001a10 <parse_string+0x29c>
 8001818:	a201      	add	r2, pc, #4	; (adr r2, 8001820 <parse_string+0xac>)
 800181a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800181e:	bf00      	nop
 8001820:	08001871 	.word	0x08001871
 8001824:	08001a11 	.word	0x08001a11
 8001828:	08001a11 	.word	0x08001a11
 800182c:	08001a11 	.word	0x08001a11
 8001830:	0800187d 	.word	0x0800187d
 8001834:	08001a11 	.word	0x08001a11
 8001838:	08001a11 	.word	0x08001a11
 800183c:	08001a11 	.word	0x08001a11
 8001840:	08001a11 	.word	0x08001a11
 8001844:	08001a11 	.word	0x08001a11
 8001848:	08001a11 	.word	0x08001a11
 800184c:	08001a11 	.word	0x08001a11
 8001850:	08001889 	.word	0x08001889
 8001854:	08001a11 	.word	0x08001a11
 8001858:	08001a11 	.word	0x08001a11
 800185c:	08001a11 	.word	0x08001a11
 8001860:	08001895 	.word	0x08001895
 8001864:	08001a11 	.word	0x08001a11
 8001868:	080018a1 	.word	0x080018a1
 800186c:	080018ad 	.word	0x080018ad
			{
				case 'b': *ptr2++='\b';	break;
 8001870:	69bb      	ldr	r3, [r7, #24]
 8001872:	1c5a      	adds	r2, r3, #1
 8001874:	61ba      	str	r2, [r7, #24]
 8001876:	2208      	movs	r2, #8
 8001878:	701a      	strb	r2, [r3, #0]
 800187a:	e0da      	b.n	8001a32 <parse_string+0x2be>
				case 'f': *ptr2++='\f';	break;
 800187c:	69bb      	ldr	r3, [r7, #24]
 800187e:	1c5a      	adds	r2, r3, #1
 8001880:	61ba      	str	r2, [r7, #24]
 8001882:	220c      	movs	r2, #12
 8001884:	701a      	strb	r2, [r3, #0]
 8001886:	e0d4      	b.n	8001a32 <parse_string+0x2be>
				case 'n': *ptr2++='\n';	break;
 8001888:	69bb      	ldr	r3, [r7, #24]
 800188a:	1c5a      	adds	r2, r3, #1
 800188c:	61ba      	str	r2, [r7, #24]
 800188e:	220a      	movs	r2, #10
 8001890:	701a      	strb	r2, [r3, #0]
 8001892:	e0ce      	b.n	8001a32 <parse_string+0x2be>
				case 'r': *ptr2++='\r';	break;
 8001894:	69bb      	ldr	r3, [r7, #24]
 8001896:	1c5a      	adds	r2, r3, #1
 8001898:	61ba      	str	r2, [r7, #24]
 800189a:	220d      	movs	r2, #13
 800189c:	701a      	strb	r2, [r3, #0]
 800189e:	e0c8      	b.n	8001a32 <parse_string+0x2be>
				case 't': *ptr2++='\t';	break;
 80018a0:	69bb      	ldr	r3, [r7, #24]
 80018a2:	1c5a      	adds	r2, r3, #1
 80018a4:	61ba      	str	r2, [r7, #24]
 80018a6:	2209      	movs	r2, #9
 80018a8:	701a      	strb	r2, [r3, #0]
 80018aa:	e0c2      	b.n	8001a32 <parse_string+0x2be>
				case 'u':	 /* transcode utf16 to utf8. */
					uc=parse_hex4(ptr+1);ptr+=4;	/* get the unicode char. */
 80018ac:	69fb      	ldr	r3, [r7, #28]
 80018ae:	3301      	adds	r3, #1
 80018b0:	4618      	mov	r0, r3
 80018b2:	f7ff fe77 	bl	80015a4 <parse_hex4>
 80018b6:	6138      	str	r0, [r7, #16]
 80018b8:	69fb      	ldr	r3, [r7, #28]
 80018ba:	3304      	adds	r3, #4
 80018bc:	61fb      	str	r3, [r7, #28]

					if ((uc>=0xDC00 && uc<=0xDFFF) || uc==0)	break;	/* check for invalid.	*/
 80018be:	693b      	ldr	r3, [r7, #16]
 80018c0:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 80018c4:	d304      	bcc.n	80018d0 <parse_string+0x15c>
 80018c6:	693b      	ldr	r3, [r7, #16]
 80018c8:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 80018cc:	f0c0 80b0 	bcc.w	8001a30 <parse_string+0x2bc>
 80018d0:	693b      	ldr	r3, [r7, #16]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	f000 80ac 	beq.w	8001a30 <parse_string+0x2bc>

					if (uc>=0xD800 && uc<=0xDBFF)	/* UTF16 surrogate pairs.	*/
 80018d8:	693b      	ldr	r3, [r7, #16]
 80018da:	f5b3 4f58 	cmp.w	r3, #55296	; 0xd800
 80018de:	d32d      	bcc.n	800193c <parse_string+0x1c8>
 80018e0:	693b      	ldr	r3, [r7, #16]
 80018e2:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 80018e6:	d229      	bcs.n	800193c <parse_string+0x1c8>
					{
						if (ptr[1]!='\\' || ptr[2]!='u')	break;	/* missing second-half of surrogate.	*/
 80018e8:	69fb      	ldr	r3, [r7, #28]
 80018ea:	3301      	adds	r3, #1
 80018ec:	781b      	ldrb	r3, [r3, #0]
 80018ee:	2b5c      	cmp	r3, #92	; 0x5c
 80018f0:	f040 809e 	bne.w	8001a30 <parse_string+0x2bc>
 80018f4:	69fb      	ldr	r3, [r7, #28]
 80018f6:	3302      	adds	r3, #2
 80018f8:	781b      	ldrb	r3, [r3, #0]
 80018fa:	2b75      	cmp	r3, #117	; 0x75
 80018fc:	f040 8098 	bne.w	8001a30 <parse_string+0x2bc>
						uc2=parse_hex4(ptr+3);ptr+=6;
 8001900:	69fb      	ldr	r3, [r7, #28]
 8001902:	3303      	adds	r3, #3
 8001904:	4618      	mov	r0, r3
 8001906:	f7ff fe4d 	bl	80015a4 <parse_hex4>
 800190a:	60b8      	str	r0, [r7, #8]
 800190c:	69fb      	ldr	r3, [r7, #28]
 800190e:	3306      	adds	r3, #6
 8001910:	61fb      	str	r3, [r7, #28]
						if (uc2<0xDC00 || uc2>0xDFFF)		break;	/* invalid second-half of surrogate.	*/
 8001912:	68bb      	ldr	r3, [r7, #8]
 8001914:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 8001918:	f0c0 808a 	bcc.w	8001a30 <parse_string+0x2bc>
 800191c:	68bb      	ldr	r3, [r7, #8]
 800191e:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 8001922:	f080 8085 	bcs.w	8001a30 <parse_string+0x2bc>
						uc=0x10000 + (((uc&0x3FF)<<10) | (uc2&0x3FF));
 8001926:	693b      	ldr	r3, [r7, #16]
 8001928:	029a      	lsls	r2, r3, #10
 800192a:	4b3f      	ldr	r3, [pc, #252]	; (8001a28 <parse_string+0x2b4>)
 800192c:	4013      	ands	r3, r2
 800192e:	68ba      	ldr	r2, [r7, #8]
 8001930:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8001934:	4313      	orrs	r3, r2
 8001936:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800193a:	613b      	str	r3, [r7, #16]
					}

					len=4;if (uc<0x80) len=1;else if (uc<0x800) len=2;else if (uc<0x10000) len=3; ptr2+=len;
 800193c:	2304      	movs	r3, #4
 800193e:	617b      	str	r3, [r7, #20]
 8001940:	693b      	ldr	r3, [r7, #16]
 8001942:	2b7f      	cmp	r3, #127	; 0x7f
 8001944:	d802      	bhi.n	800194c <parse_string+0x1d8>
 8001946:	2301      	movs	r3, #1
 8001948:	617b      	str	r3, [r7, #20]
 800194a:	e00c      	b.n	8001966 <parse_string+0x1f2>
 800194c:	693b      	ldr	r3, [r7, #16]
 800194e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001952:	d202      	bcs.n	800195a <parse_string+0x1e6>
 8001954:	2302      	movs	r3, #2
 8001956:	617b      	str	r3, [r7, #20]
 8001958:	e005      	b.n	8001966 <parse_string+0x1f2>
 800195a:	693b      	ldr	r3, [r7, #16]
 800195c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001960:	d201      	bcs.n	8001966 <parse_string+0x1f2>
 8001962:	2303      	movs	r3, #3
 8001964:	617b      	str	r3, [r7, #20]
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	69ba      	ldr	r2, [r7, #24]
 800196a:	4413      	add	r3, r2
 800196c:	61bb      	str	r3, [r7, #24]
 800196e:	697b      	ldr	r3, [r7, #20]
 8001970:	3b01      	subs	r3, #1
 8001972:	2b03      	cmp	r3, #3
 8001974:	d847      	bhi.n	8001a06 <parse_string+0x292>
 8001976:	a201      	add	r2, pc, #4	; (adr r2, 800197c <parse_string+0x208>)
 8001978:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800197c:	080019ed 	.word	0x080019ed
 8001980:	080019cd 	.word	0x080019cd
 8001984:	080019ad 	.word	0x080019ad
 8001988:	0800198d 	.word	0x0800198d
					
					switch (len) {
						case 4: *--ptr2 =((uc | 0x80) & 0xBF); uc >>= 6;
 800198c:	693b      	ldr	r3, [r7, #16]
 800198e:	b2db      	uxtb	r3, r3
 8001990:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001994:	b2db      	uxtb	r3, r3
 8001996:	69ba      	ldr	r2, [r7, #24]
 8001998:	3a01      	subs	r2, #1
 800199a:	61ba      	str	r2, [r7, #24]
 800199c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80019a0:	b2da      	uxtb	r2, r3
 80019a2:	69bb      	ldr	r3, [r7, #24]
 80019a4:	701a      	strb	r2, [r3, #0]
 80019a6:	693b      	ldr	r3, [r7, #16]
 80019a8:	099b      	lsrs	r3, r3, #6
 80019aa:	613b      	str	r3, [r7, #16]
						case 3: *--ptr2 =((uc | 0x80) & 0xBF); uc >>= 6;
 80019ac:	693b      	ldr	r3, [r7, #16]
 80019ae:	b2db      	uxtb	r3, r3
 80019b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80019b4:	b2db      	uxtb	r3, r3
 80019b6:	69ba      	ldr	r2, [r7, #24]
 80019b8:	3a01      	subs	r2, #1
 80019ba:	61ba      	str	r2, [r7, #24]
 80019bc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80019c0:	b2da      	uxtb	r2, r3
 80019c2:	69bb      	ldr	r3, [r7, #24]
 80019c4:	701a      	strb	r2, [r3, #0]
 80019c6:	693b      	ldr	r3, [r7, #16]
 80019c8:	099b      	lsrs	r3, r3, #6
 80019ca:	613b      	str	r3, [r7, #16]
						case 2: *--ptr2 =((uc | 0x80) & 0xBF); uc >>= 6;
 80019cc:	693b      	ldr	r3, [r7, #16]
 80019ce:	b2db      	uxtb	r3, r3
 80019d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80019d4:	b2db      	uxtb	r3, r3
 80019d6:	69ba      	ldr	r2, [r7, #24]
 80019d8:	3a01      	subs	r2, #1
 80019da:	61ba      	str	r2, [r7, #24]
 80019dc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80019e0:	b2da      	uxtb	r2, r3
 80019e2:	69bb      	ldr	r3, [r7, #24]
 80019e4:	701a      	strb	r2, [r3, #0]
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	099b      	lsrs	r3, r3, #6
 80019ea:	613b      	str	r3, [r7, #16]
						case 1: *--ptr2 =(uc | firstByteMark[len]);
 80019ec:	4a0f      	ldr	r2, [pc, #60]	; (8001a2c <parse_string+0x2b8>)
 80019ee:	697b      	ldr	r3, [r7, #20]
 80019f0:	4413      	add	r3, r2
 80019f2:	781a      	ldrb	r2, [r3, #0]
 80019f4:	693b      	ldr	r3, [r7, #16]
 80019f6:	b2db      	uxtb	r3, r3
 80019f8:	69b9      	ldr	r1, [r7, #24]
 80019fa:	3901      	subs	r1, #1
 80019fc:	61b9      	str	r1, [r7, #24]
 80019fe:	4313      	orrs	r3, r2
 8001a00:	b2da      	uxtb	r2, r3
 8001a02:	69bb      	ldr	r3, [r7, #24]
 8001a04:	701a      	strb	r2, [r3, #0]
					}
					ptr2+=len;
 8001a06:	697b      	ldr	r3, [r7, #20]
 8001a08:	69ba      	ldr	r2, [r7, #24]
 8001a0a:	4413      	add	r3, r2
 8001a0c:	61bb      	str	r3, [r7, #24]
					break;
 8001a0e:	e010      	b.n	8001a32 <parse_string+0x2be>
				default:  *ptr2++=*ptr; break;
 8001a10:	69bb      	ldr	r3, [r7, #24]
 8001a12:	1c5a      	adds	r2, r3, #1
 8001a14:	61ba      	str	r2, [r7, #24]
 8001a16:	69fa      	ldr	r2, [r7, #28]
 8001a18:	7812      	ldrb	r2, [r2, #0]
 8001a1a:	701a      	strb	r2, [r3, #0]
 8001a1c:	e009      	b.n	8001a32 <parse_string+0x2be>
 8001a1e:	bf00      	nop
 8001a20:	2000026c 	.word	0x2000026c
 8001a24:	20000000 	.word	0x20000000
 8001a28:	000ffc00 	.word	0x000ffc00
 8001a2c:	0801f9c0 	.word	0x0801f9c0
			}
			ptr++;
 8001a30:	bf00      	nop
 8001a32:	69fb      	ldr	r3, [r7, #28]
 8001a34:	3301      	adds	r3, #1
 8001a36:	61fb      	str	r3, [r7, #28]
	while (*ptr!='\"' && *ptr)
 8001a38:	69fb      	ldr	r3, [r7, #28]
 8001a3a:	781b      	ldrb	r3, [r3, #0]
 8001a3c:	2b22      	cmp	r3, #34	; 0x22
 8001a3e:	d004      	beq.n	8001a4a <parse_string+0x2d6>
 8001a40:	69fb      	ldr	r3, [r7, #28]
 8001a42:	781b      	ldrb	r3, [r3, #0]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	f47f aed1 	bne.w	80017ec <parse_string+0x78>
		}
	}
	*ptr2=0;
 8001a4a:	69bb      	ldr	r3, [r7, #24]
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	701a      	strb	r2, [r3, #0]
	if (*ptr=='\"') ptr++;
 8001a50:	69fb      	ldr	r3, [r7, #28]
 8001a52:	781b      	ldrb	r3, [r3, #0]
 8001a54:	2b22      	cmp	r3, #34	; 0x22
 8001a56:	d102      	bne.n	8001a5e <parse_string+0x2ea>
 8001a58:	69fb      	ldr	r3, [r7, #28]
 8001a5a:	3301      	adds	r3, #1
 8001a5c:	61fb      	str	r3, [r7, #28]
	item->valuestring=out;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	68fa      	ldr	r2, [r7, #12]
 8001a62:	611a      	str	r2, [r3, #16]
	item->type=cJSON_String;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2204      	movs	r2, #4
 8001a68:	60da      	str	r2, [r3, #12]
	return ptr;
 8001a6a:	69fb      	ldr	r3, [r7, #28]
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	3720      	adds	r7, #32
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}

08001a74 <skip>:
static char *print_array(cJSON *item,int depth,int fmt,printbuffer *p);
static const char *parse_object(cJSON *item,const char *value);
static char *print_object(cJSON *item,int depth,int fmt,printbuffer *p);

/* Utility to jump whitespace and cr/lf */
static const char *skip(const char *in) {while (in && *in && (unsigned char)*in<=32) in++; return in;}
 8001a74:	b480      	push	{r7}
 8001a76:	b083      	sub	sp, #12
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
 8001a7c:	e002      	b.n	8001a84 <skip+0x10>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	3301      	adds	r3, #1
 8001a82:	607b      	str	r3, [r7, #4]
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d007      	beq.n	8001a9a <skip+0x26>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	781b      	ldrb	r3, [r3, #0]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d003      	beq.n	8001a9a <skip+0x26>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	781b      	ldrb	r3, [r3, #0]
 8001a96:	2b20      	cmp	r3, #32
 8001a98:	d9f1      	bls.n	8001a7e <skip+0xa>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	370c      	adds	r7, #12
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa6:	4770      	bx	lr

08001aa8 <cJSON_ParseWithOpts>:

/* Parse an object - create a new root, and populate. */
cJSON *cJSON_ParseWithOpts(const char *value,const char **return_parse_end,int require_null_terminated)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b086      	sub	sp, #24
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	60f8      	str	r0, [r7, #12]
 8001ab0:	60b9      	str	r1, [r7, #8]
 8001ab2:	607a      	str	r2, [r7, #4]
	const char *end=0;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	617b      	str	r3, [r7, #20]
	cJSON *c=cJSON_New_Item();
 8001ab8:	f7ff fbf8 	bl	80012ac <cJSON_New_Item>
 8001abc:	6138      	str	r0, [r7, #16]
	ep=0;
 8001abe:	4b1b      	ldr	r3, [pc, #108]	; (8001b2c <cJSON_ParseWithOpts+0x84>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	601a      	str	r2, [r3, #0]
	if (!c) return 0;       /* memory fail */
 8001ac4:	693b      	ldr	r3, [r7, #16]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d101      	bne.n	8001ace <cJSON_ParseWithOpts+0x26>
 8001aca:	2300      	movs	r3, #0
 8001acc:	e02a      	b.n	8001b24 <cJSON_ParseWithOpts+0x7c>

	end=parse_value(c,skip(value));
 8001ace:	68f8      	ldr	r0, [r7, #12]
 8001ad0:	f7ff ffd0 	bl	8001a74 <skip>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	6938      	ldr	r0, [r7, #16]
 8001ada:	f000 f837 	bl	8001b4c <parse_value>
 8001ade:	6178      	str	r0, [r7, #20]
	if (!end)	{cJSON_Delete(c);return 0;}	/* parse failure. ep is set. */
 8001ae0:	697b      	ldr	r3, [r7, #20]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d104      	bne.n	8001af0 <cJSON_ParseWithOpts+0x48>
 8001ae6:	6938      	ldr	r0, [r7, #16]
 8001ae8:	f7ff fbf8 	bl	80012dc <cJSON_Delete>
 8001aec:	2300      	movs	r3, #0
 8001aee:	e019      	b.n	8001b24 <cJSON_ParseWithOpts+0x7c>

	/* if we require null-terminated JSON without appended garbage, skip and then check for a null terminator */
	if (require_null_terminated) {end=skip(end);if (*end) {cJSON_Delete(c);ep=end;return 0;}}
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d00f      	beq.n	8001b16 <cJSON_ParseWithOpts+0x6e>
 8001af6:	6978      	ldr	r0, [r7, #20]
 8001af8:	f7ff ffbc 	bl	8001a74 <skip>
 8001afc:	6178      	str	r0, [r7, #20]
 8001afe:	697b      	ldr	r3, [r7, #20]
 8001b00:	781b      	ldrb	r3, [r3, #0]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d007      	beq.n	8001b16 <cJSON_ParseWithOpts+0x6e>
 8001b06:	6938      	ldr	r0, [r7, #16]
 8001b08:	f7ff fbe8 	bl	80012dc <cJSON_Delete>
 8001b0c:	4a07      	ldr	r2, [pc, #28]	; (8001b2c <cJSON_ParseWithOpts+0x84>)
 8001b0e:	697b      	ldr	r3, [r7, #20]
 8001b10:	6013      	str	r3, [r2, #0]
 8001b12:	2300      	movs	r3, #0
 8001b14:	e006      	b.n	8001b24 <cJSON_ParseWithOpts+0x7c>
	if (return_parse_end) *return_parse_end=end;
 8001b16:	68bb      	ldr	r3, [r7, #8]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d002      	beq.n	8001b22 <cJSON_ParseWithOpts+0x7a>
 8001b1c:	68bb      	ldr	r3, [r7, #8]
 8001b1e:	697a      	ldr	r2, [r7, #20]
 8001b20:	601a      	str	r2, [r3, #0]
	return c;
 8001b22:	693b      	ldr	r3, [r7, #16]
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	3718      	adds	r7, #24
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	2000026c 	.word	0x2000026c

08001b30 <cJSON_Parse>:
/* Default options for cJSON_Parse */
cJSON *cJSON_Parse(const char *value) {return cJSON_ParseWithOpts(value,0,0);}
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b082      	sub	sp, #8
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
 8001b38:	2200      	movs	r2, #0
 8001b3a:	2100      	movs	r1, #0
 8001b3c:	6878      	ldr	r0, [r7, #4]
 8001b3e:	f7ff ffb3 	bl	8001aa8 <cJSON_ParseWithOpts>
 8001b42:	4603      	mov	r3, r0
 8001b44:	4618      	mov	r0, r3
 8001b46:	3708      	adds	r7, #8
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}

08001b4c <parse_value>:
}


/* Parser core - when encountering text, process appropriately. */
static const char *parse_value(cJSON *item,const char *value)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b082      	sub	sp, #8
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
 8001b54:	6039      	str	r1, [r7, #0]
	if (!value)						return 0;	/* Fail on null. */
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d101      	bne.n	8001b60 <parse_value+0x14>
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	e060      	b.n	8001c22 <parse_value+0xd6>
	if (!strncmp(value,"null",4))	{ item->type=cJSON_NULL;  return value+4; }
 8001b60:	2204      	movs	r2, #4
 8001b62:	4932      	ldr	r1, [pc, #200]	; (8001c2c <parse_value+0xe0>)
 8001b64:	6838      	ldr	r0, [r7, #0]
 8001b66:	f015 ff3f 	bl	80179e8 <strncmp>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d105      	bne.n	8001b7c <parse_value+0x30>
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2202      	movs	r2, #2
 8001b74:	60da      	str	r2, [r3, #12]
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	3304      	adds	r3, #4
 8001b7a:	e052      	b.n	8001c22 <parse_value+0xd6>
	if (!strncmp(value,"false",5))	{ item->type=cJSON_False; return value+5; }
 8001b7c:	2205      	movs	r2, #5
 8001b7e:	492c      	ldr	r1, [pc, #176]	; (8001c30 <parse_value+0xe4>)
 8001b80:	6838      	ldr	r0, [r7, #0]
 8001b82:	f015 ff31 	bl	80179e8 <strncmp>
 8001b86:	4603      	mov	r3, r0
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d105      	bne.n	8001b98 <parse_value+0x4c>
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2200      	movs	r2, #0
 8001b90:	60da      	str	r2, [r3, #12]
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	3305      	adds	r3, #5
 8001b96:	e044      	b.n	8001c22 <parse_value+0xd6>
	if (!strncmp(value,"true",4))	{ item->type=cJSON_True; item->valueint=1;	return value+4; }
 8001b98:	2204      	movs	r2, #4
 8001b9a:	4926      	ldr	r1, [pc, #152]	; (8001c34 <parse_value+0xe8>)
 8001b9c:	6838      	ldr	r0, [r7, #0]
 8001b9e:	f015 ff23 	bl	80179e8 <strncmp>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d108      	bne.n	8001bba <parse_value+0x6e>
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2201      	movs	r2, #1
 8001bac:	60da      	str	r2, [r3, #12]
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	615a      	str	r2, [r3, #20]
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	3304      	adds	r3, #4
 8001bb8:	e033      	b.n	8001c22 <parse_value+0xd6>
	if (*value=='\"')				{ return parse_string(item,value); }
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	781b      	ldrb	r3, [r3, #0]
 8001bbe:	2b22      	cmp	r3, #34	; 0x22
 8001bc0:	d105      	bne.n	8001bce <parse_value+0x82>
 8001bc2:	6839      	ldr	r1, [r7, #0]
 8001bc4:	6878      	ldr	r0, [r7, #4]
 8001bc6:	f7ff fdd5 	bl	8001774 <parse_string>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	e029      	b.n	8001c22 <parse_value+0xd6>
	if (*value=='-' || (*value>='0' && *value<='9'))	{ return parse_number(item,value); }
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	781b      	ldrb	r3, [r3, #0]
 8001bd2:	2b2d      	cmp	r3, #45	; 0x2d
 8001bd4:	d007      	beq.n	8001be6 <parse_value+0x9a>
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	781b      	ldrb	r3, [r3, #0]
 8001bda:	2b2f      	cmp	r3, #47	; 0x2f
 8001bdc:	d909      	bls.n	8001bf2 <parse_value+0xa6>
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	781b      	ldrb	r3, [r3, #0]
 8001be2:	2b39      	cmp	r3, #57	; 0x39
 8001be4:	d805      	bhi.n	8001bf2 <parse_value+0xa6>
 8001be6:	6839      	ldr	r1, [r7, #0]
 8001be8:	6878      	ldr	r0, [r7, #4]
 8001bea:	f7ff fbc1 	bl	8001370 <parse_number>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	e017      	b.n	8001c22 <parse_value+0xd6>
	if (*value=='[')				{ return parse_array(item,value); }
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	781b      	ldrb	r3, [r3, #0]
 8001bf6:	2b5b      	cmp	r3, #91	; 0x5b
 8001bf8:	d105      	bne.n	8001c06 <parse_value+0xba>
 8001bfa:	6839      	ldr	r1, [r7, #0]
 8001bfc:	6878      	ldr	r0, [r7, #4]
 8001bfe:	f000 f81d 	bl	8001c3c <parse_array>
 8001c02:	4603      	mov	r3, r0
 8001c04:	e00d      	b.n	8001c22 <parse_value+0xd6>
	if (*value=='{')				{ return parse_object(item,value); }
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	781b      	ldrb	r3, [r3, #0]
 8001c0a:	2b7b      	cmp	r3, #123	; 0x7b
 8001c0c:	d105      	bne.n	8001c1a <parse_value+0xce>
 8001c0e:	6839      	ldr	r1, [r7, #0]
 8001c10:	6878      	ldr	r0, [r7, #4]
 8001c12:	f000 f889 	bl	8001d28 <parse_object>
 8001c16:	4603      	mov	r3, r0
 8001c18:	e003      	b.n	8001c22 <parse_value+0xd6>

	ep=value;return 0;	/* failure. */
 8001c1a:	4a07      	ldr	r2, [pc, #28]	; (8001c38 <parse_value+0xec>)
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	6013      	str	r3, [r2, #0]
 8001c20:	2300      	movs	r3, #0
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	3708      	adds	r7, #8
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	0801c314 	.word	0x0801c314
 8001c30:	0801c31c 	.word	0x0801c31c
 8001c34:	0801c324 	.word	0x0801c324
 8001c38:	2000026c 	.word	0x2000026c

08001c3c <parse_array>:
	return out;
}

/* Build an array from input text. */
static const char *parse_array(cJSON *item,const char *value)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b084      	sub	sp, #16
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
 8001c44:	6039      	str	r1, [r7, #0]
	cJSON *child;
	if (*value!='[')	{ep=value;return 0;}	/* not an array! */
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	781b      	ldrb	r3, [r3, #0]
 8001c4a:	2b5b      	cmp	r3, #91	; 0x5b
 8001c4c:	d004      	beq.n	8001c58 <parse_array+0x1c>
 8001c4e:	4a35      	ldr	r2, [pc, #212]	; (8001d24 <parse_array+0xe8>)
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	6013      	str	r3, [r2, #0]
 8001c54:	2300      	movs	r3, #0
 8001c56:	e060      	b.n	8001d1a <parse_array+0xde>

	item->type=cJSON_Array;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2205      	movs	r2, #5
 8001c5c:	60da      	str	r2, [r3, #12]
	value=skip(value+1);
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	3301      	adds	r3, #1
 8001c62:	4618      	mov	r0, r3
 8001c64:	f7ff ff06 	bl	8001a74 <skip>
 8001c68:	6038      	str	r0, [r7, #0]
	if (*value==']') return value+1;	/* empty array. */
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	781b      	ldrb	r3, [r3, #0]
 8001c6e:	2b5d      	cmp	r3, #93	; 0x5d
 8001c70:	d102      	bne.n	8001c78 <parse_array+0x3c>
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	3301      	adds	r3, #1
 8001c76:	e050      	b.n	8001d1a <parse_array+0xde>

	item->child=child=cJSON_New_Item();
 8001c78:	f7ff fb18 	bl	80012ac <cJSON_New_Item>
 8001c7c:	60f8      	str	r0, [r7, #12]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	68fa      	ldr	r2, [r7, #12]
 8001c82:	609a      	str	r2, [r3, #8]
	if (!item->child) return 0;		 /* memory fail */
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	689b      	ldr	r3, [r3, #8]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d101      	bne.n	8001c90 <parse_array+0x54>
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	e044      	b.n	8001d1a <parse_array+0xde>
	value=skip(parse_value(child,skip(value)));	/* skip any spacing, get the value. */
 8001c90:	6838      	ldr	r0, [r7, #0]
 8001c92:	f7ff feef 	bl	8001a74 <skip>
 8001c96:	4603      	mov	r3, r0
 8001c98:	4619      	mov	r1, r3
 8001c9a:	68f8      	ldr	r0, [r7, #12]
 8001c9c:	f7ff ff56 	bl	8001b4c <parse_value>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f7ff fee6 	bl	8001a74 <skip>
 8001ca8:	6038      	str	r0, [r7, #0]
	if (!value) return 0;
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d125      	bne.n	8001cfc <parse_array+0xc0>
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	e032      	b.n	8001d1a <parse_array+0xde>

	while (*value==',')
	{
		cJSON *new_item;
		if (!(new_item=cJSON_New_Item())) return 0; 	/* memory fail */
 8001cb4:	f7ff fafa 	bl	80012ac <cJSON_New_Item>
 8001cb8:	60b8      	str	r0, [r7, #8]
 8001cba:	68bb      	ldr	r3, [r7, #8]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d101      	bne.n	8001cc4 <parse_array+0x88>
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	e02a      	b.n	8001d1a <parse_array+0xde>
		child->next=new_item;new_item->prev=child;child=new_item;
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	68ba      	ldr	r2, [r7, #8]
 8001cc8:	601a      	str	r2, [r3, #0]
 8001cca:	68bb      	ldr	r3, [r7, #8]
 8001ccc:	68fa      	ldr	r2, [r7, #12]
 8001cce:	605a      	str	r2, [r3, #4]
 8001cd0:	68bb      	ldr	r3, [r7, #8]
 8001cd2:	60fb      	str	r3, [r7, #12]
		value=skip(parse_value(child,skip(value+1)));
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	3301      	adds	r3, #1
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f7ff fecb 	bl	8001a74 <skip>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	68f8      	ldr	r0, [r7, #12]
 8001ce4:	f7ff ff32 	bl	8001b4c <parse_value>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	4618      	mov	r0, r3
 8001cec:	f7ff fec2 	bl	8001a74 <skip>
 8001cf0:	6038      	str	r0, [r7, #0]
		if (!value) return 0;	/* memory fail */
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d101      	bne.n	8001cfc <parse_array+0xc0>
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	e00e      	b.n	8001d1a <parse_array+0xde>
	while (*value==',')
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	781b      	ldrb	r3, [r3, #0]
 8001d00:	2b2c      	cmp	r3, #44	; 0x2c
 8001d02:	d0d7      	beq.n	8001cb4 <parse_array+0x78>
	}

	if (*value==']') return value+1;	/* end of array */
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	781b      	ldrb	r3, [r3, #0]
 8001d08:	2b5d      	cmp	r3, #93	; 0x5d
 8001d0a:	d102      	bne.n	8001d12 <parse_array+0xd6>
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	3301      	adds	r3, #1
 8001d10:	e003      	b.n	8001d1a <parse_array+0xde>
	ep=value;return 0;	/* malformed. */
 8001d12:	4a04      	ldr	r2, [pc, #16]	; (8001d24 <parse_array+0xe8>)
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	6013      	str	r3, [r2, #0]
 8001d18:	2300      	movs	r3, #0
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	3710      	adds	r7, #16
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	2000026c 	.word	0x2000026c

08001d28 <parse_object>:
	return out;	
}

/* Build an object from the text. */
static const char *parse_object(cJSON *item,const char *value)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b084      	sub	sp, #16
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
 8001d30:	6039      	str	r1, [r7, #0]
	cJSON *child;
	if (*value!='{')	{ep=value;return 0;}	/* not an object! */
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	781b      	ldrb	r3, [r3, #0]
 8001d36:	2b7b      	cmp	r3, #123	; 0x7b
 8001d38:	d004      	beq.n	8001d44 <parse_object+0x1c>
 8001d3a:	4a59      	ldr	r2, [pc, #356]	; (8001ea0 <parse_object+0x178>)
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	6013      	str	r3, [r2, #0]
 8001d40:	2300      	movs	r3, #0
 8001d42:	e0a8      	b.n	8001e96 <parse_object+0x16e>
	
	item->type=cJSON_Object;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2206      	movs	r2, #6
 8001d48:	60da      	str	r2, [r3, #12]
	value=skip(value+1);
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	3301      	adds	r3, #1
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f7ff fe90 	bl	8001a74 <skip>
 8001d54:	6038      	str	r0, [r7, #0]
	if (*value=='}') return value+1;	/* empty array. */
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	781b      	ldrb	r3, [r3, #0]
 8001d5a:	2b7d      	cmp	r3, #125	; 0x7d
 8001d5c:	d102      	bne.n	8001d64 <parse_object+0x3c>
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	3301      	adds	r3, #1
 8001d62:	e098      	b.n	8001e96 <parse_object+0x16e>
	
	item->child=child=cJSON_New_Item();
 8001d64:	f7ff faa2 	bl	80012ac <cJSON_New_Item>
 8001d68:	60f8      	str	r0, [r7, #12]
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	68fa      	ldr	r2, [r7, #12]
 8001d6e:	609a      	str	r2, [r3, #8]
	if (!item->child) return 0;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	689b      	ldr	r3, [r3, #8]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d101      	bne.n	8001d7c <parse_object+0x54>
 8001d78:	2300      	movs	r3, #0
 8001d7a:	e08c      	b.n	8001e96 <parse_object+0x16e>
	value=skip(parse_string(child,skip(value)));
 8001d7c:	6838      	ldr	r0, [r7, #0]
 8001d7e:	f7ff fe79 	bl	8001a74 <skip>
 8001d82:	4603      	mov	r3, r0
 8001d84:	4619      	mov	r1, r3
 8001d86:	68f8      	ldr	r0, [r7, #12]
 8001d88:	f7ff fcf4 	bl	8001774 <parse_string>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f7ff fe70 	bl	8001a74 <skip>
 8001d94:	6038      	str	r0, [r7, #0]
	if (!value) return 0;
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d101      	bne.n	8001da0 <parse_object+0x78>
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	e07a      	b.n	8001e96 <parse_object+0x16e>
	child->string=child->valuestring;child->valuestring=0;
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	691a      	ldr	r2, [r3, #16]
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	621a      	str	r2, [r3, #32]
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	2200      	movs	r2, #0
 8001dac:	611a      	str	r2, [r3, #16]
	if (*value!=':') {ep=value;return 0;}	/* fail! */
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	781b      	ldrb	r3, [r3, #0]
 8001db2:	2b3a      	cmp	r3, #58	; 0x3a
 8001db4:	d004      	beq.n	8001dc0 <parse_object+0x98>
 8001db6:	4a3a      	ldr	r2, [pc, #232]	; (8001ea0 <parse_object+0x178>)
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	6013      	str	r3, [r2, #0]
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	e06a      	b.n	8001e96 <parse_object+0x16e>
	value=skip(parse_value(child,skip(value+1)));	/* skip any spacing, get the value. */
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	3301      	adds	r3, #1
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f7ff fe55 	bl	8001a74 <skip>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	4619      	mov	r1, r3
 8001dce:	68f8      	ldr	r0, [r7, #12]
 8001dd0:	f7ff febc 	bl	8001b4c <parse_value>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f7ff fe4c 	bl	8001a74 <skip>
 8001ddc:	6038      	str	r0, [r7, #0]
	if (!value) return 0;
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d149      	bne.n	8001e78 <parse_object+0x150>
 8001de4:	2300      	movs	r3, #0
 8001de6:	e056      	b.n	8001e96 <parse_object+0x16e>
	
	while (*value==',')
	{
		cJSON *new_item;
		if (!(new_item=cJSON_New_Item()))	return 0; /* memory fail */
 8001de8:	f7ff fa60 	bl	80012ac <cJSON_New_Item>
 8001dec:	60b8      	str	r0, [r7, #8]
 8001dee:	68bb      	ldr	r3, [r7, #8]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d101      	bne.n	8001df8 <parse_object+0xd0>
 8001df4:	2300      	movs	r3, #0
 8001df6:	e04e      	b.n	8001e96 <parse_object+0x16e>
		child->next=new_item;new_item->prev=child;child=new_item;
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	68ba      	ldr	r2, [r7, #8]
 8001dfc:	601a      	str	r2, [r3, #0]
 8001dfe:	68bb      	ldr	r3, [r7, #8]
 8001e00:	68fa      	ldr	r2, [r7, #12]
 8001e02:	605a      	str	r2, [r3, #4]
 8001e04:	68bb      	ldr	r3, [r7, #8]
 8001e06:	60fb      	str	r3, [r7, #12]
		value=skip(parse_string(child,skip(value+1)));
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	3301      	adds	r3, #1
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f7ff fe31 	bl	8001a74 <skip>
 8001e12:	4603      	mov	r3, r0
 8001e14:	4619      	mov	r1, r3
 8001e16:	68f8      	ldr	r0, [r7, #12]
 8001e18:	f7ff fcac 	bl	8001774 <parse_string>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f7ff fe28 	bl	8001a74 <skip>
 8001e24:	6038      	str	r0, [r7, #0]
		if (!value) return 0;
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d101      	bne.n	8001e30 <parse_object+0x108>
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	e032      	b.n	8001e96 <parse_object+0x16e>
		child->string=child->valuestring;child->valuestring=0;
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	691a      	ldr	r2, [r3, #16]
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	621a      	str	r2, [r3, #32]
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	611a      	str	r2, [r3, #16]
		if (*value!=':') {ep=value;return 0;}	/* fail! */
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	781b      	ldrb	r3, [r3, #0]
 8001e42:	2b3a      	cmp	r3, #58	; 0x3a
 8001e44:	d004      	beq.n	8001e50 <parse_object+0x128>
 8001e46:	4a16      	ldr	r2, [pc, #88]	; (8001ea0 <parse_object+0x178>)
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	6013      	str	r3, [r2, #0]
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	e022      	b.n	8001e96 <parse_object+0x16e>
		value=skip(parse_value(child,skip(value+1)));	/* skip any spacing, get the value. */
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	3301      	adds	r3, #1
 8001e54:	4618      	mov	r0, r3
 8001e56:	f7ff fe0d 	bl	8001a74 <skip>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	4619      	mov	r1, r3
 8001e5e:	68f8      	ldr	r0, [r7, #12]
 8001e60:	f7ff fe74 	bl	8001b4c <parse_value>
 8001e64:	4603      	mov	r3, r0
 8001e66:	4618      	mov	r0, r3
 8001e68:	f7ff fe04 	bl	8001a74 <skip>
 8001e6c:	6038      	str	r0, [r7, #0]
		if (!value) return 0;
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d101      	bne.n	8001e78 <parse_object+0x150>
 8001e74:	2300      	movs	r3, #0
 8001e76:	e00e      	b.n	8001e96 <parse_object+0x16e>
	while (*value==',')
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	781b      	ldrb	r3, [r3, #0]
 8001e7c:	2b2c      	cmp	r3, #44	; 0x2c
 8001e7e:	d0b3      	beq.n	8001de8 <parse_object+0xc0>
	}
	
	if (*value=='}') return value+1;	/* end of array */
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	781b      	ldrb	r3, [r3, #0]
 8001e84:	2b7d      	cmp	r3, #125	; 0x7d
 8001e86:	d102      	bne.n	8001e8e <parse_object+0x166>
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	3301      	adds	r3, #1
 8001e8c:	e003      	b.n	8001e96 <parse_object+0x16e>
	ep=value;return 0;	/* malformed. */
 8001e8e:	4a04      	ldr	r2, [pc, #16]	; (8001ea0 <parse_object+0x178>)
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	6013      	str	r3, [r2, #0]
 8001e94:	2300      	movs	r3, #0
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	3710      	adds	r7, #16
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	2000026c 	.word	0x2000026c

08001ea4 <cJSON_GetObjectItem>:
}

/* Get Array size/item / object item. */
int    cJSON_GetArraySize(cJSON *array)							{cJSON *c=array->child;int i=0;while(c)i++,c=c->next;return i;}
cJSON *cJSON_GetArrayItem(cJSON *array,int item)				{cJSON *c=array->child;  while (c && item>0) item--,c=c->next; return c;}
cJSON *cJSON_GetObjectItem(cJSON *object,const char *string)	{cJSON *c=object->child; while (c && cJSON_strcasecmp(c->string,string)) c=c->next; return c;}
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b084      	sub	sp, #16
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
 8001eac:	6039      	str	r1, [r7, #0]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	689b      	ldr	r3, [r3, #8]
 8001eb2:	60fb      	str	r3, [r7, #12]
 8001eb4:	e002      	b.n	8001ebc <cJSON_GetObjectItem+0x18>
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	60fb      	str	r3, [r7, #12]
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d008      	beq.n	8001ed4 <cJSON_GetObjectItem+0x30>
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	6a1b      	ldr	r3, [r3, #32]
 8001ec6:	6839      	ldr	r1, [r7, #0]
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f7ff f981 	bl	80011d0 <cJSON_strcasecmp>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d1f0      	bne.n	8001eb6 <cJSON_GetObjectItem+0x12>
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	3710      	adds	r7, #16
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}
	...

08001ee0 <USART_Tx>:
char DBG_buf[DBG_RX_BUFFER_SIZE] = {0,};
char DBG_str[DBG_RX_BUFFER_SIZE] = {0,};

//Функция передачи байта по USART3
void USART_Tx(unsigned char Data)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b083      	sub	sp, #12
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	71fb      	strb	r3, [r7, #7]
	while(!(USART3->SR & USART_SR_TC));
 8001eea:	bf00      	nop
 8001eec:	4b07      	ldr	r3, [pc, #28]	; (8001f0c <USART_Tx+0x2c>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d0f9      	beq.n	8001eec <USART_Tx+0xc>
	USART3->DR = Data;
 8001ef8:	4a04      	ldr	r2, [pc, #16]	; (8001f0c <USART_Tx+0x2c>)
 8001efa:	79fb      	ldrb	r3, [r7, #7]
 8001efc:	6053      	str	r3, [r2, #4]
}
 8001efe:	bf00      	nop
 8001f00:	370c      	adds	r7, #12
 8001f02:	46bd      	mov	sp, r7
 8001f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f08:	4770      	bx	lr
 8001f0a:	bf00      	nop
 8001f0c:	40004800 	.word	0x40004800

08001f10 <SEND_str>:
//Функция отправки сткроки
//Принимает строку для отправки
void SEND_str(char * string)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b084      	sub	sp, #16
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
	uint8_t i = 0;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	73fb      	strb	r3, [r7, #15]
	while(string[i])
 8001f1c:	e009      	b.n	8001f32 <SEND_str+0x22>
	{
		USART_Tx(string[i]);
 8001f1e:	7bfb      	ldrb	r3, [r7, #15]
 8001f20:	687a      	ldr	r2, [r7, #4]
 8001f22:	4413      	add	r3, r2
 8001f24:	781b      	ldrb	r3, [r3, #0]
 8001f26:	4618      	mov	r0, r3
 8001f28:	f7ff ffda 	bl	8001ee0 <USART_Tx>
		i++;
 8001f2c:	7bfb      	ldrb	r3, [r7, #15]
 8001f2e:	3301      	adds	r3, #1
 8001f30:	73fb      	strb	r3, [r7, #15]
	while(string[i])
 8001f32:	7bfb      	ldrb	r3, [r7, #15]
 8001f34:	687a      	ldr	r2, [r7, #4]
 8001f36:	4413      	add	r3, r2
 8001f38:	781b      	ldrb	r3, [r3, #0]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d1ef      	bne.n	8001f1e <SEND_str+0xe>
	}
}
 8001f3e:	bf00      	nop
 8001f40:	bf00      	nop
 8001f42:	3710      	adds	r7, #16
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}

08001f48 <DEBUG_main>:
void DEBUG_main(void)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b082      	sub	sp, #8
 8001f4c:	af00      	add	r7, sp, #0
	if(dbg_available()) //если послали в терминал какую-то команду, то она перенаправиться в модем
 8001f4e:	f003 fad3 	bl	80054f8 <dbg_available>
 8001f52:	4603      	mov	r3, r0
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	f000 80bf 	beq.w	80020d8 <DEBUG_main+0x190>
	{
		uint16_t i = 0;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	80fb      	strh	r3, [r7, #6]
		uint8_t fdbg = 1;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	717b      	strb	r3, [r7, #5]
		memset(DBG_buf, 0, DBG_RX_BUFFER_SIZE);
 8001f62:	2240      	movs	r2, #64	; 0x40
 8001f64:	2100      	movs	r1, #0
 8001f66:	485e      	ldr	r0, [pc, #376]	; (80020e0 <DEBUG_main+0x198>)
 8001f68:	f014 ff66 	bl	8016e38 <memset>
		HAL_Delay(50);
 8001f6c:	2032      	movs	r0, #50	; 0x32
 8001f6e:	f003 fb9f 	bl	80056b0 <HAL_Delay>

		while(dbg_available())
 8001f72:	e010      	b.n	8001f96 <DEBUG_main+0x4e>
		{
			DBG_buf[i++] = dbg_read();
 8001f74:	f003 fadc 	bl	8005530 <dbg_read>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	4619      	mov	r1, r3
 8001f7c:	88fb      	ldrh	r3, [r7, #6]
 8001f7e:	1c5a      	adds	r2, r3, #1
 8001f80:	80fa      	strh	r2, [r7, #6]
 8001f82:	461a      	mov	r2, r3
 8001f84:	b2c9      	uxtb	r1, r1
 8001f86:	4b56      	ldr	r3, [pc, #344]	; (80020e0 <DEBUG_main+0x198>)
 8001f88:	5499      	strb	r1, [r3, r2]
			if(i > DBG_RX_BUFFER_SIZE - 1)
 8001f8a:	88fb      	ldrh	r3, [r7, #6]
 8001f8c:	2b3f      	cmp	r3, #63	; 0x3f
 8001f8e:	d808      	bhi.n	8001fa2 <DEBUG_main+0x5a>
				break;
			HAL_Delay(1);
 8001f90:	2001      	movs	r0, #1
 8001f92:	f003 fb8d 	bl	80056b0 <HAL_Delay>
		while(dbg_available())
 8001f96:	f003 faaf 	bl	80054f8 <dbg_available>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d1e9      	bne.n	8001f74 <DEBUG_main+0x2c>
 8001fa0:	e000      	b.n	8001fa4 <DEBUG_main+0x5c>
				break;
 8001fa2:	bf00      	nop
		}
		clear_string(DBG_buf);
 8001fa4:	484e      	ldr	r0, [pc, #312]	; (80020e0 <DEBUG_main+0x198>)
 8001fa6:	f000 fa39 	bl	800241c <clear_string>
		if(strstr(DBG_buf, "test") != NULL)
 8001faa:	494e      	ldr	r1, [pc, #312]	; (80020e4 <DEBUG_main+0x19c>)
 8001fac:	484c      	ldr	r0, [pc, #304]	; (80020e0 <DEBUG_main+0x198>)
 8001fae:	f015 fd2d 	bl	8017a0c <strstr>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d003      	beq.n	8001fc0 <DEBUG_main+0x78>
		{
			SEND_str("respone\n");
 8001fb8:	484b      	ldr	r0, [pc, #300]	; (80020e8 <DEBUG_main+0x1a0>)
 8001fba:	f7ff ffa9 	bl	8001f10 <SEND_str>
 8001fbe:	e082      	b.n	80020c6 <DEBUG_main+0x17e>
//		clear_string(DBG_buf);
//		snprintf(DBG_str, DBG_RX_BUFFER_SIZE, "%s\r\n", DBG_buf);
//		c = strchr(DBG_str, '.') - DBG_str;
//		HAL_UART_Transmit(&huart2, (uint8_t*)DBG_str, c, 1000);	//strlen(DBG_str)

		else if(strstr(DBG_buf, "AIN") != NULL)
 8001fc0:	494a      	ldr	r1, [pc, #296]	; (80020ec <DEBUG_main+0x1a4>)
 8001fc2:	4847      	ldr	r0, [pc, #284]	; (80020e0 <DEBUG_main+0x198>)
 8001fc4:	f015 fd22 	bl	8017a0c <strstr>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d003      	beq.n	8001fd6 <DEBUG_main+0x8e>
		{
			json_input("{\"INSTRUCTION\":\"SET_PERIPHERALS\",\"COMMAND\":{\"TYPE\":\"ANALOG\",\"SET\":\"[1,1,0,0,1,1,0,0]\"},\"TIME\":\"1122334455\"}");
 8001fce:	4848      	ldr	r0, [pc, #288]	; (80020f0 <DEBUG_main+0x1a8>)
 8001fd0:	f000 fa92 	bl	80024f8 <json_input>
 8001fd4:	e077      	b.n	80020c6 <DEBUG_main+0x17e>
		}
		else if(strstr(DBG_buf, "DIN") != NULL)
 8001fd6:	4947      	ldr	r1, [pc, #284]	; (80020f4 <DEBUG_main+0x1ac>)
 8001fd8:	4841      	ldr	r0, [pc, #260]	; (80020e0 <DEBUG_main+0x198>)
 8001fda:	f015 fd17 	bl	8017a0c <strstr>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d003      	beq.n	8001fec <DEBUG_main+0xa4>
		{
			json_input("{\"INSTRUCTION\":\"SET_PERIPHERALS\",\"COMMAND\":{\"TYPE\":\"DIGITAL\",\"SET\":\"[0,0,1,1,0,0,1,1]\"},\"TIME\":\"1122334455\"}");
 8001fe4:	4844      	ldr	r0, [pc, #272]	; (80020f8 <DEBUG_main+0x1b0>)
 8001fe6:	f000 fa87 	bl	80024f8 <json_input>
 8001fea:	e06c      	b.n	80020c6 <DEBUG_main+0x17e>
		}
		else if(strstr(DBG_buf, "OCD") != NULL)
 8001fec:	4943      	ldr	r1, [pc, #268]	; (80020fc <DEBUG_main+0x1b4>)
 8001fee:	483c      	ldr	r0, [pc, #240]	; (80020e0 <DEBUG_main+0x198>)
 8001ff0:	f015 fd0c 	bl	8017a0c <strstr>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d003      	beq.n	8002002 <DEBUG_main+0xba>
		{
			json_input("{\"INSTRUCTION\":\"SET_PERIPHERALS\",\"COMMAND\":{\"TYPE\":\"OCD\",\"SET\":\"[0,1,1,0,0,1,1,0]\"},\"TIME\":\"1122334455\"}");
 8001ffa:	4841      	ldr	r0, [pc, #260]	; (8002100 <DEBUG_main+0x1b8>)
 8001ffc:	f000 fa7c 	bl	80024f8 <json_input>
 8002000:	e061      	b.n	80020c6 <DEBUG_main+0x17e>
		}
		//------------------------------------------------Digital-----------------------------------------------
		else if(strstr(DBG_buf, "SP1") != NULL)
 8002002:	4940      	ldr	r1, [pc, #256]	; (8002104 <DEBUG_main+0x1bc>)
 8002004:	4836      	ldr	r0, [pc, #216]	; (80020e0 <DEBUG_main+0x198>)
 8002006:	f015 fd01 	bl	8017a0c <strstr>
 800200a:	4603      	mov	r3, r0
 800200c:	2b00      	cmp	r3, #0
 800200e:	d003      	beq.n	8002018 <DEBUG_main+0xd0>
		{
			json_input("{\"INSTRUCTION\":\"SET_PROGRAMM\",\"COMMAND\":{\"TYPE\":\"SET_DIDO\",\"D_IN\":\"VHOD1\",\"VAR_IN\":\"0\",\"D_OUT\":\"VIHOD1\",\"VAR_OUT\":\"1\"},\"TIME\":\"1122334455\"}");
 8002010:	483d      	ldr	r0, [pc, #244]	; (8002108 <DEBUG_main+0x1c0>)
 8002012:	f000 fa71 	bl	80024f8 <json_input>
 8002016:	e056      	b.n	80020c6 <DEBUG_main+0x17e>
		}
		else if(strstr(DBG_buf, "SP2") != NULL)
 8002018:	493c      	ldr	r1, [pc, #240]	; (800210c <DEBUG_main+0x1c4>)
 800201a:	4831      	ldr	r0, [pc, #196]	; (80020e0 <DEBUG_main+0x198>)
 800201c:	f015 fcf6 	bl	8017a0c <strstr>
 8002020:	4603      	mov	r3, r0
 8002022:	2b00      	cmp	r3, #0
 8002024:	d003      	beq.n	800202e <DEBUG_main+0xe6>
		{
			json_input("{\"INSTRUCTION\":\"SET_PROGRAMM\",\"COMMAND\":{\"TYPE\":\"SET_DIDO\",\"D_IN\":\"VHOD1\",\"VAR_IN\":\"0\",\"D_OUT\":\"VIHOD8\",\"VAR_OUT\":\"1\"},\"TIME\":\"1122334455\"}");
 8002026:	483a      	ldr	r0, [pc, #232]	; (8002110 <DEBUG_main+0x1c8>)
 8002028:	f000 fa66 	bl	80024f8 <json_input>
 800202c:	e04b      	b.n	80020c6 <DEBUG_main+0x17e>
		}
		//----------------------------------------------End_Digital---------------------------------------------
		//------------------------------------------------Analog------------------------------------------------
		else if(strstr(DBG_buf, "SP3") != NULL)
 800202e:	4939      	ldr	r1, [pc, #228]	; (8002114 <DEBUG_main+0x1cc>)
 8002030:	482b      	ldr	r0, [pc, #172]	; (80020e0 <DEBUG_main+0x198>)
 8002032:	f015 fceb 	bl	8017a0c <strstr>
 8002036:	4603      	mov	r3, r0
 8002038:	2b00      	cmp	r3, #0
 800203a:	d003      	beq.n	8002044 <DEBUG_main+0xfc>
		{
			json_input("{\"INSTRUCTION\":\"SET_PROGRAMM\",\"COMMAND\":{\"TYPE\":\"SET_VAIDO\",\"A_IN\":\"VHOD1\",\"RANGE_LOW\":\"2.5\",\"RANGE_HIGH\":\"3.5\",\"D_OUT\":\"VIHOD3\",\"VAR_OUT\":\"1\"},\"TIME\":\"1122334455\"}");
 800203c:	4836      	ldr	r0, [pc, #216]	; (8002118 <DEBUG_main+0x1d0>)
 800203e:	f000 fa5b 	bl	80024f8 <json_input>
 8002042:	e040      	b.n	80020c6 <DEBUG_main+0x17e>
		}
		else if(strstr(DBG_buf, "SP4") != NULL)
 8002044:	4935      	ldr	r1, [pc, #212]	; (800211c <DEBUG_main+0x1d4>)
 8002046:	4826      	ldr	r0, [pc, #152]	; (80020e0 <DEBUG_main+0x198>)
 8002048:	f015 fce0 	bl	8017a0c <strstr>
 800204c:	4603      	mov	r3, r0
 800204e:	2b00      	cmp	r3, #0
 8002050:	d003      	beq.n	800205a <DEBUG_main+0x112>
		{
			json_input("{\"INSTRUCTION\":\"SET_PROGRAMM\",\"COMMAND\":{\"TYPE\":\"SET_VAIDO\",\"A_IN\":\"VHOD1\",\"RANGE_LOW\":\"0\",\"RANGE_HIGH\":\"1\",\"D_OUT\":\"VIHOD4\",\"VAR_OUT\":\"1\"},\"TIME\":\"1122334455\"}");
 8002052:	4833      	ldr	r0, [pc, #204]	; (8002120 <DEBUG_main+0x1d8>)
 8002054:	f000 fa50 	bl	80024f8 <json_input>
 8002058:	e035      	b.n	80020c6 <DEBUG_main+0x17e>
		}
		//----------------------------------------------End_Analog----------------------------------------------
		//--------------------------------------------------PWM-------------------------------------------------
		else if(strstr(DBG_buf, "SP5") != NULL)
 800205a:	4932      	ldr	r1, [pc, #200]	; (8002124 <DEBUG_main+0x1dc>)
 800205c:	4820      	ldr	r0, [pc, #128]	; (80020e0 <DEBUG_main+0x198>)
 800205e:	f015 fcd5 	bl	8017a0c <strstr>
 8002062:	4603      	mov	r3, r0
 8002064:	2b00      	cmp	r3, #0
 8002066:	d003      	beq.n	8002070 <DEBUG_main+0x128>
		{
			json_input("{\"INSTRUCTION\":\"SET_PROGRAMM\",\"COMMAND\":{\"TYPE\":\"SET_PWM\",\"PWM_OUT\":\"PWM1\",\"D_CYCLE\":\"10\"},\"TIME\":\"1122334455\"}");
 8002068:	482f      	ldr	r0, [pc, #188]	; (8002128 <DEBUG_main+0x1e0>)
 800206a:	f000 fa45 	bl	80024f8 <json_input>
 800206e:	e02a      	b.n	80020c6 <DEBUG_main+0x17e>
		}
		else if(strstr(DBG_buf, "SP6") != NULL)
 8002070:	492e      	ldr	r1, [pc, #184]	; (800212c <DEBUG_main+0x1e4>)
 8002072:	481b      	ldr	r0, [pc, #108]	; (80020e0 <DEBUG_main+0x198>)
 8002074:	f015 fcca 	bl	8017a0c <strstr>
 8002078:	4603      	mov	r3, r0
 800207a:	2b00      	cmp	r3, #0
 800207c:	d003      	beq.n	8002086 <DEBUG_main+0x13e>
		{
			json_input("{\"INSTRUCTION\":\"SET_PROGRAMM\",\"COMMAND\":{\"TYPE\":\"SET_PWM\",\"PWM_OUT\":\"PWM2\",\"D_CYCLE\":\"25\"},\"TIME\":\"1122334455\"}");
 800207e:	482c      	ldr	r0, [pc, #176]	; (8002130 <DEBUG_main+0x1e8>)
 8002080:	f000 fa3a 	bl	80024f8 <json_input>
 8002084:	e01f      	b.n	80020c6 <DEBUG_main+0x17e>
		}
		else if(strstr(DBG_buf, "SP7") != NULL)
 8002086:	492b      	ldr	r1, [pc, #172]	; (8002134 <DEBUG_main+0x1ec>)
 8002088:	4815      	ldr	r0, [pc, #84]	; (80020e0 <DEBUG_main+0x198>)
 800208a:	f015 fcbf 	bl	8017a0c <strstr>
 800208e:	4603      	mov	r3, r0
 8002090:	2b00      	cmp	r3, #0
 8002092:	d003      	beq.n	800209c <DEBUG_main+0x154>
		{
			json_input("{\"INSTRUCTION\":\"SET_PROGRAMM\",\"COMMAND\":{\"TYPE\":\"SET_PWM\",\"PWM_OUT\":\"PWM3\",\"D_CYCLE\":\"50\"},\"TIME\":\"1122334455\"}");
 8002094:	4828      	ldr	r0, [pc, #160]	; (8002138 <DEBUG_main+0x1f0>)
 8002096:	f000 fa2f 	bl	80024f8 <json_input>
 800209a:	e014      	b.n	80020c6 <DEBUG_main+0x17e>
		}
		else if(strstr(DBG_buf, "SP8") != NULL)
 800209c:	4927      	ldr	r1, [pc, #156]	; (800213c <DEBUG_main+0x1f4>)
 800209e:	4810      	ldr	r0, [pc, #64]	; (80020e0 <DEBUG_main+0x198>)
 80020a0:	f015 fcb4 	bl	8017a0c <strstr>
 80020a4:	4603      	mov	r3, r0
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d003      	beq.n	80020b2 <DEBUG_main+0x16a>
		{
			json_input("{\"INSTRUCTION\":\"SET_PROGRAMM\",\"COMMAND\":{\"TYPE\":\"SET_PWM\",\"PWM_OUT\":\"PWM4\",\"D_CYCLE\":\"90\"},\"TIME\":\"1122334455\"}");
 80020aa:	4825      	ldr	r0, [pc, #148]	; (8002140 <DEBUG_main+0x1f8>)
 80020ac:	f000 fa24 	bl	80024f8 <json_input>
 80020b0:	e009      	b.n	80020c6 <DEBUG_main+0x17e>
		}
		else if(strstr(DBG_buf, "SP9") != NULL)
 80020b2:	4924      	ldr	r1, [pc, #144]	; (8002144 <DEBUG_main+0x1fc>)
 80020b4:	480a      	ldr	r0, [pc, #40]	; (80020e0 <DEBUG_main+0x198>)
 80020b6:	f015 fca9 	bl	8017a0c <strstr>
 80020ba:	4603      	mov	r3, r0
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d002      	beq.n	80020c6 <DEBUG_main+0x17e>
		{
			json_input("{\"INSTRUCTION\":\"SET_PROGRAMM\",\"COMMAND\":{\"TYPE\":\"SET_PWM\",\"PWM_OUT\":\"PWM1\",\"D_CYCLE\":\"50\"},\"TIME\":\"1122334455\"}");
 80020c0:	4821      	ldr	r0, [pc, #132]	; (8002148 <DEBUG_main+0x200>)
 80020c2:	f000 fa19 	bl	80024f8 <json_input>
		}
		//------------------------------------------------End_PWM-----------------------------------------------
		if(fdbg)
 80020c6:	797b      	ldrb	r3, [r7, #5]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d005      	beq.n	80020d8 <DEBUG_main+0x190>
		{
			snprintf(DBG_str, DBG_RX_BUFFER_SIZE, "%s\n", DBG_buf);
 80020cc:	4b04      	ldr	r3, [pc, #16]	; (80020e0 <DEBUG_main+0x198>)
 80020ce:	4a1f      	ldr	r2, [pc, #124]	; (800214c <DEBUG_main+0x204>)
 80020d0:	2140      	movs	r1, #64	; 0x40
 80020d2:	481f      	ldr	r0, [pc, #124]	; (8002150 <DEBUG_main+0x208>)
 80020d4:	f015 fc34 	bl	8017940 <sniprintf>

			//json_input("{\"INSTRUCTION\":\"SET_PERIPHERALS\",\"COMMAND\":{\"TYPE\":\"DIGITAL\",\"SET\":\"[0,1,1,0,0,0,0,1]\"},\"TIME\":\"1122334455\"}");
		}
	}
}
 80020d8:	bf00      	nop
 80020da:	3708      	adds	r7, #8
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}
 80020e0:	20000270 	.word	0x20000270
 80020e4:	0801c330 	.word	0x0801c330
 80020e8:	0801c338 	.word	0x0801c338
 80020ec:	0801c344 	.word	0x0801c344
 80020f0:	0801c348 	.word	0x0801c348
 80020f4:	0801c3b4 	.word	0x0801c3b4
 80020f8:	0801c3b8 	.word	0x0801c3b8
 80020fc:	0801c428 	.word	0x0801c428
 8002100:	0801c42c 	.word	0x0801c42c
 8002104:	0801c498 	.word	0x0801c498
 8002108:	0801c49c 	.word	0x0801c49c
 800210c:	0801c528 	.word	0x0801c528
 8002110:	0801c52c 	.word	0x0801c52c
 8002114:	0801c5b8 	.word	0x0801c5b8
 8002118:	0801c5bc 	.word	0x0801c5bc
 800211c:	0801c664 	.word	0x0801c664
 8002120:	0801c668 	.word	0x0801c668
 8002124:	0801c70c 	.word	0x0801c70c
 8002128:	0801c710 	.word	0x0801c710
 800212c:	0801c780 	.word	0x0801c780
 8002130:	0801c784 	.word	0x0801c784
 8002134:	0801c7f4 	.word	0x0801c7f4
 8002138:	0801c7f8 	.word	0x0801c7f8
 800213c:	0801c868 	.word	0x0801c868
 8002140:	0801c86c 	.word	0x0801c86c
 8002144:	0801c8dc 	.word	0x0801c8dc
 8002148:	0801c8e0 	.word	0x0801c8e0
 800214c:	0801c950 	.word	0x0801c950
 8002150:	200002b0 	.word	0x200002b0

08002154 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b082      	sub	sp, #8
 8002158:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800215a:	2300      	movs	r3, #0
 800215c:	607b      	str	r3, [r7, #4]
 800215e:	4b23      	ldr	r3, [pc, #140]	; (80021ec <MX_DMA_Init+0x98>)
 8002160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002162:	4a22      	ldr	r2, [pc, #136]	; (80021ec <MX_DMA_Init+0x98>)
 8002164:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002168:	6313      	str	r3, [r2, #48]	; 0x30
 800216a:	4b20      	ldr	r3, [pc, #128]	; (80021ec <MX_DMA_Init+0x98>)
 800216c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800216e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002172:	607b      	str	r3, [r7, #4]
 8002174:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002176:	2300      	movs	r3, #0
 8002178:	603b      	str	r3, [r7, #0]
 800217a:	4b1c      	ldr	r3, [pc, #112]	; (80021ec <MX_DMA_Init+0x98>)
 800217c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800217e:	4a1b      	ldr	r2, [pc, #108]	; (80021ec <MX_DMA_Init+0x98>)
 8002180:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002184:	6313      	str	r3, [r2, #48]	; 0x30
 8002186:	4b19      	ldr	r3, [pc, #100]	; (80021ec <MX_DMA_Init+0x98>)
 8002188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800218a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800218e:	603b      	str	r3, [r7, #0]
 8002190:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8002192:	2200      	movs	r2, #0
 8002194:	2100      	movs	r1, #0
 8002196:	200d      	movs	r0, #13
 8002198:	f003 ff50 	bl	800603c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 800219c:	200d      	movs	r0, #13
 800219e:	f003 ff69 	bl	8006074 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 80021a2:	2200      	movs	r2, #0
 80021a4:	2100      	movs	r1, #0
 80021a6:	200f      	movs	r0, #15
 80021a8:	f003 ff48 	bl	800603c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80021ac:	200f      	movs	r0, #15
 80021ae:	f003 ff61 	bl	8006074 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80021b2:	2200      	movs	r2, #0
 80021b4:	2100      	movs	r1, #0
 80021b6:	2010      	movs	r0, #16
 80021b8:	f003 ff40 	bl	800603c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80021bc:	2010      	movs	r0, #16
 80021be:	f003 ff59 	bl	8006074 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 80021c2:	2200      	movs	r2, #0
 80021c4:	2100      	movs	r1, #0
 80021c6:	202f      	movs	r0, #47	; 0x2f
 80021c8:	f003 ff38 	bl	800603c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 80021cc:	202f      	movs	r0, #47	; 0x2f
 80021ce:	f003 ff51 	bl	8006074 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80021d2:	2200      	movs	r2, #0
 80021d4:	2100      	movs	r1, #0
 80021d6:	2038      	movs	r0, #56	; 0x38
 80021d8:	f003 ff30 	bl	800603c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80021dc:	2038      	movs	r0, #56	; 0x38
 80021de:	f003 ff49 	bl	8006074 <HAL_NVIC_EnableIRQ>

}
 80021e2:	bf00      	nop
 80021e4:	3708      	adds	r7, #8
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	bf00      	nop
 80021ec:	40023800 	.word	0x40023800

080021f0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b08c      	sub	sp, #48	; 0x30
 80021f4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021f6:	f107 031c 	add.w	r3, r7, #28
 80021fa:	2200      	movs	r2, #0
 80021fc:	601a      	str	r2, [r3, #0]
 80021fe:	605a      	str	r2, [r3, #4]
 8002200:	609a      	str	r2, [r3, #8]
 8002202:	60da      	str	r2, [r3, #12]
 8002204:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002206:	2300      	movs	r3, #0
 8002208:	61bb      	str	r3, [r7, #24]
 800220a:	4b7d      	ldr	r3, [pc, #500]	; (8002400 <MX_GPIO_Init+0x210>)
 800220c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800220e:	4a7c      	ldr	r2, [pc, #496]	; (8002400 <MX_GPIO_Init+0x210>)
 8002210:	f043 0310 	orr.w	r3, r3, #16
 8002214:	6313      	str	r3, [r2, #48]	; 0x30
 8002216:	4b7a      	ldr	r3, [pc, #488]	; (8002400 <MX_GPIO_Init+0x210>)
 8002218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800221a:	f003 0310 	and.w	r3, r3, #16
 800221e:	61bb      	str	r3, [r7, #24]
 8002220:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002222:	2300      	movs	r3, #0
 8002224:	617b      	str	r3, [r7, #20]
 8002226:	4b76      	ldr	r3, [pc, #472]	; (8002400 <MX_GPIO_Init+0x210>)
 8002228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800222a:	4a75      	ldr	r2, [pc, #468]	; (8002400 <MX_GPIO_Init+0x210>)
 800222c:	f043 0304 	orr.w	r3, r3, #4
 8002230:	6313      	str	r3, [r2, #48]	; 0x30
 8002232:	4b73      	ldr	r3, [pc, #460]	; (8002400 <MX_GPIO_Init+0x210>)
 8002234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002236:	f003 0304 	and.w	r3, r3, #4
 800223a:	617b      	str	r3, [r7, #20]
 800223c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800223e:	2300      	movs	r3, #0
 8002240:	613b      	str	r3, [r7, #16]
 8002242:	4b6f      	ldr	r3, [pc, #444]	; (8002400 <MX_GPIO_Init+0x210>)
 8002244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002246:	4a6e      	ldr	r2, [pc, #440]	; (8002400 <MX_GPIO_Init+0x210>)
 8002248:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800224c:	6313      	str	r3, [r2, #48]	; 0x30
 800224e:	4b6c      	ldr	r3, [pc, #432]	; (8002400 <MX_GPIO_Init+0x210>)
 8002250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002252:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002256:	613b      	str	r3, [r7, #16]
 8002258:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800225a:	2300      	movs	r3, #0
 800225c:	60fb      	str	r3, [r7, #12]
 800225e:	4b68      	ldr	r3, [pc, #416]	; (8002400 <MX_GPIO_Init+0x210>)
 8002260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002262:	4a67      	ldr	r2, [pc, #412]	; (8002400 <MX_GPIO_Init+0x210>)
 8002264:	f043 0301 	orr.w	r3, r3, #1
 8002268:	6313      	str	r3, [r2, #48]	; 0x30
 800226a:	4b65      	ldr	r3, [pc, #404]	; (8002400 <MX_GPIO_Init+0x210>)
 800226c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800226e:	f003 0301 	and.w	r3, r3, #1
 8002272:	60fb      	str	r3, [r7, #12]
 8002274:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002276:	2300      	movs	r3, #0
 8002278:	60bb      	str	r3, [r7, #8]
 800227a:	4b61      	ldr	r3, [pc, #388]	; (8002400 <MX_GPIO_Init+0x210>)
 800227c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800227e:	4a60      	ldr	r2, [pc, #384]	; (8002400 <MX_GPIO_Init+0x210>)
 8002280:	f043 0302 	orr.w	r3, r3, #2
 8002284:	6313      	str	r3, [r2, #48]	; 0x30
 8002286:	4b5e      	ldr	r3, [pc, #376]	; (8002400 <MX_GPIO_Init+0x210>)
 8002288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800228a:	f003 0302 	and.w	r3, r3, #2
 800228e:	60bb      	str	r3, [r7, #8]
 8002290:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002292:	2300      	movs	r3, #0
 8002294:	607b      	str	r3, [r7, #4]
 8002296:	4b5a      	ldr	r3, [pc, #360]	; (8002400 <MX_GPIO_Init+0x210>)
 8002298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800229a:	4a59      	ldr	r2, [pc, #356]	; (8002400 <MX_GPIO_Init+0x210>)
 800229c:	f043 0308 	orr.w	r3, r3, #8
 80022a0:	6313      	str	r3, [r2, #48]	; 0x30
 80022a2:	4b57      	ldr	r3, [pc, #348]	; (8002400 <MX_GPIO_Init+0x210>)
 80022a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a6:	f003 0308 	and.w	r3, r3, #8
 80022aa:	607b      	str	r3, [r7, #4]
 80022ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FLAG_MCU_GPIO_Port, FLAG_MCU_Pin, GPIO_PIN_SET);
 80022ae:	2201      	movs	r2, #1
 80022b0:	2140      	movs	r1, #64	; 0x40
 80022b2:	4854      	ldr	r0, [pc, #336]	; (8002404 <MX_GPIO_Init+0x214>)
 80022b4:	f005 fcd4 	bl	8007c60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PWRON_GPIO_Port, PWRON_Pin, GPIO_PIN_RESET);
 80022b8:	2200      	movs	r2, #0
 80022ba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80022be:	4852      	ldr	r0, [pc, #328]	; (8002408 <MX_GPIO_Init+0x218>)
 80022c0:	f005 fcce 	bl	8007c60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(O0_GPIO_Port, O0_Pin, GPIO_PIN_RESET);
 80022c4:	2200      	movs	r2, #0
 80022c6:	2101      	movs	r1, #1
 80022c8:	4850      	ldr	r0, [pc, #320]	; (800240c <MX_GPIO_Init+0x21c>)
 80022ca:	f005 fcc9 	bl	8007c60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, O1_Pin|O2_Pin|CS1__Pin, GPIO_PIN_RESET);
 80022ce:	2200      	movs	r2, #0
 80022d0:	2143      	movs	r1, #67	; 0x43
 80022d2:	484f      	ldr	r0, [pc, #316]	; (8002410 <MX_GPIO_Init+0x220>)
 80022d4:	f005 fcc4 	bl	8007c60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, O3_Pin|O4_Pin|O5_Pin|O6_Pin
 80022d8:	2200      	movs	r2, #0
 80022da:	f64f 7183 	movw	r1, #65411	; 0xff83
 80022de:	4849      	ldr	r0, [pc, #292]	; (8002404 <MX_GPIO_Init+0x214>)
 80022e0:	f005 fcbe 	bl	8007c60 <HAL_GPIO_WritePin>
                          |O7_Pin|S2_Pin|S3_Pin|S4_Pin
                          |S1_Pin|WP__Pin|CS2__Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PKEY_GPIO_Port, PKEY_Pin, GPIO_PIN_SET);
 80022e4:	2201      	movs	r2, #1
 80022e6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80022ea:	4848      	ldr	r0, [pc, #288]	; (800240c <MX_GPIO_Init+0x21c>)
 80022ec:	f005 fcb8 	bl	8007c60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, WR0_Pin|WR1_Pin|PWR0_Pin|PWR1_Pin
 80022f0:	2200      	movs	r2, #0
 80022f2:	219f      	movs	r1, #159	; 0x9f
 80022f4:	4847      	ldr	r0, [pc, #284]	; (8002414 <MX_GPIO_Init+0x224>)
 80022f6:	f005 fcb3 	bl	8007c60 <HAL_GPIO_WritePin>
                          |RS485_DE_Pin|RS485_RE__Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = FLAG_MCU_Pin|O3_Pin|O4_Pin|O5_Pin
 80022fa:	f64f 73c3 	movw	r3, #65475	; 0xffc3
 80022fe:	61fb      	str	r3, [r7, #28]
                          |O6_Pin|O7_Pin|S2_Pin|S3_Pin
                          |S4_Pin|S1_Pin|WP__Pin|CS2__Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002300:	2301      	movs	r3, #1
 8002302:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002304:	2300      	movs	r3, #0
 8002306:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002308:	2303      	movs	r3, #3
 800230a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800230c:	f107 031c 	add.w	r3, r7, #28
 8002310:	4619      	mov	r1, r3
 8002312:	483c      	ldr	r0, [pc, #240]	; (8002404 <MX_GPIO_Init+0x214>)
 8002314:	f005 faf0 	bl	80078f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PWRON_Pin;
 8002318:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800231c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800231e:	2301      	movs	r3, #1
 8002320:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002322:	2300      	movs	r3, #0
 8002324:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002326:	2300      	movs	r3, #0
 8002328:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(PWRON_GPIO_Port, &GPIO_InitStruct);
 800232a:	f107 031c 	add.w	r3, r7, #28
 800232e:	4619      	mov	r1, r3
 8002330:	4835      	ldr	r0, [pc, #212]	; (8002408 <MX_GPIO_Init+0x218>)
 8002332:	f005 fae1 	bl	80078f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS__M_Pin;
 8002336:	2301      	movs	r3, #1
 8002338:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800233a:	2300      	movs	r3, #0
 800233c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800233e:	2300      	movs	r3, #0
 8002340:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(CS__M_GPIO_Port, &GPIO_InitStruct);
 8002342:	f107 031c 	add.w	r3, r7, #28
 8002346:	4619      	mov	r1, r3
 8002348:	482f      	ldr	r0, [pc, #188]	; (8002408 <MX_GPIO_Init+0x218>)
 800234a:	f005 fad5 	bl	80078f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = O0_Pin|PKEY_Pin;
 800234e:	f640 0301 	movw	r3, #2049	; 0x801
 8002352:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002354:	2301      	movs	r3, #1
 8002356:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002358:	2300      	movs	r3, #0
 800235a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800235c:	2303      	movs	r3, #3
 800235e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002360:	f107 031c 	add.w	r3, r7, #28
 8002364:	4619      	mov	r1, r3
 8002366:	4829      	ldr	r0, [pc, #164]	; (800240c <MX_GPIO_Init+0x21c>)
 8002368:	f005 fac6 	bl	80078f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = O1_Pin|O2_Pin|CS1__Pin;
 800236c:	2343      	movs	r3, #67	; 0x43
 800236e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002370:	2301      	movs	r3, #1
 8002372:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002374:	2300      	movs	r3, #0
 8002376:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002378:	2303      	movs	r3, #3
 800237a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800237c:	f107 031c 	add.w	r3, r7, #28
 8002380:	4619      	mov	r1, r3
 8002382:	4823      	ldr	r0, [pc, #140]	; (8002410 <MX_GPIO_Init+0x220>)
 8002384:	f005 fab8 	bl	80078f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = IN7_Pin|IN6_Pin|IN5_Pin|IN4_Pin
 8002388:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 800238c:	61fb      	str	r3, [r7, #28]
                          |IN3_Pin|IN2_Pin|IN1_Pin|IN0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800238e:	4b22      	ldr	r3, [pc, #136]	; (8002418 <MX_GPIO_Init+0x228>)
 8002390:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002392:	2300      	movs	r3, #0
 8002394:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002396:	f107 031c 	add.w	r3, r7, #28
 800239a:	4619      	mov	r1, r3
 800239c:	481d      	ldr	r0, [pc, #116]	; (8002414 <MX_GPIO_Init+0x224>)
 800239e:	f005 faab 	bl	80078f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin */
  GPIO_InitStruct.Pin = WR0_Pin|WR1_Pin|PWR0_Pin|PWR1_Pin
 80023a2:	239f      	movs	r3, #159	; 0x9f
 80023a4:	61fb      	str	r3, [r7, #28]
                          |RS485_DE_Pin|RS485_RE__Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023a6:	2301      	movs	r3, #1
 80023a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023aa:	2300      	movs	r3, #0
 80023ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023ae:	2303      	movs	r3, #3
 80023b0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80023b2:	f107 031c 	add.w	r3, r7, #28
 80023b6:	4619      	mov	r1, r3
 80023b8:	4816      	ldr	r0, [pc, #88]	; (8002414 <MX_GPIO_Init+0x224>)
 80023ba:	f005 fa9d 	bl	80078f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CD_Pin;
 80023be:	2380      	movs	r3, #128	; 0x80
 80023c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023c2:	2300      	movs	r3, #0
 80023c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023c6:	2300      	movs	r3, #0
 80023c8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(CD_GPIO_Port, &GPIO_InitStruct);
 80023ca:	f107 031c 	add.w	r3, r7, #28
 80023ce:	4619      	mov	r1, r3
 80023d0:	480f      	ldr	r0, [pc, #60]	; (8002410 <MX_GPIO_Init+0x220>)
 80023d2:	f005 fa91 	bl	80078f8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80023d6:	2200      	movs	r2, #0
 80023d8:	2100      	movs	r1, #0
 80023da:	2017      	movs	r0, #23
 80023dc:	f003 fe2e 	bl	800603c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80023e0:	2017      	movs	r0, #23
 80023e2:	f003 fe47 	bl	8006074 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80023e6:	2200      	movs	r2, #0
 80023e8:	2100      	movs	r1, #0
 80023ea:	2028      	movs	r0, #40	; 0x28
 80023ec:	f003 fe26 	bl	800603c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80023f0:	2028      	movs	r0, #40	; 0x28
 80023f2:	f003 fe3f 	bl	8006074 <HAL_NVIC_EnableIRQ>

}
 80023f6:	bf00      	nop
 80023f8:	3730      	adds	r7, #48	; 0x30
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	bf00      	nop
 8002400:	40023800 	.word	0x40023800
 8002404:	40021000 	.word	0x40021000
 8002408:	40020800 	.word	0x40020800
 800240c:	40020000 	.word	0x40020000
 8002410:	40020400 	.word	0x40020400
 8002414:	40020c00 	.word	0x40020c00
 8002418:	10310000 	.word	0x10310000

0800241c <clear_string>:
	  }
  }
}
//Функция удаления символов \r и \n из строки
void clear_string(char *src)
{
 800241c:	b480      	push	{r7}
 800241e:	b085      	sub	sp, #20
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
	char *dst = NULL;
 8002424:	2300      	movs	r3, #0
 8002426:	60fb      	str	r3, [r7, #12]
	if(!src) return;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d02f      	beq.n	800248e <clear_string+0x72>
	uint8_t i = 0;
 800242e:	2300      	movs	r3, #0
 8002430:	72fb      	strb	r3, [r7, #11]

	for(dst = src; *src; src++)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	60fb      	str	r3, [r7, #12]
 8002436:	e022      	b.n	800247e <clear_string+0x62>
	{
		if(i < 2 && (*src == '\n' || *src == '\r'))
 8002438:	7afb      	ldrb	r3, [r7, #11]
 800243a:	2b01      	cmp	r3, #1
 800243c:	d80b      	bhi.n	8002456 <clear_string+0x3a>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	781b      	ldrb	r3, [r3, #0]
 8002442:	2b0a      	cmp	r3, #10
 8002444:	d003      	beq.n	800244e <clear_string+0x32>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	781b      	ldrb	r3, [r3, #0]
 800244a:	2b0d      	cmp	r3, #13
 800244c:	d103      	bne.n	8002456 <clear_string+0x3a>
		{
			i++;
 800244e:	7afb      	ldrb	r3, [r7, #11]
 8002450:	3301      	adds	r3, #1
 8002452:	72fb      	strb	r3, [r7, #11]
			continue;
 8002454:	e010      	b.n	8002478 <clear_string+0x5c>
		}
		else if(*src == '\n' || *src == '\r') *src = ' ';
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	781b      	ldrb	r3, [r3, #0]
 800245a:	2b0a      	cmp	r3, #10
 800245c:	d003      	beq.n	8002466 <clear_string+0x4a>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	781b      	ldrb	r3, [r3, #0]
 8002462:	2b0d      	cmp	r3, #13
 8002464:	d102      	bne.n	800246c <clear_string+0x50>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2220      	movs	r2, #32
 800246a:	701a      	strb	r2, [r3, #0]

		*dst++ = *src;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	1c5a      	adds	r2, r3, #1
 8002470:	60fa      	str	r2, [r7, #12]
 8002472:	687a      	ldr	r2, [r7, #4]
 8002474:	7812      	ldrb	r2, [r2, #0]
 8002476:	701a      	strb	r2, [r3, #0]
	for(dst = src; *src; src++)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	3301      	adds	r3, #1
 800247c:	607b      	str	r3, [r7, #4]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	781b      	ldrb	r3, [r3, #0]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d1d8      	bne.n	8002438 <clear_string+0x1c>
	}

	*dst = 0;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	2200      	movs	r2, #0
 800248a:	701a      	strb	r2, [r3, #0]
 800248c:	e000      	b.n	8002490 <clear_string+0x74>
	if(!src) return;
 800248e:	bf00      	nop
}
 8002490:	3714      	adds	r7, #20
 8002492:	46bd      	mov	sp, r7
 8002494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002498:	4770      	bx	lr
	...

0800249c <parseValue>:

//Функция разбора подстроки значений параметра
//Принимает указатель на массив символов со значениями параметра
//Ворзвращает указатель на разобранный массив символов со значениями параметра
char *parseValue(char *value)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b086      	sub	sp, #24
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
	char *tmp;
	for(int i = 1, j = 0; i < strlen(value); i++)
 80024a4:	2301      	movs	r3, #1
 80024a6:	617b      	str	r3, [r7, #20]
 80024a8:	2300      	movs	r3, #0
 80024aa:	613b      	str	r3, [r7, #16]
 80024ac:	e013      	b.n	80024d6 <parseValue+0x3a>
	{
		if(i % 2)
 80024ae:	697b      	ldr	r3, [r7, #20]
 80024b0:	f003 0301 	and.w	r3, r3, #1
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d00b      	beq.n	80024d0 <parseValue+0x34>
		{
			paramValue[j] = value[i];
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	687a      	ldr	r2, [r7, #4]
 80024bc:	4413      	add	r3, r2
 80024be:	7819      	ldrb	r1, [r3, #0]
 80024c0:	4a0c      	ldr	r2, [pc, #48]	; (80024f4 <parseValue+0x58>)
 80024c2:	693b      	ldr	r3, [r7, #16]
 80024c4:	4413      	add	r3, r2
 80024c6:	460a      	mov	r2, r1
 80024c8:	701a      	strb	r2, [r3, #0]
			j++;
 80024ca:	693b      	ldr	r3, [r7, #16]
 80024cc:	3301      	adds	r3, #1
 80024ce:	613b      	str	r3, [r7, #16]
	for(int i = 1, j = 0; i < strlen(value); i++)
 80024d0:	697b      	ldr	r3, [r7, #20]
 80024d2:	3301      	adds	r3, #1
 80024d4:	617b      	str	r3, [r7, #20]
 80024d6:	6878      	ldr	r0, [r7, #4]
 80024d8:	f7fd fe84 	bl	80001e4 <strlen>
 80024dc:	4602      	mov	r2, r0
 80024de:	697b      	ldr	r3, [r7, #20]
 80024e0:	429a      	cmp	r2, r3
 80024e2:	d8e4      	bhi.n	80024ae <parseValue+0x12>
		}
	}
	tmp = paramValue;
 80024e4:	4b03      	ldr	r3, [pc, #12]	; (80024f4 <parseValue+0x58>)
 80024e6:	60fb      	str	r3, [r7, #12]

	return tmp;
 80024e8:	68fb      	ldr	r3, [r7, #12]
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	3718      	adds	r7, #24
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}
 80024f2:	bf00      	nop
 80024f4:	200007e4 	.word	0x200007e4

080024f8 <json_input>:
//Функция разбора полученной строки
void json_input(char *text)
{
 80024f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024fa:	ed2d 8b04 	vpush	{d8-d9}
 80024fe:	b09f      	sub	sp, #124	; 0x7c
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
	cJSON *json = cJSON_Parse(text);
 8002504:	6878      	ldr	r0, [r7, #4]
 8002506:	f7ff fb13 	bl	8001b30 <cJSON_Parse>
 800250a:	66b8      	str	r0, [r7, #104]	; 0x68

	cJSON *stime = cJSON_GetObjectItem(json, "TIME");
 800250c:	49a4      	ldr	r1, [pc, #656]	; (80027a0 <json_input+0x2a8>)
 800250e:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8002510:	f7ff fcc8 	bl	8001ea4 <cJSON_GetObjectItem>
 8002514:	6678      	str	r0, [r7, #100]	; 0x64
	TIME = stime->valuestring;
 8002516:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002518:	691b      	ldr	r3, [r3, #16]
 800251a:	4aa2      	ldr	r2, [pc, #648]	; (80027a4 <json_input+0x2ac>)
 800251c:	6013      	str	r3, [r2, #0]
	Time_Server = atoi(TIME);
 800251e:	4ba1      	ldr	r3, [pc, #644]	; (80027a4 <json_input+0x2ac>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4618      	mov	r0, r3
 8002524:	f014 fc19 	bl	8016d5a <atoi>
 8002528:	4603      	mov	r3, r0
 800252a:	4a9f      	ldr	r2, [pc, #636]	; (80027a8 <json_input+0x2b0>)
 800252c:	6013      	str	r3, [r2, #0]
	if(Time_Server > Time_Client)
 800252e:	4b9e      	ldr	r3, [pc, #632]	; (80027a8 <json_input+0x2b0>)
 8002530:	681a      	ldr	r2, [r3, #0]
 8002532:	4b9e      	ldr	r3, [pc, #632]	; (80027ac <json_input+0x2b4>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	429a      	cmp	r2, r3
 8002538:	f340 8478 	ble.w	8002e2c <json_input+0x934>
	{
		cJSON *sInstruction = cJSON_GetObjectItem(json, "INSTRUCTION");
 800253c:	499c      	ldr	r1, [pc, #624]	; (80027b0 <json_input+0x2b8>)
 800253e:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8002540:	f7ff fcb0 	bl	8001ea4 <cJSON_GetObjectItem>
 8002544:	6638      	str	r0, [r7, #96]	; 0x60
		INSTRUCTION = sInstruction->valuestring;
 8002546:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002548:	691b      	ldr	r3, [r3, #16]
 800254a:	4a9a      	ldr	r2, [pc, #616]	; (80027b4 <json_input+0x2bc>)
 800254c:	6013      	str	r3, [r2, #0]

		if(strcmp(INSTRUCTION, "SET_PROGRAMM") == 0)
 800254e:	4b99      	ldr	r3, [pc, #612]	; (80027b4 <json_input+0x2bc>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4999      	ldr	r1, [pc, #612]	; (80027b8 <json_input+0x2c0>)
 8002554:	4618      	mov	r0, r3
 8002556:	f7fd fe3b 	bl	80001d0 <strcmp>
 800255a:	4603      	mov	r3, r0
 800255c:	2b00      	cmp	r3, #0
 800255e:	f040 8331 	bne.w	8002bc4 <json_input+0x6cc>
		{
			cJSON *sType = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "TYPE");
 8002562:	4996      	ldr	r1, [pc, #600]	; (80027bc <json_input+0x2c4>)
 8002564:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8002566:	f7ff fc9d 	bl	8001ea4 <cJSON_GetObjectItem>
 800256a:	4603      	mov	r3, r0
 800256c:	4994      	ldr	r1, [pc, #592]	; (80027c0 <json_input+0x2c8>)
 800256e:	4618      	mov	r0, r3
 8002570:	f7ff fc98 	bl	8001ea4 <cJSON_GetObjectItem>
 8002574:	64f8      	str	r0, [r7, #76]	; 0x4c
			TYPE = sType->valuestring;
 8002576:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002578:	691b      	ldr	r3, [r3, #16]
 800257a:	4a92      	ldr	r2, [pc, #584]	; (80027c4 <json_input+0x2cc>)
 800257c:	6013      	str	r3, [r2, #0]

			if(strcmp(TYPE, "SET_DIDO") == 0)	//Включить/выключить цифровой выход если цифровой вход = значение(уровень)
 800257e:	4b91      	ldr	r3, [pc, #580]	; (80027c4 <json_input+0x2cc>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4991      	ldr	r1, [pc, #580]	; (80027c8 <json_input+0x2d0>)
 8002584:	4618      	mov	r0, r3
 8002586:	f7fd fe23 	bl	80001d0 <strcmp>
 800258a:	4603      	mov	r3, r0
 800258c:	2b00      	cmp	r3, #0
 800258e:	f040 80a7 	bne.w	80026e0 <json_input+0x1e8>
			{
				cJSON *s1 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "D_IN");
 8002592:	498a      	ldr	r1, [pc, #552]	; (80027bc <json_input+0x2c4>)
 8002594:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8002596:	f7ff fc85 	bl	8001ea4 <cJSON_GetObjectItem>
 800259a:	4603      	mov	r3, r0
 800259c:	498b      	ldr	r1, [pc, #556]	; (80027cc <json_input+0x2d4>)
 800259e:	4618      	mov	r0, r3
 80025a0:	f7ff fc80 	bl	8001ea4 <cJSON_GetObjectItem>
 80025a4:	61b8      	str	r0, [r7, #24]
				cJSON *s2 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "VAR_IN");
 80025a6:	4985      	ldr	r1, [pc, #532]	; (80027bc <json_input+0x2c4>)
 80025a8:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 80025aa:	f7ff fc7b 	bl	8001ea4 <cJSON_GetObjectItem>
 80025ae:	4603      	mov	r3, r0
 80025b0:	4987      	ldr	r1, [pc, #540]	; (80027d0 <json_input+0x2d8>)
 80025b2:	4618      	mov	r0, r3
 80025b4:	f7ff fc76 	bl	8001ea4 <cJSON_GetObjectItem>
 80025b8:	6178      	str	r0, [r7, #20]
				cJSON *s3 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "D_OUT");
 80025ba:	4980      	ldr	r1, [pc, #512]	; (80027bc <json_input+0x2c4>)
 80025bc:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 80025be:	f7ff fc71 	bl	8001ea4 <cJSON_GetObjectItem>
 80025c2:	4603      	mov	r3, r0
 80025c4:	4983      	ldr	r1, [pc, #524]	; (80027d4 <json_input+0x2dc>)
 80025c6:	4618      	mov	r0, r3
 80025c8:	f7ff fc6c 	bl	8001ea4 <cJSON_GetObjectItem>
 80025cc:	6138      	str	r0, [r7, #16]
				cJSON *s4 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "VAR_OUT");
 80025ce:	497b      	ldr	r1, [pc, #492]	; (80027bc <json_input+0x2c4>)
 80025d0:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 80025d2:	f7ff fc67 	bl	8001ea4 <cJSON_GetObjectItem>
 80025d6:	4603      	mov	r3, r0
 80025d8:	497f      	ldr	r1, [pc, #508]	; (80027d8 <json_input+0x2e0>)
 80025da:	4618      	mov	r0, r3
 80025dc:	f7ff fc62 	bl	8001ea4 <cJSON_GetObjectItem>
 80025e0:	60f8      	str	r0, [r7, #12]

				D_IN = s1->valuestring;
 80025e2:	69bb      	ldr	r3, [r7, #24]
 80025e4:	691b      	ldr	r3, [r3, #16]
 80025e6:	4a7d      	ldr	r2, [pc, #500]	; (80027dc <json_input+0x2e4>)
 80025e8:	6013      	str	r3, [r2, #0]
				VAR_IN = s2->valuestring;
 80025ea:	697b      	ldr	r3, [r7, #20]
 80025ec:	691b      	ldr	r3, [r3, #16]
 80025ee:	4a7c      	ldr	r2, [pc, #496]	; (80027e0 <json_input+0x2e8>)
 80025f0:	6013      	str	r3, [r2, #0]
				D_OUT = s3->valuestring;
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	691b      	ldr	r3, [r3, #16]
 80025f6:	4a7b      	ldr	r2, [pc, #492]	; (80027e4 <json_input+0x2ec>)
 80025f8:	6013      	str	r3, [r2, #0]
				VAR_OUT = s4->valuestring;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	691b      	ldr	r3, [r3, #16]
 80025fe:	4a7a      	ldr	r2, [pc, #488]	; (80027e8 <json_input+0x2f0>)
 8002600:	6013      	str	r3, [r2, #0]

				set_dido(D_IN, (uint8_t)(atoi(VAR_IN)), D_OUT, (uint8_t)(atoi(VAR_OUT)));
 8002602:	4b76      	ldr	r3, [pc, #472]	; (80027dc <json_input+0x2e4>)
 8002604:	681c      	ldr	r4, [r3, #0]
 8002606:	4b76      	ldr	r3, [pc, #472]	; (80027e0 <json_input+0x2e8>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4618      	mov	r0, r3
 800260c:	f014 fba5 	bl	8016d5a <atoi>
 8002610:	4603      	mov	r3, r0
 8002612:	b2dd      	uxtb	r5, r3
 8002614:	4b73      	ldr	r3, [pc, #460]	; (80027e4 <json_input+0x2ec>)
 8002616:	681e      	ldr	r6, [r3, #0]
 8002618:	4b73      	ldr	r3, [pc, #460]	; (80027e8 <json_input+0x2f0>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4618      	mov	r0, r3
 800261e:	f014 fb9c 	bl	8016d5a <atoi>
 8002622:	4603      	mov	r3, r0
 8002624:	b2db      	uxtb	r3, r3
 8002626:	4632      	mov	r2, r6
 8002628:	4629      	mov	r1, r5
 800262a:	4620      	mov	r0, r4
 800262c:	f000 fd6a 	bl	8003104 <set_dido>

				//---------------------------------QA---------------------------------
				SEND_str("\n");
 8002630:	486e      	ldr	r0, [pc, #440]	; (80027ec <json_input+0x2f4>)
 8002632:	f7ff fc6d 	bl	8001f10 <SEND_str>
				SEND_str(TYPE);
 8002636:	4b63      	ldr	r3, [pc, #396]	; (80027c4 <json_input+0x2cc>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4618      	mov	r0, r3
 800263c:	f7ff fc68 	bl	8001f10 <SEND_str>
				SEND_str("\n");
 8002640:	486a      	ldr	r0, [pc, #424]	; (80027ec <json_input+0x2f4>)
 8002642:	f7ff fc65 	bl	8001f10 <SEND_str>
				SEND_str(D_IN);
 8002646:	4b65      	ldr	r3, [pc, #404]	; (80027dc <json_input+0x2e4>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4618      	mov	r0, r3
 800264c:	f7ff fc60 	bl	8001f10 <SEND_str>
				SEND_str(": ");
 8002650:	4867      	ldr	r0, [pc, #412]	; (80027f0 <json_input+0x2f8>)
 8002652:	f7ff fc5d 	bl	8001f10 <SEND_str>
				USART_Tx(D_IN[4]);
 8002656:	4b61      	ldr	r3, [pc, #388]	; (80027dc <json_input+0x2e4>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	3304      	adds	r3, #4
 800265c:	781b      	ldrb	r3, [r3, #0]
 800265e:	4618      	mov	r0, r3
 8002660:	f7ff fc3e 	bl	8001ee0 <USART_Tx>
				SEND_str("\n");
 8002664:	4861      	ldr	r0, [pc, #388]	; (80027ec <json_input+0x2f4>)
 8002666:	f7ff fc53 	bl	8001f10 <SEND_str>
				SEND_str(VAR_IN);
 800266a:	4b5d      	ldr	r3, [pc, #372]	; (80027e0 <json_input+0x2e8>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4618      	mov	r0, r3
 8002670:	f7ff fc4e 	bl	8001f10 <SEND_str>
				SEND_str("\n");
 8002674:	485d      	ldr	r0, [pc, #372]	; (80027ec <json_input+0x2f4>)
 8002676:	f7ff fc4b 	bl	8001f10 <SEND_str>
				SEND_str(D_OUT);
 800267a:	4b5a      	ldr	r3, [pc, #360]	; (80027e4 <json_input+0x2ec>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4618      	mov	r0, r3
 8002680:	f7ff fc46 	bl	8001f10 <SEND_str>
				SEND_str(": ");
 8002684:	485a      	ldr	r0, [pc, #360]	; (80027f0 <json_input+0x2f8>)
 8002686:	f7ff fc43 	bl	8001f10 <SEND_str>
				USART_Tx(D_OUT[5]);
 800268a:	4b56      	ldr	r3, [pc, #344]	; (80027e4 <json_input+0x2ec>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	3305      	adds	r3, #5
 8002690:	781b      	ldrb	r3, [r3, #0]
 8002692:	4618      	mov	r0, r3
 8002694:	f7ff fc24 	bl	8001ee0 <USART_Tx>
				SEND_str("\n");
 8002698:	4854      	ldr	r0, [pc, #336]	; (80027ec <json_input+0x2f4>)
 800269a:	f7ff fc39 	bl	8001f10 <SEND_str>
				SEND_str(VAR_OUT);
 800269e:	4b52      	ldr	r3, [pc, #328]	; (80027e8 <json_input+0x2f0>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4618      	mov	r0, r3
 80026a4:	f7ff fc34 	bl	8001f10 <SEND_str>
				SEND_str("\n");
 80026a8:	4850      	ldr	r0, [pc, #320]	; (80027ec <json_input+0x2f4>)
 80026aa:	f7ff fc31 	bl	8001f10 <SEND_str>
				//------------------------------------------------------------------

				cJSON_Delete(json);
 80026ae:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 80026b0:	f7fe fe14 	bl	80012dc <cJSON_Delete>
				free(stime);
 80026b4:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80026b6:	f014 fb81 	bl	8016dbc <free>
				free(sInstruction);
 80026ba:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80026bc:	f014 fb7e 	bl	8016dbc <free>
				free(sType);
 80026c0:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80026c2:	f014 fb7b 	bl	8016dbc <free>
				free(s1);
 80026c6:	69b8      	ldr	r0, [r7, #24]
 80026c8:	f014 fb78 	bl	8016dbc <free>
				free(s2);
 80026cc:	6978      	ldr	r0, [r7, #20]
 80026ce:	f014 fb75 	bl	8016dbc <free>
				free(s3);
 80026d2:	6938      	ldr	r0, [r7, #16]
 80026d4:	f014 fb72 	bl	8016dbc <free>
				free(s4);
 80026d8:	68f8      	ldr	r0, [r7, #12]
 80026da:	f014 fb6f 	bl	8016dbc <free>
	else
	{
		cJSON_Delete(json);
		free(stime);
	}
}
 80026de:	e3ab      	b.n	8002e38 <json_input+0x940>
			else if(strcmp(TYPE, "SET_VAIDO") == 0)	//Включить/выключить один цифровой выход если аналоговый вход в интервале значений
 80026e0:	4b38      	ldr	r3, [pc, #224]	; (80027c4 <json_input+0x2cc>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4943      	ldr	r1, [pc, #268]	; (80027f4 <json_input+0x2fc>)
 80026e6:	4618      	mov	r0, r3
 80026e8:	f7fd fd72 	bl	80001d0 <strcmp>
 80026ec:	4603      	mov	r3, r0
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	f040 813a 	bne.w	8002968 <json_input+0x470>
				cJSON *s1 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "A_IN");
 80026f4:	4931      	ldr	r1, [pc, #196]	; (80027bc <json_input+0x2c4>)
 80026f6:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 80026f8:	f7ff fbd4 	bl	8001ea4 <cJSON_GetObjectItem>
 80026fc:	4603      	mov	r3, r0
 80026fe:	493e      	ldr	r1, [pc, #248]	; (80027f8 <json_input+0x300>)
 8002700:	4618      	mov	r0, r3
 8002702:	f7ff fbcf 	bl	8001ea4 <cJSON_GetObjectItem>
 8002706:	62f8      	str	r0, [r7, #44]	; 0x2c
				cJSON *s2 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "RANGE_LOW");
 8002708:	492c      	ldr	r1, [pc, #176]	; (80027bc <json_input+0x2c4>)
 800270a:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800270c:	f7ff fbca 	bl	8001ea4 <cJSON_GetObjectItem>
 8002710:	4603      	mov	r3, r0
 8002712:	493a      	ldr	r1, [pc, #232]	; (80027fc <json_input+0x304>)
 8002714:	4618      	mov	r0, r3
 8002716:	f7ff fbc5 	bl	8001ea4 <cJSON_GetObjectItem>
 800271a:	62b8      	str	r0, [r7, #40]	; 0x28
				cJSON *s3 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "RANGE_HIGH");
 800271c:	4927      	ldr	r1, [pc, #156]	; (80027bc <json_input+0x2c4>)
 800271e:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8002720:	f7ff fbc0 	bl	8001ea4 <cJSON_GetObjectItem>
 8002724:	4603      	mov	r3, r0
 8002726:	4936      	ldr	r1, [pc, #216]	; (8002800 <json_input+0x308>)
 8002728:	4618      	mov	r0, r3
 800272a:	f7ff fbbb 	bl	8001ea4 <cJSON_GetObjectItem>
 800272e:	6278      	str	r0, [r7, #36]	; 0x24
				cJSON *s4 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "D_OUT");
 8002730:	4922      	ldr	r1, [pc, #136]	; (80027bc <json_input+0x2c4>)
 8002732:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8002734:	f7ff fbb6 	bl	8001ea4 <cJSON_GetObjectItem>
 8002738:	4603      	mov	r3, r0
 800273a:	4926      	ldr	r1, [pc, #152]	; (80027d4 <json_input+0x2dc>)
 800273c:	4618      	mov	r0, r3
 800273e:	f7ff fbb1 	bl	8001ea4 <cJSON_GetObjectItem>
 8002742:	6238      	str	r0, [r7, #32]
				cJSON *s5 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "VAR_OUT");
 8002744:	491d      	ldr	r1, [pc, #116]	; (80027bc <json_input+0x2c4>)
 8002746:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8002748:	f7ff fbac 	bl	8001ea4 <cJSON_GetObjectItem>
 800274c:	4603      	mov	r3, r0
 800274e:	4922      	ldr	r1, [pc, #136]	; (80027d8 <json_input+0x2e0>)
 8002750:	4618      	mov	r0, r3
 8002752:	f7ff fba7 	bl	8001ea4 <cJSON_GetObjectItem>
 8002756:	61f8      	str	r0, [r7, #28]
				A_IN = s1->valuestring;
 8002758:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800275a:	691b      	ldr	r3, [r3, #16]
 800275c:	4a29      	ldr	r2, [pc, #164]	; (8002804 <json_input+0x30c>)
 800275e:	6013      	str	r3, [r2, #0]
				RANGE_LOW = s2->valuestring;
 8002760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002762:	691b      	ldr	r3, [r3, #16]
 8002764:	4a28      	ldr	r2, [pc, #160]	; (8002808 <json_input+0x310>)
 8002766:	6013      	str	r3, [r2, #0]
				RANGE_HIGH = s3->valuestring;
 8002768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800276a:	691b      	ldr	r3, [r3, #16]
 800276c:	4a27      	ldr	r2, [pc, #156]	; (800280c <json_input+0x314>)
 800276e:	6013      	str	r3, [r2, #0]
				D_OUT = s4->valuestring;
 8002770:	6a3b      	ldr	r3, [r7, #32]
 8002772:	691b      	ldr	r3, [r3, #16]
 8002774:	4a1b      	ldr	r2, [pc, #108]	; (80027e4 <json_input+0x2ec>)
 8002776:	6013      	str	r3, [r2, #0]
				VAR_OUT = s5->valuestring;
 8002778:	69fb      	ldr	r3, [r7, #28]
 800277a:	691b      	ldr	r3, [r3, #16]
 800277c:	4a1a      	ldr	r2, [pc, #104]	; (80027e8 <json_input+0x2f0>)
 800277e:	6013      	str	r3, [r2, #0]
				if(strcmp(A_IN, "VHOD1") == 0)
 8002780:	4b20      	ldr	r3, [pc, #128]	; (8002804 <json_input+0x30c>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4922      	ldr	r1, [pc, #136]	; (8002810 <json_input+0x318>)
 8002786:	4618      	mov	r0, r3
 8002788:	f7fd fd22 	bl	80001d0 <strcmp>
 800278c:	4603      	mov	r3, r0
 800278e:	2b00      	cmp	r3, #0
 8002790:	d142      	bne.n	8002818 <json_input+0x320>
					SelectChannelOne;
 8002792:	2201      	movs	r2, #1
 8002794:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002798:	481e      	ldr	r0, [pc, #120]	; (8002814 <json_input+0x31c>)
 800279a:	f005 fa61 	bl	8007c60 <HAL_GPIO_WritePin>
 800279e:	e06a      	b.n	8002876 <json_input+0x37e>
 80027a0:	0801c954 	.word	0x0801c954
 80027a4:	200007bc 	.word	0x200007bc
 80027a8:	200002f0 	.word	0x200002f0
 80027ac:	200002f4 	.word	0x200002f4
 80027b0:	0801c95c 	.word	0x0801c95c
 80027b4:	2000080c 	.word	0x2000080c
 80027b8:	0801c968 	.word	0x0801c968
 80027bc:	0801c978 	.word	0x0801c978
 80027c0:	0801c980 	.word	0x0801c980
 80027c4:	200007b0 	.word	0x200007b0
 80027c8:	0801c988 	.word	0x0801c988
 80027cc:	0801c994 	.word	0x0801c994
 80027d0:	0801c99c 	.word	0x0801c99c
 80027d4:	0801c9a4 	.word	0x0801c9a4
 80027d8:	0801c9ac 	.word	0x0801c9ac
 80027dc:	20000800 	.word	0x20000800
 80027e0:	200007c4 	.word	0x200007c4
 80027e4:	200007f0 	.word	0x200007f0
 80027e8:	200007d0 	.word	0x200007d0
 80027ec:	0801c9b4 	.word	0x0801c9b4
 80027f0:	0801c9b8 	.word	0x0801c9b8
 80027f4:	0801c9bc 	.word	0x0801c9bc
 80027f8:	0801c9c8 	.word	0x0801c9c8
 80027fc:	0801c9d0 	.word	0x0801c9d0
 8002800:	0801c9dc 	.word	0x0801c9dc
 8002804:	20000808 	.word	0x20000808
 8002808:	200007d4 	.word	0x200007d4
 800280c:	200007f4 	.word	0x200007f4
 8002810:	0801c9e8 	.word	0x0801c9e8
 8002814:	40021000 	.word	0x40021000
				else if(strcmp(A_IN, "VHOD2") == 0)
 8002818:	4b83      	ldr	r3, [pc, #524]	; (8002a28 <json_input+0x530>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4983      	ldr	r1, [pc, #524]	; (8002a2c <json_input+0x534>)
 800281e:	4618      	mov	r0, r3
 8002820:	f7fd fcd6 	bl	80001d0 <strcmp>
 8002824:	4603      	mov	r3, r0
 8002826:	2b00      	cmp	r3, #0
 8002828:	d106      	bne.n	8002838 <json_input+0x340>
					SelectChannelTwo;
 800282a:	2201      	movs	r2, #1
 800282c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002830:	487f      	ldr	r0, [pc, #508]	; (8002a30 <json_input+0x538>)
 8002832:	f005 fa15 	bl	8007c60 <HAL_GPIO_WritePin>
 8002836:	e01e      	b.n	8002876 <json_input+0x37e>
				else if(strcmp(A_IN, "VHOD3") == 0)
 8002838:	4b7b      	ldr	r3, [pc, #492]	; (8002a28 <json_input+0x530>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	497d      	ldr	r1, [pc, #500]	; (8002a34 <json_input+0x53c>)
 800283e:	4618      	mov	r0, r3
 8002840:	f7fd fcc6 	bl	80001d0 <strcmp>
 8002844:	4603      	mov	r3, r0
 8002846:	2b00      	cmp	r3, #0
 8002848:	d106      	bne.n	8002858 <json_input+0x360>
					SelectChannelThree;
 800284a:	2201      	movs	r2, #1
 800284c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002850:	4877      	ldr	r0, [pc, #476]	; (8002a30 <json_input+0x538>)
 8002852:	f005 fa05 	bl	8007c60 <HAL_GPIO_WritePin>
 8002856:	e00e      	b.n	8002876 <json_input+0x37e>
				else if(strcmp(A_IN, "VHOD4") == 0)
 8002858:	4b73      	ldr	r3, [pc, #460]	; (8002a28 <json_input+0x530>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4976      	ldr	r1, [pc, #472]	; (8002a38 <json_input+0x540>)
 800285e:	4618      	mov	r0, r3
 8002860:	f7fd fcb6 	bl	80001d0 <strcmp>
 8002864:	4603      	mov	r3, r0
 8002866:	2b00      	cmp	r3, #0
 8002868:	d105      	bne.n	8002876 <json_input+0x37e>
					SelectChannelFour;
 800286a:	2201      	movs	r2, #1
 800286c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002870:	486f      	ldr	r0, [pc, #444]	; (8002a30 <json_input+0x538>)
 8002872:	f005 f9f5 	bl	8007c60 <HAL_GPIO_WritePin>
				set_vaido(A_IN, atof(RANGE_LOW), atof(RANGE_HIGH), D_OUT, (uint8_t)(atoi(VAR_OUT)));
 8002876:	4b6c      	ldr	r3, [pc, #432]	; (8002a28 <json_input+0x530>)
 8002878:	681c      	ldr	r4, [r3, #0]
 800287a:	4b70      	ldr	r3, [pc, #448]	; (8002a3c <json_input+0x544>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4618      	mov	r0, r3
 8002880:	f014 fa68 	bl	8016d54 <atof>
 8002884:	eeb0 8a40 	vmov.f32	s16, s0
 8002888:	eef0 8a60 	vmov.f32	s17, s1
 800288c:	4b6c      	ldr	r3, [pc, #432]	; (8002a40 <json_input+0x548>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4618      	mov	r0, r3
 8002892:	f014 fa5f 	bl	8016d54 <atof>
 8002896:	eeb0 9a40 	vmov.f32	s18, s0
 800289a:	eef0 9a60 	vmov.f32	s19, s1
 800289e:	4b69      	ldr	r3, [pc, #420]	; (8002a44 <json_input+0x54c>)
 80028a0:	681d      	ldr	r5, [r3, #0]
 80028a2:	4b69      	ldr	r3, [pc, #420]	; (8002a48 <json_input+0x550>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4618      	mov	r0, r3
 80028a8:	f014 fa57 	bl	8016d5a <atoi>
 80028ac:	4603      	mov	r3, r0
 80028ae:	b2db      	uxtb	r3, r3
 80028b0:	461a      	mov	r2, r3
 80028b2:	4629      	mov	r1, r5
 80028b4:	eeb0 1a49 	vmov.f32	s2, s18
 80028b8:	eef0 1a69 	vmov.f32	s3, s19
 80028bc:	eeb0 0a48 	vmov.f32	s0, s16
 80028c0:	eef0 0a68 	vmov.f32	s1, s17
 80028c4:	4620      	mov	r0, r4
 80028c6:	f000 fdef 	bl	80034a8 <set_vaido>
				SEND_str("\n");
 80028ca:	4860      	ldr	r0, [pc, #384]	; (8002a4c <json_input+0x554>)
 80028cc:	f7ff fb20 	bl	8001f10 <SEND_str>
				SEND_str(TYPE);
 80028d0:	4b5f      	ldr	r3, [pc, #380]	; (8002a50 <json_input+0x558>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4618      	mov	r0, r3
 80028d6:	f7ff fb1b 	bl	8001f10 <SEND_str>
				SEND_str("\n");
 80028da:	485c      	ldr	r0, [pc, #368]	; (8002a4c <json_input+0x554>)
 80028dc:	f7ff fb18 	bl	8001f10 <SEND_str>
				SEND_str(A_IN);
 80028e0:	4b51      	ldr	r3, [pc, #324]	; (8002a28 <json_input+0x530>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4618      	mov	r0, r3
 80028e6:	f7ff fb13 	bl	8001f10 <SEND_str>
				SEND_str("\n");
 80028ea:	4858      	ldr	r0, [pc, #352]	; (8002a4c <json_input+0x554>)
 80028ec:	f7ff fb10 	bl	8001f10 <SEND_str>
				SEND_str(RANGE_LOW);
 80028f0:	4b52      	ldr	r3, [pc, #328]	; (8002a3c <json_input+0x544>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4618      	mov	r0, r3
 80028f6:	f7ff fb0b 	bl	8001f10 <SEND_str>
				SEND_str("\n");
 80028fa:	4854      	ldr	r0, [pc, #336]	; (8002a4c <json_input+0x554>)
 80028fc:	f7ff fb08 	bl	8001f10 <SEND_str>
				SEND_str(RANGE_HIGH);
 8002900:	4b4f      	ldr	r3, [pc, #316]	; (8002a40 <json_input+0x548>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4618      	mov	r0, r3
 8002906:	f7ff fb03 	bl	8001f10 <SEND_str>
				SEND_str("\n");
 800290a:	4850      	ldr	r0, [pc, #320]	; (8002a4c <json_input+0x554>)
 800290c:	f7ff fb00 	bl	8001f10 <SEND_str>
				SEND_str(D_OUT);
 8002910:	4b4c      	ldr	r3, [pc, #304]	; (8002a44 <json_input+0x54c>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4618      	mov	r0, r3
 8002916:	f7ff fafb 	bl	8001f10 <SEND_str>
				SEND_str("\n");
 800291a:	484c      	ldr	r0, [pc, #304]	; (8002a4c <json_input+0x554>)
 800291c:	f7ff faf8 	bl	8001f10 <SEND_str>
				SEND_str(VAR_OUT);
 8002920:	4b49      	ldr	r3, [pc, #292]	; (8002a48 <json_input+0x550>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4618      	mov	r0, r3
 8002926:	f7ff faf3 	bl	8001f10 <SEND_str>
				SEND_str("\n");
 800292a:	4848      	ldr	r0, [pc, #288]	; (8002a4c <json_input+0x554>)
 800292c:	f7ff faf0 	bl	8001f10 <SEND_str>
				cJSON_Delete(json);
 8002930:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8002932:	f7fe fcd3 	bl	80012dc <cJSON_Delete>
				free(stime);
 8002936:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8002938:	f014 fa40 	bl	8016dbc <free>
				free(sInstruction);
 800293c:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800293e:	f014 fa3d 	bl	8016dbc <free>
				free(sType);
 8002942:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8002944:	f014 fa3a 	bl	8016dbc <free>
				free(s1);
 8002948:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800294a:	f014 fa37 	bl	8016dbc <free>
				free(s2);
 800294e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002950:	f014 fa34 	bl	8016dbc <free>
				free(s3);
 8002954:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002956:	f014 fa31 	bl	8016dbc <free>
				free(s4);
 800295a:	6a38      	ldr	r0, [r7, #32]
 800295c:	f014 fa2e 	bl	8016dbc <free>
				free(s5);
 8002960:	69f8      	ldr	r0, [r7, #28]
 8002962:	f014 fa2b 	bl	8016dbc <free>
}
 8002966:	e267      	b.n	8002e38 <json_input+0x940>
			else if(strcmp(TYPE, "SET_PWM") == 0)	//Выставить коэффициент заполнения на ШИМ
 8002968:	4b39      	ldr	r3, [pc, #228]	; (8002a50 <json_input+0x558>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4939      	ldr	r1, [pc, #228]	; (8002a54 <json_input+0x55c>)
 800296e:	4618      	mov	r0, r3
 8002970:	f7fd fc2e 	bl	80001d0 <strcmp>
 8002974:	4603      	mov	r3, r0
 8002976:	2b00      	cmp	r3, #0
 8002978:	d178      	bne.n	8002a6c <json_input+0x574>
				cJSON *s1 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "PWM_OUT");
 800297a:	4937      	ldr	r1, [pc, #220]	; (8002a58 <json_input+0x560>)
 800297c:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800297e:	f7ff fa91 	bl	8001ea4 <cJSON_GetObjectItem>
 8002982:	4603      	mov	r3, r0
 8002984:	4935      	ldr	r1, [pc, #212]	; (8002a5c <json_input+0x564>)
 8002986:	4618      	mov	r0, r3
 8002988:	f7ff fa8c 	bl	8001ea4 <cJSON_GetObjectItem>
 800298c:	6378      	str	r0, [r7, #52]	; 0x34
				cJSON *s2 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "D_CYCLE");
 800298e:	4932      	ldr	r1, [pc, #200]	; (8002a58 <json_input+0x560>)
 8002990:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8002992:	f7ff fa87 	bl	8001ea4 <cJSON_GetObjectItem>
 8002996:	4603      	mov	r3, r0
 8002998:	4931      	ldr	r1, [pc, #196]	; (8002a60 <json_input+0x568>)
 800299a:	4618      	mov	r0, r3
 800299c:	f7ff fa82 	bl	8001ea4 <cJSON_GetObjectItem>
 80029a0:	6338      	str	r0, [r7, #48]	; 0x30
				PWM_OUT = s1->valuestring;
 80029a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029a4:	691b      	ldr	r3, [r3, #16]
 80029a6:	4a2f      	ldr	r2, [pc, #188]	; (8002a64 <json_input+0x56c>)
 80029a8:	6013      	str	r3, [r2, #0]
				D_CYCLE = s2->valuestring;
 80029aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029ac:	691b      	ldr	r3, [r3, #16]
 80029ae:	4a2e      	ldr	r2, [pc, #184]	; (8002a68 <json_input+0x570>)
 80029b0:	6013      	str	r3, [r2, #0]
				set_pwm(PWM_OUT, (uint32_t)(atoi(D_CYCLE)));
 80029b2:	4b2c      	ldr	r3, [pc, #176]	; (8002a64 <json_input+0x56c>)
 80029b4:	681c      	ldr	r4, [r3, #0]
 80029b6:	4b2c      	ldr	r3, [pc, #176]	; (8002a68 <json_input+0x570>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4618      	mov	r0, r3
 80029bc:	f014 f9cd 	bl	8016d5a <atoi>
 80029c0:	4603      	mov	r3, r0
 80029c2:	4619      	mov	r1, r3
 80029c4:	4620      	mov	r0, r4
 80029c6:	f000 feb9 	bl	800373c <set_pwm>
				SEND_str("\n");
 80029ca:	4820      	ldr	r0, [pc, #128]	; (8002a4c <json_input+0x554>)
 80029cc:	f7ff faa0 	bl	8001f10 <SEND_str>
				SEND_str(TYPE);
 80029d0:	4b1f      	ldr	r3, [pc, #124]	; (8002a50 <json_input+0x558>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4618      	mov	r0, r3
 80029d6:	f7ff fa9b 	bl	8001f10 <SEND_str>
				SEND_str("\n");
 80029da:	481c      	ldr	r0, [pc, #112]	; (8002a4c <json_input+0x554>)
 80029dc:	f7ff fa98 	bl	8001f10 <SEND_str>
				SEND_str(PWM_OUT);
 80029e0:	4b20      	ldr	r3, [pc, #128]	; (8002a64 <json_input+0x56c>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4618      	mov	r0, r3
 80029e6:	f7ff fa93 	bl	8001f10 <SEND_str>
				SEND_str("\n");
 80029ea:	4818      	ldr	r0, [pc, #96]	; (8002a4c <json_input+0x554>)
 80029ec:	f7ff fa90 	bl	8001f10 <SEND_str>
				SEND_str(D_CYCLE);
 80029f0:	4b1d      	ldr	r3, [pc, #116]	; (8002a68 <json_input+0x570>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4618      	mov	r0, r3
 80029f6:	f7ff fa8b 	bl	8001f10 <SEND_str>
				SEND_str("\n");
 80029fa:	4814      	ldr	r0, [pc, #80]	; (8002a4c <json_input+0x554>)
 80029fc:	f7ff fa88 	bl	8001f10 <SEND_str>
				cJSON_Delete(json);
 8002a00:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8002a02:	f7fe fc6b 	bl	80012dc <cJSON_Delete>
				free(stime);
 8002a06:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8002a08:	f014 f9d8 	bl	8016dbc <free>
				free(sInstruction);
 8002a0c:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8002a0e:	f014 f9d5 	bl	8016dbc <free>
				free(sType);
 8002a12:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8002a14:	f014 f9d2 	bl	8016dbc <free>
				free(s1);
 8002a18:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002a1a:	f014 f9cf 	bl	8016dbc <free>
				free(s2);
 8002a1e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002a20:	f014 f9cc 	bl	8016dbc <free>
}
 8002a24:	e208      	b.n	8002e38 <json_input+0x940>
 8002a26:	bf00      	nop
 8002a28:	20000808 	.word	0x20000808
 8002a2c:	0801c9f0 	.word	0x0801c9f0
 8002a30:	40021000 	.word	0x40021000
 8002a34:	0801c9f8 	.word	0x0801c9f8
 8002a38:	0801ca00 	.word	0x0801ca00
 8002a3c:	200007d4 	.word	0x200007d4
 8002a40:	200007f4 	.word	0x200007f4
 8002a44:	200007f0 	.word	0x200007f0
 8002a48:	200007d0 	.word	0x200007d0
 8002a4c:	0801c9b4 	.word	0x0801c9b4
 8002a50:	200007b0 	.word	0x200007b0
 8002a54:	0801ca08 	.word	0x0801ca08
 8002a58:	0801c978 	.word	0x0801c978
 8002a5c:	0801ca10 	.word	0x0801ca10
 8002a60:	0801ca18 	.word	0x0801ca18
 8002a64:	200007b8 	.word	0x200007b8
 8002a68:	200007f8 	.word	0x200007f8
			else if(strcmp(TYPE, "SET_AIAO") == 0)	//Установить значение в аналоговый выход если аналоговый вход = значение
 8002a6c:	4b9a      	ldr	r3, [pc, #616]	; (8002cd8 <json_input+0x7e0>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	499a      	ldr	r1, [pc, #616]	; (8002cdc <json_input+0x7e4>)
 8002a72:	4618      	mov	r0, r3
 8002a74:	f7fd fbac 	bl	80001d0 <strcmp>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	f040 8095 	bne.w	8002baa <json_input+0x6b2>
				cJSON *s1 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "A_IN");
 8002a80:	4997      	ldr	r1, [pc, #604]	; (8002ce0 <json_input+0x7e8>)
 8002a82:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8002a84:	f7ff fa0e 	bl	8001ea4 <cJSON_GetObjectItem>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	4996      	ldr	r1, [pc, #600]	; (8002ce4 <json_input+0x7ec>)
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f7ff fa09 	bl	8001ea4 <cJSON_GetObjectItem>
 8002a92:	64b8      	str	r0, [r7, #72]	; 0x48
				cJSON *s2 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "RANGE_LOW");
 8002a94:	4992      	ldr	r1, [pc, #584]	; (8002ce0 <json_input+0x7e8>)
 8002a96:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8002a98:	f7ff fa04 	bl	8001ea4 <cJSON_GetObjectItem>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	4992      	ldr	r1, [pc, #584]	; (8002ce8 <json_input+0x7f0>)
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f7ff f9ff 	bl	8001ea4 <cJSON_GetObjectItem>
 8002aa6:	6478      	str	r0, [r7, #68]	; 0x44
				cJSON *s3 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "RANGE_HIGH");
 8002aa8:	498d      	ldr	r1, [pc, #564]	; (8002ce0 <json_input+0x7e8>)
 8002aaa:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8002aac:	f7ff f9fa 	bl	8001ea4 <cJSON_GetObjectItem>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	498e      	ldr	r1, [pc, #568]	; (8002cec <json_input+0x7f4>)
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f7ff f9f5 	bl	8001ea4 <cJSON_GetObjectItem>
 8002aba:	6438      	str	r0, [r7, #64]	; 0x40
				cJSON *s4 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "A_OUT");
 8002abc:	4988      	ldr	r1, [pc, #544]	; (8002ce0 <json_input+0x7e8>)
 8002abe:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8002ac0:	f7ff f9f0 	bl	8001ea4 <cJSON_GetObjectItem>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	498a      	ldr	r1, [pc, #552]	; (8002cf0 <json_input+0x7f8>)
 8002ac8:	4618      	mov	r0, r3
 8002aca:	f7ff f9eb 	bl	8001ea4 <cJSON_GetObjectItem>
 8002ace:	63f8      	str	r0, [r7, #60]	; 0x3c
				cJSON *s5 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "VAR_OUT");
 8002ad0:	4983      	ldr	r1, [pc, #524]	; (8002ce0 <json_input+0x7e8>)
 8002ad2:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8002ad4:	f7ff f9e6 	bl	8001ea4 <cJSON_GetObjectItem>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	4986      	ldr	r1, [pc, #536]	; (8002cf4 <json_input+0x7fc>)
 8002adc:	4618      	mov	r0, r3
 8002ade:	f7ff f9e1 	bl	8001ea4 <cJSON_GetObjectItem>
 8002ae2:	63b8      	str	r0, [r7, #56]	; 0x38
				A_IN = s1->valuestring;
 8002ae4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ae6:	691b      	ldr	r3, [r3, #16]
 8002ae8:	4a83      	ldr	r2, [pc, #524]	; (8002cf8 <json_input+0x800>)
 8002aea:	6013      	str	r3, [r2, #0]
				RANGE_LOW = s2->valuestring;
 8002aec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002aee:	691b      	ldr	r3, [r3, #16]
 8002af0:	4a82      	ldr	r2, [pc, #520]	; (8002cfc <json_input+0x804>)
 8002af2:	6013      	str	r3, [r2, #0]
				RANGE_HIGH = s3->valuestring;
 8002af4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002af6:	691b      	ldr	r3, [r3, #16]
 8002af8:	4a81      	ldr	r2, [pc, #516]	; (8002d00 <json_input+0x808>)
 8002afa:	6013      	str	r3, [r2, #0]
				A_OUT = s4->valuestring;
 8002afc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002afe:	691b      	ldr	r3, [r3, #16]
 8002b00:	4a80      	ldr	r2, [pc, #512]	; (8002d04 <json_input+0x80c>)
 8002b02:	6013      	str	r3, [r2, #0]
				VAR_OUT = s5->valuestring;
 8002b04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b06:	691b      	ldr	r3, [r3, #16]
 8002b08:	4a7f      	ldr	r2, [pc, #508]	; (8002d08 <json_input+0x810>)
 8002b0a:	6013      	str	r3, [r2, #0]
				SEND_str("\n");
 8002b0c:	487f      	ldr	r0, [pc, #508]	; (8002d0c <json_input+0x814>)
 8002b0e:	f7ff f9ff 	bl	8001f10 <SEND_str>
				SEND_str(TYPE);
 8002b12:	4b71      	ldr	r3, [pc, #452]	; (8002cd8 <json_input+0x7e0>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4618      	mov	r0, r3
 8002b18:	f7ff f9fa 	bl	8001f10 <SEND_str>
				SEND_str("\n");
 8002b1c:	487b      	ldr	r0, [pc, #492]	; (8002d0c <json_input+0x814>)
 8002b1e:	f7ff f9f7 	bl	8001f10 <SEND_str>
				SEND_str(A_IN);
 8002b22:	4b75      	ldr	r3, [pc, #468]	; (8002cf8 <json_input+0x800>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4618      	mov	r0, r3
 8002b28:	f7ff f9f2 	bl	8001f10 <SEND_str>
				SEND_str("\n");
 8002b2c:	4877      	ldr	r0, [pc, #476]	; (8002d0c <json_input+0x814>)
 8002b2e:	f7ff f9ef 	bl	8001f10 <SEND_str>
				SEND_str(RANGE_LOW);
 8002b32:	4b72      	ldr	r3, [pc, #456]	; (8002cfc <json_input+0x804>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4618      	mov	r0, r3
 8002b38:	f7ff f9ea 	bl	8001f10 <SEND_str>
				SEND_str("\n");
 8002b3c:	4873      	ldr	r0, [pc, #460]	; (8002d0c <json_input+0x814>)
 8002b3e:	f7ff f9e7 	bl	8001f10 <SEND_str>
				SEND_str(RANGE_HIGH);
 8002b42:	4b6f      	ldr	r3, [pc, #444]	; (8002d00 <json_input+0x808>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4618      	mov	r0, r3
 8002b48:	f7ff f9e2 	bl	8001f10 <SEND_str>
				SEND_str("\n");
 8002b4c:	486f      	ldr	r0, [pc, #444]	; (8002d0c <json_input+0x814>)
 8002b4e:	f7ff f9df 	bl	8001f10 <SEND_str>
				SEND_str(A_OUT);
 8002b52:	4b6c      	ldr	r3, [pc, #432]	; (8002d04 <json_input+0x80c>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4618      	mov	r0, r3
 8002b58:	f7ff f9da 	bl	8001f10 <SEND_str>
				SEND_str("\n");
 8002b5c:	486b      	ldr	r0, [pc, #428]	; (8002d0c <json_input+0x814>)
 8002b5e:	f7ff f9d7 	bl	8001f10 <SEND_str>
				SEND_str(VAR_OUT);
 8002b62:	4b69      	ldr	r3, [pc, #420]	; (8002d08 <json_input+0x810>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4618      	mov	r0, r3
 8002b68:	f7ff f9d2 	bl	8001f10 <SEND_str>
				SEND_str("\n");
 8002b6c:	4867      	ldr	r0, [pc, #412]	; (8002d0c <json_input+0x814>)
 8002b6e:	f7ff f9cf 	bl	8001f10 <SEND_str>
				cJSON_Delete(json);
 8002b72:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8002b74:	f7fe fbb2 	bl	80012dc <cJSON_Delete>
				free(stime);
 8002b78:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8002b7a:	f014 f91f 	bl	8016dbc <free>
				free(sInstruction);
 8002b7e:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8002b80:	f014 f91c 	bl	8016dbc <free>
				free(sType);
 8002b84:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8002b86:	f014 f919 	bl	8016dbc <free>
				free(s1);
 8002b8a:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8002b8c:	f014 f916 	bl	8016dbc <free>
				free(s2);
 8002b90:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8002b92:	f014 f913 	bl	8016dbc <free>
				free(s3);
 8002b96:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8002b98:	f014 f910 	bl	8016dbc <free>
				free(s4);
 8002b9c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002b9e:	f014 f90d 	bl	8016dbc <free>
				free(s5);
 8002ba2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002ba4:	f014 f90a 	bl	8016dbc <free>
}
 8002ba8:	e146      	b.n	8002e38 <json_input+0x940>
				cJSON_Delete(json);
 8002baa:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8002bac:	f7fe fb96 	bl	80012dc <cJSON_Delete>
				free(stime);
 8002bb0:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8002bb2:	f014 f903 	bl	8016dbc <free>
				free(sInstruction);
 8002bb6:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8002bb8:	f014 f900 	bl	8016dbc <free>
				free(sType);
 8002bbc:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8002bbe:	f014 f8fd 	bl	8016dbc <free>
}
 8002bc2:	e139      	b.n	8002e38 <json_input+0x940>
		else if(strcmp(INSTRUCTION, "SET_PERIPHERALS") == 0)
 8002bc4:	4b52      	ldr	r3, [pc, #328]	; (8002d10 <json_input+0x818>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4952      	ldr	r1, [pc, #328]	; (8002d14 <json_input+0x81c>)
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f7fd fb00 	bl	80001d0 <strcmp>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	f040 8123 	bne.w	8002e1e <json_input+0x926>
			cJSON *sType = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "TYPE");
 8002bd8:	4941      	ldr	r1, [pc, #260]	; (8002ce0 <json_input+0x7e8>)
 8002bda:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8002bdc:	f7ff f962 	bl	8001ea4 <cJSON_GetObjectItem>
 8002be0:	4603      	mov	r3, r0
 8002be2:	494d      	ldr	r1, [pc, #308]	; (8002d18 <json_input+0x820>)
 8002be4:	4618      	mov	r0, r3
 8002be6:	f7ff f95d 	bl	8001ea4 <cJSON_GetObjectItem>
 8002bea:	65f8      	str	r0, [r7, #92]	; 0x5c
			TYPE = sType->valuestring;
 8002bec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002bee:	691b      	ldr	r3, [r3, #16]
 8002bf0:	4a39      	ldr	r2, [pc, #228]	; (8002cd8 <json_input+0x7e0>)
 8002bf2:	6013      	str	r3, [r2, #0]
			if(strcmp(TYPE, "DIGITAL") == 0)
 8002bf4:	4b38      	ldr	r3, [pc, #224]	; (8002cd8 <json_input+0x7e0>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4948      	ldr	r1, [pc, #288]	; (8002d1c <json_input+0x824>)
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	f7fd fae8 	bl	80001d0 <strcmp>
 8002c00:	4603      	mov	r3, r0
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d145      	bne.n	8002c92 <json_input+0x79a>
				cJSON *s1 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "SET");
 8002c06:	4936      	ldr	r1, [pc, #216]	; (8002ce0 <json_input+0x7e8>)
 8002c08:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8002c0a:	f7ff f94b 	bl	8001ea4 <cJSON_GetObjectItem>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	4943      	ldr	r1, [pc, #268]	; (8002d20 <json_input+0x828>)
 8002c12:	4618      	mov	r0, r3
 8002c14:	f7ff f946 	bl	8001ea4 <cJSON_GetObjectItem>
 8002c18:	6538      	str	r0, [r7, #80]	; 0x50
				DigitalParamMass = s1->valuestring;
 8002c1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c1c:	691b      	ldr	r3, [r3, #16]
 8002c1e:	4a41      	ldr	r2, [pc, #260]	; (8002d24 <json_input+0x82c>)
 8002c20:	6013      	str	r3, [r2, #0]
				test = parseValue(DigitalParamMass);
 8002c22:	4b40      	ldr	r3, [pc, #256]	; (8002d24 <json_input+0x82c>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4618      	mov	r0, r3
 8002c28:	f7ff fc38 	bl	800249c <parseValue>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	4a3e      	ldr	r2, [pc, #248]	; (8002d28 <json_input+0x830>)
 8002c30:	6013      	str	r3, [r2, #0]
				for(int i = 0; i < 8; i++)
 8002c32:	2300      	movs	r3, #0
 8002c34:	677b      	str	r3, [r7, #116]	; 0x74
 8002c36:	e00e      	b.n	8002c56 <json_input+0x75e>
					Status_DIN[i] = (test[i] - 0x30);
 8002c38:	4b3b      	ldr	r3, [pc, #236]	; (8002d28 <json_input+0x830>)
 8002c3a:	681a      	ldr	r2, [r3, #0]
 8002c3c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c3e:	4413      	add	r3, r2
 8002c40:	781b      	ldrb	r3, [r3, #0]
 8002c42:	3b30      	subs	r3, #48	; 0x30
 8002c44:	b2d9      	uxtb	r1, r3
 8002c46:	4a39      	ldr	r2, [pc, #228]	; (8002d2c <json_input+0x834>)
 8002c48:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c4a:	4413      	add	r3, r2
 8002c4c:	460a      	mov	r2, r1
 8002c4e:	701a      	strb	r2, [r3, #0]
				for(int i = 0; i < 8; i++)
 8002c50:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c52:	3301      	adds	r3, #1
 8002c54:	677b      	str	r3, [r7, #116]	; 0x74
 8002c56:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c58:	2b07      	cmp	r3, #7
 8002c5a:	dded      	ble.n	8002c38 <json_input+0x740>
				SEND_str("\n");
 8002c5c:	482b      	ldr	r0, [pc, #172]	; (8002d0c <json_input+0x814>)
 8002c5e:	f7ff f957 	bl	8001f10 <SEND_str>
				SEND_str(TYPE);
 8002c62:	4b1d      	ldr	r3, [pc, #116]	; (8002cd8 <json_input+0x7e0>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4618      	mov	r0, r3
 8002c68:	f7ff f952 	bl	8001f10 <SEND_str>
				SEND_str("\n");
 8002c6c:	4827      	ldr	r0, [pc, #156]	; (8002d0c <json_input+0x814>)
 8002c6e:	f7ff f94f 	bl	8001f10 <SEND_str>
				cJSON_Delete(json);
 8002c72:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8002c74:	f7fe fb32 	bl	80012dc <cJSON_Delete>
				free(stime);
 8002c78:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8002c7a:	f014 f89f 	bl	8016dbc <free>
				free(sInstruction);
 8002c7e:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8002c80:	f014 f89c 	bl	8016dbc <free>
				free(sType);
 8002c84:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8002c86:	f014 f899 	bl	8016dbc <free>
				free(s1);
 8002c8a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8002c8c:	f014 f896 	bl	8016dbc <free>
}
 8002c90:	e0d2      	b.n	8002e38 <json_input+0x940>
			else if(strcmp(TYPE, "ANALOG") == 0)
 8002c92:	4b11      	ldr	r3, [pc, #68]	; (8002cd8 <json_input+0x7e0>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4926      	ldr	r1, [pc, #152]	; (8002d30 <json_input+0x838>)
 8002c98:	4618      	mov	r0, r3
 8002c9a:	f7fd fa99 	bl	80001d0 <strcmp>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d176      	bne.n	8002d92 <json_input+0x89a>
				cJSON *s1 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "SET");
 8002ca4:	490e      	ldr	r1, [pc, #56]	; (8002ce0 <json_input+0x7e8>)
 8002ca6:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8002ca8:	f7ff f8fc 	bl	8001ea4 <cJSON_GetObjectItem>
 8002cac:	4603      	mov	r3, r0
 8002cae:	491c      	ldr	r1, [pc, #112]	; (8002d20 <json_input+0x828>)
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	f7ff f8f7 	bl	8001ea4 <cJSON_GetObjectItem>
 8002cb6:	6578      	str	r0, [r7, #84]	; 0x54
				AnalogParamMass = s1->valuestring;
 8002cb8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002cba:	691b      	ldr	r3, [r3, #16]
 8002cbc:	4a1d      	ldr	r2, [pc, #116]	; (8002d34 <json_input+0x83c>)
 8002cbe:	6013      	str	r3, [r2, #0]
				test = parseValue(AnalogParamMass);
 8002cc0:	4b1c      	ldr	r3, [pc, #112]	; (8002d34 <json_input+0x83c>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f7ff fbe9 	bl	800249c <parseValue>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	4a16      	ldr	r2, [pc, #88]	; (8002d28 <json_input+0x830>)
 8002cce:	6013      	str	r3, [r2, #0]
				for(int i = 0; i < 8; i++)
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	673b      	str	r3, [r7, #112]	; 0x70
 8002cd4:	e03f      	b.n	8002d56 <json_input+0x85e>
 8002cd6:	bf00      	nop
 8002cd8:	200007b0 	.word	0x200007b0
 8002cdc:	0801ca20 	.word	0x0801ca20
 8002ce0:	0801c978 	.word	0x0801c978
 8002ce4:	0801c9c8 	.word	0x0801c9c8
 8002ce8:	0801c9d0 	.word	0x0801c9d0
 8002cec:	0801c9dc 	.word	0x0801c9dc
 8002cf0:	0801ca2c 	.word	0x0801ca2c
 8002cf4:	0801c9ac 	.word	0x0801c9ac
 8002cf8:	20000808 	.word	0x20000808
 8002cfc:	200007d4 	.word	0x200007d4
 8002d00:	200007f4 	.word	0x200007f4
 8002d04:	200007ec 	.word	0x200007ec
 8002d08:	200007d0 	.word	0x200007d0
 8002d0c:	0801c9b4 	.word	0x0801c9b4
 8002d10:	2000080c 	.word	0x2000080c
 8002d14:	0801ca34 	.word	0x0801ca34
 8002d18:	0801c980 	.word	0x0801c980
 8002d1c:	0801ca44 	.word	0x0801ca44
 8002d20:	0801ca4c 	.word	0x0801ca4c
 8002d24:	200007b4 	.word	0x200007b4
 8002d28:	20000804 	.word	0x20000804
 8002d2c:	20000328 	.word	0x20000328
 8002d30:	0801ca50 	.word	0x0801ca50
 8002d34:	200007e0 	.word	0x200007e0
					Status_AIN[i] = (test[i] - 0x30);
 8002d38:	4b42      	ldr	r3, [pc, #264]	; (8002e44 <json_input+0x94c>)
 8002d3a:	681a      	ldr	r2, [r3, #0]
 8002d3c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002d3e:	4413      	add	r3, r2
 8002d40:	781b      	ldrb	r3, [r3, #0]
 8002d42:	3b30      	subs	r3, #48	; 0x30
 8002d44:	b2d9      	uxtb	r1, r3
 8002d46:	4a40      	ldr	r2, [pc, #256]	; (8002e48 <json_input+0x950>)
 8002d48:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002d4a:	4413      	add	r3, r2
 8002d4c:	460a      	mov	r2, r1
 8002d4e:	701a      	strb	r2, [r3, #0]
				for(int i = 0; i < 8; i++)
 8002d50:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002d52:	3301      	adds	r3, #1
 8002d54:	673b      	str	r3, [r7, #112]	; 0x70
 8002d56:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002d58:	2b07      	cmp	r3, #7
 8002d5a:	dded      	ble.n	8002d38 <json_input+0x840>
				SEND_str("\n");
 8002d5c:	483b      	ldr	r0, [pc, #236]	; (8002e4c <json_input+0x954>)
 8002d5e:	f7ff f8d7 	bl	8001f10 <SEND_str>
				SEND_str(TYPE);
 8002d62:	4b3b      	ldr	r3, [pc, #236]	; (8002e50 <json_input+0x958>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4618      	mov	r0, r3
 8002d68:	f7ff f8d2 	bl	8001f10 <SEND_str>
				SEND_str("\n");
 8002d6c:	4837      	ldr	r0, [pc, #220]	; (8002e4c <json_input+0x954>)
 8002d6e:	f7ff f8cf 	bl	8001f10 <SEND_str>
				cJSON_Delete(json);
 8002d72:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8002d74:	f7fe fab2 	bl	80012dc <cJSON_Delete>
				free(stime);
 8002d78:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8002d7a:	f014 f81f 	bl	8016dbc <free>
				free(sInstruction);
 8002d7e:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8002d80:	f014 f81c 	bl	8016dbc <free>
				free(sType);
 8002d84:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8002d86:	f014 f819 	bl	8016dbc <free>
				free(s1);
 8002d8a:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8002d8c:	f014 f816 	bl	8016dbc <free>
}
 8002d90:	e052      	b.n	8002e38 <json_input+0x940>
			else if(strcmp(TYPE, "OCD") == 0)
 8002d92:	4b2f      	ldr	r3, [pc, #188]	; (8002e50 <json_input+0x958>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	492f      	ldr	r1, [pc, #188]	; (8002e54 <json_input+0x95c>)
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f7fd fa19 	bl	80001d0 <strcmp>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d149      	bne.n	8002e38 <json_input+0x940>
				cJSON *s1 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "SET");
 8002da4:	492c      	ldr	r1, [pc, #176]	; (8002e58 <json_input+0x960>)
 8002da6:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8002da8:	f7ff f87c 	bl	8001ea4 <cJSON_GetObjectItem>
 8002dac:	4603      	mov	r3, r0
 8002dae:	492b      	ldr	r1, [pc, #172]	; (8002e5c <json_input+0x964>)
 8002db0:	4618      	mov	r0, r3
 8002db2:	f7ff f877 	bl	8001ea4 <cJSON_GetObjectItem>
 8002db6:	65b8      	str	r0, [r7, #88]	; 0x58
				OpenCollectorDrainParamMass = s1->valuestring;
 8002db8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002dba:	691b      	ldr	r3, [r3, #16]
 8002dbc:	4a28      	ldr	r2, [pc, #160]	; (8002e60 <json_input+0x968>)
 8002dbe:	6013      	str	r3, [r2, #0]
				test = parseValue(OpenCollectorDrainParamMass);
 8002dc0:	4b27      	ldr	r3, [pc, #156]	; (8002e60 <json_input+0x968>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f7ff fb69 	bl	800249c <parseValue>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	4a1d      	ldr	r2, [pc, #116]	; (8002e44 <json_input+0x94c>)
 8002dce:	6013      	str	r3, [r2, #0]
				for(int i = 0; i < 8; i++)
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002dd4:	e00e      	b.n	8002df4 <json_input+0x8fc>
					Status_OCD[i] = (test[i] - 0x30);
 8002dd6:	4b1b      	ldr	r3, [pc, #108]	; (8002e44 <json_input+0x94c>)
 8002dd8:	681a      	ldr	r2, [r3, #0]
 8002dda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ddc:	4413      	add	r3, r2
 8002dde:	781b      	ldrb	r3, [r3, #0]
 8002de0:	3b30      	subs	r3, #48	; 0x30
 8002de2:	b2d9      	uxtb	r1, r3
 8002de4:	4a1f      	ldr	r2, [pc, #124]	; (8002e64 <json_input+0x96c>)
 8002de6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002de8:	4413      	add	r3, r2
 8002dea:	460a      	mov	r2, r1
 8002dec:	701a      	strb	r2, [r3, #0]
				for(int i = 0; i < 8; i++)
 8002dee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002df0:	3301      	adds	r3, #1
 8002df2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002df4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002df6:	2b07      	cmp	r3, #7
 8002df8:	dded      	ble.n	8002dd6 <json_input+0x8de>
				ReWriteOCD();
 8002dfa:	f001 f83f 	bl	8003e7c <ReWriteOCD>
				cJSON_Delete(json);
 8002dfe:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8002e00:	f7fe fa6c 	bl	80012dc <cJSON_Delete>
				free(stime);
 8002e04:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8002e06:	f013 ffd9 	bl	8016dbc <free>
				free(sInstruction);
 8002e0a:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8002e0c:	f013 ffd6 	bl	8016dbc <free>
				free(sType);
 8002e10:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8002e12:	f013 ffd3 	bl	8016dbc <free>
				free(s1);
 8002e16:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8002e18:	f013 ffd0 	bl	8016dbc <free>
}
 8002e1c:	e00c      	b.n	8002e38 <json_input+0x940>
			free(stime);
 8002e1e:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8002e20:	f013 ffcc 	bl	8016dbc <free>
			free(sInstruction);
 8002e24:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8002e26:	f013 ffc9 	bl	8016dbc <free>
}
 8002e2a:	e005      	b.n	8002e38 <json_input+0x940>
		cJSON_Delete(json);
 8002e2c:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8002e2e:	f7fe fa55 	bl	80012dc <cJSON_Delete>
		free(stime);
 8002e32:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8002e34:	f013 ffc2 	bl	8016dbc <free>
}
 8002e38:	bf00      	nop
 8002e3a:	377c      	adds	r7, #124	; 0x7c
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	ecbd 8b04 	vpop	{d8-d9}
 8002e42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e44:	20000804 	.word	0x20000804
 8002e48:	20000320 	.word	0x20000320
 8002e4c:	0801c9b4 	.word	0x0801c9b4
 8002e50:	200007b0 	.word	0x200007b0
 8002e54:	0801ca58 	.word	0x0801ca58
 8002e58:	0801c978 	.word	0x0801c978
 8002e5c:	0801ca4c 	.word	0x0801ca4c
 8002e60:	20000814 	.word	0x20000814
 8002e64:	20000338 	.word	0x20000338

08002e68 <CheckReWriteDiDo>:
GPIO_TypeDef *pVHOD[8] = {VHOD1, VHOD2, VHOD3, VHOD4, VHOD5, VHOD6, VHOD7, VHOD8};				//Входы дискретных сигналов
GPIO_TypeDef *pVIHOD[8] = {VIHOD1, VIHOD2, VIHOD3, VIHOD4, VIHOD5, VIHOD6, VIHOD7, VIHOD8};		//Выходы открытый коллектор
uint16_t OCD_Pin[8] = {O0_Pin, O1_Pin, O2_Pin, O3_Pin, O4_Pin, O5_Pin, O6_Pin, O7_Pin};

void CheckReWriteDiDo(void)
{
 8002e68:	b590      	push	{r4, r7, lr}
 8002e6a:	b083      	sub	sp, #12
 8002e6c:	af00      	add	r7, sp, #0
	for(int i = 0; i < 8; i++)
 8002e6e:	2300      	movs	r3, #0
 8002e70:	607b      	str	r3, [r7, #4]
 8002e72:	e0a8      	b.n	8002fc6 <CheckReWriteDiDo+0x15e>
	{
		if(HAL_GPIO_ReadPin(DiDo[i].D_IN, DiDo[i].DIN_Pin) != DiDo[i].VAR_IN)	//(Если Вход1 == 0 то Выход3 = 1) Инверсная логика на входах оптопар
 8002e74:	4958      	ldr	r1, [pc, #352]	; (8002fd8 <CheckReWriteDiDo+0x170>)
 8002e76:	687a      	ldr	r2, [r7, #4]
 8002e78:	4613      	mov	r3, r2
 8002e7a:	009b      	lsls	r3, r3, #2
 8002e7c:	4413      	add	r3, r2
 8002e7e:	009b      	lsls	r3, r3, #2
 8002e80:	440b      	add	r3, r1
 8002e82:	6818      	ldr	r0, [r3, #0]
 8002e84:	4954      	ldr	r1, [pc, #336]	; (8002fd8 <CheckReWriteDiDo+0x170>)
 8002e86:	687a      	ldr	r2, [r7, #4]
 8002e88:	4613      	mov	r3, r2
 8002e8a:	009b      	lsls	r3, r3, #2
 8002e8c:	4413      	add	r3, r2
 8002e8e:	009b      	lsls	r3, r3, #2
 8002e90:	440b      	add	r3, r1
 8002e92:	3306      	adds	r3, #6
 8002e94:	881b      	ldrh	r3, [r3, #0]
 8002e96:	4619      	mov	r1, r3
 8002e98:	f004 feca 	bl	8007c30 <HAL_GPIO_ReadPin>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	494d      	ldr	r1, [pc, #308]	; (8002fd8 <CheckReWriteDiDo+0x170>)
 8002ea2:	687a      	ldr	r2, [r7, #4]
 8002ea4:	4613      	mov	r3, r2
 8002ea6:	009b      	lsls	r3, r3, #2
 8002ea8:	4413      	add	r3, r2
 8002eaa:	009b      	lsls	r3, r3, #2
 8002eac:	440b      	add	r3, r1
 8002eae:	3304      	adds	r3, #4
 8002eb0:	781b      	ldrb	r3, [r3, #0]
 8002eb2:	4298      	cmp	r0, r3
 8002eb4:	d02c      	beq.n	8002f10 <CheckReWriteDiDo+0xa8>
		{
			//Status_OCD[i] = DiDo[i].VAR_OUT;									//нужно записать в массив актуальные данные!!!
			Status_OCD[i] = DiDo[i].VAR_OUT;
 8002eb6:	4948      	ldr	r1, [pc, #288]	; (8002fd8 <CheckReWriteDiDo+0x170>)
 8002eb8:	687a      	ldr	r2, [r7, #4]
 8002eba:	4613      	mov	r3, r2
 8002ebc:	009b      	lsls	r3, r3, #2
 8002ebe:	4413      	add	r3, r2
 8002ec0:	009b      	lsls	r3, r3, #2
 8002ec2:	440b      	add	r3, r1
 8002ec4:	330c      	adds	r3, #12
 8002ec6:	7819      	ldrb	r1, [r3, #0]
 8002ec8:	4a44      	ldr	r2, [pc, #272]	; (8002fdc <CheckReWriteDiDo+0x174>)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	4413      	add	r3, r2
 8002ece:	460a      	mov	r2, r1
 8002ed0:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(DiDo[i].D_OUT, DiDo[i].OCD_Pin, DiDo[i].VAR_OUT);		//DiDo[i].VAR_OUT
 8002ed2:	4941      	ldr	r1, [pc, #260]	; (8002fd8 <CheckReWriteDiDo+0x170>)
 8002ed4:	687a      	ldr	r2, [r7, #4]
 8002ed6:	4613      	mov	r3, r2
 8002ed8:	009b      	lsls	r3, r3, #2
 8002eda:	4413      	add	r3, r2
 8002edc:	009b      	lsls	r3, r3, #2
 8002ede:	440b      	add	r3, r1
 8002ee0:	3308      	adds	r3, #8
 8002ee2:	6818      	ldr	r0, [r3, #0]
 8002ee4:	493c      	ldr	r1, [pc, #240]	; (8002fd8 <CheckReWriteDiDo+0x170>)
 8002ee6:	687a      	ldr	r2, [r7, #4]
 8002ee8:	4613      	mov	r3, r2
 8002eea:	009b      	lsls	r3, r3, #2
 8002eec:	4413      	add	r3, r2
 8002eee:	009b      	lsls	r3, r3, #2
 8002ef0:	440b      	add	r3, r1
 8002ef2:	330e      	adds	r3, #14
 8002ef4:	8819      	ldrh	r1, [r3, #0]
 8002ef6:	4c38      	ldr	r4, [pc, #224]	; (8002fd8 <CheckReWriteDiDo+0x170>)
 8002ef8:	687a      	ldr	r2, [r7, #4]
 8002efa:	4613      	mov	r3, r2
 8002efc:	009b      	lsls	r3, r3, #2
 8002efe:	4413      	add	r3, r2
 8002f00:	009b      	lsls	r3, r3, #2
 8002f02:	4423      	add	r3, r4
 8002f04:	330c      	adds	r3, #12
 8002f06:	781b      	ldrb	r3, [r3, #0]
 8002f08:	461a      	mov	r2, r3
 8002f0a:	f004 fea9 	bl	8007c60 <HAL_GPIO_WritePin>
 8002f0e:	e057      	b.n	8002fc0 <CheckReWriteDiDo+0x158>
		}
		else if(HAL_GPIO_ReadPin(DiDo[i].D_IN, DiDo[i].DIN_Pin) == DiDo[i].VAR_IN)
 8002f10:	4931      	ldr	r1, [pc, #196]	; (8002fd8 <CheckReWriteDiDo+0x170>)
 8002f12:	687a      	ldr	r2, [r7, #4]
 8002f14:	4613      	mov	r3, r2
 8002f16:	009b      	lsls	r3, r3, #2
 8002f18:	4413      	add	r3, r2
 8002f1a:	009b      	lsls	r3, r3, #2
 8002f1c:	440b      	add	r3, r1
 8002f1e:	6818      	ldr	r0, [r3, #0]
 8002f20:	492d      	ldr	r1, [pc, #180]	; (8002fd8 <CheckReWriteDiDo+0x170>)
 8002f22:	687a      	ldr	r2, [r7, #4]
 8002f24:	4613      	mov	r3, r2
 8002f26:	009b      	lsls	r3, r3, #2
 8002f28:	4413      	add	r3, r2
 8002f2a:	009b      	lsls	r3, r3, #2
 8002f2c:	440b      	add	r3, r1
 8002f2e:	3306      	adds	r3, #6
 8002f30:	881b      	ldrh	r3, [r3, #0]
 8002f32:	4619      	mov	r1, r3
 8002f34:	f004 fe7c 	bl	8007c30 <HAL_GPIO_ReadPin>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	4926      	ldr	r1, [pc, #152]	; (8002fd8 <CheckReWriteDiDo+0x170>)
 8002f3e:	687a      	ldr	r2, [r7, #4]
 8002f40:	4613      	mov	r3, r2
 8002f42:	009b      	lsls	r3, r3, #2
 8002f44:	4413      	add	r3, r2
 8002f46:	009b      	lsls	r3, r3, #2
 8002f48:	440b      	add	r3, r1
 8002f4a:	3304      	adds	r3, #4
 8002f4c:	781b      	ldrb	r3, [r3, #0]
 8002f4e:	4298      	cmp	r0, r3
 8002f50:	d136      	bne.n	8002fc0 <CheckReWriteDiDo+0x158>
		{
			//Status_OCD[i] = !DiDo[i].VAR_OUT;
			Status_OCD[i] = !DiDo[i].VAR_OUT;
 8002f52:	4921      	ldr	r1, [pc, #132]	; (8002fd8 <CheckReWriteDiDo+0x170>)
 8002f54:	687a      	ldr	r2, [r7, #4]
 8002f56:	4613      	mov	r3, r2
 8002f58:	009b      	lsls	r3, r3, #2
 8002f5a:	4413      	add	r3, r2
 8002f5c:	009b      	lsls	r3, r3, #2
 8002f5e:	440b      	add	r3, r1
 8002f60:	330c      	adds	r3, #12
 8002f62:	781b      	ldrb	r3, [r3, #0]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	bf0c      	ite	eq
 8002f68:	2301      	moveq	r3, #1
 8002f6a:	2300      	movne	r3, #0
 8002f6c:	b2db      	uxtb	r3, r3
 8002f6e:	4619      	mov	r1, r3
 8002f70:	4a1a      	ldr	r2, [pc, #104]	; (8002fdc <CheckReWriteDiDo+0x174>)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	4413      	add	r3, r2
 8002f76:	460a      	mov	r2, r1
 8002f78:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(DiDo[i].D_OUT, DiDo[i].OCD_Pin, !DiDo[i].VAR_OUT);	//!DiDo[i].VAR_OUT
 8002f7a:	4917      	ldr	r1, [pc, #92]	; (8002fd8 <CheckReWriteDiDo+0x170>)
 8002f7c:	687a      	ldr	r2, [r7, #4]
 8002f7e:	4613      	mov	r3, r2
 8002f80:	009b      	lsls	r3, r3, #2
 8002f82:	4413      	add	r3, r2
 8002f84:	009b      	lsls	r3, r3, #2
 8002f86:	440b      	add	r3, r1
 8002f88:	3308      	adds	r3, #8
 8002f8a:	6818      	ldr	r0, [r3, #0]
 8002f8c:	4912      	ldr	r1, [pc, #72]	; (8002fd8 <CheckReWriteDiDo+0x170>)
 8002f8e:	687a      	ldr	r2, [r7, #4]
 8002f90:	4613      	mov	r3, r2
 8002f92:	009b      	lsls	r3, r3, #2
 8002f94:	4413      	add	r3, r2
 8002f96:	009b      	lsls	r3, r3, #2
 8002f98:	440b      	add	r3, r1
 8002f9a:	330e      	adds	r3, #14
 8002f9c:	8819      	ldrh	r1, [r3, #0]
 8002f9e:	4c0e      	ldr	r4, [pc, #56]	; (8002fd8 <CheckReWriteDiDo+0x170>)
 8002fa0:	687a      	ldr	r2, [r7, #4]
 8002fa2:	4613      	mov	r3, r2
 8002fa4:	009b      	lsls	r3, r3, #2
 8002fa6:	4413      	add	r3, r2
 8002fa8:	009b      	lsls	r3, r3, #2
 8002faa:	4423      	add	r3, r4
 8002fac:	330c      	adds	r3, #12
 8002fae:	781b      	ldrb	r3, [r3, #0]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	bf0c      	ite	eq
 8002fb4:	2301      	moveq	r3, #1
 8002fb6:	2300      	movne	r3, #0
 8002fb8:	b2db      	uxtb	r3, r3
 8002fba:	461a      	mov	r2, r3
 8002fbc:	f004 fe50 	bl	8007c60 <HAL_GPIO_WritePin>
	for(int i = 0; i < 8; i++)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	3301      	adds	r3, #1
 8002fc4:	607b      	str	r3, [r7, #4]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2b07      	cmp	r3, #7
 8002fca:	f77f af53 	ble.w	8002e74 <CheckReWriteDiDo+0xc>
		}
	}
}
 8002fce:	bf00      	nop
 8002fd0:	bf00      	nop
 8002fd2:	370c      	adds	r7, #12
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bd90      	pop	{r4, r7, pc}
 8002fd8:	20000710 	.word	0x20000710
 8002fdc:	20000338 	.word	0x20000338

08002fe0 <CheckReWriteVAiDo>:
void CheckReWriteVAiDo(void)
{
 8002fe0:	b590      	push	{r4, r7, lr}
 8002fe2:	b083      	sub	sp, #12
 8002fe4:	af00      	add	r7, sp, #0
	for(int i = 0; i < 4; i++)
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	607b      	str	r3, [r7, #4]
 8002fea:	e07b      	b.n	80030e4 <CheckReWriteVAiDo+0x104>
	{
		for(int j = 0; j < 8; j++)
 8002fec:	2300      	movs	r3, #0
 8002fee:	603b      	str	r3, [r7, #0]
 8002ff0:	e072      	b.n	80030d8 <CheckReWriteVAiDo+0xf8>
		{
			//if(strcmp(VAiDo[i].D_OUT, pVIHOD[j]) == 0)
			if(VAiDo[i].D_OUT == pVIHOD[j])
 8002ff2:	4940      	ldr	r1, [pc, #256]	; (80030f4 <CheckReWriteVAiDo+0x114>)
 8002ff4:	687a      	ldr	r2, [r7, #4]
 8002ff6:	4613      	mov	r3, r2
 8002ff8:	009b      	lsls	r3, r3, #2
 8002ffa:	4413      	add	r3, r2
 8002ffc:	00db      	lsls	r3, r3, #3
 8002ffe:	440b      	add	r3, r1
 8003000:	3318      	adds	r3, #24
 8003002:	681a      	ldr	r2, [r3, #0]
 8003004:	493c      	ldr	r1, [pc, #240]	; (80030f8 <CheckReWriteVAiDo+0x118>)
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800300c:	429a      	cmp	r2, r3
 800300e:	d160      	bne.n	80030d2 <CheckReWriteVAiDo+0xf2>
			{
				if((adcValue[i] >= VAiDo[i].RANGE_LOW) && (VAiDo[i].RANGE_HIGH >= adcValue[i]))
 8003010:	4a3a      	ldr	r2, [pc, #232]	; (80030fc <CheckReWriteVAiDo+0x11c>)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	00db      	lsls	r3, r3, #3
 8003016:	4413      	add	r3, r2
 8003018:	e9d3 0100 	ldrd	r0, r1, [r3]
 800301c:	4c35      	ldr	r4, [pc, #212]	; (80030f4 <CheckReWriteVAiDo+0x114>)
 800301e:	687a      	ldr	r2, [r7, #4]
 8003020:	4613      	mov	r3, r2
 8003022:	009b      	lsls	r3, r3, #2
 8003024:	4413      	add	r3, r2
 8003026:	00db      	lsls	r3, r3, #3
 8003028:	4423      	add	r3, r4
 800302a:	3308      	adds	r3, #8
 800302c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003030:	f7fd fd78 	bl	8000b24 <__aeabi_dcmpge>
 8003034:	4603      	mov	r3, r0
 8003036:	2b00      	cmp	r3, #0
 8003038:	d030      	beq.n	800309c <CheckReWriteVAiDo+0xbc>
 800303a:	492e      	ldr	r1, [pc, #184]	; (80030f4 <CheckReWriteVAiDo+0x114>)
 800303c:	687a      	ldr	r2, [r7, #4]
 800303e:	4613      	mov	r3, r2
 8003040:	009b      	lsls	r3, r3, #2
 8003042:	4413      	add	r3, r2
 8003044:	00db      	lsls	r3, r3, #3
 8003046:	440b      	add	r3, r1
 8003048:	3310      	adds	r3, #16
 800304a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800304e:	4a2b      	ldr	r2, [pc, #172]	; (80030fc <CheckReWriteVAiDo+0x11c>)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	00db      	lsls	r3, r3, #3
 8003054:	4413      	add	r3, r2
 8003056:	e9d3 2300 	ldrd	r2, r3, [r3]
 800305a:	f7fd fd63 	bl	8000b24 <__aeabi_dcmpge>
 800305e:	4603      	mov	r3, r0
 8003060:	2b00      	cmp	r3, #0
 8003062:	d01b      	beq.n	800309c <CheckReWriteVAiDo+0xbc>
				{
					Status_OCD[j] = 1;
 8003064:	4a26      	ldr	r2, [pc, #152]	; (8003100 <CheckReWriteVAiDo+0x120>)
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	4413      	add	r3, r2
 800306a:	2201      	movs	r2, #1
 800306c:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_WritePin(VAiDo[i].D_OUT, VAiDo[i].OCD_Pin, SET);
 800306e:	4921      	ldr	r1, [pc, #132]	; (80030f4 <CheckReWriteVAiDo+0x114>)
 8003070:	687a      	ldr	r2, [r7, #4]
 8003072:	4613      	mov	r3, r2
 8003074:	009b      	lsls	r3, r3, #2
 8003076:	4413      	add	r3, r2
 8003078:	00db      	lsls	r3, r3, #3
 800307a:	440b      	add	r3, r1
 800307c:	3318      	adds	r3, #24
 800307e:	6818      	ldr	r0, [r3, #0]
 8003080:	491c      	ldr	r1, [pc, #112]	; (80030f4 <CheckReWriteVAiDo+0x114>)
 8003082:	687a      	ldr	r2, [r7, #4]
 8003084:	4613      	mov	r3, r2
 8003086:	009b      	lsls	r3, r3, #2
 8003088:	4413      	add	r3, r2
 800308a:	00db      	lsls	r3, r3, #3
 800308c:	440b      	add	r3, r1
 800308e:	331e      	adds	r3, #30
 8003090:	881b      	ldrh	r3, [r3, #0]
 8003092:	2201      	movs	r2, #1
 8003094:	4619      	mov	r1, r3
 8003096:	f004 fde3 	bl	8007c60 <HAL_GPIO_WritePin>
 800309a:	e01a      	b.n	80030d2 <CheckReWriteVAiDo+0xf2>
				}
				else
				{
					Status_OCD[j] = 0;
 800309c:	4a18      	ldr	r2, [pc, #96]	; (8003100 <CheckReWriteVAiDo+0x120>)
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	4413      	add	r3, r2
 80030a2:	2200      	movs	r2, #0
 80030a4:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_WritePin(VAiDo[i].D_OUT, VAiDo[i].OCD_Pin, RESET);
 80030a6:	4913      	ldr	r1, [pc, #76]	; (80030f4 <CheckReWriteVAiDo+0x114>)
 80030a8:	687a      	ldr	r2, [r7, #4]
 80030aa:	4613      	mov	r3, r2
 80030ac:	009b      	lsls	r3, r3, #2
 80030ae:	4413      	add	r3, r2
 80030b0:	00db      	lsls	r3, r3, #3
 80030b2:	440b      	add	r3, r1
 80030b4:	3318      	adds	r3, #24
 80030b6:	6818      	ldr	r0, [r3, #0]
 80030b8:	490e      	ldr	r1, [pc, #56]	; (80030f4 <CheckReWriteVAiDo+0x114>)
 80030ba:	687a      	ldr	r2, [r7, #4]
 80030bc:	4613      	mov	r3, r2
 80030be:	009b      	lsls	r3, r3, #2
 80030c0:	4413      	add	r3, r2
 80030c2:	00db      	lsls	r3, r3, #3
 80030c4:	440b      	add	r3, r1
 80030c6:	331e      	adds	r3, #30
 80030c8:	881b      	ldrh	r3, [r3, #0]
 80030ca:	2200      	movs	r2, #0
 80030cc:	4619      	mov	r1, r3
 80030ce:	f004 fdc7 	bl	8007c60 <HAL_GPIO_WritePin>
		for(int j = 0; j < 8; j++)
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	3301      	adds	r3, #1
 80030d6:	603b      	str	r3, [r7, #0]
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	2b07      	cmp	r3, #7
 80030dc:	dd89      	ble.n	8002ff2 <CheckReWriteVAiDo+0x12>
	for(int i = 0; i < 4; i++)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	3301      	adds	r3, #1
 80030e2:	607b      	str	r3, [r7, #4]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2b03      	cmp	r3, #3
 80030e8:	dd80      	ble.n	8002fec <CheckReWriteVAiDo+0xc>
				}
			}
		}
	}
}
 80030ea:	bf00      	nop
 80030ec:	bf00      	nop
 80030ee:	370c      	adds	r7, #12
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bd90      	pop	{r4, r7, pc}
 80030f4:	20000670 	.word	0x20000670
 80030f8:	20000028 	.word	0x20000028
 80030fc:	20000300 	.word	0x20000300
 8003100:	20000338 	.word	0x20000338

08003104 <set_dido>:
//Принимает "D_IN" - строку с номером цифрового входа
//Принимает "VAR_IN" - переменная состояния входа
//Принимает "D_OUT" - строку с номером цифрового выхода
//Принимает "VAR_OUT" - переменная состояния выхода
void set_dido(char *D_IN, uint8_t VAR_IN, char *D_OUT, uint8_t VAR_OUT)
{
 8003104:	b590      	push	{r4, r7, lr}
 8003106:	b0b3      	sub	sp, #204	; 0xcc
 8003108:	af00      	add	r7, sp, #0
 800310a:	60f8      	str	r0, [r7, #12]
 800310c:	607a      	str	r2, [r7, #4]
 800310e:	461a      	mov	r2, r3
 8003110:	460b      	mov	r3, r1
 8003112:	72fb      	strb	r3, [r7, #11]
 8003114:	4613      	mov	r3, r2
 8003116:	72bb      	strb	r3, [r7, #10]
	char VHOD[8][10] = {"VHOD1", "VHOD2", "VHOD3", "VHOD4", "VHOD5", "VHOD6", "VHOD7", "VHOD8"};
 8003118:	4acb      	ldr	r2, [pc, #812]	; (8003448 <set_dido+0x344>)
 800311a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800311e:	4611      	mov	r1, r2
 8003120:	2250      	movs	r2, #80	; 0x50
 8003122:	4618      	mov	r0, r3
 8003124:	f013 fe60 	bl	8016de8 <memcpy>
	char VIHOD[8][10] = {"VIHOD1", "VIHOD2", "VIHOD3", "VIHOD4", "VIHOD5", "VIHOD6", "VIHOD7", "VIHOD8"};
 8003128:	4ac8      	ldr	r2, [pc, #800]	; (800344c <set_dido+0x348>)
 800312a:	f107 0320 	add.w	r3, r7, #32
 800312e:	4611      	mov	r1, r2
 8003130:	2250      	movs	r2, #80	; 0x50
 8003132:	4618      	mov	r0, r3
 8003134:	f013 fe58 	bl	8016de8 <memcpy>

	uint16_t DIN_Pin[8] = {IN0_Pin, IN1_Pin, IN2_Pin, IN3_Pin, IN4_Pin, IN5_Pin, IN6_Pin, IN7_Pin};
 8003138:	4bc5      	ldr	r3, [pc, #788]	; (8003450 <set_dido+0x34c>)
 800313a:	f107 0410 	add.w	r4, r7, #16
 800313e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003140:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	for(int i = 0; i < 8; i++)
 8003144:	2300      	movs	r3, #0
 8003146:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800314a:	e1a2      	b.n	8003492 <set_dido+0x38e>
	{
		if(strcmp(D_IN, VHOD[i]) == 0)
 800314c:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8003150:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003154:	4613      	mov	r3, r2
 8003156:	009b      	lsls	r3, r3, #2
 8003158:	4413      	add	r3, r2
 800315a:	005b      	lsls	r3, r3, #1
 800315c:	440b      	add	r3, r1
 800315e:	4619      	mov	r1, r3
 8003160:	68f8      	ldr	r0, [r7, #12]
 8003162:	f7fd f835 	bl	80001d0 <strcmp>
 8003166:	4603      	mov	r3, r0
 8003168:	2b00      	cmp	r3, #0
 800316a:	f040 818d 	bne.w	8003488 <set_dido+0x384>
		{
			if(DiDo[i].clrFlag != false)
 800316e:	49b9      	ldr	r1, [pc, #740]	; (8003454 <set_dido+0x350>)
 8003170:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003174:	4613      	mov	r3, r2
 8003176:	009b      	lsls	r3, r3, #2
 8003178:	4413      	add	r3, r2
 800317a:	009b      	lsls	r3, r3, #2
 800317c:	440b      	add	r3, r1
 800317e:	3310      	adds	r3, #16
 8003180:	781b      	ldrb	r3, [r3, #0]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d017      	beq.n	80031b6 <set_dido+0xb2>
				HAL_GPIO_WritePin(DiDo[i].D_OUT, DiDo[i].OCD_Pin, RESET);
 8003186:	49b3      	ldr	r1, [pc, #716]	; (8003454 <set_dido+0x350>)
 8003188:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800318c:	4613      	mov	r3, r2
 800318e:	009b      	lsls	r3, r3, #2
 8003190:	4413      	add	r3, r2
 8003192:	009b      	lsls	r3, r3, #2
 8003194:	440b      	add	r3, r1
 8003196:	3308      	adds	r3, #8
 8003198:	6818      	ldr	r0, [r3, #0]
 800319a:	49ae      	ldr	r1, [pc, #696]	; (8003454 <set_dido+0x350>)
 800319c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80031a0:	4613      	mov	r3, r2
 80031a2:	009b      	lsls	r3, r3, #2
 80031a4:	4413      	add	r3, r2
 80031a6:	009b      	lsls	r3, r3, #2
 80031a8:	440b      	add	r3, r1
 80031aa:	330e      	adds	r3, #14
 80031ac:	881b      	ldrh	r3, [r3, #0]
 80031ae:	2200      	movs	r2, #0
 80031b0:	4619      	mov	r1, r3
 80031b2:	f004 fd55 	bl	8007c60 <HAL_GPIO_WritePin>

			DiDo[i].clrFlag = true;
 80031b6:	49a7      	ldr	r1, [pc, #668]	; (8003454 <set_dido+0x350>)
 80031b8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80031bc:	4613      	mov	r3, r2
 80031be:	009b      	lsls	r3, r3, #2
 80031c0:	4413      	add	r3, r2
 80031c2:	009b      	lsls	r3, r3, #2
 80031c4:	440b      	add	r3, r1
 80031c6:	3310      	adds	r3, #16
 80031c8:	2201      	movs	r2, #1
 80031ca:	701a      	strb	r2, [r3, #0]
			DiDo[i].D_IN = pVHOD[i];
 80031cc:	4aa2      	ldr	r2, [pc, #648]	; (8003458 <set_dido+0x354>)
 80031ce:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80031d2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80031d6:	489f      	ldr	r0, [pc, #636]	; (8003454 <set_dido+0x350>)
 80031d8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80031dc:	4613      	mov	r3, r2
 80031de:	009b      	lsls	r3, r3, #2
 80031e0:	4413      	add	r3, r2
 80031e2:	009b      	lsls	r3, r3, #2
 80031e4:	4403      	add	r3, r0
 80031e6:	6019      	str	r1, [r3, #0]
			DiDo[i].VAR_IN = VAR_IN;
 80031e8:	499a      	ldr	r1, [pc, #616]	; (8003454 <set_dido+0x350>)
 80031ea:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80031ee:	4613      	mov	r3, r2
 80031f0:	009b      	lsls	r3, r3, #2
 80031f2:	4413      	add	r3, r2
 80031f4:	009b      	lsls	r3, r3, #2
 80031f6:	440b      	add	r3, r1
 80031f8:	3304      	adds	r3, #4
 80031fa:	7afa      	ldrb	r2, [r7, #11]
 80031fc:	701a      	strb	r2, [r3, #0]
			DiDo[i].DIN_Pin = DIN_Pin[i];
 80031fe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003202:	005b      	lsls	r3, r3, #1
 8003204:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 8003208:	4413      	add	r3, r2
 800320a:	f833 0cb8 	ldrh.w	r0, [r3, #-184]
 800320e:	4991      	ldr	r1, [pc, #580]	; (8003454 <set_dido+0x350>)
 8003210:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003214:	4613      	mov	r3, r2
 8003216:	009b      	lsls	r3, r3, #2
 8003218:	4413      	add	r3, r2
 800321a:	009b      	lsls	r3, r3, #2
 800321c:	440b      	add	r3, r1
 800321e:	3306      	adds	r3, #6
 8003220:	4602      	mov	r2, r0
 8003222:	801a      	strh	r2, [r3, #0]
			for(int j = 0; j < 8; j++)
 8003224:	2300      	movs	r3, #0
 8003226:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800322a:	e104      	b.n	8003436 <set_dido+0x332>
			{
				if(strcmp(D_OUT, VIHOD[j]) == 0)
 800322c:	f107 0120 	add.w	r1, r7, #32
 8003230:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003234:	4613      	mov	r3, r2
 8003236:	009b      	lsls	r3, r3, #2
 8003238:	4413      	add	r3, r2
 800323a:	005b      	lsls	r3, r3, #1
 800323c:	440b      	add	r3, r1
 800323e:	4619      	mov	r1, r3
 8003240:	6878      	ldr	r0, [r7, #4]
 8003242:	f7fc ffc5 	bl	80001d0 <strcmp>
 8003246:	4603      	mov	r3, r0
 8003248:	2b00      	cmp	r3, #0
 800324a:	f040 80ef 	bne.w	800342c <set_dido+0x328>
				{
					DiDo[i].D_OUT = pVIHOD[j];
 800324e:	4a83      	ldr	r2, [pc, #524]	; (800345c <set_dido+0x358>)
 8003250:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003254:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003258:	487e      	ldr	r0, [pc, #504]	; (8003454 <set_dido+0x350>)
 800325a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800325e:	4613      	mov	r3, r2
 8003260:	009b      	lsls	r3, r3, #2
 8003262:	4413      	add	r3, r2
 8003264:	009b      	lsls	r3, r3, #2
 8003266:	4403      	add	r3, r0
 8003268:	3308      	adds	r3, #8
 800326a:	6019      	str	r1, [r3, #0]
					DiDo[i].VAR_OUT = VAR_OUT;
 800326c:	4979      	ldr	r1, [pc, #484]	; (8003454 <set_dido+0x350>)
 800326e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003272:	4613      	mov	r3, r2
 8003274:	009b      	lsls	r3, r3, #2
 8003276:	4413      	add	r3, r2
 8003278:	009b      	lsls	r3, r3, #2
 800327a:	440b      	add	r3, r1
 800327c:	330c      	adds	r3, #12
 800327e:	7aba      	ldrb	r2, [r7, #10]
 8003280:	701a      	strb	r2, [r3, #0]
					DiDo[i].OCD_Pin = OCD_Pin[j];
 8003282:	4a77      	ldr	r2, [pc, #476]	; (8003460 <set_dido+0x35c>)
 8003284:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003288:	f832 0013 	ldrh.w	r0, [r2, r3, lsl #1]
 800328c:	4971      	ldr	r1, [pc, #452]	; (8003454 <set_dido+0x350>)
 800328e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003292:	4613      	mov	r3, r2
 8003294:	009b      	lsls	r3, r3, #2
 8003296:	4413      	add	r3, r2
 8003298:	009b      	lsls	r3, r3, #2
 800329a:	440b      	add	r3, r1
 800329c:	330e      	adds	r3, #14
 800329e:	4602      	mov	r2, r0
 80032a0:	801a      	strh	r2, [r3, #0]

					if(HAL_GPIO_ReadPin(DiDo[i].D_IN, DiDo[i].DIN_Pin) != VAR_IN)	//(Если Вход1 == 0 то Выход3 = 1) Инверсная логика на входах оптопар
 80032a2:	496c      	ldr	r1, [pc, #432]	; (8003454 <set_dido+0x350>)
 80032a4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80032a8:	4613      	mov	r3, r2
 80032aa:	009b      	lsls	r3, r3, #2
 80032ac:	4413      	add	r3, r2
 80032ae:	009b      	lsls	r3, r3, #2
 80032b0:	440b      	add	r3, r1
 80032b2:	6818      	ldr	r0, [r3, #0]
 80032b4:	4967      	ldr	r1, [pc, #412]	; (8003454 <set_dido+0x350>)
 80032b6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80032ba:	4613      	mov	r3, r2
 80032bc:	009b      	lsls	r3, r3, #2
 80032be:	4413      	add	r3, r2
 80032c0:	009b      	lsls	r3, r3, #2
 80032c2:	440b      	add	r3, r1
 80032c4:	3306      	adds	r3, #6
 80032c6:	881b      	ldrh	r3, [r3, #0]
 80032c8:	4619      	mov	r1, r3
 80032ca:	f004 fcb1 	bl	8007c30 <HAL_GPIO_ReadPin>
 80032ce:	4603      	mov	r3, r0
 80032d0:	461a      	mov	r2, r3
 80032d2:	7afb      	ldrb	r3, [r7, #11]
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d021      	beq.n	800331c <set_dido+0x218>
					{
						Status_OCD[j] = VAR_OUT;
 80032d8:	4a62      	ldr	r2, [pc, #392]	; (8003464 <set_dido+0x360>)
 80032da:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80032de:	4413      	add	r3, r2
 80032e0:	7aba      	ldrb	r2, [r7, #10]
 80032e2:	701a      	strb	r2, [r3, #0]
						HAL_GPIO_WritePin(DiDo[i].D_OUT, DiDo[i].OCD_Pin, VAR_OUT);
 80032e4:	495b      	ldr	r1, [pc, #364]	; (8003454 <set_dido+0x350>)
 80032e6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80032ea:	4613      	mov	r3, r2
 80032ec:	009b      	lsls	r3, r3, #2
 80032ee:	4413      	add	r3, r2
 80032f0:	009b      	lsls	r3, r3, #2
 80032f2:	440b      	add	r3, r1
 80032f4:	3308      	adds	r3, #8
 80032f6:	6818      	ldr	r0, [r3, #0]
 80032f8:	4956      	ldr	r1, [pc, #344]	; (8003454 <set_dido+0x350>)
 80032fa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80032fe:	4613      	mov	r3, r2
 8003300:	009b      	lsls	r3, r3, #2
 8003302:	4413      	add	r3, r2
 8003304:	009b      	lsls	r3, r3, #2
 8003306:	440b      	add	r3, r1
 8003308:	330e      	adds	r3, #14
 800330a:	881b      	ldrh	r3, [r3, #0]
 800330c:	7aba      	ldrb	r2, [r7, #10]
 800330e:	4619      	mov	r1, r3
 8003310:	f004 fca6 	bl	8007c60 <HAL_GPIO_WritePin>
						SEND_str("success...\n");
 8003314:	4854      	ldr	r0, [pc, #336]	; (8003468 <set_dido+0x364>)
 8003316:	f7fe fdfb 	bl	8001f10 <SEND_str>
 800331a:	e047      	b.n	80033ac <set_dido+0x2a8>
					}
					else if(HAL_GPIO_ReadPin(DiDo[i].D_IN, DiDo[i].DIN_Pin) == VAR_IN)
 800331c:	494d      	ldr	r1, [pc, #308]	; (8003454 <set_dido+0x350>)
 800331e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003322:	4613      	mov	r3, r2
 8003324:	009b      	lsls	r3, r3, #2
 8003326:	4413      	add	r3, r2
 8003328:	009b      	lsls	r3, r3, #2
 800332a:	440b      	add	r3, r1
 800332c:	6818      	ldr	r0, [r3, #0]
 800332e:	4949      	ldr	r1, [pc, #292]	; (8003454 <set_dido+0x350>)
 8003330:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003334:	4613      	mov	r3, r2
 8003336:	009b      	lsls	r3, r3, #2
 8003338:	4413      	add	r3, r2
 800333a:	009b      	lsls	r3, r3, #2
 800333c:	440b      	add	r3, r1
 800333e:	3306      	adds	r3, #6
 8003340:	881b      	ldrh	r3, [r3, #0]
 8003342:	4619      	mov	r1, r3
 8003344:	f004 fc74 	bl	8007c30 <HAL_GPIO_ReadPin>
 8003348:	4603      	mov	r3, r0
 800334a:	461a      	mov	r2, r3
 800334c:	7afb      	ldrb	r3, [r7, #11]
 800334e:	4293      	cmp	r3, r2
 8003350:	d12c      	bne.n	80033ac <set_dido+0x2a8>
					{
						Status_OCD[j] = !VAR_OUT;
 8003352:	7abb      	ldrb	r3, [r7, #10]
 8003354:	2b00      	cmp	r3, #0
 8003356:	bf0c      	ite	eq
 8003358:	2301      	moveq	r3, #1
 800335a:	2300      	movne	r3, #0
 800335c:	b2db      	uxtb	r3, r3
 800335e:	4619      	mov	r1, r3
 8003360:	4a40      	ldr	r2, [pc, #256]	; (8003464 <set_dido+0x360>)
 8003362:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003366:	4413      	add	r3, r2
 8003368:	460a      	mov	r2, r1
 800336a:	701a      	strb	r2, [r3, #0]
						HAL_GPIO_WritePin(DiDo[i].D_OUT, DiDo[i].OCD_Pin, !VAR_OUT);
 800336c:	4939      	ldr	r1, [pc, #228]	; (8003454 <set_dido+0x350>)
 800336e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003372:	4613      	mov	r3, r2
 8003374:	009b      	lsls	r3, r3, #2
 8003376:	4413      	add	r3, r2
 8003378:	009b      	lsls	r3, r3, #2
 800337a:	440b      	add	r3, r1
 800337c:	3308      	adds	r3, #8
 800337e:	6818      	ldr	r0, [r3, #0]
 8003380:	4934      	ldr	r1, [pc, #208]	; (8003454 <set_dido+0x350>)
 8003382:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003386:	4613      	mov	r3, r2
 8003388:	009b      	lsls	r3, r3, #2
 800338a:	4413      	add	r3, r2
 800338c:	009b      	lsls	r3, r3, #2
 800338e:	440b      	add	r3, r1
 8003390:	330e      	adds	r3, #14
 8003392:	8819      	ldrh	r1, [r3, #0]
 8003394:	7abb      	ldrb	r3, [r7, #10]
 8003396:	2b00      	cmp	r3, #0
 8003398:	bf0c      	ite	eq
 800339a:	2301      	moveq	r3, #1
 800339c:	2300      	movne	r3, #0
 800339e:	b2db      	uxtb	r3, r3
 80033a0:	461a      	mov	r2, r3
 80033a2:	f004 fc5d 	bl	8007c60 <HAL_GPIO_WritePin>
						SEND_str("miss...\n");
 80033a6:	4831      	ldr	r0, [pc, #196]	; (800346c <set_dido+0x368>)
 80033a8:	f7fe fdb2 	bl	8001f10 <SEND_str>
					}

					//----------------------------------For debuging----------------------------------
					if(DiDo[i].D_IN == VHOD1)
 80033ac:	4929      	ldr	r1, [pc, #164]	; (8003454 <set_dido+0x350>)
 80033ae:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80033b2:	4613      	mov	r3, r2
 80033b4:	009b      	lsls	r3, r3, #2
 80033b6:	4413      	add	r3, r2
 80033b8:	009b      	lsls	r3, r3, #2
 80033ba:	440b      	add	r3, r1
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a2c      	ldr	r2, [pc, #176]	; (8003470 <set_dido+0x36c>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d102      	bne.n	80033ca <set_dido+0x2c6>
						SEND_str("1 - success...\n");
 80033c4:	482b      	ldr	r0, [pc, #172]	; (8003474 <set_dido+0x370>)
 80033c6:	f7fe fda3 	bl	8001f10 <SEND_str>
					if(DiDo[i].VAR_IN == VAR_IN)
 80033ca:	4922      	ldr	r1, [pc, #136]	; (8003454 <set_dido+0x350>)
 80033cc:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80033d0:	4613      	mov	r3, r2
 80033d2:	009b      	lsls	r3, r3, #2
 80033d4:	4413      	add	r3, r2
 80033d6:	009b      	lsls	r3, r3, #2
 80033d8:	440b      	add	r3, r1
 80033da:	3304      	adds	r3, #4
 80033dc:	781b      	ldrb	r3, [r3, #0]
 80033de:	7afa      	ldrb	r2, [r7, #11]
 80033e0:	429a      	cmp	r2, r3
 80033e2:	d102      	bne.n	80033ea <set_dido+0x2e6>
						SEND_str("2 - success...\n");
 80033e4:	4824      	ldr	r0, [pc, #144]	; (8003478 <set_dido+0x374>)
 80033e6:	f7fe fd93 	bl	8001f10 <SEND_str>
					if(DiDo[i].D_OUT == VIHOD3)
 80033ea:	491a      	ldr	r1, [pc, #104]	; (8003454 <set_dido+0x350>)
 80033ec:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80033f0:	4613      	mov	r3, r2
 80033f2:	009b      	lsls	r3, r3, #2
 80033f4:	4413      	add	r3, r2
 80033f6:	009b      	lsls	r3, r3, #2
 80033f8:	440b      	add	r3, r1
 80033fa:	3308      	adds	r3, #8
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a1f      	ldr	r2, [pc, #124]	; (800347c <set_dido+0x378>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d102      	bne.n	800340a <set_dido+0x306>
						SEND_str("3 - success...\n");
 8003404:	481e      	ldr	r0, [pc, #120]	; (8003480 <set_dido+0x37c>)
 8003406:	f7fe fd83 	bl	8001f10 <SEND_str>
					if(DiDo[i].VAR_OUT == VAR_OUT)
 800340a:	4912      	ldr	r1, [pc, #72]	; (8003454 <set_dido+0x350>)
 800340c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003410:	4613      	mov	r3, r2
 8003412:	009b      	lsls	r3, r3, #2
 8003414:	4413      	add	r3, r2
 8003416:	009b      	lsls	r3, r3, #2
 8003418:	440b      	add	r3, r1
 800341a:	330c      	adds	r3, #12
 800341c:	781b      	ldrb	r3, [r3, #0]
 800341e:	7aba      	ldrb	r2, [r7, #10]
 8003420:	429a      	cmp	r2, r3
 8003422:	d10e      	bne.n	8003442 <set_dido+0x33e>
						SEND_str("4 - success...\n");
 8003424:	4817      	ldr	r0, [pc, #92]	; (8003484 <set_dido+0x380>)
 8003426:	f7fe fd73 	bl	8001f10 <SEND_str>
					//--------------------------------------------------------------------------------

					break;
 800342a:	e00a      	b.n	8003442 <set_dido+0x33e>
			for(int j = 0; j < 8; j++)
 800342c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003430:	3301      	adds	r3, #1
 8003432:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003436:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800343a:	2b07      	cmp	r3, #7
 800343c:	f77f aef6 	ble.w	800322c <set_dido+0x128>
				}
			}
			break;
 8003440:	e02d      	b.n	800349e <set_dido+0x39a>
					break;
 8003442:	bf00      	nop
			break;
 8003444:	e02b      	b.n	800349e <set_dido+0x39a>
 8003446:	bf00      	nop
 8003448:	0801cab4 	.word	0x0801cab4
 800344c:	0801cb04 	.word	0x0801cb04
 8003450:	0801cb54 	.word	0x0801cb54
 8003454:	20000710 	.word	0x20000710
 8003458:	20000008 	.word	0x20000008
 800345c:	20000028 	.word	0x20000028
 8003460:	20000048 	.word	0x20000048
 8003464:	20000338 	.word	0x20000338
 8003468:	0801ca5c 	.word	0x0801ca5c
 800346c:	0801ca68 	.word	0x0801ca68
 8003470:	40020c00 	.word	0x40020c00
 8003474:	0801ca74 	.word	0x0801ca74
 8003478:	0801ca84 	.word	0x0801ca84
 800347c:	40020400 	.word	0x40020400
 8003480:	0801ca94 	.word	0x0801ca94
 8003484:	0801caa4 	.word	0x0801caa4
	for(int i = 0; i < 8; i++)
 8003488:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800348c:	3301      	adds	r3, #1
 800348e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003492:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003496:	2b07      	cmp	r3, #7
 8003498:	f77f ae58 	ble.w	800314c <set_dido+0x48>
		}
	}
}
 800349c:	bf00      	nop
 800349e:	bf00      	nop
 80034a0:	37cc      	adds	r7, #204	; 0xcc
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd90      	pop	{r4, r7, pc}
 80034a6:	bf00      	nop

080034a8 <set_vaido>:
//Принимает "RANGE_LOW" - нижний предел значений
//Принимает "RANGE_HIGH" - верхний предел значений
//Принимает "D_OUT" - строку с номером цифрового выхода
//Принимает "VAR_OUT" - переменная состояния выхода
void set_vaido(char *A_IN, double RANGE_LOW, double RANGE_HIGH, char *D_OUT, uint8_t VAR_OUT)
{
 80034a8:	b5b0      	push	{r4, r5, r7, lr}
 80034aa:	b0b2      	sub	sp, #200	; 0xc8
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	61f8      	str	r0, [r7, #28]
 80034b0:	ed87 0b04 	vstr	d0, [r7, #16]
 80034b4:	ed87 1b02 	vstr	d1, [r7, #8]
 80034b8:	61b9      	str	r1, [r7, #24]
 80034ba:	4613      	mov	r3, r2
 80034bc:	71fb      	strb	r3, [r7, #7]
	char VHOD[4][10] = {"VHOD1", "VHOD2", "VHOD3", "VHOD4"};
 80034be:	4b93      	ldr	r3, [pc, #588]	; (800370c <set_vaido+0x264>)
 80034c0:	f107 0498 	add.w	r4, r7, #152	; 0x98
 80034c4:	461d      	mov	r5, r3
 80034c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80034c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80034ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80034cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80034ce:	e895 0003 	ldmia.w	r5, {r0, r1}
 80034d2:	e884 0003 	stmia.w	r4, {r0, r1}
	char VIHOD[8][10] = {"VIHOD1", "VIHOD2", "VIHOD3", "VIHOD4", "VIHOD5", "VIHOD6", "VIHOD7", "VIHOD8"};
 80034d6:	4a8e      	ldr	r2, [pc, #568]	; (8003710 <set_vaido+0x268>)
 80034d8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80034dc:	4611      	mov	r1, r2
 80034de:	2250      	movs	r2, #80	; 0x50
 80034e0:	4618      	mov	r0, r3
 80034e2:	f013 fc81 	bl	8016de8 <memcpy>

	uint8_t pVHOD[4] = {ADC1_IN3, ADC1_IN4, ADC1_IN5, ADC1_IN6};
 80034e6:	4b8b      	ldr	r3, [pc, #556]	; (8003714 <set_vaido+0x26c>)
 80034e8:	647b      	str	r3, [r7, #68]	; 0x44

	for(int i = 0; i < 4; i++)
 80034ea:	2300      	movs	r3, #0
 80034ec:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80034f0:	e102      	b.n	80036f8 <set_vaido+0x250>
	{
		if(strcmp(A_IN, VHOD[i]) == 0)
 80034f2:	f107 0198 	add.w	r1, r7, #152	; 0x98
 80034f6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80034fa:	4613      	mov	r3, r2
 80034fc:	009b      	lsls	r3, r3, #2
 80034fe:	4413      	add	r3, r2
 8003500:	005b      	lsls	r3, r3, #1
 8003502:	440b      	add	r3, r1
 8003504:	4619      	mov	r1, r3
 8003506:	69f8      	ldr	r0, [r7, #28]
 8003508:	f7fc fe62 	bl	80001d0 <strcmp>
 800350c:	4603      	mov	r3, r0
 800350e:	2b00      	cmp	r3, #0
 8003510:	f040 80ed 	bne.w	80036ee <set_vaido+0x246>
		{
			if(VAiDo[i].clrFlag != false)
 8003514:	4980      	ldr	r1, [pc, #512]	; (8003718 <set_vaido+0x270>)
 8003516:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800351a:	4613      	mov	r3, r2
 800351c:	009b      	lsls	r3, r3, #2
 800351e:	4413      	add	r3, r2
 8003520:	00db      	lsls	r3, r3, #3
 8003522:	440b      	add	r3, r1
 8003524:	3320      	adds	r3, #32
 8003526:	781b      	ldrb	r3, [r3, #0]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d017      	beq.n	800355c <set_vaido+0xb4>
				HAL_GPIO_WritePin(VAiDo[i].D_OUT, VAiDo[i].OCD_Pin, RESET);
 800352c:	497a      	ldr	r1, [pc, #488]	; (8003718 <set_vaido+0x270>)
 800352e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003532:	4613      	mov	r3, r2
 8003534:	009b      	lsls	r3, r3, #2
 8003536:	4413      	add	r3, r2
 8003538:	00db      	lsls	r3, r3, #3
 800353a:	440b      	add	r3, r1
 800353c:	3318      	adds	r3, #24
 800353e:	6818      	ldr	r0, [r3, #0]
 8003540:	4975      	ldr	r1, [pc, #468]	; (8003718 <set_vaido+0x270>)
 8003542:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003546:	4613      	mov	r3, r2
 8003548:	009b      	lsls	r3, r3, #2
 800354a:	4413      	add	r3, r2
 800354c:	00db      	lsls	r3, r3, #3
 800354e:	440b      	add	r3, r1
 8003550:	331e      	adds	r3, #30
 8003552:	881b      	ldrh	r3, [r3, #0]
 8003554:	2200      	movs	r2, #0
 8003556:	4619      	mov	r1, r3
 8003558:	f004 fb82 	bl	8007c60 <HAL_GPIO_WritePin>

			VAiDo[i].clrFlag = true;
 800355c:	496e      	ldr	r1, [pc, #440]	; (8003718 <set_vaido+0x270>)
 800355e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003562:	4613      	mov	r3, r2
 8003564:	009b      	lsls	r3, r3, #2
 8003566:	4413      	add	r3, r2
 8003568:	00db      	lsls	r3, r3, #3
 800356a:	440b      	add	r3, r1
 800356c:	3320      	adds	r3, #32
 800356e:	2201      	movs	r2, #1
 8003570:	701a      	strb	r2, [r3, #0]
			VAiDo[i].A_IN = pVHOD[i];
 8003572:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8003576:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800357a:	4413      	add	r3, r2
 800357c:	7818      	ldrb	r0, [r3, #0]
 800357e:	4966      	ldr	r1, [pc, #408]	; (8003718 <set_vaido+0x270>)
 8003580:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003584:	4613      	mov	r3, r2
 8003586:	009b      	lsls	r3, r3, #2
 8003588:	4413      	add	r3, r2
 800358a:	00db      	lsls	r3, r3, #3
 800358c:	440b      	add	r3, r1
 800358e:	4602      	mov	r2, r0
 8003590:	701a      	strb	r2, [r3, #0]
			VAiDo[i].RANGE_LOW = RANGE_LOW;
 8003592:	4961      	ldr	r1, [pc, #388]	; (8003718 <set_vaido+0x270>)
 8003594:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003598:	4613      	mov	r3, r2
 800359a:	009b      	lsls	r3, r3, #2
 800359c:	4413      	add	r3, r2
 800359e:	00db      	lsls	r3, r3, #3
 80035a0:	440b      	add	r3, r1
 80035a2:	f103 0108 	add.w	r1, r3, #8
 80035a6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80035aa:	e9c1 2300 	strd	r2, r3, [r1]
			VAiDo[i].RANGE_HIGH = RANGE_HIGH;
 80035ae:	495a      	ldr	r1, [pc, #360]	; (8003718 <set_vaido+0x270>)
 80035b0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80035b4:	4613      	mov	r3, r2
 80035b6:	009b      	lsls	r3, r3, #2
 80035b8:	4413      	add	r3, r2
 80035ba:	00db      	lsls	r3, r3, #3
 80035bc:	440b      	add	r3, r1
 80035be:	f103 0110 	add.w	r1, r3, #16
 80035c2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80035c6:	e9c1 2300 	strd	r2, r3, [r1]
			//DiDo[i].DIN_Pin = DIN_Pin[i];
			for(int j = 0; j < 8; j++)
 80035ca:	2300      	movs	r3, #0
 80035cc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80035d0:	e087      	b.n	80036e2 <set_vaido+0x23a>
			{
				if(strcmp(D_OUT, VIHOD[j]) == 0)
 80035d2:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80035d6:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80035da:	4613      	mov	r3, r2
 80035dc:	009b      	lsls	r3, r3, #2
 80035de:	4413      	add	r3, r2
 80035e0:	005b      	lsls	r3, r3, #1
 80035e2:	440b      	add	r3, r1
 80035e4:	4619      	mov	r1, r3
 80035e6:	69b8      	ldr	r0, [r7, #24]
 80035e8:	f7fc fdf2 	bl	80001d0 <strcmp>
 80035ec:	4603      	mov	r3, r0
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d172      	bne.n	80036d8 <set_vaido+0x230>
				{
					VAiDo[i].D_OUT = pVIHOD[j];
 80035f2:	4a4a      	ldr	r2, [pc, #296]	; (800371c <set_vaido+0x274>)
 80035f4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80035f8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80035fc:	4846      	ldr	r0, [pc, #280]	; (8003718 <set_vaido+0x270>)
 80035fe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003602:	4613      	mov	r3, r2
 8003604:	009b      	lsls	r3, r3, #2
 8003606:	4413      	add	r3, r2
 8003608:	00db      	lsls	r3, r3, #3
 800360a:	4403      	add	r3, r0
 800360c:	3318      	adds	r3, #24
 800360e:	6019      	str	r1, [r3, #0]
					VAiDo[i].VAR_OUT = VAR_OUT;
 8003610:	4941      	ldr	r1, [pc, #260]	; (8003718 <set_vaido+0x270>)
 8003612:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003616:	4613      	mov	r3, r2
 8003618:	009b      	lsls	r3, r3, #2
 800361a:	4413      	add	r3, r2
 800361c:	00db      	lsls	r3, r3, #3
 800361e:	440b      	add	r3, r1
 8003620:	331c      	adds	r3, #28
 8003622:	79fa      	ldrb	r2, [r7, #7]
 8003624:	701a      	strb	r2, [r3, #0]
					VAiDo[i].OCD_Pin = OCD_Pin[j];
 8003626:	4a3e      	ldr	r2, [pc, #248]	; (8003720 <set_vaido+0x278>)
 8003628:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800362c:	f832 0013 	ldrh.w	r0, [r2, r3, lsl #1]
 8003630:	4939      	ldr	r1, [pc, #228]	; (8003718 <set_vaido+0x270>)
 8003632:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003636:	4613      	mov	r3, r2
 8003638:	009b      	lsls	r3, r3, #2
 800363a:	4413      	add	r3, r2
 800363c:	00db      	lsls	r3, r3, #3
 800363e:	440b      	add	r3, r1
 8003640:	331e      	adds	r3, #30
 8003642:	4602      	mov	r2, r0
 8003644:	801a      	strh	r2, [r3, #0]

					//------------------------------------------------
					char Buff[32];
					SEND_str("SET VALUE: ");
 8003646:	4837      	ldr	r0, [pc, #220]	; (8003724 <set_vaido+0x27c>)
 8003648:	f7fe fc62 	bl	8001f10 <SEND_str>
					sprintf(Buff, "%.3f", adcValue[i]);
 800364c:	4a36      	ldr	r2, [pc, #216]	; (8003728 <set_vaido+0x280>)
 800364e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003652:	00db      	lsls	r3, r3, #3
 8003654:	4413      	add	r3, r2
 8003656:	e9d3 2300 	ldrd	r2, r3, [r3]
 800365a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800365e:	4933      	ldr	r1, [pc, #204]	; (800372c <set_vaido+0x284>)
 8003660:	f014 f9a2 	bl	80179a8 <siprintf>
					SEND_str(Buff);
 8003664:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003668:	4618      	mov	r0, r3
 800366a:	f7fe fc51 	bl	8001f10 <SEND_str>
					SEND_str("\nRANGE_LOW: ");
 800366e:	4830      	ldr	r0, [pc, #192]	; (8003730 <set_vaido+0x288>)
 8003670:	f7fe fc4e 	bl	8001f10 <SEND_str>
					sprintf(Buff, "%.3f", VAiDo[i].RANGE_LOW);
 8003674:	4928      	ldr	r1, [pc, #160]	; (8003718 <set_vaido+0x270>)
 8003676:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800367a:	4613      	mov	r3, r2
 800367c:	009b      	lsls	r3, r3, #2
 800367e:	4413      	add	r3, r2
 8003680:	00db      	lsls	r3, r3, #3
 8003682:	440b      	add	r3, r1
 8003684:	3308      	adds	r3, #8
 8003686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800368a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800368e:	4927      	ldr	r1, [pc, #156]	; (800372c <set_vaido+0x284>)
 8003690:	f014 f98a 	bl	80179a8 <siprintf>
					SEND_str(Buff);
 8003694:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003698:	4618      	mov	r0, r3
 800369a:	f7fe fc39 	bl	8001f10 <SEND_str>
					SEND_str("\nRANGE_HIGH: ");
 800369e:	4825      	ldr	r0, [pc, #148]	; (8003734 <set_vaido+0x28c>)
 80036a0:	f7fe fc36 	bl	8001f10 <SEND_str>
					sprintf(Buff, "%.3f", VAiDo[i].RANGE_HIGH);
 80036a4:	491c      	ldr	r1, [pc, #112]	; (8003718 <set_vaido+0x270>)
 80036a6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80036aa:	4613      	mov	r3, r2
 80036ac:	009b      	lsls	r3, r3, #2
 80036ae:	4413      	add	r3, r2
 80036b0:	00db      	lsls	r3, r3, #3
 80036b2:	440b      	add	r3, r1
 80036b4:	3310      	adds	r3, #16
 80036b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036ba:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80036be:	491b      	ldr	r1, [pc, #108]	; (800372c <set_vaido+0x284>)
 80036c0:	f014 f972 	bl	80179a8 <siprintf>
					SEND_str(Buff);
 80036c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80036c8:	4618      	mov	r0, r3
 80036ca:	f7fe fc21 	bl	8001f10 <SEND_str>
					SEND_str("\n");
 80036ce:	481a      	ldr	r0, [pc, #104]	; (8003738 <set_vaido+0x290>)
 80036d0:	f7fe fc1e 	bl	8001f10 <SEND_str>
					//------------------------------------------------

					break;
 80036d4:	bf00      	nop
				}
			}
			break;
 80036d6:	e015      	b.n	8003704 <set_vaido+0x25c>
			for(int j = 0; j < 8; j++)
 80036d8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80036dc:	3301      	adds	r3, #1
 80036de:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80036e2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80036e6:	2b07      	cmp	r3, #7
 80036e8:	f77f af73 	ble.w	80035d2 <set_vaido+0x12a>
			break;
 80036ec:	e00a      	b.n	8003704 <set_vaido+0x25c>
	for(int i = 0; i < 4; i++)
 80036ee:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80036f2:	3301      	adds	r3, #1
 80036f4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80036f8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80036fc:	2b03      	cmp	r3, #3
 80036fe:	f77f aef8 	ble.w	80034f2 <set_vaido+0x4a>
		}
	}
}
 8003702:	bf00      	nop
 8003704:	bf00      	nop
 8003706:	37c8      	adds	r7, #200	; 0xc8
 8003708:	46bd      	mov	sp, r7
 800370a:	bdb0      	pop	{r4, r5, r7, pc}
 800370c:	0801cb9c 	.word	0x0801cb9c
 8003710:	0801cb04 	.word	0x0801cb04
 8003714:	04030201 	.word	0x04030201
 8003718:	20000670 	.word	0x20000670
 800371c:	20000028 	.word	0x20000028
 8003720:	20000048 	.word	0x20000048
 8003724:	0801cb64 	.word	0x0801cb64
 8003728:	20000300 	.word	0x20000300
 800372c:	0801cb70 	.word	0x0801cb70
 8003730:	0801cb78 	.word	0x0801cb78
 8003734:	0801cb88 	.word	0x0801cb88
 8003738:	0801cb98 	.word	0x0801cb98

0800373c <set_pwm>:
//Задать сигнал ШИМ на одном выходе
//Принимает "PWM_OUT" - строку с номером ШИМ выхода
//Принимает "D_CYCLE" - коэффициент заполнения ШИМ
void set_pwm(char *PWM_OUT, uint32_t D_CYCLE)
{
 800373c:	b5b0      	push	{r4, r5, r7, lr}
 800373e:	b094      	sub	sp, #80	; 0x50
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
 8003744:	6039      	str	r1, [r7, #0]
	char PVIHOD[4][5] = {"PWM1", "PWM2", "PWM3", "PWM4"};
 8003746:	4b4b      	ldr	r3, [pc, #300]	; (8003874 <set_pwm+0x138>)
 8003748:	f107 0438 	add.w	r4, r7, #56	; 0x38
 800374c:	461d      	mov	r5, r3
 800374e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003750:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003752:	682b      	ldr	r3, [r5, #0]
 8003754:	6023      	str	r3, [r4, #0]
	uint32_t PWM_Channel[4] = {TIM_CHANNEL_1, TIM_CHANNEL_2, TIM_CHANNEL_3, TIM_CHANNEL_4};
 8003756:	4b48      	ldr	r3, [pc, #288]	; (8003878 <set_pwm+0x13c>)
 8003758:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800375c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800375e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	for(int i = 0; i < 4; i++)
 8003762:	2300      	movs	r3, #0
 8003764:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003766:	e07c      	b.n	8003862 <set_pwm+0x126>
	{
		if(strcmp(PWM_OUT, PVIHOD[i]) == 0)
 8003768:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800376c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800376e:	4613      	mov	r3, r2
 8003770:	009b      	lsls	r3, r3, #2
 8003772:	4413      	add	r3, r2
 8003774:	440b      	add	r3, r1
 8003776:	4619      	mov	r1, r3
 8003778:	6878      	ldr	r0, [r7, #4]
 800377a:	f7fc fd29 	bl	80001d0 <strcmp>
 800377e:	4603      	mov	r3, r0
 8003780:	2b00      	cmp	r3, #0
 8003782:	d16b      	bne.n	800385c <set_pwm+0x120>
		{
			if(PWM[i].clrFlag != false)
 8003784:	4a3d      	ldr	r2, [pc, #244]	; (800387c <set_pwm+0x140>)
 8003786:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003788:	00db      	lsls	r3, r3, #3
 800378a:	4413      	add	r3, r2
 800378c:	799b      	ldrb	r3, [r3, #6]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d00b      	beq.n	80037aa <set_pwm+0x6e>
				HAL_TIM_PWM_Start_DMA(&htim3, PWM_Channel[i], 0, 1);
 8003792:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003794:	009b      	lsls	r3, r3, #2
 8003796:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800379a:	4413      	add	r3, r2
 800379c:	f853 1c28 	ldr.w	r1, [r3, #-40]
 80037a0:	2301      	movs	r3, #1
 80037a2:	2200      	movs	r2, #0
 80037a4:	4836      	ldr	r0, [pc, #216]	; (8003880 <set_pwm+0x144>)
 80037a6:	f005 ff65 	bl	8009674 <HAL_TIM_PWM_Start_DMA>

			PWM[i].clrFlag = true;
 80037aa:	4a34      	ldr	r2, [pc, #208]	; (800387c <set_pwm+0x140>)
 80037ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037ae:	00db      	lsls	r3, r3, #3
 80037b0:	4413      	add	r3, r2
 80037b2:	2201      	movs	r2, #1
 80037b4:	719a      	strb	r2, [r3, #6]
			PWM[i].PWM_Channel = PWM_Channel[i];
 80037b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037b8:	009b      	lsls	r3, r3, #2
 80037ba:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80037be:	4413      	add	r3, r2
 80037c0:	f853 2c28 	ldr.w	r2, [r3, #-40]
 80037c4:	492d      	ldr	r1, [pc, #180]	; (800387c <set_pwm+0x140>)
 80037c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037c8:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
			PWM[i].D_CYCLE[0] = (D_CYCLE * 100);
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	b29b      	uxth	r3, r3
 80037d0:	461a      	mov	r2, r3
 80037d2:	0092      	lsls	r2, r2, #2
 80037d4:	4413      	add	r3, r2
 80037d6:	461a      	mov	r2, r3
 80037d8:	0091      	lsls	r1, r2, #2
 80037da:	461a      	mov	r2, r3
 80037dc:	460b      	mov	r3, r1
 80037de:	4413      	add	r3, r2
 80037e0:	009b      	lsls	r3, r3, #2
 80037e2:	b299      	uxth	r1, r3
 80037e4:	4a25      	ldr	r2, [pc, #148]	; (800387c <set_pwm+0x140>)
 80037e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037e8:	00db      	lsls	r3, r3, #3
 80037ea:	4413      	add	r3, r2
 80037ec:	460a      	mov	r2, r1
 80037ee:	809a      	strh	r2, [r3, #4]
			HAL_TIM_PWM_Start_DMA(&htim3, PWM_Channel[i], (uint32_t*)PWM[i].D_CYCLE, 1);
 80037f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037f2:	009b      	lsls	r3, r3, #2
 80037f4:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80037f8:	4413      	add	r3, r2
 80037fa:	f853 1c28 	ldr.w	r1, [r3, #-40]
 80037fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003800:	00db      	lsls	r3, r3, #3
 8003802:	4a1e      	ldr	r2, [pc, #120]	; (800387c <set_pwm+0x140>)
 8003804:	4413      	add	r3, r2
 8003806:	1d1a      	adds	r2, r3, #4
 8003808:	2301      	movs	r3, #1
 800380a:	481d      	ldr	r0, [pc, #116]	; (8003880 <set_pwm+0x144>)
 800380c:	f005 ff32 	bl	8009674 <HAL_TIM_PWM_Start_DMA>

			//------------------------------------------------
			char Buff[32];
			SEND_str("PWM_OUT: ");
 8003810:	481c      	ldr	r0, [pc, #112]	; (8003884 <set_pwm+0x148>)
 8003812:	f7fe fb7d 	bl	8001f10 <SEND_str>
			SEND_str(PVIHOD[i]);
 8003816:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800381a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800381c:	4613      	mov	r3, r2
 800381e:	009b      	lsls	r3, r3, #2
 8003820:	4413      	add	r3, r2
 8003822:	440b      	add	r3, r1
 8003824:	4618      	mov	r0, r3
 8003826:	f7fe fb73 	bl	8001f10 <SEND_str>
			SEND_str("\n");
 800382a:	4817      	ldr	r0, [pc, #92]	; (8003888 <set_pwm+0x14c>)
 800382c:	f7fe fb70 	bl	8001f10 <SEND_str>
			SEND_str("DUTY_CYCLE: ");
 8003830:	4816      	ldr	r0, [pc, #88]	; (800388c <set_pwm+0x150>)
 8003832:	f7fe fb6d 	bl	8001f10 <SEND_str>
			sprintf(Buff, "%d", D_CYCLE);
 8003836:	f107 0308 	add.w	r3, r7, #8
 800383a:	683a      	ldr	r2, [r7, #0]
 800383c:	4914      	ldr	r1, [pc, #80]	; (8003890 <set_pwm+0x154>)
 800383e:	4618      	mov	r0, r3
 8003840:	f014 f8b2 	bl	80179a8 <siprintf>
			SEND_str(Buff);
 8003844:	f107 0308 	add.w	r3, r7, #8
 8003848:	4618      	mov	r0, r3
 800384a:	f7fe fb61 	bl	8001f10 <SEND_str>
			SEND_str("%");
 800384e:	4811      	ldr	r0, [pc, #68]	; (8003894 <set_pwm+0x158>)
 8003850:	f7fe fb5e 	bl	8001f10 <SEND_str>
			SEND_str("\n");
 8003854:	480c      	ldr	r0, [pc, #48]	; (8003888 <set_pwm+0x14c>)
 8003856:	f7fe fb5b 	bl	8001f10 <SEND_str>
			//------------------------------------------------

			break;
 800385a:	e007      	b.n	800386c <set_pwm+0x130>
	for(int i = 0; i < 4; i++)
 800385c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800385e:	3301      	adds	r3, #1
 8003860:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003862:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003864:	2b03      	cmp	r3, #3
 8003866:	f77f af7f 	ble.w	8003768 <set_pwm+0x2c>
		}
	}
}
 800386a:	bf00      	nop
 800386c:	bf00      	nop
 800386e:	3750      	adds	r7, #80	; 0x50
 8003870:	46bd      	mov	sp, r7
 8003872:	bdb0      	pop	{r4, r5, r7, pc}
 8003874:	0801cbe8 	.word	0x0801cbe8
 8003878:	0801cbfc 	.word	0x0801cbfc
 800387c:	20000650 	.word	0x20000650
 8003880:	200009c8 	.word	0x200009c8
 8003884:	0801cbc4 	.word	0x0801cbc4
 8003888:	0801cb98 	.word	0x0801cb98
 800388c:	0801cbd0 	.word	0x0801cbd0
 8003890:	0801cbe0 	.word	0x0801cbe0
 8003894:	0801cbe4 	.word	0x0801cbe4

08003898 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800389c:	f001 fec6 	bl	800562c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80038a0:	f000 f862 	bl	8003968 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80038a4:	f7fe fca4 	bl	80021f0 <MX_GPIO_Init>
  MX_DMA_Init();
 80038a8:	f7fe fc54 	bl	8002154 <MX_DMA_Init>
  MX_ADC1_Init();
 80038ac:	f7fd fb5e 	bl	8000f6c <MX_ADC1_Init>
  MX_SPI1_Init();
 80038b0:	f000 f9d8 	bl	8003c64 <MX_SPI1_Init>
  MX_SPI2_Init();
 80038b4:	f000 fa0c 	bl	8003cd0 <MX_SPI2_Init>
  MX_TIM3_Init();
 80038b8:	f001 faa4 	bl	8004e04 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 80038bc:	f001 fcd0 	bl	8005260 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80038c0:	f001 fcf8 	bl	80052b4 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80038c4:	f001 fd20 	bl	8005308 <MX_USART3_UART_Init>
  MX_LWIP_Init();
 80038c8:	f007 f9c2 	bl	800ac50 <MX_LWIP_Init>
  MX_TIM4_Init();
 80038cc:	f001 fb16 	bl	8004efc <MX_TIM4_Init>
  MX_RTC_Init();
 80038d0:	f000 f958 	bl	8003b84 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

	HAL_Delay(5000);
 80038d4:	f241 3088 	movw	r0, #5000	; 0x1388
 80038d8:	f001 feea 	bl	80056b0 <HAL_Delay>

	EN_Interrupt();	//Для дебага по USART3
 80038dc:	f001 fe56 	bl	800558c <EN_Interrupt>
	//Для организации обмена данными по ethernet нужно включить:
	//net_ini(); MX_LWIP_Process();(Вкл в main) также закоментить в файле stm32f4xx_it.c строчки для отладки через DEBUG_main();


	//----------------ADC_test----------------
	HAL_GPIO_WritePin(GPIOE, S1_Pin, RESET);												//Вход аналогового комутатора - выход линии 1
 80038e0:	2200      	movs	r2, #0
 80038e2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80038e6:	4818      	ldr	r0, [pc, #96]	; (8003948 <main+0xb0>)
 80038e8:	f004 f9ba 	bl	8007c60 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, S2_Pin, RESET);
 80038ec:	2200      	movs	r2, #0
 80038ee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80038f2:	4815      	ldr	r0, [pc, #84]	; (8003948 <main+0xb0>)
 80038f4:	f004 f9b4 	bl	8007c60 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, S3_Pin, RESET);
 80038f8:	2200      	movs	r2, #0
 80038fa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80038fe:	4812      	ldr	r0, [pc, #72]	; (8003948 <main+0xb0>)
 8003900:	f004 f9ae 	bl	8007c60 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, S4_Pin, RESET);
 8003904:	2200      	movs	r2, #0
 8003906:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800390a:	480f      	ldr	r0, [pc, #60]	; (8003948 <main+0xb0>)
 800390c:	f004 f9a8 	bl	8007c60 <HAL_GPIO_WritePin>

	//HAL_ADCEx_Calibration_Start(&hadc1);
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&adc, 4); // стартуем АЦП
 8003910:	2204      	movs	r2, #4
 8003912:	490e      	ldr	r1, [pc, #56]	; (800394c <main+0xb4>)
 8003914:	480e      	ldr	r0, [pc, #56]	; (8003950 <main+0xb8>)
 8003916:	f001 ff33 	bl	8005780 <HAL_ADC_Start_DMA>
	HAL_TIM_OC_Start(&htim4, TIM_CHANNEL_4);
 800391a:	210c      	movs	r1, #12
 800391c:	480d      	ldr	r0, [pc, #52]	; (8003954 <main+0xbc>)
 800391e:	f005 fe3f 	bl	80095a0 <HAL_TIM_OC_Start>
	//HAL_ADC_Start_IT(&hadc1); // это здесь не нужно
	//----------------------------------------

	//------------------------------------1-WIRE_test-------------------------------

	HAL_GPIO_WritePin(GPIOD, PWR0_Pin, RESET);
 8003922:	2200      	movs	r2, #0
 8003924:	2104      	movs	r1, #4
 8003926:	480c      	ldr	r0, [pc, #48]	; (8003958 <main+0xc0>)
 8003928:	f004 f99a 	bl	8007c60 <HAL_GPIO_WritePin>
	//------------------------------------------------------------------------------


//	HAL_UART_Receive_IT(&huart3,(uint8_t*)str_ethernet,1);								//Настройка прерывания COM для отладки ETH (!?)

	HAL_SPI_TransmitReceive_IT(&hspi2, (uint8_t *)SPI_tx_buf, (uint8_t *)SPI_rx_buf, 1);	//Настройка прерывания по spi для МК
 800392c:	2301      	movs	r3, #1
 800392e:	4a0b      	ldr	r2, [pc, #44]	; (800395c <main+0xc4>)
 8003930:	490b      	ldr	r1, [pc, #44]	; (8003960 <main+0xc8>)
 8003932:	480c      	ldr	r0, [pc, #48]	; (8003964 <main+0xcc>)
 8003934:	f005 fa12 	bl	8008d5c <HAL_SPI_TransmitReceive_IT>
		//----------------------------------------
		 */

		///*
		//--------------SPI_test_MK---------------
		SPI_available();	//Необходимо переделать так чтобы на дисплее был только статус вывода.
 8003938:	f000 fb2c 	bl	8003f94 <SPI_available>
//		  }



		//------------------DEBUG-----------------
		DEBUG_main();
 800393c:	f7fe fb04 	bl	8001f48 <DEBUG_main>
//			HAL_Delay(250);
//			ReInitFlag = 0;
//			CheckReWrite();
//			SEND_str("interrupt...");
//			SEND_str("\n");
		CheckReWriteVAiDo();
 8003940:	f7ff fb4e 	bl	8002fe0 <CheckReWriteVAiDo>
		SPI_available();	//Необходимо переделать так чтобы на дисплее был только статус вывода.
 8003944:	e7f8      	b.n	8003938 <main+0xa0>
 8003946:	bf00      	nop
 8003948:	40021000 	.word	0x40021000
 800394c:	200002f8 	.word	0x200002f8
 8003950:	200005a8 	.word	0x200005a8
 8003954:	20000928 	.word	0x20000928
 8003958:	40020c00 	.word	0x40020c00
 800395c:	20000348 	.word	0x20000348
 8003960:	2000034c 	.word	0x2000034c
 8003964:	20000838 	.word	0x20000838

08003968 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b098      	sub	sp, #96	; 0x60
 800396c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800396e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003972:	2230      	movs	r2, #48	; 0x30
 8003974:	2100      	movs	r1, #0
 8003976:	4618      	mov	r0, r3
 8003978:	f013 fa5e 	bl	8016e38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800397c:	f107 031c 	add.w	r3, r7, #28
 8003980:	2200      	movs	r2, #0
 8003982:	601a      	str	r2, [r3, #0]
 8003984:	605a      	str	r2, [r3, #4]
 8003986:	609a      	str	r2, [r3, #8]
 8003988:	60da      	str	r2, [r3, #12]
 800398a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800398c:	f107 030c 	add.w	r3, r7, #12
 8003990:	2200      	movs	r2, #0
 8003992:	601a      	str	r2, [r3, #0]
 8003994:	605a      	str	r2, [r3, #4]
 8003996:	609a      	str	r2, [r3, #8]
 8003998:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800399a:	2300      	movs	r3, #0
 800399c:	60bb      	str	r3, [r7, #8]
 800399e:	4b31      	ldr	r3, [pc, #196]	; (8003a64 <SystemClock_Config+0xfc>)
 80039a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039a2:	4a30      	ldr	r2, [pc, #192]	; (8003a64 <SystemClock_Config+0xfc>)
 80039a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039a8:	6413      	str	r3, [r2, #64]	; 0x40
 80039aa:	4b2e      	ldr	r3, [pc, #184]	; (8003a64 <SystemClock_Config+0xfc>)
 80039ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039b2:	60bb      	str	r3, [r7, #8]
 80039b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80039b6:	2300      	movs	r3, #0
 80039b8:	607b      	str	r3, [r7, #4]
 80039ba:	4b2b      	ldr	r3, [pc, #172]	; (8003a68 <SystemClock_Config+0x100>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a2a      	ldr	r2, [pc, #168]	; (8003a68 <SystemClock_Config+0x100>)
 80039c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80039c4:	6013      	str	r3, [r2, #0]
 80039c6:	4b28      	ldr	r3, [pc, #160]	; (8003a68 <SystemClock_Config+0x100>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039ce:	607b      	str	r3, [r7, #4]
 80039d0:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 80039d2:	2305      	movs	r3, #5
 80039d4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80039d6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80039da:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80039dc:	2301      	movs	r3, #1
 80039de:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80039e0:	2302      	movs	r3, #2
 80039e2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80039e4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80039e8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80039ea:	2304      	movs	r3, #4
 80039ec:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 168;
 80039ee:	23a8      	movs	r3, #168	; 0xa8
 80039f0:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80039f2:	2302      	movs	r3, #2
 80039f4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80039f6:	2304      	movs	r3, #4
 80039f8:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80039fa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80039fe:	4618      	mov	r0, r3
 8003a00:	f004 f960 	bl	8007cc4 <HAL_RCC_OscConfig>
 8003a04:	4603      	mov	r3, r0
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d001      	beq.n	8003a0e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8003a0a:	f000 f8b3 	bl	8003b74 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003a0e:	230f      	movs	r3, #15
 8003a10:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003a12:	2302      	movs	r3, #2
 8003a14:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003a16:	2300      	movs	r3, #0
 8003a18:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003a1a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003a1e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003a20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003a24:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003a26:	f107 031c 	add.w	r3, r7, #28
 8003a2a:	2105      	movs	r1, #5
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	f004 fbb9 	bl	80081a4 <HAL_RCC_ClockConfig>
 8003a32:	4603      	mov	r3, r0
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d001      	beq.n	8003a3c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8003a38:	f000 f89c 	bl	8003b74 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003a3c:	2302      	movs	r3, #2
 8003a3e:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8003a40:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003a44:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003a46:	f107 030c 	add.w	r3, r7, #12
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	f004 fdd8 	bl	8008600 <HAL_RCCEx_PeriphCLKConfig>
 8003a50:	4603      	mov	r3, r0
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d001      	beq.n	8003a5a <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8003a56:	f000 f88d 	bl	8003b74 <Error_Handler>
  }
}
 8003a5a:	bf00      	nop
 8003a5c:	3760      	adds	r7, #96	; 0x60
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bd80      	pop	{r7, pc}
 8003a62:	bf00      	nop
 8003a64:	40023800 	.word	0x40023800
 8003a68:	40007000 	.word	0x40007000

08003a6c <HAL_GPIO_EXTI_Callback>:
//	{
//		UART3_RxCpltCallback();
//	}
}
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b082      	sub	sp, #8
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	4603      	mov	r3, r0
 8003a74:	80fb      	strh	r3, [r7, #6]
//			VCP_send_buffer_new("START\n",6);
//		delay(2000);
//	}
//	if(!ReInitFlag)
//		ReInitFlag = 1;
	CheckReWriteDiDo();
 8003a76:	f7ff f9f7 	bl	8002e68 <CheckReWriteDiDo>
//	else
//	{
//		__NOP();
//	}
}
 8003a7a:	bf00      	nop
 8003a7c:	3708      	adds	r7, #8
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bd80      	pop	{r7, pc}
	...

08003a84 <HAL_SPI_TxRxCpltCallback>:
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003a84:	b480      	push	{r7}
 8003a86:	b083      	sub	sp, #12
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]

	  //Написать обработчик сообщенй по SPI от MCU

	if(hspi == &hspi2)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	4a0a      	ldr	r2, [pc, #40]	; (8003ab8 <HAL_SPI_TxRxCpltCallback+0x34>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d10b      	bne.n	8003aac <HAL_SPI_TxRxCpltCallback+0x28>
	{
	    if(!hspi2.TxXferCount && !flag_iput_spi2)
 8003a94:	4b08      	ldr	r3, [pc, #32]	; (8003ab8 <HAL_SPI_TxRxCpltCallback+0x34>)
 8003a96:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a98:	b29b      	uxth	r3, r3
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d106      	bne.n	8003aac <HAL_SPI_TxRxCpltCallback+0x28>
 8003a9e:	4b07      	ldr	r3, [pc, #28]	; (8003abc <HAL_SPI_TxRxCpltCallback+0x38>)
 8003aa0:	781b      	ldrb	r3, [r3, #0]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d102      	bne.n	8003aac <HAL_SPI_TxRxCpltCallback+0x28>
	    {
	    	flag_iput_spi2 = 1;
 8003aa6:	4b05      	ldr	r3, [pc, #20]	; (8003abc <HAL_SPI_TxRxCpltCallback+0x38>)
 8003aa8:	2201      	movs	r2, #1
 8003aaa:	701a      	strb	r2, [r3, #0]
	    }
	}
}
 8003aac:	bf00      	nop
 8003aae:	370c      	adds	r7, #12
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab6:	4770      	bx	lr
 8003ab8:	20000838 	.word	0x20000838
 8003abc:	2000034d 	.word	0x2000034d

08003ac0 <HAL_ADC_ConvCpltCallback>:
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b082      	sub	sp, #8
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
    if(hadc->Instance == ADC1)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a1d      	ldr	r2, [pc, #116]	; (8003b44 <HAL_ADC_ConvCpltCallback+0x84>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d133      	bne.n	8003b3a <HAL_ADC_ConvCpltCallback+0x7a>
//    	flag = 1;
//        snprintf(trans_str, 63, "ADC %.3f %.3f %.3f %.3f\n", Conversion_ADC1((uint16_t)adc[0]), Conversion_ADC1((uint16_t)adc[1]),
//        											 Conversion_ADC1((uint16_t)adc[2]), Conversion_ADC1((uint16_t)adc[3]));
        //HAL_UART_Transmit(&huart3, (uint8_t*)trans_str, strlen(trans_str), 1000);

        adcValue[0] = Conversion_ADC1((uint16_t)adc[0]);
 8003ad2:	4b1d      	ldr	r3, [pc, #116]	; (8003b48 <HAL_ADC_ConvCpltCallback+0x88>)
 8003ad4:	881b      	ldrh	r3, [r3, #0]
 8003ad6:	b29b      	uxth	r3, r3
 8003ad8:	4618      	mov	r0, r3
 8003ada:	f7fd fb3d 	bl	8001158 <Conversion_ADC1>
 8003ade:	eeb0 7a40 	vmov.f32	s14, s0
 8003ae2:	eef0 7a60 	vmov.f32	s15, s1
 8003ae6:	4b19      	ldr	r3, [pc, #100]	; (8003b4c <HAL_ADC_ConvCpltCallback+0x8c>)
 8003ae8:	ed83 7b00 	vstr	d7, [r3]
        adcValue[1] = Conversion_ADC1((uint16_t)adc[1]);
 8003aec:	4b16      	ldr	r3, [pc, #88]	; (8003b48 <HAL_ADC_ConvCpltCallback+0x88>)
 8003aee:	885b      	ldrh	r3, [r3, #2]
 8003af0:	b29b      	uxth	r3, r3
 8003af2:	4618      	mov	r0, r3
 8003af4:	f7fd fb30 	bl	8001158 <Conversion_ADC1>
 8003af8:	eeb0 7a40 	vmov.f32	s14, s0
 8003afc:	eef0 7a60 	vmov.f32	s15, s1
 8003b00:	4b12      	ldr	r3, [pc, #72]	; (8003b4c <HAL_ADC_ConvCpltCallback+0x8c>)
 8003b02:	ed83 7b02 	vstr	d7, [r3, #8]
        adcValue[2] = Conversion_ADC1((uint16_t)adc[2]);
 8003b06:	4b10      	ldr	r3, [pc, #64]	; (8003b48 <HAL_ADC_ConvCpltCallback+0x88>)
 8003b08:	889b      	ldrh	r3, [r3, #4]
 8003b0a:	b29b      	uxth	r3, r3
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	f7fd fb23 	bl	8001158 <Conversion_ADC1>
 8003b12:	eeb0 7a40 	vmov.f32	s14, s0
 8003b16:	eef0 7a60 	vmov.f32	s15, s1
 8003b1a:	4b0c      	ldr	r3, [pc, #48]	; (8003b4c <HAL_ADC_ConvCpltCallback+0x8c>)
 8003b1c:	ed83 7b04 	vstr	d7, [r3, #16]
        adcValue[3] = Conversion_ADC1((uint16_t)adc[3]);
 8003b20:	4b09      	ldr	r3, [pc, #36]	; (8003b48 <HAL_ADC_ConvCpltCallback+0x88>)
 8003b22:	88db      	ldrh	r3, [r3, #6]
 8003b24:	b29b      	uxth	r3, r3
 8003b26:	4618      	mov	r0, r3
 8003b28:	f7fd fb16 	bl	8001158 <Conversion_ADC1>
 8003b2c:	eeb0 7a40 	vmov.f32	s14, s0
 8003b30:	eef0 7a60 	vmov.f32	s15, s1
 8003b34:	4b05      	ldr	r3, [pc, #20]	; (8003b4c <HAL_ADC_ConvCpltCallback+0x8c>)
 8003b36:	ed83 7b06 	vstr	d7, [r3, #24]
    }
}
 8003b3a:	bf00      	nop
 8003b3c:	3708      	adds	r7, #8
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bd80      	pop	{r7, pc}
 8003b42:	bf00      	nop
 8003b44:	40012000 	.word	0x40012000
 8003b48:	200002f8 	.word	0x200002f8
 8003b4c:	20000300 	.word	0x20000300

08003b50 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b082      	sub	sp, #8
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a04      	ldr	r2, [pc, #16]	; (8003b70 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d101      	bne.n	8003b66 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8003b62:	f001 fd85 	bl	8005670 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003b66:	bf00      	nop
 8003b68:	3708      	adds	r7, #8
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}
 8003b6e:	bf00      	nop
 8003b70:	40010000 	.word	0x40010000

08003b74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003b74:	b480      	push	{r7}
 8003b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003b78:	bf00      	nop
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b80:	4770      	bx	lr
	...

08003b84 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b086      	sub	sp, #24
 8003b88:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef sTime = {0};
 8003b8a:	1d3b      	adds	r3, r7, #4
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	601a      	str	r2, [r3, #0]
 8003b90:	605a      	str	r2, [r3, #4]
 8003b92:	609a      	str	r2, [r3, #8]
 8003b94:	60da      	str	r2, [r3, #12]
 8003b96:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8003b98:	2300      	movs	r3, #0
 8003b9a:	603b      	str	r3, [r7, #0]

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8003b9c:	4b24      	ldr	r3, [pc, #144]	; (8003c30 <MX_RTC_Init+0xac>)
 8003b9e:	4a25      	ldr	r2, [pc, #148]	; (8003c34 <MX_RTC_Init+0xb0>)
 8003ba0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8003ba2:	4b23      	ldr	r3, [pc, #140]	; (8003c30 <MX_RTC_Init+0xac>)
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8003ba8:	4b21      	ldr	r3, [pc, #132]	; (8003c30 <MX_RTC_Init+0xac>)
 8003baa:	227f      	movs	r2, #127	; 0x7f
 8003bac:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8003bae:	4b20      	ldr	r3, [pc, #128]	; (8003c30 <MX_RTC_Init+0xac>)
 8003bb0:	22ff      	movs	r2, #255	; 0xff
 8003bb2:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003bb4:	4b1e      	ldr	r3, [pc, #120]	; (8003c30 <MX_RTC_Init+0xac>)
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003bba:	4b1d      	ldr	r3, [pc, #116]	; (8003c30 <MX_RTC_Init+0xac>)
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003bc0:	4b1b      	ldr	r3, [pc, #108]	; (8003c30 <MX_RTC_Init+0xac>)
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003bc6:	481a      	ldr	r0, [pc, #104]	; (8003c30 <MX_RTC_Init+0xac>)
 8003bc8:	f004 fdfc 	bl	80087c4 <HAL_RTC_Init>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d001      	beq.n	8003bd6 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8003bd2:	f7ff ffcf 	bl	8003b74 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 10;
 8003bd6:	230a      	movs	r3, #10
 8003bd8:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 34;
 8003bda:	2322      	movs	r3, #34	; 0x22
 8003bdc:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 8003bde:	2300      	movs	r3, #0
 8003be0:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003be2:	2300      	movs	r3, #0
 8003be4:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8003be6:	2300      	movs	r3, #0
 8003be8:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8003bea:	1d3b      	adds	r3, r7, #4
 8003bec:	2200      	movs	r2, #0
 8003bee:	4619      	mov	r1, r3
 8003bf0:	480f      	ldr	r0, [pc, #60]	; (8003c30 <MX_RTC_Init+0xac>)
 8003bf2:	f004 fe78 	bl	80088e6 <HAL_RTC_SetTime>
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d001      	beq.n	8003c00 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8003bfc:	f7ff ffba 	bl	8003b74 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_TUESDAY;
 8003c00:	2302      	movs	r3, #2
 8003c02:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_APRIL;
 8003c04:	2304      	movs	r3, #4
 8003c06:	707b      	strb	r3, [r7, #1]
  sDate.Date = 20;
 8003c08:	2314      	movs	r3, #20
 8003c0a:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 21;
 8003c0c:	2315      	movs	r3, #21
 8003c0e:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8003c10:	463b      	mov	r3, r7
 8003c12:	2200      	movs	r2, #0
 8003c14:	4619      	mov	r1, r3
 8003c16:	4806      	ldr	r0, [pc, #24]	; (8003c30 <MX_RTC_Init+0xac>)
 8003c18:	f004 ff22 	bl	8008a60 <HAL_RTC_SetDate>
 8003c1c:	4603      	mov	r3, r0
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d001      	beq.n	8003c26 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8003c22:	f7ff ffa7 	bl	8003b74 <Error_Handler>
  }

}
 8003c26:	bf00      	nop
 8003c28:	3718      	adds	r7, #24
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bd80      	pop	{r7, pc}
 8003c2e:	bf00      	nop
 8003c30:	20000818 	.word	0x20000818
 8003c34:	40002800 	.word	0x40002800

08003c38 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b083      	sub	sp, #12
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a05      	ldr	r2, [pc, #20]	; (8003c5c <HAL_RTC_MspInit+0x24>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d102      	bne.n	8003c50 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003c4a:	4b05      	ldr	r3, [pc, #20]	; (8003c60 <HAL_RTC_MspInit+0x28>)
 8003c4c:	2201      	movs	r2, #1
 8003c4e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8003c50:	bf00      	nop
 8003c52:	370c      	adds	r7, #12
 8003c54:	46bd      	mov	sp, r7
 8003c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5a:	4770      	bx	lr
 8003c5c:	40002800 	.word	0x40002800
 8003c60:	42470e3c 	.word	0x42470e3c

08003c64 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8003c68:	4b17      	ldr	r3, [pc, #92]	; (8003cc8 <MX_SPI1_Init+0x64>)
 8003c6a:	4a18      	ldr	r2, [pc, #96]	; (8003ccc <MX_SPI1_Init+0x68>)
 8003c6c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003c6e:	4b16      	ldr	r3, [pc, #88]	; (8003cc8 <MX_SPI1_Init+0x64>)
 8003c70:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003c74:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003c76:	4b14      	ldr	r3, [pc, #80]	; (8003cc8 <MX_SPI1_Init+0x64>)
 8003c78:	2200      	movs	r2, #0
 8003c7a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003c7c:	4b12      	ldr	r3, [pc, #72]	; (8003cc8 <MX_SPI1_Init+0x64>)
 8003c7e:	2200      	movs	r2, #0
 8003c80:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003c82:	4b11      	ldr	r3, [pc, #68]	; (8003cc8 <MX_SPI1_Init+0x64>)
 8003c84:	2200      	movs	r2, #0
 8003c86:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003c88:	4b0f      	ldr	r3, [pc, #60]	; (8003cc8 <MX_SPI1_Init+0x64>)
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003c8e:	4b0e      	ldr	r3, [pc, #56]	; (8003cc8 <MX_SPI1_Init+0x64>)
 8003c90:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c94:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003c96:	4b0c      	ldr	r3, [pc, #48]	; (8003cc8 <MX_SPI1_Init+0x64>)
 8003c98:	2200      	movs	r2, #0
 8003c9a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003c9c:	4b0a      	ldr	r3, [pc, #40]	; (8003cc8 <MX_SPI1_Init+0x64>)
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003ca2:	4b09      	ldr	r3, [pc, #36]	; (8003cc8 <MX_SPI1_Init+0x64>)
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ca8:	4b07      	ldr	r3, [pc, #28]	; (8003cc8 <MX_SPI1_Init+0x64>)
 8003caa:	2200      	movs	r2, #0
 8003cac:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003cae:	4b06      	ldr	r3, [pc, #24]	; (8003cc8 <MX_SPI1_Init+0x64>)
 8003cb0:	220a      	movs	r2, #10
 8003cb2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003cb4:	4804      	ldr	r0, [pc, #16]	; (8003cc8 <MX_SPI1_Init+0x64>)
 8003cb6:	f004 ffec 	bl	8008c92 <HAL_SPI_Init>
 8003cba:	4603      	mov	r3, r0
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d001      	beq.n	8003cc4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003cc0:	f7ff ff58 	bl	8003b74 <Error_Handler>
  }

}
 8003cc4:	bf00      	nop
 8003cc6:	bd80      	pop	{r7, pc}
 8003cc8:	20000890 	.word	0x20000890
 8003ccc:	40013000 	.word	0x40013000

08003cd0 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 8003cd4:	4b15      	ldr	r3, [pc, #84]	; (8003d2c <MX_SPI2_Init+0x5c>)
 8003cd6:	4a16      	ldr	r2, [pc, #88]	; (8003d30 <MX_SPI2_Init+0x60>)
 8003cd8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 8003cda:	4b14      	ldr	r3, [pc, #80]	; (8003d2c <MX_SPI2_Init+0x5c>)
 8003cdc:	2200      	movs	r2, #0
 8003cde:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003ce0:	4b12      	ldr	r3, [pc, #72]	; (8003d2c <MX_SPI2_Init+0x5c>)
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003ce6:	4b11      	ldr	r3, [pc, #68]	; (8003d2c <MX_SPI2_Init+0x5c>)
 8003ce8:	2200      	movs	r2, #0
 8003cea:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003cec:	4b0f      	ldr	r3, [pc, #60]	; (8003d2c <MX_SPI2_Init+0x5c>)
 8003cee:	2200      	movs	r2, #0
 8003cf0:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003cf2:	4b0e      	ldr	r3, [pc, #56]	; (8003d2c <MX_SPI2_Init+0x5c>)
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 8003cf8:	4b0c      	ldr	r3, [pc, #48]	; (8003d2c <MX_SPI2_Init+0x5c>)
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	619a      	str	r2, [r3, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003cfe:	4b0b      	ldr	r3, [pc, #44]	; (8003d2c <MX_SPI2_Init+0x5c>)
 8003d00:	2200      	movs	r2, #0
 8003d02:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003d04:	4b09      	ldr	r3, [pc, #36]	; (8003d2c <MX_SPI2_Init+0x5c>)
 8003d06:	2200      	movs	r2, #0
 8003d08:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d0a:	4b08      	ldr	r3, [pc, #32]	; (8003d2c <MX_SPI2_Init+0x5c>)
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8003d10:	4b06      	ldr	r3, [pc, #24]	; (8003d2c <MX_SPI2_Init+0x5c>)
 8003d12:	220a      	movs	r2, #10
 8003d14:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003d16:	4805      	ldr	r0, [pc, #20]	; (8003d2c <MX_SPI2_Init+0x5c>)
 8003d18:	f004 ffbb 	bl	8008c92 <HAL_SPI_Init>
 8003d1c:	4603      	mov	r3, r0
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d001      	beq.n	8003d26 <MX_SPI2_Init+0x56>
  {
    Error_Handler();
 8003d22:	f7ff ff27 	bl	8003b74 <Error_Handler>
  }

}
 8003d26:	bf00      	nop
 8003d28:	bd80      	pop	{r7, pc}
 8003d2a:	bf00      	nop
 8003d2c:	20000838 	.word	0x20000838
 8003d30:	40003800 	.word	0x40003800

08003d34 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b08c      	sub	sp, #48	; 0x30
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d3c:	f107 031c 	add.w	r3, r7, #28
 8003d40:	2200      	movs	r2, #0
 8003d42:	601a      	str	r2, [r3, #0]
 8003d44:	605a      	str	r2, [r3, #4]
 8003d46:	609a      	str	r2, [r3, #8]
 8003d48:	60da      	str	r2, [r3, #12]
 8003d4a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a45      	ldr	r2, [pc, #276]	; (8003e68 <HAL_SPI_MspInit+0x134>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d12c      	bne.n	8003db0 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003d56:	2300      	movs	r3, #0
 8003d58:	61bb      	str	r3, [r7, #24]
 8003d5a:	4b44      	ldr	r3, [pc, #272]	; (8003e6c <HAL_SPI_MspInit+0x138>)
 8003d5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d5e:	4a43      	ldr	r2, [pc, #268]	; (8003e6c <HAL_SPI_MspInit+0x138>)
 8003d60:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003d64:	6453      	str	r3, [r2, #68]	; 0x44
 8003d66:	4b41      	ldr	r3, [pc, #260]	; (8003e6c <HAL_SPI_MspInit+0x138>)
 8003d68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d6a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d6e:	61bb      	str	r3, [r7, #24]
 8003d70:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d72:	2300      	movs	r3, #0
 8003d74:	617b      	str	r3, [r7, #20]
 8003d76:	4b3d      	ldr	r3, [pc, #244]	; (8003e6c <HAL_SPI_MspInit+0x138>)
 8003d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d7a:	4a3c      	ldr	r2, [pc, #240]	; (8003e6c <HAL_SPI_MspInit+0x138>)
 8003d7c:	f043 0302 	orr.w	r3, r3, #2
 8003d80:	6313      	str	r3, [r2, #48]	; 0x30
 8003d82:	4b3a      	ldr	r3, [pc, #232]	; (8003e6c <HAL_SPI_MspInit+0x138>)
 8003d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d86:	f003 0302 	and.w	r3, r3, #2
 8003d8a:	617b      	str	r3, [r7, #20]
 8003d8c:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SCK_Pin|MISO_Pin|MOSI_Pin;
 8003d8e:	2338      	movs	r3, #56	; 0x38
 8003d90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d92:	2302      	movs	r3, #2
 8003d94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d96:	2300      	movs	r3, #0
 8003d98:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d9a:	2303      	movs	r3, #3
 8003d9c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003d9e:	2305      	movs	r3, #5
 8003da0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003da2:	f107 031c 	add.w	r3, r7, #28
 8003da6:	4619      	mov	r1, r3
 8003da8:	4831      	ldr	r0, [pc, #196]	; (8003e70 <HAL_SPI_MspInit+0x13c>)
 8003daa:	f003 fda5 	bl	80078f8 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8003dae:	e057      	b.n	8003e60 <HAL_SPI_MspInit+0x12c>
  else if(spiHandle->Instance==SPI2)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a2f      	ldr	r2, [pc, #188]	; (8003e74 <HAL_SPI_MspInit+0x140>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d152      	bne.n	8003e60 <HAL_SPI_MspInit+0x12c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003dba:	2300      	movs	r3, #0
 8003dbc:	613b      	str	r3, [r7, #16]
 8003dbe:	4b2b      	ldr	r3, [pc, #172]	; (8003e6c <HAL_SPI_MspInit+0x138>)
 8003dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dc2:	4a2a      	ldr	r2, [pc, #168]	; (8003e6c <HAL_SPI_MspInit+0x138>)
 8003dc4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003dc8:	6413      	str	r3, [r2, #64]	; 0x40
 8003dca:	4b28      	ldr	r3, [pc, #160]	; (8003e6c <HAL_SPI_MspInit+0x138>)
 8003dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003dd2:	613b      	str	r3, [r7, #16]
 8003dd4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	60fb      	str	r3, [r7, #12]
 8003dda:	4b24      	ldr	r3, [pc, #144]	; (8003e6c <HAL_SPI_MspInit+0x138>)
 8003ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dde:	4a23      	ldr	r2, [pc, #140]	; (8003e6c <HAL_SPI_MspInit+0x138>)
 8003de0:	f043 0304 	orr.w	r3, r3, #4
 8003de4:	6313      	str	r3, [r2, #48]	; 0x30
 8003de6:	4b21      	ldr	r3, [pc, #132]	; (8003e6c <HAL_SPI_MspInit+0x138>)
 8003de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dea:	f003 0304 	and.w	r3, r3, #4
 8003dee:	60fb      	str	r3, [r7, #12]
 8003df0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003df2:	2300      	movs	r3, #0
 8003df4:	60bb      	str	r3, [r7, #8]
 8003df6:	4b1d      	ldr	r3, [pc, #116]	; (8003e6c <HAL_SPI_MspInit+0x138>)
 8003df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dfa:	4a1c      	ldr	r2, [pc, #112]	; (8003e6c <HAL_SPI_MspInit+0x138>)
 8003dfc:	f043 0302 	orr.w	r3, r3, #2
 8003e00:	6313      	str	r3, [r2, #48]	; 0x30
 8003e02:	4b1a      	ldr	r3, [pc, #104]	; (8003e6c <HAL_SPI_MspInit+0x138>)
 8003e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e06:	f003 0302 	and.w	r3, r3, #2
 8003e0a:	60bb      	str	r3, [r7, #8]
 8003e0c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = MISO_M_Pin|MOSI_M_Pin;
 8003e0e:	230c      	movs	r3, #12
 8003e10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e12:	2302      	movs	r3, #2
 8003e14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e16:	2300      	movs	r3, #0
 8003e18:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e1a:	2303      	movs	r3, #3
 8003e1c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003e1e:	2305      	movs	r3, #5
 8003e20:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003e22:	f107 031c 	add.w	r3, r7, #28
 8003e26:	4619      	mov	r1, r3
 8003e28:	4813      	ldr	r0, [pc, #76]	; (8003e78 <HAL_SPI_MspInit+0x144>)
 8003e2a:	f003 fd65 	bl	80078f8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SCK_M_Pin|GPIO_PIN_9;
 8003e2e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003e32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e34:	2302      	movs	r3, #2
 8003e36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e38:	2300      	movs	r3, #0
 8003e3a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e3c:	2303      	movs	r3, #3
 8003e3e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003e40:	2305      	movs	r3, #5
 8003e42:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e44:	f107 031c 	add.w	r3, r7, #28
 8003e48:	4619      	mov	r1, r3
 8003e4a:	4809      	ldr	r0, [pc, #36]	; (8003e70 <HAL_SPI_MspInit+0x13c>)
 8003e4c:	f003 fd54 	bl	80078f8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8003e50:	2200      	movs	r2, #0
 8003e52:	2100      	movs	r1, #0
 8003e54:	2024      	movs	r0, #36	; 0x24
 8003e56:	f002 f8f1 	bl	800603c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8003e5a:	2024      	movs	r0, #36	; 0x24
 8003e5c:	f002 f90a 	bl	8006074 <HAL_NVIC_EnableIRQ>
}
 8003e60:	bf00      	nop
 8003e62:	3730      	adds	r7, #48	; 0x30
 8003e64:	46bd      	mov	sp, r7
 8003e66:	bd80      	pop	{r7, pc}
 8003e68:	40013000 	.word	0x40013000
 8003e6c:	40023800 	.word	0x40023800
 8003e70:	40020400 	.word	0x40020400
 8003e74:	40003800 	.word	0x40003800
 8003e78:	40020800 	.word	0x40020800

08003e7c <ReWriteOCD>:
//char trans_str[64] = {0,};


//Функция обновления значений в массиве данных коллекторных выходов
void ReWriteOCD(void)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	af00      	add	r7, sp, #0
	if(Status_OCD[0])
 8003e80:	4b40      	ldr	r3, [pc, #256]	; (8003f84 <ReWriteOCD+0x108>)
 8003e82:	781b      	ldrb	r3, [r3, #0]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d005      	beq.n	8003e94 <ReWriteOCD+0x18>
		HAL_GPIO_WritePin(O0_GPIO_Port, O0_Pin, SET);
 8003e88:	2201      	movs	r2, #1
 8003e8a:	2101      	movs	r1, #1
 8003e8c:	483e      	ldr	r0, [pc, #248]	; (8003f88 <ReWriteOCD+0x10c>)
 8003e8e:	f003 fee7 	bl	8007c60 <HAL_GPIO_WritePin>
 8003e92:	e004      	b.n	8003e9e <ReWriteOCD+0x22>
	else
		HAL_GPIO_WritePin(O0_GPIO_Port, O0_Pin, RESET);
 8003e94:	2200      	movs	r2, #0
 8003e96:	2101      	movs	r1, #1
 8003e98:	483b      	ldr	r0, [pc, #236]	; (8003f88 <ReWriteOCD+0x10c>)
 8003e9a:	f003 fee1 	bl	8007c60 <HAL_GPIO_WritePin>
	if(Status_OCD[1])
 8003e9e:	4b39      	ldr	r3, [pc, #228]	; (8003f84 <ReWriteOCD+0x108>)
 8003ea0:	785b      	ldrb	r3, [r3, #1]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d005      	beq.n	8003eb2 <ReWriteOCD+0x36>
		HAL_GPIO_WritePin(O1_GPIO_Port, O1_Pin, SET);
 8003ea6:	2201      	movs	r2, #1
 8003ea8:	2101      	movs	r1, #1
 8003eaa:	4838      	ldr	r0, [pc, #224]	; (8003f8c <ReWriteOCD+0x110>)
 8003eac:	f003 fed8 	bl	8007c60 <HAL_GPIO_WritePin>
 8003eb0:	e004      	b.n	8003ebc <ReWriteOCD+0x40>
	else
		HAL_GPIO_WritePin(O1_GPIO_Port, O1_Pin, RESET);
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	2101      	movs	r1, #1
 8003eb6:	4835      	ldr	r0, [pc, #212]	; (8003f8c <ReWriteOCD+0x110>)
 8003eb8:	f003 fed2 	bl	8007c60 <HAL_GPIO_WritePin>
	if(Status_OCD[2])
 8003ebc:	4b31      	ldr	r3, [pc, #196]	; (8003f84 <ReWriteOCD+0x108>)
 8003ebe:	789b      	ldrb	r3, [r3, #2]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d005      	beq.n	8003ed0 <ReWriteOCD+0x54>
		HAL_GPIO_WritePin(O2_GPIO_Port, O2_Pin, SET);
 8003ec4:	2201      	movs	r2, #1
 8003ec6:	2102      	movs	r1, #2
 8003ec8:	4830      	ldr	r0, [pc, #192]	; (8003f8c <ReWriteOCD+0x110>)
 8003eca:	f003 fec9 	bl	8007c60 <HAL_GPIO_WritePin>
 8003ece:	e004      	b.n	8003eda <ReWriteOCD+0x5e>
	else
		HAL_GPIO_WritePin(O2_GPIO_Port, O2_Pin, RESET);
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	2102      	movs	r1, #2
 8003ed4:	482d      	ldr	r0, [pc, #180]	; (8003f8c <ReWriteOCD+0x110>)
 8003ed6:	f003 fec3 	bl	8007c60 <HAL_GPIO_WritePin>
	if(Status_OCD[3])
 8003eda:	4b2a      	ldr	r3, [pc, #168]	; (8003f84 <ReWriteOCD+0x108>)
 8003edc:	78db      	ldrb	r3, [r3, #3]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d005      	beq.n	8003eee <ReWriteOCD+0x72>
		HAL_GPIO_WritePin(O3_GPIO_Port, O3_Pin, SET);
 8003ee2:	2201      	movs	r2, #1
 8003ee4:	2180      	movs	r1, #128	; 0x80
 8003ee6:	482a      	ldr	r0, [pc, #168]	; (8003f90 <ReWriteOCD+0x114>)
 8003ee8:	f003 feba 	bl	8007c60 <HAL_GPIO_WritePin>
 8003eec:	e004      	b.n	8003ef8 <ReWriteOCD+0x7c>
	else
		HAL_GPIO_WritePin(O3_GPIO_Port, O3_Pin, RESET);
 8003eee:	2200      	movs	r2, #0
 8003ef0:	2180      	movs	r1, #128	; 0x80
 8003ef2:	4827      	ldr	r0, [pc, #156]	; (8003f90 <ReWriteOCD+0x114>)
 8003ef4:	f003 feb4 	bl	8007c60 <HAL_GPIO_WritePin>
	if(Status_OCD[4])
 8003ef8:	4b22      	ldr	r3, [pc, #136]	; (8003f84 <ReWriteOCD+0x108>)
 8003efa:	791b      	ldrb	r3, [r3, #4]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d006      	beq.n	8003f0e <ReWriteOCD+0x92>
		HAL_GPIO_WritePin(O4_GPIO_Port, O4_Pin, SET);
 8003f00:	2201      	movs	r2, #1
 8003f02:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003f06:	4822      	ldr	r0, [pc, #136]	; (8003f90 <ReWriteOCD+0x114>)
 8003f08:	f003 feaa 	bl	8007c60 <HAL_GPIO_WritePin>
 8003f0c:	e005      	b.n	8003f1a <ReWriteOCD+0x9e>
	else
		HAL_GPIO_WritePin(O4_GPIO_Port, O4_Pin, RESET);
 8003f0e:	2200      	movs	r2, #0
 8003f10:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003f14:	481e      	ldr	r0, [pc, #120]	; (8003f90 <ReWriteOCD+0x114>)
 8003f16:	f003 fea3 	bl	8007c60 <HAL_GPIO_WritePin>
	if(Status_OCD[5])
 8003f1a:	4b1a      	ldr	r3, [pc, #104]	; (8003f84 <ReWriteOCD+0x108>)
 8003f1c:	795b      	ldrb	r3, [r3, #5]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d006      	beq.n	8003f30 <ReWriteOCD+0xb4>
		HAL_GPIO_WritePin(O5_GPIO_Port, O5_Pin, SET);
 8003f22:	2201      	movs	r2, #1
 8003f24:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003f28:	4819      	ldr	r0, [pc, #100]	; (8003f90 <ReWriteOCD+0x114>)
 8003f2a:	f003 fe99 	bl	8007c60 <HAL_GPIO_WritePin>
 8003f2e:	e005      	b.n	8003f3c <ReWriteOCD+0xc0>
	else
		HAL_GPIO_WritePin(O5_GPIO_Port, O5_Pin, RESET);
 8003f30:	2200      	movs	r2, #0
 8003f32:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003f36:	4816      	ldr	r0, [pc, #88]	; (8003f90 <ReWriteOCD+0x114>)
 8003f38:	f003 fe92 	bl	8007c60 <HAL_GPIO_WritePin>
	if(Status_OCD[6])
 8003f3c:	4b11      	ldr	r3, [pc, #68]	; (8003f84 <ReWriteOCD+0x108>)
 8003f3e:	799b      	ldrb	r3, [r3, #6]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d006      	beq.n	8003f52 <ReWriteOCD+0xd6>
		HAL_GPIO_WritePin(O6_GPIO_Port, O6_Pin, SET);
 8003f44:	2201      	movs	r2, #1
 8003f46:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003f4a:	4811      	ldr	r0, [pc, #68]	; (8003f90 <ReWriteOCD+0x114>)
 8003f4c:	f003 fe88 	bl	8007c60 <HAL_GPIO_WritePin>
 8003f50:	e005      	b.n	8003f5e <ReWriteOCD+0xe2>
	else
		HAL_GPIO_WritePin(O6_GPIO_Port, O6_Pin, RESET);
 8003f52:	2200      	movs	r2, #0
 8003f54:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003f58:	480d      	ldr	r0, [pc, #52]	; (8003f90 <ReWriteOCD+0x114>)
 8003f5a:	f003 fe81 	bl	8007c60 <HAL_GPIO_WritePin>
	if(Status_OCD[7])
 8003f5e:	4b09      	ldr	r3, [pc, #36]	; (8003f84 <ReWriteOCD+0x108>)
 8003f60:	79db      	ldrb	r3, [r3, #7]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d006      	beq.n	8003f74 <ReWriteOCD+0xf8>
		HAL_GPIO_WritePin(O7_GPIO_Port, O7_Pin, SET);
 8003f66:	2201      	movs	r2, #1
 8003f68:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003f6c:	4808      	ldr	r0, [pc, #32]	; (8003f90 <ReWriteOCD+0x114>)
 8003f6e:	f003 fe77 	bl	8007c60 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(O7_GPIO_Port, O7_Pin, RESET);
}
 8003f72:	e005      	b.n	8003f80 <ReWriteOCD+0x104>
		HAL_GPIO_WritePin(O7_GPIO_Port, O7_Pin, RESET);
 8003f74:	2200      	movs	r2, #0
 8003f76:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003f7a:	4805      	ldr	r0, [pc, #20]	; (8003f90 <ReWriteOCD+0x114>)
 8003f7c:	f003 fe70 	bl	8007c60 <HAL_GPIO_WritePin>
}
 8003f80:	bf00      	nop
 8003f82:	bd80      	pop	{r7, pc}
 8003f84:	20000338 	.word	0x20000338
 8003f88:	40020000 	.word	0x40020000
 8003f8c:	40020400 	.word	0x40020400
 8003f90:	40021000 	.word	0x40021000

08003f94 <SPI_available>:
		HAL_GPIO_WritePin(WR1_GPIO_Port, WR1_Pin, RESET);
}
//Функция обработки посылок от интрефейсного МК
//Обновляет значения в массивах данных входов/выходов
void SPI_available(void)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	af00      	add	r7, sp, #0
	if(flag_iput_spi2)
 8003f98:	4bd6      	ldr	r3, [pc, #856]	; (80042f4 <SPI_available+0x360>)
 8003f9a:	781b      	ldrb	r3, [r3, #0]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	f000 8470 	beq.w	8004882 <SPI_available+0x8ee>
	{
		switch(SPI_rx_buf[0])	//Избаиться от постоянной проверки кейс условий!
 8003fa2:	4bd5      	ldr	r3, [pc, #852]	; (80042f8 <SPI_available+0x364>)
 8003fa4:	781b      	ldrb	r3, [r3, #0]
 8003fa6:	3b01      	subs	r3, #1
 8003fa8:	2b65      	cmp	r3, #101	; 0x65
 8003faa:	f200 82de 	bhi.w	800456a <SPI_available+0x5d6>
 8003fae:	a201      	add	r2, pc, #4	; (adr r2, 8003fb4 <SPI_available+0x20>)
 8003fb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fb4:	0800414d 	.word	0x0800414d
 8003fb8:	0800415f 	.word	0x0800415f
 8003fbc:	08004171 	.word	0x08004171
 8003fc0:	08004183 	.word	0x08004183
 8003fc4:	08004195 	.word	0x08004195
 8003fc8:	080041a7 	.word	0x080041a7
 8003fcc:	080041b9 	.word	0x080041b9
 8003fd0:	080041cb 	.word	0x080041cb
 8003fd4:	080041dd 	.word	0x080041dd
 8003fd8:	0800456b 	.word	0x0800456b
 8003fdc:	0800456b 	.word	0x0800456b
 8003fe0:	0800456b 	.word	0x0800456b
 8003fe4:	0800456b 	.word	0x0800456b
 8003fe8:	0800456b 	.word	0x0800456b
 8003fec:	0800456b 	.word	0x0800456b
 8003ff0:	080041f1 	.word	0x080041f1
 8003ff4:	08004205 	.word	0x08004205
 8003ff8:	08004219 	.word	0x08004219
 8003ffc:	0800422d 	.word	0x0800422d
 8004000:	08004241 	.word	0x08004241
 8004004:	08004255 	.word	0x08004255
 8004008:	08004269 	.word	0x08004269
 800400c:	0800427d 	.word	0x0800427d
 8004010:	08004291 	.word	0x08004291
 8004014:	080042a5 	.word	0x080042a5
 8004018:	0800456b 	.word	0x0800456b
 800401c:	0800456b 	.word	0x0800456b
 8004020:	0800456b 	.word	0x0800456b
 8004024:	0800456b 	.word	0x0800456b
 8004028:	0800456b 	.word	0x0800456b
 800402c:	0800456b 	.word	0x0800456b
 8004030:	080042b9 	.word	0x080042b9
 8004034:	080042cd 	.word	0x080042cd
 8004038:	080042e1 	.word	0x080042e1
 800403c:	08004315 	.word	0x08004315
 8004040:	08004329 	.word	0x08004329
 8004044:	0800433d 	.word	0x0800433d
 8004048:	08004351 	.word	0x08004351
 800404c:	08004365 	.word	0x08004365
 8004050:	08004379 	.word	0x08004379
 8004054:	0800438d 	.word	0x0800438d
 8004058:	0800456b 	.word	0x0800456b
 800405c:	0800456b 	.word	0x0800456b
 8004060:	0800456b 	.word	0x0800456b
 8004064:	0800456b 	.word	0x0800456b
 8004068:	0800456b 	.word	0x0800456b
 800406c:	0800456b 	.word	0x0800456b
 8004070:	080043a1 	.word	0x080043a1
 8004074:	080043b5 	.word	0x080043b5
 8004078:	080043c9 	.word	0x080043c9
 800407c:	080043dd 	.word	0x080043dd
 8004080:	080043ef 	.word	0x080043ef
 8004084:	08004401 	.word	0x08004401
 8004088:	08004413 	.word	0x08004413
 800408c:	08004425 	.word	0x08004425
 8004090:	08004437 	.word	0x08004437
 8004094:	08004449 	.word	0x08004449
 8004098:	0800456b 	.word	0x0800456b
 800409c:	0800456b 	.word	0x0800456b
 80040a0:	0800456b 	.word	0x0800456b
 80040a4:	0800456b 	.word	0x0800456b
 80040a8:	0800456b 	.word	0x0800456b
 80040ac:	0800456b 	.word	0x0800456b
 80040b0:	0800445b 	.word	0x0800445b
 80040b4:	0800456b 	.word	0x0800456b
 80040b8:	0800456b 	.word	0x0800456b
 80040bc:	0800456b 	.word	0x0800456b
 80040c0:	0800456b 	.word	0x0800456b
 80040c4:	0800456b 	.word	0x0800456b
 80040c8:	0800456b 	.word	0x0800456b
 80040cc:	0800456b 	.word	0x0800456b
 80040d0:	0800456b 	.word	0x0800456b
 80040d4:	0800446d 	.word	0x0800446d
 80040d8:	0800456b 	.word	0x0800456b
 80040dc:	0800456b 	.word	0x0800456b
 80040e0:	0800456b 	.word	0x0800456b
 80040e4:	0800456b 	.word	0x0800456b
 80040e8:	0800456b 	.word	0x0800456b
 80040ec:	0800456b 	.word	0x0800456b
 80040f0:	0800447f 	.word	0x0800447f
 80040f4:	08004491 	.word	0x08004491
 80040f8:	080044a3 	.word	0x080044a3
 80040fc:	080044b5 	.word	0x080044b5
 8004100:	080044c9 	.word	0x080044c9
 8004104:	080044dd 	.word	0x080044dd
 8004108:	080044f1 	.word	0x080044f1
 800410c:	08004505 	.word	0x08004505
 8004110:	08004517 	.word	0x08004517
 8004114:	08004529 	.word	0x08004529
 8004118:	0800456b 	.word	0x0800456b
 800411c:	0800456b 	.word	0x0800456b
 8004120:	0800456b 	.word	0x0800456b
 8004124:	0800456b 	.word	0x0800456b
 8004128:	0800456b 	.word	0x0800456b
 800412c:	0800456b 	.word	0x0800456b
 8004130:	08004559 	.word	0x08004559
 8004134:	0800456b 	.word	0x0800456b
 8004138:	0800456b 	.word	0x0800456b
 800413c:	0800456b 	.word	0x0800456b
 8004140:	0800456b 	.word	0x0800456b
 8004144:	0800456b 	.word	0x0800456b
 8004148:	0800456b 	.word	0x0800456b
		{
				//------------------------Открытый коллектор------------------------
			case OC0_ON:
				Status_OCD[0] = 1;
 800414c:	4b6b      	ldr	r3, [pc, #428]	; (80042fc <SPI_available+0x368>)
 800414e:	2201      	movs	r2, #1
 8004150:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(O0_GPIO_Port, O0_Pin, SET);
 8004152:	2201      	movs	r2, #1
 8004154:	2101      	movs	r1, #1
 8004156:	486a      	ldr	r0, [pc, #424]	; (8004300 <SPI_available+0x36c>)
 8004158:	f003 fd82 	bl	8007c60 <HAL_GPIO_WritePin>
				break;
 800415c:	e205      	b.n	800456a <SPI_available+0x5d6>
			case OC0_OFF:
				Status_OCD[0] = 0;
 800415e:	4b67      	ldr	r3, [pc, #412]	; (80042fc <SPI_available+0x368>)
 8004160:	2200      	movs	r2, #0
 8004162:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(O0_GPIO_Port, O0_Pin, RESET);
 8004164:	2200      	movs	r2, #0
 8004166:	2101      	movs	r1, #1
 8004168:	4865      	ldr	r0, [pc, #404]	; (8004300 <SPI_available+0x36c>)
 800416a:	f003 fd79 	bl	8007c60 <HAL_GPIO_WritePin>
				break;
 800416e:	e1fc      	b.n	800456a <SPI_available+0x5d6>
			case OC1_ON:
				Status_OCD[1] = 1;
 8004170:	4b62      	ldr	r3, [pc, #392]	; (80042fc <SPI_available+0x368>)
 8004172:	2201      	movs	r2, #1
 8004174:	705a      	strb	r2, [r3, #1]
				HAL_GPIO_WritePin(O1_GPIO_Port, O1_Pin, SET);
 8004176:	2201      	movs	r2, #1
 8004178:	2101      	movs	r1, #1
 800417a:	4862      	ldr	r0, [pc, #392]	; (8004304 <SPI_available+0x370>)
 800417c:	f003 fd70 	bl	8007c60 <HAL_GPIO_WritePin>
				break;
 8004180:	e1f3      	b.n	800456a <SPI_available+0x5d6>
			case OC1_OFF:
				Status_OCD[1] = 0;
 8004182:	4b5e      	ldr	r3, [pc, #376]	; (80042fc <SPI_available+0x368>)
 8004184:	2200      	movs	r2, #0
 8004186:	705a      	strb	r2, [r3, #1]
				HAL_GPIO_WritePin(O1_GPIO_Port, O1_Pin, RESET);
 8004188:	2200      	movs	r2, #0
 800418a:	2101      	movs	r1, #1
 800418c:	485d      	ldr	r0, [pc, #372]	; (8004304 <SPI_available+0x370>)
 800418e:	f003 fd67 	bl	8007c60 <HAL_GPIO_WritePin>
				break;
 8004192:	e1ea      	b.n	800456a <SPI_available+0x5d6>
			case OC2_ON:
				Status_OCD[2] = 1;
 8004194:	4b59      	ldr	r3, [pc, #356]	; (80042fc <SPI_available+0x368>)
 8004196:	2201      	movs	r2, #1
 8004198:	709a      	strb	r2, [r3, #2]
				HAL_GPIO_WritePin(O2_GPIO_Port, O2_Pin, SET);
 800419a:	2201      	movs	r2, #1
 800419c:	2102      	movs	r1, #2
 800419e:	4859      	ldr	r0, [pc, #356]	; (8004304 <SPI_available+0x370>)
 80041a0:	f003 fd5e 	bl	8007c60 <HAL_GPIO_WritePin>
				break;
 80041a4:	e1e1      	b.n	800456a <SPI_available+0x5d6>
			case OC2_OFF:
				Status_OCD[2] = 0;
 80041a6:	4b55      	ldr	r3, [pc, #340]	; (80042fc <SPI_available+0x368>)
 80041a8:	2200      	movs	r2, #0
 80041aa:	709a      	strb	r2, [r3, #2]
				HAL_GPIO_WritePin(O2_GPIO_Port, O2_Pin, RESET);
 80041ac:	2200      	movs	r2, #0
 80041ae:	2102      	movs	r1, #2
 80041b0:	4854      	ldr	r0, [pc, #336]	; (8004304 <SPI_available+0x370>)
 80041b2:	f003 fd55 	bl	8007c60 <HAL_GPIO_WritePin>
				break;
 80041b6:	e1d8      	b.n	800456a <SPI_available+0x5d6>
			case OC3_ON:
				Status_OCD[3] = 1;
 80041b8:	4b50      	ldr	r3, [pc, #320]	; (80042fc <SPI_available+0x368>)
 80041ba:	2201      	movs	r2, #1
 80041bc:	70da      	strb	r2, [r3, #3]
				HAL_GPIO_WritePin(O3_GPIO_Port, O3_Pin, SET);
 80041be:	2201      	movs	r2, #1
 80041c0:	2180      	movs	r1, #128	; 0x80
 80041c2:	4851      	ldr	r0, [pc, #324]	; (8004308 <SPI_available+0x374>)
 80041c4:	f003 fd4c 	bl	8007c60 <HAL_GPIO_WritePin>
				break;
 80041c8:	e1cf      	b.n	800456a <SPI_available+0x5d6>
			case OC3_OFF:
				Status_OCD[3] = 0;
 80041ca:	4b4c      	ldr	r3, [pc, #304]	; (80042fc <SPI_available+0x368>)
 80041cc:	2200      	movs	r2, #0
 80041ce:	70da      	strb	r2, [r3, #3]
				HAL_GPIO_WritePin(O3_GPIO_Port, O3_Pin, RESET);
 80041d0:	2200      	movs	r2, #0
 80041d2:	2180      	movs	r1, #128	; 0x80
 80041d4:	484c      	ldr	r0, [pc, #304]	; (8004308 <SPI_available+0x374>)
 80041d6:	f003 fd43 	bl	8007c60 <HAL_GPIO_WritePin>
				break;
 80041da:	e1c6      	b.n	800456a <SPI_available+0x5d6>
			case OC4_ON:
				Status_OCD[4] = 1;
 80041dc:	4b47      	ldr	r3, [pc, #284]	; (80042fc <SPI_available+0x368>)
 80041de:	2201      	movs	r2, #1
 80041e0:	711a      	strb	r2, [r3, #4]
				HAL_GPIO_WritePin(O4_GPIO_Port, O4_Pin, SET);
 80041e2:	2201      	movs	r2, #1
 80041e4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80041e8:	4847      	ldr	r0, [pc, #284]	; (8004308 <SPI_available+0x374>)
 80041ea:	f003 fd39 	bl	8007c60 <HAL_GPIO_WritePin>
				break;
 80041ee:	e1bc      	b.n	800456a <SPI_available+0x5d6>
			case OC4_OFF:
				Status_OCD[4] = 0;
 80041f0:	4b42      	ldr	r3, [pc, #264]	; (80042fc <SPI_available+0x368>)
 80041f2:	2200      	movs	r2, #0
 80041f4:	711a      	strb	r2, [r3, #4]
				HAL_GPIO_WritePin(O4_GPIO_Port, O4_Pin, RESET);
 80041f6:	2200      	movs	r2, #0
 80041f8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80041fc:	4842      	ldr	r0, [pc, #264]	; (8004308 <SPI_available+0x374>)
 80041fe:	f003 fd2f 	bl	8007c60 <HAL_GPIO_WritePin>
				break;
 8004202:	e1b2      	b.n	800456a <SPI_available+0x5d6>
			case OC5_ON:
				Status_OCD[5] = 1;
 8004204:	4b3d      	ldr	r3, [pc, #244]	; (80042fc <SPI_available+0x368>)
 8004206:	2201      	movs	r2, #1
 8004208:	715a      	strb	r2, [r3, #5]
				HAL_GPIO_WritePin(O5_GPIO_Port, O5_Pin, SET);
 800420a:	2201      	movs	r2, #1
 800420c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004210:	483d      	ldr	r0, [pc, #244]	; (8004308 <SPI_available+0x374>)
 8004212:	f003 fd25 	bl	8007c60 <HAL_GPIO_WritePin>
				break;
 8004216:	e1a8      	b.n	800456a <SPI_available+0x5d6>
			case OC5_OFF:
				Status_OCD[5] = 0;
 8004218:	4b38      	ldr	r3, [pc, #224]	; (80042fc <SPI_available+0x368>)
 800421a:	2200      	movs	r2, #0
 800421c:	715a      	strb	r2, [r3, #5]
				HAL_GPIO_WritePin(O5_GPIO_Port, O5_Pin, RESET);
 800421e:	2200      	movs	r2, #0
 8004220:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004224:	4838      	ldr	r0, [pc, #224]	; (8004308 <SPI_available+0x374>)
 8004226:	f003 fd1b 	bl	8007c60 <HAL_GPIO_WritePin>
				break;
 800422a:	e19e      	b.n	800456a <SPI_available+0x5d6>
			case OC6_ON:
				Status_OCD[6] = 1;
 800422c:	4b33      	ldr	r3, [pc, #204]	; (80042fc <SPI_available+0x368>)
 800422e:	2201      	movs	r2, #1
 8004230:	719a      	strb	r2, [r3, #6]
				HAL_GPIO_WritePin(O6_GPIO_Port, O6_Pin, SET);
 8004232:	2201      	movs	r2, #1
 8004234:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004238:	4833      	ldr	r0, [pc, #204]	; (8004308 <SPI_available+0x374>)
 800423a:	f003 fd11 	bl	8007c60 <HAL_GPIO_WritePin>
				break;
 800423e:	e194      	b.n	800456a <SPI_available+0x5d6>
			case OC6_OFF:
				Status_OCD[6] = 0;
 8004240:	4b2e      	ldr	r3, [pc, #184]	; (80042fc <SPI_available+0x368>)
 8004242:	2200      	movs	r2, #0
 8004244:	719a      	strb	r2, [r3, #6]
				HAL_GPIO_WritePin(O6_GPIO_Port, O6_Pin, RESET);
 8004246:	2200      	movs	r2, #0
 8004248:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800424c:	482e      	ldr	r0, [pc, #184]	; (8004308 <SPI_available+0x374>)
 800424e:	f003 fd07 	bl	8007c60 <HAL_GPIO_WritePin>
				break;
 8004252:	e18a      	b.n	800456a <SPI_available+0x5d6>
			case OC7_ON:
				Status_OCD[7] = 1;
 8004254:	4b29      	ldr	r3, [pc, #164]	; (80042fc <SPI_available+0x368>)
 8004256:	2201      	movs	r2, #1
 8004258:	71da      	strb	r2, [r3, #7]
				HAL_GPIO_WritePin(O7_GPIO_Port, O7_Pin, SET);
 800425a:	2201      	movs	r2, #1
 800425c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004260:	4829      	ldr	r0, [pc, #164]	; (8004308 <SPI_available+0x374>)
 8004262:	f003 fcfd 	bl	8007c60 <HAL_GPIO_WritePin>
				break;
 8004266:	e180      	b.n	800456a <SPI_available+0x5d6>
			case OC7_OFF:
				Status_OCD[7] = 0;
 8004268:	4b24      	ldr	r3, [pc, #144]	; (80042fc <SPI_available+0x368>)
 800426a:	2200      	movs	r2, #0
 800426c:	71da      	strb	r2, [r3, #7]
				HAL_GPIO_WritePin(O7_GPIO_Port, O7_Pin, RESET);
 800426e:	2200      	movs	r2, #0
 8004270:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004274:	4824      	ldr	r0, [pc, #144]	; (8004308 <SPI_available+0x374>)
 8004276:	f003 fcf3 	bl	8007c60 <HAL_GPIO_WritePin>
				break;
 800427a:	e176      	b.n	800456a <SPI_available+0x5d6>
				//------------------------------------------------------------------
				//--------------------------Цифровые входы--------------------------
			case DIN0_R:
				Status_DIN[0] = 1;
 800427c:	4b23      	ldr	r3, [pc, #140]	; (800430c <SPI_available+0x378>)
 800427e:	2201      	movs	r2, #1
 8004280:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(IN0_GPIO_Port, IN0_Pin, SET);
 8004282:	2201      	movs	r2, #1
 8004284:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004288:	4821      	ldr	r0, [pc, #132]	; (8004310 <SPI_available+0x37c>)
 800428a:	f003 fce9 	bl	8007c60 <HAL_GPIO_WritePin>
				break;
 800428e:	e16c      	b.n	800456a <SPI_available+0x5d6>
			case DIN0_F:
				Status_DIN[0] = 0;
 8004290:	4b1e      	ldr	r3, [pc, #120]	; (800430c <SPI_available+0x378>)
 8004292:	2200      	movs	r2, #0
 8004294:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(IN0_GPIO_Port, IN0_Pin, RESET);
 8004296:	2200      	movs	r2, #0
 8004298:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800429c:	481c      	ldr	r0, [pc, #112]	; (8004310 <SPI_available+0x37c>)
 800429e:	f003 fcdf 	bl	8007c60 <HAL_GPIO_WritePin>
				break;
 80042a2:	e162      	b.n	800456a <SPI_available+0x5d6>
			case DIN1_R:
				Status_DIN[1] = 1;
 80042a4:	4b19      	ldr	r3, [pc, #100]	; (800430c <SPI_available+0x378>)
 80042a6:	2201      	movs	r2, #1
 80042a8:	705a      	strb	r2, [r3, #1]
				HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, SET);
 80042aa:	2201      	movs	r2, #1
 80042ac:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80042b0:	4817      	ldr	r0, [pc, #92]	; (8004310 <SPI_available+0x37c>)
 80042b2:	f003 fcd5 	bl	8007c60 <HAL_GPIO_WritePin>
				break;
 80042b6:	e158      	b.n	800456a <SPI_available+0x5d6>
			case DIN1_F:
				Status_DIN[1] = 0;
 80042b8:	4b14      	ldr	r3, [pc, #80]	; (800430c <SPI_available+0x378>)
 80042ba:	2200      	movs	r2, #0
 80042bc:	705a      	strb	r2, [r3, #1]
				HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, RESET);
 80042be:	2200      	movs	r2, #0
 80042c0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80042c4:	4812      	ldr	r0, [pc, #72]	; (8004310 <SPI_available+0x37c>)
 80042c6:	f003 fccb 	bl	8007c60 <HAL_GPIO_WritePin>
				break;
 80042ca:	e14e      	b.n	800456a <SPI_available+0x5d6>
			case DIN2_R:
				Status_DIN[2] = 1;
 80042cc:	4b0f      	ldr	r3, [pc, #60]	; (800430c <SPI_available+0x378>)
 80042ce:	2201      	movs	r2, #1
 80042d0:	709a      	strb	r2, [r3, #2]
				HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, SET);
 80042d2:	2201      	movs	r2, #1
 80042d4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80042d8:	480d      	ldr	r0, [pc, #52]	; (8004310 <SPI_available+0x37c>)
 80042da:	f003 fcc1 	bl	8007c60 <HAL_GPIO_WritePin>
				break;
 80042de:	e144      	b.n	800456a <SPI_available+0x5d6>
			case DIN2_F:
				Status_DIN[2] = 0;
 80042e0:	4b0a      	ldr	r3, [pc, #40]	; (800430c <SPI_available+0x378>)
 80042e2:	2200      	movs	r2, #0
 80042e4:	709a      	strb	r2, [r3, #2]
				HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, RESET);
 80042e6:	2200      	movs	r2, #0
 80042e8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80042ec:	4808      	ldr	r0, [pc, #32]	; (8004310 <SPI_available+0x37c>)
 80042ee:	f003 fcb7 	bl	8007c60 <HAL_GPIO_WritePin>
				break;
 80042f2:	e13a      	b.n	800456a <SPI_available+0x5d6>
 80042f4:	2000034d 	.word	0x2000034d
 80042f8:	20000348 	.word	0x20000348
 80042fc:	20000338 	.word	0x20000338
 8004300:	40020000 	.word	0x40020000
 8004304:	40020400 	.word	0x40020400
 8004308:	40021000 	.word	0x40021000
 800430c:	20000328 	.word	0x20000328
 8004310:	40020c00 	.word	0x40020c00
			case DIN3_R:
				Status_DIN[3] = 1;
 8004314:	4b89      	ldr	r3, [pc, #548]	; (800453c <SPI_available+0x5a8>)
 8004316:	2201      	movs	r2, #1
 8004318:	70da      	strb	r2, [r3, #3]
				HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, SET);
 800431a:	2201      	movs	r2, #1
 800431c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004320:	4887      	ldr	r0, [pc, #540]	; (8004540 <SPI_available+0x5ac>)
 8004322:	f003 fc9d 	bl	8007c60 <HAL_GPIO_WritePin>
				break;
 8004326:	e120      	b.n	800456a <SPI_available+0x5d6>
			case DIN3_F:
				Status_DIN[3] = 0;
 8004328:	4b84      	ldr	r3, [pc, #528]	; (800453c <SPI_available+0x5a8>)
 800432a:	2200      	movs	r2, #0
 800432c:	70da      	strb	r2, [r3, #3]
				HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, RESET);
 800432e:	2200      	movs	r2, #0
 8004330:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004334:	4882      	ldr	r0, [pc, #520]	; (8004540 <SPI_available+0x5ac>)
 8004336:	f003 fc93 	bl	8007c60 <HAL_GPIO_WritePin>
				break;
 800433a:	e116      	b.n	800456a <SPI_available+0x5d6>
			case DIN4_R:
				Status_DIN[4] = 1;
 800433c:	4b7f      	ldr	r3, [pc, #508]	; (800453c <SPI_available+0x5a8>)
 800433e:	2201      	movs	r2, #1
 8004340:	711a      	strb	r2, [r3, #4]
				HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, SET);
 8004342:	2201      	movs	r2, #1
 8004344:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004348:	487d      	ldr	r0, [pc, #500]	; (8004540 <SPI_available+0x5ac>)
 800434a:	f003 fc89 	bl	8007c60 <HAL_GPIO_WritePin>
				break;
 800434e:	e10c      	b.n	800456a <SPI_available+0x5d6>
			case DIN4_F:
				Status_DIN[4] = 0;
 8004350:	4b7a      	ldr	r3, [pc, #488]	; (800453c <SPI_available+0x5a8>)
 8004352:	2200      	movs	r2, #0
 8004354:	711a      	strb	r2, [r3, #4]
				HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, RESET);
 8004356:	2200      	movs	r2, #0
 8004358:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800435c:	4878      	ldr	r0, [pc, #480]	; (8004540 <SPI_available+0x5ac>)
 800435e:	f003 fc7f 	bl	8007c60 <HAL_GPIO_WritePin>
				break;
 8004362:	e102      	b.n	800456a <SPI_available+0x5d6>
			case DIN5_R:
				Status_DIN[5] = 1;
 8004364:	4b75      	ldr	r3, [pc, #468]	; (800453c <SPI_available+0x5a8>)
 8004366:	2201      	movs	r2, #1
 8004368:	715a      	strb	r2, [r3, #5]
				HAL_GPIO_WritePin(IN5_GPIO_Port, IN5_Pin, SET);
 800436a:	2201      	movs	r2, #1
 800436c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004370:	4873      	ldr	r0, [pc, #460]	; (8004540 <SPI_available+0x5ac>)
 8004372:	f003 fc75 	bl	8007c60 <HAL_GPIO_WritePin>
				break;
 8004376:	e0f8      	b.n	800456a <SPI_available+0x5d6>
			case DIN5_F:
				Status_DIN[5] = 0;
 8004378:	4b70      	ldr	r3, [pc, #448]	; (800453c <SPI_available+0x5a8>)
 800437a:	2200      	movs	r2, #0
 800437c:	715a      	strb	r2, [r3, #5]
				HAL_GPIO_WritePin(IN5_GPIO_Port, IN5_Pin, RESET);
 800437e:	2200      	movs	r2, #0
 8004380:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004384:	486e      	ldr	r0, [pc, #440]	; (8004540 <SPI_available+0x5ac>)
 8004386:	f003 fc6b 	bl	8007c60 <HAL_GPIO_WritePin>
				break;
 800438a:	e0ee      	b.n	800456a <SPI_available+0x5d6>
			case DIN6_R:
				Status_DIN[6] = 1;
 800438c:	4b6b      	ldr	r3, [pc, #428]	; (800453c <SPI_available+0x5a8>)
 800438e:	2201      	movs	r2, #1
 8004390:	719a      	strb	r2, [r3, #6]
				HAL_GPIO_WritePin(IN6_GPIO_Port, IN6_Pin, SET);
 8004392:	2201      	movs	r2, #1
 8004394:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004398:	4869      	ldr	r0, [pc, #420]	; (8004540 <SPI_available+0x5ac>)
 800439a:	f003 fc61 	bl	8007c60 <HAL_GPIO_WritePin>
				break;
 800439e:	e0e4      	b.n	800456a <SPI_available+0x5d6>
			case DIN6_F:
				Status_DIN[6] = 0;
 80043a0:	4b66      	ldr	r3, [pc, #408]	; (800453c <SPI_available+0x5a8>)
 80043a2:	2200      	movs	r2, #0
 80043a4:	719a      	strb	r2, [r3, #6]
				HAL_GPIO_WritePin(IN6_GPIO_Port, IN6_Pin, RESET);
 80043a6:	2200      	movs	r2, #0
 80043a8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80043ac:	4864      	ldr	r0, [pc, #400]	; (8004540 <SPI_available+0x5ac>)
 80043ae:	f003 fc57 	bl	8007c60 <HAL_GPIO_WritePin>
				break;
 80043b2:	e0da      	b.n	800456a <SPI_available+0x5d6>
			case DIN7_R:
				Status_DIN[7] = 1;
 80043b4:	4b61      	ldr	r3, [pc, #388]	; (800453c <SPI_available+0x5a8>)
 80043b6:	2201      	movs	r2, #1
 80043b8:	71da      	strb	r2, [r3, #7]
				HAL_GPIO_WritePin(IN7_GPIO_Port, IN7_Pin, SET);
 80043ba:	2201      	movs	r2, #1
 80043bc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80043c0:	485f      	ldr	r0, [pc, #380]	; (8004540 <SPI_available+0x5ac>)
 80043c2:	f003 fc4d 	bl	8007c60 <HAL_GPIO_WritePin>
				break;
 80043c6:	e0d0      	b.n	800456a <SPI_available+0x5d6>
			case DIN7_F:
				Status_DIN[7] = 0;
 80043c8:	4b5c      	ldr	r3, [pc, #368]	; (800453c <SPI_available+0x5a8>)
 80043ca:	2200      	movs	r2, #0
 80043cc:	71da      	strb	r2, [r3, #7]
				HAL_GPIO_WritePin(IN7_GPIO_Port, IN7_Pin, RESET);
 80043ce:	2200      	movs	r2, #0
 80043d0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80043d4:	485a      	ldr	r0, [pc, #360]	; (8004540 <SPI_available+0x5ac>)
 80043d6:	f003 fc43 	bl	8007c60 <HAL_GPIO_WritePin>
				break;
 80043da:	e0c6      	b.n	800456a <SPI_available+0x5d6>
				//------------------------------------------------------------------
				//-------------------------Аналоговые входы-------------------------
			case AIN0_ON:
				Status_AIN[0] = 1;
 80043dc:	4b59      	ldr	r3, [pc, #356]	; (8004544 <SPI_available+0x5b0>)
 80043de:	2201      	movs	r2, #1
 80043e0:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(AIN0_GPIO_Port, AIN0_Pin, SET);
 80043e2:	2201      	movs	r2, #1
 80043e4:	2108      	movs	r1, #8
 80043e6:	4858      	ldr	r0, [pc, #352]	; (8004548 <SPI_available+0x5b4>)
 80043e8:	f003 fc3a 	bl	8007c60 <HAL_GPIO_WritePin>
				break;
 80043ec:	e0bd      	b.n	800456a <SPI_available+0x5d6>
			case AIN0_OFF:
				Status_AIN[0] = 0;
 80043ee:	4b55      	ldr	r3, [pc, #340]	; (8004544 <SPI_available+0x5b0>)
 80043f0:	2200      	movs	r2, #0
 80043f2:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(AIN0_GPIO_Port, AIN0_Pin, RESET);
 80043f4:	2200      	movs	r2, #0
 80043f6:	2108      	movs	r1, #8
 80043f8:	4853      	ldr	r0, [pc, #332]	; (8004548 <SPI_available+0x5b4>)
 80043fa:	f003 fc31 	bl	8007c60 <HAL_GPIO_WritePin>
				break;
 80043fe:	e0b4      	b.n	800456a <SPI_available+0x5d6>
			case AIN1_ON:
				Status_AIN[1] = 1;
 8004400:	4b50      	ldr	r3, [pc, #320]	; (8004544 <SPI_available+0x5b0>)
 8004402:	2201      	movs	r2, #1
 8004404:	705a      	strb	r2, [r3, #1]
				HAL_GPIO_WritePin(AIN1_GPIO_Port, AIN1_Pin, SET);
 8004406:	2201      	movs	r2, #1
 8004408:	2110      	movs	r1, #16
 800440a:	484f      	ldr	r0, [pc, #316]	; (8004548 <SPI_available+0x5b4>)
 800440c:	f003 fc28 	bl	8007c60 <HAL_GPIO_WritePin>
				break;
 8004410:	e0ab      	b.n	800456a <SPI_available+0x5d6>
			case AIN1_OFF:
				Status_AIN[1] = 0;
 8004412:	4b4c      	ldr	r3, [pc, #304]	; (8004544 <SPI_available+0x5b0>)
 8004414:	2200      	movs	r2, #0
 8004416:	705a      	strb	r2, [r3, #1]
				HAL_GPIO_WritePin(AIN1_GPIO_Port, AIN1_Pin, RESET);
 8004418:	2200      	movs	r2, #0
 800441a:	2110      	movs	r1, #16
 800441c:	484a      	ldr	r0, [pc, #296]	; (8004548 <SPI_available+0x5b4>)
 800441e:	f003 fc1f 	bl	8007c60 <HAL_GPIO_WritePin>
				break;
 8004422:	e0a2      	b.n	800456a <SPI_available+0x5d6>
			case AIN2_ON:
				Status_AIN[2] = 1;
 8004424:	4b47      	ldr	r3, [pc, #284]	; (8004544 <SPI_available+0x5b0>)
 8004426:	2201      	movs	r2, #1
 8004428:	709a      	strb	r2, [r3, #2]
				HAL_GPIO_WritePin(AIN2_GPIO_Port, AIN2_Pin, SET);
 800442a:	2201      	movs	r2, #1
 800442c:	2120      	movs	r1, #32
 800442e:	4846      	ldr	r0, [pc, #280]	; (8004548 <SPI_available+0x5b4>)
 8004430:	f003 fc16 	bl	8007c60 <HAL_GPIO_WritePin>
				break;
 8004434:	e099      	b.n	800456a <SPI_available+0x5d6>
			case AIN2_OFF:
				Status_AIN[2] = 0;
 8004436:	4b43      	ldr	r3, [pc, #268]	; (8004544 <SPI_available+0x5b0>)
 8004438:	2200      	movs	r2, #0
 800443a:	709a      	strb	r2, [r3, #2]
				HAL_GPIO_WritePin(AIN2_GPIO_Port, AIN2_Pin, RESET);
 800443c:	2200      	movs	r2, #0
 800443e:	2120      	movs	r1, #32
 8004440:	4841      	ldr	r0, [pc, #260]	; (8004548 <SPI_available+0x5b4>)
 8004442:	f003 fc0d 	bl	8007c60 <HAL_GPIO_WritePin>
				break;
 8004446:	e090      	b.n	800456a <SPI_available+0x5d6>
			case AIN3_ON:
				Status_AIN[3] = 1;
 8004448:	4b3e      	ldr	r3, [pc, #248]	; (8004544 <SPI_available+0x5b0>)
 800444a:	2201      	movs	r2, #1
 800444c:	70da      	strb	r2, [r3, #3]
				HAL_GPIO_WritePin(AIN3_GPIO_Port, AIN3_Pin, SET);
 800444e:	2201      	movs	r2, #1
 8004450:	2140      	movs	r1, #64	; 0x40
 8004452:	483d      	ldr	r0, [pc, #244]	; (8004548 <SPI_available+0x5b4>)
 8004454:	f003 fc04 	bl	8007c60 <HAL_GPIO_WritePin>
				break;
 8004458:	e087      	b.n	800456a <SPI_available+0x5d6>
			case AIN3_OFF:
				Status_AIN[3] = 0;
 800445a:	4b3a      	ldr	r3, [pc, #232]	; (8004544 <SPI_available+0x5b0>)
 800445c:	2200      	movs	r2, #0
 800445e:	70da      	strb	r2, [r3, #3]
				HAL_GPIO_WritePin(AIN3_GPIO_Port, AIN3_Pin, RESET);
 8004460:	2200      	movs	r2, #0
 8004462:	2140      	movs	r1, #64	; 0x40
 8004464:	4838      	ldr	r0, [pc, #224]	; (8004548 <SPI_available+0x5b4>)
 8004466:	f003 fbfb 	bl	8007c60 <HAL_GPIO_WritePin>
				break;
 800446a:	e07e      	b.n	800456a <SPI_available+0x5d6>
				//------------------------------------------------------------------
				//----------------------------Выходы ШИМ----------------------------
			case PWM0_ON:
				Status_PWM[0] = 1;
 800446c:	4b37      	ldr	r3, [pc, #220]	; (800454c <SPI_available+0x5b8>)
 800446e:	2201      	movs	r2, #1
 8004470:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(PWM0_GPIO_Port, PWM0_Pin, SET);
 8004472:	2201      	movs	r2, #1
 8004474:	2140      	movs	r1, #64	; 0x40
 8004476:	4836      	ldr	r0, [pc, #216]	; (8004550 <SPI_available+0x5bc>)
 8004478:	f003 fbf2 	bl	8007c60 <HAL_GPIO_WritePin>
				break;
 800447c:	e075      	b.n	800456a <SPI_available+0x5d6>
			case PWM0_OFF:
				Status_PWM[0] = 0;
 800447e:	4b33      	ldr	r3, [pc, #204]	; (800454c <SPI_available+0x5b8>)
 8004480:	2200      	movs	r2, #0
 8004482:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(PWM0_GPIO_Port, PWM0_Pin, RESET);
 8004484:	2200      	movs	r2, #0
 8004486:	2140      	movs	r1, #64	; 0x40
 8004488:	4831      	ldr	r0, [pc, #196]	; (8004550 <SPI_available+0x5bc>)
 800448a:	f003 fbe9 	bl	8007c60 <HAL_GPIO_WritePin>
				break;
 800448e:	e06c      	b.n	800456a <SPI_available+0x5d6>
			case PWM1_ON:
				Status_PWM[1] = 1;
 8004490:	4b2e      	ldr	r3, [pc, #184]	; (800454c <SPI_available+0x5b8>)
 8004492:	2201      	movs	r2, #1
 8004494:	705a      	strb	r2, [r3, #1]
				HAL_GPIO_WritePin(PWM1_GPIO_Port, PWM1_Pin, SET);
 8004496:	2201      	movs	r2, #1
 8004498:	2180      	movs	r1, #128	; 0x80
 800449a:	482d      	ldr	r0, [pc, #180]	; (8004550 <SPI_available+0x5bc>)
 800449c:	f003 fbe0 	bl	8007c60 <HAL_GPIO_WritePin>
				break;
 80044a0:	e063      	b.n	800456a <SPI_available+0x5d6>
			case PWM1_OFF:
				Status_PWM[1] = 0;
 80044a2:	4b2a      	ldr	r3, [pc, #168]	; (800454c <SPI_available+0x5b8>)
 80044a4:	2200      	movs	r2, #0
 80044a6:	705a      	strb	r2, [r3, #1]
				HAL_GPIO_WritePin(PWM1_GPIO_Port, PWM1_Pin, RESET);
 80044a8:	2200      	movs	r2, #0
 80044aa:	2180      	movs	r1, #128	; 0x80
 80044ac:	4828      	ldr	r0, [pc, #160]	; (8004550 <SPI_available+0x5bc>)
 80044ae:	f003 fbd7 	bl	8007c60 <HAL_GPIO_WritePin>
				break;
 80044b2:	e05a      	b.n	800456a <SPI_available+0x5d6>
			case PWM2_ON:
				Status_PWM[2] = 1;
 80044b4:	4b25      	ldr	r3, [pc, #148]	; (800454c <SPI_available+0x5b8>)
 80044b6:	2201      	movs	r2, #1
 80044b8:	709a      	strb	r2, [r3, #2]
				HAL_GPIO_WritePin(PWM2_GPIO_Port, PWM2_Pin, SET);
 80044ba:	2201      	movs	r2, #1
 80044bc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80044c0:	4823      	ldr	r0, [pc, #140]	; (8004550 <SPI_available+0x5bc>)
 80044c2:	f003 fbcd 	bl	8007c60 <HAL_GPIO_WritePin>
				break;
 80044c6:	e050      	b.n	800456a <SPI_available+0x5d6>
			case PWM2_OFF:
				Status_PWM[2] = 0;
 80044c8:	4b20      	ldr	r3, [pc, #128]	; (800454c <SPI_available+0x5b8>)
 80044ca:	2200      	movs	r2, #0
 80044cc:	709a      	strb	r2, [r3, #2]
				HAL_GPIO_WritePin(PWM2_GPIO_Port, PWM2_Pin, RESET);
 80044ce:	2200      	movs	r2, #0
 80044d0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80044d4:	481e      	ldr	r0, [pc, #120]	; (8004550 <SPI_available+0x5bc>)
 80044d6:	f003 fbc3 	bl	8007c60 <HAL_GPIO_WritePin>
				break;
 80044da:	e046      	b.n	800456a <SPI_available+0x5d6>
			case PWM3_ON:
				Status_PWM[3] = 1;
 80044dc:	4b1b      	ldr	r3, [pc, #108]	; (800454c <SPI_available+0x5b8>)
 80044de:	2201      	movs	r2, #1
 80044e0:	70da      	strb	r2, [r3, #3]
				HAL_GPIO_WritePin(PWM3_GPIO_Port, PWM3_Pin, SET);
 80044e2:	2201      	movs	r2, #1
 80044e4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80044e8:	4819      	ldr	r0, [pc, #100]	; (8004550 <SPI_available+0x5bc>)
 80044ea:	f003 fbb9 	bl	8007c60 <HAL_GPIO_WritePin>
				break;
 80044ee:	e03c      	b.n	800456a <SPI_available+0x5d6>
			case PWM3_OFF:
				Status_PWM[3] = 0;
 80044f0:	4b16      	ldr	r3, [pc, #88]	; (800454c <SPI_available+0x5b8>)
 80044f2:	2200      	movs	r2, #0
 80044f4:	70da      	strb	r2, [r3, #3]
				HAL_GPIO_WritePin(PWM3_GPIO_Port, PWM3_Pin, RESET);
 80044f6:	2200      	movs	r2, #0
 80044f8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80044fc:	4814      	ldr	r0, [pc, #80]	; (8004550 <SPI_available+0x5bc>)
 80044fe:	f003 fbaf 	bl	8007c60 <HAL_GPIO_WritePin>
				break;
 8004502:	e032      	b.n	800456a <SPI_available+0x5d6>
				//------------------------------------------------------------------
				//--------------------------Выходы 1-Wire---------------------------
			case WR0_ON:
				Status_1WR[0] = 1;
 8004504:	4b13      	ldr	r3, [pc, #76]	; (8004554 <SPI_available+0x5c0>)
 8004506:	2201      	movs	r2, #1
 8004508:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(WR0_GPIO_Port, WR0_Pin, SET);
 800450a:	2201      	movs	r2, #1
 800450c:	2101      	movs	r1, #1
 800450e:	480c      	ldr	r0, [pc, #48]	; (8004540 <SPI_available+0x5ac>)
 8004510:	f003 fba6 	bl	8007c60 <HAL_GPIO_WritePin>
				break;
 8004514:	e029      	b.n	800456a <SPI_available+0x5d6>
			case WR0_OFF:
				Status_1WR[0] = 0;
 8004516:	4b0f      	ldr	r3, [pc, #60]	; (8004554 <SPI_available+0x5c0>)
 8004518:	2200      	movs	r2, #0
 800451a:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(WR0_GPIO_Port, WR0_Pin, RESET);
 800451c:	2200      	movs	r2, #0
 800451e:	2101      	movs	r1, #1
 8004520:	4807      	ldr	r0, [pc, #28]	; (8004540 <SPI_available+0x5ac>)
 8004522:	f003 fb9d 	bl	8007c60 <HAL_GPIO_WritePin>
				break;
 8004526:	e020      	b.n	800456a <SPI_available+0x5d6>
			case WR1_ON:
				Status_1WR[1] = 1;
 8004528:	4b0a      	ldr	r3, [pc, #40]	; (8004554 <SPI_available+0x5c0>)
 800452a:	2201      	movs	r2, #1
 800452c:	705a      	strb	r2, [r3, #1]
				HAL_GPIO_WritePin(WR1_GPIO_Port, WR1_Pin, SET);
 800452e:	2201      	movs	r2, #1
 8004530:	2102      	movs	r1, #2
 8004532:	4803      	ldr	r0, [pc, #12]	; (8004540 <SPI_available+0x5ac>)
 8004534:	f003 fb94 	bl	8007c60 <HAL_GPIO_WritePin>
				break;
 8004538:	e017      	b.n	800456a <SPI_available+0x5d6>
 800453a:	bf00      	nop
 800453c:	20000328 	.word	0x20000328
 8004540:	40020c00 	.word	0x40020c00
 8004544:	20000320 	.word	0x20000320
 8004548:	40020000 	.word	0x40020000
 800454c:	20000330 	.word	0x20000330
 8004550:	40020800 	.word	0x40020800
 8004554:	20000340 	.word	0x20000340
			case WR1_OFF:
				Status_1WR[1] = 0;
 8004558:	4ba1      	ldr	r3, [pc, #644]	; (80047e0 <SPI_available+0x84c>)
 800455a:	2200      	movs	r2, #0
 800455c:	705a      	strb	r2, [r3, #1]
				HAL_GPIO_WritePin(WR1_GPIO_Port, WR1_Pin, RESET);
 800455e:	2200      	movs	r2, #0
 8004560:	2102      	movs	r1, #2
 8004562:	48a0      	ldr	r0, [pc, #640]	; (80047e4 <SPI_available+0x850>)
 8004564:	f003 fb7c 	bl	8007c60 <HAL_GPIO_WritePin>
				break;
 8004568:	bf00      	nop
				break;
			case INTERFACE_TEST:
				break;
				//------------------------------------------------------------------
		}
		if(SPI_rx_buf[0] == MCU_OUTPUT)
 800456a:	4b9f      	ldr	r3, [pc, #636]	; (80047e8 <SPI_available+0x854>)
 800456c:	781b      	ldrb	r3, [r3, #0]
 800456e:	2bc0      	cmp	r3, #192	; 0xc0
 8004570:	d136      	bne.n	80045e0 <SPI_available+0x64c>
		{
			tp = 1;
 8004572:	4b9e      	ldr	r3, [pc, #632]	; (80047ec <SPI_available+0x858>)
 8004574:	2201      	movs	r2, #1
 8004576:	701a      	strb	r2, [r3, #0]
			tp1 = 1;
 8004578:	4b9d      	ldr	r3, [pc, #628]	; (80047f0 <SPI_available+0x85c>)
 800457a:	2201      	movs	r2, #1
 800457c:	701a      	strb	r2, [r3, #0]
			SEND_str("start\n");
 800457e:	489d      	ldr	r0, [pc, #628]	; (80047f4 <SPI_available+0x860>)
 8004580:	f7fd fcc6 	bl	8001f10 <SEND_str>
			SEND_str("status_OCD ");
 8004584:	489c      	ldr	r0, [pc, #624]	; (80047f8 <SPI_available+0x864>)
 8004586:	f7fd fcc3 	bl	8001f10 <SEND_str>
			USART_Tx(Status_OCD[0]);
 800458a:	4b9c      	ldr	r3, [pc, #624]	; (80047fc <SPI_available+0x868>)
 800458c:	781b      	ldrb	r3, [r3, #0]
 800458e:	4618      	mov	r0, r3
 8004590:	f7fd fca6 	bl	8001ee0 <USART_Tx>
			USART_Tx(Status_OCD[1]);
 8004594:	4b99      	ldr	r3, [pc, #612]	; (80047fc <SPI_available+0x868>)
 8004596:	785b      	ldrb	r3, [r3, #1]
 8004598:	4618      	mov	r0, r3
 800459a:	f7fd fca1 	bl	8001ee0 <USART_Tx>
			USART_Tx(Status_OCD[2]);
 800459e:	4b97      	ldr	r3, [pc, #604]	; (80047fc <SPI_available+0x868>)
 80045a0:	789b      	ldrb	r3, [r3, #2]
 80045a2:	4618      	mov	r0, r3
 80045a4:	f7fd fc9c 	bl	8001ee0 <USART_Tx>
			USART_Tx(Status_OCD[3]);
 80045a8:	4b94      	ldr	r3, [pc, #592]	; (80047fc <SPI_available+0x868>)
 80045aa:	78db      	ldrb	r3, [r3, #3]
 80045ac:	4618      	mov	r0, r3
 80045ae:	f7fd fc97 	bl	8001ee0 <USART_Tx>
			USART_Tx(Status_OCD[4]);
 80045b2:	4b92      	ldr	r3, [pc, #584]	; (80047fc <SPI_available+0x868>)
 80045b4:	791b      	ldrb	r3, [r3, #4]
 80045b6:	4618      	mov	r0, r3
 80045b8:	f7fd fc92 	bl	8001ee0 <USART_Tx>
			USART_Tx(Status_OCD[5]);
 80045bc:	4b8f      	ldr	r3, [pc, #572]	; (80047fc <SPI_available+0x868>)
 80045be:	795b      	ldrb	r3, [r3, #5]
 80045c0:	4618      	mov	r0, r3
 80045c2:	f7fd fc8d 	bl	8001ee0 <USART_Tx>
			USART_Tx(Status_OCD[6]);
 80045c6:	4b8d      	ldr	r3, [pc, #564]	; (80047fc <SPI_available+0x868>)
 80045c8:	799b      	ldrb	r3, [r3, #6]
 80045ca:	4618      	mov	r0, r3
 80045cc:	f7fd fc88 	bl	8001ee0 <USART_Tx>
			USART_Tx(Status_OCD[7]);
 80045d0:	4b8a      	ldr	r3, [pc, #552]	; (80047fc <SPI_available+0x868>)
 80045d2:	79db      	ldrb	r3, [r3, #7]
 80045d4:	4618      	mov	r0, r3
 80045d6:	f7fd fc83 	bl	8001ee0 <USART_Tx>
			SEND_str(" END_status_OCD\n");
 80045da:	4889      	ldr	r0, [pc, #548]	; (8004800 <SPI_available+0x86c>)
 80045dc:	f7fd fc98 	bl	8001f10 <SEND_str>
//			else
//				HAL_GPIO_WritePin(O7_GPIO_Port, O7_Pin, RESET);
			//-------------------------------------------------------

		}
		if(tp)
 80045e0:	4b82      	ldr	r3, [pc, #520]	; (80047ec <SPI_available+0x858>)
 80045e2:	781b      	ldrb	r3, [r3, #0]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	f000 811f 	beq.w	8004828 <SPI_available+0x894>
		{
			if(i == 0)
 80045ea:	4b86      	ldr	r3, [pc, #536]	; (8004804 <SPI_available+0x870>)
 80045ec:	781b      	ldrb	r3, [r3, #0]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d128      	bne.n	8004644 <SPI_available+0x6b0>
			{
				SPI_tx_buf[0] = Status_AIN[j];
 80045f2:	4b85      	ldr	r3, [pc, #532]	; (8004808 <SPI_available+0x874>)
 80045f4:	781b      	ldrb	r3, [r3, #0]
 80045f6:	461a      	mov	r2, r3
 80045f8:	4b84      	ldr	r3, [pc, #528]	; (800480c <SPI_available+0x878>)
 80045fa:	5c9a      	ldrb	r2, [r3, r2]
 80045fc:	4b84      	ldr	r3, [pc, #528]	; (8004810 <SPI_available+0x87c>)
 80045fe:	701a      	strb	r2, [r3, #0]
				j++;
 8004600:	4b81      	ldr	r3, [pc, #516]	; (8004808 <SPI_available+0x874>)
 8004602:	781b      	ldrb	r3, [r3, #0]
 8004604:	3301      	adds	r3, #1
 8004606:	b2da      	uxtb	r2, r3
 8004608:	4b7f      	ldr	r3, [pc, #508]	; (8004808 <SPI_available+0x874>)
 800460a:	701a      	strb	r2, [r3, #0]
				if(j > 7)
 800460c:	4b7e      	ldr	r3, [pc, #504]	; (8004808 <SPI_available+0x874>)
 800460e:	781b      	ldrb	r3, [r3, #0]
 8004610:	2b07      	cmp	r3, #7
 8004612:	d908      	bls.n	8004626 <SPI_available+0x692>
				{
					j = 0;
 8004614:	4b7c      	ldr	r3, [pc, #496]	; (8004808 <SPI_available+0x874>)
 8004616:	2200      	movs	r2, #0
 8004618:	701a      	strb	r2, [r3, #0]
					i++;
 800461a:	4b7a      	ldr	r3, [pc, #488]	; (8004804 <SPI_available+0x870>)
 800461c:	781b      	ldrb	r3, [r3, #0]
 800461e:	3301      	adds	r3, #1
 8004620:	b2da      	uxtb	r2, r3
 8004622:	4b78      	ldr	r3, [pc, #480]	; (8004804 <SPI_available+0x870>)
 8004624:	701a      	strb	r2, [r3, #0]
				}
				flag_iput_spi2 = 0;
 8004626:	4b7b      	ldr	r3, [pc, #492]	; (8004814 <SPI_available+0x880>)
 8004628:	2200      	movs	r2, #0
 800462a:	701a      	strb	r2, [r3, #0]
				HAL_SPI_TransmitReceive_IT(&hspi2, (uint8_t *)SPI_tx_buf, (uint8_t *)SPI_rx_buf, 1);
 800462c:	2301      	movs	r3, #1
 800462e:	4a6e      	ldr	r2, [pc, #440]	; (80047e8 <SPI_available+0x854>)
 8004630:	4977      	ldr	r1, [pc, #476]	; (8004810 <SPI_available+0x87c>)
 8004632:	4879      	ldr	r0, [pc, #484]	; (8004818 <SPI_available+0x884>)
 8004634:	f004 fb92 	bl	8008d5c <HAL_SPI_TransmitReceive_IT>
				while(!flag_iput_spi2) {;}
 8004638:	bf00      	nop
 800463a:	4b76      	ldr	r3, [pc, #472]	; (8004814 <SPI_available+0x880>)
 800463c:	781b      	ldrb	r3, [r3, #0]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d0fb      	beq.n	800463a <SPI_available+0x6a6>
 8004642:	e10c      	b.n	800485e <SPI_available+0x8ca>
			}
			else if(i == 1)
 8004644:	4b6f      	ldr	r3, [pc, #444]	; (8004804 <SPI_available+0x870>)
 8004646:	781b      	ldrb	r3, [r3, #0]
 8004648:	2b01      	cmp	r3, #1
 800464a:	d128      	bne.n	800469e <SPI_available+0x70a>
			{
				SPI_tx_buf[0] = Status_DIN[j];
 800464c:	4b6e      	ldr	r3, [pc, #440]	; (8004808 <SPI_available+0x874>)
 800464e:	781b      	ldrb	r3, [r3, #0]
 8004650:	461a      	mov	r2, r3
 8004652:	4b72      	ldr	r3, [pc, #456]	; (800481c <SPI_available+0x888>)
 8004654:	5c9a      	ldrb	r2, [r3, r2]
 8004656:	4b6e      	ldr	r3, [pc, #440]	; (8004810 <SPI_available+0x87c>)
 8004658:	701a      	strb	r2, [r3, #0]
				j++;
 800465a:	4b6b      	ldr	r3, [pc, #428]	; (8004808 <SPI_available+0x874>)
 800465c:	781b      	ldrb	r3, [r3, #0]
 800465e:	3301      	adds	r3, #1
 8004660:	b2da      	uxtb	r2, r3
 8004662:	4b69      	ldr	r3, [pc, #420]	; (8004808 <SPI_available+0x874>)
 8004664:	701a      	strb	r2, [r3, #0]
				if(j > 7)
 8004666:	4b68      	ldr	r3, [pc, #416]	; (8004808 <SPI_available+0x874>)
 8004668:	781b      	ldrb	r3, [r3, #0]
 800466a:	2b07      	cmp	r3, #7
 800466c:	d908      	bls.n	8004680 <SPI_available+0x6ec>
				{
					j = 0;
 800466e:	4b66      	ldr	r3, [pc, #408]	; (8004808 <SPI_available+0x874>)
 8004670:	2200      	movs	r2, #0
 8004672:	701a      	strb	r2, [r3, #0]
					i++;
 8004674:	4b63      	ldr	r3, [pc, #396]	; (8004804 <SPI_available+0x870>)
 8004676:	781b      	ldrb	r3, [r3, #0]
 8004678:	3301      	adds	r3, #1
 800467a:	b2da      	uxtb	r2, r3
 800467c:	4b61      	ldr	r3, [pc, #388]	; (8004804 <SPI_available+0x870>)
 800467e:	701a      	strb	r2, [r3, #0]
				}
				flag_iput_spi2 = 0;
 8004680:	4b64      	ldr	r3, [pc, #400]	; (8004814 <SPI_available+0x880>)
 8004682:	2200      	movs	r2, #0
 8004684:	701a      	strb	r2, [r3, #0]
				HAL_SPI_TransmitReceive_IT(&hspi2, (uint8_t *)SPI_tx_buf, (uint8_t *)SPI_rx_buf, 1);
 8004686:	2301      	movs	r3, #1
 8004688:	4a57      	ldr	r2, [pc, #348]	; (80047e8 <SPI_available+0x854>)
 800468a:	4961      	ldr	r1, [pc, #388]	; (8004810 <SPI_available+0x87c>)
 800468c:	4862      	ldr	r0, [pc, #392]	; (8004818 <SPI_available+0x884>)
 800468e:	f004 fb65 	bl	8008d5c <HAL_SPI_TransmitReceive_IT>
				while(!flag_iput_spi2) {;}
 8004692:	bf00      	nop
 8004694:	4b5f      	ldr	r3, [pc, #380]	; (8004814 <SPI_available+0x880>)
 8004696:	781b      	ldrb	r3, [r3, #0]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d0fb      	beq.n	8004694 <SPI_available+0x700>
 800469c:	e0df      	b.n	800485e <SPI_available+0x8ca>
			}
			else if(i == 2)
 800469e:	4b59      	ldr	r3, [pc, #356]	; (8004804 <SPI_available+0x870>)
 80046a0:	781b      	ldrb	r3, [r3, #0]
 80046a2:	2b02      	cmp	r3, #2
 80046a4:	d128      	bne.n	80046f8 <SPI_available+0x764>
			{
				SPI_tx_buf[0] = Status_PWM[j];
 80046a6:	4b58      	ldr	r3, [pc, #352]	; (8004808 <SPI_available+0x874>)
 80046a8:	781b      	ldrb	r3, [r3, #0]
 80046aa:	461a      	mov	r2, r3
 80046ac:	4b5c      	ldr	r3, [pc, #368]	; (8004820 <SPI_available+0x88c>)
 80046ae:	5c9a      	ldrb	r2, [r3, r2]
 80046b0:	4b57      	ldr	r3, [pc, #348]	; (8004810 <SPI_available+0x87c>)
 80046b2:	701a      	strb	r2, [r3, #0]
				j++;
 80046b4:	4b54      	ldr	r3, [pc, #336]	; (8004808 <SPI_available+0x874>)
 80046b6:	781b      	ldrb	r3, [r3, #0]
 80046b8:	3301      	adds	r3, #1
 80046ba:	b2da      	uxtb	r2, r3
 80046bc:	4b52      	ldr	r3, [pc, #328]	; (8004808 <SPI_available+0x874>)
 80046be:	701a      	strb	r2, [r3, #0]
				if(j > 7)
 80046c0:	4b51      	ldr	r3, [pc, #324]	; (8004808 <SPI_available+0x874>)
 80046c2:	781b      	ldrb	r3, [r3, #0]
 80046c4:	2b07      	cmp	r3, #7
 80046c6:	d908      	bls.n	80046da <SPI_available+0x746>
				{
					j = 0;
 80046c8:	4b4f      	ldr	r3, [pc, #316]	; (8004808 <SPI_available+0x874>)
 80046ca:	2200      	movs	r2, #0
 80046cc:	701a      	strb	r2, [r3, #0]
					i++;
 80046ce:	4b4d      	ldr	r3, [pc, #308]	; (8004804 <SPI_available+0x870>)
 80046d0:	781b      	ldrb	r3, [r3, #0]
 80046d2:	3301      	adds	r3, #1
 80046d4:	b2da      	uxtb	r2, r3
 80046d6:	4b4b      	ldr	r3, [pc, #300]	; (8004804 <SPI_available+0x870>)
 80046d8:	701a      	strb	r2, [r3, #0]
				}
				flag_iput_spi2 = 0;
 80046da:	4b4e      	ldr	r3, [pc, #312]	; (8004814 <SPI_available+0x880>)
 80046dc:	2200      	movs	r2, #0
 80046de:	701a      	strb	r2, [r3, #0]
				HAL_SPI_TransmitReceive_IT(&hspi2, (uint8_t *)SPI_tx_buf, (uint8_t *)SPI_rx_buf, 1);
 80046e0:	2301      	movs	r3, #1
 80046e2:	4a41      	ldr	r2, [pc, #260]	; (80047e8 <SPI_available+0x854>)
 80046e4:	494a      	ldr	r1, [pc, #296]	; (8004810 <SPI_available+0x87c>)
 80046e6:	484c      	ldr	r0, [pc, #304]	; (8004818 <SPI_available+0x884>)
 80046e8:	f004 fb38 	bl	8008d5c <HAL_SPI_TransmitReceive_IT>
				while(!flag_iput_spi2) {;}
 80046ec:	bf00      	nop
 80046ee:	4b49      	ldr	r3, [pc, #292]	; (8004814 <SPI_available+0x880>)
 80046f0:	781b      	ldrb	r3, [r3, #0]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d0fb      	beq.n	80046ee <SPI_available+0x75a>
 80046f6:	e0b2      	b.n	800485e <SPI_available+0x8ca>
			}
			else if(i == 3)
 80046f8:	4b42      	ldr	r3, [pc, #264]	; (8004804 <SPI_available+0x870>)
 80046fa:	781b      	ldrb	r3, [r3, #0]
 80046fc:	2b03      	cmp	r3, #3
 80046fe:	d128      	bne.n	8004752 <SPI_available+0x7be>
			{
				SPI_tx_buf[0] = Status_OCD[j];
 8004700:	4b41      	ldr	r3, [pc, #260]	; (8004808 <SPI_available+0x874>)
 8004702:	781b      	ldrb	r3, [r3, #0]
 8004704:	461a      	mov	r2, r3
 8004706:	4b3d      	ldr	r3, [pc, #244]	; (80047fc <SPI_available+0x868>)
 8004708:	5c9a      	ldrb	r2, [r3, r2]
 800470a:	4b41      	ldr	r3, [pc, #260]	; (8004810 <SPI_available+0x87c>)
 800470c:	701a      	strb	r2, [r3, #0]
				j++;
 800470e:	4b3e      	ldr	r3, [pc, #248]	; (8004808 <SPI_available+0x874>)
 8004710:	781b      	ldrb	r3, [r3, #0]
 8004712:	3301      	adds	r3, #1
 8004714:	b2da      	uxtb	r2, r3
 8004716:	4b3c      	ldr	r3, [pc, #240]	; (8004808 <SPI_available+0x874>)
 8004718:	701a      	strb	r2, [r3, #0]
				if(j > 7)
 800471a:	4b3b      	ldr	r3, [pc, #236]	; (8004808 <SPI_available+0x874>)
 800471c:	781b      	ldrb	r3, [r3, #0]
 800471e:	2b07      	cmp	r3, #7
 8004720:	d908      	bls.n	8004734 <SPI_available+0x7a0>
				{
					j = 0;
 8004722:	4b39      	ldr	r3, [pc, #228]	; (8004808 <SPI_available+0x874>)
 8004724:	2200      	movs	r2, #0
 8004726:	701a      	strb	r2, [r3, #0]
					i++;
 8004728:	4b36      	ldr	r3, [pc, #216]	; (8004804 <SPI_available+0x870>)
 800472a:	781b      	ldrb	r3, [r3, #0]
 800472c:	3301      	adds	r3, #1
 800472e:	b2da      	uxtb	r2, r3
 8004730:	4b34      	ldr	r3, [pc, #208]	; (8004804 <SPI_available+0x870>)
 8004732:	701a      	strb	r2, [r3, #0]
				}
				flag_iput_spi2 = 0;
 8004734:	4b37      	ldr	r3, [pc, #220]	; (8004814 <SPI_available+0x880>)
 8004736:	2200      	movs	r2, #0
 8004738:	701a      	strb	r2, [r3, #0]
				HAL_SPI_TransmitReceive_IT(&hspi2, (uint8_t *)SPI_tx_buf, (uint8_t *)SPI_rx_buf, 1);
 800473a:	2301      	movs	r3, #1
 800473c:	4a2a      	ldr	r2, [pc, #168]	; (80047e8 <SPI_available+0x854>)
 800473e:	4934      	ldr	r1, [pc, #208]	; (8004810 <SPI_available+0x87c>)
 8004740:	4835      	ldr	r0, [pc, #212]	; (8004818 <SPI_available+0x884>)
 8004742:	f004 fb0b 	bl	8008d5c <HAL_SPI_TransmitReceive_IT>
				while(!flag_iput_spi2) {;}
 8004746:	bf00      	nop
 8004748:	4b32      	ldr	r3, [pc, #200]	; (8004814 <SPI_available+0x880>)
 800474a:	781b      	ldrb	r3, [r3, #0]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d0fb      	beq.n	8004748 <SPI_available+0x7b4>
 8004750:	e085      	b.n	800485e <SPI_available+0x8ca>
			}
			else if(i == 4)
 8004752:	4b2c      	ldr	r3, [pc, #176]	; (8004804 <SPI_available+0x870>)
 8004754:	781b      	ldrb	r3, [r3, #0]
 8004756:	2b04      	cmp	r3, #4
 8004758:	d128      	bne.n	80047ac <SPI_available+0x818>
			{
				SPI_tx_buf[0] = Status_1WR[j];
 800475a:	4b2b      	ldr	r3, [pc, #172]	; (8004808 <SPI_available+0x874>)
 800475c:	781b      	ldrb	r3, [r3, #0]
 800475e:	461a      	mov	r2, r3
 8004760:	4b1f      	ldr	r3, [pc, #124]	; (80047e0 <SPI_available+0x84c>)
 8004762:	5c9a      	ldrb	r2, [r3, r2]
 8004764:	4b2a      	ldr	r3, [pc, #168]	; (8004810 <SPI_available+0x87c>)
 8004766:	701a      	strb	r2, [r3, #0]
				j++;
 8004768:	4b27      	ldr	r3, [pc, #156]	; (8004808 <SPI_available+0x874>)
 800476a:	781b      	ldrb	r3, [r3, #0]
 800476c:	3301      	adds	r3, #1
 800476e:	b2da      	uxtb	r2, r3
 8004770:	4b25      	ldr	r3, [pc, #148]	; (8004808 <SPI_available+0x874>)
 8004772:	701a      	strb	r2, [r3, #0]
				if(j > 7)
 8004774:	4b24      	ldr	r3, [pc, #144]	; (8004808 <SPI_available+0x874>)
 8004776:	781b      	ldrb	r3, [r3, #0]
 8004778:	2b07      	cmp	r3, #7
 800477a:	d908      	bls.n	800478e <SPI_available+0x7fa>
				{
					j = 0;
 800477c:	4b22      	ldr	r3, [pc, #136]	; (8004808 <SPI_available+0x874>)
 800477e:	2200      	movs	r2, #0
 8004780:	701a      	strb	r2, [r3, #0]
					i++;
 8004782:	4b20      	ldr	r3, [pc, #128]	; (8004804 <SPI_available+0x870>)
 8004784:	781b      	ldrb	r3, [r3, #0]
 8004786:	3301      	adds	r3, #1
 8004788:	b2da      	uxtb	r2, r3
 800478a:	4b1e      	ldr	r3, [pc, #120]	; (8004804 <SPI_available+0x870>)
 800478c:	701a      	strb	r2, [r3, #0]
				}
//				else
//				{
					flag_iput_spi2 = 0;
 800478e:	4b21      	ldr	r3, [pc, #132]	; (8004814 <SPI_available+0x880>)
 8004790:	2200      	movs	r2, #0
 8004792:	701a      	strb	r2, [r3, #0]
					HAL_SPI_TransmitReceive_IT(&hspi2, (uint8_t *)SPI_tx_buf, (uint8_t *)SPI_rx_buf, 1);
 8004794:	2301      	movs	r3, #1
 8004796:	4a14      	ldr	r2, [pc, #80]	; (80047e8 <SPI_available+0x854>)
 8004798:	491d      	ldr	r1, [pc, #116]	; (8004810 <SPI_available+0x87c>)
 800479a:	481f      	ldr	r0, [pc, #124]	; (8004818 <SPI_available+0x884>)
 800479c:	f004 fade 	bl	8008d5c <HAL_SPI_TransmitReceive_IT>
					while(!flag_iput_spi2) {;}
 80047a0:	bf00      	nop
 80047a2:	4b1c      	ldr	r3, [pc, #112]	; (8004814 <SPI_available+0x880>)
 80047a4:	781b      	ldrb	r3, [r3, #0]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d0fb      	beq.n	80047a2 <SPI_available+0x80e>
 80047aa:	e058      	b.n	800485e <SPI_available+0x8ca>
//				}
			}
			else if(i == 5)
 80047ac:	4b15      	ldr	r3, [pc, #84]	; (8004804 <SPI_available+0x870>)
 80047ae:	781b      	ldrb	r3, [r3, #0]
 80047b0:	2b05      	cmp	r3, #5
 80047b2:	d154      	bne.n	800485e <SPI_available+0x8ca>
			{
				i = 0;
 80047b4:	4b13      	ldr	r3, [pc, #76]	; (8004804 <SPI_available+0x870>)
 80047b6:	2200      	movs	r2, #0
 80047b8:	701a      	strb	r2, [r3, #0]
				j = 0;
 80047ba:	4b13      	ldr	r3, [pc, #76]	; (8004808 <SPI_available+0x874>)
 80047bc:	2200      	movs	r2, #0
 80047be:	701a      	strb	r2, [r3, #0]
				tp = 0;
 80047c0:	4b0a      	ldr	r3, [pc, #40]	; (80047ec <SPI_available+0x858>)
 80047c2:	2200      	movs	r2, #0
 80047c4:	701a      	strb	r2, [r3, #0]
				SEND_str("the_end\n");
 80047c6:	4817      	ldr	r0, [pc, #92]	; (8004824 <SPI_available+0x890>)
 80047c8:	f7fd fba2 	bl	8001f10 <SEND_str>
				flag_iput_spi2 = 0;
 80047cc:	4b11      	ldr	r3, [pc, #68]	; (8004814 <SPI_available+0x880>)
 80047ce:	2200      	movs	r2, #0
 80047d0:	701a      	strb	r2, [r3, #0]
				HAL_SPI_TransmitReceive_IT(&hspi2, (uint8_t *)SPI_tx_buf, (uint8_t *)SPI_rx_buf, 1);
 80047d2:	2301      	movs	r3, #1
 80047d4:	4a04      	ldr	r2, [pc, #16]	; (80047e8 <SPI_available+0x854>)
 80047d6:	490e      	ldr	r1, [pc, #56]	; (8004810 <SPI_available+0x87c>)
 80047d8:	480f      	ldr	r0, [pc, #60]	; (8004818 <SPI_available+0x884>)
 80047da:	f004 fabf 	bl	8008d5c <HAL_SPI_TransmitReceive_IT>
 80047de:	e03e      	b.n	800485e <SPI_available+0x8ca>
 80047e0:	20000340 	.word	0x20000340
 80047e4:	40020c00 	.word	0x40020c00
 80047e8:	20000348 	.word	0x20000348
 80047ec:	20000350 	.word	0x20000350
 80047f0:	20000058 	.word	0x20000058
 80047f4:	0801cc0c 	.word	0x0801cc0c
 80047f8:	0801cc14 	.word	0x0801cc14
 80047fc:	20000338 	.word	0x20000338
 8004800:	0801cc20 	.word	0x0801cc20
 8004804:	2000034e 	.word	0x2000034e
 8004808:	2000034f 	.word	0x2000034f
 800480c:	20000320 	.word	0x20000320
 8004810:	2000034c 	.word	0x2000034c
 8004814:	2000034d 	.word	0x2000034d
 8004818:	20000838 	.word	0x20000838
 800481c:	20000328 	.word	0x20000328
 8004820:	20000330 	.word	0x20000330
 8004824:	0801cc34 	.word	0x0801cc34
			}
		}
		else if(SPI_rx_buf[0] == MCU_RELAY_CNT)
 8004828:	4b17      	ldr	r3, [pc, #92]	; (8004888 <SPI_available+0x8f4>)
 800482a:	781b      	ldrb	r3, [r3, #0]
 800482c:	2ba1      	cmp	r3, #161	; 0xa1
 800482e:	d016      	beq.n	800485e <SPI_available+0x8ca>
		{
			//По этой комманде надо прислать КОЛ-ВО подключенных блоков расширения РЕЛЕ (от 0 до 10)
		}
		else if(SPI_rx_buf[0] == MCU_DIGITAL_CNT)
 8004830:	4b15      	ldr	r3, [pc, #84]	; (8004888 <SPI_available+0x8f4>)
 8004832:	781b      	ldrb	r3, [r3, #0]
 8004834:	2ba2      	cmp	r3, #162	; 0xa2
 8004836:	d012      	beq.n	800485e <SPI_available+0x8ca>
		{
			//По этой комманде надо прислать КОЛ-ВО подключенных блоков расширения ЦИФРОВЫХ ВХОДОВ (от 0 до 10)
		}
		else if(SPI_rx_buf[0] == MCU_DIMMING_CNT)
 8004838:	4b13      	ldr	r3, [pc, #76]	; (8004888 <SPI_available+0x8f4>)
 800483a:	781b      	ldrb	r3, [r3, #0]
 800483c:	2ba3      	cmp	r3, #163	; 0xa3
 800483e:	d00e      	beq.n	800485e <SPI_available+0x8ca>
		{
			//По этой комманде надо прислать КОЛ-ВО подключенных блоков расширения ДИММИРОВАНИЯ (от 0 до 10)
		}
		else if(SPI_rx_buf[0] == MCU_INTERFACE_CNT)
 8004840:	4b11      	ldr	r3, [pc, #68]	; (8004888 <SPI_available+0x8f4>)
 8004842:	781b      	ldrb	r3, [r3, #0]
 8004844:	2ba4      	cmp	r3, #164	; 0xa4
 8004846:	d00a      	beq.n	800485e <SPI_available+0x8ca>
		{
			//По этой комманде надо прислать КОЛ-ВО подключенных блоков расширения ИНТЕРФЕЙСОВ (от 0 до 10)
		}
		else if(SPI_rx_buf[0] == MCU_RELAY_ADR)
 8004848:	4b0f      	ldr	r3, [pc, #60]	; (8004888 <SPI_available+0x8f4>)
 800484a:	781b      	ldrb	r3, [r3, #0]
 800484c:	2bb1      	cmp	r3, #177	; 0xb1
 800484e:	d006      	beq.n	800485e <SPI_available+0x8ca>
		{
			//По этой комманде надо прислать АДРЕСА подключенных блоков расширения РЕЛЕ (от 2 до 11)
		}
		else if(SPI_rx_buf[0] == MCU_DIGITAL_ADR)
 8004850:	4b0d      	ldr	r3, [pc, #52]	; (8004888 <SPI_available+0x8f4>)
 8004852:	781b      	ldrb	r3, [r3, #0]
 8004854:	2bb2      	cmp	r3, #178	; 0xb2
 8004856:	d002      	beq.n	800485e <SPI_available+0x8ca>
		{
			//По этой комманде надо прислать АДРЕСА подключенных блоков расширения ЦИФРОВЫХ ВХОДОВ (от 12 до 21)
		}
		else if(SPI_rx_buf[0] == MCU_DIMMING_ADR)
 8004858:	4b0b      	ldr	r3, [pc, #44]	; (8004888 <SPI_available+0x8f4>)
 800485a:	781b      	ldrb	r3, [r3, #0]
 800485c:	2bb3      	cmp	r3, #179	; 0xb3
		}
		else if(SPI_rx_buf[0] == MCU_INTERFACE_ADR)
		{
			//По этой комманде надо прислать АДРЕСА подключенных блоков расширения ИНТЕРФЕЙСОВ (от 32 до 41)
		}
		if(!tp)
 800485e:	4b0b      	ldr	r3, [pc, #44]	; (800488c <SPI_available+0x8f8>)
 8004860:	781b      	ldrb	r3, [r3, #0]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d10d      	bne.n	8004882 <SPI_available+0x8ee>
//			{
//				tp1 = 0;
//			}
//			else
//			{
				flag_iput_spi2 = 1;		//Fix bag! so so
 8004866:	4b0a      	ldr	r3, [pc, #40]	; (8004890 <SPI_available+0x8fc>)
 8004868:	2201      	movs	r2, #1
 800486a:	701a      	strb	r2, [r3, #0]
				HAL_SPI_TransmitReceive_IT(&hspi2, (uint8_t *)SPI_tx_buf, (uint8_t *)SPI_rx_buf, 1);
 800486c:	2301      	movs	r3, #1
 800486e:	4a06      	ldr	r2, [pc, #24]	; (8004888 <SPI_available+0x8f4>)
 8004870:	4908      	ldr	r1, [pc, #32]	; (8004894 <SPI_available+0x900>)
 8004872:	4809      	ldr	r0, [pc, #36]	; (8004898 <SPI_available+0x904>)
 8004874:	f004 fa72 	bl	8008d5c <HAL_SPI_TransmitReceive_IT>
				while(!flag_iput_spi2) {;}
 8004878:	bf00      	nop
 800487a:	4b05      	ldr	r3, [pc, #20]	; (8004890 <SPI_available+0x8fc>)
 800487c:	781b      	ldrb	r3, [r3, #0]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d0fb      	beq.n	800487a <SPI_available+0x8e6>
		//				HAL_SPI_TransmitReceive_IT(&hspi2, (uint8_t *)SPI_tx_buf, (uint8_t *)SPI_rx_buf, 1);
		//				while(!flag_iput_spi2) {;}
		//			}
		//		}
	}
}
 8004882:	bf00      	nop
 8004884:	bd80      	pop	{r7, pc}
 8004886:	bf00      	nop
 8004888:	20000348 	.word	0x20000348
 800488c:	20000350 	.word	0x20000350
 8004890:	2000034d 	.word	0x2000034d
 8004894:	2000034c 	.word	0x2000034c
 8004898:	20000838 	.word	0x20000838

0800489c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800489c:	b480      	push	{r7}
 800489e:	b083      	sub	sp, #12
 80048a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80048a2:	2300      	movs	r3, #0
 80048a4:	607b      	str	r3, [r7, #4]
 80048a6:	4b10      	ldr	r3, [pc, #64]	; (80048e8 <HAL_MspInit+0x4c>)
 80048a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048aa:	4a0f      	ldr	r2, [pc, #60]	; (80048e8 <HAL_MspInit+0x4c>)
 80048ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80048b0:	6453      	str	r3, [r2, #68]	; 0x44
 80048b2:	4b0d      	ldr	r3, [pc, #52]	; (80048e8 <HAL_MspInit+0x4c>)
 80048b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80048ba:	607b      	str	r3, [r7, #4]
 80048bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80048be:	2300      	movs	r3, #0
 80048c0:	603b      	str	r3, [r7, #0]
 80048c2:	4b09      	ldr	r3, [pc, #36]	; (80048e8 <HAL_MspInit+0x4c>)
 80048c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048c6:	4a08      	ldr	r2, [pc, #32]	; (80048e8 <HAL_MspInit+0x4c>)
 80048c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048cc:	6413      	str	r3, [r2, #64]	; 0x40
 80048ce:	4b06      	ldr	r3, [pc, #24]	; (80048e8 <HAL_MspInit+0x4c>)
 80048d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048d6:	603b      	str	r3, [r7, #0]
 80048d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80048da:	bf00      	nop
 80048dc:	370c      	adds	r7, #12
 80048de:	46bd      	mov	sp, r7
 80048e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e4:	4770      	bx	lr
 80048e6:	bf00      	nop
 80048e8:	40023800 	.word	0x40023800

080048ec <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b08c      	sub	sp, #48	; 0x30
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80048f4:	2300      	movs	r3, #0
 80048f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80048f8:	2300      	movs	r3, #0
 80048fa:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 80048fc:	2200      	movs	r2, #0
 80048fe:	6879      	ldr	r1, [r7, #4]
 8004900:	2019      	movs	r0, #25
 8004902:	f001 fb9b 	bl	800603c <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8004906:	2019      	movs	r0, #25
 8004908:	f001 fbb4 	bl	8006074 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800490c:	2300      	movs	r3, #0
 800490e:	60fb      	str	r3, [r7, #12]
 8004910:	4b1f      	ldr	r3, [pc, #124]	; (8004990 <HAL_InitTick+0xa4>)
 8004912:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004914:	4a1e      	ldr	r2, [pc, #120]	; (8004990 <HAL_InitTick+0xa4>)
 8004916:	f043 0301 	orr.w	r3, r3, #1
 800491a:	6453      	str	r3, [r2, #68]	; 0x44
 800491c:	4b1c      	ldr	r3, [pc, #112]	; (8004990 <HAL_InitTick+0xa4>)
 800491e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004920:	f003 0301 	and.w	r3, r3, #1
 8004924:	60fb      	str	r3, [r7, #12]
 8004926:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004928:	f107 0210 	add.w	r2, r7, #16
 800492c:	f107 0314 	add.w	r3, r7, #20
 8004930:	4611      	mov	r1, r2
 8004932:	4618      	mov	r0, r3
 8004934:	f003 fe32 	bl	800859c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8004938:	f003 fe1c 	bl	8008574 <HAL_RCC_GetPCLK2Freq>
 800493c:	4603      	mov	r3, r0
 800493e:	005b      	lsls	r3, r3, #1
 8004940:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8004942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004944:	4a13      	ldr	r2, [pc, #76]	; (8004994 <HAL_InitTick+0xa8>)
 8004946:	fba2 2303 	umull	r2, r3, r2, r3
 800494a:	0c9b      	lsrs	r3, r3, #18
 800494c:	3b01      	subs	r3, #1
 800494e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8004950:	4b11      	ldr	r3, [pc, #68]	; (8004998 <HAL_InitTick+0xac>)
 8004952:	4a12      	ldr	r2, [pc, #72]	; (800499c <HAL_InitTick+0xb0>)
 8004954:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8004956:	4b10      	ldr	r3, [pc, #64]	; (8004998 <HAL_InitTick+0xac>)
 8004958:	f240 32e7 	movw	r2, #999	; 0x3e7
 800495c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800495e:	4a0e      	ldr	r2, [pc, #56]	; (8004998 <HAL_InitTick+0xac>)
 8004960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004962:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8004964:	4b0c      	ldr	r3, [pc, #48]	; (8004998 <HAL_InitTick+0xac>)
 8004966:	2200      	movs	r2, #0
 8004968:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800496a:	4b0b      	ldr	r3, [pc, #44]	; (8004998 <HAL_InitTick+0xac>)
 800496c:	2200      	movs	r2, #0
 800496e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8004970:	4809      	ldr	r0, [pc, #36]	; (8004998 <HAL_InitTick+0xac>)
 8004972:	f004 fd91 	bl	8009498 <HAL_TIM_Base_Init>
 8004976:	4603      	mov	r3, r0
 8004978:	2b00      	cmp	r3, #0
 800497a:	d104      	bne.n	8004986 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 800497c:	4806      	ldr	r0, [pc, #24]	; (8004998 <HAL_InitTick+0xac>)
 800497e:	f004 fdc0 	bl	8009502 <HAL_TIM_Base_Start_IT>
 8004982:	4603      	mov	r3, r0
 8004984:	e000      	b.n	8004988 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8004986:	2301      	movs	r3, #1
}
 8004988:	4618      	mov	r0, r3
 800498a:	3730      	adds	r7, #48	; 0x30
 800498c:	46bd      	mov	sp, r7
 800498e:	bd80      	pop	{r7, pc}
 8004990:	40023800 	.word	0x40023800
 8004994:	431bde83 	.word	0x431bde83
 8004998:	200008e8 	.word	0x200008e8
 800499c:	40010000 	.word	0x40010000

080049a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80049a0:	b480      	push	{r7}
 80049a2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80049a4:	bf00      	nop
 80049a6:	46bd      	mov	sp, r7
 80049a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ac:	4770      	bx	lr

080049ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80049ae:	b480      	push	{r7}
 80049b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80049b2:	e7fe      	b.n	80049b2 <HardFault_Handler+0x4>

080049b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80049b4:	b480      	push	{r7}
 80049b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80049b8:	e7fe      	b.n	80049b8 <MemManage_Handler+0x4>

080049ba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80049ba:	b480      	push	{r7}
 80049bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80049be:	e7fe      	b.n	80049be <BusFault_Handler+0x4>

080049c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80049c0:	b480      	push	{r7}
 80049c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80049c4:	e7fe      	b.n	80049c4 <UsageFault_Handler+0x4>

080049c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80049c6:	b480      	push	{r7}
 80049c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80049ca:	bf00      	nop
 80049cc:	46bd      	mov	sp, r7
 80049ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d2:	4770      	bx	lr

080049d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80049d4:	b480      	push	{r7}
 80049d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80049d8:	bf00      	nop
 80049da:	46bd      	mov	sp, r7
 80049dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e0:	4770      	bx	lr

080049e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80049e2:	b480      	push	{r7}
 80049e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80049e6:	bf00      	nop
 80049e8:	46bd      	mov	sp, r7
 80049ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ee:	4770      	bx	lr

080049f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80049f0:	b480      	push	{r7}
 80049f2:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80049f4:	bf00      	nop
 80049f6:	46bd      	mov	sp, r7
 80049f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fc:	4770      	bx	lr
	...

08004a00 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch4_up);
 8004a04:	4802      	ldr	r0, [pc, #8]	; (8004a10 <DMA1_Stream2_IRQHandler+0x10>)
 8004a06:	f001 fc6b 	bl	80062e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8004a0a:	bf00      	nop
 8004a0c:	bd80      	pop	{r7, pc}
 8004a0e:	bf00      	nop
 8004a10:	20000ac8 	.word	0x20000ac8

08004a14 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1_trig);
 8004a18:	4802      	ldr	r0, [pc, #8]	; (8004a24 <DMA1_Stream4_IRQHandler+0x10>)
 8004a1a:	f001 fc61 	bl	80062e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8004a1e:	bf00      	nop
 8004a20:	bd80      	pop	{r7, pc}
 8004a22:	bf00      	nop
 8004a24:	20000a08 	.word	0x20000a08

08004a28 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch2);
 8004a2c:	4802      	ldr	r0, [pc, #8]	; (8004a38 <DMA1_Stream5_IRQHandler+0x10>)
 8004a2e:	f001 fc57 	bl	80062e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8004a32:	bf00      	nop
 8004a34:	bd80      	pop	{r7, pc}
 8004a36:	bf00      	nop
 8004a38:	20000a68 	.word	0x20000a68

08004a3c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8004a40:	f44f 7080 	mov.w	r0, #256	; 0x100
 8004a44:	f003 f926 	bl	8007c94 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8004a48:	f44f 7000 	mov.w	r0, #512	; 0x200
 8004a4c:	f003 f922 	bl	8007c94 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8004a50:	bf00      	nop
 8004a52:	bd80      	pop	{r7, pc}

08004a54 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004a58:	4802      	ldr	r0, [pc, #8]	; (8004a64 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8004a5a:	f004 ff1d 	bl	8009898 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8004a5e:	bf00      	nop
 8004a60:	bd80      	pop	{r7, pc}
 8004a62:	bf00      	nop
 8004a64:	200008e8 	.word	0x200008e8

08004a68 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8004a6c:	4802      	ldr	r0, [pc, #8]	; (8004a78 <SPI2_IRQHandler+0x10>)
 8004a6e:	f004 fa09 	bl	8008e84 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8004a72:	bf00      	nop
 8004a74:	bd80      	pop	{r7, pc}
 8004a76:	bf00      	nop
 8004a78:	20000838 	.word	0x20000838

08004a7c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	b083      	sub	sp, #12
 8004a80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	if(((huart1.Instance->SR & USART_SR_RXNE) != RESET) && ((huart1.Instance->CR1 & USART_CR1_RXNEIE) != RESET))
 8004a82:	4b18      	ldr	r3, [pc, #96]	; (8004ae4 <USART1_IRQHandler+0x68>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f003 0320 	and.w	r3, r3, #32
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d022      	beq.n	8004ad6 <USART1_IRQHandler+0x5a>
 8004a90:	4b14      	ldr	r3, [pc, #80]	; (8004ae4 <USART1_IRQHandler+0x68>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	68db      	ldr	r3, [r3, #12]
 8004a96:	f003 0320 	and.w	r3, r3, #32
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d01b      	beq.n	8004ad6 <USART1_IRQHandler+0x5a>
	{
		uint8_t rbyte = (uint8_t)(huart1.Instance->DR & (uint8_t)0x00FF); // читает байт из регистра
 8004a9e:	4b11      	ldr	r3, [pc, #68]	; (8004ae4 <USART1_IRQHandler+0x68>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	685b      	ldr	r3, [r3, #4]
 8004aa4:	71fb      	strb	r3, [r7, #7]
		gsm_rx_buffer_index_t i = (uint16_t)(gsm_rx_buffer_head + 1) % GSM_RX_BUFFER_SIZE;
 8004aa6:	4b10      	ldr	r3, [pc, #64]	; (8004ae8 <USART1_IRQHandler+0x6c>)
 8004aa8:	781b      	ldrb	r3, [r3, #0]
 8004aaa:	b2db      	uxtb	r3, r3
 8004aac:	3301      	adds	r3, #1
 8004aae:	b2db      	uxtb	r3, r3
 8004ab0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004ab4:	71bb      	strb	r3, [r7, #6]

		if(i != gsm_rx_buffer_tail)
 8004ab6:	4b0d      	ldr	r3, [pc, #52]	; (8004aec <USART1_IRQHandler+0x70>)
 8004ab8:	781b      	ldrb	r3, [r3, #0]
 8004aba:	b2db      	uxtb	r3, r3
 8004abc:	79ba      	ldrb	r2, [r7, #6]
 8004abe:	429a      	cmp	r2, r3
 8004ac0:	d009      	beq.n	8004ad6 <USART1_IRQHandler+0x5a>
		{
			gsm_rx_buffer[gsm_rx_buffer_head] = rbyte;
 8004ac2:	4b09      	ldr	r3, [pc, #36]	; (8004ae8 <USART1_IRQHandler+0x6c>)
 8004ac4:	781b      	ldrb	r3, [r3, #0]
 8004ac6:	b2db      	uxtb	r3, r3
 8004ac8:	4619      	mov	r1, r3
 8004aca:	4a09      	ldr	r2, [pc, #36]	; (8004af0 <USART1_IRQHandler+0x74>)
 8004acc:	79fb      	ldrb	r3, [r7, #7]
 8004ace:	5453      	strb	r3, [r2, r1]
			gsm_rx_buffer_head = i;
 8004ad0:	4a05      	ldr	r2, [pc, #20]	; (8004ae8 <USART1_IRQHandler+0x6c>)
 8004ad2:	79bb      	ldrb	r3, [r7, #6]
 8004ad4:	7013      	strb	r3, [r2, #0]
		}
	}

	return;
 8004ad6:	bf00      	nop
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004ad8:	370c      	adds	r7, #12
 8004ada:	46bd      	mov	sp, r7
 8004adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae0:	4770      	bx	lr
 8004ae2:	bf00      	nop
 8004ae4:	20000b68 	.word	0x20000b68
 8004ae8:	20000358 	.word	0x20000358
 8004aec:	20000359 	.word	0x20000359
 8004af0:	2000035c 	.word	0x2000035c

08004af4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004af4:	b480      	push	{r7}
 8004af6:	b083      	sub	sp, #12
 8004af8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	if(((huart2.Instance->SR & USART_SR_RXNE) != RESET) && ((huart2.Instance->CR1 & USART_CR1_RXNEIE) != RESET))
 8004afa:	4b18      	ldr	r3, [pc, #96]	; (8004b5c <USART2_IRQHandler+0x68>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f003 0320 	and.w	r3, r3, #32
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d022      	beq.n	8004b4e <USART2_IRQHandler+0x5a>
 8004b08:	4b14      	ldr	r3, [pc, #80]	; (8004b5c <USART2_IRQHandler+0x68>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	68db      	ldr	r3, [r3, #12]
 8004b0e:	f003 0320 	and.w	r3, r3, #32
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d01b      	beq.n	8004b4e <USART2_IRQHandler+0x5a>
	{
		uint8_t rbyte = (uint8_t)(huart2.Instance->DR & (uint8_t)0x00FF); // читает байт из регистра
 8004b16:	4b11      	ldr	r3, [pc, #68]	; (8004b5c <USART2_IRQHandler+0x68>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	71fb      	strb	r3, [r7, #7]
		rs485_rx_buffer_index_t i = (uint16_t)(rs485_rx_buffer_head + 1) % RS485_RX_BUFFER_SIZE;
 8004b1e:	4b10      	ldr	r3, [pc, #64]	; (8004b60 <USART2_IRQHandler+0x6c>)
 8004b20:	781b      	ldrb	r3, [r3, #0]
 8004b22:	b2db      	uxtb	r3, r3
 8004b24:	3301      	adds	r3, #1
 8004b26:	b2db      	uxtb	r3, r3
 8004b28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004b2c:	71bb      	strb	r3, [r7, #6]

		if(i != rs485_rx_buffer_tail)
 8004b2e:	4b0d      	ldr	r3, [pc, #52]	; (8004b64 <USART2_IRQHandler+0x70>)
 8004b30:	781b      	ldrb	r3, [r3, #0]
 8004b32:	b2db      	uxtb	r3, r3
 8004b34:	79ba      	ldrb	r2, [r7, #6]
 8004b36:	429a      	cmp	r2, r3
 8004b38:	d009      	beq.n	8004b4e <USART2_IRQHandler+0x5a>
		{
			rs485_rx_buffer[rs485_rx_buffer_head] = rbyte;
 8004b3a:	4b09      	ldr	r3, [pc, #36]	; (8004b60 <USART2_IRQHandler+0x6c>)
 8004b3c:	781b      	ldrb	r3, [r3, #0]
 8004b3e:	b2db      	uxtb	r3, r3
 8004b40:	4619      	mov	r1, r3
 8004b42:	4a09      	ldr	r2, [pc, #36]	; (8004b68 <USART2_IRQHandler+0x74>)
 8004b44:	79fb      	ldrb	r3, [r7, #7]
 8004b46:	5453      	strb	r3, [r2, r1]
			rs485_rx_buffer_head = i;
 8004b48:	4a05      	ldr	r2, [pc, #20]	; (8004b60 <USART2_IRQHandler+0x6c>)
 8004b4a:	79bb      	ldrb	r3, [r7, #6]
 8004b4c:	7013      	strb	r3, [r2, #0]
		}
	}

	return;
 8004b4e:	bf00      	nop
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004b50:	370c      	adds	r7, #12
 8004b52:	46bd      	mov	sp, r7
 8004b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b58:	4770      	bx	lr
 8004b5a:	bf00      	nop
 8004b5c:	20000ba8 	.word	0x20000ba8
 8004b60:	200003e0 	.word	0x200003e0
 8004b64:	200003e1 	.word	0x200003e1
 8004b68:	200003e4 	.word	0x200003e4

08004b6c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	b083      	sub	sp, #12
 8004b70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
//Раскоментить для дебага по USART(кроме отладки по Ethernet)

	if(((huart3.Instance->SR & USART_SR_RXNE) != RESET) && ((huart3.Instance->CR1 & USART_CR1_RXNEIE) != RESET))
 8004b72:	4b18      	ldr	r3, [pc, #96]	; (8004bd4 <USART3_IRQHandler+0x68>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f003 0320 	and.w	r3, r3, #32
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d022      	beq.n	8004bc6 <USART3_IRQHandler+0x5a>
 8004b80:	4b14      	ldr	r3, [pc, #80]	; (8004bd4 <USART3_IRQHandler+0x68>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	68db      	ldr	r3, [r3, #12]
 8004b86:	f003 0320 	and.w	r3, r3, #32
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d01b      	beq.n	8004bc6 <USART3_IRQHandler+0x5a>
	{
		uint8_t rbyte = (uint8_t)(huart3.Instance->DR & (uint8_t)0x00FF); // читает байт из регистра
 8004b8e:	4b11      	ldr	r3, [pc, #68]	; (8004bd4 <USART3_IRQHandler+0x68>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	685b      	ldr	r3, [r3, #4]
 8004b94:	71fb      	strb	r3, [r7, #7]
		dbg_rx_buffer_index_t i = (uint16_t)(dbg_rx_buffer_head + 1) % DBG_RX_BUFFER_SIZE;
 8004b96:	4b10      	ldr	r3, [pc, #64]	; (8004bd8 <USART3_IRQHandler+0x6c>)
 8004b98:	781b      	ldrb	r3, [r3, #0]
 8004b9a:	b2db      	uxtb	r3, r3
 8004b9c:	3301      	adds	r3, #1
 8004b9e:	b2db      	uxtb	r3, r3
 8004ba0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004ba4:	71bb      	strb	r3, [r7, #6]

		if(i != dbg_rx_buffer_tail)
 8004ba6:	4b0d      	ldr	r3, [pc, #52]	; (8004bdc <USART3_IRQHandler+0x70>)
 8004ba8:	781b      	ldrb	r3, [r3, #0]
 8004baa:	b2db      	uxtb	r3, r3
 8004bac:	79ba      	ldrb	r2, [r7, #6]
 8004bae:	429a      	cmp	r2, r3
 8004bb0:	d009      	beq.n	8004bc6 <USART3_IRQHandler+0x5a>
		{
			dbg_rx_buffer[dbg_rx_buffer_head] = rbyte;
 8004bb2:	4b09      	ldr	r3, [pc, #36]	; (8004bd8 <USART3_IRQHandler+0x6c>)
 8004bb4:	781b      	ldrb	r3, [r3, #0]
 8004bb6:	b2db      	uxtb	r3, r3
 8004bb8:	4619      	mov	r1, r3
 8004bba:	4a09      	ldr	r2, [pc, #36]	; (8004be0 <USART3_IRQHandler+0x74>)
 8004bbc:	79fb      	ldrb	r3, [r7, #7]
 8004bbe:	5453      	strb	r3, [r2, r1]
			dbg_rx_buffer_head = i;
 8004bc0:	4a05      	ldr	r2, [pc, #20]	; (8004bd8 <USART3_IRQHandler+0x6c>)
 8004bc2:	79bb      	ldrb	r3, [r7, #6]
 8004bc4:	7013      	strb	r3, [r2, #0]
		}
	}

	return;
 8004bc6:	bf00      	nop
  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8004bc8:	370c      	adds	r7, #12
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd0:	4770      	bx	lr
 8004bd2:	bf00      	nop
 8004bd4:	20000b28 	.word	0x20000b28
 8004bd8:	2000039c 	.word	0x2000039c
 8004bdc:	2000039d 	.word	0x2000039d
 8004be0:	200003a0 	.word	0x200003a0

08004be4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8004be8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8004bec:	f003 f852 	bl	8007c94 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8004bf0:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004bf4:	f003 f84e 	bl	8007c94 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8004bf8:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8004bfc:	f003 f84a 	bl	8007c94 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8004c00:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8004c04:	f003 f846 	bl	8007c94 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8004c08:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8004c0c:	f003 f842 	bl	8007c94 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8004c10:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8004c14:	f003 f83e 	bl	8007c94 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004c18:	bf00      	nop
 8004c1a:	bd80      	pop	{r7, pc}

08004c1c <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch3);
 8004c20:	4802      	ldr	r0, [pc, #8]	; (8004c2c <DMA1_Stream7_IRQHandler+0x10>)
 8004c22:	f001 fb5d 	bl	80062e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8004c26:	bf00      	nop
 8004c28:	bd80      	pop	{r7, pc}
 8004c2a:	bf00      	nop
 8004c2c:	20000968 	.word	0x20000968

08004c30 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004c34:	4802      	ldr	r0, [pc, #8]	; (8004c40 <DMA2_Stream0_IRQHandler+0x10>)
 8004c36:	f001 fb53 	bl	80062e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8004c3a:	bf00      	nop
 8004c3c:	bd80      	pop	{r7, pc}
 8004c3e:	bf00      	nop
 8004c40:	200005f0 	.word	0x200005f0

08004c44 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004c44:	b480      	push	{r7}
 8004c46:	af00      	add	r7, sp, #0
	return 1;
 8004c48:	2301      	movs	r3, #1
}
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c52:	4770      	bx	lr

08004c54 <_kill>:

int _kill(int pid, int sig)
{
 8004c54:	b480      	push	{r7}
 8004c56:	b083      	sub	sp, #12
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
 8004c5c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004c5e:	4b05      	ldr	r3, [pc, #20]	; (8004c74 <_kill+0x20>)
 8004c60:	2216      	movs	r2, #22
 8004c62:	601a      	str	r2, [r3, #0]
	return -1;
 8004c64:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004c68:	4618      	mov	r0, r3
 8004c6a:	370c      	adds	r7, #12
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c72:	4770      	bx	lr
 8004c74:	20006e80 	.word	0x20006e80

08004c78 <_exit>:

void _exit (int status)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b082      	sub	sp, #8
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004c80:	f04f 31ff 	mov.w	r1, #4294967295
 8004c84:	6878      	ldr	r0, [r7, #4]
 8004c86:	f7ff ffe5 	bl	8004c54 <_kill>
	while (1) {}		/* Make sure we hang here */
 8004c8a:	e7fe      	b.n	8004c8a <_exit+0x12>

08004c8c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b086      	sub	sp, #24
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	60f8      	str	r0, [r7, #12]
 8004c94:	60b9      	str	r1, [r7, #8]
 8004c96:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004c98:	2300      	movs	r3, #0
 8004c9a:	617b      	str	r3, [r7, #20]
 8004c9c:	e00a      	b.n	8004cb4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004c9e:	f3af 8000 	nop.w
 8004ca2:	4601      	mov	r1, r0
 8004ca4:	68bb      	ldr	r3, [r7, #8]
 8004ca6:	1c5a      	adds	r2, r3, #1
 8004ca8:	60ba      	str	r2, [r7, #8]
 8004caa:	b2ca      	uxtb	r2, r1
 8004cac:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004cae:	697b      	ldr	r3, [r7, #20]
 8004cb0:	3301      	adds	r3, #1
 8004cb2:	617b      	str	r3, [r7, #20]
 8004cb4:	697a      	ldr	r2, [r7, #20]
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	429a      	cmp	r2, r3
 8004cba:	dbf0      	blt.n	8004c9e <_read+0x12>
	}

return len;
 8004cbc:	687b      	ldr	r3, [r7, #4]
}
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	3718      	adds	r7, #24
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	bd80      	pop	{r7, pc}

08004cc6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004cc6:	b580      	push	{r7, lr}
 8004cc8:	b086      	sub	sp, #24
 8004cca:	af00      	add	r7, sp, #0
 8004ccc:	60f8      	str	r0, [r7, #12]
 8004cce:	60b9      	str	r1, [r7, #8]
 8004cd0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	617b      	str	r3, [r7, #20]
 8004cd6:	e009      	b.n	8004cec <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004cd8:	68bb      	ldr	r3, [r7, #8]
 8004cda:	1c5a      	adds	r2, r3, #1
 8004cdc:	60ba      	str	r2, [r7, #8]
 8004cde:	781b      	ldrb	r3, [r3, #0]
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004ce6:	697b      	ldr	r3, [r7, #20]
 8004ce8:	3301      	adds	r3, #1
 8004cea:	617b      	str	r3, [r7, #20]
 8004cec:	697a      	ldr	r2, [r7, #20]
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	429a      	cmp	r2, r3
 8004cf2:	dbf1      	blt.n	8004cd8 <_write+0x12>
	}
	return len;
 8004cf4:	687b      	ldr	r3, [r7, #4]
}
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	3718      	adds	r7, #24
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	bd80      	pop	{r7, pc}

08004cfe <_close>:

int _close(int file)
{
 8004cfe:	b480      	push	{r7}
 8004d00:	b083      	sub	sp, #12
 8004d02:	af00      	add	r7, sp, #0
 8004d04:	6078      	str	r0, [r7, #4]
	return -1;
 8004d06:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	370c      	adds	r7, #12
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d14:	4770      	bx	lr

08004d16 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004d16:	b480      	push	{r7}
 8004d18:	b083      	sub	sp, #12
 8004d1a:	af00      	add	r7, sp, #0
 8004d1c:	6078      	str	r0, [r7, #4]
 8004d1e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004d26:	605a      	str	r2, [r3, #4]
	return 0;
 8004d28:	2300      	movs	r3, #0
}
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	370c      	adds	r7, #12
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d34:	4770      	bx	lr

08004d36 <_isatty>:

int _isatty(int file)
{
 8004d36:	b480      	push	{r7}
 8004d38:	b083      	sub	sp, #12
 8004d3a:	af00      	add	r7, sp, #0
 8004d3c:	6078      	str	r0, [r7, #4]
	return 1;
 8004d3e:	2301      	movs	r3, #1
}
 8004d40:	4618      	mov	r0, r3
 8004d42:	370c      	adds	r7, #12
 8004d44:	46bd      	mov	sp, r7
 8004d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4a:	4770      	bx	lr

08004d4c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004d4c:	b480      	push	{r7}
 8004d4e:	b085      	sub	sp, #20
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	60f8      	str	r0, [r7, #12]
 8004d54:	60b9      	str	r1, [r7, #8]
 8004d56:	607a      	str	r2, [r7, #4]
	return 0;
 8004d58:	2300      	movs	r3, #0
}
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	3714      	adds	r7, #20
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d64:	4770      	bx	lr
	...

08004d68 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004d68:	b480      	push	{r7}
 8004d6a:	b087      	sub	sp, #28
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004d70:	4a14      	ldr	r2, [pc, #80]	; (8004dc4 <_sbrk+0x5c>)
 8004d72:	4b15      	ldr	r3, [pc, #84]	; (8004dc8 <_sbrk+0x60>)
 8004d74:	1ad3      	subs	r3, r2, r3
 8004d76:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004d78:	697b      	ldr	r3, [r7, #20]
 8004d7a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004d7c:	4b13      	ldr	r3, [pc, #76]	; (8004dcc <_sbrk+0x64>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d102      	bne.n	8004d8a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004d84:	4b11      	ldr	r3, [pc, #68]	; (8004dcc <_sbrk+0x64>)
 8004d86:	4a12      	ldr	r2, [pc, #72]	; (8004dd0 <_sbrk+0x68>)
 8004d88:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004d8a:	4b10      	ldr	r3, [pc, #64]	; (8004dcc <_sbrk+0x64>)
 8004d8c:	681a      	ldr	r2, [r3, #0]
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	4413      	add	r3, r2
 8004d92:	693a      	ldr	r2, [r7, #16]
 8004d94:	429a      	cmp	r2, r3
 8004d96:	d205      	bcs.n	8004da4 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8004d98:	4b0e      	ldr	r3, [pc, #56]	; (8004dd4 <_sbrk+0x6c>)
 8004d9a:	220c      	movs	r2, #12
 8004d9c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004d9e:	f04f 33ff 	mov.w	r3, #4294967295
 8004da2:	e009      	b.n	8004db8 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8004da4:	4b09      	ldr	r3, [pc, #36]	; (8004dcc <_sbrk+0x64>)
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004daa:	4b08      	ldr	r3, [pc, #32]	; (8004dcc <_sbrk+0x64>)
 8004dac:	681a      	ldr	r2, [r3, #0]
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	4413      	add	r3, r2
 8004db2:	4a06      	ldr	r2, [pc, #24]	; (8004dcc <_sbrk+0x64>)
 8004db4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004db6:	68fb      	ldr	r3, [r7, #12]
}
 8004db8:	4618      	mov	r0, r3
 8004dba:	371c      	adds	r7, #28
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc2:	4770      	bx	lr
 8004dc4:	20020000 	.word	0x20020000
 8004dc8:	00004000 	.word	0x00004000
 8004dcc:	20000354 	.word	0x20000354
 8004dd0:	20006e90 	.word	0x20006e90
 8004dd4:	20006e80 	.word	0x20006e80

08004dd8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004dd8:	b480      	push	{r7}
 8004dda:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004ddc:	4b08      	ldr	r3, [pc, #32]	; (8004e00 <SystemInit+0x28>)
 8004dde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004de2:	4a07      	ldr	r2, [pc, #28]	; (8004e00 <SystemInit+0x28>)
 8004de4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004de8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004dec:	4b04      	ldr	r3, [pc, #16]	; (8004e00 <SystemInit+0x28>)
 8004dee:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004df2:	609a      	str	r2, [r3, #8]
#endif
}
 8004df4:	bf00      	nop
 8004df6:	46bd      	mov	sp, r7
 8004df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfc:	4770      	bx	lr
 8004dfe:	bf00      	nop
 8004e00:	e000ed00 	.word	0xe000ed00

08004e04 <MX_TIM3_Init>:
DMA_HandleTypeDef hdma_tim3_ch3;
DMA_HandleTypeDef hdma_tim3_ch4_up;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b08a      	sub	sp, #40	; 0x28
 8004e08:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004e0a:	f107 0320 	add.w	r3, r7, #32
 8004e0e:	2200      	movs	r2, #0
 8004e10:	601a      	str	r2, [r3, #0]
 8004e12:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004e14:	1d3b      	adds	r3, r7, #4
 8004e16:	2200      	movs	r2, #0
 8004e18:	601a      	str	r2, [r3, #0]
 8004e1a:	605a      	str	r2, [r3, #4]
 8004e1c:	609a      	str	r2, [r3, #8]
 8004e1e:	60da      	str	r2, [r3, #12]
 8004e20:	611a      	str	r2, [r3, #16]
 8004e22:	615a      	str	r2, [r3, #20]
 8004e24:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 8004e26:	4b33      	ldr	r3, [pc, #204]	; (8004ef4 <MX_TIM3_Init+0xf0>)
 8004e28:	4a33      	ldr	r2, [pc, #204]	; (8004ef8 <MX_TIM3_Init+0xf4>)
 8004e2a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 3;
 8004e2c:	4b31      	ldr	r3, [pc, #196]	; (8004ef4 <MX_TIM3_Init+0xf0>)
 8004e2e:	2203      	movs	r2, #3
 8004e30:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004e32:	4b30      	ldr	r3, [pc, #192]	; (8004ef4 <MX_TIM3_Init+0xf0>)
 8004e34:	2200      	movs	r2, #0
 8004e36:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000;
 8004e38:	4b2e      	ldr	r3, [pc, #184]	; (8004ef4 <MX_TIM3_Init+0xf0>)
 8004e3a:	f242 7210 	movw	r2, #10000	; 0x2710
 8004e3e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004e40:	4b2c      	ldr	r3, [pc, #176]	; (8004ef4 <MX_TIM3_Init+0xf0>)
 8004e42:	2200      	movs	r2, #0
 8004e44:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004e46:	4b2b      	ldr	r3, [pc, #172]	; (8004ef4 <MX_TIM3_Init+0xf0>)
 8004e48:	2200      	movs	r2, #0
 8004e4a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8004e4c:	4829      	ldr	r0, [pc, #164]	; (8004ef4 <MX_TIM3_Init+0xf0>)
 8004e4e:	f004 fbe5 	bl	800961c <HAL_TIM_PWM_Init>
 8004e52:	4603      	mov	r3, r0
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d001      	beq.n	8004e5c <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8004e58:	f7fe fe8c 	bl	8003b74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004e60:	2300      	movs	r3, #0
 8004e62:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004e64:	f107 0320 	add.w	r3, r7, #32
 8004e68:	4619      	mov	r1, r3
 8004e6a:	4822      	ldr	r0, [pc, #136]	; (8004ef4 <MX_TIM3_Init+0xf0>)
 8004e6c:	f005 fa76 	bl	800a35c <HAL_TIMEx_MasterConfigSynchronization>
 8004e70:	4603      	mov	r3, r0
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d001      	beq.n	8004e7a <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8004e76:	f7fe fe7d 	bl	8003b74 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004e7a:	2360      	movs	r3, #96	; 0x60
 8004e7c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1000;
 8004e7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004e82:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004e84:	2300      	movs	r3, #0
 8004e86:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8004e88:	2304      	movs	r3, #4
 8004e8a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004e8c:	1d3b      	adds	r3, r7, #4
 8004e8e:	2200      	movs	r2, #0
 8004e90:	4619      	mov	r1, r3
 8004e92:	4818      	ldr	r0, [pc, #96]	; (8004ef4 <MX_TIM3_Init+0xf0>)
 8004e94:	f004 fe68 	bl	8009b68 <HAL_TIM_PWM_ConfigChannel>
 8004e98:	4603      	mov	r3, r0
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d001      	beq.n	8004ea2 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8004e9e:	f7fe fe69 	bl	8003b74 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004ea2:	1d3b      	adds	r3, r7, #4
 8004ea4:	2204      	movs	r2, #4
 8004ea6:	4619      	mov	r1, r3
 8004ea8:	4812      	ldr	r0, [pc, #72]	; (8004ef4 <MX_TIM3_Init+0xf0>)
 8004eaa:	f004 fe5d 	bl	8009b68 <HAL_TIM_PWM_ConfigChannel>
 8004eae:	4603      	mov	r3, r0
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d001      	beq.n	8004eb8 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8004eb4:	f7fe fe5e 	bl	8003b74 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004eb8:	1d3b      	adds	r3, r7, #4
 8004eba:	2208      	movs	r2, #8
 8004ebc:	4619      	mov	r1, r3
 8004ebe:	480d      	ldr	r0, [pc, #52]	; (8004ef4 <MX_TIM3_Init+0xf0>)
 8004ec0:	f004 fe52 	bl	8009b68 <HAL_TIM_PWM_ConfigChannel>
 8004ec4:	4603      	mov	r3, r0
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d001      	beq.n	8004ece <MX_TIM3_Init+0xca>
  {
    Error_Handler();
 8004eca:	f7fe fe53 	bl	8003b74 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004ece:	1d3b      	adds	r3, r7, #4
 8004ed0:	220c      	movs	r2, #12
 8004ed2:	4619      	mov	r1, r3
 8004ed4:	4807      	ldr	r0, [pc, #28]	; (8004ef4 <MX_TIM3_Init+0xf0>)
 8004ed6:	f004 fe47 	bl	8009b68 <HAL_TIM_PWM_ConfigChannel>
 8004eda:	4603      	mov	r3, r0
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d001      	beq.n	8004ee4 <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 8004ee0:	f7fe fe48 	bl	8003b74 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 8004ee4:	4803      	ldr	r0, [pc, #12]	; (8004ef4 <MX_TIM3_Init+0xf0>)
 8004ee6:	f000 f981 	bl	80051ec <HAL_TIM_MspPostInit>

}
 8004eea:	bf00      	nop
 8004eec:	3728      	adds	r7, #40	; 0x28
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	bd80      	pop	{r7, pc}
 8004ef2:	bf00      	nop
 8004ef4:	200009c8 	.word	0x200009c8
 8004ef8:	40000400 	.word	0x40000400

08004efc <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b08a      	sub	sp, #40	; 0x28
 8004f00:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004f02:	f107 0320 	add.w	r3, r7, #32
 8004f06:	2200      	movs	r2, #0
 8004f08:	601a      	str	r2, [r3, #0]
 8004f0a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004f0c:	1d3b      	adds	r3, r7, #4
 8004f0e:	2200      	movs	r2, #0
 8004f10:	601a      	str	r2, [r3, #0]
 8004f12:	605a      	str	r2, [r3, #4]
 8004f14:	609a      	str	r2, [r3, #8]
 8004f16:	60da      	str	r2, [r3, #12]
 8004f18:	611a      	str	r2, [r3, #16]
 8004f1a:	615a      	str	r2, [r3, #20]
 8004f1c:	619a      	str	r2, [r3, #24]

  htim4.Instance = TIM4;
 8004f1e:	4b20      	ldr	r3, [pc, #128]	; (8004fa0 <MX_TIM4_Init+0xa4>)
 8004f20:	4a20      	ldr	r2, [pc, #128]	; (8004fa4 <MX_TIM4_Init+0xa8>)
 8004f22:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8004f24:	4b1e      	ldr	r3, [pc, #120]	; (8004fa0 <MX_TIM4_Init+0xa4>)
 8004f26:	2200      	movs	r2, #0
 8004f28:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004f2a:	4b1d      	ldr	r3, [pc, #116]	; (8004fa0 <MX_TIM4_Init+0xa4>)
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65000;
 8004f30:	4b1b      	ldr	r3, [pc, #108]	; (8004fa0 <MX_TIM4_Init+0xa4>)
 8004f32:	f64f 52e8 	movw	r2, #65000	; 0xfde8
 8004f36:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004f38:	4b19      	ldr	r3, [pc, #100]	; (8004fa0 <MX_TIM4_Init+0xa4>)
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004f3e:	4b18      	ldr	r3, [pc, #96]	; (8004fa0 <MX_TIM4_Init+0xa4>)
 8004f40:	2200      	movs	r2, #0
 8004f42:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 8004f44:	4816      	ldr	r0, [pc, #88]	; (8004fa0 <MX_TIM4_Init+0xa4>)
 8004f46:	f004 fb00 	bl	800954a <HAL_TIM_OC_Init>
 8004f4a:	4603      	mov	r3, r0
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d001      	beq.n	8004f54 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8004f50:	f7fe fe10 	bl	8003b74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004f54:	2300      	movs	r3, #0
 8004f56:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004f58:	2300      	movs	r3, #0
 8004f5a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004f5c:	f107 0320 	add.w	r3, r7, #32
 8004f60:	4619      	mov	r1, r3
 8004f62:	480f      	ldr	r0, [pc, #60]	; (8004fa0 <MX_TIM4_Init+0xa4>)
 8004f64:	f005 f9fa 	bl	800a35c <HAL_TIMEx_MasterConfigSynchronization>
 8004f68:	4603      	mov	r3, r0
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d001      	beq.n	8004f72 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8004f6e:	f7fe fe01 	bl	8003b74 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8004f72:	2330      	movs	r3, #48	; 0x30
 8004f74:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8004f76:	2300      	movs	r3, #0
 8004f78:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004f7e:	2300      	movs	r3, #0
 8004f80:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004f82:	1d3b      	adds	r3, r7, #4
 8004f84:	220c      	movs	r2, #12
 8004f86:	4619      	mov	r1, r3
 8004f88:	4805      	ldr	r0, [pc, #20]	; (8004fa0 <MX_TIM4_Init+0xa4>)
 8004f8a:	f004 fd8d 	bl	8009aa8 <HAL_TIM_OC_ConfigChannel>
 8004f8e:	4603      	mov	r3, r0
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d001      	beq.n	8004f98 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8004f94:	f7fe fdee 	bl	8003b74 <Error_Handler>
  }

}
 8004f98:	bf00      	nop
 8004f9a:	3728      	adds	r7, #40	; 0x28
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	bd80      	pop	{r7, pc}
 8004fa0:	20000928 	.word	0x20000928
 8004fa4:	40000800 	.word	0x40000800

08004fa8 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b084      	sub	sp, #16
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	4a72      	ldr	r2, [pc, #456]	; (8005180 <HAL_TIM_PWM_MspInit+0x1d8>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	f040 80de 	bne.w	8005178 <HAL_TIM_PWM_MspInit+0x1d0>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	60fb      	str	r3, [r7, #12]
 8004fc0:	4b70      	ldr	r3, [pc, #448]	; (8005184 <HAL_TIM_PWM_MspInit+0x1dc>)
 8004fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fc4:	4a6f      	ldr	r2, [pc, #444]	; (8005184 <HAL_TIM_PWM_MspInit+0x1dc>)
 8004fc6:	f043 0302 	orr.w	r3, r3, #2
 8004fca:	6413      	str	r3, [r2, #64]	; 0x40
 8004fcc:	4b6d      	ldr	r3, [pc, #436]	; (8005184 <HAL_TIM_PWM_MspInit+0x1dc>)
 8004fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fd0:	f003 0302 	and.w	r3, r3, #2
 8004fd4:	60fb      	str	r3, [r7, #12]
 8004fd6:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 DMA Init */
    /* TIM3_CH1_TRIG Init */
    hdma_tim3_ch1_trig.Instance = DMA1_Stream4;
 8004fd8:	4b6b      	ldr	r3, [pc, #428]	; (8005188 <HAL_TIM_PWM_MspInit+0x1e0>)
 8004fda:	4a6c      	ldr	r2, [pc, #432]	; (800518c <HAL_TIM_PWM_MspInit+0x1e4>)
 8004fdc:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1_trig.Init.Channel = DMA_CHANNEL_5;
 8004fde:	4b6a      	ldr	r3, [pc, #424]	; (8005188 <HAL_TIM_PWM_MspInit+0x1e0>)
 8004fe0:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8004fe4:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1_trig.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004fe6:	4b68      	ldr	r3, [pc, #416]	; (8005188 <HAL_TIM_PWM_MspInit+0x1e0>)
 8004fe8:	2240      	movs	r2, #64	; 0x40
 8004fea:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 8004fec:	4b66      	ldr	r3, [pc, #408]	; (8005188 <HAL_TIM_PWM_MspInit+0x1e0>)
 8004fee:	2200      	movs	r2, #0
 8004ff0:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1_trig.Init.MemInc = DMA_MINC_ENABLE;
 8004ff2:	4b65      	ldr	r3, [pc, #404]	; (8005188 <HAL_TIM_PWM_MspInit+0x1e0>)
 8004ff4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004ff8:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004ffa:	4b63      	ldr	r3, [pc, #396]	; (8005188 <HAL_TIM_PWM_MspInit+0x1e0>)
 8004ffc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005000:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1_trig.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8005002:	4b61      	ldr	r3, [pc, #388]	; (8005188 <HAL_TIM_PWM_MspInit+0x1e0>)
 8005004:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005008:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1_trig.Init.Mode = DMA_CIRCULAR;
 800500a:	4b5f      	ldr	r3, [pc, #380]	; (8005188 <HAL_TIM_PWM_MspInit+0x1e0>)
 800500c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005010:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1_trig.Init.Priority = DMA_PRIORITY_LOW;
 8005012:	4b5d      	ldr	r3, [pc, #372]	; (8005188 <HAL_TIM_PWM_MspInit+0x1e0>)
 8005014:	2200      	movs	r2, #0
 8005016:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch1_trig.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005018:	4b5b      	ldr	r3, [pc, #364]	; (8005188 <HAL_TIM_PWM_MspInit+0x1e0>)
 800501a:	2200      	movs	r2, #0
 800501c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch1_trig) != HAL_OK)
 800501e:	485a      	ldr	r0, [pc, #360]	; (8005188 <HAL_TIM_PWM_MspInit+0x1e0>)
 8005020:	f001 f836 	bl	8006090 <HAL_DMA_Init>
 8005024:	4603      	mov	r3, r0
 8005026:	2b00      	cmp	r3, #0
 8005028:	d001      	beq.n	800502e <HAL_TIM_PWM_MspInit+0x86>
    {
      Error_Handler();
 800502a:	f7fe fda3 	bl	8003b74 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1_trig);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	4a55      	ldr	r2, [pc, #340]	; (8005188 <HAL_TIM_PWM_MspInit+0x1e0>)
 8005032:	625a      	str	r2, [r3, #36]	; 0x24
 8005034:	4a54      	ldr	r2, [pc, #336]	; (8005188 <HAL_TIM_PWM_MspInit+0x1e0>)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_TRIGGER],hdma_tim3_ch1_trig);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	4a52      	ldr	r2, [pc, #328]	; (8005188 <HAL_TIM_PWM_MspInit+0x1e0>)
 800503e:	639a      	str	r2, [r3, #56]	; 0x38
 8005040:	4a51      	ldr	r2, [pc, #324]	; (8005188 <HAL_TIM_PWM_MspInit+0x1e0>)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM3_CH2 Init */
    hdma_tim3_ch2.Instance = DMA1_Stream5;
 8005046:	4b52      	ldr	r3, [pc, #328]	; (8005190 <HAL_TIM_PWM_MspInit+0x1e8>)
 8005048:	4a52      	ldr	r2, [pc, #328]	; (8005194 <HAL_TIM_PWM_MspInit+0x1ec>)
 800504a:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch2.Init.Channel = DMA_CHANNEL_5;
 800504c:	4b50      	ldr	r3, [pc, #320]	; (8005190 <HAL_TIM_PWM_MspInit+0x1e8>)
 800504e:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8005052:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005054:	4b4e      	ldr	r3, [pc, #312]	; (8005190 <HAL_TIM_PWM_MspInit+0x1e8>)
 8005056:	2240      	movs	r2, #64	; 0x40
 8005058:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 800505a:	4b4d      	ldr	r3, [pc, #308]	; (8005190 <HAL_TIM_PWM_MspInit+0x1e8>)
 800505c:	2200      	movs	r2, #0
 800505e:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8005060:	4b4b      	ldr	r3, [pc, #300]	; (8005190 <HAL_TIM_PWM_MspInit+0x1e8>)
 8005062:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005066:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8005068:	4b49      	ldr	r3, [pc, #292]	; (8005190 <HAL_TIM_PWM_MspInit+0x1e8>)
 800506a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800506e:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8005070:	4b47      	ldr	r3, [pc, #284]	; (8005190 <HAL_TIM_PWM_MspInit+0x1e8>)
 8005072:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005076:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch2.Init.Mode = DMA_CIRCULAR;
 8005078:	4b45      	ldr	r3, [pc, #276]	; (8005190 <HAL_TIM_PWM_MspInit+0x1e8>)
 800507a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800507e:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8005080:	4b43      	ldr	r3, [pc, #268]	; (8005190 <HAL_TIM_PWM_MspInit+0x1e8>)
 8005082:	2200      	movs	r2, #0
 8005084:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005086:	4b42      	ldr	r3, [pc, #264]	; (8005190 <HAL_TIM_PWM_MspInit+0x1e8>)
 8005088:	2200      	movs	r2, #0
 800508a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch2) != HAL_OK)
 800508c:	4840      	ldr	r0, [pc, #256]	; (8005190 <HAL_TIM_PWM_MspInit+0x1e8>)
 800508e:	f000 ffff 	bl	8006090 <HAL_DMA_Init>
 8005092:	4603      	mov	r3, r0
 8005094:	2b00      	cmp	r3, #0
 8005096:	d001      	beq.n	800509c <HAL_TIM_PWM_MspInit+0xf4>
    {
      Error_Handler();
 8005098:	f7fe fd6c 	bl	8003b74 <Error_Handler>
    }

    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC2],hdma_tim3_ch2);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	4a3c      	ldr	r2, [pc, #240]	; (8005190 <HAL_TIM_PWM_MspInit+0x1e8>)
 80050a0:	629a      	str	r2, [r3, #40]	; 0x28
 80050a2:	4a3b      	ldr	r2, [pc, #236]	; (8005190 <HAL_TIM_PWM_MspInit+0x1e8>)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM3_CH3 Init */
    hdma_tim3_ch3.Instance = DMA1_Stream7;
 80050a8:	4b3b      	ldr	r3, [pc, #236]	; (8005198 <HAL_TIM_PWM_MspInit+0x1f0>)
 80050aa:	4a3c      	ldr	r2, [pc, #240]	; (800519c <HAL_TIM_PWM_MspInit+0x1f4>)
 80050ac:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch3.Init.Channel = DMA_CHANNEL_5;
 80050ae:	4b3a      	ldr	r3, [pc, #232]	; (8005198 <HAL_TIM_PWM_MspInit+0x1f0>)
 80050b0:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 80050b4:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80050b6:	4b38      	ldr	r3, [pc, #224]	; (8005198 <HAL_TIM_PWM_MspInit+0x1f0>)
 80050b8:	2240      	movs	r2, #64	; 0x40
 80050ba:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 80050bc:	4b36      	ldr	r3, [pc, #216]	; (8005198 <HAL_TIM_PWM_MspInit+0x1f0>)
 80050be:	2200      	movs	r2, #0
 80050c0:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch3.Init.MemInc = DMA_MINC_ENABLE;
 80050c2:	4b35      	ldr	r3, [pc, #212]	; (8005198 <HAL_TIM_PWM_MspInit+0x1f0>)
 80050c4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80050c8:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80050ca:	4b33      	ldr	r3, [pc, #204]	; (8005198 <HAL_TIM_PWM_MspInit+0x1f0>)
 80050cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80050d0:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80050d2:	4b31      	ldr	r3, [pc, #196]	; (8005198 <HAL_TIM_PWM_MspInit+0x1f0>)
 80050d4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80050d8:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch3.Init.Mode = DMA_CIRCULAR;
 80050da:	4b2f      	ldr	r3, [pc, #188]	; (8005198 <HAL_TIM_PWM_MspInit+0x1f0>)
 80050dc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80050e0:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch3.Init.Priority = DMA_PRIORITY_LOW;
 80050e2:	4b2d      	ldr	r3, [pc, #180]	; (8005198 <HAL_TIM_PWM_MspInit+0x1f0>)
 80050e4:	2200      	movs	r2, #0
 80050e6:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80050e8:	4b2b      	ldr	r3, [pc, #172]	; (8005198 <HAL_TIM_PWM_MspInit+0x1f0>)
 80050ea:	2200      	movs	r2, #0
 80050ec:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch3) != HAL_OK)
 80050ee:	482a      	ldr	r0, [pc, #168]	; (8005198 <HAL_TIM_PWM_MspInit+0x1f0>)
 80050f0:	f000 ffce 	bl	8006090 <HAL_DMA_Init>
 80050f4:	4603      	mov	r3, r0
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d001      	beq.n	80050fe <HAL_TIM_PWM_MspInit+0x156>
    {
      Error_Handler();
 80050fa:	f7fe fd3b 	bl	8003b74 <Error_Handler>
    }

    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC3],hdma_tim3_ch3);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	4a25      	ldr	r2, [pc, #148]	; (8005198 <HAL_TIM_PWM_MspInit+0x1f0>)
 8005102:	62da      	str	r2, [r3, #44]	; 0x2c
 8005104:	4a24      	ldr	r2, [pc, #144]	; (8005198 <HAL_TIM_PWM_MspInit+0x1f0>)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM3_CH4_UP Init */
    hdma_tim3_ch4_up.Instance = DMA1_Stream2;
 800510a:	4b25      	ldr	r3, [pc, #148]	; (80051a0 <HAL_TIM_PWM_MspInit+0x1f8>)
 800510c:	4a25      	ldr	r2, [pc, #148]	; (80051a4 <HAL_TIM_PWM_MspInit+0x1fc>)
 800510e:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch4_up.Init.Channel = DMA_CHANNEL_5;
 8005110:	4b23      	ldr	r3, [pc, #140]	; (80051a0 <HAL_TIM_PWM_MspInit+0x1f8>)
 8005112:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8005116:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch4_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005118:	4b21      	ldr	r3, [pc, #132]	; (80051a0 <HAL_TIM_PWM_MspInit+0x1f8>)
 800511a:	2240      	movs	r2, #64	; 0x40
 800511c:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch4_up.Init.PeriphInc = DMA_PINC_DISABLE;
 800511e:	4b20      	ldr	r3, [pc, #128]	; (80051a0 <HAL_TIM_PWM_MspInit+0x1f8>)
 8005120:	2200      	movs	r2, #0
 8005122:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch4_up.Init.MemInc = DMA_MINC_ENABLE;
 8005124:	4b1e      	ldr	r3, [pc, #120]	; (80051a0 <HAL_TIM_PWM_MspInit+0x1f8>)
 8005126:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800512a:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch4_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800512c:	4b1c      	ldr	r3, [pc, #112]	; (80051a0 <HAL_TIM_PWM_MspInit+0x1f8>)
 800512e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005132:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch4_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8005134:	4b1a      	ldr	r3, [pc, #104]	; (80051a0 <HAL_TIM_PWM_MspInit+0x1f8>)
 8005136:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800513a:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch4_up.Init.Mode = DMA_CIRCULAR;
 800513c:	4b18      	ldr	r3, [pc, #96]	; (80051a0 <HAL_TIM_PWM_MspInit+0x1f8>)
 800513e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005142:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch4_up.Init.Priority = DMA_PRIORITY_LOW;
 8005144:	4b16      	ldr	r3, [pc, #88]	; (80051a0 <HAL_TIM_PWM_MspInit+0x1f8>)
 8005146:	2200      	movs	r2, #0
 8005148:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch4_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800514a:	4b15      	ldr	r3, [pc, #84]	; (80051a0 <HAL_TIM_PWM_MspInit+0x1f8>)
 800514c:	2200      	movs	r2, #0
 800514e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch4_up) != HAL_OK)
 8005150:	4813      	ldr	r0, [pc, #76]	; (80051a0 <HAL_TIM_PWM_MspInit+0x1f8>)
 8005152:	f000 ff9d 	bl	8006090 <HAL_DMA_Init>
 8005156:	4603      	mov	r3, r0
 8005158:	2b00      	cmp	r3, #0
 800515a:	d001      	beq.n	8005160 <HAL_TIM_PWM_MspInit+0x1b8>
    {
      Error_Handler();
 800515c:	f7fe fd0a 	bl	8003b74 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC4],hdma_tim3_ch4_up);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	4a0f      	ldr	r2, [pc, #60]	; (80051a0 <HAL_TIM_PWM_MspInit+0x1f8>)
 8005164:	631a      	str	r2, [r3, #48]	; 0x30
 8005166:	4a0e      	ldr	r2, [pc, #56]	; (80051a0 <HAL_TIM_PWM_MspInit+0x1f8>)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_UPDATE],hdma_tim3_ch4_up);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	4a0c      	ldr	r2, [pc, #48]	; (80051a0 <HAL_TIM_PWM_MspInit+0x1f8>)
 8005170:	621a      	str	r2, [r3, #32]
 8005172:	4a0b      	ldr	r2, [pc, #44]	; (80051a0 <HAL_TIM_PWM_MspInit+0x1f8>)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8005178:	bf00      	nop
 800517a:	3710      	adds	r7, #16
 800517c:	46bd      	mov	sp, r7
 800517e:	bd80      	pop	{r7, pc}
 8005180:	40000400 	.word	0x40000400
 8005184:	40023800 	.word	0x40023800
 8005188:	20000a08 	.word	0x20000a08
 800518c:	40026070 	.word	0x40026070
 8005190:	20000a68 	.word	0x20000a68
 8005194:	40026088 	.word	0x40026088
 8005198:	20000968 	.word	0x20000968
 800519c:	400260b8 	.word	0x400260b8
 80051a0:	20000ac8 	.word	0x20000ac8
 80051a4:	40026040 	.word	0x40026040

080051a8 <HAL_TIM_OC_MspInit>:

void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* tim_ocHandle)
{
 80051a8:	b480      	push	{r7}
 80051aa:	b085      	sub	sp, #20
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]

  if(tim_ocHandle->Instance==TIM4)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	4a0b      	ldr	r2, [pc, #44]	; (80051e4 <HAL_TIM_OC_MspInit+0x3c>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d10d      	bne.n	80051d6 <HAL_TIM_OC_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80051ba:	2300      	movs	r3, #0
 80051bc:	60fb      	str	r3, [r7, #12]
 80051be:	4b0a      	ldr	r3, [pc, #40]	; (80051e8 <HAL_TIM_OC_MspInit+0x40>)
 80051c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051c2:	4a09      	ldr	r2, [pc, #36]	; (80051e8 <HAL_TIM_OC_MspInit+0x40>)
 80051c4:	f043 0304 	orr.w	r3, r3, #4
 80051c8:	6413      	str	r3, [r2, #64]	; 0x40
 80051ca:	4b07      	ldr	r3, [pc, #28]	; (80051e8 <HAL_TIM_OC_MspInit+0x40>)
 80051cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ce:	f003 0304 	and.w	r3, r3, #4
 80051d2:	60fb      	str	r3, [r7, #12]
 80051d4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80051d6:	bf00      	nop
 80051d8:	3714      	adds	r7, #20
 80051da:	46bd      	mov	sp, r7
 80051dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e0:	4770      	bx	lr
 80051e2:	bf00      	nop
 80051e4:	40000800 	.word	0x40000800
 80051e8:	40023800 	.word	0x40023800

080051ec <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b088      	sub	sp, #32
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80051f4:	f107 030c 	add.w	r3, r7, #12
 80051f8:	2200      	movs	r2, #0
 80051fa:	601a      	str	r2, [r3, #0]
 80051fc:	605a      	str	r2, [r3, #4]
 80051fe:	609a      	str	r2, [r3, #8]
 8005200:	60da      	str	r2, [r3, #12]
 8005202:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	4a12      	ldr	r2, [pc, #72]	; (8005254 <HAL_TIM_MspPostInit+0x68>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d11e      	bne.n	800524c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800520e:	2300      	movs	r3, #0
 8005210:	60bb      	str	r3, [r7, #8]
 8005212:	4b11      	ldr	r3, [pc, #68]	; (8005258 <HAL_TIM_MspPostInit+0x6c>)
 8005214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005216:	4a10      	ldr	r2, [pc, #64]	; (8005258 <HAL_TIM_MspPostInit+0x6c>)
 8005218:	f043 0304 	orr.w	r3, r3, #4
 800521c:	6313      	str	r3, [r2, #48]	; 0x30
 800521e:	4b0e      	ldr	r3, [pc, #56]	; (8005258 <HAL_TIM_MspPostInit+0x6c>)
 8005220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005222:	f003 0304 	and.w	r3, r3, #4
 8005226:	60bb      	str	r3, [r7, #8]
 8005228:	68bb      	ldr	r3, [r7, #8]
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    PC8     ------> TIM3_CH3
    PC9     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = PWM0_Pin|PWM1_Pin|PWM2_Pin|PWM3_Pin;
 800522a:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800522e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005230:	2302      	movs	r3, #2
 8005232:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005234:	2300      	movs	r3, #0
 8005236:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005238:	2303      	movs	r3, #3
 800523a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800523c:	2302      	movs	r3, #2
 800523e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005240:	f107 030c 	add.w	r3, r7, #12
 8005244:	4619      	mov	r1, r3
 8005246:	4805      	ldr	r0, [pc, #20]	; (800525c <HAL_TIM_MspPostInit+0x70>)
 8005248:	f002 fb56 	bl	80078f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800524c:	bf00      	nop
 800524e:	3720      	adds	r7, #32
 8005250:	46bd      	mov	sp, r7
 8005252:	bd80      	pop	{r7, pc}
 8005254:	40000400 	.word	0x40000400
 8005258:	40023800 	.word	0x40023800
 800525c:	40020800 	.word	0x40020800

08005260 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8005260:	b580      	push	{r7, lr}
 8005262:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8005264:	4b11      	ldr	r3, [pc, #68]	; (80052ac <MX_USART1_UART_Init+0x4c>)
 8005266:	4a12      	ldr	r2, [pc, #72]	; (80052b0 <MX_USART1_UART_Init+0x50>)
 8005268:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600;
 800526a:	4b10      	ldr	r3, [pc, #64]	; (80052ac <MX_USART1_UART_Init+0x4c>)
 800526c:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8005270:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005272:	4b0e      	ldr	r3, [pc, #56]	; (80052ac <MX_USART1_UART_Init+0x4c>)
 8005274:	2200      	movs	r2, #0
 8005276:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8005278:	4b0c      	ldr	r3, [pc, #48]	; (80052ac <MX_USART1_UART_Init+0x4c>)
 800527a:	2200      	movs	r2, #0
 800527c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800527e:	4b0b      	ldr	r3, [pc, #44]	; (80052ac <MX_USART1_UART_Init+0x4c>)
 8005280:	2200      	movs	r2, #0
 8005282:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005284:	4b09      	ldr	r3, [pc, #36]	; (80052ac <MX_USART1_UART_Init+0x4c>)
 8005286:	220c      	movs	r2, #12
 8005288:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800528a:	4b08      	ldr	r3, [pc, #32]	; (80052ac <MX_USART1_UART_Init+0x4c>)
 800528c:	2200      	movs	r2, #0
 800528e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005290:	4b06      	ldr	r3, [pc, #24]	; (80052ac <MX_USART1_UART_Init+0x4c>)
 8005292:	2200      	movs	r2, #0
 8005294:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8005296:	4805      	ldr	r0, [pc, #20]	; (80052ac <MX_USART1_UART_Init+0x4c>)
 8005298:	f005 f8f0 	bl	800a47c <HAL_UART_Init>
 800529c:	4603      	mov	r3, r0
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d001      	beq.n	80052a6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80052a2:	f7fe fc67 	bl	8003b74 <Error_Handler>
  }

}
 80052a6:	bf00      	nop
 80052a8:	bd80      	pop	{r7, pc}
 80052aa:	bf00      	nop
 80052ac:	20000b68 	.word	0x20000b68
 80052b0:	40011000 	.word	0x40011000

080052b4 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 80052b8:	4b11      	ldr	r3, [pc, #68]	; (8005300 <MX_USART2_UART_Init+0x4c>)
 80052ba:	4a12      	ldr	r2, [pc, #72]	; (8005304 <MX_USART2_UART_Init+0x50>)
 80052bc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80052be:	4b10      	ldr	r3, [pc, #64]	; (8005300 <MX_USART2_UART_Init+0x4c>)
 80052c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80052c4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80052c6:	4b0e      	ldr	r3, [pc, #56]	; (8005300 <MX_USART2_UART_Init+0x4c>)
 80052c8:	2200      	movs	r2, #0
 80052ca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80052cc:	4b0c      	ldr	r3, [pc, #48]	; (8005300 <MX_USART2_UART_Init+0x4c>)
 80052ce:	2200      	movs	r2, #0
 80052d0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80052d2:	4b0b      	ldr	r3, [pc, #44]	; (8005300 <MX_USART2_UART_Init+0x4c>)
 80052d4:	2200      	movs	r2, #0
 80052d6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80052d8:	4b09      	ldr	r3, [pc, #36]	; (8005300 <MX_USART2_UART_Init+0x4c>)
 80052da:	220c      	movs	r2, #12
 80052dc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80052de:	4b08      	ldr	r3, [pc, #32]	; (8005300 <MX_USART2_UART_Init+0x4c>)
 80052e0:	2200      	movs	r2, #0
 80052e2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80052e4:	4b06      	ldr	r3, [pc, #24]	; (8005300 <MX_USART2_UART_Init+0x4c>)
 80052e6:	2200      	movs	r2, #0
 80052e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80052ea:	4805      	ldr	r0, [pc, #20]	; (8005300 <MX_USART2_UART_Init+0x4c>)
 80052ec:	f005 f8c6 	bl	800a47c <HAL_UART_Init>
 80052f0:	4603      	mov	r3, r0
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d001      	beq.n	80052fa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80052f6:	f7fe fc3d 	bl	8003b74 <Error_Handler>
  }

}
 80052fa:	bf00      	nop
 80052fc:	bd80      	pop	{r7, pc}
 80052fe:	bf00      	nop
 8005300:	20000ba8 	.word	0x20000ba8
 8005304:	40004400 	.word	0x40004400

08005308 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8005308:	b580      	push	{r7, lr}
 800530a:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 800530c:	4b11      	ldr	r3, [pc, #68]	; (8005354 <MX_USART3_UART_Init+0x4c>)
 800530e:	4a12      	ldr	r2, [pc, #72]	; (8005358 <MX_USART3_UART_Init+0x50>)
 8005310:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 57600;
 8005312:	4b10      	ldr	r3, [pc, #64]	; (8005354 <MX_USART3_UART_Init+0x4c>)
 8005314:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8005318:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800531a:	4b0e      	ldr	r3, [pc, #56]	; (8005354 <MX_USART3_UART_Init+0x4c>)
 800531c:	2200      	movs	r2, #0
 800531e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8005320:	4b0c      	ldr	r3, [pc, #48]	; (8005354 <MX_USART3_UART_Init+0x4c>)
 8005322:	2200      	movs	r2, #0
 8005324:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8005326:	4b0b      	ldr	r3, [pc, #44]	; (8005354 <MX_USART3_UART_Init+0x4c>)
 8005328:	2200      	movs	r2, #0
 800532a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800532c:	4b09      	ldr	r3, [pc, #36]	; (8005354 <MX_USART3_UART_Init+0x4c>)
 800532e:	220c      	movs	r2, #12
 8005330:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005332:	4b08      	ldr	r3, [pc, #32]	; (8005354 <MX_USART3_UART_Init+0x4c>)
 8005334:	2200      	movs	r2, #0
 8005336:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8005338:	4b06      	ldr	r3, [pc, #24]	; (8005354 <MX_USART3_UART_Init+0x4c>)
 800533a:	2200      	movs	r2, #0
 800533c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800533e:	4805      	ldr	r0, [pc, #20]	; (8005354 <MX_USART3_UART_Init+0x4c>)
 8005340:	f005 f89c 	bl	800a47c <HAL_UART_Init>
 8005344:	4603      	mov	r3, r0
 8005346:	2b00      	cmp	r3, #0
 8005348:	d001      	beq.n	800534e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800534a:	f7fe fc13 	bl	8003b74 <Error_Handler>
  }

}
 800534e:	bf00      	nop
 8005350:	bd80      	pop	{r7, pc}
 8005352:	bf00      	nop
 8005354:	20000b28 	.word	0x20000b28
 8005358:	40004800 	.word	0x40004800

0800535c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b08e      	sub	sp, #56	; 0x38
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005364:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005368:	2200      	movs	r2, #0
 800536a:	601a      	str	r2, [r3, #0]
 800536c:	605a      	str	r2, [r3, #4]
 800536e:	609a      	str	r2, [r3, #8]
 8005370:	60da      	str	r2, [r3, #12]
 8005372:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4a58      	ldr	r2, [pc, #352]	; (80054dc <HAL_UART_MspInit+0x180>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d135      	bne.n	80053ea <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800537e:	2300      	movs	r3, #0
 8005380:	623b      	str	r3, [r7, #32]
 8005382:	4b57      	ldr	r3, [pc, #348]	; (80054e0 <HAL_UART_MspInit+0x184>)
 8005384:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005386:	4a56      	ldr	r2, [pc, #344]	; (80054e0 <HAL_UART_MspInit+0x184>)
 8005388:	f043 0310 	orr.w	r3, r3, #16
 800538c:	6453      	str	r3, [r2, #68]	; 0x44
 800538e:	4b54      	ldr	r3, [pc, #336]	; (80054e0 <HAL_UART_MspInit+0x184>)
 8005390:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005392:	f003 0310 	and.w	r3, r3, #16
 8005396:	623b      	str	r3, [r7, #32]
 8005398:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800539a:	2300      	movs	r3, #0
 800539c:	61fb      	str	r3, [r7, #28]
 800539e:	4b50      	ldr	r3, [pc, #320]	; (80054e0 <HAL_UART_MspInit+0x184>)
 80053a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053a2:	4a4f      	ldr	r2, [pc, #316]	; (80054e0 <HAL_UART_MspInit+0x184>)
 80053a4:	f043 0301 	orr.w	r3, r3, #1
 80053a8:	6313      	str	r3, [r2, #48]	; 0x30
 80053aa:	4b4d      	ldr	r3, [pc, #308]	; (80054e0 <HAL_UART_MspInit+0x184>)
 80053ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053ae:	f003 0301 	and.w	r3, r3, #1
 80053b2:	61fb      	str	r3, [r7, #28]
 80053b4:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = SIM_RxD_Pin|SIM_TxD_Pin;
 80053b6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80053ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80053bc:	2302      	movs	r3, #2
 80053be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053c0:	2300      	movs	r3, #0
 80053c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80053c4:	2303      	movs	r3, #3
 80053c6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80053c8:	2307      	movs	r3, #7
 80053ca:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80053cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80053d0:	4619      	mov	r1, r3
 80053d2:	4844      	ldr	r0, [pc, #272]	; (80054e4 <HAL_UART_MspInit+0x188>)
 80053d4:	f002 fa90 	bl	80078f8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80053d8:	2200      	movs	r2, #0
 80053da:	2100      	movs	r1, #0
 80053dc:	2025      	movs	r0, #37	; 0x25
 80053de:	f000 fe2d 	bl	800603c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80053e2:	2025      	movs	r0, #37	; 0x25
 80053e4:	f000 fe46 	bl	8006074 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80053e8:	e073      	b.n	80054d2 <HAL_UART_MspInit+0x176>
  else if(uartHandle->Instance==USART2)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	4a3e      	ldr	r2, [pc, #248]	; (80054e8 <HAL_UART_MspInit+0x18c>)
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d134      	bne.n	800545e <HAL_UART_MspInit+0x102>
    __HAL_RCC_USART2_CLK_ENABLE();
 80053f4:	2300      	movs	r3, #0
 80053f6:	61bb      	str	r3, [r7, #24]
 80053f8:	4b39      	ldr	r3, [pc, #228]	; (80054e0 <HAL_UART_MspInit+0x184>)
 80053fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053fc:	4a38      	ldr	r2, [pc, #224]	; (80054e0 <HAL_UART_MspInit+0x184>)
 80053fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005402:	6413      	str	r3, [r2, #64]	; 0x40
 8005404:	4b36      	ldr	r3, [pc, #216]	; (80054e0 <HAL_UART_MspInit+0x184>)
 8005406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005408:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800540c:	61bb      	str	r3, [r7, #24]
 800540e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005410:	2300      	movs	r3, #0
 8005412:	617b      	str	r3, [r7, #20]
 8005414:	4b32      	ldr	r3, [pc, #200]	; (80054e0 <HAL_UART_MspInit+0x184>)
 8005416:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005418:	4a31      	ldr	r2, [pc, #196]	; (80054e0 <HAL_UART_MspInit+0x184>)
 800541a:	f043 0308 	orr.w	r3, r3, #8
 800541e:	6313      	str	r3, [r2, #48]	; 0x30
 8005420:	4b2f      	ldr	r3, [pc, #188]	; (80054e0 <HAL_UART_MspInit+0x184>)
 8005422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005424:	f003 0308 	and.w	r3, r3, #8
 8005428:	617b      	str	r3, [r7, #20]
 800542a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = RS485_RxD_Pin|RS485_TxD_Pin;
 800542c:	2360      	movs	r3, #96	; 0x60
 800542e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005430:	2302      	movs	r3, #2
 8005432:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005434:	2300      	movs	r3, #0
 8005436:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005438:	2303      	movs	r3, #3
 800543a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800543c:	2307      	movs	r3, #7
 800543e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005440:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005444:	4619      	mov	r1, r3
 8005446:	4829      	ldr	r0, [pc, #164]	; (80054ec <HAL_UART_MspInit+0x190>)
 8005448:	f002 fa56 	bl	80078f8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800544c:	2200      	movs	r2, #0
 800544e:	2100      	movs	r1, #0
 8005450:	2026      	movs	r0, #38	; 0x26
 8005452:	f000 fdf3 	bl	800603c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8005456:	2026      	movs	r0, #38	; 0x26
 8005458:	f000 fe0c 	bl	8006074 <HAL_NVIC_EnableIRQ>
}
 800545c:	e039      	b.n	80054d2 <HAL_UART_MspInit+0x176>
  else if(uartHandle->Instance==USART3)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	4a23      	ldr	r2, [pc, #140]	; (80054f0 <HAL_UART_MspInit+0x194>)
 8005464:	4293      	cmp	r3, r2
 8005466:	d134      	bne.n	80054d2 <HAL_UART_MspInit+0x176>
    __HAL_RCC_USART3_CLK_ENABLE();
 8005468:	2300      	movs	r3, #0
 800546a:	613b      	str	r3, [r7, #16]
 800546c:	4b1c      	ldr	r3, [pc, #112]	; (80054e0 <HAL_UART_MspInit+0x184>)
 800546e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005470:	4a1b      	ldr	r2, [pc, #108]	; (80054e0 <HAL_UART_MspInit+0x184>)
 8005472:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005476:	6413      	str	r3, [r2, #64]	; 0x40
 8005478:	4b19      	ldr	r3, [pc, #100]	; (80054e0 <HAL_UART_MspInit+0x184>)
 800547a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800547c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005480:	613b      	str	r3, [r7, #16]
 8005482:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005484:	2300      	movs	r3, #0
 8005486:	60fb      	str	r3, [r7, #12]
 8005488:	4b15      	ldr	r3, [pc, #84]	; (80054e0 <HAL_UART_MspInit+0x184>)
 800548a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800548c:	4a14      	ldr	r2, [pc, #80]	; (80054e0 <HAL_UART_MspInit+0x184>)
 800548e:	f043 0304 	orr.w	r3, r3, #4
 8005492:	6313      	str	r3, [r2, #48]	; 0x30
 8005494:	4b12      	ldr	r3, [pc, #72]	; (80054e0 <HAL_UART_MspInit+0x184>)
 8005496:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005498:	f003 0304 	and.w	r3, r3, #4
 800549c:	60fb      	str	r3, [r7, #12]
 800549e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = COM_RxD_Pin|COM_TxD_Pin;
 80054a0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80054a4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054a6:	2302      	movs	r3, #2
 80054a8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054aa:	2300      	movs	r3, #0
 80054ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80054ae:	2303      	movs	r3, #3
 80054b0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80054b2:	2307      	movs	r3, #7
 80054b4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80054b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80054ba:	4619      	mov	r1, r3
 80054bc:	480d      	ldr	r0, [pc, #52]	; (80054f4 <HAL_UART_MspInit+0x198>)
 80054be:	f002 fa1b 	bl	80078f8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80054c2:	2200      	movs	r2, #0
 80054c4:	2100      	movs	r1, #0
 80054c6:	2027      	movs	r0, #39	; 0x27
 80054c8:	f000 fdb8 	bl	800603c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80054cc:	2027      	movs	r0, #39	; 0x27
 80054ce:	f000 fdd1 	bl	8006074 <HAL_NVIC_EnableIRQ>
}
 80054d2:	bf00      	nop
 80054d4:	3738      	adds	r7, #56	; 0x38
 80054d6:	46bd      	mov	sp, r7
 80054d8:	bd80      	pop	{r7, pc}
 80054da:	bf00      	nop
 80054dc:	40011000 	.word	0x40011000
 80054e0:	40023800 	.word	0x40023800
 80054e4:	40020000 	.word	0x40020000
 80054e8:	40004400 	.word	0x40004400
 80054ec:	40020c00 	.word	0x40020c00
 80054f0:	40004800 	.word	0x40004800
 80054f4:	40020800 	.word	0x40020800

080054f8 <dbg_available>:
volatile dbg_rx_buffer_index_t dbg_rx_buffer_head = 0;
volatile dbg_rx_buffer_index_t dbg_rx_buffer_tail = 0;
uint8_t dbg_rx_buffer[DBG_RX_BUFFER_SIZE] = {0,};

int16_t dbg_available(void)
{
 80054f8:	b480      	push	{r7}
 80054fa:	af00      	add	r7, sp, #0
	return ((uint16_t)(DBG_RX_BUFFER_SIZE + dbg_rx_buffer_head - dbg_rx_buffer_tail)) % DBG_RX_BUFFER_SIZE;
 80054fc:	4b0a      	ldr	r3, [pc, #40]	; (8005528 <dbg_available+0x30>)
 80054fe:	781b      	ldrb	r3, [r3, #0]
 8005500:	b2db      	uxtb	r3, r3
 8005502:	b29a      	uxth	r2, r3
 8005504:	4b09      	ldr	r3, [pc, #36]	; (800552c <dbg_available+0x34>)
 8005506:	781b      	ldrb	r3, [r3, #0]
 8005508:	b2db      	uxtb	r3, r3
 800550a:	b29b      	uxth	r3, r3
 800550c:	1ad3      	subs	r3, r2, r3
 800550e:	b29b      	uxth	r3, r3
 8005510:	3340      	adds	r3, #64	; 0x40
 8005512:	b29b      	uxth	r3, r3
 8005514:	b21b      	sxth	r3, r3
 8005516:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800551a:	b21b      	sxth	r3, r3
}
 800551c:	4618      	mov	r0, r3
 800551e:	46bd      	mov	sp, r7
 8005520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005524:	4770      	bx	lr
 8005526:	bf00      	nop
 8005528:	2000039c 	.word	0x2000039c
 800552c:	2000039d 	.word	0x2000039d

08005530 <dbg_read>:

int16_t dbg_read(void)
{
 8005530:	b480      	push	{r7}
 8005532:	b083      	sub	sp, #12
 8005534:	af00      	add	r7, sp, #0
	if(dbg_rx_buffer_head == dbg_rx_buffer_tail)
 8005536:	4b12      	ldr	r3, [pc, #72]	; (8005580 <dbg_read+0x50>)
 8005538:	781b      	ldrb	r3, [r3, #0]
 800553a:	b2da      	uxtb	r2, r3
 800553c:	4b11      	ldr	r3, [pc, #68]	; (8005584 <dbg_read+0x54>)
 800553e:	781b      	ldrb	r3, [r3, #0]
 8005540:	b2db      	uxtb	r3, r3
 8005542:	429a      	cmp	r2, r3
 8005544:	d102      	bne.n	800554c <dbg_read+0x1c>
	{
		return -1;
 8005546:	f04f 33ff 	mov.w	r3, #4294967295
 800554a:	e012      	b.n	8005572 <dbg_read+0x42>
	}
	else
	{
		uint8_t c = dbg_rx_buffer[dbg_rx_buffer_tail];
 800554c:	4b0d      	ldr	r3, [pc, #52]	; (8005584 <dbg_read+0x54>)
 800554e:	781b      	ldrb	r3, [r3, #0]
 8005550:	b2db      	uxtb	r3, r3
 8005552:	461a      	mov	r2, r3
 8005554:	4b0c      	ldr	r3, [pc, #48]	; (8005588 <dbg_read+0x58>)
 8005556:	5c9b      	ldrb	r3, [r3, r2]
 8005558:	71fb      	strb	r3, [r7, #7]
		dbg_rx_buffer_tail = (dbg_rx_buffer_index_t)(dbg_rx_buffer_tail + 1) % DBG_RX_BUFFER_SIZE;
 800555a:	4b0a      	ldr	r3, [pc, #40]	; (8005584 <dbg_read+0x54>)
 800555c:	781b      	ldrb	r3, [r3, #0]
 800555e:	b2db      	uxtb	r3, r3
 8005560:	3301      	adds	r3, #1
 8005562:	b2db      	uxtb	r3, r3
 8005564:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005568:	b2da      	uxtb	r2, r3
 800556a:	4b06      	ldr	r3, [pc, #24]	; (8005584 <dbg_read+0x54>)
 800556c:	701a      	strb	r2, [r3, #0]
		return c;
 800556e:	79fb      	ldrb	r3, [r7, #7]
 8005570:	b21b      	sxth	r3, r3
	}
}
 8005572:	4618      	mov	r0, r3
 8005574:	370c      	adds	r7, #12
 8005576:	46bd      	mov	sp, r7
 8005578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557c:	4770      	bx	lr
 800557e:	bf00      	nop
 8005580:	2000039c 	.word	0x2000039c
 8005584:	2000039d 	.word	0x2000039d
 8005588:	200003a0 	.word	0x200003a0

0800558c <EN_Interrupt>:
		return c;
	}
}
//-----------------------------------------------------------------------------------------------------------------
void EN_Interrupt(void)
{
 800558c:	b480      	push	{r7}
 800558e:	af00      	add	r7, sp, #0
	__HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE);
 8005590:	4b0e      	ldr	r3, [pc, #56]	; (80055cc <EN_Interrupt+0x40>)
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	68da      	ldr	r2, [r3, #12]
 8005596:	4b0d      	ldr	r3, [pc, #52]	; (80055cc <EN_Interrupt+0x40>)
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f042 0220 	orr.w	r2, r2, #32
 800559e:	60da      	str	r2, [r3, #12]
	__HAL_UART_ENABLE_IT(&huart3, UART_IT_RXNE);
 80055a0:	4b0b      	ldr	r3, [pc, #44]	; (80055d0 <EN_Interrupt+0x44>)
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	68da      	ldr	r2, [r3, #12]
 80055a6:	4b0a      	ldr	r3, [pc, #40]	; (80055d0 <EN_Interrupt+0x44>)
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f042 0220 	orr.w	r2, r2, #32
 80055ae:	60da      	str	r2, [r3, #12]
	__HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE);
 80055b0:	4b08      	ldr	r3, [pc, #32]	; (80055d4 <EN_Interrupt+0x48>)
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	68da      	ldr	r2, [r3, #12]
 80055b6:	4b07      	ldr	r3, [pc, #28]	; (80055d4 <EN_Interrupt+0x48>)
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f042 0220 	orr.w	r2, r2, #32
 80055be:	60da      	str	r2, [r3, #12]

	//__HAL_SPI_ENABLE_IT(&hspi2, SPI_IT_RXNE);
}
 80055c0:	bf00      	nop
 80055c2:	46bd      	mov	sp, r7
 80055c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c8:	4770      	bx	lr
 80055ca:	bf00      	nop
 80055cc:	20000b68 	.word	0x20000b68
 80055d0:	20000b28 	.word	0x20000b28
 80055d4:	20000ba8 	.word	0x20000ba8

080055d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80055d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005610 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80055dc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80055de:	e003      	b.n	80055e8 <LoopCopyDataInit>

080055e0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80055e0:	4b0c      	ldr	r3, [pc, #48]	; (8005614 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80055e2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80055e4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80055e6:	3104      	adds	r1, #4

080055e8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80055e8:	480b      	ldr	r0, [pc, #44]	; (8005618 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80055ea:	4b0c      	ldr	r3, [pc, #48]	; (800561c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80055ec:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80055ee:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80055f0:	d3f6      	bcc.n	80055e0 <CopyDataInit>
  ldr  r2, =_sbss
 80055f2:	4a0b      	ldr	r2, [pc, #44]	; (8005620 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80055f4:	e002      	b.n	80055fc <LoopFillZerobss>

080055f6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80055f6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80055f8:	f842 3b04 	str.w	r3, [r2], #4

080055fc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80055fc:	4b09      	ldr	r3, [pc, #36]	; (8005624 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80055fe:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8005600:	d3f9      	bcc.n	80055f6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8005602:	f7ff fbe9 	bl	8004dd8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005606:	f011 fbad 	bl	8016d64 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800560a:	f7fe f945 	bl	8003898 <main>
  bx  lr    
 800560e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8005610:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8005614:	08020040 	.word	0x08020040
  ldr  r0, =_sdata
 8005618:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800561c:	2000024c 	.word	0x2000024c
  ldr  r2, =_sbss
 8005620:	20000250 	.word	0x20000250
  ldr  r3, = _ebss
 8005624:	20006e90 	.word	0x20006e90

08005628 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005628:	e7fe      	b.n	8005628 <ADC_IRQHandler>
	...

0800562c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800562c:	b580      	push	{r7, lr}
 800562e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005630:	4b0e      	ldr	r3, [pc, #56]	; (800566c <HAL_Init+0x40>)
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	4a0d      	ldr	r2, [pc, #52]	; (800566c <HAL_Init+0x40>)
 8005636:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800563a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800563c:	4b0b      	ldr	r3, [pc, #44]	; (800566c <HAL_Init+0x40>)
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	4a0a      	ldr	r2, [pc, #40]	; (800566c <HAL_Init+0x40>)
 8005642:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005646:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005648:	4b08      	ldr	r3, [pc, #32]	; (800566c <HAL_Init+0x40>)
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	4a07      	ldr	r2, [pc, #28]	; (800566c <HAL_Init+0x40>)
 800564e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005652:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005654:	2003      	movs	r0, #3
 8005656:	f000 fce6 	bl	8006026 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800565a:	2000      	movs	r0, #0
 800565c:	f7ff f946 	bl	80048ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005660:	f7ff f91c 	bl	800489c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005664:	2300      	movs	r3, #0
}
 8005666:	4618      	mov	r0, r3
 8005668:	bd80      	pop	{r7, pc}
 800566a:	bf00      	nop
 800566c:	40023c00 	.word	0x40023c00

08005670 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005670:	b480      	push	{r7}
 8005672:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005674:	4b06      	ldr	r3, [pc, #24]	; (8005690 <HAL_IncTick+0x20>)
 8005676:	781b      	ldrb	r3, [r3, #0]
 8005678:	461a      	mov	r2, r3
 800567a:	4b06      	ldr	r3, [pc, #24]	; (8005694 <HAL_IncTick+0x24>)
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	4413      	add	r3, r2
 8005680:	4a04      	ldr	r2, [pc, #16]	; (8005694 <HAL_IncTick+0x24>)
 8005682:	6013      	str	r3, [r2, #0]
}
 8005684:	bf00      	nop
 8005686:	46bd      	mov	sp, r7
 8005688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568c:	4770      	bx	lr
 800568e:	bf00      	nop
 8005690:	20000064 	.word	0x20000064
 8005694:	20000be8 	.word	0x20000be8

08005698 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005698:	b480      	push	{r7}
 800569a:	af00      	add	r7, sp, #0
  return uwTick;
 800569c:	4b03      	ldr	r3, [pc, #12]	; (80056ac <HAL_GetTick+0x14>)
 800569e:	681b      	ldr	r3, [r3, #0]
}
 80056a0:	4618      	mov	r0, r3
 80056a2:	46bd      	mov	sp, r7
 80056a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a8:	4770      	bx	lr
 80056aa:	bf00      	nop
 80056ac:	20000be8 	.word	0x20000be8

080056b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b084      	sub	sp, #16
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80056b8:	f7ff ffee 	bl	8005698 <HAL_GetTick>
 80056bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056c8:	d005      	beq.n	80056d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80056ca:	4b0a      	ldr	r3, [pc, #40]	; (80056f4 <HAL_Delay+0x44>)
 80056cc:	781b      	ldrb	r3, [r3, #0]
 80056ce:	461a      	mov	r2, r3
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	4413      	add	r3, r2
 80056d4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80056d6:	bf00      	nop
 80056d8:	f7ff ffde 	bl	8005698 <HAL_GetTick>
 80056dc:	4602      	mov	r2, r0
 80056de:	68bb      	ldr	r3, [r7, #8]
 80056e0:	1ad3      	subs	r3, r2, r3
 80056e2:	68fa      	ldr	r2, [r7, #12]
 80056e4:	429a      	cmp	r2, r3
 80056e6:	d8f7      	bhi.n	80056d8 <HAL_Delay+0x28>
  {
  }
}
 80056e8:	bf00      	nop
 80056ea:	bf00      	nop
 80056ec:	3710      	adds	r7, #16
 80056ee:	46bd      	mov	sp, r7
 80056f0:	bd80      	pop	{r7, pc}
 80056f2:	bf00      	nop
 80056f4:	20000064 	.word	0x20000064

080056f8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b084      	sub	sp, #16
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005700:	2300      	movs	r3, #0
 8005702:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d101      	bne.n	800570e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800570a:	2301      	movs	r3, #1
 800570c:	e033      	b.n	8005776 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005712:	2b00      	cmp	r3, #0
 8005714:	d109      	bne.n	800572a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005716:	6878      	ldr	r0, [r7, #4]
 8005718:	f7fb fca4 	bl	8001064 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2200      	movs	r2, #0
 8005720:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2200      	movs	r2, #0
 8005726:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800572e:	f003 0310 	and.w	r3, r3, #16
 8005732:	2b00      	cmp	r3, #0
 8005734:	d118      	bne.n	8005768 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800573a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800573e:	f023 0302 	bic.w	r3, r3, #2
 8005742:	f043 0202 	orr.w	r2, r3, #2
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800574a:	6878      	ldr	r0, [r7, #4]
 800574c:	f000 fa40 	bl	8005bd0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2200      	movs	r2, #0
 8005754:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800575a:	f023 0303 	bic.w	r3, r3, #3
 800575e:	f043 0201 	orr.w	r2, r3, #1
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	641a      	str	r2, [r3, #64]	; 0x40
 8005766:	e001      	b.n	800576c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8005768:	2301      	movs	r3, #1
 800576a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2200      	movs	r2, #0
 8005770:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8005774:	7bfb      	ldrb	r3, [r7, #15]
}
 8005776:	4618      	mov	r0, r3
 8005778:	3710      	adds	r7, #16
 800577a:	46bd      	mov	sp, r7
 800577c:	bd80      	pop	{r7, pc}
	...

08005780 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8005780:	b580      	push	{r7, lr}
 8005782:	b086      	sub	sp, #24
 8005784:	af00      	add	r7, sp, #0
 8005786:	60f8      	str	r0, [r7, #12]
 8005788:	60b9      	str	r1, [r7, #8]
 800578a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800578c:	2300      	movs	r3, #0
 800578e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005796:	2b01      	cmp	r3, #1
 8005798:	d101      	bne.n	800579e <HAL_ADC_Start_DMA+0x1e>
 800579a:	2302      	movs	r3, #2
 800579c:	e0cc      	b.n	8005938 <HAL_ADC_Start_DMA+0x1b8>
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	2201      	movs	r2, #1
 80057a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	689b      	ldr	r3, [r3, #8]
 80057ac:	f003 0301 	and.w	r3, r3, #1
 80057b0:	2b01      	cmp	r3, #1
 80057b2:	d018      	beq.n	80057e6 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	689a      	ldr	r2, [r3, #8]
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f042 0201 	orr.w	r2, r2, #1
 80057c2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80057c4:	4b5e      	ldr	r3, [pc, #376]	; (8005940 <HAL_ADC_Start_DMA+0x1c0>)
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	4a5e      	ldr	r2, [pc, #376]	; (8005944 <HAL_ADC_Start_DMA+0x1c4>)
 80057ca:	fba2 2303 	umull	r2, r3, r2, r3
 80057ce:	0c9a      	lsrs	r2, r3, #18
 80057d0:	4613      	mov	r3, r2
 80057d2:	005b      	lsls	r3, r3, #1
 80057d4:	4413      	add	r3, r2
 80057d6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80057d8:	e002      	b.n	80057e0 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80057da:	693b      	ldr	r3, [r7, #16]
 80057dc:	3b01      	subs	r3, #1
 80057de:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80057e0:	693b      	ldr	r3, [r7, #16]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d1f9      	bne.n	80057da <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	689b      	ldr	r3, [r3, #8]
 80057ec:	f003 0301 	and.w	r3, r3, #1
 80057f0:	2b01      	cmp	r3, #1
 80057f2:	f040 80a0 	bne.w	8005936 <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057fa:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80057fe:	f023 0301 	bic.w	r3, r3, #1
 8005802:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	685b      	ldr	r3, [r3, #4]
 8005810:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005814:	2b00      	cmp	r3, #0
 8005816:	d007      	beq.n	8005828 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800581c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005820:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800582c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005830:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005834:	d106      	bne.n	8005844 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800583a:	f023 0206 	bic.w	r2, r3, #6
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	645a      	str	r2, [r3, #68]	; 0x44
 8005842:	e002      	b.n	800584a <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	2200      	movs	r2, #0
 8005848:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	2200      	movs	r2, #0
 800584e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005852:	4b3d      	ldr	r3, [pc, #244]	; (8005948 <HAL_ADC_Start_DMA+0x1c8>)
 8005854:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800585a:	4a3c      	ldr	r2, [pc, #240]	; (800594c <HAL_ADC_Start_DMA+0x1cc>)
 800585c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005862:	4a3b      	ldr	r2, [pc, #236]	; (8005950 <HAL_ADC_Start_DMA+0x1d0>)
 8005864:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800586a:	4a3a      	ldr	r2, [pc, #232]	; (8005954 <HAL_ADC_Start_DMA+0x1d4>)
 800586c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8005876:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	685a      	ldr	r2, [r3, #4]
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8005886:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	689a      	ldr	r2, [r3, #8]
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005896:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	334c      	adds	r3, #76	; 0x4c
 80058a2:	4619      	mov	r1, r3
 80058a4:	68ba      	ldr	r2, [r7, #8]
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	f000 fca0 	bl	80061ec <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80058ac:	697b      	ldr	r3, [r7, #20]
 80058ae:	685b      	ldr	r3, [r3, #4]
 80058b0:	f003 031f 	and.w	r3, r3, #31
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d12a      	bne.n	800590e <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	4a26      	ldr	r2, [pc, #152]	; (8005958 <HAL_ADC_Start_DMA+0x1d8>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d015      	beq.n	80058ee <HAL_ADC_Start_DMA+0x16e>
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	4a25      	ldr	r2, [pc, #148]	; (800595c <HAL_ADC_Start_DMA+0x1dc>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d105      	bne.n	80058d8 <HAL_ADC_Start_DMA+0x158>
 80058cc:	4b1e      	ldr	r3, [pc, #120]	; (8005948 <HAL_ADC_Start_DMA+0x1c8>)
 80058ce:	685b      	ldr	r3, [r3, #4]
 80058d0:	f003 031f 	and.w	r3, r3, #31
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d00a      	beq.n	80058ee <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	4a20      	ldr	r2, [pc, #128]	; (8005960 <HAL_ADC_Start_DMA+0x1e0>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d129      	bne.n	8005936 <HAL_ADC_Start_DMA+0x1b6>
 80058e2:	4b19      	ldr	r3, [pc, #100]	; (8005948 <HAL_ADC_Start_DMA+0x1c8>)
 80058e4:	685b      	ldr	r3, [r3, #4]
 80058e6:	f003 0310 	and.w	r3, r3, #16
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d123      	bne.n	8005936 <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	689b      	ldr	r3, [r3, #8]
 80058f4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d11c      	bne.n	8005936 <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	689a      	ldr	r2, [r3, #8]
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800590a:	609a      	str	r2, [r3, #8]
 800590c:	e013      	b.n	8005936 <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	4a11      	ldr	r2, [pc, #68]	; (8005958 <HAL_ADC_Start_DMA+0x1d8>)
 8005914:	4293      	cmp	r3, r2
 8005916:	d10e      	bne.n	8005936 <HAL_ADC_Start_DMA+0x1b6>
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	689b      	ldr	r3, [r3, #8]
 800591e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005922:	2b00      	cmp	r3, #0
 8005924:	d107      	bne.n	8005936 <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	689a      	ldr	r2, [r3, #8]
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005934:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8005936:	2300      	movs	r3, #0
}
 8005938:	4618      	mov	r0, r3
 800593a:	3718      	adds	r7, #24
 800593c:	46bd      	mov	sp, r7
 800593e:	bd80      	pop	{r7, pc}
 8005940:	2000005c 	.word	0x2000005c
 8005944:	431bde83 	.word	0x431bde83
 8005948:	40012300 	.word	0x40012300
 800594c:	08005dc9 	.word	0x08005dc9
 8005950:	08005e83 	.word	0x08005e83
 8005954:	08005e9f 	.word	0x08005e9f
 8005958:	40012000 	.word	0x40012000
 800595c:	40012100 	.word	0x40012100
 8005960:	40012200 	.word	0x40012200

08005964 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8005964:	b480      	push	{r7}
 8005966:	b083      	sub	sp, #12
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800596c:	bf00      	nop
 800596e:	370c      	adds	r7, #12
 8005970:	46bd      	mov	sp, r7
 8005972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005976:	4770      	bx	lr

08005978 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8005978:	b480      	push	{r7}
 800597a:	b083      	sub	sp, #12
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8005980:	bf00      	nop
 8005982:	370c      	adds	r7, #12
 8005984:	46bd      	mov	sp, r7
 8005986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598a:	4770      	bx	lr

0800598c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800598c:	b480      	push	{r7}
 800598e:	b085      	sub	sp, #20
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
 8005994:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8005996:	2300      	movs	r3, #0
 8005998:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059a0:	2b01      	cmp	r3, #1
 80059a2:	d101      	bne.n	80059a8 <HAL_ADC_ConfigChannel+0x1c>
 80059a4:	2302      	movs	r3, #2
 80059a6:	e105      	b.n	8005bb4 <HAL_ADC_ConfigChannel+0x228>
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2201      	movs	r2, #1
 80059ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	2b09      	cmp	r3, #9
 80059b6:	d925      	bls.n	8005a04 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	68d9      	ldr	r1, [r3, #12]
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	b29b      	uxth	r3, r3
 80059c4:	461a      	mov	r2, r3
 80059c6:	4613      	mov	r3, r2
 80059c8:	005b      	lsls	r3, r3, #1
 80059ca:	4413      	add	r3, r2
 80059cc:	3b1e      	subs	r3, #30
 80059ce:	2207      	movs	r2, #7
 80059d0:	fa02 f303 	lsl.w	r3, r2, r3
 80059d4:	43da      	mvns	r2, r3
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	400a      	ands	r2, r1
 80059dc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	68d9      	ldr	r1, [r3, #12]
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	689a      	ldr	r2, [r3, #8]
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	b29b      	uxth	r3, r3
 80059ee:	4618      	mov	r0, r3
 80059f0:	4603      	mov	r3, r0
 80059f2:	005b      	lsls	r3, r3, #1
 80059f4:	4403      	add	r3, r0
 80059f6:	3b1e      	subs	r3, #30
 80059f8:	409a      	lsls	r2, r3
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	430a      	orrs	r2, r1
 8005a00:	60da      	str	r2, [r3, #12]
 8005a02:	e022      	b.n	8005a4a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	6919      	ldr	r1, [r3, #16]
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	b29b      	uxth	r3, r3
 8005a10:	461a      	mov	r2, r3
 8005a12:	4613      	mov	r3, r2
 8005a14:	005b      	lsls	r3, r3, #1
 8005a16:	4413      	add	r3, r2
 8005a18:	2207      	movs	r2, #7
 8005a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8005a1e:	43da      	mvns	r2, r3
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	400a      	ands	r2, r1
 8005a26:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	6919      	ldr	r1, [r3, #16]
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	689a      	ldr	r2, [r3, #8]
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	b29b      	uxth	r3, r3
 8005a38:	4618      	mov	r0, r3
 8005a3a:	4603      	mov	r3, r0
 8005a3c:	005b      	lsls	r3, r3, #1
 8005a3e:	4403      	add	r3, r0
 8005a40:	409a      	lsls	r2, r3
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	430a      	orrs	r2, r1
 8005a48:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	685b      	ldr	r3, [r3, #4]
 8005a4e:	2b06      	cmp	r3, #6
 8005a50:	d824      	bhi.n	8005a9c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	685a      	ldr	r2, [r3, #4]
 8005a5c:	4613      	mov	r3, r2
 8005a5e:	009b      	lsls	r3, r3, #2
 8005a60:	4413      	add	r3, r2
 8005a62:	3b05      	subs	r3, #5
 8005a64:	221f      	movs	r2, #31
 8005a66:	fa02 f303 	lsl.w	r3, r2, r3
 8005a6a:	43da      	mvns	r2, r3
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	400a      	ands	r2, r1
 8005a72:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	b29b      	uxth	r3, r3
 8005a80:	4618      	mov	r0, r3
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	685a      	ldr	r2, [r3, #4]
 8005a86:	4613      	mov	r3, r2
 8005a88:	009b      	lsls	r3, r3, #2
 8005a8a:	4413      	add	r3, r2
 8005a8c:	3b05      	subs	r3, #5
 8005a8e:	fa00 f203 	lsl.w	r2, r0, r3
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	430a      	orrs	r2, r1
 8005a98:	635a      	str	r2, [r3, #52]	; 0x34
 8005a9a:	e04c      	b.n	8005b36 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	685b      	ldr	r3, [r3, #4]
 8005aa0:	2b0c      	cmp	r3, #12
 8005aa2:	d824      	bhi.n	8005aee <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	685a      	ldr	r2, [r3, #4]
 8005aae:	4613      	mov	r3, r2
 8005ab0:	009b      	lsls	r3, r3, #2
 8005ab2:	4413      	add	r3, r2
 8005ab4:	3b23      	subs	r3, #35	; 0x23
 8005ab6:	221f      	movs	r2, #31
 8005ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8005abc:	43da      	mvns	r2, r3
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	400a      	ands	r2, r1
 8005ac4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	b29b      	uxth	r3, r3
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	685a      	ldr	r2, [r3, #4]
 8005ad8:	4613      	mov	r3, r2
 8005ada:	009b      	lsls	r3, r3, #2
 8005adc:	4413      	add	r3, r2
 8005ade:	3b23      	subs	r3, #35	; 0x23
 8005ae0:	fa00 f203 	lsl.w	r2, r0, r3
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	430a      	orrs	r2, r1
 8005aea:	631a      	str	r2, [r3, #48]	; 0x30
 8005aec:	e023      	b.n	8005b36 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	685a      	ldr	r2, [r3, #4]
 8005af8:	4613      	mov	r3, r2
 8005afa:	009b      	lsls	r3, r3, #2
 8005afc:	4413      	add	r3, r2
 8005afe:	3b41      	subs	r3, #65	; 0x41
 8005b00:	221f      	movs	r2, #31
 8005b02:	fa02 f303 	lsl.w	r3, r2, r3
 8005b06:	43da      	mvns	r2, r3
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	400a      	ands	r2, r1
 8005b0e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	b29b      	uxth	r3, r3
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	685a      	ldr	r2, [r3, #4]
 8005b22:	4613      	mov	r3, r2
 8005b24:	009b      	lsls	r3, r3, #2
 8005b26:	4413      	add	r3, r2
 8005b28:	3b41      	subs	r3, #65	; 0x41
 8005b2a:	fa00 f203 	lsl.w	r2, r0, r3
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	430a      	orrs	r2, r1
 8005b34:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005b36:	4b22      	ldr	r3, [pc, #136]	; (8005bc0 <HAL_ADC_ConfigChannel+0x234>)
 8005b38:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	4a21      	ldr	r2, [pc, #132]	; (8005bc4 <HAL_ADC_ConfigChannel+0x238>)
 8005b40:	4293      	cmp	r3, r2
 8005b42:	d109      	bne.n	8005b58 <HAL_ADC_ConfigChannel+0x1cc>
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	2b12      	cmp	r3, #18
 8005b4a:	d105      	bne.n	8005b58 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	685b      	ldr	r3, [r3, #4]
 8005b50:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	4a19      	ldr	r2, [pc, #100]	; (8005bc4 <HAL_ADC_ConfigChannel+0x238>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d123      	bne.n	8005baa <HAL_ADC_ConfigChannel+0x21e>
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	2b10      	cmp	r3, #16
 8005b68:	d003      	beq.n	8005b72 <HAL_ADC_ConfigChannel+0x1e6>
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	2b11      	cmp	r3, #17
 8005b70:	d11b      	bne.n	8005baa <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	685b      	ldr	r3, [r3, #4]
 8005b76:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	2b10      	cmp	r3, #16
 8005b84:	d111      	bne.n	8005baa <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005b86:	4b10      	ldr	r3, [pc, #64]	; (8005bc8 <HAL_ADC_ConfigChannel+0x23c>)
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	4a10      	ldr	r2, [pc, #64]	; (8005bcc <HAL_ADC_ConfigChannel+0x240>)
 8005b8c:	fba2 2303 	umull	r2, r3, r2, r3
 8005b90:	0c9a      	lsrs	r2, r3, #18
 8005b92:	4613      	mov	r3, r2
 8005b94:	009b      	lsls	r3, r3, #2
 8005b96:	4413      	add	r3, r2
 8005b98:	005b      	lsls	r3, r3, #1
 8005b9a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005b9c:	e002      	b.n	8005ba4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8005b9e:	68bb      	ldr	r3, [r7, #8]
 8005ba0:	3b01      	subs	r3, #1
 8005ba2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005ba4:	68bb      	ldr	r3, [r7, #8]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d1f9      	bne.n	8005b9e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2200      	movs	r2, #0
 8005bae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8005bb2:	2300      	movs	r3, #0
}
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	3714      	adds	r7, #20
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbe:	4770      	bx	lr
 8005bc0:	40012300 	.word	0x40012300
 8005bc4:	40012000 	.word	0x40012000
 8005bc8:	2000005c 	.word	0x2000005c
 8005bcc:	431bde83 	.word	0x431bde83

08005bd0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005bd0:	b480      	push	{r7}
 8005bd2:	b085      	sub	sp, #20
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005bd8:	4b79      	ldr	r3, [pc, #484]	; (8005dc0 <ADC_Init+0x1f0>)
 8005bda:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	685b      	ldr	r3, [r3, #4]
 8005be0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	685a      	ldr	r2, [r3, #4]
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	685b      	ldr	r3, [r3, #4]
 8005bf0:	431a      	orrs	r2, r3
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	685a      	ldr	r2, [r3, #4]
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005c04:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	6859      	ldr	r1, [r3, #4]
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	691b      	ldr	r3, [r3, #16]
 8005c10:	021a      	lsls	r2, r3, #8
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	430a      	orrs	r2, r1
 8005c18:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	685a      	ldr	r2, [r3, #4]
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8005c28:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	6859      	ldr	r1, [r3, #4]
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	689a      	ldr	r2, [r3, #8]
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	430a      	orrs	r2, r1
 8005c3a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	689a      	ldr	r2, [r3, #8]
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005c4a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	6899      	ldr	r1, [r3, #8]
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	68da      	ldr	r2, [r3, #12]
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	430a      	orrs	r2, r1
 8005c5c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c62:	4a58      	ldr	r2, [pc, #352]	; (8005dc4 <ADC_Init+0x1f4>)
 8005c64:	4293      	cmp	r3, r2
 8005c66:	d022      	beq.n	8005cae <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	689a      	ldr	r2, [r3, #8]
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005c76:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	6899      	ldr	r1, [r3, #8]
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	430a      	orrs	r2, r1
 8005c88:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	689a      	ldr	r2, [r3, #8]
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005c98:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	6899      	ldr	r1, [r3, #8]
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	430a      	orrs	r2, r1
 8005caa:	609a      	str	r2, [r3, #8]
 8005cac:	e00f      	b.n	8005cce <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	689a      	ldr	r2, [r3, #8]
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005cbc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	689a      	ldr	r2, [r3, #8]
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005ccc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	689a      	ldr	r2, [r3, #8]
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f022 0202 	bic.w	r2, r2, #2
 8005cdc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	6899      	ldr	r1, [r3, #8]
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	7e1b      	ldrb	r3, [r3, #24]
 8005ce8:	005a      	lsls	r2, r3, #1
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	430a      	orrs	r2, r1
 8005cf0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d01b      	beq.n	8005d34 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	685a      	ldr	r2, [r3, #4]
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005d0a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	685a      	ldr	r2, [r3, #4]
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8005d1a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	6859      	ldr	r1, [r3, #4]
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d26:	3b01      	subs	r3, #1
 8005d28:	035a      	lsls	r2, r3, #13
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	430a      	orrs	r2, r1
 8005d30:	605a      	str	r2, [r3, #4]
 8005d32:	e007      	b.n	8005d44 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	685a      	ldr	r2, [r3, #4]
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005d42:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8005d52:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	69db      	ldr	r3, [r3, #28]
 8005d5e:	3b01      	subs	r3, #1
 8005d60:	051a      	lsls	r2, r3, #20
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	430a      	orrs	r2, r1
 8005d68:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	689a      	ldr	r2, [r3, #8]
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005d78:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	6899      	ldr	r1, [r3, #8]
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005d86:	025a      	lsls	r2, r3, #9
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	430a      	orrs	r2, r1
 8005d8e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	689a      	ldr	r2, [r3, #8]
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d9e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	6899      	ldr	r1, [r3, #8]
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	695b      	ldr	r3, [r3, #20]
 8005daa:	029a      	lsls	r2, r3, #10
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	430a      	orrs	r2, r1
 8005db2:	609a      	str	r2, [r3, #8]
}
 8005db4:	bf00      	nop
 8005db6:	3714      	adds	r7, #20
 8005db8:	46bd      	mov	sp, r7
 8005dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dbe:	4770      	bx	lr
 8005dc0:	40012300 	.word	0x40012300
 8005dc4:	0f000001 	.word	0x0f000001

08005dc8 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b084      	sub	sp, #16
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dd4:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dda:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d13c      	bne.n	8005e5c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005de6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	689b      	ldr	r3, [r3, #8]
 8005df4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d12b      	bne.n	8005e54 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d127      	bne.n	8005e54 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e0a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d006      	beq.n	8005e20 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	689b      	ldr	r3, [r3, #8]
 8005e18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d119      	bne.n	8005e54 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	685a      	ldr	r2, [r3, #4]
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f022 0220 	bic.w	r2, r2, #32
 8005e2e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e34:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e40:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d105      	bne.n	8005e54 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e4c:	f043 0201 	orr.w	r2, r3, #1
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005e54:	68f8      	ldr	r0, [r7, #12]
 8005e56:	f7fd fe33 	bl	8003ac0 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8005e5a:	e00e      	b.n	8005e7a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e60:	f003 0310 	and.w	r3, r3, #16
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d003      	beq.n	8005e70 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8005e68:	68f8      	ldr	r0, [r7, #12]
 8005e6a:	f7ff fd85 	bl	8005978 <HAL_ADC_ErrorCallback>
}
 8005e6e:	e004      	b.n	8005e7a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e76:	6878      	ldr	r0, [r7, #4]
 8005e78:	4798      	blx	r3
}
 8005e7a:	bf00      	nop
 8005e7c:	3710      	adds	r7, #16
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	bd80      	pop	{r7, pc}

08005e82 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8005e82:	b580      	push	{r7, lr}
 8005e84:	b084      	sub	sp, #16
 8005e86:	af00      	add	r7, sp, #0
 8005e88:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e8e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005e90:	68f8      	ldr	r0, [r7, #12]
 8005e92:	f7ff fd67 	bl	8005964 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005e96:	bf00      	nop
 8005e98:	3710      	adds	r7, #16
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	bd80      	pop	{r7, pc}

08005e9e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8005e9e:	b580      	push	{r7, lr}
 8005ea0:	b084      	sub	sp, #16
 8005ea2:	af00      	add	r7, sp, #0
 8005ea4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eaa:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	2240      	movs	r2, #64	; 0x40
 8005eb0:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005eb6:	f043 0204 	orr.w	r2, r3, #4
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005ebe:	68f8      	ldr	r0, [r7, #12]
 8005ec0:	f7ff fd5a 	bl	8005978 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005ec4:	bf00      	nop
 8005ec6:	3710      	adds	r7, #16
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	bd80      	pop	{r7, pc}

08005ecc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005ecc:	b480      	push	{r7}
 8005ece:	b085      	sub	sp, #20
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	f003 0307 	and.w	r3, r3, #7
 8005eda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005edc:	4b0c      	ldr	r3, [pc, #48]	; (8005f10 <__NVIC_SetPriorityGrouping+0x44>)
 8005ede:	68db      	ldr	r3, [r3, #12]
 8005ee0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005ee2:	68ba      	ldr	r2, [r7, #8]
 8005ee4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005ee8:	4013      	ands	r3, r2
 8005eea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005ef0:	68bb      	ldr	r3, [r7, #8]
 8005ef2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005ef4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005ef8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005efc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005efe:	4a04      	ldr	r2, [pc, #16]	; (8005f10 <__NVIC_SetPriorityGrouping+0x44>)
 8005f00:	68bb      	ldr	r3, [r7, #8]
 8005f02:	60d3      	str	r3, [r2, #12]
}
 8005f04:	bf00      	nop
 8005f06:	3714      	adds	r7, #20
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0e:	4770      	bx	lr
 8005f10:	e000ed00 	.word	0xe000ed00

08005f14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005f14:	b480      	push	{r7}
 8005f16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005f18:	4b04      	ldr	r3, [pc, #16]	; (8005f2c <__NVIC_GetPriorityGrouping+0x18>)
 8005f1a:	68db      	ldr	r3, [r3, #12]
 8005f1c:	0a1b      	lsrs	r3, r3, #8
 8005f1e:	f003 0307 	and.w	r3, r3, #7
}
 8005f22:	4618      	mov	r0, r3
 8005f24:	46bd      	mov	sp, r7
 8005f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2a:	4770      	bx	lr
 8005f2c:	e000ed00 	.word	0xe000ed00

08005f30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005f30:	b480      	push	{r7}
 8005f32:	b083      	sub	sp, #12
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	4603      	mov	r3, r0
 8005f38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005f3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	db0b      	blt.n	8005f5a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005f42:	79fb      	ldrb	r3, [r7, #7]
 8005f44:	f003 021f 	and.w	r2, r3, #31
 8005f48:	4907      	ldr	r1, [pc, #28]	; (8005f68 <__NVIC_EnableIRQ+0x38>)
 8005f4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f4e:	095b      	lsrs	r3, r3, #5
 8005f50:	2001      	movs	r0, #1
 8005f52:	fa00 f202 	lsl.w	r2, r0, r2
 8005f56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005f5a:	bf00      	nop
 8005f5c:	370c      	adds	r7, #12
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f64:	4770      	bx	lr
 8005f66:	bf00      	nop
 8005f68:	e000e100 	.word	0xe000e100

08005f6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005f6c:	b480      	push	{r7}
 8005f6e:	b083      	sub	sp, #12
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	4603      	mov	r3, r0
 8005f74:	6039      	str	r1, [r7, #0]
 8005f76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005f78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	db0a      	blt.n	8005f96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	b2da      	uxtb	r2, r3
 8005f84:	490c      	ldr	r1, [pc, #48]	; (8005fb8 <__NVIC_SetPriority+0x4c>)
 8005f86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f8a:	0112      	lsls	r2, r2, #4
 8005f8c:	b2d2      	uxtb	r2, r2
 8005f8e:	440b      	add	r3, r1
 8005f90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005f94:	e00a      	b.n	8005fac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005f96:	683b      	ldr	r3, [r7, #0]
 8005f98:	b2da      	uxtb	r2, r3
 8005f9a:	4908      	ldr	r1, [pc, #32]	; (8005fbc <__NVIC_SetPriority+0x50>)
 8005f9c:	79fb      	ldrb	r3, [r7, #7]
 8005f9e:	f003 030f 	and.w	r3, r3, #15
 8005fa2:	3b04      	subs	r3, #4
 8005fa4:	0112      	lsls	r2, r2, #4
 8005fa6:	b2d2      	uxtb	r2, r2
 8005fa8:	440b      	add	r3, r1
 8005faa:	761a      	strb	r2, [r3, #24]
}
 8005fac:	bf00      	nop
 8005fae:	370c      	adds	r7, #12
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb6:	4770      	bx	lr
 8005fb8:	e000e100 	.word	0xe000e100
 8005fbc:	e000ed00 	.word	0xe000ed00

08005fc0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005fc0:	b480      	push	{r7}
 8005fc2:	b089      	sub	sp, #36	; 0x24
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	60f8      	str	r0, [r7, #12]
 8005fc8:	60b9      	str	r1, [r7, #8]
 8005fca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	f003 0307 	and.w	r3, r3, #7
 8005fd2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005fd4:	69fb      	ldr	r3, [r7, #28]
 8005fd6:	f1c3 0307 	rsb	r3, r3, #7
 8005fda:	2b04      	cmp	r3, #4
 8005fdc:	bf28      	it	cs
 8005fde:	2304      	movcs	r3, #4
 8005fe0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005fe2:	69fb      	ldr	r3, [r7, #28]
 8005fe4:	3304      	adds	r3, #4
 8005fe6:	2b06      	cmp	r3, #6
 8005fe8:	d902      	bls.n	8005ff0 <NVIC_EncodePriority+0x30>
 8005fea:	69fb      	ldr	r3, [r7, #28]
 8005fec:	3b03      	subs	r3, #3
 8005fee:	e000      	b.n	8005ff2 <NVIC_EncodePriority+0x32>
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005ff4:	f04f 32ff 	mov.w	r2, #4294967295
 8005ff8:	69bb      	ldr	r3, [r7, #24]
 8005ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8005ffe:	43da      	mvns	r2, r3
 8006000:	68bb      	ldr	r3, [r7, #8]
 8006002:	401a      	ands	r2, r3
 8006004:	697b      	ldr	r3, [r7, #20]
 8006006:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006008:	f04f 31ff 	mov.w	r1, #4294967295
 800600c:	697b      	ldr	r3, [r7, #20]
 800600e:	fa01 f303 	lsl.w	r3, r1, r3
 8006012:	43d9      	mvns	r1, r3
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006018:	4313      	orrs	r3, r2
         );
}
 800601a:	4618      	mov	r0, r3
 800601c:	3724      	adds	r7, #36	; 0x24
 800601e:	46bd      	mov	sp, r7
 8006020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006024:	4770      	bx	lr

08006026 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006026:	b580      	push	{r7, lr}
 8006028:	b082      	sub	sp, #8
 800602a:	af00      	add	r7, sp, #0
 800602c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800602e:	6878      	ldr	r0, [r7, #4]
 8006030:	f7ff ff4c 	bl	8005ecc <__NVIC_SetPriorityGrouping>
}
 8006034:	bf00      	nop
 8006036:	3708      	adds	r7, #8
 8006038:	46bd      	mov	sp, r7
 800603a:	bd80      	pop	{r7, pc}

0800603c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800603c:	b580      	push	{r7, lr}
 800603e:	b086      	sub	sp, #24
 8006040:	af00      	add	r7, sp, #0
 8006042:	4603      	mov	r3, r0
 8006044:	60b9      	str	r1, [r7, #8]
 8006046:	607a      	str	r2, [r7, #4]
 8006048:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800604a:	2300      	movs	r3, #0
 800604c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800604e:	f7ff ff61 	bl	8005f14 <__NVIC_GetPriorityGrouping>
 8006052:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006054:	687a      	ldr	r2, [r7, #4]
 8006056:	68b9      	ldr	r1, [r7, #8]
 8006058:	6978      	ldr	r0, [r7, #20]
 800605a:	f7ff ffb1 	bl	8005fc0 <NVIC_EncodePriority>
 800605e:	4602      	mov	r2, r0
 8006060:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006064:	4611      	mov	r1, r2
 8006066:	4618      	mov	r0, r3
 8006068:	f7ff ff80 	bl	8005f6c <__NVIC_SetPriority>
}
 800606c:	bf00      	nop
 800606e:	3718      	adds	r7, #24
 8006070:	46bd      	mov	sp, r7
 8006072:	bd80      	pop	{r7, pc}

08006074 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006074:	b580      	push	{r7, lr}
 8006076:	b082      	sub	sp, #8
 8006078:	af00      	add	r7, sp, #0
 800607a:	4603      	mov	r3, r0
 800607c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800607e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006082:	4618      	mov	r0, r3
 8006084:	f7ff ff54 	bl	8005f30 <__NVIC_EnableIRQ>
}
 8006088:	bf00      	nop
 800608a:	3708      	adds	r7, #8
 800608c:	46bd      	mov	sp, r7
 800608e:	bd80      	pop	{r7, pc}

08006090 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006090:	b580      	push	{r7, lr}
 8006092:	b086      	sub	sp, #24
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006098:	2300      	movs	r3, #0
 800609a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800609c:	f7ff fafc 	bl	8005698 <HAL_GetTick>
 80060a0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d101      	bne.n	80060ac <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80060a8:	2301      	movs	r3, #1
 80060aa:	e099      	b.n	80061e0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2200      	movs	r2, #0
 80060b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2202      	movs	r2, #2
 80060b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	681a      	ldr	r2, [r3, #0]
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f022 0201 	bic.w	r2, r2, #1
 80060ca:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80060cc:	e00f      	b.n	80060ee <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80060ce:	f7ff fae3 	bl	8005698 <HAL_GetTick>
 80060d2:	4602      	mov	r2, r0
 80060d4:	693b      	ldr	r3, [r7, #16]
 80060d6:	1ad3      	subs	r3, r2, r3
 80060d8:	2b05      	cmp	r3, #5
 80060da:	d908      	bls.n	80060ee <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2220      	movs	r2, #32
 80060e0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	2203      	movs	r2, #3
 80060e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80060ea:	2303      	movs	r3, #3
 80060ec:	e078      	b.n	80061e0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f003 0301 	and.w	r3, r3, #1
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d1e8      	bne.n	80060ce <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006104:	697a      	ldr	r2, [r7, #20]
 8006106:	4b38      	ldr	r3, [pc, #224]	; (80061e8 <HAL_DMA_Init+0x158>)
 8006108:	4013      	ands	r3, r2
 800610a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	685a      	ldr	r2, [r3, #4]
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	689b      	ldr	r3, [r3, #8]
 8006114:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800611a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	691b      	ldr	r3, [r3, #16]
 8006120:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006126:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	699b      	ldr	r3, [r3, #24]
 800612c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006132:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	6a1b      	ldr	r3, [r3, #32]
 8006138:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800613a:	697a      	ldr	r2, [r7, #20]
 800613c:	4313      	orrs	r3, r2
 800613e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006144:	2b04      	cmp	r3, #4
 8006146:	d107      	bne.n	8006158 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006150:	4313      	orrs	r3, r2
 8006152:	697a      	ldr	r2, [r7, #20]
 8006154:	4313      	orrs	r3, r2
 8006156:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	697a      	ldr	r2, [r7, #20]
 800615e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	695b      	ldr	r3, [r3, #20]
 8006166:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006168:	697b      	ldr	r3, [r7, #20]
 800616a:	f023 0307 	bic.w	r3, r3, #7
 800616e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006174:	697a      	ldr	r2, [r7, #20]
 8006176:	4313      	orrs	r3, r2
 8006178:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800617e:	2b04      	cmp	r3, #4
 8006180:	d117      	bne.n	80061b2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006186:	697a      	ldr	r2, [r7, #20]
 8006188:	4313      	orrs	r3, r2
 800618a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006190:	2b00      	cmp	r3, #0
 8006192:	d00e      	beq.n	80061b2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006194:	6878      	ldr	r0, [r7, #4]
 8006196:	f000 fa91 	bl	80066bc <DMA_CheckFifoParam>
 800619a:	4603      	mov	r3, r0
 800619c:	2b00      	cmp	r3, #0
 800619e:	d008      	beq.n	80061b2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2240      	movs	r2, #64	; 0x40
 80061a4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	2201      	movs	r2, #1
 80061aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80061ae:	2301      	movs	r3, #1
 80061b0:	e016      	b.n	80061e0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	697a      	ldr	r2, [r7, #20]
 80061b8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80061ba:	6878      	ldr	r0, [r7, #4]
 80061bc:	f000 fa48 	bl	8006650 <DMA_CalcBaseAndBitshift>
 80061c0:	4603      	mov	r3, r0
 80061c2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061c8:	223f      	movs	r2, #63	; 0x3f
 80061ca:	409a      	lsls	r2, r3
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2200      	movs	r2, #0
 80061d4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	2201      	movs	r2, #1
 80061da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80061de:	2300      	movs	r3, #0
}
 80061e0:	4618      	mov	r0, r3
 80061e2:	3718      	adds	r7, #24
 80061e4:	46bd      	mov	sp, r7
 80061e6:	bd80      	pop	{r7, pc}
 80061e8:	f010803f 	.word	0xf010803f

080061ec <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b086      	sub	sp, #24
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	60f8      	str	r0, [r7, #12]
 80061f4:	60b9      	str	r1, [r7, #8]
 80061f6:	607a      	str	r2, [r7, #4]
 80061f8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80061fa:	2300      	movs	r3, #0
 80061fc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006202:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800620a:	2b01      	cmp	r3, #1
 800620c:	d101      	bne.n	8006212 <HAL_DMA_Start_IT+0x26>
 800620e:	2302      	movs	r3, #2
 8006210:	e040      	b.n	8006294 <HAL_DMA_Start_IT+0xa8>
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	2201      	movs	r2, #1
 8006216:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006220:	b2db      	uxtb	r3, r3
 8006222:	2b01      	cmp	r3, #1
 8006224:	d12f      	bne.n	8006286 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	2202      	movs	r2, #2
 800622a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	2200      	movs	r2, #0
 8006232:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	687a      	ldr	r2, [r7, #4]
 8006238:	68b9      	ldr	r1, [r7, #8]
 800623a:	68f8      	ldr	r0, [r7, #12]
 800623c:	f000 f9da 	bl	80065f4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006244:	223f      	movs	r2, #63	; 0x3f
 8006246:	409a      	lsls	r2, r3
 8006248:	693b      	ldr	r3, [r7, #16]
 800624a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	681a      	ldr	r2, [r3, #0]
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f042 0216 	orr.w	r2, r2, #22
 800625a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006260:	2b00      	cmp	r3, #0
 8006262:	d007      	beq.n	8006274 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	681a      	ldr	r2, [r3, #0]
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f042 0208 	orr.w	r2, r2, #8
 8006272:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	681a      	ldr	r2, [r3, #0]
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f042 0201 	orr.w	r2, r2, #1
 8006282:	601a      	str	r2, [r3, #0]
 8006284:	e005      	b.n	8006292 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	2200      	movs	r2, #0
 800628a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800628e:	2302      	movs	r3, #2
 8006290:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8006292:	7dfb      	ldrb	r3, [r7, #23]
}
 8006294:	4618      	mov	r0, r3
 8006296:	3718      	adds	r7, #24
 8006298:	46bd      	mov	sp, r7
 800629a:	bd80      	pop	{r7, pc}

0800629c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800629c:	b480      	push	{r7}
 800629e:	b083      	sub	sp, #12
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80062aa:	b2db      	uxtb	r3, r3
 80062ac:	2b02      	cmp	r3, #2
 80062ae:	d004      	beq.n	80062ba <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2280      	movs	r2, #128	; 0x80
 80062b4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80062b6:	2301      	movs	r3, #1
 80062b8:	e00c      	b.n	80062d4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	2205      	movs	r2, #5
 80062be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	681a      	ldr	r2, [r3, #0]
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f022 0201 	bic.w	r2, r2, #1
 80062d0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80062d2:	2300      	movs	r3, #0
}
 80062d4:	4618      	mov	r0, r3
 80062d6:	370c      	adds	r7, #12
 80062d8:	46bd      	mov	sp, r7
 80062da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062de:	4770      	bx	lr

080062e0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b086      	sub	sp, #24
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80062e8:	2300      	movs	r3, #0
 80062ea:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80062ec:	4b92      	ldr	r3, [pc, #584]	; (8006538 <HAL_DMA_IRQHandler+0x258>)
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	4a92      	ldr	r2, [pc, #584]	; (800653c <HAL_DMA_IRQHandler+0x25c>)
 80062f2:	fba2 2303 	umull	r2, r3, r2, r3
 80062f6:	0a9b      	lsrs	r3, r3, #10
 80062f8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062fe:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8006300:	693b      	ldr	r3, [r7, #16]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800630a:	2208      	movs	r2, #8
 800630c:	409a      	lsls	r2, r3
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	4013      	ands	r3, r2
 8006312:	2b00      	cmp	r3, #0
 8006314:	d01a      	beq.n	800634c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f003 0304 	and.w	r3, r3, #4
 8006320:	2b00      	cmp	r3, #0
 8006322:	d013      	beq.n	800634c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	681a      	ldr	r2, [r3, #0]
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f022 0204 	bic.w	r2, r2, #4
 8006332:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006338:	2208      	movs	r2, #8
 800633a:	409a      	lsls	r2, r3
 800633c:	693b      	ldr	r3, [r7, #16]
 800633e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006344:	f043 0201 	orr.w	r2, r3, #1
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006350:	2201      	movs	r2, #1
 8006352:	409a      	lsls	r2, r3
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	4013      	ands	r3, r2
 8006358:	2b00      	cmp	r3, #0
 800635a:	d012      	beq.n	8006382 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	695b      	ldr	r3, [r3, #20]
 8006362:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006366:	2b00      	cmp	r3, #0
 8006368:	d00b      	beq.n	8006382 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800636e:	2201      	movs	r2, #1
 8006370:	409a      	lsls	r2, r3
 8006372:	693b      	ldr	r3, [r7, #16]
 8006374:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800637a:	f043 0202 	orr.w	r2, r3, #2
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006386:	2204      	movs	r2, #4
 8006388:	409a      	lsls	r2, r3
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	4013      	ands	r3, r2
 800638e:	2b00      	cmp	r3, #0
 8006390:	d012      	beq.n	80063b8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f003 0302 	and.w	r3, r3, #2
 800639c:	2b00      	cmp	r3, #0
 800639e:	d00b      	beq.n	80063b8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063a4:	2204      	movs	r2, #4
 80063a6:	409a      	lsls	r2, r3
 80063a8:	693b      	ldr	r3, [r7, #16]
 80063aa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063b0:	f043 0204 	orr.w	r2, r3, #4
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063bc:	2210      	movs	r2, #16
 80063be:	409a      	lsls	r2, r3
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	4013      	ands	r3, r2
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d043      	beq.n	8006450 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f003 0308 	and.w	r3, r3, #8
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d03c      	beq.n	8006450 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063da:	2210      	movs	r2, #16
 80063dc:	409a      	lsls	r2, r3
 80063de:	693b      	ldr	r3, [r7, #16]
 80063e0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d018      	beq.n	8006422 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d108      	bne.n	8006410 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006402:	2b00      	cmp	r3, #0
 8006404:	d024      	beq.n	8006450 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800640a:	6878      	ldr	r0, [r7, #4]
 800640c:	4798      	blx	r3
 800640e:	e01f      	b.n	8006450 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006414:	2b00      	cmp	r3, #0
 8006416:	d01b      	beq.n	8006450 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800641c:	6878      	ldr	r0, [r7, #4]
 800641e:	4798      	blx	r3
 8006420:	e016      	b.n	8006450 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800642c:	2b00      	cmp	r3, #0
 800642e:	d107      	bne.n	8006440 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	681a      	ldr	r2, [r3, #0]
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f022 0208 	bic.w	r2, r2, #8
 800643e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006444:	2b00      	cmp	r3, #0
 8006446:	d003      	beq.n	8006450 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800644c:	6878      	ldr	r0, [r7, #4]
 800644e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006454:	2220      	movs	r2, #32
 8006456:	409a      	lsls	r2, r3
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	4013      	ands	r3, r2
 800645c:	2b00      	cmp	r3, #0
 800645e:	f000 808e 	beq.w	800657e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f003 0310 	and.w	r3, r3, #16
 800646c:	2b00      	cmp	r3, #0
 800646e:	f000 8086 	beq.w	800657e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006476:	2220      	movs	r2, #32
 8006478:	409a      	lsls	r2, r3
 800647a:	693b      	ldr	r3, [r7, #16]
 800647c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006484:	b2db      	uxtb	r3, r3
 8006486:	2b05      	cmp	r3, #5
 8006488:	d136      	bne.n	80064f8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	681a      	ldr	r2, [r3, #0]
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f022 0216 	bic.w	r2, r2, #22
 8006498:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	695a      	ldr	r2, [r3, #20]
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80064a8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d103      	bne.n	80064ba <HAL_DMA_IRQHandler+0x1da>
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d007      	beq.n	80064ca <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	681a      	ldr	r2, [r3, #0]
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f022 0208 	bic.w	r2, r2, #8
 80064c8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064ce:	223f      	movs	r2, #63	; 0x3f
 80064d0:	409a      	lsls	r2, r3
 80064d2:	693b      	ldr	r3, [r7, #16]
 80064d4:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	2200      	movs	r2, #0
 80064da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	2201      	movs	r2, #1
 80064e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d07d      	beq.n	80065ea <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064f2:	6878      	ldr	r0, [r7, #4]
 80064f4:	4798      	blx	r3
        }
        return;
 80064f6:	e078      	b.n	80065ea <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006502:	2b00      	cmp	r3, #0
 8006504:	d01c      	beq.n	8006540 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006510:	2b00      	cmp	r3, #0
 8006512:	d108      	bne.n	8006526 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006518:	2b00      	cmp	r3, #0
 800651a:	d030      	beq.n	800657e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006520:	6878      	ldr	r0, [r7, #4]
 8006522:	4798      	blx	r3
 8006524:	e02b      	b.n	800657e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800652a:	2b00      	cmp	r3, #0
 800652c:	d027      	beq.n	800657e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006532:	6878      	ldr	r0, [r7, #4]
 8006534:	4798      	blx	r3
 8006536:	e022      	b.n	800657e <HAL_DMA_IRQHandler+0x29e>
 8006538:	2000005c 	.word	0x2000005c
 800653c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800654a:	2b00      	cmp	r3, #0
 800654c:	d10f      	bne.n	800656e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	681a      	ldr	r2, [r3, #0]
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f022 0210 	bic.w	r2, r2, #16
 800655c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	2200      	movs	r2, #0
 8006562:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	2201      	movs	r2, #1
 800656a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006572:	2b00      	cmp	r3, #0
 8006574:	d003      	beq.n	800657e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800657a:	6878      	ldr	r0, [r7, #4]
 800657c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006582:	2b00      	cmp	r3, #0
 8006584:	d032      	beq.n	80065ec <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800658a:	f003 0301 	and.w	r3, r3, #1
 800658e:	2b00      	cmp	r3, #0
 8006590:	d022      	beq.n	80065d8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	2205      	movs	r2, #5
 8006596:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	681a      	ldr	r2, [r3, #0]
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f022 0201 	bic.w	r2, r2, #1
 80065a8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80065aa:	68bb      	ldr	r3, [r7, #8]
 80065ac:	3301      	adds	r3, #1
 80065ae:	60bb      	str	r3, [r7, #8]
 80065b0:	697a      	ldr	r2, [r7, #20]
 80065b2:	429a      	cmp	r2, r3
 80065b4:	d307      	bcc.n	80065c6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f003 0301 	and.w	r3, r3, #1
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d1f2      	bne.n	80065aa <HAL_DMA_IRQHandler+0x2ca>
 80065c4:	e000      	b.n	80065c8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80065c6:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2200      	movs	r2, #0
 80065cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2201      	movs	r2, #1
 80065d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d005      	beq.n	80065ec <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80065e4:	6878      	ldr	r0, [r7, #4]
 80065e6:	4798      	blx	r3
 80065e8:	e000      	b.n	80065ec <HAL_DMA_IRQHandler+0x30c>
        return;
 80065ea:	bf00      	nop
    }
  }
}
 80065ec:	3718      	adds	r7, #24
 80065ee:	46bd      	mov	sp, r7
 80065f0:	bd80      	pop	{r7, pc}
 80065f2:	bf00      	nop

080065f4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80065f4:	b480      	push	{r7}
 80065f6:	b085      	sub	sp, #20
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	60f8      	str	r0, [r7, #12]
 80065fc:	60b9      	str	r1, [r7, #8]
 80065fe:	607a      	str	r2, [r7, #4]
 8006600:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	681a      	ldr	r2, [r3, #0]
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006610:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	683a      	ldr	r2, [r7, #0]
 8006618:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	689b      	ldr	r3, [r3, #8]
 800661e:	2b40      	cmp	r3, #64	; 0x40
 8006620:	d108      	bne.n	8006634 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	687a      	ldr	r2, [r7, #4]
 8006628:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	68ba      	ldr	r2, [r7, #8]
 8006630:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8006632:	e007      	b.n	8006644 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	68ba      	ldr	r2, [r7, #8]
 800663a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	687a      	ldr	r2, [r7, #4]
 8006642:	60da      	str	r2, [r3, #12]
}
 8006644:	bf00      	nop
 8006646:	3714      	adds	r7, #20
 8006648:	46bd      	mov	sp, r7
 800664a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664e:	4770      	bx	lr

08006650 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006650:	b480      	push	{r7}
 8006652:	b085      	sub	sp, #20
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	b2db      	uxtb	r3, r3
 800665e:	3b10      	subs	r3, #16
 8006660:	4a14      	ldr	r2, [pc, #80]	; (80066b4 <DMA_CalcBaseAndBitshift+0x64>)
 8006662:	fba2 2303 	umull	r2, r3, r2, r3
 8006666:	091b      	lsrs	r3, r3, #4
 8006668:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800666a:	4a13      	ldr	r2, [pc, #76]	; (80066b8 <DMA_CalcBaseAndBitshift+0x68>)
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	4413      	add	r3, r2
 8006670:	781b      	ldrb	r3, [r3, #0]
 8006672:	461a      	mov	r2, r3
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	2b03      	cmp	r3, #3
 800667c:	d909      	bls.n	8006692 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006686:	f023 0303 	bic.w	r3, r3, #3
 800668a:	1d1a      	adds	r2, r3, #4
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	659a      	str	r2, [r3, #88]	; 0x58
 8006690:	e007      	b.n	80066a2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800669a:	f023 0303 	bic.w	r3, r3, #3
 800669e:	687a      	ldr	r2, [r7, #4]
 80066a0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80066a6:	4618      	mov	r0, r3
 80066a8:	3714      	adds	r7, #20
 80066aa:	46bd      	mov	sp, r7
 80066ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b0:	4770      	bx	lr
 80066b2:	bf00      	nop
 80066b4:	aaaaaaab 	.word	0xaaaaaaab
 80066b8:	0801f9e0 	.word	0x0801f9e0

080066bc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80066bc:	b480      	push	{r7}
 80066be:	b085      	sub	sp, #20
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80066c4:	2300      	movs	r3, #0
 80066c6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066cc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	699b      	ldr	r3, [r3, #24]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d11f      	bne.n	8006716 <DMA_CheckFifoParam+0x5a>
 80066d6:	68bb      	ldr	r3, [r7, #8]
 80066d8:	2b03      	cmp	r3, #3
 80066da:	d856      	bhi.n	800678a <DMA_CheckFifoParam+0xce>
 80066dc:	a201      	add	r2, pc, #4	; (adr r2, 80066e4 <DMA_CheckFifoParam+0x28>)
 80066de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066e2:	bf00      	nop
 80066e4:	080066f5 	.word	0x080066f5
 80066e8:	08006707 	.word	0x08006707
 80066ec:	080066f5 	.word	0x080066f5
 80066f0:	0800678b 	.word	0x0800678b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d046      	beq.n	800678e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8006700:	2301      	movs	r3, #1
 8006702:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006704:	e043      	b.n	800678e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800670a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800670e:	d140      	bne.n	8006792 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8006710:	2301      	movs	r3, #1
 8006712:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006714:	e03d      	b.n	8006792 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	699b      	ldr	r3, [r3, #24]
 800671a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800671e:	d121      	bne.n	8006764 <DMA_CheckFifoParam+0xa8>
 8006720:	68bb      	ldr	r3, [r7, #8]
 8006722:	2b03      	cmp	r3, #3
 8006724:	d837      	bhi.n	8006796 <DMA_CheckFifoParam+0xda>
 8006726:	a201      	add	r2, pc, #4	; (adr r2, 800672c <DMA_CheckFifoParam+0x70>)
 8006728:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800672c:	0800673d 	.word	0x0800673d
 8006730:	08006743 	.word	0x08006743
 8006734:	0800673d 	.word	0x0800673d
 8006738:	08006755 	.word	0x08006755
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800673c:	2301      	movs	r3, #1
 800673e:	73fb      	strb	r3, [r7, #15]
      break;
 8006740:	e030      	b.n	80067a4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006746:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800674a:	2b00      	cmp	r3, #0
 800674c:	d025      	beq.n	800679a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800674e:	2301      	movs	r3, #1
 8006750:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006752:	e022      	b.n	800679a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006758:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800675c:	d11f      	bne.n	800679e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800675e:	2301      	movs	r3, #1
 8006760:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8006762:	e01c      	b.n	800679e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006764:	68bb      	ldr	r3, [r7, #8]
 8006766:	2b02      	cmp	r3, #2
 8006768:	d903      	bls.n	8006772 <DMA_CheckFifoParam+0xb6>
 800676a:	68bb      	ldr	r3, [r7, #8]
 800676c:	2b03      	cmp	r3, #3
 800676e:	d003      	beq.n	8006778 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006770:	e018      	b.n	80067a4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8006772:	2301      	movs	r3, #1
 8006774:	73fb      	strb	r3, [r7, #15]
      break;
 8006776:	e015      	b.n	80067a4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800677c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006780:	2b00      	cmp	r3, #0
 8006782:	d00e      	beq.n	80067a2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006784:	2301      	movs	r3, #1
 8006786:	73fb      	strb	r3, [r7, #15]
      break;
 8006788:	e00b      	b.n	80067a2 <DMA_CheckFifoParam+0xe6>
      break;
 800678a:	bf00      	nop
 800678c:	e00a      	b.n	80067a4 <DMA_CheckFifoParam+0xe8>
      break;
 800678e:	bf00      	nop
 8006790:	e008      	b.n	80067a4 <DMA_CheckFifoParam+0xe8>
      break;
 8006792:	bf00      	nop
 8006794:	e006      	b.n	80067a4 <DMA_CheckFifoParam+0xe8>
      break;
 8006796:	bf00      	nop
 8006798:	e004      	b.n	80067a4 <DMA_CheckFifoParam+0xe8>
      break;
 800679a:	bf00      	nop
 800679c:	e002      	b.n	80067a4 <DMA_CheckFifoParam+0xe8>
      break;   
 800679e:	bf00      	nop
 80067a0:	e000      	b.n	80067a4 <DMA_CheckFifoParam+0xe8>
      break;
 80067a2:	bf00      	nop
    }
  } 
  
  return status; 
 80067a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80067a6:	4618      	mov	r0, r3
 80067a8:	3714      	adds	r7, #20
 80067aa:	46bd      	mov	sp, r7
 80067ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b0:	4770      	bx	lr
 80067b2:	bf00      	nop

080067b4 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b088      	sub	sp, #32
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 80067bc:	2300      	movs	r3, #0
 80067be:	61fb      	str	r3, [r7, #28]
 80067c0:	2300      	movs	r3, #0
 80067c2:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 80067c4:	4baa      	ldr	r3, [pc, #680]	; (8006a70 <HAL_ETH_Init+0x2bc>)
 80067c6:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 80067c8:	2300      	movs	r3, #0
 80067ca:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 80067cc:	2300      	movs	r3, #0
 80067ce:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d101      	bne.n	80067da <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 80067d6:	2301      	movs	r3, #1
 80067d8:	e183      	b.n	8006ae2 <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80067e0:	b2db      	uxtb	r3, r3
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d106      	bne.n	80067f4 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	2200      	movs	r2, #0
 80067ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80067ee:	6878      	ldr	r0, [r7, #4]
 80067f0:	f004 fa74 	bl	800acdc <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80067f4:	2300      	movs	r3, #0
 80067f6:	60bb      	str	r3, [r7, #8]
 80067f8:	4b9e      	ldr	r3, [pc, #632]	; (8006a74 <HAL_ETH_Init+0x2c0>)
 80067fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067fc:	4a9d      	ldr	r2, [pc, #628]	; (8006a74 <HAL_ETH_Init+0x2c0>)
 80067fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006802:	6453      	str	r3, [r2, #68]	; 0x44
 8006804:	4b9b      	ldr	r3, [pc, #620]	; (8006a74 <HAL_ETH_Init+0x2c0>)
 8006806:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006808:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800680c:	60bb      	str	r3, [r7, #8]
 800680e:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8006810:	4b99      	ldr	r3, [pc, #612]	; (8006a78 <HAL_ETH_Init+0x2c4>)
 8006812:	685b      	ldr	r3, [r3, #4]
 8006814:	4a98      	ldr	r2, [pc, #608]	; (8006a78 <HAL_ETH_Init+0x2c4>)
 8006816:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800681a:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800681c:	4b96      	ldr	r3, [pc, #600]	; (8006a78 <HAL_ETH_Init+0x2c4>)
 800681e:	685a      	ldr	r2, [r3, #4]
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	6a1b      	ldr	r3, [r3, #32]
 8006824:	4994      	ldr	r1, [pc, #592]	; (8006a78 <HAL_ETH_Init+0x2c4>)
 8006826:	4313      	orrs	r3, r2
 8006828:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006832:	681a      	ldr	r2, [r3, #0]
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	f042 0201 	orr.w	r2, r2, #1
 800683c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006840:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8006842:	f7fe ff29 	bl	8005698 <HAL_GetTick>
 8006846:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8006848:	e011      	b.n	800686e <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 800684a:	f7fe ff25 	bl	8005698 <HAL_GetTick>
 800684e:	4602      	mov	r2, r0
 8006850:	697b      	ldr	r3, [r7, #20]
 8006852:	1ad3      	subs	r3, r2, r3
 8006854:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8006858:	d909      	bls.n	800686e <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	2203      	movs	r2, #3
 800685e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2200      	movs	r2, #0
 8006866:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 800686a:	2303      	movs	r3, #3
 800686c:	e139      	b.n	8006ae2 <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f003 0301 	and.w	r3, r3, #1
 800687c:	2b00      	cmp	r3, #0
 800687e:	d1e4      	bne.n	800684a <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	691b      	ldr	r3, [r3, #16]
 8006886:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8006888:	69fb      	ldr	r3, [r7, #28]
 800688a:	f023 031c 	bic.w	r3, r3, #28
 800688e:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8006890:	f001 fe50 	bl	8008534 <HAL_RCC_GetHCLKFreq>
 8006894:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8006896:	69bb      	ldr	r3, [r7, #24]
 8006898:	4a78      	ldr	r2, [pc, #480]	; (8006a7c <HAL_ETH_Init+0x2c8>)
 800689a:	4293      	cmp	r3, r2
 800689c:	d908      	bls.n	80068b0 <HAL_ETH_Init+0xfc>
 800689e:	69bb      	ldr	r3, [r7, #24]
 80068a0:	4a77      	ldr	r2, [pc, #476]	; (8006a80 <HAL_ETH_Init+0x2cc>)
 80068a2:	4293      	cmp	r3, r2
 80068a4:	d804      	bhi.n	80068b0 <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80068a6:	69fb      	ldr	r3, [r7, #28]
 80068a8:	f043 0308 	orr.w	r3, r3, #8
 80068ac:	61fb      	str	r3, [r7, #28]
 80068ae:	e027      	b.n	8006900 <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 80068b0:	69bb      	ldr	r3, [r7, #24]
 80068b2:	4a73      	ldr	r2, [pc, #460]	; (8006a80 <HAL_ETH_Init+0x2cc>)
 80068b4:	4293      	cmp	r3, r2
 80068b6:	d908      	bls.n	80068ca <HAL_ETH_Init+0x116>
 80068b8:	69bb      	ldr	r3, [r7, #24]
 80068ba:	4a6d      	ldr	r2, [pc, #436]	; (8006a70 <HAL_ETH_Init+0x2bc>)
 80068bc:	4293      	cmp	r3, r2
 80068be:	d204      	bcs.n	80068ca <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80068c0:	69fb      	ldr	r3, [r7, #28]
 80068c2:	f043 030c 	orr.w	r3, r3, #12
 80068c6:	61fb      	str	r3, [r7, #28]
 80068c8:	e01a      	b.n	8006900 <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 80068ca:	69bb      	ldr	r3, [r7, #24]
 80068cc:	4a68      	ldr	r2, [pc, #416]	; (8006a70 <HAL_ETH_Init+0x2bc>)
 80068ce:	4293      	cmp	r3, r2
 80068d0:	d303      	bcc.n	80068da <HAL_ETH_Init+0x126>
 80068d2:	69bb      	ldr	r3, [r7, #24]
 80068d4:	4a6b      	ldr	r2, [pc, #428]	; (8006a84 <HAL_ETH_Init+0x2d0>)
 80068d6:	4293      	cmp	r3, r2
 80068d8:	d911      	bls.n	80068fe <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 80068da:	69bb      	ldr	r3, [r7, #24]
 80068dc:	4a69      	ldr	r2, [pc, #420]	; (8006a84 <HAL_ETH_Init+0x2d0>)
 80068de:	4293      	cmp	r3, r2
 80068e0:	d908      	bls.n	80068f4 <HAL_ETH_Init+0x140>
 80068e2:	69bb      	ldr	r3, [r7, #24]
 80068e4:	4a68      	ldr	r2, [pc, #416]	; (8006a88 <HAL_ETH_Init+0x2d4>)
 80068e6:	4293      	cmp	r3, r2
 80068e8:	d804      	bhi.n	80068f4 <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80068ea:	69fb      	ldr	r3, [r7, #28]
 80068ec:	f043 0304 	orr.w	r3, r3, #4
 80068f0:	61fb      	str	r3, [r7, #28]
 80068f2:	e005      	b.n	8006900 <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 80068f4:	69fb      	ldr	r3, [r7, #28]
 80068f6:	f043 0310 	orr.w	r3, r3, #16
 80068fa:	61fb      	str	r3, [r7, #28]
 80068fc:	e000      	b.n	8006900 <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 80068fe:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	69fa      	ldr	r2, [r7, #28]
 8006906:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8006908:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800690c:	2100      	movs	r1, #0
 800690e:	6878      	ldr	r0, [r7, #4]
 8006910:	f000 fb14 	bl	8006f3c <HAL_ETH_WritePHYRegister>
 8006914:	4603      	mov	r3, r0
 8006916:	2b00      	cmp	r3, #0
 8006918:	d00b      	beq.n	8006932 <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 800691a:	2301      	movs	r3, #1
 800691c:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 800691e:	6939      	ldr	r1, [r7, #16]
 8006920:	6878      	ldr	r0, [r7, #4]
 8006922:	f000 fcc9 	bl	80072b8 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	2201      	movs	r2, #1
 800692a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 800692e:	2301      	movs	r3, #1
 8006930:	e0d7      	b.n	8006ae2 <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8006932:	20ff      	movs	r0, #255	; 0xff
 8006934:	f7fe febc 	bl	80056b0 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	685b      	ldr	r3, [r3, #4]
 800693c:	2b00      	cmp	r3, #0
 800693e:	f000 80a5 	beq.w	8006a8c <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8006942:	f7fe fea9 	bl	8005698 <HAL_GetTick>
 8006946:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8006948:	f107 030c 	add.w	r3, r7, #12
 800694c:	461a      	mov	r2, r3
 800694e:	2101      	movs	r1, #1
 8006950:	6878      	ldr	r0, [r7, #4]
 8006952:	f000 fa8b 	bl	8006e6c <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8006956:	f7fe fe9f 	bl	8005698 <HAL_GetTick>
 800695a:	4602      	mov	r2, r0
 800695c:	697b      	ldr	r3, [r7, #20]
 800695e:	1ad3      	subs	r3, r2, r3
 8006960:	f241 3288 	movw	r2, #5000	; 0x1388
 8006964:	4293      	cmp	r3, r2
 8006966:	d90f      	bls.n	8006988 <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8006968:	2301      	movs	r3, #1
 800696a:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 800696c:	6939      	ldr	r1, [r7, #16]
 800696e:	6878      	ldr	r0, [r7, #4]
 8006970:	f000 fca2 	bl	80072b8 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2201      	movs	r2, #1
 8006978:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2200      	movs	r2, #0
 8006980:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8006984:	2303      	movs	r3, #3
 8006986:	e0ac      	b.n	8006ae2 <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	f003 0304 	and.w	r3, r3, #4
 800698e:	2b00      	cmp	r3, #0
 8006990:	d0da      	beq.n	8006948 <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8006992:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006996:	2100      	movs	r1, #0
 8006998:	6878      	ldr	r0, [r7, #4]
 800699a:	f000 facf 	bl	8006f3c <HAL_ETH_WritePHYRegister>
 800699e:	4603      	mov	r3, r0
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d00b      	beq.n	80069bc <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80069a4:	2301      	movs	r3, #1
 80069a6:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80069a8:	6939      	ldr	r1, [r7, #16]
 80069aa:	6878      	ldr	r0, [r7, #4]
 80069ac:	f000 fc84 	bl	80072b8 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2201      	movs	r2, #1
 80069b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80069b8:	2301      	movs	r3, #1
 80069ba:	e092      	b.n	8006ae2 <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 80069bc:	f7fe fe6c 	bl	8005698 <HAL_GetTick>
 80069c0:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80069c2:	f107 030c 	add.w	r3, r7, #12
 80069c6:	461a      	mov	r2, r3
 80069c8:	2101      	movs	r1, #1
 80069ca:	6878      	ldr	r0, [r7, #4]
 80069cc:	f000 fa4e 	bl	8006e6c <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 80069d0:	f7fe fe62 	bl	8005698 <HAL_GetTick>
 80069d4:	4602      	mov	r2, r0
 80069d6:	697b      	ldr	r3, [r7, #20]
 80069d8:	1ad3      	subs	r3, r2, r3
 80069da:	f241 3288 	movw	r2, #5000	; 0x1388
 80069de:	4293      	cmp	r3, r2
 80069e0:	d90f      	bls.n	8006a02 <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80069e2:	2301      	movs	r3, #1
 80069e4:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80069e6:	6939      	ldr	r1, [r7, #16]
 80069e8:	6878      	ldr	r0, [r7, #4]
 80069ea:	f000 fc65 	bl	80072b8 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	2201      	movs	r2, #1
 80069f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	2200      	movs	r2, #0
 80069fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80069fe:	2303      	movs	r3, #3
 8006a00:	e06f      	b.n	8006ae2 <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	f003 0320 	and.w	r3, r3, #32
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d0da      	beq.n	80069c2 <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8006a0c:	f107 030c 	add.w	r3, r7, #12
 8006a10:	461a      	mov	r2, r3
 8006a12:	211f      	movs	r1, #31
 8006a14:	6878      	ldr	r0, [r7, #4]
 8006a16:	f000 fa29 	bl	8006e6c <HAL_ETH_ReadPHYRegister>
 8006a1a:	4603      	mov	r3, r0
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d00b      	beq.n	8006a38 <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8006a20:	2301      	movs	r3, #1
 8006a22:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8006a24:	6939      	ldr	r1, [r7, #16]
 8006a26:	6878      	ldr	r0, [r7, #4]
 8006a28:	f000 fc46 	bl	80072b8 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2201      	movs	r2, #1
 8006a30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8006a34:	2301      	movs	r3, #1
 8006a36:	e054      	b.n	8006ae2 <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	f003 0310 	and.w	r3, r3, #16
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d004      	beq.n	8006a4c <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006a48:	60da      	str	r2, [r3, #12]
 8006a4a:	e002      	b.n	8006a52 <HAL_ETH_Init+0x29e>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2200      	movs	r2, #0
 8006a50:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	f003 0304 	and.w	r3, r3, #4
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d003      	beq.n	8006a64 <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2200      	movs	r2, #0
 8006a60:	609a      	str	r2, [r3, #8]
 8006a62:	e035      	b.n	8006ad0 <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006a6a:	609a      	str	r2, [r3, #8]
 8006a6c:	e030      	b.n	8006ad0 <HAL_ETH_Init+0x31c>
 8006a6e:	bf00      	nop
 8006a70:	03938700 	.word	0x03938700
 8006a74:	40023800 	.word	0x40023800
 8006a78:	40013800 	.word	0x40013800
 8006a7c:	01312cff 	.word	0x01312cff
 8006a80:	02160ebf 	.word	0x02160ebf
 8006a84:	05f5e0ff 	.word	0x05f5e0ff
 8006a88:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	68db      	ldr	r3, [r3, #12]
 8006a90:	08db      	lsrs	r3, r3, #3
 8006a92:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	689b      	ldr	r3, [r3, #8]
 8006a98:	085b      	lsrs	r3, r3, #1
 8006a9a:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8006a9c:	4313      	orrs	r3, r2
 8006a9e:	b29b      	uxth	r3, r3
 8006aa0:	461a      	mov	r2, r3
 8006aa2:	2100      	movs	r1, #0
 8006aa4:	6878      	ldr	r0, [r7, #4]
 8006aa6:	f000 fa49 	bl	8006f3c <HAL_ETH_WritePHYRegister>
 8006aaa:	4603      	mov	r3, r0
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d00b      	beq.n	8006ac8 <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8006ab0:	2301      	movs	r3, #1
 8006ab2:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8006ab4:	6939      	ldr	r1, [r7, #16]
 8006ab6:	6878      	ldr	r0, [r7, #4]
 8006ab8:	f000 fbfe 	bl	80072b8 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2201      	movs	r2, #1
 8006ac0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8006ac4:	2301      	movs	r3, #1
 8006ac6:	e00c      	b.n	8006ae2 <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8006ac8:	f640 70ff 	movw	r0, #4095	; 0xfff
 8006acc:	f7fe fdf0 	bl	80056b0 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8006ad0:	6939      	ldr	r1, [r7, #16]
 8006ad2:	6878      	ldr	r0, [r7, #4]
 8006ad4:	f000 fbf0 	bl	80072b8 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2201      	movs	r2, #1
 8006adc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8006ae0:	2300      	movs	r3, #0
}
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	3720      	adds	r7, #32
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	bd80      	pop	{r7, pc}
 8006aea:	bf00      	nop

08006aec <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8006aec:	b480      	push	{r7}
 8006aee:	b087      	sub	sp, #28
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	60f8      	str	r0, [r7, #12]
 8006af4:	60b9      	str	r1, [r7, #8]
 8006af6:	607a      	str	r2, [r7, #4]
 8006af8:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8006afa:	2300      	movs	r3, #0
 8006afc:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006b04:	2b01      	cmp	r3, #1
 8006b06:	d101      	bne.n	8006b0c <HAL_ETH_DMATxDescListInit+0x20>
 8006b08:	2302      	movs	r3, #2
 8006b0a:	e052      	b.n	8006bb2 <HAL_ETH_DMATxDescListInit+0xc6>
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	2201      	movs	r2, #1
 8006b10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	2202      	movs	r2, #2
 8006b18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	68ba      	ldr	r2, [r7, #8]
 8006b20:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0U; i < TxBuffCount; i++)
 8006b22:	2300      	movs	r3, #0
 8006b24:	617b      	str	r3, [r7, #20]
 8006b26:	e030      	b.n	8006b8a <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8006b28:	697b      	ldr	r3, [r7, #20]
 8006b2a:	015b      	lsls	r3, r3, #5
 8006b2c:	68ba      	ldr	r2, [r7, #8]
 8006b2e:	4413      	add	r3, r2
 8006b30:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8006b32:	693b      	ldr	r3, [r7, #16]
 8006b34:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006b38:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8006b3a:	697b      	ldr	r3, [r7, #20]
 8006b3c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8006b40:	fb02 f303 	mul.w	r3, r2, r3
 8006b44:	687a      	ldr	r2, [r7, #4]
 8006b46:	4413      	add	r3, r2
 8006b48:	461a      	mov	r2, r3
 8006b4a:	693b      	ldr	r3, [r7, #16]
 8006b4c:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	69db      	ldr	r3, [r3, #28]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d105      	bne.n	8006b62 <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8006b56:	693b      	ldr	r3, [r7, #16]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8006b5e:	693b      	ldr	r3, [r7, #16]
 8006b60:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1U))
 8006b62:	683b      	ldr	r3, [r7, #0]
 8006b64:	3b01      	subs	r3, #1
 8006b66:	697a      	ldr	r2, [r7, #20]
 8006b68:	429a      	cmp	r2, r3
 8006b6a:	d208      	bcs.n	8006b7e <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 8006b6c:	697b      	ldr	r3, [r7, #20]
 8006b6e:	3301      	adds	r3, #1
 8006b70:	015b      	lsls	r3, r3, #5
 8006b72:	68ba      	ldr	r2, [r7, #8]
 8006b74:	4413      	add	r3, r2
 8006b76:	461a      	mov	r2, r3
 8006b78:	693b      	ldr	r3, [r7, #16]
 8006b7a:	60da      	str	r2, [r3, #12]
 8006b7c:	e002      	b.n	8006b84 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 8006b7e:	68ba      	ldr	r2, [r7, #8]
 8006b80:	693b      	ldr	r3, [r7, #16]
 8006b82:	60da      	str	r2, [r3, #12]
  for(i=0U; i < TxBuffCount; i++)
 8006b84:	697b      	ldr	r3, [r7, #20]
 8006b86:	3301      	adds	r3, #1
 8006b88:	617b      	str	r3, [r7, #20]
 8006b8a:	697a      	ldr	r2, [r7, #20]
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	429a      	cmp	r2, r3
 8006b90:	d3ca      	bcc.n	8006b28 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	68ba      	ldr	r2, [r7, #8]
 8006b98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b9c:	3310      	adds	r3, #16
 8006b9e:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	2201      	movs	r2, #1
 8006ba4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	2200      	movs	r2, #0
 8006bac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8006bb0:	2300      	movs	r3, #0
}
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	371c      	adds	r7, #28
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bbc:	4770      	bx	lr

08006bbe <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 8006bbe:	b480      	push	{r7}
 8006bc0:	b087      	sub	sp, #28
 8006bc2:	af00      	add	r7, sp, #0
 8006bc4:	60f8      	str	r0, [r7, #12]
 8006bc6:	60b9      	str	r1, [r7, #8]
 8006bc8:	607a      	str	r2, [r7, #4]
 8006bca:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8006bcc:	2300      	movs	r3, #0
 8006bce:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006bd6:	2b01      	cmp	r3, #1
 8006bd8:	d101      	bne.n	8006bde <HAL_ETH_DMARxDescListInit+0x20>
 8006bda:	2302      	movs	r3, #2
 8006bdc:	e056      	b.n	8006c8c <HAL_ETH_DMARxDescListInit+0xce>
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	2201      	movs	r2, #1
 8006be2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	2202      	movs	r2, #2
 8006bea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	68ba      	ldr	r2, [r7, #8]
 8006bf2:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0U; i < RxBuffCount; i++)
 8006bf4:	2300      	movs	r3, #0
 8006bf6:	617b      	str	r3, [r7, #20]
 8006bf8:	e034      	b.n	8006c64 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 8006bfa:	697b      	ldr	r3, [r7, #20]
 8006bfc:	015b      	lsls	r3, r3, #5
 8006bfe:	68ba      	ldr	r2, [r7, #8]
 8006c00:	4413      	add	r3, r2
 8006c02:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8006c04:	693b      	ldr	r3, [r7, #16]
 8006c06:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006c0a:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8006c0c:	693b      	ldr	r3, [r7, #16]
 8006c0e:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8006c12:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8006c14:	697b      	ldr	r3, [r7, #20]
 8006c16:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8006c1a:	fb02 f303 	mul.w	r3, r2, r3
 8006c1e:	687a      	ldr	r2, [r7, #4]
 8006c20:	4413      	add	r3, r2
 8006c22:	461a      	mov	r2, r3
 8006c24:	693b      	ldr	r3, [r7, #16]
 8006c26:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	699b      	ldr	r3, [r3, #24]
 8006c2c:	2b01      	cmp	r3, #1
 8006c2e:	d105      	bne.n	8006c3c <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8006c30:	693b      	ldr	r3, [r7, #16]
 8006c32:	685b      	ldr	r3, [r3, #4]
 8006c34:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006c38:	693b      	ldr	r3, [r7, #16]
 8006c3a:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1U))
 8006c3c:	683b      	ldr	r3, [r7, #0]
 8006c3e:	3b01      	subs	r3, #1
 8006c40:	697a      	ldr	r2, [r7, #20]
 8006c42:	429a      	cmp	r2, r3
 8006c44:	d208      	bcs.n	8006c58 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 8006c46:	697b      	ldr	r3, [r7, #20]
 8006c48:	3301      	adds	r3, #1
 8006c4a:	015b      	lsls	r3, r3, #5
 8006c4c:	68ba      	ldr	r2, [r7, #8]
 8006c4e:	4413      	add	r3, r2
 8006c50:	461a      	mov	r2, r3
 8006c52:	693b      	ldr	r3, [r7, #16]
 8006c54:	60da      	str	r2, [r3, #12]
 8006c56:	e002      	b.n	8006c5e <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8006c58:	68ba      	ldr	r2, [r7, #8]
 8006c5a:	693b      	ldr	r3, [r7, #16]
 8006c5c:	60da      	str	r2, [r3, #12]
  for(i=0U; i < RxBuffCount; i++)
 8006c5e:	697b      	ldr	r3, [r7, #20]
 8006c60:	3301      	adds	r3, #1
 8006c62:	617b      	str	r3, [r7, #20]
 8006c64:	697a      	ldr	r2, [r7, #20]
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	429a      	cmp	r2, r3
 8006c6a:	d3c6      	bcc.n	8006bfa <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	68ba      	ldr	r2, [r7, #8]
 8006c72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c76:	330c      	adds	r3, #12
 8006c78:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	2201      	movs	r2, #1
 8006c7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	2200      	movs	r2, #0
 8006c86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8006c8a:	2300      	movs	r3, #0
}
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	371c      	adds	r7, #28
 8006c90:	46bd      	mov	sp, r7
 8006c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c96:	4770      	bx	lr

08006c98 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8006c98:	b480      	push	{r7}
 8006c9a:	b087      	sub	sp, #28
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
 8006ca0:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	617b      	str	r3, [r7, #20]
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	60fb      	str	r3, [r7, #12]
 8006caa:	2300      	movs	r3, #0
 8006cac:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006cb4:	2b01      	cmp	r3, #1
 8006cb6:	d101      	bne.n	8006cbc <HAL_ETH_TransmitFrame+0x24>
 8006cb8:	2302      	movs	r3, #2
 8006cba:	e0cd      	b.n	8006e58 <HAL_ETH_TransmitFrame+0x1c0>
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2201      	movs	r2, #1
 8006cc0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2202      	movs	r2, #2
 8006cc8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0U) 
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d109      	bne.n	8006ce6 <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	2201      	movs	r2, #1
 8006cd6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	2200      	movs	r2, #0
 8006cde:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 8006ce2:	2301      	movs	r3, #1
 8006ce4:	e0b8      	b.n	8006e58 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	da09      	bge.n	8006d04 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2212      	movs	r2, #18
 8006cf4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 8006d00:	2301      	movs	r3, #1
 8006d02:	e0a9      	b.n	8006e58 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8006d04:	683b      	ldr	r3, [r7, #0]
 8006d06:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8006d0a:	4293      	cmp	r3, r2
 8006d0c:	d915      	bls.n	8006d3a <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8006d0e:	683b      	ldr	r3, [r7, #0]
 8006d10:	4a54      	ldr	r2, [pc, #336]	; (8006e64 <HAL_ETH_TransmitFrame+0x1cc>)
 8006d12:	fba2 2303 	umull	r2, r3, r2, r3
 8006d16:	0a9b      	lsrs	r3, r3, #10
 8006d18:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8006d1a:	683a      	ldr	r2, [r7, #0]
 8006d1c:	4b51      	ldr	r3, [pc, #324]	; (8006e64 <HAL_ETH_TransmitFrame+0x1cc>)
 8006d1e:	fba3 1302 	umull	r1, r3, r3, r2
 8006d22:	0a9b      	lsrs	r3, r3, #10
 8006d24:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8006d28:	fb01 f303 	mul.w	r3, r1, r3
 8006d2c:	1ad3      	subs	r3, r2, r3
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d005      	beq.n	8006d3e <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 8006d32:	697b      	ldr	r3, [r7, #20]
 8006d34:	3301      	adds	r3, #1
 8006d36:	617b      	str	r3, [r7, #20]
 8006d38:	e001      	b.n	8006d3e <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1U;
 8006d3a:	2301      	movs	r3, #1
 8006d3c:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 8006d3e:	697b      	ldr	r3, [r7, #20]
 8006d40:	2b01      	cmp	r3, #1
 8006d42:	d11c      	bne.n	8006d7e <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d48:	681a      	ldr	r2, [r3, #0]
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d4e:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8006d52:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d58:	683a      	ldr	r2, [r7, #0]
 8006d5a:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8006d5e:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d64:	681a      	ldr	r2, [r3, #0]
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d6a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8006d6e:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d74:	68db      	ldr	r3, [r3, #12]
 8006d76:	461a      	mov	r2, r3
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	62da      	str	r2, [r3, #44]	; 0x2c
 8006d7c:	e04b      	b.n	8006e16 <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0U; i< bufcount; i++)
 8006d7e:	2300      	movs	r3, #0
 8006d80:	613b      	str	r3, [r7, #16]
 8006d82:	e044      	b.n	8006e0e <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d88:	681a      	ldr	r2, [r3, #0]
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d8e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006d92:	601a      	str	r2, [r3, #0]
      
      if (i == 0U) 
 8006d94:	693b      	ldr	r3, [r7, #16]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d107      	bne.n	8006daa <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d9e:	681a      	ldr	r2, [r3, #0]
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006da4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8006da8:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dae:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8006db2:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 8006db4:	697b      	ldr	r3, [r7, #20]
 8006db6:	3b01      	subs	r3, #1
 8006db8:	693a      	ldr	r2, [r7, #16]
 8006dba:	429a      	cmp	r2, r3
 8006dbc:	d116      	bne.n	8006dec <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dc2:	681a      	ldr	r2, [r3, #0]
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dc8:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8006dcc:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 8006dce:	697b      	ldr	r3, [r7, #20]
 8006dd0:	4a25      	ldr	r2, [pc, #148]	; (8006e68 <HAL_ETH_TransmitFrame+0x1d0>)
 8006dd2:	fb02 f203 	mul.w	r2, r2, r3
 8006dd6:	683b      	ldr	r3, [r7, #0]
 8006dd8:	4413      	add	r3, r2
 8006dda:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8006dde:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006de4:	68fa      	ldr	r2, [r7, #12]
 8006de6:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8006dea:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006df0:	681a      	ldr	r2, [r3, #0]
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006df6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8006dfa:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e00:	68db      	ldr	r3, [r3, #12]
 8006e02:	461a      	mov	r2, r3
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 8006e08:	693b      	ldr	r3, [r7, #16]
 8006e0a:	3301      	adds	r3, #1
 8006e0c:	613b      	str	r3, [r7, #16]
 8006e0e:	693a      	ldr	r2, [r7, #16]
 8006e10:	697b      	ldr	r3, [r7, #20]
 8006e12:	429a      	cmp	r2, r3
 8006e14:	d3b6      	bcc.n	8006d84 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e1e:	3314      	adds	r3, #20
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	f003 0304 	and.w	r3, r3, #4
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d00d      	beq.n	8006e46 <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e32:	3314      	adds	r3, #20
 8006e34:	2204      	movs	r2, #4
 8006e36:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e40:	3304      	adds	r3, #4
 8006e42:	2200      	movs	r2, #0
 8006e44:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	2201      	movs	r2, #1
 8006e4a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	2200      	movs	r2, #0
 8006e52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8006e56:	2300      	movs	r3, #0
}
 8006e58:	4618      	mov	r0, r3
 8006e5a:	371c      	adds	r7, #28
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e62:	4770      	bx	lr
 8006e64:	ac02b00b 	.word	0xac02b00b
 8006e68:	fffffa0c 	.word	0xfffffa0c

08006e6c <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	b086      	sub	sp, #24
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	60f8      	str	r0, [r7, #12]
 8006e74:	460b      	mov	r3, r1
 8006e76:	607a      	str	r2, [r7, #4]
 8006e78:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8006e7e:	2300      	movs	r3, #0
 8006e80:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006e88:	b2db      	uxtb	r3, r3
 8006e8a:	2b82      	cmp	r3, #130	; 0x82
 8006e8c:	d101      	bne.n	8006e92 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8006e8e:	2302      	movs	r3, #2
 8006e90:	e050      	b.n	8006f34 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	2282      	movs	r2, #130	; 0x82
 8006e96:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	691b      	ldr	r3, [r3, #16]
 8006ea0:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8006ea2:	697b      	ldr	r3, [r7, #20]
 8006ea4:	f003 031c 	and.w	r3, r3, #28
 8006ea8:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	8a1b      	ldrh	r3, [r3, #16]
 8006eae:	02db      	lsls	r3, r3, #11
 8006eb0:	b29b      	uxth	r3, r3
 8006eb2:	697a      	ldr	r2, [r7, #20]
 8006eb4:	4313      	orrs	r3, r2
 8006eb6:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8006eb8:	897b      	ldrh	r3, [r7, #10]
 8006eba:	019b      	lsls	r3, r3, #6
 8006ebc:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8006ec0:	697a      	ldr	r2, [r7, #20]
 8006ec2:	4313      	orrs	r3, r2
 8006ec4:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8006ec6:	697b      	ldr	r3, [r7, #20]
 8006ec8:	f023 0302 	bic.w	r3, r3, #2
 8006ecc:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8006ece:	697b      	ldr	r3, [r7, #20]
 8006ed0:	f043 0301 	orr.w	r3, r3, #1
 8006ed4:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	697a      	ldr	r2, [r7, #20]
 8006edc:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8006ede:	f7fe fbdb 	bl	8005698 <HAL_GetTick>
 8006ee2:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8006ee4:	e015      	b.n	8006f12 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8006ee6:	f7fe fbd7 	bl	8005698 <HAL_GetTick>
 8006eea:	4602      	mov	r2, r0
 8006eec:	693b      	ldr	r3, [r7, #16]
 8006eee:	1ad3      	subs	r3, r2, r3
 8006ef0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ef4:	d309      	bcc.n	8006f0a <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	2201      	movs	r2, #1
 8006efa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	2200      	movs	r2, #0
 8006f02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8006f06:	2303      	movs	r3, #3
 8006f08:	e014      	b.n	8006f34 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	691b      	ldr	r3, [r3, #16]
 8006f10:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8006f12:	697b      	ldr	r3, [r7, #20]
 8006f14:	f003 0301 	and.w	r3, r3, #1
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d1e4      	bne.n	8006ee6 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	695b      	ldr	r3, [r3, #20]
 8006f22:	b29b      	uxth	r3, r3
 8006f24:	461a      	mov	r2, r3
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	2201      	movs	r2, #1
 8006f2e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8006f32:	2300      	movs	r3, #0
}
 8006f34:	4618      	mov	r0, r3
 8006f36:	3718      	adds	r7, #24
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	bd80      	pop	{r7, pc}

08006f3c <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8006f3c:	b580      	push	{r7, lr}
 8006f3e:	b086      	sub	sp, #24
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	60f8      	str	r0, [r7, #12]
 8006f44:	460b      	mov	r3, r1
 8006f46:	607a      	str	r2, [r7, #4]
 8006f48:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8006f4e:	2300      	movs	r3, #0
 8006f50:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006f58:	b2db      	uxtb	r3, r3
 8006f5a:	2b42      	cmp	r3, #66	; 0x42
 8006f5c:	d101      	bne.n	8006f62 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8006f5e:	2302      	movs	r3, #2
 8006f60:	e04e      	b.n	8007000 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	2242      	movs	r2, #66	; 0x42
 8006f66:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	691b      	ldr	r3, [r3, #16]
 8006f70:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8006f72:	697b      	ldr	r3, [r7, #20]
 8006f74:	f003 031c 	and.w	r3, r3, #28
 8006f78:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	8a1b      	ldrh	r3, [r3, #16]
 8006f7e:	02db      	lsls	r3, r3, #11
 8006f80:	b29b      	uxth	r3, r3
 8006f82:	697a      	ldr	r2, [r7, #20]
 8006f84:	4313      	orrs	r3, r2
 8006f86:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8006f88:	897b      	ldrh	r3, [r7, #10]
 8006f8a:	019b      	lsls	r3, r3, #6
 8006f8c:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8006f90:	697a      	ldr	r2, [r7, #20]
 8006f92:	4313      	orrs	r3, r2
 8006f94:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8006f96:	697b      	ldr	r3, [r7, #20]
 8006f98:	f043 0302 	orr.w	r3, r3, #2
 8006f9c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8006f9e:	697b      	ldr	r3, [r7, #20]
 8006fa0:	f043 0301 	orr.w	r3, r3, #1
 8006fa4:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	b29a      	uxth	r2, r3
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	697a      	ldr	r2, [r7, #20]
 8006fb6:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8006fb8:	f7fe fb6e 	bl	8005698 <HAL_GetTick>
 8006fbc:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8006fbe:	e015      	b.n	8006fec <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8006fc0:	f7fe fb6a 	bl	8005698 <HAL_GetTick>
 8006fc4:	4602      	mov	r2, r0
 8006fc6:	693b      	ldr	r3, [r7, #16]
 8006fc8:	1ad3      	subs	r3, r2, r3
 8006fca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006fce:	d309      	bcc.n	8006fe4 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	2201      	movs	r2, #1
 8006fd4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	2200      	movs	r2, #0
 8006fdc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8006fe0:	2303      	movs	r3, #3
 8006fe2:	e00d      	b.n	8007000 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	691b      	ldr	r3, [r3, #16]
 8006fea:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8006fec:	697b      	ldr	r3, [r7, #20]
 8006fee:	f003 0301 	and.w	r3, r3, #1
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d1e4      	bne.n	8006fc0 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	2201      	movs	r2, #1
 8006ffa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8006ffe:	2300      	movs	r3, #0
}
 8007000:	4618      	mov	r0, r3
 8007002:	3718      	adds	r7, #24
 8007004:	46bd      	mov	sp, r7
 8007006:	bd80      	pop	{r7, pc}

08007008 <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8007008:	b580      	push	{r7, lr}
 800700a:	b082      	sub	sp, #8
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007016:	2b01      	cmp	r3, #1
 8007018:	d101      	bne.n	800701e <HAL_ETH_Start+0x16>
 800701a:	2302      	movs	r3, #2
 800701c:	e01f      	b.n	800705e <HAL_ETH_Start+0x56>
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	2201      	movs	r2, #1
 8007022:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	2202      	movs	r2, #2
 800702a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 800702e:	6878      	ldr	r0, [r7, #4]
 8007030:	f000 fb44 	bl	80076bc <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8007034:	6878      	ldr	r0, [r7, #4]
 8007036:	f000 fb7b 	bl	8007730 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 800703a:	6878      	ldr	r0, [r7, #4]
 800703c:	f000 fc12 	bl	8007864 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8007040:	6878      	ldr	r0, [r7, #4]
 8007042:	f000 fbaf 	bl	80077a4 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8007046:	6878      	ldr	r0, [r7, #4]
 8007048:	f000 fbdc 	bl	8007804 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2201      	movs	r2, #1
 8007050:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2200      	movs	r2, #0
 8007058:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800705c:	2300      	movs	r3, #0
}
 800705e:	4618      	mov	r0, r3
 8007060:	3708      	adds	r7, #8
 8007062:	46bd      	mov	sp, r7
 8007064:	bd80      	pop	{r7, pc}

08007066 <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 8007066:	b580      	push	{r7, lr}
 8007068:	b082      	sub	sp, #8
 800706a:	af00      	add	r7, sp, #0
 800706c:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007074:	2b01      	cmp	r3, #1
 8007076:	d101      	bne.n	800707c <HAL_ETH_Stop+0x16>
 8007078:	2302      	movs	r3, #2
 800707a:	e01f      	b.n	80070bc <HAL_ETH_Stop+0x56>
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	2201      	movs	r2, #1
 8007080:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2202      	movs	r2, #2
 8007088:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 800708c:	6878      	ldr	r0, [r7, #4]
 800708e:	f000 fba1 	bl	80077d4 <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 8007092:	6878      	ldr	r0, [r7, #4]
 8007094:	f000 fbce 	bl	8007834 <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 8007098:	6878      	ldr	r0, [r7, #4]
 800709a:	f000 fb66 	bl	800776a <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 800709e:	6878      	ldr	r0, [r7, #4]
 80070a0:	f000 fbe0 	bl	8007864 <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 80070a4:	6878      	ldr	r0, [r7, #4]
 80070a6:	f000 fb26 	bl	80076f6 <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	2201      	movs	r2, #1
 80070ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	2200      	movs	r2, #0
 80070b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80070ba:	2300      	movs	r3, #0
}
 80070bc:	4618      	mov	r0, r3
 80070be:	3708      	adds	r7, #8
 80070c0:	46bd      	mov	sp, r7
 80070c2:	bd80      	pop	{r7, pc}

080070c4 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 80070c4:	b580      	push	{r7, lr}
 80070c6:	b084      	sub	sp, #16
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
 80070cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0U;
 80070ce:	2300      	movs	r3, #0
 80070d0:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80070d8:	2b01      	cmp	r3, #1
 80070da:	d101      	bne.n	80070e0 <HAL_ETH_ConfigMAC+0x1c>
 80070dc:	2302      	movs	r3, #2
 80070de:	e0e4      	b.n	80072aa <HAL_ETH_ConfigMAC+0x1e6>
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2201      	movs	r2, #1
 80070e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2202      	movs	r2, #2
 80070ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	f000 80b1 	beq.w	800725a <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8007100:	68fa      	ldr	r2, [r7, #12]
 8007102:	4b6c      	ldr	r3, [pc, #432]	; (80072b4 <HAL_ETH_ConfigMAC+0x1f0>)
 8007104:	4013      	ands	r3, r2
 8007106:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 800710c:	683b      	ldr	r3, [r7, #0]
 800710e:	685b      	ldr	r3, [r3, #4]
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8007110:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 8007112:	683b      	ldr	r3, [r7, #0]
 8007114:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 8007116:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 800711c:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 8007122:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 8007124:	683b      	ldr	r3, [r7, #0]
 8007126:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 8007128:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 800712a:	683b      	ldr	r3, [r7, #0]
 800712c:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 800712e:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 8007134:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 8007136:	683b      	ldr	r3, [r7, #0]
 8007138:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 800713a:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 800713c:	683b      	ldr	r3, [r7, #0]
 800713e:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 8007140:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 8007142:	683b      	ldr	r3, [r7, #0]
 8007144:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 8007146:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 8007148:	683b      	ldr	r3, [r7, #0]
 800714a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 800714c:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 800714e:	683b      	ldr	r3, [r7, #0]
 8007150:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 8007152:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8007154:	68fa      	ldr	r2, [r7, #12]
 8007156:	4313      	orrs	r3, r2
 8007158:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	68fa      	ldr	r2, [r7, #12]
 8007160:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800716a:	2001      	movs	r0, #1
 800716c:	f7fe faa0 	bl	80056b0 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1; 
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	68fa      	ldr	r2, [r7, #12]
 8007176:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8007178:	683b      	ldr	r3, [r7, #0]
 800717a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 800717c:	683b      	ldr	r3, [r7, #0]
 800717e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8007180:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 8007182:	683b      	ldr	r3, [r7, #0]
 8007184:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 8007186:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 8007188:	683b      	ldr	r3, [r7, #0]
 800718a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 800718c:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 800718e:	683b      	ldr	r3, [r7, #0]
 8007190:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 8007192:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 8007198:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 800719a:	683b      	ldr	r3, [r7, #0]
 800719c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 800719e:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 80071a2:	683b      	ldr	r3, [r7, #0]
 80071a4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 80071aa:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80071ac:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFFR;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	685b      	ldr	r3, [r3, #4]
 80071b4:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80071b6:	2001      	movs	r0, #1
 80071b8:	f7fe fa7a 	bl	80056b0 <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg1;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	68fa      	ldr	r2, [r7, #12]
 80071c2:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	683a      	ldr	r2, [r7, #0]
 80071ca:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80071cc:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	683a      	ldr	r2, [r7, #0]
 80071d4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80071d6:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg1 = (heth->Instance)->MACFCR;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	699b      	ldr	r3, [r3, #24]
 80071de:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80071e0:	68fa      	ldr	r2, [r7, #12]
 80071e2:	f64f 7341 	movw	r3, #65345	; 0xff41
 80071e6:	4013      	ands	r3, r2
 80071e8:	60fb      	str	r3, [r7, #12]
     
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 80071ea:	683b      	ldr	r3, [r7, #0]
 80071ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071ee:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 80071f0:	683b      	ldr	r3, [r7, #0]
 80071f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 80071f4:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 80071f6:	683b      	ldr	r3, [r7, #0]
 80071f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 80071fa:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 80071fc:	683b      	ldr	r3, [r7, #0]
 80071fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 8007200:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 8007202:	683b      	ldr	r3, [r7, #0]
 8007204:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 8007206:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 8007208:	683b      	ldr	r3, [r7, #0]
 800720a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 800720c:	4313      	orrs	r3, r2
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 800720e:	68fa      	ldr	r2, [r7, #12]
 8007210:	4313      	orrs	r3, r2
 8007212:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	68fa      	ldr	r2, [r7, #12]
 800721a:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFCR;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	699b      	ldr	r3, [r3, #24]
 8007222:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8007224:	2001      	movs	r0, #1
 8007226:	f7fe fa43 	bl	80056b0 <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg1;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	68fa      	ldr	r2, [r7, #12]
 8007230:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8007232:	683b      	ldr	r3, [r7, #0]
 8007234:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 8007236:	683b      	ldr	r3, [r7, #0]
 8007238:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	430a      	orrs	r2, r1
 8007240:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg1 = (heth->Instance)->MACVLANTR;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	69db      	ldr	r3, [r3, #28]
 8007248:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 800724a:	2001      	movs	r0, #1
 800724c:	f7fe fa30 	bl	80056b0 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg1;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	68fa      	ldr	r2, [r7, #12]
 8007256:	61da      	str	r2, [r3, #28]
 8007258:	e01e      	b.n	8007298 <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg1 &= ~(0x00004800U);
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8007268:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	689a      	ldr	r2, [r3, #8]
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	68db      	ldr	r3, [r3, #12]
 8007272:	4313      	orrs	r3, r2
 8007274:	68fa      	ldr	r2, [r7, #12]
 8007276:	4313      	orrs	r3, r2
 8007278:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	68fa      	ldr	r2, [r7, #12]
 8007280:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800728a:	2001      	movs	r0, #1
 800728c:	f7fe fa10 	bl	80056b0 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	68fa      	ldr	r2, [r7, #12]
 8007296:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2201      	movs	r2, #1
 800729c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	2200      	movs	r2, #0
 80072a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 80072a8:	2300      	movs	r3, #0
}
 80072aa:	4618      	mov	r0, r3
 80072ac:	3710      	adds	r7, #16
 80072ae:	46bd      	mov	sp, r7
 80072b0:	bd80      	pop	{r7, pc}
 80072b2:	bf00      	nop
 80072b4:	ff20810f 	.word	0xff20810f

080072b8 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 80072b8:	b580      	push	{r7, lr}
 80072ba:	b0b0      	sub	sp, #192	; 0xc0
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
 80072c0:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 80072c2:	2300      	movs	r3, #0
 80072c4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 80072c8:	683b      	ldr	r3, [r7, #0]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d007      	beq.n	80072de <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80072d4:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80072dc:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 80072de:	2300      	movs	r3, #0
 80072e0:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 80072e2:	2300      	movs	r3, #0
 80072e4:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 80072e6:	2300      	movs	r3, #0
 80072e8:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 80072ea:	2300      	movs	r3, #0
 80072ec:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 80072ee:	2300      	movs	r3, #0
 80072f0:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 80072f2:	2300      	movs	r3, #0
 80072f4:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	69db      	ldr	r3, [r3, #28]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d103      	bne.n	8007306 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 80072fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007302:	663b      	str	r3, [r7, #96]	; 0x60
 8007304:	e001      	b.n	800730a <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8007306:	2300      	movs	r3, #0
 8007308:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 800730a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800730e:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8007310:	2300      	movs	r3, #0
 8007312:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8007314:	2300      	movs	r3, #0
 8007316:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8007318:	2300      	movs	r3, #0
 800731a:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 800731c:	2300      	movs	r3, #0
 800731e:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8007320:	2300      	movs	r3, #0
 8007322:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8007324:	2340      	movs	r3, #64	; 0x40
 8007326:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8007328:	2300      	movs	r3, #0
 800732a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 800732e:	2300      	movs	r3, #0
 8007330:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8007334:	2300      	movs	r3, #0
 8007336:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 800733a:	2300      	movs	r3, #0
 800733c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8007340:	2300      	movs	r3, #0
 8007342:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 8007346:	2300      	movs	r3, #0
 8007348:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 800734c:	2300      	movs	r3, #0
 800734e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 8007352:	2300      	movs	r3, #0
 8007354:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8007358:	2380      	movs	r3, #128	; 0x80
 800735a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800735e:	2300      	movs	r3, #0
 8007360:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8007364:	2300      	movs	r3, #0
 8007366:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 800736a:	2300      	movs	r3, #0
 800736c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8007370:	2300      	movs	r3, #0
 8007372:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8007376:	2300      	movs	r3, #0
 8007378:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 800737c:	2300      	movs	r3, #0
 800737e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800738c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8007390:	4bac      	ldr	r3, [pc, #688]	; (8007644 <ETH_MACDMAConfig+0x38c>)
 8007392:	4013      	ands	r3, r2
 8007394:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8007398:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 800739a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 800739c:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 800739e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 80073a0:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 80073a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 80073a4:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 80073aa:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 80073ac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 80073ae:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 80073b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 80073b2:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 80073b8:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 80073ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 80073bc:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 80073be:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 80073c0:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 80073c2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 80073c4:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 80073c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 80073c8:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 80073ca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 80073cc:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 80073ce:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80073d2:	4313      	orrs	r3, r2
 80073d4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80073e0:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80073ec:	2001      	movs	r0, #1
 80073ee:	f7fe f95f 	bl	80056b0 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80073fa:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80073fc:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 80073fe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8007400:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8007402:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8007404:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8007406:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 800740a:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 800740c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8007410:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8007412:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8007416:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8007418:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 800741c:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8007420:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8007428:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800742a:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	685b      	ldr	r3, [r3, #4]
 8007432:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8007436:	2001      	movs	r0, #1
 8007438:	f7fe f93a 	bl	80056b0 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8007444:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800744e:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8007458:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	699b      	ldr	r3, [r3, #24]
 8007460:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8007464:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8007468:	f64f 7341 	movw	r3, #65345	; 0xff41
 800746c:	4013      	ands	r3, r2
 800746e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8007472:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007476:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8007478:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 800747c:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 800747e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8007482:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8007484:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8007488:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 800748a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 800748e:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8007490:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8007494:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8007496:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800749a:	4313      	orrs	r3, r2
 800749c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80074a8:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	699b      	ldr	r3, [r3, #24]
 80074b0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80074b4:	2001      	movs	r0, #1
 80074b6:	f7fe f8fb 	bl	80056b0 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80074c2:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80074c4:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 80074c8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	430a      	orrs	r2, r1
 80074d2:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	69db      	ldr	r3, [r3, #28]
 80074da:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80074de:	2001      	movs	r0, #1
 80074e0:	f7fe f8e6 	bl	80056b0 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80074ec:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 80074ee:	2300      	movs	r3, #0
 80074f0:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 80074f2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80074f6:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 80074f8:	2300      	movs	r3, #0
 80074fa:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 80074fc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007500:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8007502:	2300      	movs	r3, #0
 8007504:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8007506:	2300      	movs	r3, #0
 8007508:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 800750a:	2300      	movs	r3, #0
 800750c:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800750e:	2300      	movs	r3, #0
 8007510:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8007512:	2304      	movs	r3, #4
 8007514:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8007516:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800751a:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 800751c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007520:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8007522:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007526:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8007528:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800752c:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 800752e:	2380      	movs	r3, #128	; 0x80
 8007530:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 8007532:	2300      	movs	r3, #0
 8007534:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8007536:	2300      	movs	r3, #0
 8007538:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007542:	3318      	adds	r3, #24
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800754a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800754e:	4b3e      	ldr	r3, [pc, #248]	; (8007648 <ETH_MACDMAConfig+0x390>)
 8007550:	4013      	ands	r3, r2
 8007552:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8007556:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8007558:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800755a:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 800755c:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 800755e:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8007560:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8007562:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8007564:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8007566:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8007568:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 800756a:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 800756c:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 800756e:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8007570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8007572:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8007574:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8007576:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8007578:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800757c:	4313      	orrs	r3, r2
 800757e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800758a:	3318      	adds	r3, #24
 800758c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8007590:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800759a:	3318      	adds	r3, #24
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80075a2:	2001      	movs	r0, #1
 80075a4:	f7fe f884 	bl	80056b0 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80075b0:	3318      	adds	r3, #24
 80075b2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80075b6:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80075b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 80075ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80075bc:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80075be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 80075c0:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 80075c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80075c4:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 80075c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 80075c8:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 80075ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80075cc:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 80075ce:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 80075d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 80075d2:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80075dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80075e0:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80075f0:	2001      	movs	r0, #1
 80075f2:	f7fe f85d 	bl	80056b0 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80075fe:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8007602:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	699b      	ldr	r3, [r3, #24]
 8007608:	2b01      	cmp	r3, #1
 800760a:	d10f      	bne.n	800762c <ETH_MACDMAConfig+0x374>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007614:	331c      	adds	r3, #28
 8007616:	681a      	ldr	r2, [r3, #0]
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8007620:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007624:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007628:	331c      	adds	r3, #28
 800762a:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	695b      	ldr	r3, [r3, #20]
 8007630:	461a      	mov	r2, r3
 8007632:	2100      	movs	r1, #0
 8007634:	6878      	ldr	r0, [r7, #4]
 8007636:	f000 f809 	bl	800764c <ETH_MACAddressConfig>
}
 800763a:	bf00      	nop
 800763c:	37c0      	adds	r7, #192	; 0xc0
 800763e:	46bd      	mov	sp, r7
 8007640:	bd80      	pop	{r7, pc}
 8007642:	bf00      	nop
 8007644:	ff20810f 	.word	0xff20810f
 8007648:	f8de3f23 	.word	0xf8de3f23

0800764c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 800764c:	b480      	push	{r7}
 800764e:	b087      	sub	sp, #28
 8007650:	af00      	add	r7, sp, #0
 8007652:	60f8      	str	r0, [r7, #12]
 8007654:	60b9      	str	r1, [r7, #8]
 8007656:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	3305      	adds	r3, #5
 800765c:	781b      	ldrb	r3, [r3, #0]
 800765e:	021b      	lsls	r3, r3, #8
 8007660:	687a      	ldr	r2, [r7, #4]
 8007662:	3204      	adds	r2, #4
 8007664:	7812      	ldrb	r2, [r2, #0]
 8007666:	4313      	orrs	r3, r2
 8007668:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800766a:	68ba      	ldr	r2, [r7, #8]
 800766c:	4b11      	ldr	r3, [pc, #68]	; (80076b4 <ETH_MACAddressConfig+0x68>)
 800766e:	4413      	add	r3, r2
 8007670:	461a      	mov	r2, r3
 8007672:	697b      	ldr	r3, [r7, #20]
 8007674:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	3303      	adds	r3, #3
 800767a:	781b      	ldrb	r3, [r3, #0]
 800767c:	061a      	lsls	r2, r3, #24
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	3302      	adds	r3, #2
 8007682:	781b      	ldrb	r3, [r3, #0]
 8007684:	041b      	lsls	r3, r3, #16
 8007686:	431a      	orrs	r2, r3
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	3301      	adds	r3, #1
 800768c:	781b      	ldrb	r3, [r3, #0]
 800768e:	021b      	lsls	r3, r3, #8
 8007690:	4313      	orrs	r3, r2
 8007692:	687a      	ldr	r2, [r7, #4]
 8007694:	7812      	ldrb	r2, [r2, #0]
 8007696:	4313      	orrs	r3, r2
 8007698:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800769a:	68ba      	ldr	r2, [r7, #8]
 800769c:	4b06      	ldr	r3, [pc, #24]	; (80076b8 <ETH_MACAddressConfig+0x6c>)
 800769e:	4413      	add	r3, r2
 80076a0:	461a      	mov	r2, r3
 80076a2:	697b      	ldr	r3, [r7, #20]
 80076a4:	6013      	str	r3, [r2, #0]
}
 80076a6:	bf00      	nop
 80076a8:	371c      	adds	r7, #28
 80076aa:	46bd      	mov	sp, r7
 80076ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b0:	4770      	bx	lr
 80076b2:	bf00      	nop
 80076b4:	40028040 	.word	0x40028040
 80076b8:	40028044 	.word	0x40028044

080076bc <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 80076bc:	b580      	push	{r7, lr}
 80076be:	b084      	sub	sp, #16
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80076c4:	2300      	movs	r3, #0
 80076c6:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	681a      	ldr	r2, [r3, #0]
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	f042 0208 	orr.w	r2, r2, #8
 80076d6:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80076e0:	2001      	movs	r0, #1
 80076e2:	f000 f8e9 	bl	80078b8 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	68fa      	ldr	r2, [r7, #12]
 80076ec:	601a      	str	r2, [r3, #0]
}
 80076ee:	bf00      	nop
 80076f0:	3710      	adds	r7, #16
 80076f2:	46bd      	mov	sp, r7
 80076f4:	bd80      	pop	{r7, pc}

080076f6 <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 80076f6:	b580      	push	{r7, lr}
 80076f8:	b084      	sub	sp, #16
 80076fa:	af00      	add	r7, sp, #0
 80076fc:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80076fe:	2300      	movs	r3, #0
 8007700:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	681a      	ldr	r2, [r3, #0]
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	f022 0208 	bic.w	r2, r2, #8
 8007710:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800771a:	2001      	movs	r0, #1
 800771c:	f000 f8cc 	bl	80078b8 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	68fa      	ldr	r2, [r7, #12]
 8007726:	601a      	str	r2, [r3, #0]
}
 8007728:	bf00      	nop
 800772a:	3710      	adds	r7, #16
 800772c:	46bd      	mov	sp, r7
 800772e:	bd80      	pop	{r7, pc}

08007730 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8007730:	b580      	push	{r7, lr}
 8007732:	b084      	sub	sp, #16
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8007738:	2300      	movs	r3, #0
 800773a:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	681a      	ldr	r2, [r3, #0]
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	f042 0204 	orr.w	r2, r2, #4
 800774a:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8007754:	2001      	movs	r0, #1
 8007756:	f000 f8af 	bl	80078b8 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	68fa      	ldr	r2, [r7, #12]
 8007760:	601a      	str	r2, [r3, #0]
}
 8007762:	bf00      	nop
 8007764:	3710      	adds	r7, #16
 8007766:	46bd      	mov	sp, r7
 8007768:	bd80      	pop	{r7, pc}

0800776a <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 800776a:	b580      	push	{r7, lr}
 800776c:	b084      	sub	sp, #16
 800776e:	af00      	add	r7, sp, #0
 8007770:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8007772:	2300      	movs	r3, #0
 8007774:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	681a      	ldr	r2, [r3, #0]
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	f022 0204 	bic.w	r2, r2, #4
 8007784:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800778e:	2001      	movs	r0, #1
 8007790:	f000 f892 	bl	80078b8 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	68fa      	ldr	r2, [r7, #12]
 800779a:	601a      	str	r2, [r3, #0]
}
 800779c:	bf00      	nop
 800779e:	3710      	adds	r7, #16
 80077a0:	46bd      	mov	sp, r7
 80077a2:	bd80      	pop	{r7, pc}

080077a4 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 80077a4:	b480      	push	{r7}
 80077a6:	b083      	sub	sp, #12
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80077b4:	3318      	adds	r3, #24
 80077b6:	681a      	ldr	r2, [r3, #0]
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80077c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80077c4:	3318      	adds	r3, #24
 80077c6:	601a      	str	r2, [r3, #0]
}
 80077c8:	bf00      	nop
 80077ca:	370c      	adds	r7, #12
 80077cc:	46bd      	mov	sp, r7
 80077ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d2:	4770      	bx	lr

080077d4 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 80077d4:	b480      	push	{r7}
 80077d6:	b083      	sub	sp, #12
 80077d8:	af00      	add	r7, sp, #0
 80077da:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80077e4:	3318      	adds	r3, #24
 80077e6:	681a      	ldr	r2, [r3, #0]
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80077f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80077f4:	3318      	adds	r3, #24
 80077f6:	601a      	str	r2, [r3, #0]
}
 80077f8:	bf00      	nop
 80077fa:	370c      	adds	r7, #12
 80077fc:	46bd      	mov	sp, r7
 80077fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007802:	4770      	bx	lr

08007804 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8007804:	b480      	push	{r7}
 8007806:	b083      	sub	sp, #12
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007814:	3318      	adds	r3, #24
 8007816:	681a      	ldr	r2, [r3, #0]
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	f042 0202 	orr.w	r2, r2, #2
 8007820:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007824:	3318      	adds	r3, #24
 8007826:	601a      	str	r2, [r3, #0]
}
 8007828:	bf00      	nop
 800782a:	370c      	adds	r7, #12
 800782c:	46bd      	mov	sp, r7
 800782e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007832:	4770      	bx	lr

08007834 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8007834:	b480      	push	{r7}
 8007836:	b083      	sub	sp, #12
 8007838:	af00      	add	r7, sp, #0
 800783a:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007844:	3318      	adds	r3, #24
 8007846:	681a      	ldr	r2, [r3, #0]
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	f022 0202 	bic.w	r2, r2, #2
 8007850:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007854:	3318      	adds	r3, #24
 8007856:	601a      	str	r2, [r3, #0]
}
 8007858:	bf00      	nop
 800785a:	370c      	adds	r7, #12
 800785c:	46bd      	mov	sp, r7
 800785e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007862:	4770      	bx	lr

08007864 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8007864:	b580      	push	{r7, lr}
 8007866:	b084      	sub	sp, #16
 8007868:	af00      	add	r7, sp, #0
 800786a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 800786c:	2300      	movs	r3, #0
 800786e:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007878:	3318      	adds	r3, #24
 800787a:	681a      	ldr	r2, [r3, #0]
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8007884:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007888:	3318      	adds	r3, #24
 800788a:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007894:	3318      	adds	r3, #24
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800789a:	2001      	movs	r0, #1
 800789c:	f000 f80c 	bl	80078b8 <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	68fa      	ldr	r2, [r7, #12]
 80078a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80078aa:	3318      	adds	r3, #24
 80078ac:	601a      	str	r2, [r3, #0]
}
 80078ae:	bf00      	nop
 80078b0:	3710      	adds	r7, #16
 80078b2:	46bd      	mov	sp, r7
 80078b4:	bd80      	pop	{r7, pc}
	...

080078b8 <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 80078b8:	b480      	push	{r7}
 80078ba:	b085      	sub	sp, #20
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80078c0:	4b0b      	ldr	r3, [pc, #44]	; (80078f0 <ETH_Delay+0x38>)
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	4a0b      	ldr	r2, [pc, #44]	; (80078f4 <ETH_Delay+0x3c>)
 80078c6:	fba2 2303 	umull	r2, r3, r2, r3
 80078ca:	0a5b      	lsrs	r3, r3, #9
 80078cc:	687a      	ldr	r2, [r7, #4]
 80078ce:	fb02 f303 	mul.w	r3, r2, r3
 80078d2:	60fb      	str	r3, [r7, #12]
  do 
  {
    __NOP();
 80078d4:	bf00      	nop
  } 
  while (Delay --);
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	1e5a      	subs	r2, r3, #1
 80078da:	60fa      	str	r2, [r7, #12]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d1f9      	bne.n	80078d4 <ETH_Delay+0x1c>
}
 80078e0:	bf00      	nop
 80078e2:	bf00      	nop
 80078e4:	3714      	adds	r7, #20
 80078e6:	46bd      	mov	sp, r7
 80078e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ec:	4770      	bx	lr
 80078ee:	bf00      	nop
 80078f0:	2000005c 	.word	0x2000005c
 80078f4:	10624dd3 	.word	0x10624dd3

080078f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80078f8:	b480      	push	{r7}
 80078fa:	b089      	sub	sp, #36	; 0x24
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	6078      	str	r0, [r7, #4]
 8007900:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8007902:	2300      	movs	r3, #0
 8007904:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8007906:	2300      	movs	r3, #0
 8007908:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800790a:	2300      	movs	r3, #0
 800790c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800790e:	2300      	movs	r3, #0
 8007910:	61fb      	str	r3, [r7, #28]
 8007912:	e16b      	b.n	8007bec <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8007914:	2201      	movs	r2, #1
 8007916:	69fb      	ldr	r3, [r7, #28]
 8007918:	fa02 f303 	lsl.w	r3, r2, r3
 800791c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800791e:	683b      	ldr	r3, [r7, #0]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	697a      	ldr	r2, [r7, #20]
 8007924:	4013      	ands	r3, r2
 8007926:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007928:	693a      	ldr	r2, [r7, #16]
 800792a:	697b      	ldr	r3, [r7, #20]
 800792c:	429a      	cmp	r2, r3
 800792e:	f040 815a 	bne.w	8007be6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007932:	683b      	ldr	r3, [r7, #0]
 8007934:	685b      	ldr	r3, [r3, #4]
 8007936:	2b01      	cmp	r3, #1
 8007938:	d00b      	beq.n	8007952 <HAL_GPIO_Init+0x5a>
 800793a:	683b      	ldr	r3, [r7, #0]
 800793c:	685b      	ldr	r3, [r3, #4]
 800793e:	2b02      	cmp	r3, #2
 8007940:	d007      	beq.n	8007952 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007942:	683b      	ldr	r3, [r7, #0]
 8007944:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007946:	2b11      	cmp	r3, #17
 8007948:	d003      	beq.n	8007952 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800794a:	683b      	ldr	r3, [r7, #0]
 800794c:	685b      	ldr	r3, [r3, #4]
 800794e:	2b12      	cmp	r3, #18
 8007950:	d130      	bne.n	80079b4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	689b      	ldr	r3, [r3, #8]
 8007956:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007958:	69fb      	ldr	r3, [r7, #28]
 800795a:	005b      	lsls	r3, r3, #1
 800795c:	2203      	movs	r2, #3
 800795e:	fa02 f303 	lsl.w	r3, r2, r3
 8007962:	43db      	mvns	r3, r3
 8007964:	69ba      	ldr	r2, [r7, #24]
 8007966:	4013      	ands	r3, r2
 8007968:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800796a:	683b      	ldr	r3, [r7, #0]
 800796c:	68da      	ldr	r2, [r3, #12]
 800796e:	69fb      	ldr	r3, [r7, #28]
 8007970:	005b      	lsls	r3, r3, #1
 8007972:	fa02 f303 	lsl.w	r3, r2, r3
 8007976:	69ba      	ldr	r2, [r7, #24]
 8007978:	4313      	orrs	r3, r2
 800797a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	69ba      	ldr	r2, [r7, #24]
 8007980:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	685b      	ldr	r3, [r3, #4]
 8007986:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007988:	2201      	movs	r2, #1
 800798a:	69fb      	ldr	r3, [r7, #28]
 800798c:	fa02 f303 	lsl.w	r3, r2, r3
 8007990:	43db      	mvns	r3, r3
 8007992:	69ba      	ldr	r2, [r7, #24]
 8007994:	4013      	ands	r3, r2
 8007996:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8007998:	683b      	ldr	r3, [r7, #0]
 800799a:	685b      	ldr	r3, [r3, #4]
 800799c:	091b      	lsrs	r3, r3, #4
 800799e:	f003 0201 	and.w	r2, r3, #1
 80079a2:	69fb      	ldr	r3, [r7, #28]
 80079a4:	fa02 f303 	lsl.w	r3, r2, r3
 80079a8:	69ba      	ldr	r2, [r7, #24]
 80079aa:	4313      	orrs	r3, r2
 80079ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	69ba      	ldr	r2, [r7, #24]
 80079b2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	68db      	ldr	r3, [r3, #12]
 80079b8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80079ba:	69fb      	ldr	r3, [r7, #28]
 80079bc:	005b      	lsls	r3, r3, #1
 80079be:	2203      	movs	r2, #3
 80079c0:	fa02 f303 	lsl.w	r3, r2, r3
 80079c4:	43db      	mvns	r3, r3
 80079c6:	69ba      	ldr	r2, [r7, #24]
 80079c8:	4013      	ands	r3, r2
 80079ca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80079cc:	683b      	ldr	r3, [r7, #0]
 80079ce:	689a      	ldr	r2, [r3, #8]
 80079d0:	69fb      	ldr	r3, [r7, #28]
 80079d2:	005b      	lsls	r3, r3, #1
 80079d4:	fa02 f303 	lsl.w	r3, r2, r3
 80079d8:	69ba      	ldr	r2, [r7, #24]
 80079da:	4313      	orrs	r3, r2
 80079dc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	69ba      	ldr	r2, [r7, #24]
 80079e2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80079e4:	683b      	ldr	r3, [r7, #0]
 80079e6:	685b      	ldr	r3, [r3, #4]
 80079e8:	2b02      	cmp	r3, #2
 80079ea:	d003      	beq.n	80079f4 <HAL_GPIO_Init+0xfc>
 80079ec:	683b      	ldr	r3, [r7, #0]
 80079ee:	685b      	ldr	r3, [r3, #4]
 80079f0:	2b12      	cmp	r3, #18
 80079f2:	d123      	bne.n	8007a3c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80079f4:	69fb      	ldr	r3, [r7, #28]
 80079f6:	08da      	lsrs	r2, r3, #3
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	3208      	adds	r2, #8
 80079fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a00:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007a02:	69fb      	ldr	r3, [r7, #28]
 8007a04:	f003 0307 	and.w	r3, r3, #7
 8007a08:	009b      	lsls	r3, r3, #2
 8007a0a:	220f      	movs	r2, #15
 8007a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8007a10:	43db      	mvns	r3, r3
 8007a12:	69ba      	ldr	r2, [r7, #24]
 8007a14:	4013      	ands	r3, r2
 8007a16:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8007a18:	683b      	ldr	r3, [r7, #0]
 8007a1a:	691a      	ldr	r2, [r3, #16]
 8007a1c:	69fb      	ldr	r3, [r7, #28]
 8007a1e:	f003 0307 	and.w	r3, r3, #7
 8007a22:	009b      	lsls	r3, r3, #2
 8007a24:	fa02 f303 	lsl.w	r3, r2, r3
 8007a28:	69ba      	ldr	r2, [r7, #24]
 8007a2a:	4313      	orrs	r3, r2
 8007a2c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007a2e:	69fb      	ldr	r3, [r7, #28]
 8007a30:	08da      	lsrs	r2, r3, #3
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	3208      	adds	r2, #8
 8007a36:	69b9      	ldr	r1, [r7, #24]
 8007a38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8007a42:	69fb      	ldr	r3, [r7, #28]
 8007a44:	005b      	lsls	r3, r3, #1
 8007a46:	2203      	movs	r2, #3
 8007a48:	fa02 f303 	lsl.w	r3, r2, r3
 8007a4c:	43db      	mvns	r3, r3
 8007a4e:	69ba      	ldr	r2, [r7, #24]
 8007a50:	4013      	ands	r3, r2
 8007a52:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007a54:	683b      	ldr	r3, [r7, #0]
 8007a56:	685b      	ldr	r3, [r3, #4]
 8007a58:	f003 0203 	and.w	r2, r3, #3
 8007a5c:	69fb      	ldr	r3, [r7, #28]
 8007a5e:	005b      	lsls	r3, r3, #1
 8007a60:	fa02 f303 	lsl.w	r3, r2, r3
 8007a64:	69ba      	ldr	r2, [r7, #24]
 8007a66:	4313      	orrs	r3, r2
 8007a68:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	69ba      	ldr	r2, [r7, #24]
 8007a6e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007a70:	683b      	ldr	r3, [r7, #0]
 8007a72:	685b      	ldr	r3, [r3, #4]
 8007a74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	f000 80b4 	beq.w	8007be6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007a7e:	2300      	movs	r3, #0
 8007a80:	60fb      	str	r3, [r7, #12]
 8007a82:	4b60      	ldr	r3, [pc, #384]	; (8007c04 <HAL_GPIO_Init+0x30c>)
 8007a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a86:	4a5f      	ldr	r2, [pc, #380]	; (8007c04 <HAL_GPIO_Init+0x30c>)
 8007a88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007a8c:	6453      	str	r3, [r2, #68]	; 0x44
 8007a8e:	4b5d      	ldr	r3, [pc, #372]	; (8007c04 <HAL_GPIO_Init+0x30c>)
 8007a90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007a96:	60fb      	str	r3, [r7, #12]
 8007a98:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007a9a:	4a5b      	ldr	r2, [pc, #364]	; (8007c08 <HAL_GPIO_Init+0x310>)
 8007a9c:	69fb      	ldr	r3, [r7, #28]
 8007a9e:	089b      	lsrs	r3, r3, #2
 8007aa0:	3302      	adds	r3, #2
 8007aa2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007aa6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8007aa8:	69fb      	ldr	r3, [r7, #28]
 8007aaa:	f003 0303 	and.w	r3, r3, #3
 8007aae:	009b      	lsls	r3, r3, #2
 8007ab0:	220f      	movs	r2, #15
 8007ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8007ab6:	43db      	mvns	r3, r3
 8007ab8:	69ba      	ldr	r2, [r7, #24]
 8007aba:	4013      	ands	r3, r2
 8007abc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	4a52      	ldr	r2, [pc, #328]	; (8007c0c <HAL_GPIO_Init+0x314>)
 8007ac2:	4293      	cmp	r3, r2
 8007ac4:	d02b      	beq.n	8007b1e <HAL_GPIO_Init+0x226>
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	4a51      	ldr	r2, [pc, #324]	; (8007c10 <HAL_GPIO_Init+0x318>)
 8007aca:	4293      	cmp	r3, r2
 8007acc:	d025      	beq.n	8007b1a <HAL_GPIO_Init+0x222>
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	4a50      	ldr	r2, [pc, #320]	; (8007c14 <HAL_GPIO_Init+0x31c>)
 8007ad2:	4293      	cmp	r3, r2
 8007ad4:	d01f      	beq.n	8007b16 <HAL_GPIO_Init+0x21e>
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	4a4f      	ldr	r2, [pc, #316]	; (8007c18 <HAL_GPIO_Init+0x320>)
 8007ada:	4293      	cmp	r3, r2
 8007adc:	d019      	beq.n	8007b12 <HAL_GPIO_Init+0x21a>
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	4a4e      	ldr	r2, [pc, #312]	; (8007c1c <HAL_GPIO_Init+0x324>)
 8007ae2:	4293      	cmp	r3, r2
 8007ae4:	d013      	beq.n	8007b0e <HAL_GPIO_Init+0x216>
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	4a4d      	ldr	r2, [pc, #308]	; (8007c20 <HAL_GPIO_Init+0x328>)
 8007aea:	4293      	cmp	r3, r2
 8007aec:	d00d      	beq.n	8007b0a <HAL_GPIO_Init+0x212>
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	4a4c      	ldr	r2, [pc, #304]	; (8007c24 <HAL_GPIO_Init+0x32c>)
 8007af2:	4293      	cmp	r3, r2
 8007af4:	d007      	beq.n	8007b06 <HAL_GPIO_Init+0x20e>
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	4a4b      	ldr	r2, [pc, #300]	; (8007c28 <HAL_GPIO_Init+0x330>)
 8007afa:	4293      	cmp	r3, r2
 8007afc:	d101      	bne.n	8007b02 <HAL_GPIO_Init+0x20a>
 8007afe:	2307      	movs	r3, #7
 8007b00:	e00e      	b.n	8007b20 <HAL_GPIO_Init+0x228>
 8007b02:	2308      	movs	r3, #8
 8007b04:	e00c      	b.n	8007b20 <HAL_GPIO_Init+0x228>
 8007b06:	2306      	movs	r3, #6
 8007b08:	e00a      	b.n	8007b20 <HAL_GPIO_Init+0x228>
 8007b0a:	2305      	movs	r3, #5
 8007b0c:	e008      	b.n	8007b20 <HAL_GPIO_Init+0x228>
 8007b0e:	2304      	movs	r3, #4
 8007b10:	e006      	b.n	8007b20 <HAL_GPIO_Init+0x228>
 8007b12:	2303      	movs	r3, #3
 8007b14:	e004      	b.n	8007b20 <HAL_GPIO_Init+0x228>
 8007b16:	2302      	movs	r3, #2
 8007b18:	e002      	b.n	8007b20 <HAL_GPIO_Init+0x228>
 8007b1a:	2301      	movs	r3, #1
 8007b1c:	e000      	b.n	8007b20 <HAL_GPIO_Init+0x228>
 8007b1e:	2300      	movs	r3, #0
 8007b20:	69fa      	ldr	r2, [r7, #28]
 8007b22:	f002 0203 	and.w	r2, r2, #3
 8007b26:	0092      	lsls	r2, r2, #2
 8007b28:	4093      	lsls	r3, r2
 8007b2a:	69ba      	ldr	r2, [r7, #24]
 8007b2c:	4313      	orrs	r3, r2
 8007b2e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007b30:	4935      	ldr	r1, [pc, #212]	; (8007c08 <HAL_GPIO_Init+0x310>)
 8007b32:	69fb      	ldr	r3, [r7, #28]
 8007b34:	089b      	lsrs	r3, r3, #2
 8007b36:	3302      	adds	r3, #2
 8007b38:	69ba      	ldr	r2, [r7, #24]
 8007b3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007b3e:	4b3b      	ldr	r3, [pc, #236]	; (8007c2c <HAL_GPIO_Init+0x334>)
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007b44:	693b      	ldr	r3, [r7, #16]
 8007b46:	43db      	mvns	r3, r3
 8007b48:	69ba      	ldr	r2, [r7, #24]
 8007b4a:	4013      	ands	r3, r2
 8007b4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007b4e:	683b      	ldr	r3, [r7, #0]
 8007b50:	685b      	ldr	r3, [r3, #4]
 8007b52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d003      	beq.n	8007b62 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8007b5a:	69ba      	ldr	r2, [r7, #24]
 8007b5c:	693b      	ldr	r3, [r7, #16]
 8007b5e:	4313      	orrs	r3, r2
 8007b60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007b62:	4a32      	ldr	r2, [pc, #200]	; (8007c2c <HAL_GPIO_Init+0x334>)
 8007b64:	69bb      	ldr	r3, [r7, #24]
 8007b66:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8007b68:	4b30      	ldr	r3, [pc, #192]	; (8007c2c <HAL_GPIO_Init+0x334>)
 8007b6a:	685b      	ldr	r3, [r3, #4]
 8007b6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007b6e:	693b      	ldr	r3, [r7, #16]
 8007b70:	43db      	mvns	r3, r3
 8007b72:	69ba      	ldr	r2, [r7, #24]
 8007b74:	4013      	ands	r3, r2
 8007b76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8007b78:	683b      	ldr	r3, [r7, #0]
 8007b7a:	685b      	ldr	r3, [r3, #4]
 8007b7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d003      	beq.n	8007b8c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8007b84:	69ba      	ldr	r2, [r7, #24]
 8007b86:	693b      	ldr	r3, [r7, #16]
 8007b88:	4313      	orrs	r3, r2
 8007b8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007b8c:	4a27      	ldr	r2, [pc, #156]	; (8007c2c <HAL_GPIO_Init+0x334>)
 8007b8e:	69bb      	ldr	r3, [r7, #24]
 8007b90:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007b92:	4b26      	ldr	r3, [pc, #152]	; (8007c2c <HAL_GPIO_Init+0x334>)
 8007b94:	689b      	ldr	r3, [r3, #8]
 8007b96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007b98:	693b      	ldr	r3, [r7, #16]
 8007b9a:	43db      	mvns	r3, r3
 8007b9c:	69ba      	ldr	r2, [r7, #24]
 8007b9e:	4013      	ands	r3, r2
 8007ba0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8007ba2:	683b      	ldr	r3, [r7, #0]
 8007ba4:	685b      	ldr	r3, [r3, #4]
 8007ba6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d003      	beq.n	8007bb6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8007bae:	69ba      	ldr	r2, [r7, #24]
 8007bb0:	693b      	ldr	r3, [r7, #16]
 8007bb2:	4313      	orrs	r3, r2
 8007bb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8007bb6:	4a1d      	ldr	r2, [pc, #116]	; (8007c2c <HAL_GPIO_Init+0x334>)
 8007bb8:	69bb      	ldr	r3, [r7, #24]
 8007bba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007bbc:	4b1b      	ldr	r3, [pc, #108]	; (8007c2c <HAL_GPIO_Init+0x334>)
 8007bbe:	68db      	ldr	r3, [r3, #12]
 8007bc0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007bc2:	693b      	ldr	r3, [r7, #16]
 8007bc4:	43db      	mvns	r3, r3
 8007bc6:	69ba      	ldr	r2, [r7, #24]
 8007bc8:	4013      	ands	r3, r2
 8007bca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007bcc:	683b      	ldr	r3, [r7, #0]
 8007bce:	685b      	ldr	r3, [r3, #4]
 8007bd0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d003      	beq.n	8007be0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8007bd8:	69ba      	ldr	r2, [r7, #24]
 8007bda:	693b      	ldr	r3, [r7, #16]
 8007bdc:	4313      	orrs	r3, r2
 8007bde:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007be0:	4a12      	ldr	r2, [pc, #72]	; (8007c2c <HAL_GPIO_Init+0x334>)
 8007be2:	69bb      	ldr	r3, [r7, #24]
 8007be4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007be6:	69fb      	ldr	r3, [r7, #28]
 8007be8:	3301      	adds	r3, #1
 8007bea:	61fb      	str	r3, [r7, #28]
 8007bec:	69fb      	ldr	r3, [r7, #28]
 8007bee:	2b0f      	cmp	r3, #15
 8007bf0:	f67f ae90 	bls.w	8007914 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8007bf4:	bf00      	nop
 8007bf6:	bf00      	nop
 8007bf8:	3724      	adds	r7, #36	; 0x24
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c00:	4770      	bx	lr
 8007c02:	bf00      	nop
 8007c04:	40023800 	.word	0x40023800
 8007c08:	40013800 	.word	0x40013800
 8007c0c:	40020000 	.word	0x40020000
 8007c10:	40020400 	.word	0x40020400
 8007c14:	40020800 	.word	0x40020800
 8007c18:	40020c00 	.word	0x40020c00
 8007c1c:	40021000 	.word	0x40021000
 8007c20:	40021400 	.word	0x40021400
 8007c24:	40021800 	.word	0x40021800
 8007c28:	40021c00 	.word	0x40021c00
 8007c2c:	40013c00 	.word	0x40013c00

08007c30 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007c30:	b480      	push	{r7}
 8007c32:	b085      	sub	sp, #20
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	6078      	str	r0, [r7, #4]
 8007c38:	460b      	mov	r3, r1
 8007c3a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	691a      	ldr	r2, [r3, #16]
 8007c40:	887b      	ldrh	r3, [r7, #2]
 8007c42:	4013      	ands	r3, r2
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d002      	beq.n	8007c4e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007c48:	2301      	movs	r3, #1
 8007c4a:	73fb      	strb	r3, [r7, #15]
 8007c4c:	e001      	b.n	8007c52 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007c4e:	2300      	movs	r3, #0
 8007c50:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007c52:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c54:	4618      	mov	r0, r3
 8007c56:	3714      	adds	r7, #20
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5e:	4770      	bx	lr

08007c60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007c60:	b480      	push	{r7}
 8007c62:	b083      	sub	sp, #12
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	6078      	str	r0, [r7, #4]
 8007c68:	460b      	mov	r3, r1
 8007c6a:	807b      	strh	r3, [r7, #2]
 8007c6c:	4613      	mov	r3, r2
 8007c6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007c70:	787b      	ldrb	r3, [r7, #1]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d003      	beq.n	8007c7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007c76:	887a      	ldrh	r2, [r7, #2]
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8007c7c:	e003      	b.n	8007c86 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8007c7e:	887b      	ldrh	r3, [r7, #2]
 8007c80:	041a      	lsls	r2, r3, #16
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	619a      	str	r2, [r3, #24]
}
 8007c86:	bf00      	nop
 8007c88:	370c      	adds	r7, #12
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c90:	4770      	bx	lr
	...

08007c94 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007c94:	b580      	push	{r7, lr}
 8007c96:	b082      	sub	sp, #8
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	4603      	mov	r3, r0
 8007c9c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8007c9e:	4b08      	ldr	r3, [pc, #32]	; (8007cc0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007ca0:	695a      	ldr	r2, [r3, #20]
 8007ca2:	88fb      	ldrh	r3, [r7, #6]
 8007ca4:	4013      	ands	r3, r2
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d006      	beq.n	8007cb8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007caa:	4a05      	ldr	r2, [pc, #20]	; (8007cc0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007cac:	88fb      	ldrh	r3, [r7, #6]
 8007cae:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007cb0:	88fb      	ldrh	r3, [r7, #6]
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	f7fb feda 	bl	8003a6c <HAL_GPIO_EXTI_Callback>
  }
}
 8007cb8:	bf00      	nop
 8007cba:	3708      	adds	r7, #8
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	bd80      	pop	{r7, pc}
 8007cc0:	40013c00 	.word	0x40013c00

08007cc4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b086      	sub	sp, #24
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d101      	bne.n	8007cd6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007cd2:	2301      	movs	r3, #1
 8007cd4:	e25b      	b.n	800818e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	f003 0301 	and.w	r3, r3, #1
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d075      	beq.n	8007dce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007ce2:	4ba3      	ldr	r3, [pc, #652]	; (8007f70 <HAL_RCC_OscConfig+0x2ac>)
 8007ce4:	689b      	ldr	r3, [r3, #8]
 8007ce6:	f003 030c 	and.w	r3, r3, #12
 8007cea:	2b04      	cmp	r3, #4
 8007cec:	d00c      	beq.n	8007d08 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007cee:	4ba0      	ldr	r3, [pc, #640]	; (8007f70 <HAL_RCC_OscConfig+0x2ac>)
 8007cf0:	689b      	ldr	r3, [r3, #8]
 8007cf2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007cf6:	2b08      	cmp	r3, #8
 8007cf8:	d112      	bne.n	8007d20 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007cfa:	4b9d      	ldr	r3, [pc, #628]	; (8007f70 <HAL_RCC_OscConfig+0x2ac>)
 8007cfc:	685b      	ldr	r3, [r3, #4]
 8007cfe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007d02:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007d06:	d10b      	bne.n	8007d20 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007d08:	4b99      	ldr	r3, [pc, #612]	; (8007f70 <HAL_RCC_OscConfig+0x2ac>)
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d05b      	beq.n	8007dcc <HAL_RCC_OscConfig+0x108>
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	685b      	ldr	r3, [r3, #4]
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d157      	bne.n	8007dcc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007d1c:	2301      	movs	r3, #1
 8007d1e:	e236      	b.n	800818e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	685b      	ldr	r3, [r3, #4]
 8007d24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007d28:	d106      	bne.n	8007d38 <HAL_RCC_OscConfig+0x74>
 8007d2a:	4b91      	ldr	r3, [pc, #580]	; (8007f70 <HAL_RCC_OscConfig+0x2ac>)
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	4a90      	ldr	r2, [pc, #576]	; (8007f70 <HAL_RCC_OscConfig+0x2ac>)
 8007d30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007d34:	6013      	str	r3, [r2, #0]
 8007d36:	e01d      	b.n	8007d74 <HAL_RCC_OscConfig+0xb0>
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	685b      	ldr	r3, [r3, #4]
 8007d3c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007d40:	d10c      	bne.n	8007d5c <HAL_RCC_OscConfig+0x98>
 8007d42:	4b8b      	ldr	r3, [pc, #556]	; (8007f70 <HAL_RCC_OscConfig+0x2ac>)
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	4a8a      	ldr	r2, [pc, #552]	; (8007f70 <HAL_RCC_OscConfig+0x2ac>)
 8007d48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007d4c:	6013      	str	r3, [r2, #0]
 8007d4e:	4b88      	ldr	r3, [pc, #544]	; (8007f70 <HAL_RCC_OscConfig+0x2ac>)
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	4a87      	ldr	r2, [pc, #540]	; (8007f70 <HAL_RCC_OscConfig+0x2ac>)
 8007d54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007d58:	6013      	str	r3, [r2, #0]
 8007d5a:	e00b      	b.n	8007d74 <HAL_RCC_OscConfig+0xb0>
 8007d5c:	4b84      	ldr	r3, [pc, #528]	; (8007f70 <HAL_RCC_OscConfig+0x2ac>)
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	4a83      	ldr	r2, [pc, #524]	; (8007f70 <HAL_RCC_OscConfig+0x2ac>)
 8007d62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007d66:	6013      	str	r3, [r2, #0]
 8007d68:	4b81      	ldr	r3, [pc, #516]	; (8007f70 <HAL_RCC_OscConfig+0x2ac>)
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	4a80      	ldr	r2, [pc, #512]	; (8007f70 <HAL_RCC_OscConfig+0x2ac>)
 8007d6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007d72:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	685b      	ldr	r3, [r3, #4]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d013      	beq.n	8007da4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007d7c:	f7fd fc8c 	bl	8005698 <HAL_GetTick>
 8007d80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007d82:	e008      	b.n	8007d96 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007d84:	f7fd fc88 	bl	8005698 <HAL_GetTick>
 8007d88:	4602      	mov	r2, r0
 8007d8a:	693b      	ldr	r3, [r7, #16]
 8007d8c:	1ad3      	subs	r3, r2, r3
 8007d8e:	2b64      	cmp	r3, #100	; 0x64
 8007d90:	d901      	bls.n	8007d96 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007d92:	2303      	movs	r3, #3
 8007d94:	e1fb      	b.n	800818e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007d96:	4b76      	ldr	r3, [pc, #472]	; (8007f70 <HAL_RCC_OscConfig+0x2ac>)
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d0f0      	beq.n	8007d84 <HAL_RCC_OscConfig+0xc0>
 8007da2:	e014      	b.n	8007dce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007da4:	f7fd fc78 	bl	8005698 <HAL_GetTick>
 8007da8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007daa:	e008      	b.n	8007dbe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007dac:	f7fd fc74 	bl	8005698 <HAL_GetTick>
 8007db0:	4602      	mov	r2, r0
 8007db2:	693b      	ldr	r3, [r7, #16]
 8007db4:	1ad3      	subs	r3, r2, r3
 8007db6:	2b64      	cmp	r3, #100	; 0x64
 8007db8:	d901      	bls.n	8007dbe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007dba:	2303      	movs	r3, #3
 8007dbc:	e1e7      	b.n	800818e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007dbe:	4b6c      	ldr	r3, [pc, #432]	; (8007f70 <HAL_RCC_OscConfig+0x2ac>)
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d1f0      	bne.n	8007dac <HAL_RCC_OscConfig+0xe8>
 8007dca:	e000      	b.n	8007dce <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007dcc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	f003 0302 	and.w	r3, r3, #2
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d063      	beq.n	8007ea2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007dda:	4b65      	ldr	r3, [pc, #404]	; (8007f70 <HAL_RCC_OscConfig+0x2ac>)
 8007ddc:	689b      	ldr	r3, [r3, #8]
 8007dde:	f003 030c 	and.w	r3, r3, #12
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d00b      	beq.n	8007dfe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007de6:	4b62      	ldr	r3, [pc, #392]	; (8007f70 <HAL_RCC_OscConfig+0x2ac>)
 8007de8:	689b      	ldr	r3, [r3, #8]
 8007dea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007dee:	2b08      	cmp	r3, #8
 8007df0:	d11c      	bne.n	8007e2c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007df2:	4b5f      	ldr	r3, [pc, #380]	; (8007f70 <HAL_RCC_OscConfig+0x2ac>)
 8007df4:	685b      	ldr	r3, [r3, #4]
 8007df6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d116      	bne.n	8007e2c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007dfe:	4b5c      	ldr	r3, [pc, #368]	; (8007f70 <HAL_RCC_OscConfig+0x2ac>)
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	f003 0302 	and.w	r3, r3, #2
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d005      	beq.n	8007e16 <HAL_RCC_OscConfig+0x152>
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	68db      	ldr	r3, [r3, #12]
 8007e0e:	2b01      	cmp	r3, #1
 8007e10:	d001      	beq.n	8007e16 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007e12:	2301      	movs	r3, #1
 8007e14:	e1bb      	b.n	800818e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007e16:	4b56      	ldr	r3, [pc, #344]	; (8007f70 <HAL_RCC_OscConfig+0x2ac>)
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	691b      	ldr	r3, [r3, #16]
 8007e22:	00db      	lsls	r3, r3, #3
 8007e24:	4952      	ldr	r1, [pc, #328]	; (8007f70 <HAL_RCC_OscConfig+0x2ac>)
 8007e26:	4313      	orrs	r3, r2
 8007e28:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007e2a:	e03a      	b.n	8007ea2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	68db      	ldr	r3, [r3, #12]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d020      	beq.n	8007e76 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007e34:	4b4f      	ldr	r3, [pc, #316]	; (8007f74 <HAL_RCC_OscConfig+0x2b0>)
 8007e36:	2201      	movs	r2, #1
 8007e38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e3a:	f7fd fc2d 	bl	8005698 <HAL_GetTick>
 8007e3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007e40:	e008      	b.n	8007e54 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007e42:	f7fd fc29 	bl	8005698 <HAL_GetTick>
 8007e46:	4602      	mov	r2, r0
 8007e48:	693b      	ldr	r3, [r7, #16]
 8007e4a:	1ad3      	subs	r3, r2, r3
 8007e4c:	2b02      	cmp	r3, #2
 8007e4e:	d901      	bls.n	8007e54 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007e50:	2303      	movs	r3, #3
 8007e52:	e19c      	b.n	800818e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007e54:	4b46      	ldr	r3, [pc, #280]	; (8007f70 <HAL_RCC_OscConfig+0x2ac>)
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	f003 0302 	and.w	r3, r3, #2
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d0f0      	beq.n	8007e42 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007e60:	4b43      	ldr	r3, [pc, #268]	; (8007f70 <HAL_RCC_OscConfig+0x2ac>)
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	691b      	ldr	r3, [r3, #16]
 8007e6c:	00db      	lsls	r3, r3, #3
 8007e6e:	4940      	ldr	r1, [pc, #256]	; (8007f70 <HAL_RCC_OscConfig+0x2ac>)
 8007e70:	4313      	orrs	r3, r2
 8007e72:	600b      	str	r3, [r1, #0]
 8007e74:	e015      	b.n	8007ea2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007e76:	4b3f      	ldr	r3, [pc, #252]	; (8007f74 <HAL_RCC_OscConfig+0x2b0>)
 8007e78:	2200      	movs	r2, #0
 8007e7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e7c:	f7fd fc0c 	bl	8005698 <HAL_GetTick>
 8007e80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007e82:	e008      	b.n	8007e96 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007e84:	f7fd fc08 	bl	8005698 <HAL_GetTick>
 8007e88:	4602      	mov	r2, r0
 8007e8a:	693b      	ldr	r3, [r7, #16]
 8007e8c:	1ad3      	subs	r3, r2, r3
 8007e8e:	2b02      	cmp	r3, #2
 8007e90:	d901      	bls.n	8007e96 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007e92:	2303      	movs	r3, #3
 8007e94:	e17b      	b.n	800818e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007e96:	4b36      	ldr	r3, [pc, #216]	; (8007f70 <HAL_RCC_OscConfig+0x2ac>)
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	f003 0302 	and.w	r3, r3, #2
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d1f0      	bne.n	8007e84 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	f003 0308 	and.w	r3, r3, #8
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d030      	beq.n	8007f10 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	695b      	ldr	r3, [r3, #20]
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d016      	beq.n	8007ee4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007eb6:	4b30      	ldr	r3, [pc, #192]	; (8007f78 <HAL_RCC_OscConfig+0x2b4>)
 8007eb8:	2201      	movs	r2, #1
 8007eba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007ebc:	f7fd fbec 	bl	8005698 <HAL_GetTick>
 8007ec0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007ec2:	e008      	b.n	8007ed6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007ec4:	f7fd fbe8 	bl	8005698 <HAL_GetTick>
 8007ec8:	4602      	mov	r2, r0
 8007eca:	693b      	ldr	r3, [r7, #16]
 8007ecc:	1ad3      	subs	r3, r2, r3
 8007ece:	2b02      	cmp	r3, #2
 8007ed0:	d901      	bls.n	8007ed6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007ed2:	2303      	movs	r3, #3
 8007ed4:	e15b      	b.n	800818e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007ed6:	4b26      	ldr	r3, [pc, #152]	; (8007f70 <HAL_RCC_OscConfig+0x2ac>)
 8007ed8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007eda:	f003 0302 	and.w	r3, r3, #2
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d0f0      	beq.n	8007ec4 <HAL_RCC_OscConfig+0x200>
 8007ee2:	e015      	b.n	8007f10 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007ee4:	4b24      	ldr	r3, [pc, #144]	; (8007f78 <HAL_RCC_OscConfig+0x2b4>)
 8007ee6:	2200      	movs	r2, #0
 8007ee8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007eea:	f7fd fbd5 	bl	8005698 <HAL_GetTick>
 8007eee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007ef0:	e008      	b.n	8007f04 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007ef2:	f7fd fbd1 	bl	8005698 <HAL_GetTick>
 8007ef6:	4602      	mov	r2, r0
 8007ef8:	693b      	ldr	r3, [r7, #16]
 8007efa:	1ad3      	subs	r3, r2, r3
 8007efc:	2b02      	cmp	r3, #2
 8007efe:	d901      	bls.n	8007f04 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8007f00:	2303      	movs	r3, #3
 8007f02:	e144      	b.n	800818e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007f04:	4b1a      	ldr	r3, [pc, #104]	; (8007f70 <HAL_RCC_OscConfig+0x2ac>)
 8007f06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007f08:	f003 0302 	and.w	r3, r3, #2
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d1f0      	bne.n	8007ef2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	f003 0304 	and.w	r3, r3, #4
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	f000 80a0 	beq.w	800805e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007f1e:	2300      	movs	r3, #0
 8007f20:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007f22:	4b13      	ldr	r3, [pc, #76]	; (8007f70 <HAL_RCC_OscConfig+0x2ac>)
 8007f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d10f      	bne.n	8007f4e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007f2e:	2300      	movs	r3, #0
 8007f30:	60bb      	str	r3, [r7, #8]
 8007f32:	4b0f      	ldr	r3, [pc, #60]	; (8007f70 <HAL_RCC_OscConfig+0x2ac>)
 8007f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f36:	4a0e      	ldr	r2, [pc, #56]	; (8007f70 <HAL_RCC_OscConfig+0x2ac>)
 8007f38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007f3c:	6413      	str	r3, [r2, #64]	; 0x40
 8007f3e:	4b0c      	ldr	r3, [pc, #48]	; (8007f70 <HAL_RCC_OscConfig+0x2ac>)
 8007f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007f46:	60bb      	str	r3, [r7, #8]
 8007f48:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007f4a:	2301      	movs	r3, #1
 8007f4c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007f4e:	4b0b      	ldr	r3, [pc, #44]	; (8007f7c <HAL_RCC_OscConfig+0x2b8>)
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d121      	bne.n	8007f9e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007f5a:	4b08      	ldr	r3, [pc, #32]	; (8007f7c <HAL_RCC_OscConfig+0x2b8>)
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	4a07      	ldr	r2, [pc, #28]	; (8007f7c <HAL_RCC_OscConfig+0x2b8>)
 8007f60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007f64:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007f66:	f7fd fb97 	bl	8005698 <HAL_GetTick>
 8007f6a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007f6c:	e011      	b.n	8007f92 <HAL_RCC_OscConfig+0x2ce>
 8007f6e:	bf00      	nop
 8007f70:	40023800 	.word	0x40023800
 8007f74:	42470000 	.word	0x42470000
 8007f78:	42470e80 	.word	0x42470e80
 8007f7c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007f80:	f7fd fb8a 	bl	8005698 <HAL_GetTick>
 8007f84:	4602      	mov	r2, r0
 8007f86:	693b      	ldr	r3, [r7, #16]
 8007f88:	1ad3      	subs	r3, r2, r3
 8007f8a:	2b02      	cmp	r3, #2
 8007f8c:	d901      	bls.n	8007f92 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8007f8e:	2303      	movs	r3, #3
 8007f90:	e0fd      	b.n	800818e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007f92:	4b81      	ldr	r3, [pc, #516]	; (8008198 <HAL_RCC_OscConfig+0x4d4>)
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d0f0      	beq.n	8007f80 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	689b      	ldr	r3, [r3, #8]
 8007fa2:	2b01      	cmp	r3, #1
 8007fa4:	d106      	bne.n	8007fb4 <HAL_RCC_OscConfig+0x2f0>
 8007fa6:	4b7d      	ldr	r3, [pc, #500]	; (800819c <HAL_RCC_OscConfig+0x4d8>)
 8007fa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007faa:	4a7c      	ldr	r2, [pc, #496]	; (800819c <HAL_RCC_OscConfig+0x4d8>)
 8007fac:	f043 0301 	orr.w	r3, r3, #1
 8007fb0:	6713      	str	r3, [r2, #112]	; 0x70
 8007fb2:	e01c      	b.n	8007fee <HAL_RCC_OscConfig+0x32a>
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	689b      	ldr	r3, [r3, #8]
 8007fb8:	2b05      	cmp	r3, #5
 8007fba:	d10c      	bne.n	8007fd6 <HAL_RCC_OscConfig+0x312>
 8007fbc:	4b77      	ldr	r3, [pc, #476]	; (800819c <HAL_RCC_OscConfig+0x4d8>)
 8007fbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fc0:	4a76      	ldr	r2, [pc, #472]	; (800819c <HAL_RCC_OscConfig+0x4d8>)
 8007fc2:	f043 0304 	orr.w	r3, r3, #4
 8007fc6:	6713      	str	r3, [r2, #112]	; 0x70
 8007fc8:	4b74      	ldr	r3, [pc, #464]	; (800819c <HAL_RCC_OscConfig+0x4d8>)
 8007fca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fcc:	4a73      	ldr	r2, [pc, #460]	; (800819c <HAL_RCC_OscConfig+0x4d8>)
 8007fce:	f043 0301 	orr.w	r3, r3, #1
 8007fd2:	6713      	str	r3, [r2, #112]	; 0x70
 8007fd4:	e00b      	b.n	8007fee <HAL_RCC_OscConfig+0x32a>
 8007fd6:	4b71      	ldr	r3, [pc, #452]	; (800819c <HAL_RCC_OscConfig+0x4d8>)
 8007fd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fda:	4a70      	ldr	r2, [pc, #448]	; (800819c <HAL_RCC_OscConfig+0x4d8>)
 8007fdc:	f023 0301 	bic.w	r3, r3, #1
 8007fe0:	6713      	str	r3, [r2, #112]	; 0x70
 8007fe2:	4b6e      	ldr	r3, [pc, #440]	; (800819c <HAL_RCC_OscConfig+0x4d8>)
 8007fe4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fe6:	4a6d      	ldr	r2, [pc, #436]	; (800819c <HAL_RCC_OscConfig+0x4d8>)
 8007fe8:	f023 0304 	bic.w	r3, r3, #4
 8007fec:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	689b      	ldr	r3, [r3, #8]
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d015      	beq.n	8008022 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007ff6:	f7fd fb4f 	bl	8005698 <HAL_GetTick>
 8007ffa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007ffc:	e00a      	b.n	8008014 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007ffe:	f7fd fb4b 	bl	8005698 <HAL_GetTick>
 8008002:	4602      	mov	r2, r0
 8008004:	693b      	ldr	r3, [r7, #16]
 8008006:	1ad3      	subs	r3, r2, r3
 8008008:	f241 3288 	movw	r2, #5000	; 0x1388
 800800c:	4293      	cmp	r3, r2
 800800e:	d901      	bls.n	8008014 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8008010:	2303      	movs	r3, #3
 8008012:	e0bc      	b.n	800818e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008014:	4b61      	ldr	r3, [pc, #388]	; (800819c <HAL_RCC_OscConfig+0x4d8>)
 8008016:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008018:	f003 0302 	and.w	r3, r3, #2
 800801c:	2b00      	cmp	r3, #0
 800801e:	d0ee      	beq.n	8007ffe <HAL_RCC_OscConfig+0x33a>
 8008020:	e014      	b.n	800804c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008022:	f7fd fb39 	bl	8005698 <HAL_GetTick>
 8008026:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008028:	e00a      	b.n	8008040 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800802a:	f7fd fb35 	bl	8005698 <HAL_GetTick>
 800802e:	4602      	mov	r2, r0
 8008030:	693b      	ldr	r3, [r7, #16]
 8008032:	1ad3      	subs	r3, r2, r3
 8008034:	f241 3288 	movw	r2, #5000	; 0x1388
 8008038:	4293      	cmp	r3, r2
 800803a:	d901      	bls.n	8008040 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800803c:	2303      	movs	r3, #3
 800803e:	e0a6      	b.n	800818e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008040:	4b56      	ldr	r3, [pc, #344]	; (800819c <HAL_RCC_OscConfig+0x4d8>)
 8008042:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008044:	f003 0302 	and.w	r3, r3, #2
 8008048:	2b00      	cmp	r3, #0
 800804a:	d1ee      	bne.n	800802a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800804c:	7dfb      	ldrb	r3, [r7, #23]
 800804e:	2b01      	cmp	r3, #1
 8008050:	d105      	bne.n	800805e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008052:	4b52      	ldr	r3, [pc, #328]	; (800819c <HAL_RCC_OscConfig+0x4d8>)
 8008054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008056:	4a51      	ldr	r2, [pc, #324]	; (800819c <HAL_RCC_OscConfig+0x4d8>)
 8008058:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800805c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	699b      	ldr	r3, [r3, #24]
 8008062:	2b00      	cmp	r3, #0
 8008064:	f000 8092 	beq.w	800818c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008068:	4b4c      	ldr	r3, [pc, #304]	; (800819c <HAL_RCC_OscConfig+0x4d8>)
 800806a:	689b      	ldr	r3, [r3, #8]
 800806c:	f003 030c 	and.w	r3, r3, #12
 8008070:	2b08      	cmp	r3, #8
 8008072:	d05c      	beq.n	800812e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	699b      	ldr	r3, [r3, #24]
 8008078:	2b02      	cmp	r3, #2
 800807a:	d141      	bne.n	8008100 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800807c:	4b48      	ldr	r3, [pc, #288]	; (80081a0 <HAL_RCC_OscConfig+0x4dc>)
 800807e:	2200      	movs	r2, #0
 8008080:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008082:	f7fd fb09 	bl	8005698 <HAL_GetTick>
 8008086:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008088:	e008      	b.n	800809c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800808a:	f7fd fb05 	bl	8005698 <HAL_GetTick>
 800808e:	4602      	mov	r2, r0
 8008090:	693b      	ldr	r3, [r7, #16]
 8008092:	1ad3      	subs	r3, r2, r3
 8008094:	2b02      	cmp	r3, #2
 8008096:	d901      	bls.n	800809c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8008098:	2303      	movs	r3, #3
 800809a:	e078      	b.n	800818e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800809c:	4b3f      	ldr	r3, [pc, #252]	; (800819c <HAL_RCC_OscConfig+0x4d8>)
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d1f0      	bne.n	800808a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	69da      	ldr	r2, [r3, #28]
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	6a1b      	ldr	r3, [r3, #32]
 80080b0:	431a      	orrs	r2, r3
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080b6:	019b      	lsls	r3, r3, #6
 80080b8:	431a      	orrs	r2, r3
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080be:	085b      	lsrs	r3, r3, #1
 80080c0:	3b01      	subs	r3, #1
 80080c2:	041b      	lsls	r3, r3, #16
 80080c4:	431a      	orrs	r2, r3
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080ca:	061b      	lsls	r3, r3, #24
 80080cc:	4933      	ldr	r1, [pc, #204]	; (800819c <HAL_RCC_OscConfig+0x4d8>)
 80080ce:	4313      	orrs	r3, r2
 80080d0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80080d2:	4b33      	ldr	r3, [pc, #204]	; (80081a0 <HAL_RCC_OscConfig+0x4dc>)
 80080d4:	2201      	movs	r2, #1
 80080d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80080d8:	f7fd fade 	bl	8005698 <HAL_GetTick>
 80080dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80080de:	e008      	b.n	80080f2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80080e0:	f7fd fada 	bl	8005698 <HAL_GetTick>
 80080e4:	4602      	mov	r2, r0
 80080e6:	693b      	ldr	r3, [r7, #16]
 80080e8:	1ad3      	subs	r3, r2, r3
 80080ea:	2b02      	cmp	r3, #2
 80080ec:	d901      	bls.n	80080f2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80080ee:	2303      	movs	r3, #3
 80080f0:	e04d      	b.n	800818e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80080f2:	4b2a      	ldr	r3, [pc, #168]	; (800819c <HAL_RCC_OscConfig+0x4d8>)
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d0f0      	beq.n	80080e0 <HAL_RCC_OscConfig+0x41c>
 80080fe:	e045      	b.n	800818c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008100:	4b27      	ldr	r3, [pc, #156]	; (80081a0 <HAL_RCC_OscConfig+0x4dc>)
 8008102:	2200      	movs	r2, #0
 8008104:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008106:	f7fd fac7 	bl	8005698 <HAL_GetTick>
 800810a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800810c:	e008      	b.n	8008120 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800810e:	f7fd fac3 	bl	8005698 <HAL_GetTick>
 8008112:	4602      	mov	r2, r0
 8008114:	693b      	ldr	r3, [r7, #16]
 8008116:	1ad3      	subs	r3, r2, r3
 8008118:	2b02      	cmp	r3, #2
 800811a:	d901      	bls.n	8008120 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800811c:	2303      	movs	r3, #3
 800811e:	e036      	b.n	800818e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008120:	4b1e      	ldr	r3, [pc, #120]	; (800819c <HAL_RCC_OscConfig+0x4d8>)
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008128:	2b00      	cmp	r3, #0
 800812a:	d1f0      	bne.n	800810e <HAL_RCC_OscConfig+0x44a>
 800812c:	e02e      	b.n	800818c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	699b      	ldr	r3, [r3, #24]
 8008132:	2b01      	cmp	r3, #1
 8008134:	d101      	bne.n	800813a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8008136:	2301      	movs	r3, #1
 8008138:	e029      	b.n	800818e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800813a:	4b18      	ldr	r3, [pc, #96]	; (800819c <HAL_RCC_OscConfig+0x4d8>)
 800813c:	685b      	ldr	r3, [r3, #4]
 800813e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	69db      	ldr	r3, [r3, #28]
 800814a:	429a      	cmp	r2, r3
 800814c:	d11c      	bne.n	8008188 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008158:	429a      	cmp	r2, r3
 800815a:	d115      	bne.n	8008188 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800815c:	68fa      	ldr	r2, [r7, #12]
 800815e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008162:	4013      	ands	r3, r2
 8008164:	687a      	ldr	r2, [r7, #4]
 8008166:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008168:	4293      	cmp	r3, r2
 800816a:	d10d      	bne.n	8008188 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8008176:	429a      	cmp	r2, r3
 8008178:	d106      	bne.n	8008188 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8008184:	429a      	cmp	r2, r3
 8008186:	d001      	beq.n	800818c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8008188:	2301      	movs	r3, #1
 800818a:	e000      	b.n	800818e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800818c:	2300      	movs	r3, #0
}
 800818e:	4618      	mov	r0, r3
 8008190:	3718      	adds	r7, #24
 8008192:	46bd      	mov	sp, r7
 8008194:	bd80      	pop	{r7, pc}
 8008196:	bf00      	nop
 8008198:	40007000 	.word	0x40007000
 800819c:	40023800 	.word	0x40023800
 80081a0:	42470060 	.word	0x42470060

080081a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80081a4:	b580      	push	{r7, lr}
 80081a6:	b084      	sub	sp, #16
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	6078      	str	r0, [r7, #4]
 80081ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d101      	bne.n	80081b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80081b4:	2301      	movs	r3, #1
 80081b6:	e0cc      	b.n	8008352 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80081b8:	4b68      	ldr	r3, [pc, #416]	; (800835c <HAL_RCC_ClockConfig+0x1b8>)
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	f003 030f 	and.w	r3, r3, #15
 80081c0:	683a      	ldr	r2, [r7, #0]
 80081c2:	429a      	cmp	r2, r3
 80081c4:	d90c      	bls.n	80081e0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80081c6:	4b65      	ldr	r3, [pc, #404]	; (800835c <HAL_RCC_ClockConfig+0x1b8>)
 80081c8:	683a      	ldr	r2, [r7, #0]
 80081ca:	b2d2      	uxtb	r2, r2
 80081cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80081ce:	4b63      	ldr	r3, [pc, #396]	; (800835c <HAL_RCC_ClockConfig+0x1b8>)
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	f003 030f 	and.w	r3, r3, #15
 80081d6:	683a      	ldr	r2, [r7, #0]
 80081d8:	429a      	cmp	r2, r3
 80081da:	d001      	beq.n	80081e0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80081dc:	2301      	movs	r3, #1
 80081de:	e0b8      	b.n	8008352 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	f003 0302 	and.w	r3, r3, #2
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d020      	beq.n	800822e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	f003 0304 	and.w	r3, r3, #4
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d005      	beq.n	8008204 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80081f8:	4b59      	ldr	r3, [pc, #356]	; (8008360 <HAL_RCC_ClockConfig+0x1bc>)
 80081fa:	689b      	ldr	r3, [r3, #8]
 80081fc:	4a58      	ldr	r2, [pc, #352]	; (8008360 <HAL_RCC_ClockConfig+0x1bc>)
 80081fe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008202:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	f003 0308 	and.w	r3, r3, #8
 800820c:	2b00      	cmp	r3, #0
 800820e:	d005      	beq.n	800821c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008210:	4b53      	ldr	r3, [pc, #332]	; (8008360 <HAL_RCC_ClockConfig+0x1bc>)
 8008212:	689b      	ldr	r3, [r3, #8]
 8008214:	4a52      	ldr	r2, [pc, #328]	; (8008360 <HAL_RCC_ClockConfig+0x1bc>)
 8008216:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800821a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800821c:	4b50      	ldr	r3, [pc, #320]	; (8008360 <HAL_RCC_ClockConfig+0x1bc>)
 800821e:	689b      	ldr	r3, [r3, #8]
 8008220:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	689b      	ldr	r3, [r3, #8]
 8008228:	494d      	ldr	r1, [pc, #308]	; (8008360 <HAL_RCC_ClockConfig+0x1bc>)
 800822a:	4313      	orrs	r3, r2
 800822c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	f003 0301 	and.w	r3, r3, #1
 8008236:	2b00      	cmp	r3, #0
 8008238:	d044      	beq.n	80082c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	685b      	ldr	r3, [r3, #4]
 800823e:	2b01      	cmp	r3, #1
 8008240:	d107      	bne.n	8008252 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008242:	4b47      	ldr	r3, [pc, #284]	; (8008360 <HAL_RCC_ClockConfig+0x1bc>)
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800824a:	2b00      	cmp	r3, #0
 800824c:	d119      	bne.n	8008282 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800824e:	2301      	movs	r3, #1
 8008250:	e07f      	b.n	8008352 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	685b      	ldr	r3, [r3, #4]
 8008256:	2b02      	cmp	r3, #2
 8008258:	d003      	beq.n	8008262 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800825e:	2b03      	cmp	r3, #3
 8008260:	d107      	bne.n	8008272 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008262:	4b3f      	ldr	r3, [pc, #252]	; (8008360 <HAL_RCC_ClockConfig+0x1bc>)
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800826a:	2b00      	cmp	r3, #0
 800826c:	d109      	bne.n	8008282 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800826e:	2301      	movs	r3, #1
 8008270:	e06f      	b.n	8008352 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008272:	4b3b      	ldr	r3, [pc, #236]	; (8008360 <HAL_RCC_ClockConfig+0x1bc>)
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	f003 0302 	and.w	r3, r3, #2
 800827a:	2b00      	cmp	r3, #0
 800827c:	d101      	bne.n	8008282 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800827e:	2301      	movs	r3, #1
 8008280:	e067      	b.n	8008352 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008282:	4b37      	ldr	r3, [pc, #220]	; (8008360 <HAL_RCC_ClockConfig+0x1bc>)
 8008284:	689b      	ldr	r3, [r3, #8]
 8008286:	f023 0203 	bic.w	r2, r3, #3
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	685b      	ldr	r3, [r3, #4]
 800828e:	4934      	ldr	r1, [pc, #208]	; (8008360 <HAL_RCC_ClockConfig+0x1bc>)
 8008290:	4313      	orrs	r3, r2
 8008292:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008294:	f7fd fa00 	bl	8005698 <HAL_GetTick>
 8008298:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800829a:	e00a      	b.n	80082b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800829c:	f7fd f9fc 	bl	8005698 <HAL_GetTick>
 80082a0:	4602      	mov	r2, r0
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	1ad3      	subs	r3, r2, r3
 80082a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80082aa:	4293      	cmp	r3, r2
 80082ac:	d901      	bls.n	80082b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80082ae:	2303      	movs	r3, #3
 80082b0:	e04f      	b.n	8008352 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80082b2:	4b2b      	ldr	r3, [pc, #172]	; (8008360 <HAL_RCC_ClockConfig+0x1bc>)
 80082b4:	689b      	ldr	r3, [r3, #8]
 80082b6:	f003 020c 	and.w	r2, r3, #12
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	685b      	ldr	r3, [r3, #4]
 80082be:	009b      	lsls	r3, r3, #2
 80082c0:	429a      	cmp	r2, r3
 80082c2:	d1eb      	bne.n	800829c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80082c4:	4b25      	ldr	r3, [pc, #148]	; (800835c <HAL_RCC_ClockConfig+0x1b8>)
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	f003 030f 	and.w	r3, r3, #15
 80082cc:	683a      	ldr	r2, [r7, #0]
 80082ce:	429a      	cmp	r2, r3
 80082d0:	d20c      	bcs.n	80082ec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80082d2:	4b22      	ldr	r3, [pc, #136]	; (800835c <HAL_RCC_ClockConfig+0x1b8>)
 80082d4:	683a      	ldr	r2, [r7, #0]
 80082d6:	b2d2      	uxtb	r2, r2
 80082d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80082da:	4b20      	ldr	r3, [pc, #128]	; (800835c <HAL_RCC_ClockConfig+0x1b8>)
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	f003 030f 	and.w	r3, r3, #15
 80082e2:	683a      	ldr	r2, [r7, #0]
 80082e4:	429a      	cmp	r2, r3
 80082e6:	d001      	beq.n	80082ec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80082e8:	2301      	movs	r3, #1
 80082ea:	e032      	b.n	8008352 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	f003 0304 	and.w	r3, r3, #4
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d008      	beq.n	800830a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80082f8:	4b19      	ldr	r3, [pc, #100]	; (8008360 <HAL_RCC_ClockConfig+0x1bc>)
 80082fa:	689b      	ldr	r3, [r3, #8]
 80082fc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	68db      	ldr	r3, [r3, #12]
 8008304:	4916      	ldr	r1, [pc, #88]	; (8008360 <HAL_RCC_ClockConfig+0x1bc>)
 8008306:	4313      	orrs	r3, r2
 8008308:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	f003 0308 	and.w	r3, r3, #8
 8008312:	2b00      	cmp	r3, #0
 8008314:	d009      	beq.n	800832a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008316:	4b12      	ldr	r3, [pc, #72]	; (8008360 <HAL_RCC_ClockConfig+0x1bc>)
 8008318:	689b      	ldr	r3, [r3, #8]
 800831a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	691b      	ldr	r3, [r3, #16]
 8008322:	00db      	lsls	r3, r3, #3
 8008324:	490e      	ldr	r1, [pc, #56]	; (8008360 <HAL_RCC_ClockConfig+0x1bc>)
 8008326:	4313      	orrs	r3, r2
 8008328:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800832a:	f000 f821 	bl	8008370 <HAL_RCC_GetSysClockFreq>
 800832e:	4602      	mov	r2, r0
 8008330:	4b0b      	ldr	r3, [pc, #44]	; (8008360 <HAL_RCC_ClockConfig+0x1bc>)
 8008332:	689b      	ldr	r3, [r3, #8]
 8008334:	091b      	lsrs	r3, r3, #4
 8008336:	f003 030f 	and.w	r3, r3, #15
 800833a:	490a      	ldr	r1, [pc, #40]	; (8008364 <HAL_RCC_ClockConfig+0x1c0>)
 800833c:	5ccb      	ldrb	r3, [r1, r3]
 800833e:	fa22 f303 	lsr.w	r3, r2, r3
 8008342:	4a09      	ldr	r2, [pc, #36]	; (8008368 <HAL_RCC_ClockConfig+0x1c4>)
 8008344:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008346:	4b09      	ldr	r3, [pc, #36]	; (800836c <HAL_RCC_ClockConfig+0x1c8>)
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	4618      	mov	r0, r3
 800834c:	f7fc face 	bl	80048ec <HAL_InitTick>

  return HAL_OK;
 8008350:	2300      	movs	r3, #0
}
 8008352:	4618      	mov	r0, r3
 8008354:	3710      	adds	r7, #16
 8008356:	46bd      	mov	sp, r7
 8008358:	bd80      	pop	{r7, pc}
 800835a:	bf00      	nop
 800835c:	40023c00 	.word	0x40023c00
 8008360:	40023800 	.word	0x40023800
 8008364:	0801f9c8 	.word	0x0801f9c8
 8008368:	2000005c 	.word	0x2000005c
 800836c:	20000060 	.word	0x20000060

08008370 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008370:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8008374:	b084      	sub	sp, #16
 8008376:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008378:	2300      	movs	r3, #0
 800837a:	607b      	str	r3, [r7, #4]
 800837c:	2300      	movs	r3, #0
 800837e:	60fb      	str	r3, [r7, #12]
 8008380:	2300      	movs	r3, #0
 8008382:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8008384:	2300      	movs	r3, #0
 8008386:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008388:	4b67      	ldr	r3, [pc, #412]	; (8008528 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800838a:	689b      	ldr	r3, [r3, #8]
 800838c:	f003 030c 	and.w	r3, r3, #12
 8008390:	2b08      	cmp	r3, #8
 8008392:	d00d      	beq.n	80083b0 <HAL_RCC_GetSysClockFreq+0x40>
 8008394:	2b08      	cmp	r3, #8
 8008396:	f200 80bd 	bhi.w	8008514 <HAL_RCC_GetSysClockFreq+0x1a4>
 800839a:	2b00      	cmp	r3, #0
 800839c:	d002      	beq.n	80083a4 <HAL_RCC_GetSysClockFreq+0x34>
 800839e:	2b04      	cmp	r3, #4
 80083a0:	d003      	beq.n	80083aa <HAL_RCC_GetSysClockFreq+0x3a>
 80083a2:	e0b7      	b.n	8008514 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80083a4:	4b61      	ldr	r3, [pc, #388]	; (800852c <HAL_RCC_GetSysClockFreq+0x1bc>)
 80083a6:	60bb      	str	r3, [r7, #8]
       break;
 80083a8:	e0b7      	b.n	800851a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80083aa:	4b61      	ldr	r3, [pc, #388]	; (8008530 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80083ac:	60bb      	str	r3, [r7, #8]
      break;
 80083ae:	e0b4      	b.n	800851a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80083b0:	4b5d      	ldr	r3, [pc, #372]	; (8008528 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80083b2:	685b      	ldr	r3, [r3, #4]
 80083b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80083b8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80083ba:	4b5b      	ldr	r3, [pc, #364]	; (8008528 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80083bc:	685b      	ldr	r3, [r3, #4]
 80083be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d04d      	beq.n	8008462 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80083c6:	4b58      	ldr	r3, [pc, #352]	; (8008528 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80083c8:	685b      	ldr	r3, [r3, #4]
 80083ca:	099b      	lsrs	r3, r3, #6
 80083cc:	461a      	mov	r2, r3
 80083ce:	f04f 0300 	mov.w	r3, #0
 80083d2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80083d6:	f04f 0100 	mov.w	r1, #0
 80083da:	ea02 0800 	and.w	r8, r2, r0
 80083de:	ea03 0901 	and.w	r9, r3, r1
 80083e2:	4640      	mov	r0, r8
 80083e4:	4649      	mov	r1, r9
 80083e6:	f04f 0200 	mov.w	r2, #0
 80083ea:	f04f 0300 	mov.w	r3, #0
 80083ee:	014b      	lsls	r3, r1, #5
 80083f0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80083f4:	0142      	lsls	r2, r0, #5
 80083f6:	4610      	mov	r0, r2
 80083f8:	4619      	mov	r1, r3
 80083fa:	ebb0 0008 	subs.w	r0, r0, r8
 80083fe:	eb61 0109 	sbc.w	r1, r1, r9
 8008402:	f04f 0200 	mov.w	r2, #0
 8008406:	f04f 0300 	mov.w	r3, #0
 800840a:	018b      	lsls	r3, r1, #6
 800840c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8008410:	0182      	lsls	r2, r0, #6
 8008412:	1a12      	subs	r2, r2, r0
 8008414:	eb63 0301 	sbc.w	r3, r3, r1
 8008418:	f04f 0000 	mov.w	r0, #0
 800841c:	f04f 0100 	mov.w	r1, #0
 8008420:	00d9      	lsls	r1, r3, #3
 8008422:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008426:	00d0      	lsls	r0, r2, #3
 8008428:	4602      	mov	r2, r0
 800842a:	460b      	mov	r3, r1
 800842c:	eb12 0208 	adds.w	r2, r2, r8
 8008430:	eb43 0309 	adc.w	r3, r3, r9
 8008434:	f04f 0000 	mov.w	r0, #0
 8008438:	f04f 0100 	mov.w	r1, #0
 800843c:	0259      	lsls	r1, r3, #9
 800843e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8008442:	0250      	lsls	r0, r2, #9
 8008444:	4602      	mov	r2, r0
 8008446:	460b      	mov	r3, r1
 8008448:	4610      	mov	r0, r2
 800844a:	4619      	mov	r1, r3
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	461a      	mov	r2, r3
 8008450:	f04f 0300 	mov.w	r3, #0
 8008454:	f7f8 fbd8 	bl	8000c08 <__aeabi_uldivmod>
 8008458:	4602      	mov	r2, r0
 800845a:	460b      	mov	r3, r1
 800845c:	4613      	mov	r3, r2
 800845e:	60fb      	str	r3, [r7, #12]
 8008460:	e04a      	b.n	80084f8 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008462:	4b31      	ldr	r3, [pc, #196]	; (8008528 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008464:	685b      	ldr	r3, [r3, #4]
 8008466:	099b      	lsrs	r3, r3, #6
 8008468:	461a      	mov	r2, r3
 800846a:	f04f 0300 	mov.w	r3, #0
 800846e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8008472:	f04f 0100 	mov.w	r1, #0
 8008476:	ea02 0400 	and.w	r4, r2, r0
 800847a:	ea03 0501 	and.w	r5, r3, r1
 800847e:	4620      	mov	r0, r4
 8008480:	4629      	mov	r1, r5
 8008482:	f04f 0200 	mov.w	r2, #0
 8008486:	f04f 0300 	mov.w	r3, #0
 800848a:	014b      	lsls	r3, r1, #5
 800848c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8008490:	0142      	lsls	r2, r0, #5
 8008492:	4610      	mov	r0, r2
 8008494:	4619      	mov	r1, r3
 8008496:	1b00      	subs	r0, r0, r4
 8008498:	eb61 0105 	sbc.w	r1, r1, r5
 800849c:	f04f 0200 	mov.w	r2, #0
 80084a0:	f04f 0300 	mov.w	r3, #0
 80084a4:	018b      	lsls	r3, r1, #6
 80084a6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80084aa:	0182      	lsls	r2, r0, #6
 80084ac:	1a12      	subs	r2, r2, r0
 80084ae:	eb63 0301 	sbc.w	r3, r3, r1
 80084b2:	f04f 0000 	mov.w	r0, #0
 80084b6:	f04f 0100 	mov.w	r1, #0
 80084ba:	00d9      	lsls	r1, r3, #3
 80084bc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80084c0:	00d0      	lsls	r0, r2, #3
 80084c2:	4602      	mov	r2, r0
 80084c4:	460b      	mov	r3, r1
 80084c6:	1912      	adds	r2, r2, r4
 80084c8:	eb45 0303 	adc.w	r3, r5, r3
 80084cc:	f04f 0000 	mov.w	r0, #0
 80084d0:	f04f 0100 	mov.w	r1, #0
 80084d4:	0299      	lsls	r1, r3, #10
 80084d6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80084da:	0290      	lsls	r0, r2, #10
 80084dc:	4602      	mov	r2, r0
 80084de:	460b      	mov	r3, r1
 80084e0:	4610      	mov	r0, r2
 80084e2:	4619      	mov	r1, r3
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	461a      	mov	r2, r3
 80084e8:	f04f 0300 	mov.w	r3, #0
 80084ec:	f7f8 fb8c 	bl	8000c08 <__aeabi_uldivmod>
 80084f0:	4602      	mov	r2, r0
 80084f2:	460b      	mov	r3, r1
 80084f4:	4613      	mov	r3, r2
 80084f6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80084f8:	4b0b      	ldr	r3, [pc, #44]	; (8008528 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80084fa:	685b      	ldr	r3, [r3, #4]
 80084fc:	0c1b      	lsrs	r3, r3, #16
 80084fe:	f003 0303 	and.w	r3, r3, #3
 8008502:	3301      	adds	r3, #1
 8008504:	005b      	lsls	r3, r3, #1
 8008506:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8008508:	68fa      	ldr	r2, [r7, #12]
 800850a:	683b      	ldr	r3, [r7, #0]
 800850c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008510:	60bb      	str	r3, [r7, #8]
      break;
 8008512:	e002      	b.n	800851a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008514:	4b05      	ldr	r3, [pc, #20]	; (800852c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8008516:	60bb      	str	r3, [r7, #8]
      break;
 8008518:	bf00      	nop
    }
  }
  return sysclockfreq;
 800851a:	68bb      	ldr	r3, [r7, #8]
}
 800851c:	4618      	mov	r0, r3
 800851e:	3710      	adds	r7, #16
 8008520:	46bd      	mov	sp, r7
 8008522:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8008526:	bf00      	nop
 8008528:	40023800 	.word	0x40023800
 800852c:	00f42400 	.word	0x00f42400
 8008530:	007a1200 	.word	0x007a1200

08008534 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008534:	b480      	push	{r7}
 8008536:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008538:	4b03      	ldr	r3, [pc, #12]	; (8008548 <HAL_RCC_GetHCLKFreq+0x14>)
 800853a:	681b      	ldr	r3, [r3, #0]
}
 800853c:	4618      	mov	r0, r3
 800853e:	46bd      	mov	sp, r7
 8008540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008544:	4770      	bx	lr
 8008546:	bf00      	nop
 8008548:	2000005c 	.word	0x2000005c

0800854c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800854c:	b580      	push	{r7, lr}
 800854e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008550:	f7ff fff0 	bl	8008534 <HAL_RCC_GetHCLKFreq>
 8008554:	4602      	mov	r2, r0
 8008556:	4b05      	ldr	r3, [pc, #20]	; (800856c <HAL_RCC_GetPCLK1Freq+0x20>)
 8008558:	689b      	ldr	r3, [r3, #8]
 800855a:	0a9b      	lsrs	r3, r3, #10
 800855c:	f003 0307 	and.w	r3, r3, #7
 8008560:	4903      	ldr	r1, [pc, #12]	; (8008570 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008562:	5ccb      	ldrb	r3, [r1, r3]
 8008564:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008568:	4618      	mov	r0, r3
 800856a:	bd80      	pop	{r7, pc}
 800856c:	40023800 	.word	0x40023800
 8008570:	0801f9d8 	.word	0x0801f9d8

08008574 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008574:	b580      	push	{r7, lr}
 8008576:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008578:	f7ff ffdc 	bl	8008534 <HAL_RCC_GetHCLKFreq>
 800857c:	4602      	mov	r2, r0
 800857e:	4b05      	ldr	r3, [pc, #20]	; (8008594 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008580:	689b      	ldr	r3, [r3, #8]
 8008582:	0b5b      	lsrs	r3, r3, #13
 8008584:	f003 0307 	and.w	r3, r3, #7
 8008588:	4903      	ldr	r1, [pc, #12]	; (8008598 <HAL_RCC_GetPCLK2Freq+0x24>)
 800858a:	5ccb      	ldrb	r3, [r1, r3]
 800858c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008590:	4618      	mov	r0, r3
 8008592:	bd80      	pop	{r7, pc}
 8008594:	40023800 	.word	0x40023800
 8008598:	0801f9d8 	.word	0x0801f9d8

0800859c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800859c:	b480      	push	{r7}
 800859e:	b083      	sub	sp, #12
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	6078      	str	r0, [r7, #4]
 80085a4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	220f      	movs	r2, #15
 80085aa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80085ac:	4b12      	ldr	r3, [pc, #72]	; (80085f8 <HAL_RCC_GetClockConfig+0x5c>)
 80085ae:	689b      	ldr	r3, [r3, #8]
 80085b0:	f003 0203 	and.w	r2, r3, #3
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80085b8:	4b0f      	ldr	r3, [pc, #60]	; (80085f8 <HAL_RCC_GetClockConfig+0x5c>)
 80085ba:	689b      	ldr	r3, [r3, #8]
 80085bc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80085c4:	4b0c      	ldr	r3, [pc, #48]	; (80085f8 <HAL_RCC_GetClockConfig+0x5c>)
 80085c6:	689b      	ldr	r3, [r3, #8]
 80085c8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80085d0:	4b09      	ldr	r3, [pc, #36]	; (80085f8 <HAL_RCC_GetClockConfig+0x5c>)
 80085d2:	689b      	ldr	r3, [r3, #8]
 80085d4:	08db      	lsrs	r3, r3, #3
 80085d6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80085de:	4b07      	ldr	r3, [pc, #28]	; (80085fc <HAL_RCC_GetClockConfig+0x60>)
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	f003 020f 	and.w	r2, r3, #15
 80085e6:	683b      	ldr	r3, [r7, #0]
 80085e8:	601a      	str	r2, [r3, #0]
}
 80085ea:	bf00      	nop
 80085ec:	370c      	adds	r7, #12
 80085ee:	46bd      	mov	sp, r7
 80085f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f4:	4770      	bx	lr
 80085f6:	bf00      	nop
 80085f8:	40023800 	.word	0x40023800
 80085fc:	40023c00 	.word	0x40023c00

08008600 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008600:	b580      	push	{r7, lr}
 8008602:	b086      	sub	sp, #24
 8008604:	af00      	add	r7, sp, #0
 8008606:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008608:	2300      	movs	r3, #0
 800860a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800860c:	2300      	movs	r3, #0
 800860e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	f003 0301 	and.w	r3, r3, #1
 8008618:	2b00      	cmp	r3, #0
 800861a:	d105      	bne.n	8008628 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8008624:	2b00      	cmp	r3, #0
 8008626:	d035      	beq.n	8008694 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8008628:	4b62      	ldr	r3, [pc, #392]	; (80087b4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800862a:	2200      	movs	r2, #0
 800862c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800862e:	f7fd f833 	bl	8005698 <HAL_GetTick>
 8008632:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008634:	e008      	b.n	8008648 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8008636:	f7fd f82f 	bl	8005698 <HAL_GetTick>
 800863a:	4602      	mov	r2, r0
 800863c:	697b      	ldr	r3, [r7, #20]
 800863e:	1ad3      	subs	r3, r2, r3
 8008640:	2b02      	cmp	r3, #2
 8008642:	d901      	bls.n	8008648 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008644:	2303      	movs	r3, #3
 8008646:	e0b0      	b.n	80087aa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008648:	4b5b      	ldr	r3, [pc, #364]	; (80087b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008650:	2b00      	cmp	r3, #0
 8008652:	d1f0      	bne.n	8008636 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	685b      	ldr	r3, [r3, #4]
 8008658:	019a      	lsls	r2, r3, #6
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	689b      	ldr	r3, [r3, #8]
 800865e:	071b      	lsls	r3, r3, #28
 8008660:	4955      	ldr	r1, [pc, #340]	; (80087b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008662:	4313      	orrs	r3, r2
 8008664:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8008668:	4b52      	ldr	r3, [pc, #328]	; (80087b4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800866a:	2201      	movs	r2, #1
 800866c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800866e:	f7fd f813 	bl	8005698 <HAL_GetTick>
 8008672:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008674:	e008      	b.n	8008688 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8008676:	f7fd f80f 	bl	8005698 <HAL_GetTick>
 800867a:	4602      	mov	r2, r0
 800867c:	697b      	ldr	r3, [r7, #20]
 800867e:	1ad3      	subs	r3, r2, r3
 8008680:	2b02      	cmp	r3, #2
 8008682:	d901      	bls.n	8008688 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008684:	2303      	movs	r3, #3
 8008686:	e090      	b.n	80087aa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008688:	4b4b      	ldr	r3, [pc, #300]	; (80087b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008690:	2b00      	cmp	r3, #0
 8008692:	d0f0      	beq.n	8008676 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	f003 0302 	and.w	r3, r3, #2
 800869c:	2b00      	cmp	r3, #0
 800869e:	f000 8083 	beq.w	80087a8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80086a2:	2300      	movs	r3, #0
 80086a4:	60fb      	str	r3, [r7, #12]
 80086a6:	4b44      	ldr	r3, [pc, #272]	; (80087b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80086a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086aa:	4a43      	ldr	r2, [pc, #268]	; (80087b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80086ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80086b0:	6413      	str	r3, [r2, #64]	; 0x40
 80086b2:	4b41      	ldr	r3, [pc, #260]	; (80087b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80086b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80086ba:	60fb      	str	r3, [r7, #12]
 80086bc:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80086be:	4b3f      	ldr	r3, [pc, #252]	; (80087bc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	4a3e      	ldr	r2, [pc, #248]	; (80087bc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80086c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80086c8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80086ca:	f7fc ffe5 	bl	8005698 <HAL_GetTick>
 80086ce:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80086d0:	e008      	b.n	80086e4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80086d2:	f7fc ffe1 	bl	8005698 <HAL_GetTick>
 80086d6:	4602      	mov	r2, r0
 80086d8:	697b      	ldr	r3, [r7, #20]
 80086da:	1ad3      	subs	r3, r2, r3
 80086dc:	2b02      	cmp	r3, #2
 80086de:	d901      	bls.n	80086e4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80086e0:	2303      	movs	r3, #3
 80086e2:	e062      	b.n	80087aa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80086e4:	4b35      	ldr	r3, [pc, #212]	; (80087bc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d0f0      	beq.n	80086d2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80086f0:	4b31      	ldr	r3, [pc, #196]	; (80087b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80086f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80086f8:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80086fa:	693b      	ldr	r3, [r7, #16]
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d02f      	beq.n	8008760 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	68db      	ldr	r3, [r3, #12]
 8008704:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008708:	693a      	ldr	r2, [r7, #16]
 800870a:	429a      	cmp	r2, r3
 800870c:	d028      	beq.n	8008760 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800870e:	4b2a      	ldr	r3, [pc, #168]	; (80087b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008710:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008712:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008716:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008718:	4b29      	ldr	r3, [pc, #164]	; (80087c0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800871a:	2201      	movs	r2, #1
 800871c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800871e:	4b28      	ldr	r3, [pc, #160]	; (80087c0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8008720:	2200      	movs	r2, #0
 8008722:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8008724:	4a24      	ldr	r2, [pc, #144]	; (80087b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008726:	693b      	ldr	r3, [r7, #16]
 8008728:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800872a:	4b23      	ldr	r3, [pc, #140]	; (80087b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800872c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800872e:	f003 0301 	and.w	r3, r3, #1
 8008732:	2b01      	cmp	r3, #1
 8008734:	d114      	bne.n	8008760 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8008736:	f7fc ffaf 	bl	8005698 <HAL_GetTick>
 800873a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800873c:	e00a      	b.n	8008754 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800873e:	f7fc ffab 	bl	8005698 <HAL_GetTick>
 8008742:	4602      	mov	r2, r0
 8008744:	697b      	ldr	r3, [r7, #20]
 8008746:	1ad3      	subs	r3, r2, r3
 8008748:	f241 3288 	movw	r2, #5000	; 0x1388
 800874c:	4293      	cmp	r3, r2
 800874e:	d901      	bls.n	8008754 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8008750:	2303      	movs	r3, #3
 8008752:	e02a      	b.n	80087aa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008754:	4b18      	ldr	r3, [pc, #96]	; (80087b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008756:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008758:	f003 0302 	and.w	r3, r3, #2
 800875c:	2b00      	cmp	r3, #0
 800875e:	d0ee      	beq.n	800873e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	68db      	ldr	r3, [r3, #12]
 8008764:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008768:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800876c:	d10d      	bne.n	800878a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800876e:	4b12      	ldr	r3, [pc, #72]	; (80087b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008770:	689b      	ldr	r3, [r3, #8]
 8008772:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	68db      	ldr	r3, [r3, #12]
 800877a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800877e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008782:	490d      	ldr	r1, [pc, #52]	; (80087b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008784:	4313      	orrs	r3, r2
 8008786:	608b      	str	r3, [r1, #8]
 8008788:	e005      	b.n	8008796 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800878a:	4b0b      	ldr	r3, [pc, #44]	; (80087b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800878c:	689b      	ldr	r3, [r3, #8]
 800878e:	4a0a      	ldr	r2, [pc, #40]	; (80087b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008790:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8008794:	6093      	str	r3, [r2, #8]
 8008796:	4b08      	ldr	r3, [pc, #32]	; (80087b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008798:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	68db      	ldr	r3, [r3, #12]
 800879e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80087a2:	4905      	ldr	r1, [pc, #20]	; (80087b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80087a4:	4313      	orrs	r3, r2
 80087a6:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80087a8:	2300      	movs	r3, #0
}
 80087aa:	4618      	mov	r0, r3
 80087ac:	3718      	adds	r7, #24
 80087ae:	46bd      	mov	sp, r7
 80087b0:	bd80      	pop	{r7, pc}
 80087b2:	bf00      	nop
 80087b4:	42470068 	.word	0x42470068
 80087b8:	40023800 	.word	0x40023800
 80087bc:	40007000 	.word	0x40007000
 80087c0:	42470e40 	.word	0x42470e40

080087c4 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80087c4:	b580      	push	{r7, lr}
 80087c6:	b082      	sub	sp, #8
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d101      	bne.n	80087d6 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 80087d2:	2301      	movs	r3, #1
 80087d4:	e083      	b.n	80088de <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	7f5b      	ldrb	r3, [r3, #29]
 80087da:	b2db      	uxtb	r3, r3
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d105      	bne.n	80087ec <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	2200      	movs	r2, #0
 80087e4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80087e6:	6878      	ldr	r0, [r7, #4]
 80087e8:	f7fb fa26 	bl	8003c38 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	2202      	movs	r2, #2
 80087f0:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	22ca      	movs	r2, #202	; 0xca
 80087f8:	625a      	str	r2, [r3, #36]	; 0x24
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	2253      	movs	r2, #83	; 0x53
 8008800:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8008802:	6878      	ldr	r0, [r7, #4]
 8008804:	f000 f9fb 	bl	8008bfe <RTC_EnterInitMode>
 8008808:	4603      	mov	r3, r0
 800880a:	2b00      	cmp	r3, #0
 800880c:	d008      	beq.n	8008820 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	22ff      	movs	r2, #255	; 0xff
 8008814:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	2204      	movs	r2, #4
 800881a:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800881c:	2301      	movs	r3, #1
 800881e:	e05e      	b.n	80088de <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	689b      	ldr	r3, [r3, #8]
 8008826:	687a      	ldr	r2, [r7, #4]
 8008828:	6812      	ldr	r2, [r2, #0]
 800882a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800882e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008832:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	6899      	ldr	r1, [r3, #8]
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	685a      	ldr	r2, [r3, #4]
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	691b      	ldr	r3, [r3, #16]
 8008842:	431a      	orrs	r2, r3
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	695b      	ldr	r3, [r3, #20]
 8008848:	431a      	orrs	r2, r3
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	430a      	orrs	r2, r1
 8008850:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	687a      	ldr	r2, [r7, #4]
 8008858:	68d2      	ldr	r2, [r2, #12]
 800885a:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	6919      	ldr	r1, [r3, #16]
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	689b      	ldr	r3, [r3, #8]
 8008866:	041a      	lsls	r2, r3, #16
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	430a      	orrs	r2, r1
 800886e:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	68da      	ldr	r2, [r3, #12]
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800887e:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	689b      	ldr	r3, [r3, #8]
 8008886:	f003 0320 	and.w	r3, r3, #32
 800888a:	2b00      	cmp	r3, #0
 800888c:	d10e      	bne.n	80088ac <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800888e:	6878      	ldr	r0, [r7, #4]
 8008890:	f000 f98d 	bl	8008bae <HAL_RTC_WaitForSynchro>
 8008894:	4603      	mov	r3, r0
 8008896:	2b00      	cmp	r3, #0
 8008898:	d008      	beq.n	80088ac <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	22ff      	movs	r2, #255	; 0xff
 80088a0:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	2204      	movs	r2, #4
 80088a6:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 80088a8:	2301      	movs	r3, #1
 80088aa:	e018      	b.n	80088de <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80088ba:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	699a      	ldr	r2, [r3, #24]
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	430a      	orrs	r2, r1
 80088cc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	22ff      	movs	r2, #255	; 0xff
 80088d4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	2201      	movs	r2, #1
 80088da:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 80088dc:	2300      	movs	r3, #0
  }
}
 80088de:	4618      	mov	r0, r3
 80088e0:	3708      	adds	r7, #8
 80088e2:	46bd      	mov	sp, r7
 80088e4:	bd80      	pop	{r7, pc}

080088e6 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80088e6:	b590      	push	{r4, r7, lr}
 80088e8:	b087      	sub	sp, #28
 80088ea:	af00      	add	r7, sp, #0
 80088ec:	60f8      	str	r0, [r7, #12]
 80088ee:	60b9      	str	r1, [r7, #8]
 80088f0:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80088f2:	2300      	movs	r3, #0
 80088f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	7f1b      	ldrb	r3, [r3, #28]
 80088fa:	2b01      	cmp	r3, #1
 80088fc:	d101      	bne.n	8008902 <HAL_RTC_SetTime+0x1c>
 80088fe:	2302      	movs	r3, #2
 8008900:	e0aa      	b.n	8008a58 <HAL_RTC_SetTime+0x172>
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	2201      	movs	r2, #1
 8008906:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	2202      	movs	r2, #2
 800890c:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	2b00      	cmp	r3, #0
 8008912:	d126      	bne.n	8008962 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	689b      	ldr	r3, [r3, #8]
 800891a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800891e:	2b00      	cmp	r3, #0
 8008920:	d102      	bne.n	8008928 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8008922:	68bb      	ldr	r3, [r7, #8]
 8008924:	2200      	movs	r2, #0
 8008926:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8008928:	68bb      	ldr	r3, [r7, #8]
 800892a:	781b      	ldrb	r3, [r3, #0]
 800892c:	4618      	mov	r0, r3
 800892e:	f000 f992 	bl	8008c56 <RTC_ByteToBcd2>
 8008932:	4603      	mov	r3, r0
 8008934:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8008936:	68bb      	ldr	r3, [r7, #8]
 8008938:	785b      	ldrb	r3, [r3, #1]
 800893a:	4618      	mov	r0, r3
 800893c:	f000 f98b 	bl	8008c56 <RTC_ByteToBcd2>
 8008940:	4603      	mov	r3, r0
 8008942:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8008944:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8008946:	68bb      	ldr	r3, [r7, #8]
 8008948:	789b      	ldrb	r3, [r3, #2]
 800894a:	4618      	mov	r0, r3
 800894c:	f000 f983 	bl	8008c56 <RTC_ByteToBcd2>
 8008950:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8008952:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8008956:	68bb      	ldr	r3, [r7, #8]
 8008958:	78db      	ldrb	r3, [r3, #3]
 800895a:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800895c:	4313      	orrs	r3, r2
 800895e:	617b      	str	r3, [r7, #20]
 8008960:	e018      	b.n	8008994 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	689b      	ldr	r3, [r3, #8]
 8008968:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800896c:	2b00      	cmp	r3, #0
 800896e:	d102      	bne.n	8008976 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8008970:	68bb      	ldr	r3, [r7, #8]
 8008972:	2200      	movs	r2, #0
 8008974:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8008976:	68bb      	ldr	r3, [r7, #8]
 8008978:	781b      	ldrb	r3, [r3, #0]
 800897a:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800897c:	68bb      	ldr	r3, [r7, #8]
 800897e:	785b      	ldrb	r3, [r3, #1]
 8008980:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8008982:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8008984:	68ba      	ldr	r2, [r7, #8]
 8008986:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8008988:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 800898a:	68bb      	ldr	r3, [r7, #8]
 800898c:	78db      	ldrb	r3, [r3, #3]
 800898e:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8008990:	4313      	orrs	r3, r2
 8008992:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	22ca      	movs	r2, #202	; 0xca
 800899a:	625a      	str	r2, [r3, #36]	; 0x24
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	2253      	movs	r2, #83	; 0x53
 80089a2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80089a4:	68f8      	ldr	r0, [r7, #12]
 80089a6:	f000 f92a 	bl	8008bfe <RTC_EnterInitMode>
 80089aa:	4603      	mov	r3, r0
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d00b      	beq.n	80089c8 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	22ff      	movs	r2, #255	; 0xff
 80089b6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	2204      	movs	r2, #4
 80089bc:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	2200      	movs	r2, #0
 80089c2:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80089c4:	2301      	movs	r3, #1
 80089c6:	e047      	b.n	8008a58 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	681a      	ldr	r2, [r3, #0]
 80089cc:	697b      	ldr	r3, [r7, #20]
 80089ce:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80089d2:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80089d6:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	689a      	ldr	r2, [r3, #8]
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80089e6:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	6899      	ldr	r1, [r3, #8]
 80089ee:	68bb      	ldr	r3, [r7, #8]
 80089f0:	68da      	ldr	r2, [r3, #12]
 80089f2:	68bb      	ldr	r3, [r7, #8]
 80089f4:	691b      	ldr	r3, [r3, #16]
 80089f6:	431a      	orrs	r2, r3
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	430a      	orrs	r2, r1
 80089fe:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	68da      	ldr	r2, [r3, #12]
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008a0e:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	689b      	ldr	r3, [r3, #8]
 8008a16:	f003 0320 	and.w	r3, r3, #32
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d111      	bne.n	8008a42 <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008a1e:	68f8      	ldr	r0, [r7, #12]
 8008a20:	f000 f8c5 	bl	8008bae <HAL_RTC_WaitForSynchro>
 8008a24:	4603      	mov	r3, r0
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d00b      	beq.n	8008a42 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	22ff      	movs	r2, #255	; 0xff
 8008a30:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	2204      	movs	r2, #4
 8008a36:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	2200      	movs	r2, #0
 8008a3c:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8008a3e:	2301      	movs	r3, #1
 8008a40:	e00a      	b.n	8008a58 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	22ff      	movs	r2, #255	; 0xff
 8008a48:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	2201      	movs	r2, #1
 8008a4e:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	2200      	movs	r2, #0
 8008a54:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8008a56:	2300      	movs	r3, #0
  }
}
 8008a58:	4618      	mov	r0, r3
 8008a5a:	371c      	adds	r7, #28
 8008a5c:	46bd      	mov	sp, r7
 8008a5e:	bd90      	pop	{r4, r7, pc}

08008a60 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8008a60:	b590      	push	{r4, r7, lr}
 8008a62:	b087      	sub	sp, #28
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	60f8      	str	r0, [r7, #12]
 8008a68:	60b9      	str	r1, [r7, #8]
 8008a6a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8008a6c:	2300      	movs	r3, #0
 8008a6e:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	7f1b      	ldrb	r3, [r3, #28]
 8008a74:	2b01      	cmp	r3, #1
 8008a76:	d101      	bne.n	8008a7c <HAL_RTC_SetDate+0x1c>
 8008a78:	2302      	movs	r3, #2
 8008a7a:	e094      	b.n	8008ba6 <HAL_RTC_SetDate+0x146>
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	2201      	movs	r2, #1
 8008a80:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	2202      	movs	r2, #2
 8008a86:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d10e      	bne.n	8008aac <HAL_RTC_SetDate+0x4c>
 8008a8e:	68bb      	ldr	r3, [r7, #8]
 8008a90:	785b      	ldrb	r3, [r3, #1]
 8008a92:	f003 0310 	and.w	r3, r3, #16
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d008      	beq.n	8008aac <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8008a9a:	68bb      	ldr	r3, [r7, #8]
 8008a9c:	785b      	ldrb	r3, [r3, #1]
 8008a9e:	f023 0310 	bic.w	r3, r3, #16
 8008aa2:	b2db      	uxtb	r3, r3
 8008aa4:	330a      	adds	r3, #10
 8008aa6:	b2da      	uxtb	r2, r3
 8008aa8:	68bb      	ldr	r3, [r7, #8]
 8008aaa:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d11c      	bne.n	8008aec <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8008ab2:	68bb      	ldr	r3, [r7, #8]
 8008ab4:	78db      	ldrb	r3, [r3, #3]
 8008ab6:	4618      	mov	r0, r3
 8008ab8:	f000 f8cd 	bl	8008c56 <RTC_ByteToBcd2>
 8008abc:	4603      	mov	r3, r0
 8008abe:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8008ac0:	68bb      	ldr	r3, [r7, #8]
 8008ac2:	785b      	ldrb	r3, [r3, #1]
 8008ac4:	4618      	mov	r0, r3
 8008ac6:	f000 f8c6 	bl	8008c56 <RTC_ByteToBcd2>
 8008aca:	4603      	mov	r3, r0
 8008acc:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8008ace:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8008ad0:	68bb      	ldr	r3, [r7, #8]
 8008ad2:	789b      	ldrb	r3, [r3, #2]
 8008ad4:	4618      	mov	r0, r3
 8008ad6:	f000 f8be 	bl	8008c56 <RTC_ByteToBcd2>
 8008ada:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8008adc:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 8008ae0:	68bb      	ldr	r3, [r7, #8]
 8008ae2:	781b      	ldrb	r3, [r3, #0]
 8008ae4:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8008ae6:	4313      	orrs	r3, r2
 8008ae8:	617b      	str	r3, [r7, #20]
 8008aea:	e00e      	b.n	8008b0a <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8008aec:	68bb      	ldr	r3, [r7, #8]
 8008aee:	78db      	ldrb	r3, [r3, #3]
 8008af0:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8008af2:	68bb      	ldr	r3, [r7, #8]
 8008af4:	785b      	ldrb	r3, [r3, #1]
 8008af6:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8008af8:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8008afa:	68ba      	ldr	r2, [r7, #8]
 8008afc:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8008afe:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8008b00:	68bb      	ldr	r3, [r7, #8]
 8008b02:	781b      	ldrb	r3, [r3, #0]
 8008b04:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8008b06:	4313      	orrs	r3, r2
 8008b08:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	22ca      	movs	r2, #202	; 0xca
 8008b10:	625a      	str	r2, [r3, #36]	; 0x24
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	2253      	movs	r2, #83	; 0x53
 8008b18:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8008b1a:	68f8      	ldr	r0, [r7, #12]
 8008b1c:	f000 f86f 	bl	8008bfe <RTC_EnterInitMode>
 8008b20:	4603      	mov	r3, r0
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d00b      	beq.n	8008b3e <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	22ff      	movs	r2, #255	; 0xff
 8008b2c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	2204      	movs	r2, #4
 8008b32:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	2200      	movs	r2, #0
 8008b38:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8008b3a:	2301      	movs	r3, #1
 8008b3c:	e033      	b.n	8008ba6 <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	681a      	ldr	r2, [r3, #0]
 8008b42:	697b      	ldr	r3, [r7, #20]
 8008b44:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008b48:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008b4c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	68da      	ldr	r2, [r3, #12]
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008b5c:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	689b      	ldr	r3, [r3, #8]
 8008b64:	f003 0320 	and.w	r3, r3, #32
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d111      	bne.n	8008b90 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008b6c:	68f8      	ldr	r0, [r7, #12]
 8008b6e:	f000 f81e 	bl	8008bae <HAL_RTC_WaitForSynchro>
 8008b72:	4603      	mov	r3, r0
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d00b      	beq.n	8008b90 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	22ff      	movs	r2, #255	; 0xff
 8008b7e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	2204      	movs	r2, #4
 8008b84:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	2200      	movs	r2, #0
 8008b8a:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8008b8c:	2301      	movs	r3, #1
 8008b8e:	e00a      	b.n	8008ba6 <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	22ff      	movs	r2, #255	; 0xff
 8008b96:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	2201      	movs	r2, #1
 8008b9c:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	2200      	movs	r2, #0
 8008ba2:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8008ba4:	2300      	movs	r3, #0
  }
}
 8008ba6:	4618      	mov	r0, r3
 8008ba8:	371c      	adds	r7, #28
 8008baa:	46bd      	mov	sp, r7
 8008bac:	bd90      	pop	{r4, r7, pc}

08008bae <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8008bae:	b580      	push	{r7, lr}
 8008bb0:	b084      	sub	sp, #16
 8008bb2:	af00      	add	r7, sp, #0
 8008bb4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008bb6:	2300      	movs	r3, #0
 8008bb8:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	68da      	ldr	r2, [r3, #12]
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8008bc8:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008bca:	f7fc fd65 	bl	8005698 <HAL_GetTick>
 8008bce:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8008bd0:	e009      	b.n	8008be6 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008bd2:	f7fc fd61 	bl	8005698 <HAL_GetTick>
 8008bd6:	4602      	mov	r2, r0
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	1ad3      	subs	r3, r2, r3
 8008bdc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008be0:	d901      	bls.n	8008be6 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8008be2:	2303      	movs	r3, #3
 8008be4:	e007      	b.n	8008bf6 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	68db      	ldr	r3, [r3, #12]
 8008bec:	f003 0320 	and.w	r3, r3, #32
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d0ee      	beq.n	8008bd2 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8008bf4:	2300      	movs	r3, #0
}
 8008bf6:	4618      	mov	r0, r3
 8008bf8:	3710      	adds	r7, #16
 8008bfa:	46bd      	mov	sp, r7
 8008bfc:	bd80      	pop	{r7, pc}

08008bfe <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8008bfe:	b580      	push	{r7, lr}
 8008c00:	b084      	sub	sp, #16
 8008c02:	af00      	add	r7, sp, #0
 8008c04:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008c06:	2300      	movs	r3, #0
 8008c08:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	68db      	ldr	r3, [r3, #12]
 8008c10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d119      	bne.n	8008c4c <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	f04f 32ff 	mov.w	r2, #4294967295
 8008c20:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008c22:	f7fc fd39 	bl	8005698 <HAL_GetTick>
 8008c26:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8008c28:	e009      	b.n	8008c3e <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008c2a:	f7fc fd35 	bl	8005698 <HAL_GetTick>
 8008c2e:	4602      	mov	r2, r0
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	1ad3      	subs	r3, r2, r3
 8008c34:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008c38:	d901      	bls.n	8008c3e <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8008c3a:	2303      	movs	r3, #3
 8008c3c:	e007      	b.n	8008c4e <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	68db      	ldr	r3, [r3, #12]
 8008c44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d0ee      	beq.n	8008c2a <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8008c4c:	2300      	movs	r3, #0
}
 8008c4e:	4618      	mov	r0, r3
 8008c50:	3710      	adds	r7, #16
 8008c52:	46bd      	mov	sp, r7
 8008c54:	bd80      	pop	{r7, pc}

08008c56 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8008c56:	b480      	push	{r7}
 8008c58:	b085      	sub	sp, #20
 8008c5a:	af00      	add	r7, sp, #0
 8008c5c:	4603      	mov	r3, r0
 8008c5e:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8008c60:	2300      	movs	r3, #0
 8008c62:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 8008c64:	e005      	b.n	8008c72 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	3301      	adds	r3, #1
 8008c6a:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8008c6c:	79fb      	ldrb	r3, [r7, #7]
 8008c6e:	3b0a      	subs	r3, #10
 8008c70:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 8008c72:	79fb      	ldrb	r3, [r7, #7]
 8008c74:	2b09      	cmp	r3, #9
 8008c76:	d8f6      	bhi.n	8008c66 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	b2db      	uxtb	r3, r3
 8008c7c:	011b      	lsls	r3, r3, #4
 8008c7e:	b2da      	uxtb	r2, r3
 8008c80:	79fb      	ldrb	r3, [r7, #7]
 8008c82:	4313      	orrs	r3, r2
 8008c84:	b2db      	uxtb	r3, r3
}
 8008c86:	4618      	mov	r0, r3
 8008c88:	3714      	adds	r7, #20
 8008c8a:	46bd      	mov	sp, r7
 8008c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c90:	4770      	bx	lr

08008c92 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008c92:	b580      	push	{r7, lr}
 8008c94:	b082      	sub	sp, #8
 8008c96:	af00      	add	r7, sp, #0
 8008c98:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d101      	bne.n	8008ca4 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008ca0:	2301      	movs	r3, #1
 8008ca2:	e056      	b.n	8008d52 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	2200      	movs	r2, #0
 8008ca8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008cb0:	b2db      	uxtb	r3, r3
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d106      	bne.n	8008cc4 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	2200      	movs	r2, #0
 8008cba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008cbe:	6878      	ldr	r0, [r7, #4]
 8008cc0:	f7fb f838 	bl	8003d34 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	2202      	movs	r2, #2
 8008cc8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	681a      	ldr	r2, [r3, #0]
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008cda:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	685a      	ldr	r2, [r3, #4]
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	689b      	ldr	r3, [r3, #8]
 8008ce4:	431a      	orrs	r2, r3
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	68db      	ldr	r3, [r3, #12]
 8008cea:	431a      	orrs	r2, r3
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	691b      	ldr	r3, [r3, #16]
 8008cf0:	431a      	orrs	r2, r3
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	695b      	ldr	r3, [r3, #20]
 8008cf6:	431a      	orrs	r2, r3
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	699b      	ldr	r3, [r3, #24]
 8008cfc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008d00:	431a      	orrs	r2, r3
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	69db      	ldr	r3, [r3, #28]
 8008d06:	431a      	orrs	r2, r3
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	6a1b      	ldr	r3, [r3, #32]
 8008d0c:	ea42 0103 	orr.w	r1, r2, r3
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	430a      	orrs	r2, r1
 8008d1a:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	699b      	ldr	r3, [r3, #24]
 8008d20:	0c1b      	lsrs	r3, r3, #16
 8008d22:	f003 0104 	and.w	r1, r3, #4
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	430a      	orrs	r2, r1
 8008d30:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	69da      	ldr	r2, [r3, #28]
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008d40:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	2200      	movs	r2, #0
 8008d46:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	2201      	movs	r2, #1
 8008d4c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8008d50:	2300      	movs	r3, #0
}
 8008d52:	4618      	mov	r0, r3
 8008d54:	3708      	adds	r7, #8
 8008d56:	46bd      	mov	sp, r7
 8008d58:	bd80      	pop	{r7, pc}
	...

08008d5c <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8008d5c:	b480      	push	{r7}
 8008d5e:	b087      	sub	sp, #28
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	60f8      	str	r0, [r7, #12]
 8008d64:	60b9      	str	r1, [r7, #8]
 8008d66:	607a      	str	r2, [r7, #4]
 8008d68:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008d6a:	2300      	movs	r3, #0
 8008d6c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008d74:	2b01      	cmp	r3, #1
 8008d76:	d101      	bne.n	8008d7c <HAL_SPI_TransmitReceive_IT+0x20>
 8008d78:	2302      	movs	r3, #2
 8008d7a:	e075      	b.n	8008e68 <HAL_SPI_TransmitReceive_IT+0x10c>
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	2201      	movs	r2, #1
 8008d80:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008d8a:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	685b      	ldr	r3, [r3, #4]
 8008d90:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008d92:	7dbb      	ldrb	r3, [r7, #22]
 8008d94:	2b01      	cmp	r3, #1
 8008d96:	d00d      	beq.n	8008db4 <HAL_SPI_TransmitReceive_IT+0x58>
 8008d98:	693b      	ldr	r3, [r7, #16]
 8008d9a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008d9e:	d106      	bne.n	8008dae <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	689b      	ldr	r3, [r3, #8]
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d102      	bne.n	8008dae <HAL_SPI_TransmitReceive_IT+0x52>
 8008da8:	7dbb      	ldrb	r3, [r7, #22]
 8008daa:	2b04      	cmp	r3, #4
 8008dac:	d002      	beq.n	8008db4 <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 8008dae:	2302      	movs	r3, #2
 8008db0:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008db2:	e054      	b.n	8008e5e <HAL_SPI_TransmitReceive_IT+0x102>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008db4:	68bb      	ldr	r3, [r7, #8]
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d005      	beq.n	8008dc6 <HAL_SPI_TransmitReceive_IT+0x6a>
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d002      	beq.n	8008dc6 <HAL_SPI_TransmitReceive_IT+0x6a>
 8008dc0:	887b      	ldrh	r3, [r7, #2]
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d102      	bne.n	8008dcc <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 8008dc6:	2301      	movs	r3, #1
 8008dc8:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008dca:	e048      	b.n	8008e5e <HAL_SPI_TransmitReceive_IT+0x102>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008dd2:	b2db      	uxtb	r3, r3
 8008dd4:	2b04      	cmp	r3, #4
 8008dd6:	d003      	beq.n	8008de0 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	2205      	movs	r2, #5
 8008ddc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	2200      	movs	r2, #0
 8008de4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	68ba      	ldr	r2, [r7, #8]
 8008dea:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	887a      	ldrh	r2, [r7, #2]
 8008df0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	887a      	ldrh	r2, [r7, #2]
 8008df6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	687a      	ldr	r2, [r7, #4]
 8008dfc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	887a      	ldrh	r2, [r7, #2]
 8008e02:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	887a      	ldrh	r2, [r7, #2]
 8008e08:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	68db      	ldr	r3, [r3, #12]
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d006      	beq.n	8008e20 <HAL_SPI_TransmitReceive_IT+0xc4>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	4a17      	ldr	r2, [pc, #92]	; (8008e74 <HAL_SPI_TransmitReceive_IT+0x118>)
 8008e16:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	4a17      	ldr	r2, [pc, #92]	; (8008e78 <HAL_SPI_TransmitReceive_IT+0x11c>)
 8008e1c:	645a      	str	r2, [r3, #68]	; 0x44
 8008e1e:	e005      	b.n	8008e2c <HAL_SPI_TransmitReceive_IT+0xd0>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	4a16      	ldr	r2, [pc, #88]	; (8008e7c <HAL_SPI_TransmitReceive_IT+0x120>)
 8008e24:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	4a15      	ldr	r2, [pc, #84]	; (8008e80 <HAL_SPI_TransmitReceive_IT+0x124>)
 8008e2a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	685a      	ldr	r2, [r3, #4]
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 8008e3a:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e46:	2b40      	cmp	r3, #64	; 0x40
 8008e48:	d008      	beq.n	8008e5c <HAL_SPI_TransmitReceive_IT+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	681a      	ldr	r2, [r3, #0]
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008e58:	601a      	str	r2, [r3, #0]
 8008e5a:	e000      	b.n	8008e5e <HAL_SPI_TransmitReceive_IT+0x102>
  }

error :
 8008e5c:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	2200      	movs	r2, #0
 8008e62:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008e66:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e68:	4618      	mov	r0, r3
 8008e6a:	371c      	adds	r7, #28
 8008e6c:	46bd      	mov	sp, r7
 8008e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e72:	4770      	bx	lr
 8008e74:	08009199 	.word	0x08009199
 8008e78:	080091f9 	.word	0x080091f9
 8008e7c:	080090d5 	.word	0x080090d5
 8008e80:	08009139 	.word	0x08009139

08008e84 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8008e84:	b580      	push	{r7, lr}
 8008e86:	b088      	sub	sp, #32
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	685b      	ldr	r3, [r3, #4]
 8008e92:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	689b      	ldr	r3, [r3, #8]
 8008e9a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8008e9c:	69bb      	ldr	r3, [r7, #24]
 8008e9e:	099b      	lsrs	r3, r3, #6
 8008ea0:	f003 0301 	and.w	r3, r3, #1
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d10f      	bne.n	8008ec8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8008ea8:	69bb      	ldr	r3, [r7, #24]
 8008eaa:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d00a      	beq.n	8008ec8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8008eb2:	69fb      	ldr	r3, [r7, #28]
 8008eb4:	099b      	lsrs	r3, r3, #6
 8008eb6:	f003 0301 	and.w	r3, r3, #1
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d004      	beq.n	8008ec8 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ec2:	6878      	ldr	r0, [r7, #4]
 8008ec4:	4798      	blx	r3
    return;
 8008ec6:	e0d7      	b.n	8009078 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8008ec8:	69bb      	ldr	r3, [r7, #24]
 8008eca:	085b      	lsrs	r3, r3, #1
 8008ecc:	f003 0301 	and.w	r3, r3, #1
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d00a      	beq.n	8008eea <HAL_SPI_IRQHandler+0x66>
 8008ed4:	69fb      	ldr	r3, [r7, #28]
 8008ed6:	09db      	lsrs	r3, r3, #7
 8008ed8:	f003 0301 	and.w	r3, r3, #1
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d004      	beq.n	8008eea <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ee4:	6878      	ldr	r0, [r7, #4]
 8008ee6:	4798      	blx	r3
    return;
 8008ee8:	e0c6      	b.n	8009078 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8008eea:	69bb      	ldr	r3, [r7, #24]
 8008eec:	095b      	lsrs	r3, r3, #5
 8008eee:	f003 0301 	and.w	r3, r3, #1
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d10c      	bne.n	8008f10 <HAL_SPI_IRQHandler+0x8c>
 8008ef6:	69bb      	ldr	r3, [r7, #24]
 8008ef8:	099b      	lsrs	r3, r3, #6
 8008efa:	f003 0301 	and.w	r3, r3, #1
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d106      	bne.n	8008f10 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8008f02:	69bb      	ldr	r3, [r7, #24]
 8008f04:	0a1b      	lsrs	r3, r3, #8
 8008f06:	f003 0301 	and.w	r3, r3, #1
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	f000 80b4 	beq.w	8009078 <HAL_SPI_IRQHandler+0x1f4>
 8008f10:	69fb      	ldr	r3, [r7, #28]
 8008f12:	095b      	lsrs	r3, r3, #5
 8008f14:	f003 0301 	and.w	r3, r3, #1
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	f000 80ad 	beq.w	8009078 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8008f1e:	69bb      	ldr	r3, [r7, #24]
 8008f20:	099b      	lsrs	r3, r3, #6
 8008f22:	f003 0301 	and.w	r3, r3, #1
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d023      	beq.n	8008f72 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008f30:	b2db      	uxtb	r3, r3
 8008f32:	2b03      	cmp	r3, #3
 8008f34:	d011      	beq.n	8008f5a <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f3a:	f043 0204 	orr.w	r2, r3, #4
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008f42:	2300      	movs	r3, #0
 8008f44:	617b      	str	r3, [r7, #20]
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	68db      	ldr	r3, [r3, #12]
 8008f4c:	617b      	str	r3, [r7, #20]
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	689b      	ldr	r3, [r3, #8]
 8008f54:	617b      	str	r3, [r7, #20]
 8008f56:	697b      	ldr	r3, [r7, #20]
 8008f58:	e00b      	b.n	8008f72 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008f5a:	2300      	movs	r3, #0
 8008f5c:	613b      	str	r3, [r7, #16]
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	68db      	ldr	r3, [r3, #12]
 8008f64:	613b      	str	r3, [r7, #16]
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	689b      	ldr	r3, [r3, #8]
 8008f6c:	613b      	str	r3, [r7, #16]
 8008f6e:	693b      	ldr	r3, [r7, #16]
        return;
 8008f70:	e082      	b.n	8009078 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8008f72:	69bb      	ldr	r3, [r7, #24]
 8008f74:	095b      	lsrs	r3, r3, #5
 8008f76:	f003 0301 	and.w	r3, r3, #1
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d014      	beq.n	8008fa8 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f82:	f043 0201 	orr.w	r2, r3, #1
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8008f8a:	2300      	movs	r3, #0
 8008f8c:	60fb      	str	r3, [r7, #12]
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	689b      	ldr	r3, [r3, #8]
 8008f94:	60fb      	str	r3, [r7, #12]
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	681a      	ldr	r2, [r3, #0]
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008fa4:	601a      	str	r2, [r3, #0]
 8008fa6:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8008fa8:	69bb      	ldr	r3, [r7, #24]
 8008faa:	0a1b      	lsrs	r3, r3, #8
 8008fac:	f003 0301 	and.w	r3, r3, #1
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d00c      	beq.n	8008fce <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008fb8:	f043 0208 	orr.w	r2, r3, #8
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008fc0:	2300      	movs	r3, #0
 8008fc2:	60bb      	str	r3, [r7, #8]
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	689b      	ldr	r3, [r3, #8]
 8008fca:	60bb      	str	r3, [r7, #8]
 8008fcc:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d04f      	beq.n	8009076 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	685a      	ldr	r2, [r3, #4]
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008fe4:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	2201      	movs	r2, #1
 8008fea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8008fee:	69fb      	ldr	r3, [r7, #28]
 8008ff0:	f003 0302 	and.w	r3, r3, #2
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d104      	bne.n	8009002 <HAL_SPI_IRQHandler+0x17e>
 8008ff8:	69fb      	ldr	r3, [r7, #28]
 8008ffa:	f003 0301 	and.w	r3, r3, #1
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d034      	beq.n	800906c <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	685a      	ldr	r2, [r3, #4]
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	f022 0203 	bic.w	r2, r2, #3
 8009010:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009016:	2b00      	cmp	r3, #0
 8009018:	d011      	beq.n	800903e <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800901e:	4a18      	ldr	r2, [pc, #96]	; (8009080 <HAL_SPI_IRQHandler+0x1fc>)
 8009020:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009026:	4618      	mov	r0, r3
 8009028:	f7fd f938 	bl	800629c <HAL_DMA_Abort_IT>
 800902c:	4603      	mov	r3, r0
 800902e:	2b00      	cmp	r3, #0
 8009030:	d005      	beq.n	800903e <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009036:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009042:	2b00      	cmp	r3, #0
 8009044:	d016      	beq.n	8009074 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800904a:	4a0d      	ldr	r2, [pc, #52]	; (8009080 <HAL_SPI_IRQHandler+0x1fc>)
 800904c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009052:	4618      	mov	r0, r3
 8009054:	f7fd f922 	bl	800629c <HAL_DMA_Abort_IT>
 8009058:	4603      	mov	r3, r0
 800905a:	2b00      	cmp	r3, #0
 800905c:	d00a      	beq.n	8009074 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009062:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800906a:	e003      	b.n	8009074 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800906c:	6878      	ldr	r0, [r7, #4]
 800906e:	f000 f813 	bl	8009098 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8009072:	e000      	b.n	8009076 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8009074:	bf00      	nop
    return;
 8009076:	bf00      	nop
  }
}
 8009078:	3720      	adds	r7, #32
 800907a:	46bd      	mov	sp, r7
 800907c:	bd80      	pop	{r7, pc}
 800907e:	bf00      	nop
 8009080:	080090ad 	.word	0x080090ad

08009084 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009084:	b480      	push	{r7}
 8009086:	b083      	sub	sp, #12
 8009088:	af00      	add	r7, sp, #0
 800908a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800908c:	bf00      	nop
 800908e:	370c      	adds	r7, #12
 8009090:	46bd      	mov	sp, r7
 8009092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009096:	4770      	bx	lr

08009098 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8009098:	b480      	push	{r7}
 800909a:	b083      	sub	sp, #12
 800909c:	af00      	add	r7, sp, #0
 800909e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80090a0:	bf00      	nop
 80090a2:	370c      	adds	r7, #12
 80090a4:	46bd      	mov	sp, r7
 80090a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090aa:	4770      	bx	lr

080090ac <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80090ac:	b580      	push	{r7, lr}
 80090ae:	b084      	sub	sp, #16
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090b8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	2200      	movs	r2, #0
 80090be:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	2200      	movs	r2, #0
 80090c4:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80090c6:	68f8      	ldr	r0, [r7, #12]
 80090c8:	f7ff ffe6 	bl	8009098 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80090cc:	bf00      	nop
 80090ce:	3710      	adds	r7, #16
 80090d0:	46bd      	mov	sp, r7
 80090d2:	bd80      	pop	{r7, pc}

080090d4 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80090d4:	b580      	push	{r7, lr}
 80090d6:	b082      	sub	sp, #8
 80090d8:	af00      	add	r7, sp, #0
 80090da:	6078      	str	r0, [r7, #4]
  /* Receive data in 8bit mode */
  *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	f103 020c 	add.w	r2, r3, #12
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090e8:	7812      	ldrb	r2, [r2, #0]
 80090ea:	b2d2      	uxtb	r2, r2
 80090ec:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090f2:	1c5a      	adds	r2, r3, #1
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80090fc:	b29b      	uxth	r3, r3
 80090fe:	3b01      	subs	r3, #1
 8009100:	b29a      	uxth	r2, r3
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800910a:	b29b      	uxth	r3, r3
 800910c:	2b00      	cmp	r3, #0
 800910e:	d10f      	bne.n	8009130 <SPI_2linesRxISR_8BIT+0x5c>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	685a      	ldr	r2, [r3, #4]
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800911e:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009124:	b29b      	uxth	r3, r3
 8009126:	2b00      	cmp	r3, #0
 8009128:	d102      	bne.n	8009130 <SPI_2linesRxISR_8BIT+0x5c>
    {
      SPI_CloseRxTx_ISR(hspi);
 800912a:	6878      	ldr	r0, [r7, #4]
 800912c:	f000 f940 	bl	80093b0 <SPI_CloseRxTx_ISR>
    }
  }
}
 8009130:	bf00      	nop
 8009132:	3708      	adds	r7, #8
 8009134:	46bd      	mov	sp, r7
 8009136:	bd80      	pop	{r7, pc}

08009138 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8009138:	b580      	push	{r7, lr}
 800913a:	b082      	sub	sp, #8
 800913c:	af00      	add	r7, sp, #0
 800913e:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	330c      	adds	r3, #12
 800914a:	7812      	ldrb	r2, [r2, #0]
 800914c:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009152:	1c5a      	adds	r2, r3, #1
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800915c:	b29b      	uxth	r3, r3
 800915e:	3b01      	subs	r3, #1
 8009160:	b29a      	uxth	r2, r3
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800916a:	b29b      	uxth	r3, r3
 800916c:	2b00      	cmp	r3, #0
 800916e:	d10f      	bne.n	8009190 <SPI_2linesTxISR_8BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	685a      	ldr	r2, [r3, #4]
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800917e:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009184:	b29b      	uxth	r3, r3
 8009186:	2b00      	cmp	r3, #0
 8009188:	d102      	bne.n	8009190 <SPI_2linesTxISR_8BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 800918a:	6878      	ldr	r0, [r7, #4]
 800918c:	f000 f910 	bl	80093b0 <SPI_CloseRxTx_ISR>
    }
  }
}
 8009190:	bf00      	nop
 8009192:	3708      	adds	r7, #8
 8009194:	46bd      	mov	sp, r7
 8009196:	bd80      	pop	{r7, pc}

08009198 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8009198:	b580      	push	{r7, lr}
 800919a:	b082      	sub	sp, #8
 800919c:	af00      	add	r7, sp, #0
 800919e:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	68da      	ldr	r2, [r3, #12]
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091aa:	b292      	uxth	r2, r2
 80091ac:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091b2:	1c9a      	adds	r2, r3, #2
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80091bc:	b29b      	uxth	r3, r3
 80091be:	3b01      	subs	r3, #1
 80091c0:	b29a      	uxth	r2, r3
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->RxXferCount == 0U)
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80091ca:	b29b      	uxth	r3, r3
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d10f      	bne.n	80091f0 <SPI_2linesRxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	685a      	ldr	r2, [r3, #4]
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80091de:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80091e4:	b29b      	uxth	r3, r3
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d102      	bne.n	80091f0 <SPI_2linesRxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 80091ea:	6878      	ldr	r0, [r7, #4]
 80091ec:	f000 f8e0 	bl	80093b0 <SPI_CloseRxTx_ISR>
    }
  }
}
 80091f0:	bf00      	nop
 80091f2:	3708      	adds	r7, #8
 80091f4:	46bd      	mov	sp, r7
 80091f6:	bd80      	pop	{r7, pc}

080091f8 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80091f8:	b580      	push	{r7, lr}
 80091fa:	b082      	sub	sp, #8
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009204:	881a      	ldrh	r2, [r3, #0]
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009210:	1c9a      	adds	r2, r3, #2
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800921a:	b29b      	uxth	r3, r3
 800921c:	3b01      	subs	r3, #1
 800921e:	b29a      	uxth	r2, r3
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009228:	b29b      	uxth	r3, r3
 800922a:	2b00      	cmp	r3, #0
 800922c:	d10f      	bne.n	800924e <SPI_2linesTxISR_16BIT+0x56>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	685a      	ldr	r2, [r3, #4]
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800923c:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009242:	b29b      	uxth	r3, r3
 8009244:	2b00      	cmp	r3, #0
 8009246:	d102      	bne.n	800924e <SPI_2linesTxISR_16BIT+0x56>
    {
      SPI_CloseRxTx_ISR(hspi);
 8009248:	6878      	ldr	r0, [r7, #4]
 800924a:	f000 f8b1 	bl	80093b0 <SPI_CloseRxTx_ISR>
    }
  }
}
 800924e:	bf00      	nop
 8009250:	3708      	adds	r7, #8
 8009252:	46bd      	mov	sp, r7
 8009254:	bd80      	pop	{r7, pc}

08009256 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009256:	b580      	push	{r7, lr}
 8009258:	b084      	sub	sp, #16
 800925a:	af00      	add	r7, sp, #0
 800925c:	60f8      	str	r0, [r7, #12]
 800925e:	60b9      	str	r1, [r7, #8]
 8009260:	603b      	str	r3, [r7, #0]
 8009262:	4613      	mov	r3, r2
 8009264:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009266:	e04c      	b.n	8009302 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009268:	683b      	ldr	r3, [r7, #0]
 800926a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800926e:	d048      	beq.n	8009302 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8009270:	f7fc fa12 	bl	8005698 <HAL_GetTick>
 8009274:	4602      	mov	r2, r0
 8009276:	69bb      	ldr	r3, [r7, #24]
 8009278:	1ad3      	subs	r3, r2, r3
 800927a:	683a      	ldr	r2, [r7, #0]
 800927c:	429a      	cmp	r2, r3
 800927e:	d902      	bls.n	8009286 <SPI_WaitFlagStateUntilTimeout+0x30>
 8009280:	683b      	ldr	r3, [r7, #0]
 8009282:	2b00      	cmp	r3, #0
 8009284:	d13d      	bne.n	8009302 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	685a      	ldr	r2, [r3, #4]
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009294:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	685b      	ldr	r3, [r3, #4]
 800929a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800929e:	d111      	bne.n	80092c4 <SPI_WaitFlagStateUntilTimeout+0x6e>
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	689b      	ldr	r3, [r3, #8]
 80092a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80092a8:	d004      	beq.n	80092b4 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	689b      	ldr	r3, [r3, #8]
 80092ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80092b2:	d107      	bne.n	80092c4 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	681a      	ldr	r2, [r3, #0]
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80092c2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80092cc:	d10f      	bne.n	80092ee <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	681a      	ldr	r2, [r3, #0]
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80092dc:	601a      	str	r2, [r3, #0]
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	681a      	ldr	r2, [r3, #0]
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80092ec:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	2201      	movs	r2, #1
 80092f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	2200      	movs	r2, #0
 80092fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80092fe:	2303      	movs	r3, #3
 8009300:	e00f      	b.n	8009322 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	689a      	ldr	r2, [r3, #8]
 8009308:	68bb      	ldr	r3, [r7, #8]
 800930a:	4013      	ands	r3, r2
 800930c:	68ba      	ldr	r2, [r7, #8]
 800930e:	429a      	cmp	r2, r3
 8009310:	bf0c      	ite	eq
 8009312:	2301      	moveq	r3, #1
 8009314:	2300      	movne	r3, #0
 8009316:	b2db      	uxtb	r3, r3
 8009318:	461a      	mov	r2, r3
 800931a:	79fb      	ldrb	r3, [r7, #7]
 800931c:	429a      	cmp	r2, r3
 800931e:	d1a3      	bne.n	8009268 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8009320:	2300      	movs	r3, #0
}
 8009322:	4618      	mov	r0, r3
 8009324:	3710      	adds	r7, #16
 8009326:	46bd      	mov	sp, r7
 8009328:	bd80      	pop	{r7, pc}
	...

0800932c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800932c:	b580      	push	{r7, lr}
 800932e:	b088      	sub	sp, #32
 8009330:	af02      	add	r7, sp, #8
 8009332:	60f8      	str	r0, [r7, #12]
 8009334:	60b9      	str	r1, [r7, #8]
 8009336:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8009338:	4b1b      	ldr	r3, [pc, #108]	; (80093a8 <SPI_EndRxTxTransaction+0x7c>)
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	4a1b      	ldr	r2, [pc, #108]	; (80093ac <SPI_EndRxTxTransaction+0x80>)
 800933e:	fba2 2303 	umull	r2, r3, r2, r3
 8009342:	0d5b      	lsrs	r3, r3, #21
 8009344:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009348:	fb02 f303 	mul.w	r3, r2, r3
 800934c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	685b      	ldr	r3, [r3, #4]
 8009352:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009356:	d112      	bne.n	800937e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	9300      	str	r3, [sp, #0]
 800935c:	68bb      	ldr	r3, [r7, #8]
 800935e:	2200      	movs	r2, #0
 8009360:	2180      	movs	r1, #128	; 0x80
 8009362:	68f8      	ldr	r0, [r7, #12]
 8009364:	f7ff ff77 	bl	8009256 <SPI_WaitFlagStateUntilTimeout>
 8009368:	4603      	mov	r3, r0
 800936a:	2b00      	cmp	r3, #0
 800936c:	d016      	beq.n	800939c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009372:	f043 0220 	orr.w	r2, r3, #32
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800937a:	2303      	movs	r3, #3
 800937c:	e00f      	b.n	800939e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800937e:	697b      	ldr	r3, [r7, #20]
 8009380:	2b00      	cmp	r3, #0
 8009382:	d00a      	beq.n	800939a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8009384:	697b      	ldr	r3, [r7, #20]
 8009386:	3b01      	subs	r3, #1
 8009388:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	689b      	ldr	r3, [r3, #8]
 8009390:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009394:	2b80      	cmp	r3, #128	; 0x80
 8009396:	d0f2      	beq.n	800937e <SPI_EndRxTxTransaction+0x52>
 8009398:	e000      	b.n	800939c <SPI_EndRxTxTransaction+0x70>
        break;
 800939a:	bf00      	nop
  }

  return HAL_OK;
 800939c:	2300      	movs	r3, #0
}
 800939e:	4618      	mov	r0, r3
 80093a0:	3718      	adds	r7, #24
 80093a2:	46bd      	mov	sp, r7
 80093a4:	bd80      	pop	{r7, pc}
 80093a6:	bf00      	nop
 80093a8:	2000005c 	.word	0x2000005c
 80093ac:	165e9f81 	.word	0x165e9f81

080093b0 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 80093b0:	b580      	push	{r7, lr}
 80093b2:	b086      	sub	sp, #24
 80093b4:	af00      	add	r7, sp, #0
 80093b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 80093b8:	4b35      	ldr	r3, [pc, #212]	; (8009490 <SPI_CloseRxTx_ISR+0xe0>)
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	4a35      	ldr	r2, [pc, #212]	; (8009494 <SPI_CloseRxTx_ISR+0xe4>)
 80093be:	fba2 2303 	umull	r2, r3, r2, r3
 80093c2:	0a5b      	lsrs	r3, r3, #9
 80093c4:	2264      	movs	r2, #100	; 0x64
 80093c6:	fb02 f303 	mul.w	r3, r2, r3
 80093ca:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80093cc:	f7fc f964 	bl	8005698 <HAL_GetTick>
 80093d0:	6178      	str	r0, [r7, #20]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	685a      	ldr	r2, [r3, #4]
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	f022 0220 	bic.w	r2, r2, #32
 80093e0:	605a      	str	r2, [r3, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 80093e2:	693b      	ldr	r3, [r7, #16]
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d106      	bne.n	80093f6 <SPI_CloseRxTx_ISR+0x46>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80093ec:	f043 0220 	orr.w	r2, r3, #32
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80093f4:	e009      	b.n	800940a <SPI_CloseRxTx_ISR+0x5a>
    }
    count--;
 80093f6:	693b      	ldr	r3, [r7, #16]
 80093f8:	3b01      	subs	r3, #1
 80093fa:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	689b      	ldr	r3, [r3, #8]
 8009402:	f003 0302 	and.w	r3, r3, #2
 8009406:	2b00      	cmp	r3, #0
 8009408:	d0eb      	beq.n	80093e2 <SPI_CloseRxTx_ISR+0x32>

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800940a:	697a      	ldr	r2, [r7, #20]
 800940c:	2164      	movs	r1, #100	; 0x64
 800940e:	6878      	ldr	r0, [r7, #4]
 8009410:	f7ff ff8c 	bl	800932c <SPI_EndRxTxTransaction>
 8009414:	4603      	mov	r3, r0
 8009416:	2b00      	cmp	r3, #0
 8009418:	d005      	beq.n	8009426 <SPI_CloseRxTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800941e:	f043 0220 	orr.w	r2, r3, #32
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	689b      	ldr	r3, [r3, #8]
 800942a:	2b00      	cmp	r3, #0
 800942c:	d10a      	bne.n	8009444 <SPI_CloseRxTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800942e:	2300      	movs	r3, #0
 8009430:	60fb      	str	r3, [r7, #12]
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	68db      	ldr	r3, [r3, #12]
 8009438:	60fb      	str	r3, [r7, #12]
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	689b      	ldr	r3, [r3, #8]
 8009440:	60fb      	str	r3, [r7, #12]
 8009442:	68fb      	ldr	r3, [r7, #12]
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009448:	2b00      	cmp	r3, #0
 800944a:	d115      	bne.n	8009478 <SPI_CloseRxTx_ISR+0xc8>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009452:	b2db      	uxtb	r3, r3
 8009454:	2b04      	cmp	r3, #4
 8009456:	d107      	bne.n	8009468 <SPI_CloseRxTx_ISR+0xb8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	2201      	movs	r2, #1
 800945c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8009460:	6878      	ldr	r0, [r7, #4]
 8009462:	f7ff fe0f 	bl	8009084 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8009466:	e00e      	b.n	8009486 <SPI_CloseRxTx_ISR+0xd6>
        hspi->State = HAL_SPI_STATE_READY;
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	2201      	movs	r2, #1
 800946c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        HAL_SPI_TxRxCpltCallback(hspi);
 8009470:	6878      	ldr	r0, [r7, #4]
 8009472:	f7fa fb07 	bl	8003a84 <HAL_SPI_TxRxCpltCallback>
}
 8009476:	e006      	b.n	8009486 <SPI_CloseRxTx_ISR+0xd6>
      hspi->State = HAL_SPI_STATE_READY;
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	2201      	movs	r2, #1
 800947c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      HAL_SPI_ErrorCallback(hspi);
 8009480:	6878      	ldr	r0, [r7, #4]
 8009482:	f7ff fe09 	bl	8009098 <HAL_SPI_ErrorCallback>
}
 8009486:	bf00      	nop
 8009488:	3718      	adds	r7, #24
 800948a:	46bd      	mov	sp, r7
 800948c:	bd80      	pop	{r7, pc}
 800948e:	bf00      	nop
 8009490:	2000005c 	.word	0x2000005c
 8009494:	057619f1 	.word	0x057619f1

08009498 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009498:	b580      	push	{r7, lr}
 800949a:	b082      	sub	sp, #8
 800949c:	af00      	add	r7, sp, #0
 800949e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d101      	bne.n	80094aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80094a6:	2301      	movs	r3, #1
 80094a8:	e01d      	b.n	80094e6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80094b0:	b2db      	uxtb	r3, r3
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d106      	bne.n	80094c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	2200      	movs	r2, #0
 80094ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80094be:	6878      	ldr	r0, [r7, #4]
 80094c0:	f000 f815 	bl	80094ee <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	2202      	movs	r2, #2
 80094c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	681a      	ldr	r2, [r3, #0]
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	3304      	adds	r3, #4
 80094d4:	4619      	mov	r1, r3
 80094d6:	4610      	mov	r0, r2
 80094d8:	f000 fcca 	bl	8009e70 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	2201      	movs	r2, #1
 80094e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80094e4:	2300      	movs	r3, #0
}
 80094e6:	4618      	mov	r0, r3
 80094e8:	3708      	adds	r7, #8
 80094ea:	46bd      	mov	sp, r7
 80094ec:	bd80      	pop	{r7, pc}

080094ee <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80094ee:	b480      	push	{r7}
 80094f0:	b083      	sub	sp, #12
 80094f2:	af00      	add	r7, sp, #0
 80094f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80094f6:	bf00      	nop
 80094f8:	370c      	adds	r7, #12
 80094fa:	46bd      	mov	sp, r7
 80094fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009500:	4770      	bx	lr

08009502 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009502:	b480      	push	{r7}
 8009504:	b085      	sub	sp, #20
 8009506:	af00      	add	r7, sp, #0
 8009508:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	68da      	ldr	r2, [r3, #12]
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	f042 0201 	orr.w	r2, r2, #1
 8009518:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	689b      	ldr	r3, [r3, #8]
 8009520:	f003 0307 	and.w	r3, r3, #7
 8009524:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	2b06      	cmp	r3, #6
 800952a:	d007      	beq.n	800953c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	681a      	ldr	r2, [r3, #0]
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	f042 0201 	orr.w	r2, r2, #1
 800953a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800953c:	2300      	movs	r3, #0
}
 800953e:	4618      	mov	r0, r3
 8009540:	3714      	adds	r7, #20
 8009542:	46bd      	mov	sp, r7
 8009544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009548:	4770      	bx	lr

0800954a <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800954a:	b580      	push	{r7, lr}
 800954c:	b082      	sub	sp, #8
 800954e:	af00      	add	r7, sp, #0
 8009550:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	2b00      	cmp	r3, #0
 8009556:	d101      	bne.n	800955c <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8009558:	2301      	movs	r3, #1
 800955a:	e01d      	b.n	8009598 <HAL_TIM_OC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009562:	b2db      	uxtb	r3, r3
 8009564:	2b00      	cmp	r3, #0
 8009566:	d106      	bne.n	8009576 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	2200      	movs	r2, #0
 800956c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8009570:	6878      	ldr	r0, [r7, #4]
 8009572:	f7fb fe19 	bl	80051a8 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	2202      	movs	r2, #2
 800957a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	681a      	ldr	r2, [r3, #0]
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	3304      	adds	r3, #4
 8009586:	4619      	mov	r1, r3
 8009588:	4610      	mov	r0, r2
 800958a:	f000 fc71 	bl	8009e70 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	2201      	movs	r2, #1
 8009592:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009596:	2300      	movs	r3, #0
}
 8009598:	4618      	mov	r0, r3
 800959a:	3708      	adds	r7, #8
 800959c:	46bd      	mov	sp, r7
 800959e:	bd80      	pop	{r7, pc}

080095a0 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80095a0:	b580      	push	{r7, lr}
 80095a2:	b084      	sub	sp, #16
 80095a4:	af00      	add	r7, sp, #0
 80095a6:	6078      	str	r0, [r7, #4]
 80095a8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	2201      	movs	r2, #1
 80095b0:	6839      	ldr	r1, [r7, #0]
 80095b2:	4618      	mov	r0, r3
 80095b4:	f000 feac 	bl	800a310 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	4a15      	ldr	r2, [pc, #84]	; (8009614 <HAL_TIM_OC_Start+0x74>)
 80095be:	4293      	cmp	r3, r2
 80095c0:	d004      	beq.n	80095cc <HAL_TIM_OC_Start+0x2c>
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	4a14      	ldr	r2, [pc, #80]	; (8009618 <HAL_TIM_OC_Start+0x78>)
 80095c8:	4293      	cmp	r3, r2
 80095ca:	d101      	bne.n	80095d0 <HAL_TIM_OC_Start+0x30>
 80095cc:	2301      	movs	r3, #1
 80095ce:	e000      	b.n	80095d2 <HAL_TIM_OC_Start+0x32>
 80095d0:	2300      	movs	r3, #0
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d007      	beq.n	80095e6 <HAL_TIM_OC_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80095e4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	689b      	ldr	r3, [r3, #8]
 80095ec:	f003 0307 	and.w	r3, r3, #7
 80095f0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	2b06      	cmp	r3, #6
 80095f6:	d007      	beq.n	8009608 <HAL_TIM_OC_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	681a      	ldr	r2, [r3, #0]
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	f042 0201 	orr.w	r2, r2, #1
 8009606:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009608:	2300      	movs	r3, #0
}
 800960a:	4618      	mov	r0, r3
 800960c:	3710      	adds	r7, #16
 800960e:	46bd      	mov	sp, r7
 8009610:	bd80      	pop	{r7, pc}
 8009612:	bf00      	nop
 8009614:	40010000 	.word	0x40010000
 8009618:	40010400 	.word	0x40010400

0800961c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800961c:	b580      	push	{r7, lr}
 800961e:	b082      	sub	sp, #8
 8009620:	af00      	add	r7, sp, #0
 8009622:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	2b00      	cmp	r3, #0
 8009628:	d101      	bne.n	800962e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800962a:	2301      	movs	r3, #1
 800962c:	e01d      	b.n	800966a <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009634:	b2db      	uxtb	r3, r3
 8009636:	2b00      	cmp	r3, #0
 8009638:	d106      	bne.n	8009648 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	2200      	movs	r2, #0
 800963e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009642:	6878      	ldr	r0, [r7, #4]
 8009644:	f7fb fcb0 	bl	8004fa8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	2202      	movs	r2, #2
 800964c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681a      	ldr	r2, [r3, #0]
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	3304      	adds	r3, #4
 8009658:	4619      	mov	r1, r3
 800965a:	4610      	mov	r0, r2
 800965c:	f000 fc08 	bl	8009e70 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	2201      	movs	r2, #1
 8009664:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009668:	2300      	movs	r3, #0
}
 800966a:	4618      	mov	r0, r3
 800966c:	3708      	adds	r7, #8
 800966e:	46bd      	mov	sp, r7
 8009670:	bd80      	pop	{r7, pc}
	...

08009674 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8009674:	b580      	push	{r7, lr}
 8009676:	b086      	sub	sp, #24
 8009678:	af00      	add	r7, sp, #0
 800967a:	60f8      	str	r0, [r7, #12]
 800967c:	60b9      	str	r1, [r7, #8]
 800967e:	607a      	str	r2, [r7, #4]
 8009680:	807b      	strh	r3, [r7, #2]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  if (htim->State == HAL_TIM_STATE_BUSY)
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009688:	b2db      	uxtb	r3, r3
 800968a:	2b02      	cmp	r3, #2
 800968c:	d101      	bne.n	8009692 <HAL_TIM_PWM_Start_DMA+0x1e>
  {
    return HAL_BUSY;
 800968e:	2302      	movs	r3, #2
 8009690:	e0f3      	b.n	800987a <HAL_TIM_PWM_Start_DMA+0x206>
  }
  else if (htim->State == HAL_TIM_STATE_READY)
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009698:	b2db      	uxtb	r3, r3
 800969a:	2b01      	cmp	r3, #1
 800969c:	d10b      	bne.n	80096b6 <HAL_TIM_PWM_Start_DMA+0x42>
  {
    if ((pData == NULL) && (Length > 0U))
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d104      	bne.n	80096ae <HAL_TIM_PWM_Start_DMA+0x3a>
 80096a4:	887b      	ldrh	r3, [r7, #2]
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d001      	beq.n	80096ae <HAL_TIM_PWM_Start_DMA+0x3a>
    {
      return HAL_ERROR;
 80096aa:	2301      	movs	r3, #1
 80096ac:	e0e5      	b.n	800987a <HAL_TIM_PWM_Start_DMA+0x206>
    }
    else
    {
      htim->State = HAL_TIM_STATE_BUSY;
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	2202      	movs	r2, #2
 80096b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80096b6:	68bb      	ldr	r3, [r7, #8]
 80096b8:	2b0c      	cmp	r3, #12
 80096ba:	f200 80ad 	bhi.w	8009818 <HAL_TIM_PWM_Start_DMA+0x1a4>
 80096be:	a201      	add	r2, pc, #4	; (adr r2, 80096c4 <HAL_TIM_PWM_Start_DMA+0x50>)
 80096c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096c4:	080096f9 	.word	0x080096f9
 80096c8:	08009819 	.word	0x08009819
 80096cc:	08009819 	.word	0x08009819
 80096d0:	08009819 	.word	0x08009819
 80096d4:	08009741 	.word	0x08009741
 80096d8:	08009819 	.word	0x08009819
 80096dc:	08009819 	.word	0x08009819
 80096e0:	08009819 	.word	0x08009819
 80096e4:	08009789 	.word	0x08009789
 80096e8:	08009819 	.word	0x08009819
 80096ec:	08009819 	.word	0x08009819
 80096f0:	08009819 	.word	0x08009819
 80096f4:	080097d1 	.word	0x080097d1
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096fc:	4a61      	ldr	r2, [pc, #388]	; (8009884 <HAL_TIM_PWM_Start_DMA+0x210>)
 80096fe:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009704:	4a60      	ldr	r2, [pc, #384]	; (8009888 <HAL_TIM_PWM_Start_DMA+0x214>)
 8009706:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800970c:	4a5f      	ldr	r2, [pc, #380]	; (800988c <HAL_TIM_PWM_Start_DMA+0x218>)
 800970e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1, Length) != HAL_OK)
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8009714:	6879      	ldr	r1, [r7, #4]
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	3334      	adds	r3, #52	; 0x34
 800971c:	461a      	mov	r2, r3
 800971e:	887b      	ldrh	r3, [r7, #2]
 8009720:	f7fc fd64 	bl	80061ec <HAL_DMA_Start_IT>
 8009724:	4603      	mov	r3, r0
 8009726:	2b00      	cmp	r3, #0
 8009728:	d001      	beq.n	800972e <HAL_TIM_PWM_Start_DMA+0xba>
      {
        return HAL_ERROR;
 800972a:	2301      	movs	r3, #1
 800972c:	e0a5      	b.n	800987a <HAL_TIM_PWM_Start_DMA+0x206>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	68da      	ldr	r2, [r3, #12]
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800973c:	60da      	str	r2, [r3, #12]
      break;
 800973e:	e06c      	b.n	800981a <HAL_TIM_PWM_Start_DMA+0x1a6>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009744:	4a4f      	ldr	r2, [pc, #316]	; (8009884 <HAL_TIM_PWM_Start_DMA+0x210>)
 8009746:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800974c:	4a4e      	ldr	r2, [pc, #312]	; (8009888 <HAL_TIM_PWM_Start_DMA+0x214>)
 800974e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009754:	4a4d      	ldr	r2, [pc, #308]	; (800988c <HAL_TIM_PWM_Start_DMA+0x218>)
 8009756:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2, Length) != HAL_OK)
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800975c:	6879      	ldr	r1, [r7, #4]
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	3338      	adds	r3, #56	; 0x38
 8009764:	461a      	mov	r2, r3
 8009766:	887b      	ldrh	r3, [r7, #2]
 8009768:	f7fc fd40 	bl	80061ec <HAL_DMA_Start_IT>
 800976c:	4603      	mov	r3, r0
 800976e:	2b00      	cmp	r3, #0
 8009770:	d001      	beq.n	8009776 <HAL_TIM_PWM_Start_DMA+0x102>
      {
        return HAL_ERROR;
 8009772:	2301      	movs	r3, #1
 8009774:	e081      	b.n	800987a <HAL_TIM_PWM_Start_DMA+0x206>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	68da      	ldr	r2, [r3, #12]
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009784:	60da      	str	r2, [r3, #12]
      break;
 8009786:	e048      	b.n	800981a <HAL_TIM_PWM_Start_DMA+0x1a6>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800978c:	4a3d      	ldr	r2, [pc, #244]	; (8009884 <HAL_TIM_PWM_Start_DMA+0x210>)
 800978e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009794:	4a3c      	ldr	r2, [pc, #240]	; (8009888 <HAL_TIM_PWM_Start_DMA+0x214>)
 8009796:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800979c:	4a3b      	ldr	r2, [pc, #236]	; (800988c <HAL_TIM_PWM_Start_DMA+0x218>)
 800979e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3, Length) != HAL_OK)
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80097a4:	6879      	ldr	r1, [r7, #4]
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	333c      	adds	r3, #60	; 0x3c
 80097ac:	461a      	mov	r2, r3
 80097ae:	887b      	ldrh	r3, [r7, #2]
 80097b0:	f7fc fd1c 	bl	80061ec <HAL_DMA_Start_IT>
 80097b4:	4603      	mov	r3, r0
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d001      	beq.n	80097be <HAL_TIM_PWM_Start_DMA+0x14a>
      {
        return HAL_ERROR;
 80097ba:	2301      	movs	r3, #1
 80097bc:	e05d      	b.n	800987a <HAL_TIM_PWM_Start_DMA+0x206>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	68da      	ldr	r2, [r3, #12]
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80097cc:	60da      	str	r2, [r3, #12]
      break;
 80097ce:	e024      	b.n	800981a <HAL_TIM_PWM_Start_DMA+0x1a6>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097d4:	4a2b      	ldr	r2, [pc, #172]	; (8009884 <HAL_TIM_PWM_Start_DMA+0x210>)
 80097d6:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097dc:	4a2a      	ldr	r2, [pc, #168]	; (8009888 <HAL_TIM_PWM_Start_DMA+0x214>)
 80097de:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097e4:	4a29      	ldr	r2, [pc, #164]	; (800988c <HAL_TIM_PWM_Start_DMA+0x218>)
 80097e6:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4, Length) != HAL_OK)
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80097ec:	6879      	ldr	r1, [r7, #4]
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	3340      	adds	r3, #64	; 0x40
 80097f4:	461a      	mov	r2, r3
 80097f6:	887b      	ldrh	r3, [r7, #2]
 80097f8:	f7fc fcf8 	bl	80061ec <HAL_DMA_Start_IT>
 80097fc:	4603      	mov	r3, r0
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d001      	beq.n	8009806 <HAL_TIM_PWM_Start_DMA+0x192>
      {
        return HAL_ERROR;
 8009802:	2301      	movs	r3, #1
 8009804:	e039      	b.n	800987a <HAL_TIM_PWM_Start_DMA+0x206>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	68da      	ldr	r2, [r3, #12]
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009814:	60da      	str	r2, [r3, #12]
      break;
 8009816:	e000      	b.n	800981a <HAL_TIM_PWM_Start_DMA+0x1a6>
    }

    default:
      break;
 8009818:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	2201      	movs	r2, #1
 8009820:	68b9      	ldr	r1, [r7, #8]
 8009822:	4618      	mov	r0, r3
 8009824:	f000 fd74 	bl	800a310 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	4a18      	ldr	r2, [pc, #96]	; (8009890 <HAL_TIM_PWM_Start_DMA+0x21c>)
 800982e:	4293      	cmp	r3, r2
 8009830:	d004      	beq.n	800983c <HAL_TIM_PWM_Start_DMA+0x1c8>
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	4a17      	ldr	r2, [pc, #92]	; (8009894 <HAL_TIM_PWM_Start_DMA+0x220>)
 8009838:	4293      	cmp	r3, r2
 800983a:	d101      	bne.n	8009840 <HAL_TIM_PWM_Start_DMA+0x1cc>
 800983c:	2301      	movs	r3, #1
 800983e:	e000      	b.n	8009842 <HAL_TIM_PWM_Start_DMA+0x1ce>
 8009840:	2300      	movs	r3, #0
 8009842:	2b00      	cmp	r3, #0
 8009844:	d007      	beq.n	8009856 <HAL_TIM_PWM_Start_DMA+0x1e2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009854:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	689b      	ldr	r3, [r3, #8]
 800985c:	f003 0307 	and.w	r3, r3, #7
 8009860:	617b      	str	r3, [r7, #20]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009862:	697b      	ldr	r3, [r7, #20]
 8009864:	2b06      	cmp	r3, #6
 8009866:	d007      	beq.n	8009878 <HAL_TIM_PWM_Start_DMA+0x204>
  {
    __HAL_TIM_ENABLE(htim);
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	681a      	ldr	r2, [r3, #0]
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	f042 0201 	orr.w	r2, r2, #1
 8009876:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009878:	2300      	movs	r3, #0
}
 800987a:	4618      	mov	r0, r3
 800987c:	3718      	adds	r7, #24
 800987e:	46bd      	mov	sp, r7
 8009880:	bd80      	pop	{r7, pc}
 8009882:	bf00      	nop
 8009884:	08009d91 	.word	0x08009d91
 8009888:	08009e01 	.word	0x08009e01
 800988c:	08009d6d 	.word	0x08009d6d
 8009890:	40010000 	.word	0x40010000
 8009894:	40010400 	.word	0x40010400

08009898 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009898:	b580      	push	{r7, lr}
 800989a:	b082      	sub	sp, #8
 800989c:	af00      	add	r7, sp, #0
 800989e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	691b      	ldr	r3, [r3, #16]
 80098a6:	f003 0302 	and.w	r3, r3, #2
 80098aa:	2b02      	cmp	r3, #2
 80098ac:	d122      	bne.n	80098f4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	68db      	ldr	r3, [r3, #12]
 80098b4:	f003 0302 	and.w	r3, r3, #2
 80098b8:	2b02      	cmp	r3, #2
 80098ba:	d11b      	bne.n	80098f4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	f06f 0202 	mvn.w	r2, #2
 80098c4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	2201      	movs	r2, #1
 80098ca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	699b      	ldr	r3, [r3, #24]
 80098d2:	f003 0303 	and.w	r3, r3, #3
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d003      	beq.n	80098e2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80098da:	6878      	ldr	r0, [r7, #4]
 80098dc:	f000 fa14 	bl	8009d08 <HAL_TIM_IC_CaptureCallback>
 80098e0:	e005      	b.n	80098ee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80098e2:	6878      	ldr	r0, [r7, #4]
 80098e4:	f000 fa06 	bl	8009cf4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80098e8:	6878      	ldr	r0, [r7, #4]
 80098ea:	f000 fa17 	bl	8009d1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	2200      	movs	r2, #0
 80098f2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	691b      	ldr	r3, [r3, #16]
 80098fa:	f003 0304 	and.w	r3, r3, #4
 80098fe:	2b04      	cmp	r3, #4
 8009900:	d122      	bne.n	8009948 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	68db      	ldr	r3, [r3, #12]
 8009908:	f003 0304 	and.w	r3, r3, #4
 800990c:	2b04      	cmp	r3, #4
 800990e:	d11b      	bne.n	8009948 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	f06f 0204 	mvn.w	r2, #4
 8009918:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	2202      	movs	r2, #2
 800991e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	699b      	ldr	r3, [r3, #24]
 8009926:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800992a:	2b00      	cmp	r3, #0
 800992c:	d003      	beq.n	8009936 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800992e:	6878      	ldr	r0, [r7, #4]
 8009930:	f000 f9ea 	bl	8009d08 <HAL_TIM_IC_CaptureCallback>
 8009934:	e005      	b.n	8009942 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009936:	6878      	ldr	r0, [r7, #4]
 8009938:	f000 f9dc 	bl	8009cf4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800993c:	6878      	ldr	r0, [r7, #4]
 800993e:	f000 f9ed 	bl	8009d1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	2200      	movs	r2, #0
 8009946:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	691b      	ldr	r3, [r3, #16]
 800994e:	f003 0308 	and.w	r3, r3, #8
 8009952:	2b08      	cmp	r3, #8
 8009954:	d122      	bne.n	800999c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	68db      	ldr	r3, [r3, #12]
 800995c:	f003 0308 	and.w	r3, r3, #8
 8009960:	2b08      	cmp	r3, #8
 8009962:	d11b      	bne.n	800999c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	f06f 0208 	mvn.w	r2, #8
 800996c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	2204      	movs	r2, #4
 8009972:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	69db      	ldr	r3, [r3, #28]
 800997a:	f003 0303 	and.w	r3, r3, #3
 800997e:	2b00      	cmp	r3, #0
 8009980:	d003      	beq.n	800998a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009982:	6878      	ldr	r0, [r7, #4]
 8009984:	f000 f9c0 	bl	8009d08 <HAL_TIM_IC_CaptureCallback>
 8009988:	e005      	b.n	8009996 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800998a:	6878      	ldr	r0, [r7, #4]
 800998c:	f000 f9b2 	bl	8009cf4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009990:	6878      	ldr	r0, [r7, #4]
 8009992:	f000 f9c3 	bl	8009d1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	2200      	movs	r2, #0
 800999a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	691b      	ldr	r3, [r3, #16]
 80099a2:	f003 0310 	and.w	r3, r3, #16
 80099a6:	2b10      	cmp	r3, #16
 80099a8:	d122      	bne.n	80099f0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	68db      	ldr	r3, [r3, #12]
 80099b0:	f003 0310 	and.w	r3, r3, #16
 80099b4:	2b10      	cmp	r3, #16
 80099b6:	d11b      	bne.n	80099f0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	f06f 0210 	mvn.w	r2, #16
 80099c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	2208      	movs	r2, #8
 80099c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	69db      	ldr	r3, [r3, #28]
 80099ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d003      	beq.n	80099de <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80099d6:	6878      	ldr	r0, [r7, #4]
 80099d8:	f000 f996 	bl	8009d08 <HAL_TIM_IC_CaptureCallback>
 80099dc:	e005      	b.n	80099ea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80099de:	6878      	ldr	r0, [r7, #4]
 80099e0:	f000 f988 	bl	8009cf4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80099e4:	6878      	ldr	r0, [r7, #4]
 80099e6:	f000 f999 	bl	8009d1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	2200      	movs	r2, #0
 80099ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	691b      	ldr	r3, [r3, #16]
 80099f6:	f003 0301 	and.w	r3, r3, #1
 80099fa:	2b01      	cmp	r3, #1
 80099fc:	d10e      	bne.n	8009a1c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	68db      	ldr	r3, [r3, #12]
 8009a04:	f003 0301 	and.w	r3, r3, #1
 8009a08:	2b01      	cmp	r3, #1
 8009a0a:	d107      	bne.n	8009a1c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	f06f 0201 	mvn.w	r2, #1
 8009a14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009a16:	6878      	ldr	r0, [r7, #4]
 8009a18:	f7fa f89a 	bl	8003b50 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	691b      	ldr	r3, [r3, #16]
 8009a22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a26:	2b80      	cmp	r3, #128	; 0x80
 8009a28:	d10e      	bne.n	8009a48 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	68db      	ldr	r3, [r3, #12]
 8009a30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a34:	2b80      	cmp	r3, #128	; 0x80
 8009a36:	d107      	bne.n	8009a48 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009a40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009a42:	6878      	ldr	r0, [r7, #4]
 8009a44:	f000 fd10 	bl	800a468 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	691b      	ldr	r3, [r3, #16]
 8009a4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a52:	2b40      	cmp	r3, #64	; 0x40
 8009a54:	d10e      	bne.n	8009a74 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	68db      	ldr	r3, [r3, #12]
 8009a5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a60:	2b40      	cmp	r3, #64	; 0x40
 8009a62:	d107      	bne.n	8009a74 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009a6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009a6e:	6878      	ldr	r0, [r7, #4]
 8009a70:	f000 f968 	bl	8009d44 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	691b      	ldr	r3, [r3, #16]
 8009a7a:	f003 0320 	and.w	r3, r3, #32
 8009a7e:	2b20      	cmp	r3, #32
 8009a80:	d10e      	bne.n	8009aa0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	68db      	ldr	r3, [r3, #12]
 8009a88:	f003 0320 	and.w	r3, r3, #32
 8009a8c:	2b20      	cmp	r3, #32
 8009a8e:	d107      	bne.n	8009aa0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	f06f 0220 	mvn.w	r2, #32
 8009a98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009a9a:	6878      	ldr	r0, [r7, #4]
 8009a9c:	f000 fcda 	bl	800a454 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009aa0:	bf00      	nop
 8009aa2:	3708      	adds	r7, #8
 8009aa4:	46bd      	mov	sp, r7
 8009aa6:	bd80      	pop	{r7, pc}

08009aa8 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8009aa8:	b580      	push	{r7, lr}
 8009aaa:	b084      	sub	sp, #16
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	60f8      	str	r0, [r7, #12]
 8009ab0:	60b9      	str	r1, [r7, #8]
 8009ab2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009aba:	2b01      	cmp	r3, #1
 8009abc:	d101      	bne.n	8009ac2 <HAL_TIM_OC_ConfigChannel+0x1a>
 8009abe:	2302      	movs	r3, #2
 8009ac0:	e04e      	b.n	8009b60 <HAL_TIM_OC_ConfigChannel+0xb8>
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	2201      	movs	r2, #1
 8009ac6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	2202      	movs	r2, #2
 8009ace:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	2b0c      	cmp	r3, #12
 8009ad6:	d839      	bhi.n	8009b4c <HAL_TIM_OC_ConfigChannel+0xa4>
 8009ad8:	a201      	add	r2, pc, #4	; (adr r2, 8009ae0 <HAL_TIM_OC_ConfigChannel+0x38>)
 8009ada:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ade:	bf00      	nop
 8009ae0:	08009b15 	.word	0x08009b15
 8009ae4:	08009b4d 	.word	0x08009b4d
 8009ae8:	08009b4d 	.word	0x08009b4d
 8009aec:	08009b4d 	.word	0x08009b4d
 8009af0:	08009b23 	.word	0x08009b23
 8009af4:	08009b4d 	.word	0x08009b4d
 8009af8:	08009b4d 	.word	0x08009b4d
 8009afc:	08009b4d 	.word	0x08009b4d
 8009b00:	08009b31 	.word	0x08009b31
 8009b04:	08009b4d 	.word	0x08009b4d
 8009b08:	08009b4d 	.word	0x08009b4d
 8009b0c:	08009b4d 	.word	0x08009b4d
 8009b10:	08009b3f 	.word	0x08009b3f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	68b9      	ldr	r1, [r7, #8]
 8009b1a:	4618      	mov	r0, r3
 8009b1c:	f000 fa48 	bl	8009fb0 <TIM_OC1_SetConfig>
      break;
 8009b20:	e015      	b.n	8009b4e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	68b9      	ldr	r1, [r7, #8]
 8009b28:	4618      	mov	r0, r3
 8009b2a:	f000 fab1 	bl	800a090 <TIM_OC2_SetConfig>
      break;
 8009b2e:	e00e      	b.n	8009b4e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	68b9      	ldr	r1, [r7, #8]
 8009b36:	4618      	mov	r0, r3
 8009b38:	f000 fb20 	bl	800a17c <TIM_OC3_SetConfig>
      break;
 8009b3c:	e007      	b.n	8009b4e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	68b9      	ldr	r1, [r7, #8]
 8009b44:	4618      	mov	r0, r3
 8009b46:	f000 fb8d 	bl	800a264 <TIM_OC4_SetConfig>
      break;
 8009b4a:	e000      	b.n	8009b4e <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      break;
 8009b4c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	2201      	movs	r2, #1
 8009b52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	2200      	movs	r2, #0
 8009b5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009b5e:	2300      	movs	r3, #0
}
 8009b60:	4618      	mov	r0, r3
 8009b62:	3710      	adds	r7, #16
 8009b64:	46bd      	mov	sp, r7
 8009b66:	bd80      	pop	{r7, pc}

08009b68 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009b68:	b580      	push	{r7, lr}
 8009b6a:	b084      	sub	sp, #16
 8009b6c:	af00      	add	r7, sp, #0
 8009b6e:	60f8      	str	r0, [r7, #12]
 8009b70:	60b9      	str	r1, [r7, #8]
 8009b72:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009b7a:	2b01      	cmp	r3, #1
 8009b7c:	d101      	bne.n	8009b82 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8009b7e:	2302      	movs	r3, #2
 8009b80:	e0b4      	b.n	8009cec <HAL_TIM_PWM_ConfigChannel+0x184>
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	2201      	movs	r2, #1
 8009b86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	2202      	movs	r2, #2
 8009b8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	2b0c      	cmp	r3, #12
 8009b96:	f200 809f 	bhi.w	8009cd8 <HAL_TIM_PWM_ConfigChannel+0x170>
 8009b9a:	a201      	add	r2, pc, #4	; (adr r2, 8009ba0 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8009b9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ba0:	08009bd5 	.word	0x08009bd5
 8009ba4:	08009cd9 	.word	0x08009cd9
 8009ba8:	08009cd9 	.word	0x08009cd9
 8009bac:	08009cd9 	.word	0x08009cd9
 8009bb0:	08009c15 	.word	0x08009c15
 8009bb4:	08009cd9 	.word	0x08009cd9
 8009bb8:	08009cd9 	.word	0x08009cd9
 8009bbc:	08009cd9 	.word	0x08009cd9
 8009bc0:	08009c57 	.word	0x08009c57
 8009bc4:	08009cd9 	.word	0x08009cd9
 8009bc8:	08009cd9 	.word	0x08009cd9
 8009bcc:	08009cd9 	.word	0x08009cd9
 8009bd0:	08009c97 	.word	0x08009c97
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	68b9      	ldr	r1, [r7, #8]
 8009bda:	4618      	mov	r0, r3
 8009bdc:	f000 f9e8 	bl	8009fb0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	699a      	ldr	r2, [r3, #24]
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	f042 0208 	orr.w	r2, r2, #8
 8009bee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	699a      	ldr	r2, [r3, #24]
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	f022 0204 	bic.w	r2, r2, #4
 8009bfe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	6999      	ldr	r1, [r3, #24]
 8009c06:	68bb      	ldr	r3, [r7, #8]
 8009c08:	691a      	ldr	r2, [r3, #16]
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	430a      	orrs	r2, r1
 8009c10:	619a      	str	r2, [r3, #24]
      break;
 8009c12:	e062      	b.n	8009cda <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	68b9      	ldr	r1, [r7, #8]
 8009c1a:	4618      	mov	r0, r3
 8009c1c:	f000 fa38 	bl	800a090 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	699a      	ldr	r2, [r3, #24]
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009c2e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	699a      	ldr	r2, [r3, #24]
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009c3e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	6999      	ldr	r1, [r3, #24]
 8009c46:	68bb      	ldr	r3, [r7, #8]
 8009c48:	691b      	ldr	r3, [r3, #16]
 8009c4a:	021a      	lsls	r2, r3, #8
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	430a      	orrs	r2, r1
 8009c52:	619a      	str	r2, [r3, #24]
      break;
 8009c54:	e041      	b.n	8009cda <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	68b9      	ldr	r1, [r7, #8]
 8009c5c:	4618      	mov	r0, r3
 8009c5e:	f000 fa8d 	bl	800a17c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	69da      	ldr	r2, [r3, #28]
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	f042 0208 	orr.w	r2, r2, #8
 8009c70:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	69da      	ldr	r2, [r3, #28]
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	f022 0204 	bic.w	r2, r2, #4
 8009c80:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	69d9      	ldr	r1, [r3, #28]
 8009c88:	68bb      	ldr	r3, [r7, #8]
 8009c8a:	691a      	ldr	r2, [r3, #16]
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	430a      	orrs	r2, r1
 8009c92:	61da      	str	r2, [r3, #28]
      break;
 8009c94:	e021      	b.n	8009cda <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	68b9      	ldr	r1, [r7, #8]
 8009c9c:	4618      	mov	r0, r3
 8009c9e:	f000 fae1 	bl	800a264 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	69da      	ldr	r2, [r3, #28]
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009cb0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	69da      	ldr	r2, [r3, #28]
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009cc0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	69d9      	ldr	r1, [r3, #28]
 8009cc8:	68bb      	ldr	r3, [r7, #8]
 8009cca:	691b      	ldr	r3, [r3, #16]
 8009ccc:	021a      	lsls	r2, r3, #8
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	430a      	orrs	r2, r1
 8009cd4:	61da      	str	r2, [r3, #28]
      break;
 8009cd6:	e000      	b.n	8009cda <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8009cd8:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	2201      	movs	r2, #1
 8009cde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	2200      	movs	r2, #0
 8009ce6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009cea:	2300      	movs	r3, #0
}
 8009cec:	4618      	mov	r0, r3
 8009cee:	3710      	adds	r7, #16
 8009cf0:	46bd      	mov	sp, r7
 8009cf2:	bd80      	pop	{r7, pc}

08009cf4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009cf4:	b480      	push	{r7}
 8009cf6:	b083      	sub	sp, #12
 8009cf8:	af00      	add	r7, sp, #0
 8009cfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009cfc:	bf00      	nop
 8009cfe:	370c      	adds	r7, #12
 8009d00:	46bd      	mov	sp, r7
 8009d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d06:	4770      	bx	lr

08009d08 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009d08:	b480      	push	{r7}
 8009d0a:	b083      	sub	sp, #12
 8009d0c:	af00      	add	r7, sp, #0
 8009d0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009d10:	bf00      	nop
 8009d12:	370c      	adds	r7, #12
 8009d14:	46bd      	mov	sp, r7
 8009d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d1a:	4770      	bx	lr

08009d1c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009d1c:	b480      	push	{r7}
 8009d1e:	b083      	sub	sp, #12
 8009d20:	af00      	add	r7, sp, #0
 8009d22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009d24:	bf00      	nop
 8009d26:	370c      	adds	r7, #12
 8009d28:	46bd      	mov	sp, r7
 8009d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d2e:	4770      	bx	lr

08009d30 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8009d30:	b480      	push	{r7}
 8009d32:	b083      	sub	sp, #12
 8009d34:	af00      	add	r7, sp, #0
 8009d36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8009d38:	bf00      	nop
 8009d3a:	370c      	adds	r7, #12
 8009d3c:	46bd      	mov	sp, r7
 8009d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d42:	4770      	bx	lr

08009d44 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009d44:	b480      	push	{r7}
 8009d46:	b083      	sub	sp, #12
 8009d48:	af00      	add	r7, sp, #0
 8009d4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009d4c:	bf00      	nop
 8009d4e:	370c      	adds	r7, #12
 8009d50:	46bd      	mov	sp, r7
 8009d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d56:	4770      	bx	lr

08009d58 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8009d58:	b480      	push	{r7}
 8009d5a:	b083      	sub	sp, #12
 8009d5c:	af00      	add	r7, sp, #0
 8009d5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8009d60:	bf00      	nop
 8009d62:	370c      	adds	r7, #12
 8009d64:	46bd      	mov	sp, r7
 8009d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d6a:	4770      	bx	lr

08009d6c <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8009d6c:	b580      	push	{r7, lr}
 8009d6e:	b084      	sub	sp, #16
 8009d70:	af00      	add	r7, sp, #0
 8009d72:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d78:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	2201      	movs	r2, #1
 8009d7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8009d82:	68f8      	ldr	r0, [r7, #12]
 8009d84:	f7ff ffe8 	bl	8009d58 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
}
 8009d88:	bf00      	nop
 8009d8a:	3710      	adds	r7, #16
 8009d8c:	46bd      	mov	sp, r7
 8009d8e:	bd80      	pop	{r7, pc}

08009d90 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8009d90:	b580      	push	{r7, lr}
 8009d92:	b084      	sub	sp, #16
 8009d94:	af00      	add	r7, sp, #0
 8009d96:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d9c:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	2201      	movs	r2, #1
 8009da2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009daa:	687a      	ldr	r2, [r7, #4]
 8009dac:	429a      	cmp	r2, r3
 8009dae:	d103      	bne.n	8009db8 <TIM_DMADelayPulseCplt+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	2201      	movs	r2, #1
 8009db4:	771a      	strb	r2, [r3, #28]
 8009db6:	e019      	b.n	8009dec <TIM_DMADelayPulseCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009dbc:	687a      	ldr	r2, [r7, #4]
 8009dbe:	429a      	cmp	r2, r3
 8009dc0:	d103      	bne.n	8009dca <TIM_DMADelayPulseCplt+0x3a>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	2202      	movs	r2, #2
 8009dc6:	771a      	strb	r2, [r3, #28]
 8009dc8:	e010      	b.n	8009dec <TIM_DMADelayPulseCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dce:	687a      	ldr	r2, [r7, #4]
 8009dd0:	429a      	cmp	r2, r3
 8009dd2:	d103      	bne.n	8009ddc <TIM_DMADelayPulseCplt+0x4c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	2204      	movs	r2, #4
 8009dd8:	771a      	strb	r2, [r3, #28]
 8009dda:	e007      	b.n	8009dec <TIM_DMADelayPulseCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009de0:	687a      	ldr	r2, [r7, #4]
 8009de2:	429a      	cmp	r2, r3
 8009de4:	d102      	bne.n	8009dec <TIM_DMADelayPulseCplt+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	2208      	movs	r2, #8
 8009dea:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009dec:	68f8      	ldr	r0, [r7, #12]
 8009dee:	f7ff ff95 	bl	8009d1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	2200      	movs	r2, #0
 8009df6:	771a      	strb	r2, [r3, #28]
}
 8009df8:	bf00      	nop
 8009dfa:	3710      	adds	r7, #16
 8009dfc:	46bd      	mov	sp, r7
 8009dfe:	bd80      	pop	{r7, pc}

08009e00 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009e00:	b580      	push	{r7, lr}
 8009e02:	b084      	sub	sp, #16
 8009e04:	af00      	add	r7, sp, #0
 8009e06:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e0c:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	2201      	movs	r2, #1
 8009e12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e1a:	687a      	ldr	r2, [r7, #4]
 8009e1c:	429a      	cmp	r2, r3
 8009e1e:	d103      	bne.n	8009e28 <TIM_DMADelayPulseHalfCplt+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	2201      	movs	r2, #1
 8009e24:	771a      	strb	r2, [r3, #28]
 8009e26:	e019      	b.n	8009e5c <TIM_DMADelayPulseHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e2c:	687a      	ldr	r2, [r7, #4]
 8009e2e:	429a      	cmp	r2, r3
 8009e30:	d103      	bne.n	8009e3a <TIM_DMADelayPulseHalfCplt+0x3a>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	2202      	movs	r2, #2
 8009e36:	771a      	strb	r2, [r3, #28]
 8009e38:	e010      	b.n	8009e5c <TIM_DMADelayPulseHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e3e:	687a      	ldr	r2, [r7, #4]
 8009e40:	429a      	cmp	r2, r3
 8009e42:	d103      	bne.n	8009e4c <TIM_DMADelayPulseHalfCplt+0x4c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	2204      	movs	r2, #4
 8009e48:	771a      	strb	r2, [r3, #28]
 8009e4a:	e007      	b.n	8009e5c <TIM_DMADelayPulseHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e50:	687a      	ldr	r2, [r7, #4]
 8009e52:	429a      	cmp	r2, r3
 8009e54:	d102      	bne.n	8009e5c <TIM_DMADelayPulseHalfCplt+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	2208      	movs	r2, #8
 8009e5a:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8009e5c:	68f8      	ldr	r0, [r7, #12]
 8009e5e:	f7ff ff67 	bl	8009d30 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	2200      	movs	r2, #0
 8009e66:	771a      	strb	r2, [r3, #28]
}
 8009e68:	bf00      	nop
 8009e6a:	3710      	adds	r7, #16
 8009e6c:	46bd      	mov	sp, r7
 8009e6e:	bd80      	pop	{r7, pc}

08009e70 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009e70:	b480      	push	{r7}
 8009e72:	b085      	sub	sp, #20
 8009e74:	af00      	add	r7, sp, #0
 8009e76:	6078      	str	r0, [r7, #4]
 8009e78:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	4a40      	ldr	r2, [pc, #256]	; (8009f84 <TIM_Base_SetConfig+0x114>)
 8009e84:	4293      	cmp	r3, r2
 8009e86:	d013      	beq.n	8009eb0 <TIM_Base_SetConfig+0x40>
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009e8e:	d00f      	beq.n	8009eb0 <TIM_Base_SetConfig+0x40>
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	4a3d      	ldr	r2, [pc, #244]	; (8009f88 <TIM_Base_SetConfig+0x118>)
 8009e94:	4293      	cmp	r3, r2
 8009e96:	d00b      	beq.n	8009eb0 <TIM_Base_SetConfig+0x40>
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	4a3c      	ldr	r2, [pc, #240]	; (8009f8c <TIM_Base_SetConfig+0x11c>)
 8009e9c:	4293      	cmp	r3, r2
 8009e9e:	d007      	beq.n	8009eb0 <TIM_Base_SetConfig+0x40>
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	4a3b      	ldr	r2, [pc, #236]	; (8009f90 <TIM_Base_SetConfig+0x120>)
 8009ea4:	4293      	cmp	r3, r2
 8009ea6:	d003      	beq.n	8009eb0 <TIM_Base_SetConfig+0x40>
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	4a3a      	ldr	r2, [pc, #232]	; (8009f94 <TIM_Base_SetConfig+0x124>)
 8009eac:	4293      	cmp	r3, r2
 8009eae:	d108      	bne.n	8009ec2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009eb6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009eb8:	683b      	ldr	r3, [r7, #0]
 8009eba:	685b      	ldr	r3, [r3, #4]
 8009ebc:	68fa      	ldr	r2, [r7, #12]
 8009ebe:	4313      	orrs	r3, r2
 8009ec0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	4a2f      	ldr	r2, [pc, #188]	; (8009f84 <TIM_Base_SetConfig+0x114>)
 8009ec6:	4293      	cmp	r3, r2
 8009ec8:	d02b      	beq.n	8009f22 <TIM_Base_SetConfig+0xb2>
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009ed0:	d027      	beq.n	8009f22 <TIM_Base_SetConfig+0xb2>
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	4a2c      	ldr	r2, [pc, #176]	; (8009f88 <TIM_Base_SetConfig+0x118>)
 8009ed6:	4293      	cmp	r3, r2
 8009ed8:	d023      	beq.n	8009f22 <TIM_Base_SetConfig+0xb2>
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	4a2b      	ldr	r2, [pc, #172]	; (8009f8c <TIM_Base_SetConfig+0x11c>)
 8009ede:	4293      	cmp	r3, r2
 8009ee0:	d01f      	beq.n	8009f22 <TIM_Base_SetConfig+0xb2>
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	4a2a      	ldr	r2, [pc, #168]	; (8009f90 <TIM_Base_SetConfig+0x120>)
 8009ee6:	4293      	cmp	r3, r2
 8009ee8:	d01b      	beq.n	8009f22 <TIM_Base_SetConfig+0xb2>
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	4a29      	ldr	r2, [pc, #164]	; (8009f94 <TIM_Base_SetConfig+0x124>)
 8009eee:	4293      	cmp	r3, r2
 8009ef0:	d017      	beq.n	8009f22 <TIM_Base_SetConfig+0xb2>
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	4a28      	ldr	r2, [pc, #160]	; (8009f98 <TIM_Base_SetConfig+0x128>)
 8009ef6:	4293      	cmp	r3, r2
 8009ef8:	d013      	beq.n	8009f22 <TIM_Base_SetConfig+0xb2>
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	4a27      	ldr	r2, [pc, #156]	; (8009f9c <TIM_Base_SetConfig+0x12c>)
 8009efe:	4293      	cmp	r3, r2
 8009f00:	d00f      	beq.n	8009f22 <TIM_Base_SetConfig+0xb2>
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	4a26      	ldr	r2, [pc, #152]	; (8009fa0 <TIM_Base_SetConfig+0x130>)
 8009f06:	4293      	cmp	r3, r2
 8009f08:	d00b      	beq.n	8009f22 <TIM_Base_SetConfig+0xb2>
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	4a25      	ldr	r2, [pc, #148]	; (8009fa4 <TIM_Base_SetConfig+0x134>)
 8009f0e:	4293      	cmp	r3, r2
 8009f10:	d007      	beq.n	8009f22 <TIM_Base_SetConfig+0xb2>
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	4a24      	ldr	r2, [pc, #144]	; (8009fa8 <TIM_Base_SetConfig+0x138>)
 8009f16:	4293      	cmp	r3, r2
 8009f18:	d003      	beq.n	8009f22 <TIM_Base_SetConfig+0xb2>
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	4a23      	ldr	r2, [pc, #140]	; (8009fac <TIM_Base_SetConfig+0x13c>)
 8009f1e:	4293      	cmp	r3, r2
 8009f20:	d108      	bne.n	8009f34 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009f28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009f2a:	683b      	ldr	r3, [r7, #0]
 8009f2c:	68db      	ldr	r3, [r3, #12]
 8009f2e:	68fa      	ldr	r2, [r7, #12]
 8009f30:	4313      	orrs	r3, r2
 8009f32:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009f3a:	683b      	ldr	r3, [r7, #0]
 8009f3c:	695b      	ldr	r3, [r3, #20]
 8009f3e:	4313      	orrs	r3, r2
 8009f40:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	68fa      	ldr	r2, [r7, #12]
 8009f46:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009f48:	683b      	ldr	r3, [r7, #0]
 8009f4a:	689a      	ldr	r2, [r3, #8]
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009f50:	683b      	ldr	r3, [r7, #0]
 8009f52:	681a      	ldr	r2, [r3, #0]
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	4a0a      	ldr	r2, [pc, #40]	; (8009f84 <TIM_Base_SetConfig+0x114>)
 8009f5c:	4293      	cmp	r3, r2
 8009f5e:	d003      	beq.n	8009f68 <TIM_Base_SetConfig+0xf8>
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	4a0c      	ldr	r2, [pc, #48]	; (8009f94 <TIM_Base_SetConfig+0x124>)
 8009f64:	4293      	cmp	r3, r2
 8009f66:	d103      	bne.n	8009f70 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009f68:	683b      	ldr	r3, [r7, #0]
 8009f6a:	691a      	ldr	r2, [r3, #16]
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	2201      	movs	r2, #1
 8009f74:	615a      	str	r2, [r3, #20]
}
 8009f76:	bf00      	nop
 8009f78:	3714      	adds	r7, #20
 8009f7a:	46bd      	mov	sp, r7
 8009f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f80:	4770      	bx	lr
 8009f82:	bf00      	nop
 8009f84:	40010000 	.word	0x40010000
 8009f88:	40000400 	.word	0x40000400
 8009f8c:	40000800 	.word	0x40000800
 8009f90:	40000c00 	.word	0x40000c00
 8009f94:	40010400 	.word	0x40010400
 8009f98:	40014000 	.word	0x40014000
 8009f9c:	40014400 	.word	0x40014400
 8009fa0:	40014800 	.word	0x40014800
 8009fa4:	40001800 	.word	0x40001800
 8009fa8:	40001c00 	.word	0x40001c00
 8009fac:	40002000 	.word	0x40002000

08009fb0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009fb0:	b480      	push	{r7}
 8009fb2:	b087      	sub	sp, #28
 8009fb4:	af00      	add	r7, sp, #0
 8009fb6:	6078      	str	r0, [r7, #4]
 8009fb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	6a1b      	ldr	r3, [r3, #32]
 8009fbe:	f023 0201 	bic.w	r2, r3, #1
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	6a1b      	ldr	r3, [r3, #32]
 8009fca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	685b      	ldr	r3, [r3, #4]
 8009fd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	699b      	ldr	r3, [r3, #24]
 8009fd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009fde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	f023 0303 	bic.w	r3, r3, #3
 8009fe6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009fe8:	683b      	ldr	r3, [r7, #0]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	68fa      	ldr	r2, [r7, #12]
 8009fee:	4313      	orrs	r3, r2
 8009ff0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009ff2:	697b      	ldr	r3, [r7, #20]
 8009ff4:	f023 0302 	bic.w	r3, r3, #2
 8009ff8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009ffa:	683b      	ldr	r3, [r7, #0]
 8009ffc:	689b      	ldr	r3, [r3, #8]
 8009ffe:	697a      	ldr	r2, [r7, #20]
 800a000:	4313      	orrs	r3, r2
 800a002:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	4a20      	ldr	r2, [pc, #128]	; (800a088 <TIM_OC1_SetConfig+0xd8>)
 800a008:	4293      	cmp	r3, r2
 800a00a:	d003      	beq.n	800a014 <TIM_OC1_SetConfig+0x64>
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	4a1f      	ldr	r2, [pc, #124]	; (800a08c <TIM_OC1_SetConfig+0xdc>)
 800a010:	4293      	cmp	r3, r2
 800a012:	d10c      	bne.n	800a02e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a014:	697b      	ldr	r3, [r7, #20]
 800a016:	f023 0308 	bic.w	r3, r3, #8
 800a01a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a01c:	683b      	ldr	r3, [r7, #0]
 800a01e:	68db      	ldr	r3, [r3, #12]
 800a020:	697a      	ldr	r2, [r7, #20]
 800a022:	4313      	orrs	r3, r2
 800a024:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a026:	697b      	ldr	r3, [r7, #20]
 800a028:	f023 0304 	bic.w	r3, r3, #4
 800a02c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	4a15      	ldr	r2, [pc, #84]	; (800a088 <TIM_OC1_SetConfig+0xd8>)
 800a032:	4293      	cmp	r3, r2
 800a034:	d003      	beq.n	800a03e <TIM_OC1_SetConfig+0x8e>
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	4a14      	ldr	r2, [pc, #80]	; (800a08c <TIM_OC1_SetConfig+0xdc>)
 800a03a:	4293      	cmp	r3, r2
 800a03c:	d111      	bne.n	800a062 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a03e:	693b      	ldr	r3, [r7, #16]
 800a040:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a044:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a046:	693b      	ldr	r3, [r7, #16]
 800a048:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a04c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a04e:	683b      	ldr	r3, [r7, #0]
 800a050:	695b      	ldr	r3, [r3, #20]
 800a052:	693a      	ldr	r2, [r7, #16]
 800a054:	4313      	orrs	r3, r2
 800a056:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a058:	683b      	ldr	r3, [r7, #0]
 800a05a:	699b      	ldr	r3, [r3, #24]
 800a05c:	693a      	ldr	r2, [r7, #16]
 800a05e:	4313      	orrs	r3, r2
 800a060:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	693a      	ldr	r2, [r7, #16]
 800a066:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	68fa      	ldr	r2, [r7, #12]
 800a06c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a06e:	683b      	ldr	r3, [r7, #0]
 800a070:	685a      	ldr	r2, [r3, #4]
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	697a      	ldr	r2, [r7, #20]
 800a07a:	621a      	str	r2, [r3, #32]
}
 800a07c:	bf00      	nop
 800a07e:	371c      	adds	r7, #28
 800a080:	46bd      	mov	sp, r7
 800a082:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a086:	4770      	bx	lr
 800a088:	40010000 	.word	0x40010000
 800a08c:	40010400 	.word	0x40010400

0800a090 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a090:	b480      	push	{r7}
 800a092:	b087      	sub	sp, #28
 800a094:	af00      	add	r7, sp, #0
 800a096:	6078      	str	r0, [r7, #4]
 800a098:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	6a1b      	ldr	r3, [r3, #32]
 800a09e:	f023 0210 	bic.w	r2, r3, #16
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	6a1b      	ldr	r3, [r3, #32]
 800a0aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	685b      	ldr	r3, [r3, #4]
 800a0b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	699b      	ldr	r3, [r3, #24]
 800a0b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a0be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a0c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a0c8:	683b      	ldr	r3, [r7, #0]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	021b      	lsls	r3, r3, #8
 800a0ce:	68fa      	ldr	r2, [r7, #12]
 800a0d0:	4313      	orrs	r3, r2
 800a0d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a0d4:	697b      	ldr	r3, [r7, #20]
 800a0d6:	f023 0320 	bic.w	r3, r3, #32
 800a0da:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a0dc:	683b      	ldr	r3, [r7, #0]
 800a0de:	689b      	ldr	r3, [r3, #8]
 800a0e0:	011b      	lsls	r3, r3, #4
 800a0e2:	697a      	ldr	r2, [r7, #20]
 800a0e4:	4313      	orrs	r3, r2
 800a0e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	4a22      	ldr	r2, [pc, #136]	; (800a174 <TIM_OC2_SetConfig+0xe4>)
 800a0ec:	4293      	cmp	r3, r2
 800a0ee:	d003      	beq.n	800a0f8 <TIM_OC2_SetConfig+0x68>
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	4a21      	ldr	r2, [pc, #132]	; (800a178 <TIM_OC2_SetConfig+0xe8>)
 800a0f4:	4293      	cmp	r3, r2
 800a0f6:	d10d      	bne.n	800a114 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a0f8:	697b      	ldr	r3, [r7, #20]
 800a0fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a0fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a100:	683b      	ldr	r3, [r7, #0]
 800a102:	68db      	ldr	r3, [r3, #12]
 800a104:	011b      	lsls	r3, r3, #4
 800a106:	697a      	ldr	r2, [r7, #20]
 800a108:	4313      	orrs	r3, r2
 800a10a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a10c:	697b      	ldr	r3, [r7, #20]
 800a10e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a112:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	4a17      	ldr	r2, [pc, #92]	; (800a174 <TIM_OC2_SetConfig+0xe4>)
 800a118:	4293      	cmp	r3, r2
 800a11a:	d003      	beq.n	800a124 <TIM_OC2_SetConfig+0x94>
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	4a16      	ldr	r2, [pc, #88]	; (800a178 <TIM_OC2_SetConfig+0xe8>)
 800a120:	4293      	cmp	r3, r2
 800a122:	d113      	bne.n	800a14c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a124:	693b      	ldr	r3, [r7, #16]
 800a126:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a12a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a12c:	693b      	ldr	r3, [r7, #16]
 800a12e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a132:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a134:	683b      	ldr	r3, [r7, #0]
 800a136:	695b      	ldr	r3, [r3, #20]
 800a138:	009b      	lsls	r3, r3, #2
 800a13a:	693a      	ldr	r2, [r7, #16]
 800a13c:	4313      	orrs	r3, r2
 800a13e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a140:	683b      	ldr	r3, [r7, #0]
 800a142:	699b      	ldr	r3, [r3, #24]
 800a144:	009b      	lsls	r3, r3, #2
 800a146:	693a      	ldr	r2, [r7, #16]
 800a148:	4313      	orrs	r3, r2
 800a14a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	693a      	ldr	r2, [r7, #16]
 800a150:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	68fa      	ldr	r2, [r7, #12]
 800a156:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a158:	683b      	ldr	r3, [r7, #0]
 800a15a:	685a      	ldr	r2, [r3, #4]
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	697a      	ldr	r2, [r7, #20]
 800a164:	621a      	str	r2, [r3, #32]
}
 800a166:	bf00      	nop
 800a168:	371c      	adds	r7, #28
 800a16a:	46bd      	mov	sp, r7
 800a16c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a170:	4770      	bx	lr
 800a172:	bf00      	nop
 800a174:	40010000 	.word	0x40010000
 800a178:	40010400 	.word	0x40010400

0800a17c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a17c:	b480      	push	{r7}
 800a17e:	b087      	sub	sp, #28
 800a180:	af00      	add	r7, sp, #0
 800a182:	6078      	str	r0, [r7, #4]
 800a184:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	6a1b      	ldr	r3, [r3, #32]
 800a18a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	6a1b      	ldr	r3, [r3, #32]
 800a196:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	685b      	ldr	r3, [r3, #4]
 800a19c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	69db      	ldr	r3, [r3, #28]
 800a1a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a1aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	f023 0303 	bic.w	r3, r3, #3
 800a1b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a1b4:	683b      	ldr	r3, [r7, #0]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	68fa      	ldr	r2, [r7, #12]
 800a1ba:	4313      	orrs	r3, r2
 800a1bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a1be:	697b      	ldr	r3, [r7, #20]
 800a1c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a1c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a1c6:	683b      	ldr	r3, [r7, #0]
 800a1c8:	689b      	ldr	r3, [r3, #8]
 800a1ca:	021b      	lsls	r3, r3, #8
 800a1cc:	697a      	ldr	r2, [r7, #20]
 800a1ce:	4313      	orrs	r3, r2
 800a1d0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	4a21      	ldr	r2, [pc, #132]	; (800a25c <TIM_OC3_SetConfig+0xe0>)
 800a1d6:	4293      	cmp	r3, r2
 800a1d8:	d003      	beq.n	800a1e2 <TIM_OC3_SetConfig+0x66>
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	4a20      	ldr	r2, [pc, #128]	; (800a260 <TIM_OC3_SetConfig+0xe4>)
 800a1de:	4293      	cmp	r3, r2
 800a1e0:	d10d      	bne.n	800a1fe <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a1e2:	697b      	ldr	r3, [r7, #20]
 800a1e4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a1e8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a1ea:	683b      	ldr	r3, [r7, #0]
 800a1ec:	68db      	ldr	r3, [r3, #12]
 800a1ee:	021b      	lsls	r3, r3, #8
 800a1f0:	697a      	ldr	r2, [r7, #20]
 800a1f2:	4313      	orrs	r3, r2
 800a1f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a1f6:	697b      	ldr	r3, [r7, #20]
 800a1f8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a1fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	4a16      	ldr	r2, [pc, #88]	; (800a25c <TIM_OC3_SetConfig+0xe0>)
 800a202:	4293      	cmp	r3, r2
 800a204:	d003      	beq.n	800a20e <TIM_OC3_SetConfig+0x92>
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	4a15      	ldr	r2, [pc, #84]	; (800a260 <TIM_OC3_SetConfig+0xe4>)
 800a20a:	4293      	cmp	r3, r2
 800a20c:	d113      	bne.n	800a236 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a20e:	693b      	ldr	r3, [r7, #16]
 800a210:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a214:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a216:	693b      	ldr	r3, [r7, #16]
 800a218:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a21c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a21e:	683b      	ldr	r3, [r7, #0]
 800a220:	695b      	ldr	r3, [r3, #20]
 800a222:	011b      	lsls	r3, r3, #4
 800a224:	693a      	ldr	r2, [r7, #16]
 800a226:	4313      	orrs	r3, r2
 800a228:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a22a:	683b      	ldr	r3, [r7, #0]
 800a22c:	699b      	ldr	r3, [r3, #24]
 800a22e:	011b      	lsls	r3, r3, #4
 800a230:	693a      	ldr	r2, [r7, #16]
 800a232:	4313      	orrs	r3, r2
 800a234:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	693a      	ldr	r2, [r7, #16]
 800a23a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	68fa      	ldr	r2, [r7, #12]
 800a240:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a242:	683b      	ldr	r3, [r7, #0]
 800a244:	685a      	ldr	r2, [r3, #4]
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	697a      	ldr	r2, [r7, #20]
 800a24e:	621a      	str	r2, [r3, #32]
}
 800a250:	bf00      	nop
 800a252:	371c      	adds	r7, #28
 800a254:	46bd      	mov	sp, r7
 800a256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a25a:	4770      	bx	lr
 800a25c:	40010000 	.word	0x40010000
 800a260:	40010400 	.word	0x40010400

0800a264 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a264:	b480      	push	{r7}
 800a266:	b087      	sub	sp, #28
 800a268:	af00      	add	r7, sp, #0
 800a26a:	6078      	str	r0, [r7, #4]
 800a26c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	6a1b      	ldr	r3, [r3, #32]
 800a272:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	6a1b      	ldr	r3, [r3, #32]
 800a27e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	685b      	ldr	r3, [r3, #4]
 800a284:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	69db      	ldr	r3, [r3, #28]
 800a28a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a292:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a29a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a29c:	683b      	ldr	r3, [r7, #0]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	021b      	lsls	r3, r3, #8
 800a2a2:	68fa      	ldr	r2, [r7, #12]
 800a2a4:	4313      	orrs	r3, r2
 800a2a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a2a8:	693b      	ldr	r3, [r7, #16]
 800a2aa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a2ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a2b0:	683b      	ldr	r3, [r7, #0]
 800a2b2:	689b      	ldr	r3, [r3, #8]
 800a2b4:	031b      	lsls	r3, r3, #12
 800a2b6:	693a      	ldr	r2, [r7, #16]
 800a2b8:	4313      	orrs	r3, r2
 800a2ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	4a12      	ldr	r2, [pc, #72]	; (800a308 <TIM_OC4_SetConfig+0xa4>)
 800a2c0:	4293      	cmp	r3, r2
 800a2c2:	d003      	beq.n	800a2cc <TIM_OC4_SetConfig+0x68>
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	4a11      	ldr	r2, [pc, #68]	; (800a30c <TIM_OC4_SetConfig+0xa8>)
 800a2c8:	4293      	cmp	r3, r2
 800a2ca:	d109      	bne.n	800a2e0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a2cc:	697b      	ldr	r3, [r7, #20]
 800a2ce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a2d2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a2d4:	683b      	ldr	r3, [r7, #0]
 800a2d6:	695b      	ldr	r3, [r3, #20]
 800a2d8:	019b      	lsls	r3, r3, #6
 800a2da:	697a      	ldr	r2, [r7, #20]
 800a2dc:	4313      	orrs	r3, r2
 800a2de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	697a      	ldr	r2, [r7, #20]
 800a2e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	68fa      	ldr	r2, [r7, #12]
 800a2ea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a2ec:	683b      	ldr	r3, [r7, #0]
 800a2ee:	685a      	ldr	r2, [r3, #4]
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	693a      	ldr	r2, [r7, #16]
 800a2f8:	621a      	str	r2, [r3, #32]
}
 800a2fa:	bf00      	nop
 800a2fc:	371c      	adds	r7, #28
 800a2fe:	46bd      	mov	sp, r7
 800a300:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a304:	4770      	bx	lr
 800a306:	bf00      	nop
 800a308:	40010000 	.word	0x40010000
 800a30c:	40010400 	.word	0x40010400

0800a310 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a310:	b480      	push	{r7}
 800a312:	b087      	sub	sp, #28
 800a314:	af00      	add	r7, sp, #0
 800a316:	60f8      	str	r0, [r7, #12]
 800a318:	60b9      	str	r1, [r7, #8]
 800a31a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a31c:	68bb      	ldr	r3, [r7, #8]
 800a31e:	f003 031f 	and.w	r3, r3, #31
 800a322:	2201      	movs	r2, #1
 800a324:	fa02 f303 	lsl.w	r3, r2, r3
 800a328:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	6a1a      	ldr	r2, [r3, #32]
 800a32e:	697b      	ldr	r3, [r7, #20]
 800a330:	43db      	mvns	r3, r3
 800a332:	401a      	ands	r2, r3
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	6a1a      	ldr	r2, [r3, #32]
 800a33c:	68bb      	ldr	r3, [r7, #8]
 800a33e:	f003 031f 	and.w	r3, r3, #31
 800a342:	6879      	ldr	r1, [r7, #4]
 800a344:	fa01 f303 	lsl.w	r3, r1, r3
 800a348:	431a      	orrs	r2, r3
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	621a      	str	r2, [r3, #32]
}
 800a34e:	bf00      	nop
 800a350:	371c      	adds	r7, #28
 800a352:	46bd      	mov	sp, r7
 800a354:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a358:	4770      	bx	lr
	...

0800a35c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a35c:	b480      	push	{r7}
 800a35e:	b085      	sub	sp, #20
 800a360:	af00      	add	r7, sp, #0
 800a362:	6078      	str	r0, [r7, #4]
 800a364:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a36c:	2b01      	cmp	r3, #1
 800a36e:	d101      	bne.n	800a374 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a370:	2302      	movs	r3, #2
 800a372:	e05a      	b.n	800a42a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	2201      	movs	r2, #1
 800a378:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	2202      	movs	r2, #2
 800a380:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	685b      	ldr	r3, [r3, #4]
 800a38a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	689b      	ldr	r3, [r3, #8]
 800a392:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a39a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a39c:	683b      	ldr	r3, [r7, #0]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	68fa      	ldr	r2, [r7, #12]
 800a3a2:	4313      	orrs	r3, r2
 800a3a4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	68fa      	ldr	r2, [r7, #12]
 800a3ac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	4a21      	ldr	r2, [pc, #132]	; (800a438 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800a3b4:	4293      	cmp	r3, r2
 800a3b6:	d022      	beq.n	800a3fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a3c0:	d01d      	beq.n	800a3fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	4a1d      	ldr	r2, [pc, #116]	; (800a43c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800a3c8:	4293      	cmp	r3, r2
 800a3ca:	d018      	beq.n	800a3fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	4a1b      	ldr	r2, [pc, #108]	; (800a440 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800a3d2:	4293      	cmp	r3, r2
 800a3d4:	d013      	beq.n	800a3fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	4a1a      	ldr	r2, [pc, #104]	; (800a444 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800a3dc:	4293      	cmp	r3, r2
 800a3de:	d00e      	beq.n	800a3fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	4a18      	ldr	r2, [pc, #96]	; (800a448 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800a3e6:	4293      	cmp	r3, r2
 800a3e8:	d009      	beq.n	800a3fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	4a17      	ldr	r2, [pc, #92]	; (800a44c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a3f0:	4293      	cmp	r3, r2
 800a3f2:	d004      	beq.n	800a3fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	4a15      	ldr	r2, [pc, #84]	; (800a450 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800a3fa:	4293      	cmp	r3, r2
 800a3fc:	d10c      	bne.n	800a418 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a3fe:	68bb      	ldr	r3, [r7, #8]
 800a400:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a404:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a406:	683b      	ldr	r3, [r7, #0]
 800a408:	685b      	ldr	r3, [r3, #4]
 800a40a:	68ba      	ldr	r2, [r7, #8]
 800a40c:	4313      	orrs	r3, r2
 800a40e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	68ba      	ldr	r2, [r7, #8]
 800a416:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	2201      	movs	r2, #1
 800a41c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	2200      	movs	r2, #0
 800a424:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a428:	2300      	movs	r3, #0
}
 800a42a:	4618      	mov	r0, r3
 800a42c:	3714      	adds	r7, #20
 800a42e:	46bd      	mov	sp, r7
 800a430:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a434:	4770      	bx	lr
 800a436:	bf00      	nop
 800a438:	40010000 	.word	0x40010000
 800a43c:	40000400 	.word	0x40000400
 800a440:	40000800 	.word	0x40000800
 800a444:	40000c00 	.word	0x40000c00
 800a448:	40010400 	.word	0x40010400
 800a44c:	40014000 	.word	0x40014000
 800a450:	40001800 	.word	0x40001800

0800a454 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a454:	b480      	push	{r7}
 800a456:	b083      	sub	sp, #12
 800a458:	af00      	add	r7, sp, #0
 800a45a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a45c:	bf00      	nop
 800a45e:	370c      	adds	r7, #12
 800a460:	46bd      	mov	sp, r7
 800a462:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a466:	4770      	bx	lr

0800a468 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a468:	b480      	push	{r7}
 800a46a:	b083      	sub	sp, #12
 800a46c:	af00      	add	r7, sp, #0
 800a46e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a470:	bf00      	nop
 800a472:	370c      	adds	r7, #12
 800a474:	46bd      	mov	sp, r7
 800a476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a47a:	4770      	bx	lr

0800a47c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a47c:	b580      	push	{r7, lr}
 800a47e:	b082      	sub	sp, #8
 800a480:	af00      	add	r7, sp, #0
 800a482:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	2b00      	cmp	r3, #0
 800a488:	d101      	bne.n	800a48e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a48a:	2301      	movs	r3, #1
 800a48c:	e03f      	b.n	800a50e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800a494:	b2db      	uxtb	r3, r3
 800a496:	2b00      	cmp	r3, #0
 800a498:	d106      	bne.n	800a4a8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	2200      	movs	r2, #0
 800a49e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a4a2:	6878      	ldr	r0, [r7, #4]
 800a4a4:	f7fa ff5a 	bl	800535c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	2224      	movs	r2, #36	; 0x24
 800a4ac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	68da      	ldr	r2, [r3, #12]
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a4be:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a4c0:	6878      	ldr	r0, [r7, #4]
 800a4c2:	f000 f829 	bl	800a518 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	691a      	ldr	r2, [r3, #16]
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a4d4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	695a      	ldr	r2, [r3, #20]
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a4e4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	68da      	ldr	r2, [r3, #12]
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a4f4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	2200      	movs	r2, #0
 800a4fa:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	2220      	movs	r2, #32
 800a500:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	2220      	movs	r2, #32
 800a508:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800a50c:	2300      	movs	r3, #0
}
 800a50e:	4618      	mov	r0, r3
 800a510:	3708      	adds	r7, #8
 800a512:	46bd      	mov	sp, r7
 800a514:	bd80      	pop	{r7, pc}
	...

0800a518 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a51c:	b0bd      	sub	sp, #244	; 0xf4
 800a51e:	af00      	add	r7, sp, #0
 800a520:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a524:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	691b      	ldr	r3, [r3, #16]
 800a52c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800a530:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a534:	68d9      	ldr	r1, [r3, #12]
 800a536:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a53a:	681a      	ldr	r2, [r3, #0]
 800a53c:	ea40 0301 	orr.w	r3, r0, r1
 800a540:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a542:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a546:	689a      	ldr	r2, [r3, #8]
 800a548:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a54c:	691b      	ldr	r3, [r3, #16]
 800a54e:	431a      	orrs	r2, r3
 800a550:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a554:	695b      	ldr	r3, [r3, #20]
 800a556:	431a      	orrs	r2, r3
 800a558:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a55c:	69db      	ldr	r3, [r3, #28]
 800a55e:	4313      	orrs	r3, r2
 800a560:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  MODIFY_REG(huart->Instance->CR1,
 800a564:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	68db      	ldr	r3, [r3, #12]
 800a56c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800a570:	f021 010c 	bic.w	r1, r1, #12
 800a574:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a578:	681a      	ldr	r2, [r3, #0]
 800a57a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800a57e:	430b      	orrs	r3, r1
 800a580:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a582:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	695b      	ldr	r3, [r3, #20]
 800a58a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800a58e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a592:	6999      	ldr	r1, [r3, #24]
 800a594:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a598:	681a      	ldr	r2, [r3, #0]
 800a59a:	ea40 0301 	orr.w	r3, r0, r1
 800a59e:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a5a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a5a4:	69db      	ldr	r3, [r3, #28]
 800a5a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a5aa:	f040 81a5 	bne.w	800a8f8 <UART_SetConfig+0x3e0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a5ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a5b2:	681a      	ldr	r2, [r3, #0]
 800a5b4:	4bcd      	ldr	r3, [pc, #820]	; (800a8ec <UART_SetConfig+0x3d4>)
 800a5b6:	429a      	cmp	r2, r3
 800a5b8:	d006      	beq.n	800a5c8 <UART_SetConfig+0xb0>
 800a5ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a5be:	681a      	ldr	r2, [r3, #0]
 800a5c0:	4bcb      	ldr	r3, [pc, #812]	; (800a8f0 <UART_SetConfig+0x3d8>)
 800a5c2:	429a      	cmp	r2, r3
 800a5c4:	f040 80cb 	bne.w	800a75e <UART_SetConfig+0x246>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a5c8:	f7fd ffd4 	bl	8008574 <HAL_RCC_GetPCLK2Freq>
 800a5cc:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a5d0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a5d4:	461c      	mov	r4, r3
 800a5d6:	f04f 0500 	mov.w	r5, #0
 800a5da:	4622      	mov	r2, r4
 800a5dc:	462b      	mov	r3, r5
 800a5de:	1891      	adds	r1, r2, r2
 800a5e0:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 800a5e4:	415b      	adcs	r3, r3
 800a5e6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800a5ea:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800a5ee:	1912      	adds	r2, r2, r4
 800a5f0:	eb45 0303 	adc.w	r3, r5, r3
 800a5f4:	f04f 0000 	mov.w	r0, #0
 800a5f8:	f04f 0100 	mov.w	r1, #0
 800a5fc:	00d9      	lsls	r1, r3, #3
 800a5fe:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a602:	00d0      	lsls	r0, r2, #3
 800a604:	4602      	mov	r2, r0
 800a606:	460b      	mov	r3, r1
 800a608:	1911      	adds	r1, r2, r4
 800a60a:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 800a60e:	416b      	adcs	r3, r5
 800a610:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800a614:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a618:	685b      	ldr	r3, [r3, #4]
 800a61a:	461a      	mov	r2, r3
 800a61c:	f04f 0300 	mov.w	r3, #0
 800a620:	1891      	adds	r1, r2, r2
 800a622:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 800a626:	415b      	adcs	r3, r3
 800a628:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a62c:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 800a630:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 800a634:	f7f6 fae8 	bl	8000c08 <__aeabi_uldivmod>
 800a638:	4602      	mov	r2, r0
 800a63a:	460b      	mov	r3, r1
 800a63c:	4bad      	ldr	r3, [pc, #692]	; (800a8f4 <UART_SetConfig+0x3dc>)
 800a63e:	fba3 2302 	umull	r2, r3, r3, r2
 800a642:	095b      	lsrs	r3, r3, #5
 800a644:	011e      	lsls	r6, r3, #4
 800a646:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a64a:	461c      	mov	r4, r3
 800a64c:	f04f 0500 	mov.w	r5, #0
 800a650:	4622      	mov	r2, r4
 800a652:	462b      	mov	r3, r5
 800a654:	1891      	adds	r1, r2, r2
 800a656:	67b9      	str	r1, [r7, #120]	; 0x78
 800a658:	415b      	adcs	r3, r3
 800a65a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a65c:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800a660:	1912      	adds	r2, r2, r4
 800a662:	eb45 0303 	adc.w	r3, r5, r3
 800a666:	f04f 0000 	mov.w	r0, #0
 800a66a:	f04f 0100 	mov.w	r1, #0
 800a66e:	00d9      	lsls	r1, r3, #3
 800a670:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a674:	00d0      	lsls	r0, r2, #3
 800a676:	4602      	mov	r2, r0
 800a678:	460b      	mov	r3, r1
 800a67a:	1911      	adds	r1, r2, r4
 800a67c:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 800a680:	416b      	adcs	r3, r5
 800a682:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800a686:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a68a:	685b      	ldr	r3, [r3, #4]
 800a68c:	461a      	mov	r2, r3
 800a68e:	f04f 0300 	mov.w	r3, #0
 800a692:	1891      	adds	r1, r2, r2
 800a694:	6739      	str	r1, [r7, #112]	; 0x70
 800a696:	415b      	adcs	r3, r3
 800a698:	677b      	str	r3, [r7, #116]	; 0x74
 800a69a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800a69e:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 800a6a2:	f7f6 fab1 	bl	8000c08 <__aeabi_uldivmod>
 800a6a6:	4602      	mov	r2, r0
 800a6a8:	460b      	mov	r3, r1
 800a6aa:	4b92      	ldr	r3, [pc, #584]	; (800a8f4 <UART_SetConfig+0x3dc>)
 800a6ac:	fba3 1302 	umull	r1, r3, r3, r2
 800a6b0:	095b      	lsrs	r3, r3, #5
 800a6b2:	2164      	movs	r1, #100	; 0x64
 800a6b4:	fb01 f303 	mul.w	r3, r1, r3
 800a6b8:	1ad3      	subs	r3, r2, r3
 800a6ba:	00db      	lsls	r3, r3, #3
 800a6bc:	3332      	adds	r3, #50	; 0x32
 800a6be:	4a8d      	ldr	r2, [pc, #564]	; (800a8f4 <UART_SetConfig+0x3dc>)
 800a6c0:	fba2 2303 	umull	r2, r3, r2, r3
 800a6c4:	095b      	lsrs	r3, r3, #5
 800a6c6:	005b      	lsls	r3, r3, #1
 800a6c8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a6cc:	441e      	add	r6, r3
 800a6ce:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a6d2:	4618      	mov	r0, r3
 800a6d4:	f04f 0100 	mov.w	r1, #0
 800a6d8:	4602      	mov	r2, r0
 800a6da:	460b      	mov	r3, r1
 800a6dc:	1894      	adds	r4, r2, r2
 800a6de:	66bc      	str	r4, [r7, #104]	; 0x68
 800a6e0:	415b      	adcs	r3, r3
 800a6e2:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a6e4:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800a6e8:	1812      	adds	r2, r2, r0
 800a6ea:	eb41 0303 	adc.w	r3, r1, r3
 800a6ee:	f04f 0400 	mov.w	r4, #0
 800a6f2:	f04f 0500 	mov.w	r5, #0
 800a6f6:	00dd      	lsls	r5, r3, #3
 800a6f8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800a6fc:	00d4      	lsls	r4, r2, #3
 800a6fe:	4622      	mov	r2, r4
 800a700:	462b      	mov	r3, r5
 800a702:	1814      	adds	r4, r2, r0
 800a704:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 800a708:	414b      	adcs	r3, r1
 800a70a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a70e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a712:	685b      	ldr	r3, [r3, #4]
 800a714:	461a      	mov	r2, r3
 800a716:	f04f 0300 	mov.w	r3, #0
 800a71a:	1891      	adds	r1, r2, r2
 800a71c:	6639      	str	r1, [r7, #96]	; 0x60
 800a71e:	415b      	adcs	r3, r3
 800a720:	667b      	str	r3, [r7, #100]	; 0x64
 800a722:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800a726:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800a72a:	f7f6 fa6d 	bl	8000c08 <__aeabi_uldivmod>
 800a72e:	4602      	mov	r2, r0
 800a730:	460b      	mov	r3, r1
 800a732:	4b70      	ldr	r3, [pc, #448]	; (800a8f4 <UART_SetConfig+0x3dc>)
 800a734:	fba3 1302 	umull	r1, r3, r3, r2
 800a738:	095b      	lsrs	r3, r3, #5
 800a73a:	2164      	movs	r1, #100	; 0x64
 800a73c:	fb01 f303 	mul.w	r3, r1, r3
 800a740:	1ad3      	subs	r3, r2, r3
 800a742:	00db      	lsls	r3, r3, #3
 800a744:	3332      	adds	r3, #50	; 0x32
 800a746:	4a6b      	ldr	r2, [pc, #428]	; (800a8f4 <UART_SetConfig+0x3dc>)
 800a748:	fba2 2303 	umull	r2, r3, r2, r3
 800a74c:	095b      	lsrs	r3, r3, #5
 800a74e:	f003 0207 	and.w	r2, r3, #7
 800a752:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	4432      	add	r2, r6
 800a75a:	609a      	str	r2, [r3, #8]
 800a75c:	e26d      	b.n	800ac3a <UART_SetConfig+0x722>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a75e:	f7fd fef5 	bl	800854c <HAL_RCC_GetPCLK1Freq>
 800a762:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a766:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a76a:	461c      	mov	r4, r3
 800a76c:	f04f 0500 	mov.w	r5, #0
 800a770:	4622      	mov	r2, r4
 800a772:	462b      	mov	r3, r5
 800a774:	1891      	adds	r1, r2, r2
 800a776:	65b9      	str	r1, [r7, #88]	; 0x58
 800a778:	415b      	adcs	r3, r3
 800a77a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a77c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800a780:	1912      	adds	r2, r2, r4
 800a782:	eb45 0303 	adc.w	r3, r5, r3
 800a786:	f04f 0000 	mov.w	r0, #0
 800a78a:	f04f 0100 	mov.w	r1, #0
 800a78e:	00d9      	lsls	r1, r3, #3
 800a790:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a794:	00d0      	lsls	r0, r2, #3
 800a796:	4602      	mov	r2, r0
 800a798:	460b      	mov	r3, r1
 800a79a:	1911      	adds	r1, r2, r4
 800a79c:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 800a7a0:	416b      	adcs	r3, r5
 800a7a2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a7a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a7aa:	685b      	ldr	r3, [r3, #4]
 800a7ac:	461a      	mov	r2, r3
 800a7ae:	f04f 0300 	mov.w	r3, #0
 800a7b2:	1891      	adds	r1, r2, r2
 800a7b4:	6539      	str	r1, [r7, #80]	; 0x50
 800a7b6:	415b      	adcs	r3, r3
 800a7b8:	657b      	str	r3, [r7, #84]	; 0x54
 800a7ba:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800a7be:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 800a7c2:	f7f6 fa21 	bl	8000c08 <__aeabi_uldivmod>
 800a7c6:	4602      	mov	r2, r0
 800a7c8:	460b      	mov	r3, r1
 800a7ca:	4b4a      	ldr	r3, [pc, #296]	; (800a8f4 <UART_SetConfig+0x3dc>)
 800a7cc:	fba3 2302 	umull	r2, r3, r3, r2
 800a7d0:	095b      	lsrs	r3, r3, #5
 800a7d2:	011e      	lsls	r6, r3, #4
 800a7d4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a7d8:	461c      	mov	r4, r3
 800a7da:	f04f 0500 	mov.w	r5, #0
 800a7de:	4622      	mov	r2, r4
 800a7e0:	462b      	mov	r3, r5
 800a7e2:	1891      	adds	r1, r2, r2
 800a7e4:	64b9      	str	r1, [r7, #72]	; 0x48
 800a7e6:	415b      	adcs	r3, r3
 800a7e8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a7ea:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800a7ee:	1912      	adds	r2, r2, r4
 800a7f0:	eb45 0303 	adc.w	r3, r5, r3
 800a7f4:	f04f 0000 	mov.w	r0, #0
 800a7f8:	f04f 0100 	mov.w	r1, #0
 800a7fc:	00d9      	lsls	r1, r3, #3
 800a7fe:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a802:	00d0      	lsls	r0, r2, #3
 800a804:	4602      	mov	r2, r0
 800a806:	460b      	mov	r3, r1
 800a808:	1911      	adds	r1, r2, r4
 800a80a:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 800a80e:	416b      	adcs	r3, r5
 800a810:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800a814:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a818:	685b      	ldr	r3, [r3, #4]
 800a81a:	461a      	mov	r2, r3
 800a81c:	f04f 0300 	mov.w	r3, #0
 800a820:	1891      	adds	r1, r2, r2
 800a822:	6439      	str	r1, [r7, #64]	; 0x40
 800a824:	415b      	adcs	r3, r3
 800a826:	647b      	str	r3, [r7, #68]	; 0x44
 800a828:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800a82c:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 800a830:	f7f6 f9ea 	bl	8000c08 <__aeabi_uldivmod>
 800a834:	4602      	mov	r2, r0
 800a836:	460b      	mov	r3, r1
 800a838:	4b2e      	ldr	r3, [pc, #184]	; (800a8f4 <UART_SetConfig+0x3dc>)
 800a83a:	fba3 1302 	umull	r1, r3, r3, r2
 800a83e:	095b      	lsrs	r3, r3, #5
 800a840:	2164      	movs	r1, #100	; 0x64
 800a842:	fb01 f303 	mul.w	r3, r1, r3
 800a846:	1ad3      	subs	r3, r2, r3
 800a848:	00db      	lsls	r3, r3, #3
 800a84a:	3332      	adds	r3, #50	; 0x32
 800a84c:	4a29      	ldr	r2, [pc, #164]	; (800a8f4 <UART_SetConfig+0x3dc>)
 800a84e:	fba2 2303 	umull	r2, r3, r2, r3
 800a852:	095b      	lsrs	r3, r3, #5
 800a854:	005b      	lsls	r3, r3, #1
 800a856:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a85a:	441e      	add	r6, r3
 800a85c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a860:	4618      	mov	r0, r3
 800a862:	f04f 0100 	mov.w	r1, #0
 800a866:	4602      	mov	r2, r0
 800a868:	460b      	mov	r3, r1
 800a86a:	1894      	adds	r4, r2, r2
 800a86c:	63bc      	str	r4, [r7, #56]	; 0x38
 800a86e:	415b      	adcs	r3, r3
 800a870:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a872:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a876:	1812      	adds	r2, r2, r0
 800a878:	eb41 0303 	adc.w	r3, r1, r3
 800a87c:	f04f 0400 	mov.w	r4, #0
 800a880:	f04f 0500 	mov.w	r5, #0
 800a884:	00dd      	lsls	r5, r3, #3
 800a886:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800a88a:	00d4      	lsls	r4, r2, #3
 800a88c:	4622      	mov	r2, r4
 800a88e:	462b      	mov	r3, r5
 800a890:	1814      	adds	r4, r2, r0
 800a892:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 800a896:	414b      	adcs	r3, r1
 800a898:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a89c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a8a0:	685b      	ldr	r3, [r3, #4]
 800a8a2:	461a      	mov	r2, r3
 800a8a4:	f04f 0300 	mov.w	r3, #0
 800a8a8:	1891      	adds	r1, r2, r2
 800a8aa:	6339      	str	r1, [r7, #48]	; 0x30
 800a8ac:	415b      	adcs	r3, r3
 800a8ae:	637b      	str	r3, [r7, #52]	; 0x34
 800a8b0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800a8b4:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800a8b8:	f7f6 f9a6 	bl	8000c08 <__aeabi_uldivmod>
 800a8bc:	4602      	mov	r2, r0
 800a8be:	460b      	mov	r3, r1
 800a8c0:	4b0c      	ldr	r3, [pc, #48]	; (800a8f4 <UART_SetConfig+0x3dc>)
 800a8c2:	fba3 1302 	umull	r1, r3, r3, r2
 800a8c6:	095b      	lsrs	r3, r3, #5
 800a8c8:	2164      	movs	r1, #100	; 0x64
 800a8ca:	fb01 f303 	mul.w	r3, r1, r3
 800a8ce:	1ad3      	subs	r3, r2, r3
 800a8d0:	00db      	lsls	r3, r3, #3
 800a8d2:	3332      	adds	r3, #50	; 0x32
 800a8d4:	4a07      	ldr	r2, [pc, #28]	; (800a8f4 <UART_SetConfig+0x3dc>)
 800a8d6:	fba2 2303 	umull	r2, r3, r2, r3
 800a8da:	095b      	lsrs	r3, r3, #5
 800a8dc:	f003 0207 	and.w	r2, r3, #7
 800a8e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	4432      	add	r2, r6
 800a8e8:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800a8ea:	e1a6      	b.n	800ac3a <UART_SetConfig+0x722>
 800a8ec:	40011000 	.word	0x40011000
 800a8f0:	40011400 	.word	0x40011400
 800a8f4:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a8f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a8fc:	681a      	ldr	r2, [r3, #0]
 800a8fe:	4bd1      	ldr	r3, [pc, #836]	; (800ac44 <UART_SetConfig+0x72c>)
 800a900:	429a      	cmp	r2, r3
 800a902:	d006      	beq.n	800a912 <UART_SetConfig+0x3fa>
 800a904:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a908:	681a      	ldr	r2, [r3, #0]
 800a90a:	4bcf      	ldr	r3, [pc, #828]	; (800ac48 <UART_SetConfig+0x730>)
 800a90c:	429a      	cmp	r2, r3
 800a90e:	f040 80ca 	bne.w	800aaa6 <UART_SetConfig+0x58e>
      pclk = HAL_RCC_GetPCLK2Freq();
 800a912:	f7fd fe2f 	bl	8008574 <HAL_RCC_GetPCLK2Freq>
 800a916:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a91a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a91e:	461c      	mov	r4, r3
 800a920:	f04f 0500 	mov.w	r5, #0
 800a924:	4622      	mov	r2, r4
 800a926:	462b      	mov	r3, r5
 800a928:	1891      	adds	r1, r2, r2
 800a92a:	62b9      	str	r1, [r7, #40]	; 0x28
 800a92c:	415b      	adcs	r3, r3
 800a92e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a930:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a934:	1912      	adds	r2, r2, r4
 800a936:	eb45 0303 	adc.w	r3, r5, r3
 800a93a:	f04f 0000 	mov.w	r0, #0
 800a93e:	f04f 0100 	mov.w	r1, #0
 800a942:	00d9      	lsls	r1, r3, #3
 800a944:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a948:	00d0      	lsls	r0, r2, #3
 800a94a:	4602      	mov	r2, r0
 800a94c:	460b      	mov	r3, r1
 800a94e:	eb12 0a04 	adds.w	sl, r2, r4
 800a952:	eb43 0b05 	adc.w	fp, r3, r5
 800a956:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a95a:	685b      	ldr	r3, [r3, #4]
 800a95c:	4618      	mov	r0, r3
 800a95e:	f04f 0100 	mov.w	r1, #0
 800a962:	f04f 0200 	mov.w	r2, #0
 800a966:	f04f 0300 	mov.w	r3, #0
 800a96a:	008b      	lsls	r3, r1, #2
 800a96c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800a970:	0082      	lsls	r2, r0, #2
 800a972:	4650      	mov	r0, sl
 800a974:	4659      	mov	r1, fp
 800a976:	f7f6 f947 	bl	8000c08 <__aeabi_uldivmod>
 800a97a:	4602      	mov	r2, r0
 800a97c:	460b      	mov	r3, r1
 800a97e:	4bb3      	ldr	r3, [pc, #716]	; (800ac4c <UART_SetConfig+0x734>)
 800a980:	fba3 2302 	umull	r2, r3, r3, r2
 800a984:	095b      	lsrs	r3, r3, #5
 800a986:	011e      	lsls	r6, r3, #4
 800a988:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a98c:	4618      	mov	r0, r3
 800a98e:	f04f 0100 	mov.w	r1, #0
 800a992:	4602      	mov	r2, r0
 800a994:	460b      	mov	r3, r1
 800a996:	1894      	adds	r4, r2, r2
 800a998:	623c      	str	r4, [r7, #32]
 800a99a:	415b      	adcs	r3, r3
 800a99c:	627b      	str	r3, [r7, #36]	; 0x24
 800a99e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a9a2:	1812      	adds	r2, r2, r0
 800a9a4:	eb41 0303 	adc.w	r3, r1, r3
 800a9a8:	f04f 0400 	mov.w	r4, #0
 800a9ac:	f04f 0500 	mov.w	r5, #0
 800a9b0:	00dd      	lsls	r5, r3, #3
 800a9b2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800a9b6:	00d4      	lsls	r4, r2, #3
 800a9b8:	4622      	mov	r2, r4
 800a9ba:	462b      	mov	r3, r5
 800a9bc:	1814      	adds	r4, r2, r0
 800a9be:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 800a9c2:	414b      	adcs	r3, r1
 800a9c4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a9c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a9cc:	685b      	ldr	r3, [r3, #4]
 800a9ce:	4618      	mov	r0, r3
 800a9d0:	f04f 0100 	mov.w	r1, #0
 800a9d4:	f04f 0200 	mov.w	r2, #0
 800a9d8:	f04f 0300 	mov.w	r3, #0
 800a9dc:	008b      	lsls	r3, r1, #2
 800a9de:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800a9e2:	0082      	lsls	r2, r0, #2
 800a9e4:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 800a9e8:	f7f6 f90e 	bl	8000c08 <__aeabi_uldivmod>
 800a9ec:	4602      	mov	r2, r0
 800a9ee:	460b      	mov	r3, r1
 800a9f0:	4b96      	ldr	r3, [pc, #600]	; (800ac4c <UART_SetConfig+0x734>)
 800a9f2:	fba3 1302 	umull	r1, r3, r3, r2
 800a9f6:	095b      	lsrs	r3, r3, #5
 800a9f8:	2164      	movs	r1, #100	; 0x64
 800a9fa:	fb01 f303 	mul.w	r3, r1, r3
 800a9fe:	1ad3      	subs	r3, r2, r3
 800aa00:	011b      	lsls	r3, r3, #4
 800aa02:	3332      	adds	r3, #50	; 0x32
 800aa04:	4a91      	ldr	r2, [pc, #580]	; (800ac4c <UART_SetConfig+0x734>)
 800aa06:	fba2 2303 	umull	r2, r3, r2, r3
 800aa0a:	095b      	lsrs	r3, r3, #5
 800aa0c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800aa10:	441e      	add	r6, r3
 800aa12:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800aa16:	4618      	mov	r0, r3
 800aa18:	f04f 0100 	mov.w	r1, #0
 800aa1c:	4602      	mov	r2, r0
 800aa1e:	460b      	mov	r3, r1
 800aa20:	1894      	adds	r4, r2, r2
 800aa22:	61bc      	str	r4, [r7, #24]
 800aa24:	415b      	adcs	r3, r3
 800aa26:	61fb      	str	r3, [r7, #28]
 800aa28:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800aa2c:	1812      	adds	r2, r2, r0
 800aa2e:	eb41 0303 	adc.w	r3, r1, r3
 800aa32:	f04f 0400 	mov.w	r4, #0
 800aa36:	f04f 0500 	mov.w	r5, #0
 800aa3a:	00dd      	lsls	r5, r3, #3
 800aa3c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800aa40:	00d4      	lsls	r4, r2, #3
 800aa42:	4622      	mov	r2, r4
 800aa44:	462b      	mov	r3, r5
 800aa46:	1814      	adds	r4, r2, r0
 800aa48:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 800aa4c:	414b      	adcs	r3, r1
 800aa4e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800aa52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aa56:	685b      	ldr	r3, [r3, #4]
 800aa58:	4618      	mov	r0, r3
 800aa5a:	f04f 0100 	mov.w	r1, #0
 800aa5e:	f04f 0200 	mov.w	r2, #0
 800aa62:	f04f 0300 	mov.w	r3, #0
 800aa66:	008b      	lsls	r3, r1, #2
 800aa68:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800aa6c:	0082      	lsls	r2, r0, #2
 800aa6e:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 800aa72:	f7f6 f8c9 	bl	8000c08 <__aeabi_uldivmod>
 800aa76:	4602      	mov	r2, r0
 800aa78:	460b      	mov	r3, r1
 800aa7a:	4b74      	ldr	r3, [pc, #464]	; (800ac4c <UART_SetConfig+0x734>)
 800aa7c:	fba3 1302 	umull	r1, r3, r3, r2
 800aa80:	095b      	lsrs	r3, r3, #5
 800aa82:	2164      	movs	r1, #100	; 0x64
 800aa84:	fb01 f303 	mul.w	r3, r1, r3
 800aa88:	1ad3      	subs	r3, r2, r3
 800aa8a:	011b      	lsls	r3, r3, #4
 800aa8c:	3332      	adds	r3, #50	; 0x32
 800aa8e:	4a6f      	ldr	r2, [pc, #444]	; (800ac4c <UART_SetConfig+0x734>)
 800aa90:	fba2 2303 	umull	r2, r3, r2, r3
 800aa94:	095b      	lsrs	r3, r3, #5
 800aa96:	f003 020f 	and.w	r2, r3, #15
 800aa9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	4432      	add	r2, r6
 800aaa2:	609a      	str	r2, [r3, #8]
 800aaa4:	e0c9      	b.n	800ac3a <UART_SetConfig+0x722>
      pclk = HAL_RCC_GetPCLK1Freq();
 800aaa6:	f7fd fd51 	bl	800854c <HAL_RCC_GetPCLK1Freq>
 800aaaa:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800aaae:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800aab2:	461c      	mov	r4, r3
 800aab4:	f04f 0500 	mov.w	r5, #0
 800aab8:	4622      	mov	r2, r4
 800aaba:	462b      	mov	r3, r5
 800aabc:	1891      	adds	r1, r2, r2
 800aabe:	6139      	str	r1, [r7, #16]
 800aac0:	415b      	adcs	r3, r3
 800aac2:	617b      	str	r3, [r7, #20]
 800aac4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800aac8:	1912      	adds	r2, r2, r4
 800aaca:	eb45 0303 	adc.w	r3, r5, r3
 800aace:	f04f 0000 	mov.w	r0, #0
 800aad2:	f04f 0100 	mov.w	r1, #0
 800aad6:	00d9      	lsls	r1, r3, #3
 800aad8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800aadc:	00d0      	lsls	r0, r2, #3
 800aade:	4602      	mov	r2, r0
 800aae0:	460b      	mov	r3, r1
 800aae2:	eb12 0804 	adds.w	r8, r2, r4
 800aae6:	eb43 0905 	adc.w	r9, r3, r5
 800aaea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aaee:	685b      	ldr	r3, [r3, #4]
 800aaf0:	4618      	mov	r0, r3
 800aaf2:	f04f 0100 	mov.w	r1, #0
 800aaf6:	f04f 0200 	mov.w	r2, #0
 800aafa:	f04f 0300 	mov.w	r3, #0
 800aafe:	008b      	lsls	r3, r1, #2
 800ab00:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800ab04:	0082      	lsls	r2, r0, #2
 800ab06:	4640      	mov	r0, r8
 800ab08:	4649      	mov	r1, r9
 800ab0a:	f7f6 f87d 	bl	8000c08 <__aeabi_uldivmod>
 800ab0e:	4602      	mov	r2, r0
 800ab10:	460b      	mov	r3, r1
 800ab12:	4b4e      	ldr	r3, [pc, #312]	; (800ac4c <UART_SetConfig+0x734>)
 800ab14:	fba3 2302 	umull	r2, r3, r3, r2
 800ab18:	095b      	lsrs	r3, r3, #5
 800ab1a:	011e      	lsls	r6, r3, #4
 800ab1c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800ab20:	4618      	mov	r0, r3
 800ab22:	f04f 0100 	mov.w	r1, #0
 800ab26:	4602      	mov	r2, r0
 800ab28:	460b      	mov	r3, r1
 800ab2a:	1894      	adds	r4, r2, r2
 800ab2c:	60bc      	str	r4, [r7, #8]
 800ab2e:	415b      	adcs	r3, r3
 800ab30:	60fb      	str	r3, [r7, #12]
 800ab32:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ab36:	1812      	adds	r2, r2, r0
 800ab38:	eb41 0303 	adc.w	r3, r1, r3
 800ab3c:	f04f 0400 	mov.w	r4, #0
 800ab40:	f04f 0500 	mov.w	r5, #0
 800ab44:	00dd      	lsls	r5, r3, #3
 800ab46:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800ab4a:	00d4      	lsls	r4, r2, #3
 800ab4c:	4622      	mov	r2, r4
 800ab4e:	462b      	mov	r3, r5
 800ab50:	1814      	adds	r4, r2, r0
 800ab52:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 800ab56:	414b      	adcs	r3, r1
 800ab58:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800ab5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ab60:	685b      	ldr	r3, [r3, #4]
 800ab62:	4618      	mov	r0, r3
 800ab64:	f04f 0100 	mov.w	r1, #0
 800ab68:	f04f 0200 	mov.w	r2, #0
 800ab6c:	f04f 0300 	mov.w	r3, #0
 800ab70:	008b      	lsls	r3, r1, #2
 800ab72:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800ab76:	0082      	lsls	r2, r0, #2
 800ab78:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800ab7c:	f7f6 f844 	bl	8000c08 <__aeabi_uldivmod>
 800ab80:	4602      	mov	r2, r0
 800ab82:	460b      	mov	r3, r1
 800ab84:	4b31      	ldr	r3, [pc, #196]	; (800ac4c <UART_SetConfig+0x734>)
 800ab86:	fba3 1302 	umull	r1, r3, r3, r2
 800ab8a:	095b      	lsrs	r3, r3, #5
 800ab8c:	2164      	movs	r1, #100	; 0x64
 800ab8e:	fb01 f303 	mul.w	r3, r1, r3
 800ab92:	1ad3      	subs	r3, r2, r3
 800ab94:	011b      	lsls	r3, r3, #4
 800ab96:	3332      	adds	r3, #50	; 0x32
 800ab98:	4a2c      	ldr	r2, [pc, #176]	; (800ac4c <UART_SetConfig+0x734>)
 800ab9a:	fba2 2303 	umull	r2, r3, r2, r3
 800ab9e:	095b      	lsrs	r3, r3, #5
 800aba0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800aba4:	441e      	add	r6, r3
 800aba6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800abaa:	4618      	mov	r0, r3
 800abac:	f04f 0100 	mov.w	r1, #0
 800abb0:	4602      	mov	r2, r0
 800abb2:	460b      	mov	r3, r1
 800abb4:	1894      	adds	r4, r2, r2
 800abb6:	603c      	str	r4, [r7, #0]
 800abb8:	415b      	adcs	r3, r3
 800abba:	607b      	str	r3, [r7, #4]
 800abbc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800abc0:	1812      	adds	r2, r2, r0
 800abc2:	eb41 0303 	adc.w	r3, r1, r3
 800abc6:	f04f 0400 	mov.w	r4, #0
 800abca:	f04f 0500 	mov.w	r5, #0
 800abce:	00dd      	lsls	r5, r3, #3
 800abd0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800abd4:	00d4      	lsls	r4, r2, #3
 800abd6:	4622      	mov	r2, r4
 800abd8:	462b      	mov	r3, r5
 800abda:	1814      	adds	r4, r2, r0
 800abdc:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 800abe0:	414b      	adcs	r3, r1
 800abe2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800abe6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800abea:	685b      	ldr	r3, [r3, #4]
 800abec:	4618      	mov	r0, r3
 800abee:	f04f 0100 	mov.w	r1, #0
 800abf2:	f04f 0200 	mov.w	r2, #0
 800abf6:	f04f 0300 	mov.w	r3, #0
 800abfa:	008b      	lsls	r3, r1, #2
 800abfc:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800ac00:	0082      	lsls	r2, r0, #2
 800ac02:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 800ac06:	f7f5 ffff 	bl	8000c08 <__aeabi_uldivmod>
 800ac0a:	4602      	mov	r2, r0
 800ac0c:	460b      	mov	r3, r1
 800ac0e:	4b0f      	ldr	r3, [pc, #60]	; (800ac4c <UART_SetConfig+0x734>)
 800ac10:	fba3 1302 	umull	r1, r3, r3, r2
 800ac14:	095b      	lsrs	r3, r3, #5
 800ac16:	2164      	movs	r1, #100	; 0x64
 800ac18:	fb01 f303 	mul.w	r3, r1, r3
 800ac1c:	1ad3      	subs	r3, r2, r3
 800ac1e:	011b      	lsls	r3, r3, #4
 800ac20:	3332      	adds	r3, #50	; 0x32
 800ac22:	4a0a      	ldr	r2, [pc, #40]	; (800ac4c <UART_SetConfig+0x734>)
 800ac24:	fba2 2303 	umull	r2, r3, r2, r3
 800ac28:	095b      	lsrs	r3, r3, #5
 800ac2a:	f003 020f 	and.w	r2, r3, #15
 800ac2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	4432      	add	r2, r6
 800ac36:	609a      	str	r2, [r3, #8]
}
 800ac38:	e7ff      	b.n	800ac3a <UART_SetConfig+0x722>
 800ac3a:	bf00      	nop
 800ac3c:	37f4      	adds	r7, #244	; 0xf4
 800ac3e:	46bd      	mov	sp, r7
 800ac40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac44:	40011000 	.word	0x40011000
 800ac48:	40011400 	.word	0x40011400
 800ac4c:	51eb851f 	.word	0x51eb851f

0800ac50 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800ac50:	b580      	push	{r7, lr}
 800ac52:	b084      	sub	sp, #16
 800ac54:	af04      	add	r7, sp, #16
  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 800ac56:	f000 fb1f 	bl	800b298 <lwip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 800ac5a:	4b19      	ldr	r3, [pc, #100]	; (800acc0 <MX_LWIP_Init+0x70>)
 800ac5c:	2200      	movs	r2, #0
 800ac5e:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 800ac60:	4b18      	ldr	r3, [pc, #96]	; (800acc4 <MX_LWIP_Init+0x74>)
 800ac62:	2200      	movs	r2, #0
 800ac64:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 800ac66:	4b18      	ldr	r3, [pc, #96]	; (800acc8 <MX_LWIP_Init+0x78>)
 800ac68:	2200      	movs	r2, #0
 800ac6a:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 800ac6c:	4b17      	ldr	r3, [pc, #92]	; (800accc <MX_LWIP_Init+0x7c>)
 800ac6e:	9302      	str	r3, [sp, #8]
 800ac70:	4b17      	ldr	r3, [pc, #92]	; (800acd0 <MX_LWIP_Init+0x80>)
 800ac72:	9301      	str	r3, [sp, #4]
 800ac74:	2300      	movs	r3, #0
 800ac76:	9300      	str	r3, [sp, #0]
 800ac78:	4b13      	ldr	r3, [pc, #76]	; (800acc8 <MX_LWIP_Init+0x78>)
 800ac7a:	4a12      	ldr	r2, [pc, #72]	; (800acc4 <MX_LWIP_Init+0x74>)
 800ac7c:	4910      	ldr	r1, [pc, #64]	; (800acc0 <MX_LWIP_Init+0x70>)
 800ac7e:	4815      	ldr	r0, [pc, #84]	; (800acd4 <MX_LWIP_Init+0x84>)
 800ac80:	f000 ffb0 	bl	800bbe4 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800ac84:	4813      	ldr	r0, [pc, #76]	; (800acd4 <MX_LWIP_Init+0x84>)
 800ac86:	f001 f967 	bl	800bf58 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800ac8a:	4b12      	ldr	r3, [pc, #72]	; (800acd4 <MX_LWIP_Init+0x84>)
 800ac8c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ac90:	089b      	lsrs	r3, r3, #2
 800ac92:	f003 0301 	and.w	r3, r3, #1
 800ac96:	b2db      	uxtb	r3, r3
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d003      	beq.n	800aca4 <MX_LWIP_Init+0x54>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 800ac9c:	480d      	ldr	r0, [pc, #52]	; (800acd4 <MX_LWIP_Init+0x84>)
 800ac9e:	f001 f96b 	bl	800bf78 <netif_set_up>
 800aca2:	e002      	b.n	800acaa <MX_LWIP_Init+0x5a>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 800aca4:	480b      	ldr	r0, [pc, #44]	; (800acd4 <MX_LWIP_Init+0x84>)
 800aca6:	f001 f9d3 	bl	800c050 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 800acaa:	490b      	ldr	r1, [pc, #44]	; (800acd8 <MX_LWIP_Init+0x88>)
 800acac:	4809      	ldr	r0, [pc, #36]	; (800acd4 <MX_LWIP_Init+0x84>)
 800acae:	f001 fa01 	bl	800c0b4 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 800acb2:	4808      	ldr	r0, [pc, #32]	; (800acd4 <MX_LWIP_Init+0x84>)
 800acb4:	f008 fa92 	bl	80131dc <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800acb8:	bf00      	nop
 800acba:	46bd      	mov	sp, r7
 800acbc:	bd80      	pop	{r7, pc}
 800acbe:	bf00      	nop
 800acc0:	20000c24 	.word	0x20000c24
 800acc4:	20000c28 	.word	0x20000c28
 800acc8:	20000c2c 	.word	0x20000c2c
 800accc:	08016ba9 	.word	0x08016ba9
 800acd0:	0800b0c5 	.word	0x0800b0c5
 800acd4:	20000bec 	.word	0x20000bec
 800acd8:	0800b131 	.word	0x0800b131

0800acdc <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800acdc:	b580      	push	{r7, lr}
 800acde:	b08e      	sub	sp, #56	; 0x38
 800ace0:	af00      	add	r7, sp, #0
 800ace2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ace4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ace8:	2200      	movs	r2, #0
 800acea:	601a      	str	r2, [r3, #0]
 800acec:	605a      	str	r2, [r3, #4]
 800acee:	609a      	str	r2, [r3, #8]
 800acf0:	60da      	str	r2, [r3, #12]
 800acf2:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	4a46      	ldr	r2, [pc, #280]	; (800ae14 <HAL_ETH_MspInit+0x138>)
 800acfa:	4293      	cmp	r3, r2
 800acfc:	f040 8085 	bne.w	800ae0a <HAL_ETH_MspInit+0x12e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 800ad00:	2300      	movs	r3, #0
 800ad02:	623b      	str	r3, [r7, #32]
 800ad04:	4b44      	ldr	r3, [pc, #272]	; (800ae18 <HAL_ETH_MspInit+0x13c>)
 800ad06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad08:	4a43      	ldr	r2, [pc, #268]	; (800ae18 <HAL_ETH_MspInit+0x13c>)
 800ad0a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800ad0e:	6313      	str	r3, [r2, #48]	; 0x30
 800ad10:	4b41      	ldr	r3, [pc, #260]	; (800ae18 <HAL_ETH_MspInit+0x13c>)
 800ad12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ad18:	623b      	str	r3, [r7, #32]
 800ad1a:	6a3b      	ldr	r3, [r7, #32]
 800ad1c:	2300      	movs	r3, #0
 800ad1e:	61fb      	str	r3, [r7, #28]
 800ad20:	4b3d      	ldr	r3, [pc, #244]	; (800ae18 <HAL_ETH_MspInit+0x13c>)
 800ad22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad24:	4a3c      	ldr	r2, [pc, #240]	; (800ae18 <HAL_ETH_MspInit+0x13c>)
 800ad26:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800ad2a:	6313      	str	r3, [r2, #48]	; 0x30
 800ad2c:	4b3a      	ldr	r3, [pc, #232]	; (800ae18 <HAL_ETH_MspInit+0x13c>)
 800ad2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad30:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800ad34:	61fb      	str	r3, [r7, #28]
 800ad36:	69fb      	ldr	r3, [r7, #28]
 800ad38:	2300      	movs	r3, #0
 800ad3a:	61bb      	str	r3, [r7, #24]
 800ad3c:	4b36      	ldr	r3, [pc, #216]	; (800ae18 <HAL_ETH_MspInit+0x13c>)
 800ad3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad40:	4a35      	ldr	r2, [pc, #212]	; (800ae18 <HAL_ETH_MspInit+0x13c>)
 800ad42:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800ad46:	6313      	str	r3, [r2, #48]	; 0x30
 800ad48:	4b33      	ldr	r3, [pc, #204]	; (800ae18 <HAL_ETH_MspInit+0x13c>)
 800ad4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad4c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ad50:	61bb      	str	r3, [r7, #24]
 800ad52:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800ad54:	2300      	movs	r3, #0
 800ad56:	617b      	str	r3, [r7, #20]
 800ad58:	4b2f      	ldr	r3, [pc, #188]	; (800ae18 <HAL_ETH_MspInit+0x13c>)
 800ad5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad5c:	4a2e      	ldr	r2, [pc, #184]	; (800ae18 <HAL_ETH_MspInit+0x13c>)
 800ad5e:	f043 0304 	orr.w	r3, r3, #4
 800ad62:	6313      	str	r3, [r2, #48]	; 0x30
 800ad64:	4b2c      	ldr	r3, [pc, #176]	; (800ae18 <HAL_ETH_MspInit+0x13c>)
 800ad66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad68:	f003 0304 	and.w	r3, r3, #4
 800ad6c:	617b      	str	r3, [r7, #20]
 800ad6e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ad70:	2300      	movs	r3, #0
 800ad72:	613b      	str	r3, [r7, #16]
 800ad74:	4b28      	ldr	r3, [pc, #160]	; (800ae18 <HAL_ETH_MspInit+0x13c>)
 800ad76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad78:	4a27      	ldr	r2, [pc, #156]	; (800ae18 <HAL_ETH_MspInit+0x13c>)
 800ad7a:	f043 0301 	orr.w	r3, r3, #1
 800ad7e:	6313      	str	r3, [r2, #48]	; 0x30
 800ad80:	4b25      	ldr	r3, [pc, #148]	; (800ae18 <HAL_ETH_MspInit+0x13c>)
 800ad82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad84:	f003 0301 	and.w	r3, r3, #1
 800ad88:	613b      	str	r3, [r7, #16]
 800ad8a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800ad8c:	2300      	movs	r3, #0
 800ad8e:	60fb      	str	r3, [r7, #12]
 800ad90:	4b21      	ldr	r3, [pc, #132]	; (800ae18 <HAL_ETH_MspInit+0x13c>)
 800ad92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad94:	4a20      	ldr	r2, [pc, #128]	; (800ae18 <HAL_ETH_MspInit+0x13c>)
 800ad96:	f043 0302 	orr.w	r3, r3, #2
 800ad9a:	6313      	str	r3, [r2, #48]	; 0x30
 800ad9c:	4b1e      	ldr	r3, [pc, #120]	; (800ae18 <HAL_ETH_MspInit+0x13c>)
 800ad9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ada0:	f003 0302 	and.w	r3, r3, #2
 800ada4:	60fb      	str	r3, [r7, #12]
 800ada6:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800ada8:	2332      	movs	r3, #50	; 0x32
 800adaa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800adac:	2302      	movs	r3, #2
 800adae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800adb0:	2300      	movs	r3, #0
 800adb2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800adb4:	2303      	movs	r3, #3
 800adb6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800adb8:	230b      	movs	r3, #11
 800adba:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800adbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800adc0:	4619      	mov	r1, r3
 800adc2:	4816      	ldr	r0, [pc, #88]	; (800ae1c <HAL_ETH_MspInit+0x140>)
 800adc4:	f7fc fd98 	bl	80078f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800adc8:	2386      	movs	r3, #134	; 0x86
 800adca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800adcc:	2302      	movs	r3, #2
 800adce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800add0:	2300      	movs	r3, #0
 800add2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800add4:	2303      	movs	r3, #3
 800add6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800add8:	230b      	movs	r3, #11
 800adda:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800addc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ade0:	4619      	mov	r1, r3
 800ade2:	480f      	ldr	r0, [pc, #60]	; (800ae20 <HAL_ETH_MspInit+0x144>)
 800ade4:	f7fc fd88 	bl	80078f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 800ade8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800adec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800adee:	2302      	movs	r3, #2
 800adf0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800adf2:	2300      	movs	r3, #0
 800adf4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800adf6:	2303      	movs	r3, #3
 800adf8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800adfa:	230b      	movs	r3, #11
 800adfc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800adfe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ae02:	4619      	mov	r1, r3
 800ae04:	4807      	ldr	r0, [pc, #28]	; (800ae24 <HAL_ETH_MspInit+0x148>)
 800ae06:	f7fc fd77 	bl	80078f8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800ae0a:	bf00      	nop
 800ae0c:	3738      	adds	r7, #56	; 0x38
 800ae0e:	46bd      	mov	sp, r7
 800ae10:	bd80      	pop	{r7, pc}
 800ae12:	bf00      	nop
 800ae14:	40028000 	.word	0x40028000
 800ae18:	40023800 	.word	0x40023800
 800ae1c:	40020800 	.word	0x40020800
 800ae20:	40020000 	.word	0x40020000
 800ae24:	40020400 	.word	0x40020400

0800ae28 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800ae28:	b580      	push	{r7, lr}
 800ae2a:	b086      	sub	sp, #24
 800ae2c:	af00      	add	r7, sp, #0
 800ae2e:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 800ae30:	2300      	movs	r3, #0
 800ae32:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800ae34:	4b4e      	ldr	r3, [pc, #312]	; (800af70 <low_level_init+0x148>)
 800ae36:	4a4f      	ldr	r2, [pc, #316]	; (800af74 <low_level_init+0x14c>)
 800ae38:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 800ae3a:	4b4d      	ldr	r3, [pc, #308]	; (800af70 <low_level_init+0x148>)
 800ae3c:	2201      	movs	r2, #1
 800ae3e:	605a      	str	r2, [r3, #4]
  heth.Init.PhyAddress = DP83848_PHY_ADDRESS;
 800ae40:	4b4b      	ldr	r3, [pc, #300]	; (800af70 <low_level_init+0x148>)
 800ae42:	2201      	movs	r2, #1
 800ae44:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x02;
 800ae46:	2302      	movs	r3, #2
 800ae48:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x00;
 800ae4a:	2300      	movs	r3, #0
 800ae4c:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0x00;
 800ae4e:	2300      	movs	r3, #0
 800ae50:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 800ae52:	2300      	movs	r3, #0
 800ae54:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 800ae56:	2300      	movs	r3, #0
 800ae58:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 800ae5a:	2300      	movs	r3, #0
 800ae5c:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 800ae5e:	4a44      	ldr	r2, [pc, #272]	; (800af70 <low_level_init+0x148>)
 800ae60:	f107 0308 	add.w	r3, r7, #8
 800ae64:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 800ae66:	4b42      	ldr	r3, [pc, #264]	; (800af70 <low_level_init+0x148>)
 800ae68:	2200      	movs	r2, #0
 800ae6a:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 800ae6c:	4b40      	ldr	r3, [pc, #256]	; (800af70 <low_level_init+0x148>)
 800ae6e:	2200      	movs	r2, #0
 800ae70:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 800ae72:	4b3f      	ldr	r3, [pc, #252]	; (800af70 <low_level_init+0x148>)
 800ae74:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800ae78:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800ae7a:	483d      	ldr	r0, [pc, #244]	; (800af70 <low_level_init+0x148>)
 800ae7c:	f7fb fc9a 	bl	80067b4 <HAL_ETH_Init>
 800ae80:	4603      	mov	r3, r0
 800ae82:	75fb      	strb	r3, [r7, #23]

  if (hal_eth_init_status == HAL_OK)
 800ae84:	7dfb      	ldrb	r3, [r7, #23]
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d108      	bne.n	800ae9c <low_level_init+0x74>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ae90:	f043 0304 	orr.w	r3, r3, #4
 800ae94:	b2da      	uxtb	r2, r3
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 800ae9c:	2304      	movs	r3, #4
 800ae9e:	4a36      	ldr	r2, [pc, #216]	; (800af78 <low_level_init+0x150>)
 800aea0:	4936      	ldr	r1, [pc, #216]	; (800af7c <low_level_init+0x154>)
 800aea2:	4833      	ldr	r0, [pc, #204]	; (800af70 <low_level_init+0x148>)
 800aea4:	f7fb fe22 	bl	8006aec <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 800aea8:	2304      	movs	r3, #4
 800aeaa:	4a35      	ldr	r2, [pc, #212]	; (800af80 <low_level_init+0x158>)
 800aeac:	4935      	ldr	r1, [pc, #212]	; (800af84 <low_level_init+0x15c>)
 800aeae:	4830      	ldr	r0, [pc, #192]	; (800af70 <low_level_init+0x148>)
 800aeb0:	f7fb fe85 	bl	8006bbe <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	2206      	movs	r2, #6
 800aeb8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800aebc:	4b2c      	ldr	r3, [pc, #176]	; (800af70 <low_level_init+0x148>)
 800aebe:	695b      	ldr	r3, [r3, #20]
 800aec0:	781a      	ldrb	r2, [r3, #0]
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800aec8:	4b29      	ldr	r3, [pc, #164]	; (800af70 <low_level_init+0x148>)
 800aeca:	695b      	ldr	r3, [r3, #20]
 800aecc:	785a      	ldrb	r2, [r3, #1]
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800aed4:	4b26      	ldr	r3, [pc, #152]	; (800af70 <low_level_init+0x148>)
 800aed6:	695b      	ldr	r3, [r3, #20]
 800aed8:	789a      	ldrb	r2, [r3, #2]
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800aee0:	4b23      	ldr	r3, [pc, #140]	; (800af70 <low_level_init+0x148>)
 800aee2:	695b      	ldr	r3, [r3, #20]
 800aee4:	78da      	ldrb	r2, [r3, #3]
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800aeec:	4b20      	ldr	r3, [pc, #128]	; (800af70 <low_level_init+0x148>)
 800aeee:	695b      	ldr	r3, [r3, #20]
 800aef0:	791a      	ldrb	r2, [r3, #4]
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800aef8:	4b1d      	ldr	r3, [pc, #116]	; (800af70 <low_level_init+0x148>)
 800aefa:	695b      	ldr	r3, [r3, #20]
 800aefc:	795a      	ldrb	r2, [r3, #5]
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

  /* maximum transfer unit */
  netif->mtu = 1500;
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800af0a:	851a      	strh	r2, [r3, #40]	; 0x28

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800af12:	f043 030a 	orr.w	r3, r3, #10
 800af16:	b2da      	uxtb	r2, r3
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 800af1e:	4814      	ldr	r0, [pc, #80]	; (800af70 <low_level_init+0x148>)
 800af20:	f7fc f872 	bl	8007008 <HAL_ETH_Start>

/* USER CODE END PHY_PRE_CONFIG */

  /**** Configure PHY to generate an interrupt when Eth Link state changes ****/
  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_MICR, &regvalue);
 800af24:	f107 0310 	add.w	r3, r7, #16
 800af28:	461a      	mov	r2, r3
 800af2a:	2111      	movs	r1, #17
 800af2c:	4810      	ldr	r0, [pc, #64]	; (800af70 <low_level_init+0x148>)
 800af2e:	f7fb ff9d 	bl	8006e6c <HAL_ETH_ReadPHYRegister>

  regvalue |= (PHY_MICR_INT_EN | PHY_MICR_INT_OE);
 800af32:	693b      	ldr	r3, [r7, #16]
 800af34:	f043 0303 	orr.w	r3, r3, #3
 800af38:	613b      	str	r3, [r7, #16]

  /* Enable Interrupts */
  HAL_ETH_WritePHYRegister(&heth, PHY_MICR, regvalue );
 800af3a:	693b      	ldr	r3, [r7, #16]
 800af3c:	461a      	mov	r2, r3
 800af3e:	2111      	movs	r1, #17
 800af40:	480b      	ldr	r0, [pc, #44]	; (800af70 <low_level_init+0x148>)
 800af42:	f7fb fffb 	bl	8006f3c <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_MISR, &regvalue);
 800af46:	f107 0310 	add.w	r3, r7, #16
 800af4a:	461a      	mov	r2, r3
 800af4c:	2112      	movs	r1, #18
 800af4e:	4808      	ldr	r0, [pc, #32]	; (800af70 <low_level_init+0x148>)
 800af50:	f7fb ff8c 	bl	8006e6c <HAL_ETH_ReadPHYRegister>

  regvalue |= PHY_MISR_LINK_INT_EN;
 800af54:	693b      	ldr	r3, [r7, #16]
 800af56:	f043 0320 	orr.w	r3, r3, #32
 800af5a:	613b      	str	r3, [r7, #16]

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_MISR, regvalue);
 800af5c:	693b      	ldr	r3, [r7, #16]
 800af5e:	461a      	mov	r2, r3
 800af60:	2112      	movs	r1, #18
 800af62:	4803      	ldr	r0, [pc, #12]	; (800af70 <low_level_init+0x148>)
 800af64:	f7fb ffea 	bl	8006f3c <HAL_ETH_WritePHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800af68:	bf00      	nop
 800af6a:	3718      	adds	r7, #24
 800af6c:	46bd      	mov	sp, r7
 800af6e:	bd80      	pop	{r7, pc}
 800af70:	20002500 	.word	0x20002500
 800af74:	40028000 	.word	0x40028000
 800af78:	20002548 	.word	0x20002548
 800af7c:	20000c30 	.word	0x20000c30
 800af80:	20000cb0 	.word	0x20000cb0
 800af84:	20002480 	.word	0x20002480

0800af88 <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800af88:	b580      	push	{r7, lr}
 800af8a:	b08a      	sub	sp, #40	; 0x28
 800af8c:	af00      	add	r7, sp, #0
 800af8e:	6078      	str	r0, [r7, #4]
 800af90:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 800af92:	4b4b      	ldr	r3, [pc, #300]	; (800b0c0 <low_level_output+0x138>)
 800af94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af96:	689b      	ldr	r3, [r3, #8]
 800af98:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 800af9a:	2300      	movs	r3, #0
 800af9c:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 800af9e:	2300      	movs	r3, #0
 800afa0:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 800afa2:	2300      	movs	r3, #0
 800afa4:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 800afa6:	2300      	movs	r3, #0
 800afa8:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 800afaa:	4b45      	ldr	r3, [pc, #276]	; (800b0c0 <low_level_output+0x138>)
 800afac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afae:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 800afb0:	2300      	movs	r3, #0
 800afb2:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 800afb4:	683b      	ldr	r3, [r7, #0]
 800afb6:	623b      	str	r3, [r7, #32]
 800afb8:	e05a      	b.n	800b070 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800afba:	69bb      	ldr	r3, [r7, #24]
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	da03      	bge.n	800afca <low_level_output+0x42>
      {
        errval = ERR_USE;
 800afc2:	23f8      	movs	r3, #248	; 0xf8
 800afc4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 800afc8:	e05c      	b.n	800b084 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 800afca:	6a3b      	ldr	r3, [r7, #32]
 800afcc:	895b      	ldrh	r3, [r3, #10]
 800afce:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 800afd0:	2300      	movs	r3, #0
 800afd2:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800afd4:	e02f      	b.n	800b036 <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 800afd6:	69fa      	ldr	r2, [r7, #28]
 800afd8:	693b      	ldr	r3, [r7, #16]
 800afda:	18d0      	adds	r0, r2, r3
 800afdc:	6a3b      	ldr	r3, [r7, #32]
 800afde:	685a      	ldr	r2, [r3, #4]
 800afe0:	68bb      	ldr	r3, [r7, #8]
 800afe2:	18d1      	adds	r1, r2, r3
 800afe4:	693b      	ldr	r3, [r7, #16]
 800afe6:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 800afea:	3304      	adds	r3, #4
 800afec:	461a      	mov	r2, r3
 800afee:	f00b fefb 	bl	8016de8 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 800aff2:	69bb      	ldr	r3, [r7, #24]
 800aff4:	68db      	ldr	r3, [r3, #12]
 800aff6:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800aff8:	69bb      	ldr	r3, [r7, #24]
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	2b00      	cmp	r3, #0
 800affe:	da03      	bge.n	800b008 <low_level_output+0x80>
        {
          errval = ERR_USE;
 800b000:	23f8      	movs	r3, #248	; 0xf8
 800b002:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 800b006:	e03d      	b.n	800b084 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 800b008:	69bb      	ldr	r3, [r7, #24]
 800b00a:	689b      	ldr	r3, [r3, #8]
 800b00c:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 800b00e:	693a      	ldr	r2, [r7, #16]
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	4413      	add	r3, r2
 800b014:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 800b018:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 800b01a:	68ba      	ldr	r2, [r7, #8]
 800b01c:	693b      	ldr	r3, [r7, #16]
 800b01e:	1ad3      	subs	r3, r2, r3
 800b020:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800b024:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 800b026:	697a      	ldr	r2, [r7, #20]
 800b028:	693b      	ldr	r3, [r7, #16]
 800b02a:	1ad3      	subs	r3, r2, r3
 800b02c:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800b030:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 800b032:	2300      	movs	r3, #0
 800b034:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800b036:	68fa      	ldr	r2, [r7, #12]
 800b038:	693b      	ldr	r3, [r7, #16]
 800b03a:	4413      	add	r3, r2
 800b03c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800b040:	4293      	cmp	r3, r2
 800b042:	d8c8      	bhi.n	800afd6 <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 800b044:	69fa      	ldr	r2, [r7, #28]
 800b046:	693b      	ldr	r3, [r7, #16]
 800b048:	18d0      	adds	r0, r2, r3
 800b04a:	6a3b      	ldr	r3, [r7, #32]
 800b04c:	685a      	ldr	r2, [r3, #4]
 800b04e:	68bb      	ldr	r3, [r7, #8]
 800b050:	4413      	add	r3, r2
 800b052:	68fa      	ldr	r2, [r7, #12]
 800b054:	4619      	mov	r1, r3
 800b056:	f00b fec7 	bl	8016de8 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 800b05a:	693a      	ldr	r2, [r7, #16]
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	4413      	add	r3, r2
 800b060:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 800b062:	697a      	ldr	r2, [r7, #20]
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	4413      	add	r3, r2
 800b068:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 800b06a:	6a3b      	ldr	r3, [r7, #32]
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	623b      	str	r3, [r7, #32]
 800b070:	6a3b      	ldr	r3, [r7, #32]
 800b072:	2b00      	cmp	r3, #0
 800b074:	d1a1      	bne.n	800afba <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 800b076:	6979      	ldr	r1, [r7, #20]
 800b078:	4811      	ldr	r0, [pc, #68]	; (800b0c0 <low_level_output+0x138>)
 800b07a:	f7fb fe0d 	bl	8006c98 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 800b07e:	2300      	movs	r3, #0
 800b080:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 800b084:	4b0e      	ldr	r3, [pc, #56]	; (800b0c0 <low_level_output+0x138>)
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b08c:	3314      	adds	r3, #20
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	f003 0320 	and.w	r3, r3, #32
 800b094:	2b00      	cmp	r3, #0
 800b096:	d00d      	beq.n	800b0b4 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 800b098:	4b09      	ldr	r3, [pc, #36]	; (800b0c0 <low_level_output+0x138>)
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b0a0:	3314      	adds	r3, #20
 800b0a2:	2220      	movs	r2, #32
 800b0a4:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 800b0a6:	4b06      	ldr	r3, [pc, #24]	; (800b0c0 <low_level_output+0x138>)
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b0ae:	3304      	adds	r3, #4
 800b0b0:	2200      	movs	r2, #0
 800b0b2:	601a      	str	r2, [r3, #0]
  }
  return errval;
 800b0b4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800b0b8:	4618      	mov	r0, r3
 800b0ba:	3728      	adds	r7, #40	; 0x28
 800b0bc:	46bd      	mov	sp, r7
 800b0be:	bd80      	pop	{r7, pc}
 800b0c0:	20002500 	.word	0x20002500

0800b0c4 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800b0c4:	b580      	push	{r7, lr}
 800b0c6:	b082      	sub	sp, #8
 800b0c8:	af00      	add	r7, sp, #0
 800b0ca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d106      	bne.n	800b0e0 <ethernetif_init+0x1c>
 800b0d2:	4b0e      	ldr	r3, [pc, #56]	; (800b10c <ethernetif_init+0x48>)
 800b0d4:	f44f 7203 	mov.w	r2, #524	; 0x20c
 800b0d8:	490d      	ldr	r1, [pc, #52]	; (800b110 <ethernetif_init+0x4c>)
 800b0da:	480e      	ldr	r0, [pc, #56]	; (800b114 <ethernetif_init+0x50>)
 800b0dc:	f00c fbc8 	bl	8017870 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	2273      	movs	r2, #115	; 0x73
 800b0e4:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  netif->name[1] = IFNAME1;
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	2274      	movs	r2, #116	; 0x74
 800b0ec:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	4a09      	ldr	r2, [pc, #36]	; (800b118 <ethernetif_init+0x54>)
 800b0f4:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	4a08      	ldr	r2, [pc, #32]	; (800b11c <ethernetif_init+0x58>)
 800b0fa:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800b0fc:	6878      	ldr	r0, [r7, #4]
 800b0fe:	f7ff fe93 	bl	800ae28 <low_level_init>

  return ERR_OK;
 800b102:	2300      	movs	r3, #0
}
 800b104:	4618      	mov	r0, r3
 800b106:	3708      	adds	r7, #8
 800b108:	46bd      	mov	sp, r7
 800b10a:	bd80      	pop	{r7, pc}
 800b10c:	0801cc40 	.word	0x0801cc40
 800b110:	0801cc5c 	.word	0x0801cc5c
 800b114:	0801cc6c 	.word	0x0801cc6c
 800b118:	08015031 	.word	0x08015031
 800b11c:	0800af89 	.word	0x0800af89

0800b120 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 800b120:	b580      	push	{r7, lr}
 800b122:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800b124:	f7fa fab8 	bl	8005698 <HAL_GetTick>
 800b128:	4603      	mov	r3, r0
}
 800b12a:	4618      	mov	r0, r3
 800b12c:	bd80      	pop	{r7, pc}
	...

0800b130 <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 800b130:	b580      	push	{r7, lr}
 800b132:	b084      	sub	sp, #16
 800b134:	af00      	add	r7, sp, #0
 800b136:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 800b138:	2300      	movs	r3, #0
 800b13a:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 800b13c:	2300      	movs	r3, #0
 800b13e:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800b146:	089b      	lsrs	r3, r3, #2
 800b148:	f003 0301 	and.w	r3, r3, #1
 800b14c:	b2db      	uxtb	r3, r3
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d05d      	beq.n	800b20e <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 800b152:	4b34      	ldr	r3, [pc, #208]	; (800b224 <ethernetif_update_config+0xf4>)
 800b154:	685b      	ldr	r3, [r3, #4]
 800b156:	2b00      	cmp	r3, #0
 800b158:	d03f      	beq.n	800b1da <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 800b15a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800b15e:	2100      	movs	r1, #0
 800b160:	4830      	ldr	r0, [pc, #192]	; (800b224 <ethernetif_update_config+0xf4>)
 800b162:	f7fb feeb 	bl	8006f3c <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 800b166:	f7fa fa97 	bl	8005698 <HAL_GetTick>
 800b16a:	4603      	mov	r3, r0
 800b16c:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 800b16e:	f107 0308 	add.w	r3, r7, #8
 800b172:	461a      	mov	r2, r3
 800b174:	2101      	movs	r1, #1
 800b176:	482b      	ldr	r0, [pc, #172]	; (800b224 <ethernetif_update_config+0xf4>)
 800b178:	f7fb fe78 	bl	8006e6c <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 800b17c:	f7fa fa8c 	bl	8005698 <HAL_GetTick>
 800b180:	4602      	mov	r2, r0
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	1ad3      	subs	r3, r2, r3
 800b186:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b18a:	d828      	bhi.n	800b1de <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 800b18c:	68bb      	ldr	r3, [r7, #8]
 800b18e:	f003 0320 	and.w	r3, r3, #32
 800b192:	2b00      	cmp	r3, #0
 800b194:	d0eb      	beq.n	800b16e <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 800b196:	f107 0308 	add.w	r3, r7, #8
 800b19a:	461a      	mov	r2, r3
 800b19c:	211f      	movs	r1, #31
 800b19e:	4821      	ldr	r0, [pc, #132]	; (800b224 <ethernetif_update_config+0xf4>)
 800b1a0:	f7fb fe64 	bl	8006e6c <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 800b1a4:	68bb      	ldr	r3, [r7, #8]
 800b1a6:	f003 0310 	and.w	r3, r3, #16
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d004      	beq.n	800b1b8 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 800b1ae:	4b1d      	ldr	r3, [pc, #116]	; (800b224 <ethernetif_update_config+0xf4>)
 800b1b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b1b4:	60da      	str	r2, [r3, #12]
 800b1b6:	e002      	b.n	800b1be <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 800b1b8:	4b1a      	ldr	r3, [pc, #104]	; (800b224 <ethernetif_update_config+0xf4>)
 800b1ba:	2200      	movs	r2, #0
 800b1bc:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 800b1be:	68bb      	ldr	r3, [r7, #8]
 800b1c0:	f003 0304 	and.w	r3, r3, #4
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d003      	beq.n	800b1d0 <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 800b1c8:	4b16      	ldr	r3, [pc, #88]	; (800b224 <ethernetif_update_config+0xf4>)
 800b1ca:	2200      	movs	r2, #0
 800b1cc:	609a      	str	r2, [r3, #8]
 800b1ce:	e016      	b.n	800b1fe <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 800b1d0:	4b14      	ldr	r3, [pc, #80]	; (800b224 <ethernetif_update_config+0xf4>)
 800b1d2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800b1d6:	609a      	str	r2, [r3, #8]
 800b1d8:	e011      	b.n	800b1fe <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 800b1da:	bf00      	nop
 800b1dc:	e000      	b.n	800b1e0 <ethernetif_update_config+0xb0>
          goto error;
 800b1de:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 800b1e0:	4b10      	ldr	r3, [pc, #64]	; (800b224 <ethernetif_update_config+0xf4>)
 800b1e2:	68db      	ldr	r3, [r3, #12]
 800b1e4:	08db      	lsrs	r3, r3, #3
 800b1e6:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 800b1e8:	4b0e      	ldr	r3, [pc, #56]	; (800b224 <ethernetif_update_config+0xf4>)
 800b1ea:	689b      	ldr	r3, [r3, #8]
 800b1ec:	085b      	lsrs	r3, r3, #1
 800b1ee:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 800b1f0:	4313      	orrs	r3, r2
 800b1f2:	b29b      	uxth	r3, r3
 800b1f4:	461a      	mov	r2, r3
 800b1f6:	2100      	movs	r1, #0
 800b1f8:	480a      	ldr	r0, [pc, #40]	; (800b224 <ethernetif_update_config+0xf4>)
 800b1fa:	f7fb fe9f 	bl	8006f3c <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 800b1fe:	2100      	movs	r1, #0
 800b200:	4808      	ldr	r0, [pc, #32]	; (800b224 <ethernetif_update_config+0xf4>)
 800b202:	f7fb ff5f 	bl	80070c4 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 800b206:	4807      	ldr	r0, [pc, #28]	; (800b224 <ethernetif_update_config+0xf4>)
 800b208:	f7fb fefe 	bl	8007008 <HAL_ETH_Start>
 800b20c:	e002      	b.n	800b214 <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 800b20e:	4805      	ldr	r0, [pc, #20]	; (800b224 <ethernetif_update_config+0xf4>)
 800b210:	f7fb ff29 	bl	8007066 <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 800b214:	6878      	ldr	r0, [r7, #4]
 800b216:	f000 f807 	bl	800b228 <ethernetif_notify_conn_changed>
}
 800b21a:	bf00      	nop
 800b21c:	3710      	adds	r7, #16
 800b21e:	46bd      	mov	sp, r7
 800b220:	bd80      	pop	{r7, pc}
 800b222:	bf00      	nop
 800b224:	20002500 	.word	0x20002500

0800b228 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 800b228:	b480      	push	{r7}
 800b22a:	b083      	sub	sp, #12
 800b22c:	af00      	add	r7, sp, #0
 800b22e:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 800b230:	bf00      	nop
 800b232:	370c      	adds	r7, #12
 800b234:	46bd      	mov	sp, r7
 800b236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b23a:	4770      	bx	lr

0800b23c <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800b23c:	b480      	push	{r7}
 800b23e:	b083      	sub	sp, #12
 800b240:	af00      	add	r7, sp, #0
 800b242:	4603      	mov	r3, r0
 800b244:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800b246:	88fb      	ldrh	r3, [r7, #6]
 800b248:	021b      	lsls	r3, r3, #8
 800b24a:	b21a      	sxth	r2, r3
 800b24c:	88fb      	ldrh	r3, [r7, #6]
 800b24e:	0a1b      	lsrs	r3, r3, #8
 800b250:	b29b      	uxth	r3, r3
 800b252:	b21b      	sxth	r3, r3
 800b254:	4313      	orrs	r3, r2
 800b256:	b21b      	sxth	r3, r3
 800b258:	b29b      	uxth	r3, r3
}
 800b25a:	4618      	mov	r0, r3
 800b25c:	370c      	adds	r7, #12
 800b25e:	46bd      	mov	sp, r7
 800b260:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b264:	4770      	bx	lr

0800b266 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800b266:	b480      	push	{r7}
 800b268:	b083      	sub	sp, #12
 800b26a:	af00      	add	r7, sp, #0
 800b26c:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	061a      	lsls	r2, r3, #24
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	021b      	lsls	r3, r3, #8
 800b276:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b27a:	431a      	orrs	r2, r3
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	0a1b      	lsrs	r3, r3, #8
 800b280:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800b284:	431a      	orrs	r2, r3
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	0e1b      	lsrs	r3, r3, #24
 800b28a:	4313      	orrs	r3, r2
}
 800b28c:	4618      	mov	r0, r3
 800b28e:	370c      	adds	r7, #12
 800b290:	46bd      	mov	sp, r7
 800b292:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b296:	4770      	bx	lr

0800b298 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800b298:	b580      	push	{r7, lr}
 800b29a:	b082      	sub	sp, #8
 800b29c:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800b29e:	2300      	movs	r3, #0
 800b2a0:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 800b2a2:	f000 f8d5 	bl	800b450 <mem_init>
  memp_init();
 800b2a6:	f000 fbdb 	bl	800ba60 <memp_init>
  pbuf_init();
  netif_init();
 800b2aa:	f000 fc93 	bl	800bbd4 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800b2ae:	f006 ff5d 	bl	801216c <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800b2b2:	f001 fcfd 	bl	800ccb0 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800b2b6:	f006 ff11 	bl	80120dc <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800b2ba:	bf00      	nop
 800b2bc:	3708      	adds	r7, #8
 800b2be:	46bd      	mov	sp, r7
 800b2c0:	bd80      	pop	{r7, pc}
	...

0800b2c4 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800b2c4:	b480      	push	{r7}
 800b2c6:	b083      	sub	sp, #12
 800b2c8:	af00      	add	r7, sp, #0
 800b2ca:	4603      	mov	r3, r0
 800b2cc:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800b2ce:	4b05      	ldr	r3, [pc, #20]	; (800b2e4 <ptr_to_mem+0x20>)
 800b2d0:	681a      	ldr	r2, [r3, #0]
 800b2d2:	88fb      	ldrh	r3, [r7, #6]
 800b2d4:	4413      	add	r3, r2
}
 800b2d6:	4618      	mov	r0, r3
 800b2d8:	370c      	adds	r7, #12
 800b2da:	46bd      	mov	sp, r7
 800b2dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2e0:	4770      	bx	lr
 800b2e2:	bf00      	nop
 800b2e4:	20000424 	.word	0x20000424

0800b2e8 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800b2e8:	b480      	push	{r7}
 800b2ea:	b083      	sub	sp, #12
 800b2ec:	af00      	add	r7, sp, #0
 800b2ee:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800b2f0:	4b05      	ldr	r3, [pc, #20]	; (800b308 <mem_to_ptr+0x20>)
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	687a      	ldr	r2, [r7, #4]
 800b2f6:	1ad3      	subs	r3, r2, r3
 800b2f8:	b29b      	uxth	r3, r3
}
 800b2fa:	4618      	mov	r0, r3
 800b2fc:	370c      	adds	r7, #12
 800b2fe:	46bd      	mov	sp, r7
 800b300:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b304:	4770      	bx	lr
 800b306:	bf00      	nop
 800b308:	20000424 	.word	0x20000424

0800b30c <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800b30c:	b590      	push	{r4, r7, lr}
 800b30e:	b085      	sub	sp, #20
 800b310:	af00      	add	r7, sp, #0
 800b312:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800b314:	4b45      	ldr	r3, [pc, #276]	; (800b42c <plug_holes+0x120>)
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	687a      	ldr	r2, [r7, #4]
 800b31a:	429a      	cmp	r2, r3
 800b31c:	d206      	bcs.n	800b32c <plug_holes+0x20>
 800b31e:	4b44      	ldr	r3, [pc, #272]	; (800b430 <plug_holes+0x124>)
 800b320:	f240 12df 	movw	r2, #479	; 0x1df
 800b324:	4943      	ldr	r1, [pc, #268]	; (800b434 <plug_holes+0x128>)
 800b326:	4844      	ldr	r0, [pc, #272]	; (800b438 <plug_holes+0x12c>)
 800b328:	f00c faa2 	bl	8017870 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800b32c:	4b43      	ldr	r3, [pc, #268]	; (800b43c <plug_holes+0x130>)
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	687a      	ldr	r2, [r7, #4]
 800b332:	429a      	cmp	r2, r3
 800b334:	d306      	bcc.n	800b344 <plug_holes+0x38>
 800b336:	4b3e      	ldr	r3, [pc, #248]	; (800b430 <plug_holes+0x124>)
 800b338:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800b33c:	4940      	ldr	r1, [pc, #256]	; (800b440 <plug_holes+0x134>)
 800b33e:	483e      	ldr	r0, [pc, #248]	; (800b438 <plug_holes+0x12c>)
 800b340:	f00c fa96 	bl	8017870 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	791b      	ldrb	r3, [r3, #4]
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d006      	beq.n	800b35a <plug_holes+0x4e>
 800b34c:	4b38      	ldr	r3, [pc, #224]	; (800b430 <plug_holes+0x124>)
 800b34e:	f240 12e1 	movw	r2, #481	; 0x1e1
 800b352:	493c      	ldr	r1, [pc, #240]	; (800b444 <plug_holes+0x138>)
 800b354:	4838      	ldr	r0, [pc, #224]	; (800b438 <plug_holes+0x12c>)
 800b356:	f00c fa8b 	bl	8017870 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	881b      	ldrh	r3, [r3, #0]
 800b35e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b362:	d906      	bls.n	800b372 <plug_holes+0x66>
 800b364:	4b32      	ldr	r3, [pc, #200]	; (800b430 <plug_holes+0x124>)
 800b366:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800b36a:	4937      	ldr	r1, [pc, #220]	; (800b448 <plug_holes+0x13c>)
 800b36c:	4832      	ldr	r0, [pc, #200]	; (800b438 <plug_holes+0x12c>)
 800b36e:	f00c fa7f 	bl	8017870 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	881b      	ldrh	r3, [r3, #0]
 800b376:	4618      	mov	r0, r3
 800b378:	f7ff ffa4 	bl	800b2c4 <ptr_to_mem>
 800b37c:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800b37e:	687a      	ldr	r2, [r7, #4]
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	429a      	cmp	r2, r3
 800b384:	d024      	beq.n	800b3d0 <plug_holes+0xc4>
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	791b      	ldrb	r3, [r3, #4]
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d120      	bne.n	800b3d0 <plug_holes+0xc4>
 800b38e:	4b2b      	ldr	r3, [pc, #172]	; (800b43c <plug_holes+0x130>)
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	68fa      	ldr	r2, [r7, #12]
 800b394:	429a      	cmp	r2, r3
 800b396:	d01b      	beq.n	800b3d0 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800b398:	4b2c      	ldr	r3, [pc, #176]	; (800b44c <plug_holes+0x140>)
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	68fa      	ldr	r2, [r7, #12]
 800b39e:	429a      	cmp	r2, r3
 800b3a0:	d102      	bne.n	800b3a8 <plug_holes+0x9c>
      lfree = mem;
 800b3a2:	4a2a      	ldr	r2, [pc, #168]	; (800b44c <plug_holes+0x140>)
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	881a      	ldrh	r2, [r3, #0]
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	881b      	ldrh	r3, [r3, #0]
 800b3b4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b3b8:	d00a      	beq.n	800b3d0 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	881b      	ldrh	r3, [r3, #0]
 800b3be:	4618      	mov	r0, r3
 800b3c0:	f7ff ff80 	bl	800b2c4 <ptr_to_mem>
 800b3c4:	4604      	mov	r4, r0
 800b3c6:	6878      	ldr	r0, [r7, #4]
 800b3c8:	f7ff ff8e 	bl	800b2e8 <mem_to_ptr>
 800b3cc:	4603      	mov	r3, r0
 800b3ce:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	885b      	ldrh	r3, [r3, #2]
 800b3d4:	4618      	mov	r0, r3
 800b3d6:	f7ff ff75 	bl	800b2c4 <ptr_to_mem>
 800b3da:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800b3dc:	68ba      	ldr	r2, [r7, #8]
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	429a      	cmp	r2, r3
 800b3e2:	d01f      	beq.n	800b424 <plug_holes+0x118>
 800b3e4:	68bb      	ldr	r3, [r7, #8]
 800b3e6:	791b      	ldrb	r3, [r3, #4]
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	d11b      	bne.n	800b424 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800b3ec:	4b17      	ldr	r3, [pc, #92]	; (800b44c <plug_holes+0x140>)
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	687a      	ldr	r2, [r7, #4]
 800b3f2:	429a      	cmp	r2, r3
 800b3f4:	d102      	bne.n	800b3fc <plug_holes+0xf0>
      lfree = pmem;
 800b3f6:	4a15      	ldr	r2, [pc, #84]	; (800b44c <plug_holes+0x140>)
 800b3f8:	68bb      	ldr	r3, [r7, #8]
 800b3fa:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	881a      	ldrh	r2, [r3, #0]
 800b400:	68bb      	ldr	r3, [r7, #8]
 800b402:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	881b      	ldrh	r3, [r3, #0]
 800b408:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b40c:	d00a      	beq.n	800b424 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	881b      	ldrh	r3, [r3, #0]
 800b412:	4618      	mov	r0, r3
 800b414:	f7ff ff56 	bl	800b2c4 <ptr_to_mem>
 800b418:	4604      	mov	r4, r0
 800b41a:	68b8      	ldr	r0, [r7, #8]
 800b41c:	f7ff ff64 	bl	800b2e8 <mem_to_ptr>
 800b420:	4603      	mov	r3, r0
 800b422:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800b424:	bf00      	nop
 800b426:	3714      	adds	r7, #20
 800b428:	46bd      	mov	sp, r7
 800b42a:	bd90      	pop	{r4, r7, pc}
 800b42c:	20000424 	.word	0x20000424
 800b430:	0801cc94 	.word	0x0801cc94
 800b434:	0801ccc4 	.word	0x0801ccc4
 800b438:	0801ccdc 	.word	0x0801ccdc
 800b43c:	20000428 	.word	0x20000428
 800b440:	0801cd04 	.word	0x0801cd04
 800b444:	0801cd20 	.word	0x0801cd20
 800b448:	0801cd3c 	.word	0x0801cd3c
 800b44c:	2000042c 	.word	0x2000042c

0800b450 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800b450:	b580      	push	{r7, lr}
 800b452:	b082      	sub	sp, #8
 800b454:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800b456:	4b18      	ldr	r3, [pc, #96]	; (800b4b8 <mem_init+0x68>)
 800b458:	3303      	adds	r3, #3
 800b45a:	f023 0303 	bic.w	r3, r3, #3
 800b45e:	461a      	mov	r2, r3
 800b460:	4b16      	ldr	r3, [pc, #88]	; (800b4bc <mem_init+0x6c>)
 800b462:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800b464:	4b15      	ldr	r3, [pc, #84]	; (800b4bc <mem_init+0x6c>)
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800b470:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	2200      	movs	r2, #0
 800b476:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	2200      	movs	r2, #0
 800b47c:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800b47e:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800b482:	f7ff ff1f 	bl	800b2c4 <ptr_to_mem>
 800b486:	4603      	mov	r3, r0
 800b488:	4a0d      	ldr	r2, [pc, #52]	; (800b4c0 <mem_init+0x70>)
 800b48a:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800b48c:	4b0c      	ldr	r3, [pc, #48]	; (800b4c0 <mem_init+0x70>)
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	2201      	movs	r2, #1
 800b492:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800b494:	4b0a      	ldr	r3, [pc, #40]	; (800b4c0 <mem_init+0x70>)
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800b49c:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800b49e:	4b08      	ldr	r3, [pc, #32]	; (800b4c0 <mem_init+0x70>)
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800b4a6:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800b4a8:	4b04      	ldr	r3, [pc, #16]	; (800b4bc <mem_init+0x6c>)
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	4a05      	ldr	r2, [pc, #20]	; (800b4c4 <mem_init+0x74>)
 800b4ae:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 800b4b0:	bf00      	nop
 800b4b2:	3708      	adds	r7, #8
 800b4b4:	46bd      	mov	sp, r7
 800b4b6:	bd80      	pop	{r7, pc}
 800b4b8:	20003d30 	.word	0x20003d30
 800b4bc:	20000424 	.word	0x20000424
 800b4c0:	20000428 	.word	0x20000428
 800b4c4:	2000042c 	.word	0x2000042c

0800b4c8 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800b4c8:	b580      	push	{r7, lr}
 800b4ca:	b086      	sub	sp, #24
 800b4cc:	af00      	add	r7, sp, #0
 800b4ce:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800b4d0:	6878      	ldr	r0, [r7, #4]
 800b4d2:	f7ff ff09 	bl	800b2e8 <mem_to_ptr>
 800b4d6:	4603      	mov	r3, r0
 800b4d8:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	881b      	ldrh	r3, [r3, #0]
 800b4de:	4618      	mov	r0, r3
 800b4e0:	f7ff fef0 	bl	800b2c4 <ptr_to_mem>
 800b4e4:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	885b      	ldrh	r3, [r3, #2]
 800b4ea:	4618      	mov	r0, r3
 800b4ec:	f7ff feea 	bl	800b2c4 <ptr_to_mem>
 800b4f0:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	881b      	ldrh	r3, [r3, #0]
 800b4f6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b4fa:	d818      	bhi.n	800b52e <mem_link_valid+0x66>
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	885b      	ldrh	r3, [r3, #2]
 800b500:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b504:	d813      	bhi.n	800b52e <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800b50a:	8afa      	ldrh	r2, [r7, #22]
 800b50c:	429a      	cmp	r2, r3
 800b50e:	d004      	beq.n	800b51a <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	881b      	ldrh	r3, [r3, #0]
 800b514:	8afa      	ldrh	r2, [r7, #22]
 800b516:	429a      	cmp	r2, r3
 800b518:	d109      	bne.n	800b52e <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800b51a:	4b08      	ldr	r3, [pc, #32]	; (800b53c <mem_link_valid+0x74>)
 800b51c:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800b51e:	693a      	ldr	r2, [r7, #16]
 800b520:	429a      	cmp	r2, r3
 800b522:	d006      	beq.n	800b532 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800b524:	693b      	ldr	r3, [r7, #16]
 800b526:	885b      	ldrh	r3, [r3, #2]
 800b528:	8afa      	ldrh	r2, [r7, #22]
 800b52a:	429a      	cmp	r2, r3
 800b52c:	d001      	beq.n	800b532 <mem_link_valid+0x6a>
    return 0;
 800b52e:	2300      	movs	r3, #0
 800b530:	e000      	b.n	800b534 <mem_link_valid+0x6c>
  }
  return 1;
 800b532:	2301      	movs	r3, #1
}
 800b534:	4618      	mov	r0, r3
 800b536:	3718      	adds	r7, #24
 800b538:	46bd      	mov	sp, r7
 800b53a:	bd80      	pop	{r7, pc}
 800b53c:	20000428 	.word	0x20000428

0800b540 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800b540:	b580      	push	{r7, lr}
 800b542:	b084      	sub	sp, #16
 800b544:	af00      	add	r7, sp, #0
 800b546:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d04c      	beq.n	800b5e8 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	f003 0303 	and.w	r3, r3, #3
 800b554:	2b00      	cmp	r3, #0
 800b556:	d007      	beq.n	800b568 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800b558:	4b25      	ldr	r3, [pc, #148]	; (800b5f0 <mem_free+0xb0>)
 800b55a:	f240 2273 	movw	r2, #627	; 0x273
 800b55e:	4925      	ldr	r1, [pc, #148]	; (800b5f4 <mem_free+0xb4>)
 800b560:	4825      	ldr	r0, [pc, #148]	; (800b5f8 <mem_free+0xb8>)
 800b562:	f00c f985 	bl	8017870 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800b566:	e040      	b.n	800b5ea <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	3b08      	subs	r3, #8
 800b56c:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800b56e:	4b23      	ldr	r3, [pc, #140]	; (800b5fc <mem_free+0xbc>)
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	68fa      	ldr	r2, [r7, #12]
 800b574:	429a      	cmp	r2, r3
 800b576:	d306      	bcc.n	800b586 <mem_free+0x46>
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	f103 020c 	add.w	r2, r3, #12
 800b57e:	4b20      	ldr	r3, [pc, #128]	; (800b600 <mem_free+0xc0>)
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	429a      	cmp	r2, r3
 800b584:	d907      	bls.n	800b596 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800b586:	4b1a      	ldr	r3, [pc, #104]	; (800b5f0 <mem_free+0xb0>)
 800b588:	f240 227f 	movw	r2, #639	; 0x27f
 800b58c:	491d      	ldr	r1, [pc, #116]	; (800b604 <mem_free+0xc4>)
 800b58e:	481a      	ldr	r0, [pc, #104]	; (800b5f8 <mem_free+0xb8>)
 800b590:	f00c f96e 	bl	8017870 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800b594:	e029      	b.n	800b5ea <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	791b      	ldrb	r3, [r3, #4]
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	d107      	bne.n	800b5ae <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800b59e:	4b14      	ldr	r3, [pc, #80]	; (800b5f0 <mem_free+0xb0>)
 800b5a0:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800b5a4:	4918      	ldr	r1, [pc, #96]	; (800b608 <mem_free+0xc8>)
 800b5a6:	4814      	ldr	r0, [pc, #80]	; (800b5f8 <mem_free+0xb8>)
 800b5a8:	f00c f962 	bl	8017870 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800b5ac:	e01d      	b.n	800b5ea <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 800b5ae:	68f8      	ldr	r0, [r7, #12]
 800b5b0:	f7ff ff8a 	bl	800b4c8 <mem_link_valid>
 800b5b4:	4603      	mov	r3, r0
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d107      	bne.n	800b5ca <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800b5ba:	4b0d      	ldr	r3, [pc, #52]	; (800b5f0 <mem_free+0xb0>)
 800b5bc:	f240 2295 	movw	r2, #661	; 0x295
 800b5c0:	4912      	ldr	r1, [pc, #72]	; (800b60c <mem_free+0xcc>)
 800b5c2:	480d      	ldr	r0, [pc, #52]	; (800b5f8 <mem_free+0xb8>)
 800b5c4:	f00c f954 	bl	8017870 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800b5c8:	e00f      	b.n	800b5ea <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	2200      	movs	r2, #0
 800b5ce:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800b5d0:	4b0f      	ldr	r3, [pc, #60]	; (800b610 <mem_free+0xd0>)
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	68fa      	ldr	r2, [r7, #12]
 800b5d6:	429a      	cmp	r2, r3
 800b5d8:	d202      	bcs.n	800b5e0 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800b5da:	4a0d      	ldr	r2, [pc, #52]	; (800b610 <mem_free+0xd0>)
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800b5e0:	68f8      	ldr	r0, [r7, #12]
 800b5e2:	f7ff fe93 	bl	800b30c <plug_holes>
 800b5e6:	e000      	b.n	800b5ea <mem_free+0xaa>
    return;
 800b5e8:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 800b5ea:	3710      	adds	r7, #16
 800b5ec:	46bd      	mov	sp, r7
 800b5ee:	bd80      	pop	{r7, pc}
 800b5f0:	0801cc94 	.word	0x0801cc94
 800b5f4:	0801cd68 	.word	0x0801cd68
 800b5f8:	0801ccdc 	.word	0x0801ccdc
 800b5fc:	20000424 	.word	0x20000424
 800b600:	20000428 	.word	0x20000428
 800b604:	0801cd8c 	.word	0x0801cd8c
 800b608:	0801cda8 	.word	0x0801cda8
 800b60c:	0801cdd0 	.word	0x0801cdd0
 800b610:	2000042c 	.word	0x2000042c

0800b614 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800b614:	b580      	push	{r7, lr}
 800b616:	b088      	sub	sp, #32
 800b618:	af00      	add	r7, sp, #0
 800b61a:	6078      	str	r0, [r7, #4]
 800b61c:	460b      	mov	r3, r1
 800b61e:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800b620:	887b      	ldrh	r3, [r7, #2]
 800b622:	3303      	adds	r3, #3
 800b624:	b29b      	uxth	r3, r3
 800b626:	f023 0303 	bic.w	r3, r3, #3
 800b62a:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800b62c:	8bfb      	ldrh	r3, [r7, #30]
 800b62e:	2b0b      	cmp	r3, #11
 800b630:	d801      	bhi.n	800b636 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800b632:	230c      	movs	r3, #12
 800b634:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800b636:	8bfb      	ldrh	r3, [r7, #30]
 800b638:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b63c:	d803      	bhi.n	800b646 <mem_trim+0x32>
 800b63e:	8bfa      	ldrh	r2, [r7, #30]
 800b640:	887b      	ldrh	r3, [r7, #2]
 800b642:	429a      	cmp	r2, r3
 800b644:	d201      	bcs.n	800b64a <mem_trim+0x36>
    return NULL;
 800b646:	2300      	movs	r3, #0
 800b648:	e0cc      	b.n	800b7e4 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800b64a:	4b68      	ldr	r3, [pc, #416]	; (800b7ec <mem_trim+0x1d8>)
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	687a      	ldr	r2, [r7, #4]
 800b650:	429a      	cmp	r2, r3
 800b652:	d304      	bcc.n	800b65e <mem_trim+0x4a>
 800b654:	4b66      	ldr	r3, [pc, #408]	; (800b7f0 <mem_trim+0x1dc>)
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	687a      	ldr	r2, [r7, #4]
 800b65a:	429a      	cmp	r2, r3
 800b65c:	d306      	bcc.n	800b66c <mem_trim+0x58>
 800b65e:	4b65      	ldr	r3, [pc, #404]	; (800b7f4 <mem_trim+0x1e0>)
 800b660:	f240 22d1 	movw	r2, #721	; 0x2d1
 800b664:	4964      	ldr	r1, [pc, #400]	; (800b7f8 <mem_trim+0x1e4>)
 800b666:	4865      	ldr	r0, [pc, #404]	; (800b7fc <mem_trim+0x1e8>)
 800b668:	f00c f902 	bl	8017870 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800b66c:	4b5f      	ldr	r3, [pc, #380]	; (800b7ec <mem_trim+0x1d8>)
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	687a      	ldr	r2, [r7, #4]
 800b672:	429a      	cmp	r2, r3
 800b674:	d304      	bcc.n	800b680 <mem_trim+0x6c>
 800b676:	4b5e      	ldr	r3, [pc, #376]	; (800b7f0 <mem_trim+0x1dc>)
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	687a      	ldr	r2, [r7, #4]
 800b67c:	429a      	cmp	r2, r3
 800b67e:	d301      	bcc.n	800b684 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	e0af      	b.n	800b7e4 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	3b08      	subs	r3, #8
 800b688:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800b68a:	69b8      	ldr	r0, [r7, #24]
 800b68c:	f7ff fe2c 	bl	800b2e8 <mem_to_ptr>
 800b690:	4603      	mov	r3, r0
 800b692:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800b694:	69bb      	ldr	r3, [r7, #24]
 800b696:	881a      	ldrh	r2, [r3, #0]
 800b698:	8afb      	ldrh	r3, [r7, #22]
 800b69a:	1ad3      	subs	r3, r2, r3
 800b69c:	b29b      	uxth	r3, r3
 800b69e:	3b08      	subs	r3, #8
 800b6a0:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800b6a2:	8bfa      	ldrh	r2, [r7, #30]
 800b6a4:	8abb      	ldrh	r3, [r7, #20]
 800b6a6:	429a      	cmp	r2, r3
 800b6a8:	d906      	bls.n	800b6b8 <mem_trim+0xa4>
 800b6aa:	4b52      	ldr	r3, [pc, #328]	; (800b7f4 <mem_trim+0x1e0>)
 800b6ac:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800b6b0:	4953      	ldr	r1, [pc, #332]	; (800b800 <mem_trim+0x1ec>)
 800b6b2:	4852      	ldr	r0, [pc, #328]	; (800b7fc <mem_trim+0x1e8>)
 800b6b4:	f00c f8dc 	bl	8017870 <iprintf>
  if (newsize > size) {
 800b6b8:	8bfa      	ldrh	r2, [r7, #30]
 800b6ba:	8abb      	ldrh	r3, [r7, #20]
 800b6bc:	429a      	cmp	r2, r3
 800b6be:	d901      	bls.n	800b6c4 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 800b6c0:	2300      	movs	r3, #0
 800b6c2:	e08f      	b.n	800b7e4 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 800b6c4:	8bfa      	ldrh	r2, [r7, #30]
 800b6c6:	8abb      	ldrh	r3, [r7, #20]
 800b6c8:	429a      	cmp	r2, r3
 800b6ca:	d101      	bne.n	800b6d0 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	e089      	b.n	800b7e4 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 800b6d0:	69bb      	ldr	r3, [r7, #24]
 800b6d2:	881b      	ldrh	r3, [r3, #0]
 800b6d4:	4618      	mov	r0, r3
 800b6d6:	f7ff fdf5 	bl	800b2c4 <ptr_to_mem>
 800b6da:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800b6dc:	693b      	ldr	r3, [r7, #16]
 800b6de:	791b      	ldrb	r3, [r3, #4]
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d13f      	bne.n	800b764 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800b6e4:	69bb      	ldr	r3, [r7, #24]
 800b6e6:	881b      	ldrh	r3, [r3, #0]
 800b6e8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b6ec:	d106      	bne.n	800b6fc <mem_trim+0xe8>
 800b6ee:	4b41      	ldr	r3, [pc, #260]	; (800b7f4 <mem_trim+0x1e0>)
 800b6f0:	f240 22f5 	movw	r2, #757	; 0x2f5
 800b6f4:	4943      	ldr	r1, [pc, #268]	; (800b804 <mem_trim+0x1f0>)
 800b6f6:	4841      	ldr	r0, [pc, #260]	; (800b7fc <mem_trim+0x1e8>)
 800b6f8:	f00c f8ba 	bl	8017870 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800b6fc:	693b      	ldr	r3, [r7, #16]
 800b6fe:	881b      	ldrh	r3, [r3, #0]
 800b700:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800b702:	8afa      	ldrh	r2, [r7, #22]
 800b704:	8bfb      	ldrh	r3, [r7, #30]
 800b706:	4413      	add	r3, r2
 800b708:	b29b      	uxth	r3, r3
 800b70a:	3308      	adds	r3, #8
 800b70c:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800b70e:	4b3e      	ldr	r3, [pc, #248]	; (800b808 <mem_trim+0x1f4>)
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	693a      	ldr	r2, [r7, #16]
 800b714:	429a      	cmp	r2, r3
 800b716:	d106      	bne.n	800b726 <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 800b718:	89fb      	ldrh	r3, [r7, #14]
 800b71a:	4618      	mov	r0, r3
 800b71c:	f7ff fdd2 	bl	800b2c4 <ptr_to_mem>
 800b720:	4603      	mov	r3, r0
 800b722:	4a39      	ldr	r2, [pc, #228]	; (800b808 <mem_trim+0x1f4>)
 800b724:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800b726:	89fb      	ldrh	r3, [r7, #14]
 800b728:	4618      	mov	r0, r3
 800b72a:	f7ff fdcb 	bl	800b2c4 <ptr_to_mem>
 800b72e:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800b730:	693b      	ldr	r3, [r7, #16]
 800b732:	2200      	movs	r2, #0
 800b734:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800b736:	693b      	ldr	r3, [r7, #16]
 800b738:	89ba      	ldrh	r2, [r7, #12]
 800b73a:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800b73c:	693b      	ldr	r3, [r7, #16]
 800b73e:	8afa      	ldrh	r2, [r7, #22]
 800b740:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800b742:	69bb      	ldr	r3, [r7, #24]
 800b744:	89fa      	ldrh	r2, [r7, #14]
 800b746:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800b748:	693b      	ldr	r3, [r7, #16]
 800b74a:	881b      	ldrh	r3, [r3, #0]
 800b74c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b750:	d047      	beq.n	800b7e2 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800b752:	693b      	ldr	r3, [r7, #16]
 800b754:	881b      	ldrh	r3, [r3, #0]
 800b756:	4618      	mov	r0, r3
 800b758:	f7ff fdb4 	bl	800b2c4 <ptr_to_mem>
 800b75c:	4602      	mov	r2, r0
 800b75e:	89fb      	ldrh	r3, [r7, #14]
 800b760:	8053      	strh	r3, [r2, #2]
 800b762:	e03e      	b.n	800b7e2 <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800b764:	8bfb      	ldrh	r3, [r7, #30]
 800b766:	f103 0214 	add.w	r2, r3, #20
 800b76a:	8abb      	ldrh	r3, [r7, #20]
 800b76c:	429a      	cmp	r2, r3
 800b76e:	d838      	bhi.n	800b7e2 <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800b770:	8afa      	ldrh	r2, [r7, #22]
 800b772:	8bfb      	ldrh	r3, [r7, #30]
 800b774:	4413      	add	r3, r2
 800b776:	b29b      	uxth	r3, r3
 800b778:	3308      	adds	r3, #8
 800b77a:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800b77c:	69bb      	ldr	r3, [r7, #24]
 800b77e:	881b      	ldrh	r3, [r3, #0]
 800b780:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b784:	d106      	bne.n	800b794 <mem_trim+0x180>
 800b786:	4b1b      	ldr	r3, [pc, #108]	; (800b7f4 <mem_trim+0x1e0>)
 800b788:	f240 3216 	movw	r2, #790	; 0x316
 800b78c:	491d      	ldr	r1, [pc, #116]	; (800b804 <mem_trim+0x1f0>)
 800b78e:	481b      	ldr	r0, [pc, #108]	; (800b7fc <mem_trim+0x1e8>)
 800b790:	f00c f86e 	bl	8017870 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800b794:	89fb      	ldrh	r3, [r7, #14]
 800b796:	4618      	mov	r0, r3
 800b798:	f7ff fd94 	bl	800b2c4 <ptr_to_mem>
 800b79c:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800b79e:	4b1a      	ldr	r3, [pc, #104]	; (800b808 <mem_trim+0x1f4>)
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	693a      	ldr	r2, [r7, #16]
 800b7a4:	429a      	cmp	r2, r3
 800b7a6:	d202      	bcs.n	800b7ae <mem_trim+0x19a>
      lfree = mem2;
 800b7a8:	4a17      	ldr	r2, [pc, #92]	; (800b808 <mem_trim+0x1f4>)
 800b7aa:	693b      	ldr	r3, [r7, #16]
 800b7ac:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800b7ae:	693b      	ldr	r3, [r7, #16]
 800b7b0:	2200      	movs	r2, #0
 800b7b2:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800b7b4:	69bb      	ldr	r3, [r7, #24]
 800b7b6:	881a      	ldrh	r2, [r3, #0]
 800b7b8:	693b      	ldr	r3, [r7, #16]
 800b7ba:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800b7bc:	693b      	ldr	r3, [r7, #16]
 800b7be:	8afa      	ldrh	r2, [r7, #22]
 800b7c0:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800b7c2:	69bb      	ldr	r3, [r7, #24]
 800b7c4:	89fa      	ldrh	r2, [r7, #14]
 800b7c6:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800b7c8:	693b      	ldr	r3, [r7, #16]
 800b7ca:	881b      	ldrh	r3, [r3, #0]
 800b7cc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b7d0:	d007      	beq.n	800b7e2 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800b7d2:	693b      	ldr	r3, [r7, #16]
 800b7d4:	881b      	ldrh	r3, [r3, #0]
 800b7d6:	4618      	mov	r0, r3
 800b7d8:	f7ff fd74 	bl	800b2c4 <ptr_to_mem>
 800b7dc:	4602      	mov	r2, r0
 800b7de:	89fb      	ldrh	r3, [r7, #14]
 800b7e0:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 800b7e2:	687b      	ldr	r3, [r7, #4]
}
 800b7e4:	4618      	mov	r0, r3
 800b7e6:	3720      	adds	r7, #32
 800b7e8:	46bd      	mov	sp, r7
 800b7ea:	bd80      	pop	{r7, pc}
 800b7ec:	20000424 	.word	0x20000424
 800b7f0:	20000428 	.word	0x20000428
 800b7f4:	0801cc94 	.word	0x0801cc94
 800b7f8:	0801ce04 	.word	0x0801ce04
 800b7fc:	0801ccdc 	.word	0x0801ccdc
 800b800:	0801ce1c 	.word	0x0801ce1c
 800b804:	0801ce3c 	.word	0x0801ce3c
 800b808:	2000042c 	.word	0x2000042c

0800b80c <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800b80c:	b580      	push	{r7, lr}
 800b80e:	b088      	sub	sp, #32
 800b810:	af00      	add	r7, sp, #0
 800b812:	4603      	mov	r3, r0
 800b814:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800b816:	88fb      	ldrh	r3, [r7, #6]
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d101      	bne.n	800b820 <mem_malloc+0x14>
    return NULL;
 800b81c:	2300      	movs	r3, #0
 800b81e:	e0d9      	b.n	800b9d4 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800b820:	88fb      	ldrh	r3, [r7, #6]
 800b822:	3303      	adds	r3, #3
 800b824:	b29b      	uxth	r3, r3
 800b826:	f023 0303 	bic.w	r3, r3, #3
 800b82a:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800b82c:	8bbb      	ldrh	r3, [r7, #28]
 800b82e:	2b0b      	cmp	r3, #11
 800b830:	d801      	bhi.n	800b836 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800b832:	230c      	movs	r3, #12
 800b834:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800b836:	8bbb      	ldrh	r3, [r7, #28]
 800b838:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b83c:	d803      	bhi.n	800b846 <mem_malloc+0x3a>
 800b83e:	8bba      	ldrh	r2, [r7, #28]
 800b840:	88fb      	ldrh	r3, [r7, #6]
 800b842:	429a      	cmp	r2, r3
 800b844:	d201      	bcs.n	800b84a <mem_malloc+0x3e>
    return NULL;
 800b846:	2300      	movs	r3, #0
 800b848:	e0c4      	b.n	800b9d4 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800b84a:	4b64      	ldr	r3, [pc, #400]	; (800b9dc <mem_malloc+0x1d0>)
 800b84c:	681b      	ldr	r3, [r3, #0]
 800b84e:	4618      	mov	r0, r3
 800b850:	f7ff fd4a 	bl	800b2e8 <mem_to_ptr>
 800b854:	4603      	mov	r3, r0
 800b856:	83fb      	strh	r3, [r7, #30]
 800b858:	e0b4      	b.n	800b9c4 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800b85a:	8bfb      	ldrh	r3, [r7, #30]
 800b85c:	4618      	mov	r0, r3
 800b85e:	f7ff fd31 	bl	800b2c4 <ptr_to_mem>
 800b862:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800b864:	697b      	ldr	r3, [r7, #20]
 800b866:	791b      	ldrb	r3, [r3, #4]
 800b868:	2b00      	cmp	r3, #0
 800b86a:	f040 80a4 	bne.w	800b9b6 <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800b86e:	697b      	ldr	r3, [r7, #20]
 800b870:	881b      	ldrh	r3, [r3, #0]
 800b872:	461a      	mov	r2, r3
 800b874:	8bfb      	ldrh	r3, [r7, #30]
 800b876:	1ad3      	subs	r3, r2, r3
 800b878:	f1a3 0208 	sub.w	r2, r3, #8
 800b87c:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800b87e:	429a      	cmp	r2, r3
 800b880:	f0c0 8099 	bcc.w	800b9b6 <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800b884:	697b      	ldr	r3, [r7, #20]
 800b886:	881b      	ldrh	r3, [r3, #0]
 800b888:	461a      	mov	r2, r3
 800b88a:	8bfb      	ldrh	r3, [r7, #30]
 800b88c:	1ad3      	subs	r3, r2, r3
 800b88e:	f1a3 0208 	sub.w	r2, r3, #8
 800b892:	8bbb      	ldrh	r3, [r7, #28]
 800b894:	3314      	adds	r3, #20
 800b896:	429a      	cmp	r2, r3
 800b898:	d333      	bcc.n	800b902 <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800b89a:	8bfa      	ldrh	r2, [r7, #30]
 800b89c:	8bbb      	ldrh	r3, [r7, #28]
 800b89e:	4413      	add	r3, r2
 800b8a0:	b29b      	uxth	r3, r3
 800b8a2:	3308      	adds	r3, #8
 800b8a4:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800b8a6:	8a7b      	ldrh	r3, [r7, #18]
 800b8a8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b8ac:	d106      	bne.n	800b8bc <mem_malloc+0xb0>
 800b8ae:	4b4c      	ldr	r3, [pc, #304]	; (800b9e0 <mem_malloc+0x1d4>)
 800b8b0:	f240 3287 	movw	r2, #903	; 0x387
 800b8b4:	494b      	ldr	r1, [pc, #300]	; (800b9e4 <mem_malloc+0x1d8>)
 800b8b6:	484c      	ldr	r0, [pc, #304]	; (800b9e8 <mem_malloc+0x1dc>)
 800b8b8:	f00b ffda 	bl	8017870 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800b8bc:	8a7b      	ldrh	r3, [r7, #18]
 800b8be:	4618      	mov	r0, r3
 800b8c0:	f7ff fd00 	bl	800b2c4 <ptr_to_mem>
 800b8c4:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	2200      	movs	r2, #0
 800b8ca:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800b8cc:	697b      	ldr	r3, [r7, #20]
 800b8ce:	881a      	ldrh	r2, [r3, #0]
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	8bfa      	ldrh	r2, [r7, #30]
 800b8d8:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800b8da:	697b      	ldr	r3, [r7, #20]
 800b8dc:	8a7a      	ldrh	r2, [r7, #18]
 800b8de:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800b8e0:	697b      	ldr	r3, [r7, #20]
 800b8e2:	2201      	movs	r2, #1
 800b8e4:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	881b      	ldrh	r3, [r3, #0]
 800b8ea:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b8ee:	d00b      	beq.n	800b908 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	881b      	ldrh	r3, [r3, #0]
 800b8f4:	4618      	mov	r0, r3
 800b8f6:	f7ff fce5 	bl	800b2c4 <ptr_to_mem>
 800b8fa:	4602      	mov	r2, r0
 800b8fc:	8a7b      	ldrh	r3, [r7, #18]
 800b8fe:	8053      	strh	r3, [r2, #2]
 800b900:	e002      	b.n	800b908 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800b902:	697b      	ldr	r3, [r7, #20]
 800b904:	2201      	movs	r2, #1
 800b906:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800b908:	4b34      	ldr	r3, [pc, #208]	; (800b9dc <mem_malloc+0x1d0>)
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	697a      	ldr	r2, [r7, #20]
 800b90e:	429a      	cmp	r2, r3
 800b910:	d127      	bne.n	800b962 <mem_malloc+0x156>
          struct mem *cur = lfree;
 800b912:	4b32      	ldr	r3, [pc, #200]	; (800b9dc <mem_malloc+0x1d0>)
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800b918:	e005      	b.n	800b926 <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800b91a:	69bb      	ldr	r3, [r7, #24]
 800b91c:	881b      	ldrh	r3, [r3, #0]
 800b91e:	4618      	mov	r0, r3
 800b920:	f7ff fcd0 	bl	800b2c4 <ptr_to_mem>
 800b924:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800b926:	69bb      	ldr	r3, [r7, #24]
 800b928:	791b      	ldrb	r3, [r3, #4]
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	d004      	beq.n	800b938 <mem_malloc+0x12c>
 800b92e:	4b2f      	ldr	r3, [pc, #188]	; (800b9ec <mem_malloc+0x1e0>)
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	69ba      	ldr	r2, [r7, #24]
 800b934:	429a      	cmp	r2, r3
 800b936:	d1f0      	bne.n	800b91a <mem_malloc+0x10e>
          }
          lfree = cur;
 800b938:	4a28      	ldr	r2, [pc, #160]	; (800b9dc <mem_malloc+0x1d0>)
 800b93a:	69bb      	ldr	r3, [r7, #24]
 800b93c:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800b93e:	4b27      	ldr	r3, [pc, #156]	; (800b9dc <mem_malloc+0x1d0>)
 800b940:	681a      	ldr	r2, [r3, #0]
 800b942:	4b2a      	ldr	r3, [pc, #168]	; (800b9ec <mem_malloc+0x1e0>)
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	429a      	cmp	r2, r3
 800b948:	d00b      	beq.n	800b962 <mem_malloc+0x156>
 800b94a:	4b24      	ldr	r3, [pc, #144]	; (800b9dc <mem_malloc+0x1d0>)
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	791b      	ldrb	r3, [r3, #4]
 800b950:	2b00      	cmp	r3, #0
 800b952:	d006      	beq.n	800b962 <mem_malloc+0x156>
 800b954:	4b22      	ldr	r3, [pc, #136]	; (800b9e0 <mem_malloc+0x1d4>)
 800b956:	f240 32b5 	movw	r2, #949	; 0x3b5
 800b95a:	4925      	ldr	r1, [pc, #148]	; (800b9f0 <mem_malloc+0x1e4>)
 800b95c:	4822      	ldr	r0, [pc, #136]	; (800b9e8 <mem_malloc+0x1dc>)
 800b95e:	f00b ff87 	bl	8017870 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800b962:	8bba      	ldrh	r2, [r7, #28]
 800b964:	697b      	ldr	r3, [r7, #20]
 800b966:	4413      	add	r3, r2
 800b968:	3308      	adds	r3, #8
 800b96a:	4a20      	ldr	r2, [pc, #128]	; (800b9ec <mem_malloc+0x1e0>)
 800b96c:	6812      	ldr	r2, [r2, #0]
 800b96e:	4293      	cmp	r3, r2
 800b970:	d906      	bls.n	800b980 <mem_malloc+0x174>
 800b972:	4b1b      	ldr	r3, [pc, #108]	; (800b9e0 <mem_malloc+0x1d4>)
 800b974:	f240 32b9 	movw	r2, #953	; 0x3b9
 800b978:	491e      	ldr	r1, [pc, #120]	; (800b9f4 <mem_malloc+0x1e8>)
 800b97a:	481b      	ldr	r0, [pc, #108]	; (800b9e8 <mem_malloc+0x1dc>)
 800b97c:	f00b ff78 	bl	8017870 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800b980:	697b      	ldr	r3, [r7, #20]
 800b982:	f003 0303 	and.w	r3, r3, #3
 800b986:	2b00      	cmp	r3, #0
 800b988:	d006      	beq.n	800b998 <mem_malloc+0x18c>
 800b98a:	4b15      	ldr	r3, [pc, #84]	; (800b9e0 <mem_malloc+0x1d4>)
 800b98c:	f240 32bb 	movw	r2, #955	; 0x3bb
 800b990:	4919      	ldr	r1, [pc, #100]	; (800b9f8 <mem_malloc+0x1ec>)
 800b992:	4815      	ldr	r0, [pc, #84]	; (800b9e8 <mem_malloc+0x1dc>)
 800b994:	f00b ff6c 	bl	8017870 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800b998:	697b      	ldr	r3, [r7, #20]
 800b99a:	f003 0303 	and.w	r3, r3, #3
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	d006      	beq.n	800b9b0 <mem_malloc+0x1a4>
 800b9a2:	4b0f      	ldr	r3, [pc, #60]	; (800b9e0 <mem_malloc+0x1d4>)
 800b9a4:	f240 32bd 	movw	r2, #957	; 0x3bd
 800b9a8:	4914      	ldr	r1, [pc, #80]	; (800b9fc <mem_malloc+0x1f0>)
 800b9aa:	480f      	ldr	r0, [pc, #60]	; (800b9e8 <mem_malloc+0x1dc>)
 800b9ac:	f00b ff60 	bl	8017870 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800b9b0:	697b      	ldr	r3, [r7, #20]
 800b9b2:	3308      	adds	r3, #8
 800b9b4:	e00e      	b.n	800b9d4 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 800b9b6:	8bfb      	ldrh	r3, [r7, #30]
 800b9b8:	4618      	mov	r0, r3
 800b9ba:	f7ff fc83 	bl	800b2c4 <ptr_to_mem>
 800b9be:	4603      	mov	r3, r0
 800b9c0:	881b      	ldrh	r3, [r3, #0]
 800b9c2:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800b9c4:	8bfa      	ldrh	r2, [r7, #30]
 800b9c6:	8bbb      	ldrh	r3, [r7, #28]
 800b9c8:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800b9cc:	429a      	cmp	r2, r3
 800b9ce:	f4ff af44 	bcc.w	800b85a <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800b9d2:	2300      	movs	r3, #0
}
 800b9d4:	4618      	mov	r0, r3
 800b9d6:	3720      	adds	r7, #32
 800b9d8:	46bd      	mov	sp, r7
 800b9da:	bd80      	pop	{r7, pc}
 800b9dc:	2000042c 	.word	0x2000042c
 800b9e0:	0801cc94 	.word	0x0801cc94
 800b9e4:	0801ce3c 	.word	0x0801ce3c
 800b9e8:	0801ccdc 	.word	0x0801ccdc
 800b9ec:	20000428 	.word	0x20000428
 800b9f0:	0801ce50 	.word	0x0801ce50
 800b9f4:	0801ce6c 	.word	0x0801ce6c
 800b9f8:	0801ce9c 	.word	0x0801ce9c
 800b9fc:	0801cecc 	.word	0x0801cecc

0800ba00 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800ba00:	b480      	push	{r7}
 800ba02:	b085      	sub	sp, #20
 800ba04:	af00      	add	r7, sp, #0
 800ba06:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	689b      	ldr	r3, [r3, #8]
 800ba0c:	2200      	movs	r2, #0
 800ba0e:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	685b      	ldr	r3, [r3, #4]
 800ba14:	3303      	adds	r3, #3
 800ba16:	f023 0303 	bic.w	r3, r3, #3
 800ba1a:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800ba1c:	2300      	movs	r3, #0
 800ba1e:	60fb      	str	r3, [r7, #12]
 800ba20:	e011      	b.n	800ba46 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	689b      	ldr	r3, [r3, #8]
 800ba26:	681a      	ldr	r2, [r3, #0]
 800ba28:	68bb      	ldr	r3, [r7, #8]
 800ba2a:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	689b      	ldr	r3, [r3, #8]
 800ba30:	68ba      	ldr	r2, [r7, #8]
 800ba32:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	881b      	ldrh	r3, [r3, #0]
 800ba38:	461a      	mov	r2, r3
 800ba3a:	68bb      	ldr	r3, [r7, #8]
 800ba3c:	4413      	add	r3, r2
 800ba3e:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	3301      	adds	r3, #1
 800ba44:	60fb      	str	r3, [r7, #12]
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	885b      	ldrh	r3, [r3, #2]
 800ba4a:	461a      	mov	r2, r3
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	4293      	cmp	r3, r2
 800ba50:	dbe7      	blt.n	800ba22 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800ba52:	bf00      	nop
 800ba54:	bf00      	nop
 800ba56:	3714      	adds	r7, #20
 800ba58:	46bd      	mov	sp, r7
 800ba5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba5e:	4770      	bx	lr

0800ba60 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800ba60:	b580      	push	{r7, lr}
 800ba62:	b082      	sub	sp, #8
 800ba64:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800ba66:	2300      	movs	r3, #0
 800ba68:	80fb      	strh	r3, [r7, #6]
 800ba6a:	e009      	b.n	800ba80 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800ba6c:	88fb      	ldrh	r3, [r7, #6]
 800ba6e:	4a08      	ldr	r2, [pc, #32]	; (800ba90 <memp_init+0x30>)
 800ba70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ba74:	4618      	mov	r0, r3
 800ba76:	f7ff ffc3 	bl	800ba00 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800ba7a:	88fb      	ldrh	r3, [r7, #6]
 800ba7c:	3301      	adds	r3, #1
 800ba7e:	80fb      	strh	r3, [r7, #6]
 800ba80:	88fb      	ldrh	r3, [r7, #6]
 800ba82:	2b08      	cmp	r3, #8
 800ba84:	d9f2      	bls.n	800ba6c <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800ba86:	bf00      	nop
 800ba88:	bf00      	nop
 800ba8a:	3708      	adds	r7, #8
 800ba8c:	46bd      	mov	sp, r7
 800ba8e:	bd80      	pop	{r7, pc}
 800ba90:	0801fa54 	.word	0x0801fa54

0800ba94 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800ba94:	b580      	push	{r7, lr}
 800ba96:	b084      	sub	sp, #16
 800ba98:	af00      	add	r7, sp, #0
 800ba9a:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	689b      	ldr	r3, [r3, #8]
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d012      	beq.n	800bad0 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	689b      	ldr	r3, [r3, #8]
 800baae:	68fa      	ldr	r2, [r7, #12]
 800bab0:	6812      	ldr	r2, [r2, #0]
 800bab2:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800bab4:	68fb      	ldr	r3, [r7, #12]
 800bab6:	f003 0303 	and.w	r3, r3, #3
 800baba:	2b00      	cmp	r3, #0
 800babc:	d006      	beq.n	800bacc <do_memp_malloc_pool+0x38>
 800babe:	4b07      	ldr	r3, [pc, #28]	; (800badc <do_memp_malloc_pool+0x48>)
 800bac0:	f44f 728c 	mov.w	r2, #280	; 0x118
 800bac4:	4906      	ldr	r1, [pc, #24]	; (800bae0 <do_memp_malloc_pool+0x4c>)
 800bac6:	4807      	ldr	r0, [pc, #28]	; (800bae4 <do_memp_malloc_pool+0x50>)
 800bac8:	f00b fed2 	bl	8017870 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	e000      	b.n	800bad2 <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800bad0:	2300      	movs	r3, #0
}
 800bad2:	4618      	mov	r0, r3
 800bad4:	3710      	adds	r7, #16
 800bad6:	46bd      	mov	sp, r7
 800bad8:	bd80      	pop	{r7, pc}
 800bada:	bf00      	nop
 800badc:	0801cef0 	.word	0x0801cef0
 800bae0:	0801cf20 	.word	0x0801cf20
 800bae4:	0801cf44 	.word	0x0801cf44

0800bae8 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800bae8:	b580      	push	{r7, lr}
 800baea:	b084      	sub	sp, #16
 800baec:	af00      	add	r7, sp, #0
 800baee:	4603      	mov	r3, r0
 800baf0:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800baf2:	79fb      	ldrb	r3, [r7, #7]
 800baf4:	2b08      	cmp	r3, #8
 800baf6:	d908      	bls.n	800bb0a <memp_malloc+0x22>
 800baf8:	4b0a      	ldr	r3, [pc, #40]	; (800bb24 <memp_malloc+0x3c>)
 800bafa:	f240 1257 	movw	r2, #343	; 0x157
 800bafe:	490a      	ldr	r1, [pc, #40]	; (800bb28 <memp_malloc+0x40>)
 800bb00:	480a      	ldr	r0, [pc, #40]	; (800bb2c <memp_malloc+0x44>)
 800bb02:	f00b feb5 	bl	8017870 <iprintf>
 800bb06:	2300      	movs	r3, #0
 800bb08:	e008      	b.n	800bb1c <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800bb0a:	79fb      	ldrb	r3, [r7, #7]
 800bb0c:	4a08      	ldr	r2, [pc, #32]	; (800bb30 <memp_malloc+0x48>)
 800bb0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bb12:	4618      	mov	r0, r3
 800bb14:	f7ff ffbe 	bl	800ba94 <do_memp_malloc_pool>
 800bb18:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800bb1a:	68fb      	ldr	r3, [r7, #12]
}
 800bb1c:	4618      	mov	r0, r3
 800bb1e:	3710      	adds	r7, #16
 800bb20:	46bd      	mov	sp, r7
 800bb22:	bd80      	pop	{r7, pc}
 800bb24:	0801cef0 	.word	0x0801cef0
 800bb28:	0801cf80 	.word	0x0801cf80
 800bb2c:	0801cf44 	.word	0x0801cf44
 800bb30:	0801fa54 	.word	0x0801fa54

0800bb34 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800bb34:	b580      	push	{r7, lr}
 800bb36:	b084      	sub	sp, #16
 800bb38:	af00      	add	r7, sp, #0
 800bb3a:	6078      	str	r0, [r7, #4]
 800bb3c:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800bb3e:	683b      	ldr	r3, [r7, #0]
 800bb40:	f003 0303 	and.w	r3, r3, #3
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	d006      	beq.n	800bb56 <do_memp_free_pool+0x22>
 800bb48:	4b0a      	ldr	r3, [pc, #40]	; (800bb74 <do_memp_free_pool+0x40>)
 800bb4a:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800bb4e:	490a      	ldr	r1, [pc, #40]	; (800bb78 <do_memp_free_pool+0x44>)
 800bb50:	480a      	ldr	r0, [pc, #40]	; (800bb7c <do_memp_free_pool+0x48>)
 800bb52:	f00b fe8d 	bl	8017870 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800bb56:	683b      	ldr	r3, [r7, #0]
 800bb58:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	689b      	ldr	r3, [r3, #8]
 800bb5e:	681a      	ldr	r2, [r3, #0]
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	689b      	ldr	r3, [r3, #8]
 800bb68:	68fa      	ldr	r2, [r7, #12]
 800bb6a:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 800bb6c:	bf00      	nop
 800bb6e:	3710      	adds	r7, #16
 800bb70:	46bd      	mov	sp, r7
 800bb72:	bd80      	pop	{r7, pc}
 800bb74:	0801cef0 	.word	0x0801cef0
 800bb78:	0801cfa0 	.word	0x0801cfa0
 800bb7c:	0801cf44 	.word	0x0801cf44

0800bb80 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800bb80:	b580      	push	{r7, lr}
 800bb82:	b082      	sub	sp, #8
 800bb84:	af00      	add	r7, sp, #0
 800bb86:	4603      	mov	r3, r0
 800bb88:	6039      	str	r1, [r7, #0]
 800bb8a:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800bb8c:	79fb      	ldrb	r3, [r7, #7]
 800bb8e:	2b08      	cmp	r3, #8
 800bb90:	d907      	bls.n	800bba2 <memp_free+0x22>
 800bb92:	4b0c      	ldr	r3, [pc, #48]	; (800bbc4 <memp_free+0x44>)
 800bb94:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800bb98:	490b      	ldr	r1, [pc, #44]	; (800bbc8 <memp_free+0x48>)
 800bb9a:	480c      	ldr	r0, [pc, #48]	; (800bbcc <memp_free+0x4c>)
 800bb9c:	f00b fe68 	bl	8017870 <iprintf>
 800bba0:	e00c      	b.n	800bbbc <memp_free+0x3c>

  if (mem == NULL) {
 800bba2:	683b      	ldr	r3, [r7, #0]
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	d008      	beq.n	800bbba <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800bba8:	79fb      	ldrb	r3, [r7, #7]
 800bbaa:	4a09      	ldr	r2, [pc, #36]	; (800bbd0 <memp_free+0x50>)
 800bbac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bbb0:	6839      	ldr	r1, [r7, #0]
 800bbb2:	4618      	mov	r0, r3
 800bbb4:	f7ff ffbe 	bl	800bb34 <do_memp_free_pool>
 800bbb8:	e000      	b.n	800bbbc <memp_free+0x3c>
    return;
 800bbba:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800bbbc:	3708      	adds	r7, #8
 800bbbe:	46bd      	mov	sp, r7
 800bbc0:	bd80      	pop	{r7, pc}
 800bbc2:	bf00      	nop
 800bbc4:	0801cef0 	.word	0x0801cef0
 800bbc8:	0801cfc0 	.word	0x0801cfc0
 800bbcc:	0801cf44 	.word	0x0801cf44
 800bbd0:	0801fa54 	.word	0x0801fa54

0800bbd4 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800bbd4:	b480      	push	{r7}
 800bbd6:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800bbd8:	bf00      	nop
 800bbda:	46bd      	mov	sp, r7
 800bbdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbe0:	4770      	bx	lr
	...

0800bbe4 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800bbe4:	b580      	push	{r7, lr}
 800bbe6:	b086      	sub	sp, #24
 800bbe8:	af00      	add	r7, sp, #0
 800bbea:	60f8      	str	r0, [r7, #12]
 800bbec:	60b9      	str	r1, [r7, #8]
 800bbee:	607a      	str	r2, [r7, #4]
 800bbf0:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	d108      	bne.n	800bc0a <netif_add+0x26>
 800bbf8:	4b5b      	ldr	r3, [pc, #364]	; (800bd68 <netif_add+0x184>)
 800bbfa:	f240 1227 	movw	r2, #295	; 0x127
 800bbfe:	495b      	ldr	r1, [pc, #364]	; (800bd6c <netif_add+0x188>)
 800bc00:	485b      	ldr	r0, [pc, #364]	; (800bd70 <netif_add+0x18c>)
 800bc02:	f00b fe35 	bl	8017870 <iprintf>
 800bc06:	2300      	movs	r3, #0
 800bc08:	e0a9      	b.n	800bd5e <netif_add+0x17a>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800bc0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	d108      	bne.n	800bc22 <netif_add+0x3e>
 800bc10:	4b55      	ldr	r3, [pc, #340]	; (800bd68 <netif_add+0x184>)
 800bc12:	f44f 7294 	mov.w	r2, #296	; 0x128
 800bc16:	4957      	ldr	r1, [pc, #348]	; (800bd74 <netif_add+0x190>)
 800bc18:	4855      	ldr	r0, [pc, #340]	; (800bd70 <netif_add+0x18c>)
 800bc1a:	f00b fe29 	bl	8017870 <iprintf>
 800bc1e:	2300      	movs	r3, #0
 800bc20:	e09d      	b.n	800bd5e <netif_add+0x17a>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800bc22:	68bb      	ldr	r3, [r7, #8]
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d101      	bne.n	800bc2c <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800bc28:	4b53      	ldr	r3, [pc, #332]	; (800bd78 <netif_add+0x194>)
 800bc2a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d101      	bne.n	800bc36 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800bc32:	4b51      	ldr	r3, [pc, #324]	; (800bd78 <netif_add+0x194>)
 800bc34:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800bc36:	683b      	ldr	r3, [r7, #0]
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d101      	bne.n	800bc40 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800bc3c:	4b4e      	ldr	r3, [pc, #312]	; (800bd78 <netif_add+0x194>)
 800bc3e:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	2200      	movs	r2, #0
 800bc44:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	2200      	movs	r2, #0
 800bc4a:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	2200      	movs	r2, #0
 800bc50:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800bc52:	68fb      	ldr	r3, [r7, #12]
 800bc54:	4a49      	ldr	r2, [pc, #292]	; (800bd7c <netif_add+0x198>)
 800bc56:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	2200      	movs	r2, #0
 800bc5c:	851a      	strh	r2, [r3, #40]	; 0x28
  netif->flags = 0;
 800bc5e:	68fb      	ldr	r3, [r7, #12]
 800bc60:	2200      	movs	r2, #0
 800bc62:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	3324      	adds	r3, #36	; 0x24
 800bc6a:	2204      	movs	r2, #4
 800bc6c:	2100      	movs	r1, #0
 800bc6e:	4618      	mov	r0, r3
 800bc70:	f00b f8e2 	bl	8016e38 <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800bc74:	68fb      	ldr	r3, [r7, #12]
 800bc76:	2200      	movs	r2, #0
 800bc78:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800bc7a:	68fb      	ldr	r3, [r7, #12]
 800bc7c:	6a3a      	ldr	r2, [r7, #32]
 800bc7e:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800bc80:	4b3f      	ldr	r3, [pc, #252]	; (800bd80 <netif_add+0x19c>)
 800bc82:	781a      	ldrb	r2, [r3, #0]
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  netif->input = input;
 800bc8a:	68fb      	ldr	r3, [r7, #12]
 800bc8c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bc8e:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800bc90:	683b      	ldr	r3, [r7, #0]
 800bc92:	687a      	ldr	r2, [r7, #4]
 800bc94:	68b9      	ldr	r1, [r7, #8]
 800bc96:	68f8      	ldr	r0, [r7, #12]
 800bc98:	f000 f914 	bl	800bec4 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800bc9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc9e:	68f8      	ldr	r0, [r7, #12]
 800bca0:	4798      	blx	r3
 800bca2:	4603      	mov	r3, r0
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	d001      	beq.n	800bcac <netif_add+0xc8>
    return NULL;
 800bca8:	2300      	movs	r3, #0
 800bcaa:	e058      	b.n	800bd5e <netif_add+0x17a>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800bcb2:	2bff      	cmp	r3, #255	; 0xff
 800bcb4:	d103      	bne.n	800bcbe <netif_add+0xda>
        netif->num = 0;
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	2200      	movs	r2, #0
 800bcba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }
      num_netifs = 0;
 800bcbe:	2300      	movs	r3, #0
 800bcc0:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800bcc2:	4b30      	ldr	r3, [pc, #192]	; (800bd84 <netif_add+0x1a0>)
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	617b      	str	r3, [r7, #20]
 800bcc8:	e02b      	b.n	800bd22 <netif_add+0x13e>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800bcca:	697a      	ldr	r2, [r7, #20]
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	429a      	cmp	r2, r3
 800bcd0:	d106      	bne.n	800bce0 <netif_add+0xfc>
 800bcd2:	4b25      	ldr	r3, [pc, #148]	; (800bd68 <netif_add+0x184>)
 800bcd4:	f240 128b 	movw	r2, #395	; 0x18b
 800bcd8:	492b      	ldr	r1, [pc, #172]	; (800bd88 <netif_add+0x1a4>)
 800bcda:	4825      	ldr	r0, [pc, #148]	; (800bd70 <netif_add+0x18c>)
 800bcdc:	f00b fdc8 	bl	8017870 <iprintf>
        num_netifs++;
 800bce0:	693b      	ldr	r3, [r7, #16]
 800bce2:	3301      	adds	r3, #1
 800bce4:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800bce6:	693b      	ldr	r3, [r7, #16]
 800bce8:	2bff      	cmp	r3, #255	; 0xff
 800bcea:	dd06      	ble.n	800bcfa <netif_add+0x116>
 800bcec:	4b1e      	ldr	r3, [pc, #120]	; (800bd68 <netif_add+0x184>)
 800bcee:	f240 128d 	movw	r2, #397	; 0x18d
 800bcf2:	4926      	ldr	r1, [pc, #152]	; (800bd8c <netif_add+0x1a8>)
 800bcf4:	481e      	ldr	r0, [pc, #120]	; (800bd70 <netif_add+0x18c>)
 800bcf6:	f00b fdbb 	bl	8017870 <iprintf>
        if (netif2->num == netif->num) {
 800bcfa:	697b      	ldr	r3, [r7, #20]
 800bcfc:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800bd06:	429a      	cmp	r2, r3
 800bd08:	d108      	bne.n	800bd1c <netif_add+0x138>
          netif->num++;
 800bd0a:	68fb      	ldr	r3, [r7, #12]
 800bd0c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800bd10:	3301      	adds	r3, #1
 800bd12:	b2da      	uxtb	r2, r3
 800bd14:	68fb      	ldr	r3, [r7, #12]
 800bd16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          break;
 800bd1a:	e005      	b.n	800bd28 <netif_add+0x144>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800bd1c:	697b      	ldr	r3, [r7, #20]
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	617b      	str	r3, [r7, #20]
 800bd22:	697b      	ldr	r3, [r7, #20]
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d1d0      	bne.n	800bcca <netif_add+0xe6>
        }
      }
    } while (netif2 != NULL);
 800bd28:	697b      	ldr	r3, [r7, #20]
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	d1be      	bne.n	800bcac <netif_add+0xc8>
  }
  if (netif->num == 254) {
 800bd2e:	68fb      	ldr	r3, [r7, #12]
 800bd30:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800bd34:	2bfe      	cmp	r3, #254	; 0xfe
 800bd36:	d103      	bne.n	800bd40 <netif_add+0x15c>
    netif_num = 0;
 800bd38:	4b11      	ldr	r3, [pc, #68]	; (800bd80 <netif_add+0x19c>)
 800bd3a:	2200      	movs	r2, #0
 800bd3c:	701a      	strb	r2, [r3, #0]
 800bd3e:	e006      	b.n	800bd4e <netif_add+0x16a>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800bd46:	3301      	adds	r3, #1
 800bd48:	b2da      	uxtb	r2, r3
 800bd4a:	4b0d      	ldr	r3, [pc, #52]	; (800bd80 <netif_add+0x19c>)
 800bd4c:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800bd4e:	4b0d      	ldr	r3, [pc, #52]	; (800bd84 <netif_add+0x1a0>)
 800bd50:	681a      	ldr	r2, [r3, #0]
 800bd52:	68fb      	ldr	r3, [r7, #12]
 800bd54:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800bd56:	4a0b      	ldr	r2, [pc, #44]	; (800bd84 <netif_add+0x1a0>)
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800bd5c:	68fb      	ldr	r3, [r7, #12]
}
 800bd5e:	4618      	mov	r0, r3
 800bd60:	3718      	adds	r7, #24
 800bd62:	46bd      	mov	sp, r7
 800bd64:	bd80      	pop	{r7, pc}
 800bd66:	bf00      	nop
 800bd68:	0801cfdc 	.word	0x0801cfdc
 800bd6c:	0801d070 	.word	0x0801d070
 800bd70:	0801d02c 	.word	0x0801d02c
 800bd74:	0801d08c 	.word	0x0801d08c
 800bd78:	0801fac8 	.word	0x0801fac8
 800bd7c:	0800c0d7 	.word	0x0800c0d7
 800bd80:	20000454 	.word	0x20000454
 800bd84:	20006e2c 	.word	0x20006e2c
 800bd88:	0801d0b0 	.word	0x0801d0b0
 800bd8c:	0801d0c4 	.word	0x0801d0c4

0800bd90 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800bd90:	b580      	push	{r7, lr}
 800bd92:	b082      	sub	sp, #8
 800bd94:	af00      	add	r7, sp, #0
 800bd96:	6078      	str	r0, [r7, #4]
 800bd98:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800bd9a:	6839      	ldr	r1, [r7, #0]
 800bd9c:	6878      	ldr	r0, [r7, #4]
 800bd9e:	f002 facf 	bl	800e340 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800bda2:	6839      	ldr	r1, [r7, #0]
 800bda4:	6878      	ldr	r0, [r7, #4]
 800bda6:	f006 fe6d 	bl	8012a84 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800bdaa:	bf00      	nop
 800bdac:	3708      	adds	r7, #8
 800bdae:	46bd      	mov	sp, r7
 800bdb0:	bd80      	pop	{r7, pc}
	...

0800bdb4 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800bdb4:	b580      	push	{r7, lr}
 800bdb6:	b086      	sub	sp, #24
 800bdb8:	af00      	add	r7, sp, #0
 800bdba:	60f8      	str	r0, [r7, #12]
 800bdbc:	60b9      	str	r1, [r7, #8]
 800bdbe:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800bdc0:	68bb      	ldr	r3, [r7, #8]
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	d106      	bne.n	800bdd4 <netif_do_set_ipaddr+0x20>
 800bdc6:	4b1d      	ldr	r3, [pc, #116]	; (800be3c <netif_do_set_ipaddr+0x88>)
 800bdc8:	f240 12cb 	movw	r2, #459	; 0x1cb
 800bdcc:	491c      	ldr	r1, [pc, #112]	; (800be40 <netif_do_set_ipaddr+0x8c>)
 800bdce:	481d      	ldr	r0, [pc, #116]	; (800be44 <netif_do_set_ipaddr+0x90>)
 800bdd0:	f00b fd4e 	bl	8017870 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d106      	bne.n	800bde8 <netif_do_set_ipaddr+0x34>
 800bdda:	4b18      	ldr	r3, [pc, #96]	; (800be3c <netif_do_set_ipaddr+0x88>)
 800bddc:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800bde0:	4917      	ldr	r1, [pc, #92]	; (800be40 <netif_do_set_ipaddr+0x8c>)
 800bde2:	4818      	ldr	r0, [pc, #96]	; (800be44 <netif_do_set_ipaddr+0x90>)
 800bde4:	f00b fd44 	bl	8017870 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800bde8:	68bb      	ldr	r3, [r7, #8]
 800bdea:	681a      	ldr	r2, [r3, #0]
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	3304      	adds	r3, #4
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	429a      	cmp	r2, r3
 800bdf4:	d01c      	beq.n	800be30 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800bdf6:	68bb      	ldr	r3, [r7, #8]
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800bdfc:	68fb      	ldr	r3, [r7, #12]
 800bdfe:	3304      	adds	r3, #4
 800be00:	681a      	ldr	r2, [r3, #0]
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800be06:	f107 0314 	add.w	r3, r7, #20
 800be0a:	4619      	mov	r1, r3
 800be0c:	6878      	ldr	r0, [r7, #4]
 800be0e:	f7ff ffbf 	bl	800bd90 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800be12:	68bb      	ldr	r3, [r7, #8]
 800be14:	2b00      	cmp	r3, #0
 800be16:	d002      	beq.n	800be1e <netif_do_set_ipaddr+0x6a>
 800be18:	68bb      	ldr	r3, [r7, #8]
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	e000      	b.n	800be20 <netif_do_set_ipaddr+0x6c>
 800be1e:	2300      	movs	r3, #0
 800be20:	68fa      	ldr	r2, [r7, #12]
 800be22:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800be24:	2101      	movs	r1, #1
 800be26:	68f8      	ldr	r0, [r7, #12]
 800be28:	f000 f8d2 	bl	800bfd0 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800be2c:	2301      	movs	r3, #1
 800be2e:	e000      	b.n	800be32 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800be30:	2300      	movs	r3, #0
}
 800be32:	4618      	mov	r0, r3
 800be34:	3718      	adds	r7, #24
 800be36:	46bd      	mov	sp, r7
 800be38:	bd80      	pop	{r7, pc}
 800be3a:	bf00      	nop
 800be3c:	0801cfdc 	.word	0x0801cfdc
 800be40:	0801d0f4 	.word	0x0801d0f4
 800be44:	0801d02c 	.word	0x0801d02c

0800be48 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800be48:	b480      	push	{r7}
 800be4a:	b085      	sub	sp, #20
 800be4c:	af00      	add	r7, sp, #0
 800be4e:	60f8      	str	r0, [r7, #12]
 800be50:	60b9      	str	r1, [r7, #8]
 800be52:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800be54:	68bb      	ldr	r3, [r7, #8]
 800be56:	681a      	ldr	r2, [r3, #0]
 800be58:	68fb      	ldr	r3, [r7, #12]
 800be5a:	3308      	adds	r3, #8
 800be5c:	681b      	ldr	r3, [r3, #0]
 800be5e:	429a      	cmp	r2, r3
 800be60:	d00a      	beq.n	800be78 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800be62:	68bb      	ldr	r3, [r7, #8]
 800be64:	2b00      	cmp	r3, #0
 800be66:	d002      	beq.n	800be6e <netif_do_set_netmask+0x26>
 800be68:	68bb      	ldr	r3, [r7, #8]
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	e000      	b.n	800be70 <netif_do_set_netmask+0x28>
 800be6e:	2300      	movs	r3, #0
 800be70:	68fa      	ldr	r2, [r7, #12]
 800be72:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800be74:	2301      	movs	r3, #1
 800be76:	e000      	b.n	800be7a <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800be78:	2300      	movs	r3, #0
}
 800be7a:	4618      	mov	r0, r3
 800be7c:	3714      	adds	r7, #20
 800be7e:	46bd      	mov	sp, r7
 800be80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be84:	4770      	bx	lr

0800be86 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800be86:	b480      	push	{r7}
 800be88:	b085      	sub	sp, #20
 800be8a:	af00      	add	r7, sp, #0
 800be8c:	60f8      	str	r0, [r7, #12]
 800be8e:	60b9      	str	r1, [r7, #8]
 800be90:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800be92:	68bb      	ldr	r3, [r7, #8]
 800be94:	681a      	ldr	r2, [r3, #0]
 800be96:	68fb      	ldr	r3, [r7, #12]
 800be98:	330c      	adds	r3, #12
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	429a      	cmp	r2, r3
 800be9e:	d00a      	beq.n	800beb6 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800bea0:	68bb      	ldr	r3, [r7, #8]
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	d002      	beq.n	800beac <netif_do_set_gw+0x26>
 800bea6:	68bb      	ldr	r3, [r7, #8]
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	e000      	b.n	800beae <netif_do_set_gw+0x28>
 800beac:	2300      	movs	r3, #0
 800beae:	68fa      	ldr	r2, [r7, #12]
 800beb0:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800beb2:	2301      	movs	r3, #1
 800beb4:	e000      	b.n	800beb8 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800beb6:	2300      	movs	r3, #0
}
 800beb8:	4618      	mov	r0, r3
 800beba:	3714      	adds	r7, #20
 800bebc:	46bd      	mov	sp, r7
 800bebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bec2:	4770      	bx	lr

0800bec4 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800bec4:	b580      	push	{r7, lr}
 800bec6:	b088      	sub	sp, #32
 800bec8:	af00      	add	r7, sp, #0
 800beca:	60f8      	str	r0, [r7, #12]
 800becc:	60b9      	str	r1, [r7, #8]
 800bece:	607a      	str	r2, [r7, #4]
 800bed0:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800bed2:	2300      	movs	r3, #0
 800bed4:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800bed6:	2300      	movs	r3, #0
 800bed8:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800beda:	68bb      	ldr	r3, [r7, #8]
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d101      	bne.n	800bee4 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800bee0:	4b1c      	ldr	r3, [pc, #112]	; (800bf54 <netif_set_addr+0x90>)
 800bee2:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d101      	bne.n	800beee <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800beea:	4b1a      	ldr	r3, [pc, #104]	; (800bf54 <netif_set_addr+0x90>)
 800beec:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800beee:	683b      	ldr	r3, [r7, #0]
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	d101      	bne.n	800bef8 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800bef4:	4b17      	ldr	r3, [pc, #92]	; (800bf54 <netif_set_addr+0x90>)
 800bef6:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800bef8:	68bb      	ldr	r3, [r7, #8]
 800befa:	2b00      	cmp	r3, #0
 800befc:	d003      	beq.n	800bf06 <netif_set_addr+0x42>
 800befe:	68bb      	ldr	r3, [r7, #8]
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d101      	bne.n	800bf0a <netif_set_addr+0x46>
 800bf06:	2301      	movs	r3, #1
 800bf08:	e000      	b.n	800bf0c <netif_set_addr+0x48>
 800bf0a:	2300      	movs	r3, #0
 800bf0c:	617b      	str	r3, [r7, #20]
  if (remove) {
 800bf0e:	697b      	ldr	r3, [r7, #20]
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	d006      	beq.n	800bf22 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800bf14:	f107 0310 	add.w	r3, r7, #16
 800bf18:	461a      	mov	r2, r3
 800bf1a:	68b9      	ldr	r1, [r7, #8]
 800bf1c:	68f8      	ldr	r0, [r7, #12]
 800bf1e:	f7ff ff49 	bl	800bdb4 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800bf22:	69fa      	ldr	r2, [r7, #28]
 800bf24:	6879      	ldr	r1, [r7, #4]
 800bf26:	68f8      	ldr	r0, [r7, #12]
 800bf28:	f7ff ff8e 	bl	800be48 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800bf2c:	69ba      	ldr	r2, [r7, #24]
 800bf2e:	6839      	ldr	r1, [r7, #0]
 800bf30:	68f8      	ldr	r0, [r7, #12]
 800bf32:	f7ff ffa8 	bl	800be86 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800bf36:	697b      	ldr	r3, [r7, #20]
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	d106      	bne.n	800bf4a <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800bf3c:	f107 0310 	add.w	r3, r7, #16
 800bf40:	461a      	mov	r2, r3
 800bf42:	68b9      	ldr	r1, [r7, #8]
 800bf44:	68f8      	ldr	r0, [r7, #12]
 800bf46:	f7ff ff35 	bl	800bdb4 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800bf4a:	bf00      	nop
 800bf4c:	3720      	adds	r7, #32
 800bf4e:	46bd      	mov	sp, r7
 800bf50:	bd80      	pop	{r7, pc}
 800bf52:	bf00      	nop
 800bf54:	0801fac8 	.word	0x0801fac8

0800bf58 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800bf58:	b480      	push	{r7}
 800bf5a:	b083      	sub	sp, #12
 800bf5c:	af00      	add	r7, sp, #0
 800bf5e:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800bf60:	4a04      	ldr	r2, [pc, #16]	; (800bf74 <netif_set_default+0x1c>)
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800bf66:	bf00      	nop
 800bf68:	370c      	adds	r7, #12
 800bf6a:	46bd      	mov	sp, r7
 800bf6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf70:	4770      	bx	lr
 800bf72:	bf00      	nop
 800bf74:	20006e30 	.word	0x20006e30

0800bf78 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800bf78:	b580      	push	{r7, lr}
 800bf7a:	b082      	sub	sp, #8
 800bf7c:	af00      	add	r7, sp, #0
 800bf7e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	d107      	bne.n	800bf96 <netif_set_up+0x1e>
 800bf86:	4b0f      	ldr	r3, [pc, #60]	; (800bfc4 <netif_set_up+0x4c>)
 800bf88:	f44f 7254 	mov.w	r2, #848	; 0x350
 800bf8c:	490e      	ldr	r1, [pc, #56]	; (800bfc8 <netif_set_up+0x50>)
 800bf8e:	480f      	ldr	r0, [pc, #60]	; (800bfcc <netif_set_up+0x54>)
 800bf90:	f00b fc6e 	bl	8017870 <iprintf>
 800bf94:	e013      	b.n	800bfbe <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800bf9c:	f003 0301 	and.w	r3, r3, #1
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d10c      	bne.n	800bfbe <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800bfaa:	f043 0301 	orr.w	r3, r3, #1
 800bfae:	b2da      	uxtb	r2, r3
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800bfb6:	2103      	movs	r1, #3
 800bfb8:	6878      	ldr	r0, [r7, #4]
 800bfba:	f000 f809 	bl	800bfd0 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800bfbe:	3708      	adds	r7, #8
 800bfc0:	46bd      	mov	sp, r7
 800bfc2:	bd80      	pop	{r7, pc}
 800bfc4:	0801cfdc 	.word	0x0801cfdc
 800bfc8:	0801d164 	.word	0x0801d164
 800bfcc:	0801d02c 	.word	0x0801d02c

0800bfd0 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800bfd0:	b580      	push	{r7, lr}
 800bfd2:	b082      	sub	sp, #8
 800bfd4:	af00      	add	r7, sp, #0
 800bfd6:	6078      	str	r0, [r7, #4]
 800bfd8:	460b      	mov	r3, r1
 800bfda:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	d106      	bne.n	800bff0 <netif_issue_reports+0x20>
 800bfe2:	4b18      	ldr	r3, [pc, #96]	; (800c044 <netif_issue_reports+0x74>)
 800bfe4:	f240 326d 	movw	r2, #877	; 0x36d
 800bfe8:	4917      	ldr	r1, [pc, #92]	; (800c048 <netif_issue_reports+0x78>)
 800bfea:	4818      	ldr	r0, [pc, #96]	; (800c04c <netif_issue_reports+0x7c>)
 800bfec:	f00b fc40 	bl	8017870 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800bff6:	f003 0304 	and.w	r3, r3, #4
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	d01e      	beq.n	800c03c <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c004:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d017      	beq.n	800c03c <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800c00c:	78fb      	ldrb	r3, [r7, #3]
 800c00e:	f003 0301 	and.w	r3, r3, #1
 800c012:	2b00      	cmp	r3, #0
 800c014:	d013      	beq.n	800c03e <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	3304      	adds	r3, #4
 800c01a:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d00e      	beq.n	800c03e <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c026:	f003 0308 	and.w	r3, r3, #8
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	d007      	beq.n	800c03e <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	3304      	adds	r3, #4
 800c032:	4619      	mov	r1, r3
 800c034:	6878      	ldr	r0, [r7, #4]
 800c036:	f009 fae9 	bl	801560c <etharp_request>
 800c03a:	e000      	b.n	800c03e <netif_issue_reports+0x6e>
    return;
 800c03c:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800c03e:	3708      	adds	r7, #8
 800c040:	46bd      	mov	sp, r7
 800c042:	bd80      	pop	{r7, pc}
 800c044:	0801cfdc 	.word	0x0801cfdc
 800c048:	0801d180 	.word	0x0801d180
 800c04c:	0801d02c 	.word	0x0801d02c

0800c050 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800c050:	b580      	push	{r7, lr}
 800c052:	b082      	sub	sp, #8
 800c054:	af00      	add	r7, sp, #0
 800c056:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	d107      	bne.n	800c06e <netif_set_down+0x1e>
 800c05e:	4b12      	ldr	r3, [pc, #72]	; (800c0a8 <netif_set_down+0x58>)
 800c060:	f240 329b 	movw	r2, #923	; 0x39b
 800c064:	4911      	ldr	r1, [pc, #68]	; (800c0ac <netif_set_down+0x5c>)
 800c066:	4812      	ldr	r0, [pc, #72]	; (800c0b0 <netif_set_down+0x60>)
 800c068:	f00b fc02 	bl	8017870 <iprintf>
 800c06c:	e019      	b.n	800c0a2 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c074:	f003 0301 	and.w	r3, r3, #1
 800c078:	2b00      	cmp	r3, #0
 800c07a:	d012      	beq.n	800c0a2 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c082:	f023 0301 	bic.w	r3, r3, #1
 800c086:	b2da      	uxtb	r2, r3
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c094:	f003 0308 	and.w	r3, r3, #8
 800c098:	2b00      	cmp	r3, #0
 800c09a:	d002      	beq.n	800c0a2 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800c09c:	6878      	ldr	r0, [r7, #4]
 800c09e:	f008 fe6f 	bl	8014d80 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800c0a2:	3708      	adds	r7, #8
 800c0a4:	46bd      	mov	sp, r7
 800c0a6:	bd80      	pop	{r7, pc}
 800c0a8:	0801cfdc 	.word	0x0801cfdc
 800c0ac:	0801d1a4 	.word	0x0801d1a4
 800c0b0:	0801d02c 	.word	0x0801d02c

0800c0b4 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800c0b4:	b480      	push	{r7}
 800c0b6:	b083      	sub	sp, #12
 800c0b8:	af00      	add	r7, sp, #0
 800c0ba:	6078      	str	r0, [r7, #4]
 800c0bc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	d002      	beq.n	800c0ca <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	683a      	ldr	r2, [r7, #0]
 800c0c8:	61da      	str	r2, [r3, #28]
  }
}
 800c0ca:	bf00      	nop
 800c0cc:	370c      	adds	r7, #12
 800c0ce:	46bd      	mov	sp, r7
 800c0d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0d4:	4770      	bx	lr

0800c0d6 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800c0d6:	b480      	push	{r7}
 800c0d8:	b085      	sub	sp, #20
 800c0da:	af00      	add	r7, sp, #0
 800c0dc:	60f8      	str	r0, [r7, #12]
 800c0de:	60b9      	str	r1, [r7, #8]
 800c0e0:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800c0e2:	f06f 030b 	mvn.w	r3, #11
}
 800c0e6:	4618      	mov	r0, r3
 800c0e8:	3714      	adds	r7, #20
 800c0ea:	46bd      	mov	sp, r7
 800c0ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0f0:	4770      	bx	lr
	...

0800c0f4 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800c0f4:	b480      	push	{r7}
 800c0f6:	b085      	sub	sp, #20
 800c0f8:	af00      	add	r7, sp, #0
 800c0fa:	4603      	mov	r3, r0
 800c0fc:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800c0fe:	79fb      	ldrb	r3, [r7, #7]
 800c100:	2b00      	cmp	r3, #0
 800c102:	d013      	beq.n	800c12c <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800c104:	4b0d      	ldr	r3, [pc, #52]	; (800c13c <netif_get_by_index+0x48>)
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	60fb      	str	r3, [r7, #12]
 800c10a:	e00c      	b.n	800c126 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800c10c:	68fb      	ldr	r3, [r7, #12]
 800c10e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c112:	3301      	adds	r3, #1
 800c114:	b2db      	uxtb	r3, r3
 800c116:	79fa      	ldrb	r2, [r7, #7]
 800c118:	429a      	cmp	r2, r3
 800c11a:	d101      	bne.n	800c120 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800c11c:	68fb      	ldr	r3, [r7, #12]
 800c11e:	e006      	b.n	800c12e <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800c120:	68fb      	ldr	r3, [r7, #12]
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	60fb      	str	r3, [r7, #12]
 800c126:	68fb      	ldr	r3, [r7, #12]
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d1ef      	bne.n	800c10c <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800c12c:	2300      	movs	r3, #0
}
 800c12e:	4618      	mov	r0, r3
 800c130:	3714      	adds	r7, #20
 800c132:	46bd      	mov	sp, r7
 800c134:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c138:	4770      	bx	lr
 800c13a:	bf00      	nop
 800c13c:	20006e2c 	.word	0x20006e2c

0800c140 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800c140:	b480      	push	{r7}
 800c142:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 800c144:	4b03      	ldr	r3, [pc, #12]	; (800c154 <pbuf_pool_is_empty+0x14>)
 800c146:	2201      	movs	r2, #1
 800c148:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800c14a:	bf00      	nop
 800c14c:	46bd      	mov	sp, r7
 800c14e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c152:	4770      	bx	lr
 800c154:	20006e34 	.word	0x20006e34

0800c158 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800c158:	b480      	push	{r7}
 800c15a:	b085      	sub	sp, #20
 800c15c:	af00      	add	r7, sp, #0
 800c15e:	60f8      	str	r0, [r7, #12]
 800c160:	60b9      	str	r1, [r7, #8]
 800c162:	4611      	mov	r1, r2
 800c164:	461a      	mov	r2, r3
 800c166:	460b      	mov	r3, r1
 800c168:	80fb      	strh	r3, [r7, #6]
 800c16a:	4613      	mov	r3, r2
 800c16c:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	2200      	movs	r2, #0
 800c172:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	68ba      	ldr	r2, [r7, #8]
 800c178:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800c17a:	68fb      	ldr	r3, [r7, #12]
 800c17c:	88fa      	ldrh	r2, [r7, #6]
 800c17e:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	88ba      	ldrh	r2, [r7, #4]
 800c184:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800c186:	8b3b      	ldrh	r3, [r7, #24]
 800c188:	b2da      	uxtb	r2, r3
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800c18e:	68fb      	ldr	r3, [r7, #12]
 800c190:	7f3a      	ldrb	r2, [r7, #28]
 800c192:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800c194:	68fb      	ldr	r3, [r7, #12]
 800c196:	2201      	movs	r2, #1
 800c198:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800c19a:	68fb      	ldr	r3, [r7, #12]
 800c19c:	2200      	movs	r2, #0
 800c19e:	73da      	strb	r2, [r3, #15]
}
 800c1a0:	bf00      	nop
 800c1a2:	3714      	adds	r7, #20
 800c1a4:	46bd      	mov	sp, r7
 800c1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1aa:	4770      	bx	lr

0800c1ac <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800c1ac:	b580      	push	{r7, lr}
 800c1ae:	b08c      	sub	sp, #48	; 0x30
 800c1b0:	af02      	add	r7, sp, #8
 800c1b2:	4603      	mov	r3, r0
 800c1b4:	71fb      	strb	r3, [r7, #7]
 800c1b6:	460b      	mov	r3, r1
 800c1b8:	80bb      	strh	r3, [r7, #4]
 800c1ba:	4613      	mov	r3, r2
 800c1bc:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800c1be:	79fb      	ldrb	r3, [r7, #7]
 800c1c0:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800c1c2:	887b      	ldrh	r3, [r7, #2]
 800c1c4:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800c1c8:	d07f      	beq.n	800c2ca <pbuf_alloc+0x11e>
 800c1ca:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800c1ce:	f300 80c8 	bgt.w	800c362 <pbuf_alloc+0x1b6>
 800c1d2:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800c1d6:	d010      	beq.n	800c1fa <pbuf_alloc+0x4e>
 800c1d8:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800c1dc:	f300 80c1 	bgt.w	800c362 <pbuf_alloc+0x1b6>
 800c1e0:	2b01      	cmp	r3, #1
 800c1e2:	d002      	beq.n	800c1ea <pbuf_alloc+0x3e>
 800c1e4:	2b41      	cmp	r3, #65	; 0x41
 800c1e6:	f040 80bc 	bne.w	800c362 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800c1ea:	887a      	ldrh	r2, [r7, #2]
 800c1ec:	88bb      	ldrh	r3, [r7, #4]
 800c1ee:	4619      	mov	r1, r3
 800c1f0:	2000      	movs	r0, #0
 800c1f2:	f000 f8d1 	bl	800c398 <pbuf_alloc_reference>
 800c1f6:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800c1f8:	e0bd      	b.n	800c376 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800c1fa:	2300      	movs	r3, #0
 800c1fc:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800c1fe:	2300      	movs	r3, #0
 800c200:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800c202:	88bb      	ldrh	r3, [r7, #4]
 800c204:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800c206:	2008      	movs	r0, #8
 800c208:	f7ff fc6e 	bl	800bae8 <memp_malloc>
 800c20c:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800c20e:	693b      	ldr	r3, [r7, #16]
 800c210:	2b00      	cmp	r3, #0
 800c212:	d109      	bne.n	800c228 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800c214:	f7ff ff94 	bl	800c140 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800c218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d002      	beq.n	800c224 <pbuf_alloc+0x78>
            pbuf_free(p);
 800c21e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c220:	f000 faa8 	bl	800c774 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800c224:	2300      	movs	r3, #0
 800c226:	e0a7      	b.n	800c378 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800c228:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c22a:	3303      	adds	r3, #3
 800c22c:	b29b      	uxth	r3, r3
 800c22e:	f023 0303 	bic.w	r3, r3, #3
 800c232:	b29b      	uxth	r3, r3
 800c234:	f5c3 7301 	rsb	r3, r3, #516	; 0x204
 800c238:	b29b      	uxth	r3, r3
 800c23a:	8b7a      	ldrh	r2, [r7, #26]
 800c23c:	4293      	cmp	r3, r2
 800c23e:	bf28      	it	cs
 800c240:	4613      	movcs	r3, r2
 800c242:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800c244:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c246:	3310      	adds	r3, #16
 800c248:	693a      	ldr	r2, [r7, #16]
 800c24a:	4413      	add	r3, r2
 800c24c:	3303      	adds	r3, #3
 800c24e:	f023 0303 	bic.w	r3, r3, #3
 800c252:	4618      	mov	r0, r3
 800c254:	89f9      	ldrh	r1, [r7, #14]
 800c256:	8b7a      	ldrh	r2, [r7, #26]
 800c258:	2300      	movs	r3, #0
 800c25a:	9301      	str	r3, [sp, #4]
 800c25c:	887b      	ldrh	r3, [r7, #2]
 800c25e:	9300      	str	r3, [sp, #0]
 800c260:	460b      	mov	r3, r1
 800c262:	4601      	mov	r1, r0
 800c264:	6938      	ldr	r0, [r7, #16]
 800c266:	f7ff ff77 	bl	800c158 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800c26a:	693b      	ldr	r3, [r7, #16]
 800c26c:	685b      	ldr	r3, [r3, #4]
 800c26e:	f003 0303 	and.w	r3, r3, #3
 800c272:	2b00      	cmp	r3, #0
 800c274:	d006      	beq.n	800c284 <pbuf_alloc+0xd8>
 800c276:	4b42      	ldr	r3, [pc, #264]	; (800c380 <pbuf_alloc+0x1d4>)
 800c278:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c27c:	4941      	ldr	r1, [pc, #260]	; (800c384 <pbuf_alloc+0x1d8>)
 800c27e:	4842      	ldr	r0, [pc, #264]	; (800c388 <pbuf_alloc+0x1dc>)
 800c280:	f00b faf6 	bl	8017870 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800c284:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c286:	3303      	adds	r3, #3
 800c288:	f023 0303 	bic.w	r3, r3, #3
 800c28c:	f5b3 7f01 	cmp.w	r3, #516	; 0x204
 800c290:	d106      	bne.n	800c2a0 <pbuf_alloc+0xf4>
 800c292:	4b3b      	ldr	r3, [pc, #236]	; (800c380 <pbuf_alloc+0x1d4>)
 800c294:	f44f 7281 	mov.w	r2, #258	; 0x102
 800c298:	493c      	ldr	r1, [pc, #240]	; (800c38c <pbuf_alloc+0x1e0>)
 800c29a:	483b      	ldr	r0, [pc, #236]	; (800c388 <pbuf_alloc+0x1dc>)
 800c29c:	f00b fae8 	bl	8017870 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800c2a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d102      	bne.n	800c2ac <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800c2a6:	693b      	ldr	r3, [r7, #16]
 800c2a8:	627b      	str	r3, [r7, #36]	; 0x24
 800c2aa:	e002      	b.n	800c2b2 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800c2ac:	69fb      	ldr	r3, [r7, #28]
 800c2ae:	693a      	ldr	r2, [r7, #16]
 800c2b0:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800c2b2:	693b      	ldr	r3, [r7, #16]
 800c2b4:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800c2b6:	8b7a      	ldrh	r2, [r7, #26]
 800c2b8:	89fb      	ldrh	r3, [r7, #14]
 800c2ba:	1ad3      	subs	r3, r2, r3
 800c2bc:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800c2be:	2300      	movs	r3, #0
 800c2c0:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800c2c2:	8b7b      	ldrh	r3, [r7, #26]
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	d19e      	bne.n	800c206 <pbuf_alloc+0x5a>
      break;
 800c2c8:	e055      	b.n	800c376 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800c2ca:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c2cc:	3303      	adds	r3, #3
 800c2ce:	b29b      	uxth	r3, r3
 800c2d0:	f023 0303 	bic.w	r3, r3, #3
 800c2d4:	b29a      	uxth	r2, r3
 800c2d6:	88bb      	ldrh	r3, [r7, #4]
 800c2d8:	3303      	adds	r3, #3
 800c2da:	b29b      	uxth	r3, r3
 800c2dc:	f023 0303 	bic.w	r3, r3, #3
 800c2e0:	b29b      	uxth	r3, r3
 800c2e2:	4413      	add	r3, r2
 800c2e4:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800c2e6:	8b3b      	ldrh	r3, [r7, #24]
 800c2e8:	3310      	adds	r3, #16
 800c2ea:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800c2ec:	8b3a      	ldrh	r2, [r7, #24]
 800c2ee:	88bb      	ldrh	r3, [r7, #4]
 800c2f0:	3303      	adds	r3, #3
 800c2f2:	f023 0303 	bic.w	r3, r3, #3
 800c2f6:	429a      	cmp	r2, r3
 800c2f8:	d306      	bcc.n	800c308 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800c2fa:	8afa      	ldrh	r2, [r7, #22]
 800c2fc:	88bb      	ldrh	r3, [r7, #4]
 800c2fe:	3303      	adds	r3, #3
 800c300:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800c304:	429a      	cmp	r2, r3
 800c306:	d201      	bcs.n	800c30c <pbuf_alloc+0x160>
        return NULL;
 800c308:	2300      	movs	r3, #0
 800c30a:	e035      	b.n	800c378 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800c30c:	8afb      	ldrh	r3, [r7, #22]
 800c30e:	4618      	mov	r0, r3
 800c310:	f7ff fa7c 	bl	800b80c <mem_malloc>
 800c314:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800c316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c318:	2b00      	cmp	r3, #0
 800c31a:	d101      	bne.n	800c320 <pbuf_alloc+0x174>
        return NULL;
 800c31c:	2300      	movs	r3, #0
 800c31e:	e02b      	b.n	800c378 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800c320:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c322:	3310      	adds	r3, #16
 800c324:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c326:	4413      	add	r3, r2
 800c328:	3303      	adds	r3, #3
 800c32a:	f023 0303 	bic.w	r3, r3, #3
 800c32e:	4618      	mov	r0, r3
 800c330:	88b9      	ldrh	r1, [r7, #4]
 800c332:	88ba      	ldrh	r2, [r7, #4]
 800c334:	2300      	movs	r3, #0
 800c336:	9301      	str	r3, [sp, #4]
 800c338:	887b      	ldrh	r3, [r7, #2]
 800c33a:	9300      	str	r3, [sp, #0]
 800c33c:	460b      	mov	r3, r1
 800c33e:	4601      	mov	r1, r0
 800c340:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c342:	f7ff ff09 	bl	800c158 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800c346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c348:	685b      	ldr	r3, [r3, #4]
 800c34a:	f003 0303 	and.w	r3, r3, #3
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d010      	beq.n	800c374 <pbuf_alloc+0x1c8>
 800c352:	4b0b      	ldr	r3, [pc, #44]	; (800c380 <pbuf_alloc+0x1d4>)
 800c354:	f44f 7291 	mov.w	r2, #290	; 0x122
 800c358:	490d      	ldr	r1, [pc, #52]	; (800c390 <pbuf_alloc+0x1e4>)
 800c35a:	480b      	ldr	r0, [pc, #44]	; (800c388 <pbuf_alloc+0x1dc>)
 800c35c:	f00b fa88 	bl	8017870 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800c360:	e008      	b.n	800c374 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800c362:	4b07      	ldr	r3, [pc, #28]	; (800c380 <pbuf_alloc+0x1d4>)
 800c364:	f240 1227 	movw	r2, #295	; 0x127
 800c368:	490a      	ldr	r1, [pc, #40]	; (800c394 <pbuf_alloc+0x1e8>)
 800c36a:	4807      	ldr	r0, [pc, #28]	; (800c388 <pbuf_alloc+0x1dc>)
 800c36c:	f00b fa80 	bl	8017870 <iprintf>
      return NULL;
 800c370:	2300      	movs	r3, #0
 800c372:	e001      	b.n	800c378 <pbuf_alloc+0x1cc>
      break;
 800c374:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800c376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c378:	4618      	mov	r0, r3
 800c37a:	3728      	adds	r7, #40	; 0x28
 800c37c:	46bd      	mov	sp, r7
 800c37e:	bd80      	pop	{r7, pc}
 800c380:	0801d20c 	.word	0x0801d20c
 800c384:	0801d23c 	.word	0x0801d23c
 800c388:	0801d26c 	.word	0x0801d26c
 800c38c:	0801d294 	.word	0x0801d294
 800c390:	0801d2c8 	.word	0x0801d2c8
 800c394:	0801d2f4 	.word	0x0801d2f4

0800c398 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800c398:	b580      	push	{r7, lr}
 800c39a:	b086      	sub	sp, #24
 800c39c:	af02      	add	r7, sp, #8
 800c39e:	6078      	str	r0, [r7, #4]
 800c3a0:	460b      	mov	r3, r1
 800c3a2:	807b      	strh	r3, [r7, #2]
 800c3a4:	4613      	mov	r3, r2
 800c3a6:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800c3a8:	883b      	ldrh	r3, [r7, #0]
 800c3aa:	2b41      	cmp	r3, #65	; 0x41
 800c3ac:	d009      	beq.n	800c3c2 <pbuf_alloc_reference+0x2a>
 800c3ae:	883b      	ldrh	r3, [r7, #0]
 800c3b0:	2b01      	cmp	r3, #1
 800c3b2:	d006      	beq.n	800c3c2 <pbuf_alloc_reference+0x2a>
 800c3b4:	4b0f      	ldr	r3, [pc, #60]	; (800c3f4 <pbuf_alloc_reference+0x5c>)
 800c3b6:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800c3ba:	490f      	ldr	r1, [pc, #60]	; (800c3f8 <pbuf_alloc_reference+0x60>)
 800c3bc:	480f      	ldr	r0, [pc, #60]	; (800c3fc <pbuf_alloc_reference+0x64>)
 800c3be:	f00b fa57 	bl	8017870 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800c3c2:	2007      	movs	r0, #7
 800c3c4:	f7ff fb90 	bl	800bae8 <memp_malloc>
 800c3c8:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800c3ca:	68fb      	ldr	r3, [r7, #12]
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d101      	bne.n	800c3d4 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800c3d0:	2300      	movs	r3, #0
 800c3d2:	e00b      	b.n	800c3ec <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800c3d4:	8879      	ldrh	r1, [r7, #2]
 800c3d6:	887a      	ldrh	r2, [r7, #2]
 800c3d8:	2300      	movs	r3, #0
 800c3da:	9301      	str	r3, [sp, #4]
 800c3dc:	883b      	ldrh	r3, [r7, #0]
 800c3de:	9300      	str	r3, [sp, #0]
 800c3e0:	460b      	mov	r3, r1
 800c3e2:	6879      	ldr	r1, [r7, #4]
 800c3e4:	68f8      	ldr	r0, [r7, #12]
 800c3e6:	f7ff feb7 	bl	800c158 <pbuf_init_alloced_pbuf>
  return p;
 800c3ea:	68fb      	ldr	r3, [r7, #12]
}
 800c3ec:	4618      	mov	r0, r3
 800c3ee:	3710      	adds	r7, #16
 800c3f0:	46bd      	mov	sp, r7
 800c3f2:	bd80      	pop	{r7, pc}
 800c3f4:	0801d20c 	.word	0x0801d20c
 800c3f8:	0801d310 	.word	0x0801d310
 800c3fc:	0801d26c 	.word	0x0801d26c

0800c400 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800c400:	b580      	push	{r7, lr}
 800c402:	b088      	sub	sp, #32
 800c404:	af02      	add	r7, sp, #8
 800c406:	607b      	str	r3, [r7, #4]
 800c408:	4603      	mov	r3, r0
 800c40a:	73fb      	strb	r3, [r7, #15]
 800c40c:	460b      	mov	r3, r1
 800c40e:	81bb      	strh	r3, [r7, #12]
 800c410:	4613      	mov	r3, r2
 800c412:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800c414:	7bfb      	ldrb	r3, [r7, #15]
 800c416:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800c418:	8a7b      	ldrh	r3, [r7, #18]
 800c41a:	3303      	adds	r3, #3
 800c41c:	f023 0203 	bic.w	r2, r3, #3
 800c420:	89bb      	ldrh	r3, [r7, #12]
 800c422:	441a      	add	r2, r3
 800c424:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c426:	429a      	cmp	r2, r3
 800c428:	d901      	bls.n	800c42e <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800c42a:	2300      	movs	r3, #0
 800c42c:	e018      	b.n	800c460 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800c42e:	6a3b      	ldr	r3, [r7, #32]
 800c430:	2b00      	cmp	r3, #0
 800c432:	d007      	beq.n	800c444 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800c434:	8a7b      	ldrh	r3, [r7, #18]
 800c436:	3303      	adds	r3, #3
 800c438:	f023 0303 	bic.w	r3, r3, #3
 800c43c:	6a3a      	ldr	r2, [r7, #32]
 800c43e:	4413      	add	r3, r2
 800c440:	617b      	str	r3, [r7, #20]
 800c442:	e001      	b.n	800c448 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800c444:	2300      	movs	r3, #0
 800c446:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800c448:	6878      	ldr	r0, [r7, #4]
 800c44a:	89b9      	ldrh	r1, [r7, #12]
 800c44c:	89ba      	ldrh	r2, [r7, #12]
 800c44e:	2302      	movs	r3, #2
 800c450:	9301      	str	r3, [sp, #4]
 800c452:	897b      	ldrh	r3, [r7, #10]
 800c454:	9300      	str	r3, [sp, #0]
 800c456:	460b      	mov	r3, r1
 800c458:	6979      	ldr	r1, [r7, #20]
 800c45a:	f7ff fe7d 	bl	800c158 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800c45e:	687b      	ldr	r3, [r7, #4]
}
 800c460:	4618      	mov	r0, r3
 800c462:	3718      	adds	r7, #24
 800c464:	46bd      	mov	sp, r7
 800c466:	bd80      	pop	{r7, pc}

0800c468 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800c468:	b580      	push	{r7, lr}
 800c46a:	b084      	sub	sp, #16
 800c46c:	af00      	add	r7, sp, #0
 800c46e:	6078      	str	r0, [r7, #4]
 800c470:	460b      	mov	r3, r1
 800c472:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	2b00      	cmp	r3, #0
 800c478:	d106      	bne.n	800c488 <pbuf_realloc+0x20>
 800c47a:	4b3a      	ldr	r3, [pc, #232]	; (800c564 <pbuf_realloc+0xfc>)
 800c47c:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800c480:	4939      	ldr	r1, [pc, #228]	; (800c568 <pbuf_realloc+0x100>)
 800c482:	483a      	ldr	r0, [pc, #232]	; (800c56c <pbuf_realloc+0x104>)
 800c484:	f00b f9f4 	bl	8017870 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	891b      	ldrh	r3, [r3, #8]
 800c48c:	887a      	ldrh	r2, [r7, #2]
 800c48e:	429a      	cmp	r2, r3
 800c490:	d263      	bcs.n	800c55a <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	891a      	ldrh	r2, [r3, #8]
 800c496:	887b      	ldrh	r3, [r7, #2]
 800c498:	1ad3      	subs	r3, r2, r3
 800c49a:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800c49c:	887b      	ldrh	r3, [r7, #2]
 800c49e:	817b      	strh	r3, [r7, #10]
  q = p;
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800c4a4:	e018      	b.n	800c4d8 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800c4a6:	68fb      	ldr	r3, [r7, #12]
 800c4a8:	895b      	ldrh	r3, [r3, #10]
 800c4aa:	897a      	ldrh	r2, [r7, #10]
 800c4ac:	1ad3      	subs	r3, r2, r3
 800c4ae:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800c4b0:	68fb      	ldr	r3, [r7, #12]
 800c4b2:	891a      	ldrh	r2, [r3, #8]
 800c4b4:	893b      	ldrh	r3, [r7, #8]
 800c4b6:	1ad3      	subs	r3, r2, r3
 800c4b8:	b29a      	uxth	r2, r3
 800c4ba:	68fb      	ldr	r3, [r7, #12]
 800c4bc:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800c4be:	68fb      	ldr	r3, [r7, #12]
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800c4c4:	68fb      	ldr	r3, [r7, #12]
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	d106      	bne.n	800c4d8 <pbuf_realloc+0x70>
 800c4ca:	4b26      	ldr	r3, [pc, #152]	; (800c564 <pbuf_realloc+0xfc>)
 800c4cc:	f240 12af 	movw	r2, #431	; 0x1af
 800c4d0:	4927      	ldr	r1, [pc, #156]	; (800c570 <pbuf_realloc+0x108>)
 800c4d2:	4826      	ldr	r0, [pc, #152]	; (800c56c <pbuf_realloc+0x104>)
 800c4d4:	f00b f9cc 	bl	8017870 <iprintf>
  while (rem_len > q->len) {
 800c4d8:	68fb      	ldr	r3, [r7, #12]
 800c4da:	895b      	ldrh	r3, [r3, #10]
 800c4dc:	897a      	ldrh	r2, [r7, #10]
 800c4de:	429a      	cmp	r2, r3
 800c4e0:	d8e1      	bhi.n	800c4a6 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800c4e2:	68fb      	ldr	r3, [r7, #12]
 800c4e4:	7b1b      	ldrb	r3, [r3, #12]
 800c4e6:	f003 030f 	and.w	r3, r3, #15
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	d121      	bne.n	800c532 <pbuf_realloc+0xca>
 800c4ee:	68fb      	ldr	r3, [r7, #12]
 800c4f0:	895b      	ldrh	r3, [r3, #10]
 800c4f2:	897a      	ldrh	r2, [r7, #10]
 800c4f4:	429a      	cmp	r2, r3
 800c4f6:	d01c      	beq.n	800c532 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800c4f8:	68fb      	ldr	r3, [r7, #12]
 800c4fa:	7b5b      	ldrb	r3, [r3, #13]
 800c4fc:	f003 0302 	and.w	r3, r3, #2
 800c500:	2b00      	cmp	r3, #0
 800c502:	d116      	bne.n	800c532 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800c504:	68fb      	ldr	r3, [r7, #12]
 800c506:	685a      	ldr	r2, [r3, #4]
 800c508:	68fb      	ldr	r3, [r7, #12]
 800c50a:	1ad3      	subs	r3, r2, r3
 800c50c:	b29a      	uxth	r2, r3
 800c50e:	897b      	ldrh	r3, [r7, #10]
 800c510:	4413      	add	r3, r2
 800c512:	b29b      	uxth	r3, r3
 800c514:	4619      	mov	r1, r3
 800c516:	68f8      	ldr	r0, [r7, #12]
 800c518:	f7ff f87c 	bl	800b614 <mem_trim>
 800c51c:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800c51e:	68fb      	ldr	r3, [r7, #12]
 800c520:	2b00      	cmp	r3, #0
 800c522:	d106      	bne.n	800c532 <pbuf_realloc+0xca>
 800c524:	4b0f      	ldr	r3, [pc, #60]	; (800c564 <pbuf_realloc+0xfc>)
 800c526:	f240 12bd 	movw	r2, #445	; 0x1bd
 800c52a:	4912      	ldr	r1, [pc, #72]	; (800c574 <pbuf_realloc+0x10c>)
 800c52c:	480f      	ldr	r0, [pc, #60]	; (800c56c <pbuf_realloc+0x104>)
 800c52e:	f00b f99f 	bl	8017870 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800c532:	68fb      	ldr	r3, [r7, #12]
 800c534:	897a      	ldrh	r2, [r7, #10]
 800c536:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800c538:	68fb      	ldr	r3, [r7, #12]
 800c53a:	895a      	ldrh	r2, [r3, #10]
 800c53c:	68fb      	ldr	r3, [r7, #12]
 800c53e:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800c540:	68fb      	ldr	r3, [r7, #12]
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	2b00      	cmp	r3, #0
 800c546:	d004      	beq.n	800c552 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800c548:	68fb      	ldr	r3, [r7, #12]
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	4618      	mov	r0, r3
 800c54e:	f000 f911 	bl	800c774 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800c552:	68fb      	ldr	r3, [r7, #12]
 800c554:	2200      	movs	r2, #0
 800c556:	601a      	str	r2, [r3, #0]
 800c558:	e000      	b.n	800c55c <pbuf_realloc+0xf4>
    return;
 800c55a:	bf00      	nop

}
 800c55c:	3710      	adds	r7, #16
 800c55e:	46bd      	mov	sp, r7
 800c560:	bd80      	pop	{r7, pc}
 800c562:	bf00      	nop
 800c564:	0801d20c 	.word	0x0801d20c
 800c568:	0801d324 	.word	0x0801d324
 800c56c:	0801d26c 	.word	0x0801d26c
 800c570:	0801d33c 	.word	0x0801d33c
 800c574:	0801d354 	.word	0x0801d354

0800c578 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800c578:	b580      	push	{r7, lr}
 800c57a:	b086      	sub	sp, #24
 800c57c:	af00      	add	r7, sp, #0
 800c57e:	60f8      	str	r0, [r7, #12]
 800c580:	60b9      	str	r1, [r7, #8]
 800c582:	4613      	mov	r3, r2
 800c584:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800c586:	68fb      	ldr	r3, [r7, #12]
 800c588:	2b00      	cmp	r3, #0
 800c58a:	d106      	bne.n	800c59a <pbuf_add_header_impl+0x22>
 800c58c:	4b2b      	ldr	r3, [pc, #172]	; (800c63c <pbuf_add_header_impl+0xc4>)
 800c58e:	f240 12df 	movw	r2, #479	; 0x1df
 800c592:	492b      	ldr	r1, [pc, #172]	; (800c640 <pbuf_add_header_impl+0xc8>)
 800c594:	482b      	ldr	r0, [pc, #172]	; (800c644 <pbuf_add_header_impl+0xcc>)
 800c596:	f00b f96b 	bl	8017870 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800c59a:	68fb      	ldr	r3, [r7, #12]
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	d003      	beq.n	800c5a8 <pbuf_add_header_impl+0x30>
 800c5a0:	68bb      	ldr	r3, [r7, #8]
 800c5a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c5a6:	d301      	bcc.n	800c5ac <pbuf_add_header_impl+0x34>
    return 1;
 800c5a8:	2301      	movs	r3, #1
 800c5aa:	e043      	b.n	800c634 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800c5ac:	68bb      	ldr	r3, [r7, #8]
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	d101      	bne.n	800c5b6 <pbuf_add_header_impl+0x3e>
    return 0;
 800c5b2:	2300      	movs	r3, #0
 800c5b4:	e03e      	b.n	800c634 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800c5b6:	68bb      	ldr	r3, [r7, #8]
 800c5b8:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800c5ba:	68fb      	ldr	r3, [r7, #12]
 800c5bc:	891a      	ldrh	r2, [r3, #8]
 800c5be:	8a7b      	ldrh	r3, [r7, #18]
 800c5c0:	4413      	add	r3, r2
 800c5c2:	b29b      	uxth	r3, r3
 800c5c4:	8a7a      	ldrh	r2, [r7, #18]
 800c5c6:	429a      	cmp	r2, r3
 800c5c8:	d901      	bls.n	800c5ce <pbuf_add_header_impl+0x56>
    return 1;
 800c5ca:	2301      	movs	r3, #1
 800c5cc:	e032      	b.n	800c634 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800c5ce:	68fb      	ldr	r3, [r7, #12]
 800c5d0:	7b1b      	ldrb	r3, [r3, #12]
 800c5d2:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800c5d4:	8a3b      	ldrh	r3, [r7, #16]
 800c5d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	d00c      	beq.n	800c5f8 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800c5de:	68fb      	ldr	r3, [r7, #12]
 800c5e0:	685a      	ldr	r2, [r3, #4]
 800c5e2:	68bb      	ldr	r3, [r7, #8]
 800c5e4:	425b      	negs	r3, r3
 800c5e6:	4413      	add	r3, r2
 800c5e8:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800c5ea:	68fb      	ldr	r3, [r7, #12]
 800c5ec:	3310      	adds	r3, #16
 800c5ee:	697a      	ldr	r2, [r7, #20]
 800c5f0:	429a      	cmp	r2, r3
 800c5f2:	d20d      	bcs.n	800c610 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800c5f4:	2301      	movs	r3, #1
 800c5f6:	e01d      	b.n	800c634 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800c5f8:	79fb      	ldrb	r3, [r7, #7]
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	d006      	beq.n	800c60c <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800c5fe:	68fb      	ldr	r3, [r7, #12]
 800c600:	685a      	ldr	r2, [r3, #4]
 800c602:	68bb      	ldr	r3, [r7, #8]
 800c604:	425b      	negs	r3, r3
 800c606:	4413      	add	r3, r2
 800c608:	617b      	str	r3, [r7, #20]
 800c60a:	e001      	b.n	800c610 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800c60c:	2301      	movs	r3, #1
 800c60e:	e011      	b.n	800c634 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800c610:	68fb      	ldr	r3, [r7, #12]
 800c612:	697a      	ldr	r2, [r7, #20]
 800c614:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800c616:	68fb      	ldr	r3, [r7, #12]
 800c618:	895a      	ldrh	r2, [r3, #10]
 800c61a:	8a7b      	ldrh	r3, [r7, #18]
 800c61c:	4413      	add	r3, r2
 800c61e:	b29a      	uxth	r2, r3
 800c620:	68fb      	ldr	r3, [r7, #12]
 800c622:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800c624:	68fb      	ldr	r3, [r7, #12]
 800c626:	891a      	ldrh	r2, [r3, #8]
 800c628:	8a7b      	ldrh	r3, [r7, #18]
 800c62a:	4413      	add	r3, r2
 800c62c:	b29a      	uxth	r2, r3
 800c62e:	68fb      	ldr	r3, [r7, #12]
 800c630:	811a      	strh	r2, [r3, #8]


  return 0;
 800c632:	2300      	movs	r3, #0
}
 800c634:	4618      	mov	r0, r3
 800c636:	3718      	adds	r7, #24
 800c638:	46bd      	mov	sp, r7
 800c63a:	bd80      	pop	{r7, pc}
 800c63c:	0801d20c 	.word	0x0801d20c
 800c640:	0801d370 	.word	0x0801d370
 800c644:	0801d26c 	.word	0x0801d26c

0800c648 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800c648:	b580      	push	{r7, lr}
 800c64a:	b082      	sub	sp, #8
 800c64c:	af00      	add	r7, sp, #0
 800c64e:	6078      	str	r0, [r7, #4]
 800c650:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800c652:	2200      	movs	r2, #0
 800c654:	6839      	ldr	r1, [r7, #0]
 800c656:	6878      	ldr	r0, [r7, #4]
 800c658:	f7ff ff8e 	bl	800c578 <pbuf_add_header_impl>
 800c65c:	4603      	mov	r3, r0
}
 800c65e:	4618      	mov	r0, r3
 800c660:	3708      	adds	r7, #8
 800c662:	46bd      	mov	sp, r7
 800c664:	bd80      	pop	{r7, pc}
	...

0800c668 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800c668:	b580      	push	{r7, lr}
 800c66a:	b084      	sub	sp, #16
 800c66c:	af00      	add	r7, sp, #0
 800c66e:	6078      	str	r0, [r7, #4]
 800c670:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	2b00      	cmp	r3, #0
 800c676:	d106      	bne.n	800c686 <pbuf_remove_header+0x1e>
 800c678:	4b20      	ldr	r3, [pc, #128]	; (800c6fc <pbuf_remove_header+0x94>)
 800c67a:	f240 224b 	movw	r2, #587	; 0x24b
 800c67e:	4920      	ldr	r1, [pc, #128]	; (800c700 <pbuf_remove_header+0x98>)
 800c680:	4820      	ldr	r0, [pc, #128]	; (800c704 <pbuf_remove_header+0x9c>)
 800c682:	f00b f8f5 	bl	8017870 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	2b00      	cmp	r3, #0
 800c68a:	d003      	beq.n	800c694 <pbuf_remove_header+0x2c>
 800c68c:	683b      	ldr	r3, [r7, #0]
 800c68e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c692:	d301      	bcc.n	800c698 <pbuf_remove_header+0x30>
    return 1;
 800c694:	2301      	movs	r3, #1
 800c696:	e02c      	b.n	800c6f2 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800c698:	683b      	ldr	r3, [r7, #0]
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d101      	bne.n	800c6a2 <pbuf_remove_header+0x3a>
    return 0;
 800c69e:	2300      	movs	r3, #0
 800c6a0:	e027      	b.n	800c6f2 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800c6a2:	683b      	ldr	r3, [r7, #0]
 800c6a4:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	895b      	ldrh	r3, [r3, #10]
 800c6aa:	89fa      	ldrh	r2, [r7, #14]
 800c6ac:	429a      	cmp	r2, r3
 800c6ae:	d908      	bls.n	800c6c2 <pbuf_remove_header+0x5a>
 800c6b0:	4b12      	ldr	r3, [pc, #72]	; (800c6fc <pbuf_remove_header+0x94>)
 800c6b2:	f240 2255 	movw	r2, #597	; 0x255
 800c6b6:	4914      	ldr	r1, [pc, #80]	; (800c708 <pbuf_remove_header+0xa0>)
 800c6b8:	4812      	ldr	r0, [pc, #72]	; (800c704 <pbuf_remove_header+0x9c>)
 800c6ba:	f00b f8d9 	bl	8017870 <iprintf>
 800c6be:	2301      	movs	r3, #1
 800c6c0:	e017      	b.n	800c6f2 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	685b      	ldr	r3, [r3, #4]
 800c6c6:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	685a      	ldr	r2, [r3, #4]
 800c6cc:	683b      	ldr	r3, [r7, #0]
 800c6ce:	441a      	add	r2, r3
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	895a      	ldrh	r2, [r3, #10]
 800c6d8:	89fb      	ldrh	r3, [r7, #14]
 800c6da:	1ad3      	subs	r3, r2, r3
 800c6dc:	b29a      	uxth	r2, r3
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	891a      	ldrh	r2, [r3, #8]
 800c6e6:	89fb      	ldrh	r3, [r7, #14]
 800c6e8:	1ad3      	subs	r3, r2, r3
 800c6ea:	b29a      	uxth	r2, r3
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800c6f0:	2300      	movs	r3, #0
}
 800c6f2:	4618      	mov	r0, r3
 800c6f4:	3710      	adds	r7, #16
 800c6f6:	46bd      	mov	sp, r7
 800c6f8:	bd80      	pop	{r7, pc}
 800c6fa:	bf00      	nop
 800c6fc:	0801d20c 	.word	0x0801d20c
 800c700:	0801d370 	.word	0x0801d370
 800c704:	0801d26c 	.word	0x0801d26c
 800c708:	0801d37c 	.word	0x0801d37c

0800c70c <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800c70c:	b580      	push	{r7, lr}
 800c70e:	b082      	sub	sp, #8
 800c710:	af00      	add	r7, sp, #0
 800c712:	6078      	str	r0, [r7, #4]
 800c714:	460b      	mov	r3, r1
 800c716:	807b      	strh	r3, [r7, #2]
 800c718:	4613      	mov	r3, r2
 800c71a:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800c71c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c720:	2b00      	cmp	r3, #0
 800c722:	da08      	bge.n	800c736 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800c724:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c728:	425b      	negs	r3, r3
 800c72a:	4619      	mov	r1, r3
 800c72c:	6878      	ldr	r0, [r7, #4]
 800c72e:	f7ff ff9b 	bl	800c668 <pbuf_remove_header>
 800c732:	4603      	mov	r3, r0
 800c734:	e007      	b.n	800c746 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800c736:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c73a:	787a      	ldrb	r2, [r7, #1]
 800c73c:	4619      	mov	r1, r3
 800c73e:	6878      	ldr	r0, [r7, #4]
 800c740:	f7ff ff1a 	bl	800c578 <pbuf_add_header_impl>
 800c744:	4603      	mov	r3, r0
  }
}
 800c746:	4618      	mov	r0, r3
 800c748:	3708      	adds	r7, #8
 800c74a:	46bd      	mov	sp, r7
 800c74c:	bd80      	pop	{r7, pc}

0800c74e <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800c74e:	b580      	push	{r7, lr}
 800c750:	b082      	sub	sp, #8
 800c752:	af00      	add	r7, sp, #0
 800c754:	6078      	str	r0, [r7, #4]
 800c756:	460b      	mov	r3, r1
 800c758:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800c75a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c75e:	2201      	movs	r2, #1
 800c760:	4619      	mov	r1, r3
 800c762:	6878      	ldr	r0, [r7, #4]
 800c764:	f7ff ffd2 	bl	800c70c <pbuf_header_impl>
 800c768:	4603      	mov	r3, r0
}
 800c76a:	4618      	mov	r0, r3
 800c76c:	3708      	adds	r7, #8
 800c76e:	46bd      	mov	sp, r7
 800c770:	bd80      	pop	{r7, pc}
	...

0800c774 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800c774:	b580      	push	{r7, lr}
 800c776:	b086      	sub	sp, #24
 800c778:	af00      	add	r7, sp, #0
 800c77a:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	2b00      	cmp	r3, #0
 800c780:	d10b      	bne.n	800c79a <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	2b00      	cmp	r3, #0
 800c786:	d106      	bne.n	800c796 <pbuf_free+0x22>
 800c788:	4b38      	ldr	r3, [pc, #224]	; (800c86c <pbuf_free+0xf8>)
 800c78a:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800c78e:	4938      	ldr	r1, [pc, #224]	; (800c870 <pbuf_free+0xfc>)
 800c790:	4838      	ldr	r0, [pc, #224]	; (800c874 <pbuf_free+0x100>)
 800c792:	f00b f86d 	bl	8017870 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800c796:	2300      	movs	r3, #0
 800c798:	e063      	b.n	800c862 <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800c79a:	2300      	movs	r3, #0
 800c79c:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800c79e:	e05c      	b.n	800c85a <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	7b9b      	ldrb	r3, [r3, #14]
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	d106      	bne.n	800c7b6 <pbuf_free+0x42>
 800c7a8:	4b30      	ldr	r3, [pc, #192]	; (800c86c <pbuf_free+0xf8>)
 800c7aa:	f240 22f1 	movw	r2, #753	; 0x2f1
 800c7ae:	4932      	ldr	r1, [pc, #200]	; (800c878 <pbuf_free+0x104>)
 800c7b0:	4830      	ldr	r0, [pc, #192]	; (800c874 <pbuf_free+0x100>)
 800c7b2:	f00b f85d 	bl	8017870 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	7b9b      	ldrb	r3, [r3, #14]
 800c7ba:	3b01      	subs	r3, #1
 800c7bc:	b2da      	uxtb	r2, r3
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	739a      	strb	r2, [r3, #14]
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	7b9b      	ldrb	r3, [r3, #14]
 800c7c6:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800c7c8:	7dbb      	ldrb	r3, [r7, #22]
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	d143      	bne.n	800c856 <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	681b      	ldr	r3, [r3, #0]
 800c7d2:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	7b1b      	ldrb	r3, [r3, #12]
 800c7d8:	f003 030f 	and.w	r3, r3, #15
 800c7dc:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	7b5b      	ldrb	r3, [r3, #13]
 800c7e2:	f003 0302 	and.w	r3, r3, #2
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	d011      	beq.n	800c80e <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800c7ee:	68bb      	ldr	r3, [r7, #8]
 800c7f0:	691b      	ldr	r3, [r3, #16]
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	d106      	bne.n	800c804 <pbuf_free+0x90>
 800c7f6:	4b1d      	ldr	r3, [pc, #116]	; (800c86c <pbuf_free+0xf8>)
 800c7f8:	f240 22ff 	movw	r2, #767	; 0x2ff
 800c7fc:	491f      	ldr	r1, [pc, #124]	; (800c87c <pbuf_free+0x108>)
 800c7fe:	481d      	ldr	r0, [pc, #116]	; (800c874 <pbuf_free+0x100>)
 800c800:	f00b f836 	bl	8017870 <iprintf>
        pc->custom_free_function(p);
 800c804:	68bb      	ldr	r3, [r7, #8]
 800c806:	691b      	ldr	r3, [r3, #16]
 800c808:	6878      	ldr	r0, [r7, #4]
 800c80a:	4798      	blx	r3
 800c80c:	e01d      	b.n	800c84a <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800c80e:	7bfb      	ldrb	r3, [r7, #15]
 800c810:	2b02      	cmp	r3, #2
 800c812:	d104      	bne.n	800c81e <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 800c814:	6879      	ldr	r1, [r7, #4]
 800c816:	2008      	movs	r0, #8
 800c818:	f7ff f9b2 	bl	800bb80 <memp_free>
 800c81c:	e015      	b.n	800c84a <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800c81e:	7bfb      	ldrb	r3, [r7, #15]
 800c820:	2b01      	cmp	r3, #1
 800c822:	d104      	bne.n	800c82e <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 800c824:	6879      	ldr	r1, [r7, #4]
 800c826:	2007      	movs	r0, #7
 800c828:	f7ff f9aa 	bl	800bb80 <memp_free>
 800c82c:	e00d      	b.n	800c84a <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800c82e:	7bfb      	ldrb	r3, [r7, #15]
 800c830:	2b00      	cmp	r3, #0
 800c832:	d103      	bne.n	800c83c <pbuf_free+0xc8>
          mem_free(p);
 800c834:	6878      	ldr	r0, [r7, #4]
 800c836:	f7fe fe83 	bl	800b540 <mem_free>
 800c83a:	e006      	b.n	800c84a <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800c83c:	4b0b      	ldr	r3, [pc, #44]	; (800c86c <pbuf_free+0xf8>)
 800c83e:	f240 320f 	movw	r2, #783	; 0x30f
 800c842:	490f      	ldr	r1, [pc, #60]	; (800c880 <pbuf_free+0x10c>)
 800c844:	480b      	ldr	r0, [pc, #44]	; (800c874 <pbuf_free+0x100>)
 800c846:	f00b f813 	bl	8017870 <iprintf>
        }
      }
      count++;
 800c84a:	7dfb      	ldrb	r3, [r7, #23]
 800c84c:	3301      	adds	r3, #1
 800c84e:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 800c850:	693b      	ldr	r3, [r7, #16]
 800c852:	607b      	str	r3, [r7, #4]
 800c854:	e001      	b.n	800c85a <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800c856:	2300      	movs	r3, #0
 800c858:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d19f      	bne.n	800c7a0 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800c860:	7dfb      	ldrb	r3, [r7, #23]
}
 800c862:	4618      	mov	r0, r3
 800c864:	3718      	adds	r7, #24
 800c866:	46bd      	mov	sp, r7
 800c868:	bd80      	pop	{r7, pc}
 800c86a:	bf00      	nop
 800c86c:	0801d20c 	.word	0x0801d20c
 800c870:	0801d370 	.word	0x0801d370
 800c874:	0801d26c 	.word	0x0801d26c
 800c878:	0801d39c 	.word	0x0801d39c
 800c87c:	0801d3b4 	.word	0x0801d3b4
 800c880:	0801d3d8 	.word	0x0801d3d8

0800c884 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800c884:	b480      	push	{r7}
 800c886:	b085      	sub	sp, #20
 800c888:	af00      	add	r7, sp, #0
 800c88a:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800c88c:	2300      	movs	r3, #0
 800c88e:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800c890:	e005      	b.n	800c89e <pbuf_clen+0x1a>
    ++len;
 800c892:	89fb      	ldrh	r3, [r7, #14]
 800c894:	3301      	adds	r3, #1
 800c896:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	681b      	ldr	r3, [r3, #0]
 800c89c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	d1f6      	bne.n	800c892 <pbuf_clen+0xe>
  }
  return len;
 800c8a4:	89fb      	ldrh	r3, [r7, #14]
}
 800c8a6:	4618      	mov	r0, r3
 800c8a8:	3714      	adds	r7, #20
 800c8aa:	46bd      	mov	sp, r7
 800c8ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8b0:	4770      	bx	lr
	...

0800c8b4 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800c8b4:	b580      	push	{r7, lr}
 800c8b6:	b082      	sub	sp, #8
 800c8b8:	af00      	add	r7, sp, #0
 800c8ba:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	d010      	beq.n	800c8e4 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	7b9b      	ldrb	r3, [r3, #14]
 800c8c6:	3301      	adds	r3, #1
 800c8c8:	b2da      	uxtb	r2, r3
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	7b9b      	ldrb	r3, [r3, #14]
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	d106      	bne.n	800c8e4 <pbuf_ref+0x30>
 800c8d6:	4b05      	ldr	r3, [pc, #20]	; (800c8ec <pbuf_ref+0x38>)
 800c8d8:	f240 3242 	movw	r2, #834	; 0x342
 800c8dc:	4904      	ldr	r1, [pc, #16]	; (800c8f0 <pbuf_ref+0x3c>)
 800c8de:	4805      	ldr	r0, [pc, #20]	; (800c8f4 <pbuf_ref+0x40>)
 800c8e0:	f00a ffc6 	bl	8017870 <iprintf>
  }
}
 800c8e4:	bf00      	nop
 800c8e6:	3708      	adds	r7, #8
 800c8e8:	46bd      	mov	sp, r7
 800c8ea:	bd80      	pop	{r7, pc}
 800c8ec:	0801d20c 	.word	0x0801d20c
 800c8f0:	0801d3ec 	.word	0x0801d3ec
 800c8f4:	0801d26c 	.word	0x0801d26c

0800c8f8 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800c8f8:	b580      	push	{r7, lr}
 800c8fa:	b084      	sub	sp, #16
 800c8fc:	af00      	add	r7, sp, #0
 800c8fe:	6078      	str	r0, [r7, #4]
 800c900:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	2b00      	cmp	r3, #0
 800c906:	d002      	beq.n	800c90e <pbuf_cat+0x16>
 800c908:	683b      	ldr	r3, [r7, #0]
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d107      	bne.n	800c91e <pbuf_cat+0x26>
 800c90e:	4b20      	ldr	r3, [pc, #128]	; (800c990 <pbuf_cat+0x98>)
 800c910:	f240 3259 	movw	r2, #857	; 0x359
 800c914:	491f      	ldr	r1, [pc, #124]	; (800c994 <pbuf_cat+0x9c>)
 800c916:	4820      	ldr	r0, [pc, #128]	; (800c998 <pbuf_cat+0xa0>)
 800c918:	f00a ffaa 	bl	8017870 <iprintf>
 800c91c:	e034      	b.n	800c988 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	60fb      	str	r3, [r7, #12]
 800c922:	e00a      	b.n	800c93a <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800c924:	68fb      	ldr	r3, [r7, #12]
 800c926:	891a      	ldrh	r2, [r3, #8]
 800c928:	683b      	ldr	r3, [r7, #0]
 800c92a:	891b      	ldrh	r3, [r3, #8]
 800c92c:	4413      	add	r3, r2
 800c92e:	b29a      	uxth	r2, r3
 800c930:	68fb      	ldr	r3, [r7, #12]
 800c932:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800c934:	68fb      	ldr	r3, [r7, #12]
 800c936:	681b      	ldr	r3, [r3, #0]
 800c938:	60fb      	str	r3, [r7, #12]
 800c93a:	68fb      	ldr	r3, [r7, #12]
 800c93c:	681b      	ldr	r3, [r3, #0]
 800c93e:	2b00      	cmp	r3, #0
 800c940:	d1f0      	bne.n	800c924 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800c942:	68fb      	ldr	r3, [r7, #12]
 800c944:	891a      	ldrh	r2, [r3, #8]
 800c946:	68fb      	ldr	r3, [r7, #12]
 800c948:	895b      	ldrh	r3, [r3, #10]
 800c94a:	429a      	cmp	r2, r3
 800c94c:	d006      	beq.n	800c95c <pbuf_cat+0x64>
 800c94e:	4b10      	ldr	r3, [pc, #64]	; (800c990 <pbuf_cat+0x98>)
 800c950:	f240 3262 	movw	r2, #866	; 0x362
 800c954:	4911      	ldr	r1, [pc, #68]	; (800c99c <pbuf_cat+0xa4>)
 800c956:	4810      	ldr	r0, [pc, #64]	; (800c998 <pbuf_cat+0xa0>)
 800c958:	f00a ff8a 	bl	8017870 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800c95c:	68fb      	ldr	r3, [r7, #12]
 800c95e:	681b      	ldr	r3, [r3, #0]
 800c960:	2b00      	cmp	r3, #0
 800c962:	d006      	beq.n	800c972 <pbuf_cat+0x7a>
 800c964:	4b0a      	ldr	r3, [pc, #40]	; (800c990 <pbuf_cat+0x98>)
 800c966:	f240 3263 	movw	r2, #867	; 0x363
 800c96a:	490d      	ldr	r1, [pc, #52]	; (800c9a0 <pbuf_cat+0xa8>)
 800c96c:	480a      	ldr	r0, [pc, #40]	; (800c998 <pbuf_cat+0xa0>)
 800c96e:	f00a ff7f 	bl	8017870 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800c972:	68fb      	ldr	r3, [r7, #12]
 800c974:	891a      	ldrh	r2, [r3, #8]
 800c976:	683b      	ldr	r3, [r7, #0]
 800c978:	891b      	ldrh	r3, [r3, #8]
 800c97a:	4413      	add	r3, r2
 800c97c:	b29a      	uxth	r2, r3
 800c97e:	68fb      	ldr	r3, [r7, #12]
 800c980:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800c982:	68fb      	ldr	r3, [r7, #12]
 800c984:	683a      	ldr	r2, [r7, #0]
 800c986:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800c988:	3710      	adds	r7, #16
 800c98a:	46bd      	mov	sp, r7
 800c98c:	bd80      	pop	{r7, pc}
 800c98e:	bf00      	nop
 800c990:	0801d20c 	.word	0x0801d20c
 800c994:	0801d400 	.word	0x0801d400
 800c998:	0801d26c 	.word	0x0801d26c
 800c99c:	0801d438 	.word	0x0801d438
 800c9a0:	0801d468 	.word	0x0801d468

0800c9a4 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800c9a4:	b580      	push	{r7, lr}
 800c9a6:	b082      	sub	sp, #8
 800c9a8:	af00      	add	r7, sp, #0
 800c9aa:	6078      	str	r0, [r7, #4]
 800c9ac:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800c9ae:	6839      	ldr	r1, [r7, #0]
 800c9b0:	6878      	ldr	r0, [r7, #4]
 800c9b2:	f7ff ffa1 	bl	800c8f8 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800c9b6:	6838      	ldr	r0, [r7, #0]
 800c9b8:	f7ff ff7c 	bl	800c8b4 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800c9bc:	bf00      	nop
 800c9be:	3708      	adds	r7, #8
 800c9c0:	46bd      	mov	sp, r7
 800c9c2:	bd80      	pop	{r7, pc}

0800c9c4 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800c9c4:	b580      	push	{r7, lr}
 800c9c6:	b086      	sub	sp, #24
 800c9c8:	af00      	add	r7, sp, #0
 800c9ca:	6078      	str	r0, [r7, #4]
 800c9cc:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800c9ce:	2300      	movs	r3, #0
 800c9d0:	617b      	str	r3, [r7, #20]
 800c9d2:	2300      	movs	r3, #0
 800c9d4:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d008      	beq.n	800c9ee <pbuf_copy+0x2a>
 800c9dc:	683b      	ldr	r3, [r7, #0]
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	d005      	beq.n	800c9ee <pbuf_copy+0x2a>
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	891a      	ldrh	r2, [r3, #8]
 800c9e6:	683b      	ldr	r3, [r7, #0]
 800c9e8:	891b      	ldrh	r3, [r3, #8]
 800c9ea:	429a      	cmp	r2, r3
 800c9ec:	d209      	bcs.n	800ca02 <pbuf_copy+0x3e>
 800c9ee:	4b57      	ldr	r3, [pc, #348]	; (800cb4c <pbuf_copy+0x188>)
 800c9f0:	f240 32c9 	movw	r2, #969	; 0x3c9
 800c9f4:	4956      	ldr	r1, [pc, #344]	; (800cb50 <pbuf_copy+0x18c>)
 800c9f6:	4857      	ldr	r0, [pc, #348]	; (800cb54 <pbuf_copy+0x190>)
 800c9f8:	f00a ff3a 	bl	8017870 <iprintf>
 800c9fc:	f06f 030f 	mvn.w	r3, #15
 800ca00:	e09f      	b.n	800cb42 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	895b      	ldrh	r3, [r3, #10]
 800ca06:	461a      	mov	r2, r3
 800ca08:	697b      	ldr	r3, [r7, #20]
 800ca0a:	1ad2      	subs	r2, r2, r3
 800ca0c:	683b      	ldr	r3, [r7, #0]
 800ca0e:	895b      	ldrh	r3, [r3, #10]
 800ca10:	4619      	mov	r1, r3
 800ca12:	693b      	ldr	r3, [r7, #16]
 800ca14:	1acb      	subs	r3, r1, r3
 800ca16:	429a      	cmp	r2, r3
 800ca18:	d306      	bcc.n	800ca28 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800ca1a:	683b      	ldr	r3, [r7, #0]
 800ca1c:	895b      	ldrh	r3, [r3, #10]
 800ca1e:	461a      	mov	r2, r3
 800ca20:	693b      	ldr	r3, [r7, #16]
 800ca22:	1ad3      	subs	r3, r2, r3
 800ca24:	60fb      	str	r3, [r7, #12]
 800ca26:	e005      	b.n	800ca34 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	895b      	ldrh	r3, [r3, #10]
 800ca2c:	461a      	mov	r2, r3
 800ca2e:	697b      	ldr	r3, [r7, #20]
 800ca30:	1ad3      	subs	r3, r2, r3
 800ca32:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	685a      	ldr	r2, [r3, #4]
 800ca38:	697b      	ldr	r3, [r7, #20]
 800ca3a:	18d0      	adds	r0, r2, r3
 800ca3c:	683b      	ldr	r3, [r7, #0]
 800ca3e:	685a      	ldr	r2, [r3, #4]
 800ca40:	693b      	ldr	r3, [r7, #16]
 800ca42:	4413      	add	r3, r2
 800ca44:	68fa      	ldr	r2, [r7, #12]
 800ca46:	4619      	mov	r1, r3
 800ca48:	f00a f9ce 	bl	8016de8 <memcpy>
    offset_to += len;
 800ca4c:	697a      	ldr	r2, [r7, #20]
 800ca4e:	68fb      	ldr	r3, [r7, #12]
 800ca50:	4413      	add	r3, r2
 800ca52:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800ca54:	693a      	ldr	r2, [r7, #16]
 800ca56:	68fb      	ldr	r3, [r7, #12]
 800ca58:	4413      	add	r3, r2
 800ca5a:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	895b      	ldrh	r3, [r3, #10]
 800ca60:	461a      	mov	r2, r3
 800ca62:	697b      	ldr	r3, [r7, #20]
 800ca64:	4293      	cmp	r3, r2
 800ca66:	d906      	bls.n	800ca76 <pbuf_copy+0xb2>
 800ca68:	4b38      	ldr	r3, [pc, #224]	; (800cb4c <pbuf_copy+0x188>)
 800ca6a:	f240 32d9 	movw	r2, #985	; 0x3d9
 800ca6e:	493a      	ldr	r1, [pc, #232]	; (800cb58 <pbuf_copy+0x194>)
 800ca70:	4838      	ldr	r0, [pc, #224]	; (800cb54 <pbuf_copy+0x190>)
 800ca72:	f00a fefd 	bl	8017870 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800ca76:	683b      	ldr	r3, [r7, #0]
 800ca78:	895b      	ldrh	r3, [r3, #10]
 800ca7a:	461a      	mov	r2, r3
 800ca7c:	693b      	ldr	r3, [r7, #16]
 800ca7e:	4293      	cmp	r3, r2
 800ca80:	d906      	bls.n	800ca90 <pbuf_copy+0xcc>
 800ca82:	4b32      	ldr	r3, [pc, #200]	; (800cb4c <pbuf_copy+0x188>)
 800ca84:	f240 32da 	movw	r2, #986	; 0x3da
 800ca88:	4934      	ldr	r1, [pc, #208]	; (800cb5c <pbuf_copy+0x198>)
 800ca8a:	4832      	ldr	r0, [pc, #200]	; (800cb54 <pbuf_copy+0x190>)
 800ca8c:	f00a fef0 	bl	8017870 <iprintf>
    if (offset_from >= p_from->len) {
 800ca90:	683b      	ldr	r3, [r7, #0]
 800ca92:	895b      	ldrh	r3, [r3, #10]
 800ca94:	461a      	mov	r2, r3
 800ca96:	693b      	ldr	r3, [r7, #16]
 800ca98:	4293      	cmp	r3, r2
 800ca9a:	d304      	bcc.n	800caa6 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800ca9c:	2300      	movs	r3, #0
 800ca9e:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800caa0:	683b      	ldr	r3, [r7, #0]
 800caa2:	681b      	ldr	r3, [r3, #0]
 800caa4:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	895b      	ldrh	r3, [r3, #10]
 800caaa:	461a      	mov	r2, r3
 800caac:	697b      	ldr	r3, [r7, #20]
 800caae:	4293      	cmp	r3, r2
 800cab0:	d114      	bne.n	800cadc <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800cab2:	2300      	movs	r3, #0
 800cab4:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	681b      	ldr	r3, [r3, #0]
 800caba:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	d10c      	bne.n	800cadc <pbuf_copy+0x118>
 800cac2:	683b      	ldr	r3, [r7, #0]
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	d009      	beq.n	800cadc <pbuf_copy+0x118>
 800cac8:	4b20      	ldr	r3, [pc, #128]	; (800cb4c <pbuf_copy+0x188>)
 800caca:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800cace:	4924      	ldr	r1, [pc, #144]	; (800cb60 <pbuf_copy+0x19c>)
 800cad0:	4820      	ldr	r0, [pc, #128]	; (800cb54 <pbuf_copy+0x190>)
 800cad2:	f00a fecd 	bl	8017870 <iprintf>
 800cad6:	f06f 030f 	mvn.w	r3, #15
 800cada:	e032      	b.n	800cb42 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800cadc:	683b      	ldr	r3, [r7, #0]
 800cade:	2b00      	cmp	r3, #0
 800cae0:	d013      	beq.n	800cb0a <pbuf_copy+0x146>
 800cae2:	683b      	ldr	r3, [r7, #0]
 800cae4:	895a      	ldrh	r2, [r3, #10]
 800cae6:	683b      	ldr	r3, [r7, #0]
 800cae8:	891b      	ldrh	r3, [r3, #8]
 800caea:	429a      	cmp	r2, r3
 800caec:	d10d      	bne.n	800cb0a <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800caee:	683b      	ldr	r3, [r7, #0]
 800caf0:	681b      	ldr	r3, [r3, #0]
 800caf2:	2b00      	cmp	r3, #0
 800caf4:	d009      	beq.n	800cb0a <pbuf_copy+0x146>
 800caf6:	4b15      	ldr	r3, [pc, #84]	; (800cb4c <pbuf_copy+0x188>)
 800caf8:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800cafc:	4919      	ldr	r1, [pc, #100]	; (800cb64 <pbuf_copy+0x1a0>)
 800cafe:	4815      	ldr	r0, [pc, #84]	; (800cb54 <pbuf_copy+0x190>)
 800cb00:	f00a feb6 	bl	8017870 <iprintf>
 800cb04:	f06f 0305 	mvn.w	r3, #5
 800cb08:	e01b      	b.n	800cb42 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	2b00      	cmp	r3, #0
 800cb0e:	d013      	beq.n	800cb38 <pbuf_copy+0x174>
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	895a      	ldrh	r2, [r3, #10]
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	891b      	ldrh	r3, [r3, #8]
 800cb18:	429a      	cmp	r2, r3
 800cb1a:	d10d      	bne.n	800cb38 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	681b      	ldr	r3, [r3, #0]
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	d009      	beq.n	800cb38 <pbuf_copy+0x174>
 800cb24:	4b09      	ldr	r3, [pc, #36]	; (800cb4c <pbuf_copy+0x188>)
 800cb26:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800cb2a:	490e      	ldr	r1, [pc, #56]	; (800cb64 <pbuf_copy+0x1a0>)
 800cb2c:	4809      	ldr	r0, [pc, #36]	; (800cb54 <pbuf_copy+0x190>)
 800cb2e:	f00a fe9f 	bl	8017870 <iprintf>
 800cb32:	f06f 0305 	mvn.w	r3, #5
 800cb36:	e004      	b.n	800cb42 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800cb38:	683b      	ldr	r3, [r7, #0]
 800cb3a:	2b00      	cmp	r3, #0
 800cb3c:	f47f af61 	bne.w	800ca02 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800cb40:	2300      	movs	r3, #0
}
 800cb42:	4618      	mov	r0, r3
 800cb44:	3718      	adds	r7, #24
 800cb46:	46bd      	mov	sp, r7
 800cb48:	bd80      	pop	{r7, pc}
 800cb4a:	bf00      	nop
 800cb4c:	0801d20c 	.word	0x0801d20c
 800cb50:	0801d4b4 	.word	0x0801d4b4
 800cb54:	0801d26c 	.word	0x0801d26c
 800cb58:	0801d4e4 	.word	0x0801d4e4
 800cb5c:	0801d4fc 	.word	0x0801d4fc
 800cb60:	0801d518 	.word	0x0801d518
 800cb64:	0801d528 	.word	0x0801d528

0800cb68 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800cb68:	b580      	push	{r7, lr}
 800cb6a:	b088      	sub	sp, #32
 800cb6c:	af00      	add	r7, sp, #0
 800cb6e:	60f8      	str	r0, [r7, #12]
 800cb70:	60b9      	str	r1, [r7, #8]
 800cb72:	4611      	mov	r1, r2
 800cb74:	461a      	mov	r2, r3
 800cb76:	460b      	mov	r3, r1
 800cb78:	80fb      	strh	r3, [r7, #6]
 800cb7a:	4613      	mov	r3, r2
 800cb7c:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800cb7e:	2300      	movs	r3, #0
 800cb80:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800cb82:	2300      	movs	r3, #0
 800cb84:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800cb86:	68fb      	ldr	r3, [r7, #12]
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	d108      	bne.n	800cb9e <pbuf_copy_partial+0x36>
 800cb8c:	4b2b      	ldr	r3, [pc, #172]	; (800cc3c <pbuf_copy_partial+0xd4>)
 800cb8e:	f240 420a 	movw	r2, #1034	; 0x40a
 800cb92:	492b      	ldr	r1, [pc, #172]	; (800cc40 <pbuf_copy_partial+0xd8>)
 800cb94:	482b      	ldr	r0, [pc, #172]	; (800cc44 <pbuf_copy_partial+0xdc>)
 800cb96:	f00a fe6b 	bl	8017870 <iprintf>
 800cb9a:	2300      	movs	r3, #0
 800cb9c:	e04a      	b.n	800cc34 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800cb9e:	68bb      	ldr	r3, [r7, #8]
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	d108      	bne.n	800cbb6 <pbuf_copy_partial+0x4e>
 800cba4:	4b25      	ldr	r3, [pc, #148]	; (800cc3c <pbuf_copy_partial+0xd4>)
 800cba6:	f240 420b 	movw	r2, #1035	; 0x40b
 800cbaa:	4927      	ldr	r1, [pc, #156]	; (800cc48 <pbuf_copy_partial+0xe0>)
 800cbac:	4825      	ldr	r0, [pc, #148]	; (800cc44 <pbuf_copy_partial+0xdc>)
 800cbae:	f00a fe5f 	bl	8017870 <iprintf>
 800cbb2:	2300      	movs	r3, #0
 800cbb4:	e03e      	b.n	800cc34 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800cbb6:	68fb      	ldr	r3, [r7, #12]
 800cbb8:	61fb      	str	r3, [r7, #28]
 800cbba:	e034      	b.n	800cc26 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800cbbc:	88bb      	ldrh	r3, [r7, #4]
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	d00a      	beq.n	800cbd8 <pbuf_copy_partial+0x70>
 800cbc2:	69fb      	ldr	r3, [r7, #28]
 800cbc4:	895b      	ldrh	r3, [r3, #10]
 800cbc6:	88ba      	ldrh	r2, [r7, #4]
 800cbc8:	429a      	cmp	r2, r3
 800cbca:	d305      	bcc.n	800cbd8 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800cbcc:	69fb      	ldr	r3, [r7, #28]
 800cbce:	895b      	ldrh	r3, [r3, #10]
 800cbd0:	88ba      	ldrh	r2, [r7, #4]
 800cbd2:	1ad3      	subs	r3, r2, r3
 800cbd4:	80bb      	strh	r3, [r7, #4]
 800cbd6:	e023      	b.n	800cc20 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800cbd8:	69fb      	ldr	r3, [r7, #28]
 800cbda:	895a      	ldrh	r2, [r3, #10]
 800cbdc:	88bb      	ldrh	r3, [r7, #4]
 800cbde:	1ad3      	subs	r3, r2, r3
 800cbe0:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800cbe2:	8b3a      	ldrh	r2, [r7, #24]
 800cbe4:	88fb      	ldrh	r3, [r7, #6]
 800cbe6:	429a      	cmp	r2, r3
 800cbe8:	d901      	bls.n	800cbee <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800cbea:	88fb      	ldrh	r3, [r7, #6]
 800cbec:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800cbee:	8b7b      	ldrh	r3, [r7, #26]
 800cbf0:	68ba      	ldr	r2, [r7, #8]
 800cbf2:	18d0      	adds	r0, r2, r3
 800cbf4:	69fb      	ldr	r3, [r7, #28]
 800cbf6:	685a      	ldr	r2, [r3, #4]
 800cbf8:	88bb      	ldrh	r3, [r7, #4]
 800cbfa:	4413      	add	r3, r2
 800cbfc:	8b3a      	ldrh	r2, [r7, #24]
 800cbfe:	4619      	mov	r1, r3
 800cc00:	f00a f8f2 	bl	8016de8 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800cc04:	8afa      	ldrh	r2, [r7, #22]
 800cc06:	8b3b      	ldrh	r3, [r7, #24]
 800cc08:	4413      	add	r3, r2
 800cc0a:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800cc0c:	8b7a      	ldrh	r2, [r7, #26]
 800cc0e:	8b3b      	ldrh	r3, [r7, #24]
 800cc10:	4413      	add	r3, r2
 800cc12:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800cc14:	88fa      	ldrh	r2, [r7, #6]
 800cc16:	8b3b      	ldrh	r3, [r7, #24]
 800cc18:	1ad3      	subs	r3, r2, r3
 800cc1a:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800cc1c:	2300      	movs	r3, #0
 800cc1e:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800cc20:	69fb      	ldr	r3, [r7, #28]
 800cc22:	681b      	ldr	r3, [r3, #0]
 800cc24:	61fb      	str	r3, [r7, #28]
 800cc26:	88fb      	ldrh	r3, [r7, #6]
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	d002      	beq.n	800cc32 <pbuf_copy_partial+0xca>
 800cc2c:	69fb      	ldr	r3, [r7, #28]
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	d1c4      	bne.n	800cbbc <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800cc32:	8afb      	ldrh	r3, [r7, #22]
}
 800cc34:	4618      	mov	r0, r3
 800cc36:	3720      	adds	r7, #32
 800cc38:	46bd      	mov	sp, r7
 800cc3a:	bd80      	pop	{r7, pc}
 800cc3c:	0801d20c 	.word	0x0801d20c
 800cc40:	0801d554 	.word	0x0801d554
 800cc44:	0801d26c 	.word	0x0801d26c
 800cc48:	0801d574 	.word	0x0801d574

0800cc4c <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800cc4c:	b580      	push	{r7, lr}
 800cc4e:	b084      	sub	sp, #16
 800cc50:	af00      	add	r7, sp, #0
 800cc52:	4603      	mov	r3, r0
 800cc54:	603a      	str	r2, [r7, #0]
 800cc56:	71fb      	strb	r3, [r7, #7]
 800cc58:	460b      	mov	r3, r1
 800cc5a:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800cc5c:	683b      	ldr	r3, [r7, #0]
 800cc5e:	8919      	ldrh	r1, [r3, #8]
 800cc60:	88ba      	ldrh	r2, [r7, #4]
 800cc62:	79fb      	ldrb	r3, [r7, #7]
 800cc64:	4618      	mov	r0, r3
 800cc66:	f7ff faa1 	bl	800c1ac <pbuf_alloc>
 800cc6a:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800cc6c:	68fb      	ldr	r3, [r7, #12]
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	d101      	bne.n	800cc76 <pbuf_clone+0x2a>
    return NULL;
 800cc72:	2300      	movs	r3, #0
 800cc74:	e011      	b.n	800cc9a <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800cc76:	6839      	ldr	r1, [r7, #0]
 800cc78:	68f8      	ldr	r0, [r7, #12]
 800cc7a:	f7ff fea3 	bl	800c9c4 <pbuf_copy>
 800cc7e:	4603      	mov	r3, r0
 800cc80:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800cc82:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	d006      	beq.n	800cc98 <pbuf_clone+0x4c>
 800cc8a:	4b06      	ldr	r3, [pc, #24]	; (800cca4 <pbuf_clone+0x58>)
 800cc8c:	f240 5224 	movw	r2, #1316	; 0x524
 800cc90:	4905      	ldr	r1, [pc, #20]	; (800cca8 <pbuf_clone+0x5c>)
 800cc92:	4806      	ldr	r0, [pc, #24]	; (800ccac <pbuf_clone+0x60>)
 800cc94:	f00a fdec 	bl	8017870 <iprintf>
  return q;
 800cc98:	68fb      	ldr	r3, [r7, #12]
}
 800cc9a:	4618      	mov	r0, r3
 800cc9c:	3710      	adds	r7, #16
 800cc9e:	46bd      	mov	sp, r7
 800cca0:	bd80      	pop	{r7, pc}
 800cca2:	bf00      	nop
 800cca4:	0801d20c 	.word	0x0801d20c
 800cca8:	0801d680 	.word	0x0801d680
 800ccac:	0801d26c 	.word	0x0801d26c

0800ccb0 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800ccb0:	b580      	push	{r7, lr}
 800ccb2:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800ccb4:	f00a fdf4 	bl	80178a0 <rand>
 800ccb8:	4603      	mov	r3, r0
 800ccba:	b29b      	uxth	r3, r3
 800ccbc:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800ccc0:	b29b      	uxth	r3, r3
 800ccc2:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800ccc6:	b29a      	uxth	r2, r3
 800ccc8:	4b01      	ldr	r3, [pc, #4]	; (800ccd0 <tcp_init+0x20>)
 800ccca:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800cccc:	bf00      	nop
 800ccce:	bd80      	pop	{r7, pc}
 800ccd0:	20000066 	.word	0x20000066

0800ccd4 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800ccd4:	b580      	push	{r7, lr}
 800ccd6:	b082      	sub	sp, #8
 800ccd8:	af00      	add	r7, sp, #0
 800ccda:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	7d1b      	ldrb	r3, [r3, #20]
 800cce0:	2b01      	cmp	r3, #1
 800cce2:	d105      	bne.n	800ccf0 <tcp_free+0x1c>
 800cce4:	4b06      	ldr	r3, [pc, #24]	; (800cd00 <tcp_free+0x2c>)
 800cce6:	22d4      	movs	r2, #212	; 0xd4
 800cce8:	4906      	ldr	r1, [pc, #24]	; (800cd04 <tcp_free+0x30>)
 800ccea:	4807      	ldr	r0, [pc, #28]	; (800cd08 <tcp_free+0x34>)
 800ccec:	f00a fdc0 	bl	8017870 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800ccf0:	6879      	ldr	r1, [r7, #4]
 800ccf2:	2001      	movs	r0, #1
 800ccf4:	f7fe ff44 	bl	800bb80 <memp_free>
}
 800ccf8:	bf00      	nop
 800ccfa:	3708      	adds	r7, #8
 800ccfc:	46bd      	mov	sp, r7
 800ccfe:	bd80      	pop	{r7, pc}
 800cd00:	0801d70c 	.word	0x0801d70c
 800cd04:	0801d73c 	.word	0x0801d73c
 800cd08:	0801d750 	.word	0x0801d750

0800cd0c <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800cd0c:	b580      	push	{r7, lr}
 800cd0e:	b082      	sub	sp, #8
 800cd10:	af00      	add	r7, sp, #0
 800cd12:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	7d1b      	ldrb	r3, [r3, #20]
 800cd18:	2b01      	cmp	r3, #1
 800cd1a:	d105      	bne.n	800cd28 <tcp_free_listen+0x1c>
 800cd1c:	4b06      	ldr	r3, [pc, #24]	; (800cd38 <tcp_free_listen+0x2c>)
 800cd1e:	22df      	movs	r2, #223	; 0xdf
 800cd20:	4906      	ldr	r1, [pc, #24]	; (800cd3c <tcp_free_listen+0x30>)
 800cd22:	4807      	ldr	r0, [pc, #28]	; (800cd40 <tcp_free_listen+0x34>)
 800cd24:	f00a fda4 	bl	8017870 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800cd28:	6879      	ldr	r1, [r7, #4]
 800cd2a:	2002      	movs	r0, #2
 800cd2c:	f7fe ff28 	bl	800bb80 <memp_free>
}
 800cd30:	bf00      	nop
 800cd32:	3708      	adds	r7, #8
 800cd34:	46bd      	mov	sp, r7
 800cd36:	bd80      	pop	{r7, pc}
 800cd38:	0801d70c 	.word	0x0801d70c
 800cd3c:	0801d778 	.word	0x0801d778
 800cd40:	0801d750 	.word	0x0801d750

0800cd44 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800cd44:	b580      	push	{r7, lr}
 800cd46:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800cd48:	f000 fea2 	bl	800da90 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800cd4c:	4b07      	ldr	r3, [pc, #28]	; (800cd6c <tcp_tmr+0x28>)
 800cd4e:	781b      	ldrb	r3, [r3, #0]
 800cd50:	3301      	adds	r3, #1
 800cd52:	b2da      	uxtb	r2, r3
 800cd54:	4b05      	ldr	r3, [pc, #20]	; (800cd6c <tcp_tmr+0x28>)
 800cd56:	701a      	strb	r2, [r3, #0]
 800cd58:	4b04      	ldr	r3, [pc, #16]	; (800cd6c <tcp_tmr+0x28>)
 800cd5a:	781b      	ldrb	r3, [r3, #0]
 800cd5c:	f003 0301 	and.w	r3, r3, #1
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	d001      	beq.n	800cd68 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800cd64:	f000 fb54 	bl	800d410 <tcp_slowtmr>
  }
}
 800cd68:	bf00      	nop
 800cd6a:	bd80      	pop	{r7, pc}
 800cd6c:	20000455 	.word	0x20000455

0800cd70 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800cd70:	b580      	push	{r7, lr}
 800cd72:	b084      	sub	sp, #16
 800cd74:	af00      	add	r7, sp, #0
 800cd76:	6078      	str	r0, [r7, #4]
 800cd78:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800cd7a:	683b      	ldr	r3, [r7, #0]
 800cd7c:	2b00      	cmp	r3, #0
 800cd7e:	d105      	bne.n	800cd8c <tcp_remove_listener+0x1c>
 800cd80:	4b0d      	ldr	r3, [pc, #52]	; (800cdb8 <tcp_remove_listener+0x48>)
 800cd82:	22ff      	movs	r2, #255	; 0xff
 800cd84:	490d      	ldr	r1, [pc, #52]	; (800cdbc <tcp_remove_listener+0x4c>)
 800cd86:	480e      	ldr	r0, [pc, #56]	; (800cdc0 <tcp_remove_listener+0x50>)
 800cd88:	f00a fd72 	bl	8017870 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	60fb      	str	r3, [r7, #12]
 800cd90:	e00a      	b.n	800cda8 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800cd92:	68fb      	ldr	r3, [r7, #12]
 800cd94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cd96:	683a      	ldr	r2, [r7, #0]
 800cd98:	429a      	cmp	r2, r3
 800cd9a:	d102      	bne.n	800cda2 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800cd9c:	68fb      	ldr	r3, [r7, #12]
 800cd9e:	2200      	movs	r2, #0
 800cda0:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800cda2:	68fb      	ldr	r3, [r7, #12]
 800cda4:	68db      	ldr	r3, [r3, #12]
 800cda6:	60fb      	str	r3, [r7, #12]
 800cda8:	68fb      	ldr	r3, [r7, #12]
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	d1f1      	bne.n	800cd92 <tcp_remove_listener+0x22>
    }
  }
}
 800cdae:	bf00      	nop
 800cdb0:	bf00      	nop
 800cdb2:	3710      	adds	r7, #16
 800cdb4:	46bd      	mov	sp, r7
 800cdb6:	bd80      	pop	{r7, pc}
 800cdb8:	0801d70c 	.word	0x0801d70c
 800cdbc:	0801d794 	.word	0x0801d794
 800cdc0:	0801d750 	.word	0x0801d750

0800cdc4 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800cdc4:	b580      	push	{r7, lr}
 800cdc6:	b084      	sub	sp, #16
 800cdc8:	af00      	add	r7, sp, #0
 800cdca:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	d106      	bne.n	800cde0 <tcp_listen_closed+0x1c>
 800cdd2:	4b14      	ldr	r3, [pc, #80]	; (800ce24 <tcp_listen_closed+0x60>)
 800cdd4:	f240 1211 	movw	r2, #273	; 0x111
 800cdd8:	4913      	ldr	r1, [pc, #76]	; (800ce28 <tcp_listen_closed+0x64>)
 800cdda:	4814      	ldr	r0, [pc, #80]	; (800ce2c <tcp_listen_closed+0x68>)
 800cddc:	f00a fd48 	bl	8017870 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	7d1b      	ldrb	r3, [r3, #20]
 800cde4:	2b01      	cmp	r3, #1
 800cde6:	d006      	beq.n	800cdf6 <tcp_listen_closed+0x32>
 800cde8:	4b0e      	ldr	r3, [pc, #56]	; (800ce24 <tcp_listen_closed+0x60>)
 800cdea:	f44f 7289 	mov.w	r2, #274	; 0x112
 800cdee:	4910      	ldr	r1, [pc, #64]	; (800ce30 <tcp_listen_closed+0x6c>)
 800cdf0:	480e      	ldr	r0, [pc, #56]	; (800ce2c <tcp_listen_closed+0x68>)
 800cdf2:	f00a fd3d 	bl	8017870 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800cdf6:	2301      	movs	r3, #1
 800cdf8:	60fb      	str	r3, [r7, #12]
 800cdfa:	e00b      	b.n	800ce14 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800cdfc:	4a0d      	ldr	r2, [pc, #52]	; (800ce34 <tcp_listen_closed+0x70>)
 800cdfe:	68fb      	ldr	r3, [r7, #12]
 800ce00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ce04:	681b      	ldr	r3, [r3, #0]
 800ce06:	6879      	ldr	r1, [r7, #4]
 800ce08:	4618      	mov	r0, r3
 800ce0a:	f7ff ffb1 	bl	800cd70 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800ce0e:	68fb      	ldr	r3, [r7, #12]
 800ce10:	3301      	adds	r3, #1
 800ce12:	60fb      	str	r3, [r7, #12]
 800ce14:	68fb      	ldr	r3, [r7, #12]
 800ce16:	2b03      	cmp	r3, #3
 800ce18:	d9f0      	bls.n	800cdfc <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800ce1a:	bf00      	nop
 800ce1c:	bf00      	nop
 800ce1e:	3710      	adds	r7, #16
 800ce20:	46bd      	mov	sp, r7
 800ce22:	bd80      	pop	{r7, pc}
 800ce24:	0801d70c 	.word	0x0801d70c
 800ce28:	0801d7bc 	.word	0x0801d7bc
 800ce2c:	0801d750 	.word	0x0801d750
 800ce30:	0801d7c8 	.word	0x0801d7c8
 800ce34:	0801fa90 	.word	0x0801fa90

0800ce38 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800ce38:	b5b0      	push	{r4, r5, r7, lr}
 800ce3a:	b088      	sub	sp, #32
 800ce3c:	af04      	add	r7, sp, #16
 800ce3e:	6078      	str	r0, [r7, #4]
 800ce40:	460b      	mov	r3, r1
 800ce42:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	d106      	bne.n	800ce58 <tcp_close_shutdown+0x20>
 800ce4a:	4b63      	ldr	r3, [pc, #396]	; (800cfd8 <tcp_close_shutdown+0x1a0>)
 800ce4c:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800ce50:	4962      	ldr	r1, [pc, #392]	; (800cfdc <tcp_close_shutdown+0x1a4>)
 800ce52:	4863      	ldr	r0, [pc, #396]	; (800cfe0 <tcp_close_shutdown+0x1a8>)
 800ce54:	f00a fd0c 	bl	8017870 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800ce58:	78fb      	ldrb	r3, [r7, #3]
 800ce5a:	2b00      	cmp	r3, #0
 800ce5c:	d066      	beq.n	800cf2c <tcp_close_shutdown+0xf4>
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	7d1b      	ldrb	r3, [r3, #20]
 800ce62:	2b04      	cmp	r3, #4
 800ce64:	d003      	beq.n	800ce6e <tcp_close_shutdown+0x36>
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	7d1b      	ldrb	r3, [r3, #20]
 800ce6a:	2b07      	cmp	r3, #7
 800ce6c:	d15e      	bne.n	800cf2c <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ce72:	2b00      	cmp	r3, #0
 800ce74:	d104      	bne.n	800ce80 <tcp_close_shutdown+0x48>
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ce7a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ce7e:	d055      	beq.n	800cf2c <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	8b5b      	ldrh	r3, [r3, #26]
 800ce84:	f003 0310 	and.w	r3, r3, #16
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	d106      	bne.n	800ce9a <tcp_close_shutdown+0x62>
 800ce8c:	4b52      	ldr	r3, [pc, #328]	; (800cfd8 <tcp_close_shutdown+0x1a0>)
 800ce8e:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800ce92:	4954      	ldr	r1, [pc, #336]	; (800cfe4 <tcp_close_shutdown+0x1ac>)
 800ce94:	4852      	ldr	r0, [pc, #328]	; (800cfe0 <tcp_close_shutdown+0x1a8>)
 800ce96:	f00a fceb 	bl	8017870 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800cea2:	687d      	ldr	r5, [r7, #4]
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	3304      	adds	r3, #4
 800cea8:	687a      	ldr	r2, [r7, #4]
 800ceaa:	8ad2      	ldrh	r2, [r2, #22]
 800ceac:	6879      	ldr	r1, [r7, #4]
 800ceae:	8b09      	ldrh	r1, [r1, #24]
 800ceb0:	9102      	str	r1, [sp, #8]
 800ceb2:	9201      	str	r2, [sp, #4]
 800ceb4:	9300      	str	r3, [sp, #0]
 800ceb6:	462b      	mov	r3, r5
 800ceb8:	4622      	mov	r2, r4
 800ceba:	4601      	mov	r1, r0
 800cebc:	6878      	ldr	r0, [r7, #4]
 800cebe:	f004 fe8d 	bl	8011bdc <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800cec2:	6878      	ldr	r0, [r7, #4]
 800cec4:	f001 f8c6 	bl	800e054 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800cec8:	4b47      	ldr	r3, [pc, #284]	; (800cfe8 <tcp_close_shutdown+0x1b0>)
 800ceca:	681b      	ldr	r3, [r3, #0]
 800cecc:	687a      	ldr	r2, [r7, #4]
 800cece:	429a      	cmp	r2, r3
 800ced0:	d105      	bne.n	800cede <tcp_close_shutdown+0xa6>
 800ced2:	4b45      	ldr	r3, [pc, #276]	; (800cfe8 <tcp_close_shutdown+0x1b0>)
 800ced4:	681b      	ldr	r3, [r3, #0]
 800ced6:	68db      	ldr	r3, [r3, #12]
 800ced8:	4a43      	ldr	r2, [pc, #268]	; (800cfe8 <tcp_close_shutdown+0x1b0>)
 800ceda:	6013      	str	r3, [r2, #0]
 800cedc:	e013      	b.n	800cf06 <tcp_close_shutdown+0xce>
 800cede:	4b42      	ldr	r3, [pc, #264]	; (800cfe8 <tcp_close_shutdown+0x1b0>)
 800cee0:	681b      	ldr	r3, [r3, #0]
 800cee2:	60fb      	str	r3, [r7, #12]
 800cee4:	e00c      	b.n	800cf00 <tcp_close_shutdown+0xc8>
 800cee6:	68fb      	ldr	r3, [r7, #12]
 800cee8:	68db      	ldr	r3, [r3, #12]
 800ceea:	687a      	ldr	r2, [r7, #4]
 800ceec:	429a      	cmp	r2, r3
 800ceee:	d104      	bne.n	800cefa <tcp_close_shutdown+0xc2>
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	68da      	ldr	r2, [r3, #12]
 800cef4:	68fb      	ldr	r3, [r7, #12]
 800cef6:	60da      	str	r2, [r3, #12]
 800cef8:	e005      	b.n	800cf06 <tcp_close_shutdown+0xce>
 800cefa:	68fb      	ldr	r3, [r7, #12]
 800cefc:	68db      	ldr	r3, [r3, #12]
 800cefe:	60fb      	str	r3, [r7, #12]
 800cf00:	68fb      	ldr	r3, [r7, #12]
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	d1ef      	bne.n	800cee6 <tcp_close_shutdown+0xae>
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	2200      	movs	r2, #0
 800cf0a:	60da      	str	r2, [r3, #12]
 800cf0c:	4b37      	ldr	r3, [pc, #220]	; (800cfec <tcp_close_shutdown+0x1b4>)
 800cf0e:	2201      	movs	r2, #1
 800cf10:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800cf12:	4b37      	ldr	r3, [pc, #220]	; (800cff0 <tcp_close_shutdown+0x1b8>)
 800cf14:	681b      	ldr	r3, [r3, #0]
 800cf16:	687a      	ldr	r2, [r7, #4]
 800cf18:	429a      	cmp	r2, r3
 800cf1a:	d102      	bne.n	800cf22 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800cf1c:	f003 fd5a 	bl	80109d4 <tcp_trigger_input_pcb_close>
 800cf20:	e002      	b.n	800cf28 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800cf22:	6878      	ldr	r0, [r7, #4]
 800cf24:	f7ff fed6 	bl	800ccd4 <tcp_free>
      }
      return ERR_OK;
 800cf28:	2300      	movs	r3, #0
 800cf2a:	e050      	b.n	800cfce <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	7d1b      	ldrb	r3, [r3, #20]
 800cf30:	2b02      	cmp	r3, #2
 800cf32:	d03b      	beq.n	800cfac <tcp_close_shutdown+0x174>
 800cf34:	2b02      	cmp	r3, #2
 800cf36:	dc44      	bgt.n	800cfc2 <tcp_close_shutdown+0x18a>
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	d002      	beq.n	800cf42 <tcp_close_shutdown+0x10a>
 800cf3c:	2b01      	cmp	r3, #1
 800cf3e:	d02a      	beq.n	800cf96 <tcp_close_shutdown+0x15e>
 800cf40:	e03f      	b.n	800cfc2 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	8adb      	ldrh	r3, [r3, #22]
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	d021      	beq.n	800cf8e <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800cf4a:	4b2a      	ldr	r3, [pc, #168]	; (800cff4 <tcp_close_shutdown+0x1bc>)
 800cf4c:	681b      	ldr	r3, [r3, #0]
 800cf4e:	687a      	ldr	r2, [r7, #4]
 800cf50:	429a      	cmp	r2, r3
 800cf52:	d105      	bne.n	800cf60 <tcp_close_shutdown+0x128>
 800cf54:	4b27      	ldr	r3, [pc, #156]	; (800cff4 <tcp_close_shutdown+0x1bc>)
 800cf56:	681b      	ldr	r3, [r3, #0]
 800cf58:	68db      	ldr	r3, [r3, #12]
 800cf5a:	4a26      	ldr	r2, [pc, #152]	; (800cff4 <tcp_close_shutdown+0x1bc>)
 800cf5c:	6013      	str	r3, [r2, #0]
 800cf5e:	e013      	b.n	800cf88 <tcp_close_shutdown+0x150>
 800cf60:	4b24      	ldr	r3, [pc, #144]	; (800cff4 <tcp_close_shutdown+0x1bc>)
 800cf62:	681b      	ldr	r3, [r3, #0]
 800cf64:	60bb      	str	r3, [r7, #8]
 800cf66:	e00c      	b.n	800cf82 <tcp_close_shutdown+0x14a>
 800cf68:	68bb      	ldr	r3, [r7, #8]
 800cf6a:	68db      	ldr	r3, [r3, #12]
 800cf6c:	687a      	ldr	r2, [r7, #4]
 800cf6e:	429a      	cmp	r2, r3
 800cf70:	d104      	bne.n	800cf7c <tcp_close_shutdown+0x144>
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	68da      	ldr	r2, [r3, #12]
 800cf76:	68bb      	ldr	r3, [r7, #8]
 800cf78:	60da      	str	r2, [r3, #12]
 800cf7a:	e005      	b.n	800cf88 <tcp_close_shutdown+0x150>
 800cf7c:	68bb      	ldr	r3, [r7, #8]
 800cf7e:	68db      	ldr	r3, [r3, #12]
 800cf80:	60bb      	str	r3, [r7, #8]
 800cf82:	68bb      	ldr	r3, [r7, #8]
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	d1ef      	bne.n	800cf68 <tcp_close_shutdown+0x130>
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	2200      	movs	r2, #0
 800cf8c:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800cf8e:	6878      	ldr	r0, [r7, #4]
 800cf90:	f7ff fea0 	bl	800ccd4 <tcp_free>
      break;
 800cf94:	e01a      	b.n	800cfcc <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800cf96:	6878      	ldr	r0, [r7, #4]
 800cf98:	f7ff ff14 	bl	800cdc4 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800cf9c:	6879      	ldr	r1, [r7, #4]
 800cf9e:	4816      	ldr	r0, [pc, #88]	; (800cff8 <tcp_close_shutdown+0x1c0>)
 800cfa0:	f001 f8a8 	bl	800e0f4 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800cfa4:	6878      	ldr	r0, [r7, #4]
 800cfa6:	f7ff feb1 	bl	800cd0c <tcp_free_listen>
      break;
 800cfaa:	e00f      	b.n	800cfcc <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800cfac:	6879      	ldr	r1, [r7, #4]
 800cfae:	480e      	ldr	r0, [pc, #56]	; (800cfe8 <tcp_close_shutdown+0x1b0>)
 800cfb0:	f001 f8a0 	bl	800e0f4 <tcp_pcb_remove>
 800cfb4:	4b0d      	ldr	r3, [pc, #52]	; (800cfec <tcp_close_shutdown+0x1b4>)
 800cfb6:	2201      	movs	r2, #1
 800cfb8:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800cfba:	6878      	ldr	r0, [r7, #4]
 800cfbc:	f7ff fe8a 	bl	800ccd4 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800cfc0:	e004      	b.n	800cfcc <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800cfc2:	6878      	ldr	r0, [r7, #4]
 800cfc4:	f000 f81a 	bl	800cffc <tcp_close_shutdown_fin>
 800cfc8:	4603      	mov	r3, r0
 800cfca:	e000      	b.n	800cfce <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800cfcc:	2300      	movs	r3, #0
}
 800cfce:	4618      	mov	r0, r3
 800cfd0:	3710      	adds	r7, #16
 800cfd2:	46bd      	mov	sp, r7
 800cfd4:	bdb0      	pop	{r4, r5, r7, pc}
 800cfd6:	bf00      	nop
 800cfd8:	0801d70c 	.word	0x0801d70c
 800cfdc:	0801d7e0 	.word	0x0801d7e0
 800cfe0:	0801d750 	.word	0x0801d750
 800cfe4:	0801d800 	.word	0x0801d800
 800cfe8:	20006e3c 	.word	0x20006e3c
 800cfec:	20006e38 	.word	0x20006e38
 800cff0:	20006e50 	.word	0x20006e50
 800cff4:	20006e48 	.word	0x20006e48
 800cff8:	20006e44 	.word	0x20006e44

0800cffc <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800cffc:	b580      	push	{r7, lr}
 800cffe:	b084      	sub	sp, #16
 800d000:	af00      	add	r7, sp, #0
 800d002:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	2b00      	cmp	r3, #0
 800d008:	d106      	bne.n	800d018 <tcp_close_shutdown_fin+0x1c>
 800d00a:	4b2e      	ldr	r3, [pc, #184]	; (800d0c4 <tcp_close_shutdown_fin+0xc8>)
 800d00c:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800d010:	492d      	ldr	r1, [pc, #180]	; (800d0c8 <tcp_close_shutdown_fin+0xcc>)
 800d012:	482e      	ldr	r0, [pc, #184]	; (800d0cc <tcp_close_shutdown_fin+0xd0>)
 800d014:	f00a fc2c 	bl	8017870 <iprintf>

  switch (pcb->state) {
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	7d1b      	ldrb	r3, [r3, #20]
 800d01c:	2b07      	cmp	r3, #7
 800d01e:	d020      	beq.n	800d062 <tcp_close_shutdown_fin+0x66>
 800d020:	2b07      	cmp	r3, #7
 800d022:	dc2b      	bgt.n	800d07c <tcp_close_shutdown_fin+0x80>
 800d024:	2b03      	cmp	r3, #3
 800d026:	d002      	beq.n	800d02e <tcp_close_shutdown_fin+0x32>
 800d028:	2b04      	cmp	r3, #4
 800d02a:	d00d      	beq.n	800d048 <tcp_close_shutdown_fin+0x4c>
 800d02c:	e026      	b.n	800d07c <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800d02e:	6878      	ldr	r0, [r7, #4]
 800d030:	f003 fee2 	bl	8010df8 <tcp_send_fin>
 800d034:	4603      	mov	r3, r0
 800d036:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800d038:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	d11f      	bne.n	800d080 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	2205      	movs	r2, #5
 800d044:	751a      	strb	r2, [r3, #20]
      }
      break;
 800d046:	e01b      	b.n	800d080 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800d048:	6878      	ldr	r0, [r7, #4]
 800d04a:	f003 fed5 	bl	8010df8 <tcp_send_fin>
 800d04e:	4603      	mov	r3, r0
 800d050:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800d052:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d056:	2b00      	cmp	r3, #0
 800d058:	d114      	bne.n	800d084 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	2205      	movs	r2, #5
 800d05e:	751a      	strb	r2, [r3, #20]
      }
      break;
 800d060:	e010      	b.n	800d084 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800d062:	6878      	ldr	r0, [r7, #4]
 800d064:	f003 fec8 	bl	8010df8 <tcp_send_fin>
 800d068:	4603      	mov	r3, r0
 800d06a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800d06c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d070:	2b00      	cmp	r3, #0
 800d072:	d109      	bne.n	800d088 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	2209      	movs	r2, #9
 800d078:	751a      	strb	r2, [r3, #20]
      }
      break;
 800d07a:	e005      	b.n	800d088 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800d07c:	2300      	movs	r3, #0
 800d07e:	e01c      	b.n	800d0ba <tcp_close_shutdown_fin+0xbe>
      break;
 800d080:	bf00      	nop
 800d082:	e002      	b.n	800d08a <tcp_close_shutdown_fin+0x8e>
      break;
 800d084:	bf00      	nop
 800d086:	e000      	b.n	800d08a <tcp_close_shutdown_fin+0x8e>
      break;
 800d088:	bf00      	nop
  }

  if (err == ERR_OK) {
 800d08a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d08e:	2b00      	cmp	r3, #0
 800d090:	d103      	bne.n	800d09a <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800d092:	6878      	ldr	r0, [r7, #4]
 800d094:	f003 ffee 	bl	8011074 <tcp_output>
 800d098:	e00d      	b.n	800d0b6 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800d09a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d09e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d0a2:	d108      	bne.n	800d0b6 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	8b5b      	ldrh	r3, [r3, #26]
 800d0a8:	f043 0308 	orr.w	r3, r3, #8
 800d0ac:	b29a      	uxth	r2, r3
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800d0b2:	2300      	movs	r3, #0
 800d0b4:	e001      	b.n	800d0ba <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800d0b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d0ba:	4618      	mov	r0, r3
 800d0bc:	3710      	adds	r7, #16
 800d0be:	46bd      	mov	sp, r7
 800d0c0:	bd80      	pop	{r7, pc}
 800d0c2:	bf00      	nop
 800d0c4:	0801d70c 	.word	0x0801d70c
 800d0c8:	0801d7bc 	.word	0x0801d7bc
 800d0cc:	0801d750 	.word	0x0801d750

0800d0d0 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800d0d0:	b580      	push	{r7, lr}
 800d0d2:	b082      	sub	sp, #8
 800d0d4:	af00      	add	r7, sp, #0
 800d0d6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	2b00      	cmp	r3, #0
 800d0dc:	d109      	bne.n	800d0f2 <tcp_close+0x22>
 800d0de:	4b0f      	ldr	r3, [pc, #60]	; (800d11c <tcp_close+0x4c>)
 800d0e0:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800d0e4:	490e      	ldr	r1, [pc, #56]	; (800d120 <tcp_close+0x50>)
 800d0e6:	480f      	ldr	r0, [pc, #60]	; (800d124 <tcp_close+0x54>)
 800d0e8:	f00a fbc2 	bl	8017870 <iprintf>
 800d0ec:	f06f 030f 	mvn.w	r3, #15
 800d0f0:	e00f      	b.n	800d112 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	7d1b      	ldrb	r3, [r3, #20]
 800d0f6:	2b01      	cmp	r3, #1
 800d0f8:	d006      	beq.n	800d108 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	8b5b      	ldrh	r3, [r3, #26]
 800d0fe:	f043 0310 	orr.w	r3, r3, #16
 800d102:	b29a      	uxth	r2, r3
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800d108:	2101      	movs	r1, #1
 800d10a:	6878      	ldr	r0, [r7, #4]
 800d10c:	f7ff fe94 	bl	800ce38 <tcp_close_shutdown>
 800d110:	4603      	mov	r3, r0
}
 800d112:	4618      	mov	r0, r3
 800d114:	3708      	adds	r7, #8
 800d116:	46bd      	mov	sp, r7
 800d118:	bd80      	pop	{r7, pc}
 800d11a:	bf00      	nop
 800d11c:	0801d70c 	.word	0x0801d70c
 800d120:	0801d81c 	.word	0x0801d81c
 800d124:	0801d750 	.word	0x0801d750

0800d128 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800d128:	b580      	push	{r7, lr}
 800d12a:	b08e      	sub	sp, #56	; 0x38
 800d12c:	af04      	add	r7, sp, #16
 800d12e:	6078      	str	r0, [r7, #4]
 800d130:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	2b00      	cmp	r3, #0
 800d136:	d107      	bne.n	800d148 <tcp_abandon+0x20>
 800d138:	4b52      	ldr	r3, [pc, #328]	; (800d284 <tcp_abandon+0x15c>)
 800d13a:	f240 223d 	movw	r2, #573	; 0x23d
 800d13e:	4952      	ldr	r1, [pc, #328]	; (800d288 <tcp_abandon+0x160>)
 800d140:	4852      	ldr	r0, [pc, #328]	; (800d28c <tcp_abandon+0x164>)
 800d142:	f00a fb95 	bl	8017870 <iprintf>
 800d146:	e099      	b.n	800d27c <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	7d1b      	ldrb	r3, [r3, #20]
 800d14c:	2b01      	cmp	r3, #1
 800d14e:	d106      	bne.n	800d15e <tcp_abandon+0x36>
 800d150:	4b4c      	ldr	r3, [pc, #304]	; (800d284 <tcp_abandon+0x15c>)
 800d152:	f44f 7210 	mov.w	r2, #576	; 0x240
 800d156:	494e      	ldr	r1, [pc, #312]	; (800d290 <tcp_abandon+0x168>)
 800d158:	484c      	ldr	r0, [pc, #304]	; (800d28c <tcp_abandon+0x164>)
 800d15a:	f00a fb89 	bl	8017870 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	7d1b      	ldrb	r3, [r3, #20]
 800d162:	2b0a      	cmp	r3, #10
 800d164:	d107      	bne.n	800d176 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800d166:	6879      	ldr	r1, [r7, #4]
 800d168:	484a      	ldr	r0, [pc, #296]	; (800d294 <tcp_abandon+0x16c>)
 800d16a:	f000 ffc3 	bl	800e0f4 <tcp_pcb_remove>
    tcp_free(pcb);
 800d16e:	6878      	ldr	r0, [r7, #4]
 800d170:	f7ff fdb0 	bl	800ccd4 <tcp_free>
 800d174:	e082      	b.n	800d27c <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800d176:	2300      	movs	r3, #0
 800d178:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800d17a:	2300      	movs	r3, #0
 800d17c:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d182:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d188:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d190:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	691b      	ldr	r3, [r3, #16]
 800d196:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	7d1b      	ldrb	r3, [r3, #20]
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	d126      	bne.n	800d1ee <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	8adb      	ldrh	r3, [r3, #22]
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	d02e      	beq.n	800d206 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800d1a8:	4b3b      	ldr	r3, [pc, #236]	; (800d298 <tcp_abandon+0x170>)
 800d1aa:	681b      	ldr	r3, [r3, #0]
 800d1ac:	687a      	ldr	r2, [r7, #4]
 800d1ae:	429a      	cmp	r2, r3
 800d1b0:	d105      	bne.n	800d1be <tcp_abandon+0x96>
 800d1b2:	4b39      	ldr	r3, [pc, #228]	; (800d298 <tcp_abandon+0x170>)
 800d1b4:	681b      	ldr	r3, [r3, #0]
 800d1b6:	68db      	ldr	r3, [r3, #12]
 800d1b8:	4a37      	ldr	r2, [pc, #220]	; (800d298 <tcp_abandon+0x170>)
 800d1ba:	6013      	str	r3, [r2, #0]
 800d1bc:	e013      	b.n	800d1e6 <tcp_abandon+0xbe>
 800d1be:	4b36      	ldr	r3, [pc, #216]	; (800d298 <tcp_abandon+0x170>)
 800d1c0:	681b      	ldr	r3, [r3, #0]
 800d1c2:	61fb      	str	r3, [r7, #28]
 800d1c4:	e00c      	b.n	800d1e0 <tcp_abandon+0xb8>
 800d1c6:	69fb      	ldr	r3, [r7, #28]
 800d1c8:	68db      	ldr	r3, [r3, #12]
 800d1ca:	687a      	ldr	r2, [r7, #4]
 800d1cc:	429a      	cmp	r2, r3
 800d1ce:	d104      	bne.n	800d1da <tcp_abandon+0xb2>
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	68da      	ldr	r2, [r3, #12]
 800d1d4:	69fb      	ldr	r3, [r7, #28]
 800d1d6:	60da      	str	r2, [r3, #12]
 800d1d8:	e005      	b.n	800d1e6 <tcp_abandon+0xbe>
 800d1da:	69fb      	ldr	r3, [r7, #28]
 800d1dc:	68db      	ldr	r3, [r3, #12]
 800d1de:	61fb      	str	r3, [r7, #28]
 800d1e0:	69fb      	ldr	r3, [r7, #28]
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	d1ef      	bne.n	800d1c6 <tcp_abandon+0x9e>
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	2200      	movs	r2, #0
 800d1ea:	60da      	str	r2, [r3, #12]
 800d1ec:	e00b      	b.n	800d206 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800d1ee:	683b      	ldr	r3, [r7, #0]
 800d1f0:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	8adb      	ldrh	r3, [r3, #22]
 800d1f6:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800d1f8:	6879      	ldr	r1, [r7, #4]
 800d1fa:	4828      	ldr	r0, [pc, #160]	; (800d29c <tcp_abandon+0x174>)
 800d1fc:	f000 ff7a 	bl	800e0f4 <tcp_pcb_remove>
 800d200:	4b27      	ldr	r3, [pc, #156]	; (800d2a0 <tcp_abandon+0x178>)
 800d202:	2201      	movs	r2, #1
 800d204:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d20a:	2b00      	cmp	r3, #0
 800d20c:	d004      	beq.n	800d218 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d212:	4618      	mov	r0, r3
 800d214:	f000 fd1c 	bl	800dc50 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d21c:	2b00      	cmp	r3, #0
 800d21e:	d004      	beq.n	800d22a <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d224:	4618      	mov	r0, r3
 800d226:	f000 fd13 	bl	800dc50 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d22e:	2b00      	cmp	r3, #0
 800d230:	d004      	beq.n	800d23c <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d236:	4618      	mov	r0, r3
 800d238:	f000 fd0a 	bl	800dc50 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800d23c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d23e:	2b00      	cmp	r3, #0
 800d240:	d00e      	beq.n	800d260 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800d242:	6879      	ldr	r1, [r7, #4]
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	3304      	adds	r3, #4
 800d248:	687a      	ldr	r2, [r7, #4]
 800d24a:	8b12      	ldrh	r2, [r2, #24]
 800d24c:	9202      	str	r2, [sp, #8]
 800d24e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800d250:	9201      	str	r2, [sp, #4]
 800d252:	9300      	str	r3, [sp, #0]
 800d254:	460b      	mov	r3, r1
 800d256:	697a      	ldr	r2, [r7, #20]
 800d258:	69b9      	ldr	r1, [r7, #24]
 800d25a:	6878      	ldr	r0, [r7, #4]
 800d25c:	f004 fcbe 	bl	8011bdc <tcp_rst>
    }
    last_state = pcb->state;
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	7d1b      	ldrb	r3, [r3, #20]
 800d264:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800d266:	6878      	ldr	r0, [r7, #4]
 800d268:	f7ff fd34 	bl	800ccd4 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800d26c:	693b      	ldr	r3, [r7, #16]
 800d26e:	2b00      	cmp	r3, #0
 800d270:	d004      	beq.n	800d27c <tcp_abandon+0x154>
 800d272:	693b      	ldr	r3, [r7, #16]
 800d274:	f06f 010c 	mvn.w	r1, #12
 800d278:	68f8      	ldr	r0, [r7, #12]
 800d27a:	4798      	blx	r3
  }
}
 800d27c:	3728      	adds	r7, #40	; 0x28
 800d27e:	46bd      	mov	sp, r7
 800d280:	bd80      	pop	{r7, pc}
 800d282:	bf00      	nop
 800d284:	0801d70c 	.word	0x0801d70c
 800d288:	0801d850 	.word	0x0801d850
 800d28c:	0801d750 	.word	0x0801d750
 800d290:	0801d86c 	.word	0x0801d86c
 800d294:	20006e4c 	.word	0x20006e4c
 800d298:	20006e48 	.word	0x20006e48
 800d29c:	20006e3c 	.word	0x20006e3c
 800d2a0:	20006e38 	.word	0x20006e38

0800d2a4 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800d2a4:	b580      	push	{r7, lr}
 800d2a6:	b082      	sub	sp, #8
 800d2a8:	af00      	add	r7, sp, #0
 800d2aa:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800d2ac:	2101      	movs	r1, #1
 800d2ae:	6878      	ldr	r0, [r7, #4]
 800d2b0:	f7ff ff3a 	bl	800d128 <tcp_abandon>
}
 800d2b4:	bf00      	nop
 800d2b6:	3708      	adds	r7, #8
 800d2b8:	46bd      	mov	sp, r7
 800d2ba:	bd80      	pop	{r7, pc}

0800d2bc <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800d2bc:	b580      	push	{r7, lr}
 800d2be:	b084      	sub	sp, #16
 800d2c0:	af00      	add	r7, sp, #0
 800d2c2:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	2b00      	cmp	r3, #0
 800d2c8:	d106      	bne.n	800d2d8 <tcp_update_rcv_ann_wnd+0x1c>
 800d2ca:	4b25      	ldr	r3, [pc, #148]	; (800d360 <tcp_update_rcv_ann_wnd+0xa4>)
 800d2cc:	f240 32a6 	movw	r2, #934	; 0x3a6
 800d2d0:	4924      	ldr	r1, [pc, #144]	; (800d364 <tcp_update_rcv_ann_wnd+0xa8>)
 800d2d2:	4825      	ldr	r0, [pc, #148]	; (800d368 <tcp_update_rcv_ann_wnd+0xac>)
 800d2d4:	f00a facc 	bl	8017870 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2dc:	687a      	ldr	r2, [r7, #4]
 800d2de:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800d2e0:	4413      	add	r3, r2
 800d2e2:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2e8:	687a      	ldr	r2, [r7, #4]
 800d2ea:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800d2ec:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800d2f0:	bf28      	it	cs
 800d2f2:	f44f 6280 	movcs.w	r2, #1024	; 0x400
 800d2f6:	b292      	uxth	r2, r2
 800d2f8:	4413      	add	r3, r2
 800d2fa:	68fa      	ldr	r2, [r7, #12]
 800d2fc:	1ad3      	subs	r3, r2, r3
 800d2fe:	2b00      	cmp	r3, #0
 800d300:	db08      	blt.n	800d314 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d30e:	68fa      	ldr	r2, [r7, #12]
 800d310:	1ad3      	subs	r3, r2, r3
 800d312:	e020      	b.n	800d356 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d31c:	1ad3      	subs	r3, r2, r3
 800d31e:	2b00      	cmp	r3, #0
 800d320:	dd03      	ble.n	800d32a <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	2200      	movs	r2, #0
 800d326:	855a      	strh	r2, [r3, #42]	; 0x2a
 800d328:	e014      	b.n	800d354 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d332:	1ad3      	subs	r3, r2, r3
 800d334:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800d336:	68bb      	ldr	r3, [r7, #8]
 800d338:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d33c:	d306      	bcc.n	800d34c <tcp_update_rcv_ann_wnd+0x90>
 800d33e:	4b08      	ldr	r3, [pc, #32]	; (800d360 <tcp_update_rcv_ann_wnd+0xa4>)
 800d340:	f240 32b6 	movw	r2, #950	; 0x3b6
 800d344:	4909      	ldr	r1, [pc, #36]	; (800d36c <tcp_update_rcv_ann_wnd+0xb0>)
 800d346:	4808      	ldr	r0, [pc, #32]	; (800d368 <tcp_update_rcv_ann_wnd+0xac>)
 800d348:	f00a fa92 	bl	8017870 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800d34c:	68bb      	ldr	r3, [r7, #8]
 800d34e:	b29a      	uxth	r2, r3
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800d354:	2300      	movs	r3, #0
  }
}
 800d356:	4618      	mov	r0, r3
 800d358:	3710      	adds	r7, #16
 800d35a:	46bd      	mov	sp, r7
 800d35c:	bd80      	pop	{r7, pc}
 800d35e:	bf00      	nop
 800d360:	0801d70c 	.word	0x0801d70c
 800d364:	0801d968 	.word	0x0801d968
 800d368:	0801d750 	.word	0x0801d750
 800d36c:	0801d98c 	.word	0x0801d98c

0800d370 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800d370:	b580      	push	{r7, lr}
 800d372:	b084      	sub	sp, #16
 800d374:	af00      	add	r7, sp, #0
 800d376:	6078      	str	r0, [r7, #4]
 800d378:	460b      	mov	r3, r1
 800d37a:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	2b00      	cmp	r3, #0
 800d380:	d107      	bne.n	800d392 <tcp_recved+0x22>
 800d382:	4b1f      	ldr	r3, [pc, #124]	; (800d400 <tcp_recved+0x90>)
 800d384:	f240 32cf 	movw	r2, #975	; 0x3cf
 800d388:	491e      	ldr	r1, [pc, #120]	; (800d404 <tcp_recved+0x94>)
 800d38a:	481f      	ldr	r0, [pc, #124]	; (800d408 <tcp_recved+0x98>)
 800d38c:	f00a fa70 	bl	8017870 <iprintf>
 800d390:	e032      	b.n	800d3f8 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	7d1b      	ldrb	r3, [r3, #20]
 800d396:	2b01      	cmp	r3, #1
 800d398:	d106      	bne.n	800d3a8 <tcp_recved+0x38>
 800d39a:	4b19      	ldr	r3, [pc, #100]	; (800d400 <tcp_recved+0x90>)
 800d39c:	f240 32d2 	movw	r2, #978	; 0x3d2
 800d3a0:	491a      	ldr	r1, [pc, #104]	; (800d40c <tcp_recved+0x9c>)
 800d3a2:	4819      	ldr	r0, [pc, #100]	; (800d408 <tcp_recved+0x98>)
 800d3a4:	f00a fa64 	bl	8017870 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800d3ac:	887b      	ldrh	r3, [r7, #2]
 800d3ae:	4413      	add	r3, r2
 800d3b0:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800d3b2:	89fb      	ldrh	r3, [r7, #14]
 800d3b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d3b8:	d804      	bhi.n	800d3c4 <tcp_recved+0x54>
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d3be:	89fa      	ldrh	r2, [r7, #14]
 800d3c0:	429a      	cmp	r2, r3
 800d3c2:	d204      	bcs.n	800d3ce <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d3ca:	851a      	strh	r2, [r3, #40]	; 0x28
 800d3cc:	e002      	b.n	800d3d4 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	89fa      	ldrh	r2, [r7, #14]
 800d3d2:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800d3d4:	6878      	ldr	r0, [r7, #4]
 800d3d6:	f7ff ff71 	bl	800d2bc <tcp_update_rcv_ann_wnd>
 800d3da:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800d3dc:	68bb      	ldr	r3, [r7, #8]
 800d3de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d3e2:	d309      	bcc.n	800d3f8 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	8b5b      	ldrh	r3, [r3, #26]
 800d3e8:	f043 0302 	orr.w	r3, r3, #2
 800d3ec:	b29a      	uxth	r2, r3
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800d3f2:	6878      	ldr	r0, [r7, #4]
 800d3f4:	f003 fe3e 	bl	8011074 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800d3f8:	3710      	adds	r7, #16
 800d3fa:	46bd      	mov	sp, r7
 800d3fc:	bd80      	pop	{r7, pc}
 800d3fe:	bf00      	nop
 800d400:	0801d70c 	.word	0x0801d70c
 800d404:	0801d9a8 	.word	0x0801d9a8
 800d408:	0801d750 	.word	0x0801d750
 800d40c:	0801d9c0 	.word	0x0801d9c0

0800d410 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800d410:	b5b0      	push	{r4, r5, r7, lr}
 800d412:	b090      	sub	sp, #64	; 0x40
 800d414:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800d416:	2300      	movs	r3, #0
 800d418:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800d41c:	4b94      	ldr	r3, [pc, #592]	; (800d670 <tcp_slowtmr+0x260>)
 800d41e:	681b      	ldr	r3, [r3, #0]
 800d420:	3301      	adds	r3, #1
 800d422:	4a93      	ldr	r2, [pc, #588]	; (800d670 <tcp_slowtmr+0x260>)
 800d424:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800d426:	4b93      	ldr	r3, [pc, #588]	; (800d674 <tcp_slowtmr+0x264>)
 800d428:	781b      	ldrb	r3, [r3, #0]
 800d42a:	3301      	adds	r3, #1
 800d42c:	b2da      	uxtb	r2, r3
 800d42e:	4b91      	ldr	r3, [pc, #580]	; (800d674 <tcp_slowtmr+0x264>)
 800d430:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800d432:	2300      	movs	r3, #0
 800d434:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800d436:	4b90      	ldr	r3, [pc, #576]	; (800d678 <tcp_slowtmr+0x268>)
 800d438:	681b      	ldr	r3, [r3, #0]
 800d43a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800d43c:	e29f      	b.n	800d97e <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800d43e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d440:	7d1b      	ldrb	r3, [r3, #20]
 800d442:	2b00      	cmp	r3, #0
 800d444:	d106      	bne.n	800d454 <tcp_slowtmr+0x44>
 800d446:	4b8d      	ldr	r3, [pc, #564]	; (800d67c <tcp_slowtmr+0x26c>)
 800d448:	f240 42be 	movw	r2, #1214	; 0x4be
 800d44c:	498c      	ldr	r1, [pc, #560]	; (800d680 <tcp_slowtmr+0x270>)
 800d44e:	488d      	ldr	r0, [pc, #564]	; (800d684 <tcp_slowtmr+0x274>)
 800d450:	f00a fa0e 	bl	8017870 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800d454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d456:	7d1b      	ldrb	r3, [r3, #20]
 800d458:	2b01      	cmp	r3, #1
 800d45a:	d106      	bne.n	800d46a <tcp_slowtmr+0x5a>
 800d45c:	4b87      	ldr	r3, [pc, #540]	; (800d67c <tcp_slowtmr+0x26c>)
 800d45e:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800d462:	4989      	ldr	r1, [pc, #548]	; (800d688 <tcp_slowtmr+0x278>)
 800d464:	4887      	ldr	r0, [pc, #540]	; (800d684 <tcp_slowtmr+0x274>)
 800d466:	f00a fa03 	bl	8017870 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800d46a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d46c:	7d1b      	ldrb	r3, [r3, #20]
 800d46e:	2b0a      	cmp	r3, #10
 800d470:	d106      	bne.n	800d480 <tcp_slowtmr+0x70>
 800d472:	4b82      	ldr	r3, [pc, #520]	; (800d67c <tcp_slowtmr+0x26c>)
 800d474:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800d478:	4984      	ldr	r1, [pc, #528]	; (800d68c <tcp_slowtmr+0x27c>)
 800d47a:	4882      	ldr	r0, [pc, #520]	; (800d684 <tcp_slowtmr+0x274>)
 800d47c:	f00a f9f8 	bl	8017870 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800d480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d482:	7f9a      	ldrb	r2, [r3, #30]
 800d484:	4b7b      	ldr	r3, [pc, #492]	; (800d674 <tcp_slowtmr+0x264>)
 800d486:	781b      	ldrb	r3, [r3, #0]
 800d488:	429a      	cmp	r2, r3
 800d48a:	d105      	bne.n	800d498 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800d48c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d48e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800d490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d492:	68db      	ldr	r3, [r3, #12]
 800d494:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800d496:	e272      	b.n	800d97e <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 800d498:	4b76      	ldr	r3, [pc, #472]	; (800d674 <tcp_slowtmr+0x264>)
 800d49a:	781a      	ldrb	r2, [r3, #0]
 800d49c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d49e:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800d4a0:	2300      	movs	r3, #0
 800d4a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800d4a6:	2300      	movs	r3, #0
 800d4a8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800d4ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4ae:	7d1b      	ldrb	r3, [r3, #20]
 800d4b0:	2b02      	cmp	r3, #2
 800d4b2:	d10a      	bne.n	800d4ca <tcp_slowtmr+0xba>
 800d4b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4b6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d4ba:	2b05      	cmp	r3, #5
 800d4bc:	d905      	bls.n	800d4ca <tcp_slowtmr+0xba>
      ++pcb_remove;
 800d4be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d4c2:	3301      	adds	r3, #1
 800d4c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d4c8:	e11e      	b.n	800d708 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800d4ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4cc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d4d0:	2b0b      	cmp	r3, #11
 800d4d2:	d905      	bls.n	800d4e0 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800d4d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d4d8:	3301      	adds	r3, #1
 800d4da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d4de:	e113      	b.n	800d708 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800d4e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4e2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	d075      	beq.n	800d5d6 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800d4ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	d006      	beq.n	800d500 <tcp_slowtmr+0xf0>
 800d4f2:	4b62      	ldr	r3, [pc, #392]	; (800d67c <tcp_slowtmr+0x26c>)
 800d4f4:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800d4f8:	4965      	ldr	r1, [pc, #404]	; (800d690 <tcp_slowtmr+0x280>)
 800d4fa:	4862      	ldr	r0, [pc, #392]	; (800d684 <tcp_slowtmr+0x274>)
 800d4fc:	f00a f9b8 	bl	8017870 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800d500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d502:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d504:	2b00      	cmp	r3, #0
 800d506:	d106      	bne.n	800d516 <tcp_slowtmr+0x106>
 800d508:	4b5c      	ldr	r3, [pc, #368]	; (800d67c <tcp_slowtmr+0x26c>)
 800d50a:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800d50e:	4961      	ldr	r1, [pc, #388]	; (800d694 <tcp_slowtmr+0x284>)
 800d510:	485c      	ldr	r0, [pc, #368]	; (800d684 <tcp_slowtmr+0x274>)
 800d512:	f00a f9ad 	bl	8017870 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800d516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d518:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800d51c:	2b0b      	cmp	r3, #11
 800d51e:	d905      	bls.n	800d52c <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800d520:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d524:	3301      	adds	r3, #1
 800d526:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d52a:	e0ed      	b.n	800d708 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800d52c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d52e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800d532:	3b01      	subs	r3, #1
 800d534:	4a58      	ldr	r2, [pc, #352]	; (800d698 <tcp_slowtmr+0x288>)
 800d536:	5cd3      	ldrb	r3, [r2, r3]
 800d538:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800d53a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d53c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800d540:	7c7a      	ldrb	r2, [r7, #17]
 800d542:	429a      	cmp	r2, r3
 800d544:	d907      	bls.n	800d556 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800d546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d548:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800d54c:	3301      	adds	r3, #1
 800d54e:	b2da      	uxtb	r2, r3
 800d550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d552:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800d556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d558:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800d55c:	7c7a      	ldrb	r2, [r7, #17]
 800d55e:	429a      	cmp	r2, r3
 800d560:	f200 80d2 	bhi.w	800d708 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800d564:	2301      	movs	r3, #1
 800d566:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800d568:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d56a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d56e:	2b00      	cmp	r3, #0
 800d570:	d108      	bne.n	800d584 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800d572:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d574:	f004 fc24 	bl	8011dc0 <tcp_zero_window_probe>
 800d578:	4603      	mov	r3, r0
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	d014      	beq.n	800d5a8 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800d57e:	2300      	movs	r3, #0
 800d580:	623b      	str	r3, [r7, #32]
 800d582:	e011      	b.n	800d5a8 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800d584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d586:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d58a:	4619      	mov	r1, r3
 800d58c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d58e:	f003 faeb 	bl	8010b68 <tcp_split_unsent_seg>
 800d592:	4603      	mov	r3, r0
 800d594:	2b00      	cmp	r3, #0
 800d596:	d107      	bne.n	800d5a8 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800d598:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d59a:	f003 fd6b 	bl	8011074 <tcp_output>
 800d59e:	4603      	mov	r3, r0
 800d5a0:	2b00      	cmp	r3, #0
 800d5a2:	d101      	bne.n	800d5a8 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800d5a4:	2300      	movs	r3, #0
 800d5a6:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800d5a8:	6a3b      	ldr	r3, [r7, #32]
 800d5aa:	2b00      	cmp	r3, #0
 800d5ac:	f000 80ac 	beq.w	800d708 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800d5b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5b2:	2200      	movs	r2, #0
 800d5b4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800d5b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5ba:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800d5be:	2b06      	cmp	r3, #6
 800d5c0:	f200 80a2 	bhi.w	800d708 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800d5c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5c6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800d5ca:	3301      	adds	r3, #1
 800d5cc:	b2da      	uxtb	r2, r3
 800d5ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5d0:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800d5d4:	e098      	b.n	800d708 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800d5d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5d8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800d5dc:	2b00      	cmp	r3, #0
 800d5de:	db0f      	blt.n	800d600 <tcp_slowtmr+0x1f0>
 800d5e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5e2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800d5e6:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800d5ea:	4293      	cmp	r3, r2
 800d5ec:	d008      	beq.n	800d600 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800d5ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5f0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800d5f4:	b29b      	uxth	r3, r3
 800d5f6:	3301      	adds	r3, #1
 800d5f8:	b29b      	uxth	r3, r3
 800d5fa:	b21a      	sxth	r2, r3
 800d5fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5fe:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800d600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d602:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800d606:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d608:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800d60c:	429a      	cmp	r2, r3
 800d60e:	db7b      	blt.n	800d708 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800d610:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d612:	f004 f821 	bl	8011658 <tcp_rexmit_rto_prepare>
 800d616:	4603      	mov	r3, r0
 800d618:	2b00      	cmp	r3, #0
 800d61a:	d007      	beq.n	800d62c <tcp_slowtmr+0x21c>
 800d61c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d61e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d620:	2b00      	cmp	r3, #0
 800d622:	d171      	bne.n	800d708 <tcp_slowtmr+0x2f8>
 800d624:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d626:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d628:	2b00      	cmp	r3, #0
 800d62a:	d06d      	beq.n	800d708 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800d62c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d62e:	7d1b      	ldrb	r3, [r3, #20]
 800d630:	2b02      	cmp	r3, #2
 800d632:	d03a      	beq.n	800d6aa <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800d634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d636:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d63a:	2b0c      	cmp	r3, #12
 800d63c:	bf28      	it	cs
 800d63e:	230c      	movcs	r3, #12
 800d640:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800d642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d644:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800d648:	10db      	asrs	r3, r3, #3
 800d64a:	b21b      	sxth	r3, r3
 800d64c:	461a      	mov	r2, r3
 800d64e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d650:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800d654:	4413      	add	r3, r2
 800d656:	7efa      	ldrb	r2, [r7, #27]
 800d658:	4910      	ldr	r1, [pc, #64]	; (800d69c <tcp_slowtmr+0x28c>)
 800d65a:	5c8a      	ldrb	r2, [r1, r2]
 800d65c:	4093      	lsls	r3, r2
 800d65e:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800d660:	697b      	ldr	r3, [r7, #20]
 800d662:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800d666:	4293      	cmp	r3, r2
 800d668:	dc1a      	bgt.n	800d6a0 <tcp_slowtmr+0x290>
 800d66a:	697b      	ldr	r3, [r7, #20]
 800d66c:	b21a      	sxth	r2, r3
 800d66e:	e019      	b.n	800d6a4 <tcp_slowtmr+0x294>
 800d670:	20006e40 	.word	0x20006e40
 800d674:	20000456 	.word	0x20000456
 800d678:	20006e3c 	.word	0x20006e3c
 800d67c:	0801d70c 	.word	0x0801d70c
 800d680:	0801da50 	.word	0x0801da50
 800d684:	0801d750 	.word	0x0801d750
 800d688:	0801da7c 	.word	0x0801da7c
 800d68c:	0801daa8 	.word	0x0801daa8
 800d690:	0801dad8 	.word	0x0801dad8
 800d694:	0801db0c 	.word	0x0801db0c
 800d698:	0801fa88 	.word	0x0801fa88
 800d69c:	0801fa78 	.word	0x0801fa78
 800d6a0:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800d6a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6a6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800d6aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6ac:	2200      	movs	r2, #0
 800d6ae:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800d6b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6b2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800d6b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6b8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800d6bc:	4293      	cmp	r3, r2
 800d6be:	bf28      	it	cs
 800d6c0:	4613      	movcs	r3, r2
 800d6c2:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800d6c4:	8a7b      	ldrh	r3, [r7, #18]
 800d6c6:	085b      	lsrs	r3, r3, #1
 800d6c8:	b29a      	uxth	r2, r3
 800d6ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6cc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800d6d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6d2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800d6d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6d8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d6da:	005b      	lsls	r3, r3, #1
 800d6dc:	b29b      	uxth	r3, r3
 800d6de:	429a      	cmp	r2, r3
 800d6e0:	d206      	bcs.n	800d6f0 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800d6e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6e4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d6e6:	005b      	lsls	r3, r3, #1
 800d6e8:	b29a      	uxth	r2, r3
 800d6ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6ec:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800d6f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6f2:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800d6f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6f6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800d6fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6fc:	2200      	movs	r2, #0
 800d6fe:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800d702:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d704:	f004 f818 	bl	8011738 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800d708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d70a:	7d1b      	ldrb	r3, [r3, #20]
 800d70c:	2b06      	cmp	r3, #6
 800d70e:	d111      	bne.n	800d734 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800d710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d712:	8b5b      	ldrh	r3, [r3, #26]
 800d714:	f003 0310 	and.w	r3, r3, #16
 800d718:	2b00      	cmp	r3, #0
 800d71a:	d00b      	beq.n	800d734 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d71c:	4b9d      	ldr	r3, [pc, #628]	; (800d994 <tcp_slowtmr+0x584>)
 800d71e:	681a      	ldr	r2, [r3, #0]
 800d720:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d722:	6a1b      	ldr	r3, [r3, #32]
 800d724:	1ad3      	subs	r3, r2, r3
 800d726:	2b28      	cmp	r3, #40	; 0x28
 800d728:	d904      	bls.n	800d734 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800d72a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d72e:	3301      	adds	r3, #1
 800d730:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800d734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d736:	7a5b      	ldrb	r3, [r3, #9]
 800d738:	f003 0308 	and.w	r3, r3, #8
 800d73c:	2b00      	cmp	r3, #0
 800d73e:	d04c      	beq.n	800d7da <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 800d740:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d742:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800d744:	2b04      	cmp	r3, #4
 800d746:	d003      	beq.n	800d750 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800d748:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d74a:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800d74c:	2b07      	cmp	r3, #7
 800d74e:	d144      	bne.n	800d7da <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d750:	4b90      	ldr	r3, [pc, #576]	; (800d994 <tcp_slowtmr+0x584>)
 800d752:	681a      	ldr	r2, [r3, #0]
 800d754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d756:	6a1b      	ldr	r3, [r3, #32]
 800d758:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800d75a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d75c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d760:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 800d764:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 800d768:	498b      	ldr	r1, [pc, #556]	; (800d998 <tcp_slowtmr+0x588>)
 800d76a:	fba1 1303 	umull	r1, r3, r1, r3
 800d76e:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d770:	429a      	cmp	r2, r3
 800d772:	d90a      	bls.n	800d78a <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800d774:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d778:	3301      	adds	r3, #1
 800d77a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800d77e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d782:	3301      	adds	r3, #1
 800d784:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800d788:	e027      	b.n	800d7da <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d78a:	4b82      	ldr	r3, [pc, #520]	; (800d994 <tcp_slowtmr+0x584>)
 800d78c:	681a      	ldr	r2, [r3, #0]
 800d78e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d790:	6a1b      	ldr	r3, [r3, #32]
 800d792:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800d794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d796:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800d79a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d79c:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800d7a0:	4618      	mov	r0, r3
 800d7a2:	4b7e      	ldr	r3, [pc, #504]	; (800d99c <tcp_slowtmr+0x58c>)
 800d7a4:	fb03 f300 	mul.w	r3, r3, r0
 800d7a8:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800d7aa:	497b      	ldr	r1, [pc, #492]	; (800d998 <tcp_slowtmr+0x588>)
 800d7ac:	fba1 1303 	umull	r1, r3, r1, r3
 800d7b0:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d7b2:	429a      	cmp	r2, r3
 800d7b4:	d911      	bls.n	800d7da <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 800d7b6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d7b8:	f004 fac2 	bl	8011d40 <tcp_keepalive>
 800d7bc:	4603      	mov	r3, r0
 800d7be:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800d7c2:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800d7c6:	2b00      	cmp	r3, #0
 800d7c8:	d107      	bne.n	800d7da <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 800d7ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7cc:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800d7d0:	3301      	adds	r3, #1
 800d7d2:	b2da      	uxtb	r2, r3
 800d7d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7d6:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800d7da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d7de:	2b00      	cmp	r3, #0
 800d7e0:	d011      	beq.n	800d806 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800d7e2:	4b6c      	ldr	r3, [pc, #432]	; (800d994 <tcp_slowtmr+0x584>)
 800d7e4:	681a      	ldr	r2, [r3, #0]
 800d7e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7e8:	6a1b      	ldr	r3, [r3, #32]
 800d7ea:	1ad2      	subs	r2, r2, r3
 800d7ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7ee:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800d7f2:	4619      	mov	r1, r3
 800d7f4:	460b      	mov	r3, r1
 800d7f6:	005b      	lsls	r3, r3, #1
 800d7f8:	440b      	add	r3, r1
 800d7fa:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800d7fc:	429a      	cmp	r2, r3
 800d7fe:	d302      	bcc.n	800d806 <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800d800:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d802:	f000 fddb 	bl	800e3bc <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800d806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d808:	7d1b      	ldrb	r3, [r3, #20]
 800d80a:	2b03      	cmp	r3, #3
 800d80c:	d10b      	bne.n	800d826 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d80e:	4b61      	ldr	r3, [pc, #388]	; (800d994 <tcp_slowtmr+0x584>)
 800d810:	681a      	ldr	r2, [r3, #0]
 800d812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d814:	6a1b      	ldr	r3, [r3, #32]
 800d816:	1ad3      	subs	r3, r2, r3
 800d818:	2b28      	cmp	r3, #40	; 0x28
 800d81a:	d904      	bls.n	800d826 <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800d81c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d820:	3301      	adds	r3, #1
 800d822:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800d826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d828:	7d1b      	ldrb	r3, [r3, #20]
 800d82a:	2b09      	cmp	r3, #9
 800d82c:	d10b      	bne.n	800d846 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800d82e:	4b59      	ldr	r3, [pc, #356]	; (800d994 <tcp_slowtmr+0x584>)
 800d830:	681a      	ldr	r2, [r3, #0]
 800d832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d834:	6a1b      	ldr	r3, [r3, #32]
 800d836:	1ad3      	subs	r3, r2, r3
 800d838:	2bf0      	cmp	r3, #240	; 0xf0
 800d83a:	d904      	bls.n	800d846 <tcp_slowtmr+0x436>
        ++pcb_remove;
 800d83c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d840:	3301      	adds	r3, #1
 800d842:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800d846:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d84a:	2b00      	cmp	r3, #0
 800d84c:	d060      	beq.n	800d910 <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800d84e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d850:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d854:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800d856:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d858:	f000 fbfc 	bl	800e054 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800d85c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d85e:	2b00      	cmp	r3, #0
 800d860:	d010      	beq.n	800d884 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800d862:	4b4f      	ldr	r3, [pc, #316]	; (800d9a0 <tcp_slowtmr+0x590>)
 800d864:	681b      	ldr	r3, [r3, #0]
 800d866:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d868:	429a      	cmp	r2, r3
 800d86a:	d106      	bne.n	800d87a <tcp_slowtmr+0x46a>
 800d86c:	4b4d      	ldr	r3, [pc, #308]	; (800d9a4 <tcp_slowtmr+0x594>)
 800d86e:	f240 526d 	movw	r2, #1389	; 0x56d
 800d872:	494d      	ldr	r1, [pc, #308]	; (800d9a8 <tcp_slowtmr+0x598>)
 800d874:	484d      	ldr	r0, [pc, #308]	; (800d9ac <tcp_slowtmr+0x59c>)
 800d876:	f009 fffb 	bl	8017870 <iprintf>
        prev->next = pcb->next;
 800d87a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d87c:	68da      	ldr	r2, [r3, #12]
 800d87e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d880:	60da      	str	r2, [r3, #12]
 800d882:	e00f      	b.n	800d8a4 <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800d884:	4b46      	ldr	r3, [pc, #280]	; (800d9a0 <tcp_slowtmr+0x590>)
 800d886:	681b      	ldr	r3, [r3, #0]
 800d888:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d88a:	429a      	cmp	r2, r3
 800d88c:	d006      	beq.n	800d89c <tcp_slowtmr+0x48c>
 800d88e:	4b45      	ldr	r3, [pc, #276]	; (800d9a4 <tcp_slowtmr+0x594>)
 800d890:	f240 5271 	movw	r2, #1393	; 0x571
 800d894:	4946      	ldr	r1, [pc, #280]	; (800d9b0 <tcp_slowtmr+0x5a0>)
 800d896:	4845      	ldr	r0, [pc, #276]	; (800d9ac <tcp_slowtmr+0x59c>)
 800d898:	f009 ffea 	bl	8017870 <iprintf>
        tcp_active_pcbs = pcb->next;
 800d89c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d89e:	68db      	ldr	r3, [r3, #12]
 800d8a0:	4a3f      	ldr	r2, [pc, #252]	; (800d9a0 <tcp_slowtmr+0x590>)
 800d8a2:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800d8a4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d8a8:	2b00      	cmp	r3, #0
 800d8aa:	d013      	beq.n	800d8d4 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800d8ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8ae:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800d8b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8b2:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800d8b4:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800d8b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8b8:	3304      	adds	r3, #4
 800d8ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d8bc:	8ad2      	ldrh	r2, [r2, #22]
 800d8be:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d8c0:	8b09      	ldrh	r1, [r1, #24]
 800d8c2:	9102      	str	r1, [sp, #8]
 800d8c4:	9201      	str	r2, [sp, #4]
 800d8c6:	9300      	str	r3, [sp, #0]
 800d8c8:	462b      	mov	r3, r5
 800d8ca:	4622      	mov	r2, r4
 800d8cc:	4601      	mov	r1, r0
 800d8ce:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d8d0:	f004 f984 	bl	8011bdc <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800d8d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8d6:	691b      	ldr	r3, [r3, #16]
 800d8d8:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800d8da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8dc:	7d1b      	ldrb	r3, [r3, #20]
 800d8de:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800d8e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8e2:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800d8e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8e6:	68db      	ldr	r3, [r3, #12]
 800d8e8:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800d8ea:	6838      	ldr	r0, [r7, #0]
 800d8ec:	f7ff f9f2 	bl	800ccd4 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800d8f0:	4b30      	ldr	r3, [pc, #192]	; (800d9b4 <tcp_slowtmr+0x5a4>)
 800d8f2:	2200      	movs	r2, #0
 800d8f4:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800d8f6:	68fb      	ldr	r3, [r7, #12]
 800d8f8:	2b00      	cmp	r3, #0
 800d8fa:	d004      	beq.n	800d906 <tcp_slowtmr+0x4f6>
 800d8fc:	68fb      	ldr	r3, [r7, #12]
 800d8fe:	f06f 010c 	mvn.w	r1, #12
 800d902:	68b8      	ldr	r0, [r7, #8]
 800d904:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800d906:	4b2b      	ldr	r3, [pc, #172]	; (800d9b4 <tcp_slowtmr+0x5a4>)
 800d908:	781b      	ldrb	r3, [r3, #0]
 800d90a:	2b00      	cmp	r3, #0
 800d90c:	d037      	beq.n	800d97e <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 800d90e:	e590      	b.n	800d432 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800d910:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d912:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800d914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d916:	68db      	ldr	r3, [r3, #12]
 800d918:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800d91a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d91c:	7f1b      	ldrb	r3, [r3, #28]
 800d91e:	3301      	adds	r3, #1
 800d920:	b2da      	uxtb	r2, r3
 800d922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d924:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800d926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d928:	7f1a      	ldrb	r2, [r3, #28]
 800d92a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d92c:	7f5b      	ldrb	r3, [r3, #29]
 800d92e:	429a      	cmp	r2, r3
 800d930:	d325      	bcc.n	800d97e <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 800d932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d934:	2200      	movs	r2, #0
 800d936:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800d938:	4b1e      	ldr	r3, [pc, #120]	; (800d9b4 <tcp_slowtmr+0x5a4>)
 800d93a:	2200      	movs	r2, #0
 800d93c:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800d93e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d940:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d944:	2b00      	cmp	r3, #0
 800d946:	d00b      	beq.n	800d960 <tcp_slowtmr+0x550>
 800d948:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d94a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d94e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d950:	6912      	ldr	r2, [r2, #16]
 800d952:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d954:	4610      	mov	r0, r2
 800d956:	4798      	blx	r3
 800d958:	4603      	mov	r3, r0
 800d95a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800d95e:	e002      	b.n	800d966 <tcp_slowtmr+0x556>
 800d960:	2300      	movs	r3, #0
 800d962:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800d966:	4b13      	ldr	r3, [pc, #76]	; (800d9b4 <tcp_slowtmr+0x5a4>)
 800d968:	781b      	ldrb	r3, [r3, #0]
 800d96a:	2b00      	cmp	r3, #0
 800d96c:	d000      	beq.n	800d970 <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 800d96e:	e560      	b.n	800d432 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800d970:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800d974:	2b00      	cmp	r3, #0
 800d976:	d102      	bne.n	800d97e <tcp_slowtmr+0x56e>
          tcp_output(prev);
 800d978:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d97a:	f003 fb7b 	bl	8011074 <tcp_output>
  while (pcb != NULL) {
 800d97e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d980:	2b00      	cmp	r3, #0
 800d982:	f47f ad5c 	bne.w	800d43e <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800d986:	2300      	movs	r3, #0
 800d988:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800d98a:	4b0b      	ldr	r3, [pc, #44]	; (800d9b8 <tcp_slowtmr+0x5a8>)
 800d98c:	681b      	ldr	r3, [r3, #0]
 800d98e:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800d990:	e067      	b.n	800da62 <tcp_slowtmr+0x652>
 800d992:	bf00      	nop
 800d994:	20006e40 	.word	0x20006e40
 800d998:	10624dd3 	.word	0x10624dd3
 800d99c:	000124f8 	.word	0x000124f8
 800d9a0:	20006e3c 	.word	0x20006e3c
 800d9a4:	0801d70c 	.word	0x0801d70c
 800d9a8:	0801db44 	.word	0x0801db44
 800d9ac:	0801d750 	.word	0x0801d750
 800d9b0:	0801db70 	.word	0x0801db70
 800d9b4:	20006e38 	.word	0x20006e38
 800d9b8:	20006e4c 	.word	0x20006e4c
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800d9bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9be:	7d1b      	ldrb	r3, [r3, #20]
 800d9c0:	2b0a      	cmp	r3, #10
 800d9c2:	d006      	beq.n	800d9d2 <tcp_slowtmr+0x5c2>
 800d9c4:	4b2b      	ldr	r3, [pc, #172]	; (800da74 <tcp_slowtmr+0x664>)
 800d9c6:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800d9ca:	492b      	ldr	r1, [pc, #172]	; (800da78 <tcp_slowtmr+0x668>)
 800d9cc:	482b      	ldr	r0, [pc, #172]	; (800da7c <tcp_slowtmr+0x66c>)
 800d9ce:	f009 ff4f 	bl	8017870 <iprintf>
    pcb_remove = 0;
 800d9d2:	2300      	movs	r3, #0
 800d9d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800d9d8:	4b29      	ldr	r3, [pc, #164]	; (800da80 <tcp_slowtmr+0x670>)
 800d9da:	681a      	ldr	r2, [r3, #0]
 800d9dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9de:	6a1b      	ldr	r3, [r3, #32]
 800d9e0:	1ad3      	subs	r3, r2, r3
 800d9e2:	2bf0      	cmp	r3, #240	; 0xf0
 800d9e4:	d904      	bls.n	800d9f0 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800d9e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d9ea:	3301      	adds	r3, #1
 800d9ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800d9f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d9f4:	2b00      	cmp	r3, #0
 800d9f6:	d02f      	beq.n	800da58 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800d9f8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d9fa:	f000 fb2b 	bl	800e054 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800d9fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da00:	2b00      	cmp	r3, #0
 800da02:	d010      	beq.n	800da26 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800da04:	4b1f      	ldr	r3, [pc, #124]	; (800da84 <tcp_slowtmr+0x674>)
 800da06:	681b      	ldr	r3, [r3, #0]
 800da08:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800da0a:	429a      	cmp	r2, r3
 800da0c:	d106      	bne.n	800da1c <tcp_slowtmr+0x60c>
 800da0e:	4b19      	ldr	r3, [pc, #100]	; (800da74 <tcp_slowtmr+0x664>)
 800da10:	f240 52af 	movw	r2, #1455	; 0x5af
 800da14:	491c      	ldr	r1, [pc, #112]	; (800da88 <tcp_slowtmr+0x678>)
 800da16:	4819      	ldr	r0, [pc, #100]	; (800da7c <tcp_slowtmr+0x66c>)
 800da18:	f009 ff2a 	bl	8017870 <iprintf>
        prev->next = pcb->next;
 800da1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da1e:	68da      	ldr	r2, [r3, #12]
 800da20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da22:	60da      	str	r2, [r3, #12]
 800da24:	e00f      	b.n	800da46 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800da26:	4b17      	ldr	r3, [pc, #92]	; (800da84 <tcp_slowtmr+0x674>)
 800da28:	681b      	ldr	r3, [r3, #0]
 800da2a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800da2c:	429a      	cmp	r2, r3
 800da2e:	d006      	beq.n	800da3e <tcp_slowtmr+0x62e>
 800da30:	4b10      	ldr	r3, [pc, #64]	; (800da74 <tcp_slowtmr+0x664>)
 800da32:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800da36:	4915      	ldr	r1, [pc, #84]	; (800da8c <tcp_slowtmr+0x67c>)
 800da38:	4810      	ldr	r0, [pc, #64]	; (800da7c <tcp_slowtmr+0x66c>)
 800da3a:	f009 ff19 	bl	8017870 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800da3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da40:	68db      	ldr	r3, [r3, #12]
 800da42:	4a10      	ldr	r2, [pc, #64]	; (800da84 <tcp_slowtmr+0x674>)
 800da44:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800da46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da48:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800da4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da4c:	68db      	ldr	r3, [r3, #12]
 800da4e:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800da50:	69f8      	ldr	r0, [r7, #28]
 800da52:	f7ff f93f 	bl	800ccd4 <tcp_free>
 800da56:	e004      	b.n	800da62 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800da58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da5a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800da5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da5e:	68db      	ldr	r3, [r3, #12]
 800da60:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800da62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da64:	2b00      	cmp	r3, #0
 800da66:	d1a9      	bne.n	800d9bc <tcp_slowtmr+0x5ac>
    }
  }
}
 800da68:	bf00      	nop
 800da6a:	bf00      	nop
 800da6c:	3730      	adds	r7, #48	; 0x30
 800da6e:	46bd      	mov	sp, r7
 800da70:	bdb0      	pop	{r4, r5, r7, pc}
 800da72:	bf00      	nop
 800da74:	0801d70c 	.word	0x0801d70c
 800da78:	0801db9c 	.word	0x0801db9c
 800da7c:	0801d750 	.word	0x0801d750
 800da80:	20006e40 	.word	0x20006e40
 800da84:	20006e4c 	.word	0x20006e4c
 800da88:	0801dbcc 	.word	0x0801dbcc
 800da8c:	0801dbf4 	.word	0x0801dbf4

0800da90 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800da90:	b580      	push	{r7, lr}
 800da92:	b082      	sub	sp, #8
 800da94:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800da96:	4b2d      	ldr	r3, [pc, #180]	; (800db4c <tcp_fasttmr+0xbc>)
 800da98:	781b      	ldrb	r3, [r3, #0]
 800da9a:	3301      	adds	r3, #1
 800da9c:	b2da      	uxtb	r2, r3
 800da9e:	4b2b      	ldr	r3, [pc, #172]	; (800db4c <tcp_fasttmr+0xbc>)
 800daa0:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800daa2:	4b2b      	ldr	r3, [pc, #172]	; (800db50 <tcp_fasttmr+0xc0>)
 800daa4:	681b      	ldr	r3, [r3, #0]
 800daa6:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800daa8:	e048      	b.n	800db3c <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	7f9a      	ldrb	r2, [r3, #30]
 800daae:	4b27      	ldr	r3, [pc, #156]	; (800db4c <tcp_fasttmr+0xbc>)
 800dab0:	781b      	ldrb	r3, [r3, #0]
 800dab2:	429a      	cmp	r2, r3
 800dab4:	d03f      	beq.n	800db36 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800dab6:	4b25      	ldr	r3, [pc, #148]	; (800db4c <tcp_fasttmr+0xbc>)
 800dab8:	781a      	ldrb	r2, [r3, #0]
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	8b5b      	ldrh	r3, [r3, #26]
 800dac2:	f003 0301 	and.w	r3, r3, #1
 800dac6:	2b00      	cmp	r3, #0
 800dac8:	d010      	beq.n	800daec <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	8b5b      	ldrh	r3, [r3, #26]
 800dace:	f043 0302 	orr.w	r3, r3, #2
 800dad2:	b29a      	uxth	r2, r3
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800dad8:	6878      	ldr	r0, [r7, #4]
 800dada:	f003 facb 	bl	8011074 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	8b5b      	ldrh	r3, [r3, #26]
 800dae2:	f023 0303 	bic.w	r3, r3, #3
 800dae6:	b29a      	uxth	r2, r3
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	8b5b      	ldrh	r3, [r3, #26]
 800daf0:	f003 0308 	and.w	r3, r3, #8
 800daf4:	2b00      	cmp	r3, #0
 800daf6:	d009      	beq.n	800db0c <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	8b5b      	ldrh	r3, [r3, #26]
 800dafc:	f023 0308 	bic.w	r3, r3, #8
 800db00:	b29a      	uxth	r2, r3
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800db06:	6878      	ldr	r0, [r7, #4]
 800db08:	f7ff fa78 	bl	800cffc <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	68db      	ldr	r3, [r3, #12]
 800db10:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800db16:	2b00      	cmp	r3, #0
 800db18:	d00a      	beq.n	800db30 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800db1a:	4b0e      	ldr	r3, [pc, #56]	; (800db54 <tcp_fasttmr+0xc4>)
 800db1c:	2200      	movs	r2, #0
 800db1e:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800db20:	6878      	ldr	r0, [r7, #4]
 800db22:	f000 f819 	bl	800db58 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800db26:	4b0b      	ldr	r3, [pc, #44]	; (800db54 <tcp_fasttmr+0xc4>)
 800db28:	781b      	ldrb	r3, [r3, #0]
 800db2a:	2b00      	cmp	r3, #0
 800db2c:	d000      	beq.n	800db30 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800db2e:	e7b8      	b.n	800daa2 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800db30:	683b      	ldr	r3, [r7, #0]
 800db32:	607b      	str	r3, [r7, #4]
 800db34:	e002      	b.n	800db3c <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	68db      	ldr	r3, [r3, #12]
 800db3a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	2b00      	cmp	r3, #0
 800db40:	d1b3      	bne.n	800daaa <tcp_fasttmr+0x1a>
    }
  }
}
 800db42:	bf00      	nop
 800db44:	bf00      	nop
 800db46:	3708      	adds	r7, #8
 800db48:	46bd      	mov	sp, r7
 800db4a:	bd80      	pop	{r7, pc}
 800db4c:	20000456 	.word	0x20000456
 800db50:	20006e3c 	.word	0x20006e3c
 800db54:	20006e38 	.word	0x20006e38

0800db58 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800db58:	b590      	push	{r4, r7, lr}
 800db5a:	b085      	sub	sp, #20
 800db5c:	af00      	add	r7, sp, #0
 800db5e:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	2b00      	cmp	r3, #0
 800db64:	d109      	bne.n	800db7a <tcp_process_refused_data+0x22>
 800db66:	4b37      	ldr	r3, [pc, #220]	; (800dc44 <tcp_process_refused_data+0xec>)
 800db68:	f240 6209 	movw	r2, #1545	; 0x609
 800db6c:	4936      	ldr	r1, [pc, #216]	; (800dc48 <tcp_process_refused_data+0xf0>)
 800db6e:	4837      	ldr	r0, [pc, #220]	; (800dc4c <tcp_process_refused_data+0xf4>)
 800db70:	f009 fe7e 	bl	8017870 <iprintf>
 800db74:	f06f 030f 	mvn.w	r3, #15
 800db78:	e060      	b.n	800dc3c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800db7e:	7b5b      	ldrb	r3, [r3, #13]
 800db80:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800db86:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	2200      	movs	r2, #0
 800db8c:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800db94:	2b00      	cmp	r3, #0
 800db96:	d00b      	beq.n	800dbb0 <tcp_process_refused_data+0x58>
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	6918      	ldr	r0, [r3, #16]
 800dba2:	2300      	movs	r3, #0
 800dba4:	68ba      	ldr	r2, [r7, #8]
 800dba6:	6879      	ldr	r1, [r7, #4]
 800dba8:	47a0      	blx	r4
 800dbaa:	4603      	mov	r3, r0
 800dbac:	73fb      	strb	r3, [r7, #15]
 800dbae:	e007      	b.n	800dbc0 <tcp_process_refused_data+0x68>
 800dbb0:	2300      	movs	r3, #0
 800dbb2:	68ba      	ldr	r2, [r7, #8]
 800dbb4:	6879      	ldr	r1, [r7, #4]
 800dbb6:	2000      	movs	r0, #0
 800dbb8:	f000 f8a4 	bl	800dd04 <tcp_recv_null>
 800dbbc:	4603      	mov	r3, r0
 800dbbe:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800dbc0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dbc4:	2b00      	cmp	r3, #0
 800dbc6:	d12a      	bne.n	800dc1e <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800dbc8:	7bbb      	ldrb	r3, [r7, #14]
 800dbca:	f003 0320 	and.w	r3, r3, #32
 800dbce:	2b00      	cmp	r3, #0
 800dbd0:	d033      	beq.n	800dc3a <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dbd6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800dbda:	d005      	beq.n	800dbe8 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dbe0:	3301      	adds	r3, #1
 800dbe2:	b29a      	uxth	r2, r3
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dbee:	2b00      	cmp	r3, #0
 800dbf0:	d00b      	beq.n	800dc0a <tcp_process_refused_data+0xb2>
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	6918      	ldr	r0, [r3, #16]
 800dbfc:	2300      	movs	r3, #0
 800dbfe:	2200      	movs	r2, #0
 800dc00:	6879      	ldr	r1, [r7, #4]
 800dc02:	47a0      	blx	r4
 800dc04:	4603      	mov	r3, r0
 800dc06:	73fb      	strb	r3, [r7, #15]
 800dc08:	e001      	b.n	800dc0e <tcp_process_refused_data+0xb6>
 800dc0a:	2300      	movs	r3, #0
 800dc0c:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800dc0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dc12:	f113 0f0d 	cmn.w	r3, #13
 800dc16:	d110      	bne.n	800dc3a <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800dc18:	f06f 030c 	mvn.w	r3, #12
 800dc1c:	e00e      	b.n	800dc3c <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800dc1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dc22:	f113 0f0d 	cmn.w	r3, #13
 800dc26:	d102      	bne.n	800dc2e <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800dc28:	f06f 030c 	mvn.w	r3, #12
 800dc2c:	e006      	b.n	800dc3c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	68ba      	ldr	r2, [r7, #8]
 800dc32:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800dc34:	f06f 0304 	mvn.w	r3, #4
 800dc38:	e000      	b.n	800dc3c <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800dc3a:	2300      	movs	r3, #0
}
 800dc3c:	4618      	mov	r0, r3
 800dc3e:	3714      	adds	r7, #20
 800dc40:	46bd      	mov	sp, r7
 800dc42:	bd90      	pop	{r4, r7, pc}
 800dc44:	0801d70c 	.word	0x0801d70c
 800dc48:	0801dc1c 	.word	0x0801dc1c
 800dc4c:	0801d750 	.word	0x0801d750

0800dc50 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800dc50:	b580      	push	{r7, lr}
 800dc52:	b084      	sub	sp, #16
 800dc54:	af00      	add	r7, sp, #0
 800dc56:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800dc58:	e007      	b.n	800dc6a <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	681b      	ldr	r3, [r3, #0]
 800dc5e:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800dc60:	6878      	ldr	r0, [r7, #4]
 800dc62:	f000 f80a 	bl	800dc7a <tcp_seg_free>
    seg = next;
 800dc66:	68fb      	ldr	r3, [r7, #12]
 800dc68:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	2b00      	cmp	r3, #0
 800dc6e:	d1f4      	bne.n	800dc5a <tcp_segs_free+0xa>
  }
}
 800dc70:	bf00      	nop
 800dc72:	bf00      	nop
 800dc74:	3710      	adds	r7, #16
 800dc76:	46bd      	mov	sp, r7
 800dc78:	bd80      	pop	{r7, pc}

0800dc7a <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800dc7a:	b580      	push	{r7, lr}
 800dc7c:	b082      	sub	sp, #8
 800dc7e:	af00      	add	r7, sp, #0
 800dc80:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	2b00      	cmp	r3, #0
 800dc86:	d00c      	beq.n	800dca2 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	685b      	ldr	r3, [r3, #4]
 800dc8c:	2b00      	cmp	r3, #0
 800dc8e:	d004      	beq.n	800dc9a <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	685b      	ldr	r3, [r3, #4]
 800dc94:	4618      	mov	r0, r3
 800dc96:	f7fe fd6d 	bl	800c774 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800dc9a:	6879      	ldr	r1, [r7, #4]
 800dc9c:	2003      	movs	r0, #3
 800dc9e:	f7fd ff6f 	bl	800bb80 <memp_free>
  }
}
 800dca2:	bf00      	nop
 800dca4:	3708      	adds	r7, #8
 800dca6:	46bd      	mov	sp, r7
 800dca8:	bd80      	pop	{r7, pc}
	...

0800dcac <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800dcac:	b580      	push	{r7, lr}
 800dcae:	b084      	sub	sp, #16
 800dcb0:	af00      	add	r7, sp, #0
 800dcb2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	2b00      	cmp	r3, #0
 800dcb8:	d106      	bne.n	800dcc8 <tcp_seg_copy+0x1c>
 800dcba:	4b0f      	ldr	r3, [pc, #60]	; (800dcf8 <tcp_seg_copy+0x4c>)
 800dcbc:	f240 6282 	movw	r2, #1666	; 0x682
 800dcc0:	490e      	ldr	r1, [pc, #56]	; (800dcfc <tcp_seg_copy+0x50>)
 800dcc2:	480f      	ldr	r0, [pc, #60]	; (800dd00 <tcp_seg_copy+0x54>)
 800dcc4:	f009 fdd4 	bl	8017870 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800dcc8:	2003      	movs	r0, #3
 800dcca:	f7fd ff0d 	bl	800bae8 <memp_malloc>
 800dcce:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800dcd0:	68fb      	ldr	r3, [r7, #12]
 800dcd2:	2b00      	cmp	r3, #0
 800dcd4:	d101      	bne.n	800dcda <tcp_seg_copy+0x2e>
    return NULL;
 800dcd6:	2300      	movs	r3, #0
 800dcd8:	e00a      	b.n	800dcf0 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800dcda:	2210      	movs	r2, #16
 800dcdc:	6879      	ldr	r1, [r7, #4]
 800dcde:	68f8      	ldr	r0, [r7, #12]
 800dce0:	f009 f882 	bl	8016de8 <memcpy>
  pbuf_ref(cseg->p);
 800dce4:	68fb      	ldr	r3, [r7, #12]
 800dce6:	685b      	ldr	r3, [r3, #4]
 800dce8:	4618      	mov	r0, r3
 800dcea:	f7fe fde3 	bl	800c8b4 <pbuf_ref>
  return cseg;
 800dcee:	68fb      	ldr	r3, [r7, #12]
}
 800dcf0:	4618      	mov	r0, r3
 800dcf2:	3710      	adds	r7, #16
 800dcf4:	46bd      	mov	sp, r7
 800dcf6:	bd80      	pop	{r7, pc}
 800dcf8:	0801d70c 	.word	0x0801d70c
 800dcfc:	0801dc60 	.word	0x0801dc60
 800dd00:	0801d750 	.word	0x0801d750

0800dd04 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800dd04:	b580      	push	{r7, lr}
 800dd06:	b084      	sub	sp, #16
 800dd08:	af00      	add	r7, sp, #0
 800dd0a:	60f8      	str	r0, [r7, #12]
 800dd0c:	60b9      	str	r1, [r7, #8]
 800dd0e:	607a      	str	r2, [r7, #4]
 800dd10:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800dd12:	68bb      	ldr	r3, [r7, #8]
 800dd14:	2b00      	cmp	r3, #0
 800dd16:	d109      	bne.n	800dd2c <tcp_recv_null+0x28>
 800dd18:	4b12      	ldr	r3, [pc, #72]	; (800dd64 <tcp_recv_null+0x60>)
 800dd1a:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800dd1e:	4912      	ldr	r1, [pc, #72]	; (800dd68 <tcp_recv_null+0x64>)
 800dd20:	4812      	ldr	r0, [pc, #72]	; (800dd6c <tcp_recv_null+0x68>)
 800dd22:	f009 fda5 	bl	8017870 <iprintf>
 800dd26:	f06f 030f 	mvn.w	r3, #15
 800dd2a:	e016      	b.n	800dd5a <tcp_recv_null+0x56>

  if (p != NULL) {
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	2b00      	cmp	r3, #0
 800dd30:	d009      	beq.n	800dd46 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	891b      	ldrh	r3, [r3, #8]
 800dd36:	4619      	mov	r1, r3
 800dd38:	68b8      	ldr	r0, [r7, #8]
 800dd3a:	f7ff fb19 	bl	800d370 <tcp_recved>
    pbuf_free(p);
 800dd3e:	6878      	ldr	r0, [r7, #4]
 800dd40:	f7fe fd18 	bl	800c774 <pbuf_free>
 800dd44:	e008      	b.n	800dd58 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800dd46:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800dd4a:	2b00      	cmp	r3, #0
 800dd4c:	d104      	bne.n	800dd58 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800dd4e:	68b8      	ldr	r0, [r7, #8]
 800dd50:	f7ff f9be 	bl	800d0d0 <tcp_close>
 800dd54:	4603      	mov	r3, r0
 800dd56:	e000      	b.n	800dd5a <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800dd58:	2300      	movs	r3, #0
}
 800dd5a:	4618      	mov	r0, r3
 800dd5c:	3710      	adds	r7, #16
 800dd5e:	46bd      	mov	sp, r7
 800dd60:	bd80      	pop	{r7, pc}
 800dd62:	bf00      	nop
 800dd64:	0801d70c 	.word	0x0801d70c
 800dd68:	0801dc7c 	.word	0x0801dc7c
 800dd6c:	0801d750 	.word	0x0801d750

0800dd70 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800dd70:	b580      	push	{r7, lr}
 800dd72:	b086      	sub	sp, #24
 800dd74:	af00      	add	r7, sp, #0
 800dd76:	4603      	mov	r3, r0
 800dd78:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800dd7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800dd7e:	2b00      	cmp	r3, #0
 800dd80:	db01      	blt.n	800dd86 <tcp_kill_prio+0x16>
 800dd82:	79fb      	ldrb	r3, [r7, #7]
 800dd84:	e000      	b.n	800dd88 <tcp_kill_prio+0x18>
 800dd86:	237f      	movs	r3, #127	; 0x7f
 800dd88:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800dd8a:	7afb      	ldrb	r3, [r7, #11]
 800dd8c:	2b00      	cmp	r3, #0
 800dd8e:	d034      	beq.n	800ddfa <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800dd90:	7afb      	ldrb	r3, [r7, #11]
 800dd92:	3b01      	subs	r3, #1
 800dd94:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800dd96:	2300      	movs	r3, #0
 800dd98:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800dd9a:	2300      	movs	r3, #0
 800dd9c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800dd9e:	4b19      	ldr	r3, [pc, #100]	; (800de04 <tcp_kill_prio+0x94>)
 800dda0:	681b      	ldr	r3, [r3, #0]
 800dda2:	617b      	str	r3, [r7, #20]
 800dda4:	e01f      	b.n	800dde6 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800dda6:	697b      	ldr	r3, [r7, #20]
 800dda8:	7d5b      	ldrb	r3, [r3, #21]
 800ddaa:	7afa      	ldrb	r2, [r7, #11]
 800ddac:	429a      	cmp	r2, r3
 800ddae:	d80c      	bhi.n	800ddca <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800ddb0:	697b      	ldr	r3, [r7, #20]
 800ddb2:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800ddb4:	7afa      	ldrb	r2, [r7, #11]
 800ddb6:	429a      	cmp	r2, r3
 800ddb8:	d112      	bne.n	800dde0 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800ddba:	4b13      	ldr	r3, [pc, #76]	; (800de08 <tcp_kill_prio+0x98>)
 800ddbc:	681a      	ldr	r2, [r3, #0]
 800ddbe:	697b      	ldr	r3, [r7, #20]
 800ddc0:	6a1b      	ldr	r3, [r3, #32]
 800ddc2:	1ad3      	subs	r3, r2, r3
 800ddc4:	68fa      	ldr	r2, [r7, #12]
 800ddc6:	429a      	cmp	r2, r3
 800ddc8:	d80a      	bhi.n	800dde0 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800ddca:	4b0f      	ldr	r3, [pc, #60]	; (800de08 <tcp_kill_prio+0x98>)
 800ddcc:	681a      	ldr	r2, [r3, #0]
 800ddce:	697b      	ldr	r3, [r7, #20]
 800ddd0:	6a1b      	ldr	r3, [r3, #32]
 800ddd2:	1ad3      	subs	r3, r2, r3
 800ddd4:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800ddd6:	697b      	ldr	r3, [r7, #20]
 800ddd8:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800ddda:	697b      	ldr	r3, [r7, #20]
 800dddc:	7d5b      	ldrb	r3, [r3, #21]
 800ddde:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800dde0:	697b      	ldr	r3, [r7, #20]
 800dde2:	68db      	ldr	r3, [r3, #12]
 800dde4:	617b      	str	r3, [r7, #20]
 800dde6:	697b      	ldr	r3, [r7, #20]
 800dde8:	2b00      	cmp	r3, #0
 800ddea:	d1dc      	bne.n	800dda6 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800ddec:	693b      	ldr	r3, [r7, #16]
 800ddee:	2b00      	cmp	r3, #0
 800ddf0:	d004      	beq.n	800ddfc <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800ddf2:	6938      	ldr	r0, [r7, #16]
 800ddf4:	f7ff fa56 	bl	800d2a4 <tcp_abort>
 800ddf8:	e000      	b.n	800ddfc <tcp_kill_prio+0x8c>
    return;
 800ddfa:	bf00      	nop
  }
}
 800ddfc:	3718      	adds	r7, #24
 800ddfe:	46bd      	mov	sp, r7
 800de00:	bd80      	pop	{r7, pc}
 800de02:	bf00      	nop
 800de04:	20006e3c 	.word	0x20006e3c
 800de08:	20006e40 	.word	0x20006e40

0800de0c <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800de0c:	b580      	push	{r7, lr}
 800de0e:	b086      	sub	sp, #24
 800de10:	af00      	add	r7, sp, #0
 800de12:	4603      	mov	r3, r0
 800de14:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800de16:	79fb      	ldrb	r3, [r7, #7]
 800de18:	2b08      	cmp	r3, #8
 800de1a:	d009      	beq.n	800de30 <tcp_kill_state+0x24>
 800de1c:	79fb      	ldrb	r3, [r7, #7]
 800de1e:	2b09      	cmp	r3, #9
 800de20:	d006      	beq.n	800de30 <tcp_kill_state+0x24>
 800de22:	4b1a      	ldr	r3, [pc, #104]	; (800de8c <tcp_kill_state+0x80>)
 800de24:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800de28:	4919      	ldr	r1, [pc, #100]	; (800de90 <tcp_kill_state+0x84>)
 800de2a:	481a      	ldr	r0, [pc, #104]	; (800de94 <tcp_kill_state+0x88>)
 800de2c:	f009 fd20 	bl	8017870 <iprintf>

  inactivity = 0;
 800de30:	2300      	movs	r3, #0
 800de32:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800de34:	2300      	movs	r3, #0
 800de36:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800de38:	4b17      	ldr	r3, [pc, #92]	; (800de98 <tcp_kill_state+0x8c>)
 800de3a:	681b      	ldr	r3, [r3, #0]
 800de3c:	617b      	str	r3, [r7, #20]
 800de3e:	e017      	b.n	800de70 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800de40:	697b      	ldr	r3, [r7, #20]
 800de42:	7d1b      	ldrb	r3, [r3, #20]
 800de44:	79fa      	ldrb	r2, [r7, #7]
 800de46:	429a      	cmp	r2, r3
 800de48:	d10f      	bne.n	800de6a <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800de4a:	4b14      	ldr	r3, [pc, #80]	; (800de9c <tcp_kill_state+0x90>)
 800de4c:	681a      	ldr	r2, [r3, #0]
 800de4e:	697b      	ldr	r3, [r7, #20]
 800de50:	6a1b      	ldr	r3, [r3, #32]
 800de52:	1ad3      	subs	r3, r2, r3
 800de54:	68fa      	ldr	r2, [r7, #12]
 800de56:	429a      	cmp	r2, r3
 800de58:	d807      	bhi.n	800de6a <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800de5a:	4b10      	ldr	r3, [pc, #64]	; (800de9c <tcp_kill_state+0x90>)
 800de5c:	681a      	ldr	r2, [r3, #0]
 800de5e:	697b      	ldr	r3, [r7, #20]
 800de60:	6a1b      	ldr	r3, [r3, #32]
 800de62:	1ad3      	subs	r3, r2, r3
 800de64:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800de66:	697b      	ldr	r3, [r7, #20]
 800de68:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800de6a:	697b      	ldr	r3, [r7, #20]
 800de6c:	68db      	ldr	r3, [r3, #12]
 800de6e:	617b      	str	r3, [r7, #20]
 800de70:	697b      	ldr	r3, [r7, #20]
 800de72:	2b00      	cmp	r3, #0
 800de74:	d1e4      	bne.n	800de40 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800de76:	693b      	ldr	r3, [r7, #16]
 800de78:	2b00      	cmp	r3, #0
 800de7a:	d003      	beq.n	800de84 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800de7c:	2100      	movs	r1, #0
 800de7e:	6938      	ldr	r0, [r7, #16]
 800de80:	f7ff f952 	bl	800d128 <tcp_abandon>
  }
}
 800de84:	bf00      	nop
 800de86:	3718      	adds	r7, #24
 800de88:	46bd      	mov	sp, r7
 800de8a:	bd80      	pop	{r7, pc}
 800de8c:	0801d70c 	.word	0x0801d70c
 800de90:	0801dc98 	.word	0x0801dc98
 800de94:	0801d750 	.word	0x0801d750
 800de98:	20006e3c 	.word	0x20006e3c
 800de9c:	20006e40 	.word	0x20006e40

0800dea0 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800dea0:	b580      	push	{r7, lr}
 800dea2:	b084      	sub	sp, #16
 800dea4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800dea6:	2300      	movs	r3, #0
 800dea8:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800deaa:	2300      	movs	r3, #0
 800deac:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800deae:	4b12      	ldr	r3, [pc, #72]	; (800def8 <tcp_kill_timewait+0x58>)
 800deb0:	681b      	ldr	r3, [r3, #0]
 800deb2:	60fb      	str	r3, [r7, #12]
 800deb4:	e012      	b.n	800dedc <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800deb6:	4b11      	ldr	r3, [pc, #68]	; (800defc <tcp_kill_timewait+0x5c>)
 800deb8:	681a      	ldr	r2, [r3, #0]
 800deba:	68fb      	ldr	r3, [r7, #12]
 800debc:	6a1b      	ldr	r3, [r3, #32]
 800debe:	1ad3      	subs	r3, r2, r3
 800dec0:	687a      	ldr	r2, [r7, #4]
 800dec2:	429a      	cmp	r2, r3
 800dec4:	d807      	bhi.n	800ded6 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800dec6:	4b0d      	ldr	r3, [pc, #52]	; (800defc <tcp_kill_timewait+0x5c>)
 800dec8:	681a      	ldr	r2, [r3, #0]
 800deca:	68fb      	ldr	r3, [r7, #12]
 800decc:	6a1b      	ldr	r3, [r3, #32]
 800dece:	1ad3      	subs	r3, r2, r3
 800ded0:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800ded2:	68fb      	ldr	r3, [r7, #12]
 800ded4:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800ded6:	68fb      	ldr	r3, [r7, #12]
 800ded8:	68db      	ldr	r3, [r3, #12]
 800deda:	60fb      	str	r3, [r7, #12]
 800dedc:	68fb      	ldr	r3, [r7, #12]
 800dede:	2b00      	cmp	r3, #0
 800dee0:	d1e9      	bne.n	800deb6 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800dee2:	68bb      	ldr	r3, [r7, #8]
 800dee4:	2b00      	cmp	r3, #0
 800dee6:	d002      	beq.n	800deee <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800dee8:	68b8      	ldr	r0, [r7, #8]
 800deea:	f7ff f9db 	bl	800d2a4 <tcp_abort>
  }
}
 800deee:	bf00      	nop
 800def0:	3710      	adds	r7, #16
 800def2:	46bd      	mov	sp, r7
 800def4:	bd80      	pop	{r7, pc}
 800def6:	bf00      	nop
 800def8:	20006e4c 	.word	0x20006e4c
 800defc:	20006e40 	.word	0x20006e40

0800df00 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800df00:	b580      	push	{r7, lr}
 800df02:	b082      	sub	sp, #8
 800df04:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800df06:	4b10      	ldr	r3, [pc, #64]	; (800df48 <tcp_handle_closepend+0x48>)
 800df08:	681b      	ldr	r3, [r3, #0]
 800df0a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800df0c:	e014      	b.n	800df38 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	68db      	ldr	r3, [r3, #12]
 800df12:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	8b5b      	ldrh	r3, [r3, #26]
 800df18:	f003 0308 	and.w	r3, r3, #8
 800df1c:	2b00      	cmp	r3, #0
 800df1e:	d009      	beq.n	800df34 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	8b5b      	ldrh	r3, [r3, #26]
 800df24:	f023 0308 	bic.w	r3, r3, #8
 800df28:	b29a      	uxth	r2, r3
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800df2e:	6878      	ldr	r0, [r7, #4]
 800df30:	f7ff f864 	bl	800cffc <tcp_close_shutdown_fin>
    }
    pcb = next;
 800df34:	683b      	ldr	r3, [r7, #0]
 800df36:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	2b00      	cmp	r3, #0
 800df3c:	d1e7      	bne.n	800df0e <tcp_handle_closepend+0xe>
  }
}
 800df3e:	bf00      	nop
 800df40:	bf00      	nop
 800df42:	3708      	adds	r7, #8
 800df44:	46bd      	mov	sp, r7
 800df46:	bd80      	pop	{r7, pc}
 800df48:	20006e3c 	.word	0x20006e3c

0800df4c <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800df4c:	b580      	push	{r7, lr}
 800df4e:	b084      	sub	sp, #16
 800df50:	af00      	add	r7, sp, #0
 800df52:	4603      	mov	r3, r0
 800df54:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800df56:	2001      	movs	r0, #1
 800df58:	f7fd fdc6 	bl	800bae8 <memp_malloc>
 800df5c:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800df5e:	68fb      	ldr	r3, [r7, #12]
 800df60:	2b00      	cmp	r3, #0
 800df62:	d126      	bne.n	800dfb2 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800df64:	f7ff ffcc 	bl	800df00 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800df68:	f7ff ff9a 	bl	800dea0 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800df6c:	2001      	movs	r0, #1
 800df6e:	f7fd fdbb 	bl	800bae8 <memp_malloc>
 800df72:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800df74:	68fb      	ldr	r3, [r7, #12]
 800df76:	2b00      	cmp	r3, #0
 800df78:	d11b      	bne.n	800dfb2 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800df7a:	2009      	movs	r0, #9
 800df7c:	f7ff ff46 	bl	800de0c <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800df80:	2001      	movs	r0, #1
 800df82:	f7fd fdb1 	bl	800bae8 <memp_malloc>
 800df86:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800df88:	68fb      	ldr	r3, [r7, #12]
 800df8a:	2b00      	cmp	r3, #0
 800df8c:	d111      	bne.n	800dfb2 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800df8e:	2008      	movs	r0, #8
 800df90:	f7ff ff3c 	bl	800de0c <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800df94:	2001      	movs	r0, #1
 800df96:	f7fd fda7 	bl	800bae8 <memp_malloc>
 800df9a:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800df9c:	68fb      	ldr	r3, [r7, #12]
 800df9e:	2b00      	cmp	r3, #0
 800dfa0:	d107      	bne.n	800dfb2 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800dfa2:	79fb      	ldrb	r3, [r7, #7]
 800dfa4:	4618      	mov	r0, r3
 800dfa6:	f7ff fee3 	bl	800dd70 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800dfaa:	2001      	movs	r0, #1
 800dfac:	f7fd fd9c 	bl	800bae8 <memp_malloc>
 800dfb0:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800dfb2:	68fb      	ldr	r3, [r7, #12]
 800dfb4:	2b00      	cmp	r3, #0
 800dfb6:	d03f      	beq.n	800e038 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800dfb8:	229c      	movs	r2, #156	; 0x9c
 800dfba:	2100      	movs	r1, #0
 800dfbc:	68f8      	ldr	r0, [r7, #12]
 800dfbe:	f008 ff3b 	bl	8016e38 <memset>
    pcb->prio = prio;
 800dfc2:	68fb      	ldr	r3, [r7, #12]
 800dfc4:	79fa      	ldrb	r2, [r7, #7]
 800dfc6:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800dfc8:	68fb      	ldr	r3, [r7, #12]
 800dfca:	f44f 62e6 	mov.w	r2, #1840	; 0x730
 800dfce:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800dfd2:	68fb      	ldr	r3, [r7, #12]
 800dfd4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800dfd8:	855a      	strh	r2, [r3, #42]	; 0x2a
 800dfda:	68fb      	ldr	r3, [r7, #12]
 800dfdc:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800dfde:	68fb      	ldr	r3, [r7, #12]
 800dfe0:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800dfe2:	68fb      	ldr	r3, [r7, #12]
 800dfe4:	22ff      	movs	r2, #255	; 0xff
 800dfe6:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800dfe8:	68fb      	ldr	r3, [r7, #12]
 800dfea:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800dfee:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800dff0:	68fb      	ldr	r3, [r7, #12]
 800dff2:	2206      	movs	r2, #6
 800dff4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800dff8:	68fb      	ldr	r3, [r7, #12]
 800dffa:	2206      	movs	r2, #6
 800dffc:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800dffe:	68fb      	ldr	r3, [r7, #12]
 800e000:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e004:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800e006:	68fb      	ldr	r3, [r7, #12]
 800e008:	2201      	movs	r2, #1
 800e00a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800e00e:	4b0d      	ldr	r3, [pc, #52]	; (800e044 <tcp_alloc+0xf8>)
 800e010:	681a      	ldr	r2, [r3, #0]
 800e012:	68fb      	ldr	r3, [r7, #12]
 800e014:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800e016:	4b0c      	ldr	r3, [pc, #48]	; (800e048 <tcp_alloc+0xfc>)
 800e018:	781a      	ldrb	r2, [r3, #0]
 800e01a:	68fb      	ldr	r3, [r7, #12]
 800e01c:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800e01e:	68fb      	ldr	r3, [r7, #12]
 800e020:	f44f 62e6 	mov.w	r2, #1840	; 0x730
 800e024:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800e028:	68fb      	ldr	r3, [r7, #12]
 800e02a:	4a08      	ldr	r2, [pc, #32]	; (800e04c <tcp_alloc+0x100>)
 800e02c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800e030:	68fb      	ldr	r3, [r7, #12]
 800e032:	4a07      	ldr	r2, [pc, #28]	; (800e050 <tcp_alloc+0x104>)
 800e034:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800e038:	68fb      	ldr	r3, [r7, #12]
}
 800e03a:	4618      	mov	r0, r3
 800e03c:	3710      	adds	r7, #16
 800e03e:	46bd      	mov	sp, r7
 800e040:	bd80      	pop	{r7, pc}
 800e042:	bf00      	nop
 800e044:	20006e40 	.word	0x20006e40
 800e048:	20000456 	.word	0x20000456
 800e04c:	0800dd05 	.word	0x0800dd05
 800e050:	006ddd00 	.word	0x006ddd00

0800e054 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800e054:	b580      	push	{r7, lr}
 800e056:	b082      	sub	sp, #8
 800e058:	af00      	add	r7, sp, #0
 800e05a:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	2b00      	cmp	r3, #0
 800e060:	d107      	bne.n	800e072 <tcp_pcb_purge+0x1e>
 800e062:	4b21      	ldr	r3, [pc, #132]	; (800e0e8 <tcp_pcb_purge+0x94>)
 800e064:	f640 0251 	movw	r2, #2129	; 0x851
 800e068:	4920      	ldr	r1, [pc, #128]	; (800e0ec <tcp_pcb_purge+0x98>)
 800e06a:	4821      	ldr	r0, [pc, #132]	; (800e0f0 <tcp_pcb_purge+0x9c>)
 800e06c:	f009 fc00 	bl	8017870 <iprintf>
 800e070:	e037      	b.n	800e0e2 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	7d1b      	ldrb	r3, [r3, #20]
 800e076:	2b00      	cmp	r3, #0
 800e078:	d033      	beq.n	800e0e2 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800e07e:	2b0a      	cmp	r3, #10
 800e080:	d02f      	beq.n	800e0e2 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800e086:	2b01      	cmp	r3, #1
 800e088:	d02b      	beq.n	800e0e2 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e08e:	2b00      	cmp	r3, #0
 800e090:	d007      	beq.n	800e0a2 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e096:	4618      	mov	r0, r3
 800e098:	f7fe fb6c 	bl	800c774 <pbuf_free>
      pcb->refused_data = NULL;
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	2200      	movs	r2, #0
 800e0a0:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e0a6:	2b00      	cmp	r3, #0
 800e0a8:	d002      	beq.n	800e0b0 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800e0aa:	6878      	ldr	r0, [r7, #4]
 800e0ac:	f000 f986 	bl	800e3bc <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e0b6:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e0bc:	4618      	mov	r0, r3
 800e0be:	f7ff fdc7 	bl	800dc50 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e0c6:	4618      	mov	r0, r3
 800e0c8:	f7ff fdc2 	bl	800dc50 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	2200      	movs	r2, #0
 800e0d0:	66da      	str	r2, [r3, #108]	; 0x6c
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	2200      	movs	r2, #0
 800e0de:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800e0e2:	3708      	adds	r7, #8
 800e0e4:	46bd      	mov	sp, r7
 800e0e6:	bd80      	pop	{r7, pc}
 800e0e8:	0801d70c 	.word	0x0801d70c
 800e0ec:	0801dd58 	.word	0x0801dd58
 800e0f0:	0801d750 	.word	0x0801d750

0800e0f4 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800e0f4:	b580      	push	{r7, lr}
 800e0f6:	b084      	sub	sp, #16
 800e0f8:	af00      	add	r7, sp, #0
 800e0fa:	6078      	str	r0, [r7, #4]
 800e0fc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800e0fe:	683b      	ldr	r3, [r7, #0]
 800e100:	2b00      	cmp	r3, #0
 800e102:	d106      	bne.n	800e112 <tcp_pcb_remove+0x1e>
 800e104:	4b3e      	ldr	r3, [pc, #248]	; (800e200 <tcp_pcb_remove+0x10c>)
 800e106:	f640 0283 	movw	r2, #2179	; 0x883
 800e10a:	493e      	ldr	r1, [pc, #248]	; (800e204 <tcp_pcb_remove+0x110>)
 800e10c:	483e      	ldr	r0, [pc, #248]	; (800e208 <tcp_pcb_remove+0x114>)
 800e10e:	f009 fbaf 	bl	8017870 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	2b00      	cmp	r3, #0
 800e116:	d106      	bne.n	800e126 <tcp_pcb_remove+0x32>
 800e118:	4b39      	ldr	r3, [pc, #228]	; (800e200 <tcp_pcb_remove+0x10c>)
 800e11a:	f640 0284 	movw	r2, #2180	; 0x884
 800e11e:	493b      	ldr	r1, [pc, #236]	; (800e20c <tcp_pcb_remove+0x118>)
 800e120:	4839      	ldr	r0, [pc, #228]	; (800e208 <tcp_pcb_remove+0x114>)
 800e122:	f009 fba5 	bl	8017870 <iprintf>

  TCP_RMV(pcblist, pcb);
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	681b      	ldr	r3, [r3, #0]
 800e12a:	683a      	ldr	r2, [r7, #0]
 800e12c:	429a      	cmp	r2, r3
 800e12e:	d105      	bne.n	800e13c <tcp_pcb_remove+0x48>
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	681b      	ldr	r3, [r3, #0]
 800e134:	68da      	ldr	r2, [r3, #12]
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	601a      	str	r2, [r3, #0]
 800e13a:	e013      	b.n	800e164 <tcp_pcb_remove+0x70>
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	681b      	ldr	r3, [r3, #0]
 800e140:	60fb      	str	r3, [r7, #12]
 800e142:	e00c      	b.n	800e15e <tcp_pcb_remove+0x6a>
 800e144:	68fb      	ldr	r3, [r7, #12]
 800e146:	68db      	ldr	r3, [r3, #12]
 800e148:	683a      	ldr	r2, [r7, #0]
 800e14a:	429a      	cmp	r2, r3
 800e14c:	d104      	bne.n	800e158 <tcp_pcb_remove+0x64>
 800e14e:	683b      	ldr	r3, [r7, #0]
 800e150:	68da      	ldr	r2, [r3, #12]
 800e152:	68fb      	ldr	r3, [r7, #12]
 800e154:	60da      	str	r2, [r3, #12]
 800e156:	e005      	b.n	800e164 <tcp_pcb_remove+0x70>
 800e158:	68fb      	ldr	r3, [r7, #12]
 800e15a:	68db      	ldr	r3, [r3, #12]
 800e15c:	60fb      	str	r3, [r7, #12]
 800e15e:	68fb      	ldr	r3, [r7, #12]
 800e160:	2b00      	cmp	r3, #0
 800e162:	d1ef      	bne.n	800e144 <tcp_pcb_remove+0x50>
 800e164:	683b      	ldr	r3, [r7, #0]
 800e166:	2200      	movs	r2, #0
 800e168:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800e16a:	6838      	ldr	r0, [r7, #0]
 800e16c:	f7ff ff72 	bl	800e054 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800e170:	683b      	ldr	r3, [r7, #0]
 800e172:	7d1b      	ldrb	r3, [r3, #20]
 800e174:	2b0a      	cmp	r3, #10
 800e176:	d013      	beq.n	800e1a0 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800e178:	683b      	ldr	r3, [r7, #0]
 800e17a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800e17c:	2b01      	cmp	r3, #1
 800e17e:	d00f      	beq.n	800e1a0 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800e180:	683b      	ldr	r3, [r7, #0]
 800e182:	8b5b      	ldrh	r3, [r3, #26]
 800e184:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800e188:	2b00      	cmp	r3, #0
 800e18a:	d009      	beq.n	800e1a0 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800e18c:	683b      	ldr	r3, [r7, #0]
 800e18e:	8b5b      	ldrh	r3, [r3, #26]
 800e190:	f043 0302 	orr.w	r3, r3, #2
 800e194:	b29a      	uxth	r2, r3
 800e196:	683b      	ldr	r3, [r7, #0]
 800e198:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800e19a:	6838      	ldr	r0, [r7, #0]
 800e19c:	f002 ff6a 	bl	8011074 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800e1a0:	683b      	ldr	r3, [r7, #0]
 800e1a2:	7d1b      	ldrb	r3, [r3, #20]
 800e1a4:	2b01      	cmp	r3, #1
 800e1a6:	d020      	beq.n	800e1ea <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800e1a8:	683b      	ldr	r3, [r7, #0]
 800e1aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e1ac:	2b00      	cmp	r3, #0
 800e1ae:	d006      	beq.n	800e1be <tcp_pcb_remove+0xca>
 800e1b0:	4b13      	ldr	r3, [pc, #76]	; (800e200 <tcp_pcb_remove+0x10c>)
 800e1b2:	f640 0293 	movw	r2, #2195	; 0x893
 800e1b6:	4916      	ldr	r1, [pc, #88]	; (800e210 <tcp_pcb_remove+0x11c>)
 800e1b8:	4813      	ldr	r0, [pc, #76]	; (800e208 <tcp_pcb_remove+0x114>)
 800e1ba:	f009 fb59 	bl	8017870 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800e1be:	683b      	ldr	r3, [r7, #0]
 800e1c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e1c2:	2b00      	cmp	r3, #0
 800e1c4:	d006      	beq.n	800e1d4 <tcp_pcb_remove+0xe0>
 800e1c6:	4b0e      	ldr	r3, [pc, #56]	; (800e200 <tcp_pcb_remove+0x10c>)
 800e1c8:	f640 0294 	movw	r2, #2196	; 0x894
 800e1cc:	4911      	ldr	r1, [pc, #68]	; (800e214 <tcp_pcb_remove+0x120>)
 800e1ce:	480e      	ldr	r0, [pc, #56]	; (800e208 <tcp_pcb_remove+0x114>)
 800e1d0:	f009 fb4e 	bl	8017870 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800e1d4:	683b      	ldr	r3, [r7, #0]
 800e1d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e1d8:	2b00      	cmp	r3, #0
 800e1da:	d006      	beq.n	800e1ea <tcp_pcb_remove+0xf6>
 800e1dc:	4b08      	ldr	r3, [pc, #32]	; (800e200 <tcp_pcb_remove+0x10c>)
 800e1de:	f640 0296 	movw	r2, #2198	; 0x896
 800e1e2:	490d      	ldr	r1, [pc, #52]	; (800e218 <tcp_pcb_remove+0x124>)
 800e1e4:	4808      	ldr	r0, [pc, #32]	; (800e208 <tcp_pcb_remove+0x114>)
 800e1e6:	f009 fb43 	bl	8017870 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800e1ea:	683b      	ldr	r3, [r7, #0]
 800e1ec:	2200      	movs	r2, #0
 800e1ee:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800e1f0:	683b      	ldr	r3, [r7, #0]
 800e1f2:	2200      	movs	r2, #0
 800e1f4:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800e1f6:	bf00      	nop
 800e1f8:	3710      	adds	r7, #16
 800e1fa:	46bd      	mov	sp, r7
 800e1fc:	bd80      	pop	{r7, pc}
 800e1fe:	bf00      	nop
 800e200:	0801d70c 	.word	0x0801d70c
 800e204:	0801dd74 	.word	0x0801dd74
 800e208:	0801d750 	.word	0x0801d750
 800e20c:	0801dd90 	.word	0x0801dd90
 800e210:	0801ddb0 	.word	0x0801ddb0
 800e214:	0801ddc8 	.word	0x0801ddc8
 800e218:	0801dde4 	.word	0x0801dde4

0800e21c <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800e21c:	b580      	push	{r7, lr}
 800e21e:	b082      	sub	sp, #8
 800e220:	af00      	add	r7, sp, #0
 800e222:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	2b00      	cmp	r3, #0
 800e228:	d106      	bne.n	800e238 <tcp_next_iss+0x1c>
 800e22a:	4b0a      	ldr	r3, [pc, #40]	; (800e254 <tcp_next_iss+0x38>)
 800e22c:	f640 02af 	movw	r2, #2223	; 0x8af
 800e230:	4909      	ldr	r1, [pc, #36]	; (800e258 <tcp_next_iss+0x3c>)
 800e232:	480a      	ldr	r0, [pc, #40]	; (800e25c <tcp_next_iss+0x40>)
 800e234:	f009 fb1c 	bl	8017870 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800e238:	4b09      	ldr	r3, [pc, #36]	; (800e260 <tcp_next_iss+0x44>)
 800e23a:	681a      	ldr	r2, [r3, #0]
 800e23c:	4b09      	ldr	r3, [pc, #36]	; (800e264 <tcp_next_iss+0x48>)
 800e23e:	681b      	ldr	r3, [r3, #0]
 800e240:	4413      	add	r3, r2
 800e242:	4a07      	ldr	r2, [pc, #28]	; (800e260 <tcp_next_iss+0x44>)
 800e244:	6013      	str	r3, [r2, #0]
  return iss;
 800e246:	4b06      	ldr	r3, [pc, #24]	; (800e260 <tcp_next_iss+0x44>)
 800e248:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800e24a:	4618      	mov	r0, r3
 800e24c:	3708      	adds	r7, #8
 800e24e:	46bd      	mov	sp, r7
 800e250:	bd80      	pop	{r7, pc}
 800e252:	bf00      	nop
 800e254:	0801d70c 	.word	0x0801d70c
 800e258:	0801ddfc 	.word	0x0801ddfc
 800e25c:	0801d750 	.word	0x0801d750
 800e260:	20000068 	.word	0x20000068
 800e264:	20006e40 	.word	0x20006e40

0800e268 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800e268:	b580      	push	{r7, lr}
 800e26a:	b086      	sub	sp, #24
 800e26c:	af00      	add	r7, sp, #0
 800e26e:	4603      	mov	r3, r0
 800e270:	60b9      	str	r1, [r7, #8]
 800e272:	607a      	str	r2, [r7, #4]
 800e274:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	2b00      	cmp	r3, #0
 800e27a:	d106      	bne.n	800e28a <tcp_eff_send_mss_netif+0x22>
 800e27c:	4b14      	ldr	r3, [pc, #80]	; (800e2d0 <tcp_eff_send_mss_netif+0x68>)
 800e27e:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800e282:	4914      	ldr	r1, [pc, #80]	; (800e2d4 <tcp_eff_send_mss_netif+0x6c>)
 800e284:	4814      	ldr	r0, [pc, #80]	; (800e2d8 <tcp_eff_send_mss_netif+0x70>)
 800e286:	f009 faf3 	bl	8017870 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800e28a:	68bb      	ldr	r3, [r7, #8]
 800e28c:	2b00      	cmp	r3, #0
 800e28e:	d101      	bne.n	800e294 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800e290:	89fb      	ldrh	r3, [r7, #14]
 800e292:	e019      	b.n	800e2c8 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800e294:	68bb      	ldr	r3, [r7, #8]
 800e296:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e298:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800e29a:	8afb      	ldrh	r3, [r7, #22]
 800e29c:	2b00      	cmp	r3, #0
 800e29e:	d012      	beq.n	800e2c6 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800e2a0:	2328      	movs	r3, #40	; 0x28
 800e2a2:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800e2a4:	8afa      	ldrh	r2, [r7, #22]
 800e2a6:	8abb      	ldrh	r3, [r7, #20]
 800e2a8:	429a      	cmp	r2, r3
 800e2aa:	d904      	bls.n	800e2b6 <tcp_eff_send_mss_netif+0x4e>
 800e2ac:	8afa      	ldrh	r2, [r7, #22]
 800e2ae:	8abb      	ldrh	r3, [r7, #20]
 800e2b0:	1ad3      	subs	r3, r2, r3
 800e2b2:	b29b      	uxth	r3, r3
 800e2b4:	e000      	b.n	800e2b8 <tcp_eff_send_mss_netif+0x50>
 800e2b6:	2300      	movs	r3, #0
 800e2b8:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800e2ba:	8a7a      	ldrh	r2, [r7, #18]
 800e2bc:	89fb      	ldrh	r3, [r7, #14]
 800e2be:	4293      	cmp	r3, r2
 800e2c0:	bf28      	it	cs
 800e2c2:	4613      	movcs	r3, r2
 800e2c4:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800e2c6:	89fb      	ldrh	r3, [r7, #14]
}
 800e2c8:	4618      	mov	r0, r3
 800e2ca:	3718      	adds	r7, #24
 800e2cc:	46bd      	mov	sp, r7
 800e2ce:	bd80      	pop	{r7, pc}
 800e2d0:	0801d70c 	.word	0x0801d70c
 800e2d4:	0801de18 	.word	0x0801de18
 800e2d8:	0801d750 	.word	0x0801d750

0800e2dc <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800e2dc:	b580      	push	{r7, lr}
 800e2de:	b084      	sub	sp, #16
 800e2e0:	af00      	add	r7, sp, #0
 800e2e2:	6078      	str	r0, [r7, #4]
 800e2e4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800e2e6:	683b      	ldr	r3, [r7, #0]
 800e2e8:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	2b00      	cmp	r3, #0
 800e2ee:	d119      	bne.n	800e324 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800e2f0:	4b10      	ldr	r3, [pc, #64]	; (800e334 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800e2f2:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800e2f6:	4910      	ldr	r1, [pc, #64]	; (800e338 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800e2f8:	4810      	ldr	r0, [pc, #64]	; (800e33c <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800e2fa:	f009 fab9 	bl	8017870 <iprintf>

  while (pcb != NULL) {
 800e2fe:	e011      	b.n	800e324 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800e300:	68fb      	ldr	r3, [r7, #12]
 800e302:	681a      	ldr	r2, [r3, #0]
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	681b      	ldr	r3, [r3, #0]
 800e308:	429a      	cmp	r2, r3
 800e30a:	d108      	bne.n	800e31e <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800e30c:	68fb      	ldr	r3, [r7, #12]
 800e30e:	68db      	ldr	r3, [r3, #12]
 800e310:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800e312:	68f8      	ldr	r0, [r7, #12]
 800e314:	f7fe ffc6 	bl	800d2a4 <tcp_abort>
      pcb = next;
 800e318:	68bb      	ldr	r3, [r7, #8]
 800e31a:	60fb      	str	r3, [r7, #12]
 800e31c:	e002      	b.n	800e324 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800e31e:	68fb      	ldr	r3, [r7, #12]
 800e320:	68db      	ldr	r3, [r3, #12]
 800e322:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800e324:	68fb      	ldr	r3, [r7, #12]
 800e326:	2b00      	cmp	r3, #0
 800e328:	d1ea      	bne.n	800e300 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800e32a:	bf00      	nop
 800e32c:	bf00      	nop
 800e32e:	3710      	adds	r7, #16
 800e330:	46bd      	mov	sp, r7
 800e332:	bd80      	pop	{r7, pc}
 800e334:	0801d70c 	.word	0x0801d70c
 800e338:	0801de40 	.word	0x0801de40
 800e33c:	0801d750 	.word	0x0801d750

0800e340 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800e340:	b580      	push	{r7, lr}
 800e342:	b084      	sub	sp, #16
 800e344:	af00      	add	r7, sp, #0
 800e346:	6078      	str	r0, [r7, #4]
 800e348:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	2b00      	cmp	r3, #0
 800e34e:	d02a      	beq.n	800e3a6 <tcp_netif_ip_addr_changed+0x66>
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	681b      	ldr	r3, [r3, #0]
 800e354:	2b00      	cmp	r3, #0
 800e356:	d026      	beq.n	800e3a6 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800e358:	4b15      	ldr	r3, [pc, #84]	; (800e3b0 <tcp_netif_ip_addr_changed+0x70>)
 800e35a:	681b      	ldr	r3, [r3, #0]
 800e35c:	4619      	mov	r1, r3
 800e35e:	6878      	ldr	r0, [r7, #4]
 800e360:	f7ff ffbc 	bl	800e2dc <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800e364:	4b13      	ldr	r3, [pc, #76]	; (800e3b4 <tcp_netif_ip_addr_changed+0x74>)
 800e366:	681b      	ldr	r3, [r3, #0]
 800e368:	4619      	mov	r1, r3
 800e36a:	6878      	ldr	r0, [r7, #4]
 800e36c:	f7ff ffb6 	bl	800e2dc <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800e370:	683b      	ldr	r3, [r7, #0]
 800e372:	2b00      	cmp	r3, #0
 800e374:	d017      	beq.n	800e3a6 <tcp_netif_ip_addr_changed+0x66>
 800e376:	683b      	ldr	r3, [r7, #0]
 800e378:	681b      	ldr	r3, [r3, #0]
 800e37a:	2b00      	cmp	r3, #0
 800e37c:	d013      	beq.n	800e3a6 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800e37e:	4b0e      	ldr	r3, [pc, #56]	; (800e3b8 <tcp_netif_ip_addr_changed+0x78>)
 800e380:	681b      	ldr	r3, [r3, #0]
 800e382:	60fb      	str	r3, [r7, #12]
 800e384:	e00c      	b.n	800e3a0 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800e386:	68fb      	ldr	r3, [r7, #12]
 800e388:	681a      	ldr	r2, [r3, #0]
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	681b      	ldr	r3, [r3, #0]
 800e38e:	429a      	cmp	r2, r3
 800e390:	d103      	bne.n	800e39a <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800e392:	683b      	ldr	r3, [r7, #0]
 800e394:	681a      	ldr	r2, [r3, #0]
 800e396:	68fb      	ldr	r3, [r7, #12]
 800e398:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800e39a:	68fb      	ldr	r3, [r7, #12]
 800e39c:	68db      	ldr	r3, [r3, #12]
 800e39e:	60fb      	str	r3, [r7, #12]
 800e3a0:	68fb      	ldr	r3, [r7, #12]
 800e3a2:	2b00      	cmp	r3, #0
 800e3a4:	d1ef      	bne.n	800e386 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800e3a6:	bf00      	nop
 800e3a8:	3710      	adds	r7, #16
 800e3aa:	46bd      	mov	sp, r7
 800e3ac:	bd80      	pop	{r7, pc}
 800e3ae:	bf00      	nop
 800e3b0:	20006e3c 	.word	0x20006e3c
 800e3b4:	20006e48 	.word	0x20006e48
 800e3b8:	20006e44 	.word	0x20006e44

0800e3bc <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800e3bc:	b580      	push	{r7, lr}
 800e3be:	b082      	sub	sp, #8
 800e3c0:	af00      	add	r7, sp, #0
 800e3c2:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e3c8:	2b00      	cmp	r3, #0
 800e3ca:	d007      	beq.n	800e3dc <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e3d0:	4618      	mov	r0, r3
 800e3d2:	f7ff fc3d 	bl	800dc50 <tcp_segs_free>
    pcb->ooseq = NULL;
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	2200      	movs	r2, #0
 800e3da:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800e3dc:	bf00      	nop
 800e3de:	3708      	adds	r7, #8
 800e3e0:	46bd      	mov	sp, r7
 800e3e2:	bd80      	pop	{r7, pc}

0800e3e4 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800e3e4:	b590      	push	{r4, r7, lr}
 800e3e6:	b08d      	sub	sp, #52	; 0x34
 800e3e8:	af04      	add	r7, sp, #16
 800e3ea:	6078      	str	r0, [r7, #4]
 800e3ec:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	2b00      	cmp	r3, #0
 800e3f2:	d105      	bne.n	800e400 <tcp_input+0x1c>
 800e3f4:	4b9b      	ldr	r3, [pc, #620]	; (800e664 <tcp_input+0x280>)
 800e3f6:	2283      	movs	r2, #131	; 0x83
 800e3f8:	499b      	ldr	r1, [pc, #620]	; (800e668 <tcp_input+0x284>)
 800e3fa:	489c      	ldr	r0, [pc, #624]	; (800e66c <tcp_input+0x288>)
 800e3fc:	f009 fa38 	bl	8017870 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	685b      	ldr	r3, [r3, #4]
 800e404:	4a9a      	ldr	r2, [pc, #616]	; (800e670 <tcp_input+0x28c>)
 800e406:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	895b      	ldrh	r3, [r3, #10]
 800e40c:	2b13      	cmp	r3, #19
 800e40e:	f240 83c4 	bls.w	800eb9a <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800e412:	4b98      	ldr	r3, [pc, #608]	; (800e674 <tcp_input+0x290>)
 800e414:	695b      	ldr	r3, [r3, #20]
 800e416:	4a97      	ldr	r2, [pc, #604]	; (800e674 <tcp_input+0x290>)
 800e418:	6812      	ldr	r2, [r2, #0]
 800e41a:	4611      	mov	r1, r2
 800e41c:	4618      	mov	r0, r3
 800e41e:	f007 fd49 	bl	8015eb4 <ip4_addr_isbroadcast_u32>
 800e422:	4603      	mov	r3, r0
 800e424:	2b00      	cmp	r3, #0
 800e426:	f040 83ba 	bne.w	800eb9e <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800e42a:	4b92      	ldr	r3, [pc, #584]	; (800e674 <tcp_input+0x290>)
 800e42c:	695b      	ldr	r3, [r3, #20]
 800e42e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800e432:	2be0      	cmp	r3, #224	; 0xe0
 800e434:	f000 83b3 	beq.w	800eb9e <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800e438:	4b8d      	ldr	r3, [pc, #564]	; (800e670 <tcp_input+0x28c>)
 800e43a:	681b      	ldr	r3, [r3, #0]
 800e43c:	899b      	ldrh	r3, [r3, #12]
 800e43e:	b29b      	uxth	r3, r3
 800e440:	4618      	mov	r0, r3
 800e442:	f7fc fefb 	bl	800b23c <lwip_htons>
 800e446:	4603      	mov	r3, r0
 800e448:	0b1b      	lsrs	r3, r3, #12
 800e44a:	b29b      	uxth	r3, r3
 800e44c:	b2db      	uxtb	r3, r3
 800e44e:	009b      	lsls	r3, r3, #2
 800e450:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800e452:	7cbb      	ldrb	r3, [r7, #18]
 800e454:	2b13      	cmp	r3, #19
 800e456:	f240 83a4 	bls.w	800eba2 <tcp_input+0x7be>
 800e45a:	7cbb      	ldrb	r3, [r7, #18]
 800e45c:	b29a      	uxth	r2, r3
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	891b      	ldrh	r3, [r3, #8]
 800e462:	429a      	cmp	r2, r3
 800e464:	f200 839d 	bhi.w	800eba2 <tcp_input+0x7be>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800e468:	7cbb      	ldrb	r3, [r7, #18]
 800e46a:	b29b      	uxth	r3, r3
 800e46c:	3b14      	subs	r3, #20
 800e46e:	b29a      	uxth	r2, r3
 800e470:	4b81      	ldr	r3, [pc, #516]	; (800e678 <tcp_input+0x294>)
 800e472:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800e474:	4b81      	ldr	r3, [pc, #516]	; (800e67c <tcp_input+0x298>)
 800e476:	2200      	movs	r2, #0
 800e478:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	895a      	ldrh	r2, [r3, #10]
 800e47e:	7cbb      	ldrb	r3, [r7, #18]
 800e480:	b29b      	uxth	r3, r3
 800e482:	429a      	cmp	r2, r3
 800e484:	d309      	bcc.n	800e49a <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800e486:	4b7c      	ldr	r3, [pc, #496]	; (800e678 <tcp_input+0x294>)
 800e488:	881a      	ldrh	r2, [r3, #0]
 800e48a:	4b7d      	ldr	r3, [pc, #500]	; (800e680 <tcp_input+0x29c>)
 800e48c:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800e48e:	7cbb      	ldrb	r3, [r7, #18]
 800e490:	4619      	mov	r1, r3
 800e492:	6878      	ldr	r0, [r7, #4]
 800e494:	f7fe f8e8 	bl	800c668 <pbuf_remove_header>
 800e498:	e04e      	b.n	800e538 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	681b      	ldr	r3, [r3, #0]
 800e49e:	2b00      	cmp	r3, #0
 800e4a0:	d105      	bne.n	800e4ae <tcp_input+0xca>
 800e4a2:	4b70      	ldr	r3, [pc, #448]	; (800e664 <tcp_input+0x280>)
 800e4a4:	22c2      	movs	r2, #194	; 0xc2
 800e4a6:	4977      	ldr	r1, [pc, #476]	; (800e684 <tcp_input+0x2a0>)
 800e4a8:	4870      	ldr	r0, [pc, #448]	; (800e66c <tcp_input+0x288>)
 800e4aa:	f009 f9e1 	bl	8017870 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800e4ae:	2114      	movs	r1, #20
 800e4b0:	6878      	ldr	r0, [r7, #4]
 800e4b2:	f7fe f8d9 	bl	800c668 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	895a      	ldrh	r2, [r3, #10]
 800e4ba:	4b71      	ldr	r3, [pc, #452]	; (800e680 <tcp_input+0x29c>)
 800e4bc:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800e4be:	4b6e      	ldr	r3, [pc, #440]	; (800e678 <tcp_input+0x294>)
 800e4c0:	881a      	ldrh	r2, [r3, #0]
 800e4c2:	4b6f      	ldr	r3, [pc, #444]	; (800e680 <tcp_input+0x29c>)
 800e4c4:	881b      	ldrh	r3, [r3, #0]
 800e4c6:	1ad3      	subs	r3, r2, r3
 800e4c8:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800e4ca:	4b6d      	ldr	r3, [pc, #436]	; (800e680 <tcp_input+0x29c>)
 800e4cc:	881b      	ldrh	r3, [r3, #0]
 800e4ce:	4619      	mov	r1, r3
 800e4d0:	6878      	ldr	r0, [r7, #4]
 800e4d2:	f7fe f8c9 	bl	800c668 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	681b      	ldr	r3, [r3, #0]
 800e4da:	895b      	ldrh	r3, [r3, #10]
 800e4dc:	8a3a      	ldrh	r2, [r7, #16]
 800e4de:	429a      	cmp	r2, r3
 800e4e0:	f200 8361 	bhi.w	800eba6 <tcp_input+0x7c2>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	681b      	ldr	r3, [r3, #0]
 800e4e8:	685b      	ldr	r3, [r3, #4]
 800e4ea:	4a64      	ldr	r2, [pc, #400]	; (800e67c <tcp_input+0x298>)
 800e4ec:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	681b      	ldr	r3, [r3, #0]
 800e4f2:	8a3a      	ldrh	r2, [r7, #16]
 800e4f4:	4611      	mov	r1, r2
 800e4f6:	4618      	mov	r0, r3
 800e4f8:	f7fe f8b6 	bl	800c668 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	891a      	ldrh	r2, [r3, #8]
 800e500:	8a3b      	ldrh	r3, [r7, #16]
 800e502:	1ad3      	subs	r3, r2, r3
 800e504:	b29a      	uxth	r2, r3
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	895b      	ldrh	r3, [r3, #10]
 800e50e:	2b00      	cmp	r3, #0
 800e510:	d005      	beq.n	800e51e <tcp_input+0x13a>
 800e512:	4b54      	ldr	r3, [pc, #336]	; (800e664 <tcp_input+0x280>)
 800e514:	22df      	movs	r2, #223	; 0xdf
 800e516:	495c      	ldr	r1, [pc, #368]	; (800e688 <tcp_input+0x2a4>)
 800e518:	4854      	ldr	r0, [pc, #336]	; (800e66c <tcp_input+0x288>)
 800e51a:	f009 f9a9 	bl	8017870 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	891a      	ldrh	r2, [r3, #8]
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	681b      	ldr	r3, [r3, #0]
 800e526:	891b      	ldrh	r3, [r3, #8]
 800e528:	429a      	cmp	r2, r3
 800e52a:	d005      	beq.n	800e538 <tcp_input+0x154>
 800e52c:	4b4d      	ldr	r3, [pc, #308]	; (800e664 <tcp_input+0x280>)
 800e52e:	22e0      	movs	r2, #224	; 0xe0
 800e530:	4956      	ldr	r1, [pc, #344]	; (800e68c <tcp_input+0x2a8>)
 800e532:	484e      	ldr	r0, [pc, #312]	; (800e66c <tcp_input+0x288>)
 800e534:	f009 f99c 	bl	8017870 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800e538:	4b4d      	ldr	r3, [pc, #308]	; (800e670 <tcp_input+0x28c>)
 800e53a:	681b      	ldr	r3, [r3, #0]
 800e53c:	881b      	ldrh	r3, [r3, #0]
 800e53e:	b29b      	uxth	r3, r3
 800e540:	4a4b      	ldr	r2, [pc, #300]	; (800e670 <tcp_input+0x28c>)
 800e542:	6814      	ldr	r4, [r2, #0]
 800e544:	4618      	mov	r0, r3
 800e546:	f7fc fe79 	bl	800b23c <lwip_htons>
 800e54a:	4603      	mov	r3, r0
 800e54c:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800e54e:	4b48      	ldr	r3, [pc, #288]	; (800e670 <tcp_input+0x28c>)
 800e550:	681b      	ldr	r3, [r3, #0]
 800e552:	885b      	ldrh	r3, [r3, #2]
 800e554:	b29b      	uxth	r3, r3
 800e556:	4a46      	ldr	r2, [pc, #280]	; (800e670 <tcp_input+0x28c>)
 800e558:	6814      	ldr	r4, [r2, #0]
 800e55a:	4618      	mov	r0, r3
 800e55c:	f7fc fe6e 	bl	800b23c <lwip_htons>
 800e560:	4603      	mov	r3, r0
 800e562:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800e564:	4b42      	ldr	r3, [pc, #264]	; (800e670 <tcp_input+0x28c>)
 800e566:	681b      	ldr	r3, [r3, #0]
 800e568:	685b      	ldr	r3, [r3, #4]
 800e56a:	4a41      	ldr	r2, [pc, #260]	; (800e670 <tcp_input+0x28c>)
 800e56c:	6814      	ldr	r4, [r2, #0]
 800e56e:	4618      	mov	r0, r3
 800e570:	f7fc fe79 	bl	800b266 <lwip_htonl>
 800e574:	4603      	mov	r3, r0
 800e576:	6063      	str	r3, [r4, #4]
 800e578:	6863      	ldr	r3, [r4, #4]
 800e57a:	4a45      	ldr	r2, [pc, #276]	; (800e690 <tcp_input+0x2ac>)
 800e57c:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800e57e:	4b3c      	ldr	r3, [pc, #240]	; (800e670 <tcp_input+0x28c>)
 800e580:	681b      	ldr	r3, [r3, #0]
 800e582:	689b      	ldr	r3, [r3, #8]
 800e584:	4a3a      	ldr	r2, [pc, #232]	; (800e670 <tcp_input+0x28c>)
 800e586:	6814      	ldr	r4, [r2, #0]
 800e588:	4618      	mov	r0, r3
 800e58a:	f7fc fe6c 	bl	800b266 <lwip_htonl>
 800e58e:	4603      	mov	r3, r0
 800e590:	60a3      	str	r3, [r4, #8]
 800e592:	68a3      	ldr	r3, [r4, #8]
 800e594:	4a3f      	ldr	r2, [pc, #252]	; (800e694 <tcp_input+0x2b0>)
 800e596:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800e598:	4b35      	ldr	r3, [pc, #212]	; (800e670 <tcp_input+0x28c>)
 800e59a:	681b      	ldr	r3, [r3, #0]
 800e59c:	89db      	ldrh	r3, [r3, #14]
 800e59e:	b29b      	uxth	r3, r3
 800e5a0:	4a33      	ldr	r2, [pc, #204]	; (800e670 <tcp_input+0x28c>)
 800e5a2:	6814      	ldr	r4, [r2, #0]
 800e5a4:	4618      	mov	r0, r3
 800e5a6:	f7fc fe49 	bl	800b23c <lwip_htons>
 800e5aa:	4603      	mov	r3, r0
 800e5ac:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800e5ae:	4b30      	ldr	r3, [pc, #192]	; (800e670 <tcp_input+0x28c>)
 800e5b0:	681b      	ldr	r3, [r3, #0]
 800e5b2:	899b      	ldrh	r3, [r3, #12]
 800e5b4:	b29b      	uxth	r3, r3
 800e5b6:	4618      	mov	r0, r3
 800e5b8:	f7fc fe40 	bl	800b23c <lwip_htons>
 800e5bc:	4603      	mov	r3, r0
 800e5be:	b2db      	uxtb	r3, r3
 800e5c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e5c4:	b2da      	uxtb	r2, r3
 800e5c6:	4b34      	ldr	r3, [pc, #208]	; (800e698 <tcp_input+0x2b4>)
 800e5c8:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	891a      	ldrh	r2, [r3, #8]
 800e5ce:	4b33      	ldr	r3, [pc, #204]	; (800e69c <tcp_input+0x2b8>)
 800e5d0:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800e5d2:	4b31      	ldr	r3, [pc, #196]	; (800e698 <tcp_input+0x2b4>)
 800e5d4:	781b      	ldrb	r3, [r3, #0]
 800e5d6:	f003 0303 	and.w	r3, r3, #3
 800e5da:	2b00      	cmp	r3, #0
 800e5dc:	d00c      	beq.n	800e5f8 <tcp_input+0x214>
    tcplen++;
 800e5de:	4b2f      	ldr	r3, [pc, #188]	; (800e69c <tcp_input+0x2b8>)
 800e5e0:	881b      	ldrh	r3, [r3, #0]
 800e5e2:	3301      	adds	r3, #1
 800e5e4:	b29a      	uxth	r2, r3
 800e5e6:	4b2d      	ldr	r3, [pc, #180]	; (800e69c <tcp_input+0x2b8>)
 800e5e8:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	891a      	ldrh	r2, [r3, #8]
 800e5ee:	4b2b      	ldr	r3, [pc, #172]	; (800e69c <tcp_input+0x2b8>)
 800e5f0:	881b      	ldrh	r3, [r3, #0]
 800e5f2:	429a      	cmp	r2, r3
 800e5f4:	f200 82d9 	bhi.w	800ebaa <tcp_input+0x7c6>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800e5f8:	2300      	movs	r3, #0
 800e5fa:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e5fc:	4b28      	ldr	r3, [pc, #160]	; (800e6a0 <tcp_input+0x2bc>)
 800e5fe:	681b      	ldr	r3, [r3, #0]
 800e600:	61fb      	str	r3, [r7, #28]
 800e602:	e09d      	b.n	800e740 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800e604:	69fb      	ldr	r3, [r7, #28]
 800e606:	7d1b      	ldrb	r3, [r3, #20]
 800e608:	2b00      	cmp	r3, #0
 800e60a:	d105      	bne.n	800e618 <tcp_input+0x234>
 800e60c:	4b15      	ldr	r3, [pc, #84]	; (800e664 <tcp_input+0x280>)
 800e60e:	22fb      	movs	r2, #251	; 0xfb
 800e610:	4924      	ldr	r1, [pc, #144]	; (800e6a4 <tcp_input+0x2c0>)
 800e612:	4816      	ldr	r0, [pc, #88]	; (800e66c <tcp_input+0x288>)
 800e614:	f009 f92c 	bl	8017870 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800e618:	69fb      	ldr	r3, [r7, #28]
 800e61a:	7d1b      	ldrb	r3, [r3, #20]
 800e61c:	2b0a      	cmp	r3, #10
 800e61e:	d105      	bne.n	800e62c <tcp_input+0x248>
 800e620:	4b10      	ldr	r3, [pc, #64]	; (800e664 <tcp_input+0x280>)
 800e622:	22fc      	movs	r2, #252	; 0xfc
 800e624:	4920      	ldr	r1, [pc, #128]	; (800e6a8 <tcp_input+0x2c4>)
 800e626:	4811      	ldr	r0, [pc, #68]	; (800e66c <tcp_input+0x288>)
 800e628:	f009 f922 	bl	8017870 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800e62c:	69fb      	ldr	r3, [r7, #28]
 800e62e:	7d1b      	ldrb	r3, [r3, #20]
 800e630:	2b01      	cmp	r3, #1
 800e632:	d105      	bne.n	800e640 <tcp_input+0x25c>
 800e634:	4b0b      	ldr	r3, [pc, #44]	; (800e664 <tcp_input+0x280>)
 800e636:	22fd      	movs	r2, #253	; 0xfd
 800e638:	491c      	ldr	r1, [pc, #112]	; (800e6ac <tcp_input+0x2c8>)
 800e63a:	480c      	ldr	r0, [pc, #48]	; (800e66c <tcp_input+0x288>)
 800e63c:	f009 f918 	bl	8017870 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e640:	69fb      	ldr	r3, [r7, #28]
 800e642:	7a1b      	ldrb	r3, [r3, #8]
 800e644:	2b00      	cmp	r3, #0
 800e646:	d033      	beq.n	800e6b0 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800e648:	69fb      	ldr	r3, [r7, #28]
 800e64a:	7a1a      	ldrb	r2, [r3, #8]
 800e64c:	4b09      	ldr	r3, [pc, #36]	; (800e674 <tcp_input+0x290>)
 800e64e:	685b      	ldr	r3, [r3, #4]
 800e650:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e654:	3301      	adds	r3, #1
 800e656:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e658:	429a      	cmp	r2, r3
 800e65a:	d029      	beq.n	800e6b0 <tcp_input+0x2cc>
      prev = pcb;
 800e65c:	69fb      	ldr	r3, [r7, #28]
 800e65e:	61bb      	str	r3, [r7, #24]
      continue;
 800e660:	e06b      	b.n	800e73a <tcp_input+0x356>
 800e662:	bf00      	nop
 800e664:	0801de74 	.word	0x0801de74
 800e668:	0801dea8 	.word	0x0801dea8
 800e66c:	0801dec0 	.word	0x0801dec0
 800e670:	20000468 	.word	0x20000468
 800e674:	20003d18 	.word	0x20003d18
 800e678:	2000046c 	.word	0x2000046c
 800e67c:	20000470 	.word	0x20000470
 800e680:	2000046e 	.word	0x2000046e
 800e684:	0801dee8 	.word	0x0801dee8
 800e688:	0801def8 	.word	0x0801def8
 800e68c:	0801df04 	.word	0x0801df04
 800e690:	20000478 	.word	0x20000478
 800e694:	2000047c 	.word	0x2000047c
 800e698:	20000484 	.word	0x20000484
 800e69c:	20000482 	.word	0x20000482
 800e6a0:	20006e3c 	.word	0x20006e3c
 800e6a4:	0801df24 	.word	0x0801df24
 800e6a8:	0801df4c 	.word	0x0801df4c
 800e6ac:	0801df78 	.word	0x0801df78
    }

    if (pcb->remote_port == tcphdr->src &&
 800e6b0:	69fb      	ldr	r3, [r7, #28]
 800e6b2:	8b1a      	ldrh	r2, [r3, #24]
 800e6b4:	4b94      	ldr	r3, [pc, #592]	; (800e908 <tcp_input+0x524>)
 800e6b6:	681b      	ldr	r3, [r3, #0]
 800e6b8:	881b      	ldrh	r3, [r3, #0]
 800e6ba:	b29b      	uxth	r3, r3
 800e6bc:	429a      	cmp	r2, r3
 800e6be:	d13a      	bne.n	800e736 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800e6c0:	69fb      	ldr	r3, [r7, #28]
 800e6c2:	8ada      	ldrh	r2, [r3, #22]
 800e6c4:	4b90      	ldr	r3, [pc, #576]	; (800e908 <tcp_input+0x524>)
 800e6c6:	681b      	ldr	r3, [r3, #0]
 800e6c8:	885b      	ldrh	r3, [r3, #2]
 800e6ca:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800e6cc:	429a      	cmp	r2, r3
 800e6ce:	d132      	bne.n	800e736 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e6d0:	69fb      	ldr	r3, [r7, #28]
 800e6d2:	685a      	ldr	r2, [r3, #4]
 800e6d4:	4b8d      	ldr	r3, [pc, #564]	; (800e90c <tcp_input+0x528>)
 800e6d6:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800e6d8:	429a      	cmp	r2, r3
 800e6da:	d12c      	bne.n	800e736 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800e6dc:	69fb      	ldr	r3, [r7, #28]
 800e6de:	681a      	ldr	r2, [r3, #0]
 800e6e0:	4b8a      	ldr	r3, [pc, #552]	; (800e90c <tcp_input+0x528>)
 800e6e2:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e6e4:	429a      	cmp	r2, r3
 800e6e6:	d126      	bne.n	800e736 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800e6e8:	69fb      	ldr	r3, [r7, #28]
 800e6ea:	68db      	ldr	r3, [r3, #12]
 800e6ec:	69fa      	ldr	r2, [r7, #28]
 800e6ee:	429a      	cmp	r2, r3
 800e6f0:	d106      	bne.n	800e700 <tcp_input+0x31c>
 800e6f2:	4b87      	ldr	r3, [pc, #540]	; (800e910 <tcp_input+0x52c>)
 800e6f4:	f240 120d 	movw	r2, #269	; 0x10d
 800e6f8:	4986      	ldr	r1, [pc, #536]	; (800e914 <tcp_input+0x530>)
 800e6fa:	4887      	ldr	r0, [pc, #540]	; (800e918 <tcp_input+0x534>)
 800e6fc:	f009 f8b8 	bl	8017870 <iprintf>
      if (prev != NULL) {
 800e700:	69bb      	ldr	r3, [r7, #24]
 800e702:	2b00      	cmp	r3, #0
 800e704:	d00a      	beq.n	800e71c <tcp_input+0x338>
        prev->next = pcb->next;
 800e706:	69fb      	ldr	r3, [r7, #28]
 800e708:	68da      	ldr	r2, [r3, #12]
 800e70a:	69bb      	ldr	r3, [r7, #24]
 800e70c:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800e70e:	4b83      	ldr	r3, [pc, #524]	; (800e91c <tcp_input+0x538>)
 800e710:	681a      	ldr	r2, [r3, #0]
 800e712:	69fb      	ldr	r3, [r7, #28]
 800e714:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800e716:	4a81      	ldr	r2, [pc, #516]	; (800e91c <tcp_input+0x538>)
 800e718:	69fb      	ldr	r3, [r7, #28]
 800e71a:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800e71c:	69fb      	ldr	r3, [r7, #28]
 800e71e:	68db      	ldr	r3, [r3, #12]
 800e720:	69fa      	ldr	r2, [r7, #28]
 800e722:	429a      	cmp	r2, r3
 800e724:	d111      	bne.n	800e74a <tcp_input+0x366>
 800e726:	4b7a      	ldr	r3, [pc, #488]	; (800e910 <tcp_input+0x52c>)
 800e728:	f240 1215 	movw	r2, #277	; 0x115
 800e72c:	497c      	ldr	r1, [pc, #496]	; (800e920 <tcp_input+0x53c>)
 800e72e:	487a      	ldr	r0, [pc, #488]	; (800e918 <tcp_input+0x534>)
 800e730:	f009 f89e 	bl	8017870 <iprintf>
      break;
 800e734:	e009      	b.n	800e74a <tcp_input+0x366>
    }
    prev = pcb;
 800e736:	69fb      	ldr	r3, [r7, #28]
 800e738:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e73a:	69fb      	ldr	r3, [r7, #28]
 800e73c:	68db      	ldr	r3, [r3, #12]
 800e73e:	61fb      	str	r3, [r7, #28]
 800e740:	69fb      	ldr	r3, [r7, #28]
 800e742:	2b00      	cmp	r3, #0
 800e744:	f47f af5e 	bne.w	800e604 <tcp_input+0x220>
 800e748:	e000      	b.n	800e74c <tcp_input+0x368>
      break;
 800e74a:	bf00      	nop
  }

  if (pcb == NULL) {
 800e74c:	69fb      	ldr	r3, [r7, #28]
 800e74e:	2b00      	cmp	r3, #0
 800e750:	f040 8095 	bne.w	800e87e <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e754:	4b73      	ldr	r3, [pc, #460]	; (800e924 <tcp_input+0x540>)
 800e756:	681b      	ldr	r3, [r3, #0]
 800e758:	61fb      	str	r3, [r7, #28]
 800e75a:	e03f      	b.n	800e7dc <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800e75c:	69fb      	ldr	r3, [r7, #28]
 800e75e:	7d1b      	ldrb	r3, [r3, #20]
 800e760:	2b0a      	cmp	r3, #10
 800e762:	d006      	beq.n	800e772 <tcp_input+0x38e>
 800e764:	4b6a      	ldr	r3, [pc, #424]	; (800e910 <tcp_input+0x52c>)
 800e766:	f240 121f 	movw	r2, #287	; 0x11f
 800e76a:	496f      	ldr	r1, [pc, #444]	; (800e928 <tcp_input+0x544>)
 800e76c:	486a      	ldr	r0, [pc, #424]	; (800e918 <tcp_input+0x534>)
 800e76e:	f009 f87f 	bl	8017870 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e772:	69fb      	ldr	r3, [r7, #28]
 800e774:	7a1b      	ldrb	r3, [r3, #8]
 800e776:	2b00      	cmp	r3, #0
 800e778:	d009      	beq.n	800e78e <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800e77a:	69fb      	ldr	r3, [r7, #28]
 800e77c:	7a1a      	ldrb	r2, [r3, #8]
 800e77e:	4b63      	ldr	r3, [pc, #396]	; (800e90c <tcp_input+0x528>)
 800e780:	685b      	ldr	r3, [r3, #4]
 800e782:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e786:	3301      	adds	r3, #1
 800e788:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e78a:	429a      	cmp	r2, r3
 800e78c:	d122      	bne.n	800e7d4 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800e78e:	69fb      	ldr	r3, [r7, #28]
 800e790:	8b1a      	ldrh	r2, [r3, #24]
 800e792:	4b5d      	ldr	r3, [pc, #372]	; (800e908 <tcp_input+0x524>)
 800e794:	681b      	ldr	r3, [r3, #0]
 800e796:	881b      	ldrh	r3, [r3, #0]
 800e798:	b29b      	uxth	r3, r3
 800e79a:	429a      	cmp	r2, r3
 800e79c:	d11b      	bne.n	800e7d6 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800e79e:	69fb      	ldr	r3, [r7, #28]
 800e7a0:	8ada      	ldrh	r2, [r3, #22]
 800e7a2:	4b59      	ldr	r3, [pc, #356]	; (800e908 <tcp_input+0x524>)
 800e7a4:	681b      	ldr	r3, [r3, #0]
 800e7a6:	885b      	ldrh	r3, [r3, #2]
 800e7a8:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800e7aa:	429a      	cmp	r2, r3
 800e7ac:	d113      	bne.n	800e7d6 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e7ae:	69fb      	ldr	r3, [r7, #28]
 800e7b0:	685a      	ldr	r2, [r3, #4]
 800e7b2:	4b56      	ldr	r3, [pc, #344]	; (800e90c <tcp_input+0x528>)
 800e7b4:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800e7b6:	429a      	cmp	r2, r3
 800e7b8:	d10d      	bne.n	800e7d6 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800e7ba:	69fb      	ldr	r3, [r7, #28]
 800e7bc:	681a      	ldr	r2, [r3, #0]
 800e7be:	4b53      	ldr	r3, [pc, #332]	; (800e90c <tcp_input+0x528>)
 800e7c0:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e7c2:	429a      	cmp	r2, r3
 800e7c4:	d107      	bne.n	800e7d6 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800e7c6:	69f8      	ldr	r0, [r7, #28]
 800e7c8:	f000 fb54 	bl	800ee74 <tcp_timewait_input>
        }
        pbuf_free(p);
 800e7cc:	6878      	ldr	r0, [r7, #4]
 800e7ce:	f7fd ffd1 	bl	800c774 <pbuf_free>
        return;
 800e7d2:	e1f0      	b.n	800ebb6 <tcp_input+0x7d2>
        continue;
 800e7d4:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e7d6:	69fb      	ldr	r3, [r7, #28]
 800e7d8:	68db      	ldr	r3, [r3, #12]
 800e7da:	61fb      	str	r3, [r7, #28]
 800e7dc:	69fb      	ldr	r3, [r7, #28]
 800e7de:	2b00      	cmp	r3, #0
 800e7e0:	d1bc      	bne.n	800e75c <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800e7e2:	2300      	movs	r3, #0
 800e7e4:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800e7e6:	4b51      	ldr	r3, [pc, #324]	; (800e92c <tcp_input+0x548>)
 800e7e8:	681b      	ldr	r3, [r3, #0]
 800e7ea:	617b      	str	r3, [r7, #20]
 800e7ec:	e02a      	b.n	800e844 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800e7ee:	697b      	ldr	r3, [r7, #20]
 800e7f0:	7a1b      	ldrb	r3, [r3, #8]
 800e7f2:	2b00      	cmp	r3, #0
 800e7f4:	d00c      	beq.n	800e810 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800e7f6:	697b      	ldr	r3, [r7, #20]
 800e7f8:	7a1a      	ldrb	r2, [r3, #8]
 800e7fa:	4b44      	ldr	r3, [pc, #272]	; (800e90c <tcp_input+0x528>)
 800e7fc:	685b      	ldr	r3, [r3, #4]
 800e7fe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e802:	3301      	adds	r3, #1
 800e804:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800e806:	429a      	cmp	r2, r3
 800e808:	d002      	beq.n	800e810 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800e80a:	697b      	ldr	r3, [r7, #20]
 800e80c:	61bb      	str	r3, [r7, #24]
        continue;
 800e80e:	e016      	b.n	800e83e <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800e810:	697b      	ldr	r3, [r7, #20]
 800e812:	8ada      	ldrh	r2, [r3, #22]
 800e814:	4b3c      	ldr	r3, [pc, #240]	; (800e908 <tcp_input+0x524>)
 800e816:	681b      	ldr	r3, [r3, #0]
 800e818:	885b      	ldrh	r3, [r3, #2]
 800e81a:	b29b      	uxth	r3, r3
 800e81c:	429a      	cmp	r2, r3
 800e81e:	d10c      	bne.n	800e83a <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800e820:	697b      	ldr	r3, [r7, #20]
 800e822:	681a      	ldr	r2, [r3, #0]
 800e824:	4b39      	ldr	r3, [pc, #228]	; (800e90c <tcp_input+0x528>)
 800e826:	695b      	ldr	r3, [r3, #20]
 800e828:	429a      	cmp	r2, r3
 800e82a:	d00f      	beq.n	800e84c <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800e82c:	697b      	ldr	r3, [r7, #20]
 800e82e:	2b00      	cmp	r3, #0
 800e830:	d00d      	beq.n	800e84e <tcp_input+0x46a>
 800e832:	697b      	ldr	r3, [r7, #20]
 800e834:	681b      	ldr	r3, [r3, #0]
 800e836:	2b00      	cmp	r3, #0
 800e838:	d009      	beq.n	800e84e <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800e83a:	697b      	ldr	r3, [r7, #20]
 800e83c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800e83e:	697b      	ldr	r3, [r7, #20]
 800e840:	68db      	ldr	r3, [r3, #12]
 800e842:	617b      	str	r3, [r7, #20]
 800e844:	697b      	ldr	r3, [r7, #20]
 800e846:	2b00      	cmp	r3, #0
 800e848:	d1d1      	bne.n	800e7ee <tcp_input+0x40a>
 800e84a:	e000      	b.n	800e84e <tcp_input+0x46a>
            break;
 800e84c:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800e84e:	697b      	ldr	r3, [r7, #20]
 800e850:	2b00      	cmp	r3, #0
 800e852:	d014      	beq.n	800e87e <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800e854:	69bb      	ldr	r3, [r7, #24]
 800e856:	2b00      	cmp	r3, #0
 800e858:	d00a      	beq.n	800e870 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800e85a:	697b      	ldr	r3, [r7, #20]
 800e85c:	68da      	ldr	r2, [r3, #12]
 800e85e:	69bb      	ldr	r3, [r7, #24]
 800e860:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800e862:	4b32      	ldr	r3, [pc, #200]	; (800e92c <tcp_input+0x548>)
 800e864:	681a      	ldr	r2, [r3, #0]
 800e866:	697b      	ldr	r3, [r7, #20]
 800e868:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800e86a:	4a30      	ldr	r2, [pc, #192]	; (800e92c <tcp_input+0x548>)
 800e86c:	697b      	ldr	r3, [r7, #20]
 800e86e:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800e870:	6978      	ldr	r0, [r7, #20]
 800e872:	f000 fa01 	bl	800ec78 <tcp_listen_input>
      }
      pbuf_free(p);
 800e876:	6878      	ldr	r0, [r7, #4]
 800e878:	f7fd ff7c 	bl	800c774 <pbuf_free>
      return;
 800e87c:	e19b      	b.n	800ebb6 <tcp_input+0x7d2>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800e87e:	69fb      	ldr	r3, [r7, #28]
 800e880:	2b00      	cmp	r3, #0
 800e882:	f000 8160 	beq.w	800eb46 <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800e886:	4b2a      	ldr	r3, [pc, #168]	; (800e930 <tcp_input+0x54c>)
 800e888:	2200      	movs	r2, #0
 800e88a:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	891a      	ldrh	r2, [r3, #8]
 800e890:	4b27      	ldr	r3, [pc, #156]	; (800e930 <tcp_input+0x54c>)
 800e892:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800e894:	4a26      	ldr	r2, [pc, #152]	; (800e930 <tcp_input+0x54c>)
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800e89a:	4b1b      	ldr	r3, [pc, #108]	; (800e908 <tcp_input+0x524>)
 800e89c:	681b      	ldr	r3, [r3, #0]
 800e89e:	4a24      	ldr	r2, [pc, #144]	; (800e930 <tcp_input+0x54c>)
 800e8a0:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800e8a2:	4b24      	ldr	r3, [pc, #144]	; (800e934 <tcp_input+0x550>)
 800e8a4:	2200      	movs	r2, #0
 800e8a6:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800e8a8:	4b23      	ldr	r3, [pc, #140]	; (800e938 <tcp_input+0x554>)
 800e8aa:	2200      	movs	r2, #0
 800e8ac:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800e8ae:	4b23      	ldr	r3, [pc, #140]	; (800e93c <tcp_input+0x558>)
 800e8b0:	2200      	movs	r2, #0
 800e8b2:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800e8b4:	4b22      	ldr	r3, [pc, #136]	; (800e940 <tcp_input+0x55c>)
 800e8b6:	781b      	ldrb	r3, [r3, #0]
 800e8b8:	f003 0308 	and.w	r3, r3, #8
 800e8bc:	2b00      	cmp	r3, #0
 800e8be:	d006      	beq.n	800e8ce <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	7b5b      	ldrb	r3, [r3, #13]
 800e8c4:	f043 0301 	orr.w	r3, r3, #1
 800e8c8:	b2da      	uxtb	r2, r3
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800e8ce:	69fb      	ldr	r3, [r7, #28]
 800e8d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e8d2:	2b00      	cmp	r3, #0
 800e8d4:	d038      	beq.n	800e948 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800e8d6:	69f8      	ldr	r0, [r7, #28]
 800e8d8:	f7ff f93e 	bl	800db58 <tcp_process_refused_data>
 800e8dc:	4603      	mov	r3, r0
 800e8de:	f113 0f0d 	cmn.w	r3, #13
 800e8e2:	d007      	beq.n	800e8f4 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800e8e4:	69fb      	ldr	r3, [r7, #28]
 800e8e6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800e8e8:	2b00      	cmp	r3, #0
 800e8ea:	d02d      	beq.n	800e948 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800e8ec:	4b15      	ldr	r3, [pc, #84]	; (800e944 <tcp_input+0x560>)
 800e8ee:	881b      	ldrh	r3, [r3, #0]
 800e8f0:	2b00      	cmp	r3, #0
 800e8f2:	d029      	beq.n	800e948 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800e8f4:	69fb      	ldr	r3, [r7, #28]
 800e8f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e8f8:	2b00      	cmp	r3, #0
 800e8fa:	f040 8104 	bne.w	800eb06 <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800e8fe:	69f8      	ldr	r0, [r7, #28]
 800e900:	f003 f9bc 	bl	8011c7c <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800e904:	e0ff      	b.n	800eb06 <tcp_input+0x722>
 800e906:	bf00      	nop
 800e908:	20000468 	.word	0x20000468
 800e90c:	20003d18 	.word	0x20003d18
 800e910:	0801de74 	.word	0x0801de74
 800e914:	0801dfa0 	.word	0x0801dfa0
 800e918:	0801dec0 	.word	0x0801dec0
 800e91c:	20006e3c 	.word	0x20006e3c
 800e920:	0801dfcc 	.word	0x0801dfcc
 800e924:	20006e4c 	.word	0x20006e4c
 800e928:	0801dff8 	.word	0x0801dff8
 800e92c:	20006e44 	.word	0x20006e44
 800e930:	20000458 	.word	0x20000458
 800e934:	20000488 	.word	0x20000488
 800e938:	20000485 	.word	0x20000485
 800e93c:	20000480 	.word	0x20000480
 800e940:	20000484 	.word	0x20000484
 800e944:	20000482 	.word	0x20000482
      }
    }
    tcp_input_pcb = pcb;
 800e948:	4a9c      	ldr	r2, [pc, #624]	; (800ebbc <tcp_input+0x7d8>)
 800e94a:	69fb      	ldr	r3, [r7, #28]
 800e94c:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800e94e:	69f8      	ldr	r0, [r7, #28]
 800e950:	f000 fb0a 	bl	800ef68 <tcp_process>
 800e954:	4603      	mov	r3, r0
 800e956:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800e958:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e95c:	f113 0f0d 	cmn.w	r3, #13
 800e960:	f000 80d3 	beq.w	800eb0a <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 800e964:	4b96      	ldr	r3, [pc, #600]	; (800ebc0 <tcp_input+0x7dc>)
 800e966:	781b      	ldrb	r3, [r3, #0]
 800e968:	f003 0308 	and.w	r3, r3, #8
 800e96c:	2b00      	cmp	r3, #0
 800e96e:	d015      	beq.n	800e99c <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800e970:	69fb      	ldr	r3, [r7, #28]
 800e972:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e976:	2b00      	cmp	r3, #0
 800e978:	d008      	beq.n	800e98c <tcp_input+0x5a8>
 800e97a:	69fb      	ldr	r3, [r7, #28]
 800e97c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e980:	69fa      	ldr	r2, [r7, #28]
 800e982:	6912      	ldr	r2, [r2, #16]
 800e984:	f06f 010d 	mvn.w	r1, #13
 800e988:	4610      	mov	r0, r2
 800e98a:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800e98c:	69f9      	ldr	r1, [r7, #28]
 800e98e:	488d      	ldr	r0, [pc, #564]	; (800ebc4 <tcp_input+0x7e0>)
 800e990:	f7ff fbb0 	bl	800e0f4 <tcp_pcb_remove>
        tcp_free(pcb);
 800e994:	69f8      	ldr	r0, [r7, #28]
 800e996:	f7fe f99d 	bl	800ccd4 <tcp_free>
 800e99a:	e0c1      	b.n	800eb20 <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 800e99c:	2300      	movs	r3, #0
 800e99e:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800e9a0:	4b89      	ldr	r3, [pc, #548]	; (800ebc8 <tcp_input+0x7e4>)
 800e9a2:	881b      	ldrh	r3, [r3, #0]
 800e9a4:	2b00      	cmp	r3, #0
 800e9a6:	d01d      	beq.n	800e9e4 <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800e9a8:	4b87      	ldr	r3, [pc, #540]	; (800ebc8 <tcp_input+0x7e4>)
 800e9aa:	881b      	ldrh	r3, [r3, #0]
 800e9ac:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800e9ae:	69fb      	ldr	r3, [r7, #28]
 800e9b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e9b4:	2b00      	cmp	r3, #0
 800e9b6:	d00a      	beq.n	800e9ce <tcp_input+0x5ea>
 800e9b8:	69fb      	ldr	r3, [r7, #28]
 800e9ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e9be:	69fa      	ldr	r2, [r7, #28]
 800e9c0:	6910      	ldr	r0, [r2, #16]
 800e9c2:	89fa      	ldrh	r2, [r7, #14]
 800e9c4:	69f9      	ldr	r1, [r7, #28]
 800e9c6:	4798      	blx	r3
 800e9c8:	4603      	mov	r3, r0
 800e9ca:	74fb      	strb	r3, [r7, #19]
 800e9cc:	e001      	b.n	800e9d2 <tcp_input+0x5ee>
 800e9ce:	2300      	movs	r3, #0
 800e9d0:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800e9d2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e9d6:	f113 0f0d 	cmn.w	r3, #13
 800e9da:	f000 8098 	beq.w	800eb0e <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 800e9de:	4b7a      	ldr	r3, [pc, #488]	; (800ebc8 <tcp_input+0x7e4>)
 800e9e0:	2200      	movs	r2, #0
 800e9e2:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800e9e4:	69f8      	ldr	r0, [r7, #28]
 800e9e6:	f000 f907 	bl	800ebf8 <tcp_input_delayed_close>
 800e9ea:	4603      	mov	r3, r0
 800e9ec:	2b00      	cmp	r3, #0
 800e9ee:	f040 8090 	bne.w	800eb12 <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800e9f2:	4b76      	ldr	r3, [pc, #472]	; (800ebcc <tcp_input+0x7e8>)
 800e9f4:	681b      	ldr	r3, [r3, #0]
 800e9f6:	2b00      	cmp	r3, #0
 800e9f8:	d041      	beq.n	800ea7e <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800e9fa:	69fb      	ldr	r3, [r7, #28]
 800e9fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e9fe:	2b00      	cmp	r3, #0
 800ea00:	d006      	beq.n	800ea10 <tcp_input+0x62c>
 800ea02:	4b73      	ldr	r3, [pc, #460]	; (800ebd0 <tcp_input+0x7ec>)
 800ea04:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800ea08:	4972      	ldr	r1, [pc, #456]	; (800ebd4 <tcp_input+0x7f0>)
 800ea0a:	4873      	ldr	r0, [pc, #460]	; (800ebd8 <tcp_input+0x7f4>)
 800ea0c:	f008 ff30 	bl	8017870 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800ea10:	69fb      	ldr	r3, [r7, #28]
 800ea12:	8b5b      	ldrh	r3, [r3, #26]
 800ea14:	f003 0310 	and.w	r3, r3, #16
 800ea18:	2b00      	cmp	r3, #0
 800ea1a:	d008      	beq.n	800ea2e <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800ea1c:	4b6b      	ldr	r3, [pc, #428]	; (800ebcc <tcp_input+0x7e8>)
 800ea1e:	681b      	ldr	r3, [r3, #0]
 800ea20:	4618      	mov	r0, r3
 800ea22:	f7fd fea7 	bl	800c774 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800ea26:	69f8      	ldr	r0, [r7, #28]
 800ea28:	f7fe fc3c 	bl	800d2a4 <tcp_abort>
            goto aborted;
 800ea2c:	e078      	b.n	800eb20 <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800ea2e:	69fb      	ldr	r3, [r7, #28]
 800ea30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ea34:	2b00      	cmp	r3, #0
 800ea36:	d00c      	beq.n	800ea52 <tcp_input+0x66e>
 800ea38:	69fb      	ldr	r3, [r7, #28]
 800ea3a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800ea3e:	69fb      	ldr	r3, [r7, #28]
 800ea40:	6918      	ldr	r0, [r3, #16]
 800ea42:	4b62      	ldr	r3, [pc, #392]	; (800ebcc <tcp_input+0x7e8>)
 800ea44:	681a      	ldr	r2, [r3, #0]
 800ea46:	2300      	movs	r3, #0
 800ea48:	69f9      	ldr	r1, [r7, #28]
 800ea4a:	47a0      	blx	r4
 800ea4c:	4603      	mov	r3, r0
 800ea4e:	74fb      	strb	r3, [r7, #19]
 800ea50:	e008      	b.n	800ea64 <tcp_input+0x680>
 800ea52:	4b5e      	ldr	r3, [pc, #376]	; (800ebcc <tcp_input+0x7e8>)
 800ea54:	681a      	ldr	r2, [r3, #0]
 800ea56:	2300      	movs	r3, #0
 800ea58:	69f9      	ldr	r1, [r7, #28]
 800ea5a:	2000      	movs	r0, #0
 800ea5c:	f7ff f952 	bl	800dd04 <tcp_recv_null>
 800ea60:	4603      	mov	r3, r0
 800ea62:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800ea64:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ea68:	f113 0f0d 	cmn.w	r3, #13
 800ea6c:	d053      	beq.n	800eb16 <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800ea6e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ea72:	2b00      	cmp	r3, #0
 800ea74:	d003      	beq.n	800ea7e <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800ea76:	4b55      	ldr	r3, [pc, #340]	; (800ebcc <tcp_input+0x7e8>)
 800ea78:	681a      	ldr	r2, [r3, #0]
 800ea7a:	69fb      	ldr	r3, [r7, #28]
 800ea7c:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800ea7e:	4b50      	ldr	r3, [pc, #320]	; (800ebc0 <tcp_input+0x7dc>)
 800ea80:	781b      	ldrb	r3, [r3, #0]
 800ea82:	f003 0320 	and.w	r3, r3, #32
 800ea86:	2b00      	cmp	r3, #0
 800ea88:	d030      	beq.n	800eaec <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 800ea8a:	69fb      	ldr	r3, [r7, #28]
 800ea8c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ea8e:	2b00      	cmp	r3, #0
 800ea90:	d009      	beq.n	800eaa6 <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800ea92:	69fb      	ldr	r3, [r7, #28]
 800ea94:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ea96:	7b5a      	ldrb	r2, [r3, #13]
 800ea98:	69fb      	ldr	r3, [r7, #28]
 800ea9a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ea9c:	f042 0220 	orr.w	r2, r2, #32
 800eaa0:	b2d2      	uxtb	r2, r2
 800eaa2:	735a      	strb	r2, [r3, #13]
 800eaa4:	e022      	b.n	800eaec <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800eaa6:	69fb      	ldr	r3, [r7, #28]
 800eaa8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800eaaa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800eaae:	d005      	beq.n	800eabc <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 800eab0:	69fb      	ldr	r3, [r7, #28]
 800eab2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800eab4:	3301      	adds	r3, #1
 800eab6:	b29a      	uxth	r2, r3
 800eab8:	69fb      	ldr	r3, [r7, #28]
 800eaba:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800eabc:	69fb      	ldr	r3, [r7, #28]
 800eabe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800eac2:	2b00      	cmp	r3, #0
 800eac4:	d00b      	beq.n	800eade <tcp_input+0x6fa>
 800eac6:	69fb      	ldr	r3, [r7, #28]
 800eac8:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800eacc:	69fb      	ldr	r3, [r7, #28]
 800eace:	6918      	ldr	r0, [r3, #16]
 800ead0:	2300      	movs	r3, #0
 800ead2:	2200      	movs	r2, #0
 800ead4:	69f9      	ldr	r1, [r7, #28]
 800ead6:	47a0      	blx	r4
 800ead8:	4603      	mov	r3, r0
 800eada:	74fb      	strb	r3, [r7, #19]
 800eadc:	e001      	b.n	800eae2 <tcp_input+0x6fe>
 800eade:	2300      	movs	r3, #0
 800eae0:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800eae2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800eae6:	f113 0f0d 	cmn.w	r3, #13
 800eaea:	d016      	beq.n	800eb1a <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800eaec:	4b33      	ldr	r3, [pc, #204]	; (800ebbc <tcp_input+0x7d8>)
 800eaee:	2200      	movs	r2, #0
 800eaf0:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800eaf2:	69f8      	ldr	r0, [r7, #28]
 800eaf4:	f000 f880 	bl	800ebf8 <tcp_input_delayed_close>
 800eaf8:	4603      	mov	r3, r0
 800eafa:	2b00      	cmp	r3, #0
 800eafc:	d10f      	bne.n	800eb1e <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800eafe:	69f8      	ldr	r0, [r7, #28]
 800eb00:	f002 fab8 	bl	8011074 <tcp_output>
 800eb04:	e00c      	b.n	800eb20 <tcp_input+0x73c>
        goto aborted;
 800eb06:	bf00      	nop
 800eb08:	e00a      	b.n	800eb20 <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800eb0a:	bf00      	nop
 800eb0c:	e008      	b.n	800eb20 <tcp_input+0x73c>
              goto aborted;
 800eb0e:	bf00      	nop
 800eb10:	e006      	b.n	800eb20 <tcp_input+0x73c>
          goto aborted;
 800eb12:	bf00      	nop
 800eb14:	e004      	b.n	800eb20 <tcp_input+0x73c>
            goto aborted;
 800eb16:	bf00      	nop
 800eb18:	e002      	b.n	800eb20 <tcp_input+0x73c>
              goto aborted;
 800eb1a:	bf00      	nop
 800eb1c:	e000      	b.n	800eb20 <tcp_input+0x73c>
          goto aborted;
 800eb1e:	bf00      	nop
    tcp_input_pcb = NULL;
 800eb20:	4b26      	ldr	r3, [pc, #152]	; (800ebbc <tcp_input+0x7d8>)
 800eb22:	2200      	movs	r2, #0
 800eb24:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800eb26:	4b29      	ldr	r3, [pc, #164]	; (800ebcc <tcp_input+0x7e8>)
 800eb28:	2200      	movs	r2, #0
 800eb2a:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800eb2c:	4b2b      	ldr	r3, [pc, #172]	; (800ebdc <tcp_input+0x7f8>)
 800eb2e:	685b      	ldr	r3, [r3, #4]
 800eb30:	2b00      	cmp	r3, #0
 800eb32:	d03f      	beq.n	800ebb4 <tcp_input+0x7d0>
      pbuf_free(inseg.p);
 800eb34:	4b29      	ldr	r3, [pc, #164]	; (800ebdc <tcp_input+0x7f8>)
 800eb36:	685b      	ldr	r3, [r3, #4]
 800eb38:	4618      	mov	r0, r3
 800eb3a:	f7fd fe1b 	bl	800c774 <pbuf_free>
      inseg.p = NULL;
 800eb3e:	4b27      	ldr	r3, [pc, #156]	; (800ebdc <tcp_input+0x7f8>)
 800eb40:	2200      	movs	r2, #0
 800eb42:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800eb44:	e036      	b.n	800ebb4 <tcp_input+0x7d0>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800eb46:	4b26      	ldr	r3, [pc, #152]	; (800ebe0 <tcp_input+0x7fc>)
 800eb48:	681b      	ldr	r3, [r3, #0]
 800eb4a:	899b      	ldrh	r3, [r3, #12]
 800eb4c:	b29b      	uxth	r3, r3
 800eb4e:	4618      	mov	r0, r3
 800eb50:	f7fc fb74 	bl	800b23c <lwip_htons>
 800eb54:	4603      	mov	r3, r0
 800eb56:	b2db      	uxtb	r3, r3
 800eb58:	f003 0304 	and.w	r3, r3, #4
 800eb5c:	2b00      	cmp	r3, #0
 800eb5e:	d118      	bne.n	800eb92 <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800eb60:	4b20      	ldr	r3, [pc, #128]	; (800ebe4 <tcp_input+0x800>)
 800eb62:	6819      	ldr	r1, [r3, #0]
 800eb64:	4b20      	ldr	r3, [pc, #128]	; (800ebe8 <tcp_input+0x804>)
 800eb66:	881b      	ldrh	r3, [r3, #0]
 800eb68:	461a      	mov	r2, r3
 800eb6a:	4b20      	ldr	r3, [pc, #128]	; (800ebec <tcp_input+0x808>)
 800eb6c:	681b      	ldr	r3, [r3, #0]
 800eb6e:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800eb70:	4b1b      	ldr	r3, [pc, #108]	; (800ebe0 <tcp_input+0x7fc>)
 800eb72:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800eb74:	885b      	ldrh	r3, [r3, #2]
 800eb76:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800eb78:	4a19      	ldr	r2, [pc, #100]	; (800ebe0 <tcp_input+0x7fc>)
 800eb7a:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800eb7c:	8812      	ldrh	r2, [r2, #0]
 800eb7e:	b292      	uxth	r2, r2
 800eb80:	9202      	str	r2, [sp, #8]
 800eb82:	9301      	str	r3, [sp, #4]
 800eb84:	4b1a      	ldr	r3, [pc, #104]	; (800ebf0 <tcp_input+0x80c>)
 800eb86:	9300      	str	r3, [sp, #0]
 800eb88:	4b1a      	ldr	r3, [pc, #104]	; (800ebf4 <tcp_input+0x810>)
 800eb8a:	4602      	mov	r2, r0
 800eb8c:	2000      	movs	r0, #0
 800eb8e:	f003 f825 	bl	8011bdc <tcp_rst>
    pbuf_free(p);
 800eb92:	6878      	ldr	r0, [r7, #4]
 800eb94:	f7fd fdee 	bl	800c774 <pbuf_free>
  return;
 800eb98:	e00c      	b.n	800ebb4 <tcp_input+0x7d0>
    goto dropped;
 800eb9a:	bf00      	nop
 800eb9c:	e006      	b.n	800ebac <tcp_input+0x7c8>
    goto dropped;
 800eb9e:	bf00      	nop
 800eba0:	e004      	b.n	800ebac <tcp_input+0x7c8>
    goto dropped;
 800eba2:	bf00      	nop
 800eba4:	e002      	b.n	800ebac <tcp_input+0x7c8>
      goto dropped;
 800eba6:	bf00      	nop
 800eba8:	e000      	b.n	800ebac <tcp_input+0x7c8>
      goto dropped;
 800ebaa:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800ebac:	6878      	ldr	r0, [r7, #4]
 800ebae:	f7fd fde1 	bl	800c774 <pbuf_free>
 800ebb2:	e000      	b.n	800ebb6 <tcp_input+0x7d2>
  return;
 800ebb4:	bf00      	nop
}
 800ebb6:	3724      	adds	r7, #36	; 0x24
 800ebb8:	46bd      	mov	sp, r7
 800ebba:	bd90      	pop	{r4, r7, pc}
 800ebbc:	20006e50 	.word	0x20006e50
 800ebc0:	20000485 	.word	0x20000485
 800ebc4:	20006e3c 	.word	0x20006e3c
 800ebc8:	20000480 	.word	0x20000480
 800ebcc:	20000488 	.word	0x20000488
 800ebd0:	0801de74 	.word	0x0801de74
 800ebd4:	0801e028 	.word	0x0801e028
 800ebd8:	0801dec0 	.word	0x0801dec0
 800ebdc:	20000458 	.word	0x20000458
 800ebe0:	20000468 	.word	0x20000468
 800ebe4:	2000047c 	.word	0x2000047c
 800ebe8:	20000482 	.word	0x20000482
 800ebec:	20000478 	.word	0x20000478
 800ebf0:	20003d28 	.word	0x20003d28
 800ebf4:	20003d2c 	.word	0x20003d2c

0800ebf8 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800ebf8:	b580      	push	{r7, lr}
 800ebfa:	b082      	sub	sp, #8
 800ebfc:	af00      	add	r7, sp, #0
 800ebfe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800ec00:	687b      	ldr	r3, [r7, #4]
 800ec02:	2b00      	cmp	r3, #0
 800ec04:	d106      	bne.n	800ec14 <tcp_input_delayed_close+0x1c>
 800ec06:	4b17      	ldr	r3, [pc, #92]	; (800ec64 <tcp_input_delayed_close+0x6c>)
 800ec08:	f240 225a 	movw	r2, #602	; 0x25a
 800ec0c:	4916      	ldr	r1, [pc, #88]	; (800ec68 <tcp_input_delayed_close+0x70>)
 800ec0e:	4817      	ldr	r0, [pc, #92]	; (800ec6c <tcp_input_delayed_close+0x74>)
 800ec10:	f008 fe2e 	bl	8017870 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800ec14:	4b16      	ldr	r3, [pc, #88]	; (800ec70 <tcp_input_delayed_close+0x78>)
 800ec16:	781b      	ldrb	r3, [r3, #0]
 800ec18:	f003 0310 	and.w	r3, r3, #16
 800ec1c:	2b00      	cmp	r3, #0
 800ec1e:	d01c      	beq.n	800ec5a <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	8b5b      	ldrh	r3, [r3, #26]
 800ec24:	f003 0310 	and.w	r3, r3, #16
 800ec28:	2b00      	cmp	r3, #0
 800ec2a:	d10d      	bne.n	800ec48 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ec32:	2b00      	cmp	r3, #0
 800ec34:	d008      	beq.n	800ec48 <tcp_input_delayed_close+0x50>
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ec3c:	687a      	ldr	r2, [r7, #4]
 800ec3e:	6912      	ldr	r2, [r2, #16]
 800ec40:	f06f 010e 	mvn.w	r1, #14
 800ec44:	4610      	mov	r0, r2
 800ec46:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800ec48:	6879      	ldr	r1, [r7, #4]
 800ec4a:	480a      	ldr	r0, [pc, #40]	; (800ec74 <tcp_input_delayed_close+0x7c>)
 800ec4c:	f7ff fa52 	bl	800e0f4 <tcp_pcb_remove>
    tcp_free(pcb);
 800ec50:	6878      	ldr	r0, [r7, #4]
 800ec52:	f7fe f83f 	bl	800ccd4 <tcp_free>
    return 1;
 800ec56:	2301      	movs	r3, #1
 800ec58:	e000      	b.n	800ec5c <tcp_input_delayed_close+0x64>
  }
  return 0;
 800ec5a:	2300      	movs	r3, #0
}
 800ec5c:	4618      	mov	r0, r3
 800ec5e:	3708      	adds	r7, #8
 800ec60:	46bd      	mov	sp, r7
 800ec62:	bd80      	pop	{r7, pc}
 800ec64:	0801de74 	.word	0x0801de74
 800ec68:	0801e044 	.word	0x0801e044
 800ec6c:	0801dec0 	.word	0x0801dec0
 800ec70:	20000485 	.word	0x20000485
 800ec74:	20006e3c 	.word	0x20006e3c

0800ec78 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800ec78:	b590      	push	{r4, r7, lr}
 800ec7a:	b08b      	sub	sp, #44	; 0x2c
 800ec7c:	af04      	add	r7, sp, #16
 800ec7e:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800ec80:	4b6f      	ldr	r3, [pc, #444]	; (800ee40 <tcp_listen_input+0x1c8>)
 800ec82:	781b      	ldrb	r3, [r3, #0]
 800ec84:	f003 0304 	and.w	r3, r3, #4
 800ec88:	2b00      	cmp	r3, #0
 800ec8a:	f040 80d2 	bne.w	800ee32 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	2b00      	cmp	r3, #0
 800ec92:	d106      	bne.n	800eca2 <tcp_listen_input+0x2a>
 800ec94:	4b6b      	ldr	r3, [pc, #428]	; (800ee44 <tcp_listen_input+0x1cc>)
 800ec96:	f240 2281 	movw	r2, #641	; 0x281
 800ec9a:	496b      	ldr	r1, [pc, #428]	; (800ee48 <tcp_listen_input+0x1d0>)
 800ec9c:	486b      	ldr	r0, [pc, #428]	; (800ee4c <tcp_listen_input+0x1d4>)
 800ec9e:	f008 fde7 	bl	8017870 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800eca2:	4b67      	ldr	r3, [pc, #412]	; (800ee40 <tcp_listen_input+0x1c8>)
 800eca4:	781b      	ldrb	r3, [r3, #0]
 800eca6:	f003 0310 	and.w	r3, r3, #16
 800ecaa:	2b00      	cmp	r3, #0
 800ecac:	d019      	beq.n	800ece2 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ecae:	4b68      	ldr	r3, [pc, #416]	; (800ee50 <tcp_listen_input+0x1d8>)
 800ecb0:	6819      	ldr	r1, [r3, #0]
 800ecb2:	4b68      	ldr	r3, [pc, #416]	; (800ee54 <tcp_listen_input+0x1dc>)
 800ecb4:	881b      	ldrh	r3, [r3, #0]
 800ecb6:	461a      	mov	r2, r3
 800ecb8:	4b67      	ldr	r3, [pc, #412]	; (800ee58 <tcp_listen_input+0x1e0>)
 800ecba:	681b      	ldr	r3, [r3, #0]
 800ecbc:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ecbe:	4b67      	ldr	r3, [pc, #412]	; (800ee5c <tcp_listen_input+0x1e4>)
 800ecc0:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ecc2:	885b      	ldrh	r3, [r3, #2]
 800ecc4:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ecc6:	4a65      	ldr	r2, [pc, #404]	; (800ee5c <tcp_listen_input+0x1e4>)
 800ecc8:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ecca:	8812      	ldrh	r2, [r2, #0]
 800eccc:	b292      	uxth	r2, r2
 800ecce:	9202      	str	r2, [sp, #8]
 800ecd0:	9301      	str	r3, [sp, #4]
 800ecd2:	4b63      	ldr	r3, [pc, #396]	; (800ee60 <tcp_listen_input+0x1e8>)
 800ecd4:	9300      	str	r3, [sp, #0]
 800ecd6:	4b63      	ldr	r3, [pc, #396]	; (800ee64 <tcp_listen_input+0x1ec>)
 800ecd8:	4602      	mov	r2, r0
 800ecda:	6878      	ldr	r0, [r7, #4]
 800ecdc:	f002 ff7e 	bl	8011bdc <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800ece0:	e0a9      	b.n	800ee36 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800ece2:	4b57      	ldr	r3, [pc, #348]	; (800ee40 <tcp_listen_input+0x1c8>)
 800ece4:	781b      	ldrb	r3, [r3, #0]
 800ece6:	f003 0302 	and.w	r3, r3, #2
 800ecea:	2b00      	cmp	r3, #0
 800ecec:	f000 80a3 	beq.w	800ee36 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	7d5b      	ldrb	r3, [r3, #21]
 800ecf4:	4618      	mov	r0, r3
 800ecf6:	f7ff f929 	bl	800df4c <tcp_alloc>
 800ecfa:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800ecfc:	697b      	ldr	r3, [r7, #20]
 800ecfe:	2b00      	cmp	r3, #0
 800ed00:	d111      	bne.n	800ed26 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	699b      	ldr	r3, [r3, #24]
 800ed06:	2b00      	cmp	r3, #0
 800ed08:	d00a      	beq.n	800ed20 <tcp_listen_input+0xa8>
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	699b      	ldr	r3, [r3, #24]
 800ed0e:	687a      	ldr	r2, [r7, #4]
 800ed10:	6910      	ldr	r0, [r2, #16]
 800ed12:	f04f 32ff 	mov.w	r2, #4294967295
 800ed16:	2100      	movs	r1, #0
 800ed18:	4798      	blx	r3
 800ed1a:	4603      	mov	r3, r0
 800ed1c:	73bb      	strb	r3, [r7, #14]
      return;
 800ed1e:	e08b      	b.n	800ee38 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800ed20:	23f0      	movs	r3, #240	; 0xf0
 800ed22:	73bb      	strb	r3, [r7, #14]
      return;
 800ed24:	e088      	b.n	800ee38 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800ed26:	4b50      	ldr	r3, [pc, #320]	; (800ee68 <tcp_listen_input+0x1f0>)
 800ed28:	695a      	ldr	r2, [r3, #20]
 800ed2a:	697b      	ldr	r3, [r7, #20]
 800ed2c:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800ed2e:	4b4e      	ldr	r3, [pc, #312]	; (800ee68 <tcp_listen_input+0x1f0>)
 800ed30:	691a      	ldr	r2, [r3, #16]
 800ed32:	697b      	ldr	r3, [r7, #20]
 800ed34:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	8ada      	ldrh	r2, [r3, #22]
 800ed3a:	697b      	ldr	r3, [r7, #20]
 800ed3c:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800ed3e:	4b47      	ldr	r3, [pc, #284]	; (800ee5c <tcp_listen_input+0x1e4>)
 800ed40:	681b      	ldr	r3, [r3, #0]
 800ed42:	881b      	ldrh	r3, [r3, #0]
 800ed44:	b29a      	uxth	r2, r3
 800ed46:	697b      	ldr	r3, [r7, #20]
 800ed48:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800ed4a:	697b      	ldr	r3, [r7, #20]
 800ed4c:	2203      	movs	r2, #3
 800ed4e:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800ed50:	4b41      	ldr	r3, [pc, #260]	; (800ee58 <tcp_listen_input+0x1e0>)
 800ed52:	681b      	ldr	r3, [r3, #0]
 800ed54:	1c5a      	adds	r2, r3, #1
 800ed56:	697b      	ldr	r3, [r7, #20]
 800ed58:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800ed5a:	697b      	ldr	r3, [r7, #20]
 800ed5c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ed5e:	697b      	ldr	r3, [r7, #20]
 800ed60:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800ed62:	6978      	ldr	r0, [r7, #20]
 800ed64:	f7ff fa5a 	bl	800e21c <tcp_next_iss>
 800ed68:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800ed6a:	697b      	ldr	r3, [r7, #20]
 800ed6c:	693a      	ldr	r2, [r7, #16]
 800ed6e:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800ed70:	697b      	ldr	r3, [r7, #20]
 800ed72:	693a      	ldr	r2, [r7, #16]
 800ed74:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800ed76:	697b      	ldr	r3, [r7, #20]
 800ed78:	693a      	ldr	r2, [r7, #16]
 800ed7a:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800ed7c:	697b      	ldr	r3, [r7, #20]
 800ed7e:	693a      	ldr	r2, [r7, #16]
 800ed80:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800ed82:	4b35      	ldr	r3, [pc, #212]	; (800ee58 <tcp_listen_input+0x1e0>)
 800ed84:	681b      	ldr	r3, [r3, #0]
 800ed86:	1e5a      	subs	r2, r3, #1
 800ed88:	697b      	ldr	r3, [r7, #20]
 800ed8a:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	691a      	ldr	r2, [r3, #16]
 800ed90:	697b      	ldr	r3, [r7, #20]
 800ed92:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800ed94:	697b      	ldr	r3, [r7, #20]
 800ed96:	687a      	ldr	r2, [r7, #4]
 800ed98:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	7a5b      	ldrb	r3, [r3, #9]
 800ed9e:	f003 030c 	and.w	r3, r3, #12
 800eda2:	b2da      	uxtb	r2, r3
 800eda4:	697b      	ldr	r3, [r7, #20]
 800eda6:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	7a1a      	ldrb	r2, [r3, #8]
 800edac:	697b      	ldr	r3, [r7, #20]
 800edae:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800edb0:	4b2e      	ldr	r3, [pc, #184]	; (800ee6c <tcp_listen_input+0x1f4>)
 800edb2:	681a      	ldr	r2, [r3, #0]
 800edb4:	697b      	ldr	r3, [r7, #20]
 800edb6:	60da      	str	r2, [r3, #12]
 800edb8:	4a2c      	ldr	r2, [pc, #176]	; (800ee6c <tcp_listen_input+0x1f4>)
 800edba:	697b      	ldr	r3, [r7, #20]
 800edbc:	6013      	str	r3, [r2, #0]
 800edbe:	f003 f8cd 	bl	8011f5c <tcp_timer_needed>
 800edc2:	4b2b      	ldr	r3, [pc, #172]	; (800ee70 <tcp_listen_input+0x1f8>)
 800edc4:	2201      	movs	r2, #1
 800edc6:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800edc8:	6978      	ldr	r0, [r7, #20]
 800edca:	f001 fd8d 	bl	80108e8 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800edce:	4b23      	ldr	r3, [pc, #140]	; (800ee5c <tcp_listen_input+0x1e4>)
 800edd0:	681b      	ldr	r3, [r3, #0]
 800edd2:	89db      	ldrh	r3, [r3, #14]
 800edd4:	b29a      	uxth	r2, r3
 800edd6:	697b      	ldr	r3, [r7, #20]
 800edd8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800eddc:	697b      	ldr	r3, [r7, #20]
 800edde:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800ede2:	697b      	ldr	r3, [r7, #20]
 800ede4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800ede8:	697b      	ldr	r3, [r7, #20]
 800edea:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800edec:	697b      	ldr	r3, [r7, #20]
 800edee:	3304      	adds	r3, #4
 800edf0:	4618      	mov	r0, r3
 800edf2:	f006 fdab 	bl	801594c <ip4_route>
 800edf6:	4601      	mov	r1, r0
 800edf8:	697b      	ldr	r3, [r7, #20]
 800edfa:	3304      	adds	r3, #4
 800edfc:	461a      	mov	r2, r3
 800edfe:	4620      	mov	r0, r4
 800ee00:	f7ff fa32 	bl	800e268 <tcp_eff_send_mss_netif>
 800ee04:	4603      	mov	r3, r0
 800ee06:	461a      	mov	r2, r3
 800ee08:	697b      	ldr	r3, [r7, #20]
 800ee0a:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800ee0c:	2112      	movs	r1, #18
 800ee0e:	6978      	ldr	r0, [r7, #20]
 800ee10:	f002 f842 	bl	8010e98 <tcp_enqueue_flags>
 800ee14:	4603      	mov	r3, r0
 800ee16:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800ee18:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ee1c:	2b00      	cmp	r3, #0
 800ee1e:	d004      	beq.n	800ee2a <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800ee20:	2100      	movs	r1, #0
 800ee22:	6978      	ldr	r0, [r7, #20]
 800ee24:	f7fe f980 	bl	800d128 <tcp_abandon>
      return;
 800ee28:	e006      	b.n	800ee38 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800ee2a:	6978      	ldr	r0, [r7, #20]
 800ee2c:	f002 f922 	bl	8011074 <tcp_output>
  return;
 800ee30:	e001      	b.n	800ee36 <tcp_listen_input+0x1be>
    return;
 800ee32:	bf00      	nop
 800ee34:	e000      	b.n	800ee38 <tcp_listen_input+0x1c0>
  return;
 800ee36:	bf00      	nop
}
 800ee38:	371c      	adds	r7, #28
 800ee3a:	46bd      	mov	sp, r7
 800ee3c:	bd90      	pop	{r4, r7, pc}
 800ee3e:	bf00      	nop
 800ee40:	20000484 	.word	0x20000484
 800ee44:	0801de74 	.word	0x0801de74
 800ee48:	0801e06c 	.word	0x0801e06c
 800ee4c:	0801dec0 	.word	0x0801dec0
 800ee50:	2000047c 	.word	0x2000047c
 800ee54:	20000482 	.word	0x20000482
 800ee58:	20000478 	.word	0x20000478
 800ee5c:	20000468 	.word	0x20000468
 800ee60:	20003d28 	.word	0x20003d28
 800ee64:	20003d2c 	.word	0x20003d2c
 800ee68:	20003d18 	.word	0x20003d18
 800ee6c:	20006e3c 	.word	0x20006e3c
 800ee70:	20006e38 	.word	0x20006e38

0800ee74 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800ee74:	b580      	push	{r7, lr}
 800ee76:	b086      	sub	sp, #24
 800ee78:	af04      	add	r7, sp, #16
 800ee7a:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800ee7c:	4b2f      	ldr	r3, [pc, #188]	; (800ef3c <tcp_timewait_input+0xc8>)
 800ee7e:	781b      	ldrb	r3, [r3, #0]
 800ee80:	f003 0304 	and.w	r3, r3, #4
 800ee84:	2b00      	cmp	r3, #0
 800ee86:	d153      	bne.n	800ef30 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	2b00      	cmp	r3, #0
 800ee8c:	d106      	bne.n	800ee9c <tcp_timewait_input+0x28>
 800ee8e:	4b2c      	ldr	r3, [pc, #176]	; (800ef40 <tcp_timewait_input+0xcc>)
 800ee90:	f240 22ee 	movw	r2, #750	; 0x2ee
 800ee94:	492b      	ldr	r1, [pc, #172]	; (800ef44 <tcp_timewait_input+0xd0>)
 800ee96:	482c      	ldr	r0, [pc, #176]	; (800ef48 <tcp_timewait_input+0xd4>)
 800ee98:	f008 fcea 	bl	8017870 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800ee9c:	4b27      	ldr	r3, [pc, #156]	; (800ef3c <tcp_timewait_input+0xc8>)
 800ee9e:	781b      	ldrb	r3, [r3, #0]
 800eea0:	f003 0302 	and.w	r3, r3, #2
 800eea4:	2b00      	cmp	r3, #0
 800eea6:	d02a      	beq.n	800eefe <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800eea8:	4b28      	ldr	r3, [pc, #160]	; (800ef4c <tcp_timewait_input+0xd8>)
 800eeaa:	681a      	ldr	r2, [r3, #0]
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eeb0:	1ad3      	subs	r3, r2, r3
 800eeb2:	2b00      	cmp	r3, #0
 800eeb4:	db2d      	blt.n	800ef12 <tcp_timewait_input+0x9e>
 800eeb6:	4b25      	ldr	r3, [pc, #148]	; (800ef4c <tcp_timewait_input+0xd8>)
 800eeb8:	681a      	ldr	r2, [r3, #0]
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eebe:	6879      	ldr	r1, [r7, #4]
 800eec0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800eec2:	440b      	add	r3, r1
 800eec4:	1ad3      	subs	r3, r2, r3
 800eec6:	2b00      	cmp	r3, #0
 800eec8:	dc23      	bgt.n	800ef12 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800eeca:	4b21      	ldr	r3, [pc, #132]	; (800ef50 <tcp_timewait_input+0xdc>)
 800eecc:	6819      	ldr	r1, [r3, #0]
 800eece:	4b21      	ldr	r3, [pc, #132]	; (800ef54 <tcp_timewait_input+0xe0>)
 800eed0:	881b      	ldrh	r3, [r3, #0]
 800eed2:	461a      	mov	r2, r3
 800eed4:	4b1d      	ldr	r3, [pc, #116]	; (800ef4c <tcp_timewait_input+0xd8>)
 800eed6:	681b      	ldr	r3, [r3, #0]
 800eed8:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800eeda:	4b1f      	ldr	r3, [pc, #124]	; (800ef58 <tcp_timewait_input+0xe4>)
 800eedc:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800eede:	885b      	ldrh	r3, [r3, #2]
 800eee0:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800eee2:	4a1d      	ldr	r2, [pc, #116]	; (800ef58 <tcp_timewait_input+0xe4>)
 800eee4:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800eee6:	8812      	ldrh	r2, [r2, #0]
 800eee8:	b292      	uxth	r2, r2
 800eeea:	9202      	str	r2, [sp, #8]
 800eeec:	9301      	str	r3, [sp, #4]
 800eeee:	4b1b      	ldr	r3, [pc, #108]	; (800ef5c <tcp_timewait_input+0xe8>)
 800eef0:	9300      	str	r3, [sp, #0]
 800eef2:	4b1b      	ldr	r3, [pc, #108]	; (800ef60 <tcp_timewait_input+0xec>)
 800eef4:	4602      	mov	r2, r0
 800eef6:	6878      	ldr	r0, [r7, #4]
 800eef8:	f002 fe70 	bl	8011bdc <tcp_rst>
      return;
 800eefc:	e01b      	b.n	800ef36 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800eefe:	4b0f      	ldr	r3, [pc, #60]	; (800ef3c <tcp_timewait_input+0xc8>)
 800ef00:	781b      	ldrb	r3, [r3, #0]
 800ef02:	f003 0301 	and.w	r3, r3, #1
 800ef06:	2b00      	cmp	r3, #0
 800ef08:	d003      	beq.n	800ef12 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800ef0a:	4b16      	ldr	r3, [pc, #88]	; (800ef64 <tcp_timewait_input+0xf0>)
 800ef0c:	681a      	ldr	r2, [r3, #0]
 800ef0e:	687b      	ldr	r3, [r7, #4]
 800ef10:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800ef12:	4b10      	ldr	r3, [pc, #64]	; (800ef54 <tcp_timewait_input+0xe0>)
 800ef14:	881b      	ldrh	r3, [r3, #0]
 800ef16:	2b00      	cmp	r3, #0
 800ef18:	d00c      	beq.n	800ef34 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	8b5b      	ldrh	r3, [r3, #26]
 800ef1e:	f043 0302 	orr.w	r3, r3, #2
 800ef22:	b29a      	uxth	r2, r3
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800ef28:	6878      	ldr	r0, [r7, #4]
 800ef2a:	f002 f8a3 	bl	8011074 <tcp_output>
  }
  return;
 800ef2e:	e001      	b.n	800ef34 <tcp_timewait_input+0xc0>
    return;
 800ef30:	bf00      	nop
 800ef32:	e000      	b.n	800ef36 <tcp_timewait_input+0xc2>
  return;
 800ef34:	bf00      	nop
}
 800ef36:	3708      	adds	r7, #8
 800ef38:	46bd      	mov	sp, r7
 800ef3a:	bd80      	pop	{r7, pc}
 800ef3c:	20000484 	.word	0x20000484
 800ef40:	0801de74 	.word	0x0801de74
 800ef44:	0801e08c 	.word	0x0801e08c
 800ef48:	0801dec0 	.word	0x0801dec0
 800ef4c:	20000478 	.word	0x20000478
 800ef50:	2000047c 	.word	0x2000047c
 800ef54:	20000482 	.word	0x20000482
 800ef58:	20000468 	.word	0x20000468
 800ef5c:	20003d28 	.word	0x20003d28
 800ef60:	20003d2c 	.word	0x20003d2c
 800ef64:	20006e40 	.word	0x20006e40

0800ef68 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800ef68:	b590      	push	{r4, r7, lr}
 800ef6a:	b08d      	sub	sp, #52	; 0x34
 800ef6c:	af04      	add	r7, sp, #16
 800ef6e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800ef70:	2300      	movs	r3, #0
 800ef72:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800ef74:	2300      	movs	r3, #0
 800ef76:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	2b00      	cmp	r3, #0
 800ef7c:	d106      	bne.n	800ef8c <tcp_process+0x24>
 800ef7e:	4ba5      	ldr	r3, [pc, #660]	; (800f214 <tcp_process+0x2ac>)
 800ef80:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800ef84:	49a4      	ldr	r1, [pc, #656]	; (800f218 <tcp_process+0x2b0>)
 800ef86:	48a5      	ldr	r0, [pc, #660]	; (800f21c <tcp_process+0x2b4>)
 800ef88:	f008 fc72 	bl	8017870 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800ef8c:	4ba4      	ldr	r3, [pc, #656]	; (800f220 <tcp_process+0x2b8>)
 800ef8e:	781b      	ldrb	r3, [r3, #0]
 800ef90:	f003 0304 	and.w	r3, r3, #4
 800ef94:	2b00      	cmp	r3, #0
 800ef96:	d04e      	beq.n	800f036 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	7d1b      	ldrb	r3, [r3, #20]
 800ef9c:	2b02      	cmp	r3, #2
 800ef9e:	d108      	bne.n	800efb2 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800efa4:	4b9f      	ldr	r3, [pc, #636]	; (800f224 <tcp_process+0x2bc>)
 800efa6:	681b      	ldr	r3, [r3, #0]
 800efa8:	429a      	cmp	r2, r3
 800efaa:	d123      	bne.n	800eff4 <tcp_process+0x8c>
        acceptable = 1;
 800efac:	2301      	movs	r3, #1
 800efae:	76fb      	strb	r3, [r7, #27]
 800efb0:	e020      	b.n	800eff4 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800efb6:	4b9c      	ldr	r3, [pc, #624]	; (800f228 <tcp_process+0x2c0>)
 800efb8:	681b      	ldr	r3, [r3, #0]
 800efba:	429a      	cmp	r2, r3
 800efbc:	d102      	bne.n	800efc4 <tcp_process+0x5c>
        acceptable = 1;
 800efbe:	2301      	movs	r3, #1
 800efc0:	76fb      	strb	r3, [r7, #27]
 800efc2:	e017      	b.n	800eff4 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800efc4:	4b98      	ldr	r3, [pc, #608]	; (800f228 <tcp_process+0x2c0>)
 800efc6:	681a      	ldr	r2, [r3, #0]
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800efcc:	1ad3      	subs	r3, r2, r3
 800efce:	2b00      	cmp	r3, #0
 800efd0:	db10      	blt.n	800eff4 <tcp_process+0x8c>
 800efd2:	4b95      	ldr	r3, [pc, #596]	; (800f228 <tcp_process+0x2c0>)
 800efd4:	681a      	ldr	r2, [r3, #0]
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800efda:	6879      	ldr	r1, [r7, #4]
 800efdc:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800efde:	440b      	add	r3, r1
 800efe0:	1ad3      	subs	r3, r2, r3
 800efe2:	2b00      	cmp	r3, #0
 800efe4:	dc06      	bgt.n	800eff4 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800efe6:	687b      	ldr	r3, [r7, #4]
 800efe8:	8b5b      	ldrh	r3, [r3, #26]
 800efea:	f043 0302 	orr.w	r3, r3, #2
 800efee:	b29a      	uxth	r2, r3
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800eff4:	7efb      	ldrb	r3, [r7, #27]
 800eff6:	2b00      	cmp	r3, #0
 800eff8:	d01b      	beq.n	800f032 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800effa:	687b      	ldr	r3, [r7, #4]
 800effc:	7d1b      	ldrb	r3, [r3, #20]
 800effe:	2b00      	cmp	r3, #0
 800f000:	d106      	bne.n	800f010 <tcp_process+0xa8>
 800f002:	4b84      	ldr	r3, [pc, #528]	; (800f214 <tcp_process+0x2ac>)
 800f004:	f44f 724e 	mov.w	r2, #824	; 0x338
 800f008:	4988      	ldr	r1, [pc, #544]	; (800f22c <tcp_process+0x2c4>)
 800f00a:	4884      	ldr	r0, [pc, #528]	; (800f21c <tcp_process+0x2b4>)
 800f00c:	f008 fc30 	bl	8017870 <iprintf>
      recv_flags |= TF_RESET;
 800f010:	4b87      	ldr	r3, [pc, #540]	; (800f230 <tcp_process+0x2c8>)
 800f012:	781b      	ldrb	r3, [r3, #0]
 800f014:	f043 0308 	orr.w	r3, r3, #8
 800f018:	b2da      	uxtb	r2, r3
 800f01a:	4b85      	ldr	r3, [pc, #532]	; (800f230 <tcp_process+0x2c8>)
 800f01c:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	8b5b      	ldrh	r3, [r3, #26]
 800f022:	f023 0301 	bic.w	r3, r3, #1
 800f026:	b29a      	uxth	r2, r3
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800f02c:	f06f 030d 	mvn.w	r3, #13
 800f030:	e37a      	b.n	800f728 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800f032:	2300      	movs	r3, #0
 800f034:	e378      	b.n	800f728 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800f036:	4b7a      	ldr	r3, [pc, #488]	; (800f220 <tcp_process+0x2b8>)
 800f038:	781b      	ldrb	r3, [r3, #0]
 800f03a:	f003 0302 	and.w	r3, r3, #2
 800f03e:	2b00      	cmp	r3, #0
 800f040:	d010      	beq.n	800f064 <tcp_process+0xfc>
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	7d1b      	ldrb	r3, [r3, #20]
 800f046:	2b02      	cmp	r3, #2
 800f048:	d00c      	beq.n	800f064 <tcp_process+0xfc>
 800f04a:	687b      	ldr	r3, [r7, #4]
 800f04c:	7d1b      	ldrb	r3, [r3, #20]
 800f04e:	2b03      	cmp	r3, #3
 800f050:	d008      	beq.n	800f064 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	8b5b      	ldrh	r3, [r3, #26]
 800f056:	f043 0302 	orr.w	r3, r3, #2
 800f05a:	b29a      	uxth	r2, r3
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800f060:	2300      	movs	r3, #0
 800f062:	e361      	b.n	800f728 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	8b5b      	ldrh	r3, [r3, #26]
 800f068:	f003 0310 	and.w	r3, r3, #16
 800f06c:	2b00      	cmp	r3, #0
 800f06e:	d103      	bne.n	800f078 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800f070:	4b70      	ldr	r3, [pc, #448]	; (800f234 <tcp_process+0x2cc>)
 800f072:	681a      	ldr	r2, [r3, #0]
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	2200      	movs	r2, #0
 800f07c:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800f080:	687b      	ldr	r3, [r7, #4]
 800f082:	2200      	movs	r2, #0
 800f084:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800f088:	6878      	ldr	r0, [r7, #4]
 800f08a:	f001 fc2d 	bl	80108e8 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	7d1b      	ldrb	r3, [r3, #20]
 800f092:	3b02      	subs	r3, #2
 800f094:	2b07      	cmp	r3, #7
 800f096:	f200 8337 	bhi.w	800f708 <tcp_process+0x7a0>
 800f09a:	a201      	add	r2, pc, #4	; (adr r2, 800f0a0 <tcp_process+0x138>)
 800f09c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f0a0:	0800f0c1 	.word	0x0800f0c1
 800f0a4:	0800f2f1 	.word	0x0800f2f1
 800f0a8:	0800f469 	.word	0x0800f469
 800f0ac:	0800f493 	.word	0x0800f493
 800f0b0:	0800f5b7 	.word	0x0800f5b7
 800f0b4:	0800f469 	.word	0x0800f469
 800f0b8:	0800f643 	.word	0x0800f643
 800f0bc:	0800f6d3 	.word	0x0800f6d3
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800f0c0:	4b57      	ldr	r3, [pc, #348]	; (800f220 <tcp_process+0x2b8>)
 800f0c2:	781b      	ldrb	r3, [r3, #0]
 800f0c4:	f003 0310 	and.w	r3, r3, #16
 800f0c8:	2b00      	cmp	r3, #0
 800f0ca:	f000 80e4 	beq.w	800f296 <tcp_process+0x32e>
 800f0ce:	4b54      	ldr	r3, [pc, #336]	; (800f220 <tcp_process+0x2b8>)
 800f0d0:	781b      	ldrb	r3, [r3, #0]
 800f0d2:	f003 0302 	and.w	r3, r3, #2
 800f0d6:	2b00      	cmp	r3, #0
 800f0d8:	f000 80dd 	beq.w	800f296 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f0e0:	1c5a      	adds	r2, r3, #1
 800f0e2:	4b50      	ldr	r3, [pc, #320]	; (800f224 <tcp_process+0x2bc>)
 800f0e4:	681b      	ldr	r3, [r3, #0]
 800f0e6:	429a      	cmp	r2, r3
 800f0e8:	f040 80d5 	bne.w	800f296 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800f0ec:	4b4e      	ldr	r3, [pc, #312]	; (800f228 <tcp_process+0x2c0>)
 800f0ee:	681b      	ldr	r3, [r3, #0]
 800f0f0:	1c5a      	adds	r2, r3, #1
 800f0f2:	687b      	ldr	r3, [r7, #4]
 800f0f4:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800f0f6:	687b      	ldr	r3, [r7, #4]
 800f0f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800f0fe:	4b49      	ldr	r3, [pc, #292]	; (800f224 <tcp_process+0x2bc>)
 800f100:	681a      	ldr	r2, [r3, #0]
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800f106:	4b4c      	ldr	r3, [pc, #304]	; (800f238 <tcp_process+0x2d0>)
 800f108:	681b      	ldr	r3, [r3, #0]
 800f10a:	89db      	ldrh	r3, [r3, #14]
 800f10c:	b29a      	uxth	r2, r3
 800f10e:	687b      	ldr	r3, [r7, #4]
 800f110:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800f120:	4b41      	ldr	r3, [pc, #260]	; (800f228 <tcp_process+0x2c0>)
 800f122:	681b      	ldr	r3, [r3, #0]
 800f124:	1e5a      	subs	r2, r3, #1
 800f126:	687b      	ldr	r3, [r7, #4]
 800f128:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800f12a:	687b      	ldr	r3, [r7, #4]
 800f12c:	2204      	movs	r2, #4
 800f12e:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	3304      	adds	r3, #4
 800f138:	4618      	mov	r0, r3
 800f13a:	f006 fc07 	bl	801594c <ip4_route>
 800f13e:	4601      	mov	r1, r0
 800f140:	687b      	ldr	r3, [r7, #4]
 800f142:	3304      	adds	r3, #4
 800f144:	461a      	mov	r2, r3
 800f146:	4620      	mov	r0, r4
 800f148:	f7ff f88e 	bl	800e268 <tcp_eff_send_mss_netif>
 800f14c:	4603      	mov	r3, r0
 800f14e:	461a      	mov	r2, r3
 800f150:	687b      	ldr	r3, [r7, #4]
 800f152:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f158:	009a      	lsls	r2, r3, #2
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f15e:	005b      	lsls	r3, r3, #1
 800f160:	f241 111c 	movw	r1, #4380	; 0x111c
 800f164:	428b      	cmp	r3, r1
 800f166:	bf38      	it	cc
 800f168:	460b      	movcc	r3, r1
 800f16a:	429a      	cmp	r2, r3
 800f16c:	d204      	bcs.n	800f178 <tcp_process+0x210>
 800f16e:	687b      	ldr	r3, [r7, #4]
 800f170:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f172:	009b      	lsls	r3, r3, #2
 800f174:	b29b      	uxth	r3, r3
 800f176:	e00d      	b.n	800f194 <tcp_process+0x22c>
 800f178:	687b      	ldr	r3, [r7, #4]
 800f17a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f17c:	005b      	lsls	r3, r3, #1
 800f17e:	f241 121c 	movw	r2, #4380	; 0x111c
 800f182:	4293      	cmp	r3, r2
 800f184:	d904      	bls.n	800f190 <tcp_process+0x228>
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f18a:	005b      	lsls	r3, r3, #1
 800f18c:	b29b      	uxth	r3, r3
 800f18e:	e001      	b.n	800f194 <tcp_process+0x22c>
 800f190:	f241 131c 	movw	r3, #4380	; 0x111c
 800f194:	687a      	ldr	r2, [r7, #4]
 800f196:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800f19a:	687b      	ldr	r3, [r7, #4]
 800f19c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f1a0:	2b00      	cmp	r3, #0
 800f1a2:	d106      	bne.n	800f1b2 <tcp_process+0x24a>
 800f1a4:	4b1b      	ldr	r3, [pc, #108]	; (800f214 <tcp_process+0x2ac>)
 800f1a6:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800f1aa:	4924      	ldr	r1, [pc, #144]	; (800f23c <tcp_process+0x2d4>)
 800f1ac:	481b      	ldr	r0, [pc, #108]	; (800f21c <tcp_process+0x2b4>)
 800f1ae:	f008 fb5f 	bl	8017870 <iprintf>
        --pcb->snd_queuelen;
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f1b8:	3b01      	subs	r3, #1
 800f1ba:	b29a      	uxth	r2, r3
 800f1bc:	687b      	ldr	r3, [r7, #4]
 800f1be:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800f1c2:	687b      	ldr	r3, [r7, #4]
 800f1c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f1c6:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800f1c8:	69fb      	ldr	r3, [r7, #28]
 800f1ca:	2b00      	cmp	r3, #0
 800f1cc:	d111      	bne.n	800f1f2 <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f1d2:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800f1d4:	69fb      	ldr	r3, [r7, #28]
 800f1d6:	2b00      	cmp	r3, #0
 800f1d8:	d106      	bne.n	800f1e8 <tcp_process+0x280>
 800f1da:	4b0e      	ldr	r3, [pc, #56]	; (800f214 <tcp_process+0x2ac>)
 800f1dc:	f44f 725d 	mov.w	r2, #884	; 0x374
 800f1e0:	4917      	ldr	r1, [pc, #92]	; (800f240 <tcp_process+0x2d8>)
 800f1e2:	480e      	ldr	r0, [pc, #56]	; (800f21c <tcp_process+0x2b4>)
 800f1e4:	f008 fb44 	bl	8017870 <iprintf>
          pcb->unsent = rseg->next;
 800f1e8:	69fb      	ldr	r3, [r7, #28]
 800f1ea:	681a      	ldr	r2, [r3, #0]
 800f1ec:	687b      	ldr	r3, [r7, #4]
 800f1ee:	66da      	str	r2, [r3, #108]	; 0x6c
 800f1f0:	e003      	b.n	800f1fa <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 800f1f2:	69fb      	ldr	r3, [r7, #28]
 800f1f4:	681a      	ldr	r2, [r3, #0]
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800f1fa:	69f8      	ldr	r0, [r7, #28]
 800f1fc:	f7fe fd3d 	bl	800dc7a <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f204:	2b00      	cmp	r3, #0
 800f206:	d11d      	bne.n	800f244 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800f208:	687b      	ldr	r3, [r7, #4]
 800f20a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f20e:	861a      	strh	r2, [r3, #48]	; 0x30
 800f210:	e01f      	b.n	800f252 <tcp_process+0x2ea>
 800f212:	bf00      	nop
 800f214:	0801de74 	.word	0x0801de74
 800f218:	0801e0ac 	.word	0x0801e0ac
 800f21c:	0801dec0 	.word	0x0801dec0
 800f220:	20000484 	.word	0x20000484
 800f224:	2000047c 	.word	0x2000047c
 800f228:	20000478 	.word	0x20000478
 800f22c:	0801e0c8 	.word	0x0801e0c8
 800f230:	20000485 	.word	0x20000485
 800f234:	20006e40 	.word	0x20006e40
 800f238:	20000468 	.word	0x20000468
 800f23c:	0801e0e8 	.word	0x0801e0e8
 800f240:	0801e100 	.word	0x0801e100
        } else {
          pcb->rtime = 0;
 800f244:	687b      	ldr	r3, [r7, #4]
 800f246:	2200      	movs	r2, #0
 800f248:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800f24a:	687b      	ldr	r3, [r7, #4]
 800f24c:	2200      	movs	r2, #0
 800f24e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800f252:	687b      	ldr	r3, [r7, #4]
 800f254:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f258:	2b00      	cmp	r3, #0
 800f25a:	d00a      	beq.n	800f272 <tcp_process+0x30a>
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f262:	687a      	ldr	r2, [r7, #4]
 800f264:	6910      	ldr	r0, [r2, #16]
 800f266:	2200      	movs	r2, #0
 800f268:	6879      	ldr	r1, [r7, #4]
 800f26a:	4798      	blx	r3
 800f26c:	4603      	mov	r3, r0
 800f26e:	76bb      	strb	r3, [r7, #26]
 800f270:	e001      	b.n	800f276 <tcp_process+0x30e>
 800f272:	2300      	movs	r3, #0
 800f274:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800f276:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800f27a:	f113 0f0d 	cmn.w	r3, #13
 800f27e:	d102      	bne.n	800f286 <tcp_process+0x31e>
          return ERR_ABRT;
 800f280:	f06f 030c 	mvn.w	r3, #12
 800f284:	e250      	b.n	800f728 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800f286:	687b      	ldr	r3, [r7, #4]
 800f288:	8b5b      	ldrh	r3, [r3, #26]
 800f28a:	f043 0302 	orr.w	r3, r3, #2
 800f28e:	b29a      	uxth	r2, r3
 800f290:	687b      	ldr	r3, [r7, #4]
 800f292:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800f294:	e23a      	b.n	800f70c <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800f296:	4b9d      	ldr	r3, [pc, #628]	; (800f50c <tcp_process+0x5a4>)
 800f298:	781b      	ldrb	r3, [r3, #0]
 800f29a:	f003 0310 	and.w	r3, r3, #16
 800f29e:	2b00      	cmp	r3, #0
 800f2a0:	f000 8234 	beq.w	800f70c <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f2a4:	4b9a      	ldr	r3, [pc, #616]	; (800f510 <tcp_process+0x5a8>)
 800f2a6:	6819      	ldr	r1, [r3, #0]
 800f2a8:	4b9a      	ldr	r3, [pc, #616]	; (800f514 <tcp_process+0x5ac>)
 800f2aa:	881b      	ldrh	r3, [r3, #0]
 800f2ac:	461a      	mov	r2, r3
 800f2ae:	4b9a      	ldr	r3, [pc, #616]	; (800f518 <tcp_process+0x5b0>)
 800f2b0:	681b      	ldr	r3, [r3, #0]
 800f2b2:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f2b4:	4b99      	ldr	r3, [pc, #612]	; (800f51c <tcp_process+0x5b4>)
 800f2b6:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f2b8:	885b      	ldrh	r3, [r3, #2]
 800f2ba:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f2bc:	4a97      	ldr	r2, [pc, #604]	; (800f51c <tcp_process+0x5b4>)
 800f2be:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f2c0:	8812      	ldrh	r2, [r2, #0]
 800f2c2:	b292      	uxth	r2, r2
 800f2c4:	9202      	str	r2, [sp, #8]
 800f2c6:	9301      	str	r3, [sp, #4]
 800f2c8:	4b95      	ldr	r3, [pc, #596]	; (800f520 <tcp_process+0x5b8>)
 800f2ca:	9300      	str	r3, [sp, #0]
 800f2cc:	4b95      	ldr	r3, [pc, #596]	; (800f524 <tcp_process+0x5bc>)
 800f2ce:	4602      	mov	r2, r0
 800f2d0:	6878      	ldr	r0, [r7, #4]
 800f2d2:	f002 fc83 	bl	8011bdc <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f2dc:	2b05      	cmp	r3, #5
 800f2de:	f200 8215 	bhi.w	800f70c <tcp_process+0x7a4>
          pcb->rtime = 0;
 800f2e2:	687b      	ldr	r3, [r7, #4]
 800f2e4:	2200      	movs	r2, #0
 800f2e6:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800f2e8:	6878      	ldr	r0, [r7, #4]
 800f2ea:	f002 fa4d 	bl	8011788 <tcp_rexmit_rto>
      break;
 800f2ee:	e20d      	b.n	800f70c <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800f2f0:	4b86      	ldr	r3, [pc, #536]	; (800f50c <tcp_process+0x5a4>)
 800f2f2:	781b      	ldrb	r3, [r3, #0]
 800f2f4:	f003 0310 	and.w	r3, r3, #16
 800f2f8:	2b00      	cmp	r3, #0
 800f2fa:	f000 80a1 	beq.w	800f440 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f2fe:	4b84      	ldr	r3, [pc, #528]	; (800f510 <tcp_process+0x5a8>)
 800f300:	681a      	ldr	r2, [r3, #0]
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f306:	1ad3      	subs	r3, r2, r3
 800f308:	3b01      	subs	r3, #1
 800f30a:	2b00      	cmp	r3, #0
 800f30c:	db7e      	blt.n	800f40c <tcp_process+0x4a4>
 800f30e:	4b80      	ldr	r3, [pc, #512]	; (800f510 <tcp_process+0x5a8>)
 800f310:	681a      	ldr	r2, [r3, #0]
 800f312:	687b      	ldr	r3, [r7, #4]
 800f314:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f316:	1ad3      	subs	r3, r2, r3
 800f318:	2b00      	cmp	r3, #0
 800f31a:	dc77      	bgt.n	800f40c <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800f31c:	687b      	ldr	r3, [r7, #4]
 800f31e:	2204      	movs	r2, #4
 800f320:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800f322:	687b      	ldr	r3, [r7, #4]
 800f324:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f326:	2b00      	cmp	r3, #0
 800f328:	d102      	bne.n	800f330 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800f32a:	23fa      	movs	r3, #250	; 0xfa
 800f32c:	76bb      	strb	r3, [r7, #26]
 800f32e:	e01d      	b.n	800f36c <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f334:	699b      	ldr	r3, [r3, #24]
 800f336:	2b00      	cmp	r3, #0
 800f338:	d106      	bne.n	800f348 <tcp_process+0x3e0>
 800f33a:	4b7b      	ldr	r3, [pc, #492]	; (800f528 <tcp_process+0x5c0>)
 800f33c:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800f340:	497a      	ldr	r1, [pc, #488]	; (800f52c <tcp_process+0x5c4>)
 800f342:	487b      	ldr	r0, [pc, #492]	; (800f530 <tcp_process+0x5c8>)
 800f344:	f008 fa94 	bl	8017870 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f34c:	699b      	ldr	r3, [r3, #24]
 800f34e:	2b00      	cmp	r3, #0
 800f350:	d00a      	beq.n	800f368 <tcp_process+0x400>
 800f352:	687b      	ldr	r3, [r7, #4]
 800f354:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f356:	699b      	ldr	r3, [r3, #24]
 800f358:	687a      	ldr	r2, [r7, #4]
 800f35a:	6910      	ldr	r0, [r2, #16]
 800f35c:	2200      	movs	r2, #0
 800f35e:	6879      	ldr	r1, [r7, #4]
 800f360:	4798      	blx	r3
 800f362:	4603      	mov	r3, r0
 800f364:	76bb      	strb	r3, [r7, #26]
 800f366:	e001      	b.n	800f36c <tcp_process+0x404>
 800f368:	23f0      	movs	r3, #240	; 0xf0
 800f36a:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800f36c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800f370:	2b00      	cmp	r3, #0
 800f372:	d00a      	beq.n	800f38a <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800f374:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800f378:	f113 0f0d 	cmn.w	r3, #13
 800f37c:	d002      	beq.n	800f384 <tcp_process+0x41c>
              tcp_abort(pcb);
 800f37e:	6878      	ldr	r0, [r7, #4]
 800f380:	f7fd ff90 	bl	800d2a4 <tcp_abort>
            }
            return ERR_ABRT;
 800f384:	f06f 030c 	mvn.w	r3, #12
 800f388:	e1ce      	b.n	800f728 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800f38a:	6878      	ldr	r0, [r7, #4]
 800f38c:	f000 fae0 	bl	800f950 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800f390:	4b68      	ldr	r3, [pc, #416]	; (800f534 <tcp_process+0x5cc>)
 800f392:	881b      	ldrh	r3, [r3, #0]
 800f394:	2b00      	cmp	r3, #0
 800f396:	d005      	beq.n	800f3a4 <tcp_process+0x43c>
            recv_acked--;
 800f398:	4b66      	ldr	r3, [pc, #408]	; (800f534 <tcp_process+0x5cc>)
 800f39a:	881b      	ldrh	r3, [r3, #0]
 800f39c:	3b01      	subs	r3, #1
 800f39e:	b29a      	uxth	r2, r3
 800f3a0:	4b64      	ldr	r3, [pc, #400]	; (800f534 <tcp_process+0x5cc>)
 800f3a2:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800f3a4:	687b      	ldr	r3, [r7, #4]
 800f3a6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f3a8:	009a      	lsls	r2, r3, #2
 800f3aa:	687b      	ldr	r3, [r7, #4]
 800f3ac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f3ae:	005b      	lsls	r3, r3, #1
 800f3b0:	f241 111c 	movw	r1, #4380	; 0x111c
 800f3b4:	428b      	cmp	r3, r1
 800f3b6:	bf38      	it	cc
 800f3b8:	460b      	movcc	r3, r1
 800f3ba:	429a      	cmp	r2, r3
 800f3bc:	d204      	bcs.n	800f3c8 <tcp_process+0x460>
 800f3be:	687b      	ldr	r3, [r7, #4]
 800f3c0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f3c2:	009b      	lsls	r3, r3, #2
 800f3c4:	b29b      	uxth	r3, r3
 800f3c6:	e00d      	b.n	800f3e4 <tcp_process+0x47c>
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f3cc:	005b      	lsls	r3, r3, #1
 800f3ce:	f241 121c 	movw	r2, #4380	; 0x111c
 800f3d2:	4293      	cmp	r3, r2
 800f3d4:	d904      	bls.n	800f3e0 <tcp_process+0x478>
 800f3d6:	687b      	ldr	r3, [r7, #4]
 800f3d8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f3da:	005b      	lsls	r3, r3, #1
 800f3dc:	b29b      	uxth	r3, r3
 800f3de:	e001      	b.n	800f3e4 <tcp_process+0x47c>
 800f3e0:	f241 131c 	movw	r3, #4380	; 0x111c
 800f3e4:	687a      	ldr	r2, [r7, #4]
 800f3e6:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800f3ea:	4b53      	ldr	r3, [pc, #332]	; (800f538 <tcp_process+0x5d0>)
 800f3ec:	781b      	ldrb	r3, [r3, #0]
 800f3ee:	f003 0320 	and.w	r3, r3, #32
 800f3f2:	2b00      	cmp	r3, #0
 800f3f4:	d037      	beq.n	800f466 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800f3f6:	687b      	ldr	r3, [r7, #4]
 800f3f8:	8b5b      	ldrh	r3, [r3, #26]
 800f3fa:	f043 0302 	orr.w	r3, r3, #2
 800f3fe:	b29a      	uxth	r2, r3
 800f400:	687b      	ldr	r3, [r7, #4]
 800f402:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	2207      	movs	r2, #7
 800f408:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800f40a:	e02c      	b.n	800f466 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f40c:	4b40      	ldr	r3, [pc, #256]	; (800f510 <tcp_process+0x5a8>)
 800f40e:	6819      	ldr	r1, [r3, #0]
 800f410:	4b40      	ldr	r3, [pc, #256]	; (800f514 <tcp_process+0x5ac>)
 800f412:	881b      	ldrh	r3, [r3, #0]
 800f414:	461a      	mov	r2, r3
 800f416:	4b40      	ldr	r3, [pc, #256]	; (800f518 <tcp_process+0x5b0>)
 800f418:	681b      	ldr	r3, [r3, #0]
 800f41a:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f41c:	4b3f      	ldr	r3, [pc, #252]	; (800f51c <tcp_process+0x5b4>)
 800f41e:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f420:	885b      	ldrh	r3, [r3, #2]
 800f422:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f424:	4a3d      	ldr	r2, [pc, #244]	; (800f51c <tcp_process+0x5b4>)
 800f426:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f428:	8812      	ldrh	r2, [r2, #0]
 800f42a:	b292      	uxth	r2, r2
 800f42c:	9202      	str	r2, [sp, #8]
 800f42e:	9301      	str	r3, [sp, #4]
 800f430:	4b3b      	ldr	r3, [pc, #236]	; (800f520 <tcp_process+0x5b8>)
 800f432:	9300      	str	r3, [sp, #0]
 800f434:	4b3b      	ldr	r3, [pc, #236]	; (800f524 <tcp_process+0x5bc>)
 800f436:	4602      	mov	r2, r0
 800f438:	6878      	ldr	r0, [r7, #4]
 800f43a:	f002 fbcf 	bl	8011bdc <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800f43e:	e167      	b.n	800f710 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800f440:	4b32      	ldr	r3, [pc, #200]	; (800f50c <tcp_process+0x5a4>)
 800f442:	781b      	ldrb	r3, [r3, #0]
 800f444:	f003 0302 	and.w	r3, r3, #2
 800f448:	2b00      	cmp	r3, #0
 800f44a:	f000 8161 	beq.w	800f710 <tcp_process+0x7a8>
 800f44e:	687b      	ldr	r3, [r7, #4]
 800f450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f452:	1e5a      	subs	r2, r3, #1
 800f454:	4b30      	ldr	r3, [pc, #192]	; (800f518 <tcp_process+0x5b0>)
 800f456:	681b      	ldr	r3, [r3, #0]
 800f458:	429a      	cmp	r2, r3
 800f45a:	f040 8159 	bne.w	800f710 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800f45e:	6878      	ldr	r0, [r7, #4]
 800f460:	f002 f9b4 	bl	80117cc <tcp_rexmit>
      break;
 800f464:	e154      	b.n	800f710 <tcp_process+0x7a8>
 800f466:	e153      	b.n	800f710 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800f468:	6878      	ldr	r0, [r7, #4]
 800f46a:	f000 fa71 	bl	800f950 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800f46e:	4b32      	ldr	r3, [pc, #200]	; (800f538 <tcp_process+0x5d0>)
 800f470:	781b      	ldrb	r3, [r3, #0]
 800f472:	f003 0320 	and.w	r3, r3, #32
 800f476:	2b00      	cmp	r3, #0
 800f478:	f000 814c 	beq.w	800f714 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800f47c:	687b      	ldr	r3, [r7, #4]
 800f47e:	8b5b      	ldrh	r3, [r3, #26]
 800f480:	f043 0302 	orr.w	r3, r3, #2
 800f484:	b29a      	uxth	r2, r3
 800f486:	687b      	ldr	r3, [r7, #4]
 800f488:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800f48a:	687b      	ldr	r3, [r7, #4]
 800f48c:	2207      	movs	r2, #7
 800f48e:	751a      	strb	r2, [r3, #20]
      }
      break;
 800f490:	e140      	b.n	800f714 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800f492:	6878      	ldr	r0, [r7, #4]
 800f494:	f000 fa5c 	bl	800f950 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800f498:	4b27      	ldr	r3, [pc, #156]	; (800f538 <tcp_process+0x5d0>)
 800f49a:	781b      	ldrb	r3, [r3, #0]
 800f49c:	f003 0320 	and.w	r3, r3, #32
 800f4a0:	2b00      	cmp	r3, #0
 800f4a2:	d071      	beq.n	800f588 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800f4a4:	4b19      	ldr	r3, [pc, #100]	; (800f50c <tcp_process+0x5a4>)
 800f4a6:	781b      	ldrb	r3, [r3, #0]
 800f4a8:	f003 0310 	and.w	r3, r3, #16
 800f4ac:	2b00      	cmp	r3, #0
 800f4ae:	d060      	beq.n	800f572 <tcp_process+0x60a>
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f4b4:	4b16      	ldr	r3, [pc, #88]	; (800f510 <tcp_process+0x5a8>)
 800f4b6:	681b      	ldr	r3, [r3, #0]
 800f4b8:	429a      	cmp	r2, r3
 800f4ba:	d15a      	bne.n	800f572 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800f4c0:	2b00      	cmp	r3, #0
 800f4c2:	d156      	bne.n	800f572 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	8b5b      	ldrh	r3, [r3, #26]
 800f4c8:	f043 0302 	orr.w	r3, r3, #2
 800f4cc:	b29a      	uxth	r2, r3
 800f4ce:	687b      	ldr	r3, [r7, #4]
 800f4d0:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800f4d2:	6878      	ldr	r0, [r7, #4]
 800f4d4:	f7fe fdbe 	bl	800e054 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800f4d8:	4b18      	ldr	r3, [pc, #96]	; (800f53c <tcp_process+0x5d4>)
 800f4da:	681b      	ldr	r3, [r3, #0]
 800f4dc:	687a      	ldr	r2, [r7, #4]
 800f4de:	429a      	cmp	r2, r3
 800f4e0:	d105      	bne.n	800f4ee <tcp_process+0x586>
 800f4e2:	4b16      	ldr	r3, [pc, #88]	; (800f53c <tcp_process+0x5d4>)
 800f4e4:	681b      	ldr	r3, [r3, #0]
 800f4e6:	68db      	ldr	r3, [r3, #12]
 800f4e8:	4a14      	ldr	r2, [pc, #80]	; (800f53c <tcp_process+0x5d4>)
 800f4ea:	6013      	str	r3, [r2, #0]
 800f4ec:	e02e      	b.n	800f54c <tcp_process+0x5e4>
 800f4ee:	4b13      	ldr	r3, [pc, #76]	; (800f53c <tcp_process+0x5d4>)
 800f4f0:	681b      	ldr	r3, [r3, #0]
 800f4f2:	617b      	str	r3, [r7, #20]
 800f4f4:	e027      	b.n	800f546 <tcp_process+0x5de>
 800f4f6:	697b      	ldr	r3, [r7, #20]
 800f4f8:	68db      	ldr	r3, [r3, #12]
 800f4fa:	687a      	ldr	r2, [r7, #4]
 800f4fc:	429a      	cmp	r2, r3
 800f4fe:	d11f      	bne.n	800f540 <tcp_process+0x5d8>
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	68da      	ldr	r2, [r3, #12]
 800f504:	697b      	ldr	r3, [r7, #20]
 800f506:	60da      	str	r2, [r3, #12]
 800f508:	e020      	b.n	800f54c <tcp_process+0x5e4>
 800f50a:	bf00      	nop
 800f50c:	20000484 	.word	0x20000484
 800f510:	2000047c 	.word	0x2000047c
 800f514:	20000482 	.word	0x20000482
 800f518:	20000478 	.word	0x20000478
 800f51c:	20000468 	.word	0x20000468
 800f520:	20003d28 	.word	0x20003d28
 800f524:	20003d2c 	.word	0x20003d2c
 800f528:	0801de74 	.word	0x0801de74
 800f52c:	0801e114 	.word	0x0801e114
 800f530:	0801dec0 	.word	0x0801dec0
 800f534:	20000480 	.word	0x20000480
 800f538:	20000485 	.word	0x20000485
 800f53c:	20006e3c 	.word	0x20006e3c
 800f540:	697b      	ldr	r3, [r7, #20]
 800f542:	68db      	ldr	r3, [r3, #12]
 800f544:	617b      	str	r3, [r7, #20]
 800f546:	697b      	ldr	r3, [r7, #20]
 800f548:	2b00      	cmp	r3, #0
 800f54a:	d1d4      	bne.n	800f4f6 <tcp_process+0x58e>
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	2200      	movs	r2, #0
 800f550:	60da      	str	r2, [r3, #12]
 800f552:	4b77      	ldr	r3, [pc, #476]	; (800f730 <tcp_process+0x7c8>)
 800f554:	2201      	movs	r2, #1
 800f556:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	220a      	movs	r2, #10
 800f55c:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800f55e:	4b75      	ldr	r3, [pc, #468]	; (800f734 <tcp_process+0x7cc>)
 800f560:	681a      	ldr	r2, [r3, #0]
 800f562:	687b      	ldr	r3, [r7, #4]
 800f564:	60da      	str	r2, [r3, #12]
 800f566:	4a73      	ldr	r2, [pc, #460]	; (800f734 <tcp_process+0x7cc>)
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	6013      	str	r3, [r2, #0]
 800f56c:	f002 fcf6 	bl	8011f5c <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800f570:	e0d2      	b.n	800f718 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800f572:	687b      	ldr	r3, [r7, #4]
 800f574:	8b5b      	ldrh	r3, [r3, #26]
 800f576:	f043 0302 	orr.w	r3, r3, #2
 800f57a:	b29a      	uxth	r2, r3
 800f57c:	687b      	ldr	r3, [r7, #4]
 800f57e:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	2208      	movs	r2, #8
 800f584:	751a      	strb	r2, [r3, #20]
      break;
 800f586:	e0c7      	b.n	800f718 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800f588:	4b6b      	ldr	r3, [pc, #428]	; (800f738 <tcp_process+0x7d0>)
 800f58a:	781b      	ldrb	r3, [r3, #0]
 800f58c:	f003 0310 	and.w	r3, r3, #16
 800f590:	2b00      	cmp	r3, #0
 800f592:	f000 80c1 	beq.w	800f718 <tcp_process+0x7b0>
 800f596:	687b      	ldr	r3, [r7, #4]
 800f598:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f59a:	4b68      	ldr	r3, [pc, #416]	; (800f73c <tcp_process+0x7d4>)
 800f59c:	681b      	ldr	r3, [r3, #0]
 800f59e:	429a      	cmp	r2, r3
 800f5a0:	f040 80ba 	bne.w	800f718 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800f5a8:	2b00      	cmp	r3, #0
 800f5aa:	f040 80b5 	bne.w	800f718 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800f5ae:	687b      	ldr	r3, [r7, #4]
 800f5b0:	2206      	movs	r2, #6
 800f5b2:	751a      	strb	r2, [r3, #20]
      break;
 800f5b4:	e0b0      	b.n	800f718 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800f5b6:	6878      	ldr	r0, [r7, #4]
 800f5b8:	f000 f9ca 	bl	800f950 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800f5bc:	4b60      	ldr	r3, [pc, #384]	; (800f740 <tcp_process+0x7d8>)
 800f5be:	781b      	ldrb	r3, [r3, #0]
 800f5c0:	f003 0320 	and.w	r3, r3, #32
 800f5c4:	2b00      	cmp	r3, #0
 800f5c6:	f000 80a9 	beq.w	800f71c <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800f5ca:	687b      	ldr	r3, [r7, #4]
 800f5cc:	8b5b      	ldrh	r3, [r3, #26]
 800f5ce:	f043 0302 	orr.w	r3, r3, #2
 800f5d2:	b29a      	uxth	r2, r3
 800f5d4:	687b      	ldr	r3, [r7, #4]
 800f5d6:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800f5d8:	6878      	ldr	r0, [r7, #4]
 800f5da:	f7fe fd3b 	bl	800e054 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800f5de:	4b59      	ldr	r3, [pc, #356]	; (800f744 <tcp_process+0x7dc>)
 800f5e0:	681b      	ldr	r3, [r3, #0]
 800f5e2:	687a      	ldr	r2, [r7, #4]
 800f5e4:	429a      	cmp	r2, r3
 800f5e6:	d105      	bne.n	800f5f4 <tcp_process+0x68c>
 800f5e8:	4b56      	ldr	r3, [pc, #344]	; (800f744 <tcp_process+0x7dc>)
 800f5ea:	681b      	ldr	r3, [r3, #0]
 800f5ec:	68db      	ldr	r3, [r3, #12]
 800f5ee:	4a55      	ldr	r2, [pc, #340]	; (800f744 <tcp_process+0x7dc>)
 800f5f0:	6013      	str	r3, [r2, #0]
 800f5f2:	e013      	b.n	800f61c <tcp_process+0x6b4>
 800f5f4:	4b53      	ldr	r3, [pc, #332]	; (800f744 <tcp_process+0x7dc>)
 800f5f6:	681b      	ldr	r3, [r3, #0]
 800f5f8:	613b      	str	r3, [r7, #16]
 800f5fa:	e00c      	b.n	800f616 <tcp_process+0x6ae>
 800f5fc:	693b      	ldr	r3, [r7, #16]
 800f5fe:	68db      	ldr	r3, [r3, #12]
 800f600:	687a      	ldr	r2, [r7, #4]
 800f602:	429a      	cmp	r2, r3
 800f604:	d104      	bne.n	800f610 <tcp_process+0x6a8>
 800f606:	687b      	ldr	r3, [r7, #4]
 800f608:	68da      	ldr	r2, [r3, #12]
 800f60a:	693b      	ldr	r3, [r7, #16]
 800f60c:	60da      	str	r2, [r3, #12]
 800f60e:	e005      	b.n	800f61c <tcp_process+0x6b4>
 800f610:	693b      	ldr	r3, [r7, #16]
 800f612:	68db      	ldr	r3, [r3, #12]
 800f614:	613b      	str	r3, [r7, #16]
 800f616:	693b      	ldr	r3, [r7, #16]
 800f618:	2b00      	cmp	r3, #0
 800f61a:	d1ef      	bne.n	800f5fc <tcp_process+0x694>
 800f61c:	687b      	ldr	r3, [r7, #4]
 800f61e:	2200      	movs	r2, #0
 800f620:	60da      	str	r2, [r3, #12]
 800f622:	4b43      	ldr	r3, [pc, #268]	; (800f730 <tcp_process+0x7c8>)
 800f624:	2201      	movs	r2, #1
 800f626:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800f628:	687b      	ldr	r3, [r7, #4]
 800f62a:	220a      	movs	r2, #10
 800f62c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800f62e:	4b41      	ldr	r3, [pc, #260]	; (800f734 <tcp_process+0x7cc>)
 800f630:	681a      	ldr	r2, [r3, #0]
 800f632:	687b      	ldr	r3, [r7, #4]
 800f634:	60da      	str	r2, [r3, #12]
 800f636:	4a3f      	ldr	r2, [pc, #252]	; (800f734 <tcp_process+0x7cc>)
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	6013      	str	r3, [r2, #0]
 800f63c:	f002 fc8e 	bl	8011f5c <tcp_timer_needed>
      }
      break;
 800f640:	e06c      	b.n	800f71c <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800f642:	6878      	ldr	r0, [r7, #4]
 800f644:	f000 f984 	bl	800f950 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800f648:	4b3b      	ldr	r3, [pc, #236]	; (800f738 <tcp_process+0x7d0>)
 800f64a:	781b      	ldrb	r3, [r3, #0]
 800f64c:	f003 0310 	and.w	r3, r3, #16
 800f650:	2b00      	cmp	r3, #0
 800f652:	d065      	beq.n	800f720 <tcp_process+0x7b8>
 800f654:	687b      	ldr	r3, [r7, #4]
 800f656:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f658:	4b38      	ldr	r3, [pc, #224]	; (800f73c <tcp_process+0x7d4>)
 800f65a:	681b      	ldr	r3, [r3, #0]
 800f65c:	429a      	cmp	r2, r3
 800f65e:	d15f      	bne.n	800f720 <tcp_process+0x7b8>
 800f660:	687b      	ldr	r3, [r7, #4]
 800f662:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f664:	2b00      	cmp	r3, #0
 800f666:	d15b      	bne.n	800f720 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800f668:	6878      	ldr	r0, [r7, #4]
 800f66a:	f7fe fcf3 	bl	800e054 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800f66e:	4b35      	ldr	r3, [pc, #212]	; (800f744 <tcp_process+0x7dc>)
 800f670:	681b      	ldr	r3, [r3, #0]
 800f672:	687a      	ldr	r2, [r7, #4]
 800f674:	429a      	cmp	r2, r3
 800f676:	d105      	bne.n	800f684 <tcp_process+0x71c>
 800f678:	4b32      	ldr	r3, [pc, #200]	; (800f744 <tcp_process+0x7dc>)
 800f67a:	681b      	ldr	r3, [r3, #0]
 800f67c:	68db      	ldr	r3, [r3, #12]
 800f67e:	4a31      	ldr	r2, [pc, #196]	; (800f744 <tcp_process+0x7dc>)
 800f680:	6013      	str	r3, [r2, #0]
 800f682:	e013      	b.n	800f6ac <tcp_process+0x744>
 800f684:	4b2f      	ldr	r3, [pc, #188]	; (800f744 <tcp_process+0x7dc>)
 800f686:	681b      	ldr	r3, [r3, #0]
 800f688:	60fb      	str	r3, [r7, #12]
 800f68a:	e00c      	b.n	800f6a6 <tcp_process+0x73e>
 800f68c:	68fb      	ldr	r3, [r7, #12]
 800f68e:	68db      	ldr	r3, [r3, #12]
 800f690:	687a      	ldr	r2, [r7, #4]
 800f692:	429a      	cmp	r2, r3
 800f694:	d104      	bne.n	800f6a0 <tcp_process+0x738>
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	68da      	ldr	r2, [r3, #12]
 800f69a:	68fb      	ldr	r3, [r7, #12]
 800f69c:	60da      	str	r2, [r3, #12]
 800f69e:	e005      	b.n	800f6ac <tcp_process+0x744>
 800f6a0:	68fb      	ldr	r3, [r7, #12]
 800f6a2:	68db      	ldr	r3, [r3, #12]
 800f6a4:	60fb      	str	r3, [r7, #12]
 800f6a6:	68fb      	ldr	r3, [r7, #12]
 800f6a8:	2b00      	cmp	r3, #0
 800f6aa:	d1ef      	bne.n	800f68c <tcp_process+0x724>
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	2200      	movs	r2, #0
 800f6b0:	60da      	str	r2, [r3, #12]
 800f6b2:	4b1f      	ldr	r3, [pc, #124]	; (800f730 <tcp_process+0x7c8>)
 800f6b4:	2201      	movs	r2, #1
 800f6b6:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800f6b8:	687b      	ldr	r3, [r7, #4]
 800f6ba:	220a      	movs	r2, #10
 800f6bc:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800f6be:	4b1d      	ldr	r3, [pc, #116]	; (800f734 <tcp_process+0x7cc>)
 800f6c0:	681a      	ldr	r2, [r3, #0]
 800f6c2:	687b      	ldr	r3, [r7, #4]
 800f6c4:	60da      	str	r2, [r3, #12]
 800f6c6:	4a1b      	ldr	r2, [pc, #108]	; (800f734 <tcp_process+0x7cc>)
 800f6c8:	687b      	ldr	r3, [r7, #4]
 800f6ca:	6013      	str	r3, [r2, #0]
 800f6cc:	f002 fc46 	bl	8011f5c <tcp_timer_needed>
      }
      break;
 800f6d0:	e026      	b.n	800f720 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800f6d2:	6878      	ldr	r0, [r7, #4]
 800f6d4:	f000 f93c 	bl	800f950 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800f6d8:	4b17      	ldr	r3, [pc, #92]	; (800f738 <tcp_process+0x7d0>)
 800f6da:	781b      	ldrb	r3, [r3, #0]
 800f6dc:	f003 0310 	and.w	r3, r3, #16
 800f6e0:	2b00      	cmp	r3, #0
 800f6e2:	d01f      	beq.n	800f724 <tcp_process+0x7bc>
 800f6e4:	687b      	ldr	r3, [r7, #4]
 800f6e6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f6e8:	4b14      	ldr	r3, [pc, #80]	; (800f73c <tcp_process+0x7d4>)
 800f6ea:	681b      	ldr	r3, [r3, #0]
 800f6ec:	429a      	cmp	r2, r3
 800f6ee:	d119      	bne.n	800f724 <tcp_process+0x7bc>
 800f6f0:	687b      	ldr	r3, [r7, #4]
 800f6f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f6f4:	2b00      	cmp	r3, #0
 800f6f6:	d115      	bne.n	800f724 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800f6f8:	4b11      	ldr	r3, [pc, #68]	; (800f740 <tcp_process+0x7d8>)
 800f6fa:	781b      	ldrb	r3, [r3, #0]
 800f6fc:	f043 0310 	orr.w	r3, r3, #16
 800f700:	b2da      	uxtb	r2, r3
 800f702:	4b0f      	ldr	r3, [pc, #60]	; (800f740 <tcp_process+0x7d8>)
 800f704:	701a      	strb	r2, [r3, #0]
      }
      break;
 800f706:	e00d      	b.n	800f724 <tcp_process+0x7bc>
    default:
      break;
 800f708:	bf00      	nop
 800f70a:	e00c      	b.n	800f726 <tcp_process+0x7be>
      break;
 800f70c:	bf00      	nop
 800f70e:	e00a      	b.n	800f726 <tcp_process+0x7be>
      break;
 800f710:	bf00      	nop
 800f712:	e008      	b.n	800f726 <tcp_process+0x7be>
      break;
 800f714:	bf00      	nop
 800f716:	e006      	b.n	800f726 <tcp_process+0x7be>
      break;
 800f718:	bf00      	nop
 800f71a:	e004      	b.n	800f726 <tcp_process+0x7be>
      break;
 800f71c:	bf00      	nop
 800f71e:	e002      	b.n	800f726 <tcp_process+0x7be>
      break;
 800f720:	bf00      	nop
 800f722:	e000      	b.n	800f726 <tcp_process+0x7be>
      break;
 800f724:	bf00      	nop
  }
  return ERR_OK;
 800f726:	2300      	movs	r3, #0
}
 800f728:	4618      	mov	r0, r3
 800f72a:	3724      	adds	r7, #36	; 0x24
 800f72c:	46bd      	mov	sp, r7
 800f72e:	bd90      	pop	{r4, r7, pc}
 800f730:	20006e38 	.word	0x20006e38
 800f734:	20006e4c 	.word	0x20006e4c
 800f738:	20000484 	.word	0x20000484
 800f73c:	2000047c 	.word	0x2000047c
 800f740:	20000485 	.word	0x20000485
 800f744:	20006e3c 	.word	0x20006e3c

0800f748 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800f748:	b590      	push	{r4, r7, lr}
 800f74a:	b085      	sub	sp, #20
 800f74c:	af00      	add	r7, sp, #0
 800f74e:	6078      	str	r0, [r7, #4]
 800f750:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	2b00      	cmp	r3, #0
 800f756:	d106      	bne.n	800f766 <tcp_oos_insert_segment+0x1e>
 800f758:	4b3b      	ldr	r3, [pc, #236]	; (800f848 <tcp_oos_insert_segment+0x100>)
 800f75a:	f240 421f 	movw	r2, #1055	; 0x41f
 800f75e:	493b      	ldr	r1, [pc, #236]	; (800f84c <tcp_oos_insert_segment+0x104>)
 800f760:	483b      	ldr	r0, [pc, #236]	; (800f850 <tcp_oos_insert_segment+0x108>)
 800f762:	f008 f885 	bl	8017870 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800f766:	687b      	ldr	r3, [r7, #4]
 800f768:	68db      	ldr	r3, [r3, #12]
 800f76a:	899b      	ldrh	r3, [r3, #12]
 800f76c:	b29b      	uxth	r3, r3
 800f76e:	4618      	mov	r0, r3
 800f770:	f7fb fd64 	bl	800b23c <lwip_htons>
 800f774:	4603      	mov	r3, r0
 800f776:	b2db      	uxtb	r3, r3
 800f778:	f003 0301 	and.w	r3, r3, #1
 800f77c:	2b00      	cmp	r3, #0
 800f77e:	d028      	beq.n	800f7d2 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800f780:	6838      	ldr	r0, [r7, #0]
 800f782:	f7fe fa65 	bl	800dc50 <tcp_segs_free>
    next = NULL;
 800f786:	2300      	movs	r3, #0
 800f788:	603b      	str	r3, [r7, #0]
 800f78a:	e056      	b.n	800f83a <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800f78c:	683b      	ldr	r3, [r7, #0]
 800f78e:	68db      	ldr	r3, [r3, #12]
 800f790:	899b      	ldrh	r3, [r3, #12]
 800f792:	b29b      	uxth	r3, r3
 800f794:	4618      	mov	r0, r3
 800f796:	f7fb fd51 	bl	800b23c <lwip_htons>
 800f79a:	4603      	mov	r3, r0
 800f79c:	b2db      	uxtb	r3, r3
 800f79e:	f003 0301 	and.w	r3, r3, #1
 800f7a2:	2b00      	cmp	r3, #0
 800f7a4:	d00d      	beq.n	800f7c2 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800f7a6:	687b      	ldr	r3, [r7, #4]
 800f7a8:	68db      	ldr	r3, [r3, #12]
 800f7aa:	899b      	ldrh	r3, [r3, #12]
 800f7ac:	b29c      	uxth	r4, r3
 800f7ae:	2001      	movs	r0, #1
 800f7b0:	f7fb fd44 	bl	800b23c <lwip_htons>
 800f7b4:	4603      	mov	r3, r0
 800f7b6:	461a      	mov	r2, r3
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	68db      	ldr	r3, [r3, #12]
 800f7bc:	4322      	orrs	r2, r4
 800f7be:	b292      	uxth	r2, r2
 800f7c0:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800f7c2:	683b      	ldr	r3, [r7, #0]
 800f7c4:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800f7c6:	683b      	ldr	r3, [r7, #0]
 800f7c8:	681b      	ldr	r3, [r3, #0]
 800f7ca:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800f7cc:	68f8      	ldr	r0, [r7, #12]
 800f7ce:	f7fe fa54 	bl	800dc7a <tcp_seg_free>
    while (next &&
 800f7d2:	683b      	ldr	r3, [r7, #0]
 800f7d4:	2b00      	cmp	r3, #0
 800f7d6:	d00e      	beq.n	800f7f6 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800f7d8:	687b      	ldr	r3, [r7, #4]
 800f7da:	891b      	ldrh	r3, [r3, #8]
 800f7dc:	461a      	mov	r2, r3
 800f7de:	4b1d      	ldr	r3, [pc, #116]	; (800f854 <tcp_oos_insert_segment+0x10c>)
 800f7e0:	681b      	ldr	r3, [r3, #0]
 800f7e2:	441a      	add	r2, r3
 800f7e4:	683b      	ldr	r3, [r7, #0]
 800f7e6:	68db      	ldr	r3, [r3, #12]
 800f7e8:	685b      	ldr	r3, [r3, #4]
 800f7ea:	6839      	ldr	r1, [r7, #0]
 800f7ec:	8909      	ldrh	r1, [r1, #8]
 800f7ee:	440b      	add	r3, r1
 800f7f0:	1ad3      	subs	r3, r2, r3
    while (next &&
 800f7f2:	2b00      	cmp	r3, #0
 800f7f4:	daca      	bge.n	800f78c <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800f7f6:	683b      	ldr	r3, [r7, #0]
 800f7f8:	2b00      	cmp	r3, #0
 800f7fa:	d01e      	beq.n	800f83a <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800f7fc:	687b      	ldr	r3, [r7, #4]
 800f7fe:	891b      	ldrh	r3, [r3, #8]
 800f800:	461a      	mov	r2, r3
 800f802:	4b14      	ldr	r3, [pc, #80]	; (800f854 <tcp_oos_insert_segment+0x10c>)
 800f804:	681b      	ldr	r3, [r3, #0]
 800f806:	441a      	add	r2, r3
 800f808:	683b      	ldr	r3, [r7, #0]
 800f80a:	68db      	ldr	r3, [r3, #12]
 800f80c:	685b      	ldr	r3, [r3, #4]
 800f80e:	1ad3      	subs	r3, r2, r3
    if (next &&
 800f810:	2b00      	cmp	r3, #0
 800f812:	dd12      	ble.n	800f83a <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800f814:	683b      	ldr	r3, [r7, #0]
 800f816:	68db      	ldr	r3, [r3, #12]
 800f818:	685b      	ldr	r3, [r3, #4]
 800f81a:	b29a      	uxth	r2, r3
 800f81c:	4b0d      	ldr	r3, [pc, #52]	; (800f854 <tcp_oos_insert_segment+0x10c>)
 800f81e:	681b      	ldr	r3, [r3, #0]
 800f820:	b29b      	uxth	r3, r3
 800f822:	1ad3      	subs	r3, r2, r3
 800f824:	b29a      	uxth	r2, r3
 800f826:	687b      	ldr	r3, [r7, #4]
 800f828:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800f82a:	687b      	ldr	r3, [r7, #4]
 800f82c:	685a      	ldr	r2, [r3, #4]
 800f82e:	687b      	ldr	r3, [r7, #4]
 800f830:	891b      	ldrh	r3, [r3, #8]
 800f832:	4619      	mov	r1, r3
 800f834:	4610      	mov	r0, r2
 800f836:	f7fc fe17 	bl	800c468 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	683a      	ldr	r2, [r7, #0]
 800f83e:	601a      	str	r2, [r3, #0]
}
 800f840:	bf00      	nop
 800f842:	3714      	adds	r7, #20
 800f844:	46bd      	mov	sp, r7
 800f846:	bd90      	pop	{r4, r7, pc}
 800f848:	0801de74 	.word	0x0801de74
 800f84c:	0801e134 	.word	0x0801e134
 800f850:	0801dec0 	.word	0x0801dec0
 800f854:	20000478 	.word	0x20000478

0800f858 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800f858:	b5b0      	push	{r4, r5, r7, lr}
 800f85a:	b086      	sub	sp, #24
 800f85c:	af00      	add	r7, sp, #0
 800f85e:	60f8      	str	r0, [r7, #12]
 800f860:	60b9      	str	r1, [r7, #8]
 800f862:	607a      	str	r2, [r7, #4]
 800f864:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800f866:	e03e      	b.n	800f8e6 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800f868:	68bb      	ldr	r3, [r7, #8]
 800f86a:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800f86c:	68bb      	ldr	r3, [r7, #8]
 800f86e:	681b      	ldr	r3, [r3, #0]
 800f870:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800f872:	697b      	ldr	r3, [r7, #20]
 800f874:	685b      	ldr	r3, [r3, #4]
 800f876:	4618      	mov	r0, r3
 800f878:	f7fd f804 	bl	800c884 <pbuf_clen>
 800f87c:	4603      	mov	r3, r0
 800f87e:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800f880:	68fb      	ldr	r3, [r7, #12]
 800f882:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f886:	8a7a      	ldrh	r2, [r7, #18]
 800f888:	429a      	cmp	r2, r3
 800f88a:	d906      	bls.n	800f89a <tcp_free_acked_segments+0x42>
 800f88c:	4b2a      	ldr	r3, [pc, #168]	; (800f938 <tcp_free_acked_segments+0xe0>)
 800f88e:	f240 4257 	movw	r2, #1111	; 0x457
 800f892:	492a      	ldr	r1, [pc, #168]	; (800f93c <tcp_free_acked_segments+0xe4>)
 800f894:	482a      	ldr	r0, [pc, #168]	; (800f940 <tcp_free_acked_segments+0xe8>)
 800f896:	f007 ffeb 	bl	8017870 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800f89a:	68fb      	ldr	r3, [r7, #12]
 800f89c:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800f8a0:	8a7b      	ldrh	r3, [r7, #18]
 800f8a2:	1ad3      	subs	r3, r2, r3
 800f8a4:	b29a      	uxth	r2, r3
 800f8a6:	68fb      	ldr	r3, [r7, #12]
 800f8a8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800f8ac:	697b      	ldr	r3, [r7, #20]
 800f8ae:	891a      	ldrh	r2, [r3, #8]
 800f8b0:	4b24      	ldr	r3, [pc, #144]	; (800f944 <tcp_free_acked_segments+0xec>)
 800f8b2:	881b      	ldrh	r3, [r3, #0]
 800f8b4:	4413      	add	r3, r2
 800f8b6:	b29a      	uxth	r2, r3
 800f8b8:	4b22      	ldr	r3, [pc, #136]	; (800f944 <tcp_free_acked_segments+0xec>)
 800f8ba:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800f8bc:	6978      	ldr	r0, [r7, #20]
 800f8be:	f7fe f9dc 	bl	800dc7a <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800f8c2:	68fb      	ldr	r3, [r7, #12]
 800f8c4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f8c8:	2b00      	cmp	r3, #0
 800f8ca:	d00c      	beq.n	800f8e6 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800f8cc:	68bb      	ldr	r3, [r7, #8]
 800f8ce:	2b00      	cmp	r3, #0
 800f8d0:	d109      	bne.n	800f8e6 <tcp_free_acked_segments+0x8e>
 800f8d2:	683b      	ldr	r3, [r7, #0]
 800f8d4:	2b00      	cmp	r3, #0
 800f8d6:	d106      	bne.n	800f8e6 <tcp_free_acked_segments+0x8e>
 800f8d8:	4b17      	ldr	r3, [pc, #92]	; (800f938 <tcp_free_acked_segments+0xe0>)
 800f8da:	f240 4261 	movw	r2, #1121	; 0x461
 800f8de:	491a      	ldr	r1, [pc, #104]	; (800f948 <tcp_free_acked_segments+0xf0>)
 800f8e0:	4817      	ldr	r0, [pc, #92]	; (800f940 <tcp_free_acked_segments+0xe8>)
 800f8e2:	f007 ffc5 	bl	8017870 <iprintf>
  while (seg_list != NULL &&
 800f8e6:	68bb      	ldr	r3, [r7, #8]
 800f8e8:	2b00      	cmp	r3, #0
 800f8ea:	d020      	beq.n	800f92e <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800f8ec:	68bb      	ldr	r3, [r7, #8]
 800f8ee:	68db      	ldr	r3, [r3, #12]
 800f8f0:	685b      	ldr	r3, [r3, #4]
 800f8f2:	4618      	mov	r0, r3
 800f8f4:	f7fb fcb7 	bl	800b266 <lwip_htonl>
 800f8f8:	4604      	mov	r4, r0
 800f8fa:	68bb      	ldr	r3, [r7, #8]
 800f8fc:	891b      	ldrh	r3, [r3, #8]
 800f8fe:	461d      	mov	r5, r3
 800f900:	68bb      	ldr	r3, [r7, #8]
 800f902:	68db      	ldr	r3, [r3, #12]
 800f904:	899b      	ldrh	r3, [r3, #12]
 800f906:	b29b      	uxth	r3, r3
 800f908:	4618      	mov	r0, r3
 800f90a:	f7fb fc97 	bl	800b23c <lwip_htons>
 800f90e:	4603      	mov	r3, r0
 800f910:	b2db      	uxtb	r3, r3
 800f912:	f003 0303 	and.w	r3, r3, #3
 800f916:	2b00      	cmp	r3, #0
 800f918:	d001      	beq.n	800f91e <tcp_free_acked_segments+0xc6>
 800f91a:	2301      	movs	r3, #1
 800f91c:	e000      	b.n	800f920 <tcp_free_acked_segments+0xc8>
 800f91e:	2300      	movs	r3, #0
 800f920:	442b      	add	r3, r5
 800f922:	18e2      	adds	r2, r4, r3
 800f924:	4b09      	ldr	r3, [pc, #36]	; (800f94c <tcp_free_acked_segments+0xf4>)
 800f926:	681b      	ldr	r3, [r3, #0]
 800f928:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800f92a:	2b00      	cmp	r3, #0
 800f92c:	dd9c      	ble.n	800f868 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800f92e:	68bb      	ldr	r3, [r7, #8]
}
 800f930:	4618      	mov	r0, r3
 800f932:	3718      	adds	r7, #24
 800f934:	46bd      	mov	sp, r7
 800f936:	bdb0      	pop	{r4, r5, r7, pc}
 800f938:	0801de74 	.word	0x0801de74
 800f93c:	0801e15c 	.word	0x0801e15c
 800f940:	0801dec0 	.word	0x0801dec0
 800f944:	20000480 	.word	0x20000480
 800f948:	0801e184 	.word	0x0801e184
 800f94c:	2000047c 	.word	0x2000047c

0800f950 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800f950:	b5b0      	push	{r4, r5, r7, lr}
 800f952:	b094      	sub	sp, #80	; 0x50
 800f954:	af00      	add	r7, sp, #0
 800f956:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800f958:	2300      	movs	r3, #0
 800f95a:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	2b00      	cmp	r3, #0
 800f960:	d106      	bne.n	800f970 <tcp_receive+0x20>
 800f962:	4ba6      	ldr	r3, [pc, #664]	; (800fbfc <tcp_receive+0x2ac>)
 800f964:	f240 427b 	movw	r2, #1147	; 0x47b
 800f968:	49a5      	ldr	r1, [pc, #660]	; (800fc00 <tcp_receive+0x2b0>)
 800f96a:	48a6      	ldr	r0, [pc, #664]	; (800fc04 <tcp_receive+0x2b4>)
 800f96c:	f007 ff80 	bl	8017870 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800f970:	687b      	ldr	r3, [r7, #4]
 800f972:	7d1b      	ldrb	r3, [r3, #20]
 800f974:	2b03      	cmp	r3, #3
 800f976:	d806      	bhi.n	800f986 <tcp_receive+0x36>
 800f978:	4ba0      	ldr	r3, [pc, #640]	; (800fbfc <tcp_receive+0x2ac>)
 800f97a:	f240 427c 	movw	r2, #1148	; 0x47c
 800f97e:	49a2      	ldr	r1, [pc, #648]	; (800fc08 <tcp_receive+0x2b8>)
 800f980:	48a0      	ldr	r0, [pc, #640]	; (800fc04 <tcp_receive+0x2b4>)
 800f982:	f007 ff75 	bl	8017870 <iprintf>

  if (flags & TCP_ACK) {
 800f986:	4ba1      	ldr	r3, [pc, #644]	; (800fc0c <tcp_receive+0x2bc>)
 800f988:	781b      	ldrb	r3, [r3, #0]
 800f98a:	f003 0310 	and.w	r3, r3, #16
 800f98e:	2b00      	cmp	r3, #0
 800f990:	f000 8263 	beq.w	800fe5a <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800f994:	687b      	ldr	r3, [r7, #4]
 800f996:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f99a:	461a      	mov	r2, r3
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f9a0:	4413      	add	r3, r2
 800f9a2:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800f9a4:	687b      	ldr	r3, [r7, #4]
 800f9a6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f9a8:	4b99      	ldr	r3, [pc, #612]	; (800fc10 <tcp_receive+0x2c0>)
 800f9aa:	681b      	ldr	r3, [r3, #0]
 800f9ac:	1ad3      	subs	r3, r2, r3
 800f9ae:	2b00      	cmp	r3, #0
 800f9b0:	db1b      	blt.n	800f9ea <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800f9b2:	687b      	ldr	r3, [r7, #4]
 800f9b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f9b6:	4b96      	ldr	r3, [pc, #600]	; (800fc10 <tcp_receive+0x2c0>)
 800f9b8:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800f9ba:	429a      	cmp	r2, r3
 800f9bc:	d106      	bne.n	800f9cc <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800f9be:	687b      	ldr	r3, [r7, #4]
 800f9c0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800f9c2:	4b94      	ldr	r3, [pc, #592]	; (800fc14 <tcp_receive+0x2c4>)
 800f9c4:	681b      	ldr	r3, [r3, #0]
 800f9c6:	1ad3      	subs	r3, r2, r3
 800f9c8:	2b00      	cmp	r3, #0
 800f9ca:	db0e      	blt.n	800f9ea <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800f9d0:	4b90      	ldr	r3, [pc, #576]	; (800fc14 <tcp_receive+0x2c4>)
 800f9d2:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800f9d4:	429a      	cmp	r2, r3
 800f9d6:	d125      	bne.n	800fa24 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800f9d8:	4b8f      	ldr	r3, [pc, #572]	; (800fc18 <tcp_receive+0x2c8>)
 800f9da:	681b      	ldr	r3, [r3, #0]
 800f9dc:	89db      	ldrh	r3, [r3, #14]
 800f9de:	b29a      	uxth	r2, r3
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f9e6:	429a      	cmp	r2, r3
 800f9e8:	d91c      	bls.n	800fa24 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800f9ea:	4b8b      	ldr	r3, [pc, #556]	; (800fc18 <tcp_receive+0x2c8>)
 800f9ec:	681b      	ldr	r3, [r3, #0]
 800f9ee:	89db      	ldrh	r3, [r3, #14]
 800f9f0:	b29a      	uxth	r2, r3
 800f9f2:	687b      	ldr	r3, [r7, #4]
 800f9f4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800f9f8:	687b      	ldr	r3, [r7, #4]
 800f9fa:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800f9fe:	687b      	ldr	r3, [r7, #4]
 800fa00:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800fa04:	429a      	cmp	r2, r3
 800fa06:	d205      	bcs.n	800fa14 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800fa08:	687b      	ldr	r3, [r7, #4]
 800fa0a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800fa0e:	687b      	ldr	r3, [r7, #4]
 800fa10:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800fa14:	4b7e      	ldr	r3, [pc, #504]	; (800fc10 <tcp_receive+0x2c0>)
 800fa16:	681a      	ldr	r2, [r3, #0]
 800fa18:	687b      	ldr	r3, [r7, #4]
 800fa1a:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800fa1c:	4b7d      	ldr	r3, [pc, #500]	; (800fc14 <tcp_receive+0x2c4>)
 800fa1e:	681a      	ldr	r2, [r3, #0]
 800fa20:	687b      	ldr	r3, [r7, #4]
 800fa22:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800fa24:	4b7b      	ldr	r3, [pc, #492]	; (800fc14 <tcp_receive+0x2c4>)
 800fa26:	681a      	ldr	r2, [r3, #0]
 800fa28:	687b      	ldr	r3, [r7, #4]
 800fa2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fa2c:	1ad3      	subs	r3, r2, r3
 800fa2e:	2b00      	cmp	r3, #0
 800fa30:	dc58      	bgt.n	800fae4 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800fa32:	4b7a      	ldr	r3, [pc, #488]	; (800fc1c <tcp_receive+0x2cc>)
 800fa34:	881b      	ldrh	r3, [r3, #0]
 800fa36:	2b00      	cmp	r3, #0
 800fa38:	d14b      	bne.n	800fad2 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800fa3a:	687b      	ldr	r3, [r7, #4]
 800fa3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fa3e:	687a      	ldr	r2, [r7, #4]
 800fa40:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800fa44:	4413      	add	r3, r2
 800fa46:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fa48:	429a      	cmp	r2, r3
 800fa4a:	d142      	bne.n	800fad2 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800fa4c:	687b      	ldr	r3, [r7, #4]
 800fa4e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800fa52:	2b00      	cmp	r3, #0
 800fa54:	db3d      	blt.n	800fad2 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800fa56:	687b      	ldr	r3, [r7, #4]
 800fa58:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800fa5a:	4b6e      	ldr	r3, [pc, #440]	; (800fc14 <tcp_receive+0x2c4>)
 800fa5c:	681b      	ldr	r3, [r3, #0]
 800fa5e:	429a      	cmp	r2, r3
 800fa60:	d137      	bne.n	800fad2 <tcp_receive+0x182>
              found_dupack = 1;
 800fa62:	2301      	movs	r3, #1
 800fa64:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800fa66:	687b      	ldr	r3, [r7, #4]
 800fa68:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800fa6c:	2bff      	cmp	r3, #255	; 0xff
 800fa6e:	d007      	beq.n	800fa80 <tcp_receive+0x130>
                ++pcb->dupacks;
 800fa70:	687b      	ldr	r3, [r7, #4]
 800fa72:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800fa76:	3301      	adds	r3, #1
 800fa78:	b2da      	uxtb	r2, r3
 800fa7a:	687b      	ldr	r3, [r7, #4]
 800fa7c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800fa80:	687b      	ldr	r3, [r7, #4]
 800fa82:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800fa86:	2b03      	cmp	r3, #3
 800fa88:	d91b      	bls.n	800fac2 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800fa8a:	687b      	ldr	r3, [r7, #4]
 800fa8c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800fa90:	687b      	ldr	r3, [r7, #4]
 800fa92:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fa94:	4413      	add	r3, r2
 800fa96:	b29a      	uxth	r2, r3
 800fa98:	687b      	ldr	r3, [r7, #4]
 800fa9a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800fa9e:	429a      	cmp	r2, r3
 800faa0:	d30a      	bcc.n	800fab8 <tcp_receive+0x168>
 800faa2:	687b      	ldr	r3, [r7, #4]
 800faa4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800faa8:	687b      	ldr	r3, [r7, #4]
 800faaa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800faac:	4413      	add	r3, r2
 800faae:	b29a      	uxth	r2, r3
 800fab0:	687b      	ldr	r3, [r7, #4]
 800fab2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800fab6:	e004      	b.n	800fac2 <tcp_receive+0x172>
 800fab8:	687b      	ldr	r3, [r7, #4]
 800faba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fabe:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800fac2:	687b      	ldr	r3, [r7, #4]
 800fac4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800fac8:	2b02      	cmp	r3, #2
 800faca:	d902      	bls.n	800fad2 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800facc:	6878      	ldr	r0, [r7, #4]
 800face:	f001 fee9 	bl	80118a4 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800fad2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fad4:	2b00      	cmp	r3, #0
 800fad6:	f040 8160 	bne.w	800fd9a <tcp_receive+0x44a>
        pcb->dupacks = 0;
 800fada:	687b      	ldr	r3, [r7, #4]
 800fadc:	2200      	movs	r2, #0
 800fade:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800fae2:	e15a      	b.n	800fd9a <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800fae4:	4b4b      	ldr	r3, [pc, #300]	; (800fc14 <tcp_receive+0x2c4>)
 800fae6:	681a      	ldr	r2, [r3, #0]
 800fae8:	687b      	ldr	r3, [r7, #4]
 800faea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800faec:	1ad3      	subs	r3, r2, r3
 800faee:	3b01      	subs	r3, #1
 800faf0:	2b00      	cmp	r3, #0
 800faf2:	f2c0 814d 	blt.w	800fd90 <tcp_receive+0x440>
 800faf6:	4b47      	ldr	r3, [pc, #284]	; (800fc14 <tcp_receive+0x2c4>)
 800faf8:	681a      	ldr	r2, [r3, #0]
 800fafa:	687b      	ldr	r3, [r7, #4]
 800fafc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fafe:	1ad3      	subs	r3, r2, r3
 800fb00:	2b00      	cmp	r3, #0
 800fb02:	f300 8145 	bgt.w	800fd90 <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800fb06:	687b      	ldr	r3, [r7, #4]
 800fb08:	8b5b      	ldrh	r3, [r3, #26]
 800fb0a:	f003 0304 	and.w	r3, r3, #4
 800fb0e:	2b00      	cmp	r3, #0
 800fb10:	d010      	beq.n	800fb34 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800fb12:	687b      	ldr	r3, [r7, #4]
 800fb14:	8b5b      	ldrh	r3, [r3, #26]
 800fb16:	f023 0304 	bic.w	r3, r3, #4
 800fb1a:	b29a      	uxth	r2, r3
 800fb1c:	687b      	ldr	r3, [r7, #4]
 800fb1e:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800fb20:	687b      	ldr	r3, [r7, #4]
 800fb22:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800fb26:	687b      	ldr	r3, [r7, #4]
 800fb28:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800fb2c:	687b      	ldr	r3, [r7, #4]
 800fb2e:	2200      	movs	r2, #0
 800fb30:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800fb34:	687b      	ldr	r3, [r7, #4]
 800fb36:	2200      	movs	r2, #0
 800fb38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800fb3c:	687b      	ldr	r3, [r7, #4]
 800fb3e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800fb42:	10db      	asrs	r3, r3, #3
 800fb44:	b21b      	sxth	r3, r3
 800fb46:	b29a      	uxth	r2, r3
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800fb4e:	b29b      	uxth	r3, r3
 800fb50:	4413      	add	r3, r2
 800fb52:	b29b      	uxth	r3, r3
 800fb54:	b21a      	sxth	r2, r3
 800fb56:	687b      	ldr	r3, [r7, #4]
 800fb58:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800fb5c:	4b2d      	ldr	r3, [pc, #180]	; (800fc14 <tcp_receive+0x2c4>)
 800fb5e:	681b      	ldr	r3, [r3, #0]
 800fb60:	b29a      	uxth	r2, r3
 800fb62:	687b      	ldr	r3, [r7, #4]
 800fb64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fb66:	b29b      	uxth	r3, r3
 800fb68:	1ad3      	subs	r3, r2, r3
 800fb6a:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800fb6c:	687b      	ldr	r3, [r7, #4]
 800fb6e:	2200      	movs	r2, #0
 800fb70:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800fb74:	4b27      	ldr	r3, [pc, #156]	; (800fc14 <tcp_receive+0x2c4>)
 800fb76:	681a      	ldr	r2, [r3, #0]
 800fb78:	687b      	ldr	r3, [r7, #4]
 800fb7a:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	7d1b      	ldrb	r3, [r3, #20]
 800fb80:	2b03      	cmp	r3, #3
 800fb82:	f240 8096 	bls.w	800fcb2 <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 800fb86:	687b      	ldr	r3, [r7, #4]
 800fb88:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800fb8c:	687b      	ldr	r3, [r7, #4]
 800fb8e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800fb92:	429a      	cmp	r2, r3
 800fb94:	d244      	bcs.n	800fc20 <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800fb96:	687b      	ldr	r3, [r7, #4]
 800fb98:	8b5b      	ldrh	r3, [r3, #26]
 800fb9a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800fb9e:	2b00      	cmp	r3, #0
 800fba0:	d001      	beq.n	800fba6 <tcp_receive+0x256>
 800fba2:	2301      	movs	r3, #1
 800fba4:	e000      	b.n	800fba8 <tcp_receive+0x258>
 800fba6:	2302      	movs	r3, #2
 800fba8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800fbac:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800fbb0:	b29a      	uxth	r2, r3
 800fbb2:	687b      	ldr	r3, [r7, #4]
 800fbb4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fbb6:	fb12 f303 	smulbb	r3, r2, r3
 800fbba:	b29b      	uxth	r3, r3
 800fbbc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800fbbe:	4293      	cmp	r3, r2
 800fbc0:	bf28      	it	cs
 800fbc2:	4613      	movcs	r3, r2
 800fbc4:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800fbc6:	687b      	ldr	r3, [r7, #4]
 800fbc8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800fbcc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800fbce:	4413      	add	r3, r2
 800fbd0:	b29a      	uxth	r2, r3
 800fbd2:	687b      	ldr	r3, [r7, #4]
 800fbd4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800fbd8:	429a      	cmp	r2, r3
 800fbda:	d309      	bcc.n	800fbf0 <tcp_receive+0x2a0>
 800fbdc:	687b      	ldr	r3, [r7, #4]
 800fbde:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800fbe2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800fbe4:	4413      	add	r3, r2
 800fbe6:	b29a      	uxth	r2, r3
 800fbe8:	687b      	ldr	r3, [r7, #4]
 800fbea:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800fbee:	e060      	b.n	800fcb2 <tcp_receive+0x362>
 800fbf0:	687b      	ldr	r3, [r7, #4]
 800fbf2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fbf6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800fbfa:	e05a      	b.n	800fcb2 <tcp_receive+0x362>
 800fbfc:	0801de74 	.word	0x0801de74
 800fc00:	0801e1a4 	.word	0x0801e1a4
 800fc04:	0801dec0 	.word	0x0801dec0
 800fc08:	0801e1c0 	.word	0x0801e1c0
 800fc0c:	20000484 	.word	0x20000484
 800fc10:	20000478 	.word	0x20000478
 800fc14:	2000047c 	.word	0x2000047c
 800fc18:	20000468 	.word	0x20000468
 800fc1c:	20000482 	.word	0x20000482
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800fc20:	687b      	ldr	r3, [r7, #4]
 800fc22:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800fc26:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800fc28:	4413      	add	r3, r2
 800fc2a:	b29a      	uxth	r2, r3
 800fc2c:	687b      	ldr	r3, [r7, #4]
 800fc2e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800fc32:	429a      	cmp	r2, r3
 800fc34:	d309      	bcc.n	800fc4a <tcp_receive+0x2fa>
 800fc36:	687b      	ldr	r3, [r7, #4]
 800fc38:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800fc3c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800fc3e:	4413      	add	r3, r2
 800fc40:	b29a      	uxth	r2, r3
 800fc42:	687b      	ldr	r3, [r7, #4]
 800fc44:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800fc48:	e004      	b.n	800fc54 <tcp_receive+0x304>
 800fc4a:	687b      	ldr	r3, [r7, #4]
 800fc4c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fc50:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800fc54:	687b      	ldr	r3, [r7, #4]
 800fc56:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800fc5a:	687b      	ldr	r3, [r7, #4]
 800fc5c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800fc60:	429a      	cmp	r2, r3
 800fc62:	d326      	bcc.n	800fcb2 <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800fc64:	687b      	ldr	r3, [r7, #4]
 800fc66:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800fc6a:	687b      	ldr	r3, [r7, #4]
 800fc6c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800fc70:	1ad3      	subs	r3, r2, r3
 800fc72:	b29a      	uxth	r2, r3
 800fc74:	687b      	ldr	r3, [r7, #4]
 800fc76:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800fc7a:	687b      	ldr	r3, [r7, #4]
 800fc7c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800fc80:	687b      	ldr	r3, [r7, #4]
 800fc82:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fc84:	4413      	add	r3, r2
 800fc86:	b29a      	uxth	r2, r3
 800fc88:	687b      	ldr	r3, [r7, #4]
 800fc8a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800fc8e:	429a      	cmp	r2, r3
 800fc90:	d30a      	bcc.n	800fca8 <tcp_receive+0x358>
 800fc92:	687b      	ldr	r3, [r7, #4]
 800fc94:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800fc98:	687b      	ldr	r3, [r7, #4]
 800fc9a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fc9c:	4413      	add	r3, r2
 800fc9e:	b29a      	uxth	r2, r3
 800fca0:	687b      	ldr	r3, [r7, #4]
 800fca2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800fca6:	e004      	b.n	800fcb2 <tcp_receive+0x362>
 800fca8:	687b      	ldr	r3, [r7, #4]
 800fcaa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fcae:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800fcb2:	687b      	ldr	r3, [r7, #4]
 800fcb4:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800fcb6:	687b      	ldr	r3, [r7, #4]
 800fcb8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fcba:	4a98      	ldr	r2, [pc, #608]	; (800ff1c <tcp_receive+0x5cc>)
 800fcbc:	6878      	ldr	r0, [r7, #4]
 800fcbe:	f7ff fdcb 	bl	800f858 <tcp_free_acked_segments>
 800fcc2:	4602      	mov	r2, r0
 800fcc4:	687b      	ldr	r3, [r7, #4]
 800fcc6:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800fcc8:	687b      	ldr	r3, [r7, #4]
 800fcca:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800fccc:	687b      	ldr	r3, [r7, #4]
 800fcce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fcd0:	4a93      	ldr	r2, [pc, #588]	; (800ff20 <tcp_receive+0x5d0>)
 800fcd2:	6878      	ldr	r0, [r7, #4]
 800fcd4:	f7ff fdc0 	bl	800f858 <tcp_free_acked_segments>
 800fcd8:	4602      	mov	r2, r0
 800fcda:	687b      	ldr	r3, [r7, #4]
 800fcdc:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800fcde:	687b      	ldr	r3, [r7, #4]
 800fce0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fce2:	2b00      	cmp	r3, #0
 800fce4:	d104      	bne.n	800fcf0 <tcp_receive+0x3a0>
        pcb->rtime = -1;
 800fce6:	687b      	ldr	r3, [r7, #4]
 800fce8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fcec:	861a      	strh	r2, [r3, #48]	; 0x30
 800fcee:	e002      	b.n	800fcf6 <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 800fcf0:	687b      	ldr	r3, [r7, #4]
 800fcf2:	2200      	movs	r2, #0
 800fcf4:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800fcf6:	687b      	ldr	r3, [r7, #4]
 800fcf8:	2200      	movs	r2, #0
 800fcfa:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800fcfc:	687b      	ldr	r3, [r7, #4]
 800fcfe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fd00:	2b00      	cmp	r3, #0
 800fd02:	d103      	bne.n	800fd0c <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 800fd04:	687b      	ldr	r3, [r7, #4]
 800fd06:	2200      	movs	r2, #0
 800fd08:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800fd0c:	687b      	ldr	r3, [r7, #4]
 800fd0e:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800fd12:	4b84      	ldr	r3, [pc, #528]	; (800ff24 <tcp_receive+0x5d4>)
 800fd14:	881b      	ldrh	r3, [r3, #0]
 800fd16:	4413      	add	r3, r2
 800fd18:	b29a      	uxth	r2, r3
 800fd1a:	687b      	ldr	r3, [r7, #4]
 800fd1c:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800fd20:	687b      	ldr	r3, [r7, #4]
 800fd22:	8b5b      	ldrh	r3, [r3, #26]
 800fd24:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800fd28:	2b00      	cmp	r3, #0
 800fd2a:	d035      	beq.n	800fd98 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800fd2c:	687b      	ldr	r3, [r7, #4]
 800fd2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fd30:	2b00      	cmp	r3, #0
 800fd32:	d118      	bne.n	800fd66 <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 800fd34:	687b      	ldr	r3, [r7, #4]
 800fd36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fd38:	2b00      	cmp	r3, #0
 800fd3a:	d00c      	beq.n	800fd56 <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800fd3c:	687b      	ldr	r3, [r7, #4]
 800fd3e:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800fd40:	687b      	ldr	r3, [r7, #4]
 800fd42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fd44:	68db      	ldr	r3, [r3, #12]
 800fd46:	685b      	ldr	r3, [r3, #4]
 800fd48:	4618      	mov	r0, r3
 800fd4a:	f7fb fa8c 	bl	800b266 <lwip_htonl>
 800fd4e:	4603      	mov	r3, r0
 800fd50:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800fd52:	2b00      	cmp	r3, #0
 800fd54:	dc20      	bgt.n	800fd98 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 800fd56:	687b      	ldr	r3, [r7, #4]
 800fd58:	8b5b      	ldrh	r3, [r3, #26]
 800fd5a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800fd5e:	b29a      	uxth	r2, r3
 800fd60:	687b      	ldr	r3, [r7, #4]
 800fd62:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800fd64:	e018      	b.n	800fd98 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800fd66:	687b      	ldr	r3, [r7, #4]
 800fd68:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800fd6a:	687b      	ldr	r3, [r7, #4]
 800fd6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fd6e:	68db      	ldr	r3, [r3, #12]
 800fd70:	685b      	ldr	r3, [r3, #4]
 800fd72:	4618      	mov	r0, r3
 800fd74:	f7fb fa77 	bl	800b266 <lwip_htonl>
 800fd78:	4603      	mov	r3, r0
 800fd7a:	1ae3      	subs	r3, r4, r3
 800fd7c:	2b00      	cmp	r3, #0
 800fd7e:	dc0b      	bgt.n	800fd98 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 800fd80:	687b      	ldr	r3, [r7, #4]
 800fd82:	8b5b      	ldrh	r3, [r3, #26]
 800fd84:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800fd88:	b29a      	uxth	r2, r3
 800fd8a:	687b      	ldr	r3, [r7, #4]
 800fd8c:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800fd8e:	e003      	b.n	800fd98 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800fd90:	6878      	ldr	r0, [r7, #4]
 800fd92:	f001 ff73 	bl	8011c7c <tcp_send_empty_ack>
 800fd96:	e000      	b.n	800fd9a <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800fd98:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800fd9a:	687b      	ldr	r3, [r7, #4]
 800fd9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fd9e:	2b00      	cmp	r3, #0
 800fda0:	d05b      	beq.n	800fe5a <tcp_receive+0x50a>
 800fda2:	687b      	ldr	r3, [r7, #4]
 800fda4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fda6:	4b60      	ldr	r3, [pc, #384]	; (800ff28 <tcp_receive+0x5d8>)
 800fda8:	681b      	ldr	r3, [r3, #0]
 800fdaa:	1ad3      	subs	r3, r2, r3
 800fdac:	2b00      	cmp	r3, #0
 800fdae:	da54      	bge.n	800fe5a <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800fdb0:	4b5e      	ldr	r3, [pc, #376]	; (800ff2c <tcp_receive+0x5dc>)
 800fdb2:	681b      	ldr	r3, [r3, #0]
 800fdb4:	b29a      	uxth	r2, r3
 800fdb6:	687b      	ldr	r3, [r7, #4]
 800fdb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fdba:	b29b      	uxth	r3, r3
 800fdbc:	1ad3      	subs	r3, r2, r3
 800fdbe:	b29b      	uxth	r3, r3
 800fdc0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800fdc4:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800fdc8:	687b      	ldr	r3, [r7, #4]
 800fdca:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800fdce:	10db      	asrs	r3, r3, #3
 800fdd0:	b21b      	sxth	r3, r3
 800fdd2:	b29b      	uxth	r3, r3
 800fdd4:	1ad3      	subs	r3, r2, r3
 800fdd6:	b29b      	uxth	r3, r3
 800fdd8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800fddc:	687b      	ldr	r3, [r7, #4]
 800fdde:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800fde2:	b29a      	uxth	r2, r3
 800fde4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800fde8:	4413      	add	r3, r2
 800fdea:	b29b      	uxth	r3, r3
 800fdec:	b21a      	sxth	r2, r3
 800fdee:	687b      	ldr	r3, [r7, #4]
 800fdf0:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800fdf2:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800fdf6:	2b00      	cmp	r3, #0
 800fdf8:	da05      	bge.n	800fe06 <tcp_receive+0x4b6>
        m = (s16_t) - m;
 800fdfa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800fdfe:	425b      	negs	r3, r3
 800fe00:	b29b      	uxth	r3, r3
 800fe02:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800fe06:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800fe0a:	687b      	ldr	r3, [r7, #4]
 800fe0c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800fe10:	109b      	asrs	r3, r3, #2
 800fe12:	b21b      	sxth	r3, r3
 800fe14:	b29b      	uxth	r3, r3
 800fe16:	1ad3      	subs	r3, r2, r3
 800fe18:	b29b      	uxth	r3, r3
 800fe1a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800fe1e:	687b      	ldr	r3, [r7, #4]
 800fe20:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800fe24:	b29a      	uxth	r2, r3
 800fe26:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800fe2a:	4413      	add	r3, r2
 800fe2c:	b29b      	uxth	r3, r3
 800fe2e:	b21a      	sxth	r2, r3
 800fe30:	687b      	ldr	r3, [r7, #4]
 800fe32:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800fe34:	687b      	ldr	r3, [r7, #4]
 800fe36:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800fe3a:	10db      	asrs	r3, r3, #3
 800fe3c:	b21b      	sxth	r3, r3
 800fe3e:	b29a      	uxth	r2, r3
 800fe40:	687b      	ldr	r3, [r7, #4]
 800fe42:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800fe46:	b29b      	uxth	r3, r3
 800fe48:	4413      	add	r3, r2
 800fe4a:	b29b      	uxth	r3, r3
 800fe4c:	b21a      	sxth	r2, r3
 800fe4e:	687b      	ldr	r3, [r7, #4]
 800fe50:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800fe54:	687b      	ldr	r3, [r7, #4]
 800fe56:	2200      	movs	r2, #0
 800fe58:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800fe5a:	4b35      	ldr	r3, [pc, #212]	; (800ff30 <tcp_receive+0x5e0>)
 800fe5c:	881b      	ldrh	r3, [r3, #0]
 800fe5e:	2b00      	cmp	r3, #0
 800fe60:	f000 84e1 	beq.w	8010826 <tcp_receive+0xed6>
 800fe64:	687b      	ldr	r3, [r7, #4]
 800fe66:	7d1b      	ldrb	r3, [r3, #20]
 800fe68:	2b06      	cmp	r3, #6
 800fe6a:	f200 84dc 	bhi.w	8010826 <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800fe6e:	687b      	ldr	r3, [r7, #4]
 800fe70:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fe72:	4b30      	ldr	r3, [pc, #192]	; (800ff34 <tcp_receive+0x5e4>)
 800fe74:	681b      	ldr	r3, [r3, #0]
 800fe76:	1ad3      	subs	r3, r2, r3
 800fe78:	3b01      	subs	r3, #1
 800fe7a:	2b00      	cmp	r3, #0
 800fe7c:	f2c0 808e 	blt.w	800ff9c <tcp_receive+0x64c>
 800fe80:	687b      	ldr	r3, [r7, #4]
 800fe82:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fe84:	4b2a      	ldr	r3, [pc, #168]	; (800ff30 <tcp_receive+0x5e0>)
 800fe86:	881b      	ldrh	r3, [r3, #0]
 800fe88:	4619      	mov	r1, r3
 800fe8a:	4b2a      	ldr	r3, [pc, #168]	; (800ff34 <tcp_receive+0x5e4>)
 800fe8c:	681b      	ldr	r3, [r3, #0]
 800fe8e:	440b      	add	r3, r1
 800fe90:	1ad3      	subs	r3, r2, r3
 800fe92:	3301      	adds	r3, #1
 800fe94:	2b00      	cmp	r3, #0
 800fe96:	f300 8081 	bgt.w	800ff9c <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800fe9a:	4b27      	ldr	r3, [pc, #156]	; (800ff38 <tcp_receive+0x5e8>)
 800fe9c:	685b      	ldr	r3, [r3, #4]
 800fe9e:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800fea0:	687b      	ldr	r3, [r7, #4]
 800fea2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fea4:	4b23      	ldr	r3, [pc, #140]	; (800ff34 <tcp_receive+0x5e4>)
 800fea6:	681b      	ldr	r3, [r3, #0]
 800fea8:	1ad3      	subs	r3, r2, r3
 800feaa:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800feac:	4b22      	ldr	r3, [pc, #136]	; (800ff38 <tcp_receive+0x5e8>)
 800feae:	685b      	ldr	r3, [r3, #4]
 800feb0:	2b00      	cmp	r3, #0
 800feb2:	d106      	bne.n	800fec2 <tcp_receive+0x572>
 800feb4:	4b21      	ldr	r3, [pc, #132]	; (800ff3c <tcp_receive+0x5ec>)
 800feb6:	f240 5294 	movw	r2, #1428	; 0x594
 800feba:	4921      	ldr	r1, [pc, #132]	; (800ff40 <tcp_receive+0x5f0>)
 800febc:	4821      	ldr	r0, [pc, #132]	; (800ff44 <tcp_receive+0x5f4>)
 800febe:	f007 fcd7 	bl	8017870 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800fec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fec4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800fec8:	4293      	cmp	r3, r2
 800feca:	d906      	bls.n	800feda <tcp_receive+0x58a>
 800fecc:	4b1b      	ldr	r3, [pc, #108]	; (800ff3c <tcp_receive+0x5ec>)
 800fece:	f240 5295 	movw	r2, #1429	; 0x595
 800fed2:	491d      	ldr	r1, [pc, #116]	; (800ff48 <tcp_receive+0x5f8>)
 800fed4:	481b      	ldr	r0, [pc, #108]	; (800ff44 <tcp_receive+0x5f4>)
 800fed6:	f007 fccb 	bl	8017870 <iprintf>
      off = (u16_t)off32;
 800feda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fedc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800fee0:	4b15      	ldr	r3, [pc, #84]	; (800ff38 <tcp_receive+0x5e8>)
 800fee2:	685b      	ldr	r3, [r3, #4]
 800fee4:	891b      	ldrh	r3, [r3, #8]
 800fee6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800feea:	429a      	cmp	r2, r3
 800feec:	d906      	bls.n	800fefc <tcp_receive+0x5ac>
 800feee:	4b13      	ldr	r3, [pc, #76]	; (800ff3c <tcp_receive+0x5ec>)
 800fef0:	f240 5297 	movw	r2, #1431	; 0x597
 800fef4:	4915      	ldr	r1, [pc, #84]	; (800ff4c <tcp_receive+0x5fc>)
 800fef6:	4813      	ldr	r0, [pc, #76]	; (800ff44 <tcp_receive+0x5f4>)
 800fef8:	f007 fcba 	bl	8017870 <iprintf>
      inseg.len -= off;
 800fefc:	4b0e      	ldr	r3, [pc, #56]	; (800ff38 <tcp_receive+0x5e8>)
 800fefe:	891a      	ldrh	r2, [r3, #8]
 800ff00:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ff04:	1ad3      	subs	r3, r2, r3
 800ff06:	b29a      	uxth	r2, r3
 800ff08:	4b0b      	ldr	r3, [pc, #44]	; (800ff38 <tcp_receive+0x5e8>)
 800ff0a:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800ff0c:	4b0a      	ldr	r3, [pc, #40]	; (800ff38 <tcp_receive+0x5e8>)
 800ff0e:	685b      	ldr	r3, [r3, #4]
 800ff10:	891a      	ldrh	r2, [r3, #8]
 800ff12:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ff16:	1ad3      	subs	r3, r2, r3
 800ff18:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800ff1a:	e029      	b.n	800ff70 <tcp_receive+0x620>
 800ff1c:	0801e1dc 	.word	0x0801e1dc
 800ff20:	0801e1e4 	.word	0x0801e1e4
 800ff24:	20000480 	.word	0x20000480
 800ff28:	2000047c 	.word	0x2000047c
 800ff2c:	20006e40 	.word	0x20006e40
 800ff30:	20000482 	.word	0x20000482
 800ff34:	20000478 	.word	0x20000478
 800ff38:	20000458 	.word	0x20000458
 800ff3c:	0801de74 	.word	0x0801de74
 800ff40:	0801e1ec 	.word	0x0801e1ec
 800ff44:	0801dec0 	.word	0x0801dec0
 800ff48:	0801e1fc 	.word	0x0801e1fc
 800ff4c:	0801e20c 	.word	0x0801e20c
        off -= p->len;
 800ff50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ff52:	895b      	ldrh	r3, [r3, #10]
 800ff54:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800ff58:	1ad3      	subs	r3, r2, r3
 800ff5a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800ff5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ff60:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800ff62:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800ff64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ff66:	2200      	movs	r2, #0
 800ff68:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800ff6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ff6c:	681b      	ldr	r3, [r3, #0]
 800ff6e:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800ff70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ff72:	895b      	ldrh	r3, [r3, #10]
 800ff74:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800ff78:	429a      	cmp	r2, r3
 800ff7a:	d8e9      	bhi.n	800ff50 <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800ff7c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ff80:	4619      	mov	r1, r3
 800ff82:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800ff84:	f7fc fb70 	bl	800c668 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800ff88:	687b      	ldr	r3, [r7, #4]
 800ff8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff8c:	4a91      	ldr	r2, [pc, #580]	; (80101d4 <tcp_receive+0x884>)
 800ff8e:	6013      	str	r3, [r2, #0]
 800ff90:	4b91      	ldr	r3, [pc, #580]	; (80101d8 <tcp_receive+0x888>)
 800ff92:	68db      	ldr	r3, [r3, #12]
 800ff94:	4a8f      	ldr	r2, [pc, #572]	; (80101d4 <tcp_receive+0x884>)
 800ff96:	6812      	ldr	r2, [r2, #0]
 800ff98:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800ff9a:	e00d      	b.n	800ffb8 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800ff9c:	4b8d      	ldr	r3, [pc, #564]	; (80101d4 <tcp_receive+0x884>)
 800ff9e:	681a      	ldr	r2, [r3, #0]
 800ffa0:	687b      	ldr	r3, [r7, #4]
 800ffa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ffa4:	1ad3      	subs	r3, r2, r3
 800ffa6:	2b00      	cmp	r3, #0
 800ffa8:	da06      	bge.n	800ffb8 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800ffaa:	687b      	ldr	r3, [r7, #4]
 800ffac:	8b5b      	ldrh	r3, [r3, #26]
 800ffae:	f043 0302 	orr.w	r3, r3, #2
 800ffb2:	b29a      	uxth	r2, r3
 800ffb4:	687b      	ldr	r3, [r7, #4]
 800ffb6:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800ffb8:	4b86      	ldr	r3, [pc, #536]	; (80101d4 <tcp_receive+0x884>)
 800ffba:	681a      	ldr	r2, [r3, #0]
 800ffbc:	687b      	ldr	r3, [r7, #4]
 800ffbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ffc0:	1ad3      	subs	r3, r2, r3
 800ffc2:	2b00      	cmp	r3, #0
 800ffc4:	f2c0 842a 	blt.w	801081c <tcp_receive+0xecc>
 800ffc8:	4b82      	ldr	r3, [pc, #520]	; (80101d4 <tcp_receive+0x884>)
 800ffca:	681a      	ldr	r2, [r3, #0]
 800ffcc:	687b      	ldr	r3, [r7, #4]
 800ffce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ffd0:	6879      	ldr	r1, [r7, #4]
 800ffd2:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800ffd4:	440b      	add	r3, r1
 800ffd6:	1ad3      	subs	r3, r2, r3
 800ffd8:	3301      	adds	r3, #1
 800ffda:	2b00      	cmp	r3, #0
 800ffdc:	f300 841e 	bgt.w	801081c <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800ffe0:	687b      	ldr	r3, [r7, #4]
 800ffe2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ffe4:	4b7b      	ldr	r3, [pc, #492]	; (80101d4 <tcp_receive+0x884>)
 800ffe6:	681b      	ldr	r3, [r3, #0]
 800ffe8:	429a      	cmp	r2, r3
 800ffea:	f040 829a 	bne.w	8010522 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800ffee:	4b7a      	ldr	r3, [pc, #488]	; (80101d8 <tcp_receive+0x888>)
 800fff0:	891c      	ldrh	r4, [r3, #8]
 800fff2:	4b79      	ldr	r3, [pc, #484]	; (80101d8 <tcp_receive+0x888>)
 800fff4:	68db      	ldr	r3, [r3, #12]
 800fff6:	899b      	ldrh	r3, [r3, #12]
 800fff8:	b29b      	uxth	r3, r3
 800fffa:	4618      	mov	r0, r3
 800fffc:	f7fb f91e 	bl	800b23c <lwip_htons>
 8010000:	4603      	mov	r3, r0
 8010002:	b2db      	uxtb	r3, r3
 8010004:	f003 0303 	and.w	r3, r3, #3
 8010008:	2b00      	cmp	r3, #0
 801000a:	d001      	beq.n	8010010 <tcp_receive+0x6c0>
 801000c:	2301      	movs	r3, #1
 801000e:	e000      	b.n	8010012 <tcp_receive+0x6c2>
 8010010:	2300      	movs	r3, #0
 8010012:	4423      	add	r3, r4
 8010014:	b29a      	uxth	r2, r3
 8010016:	4b71      	ldr	r3, [pc, #452]	; (80101dc <tcp_receive+0x88c>)
 8010018:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 801001a:	687b      	ldr	r3, [r7, #4]
 801001c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801001e:	4b6f      	ldr	r3, [pc, #444]	; (80101dc <tcp_receive+0x88c>)
 8010020:	881b      	ldrh	r3, [r3, #0]
 8010022:	429a      	cmp	r2, r3
 8010024:	d275      	bcs.n	8010112 <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8010026:	4b6c      	ldr	r3, [pc, #432]	; (80101d8 <tcp_receive+0x888>)
 8010028:	68db      	ldr	r3, [r3, #12]
 801002a:	899b      	ldrh	r3, [r3, #12]
 801002c:	b29b      	uxth	r3, r3
 801002e:	4618      	mov	r0, r3
 8010030:	f7fb f904 	bl	800b23c <lwip_htons>
 8010034:	4603      	mov	r3, r0
 8010036:	b2db      	uxtb	r3, r3
 8010038:	f003 0301 	and.w	r3, r3, #1
 801003c:	2b00      	cmp	r3, #0
 801003e:	d01f      	beq.n	8010080 <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8010040:	4b65      	ldr	r3, [pc, #404]	; (80101d8 <tcp_receive+0x888>)
 8010042:	68db      	ldr	r3, [r3, #12]
 8010044:	899b      	ldrh	r3, [r3, #12]
 8010046:	b29b      	uxth	r3, r3
 8010048:	b21b      	sxth	r3, r3
 801004a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801004e:	b21c      	sxth	r4, r3
 8010050:	4b61      	ldr	r3, [pc, #388]	; (80101d8 <tcp_receive+0x888>)
 8010052:	68db      	ldr	r3, [r3, #12]
 8010054:	899b      	ldrh	r3, [r3, #12]
 8010056:	b29b      	uxth	r3, r3
 8010058:	4618      	mov	r0, r3
 801005a:	f7fb f8ef 	bl	800b23c <lwip_htons>
 801005e:	4603      	mov	r3, r0
 8010060:	b2db      	uxtb	r3, r3
 8010062:	b29b      	uxth	r3, r3
 8010064:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8010068:	b29b      	uxth	r3, r3
 801006a:	4618      	mov	r0, r3
 801006c:	f7fb f8e6 	bl	800b23c <lwip_htons>
 8010070:	4603      	mov	r3, r0
 8010072:	b21b      	sxth	r3, r3
 8010074:	4323      	orrs	r3, r4
 8010076:	b21a      	sxth	r2, r3
 8010078:	4b57      	ldr	r3, [pc, #348]	; (80101d8 <tcp_receive+0x888>)
 801007a:	68db      	ldr	r3, [r3, #12]
 801007c:	b292      	uxth	r2, r2
 801007e:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8010080:	687b      	ldr	r3, [r7, #4]
 8010082:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010084:	4b54      	ldr	r3, [pc, #336]	; (80101d8 <tcp_receive+0x888>)
 8010086:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8010088:	4b53      	ldr	r3, [pc, #332]	; (80101d8 <tcp_receive+0x888>)
 801008a:	68db      	ldr	r3, [r3, #12]
 801008c:	899b      	ldrh	r3, [r3, #12]
 801008e:	b29b      	uxth	r3, r3
 8010090:	4618      	mov	r0, r3
 8010092:	f7fb f8d3 	bl	800b23c <lwip_htons>
 8010096:	4603      	mov	r3, r0
 8010098:	b2db      	uxtb	r3, r3
 801009a:	f003 0302 	and.w	r3, r3, #2
 801009e:	2b00      	cmp	r3, #0
 80100a0:	d005      	beq.n	80100ae <tcp_receive+0x75e>
            inseg.len -= 1;
 80100a2:	4b4d      	ldr	r3, [pc, #308]	; (80101d8 <tcp_receive+0x888>)
 80100a4:	891b      	ldrh	r3, [r3, #8]
 80100a6:	3b01      	subs	r3, #1
 80100a8:	b29a      	uxth	r2, r3
 80100aa:	4b4b      	ldr	r3, [pc, #300]	; (80101d8 <tcp_receive+0x888>)
 80100ac:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 80100ae:	4b4a      	ldr	r3, [pc, #296]	; (80101d8 <tcp_receive+0x888>)
 80100b0:	685b      	ldr	r3, [r3, #4]
 80100b2:	4a49      	ldr	r2, [pc, #292]	; (80101d8 <tcp_receive+0x888>)
 80100b4:	8912      	ldrh	r2, [r2, #8]
 80100b6:	4611      	mov	r1, r2
 80100b8:	4618      	mov	r0, r3
 80100ba:	f7fc f9d5 	bl	800c468 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 80100be:	4b46      	ldr	r3, [pc, #280]	; (80101d8 <tcp_receive+0x888>)
 80100c0:	891c      	ldrh	r4, [r3, #8]
 80100c2:	4b45      	ldr	r3, [pc, #276]	; (80101d8 <tcp_receive+0x888>)
 80100c4:	68db      	ldr	r3, [r3, #12]
 80100c6:	899b      	ldrh	r3, [r3, #12]
 80100c8:	b29b      	uxth	r3, r3
 80100ca:	4618      	mov	r0, r3
 80100cc:	f7fb f8b6 	bl	800b23c <lwip_htons>
 80100d0:	4603      	mov	r3, r0
 80100d2:	b2db      	uxtb	r3, r3
 80100d4:	f003 0303 	and.w	r3, r3, #3
 80100d8:	2b00      	cmp	r3, #0
 80100da:	d001      	beq.n	80100e0 <tcp_receive+0x790>
 80100dc:	2301      	movs	r3, #1
 80100de:	e000      	b.n	80100e2 <tcp_receive+0x792>
 80100e0:	2300      	movs	r3, #0
 80100e2:	4423      	add	r3, r4
 80100e4:	b29a      	uxth	r2, r3
 80100e6:	4b3d      	ldr	r3, [pc, #244]	; (80101dc <tcp_receive+0x88c>)
 80100e8:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80100ea:	4b3c      	ldr	r3, [pc, #240]	; (80101dc <tcp_receive+0x88c>)
 80100ec:	881b      	ldrh	r3, [r3, #0]
 80100ee:	461a      	mov	r2, r3
 80100f0:	4b38      	ldr	r3, [pc, #224]	; (80101d4 <tcp_receive+0x884>)
 80100f2:	681b      	ldr	r3, [r3, #0]
 80100f4:	441a      	add	r2, r3
 80100f6:	687b      	ldr	r3, [r7, #4]
 80100f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80100fa:	6879      	ldr	r1, [r7, #4]
 80100fc:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80100fe:	440b      	add	r3, r1
 8010100:	429a      	cmp	r2, r3
 8010102:	d006      	beq.n	8010112 <tcp_receive+0x7c2>
 8010104:	4b36      	ldr	r3, [pc, #216]	; (80101e0 <tcp_receive+0x890>)
 8010106:	f240 52cb 	movw	r2, #1483	; 0x5cb
 801010a:	4936      	ldr	r1, [pc, #216]	; (80101e4 <tcp_receive+0x894>)
 801010c:	4836      	ldr	r0, [pc, #216]	; (80101e8 <tcp_receive+0x898>)
 801010e:	f007 fbaf 	bl	8017870 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8010112:	687b      	ldr	r3, [r7, #4]
 8010114:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010116:	2b00      	cmp	r3, #0
 8010118:	f000 80e7 	beq.w	80102ea <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801011c:	4b2e      	ldr	r3, [pc, #184]	; (80101d8 <tcp_receive+0x888>)
 801011e:	68db      	ldr	r3, [r3, #12]
 8010120:	899b      	ldrh	r3, [r3, #12]
 8010122:	b29b      	uxth	r3, r3
 8010124:	4618      	mov	r0, r3
 8010126:	f7fb f889 	bl	800b23c <lwip_htons>
 801012a:	4603      	mov	r3, r0
 801012c:	b2db      	uxtb	r3, r3
 801012e:	f003 0301 	and.w	r3, r3, #1
 8010132:	2b00      	cmp	r3, #0
 8010134:	d010      	beq.n	8010158 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8010136:	e00a      	b.n	801014e <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8010138:	687b      	ldr	r3, [r7, #4]
 801013a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801013c:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 801013e:	687b      	ldr	r3, [r7, #4]
 8010140:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010142:	681a      	ldr	r2, [r3, #0]
 8010144:	687b      	ldr	r3, [r7, #4]
 8010146:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8010148:	68f8      	ldr	r0, [r7, #12]
 801014a:	f7fd fd96 	bl	800dc7a <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 801014e:	687b      	ldr	r3, [r7, #4]
 8010150:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010152:	2b00      	cmp	r3, #0
 8010154:	d1f0      	bne.n	8010138 <tcp_receive+0x7e8>
 8010156:	e0c8      	b.n	80102ea <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8010158:	687b      	ldr	r3, [r7, #4]
 801015a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801015c:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 801015e:	e052      	b.n	8010206 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8010160:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010162:	68db      	ldr	r3, [r3, #12]
 8010164:	899b      	ldrh	r3, [r3, #12]
 8010166:	b29b      	uxth	r3, r3
 8010168:	4618      	mov	r0, r3
 801016a:	f7fb f867 	bl	800b23c <lwip_htons>
 801016e:	4603      	mov	r3, r0
 8010170:	b2db      	uxtb	r3, r3
 8010172:	f003 0301 	and.w	r3, r3, #1
 8010176:	2b00      	cmp	r3, #0
 8010178:	d03d      	beq.n	80101f6 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 801017a:	4b17      	ldr	r3, [pc, #92]	; (80101d8 <tcp_receive+0x888>)
 801017c:	68db      	ldr	r3, [r3, #12]
 801017e:	899b      	ldrh	r3, [r3, #12]
 8010180:	b29b      	uxth	r3, r3
 8010182:	4618      	mov	r0, r3
 8010184:	f7fb f85a 	bl	800b23c <lwip_htons>
 8010188:	4603      	mov	r3, r0
 801018a:	b2db      	uxtb	r3, r3
 801018c:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8010190:	2b00      	cmp	r3, #0
 8010192:	d130      	bne.n	80101f6 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8010194:	4b10      	ldr	r3, [pc, #64]	; (80101d8 <tcp_receive+0x888>)
 8010196:	68db      	ldr	r3, [r3, #12]
 8010198:	899b      	ldrh	r3, [r3, #12]
 801019a:	b29c      	uxth	r4, r3
 801019c:	2001      	movs	r0, #1
 801019e:	f7fb f84d 	bl	800b23c <lwip_htons>
 80101a2:	4603      	mov	r3, r0
 80101a4:	461a      	mov	r2, r3
 80101a6:	4b0c      	ldr	r3, [pc, #48]	; (80101d8 <tcp_receive+0x888>)
 80101a8:	68db      	ldr	r3, [r3, #12]
 80101aa:	4322      	orrs	r2, r4
 80101ac:	b292      	uxth	r2, r2
 80101ae:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 80101b0:	4b09      	ldr	r3, [pc, #36]	; (80101d8 <tcp_receive+0x888>)
 80101b2:	891c      	ldrh	r4, [r3, #8]
 80101b4:	4b08      	ldr	r3, [pc, #32]	; (80101d8 <tcp_receive+0x888>)
 80101b6:	68db      	ldr	r3, [r3, #12]
 80101b8:	899b      	ldrh	r3, [r3, #12]
 80101ba:	b29b      	uxth	r3, r3
 80101bc:	4618      	mov	r0, r3
 80101be:	f7fb f83d 	bl	800b23c <lwip_htons>
 80101c2:	4603      	mov	r3, r0
 80101c4:	b2db      	uxtb	r3, r3
 80101c6:	f003 0303 	and.w	r3, r3, #3
 80101ca:	2b00      	cmp	r3, #0
 80101cc:	d00e      	beq.n	80101ec <tcp_receive+0x89c>
 80101ce:	2301      	movs	r3, #1
 80101d0:	e00d      	b.n	80101ee <tcp_receive+0x89e>
 80101d2:	bf00      	nop
 80101d4:	20000478 	.word	0x20000478
 80101d8:	20000458 	.word	0x20000458
 80101dc:	20000482 	.word	0x20000482
 80101e0:	0801de74 	.word	0x0801de74
 80101e4:	0801e21c 	.word	0x0801e21c
 80101e8:	0801dec0 	.word	0x0801dec0
 80101ec:	2300      	movs	r3, #0
 80101ee:	4423      	add	r3, r4
 80101f0:	b29a      	uxth	r2, r3
 80101f2:	4b98      	ldr	r3, [pc, #608]	; (8010454 <tcp_receive+0xb04>)
 80101f4:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 80101f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80101f8:	613b      	str	r3, [r7, #16]
              next = next->next;
 80101fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80101fc:	681b      	ldr	r3, [r3, #0]
 80101fe:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8010200:	6938      	ldr	r0, [r7, #16]
 8010202:	f7fd fd3a 	bl	800dc7a <tcp_seg_free>
            while (next &&
 8010206:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010208:	2b00      	cmp	r3, #0
 801020a:	d00e      	beq.n	801022a <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 801020c:	4b91      	ldr	r3, [pc, #580]	; (8010454 <tcp_receive+0xb04>)
 801020e:	881b      	ldrh	r3, [r3, #0]
 8010210:	461a      	mov	r2, r3
 8010212:	4b91      	ldr	r3, [pc, #580]	; (8010458 <tcp_receive+0xb08>)
 8010214:	681b      	ldr	r3, [r3, #0]
 8010216:	441a      	add	r2, r3
 8010218:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801021a:	68db      	ldr	r3, [r3, #12]
 801021c:	685b      	ldr	r3, [r3, #4]
 801021e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010220:	8909      	ldrh	r1, [r1, #8]
 8010222:	440b      	add	r3, r1
 8010224:	1ad3      	subs	r3, r2, r3
            while (next &&
 8010226:	2b00      	cmp	r3, #0
 8010228:	da9a      	bge.n	8010160 <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 801022a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801022c:	2b00      	cmp	r3, #0
 801022e:	d059      	beq.n	80102e4 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8010230:	4b88      	ldr	r3, [pc, #544]	; (8010454 <tcp_receive+0xb04>)
 8010232:	881b      	ldrh	r3, [r3, #0]
 8010234:	461a      	mov	r2, r3
 8010236:	4b88      	ldr	r3, [pc, #544]	; (8010458 <tcp_receive+0xb08>)
 8010238:	681b      	ldr	r3, [r3, #0]
 801023a:	441a      	add	r2, r3
 801023c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801023e:	68db      	ldr	r3, [r3, #12]
 8010240:	685b      	ldr	r3, [r3, #4]
 8010242:	1ad3      	subs	r3, r2, r3
            if (next &&
 8010244:	2b00      	cmp	r3, #0
 8010246:	dd4d      	ble.n	80102e4 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8010248:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801024a:	68db      	ldr	r3, [r3, #12]
 801024c:	685b      	ldr	r3, [r3, #4]
 801024e:	b29a      	uxth	r2, r3
 8010250:	4b81      	ldr	r3, [pc, #516]	; (8010458 <tcp_receive+0xb08>)
 8010252:	681b      	ldr	r3, [r3, #0]
 8010254:	b29b      	uxth	r3, r3
 8010256:	1ad3      	subs	r3, r2, r3
 8010258:	b29a      	uxth	r2, r3
 801025a:	4b80      	ldr	r3, [pc, #512]	; (801045c <tcp_receive+0xb0c>)
 801025c:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801025e:	4b7f      	ldr	r3, [pc, #508]	; (801045c <tcp_receive+0xb0c>)
 8010260:	68db      	ldr	r3, [r3, #12]
 8010262:	899b      	ldrh	r3, [r3, #12]
 8010264:	b29b      	uxth	r3, r3
 8010266:	4618      	mov	r0, r3
 8010268:	f7fa ffe8 	bl	800b23c <lwip_htons>
 801026c:	4603      	mov	r3, r0
 801026e:	b2db      	uxtb	r3, r3
 8010270:	f003 0302 	and.w	r3, r3, #2
 8010274:	2b00      	cmp	r3, #0
 8010276:	d005      	beq.n	8010284 <tcp_receive+0x934>
                inseg.len -= 1;
 8010278:	4b78      	ldr	r3, [pc, #480]	; (801045c <tcp_receive+0xb0c>)
 801027a:	891b      	ldrh	r3, [r3, #8]
 801027c:	3b01      	subs	r3, #1
 801027e:	b29a      	uxth	r2, r3
 8010280:	4b76      	ldr	r3, [pc, #472]	; (801045c <tcp_receive+0xb0c>)
 8010282:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8010284:	4b75      	ldr	r3, [pc, #468]	; (801045c <tcp_receive+0xb0c>)
 8010286:	685b      	ldr	r3, [r3, #4]
 8010288:	4a74      	ldr	r2, [pc, #464]	; (801045c <tcp_receive+0xb0c>)
 801028a:	8912      	ldrh	r2, [r2, #8]
 801028c:	4611      	mov	r1, r2
 801028e:	4618      	mov	r0, r3
 8010290:	f7fc f8ea 	bl	800c468 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8010294:	4b71      	ldr	r3, [pc, #452]	; (801045c <tcp_receive+0xb0c>)
 8010296:	891c      	ldrh	r4, [r3, #8]
 8010298:	4b70      	ldr	r3, [pc, #448]	; (801045c <tcp_receive+0xb0c>)
 801029a:	68db      	ldr	r3, [r3, #12]
 801029c:	899b      	ldrh	r3, [r3, #12]
 801029e:	b29b      	uxth	r3, r3
 80102a0:	4618      	mov	r0, r3
 80102a2:	f7fa ffcb 	bl	800b23c <lwip_htons>
 80102a6:	4603      	mov	r3, r0
 80102a8:	b2db      	uxtb	r3, r3
 80102aa:	f003 0303 	and.w	r3, r3, #3
 80102ae:	2b00      	cmp	r3, #0
 80102b0:	d001      	beq.n	80102b6 <tcp_receive+0x966>
 80102b2:	2301      	movs	r3, #1
 80102b4:	e000      	b.n	80102b8 <tcp_receive+0x968>
 80102b6:	2300      	movs	r3, #0
 80102b8:	4423      	add	r3, r4
 80102ba:	b29a      	uxth	r2, r3
 80102bc:	4b65      	ldr	r3, [pc, #404]	; (8010454 <tcp_receive+0xb04>)
 80102be:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 80102c0:	4b64      	ldr	r3, [pc, #400]	; (8010454 <tcp_receive+0xb04>)
 80102c2:	881b      	ldrh	r3, [r3, #0]
 80102c4:	461a      	mov	r2, r3
 80102c6:	4b64      	ldr	r3, [pc, #400]	; (8010458 <tcp_receive+0xb08>)
 80102c8:	681b      	ldr	r3, [r3, #0]
 80102ca:	441a      	add	r2, r3
 80102cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80102ce:	68db      	ldr	r3, [r3, #12]
 80102d0:	685b      	ldr	r3, [r3, #4]
 80102d2:	429a      	cmp	r2, r3
 80102d4:	d006      	beq.n	80102e4 <tcp_receive+0x994>
 80102d6:	4b62      	ldr	r3, [pc, #392]	; (8010460 <tcp_receive+0xb10>)
 80102d8:	f240 52fc 	movw	r2, #1532	; 0x5fc
 80102dc:	4961      	ldr	r1, [pc, #388]	; (8010464 <tcp_receive+0xb14>)
 80102de:	4862      	ldr	r0, [pc, #392]	; (8010468 <tcp_receive+0xb18>)
 80102e0:	f007 fac6 	bl	8017870 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 80102e4:	687b      	ldr	r3, [r7, #4]
 80102e6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80102e8:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 80102ea:	4b5a      	ldr	r3, [pc, #360]	; (8010454 <tcp_receive+0xb04>)
 80102ec:	881b      	ldrh	r3, [r3, #0]
 80102ee:	461a      	mov	r2, r3
 80102f0:	4b59      	ldr	r3, [pc, #356]	; (8010458 <tcp_receive+0xb08>)
 80102f2:	681b      	ldr	r3, [r3, #0]
 80102f4:	441a      	add	r2, r3
 80102f6:	687b      	ldr	r3, [r7, #4]
 80102f8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 80102fa:	687b      	ldr	r3, [r7, #4]
 80102fc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80102fe:	4b55      	ldr	r3, [pc, #340]	; (8010454 <tcp_receive+0xb04>)
 8010300:	881b      	ldrh	r3, [r3, #0]
 8010302:	429a      	cmp	r2, r3
 8010304:	d206      	bcs.n	8010314 <tcp_receive+0x9c4>
 8010306:	4b56      	ldr	r3, [pc, #344]	; (8010460 <tcp_receive+0xb10>)
 8010308:	f240 6207 	movw	r2, #1543	; 0x607
 801030c:	4957      	ldr	r1, [pc, #348]	; (801046c <tcp_receive+0xb1c>)
 801030e:	4856      	ldr	r0, [pc, #344]	; (8010468 <tcp_receive+0xb18>)
 8010310:	f007 faae 	bl	8017870 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8010314:	687b      	ldr	r3, [r7, #4]
 8010316:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010318:	4b4e      	ldr	r3, [pc, #312]	; (8010454 <tcp_receive+0xb04>)
 801031a:	881b      	ldrh	r3, [r3, #0]
 801031c:	1ad3      	subs	r3, r2, r3
 801031e:	b29a      	uxth	r2, r3
 8010320:	687b      	ldr	r3, [r7, #4]
 8010322:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8010324:	6878      	ldr	r0, [r7, #4]
 8010326:	f7fc ffc9 	bl	800d2bc <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 801032a:	4b4c      	ldr	r3, [pc, #304]	; (801045c <tcp_receive+0xb0c>)
 801032c:	685b      	ldr	r3, [r3, #4]
 801032e:	891b      	ldrh	r3, [r3, #8]
 8010330:	2b00      	cmp	r3, #0
 8010332:	d006      	beq.n	8010342 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 8010334:	4b49      	ldr	r3, [pc, #292]	; (801045c <tcp_receive+0xb0c>)
 8010336:	685b      	ldr	r3, [r3, #4]
 8010338:	4a4d      	ldr	r2, [pc, #308]	; (8010470 <tcp_receive+0xb20>)
 801033a:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 801033c:	4b47      	ldr	r3, [pc, #284]	; (801045c <tcp_receive+0xb0c>)
 801033e:	2200      	movs	r2, #0
 8010340:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8010342:	4b46      	ldr	r3, [pc, #280]	; (801045c <tcp_receive+0xb0c>)
 8010344:	68db      	ldr	r3, [r3, #12]
 8010346:	899b      	ldrh	r3, [r3, #12]
 8010348:	b29b      	uxth	r3, r3
 801034a:	4618      	mov	r0, r3
 801034c:	f7fa ff76 	bl	800b23c <lwip_htons>
 8010350:	4603      	mov	r3, r0
 8010352:	b2db      	uxtb	r3, r3
 8010354:	f003 0301 	and.w	r3, r3, #1
 8010358:	2b00      	cmp	r3, #0
 801035a:	f000 80b8 	beq.w	80104ce <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 801035e:	4b45      	ldr	r3, [pc, #276]	; (8010474 <tcp_receive+0xb24>)
 8010360:	781b      	ldrb	r3, [r3, #0]
 8010362:	f043 0320 	orr.w	r3, r3, #32
 8010366:	b2da      	uxtb	r2, r3
 8010368:	4b42      	ldr	r3, [pc, #264]	; (8010474 <tcp_receive+0xb24>)
 801036a:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 801036c:	e0af      	b.n	80104ce <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 801036e:	687b      	ldr	r3, [r7, #4]
 8010370:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010372:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8010374:	687b      	ldr	r3, [r7, #4]
 8010376:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010378:	68db      	ldr	r3, [r3, #12]
 801037a:	685b      	ldr	r3, [r3, #4]
 801037c:	4a36      	ldr	r2, [pc, #216]	; (8010458 <tcp_receive+0xb08>)
 801037e:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8010380:	68bb      	ldr	r3, [r7, #8]
 8010382:	891b      	ldrh	r3, [r3, #8]
 8010384:	461c      	mov	r4, r3
 8010386:	68bb      	ldr	r3, [r7, #8]
 8010388:	68db      	ldr	r3, [r3, #12]
 801038a:	899b      	ldrh	r3, [r3, #12]
 801038c:	b29b      	uxth	r3, r3
 801038e:	4618      	mov	r0, r3
 8010390:	f7fa ff54 	bl	800b23c <lwip_htons>
 8010394:	4603      	mov	r3, r0
 8010396:	b2db      	uxtb	r3, r3
 8010398:	f003 0303 	and.w	r3, r3, #3
 801039c:	2b00      	cmp	r3, #0
 801039e:	d001      	beq.n	80103a4 <tcp_receive+0xa54>
 80103a0:	2301      	movs	r3, #1
 80103a2:	e000      	b.n	80103a6 <tcp_receive+0xa56>
 80103a4:	2300      	movs	r3, #0
 80103a6:	191a      	adds	r2, r3, r4
 80103a8:	687b      	ldr	r3, [r7, #4]
 80103aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80103ac:	441a      	add	r2, r3
 80103ae:	687b      	ldr	r3, [r7, #4]
 80103b0:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 80103b2:	687b      	ldr	r3, [r7, #4]
 80103b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80103b6:	461c      	mov	r4, r3
 80103b8:	68bb      	ldr	r3, [r7, #8]
 80103ba:	891b      	ldrh	r3, [r3, #8]
 80103bc:	461d      	mov	r5, r3
 80103be:	68bb      	ldr	r3, [r7, #8]
 80103c0:	68db      	ldr	r3, [r3, #12]
 80103c2:	899b      	ldrh	r3, [r3, #12]
 80103c4:	b29b      	uxth	r3, r3
 80103c6:	4618      	mov	r0, r3
 80103c8:	f7fa ff38 	bl	800b23c <lwip_htons>
 80103cc:	4603      	mov	r3, r0
 80103ce:	b2db      	uxtb	r3, r3
 80103d0:	f003 0303 	and.w	r3, r3, #3
 80103d4:	2b00      	cmp	r3, #0
 80103d6:	d001      	beq.n	80103dc <tcp_receive+0xa8c>
 80103d8:	2301      	movs	r3, #1
 80103da:	e000      	b.n	80103de <tcp_receive+0xa8e>
 80103dc:	2300      	movs	r3, #0
 80103de:	442b      	add	r3, r5
 80103e0:	429c      	cmp	r4, r3
 80103e2:	d206      	bcs.n	80103f2 <tcp_receive+0xaa2>
 80103e4:	4b1e      	ldr	r3, [pc, #120]	; (8010460 <tcp_receive+0xb10>)
 80103e6:	f240 622b 	movw	r2, #1579	; 0x62b
 80103ea:	4923      	ldr	r1, [pc, #140]	; (8010478 <tcp_receive+0xb28>)
 80103ec:	481e      	ldr	r0, [pc, #120]	; (8010468 <tcp_receive+0xb18>)
 80103ee:	f007 fa3f 	bl	8017870 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 80103f2:	68bb      	ldr	r3, [r7, #8]
 80103f4:	891b      	ldrh	r3, [r3, #8]
 80103f6:	461c      	mov	r4, r3
 80103f8:	68bb      	ldr	r3, [r7, #8]
 80103fa:	68db      	ldr	r3, [r3, #12]
 80103fc:	899b      	ldrh	r3, [r3, #12]
 80103fe:	b29b      	uxth	r3, r3
 8010400:	4618      	mov	r0, r3
 8010402:	f7fa ff1b 	bl	800b23c <lwip_htons>
 8010406:	4603      	mov	r3, r0
 8010408:	b2db      	uxtb	r3, r3
 801040a:	f003 0303 	and.w	r3, r3, #3
 801040e:	2b00      	cmp	r3, #0
 8010410:	d001      	beq.n	8010416 <tcp_receive+0xac6>
 8010412:	2301      	movs	r3, #1
 8010414:	e000      	b.n	8010418 <tcp_receive+0xac8>
 8010416:	2300      	movs	r3, #0
 8010418:	1919      	adds	r1, r3, r4
 801041a:	687b      	ldr	r3, [r7, #4]
 801041c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801041e:	b28b      	uxth	r3, r1
 8010420:	1ad3      	subs	r3, r2, r3
 8010422:	b29a      	uxth	r2, r3
 8010424:	687b      	ldr	r3, [r7, #4]
 8010426:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8010428:	6878      	ldr	r0, [r7, #4]
 801042a:	f7fc ff47 	bl	800d2bc <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 801042e:	68bb      	ldr	r3, [r7, #8]
 8010430:	685b      	ldr	r3, [r3, #4]
 8010432:	891b      	ldrh	r3, [r3, #8]
 8010434:	2b00      	cmp	r3, #0
 8010436:	d028      	beq.n	801048a <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8010438:	4b0d      	ldr	r3, [pc, #52]	; (8010470 <tcp_receive+0xb20>)
 801043a:	681b      	ldr	r3, [r3, #0]
 801043c:	2b00      	cmp	r3, #0
 801043e:	d01d      	beq.n	801047c <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 8010440:	4b0b      	ldr	r3, [pc, #44]	; (8010470 <tcp_receive+0xb20>)
 8010442:	681a      	ldr	r2, [r3, #0]
 8010444:	68bb      	ldr	r3, [r7, #8]
 8010446:	685b      	ldr	r3, [r3, #4]
 8010448:	4619      	mov	r1, r3
 801044a:	4610      	mov	r0, r2
 801044c:	f7fc fa54 	bl	800c8f8 <pbuf_cat>
 8010450:	e018      	b.n	8010484 <tcp_receive+0xb34>
 8010452:	bf00      	nop
 8010454:	20000482 	.word	0x20000482
 8010458:	20000478 	.word	0x20000478
 801045c:	20000458 	.word	0x20000458
 8010460:	0801de74 	.word	0x0801de74
 8010464:	0801e254 	.word	0x0801e254
 8010468:	0801dec0 	.word	0x0801dec0
 801046c:	0801e290 	.word	0x0801e290
 8010470:	20000488 	.word	0x20000488
 8010474:	20000485 	.word	0x20000485
 8010478:	0801e2b0 	.word	0x0801e2b0
            } else {
              recv_data = cseg->p;
 801047c:	68bb      	ldr	r3, [r7, #8]
 801047e:	685b      	ldr	r3, [r3, #4]
 8010480:	4a70      	ldr	r2, [pc, #448]	; (8010644 <tcp_receive+0xcf4>)
 8010482:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8010484:	68bb      	ldr	r3, [r7, #8]
 8010486:	2200      	movs	r2, #0
 8010488:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801048a:	68bb      	ldr	r3, [r7, #8]
 801048c:	68db      	ldr	r3, [r3, #12]
 801048e:	899b      	ldrh	r3, [r3, #12]
 8010490:	b29b      	uxth	r3, r3
 8010492:	4618      	mov	r0, r3
 8010494:	f7fa fed2 	bl	800b23c <lwip_htons>
 8010498:	4603      	mov	r3, r0
 801049a:	b2db      	uxtb	r3, r3
 801049c:	f003 0301 	and.w	r3, r3, #1
 80104a0:	2b00      	cmp	r3, #0
 80104a2:	d00d      	beq.n	80104c0 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 80104a4:	4b68      	ldr	r3, [pc, #416]	; (8010648 <tcp_receive+0xcf8>)
 80104a6:	781b      	ldrb	r3, [r3, #0]
 80104a8:	f043 0320 	orr.w	r3, r3, #32
 80104ac:	b2da      	uxtb	r2, r3
 80104ae:	4b66      	ldr	r3, [pc, #408]	; (8010648 <tcp_receive+0xcf8>)
 80104b0:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 80104b2:	687b      	ldr	r3, [r7, #4]
 80104b4:	7d1b      	ldrb	r3, [r3, #20]
 80104b6:	2b04      	cmp	r3, #4
 80104b8:	d102      	bne.n	80104c0 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 80104ba:	687b      	ldr	r3, [r7, #4]
 80104bc:	2207      	movs	r2, #7
 80104be:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 80104c0:	68bb      	ldr	r3, [r7, #8]
 80104c2:	681a      	ldr	r2, [r3, #0]
 80104c4:	687b      	ldr	r3, [r7, #4]
 80104c6:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 80104c8:	68b8      	ldr	r0, [r7, #8]
 80104ca:	f7fd fbd6 	bl	800dc7a <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 80104ce:	687b      	ldr	r3, [r7, #4]
 80104d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80104d2:	2b00      	cmp	r3, #0
 80104d4:	d008      	beq.n	80104e8 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 80104d6:	687b      	ldr	r3, [r7, #4]
 80104d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80104da:	68db      	ldr	r3, [r3, #12]
 80104dc:	685a      	ldr	r2, [r3, #4]
 80104de:	687b      	ldr	r3, [r7, #4]
 80104e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 80104e2:	429a      	cmp	r2, r3
 80104e4:	f43f af43 	beq.w	801036e <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 80104e8:	687b      	ldr	r3, [r7, #4]
 80104ea:	8b5b      	ldrh	r3, [r3, #26]
 80104ec:	f003 0301 	and.w	r3, r3, #1
 80104f0:	2b00      	cmp	r3, #0
 80104f2:	d00e      	beq.n	8010512 <tcp_receive+0xbc2>
 80104f4:	687b      	ldr	r3, [r7, #4]
 80104f6:	8b5b      	ldrh	r3, [r3, #26]
 80104f8:	f023 0301 	bic.w	r3, r3, #1
 80104fc:	b29a      	uxth	r2, r3
 80104fe:	687b      	ldr	r3, [r7, #4]
 8010500:	835a      	strh	r2, [r3, #26]
 8010502:	687b      	ldr	r3, [r7, #4]
 8010504:	8b5b      	ldrh	r3, [r3, #26]
 8010506:	f043 0302 	orr.w	r3, r3, #2
 801050a:	b29a      	uxth	r2, r3
 801050c:	687b      	ldr	r3, [r7, #4]
 801050e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8010510:	e188      	b.n	8010824 <tcp_receive+0xed4>
        tcp_ack(pcb);
 8010512:	687b      	ldr	r3, [r7, #4]
 8010514:	8b5b      	ldrh	r3, [r3, #26]
 8010516:	f043 0301 	orr.w	r3, r3, #1
 801051a:	b29a      	uxth	r2, r3
 801051c:	687b      	ldr	r3, [r7, #4]
 801051e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8010520:	e180      	b.n	8010824 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8010522:	687b      	ldr	r3, [r7, #4]
 8010524:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010526:	2b00      	cmp	r3, #0
 8010528:	d106      	bne.n	8010538 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 801052a:	4848      	ldr	r0, [pc, #288]	; (801064c <tcp_receive+0xcfc>)
 801052c:	f7fd fbbe 	bl	800dcac <tcp_seg_copy>
 8010530:	4602      	mov	r2, r0
 8010532:	687b      	ldr	r3, [r7, #4]
 8010534:	675a      	str	r2, [r3, #116]	; 0x74
 8010536:	e16d      	b.n	8010814 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8010538:	2300      	movs	r3, #0
 801053a:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801053c:	687b      	ldr	r3, [r7, #4]
 801053e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010540:	63bb      	str	r3, [r7, #56]	; 0x38
 8010542:	e157      	b.n	80107f4 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 8010544:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010546:	68db      	ldr	r3, [r3, #12]
 8010548:	685a      	ldr	r2, [r3, #4]
 801054a:	4b41      	ldr	r3, [pc, #260]	; (8010650 <tcp_receive+0xd00>)
 801054c:	681b      	ldr	r3, [r3, #0]
 801054e:	429a      	cmp	r2, r3
 8010550:	d11d      	bne.n	801058e <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8010552:	4b3e      	ldr	r3, [pc, #248]	; (801064c <tcp_receive+0xcfc>)
 8010554:	891a      	ldrh	r2, [r3, #8]
 8010556:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010558:	891b      	ldrh	r3, [r3, #8]
 801055a:	429a      	cmp	r2, r3
 801055c:	f240 814f 	bls.w	80107fe <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8010560:	483a      	ldr	r0, [pc, #232]	; (801064c <tcp_receive+0xcfc>)
 8010562:	f7fd fba3 	bl	800dcac <tcp_seg_copy>
 8010566:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8010568:	697b      	ldr	r3, [r7, #20]
 801056a:	2b00      	cmp	r3, #0
 801056c:	f000 8149 	beq.w	8010802 <tcp_receive+0xeb2>
                  if (prev != NULL) {
 8010570:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010572:	2b00      	cmp	r3, #0
 8010574:	d003      	beq.n	801057e <tcp_receive+0xc2e>
                    prev->next = cseg;
 8010576:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010578:	697a      	ldr	r2, [r7, #20]
 801057a:	601a      	str	r2, [r3, #0]
 801057c:	e002      	b.n	8010584 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 801057e:	687b      	ldr	r3, [r7, #4]
 8010580:	697a      	ldr	r2, [r7, #20]
 8010582:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8010584:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010586:	6978      	ldr	r0, [r7, #20]
 8010588:	f7ff f8de 	bl	800f748 <tcp_oos_insert_segment>
                }
                break;
 801058c:	e139      	b.n	8010802 <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 801058e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010590:	2b00      	cmp	r3, #0
 8010592:	d117      	bne.n	80105c4 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8010594:	4b2e      	ldr	r3, [pc, #184]	; (8010650 <tcp_receive+0xd00>)
 8010596:	681a      	ldr	r2, [r3, #0]
 8010598:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801059a:	68db      	ldr	r3, [r3, #12]
 801059c:	685b      	ldr	r3, [r3, #4]
 801059e:	1ad3      	subs	r3, r2, r3
 80105a0:	2b00      	cmp	r3, #0
 80105a2:	da57      	bge.n	8010654 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80105a4:	4829      	ldr	r0, [pc, #164]	; (801064c <tcp_receive+0xcfc>)
 80105a6:	f7fd fb81 	bl	800dcac <tcp_seg_copy>
 80105aa:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 80105ac:	69bb      	ldr	r3, [r7, #24]
 80105ae:	2b00      	cmp	r3, #0
 80105b0:	f000 8129 	beq.w	8010806 <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 80105b4:	687b      	ldr	r3, [r7, #4]
 80105b6:	69ba      	ldr	r2, [r7, #24]
 80105b8:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 80105ba:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80105bc:	69b8      	ldr	r0, [r7, #24]
 80105be:	f7ff f8c3 	bl	800f748 <tcp_oos_insert_segment>
                  }
                  break;
 80105c2:	e120      	b.n	8010806 <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 80105c4:	4b22      	ldr	r3, [pc, #136]	; (8010650 <tcp_receive+0xd00>)
 80105c6:	681a      	ldr	r2, [r3, #0]
 80105c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80105ca:	68db      	ldr	r3, [r3, #12]
 80105cc:	685b      	ldr	r3, [r3, #4]
 80105ce:	1ad3      	subs	r3, r2, r3
 80105d0:	3b01      	subs	r3, #1
 80105d2:	2b00      	cmp	r3, #0
 80105d4:	db3e      	blt.n	8010654 <tcp_receive+0xd04>
 80105d6:	4b1e      	ldr	r3, [pc, #120]	; (8010650 <tcp_receive+0xd00>)
 80105d8:	681a      	ldr	r2, [r3, #0]
 80105da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105dc:	68db      	ldr	r3, [r3, #12]
 80105de:	685b      	ldr	r3, [r3, #4]
 80105e0:	1ad3      	subs	r3, r2, r3
 80105e2:	3301      	adds	r3, #1
 80105e4:	2b00      	cmp	r3, #0
 80105e6:	dc35      	bgt.n	8010654 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80105e8:	4818      	ldr	r0, [pc, #96]	; (801064c <tcp_receive+0xcfc>)
 80105ea:	f7fd fb5f 	bl	800dcac <tcp_seg_copy>
 80105ee:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 80105f0:	69fb      	ldr	r3, [r7, #28]
 80105f2:	2b00      	cmp	r3, #0
 80105f4:	f000 8109 	beq.w	801080a <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 80105f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80105fa:	68db      	ldr	r3, [r3, #12]
 80105fc:	685b      	ldr	r3, [r3, #4]
 80105fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010600:	8912      	ldrh	r2, [r2, #8]
 8010602:	441a      	add	r2, r3
 8010604:	4b12      	ldr	r3, [pc, #72]	; (8010650 <tcp_receive+0xd00>)
 8010606:	681b      	ldr	r3, [r3, #0]
 8010608:	1ad3      	subs	r3, r2, r3
 801060a:	2b00      	cmp	r3, #0
 801060c:	dd12      	ble.n	8010634 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 801060e:	4b10      	ldr	r3, [pc, #64]	; (8010650 <tcp_receive+0xd00>)
 8010610:	681b      	ldr	r3, [r3, #0]
 8010612:	b29a      	uxth	r2, r3
 8010614:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010616:	68db      	ldr	r3, [r3, #12]
 8010618:	685b      	ldr	r3, [r3, #4]
 801061a:	b29b      	uxth	r3, r3
 801061c:	1ad3      	subs	r3, r2, r3
 801061e:	b29a      	uxth	r2, r3
 8010620:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010622:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8010624:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010626:	685a      	ldr	r2, [r3, #4]
 8010628:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801062a:	891b      	ldrh	r3, [r3, #8]
 801062c:	4619      	mov	r1, r3
 801062e:	4610      	mov	r0, r2
 8010630:	f7fb ff1a 	bl	800c468 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8010634:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010636:	69fa      	ldr	r2, [r7, #28]
 8010638:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 801063a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801063c:	69f8      	ldr	r0, [r7, #28]
 801063e:	f7ff f883 	bl	800f748 <tcp_oos_insert_segment>
                  }
                  break;
 8010642:	e0e2      	b.n	801080a <tcp_receive+0xeba>
 8010644:	20000488 	.word	0x20000488
 8010648:	20000485 	.word	0x20000485
 801064c:	20000458 	.word	0x20000458
 8010650:	20000478 	.word	0x20000478
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8010654:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010656:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8010658:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801065a:	681b      	ldr	r3, [r3, #0]
 801065c:	2b00      	cmp	r3, #0
 801065e:	f040 80c6 	bne.w	80107ee <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8010662:	4b80      	ldr	r3, [pc, #512]	; (8010864 <tcp_receive+0xf14>)
 8010664:	681a      	ldr	r2, [r3, #0]
 8010666:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010668:	68db      	ldr	r3, [r3, #12]
 801066a:	685b      	ldr	r3, [r3, #4]
 801066c:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 801066e:	2b00      	cmp	r3, #0
 8010670:	f340 80bd 	ble.w	80107ee <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8010674:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010676:	68db      	ldr	r3, [r3, #12]
 8010678:	899b      	ldrh	r3, [r3, #12]
 801067a:	b29b      	uxth	r3, r3
 801067c:	4618      	mov	r0, r3
 801067e:	f7fa fddd 	bl	800b23c <lwip_htons>
 8010682:	4603      	mov	r3, r0
 8010684:	b2db      	uxtb	r3, r3
 8010686:	f003 0301 	and.w	r3, r3, #1
 801068a:	2b00      	cmp	r3, #0
 801068c:	f040 80bf 	bne.w	801080e <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8010690:	4875      	ldr	r0, [pc, #468]	; (8010868 <tcp_receive+0xf18>)
 8010692:	f7fd fb0b 	bl	800dcac <tcp_seg_copy>
 8010696:	4602      	mov	r2, r0
 8010698:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801069a:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 801069c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801069e:	681b      	ldr	r3, [r3, #0]
 80106a0:	2b00      	cmp	r3, #0
 80106a2:	f000 80b6 	beq.w	8010812 <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 80106a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106a8:	68db      	ldr	r3, [r3, #12]
 80106aa:	685b      	ldr	r3, [r3, #4]
 80106ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80106ae:	8912      	ldrh	r2, [r2, #8]
 80106b0:	441a      	add	r2, r3
 80106b2:	4b6c      	ldr	r3, [pc, #432]	; (8010864 <tcp_receive+0xf14>)
 80106b4:	681b      	ldr	r3, [r3, #0]
 80106b6:	1ad3      	subs	r3, r2, r3
 80106b8:	2b00      	cmp	r3, #0
 80106ba:	dd12      	ble.n	80106e2 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 80106bc:	4b69      	ldr	r3, [pc, #420]	; (8010864 <tcp_receive+0xf14>)
 80106be:	681b      	ldr	r3, [r3, #0]
 80106c0:	b29a      	uxth	r2, r3
 80106c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106c4:	68db      	ldr	r3, [r3, #12]
 80106c6:	685b      	ldr	r3, [r3, #4]
 80106c8:	b29b      	uxth	r3, r3
 80106ca:	1ad3      	subs	r3, r2, r3
 80106cc:	b29a      	uxth	r2, r3
 80106ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106d0:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 80106d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106d4:	685a      	ldr	r2, [r3, #4]
 80106d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106d8:	891b      	ldrh	r3, [r3, #8]
 80106da:	4619      	mov	r1, r3
 80106dc:	4610      	mov	r0, r2
 80106de:	f7fb fec3 	bl	800c468 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 80106e2:	4b62      	ldr	r3, [pc, #392]	; (801086c <tcp_receive+0xf1c>)
 80106e4:	881b      	ldrh	r3, [r3, #0]
 80106e6:	461a      	mov	r2, r3
 80106e8:	4b5e      	ldr	r3, [pc, #376]	; (8010864 <tcp_receive+0xf14>)
 80106ea:	681b      	ldr	r3, [r3, #0]
 80106ec:	441a      	add	r2, r3
 80106ee:	687b      	ldr	r3, [r7, #4]
 80106f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80106f2:	6879      	ldr	r1, [r7, #4]
 80106f4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80106f6:	440b      	add	r3, r1
 80106f8:	1ad3      	subs	r3, r2, r3
 80106fa:	2b00      	cmp	r3, #0
 80106fc:	f340 8089 	ble.w	8010812 <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8010700:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010702:	681b      	ldr	r3, [r3, #0]
 8010704:	68db      	ldr	r3, [r3, #12]
 8010706:	899b      	ldrh	r3, [r3, #12]
 8010708:	b29b      	uxth	r3, r3
 801070a:	4618      	mov	r0, r3
 801070c:	f7fa fd96 	bl	800b23c <lwip_htons>
 8010710:	4603      	mov	r3, r0
 8010712:	b2db      	uxtb	r3, r3
 8010714:	f003 0301 	and.w	r3, r3, #1
 8010718:	2b00      	cmp	r3, #0
 801071a:	d022      	beq.n	8010762 <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 801071c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801071e:	681b      	ldr	r3, [r3, #0]
 8010720:	68db      	ldr	r3, [r3, #12]
 8010722:	899b      	ldrh	r3, [r3, #12]
 8010724:	b29b      	uxth	r3, r3
 8010726:	b21b      	sxth	r3, r3
 8010728:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801072c:	b21c      	sxth	r4, r3
 801072e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010730:	681b      	ldr	r3, [r3, #0]
 8010732:	68db      	ldr	r3, [r3, #12]
 8010734:	899b      	ldrh	r3, [r3, #12]
 8010736:	b29b      	uxth	r3, r3
 8010738:	4618      	mov	r0, r3
 801073a:	f7fa fd7f 	bl	800b23c <lwip_htons>
 801073e:	4603      	mov	r3, r0
 8010740:	b2db      	uxtb	r3, r3
 8010742:	b29b      	uxth	r3, r3
 8010744:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8010748:	b29b      	uxth	r3, r3
 801074a:	4618      	mov	r0, r3
 801074c:	f7fa fd76 	bl	800b23c <lwip_htons>
 8010750:	4603      	mov	r3, r0
 8010752:	b21b      	sxth	r3, r3
 8010754:	4323      	orrs	r3, r4
 8010756:	b21a      	sxth	r2, r3
 8010758:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801075a:	681b      	ldr	r3, [r3, #0]
 801075c:	68db      	ldr	r3, [r3, #12]
 801075e:	b292      	uxth	r2, r2
 8010760:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8010762:	687b      	ldr	r3, [r7, #4]
 8010764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010766:	b29a      	uxth	r2, r3
 8010768:	687b      	ldr	r3, [r7, #4]
 801076a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801076c:	4413      	add	r3, r2
 801076e:	b299      	uxth	r1, r3
 8010770:	4b3c      	ldr	r3, [pc, #240]	; (8010864 <tcp_receive+0xf14>)
 8010772:	681b      	ldr	r3, [r3, #0]
 8010774:	b29a      	uxth	r2, r3
 8010776:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010778:	681b      	ldr	r3, [r3, #0]
 801077a:	1a8a      	subs	r2, r1, r2
 801077c:	b292      	uxth	r2, r2
 801077e:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8010780:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010782:	681b      	ldr	r3, [r3, #0]
 8010784:	685a      	ldr	r2, [r3, #4]
 8010786:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010788:	681b      	ldr	r3, [r3, #0]
 801078a:	891b      	ldrh	r3, [r3, #8]
 801078c:	4619      	mov	r1, r3
 801078e:	4610      	mov	r0, r2
 8010790:	f7fb fe6a 	bl	800c468 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8010794:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010796:	681b      	ldr	r3, [r3, #0]
 8010798:	891c      	ldrh	r4, [r3, #8]
 801079a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801079c:	681b      	ldr	r3, [r3, #0]
 801079e:	68db      	ldr	r3, [r3, #12]
 80107a0:	899b      	ldrh	r3, [r3, #12]
 80107a2:	b29b      	uxth	r3, r3
 80107a4:	4618      	mov	r0, r3
 80107a6:	f7fa fd49 	bl	800b23c <lwip_htons>
 80107aa:	4603      	mov	r3, r0
 80107ac:	b2db      	uxtb	r3, r3
 80107ae:	f003 0303 	and.w	r3, r3, #3
 80107b2:	2b00      	cmp	r3, #0
 80107b4:	d001      	beq.n	80107ba <tcp_receive+0xe6a>
 80107b6:	2301      	movs	r3, #1
 80107b8:	e000      	b.n	80107bc <tcp_receive+0xe6c>
 80107ba:	2300      	movs	r3, #0
 80107bc:	4423      	add	r3, r4
 80107be:	b29a      	uxth	r2, r3
 80107c0:	4b2a      	ldr	r3, [pc, #168]	; (801086c <tcp_receive+0xf1c>)
 80107c2:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80107c4:	4b29      	ldr	r3, [pc, #164]	; (801086c <tcp_receive+0xf1c>)
 80107c6:	881b      	ldrh	r3, [r3, #0]
 80107c8:	461a      	mov	r2, r3
 80107ca:	4b26      	ldr	r3, [pc, #152]	; (8010864 <tcp_receive+0xf14>)
 80107cc:	681b      	ldr	r3, [r3, #0]
 80107ce:	441a      	add	r2, r3
 80107d0:	687b      	ldr	r3, [r7, #4]
 80107d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80107d4:	6879      	ldr	r1, [r7, #4]
 80107d6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80107d8:	440b      	add	r3, r1
 80107da:	429a      	cmp	r2, r3
 80107dc:	d019      	beq.n	8010812 <tcp_receive+0xec2>
 80107de:	4b24      	ldr	r3, [pc, #144]	; (8010870 <tcp_receive+0xf20>)
 80107e0:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 80107e4:	4923      	ldr	r1, [pc, #140]	; (8010874 <tcp_receive+0xf24>)
 80107e6:	4824      	ldr	r0, [pc, #144]	; (8010878 <tcp_receive+0xf28>)
 80107e8:	f007 f842 	bl	8017870 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 80107ec:	e011      	b.n	8010812 <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80107ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80107f0:	681b      	ldr	r3, [r3, #0]
 80107f2:	63bb      	str	r3, [r7, #56]	; 0x38
 80107f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80107f6:	2b00      	cmp	r3, #0
 80107f8:	f47f aea4 	bne.w	8010544 <tcp_receive+0xbf4>
 80107fc:	e00a      	b.n	8010814 <tcp_receive+0xec4>
                break;
 80107fe:	bf00      	nop
 8010800:	e008      	b.n	8010814 <tcp_receive+0xec4>
                break;
 8010802:	bf00      	nop
 8010804:	e006      	b.n	8010814 <tcp_receive+0xec4>
                  break;
 8010806:	bf00      	nop
 8010808:	e004      	b.n	8010814 <tcp_receive+0xec4>
                  break;
 801080a:	bf00      	nop
 801080c:	e002      	b.n	8010814 <tcp_receive+0xec4>
                  break;
 801080e:	bf00      	nop
 8010810:	e000      	b.n	8010814 <tcp_receive+0xec4>
                break;
 8010812:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8010814:	6878      	ldr	r0, [r7, #4]
 8010816:	f001 fa31 	bl	8011c7c <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 801081a:	e003      	b.n	8010824 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 801081c:	6878      	ldr	r0, [r7, #4]
 801081e:	f001 fa2d 	bl	8011c7c <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8010822:	e01a      	b.n	801085a <tcp_receive+0xf0a>
 8010824:	e019      	b.n	801085a <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8010826:	4b0f      	ldr	r3, [pc, #60]	; (8010864 <tcp_receive+0xf14>)
 8010828:	681a      	ldr	r2, [r3, #0]
 801082a:	687b      	ldr	r3, [r7, #4]
 801082c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801082e:	1ad3      	subs	r3, r2, r3
 8010830:	2b00      	cmp	r3, #0
 8010832:	db0a      	blt.n	801084a <tcp_receive+0xefa>
 8010834:	4b0b      	ldr	r3, [pc, #44]	; (8010864 <tcp_receive+0xf14>)
 8010836:	681a      	ldr	r2, [r3, #0]
 8010838:	687b      	ldr	r3, [r7, #4]
 801083a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801083c:	6879      	ldr	r1, [r7, #4]
 801083e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010840:	440b      	add	r3, r1
 8010842:	1ad3      	subs	r3, r2, r3
 8010844:	3301      	adds	r3, #1
 8010846:	2b00      	cmp	r3, #0
 8010848:	dd07      	ble.n	801085a <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 801084a:	687b      	ldr	r3, [r7, #4]
 801084c:	8b5b      	ldrh	r3, [r3, #26]
 801084e:	f043 0302 	orr.w	r3, r3, #2
 8010852:	b29a      	uxth	r2, r3
 8010854:	687b      	ldr	r3, [r7, #4]
 8010856:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8010858:	e7ff      	b.n	801085a <tcp_receive+0xf0a>
 801085a:	bf00      	nop
 801085c:	3750      	adds	r7, #80	; 0x50
 801085e:	46bd      	mov	sp, r7
 8010860:	bdb0      	pop	{r4, r5, r7, pc}
 8010862:	bf00      	nop
 8010864:	20000478 	.word	0x20000478
 8010868:	20000458 	.word	0x20000458
 801086c:	20000482 	.word	0x20000482
 8010870:	0801de74 	.word	0x0801de74
 8010874:	0801e21c 	.word	0x0801e21c
 8010878:	0801dec0 	.word	0x0801dec0

0801087c <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 801087c:	b480      	push	{r7}
 801087e:	b083      	sub	sp, #12
 8010880:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8010882:	4b15      	ldr	r3, [pc, #84]	; (80108d8 <tcp_get_next_optbyte+0x5c>)
 8010884:	881b      	ldrh	r3, [r3, #0]
 8010886:	1c5a      	adds	r2, r3, #1
 8010888:	b291      	uxth	r1, r2
 801088a:	4a13      	ldr	r2, [pc, #76]	; (80108d8 <tcp_get_next_optbyte+0x5c>)
 801088c:	8011      	strh	r1, [r2, #0]
 801088e:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8010890:	4b12      	ldr	r3, [pc, #72]	; (80108dc <tcp_get_next_optbyte+0x60>)
 8010892:	681b      	ldr	r3, [r3, #0]
 8010894:	2b00      	cmp	r3, #0
 8010896:	d004      	beq.n	80108a2 <tcp_get_next_optbyte+0x26>
 8010898:	4b11      	ldr	r3, [pc, #68]	; (80108e0 <tcp_get_next_optbyte+0x64>)
 801089a:	881b      	ldrh	r3, [r3, #0]
 801089c:	88fa      	ldrh	r2, [r7, #6]
 801089e:	429a      	cmp	r2, r3
 80108a0:	d208      	bcs.n	80108b4 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 80108a2:	4b10      	ldr	r3, [pc, #64]	; (80108e4 <tcp_get_next_optbyte+0x68>)
 80108a4:	681b      	ldr	r3, [r3, #0]
 80108a6:	3314      	adds	r3, #20
 80108a8:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 80108aa:	88fb      	ldrh	r3, [r7, #6]
 80108ac:	683a      	ldr	r2, [r7, #0]
 80108ae:	4413      	add	r3, r2
 80108b0:	781b      	ldrb	r3, [r3, #0]
 80108b2:	e00b      	b.n	80108cc <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 80108b4:	88fb      	ldrh	r3, [r7, #6]
 80108b6:	b2da      	uxtb	r2, r3
 80108b8:	4b09      	ldr	r3, [pc, #36]	; (80108e0 <tcp_get_next_optbyte+0x64>)
 80108ba:	881b      	ldrh	r3, [r3, #0]
 80108bc:	b2db      	uxtb	r3, r3
 80108be:	1ad3      	subs	r3, r2, r3
 80108c0:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 80108c2:	4b06      	ldr	r3, [pc, #24]	; (80108dc <tcp_get_next_optbyte+0x60>)
 80108c4:	681a      	ldr	r2, [r3, #0]
 80108c6:	797b      	ldrb	r3, [r7, #5]
 80108c8:	4413      	add	r3, r2
 80108ca:	781b      	ldrb	r3, [r3, #0]
  }
}
 80108cc:	4618      	mov	r0, r3
 80108ce:	370c      	adds	r7, #12
 80108d0:	46bd      	mov	sp, r7
 80108d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108d6:	4770      	bx	lr
 80108d8:	20000474 	.word	0x20000474
 80108dc:	20000470 	.word	0x20000470
 80108e0:	2000046e 	.word	0x2000046e
 80108e4:	20000468 	.word	0x20000468

080108e8 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 80108e8:	b580      	push	{r7, lr}
 80108ea:	b084      	sub	sp, #16
 80108ec:	af00      	add	r7, sp, #0
 80108ee:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 80108f0:	687b      	ldr	r3, [r7, #4]
 80108f2:	2b00      	cmp	r3, #0
 80108f4:	d106      	bne.n	8010904 <tcp_parseopt+0x1c>
 80108f6:	4b32      	ldr	r3, [pc, #200]	; (80109c0 <tcp_parseopt+0xd8>)
 80108f8:	f240 727d 	movw	r2, #1917	; 0x77d
 80108fc:	4931      	ldr	r1, [pc, #196]	; (80109c4 <tcp_parseopt+0xdc>)
 80108fe:	4832      	ldr	r0, [pc, #200]	; (80109c8 <tcp_parseopt+0xe0>)
 8010900:	f006 ffb6 	bl	8017870 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8010904:	4b31      	ldr	r3, [pc, #196]	; (80109cc <tcp_parseopt+0xe4>)
 8010906:	881b      	ldrh	r3, [r3, #0]
 8010908:	2b00      	cmp	r3, #0
 801090a:	d055      	beq.n	80109b8 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801090c:	4b30      	ldr	r3, [pc, #192]	; (80109d0 <tcp_parseopt+0xe8>)
 801090e:	2200      	movs	r2, #0
 8010910:	801a      	strh	r2, [r3, #0]
 8010912:	e045      	b.n	80109a0 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 8010914:	f7ff ffb2 	bl	801087c <tcp_get_next_optbyte>
 8010918:	4603      	mov	r3, r0
 801091a:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 801091c:	7bfb      	ldrb	r3, [r7, #15]
 801091e:	2b02      	cmp	r3, #2
 8010920:	d006      	beq.n	8010930 <tcp_parseopt+0x48>
 8010922:	2b02      	cmp	r3, #2
 8010924:	dc2b      	bgt.n	801097e <tcp_parseopt+0x96>
 8010926:	2b00      	cmp	r3, #0
 8010928:	d041      	beq.n	80109ae <tcp_parseopt+0xc6>
 801092a:	2b01      	cmp	r3, #1
 801092c:	d127      	bne.n	801097e <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 801092e:	e037      	b.n	80109a0 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8010930:	f7ff ffa4 	bl	801087c <tcp_get_next_optbyte>
 8010934:	4603      	mov	r3, r0
 8010936:	2b04      	cmp	r3, #4
 8010938:	d13b      	bne.n	80109b2 <tcp_parseopt+0xca>
 801093a:	4b25      	ldr	r3, [pc, #148]	; (80109d0 <tcp_parseopt+0xe8>)
 801093c:	881b      	ldrh	r3, [r3, #0]
 801093e:	3301      	adds	r3, #1
 8010940:	4a22      	ldr	r2, [pc, #136]	; (80109cc <tcp_parseopt+0xe4>)
 8010942:	8812      	ldrh	r2, [r2, #0]
 8010944:	4293      	cmp	r3, r2
 8010946:	da34      	bge.n	80109b2 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8010948:	f7ff ff98 	bl	801087c <tcp_get_next_optbyte>
 801094c:	4603      	mov	r3, r0
 801094e:	b29b      	uxth	r3, r3
 8010950:	021b      	lsls	r3, r3, #8
 8010952:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8010954:	f7ff ff92 	bl	801087c <tcp_get_next_optbyte>
 8010958:	4603      	mov	r3, r0
 801095a:	b29a      	uxth	r2, r3
 801095c:	89bb      	ldrh	r3, [r7, #12]
 801095e:	4313      	orrs	r3, r2
 8010960:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8010962:	89bb      	ldrh	r3, [r7, #12]
 8010964:	f5b3 7fe6 	cmp.w	r3, #460	; 0x1cc
 8010968:	d804      	bhi.n	8010974 <tcp_parseopt+0x8c>
 801096a:	89bb      	ldrh	r3, [r7, #12]
 801096c:	2b00      	cmp	r3, #0
 801096e:	d001      	beq.n	8010974 <tcp_parseopt+0x8c>
 8010970:	89ba      	ldrh	r2, [r7, #12]
 8010972:	e001      	b.n	8010978 <tcp_parseopt+0x90>
 8010974:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8010978:	687b      	ldr	r3, [r7, #4]
 801097a:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 801097c:	e010      	b.n	80109a0 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 801097e:	f7ff ff7d 	bl	801087c <tcp_get_next_optbyte>
 8010982:	4603      	mov	r3, r0
 8010984:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8010986:	7afb      	ldrb	r3, [r7, #11]
 8010988:	2b01      	cmp	r3, #1
 801098a:	d914      	bls.n	80109b6 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 801098c:	7afb      	ldrb	r3, [r7, #11]
 801098e:	b29a      	uxth	r2, r3
 8010990:	4b0f      	ldr	r3, [pc, #60]	; (80109d0 <tcp_parseopt+0xe8>)
 8010992:	881b      	ldrh	r3, [r3, #0]
 8010994:	4413      	add	r3, r2
 8010996:	b29b      	uxth	r3, r3
 8010998:	3b02      	subs	r3, #2
 801099a:	b29a      	uxth	r2, r3
 801099c:	4b0c      	ldr	r3, [pc, #48]	; (80109d0 <tcp_parseopt+0xe8>)
 801099e:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80109a0:	4b0b      	ldr	r3, [pc, #44]	; (80109d0 <tcp_parseopt+0xe8>)
 80109a2:	881a      	ldrh	r2, [r3, #0]
 80109a4:	4b09      	ldr	r3, [pc, #36]	; (80109cc <tcp_parseopt+0xe4>)
 80109a6:	881b      	ldrh	r3, [r3, #0]
 80109a8:	429a      	cmp	r2, r3
 80109aa:	d3b3      	bcc.n	8010914 <tcp_parseopt+0x2c>
 80109ac:	e004      	b.n	80109b8 <tcp_parseopt+0xd0>
          return;
 80109ae:	bf00      	nop
 80109b0:	e002      	b.n	80109b8 <tcp_parseopt+0xd0>
            return;
 80109b2:	bf00      	nop
 80109b4:	e000      	b.n	80109b8 <tcp_parseopt+0xd0>
            return;
 80109b6:	bf00      	nop
      }
    }
  }
}
 80109b8:	3710      	adds	r7, #16
 80109ba:	46bd      	mov	sp, r7
 80109bc:	bd80      	pop	{r7, pc}
 80109be:	bf00      	nop
 80109c0:	0801de74 	.word	0x0801de74
 80109c4:	0801e2d8 	.word	0x0801e2d8
 80109c8:	0801dec0 	.word	0x0801dec0
 80109cc:	2000046c 	.word	0x2000046c
 80109d0:	20000474 	.word	0x20000474

080109d4 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 80109d4:	b480      	push	{r7}
 80109d6:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 80109d8:	4b05      	ldr	r3, [pc, #20]	; (80109f0 <tcp_trigger_input_pcb_close+0x1c>)
 80109da:	781b      	ldrb	r3, [r3, #0]
 80109dc:	f043 0310 	orr.w	r3, r3, #16
 80109e0:	b2da      	uxtb	r2, r3
 80109e2:	4b03      	ldr	r3, [pc, #12]	; (80109f0 <tcp_trigger_input_pcb_close+0x1c>)
 80109e4:	701a      	strb	r2, [r3, #0]
}
 80109e6:	bf00      	nop
 80109e8:	46bd      	mov	sp, r7
 80109ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109ee:	4770      	bx	lr
 80109f0:	20000485 	.word	0x20000485

080109f4 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 80109f4:	b580      	push	{r7, lr}
 80109f6:	b084      	sub	sp, #16
 80109f8:	af00      	add	r7, sp, #0
 80109fa:	60f8      	str	r0, [r7, #12]
 80109fc:	60b9      	str	r1, [r7, #8]
 80109fe:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8010a00:	68fb      	ldr	r3, [r7, #12]
 8010a02:	2b00      	cmp	r3, #0
 8010a04:	d00a      	beq.n	8010a1c <tcp_route+0x28>
 8010a06:	68fb      	ldr	r3, [r7, #12]
 8010a08:	7a1b      	ldrb	r3, [r3, #8]
 8010a0a:	2b00      	cmp	r3, #0
 8010a0c:	d006      	beq.n	8010a1c <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8010a0e:	68fb      	ldr	r3, [r7, #12]
 8010a10:	7a1b      	ldrb	r3, [r3, #8]
 8010a12:	4618      	mov	r0, r3
 8010a14:	f7fb fb6e 	bl	800c0f4 <netif_get_by_index>
 8010a18:	4603      	mov	r3, r0
 8010a1a:	e003      	b.n	8010a24 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8010a1c:	6878      	ldr	r0, [r7, #4]
 8010a1e:	f004 ff95 	bl	801594c <ip4_route>
 8010a22:	4603      	mov	r3, r0
  }
}
 8010a24:	4618      	mov	r0, r3
 8010a26:	3710      	adds	r7, #16
 8010a28:	46bd      	mov	sp, r7
 8010a2a:	bd80      	pop	{r7, pc}

08010a2c <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8010a2c:	b590      	push	{r4, r7, lr}
 8010a2e:	b087      	sub	sp, #28
 8010a30:	af00      	add	r7, sp, #0
 8010a32:	60f8      	str	r0, [r7, #12]
 8010a34:	60b9      	str	r1, [r7, #8]
 8010a36:	603b      	str	r3, [r7, #0]
 8010a38:	4613      	mov	r3, r2
 8010a3a:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8010a3c:	68fb      	ldr	r3, [r7, #12]
 8010a3e:	2b00      	cmp	r3, #0
 8010a40:	d105      	bne.n	8010a4e <tcp_create_segment+0x22>
 8010a42:	4b44      	ldr	r3, [pc, #272]	; (8010b54 <tcp_create_segment+0x128>)
 8010a44:	22a3      	movs	r2, #163	; 0xa3
 8010a46:	4944      	ldr	r1, [pc, #272]	; (8010b58 <tcp_create_segment+0x12c>)
 8010a48:	4844      	ldr	r0, [pc, #272]	; (8010b5c <tcp_create_segment+0x130>)
 8010a4a:	f006 ff11 	bl	8017870 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8010a4e:	68bb      	ldr	r3, [r7, #8]
 8010a50:	2b00      	cmp	r3, #0
 8010a52:	d105      	bne.n	8010a60 <tcp_create_segment+0x34>
 8010a54:	4b3f      	ldr	r3, [pc, #252]	; (8010b54 <tcp_create_segment+0x128>)
 8010a56:	22a4      	movs	r2, #164	; 0xa4
 8010a58:	4941      	ldr	r1, [pc, #260]	; (8010b60 <tcp_create_segment+0x134>)
 8010a5a:	4840      	ldr	r0, [pc, #256]	; (8010b5c <tcp_create_segment+0x130>)
 8010a5c:	f006 ff08 	bl	8017870 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8010a60:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8010a64:	009b      	lsls	r3, r3, #2
 8010a66:	b2db      	uxtb	r3, r3
 8010a68:	f003 0304 	and.w	r3, r3, #4
 8010a6c:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8010a6e:	2003      	movs	r0, #3
 8010a70:	f7fb f83a 	bl	800bae8 <memp_malloc>
 8010a74:	6138      	str	r0, [r7, #16]
 8010a76:	693b      	ldr	r3, [r7, #16]
 8010a78:	2b00      	cmp	r3, #0
 8010a7a:	d104      	bne.n	8010a86 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8010a7c:	68b8      	ldr	r0, [r7, #8]
 8010a7e:	f7fb fe79 	bl	800c774 <pbuf_free>
    return NULL;
 8010a82:	2300      	movs	r3, #0
 8010a84:	e061      	b.n	8010b4a <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 8010a86:	693b      	ldr	r3, [r7, #16]
 8010a88:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8010a8c:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8010a8e:	693b      	ldr	r3, [r7, #16]
 8010a90:	2200      	movs	r2, #0
 8010a92:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8010a94:	693b      	ldr	r3, [r7, #16]
 8010a96:	68ba      	ldr	r2, [r7, #8]
 8010a98:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8010a9a:	68bb      	ldr	r3, [r7, #8]
 8010a9c:	891a      	ldrh	r2, [r3, #8]
 8010a9e:	7dfb      	ldrb	r3, [r7, #23]
 8010aa0:	b29b      	uxth	r3, r3
 8010aa2:	429a      	cmp	r2, r3
 8010aa4:	d205      	bcs.n	8010ab2 <tcp_create_segment+0x86>
 8010aa6:	4b2b      	ldr	r3, [pc, #172]	; (8010b54 <tcp_create_segment+0x128>)
 8010aa8:	22b0      	movs	r2, #176	; 0xb0
 8010aaa:	492e      	ldr	r1, [pc, #184]	; (8010b64 <tcp_create_segment+0x138>)
 8010aac:	482b      	ldr	r0, [pc, #172]	; (8010b5c <tcp_create_segment+0x130>)
 8010aae:	f006 fedf 	bl	8017870 <iprintf>
  seg->len = p->tot_len - optlen;
 8010ab2:	68bb      	ldr	r3, [r7, #8]
 8010ab4:	891a      	ldrh	r2, [r3, #8]
 8010ab6:	7dfb      	ldrb	r3, [r7, #23]
 8010ab8:	b29b      	uxth	r3, r3
 8010aba:	1ad3      	subs	r3, r2, r3
 8010abc:	b29a      	uxth	r2, r3
 8010abe:	693b      	ldr	r3, [r7, #16]
 8010ac0:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8010ac2:	2114      	movs	r1, #20
 8010ac4:	68b8      	ldr	r0, [r7, #8]
 8010ac6:	f7fb fdbf 	bl	800c648 <pbuf_add_header>
 8010aca:	4603      	mov	r3, r0
 8010acc:	2b00      	cmp	r3, #0
 8010ace:	d004      	beq.n	8010ada <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8010ad0:	6938      	ldr	r0, [r7, #16]
 8010ad2:	f7fd f8d2 	bl	800dc7a <tcp_seg_free>
    return NULL;
 8010ad6:	2300      	movs	r3, #0
 8010ad8:	e037      	b.n	8010b4a <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8010ada:	693b      	ldr	r3, [r7, #16]
 8010adc:	685b      	ldr	r3, [r3, #4]
 8010ade:	685a      	ldr	r2, [r3, #4]
 8010ae0:	693b      	ldr	r3, [r7, #16]
 8010ae2:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8010ae4:	68fb      	ldr	r3, [r7, #12]
 8010ae6:	8ada      	ldrh	r2, [r3, #22]
 8010ae8:	693b      	ldr	r3, [r7, #16]
 8010aea:	68dc      	ldr	r4, [r3, #12]
 8010aec:	4610      	mov	r0, r2
 8010aee:	f7fa fba5 	bl	800b23c <lwip_htons>
 8010af2:	4603      	mov	r3, r0
 8010af4:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8010af6:	68fb      	ldr	r3, [r7, #12]
 8010af8:	8b1a      	ldrh	r2, [r3, #24]
 8010afa:	693b      	ldr	r3, [r7, #16]
 8010afc:	68dc      	ldr	r4, [r3, #12]
 8010afe:	4610      	mov	r0, r2
 8010b00:	f7fa fb9c 	bl	800b23c <lwip_htons>
 8010b04:	4603      	mov	r3, r0
 8010b06:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8010b08:	693b      	ldr	r3, [r7, #16]
 8010b0a:	68dc      	ldr	r4, [r3, #12]
 8010b0c:	6838      	ldr	r0, [r7, #0]
 8010b0e:	f7fa fbaa 	bl	800b266 <lwip_htonl>
 8010b12:	4603      	mov	r3, r0
 8010b14:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8010b16:	7dfb      	ldrb	r3, [r7, #23]
 8010b18:	089b      	lsrs	r3, r3, #2
 8010b1a:	b2db      	uxtb	r3, r3
 8010b1c:	b29b      	uxth	r3, r3
 8010b1e:	3305      	adds	r3, #5
 8010b20:	b29b      	uxth	r3, r3
 8010b22:	031b      	lsls	r3, r3, #12
 8010b24:	b29a      	uxth	r2, r3
 8010b26:	79fb      	ldrb	r3, [r7, #7]
 8010b28:	b29b      	uxth	r3, r3
 8010b2a:	4313      	orrs	r3, r2
 8010b2c:	b29a      	uxth	r2, r3
 8010b2e:	693b      	ldr	r3, [r7, #16]
 8010b30:	68dc      	ldr	r4, [r3, #12]
 8010b32:	4610      	mov	r0, r2
 8010b34:	f7fa fb82 	bl	800b23c <lwip_htons>
 8010b38:	4603      	mov	r3, r0
 8010b3a:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8010b3c:	693b      	ldr	r3, [r7, #16]
 8010b3e:	68db      	ldr	r3, [r3, #12]
 8010b40:	2200      	movs	r2, #0
 8010b42:	749a      	strb	r2, [r3, #18]
 8010b44:	2200      	movs	r2, #0
 8010b46:	74da      	strb	r2, [r3, #19]
  return seg;
 8010b48:	693b      	ldr	r3, [r7, #16]
}
 8010b4a:	4618      	mov	r0, r3
 8010b4c:	371c      	adds	r7, #28
 8010b4e:	46bd      	mov	sp, r7
 8010b50:	bd90      	pop	{r4, r7, pc}
 8010b52:	bf00      	nop
 8010b54:	0801e2f4 	.word	0x0801e2f4
 8010b58:	0801e328 	.word	0x0801e328
 8010b5c:	0801e348 	.word	0x0801e348
 8010b60:	0801e370 	.word	0x0801e370
 8010b64:	0801e394 	.word	0x0801e394

08010b68 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8010b68:	b590      	push	{r4, r7, lr}
 8010b6a:	b08b      	sub	sp, #44	; 0x2c
 8010b6c:	af02      	add	r7, sp, #8
 8010b6e:	6078      	str	r0, [r7, #4]
 8010b70:	460b      	mov	r3, r1
 8010b72:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8010b74:	2300      	movs	r3, #0
 8010b76:	61fb      	str	r3, [r7, #28]
 8010b78:	2300      	movs	r3, #0
 8010b7a:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8010b7c:	2300      	movs	r3, #0
 8010b7e:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8010b80:	687b      	ldr	r3, [r7, #4]
 8010b82:	2b00      	cmp	r3, #0
 8010b84:	d106      	bne.n	8010b94 <tcp_split_unsent_seg+0x2c>
 8010b86:	4b95      	ldr	r3, [pc, #596]	; (8010ddc <tcp_split_unsent_seg+0x274>)
 8010b88:	f240 324b 	movw	r2, #843	; 0x34b
 8010b8c:	4994      	ldr	r1, [pc, #592]	; (8010de0 <tcp_split_unsent_seg+0x278>)
 8010b8e:	4895      	ldr	r0, [pc, #596]	; (8010de4 <tcp_split_unsent_seg+0x27c>)
 8010b90:	f006 fe6e 	bl	8017870 <iprintf>

  useg = pcb->unsent;
 8010b94:	687b      	ldr	r3, [r7, #4]
 8010b96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010b98:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8010b9a:	697b      	ldr	r3, [r7, #20]
 8010b9c:	2b00      	cmp	r3, #0
 8010b9e:	d102      	bne.n	8010ba6 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8010ba0:	f04f 33ff 	mov.w	r3, #4294967295
 8010ba4:	e116      	b.n	8010dd4 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8010ba6:	887b      	ldrh	r3, [r7, #2]
 8010ba8:	2b00      	cmp	r3, #0
 8010baa:	d109      	bne.n	8010bc0 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8010bac:	4b8b      	ldr	r3, [pc, #556]	; (8010ddc <tcp_split_unsent_seg+0x274>)
 8010bae:	f240 3253 	movw	r2, #851	; 0x353
 8010bb2:	498d      	ldr	r1, [pc, #564]	; (8010de8 <tcp_split_unsent_seg+0x280>)
 8010bb4:	488b      	ldr	r0, [pc, #556]	; (8010de4 <tcp_split_unsent_seg+0x27c>)
 8010bb6:	f006 fe5b 	bl	8017870 <iprintf>
    return ERR_VAL;
 8010bba:	f06f 0305 	mvn.w	r3, #5
 8010bbe:	e109      	b.n	8010dd4 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8010bc0:	697b      	ldr	r3, [r7, #20]
 8010bc2:	891b      	ldrh	r3, [r3, #8]
 8010bc4:	887a      	ldrh	r2, [r7, #2]
 8010bc6:	429a      	cmp	r2, r3
 8010bc8:	d301      	bcc.n	8010bce <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8010bca:	2300      	movs	r3, #0
 8010bcc:	e102      	b.n	8010dd4 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8010bce:	687b      	ldr	r3, [r7, #4]
 8010bd0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010bd2:	887a      	ldrh	r2, [r7, #2]
 8010bd4:	429a      	cmp	r2, r3
 8010bd6:	d906      	bls.n	8010be6 <tcp_split_unsent_seg+0x7e>
 8010bd8:	4b80      	ldr	r3, [pc, #512]	; (8010ddc <tcp_split_unsent_seg+0x274>)
 8010bda:	f240 325b 	movw	r2, #859	; 0x35b
 8010bde:	4983      	ldr	r1, [pc, #524]	; (8010dec <tcp_split_unsent_seg+0x284>)
 8010be0:	4880      	ldr	r0, [pc, #512]	; (8010de4 <tcp_split_unsent_seg+0x27c>)
 8010be2:	f006 fe45 	bl	8017870 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8010be6:	697b      	ldr	r3, [r7, #20]
 8010be8:	891b      	ldrh	r3, [r3, #8]
 8010bea:	2b00      	cmp	r3, #0
 8010bec:	d106      	bne.n	8010bfc <tcp_split_unsent_seg+0x94>
 8010bee:	4b7b      	ldr	r3, [pc, #492]	; (8010ddc <tcp_split_unsent_seg+0x274>)
 8010bf0:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8010bf4:	497e      	ldr	r1, [pc, #504]	; (8010df0 <tcp_split_unsent_seg+0x288>)
 8010bf6:	487b      	ldr	r0, [pc, #492]	; (8010de4 <tcp_split_unsent_seg+0x27c>)
 8010bf8:	f006 fe3a 	bl	8017870 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8010bfc:	697b      	ldr	r3, [r7, #20]
 8010bfe:	7a9b      	ldrb	r3, [r3, #10]
 8010c00:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8010c02:	7bfb      	ldrb	r3, [r7, #15]
 8010c04:	009b      	lsls	r3, r3, #2
 8010c06:	b2db      	uxtb	r3, r3
 8010c08:	f003 0304 	and.w	r3, r3, #4
 8010c0c:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8010c0e:	697b      	ldr	r3, [r7, #20]
 8010c10:	891a      	ldrh	r2, [r3, #8]
 8010c12:	887b      	ldrh	r3, [r7, #2]
 8010c14:	1ad3      	subs	r3, r2, r3
 8010c16:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8010c18:	7bbb      	ldrb	r3, [r7, #14]
 8010c1a:	b29a      	uxth	r2, r3
 8010c1c:	89bb      	ldrh	r3, [r7, #12]
 8010c1e:	4413      	add	r3, r2
 8010c20:	b29b      	uxth	r3, r3
 8010c22:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010c26:	4619      	mov	r1, r3
 8010c28:	2036      	movs	r0, #54	; 0x36
 8010c2a:	f7fb fabf 	bl	800c1ac <pbuf_alloc>
 8010c2e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8010c30:	693b      	ldr	r3, [r7, #16]
 8010c32:	2b00      	cmp	r3, #0
 8010c34:	f000 80b7 	beq.w	8010da6 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8010c38:	697b      	ldr	r3, [r7, #20]
 8010c3a:	685b      	ldr	r3, [r3, #4]
 8010c3c:	891a      	ldrh	r2, [r3, #8]
 8010c3e:	697b      	ldr	r3, [r7, #20]
 8010c40:	891b      	ldrh	r3, [r3, #8]
 8010c42:	1ad3      	subs	r3, r2, r3
 8010c44:	b29a      	uxth	r2, r3
 8010c46:	887b      	ldrh	r3, [r7, #2]
 8010c48:	4413      	add	r3, r2
 8010c4a:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8010c4c:	697b      	ldr	r3, [r7, #20]
 8010c4e:	6858      	ldr	r0, [r3, #4]
 8010c50:	693b      	ldr	r3, [r7, #16]
 8010c52:	685a      	ldr	r2, [r3, #4]
 8010c54:	7bbb      	ldrb	r3, [r7, #14]
 8010c56:	18d1      	adds	r1, r2, r3
 8010c58:	897b      	ldrh	r3, [r7, #10]
 8010c5a:	89ba      	ldrh	r2, [r7, #12]
 8010c5c:	f7fb ff84 	bl	800cb68 <pbuf_copy_partial>
 8010c60:	4603      	mov	r3, r0
 8010c62:	461a      	mov	r2, r3
 8010c64:	89bb      	ldrh	r3, [r7, #12]
 8010c66:	4293      	cmp	r3, r2
 8010c68:	f040 809f 	bne.w	8010daa <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8010c6c:	697b      	ldr	r3, [r7, #20]
 8010c6e:	68db      	ldr	r3, [r3, #12]
 8010c70:	899b      	ldrh	r3, [r3, #12]
 8010c72:	b29b      	uxth	r3, r3
 8010c74:	4618      	mov	r0, r3
 8010c76:	f7fa fae1 	bl	800b23c <lwip_htons>
 8010c7a:	4603      	mov	r3, r0
 8010c7c:	b2db      	uxtb	r3, r3
 8010c7e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010c82:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8010c84:	2300      	movs	r3, #0
 8010c86:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8010c88:	7efb      	ldrb	r3, [r7, #27]
 8010c8a:	f003 0308 	and.w	r3, r3, #8
 8010c8e:	2b00      	cmp	r3, #0
 8010c90:	d007      	beq.n	8010ca2 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8010c92:	7efb      	ldrb	r3, [r7, #27]
 8010c94:	f023 0308 	bic.w	r3, r3, #8
 8010c98:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8010c9a:	7ebb      	ldrb	r3, [r7, #26]
 8010c9c:	f043 0308 	orr.w	r3, r3, #8
 8010ca0:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8010ca2:	7efb      	ldrb	r3, [r7, #27]
 8010ca4:	f003 0301 	and.w	r3, r3, #1
 8010ca8:	2b00      	cmp	r3, #0
 8010caa:	d007      	beq.n	8010cbc <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8010cac:	7efb      	ldrb	r3, [r7, #27]
 8010cae:	f023 0301 	bic.w	r3, r3, #1
 8010cb2:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8010cb4:	7ebb      	ldrb	r3, [r7, #26]
 8010cb6:	f043 0301 	orr.w	r3, r3, #1
 8010cba:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8010cbc:	697b      	ldr	r3, [r7, #20]
 8010cbe:	68db      	ldr	r3, [r3, #12]
 8010cc0:	685b      	ldr	r3, [r3, #4]
 8010cc2:	4618      	mov	r0, r3
 8010cc4:	f7fa facf 	bl	800b266 <lwip_htonl>
 8010cc8:	4602      	mov	r2, r0
 8010cca:	887b      	ldrh	r3, [r7, #2]
 8010ccc:	18d1      	adds	r1, r2, r3
 8010cce:	7eba      	ldrb	r2, [r7, #26]
 8010cd0:	7bfb      	ldrb	r3, [r7, #15]
 8010cd2:	9300      	str	r3, [sp, #0]
 8010cd4:	460b      	mov	r3, r1
 8010cd6:	6939      	ldr	r1, [r7, #16]
 8010cd8:	6878      	ldr	r0, [r7, #4]
 8010cda:	f7ff fea7 	bl	8010a2c <tcp_create_segment>
 8010cde:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8010ce0:	69fb      	ldr	r3, [r7, #28]
 8010ce2:	2b00      	cmp	r3, #0
 8010ce4:	d063      	beq.n	8010dae <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8010ce6:	697b      	ldr	r3, [r7, #20]
 8010ce8:	685b      	ldr	r3, [r3, #4]
 8010cea:	4618      	mov	r0, r3
 8010cec:	f7fb fdca 	bl	800c884 <pbuf_clen>
 8010cf0:	4603      	mov	r3, r0
 8010cf2:	461a      	mov	r2, r3
 8010cf4:	687b      	ldr	r3, [r7, #4]
 8010cf6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010cfa:	1a9b      	subs	r3, r3, r2
 8010cfc:	b29a      	uxth	r2, r3
 8010cfe:	687b      	ldr	r3, [r7, #4]
 8010d00:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8010d04:	697b      	ldr	r3, [r7, #20]
 8010d06:	6858      	ldr	r0, [r3, #4]
 8010d08:	697b      	ldr	r3, [r7, #20]
 8010d0a:	685b      	ldr	r3, [r3, #4]
 8010d0c:	891a      	ldrh	r2, [r3, #8]
 8010d0e:	89bb      	ldrh	r3, [r7, #12]
 8010d10:	1ad3      	subs	r3, r2, r3
 8010d12:	b29b      	uxth	r3, r3
 8010d14:	4619      	mov	r1, r3
 8010d16:	f7fb fba7 	bl	800c468 <pbuf_realloc>
  useg->len -= remainder;
 8010d1a:	697b      	ldr	r3, [r7, #20]
 8010d1c:	891a      	ldrh	r2, [r3, #8]
 8010d1e:	89bb      	ldrh	r3, [r7, #12]
 8010d20:	1ad3      	subs	r3, r2, r3
 8010d22:	b29a      	uxth	r2, r3
 8010d24:	697b      	ldr	r3, [r7, #20]
 8010d26:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8010d28:	697b      	ldr	r3, [r7, #20]
 8010d2a:	68db      	ldr	r3, [r3, #12]
 8010d2c:	899b      	ldrh	r3, [r3, #12]
 8010d2e:	b29c      	uxth	r4, r3
 8010d30:	7efb      	ldrb	r3, [r7, #27]
 8010d32:	b29b      	uxth	r3, r3
 8010d34:	4618      	mov	r0, r3
 8010d36:	f7fa fa81 	bl	800b23c <lwip_htons>
 8010d3a:	4603      	mov	r3, r0
 8010d3c:	461a      	mov	r2, r3
 8010d3e:	697b      	ldr	r3, [r7, #20]
 8010d40:	68db      	ldr	r3, [r3, #12]
 8010d42:	4322      	orrs	r2, r4
 8010d44:	b292      	uxth	r2, r2
 8010d46:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8010d48:	697b      	ldr	r3, [r7, #20]
 8010d4a:	685b      	ldr	r3, [r3, #4]
 8010d4c:	4618      	mov	r0, r3
 8010d4e:	f7fb fd99 	bl	800c884 <pbuf_clen>
 8010d52:	4603      	mov	r3, r0
 8010d54:	461a      	mov	r2, r3
 8010d56:	687b      	ldr	r3, [r7, #4]
 8010d58:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010d5c:	4413      	add	r3, r2
 8010d5e:	b29a      	uxth	r2, r3
 8010d60:	687b      	ldr	r3, [r7, #4]
 8010d62:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8010d66:	69fb      	ldr	r3, [r7, #28]
 8010d68:	685b      	ldr	r3, [r3, #4]
 8010d6a:	4618      	mov	r0, r3
 8010d6c:	f7fb fd8a 	bl	800c884 <pbuf_clen>
 8010d70:	4603      	mov	r3, r0
 8010d72:	461a      	mov	r2, r3
 8010d74:	687b      	ldr	r3, [r7, #4]
 8010d76:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010d7a:	4413      	add	r3, r2
 8010d7c:	b29a      	uxth	r2, r3
 8010d7e:	687b      	ldr	r3, [r7, #4]
 8010d80:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8010d84:	697b      	ldr	r3, [r7, #20]
 8010d86:	681a      	ldr	r2, [r3, #0]
 8010d88:	69fb      	ldr	r3, [r7, #28]
 8010d8a:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8010d8c:	697b      	ldr	r3, [r7, #20]
 8010d8e:	69fa      	ldr	r2, [r7, #28]
 8010d90:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8010d92:	69fb      	ldr	r3, [r7, #28]
 8010d94:	681b      	ldr	r3, [r3, #0]
 8010d96:	2b00      	cmp	r3, #0
 8010d98:	d103      	bne.n	8010da2 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8010d9a:	687b      	ldr	r3, [r7, #4]
 8010d9c:	2200      	movs	r2, #0
 8010d9e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8010da2:	2300      	movs	r3, #0
 8010da4:	e016      	b.n	8010dd4 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8010da6:	bf00      	nop
 8010da8:	e002      	b.n	8010db0 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8010daa:	bf00      	nop
 8010dac:	e000      	b.n	8010db0 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8010dae:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8010db0:	69fb      	ldr	r3, [r7, #28]
 8010db2:	2b00      	cmp	r3, #0
 8010db4:	d006      	beq.n	8010dc4 <tcp_split_unsent_seg+0x25c>
 8010db6:	4b09      	ldr	r3, [pc, #36]	; (8010ddc <tcp_split_unsent_seg+0x274>)
 8010db8:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8010dbc:	490d      	ldr	r1, [pc, #52]	; (8010df4 <tcp_split_unsent_seg+0x28c>)
 8010dbe:	4809      	ldr	r0, [pc, #36]	; (8010de4 <tcp_split_unsent_seg+0x27c>)
 8010dc0:	f006 fd56 	bl	8017870 <iprintf>
  if (p != NULL) {
 8010dc4:	693b      	ldr	r3, [r7, #16]
 8010dc6:	2b00      	cmp	r3, #0
 8010dc8:	d002      	beq.n	8010dd0 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8010dca:	6938      	ldr	r0, [r7, #16]
 8010dcc:	f7fb fcd2 	bl	800c774 <pbuf_free>
  }

  return ERR_MEM;
 8010dd0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8010dd4:	4618      	mov	r0, r3
 8010dd6:	3724      	adds	r7, #36	; 0x24
 8010dd8:	46bd      	mov	sp, r7
 8010dda:	bd90      	pop	{r4, r7, pc}
 8010ddc:	0801e2f4 	.word	0x0801e2f4
 8010de0:	0801e688 	.word	0x0801e688
 8010de4:	0801e348 	.word	0x0801e348
 8010de8:	0801e6ac 	.word	0x0801e6ac
 8010dec:	0801e6d0 	.word	0x0801e6d0
 8010df0:	0801e6e0 	.word	0x0801e6e0
 8010df4:	0801e6f0 	.word	0x0801e6f0

08010df8 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8010df8:	b590      	push	{r4, r7, lr}
 8010dfa:	b085      	sub	sp, #20
 8010dfc:	af00      	add	r7, sp, #0
 8010dfe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8010e00:	687b      	ldr	r3, [r7, #4]
 8010e02:	2b00      	cmp	r3, #0
 8010e04:	d106      	bne.n	8010e14 <tcp_send_fin+0x1c>
 8010e06:	4b21      	ldr	r3, [pc, #132]	; (8010e8c <tcp_send_fin+0x94>)
 8010e08:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8010e0c:	4920      	ldr	r1, [pc, #128]	; (8010e90 <tcp_send_fin+0x98>)
 8010e0e:	4821      	ldr	r0, [pc, #132]	; (8010e94 <tcp_send_fin+0x9c>)
 8010e10:	f006 fd2e 	bl	8017870 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8010e14:	687b      	ldr	r3, [r7, #4]
 8010e16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010e18:	2b00      	cmp	r3, #0
 8010e1a:	d02e      	beq.n	8010e7a <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8010e1c:	687b      	ldr	r3, [r7, #4]
 8010e1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010e20:	60fb      	str	r3, [r7, #12]
 8010e22:	e002      	b.n	8010e2a <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8010e24:	68fb      	ldr	r3, [r7, #12]
 8010e26:	681b      	ldr	r3, [r3, #0]
 8010e28:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8010e2a:	68fb      	ldr	r3, [r7, #12]
 8010e2c:	681b      	ldr	r3, [r3, #0]
 8010e2e:	2b00      	cmp	r3, #0
 8010e30:	d1f8      	bne.n	8010e24 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8010e32:	68fb      	ldr	r3, [r7, #12]
 8010e34:	68db      	ldr	r3, [r3, #12]
 8010e36:	899b      	ldrh	r3, [r3, #12]
 8010e38:	b29b      	uxth	r3, r3
 8010e3a:	4618      	mov	r0, r3
 8010e3c:	f7fa f9fe 	bl	800b23c <lwip_htons>
 8010e40:	4603      	mov	r3, r0
 8010e42:	b2db      	uxtb	r3, r3
 8010e44:	f003 0307 	and.w	r3, r3, #7
 8010e48:	2b00      	cmp	r3, #0
 8010e4a:	d116      	bne.n	8010e7a <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8010e4c:	68fb      	ldr	r3, [r7, #12]
 8010e4e:	68db      	ldr	r3, [r3, #12]
 8010e50:	899b      	ldrh	r3, [r3, #12]
 8010e52:	b29c      	uxth	r4, r3
 8010e54:	2001      	movs	r0, #1
 8010e56:	f7fa f9f1 	bl	800b23c <lwip_htons>
 8010e5a:	4603      	mov	r3, r0
 8010e5c:	461a      	mov	r2, r3
 8010e5e:	68fb      	ldr	r3, [r7, #12]
 8010e60:	68db      	ldr	r3, [r3, #12]
 8010e62:	4322      	orrs	r2, r4
 8010e64:	b292      	uxth	r2, r2
 8010e66:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8010e68:	687b      	ldr	r3, [r7, #4]
 8010e6a:	8b5b      	ldrh	r3, [r3, #26]
 8010e6c:	f043 0320 	orr.w	r3, r3, #32
 8010e70:	b29a      	uxth	r2, r3
 8010e72:	687b      	ldr	r3, [r7, #4]
 8010e74:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8010e76:	2300      	movs	r3, #0
 8010e78:	e004      	b.n	8010e84 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8010e7a:	2101      	movs	r1, #1
 8010e7c:	6878      	ldr	r0, [r7, #4]
 8010e7e:	f000 f80b 	bl	8010e98 <tcp_enqueue_flags>
 8010e82:	4603      	mov	r3, r0
}
 8010e84:	4618      	mov	r0, r3
 8010e86:	3714      	adds	r7, #20
 8010e88:	46bd      	mov	sp, r7
 8010e8a:	bd90      	pop	{r4, r7, pc}
 8010e8c:	0801e2f4 	.word	0x0801e2f4
 8010e90:	0801e6fc 	.word	0x0801e6fc
 8010e94:	0801e348 	.word	0x0801e348

08010e98 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8010e98:	b580      	push	{r7, lr}
 8010e9a:	b08a      	sub	sp, #40	; 0x28
 8010e9c:	af02      	add	r7, sp, #8
 8010e9e:	6078      	str	r0, [r7, #4]
 8010ea0:	460b      	mov	r3, r1
 8010ea2:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8010ea4:	2300      	movs	r3, #0
 8010ea6:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8010ea8:	2300      	movs	r3, #0
 8010eaa:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8010eac:	78fb      	ldrb	r3, [r7, #3]
 8010eae:	f003 0303 	and.w	r3, r3, #3
 8010eb2:	2b00      	cmp	r3, #0
 8010eb4:	d106      	bne.n	8010ec4 <tcp_enqueue_flags+0x2c>
 8010eb6:	4b67      	ldr	r3, [pc, #412]	; (8011054 <tcp_enqueue_flags+0x1bc>)
 8010eb8:	f240 4211 	movw	r2, #1041	; 0x411
 8010ebc:	4966      	ldr	r1, [pc, #408]	; (8011058 <tcp_enqueue_flags+0x1c0>)
 8010ebe:	4867      	ldr	r0, [pc, #412]	; (801105c <tcp_enqueue_flags+0x1c4>)
 8010ec0:	f006 fcd6 	bl	8017870 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8010ec4:	687b      	ldr	r3, [r7, #4]
 8010ec6:	2b00      	cmp	r3, #0
 8010ec8:	d106      	bne.n	8010ed8 <tcp_enqueue_flags+0x40>
 8010eca:	4b62      	ldr	r3, [pc, #392]	; (8011054 <tcp_enqueue_flags+0x1bc>)
 8010ecc:	f240 4213 	movw	r2, #1043	; 0x413
 8010ed0:	4963      	ldr	r1, [pc, #396]	; (8011060 <tcp_enqueue_flags+0x1c8>)
 8010ed2:	4862      	ldr	r0, [pc, #392]	; (801105c <tcp_enqueue_flags+0x1c4>)
 8010ed4:	f006 fccc 	bl	8017870 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8010ed8:	78fb      	ldrb	r3, [r7, #3]
 8010eda:	f003 0302 	and.w	r3, r3, #2
 8010ede:	2b00      	cmp	r3, #0
 8010ee0:	d001      	beq.n	8010ee6 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8010ee2:	2301      	movs	r3, #1
 8010ee4:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8010ee6:	7ffb      	ldrb	r3, [r7, #31]
 8010ee8:	009b      	lsls	r3, r3, #2
 8010eea:	b2db      	uxtb	r3, r3
 8010eec:	f003 0304 	and.w	r3, r3, #4
 8010ef0:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8010ef2:	7dfb      	ldrb	r3, [r7, #23]
 8010ef4:	b29b      	uxth	r3, r3
 8010ef6:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010efa:	4619      	mov	r1, r3
 8010efc:	2036      	movs	r0, #54	; 0x36
 8010efe:	f7fb f955 	bl	800c1ac <pbuf_alloc>
 8010f02:	6138      	str	r0, [r7, #16]
 8010f04:	693b      	ldr	r3, [r7, #16]
 8010f06:	2b00      	cmp	r3, #0
 8010f08:	d109      	bne.n	8010f1e <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010f0a:	687b      	ldr	r3, [r7, #4]
 8010f0c:	8b5b      	ldrh	r3, [r3, #26]
 8010f0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010f12:	b29a      	uxth	r2, r3
 8010f14:	687b      	ldr	r3, [r7, #4]
 8010f16:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8010f18:	f04f 33ff 	mov.w	r3, #4294967295
 8010f1c:	e095      	b.n	801104a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8010f1e:	693b      	ldr	r3, [r7, #16]
 8010f20:	895a      	ldrh	r2, [r3, #10]
 8010f22:	7dfb      	ldrb	r3, [r7, #23]
 8010f24:	b29b      	uxth	r3, r3
 8010f26:	429a      	cmp	r2, r3
 8010f28:	d206      	bcs.n	8010f38 <tcp_enqueue_flags+0xa0>
 8010f2a:	4b4a      	ldr	r3, [pc, #296]	; (8011054 <tcp_enqueue_flags+0x1bc>)
 8010f2c:	f240 4239 	movw	r2, #1081	; 0x439
 8010f30:	494c      	ldr	r1, [pc, #304]	; (8011064 <tcp_enqueue_flags+0x1cc>)
 8010f32:	484a      	ldr	r0, [pc, #296]	; (801105c <tcp_enqueue_flags+0x1c4>)
 8010f34:	f006 fc9c 	bl	8017870 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8010f38:	687b      	ldr	r3, [r7, #4]
 8010f3a:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8010f3c:	78fa      	ldrb	r2, [r7, #3]
 8010f3e:	7ffb      	ldrb	r3, [r7, #31]
 8010f40:	9300      	str	r3, [sp, #0]
 8010f42:	460b      	mov	r3, r1
 8010f44:	6939      	ldr	r1, [r7, #16]
 8010f46:	6878      	ldr	r0, [r7, #4]
 8010f48:	f7ff fd70 	bl	8010a2c <tcp_create_segment>
 8010f4c:	60f8      	str	r0, [r7, #12]
 8010f4e:	68fb      	ldr	r3, [r7, #12]
 8010f50:	2b00      	cmp	r3, #0
 8010f52:	d109      	bne.n	8010f68 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010f54:	687b      	ldr	r3, [r7, #4]
 8010f56:	8b5b      	ldrh	r3, [r3, #26]
 8010f58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010f5c:	b29a      	uxth	r2, r3
 8010f5e:	687b      	ldr	r3, [r7, #4]
 8010f60:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8010f62:	f04f 33ff 	mov.w	r3, #4294967295
 8010f66:	e070      	b.n	801104a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8010f68:	68fb      	ldr	r3, [r7, #12]
 8010f6a:	68db      	ldr	r3, [r3, #12]
 8010f6c:	f003 0303 	and.w	r3, r3, #3
 8010f70:	2b00      	cmp	r3, #0
 8010f72:	d006      	beq.n	8010f82 <tcp_enqueue_flags+0xea>
 8010f74:	4b37      	ldr	r3, [pc, #220]	; (8011054 <tcp_enqueue_flags+0x1bc>)
 8010f76:	f240 4242 	movw	r2, #1090	; 0x442
 8010f7a:	493b      	ldr	r1, [pc, #236]	; (8011068 <tcp_enqueue_flags+0x1d0>)
 8010f7c:	4837      	ldr	r0, [pc, #220]	; (801105c <tcp_enqueue_flags+0x1c4>)
 8010f7e:	f006 fc77 	bl	8017870 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8010f82:	68fb      	ldr	r3, [r7, #12]
 8010f84:	891b      	ldrh	r3, [r3, #8]
 8010f86:	2b00      	cmp	r3, #0
 8010f88:	d006      	beq.n	8010f98 <tcp_enqueue_flags+0x100>
 8010f8a:	4b32      	ldr	r3, [pc, #200]	; (8011054 <tcp_enqueue_flags+0x1bc>)
 8010f8c:	f240 4243 	movw	r2, #1091	; 0x443
 8010f90:	4936      	ldr	r1, [pc, #216]	; (801106c <tcp_enqueue_flags+0x1d4>)
 8010f92:	4832      	ldr	r0, [pc, #200]	; (801105c <tcp_enqueue_flags+0x1c4>)
 8010f94:	f006 fc6c 	bl	8017870 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8010f98:	687b      	ldr	r3, [r7, #4]
 8010f9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010f9c:	2b00      	cmp	r3, #0
 8010f9e:	d103      	bne.n	8010fa8 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8010fa0:	687b      	ldr	r3, [r7, #4]
 8010fa2:	68fa      	ldr	r2, [r7, #12]
 8010fa4:	66da      	str	r2, [r3, #108]	; 0x6c
 8010fa6:	e00d      	b.n	8010fc4 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8010fa8:	687b      	ldr	r3, [r7, #4]
 8010faa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010fac:	61bb      	str	r3, [r7, #24]
 8010fae:	e002      	b.n	8010fb6 <tcp_enqueue_flags+0x11e>
 8010fb0:	69bb      	ldr	r3, [r7, #24]
 8010fb2:	681b      	ldr	r3, [r3, #0]
 8010fb4:	61bb      	str	r3, [r7, #24]
 8010fb6:	69bb      	ldr	r3, [r7, #24]
 8010fb8:	681b      	ldr	r3, [r3, #0]
 8010fba:	2b00      	cmp	r3, #0
 8010fbc:	d1f8      	bne.n	8010fb0 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8010fbe:	69bb      	ldr	r3, [r7, #24]
 8010fc0:	68fa      	ldr	r2, [r7, #12]
 8010fc2:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8010fc4:	687b      	ldr	r3, [r7, #4]
 8010fc6:	2200      	movs	r2, #0
 8010fc8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8010fcc:	78fb      	ldrb	r3, [r7, #3]
 8010fce:	f003 0302 	and.w	r3, r3, #2
 8010fd2:	2b00      	cmp	r3, #0
 8010fd4:	d104      	bne.n	8010fe0 <tcp_enqueue_flags+0x148>
 8010fd6:	78fb      	ldrb	r3, [r7, #3]
 8010fd8:	f003 0301 	and.w	r3, r3, #1
 8010fdc:	2b00      	cmp	r3, #0
 8010fde:	d004      	beq.n	8010fea <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8010fe0:	687b      	ldr	r3, [r7, #4]
 8010fe2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010fe4:	1c5a      	adds	r2, r3, #1
 8010fe6:	687b      	ldr	r3, [r7, #4]
 8010fe8:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8010fea:	78fb      	ldrb	r3, [r7, #3]
 8010fec:	f003 0301 	and.w	r3, r3, #1
 8010ff0:	2b00      	cmp	r3, #0
 8010ff2:	d006      	beq.n	8011002 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8010ff4:	687b      	ldr	r3, [r7, #4]
 8010ff6:	8b5b      	ldrh	r3, [r3, #26]
 8010ff8:	f043 0320 	orr.w	r3, r3, #32
 8010ffc:	b29a      	uxth	r2, r3
 8010ffe:	687b      	ldr	r3, [r7, #4]
 8011000:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8011002:	68fb      	ldr	r3, [r7, #12]
 8011004:	685b      	ldr	r3, [r3, #4]
 8011006:	4618      	mov	r0, r3
 8011008:	f7fb fc3c 	bl	800c884 <pbuf_clen>
 801100c:	4603      	mov	r3, r0
 801100e:	461a      	mov	r2, r3
 8011010:	687b      	ldr	r3, [r7, #4]
 8011012:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011016:	4413      	add	r3, r2
 8011018:	b29a      	uxth	r2, r3
 801101a:	687b      	ldr	r3, [r7, #4]
 801101c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8011020:	687b      	ldr	r3, [r7, #4]
 8011022:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011026:	2b00      	cmp	r3, #0
 8011028:	d00e      	beq.n	8011048 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 801102a:	687b      	ldr	r3, [r7, #4]
 801102c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801102e:	2b00      	cmp	r3, #0
 8011030:	d10a      	bne.n	8011048 <tcp_enqueue_flags+0x1b0>
 8011032:	687b      	ldr	r3, [r7, #4]
 8011034:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011036:	2b00      	cmp	r3, #0
 8011038:	d106      	bne.n	8011048 <tcp_enqueue_flags+0x1b0>
 801103a:	4b06      	ldr	r3, [pc, #24]	; (8011054 <tcp_enqueue_flags+0x1bc>)
 801103c:	f240 4265 	movw	r2, #1125	; 0x465
 8011040:	490b      	ldr	r1, [pc, #44]	; (8011070 <tcp_enqueue_flags+0x1d8>)
 8011042:	4806      	ldr	r0, [pc, #24]	; (801105c <tcp_enqueue_flags+0x1c4>)
 8011044:	f006 fc14 	bl	8017870 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8011048:	2300      	movs	r3, #0
}
 801104a:	4618      	mov	r0, r3
 801104c:	3720      	adds	r7, #32
 801104e:	46bd      	mov	sp, r7
 8011050:	bd80      	pop	{r7, pc}
 8011052:	bf00      	nop
 8011054:	0801e2f4 	.word	0x0801e2f4
 8011058:	0801e718 	.word	0x0801e718
 801105c:	0801e348 	.word	0x0801e348
 8011060:	0801e770 	.word	0x0801e770
 8011064:	0801e790 	.word	0x0801e790
 8011068:	0801e7cc 	.word	0x0801e7cc
 801106c:	0801e7e4 	.word	0x0801e7e4
 8011070:	0801e810 	.word	0x0801e810

08011074 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8011074:	b5b0      	push	{r4, r5, r7, lr}
 8011076:	b08a      	sub	sp, #40	; 0x28
 8011078:	af00      	add	r7, sp, #0
 801107a:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 801107c:	687b      	ldr	r3, [r7, #4]
 801107e:	2b00      	cmp	r3, #0
 8011080:	d106      	bne.n	8011090 <tcp_output+0x1c>
 8011082:	4b9e      	ldr	r3, [pc, #632]	; (80112fc <tcp_output+0x288>)
 8011084:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8011088:	499d      	ldr	r1, [pc, #628]	; (8011300 <tcp_output+0x28c>)
 801108a:	489e      	ldr	r0, [pc, #632]	; (8011304 <tcp_output+0x290>)
 801108c:	f006 fbf0 	bl	8017870 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8011090:	687b      	ldr	r3, [r7, #4]
 8011092:	7d1b      	ldrb	r3, [r3, #20]
 8011094:	2b01      	cmp	r3, #1
 8011096:	d106      	bne.n	80110a6 <tcp_output+0x32>
 8011098:	4b98      	ldr	r3, [pc, #608]	; (80112fc <tcp_output+0x288>)
 801109a:	f240 42e3 	movw	r2, #1251	; 0x4e3
 801109e:	499a      	ldr	r1, [pc, #616]	; (8011308 <tcp_output+0x294>)
 80110a0:	4898      	ldr	r0, [pc, #608]	; (8011304 <tcp_output+0x290>)
 80110a2:	f006 fbe5 	bl	8017870 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 80110a6:	4b99      	ldr	r3, [pc, #612]	; (801130c <tcp_output+0x298>)
 80110a8:	681b      	ldr	r3, [r3, #0]
 80110aa:	687a      	ldr	r2, [r7, #4]
 80110ac:	429a      	cmp	r2, r3
 80110ae:	d101      	bne.n	80110b4 <tcp_output+0x40>
    return ERR_OK;
 80110b0:	2300      	movs	r3, #0
 80110b2:	e1ce      	b.n	8011452 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 80110b4:	687b      	ldr	r3, [r7, #4]
 80110b6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80110ba:	687b      	ldr	r3, [r7, #4]
 80110bc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80110c0:	4293      	cmp	r3, r2
 80110c2:	bf28      	it	cs
 80110c4:	4613      	movcs	r3, r2
 80110c6:	b29b      	uxth	r3, r3
 80110c8:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 80110ca:	687b      	ldr	r3, [r7, #4]
 80110cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80110ce:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 80110d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110d2:	2b00      	cmp	r3, #0
 80110d4:	d10b      	bne.n	80110ee <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 80110d6:	687b      	ldr	r3, [r7, #4]
 80110d8:	8b5b      	ldrh	r3, [r3, #26]
 80110da:	f003 0302 	and.w	r3, r3, #2
 80110de:	2b00      	cmp	r3, #0
 80110e0:	f000 81aa 	beq.w	8011438 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 80110e4:	6878      	ldr	r0, [r7, #4]
 80110e6:	f000 fdc9 	bl	8011c7c <tcp_send_empty_ack>
 80110ea:	4603      	mov	r3, r0
 80110ec:	e1b1      	b.n	8011452 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 80110ee:	6879      	ldr	r1, [r7, #4]
 80110f0:	687b      	ldr	r3, [r7, #4]
 80110f2:	3304      	adds	r3, #4
 80110f4:	461a      	mov	r2, r3
 80110f6:	6878      	ldr	r0, [r7, #4]
 80110f8:	f7ff fc7c 	bl	80109f4 <tcp_route>
 80110fc:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 80110fe:	697b      	ldr	r3, [r7, #20]
 8011100:	2b00      	cmp	r3, #0
 8011102:	d102      	bne.n	801110a <tcp_output+0x96>
    return ERR_RTE;
 8011104:	f06f 0303 	mvn.w	r3, #3
 8011108:	e1a3      	b.n	8011452 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 801110a:	687b      	ldr	r3, [r7, #4]
 801110c:	2b00      	cmp	r3, #0
 801110e:	d003      	beq.n	8011118 <tcp_output+0xa4>
 8011110:	687b      	ldr	r3, [r7, #4]
 8011112:	681b      	ldr	r3, [r3, #0]
 8011114:	2b00      	cmp	r3, #0
 8011116:	d111      	bne.n	801113c <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8011118:	697b      	ldr	r3, [r7, #20]
 801111a:	2b00      	cmp	r3, #0
 801111c:	d002      	beq.n	8011124 <tcp_output+0xb0>
 801111e:	697b      	ldr	r3, [r7, #20]
 8011120:	3304      	adds	r3, #4
 8011122:	e000      	b.n	8011126 <tcp_output+0xb2>
 8011124:	2300      	movs	r3, #0
 8011126:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8011128:	693b      	ldr	r3, [r7, #16]
 801112a:	2b00      	cmp	r3, #0
 801112c:	d102      	bne.n	8011134 <tcp_output+0xc0>
      return ERR_RTE;
 801112e:	f06f 0303 	mvn.w	r3, #3
 8011132:	e18e      	b.n	8011452 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8011134:	693b      	ldr	r3, [r7, #16]
 8011136:	681a      	ldr	r2, [r3, #0]
 8011138:	687b      	ldr	r3, [r7, #4]
 801113a:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 801113c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801113e:	68db      	ldr	r3, [r3, #12]
 8011140:	685b      	ldr	r3, [r3, #4]
 8011142:	4618      	mov	r0, r3
 8011144:	f7fa f88f 	bl	800b266 <lwip_htonl>
 8011148:	4602      	mov	r2, r0
 801114a:	687b      	ldr	r3, [r7, #4]
 801114c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801114e:	1ad3      	subs	r3, r2, r3
 8011150:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011152:	8912      	ldrh	r2, [r2, #8]
 8011154:	4413      	add	r3, r2
 8011156:	69ba      	ldr	r2, [r7, #24]
 8011158:	429a      	cmp	r2, r3
 801115a:	d227      	bcs.n	80111ac <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 801115c:	687b      	ldr	r3, [r7, #4]
 801115e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011162:	461a      	mov	r2, r3
 8011164:	69bb      	ldr	r3, [r7, #24]
 8011166:	4293      	cmp	r3, r2
 8011168:	d114      	bne.n	8011194 <tcp_output+0x120>
 801116a:	687b      	ldr	r3, [r7, #4]
 801116c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801116e:	2b00      	cmp	r3, #0
 8011170:	d110      	bne.n	8011194 <tcp_output+0x120>
 8011172:	687b      	ldr	r3, [r7, #4]
 8011174:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8011178:	2b00      	cmp	r3, #0
 801117a:	d10b      	bne.n	8011194 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 801117c:	687b      	ldr	r3, [r7, #4]
 801117e:	2200      	movs	r2, #0
 8011180:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8011184:	687b      	ldr	r3, [r7, #4]
 8011186:	2201      	movs	r2, #1
 8011188:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 801118c:	687b      	ldr	r3, [r7, #4]
 801118e:	2200      	movs	r2, #0
 8011190:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8011194:	687b      	ldr	r3, [r7, #4]
 8011196:	8b5b      	ldrh	r3, [r3, #26]
 8011198:	f003 0302 	and.w	r3, r3, #2
 801119c:	2b00      	cmp	r3, #0
 801119e:	f000 814d 	beq.w	801143c <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 80111a2:	6878      	ldr	r0, [r7, #4]
 80111a4:	f000 fd6a 	bl	8011c7c <tcp_send_empty_ack>
 80111a8:	4603      	mov	r3, r0
 80111aa:	e152      	b.n	8011452 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 80111ac:	687b      	ldr	r3, [r7, #4]
 80111ae:	2200      	movs	r2, #0
 80111b0:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 80111b4:	687b      	ldr	r3, [r7, #4]
 80111b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80111b8:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 80111ba:	6a3b      	ldr	r3, [r7, #32]
 80111bc:	2b00      	cmp	r3, #0
 80111be:	f000 811c 	beq.w	80113fa <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 80111c2:	e002      	b.n	80111ca <tcp_output+0x156>
 80111c4:	6a3b      	ldr	r3, [r7, #32]
 80111c6:	681b      	ldr	r3, [r3, #0]
 80111c8:	623b      	str	r3, [r7, #32]
 80111ca:	6a3b      	ldr	r3, [r7, #32]
 80111cc:	681b      	ldr	r3, [r3, #0]
 80111ce:	2b00      	cmp	r3, #0
 80111d0:	d1f8      	bne.n	80111c4 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 80111d2:	e112      	b.n	80113fa <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 80111d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111d6:	68db      	ldr	r3, [r3, #12]
 80111d8:	899b      	ldrh	r3, [r3, #12]
 80111da:	b29b      	uxth	r3, r3
 80111dc:	4618      	mov	r0, r3
 80111de:	f7fa f82d 	bl	800b23c <lwip_htons>
 80111e2:	4603      	mov	r3, r0
 80111e4:	b2db      	uxtb	r3, r3
 80111e6:	f003 0304 	and.w	r3, r3, #4
 80111ea:	2b00      	cmp	r3, #0
 80111ec:	d006      	beq.n	80111fc <tcp_output+0x188>
 80111ee:	4b43      	ldr	r3, [pc, #268]	; (80112fc <tcp_output+0x288>)
 80111f0:	f240 5236 	movw	r2, #1334	; 0x536
 80111f4:	4946      	ldr	r1, [pc, #280]	; (8011310 <tcp_output+0x29c>)
 80111f6:	4843      	ldr	r0, [pc, #268]	; (8011304 <tcp_output+0x290>)
 80111f8:	f006 fb3a 	bl	8017870 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80111fc:	687b      	ldr	r3, [r7, #4]
 80111fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011200:	2b00      	cmp	r3, #0
 8011202:	d01f      	beq.n	8011244 <tcp_output+0x1d0>
 8011204:	687b      	ldr	r3, [r7, #4]
 8011206:	8b5b      	ldrh	r3, [r3, #26]
 8011208:	f003 0344 	and.w	r3, r3, #68	; 0x44
 801120c:	2b00      	cmp	r3, #0
 801120e:	d119      	bne.n	8011244 <tcp_output+0x1d0>
 8011210:	687b      	ldr	r3, [r7, #4]
 8011212:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011214:	2b00      	cmp	r3, #0
 8011216:	d00b      	beq.n	8011230 <tcp_output+0x1bc>
 8011218:	687b      	ldr	r3, [r7, #4]
 801121a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801121c:	681b      	ldr	r3, [r3, #0]
 801121e:	2b00      	cmp	r3, #0
 8011220:	d110      	bne.n	8011244 <tcp_output+0x1d0>
 8011222:	687b      	ldr	r3, [r7, #4]
 8011224:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011226:	891a      	ldrh	r2, [r3, #8]
 8011228:	687b      	ldr	r3, [r7, #4]
 801122a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801122c:	429a      	cmp	r2, r3
 801122e:	d209      	bcs.n	8011244 <tcp_output+0x1d0>
 8011230:	687b      	ldr	r3, [r7, #4]
 8011232:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8011236:	2b00      	cmp	r3, #0
 8011238:	d004      	beq.n	8011244 <tcp_output+0x1d0>
 801123a:	687b      	ldr	r3, [r7, #4]
 801123c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011240:	2b0f      	cmp	r3, #15
 8011242:	d901      	bls.n	8011248 <tcp_output+0x1d4>
 8011244:	2301      	movs	r3, #1
 8011246:	e000      	b.n	801124a <tcp_output+0x1d6>
 8011248:	2300      	movs	r3, #0
 801124a:	2b00      	cmp	r3, #0
 801124c:	d106      	bne.n	801125c <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 801124e:	687b      	ldr	r3, [r7, #4]
 8011250:	8b5b      	ldrh	r3, [r3, #26]
 8011252:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8011256:	2b00      	cmp	r3, #0
 8011258:	f000 80e4 	beq.w	8011424 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 801125c:	687b      	ldr	r3, [r7, #4]
 801125e:	7d1b      	ldrb	r3, [r3, #20]
 8011260:	2b02      	cmp	r3, #2
 8011262:	d00d      	beq.n	8011280 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8011264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011266:	68db      	ldr	r3, [r3, #12]
 8011268:	899b      	ldrh	r3, [r3, #12]
 801126a:	b29c      	uxth	r4, r3
 801126c:	2010      	movs	r0, #16
 801126e:	f7f9 ffe5 	bl	800b23c <lwip_htons>
 8011272:	4603      	mov	r3, r0
 8011274:	461a      	mov	r2, r3
 8011276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011278:	68db      	ldr	r3, [r3, #12]
 801127a:	4322      	orrs	r2, r4
 801127c:	b292      	uxth	r2, r2
 801127e:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8011280:	697a      	ldr	r2, [r7, #20]
 8011282:	6879      	ldr	r1, [r7, #4]
 8011284:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011286:	f000 f909 	bl	801149c <tcp_output_segment>
 801128a:	4603      	mov	r3, r0
 801128c:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 801128e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011292:	2b00      	cmp	r3, #0
 8011294:	d009      	beq.n	80112aa <tcp_output+0x236>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011296:	687b      	ldr	r3, [r7, #4]
 8011298:	8b5b      	ldrh	r3, [r3, #26]
 801129a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801129e:	b29a      	uxth	r2, r3
 80112a0:	687b      	ldr	r3, [r7, #4]
 80112a2:	835a      	strh	r2, [r3, #26]
      return err;
 80112a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80112a8:	e0d3      	b.n	8011452 <tcp_output+0x3de>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 80112aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112ac:	681a      	ldr	r2, [r3, #0]
 80112ae:	687b      	ldr	r3, [r7, #4]
 80112b0:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 80112b2:	687b      	ldr	r3, [r7, #4]
 80112b4:	7d1b      	ldrb	r3, [r3, #20]
 80112b6:	2b02      	cmp	r3, #2
 80112b8:	d006      	beq.n	80112c8 <tcp_output+0x254>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80112ba:	687b      	ldr	r3, [r7, #4]
 80112bc:	8b5b      	ldrh	r3, [r3, #26]
 80112be:	f023 0303 	bic.w	r3, r3, #3
 80112c2:	b29a      	uxth	r2, r3
 80112c4:	687b      	ldr	r3, [r7, #4]
 80112c6:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80112c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112ca:	68db      	ldr	r3, [r3, #12]
 80112cc:	685b      	ldr	r3, [r3, #4]
 80112ce:	4618      	mov	r0, r3
 80112d0:	f7f9 ffc9 	bl	800b266 <lwip_htonl>
 80112d4:	4604      	mov	r4, r0
 80112d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112d8:	891b      	ldrh	r3, [r3, #8]
 80112da:	461d      	mov	r5, r3
 80112dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112de:	68db      	ldr	r3, [r3, #12]
 80112e0:	899b      	ldrh	r3, [r3, #12]
 80112e2:	b29b      	uxth	r3, r3
 80112e4:	4618      	mov	r0, r3
 80112e6:	f7f9 ffa9 	bl	800b23c <lwip_htons>
 80112ea:	4603      	mov	r3, r0
 80112ec:	b2db      	uxtb	r3, r3
 80112ee:	f003 0303 	and.w	r3, r3, #3
 80112f2:	2b00      	cmp	r3, #0
 80112f4:	d00e      	beq.n	8011314 <tcp_output+0x2a0>
 80112f6:	2301      	movs	r3, #1
 80112f8:	e00d      	b.n	8011316 <tcp_output+0x2a2>
 80112fa:	bf00      	nop
 80112fc:	0801e2f4 	.word	0x0801e2f4
 8011300:	0801e838 	.word	0x0801e838
 8011304:	0801e348 	.word	0x0801e348
 8011308:	0801e850 	.word	0x0801e850
 801130c:	20006e50 	.word	0x20006e50
 8011310:	0801e878 	.word	0x0801e878
 8011314:	2300      	movs	r3, #0
 8011316:	442b      	add	r3, r5
 8011318:	4423      	add	r3, r4
 801131a:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801131c:	687b      	ldr	r3, [r7, #4]
 801131e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011320:	68bb      	ldr	r3, [r7, #8]
 8011322:	1ad3      	subs	r3, r2, r3
 8011324:	2b00      	cmp	r3, #0
 8011326:	da02      	bge.n	801132e <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8011328:	687b      	ldr	r3, [r7, #4]
 801132a:	68ba      	ldr	r2, [r7, #8]
 801132c:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 801132e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011330:	891b      	ldrh	r3, [r3, #8]
 8011332:	461c      	mov	r4, r3
 8011334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011336:	68db      	ldr	r3, [r3, #12]
 8011338:	899b      	ldrh	r3, [r3, #12]
 801133a:	b29b      	uxth	r3, r3
 801133c:	4618      	mov	r0, r3
 801133e:	f7f9 ff7d 	bl	800b23c <lwip_htons>
 8011342:	4603      	mov	r3, r0
 8011344:	b2db      	uxtb	r3, r3
 8011346:	f003 0303 	and.w	r3, r3, #3
 801134a:	2b00      	cmp	r3, #0
 801134c:	d001      	beq.n	8011352 <tcp_output+0x2de>
 801134e:	2301      	movs	r3, #1
 8011350:	e000      	b.n	8011354 <tcp_output+0x2e0>
 8011352:	2300      	movs	r3, #0
 8011354:	4423      	add	r3, r4
 8011356:	2b00      	cmp	r3, #0
 8011358:	d049      	beq.n	80113ee <tcp_output+0x37a>
      seg->next = NULL;
 801135a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801135c:	2200      	movs	r2, #0
 801135e:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8011360:	687b      	ldr	r3, [r7, #4]
 8011362:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011364:	2b00      	cmp	r3, #0
 8011366:	d105      	bne.n	8011374 <tcp_output+0x300>
        pcb->unacked = seg;
 8011368:	687b      	ldr	r3, [r7, #4]
 801136a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801136c:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 801136e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011370:	623b      	str	r3, [r7, #32]
 8011372:	e03f      	b.n	80113f4 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8011374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011376:	68db      	ldr	r3, [r3, #12]
 8011378:	685b      	ldr	r3, [r3, #4]
 801137a:	4618      	mov	r0, r3
 801137c:	f7f9 ff73 	bl	800b266 <lwip_htonl>
 8011380:	4604      	mov	r4, r0
 8011382:	6a3b      	ldr	r3, [r7, #32]
 8011384:	68db      	ldr	r3, [r3, #12]
 8011386:	685b      	ldr	r3, [r3, #4]
 8011388:	4618      	mov	r0, r3
 801138a:	f7f9 ff6c 	bl	800b266 <lwip_htonl>
 801138e:	4603      	mov	r3, r0
 8011390:	1ae3      	subs	r3, r4, r3
 8011392:	2b00      	cmp	r3, #0
 8011394:	da24      	bge.n	80113e0 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8011396:	687b      	ldr	r3, [r7, #4]
 8011398:	3370      	adds	r3, #112	; 0x70
 801139a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801139c:	e002      	b.n	80113a4 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 801139e:	69fb      	ldr	r3, [r7, #28]
 80113a0:	681b      	ldr	r3, [r3, #0]
 80113a2:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80113a4:	69fb      	ldr	r3, [r7, #28]
 80113a6:	681b      	ldr	r3, [r3, #0]
 80113a8:	2b00      	cmp	r3, #0
 80113aa:	d011      	beq.n	80113d0 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80113ac:	69fb      	ldr	r3, [r7, #28]
 80113ae:	681b      	ldr	r3, [r3, #0]
 80113b0:	68db      	ldr	r3, [r3, #12]
 80113b2:	685b      	ldr	r3, [r3, #4]
 80113b4:	4618      	mov	r0, r3
 80113b6:	f7f9 ff56 	bl	800b266 <lwip_htonl>
 80113ba:	4604      	mov	r4, r0
 80113bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113be:	68db      	ldr	r3, [r3, #12]
 80113c0:	685b      	ldr	r3, [r3, #4]
 80113c2:	4618      	mov	r0, r3
 80113c4:	f7f9 ff4f 	bl	800b266 <lwip_htonl>
 80113c8:	4603      	mov	r3, r0
 80113ca:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 80113cc:	2b00      	cmp	r3, #0
 80113ce:	dbe6      	blt.n	801139e <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 80113d0:	69fb      	ldr	r3, [r7, #28]
 80113d2:	681a      	ldr	r2, [r3, #0]
 80113d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113d6:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 80113d8:	69fb      	ldr	r3, [r7, #28]
 80113da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80113dc:	601a      	str	r2, [r3, #0]
 80113de:	e009      	b.n	80113f4 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 80113e0:	6a3b      	ldr	r3, [r7, #32]
 80113e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80113e4:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 80113e6:	6a3b      	ldr	r3, [r7, #32]
 80113e8:	681b      	ldr	r3, [r3, #0]
 80113ea:	623b      	str	r3, [r7, #32]
 80113ec:	e002      	b.n	80113f4 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 80113ee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80113f0:	f7fc fc43 	bl	800dc7a <tcp_seg_free>
    }
    seg = pcb->unsent;
 80113f4:	687b      	ldr	r3, [r7, #4]
 80113f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80113f8:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 80113fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113fc:	2b00      	cmp	r3, #0
 80113fe:	d012      	beq.n	8011426 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8011400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011402:	68db      	ldr	r3, [r3, #12]
 8011404:	685b      	ldr	r3, [r3, #4]
 8011406:	4618      	mov	r0, r3
 8011408:	f7f9 ff2d 	bl	800b266 <lwip_htonl>
 801140c:	4602      	mov	r2, r0
 801140e:	687b      	ldr	r3, [r7, #4]
 8011410:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011412:	1ad3      	subs	r3, r2, r3
 8011414:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011416:	8912      	ldrh	r2, [r2, #8]
 8011418:	4413      	add	r3, r2
  while (seg != NULL &&
 801141a:	69ba      	ldr	r2, [r7, #24]
 801141c:	429a      	cmp	r2, r3
 801141e:	f4bf aed9 	bcs.w	80111d4 <tcp_output+0x160>
 8011422:	e000      	b.n	8011426 <tcp_output+0x3b2>
      break;
 8011424:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8011426:	687b      	ldr	r3, [r7, #4]
 8011428:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801142a:	2b00      	cmp	r3, #0
 801142c:	d108      	bne.n	8011440 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801142e:	687b      	ldr	r3, [r7, #4]
 8011430:	2200      	movs	r2, #0
 8011432:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8011436:	e004      	b.n	8011442 <tcp_output+0x3ce>
    goto output_done;
 8011438:	bf00      	nop
 801143a:	e002      	b.n	8011442 <tcp_output+0x3ce>
    goto output_done;
 801143c:	bf00      	nop
 801143e:	e000      	b.n	8011442 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8011440:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8011442:	687b      	ldr	r3, [r7, #4]
 8011444:	8b5b      	ldrh	r3, [r3, #26]
 8011446:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801144a:	b29a      	uxth	r2, r3
 801144c:	687b      	ldr	r3, [r7, #4]
 801144e:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8011450:	2300      	movs	r3, #0
}
 8011452:	4618      	mov	r0, r3
 8011454:	3728      	adds	r7, #40	; 0x28
 8011456:	46bd      	mov	sp, r7
 8011458:	bdb0      	pop	{r4, r5, r7, pc}
 801145a:	bf00      	nop

0801145c <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 801145c:	b580      	push	{r7, lr}
 801145e:	b082      	sub	sp, #8
 8011460:	af00      	add	r7, sp, #0
 8011462:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8011464:	687b      	ldr	r3, [r7, #4]
 8011466:	2b00      	cmp	r3, #0
 8011468:	d106      	bne.n	8011478 <tcp_output_segment_busy+0x1c>
 801146a:	4b09      	ldr	r3, [pc, #36]	; (8011490 <tcp_output_segment_busy+0x34>)
 801146c:	f240 529a 	movw	r2, #1434	; 0x59a
 8011470:	4908      	ldr	r1, [pc, #32]	; (8011494 <tcp_output_segment_busy+0x38>)
 8011472:	4809      	ldr	r0, [pc, #36]	; (8011498 <tcp_output_segment_busy+0x3c>)
 8011474:	f006 f9fc 	bl	8017870 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8011478:	687b      	ldr	r3, [r7, #4]
 801147a:	685b      	ldr	r3, [r3, #4]
 801147c:	7b9b      	ldrb	r3, [r3, #14]
 801147e:	2b01      	cmp	r3, #1
 8011480:	d001      	beq.n	8011486 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8011482:	2301      	movs	r3, #1
 8011484:	e000      	b.n	8011488 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8011486:	2300      	movs	r3, #0
}
 8011488:	4618      	mov	r0, r3
 801148a:	3708      	adds	r7, #8
 801148c:	46bd      	mov	sp, r7
 801148e:	bd80      	pop	{r7, pc}
 8011490:	0801e2f4 	.word	0x0801e2f4
 8011494:	0801e890 	.word	0x0801e890
 8011498:	0801e348 	.word	0x0801e348

0801149c <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 801149c:	b5b0      	push	{r4, r5, r7, lr}
 801149e:	b08c      	sub	sp, #48	; 0x30
 80114a0:	af04      	add	r7, sp, #16
 80114a2:	60f8      	str	r0, [r7, #12]
 80114a4:	60b9      	str	r1, [r7, #8]
 80114a6:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 80114a8:	68fb      	ldr	r3, [r7, #12]
 80114aa:	2b00      	cmp	r3, #0
 80114ac:	d106      	bne.n	80114bc <tcp_output_segment+0x20>
 80114ae:	4b63      	ldr	r3, [pc, #396]	; (801163c <tcp_output_segment+0x1a0>)
 80114b0:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 80114b4:	4962      	ldr	r1, [pc, #392]	; (8011640 <tcp_output_segment+0x1a4>)
 80114b6:	4863      	ldr	r0, [pc, #396]	; (8011644 <tcp_output_segment+0x1a8>)
 80114b8:	f006 f9da 	bl	8017870 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 80114bc:	68bb      	ldr	r3, [r7, #8]
 80114be:	2b00      	cmp	r3, #0
 80114c0:	d106      	bne.n	80114d0 <tcp_output_segment+0x34>
 80114c2:	4b5e      	ldr	r3, [pc, #376]	; (801163c <tcp_output_segment+0x1a0>)
 80114c4:	f240 52b9 	movw	r2, #1465	; 0x5b9
 80114c8:	495f      	ldr	r1, [pc, #380]	; (8011648 <tcp_output_segment+0x1ac>)
 80114ca:	485e      	ldr	r0, [pc, #376]	; (8011644 <tcp_output_segment+0x1a8>)
 80114cc:	f006 f9d0 	bl	8017870 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 80114d0:	687b      	ldr	r3, [r7, #4]
 80114d2:	2b00      	cmp	r3, #0
 80114d4:	d106      	bne.n	80114e4 <tcp_output_segment+0x48>
 80114d6:	4b59      	ldr	r3, [pc, #356]	; (801163c <tcp_output_segment+0x1a0>)
 80114d8:	f240 52ba 	movw	r2, #1466	; 0x5ba
 80114dc:	495b      	ldr	r1, [pc, #364]	; (801164c <tcp_output_segment+0x1b0>)
 80114de:	4859      	ldr	r0, [pc, #356]	; (8011644 <tcp_output_segment+0x1a8>)
 80114e0:	f006 f9c6 	bl	8017870 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 80114e4:	68f8      	ldr	r0, [r7, #12]
 80114e6:	f7ff ffb9 	bl	801145c <tcp_output_segment_busy>
 80114ea:	4603      	mov	r3, r0
 80114ec:	2b00      	cmp	r3, #0
 80114ee:	d001      	beq.n	80114f4 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 80114f0:	2300      	movs	r3, #0
 80114f2:	e09f      	b.n	8011634 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 80114f4:	68bb      	ldr	r3, [r7, #8]
 80114f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80114f8:	68fb      	ldr	r3, [r7, #12]
 80114fa:	68dc      	ldr	r4, [r3, #12]
 80114fc:	4610      	mov	r0, r2
 80114fe:	f7f9 feb2 	bl	800b266 <lwip_htonl>
 8011502:	4603      	mov	r3, r0
 8011504:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8011506:	68bb      	ldr	r3, [r7, #8]
 8011508:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 801150a:	68fb      	ldr	r3, [r7, #12]
 801150c:	68dc      	ldr	r4, [r3, #12]
 801150e:	4610      	mov	r0, r2
 8011510:	f7f9 fe94 	bl	800b23c <lwip_htons>
 8011514:	4603      	mov	r3, r0
 8011516:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8011518:	68bb      	ldr	r3, [r7, #8]
 801151a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801151c:	68ba      	ldr	r2, [r7, #8]
 801151e:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8011520:	441a      	add	r2, r3
 8011522:	68bb      	ldr	r3, [r7, #8]
 8011524:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8011526:	68fb      	ldr	r3, [r7, #12]
 8011528:	68db      	ldr	r3, [r3, #12]
 801152a:	3314      	adds	r3, #20
 801152c:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 801152e:	68fb      	ldr	r3, [r7, #12]
 8011530:	7a9b      	ldrb	r3, [r3, #10]
 8011532:	f003 0301 	and.w	r3, r3, #1
 8011536:	2b00      	cmp	r3, #0
 8011538:	d015      	beq.n	8011566 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 801153a:	68bb      	ldr	r3, [r7, #8]
 801153c:	3304      	adds	r3, #4
 801153e:	461a      	mov	r2, r3
 8011540:	6879      	ldr	r1, [r7, #4]
 8011542:	f44f 70e6 	mov.w	r0, #460	; 0x1cc
 8011546:	f7fc fe8f 	bl	800e268 <tcp_eff_send_mss_netif>
 801154a:	4603      	mov	r3, r0
 801154c:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 801154e:	8b7b      	ldrh	r3, [r7, #26]
 8011550:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8011554:	4618      	mov	r0, r3
 8011556:	f7f9 fe86 	bl	800b266 <lwip_htonl>
 801155a:	4602      	mov	r2, r0
 801155c:	69fb      	ldr	r3, [r7, #28]
 801155e:	601a      	str	r2, [r3, #0]
    opts += 1;
 8011560:	69fb      	ldr	r3, [r7, #28]
 8011562:	3304      	adds	r3, #4
 8011564:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8011566:	68bb      	ldr	r3, [r7, #8]
 8011568:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801156c:	2b00      	cmp	r3, #0
 801156e:	da02      	bge.n	8011576 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8011570:	68bb      	ldr	r3, [r7, #8]
 8011572:	2200      	movs	r2, #0
 8011574:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8011576:	68bb      	ldr	r3, [r7, #8]
 8011578:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801157a:	2b00      	cmp	r3, #0
 801157c:	d10c      	bne.n	8011598 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 801157e:	4b34      	ldr	r3, [pc, #208]	; (8011650 <tcp_output_segment+0x1b4>)
 8011580:	681a      	ldr	r2, [r3, #0]
 8011582:	68bb      	ldr	r3, [r7, #8]
 8011584:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8011586:	68fb      	ldr	r3, [r7, #12]
 8011588:	68db      	ldr	r3, [r3, #12]
 801158a:	685b      	ldr	r3, [r3, #4]
 801158c:	4618      	mov	r0, r3
 801158e:	f7f9 fe6a 	bl	800b266 <lwip_htonl>
 8011592:	4602      	mov	r2, r0
 8011594:	68bb      	ldr	r3, [r7, #8]
 8011596:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8011598:	68fb      	ldr	r3, [r7, #12]
 801159a:	68da      	ldr	r2, [r3, #12]
 801159c:	68fb      	ldr	r3, [r7, #12]
 801159e:	685b      	ldr	r3, [r3, #4]
 80115a0:	685b      	ldr	r3, [r3, #4]
 80115a2:	1ad3      	subs	r3, r2, r3
 80115a4:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 80115a6:	68fb      	ldr	r3, [r7, #12]
 80115a8:	685b      	ldr	r3, [r3, #4]
 80115aa:	8959      	ldrh	r1, [r3, #10]
 80115ac:	68fb      	ldr	r3, [r7, #12]
 80115ae:	685b      	ldr	r3, [r3, #4]
 80115b0:	8b3a      	ldrh	r2, [r7, #24]
 80115b2:	1a8a      	subs	r2, r1, r2
 80115b4:	b292      	uxth	r2, r2
 80115b6:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 80115b8:	68fb      	ldr	r3, [r7, #12]
 80115ba:	685b      	ldr	r3, [r3, #4]
 80115bc:	8919      	ldrh	r1, [r3, #8]
 80115be:	68fb      	ldr	r3, [r7, #12]
 80115c0:	685b      	ldr	r3, [r3, #4]
 80115c2:	8b3a      	ldrh	r2, [r7, #24]
 80115c4:	1a8a      	subs	r2, r1, r2
 80115c6:	b292      	uxth	r2, r2
 80115c8:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 80115ca:	68fb      	ldr	r3, [r7, #12]
 80115cc:	685b      	ldr	r3, [r3, #4]
 80115ce:	68fa      	ldr	r2, [r7, #12]
 80115d0:	68d2      	ldr	r2, [r2, #12]
 80115d2:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 80115d4:	68fb      	ldr	r3, [r7, #12]
 80115d6:	68db      	ldr	r3, [r3, #12]
 80115d8:	2200      	movs	r2, #0
 80115da:	741a      	strb	r2, [r3, #16]
 80115dc:	2200      	movs	r2, #0
 80115de:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 80115e0:	68fb      	ldr	r3, [r7, #12]
 80115e2:	68db      	ldr	r3, [r3, #12]
 80115e4:	f103 0214 	add.w	r2, r3, #20
 80115e8:	68fb      	ldr	r3, [r7, #12]
 80115ea:	7a9b      	ldrb	r3, [r3, #10]
 80115ec:	009b      	lsls	r3, r3, #2
 80115ee:	f003 0304 	and.w	r3, r3, #4
 80115f2:	4413      	add	r3, r2
 80115f4:	69fa      	ldr	r2, [r7, #28]
 80115f6:	429a      	cmp	r2, r3
 80115f8:	d006      	beq.n	8011608 <tcp_output_segment+0x16c>
 80115fa:	4b10      	ldr	r3, [pc, #64]	; (801163c <tcp_output_segment+0x1a0>)
 80115fc:	f240 621c 	movw	r2, #1564	; 0x61c
 8011600:	4914      	ldr	r1, [pc, #80]	; (8011654 <tcp_output_segment+0x1b8>)
 8011602:	4810      	ldr	r0, [pc, #64]	; (8011644 <tcp_output_segment+0x1a8>)
 8011604:	f006 f934 	bl	8017870 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8011608:	68fb      	ldr	r3, [r7, #12]
 801160a:	6858      	ldr	r0, [r3, #4]
 801160c:	68b9      	ldr	r1, [r7, #8]
 801160e:	68bb      	ldr	r3, [r7, #8]
 8011610:	1d1c      	adds	r4, r3, #4
 8011612:	68bb      	ldr	r3, [r7, #8]
 8011614:	7add      	ldrb	r5, [r3, #11]
 8011616:	68bb      	ldr	r3, [r7, #8]
 8011618:	7a9b      	ldrb	r3, [r3, #10]
 801161a:	687a      	ldr	r2, [r7, #4]
 801161c:	9202      	str	r2, [sp, #8]
 801161e:	2206      	movs	r2, #6
 8011620:	9201      	str	r2, [sp, #4]
 8011622:	9300      	str	r3, [sp, #0]
 8011624:	462b      	mov	r3, r5
 8011626:	4622      	mov	r2, r4
 8011628:	f004 fb6c 	bl	8015d04 <ip4_output_if>
 801162c:	4603      	mov	r3, r0
 801162e:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8011630:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011634:	4618      	mov	r0, r3
 8011636:	3720      	adds	r7, #32
 8011638:	46bd      	mov	sp, r7
 801163a:	bdb0      	pop	{r4, r5, r7, pc}
 801163c:	0801e2f4 	.word	0x0801e2f4
 8011640:	0801e8b8 	.word	0x0801e8b8
 8011644:	0801e348 	.word	0x0801e348
 8011648:	0801e8d8 	.word	0x0801e8d8
 801164c:	0801e8f8 	.word	0x0801e8f8
 8011650:	20006e40 	.word	0x20006e40
 8011654:	0801e91c 	.word	0x0801e91c

08011658 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8011658:	b5b0      	push	{r4, r5, r7, lr}
 801165a:	b084      	sub	sp, #16
 801165c:	af00      	add	r7, sp, #0
 801165e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8011660:	687b      	ldr	r3, [r7, #4]
 8011662:	2b00      	cmp	r3, #0
 8011664:	d106      	bne.n	8011674 <tcp_rexmit_rto_prepare+0x1c>
 8011666:	4b31      	ldr	r3, [pc, #196]	; (801172c <tcp_rexmit_rto_prepare+0xd4>)
 8011668:	f240 6263 	movw	r2, #1635	; 0x663
 801166c:	4930      	ldr	r1, [pc, #192]	; (8011730 <tcp_rexmit_rto_prepare+0xd8>)
 801166e:	4831      	ldr	r0, [pc, #196]	; (8011734 <tcp_rexmit_rto_prepare+0xdc>)
 8011670:	f006 f8fe 	bl	8017870 <iprintf>

  if (pcb->unacked == NULL) {
 8011674:	687b      	ldr	r3, [r7, #4]
 8011676:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011678:	2b00      	cmp	r3, #0
 801167a:	d102      	bne.n	8011682 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 801167c:	f06f 0305 	mvn.w	r3, #5
 8011680:	e050      	b.n	8011724 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8011682:	687b      	ldr	r3, [r7, #4]
 8011684:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011686:	60fb      	str	r3, [r7, #12]
 8011688:	e00b      	b.n	80116a2 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 801168a:	68f8      	ldr	r0, [r7, #12]
 801168c:	f7ff fee6 	bl	801145c <tcp_output_segment_busy>
 8011690:	4603      	mov	r3, r0
 8011692:	2b00      	cmp	r3, #0
 8011694:	d002      	beq.n	801169c <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8011696:	f06f 0305 	mvn.w	r3, #5
 801169a:	e043      	b.n	8011724 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801169c:	68fb      	ldr	r3, [r7, #12]
 801169e:	681b      	ldr	r3, [r3, #0]
 80116a0:	60fb      	str	r3, [r7, #12]
 80116a2:	68fb      	ldr	r3, [r7, #12]
 80116a4:	681b      	ldr	r3, [r3, #0]
 80116a6:	2b00      	cmp	r3, #0
 80116a8:	d1ef      	bne.n	801168a <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 80116aa:	68f8      	ldr	r0, [r7, #12]
 80116ac:	f7ff fed6 	bl	801145c <tcp_output_segment_busy>
 80116b0:	4603      	mov	r3, r0
 80116b2:	2b00      	cmp	r3, #0
 80116b4:	d002      	beq.n	80116bc <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 80116b6:	f06f 0305 	mvn.w	r3, #5
 80116ba:	e033      	b.n	8011724 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 80116bc:	687b      	ldr	r3, [r7, #4]
 80116be:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80116c0:	68fb      	ldr	r3, [r7, #12]
 80116c2:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 80116c4:	687b      	ldr	r3, [r7, #4]
 80116c6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80116c8:	687b      	ldr	r3, [r7, #4]
 80116ca:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 80116cc:	687b      	ldr	r3, [r7, #4]
 80116ce:	2200      	movs	r2, #0
 80116d0:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 80116d2:	687b      	ldr	r3, [r7, #4]
 80116d4:	8b5b      	ldrh	r3, [r3, #26]
 80116d6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80116da:	b29a      	uxth	r2, r3
 80116dc:	687b      	ldr	r3, [r7, #4]
 80116de:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80116e0:	68fb      	ldr	r3, [r7, #12]
 80116e2:	68db      	ldr	r3, [r3, #12]
 80116e4:	685b      	ldr	r3, [r3, #4]
 80116e6:	4618      	mov	r0, r3
 80116e8:	f7f9 fdbd 	bl	800b266 <lwip_htonl>
 80116ec:	4604      	mov	r4, r0
 80116ee:	68fb      	ldr	r3, [r7, #12]
 80116f0:	891b      	ldrh	r3, [r3, #8]
 80116f2:	461d      	mov	r5, r3
 80116f4:	68fb      	ldr	r3, [r7, #12]
 80116f6:	68db      	ldr	r3, [r3, #12]
 80116f8:	899b      	ldrh	r3, [r3, #12]
 80116fa:	b29b      	uxth	r3, r3
 80116fc:	4618      	mov	r0, r3
 80116fe:	f7f9 fd9d 	bl	800b23c <lwip_htons>
 8011702:	4603      	mov	r3, r0
 8011704:	b2db      	uxtb	r3, r3
 8011706:	f003 0303 	and.w	r3, r3, #3
 801170a:	2b00      	cmp	r3, #0
 801170c:	d001      	beq.n	8011712 <tcp_rexmit_rto_prepare+0xba>
 801170e:	2301      	movs	r3, #1
 8011710:	e000      	b.n	8011714 <tcp_rexmit_rto_prepare+0xbc>
 8011712:	2300      	movs	r3, #0
 8011714:	442b      	add	r3, r5
 8011716:	18e2      	adds	r2, r4, r3
 8011718:	687b      	ldr	r3, [r7, #4]
 801171a:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 801171c:	687b      	ldr	r3, [r7, #4]
 801171e:	2200      	movs	r2, #0
 8011720:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 8011722:	2300      	movs	r3, #0
}
 8011724:	4618      	mov	r0, r3
 8011726:	3710      	adds	r7, #16
 8011728:	46bd      	mov	sp, r7
 801172a:	bdb0      	pop	{r4, r5, r7, pc}
 801172c:	0801e2f4 	.word	0x0801e2f4
 8011730:	0801e930 	.word	0x0801e930
 8011734:	0801e348 	.word	0x0801e348

08011738 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8011738:	b580      	push	{r7, lr}
 801173a:	b082      	sub	sp, #8
 801173c:	af00      	add	r7, sp, #0
 801173e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8011740:	687b      	ldr	r3, [r7, #4]
 8011742:	2b00      	cmp	r3, #0
 8011744:	d106      	bne.n	8011754 <tcp_rexmit_rto_commit+0x1c>
 8011746:	4b0d      	ldr	r3, [pc, #52]	; (801177c <tcp_rexmit_rto_commit+0x44>)
 8011748:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 801174c:	490c      	ldr	r1, [pc, #48]	; (8011780 <tcp_rexmit_rto_commit+0x48>)
 801174e:	480d      	ldr	r0, [pc, #52]	; (8011784 <tcp_rexmit_rto_commit+0x4c>)
 8011750:	f006 f88e 	bl	8017870 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8011754:	687b      	ldr	r3, [r7, #4]
 8011756:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801175a:	2bff      	cmp	r3, #255	; 0xff
 801175c:	d007      	beq.n	801176e <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 801175e:	687b      	ldr	r3, [r7, #4]
 8011760:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011764:	3301      	adds	r3, #1
 8011766:	b2da      	uxtb	r2, r3
 8011768:	687b      	ldr	r3, [r7, #4]
 801176a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 801176e:	6878      	ldr	r0, [r7, #4]
 8011770:	f7ff fc80 	bl	8011074 <tcp_output>
}
 8011774:	bf00      	nop
 8011776:	3708      	adds	r7, #8
 8011778:	46bd      	mov	sp, r7
 801177a:	bd80      	pop	{r7, pc}
 801177c:	0801e2f4 	.word	0x0801e2f4
 8011780:	0801e954 	.word	0x0801e954
 8011784:	0801e348 	.word	0x0801e348

08011788 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8011788:	b580      	push	{r7, lr}
 801178a:	b082      	sub	sp, #8
 801178c:	af00      	add	r7, sp, #0
 801178e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8011790:	687b      	ldr	r3, [r7, #4]
 8011792:	2b00      	cmp	r3, #0
 8011794:	d106      	bne.n	80117a4 <tcp_rexmit_rto+0x1c>
 8011796:	4b0a      	ldr	r3, [pc, #40]	; (80117c0 <tcp_rexmit_rto+0x38>)
 8011798:	f240 62ad 	movw	r2, #1709	; 0x6ad
 801179c:	4909      	ldr	r1, [pc, #36]	; (80117c4 <tcp_rexmit_rto+0x3c>)
 801179e:	480a      	ldr	r0, [pc, #40]	; (80117c8 <tcp_rexmit_rto+0x40>)
 80117a0:	f006 f866 	bl	8017870 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 80117a4:	6878      	ldr	r0, [r7, #4]
 80117a6:	f7ff ff57 	bl	8011658 <tcp_rexmit_rto_prepare>
 80117aa:	4603      	mov	r3, r0
 80117ac:	2b00      	cmp	r3, #0
 80117ae:	d102      	bne.n	80117b6 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 80117b0:	6878      	ldr	r0, [r7, #4]
 80117b2:	f7ff ffc1 	bl	8011738 <tcp_rexmit_rto_commit>
  }
}
 80117b6:	bf00      	nop
 80117b8:	3708      	adds	r7, #8
 80117ba:	46bd      	mov	sp, r7
 80117bc:	bd80      	pop	{r7, pc}
 80117be:	bf00      	nop
 80117c0:	0801e2f4 	.word	0x0801e2f4
 80117c4:	0801e978 	.word	0x0801e978
 80117c8:	0801e348 	.word	0x0801e348

080117cc <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 80117cc:	b590      	push	{r4, r7, lr}
 80117ce:	b085      	sub	sp, #20
 80117d0:	af00      	add	r7, sp, #0
 80117d2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 80117d4:	687b      	ldr	r3, [r7, #4]
 80117d6:	2b00      	cmp	r3, #0
 80117d8:	d106      	bne.n	80117e8 <tcp_rexmit+0x1c>
 80117da:	4b2f      	ldr	r3, [pc, #188]	; (8011898 <tcp_rexmit+0xcc>)
 80117dc:	f240 62c1 	movw	r2, #1729	; 0x6c1
 80117e0:	492e      	ldr	r1, [pc, #184]	; (801189c <tcp_rexmit+0xd0>)
 80117e2:	482f      	ldr	r0, [pc, #188]	; (80118a0 <tcp_rexmit+0xd4>)
 80117e4:	f006 f844 	bl	8017870 <iprintf>

  if (pcb->unacked == NULL) {
 80117e8:	687b      	ldr	r3, [r7, #4]
 80117ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80117ec:	2b00      	cmp	r3, #0
 80117ee:	d102      	bne.n	80117f6 <tcp_rexmit+0x2a>
    return ERR_VAL;
 80117f0:	f06f 0305 	mvn.w	r3, #5
 80117f4:	e04c      	b.n	8011890 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 80117f6:	687b      	ldr	r3, [r7, #4]
 80117f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80117fa:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 80117fc:	68b8      	ldr	r0, [r7, #8]
 80117fe:	f7ff fe2d 	bl	801145c <tcp_output_segment_busy>
 8011802:	4603      	mov	r3, r0
 8011804:	2b00      	cmp	r3, #0
 8011806:	d002      	beq.n	801180e <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8011808:	f06f 0305 	mvn.w	r3, #5
 801180c:	e040      	b.n	8011890 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 801180e:	68bb      	ldr	r3, [r7, #8]
 8011810:	681a      	ldr	r2, [r3, #0]
 8011812:	687b      	ldr	r3, [r7, #4]
 8011814:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 8011816:	687b      	ldr	r3, [r7, #4]
 8011818:	336c      	adds	r3, #108	; 0x6c
 801181a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801181c:	e002      	b.n	8011824 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 801181e:	68fb      	ldr	r3, [r7, #12]
 8011820:	681b      	ldr	r3, [r3, #0]
 8011822:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8011824:	68fb      	ldr	r3, [r7, #12]
 8011826:	681b      	ldr	r3, [r3, #0]
 8011828:	2b00      	cmp	r3, #0
 801182a:	d011      	beq.n	8011850 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801182c:	68fb      	ldr	r3, [r7, #12]
 801182e:	681b      	ldr	r3, [r3, #0]
 8011830:	68db      	ldr	r3, [r3, #12]
 8011832:	685b      	ldr	r3, [r3, #4]
 8011834:	4618      	mov	r0, r3
 8011836:	f7f9 fd16 	bl	800b266 <lwip_htonl>
 801183a:	4604      	mov	r4, r0
 801183c:	68bb      	ldr	r3, [r7, #8]
 801183e:	68db      	ldr	r3, [r3, #12]
 8011840:	685b      	ldr	r3, [r3, #4]
 8011842:	4618      	mov	r0, r3
 8011844:	f7f9 fd0f 	bl	800b266 <lwip_htonl>
 8011848:	4603      	mov	r3, r0
 801184a:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 801184c:	2b00      	cmp	r3, #0
 801184e:	dbe6      	blt.n	801181e <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8011850:	68fb      	ldr	r3, [r7, #12]
 8011852:	681a      	ldr	r2, [r3, #0]
 8011854:	68bb      	ldr	r3, [r7, #8]
 8011856:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8011858:	68fb      	ldr	r3, [r7, #12]
 801185a:	68ba      	ldr	r2, [r7, #8]
 801185c:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 801185e:	68bb      	ldr	r3, [r7, #8]
 8011860:	681b      	ldr	r3, [r3, #0]
 8011862:	2b00      	cmp	r3, #0
 8011864:	d103      	bne.n	801186e <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8011866:	687b      	ldr	r3, [r7, #4]
 8011868:	2200      	movs	r2, #0
 801186a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 801186e:	687b      	ldr	r3, [r7, #4]
 8011870:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011874:	2bff      	cmp	r3, #255	; 0xff
 8011876:	d007      	beq.n	8011888 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8011878:	687b      	ldr	r3, [r7, #4]
 801187a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801187e:	3301      	adds	r3, #1
 8011880:	b2da      	uxtb	r2, r3
 8011882:	687b      	ldr	r3, [r7, #4]
 8011884:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8011888:	687b      	ldr	r3, [r7, #4]
 801188a:	2200      	movs	r2, #0
 801188c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 801188e:	2300      	movs	r3, #0
}
 8011890:	4618      	mov	r0, r3
 8011892:	3714      	adds	r7, #20
 8011894:	46bd      	mov	sp, r7
 8011896:	bd90      	pop	{r4, r7, pc}
 8011898:	0801e2f4 	.word	0x0801e2f4
 801189c:	0801e994 	.word	0x0801e994
 80118a0:	0801e348 	.word	0x0801e348

080118a4 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 80118a4:	b580      	push	{r7, lr}
 80118a6:	b082      	sub	sp, #8
 80118a8:	af00      	add	r7, sp, #0
 80118aa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 80118ac:	687b      	ldr	r3, [r7, #4]
 80118ae:	2b00      	cmp	r3, #0
 80118b0:	d106      	bne.n	80118c0 <tcp_rexmit_fast+0x1c>
 80118b2:	4b2a      	ldr	r3, [pc, #168]	; (801195c <tcp_rexmit_fast+0xb8>)
 80118b4:	f240 62f9 	movw	r2, #1785	; 0x6f9
 80118b8:	4929      	ldr	r1, [pc, #164]	; (8011960 <tcp_rexmit_fast+0xbc>)
 80118ba:	482a      	ldr	r0, [pc, #168]	; (8011964 <tcp_rexmit_fast+0xc0>)
 80118bc:	f005 ffd8 	bl	8017870 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 80118c0:	687b      	ldr	r3, [r7, #4]
 80118c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80118c4:	2b00      	cmp	r3, #0
 80118c6:	d044      	beq.n	8011952 <tcp_rexmit_fast+0xae>
 80118c8:	687b      	ldr	r3, [r7, #4]
 80118ca:	8b5b      	ldrh	r3, [r3, #26]
 80118cc:	f003 0304 	and.w	r3, r3, #4
 80118d0:	2b00      	cmp	r3, #0
 80118d2:	d13e      	bne.n	8011952 <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 80118d4:	6878      	ldr	r0, [r7, #4]
 80118d6:	f7ff ff79 	bl	80117cc <tcp_rexmit>
 80118da:	4603      	mov	r3, r0
 80118dc:	2b00      	cmp	r3, #0
 80118de:	d138      	bne.n	8011952 <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 80118e0:	687b      	ldr	r3, [r7, #4]
 80118e2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80118e6:	687b      	ldr	r3, [r7, #4]
 80118e8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80118ec:	4293      	cmp	r3, r2
 80118ee:	bf28      	it	cs
 80118f0:	4613      	movcs	r3, r2
 80118f2:	b29b      	uxth	r3, r3
 80118f4:	0fda      	lsrs	r2, r3, #31
 80118f6:	4413      	add	r3, r2
 80118f8:	105b      	asrs	r3, r3, #1
 80118fa:	b29a      	uxth	r2, r3
 80118fc:	687b      	ldr	r3, [r7, #4]
 80118fe:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8011902:	687b      	ldr	r3, [r7, #4]
 8011904:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8011908:	461a      	mov	r2, r3
 801190a:	687b      	ldr	r3, [r7, #4]
 801190c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801190e:	005b      	lsls	r3, r3, #1
 8011910:	429a      	cmp	r2, r3
 8011912:	d206      	bcs.n	8011922 <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8011914:	687b      	ldr	r3, [r7, #4]
 8011916:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011918:	005b      	lsls	r3, r3, #1
 801191a:	b29a      	uxth	r2, r3
 801191c:	687b      	ldr	r3, [r7, #4]
 801191e:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8011922:	687b      	ldr	r3, [r7, #4]
 8011924:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8011928:	687b      	ldr	r3, [r7, #4]
 801192a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801192c:	4619      	mov	r1, r3
 801192e:	0049      	lsls	r1, r1, #1
 8011930:	440b      	add	r3, r1
 8011932:	b29b      	uxth	r3, r3
 8011934:	4413      	add	r3, r2
 8011936:	b29a      	uxth	r2, r3
 8011938:	687b      	ldr	r3, [r7, #4]
 801193a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 801193e:	687b      	ldr	r3, [r7, #4]
 8011940:	8b5b      	ldrh	r3, [r3, #26]
 8011942:	f043 0304 	orr.w	r3, r3, #4
 8011946:	b29a      	uxth	r2, r3
 8011948:	687b      	ldr	r3, [r7, #4]
 801194a:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 801194c:	687b      	ldr	r3, [r7, #4]
 801194e:	2200      	movs	r2, #0
 8011950:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8011952:	bf00      	nop
 8011954:	3708      	adds	r7, #8
 8011956:	46bd      	mov	sp, r7
 8011958:	bd80      	pop	{r7, pc}
 801195a:	bf00      	nop
 801195c:	0801e2f4 	.word	0x0801e2f4
 8011960:	0801e9ac 	.word	0x0801e9ac
 8011964:	0801e348 	.word	0x0801e348

08011968 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8011968:	b580      	push	{r7, lr}
 801196a:	b086      	sub	sp, #24
 801196c:	af00      	add	r7, sp, #0
 801196e:	60f8      	str	r0, [r7, #12]
 8011970:	607b      	str	r3, [r7, #4]
 8011972:	460b      	mov	r3, r1
 8011974:	817b      	strh	r3, [r7, #10]
 8011976:	4613      	mov	r3, r2
 8011978:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801197a:	897a      	ldrh	r2, [r7, #10]
 801197c:	893b      	ldrh	r3, [r7, #8]
 801197e:	4413      	add	r3, r2
 8011980:	b29b      	uxth	r3, r3
 8011982:	3314      	adds	r3, #20
 8011984:	b29b      	uxth	r3, r3
 8011986:	f44f 7220 	mov.w	r2, #640	; 0x280
 801198a:	4619      	mov	r1, r3
 801198c:	2022      	movs	r0, #34	; 0x22
 801198e:	f7fa fc0d 	bl	800c1ac <pbuf_alloc>
 8011992:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8011994:	697b      	ldr	r3, [r7, #20]
 8011996:	2b00      	cmp	r3, #0
 8011998:	d04d      	beq.n	8011a36 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801199a:	897b      	ldrh	r3, [r7, #10]
 801199c:	3313      	adds	r3, #19
 801199e:	697a      	ldr	r2, [r7, #20]
 80119a0:	8952      	ldrh	r2, [r2, #10]
 80119a2:	4293      	cmp	r3, r2
 80119a4:	db06      	blt.n	80119b4 <tcp_output_alloc_header_common+0x4c>
 80119a6:	4b26      	ldr	r3, [pc, #152]	; (8011a40 <tcp_output_alloc_header_common+0xd8>)
 80119a8:	f240 7223 	movw	r2, #1827	; 0x723
 80119ac:	4925      	ldr	r1, [pc, #148]	; (8011a44 <tcp_output_alloc_header_common+0xdc>)
 80119ae:	4826      	ldr	r0, [pc, #152]	; (8011a48 <tcp_output_alloc_header_common+0xe0>)
 80119b0:	f005 ff5e 	bl	8017870 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 80119b4:	697b      	ldr	r3, [r7, #20]
 80119b6:	685b      	ldr	r3, [r3, #4]
 80119b8:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 80119ba:	8c3b      	ldrh	r3, [r7, #32]
 80119bc:	4618      	mov	r0, r3
 80119be:	f7f9 fc3d 	bl	800b23c <lwip_htons>
 80119c2:	4603      	mov	r3, r0
 80119c4:	461a      	mov	r2, r3
 80119c6:	693b      	ldr	r3, [r7, #16]
 80119c8:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 80119ca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80119cc:	4618      	mov	r0, r3
 80119ce:	f7f9 fc35 	bl	800b23c <lwip_htons>
 80119d2:	4603      	mov	r3, r0
 80119d4:	461a      	mov	r2, r3
 80119d6:	693b      	ldr	r3, [r7, #16]
 80119d8:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 80119da:	693b      	ldr	r3, [r7, #16]
 80119dc:	687a      	ldr	r2, [r7, #4]
 80119de:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 80119e0:	68f8      	ldr	r0, [r7, #12]
 80119e2:	f7f9 fc40 	bl	800b266 <lwip_htonl>
 80119e6:	4602      	mov	r2, r0
 80119e8:	693b      	ldr	r3, [r7, #16]
 80119ea:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 80119ec:	897b      	ldrh	r3, [r7, #10]
 80119ee:	089b      	lsrs	r3, r3, #2
 80119f0:	b29b      	uxth	r3, r3
 80119f2:	3305      	adds	r3, #5
 80119f4:	b29b      	uxth	r3, r3
 80119f6:	031b      	lsls	r3, r3, #12
 80119f8:	b29a      	uxth	r2, r3
 80119fa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80119fe:	b29b      	uxth	r3, r3
 8011a00:	4313      	orrs	r3, r2
 8011a02:	b29b      	uxth	r3, r3
 8011a04:	4618      	mov	r0, r3
 8011a06:	f7f9 fc19 	bl	800b23c <lwip_htons>
 8011a0a:	4603      	mov	r3, r0
 8011a0c:	461a      	mov	r2, r3
 8011a0e:	693b      	ldr	r3, [r7, #16]
 8011a10:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8011a12:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8011a14:	4618      	mov	r0, r3
 8011a16:	f7f9 fc11 	bl	800b23c <lwip_htons>
 8011a1a:	4603      	mov	r3, r0
 8011a1c:	461a      	mov	r2, r3
 8011a1e:	693b      	ldr	r3, [r7, #16]
 8011a20:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8011a22:	693b      	ldr	r3, [r7, #16]
 8011a24:	2200      	movs	r2, #0
 8011a26:	741a      	strb	r2, [r3, #16]
 8011a28:	2200      	movs	r2, #0
 8011a2a:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8011a2c:	693b      	ldr	r3, [r7, #16]
 8011a2e:	2200      	movs	r2, #0
 8011a30:	749a      	strb	r2, [r3, #18]
 8011a32:	2200      	movs	r2, #0
 8011a34:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8011a36:	697b      	ldr	r3, [r7, #20]
}
 8011a38:	4618      	mov	r0, r3
 8011a3a:	3718      	adds	r7, #24
 8011a3c:	46bd      	mov	sp, r7
 8011a3e:	bd80      	pop	{r7, pc}
 8011a40:	0801e2f4 	.word	0x0801e2f4
 8011a44:	0801e9cc 	.word	0x0801e9cc
 8011a48:	0801e348 	.word	0x0801e348

08011a4c <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8011a4c:	b5b0      	push	{r4, r5, r7, lr}
 8011a4e:	b08a      	sub	sp, #40	; 0x28
 8011a50:	af04      	add	r7, sp, #16
 8011a52:	60f8      	str	r0, [r7, #12]
 8011a54:	607b      	str	r3, [r7, #4]
 8011a56:	460b      	mov	r3, r1
 8011a58:	817b      	strh	r3, [r7, #10]
 8011a5a:	4613      	mov	r3, r2
 8011a5c:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8011a5e:	68fb      	ldr	r3, [r7, #12]
 8011a60:	2b00      	cmp	r3, #0
 8011a62:	d106      	bne.n	8011a72 <tcp_output_alloc_header+0x26>
 8011a64:	4b15      	ldr	r3, [pc, #84]	; (8011abc <tcp_output_alloc_header+0x70>)
 8011a66:	f240 7242 	movw	r2, #1858	; 0x742
 8011a6a:	4915      	ldr	r1, [pc, #84]	; (8011ac0 <tcp_output_alloc_header+0x74>)
 8011a6c:	4815      	ldr	r0, [pc, #84]	; (8011ac4 <tcp_output_alloc_header+0x78>)
 8011a6e:	f005 feff 	bl	8017870 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8011a72:	68fb      	ldr	r3, [r7, #12]
 8011a74:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8011a76:	68fb      	ldr	r3, [r7, #12]
 8011a78:	8adb      	ldrh	r3, [r3, #22]
 8011a7a:	68fa      	ldr	r2, [r7, #12]
 8011a7c:	8b12      	ldrh	r2, [r2, #24]
 8011a7e:	68f9      	ldr	r1, [r7, #12]
 8011a80:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 8011a82:	893d      	ldrh	r5, [r7, #8]
 8011a84:	897c      	ldrh	r4, [r7, #10]
 8011a86:	9103      	str	r1, [sp, #12]
 8011a88:	2110      	movs	r1, #16
 8011a8a:	9102      	str	r1, [sp, #8]
 8011a8c:	9201      	str	r2, [sp, #4]
 8011a8e:	9300      	str	r3, [sp, #0]
 8011a90:	687b      	ldr	r3, [r7, #4]
 8011a92:	462a      	mov	r2, r5
 8011a94:	4621      	mov	r1, r4
 8011a96:	f7ff ff67 	bl	8011968 <tcp_output_alloc_header_common>
 8011a9a:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8011a9c:	697b      	ldr	r3, [r7, #20]
 8011a9e:	2b00      	cmp	r3, #0
 8011aa0:	d006      	beq.n	8011ab0 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8011aa2:	68fb      	ldr	r3, [r7, #12]
 8011aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011aa6:	68fa      	ldr	r2, [r7, #12]
 8011aa8:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8011aaa:	441a      	add	r2, r3
 8011aac:	68fb      	ldr	r3, [r7, #12]
 8011aae:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8011ab0:	697b      	ldr	r3, [r7, #20]
}
 8011ab2:	4618      	mov	r0, r3
 8011ab4:	3718      	adds	r7, #24
 8011ab6:	46bd      	mov	sp, r7
 8011ab8:	bdb0      	pop	{r4, r5, r7, pc}
 8011aba:	bf00      	nop
 8011abc:	0801e2f4 	.word	0x0801e2f4
 8011ac0:	0801e9fc 	.word	0x0801e9fc
 8011ac4:	0801e348 	.word	0x0801e348

08011ac8 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8011ac8:	b580      	push	{r7, lr}
 8011aca:	b088      	sub	sp, #32
 8011acc:	af00      	add	r7, sp, #0
 8011ace:	60f8      	str	r0, [r7, #12]
 8011ad0:	60b9      	str	r1, [r7, #8]
 8011ad2:	4611      	mov	r1, r2
 8011ad4:	461a      	mov	r2, r3
 8011ad6:	460b      	mov	r3, r1
 8011ad8:	71fb      	strb	r3, [r7, #7]
 8011ada:	4613      	mov	r3, r2
 8011adc:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8011ade:	2300      	movs	r3, #0
 8011ae0:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8011ae2:	68bb      	ldr	r3, [r7, #8]
 8011ae4:	2b00      	cmp	r3, #0
 8011ae6:	d106      	bne.n	8011af6 <tcp_output_fill_options+0x2e>
 8011ae8:	4b13      	ldr	r3, [pc, #76]	; (8011b38 <tcp_output_fill_options+0x70>)
 8011aea:	f240 7256 	movw	r2, #1878	; 0x756
 8011aee:	4913      	ldr	r1, [pc, #76]	; (8011b3c <tcp_output_fill_options+0x74>)
 8011af0:	4813      	ldr	r0, [pc, #76]	; (8011b40 <tcp_output_fill_options+0x78>)
 8011af2:	f005 febd 	bl	8017870 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8011af6:	68bb      	ldr	r3, [r7, #8]
 8011af8:	685b      	ldr	r3, [r3, #4]
 8011afa:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8011afc:	69bb      	ldr	r3, [r7, #24]
 8011afe:	3314      	adds	r3, #20
 8011b00:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8011b02:	69bb      	ldr	r3, [r7, #24]
 8011b04:	f103 0214 	add.w	r2, r3, #20
 8011b08:	8bfb      	ldrh	r3, [r7, #30]
 8011b0a:	009b      	lsls	r3, r3, #2
 8011b0c:	4619      	mov	r1, r3
 8011b0e:	79fb      	ldrb	r3, [r7, #7]
 8011b10:	009b      	lsls	r3, r3, #2
 8011b12:	f003 0304 	and.w	r3, r3, #4
 8011b16:	440b      	add	r3, r1
 8011b18:	4413      	add	r3, r2
 8011b1a:	697a      	ldr	r2, [r7, #20]
 8011b1c:	429a      	cmp	r2, r3
 8011b1e:	d006      	beq.n	8011b2e <tcp_output_fill_options+0x66>
 8011b20:	4b05      	ldr	r3, [pc, #20]	; (8011b38 <tcp_output_fill_options+0x70>)
 8011b22:	f240 7275 	movw	r2, #1909	; 0x775
 8011b26:	4907      	ldr	r1, [pc, #28]	; (8011b44 <tcp_output_fill_options+0x7c>)
 8011b28:	4805      	ldr	r0, [pc, #20]	; (8011b40 <tcp_output_fill_options+0x78>)
 8011b2a:	f005 fea1 	bl	8017870 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8011b2e:	bf00      	nop
 8011b30:	3720      	adds	r7, #32
 8011b32:	46bd      	mov	sp, r7
 8011b34:	bd80      	pop	{r7, pc}
 8011b36:	bf00      	nop
 8011b38:	0801e2f4 	.word	0x0801e2f4
 8011b3c:	0801ea24 	.word	0x0801ea24
 8011b40:	0801e348 	.word	0x0801e348
 8011b44:	0801e91c 	.word	0x0801e91c

08011b48 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8011b48:	b580      	push	{r7, lr}
 8011b4a:	b08a      	sub	sp, #40	; 0x28
 8011b4c:	af04      	add	r7, sp, #16
 8011b4e:	60f8      	str	r0, [r7, #12]
 8011b50:	60b9      	str	r1, [r7, #8]
 8011b52:	607a      	str	r2, [r7, #4]
 8011b54:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8011b56:	68bb      	ldr	r3, [r7, #8]
 8011b58:	2b00      	cmp	r3, #0
 8011b5a:	d106      	bne.n	8011b6a <tcp_output_control_segment+0x22>
 8011b5c:	4b1c      	ldr	r3, [pc, #112]	; (8011bd0 <tcp_output_control_segment+0x88>)
 8011b5e:	f240 7287 	movw	r2, #1927	; 0x787
 8011b62:	491c      	ldr	r1, [pc, #112]	; (8011bd4 <tcp_output_control_segment+0x8c>)
 8011b64:	481c      	ldr	r0, [pc, #112]	; (8011bd8 <tcp_output_control_segment+0x90>)
 8011b66:	f005 fe83 	bl	8017870 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8011b6a:	683a      	ldr	r2, [r7, #0]
 8011b6c:	6879      	ldr	r1, [r7, #4]
 8011b6e:	68f8      	ldr	r0, [r7, #12]
 8011b70:	f7fe ff40 	bl	80109f4 <tcp_route>
 8011b74:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8011b76:	693b      	ldr	r3, [r7, #16]
 8011b78:	2b00      	cmp	r3, #0
 8011b7a:	d102      	bne.n	8011b82 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8011b7c:	23fc      	movs	r3, #252	; 0xfc
 8011b7e:	75fb      	strb	r3, [r7, #23]
 8011b80:	e01c      	b.n	8011bbc <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8011b82:	68fb      	ldr	r3, [r7, #12]
 8011b84:	2b00      	cmp	r3, #0
 8011b86:	d006      	beq.n	8011b96 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8011b88:	68fb      	ldr	r3, [r7, #12]
 8011b8a:	7adb      	ldrb	r3, [r3, #11]
 8011b8c:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8011b8e:	68fb      	ldr	r3, [r7, #12]
 8011b90:	7a9b      	ldrb	r3, [r3, #10]
 8011b92:	757b      	strb	r3, [r7, #21]
 8011b94:	e003      	b.n	8011b9e <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8011b96:	23ff      	movs	r3, #255	; 0xff
 8011b98:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8011b9a:	2300      	movs	r3, #0
 8011b9c:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8011b9e:	7dba      	ldrb	r2, [r7, #22]
 8011ba0:	693b      	ldr	r3, [r7, #16]
 8011ba2:	9302      	str	r3, [sp, #8]
 8011ba4:	2306      	movs	r3, #6
 8011ba6:	9301      	str	r3, [sp, #4]
 8011ba8:	7d7b      	ldrb	r3, [r7, #21]
 8011baa:	9300      	str	r3, [sp, #0]
 8011bac:	4613      	mov	r3, r2
 8011bae:	683a      	ldr	r2, [r7, #0]
 8011bb0:	6879      	ldr	r1, [r7, #4]
 8011bb2:	68b8      	ldr	r0, [r7, #8]
 8011bb4:	f004 f8a6 	bl	8015d04 <ip4_output_if>
 8011bb8:	4603      	mov	r3, r0
 8011bba:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8011bbc:	68b8      	ldr	r0, [r7, #8]
 8011bbe:	f7fa fdd9 	bl	800c774 <pbuf_free>
  return err;
 8011bc2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011bc6:	4618      	mov	r0, r3
 8011bc8:	3718      	adds	r7, #24
 8011bca:	46bd      	mov	sp, r7
 8011bcc:	bd80      	pop	{r7, pc}
 8011bce:	bf00      	nop
 8011bd0:	0801e2f4 	.word	0x0801e2f4
 8011bd4:	0801ea4c 	.word	0x0801ea4c
 8011bd8:	0801e348 	.word	0x0801e348

08011bdc <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8011bdc:	b590      	push	{r4, r7, lr}
 8011bde:	b08b      	sub	sp, #44	; 0x2c
 8011be0:	af04      	add	r7, sp, #16
 8011be2:	60f8      	str	r0, [r7, #12]
 8011be4:	60b9      	str	r1, [r7, #8]
 8011be6:	607a      	str	r2, [r7, #4]
 8011be8:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8011bea:	683b      	ldr	r3, [r7, #0]
 8011bec:	2b00      	cmp	r3, #0
 8011bee:	d106      	bne.n	8011bfe <tcp_rst+0x22>
 8011bf0:	4b1e      	ldr	r3, [pc, #120]	; (8011c6c <tcp_rst+0x90>)
 8011bf2:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8011bf6:	491e      	ldr	r1, [pc, #120]	; (8011c70 <tcp_rst+0x94>)
 8011bf8:	481e      	ldr	r0, [pc, #120]	; (8011c74 <tcp_rst+0x98>)
 8011bfa:	f005 fe39 	bl	8017870 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8011bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011c00:	2b00      	cmp	r3, #0
 8011c02:	d106      	bne.n	8011c12 <tcp_rst+0x36>
 8011c04:	4b19      	ldr	r3, [pc, #100]	; (8011c6c <tcp_rst+0x90>)
 8011c06:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8011c0a:	491b      	ldr	r1, [pc, #108]	; (8011c78 <tcp_rst+0x9c>)
 8011c0c:	4819      	ldr	r0, [pc, #100]	; (8011c74 <tcp_rst+0x98>)
 8011c0e:	f005 fe2f 	bl	8017870 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8011c12:	2300      	movs	r3, #0
 8011c14:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8011c16:	2308      	movs	r3, #8
 8011c18:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8011c1a:	7dfb      	ldrb	r3, [r7, #23]
 8011c1c:	b29c      	uxth	r4, r3
 8011c1e:	68b8      	ldr	r0, [r7, #8]
 8011c20:	f7f9 fb21 	bl	800b266 <lwip_htonl>
 8011c24:	4602      	mov	r2, r0
 8011c26:	8abb      	ldrh	r3, [r7, #20]
 8011c28:	9303      	str	r3, [sp, #12]
 8011c2a:	2314      	movs	r3, #20
 8011c2c:	9302      	str	r3, [sp, #8]
 8011c2e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8011c30:	9301      	str	r3, [sp, #4]
 8011c32:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8011c34:	9300      	str	r3, [sp, #0]
 8011c36:	4613      	mov	r3, r2
 8011c38:	2200      	movs	r2, #0
 8011c3a:	4621      	mov	r1, r4
 8011c3c:	6878      	ldr	r0, [r7, #4]
 8011c3e:	f7ff fe93 	bl	8011968 <tcp_output_alloc_header_common>
 8011c42:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8011c44:	693b      	ldr	r3, [r7, #16]
 8011c46:	2b00      	cmp	r3, #0
 8011c48:	d00c      	beq.n	8011c64 <tcp_rst+0x88>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8011c4a:	7dfb      	ldrb	r3, [r7, #23]
 8011c4c:	2200      	movs	r2, #0
 8011c4e:	6939      	ldr	r1, [r7, #16]
 8011c50:	68f8      	ldr	r0, [r7, #12]
 8011c52:	f7ff ff39 	bl	8011ac8 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8011c56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011c58:	683a      	ldr	r2, [r7, #0]
 8011c5a:	6939      	ldr	r1, [r7, #16]
 8011c5c:	68f8      	ldr	r0, [r7, #12]
 8011c5e:	f7ff ff73 	bl	8011b48 <tcp_output_control_segment>
 8011c62:	e000      	b.n	8011c66 <tcp_rst+0x8a>
    return;
 8011c64:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8011c66:	371c      	adds	r7, #28
 8011c68:	46bd      	mov	sp, r7
 8011c6a:	bd90      	pop	{r4, r7, pc}
 8011c6c:	0801e2f4 	.word	0x0801e2f4
 8011c70:	0801ea78 	.word	0x0801ea78
 8011c74:	0801e348 	.word	0x0801e348
 8011c78:	0801ea94 	.word	0x0801ea94

08011c7c <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8011c7c:	b590      	push	{r4, r7, lr}
 8011c7e:	b087      	sub	sp, #28
 8011c80:	af00      	add	r7, sp, #0
 8011c82:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8011c84:	2300      	movs	r3, #0
 8011c86:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8011c88:	2300      	movs	r3, #0
 8011c8a:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8011c8c:	687b      	ldr	r3, [r7, #4]
 8011c8e:	2b00      	cmp	r3, #0
 8011c90:	d106      	bne.n	8011ca0 <tcp_send_empty_ack+0x24>
 8011c92:	4b28      	ldr	r3, [pc, #160]	; (8011d34 <tcp_send_empty_ack+0xb8>)
 8011c94:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8011c98:	4927      	ldr	r1, [pc, #156]	; (8011d38 <tcp_send_empty_ack+0xbc>)
 8011c9a:	4828      	ldr	r0, [pc, #160]	; (8011d3c <tcp_send_empty_ack+0xc0>)
 8011c9c:	f005 fde8 	bl	8017870 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8011ca0:	7dfb      	ldrb	r3, [r7, #23]
 8011ca2:	009b      	lsls	r3, r3, #2
 8011ca4:	b2db      	uxtb	r3, r3
 8011ca6:	f003 0304 	and.w	r3, r3, #4
 8011caa:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8011cac:	7d7b      	ldrb	r3, [r7, #21]
 8011cae:	b29c      	uxth	r4, r3
 8011cb0:	687b      	ldr	r3, [r7, #4]
 8011cb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011cb4:	4618      	mov	r0, r3
 8011cb6:	f7f9 fad6 	bl	800b266 <lwip_htonl>
 8011cba:	4603      	mov	r3, r0
 8011cbc:	2200      	movs	r2, #0
 8011cbe:	4621      	mov	r1, r4
 8011cc0:	6878      	ldr	r0, [r7, #4]
 8011cc2:	f7ff fec3 	bl	8011a4c <tcp_output_alloc_header>
 8011cc6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8011cc8:	693b      	ldr	r3, [r7, #16]
 8011cca:	2b00      	cmp	r3, #0
 8011ccc:	d109      	bne.n	8011ce2 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011cce:	687b      	ldr	r3, [r7, #4]
 8011cd0:	8b5b      	ldrh	r3, [r3, #26]
 8011cd2:	f043 0303 	orr.w	r3, r3, #3
 8011cd6:	b29a      	uxth	r2, r3
 8011cd8:	687b      	ldr	r3, [r7, #4]
 8011cda:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8011cdc:	f06f 0301 	mvn.w	r3, #1
 8011ce0:	e023      	b.n	8011d2a <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8011ce2:	7dbb      	ldrb	r3, [r7, #22]
 8011ce4:	7dfa      	ldrb	r2, [r7, #23]
 8011ce6:	6939      	ldr	r1, [r7, #16]
 8011ce8:	6878      	ldr	r0, [r7, #4]
 8011cea:	f7ff feed 	bl	8011ac8 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8011cee:	687a      	ldr	r2, [r7, #4]
 8011cf0:	687b      	ldr	r3, [r7, #4]
 8011cf2:	3304      	adds	r3, #4
 8011cf4:	6939      	ldr	r1, [r7, #16]
 8011cf6:	6878      	ldr	r0, [r7, #4]
 8011cf8:	f7ff ff26 	bl	8011b48 <tcp_output_control_segment>
 8011cfc:	4603      	mov	r3, r0
 8011cfe:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8011d00:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011d04:	2b00      	cmp	r3, #0
 8011d06:	d007      	beq.n	8011d18 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011d08:	687b      	ldr	r3, [r7, #4]
 8011d0a:	8b5b      	ldrh	r3, [r3, #26]
 8011d0c:	f043 0303 	orr.w	r3, r3, #3
 8011d10:	b29a      	uxth	r2, r3
 8011d12:	687b      	ldr	r3, [r7, #4]
 8011d14:	835a      	strh	r2, [r3, #26]
 8011d16:	e006      	b.n	8011d26 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011d18:	687b      	ldr	r3, [r7, #4]
 8011d1a:	8b5b      	ldrh	r3, [r3, #26]
 8011d1c:	f023 0303 	bic.w	r3, r3, #3
 8011d20:	b29a      	uxth	r2, r3
 8011d22:	687b      	ldr	r3, [r7, #4]
 8011d24:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8011d26:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8011d2a:	4618      	mov	r0, r3
 8011d2c:	371c      	adds	r7, #28
 8011d2e:	46bd      	mov	sp, r7
 8011d30:	bd90      	pop	{r4, r7, pc}
 8011d32:	bf00      	nop
 8011d34:	0801e2f4 	.word	0x0801e2f4
 8011d38:	0801eab0 	.word	0x0801eab0
 8011d3c:	0801e348 	.word	0x0801e348

08011d40 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8011d40:	b590      	push	{r4, r7, lr}
 8011d42:	b087      	sub	sp, #28
 8011d44:	af00      	add	r7, sp, #0
 8011d46:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8011d48:	2300      	movs	r3, #0
 8011d4a:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8011d4c:	687b      	ldr	r3, [r7, #4]
 8011d4e:	2b00      	cmp	r3, #0
 8011d50:	d106      	bne.n	8011d60 <tcp_keepalive+0x20>
 8011d52:	4b18      	ldr	r3, [pc, #96]	; (8011db4 <tcp_keepalive+0x74>)
 8011d54:	f640 0224 	movw	r2, #2084	; 0x824
 8011d58:	4917      	ldr	r1, [pc, #92]	; (8011db8 <tcp_keepalive+0x78>)
 8011d5a:	4818      	ldr	r0, [pc, #96]	; (8011dbc <tcp_keepalive+0x7c>)
 8011d5c:	f005 fd88 	bl	8017870 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8011d60:	7dfb      	ldrb	r3, [r7, #23]
 8011d62:	b29c      	uxth	r4, r3
 8011d64:	687b      	ldr	r3, [r7, #4]
 8011d66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011d68:	3b01      	subs	r3, #1
 8011d6a:	4618      	mov	r0, r3
 8011d6c:	f7f9 fa7b 	bl	800b266 <lwip_htonl>
 8011d70:	4603      	mov	r3, r0
 8011d72:	2200      	movs	r2, #0
 8011d74:	4621      	mov	r1, r4
 8011d76:	6878      	ldr	r0, [r7, #4]
 8011d78:	f7ff fe68 	bl	8011a4c <tcp_output_alloc_header>
 8011d7c:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8011d7e:	693b      	ldr	r3, [r7, #16]
 8011d80:	2b00      	cmp	r3, #0
 8011d82:	d102      	bne.n	8011d8a <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8011d84:	f04f 33ff 	mov.w	r3, #4294967295
 8011d88:	e010      	b.n	8011dac <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8011d8a:	7dfb      	ldrb	r3, [r7, #23]
 8011d8c:	2200      	movs	r2, #0
 8011d8e:	6939      	ldr	r1, [r7, #16]
 8011d90:	6878      	ldr	r0, [r7, #4]
 8011d92:	f7ff fe99 	bl	8011ac8 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8011d96:	687a      	ldr	r2, [r7, #4]
 8011d98:	687b      	ldr	r3, [r7, #4]
 8011d9a:	3304      	adds	r3, #4
 8011d9c:	6939      	ldr	r1, [r7, #16]
 8011d9e:	6878      	ldr	r0, [r7, #4]
 8011da0:	f7ff fed2 	bl	8011b48 <tcp_output_control_segment>
 8011da4:	4603      	mov	r3, r0
 8011da6:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8011da8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8011dac:	4618      	mov	r0, r3
 8011dae:	371c      	adds	r7, #28
 8011db0:	46bd      	mov	sp, r7
 8011db2:	bd90      	pop	{r4, r7, pc}
 8011db4:	0801e2f4 	.word	0x0801e2f4
 8011db8:	0801ead0 	.word	0x0801ead0
 8011dbc:	0801e348 	.word	0x0801e348

08011dc0 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8011dc0:	b590      	push	{r4, r7, lr}
 8011dc2:	b08b      	sub	sp, #44	; 0x2c
 8011dc4:	af00      	add	r7, sp, #0
 8011dc6:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8011dc8:	2300      	movs	r3, #0
 8011dca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8011dce:	687b      	ldr	r3, [r7, #4]
 8011dd0:	2b00      	cmp	r3, #0
 8011dd2:	d106      	bne.n	8011de2 <tcp_zero_window_probe+0x22>
 8011dd4:	4b4c      	ldr	r3, [pc, #304]	; (8011f08 <tcp_zero_window_probe+0x148>)
 8011dd6:	f640 024f 	movw	r2, #2127	; 0x84f
 8011dda:	494c      	ldr	r1, [pc, #304]	; (8011f0c <tcp_zero_window_probe+0x14c>)
 8011ddc:	484c      	ldr	r0, [pc, #304]	; (8011f10 <tcp_zero_window_probe+0x150>)
 8011dde:	f005 fd47 	bl	8017870 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8011de2:	687b      	ldr	r3, [r7, #4]
 8011de4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011de6:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8011de8:	6a3b      	ldr	r3, [r7, #32]
 8011dea:	2b00      	cmp	r3, #0
 8011dec:	d101      	bne.n	8011df2 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8011dee:	2300      	movs	r3, #0
 8011df0:	e086      	b.n	8011f00 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8011df2:	687b      	ldr	r3, [r7, #4]
 8011df4:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8011df8:	2bff      	cmp	r3, #255	; 0xff
 8011dfa:	d007      	beq.n	8011e0c <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8011dfc:	687b      	ldr	r3, [r7, #4]
 8011dfe:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8011e02:	3301      	adds	r3, #1
 8011e04:	b2da      	uxtb	r2, r3
 8011e06:	687b      	ldr	r3, [r7, #4]
 8011e08:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8011e0c:	6a3b      	ldr	r3, [r7, #32]
 8011e0e:	68db      	ldr	r3, [r3, #12]
 8011e10:	899b      	ldrh	r3, [r3, #12]
 8011e12:	b29b      	uxth	r3, r3
 8011e14:	4618      	mov	r0, r3
 8011e16:	f7f9 fa11 	bl	800b23c <lwip_htons>
 8011e1a:	4603      	mov	r3, r0
 8011e1c:	b2db      	uxtb	r3, r3
 8011e1e:	f003 0301 	and.w	r3, r3, #1
 8011e22:	2b00      	cmp	r3, #0
 8011e24:	d005      	beq.n	8011e32 <tcp_zero_window_probe+0x72>
 8011e26:	6a3b      	ldr	r3, [r7, #32]
 8011e28:	891b      	ldrh	r3, [r3, #8]
 8011e2a:	2b00      	cmp	r3, #0
 8011e2c:	d101      	bne.n	8011e32 <tcp_zero_window_probe+0x72>
 8011e2e:	2301      	movs	r3, #1
 8011e30:	e000      	b.n	8011e34 <tcp_zero_window_probe+0x74>
 8011e32:	2300      	movs	r3, #0
 8011e34:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8011e36:	7ffb      	ldrb	r3, [r7, #31]
 8011e38:	2b00      	cmp	r3, #0
 8011e3a:	bf0c      	ite	eq
 8011e3c:	2301      	moveq	r3, #1
 8011e3e:	2300      	movne	r3, #0
 8011e40:	b2db      	uxtb	r3, r3
 8011e42:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8011e44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011e48:	b299      	uxth	r1, r3
 8011e4a:	6a3b      	ldr	r3, [r7, #32]
 8011e4c:	68db      	ldr	r3, [r3, #12]
 8011e4e:	685b      	ldr	r3, [r3, #4]
 8011e50:	8bba      	ldrh	r2, [r7, #28]
 8011e52:	6878      	ldr	r0, [r7, #4]
 8011e54:	f7ff fdfa 	bl	8011a4c <tcp_output_alloc_header>
 8011e58:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8011e5a:	69bb      	ldr	r3, [r7, #24]
 8011e5c:	2b00      	cmp	r3, #0
 8011e5e:	d102      	bne.n	8011e66 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8011e60:	f04f 33ff 	mov.w	r3, #4294967295
 8011e64:	e04c      	b.n	8011f00 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8011e66:	69bb      	ldr	r3, [r7, #24]
 8011e68:	685b      	ldr	r3, [r3, #4]
 8011e6a:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8011e6c:	7ffb      	ldrb	r3, [r7, #31]
 8011e6e:	2b00      	cmp	r3, #0
 8011e70:	d011      	beq.n	8011e96 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8011e72:	697b      	ldr	r3, [r7, #20]
 8011e74:	899b      	ldrh	r3, [r3, #12]
 8011e76:	b29b      	uxth	r3, r3
 8011e78:	b21b      	sxth	r3, r3
 8011e7a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8011e7e:	b21c      	sxth	r4, r3
 8011e80:	2011      	movs	r0, #17
 8011e82:	f7f9 f9db 	bl	800b23c <lwip_htons>
 8011e86:	4603      	mov	r3, r0
 8011e88:	b21b      	sxth	r3, r3
 8011e8a:	4323      	orrs	r3, r4
 8011e8c:	b21b      	sxth	r3, r3
 8011e8e:	b29a      	uxth	r2, r3
 8011e90:	697b      	ldr	r3, [r7, #20]
 8011e92:	819a      	strh	r2, [r3, #12]
 8011e94:	e010      	b.n	8011eb8 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8011e96:	69bb      	ldr	r3, [r7, #24]
 8011e98:	685b      	ldr	r3, [r3, #4]
 8011e9a:	3314      	adds	r3, #20
 8011e9c:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8011e9e:	6a3b      	ldr	r3, [r7, #32]
 8011ea0:	6858      	ldr	r0, [r3, #4]
 8011ea2:	6a3b      	ldr	r3, [r7, #32]
 8011ea4:	685b      	ldr	r3, [r3, #4]
 8011ea6:	891a      	ldrh	r2, [r3, #8]
 8011ea8:	6a3b      	ldr	r3, [r7, #32]
 8011eaa:	891b      	ldrh	r3, [r3, #8]
 8011eac:	1ad3      	subs	r3, r2, r3
 8011eae:	b29b      	uxth	r3, r3
 8011eb0:	2201      	movs	r2, #1
 8011eb2:	6939      	ldr	r1, [r7, #16]
 8011eb4:	f7fa fe58 	bl	800cb68 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8011eb8:	6a3b      	ldr	r3, [r7, #32]
 8011eba:	68db      	ldr	r3, [r3, #12]
 8011ebc:	685b      	ldr	r3, [r3, #4]
 8011ebe:	4618      	mov	r0, r3
 8011ec0:	f7f9 f9d1 	bl	800b266 <lwip_htonl>
 8011ec4:	4603      	mov	r3, r0
 8011ec6:	3301      	adds	r3, #1
 8011ec8:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8011eca:	687b      	ldr	r3, [r7, #4]
 8011ecc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011ece:	68fb      	ldr	r3, [r7, #12]
 8011ed0:	1ad3      	subs	r3, r2, r3
 8011ed2:	2b00      	cmp	r3, #0
 8011ed4:	da02      	bge.n	8011edc <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8011ed6:	687b      	ldr	r3, [r7, #4]
 8011ed8:	68fa      	ldr	r2, [r7, #12]
 8011eda:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8011edc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011ee0:	2200      	movs	r2, #0
 8011ee2:	69b9      	ldr	r1, [r7, #24]
 8011ee4:	6878      	ldr	r0, [r7, #4]
 8011ee6:	f7ff fdef 	bl	8011ac8 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8011eea:	687a      	ldr	r2, [r7, #4]
 8011eec:	687b      	ldr	r3, [r7, #4]
 8011eee:	3304      	adds	r3, #4
 8011ef0:	69b9      	ldr	r1, [r7, #24]
 8011ef2:	6878      	ldr	r0, [r7, #4]
 8011ef4:	f7ff fe28 	bl	8011b48 <tcp_output_control_segment>
 8011ef8:	4603      	mov	r3, r0
 8011efa:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8011efc:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8011f00:	4618      	mov	r0, r3
 8011f02:	372c      	adds	r7, #44	; 0x2c
 8011f04:	46bd      	mov	sp, r7
 8011f06:	bd90      	pop	{r4, r7, pc}
 8011f08:	0801e2f4 	.word	0x0801e2f4
 8011f0c:	0801eaec 	.word	0x0801eaec
 8011f10:	0801e348 	.word	0x0801e348

08011f14 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8011f14:	b580      	push	{r7, lr}
 8011f16:	b082      	sub	sp, #8
 8011f18:	af00      	add	r7, sp, #0
 8011f1a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8011f1c:	f7fa ff12 	bl	800cd44 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8011f20:	4b0a      	ldr	r3, [pc, #40]	; (8011f4c <tcpip_tcp_timer+0x38>)
 8011f22:	681b      	ldr	r3, [r3, #0]
 8011f24:	2b00      	cmp	r3, #0
 8011f26:	d103      	bne.n	8011f30 <tcpip_tcp_timer+0x1c>
 8011f28:	4b09      	ldr	r3, [pc, #36]	; (8011f50 <tcpip_tcp_timer+0x3c>)
 8011f2a:	681b      	ldr	r3, [r3, #0]
 8011f2c:	2b00      	cmp	r3, #0
 8011f2e:	d005      	beq.n	8011f3c <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8011f30:	2200      	movs	r2, #0
 8011f32:	4908      	ldr	r1, [pc, #32]	; (8011f54 <tcpip_tcp_timer+0x40>)
 8011f34:	20fa      	movs	r0, #250	; 0xfa
 8011f36:	f000 f8f3 	bl	8012120 <sys_timeout>
 8011f3a:	e003      	b.n	8011f44 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8011f3c:	4b06      	ldr	r3, [pc, #24]	; (8011f58 <tcpip_tcp_timer+0x44>)
 8011f3e:	2200      	movs	r2, #0
 8011f40:	601a      	str	r2, [r3, #0]
  }
}
 8011f42:	bf00      	nop
 8011f44:	bf00      	nop
 8011f46:	3708      	adds	r7, #8
 8011f48:	46bd      	mov	sp, r7
 8011f4a:	bd80      	pop	{r7, pc}
 8011f4c:	20006e3c 	.word	0x20006e3c
 8011f50:	20006e4c 	.word	0x20006e4c
 8011f54:	08011f15 	.word	0x08011f15
 8011f58:	20000494 	.word	0x20000494

08011f5c <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8011f5c:	b580      	push	{r7, lr}
 8011f5e:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8011f60:	4b0a      	ldr	r3, [pc, #40]	; (8011f8c <tcp_timer_needed+0x30>)
 8011f62:	681b      	ldr	r3, [r3, #0]
 8011f64:	2b00      	cmp	r3, #0
 8011f66:	d10f      	bne.n	8011f88 <tcp_timer_needed+0x2c>
 8011f68:	4b09      	ldr	r3, [pc, #36]	; (8011f90 <tcp_timer_needed+0x34>)
 8011f6a:	681b      	ldr	r3, [r3, #0]
 8011f6c:	2b00      	cmp	r3, #0
 8011f6e:	d103      	bne.n	8011f78 <tcp_timer_needed+0x1c>
 8011f70:	4b08      	ldr	r3, [pc, #32]	; (8011f94 <tcp_timer_needed+0x38>)
 8011f72:	681b      	ldr	r3, [r3, #0]
 8011f74:	2b00      	cmp	r3, #0
 8011f76:	d007      	beq.n	8011f88 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8011f78:	4b04      	ldr	r3, [pc, #16]	; (8011f8c <tcp_timer_needed+0x30>)
 8011f7a:	2201      	movs	r2, #1
 8011f7c:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8011f7e:	2200      	movs	r2, #0
 8011f80:	4905      	ldr	r1, [pc, #20]	; (8011f98 <tcp_timer_needed+0x3c>)
 8011f82:	20fa      	movs	r0, #250	; 0xfa
 8011f84:	f000 f8cc 	bl	8012120 <sys_timeout>
  }
}
 8011f88:	bf00      	nop
 8011f8a:	bd80      	pop	{r7, pc}
 8011f8c:	20000494 	.word	0x20000494
 8011f90:	20006e3c 	.word	0x20006e3c
 8011f94:	20006e4c 	.word	0x20006e4c
 8011f98:	08011f15 	.word	0x08011f15

08011f9c <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8011f9c:	b580      	push	{r7, lr}
 8011f9e:	b086      	sub	sp, #24
 8011fa0:	af00      	add	r7, sp, #0
 8011fa2:	60f8      	str	r0, [r7, #12]
 8011fa4:	60b9      	str	r1, [r7, #8]
 8011fa6:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8011fa8:	2006      	movs	r0, #6
 8011faa:	f7f9 fd9d 	bl	800bae8 <memp_malloc>
 8011fae:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8011fb0:	693b      	ldr	r3, [r7, #16]
 8011fb2:	2b00      	cmp	r3, #0
 8011fb4:	d109      	bne.n	8011fca <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8011fb6:	693b      	ldr	r3, [r7, #16]
 8011fb8:	2b00      	cmp	r3, #0
 8011fba:	d151      	bne.n	8012060 <sys_timeout_abs+0xc4>
 8011fbc:	4b2a      	ldr	r3, [pc, #168]	; (8012068 <sys_timeout_abs+0xcc>)
 8011fbe:	22be      	movs	r2, #190	; 0xbe
 8011fc0:	492a      	ldr	r1, [pc, #168]	; (801206c <sys_timeout_abs+0xd0>)
 8011fc2:	482b      	ldr	r0, [pc, #172]	; (8012070 <sys_timeout_abs+0xd4>)
 8011fc4:	f005 fc54 	bl	8017870 <iprintf>
    return;
 8011fc8:	e04a      	b.n	8012060 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8011fca:	693b      	ldr	r3, [r7, #16]
 8011fcc:	2200      	movs	r2, #0
 8011fce:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8011fd0:	693b      	ldr	r3, [r7, #16]
 8011fd2:	68ba      	ldr	r2, [r7, #8]
 8011fd4:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8011fd6:	693b      	ldr	r3, [r7, #16]
 8011fd8:	687a      	ldr	r2, [r7, #4]
 8011fda:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8011fdc:	693b      	ldr	r3, [r7, #16]
 8011fde:	68fa      	ldr	r2, [r7, #12]
 8011fe0:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8011fe2:	4b24      	ldr	r3, [pc, #144]	; (8012074 <sys_timeout_abs+0xd8>)
 8011fe4:	681b      	ldr	r3, [r3, #0]
 8011fe6:	2b00      	cmp	r3, #0
 8011fe8:	d103      	bne.n	8011ff2 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8011fea:	4a22      	ldr	r2, [pc, #136]	; (8012074 <sys_timeout_abs+0xd8>)
 8011fec:	693b      	ldr	r3, [r7, #16]
 8011fee:	6013      	str	r3, [r2, #0]
    return;
 8011ff0:	e037      	b.n	8012062 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8011ff2:	693b      	ldr	r3, [r7, #16]
 8011ff4:	685a      	ldr	r2, [r3, #4]
 8011ff6:	4b1f      	ldr	r3, [pc, #124]	; (8012074 <sys_timeout_abs+0xd8>)
 8011ff8:	681b      	ldr	r3, [r3, #0]
 8011ffa:	685b      	ldr	r3, [r3, #4]
 8011ffc:	1ad3      	subs	r3, r2, r3
 8011ffe:	0fdb      	lsrs	r3, r3, #31
 8012000:	f003 0301 	and.w	r3, r3, #1
 8012004:	b2db      	uxtb	r3, r3
 8012006:	2b00      	cmp	r3, #0
 8012008:	d007      	beq.n	801201a <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 801200a:	4b1a      	ldr	r3, [pc, #104]	; (8012074 <sys_timeout_abs+0xd8>)
 801200c:	681a      	ldr	r2, [r3, #0]
 801200e:	693b      	ldr	r3, [r7, #16]
 8012010:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8012012:	4a18      	ldr	r2, [pc, #96]	; (8012074 <sys_timeout_abs+0xd8>)
 8012014:	693b      	ldr	r3, [r7, #16]
 8012016:	6013      	str	r3, [r2, #0]
 8012018:	e023      	b.n	8012062 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 801201a:	4b16      	ldr	r3, [pc, #88]	; (8012074 <sys_timeout_abs+0xd8>)
 801201c:	681b      	ldr	r3, [r3, #0]
 801201e:	617b      	str	r3, [r7, #20]
 8012020:	e01a      	b.n	8012058 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8012022:	697b      	ldr	r3, [r7, #20]
 8012024:	681b      	ldr	r3, [r3, #0]
 8012026:	2b00      	cmp	r3, #0
 8012028:	d00b      	beq.n	8012042 <sys_timeout_abs+0xa6>
 801202a:	693b      	ldr	r3, [r7, #16]
 801202c:	685a      	ldr	r2, [r3, #4]
 801202e:	697b      	ldr	r3, [r7, #20]
 8012030:	681b      	ldr	r3, [r3, #0]
 8012032:	685b      	ldr	r3, [r3, #4]
 8012034:	1ad3      	subs	r3, r2, r3
 8012036:	0fdb      	lsrs	r3, r3, #31
 8012038:	f003 0301 	and.w	r3, r3, #1
 801203c:	b2db      	uxtb	r3, r3
 801203e:	2b00      	cmp	r3, #0
 8012040:	d007      	beq.n	8012052 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8012042:	697b      	ldr	r3, [r7, #20]
 8012044:	681a      	ldr	r2, [r3, #0]
 8012046:	693b      	ldr	r3, [r7, #16]
 8012048:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 801204a:	697b      	ldr	r3, [r7, #20]
 801204c:	693a      	ldr	r2, [r7, #16]
 801204e:	601a      	str	r2, [r3, #0]
        break;
 8012050:	e007      	b.n	8012062 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8012052:	697b      	ldr	r3, [r7, #20]
 8012054:	681b      	ldr	r3, [r3, #0]
 8012056:	617b      	str	r3, [r7, #20]
 8012058:	697b      	ldr	r3, [r7, #20]
 801205a:	2b00      	cmp	r3, #0
 801205c:	d1e1      	bne.n	8012022 <sys_timeout_abs+0x86>
 801205e:	e000      	b.n	8012062 <sys_timeout_abs+0xc6>
    return;
 8012060:	bf00      	nop
      }
    }
  }
}
 8012062:	3718      	adds	r7, #24
 8012064:	46bd      	mov	sp, r7
 8012066:	bd80      	pop	{r7, pc}
 8012068:	0801eb10 	.word	0x0801eb10
 801206c:	0801eb44 	.word	0x0801eb44
 8012070:	0801eb84 	.word	0x0801eb84
 8012074:	2000048c 	.word	0x2000048c

08012078 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8012078:	b580      	push	{r7, lr}
 801207a:	b086      	sub	sp, #24
 801207c:	af00      	add	r7, sp, #0
 801207e:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8012080:	687b      	ldr	r3, [r7, #4]
 8012082:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8012084:	697b      	ldr	r3, [r7, #20]
 8012086:	685b      	ldr	r3, [r3, #4]
 8012088:	4798      	blx	r3

  now = sys_now();
 801208a:	f7f9 f849 	bl	800b120 <sys_now>
 801208e:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8012090:	697b      	ldr	r3, [r7, #20]
 8012092:	681a      	ldr	r2, [r3, #0]
 8012094:	4b0f      	ldr	r3, [pc, #60]	; (80120d4 <lwip_cyclic_timer+0x5c>)
 8012096:	681b      	ldr	r3, [r3, #0]
 8012098:	4413      	add	r3, r2
 801209a:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 801209c:	68fa      	ldr	r2, [r7, #12]
 801209e:	693b      	ldr	r3, [r7, #16]
 80120a0:	1ad3      	subs	r3, r2, r3
 80120a2:	0fdb      	lsrs	r3, r3, #31
 80120a4:	f003 0301 	and.w	r3, r3, #1
 80120a8:	b2db      	uxtb	r3, r3
 80120aa:	2b00      	cmp	r3, #0
 80120ac:	d009      	beq.n	80120c2 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 80120ae:	697b      	ldr	r3, [r7, #20]
 80120b0:	681a      	ldr	r2, [r3, #0]
 80120b2:	693b      	ldr	r3, [r7, #16]
 80120b4:	4413      	add	r3, r2
 80120b6:	687a      	ldr	r2, [r7, #4]
 80120b8:	4907      	ldr	r1, [pc, #28]	; (80120d8 <lwip_cyclic_timer+0x60>)
 80120ba:	4618      	mov	r0, r3
 80120bc:	f7ff ff6e 	bl	8011f9c <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 80120c0:	e004      	b.n	80120cc <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 80120c2:	687a      	ldr	r2, [r7, #4]
 80120c4:	4904      	ldr	r1, [pc, #16]	; (80120d8 <lwip_cyclic_timer+0x60>)
 80120c6:	68f8      	ldr	r0, [r7, #12]
 80120c8:	f7ff ff68 	bl	8011f9c <sys_timeout_abs>
}
 80120cc:	bf00      	nop
 80120ce:	3718      	adds	r7, #24
 80120d0:	46bd      	mov	sp, r7
 80120d2:	bd80      	pop	{r7, pc}
 80120d4:	20000490 	.word	0x20000490
 80120d8:	08012079 	.word	0x08012079

080120dc <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 80120dc:	b580      	push	{r7, lr}
 80120de:	b082      	sub	sp, #8
 80120e0:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80120e2:	2301      	movs	r3, #1
 80120e4:	607b      	str	r3, [r7, #4]
 80120e6:	e00e      	b.n	8012106 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 80120e8:	4a0b      	ldr	r2, [pc, #44]	; (8012118 <sys_timeouts_init+0x3c>)
 80120ea:	687b      	ldr	r3, [r7, #4]
 80120ec:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80120f0:	687b      	ldr	r3, [r7, #4]
 80120f2:	00db      	lsls	r3, r3, #3
 80120f4:	4a08      	ldr	r2, [pc, #32]	; (8012118 <sys_timeouts_init+0x3c>)
 80120f6:	4413      	add	r3, r2
 80120f8:	461a      	mov	r2, r3
 80120fa:	4908      	ldr	r1, [pc, #32]	; (801211c <sys_timeouts_init+0x40>)
 80120fc:	f000 f810 	bl	8012120 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8012100:	687b      	ldr	r3, [r7, #4]
 8012102:	3301      	adds	r3, #1
 8012104:	607b      	str	r3, [r7, #4]
 8012106:	687b      	ldr	r3, [r7, #4]
 8012108:	2b04      	cmp	r3, #4
 801210a:	d9ed      	bls.n	80120e8 <sys_timeouts_init+0xc>
  }
}
 801210c:	bf00      	nop
 801210e:	bf00      	nop
 8012110:	3708      	adds	r7, #8
 8012112:	46bd      	mov	sp, r7
 8012114:	bd80      	pop	{r7, pc}
 8012116:	bf00      	nop
 8012118:	0801faa0 	.word	0x0801faa0
 801211c:	08012079 	.word	0x08012079

08012120 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8012120:	b580      	push	{r7, lr}
 8012122:	b086      	sub	sp, #24
 8012124:	af00      	add	r7, sp, #0
 8012126:	60f8      	str	r0, [r7, #12]
 8012128:	60b9      	str	r1, [r7, #8]
 801212a:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 801212c:	68fb      	ldr	r3, [r7, #12]
 801212e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012132:	d306      	bcc.n	8012142 <sys_timeout+0x22>
 8012134:	4b0a      	ldr	r3, [pc, #40]	; (8012160 <sys_timeout+0x40>)
 8012136:	f240 1229 	movw	r2, #297	; 0x129
 801213a:	490a      	ldr	r1, [pc, #40]	; (8012164 <sys_timeout+0x44>)
 801213c:	480a      	ldr	r0, [pc, #40]	; (8012168 <sys_timeout+0x48>)
 801213e:	f005 fb97 	bl	8017870 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8012142:	f7f8 ffed 	bl	800b120 <sys_now>
 8012146:	4602      	mov	r2, r0
 8012148:	68fb      	ldr	r3, [r7, #12]
 801214a:	4413      	add	r3, r2
 801214c:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 801214e:	687a      	ldr	r2, [r7, #4]
 8012150:	68b9      	ldr	r1, [r7, #8]
 8012152:	6978      	ldr	r0, [r7, #20]
 8012154:	f7ff ff22 	bl	8011f9c <sys_timeout_abs>
#endif
}
 8012158:	bf00      	nop
 801215a:	3718      	adds	r7, #24
 801215c:	46bd      	mov	sp, r7
 801215e:	bd80      	pop	{r7, pc}
 8012160:	0801eb10 	.word	0x0801eb10
 8012164:	0801ebac 	.word	0x0801ebac
 8012168:	0801eb84 	.word	0x0801eb84

0801216c <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 801216c:	b580      	push	{r7, lr}
 801216e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8012170:	f005 fb96 	bl	80178a0 <rand>
 8012174:	4603      	mov	r3, r0
 8012176:	b29b      	uxth	r3, r3
 8012178:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801217c:	b29b      	uxth	r3, r3
 801217e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8012182:	b29a      	uxth	r2, r3
 8012184:	4b01      	ldr	r3, [pc, #4]	; (801218c <udp_init+0x20>)
 8012186:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8012188:	bf00      	nop
 801218a:	bd80      	pop	{r7, pc}
 801218c:	2000006c 	.word	0x2000006c

08012190 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8012190:	b480      	push	{r7}
 8012192:	b083      	sub	sp, #12
 8012194:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8012196:	2300      	movs	r3, #0
 8012198:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 801219a:	4b17      	ldr	r3, [pc, #92]	; (80121f8 <udp_new_port+0x68>)
 801219c:	881b      	ldrh	r3, [r3, #0]
 801219e:	1c5a      	adds	r2, r3, #1
 80121a0:	b291      	uxth	r1, r2
 80121a2:	4a15      	ldr	r2, [pc, #84]	; (80121f8 <udp_new_port+0x68>)
 80121a4:	8011      	strh	r1, [r2, #0]
 80121a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80121aa:	4293      	cmp	r3, r2
 80121ac:	d103      	bne.n	80121b6 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 80121ae:	4b12      	ldr	r3, [pc, #72]	; (80121f8 <udp_new_port+0x68>)
 80121b0:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80121b4:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80121b6:	4b11      	ldr	r3, [pc, #68]	; (80121fc <udp_new_port+0x6c>)
 80121b8:	681b      	ldr	r3, [r3, #0]
 80121ba:	603b      	str	r3, [r7, #0]
 80121bc:	e011      	b.n	80121e2 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 80121be:	683b      	ldr	r3, [r7, #0]
 80121c0:	8a5a      	ldrh	r2, [r3, #18]
 80121c2:	4b0d      	ldr	r3, [pc, #52]	; (80121f8 <udp_new_port+0x68>)
 80121c4:	881b      	ldrh	r3, [r3, #0]
 80121c6:	429a      	cmp	r2, r3
 80121c8:	d108      	bne.n	80121dc <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 80121ca:	88fb      	ldrh	r3, [r7, #6]
 80121cc:	3301      	adds	r3, #1
 80121ce:	80fb      	strh	r3, [r7, #6]
 80121d0:	88fb      	ldrh	r3, [r7, #6]
 80121d2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80121d6:	d3e0      	bcc.n	801219a <udp_new_port+0xa>
        return 0;
 80121d8:	2300      	movs	r3, #0
 80121da:	e007      	b.n	80121ec <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80121dc:	683b      	ldr	r3, [r7, #0]
 80121de:	68db      	ldr	r3, [r3, #12]
 80121e0:	603b      	str	r3, [r7, #0]
 80121e2:	683b      	ldr	r3, [r7, #0]
 80121e4:	2b00      	cmp	r3, #0
 80121e6:	d1ea      	bne.n	80121be <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 80121e8:	4b03      	ldr	r3, [pc, #12]	; (80121f8 <udp_new_port+0x68>)
 80121ea:	881b      	ldrh	r3, [r3, #0]
}
 80121ec:	4618      	mov	r0, r3
 80121ee:	370c      	adds	r7, #12
 80121f0:	46bd      	mov	sp, r7
 80121f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121f6:	4770      	bx	lr
 80121f8:	2000006c 	.word	0x2000006c
 80121fc:	20006e54 	.word	0x20006e54

08012200 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8012200:	b580      	push	{r7, lr}
 8012202:	b084      	sub	sp, #16
 8012204:	af00      	add	r7, sp, #0
 8012206:	60f8      	str	r0, [r7, #12]
 8012208:	60b9      	str	r1, [r7, #8]
 801220a:	4613      	mov	r3, r2
 801220c:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 801220e:	68fb      	ldr	r3, [r7, #12]
 8012210:	2b00      	cmp	r3, #0
 8012212:	d105      	bne.n	8012220 <udp_input_local_match+0x20>
 8012214:	4b27      	ldr	r3, [pc, #156]	; (80122b4 <udp_input_local_match+0xb4>)
 8012216:	2287      	movs	r2, #135	; 0x87
 8012218:	4927      	ldr	r1, [pc, #156]	; (80122b8 <udp_input_local_match+0xb8>)
 801221a:	4828      	ldr	r0, [pc, #160]	; (80122bc <udp_input_local_match+0xbc>)
 801221c:	f005 fb28 	bl	8017870 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8012220:	68bb      	ldr	r3, [r7, #8]
 8012222:	2b00      	cmp	r3, #0
 8012224:	d105      	bne.n	8012232 <udp_input_local_match+0x32>
 8012226:	4b23      	ldr	r3, [pc, #140]	; (80122b4 <udp_input_local_match+0xb4>)
 8012228:	2288      	movs	r2, #136	; 0x88
 801222a:	4925      	ldr	r1, [pc, #148]	; (80122c0 <udp_input_local_match+0xc0>)
 801222c:	4823      	ldr	r0, [pc, #140]	; (80122bc <udp_input_local_match+0xbc>)
 801222e:	f005 fb1f 	bl	8017870 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012232:	68fb      	ldr	r3, [r7, #12]
 8012234:	7a1b      	ldrb	r3, [r3, #8]
 8012236:	2b00      	cmp	r3, #0
 8012238:	d00b      	beq.n	8012252 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801223a:	68fb      	ldr	r3, [r7, #12]
 801223c:	7a1a      	ldrb	r2, [r3, #8]
 801223e:	4b21      	ldr	r3, [pc, #132]	; (80122c4 <udp_input_local_match+0xc4>)
 8012240:	685b      	ldr	r3, [r3, #4]
 8012242:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8012246:	3301      	adds	r3, #1
 8012248:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801224a:	429a      	cmp	r2, r3
 801224c:	d001      	beq.n	8012252 <udp_input_local_match+0x52>
    return 0;
 801224e:	2300      	movs	r3, #0
 8012250:	e02b      	b.n	80122aa <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8012252:	79fb      	ldrb	r3, [r7, #7]
 8012254:	2b00      	cmp	r3, #0
 8012256:	d018      	beq.n	801228a <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8012258:	68fb      	ldr	r3, [r7, #12]
 801225a:	2b00      	cmp	r3, #0
 801225c:	d013      	beq.n	8012286 <udp_input_local_match+0x86>
 801225e:	68fb      	ldr	r3, [r7, #12]
 8012260:	681b      	ldr	r3, [r3, #0]
 8012262:	2b00      	cmp	r3, #0
 8012264:	d00f      	beq.n	8012286 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8012266:	4b17      	ldr	r3, [pc, #92]	; (80122c4 <udp_input_local_match+0xc4>)
 8012268:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801226a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801226e:	d00a      	beq.n	8012286 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8012270:	68fb      	ldr	r3, [r7, #12]
 8012272:	681a      	ldr	r2, [r3, #0]
 8012274:	4b13      	ldr	r3, [pc, #76]	; (80122c4 <udp_input_local_match+0xc4>)
 8012276:	695b      	ldr	r3, [r3, #20]
 8012278:	405a      	eors	r2, r3
 801227a:	68bb      	ldr	r3, [r7, #8]
 801227c:	3308      	adds	r3, #8
 801227e:	681b      	ldr	r3, [r3, #0]
 8012280:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8012282:	2b00      	cmp	r3, #0
 8012284:	d110      	bne.n	80122a8 <udp_input_local_match+0xa8>
          return 1;
 8012286:	2301      	movs	r3, #1
 8012288:	e00f      	b.n	80122aa <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801228a:	68fb      	ldr	r3, [r7, #12]
 801228c:	2b00      	cmp	r3, #0
 801228e:	d009      	beq.n	80122a4 <udp_input_local_match+0xa4>
 8012290:	68fb      	ldr	r3, [r7, #12]
 8012292:	681b      	ldr	r3, [r3, #0]
 8012294:	2b00      	cmp	r3, #0
 8012296:	d005      	beq.n	80122a4 <udp_input_local_match+0xa4>
 8012298:	68fb      	ldr	r3, [r7, #12]
 801229a:	681a      	ldr	r2, [r3, #0]
 801229c:	4b09      	ldr	r3, [pc, #36]	; (80122c4 <udp_input_local_match+0xc4>)
 801229e:	695b      	ldr	r3, [r3, #20]
 80122a0:	429a      	cmp	r2, r3
 80122a2:	d101      	bne.n	80122a8 <udp_input_local_match+0xa8>
        return 1;
 80122a4:	2301      	movs	r3, #1
 80122a6:	e000      	b.n	80122aa <udp_input_local_match+0xaa>
      }
  }

  return 0;
 80122a8:	2300      	movs	r3, #0
}
 80122aa:	4618      	mov	r0, r3
 80122ac:	3710      	adds	r7, #16
 80122ae:	46bd      	mov	sp, r7
 80122b0:	bd80      	pop	{r7, pc}
 80122b2:	bf00      	nop
 80122b4:	0801ebf8 	.word	0x0801ebf8
 80122b8:	0801ec28 	.word	0x0801ec28
 80122bc:	0801ec4c 	.word	0x0801ec4c
 80122c0:	0801ec74 	.word	0x0801ec74
 80122c4:	20003d18 	.word	0x20003d18

080122c8 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 80122c8:	b590      	push	{r4, r7, lr}
 80122ca:	b08d      	sub	sp, #52	; 0x34
 80122cc:	af02      	add	r7, sp, #8
 80122ce:	6078      	str	r0, [r7, #4]
 80122d0:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 80122d2:	2300      	movs	r3, #0
 80122d4:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 80122d6:	687b      	ldr	r3, [r7, #4]
 80122d8:	2b00      	cmp	r3, #0
 80122da:	d105      	bne.n	80122e8 <udp_input+0x20>
 80122dc:	4b7c      	ldr	r3, [pc, #496]	; (80124d0 <udp_input+0x208>)
 80122de:	22cf      	movs	r2, #207	; 0xcf
 80122e0:	497c      	ldr	r1, [pc, #496]	; (80124d4 <udp_input+0x20c>)
 80122e2:	487d      	ldr	r0, [pc, #500]	; (80124d8 <udp_input+0x210>)
 80122e4:	f005 fac4 	bl	8017870 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 80122e8:	683b      	ldr	r3, [r7, #0]
 80122ea:	2b00      	cmp	r3, #0
 80122ec:	d105      	bne.n	80122fa <udp_input+0x32>
 80122ee:	4b78      	ldr	r3, [pc, #480]	; (80124d0 <udp_input+0x208>)
 80122f0:	22d0      	movs	r2, #208	; 0xd0
 80122f2:	497a      	ldr	r1, [pc, #488]	; (80124dc <udp_input+0x214>)
 80122f4:	4878      	ldr	r0, [pc, #480]	; (80124d8 <udp_input+0x210>)
 80122f6:	f005 fabb 	bl	8017870 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 80122fa:	687b      	ldr	r3, [r7, #4]
 80122fc:	895b      	ldrh	r3, [r3, #10]
 80122fe:	2b07      	cmp	r3, #7
 8012300:	d803      	bhi.n	801230a <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8012302:	6878      	ldr	r0, [r7, #4]
 8012304:	f7fa fa36 	bl	800c774 <pbuf_free>
    goto end;
 8012308:	e0de      	b.n	80124c8 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801230a:	687b      	ldr	r3, [r7, #4]
 801230c:	685b      	ldr	r3, [r3, #4]
 801230e:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8012310:	4b73      	ldr	r3, [pc, #460]	; (80124e0 <udp_input+0x218>)
 8012312:	695b      	ldr	r3, [r3, #20]
 8012314:	4a72      	ldr	r2, [pc, #456]	; (80124e0 <udp_input+0x218>)
 8012316:	6812      	ldr	r2, [r2, #0]
 8012318:	4611      	mov	r1, r2
 801231a:	4618      	mov	r0, r3
 801231c:	f003 fdca 	bl	8015eb4 <ip4_addr_isbroadcast_u32>
 8012320:	4603      	mov	r3, r0
 8012322:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8012324:	697b      	ldr	r3, [r7, #20]
 8012326:	881b      	ldrh	r3, [r3, #0]
 8012328:	b29b      	uxth	r3, r3
 801232a:	4618      	mov	r0, r3
 801232c:	f7f8 ff86 	bl	800b23c <lwip_htons>
 8012330:	4603      	mov	r3, r0
 8012332:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8012334:	697b      	ldr	r3, [r7, #20]
 8012336:	885b      	ldrh	r3, [r3, #2]
 8012338:	b29b      	uxth	r3, r3
 801233a:	4618      	mov	r0, r3
 801233c:	f7f8 ff7e 	bl	800b23c <lwip_htons>
 8012340:	4603      	mov	r3, r0
 8012342:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8012344:	2300      	movs	r3, #0
 8012346:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8012348:	2300      	movs	r3, #0
 801234a:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 801234c:	2300      	movs	r3, #0
 801234e:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8012350:	4b64      	ldr	r3, [pc, #400]	; (80124e4 <udp_input+0x21c>)
 8012352:	681b      	ldr	r3, [r3, #0]
 8012354:	627b      	str	r3, [r7, #36]	; 0x24
 8012356:	e054      	b.n	8012402 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8012358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801235a:	8a5b      	ldrh	r3, [r3, #18]
 801235c:	89fa      	ldrh	r2, [r7, #14]
 801235e:	429a      	cmp	r2, r3
 8012360:	d14a      	bne.n	80123f8 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8012362:	7cfb      	ldrb	r3, [r7, #19]
 8012364:	461a      	mov	r2, r3
 8012366:	6839      	ldr	r1, [r7, #0]
 8012368:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801236a:	f7ff ff49 	bl	8012200 <udp_input_local_match>
 801236e:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8012370:	2b00      	cmp	r3, #0
 8012372:	d041      	beq.n	80123f8 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8012374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012376:	7c1b      	ldrb	r3, [r3, #16]
 8012378:	f003 0304 	and.w	r3, r3, #4
 801237c:	2b00      	cmp	r3, #0
 801237e:	d11d      	bne.n	80123bc <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8012380:	69fb      	ldr	r3, [r7, #28]
 8012382:	2b00      	cmp	r3, #0
 8012384:	d102      	bne.n	801238c <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8012386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012388:	61fb      	str	r3, [r7, #28]
 801238a:	e017      	b.n	80123bc <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 801238c:	7cfb      	ldrb	r3, [r7, #19]
 801238e:	2b00      	cmp	r3, #0
 8012390:	d014      	beq.n	80123bc <udp_input+0xf4>
 8012392:	4b53      	ldr	r3, [pc, #332]	; (80124e0 <udp_input+0x218>)
 8012394:	695b      	ldr	r3, [r3, #20]
 8012396:	f1b3 3fff 	cmp.w	r3, #4294967295
 801239a:	d10f      	bne.n	80123bc <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 801239c:	69fb      	ldr	r3, [r7, #28]
 801239e:	681a      	ldr	r2, [r3, #0]
 80123a0:	683b      	ldr	r3, [r7, #0]
 80123a2:	3304      	adds	r3, #4
 80123a4:	681b      	ldr	r3, [r3, #0]
 80123a6:	429a      	cmp	r2, r3
 80123a8:	d008      	beq.n	80123bc <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 80123aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123ac:	681a      	ldr	r2, [r3, #0]
 80123ae:	683b      	ldr	r3, [r7, #0]
 80123b0:	3304      	adds	r3, #4
 80123b2:	681b      	ldr	r3, [r3, #0]
 80123b4:	429a      	cmp	r2, r3
 80123b6:	d101      	bne.n	80123bc <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 80123b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123ba:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 80123bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123be:	8a9b      	ldrh	r3, [r3, #20]
 80123c0:	8a3a      	ldrh	r2, [r7, #16]
 80123c2:	429a      	cmp	r2, r3
 80123c4:	d118      	bne.n	80123f8 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 80123c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123c8:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 80123ca:	2b00      	cmp	r3, #0
 80123cc:	d005      	beq.n	80123da <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 80123ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123d0:	685a      	ldr	r2, [r3, #4]
 80123d2:	4b43      	ldr	r3, [pc, #268]	; (80124e0 <udp_input+0x218>)
 80123d4:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 80123d6:	429a      	cmp	r2, r3
 80123d8:	d10e      	bne.n	80123f8 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 80123da:	6a3b      	ldr	r3, [r7, #32]
 80123dc:	2b00      	cmp	r3, #0
 80123de:	d014      	beq.n	801240a <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 80123e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123e2:	68da      	ldr	r2, [r3, #12]
 80123e4:	6a3b      	ldr	r3, [r7, #32]
 80123e6:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 80123e8:	4b3e      	ldr	r3, [pc, #248]	; (80124e4 <udp_input+0x21c>)
 80123ea:	681a      	ldr	r2, [r3, #0]
 80123ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123ee:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 80123f0:	4a3c      	ldr	r2, [pc, #240]	; (80124e4 <udp_input+0x21c>)
 80123f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123f4:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 80123f6:	e008      	b.n	801240a <udp_input+0x142>
      }
    }

    prev = pcb;
 80123f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123fa:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80123fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123fe:	68db      	ldr	r3, [r3, #12]
 8012400:	627b      	str	r3, [r7, #36]	; 0x24
 8012402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012404:	2b00      	cmp	r3, #0
 8012406:	d1a7      	bne.n	8012358 <udp_input+0x90>
 8012408:	e000      	b.n	801240c <udp_input+0x144>
        break;
 801240a:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 801240c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801240e:	2b00      	cmp	r3, #0
 8012410:	d101      	bne.n	8012416 <udp_input+0x14e>
    pcb = uncon_pcb;
 8012412:	69fb      	ldr	r3, [r7, #28]
 8012414:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8012416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012418:	2b00      	cmp	r3, #0
 801241a:	d002      	beq.n	8012422 <udp_input+0x15a>
    for_us = 1;
 801241c:	2301      	movs	r3, #1
 801241e:	76fb      	strb	r3, [r7, #27]
 8012420:	e00a      	b.n	8012438 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8012422:	683b      	ldr	r3, [r7, #0]
 8012424:	3304      	adds	r3, #4
 8012426:	681a      	ldr	r2, [r3, #0]
 8012428:	4b2d      	ldr	r3, [pc, #180]	; (80124e0 <udp_input+0x218>)
 801242a:	695b      	ldr	r3, [r3, #20]
 801242c:	429a      	cmp	r2, r3
 801242e:	bf0c      	ite	eq
 8012430:	2301      	moveq	r3, #1
 8012432:	2300      	movne	r3, #0
 8012434:	b2db      	uxtb	r3, r3
 8012436:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8012438:	7efb      	ldrb	r3, [r7, #27]
 801243a:	2b00      	cmp	r3, #0
 801243c:	d041      	beq.n	80124c2 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801243e:	2108      	movs	r1, #8
 8012440:	6878      	ldr	r0, [r7, #4]
 8012442:	f7fa f911 	bl	800c668 <pbuf_remove_header>
 8012446:	4603      	mov	r3, r0
 8012448:	2b00      	cmp	r3, #0
 801244a:	d00a      	beq.n	8012462 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 801244c:	4b20      	ldr	r3, [pc, #128]	; (80124d0 <udp_input+0x208>)
 801244e:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8012452:	4925      	ldr	r1, [pc, #148]	; (80124e8 <udp_input+0x220>)
 8012454:	4820      	ldr	r0, [pc, #128]	; (80124d8 <udp_input+0x210>)
 8012456:	f005 fa0b 	bl	8017870 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 801245a:	6878      	ldr	r0, [r7, #4]
 801245c:	f7fa f98a 	bl	800c774 <pbuf_free>
      goto end;
 8012460:	e032      	b.n	80124c8 <udp_input+0x200>
    }

    if (pcb != NULL) {
 8012462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012464:	2b00      	cmp	r3, #0
 8012466:	d012      	beq.n	801248e <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8012468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801246a:	699b      	ldr	r3, [r3, #24]
 801246c:	2b00      	cmp	r3, #0
 801246e:	d00a      	beq.n	8012486 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8012470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012472:	699c      	ldr	r4, [r3, #24]
 8012474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012476:	69d8      	ldr	r0, [r3, #28]
 8012478:	8a3b      	ldrh	r3, [r7, #16]
 801247a:	9300      	str	r3, [sp, #0]
 801247c:	4b1b      	ldr	r3, [pc, #108]	; (80124ec <udp_input+0x224>)
 801247e:	687a      	ldr	r2, [r7, #4]
 8012480:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012482:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8012484:	e021      	b.n	80124ca <udp_input+0x202>
        pbuf_free(p);
 8012486:	6878      	ldr	r0, [r7, #4]
 8012488:	f7fa f974 	bl	800c774 <pbuf_free>
        goto end;
 801248c:	e01c      	b.n	80124c8 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801248e:	7cfb      	ldrb	r3, [r7, #19]
 8012490:	2b00      	cmp	r3, #0
 8012492:	d112      	bne.n	80124ba <udp_input+0x1f2>
 8012494:	4b12      	ldr	r3, [pc, #72]	; (80124e0 <udp_input+0x218>)
 8012496:	695b      	ldr	r3, [r3, #20]
 8012498:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801249c:	2be0      	cmp	r3, #224	; 0xe0
 801249e:	d00c      	beq.n	80124ba <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 80124a0:	4b0f      	ldr	r3, [pc, #60]	; (80124e0 <udp_input+0x218>)
 80124a2:	899b      	ldrh	r3, [r3, #12]
 80124a4:	3308      	adds	r3, #8
 80124a6:	b29b      	uxth	r3, r3
 80124a8:	b21b      	sxth	r3, r3
 80124aa:	4619      	mov	r1, r3
 80124ac:	6878      	ldr	r0, [r7, #4]
 80124ae:	f7fa f94e 	bl	800c74e <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 80124b2:	2103      	movs	r1, #3
 80124b4:	6878      	ldr	r0, [r7, #4]
 80124b6:	f003 f9bf 	bl	8015838 <icmp_dest_unreach>
      pbuf_free(p);
 80124ba:	6878      	ldr	r0, [r7, #4]
 80124bc:	f7fa f95a 	bl	800c774 <pbuf_free>
  return;
 80124c0:	e003      	b.n	80124ca <udp_input+0x202>
    pbuf_free(p);
 80124c2:	6878      	ldr	r0, [r7, #4]
 80124c4:	f7fa f956 	bl	800c774 <pbuf_free>
  return;
 80124c8:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 80124ca:	372c      	adds	r7, #44	; 0x2c
 80124cc:	46bd      	mov	sp, r7
 80124ce:	bd90      	pop	{r4, r7, pc}
 80124d0:	0801ebf8 	.word	0x0801ebf8
 80124d4:	0801ec9c 	.word	0x0801ec9c
 80124d8:	0801ec4c 	.word	0x0801ec4c
 80124dc:	0801ecb4 	.word	0x0801ecb4
 80124e0:	20003d18 	.word	0x20003d18
 80124e4:	20006e54 	.word	0x20006e54
 80124e8:	0801ecd0 	.word	0x0801ecd0
 80124ec:	20003d28 	.word	0x20003d28

080124f0 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 80124f0:	b580      	push	{r7, lr}
 80124f2:	b088      	sub	sp, #32
 80124f4:	af02      	add	r7, sp, #8
 80124f6:	60f8      	str	r0, [r7, #12]
 80124f8:	60b9      	str	r1, [r7, #8]
 80124fa:	607a      	str	r2, [r7, #4]
 80124fc:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 80124fe:	68fb      	ldr	r3, [r7, #12]
 8012500:	2b00      	cmp	r3, #0
 8012502:	d109      	bne.n	8012518 <udp_sendto_if+0x28>
 8012504:	4b2e      	ldr	r3, [pc, #184]	; (80125c0 <udp_sendto_if+0xd0>)
 8012506:	f44f 7220 	mov.w	r2, #640	; 0x280
 801250a:	492e      	ldr	r1, [pc, #184]	; (80125c4 <udp_sendto_if+0xd4>)
 801250c:	482e      	ldr	r0, [pc, #184]	; (80125c8 <udp_sendto_if+0xd8>)
 801250e:	f005 f9af 	bl	8017870 <iprintf>
 8012512:	f06f 030f 	mvn.w	r3, #15
 8012516:	e04f      	b.n	80125b8 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8012518:	68bb      	ldr	r3, [r7, #8]
 801251a:	2b00      	cmp	r3, #0
 801251c:	d109      	bne.n	8012532 <udp_sendto_if+0x42>
 801251e:	4b28      	ldr	r3, [pc, #160]	; (80125c0 <udp_sendto_if+0xd0>)
 8012520:	f240 2281 	movw	r2, #641	; 0x281
 8012524:	4929      	ldr	r1, [pc, #164]	; (80125cc <udp_sendto_if+0xdc>)
 8012526:	4828      	ldr	r0, [pc, #160]	; (80125c8 <udp_sendto_if+0xd8>)
 8012528:	f005 f9a2 	bl	8017870 <iprintf>
 801252c:	f06f 030f 	mvn.w	r3, #15
 8012530:	e042      	b.n	80125b8 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8012532:	687b      	ldr	r3, [r7, #4]
 8012534:	2b00      	cmp	r3, #0
 8012536:	d109      	bne.n	801254c <udp_sendto_if+0x5c>
 8012538:	4b21      	ldr	r3, [pc, #132]	; (80125c0 <udp_sendto_if+0xd0>)
 801253a:	f240 2282 	movw	r2, #642	; 0x282
 801253e:	4924      	ldr	r1, [pc, #144]	; (80125d0 <udp_sendto_if+0xe0>)
 8012540:	4821      	ldr	r0, [pc, #132]	; (80125c8 <udp_sendto_if+0xd8>)
 8012542:	f005 f995 	bl	8017870 <iprintf>
 8012546:	f06f 030f 	mvn.w	r3, #15
 801254a:	e035      	b.n	80125b8 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 801254c:	6a3b      	ldr	r3, [r7, #32]
 801254e:	2b00      	cmp	r3, #0
 8012550:	d109      	bne.n	8012566 <udp_sendto_if+0x76>
 8012552:	4b1b      	ldr	r3, [pc, #108]	; (80125c0 <udp_sendto_if+0xd0>)
 8012554:	f240 2283 	movw	r2, #643	; 0x283
 8012558:	491e      	ldr	r1, [pc, #120]	; (80125d4 <udp_sendto_if+0xe4>)
 801255a:	481b      	ldr	r0, [pc, #108]	; (80125c8 <udp_sendto_if+0xd8>)
 801255c:	f005 f988 	bl	8017870 <iprintf>
 8012560:	f06f 030f 	mvn.w	r3, #15
 8012564:	e028      	b.n	80125b8 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8012566:	68fb      	ldr	r3, [r7, #12]
 8012568:	2b00      	cmp	r3, #0
 801256a:	d009      	beq.n	8012580 <udp_sendto_if+0x90>
 801256c:	68fb      	ldr	r3, [r7, #12]
 801256e:	681b      	ldr	r3, [r3, #0]
 8012570:	2b00      	cmp	r3, #0
 8012572:	d005      	beq.n	8012580 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8012574:	68fb      	ldr	r3, [r7, #12]
 8012576:	681b      	ldr	r3, [r3, #0]
 8012578:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801257c:	2be0      	cmp	r3, #224	; 0xe0
 801257e:	d103      	bne.n	8012588 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 8012580:	6a3b      	ldr	r3, [r7, #32]
 8012582:	3304      	adds	r3, #4
 8012584:	617b      	str	r3, [r7, #20]
 8012586:	e00b      	b.n	80125a0 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8012588:	68fb      	ldr	r3, [r7, #12]
 801258a:	681a      	ldr	r2, [r3, #0]
 801258c:	6a3b      	ldr	r3, [r7, #32]
 801258e:	3304      	adds	r3, #4
 8012590:	681b      	ldr	r3, [r3, #0]
 8012592:	429a      	cmp	r2, r3
 8012594:	d002      	beq.n	801259c <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 8012596:	f06f 0303 	mvn.w	r3, #3
 801259a:	e00d      	b.n	80125b8 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 801259c:	68fb      	ldr	r3, [r7, #12]
 801259e:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 80125a0:	887a      	ldrh	r2, [r7, #2]
 80125a2:	697b      	ldr	r3, [r7, #20]
 80125a4:	9301      	str	r3, [sp, #4]
 80125a6:	6a3b      	ldr	r3, [r7, #32]
 80125a8:	9300      	str	r3, [sp, #0]
 80125aa:	4613      	mov	r3, r2
 80125ac:	687a      	ldr	r2, [r7, #4]
 80125ae:	68b9      	ldr	r1, [r7, #8]
 80125b0:	68f8      	ldr	r0, [r7, #12]
 80125b2:	f000 f811 	bl	80125d8 <udp_sendto_if_src>
 80125b6:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 80125b8:	4618      	mov	r0, r3
 80125ba:	3718      	adds	r7, #24
 80125bc:	46bd      	mov	sp, r7
 80125be:	bd80      	pop	{r7, pc}
 80125c0:	0801ebf8 	.word	0x0801ebf8
 80125c4:	0801ed6c 	.word	0x0801ed6c
 80125c8:	0801ec4c 	.word	0x0801ec4c
 80125cc:	0801ed88 	.word	0x0801ed88
 80125d0:	0801eda4 	.word	0x0801eda4
 80125d4:	0801edc4 	.word	0x0801edc4

080125d8 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 80125d8:	b580      	push	{r7, lr}
 80125da:	b08c      	sub	sp, #48	; 0x30
 80125dc:	af04      	add	r7, sp, #16
 80125de:	60f8      	str	r0, [r7, #12]
 80125e0:	60b9      	str	r1, [r7, #8]
 80125e2:	607a      	str	r2, [r7, #4]
 80125e4:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 80125e6:	68fb      	ldr	r3, [r7, #12]
 80125e8:	2b00      	cmp	r3, #0
 80125ea:	d109      	bne.n	8012600 <udp_sendto_if_src+0x28>
 80125ec:	4b65      	ldr	r3, [pc, #404]	; (8012784 <udp_sendto_if_src+0x1ac>)
 80125ee:	f240 22d1 	movw	r2, #721	; 0x2d1
 80125f2:	4965      	ldr	r1, [pc, #404]	; (8012788 <udp_sendto_if_src+0x1b0>)
 80125f4:	4865      	ldr	r0, [pc, #404]	; (801278c <udp_sendto_if_src+0x1b4>)
 80125f6:	f005 f93b 	bl	8017870 <iprintf>
 80125fa:	f06f 030f 	mvn.w	r3, #15
 80125fe:	e0bc      	b.n	801277a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8012600:	68bb      	ldr	r3, [r7, #8]
 8012602:	2b00      	cmp	r3, #0
 8012604:	d109      	bne.n	801261a <udp_sendto_if_src+0x42>
 8012606:	4b5f      	ldr	r3, [pc, #380]	; (8012784 <udp_sendto_if_src+0x1ac>)
 8012608:	f240 22d2 	movw	r2, #722	; 0x2d2
 801260c:	4960      	ldr	r1, [pc, #384]	; (8012790 <udp_sendto_if_src+0x1b8>)
 801260e:	485f      	ldr	r0, [pc, #380]	; (801278c <udp_sendto_if_src+0x1b4>)
 8012610:	f005 f92e 	bl	8017870 <iprintf>
 8012614:	f06f 030f 	mvn.w	r3, #15
 8012618:	e0af      	b.n	801277a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801261a:	687b      	ldr	r3, [r7, #4]
 801261c:	2b00      	cmp	r3, #0
 801261e:	d109      	bne.n	8012634 <udp_sendto_if_src+0x5c>
 8012620:	4b58      	ldr	r3, [pc, #352]	; (8012784 <udp_sendto_if_src+0x1ac>)
 8012622:	f240 22d3 	movw	r2, #723	; 0x2d3
 8012626:	495b      	ldr	r1, [pc, #364]	; (8012794 <udp_sendto_if_src+0x1bc>)
 8012628:	4858      	ldr	r0, [pc, #352]	; (801278c <udp_sendto_if_src+0x1b4>)
 801262a:	f005 f921 	bl	8017870 <iprintf>
 801262e:	f06f 030f 	mvn.w	r3, #15
 8012632:	e0a2      	b.n	801277a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8012634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012636:	2b00      	cmp	r3, #0
 8012638:	d109      	bne.n	801264e <udp_sendto_if_src+0x76>
 801263a:	4b52      	ldr	r3, [pc, #328]	; (8012784 <udp_sendto_if_src+0x1ac>)
 801263c:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 8012640:	4955      	ldr	r1, [pc, #340]	; (8012798 <udp_sendto_if_src+0x1c0>)
 8012642:	4852      	ldr	r0, [pc, #328]	; (801278c <udp_sendto_if_src+0x1b4>)
 8012644:	f005 f914 	bl	8017870 <iprintf>
 8012648:	f06f 030f 	mvn.w	r3, #15
 801264c:	e095      	b.n	801277a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 801264e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012650:	2b00      	cmp	r3, #0
 8012652:	d109      	bne.n	8012668 <udp_sendto_if_src+0x90>
 8012654:	4b4b      	ldr	r3, [pc, #300]	; (8012784 <udp_sendto_if_src+0x1ac>)
 8012656:	f240 22d5 	movw	r2, #725	; 0x2d5
 801265a:	4950      	ldr	r1, [pc, #320]	; (801279c <udp_sendto_if_src+0x1c4>)
 801265c:	484b      	ldr	r0, [pc, #300]	; (801278c <udp_sendto_if_src+0x1b4>)
 801265e:	f005 f907 	bl	8017870 <iprintf>
 8012662:	f06f 030f 	mvn.w	r3, #15
 8012666:	e088      	b.n	801277a <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8012668:	68fb      	ldr	r3, [r7, #12]
 801266a:	8a5b      	ldrh	r3, [r3, #18]
 801266c:	2b00      	cmp	r3, #0
 801266e:	d10f      	bne.n	8012690 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8012670:	68f9      	ldr	r1, [r7, #12]
 8012672:	68fb      	ldr	r3, [r7, #12]
 8012674:	8a5b      	ldrh	r3, [r3, #18]
 8012676:	461a      	mov	r2, r3
 8012678:	68f8      	ldr	r0, [r7, #12]
 801267a:	f000 f893 	bl	80127a4 <udp_bind>
 801267e:	4603      	mov	r3, r0
 8012680:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 8012682:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8012686:	2b00      	cmp	r3, #0
 8012688:	d002      	beq.n	8012690 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 801268a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801268e:	e074      	b.n	801277a <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8012690:	68bb      	ldr	r3, [r7, #8]
 8012692:	891b      	ldrh	r3, [r3, #8]
 8012694:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8012698:	4293      	cmp	r3, r2
 801269a:	d902      	bls.n	80126a2 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 801269c:	f04f 33ff 	mov.w	r3, #4294967295
 80126a0:	e06b      	b.n	801277a <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 80126a2:	2108      	movs	r1, #8
 80126a4:	68b8      	ldr	r0, [r7, #8]
 80126a6:	f7f9 ffcf 	bl	800c648 <pbuf_add_header>
 80126aa:	4603      	mov	r3, r0
 80126ac:	2b00      	cmp	r3, #0
 80126ae:	d015      	beq.n	80126dc <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 80126b0:	f44f 7220 	mov.w	r2, #640	; 0x280
 80126b4:	2108      	movs	r1, #8
 80126b6:	2022      	movs	r0, #34	; 0x22
 80126b8:	f7f9 fd78 	bl	800c1ac <pbuf_alloc>
 80126bc:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 80126be:	69fb      	ldr	r3, [r7, #28]
 80126c0:	2b00      	cmp	r3, #0
 80126c2:	d102      	bne.n	80126ca <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 80126c4:	f04f 33ff 	mov.w	r3, #4294967295
 80126c8:	e057      	b.n	801277a <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 80126ca:	68bb      	ldr	r3, [r7, #8]
 80126cc:	891b      	ldrh	r3, [r3, #8]
 80126ce:	2b00      	cmp	r3, #0
 80126d0:	d006      	beq.n	80126e0 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 80126d2:	68b9      	ldr	r1, [r7, #8]
 80126d4:	69f8      	ldr	r0, [r7, #28]
 80126d6:	f7fa f965 	bl	800c9a4 <pbuf_chain>
 80126da:	e001      	b.n	80126e0 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 80126dc:	68bb      	ldr	r3, [r7, #8]
 80126de:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 80126e0:	69fb      	ldr	r3, [r7, #28]
 80126e2:	895b      	ldrh	r3, [r3, #10]
 80126e4:	2b07      	cmp	r3, #7
 80126e6:	d806      	bhi.n	80126f6 <udp_sendto_if_src+0x11e>
 80126e8:	4b26      	ldr	r3, [pc, #152]	; (8012784 <udp_sendto_if_src+0x1ac>)
 80126ea:	f240 320d 	movw	r2, #781	; 0x30d
 80126ee:	492c      	ldr	r1, [pc, #176]	; (80127a0 <udp_sendto_if_src+0x1c8>)
 80126f0:	4826      	ldr	r0, [pc, #152]	; (801278c <udp_sendto_if_src+0x1b4>)
 80126f2:	f005 f8bd 	bl	8017870 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 80126f6:	69fb      	ldr	r3, [r7, #28]
 80126f8:	685b      	ldr	r3, [r3, #4]
 80126fa:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 80126fc:	68fb      	ldr	r3, [r7, #12]
 80126fe:	8a5b      	ldrh	r3, [r3, #18]
 8012700:	4618      	mov	r0, r3
 8012702:	f7f8 fd9b 	bl	800b23c <lwip_htons>
 8012706:	4603      	mov	r3, r0
 8012708:	461a      	mov	r2, r3
 801270a:	697b      	ldr	r3, [r7, #20]
 801270c:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 801270e:	887b      	ldrh	r3, [r7, #2]
 8012710:	4618      	mov	r0, r3
 8012712:	f7f8 fd93 	bl	800b23c <lwip_htons>
 8012716:	4603      	mov	r3, r0
 8012718:	461a      	mov	r2, r3
 801271a:	697b      	ldr	r3, [r7, #20]
 801271c:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 801271e:	697b      	ldr	r3, [r7, #20]
 8012720:	2200      	movs	r2, #0
 8012722:	719a      	strb	r2, [r3, #6]
 8012724:	2200      	movs	r2, #0
 8012726:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8012728:	69fb      	ldr	r3, [r7, #28]
 801272a:	891b      	ldrh	r3, [r3, #8]
 801272c:	4618      	mov	r0, r3
 801272e:	f7f8 fd85 	bl	800b23c <lwip_htons>
 8012732:	4603      	mov	r3, r0
 8012734:	461a      	mov	r2, r3
 8012736:	697b      	ldr	r3, [r7, #20]
 8012738:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 801273a:	2311      	movs	r3, #17
 801273c:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 801273e:	68fb      	ldr	r3, [r7, #12]
 8012740:	7adb      	ldrb	r3, [r3, #11]
 8012742:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8012744:	68fb      	ldr	r3, [r7, #12]
 8012746:	7a9b      	ldrb	r3, [r3, #10]
 8012748:	7cb9      	ldrb	r1, [r7, #18]
 801274a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801274c:	9202      	str	r2, [sp, #8]
 801274e:	7cfa      	ldrb	r2, [r7, #19]
 8012750:	9201      	str	r2, [sp, #4]
 8012752:	9300      	str	r3, [sp, #0]
 8012754:	460b      	mov	r3, r1
 8012756:	687a      	ldr	r2, [r7, #4]
 8012758:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801275a:	69f8      	ldr	r0, [r7, #28]
 801275c:	f003 fafc 	bl	8015d58 <ip4_output_if_src>
 8012760:	4603      	mov	r3, r0
 8012762:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8012764:	69fa      	ldr	r2, [r7, #28]
 8012766:	68bb      	ldr	r3, [r7, #8]
 8012768:	429a      	cmp	r2, r3
 801276a:	d004      	beq.n	8012776 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 801276c:	69f8      	ldr	r0, [r7, #28]
 801276e:	f7fa f801 	bl	800c774 <pbuf_free>
    q = NULL;
 8012772:	2300      	movs	r3, #0
 8012774:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 8012776:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 801277a:	4618      	mov	r0, r3
 801277c:	3720      	adds	r7, #32
 801277e:	46bd      	mov	sp, r7
 8012780:	bd80      	pop	{r7, pc}
 8012782:	bf00      	nop
 8012784:	0801ebf8 	.word	0x0801ebf8
 8012788:	0801ede4 	.word	0x0801ede4
 801278c:	0801ec4c 	.word	0x0801ec4c
 8012790:	0801ee04 	.word	0x0801ee04
 8012794:	0801ee24 	.word	0x0801ee24
 8012798:	0801ee48 	.word	0x0801ee48
 801279c:	0801ee6c 	.word	0x0801ee6c
 80127a0:	0801ee90 	.word	0x0801ee90

080127a4 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80127a4:	b580      	push	{r7, lr}
 80127a6:	b086      	sub	sp, #24
 80127a8:	af00      	add	r7, sp, #0
 80127aa:	60f8      	str	r0, [r7, #12]
 80127ac:	60b9      	str	r1, [r7, #8]
 80127ae:	4613      	mov	r3, r2
 80127b0:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80127b2:	68bb      	ldr	r3, [r7, #8]
 80127b4:	2b00      	cmp	r3, #0
 80127b6:	d101      	bne.n	80127bc <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 80127b8:	4b39      	ldr	r3, [pc, #228]	; (80128a0 <udp_bind+0xfc>)
 80127ba:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 80127bc:	68fb      	ldr	r3, [r7, #12]
 80127be:	2b00      	cmp	r3, #0
 80127c0:	d109      	bne.n	80127d6 <udp_bind+0x32>
 80127c2:	4b38      	ldr	r3, [pc, #224]	; (80128a4 <udp_bind+0x100>)
 80127c4:	f240 32b7 	movw	r2, #951	; 0x3b7
 80127c8:	4937      	ldr	r1, [pc, #220]	; (80128a8 <udp_bind+0x104>)
 80127ca:	4838      	ldr	r0, [pc, #224]	; (80128ac <udp_bind+0x108>)
 80127cc:	f005 f850 	bl	8017870 <iprintf>
 80127d0:	f06f 030f 	mvn.w	r3, #15
 80127d4:	e060      	b.n	8012898 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 80127d6:	2300      	movs	r3, #0
 80127d8:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80127da:	4b35      	ldr	r3, [pc, #212]	; (80128b0 <udp_bind+0x10c>)
 80127dc:	681b      	ldr	r3, [r3, #0]
 80127de:	617b      	str	r3, [r7, #20]
 80127e0:	e009      	b.n	80127f6 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 80127e2:	68fa      	ldr	r2, [r7, #12]
 80127e4:	697b      	ldr	r3, [r7, #20]
 80127e6:	429a      	cmp	r2, r3
 80127e8:	d102      	bne.n	80127f0 <udp_bind+0x4c>
      rebind = 1;
 80127ea:	2301      	movs	r3, #1
 80127ec:	74fb      	strb	r3, [r7, #19]
      break;
 80127ee:	e005      	b.n	80127fc <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80127f0:	697b      	ldr	r3, [r7, #20]
 80127f2:	68db      	ldr	r3, [r3, #12]
 80127f4:	617b      	str	r3, [r7, #20]
 80127f6:	697b      	ldr	r3, [r7, #20]
 80127f8:	2b00      	cmp	r3, #0
 80127fa:	d1f2      	bne.n	80127e2 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 80127fc:	88fb      	ldrh	r3, [r7, #6]
 80127fe:	2b00      	cmp	r3, #0
 8012800:	d109      	bne.n	8012816 <udp_bind+0x72>
    port = udp_new_port();
 8012802:	f7ff fcc5 	bl	8012190 <udp_new_port>
 8012806:	4603      	mov	r3, r0
 8012808:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 801280a:	88fb      	ldrh	r3, [r7, #6]
 801280c:	2b00      	cmp	r3, #0
 801280e:	d12c      	bne.n	801286a <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8012810:	f06f 0307 	mvn.w	r3, #7
 8012814:	e040      	b.n	8012898 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8012816:	4b26      	ldr	r3, [pc, #152]	; (80128b0 <udp_bind+0x10c>)
 8012818:	681b      	ldr	r3, [r3, #0]
 801281a:	617b      	str	r3, [r7, #20]
 801281c:	e022      	b.n	8012864 <udp_bind+0xc0>
      if (pcb != ipcb) {
 801281e:	68fa      	ldr	r2, [r7, #12]
 8012820:	697b      	ldr	r3, [r7, #20]
 8012822:	429a      	cmp	r2, r3
 8012824:	d01b      	beq.n	801285e <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8012826:	697b      	ldr	r3, [r7, #20]
 8012828:	8a5b      	ldrh	r3, [r3, #18]
 801282a:	88fa      	ldrh	r2, [r7, #6]
 801282c:	429a      	cmp	r2, r3
 801282e:	d116      	bne.n	801285e <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8012830:	697b      	ldr	r3, [r7, #20]
 8012832:	681a      	ldr	r2, [r3, #0]
 8012834:	68bb      	ldr	r3, [r7, #8]
 8012836:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8012838:	429a      	cmp	r2, r3
 801283a:	d00d      	beq.n	8012858 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801283c:	68bb      	ldr	r3, [r7, #8]
 801283e:	2b00      	cmp	r3, #0
 8012840:	d00a      	beq.n	8012858 <udp_bind+0xb4>
 8012842:	68bb      	ldr	r3, [r7, #8]
 8012844:	681b      	ldr	r3, [r3, #0]
 8012846:	2b00      	cmp	r3, #0
 8012848:	d006      	beq.n	8012858 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801284a:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801284c:	2b00      	cmp	r3, #0
 801284e:	d003      	beq.n	8012858 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8012850:	697b      	ldr	r3, [r7, #20]
 8012852:	681b      	ldr	r3, [r3, #0]
 8012854:	2b00      	cmp	r3, #0
 8012856:	d102      	bne.n	801285e <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8012858:	f06f 0307 	mvn.w	r3, #7
 801285c:	e01c      	b.n	8012898 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801285e:	697b      	ldr	r3, [r7, #20]
 8012860:	68db      	ldr	r3, [r3, #12]
 8012862:	617b      	str	r3, [r7, #20]
 8012864:	697b      	ldr	r3, [r7, #20]
 8012866:	2b00      	cmp	r3, #0
 8012868:	d1d9      	bne.n	801281e <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 801286a:	68bb      	ldr	r3, [r7, #8]
 801286c:	2b00      	cmp	r3, #0
 801286e:	d002      	beq.n	8012876 <udp_bind+0xd2>
 8012870:	68bb      	ldr	r3, [r7, #8]
 8012872:	681b      	ldr	r3, [r3, #0]
 8012874:	e000      	b.n	8012878 <udp_bind+0xd4>
 8012876:	2300      	movs	r3, #0
 8012878:	68fa      	ldr	r2, [r7, #12]
 801287a:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 801287c:	68fb      	ldr	r3, [r7, #12]
 801287e:	88fa      	ldrh	r2, [r7, #6]
 8012880:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8012882:	7cfb      	ldrb	r3, [r7, #19]
 8012884:	2b00      	cmp	r3, #0
 8012886:	d106      	bne.n	8012896 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8012888:	4b09      	ldr	r3, [pc, #36]	; (80128b0 <udp_bind+0x10c>)
 801288a:	681a      	ldr	r2, [r3, #0]
 801288c:	68fb      	ldr	r3, [r7, #12]
 801288e:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8012890:	4a07      	ldr	r2, [pc, #28]	; (80128b0 <udp_bind+0x10c>)
 8012892:	68fb      	ldr	r3, [r7, #12]
 8012894:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8012896:	2300      	movs	r3, #0
}
 8012898:	4618      	mov	r0, r3
 801289a:	3718      	adds	r7, #24
 801289c:	46bd      	mov	sp, r7
 801289e:	bd80      	pop	{r7, pc}
 80128a0:	0801fac8 	.word	0x0801fac8
 80128a4:	0801ebf8 	.word	0x0801ebf8
 80128a8:	0801eec0 	.word	0x0801eec0
 80128ac:	0801ec4c 	.word	0x0801ec4c
 80128b0:	20006e54 	.word	0x20006e54

080128b4 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80128b4:	b580      	push	{r7, lr}
 80128b6:	b086      	sub	sp, #24
 80128b8:	af00      	add	r7, sp, #0
 80128ba:	60f8      	str	r0, [r7, #12]
 80128bc:	60b9      	str	r1, [r7, #8]
 80128be:	4613      	mov	r3, r2
 80128c0:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 80128c2:	68fb      	ldr	r3, [r7, #12]
 80128c4:	2b00      	cmp	r3, #0
 80128c6:	d109      	bne.n	80128dc <udp_connect+0x28>
 80128c8:	4b2c      	ldr	r3, [pc, #176]	; (801297c <udp_connect+0xc8>)
 80128ca:	f240 4235 	movw	r2, #1077	; 0x435
 80128ce:	492c      	ldr	r1, [pc, #176]	; (8012980 <udp_connect+0xcc>)
 80128d0:	482c      	ldr	r0, [pc, #176]	; (8012984 <udp_connect+0xd0>)
 80128d2:	f004 ffcd 	bl	8017870 <iprintf>
 80128d6:	f06f 030f 	mvn.w	r3, #15
 80128da:	e04b      	b.n	8012974 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 80128dc:	68bb      	ldr	r3, [r7, #8]
 80128de:	2b00      	cmp	r3, #0
 80128e0:	d109      	bne.n	80128f6 <udp_connect+0x42>
 80128e2:	4b26      	ldr	r3, [pc, #152]	; (801297c <udp_connect+0xc8>)
 80128e4:	f240 4236 	movw	r2, #1078	; 0x436
 80128e8:	4927      	ldr	r1, [pc, #156]	; (8012988 <udp_connect+0xd4>)
 80128ea:	4826      	ldr	r0, [pc, #152]	; (8012984 <udp_connect+0xd0>)
 80128ec:	f004 ffc0 	bl	8017870 <iprintf>
 80128f0:	f06f 030f 	mvn.w	r3, #15
 80128f4:	e03e      	b.n	8012974 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 80128f6:	68fb      	ldr	r3, [r7, #12]
 80128f8:	8a5b      	ldrh	r3, [r3, #18]
 80128fa:	2b00      	cmp	r3, #0
 80128fc:	d10f      	bne.n	801291e <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 80128fe:	68f9      	ldr	r1, [r7, #12]
 8012900:	68fb      	ldr	r3, [r7, #12]
 8012902:	8a5b      	ldrh	r3, [r3, #18]
 8012904:	461a      	mov	r2, r3
 8012906:	68f8      	ldr	r0, [r7, #12]
 8012908:	f7ff ff4c 	bl	80127a4 <udp_bind>
 801290c:	4603      	mov	r3, r0
 801290e:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8012910:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012914:	2b00      	cmp	r3, #0
 8012916:	d002      	beq.n	801291e <udp_connect+0x6a>
      return err;
 8012918:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801291c:	e02a      	b.n	8012974 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 801291e:	68bb      	ldr	r3, [r7, #8]
 8012920:	2b00      	cmp	r3, #0
 8012922:	d002      	beq.n	801292a <udp_connect+0x76>
 8012924:	68bb      	ldr	r3, [r7, #8]
 8012926:	681b      	ldr	r3, [r3, #0]
 8012928:	e000      	b.n	801292c <udp_connect+0x78>
 801292a:	2300      	movs	r3, #0
 801292c:	68fa      	ldr	r2, [r7, #12]
 801292e:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 8012930:	68fb      	ldr	r3, [r7, #12]
 8012932:	88fa      	ldrh	r2, [r7, #6]
 8012934:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 8012936:	68fb      	ldr	r3, [r7, #12]
 8012938:	7c1b      	ldrb	r3, [r3, #16]
 801293a:	f043 0304 	orr.w	r3, r3, #4
 801293e:	b2da      	uxtb	r2, r3
 8012940:	68fb      	ldr	r3, [r7, #12]
 8012942:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8012944:	4b11      	ldr	r3, [pc, #68]	; (801298c <udp_connect+0xd8>)
 8012946:	681b      	ldr	r3, [r3, #0]
 8012948:	617b      	str	r3, [r7, #20]
 801294a:	e008      	b.n	801295e <udp_connect+0xaa>
    if (pcb == ipcb) {
 801294c:	68fa      	ldr	r2, [r7, #12]
 801294e:	697b      	ldr	r3, [r7, #20]
 8012950:	429a      	cmp	r2, r3
 8012952:	d101      	bne.n	8012958 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 8012954:	2300      	movs	r3, #0
 8012956:	e00d      	b.n	8012974 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8012958:	697b      	ldr	r3, [r7, #20]
 801295a:	68db      	ldr	r3, [r3, #12]
 801295c:	617b      	str	r3, [r7, #20]
 801295e:	697b      	ldr	r3, [r7, #20]
 8012960:	2b00      	cmp	r3, #0
 8012962:	d1f3      	bne.n	801294c <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 8012964:	4b09      	ldr	r3, [pc, #36]	; (801298c <udp_connect+0xd8>)
 8012966:	681a      	ldr	r2, [r3, #0]
 8012968:	68fb      	ldr	r3, [r7, #12]
 801296a:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 801296c:	4a07      	ldr	r2, [pc, #28]	; (801298c <udp_connect+0xd8>)
 801296e:	68fb      	ldr	r3, [r7, #12]
 8012970:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 8012972:	2300      	movs	r3, #0
}
 8012974:	4618      	mov	r0, r3
 8012976:	3718      	adds	r7, #24
 8012978:	46bd      	mov	sp, r7
 801297a:	bd80      	pop	{r7, pc}
 801297c:	0801ebf8 	.word	0x0801ebf8
 8012980:	0801eed8 	.word	0x0801eed8
 8012984:	0801ec4c 	.word	0x0801ec4c
 8012988:	0801eef4 	.word	0x0801eef4
 801298c:	20006e54 	.word	0x20006e54

08012990 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8012990:	b580      	push	{r7, lr}
 8012992:	b084      	sub	sp, #16
 8012994:	af00      	add	r7, sp, #0
 8012996:	60f8      	str	r0, [r7, #12]
 8012998:	60b9      	str	r1, [r7, #8]
 801299a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 801299c:	68fb      	ldr	r3, [r7, #12]
 801299e:	2b00      	cmp	r3, #0
 80129a0:	d107      	bne.n	80129b2 <udp_recv+0x22>
 80129a2:	4b08      	ldr	r3, [pc, #32]	; (80129c4 <udp_recv+0x34>)
 80129a4:	f240 428a 	movw	r2, #1162	; 0x48a
 80129a8:	4907      	ldr	r1, [pc, #28]	; (80129c8 <udp_recv+0x38>)
 80129aa:	4808      	ldr	r0, [pc, #32]	; (80129cc <udp_recv+0x3c>)
 80129ac:	f004 ff60 	bl	8017870 <iprintf>
 80129b0:	e005      	b.n	80129be <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 80129b2:	68fb      	ldr	r3, [r7, #12]
 80129b4:	68ba      	ldr	r2, [r7, #8]
 80129b6:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 80129b8:	68fb      	ldr	r3, [r7, #12]
 80129ba:	687a      	ldr	r2, [r7, #4]
 80129bc:	61da      	str	r2, [r3, #28]
}
 80129be:	3710      	adds	r7, #16
 80129c0:	46bd      	mov	sp, r7
 80129c2:	bd80      	pop	{r7, pc}
 80129c4:	0801ebf8 	.word	0x0801ebf8
 80129c8:	0801ef2c 	.word	0x0801ef2c
 80129cc:	0801ec4c 	.word	0x0801ec4c

080129d0 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 80129d0:	b580      	push	{r7, lr}
 80129d2:	b084      	sub	sp, #16
 80129d4:	af00      	add	r7, sp, #0
 80129d6:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 80129d8:	687b      	ldr	r3, [r7, #4]
 80129da:	2b00      	cmp	r3, #0
 80129dc:	d107      	bne.n	80129ee <udp_remove+0x1e>
 80129de:	4b19      	ldr	r3, [pc, #100]	; (8012a44 <udp_remove+0x74>)
 80129e0:	f240 42a1 	movw	r2, #1185	; 0x4a1
 80129e4:	4918      	ldr	r1, [pc, #96]	; (8012a48 <udp_remove+0x78>)
 80129e6:	4819      	ldr	r0, [pc, #100]	; (8012a4c <udp_remove+0x7c>)
 80129e8:	f004 ff42 	bl	8017870 <iprintf>
 80129ec:	e026      	b.n	8012a3c <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 80129ee:	4b18      	ldr	r3, [pc, #96]	; (8012a50 <udp_remove+0x80>)
 80129f0:	681b      	ldr	r3, [r3, #0]
 80129f2:	687a      	ldr	r2, [r7, #4]
 80129f4:	429a      	cmp	r2, r3
 80129f6:	d105      	bne.n	8012a04 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 80129f8:	4b15      	ldr	r3, [pc, #84]	; (8012a50 <udp_remove+0x80>)
 80129fa:	681b      	ldr	r3, [r3, #0]
 80129fc:	68db      	ldr	r3, [r3, #12]
 80129fe:	4a14      	ldr	r2, [pc, #80]	; (8012a50 <udp_remove+0x80>)
 8012a00:	6013      	str	r3, [r2, #0]
 8012a02:	e017      	b.n	8012a34 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8012a04:	4b12      	ldr	r3, [pc, #72]	; (8012a50 <udp_remove+0x80>)
 8012a06:	681b      	ldr	r3, [r3, #0]
 8012a08:	60fb      	str	r3, [r7, #12]
 8012a0a:	e010      	b.n	8012a2e <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8012a0c:	68fb      	ldr	r3, [r7, #12]
 8012a0e:	68db      	ldr	r3, [r3, #12]
 8012a10:	2b00      	cmp	r3, #0
 8012a12:	d009      	beq.n	8012a28 <udp_remove+0x58>
 8012a14:	68fb      	ldr	r3, [r7, #12]
 8012a16:	68db      	ldr	r3, [r3, #12]
 8012a18:	687a      	ldr	r2, [r7, #4]
 8012a1a:	429a      	cmp	r2, r3
 8012a1c:	d104      	bne.n	8012a28 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8012a1e:	687b      	ldr	r3, [r7, #4]
 8012a20:	68da      	ldr	r2, [r3, #12]
 8012a22:	68fb      	ldr	r3, [r7, #12]
 8012a24:	60da      	str	r2, [r3, #12]
        break;
 8012a26:	e005      	b.n	8012a34 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8012a28:	68fb      	ldr	r3, [r7, #12]
 8012a2a:	68db      	ldr	r3, [r3, #12]
 8012a2c:	60fb      	str	r3, [r7, #12]
 8012a2e:	68fb      	ldr	r3, [r7, #12]
 8012a30:	2b00      	cmp	r3, #0
 8012a32:	d1eb      	bne.n	8012a0c <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8012a34:	6879      	ldr	r1, [r7, #4]
 8012a36:	2000      	movs	r0, #0
 8012a38:	f7f9 f8a2 	bl	800bb80 <memp_free>
}
 8012a3c:	3710      	adds	r7, #16
 8012a3e:	46bd      	mov	sp, r7
 8012a40:	bd80      	pop	{r7, pc}
 8012a42:	bf00      	nop
 8012a44:	0801ebf8 	.word	0x0801ebf8
 8012a48:	0801ef44 	.word	0x0801ef44
 8012a4c:	0801ec4c 	.word	0x0801ec4c
 8012a50:	20006e54 	.word	0x20006e54

08012a54 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8012a54:	b580      	push	{r7, lr}
 8012a56:	b082      	sub	sp, #8
 8012a58:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8012a5a:	2000      	movs	r0, #0
 8012a5c:	f7f9 f844 	bl	800bae8 <memp_malloc>
 8012a60:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8012a62:	687b      	ldr	r3, [r7, #4]
 8012a64:	2b00      	cmp	r3, #0
 8012a66:	d007      	beq.n	8012a78 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8012a68:	2220      	movs	r2, #32
 8012a6a:	2100      	movs	r1, #0
 8012a6c:	6878      	ldr	r0, [r7, #4]
 8012a6e:	f004 f9e3 	bl	8016e38 <memset>
    pcb->ttl = UDP_TTL;
 8012a72:	687b      	ldr	r3, [r7, #4]
 8012a74:	22ff      	movs	r2, #255	; 0xff
 8012a76:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8012a78:	687b      	ldr	r3, [r7, #4]
}
 8012a7a:	4618      	mov	r0, r3
 8012a7c:	3708      	adds	r7, #8
 8012a7e:	46bd      	mov	sp, r7
 8012a80:	bd80      	pop	{r7, pc}
	...

08012a84 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8012a84:	b480      	push	{r7}
 8012a86:	b085      	sub	sp, #20
 8012a88:	af00      	add	r7, sp, #0
 8012a8a:	6078      	str	r0, [r7, #4]
 8012a8c:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8012a8e:	687b      	ldr	r3, [r7, #4]
 8012a90:	2b00      	cmp	r3, #0
 8012a92:	d01e      	beq.n	8012ad2 <udp_netif_ip_addr_changed+0x4e>
 8012a94:	687b      	ldr	r3, [r7, #4]
 8012a96:	681b      	ldr	r3, [r3, #0]
 8012a98:	2b00      	cmp	r3, #0
 8012a9a:	d01a      	beq.n	8012ad2 <udp_netif_ip_addr_changed+0x4e>
 8012a9c:	683b      	ldr	r3, [r7, #0]
 8012a9e:	2b00      	cmp	r3, #0
 8012aa0:	d017      	beq.n	8012ad2 <udp_netif_ip_addr_changed+0x4e>
 8012aa2:	683b      	ldr	r3, [r7, #0]
 8012aa4:	681b      	ldr	r3, [r3, #0]
 8012aa6:	2b00      	cmp	r3, #0
 8012aa8:	d013      	beq.n	8012ad2 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8012aaa:	4b0d      	ldr	r3, [pc, #52]	; (8012ae0 <udp_netif_ip_addr_changed+0x5c>)
 8012aac:	681b      	ldr	r3, [r3, #0]
 8012aae:	60fb      	str	r3, [r7, #12]
 8012ab0:	e00c      	b.n	8012acc <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8012ab2:	68fb      	ldr	r3, [r7, #12]
 8012ab4:	681a      	ldr	r2, [r3, #0]
 8012ab6:	687b      	ldr	r3, [r7, #4]
 8012ab8:	681b      	ldr	r3, [r3, #0]
 8012aba:	429a      	cmp	r2, r3
 8012abc:	d103      	bne.n	8012ac6 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8012abe:	683b      	ldr	r3, [r7, #0]
 8012ac0:	681a      	ldr	r2, [r3, #0]
 8012ac2:	68fb      	ldr	r3, [r7, #12]
 8012ac4:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8012ac6:	68fb      	ldr	r3, [r7, #12]
 8012ac8:	68db      	ldr	r3, [r3, #12]
 8012aca:	60fb      	str	r3, [r7, #12]
 8012acc:	68fb      	ldr	r3, [r7, #12]
 8012ace:	2b00      	cmp	r3, #0
 8012ad0:	d1ef      	bne.n	8012ab2 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8012ad2:	bf00      	nop
 8012ad4:	3714      	adds	r7, #20
 8012ad6:	46bd      	mov	sp, r7
 8012ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012adc:	4770      	bx	lr
 8012ade:	bf00      	nop
 8012ae0:	20006e54 	.word	0x20006e54

08012ae4 <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 8012ae4:	b580      	push	{r7, lr}
 8012ae6:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 8012ae8:	4b20      	ldr	r3, [pc, #128]	; (8012b6c <dhcp_inc_pcb_refcount+0x88>)
 8012aea:	781b      	ldrb	r3, [r3, #0]
 8012aec:	2b00      	cmp	r3, #0
 8012aee:	d133      	bne.n	8012b58 <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 8012af0:	4b1f      	ldr	r3, [pc, #124]	; (8012b70 <dhcp_inc_pcb_refcount+0x8c>)
 8012af2:	681b      	ldr	r3, [r3, #0]
 8012af4:	2b00      	cmp	r3, #0
 8012af6:	d005      	beq.n	8012b04 <dhcp_inc_pcb_refcount+0x20>
 8012af8:	4b1e      	ldr	r3, [pc, #120]	; (8012b74 <dhcp_inc_pcb_refcount+0x90>)
 8012afa:	22e5      	movs	r2, #229	; 0xe5
 8012afc:	491e      	ldr	r1, [pc, #120]	; (8012b78 <dhcp_inc_pcb_refcount+0x94>)
 8012afe:	481f      	ldr	r0, [pc, #124]	; (8012b7c <dhcp_inc_pcb_refcount+0x98>)
 8012b00:	f004 feb6 	bl	8017870 <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 8012b04:	f7ff ffa6 	bl	8012a54 <udp_new>
 8012b08:	4603      	mov	r3, r0
 8012b0a:	4a19      	ldr	r2, [pc, #100]	; (8012b70 <dhcp_inc_pcb_refcount+0x8c>)
 8012b0c:	6013      	str	r3, [r2, #0]

    if (dhcp_pcb == NULL) {
 8012b0e:	4b18      	ldr	r3, [pc, #96]	; (8012b70 <dhcp_inc_pcb_refcount+0x8c>)
 8012b10:	681b      	ldr	r3, [r3, #0]
 8012b12:	2b00      	cmp	r3, #0
 8012b14:	d102      	bne.n	8012b1c <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 8012b16:	f04f 33ff 	mov.w	r3, #4294967295
 8012b1a:	e024      	b.n	8012b66 <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 8012b1c:	4b14      	ldr	r3, [pc, #80]	; (8012b70 <dhcp_inc_pcb_refcount+0x8c>)
 8012b1e:	681b      	ldr	r3, [r3, #0]
 8012b20:	7a5a      	ldrb	r2, [r3, #9]
 8012b22:	4b13      	ldr	r3, [pc, #76]	; (8012b70 <dhcp_inc_pcb_refcount+0x8c>)
 8012b24:	681b      	ldr	r3, [r3, #0]
 8012b26:	f042 0220 	orr.w	r2, r2, #32
 8012b2a:	b2d2      	uxtb	r2, r2
 8012b2c:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 8012b2e:	4b10      	ldr	r3, [pc, #64]	; (8012b70 <dhcp_inc_pcb_refcount+0x8c>)
 8012b30:	681b      	ldr	r3, [r3, #0]
 8012b32:	2244      	movs	r2, #68	; 0x44
 8012b34:	4912      	ldr	r1, [pc, #72]	; (8012b80 <dhcp_inc_pcb_refcount+0x9c>)
 8012b36:	4618      	mov	r0, r3
 8012b38:	f7ff fe34 	bl	80127a4 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 8012b3c:	4b0c      	ldr	r3, [pc, #48]	; (8012b70 <dhcp_inc_pcb_refcount+0x8c>)
 8012b3e:	681b      	ldr	r3, [r3, #0]
 8012b40:	2243      	movs	r2, #67	; 0x43
 8012b42:	490f      	ldr	r1, [pc, #60]	; (8012b80 <dhcp_inc_pcb_refcount+0x9c>)
 8012b44:	4618      	mov	r0, r3
 8012b46:	f7ff feb5 	bl	80128b4 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 8012b4a:	4b09      	ldr	r3, [pc, #36]	; (8012b70 <dhcp_inc_pcb_refcount+0x8c>)
 8012b4c:	681b      	ldr	r3, [r3, #0]
 8012b4e:	2200      	movs	r2, #0
 8012b50:	490c      	ldr	r1, [pc, #48]	; (8012b84 <dhcp_inc_pcb_refcount+0xa0>)
 8012b52:	4618      	mov	r0, r3
 8012b54:	f7ff ff1c 	bl	8012990 <udp_recv>
  }

  dhcp_pcb_refcount++;
 8012b58:	4b04      	ldr	r3, [pc, #16]	; (8012b6c <dhcp_inc_pcb_refcount+0x88>)
 8012b5a:	781b      	ldrb	r3, [r3, #0]
 8012b5c:	3301      	adds	r3, #1
 8012b5e:	b2da      	uxtb	r2, r3
 8012b60:	4b02      	ldr	r3, [pc, #8]	; (8012b6c <dhcp_inc_pcb_refcount+0x88>)
 8012b62:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 8012b64:	2300      	movs	r3, #0
}
 8012b66:	4618      	mov	r0, r3
 8012b68:	bd80      	pop	{r7, pc}
 8012b6a:	bf00      	nop
 8012b6c:	2000049c 	.word	0x2000049c
 8012b70:	20000498 	.word	0x20000498
 8012b74:	0801ef5c 	.word	0x0801ef5c
 8012b78:	0801ef94 	.word	0x0801ef94
 8012b7c:	0801efbc 	.word	0x0801efbc
 8012b80:	0801fac8 	.word	0x0801fac8
 8012b84:	080143a1 	.word	0x080143a1

08012b88 <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 8012b88:	b580      	push	{r7, lr}
 8012b8a:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 8012b8c:	4b0e      	ldr	r3, [pc, #56]	; (8012bc8 <dhcp_dec_pcb_refcount+0x40>)
 8012b8e:	781b      	ldrb	r3, [r3, #0]
 8012b90:	2b00      	cmp	r3, #0
 8012b92:	d105      	bne.n	8012ba0 <dhcp_dec_pcb_refcount+0x18>
 8012b94:	4b0d      	ldr	r3, [pc, #52]	; (8012bcc <dhcp_dec_pcb_refcount+0x44>)
 8012b96:	22ff      	movs	r2, #255	; 0xff
 8012b98:	490d      	ldr	r1, [pc, #52]	; (8012bd0 <dhcp_dec_pcb_refcount+0x48>)
 8012b9a:	480e      	ldr	r0, [pc, #56]	; (8012bd4 <dhcp_dec_pcb_refcount+0x4c>)
 8012b9c:	f004 fe68 	bl	8017870 <iprintf>
  dhcp_pcb_refcount--;
 8012ba0:	4b09      	ldr	r3, [pc, #36]	; (8012bc8 <dhcp_dec_pcb_refcount+0x40>)
 8012ba2:	781b      	ldrb	r3, [r3, #0]
 8012ba4:	3b01      	subs	r3, #1
 8012ba6:	b2da      	uxtb	r2, r3
 8012ba8:	4b07      	ldr	r3, [pc, #28]	; (8012bc8 <dhcp_dec_pcb_refcount+0x40>)
 8012baa:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 8012bac:	4b06      	ldr	r3, [pc, #24]	; (8012bc8 <dhcp_dec_pcb_refcount+0x40>)
 8012bae:	781b      	ldrb	r3, [r3, #0]
 8012bb0:	2b00      	cmp	r3, #0
 8012bb2:	d107      	bne.n	8012bc4 <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 8012bb4:	4b08      	ldr	r3, [pc, #32]	; (8012bd8 <dhcp_dec_pcb_refcount+0x50>)
 8012bb6:	681b      	ldr	r3, [r3, #0]
 8012bb8:	4618      	mov	r0, r3
 8012bba:	f7ff ff09 	bl	80129d0 <udp_remove>
    dhcp_pcb = NULL;
 8012bbe:	4b06      	ldr	r3, [pc, #24]	; (8012bd8 <dhcp_dec_pcb_refcount+0x50>)
 8012bc0:	2200      	movs	r2, #0
 8012bc2:	601a      	str	r2, [r3, #0]
  }
}
 8012bc4:	bf00      	nop
 8012bc6:	bd80      	pop	{r7, pc}
 8012bc8:	2000049c 	.word	0x2000049c
 8012bcc:	0801ef5c 	.word	0x0801ef5c
 8012bd0:	0801efe4 	.word	0x0801efe4
 8012bd4:	0801efbc 	.word	0x0801efbc
 8012bd8:	20000498 	.word	0x20000498

08012bdc <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 8012bdc:	b580      	push	{r7, lr}
 8012bde:	b084      	sub	sp, #16
 8012be0:	af00      	add	r7, sp, #0
 8012be2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8012be4:	687b      	ldr	r3, [r7, #4]
 8012be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012be8:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8012bea:	210c      	movs	r1, #12
 8012bec:	68f8      	ldr	r0, [r7, #12]
 8012bee:	f001 f819 	bl	8013c24 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8012bf2:	4b06      	ldr	r3, [pc, #24]	; (8012c0c <dhcp_handle_nak+0x30>)
 8012bf4:	4a05      	ldr	r2, [pc, #20]	; (8012c0c <dhcp_handle_nak+0x30>)
 8012bf6:	4905      	ldr	r1, [pc, #20]	; (8012c0c <dhcp_handle_nak+0x30>)
 8012bf8:	6878      	ldr	r0, [r7, #4]
 8012bfa:	f7f9 f963 	bl	800bec4 <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 8012bfe:	6878      	ldr	r0, [r7, #4]
 8012c00:	f000 fc0c 	bl	801341c <dhcp_discover>
}
 8012c04:	bf00      	nop
 8012c06:	3710      	adds	r7, #16
 8012c08:	46bd      	mov	sp, r7
 8012c0a:	bd80      	pop	{r7, pc}
 8012c0c:	0801fac8 	.word	0x0801fac8

08012c10 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 8012c10:	b580      	push	{r7, lr}
 8012c12:	b084      	sub	sp, #16
 8012c14:	af00      	add	r7, sp, #0
 8012c16:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8012c18:	687b      	ldr	r3, [r7, #4]
 8012c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012c1c:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 8012c1e:	2108      	movs	r1, #8
 8012c20:	68f8      	ldr	r0, [r7, #12]
 8012c22:	f000 ffff 	bl	8013c24 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 8012c26:	68fb      	ldr	r3, [r7, #12]
 8012c28:	331c      	adds	r3, #28
 8012c2a:	2200      	movs	r2, #0
 8012c2c:	4619      	mov	r1, r3
 8012c2e:	6878      	ldr	r0, [r7, #4]
 8012c30:	f002 fb00 	bl	8015234 <etharp_query>
 8012c34:	4603      	mov	r3, r0
 8012c36:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 8012c38:	68fb      	ldr	r3, [r7, #12]
 8012c3a:	799b      	ldrb	r3, [r3, #6]
 8012c3c:	2bff      	cmp	r3, #255	; 0xff
 8012c3e:	d005      	beq.n	8012c4c <dhcp_check+0x3c>
    dhcp->tries++;
 8012c40:	68fb      	ldr	r3, [r7, #12]
 8012c42:	799b      	ldrb	r3, [r3, #6]
 8012c44:	3301      	adds	r3, #1
 8012c46:	b2da      	uxtb	r2, r3
 8012c48:	68fb      	ldr	r3, [r7, #12]
 8012c4a:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 8012c4c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8012c50:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8012c52:	893b      	ldrh	r3, [r7, #8]
 8012c54:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8012c58:	4a06      	ldr	r2, [pc, #24]	; (8012c74 <dhcp_check+0x64>)
 8012c5a:	fb82 1203 	smull	r1, r2, r2, r3
 8012c5e:	1152      	asrs	r2, r2, #5
 8012c60:	17db      	asrs	r3, r3, #31
 8012c62:	1ad3      	subs	r3, r2, r3
 8012c64:	b29a      	uxth	r2, r3
 8012c66:	68fb      	ldr	r3, [r7, #12]
 8012c68:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 8012c6a:	bf00      	nop
 8012c6c:	3710      	adds	r7, #16
 8012c6e:	46bd      	mov	sp, r7
 8012c70:	bd80      	pop	{r7, pc}
 8012c72:	bf00      	nop
 8012c74:	10624dd3 	.word	0x10624dd3

08012c78 <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 8012c78:	b580      	push	{r7, lr}
 8012c7a:	b084      	sub	sp, #16
 8012c7c:	af00      	add	r7, sp, #0
 8012c7e:	6078      	str	r0, [r7, #4]
 8012c80:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8012c82:	687b      	ldr	r3, [r7, #4]
 8012c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012c86:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 8012c88:	4b0c      	ldr	r3, [pc, #48]	; (8012cbc <dhcp_handle_offer+0x44>)
 8012c8a:	789b      	ldrb	r3, [r3, #2]
 8012c8c:	2b00      	cmp	r3, #0
 8012c8e:	d011      	beq.n	8012cb4 <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 8012c90:	68fb      	ldr	r3, [r7, #12]
 8012c92:	2200      	movs	r2, #0
 8012c94:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 8012c96:	4b0a      	ldr	r3, [pc, #40]	; (8012cc0 <dhcp_handle_offer+0x48>)
 8012c98:	689b      	ldr	r3, [r3, #8]
 8012c9a:	4618      	mov	r0, r3
 8012c9c:	f7f8 fae3 	bl	800b266 <lwip_htonl>
 8012ca0:	4602      	mov	r2, r0
 8012ca2:	68fb      	ldr	r3, [r7, #12]
 8012ca4:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8012ca6:	683b      	ldr	r3, [r7, #0]
 8012ca8:	691a      	ldr	r2, [r3, #16]
 8012caa:	68fb      	ldr	r3, [r7, #12]
 8012cac:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 8012cae:	6878      	ldr	r0, [r7, #4]
 8012cb0:	f000 f808 	bl	8012cc4 <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 8012cb4:	bf00      	nop
 8012cb6:	3710      	adds	r7, #16
 8012cb8:	46bd      	mov	sp, r7
 8012cba:	bd80      	pop	{r7, pc}
 8012cbc:	20006e58 	.word	0x20006e58
 8012cc0:	20006e60 	.word	0x20006e60

08012cc4 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 8012cc4:	b5b0      	push	{r4, r5, r7, lr}
 8012cc6:	b08a      	sub	sp, #40	; 0x28
 8012cc8:	af02      	add	r7, sp, #8
 8012cca:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 8012ccc:	687b      	ldr	r3, [r7, #4]
 8012cce:	2b00      	cmp	r3, #0
 8012cd0:	d109      	bne.n	8012ce6 <dhcp_select+0x22>
 8012cd2:	4b71      	ldr	r3, [pc, #452]	; (8012e98 <dhcp_select+0x1d4>)
 8012cd4:	f240 1277 	movw	r2, #375	; 0x177
 8012cd8:	4970      	ldr	r1, [pc, #448]	; (8012e9c <dhcp_select+0x1d8>)
 8012cda:	4871      	ldr	r0, [pc, #452]	; (8012ea0 <dhcp_select+0x1dc>)
 8012cdc:	f004 fdc8 	bl	8017870 <iprintf>
 8012ce0:	f06f 030f 	mvn.w	r3, #15
 8012ce4:	e0d3      	b.n	8012e8e <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 8012ce6:	687b      	ldr	r3, [r7, #4]
 8012ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012cea:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 8012cec:	69bb      	ldr	r3, [r7, #24]
 8012cee:	2b00      	cmp	r3, #0
 8012cf0:	d109      	bne.n	8012d06 <dhcp_select+0x42>
 8012cf2:	4b69      	ldr	r3, [pc, #420]	; (8012e98 <dhcp_select+0x1d4>)
 8012cf4:	f240 1279 	movw	r2, #377	; 0x179
 8012cf8:	496a      	ldr	r1, [pc, #424]	; (8012ea4 <dhcp_select+0x1e0>)
 8012cfa:	4869      	ldr	r0, [pc, #420]	; (8012ea0 <dhcp_select+0x1dc>)
 8012cfc:	f004 fdb8 	bl	8017870 <iprintf>
 8012d00:	f06f 0305 	mvn.w	r3, #5
 8012d04:	e0c3      	b.n	8012e8e <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 8012d06:	2101      	movs	r1, #1
 8012d08:	69b8      	ldr	r0, [r7, #24]
 8012d0a:	f000 ff8b 	bl	8013c24 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8012d0e:	f107 030c 	add.w	r3, r7, #12
 8012d12:	2203      	movs	r2, #3
 8012d14:	69b9      	ldr	r1, [r7, #24]
 8012d16:	6878      	ldr	r0, [r7, #4]
 8012d18:	f001 fc10 	bl	801453c <dhcp_create_msg>
 8012d1c:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8012d1e:	697b      	ldr	r3, [r7, #20]
 8012d20:	2b00      	cmp	r3, #0
 8012d22:	f000 8085 	beq.w	8012e30 <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8012d26:	697b      	ldr	r3, [r7, #20]
 8012d28:	685b      	ldr	r3, [r3, #4]
 8012d2a:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8012d2c:	89b8      	ldrh	r0, [r7, #12]
 8012d2e:	693b      	ldr	r3, [r7, #16]
 8012d30:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012d34:	2302      	movs	r3, #2
 8012d36:	2239      	movs	r2, #57	; 0x39
 8012d38:	f000 ff8e 	bl	8013c58 <dhcp_option>
 8012d3c:	4603      	mov	r3, r0
 8012d3e:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8012d40:	89b8      	ldrh	r0, [r7, #12]
 8012d42:	693b      	ldr	r3, [r7, #16]
 8012d44:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012d48:	687b      	ldr	r3, [r7, #4]
 8012d4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012d4c:	461a      	mov	r2, r3
 8012d4e:	f000 ffdd 	bl	8013d0c <dhcp_option_short>
 8012d52:	4603      	mov	r3, r0
 8012d54:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8012d56:	89b8      	ldrh	r0, [r7, #12]
 8012d58:	693b      	ldr	r3, [r7, #16]
 8012d5a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012d5e:	2304      	movs	r3, #4
 8012d60:	2232      	movs	r2, #50	; 0x32
 8012d62:	f000 ff79 	bl	8013c58 <dhcp_option>
 8012d66:	4603      	mov	r3, r0
 8012d68:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8012d6a:	89bc      	ldrh	r4, [r7, #12]
 8012d6c:	693b      	ldr	r3, [r7, #16]
 8012d6e:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8012d72:	69bb      	ldr	r3, [r7, #24]
 8012d74:	69db      	ldr	r3, [r3, #28]
 8012d76:	4618      	mov	r0, r3
 8012d78:	f7f8 fa75 	bl	800b266 <lwip_htonl>
 8012d7c:	4603      	mov	r3, r0
 8012d7e:	461a      	mov	r2, r3
 8012d80:	4629      	mov	r1, r5
 8012d82:	4620      	mov	r0, r4
 8012d84:	f000 fff4 	bl	8013d70 <dhcp_option_long>
 8012d88:	4603      	mov	r3, r0
 8012d8a:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8012d8c:	89b8      	ldrh	r0, [r7, #12]
 8012d8e:	693b      	ldr	r3, [r7, #16]
 8012d90:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012d94:	2304      	movs	r3, #4
 8012d96:	2236      	movs	r2, #54	; 0x36
 8012d98:	f000 ff5e 	bl	8013c58 <dhcp_option>
 8012d9c:	4603      	mov	r3, r0
 8012d9e:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 8012da0:	89bc      	ldrh	r4, [r7, #12]
 8012da2:	693b      	ldr	r3, [r7, #16]
 8012da4:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8012da8:	69bb      	ldr	r3, [r7, #24]
 8012daa:	699b      	ldr	r3, [r3, #24]
 8012dac:	4618      	mov	r0, r3
 8012dae:	f7f8 fa5a 	bl	800b266 <lwip_htonl>
 8012db2:	4603      	mov	r3, r0
 8012db4:	461a      	mov	r2, r3
 8012db6:	4629      	mov	r1, r5
 8012db8:	4620      	mov	r0, r4
 8012dba:	f000 ffd9 	bl	8013d70 <dhcp_option_long>
 8012dbe:	4603      	mov	r3, r0
 8012dc0:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8012dc2:	89b8      	ldrh	r0, [r7, #12]
 8012dc4:	693b      	ldr	r3, [r7, #16]
 8012dc6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012dca:	2303      	movs	r3, #3
 8012dcc:	2237      	movs	r2, #55	; 0x37
 8012dce:	f000 ff43 	bl	8013c58 <dhcp_option>
 8012dd2:	4603      	mov	r3, r0
 8012dd4:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8012dd6:	2300      	movs	r3, #0
 8012dd8:	77bb      	strb	r3, [r7, #30]
 8012dda:	e00e      	b.n	8012dfa <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8012ddc:	89b8      	ldrh	r0, [r7, #12]
 8012dde:	693b      	ldr	r3, [r7, #16]
 8012de0:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012de4:	7fbb      	ldrb	r3, [r7, #30]
 8012de6:	4a30      	ldr	r2, [pc, #192]	; (8012ea8 <dhcp_select+0x1e4>)
 8012de8:	5cd3      	ldrb	r3, [r2, r3]
 8012dea:	461a      	mov	r2, r3
 8012dec:	f000 ff68 	bl	8013cc0 <dhcp_option_byte>
 8012df0:	4603      	mov	r3, r0
 8012df2:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8012df4:	7fbb      	ldrb	r3, [r7, #30]
 8012df6:	3301      	adds	r3, #1
 8012df8:	77bb      	strb	r3, [r7, #30]
 8012dfa:	7fbb      	ldrb	r3, [r7, #30]
 8012dfc:	2b02      	cmp	r3, #2
 8012dfe:	d9ed      	bls.n	8012ddc <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8012e00:	89b8      	ldrh	r0, [r7, #12]
 8012e02:	693b      	ldr	r3, [r7, #16]
 8012e04:	33f0      	adds	r3, #240	; 0xf0
 8012e06:	697a      	ldr	r2, [r7, #20]
 8012e08:	4619      	mov	r1, r3
 8012e0a:	f001 fc6d 	bl	80146e8 <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8012e0e:	4b27      	ldr	r3, [pc, #156]	; (8012eac <dhcp_select+0x1e8>)
 8012e10:	6818      	ldr	r0, [r3, #0]
 8012e12:	4b27      	ldr	r3, [pc, #156]	; (8012eb0 <dhcp_select+0x1ec>)
 8012e14:	9301      	str	r3, [sp, #4]
 8012e16:	687b      	ldr	r3, [r7, #4]
 8012e18:	9300      	str	r3, [sp, #0]
 8012e1a:	2343      	movs	r3, #67	; 0x43
 8012e1c:	4a25      	ldr	r2, [pc, #148]	; (8012eb4 <dhcp_select+0x1f0>)
 8012e1e:	6979      	ldr	r1, [r7, #20]
 8012e20:	f7ff fbda 	bl	80125d8 <udp_sendto_if_src>
 8012e24:	4603      	mov	r3, r0
 8012e26:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8012e28:	6978      	ldr	r0, [r7, #20]
 8012e2a:	f7f9 fca3 	bl	800c774 <pbuf_free>
 8012e2e:	e001      	b.n	8012e34 <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8012e30:	23ff      	movs	r3, #255	; 0xff
 8012e32:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8012e34:	69bb      	ldr	r3, [r7, #24]
 8012e36:	799b      	ldrb	r3, [r3, #6]
 8012e38:	2bff      	cmp	r3, #255	; 0xff
 8012e3a:	d005      	beq.n	8012e48 <dhcp_select+0x184>
    dhcp->tries++;
 8012e3c:	69bb      	ldr	r3, [r7, #24]
 8012e3e:	799b      	ldrb	r3, [r3, #6]
 8012e40:	3301      	adds	r3, #1
 8012e42:	b2da      	uxtb	r2, r3
 8012e44:	69bb      	ldr	r3, [r7, #24]
 8012e46:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8012e48:	69bb      	ldr	r3, [r7, #24]
 8012e4a:	799b      	ldrb	r3, [r3, #6]
 8012e4c:	2b05      	cmp	r3, #5
 8012e4e:	d80d      	bhi.n	8012e6c <dhcp_select+0x1a8>
 8012e50:	69bb      	ldr	r3, [r7, #24]
 8012e52:	799b      	ldrb	r3, [r3, #6]
 8012e54:	461a      	mov	r2, r3
 8012e56:	2301      	movs	r3, #1
 8012e58:	4093      	lsls	r3, r2
 8012e5a:	b29b      	uxth	r3, r3
 8012e5c:	461a      	mov	r2, r3
 8012e5e:	0152      	lsls	r2, r2, #5
 8012e60:	1ad2      	subs	r2, r2, r3
 8012e62:	0092      	lsls	r2, r2, #2
 8012e64:	4413      	add	r3, r2
 8012e66:	00db      	lsls	r3, r3, #3
 8012e68:	b29b      	uxth	r3, r3
 8012e6a:	e001      	b.n	8012e70 <dhcp_select+0x1ac>
 8012e6c:	f64e 2360 	movw	r3, #60000	; 0xea60
 8012e70:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8012e72:	89fb      	ldrh	r3, [r7, #14]
 8012e74:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8012e78:	4a0f      	ldr	r2, [pc, #60]	; (8012eb8 <dhcp_select+0x1f4>)
 8012e7a:	fb82 1203 	smull	r1, r2, r2, r3
 8012e7e:	1152      	asrs	r2, r2, #5
 8012e80:	17db      	asrs	r3, r3, #31
 8012e82:	1ad3      	subs	r3, r2, r3
 8012e84:	b29a      	uxth	r2, r3
 8012e86:	69bb      	ldr	r3, [r7, #24]
 8012e88:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8012e8a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8012e8e:	4618      	mov	r0, r3
 8012e90:	3720      	adds	r7, #32
 8012e92:	46bd      	mov	sp, r7
 8012e94:	bdb0      	pop	{r4, r5, r7, pc}
 8012e96:	bf00      	nop
 8012e98:	0801ef5c 	.word	0x0801ef5c
 8012e9c:	0801f008 	.word	0x0801f008
 8012ea0:	0801efbc 	.word	0x0801efbc
 8012ea4:	0801f024 	.word	0x0801f024
 8012ea8:	20000070 	.word	0x20000070
 8012eac:	20000498 	.word	0x20000498
 8012eb0:	0801fac8 	.word	0x0801fac8
 8012eb4:	0801facc 	.word	0x0801facc
 8012eb8:	10624dd3 	.word	0x10624dd3

08012ebc <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 8012ebc:	b580      	push	{r7, lr}
 8012ebe:	b082      	sub	sp, #8
 8012ec0:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 8012ec2:	4b27      	ldr	r3, [pc, #156]	; (8012f60 <dhcp_coarse_tmr+0xa4>)
 8012ec4:	681b      	ldr	r3, [r3, #0]
 8012ec6:	607b      	str	r3, [r7, #4]
 8012ec8:	e042      	b.n	8012f50 <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8012eca:	687b      	ldr	r3, [r7, #4]
 8012ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012ece:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 8012ed0:	683b      	ldr	r3, [r7, #0]
 8012ed2:	2b00      	cmp	r3, #0
 8012ed4:	d039      	beq.n	8012f4a <dhcp_coarse_tmr+0x8e>
 8012ed6:	683b      	ldr	r3, [r7, #0]
 8012ed8:	795b      	ldrb	r3, [r3, #5]
 8012eda:	2b00      	cmp	r3, #0
 8012edc:	d035      	beq.n	8012f4a <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 8012ede:	683b      	ldr	r3, [r7, #0]
 8012ee0:	8a9b      	ldrh	r3, [r3, #20]
 8012ee2:	2b00      	cmp	r3, #0
 8012ee4:	d012      	beq.n	8012f0c <dhcp_coarse_tmr+0x50>
 8012ee6:	683b      	ldr	r3, [r7, #0]
 8012ee8:	8a5b      	ldrh	r3, [r3, #18]
 8012eea:	3301      	adds	r3, #1
 8012eec:	b29a      	uxth	r2, r3
 8012eee:	683b      	ldr	r3, [r7, #0]
 8012ef0:	825a      	strh	r2, [r3, #18]
 8012ef2:	683b      	ldr	r3, [r7, #0]
 8012ef4:	8a5a      	ldrh	r2, [r3, #18]
 8012ef6:	683b      	ldr	r3, [r7, #0]
 8012ef8:	8a9b      	ldrh	r3, [r3, #20]
 8012efa:	429a      	cmp	r2, r3
 8012efc:	d106      	bne.n	8012f0c <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 8012efe:	6878      	ldr	r0, [r7, #4]
 8012f00:	f000 fdf6 	bl	8013af0 <dhcp_release_and_stop>
        dhcp_start(netif);
 8012f04:	6878      	ldr	r0, [r7, #4]
 8012f06:	f000 f969 	bl	80131dc <dhcp_start>
 8012f0a:	e01e      	b.n	8012f4a <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 8012f0c:	683b      	ldr	r3, [r7, #0]
 8012f0e:	8a1b      	ldrh	r3, [r3, #16]
 8012f10:	2b00      	cmp	r3, #0
 8012f12:	d00b      	beq.n	8012f2c <dhcp_coarse_tmr+0x70>
 8012f14:	683b      	ldr	r3, [r7, #0]
 8012f16:	8a1b      	ldrh	r3, [r3, #16]
 8012f18:	1e5a      	subs	r2, r3, #1
 8012f1a:	b291      	uxth	r1, r2
 8012f1c:	683a      	ldr	r2, [r7, #0]
 8012f1e:	8211      	strh	r1, [r2, #16]
 8012f20:	2b01      	cmp	r3, #1
 8012f22:	d103      	bne.n	8012f2c <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 8012f24:	6878      	ldr	r0, [r7, #4]
 8012f26:	f000 f8c6 	bl	80130b6 <dhcp_t2_timeout>
 8012f2a:	e00e      	b.n	8012f4a <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 8012f2c:	683b      	ldr	r3, [r7, #0]
 8012f2e:	89db      	ldrh	r3, [r3, #14]
 8012f30:	2b00      	cmp	r3, #0
 8012f32:	d00a      	beq.n	8012f4a <dhcp_coarse_tmr+0x8e>
 8012f34:	683b      	ldr	r3, [r7, #0]
 8012f36:	89db      	ldrh	r3, [r3, #14]
 8012f38:	1e5a      	subs	r2, r3, #1
 8012f3a:	b291      	uxth	r1, r2
 8012f3c:	683a      	ldr	r2, [r7, #0]
 8012f3e:	81d1      	strh	r1, [r2, #14]
 8012f40:	2b01      	cmp	r3, #1
 8012f42:	d102      	bne.n	8012f4a <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 8012f44:	6878      	ldr	r0, [r7, #4]
 8012f46:	f000 f888 	bl	801305a <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 8012f4a:	687b      	ldr	r3, [r7, #4]
 8012f4c:	681b      	ldr	r3, [r3, #0]
 8012f4e:	607b      	str	r3, [r7, #4]
 8012f50:	687b      	ldr	r3, [r7, #4]
 8012f52:	2b00      	cmp	r3, #0
 8012f54:	d1b9      	bne.n	8012eca <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 8012f56:	bf00      	nop
 8012f58:	bf00      	nop
 8012f5a:	3708      	adds	r7, #8
 8012f5c:	46bd      	mov	sp, r7
 8012f5e:	bd80      	pop	{r7, pc}
 8012f60:	20006e2c 	.word	0x20006e2c

08012f64 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 8012f64:	b580      	push	{r7, lr}
 8012f66:	b082      	sub	sp, #8
 8012f68:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 8012f6a:	4b16      	ldr	r3, [pc, #88]	; (8012fc4 <dhcp_fine_tmr+0x60>)
 8012f6c:	681b      	ldr	r3, [r3, #0]
 8012f6e:	607b      	str	r3, [r7, #4]
 8012f70:	e020      	b.n	8012fb4 <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8012f72:	687b      	ldr	r3, [r7, #4]
 8012f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012f76:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 8012f78:	683b      	ldr	r3, [r7, #0]
 8012f7a:	2b00      	cmp	r3, #0
 8012f7c:	d017      	beq.n	8012fae <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 8012f7e:	683b      	ldr	r3, [r7, #0]
 8012f80:	891b      	ldrh	r3, [r3, #8]
 8012f82:	2b01      	cmp	r3, #1
 8012f84:	d906      	bls.n	8012f94 <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 8012f86:	683b      	ldr	r3, [r7, #0]
 8012f88:	891b      	ldrh	r3, [r3, #8]
 8012f8a:	3b01      	subs	r3, #1
 8012f8c:	b29a      	uxth	r2, r3
 8012f8e:	683b      	ldr	r3, [r7, #0]
 8012f90:	811a      	strh	r2, [r3, #8]
 8012f92:	e00c      	b.n	8012fae <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 8012f94:	683b      	ldr	r3, [r7, #0]
 8012f96:	891b      	ldrh	r3, [r3, #8]
 8012f98:	2b01      	cmp	r3, #1
 8012f9a:	d108      	bne.n	8012fae <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 8012f9c:	683b      	ldr	r3, [r7, #0]
 8012f9e:	891b      	ldrh	r3, [r3, #8]
 8012fa0:	3b01      	subs	r3, #1
 8012fa2:	b29a      	uxth	r2, r3
 8012fa4:	683b      	ldr	r3, [r7, #0]
 8012fa6:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 8012fa8:	6878      	ldr	r0, [r7, #4]
 8012faa:	f000 f80d 	bl	8012fc8 <dhcp_timeout>
  NETIF_FOREACH(netif) {
 8012fae:	687b      	ldr	r3, [r7, #4]
 8012fb0:	681b      	ldr	r3, [r3, #0]
 8012fb2:	607b      	str	r3, [r7, #4]
 8012fb4:	687b      	ldr	r3, [r7, #4]
 8012fb6:	2b00      	cmp	r3, #0
 8012fb8:	d1db      	bne.n	8012f72 <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 8012fba:	bf00      	nop
 8012fbc:	bf00      	nop
 8012fbe:	3708      	adds	r7, #8
 8012fc0:	46bd      	mov	sp, r7
 8012fc2:	bd80      	pop	{r7, pc}
 8012fc4:	20006e2c 	.word	0x20006e2c

08012fc8 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 8012fc8:	b580      	push	{r7, lr}
 8012fca:	b084      	sub	sp, #16
 8012fcc:	af00      	add	r7, sp, #0
 8012fce:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8012fd0:	687b      	ldr	r3, [r7, #4]
 8012fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012fd4:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 8012fd6:	68fb      	ldr	r3, [r7, #12]
 8012fd8:	795b      	ldrb	r3, [r3, #5]
 8012fda:	2b0c      	cmp	r3, #12
 8012fdc:	d003      	beq.n	8012fe6 <dhcp_timeout+0x1e>
 8012fde:	68fb      	ldr	r3, [r7, #12]
 8012fe0:	795b      	ldrb	r3, [r3, #5]
 8012fe2:	2b06      	cmp	r3, #6
 8012fe4:	d103      	bne.n	8012fee <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 8012fe6:	6878      	ldr	r0, [r7, #4]
 8012fe8:	f000 fa18 	bl	801341c <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 8012fec:	e031      	b.n	8013052 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 8012fee:	68fb      	ldr	r3, [r7, #12]
 8012ff0:	795b      	ldrb	r3, [r3, #5]
 8012ff2:	2b01      	cmp	r3, #1
 8012ff4:	d10e      	bne.n	8013014 <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 8012ff6:	68fb      	ldr	r3, [r7, #12]
 8012ff8:	799b      	ldrb	r3, [r3, #6]
 8012ffa:	2b05      	cmp	r3, #5
 8012ffc:	d803      	bhi.n	8013006 <dhcp_timeout+0x3e>
      dhcp_select(netif);
 8012ffe:	6878      	ldr	r0, [r7, #4]
 8013000:	f7ff fe60 	bl	8012cc4 <dhcp_select>
}
 8013004:	e025      	b.n	8013052 <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 8013006:	6878      	ldr	r0, [r7, #4]
 8013008:	f000 fd72 	bl	8013af0 <dhcp_release_and_stop>
      dhcp_start(netif);
 801300c:	6878      	ldr	r0, [r7, #4]
 801300e:	f000 f8e5 	bl	80131dc <dhcp_start>
}
 8013012:	e01e      	b.n	8013052 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 8013014:	68fb      	ldr	r3, [r7, #12]
 8013016:	795b      	ldrb	r3, [r3, #5]
 8013018:	2b08      	cmp	r3, #8
 801301a:	d10b      	bne.n	8013034 <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 801301c:	68fb      	ldr	r3, [r7, #12]
 801301e:	799b      	ldrb	r3, [r3, #6]
 8013020:	2b01      	cmp	r3, #1
 8013022:	d803      	bhi.n	801302c <dhcp_timeout+0x64>
      dhcp_check(netif);
 8013024:	6878      	ldr	r0, [r7, #4]
 8013026:	f7ff fdf3 	bl	8012c10 <dhcp_check>
}
 801302a:	e012      	b.n	8013052 <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 801302c:	6878      	ldr	r0, [r7, #4]
 801302e:	f000 fa97 	bl	8013560 <dhcp_bind>
}
 8013032:	e00e      	b.n	8013052 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 8013034:	68fb      	ldr	r3, [r7, #12]
 8013036:	795b      	ldrb	r3, [r3, #5]
 8013038:	2b03      	cmp	r3, #3
 801303a:	d10a      	bne.n	8013052 <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 801303c:	68fb      	ldr	r3, [r7, #12]
 801303e:	799b      	ldrb	r3, [r3, #6]
 8013040:	2b01      	cmp	r3, #1
 8013042:	d803      	bhi.n	801304c <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 8013044:	6878      	ldr	r0, [r7, #4]
 8013046:	f000 fc9d 	bl	8013984 <dhcp_reboot>
}
 801304a:	e002      	b.n	8013052 <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 801304c:	6878      	ldr	r0, [r7, #4]
 801304e:	f000 f9e5 	bl	801341c <dhcp_discover>
}
 8013052:	bf00      	nop
 8013054:	3710      	adds	r7, #16
 8013056:	46bd      	mov	sp, r7
 8013058:	bd80      	pop	{r7, pc}

0801305a <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 801305a:	b580      	push	{r7, lr}
 801305c:	b084      	sub	sp, #16
 801305e:	af00      	add	r7, sp, #0
 8013060:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013062:	687b      	ldr	r3, [r7, #4]
 8013064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013066:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8013068:	68fb      	ldr	r3, [r7, #12]
 801306a:	795b      	ldrb	r3, [r3, #5]
 801306c:	2b01      	cmp	r3, #1
 801306e:	d007      	beq.n	8013080 <dhcp_t1_timeout+0x26>
 8013070:	68fb      	ldr	r3, [r7, #12]
 8013072:	795b      	ldrb	r3, [r3, #5]
 8013074:	2b0a      	cmp	r3, #10
 8013076:	d003      	beq.n	8013080 <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 8013078:	68fb      	ldr	r3, [r7, #12]
 801307a:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 801307c:	2b05      	cmp	r3, #5
 801307e:	d116      	bne.n	80130ae <dhcp_t1_timeout+0x54>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 8013080:	6878      	ldr	r0, [r7, #4]
 8013082:	f000 fb47 	bl	8013714 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8013086:	68fb      	ldr	r3, [r7, #12]
 8013088:	899b      	ldrh	r3, [r3, #12]
 801308a:	461a      	mov	r2, r3
 801308c:	68fb      	ldr	r3, [r7, #12]
 801308e:	8a5b      	ldrh	r3, [r3, #18]
 8013090:	1ad3      	subs	r3, r2, r3
 8013092:	2b01      	cmp	r3, #1
 8013094:	dd0b      	ble.n	80130ae <dhcp_t1_timeout+0x54>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 8013096:	68fb      	ldr	r3, [r7, #12]
 8013098:	899b      	ldrh	r3, [r3, #12]
 801309a:	461a      	mov	r2, r3
 801309c:	68fb      	ldr	r3, [r7, #12]
 801309e:	8a5b      	ldrh	r3, [r3, #18]
 80130a0:	1ad3      	subs	r3, r2, r3
 80130a2:	0fda      	lsrs	r2, r3, #31
 80130a4:	4413      	add	r3, r2
 80130a6:	105b      	asrs	r3, r3, #1
 80130a8:	b29a      	uxth	r2, r3
 80130aa:	68fb      	ldr	r3, [r7, #12]
 80130ac:	81da      	strh	r2, [r3, #14]
    }
  }
}
 80130ae:	bf00      	nop
 80130b0:	3710      	adds	r7, #16
 80130b2:	46bd      	mov	sp, r7
 80130b4:	bd80      	pop	{r7, pc}

080130b6 <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 80130b6:	b580      	push	{r7, lr}
 80130b8:	b084      	sub	sp, #16
 80130ba:	af00      	add	r7, sp, #0
 80130bc:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80130be:	687b      	ldr	r3, [r7, #4]
 80130c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80130c2:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 80130c4:	68fb      	ldr	r3, [r7, #12]
 80130c6:	795b      	ldrb	r3, [r3, #5]
 80130c8:	2b01      	cmp	r3, #1
 80130ca:	d00b      	beq.n	80130e4 <dhcp_t2_timeout+0x2e>
 80130cc:	68fb      	ldr	r3, [r7, #12]
 80130ce:	795b      	ldrb	r3, [r3, #5]
 80130d0:	2b0a      	cmp	r3, #10
 80130d2:	d007      	beq.n	80130e4 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 80130d4:	68fb      	ldr	r3, [r7, #12]
 80130d6:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 80130d8:	2b05      	cmp	r3, #5
 80130da:	d003      	beq.n	80130e4 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 80130dc:	68fb      	ldr	r3, [r7, #12]
 80130de:	795b      	ldrb	r3, [r3, #5]
 80130e0:	2b04      	cmp	r3, #4
 80130e2:	d116      	bne.n	8013112 <dhcp_t2_timeout+0x5c>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 80130e4:	6878      	ldr	r0, [r7, #4]
 80130e6:	f000 fbb1 	bl	801384c <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 80130ea:	68fb      	ldr	r3, [r7, #12]
 80130ec:	8a9b      	ldrh	r3, [r3, #20]
 80130ee:	461a      	mov	r2, r3
 80130f0:	68fb      	ldr	r3, [r7, #12]
 80130f2:	8a5b      	ldrh	r3, [r3, #18]
 80130f4:	1ad3      	subs	r3, r2, r3
 80130f6:	2b01      	cmp	r3, #1
 80130f8:	dd0b      	ble.n	8013112 <dhcp_t2_timeout+0x5c>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 80130fa:	68fb      	ldr	r3, [r7, #12]
 80130fc:	8a9b      	ldrh	r3, [r3, #20]
 80130fe:	461a      	mov	r2, r3
 8013100:	68fb      	ldr	r3, [r7, #12]
 8013102:	8a5b      	ldrh	r3, [r3, #18]
 8013104:	1ad3      	subs	r3, r2, r3
 8013106:	0fda      	lsrs	r2, r3, #31
 8013108:	4413      	add	r3, r2
 801310a:	105b      	asrs	r3, r3, #1
 801310c:	b29a      	uxth	r2, r3
 801310e:	68fb      	ldr	r3, [r7, #12]
 8013110:	821a      	strh	r2, [r3, #16]
    }
  }
}
 8013112:	bf00      	nop
 8013114:	3710      	adds	r7, #16
 8013116:	46bd      	mov	sp, r7
 8013118:	bd80      	pop	{r7, pc}
	...

0801311c <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 801311c:	b580      	push	{r7, lr}
 801311e:	b084      	sub	sp, #16
 8013120:	af00      	add	r7, sp, #0
 8013122:	6078      	str	r0, [r7, #4]
 8013124:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013126:	687b      	ldr	r3, [r7, #4]
 8013128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801312a:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 801312c:	68fb      	ldr	r3, [r7, #12]
 801312e:	2200      	movs	r2, #0
 8013130:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8013132:	68fb      	ldr	r3, [r7, #12]
 8013134:	2200      	movs	r2, #0
 8013136:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 8013138:	4b26      	ldr	r3, [pc, #152]	; (80131d4 <dhcp_handle_ack+0xb8>)
 801313a:	78db      	ldrb	r3, [r3, #3]
 801313c:	2b00      	cmp	r3, #0
 801313e:	d003      	beq.n	8013148 <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 8013140:	4b25      	ldr	r3, [pc, #148]	; (80131d8 <dhcp_handle_ack+0xbc>)
 8013142:	68da      	ldr	r2, [r3, #12]
 8013144:	68fb      	ldr	r3, [r7, #12]
 8013146:	629a      	str	r2, [r3, #40]	; 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 8013148:	4b22      	ldr	r3, [pc, #136]	; (80131d4 <dhcp_handle_ack+0xb8>)
 801314a:	791b      	ldrb	r3, [r3, #4]
 801314c:	2b00      	cmp	r3, #0
 801314e:	d004      	beq.n	801315a <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 8013150:	4b21      	ldr	r3, [pc, #132]	; (80131d8 <dhcp_handle_ack+0xbc>)
 8013152:	691a      	ldr	r2, [r3, #16]
 8013154:	68fb      	ldr	r3, [r7, #12]
 8013156:	62da      	str	r2, [r3, #44]	; 0x2c
 8013158:	e004      	b.n	8013164 <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 801315a:	68fb      	ldr	r3, [r7, #12]
 801315c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801315e:	085a      	lsrs	r2, r3, #1
 8013160:	68fb      	ldr	r3, [r7, #12]
 8013162:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 8013164:	4b1b      	ldr	r3, [pc, #108]	; (80131d4 <dhcp_handle_ack+0xb8>)
 8013166:	795b      	ldrb	r3, [r3, #5]
 8013168:	2b00      	cmp	r3, #0
 801316a:	d004      	beq.n	8013176 <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 801316c:	4b1a      	ldr	r3, [pc, #104]	; (80131d8 <dhcp_handle_ack+0xbc>)
 801316e:	695a      	ldr	r2, [r3, #20]
 8013170:	68fb      	ldr	r3, [r7, #12]
 8013172:	631a      	str	r2, [r3, #48]	; 0x30
 8013174:	e007      	b.n	8013186 <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 8013176:	68fb      	ldr	r3, [r7, #12]
 8013178:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801317a:	4613      	mov	r3, r2
 801317c:	00db      	lsls	r3, r3, #3
 801317e:	1a9b      	subs	r3, r3, r2
 8013180:	08da      	lsrs	r2, r3, #3
 8013182:	68fb      	ldr	r3, [r7, #12]
 8013184:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8013186:	683b      	ldr	r3, [r7, #0]
 8013188:	691a      	ldr	r2, [r3, #16]
 801318a:	68fb      	ldr	r3, [r7, #12]
 801318c:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 801318e:	4b11      	ldr	r3, [pc, #68]	; (80131d4 <dhcp_handle_ack+0xb8>)
 8013190:	799b      	ldrb	r3, [r3, #6]
 8013192:	2b00      	cmp	r3, #0
 8013194:	d00b      	beq.n	80131ae <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 8013196:	4b10      	ldr	r3, [pc, #64]	; (80131d8 <dhcp_handle_ack+0xbc>)
 8013198:	699b      	ldr	r3, [r3, #24]
 801319a:	4618      	mov	r0, r3
 801319c:	f7f8 f863 	bl	800b266 <lwip_htonl>
 80131a0:	4602      	mov	r2, r0
 80131a2:	68fb      	ldr	r3, [r7, #12]
 80131a4:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 80131a6:	68fb      	ldr	r3, [r7, #12]
 80131a8:	2201      	movs	r2, #1
 80131aa:	71da      	strb	r2, [r3, #7]
 80131ac:	e002      	b.n	80131b4 <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 80131ae:	68fb      	ldr	r3, [r7, #12]
 80131b0:	2200      	movs	r2, #0
 80131b2:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 80131b4:	4b07      	ldr	r3, [pc, #28]	; (80131d4 <dhcp_handle_ack+0xb8>)
 80131b6:	79db      	ldrb	r3, [r3, #7]
 80131b8:	2b00      	cmp	r3, #0
 80131ba:	d007      	beq.n	80131cc <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 80131bc:	4b06      	ldr	r3, [pc, #24]	; (80131d8 <dhcp_handle_ack+0xbc>)
 80131be:	69db      	ldr	r3, [r3, #28]
 80131c0:	4618      	mov	r0, r3
 80131c2:	f7f8 f850 	bl	800b266 <lwip_htonl>
 80131c6:	4602      	mov	r2, r0
 80131c8:	68fb      	ldr	r3, [r7, #12]
 80131ca:	625a      	str	r2, [r3, #36]	; 0x24
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 80131cc:	bf00      	nop
 80131ce:	3710      	adds	r7, #16
 80131d0:	46bd      	mov	sp, r7
 80131d2:	bd80      	pop	{r7, pc}
 80131d4:	20006e58 	.word	0x20006e58
 80131d8:	20006e60 	.word	0x20006e60

080131dc <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 80131dc:	b580      	push	{r7, lr}
 80131de:	b084      	sub	sp, #16
 80131e0:	af00      	add	r7, sp, #0
 80131e2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 80131e4:	687b      	ldr	r3, [r7, #4]
 80131e6:	2b00      	cmp	r3, #0
 80131e8:	d109      	bne.n	80131fe <dhcp_start+0x22>
 80131ea:	4b37      	ldr	r3, [pc, #220]	; (80132c8 <dhcp_start+0xec>)
 80131ec:	f240 22e7 	movw	r2, #743	; 0x2e7
 80131f0:	4936      	ldr	r1, [pc, #216]	; (80132cc <dhcp_start+0xf0>)
 80131f2:	4837      	ldr	r0, [pc, #220]	; (80132d0 <dhcp_start+0xf4>)
 80131f4:	f004 fb3c 	bl	8017870 <iprintf>
 80131f8:	f06f 030f 	mvn.w	r3, #15
 80131fc:	e060      	b.n	80132c0 <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 80131fe:	687b      	ldr	r3, [r7, #4]
 8013200:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8013204:	f003 0301 	and.w	r3, r3, #1
 8013208:	2b00      	cmp	r3, #0
 801320a:	d109      	bne.n	8013220 <dhcp_start+0x44>
 801320c:	4b2e      	ldr	r3, [pc, #184]	; (80132c8 <dhcp_start+0xec>)
 801320e:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 8013212:	4930      	ldr	r1, [pc, #192]	; (80132d4 <dhcp_start+0xf8>)
 8013214:	482e      	ldr	r0, [pc, #184]	; (80132d0 <dhcp_start+0xf4>)
 8013216:	f004 fb2b 	bl	8017870 <iprintf>
 801321a:	f06f 030f 	mvn.w	r3, #15
 801321e:	e04f      	b.n	80132c0 <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 8013220:	687b      	ldr	r3, [r7, #4]
 8013222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013224:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 8013226:	687b      	ldr	r3, [r7, #4]
 8013228:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801322a:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 801322e:	d202      	bcs.n	8013236 <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 8013230:	f04f 33ff 	mov.w	r3, #4294967295
 8013234:	e044      	b.n	80132c0 <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 8013236:	68fb      	ldr	r3, [r7, #12]
 8013238:	2b00      	cmp	r3, #0
 801323a:	d10d      	bne.n	8013258 <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 801323c:	2034      	movs	r0, #52	; 0x34
 801323e:	f7f8 fae5 	bl	800b80c <mem_malloc>
 8013242:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 8013244:	68fb      	ldr	r3, [r7, #12]
 8013246:	2b00      	cmp	r3, #0
 8013248:	d102      	bne.n	8013250 <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 801324a:	f04f 33ff 	mov.w	r3, #4294967295
 801324e:	e037      	b.n	80132c0 <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 8013250:	687b      	ldr	r3, [r7, #4]
 8013252:	68fa      	ldr	r2, [r7, #12]
 8013254:	625a      	str	r2, [r3, #36]	; 0x24
 8013256:	e005      	b.n	8013264 <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 8013258:	68fb      	ldr	r3, [r7, #12]
 801325a:	791b      	ldrb	r3, [r3, #4]
 801325c:	2b00      	cmp	r3, #0
 801325e:	d001      	beq.n	8013264 <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8013260:	f7ff fc92 	bl	8012b88 <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 8013264:	2234      	movs	r2, #52	; 0x34
 8013266:	2100      	movs	r1, #0
 8013268:	68f8      	ldr	r0, [r7, #12]
 801326a:	f003 fde5 	bl	8016e38 <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 801326e:	f7ff fc39 	bl	8012ae4 <dhcp_inc_pcb_refcount>
 8013272:	4603      	mov	r3, r0
 8013274:	2b00      	cmp	r3, #0
 8013276:	d002      	beq.n	801327e <dhcp_start+0xa2>
    return ERR_MEM;
 8013278:	f04f 33ff 	mov.w	r3, #4294967295
 801327c:	e020      	b.n	80132c0 <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 801327e:	68fb      	ldr	r3, [r7, #12]
 8013280:	2201      	movs	r2, #1
 8013282:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 8013284:	687b      	ldr	r3, [r7, #4]
 8013286:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801328a:	f003 0304 	and.w	r3, r3, #4
 801328e:	2b00      	cmp	r3, #0
 8013290:	d105      	bne.n	801329e <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 8013292:	2102      	movs	r1, #2
 8013294:	68f8      	ldr	r0, [r7, #12]
 8013296:	f000 fcc5 	bl	8013c24 <dhcp_set_state>
    return ERR_OK;
 801329a:	2300      	movs	r3, #0
 801329c:	e010      	b.n	80132c0 <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 801329e:	6878      	ldr	r0, [r7, #4]
 80132a0:	f000 f8bc 	bl	801341c <dhcp_discover>
 80132a4:	4603      	mov	r3, r0
 80132a6:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 80132a8:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80132ac:	2b00      	cmp	r3, #0
 80132ae:	d005      	beq.n	80132bc <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 80132b0:	6878      	ldr	r0, [r7, #4]
 80132b2:	f000 fc1d 	bl	8013af0 <dhcp_release_and_stop>
    return ERR_MEM;
 80132b6:	f04f 33ff 	mov.w	r3, #4294967295
 80132ba:	e001      	b.n	80132c0 <dhcp_start+0xe4>
  }
  return result;
 80132bc:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80132c0:	4618      	mov	r0, r3
 80132c2:	3710      	adds	r7, #16
 80132c4:	46bd      	mov	sp, r7
 80132c6:	bd80      	pop	{r7, pc}
 80132c8:	0801ef5c 	.word	0x0801ef5c
 80132cc:	0801f040 	.word	0x0801f040
 80132d0:	0801efbc 	.word	0x0801efbc
 80132d4:	0801f084 	.word	0x0801f084

080132d8 <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 80132d8:	b580      	push	{r7, lr}
 80132da:	b084      	sub	sp, #16
 80132dc:	af00      	add	r7, sp, #0
 80132de:	6078      	str	r0, [r7, #4]
 80132e0:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80132e2:	687b      	ldr	r3, [r7, #4]
 80132e4:	2b00      	cmp	r3, #0
 80132e6:	d107      	bne.n	80132f8 <dhcp_arp_reply+0x20>
 80132e8:	4b0e      	ldr	r3, [pc, #56]	; (8013324 <dhcp_arp_reply+0x4c>)
 80132ea:	f240 328b 	movw	r2, #907	; 0x38b
 80132ee:	490e      	ldr	r1, [pc, #56]	; (8013328 <dhcp_arp_reply+0x50>)
 80132f0:	480e      	ldr	r0, [pc, #56]	; (801332c <dhcp_arp_reply+0x54>)
 80132f2:	f004 fabd 	bl	8017870 <iprintf>
 80132f6:	e012      	b.n	801331e <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 80132f8:	687b      	ldr	r3, [r7, #4]
 80132fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80132fc:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 80132fe:	68fb      	ldr	r3, [r7, #12]
 8013300:	2b00      	cmp	r3, #0
 8013302:	d00c      	beq.n	801331e <dhcp_arp_reply+0x46>
 8013304:	68fb      	ldr	r3, [r7, #12]
 8013306:	795b      	ldrb	r3, [r3, #5]
 8013308:	2b08      	cmp	r3, #8
 801330a:	d108      	bne.n	801331e <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 801330c:	683b      	ldr	r3, [r7, #0]
 801330e:	681a      	ldr	r2, [r3, #0]
 8013310:	68fb      	ldr	r3, [r7, #12]
 8013312:	69db      	ldr	r3, [r3, #28]
 8013314:	429a      	cmp	r2, r3
 8013316:	d102      	bne.n	801331e <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 8013318:	6878      	ldr	r0, [r7, #4]
 801331a:	f000 f809 	bl	8013330 <dhcp_decline>
    }
  }
}
 801331e:	3710      	adds	r7, #16
 8013320:	46bd      	mov	sp, r7
 8013322:	bd80      	pop	{r7, pc}
 8013324:	0801ef5c 	.word	0x0801ef5c
 8013328:	0801f040 	.word	0x0801f040
 801332c:	0801efbc 	.word	0x0801efbc

08013330 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 8013330:	b5b0      	push	{r4, r5, r7, lr}
 8013332:	b08a      	sub	sp, #40	; 0x28
 8013334:	af02      	add	r7, sp, #8
 8013336:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013338:	687b      	ldr	r3, [r7, #4]
 801333a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801333c:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 801333e:	210c      	movs	r1, #12
 8013340:	69b8      	ldr	r0, [r7, #24]
 8013342:	f000 fc6f 	bl	8013c24 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 8013346:	f107 030c 	add.w	r3, r7, #12
 801334a:	2204      	movs	r2, #4
 801334c:	69b9      	ldr	r1, [r7, #24]
 801334e:	6878      	ldr	r0, [r7, #4]
 8013350:	f001 f8f4 	bl	801453c <dhcp_create_msg>
 8013354:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8013356:	697b      	ldr	r3, [r7, #20]
 8013358:	2b00      	cmp	r3, #0
 801335a:	d035      	beq.n	80133c8 <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801335c:	697b      	ldr	r3, [r7, #20]
 801335e:	685b      	ldr	r3, [r3, #4]
 8013360:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8013362:	89b8      	ldrh	r0, [r7, #12]
 8013364:	693b      	ldr	r3, [r7, #16]
 8013366:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801336a:	2304      	movs	r3, #4
 801336c:	2232      	movs	r2, #50	; 0x32
 801336e:	f000 fc73 	bl	8013c58 <dhcp_option>
 8013372:	4603      	mov	r3, r0
 8013374:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8013376:	89bc      	ldrh	r4, [r7, #12]
 8013378:	693b      	ldr	r3, [r7, #16]
 801337a:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 801337e:	69bb      	ldr	r3, [r7, #24]
 8013380:	69db      	ldr	r3, [r3, #28]
 8013382:	4618      	mov	r0, r3
 8013384:	f7f7 ff6f 	bl	800b266 <lwip_htonl>
 8013388:	4603      	mov	r3, r0
 801338a:	461a      	mov	r2, r3
 801338c:	4629      	mov	r1, r5
 801338e:	4620      	mov	r0, r4
 8013390:	f000 fcee 	bl	8013d70 <dhcp_option_long>
 8013394:	4603      	mov	r3, r0
 8013396:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8013398:	89b8      	ldrh	r0, [r7, #12]
 801339a:	693b      	ldr	r3, [r7, #16]
 801339c:	33f0      	adds	r3, #240	; 0xf0
 801339e:	697a      	ldr	r2, [r7, #20]
 80133a0:	4619      	mov	r1, r3
 80133a2:	f001 f9a1 	bl	80146e8 <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 80133a6:	4b19      	ldr	r3, [pc, #100]	; (801340c <dhcp_decline+0xdc>)
 80133a8:	6818      	ldr	r0, [r3, #0]
 80133aa:	4b19      	ldr	r3, [pc, #100]	; (8013410 <dhcp_decline+0xe0>)
 80133ac:	9301      	str	r3, [sp, #4]
 80133ae:	687b      	ldr	r3, [r7, #4]
 80133b0:	9300      	str	r3, [sp, #0]
 80133b2:	2343      	movs	r3, #67	; 0x43
 80133b4:	4a17      	ldr	r2, [pc, #92]	; (8013414 <dhcp_decline+0xe4>)
 80133b6:	6979      	ldr	r1, [r7, #20]
 80133b8:	f7ff f90e 	bl	80125d8 <udp_sendto_if_src>
 80133bc:	4603      	mov	r3, r0
 80133be:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80133c0:	6978      	ldr	r0, [r7, #20]
 80133c2:	f7f9 f9d7 	bl	800c774 <pbuf_free>
 80133c6:	e001      	b.n	80133cc <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80133c8:	23ff      	movs	r3, #255	; 0xff
 80133ca:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80133cc:	69bb      	ldr	r3, [r7, #24]
 80133ce:	799b      	ldrb	r3, [r3, #6]
 80133d0:	2bff      	cmp	r3, #255	; 0xff
 80133d2:	d005      	beq.n	80133e0 <dhcp_decline+0xb0>
    dhcp->tries++;
 80133d4:	69bb      	ldr	r3, [r7, #24]
 80133d6:	799b      	ldrb	r3, [r3, #6]
 80133d8:	3301      	adds	r3, #1
 80133da:	b2da      	uxtb	r2, r3
 80133dc:	69bb      	ldr	r3, [r7, #24]
 80133de:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 80133e0:	f242 7310 	movw	r3, #10000	; 0x2710
 80133e4:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80133e6:	89fb      	ldrh	r3, [r7, #14]
 80133e8:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80133ec:	4a0a      	ldr	r2, [pc, #40]	; (8013418 <dhcp_decline+0xe8>)
 80133ee:	fb82 1203 	smull	r1, r2, r2, r3
 80133f2:	1152      	asrs	r2, r2, #5
 80133f4:	17db      	asrs	r3, r3, #31
 80133f6:	1ad3      	subs	r3, r2, r3
 80133f8:	b29a      	uxth	r2, r3
 80133fa:	69bb      	ldr	r3, [r7, #24]
 80133fc:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80133fe:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8013402:	4618      	mov	r0, r3
 8013404:	3720      	adds	r7, #32
 8013406:	46bd      	mov	sp, r7
 8013408:	bdb0      	pop	{r4, r5, r7, pc}
 801340a:	bf00      	nop
 801340c:	20000498 	.word	0x20000498
 8013410:	0801fac8 	.word	0x0801fac8
 8013414:	0801facc 	.word	0x0801facc
 8013418:	10624dd3 	.word	0x10624dd3

0801341c <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 801341c:	b580      	push	{r7, lr}
 801341e:	b08a      	sub	sp, #40	; 0x28
 8013420:	af02      	add	r7, sp, #8
 8013422:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013424:	687b      	ldr	r3, [r7, #4]
 8013426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013428:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 801342a:	2300      	movs	r3, #0
 801342c:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 801342e:	69bb      	ldr	r3, [r7, #24]
 8013430:	2200      	movs	r2, #0
 8013432:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 8013434:	2106      	movs	r1, #6
 8013436:	69b8      	ldr	r0, [r7, #24]
 8013438:	f000 fbf4 	bl	8013c24 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 801343c:	f107 0308 	add.w	r3, r7, #8
 8013440:	2201      	movs	r2, #1
 8013442:	69b9      	ldr	r1, [r7, #24]
 8013444:	6878      	ldr	r0, [r7, #4]
 8013446:	f001 f879 	bl	801453c <dhcp_create_msg>
 801344a:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 801344c:	693b      	ldr	r3, [r7, #16]
 801344e:	2b00      	cmp	r3, #0
 8013450:	d04b      	beq.n	80134ea <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8013452:	693b      	ldr	r3, [r7, #16]
 8013454:	685b      	ldr	r3, [r3, #4]
 8013456:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8013458:	8938      	ldrh	r0, [r7, #8]
 801345a:	68fb      	ldr	r3, [r7, #12]
 801345c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013460:	2302      	movs	r3, #2
 8013462:	2239      	movs	r2, #57	; 0x39
 8013464:	f000 fbf8 	bl	8013c58 <dhcp_option>
 8013468:	4603      	mov	r3, r0
 801346a:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801346c:	8938      	ldrh	r0, [r7, #8]
 801346e:	68fb      	ldr	r3, [r7, #12]
 8013470:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013474:	687b      	ldr	r3, [r7, #4]
 8013476:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013478:	461a      	mov	r2, r3
 801347a:	f000 fc47 	bl	8013d0c <dhcp_option_short>
 801347e:	4603      	mov	r3, r0
 8013480:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8013482:	8938      	ldrh	r0, [r7, #8]
 8013484:	68fb      	ldr	r3, [r7, #12]
 8013486:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801348a:	2303      	movs	r3, #3
 801348c:	2237      	movs	r2, #55	; 0x37
 801348e:	f000 fbe3 	bl	8013c58 <dhcp_option>
 8013492:	4603      	mov	r3, r0
 8013494:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8013496:	2300      	movs	r3, #0
 8013498:	77fb      	strb	r3, [r7, #31]
 801349a:	e00e      	b.n	80134ba <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801349c:	8938      	ldrh	r0, [r7, #8]
 801349e:	68fb      	ldr	r3, [r7, #12]
 80134a0:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80134a4:	7ffb      	ldrb	r3, [r7, #31]
 80134a6:	4a29      	ldr	r2, [pc, #164]	; (801354c <dhcp_discover+0x130>)
 80134a8:	5cd3      	ldrb	r3, [r2, r3]
 80134aa:	461a      	mov	r2, r3
 80134ac:	f000 fc08 	bl	8013cc0 <dhcp_option_byte>
 80134b0:	4603      	mov	r3, r0
 80134b2:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80134b4:	7ffb      	ldrb	r3, [r7, #31]
 80134b6:	3301      	adds	r3, #1
 80134b8:	77fb      	strb	r3, [r7, #31]
 80134ba:	7ffb      	ldrb	r3, [r7, #31]
 80134bc:	2b02      	cmp	r3, #2
 80134be:	d9ed      	bls.n	801349c <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80134c0:	8938      	ldrh	r0, [r7, #8]
 80134c2:	68fb      	ldr	r3, [r7, #12]
 80134c4:	33f0      	adds	r3, #240	; 0xf0
 80134c6:	693a      	ldr	r2, [r7, #16]
 80134c8:	4619      	mov	r1, r3
 80134ca:	f001 f90d 	bl	80146e8 <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 80134ce:	4b20      	ldr	r3, [pc, #128]	; (8013550 <dhcp_discover+0x134>)
 80134d0:	6818      	ldr	r0, [r3, #0]
 80134d2:	4b20      	ldr	r3, [pc, #128]	; (8013554 <dhcp_discover+0x138>)
 80134d4:	9301      	str	r3, [sp, #4]
 80134d6:	687b      	ldr	r3, [r7, #4]
 80134d8:	9300      	str	r3, [sp, #0]
 80134da:	2343      	movs	r3, #67	; 0x43
 80134dc:	4a1e      	ldr	r2, [pc, #120]	; (8013558 <dhcp_discover+0x13c>)
 80134de:	6939      	ldr	r1, [r7, #16]
 80134e0:	f7ff f87a 	bl	80125d8 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 80134e4:	6938      	ldr	r0, [r7, #16]
 80134e6:	f7f9 f945 	bl	800c774 <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 80134ea:	69bb      	ldr	r3, [r7, #24]
 80134ec:	799b      	ldrb	r3, [r3, #6]
 80134ee:	2bff      	cmp	r3, #255	; 0xff
 80134f0:	d005      	beq.n	80134fe <dhcp_discover+0xe2>
    dhcp->tries++;
 80134f2:	69bb      	ldr	r3, [r7, #24]
 80134f4:	799b      	ldrb	r3, [r3, #6]
 80134f6:	3301      	adds	r3, #1
 80134f8:	b2da      	uxtb	r2, r3
 80134fa:	69bb      	ldr	r3, [r7, #24]
 80134fc:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 80134fe:	69bb      	ldr	r3, [r7, #24]
 8013500:	799b      	ldrb	r3, [r3, #6]
 8013502:	2b05      	cmp	r3, #5
 8013504:	d80d      	bhi.n	8013522 <dhcp_discover+0x106>
 8013506:	69bb      	ldr	r3, [r7, #24]
 8013508:	799b      	ldrb	r3, [r3, #6]
 801350a:	461a      	mov	r2, r3
 801350c:	2301      	movs	r3, #1
 801350e:	4093      	lsls	r3, r2
 8013510:	b29b      	uxth	r3, r3
 8013512:	461a      	mov	r2, r3
 8013514:	0152      	lsls	r2, r2, #5
 8013516:	1ad2      	subs	r2, r2, r3
 8013518:	0092      	lsls	r2, r2, #2
 801351a:	4413      	add	r3, r2
 801351c:	00db      	lsls	r3, r3, #3
 801351e:	b29b      	uxth	r3, r3
 8013520:	e001      	b.n	8013526 <dhcp_discover+0x10a>
 8013522:	f64e 2360 	movw	r3, #60000	; 0xea60
 8013526:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8013528:	897b      	ldrh	r3, [r7, #10]
 801352a:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801352e:	4a0b      	ldr	r2, [pc, #44]	; (801355c <dhcp_discover+0x140>)
 8013530:	fb82 1203 	smull	r1, r2, r2, r3
 8013534:	1152      	asrs	r2, r2, #5
 8013536:	17db      	asrs	r3, r3, #31
 8013538:	1ad3      	subs	r3, r2, r3
 801353a:	b29a      	uxth	r2, r3
 801353c:	69bb      	ldr	r3, [r7, #24]
 801353e:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8013540:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8013544:	4618      	mov	r0, r3
 8013546:	3720      	adds	r7, #32
 8013548:	46bd      	mov	sp, r7
 801354a:	bd80      	pop	{r7, pc}
 801354c:	20000070 	.word	0x20000070
 8013550:	20000498 	.word	0x20000498
 8013554:	0801fac8 	.word	0x0801fac8
 8013558:	0801facc 	.word	0x0801facc
 801355c:	10624dd3 	.word	0x10624dd3

08013560 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 8013560:	b580      	push	{r7, lr}
 8013562:	b088      	sub	sp, #32
 8013564:	af00      	add	r7, sp, #0
 8013566:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 8013568:	687b      	ldr	r3, [r7, #4]
 801356a:	2b00      	cmp	r3, #0
 801356c:	d107      	bne.n	801357e <dhcp_bind+0x1e>
 801356e:	4b64      	ldr	r3, [pc, #400]	; (8013700 <dhcp_bind+0x1a0>)
 8013570:	f240 4215 	movw	r2, #1045	; 0x415
 8013574:	4963      	ldr	r1, [pc, #396]	; (8013704 <dhcp_bind+0x1a4>)
 8013576:	4864      	ldr	r0, [pc, #400]	; (8013708 <dhcp_bind+0x1a8>)
 8013578:	f004 f97a 	bl	8017870 <iprintf>
 801357c:	e0bc      	b.n	80136f8 <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 801357e:	687b      	ldr	r3, [r7, #4]
 8013580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013582:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 8013584:	69bb      	ldr	r3, [r7, #24]
 8013586:	2b00      	cmp	r3, #0
 8013588:	d107      	bne.n	801359a <dhcp_bind+0x3a>
 801358a:	4b5d      	ldr	r3, [pc, #372]	; (8013700 <dhcp_bind+0x1a0>)
 801358c:	f240 4217 	movw	r2, #1047	; 0x417
 8013590:	495e      	ldr	r1, [pc, #376]	; (801370c <dhcp_bind+0x1ac>)
 8013592:	485d      	ldr	r0, [pc, #372]	; (8013708 <dhcp_bind+0x1a8>)
 8013594:	f004 f96c 	bl	8017870 <iprintf>
 8013598:	e0ae      	b.n	80136f8 <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 801359a:	69bb      	ldr	r3, [r7, #24]
 801359c:	2200      	movs	r2, #0
 801359e:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 80135a0:	69bb      	ldr	r3, [r7, #24]
 80135a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80135a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80135a8:	d019      	beq.n	80135de <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80135aa:	69bb      	ldr	r3, [r7, #24]
 80135ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80135ae:	331e      	adds	r3, #30
 80135b0:	4a57      	ldr	r2, [pc, #348]	; (8013710 <dhcp_bind+0x1b0>)
 80135b2:	fba2 2303 	umull	r2, r3, r2, r3
 80135b6:	095b      	lsrs	r3, r3, #5
 80135b8:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 80135ba:	69fb      	ldr	r3, [r7, #28]
 80135bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80135c0:	d302      	bcc.n	80135c8 <dhcp_bind+0x68>
      timeout = 0xffff;
 80135c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80135c6:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 80135c8:	69fb      	ldr	r3, [r7, #28]
 80135ca:	b29a      	uxth	r2, r3
 80135cc:	69bb      	ldr	r3, [r7, #24]
 80135ce:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 80135d0:	69bb      	ldr	r3, [r7, #24]
 80135d2:	8a9b      	ldrh	r3, [r3, #20]
 80135d4:	2b00      	cmp	r3, #0
 80135d6:	d102      	bne.n	80135de <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 80135d8:	69bb      	ldr	r3, [r7, #24]
 80135da:	2201      	movs	r2, #1
 80135dc:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 80135de:	69bb      	ldr	r3, [r7, #24]
 80135e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80135e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80135e6:	d01d      	beq.n	8013624 <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80135e8:	69bb      	ldr	r3, [r7, #24]
 80135ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80135ec:	331e      	adds	r3, #30
 80135ee:	4a48      	ldr	r2, [pc, #288]	; (8013710 <dhcp_bind+0x1b0>)
 80135f0:	fba2 2303 	umull	r2, r3, r2, r3
 80135f4:	095b      	lsrs	r3, r3, #5
 80135f6:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 80135f8:	69fb      	ldr	r3, [r7, #28]
 80135fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80135fe:	d302      	bcc.n	8013606 <dhcp_bind+0xa6>
      timeout = 0xffff;
 8013600:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013604:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 8013606:	69fb      	ldr	r3, [r7, #28]
 8013608:	b29a      	uxth	r2, r3
 801360a:	69bb      	ldr	r3, [r7, #24]
 801360c:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 801360e:	69bb      	ldr	r3, [r7, #24]
 8013610:	895b      	ldrh	r3, [r3, #10]
 8013612:	2b00      	cmp	r3, #0
 8013614:	d102      	bne.n	801361c <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 8013616:	69bb      	ldr	r3, [r7, #24]
 8013618:	2201      	movs	r2, #1
 801361a:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 801361c:	69bb      	ldr	r3, [r7, #24]
 801361e:	895a      	ldrh	r2, [r3, #10]
 8013620:	69bb      	ldr	r3, [r7, #24]
 8013622:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 8013624:	69bb      	ldr	r3, [r7, #24]
 8013626:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013628:	f1b3 3fff 	cmp.w	r3, #4294967295
 801362c:	d01d      	beq.n	801366a <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801362e:	69bb      	ldr	r3, [r7, #24]
 8013630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013632:	331e      	adds	r3, #30
 8013634:	4a36      	ldr	r2, [pc, #216]	; (8013710 <dhcp_bind+0x1b0>)
 8013636:	fba2 2303 	umull	r2, r3, r2, r3
 801363a:	095b      	lsrs	r3, r3, #5
 801363c:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 801363e:	69fb      	ldr	r3, [r7, #28]
 8013640:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013644:	d302      	bcc.n	801364c <dhcp_bind+0xec>
      timeout = 0xffff;
 8013646:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801364a:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 801364c:	69fb      	ldr	r3, [r7, #28]
 801364e:	b29a      	uxth	r2, r3
 8013650:	69bb      	ldr	r3, [r7, #24]
 8013652:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 8013654:	69bb      	ldr	r3, [r7, #24]
 8013656:	899b      	ldrh	r3, [r3, #12]
 8013658:	2b00      	cmp	r3, #0
 801365a:	d102      	bne.n	8013662 <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 801365c:	69bb      	ldr	r3, [r7, #24]
 801365e:	2201      	movs	r2, #1
 8013660:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 8013662:	69bb      	ldr	r3, [r7, #24]
 8013664:	899a      	ldrh	r2, [r3, #12]
 8013666:	69bb      	ldr	r3, [r7, #24]
 8013668:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 801366a:	69bb      	ldr	r3, [r7, #24]
 801366c:	895a      	ldrh	r2, [r3, #10]
 801366e:	69bb      	ldr	r3, [r7, #24]
 8013670:	899b      	ldrh	r3, [r3, #12]
 8013672:	429a      	cmp	r2, r3
 8013674:	d306      	bcc.n	8013684 <dhcp_bind+0x124>
 8013676:	69bb      	ldr	r3, [r7, #24]
 8013678:	899b      	ldrh	r3, [r3, #12]
 801367a:	2b00      	cmp	r3, #0
 801367c:	d002      	beq.n	8013684 <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 801367e:	69bb      	ldr	r3, [r7, #24]
 8013680:	2200      	movs	r2, #0
 8013682:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 8013684:	69bb      	ldr	r3, [r7, #24]
 8013686:	79db      	ldrb	r3, [r3, #7]
 8013688:	2b00      	cmp	r3, #0
 801368a:	d003      	beq.n	8013694 <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 801368c:	69bb      	ldr	r3, [r7, #24]
 801368e:	6a1b      	ldr	r3, [r3, #32]
 8013690:	613b      	str	r3, [r7, #16]
 8013692:	e014      	b.n	80136be <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 8013694:	69bb      	ldr	r3, [r7, #24]
 8013696:	331c      	adds	r3, #28
 8013698:	781b      	ldrb	r3, [r3, #0]
 801369a:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 801369c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80136a0:	2b00      	cmp	r3, #0
 80136a2:	db02      	blt.n	80136aa <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 80136a4:	23ff      	movs	r3, #255	; 0xff
 80136a6:	613b      	str	r3, [r7, #16]
 80136a8:	e009      	b.n	80136be <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 80136aa:	7dfb      	ldrb	r3, [r7, #23]
 80136ac:	2bbf      	cmp	r3, #191	; 0xbf
 80136ae:	d903      	bls.n	80136b8 <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 80136b0:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80136b4:	613b      	str	r3, [r7, #16]
 80136b6:	e002      	b.n	80136be <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 80136b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80136bc:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 80136be:	69bb      	ldr	r3, [r7, #24]
 80136c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80136c2:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 80136c4:	68fb      	ldr	r3, [r7, #12]
 80136c6:	2b00      	cmp	r3, #0
 80136c8:	d108      	bne.n	80136dc <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 80136ca:	69bb      	ldr	r3, [r7, #24]
 80136cc:	69da      	ldr	r2, [r3, #28]
 80136ce:	693b      	ldr	r3, [r7, #16]
 80136d0:	4013      	ands	r3, r2
 80136d2:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 80136d4:	68fb      	ldr	r3, [r7, #12]
 80136d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80136da:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 80136dc:	210a      	movs	r1, #10
 80136de:	69b8      	ldr	r0, [r7, #24]
 80136e0:	f000 faa0 	bl	8013c24 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 80136e4:	69bb      	ldr	r3, [r7, #24]
 80136e6:	f103 011c 	add.w	r1, r3, #28
 80136ea:	f107 030c 	add.w	r3, r7, #12
 80136ee:	f107 0210 	add.w	r2, r7, #16
 80136f2:	6878      	ldr	r0, [r7, #4]
 80136f4:	f7f8 fbe6 	bl	800bec4 <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 80136f8:	3720      	adds	r7, #32
 80136fa:	46bd      	mov	sp, r7
 80136fc:	bd80      	pop	{r7, pc}
 80136fe:	bf00      	nop
 8013700:	0801ef5c 	.word	0x0801ef5c
 8013704:	0801f0bc 	.word	0x0801f0bc
 8013708:	0801efbc 	.word	0x0801efbc
 801370c:	0801f0d8 	.word	0x0801f0d8
 8013710:	88888889 	.word	0x88888889

08013714 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 8013714:	b580      	push	{r7, lr}
 8013716:	b08a      	sub	sp, #40	; 0x28
 8013718:	af02      	add	r7, sp, #8
 801371a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801371c:	687b      	ldr	r3, [r7, #4]
 801371e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013720:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 8013722:	2105      	movs	r1, #5
 8013724:	69b8      	ldr	r0, [r7, #24]
 8013726:	f000 fa7d 	bl	8013c24 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801372a:	f107 030c 	add.w	r3, r7, #12
 801372e:	2203      	movs	r2, #3
 8013730:	69b9      	ldr	r1, [r7, #24]
 8013732:	6878      	ldr	r0, [r7, #4]
 8013734:	f000 ff02 	bl	801453c <dhcp_create_msg>
 8013738:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801373a:	697b      	ldr	r3, [r7, #20]
 801373c:	2b00      	cmp	r3, #0
 801373e:	d04e      	beq.n	80137de <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8013740:	697b      	ldr	r3, [r7, #20]
 8013742:	685b      	ldr	r3, [r3, #4]
 8013744:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8013746:	89b8      	ldrh	r0, [r7, #12]
 8013748:	693b      	ldr	r3, [r7, #16]
 801374a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801374e:	2302      	movs	r3, #2
 8013750:	2239      	movs	r2, #57	; 0x39
 8013752:	f000 fa81 	bl	8013c58 <dhcp_option>
 8013756:	4603      	mov	r3, r0
 8013758:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801375a:	89b8      	ldrh	r0, [r7, #12]
 801375c:	693b      	ldr	r3, [r7, #16]
 801375e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013762:	687b      	ldr	r3, [r7, #4]
 8013764:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013766:	461a      	mov	r2, r3
 8013768:	f000 fad0 	bl	8013d0c <dhcp_option_short>
 801376c:	4603      	mov	r3, r0
 801376e:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8013770:	89b8      	ldrh	r0, [r7, #12]
 8013772:	693b      	ldr	r3, [r7, #16]
 8013774:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013778:	2303      	movs	r3, #3
 801377a:	2237      	movs	r2, #55	; 0x37
 801377c:	f000 fa6c 	bl	8013c58 <dhcp_option>
 8013780:	4603      	mov	r3, r0
 8013782:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8013784:	2300      	movs	r3, #0
 8013786:	77bb      	strb	r3, [r7, #30]
 8013788:	e00e      	b.n	80137a8 <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801378a:	89b8      	ldrh	r0, [r7, #12]
 801378c:	693b      	ldr	r3, [r7, #16]
 801378e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013792:	7fbb      	ldrb	r3, [r7, #30]
 8013794:	4a2a      	ldr	r2, [pc, #168]	; (8013840 <dhcp_renew+0x12c>)
 8013796:	5cd3      	ldrb	r3, [r2, r3]
 8013798:	461a      	mov	r2, r3
 801379a:	f000 fa91 	bl	8013cc0 <dhcp_option_byte>
 801379e:	4603      	mov	r3, r0
 80137a0:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80137a2:	7fbb      	ldrb	r3, [r7, #30]
 80137a4:	3301      	adds	r3, #1
 80137a6:	77bb      	strb	r3, [r7, #30]
 80137a8:	7fbb      	ldrb	r3, [r7, #30]
 80137aa:	2b02      	cmp	r3, #2
 80137ac:	d9ed      	bls.n	801378a <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80137ae:	89b8      	ldrh	r0, [r7, #12]
 80137b0:	693b      	ldr	r3, [r7, #16]
 80137b2:	33f0      	adds	r3, #240	; 0xf0
 80137b4:	697a      	ldr	r2, [r7, #20]
 80137b6:	4619      	mov	r1, r3
 80137b8:	f000 ff96 	bl	80146e8 <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80137bc:	4b21      	ldr	r3, [pc, #132]	; (8013844 <dhcp_renew+0x130>)
 80137be:	6818      	ldr	r0, [r3, #0]
 80137c0:	69bb      	ldr	r3, [r7, #24]
 80137c2:	f103 0218 	add.w	r2, r3, #24
 80137c6:	687b      	ldr	r3, [r7, #4]
 80137c8:	9300      	str	r3, [sp, #0]
 80137ca:	2343      	movs	r3, #67	; 0x43
 80137cc:	6979      	ldr	r1, [r7, #20]
 80137ce:	f7fe fe8f 	bl	80124f0 <udp_sendto_if>
 80137d2:	4603      	mov	r3, r0
 80137d4:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80137d6:	6978      	ldr	r0, [r7, #20]
 80137d8:	f7f8 ffcc 	bl	800c774 <pbuf_free>
 80137dc:	e001      	b.n	80137e2 <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80137de:	23ff      	movs	r3, #255	; 0xff
 80137e0:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80137e2:	69bb      	ldr	r3, [r7, #24]
 80137e4:	799b      	ldrb	r3, [r3, #6]
 80137e6:	2bff      	cmp	r3, #255	; 0xff
 80137e8:	d005      	beq.n	80137f6 <dhcp_renew+0xe2>
    dhcp->tries++;
 80137ea:	69bb      	ldr	r3, [r7, #24]
 80137ec:	799b      	ldrb	r3, [r3, #6]
 80137ee:	3301      	adds	r3, #1
 80137f0:	b2da      	uxtb	r2, r3
 80137f2:	69bb      	ldr	r3, [r7, #24]
 80137f4:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 80137f6:	69bb      	ldr	r3, [r7, #24]
 80137f8:	799b      	ldrb	r3, [r3, #6]
 80137fa:	2b09      	cmp	r3, #9
 80137fc:	d80a      	bhi.n	8013814 <dhcp_renew+0x100>
 80137fe:	69bb      	ldr	r3, [r7, #24]
 8013800:	799b      	ldrb	r3, [r3, #6]
 8013802:	b29b      	uxth	r3, r3
 8013804:	461a      	mov	r2, r3
 8013806:	0152      	lsls	r2, r2, #5
 8013808:	1ad2      	subs	r2, r2, r3
 801380a:	0092      	lsls	r2, r2, #2
 801380c:	4413      	add	r3, r2
 801380e:	011b      	lsls	r3, r3, #4
 8013810:	b29b      	uxth	r3, r3
 8013812:	e001      	b.n	8013818 <dhcp_renew+0x104>
 8013814:	f644 6320 	movw	r3, #20000	; 0x4e20
 8013818:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801381a:	89fb      	ldrh	r3, [r7, #14]
 801381c:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8013820:	4a09      	ldr	r2, [pc, #36]	; (8013848 <dhcp_renew+0x134>)
 8013822:	fb82 1203 	smull	r1, r2, r2, r3
 8013826:	1152      	asrs	r2, r2, #5
 8013828:	17db      	asrs	r3, r3, #31
 801382a:	1ad3      	subs	r3, r2, r3
 801382c:	b29a      	uxth	r2, r3
 801382e:	69bb      	ldr	r3, [r7, #24]
 8013830:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8013832:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8013836:	4618      	mov	r0, r3
 8013838:	3720      	adds	r7, #32
 801383a:	46bd      	mov	sp, r7
 801383c:	bd80      	pop	{r7, pc}
 801383e:	bf00      	nop
 8013840:	20000070 	.word	0x20000070
 8013844:	20000498 	.word	0x20000498
 8013848:	10624dd3 	.word	0x10624dd3

0801384c <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 801384c:	b580      	push	{r7, lr}
 801384e:	b08a      	sub	sp, #40	; 0x28
 8013850:	af02      	add	r7, sp, #8
 8013852:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013854:	687b      	ldr	r3, [r7, #4]
 8013856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013858:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 801385a:	2104      	movs	r1, #4
 801385c:	69b8      	ldr	r0, [r7, #24]
 801385e:	f000 f9e1 	bl	8013c24 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8013862:	f107 030c 	add.w	r3, r7, #12
 8013866:	2203      	movs	r2, #3
 8013868:	69b9      	ldr	r1, [r7, #24]
 801386a:	6878      	ldr	r0, [r7, #4]
 801386c:	f000 fe66 	bl	801453c <dhcp_create_msg>
 8013870:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8013872:	697b      	ldr	r3, [r7, #20]
 8013874:	2b00      	cmp	r3, #0
 8013876:	d04c      	beq.n	8013912 <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8013878:	697b      	ldr	r3, [r7, #20]
 801387a:	685b      	ldr	r3, [r3, #4]
 801387c:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801387e:	89b8      	ldrh	r0, [r7, #12]
 8013880:	693b      	ldr	r3, [r7, #16]
 8013882:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013886:	2302      	movs	r3, #2
 8013888:	2239      	movs	r2, #57	; 0x39
 801388a:	f000 f9e5 	bl	8013c58 <dhcp_option>
 801388e:	4603      	mov	r3, r0
 8013890:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8013892:	89b8      	ldrh	r0, [r7, #12]
 8013894:	693b      	ldr	r3, [r7, #16]
 8013896:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801389a:	687b      	ldr	r3, [r7, #4]
 801389c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801389e:	461a      	mov	r2, r3
 80138a0:	f000 fa34 	bl	8013d0c <dhcp_option_short>
 80138a4:	4603      	mov	r3, r0
 80138a6:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80138a8:	89b8      	ldrh	r0, [r7, #12]
 80138aa:	693b      	ldr	r3, [r7, #16]
 80138ac:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80138b0:	2303      	movs	r3, #3
 80138b2:	2237      	movs	r2, #55	; 0x37
 80138b4:	f000 f9d0 	bl	8013c58 <dhcp_option>
 80138b8:	4603      	mov	r3, r0
 80138ba:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80138bc:	2300      	movs	r3, #0
 80138be:	77bb      	strb	r3, [r7, #30]
 80138c0:	e00e      	b.n	80138e0 <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80138c2:	89b8      	ldrh	r0, [r7, #12]
 80138c4:	693b      	ldr	r3, [r7, #16]
 80138c6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80138ca:	7fbb      	ldrb	r3, [r7, #30]
 80138cc:	4a29      	ldr	r2, [pc, #164]	; (8013974 <dhcp_rebind+0x128>)
 80138ce:	5cd3      	ldrb	r3, [r2, r3]
 80138d0:	461a      	mov	r2, r3
 80138d2:	f000 f9f5 	bl	8013cc0 <dhcp_option_byte>
 80138d6:	4603      	mov	r3, r0
 80138d8:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80138da:	7fbb      	ldrb	r3, [r7, #30]
 80138dc:	3301      	adds	r3, #1
 80138de:	77bb      	strb	r3, [r7, #30]
 80138e0:	7fbb      	ldrb	r3, [r7, #30]
 80138e2:	2b02      	cmp	r3, #2
 80138e4:	d9ed      	bls.n	80138c2 <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80138e6:	89b8      	ldrh	r0, [r7, #12]
 80138e8:	693b      	ldr	r3, [r7, #16]
 80138ea:	33f0      	adds	r3, #240	; 0xf0
 80138ec:	697a      	ldr	r2, [r7, #20]
 80138ee:	4619      	mov	r1, r3
 80138f0:	f000 fefa 	bl	80146e8 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80138f4:	4b20      	ldr	r3, [pc, #128]	; (8013978 <dhcp_rebind+0x12c>)
 80138f6:	6818      	ldr	r0, [r3, #0]
 80138f8:	687b      	ldr	r3, [r7, #4]
 80138fa:	9300      	str	r3, [sp, #0]
 80138fc:	2343      	movs	r3, #67	; 0x43
 80138fe:	4a1f      	ldr	r2, [pc, #124]	; (801397c <dhcp_rebind+0x130>)
 8013900:	6979      	ldr	r1, [r7, #20]
 8013902:	f7fe fdf5 	bl	80124f0 <udp_sendto_if>
 8013906:	4603      	mov	r3, r0
 8013908:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801390a:	6978      	ldr	r0, [r7, #20]
 801390c:	f7f8 ff32 	bl	800c774 <pbuf_free>
 8013910:	e001      	b.n	8013916 <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8013912:	23ff      	movs	r3, #255	; 0xff
 8013914:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8013916:	69bb      	ldr	r3, [r7, #24]
 8013918:	799b      	ldrb	r3, [r3, #6]
 801391a:	2bff      	cmp	r3, #255	; 0xff
 801391c:	d005      	beq.n	801392a <dhcp_rebind+0xde>
    dhcp->tries++;
 801391e:	69bb      	ldr	r3, [r7, #24]
 8013920:	799b      	ldrb	r3, [r3, #6]
 8013922:	3301      	adds	r3, #1
 8013924:	b2da      	uxtb	r2, r3
 8013926:	69bb      	ldr	r3, [r7, #24]
 8013928:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 801392a:	69bb      	ldr	r3, [r7, #24]
 801392c:	799b      	ldrb	r3, [r3, #6]
 801392e:	2b09      	cmp	r3, #9
 8013930:	d80a      	bhi.n	8013948 <dhcp_rebind+0xfc>
 8013932:	69bb      	ldr	r3, [r7, #24]
 8013934:	799b      	ldrb	r3, [r3, #6]
 8013936:	b29b      	uxth	r3, r3
 8013938:	461a      	mov	r2, r3
 801393a:	0152      	lsls	r2, r2, #5
 801393c:	1ad2      	subs	r2, r2, r3
 801393e:	0092      	lsls	r2, r2, #2
 8013940:	4413      	add	r3, r2
 8013942:	00db      	lsls	r3, r3, #3
 8013944:	b29b      	uxth	r3, r3
 8013946:	e001      	b.n	801394c <dhcp_rebind+0x100>
 8013948:	f242 7310 	movw	r3, #10000	; 0x2710
 801394c:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801394e:	89fb      	ldrh	r3, [r7, #14]
 8013950:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8013954:	4a0a      	ldr	r2, [pc, #40]	; (8013980 <dhcp_rebind+0x134>)
 8013956:	fb82 1203 	smull	r1, r2, r2, r3
 801395a:	1152      	asrs	r2, r2, #5
 801395c:	17db      	asrs	r3, r3, #31
 801395e:	1ad3      	subs	r3, r2, r3
 8013960:	b29a      	uxth	r2, r3
 8013962:	69bb      	ldr	r3, [r7, #24]
 8013964:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8013966:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801396a:	4618      	mov	r0, r3
 801396c:	3720      	adds	r7, #32
 801396e:	46bd      	mov	sp, r7
 8013970:	bd80      	pop	{r7, pc}
 8013972:	bf00      	nop
 8013974:	20000070 	.word	0x20000070
 8013978:	20000498 	.word	0x20000498
 801397c:	0801facc 	.word	0x0801facc
 8013980:	10624dd3 	.word	0x10624dd3

08013984 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 8013984:	b5b0      	push	{r4, r5, r7, lr}
 8013986:	b08a      	sub	sp, #40	; 0x28
 8013988:	af02      	add	r7, sp, #8
 801398a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801398c:	687b      	ldr	r3, [r7, #4]
 801398e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013990:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 8013992:	2103      	movs	r1, #3
 8013994:	69b8      	ldr	r0, [r7, #24]
 8013996:	f000 f945 	bl	8013c24 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801399a:	f107 030c 	add.w	r3, r7, #12
 801399e:	2203      	movs	r2, #3
 80139a0:	69b9      	ldr	r1, [r7, #24]
 80139a2:	6878      	ldr	r0, [r7, #4]
 80139a4:	f000 fdca 	bl	801453c <dhcp_create_msg>
 80139a8:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 80139aa:	697b      	ldr	r3, [r7, #20]
 80139ac:	2b00      	cmp	r3, #0
 80139ae:	d066      	beq.n	8013a7e <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80139b0:	697b      	ldr	r3, [r7, #20]
 80139b2:	685b      	ldr	r3, [r3, #4]
 80139b4:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80139b6:	89b8      	ldrh	r0, [r7, #12]
 80139b8:	693b      	ldr	r3, [r7, #16]
 80139ba:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80139be:	2302      	movs	r3, #2
 80139c0:	2239      	movs	r2, #57	; 0x39
 80139c2:	f000 f949 	bl	8013c58 <dhcp_option>
 80139c6:	4603      	mov	r3, r0
 80139c8:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 80139ca:	89b8      	ldrh	r0, [r7, #12]
 80139cc:	693b      	ldr	r3, [r7, #16]
 80139ce:	33f0      	adds	r3, #240	; 0xf0
 80139d0:	f44f 7210 	mov.w	r2, #576	; 0x240
 80139d4:	4619      	mov	r1, r3
 80139d6:	f000 f999 	bl	8013d0c <dhcp_option_short>
 80139da:	4603      	mov	r3, r0
 80139dc:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 80139de:	89b8      	ldrh	r0, [r7, #12]
 80139e0:	693b      	ldr	r3, [r7, #16]
 80139e2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80139e6:	2304      	movs	r3, #4
 80139e8:	2232      	movs	r2, #50	; 0x32
 80139ea:	f000 f935 	bl	8013c58 <dhcp_option>
 80139ee:	4603      	mov	r3, r0
 80139f0:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 80139f2:	89bc      	ldrh	r4, [r7, #12]
 80139f4:	693b      	ldr	r3, [r7, #16]
 80139f6:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 80139fa:	69bb      	ldr	r3, [r7, #24]
 80139fc:	69db      	ldr	r3, [r3, #28]
 80139fe:	4618      	mov	r0, r3
 8013a00:	f7f7 fc31 	bl	800b266 <lwip_htonl>
 8013a04:	4603      	mov	r3, r0
 8013a06:	461a      	mov	r2, r3
 8013a08:	4629      	mov	r1, r5
 8013a0a:	4620      	mov	r0, r4
 8013a0c:	f000 f9b0 	bl	8013d70 <dhcp_option_long>
 8013a10:	4603      	mov	r3, r0
 8013a12:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8013a14:	89b8      	ldrh	r0, [r7, #12]
 8013a16:	693b      	ldr	r3, [r7, #16]
 8013a18:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013a1c:	2303      	movs	r3, #3
 8013a1e:	2237      	movs	r2, #55	; 0x37
 8013a20:	f000 f91a 	bl	8013c58 <dhcp_option>
 8013a24:	4603      	mov	r3, r0
 8013a26:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8013a28:	2300      	movs	r3, #0
 8013a2a:	77bb      	strb	r3, [r7, #30]
 8013a2c:	e00e      	b.n	8013a4c <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8013a2e:	89b8      	ldrh	r0, [r7, #12]
 8013a30:	693b      	ldr	r3, [r7, #16]
 8013a32:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013a36:	7fbb      	ldrb	r3, [r7, #30]
 8013a38:	4a29      	ldr	r2, [pc, #164]	; (8013ae0 <dhcp_reboot+0x15c>)
 8013a3a:	5cd3      	ldrb	r3, [r2, r3]
 8013a3c:	461a      	mov	r2, r3
 8013a3e:	f000 f93f 	bl	8013cc0 <dhcp_option_byte>
 8013a42:	4603      	mov	r3, r0
 8013a44:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8013a46:	7fbb      	ldrb	r3, [r7, #30]
 8013a48:	3301      	adds	r3, #1
 8013a4a:	77bb      	strb	r3, [r7, #30]
 8013a4c:	7fbb      	ldrb	r3, [r7, #30]
 8013a4e:	2b02      	cmp	r3, #2
 8013a50:	d9ed      	bls.n	8013a2e <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8013a52:	89b8      	ldrh	r0, [r7, #12]
 8013a54:	693b      	ldr	r3, [r7, #16]
 8013a56:	33f0      	adds	r3, #240	; 0xf0
 8013a58:	697a      	ldr	r2, [r7, #20]
 8013a5a:	4619      	mov	r1, r3
 8013a5c:	f000 fe44 	bl	80146e8 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8013a60:	4b20      	ldr	r3, [pc, #128]	; (8013ae4 <dhcp_reboot+0x160>)
 8013a62:	6818      	ldr	r0, [r3, #0]
 8013a64:	687b      	ldr	r3, [r7, #4]
 8013a66:	9300      	str	r3, [sp, #0]
 8013a68:	2343      	movs	r3, #67	; 0x43
 8013a6a:	4a1f      	ldr	r2, [pc, #124]	; (8013ae8 <dhcp_reboot+0x164>)
 8013a6c:	6979      	ldr	r1, [r7, #20]
 8013a6e:	f7fe fd3f 	bl	80124f0 <udp_sendto_if>
 8013a72:	4603      	mov	r3, r0
 8013a74:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8013a76:	6978      	ldr	r0, [r7, #20]
 8013a78:	f7f8 fe7c 	bl	800c774 <pbuf_free>
 8013a7c:	e001      	b.n	8013a82 <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8013a7e:	23ff      	movs	r3, #255	; 0xff
 8013a80:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8013a82:	69bb      	ldr	r3, [r7, #24]
 8013a84:	799b      	ldrb	r3, [r3, #6]
 8013a86:	2bff      	cmp	r3, #255	; 0xff
 8013a88:	d005      	beq.n	8013a96 <dhcp_reboot+0x112>
    dhcp->tries++;
 8013a8a:	69bb      	ldr	r3, [r7, #24]
 8013a8c:	799b      	ldrb	r3, [r3, #6]
 8013a8e:	3301      	adds	r3, #1
 8013a90:	b2da      	uxtb	r2, r3
 8013a92:	69bb      	ldr	r3, [r7, #24]
 8013a94:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8013a96:	69bb      	ldr	r3, [r7, #24]
 8013a98:	799b      	ldrb	r3, [r3, #6]
 8013a9a:	2b09      	cmp	r3, #9
 8013a9c:	d80a      	bhi.n	8013ab4 <dhcp_reboot+0x130>
 8013a9e:	69bb      	ldr	r3, [r7, #24]
 8013aa0:	799b      	ldrb	r3, [r3, #6]
 8013aa2:	b29b      	uxth	r3, r3
 8013aa4:	461a      	mov	r2, r3
 8013aa6:	0152      	lsls	r2, r2, #5
 8013aa8:	1ad2      	subs	r2, r2, r3
 8013aaa:	0092      	lsls	r2, r2, #2
 8013aac:	4413      	add	r3, r2
 8013aae:	00db      	lsls	r3, r3, #3
 8013ab0:	b29b      	uxth	r3, r3
 8013ab2:	e001      	b.n	8013ab8 <dhcp_reboot+0x134>
 8013ab4:	f242 7310 	movw	r3, #10000	; 0x2710
 8013ab8:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8013aba:	89fb      	ldrh	r3, [r7, #14]
 8013abc:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8013ac0:	4a0a      	ldr	r2, [pc, #40]	; (8013aec <dhcp_reboot+0x168>)
 8013ac2:	fb82 1203 	smull	r1, r2, r2, r3
 8013ac6:	1152      	asrs	r2, r2, #5
 8013ac8:	17db      	asrs	r3, r3, #31
 8013aca:	1ad3      	subs	r3, r2, r3
 8013acc:	b29a      	uxth	r2, r3
 8013ace:	69bb      	ldr	r3, [r7, #24]
 8013ad0:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8013ad2:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8013ad6:	4618      	mov	r0, r3
 8013ad8:	3720      	adds	r7, #32
 8013ada:	46bd      	mov	sp, r7
 8013adc:	bdb0      	pop	{r4, r5, r7, pc}
 8013ade:	bf00      	nop
 8013ae0:	20000070 	.word	0x20000070
 8013ae4:	20000498 	.word	0x20000498
 8013ae8:	0801facc 	.word	0x0801facc
 8013aec:	10624dd3 	.word	0x10624dd3

08013af0 <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 8013af0:	b5b0      	push	{r4, r5, r7, lr}
 8013af2:	b08a      	sub	sp, #40	; 0x28
 8013af4:	af02      	add	r7, sp, #8
 8013af6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013af8:	687b      	ldr	r3, [r7, #4]
 8013afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013afc:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 8013afe:	69fb      	ldr	r3, [r7, #28]
 8013b00:	2b00      	cmp	r3, #0
 8013b02:	f000 8084 	beq.w	8013c0e <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 8013b06:	69fb      	ldr	r3, [r7, #28]
 8013b08:	795b      	ldrb	r3, [r3, #5]
 8013b0a:	2b00      	cmp	r3, #0
 8013b0c:	f000 8081 	beq.w	8013c12 <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 8013b10:	69fb      	ldr	r3, [r7, #28]
 8013b12:	699b      	ldr	r3, [r3, #24]
 8013b14:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 8013b16:	69fb      	ldr	r3, [r7, #28]
 8013b18:	2200      	movs	r2, #0
 8013b1a:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 8013b1c:	69fb      	ldr	r3, [r7, #28]
 8013b1e:	2200      	movs	r2, #0
 8013b20:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8013b22:	69fb      	ldr	r3, [r7, #28]
 8013b24:	2200      	movs	r2, #0
 8013b26:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8013b28:	69fb      	ldr	r3, [r7, #28]
 8013b2a:	2200      	movs	r2, #0
 8013b2c:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 8013b2e:	69fb      	ldr	r3, [r7, #28]
 8013b30:	2200      	movs	r2, #0
 8013b32:	631a      	str	r2, [r3, #48]	; 0x30
 8013b34:	69fb      	ldr	r3, [r7, #28]
 8013b36:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013b38:	69fb      	ldr	r3, [r7, #28]
 8013b3a:	62da      	str	r2, [r3, #44]	; 0x2c
 8013b3c:	69fb      	ldr	r3, [r7, #28]
 8013b3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013b40:	69fb      	ldr	r3, [r7, #28]
 8013b42:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 8013b44:	69fb      	ldr	r3, [r7, #28]
 8013b46:	2200      	movs	r2, #0
 8013b48:	829a      	strh	r2, [r3, #20]
 8013b4a:	69fb      	ldr	r3, [r7, #28]
 8013b4c:	8a9a      	ldrh	r2, [r3, #20]
 8013b4e:	69fb      	ldr	r3, [r7, #28]
 8013b50:	825a      	strh	r2, [r3, #18]
 8013b52:	69fb      	ldr	r3, [r7, #28]
 8013b54:	8a5a      	ldrh	r2, [r3, #18]
 8013b56:	69fb      	ldr	r3, [r7, #28]
 8013b58:	821a      	strh	r2, [r3, #16]
 8013b5a:	69fb      	ldr	r3, [r7, #28]
 8013b5c:	8a1a      	ldrh	r2, [r3, #16]
 8013b5e:	69fb      	ldr	r3, [r7, #28]
 8013b60:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 8013b62:	6878      	ldr	r0, [r7, #4]
 8013b64:	f000 fdee 	bl	8014744 <dhcp_supplied_address>
 8013b68:	4603      	mov	r3, r0
 8013b6a:	2b00      	cmp	r3, #0
 8013b6c:	d03b      	beq.n	8013be6 <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 8013b6e:	f107 030e 	add.w	r3, r7, #14
 8013b72:	2207      	movs	r2, #7
 8013b74:	69f9      	ldr	r1, [r7, #28]
 8013b76:	6878      	ldr	r0, [r7, #4]
 8013b78:	f000 fce0 	bl	801453c <dhcp_create_msg>
 8013b7c:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 8013b7e:	69bb      	ldr	r3, [r7, #24]
 8013b80:	2b00      	cmp	r3, #0
 8013b82:	d030      	beq.n	8013be6 <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8013b84:	69bb      	ldr	r3, [r7, #24]
 8013b86:	685b      	ldr	r3, [r3, #4]
 8013b88:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8013b8a:	89f8      	ldrh	r0, [r7, #14]
 8013b8c:	697b      	ldr	r3, [r7, #20]
 8013b8e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013b92:	2304      	movs	r3, #4
 8013b94:	2236      	movs	r2, #54	; 0x36
 8013b96:	f000 f85f 	bl	8013c58 <dhcp_option>
 8013b9a:	4603      	mov	r3, r0
 8013b9c:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 8013b9e:	89fc      	ldrh	r4, [r7, #14]
 8013ba0:	697b      	ldr	r3, [r7, #20]
 8013ba2:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8013ba6:	693b      	ldr	r3, [r7, #16]
 8013ba8:	4618      	mov	r0, r3
 8013baa:	f7f7 fb5c 	bl	800b266 <lwip_htonl>
 8013bae:	4603      	mov	r3, r0
 8013bb0:	461a      	mov	r2, r3
 8013bb2:	4629      	mov	r1, r5
 8013bb4:	4620      	mov	r0, r4
 8013bb6:	f000 f8db 	bl	8013d70 <dhcp_option_long>
 8013bba:	4603      	mov	r3, r0
 8013bbc:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8013bbe:	89f8      	ldrh	r0, [r7, #14]
 8013bc0:	697b      	ldr	r3, [r7, #20]
 8013bc2:	33f0      	adds	r3, #240	; 0xf0
 8013bc4:	69ba      	ldr	r2, [r7, #24]
 8013bc6:	4619      	mov	r1, r3
 8013bc8:	f000 fd8e 	bl	80146e8 <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8013bcc:	4b13      	ldr	r3, [pc, #76]	; (8013c1c <dhcp_release_and_stop+0x12c>)
 8013bce:	6818      	ldr	r0, [r3, #0]
 8013bd0:	f107 0210 	add.w	r2, r7, #16
 8013bd4:	687b      	ldr	r3, [r7, #4]
 8013bd6:	9300      	str	r3, [sp, #0]
 8013bd8:	2343      	movs	r3, #67	; 0x43
 8013bda:	69b9      	ldr	r1, [r7, #24]
 8013bdc:	f7fe fc88 	bl	80124f0 <udp_sendto_if>
      pbuf_free(p_out);
 8013be0:	69b8      	ldr	r0, [r7, #24]
 8013be2:	f7f8 fdc7 	bl	800c774 <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8013be6:	4b0e      	ldr	r3, [pc, #56]	; (8013c20 <dhcp_release_and_stop+0x130>)
 8013be8:	4a0d      	ldr	r2, [pc, #52]	; (8013c20 <dhcp_release_and_stop+0x130>)
 8013bea:	490d      	ldr	r1, [pc, #52]	; (8013c20 <dhcp_release_and_stop+0x130>)
 8013bec:	6878      	ldr	r0, [r7, #4]
 8013bee:	f7f8 f969 	bl	800bec4 <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 8013bf2:	2100      	movs	r1, #0
 8013bf4:	69f8      	ldr	r0, [r7, #28]
 8013bf6:	f000 f815 	bl	8013c24 <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 8013bfa:	69fb      	ldr	r3, [r7, #28]
 8013bfc:	791b      	ldrb	r3, [r3, #4]
 8013bfe:	2b00      	cmp	r3, #0
 8013c00:	d008      	beq.n	8013c14 <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8013c02:	f7fe ffc1 	bl	8012b88 <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 8013c06:	69fb      	ldr	r3, [r7, #28]
 8013c08:	2200      	movs	r2, #0
 8013c0a:	711a      	strb	r2, [r3, #4]
 8013c0c:	e002      	b.n	8013c14 <dhcp_release_and_stop+0x124>
    return;
 8013c0e:	bf00      	nop
 8013c10:	e000      	b.n	8013c14 <dhcp_release_and_stop+0x124>
    return;
 8013c12:	bf00      	nop
  }
}
 8013c14:	3720      	adds	r7, #32
 8013c16:	46bd      	mov	sp, r7
 8013c18:	bdb0      	pop	{r4, r5, r7, pc}
 8013c1a:	bf00      	nop
 8013c1c:	20000498 	.word	0x20000498
 8013c20:	0801fac8 	.word	0x0801fac8

08013c24 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 8013c24:	b480      	push	{r7}
 8013c26:	b083      	sub	sp, #12
 8013c28:	af00      	add	r7, sp, #0
 8013c2a:	6078      	str	r0, [r7, #4]
 8013c2c:	460b      	mov	r3, r1
 8013c2e:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 8013c30:	687b      	ldr	r3, [r7, #4]
 8013c32:	795b      	ldrb	r3, [r3, #5]
 8013c34:	78fa      	ldrb	r2, [r7, #3]
 8013c36:	429a      	cmp	r2, r3
 8013c38:	d008      	beq.n	8013c4c <dhcp_set_state+0x28>
    dhcp->state = new_state;
 8013c3a:	687b      	ldr	r3, [r7, #4]
 8013c3c:	78fa      	ldrb	r2, [r7, #3]
 8013c3e:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 8013c40:	687b      	ldr	r3, [r7, #4]
 8013c42:	2200      	movs	r2, #0
 8013c44:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 8013c46:	687b      	ldr	r3, [r7, #4]
 8013c48:	2200      	movs	r2, #0
 8013c4a:	811a      	strh	r2, [r3, #8]
  }
}
 8013c4c:	bf00      	nop
 8013c4e:	370c      	adds	r7, #12
 8013c50:	46bd      	mov	sp, r7
 8013c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c56:	4770      	bx	lr

08013c58 <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 8013c58:	b580      	push	{r7, lr}
 8013c5a:	b082      	sub	sp, #8
 8013c5c:	af00      	add	r7, sp, #0
 8013c5e:	6039      	str	r1, [r7, #0]
 8013c60:	4611      	mov	r1, r2
 8013c62:	461a      	mov	r2, r3
 8013c64:	4603      	mov	r3, r0
 8013c66:	80fb      	strh	r3, [r7, #6]
 8013c68:	460b      	mov	r3, r1
 8013c6a:	717b      	strb	r3, [r7, #5]
 8013c6c:	4613      	mov	r3, r2
 8013c6e:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8013c70:	88fa      	ldrh	r2, [r7, #6]
 8013c72:	793b      	ldrb	r3, [r7, #4]
 8013c74:	4413      	add	r3, r2
 8013c76:	3302      	adds	r3, #2
 8013c78:	2b44      	cmp	r3, #68	; 0x44
 8013c7a:	d906      	bls.n	8013c8a <dhcp_option+0x32>
 8013c7c:	4b0d      	ldr	r3, [pc, #52]	; (8013cb4 <dhcp_option+0x5c>)
 8013c7e:	f240 529a 	movw	r2, #1434	; 0x59a
 8013c82:	490d      	ldr	r1, [pc, #52]	; (8013cb8 <dhcp_option+0x60>)
 8013c84:	480d      	ldr	r0, [pc, #52]	; (8013cbc <dhcp_option+0x64>)
 8013c86:	f003 fdf3 	bl	8017870 <iprintf>
  options[options_out_len++] = option_type;
 8013c8a:	88fb      	ldrh	r3, [r7, #6]
 8013c8c:	1c5a      	adds	r2, r3, #1
 8013c8e:	80fa      	strh	r2, [r7, #6]
 8013c90:	461a      	mov	r2, r3
 8013c92:	683b      	ldr	r3, [r7, #0]
 8013c94:	4413      	add	r3, r2
 8013c96:	797a      	ldrb	r2, [r7, #5]
 8013c98:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 8013c9a:	88fb      	ldrh	r3, [r7, #6]
 8013c9c:	1c5a      	adds	r2, r3, #1
 8013c9e:	80fa      	strh	r2, [r7, #6]
 8013ca0:	461a      	mov	r2, r3
 8013ca2:	683b      	ldr	r3, [r7, #0]
 8013ca4:	4413      	add	r3, r2
 8013ca6:	793a      	ldrb	r2, [r7, #4]
 8013ca8:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8013caa:	88fb      	ldrh	r3, [r7, #6]
}
 8013cac:	4618      	mov	r0, r3
 8013cae:	3708      	adds	r7, #8
 8013cb0:	46bd      	mov	sp, r7
 8013cb2:	bd80      	pop	{r7, pc}
 8013cb4:	0801ef5c 	.word	0x0801ef5c
 8013cb8:	0801f0f0 	.word	0x0801f0f0
 8013cbc:	0801efbc 	.word	0x0801efbc

08013cc0 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 8013cc0:	b580      	push	{r7, lr}
 8013cc2:	b082      	sub	sp, #8
 8013cc4:	af00      	add	r7, sp, #0
 8013cc6:	4603      	mov	r3, r0
 8013cc8:	6039      	str	r1, [r7, #0]
 8013cca:	80fb      	strh	r3, [r7, #6]
 8013ccc:	4613      	mov	r3, r2
 8013cce:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8013cd0:	88fb      	ldrh	r3, [r7, #6]
 8013cd2:	2b43      	cmp	r3, #67	; 0x43
 8013cd4:	d906      	bls.n	8013ce4 <dhcp_option_byte+0x24>
 8013cd6:	4b0a      	ldr	r3, [pc, #40]	; (8013d00 <dhcp_option_byte+0x40>)
 8013cd8:	f240 52a6 	movw	r2, #1446	; 0x5a6
 8013cdc:	4909      	ldr	r1, [pc, #36]	; (8013d04 <dhcp_option_byte+0x44>)
 8013cde:	480a      	ldr	r0, [pc, #40]	; (8013d08 <dhcp_option_byte+0x48>)
 8013ce0:	f003 fdc6 	bl	8017870 <iprintf>
  options[options_out_len++] = value;
 8013ce4:	88fb      	ldrh	r3, [r7, #6]
 8013ce6:	1c5a      	adds	r2, r3, #1
 8013ce8:	80fa      	strh	r2, [r7, #6]
 8013cea:	461a      	mov	r2, r3
 8013cec:	683b      	ldr	r3, [r7, #0]
 8013cee:	4413      	add	r3, r2
 8013cf0:	797a      	ldrb	r2, [r7, #5]
 8013cf2:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8013cf4:	88fb      	ldrh	r3, [r7, #6]
}
 8013cf6:	4618      	mov	r0, r3
 8013cf8:	3708      	adds	r7, #8
 8013cfa:	46bd      	mov	sp, r7
 8013cfc:	bd80      	pop	{r7, pc}
 8013cfe:	bf00      	nop
 8013d00:	0801ef5c 	.word	0x0801ef5c
 8013d04:	0801f134 	.word	0x0801f134
 8013d08:	0801efbc 	.word	0x0801efbc

08013d0c <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 8013d0c:	b580      	push	{r7, lr}
 8013d0e:	b082      	sub	sp, #8
 8013d10:	af00      	add	r7, sp, #0
 8013d12:	4603      	mov	r3, r0
 8013d14:	6039      	str	r1, [r7, #0]
 8013d16:	80fb      	strh	r3, [r7, #6]
 8013d18:	4613      	mov	r3, r2
 8013d1a:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8013d1c:	88fb      	ldrh	r3, [r7, #6]
 8013d1e:	3302      	adds	r3, #2
 8013d20:	2b44      	cmp	r3, #68	; 0x44
 8013d22:	d906      	bls.n	8013d32 <dhcp_option_short+0x26>
 8013d24:	4b0f      	ldr	r3, [pc, #60]	; (8013d64 <dhcp_option_short+0x58>)
 8013d26:	f240 52ae 	movw	r2, #1454	; 0x5ae
 8013d2a:	490f      	ldr	r1, [pc, #60]	; (8013d68 <dhcp_option_short+0x5c>)
 8013d2c:	480f      	ldr	r0, [pc, #60]	; (8013d6c <dhcp_option_short+0x60>)
 8013d2e:	f003 fd9f 	bl	8017870 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8013d32:	88bb      	ldrh	r3, [r7, #4]
 8013d34:	0a1b      	lsrs	r3, r3, #8
 8013d36:	b29a      	uxth	r2, r3
 8013d38:	88fb      	ldrh	r3, [r7, #6]
 8013d3a:	1c59      	adds	r1, r3, #1
 8013d3c:	80f9      	strh	r1, [r7, #6]
 8013d3e:	4619      	mov	r1, r3
 8013d40:	683b      	ldr	r3, [r7, #0]
 8013d42:	440b      	add	r3, r1
 8013d44:	b2d2      	uxtb	r2, r2
 8013d46:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 8013d48:	88fb      	ldrh	r3, [r7, #6]
 8013d4a:	1c5a      	adds	r2, r3, #1
 8013d4c:	80fa      	strh	r2, [r7, #6]
 8013d4e:	461a      	mov	r2, r3
 8013d50:	683b      	ldr	r3, [r7, #0]
 8013d52:	4413      	add	r3, r2
 8013d54:	88ba      	ldrh	r2, [r7, #4]
 8013d56:	b2d2      	uxtb	r2, r2
 8013d58:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8013d5a:	88fb      	ldrh	r3, [r7, #6]
}
 8013d5c:	4618      	mov	r0, r3
 8013d5e:	3708      	adds	r7, #8
 8013d60:	46bd      	mov	sp, r7
 8013d62:	bd80      	pop	{r7, pc}
 8013d64:	0801ef5c 	.word	0x0801ef5c
 8013d68:	0801f16c 	.word	0x0801f16c
 8013d6c:	0801efbc 	.word	0x0801efbc

08013d70 <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 8013d70:	b580      	push	{r7, lr}
 8013d72:	b084      	sub	sp, #16
 8013d74:	af00      	add	r7, sp, #0
 8013d76:	4603      	mov	r3, r0
 8013d78:	60b9      	str	r1, [r7, #8]
 8013d7a:	607a      	str	r2, [r7, #4]
 8013d7c:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 8013d7e:	89fb      	ldrh	r3, [r7, #14]
 8013d80:	3304      	adds	r3, #4
 8013d82:	2b44      	cmp	r3, #68	; 0x44
 8013d84:	d906      	bls.n	8013d94 <dhcp_option_long+0x24>
 8013d86:	4b19      	ldr	r3, [pc, #100]	; (8013dec <dhcp_option_long+0x7c>)
 8013d88:	f240 52b7 	movw	r2, #1463	; 0x5b7
 8013d8c:	4918      	ldr	r1, [pc, #96]	; (8013df0 <dhcp_option_long+0x80>)
 8013d8e:	4819      	ldr	r0, [pc, #100]	; (8013df4 <dhcp_option_long+0x84>)
 8013d90:	f003 fd6e 	bl	8017870 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 8013d94:	687b      	ldr	r3, [r7, #4]
 8013d96:	0e1a      	lsrs	r2, r3, #24
 8013d98:	89fb      	ldrh	r3, [r7, #14]
 8013d9a:	1c59      	adds	r1, r3, #1
 8013d9c:	81f9      	strh	r1, [r7, #14]
 8013d9e:	4619      	mov	r1, r3
 8013da0:	68bb      	ldr	r3, [r7, #8]
 8013da2:	440b      	add	r3, r1
 8013da4:	b2d2      	uxtb	r2, r2
 8013da6:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 8013da8:	687b      	ldr	r3, [r7, #4]
 8013daa:	0c1a      	lsrs	r2, r3, #16
 8013dac:	89fb      	ldrh	r3, [r7, #14]
 8013dae:	1c59      	adds	r1, r3, #1
 8013db0:	81f9      	strh	r1, [r7, #14]
 8013db2:	4619      	mov	r1, r3
 8013db4:	68bb      	ldr	r3, [r7, #8]
 8013db6:	440b      	add	r3, r1
 8013db8:	b2d2      	uxtb	r2, r2
 8013dba:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 8013dbc:	687b      	ldr	r3, [r7, #4]
 8013dbe:	0a1a      	lsrs	r2, r3, #8
 8013dc0:	89fb      	ldrh	r3, [r7, #14]
 8013dc2:	1c59      	adds	r1, r3, #1
 8013dc4:	81f9      	strh	r1, [r7, #14]
 8013dc6:	4619      	mov	r1, r3
 8013dc8:	68bb      	ldr	r3, [r7, #8]
 8013dca:	440b      	add	r3, r1
 8013dcc:	b2d2      	uxtb	r2, r2
 8013dce:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 8013dd0:	89fb      	ldrh	r3, [r7, #14]
 8013dd2:	1c5a      	adds	r2, r3, #1
 8013dd4:	81fa      	strh	r2, [r7, #14]
 8013dd6:	461a      	mov	r2, r3
 8013dd8:	68bb      	ldr	r3, [r7, #8]
 8013dda:	4413      	add	r3, r2
 8013ddc:	687a      	ldr	r2, [r7, #4]
 8013dde:	b2d2      	uxtb	r2, r2
 8013de0:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8013de2:	89fb      	ldrh	r3, [r7, #14]
}
 8013de4:	4618      	mov	r0, r3
 8013de6:	3710      	adds	r7, #16
 8013de8:	46bd      	mov	sp, r7
 8013dea:	bd80      	pop	{r7, pc}
 8013dec:	0801ef5c 	.word	0x0801ef5c
 8013df0:	0801f1a8 	.word	0x0801f1a8
 8013df4:	0801efbc 	.word	0x0801efbc

08013df8 <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 8013df8:	b580      	push	{r7, lr}
 8013dfa:	b090      	sub	sp, #64	; 0x40
 8013dfc:	af00      	add	r7, sp, #0
 8013dfe:	6078      	str	r0, [r7, #4]
 8013e00:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 8013e02:	2300      	movs	r3, #0
 8013e04:	62fb      	str	r3, [r7, #44]	; 0x2c
  int parse_sname_as_options = 0;
 8013e06:	2300      	movs	r3, #0
 8013e08:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 8013e0a:	2208      	movs	r2, #8
 8013e0c:	2100      	movs	r1, #0
 8013e0e:	48be      	ldr	r0, [pc, #760]	; (8014108 <dhcp_parse_reply+0x310>)
 8013e10:	f003 f812 	bl	8016e38 <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 8013e14:	687b      	ldr	r3, [r7, #4]
 8013e16:	895b      	ldrh	r3, [r3, #10]
 8013e18:	2b2b      	cmp	r3, #43	; 0x2b
 8013e1a:	d802      	bhi.n	8013e22 <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 8013e1c:	f06f 0301 	mvn.w	r3, #1
 8013e20:	e2a8      	b.n	8014374 <dhcp_parse_reply+0x57c>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 8013e22:	687b      	ldr	r3, [r7, #4]
 8013e24:	685b      	ldr	r3, [r3, #4]
 8013e26:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 8013e28:	23f0      	movs	r3, #240	; 0xf0
 8013e2a:	86fb      	strh	r3, [r7, #54]	; 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 8013e2c:	687b      	ldr	r3, [r7, #4]
 8013e2e:	891b      	ldrh	r3, [r3, #8]
 8013e30:	86bb      	strh	r3, [r7, #52]	; 0x34
again:
  q = p;
 8013e32:	687b      	ldr	r3, [r7, #4]
 8013e34:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 8013e36:	e00c      	b.n	8013e52 <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 8013e38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e3a:	895b      	ldrh	r3, [r3, #10]
 8013e3c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8013e3e:	1ad3      	subs	r3, r2, r3
 8013e40:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 8013e42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e44:	895b      	ldrh	r3, [r3, #10]
 8013e46:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8013e48:	1ad3      	subs	r3, r2, r3
 8013e4a:	86bb      	strh	r3, [r7, #52]	; 0x34
    q = q->next;
 8013e4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e4e:	681b      	ldr	r3, [r3, #0]
 8013e50:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 8013e52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e54:	2b00      	cmp	r3, #0
 8013e56:	d004      	beq.n	8013e62 <dhcp_parse_reply+0x6a>
 8013e58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e5a:	895b      	ldrh	r3, [r3, #10]
 8013e5c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8013e5e:	429a      	cmp	r2, r3
 8013e60:	d2ea      	bcs.n	8013e38 <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 8013e62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e64:	2b00      	cmp	r3, #0
 8013e66:	d102      	bne.n	8013e6e <dhcp_parse_reply+0x76>
    return ERR_BUF;
 8013e68:	f06f 0301 	mvn.w	r3, #1
 8013e6c:	e282      	b.n	8014374 <dhcp_parse_reply+0x57c>
  }
  offset = options_idx;
 8013e6e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8013e70:	877b      	strh	r3, [r7, #58]	; 0x3a
  offset_max = options_idx_max;
 8013e72:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8013e74:	873b      	strh	r3, [r7, #56]	; 0x38
  options = (u8_t *)q->payload;
 8013e76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e78:	685b      	ldr	r3, [r3, #4]
 8013e7a:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8013e7c:	e23a      	b.n	80142f4 <dhcp_parse_reply+0x4fc>
    u8_t op = options[offset];
 8013e7e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013e80:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013e82:	4413      	add	r3, r2
 8013e84:	781b      	ldrb	r3, [r3, #0]
 8013e86:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 8013e88:	2300      	movs	r3, #0
 8013e8a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    int decode_idx = -1;
 8013e8e:	f04f 33ff 	mov.w	r3, #4294967295
 8013e92:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 8013e94:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013e96:	3302      	adds	r3, #2
 8013e98:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 8013e9a:	8bfa      	ldrh	r2, [r7, #30]
 8013e9c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013e9e:	429a      	cmp	r2, r3
 8013ea0:	d202      	bcs.n	8013ea8 <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 8013ea2:	f06f 0301 	mvn.w	r3, #1
 8013ea6:	e265      	b.n	8014374 <dhcp_parse_reply+0x57c>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 8013ea8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013eaa:	3301      	adds	r3, #1
 8013eac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013eae:	8952      	ldrh	r2, [r2, #10]
 8013eb0:	4293      	cmp	r3, r2
 8013eb2:	da07      	bge.n	8013ec4 <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 8013eb4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013eb6:	3301      	adds	r3, #1
 8013eb8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013eba:	4413      	add	r3, r2
 8013ebc:	781b      	ldrb	r3, [r3, #0]
 8013ebe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8013ec2:	e00b      	b.n	8013edc <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 8013ec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ec6:	681b      	ldr	r3, [r3, #0]
 8013ec8:	2b00      	cmp	r3, #0
 8013eca:	d004      	beq.n	8013ed6 <dhcp_parse_reply+0xde>
 8013ecc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ece:	681b      	ldr	r3, [r3, #0]
 8013ed0:	685b      	ldr	r3, [r3, #4]
 8013ed2:	781b      	ldrb	r3, [r3, #0]
 8013ed4:	e000      	b.n	8013ed8 <dhcp_parse_reply+0xe0>
 8013ed6:	2300      	movs	r3, #0
 8013ed8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 8013edc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013ee0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    switch (op) {
 8013ee4:	7dfb      	ldrb	r3, [r7, #23]
 8013ee6:	2b3b      	cmp	r3, #59	; 0x3b
 8013ee8:	f200 812d 	bhi.w	8014146 <dhcp_parse_reply+0x34e>
 8013eec:	a201      	add	r2, pc, #4	; (adr r2, 8013ef4 <dhcp_parse_reply+0xfc>)
 8013eee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013ef2:	bf00      	nop
 8013ef4:	08013fe5 	.word	0x08013fe5
 8013ef8:	08013ff5 	.word	0x08013ff5
 8013efc:	08014147 	.word	0x08014147
 8013f00:	08014017 	.word	0x08014017
 8013f04:	08014147 	.word	0x08014147
 8013f08:	08014147 	.word	0x08014147
 8013f0c:	08014147 	.word	0x08014147
 8013f10:	08014147 	.word	0x08014147
 8013f14:	08014147 	.word	0x08014147
 8013f18:	08014147 	.word	0x08014147
 8013f1c:	08014147 	.word	0x08014147
 8013f20:	08014147 	.word	0x08014147
 8013f24:	08014147 	.word	0x08014147
 8013f28:	08014147 	.word	0x08014147
 8013f2c:	08014147 	.word	0x08014147
 8013f30:	08014147 	.word	0x08014147
 8013f34:	08014147 	.word	0x08014147
 8013f38:	08014147 	.word	0x08014147
 8013f3c:	08014147 	.word	0x08014147
 8013f40:	08014147 	.word	0x08014147
 8013f44:	08014147 	.word	0x08014147
 8013f48:	08014147 	.word	0x08014147
 8013f4c:	08014147 	.word	0x08014147
 8013f50:	08014147 	.word	0x08014147
 8013f54:	08014147 	.word	0x08014147
 8013f58:	08014147 	.word	0x08014147
 8013f5c:	08014147 	.word	0x08014147
 8013f60:	08014147 	.word	0x08014147
 8013f64:	08014147 	.word	0x08014147
 8013f68:	08014147 	.word	0x08014147
 8013f6c:	08014147 	.word	0x08014147
 8013f70:	08014147 	.word	0x08014147
 8013f74:	08014147 	.word	0x08014147
 8013f78:	08014147 	.word	0x08014147
 8013f7c:	08014147 	.word	0x08014147
 8013f80:	08014147 	.word	0x08014147
 8013f84:	08014147 	.word	0x08014147
 8013f88:	08014147 	.word	0x08014147
 8013f8c:	08014147 	.word	0x08014147
 8013f90:	08014147 	.word	0x08014147
 8013f94:	08014147 	.word	0x08014147
 8013f98:	08014147 	.word	0x08014147
 8013f9c:	08014147 	.word	0x08014147
 8013fa0:	08014147 	.word	0x08014147
 8013fa4:	08014147 	.word	0x08014147
 8013fa8:	08014147 	.word	0x08014147
 8013fac:	08014147 	.word	0x08014147
 8013fb0:	08014147 	.word	0x08014147
 8013fb4:	08014147 	.word	0x08014147
 8013fb8:	08014147 	.word	0x08014147
 8013fbc:	08014147 	.word	0x08014147
 8013fc0:	08014043 	.word	0x08014043
 8013fc4:	08014065 	.word	0x08014065
 8013fc8:	080140a1 	.word	0x080140a1
 8013fcc:	080140c3 	.word	0x080140c3
 8013fd0:	08014147 	.word	0x08014147
 8013fd4:	08014147 	.word	0x08014147
 8013fd8:	08014147 	.word	0x08014147
 8013fdc:	080140e5 	.word	0x080140e5
 8013fe0:	08014125 	.word	0x08014125
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 8013fe4:	2300      	movs	r3, #0
 8013fe6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8013fea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013fee:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        /* will be increased below */
        break;
 8013ff2:	e0ac      	b.n	801414e <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8013ff4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013ff8:	2b04      	cmp	r3, #4
 8013ffa:	d009      	beq.n	8014010 <dhcp_parse_reply+0x218>
 8013ffc:	4b43      	ldr	r3, [pc, #268]	; (801410c <dhcp_parse_reply+0x314>)
 8013ffe:	f240 622e 	movw	r2, #1582	; 0x62e
 8014002:	4943      	ldr	r1, [pc, #268]	; (8014110 <dhcp_parse_reply+0x318>)
 8014004:	4843      	ldr	r0, [pc, #268]	; (8014114 <dhcp_parse_reply+0x31c>)
 8014006:	f003 fc33 	bl	8017870 <iprintf>
 801400a:	f06f 0305 	mvn.w	r3, #5
 801400e:	e1b1      	b.n	8014374 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 8014010:	2306      	movs	r3, #6
 8014012:	623b      	str	r3, [r7, #32]
        break;
 8014014:	e09b      	b.n	801414e <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 8014016:	2304      	movs	r3, #4
 8014018:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 801401c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8014020:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014024:	429a      	cmp	r2, r3
 8014026:	d209      	bcs.n	801403c <dhcp_parse_reply+0x244>
 8014028:	4b38      	ldr	r3, [pc, #224]	; (801410c <dhcp_parse_reply+0x314>)
 801402a:	f240 6233 	movw	r2, #1587	; 0x633
 801402e:	493a      	ldr	r1, [pc, #232]	; (8014118 <dhcp_parse_reply+0x320>)
 8014030:	4838      	ldr	r0, [pc, #224]	; (8014114 <dhcp_parse_reply+0x31c>)
 8014032:	f003 fc1d 	bl	8017870 <iprintf>
 8014036:	f06f 0305 	mvn.w	r3, #5
 801403a:	e19b      	b.n	8014374 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 801403c:	2307      	movs	r3, #7
 801403e:	623b      	str	r3, [r7, #32]
        break;
 8014040:	e085      	b.n	801414e <dhcp_parse_reply+0x356>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8014042:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014046:	2b04      	cmp	r3, #4
 8014048:	d009      	beq.n	801405e <dhcp_parse_reply+0x266>
 801404a:	4b30      	ldr	r3, [pc, #192]	; (801410c <dhcp_parse_reply+0x314>)
 801404c:	f240 6241 	movw	r2, #1601	; 0x641
 8014050:	492f      	ldr	r1, [pc, #188]	; (8014110 <dhcp_parse_reply+0x318>)
 8014052:	4830      	ldr	r0, [pc, #192]	; (8014114 <dhcp_parse_reply+0x31c>)
 8014054:	f003 fc0c 	bl	8017870 <iprintf>
 8014058:	f06f 0305 	mvn.w	r3, #5
 801405c:	e18a      	b.n	8014374 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 801405e:	2303      	movs	r3, #3
 8014060:	623b      	str	r3, [r7, #32]
        break;
 8014062:	e074      	b.n	801414e <dhcp_parse_reply+0x356>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8014064:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014068:	2b01      	cmp	r3, #1
 801406a:	d009      	beq.n	8014080 <dhcp_parse_reply+0x288>
 801406c:	4b27      	ldr	r3, [pc, #156]	; (801410c <dhcp_parse_reply+0x314>)
 801406e:	f240 624f 	movw	r2, #1615	; 0x64f
 8014072:	492a      	ldr	r1, [pc, #168]	; (801411c <dhcp_parse_reply+0x324>)
 8014074:	4827      	ldr	r0, [pc, #156]	; (8014114 <dhcp_parse_reply+0x31c>)
 8014076:	f003 fbfb 	bl	8017870 <iprintf>
 801407a:	f06f 0305 	mvn.w	r3, #5
 801407e:	e179      	b.n	8014374 <dhcp_parse_reply+0x57c>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 8014080:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8014082:	2bf0      	cmp	r3, #240	; 0xf0
 8014084:	d009      	beq.n	801409a <dhcp_parse_reply+0x2a2>
 8014086:	4b21      	ldr	r3, [pc, #132]	; (801410c <dhcp_parse_reply+0x314>)
 8014088:	f240 6251 	movw	r2, #1617	; 0x651
 801408c:	4924      	ldr	r1, [pc, #144]	; (8014120 <dhcp_parse_reply+0x328>)
 801408e:	4821      	ldr	r0, [pc, #132]	; (8014114 <dhcp_parse_reply+0x31c>)
 8014090:	f003 fbee 	bl	8017870 <iprintf>
 8014094:	f06f 0305 	mvn.w	r3, #5
 8014098:	e16c      	b.n	8014374 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 801409a:	2300      	movs	r3, #0
 801409c:	623b      	str	r3, [r7, #32]
        break;
 801409e:	e056      	b.n	801414e <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 80140a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80140a4:	2b01      	cmp	r3, #1
 80140a6:	d009      	beq.n	80140bc <dhcp_parse_reply+0x2c4>
 80140a8:	4b18      	ldr	r3, [pc, #96]	; (801410c <dhcp_parse_reply+0x314>)
 80140aa:	f240 6255 	movw	r2, #1621	; 0x655
 80140ae:	491b      	ldr	r1, [pc, #108]	; (801411c <dhcp_parse_reply+0x324>)
 80140b0:	4818      	ldr	r0, [pc, #96]	; (8014114 <dhcp_parse_reply+0x31c>)
 80140b2:	f003 fbdd 	bl	8017870 <iprintf>
 80140b6:	f06f 0305 	mvn.w	r3, #5
 80140ba:	e15b      	b.n	8014374 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 80140bc:	2301      	movs	r3, #1
 80140be:	623b      	str	r3, [r7, #32]
        break;
 80140c0:	e045      	b.n	801414e <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80140c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80140c6:	2b04      	cmp	r3, #4
 80140c8:	d009      	beq.n	80140de <dhcp_parse_reply+0x2e6>
 80140ca:	4b10      	ldr	r3, [pc, #64]	; (801410c <dhcp_parse_reply+0x314>)
 80140cc:	f240 6259 	movw	r2, #1625	; 0x659
 80140d0:	490f      	ldr	r1, [pc, #60]	; (8014110 <dhcp_parse_reply+0x318>)
 80140d2:	4810      	ldr	r0, [pc, #64]	; (8014114 <dhcp_parse_reply+0x31c>)
 80140d4:	f003 fbcc 	bl	8017870 <iprintf>
 80140d8:	f06f 0305 	mvn.w	r3, #5
 80140dc:	e14a      	b.n	8014374 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 80140de:	2302      	movs	r3, #2
 80140e0:	623b      	str	r3, [r7, #32]
        break;
 80140e2:	e034      	b.n	801414e <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80140e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80140e8:	2b04      	cmp	r3, #4
 80140ea:	d009      	beq.n	8014100 <dhcp_parse_reply+0x308>
 80140ec:	4b07      	ldr	r3, [pc, #28]	; (801410c <dhcp_parse_reply+0x314>)
 80140ee:	f240 625d 	movw	r2, #1629	; 0x65d
 80140f2:	4907      	ldr	r1, [pc, #28]	; (8014110 <dhcp_parse_reply+0x318>)
 80140f4:	4807      	ldr	r0, [pc, #28]	; (8014114 <dhcp_parse_reply+0x31c>)
 80140f6:	f003 fbbb 	bl	8017870 <iprintf>
 80140fa:	f06f 0305 	mvn.w	r3, #5
 80140fe:	e139      	b.n	8014374 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_T1;
 8014100:	2304      	movs	r3, #4
 8014102:	623b      	str	r3, [r7, #32]
        break;
 8014104:	e023      	b.n	801414e <dhcp_parse_reply+0x356>
 8014106:	bf00      	nop
 8014108:	20006e58 	.word	0x20006e58
 801410c:	0801ef5c 	.word	0x0801ef5c
 8014110:	0801f1e4 	.word	0x0801f1e4
 8014114:	0801efbc 	.word	0x0801efbc
 8014118:	0801f1f0 	.word	0x0801f1f0
 801411c:	0801f204 	.word	0x0801f204
 8014120:	0801f210 	.word	0x0801f210
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8014124:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014128:	2b04      	cmp	r3, #4
 801412a:	d009      	beq.n	8014140 <dhcp_parse_reply+0x348>
 801412c:	4b93      	ldr	r3, [pc, #588]	; (801437c <dhcp_parse_reply+0x584>)
 801412e:	f240 6261 	movw	r2, #1633	; 0x661
 8014132:	4993      	ldr	r1, [pc, #588]	; (8014380 <dhcp_parse_reply+0x588>)
 8014134:	4893      	ldr	r0, [pc, #588]	; (8014384 <dhcp_parse_reply+0x58c>)
 8014136:	f003 fb9b 	bl	8017870 <iprintf>
 801413a:	f06f 0305 	mvn.w	r3, #5
 801413e:	e119      	b.n	8014374 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_T2;
 8014140:	2305      	movs	r3, #5
 8014142:	623b      	str	r3, [r7, #32]
        break;
 8014144:	e003      	b.n	801414e <dhcp_parse_reply+0x356>
      default:
        decode_len = 0;
 8014146:	2300      	movs	r3, #0
 8014148:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 801414c:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 801414e:	7dfb      	ldrb	r3, [r7, #23]
 8014150:	2b00      	cmp	r3, #0
 8014152:	d103      	bne.n	801415c <dhcp_parse_reply+0x364>
      offset++;
 8014154:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8014156:	3301      	adds	r3, #1
 8014158:	877b      	strh	r3, [r7, #58]	; 0x3a
 801415a:	e0a1      	b.n	80142a0 <dhcp_parse_reply+0x4a8>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 801415c:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801415e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014162:	4413      	add	r3, r2
 8014164:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 8014168:	4293      	cmp	r3, r2
 801416a:	dd02      	ble.n	8014172 <dhcp_parse_reply+0x37a>
        /* overflow */
        return ERR_BUF;
 801416c:	f06f 0301 	mvn.w	r3, #1
 8014170:	e100      	b.n	8014374 <dhcp_parse_reply+0x57c>
      }
      offset = (u16_t)(offset + len + 2);
 8014172:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014176:	b29a      	uxth	r2, r3
 8014178:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801417a:	4413      	add	r3, r2
 801417c:	b29b      	uxth	r3, r3
 801417e:	3302      	adds	r3, #2
 8014180:	877b      	strh	r3, [r7, #58]	; 0x3a
      if (decode_len > 0) {
 8014182:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014186:	2b00      	cmp	r3, #0
 8014188:	f000 808a 	beq.w	80142a0 <dhcp_parse_reply+0x4a8>
        u32_t value = 0;
 801418c:	2300      	movs	r3, #0
 801418e:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 8014190:	6a3b      	ldr	r3, [r7, #32]
 8014192:	2b00      	cmp	r3, #0
 8014194:	db02      	blt.n	801419c <dhcp_parse_reply+0x3a4>
 8014196:	6a3b      	ldr	r3, [r7, #32]
 8014198:	2b07      	cmp	r3, #7
 801419a:	dd06      	ble.n	80141aa <dhcp_parse_reply+0x3b2>
 801419c:	4b77      	ldr	r3, [pc, #476]	; (801437c <dhcp_parse_reply+0x584>)
 801419e:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 80141a2:	4979      	ldr	r1, [pc, #484]	; (8014388 <dhcp_parse_reply+0x590>)
 80141a4:	4877      	ldr	r0, [pc, #476]	; (8014384 <dhcp_parse_reply+0x58c>)
 80141a6:	f003 fb63 	bl	8017870 <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 80141aa:	4a78      	ldr	r2, [pc, #480]	; (801438c <dhcp_parse_reply+0x594>)
 80141ac:	6a3b      	ldr	r3, [r7, #32]
 80141ae:	4413      	add	r3, r2
 80141b0:	781b      	ldrb	r3, [r3, #0]
 80141b2:	2b00      	cmp	r3, #0
 80141b4:	d174      	bne.n	80142a0 <dhcp_parse_reply+0x4a8>
          copy_len = LWIP_MIN(decode_len, 4);
 80141b6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80141ba:	2b04      	cmp	r3, #4
 80141bc:	bf28      	it	cs
 80141be:	2304      	movcs	r3, #4
 80141c0:	b2db      	uxtb	r3, r3
 80141c2:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 80141c4:	8bfb      	ldrh	r3, [r7, #30]
 80141c6:	8aba      	ldrh	r2, [r7, #20]
 80141c8:	f107 0108 	add.w	r1, r7, #8
 80141cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80141ce:	f7f8 fccb 	bl	800cb68 <pbuf_copy_partial>
 80141d2:	4603      	mov	r3, r0
 80141d4:	461a      	mov	r2, r3
 80141d6:	8abb      	ldrh	r3, [r7, #20]
 80141d8:	4293      	cmp	r3, r2
 80141da:	d002      	beq.n	80141e2 <dhcp_parse_reply+0x3ea>
            return ERR_BUF;
 80141dc:	f06f 0301 	mvn.w	r3, #1
 80141e0:	e0c8      	b.n	8014374 <dhcp_parse_reply+0x57c>
          }
          if (decode_len > 4) {
 80141e2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80141e6:	2b04      	cmp	r3, #4
 80141e8:	d933      	bls.n	8014252 <dhcp_parse_reply+0x45a>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 80141ea:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80141ee:	f003 0303 	and.w	r3, r3, #3
 80141f2:	b2db      	uxtb	r3, r3
 80141f4:	2b00      	cmp	r3, #0
 80141f6:	d009      	beq.n	801420c <dhcp_parse_reply+0x414>
 80141f8:	4b60      	ldr	r3, [pc, #384]	; (801437c <dhcp_parse_reply+0x584>)
 80141fa:	f240 6281 	movw	r2, #1665	; 0x681
 80141fe:	4964      	ldr	r1, [pc, #400]	; (8014390 <dhcp_parse_reply+0x598>)
 8014200:	4860      	ldr	r0, [pc, #384]	; (8014384 <dhcp_parse_reply+0x58c>)
 8014202:	f003 fb35 	bl	8017870 <iprintf>
 8014206:	f06f 0305 	mvn.w	r3, #5
 801420a:	e0b3      	b.n	8014374 <dhcp_parse_reply+0x57c>
            dhcp_got_option(dhcp, decode_idx);
 801420c:	4a5f      	ldr	r2, [pc, #380]	; (801438c <dhcp_parse_reply+0x594>)
 801420e:	6a3b      	ldr	r3, [r7, #32]
 8014210:	4413      	add	r3, r2
 8014212:	2201      	movs	r2, #1
 8014214:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 8014216:	68bb      	ldr	r3, [r7, #8]
 8014218:	4618      	mov	r0, r3
 801421a:	f7f7 f824 	bl	800b266 <lwip_htonl>
 801421e:	4602      	mov	r2, r0
 8014220:	495c      	ldr	r1, [pc, #368]	; (8014394 <dhcp_parse_reply+0x59c>)
 8014222:	6a3b      	ldr	r3, [r7, #32]
 8014224:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 8014228:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801422c:	3b04      	subs	r3, #4
 801422e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 8014232:	8bfb      	ldrh	r3, [r7, #30]
 8014234:	3304      	adds	r3, #4
 8014236:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 8014238:	8a7a      	ldrh	r2, [r7, #18]
 801423a:	8bfb      	ldrh	r3, [r7, #30]
 801423c:	429a      	cmp	r2, r3
 801423e:	d202      	bcs.n	8014246 <dhcp_parse_reply+0x44e>
              /* overflow */
              return ERR_BUF;
 8014240:	f06f 0301 	mvn.w	r3, #1
 8014244:	e096      	b.n	8014374 <dhcp_parse_reply+0x57c>
            }
            val_offset = next_val_offset;
 8014246:	8a7b      	ldrh	r3, [r7, #18]
 8014248:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 801424a:	6a3b      	ldr	r3, [r7, #32]
 801424c:	3301      	adds	r3, #1
 801424e:	623b      	str	r3, [r7, #32]
            goto decode_next;
 8014250:	e79e      	b.n	8014190 <dhcp_parse_reply+0x398>
          } else if (decode_len == 4) {
 8014252:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014256:	2b04      	cmp	r3, #4
 8014258:	d106      	bne.n	8014268 <dhcp_parse_reply+0x470>
            value = lwip_ntohl(value);
 801425a:	68bb      	ldr	r3, [r7, #8]
 801425c:	4618      	mov	r0, r3
 801425e:	f7f7 f802 	bl	800b266 <lwip_htonl>
 8014262:	4603      	mov	r3, r0
 8014264:	60bb      	str	r3, [r7, #8]
 8014266:	e011      	b.n	801428c <dhcp_parse_reply+0x494>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 8014268:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801426c:	2b01      	cmp	r3, #1
 801426e:	d009      	beq.n	8014284 <dhcp_parse_reply+0x48c>
 8014270:	4b42      	ldr	r3, [pc, #264]	; (801437c <dhcp_parse_reply+0x584>)
 8014272:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 8014276:	4948      	ldr	r1, [pc, #288]	; (8014398 <dhcp_parse_reply+0x5a0>)
 8014278:	4842      	ldr	r0, [pc, #264]	; (8014384 <dhcp_parse_reply+0x58c>)
 801427a:	f003 faf9 	bl	8017870 <iprintf>
 801427e:	f06f 0305 	mvn.w	r3, #5
 8014282:	e077      	b.n	8014374 <dhcp_parse_reply+0x57c>
            value = ((u8_t *)&value)[0];
 8014284:	f107 0308 	add.w	r3, r7, #8
 8014288:	781b      	ldrb	r3, [r3, #0]
 801428a:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 801428c:	4a3f      	ldr	r2, [pc, #252]	; (801438c <dhcp_parse_reply+0x594>)
 801428e:	6a3b      	ldr	r3, [r7, #32]
 8014290:	4413      	add	r3, r2
 8014292:	2201      	movs	r2, #1
 8014294:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 8014296:	68ba      	ldr	r2, [r7, #8]
 8014298:	493e      	ldr	r1, [pc, #248]	; (8014394 <dhcp_parse_reply+0x59c>)
 801429a:	6a3b      	ldr	r3, [r7, #32]
 801429c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 80142a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80142a2:	895b      	ldrh	r3, [r3, #10]
 80142a4:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80142a6:	429a      	cmp	r2, r3
 80142a8:	d324      	bcc.n	80142f4 <dhcp_parse_reply+0x4fc>
      offset = (u16_t)(offset - q->len);
 80142aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80142ac:	895b      	ldrh	r3, [r3, #10]
 80142ae:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80142b0:	1ad3      	subs	r3, r2, r3
 80142b2:	877b      	strh	r3, [r7, #58]	; 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 80142b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80142b6:	895b      	ldrh	r3, [r3, #10]
 80142b8:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80142ba:	1ad3      	subs	r3, r2, r3
 80142bc:	873b      	strh	r3, [r7, #56]	; 0x38
      if (offset < offset_max) {
 80142be:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80142c0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80142c2:	429a      	cmp	r2, r3
 80142c4:	d213      	bcs.n	80142ee <dhcp_parse_reply+0x4f6>
        q = q->next;
 80142c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80142c8:	681b      	ldr	r3, [r3, #0]
 80142ca:	633b      	str	r3, [r7, #48]	; 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 80142cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80142ce:	2b00      	cmp	r3, #0
 80142d0:	d109      	bne.n	80142e6 <dhcp_parse_reply+0x4ee>
 80142d2:	4b2a      	ldr	r3, [pc, #168]	; (801437c <dhcp_parse_reply+0x584>)
 80142d4:	f240 629d 	movw	r2, #1693	; 0x69d
 80142d8:	4930      	ldr	r1, [pc, #192]	; (801439c <dhcp_parse_reply+0x5a4>)
 80142da:	482a      	ldr	r0, [pc, #168]	; (8014384 <dhcp_parse_reply+0x58c>)
 80142dc:	f003 fac8 	bl	8017870 <iprintf>
 80142e0:	f06f 0305 	mvn.w	r3, #5
 80142e4:	e046      	b.n	8014374 <dhcp_parse_reply+0x57c>
        options = (u8_t *)q->payload;
 80142e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80142e8:	685b      	ldr	r3, [r3, #4]
 80142ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80142ec:	e002      	b.n	80142f4 <dhcp_parse_reply+0x4fc>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 80142ee:	f06f 0301 	mvn.w	r3, #1
 80142f2:	e03f      	b.n	8014374 <dhcp_parse_reply+0x57c>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 80142f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80142f6:	2b00      	cmp	r3, #0
 80142f8:	d00a      	beq.n	8014310 <dhcp_parse_reply+0x518>
 80142fa:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80142fc:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80142fe:	429a      	cmp	r2, r3
 8014300:	d206      	bcs.n	8014310 <dhcp_parse_reply+0x518>
 8014302:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8014304:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8014306:	4413      	add	r3, r2
 8014308:	781b      	ldrb	r3, [r3, #0]
 801430a:	2bff      	cmp	r3, #255	; 0xff
 801430c:	f47f adb7 	bne.w	8013e7e <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 8014310:	4b1e      	ldr	r3, [pc, #120]	; (801438c <dhcp_parse_reply+0x594>)
 8014312:	781b      	ldrb	r3, [r3, #0]
 8014314:	2b00      	cmp	r3, #0
 8014316:	d018      	beq.n	801434a <dhcp_parse_reply+0x552>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8014318:	4b1e      	ldr	r3, [pc, #120]	; (8014394 <dhcp_parse_reply+0x59c>)
 801431a:	681b      	ldr	r3, [r3, #0]
 801431c:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 801431e:	4b1b      	ldr	r3, [pc, #108]	; (801438c <dhcp_parse_reply+0x594>)
 8014320:	2200      	movs	r2, #0
 8014322:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 8014324:	68fb      	ldr	r3, [r7, #12]
 8014326:	2b01      	cmp	r3, #1
 8014328:	d102      	bne.n	8014330 <dhcp_parse_reply+0x538>
      parse_file_as_options = 1;
 801432a:	2301      	movs	r3, #1
 801432c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801432e:	e00c      	b.n	801434a <dhcp_parse_reply+0x552>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 8014330:	68fb      	ldr	r3, [r7, #12]
 8014332:	2b02      	cmp	r3, #2
 8014334:	d102      	bne.n	801433c <dhcp_parse_reply+0x544>
      parse_sname_as_options = 1;
 8014336:	2301      	movs	r3, #1
 8014338:	62bb      	str	r3, [r7, #40]	; 0x28
 801433a:	e006      	b.n	801434a <dhcp_parse_reply+0x552>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 801433c:	68fb      	ldr	r3, [r7, #12]
 801433e:	2b03      	cmp	r3, #3
 8014340:	d103      	bne.n	801434a <dhcp_parse_reply+0x552>
      parse_sname_as_options = 1;
 8014342:	2301      	movs	r3, #1
 8014344:	62bb      	str	r3, [r7, #40]	; 0x28
      parse_file_as_options = 1;
 8014346:	2301      	movs	r3, #1
 8014348:	62fb      	str	r3, [r7, #44]	; 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 801434a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801434c:	2b00      	cmp	r3, #0
 801434e:	d006      	beq.n	801435e <dhcp_parse_reply+0x566>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 8014350:	2300      	movs	r3, #0
 8014352:	62fb      	str	r3, [r7, #44]	; 0x2c
    options_idx = DHCP_FILE_OFS;
 8014354:	236c      	movs	r3, #108	; 0x6c
 8014356:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 8014358:	23ec      	movs	r3, #236	; 0xec
 801435a:	86bb      	strh	r3, [r7, #52]	; 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 801435c:	e569      	b.n	8013e32 <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 801435e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014360:	2b00      	cmp	r3, #0
 8014362:	d006      	beq.n	8014372 <dhcp_parse_reply+0x57a>
    parse_sname_as_options = 0;
 8014364:	2300      	movs	r3, #0
 8014366:	62bb      	str	r3, [r7, #40]	; 0x28
    options_idx = DHCP_SNAME_OFS;
 8014368:	232c      	movs	r3, #44	; 0x2c
 801436a:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 801436c:	236c      	movs	r3, #108	; 0x6c
 801436e:	86bb      	strh	r3, [r7, #52]	; 0x34
    goto again;
 8014370:	e55f      	b.n	8013e32 <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 8014372:	2300      	movs	r3, #0
}
 8014374:	4618      	mov	r0, r3
 8014376:	3740      	adds	r7, #64	; 0x40
 8014378:	46bd      	mov	sp, r7
 801437a:	bd80      	pop	{r7, pc}
 801437c:	0801ef5c 	.word	0x0801ef5c
 8014380:	0801f1e4 	.word	0x0801f1e4
 8014384:	0801efbc 	.word	0x0801efbc
 8014388:	0801f228 	.word	0x0801f228
 801438c:	20006e58 	.word	0x20006e58
 8014390:	0801f23c 	.word	0x0801f23c
 8014394:	20006e60 	.word	0x20006e60
 8014398:	0801f254 	.word	0x0801f254
 801439c:	0801f268 	.word	0x0801f268

080143a0 <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 80143a0:	b580      	push	{r7, lr}
 80143a2:	b08a      	sub	sp, #40	; 0x28
 80143a4:	af00      	add	r7, sp, #0
 80143a6:	60f8      	str	r0, [r7, #12]
 80143a8:	60b9      	str	r1, [r7, #8]
 80143aa:	607a      	str	r2, [r7, #4]
 80143ac:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 80143ae:	4b60      	ldr	r3, [pc, #384]	; (8014530 <dhcp_recv+0x190>)
 80143b0:	685b      	ldr	r3, [r3, #4]
 80143b2:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80143b4:	6a3b      	ldr	r3, [r7, #32]
 80143b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80143b8:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 80143ba:	687b      	ldr	r3, [r7, #4]
 80143bc:	685b      	ldr	r3, [r3, #4]
 80143be:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 80143c0:	69fb      	ldr	r3, [r7, #28]
 80143c2:	2b00      	cmp	r3, #0
 80143c4:	f000 809d 	beq.w	8014502 <dhcp_recv+0x162>
 80143c8:	69fb      	ldr	r3, [r7, #28]
 80143ca:	791b      	ldrb	r3, [r3, #4]
 80143cc:	2b00      	cmp	r3, #0
 80143ce:	f000 8098 	beq.w	8014502 <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 80143d2:	687b      	ldr	r3, [r7, #4]
 80143d4:	895b      	ldrh	r3, [r3, #10]
 80143d6:	2b2b      	cmp	r3, #43	; 0x2b
 80143d8:	f240 8095 	bls.w	8014506 <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 80143dc:	69bb      	ldr	r3, [r7, #24]
 80143de:	781b      	ldrb	r3, [r3, #0]
 80143e0:	2b02      	cmp	r3, #2
 80143e2:	f040 8092 	bne.w	801450a <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 80143e6:	2300      	movs	r3, #0
 80143e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80143ec:	e012      	b.n	8014414 <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 80143ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80143f2:	6a3a      	ldr	r2, [r7, #32]
 80143f4:	4413      	add	r3, r2
 80143f6:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 80143fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80143fe:	69b9      	ldr	r1, [r7, #24]
 8014400:	440b      	add	r3, r1
 8014402:	7f1b      	ldrb	r3, [r3, #28]
 8014404:	429a      	cmp	r2, r3
 8014406:	f040 8082 	bne.w	801450e <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801440a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801440e:	3301      	adds	r3, #1
 8014410:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8014414:	6a3b      	ldr	r3, [r7, #32]
 8014416:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801441a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801441e:	429a      	cmp	r2, r3
 8014420:	d203      	bcs.n	801442a <dhcp_recv+0x8a>
 8014422:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014426:	2b05      	cmp	r3, #5
 8014428:	d9e1      	bls.n	80143ee <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 801442a:	69bb      	ldr	r3, [r7, #24]
 801442c:	685b      	ldr	r3, [r3, #4]
 801442e:	4618      	mov	r0, r3
 8014430:	f7f6 ff19 	bl	800b266 <lwip_htonl>
 8014434:	4602      	mov	r2, r0
 8014436:	69fb      	ldr	r3, [r7, #28]
 8014438:	681b      	ldr	r3, [r3, #0]
 801443a:	429a      	cmp	r2, r3
 801443c:	d169      	bne.n	8014512 <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 801443e:	69f9      	ldr	r1, [r7, #28]
 8014440:	6878      	ldr	r0, [r7, #4]
 8014442:	f7ff fcd9 	bl	8013df8 <dhcp_parse_reply>
 8014446:	4603      	mov	r3, r0
 8014448:	2b00      	cmp	r3, #0
 801444a:	d164      	bne.n	8014516 <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 801444c:	4b39      	ldr	r3, [pc, #228]	; (8014534 <dhcp_recv+0x194>)
 801444e:	785b      	ldrb	r3, [r3, #1]
 8014450:	2b00      	cmp	r3, #0
 8014452:	d062      	beq.n	801451a <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 8014454:	687b      	ldr	r3, [r7, #4]
 8014456:	685b      	ldr	r3, [r3, #4]
 8014458:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 801445a:	4b37      	ldr	r3, [pc, #220]	; (8014538 <dhcp_recv+0x198>)
 801445c:	685b      	ldr	r3, [r3, #4]
 801445e:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 8014460:	7cfb      	ldrb	r3, [r7, #19]
 8014462:	2b05      	cmp	r3, #5
 8014464:	d12a      	bne.n	80144bc <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 8014466:	69fb      	ldr	r3, [r7, #28]
 8014468:	795b      	ldrb	r3, [r3, #5]
 801446a:	2b01      	cmp	r3, #1
 801446c:	d112      	bne.n	8014494 <dhcp_recv+0xf4>
      dhcp_handle_ack(netif, msg_in);
 801446e:	6979      	ldr	r1, [r7, #20]
 8014470:	6a38      	ldr	r0, [r7, #32]
 8014472:	f7fe fe53 	bl	801311c <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 8014476:	6a3b      	ldr	r3, [r7, #32]
 8014478:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801447c:	f003 0308 	and.w	r3, r3, #8
 8014480:	2b00      	cmp	r3, #0
 8014482:	d003      	beq.n	801448c <dhcp_recv+0xec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 8014484:	6a38      	ldr	r0, [r7, #32]
 8014486:	f7fe fbc3 	bl	8012c10 <dhcp_check>
 801448a:	e049      	b.n	8014520 <dhcp_recv+0x180>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 801448c:	6a38      	ldr	r0, [r7, #32]
 801448e:	f7ff f867 	bl	8013560 <dhcp_bind>
 8014492:	e045      	b.n	8014520 <dhcp_recv+0x180>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8014494:	69fb      	ldr	r3, [r7, #28]
 8014496:	795b      	ldrb	r3, [r3, #5]
 8014498:	2b03      	cmp	r3, #3
 801449a:	d007      	beq.n	80144ac <dhcp_recv+0x10c>
 801449c:	69fb      	ldr	r3, [r7, #28]
 801449e:	795b      	ldrb	r3, [r3, #5]
 80144a0:	2b04      	cmp	r3, #4
 80144a2:	d003      	beq.n	80144ac <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 80144a4:	69fb      	ldr	r3, [r7, #28]
 80144a6:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 80144a8:	2b05      	cmp	r3, #5
 80144aa:	d139      	bne.n	8014520 <dhcp_recv+0x180>
      dhcp_handle_ack(netif, msg_in);
 80144ac:	6979      	ldr	r1, [r7, #20]
 80144ae:	6a38      	ldr	r0, [r7, #32]
 80144b0:	f7fe fe34 	bl	801311c <dhcp_handle_ack>
      dhcp_bind(netif);
 80144b4:	6a38      	ldr	r0, [r7, #32]
 80144b6:	f7ff f853 	bl	8013560 <dhcp_bind>
 80144ba:	e031      	b.n	8014520 <dhcp_recv+0x180>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 80144bc:	7cfb      	ldrb	r3, [r7, #19]
 80144be:	2b06      	cmp	r3, #6
 80144c0:	d113      	bne.n	80144ea <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 80144c2:	69fb      	ldr	r3, [r7, #28]
 80144c4:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 80144c6:	2b03      	cmp	r3, #3
 80144c8:	d00b      	beq.n	80144e2 <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 80144ca:	69fb      	ldr	r3, [r7, #28]
 80144cc:	795b      	ldrb	r3, [r3, #5]
 80144ce:	2b01      	cmp	r3, #1
 80144d0:	d007      	beq.n	80144e2 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 80144d2:	69fb      	ldr	r3, [r7, #28]
 80144d4:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 80144d6:	2b04      	cmp	r3, #4
 80144d8:	d003      	beq.n	80144e2 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 80144da:	69fb      	ldr	r3, [r7, #28]
 80144dc:	795b      	ldrb	r3, [r3, #5]
 80144de:	2b05      	cmp	r3, #5
 80144e0:	d103      	bne.n	80144ea <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 80144e2:	6a38      	ldr	r0, [r7, #32]
 80144e4:	f7fe fb7a 	bl	8012bdc <dhcp_handle_nak>
 80144e8:	e01a      	b.n	8014520 <dhcp_recv+0x180>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 80144ea:	7cfb      	ldrb	r3, [r7, #19]
 80144ec:	2b02      	cmp	r3, #2
 80144ee:	d116      	bne.n	801451e <dhcp_recv+0x17e>
 80144f0:	69fb      	ldr	r3, [r7, #28]
 80144f2:	795b      	ldrb	r3, [r3, #5]
 80144f4:	2b06      	cmp	r3, #6
 80144f6:	d112      	bne.n	801451e <dhcp_recv+0x17e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 80144f8:	6979      	ldr	r1, [r7, #20]
 80144fa:	6a38      	ldr	r0, [r7, #32]
 80144fc:	f7fe fbbc 	bl	8012c78 <dhcp_handle_offer>
 8014500:	e00e      	b.n	8014520 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8014502:	bf00      	nop
 8014504:	e00c      	b.n	8014520 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8014506:	bf00      	nop
 8014508:	e00a      	b.n	8014520 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801450a:	bf00      	nop
 801450c:	e008      	b.n	8014520 <dhcp_recv+0x180>
      goto free_pbuf_and_return;
 801450e:	bf00      	nop
 8014510:	e006      	b.n	8014520 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8014512:	bf00      	nop
 8014514:	e004      	b.n	8014520 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8014516:	bf00      	nop
 8014518:	e002      	b.n	8014520 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801451a:	bf00      	nop
 801451c:	e000      	b.n	8014520 <dhcp_recv+0x180>
  }

free_pbuf_and_return:
 801451e:	bf00      	nop
  pbuf_free(p);
 8014520:	6878      	ldr	r0, [r7, #4]
 8014522:	f7f8 f927 	bl	800c774 <pbuf_free>
}
 8014526:	bf00      	nop
 8014528:	3728      	adds	r7, #40	; 0x28
 801452a:	46bd      	mov	sp, r7
 801452c:	bd80      	pop	{r7, pc}
 801452e:	bf00      	nop
 8014530:	20003d18 	.word	0x20003d18
 8014534:	20006e58 	.word	0x20006e58
 8014538:	20006e60 	.word	0x20006e60

0801453c <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 801453c:	b580      	push	{r7, lr}
 801453e:	b088      	sub	sp, #32
 8014540:	af00      	add	r7, sp, #0
 8014542:	60f8      	str	r0, [r7, #12]
 8014544:	60b9      	str	r1, [r7, #8]
 8014546:	603b      	str	r3, [r7, #0]
 8014548:	4613      	mov	r3, r2
 801454a:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 801454c:	68fb      	ldr	r3, [r7, #12]
 801454e:	2b00      	cmp	r3, #0
 8014550:	d108      	bne.n	8014564 <dhcp_create_msg+0x28>
 8014552:	4b5f      	ldr	r3, [pc, #380]	; (80146d0 <dhcp_create_msg+0x194>)
 8014554:	f240 7269 	movw	r2, #1897	; 0x769
 8014558:	495e      	ldr	r1, [pc, #376]	; (80146d4 <dhcp_create_msg+0x198>)
 801455a:	485f      	ldr	r0, [pc, #380]	; (80146d8 <dhcp_create_msg+0x19c>)
 801455c:	f003 f988 	bl	8017870 <iprintf>
 8014560:	2300      	movs	r3, #0
 8014562:	e0b1      	b.n	80146c8 <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 8014564:	68bb      	ldr	r3, [r7, #8]
 8014566:	2b00      	cmp	r3, #0
 8014568:	d108      	bne.n	801457c <dhcp_create_msg+0x40>
 801456a:	4b59      	ldr	r3, [pc, #356]	; (80146d0 <dhcp_create_msg+0x194>)
 801456c:	f240 726a 	movw	r2, #1898	; 0x76a
 8014570:	495a      	ldr	r1, [pc, #360]	; (80146dc <dhcp_create_msg+0x1a0>)
 8014572:	4859      	ldr	r0, [pc, #356]	; (80146d8 <dhcp_create_msg+0x19c>)
 8014574:	f003 f97c 	bl	8017870 <iprintf>
 8014578:	2300      	movs	r3, #0
 801457a:	e0a5      	b.n	80146c8 <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 801457c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014580:	f44f 719a 	mov.w	r1, #308	; 0x134
 8014584:	2036      	movs	r0, #54	; 0x36
 8014586:	f7f7 fe11 	bl	800c1ac <pbuf_alloc>
 801458a:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 801458c:	69bb      	ldr	r3, [r7, #24]
 801458e:	2b00      	cmp	r3, #0
 8014590:	d101      	bne.n	8014596 <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 8014592:	2300      	movs	r3, #0
 8014594:	e098      	b.n	80146c8 <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 8014596:	69bb      	ldr	r3, [r7, #24]
 8014598:	895b      	ldrh	r3, [r3, #10]
 801459a:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 801459e:	d206      	bcs.n	80145ae <dhcp_create_msg+0x72>
 80145a0:	4b4b      	ldr	r3, [pc, #300]	; (80146d0 <dhcp_create_msg+0x194>)
 80145a2:	f240 7271 	movw	r2, #1905	; 0x771
 80145a6:	494e      	ldr	r1, [pc, #312]	; (80146e0 <dhcp_create_msg+0x1a4>)
 80145a8:	484b      	ldr	r0, [pc, #300]	; (80146d8 <dhcp_create_msg+0x19c>)
 80145aa:	f003 f961 	bl	8017870 <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 80145ae:	79fb      	ldrb	r3, [r7, #7]
 80145b0:	2b03      	cmp	r3, #3
 80145b2:	d103      	bne.n	80145bc <dhcp_create_msg+0x80>
 80145b4:	68bb      	ldr	r3, [r7, #8]
 80145b6:	795b      	ldrb	r3, [r3, #5]
 80145b8:	2b03      	cmp	r3, #3
 80145ba:	d10d      	bne.n	80145d8 <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 80145bc:	68bb      	ldr	r3, [r7, #8]
 80145be:	799b      	ldrb	r3, [r3, #6]
 80145c0:	2b00      	cmp	r3, #0
 80145c2:	d105      	bne.n	80145d0 <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 80145c4:	f003 f96c 	bl	80178a0 <rand>
 80145c8:	4603      	mov	r3, r0
 80145ca:	461a      	mov	r2, r3
 80145cc:	4b45      	ldr	r3, [pc, #276]	; (80146e4 <dhcp_create_msg+0x1a8>)
 80145ce:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 80145d0:	4b44      	ldr	r3, [pc, #272]	; (80146e4 <dhcp_create_msg+0x1a8>)
 80145d2:	681a      	ldr	r2, [r3, #0]
 80145d4:	68bb      	ldr	r3, [r7, #8]
 80145d6:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 80145d8:	69bb      	ldr	r3, [r7, #24]
 80145da:	685b      	ldr	r3, [r3, #4]
 80145dc:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 80145de:	f44f 729a 	mov.w	r2, #308	; 0x134
 80145e2:	2100      	movs	r1, #0
 80145e4:	6978      	ldr	r0, [r7, #20]
 80145e6:	f002 fc27 	bl	8016e38 <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 80145ea:	697b      	ldr	r3, [r7, #20]
 80145ec:	2201      	movs	r2, #1
 80145ee:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 80145f0:	697b      	ldr	r3, [r7, #20]
 80145f2:	2201      	movs	r2, #1
 80145f4:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 80145f6:	68fb      	ldr	r3, [r7, #12]
 80145f8:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 80145fc:	697b      	ldr	r3, [r7, #20]
 80145fe:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 8014600:	68bb      	ldr	r3, [r7, #8]
 8014602:	681b      	ldr	r3, [r3, #0]
 8014604:	4618      	mov	r0, r3
 8014606:	f7f6 fe2e 	bl	800b266 <lwip_htonl>
 801460a:	4602      	mov	r2, r0
 801460c:	697b      	ldr	r3, [r7, #20]
 801460e:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 8014610:	79fb      	ldrb	r3, [r7, #7]
 8014612:	2b08      	cmp	r3, #8
 8014614:	d010      	beq.n	8014638 <dhcp_create_msg+0xfc>
 8014616:	79fb      	ldrb	r3, [r7, #7]
 8014618:	2b04      	cmp	r3, #4
 801461a:	d00d      	beq.n	8014638 <dhcp_create_msg+0xfc>
 801461c:	79fb      	ldrb	r3, [r7, #7]
 801461e:	2b07      	cmp	r3, #7
 8014620:	d00a      	beq.n	8014638 <dhcp_create_msg+0xfc>
 8014622:	79fb      	ldrb	r3, [r7, #7]
 8014624:	2b03      	cmp	r3, #3
 8014626:	d10c      	bne.n	8014642 <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8014628:	68bb      	ldr	r3, [r7, #8]
 801462a:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 801462c:	2b05      	cmp	r3, #5
 801462e:	d003      	beq.n	8014638 <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8014630:	68bb      	ldr	r3, [r7, #8]
 8014632:	795b      	ldrb	r3, [r3, #5]
 8014634:	2b04      	cmp	r3, #4
 8014636:	d104      	bne.n	8014642 <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 8014638:	68fb      	ldr	r3, [r7, #12]
 801463a:	3304      	adds	r3, #4
 801463c:	681a      	ldr	r2, [r3, #0]
 801463e:	697b      	ldr	r3, [r7, #20]
 8014640:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8014642:	2300      	movs	r3, #0
 8014644:	83fb      	strh	r3, [r7, #30]
 8014646:	e00c      	b.n	8014662 <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 8014648:	8bfa      	ldrh	r2, [r7, #30]
 801464a:	8bfb      	ldrh	r3, [r7, #30]
 801464c:	68f9      	ldr	r1, [r7, #12]
 801464e:	440a      	add	r2, r1
 8014650:	f892 102a 	ldrb.w	r1, [r2, #42]	; 0x2a
 8014654:	697a      	ldr	r2, [r7, #20]
 8014656:	4413      	add	r3, r2
 8014658:	460a      	mov	r2, r1
 801465a:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801465c:	8bfb      	ldrh	r3, [r7, #30]
 801465e:	3301      	adds	r3, #1
 8014660:	83fb      	strh	r3, [r7, #30]
 8014662:	8bfb      	ldrh	r3, [r7, #30]
 8014664:	2b05      	cmp	r3, #5
 8014666:	d9ef      	bls.n	8014648 <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 8014668:	697b      	ldr	r3, [r7, #20]
 801466a:	2200      	movs	r2, #0
 801466c:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 8014670:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 8014674:	2200      	movs	r2, #0
 8014676:	f062 027d 	orn	r2, r2, #125	; 0x7d
 801467a:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 801467e:	2200      	movs	r2, #0
 8014680:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 8014684:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 8014688:	2200      	movs	r2, #0
 801468a:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 801468e:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 8014692:	697b      	ldr	r3, [r7, #20]
 8014694:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014698:	2301      	movs	r3, #1
 801469a:	2235      	movs	r2, #53	; 0x35
 801469c:	2000      	movs	r0, #0
 801469e:	f7ff fadb 	bl	8013c58 <dhcp_option>
 80146a2:	4603      	mov	r3, r0
 80146a4:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 80146a6:	697b      	ldr	r3, [r7, #20]
 80146a8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80146ac:	79fa      	ldrb	r2, [r7, #7]
 80146ae:	8a7b      	ldrh	r3, [r7, #18]
 80146b0:	4618      	mov	r0, r3
 80146b2:	f7ff fb05 	bl	8013cc0 <dhcp_option_byte>
 80146b6:	4603      	mov	r3, r0
 80146b8:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 80146ba:	683b      	ldr	r3, [r7, #0]
 80146bc:	2b00      	cmp	r3, #0
 80146be:	d002      	beq.n	80146c6 <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 80146c0:	683b      	ldr	r3, [r7, #0]
 80146c2:	8a7a      	ldrh	r2, [r7, #18]
 80146c4:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 80146c6:	69bb      	ldr	r3, [r7, #24]
}
 80146c8:	4618      	mov	r0, r3
 80146ca:	3720      	adds	r7, #32
 80146cc:	46bd      	mov	sp, r7
 80146ce:	bd80      	pop	{r7, pc}
 80146d0:	0801ef5c 	.word	0x0801ef5c
 80146d4:	0801f27c 	.word	0x0801f27c
 80146d8:	0801efbc 	.word	0x0801efbc
 80146dc:	0801f29c 	.word	0x0801f29c
 80146e0:	0801f2bc 	.word	0x0801f2bc
 80146e4:	200004a0 	.word	0x200004a0

080146e8 <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 80146e8:	b580      	push	{r7, lr}
 80146ea:	b084      	sub	sp, #16
 80146ec:	af00      	add	r7, sp, #0
 80146ee:	4603      	mov	r3, r0
 80146f0:	60b9      	str	r1, [r7, #8]
 80146f2:	607a      	str	r2, [r7, #4]
 80146f4:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 80146f6:	89fb      	ldrh	r3, [r7, #14]
 80146f8:	1c5a      	adds	r2, r3, #1
 80146fa:	81fa      	strh	r2, [r7, #14]
 80146fc:	461a      	mov	r2, r3
 80146fe:	68bb      	ldr	r3, [r7, #8]
 8014700:	4413      	add	r3, r2
 8014702:	22ff      	movs	r2, #255	; 0xff
 8014704:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8014706:	e007      	b.n	8014718 <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 8014708:	89fb      	ldrh	r3, [r7, #14]
 801470a:	1c5a      	adds	r2, r3, #1
 801470c:	81fa      	strh	r2, [r7, #14]
 801470e:	461a      	mov	r2, r3
 8014710:	68bb      	ldr	r3, [r7, #8]
 8014712:	4413      	add	r3, r2
 8014714:	2200      	movs	r2, #0
 8014716:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8014718:	89fb      	ldrh	r3, [r7, #14]
 801471a:	2b43      	cmp	r3, #67	; 0x43
 801471c:	d904      	bls.n	8014728 <dhcp_option_trailer+0x40>
 801471e:	89fb      	ldrh	r3, [r7, #14]
 8014720:	f003 0303 	and.w	r3, r3, #3
 8014724:	2b00      	cmp	r3, #0
 8014726:	d002      	beq.n	801472e <dhcp_option_trailer+0x46>
 8014728:	89fb      	ldrh	r3, [r7, #14]
 801472a:	2b43      	cmp	r3, #67	; 0x43
 801472c:	d9ec      	bls.n	8014708 <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 801472e:	89fb      	ldrh	r3, [r7, #14]
 8014730:	33f0      	adds	r3, #240	; 0xf0
 8014732:	b29b      	uxth	r3, r3
 8014734:	4619      	mov	r1, r3
 8014736:	6878      	ldr	r0, [r7, #4]
 8014738:	f7f7 fe96 	bl	800c468 <pbuf_realloc>
}
 801473c:	bf00      	nop
 801473e:	3710      	adds	r7, #16
 8014740:	46bd      	mov	sp, r7
 8014742:	bd80      	pop	{r7, pc}

08014744 <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 8014744:	b480      	push	{r7}
 8014746:	b085      	sub	sp, #20
 8014748:	af00      	add	r7, sp, #0
 801474a:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 801474c:	687b      	ldr	r3, [r7, #4]
 801474e:	2b00      	cmp	r3, #0
 8014750:	d017      	beq.n	8014782 <dhcp_supplied_address+0x3e>
 8014752:	687b      	ldr	r3, [r7, #4]
 8014754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014756:	2b00      	cmp	r3, #0
 8014758:	d013      	beq.n	8014782 <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 801475a:	687b      	ldr	r3, [r7, #4]
 801475c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801475e:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8014760:	68fb      	ldr	r3, [r7, #12]
 8014762:	795b      	ldrb	r3, [r3, #5]
 8014764:	2b0a      	cmp	r3, #10
 8014766:	d007      	beq.n	8014778 <dhcp_supplied_address+0x34>
 8014768:	68fb      	ldr	r3, [r7, #12]
 801476a:	795b      	ldrb	r3, [r3, #5]
 801476c:	2b05      	cmp	r3, #5
 801476e:	d003      	beq.n	8014778 <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 8014770:	68fb      	ldr	r3, [r7, #12]
 8014772:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8014774:	2b04      	cmp	r3, #4
 8014776:	d101      	bne.n	801477c <dhcp_supplied_address+0x38>
 8014778:	2301      	movs	r3, #1
 801477a:	e000      	b.n	801477e <dhcp_supplied_address+0x3a>
 801477c:	2300      	movs	r3, #0
 801477e:	b2db      	uxtb	r3, r3
 8014780:	e000      	b.n	8014784 <dhcp_supplied_address+0x40>
  }
  return 0;
 8014782:	2300      	movs	r3, #0
}
 8014784:	4618      	mov	r0, r3
 8014786:	3714      	adds	r7, #20
 8014788:	46bd      	mov	sp, r7
 801478a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801478e:	4770      	bx	lr

08014790 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8014790:	b580      	push	{r7, lr}
 8014792:	b082      	sub	sp, #8
 8014794:	af00      	add	r7, sp, #0
 8014796:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8014798:	4915      	ldr	r1, [pc, #84]	; (80147f0 <etharp_free_entry+0x60>)
 801479a:	687a      	ldr	r2, [r7, #4]
 801479c:	4613      	mov	r3, r2
 801479e:	005b      	lsls	r3, r3, #1
 80147a0:	4413      	add	r3, r2
 80147a2:	00db      	lsls	r3, r3, #3
 80147a4:	440b      	add	r3, r1
 80147a6:	681b      	ldr	r3, [r3, #0]
 80147a8:	2b00      	cmp	r3, #0
 80147aa:	d013      	beq.n	80147d4 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 80147ac:	4910      	ldr	r1, [pc, #64]	; (80147f0 <etharp_free_entry+0x60>)
 80147ae:	687a      	ldr	r2, [r7, #4]
 80147b0:	4613      	mov	r3, r2
 80147b2:	005b      	lsls	r3, r3, #1
 80147b4:	4413      	add	r3, r2
 80147b6:	00db      	lsls	r3, r3, #3
 80147b8:	440b      	add	r3, r1
 80147ba:	681b      	ldr	r3, [r3, #0]
 80147bc:	4618      	mov	r0, r3
 80147be:	f7f7 ffd9 	bl	800c774 <pbuf_free>
    arp_table[i].q = NULL;
 80147c2:	490b      	ldr	r1, [pc, #44]	; (80147f0 <etharp_free_entry+0x60>)
 80147c4:	687a      	ldr	r2, [r7, #4]
 80147c6:	4613      	mov	r3, r2
 80147c8:	005b      	lsls	r3, r3, #1
 80147ca:	4413      	add	r3, r2
 80147cc:	00db      	lsls	r3, r3, #3
 80147ce:	440b      	add	r3, r1
 80147d0:	2200      	movs	r2, #0
 80147d2:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 80147d4:	4906      	ldr	r1, [pc, #24]	; (80147f0 <etharp_free_entry+0x60>)
 80147d6:	687a      	ldr	r2, [r7, #4]
 80147d8:	4613      	mov	r3, r2
 80147da:	005b      	lsls	r3, r3, #1
 80147dc:	4413      	add	r3, r2
 80147de:	00db      	lsls	r3, r3, #3
 80147e0:	440b      	add	r3, r1
 80147e2:	3314      	adds	r3, #20
 80147e4:	2200      	movs	r2, #0
 80147e6:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 80147e8:	bf00      	nop
 80147ea:	3708      	adds	r7, #8
 80147ec:	46bd      	mov	sp, r7
 80147ee:	bd80      	pop	{r7, pc}
 80147f0:	200004a4 	.word	0x200004a4

080147f4 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 80147f4:	b580      	push	{r7, lr}
 80147f6:	b082      	sub	sp, #8
 80147f8:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80147fa:	2300      	movs	r3, #0
 80147fc:	607b      	str	r3, [r7, #4]
 80147fe:	e096      	b.n	801492e <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8014800:	494f      	ldr	r1, [pc, #316]	; (8014940 <etharp_tmr+0x14c>)
 8014802:	687a      	ldr	r2, [r7, #4]
 8014804:	4613      	mov	r3, r2
 8014806:	005b      	lsls	r3, r3, #1
 8014808:	4413      	add	r3, r2
 801480a:	00db      	lsls	r3, r3, #3
 801480c:	440b      	add	r3, r1
 801480e:	3314      	adds	r3, #20
 8014810:	781b      	ldrb	r3, [r3, #0]
 8014812:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8014814:	78fb      	ldrb	r3, [r7, #3]
 8014816:	2b00      	cmp	r3, #0
 8014818:	f000 8086 	beq.w	8014928 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 801481c:	4948      	ldr	r1, [pc, #288]	; (8014940 <etharp_tmr+0x14c>)
 801481e:	687a      	ldr	r2, [r7, #4]
 8014820:	4613      	mov	r3, r2
 8014822:	005b      	lsls	r3, r3, #1
 8014824:	4413      	add	r3, r2
 8014826:	00db      	lsls	r3, r3, #3
 8014828:	440b      	add	r3, r1
 801482a:	3312      	adds	r3, #18
 801482c:	881b      	ldrh	r3, [r3, #0]
 801482e:	3301      	adds	r3, #1
 8014830:	b298      	uxth	r0, r3
 8014832:	4943      	ldr	r1, [pc, #268]	; (8014940 <etharp_tmr+0x14c>)
 8014834:	687a      	ldr	r2, [r7, #4]
 8014836:	4613      	mov	r3, r2
 8014838:	005b      	lsls	r3, r3, #1
 801483a:	4413      	add	r3, r2
 801483c:	00db      	lsls	r3, r3, #3
 801483e:	440b      	add	r3, r1
 8014840:	3312      	adds	r3, #18
 8014842:	4602      	mov	r2, r0
 8014844:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8014846:	493e      	ldr	r1, [pc, #248]	; (8014940 <etharp_tmr+0x14c>)
 8014848:	687a      	ldr	r2, [r7, #4]
 801484a:	4613      	mov	r3, r2
 801484c:	005b      	lsls	r3, r3, #1
 801484e:	4413      	add	r3, r2
 8014850:	00db      	lsls	r3, r3, #3
 8014852:	440b      	add	r3, r1
 8014854:	3312      	adds	r3, #18
 8014856:	881b      	ldrh	r3, [r3, #0]
 8014858:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 801485c:	d215      	bcs.n	801488a <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801485e:	4938      	ldr	r1, [pc, #224]	; (8014940 <etharp_tmr+0x14c>)
 8014860:	687a      	ldr	r2, [r7, #4]
 8014862:	4613      	mov	r3, r2
 8014864:	005b      	lsls	r3, r3, #1
 8014866:	4413      	add	r3, r2
 8014868:	00db      	lsls	r3, r3, #3
 801486a:	440b      	add	r3, r1
 801486c:	3314      	adds	r3, #20
 801486e:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8014870:	2b01      	cmp	r3, #1
 8014872:	d10e      	bne.n	8014892 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8014874:	4932      	ldr	r1, [pc, #200]	; (8014940 <etharp_tmr+0x14c>)
 8014876:	687a      	ldr	r2, [r7, #4]
 8014878:	4613      	mov	r3, r2
 801487a:	005b      	lsls	r3, r3, #1
 801487c:	4413      	add	r3, r2
 801487e:	00db      	lsls	r3, r3, #3
 8014880:	440b      	add	r3, r1
 8014882:	3312      	adds	r3, #18
 8014884:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8014886:	2b04      	cmp	r3, #4
 8014888:	d903      	bls.n	8014892 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801488a:	6878      	ldr	r0, [r7, #4]
 801488c:	f7ff ff80 	bl	8014790 <etharp_free_entry>
 8014890:	e04a      	b.n	8014928 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8014892:	492b      	ldr	r1, [pc, #172]	; (8014940 <etharp_tmr+0x14c>)
 8014894:	687a      	ldr	r2, [r7, #4]
 8014896:	4613      	mov	r3, r2
 8014898:	005b      	lsls	r3, r3, #1
 801489a:	4413      	add	r3, r2
 801489c:	00db      	lsls	r3, r3, #3
 801489e:	440b      	add	r3, r1
 80148a0:	3314      	adds	r3, #20
 80148a2:	781b      	ldrb	r3, [r3, #0]
 80148a4:	2b03      	cmp	r3, #3
 80148a6:	d10a      	bne.n	80148be <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 80148a8:	4925      	ldr	r1, [pc, #148]	; (8014940 <etharp_tmr+0x14c>)
 80148aa:	687a      	ldr	r2, [r7, #4]
 80148ac:	4613      	mov	r3, r2
 80148ae:	005b      	lsls	r3, r3, #1
 80148b0:	4413      	add	r3, r2
 80148b2:	00db      	lsls	r3, r3, #3
 80148b4:	440b      	add	r3, r1
 80148b6:	3314      	adds	r3, #20
 80148b8:	2204      	movs	r2, #4
 80148ba:	701a      	strb	r2, [r3, #0]
 80148bc:	e034      	b.n	8014928 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 80148be:	4920      	ldr	r1, [pc, #128]	; (8014940 <etharp_tmr+0x14c>)
 80148c0:	687a      	ldr	r2, [r7, #4]
 80148c2:	4613      	mov	r3, r2
 80148c4:	005b      	lsls	r3, r3, #1
 80148c6:	4413      	add	r3, r2
 80148c8:	00db      	lsls	r3, r3, #3
 80148ca:	440b      	add	r3, r1
 80148cc:	3314      	adds	r3, #20
 80148ce:	781b      	ldrb	r3, [r3, #0]
 80148d0:	2b04      	cmp	r3, #4
 80148d2:	d10a      	bne.n	80148ea <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 80148d4:	491a      	ldr	r1, [pc, #104]	; (8014940 <etharp_tmr+0x14c>)
 80148d6:	687a      	ldr	r2, [r7, #4]
 80148d8:	4613      	mov	r3, r2
 80148da:	005b      	lsls	r3, r3, #1
 80148dc:	4413      	add	r3, r2
 80148de:	00db      	lsls	r3, r3, #3
 80148e0:	440b      	add	r3, r1
 80148e2:	3314      	adds	r3, #20
 80148e4:	2202      	movs	r2, #2
 80148e6:	701a      	strb	r2, [r3, #0]
 80148e8:	e01e      	b.n	8014928 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80148ea:	4915      	ldr	r1, [pc, #84]	; (8014940 <etharp_tmr+0x14c>)
 80148ec:	687a      	ldr	r2, [r7, #4]
 80148ee:	4613      	mov	r3, r2
 80148f0:	005b      	lsls	r3, r3, #1
 80148f2:	4413      	add	r3, r2
 80148f4:	00db      	lsls	r3, r3, #3
 80148f6:	440b      	add	r3, r1
 80148f8:	3314      	adds	r3, #20
 80148fa:	781b      	ldrb	r3, [r3, #0]
 80148fc:	2b01      	cmp	r3, #1
 80148fe:	d113      	bne.n	8014928 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8014900:	490f      	ldr	r1, [pc, #60]	; (8014940 <etharp_tmr+0x14c>)
 8014902:	687a      	ldr	r2, [r7, #4]
 8014904:	4613      	mov	r3, r2
 8014906:	005b      	lsls	r3, r3, #1
 8014908:	4413      	add	r3, r2
 801490a:	00db      	lsls	r3, r3, #3
 801490c:	440b      	add	r3, r1
 801490e:	3308      	adds	r3, #8
 8014910:	6818      	ldr	r0, [r3, #0]
 8014912:	687a      	ldr	r2, [r7, #4]
 8014914:	4613      	mov	r3, r2
 8014916:	005b      	lsls	r3, r3, #1
 8014918:	4413      	add	r3, r2
 801491a:	00db      	lsls	r3, r3, #3
 801491c:	4a08      	ldr	r2, [pc, #32]	; (8014940 <etharp_tmr+0x14c>)
 801491e:	4413      	add	r3, r2
 8014920:	3304      	adds	r3, #4
 8014922:	4619      	mov	r1, r3
 8014924:	f000 fe72 	bl	801560c <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014928:	687b      	ldr	r3, [r7, #4]
 801492a:	3301      	adds	r3, #1
 801492c:	607b      	str	r3, [r7, #4]
 801492e:	687b      	ldr	r3, [r7, #4]
 8014930:	2b09      	cmp	r3, #9
 8014932:	f77f af65 	ble.w	8014800 <etharp_tmr+0xc>
      }
    }
  }
}
 8014936:	bf00      	nop
 8014938:	bf00      	nop
 801493a:	3708      	adds	r7, #8
 801493c:	46bd      	mov	sp, r7
 801493e:	bd80      	pop	{r7, pc}
 8014940:	200004a4 	.word	0x200004a4

08014944 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8014944:	b580      	push	{r7, lr}
 8014946:	b08a      	sub	sp, #40	; 0x28
 8014948:	af00      	add	r7, sp, #0
 801494a:	60f8      	str	r0, [r7, #12]
 801494c:	460b      	mov	r3, r1
 801494e:	607a      	str	r2, [r7, #4]
 8014950:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8014952:	230a      	movs	r3, #10
 8014954:	84fb      	strh	r3, [r7, #38]	; 0x26
 8014956:	230a      	movs	r3, #10
 8014958:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 801495a:	230a      	movs	r3, #10
 801495c:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 801495e:	2300      	movs	r3, #0
 8014960:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8014962:	230a      	movs	r3, #10
 8014964:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8014966:	2300      	movs	r3, #0
 8014968:	83bb      	strh	r3, [r7, #28]
 801496a:	2300      	movs	r3, #0
 801496c:	837b      	strh	r3, [r7, #26]
 801496e:	2300      	movs	r3, #0
 8014970:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014972:	2300      	movs	r3, #0
 8014974:	843b      	strh	r3, [r7, #32]
 8014976:	e0ae      	b.n	8014ad6 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8014978:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801497c:	49a6      	ldr	r1, [pc, #664]	; (8014c18 <etharp_find_entry+0x2d4>)
 801497e:	4613      	mov	r3, r2
 8014980:	005b      	lsls	r3, r3, #1
 8014982:	4413      	add	r3, r2
 8014984:	00db      	lsls	r3, r3, #3
 8014986:	440b      	add	r3, r1
 8014988:	3314      	adds	r3, #20
 801498a:	781b      	ldrb	r3, [r3, #0]
 801498c:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801498e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8014992:	2b0a      	cmp	r3, #10
 8014994:	d105      	bne.n	80149a2 <etharp_find_entry+0x5e>
 8014996:	7dfb      	ldrb	r3, [r7, #23]
 8014998:	2b00      	cmp	r3, #0
 801499a:	d102      	bne.n	80149a2 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 801499c:	8c3b      	ldrh	r3, [r7, #32]
 801499e:	847b      	strh	r3, [r7, #34]	; 0x22
 80149a0:	e095      	b.n	8014ace <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 80149a2:	7dfb      	ldrb	r3, [r7, #23]
 80149a4:	2b00      	cmp	r3, #0
 80149a6:	f000 8092 	beq.w	8014ace <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 80149aa:	7dfb      	ldrb	r3, [r7, #23]
 80149ac:	2b01      	cmp	r3, #1
 80149ae:	d009      	beq.n	80149c4 <etharp_find_entry+0x80>
 80149b0:	7dfb      	ldrb	r3, [r7, #23]
 80149b2:	2b01      	cmp	r3, #1
 80149b4:	d806      	bhi.n	80149c4 <etharp_find_entry+0x80>
 80149b6:	4b99      	ldr	r3, [pc, #612]	; (8014c1c <etharp_find_entry+0x2d8>)
 80149b8:	f240 1223 	movw	r2, #291	; 0x123
 80149bc:	4998      	ldr	r1, [pc, #608]	; (8014c20 <etharp_find_entry+0x2dc>)
 80149be:	4899      	ldr	r0, [pc, #612]	; (8014c24 <etharp_find_entry+0x2e0>)
 80149c0:	f002 ff56 	bl	8017870 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 80149c4:	68fb      	ldr	r3, [r7, #12]
 80149c6:	2b00      	cmp	r3, #0
 80149c8:	d020      	beq.n	8014a0c <etharp_find_entry+0xc8>
 80149ca:	68fb      	ldr	r3, [r7, #12]
 80149cc:	6819      	ldr	r1, [r3, #0]
 80149ce:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80149d2:	4891      	ldr	r0, [pc, #580]	; (8014c18 <etharp_find_entry+0x2d4>)
 80149d4:	4613      	mov	r3, r2
 80149d6:	005b      	lsls	r3, r3, #1
 80149d8:	4413      	add	r3, r2
 80149da:	00db      	lsls	r3, r3, #3
 80149dc:	4403      	add	r3, r0
 80149de:	3304      	adds	r3, #4
 80149e0:	681b      	ldr	r3, [r3, #0]
 80149e2:	4299      	cmp	r1, r3
 80149e4:	d112      	bne.n	8014a0c <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 80149e6:	687b      	ldr	r3, [r7, #4]
 80149e8:	2b00      	cmp	r3, #0
 80149ea:	d00c      	beq.n	8014a06 <etharp_find_entry+0xc2>
 80149ec:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80149f0:	4989      	ldr	r1, [pc, #548]	; (8014c18 <etharp_find_entry+0x2d4>)
 80149f2:	4613      	mov	r3, r2
 80149f4:	005b      	lsls	r3, r3, #1
 80149f6:	4413      	add	r3, r2
 80149f8:	00db      	lsls	r3, r3, #3
 80149fa:	440b      	add	r3, r1
 80149fc:	3308      	adds	r3, #8
 80149fe:	681b      	ldr	r3, [r3, #0]
 8014a00:	687a      	ldr	r2, [r7, #4]
 8014a02:	429a      	cmp	r2, r3
 8014a04:	d102      	bne.n	8014a0c <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8014a06:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014a0a:	e100      	b.n	8014c0e <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8014a0c:	7dfb      	ldrb	r3, [r7, #23]
 8014a0e:	2b01      	cmp	r3, #1
 8014a10:	d140      	bne.n	8014a94 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8014a12:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014a16:	4980      	ldr	r1, [pc, #512]	; (8014c18 <etharp_find_entry+0x2d4>)
 8014a18:	4613      	mov	r3, r2
 8014a1a:	005b      	lsls	r3, r3, #1
 8014a1c:	4413      	add	r3, r2
 8014a1e:	00db      	lsls	r3, r3, #3
 8014a20:	440b      	add	r3, r1
 8014a22:	681b      	ldr	r3, [r3, #0]
 8014a24:	2b00      	cmp	r3, #0
 8014a26:	d01a      	beq.n	8014a5e <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8014a28:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014a2c:	497a      	ldr	r1, [pc, #488]	; (8014c18 <etharp_find_entry+0x2d4>)
 8014a2e:	4613      	mov	r3, r2
 8014a30:	005b      	lsls	r3, r3, #1
 8014a32:	4413      	add	r3, r2
 8014a34:	00db      	lsls	r3, r3, #3
 8014a36:	440b      	add	r3, r1
 8014a38:	3312      	adds	r3, #18
 8014a3a:	881b      	ldrh	r3, [r3, #0]
 8014a3c:	8bba      	ldrh	r2, [r7, #28]
 8014a3e:	429a      	cmp	r2, r3
 8014a40:	d845      	bhi.n	8014ace <etharp_find_entry+0x18a>
            old_queue = i;
 8014a42:	8c3b      	ldrh	r3, [r7, #32]
 8014a44:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8014a46:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014a4a:	4973      	ldr	r1, [pc, #460]	; (8014c18 <etharp_find_entry+0x2d4>)
 8014a4c:	4613      	mov	r3, r2
 8014a4e:	005b      	lsls	r3, r3, #1
 8014a50:	4413      	add	r3, r2
 8014a52:	00db      	lsls	r3, r3, #3
 8014a54:	440b      	add	r3, r1
 8014a56:	3312      	adds	r3, #18
 8014a58:	881b      	ldrh	r3, [r3, #0]
 8014a5a:	83bb      	strh	r3, [r7, #28]
 8014a5c:	e037      	b.n	8014ace <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8014a5e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014a62:	496d      	ldr	r1, [pc, #436]	; (8014c18 <etharp_find_entry+0x2d4>)
 8014a64:	4613      	mov	r3, r2
 8014a66:	005b      	lsls	r3, r3, #1
 8014a68:	4413      	add	r3, r2
 8014a6a:	00db      	lsls	r3, r3, #3
 8014a6c:	440b      	add	r3, r1
 8014a6e:	3312      	adds	r3, #18
 8014a70:	881b      	ldrh	r3, [r3, #0]
 8014a72:	8b7a      	ldrh	r2, [r7, #26]
 8014a74:	429a      	cmp	r2, r3
 8014a76:	d82a      	bhi.n	8014ace <etharp_find_entry+0x18a>
            old_pending = i;
 8014a78:	8c3b      	ldrh	r3, [r7, #32]
 8014a7a:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8014a7c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014a80:	4965      	ldr	r1, [pc, #404]	; (8014c18 <etharp_find_entry+0x2d4>)
 8014a82:	4613      	mov	r3, r2
 8014a84:	005b      	lsls	r3, r3, #1
 8014a86:	4413      	add	r3, r2
 8014a88:	00db      	lsls	r3, r3, #3
 8014a8a:	440b      	add	r3, r1
 8014a8c:	3312      	adds	r3, #18
 8014a8e:	881b      	ldrh	r3, [r3, #0]
 8014a90:	837b      	strh	r3, [r7, #26]
 8014a92:	e01c      	b.n	8014ace <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8014a94:	7dfb      	ldrb	r3, [r7, #23]
 8014a96:	2b01      	cmp	r3, #1
 8014a98:	d919      	bls.n	8014ace <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8014a9a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014a9e:	495e      	ldr	r1, [pc, #376]	; (8014c18 <etharp_find_entry+0x2d4>)
 8014aa0:	4613      	mov	r3, r2
 8014aa2:	005b      	lsls	r3, r3, #1
 8014aa4:	4413      	add	r3, r2
 8014aa6:	00db      	lsls	r3, r3, #3
 8014aa8:	440b      	add	r3, r1
 8014aaa:	3312      	adds	r3, #18
 8014aac:	881b      	ldrh	r3, [r3, #0]
 8014aae:	8b3a      	ldrh	r2, [r7, #24]
 8014ab0:	429a      	cmp	r2, r3
 8014ab2:	d80c      	bhi.n	8014ace <etharp_find_entry+0x18a>
            old_stable = i;
 8014ab4:	8c3b      	ldrh	r3, [r7, #32]
 8014ab6:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8014ab8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014abc:	4956      	ldr	r1, [pc, #344]	; (8014c18 <etharp_find_entry+0x2d4>)
 8014abe:	4613      	mov	r3, r2
 8014ac0:	005b      	lsls	r3, r3, #1
 8014ac2:	4413      	add	r3, r2
 8014ac4:	00db      	lsls	r3, r3, #3
 8014ac6:	440b      	add	r3, r1
 8014ac8:	3312      	adds	r3, #18
 8014aca:	881b      	ldrh	r3, [r3, #0]
 8014acc:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014ace:	8c3b      	ldrh	r3, [r7, #32]
 8014ad0:	3301      	adds	r3, #1
 8014ad2:	b29b      	uxth	r3, r3
 8014ad4:	843b      	strh	r3, [r7, #32]
 8014ad6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014ada:	2b09      	cmp	r3, #9
 8014adc:	f77f af4c 	ble.w	8014978 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8014ae0:	7afb      	ldrb	r3, [r7, #11]
 8014ae2:	f003 0302 	and.w	r3, r3, #2
 8014ae6:	2b00      	cmp	r3, #0
 8014ae8:	d108      	bne.n	8014afc <etharp_find_entry+0x1b8>
 8014aea:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8014aee:	2b0a      	cmp	r3, #10
 8014af0:	d107      	bne.n	8014b02 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8014af2:	7afb      	ldrb	r3, [r7, #11]
 8014af4:	f003 0301 	and.w	r3, r3, #1
 8014af8:	2b00      	cmp	r3, #0
 8014afa:	d102      	bne.n	8014b02 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8014afc:	f04f 33ff 	mov.w	r3, #4294967295
 8014b00:	e085      	b.n	8014c0e <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8014b02:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8014b06:	2b09      	cmp	r3, #9
 8014b08:	dc02      	bgt.n	8014b10 <etharp_find_entry+0x1cc>
    i = empty;
 8014b0a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014b0c:	843b      	strh	r3, [r7, #32]
 8014b0e:	e039      	b.n	8014b84 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8014b10:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8014b14:	2b09      	cmp	r3, #9
 8014b16:	dc14      	bgt.n	8014b42 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8014b18:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014b1a:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8014b1c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014b20:	493d      	ldr	r1, [pc, #244]	; (8014c18 <etharp_find_entry+0x2d4>)
 8014b22:	4613      	mov	r3, r2
 8014b24:	005b      	lsls	r3, r3, #1
 8014b26:	4413      	add	r3, r2
 8014b28:	00db      	lsls	r3, r3, #3
 8014b2a:	440b      	add	r3, r1
 8014b2c:	681b      	ldr	r3, [r3, #0]
 8014b2e:	2b00      	cmp	r3, #0
 8014b30:	d018      	beq.n	8014b64 <etharp_find_entry+0x220>
 8014b32:	4b3a      	ldr	r3, [pc, #232]	; (8014c1c <etharp_find_entry+0x2d8>)
 8014b34:	f240 126d 	movw	r2, #365	; 0x16d
 8014b38:	493b      	ldr	r1, [pc, #236]	; (8014c28 <etharp_find_entry+0x2e4>)
 8014b3a:	483a      	ldr	r0, [pc, #232]	; (8014c24 <etharp_find_entry+0x2e0>)
 8014b3c:	f002 fe98 	bl	8017870 <iprintf>
 8014b40:	e010      	b.n	8014b64 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8014b42:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8014b46:	2b09      	cmp	r3, #9
 8014b48:	dc02      	bgt.n	8014b50 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8014b4a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8014b4c:	843b      	strh	r3, [r7, #32]
 8014b4e:	e009      	b.n	8014b64 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8014b50:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8014b54:	2b09      	cmp	r3, #9
 8014b56:	dc02      	bgt.n	8014b5e <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8014b58:	8bfb      	ldrh	r3, [r7, #30]
 8014b5a:	843b      	strh	r3, [r7, #32]
 8014b5c:	e002      	b.n	8014b64 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8014b5e:	f04f 33ff 	mov.w	r3, #4294967295
 8014b62:	e054      	b.n	8014c0e <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8014b64:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014b68:	2b09      	cmp	r3, #9
 8014b6a:	dd06      	ble.n	8014b7a <etharp_find_entry+0x236>
 8014b6c:	4b2b      	ldr	r3, [pc, #172]	; (8014c1c <etharp_find_entry+0x2d8>)
 8014b6e:	f240 127f 	movw	r2, #383	; 0x17f
 8014b72:	492e      	ldr	r1, [pc, #184]	; (8014c2c <etharp_find_entry+0x2e8>)
 8014b74:	482b      	ldr	r0, [pc, #172]	; (8014c24 <etharp_find_entry+0x2e0>)
 8014b76:	f002 fe7b 	bl	8017870 <iprintf>
    etharp_free_entry(i);
 8014b7a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014b7e:	4618      	mov	r0, r3
 8014b80:	f7ff fe06 	bl	8014790 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8014b84:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014b88:	2b09      	cmp	r3, #9
 8014b8a:	dd06      	ble.n	8014b9a <etharp_find_entry+0x256>
 8014b8c:	4b23      	ldr	r3, [pc, #140]	; (8014c1c <etharp_find_entry+0x2d8>)
 8014b8e:	f240 1283 	movw	r2, #387	; 0x183
 8014b92:	4926      	ldr	r1, [pc, #152]	; (8014c2c <etharp_find_entry+0x2e8>)
 8014b94:	4823      	ldr	r0, [pc, #140]	; (8014c24 <etharp_find_entry+0x2e0>)
 8014b96:	f002 fe6b 	bl	8017870 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8014b9a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014b9e:	491e      	ldr	r1, [pc, #120]	; (8014c18 <etharp_find_entry+0x2d4>)
 8014ba0:	4613      	mov	r3, r2
 8014ba2:	005b      	lsls	r3, r3, #1
 8014ba4:	4413      	add	r3, r2
 8014ba6:	00db      	lsls	r3, r3, #3
 8014ba8:	440b      	add	r3, r1
 8014baa:	3314      	adds	r3, #20
 8014bac:	781b      	ldrb	r3, [r3, #0]
 8014bae:	2b00      	cmp	r3, #0
 8014bb0:	d006      	beq.n	8014bc0 <etharp_find_entry+0x27c>
 8014bb2:	4b1a      	ldr	r3, [pc, #104]	; (8014c1c <etharp_find_entry+0x2d8>)
 8014bb4:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8014bb8:	491d      	ldr	r1, [pc, #116]	; (8014c30 <etharp_find_entry+0x2ec>)
 8014bba:	481a      	ldr	r0, [pc, #104]	; (8014c24 <etharp_find_entry+0x2e0>)
 8014bbc:	f002 fe58 	bl	8017870 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8014bc0:	68fb      	ldr	r3, [r7, #12]
 8014bc2:	2b00      	cmp	r3, #0
 8014bc4:	d00b      	beq.n	8014bde <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8014bc6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014bca:	68fb      	ldr	r3, [r7, #12]
 8014bcc:	6819      	ldr	r1, [r3, #0]
 8014bce:	4812      	ldr	r0, [pc, #72]	; (8014c18 <etharp_find_entry+0x2d4>)
 8014bd0:	4613      	mov	r3, r2
 8014bd2:	005b      	lsls	r3, r3, #1
 8014bd4:	4413      	add	r3, r2
 8014bd6:	00db      	lsls	r3, r3, #3
 8014bd8:	4403      	add	r3, r0
 8014bda:	3304      	adds	r3, #4
 8014bdc:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8014bde:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014be2:	490d      	ldr	r1, [pc, #52]	; (8014c18 <etharp_find_entry+0x2d4>)
 8014be4:	4613      	mov	r3, r2
 8014be6:	005b      	lsls	r3, r3, #1
 8014be8:	4413      	add	r3, r2
 8014bea:	00db      	lsls	r3, r3, #3
 8014bec:	440b      	add	r3, r1
 8014bee:	3312      	adds	r3, #18
 8014bf0:	2200      	movs	r2, #0
 8014bf2:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8014bf4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014bf8:	4907      	ldr	r1, [pc, #28]	; (8014c18 <etharp_find_entry+0x2d4>)
 8014bfa:	4613      	mov	r3, r2
 8014bfc:	005b      	lsls	r3, r3, #1
 8014bfe:	4413      	add	r3, r2
 8014c00:	00db      	lsls	r3, r3, #3
 8014c02:	440b      	add	r3, r1
 8014c04:	3308      	adds	r3, #8
 8014c06:	687a      	ldr	r2, [r7, #4]
 8014c08:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8014c0a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8014c0e:	4618      	mov	r0, r3
 8014c10:	3728      	adds	r7, #40	; 0x28
 8014c12:	46bd      	mov	sp, r7
 8014c14:	bd80      	pop	{r7, pc}
 8014c16:	bf00      	nop
 8014c18:	200004a4 	.word	0x200004a4
 8014c1c:	0801f2fc 	.word	0x0801f2fc
 8014c20:	0801f334 	.word	0x0801f334
 8014c24:	0801f374 	.word	0x0801f374
 8014c28:	0801f39c 	.word	0x0801f39c
 8014c2c:	0801f3b4 	.word	0x0801f3b4
 8014c30:	0801f3c8 	.word	0x0801f3c8

08014c34 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8014c34:	b580      	push	{r7, lr}
 8014c36:	b088      	sub	sp, #32
 8014c38:	af02      	add	r7, sp, #8
 8014c3a:	60f8      	str	r0, [r7, #12]
 8014c3c:	60b9      	str	r1, [r7, #8]
 8014c3e:	607a      	str	r2, [r7, #4]
 8014c40:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8014c42:	68fb      	ldr	r3, [r7, #12]
 8014c44:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8014c48:	2b06      	cmp	r3, #6
 8014c4a:	d006      	beq.n	8014c5a <etharp_update_arp_entry+0x26>
 8014c4c:	4b48      	ldr	r3, [pc, #288]	; (8014d70 <etharp_update_arp_entry+0x13c>)
 8014c4e:	f240 12a9 	movw	r2, #425	; 0x1a9
 8014c52:	4948      	ldr	r1, [pc, #288]	; (8014d74 <etharp_update_arp_entry+0x140>)
 8014c54:	4848      	ldr	r0, [pc, #288]	; (8014d78 <etharp_update_arp_entry+0x144>)
 8014c56:	f002 fe0b 	bl	8017870 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8014c5a:	68bb      	ldr	r3, [r7, #8]
 8014c5c:	2b00      	cmp	r3, #0
 8014c5e:	d012      	beq.n	8014c86 <etharp_update_arp_entry+0x52>
 8014c60:	68bb      	ldr	r3, [r7, #8]
 8014c62:	681b      	ldr	r3, [r3, #0]
 8014c64:	2b00      	cmp	r3, #0
 8014c66:	d00e      	beq.n	8014c86 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8014c68:	68bb      	ldr	r3, [r7, #8]
 8014c6a:	681b      	ldr	r3, [r3, #0]
 8014c6c:	68f9      	ldr	r1, [r7, #12]
 8014c6e:	4618      	mov	r0, r3
 8014c70:	f001 f920 	bl	8015eb4 <ip4_addr_isbroadcast_u32>
 8014c74:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8014c76:	2b00      	cmp	r3, #0
 8014c78:	d105      	bne.n	8014c86 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8014c7a:	68bb      	ldr	r3, [r7, #8]
 8014c7c:	681b      	ldr	r3, [r3, #0]
 8014c7e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8014c82:	2be0      	cmp	r3, #224	; 0xe0
 8014c84:	d102      	bne.n	8014c8c <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8014c86:	f06f 030f 	mvn.w	r3, #15
 8014c8a:	e06c      	b.n	8014d66 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8014c8c:	78fb      	ldrb	r3, [r7, #3]
 8014c8e:	68fa      	ldr	r2, [r7, #12]
 8014c90:	4619      	mov	r1, r3
 8014c92:	68b8      	ldr	r0, [r7, #8]
 8014c94:	f7ff fe56 	bl	8014944 <etharp_find_entry>
 8014c98:	4603      	mov	r3, r0
 8014c9a:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8014c9c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8014ca0:	2b00      	cmp	r3, #0
 8014ca2:	da02      	bge.n	8014caa <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8014ca4:	8afb      	ldrh	r3, [r7, #22]
 8014ca6:	b25b      	sxtb	r3, r3
 8014ca8:	e05d      	b.n	8014d66 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8014caa:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014cae:	4933      	ldr	r1, [pc, #204]	; (8014d7c <etharp_update_arp_entry+0x148>)
 8014cb0:	4613      	mov	r3, r2
 8014cb2:	005b      	lsls	r3, r3, #1
 8014cb4:	4413      	add	r3, r2
 8014cb6:	00db      	lsls	r3, r3, #3
 8014cb8:	440b      	add	r3, r1
 8014cba:	3314      	adds	r3, #20
 8014cbc:	2202      	movs	r2, #2
 8014cbe:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8014cc0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014cc4:	492d      	ldr	r1, [pc, #180]	; (8014d7c <etharp_update_arp_entry+0x148>)
 8014cc6:	4613      	mov	r3, r2
 8014cc8:	005b      	lsls	r3, r3, #1
 8014cca:	4413      	add	r3, r2
 8014ccc:	00db      	lsls	r3, r3, #3
 8014cce:	440b      	add	r3, r1
 8014cd0:	3308      	adds	r3, #8
 8014cd2:	68fa      	ldr	r2, [r7, #12]
 8014cd4:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8014cd6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014cda:	4613      	mov	r3, r2
 8014cdc:	005b      	lsls	r3, r3, #1
 8014cde:	4413      	add	r3, r2
 8014ce0:	00db      	lsls	r3, r3, #3
 8014ce2:	3308      	adds	r3, #8
 8014ce4:	4a25      	ldr	r2, [pc, #148]	; (8014d7c <etharp_update_arp_entry+0x148>)
 8014ce6:	4413      	add	r3, r2
 8014ce8:	3304      	adds	r3, #4
 8014cea:	2206      	movs	r2, #6
 8014cec:	6879      	ldr	r1, [r7, #4]
 8014cee:	4618      	mov	r0, r3
 8014cf0:	f002 f87a 	bl	8016de8 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8014cf4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014cf8:	4920      	ldr	r1, [pc, #128]	; (8014d7c <etharp_update_arp_entry+0x148>)
 8014cfa:	4613      	mov	r3, r2
 8014cfc:	005b      	lsls	r3, r3, #1
 8014cfe:	4413      	add	r3, r2
 8014d00:	00db      	lsls	r3, r3, #3
 8014d02:	440b      	add	r3, r1
 8014d04:	3312      	adds	r3, #18
 8014d06:	2200      	movs	r2, #0
 8014d08:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8014d0a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014d0e:	491b      	ldr	r1, [pc, #108]	; (8014d7c <etharp_update_arp_entry+0x148>)
 8014d10:	4613      	mov	r3, r2
 8014d12:	005b      	lsls	r3, r3, #1
 8014d14:	4413      	add	r3, r2
 8014d16:	00db      	lsls	r3, r3, #3
 8014d18:	440b      	add	r3, r1
 8014d1a:	681b      	ldr	r3, [r3, #0]
 8014d1c:	2b00      	cmp	r3, #0
 8014d1e:	d021      	beq.n	8014d64 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8014d20:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014d24:	4915      	ldr	r1, [pc, #84]	; (8014d7c <etharp_update_arp_entry+0x148>)
 8014d26:	4613      	mov	r3, r2
 8014d28:	005b      	lsls	r3, r3, #1
 8014d2a:	4413      	add	r3, r2
 8014d2c:	00db      	lsls	r3, r3, #3
 8014d2e:	440b      	add	r3, r1
 8014d30:	681b      	ldr	r3, [r3, #0]
 8014d32:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8014d34:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014d38:	4910      	ldr	r1, [pc, #64]	; (8014d7c <etharp_update_arp_entry+0x148>)
 8014d3a:	4613      	mov	r3, r2
 8014d3c:	005b      	lsls	r3, r3, #1
 8014d3e:	4413      	add	r3, r2
 8014d40:	00db      	lsls	r3, r3, #3
 8014d42:	440b      	add	r3, r1
 8014d44:	2200      	movs	r2, #0
 8014d46:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8014d48:	68fb      	ldr	r3, [r7, #12]
 8014d4a:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 8014d4e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8014d52:	9300      	str	r3, [sp, #0]
 8014d54:	687b      	ldr	r3, [r7, #4]
 8014d56:	6939      	ldr	r1, [r7, #16]
 8014d58:	68f8      	ldr	r0, [r7, #12]
 8014d5a:	f001 ffb3 	bl	8016cc4 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8014d5e:	6938      	ldr	r0, [r7, #16]
 8014d60:	f7f7 fd08 	bl	800c774 <pbuf_free>
  }
  return ERR_OK;
 8014d64:	2300      	movs	r3, #0
}
 8014d66:	4618      	mov	r0, r3
 8014d68:	3718      	adds	r7, #24
 8014d6a:	46bd      	mov	sp, r7
 8014d6c:	bd80      	pop	{r7, pc}
 8014d6e:	bf00      	nop
 8014d70:	0801f2fc 	.word	0x0801f2fc
 8014d74:	0801f3f4 	.word	0x0801f3f4
 8014d78:	0801f374 	.word	0x0801f374
 8014d7c:	200004a4 	.word	0x200004a4

08014d80 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8014d80:	b580      	push	{r7, lr}
 8014d82:	b084      	sub	sp, #16
 8014d84:	af00      	add	r7, sp, #0
 8014d86:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014d88:	2300      	movs	r3, #0
 8014d8a:	60fb      	str	r3, [r7, #12]
 8014d8c:	e01e      	b.n	8014dcc <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8014d8e:	4913      	ldr	r1, [pc, #76]	; (8014ddc <etharp_cleanup_netif+0x5c>)
 8014d90:	68fa      	ldr	r2, [r7, #12]
 8014d92:	4613      	mov	r3, r2
 8014d94:	005b      	lsls	r3, r3, #1
 8014d96:	4413      	add	r3, r2
 8014d98:	00db      	lsls	r3, r3, #3
 8014d9a:	440b      	add	r3, r1
 8014d9c:	3314      	adds	r3, #20
 8014d9e:	781b      	ldrb	r3, [r3, #0]
 8014da0:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8014da2:	7afb      	ldrb	r3, [r7, #11]
 8014da4:	2b00      	cmp	r3, #0
 8014da6:	d00e      	beq.n	8014dc6 <etharp_cleanup_netif+0x46>
 8014da8:	490c      	ldr	r1, [pc, #48]	; (8014ddc <etharp_cleanup_netif+0x5c>)
 8014daa:	68fa      	ldr	r2, [r7, #12]
 8014dac:	4613      	mov	r3, r2
 8014dae:	005b      	lsls	r3, r3, #1
 8014db0:	4413      	add	r3, r2
 8014db2:	00db      	lsls	r3, r3, #3
 8014db4:	440b      	add	r3, r1
 8014db6:	3308      	adds	r3, #8
 8014db8:	681b      	ldr	r3, [r3, #0]
 8014dba:	687a      	ldr	r2, [r7, #4]
 8014dbc:	429a      	cmp	r2, r3
 8014dbe:	d102      	bne.n	8014dc6 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8014dc0:	68f8      	ldr	r0, [r7, #12]
 8014dc2:	f7ff fce5 	bl	8014790 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014dc6:	68fb      	ldr	r3, [r7, #12]
 8014dc8:	3301      	adds	r3, #1
 8014dca:	60fb      	str	r3, [r7, #12]
 8014dcc:	68fb      	ldr	r3, [r7, #12]
 8014dce:	2b09      	cmp	r3, #9
 8014dd0:	dddd      	ble.n	8014d8e <etharp_cleanup_netif+0xe>
    }
  }
}
 8014dd2:	bf00      	nop
 8014dd4:	bf00      	nop
 8014dd6:	3710      	adds	r7, #16
 8014dd8:	46bd      	mov	sp, r7
 8014dda:	bd80      	pop	{r7, pc}
 8014ddc:	200004a4 	.word	0x200004a4

08014de0 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8014de0:	b5b0      	push	{r4, r5, r7, lr}
 8014de2:	b08a      	sub	sp, #40	; 0x28
 8014de4:	af04      	add	r7, sp, #16
 8014de6:	6078      	str	r0, [r7, #4]
 8014de8:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8014dea:	683b      	ldr	r3, [r7, #0]
 8014dec:	2b00      	cmp	r3, #0
 8014dee:	d107      	bne.n	8014e00 <etharp_input+0x20>
 8014df0:	4b3f      	ldr	r3, [pc, #252]	; (8014ef0 <etharp_input+0x110>)
 8014df2:	f240 228a 	movw	r2, #650	; 0x28a
 8014df6:	493f      	ldr	r1, [pc, #252]	; (8014ef4 <etharp_input+0x114>)
 8014df8:	483f      	ldr	r0, [pc, #252]	; (8014ef8 <etharp_input+0x118>)
 8014dfa:	f002 fd39 	bl	8017870 <iprintf>
 8014dfe:	e074      	b.n	8014eea <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 8014e00:	687b      	ldr	r3, [r7, #4]
 8014e02:	685b      	ldr	r3, [r3, #4]
 8014e04:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8014e06:	693b      	ldr	r3, [r7, #16]
 8014e08:	881b      	ldrh	r3, [r3, #0]
 8014e0a:	b29b      	uxth	r3, r3
 8014e0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014e10:	d10c      	bne.n	8014e2c <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8014e12:	693b      	ldr	r3, [r7, #16]
 8014e14:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8014e16:	2b06      	cmp	r3, #6
 8014e18:	d108      	bne.n	8014e2c <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8014e1a:	693b      	ldr	r3, [r7, #16]
 8014e1c:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8014e1e:	2b04      	cmp	r3, #4
 8014e20:	d104      	bne.n	8014e2c <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8014e22:	693b      	ldr	r3, [r7, #16]
 8014e24:	885b      	ldrh	r3, [r3, #2]
 8014e26:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8014e28:	2b08      	cmp	r3, #8
 8014e2a:	d003      	beq.n	8014e34 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8014e2c:	6878      	ldr	r0, [r7, #4]
 8014e2e:	f7f7 fca1 	bl	800c774 <pbuf_free>
    return;
 8014e32:	e05a      	b.n	8014eea <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8014e34:	693b      	ldr	r3, [r7, #16]
 8014e36:	330e      	adds	r3, #14
 8014e38:	681b      	ldr	r3, [r3, #0]
 8014e3a:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8014e3c:	693b      	ldr	r3, [r7, #16]
 8014e3e:	3318      	adds	r3, #24
 8014e40:	681b      	ldr	r3, [r3, #0]
 8014e42:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8014e44:	683b      	ldr	r3, [r7, #0]
 8014e46:	3304      	adds	r3, #4
 8014e48:	681b      	ldr	r3, [r3, #0]
 8014e4a:	2b00      	cmp	r3, #0
 8014e4c:	d102      	bne.n	8014e54 <etharp_input+0x74>
    for_us = 0;
 8014e4e:	2300      	movs	r3, #0
 8014e50:	75fb      	strb	r3, [r7, #23]
 8014e52:	e009      	b.n	8014e68 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8014e54:	68ba      	ldr	r2, [r7, #8]
 8014e56:	683b      	ldr	r3, [r7, #0]
 8014e58:	3304      	adds	r3, #4
 8014e5a:	681b      	ldr	r3, [r3, #0]
 8014e5c:	429a      	cmp	r2, r3
 8014e5e:	bf0c      	ite	eq
 8014e60:	2301      	moveq	r3, #1
 8014e62:	2300      	movne	r3, #0
 8014e64:	b2db      	uxtb	r3, r3
 8014e66:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8014e68:	693b      	ldr	r3, [r7, #16]
 8014e6a:	f103 0208 	add.w	r2, r3, #8
 8014e6e:	7dfb      	ldrb	r3, [r7, #23]
 8014e70:	2b00      	cmp	r3, #0
 8014e72:	d001      	beq.n	8014e78 <etharp_input+0x98>
 8014e74:	2301      	movs	r3, #1
 8014e76:	e000      	b.n	8014e7a <etharp_input+0x9a>
 8014e78:	2302      	movs	r3, #2
 8014e7a:	f107 010c 	add.w	r1, r7, #12
 8014e7e:	6838      	ldr	r0, [r7, #0]
 8014e80:	f7ff fed8 	bl	8014c34 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8014e84:	693b      	ldr	r3, [r7, #16]
 8014e86:	88db      	ldrh	r3, [r3, #6]
 8014e88:	b29b      	uxth	r3, r3
 8014e8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014e8e:	d003      	beq.n	8014e98 <etharp_input+0xb8>
 8014e90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014e94:	d01e      	beq.n	8014ed4 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8014e96:	e025      	b.n	8014ee4 <etharp_input+0x104>
      if (for_us) {
 8014e98:	7dfb      	ldrb	r3, [r7, #23]
 8014e9a:	2b00      	cmp	r3, #0
 8014e9c:	d021      	beq.n	8014ee2 <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8014e9e:	683b      	ldr	r3, [r7, #0]
 8014ea0:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 8014ea4:	693b      	ldr	r3, [r7, #16]
 8014ea6:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8014eaa:	683b      	ldr	r3, [r7, #0]
 8014eac:	f103 052a 	add.w	r5, r3, #42	; 0x2a
 8014eb0:	683b      	ldr	r3, [r7, #0]
 8014eb2:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8014eb4:	693a      	ldr	r2, [r7, #16]
 8014eb6:	3208      	adds	r2, #8
        etharp_raw(netif,
 8014eb8:	2102      	movs	r1, #2
 8014eba:	9103      	str	r1, [sp, #12]
 8014ebc:	f107 010c 	add.w	r1, r7, #12
 8014ec0:	9102      	str	r1, [sp, #8]
 8014ec2:	9201      	str	r2, [sp, #4]
 8014ec4:	9300      	str	r3, [sp, #0]
 8014ec6:	462b      	mov	r3, r5
 8014ec8:	4622      	mov	r2, r4
 8014eca:	4601      	mov	r1, r0
 8014ecc:	6838      	ldr	r0, [r7, #0]
 8014ece:	f000 faef 	bl	80154b0 <etharp_raw>
      break;
 8014ed2:	e006      	b.n	8014ee2 <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 8014ed4:	f107 030c 	add.w	r3, r7, #12
 8014ed8:	4619      	mov	r1, r3
 8014eda:	6838      	ldr	r0, [r7, #0]
 8014edc:	f7fe f9fc 	bl	80132d8 <dhcp_arp_reply>
      break;
 8014ee0:	e000      	b.n	8014ee4 <etharp_input+0x104>
      break;
 8014ee2:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8014ee4:	6878      	ldr	r0, [r7, #4]
 8014ee6:	f7f7 fc45 	bl	800c774 <pbuf_free>
}
 8014eea:	3718      	adds	r7, #24
 8014eec:	46bd      	mov	sp, r7
 8014eee:	bdb0      	pop	{r4, r5, r7, pc}
 8014ef0:	0801f2fc 	.word	0x0801f2fc
 8014ef4:	0801f44c 	.word	0x0801f44c
 8014ef8:	0801f374 	.word	0x0801f374

08014efc <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8014efc:	b580      	push	{r7, lr}
 8014efe:	b086      	sub	sp, #24
 8014f00:	af02      	add	r7, sp, #8
 8014f02:	60f8      	str	r0, [r7, #12]
 8014f04:	60b9      	str	r1, [r7, #8]
 8014f06:	4613      	mov	r3, r2
 8014f08:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8014f0a:	79fa      	ldrb	r2, [r7, #7]
 8014f0c:	4944      	ldr	r1, [pc, #272]	; (8015020 <etharp_output_to_arp_index+0x124>)
 8014f0e:	4613      	mov	r3, r2
 8014f10:	005b      	lsls	r3, r3, #1
 8014f12:	4413      	add	r3, r2
 8014f14:	00db      	lsls	r3, r3, #3
 8014f16:	440b      	add	r3, r1
 8014f18:	3314      	adds	r3, #20
 8014f1a:	781b      	ldrb	r3, [r3, #0]
 8014f1c:	2b01      	cmp	r3, #1
 8014f1e:	d806      	bhi.n	8014f2e <etharp_output_to_arp_index+0x32>
 8014f20:	4b40      	ldr	r3, [pc, #256]	; (8015024 <etharp_output_to_arp_index+0x128>)
 8014f22:	f240 22ee 	movw	r2, #750	; 0x2ee
 8014f26:	4940      	ldr	r1, [pc, #256]	; (8015028 <etharp_output_to_arp_index+0x12c>)
 8014f28:	4840      	ldr	r0, [pc, #256]	; (801502c <etharp_output_to_arp_index+0x130>)
 8014f2a:	f002 fca1 	bl	8017870 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8014f2e:	79fa      	ldrb	r2, [r7, #7]
 8014f30:	493b      	ldr	r1, [pc, #236]	; (8015020 <etharp_output_to_arp_index+0x124>)
 8014f32:	4613      	mov	r3, r2
 8014f34:	005b      	lsls	r3, r3, #1
 8014f36:	4413      	add	r3, r2
 8014f38:	00db      	lsls	r3, r3, #3
 8014f3a:	440b      	add	r3, r1
 8014f3c:	3314      	adds	r3, #20
 8014f3e:	781b      	ldrb	r3, [r3, #0]
 8014f40:	2b02      	cmp	r3, #2
 8014f42:	d153      	bne.n	8014fec <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8014f44:	79fa      	ldrb	r2, [r7, #7]
 8014f46:	4936      	ldr	r1, [pc, #216]	; (8015020 <etharp_output_to_arp_index+0x124>)
 8014f48:	4613      	mov	r3, r2
 8014f4a:	005b      	lsls	r3, r3, #1
 8014f4c:	4413      	add	r3, r2
 8014f4e:	00db      	lsls	r3, r3, #3
 8014f50:	440b      	add	r3, r1
 8014f52:	3312      	adds	r3, #18
 8014f54:	881b      	ldrh	r3, [r3, #0]
 8014f56:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8014f5a:	d919      	bls.n	8014f90 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8014f5c:	79fa      	ldrb	r2, [r7, #7]
 8014f5e:	4613      	mov	r3, r2
 8014f60:	005b      	lsls	r3, r3, #1
 8014f62:	4413      	add	r3, r2
 8014f64:	00db      	lsls	r3, r3, #3
 8014f66:	4a2e      	ldr	r2, [pc, #184]	; (8015020 <etharp_output_to_arp_index+0x124>)
 8014f68:	4413      	add	r3, r2
 8014f6a:	3304      	adds	r3, #4
 8014f6c:	4619      	mov	r1, r3
 8014f6e:	68f8      	ldr	r0, [r7, #12]
 8014f70:	f000 fb4c 	bl	801560c <etharp_request>
 8014f74:	4603      	mov	r3, r0
 8014f76:	2b00      	cmp	r3, #0
 8014f78:	d138      	bne.n	8014fec <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8014f7a:	79fa      	ldrb	r2, [r7, #7]
 8014f7c:	4928      	ldr	r1, [pc, #160]	; (8015020 <etharp_output_to_arp_index+0x124>)
 8014f7e:	4613      	mov	r3, r2
 8014f80:	005b      	lsls	r3, r3, #1
 8014f82:	4413      	add	r3, r2
 8014f84:	00db      	lsls	r3, r3, #3
 8014f86:	440b      	add	r3, r1
 8014f88:	3314      	adds	r3, #20
 8014f8a:	2203      	movs	r2, #3
 8014f8c:	701a      	strb	r2, [r3, #0]
 8014f8e:	e02d      	b.n	8014fec <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8014f90:	79fa      	ldrb	r2, [r7, #7]
 8014f92:	4923      	ldr	r1, [pc, #140]	; (8015020 <etharp_output_to_arp_index+0x124>)
 8014f94:	4613      	mov	r3, r2
 8014f96:	005b      	lsls	r3, r3, #1
 8014f98:	4413      	add	r3, r2
 8014f9a:	00db      	lsls	r3, r3, #3
 8014f9c:	440b      	add	r3, r1
 8014f9e:	3312      	adds	r3, #18
 8014fa0:	881b      	ldrh	r3, [r3, #0]
 8014fa2:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8014fa6:	d321      	bcc.n	8014fec <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8014fa8:	79fa      	ldrb	r2, [r7, #7]
 8014faa:	4613      	mov	r3, r2
 8014fac:	005b      	lsls	r3, r3, #1
 8014fae:	4413      	add	r3, r2
 8014fb0:	00db      	lsls	r3, r3, #3
 8014fb2:	4a1b      	ldr	r2, [pc, #108]	; (8015020 <etharp_output_to_arp_index+0x124>)
 8014fb4:	4413      	add	r3, r2
 8014fb6:	1d19      	adds	r1, r3, #4
 8014fb8:	79fa      	ldrb	r2, [r7, #7]
 8014fba:	4613      	mov	r3, r2
 8014fbc:	005b      	lsls	r3, r3, #1
 8014fbe:	4413      	add	r3, r2
 8014fc0:	00db      	lsls	r3, r3, #3
 8014fc2:	3308      	adds	r3, #8
 8014fc4:	4a16      	ldr	r2, [pc, #88]	; (8015020 <etharp_output_to_arp_index+0x124>)
 8014fc6:	4413      	add	r3, r2
 8014fc8:	3304      	adds	r3, #4
 8014fca:	461a      	mov	r2, r3
 8014fcc:	68f8      	ldr	r0, [r7, #12]
 8014fce:	f000 fafb 	bl	80155c8 <etharp_request_dst>
 8014fd2:	4603      	mov	r3, r0
 8014fd4:	2b00      	cmp	r3, #0
 8014fd6:	d109      	bne.n	8014fec <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8014fd8:	79fa      	ldrb	r2, [r7, #7]
 8014fda:	4911      	ldr	r1, [pc, #68]	; (8015020 <etharp_output_to_arp_index+0x124>)
 8014fdc:	4613      	mov	r3, r2
 8014fde:	005b      	lsls	r3, r3, #1
 8014fe0:	4413      	add	r3, r2
 8014fe2:	00db      	lsls	r3, r3, #3
 8014fe4:	440b      	add	r3, r1
 8014fe6:	3314      	adds	r3, #20
 8014fe8:	2203      	movs	r2, #3
 8014fea:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8014fec:	68fb      	ldr	r3, [r7, #12]
 8014fee:	f103 012a 	add.w	r1, r3, #42	; 0x2a
 8014ff2:	79fa      	ldrb	r2, [r7, #7]
 8014ff4:	4613      	mov	r3, r2
 8014ff6:	005b      	lsls	r3, r3, #1
 8014ff8:	4413      	add	r3, r2
 8014ffa:	00db      	lsls	r3, r3, #3
 8014ffc:	3308      	adds	r3, #8
 8014ffe:	4a08      	ldr	r2, [pc, #32]	; (8015020 <etharp_output_to_arp_index+0x124>)
 8015000:	4413      	add	r3, r2
 8015002:	3304      	adds	r3, #4
 8015004:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8015008:	9200      	str	r2, [sp, #0]
 801500a:	460a      	mov	r2, r1
 801500c:	68b9      	ldr	r1, [r7, #8]
 801500e:	68f8      	ldr	r0, [r7, #12]
 8015010:	f001 fe58 	bl	8016cc4 <ethernet_output>
 8015014:	4603      	mov	r3, r0
}
 8015016:	4618      	mov	r0, r3
 8015018:	3710      	adds	r7, #16
 801501a:	46bd      	mov	sp, r7
 801501c:	bd80      	pop	{r7, pc}
 801501e:	bf00      	nop
 8015020:	200004a4 	.word	0x200004a4
 8015024:	0801f2fc 	.word	0x0801f2fc
 8015028:	0801f46c 	.word	0x0801f46c
 801502c:	0801f374 	.word	0x0801f374

08015030 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8015030:	b580      	push	{r7, lr}
 8015032:	b08a      	sub	sp, #40	; 0x28
 8015034:	af02      	add	r7, sp, #8
 8015036:	60f8      	str	r0, [r7, #12]
 8015038:	60b9      	str	r1, [r7, #8]
 801503a:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 801503c:	687b      	ldr	r3, [r7, #4]
 801503e:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8015040:	68fb      	ldr	r3, [r7, #12]
 8015042:	2b00      	cmp	r3, #0
 8015044:	d106      	bne.n	8015054 <etharp_output+0x24>
 8015046:	4b73      	ldr	r3, [pc, #460]	; (8015214 <etharp_output+0x1e4>)
 8015048:	f240 321e 	movw	r2, #798	; 0x31e
 801504c:	4972      	ldr	r1, [pc, #456]	; (8015218 <etharp_output+0x1e8>)
 801504e:	4873      	ldr	r0, [pc, #460]	; (801521c <etharp_output+0x1ec>)
 8015050:	f002 fc0e 	bl	8017870 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8015054:	68bb      	ldr	r3, [r7, #8]
 8015056:	2b00      	cmp	r3, #0
 8015058:	d106      	bne.n	8015068 <etharp_output+0x38>
 801505a:	4b6e      	ldr	r3, [pc, #440]	; (8015214 <etharp_output+0x1e4>)
 801505c:	f240 321f 	movw	r2, #799	; 0x31f
 8015060:	496f      	ldr	r1, [pc, #444]	; (8015220 <etharp_output+0x1f0>)
 8015062:	486e      	ldr	r0, [pc, #440]	; (801521c <etharp_output+0x1ec>)
 8015064:	f002 fc04 	bl	8017870 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8015068:	687b      	ldr	r3, [r7, #4]
 801506a:	2b00      	cmp	r3, #0
 801506c:	d106      	bne.n	801507c <etharp_output+0x4c>
 801506e:	4b69      	ldr	r3, [pc, #420]	; (8015214 <etharp_output+0x1e4>)
 8015070:	f44f 7248 	mov.w	r2, #800	; 0x320
 8015074:	496b      	ldr	r1, [pc, #428]	; (8015224 <etharp_output+0x1f4>)
 8015076:	4869      	ldr	r0, [pc, #420]	; (801521c <etharp_output+0x1ec>)
 8015078:	f002 fbfa 	bl	8017870 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 801507c:	687b      	ldr	r3, [r7, #4]
 801507e:	681b      	ldr	r3, [r3, #0]
 8015080:	68f9      	ldr	r1, [r7, #12]
 8015082:	4618      	mov	r0, r3
 8015084:	f000 ff16 	bl	8015eb4 <ip4_addr_isbroadcast_u32>
 8015088:	4603      	mov	r3, r0
 801508a:	2b00      	cmp	r3, #0
 801508c:	d002      	beq.n	8015094 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801508e:	4b66      	ldr	r3, [pc, #408]	; (8015228 <etharp_output+0x1f8>)
 8015090:	61fb      	str	r3, [r7, #28]
 8015092:	e0af      	b.n	80151f4 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8015094:	687b      	ldr	r3, [r7, #4]
 8015096:	681b      	ldr	r3, [r3, #0]
 8015098:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801509c:	2be0      	cmp	r3, #224	; 0xe0
 801509e:	d118      	bne.n	80150d2 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 80150a0:	2301      	movs	r3, #1
 80150a2:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 80150a4:	2300      	movs	r3, #0
 80150a6:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 80150a8:	235e      	movs	r3, #94	; 0x5e
 80150aa:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 80150ac:	687b      	ldr	r3, [r7, #4]
 80150ae:	3301      	adds	r3, #1
 80150b0:	781b      	ldrb	r3, [r3, #0]
 80150b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80150b6:	b2db      	uxtb	r3, r3
 80150b8:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 80150ba:	687b      	ldr	r3, [r7, #4]
 80150bc:	3302      	adds	r3, #2
 80150be:	781b      	ldrb	r3, [r3, #0]
 80150c0:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 80150c2:	687b      	ldr	r3, [r7, #4]
 80150c4:	3303      	adds	r3, #3
 80150c6:	781b      	ldrb	r3, [r3, #0]
 80150c8:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 80150ca:	f107 0310 	add.w	r3, r7, #16
 80150ce:	61fb      	str	r3, [r7, #28]
 80150d0:	e090      	b.n	80151f4 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80150d2:	687b      	ldr	r3, [r7, #4]
 80150d4:	681a      	ldr	r2, [r3, #0]
 80150d6:	68fb      	ldr	r3, [r7, #12]
 80150d8:	3304      	adds	r3, #4
 80150da:	681b      	ldr	r3, [r3, #0]
 80150dc:	405a      	eors	r2, r3
 80150de:	68fb      	ldr	r3, [r7, #12]
 80150e0:	3308      	adds	r3, #8
 80150e2:	681b      	ldr	r3, [r3, #0]
 80150e4:	4013      	ands	r3, r2
 80150e6:	2b00      	cmp	r3, #0
 80150e8:	d012      	beq.n	8015110 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 80150ea:	687b      	ldr	r3, [r7, #4]
 80150ec:	681b      	ldr	r3, [r3, #0]
 80150ee:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80150f0:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 80150f4:	4293      	cmp	r3, r2
 80150f6:	d00b      	beq.n	8015110 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 80150f8:	68fb      	ldr	r3, [r7, #12]
 80150fa:	330c      	adds	r3, #12
 80150fc:	681b      	ldr	r3, [r3, #0]
 80150fe:	2b00      	cmp	r3, #0
 8015100:	d003      	beq.n	801510a <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8015102:	68fb      	ldr	r3, [r7, #12]
 8015104:	330c      	adds	r3, #12
 8015106:	61bb      	str	r3, [r7, #24]
 8015108:	e002      	b.n	8015110 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801510a:	f06f 0303 	mvn.w	r3, #3
 801510e:	e07d      	b.n	801520c <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8015110:	4b46      	ldr	r3, [pc, #280]	; (801522c <etharp_output+0x1fc>)
 8015112:	781b      	ldrb	r3, [r3, #0]
 8015114:	4619      	mov	r1, r3
 8015116:	4a46      	ldr	r2, [pc, #280]	; (8015230 <etharp_output+0x200>)
 8015118:	460b      	mov	r3, r1
 801511a:	005b      	lsls	r3, r3, #1
 801511c:	440b      	add	r3, r1
 801511e:	00db      	lsls	r3, r3, #3
 8015120:	4413      	add	r3, r2
 8015122:	3314      	adds	r3, #20
 8015124:	781b      	ldrb	r3, [r3, #0]
 8015126:	2b01      	cmp	r3, #1
 8015128:	d925      	bls.n	8015176 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 801512a:	4b40      	ldr	r3, [pc, #256]	; (801522c <etharp_output+0x1fc>)
 801512c:	781b      	ldrb	r3, [r3, #0]
 801512e:	4619      	mov	r1, r3
 8015130:	4a3f      	ldr	r2, [pc, #252]	; (8015230 <etharp_output+0x200>)
 8015132:	460b      	mov	r3, r1
 8015134:	005b      	lsls	r3, r3, #1
 8015136:	440b      	add	r3, r1
 8015138:	00db      	lsls	r3, r3, #3
 801513a:	4413      	add	r3, r2
 801513c:	3308      	adds	r3, #8
 801513e:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8015140:	68fa      	ldr	r2, [r7, #12]
 8015142:	429a      	cmp	r2, r3
 8015144:	d117      	bne.n	8015176 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8015146:	69bb      	ldr	r3, [r7, #24]
 8015148:	681a      	ldr	r2, [r3, #0]
 801514a:	4b38      	ldr	r3, [pc, #224]	; (801522c <etharp_output+0x1fc>)
 801514c:	781b      	ldrb	r3, [r3, #0]
 801514e:	4618      	mov	r0, r3
 8015150:	4937      	ldr	r1, [pc, #220]	; (8015230 <etharp_output+0x200>)
 8015152:	4603      	mov	r3, r0
 8015154:	005b      	lsls	r3, r3, #1
 8015156:	4403      	add	r3, r0
 8015158:	00db      	lsls	r3, r3, #3
 801515a:	440b      	add	r3, r1
 801515c:	3304      	adds	r3, #4
 801515e:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8015160:	429a      	cmp	r2, r3
 8015162:	d108      	bne.n	8015176 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8015164:	4b31      	ldr	r3, [pc, #196]	; (801522c <etharp_output+0x1fc>)
 8015166:	781b      	ldrb	r3, [r3, #0]
 8015168:	461a      	mov	r2, r3
 801516a:	68b9      	ldr	r1, [r7, #8]
 801516c:	68f8      	ldr	r0, [r7, #12]
 801516e:	f7ff fec5 	bl	8014efc <etharp_output_to_arp_index>
 8015172:	4603      	mov	r3, r0
 8015174:	e04a      	b.n	801520c <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8015176:	2300      	movs	r3, #0
 8015178:	75fb      	strb	r3, [r7, #23]
 801517a:	e031      	b.n	80151e0 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801517c:	7dfa      	ldrb	r2, [r7, #23]
 801517e:	492c      	ldr	r1, [pc, #176]	; (8015230 <etharp_output+0x200>)
 8015180:	4613      	mov	r3, r2
 8015182:	005b      	lsls	r3, r3, #1
 8015184:	4413      	add	r3, r2
 8015186:	00db      	lsls	r3, r3, #3
 8015188:	440b      	add	r3, r1
 801518a:	3314      	adds	r3, #20
 801518c:	781b      	ldrb	r3, [r3, #0]
 801518e:	2b01      	cmp	r3, #1
 8015190:	d923      	bls.n	80151da <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8015192:	7dfa      	ldrb	r2, [r7, #23]
 8015194:	4926      	ldr	r1, [pc, #152]	; (8015230 <etharp_output+0x200>)
 8015196:	4613      	mov	r3, r2
 8015198:	005b      	lsls	r3, r3, #1
 801519a:	4413      	add	r3, r2
 801519c:	00db      	lsls	r3, r3, #3
 801519e:	440b      	add	r3, r1
 80151a0:	3308      	adds	r3, #8
 80151a2:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80151a4:	68fa      	ldr	r2, [r7, #12]
 80151a6:	429a      	cmp	r2, r3
 80151a8:	d117      	bne.n	80151da <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 80151aa:	69bb      	ldr	r3, [r7, #24]
 80151ac:	6819      	ldr	r1, [r3, #0]
 80151ae:	7dfa      	ldrb	r2, [r7, #23]
 80151b0:	481f      	ldr	r0, [pc, #124]	; (8015230 <etharp_output+0x200>)
 80151b2:	4613      	mov	r3, r2
 80151b4:	005b      	lsls	r3, r3, #1
 80151b6:	4413      	add	r3, r2
 80151b8:	00db      	lsls	r3, r3, #3
 80151ba:	4403      	add	r3, r0
 80151bc:	3304      	adds	r3, #4
 80151be:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 80151c0:	4299      	cmp	r1, r3
 80151c2:	d10a      	bne.n	80151da <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 80151c4:	4a19      	ldr	r2, [pc, #100]	; (801522c <etharp_output+0x1fc>)
 80151c6:	7dfb      	ldrb	r3, [r7, #23]
 80151c8:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 80151ca:	7dfb      	ldrb	r3, [r7, #23]
 80151cc:	461a      	mov	r2, r3
 80151ce:	68b9      	ldr	r1, [r7, #8]
 80151d0:	68f8      	ldr	r0, [r7, #12]
 80151d2:	f7ff fe93 	bl	8014efc <etharp_output_to_arp_index>
 80151d6:	4603      	mov	r3, r0
 80151d8:	e018      	b.n	801520c <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80151da:	7dfb      	ldrb	r3, [r7, #23]
 80151dc:	3301      	adds	r3, #1
 80151de:	75fb      	strb	r3, [r7, #23]
 80151e0:	7dfb      	ldrb	r3, [r7, #23]
 80151e2:	2b09      	cmp	r3, #9
 80151e4:	d9ca      	bls.n	801517c <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 80151e6:	68ba      	ldr	r2, [r7, #8]
 80151e8:	69b9      	ldr	r1, [r7, #24]
 80151ea:	68f8      	ldr	r0, [r7, #12]
 80151ec:	f000 f822 	bl	8015234 <etharp_query>
 80151f0:	4603      	mov	r3, r0
 80151f2:	e00b      	b.n	801520c <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 80151f4:	68fb      	ldr	r3, [r7, #12]
 80151f6:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 80151fa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80151fe:	9300      	str	r3, [sp, #0]
 8015200:	69fb      	ldr	r3, [r7, #28]
 8015202:	68b9      	ldr	r1, [r7, #8]
 8015204:	68f8      	ldr	r0, [r7, #12]
 8015206:	f001 fd5d 	bl	8016cc4 <ethernet_output>
 801520a:	4603      	mov	r3, r0
}
 801520c:	4618      	mov	r0, r3
 801520e:	3720      	adds	r7, #32
 8015210:	46bd      	mov	sp, r7
 8015212:	bd80      	pop	{r7, pc}
 8015214:	0801f2fc 	.word	0x0801f2fc
 8015218:	0801f44c 	.word	0x0801f44c
 801521c:	0801f374 	.word	0x0801f374
 8015220:	0801f49c 	.word	0x0801f49c
 8015224:	0801f43c 	.word	0x0801f43c
 8015228:	0801fad0 	.word	0x0801fad0
 801522c:	20000594 	.word	0x20000594
 8015230:	200004a4 	.word	0x200004a4

08015234 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8015234:	b580      	push	{r7, lr}
 8015236:	b08c      	sub	sp, #48	; 0x30
 8015238:	af02      	add	r7, sp, #8
 801523a:	60f8      	str	r0, [r7, #12]
 801523c:	60b9      	str	r1, [r7, #8]
 801523e:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8015240:	68fb      	ldr	r3, [r7, #12]
 8015242:	332a      	adds	r3, #42	; 0x2a
 8015244:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8015246:	23ff      	movs	r3, #255	; 0xff
 8015248:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 801524c:	2300      	movs	r3, #0
 801524e:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8015250:	68bb      	ldr	r3, [r7, #8]
 8015252:	681b      	ldr	r3, [r3, #0]
 8015254:	68f9      	ldr	r1, [r7, #12]
 8015256:	4618      	mov	r0, r3
 8015258:	f000 fe2c 	bl	8015eb4 <ip4_addr_isbroadcast_u32>
 801525c:	4603      	mov	r3, r0
 801525e:	2b00      	cmp	r3, #0
 8015260:	d10c      	bne.n	801527c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8015262:	68bb      	ldr	r3, [r7, #8]
 8015264:	681b      	ldr	r3, [r3, #0]
 8015266:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801526a:	2be0      	cmp	r3, #224	; 0xe0
 801526c:	d006      	beq.n	801527c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801526e:	68bb      	ldr	r3, [r7, #8]
 8015270:	2b00      	cmp	r3, #0
 8015272:	d003      	beq.n	801527c <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8015274:	68bb      	ldr	r3, [r7, #8]
 8015276:	681b      	ldr	r3, [r3, #0]
 8015278:	2b00      	cmp	r3, #0
 801527a:	d102      	bne.n	8015282 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801527c:	f06f 030f 	mvn.w	r3, #15
 8015280:	e101      	b.n	8015486 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8015282:	68fa      	ldr	r2, [r7, #12]
 8015284:	2101      	movs	r1, #1
 8015286:	68b8      	ldr	r0, [r7, #8]
 8015288:	f7ff fb5c 	bl	8014944 <etharp_find_entry>
 801528c:	4603      	mov	r3, r0
 801528e:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8015290:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8015294:	2b00      	cmp	r3, #0
 8015296:	da02      	bge.n	801529e <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8015298:	8a7b      	ldrh	r3, [r7, #18]
 801529a:	b25b      	sxtb	r3, r3
 801529c:	e0f3      	b.n	8015486 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 801529e:	8a7b      	ldrh	r3, [r7, #18]
 80152a0:	2b7e      	cmp	r3, #126	; 0x7e
 80152a2:	d906      	bls.n	80152b2 <etharp_query+0x7e>
 80152a4:	4b7a      	ldr	r3, [pc, #488]	; (8015490 <etharp_query+0x25c>)
 80152a6:	f240 32c1 	movw	r2, #961	; 0x3c1
 80152aa:	497a      	ldr	r1, [pc, #488]	; (8015494 <etharp_query+0x260>)
 80152ac:	487a      	ldr	r0, [pc, #488]	; (8015498 <etharp_query+0x264>)
 80152ae:	f002 fadf 	bl	8017870 <iprintf>
  i = (netif_addr_idx_t)i_err;
 80152b2:	8a7b      	ldrh	r3, [r7, #18]
 80152b4:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 80152b6:	7c7a      	ldrb	r2, [r7, #17]
 80152b8:	4978      	ldr	r1, [pc, #480]	; (801549c <etharp_query+0x268>)
 80152ba:	4613      	mov	r3, r2
 80152bc:	005b      	lsls	r3, r3, #1
 80152be:	4413      	add	r3, r2
 80152c0:	00db      	lsls	r3, r3, #3
 80152c2:	440b      	add	r3, r1
 80152c4:	3314      	adds	r3, #20
 80152c6:	781b      	ldrb	r3, [r3, #0]
 80152c8:	2b00      	cmp	r3, #0
 80152ca:	d115      	bne.n	80152f8 <etharp_query+0xc4>
    is_new_entry = 1;
 80152cc:	2301      	movs	r3, #1
 80152ce:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 80152d0:	7c7a      	ldrb	r2, [r7, #17]
 80152d2:	4972      	ldr	r1, [pc, #456]	; (801549c <etharp_query+0x268>)
 80152d4:	4613      	mov	r3, r2
 80152d6:	005b      	lsls	r3, r3, #1
 80152d8:	4413      	add	r3, r2
 80152da:	00db      	lsls	r3, r3, #3
 80152dc:	440b      	add	r3, r1
 80152de:	3314      	adds	r3, #20
 80152e0:	2201      	movs	r2, #1
 80152e2:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 80152e4:	7c7a      	ldrb	r2, [r7, #17]
 80152e6:	496d      	ldr	r1, [pc, #436]	; (801549c <etharp_query+0x268>)
 80152e8:	4613      	mov	r3, r2
 80152ea:	005b      	lsls	r3, r3, #1
 80152ec:	4413      	add	r3, r2
 80152ee:	00db      	lsls	r3, r3, #3
 80152f0:	440b      	add	r3, r1
 80152f2:	3308      	adds	r3, #8
 80152f4:	68fa      	ldr	r2, [r7, #12]
 80152f6:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 80152f8:	7c7a      	ldrb	r2, [r7, #17]
 80152fa:	4968      	ldr	r1, [pc, #416]	; (801549c <etharp_query+0x268>)
 80152fc:	4613      	mov	r3, r2
 80152fe:	005b      	lsls	r3, r3, #1
 8015300:	4413      	add	r3, r2
 8015302:	00db      	lsls	r3, r3, #3
 8015304:	440b      	add	r3, r1
 8015306:	3314      	adds	r3, #20
 8015308:	781b      	ldrb	r3, [r3, #0]
 801530a:	2b01      	cmp	r3, #1
 801530c:	d011      	beq.n	8015332 <etharp_query+0xfe>
 801530e:	7c7a      	ldrb	r2, [r7, #17]
 8015310:	4962      	ldr	r1, [pc, #392]	; (801549c <etharp_query+0x268>)
 8015312:	4613      	mov	r3, r2
 8015314:	005b      	lsls	r3, r3, #1
 8015316:	4413      	add	r3, r2
 8015318:	00db      	lsls	r3, r3, #3
 801531a:	440b      	add	r3, r1
 801531c:	3314      	adds	r3, #20
 801531e:	781b      	ldrb	r3, [r3, #0]
 8015320:	2b01      	cmp	r3, #1
 8015322:	d806      	bhi.n	8015332 <etharp_query+0xfe>
 8015324:	4b5a      	ldr	r3, [pc, #360]	; (8015490 <etharp_query+0x25c>)
 8015326:	f240 32cd 	movw	r2, #973	; 0x3cd
 801532a:	495d      	ldr	r1, [pc, #372]	; (80154a0 <etharp_query+0x26c>)
 801532c:	485a      	ldr	r0, [pc, #360]	; (8015498 <etharp_query+0x264>)
 801532e:	f002 fa9f 	bl	8017870 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8015332:	6a3b      	ldr	r3, [r7, #32]
 8015334:	2b00      	cmp	r3, #0
 8015336:	d102      	bne.n	801533e <etharp_query+0x10a>
 8015338:	687b      	ldr	r3, [r7, #4]
 801533a:	2b00      	cmp	r3, #0
 801533c:	d10c      	bne.n	8015358 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801533e:	68b9      	ldr	r1, [r7, #8]
 8015340:	68f8      	ldr	r0, [r7, #12]
 8015342:	f000 f963 	bl	801560c <etharp_request>
 8015346:	4603      	mov	r3, r0
 8015348:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 801534c:	687b      	ldr	r3, [r7, #4]
 801534e:	2b00      	cmp	r3, #0
 8015350:	d102      	bne.n	8015358 <etharp_query+0x124>
      return result;
 8015352:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8015356:	e096      	b.n	8015486 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8015358:	687b      	ldr	r3, [r7, #4]
 801535a:	2b00      	cmp	r3, #0
 801535c:	d106      	bne.n	801536c <etharp_query+0x138>
 801535e:	4b4c      	ldr	r3, [pc, #304]	; (8015490 <etharp_query+0x25c>)
 8015360:	f240 32e1 	movw	r2, #993	; 0x3e1
 8015364:	494f      	ldr	r1, [pc, #316]	; (80154a4 <etharp_query+0x270>)
 8015366:	484c      	ldr	r0, [pc, #304]	; (8015498 <etharp_query+0x264>)
 8015368:	f002 fa82 	bl	8017870 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 801536c:	7c7a      	ldrb	r2, [r7, #17]
 801536e:	494b      	ldr	r1, [pc, #300]	; (801549c <etharp_query+0x268>)
 8015370:	4613      	mov	r3, r2
 8015372:	005b      	lsls	r3, r3, #1
 8015374:	4413      	add	r3, r2
 8015376:	00db      	lsls	r3, r3, #3
 8015378:	440b      	add	r3, r1
 801537a:	3314      	adds	r3, #20
 801537c:	781b      	ldrb	r3, [r3, #0]
 801537e:	2b01      	cmp	r3, #1
 8015380:	d917      	bls.n	80153b2 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8015382:	4a49      	ldr	r2, [pc, #292]	; (80154a8 <etharp_query+0x274>)
 8015384:	7c7b      	ldrb	r3, [r7, #17]
 8015386:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8015388:	7c7a      	ldrb	r2, [r7, #17]
 801538a:	4613      	mov	r3, r2
 801538c:	005b      	lsls	r3, r3, #1
 801538e:	4413      	add	r3, r2
 8015390:	00db      	lsls	r3, r3, #3
 8015392:	3308      	adds	r3, #8
 8015394:	4a41      	ldr	r2, [pc, #260]	; (801549c <etharp_query+0x268>)
 8015396:	4413      	add	r3, r2
 8015398:	3304      	adds	r3, #4
 801539a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801539e:	9200      	str	r2, [sp, #0]
 80153a0:	697a      	ldr	r2, [r7, #20]
 80153a2:	6879      	ldr	r1, [r7, #4]
 80153a4:	68f8      	ldr	r0, [r7, #12]
 80153a6:	f001 fc8d 	bl	8016cc4 <ethernet_output>
 80153aa:	4603      	mov	r3, r0
 80153ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80153b0:	e067      	b.n	8015482 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80153b2:	7c7a      	ldrb	r2, [r7, #17]
 80153b4:	4939      	ldr	r1, [pc, #228]	; (801549c <etharp_query+0x268>)
 80153b6:	4613      	mov	r3, r2
 80153b8:	005b      	lsls	r3, r3, #1
 80153ba:	4413      	add	r3, r2
 80153bc:	00db      	lsls	r3, r3, #3
 80153be:	440b      	add	r3, r1
 80153c0:	3314      	adds	r3, #20
 80153c2:	781b      	ldrb	r3, [r3, #0]
 80153c4:	2b01      	cmp	r3, #1
 80153c6:	d15c      	bne.n	8015482 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 80153c8:	2300      	movs	r3, #0
 80153ca:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 80153cc:	687b      	ldr	r3, [r7, #4]
 80153ce:	61fb      	str	r3, [r7, #28]
    while (p) {
 80153d0:	e01c      	b.n	801540c <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 80153d2:	69fb      	ldr	r3, [r7, #28]
 80153d4:	895a      	ldrh	r2, [r3, #10]
 80153d6:	69fb      	ldr	r3, [r7, #28]
 80153d8:	891b      	ldrh	r3, [r3, #8]
 80153da:	429a      	cmp	r2, r3
 80153dc:	d10a      	bne.n	80153f4 <etharp_query+0x1c0>
 80153de:	69fb      	ldr	r3, [r7, #28]
 80153e0:	681b      	ldr	r3, [r3, #0]
 80153e2:	2b00      	cmp	r3, #0
 80153e4:	d006      	beq.n	80153f4 <etharp_query+0x1c0>
 80153e6:	4b2a      	ldr	r3, [pc, #168]	; (8015490 <etharp_query+0x25c>)
 80153e8:	f240 32f1 	movw	r2, #1009	; 0x3f1
 80153ec:	492f      	ldr	r1, [pc, #188]	; (80154ac <etharp_query+0x278>)
 80153ee:	482a      	ldr	r0, [pc, #168]	; (8015498 <etharp_query+0x264>)
 80153f0:	f002 fa3e 	bl	8017870 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 80153f4:	69fb      	ldr	r3, [r7, #28]
 80153f6:	7b1b      	ldrb	r3, [r3, #12]
 80153f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80153fc:	2b00      	cmp	r3, #0
 80153fe:	d002      	beq.n	8015406 <etharp_query+0x1d2>
        copy_needed = 1;
 8015400:	2301      	movs	r3, #1
 8015402:	61bb      	str	r3, [r7, #24]
        break;
 8015404:	e005      	b.n	8015412 <etharp_query+0x1de>
      }
      p = p->next;
 8015406:	69fb      	ldr	r3, [r7, #28]
 8015408:	681b      	ldr	r3, [r3, #0]
 801540a:	61fb      	str	r3, [r7, #28]
    while (p) {
 801540c:	69fb      	ldr	r3, [r7, #28]
 801540e:	2b00      	cmp	r3, #0
 8015410:	d1df      	bne.n	80153d2 <etharp_query+0x19e>
    }
    if (copy_needed) {
 8015412:	69bb      	ldr	r3, [r7, #24]
 8015414:	2b00      	cmp	r3, #0
 8015416:	d007      	beq.n	8015428 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8015418:	687a      	ldr	r2, [r7, #4]
 801541a:	f44f 7120 	mov.w	r1, #640	; 0x280
 801541e:	200e      	movs	r0, #14
 8015420:	f7f7 fc14 	bl	800cc4c <pbuf_clone>
 8015424:	61f8      	str	r0, [r7, #28]
 8015426:	e004      	b.n	8015432 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8015428:	687b      	ldr	r3, [r7, #4]
 801542a:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 801542c:	69f8      	ldr	r0, [r7, #28]
 801542e:	f7f7 fa41 	bl	800c8b4 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8015432:	69fb      	ldr	r3, [r7, #28]
 8015434:	2b00      	cmp	r3, #0
 8015436:	d021      	beq.n	801547c <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8015438:	7c7a      	ldrb	r2, [r7, #17]
 801543a:	4918      	ldr	r1, [pc, #96]	; (801549c <etharp_query+0x268>)
 801543c:	4613      	mov	r3, r2
 801543e:	005b      	lsls	r3, r3, #1
 8015440:	4413      	add	r3, r2
 8015442:	00db      	lsls	r3, r3, #3
 8015444:	440b      	add	r3, r1
 8015446:	681b      	ldr	r3, [r3, #0]
 8015448:	2b00      	cmp	r3, #0
 801544a:	d00a      	beq.n	8015462 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 801544c:	7c7a      	ldrb	r2, [r7, #17]
 801544e:	4913      	ldr	r1, [pc, #76]	; (801549c <etharp_query+0x268>)
 8015450:	4613      	mov	r3, r2
 8015452:	005b      	lsls	r3, r3, #1
 8015454:	4413      	add	r3, r2
 8015456:	00db      	lsls	r3, r3, #3
 8015458:	440b      	add	r3, r1
 801545a:	681b      	ldr	r3, [r3, #0]
 801545c:	4618      	mov	r0, r3
 801545e:	f7f7 f989 	bl	800c774 <pbuf_free>
      }
      arp_table[i].q = p;
 8015462:	7c7a      	ldrb	r2, [r7, #17]
 8015464:	490d      	ldr	r1, [pc, #52]	; (801549c <etharp_query+0x268>)
 8015466:	4613      	mov	r3, r2
 8015468:	005b      	lsls	r3, r3, #1
 801546a:	4413      	add	r3, r2
 801546c:	00db      	lsls	r3, r3, #3
 801546e:	440b      	add	r3, r1
 8015470:	69fa      	ldr	r2, [r7, #28]
 8015472:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8015474:	2300      	movs	r3, #0
 8015476:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801547a:	e002      	b.n	8015482 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 801547c:	23ff      	movs	r3, #255	; 0xff
 801547e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8015482:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8015486:	4618      	mov	r0, r3
 8015488:	3728      	adds	r7, #40	; 0x28
 801548a:	46bd      	mov	sp, r7
 801548c:	bd80      	pop	{r7, pc}
 801548e:	bf00      	nop
 8015490:	0801f2fc 	.word	0x0801f2fc
 8015494:	0801f4a8 	.word	0x0801f4a8
 8015498:	0801f374 	.word	0x0801f374
 801549c:	200004a4 	.word	0x200004a4
 80154a0:	0801f4b8 	.word	0x0801f4b8
 80154a4:	0801f49c 	.word	0x0801f49c
 80154a8:	20000594 	.word	0x20000594
 80154ac:	0801f4e0 	.word	0x0801f4e0

080154b0 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 80154b0:	b580      	push	{r7, lr}
 80154b2:	b08a      	sub	sp, #40	; 0x28
 80154b4:	af02      	add	r7, sp, #8
 80154b6:	60f8      	str	r0, [r7, #12]
 80154b8:	60b9      	str	r1, [r7, #8]
 80154ba:	607a      	str	r2, [r7, #4]
 80154bc:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 80154be:	2300      	movs	r3, #0
 80154c0:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 80154c2:	68fb      	ldr	r3, [r7, #12]
 80154c4:	2b00      	cmp	r3, #0
 80154c6:	d106      	bne.n	80154d6 <etharp_raw+0x26>
 80154c8:	4b3a      	ldr	r3, [pc, #232]	; (80155b4 <etharp_raw+0x104>)
 80154ca:	f240 4257 	movw	r2, #1111	; 0x457
 80154ce:	493a      	ldr	r1, [pc, #232]	; (80155b8 <etharp_raw+0x108>)
 80154d0:	483a      	ldr	r0, [pc, #232]	; (80155bc <etharp_raw+0x10c>)
 80154d2:	f002 f9cd 	bl	8017870 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 80154d6:	f44f 7220 	mov.w	r2, #640	; 0x280
 80154da:	211c      	movs	r1, #28
 80154dc:	200e      	movs	r0, #14
 80154de:	f7f6 fe65 	bl	800c1ac <pbuf_alloc>
 80154e2:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 80154e4:	69bb      	ldr	r3, [r7, #24]
 80154e6:	2b00      	cmp	r3, #0
 80154e8:	d102      	bne.n	80154f0 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 80154ea:	f04f 33ff 	mov.w	r3, #4294967295
 80154ee:	e05d      	b.n	80155ac <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 80154f0:	69bb      	ldr	r3, [r7, #24]
 80154f2:	895b      	ldrh	r3, [r3, #10]
 80154f4:	2b1b      	cmp	r3, #27
 80154f6:	d806      	bhi.n	8015506 <etharp_raw+0x56>
 80154f8:	4b2e      	ldr	r3, [pc, #184]	; (80155b4 <etharp_raw+0x104>)
 80154fa:	f240 4262 	movw	r2, #1122	; 0x462
 80154fe:	4930      	ldr	r1, [pc, #192]	; (80155c0 <etharp_raw+0x110>)
 8015500:	482e      	ldr	r0, [pc, #184]	; (80155bc <etharp_raw+0x10c>)
 8015502:	f002 f9b5 	bl	8017870 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8015506:	69bb      	ldr	r3, [r7, #24]
 8015508:	685b      	ldr	r3, [r3, #4]
 801550a:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 801550c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801550e:	4618      	mov	r0, r3
 8015510:	f7f5 fe94 	bl	800b23c <lwip_htons>
 8015514:	4603      	mov	r3, r0
 8015516:	461a      	mov	r2, r3
 8015518:	697b      	ldr	r3, [r7, #20]
 801551a:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 801551c:	68fb      	ldr	r3, [r7, #12]
 801551e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8015522:	2b06      	cmp	r3, #6
 8015524:	d006      	beq.n	8015534 <etharp_raw+0x84>
 8015526:	4b23      	ldr	r3, [pc, #140]	; (80155b4 <etharp_raw+0x104>)
 8015528:	f240 4269 	movw	r2, #1129	; 0x469
 801552c:	4925      	ldr	r1, [pc, #148]	; (80155c4 <etharp_raw+0x114>)
 801552e:	4823      	ldr	r0, [pc, #140]	; (80155bc <etharp_raw+0x10c>)
 8015530:	f002 f99e 	bl	8017870 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8015534:	697b      	ldr	r3, [r7, #20]
 8015536:	3308      	adds	r3, #8
 8015538:	2206      	movs	r2, #6
 801553a:	6839      	ldr	r1, [r7, #0]
 801553c:	4618      	mov	r0, r3
 801553e:	f001 fc53 	bl	8016de8 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8015542:	697b      	ldr	r3, [r7, #20]
 8015544:	3312      	adds	r3, #18
 8015546:	2206      	movs	r2, #6
 8015548:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801554a:	4618      	mov	r0, r3
 801554c:	f001 fc4c 	bl	8016de8 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8015550:	697b      	ldr	r3, [r7, #20]
 8015552:	330e      	adds	r3, #14
 8015554:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015556:	6812      	ldr	r2, [r2, #0]
 8015558:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801555a:	697b      	ldr	r3, [r7, #20]
 801555c:	3318      	adds	r3, #24
 801555e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015560:	6812      	ldr	r2, [r2, #0]
 8015562:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8015564:	697b      	ldr	r3, [r7, #20]
 8015566:	2200      	movs	r2, #0
 8015568:	701a      	strb	r2, [r3, #0]
 801556a:	2200      	movs	r2, #0
 801556c:	f042 0201 	orr.w	r2, r2, #1
 8015570:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8015572:	697b      	ldr	r3, [r7, #20]
 8015574:	2200      	movs	r2, #0
 8015576:	f042 0208 	orr.w	r2, r2, #8
 801557a:	709a      	strb	r2, [r3, #2]
 801557c:	2200      	movs	r2, #0
 801557e:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8015580:	697b      	ldr	r3, [r7, #20]
 8015582:	2206      	movs	r2, #6
 8015584:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8015586:	697b      	ldr	r3, [r7, #20]
 8015588:	2204      	movs	r2, #4
 801558a:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801558c:	f640 0306 	movw	r3, #2054	; 0x806
 8015590:	9300      	str	r3, [sp, #0]
 8015592:	687b      	ldr	r3, [r7, #4]
 8015594:	68ba      	ldr	r2, [r7, #8]
 8015596:	69b9      	ldr	r1, [r7, #24]
 8015598:	68f8      	ldr	r0, [r7, #12]
 801559a:	f001 fb93 	bl	8016cc4 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 801559e:	69b8      	ldr	r0, [r7, #24]
 80155a0:	f7f7 f8e8 	bl	800c774 <pbuf_free>
  p = NULL;
 80155a4:	2300      	movs	r3, #0
 80155a6:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 80155a8:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80155ac:	4618      	mov	r0, r3
 80155ae:	3720      	adds	r7, #32
 80155b0:	46bd      	mov	sp, r7
 80155b2:	bd80      	pop	{r7, pc}
 80155b4:	0801f2fc 	.word	0x0801f2fc
 80155b8:	0801f44c 	.word	0x0801f44c
 80155bc:	0801f374 	.word	0x0801f374
 80155c0:	0801f4fc 	.word	0x0801f4fc
 80155c4:	0801f530 	.word	0x0801f530

080155c8 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 80155c8:	b580      	push	{r7, lr}
 80155ca:	b088      	sub	sp, #32
 80155cc:	af04      	add	r7, sp, #16
 80155ce:	60f8      	str	r0, [r7, #12]
 80155d0:	60b9      	str	r1, [r7, #8]
 80155d2:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80155d4:	68fb      	ldr	r3, [r7, #12]
 80155d6:	f103 012a 	add.w	r1, r3, #42	; 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 80155da:	68fb      	ldr	r3, [r7, #12]
 80155dc:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 80155e0:	68fb      	ldr	r3, [r7, #12]
 80155e2:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80155e4:	2201      	movs	r2, #1
 80155e6:	9203      	str	r2, [sp, #12]
 80155e8:	68ba      	ldr	r2, [r7, #8]
 80155ea:	9202      	str	r2, [sp, #8]
 80155ec:	4a06      	ldr	r2, [pc, #24]	; (8015608 <etharp_request_dst+0x40>)
 80155ee:	9201      	str	r2, [sp, #4]
 80155f0:	9300      	str	r3, [sp, #0]
 80155f2:	4603      	mov	r3, r0
 80155f4:	687a      	ldr	r2, [r7, #4]
 80155f6:	68f8      	ldr	r0, [r7, #12]
 80155f8:	f7ff ff5a 	bl	80154b0 <etharp_raw>
 80155fc:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 80155fe:	4618      	mov	r0, r3
 8015600:	3710      	adds	r7, #16
 8015602:	46bd      	mov	sp, r7
 8015604:	bd80      	pop	{r7, pc}
 8015606:	bf00      	nop
 8015608:	0801fad8 	.word	0x0801fad8

0801560c <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 801560c:	b580      	push	{r7, lr}
 801560e:	b082      	sub	sp, #8
 8015610:	af00      	add	r7, sp, #0
 8015612:	6078      	str	r0, [r7, #4]
 8015614:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8015616:	4a05      	ldr	r2, [pc, #20]	; (801562c <etharp_request+0x20>)
 8015618:	6839      	ldr	r1, [r7, #0]
 801561a:	6878      	ldr	r0, [r7, #4]
 801561c:	f7ff ffd4 	bl	80155c8 <etharp_request_dst>
 8015620:	4603      	mov	r3, r0
}
 8015622:	4618      	mov	r0, r3
 8015624:	3708      	adds	r7, #8
 8015626:	46bd      	mov	sp, r7
 8015628:	bd80      	pop	{r7, pc}
 801562a:	bf00      	nop
 801562c:	0801fad0 	.word	0x0801fad0

08015630 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8015630:	b580      	push	{r7, lr}
 8015632:	b08e      	sub	sp, #56	; 0x38
 8015634:	af04      	add	r7, sp, #16
 8015636:	6078      	str	r0, [r7, #4]
 8015638:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801563a:	4b79      	ldr	r3, [pc, #484]	; (8015820 <icmp_input+0x1f0>)
 801563c:	689b      	ldr	r3, [r3, #8]
 801563e:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8015640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015642:	781b      	ldrb	r3, [r3, #0]
 8015644:	f003 030f 	and.w	r3, r3, #15
 8015648:	b2db      	uxtb	r3, r3
 801564a:	009b      	lsls	r3, r3, #2
 801564c:	b2db      	uxtb	r3, r3
 801564e:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8015650:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015652:	2b13      	cmp	r3, #19
 8015654:	f240 80cd 	bls.w	80157f2 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8015658:	687b      	ldr	r3, [r7, #4]
 801565a:	895b      	ldrh	r3, [r3, #10]
 801565c:	2b03      	cmp	r3, #3
 801565e:	f240 80ca 	bls.w	80157f6 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8015662:	687b      	ldr	r3, [r7, #4]
 8015664:	685b      	ldr	r3, [r3, #4]
 8015666:	781b      	ldrb	r3, [r3, #0]
 8015668:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 801566c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8015670:	2b00      	cmp	r3, #0
 8015672:	f000 80b7 	beq.w	80157e4 <icmp_input+0x1b4>
 8015676:	2b08      	cmp	r3, #8
 8015678:	f040 80b7 	bne.w	80157ea <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 801567c:	4b69      	ldr	r3, [pc, #420]	; (8015824 <icmp_input+0x1f4>)
 801567e:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8015680:	4b67      	ldr	r3, [pc, #412]	; (8015820 <icmp_input+0x1f0>)
 8015682:	695b      	ldr	r3, [r3, #20]
 8015684:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015688:	2be0      	cmp	r3, #224	; 0xe0
 801568a:	f000 80bb 	beq.w	8015804 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801568e:	4b64      	ldr	r3, [pc, #400]	; (8015820 <icmp_input+0x1f0>)
 8015690:	695b      	ldr	r3, [r3, #20]
 8015692:	4a63      	ldr	r2, [pc, #396]	; (8015820 <icmp_input+0x1f0>)
 8015694:	6812      	ldr	r2, [r2, #0]
 8015696:	4611      	mov	r1, r2
 8015698:	4618      	mov	r0, r3
 801569a:	f000 fc0b 	bl	8015eb4 <ip4_addr_isbroadcast_u32>
 801569e:	4603      	mov	r3, r0
 80156a0:	2b00      	cmp	r3, #0
 80156a2:	f040 80b1 	bne.w	8015808 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 80156a6:	687b      	ldr	r3, [r7, #4]
 80156a8:	891b      	ldrh	r3, [r3, #8]
 80156aa:	2b07      	cmp	r3, #7
 80156ac:	f240 80a5 	bls.w	80157fa <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80156b0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80156b2:	330e      	adds	r3, #14
 80156b4:	4619      	mov	r1, r3
 80156b6:	6878      	ldr	r0, [r7, #4]
 80156b8:	f7f6 ffc6 	bl	800c648 <pbuf_add_header>
 80156bc:	4603      	mov	r3, r0
 80156be:	2b00      	cmp	r3, #0
 80156c0:	d04b      	beq.n	801575a <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 80156c2:	687b      	ldr	r3, [r7, #4]
 80156c4:	891a      	ldrh	r2, [r3, #8]
 80156c6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80156c8:	4413      	add	r3, r2
 80156ca:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 80156cc:	687b      	ldr	r3, [r7, #4]
 80156ce:	891b      	ldrh	r3, [r3, #8]
 80156d0:	8b7a      	ldrh	r2, [r7, #26]
 80156d2:	429a      	cmp	r2, r3
 80156d4:	f0c0 809a 	bcc.w	801580c <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 80156d8:	8b7b      	ldrh	r3, [r7, #26]
 80156da:	f44f 7220 	mov.w	r2, #640	; 0x280
 80156de:	4619      	mov	r1, r3
 80156e0:	200e      	movs	r0, #14
 80156e2:	f7f6 fd63 	bl	800c1ac <pbuf_alloc>
 80156e6:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 80156e8:	697b      	ldr	r3, [r7, #20]
 80156ea:	2b00      	cmp	r3, #0
 80156ec:	f000 8090 	beq.w	8015810 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 80156f0:	697b      	ldr	r3, [r7, #20]
 80156f2:	895b      	ldrh	r3, [r3, #10]
 80156f4:	461a      	mov	r2, r3
 80156f6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80156f8:	3308      	adds	r3, #8
 80156fa:	429a      	cmp	r2, r3
 80156fc:	d203      	bcs.n	8015706 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 80156fe:	6978      	ldr	r0, [r7, #20]
 8015700:	f7f7 f838 	bl	800c774 <pbuf_free>
          goto icmperr;
 8015704:	e085      	b.n	8015812 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8015706:	697b      	ldr	r3, [r7, #20]
 8015708:	685b      	ldr	r3, [r3, #4]
 801570a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801570c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801570e:	4618      	mov	r0, r3
 8015710:	f001 fb6a 	bl	8016de8 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8015714:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015716:	4619      	mov	r1, r3
 8015718:	6978      	ldr	r0, [r7, #20]
 801571a:	f7f6 ffa5 	bl	800c668 <pbuf_remove_header>
 801571e:	4603      	mov	r3, r0
 8015720:	2b00      	cmp	r3, #0
 8015722:	d009      	beq.n	8015738 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8015724:	4b40      	ldr	r3, [pc, #256]	; (8015828 <icmp_input+0x1f8>)
 8015726:	22b6      	movs	r2, #182	; 0xb6
 8015728:	4940      	ldr	r1, [pc, #256]	; (801582c <icmp_input+0x1fc>)
 801572a:	4841      	ldr	r0, [pc, #260]	; (8015830 <icmp_input+0x200>)
 801572c:	f002 f8a0 	bl	8017870 <iprintf>
          pbuf_free(r);
 8015730:	6978      	ldr	r0, [r7, #20]
 8015732:	f7f7 f81f 	bl	800c774 <pbuf_free>
          goto icmperr;
 8015736:	e06c      	b.n	8015812 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8015738:	6879      	ldr	r1, [r7, #4]
 801573a:	6978      	ldr	r0, [r7, #20]
 801573c:	f7f7 f942 	bl	800c9c4 <pbuf_copy>
 8015740:	4603      	mov	r3, r0
 8015742:	2b00      	cmp	r3, #0
 8015744:	d003      	beq.n	801574e <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8015746:	6978      	ldr	r0, [r7, #20]
 8015748:	f7f7 f814 	bl	800c774 <pbuf_free>
          goto icmperr;
 801574c:	e061      	b.n	8015812 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 801574e:	6878      	ldr	r0, [r7, #4]
 8015750:	f7f7 f810 	bl	800c774 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8015754:	697b      	ldr	r3, [r7, #20]
 8015756:	607b      	str	r3, [r7, #4]
 8015758:	e00f      	b.n	801577a <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801575a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801575c:	330e      	adds	r3, #14
 801575e:	4619      	mov	r1, r3
 8015760:	6878      	ldr	r0, [r7, #4]
 8015762:	f7f6 ff81 	bl	800c668 <pbuf_remove_header>
 8015766:	4603      	mov	r3, r0
 8015768:	2b00      	cmp	r3, #0
 801576a:	d006      	beq.n	801577a <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 801576c:	4b2e      	ldr	r3, [pc, #184]	; (8015828 <icmp_input+0x1f8>)
 801576e:	22c7      	movs	r2, #199	; 0xc7
 8015770:	4930      	ldr	r1, [pc, #192]	; (8015834 <icmp_input+0x204>)
 8015772:	482f      	ldr	r0, [pc, #188]	; (8015830 <icmp_input+0x200>)
 8015774:	f002 f87c 	bl	8017870 <iprintf>
          goto icmperr;
 8015778:	e04b      	b.n	8015812 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 801577a:	687b      	ldr	r3, [r7, #4]
 801577c:	685b      	ldr	r3, [r3, #4]
 801577e:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8015780:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015782:	4619      	mov	r1, r3
 8015784:	6878      	ldr	r0, [r7, #4]
 8015786:	f7f6 ff5f 	bl	800c648 <pbuf_add_header>
 801578a:	4603      	mov	r3, r0
 801578c:	2b00      	cmp	r3, #0
 801578e:	d12b      	bne.n	80157e8 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8015790:	687b      	ldr	r3, [r7, #4]
 8015792:	685b      	ldr	r3, [r3, #4]
 8015794:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8015796:	69fb      	ldr	r3, [r7, #28]
 8015798:	681a      	ldr	r2, [r3, #0]
 801579a:	68fb      	ldr	r3, [r7, #12]
 801579c:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801579e:	4b20      	ldr	r3, [pc, #128]	; (8015820 <icmp_input+0x1f0>)
 80157a0:	691a      	ldr	r2, [r3, #16]
 80157a2:	68fb      	ldr	r3, [r7, #12]
 80157a4:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 80157a6:	693b      	ldr	r3, [r7, #16]
 80157a8:	2200      	movs	r2, #0
 80157aa:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 80157ac:	693b      	ldr	r3, [r7, #16]
 80157ae:	2200      	movs	r2, #0
 80157b0:	709a      	strb	r2, [r3, #2]
 80157b2:	2200      	movs	r2, #0
 80157b4:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 80157b6:	68fb      	ldr	r3, [r7, #12]
 80157b8:	22ff      	movs	r2, #255	; 0xff
 80157ba:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 80157bc:	68fb      	ldr	r3, [r7, #12]
 80157be:	2200      	movs	r2, #0
 80157c0:	729a      	strb	r2, [r3, #10]
 80157c2:	2200      	movs	r2, #0
 80157c4:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 80157c6:	683b      	ldr	r3, [r7, #0]
 80157c8:	9302      	str	r3, [sp, #8]
 80157ca:	2301      	movs	r3, #1
 80157cc:	9301      	str	r3, [sp, #4]
 80157ce:	2300      	movs	r3, #0
 80157d0:	9300      	str	r3, [sp, #0]
 80157d2:	23ff      	movs	r3, #255	; 0xff
 80157d4:	2200      	movs	r2, #0
 80157d6:	69f9      	ldr	r1, [r7, #28]
 80157d8:	6878      	ldr	r0, [r7, #4]
 80157da:	f000 fa93 	bl	8015d04 <ip4_output_if>
 80157de:	4603      	mov	r3, r0
 80157e0:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 80157e2:	e001      	b.n	80157e8 <icmp_input+0x1b8>
      break;
 80157e4:	bf00      	nop
 80157e6:	e000      	b.n	80157ea <icmp_input+0x1ba>
      break;
 80157e8:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 80157ea:	6878      	ldr	r0, [r7, #4]
 80157ec:	f7f6 ffc2 	bl	800c774 <pbuf_free>
  return;
 80157f0:	e013      	b.n	801581a <icmp_input+0x1ea>
    goto lenerr;
 80157f2:	bf00      	nop
 80157f4:	e002      	b.n	80157fc <icmp_input+0x1cc>
    goto lenerr;
 80157f6:	bf00      	nop
 80157f8:	e000      	b.n	80157fc <icmp_input+0x1cc>
        goto lenerr;
 80157fa:	bf00      	nop
lenerr:
  pbuf_free(p);
 80157fc:	6878      	ldr	r0, [r7, #4]
 80157fe:	f7f6 ffb9 	bl	800c774 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8015802:	e00a      	b.n	801581a <icmp_input+0x1ea>
        goto icmperr;
 8015804:	bf00      	nop
 8015806:	e004      	b.n	8015812 <icmp_input+0x1e2>
        goto icmperr;
 8015808:	bf00      	nop
 801580a:	e002      	b.n	8015812 <icmp_input+0x1e2>
          goto icmperr;
 801580c:	bf00      	nop
 801580e:	e000      	b.n	8015812 <icmp_input+0x1e2>
          goto icmperr;
 8015810:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8015812:	6878      	ldr	r0, [r7, #4]
 8015814:	f7f6 ffae 	bl	800c774 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8015818:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 801581a:	3728      	adds	r7, #40	; 0x28
 801581c:	46bd      	mov	sp, r7
 801581e:	bd80      	pop	{r7, pc}
 8015820:	20003d18 	.word	0x20003d18
 8015824:	20003d2c 	.word	0x20003d2c
 8015828:	0801f574 	.word	0x0801f574
 801582c:	0801f5ac 	.word	0x0801f5ac
 8015830:	0801f5e4 	.word	0x0801f5e4
 8015834:	0801f60c 	.word	0x0801f60c

08015838 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8015838:	b580      	push	{r7, lr}
 801583a:	b082      	sub	sp, #8
 801583c:	af00      	add	r7, sp, #0
 801583e:	6078      	str	r0, [r7, #4]
 8015840:	460b      	mov	r3, r1
 8015842:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8015844:	78fb      	ldrb	r3, [r7, #3]
 8015846:	461a      	mov	r2, r3
 8015848:	2103      	movs	r1, #3
 801584a:	6878      	ldr	r0, [r7, #4]
 801584c:	f000 f814 	bl	8015878 <icmp_send_response>
}
 8015850:	bf00      	nop
 8015852:	3708      	adds	r7, #8
 8015854:	46bd      	mov	sp, r7
 8015856:	bd80      	pop	{r7, pc}

08015858 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8015858:	b580      	push	{r7, lr}
 801585a:	b082      	sub	sp, #8
 801585c:	af00      	add	r7, sp, #0
 801585e:	6078      	str	r0, [r7, #4]
 8015860:	460b      	mov	r3, r1
 8015862:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8015864:	78fb      	ldrb	r3, [r7, #3]
 8015866:	461a      	mov	r2, r3
 8015868:	210b      	movs	r1, #11
 801586a:	6878      	ldr	r0, [r7, #4]
 801586c:	f000 f804 	bl	8015878 <icmp_send_response>
}
 8015870:	bf00      	nop
 8015872:	3708      	adds	r7, #8
 8015874:	46bd      	mov	sp, r7
 8015876:	bd80      	pop	{r7, pc}

08015878 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8015878:	b580      	push	{r7, lr}
 801587a:	b08c      	sub	sp, #48	; 0x30
 801587c:	af04      	add	r7, sp, #16
 801587e:	6078      	str	r0, [r7, #4]
 8015880:	460b      	mov	r3, r1
 8015882:	70fb      	strb	r3, [r7, #3]
 8015884:	4613      	mov	r3, r2
 8015886:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8015888:	f44f 7220 	mov.w	r2, #640	; 0x280
 801588c:	2124      	movs	r1, #36	; 0x24
 801588e:	2022      	movs	r0, #34	; 0x22
 8015890:	f7f6 fc8c 	bl	800c1ac <pbuf_alloc>
 8015894:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8015896:	69fb      	ldr	r3, [r7, #28]
 8015898:	2b00      	cmp	r3, #0
 801589a:	d04c      	beq.n	8015936 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 801589c:	69fb      	ldr	r3, [r7, #28]
 801589e:	895b      	ldrh	r3, [r3, #10]
 80158a0:	2b23      	cmp	r3, #35	; 0x23
 80158a2:	d806      	bhi.n	80158b2 <icmp_send_response+0x3a>
 80158a4:	4b26      	ldr	r3, [pc, #152]	; (8015940 <icmp_send_response+0xc8>)
 80158a6:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80158aa:	4926      	ldr	r1, [pc, #152]	; (8015944 <icmp_send_response+0xcc>)
 80158ac:	4826      	ldr	r0, [pc, #152]	; (8015948 <icmp_send_response+0xd0>)
 80158ae:	f001 ffdf 	bl	8017870 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 80158b2:	687b      	ldr	r3, [r7, #4]
 80158b4:	685b      	ldr	r3, [r3, #4]
 80158b6:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 80158b8:	69fb      	ldr	r3, [r7, #28]
 80158ba:	685b      	ldr	r3, [r3, #4]
 80158bc:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 80158be:	697b      	ldr	r3, [r7, #20]
 80158c0:	78fa      	ldrb	r2, [r7, #3]
 80158c2:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 80158c4:	697b      	ldr	r3, [r7, #20]
 80158c6:	78ba      	ldrb	r2, [r7, #2]
 80158c8:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 80158ca:	697b      	ldr	r3, [r7, #20]
 80158cc:	2200      	movs	r2, #0
 80158ce:	711a      	strb	r2, [r3, #4]
 80158d0:	2200      	movs	r2, #0
 80158d2:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 80158d4:	697b      	ldr	r3, [r7, #20]
 80158d6:	2200      	movs	r2, #0
 80158d8:	719a      	strb	r2, [r3, #6]
 80158da:	2200      	movs	r2, #0
 80158dc:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 80158de:	69fb      	ldr	r3, [r7, #28]
 80158e0:	685b      	ldr	r3, [r3, #4]
 80158e2:	f103 0008 	add.w	r0, r3, #8
 80158e6:	687b      	ldr	r3, [r7, #4]
 80158e8:	685b      	ldr	r3, [r3, #4]
 80158ea:	221c      	movs	r2, #28
 80158ec:	4619      	mov	r1, r3
 80158ee:	f001 fa7b 	bl	8016de8 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 80158f2:	69bb      	ldr	r3, [r7, #24]
 80158f4:	68db      	ldr	r3, [r3, #12]
 80158f6:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 80158f8:	f107 030c 	add.w	r3, r7, #12
 80158fc:	4618      	mov	r0, r3
 80158fe:	f000 f825 	bl	801594c <ip4_route>
 8015902:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8015904:	693b      	ldr	r3, [r7, #16]
 8015906:	2b00      	cmp	r3, #0
 8015908:	d011      	beq.n	801592e <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801590a:	697b      	ldr	r3, [r7, #20]
 801590c:	2200      	movs	r2, #0
 801590e:	709a      	strb	r2, [r3, #2]
 8015910:	2200      	movs	r2, #0
 8015912:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8015914:	f107 020c 	add.w	r2, r7, #12
 8015918:	693b      	ldr	r3, [r7, #16]
 801591a:	9302      	str	r3, [sp, #8]
 801591c:	2301      	movs	r3, #1
 801591e:	9301      	str	r3, [sp, #4]
 8015920:	2300      	movs	r3, #0
 8015922:	9300      	str	r3, [sp, #0]
 8015924:	23ff      	movs	r3, #255	; 0xff
 8015926:	2100      	movs	r1, #0
 8015928:	69f8      	ldr	r0, [r7, #28]
 801592a:	f000 f9eb 	bl	8015d04 <ip4_output_if>
  }
  pbuf_free(q);
 801592e:	69f8      	ldr	r0, [r7, #28]
 8015930:	f7f6 ff20 	bl	800c774 <pbuf_free>
 8015934:	e000      	b.n	8015938 <icmp_send_response+0xc0>
    return;
 8015936:	bf00      	nop
}
 8015938:	3720      	adds	r7, #32
 801593a:	46bd      	mov	sp, r7
 801593c:	bd80      	pop	{r7, pc}
 801593e:	bf00      	nop
 8015940:	0801f574 	.word	0x0801f574
 8015944:	0801f640 	.word	0x0801f640
 8015948:	0801f5e4 	.word	0x0801f5e4

0801594c <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 801594c:	b480      	push	{r7}
 801594e:	b085      	sub	sp, #20
 8015950:	af00      	add	r7, sp, #0
 8015952:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8015954:	4b33      	ldr	r3, [pc, #204]	; (8015a24 <ip4_route+0xd8>)
 8015956:	681b      	ldr	r3, [r3, #0]
 8015958:	60fb      	str	r3, [r7, #12]
 801595a:	e036      	b.n	80159ca <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801595c:	68fb      	ldr	r3, [r7, #12]
 801595e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8015962:	f003 0301 	and.w	r3, r3, #1
 8015966:	b2db      	uxtb	r3, r3
 8015968:	2b00      	cmp	r3, #0
 801596a:	d02b      	beq.n	80159c4 <ip4_route+0x78>
 801596c:	68fb      	ldr	r3, [r7, #12]
 801596e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8015972:	089b      	lsrs	r3, r3, #2
 8015974:	f003 0301 	and.w	r3, r3, #1
 8015978:	b2db      	uxtb	r3, r3
 801597a:	2b00      	cmp	r3, #0
 801597c:	d022      	beq.n	80159c4 <ip4_route+0x78>
 801597e:	68fb      	ldr	r3, [r7, #12]
 8015980:	3304      	adds	r3, #4
 8015982:	681b      	ldr	r3, [r3, #0]
 8015984:	2b00      	cmp	r3, #0
 8015986:	d01d      	beq.n	80159c4 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8015988:	687b      	ldr	r3, [r7, #4]
 801598a:	681a      	ldr	r2, [r3, #0]
 801598c:	68fb      	ldr	r3, [r7, #12]
 801598e:	3304      	adds	r3, #4
 8015990:	681b      	ldr	r3, [r3, #0]
 8015992:	405a      	eors	r2, r3
 8015994:	68fb      	ldr	r3, [r7, #12]
 8015996:	3308      	adds	r3, #8
 8015998:	681b      	ldr	r3, [r3, #0]
 801599a:	4013      	ands	r3, r2
 801599c:	2b00      	cmp	r3, #0
 801599e:	d101      	bne.n	80159a4 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 80159a0:	68fb      	ldr	r3, [r7, #12]
 80159a2:	e038      	b.n	8015a16 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 80159a4:	68fb      	ldr	r3, [r7, #12]
 80159a6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80159aa:	f003 0302 	and.w	r3, r3, #2
 80159ae:	2b00      	cmp	r3, #0
 80159b0:	d108      	bne.n	80159c4 <ip4_route+0x78>
 80159b2:	687b      	ldr	r3, [r7, #4]
 80159b4:	681a      	ldr	r2, [r3, #0]
 80159b6:	68fb      	ldr	r3, [r7, #12]
 80159b8:	330c      	adds	r3, #12
 80159ba:	681b      	ldr	r3, [r3, #0]
 80159bc:	429a      	cmp	r2, r3
 80159be:	d101      	bne.n	80159c4 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 80159c0:	68fb      	ldr	r3, [r7, #12]
 80159c2:	e028      	b.n	8015a16 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 80159c4:	68fb      	ldr	r3, [r7, #12]
 80159c6:	681b      	ldr	r3, [r3, #0]
 80159c8:	60fb      	str	r3, [r7, #12]
 80159ca:	68fb      	ldr	r3, [r7, #12]
 80159cc:	2b00      	cmp	r3, #0
 80159ce:	d1c5      	bne.n	801595c <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80159d0:	4b15      	ldr	r3, [pc, #84]	; (8015a28 <ip4_route+0xdc>)
 80159d2:	681b      	ldr	r3, [r3, #0]
 80159d4:	2b00      	cmp	r3, #0
 80159d6:	d01a      	beq.n	8015a0e <ip4_route+0xc2>
 80159d8:	4b13      	ldr	r3, [pc, #76]	; (8015a28 <ip4_route+0xdc>)
 80159da:	681b      	ldr	r3, [r3, #0]
 80159dc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80159e0:	f003 0301 	and.w	r3, r3, #1
 80159e4:	2b00      	cmp	r3, #0
 80159e6:	d012      	beq.n	8015a0e <ip4_route+0xc2>
 80159e8:	4b0f      	ldr	r3, [pc, #60]	; (8015a28 <ip4_route+0xdc>)
 80159ea:	681b      	ldr	r3, [r3, #0]
 80159ec:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80159f0:	f003 0304 	and.w	r3, r3, #4
 80159f4:	2b00      	cmp	r3, #0
 80159f6:	d00a      	beq.n	8015a0e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80159f8:	4b0b      	ldr	r3, [pc, #44]	; (8015a28 <ip4_route+0xdc>)
 80159fa:	681b      	ldr	r3, [r3, #0]
 80159fc:	3304      	adds	r3, #4
 80159fe:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8015a00:	2b00      	cmp	r3, #0
 8015a02:	d004      	beq.n	8015a0e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8015a04:	687b      	ldr	r3, [r7, #4]
 8015a06:	681b      	ldr	r3, [r3, #0]
 8015a08:	b2db      	uxtb	r3, r3
 8015a0a:	2b7f      	cmp	r3, #127	; 0x7f
 8015a0c:	d101      	bne.n	8015a12 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8015a0e:	2300      	movs	r3, #0
 8015a10:	e001      	b.n	8015a16 <ip4_route+0xca>
  }

  return netif_default;
 8015a12:	4b05      	ldr	r3, [pc, #20]	; (8015a28 <ip4_route+0xdc>)
 8015a14:	681b      	ldr	r3, [r3, #0]
}
 8015a16:	4618      	mov	r0, r3
 8015a18:	3714      	adds	r7, #20
 8015a1a:	46bd      	mov	sp, r7
 8015a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a20:	4770      	bx	lr
 8015a22:	bf00      	nop
 8015a24:	20006e2c 	.word	0x20006e2c
 8015a28:	20006e30 	.word	0x20006e30

08015a2c <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8015a2c:	b580      	push	{r7, lr}
 8015a2e:	b082      	sub	sp, #8
 8015a30:	af00      	add	r7, sp, #0
 8015a32:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8015a34:	687b      	ldr	r3, [r7, #4]
 8015a36:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8015a3a:	f003 0301 	and.w	r3, r3, #1
 8015a3e:	b2db      	uxtb	r3, r3
 8015a40:	2b00      	cmp	r3, #0
 8015a42:	d016      	beq.n	8015a72 <ip4_input_accept+0x46>
 8015a44:	687b      	ldr	r3, [r7, #4]
 8015a46:	3304      	adds	r3, #4
 8015a48:	681b      	ldr	r3, [r3, #0]
 8015a4a:	2b00      	cmp	r3, #0
 8015a4c:	d011      	beq.n	8015a72 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8015a4e:	4b0b      	ldr	r3, [pc, #44]	; (8015a7c <ip4_input_accept+0x50>)
 8015a50:	695a      	ldr	r2, [r3, #20]
 8015a52:	687b      	ldr	r3, [r7, #4]
 8015a54:	3304      	adds	r3, #4
 8015a56:	681b      	ldr	r3, [r3, #0]
 8015a58:	429a      	cmp	r2, r3
 8015a5a:	d008      	beq.n	8015a6e <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8015a5c:	4b07      	ldr	r3, [pc, #28]	; (8015a7c <ip4_input_accept+0x50>)
 8015a5e:	695b      	ldr	r3, [r3, #20]
 8015a60:	6879      	ldr	r1, [r7, #4]
 8015a62:	4618      	mov	r0, r3
 8015a64:	f000 fa26 	bl	8015eb4 <ip4_addr_isbroadcast_u32>
 8015a68:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8015a6a:	2b00      	cmp	r3, #0
 8015a6c:	d001      	beq.n	8015a72 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8015a6e:	2301      	movs	r3, #1
 8015a70:	e000      	b.n	8015a74 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8015a72:	2300      	movs	r3, #0
}
 8015a74:	4618      	mov	r0, r3
 8015a76:	3708      	adds	r7, #8
 8015a78:	46bd      	mov	sp, r7
 8015a7a:	bd80      	pop	{r7, pc}
 8015a7c:	20003d18 	.word	0x20003d18

08015a80 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8015a80:	b580      	push	{r7, lr}
 8015a82:	b088      	sub	sp, #32
 8015a84:	af00      	add	r7, sp, #0
 8015a86:	6078      	str	r0, [r7, #4]
 8015a88:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 8015a8a:	2301      	movs	r3, #1
 8015a8c:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8015a8e:	687b      	ldr	r3, [r7, #4]
 8015a90:	685b      	ldr	r3, [r3, #4]
 8015a92:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 8015a94:	69fb      	ldr	r3, [r7, #28]
 8015a96:	781b      	ldrb	r3, [r3, #0]
 8015a98:	091b      	lsrs	r3, r3, #4
 8015a9a:	b2db      	uxtb	r3, r3
 8015a9c:	2b04      	cmp	r3, #4
 8015a9e:	d004      	beq.n	8015aaa <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8015aa0:	6878      	ldr	r0, [r7, #4]
 8015aa2:	f7f6 fe67 	bl	800c774 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8015aa6:	2300      	movs	r3, #0
 8015aa8:	e123      	b.n	8015cf2 <ip4_input+0x272>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8015aaa:	69fb      	ldr	r3, [r7, #28]
 8015aac:	781b      	ldrb	r3, [r3, #0]
 8015aae:	f003 030f 	and.w	r3, r3, #15
 8015ab2:	b2db      	uxtb	r3, r3
 8015ab4:	009b      	lsls	r3, r3, #2
 8015ab6:	b2db      	uxtb	r3, r3
 8015ab8:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8015aba:	69fb      	ldr	r3, [r7, #28]
 8015abc:	885b      	ldrh	r3, [r3, #2]
 8015abe:	b29b      	uxth	r3, r3
 8015ac0:	4618      	mov	r0, r3
 8015ac2:	f7f5 fbbb 	bl	800b23c <lwip_htons>
 8015ac6:	4603      	mov	r3, r0
 8015ac8:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8015aca:	687b      	ldr	r3, [r7, #4]
 8015acc:	891b      	ldrh	r3, [r3, #8]
 8015ace:	8a3a      	ldrh	r2, [r7, #16]
 8015ad0:	429a      	cmp	r2, r3
 8015ad2:	d204      	bcs.n	8015ade <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 8015ad4:	8a3b      	ldrh	r3, [r7, #16]
 8015ad6:	4619      	mov	r1, r3
 8015ad8:	6878      	ldr	r0, [r7, #4]
 8015ada:	f7f6 fcc5 	bl	800c468 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8015ade:	687b      	ldr	r3, [r7, #4]
 8015ae0:	895b      	ldrh	r3, [r3, #10]
 8015ae2:	8a7a      	ldrh	r2, [r7, #18]
 8015ae4:	429a      	cmp	r2, r3
 8015ae6:	d807      	bhi.n	8015af8 <ip4_input+0x78>
 8015ae8:	687b      	ldr	r3, [r7, #4]
 8015aea:	891b      	ldrh	r3, [r3, #8]
 8015aec:	8a3a      	ldrh	r2, [r7, #16]
 8015aee:	429a      	cmp	r2, r3
 8015af0:	d802      	bhi.n	8015af8 <ip4_input+0x78>
 8015af2:	8a7b      	ldrh	r3, [r7, #18]
 8015af4:	2b13      	cmp	r3, #19
 8015af6:	d804      	bhi.n	8015b02 <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8015af8:	6878      	ldr	r0, [r7, #4]
 8015afa:	f7f6 fe3b 	bl	800c774 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8015afe:	2300      	movs	r3, #0
 8015b00:	e0f7      	b.n	8015cf2 <ip4_input+0x272>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8015b02:	69fb      	ldr	r3, [r7, #28]
 8015b04:	691b      	ldr	r3, [r3, #16]
 8015b06:	4a7d      	ldr	r2, [pc, #500]	; (8015cfc <ip4_input+0x27c>)
 8015b08:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8015b0a:	69fb      	ldr	r3, [r7, #28]
 8015b0c:	68db      	ldr	r3, [r3, #12]
 8015b0e:	4a7b      	ldr	r2, [pc, #492]	; (8015cfc <ip4_input+0x27c>)
 8015b10:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8015b12:	4b7a      	ldr	r3, [pc, #488]	; (8015cfc <ip4_input+0x27c>)
 8015b14:	695b      	ldr	r3, [r3, #20]
 8015b16:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015b1a:	2be0      	cmp	r3, #224	; 0xe0
 8015b1c:	d112      	bne.n	8015b44 <ip4_input+0xc4>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8015b1e:	683b      	ldr	r3, [r7, #0]
 8015b20:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8015b24:	f003 0301 	and.w	r3, r3, #1
 8015b28:	b2db      	uxtb	r3, r3
 8015b2a:	2b00      	cmp	r3, #0
 8015b2c:	d007      	beq.n	8015b3e <ip4_input+0xbe>
 8015b2e:	683b      	ldr	r3, [r7, #0]
 8015b30:	3304      	adds	r3, #4
 8015b32:	681b      	ldr	r3, [r3, #0]
 8015b34:	2b00      	cmp	r3, #0
 8015b36:	d002      	beq.n	8015b3e <ip4_input+0xbe>
      netif = inp;
 8015b38:	683b      	ldr	r3, [r7, #0]
 8015b3a:	61bb      	str	r3, [r7, #24]
 8015b3c:	e02a      	b.n	8015b94 <ip4_input+0x114>
    } else {
      netif = NULL;
 8015b3e:	2300      	movs	r3, #0
 8015b40:	61bb      	str	r3, [r7, #24]
 8015b42:	e027      	b.n	8015b94 <ip4_input+0x114>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8015b44:	6838      	ldr	r0, [r7, #0]
 8015b46:	f7ff ff71 	bl	8015a2c <ip4_input_accept>
 8015b4a:	4603      	mov	r3, r0
 8015b4c:	2b00      	cmp	r3, #0
 8015b4e:	d002      	beq.n	8015b56 <ip4_input+0xd6>
      netif = inp;
 8015b50:	683b      	ldr	r3, [r7, #0]
 8015b52:	61bb      	str	r3, [r7, #24]
 8015b54:	e01e      	b.n	8015b94 <ip4_input+0x114>
    } else {
      netif = NULL;
 8015b56:	2300      	movs	r3, #0
 8015b58:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8015b5a:	4b68      	ldr	r3, [pc, #416]	; (8015cfc <ip4_input+0x27c>)
 8015b5c:	695b      	ldr	r3, [r3, #20]
 8015b5e:	b2db      	uxtb	r3, r3
 8015b60:	2b7f      	cmp	r3, #127	; 0x7f
 8015b62:	d017      	beq.n	8015b94 <ip4_input+0x114>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8015b64:	4b66      	ldr	r3, [pc, #408]	; (8015d00 <ip4_input+0x280>)
 8015b66:	681b      	ldr	r3, [r3, #0]
 8015b68:	61bb      	str	r3, [r7, #24]
 8015b6a:	e00e      	b.n	8015b8a <ip4_input+0x10a>
          if (netif == inp) {
 8015b6c:	69ba      	ldr	r2, [r7, #24]
 8015b6e:	683b      	ldr	r3, [r7, #0]
 8015b70:	429a      	cmp	r2, r3
 8015b72:	d006      	beq.n	8015b82 <ip4_input+0x102>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8015b74:	69b8      	ldr	r0, [r7, #24]
 8015b76:	f7ff ff59 	bl	8015a2c <ip4_input_accept>
 8015b7a:	4603      	mov	r3, r0
 8015b7c:	2b00      	cmp	r3, #0
 8015b7e:	d108      	bne.n	8015b92 <ip4_input+0x112>
 8015b80:	e000      	b.n	8015b84 <ip4_input+0x104>
            continue;
 8015b82:	bf00      	nop
        NETIF_FOREACH(netif) {
 8015b84:	69bb      	ldr	r3, [r7, #24]
 8015b86:	681b      	ldr	r3, [r3, #0]
 8015b88:	61bb      	str	r3, [r7, #24]
 8015b8a:	69bb      	ldr	r3, [r7, #24]
 8015b8c:	2b00      	cmp	r3, #0
 8015b8e:	d1ed      	bne.n	8015b6c <ip4_input+0xec>
 8015b90:	e000      	b.n	8015b94 <ip4_input+0x114>
            break;
 8015b92:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 8015b94:	69bb      	ldr	r3, [r7, #24]
 8015b96:	2b00      	cmp	r3, #0
 8015b98:	d111      	bne.n	8015bbe <ip4_input+0x13e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 8015b9a:	69fb      	ldr	r3, [r7, #28]
 8015b9c:	7a5b      	ldrb	r3, [r3, #9]
 8015b9e:	2b11      	cmp	r3, #17
 8015ba0:	d10d      	bne.n	8015bbe <ip4_input+0x13e>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 8015ba2:	8a7b      	ldrh	r3, [r7, #18]
 8015ba4:	69fa      	ldr	r2, [r7, #28]
 8015ba6:	4413      	add	r3, r2
 8015ba8:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 8015baa:	68fb      	ldr	r3, [r7, #12]
 8015bac:	885b      	ldrh	r3, [r3, #2]
 8015bae:	b29b      	uxth	r3, r3
 8015bb0:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 8015bb4:	d103      	bne.n	8015bbe <ip4_input+0x13e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 8015bb6:	683b      	ldr	r3, [r7, #0]
 8015bb8:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 8015bba:	2300      	movs	r3, #0
 8015bbc:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 8015bbe:	697b      	ldr	r3, [r7, #20]
 8015bc0:	2b00      	cmp	r3, #0
 8015bc2:	d017      	beq.n	8015bf4 <ip4_input+0x174>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 8015bc4:	4b4d      	ldr	r3, [pc, #308]	; (8015cfc <ip4_input+0x27c>)
 8015bc6:	691b      	ldr	r3, [r3, #16]
 8015bc8:	2b00      	cmp	r3, #0
 8015bca:	d013      	beq.n	8015bf4 <ip4_input+0x174>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8015bcc:	4b4b      	ldr	r3, [pc, #300]	; (8015cfc <ip4_input+0x27c>)
 8015bce:	691b      	ldr	r3, [r3, #16]
 8015bd0:	6839      	ldr	r1, [r7, #0]
 8015bd2:	4618      	mov	r0, r3
 8015bd4:	f000 f96e 	bl	8015eb4 <ip4_addr_isbroadcast_u32>
 8015bd8:	4603      	mov	r3, r0
 8015bda:	2b00      	cmp	r3, #0
 8015bdc:	d105      	bne.n	8015bea <ip4_input+0x16a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8015bde:	4b47      	ldr	r3, [pc, #284]	; (8015cfc <ip4_input+0x27c>)
 8015be0:	691b      	ldr	r3, [r3, #16]
 8015be2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8015be6:	2be0      	cmp	r3, #224	; 0xe0
 8015be8:	d104      	bne.n	8015bf4 <ip4_input+0x174>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8015bea:	6878      	ldr	r0, [r7, #4]
 8015bec:	f7f6 fdc2 	bl	800c774 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8015bf0:	2300      	movs	r3, #0
 8015bf2:	e07e      	b.n	8015cf2 <ip4_input+0x272>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8015bf4:	69bb      	ldr	r3, [r7, #24]
 8015bf6:	2b00      	cmp	r3, #0
 8015bf8:	d104      	bne.n	8015c04 <ip4_input+0x184>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8015bfa:	6878      	ldr	r0, [r7, #4]
 8015bfc:	f7f6 fdba 	bl	800c774 <pbuf_free>
    return ERR_OK;
 8015c00:	2300      	movs	r3, #0
 8015c02:	e076      	b.n	8015cf2 <ip4_input+0x272>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8015c04:	69fb      	ldr	r3, [r7, #28]
 8015c06:	88db      	ldrh	r3, [r3, #6]
 8015c08:	b29b      	uxth	r3, r3
 8015c0a:	461a      	mov	r2, r3
 8015c0c:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8015c10:	4013      	ands	r3, r2
 8015c12:	2b00      	cmp	r3, #0
 8015c14:	d00b      	beq.n	8015c2e <ip4_input+0x1ae>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8015c16:	6878      	ldr	r0, [r7, #4]
 8015c18:	f000 fc92 	bl	8016540 <ip4_reass>
 8015c1c:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8015c1e:	687b      	ldr	r3, [r7, #4]
 8015c20:	2b00      	cmp	r3, #0
 8015c22:	d101      	bne.n	8015c28 <ip4_input+0x1a8>
      return ERR_OK;
 8015c24:	2300      	movs	r3, #0
 8015c26:	e064      	b.n	8015cf2 <ip4_input+0x272>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8015c28:	687b      	ldr	r3, [r7, #4]
 8015c2a:	685b      	ldr	r3, [r3, #4]
 8015c2c:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8015c2e:	4a33      	ldr	r2, [pc, #204]	; (8015cfc <ip4_input+0x27c>)
 8015c30:	69bb      	ldr	r3, [r7, #24]
 8015c32:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8015c34:	4a31      	ldr	r2, [pc, #196]	; (8015cfc <ip4_input+0x27c>)
 8015c36:	683b      	ldr	r3, [r7, #0]
 8015c38:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8015c3a:	4a30      	ldr	r2, [pc, #192]	; (8015cfc <ip4_input+0x27c>)
 8015c3c:	69fb      	ldr	r3, [r7, #28]
 8015c3e:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8015c40:	69fb      	ldr	r3, [r7, #28]
 8015c42:	781b      	ldrb	r3, [r3, #0]
 8015c44:	f003 030f 	and.w	r3, r3, #15
 8015c48:	b2db      	uxtb	r3, r3
 8015c4a:	009b      	lsls	r3, r3, #2
 8015c4c:	b2db      	uxtb	r3, r3
 8015c4e:	b29a      	uxth	r2, r3
 8015c50:	4b2a      	ldr	r3, [pc, #168]	; (8015cfc <ip4_input+0x27c>)
 8015c52:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8015c54:	8a7b      	ldrh	r3, [r7, #18]
 8015c56:	4619      	mov	r1, r3
 8015c58:	6878      	ldr	r0, [r7, #4]
 8015c5a:	f7f6 fd05 	bl	800c668 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8015c5e:	69fb      	ldr	r3, [r7, #28]
 8015c60:	7a5b      	ldrb	r3, [r3, #9]
 8015c62:	2b11      	cmp	r3, #17
 8015c64:	d006      	beq.n	8015c74 <ip4_input+0x1f4>
 8015c66:	2b11      	cmp	r3, #17
 8015c68:	dc13      	bgt.n	8015c92 <ip4_input+0x212>
 8015c6a:	2b01      	cmp	r3, #1
 8015c6c:	d00c      	beq.n	8015c88 <ip4_input+0x208>
 8015c6e:	2b06      	cmp	r3, #6
 8015c70:	d005      	beq.n	8015c7e <ip4_input+0x1fe>
 8015c72:	e00e      	b.n	8015c92 <ip4_input+0x212>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8015c74:	6839      	ldr	r1, [r7, #0]
 8015c76:	6878      	ldr	r0, [r7, #4]
 8015c78:	f7fc fb26 	bl	80122c8 <udp_input>
        break;
 8015c7c:	e026      	b.n	8015ccc <ip4_input+0x24c>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8015c7e:	6839      	ldr	r1, [r7, #0]
 8015c80:	6878      	ldr	r0, [r7, #4]
 8015c82:	f7f8 fbaf 	bl	800e3e4 <tcp_input>
        break;
 8015c86:	e021      	b.n	8015ccc <ip4_input+0x24c>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8015c88:	6839      	ldr	r1, [r7, #0]
 8015c8a:	6878      	ldr	r0, [r7, #4]
 8015c8c:	f7ff fcd0 	bl	8015630 <icmp_input>
        break;
 8015c90:	e01c      	b.n	8015ccc <ip4_input+0x24c>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8015c92:	4b1a      	ldr	r3, [pc, #104]	; (8015cfc <ip4_input+0x27c>)
 8015c94:	695b      	ldr	r3, [r3, #20]
 8015c96:	69b9      	ldr	r1, [r7, #24]
 8015c98:	4618      	mov	r0, r3
 8015c9a:	f000 f90b 	bl	8015eb4 <ip4_addr_isbroadcast_u32>
 8015c9e:	4603      	mov	r3, r0
 8015ca0:	2b00      	cmp	r3, #0
 8015ca2:	d10f      	bne.n	8015cc4 <ip4_input+0x244>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8015ca4:	4b15      	ldr	r3, [pc, #84]	; (8015cfc <ip4_input+0x27c>)
 8015ca6:	695b      	ldr	r3, [r3, #20]
 8015ca8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8015cac:	2be0      	cmp	r3, #224	; 0xe0
 8015cae:	d009      	beq.n	8015cc4 <ip4_input+0x244>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8015cb0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8015cb4:	4619      	mov	r1, r3
 8015cb6:	6878      	ldr	r0, [r7, #4]
 8015cb8:	f7f6 fd49 	bl	800c74e <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8015cbc:	2102      	movs	r1, #2
 8015cbe:	6878      	ldr	r0, [r7, #4]
 8015cc0:	f7ff fdba 	bl	8015838 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8015cc4:	6878      	ldr	r0, [r7, #4]
 8015cc6:	f7f6 fd55 	bl	800c774 <pbuf_free>
        break;
 8015cca:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8015ccc:	4b0b      	ldr	r3, [pc, #44]	; (8015cfc <ip4_input+0x27c>)
 8015cce:	2200      	movs	r2, #0
 8015cd0:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8015cd2:	4b0a      	ldr	r3, [pc, #40]	; (8015cfc <ip4_input+0x27c>)
 8015cd4:	2200      	movs	r2, #0
 8015cd6:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8015cd8:	4b08      	ldr	r3, [pc, #32]	; (8015cfc <ip4_input+0x27c>)
 8015cda:	2200      	movs	r2, #0
 8015cdc:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8015cde:	4b07      	ldr	r3, [pc, #28]	; (8015cfc <ip4_input+0x27c>)
 8015ce0:	2200      	movs	r2, #0
 8015ce2:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8015ce4:	4b05      	ldr	r3, [pc, #20]	; (8015cfc <ip4_input+0x27c>)
 8015ce6:	2200      	movs	r2, #0
 8015ce8:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8015cea:	4b04      	ldr	r3, [pc, #16]	; (8015cfc <ip4_input+0x27c>)
 8015cec:	2200      	movs	r2, #0
 8015cee:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8015cf0:	2300      	movs	r3, #0
}
 8015cf2:	4618      	mov	r0, r3
 8015cf4:	3720      	adds	r7, #32
 8015cf6:	46bd      	mov	sp, r7
 8015cf8:	bd80      	pop	{r7, pc}
 8015cfa:	bf00      	nop
 8015cfc:	20003d18 	.word	0x20003d18
 8015d00:	20006e2c 	.word	0x20006e2c

08015d04 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8015d04:	b580      	push	{r7, lr}
 8015d06:	b08a      	sub	sp, #40	; 0x28
 8015d08:	af04      	add	r7, sp, #16
 8015d0a:	60f8      	str	r0, [r7, #12]
 8015d0c:	60b9      	str	r1, [r7, #8]
 8015d0e:	607a      	str	r2, [r7, #4]
 8015d10:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8015d12:	68bb      	ldr	r3, [r7, #8]
 8015d14:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8015d16:	687b      	ldr	r3, [r7, #4]
 8015d18:	2b00      	cmp	r3, #0
 8015d1a:	d009      	beq.n	8015d30 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8015d1c:	68bb      	ldr	r3, [r7, #8]
 8015d1e:	2b00      	cmp	r3, #0
 8015d20:	d003      	beq.n	8015d2a <ip4_output_if+0x26>
 8015d22:	68bb      	ldr	r3, [r7, #8]
 8015d24:	681b      	ldr	r3, [r3, #0]
 8015d26:	2b00      	cmp	r3, #0
 8015d28:	d102      	bne.n	8015d30 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8015d2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d2c:	3304      	adds	r3, #4
 8015d2e:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8015d30:	78fa      	ldrb	r2, [r7, #3]
 8015d32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d34:	9302      	str	r3, [sp, #8]
 8015d36:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8015d3a:	9301      	str	r3, [sp, #4]
 8015d3c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8015d40:	9300      	str	r3, [sp, #0]
 8015d42:	4613      	mov	r3, r2
 8015d44:	687a      	ldr	r2, [r7, #4]
 8015d46:	6979      	ldr	r1, [r7, #20]
 8015d48:	68f8      	ldr	r0, [r7, #12]
 8015d4a:	f000 f805 	bl	8015d58 <ip4_output_if_src>
 8015d4e:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8015d50:	4618      	mov	r0, r3
 8015d52:	3718      	adds	r7, #24
 8015d54:	46bd      	mov	sp, r7
 8015d56:	bd80      	pop	{r7, pc}

08015d58 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8015d58:	b580      	push	{r7, lr}
 8015d5a:	b088      	sub	sp, #32
 8015d5c:	af00      	add	r7, sp, #0
 8015d5e:	60f8      	str	r0, [r7, #12]
 8015d60:	60b9      	str	r1, [r7, #8]
 8015d62:	607a      	str	r2, [r7, #4]
 8015d64:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8015d66:	68fb      	ldr	r3, [r7, #12]
 8015d68:	7b9b      	ldrb	r3, [r3, #14]
 8015d6a:	2b01      	cmp	r3, #1
 8015d6c:	d006      	beq.n	8015d7c <ip4_output_if_src+0x24>
 8015d6e:	4b4b      	ldr	r3, [pc, #300]	; (8015e9c <ip4_output_if_src+0x144>)
 8015d70:	f44f 7255 	mov.w	r2, #852	; 0x354
 8015d74:	494a      	ldr	r1, [pc, #296]	; (8015ea0 <ip4_output_if_src+0x148>)
 8015d76:	484b      	ldr	r0, [pc, #300]	; (8015ea4 <ip4_output_if_src+0x14c>)
 8015d78:	f001 fd7a 	bl	8017870 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8015d7c:	687b      	ldr	r3, [r7, #4]
 8015d7e:	2b00      	cmp	r3, #0
 8015d80:	d060      	beq.n	8015e44 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8015d82:	2314      	movs	r3, #20
 8015d84:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8015d86:	2114      	movs	r1, #20
 8015d88:	68f8      	ldr	r0, [r7, #12]
 8015d8a:	f7f6 fc5d 	bl	800c648 <pbuf_add_header>
 8015d8e:	4603      	mov	r3, r0
 8015d90:	2b00      	cmp	r3, #0
 8015d92:	d002      	beq.n	8015d9a <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8015d94:	f06f 0301 	mvn.w	r3, #1
 8015d98:	e07c      	b.n	8015e94 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8015d9a:	68fb      	ldr	r3, [r7, #12]
 8015d9c:	685b      	ldr	r3, [r3, #4]
 8015d9e:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8015da0:	68fb      	ldr	r3, [r7, #12]
 8015da2:	895b      	ldrh	r3, [r3, #10]
 8015da4:	2b13      	cmp	r3, #19
 8015da6:	d806      	bhi.n	8015db6 <ip4_output_if_src+0x5e>
 8015da8:	4b3c      	ldr	r3, [pc, #240]	; (8015e9c <ip4_output_if_src+0x144>)
 8015daa:	f44f 7262 	mov.w	r2, #904	; 0x388
 8015dae:	493e      	ldr	r1, [pc, #248]	; (8015ea8 <ip4_output_if_src+0x150>)
 8015db0:	483c      	ldr	r0, [pc, #240]	; (8015ea4 <ip4_output_if_src+0x14c>)
 8015db2:	f001 fd5d 	bl	8017870 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8015db6:	69fb      	ldr	r3, [r7, #28]
 8015db8:	78fa      	ldrb	r2, [r7, #3]
 8015dba:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8015dbc:	69fb      	ldr	r3, [r7, #28]
 8015dbe:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8015dc2:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8015dc4:	687b      	ldr	r3, [r7, #4]
 8015dc6:	681a      	ldr	r2, [r3, #0]
 8015dc8:	69fb      	ldr	r3, [r7, #28]
 8015dca:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8015dcc:	8b7b      	ldrh	r3, [r7, #26]
 8015dce:	089b      	lsrs	r3, r3, #2
 8015dd0:	b29b      	uxth	r3, r3
 8015dd2:	b2db      	uxtb	r3, r3
 8015dd4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015dd8:	b2da      	uxtb	r2, r3
 8015dda:	69fb      	ldr	r3, [r7, #28]
 8015ddc:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8015dde:	69fb      	ldr	r3, [r7, #28]
 8015de0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8015de4:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8015de6:	68fb      	ldr	r3, [r7, #12]
 8015de8:	891b      	ldrh	r3, [r3, #8]
 8015dea:	4618      	mov	r0, r3
 8015dec:	f7f5 fa26 	bl	800b23c <lwip_htons>
 8015df0:	4603      	mov	r3, r0
 8015df2:	461a      	mov	r2, r3
 8015df4:	69fb      	ldr	r3, [r7, #28]
 8015df6:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8015df8:	69fb      	ldr	r3, [r7, #28]
 8015dfa:	2200      	movs	r2, #0
 8015dfc:	719a      	strb	r2, [r3, #6]
 8015dfe:	2200      	movs	r2, #0
 8015e00:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8015e02:	4b2a      	ldr	r3, [pc, #168]	; (8015eac <ip4_output_if_src+0x154>)
 8015e04:	881b      	ldrh	r3, [r3, #0]
 8015e06:	4618      	mov	r0, r3
 8015e08:	f7f5 fa18 	bl	800b23c <lwip_htons>
 8015e0c:	4603      	mov	r3, r0
 8015e0e:	461a      	mov	r2, r3
 8015e10:	69fb      	ldr	r3, [r7, #28]
 8015e12:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8015e14:	4b25      	ldr	r3, [pc, #148]	; (8015eac <ip4_output_if_src+0x154>)
 8015e16:	881b      	ldrh	r3, [r3, #0]
 8015e18:	3301      	adds	r3, #1
 8015e1a:	b29a      	uxth	r2, r3
 8015e1c:	4b23      	ldr	r3, [pc, #140]	; (8015eac <ip4_output_if_src+0x154>)
 8015e1e:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8015e20:	68bb      	ldr	r3, [r7, #8]
 8015e22:	2b00      	cmp	r3, #0
 8015e24:	d104      	bne.n	8015e30 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8015e26:	4b22      	ldr	r3, [pc, #136]	; (8015eb0 <ip4_output_if_src+0x158>)
 8015e28:	681a      	ldr	r2, [r3, #0]
 8015e2a:	69fb      	ldr	r3, [r7, #28]
 8015e2c:	60da      	str	r2, [r3, #12]
 8015e2e:	e003      	b.n	8015e38 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8015e30:	68bb      	ldr	r3, [r7, #8]
 8015e32:	681a      	ldr	r2, [r3, #0]
 8015e34:	69fb      	ldr	r3, [r7, #28]
 8015e36:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8015e38:	69fb      	ldr	r3, [r7, #28]
 8015e3a:	2200      	movs	r2, #0
 8015e3c:	729a      	strb	r2, [r3, #10]
 8015e3e:	2200      	movs	r2, #0
 8015e40:	72da      	strb	r2, [r3, #11]
 8015e42:	e00f      	b.n	8015e64 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8015e44:	68fb      	ldr	r3, [r7, #12]
 8015e46:	895b      	ldrh	r3, [r3, #10]
 8015e48:	2b13      	cmp	r3, #19
 8015e4a:	d802      	bhi.n	8015e52 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8015e4c:	f06f 0301 	mvn.w	r3, #1
 8015e50:	e020      	b.n	8015e94 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8015e52:	68fb      	ldr	r3, [r7, #12]
 8015e54:	685b      	ldr	r3, [r3, #4]
 8015e56:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8015e58:	69fb      	ldr	r3, [r7, #28]
 8015e5a:	691b      	ldr	r3, [r3, #16]
 8015e5c:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8015e5e:	f107 0314 	add.w	r3, r7, #20
 8015e62:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8015e64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015e68:	2b00      	cmp	r3, #0
 8015e6a:	d00c      	beq.n	8015e86 <ip4_output_if_src+0x12e>
 8015e6c:	68fb      	ldr	r3, [r7, #12]
 8015e6e:	891a      	ldrh	r2, [r3, #8]
 8015e70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015e74:	429a      	cmp	r2, r3
 8015e76:	d906      	bls.n	8015e86 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8015e78:	687a      	ldr	r2, [r7, #4]
 8015e7a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8015e7c:	68f8      	ldr	r0, [r7, #12]
 8015e7e:	f000 fd4d 	bl	801691c <ip4_frag>
 8015e82:	4603      	mov	r3, r0
 8015e84:	e006      	b.n	8015e94 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8015e86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e88:	695b      	ldr	r3, [r3, #20]
 8015e8a:	687a      	ldr	r2, [r7, #4]
 8015e8c:	68f9      	ldr	r1, [r7, #12]
 8015e8e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015e90:	4798      	blx	r3
 8015e92:	4603      	mov	r3, r0
}
 8015e94:	4618      	mov	r0, r3
 8015e96:	3720      	adds	r7, #32
 8015e98:	46bd      	mov	sp, r7
 8015e9a:	bd80      	pop	{r7, pc}
 8015e9c:	0801f66c 	.word	0x0801f66c
 8015ea0:	0801f6a0 	.word	0x0801f6a0
 8015ea4:	0801f6ac 	.word	0x0801f6ac
 8015ea8:	0801f6d4 	.word	0x0801f6d4
 8015eac:	20000596 	.word	0x20000596
 8015eb0:	0801fac8 	.word	0x0801fac8

08015eb4 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8015eb4:	b480      	push	{r7}
 8015eb6:	b085      	sub	sp, #20
 8015eb8:	af00      	add	r7, sp, #0
 8015eba:	6078      	str	r0, [r7, #4]
 8015ebc:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8015ebe:	687b      	ldr	r3, [r7, #4]
 8015ec0:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8015ec2:	687b      	ldr	r3, [r7, #4]
 8015ec4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015ec8:	d002      	beq.n	8015ed0 <ip4_addr_isbroadcast_u32+0x1c>
 8015eca:	687b      	ldr	r3, [r7, #4]
 8015ecc:	2b00      	cmp	r3, #0
 8015ece:	d101      	bne.n	8015ed4 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8015ed0:	2301      	movs	r3, #1
 8015ed2:	e02a      	b.n	8015f2a <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8015ed4:	683b      	ldr	r3, [r7, #0]
 8015ed6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8015eda:	f003 0302 	and.w	r3, r3, #2
 8015ede:	2b00      	cmp	r3, #0
 8015ee0:	d101      	bne.n	8015ee6 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8015ee2:	2300      	movs	r3, #0
 8015ee4:	e021      	b.n	8015f2a <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8015ee6:	683b      	ldr	r3, [r7, #0]
 8015ee8:	3304      	adds	r3, #4
 8015eea:	681b      	ldr	r3, [r3, #0]
 8015eec:	687a      	ldr	r2, [r7, #4]
 8015eee:	429a      	cmp	r2, r3
 8015ef0:	d101      	bne.n	8015ef6 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8015ef2:	2300      	movs	r3, #0
 8015ef4:	e019      	b.n	8015f2a <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8015ef6:	68fa      	ldr	r2, [r7, #12]
 8015ef8:	683b      	ldr	r3, [r7, #0]
 8015efa:	3304      	adds	r3, #4
 8015efc:	681b      	ldr	r3, [r3, #0]
 8015efe:	405a      	eors	r2, r3
 8015f00:	683b      	ldr	r3, [r7, #0]
 8015f02:	3308      	adds	r3, #8
 8015f04:	681b      	ldr	r3, [r3, #0]
 8015f06:	4013      	ands	r3, r2
 8015f08:	2b00      	cmp	r3, #0
 8015f0a:	d10d      	bne.n	8015f28 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8015f0c:	683b      	ldr	r3, [r7, #0]
 8015f0e:	3308      	adds	r3, #8
 8015f10:	681b      	ldr	r3, [r3, #0]
 8015f12:	43da      	mvns	r2, r3
 8015f14:	687b      	ldr	r3, [r7, #4]
 8015f16:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8015f18:	683b      	ldr	r3, [r7, #0]
 8015f1a:	3308      	adds	r3, #8
 8015f1c:	681b      	ldr	r3, [r3, #0]
 8015f1e:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8015f20:	429a      	cmp	r2, r3
 8015f22:	d101      	bne.n	8015f28 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8015f24:	2301      	movs	r3, #1
 8015f26:	e000      	b.n	8015f2a <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8015f28:	2300      	movs	r3, #0
  }
}
 8015f2a:	4618      	mov	r0, r3
 8015f2c:	3714      	adds	r7, #20
 8015f2e:	46bd      	mov	sp, r7
 8015f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f34:	4770      	bx	lr
	...

08015f38 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8015f38:	b580      	push	{r7, lr}
 8015f3a:	b084      	sub	sp, #16
 8015f3c:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8015f3e:	2300      	movs	r3, #0
 8015f40:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8015f42:	4b12      	ldr	r3, [pc, #72]	; (8015f8c <ip_reass_tmr+0x54>)
 8015f44:	681b      	ldr	r3, [r3, #0]
 8015f46:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8015f48:	e018      	b.n	8015f7c <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8015f4a:	68fb      	ldr	r3, [r7, #12]
 8015f4c:	7fdb      	ldrb	r3, [r3, #31]
 8015f4e:	2b00      	cmp	r3, #0
 8015f50:	d00b      	beq.n	8015f6a <ip_reass_tmr+0x32>
      r->timer--;
 8015f52:	68fb      	ldr	r3, [r7, #12]
 8015f54:	7fdb      	ldrb	r3, [r3, #31]
 8015f56:	3b01      	subs	r3, #1
 8015f58:	b2da      	uxtb	r2, r3
 8015f5a:	68fb      	ldr	r3, [r7, #12]
 8015f5c:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8015f5e:	68fb      	ldr	r3, [r7, #12]
 8015f60:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8015f62:	68fb      	ldr	r3, [r7, #12]
 8015f64:	681b      	ldr	r3, [r3, #0]
 8015f66:	60fb      	str	r3, [r7, #12]
 8015f68:	e008      	b.n	8015f7c <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8015f6a:	68fb      	ldr	r3, [r7, #12]
 8015f6c:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8015f6e:	68fb      	ldr	r3, [r7, #12]
 8015f70:	681b      	ldr	r3, [r3, #0]
 8015f72:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8015f74:	68b9      	ldr	r1, [r7, #8]
 8015f76:	6878      	ldr	r0, [r7, #4]
 8015f78:	f000 f80a 	bl	8015f90 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8015f7c:	68fb      	ldr	r3, [r7, #12]
 8015f7e:	2b00      	cmp	r3, #0
 8015f80:	d1e3      	bne.n	8015f4a <ip_reass_tmr+0x12>
    }
  }
}
 8015f82:	bf00      	nop
 8015f84:	bf00      	nop
 8015f86:	3710      	adds	r7, #16
 8015f88:	46bd      	mov	sp, r7
 8015f8a:	bd80      	pop	{r7, pc}
 8015f8c:	20000598 	.word	0x20000598

08015f90 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8015f90:	b580      	push	{r7, lr}
 8015f92:	b088      	sub	sp, #32
 8015f94:	af00      	add	r7, sp, #0
 8015f96:	6078      	str	r0, [r7, #4]
 8015f98:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8015f9a:	2300      	movs	r3, #0
 8015f9c:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8015f9e:	683a      	ldr	r2, [r7, #0]
 8015fa0:	687b      	ldr	r3, [r7, #4]
 8015fa2:	429a      	cmp	r2, r3
 8015fa4:	d105      	bne.n	8015fb2 <ip_reass_free_complete_datagram+0x22>
 8015fa6:	4b45      	ldr	r3, [pc, #276]	; (80160bc <ip_reass_free_complete_datagram+0x12c>)
 8015fa8:	22ab      	movs	r2, #171	; 0xab
 8015faa:	4945      	ldr	r1, [pc, #276]	; (80160c0 <ip_reass_free_complete_datagram+0x130>)
 8015fac:	4845      	ldr	r0, [pc, #276]	; (80160c4 <ip_reass_free_complete_datagram+0x134>)
 8015fae:	f001 fc5f 	bl	8017870 <iprintf>
  if (prev != NULL) {
 8015fb2:	683b      	ldr	r3, [r7, #0]
 8015fb4:	2b00      	cmp	r3, #0
 8015fb6:	d00a      	beq.n	8015fce <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8015fb8:	683b      	ldr	r3, [r7, #0]
 8015fba:	681b      	ldr	r3, [r3, #0]
 8015fbc:	687a      	ldr	r2, [r7, #4]
 8015fbe:	429a      	cmp	r2, r3
 8015fc0:	d005      	beq.n	8015fce <ip_reass_free_complete_datagram+0x3e>
 8015fc2:	4b3e      	ldr	r3, [pc, #248]	; (80160bc <ip_reass_free_complete_datagram+0x12c>)
 8015fc4:	22ad      	movs	r2, #173	; 0xad
 8015fc6:	4940      	ldr	r1, [pc, #256]	; (80160c8 <ip_reass_free_complete_datagram+0x138>)
 8015fc8:	483e      	ldr	r0, [pc, #248]	; (80160c4 <ip_reass_free_complete_datagram+0x134>)
 8015fca:	f001 fc51 	bl	8017870 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8015fce:	687b      	ldr	r3, [r7, #4]
 8015fd0:	685b      	ldr	r3, [r3, #4]
 8015fd2:	685b      	ldr	r3, [r3, #4]
 8015fd4:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8015fd6:	697b      	ldr	r3, [r7, #20]
 8015fd8:	889b      	ldrh	r3, [r3, #4]
 8015fda:	b29b      	uxth	r3, r3
 8015fdc:	2b00      	cmp	r3, #0
 8015fde:	d12a      	bne.n	8016036 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8015fe0:	687b      	ldr	r3, [r7, #4]
 8015fe2:	685b      	ldr	r3, [r3, #4]
 8015fe4:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8015fe6:	697b      	ldr	r3, [r7, #20]
 8015fe8:	681a      	ldr	r2, [r3, #0]
 8015fea:	687b      	ldr	r3, [r7, #4]
 8015fec:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8015fee:	69bb      	ldr	r3, [r7, #24]
 8015ff0:	6858      	ldr	r0, [r3, #4]
 8015ff2:	687b      	ldr	r3, [r7, #4]
 8015ff4:	3308      	adds	r3, #8
 8015ff6:	2214      	movs	r2, #20
 8015ff8:	4619      	mov	r1, r3
 8015ffa:	f000 fef5 	bl	8016de8 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8015ffe:	2101      	movs	r1, #1
 8016000:	69b8      	ldr	r0, [r7, #24]
 8016002:	f7ff fc29 	bl	8015858 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8016006:	69b8      	ldr	r0, [r7, #24]
 8016008:	f7f6 fc3c 	bl	800c884 <pbuf_clen>
 801600c:	4603      	mov	r3, r0
 801600e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8016010:	8bfa      	ldrh	r2, [r7, #30]
 8016012:	8a7b      	ldrh	r3, [r7, #18]
 8016014:	4413      	add	r3, r2
 8016016:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801601a:	db05      	blt.n	8016028 <ip_reass_free_complete_datagram+0x98>
 801601c:	4b27      	ldr	r3, [pc, #156]	; (80160bc <ip_reass_free_complete_datagram+0x12c>)
 801601e:	22bc      	movs	r2, #188	; 0xbc
 8016020:	492a      	ldr	r1, [pc, #168]	; (80160cc <ip_reass_free_complete_datagram+0x13c>)
 8016022:	4828      	ldr	r0, [pc, #160]	; (80160c4 <ip_reass_free_complete_datagram+0x134>)
 8016024:	f001 fc24 	bl	8017870 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8016028:	8bfa      	ldrh	r2, [r7, #30]
 801602a:	8a7b      	ldrh	r3, [r7, #18]
 801602c:	4413      	add	r3, r2
 801602e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8016030:	69b8      	ldr	r0, [r7, #24]
 8016032:	f7f6 fb9f 	bl	800c774 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8016036:	687b      	ldr	r3, [r7, #4]
 8016038:	685b      	ldr	r3, [r3, #4]
 801603a:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 801603c:	e01f      	b.n	801607e <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801603e:	69bb      	ldr	r3, [r7, #24]
 8016040:	685b      	ldr	r3, [r3, #4]
 8016042:	617b      	str	r3, [r7, #20]
    pcur = p;
 8016044:	69bb      	ldr	r3, [r7, #24]
 8016046:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8016048:	697b      	ldr	r3, [r7, #20]
 801604a:	681b      	ldr	r3, [r3, #0]
 801604c:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801604e:	68f8      	ldr	r0, [r7, #12]
 8016050:	f7f6 fc18 	bl	800c884 <pbuf_clen>
 8016054:	4603      	mov	r3, r0
 8016056:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8016058:	8bfa      	ldrh	r2, [r7, #30]
 801605a:	8a7b      	ldrh	r3, [r7, #18]
 801605c:	4413      	add	r3, r2
 801605e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8016062:	db05      	blt.n	8016070 <ip_reass_free_complete_datagram+0xe0>
 8016064:	4b15      	ldr	r3, [pc, #84]	; (80160bc <ip_reass_free_complete_datagram+0x12c>)
 8016066:	22cc      	movs	r2, #204	; 0xcc
 8016068:	4918      	ldr	r1, [pc, #96]	; (80160cc <ip_reass_free_complete_datagram+0x13c>)
 801606a:	4816      	ldr	r0, [pc, #88]	; (80160c4 <ip_reass_free_complete_datagram+0x134>)
 801606c:	f001 fc00 	bl	8017870 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8016070:	8bfa      	ldrh	r2, [r7, #30]
 8016072:	8a7b      	ldrh	r3, [r7, #18]
 8016074:	4413      	add	r3, r2
 8016076:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8016078:	68f8      	ldr	r0, [r7, #12]
 801607a:	f7f6 fb7b 	bl	800c774 <pbuf_free>
  while (p != NULL) {
 801607e:	69bb      	ldr	r3, [r7, #24]
 8016080:	2b00      	cmp	r3, #0
 8016082:	d1dc      	bne.n	801603e <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8016084:	6839      	ldr	r1, [r7, #0]
 8016086:	6878      	ldr	r0, [r7, #4]
 8016088:	f000 f8c2 	bl	8016210 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 801608c:	4b10      	ldr	r3, [pc, #64]	; (80160d0 <ip_reass_free_complete_datagram+0x140>)
 801608e:	881b      	ldrh	r3, [r3, #0]
 8016090:	8bfa      	ldrh	r2, [r7, #30]
 8016092:	429a      	cmp	r2, r3
 8016094:	d905      	bls.n	80160a2 <ip_reass_free_complete_datagram+0x112>
 8016096:	4b09      	ldr	r3, [pc, #36]	; (80160bc <ip_reass_free_complete_datagram+0x12c>)
 8016098:	22d2      	movs	r2, #210	; 0xd2
 801609a:	490e      	ldr	r1, [pc, #56]	; (80160d4 <ip_reass_free_complete_datagram+0x144>)
 801609c:	4809      	ldr	r0, [pc, #36]	; (80160c4 <ip_reass_free_complete_datagram+0x134>)
 801609e:	f001 fbe7 	bl	8017870 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 80160a2:	4b0b      	ldr	r3, [pc, #44]	; (80160d0 <ip_reass_free_complete_datagram+0x140>)
 80160a4:	881a      	ldrh	r2, [r3, #0]
 80160a6:	8bfb      	ldrh	r3, [r7, #30]
 80160a8:	1ad3      	subs	r3, r2, r3
 80160aa:	b29a      	uxth	r2, r3
 80160ac:	4b08      	ldr	r3, [pc, #32]	; (80160d0 <ip_reass_free_complete_datagram+0x140>)
 80160ae:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 80160b0:	8bfb      	ldrh	r3, [r7, #30]
}
 80160b2:	4618      	mov	r0, r3
 80160b4:	3720      	adds	r7, #32
 80160b6:	46bd      	mov	sp, r7
 80160b8:	bd80      	pop	{r7, pc}
 80160ba:	bf00      	nop
 80160bc:	0801f704 	.word	0x0801f704
 80160c0:	0801f740 	.word	0x0801f740
 80160c4:	0801f74c 	.word	0x0801f74c
 80160c8:	0801f774 	.word	0x0801f774
 80160cc:	0801f788 	.word	0x0801f788
 80160d0:	2000059c 	.word	0x2000059c
 80160d4:	0801f7a8 	.word	0x0801f7a8

080160d8 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 80160d8:	b580      	push	{r7, lr}
 80160da:	b08a      	sub	sp, #40	; 0x28
 80160dc:	af00      	add	r7, sp, #0
 80160de:	6078      	str	r0, [r7, #4]
 80160e0:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 80160e2:	2300      	movs	r3, #0
 80160e4:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 80160e6:	2300      	movs	r3, #0
 80160e8:	623b      	str	r3, [r7, #32]
    prev = NULL;
 80160ea:	2300      	movs	r3, #0
 80160ec:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 80160ee:	2300      	movs	r3, #0
 80160f0:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 80160f2:	2300      	movs	r3, #0
 80160f4:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 80160f6:	4b28      	ldr	r3, [pc, #160]	; (8016198 <ip_reass_remove_oldest_datagram+0xc0>)
 80160f8:	681b      	ldr	r3, [r3, #0]
 80160fa:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80160fc:	e030      	b.n	8016160 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 80160fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016100:	695a      	ldr	r2, [r3, #20]
 8016102:	687b      	ldr	r3, [r7, #4]
 8016104:	68db      	ldr	r3, [r3, #12]
 8016106:	429a      	cmp	r2, r3
 8016108:	d10c      	bne.n	8016124 <ip_reass_remove_oldest_datagram+0x4c>
 801610a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801610c:	699a      	ldr	r2, [r3, #24]
 801610e:	687b      	ldr	r3, [r7, #4]
 8016110:	691b      	ldr	r3, [r3, #16]
 8016112:	429a      	cmp	r2, r3
 8016114:	d106      	bne.n	8016124 <ip_reass_remove_oldest_datagram+0x4c>
 8016116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016118:	899a      	ldrh	r2, [r3, #12]
 801611a:	687b      	ldr	r3, [r7, #4]
 801611c:	889b      	ldrh	r3, [r3, #4]
 801611e:	b29b      	uxth	r3, r3
 8016120:	429a      	cmp	r2, r3
 8016122:	d014      	beq.n	801614e <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8016124:	693b      	ldr	r3, [r7, #16]
 8016126:	3301      	adds	r3, #1
 8016128:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801612a:	6a3b      	ldr	r3, [r7, #32]
 801612c:	2b00      	cmp	r3, #0
 801612e:	d104      	bne.n	801613a <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8016130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016132:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8016134:	69fb      	ldr	r3, [r7, #28]
 8016136:	61bb      	str	r3, [r7, #24]
 8016138:	e009      	b.n	801614e <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801613a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801613c:	7fda      	ldrb	r2, [r3, #31]
 801613e:	6a3b      	ldr	r3, [r7, #32]
 8016140:	7fdb      	ldrb	r3, [r3, #31]
 8016142:	429a      	cmp	r2, r3
 8016144:	d803      	bhi.n	801614e <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8016146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016148:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801614a:	69fb      	ldr	r3, [r7, #28]
 801614c:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801614e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016150:	681b      	ldr	r3, [r3, #0]
 8016152:	2b00      	cmp	r3, #0
 8016154:	d001      	beq.n	801615a <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8016156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016158:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801615a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801615c:	681b      	ldr	r3, [r3, #0]
 801615e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8016160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016162:	2b00      	cmp	r3, #0
 8016164:	d1cb      	bne.n	80160fe <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8016166:	6a3b      	ldr	r3, [r7, #32]
 8016168:	2b00      	cmp	r3, #0
 801616a:	d008      	beq.n	801617e <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 801616c:	69b9      	ldr	r1, [r7, #24]
 801616e:	6a38      	ldr	r0, [r7, #32]
 8016170:	f7ff ff0e 	bl	8015f90 <ip_reass_free_complete_datagram>
 8016174:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8016176:	697a      	ldr	r2, [r7, #20]
 8016178:	68fb      	ldr	r3, [r7, #12]
 801617a:	4413      	add	r3, r2
 801617c:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801617e:	697a      	ldr	r2, [r7, #20]
 8016180:	683b      	ldr	r3, [r7, #0]
 8016182:	429a      	cmp	r2, r3
 8016184:	da02      	bge.n	801618c <ip_reass_remove_oldest_datagram+0xb4>
 8016186:	693b      	ldr	r3, [r7, #16]
 8016188:	2b01      	cmp	r3, #1
 801618a:	dcac      	bgt.n	80160e6 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 801618c:	697b      	ldr	r3, [r7, #20]
}
 801618e:	4618      	mov	r0, r3
 8016190:	3728      	adds	r7, #40	; 0x28
 8016192:	46bd      	mov	sp, r7
 8016194:	bd80      	pop	{r7, pc}
 8016196:	bf00      	nop
 8016198:	20000598 	.word	0x20000598

0801619c <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 801619c:	b580      	push	{r7, lr}
 801619e:	b084      	sub	sp, #16
 80161a0:	af00      	add	r7, sp, #0
 80161a2:	6078      	str	r0, [r7, #4]
 80161a4:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80161a6:	2004      	movs	r0, #4
 80161a8:	f7f5 fc9e 	bl	800bae8 <memp_malloc>
 80161ac:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 80161ae:	68fb      	ldr	r3, [r7, #12]
 80161b0:	2b00      	cmp	r3, #0
 80161b2:	d110      	bne.n	80161d6 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 80161b4:	6839      	ldr	r1, [r7, #0]
 80161b6:	6878      	ldr	r0, [r7, #4]
 80161b8:	f7ff ff8e 	bl	80160d8 <ip_reass_remove_oldest_datagram>
 80161bc:	4602      	mov	r2, r0
 80161be:	683b      	ldr	r3, [r7, #0]
 80161c0:	4293      	cmp	r3, r2
 80161c2:	dc03      	bgt.n	80161cc <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80161c4:	2004      	movs	r0, #4
 80161c6:	f7f5 fc8f 	bl	800bae8 <memp_malloc>
 80161ca:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 80161cc:	68fb      	ldr	r3, [r7, #12]
 80161ce:	2b00      	cmp	r3, #0
 80161d0:	d101      	bne.n	80161d6 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 80161d2:	2300      	movs	r3, #0
 80161d4:	e016      	b.n	8016204 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 80161d6:	2220      	movs	r2, #32
 80161d8:	2100      	movs	r1, #0
 80161da:	68f8      	ldr	r0, [r7, #12]
 80161dc:	f000 fe2c 	bl	8016e38 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 80161e0:	68fb      	ldr	r3, [r7, #12]
 80161e2:	220f      	movs	r2, #15
 80161e4:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 80161e6:	4b09      	ldr	r3, [pc, #36]	; (801620c <ip_reass_enqueue_new_datagram+0x70>)
 80161e8:	681a      	ldr	r2, [r3, #0]
 80161ea:	68fb      	ldr	r3, [r7, #12]
 80161ec:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 80161ee:	4a07      	ldr	r2, [pc, #28]	; (801620c <ip_reass_enqueue_new_datagram+0x70>)
 80161f0:	68fb      	ldr	r3, [r7, #12]
 80161f2:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 80161f4:	68fb      	ldr	r3, [r7, #12]
 80161f6:	3308      	adds	r3, #8
 80161f8:	2214      	movs	r2, #20
 80161fa:	6879      	ldr	r1, [r7, #4]
 80161fc:	4618      	mov	r0, r3
 80161fe:	f000 fdf3 	bl	8016de8 <memcpy>
  return ipr;
 8016202:	68fb      	ldr	r3, [r7, #12]
}
 8016204:	4618      	mov	r0, r3
 8016206:	3710      	adds	r7, #16
 8016208:	46bd      	mov	sp, r7
 801620a:	bd80      	pop	{r7, pc}
 801620c:	20000598 	.word	0x20000598

08016210 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8016210:	b580      	push	{r7, lr}
 8016212:	b082      	sub	sp, #8
 8016214:	af00      	add	r7, sp, #0
 8016216:	6078      	str	r0, [r7, #4]
 8016218:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801621a:	4b10      	ldr	r3, [pc, #64]	; (801625c <ip_reass_dequeue_datagram+0x4c>)
 801621c:	681b      	ldr	r3, [r3, #0]
 801621e:	687a      	ldr	r2, [r7, #4]
 8016220:	429a      	cmp	r2, r3
 8016222:	d104      	bne.n	801622e <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8016224:	687b      	ldr	r3, [r7, #4]
 8016226:	681b      	ldr	r3, [r3, #0]
 8016228:	4a0c      	ldr	r2, [pc, #48]	; (801625c <ip_reass_dequeue_datagram+0x4c>)
 801622a:	6013      	str	r3, [r2, #0]
 801622c:	e00d      	b.n	801624a <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801622e:	683b      	ldr	r3, [r7, #0]
 8016230:	2b00      	cmp	r3, #0
 8016232:	d106      	bne.n	8016242 <ip_reass_dequeue_datagram+0x32>
 8016234:	4b0a      	ldr	r3, [pc, #40]	; (8016260 <ip_reass_dequeue_datagram+0x50>)
 8016236:	f240 1245 	movw	r2, #325	; 0x145
 801623a:	490a      	ldr	r1, [pc, #40]	; (8016264 <ip_reass_dequeue_datagram+0x54>)
 801623c:	480a      	ldr	r0, [pc, #40]	; (8016268 <ip_reass_dequeue_datagram+0x58>)
 801623e:	f001 fb17 	bl	8017870 <iprintf>
    prev->next = ipr->next;
 8016242:	687b      	ldr	r3, [r7, #4]
 8016244:	681a      	ldr	r2, [r3, #0]
 8016246:	683b      	ldr	r3, [r7, #0]
 8016248:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801624a:	6879      	ldr	r1, [r7, #4]
 801624c:	2004      	movs	r0, #4
 801624e:	f7f5 fc97 	bl	800bb80 <memp_free>
}
 8016252:	bf00      	nop
 8016254:	3708      	adds	r7, #8
 8016256:	46bd      	mov	sp, r7
 8016258:	bd80      	pop	{r7, pc}
 801625a:	bf00      	nop
 801625c:	20000598 	.word	0x20000598
 8016260:	0801f704 	.word	0x0801f704
 8016264:	0801f7cc 	.word	0x0801f7cc
 8016268:	0801f74c 	.word	0x0801f74c

0801626c <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 801626c:	b580      	push	{r7, lr}
 801626e:	b08c      	sub	sp, #48	; 0x30
 8016270:	af00      	add	r7, sp, #0
 8016272:	60f8      	str	r0, [r7, #12]
 8016274:	60b9      	str	r1, [r7, #8]
 8016276:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8016278:	2300      	movs	r3, #0
 801627a:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 801627c:	2301      	movs	r3, #1
 801627e:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8016280:	68bb      	ldr	r3, [r7, #8]
 8016282:	685b      	ldr	r3, [r3, #4]
 8016284:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8016286:	69fb      	ldr	r3, [r7, #28]
 8016288:	885b      	ldrh	r3, [r3, #2]
 801628a:	b29b      	uxth	r3, r3
 801628c:	4618      	mov	r0, r3
 801628e:	f7f4 ffd5 	bl	800b23c <lwip_htons>
 8016292:	4603      	mov	r3, r0
 8016294:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8016296:	69fb      	ldr	r3, [r7, #28]
 8016298:	781b      	ldrb	r3, [r3, #0]
 801629a:	f003 030f 	and.w	r3, r3, #15
 801629e:	b2db      	uxtb	r3, r3
 80162a0:	009b      	lsls	r3, r3, #2
 80162a2:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 80162a4:	7e7b      	ldrb	r3, [r7, #25]
 80162a6:	b29b      	uxth	r3, r3
 80162a8:	8b7a      	ldrh	r2, [r7, #26]
 80162aa:	429a      	cmp	r2, r3
 80162ac:	d202      	bcs.n	80162b4 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80162ae:	f04f 33ff 	mov.w	r3, #4294967295
 80162b2:	e135      	b.n	8016520 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 80162b4:	7e7b      	ldrb	r3, [r7, #25]
 80162b6:	b29b      	uxth	r3, r3
 80162b8:	8b7a      	ldrh	r2, [r7, #26]
 80162ba:	1ad3      	subs	r3, r2, r3
 80162bc:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 80162be:	69fb      	ldr	r3, [r7, #28]
 80162c0:	88db      	ldrh	r3, [r3, #6]
 80162c2:	b29b      	uxth	r3, r3
 80162c4:	4618      	mov	r0, r3
 80162c6:	f7f4 ffb9 	bl	800b23c <lwip_htons>
 80162ca:	4603      	mov	r3, r0
 80162cc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80162d0:	b29b      	uxth	r3, r3
 80162d2:	00db      	lsls	r3, r3, #3
 80162d4:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 80162d6:	68bb      	ldr	r3, [r7, #8]
 80162d8:	685b      	ldr	r3, [r3, #4]
 80162da:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 80162dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80162de:	2200      	movs	r2, #0
 80162e0:	701a      	strb	r2, [r3, #0]
 80162e2:	2200      	movs	r2, #0
 80162e4:	705a      	strb	r2, [r3, #1]
 80162e6:	2200      	movs	r2, #0
 80162e8:	709a      	strb	r2, [r3, #2]
 80162ea:	2200      	movs	r2, #0
 80162ec:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 80162ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80162f0:	8afa      	ldrh	r2, [r7, #22]
 80162f2:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 80162f4:	8afa      	ldrh	r2, [r7, #22]
 80162f6:	8b7b      	ldrh	r3, [r7, #26]
 80162f8:	4413      	add	r3, r2
 80162fa:	b29a      	uxth	r2, r3
 80162fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80162fe:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8016300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016302:	88db      	ldrh	r3, [r3, #6]
 8016304:	b29b      	uxth	r3, r3
 8016306:	8afa      	ldrh	r2, [r7, #22]
 8016308:	429a      	cmp	r2, r3
 801630a:	d902      	bls.n	8016312 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801630c:	f04f 33ff 	mov.w	r3, #4294967295
 8016310:	e106      	b.n	8016520 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8016312:	68fb      	ldr	r3, [r7, #12]
 8016314:	685b      	ldr	r3, [r3, #4]
 8016316:	627b      	str	r3, [r7, #36]	; 0x24
 8016318:	e068      	b.n	80163ec <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801631a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801631c:	685b      	ldr	r3, [r3, #4]
 801631e:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8016320:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016322:	889b      	ldrh	r3, [r3, #4]
 8016324:	b29a      	uxth	r2, r3
 8016326:	693b      	ldr	r3, [r7, #16]
 8016328:	889b      	ldrh	r3, [r3, #4]
 801632a:	b29b      	uxth	r3, r3
 801632c:	429a      	cmp	r2, r3
 801632e:	d235      	bcs.n	801639c <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8016330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016332:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016334:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8016336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016338:	2b00      	cmp	r3, #0
 801633a:	d020      	beq.n	801637e <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 801633c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801633e:	889b      	ldrh	r3, [r3, #4]
 8016340:	b29a      	uxth	r2, r3
 8016342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016344:	88db      	ldrh	r3, [r3, #6]
 8016346:	b29b      	uxth	r3, r3
 8016348:	429a      	cmp	r2, r3
 801634a:	d307      	bcc.n	801635c <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 801634c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801634e:	88db      	ldrh	r3, [r3, #6]
 8016350:	b29a      	uxth	r2, r3
 8016352:	693b      	ldr	r3, [r7, #16]
 8016354:	889b      	ldrh	r3, [r3, #4]
 8016356:	b29b      	uxth	r3, r3
 8016358:	429a      	cmp	r2, r3
 801635a:	d902      	bls.n	8016362 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801635c:	f04f 33ff 	mov.w	r3, #4294967295
 8016360:	e0de      	b.n	8016520 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8016362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016364:	68ba      	ldr	r2, [r7, #8]
 8016366:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8016368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801636a:	88db      	ldrh	r3, [r3, #6]
 801636c:	b29a      	uxth	r2, r3
 801636e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016370:	889b      	ldrh	r3, [r3, #4]
 8016372:	b29b      	uxth	r3, r3
 8016374:	429a      	cmp	r2, r3
 8016376:	d03d      	beq.n	80163f4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8016378:	2300      	movs	r3, #0
 801637a:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 801637c:	e03a      	b.n	80163f4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801637e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016380:	88db      	ldrh	r3, [r3, #6]
 8016382:	b29a      	uxth	r2, r3
 8016384:	693b      	ldr	r3, [r7, #16]
 8016386:	889b      	ldrh	r3, [r3, #4]
 8016388:	b29b      	uxth	r3, r3
 801638a:	429a      	cmp	r2, r3
 801638c:	d902      	bls.n	8016394 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801638e:	f04f 33ff 	mov.w	r3, #4294967295
 8016392:	e0c5      	b.n	8016520 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8016394:	68fb      	ldr	r3, [r7, #12]
 8016396:	68ba      	ldr	r2, [r7, #8]
 8016398:	605a      	str	r2, [r3, #4]
      break;
 801639a:	e02b      	b.n	80163f4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 801639c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801639e:	889b      	ldrh	r3, [r3, #4]
 80163a0:	b29a      	uxth	r2, r3
 80163a2:	693b      	ldr	r3, [r7, #16]
 80163a4:	889b      	ldrh	r3, [r3, #4]
 80163a6:	b29b      	uxth	r3, r3
 80163a8:	429a      	cmp	r2, r3
 80163aa:	d102      	bne.n	80163b2 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80163ac:	f04f 33ff 	mov.w	r3, #4294967295
 80163b0:	e0b6      	b.n	8016520 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 80163b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80163b4:	889b      	ldrh	r3, [r3, #4]
 80163b6:	b29a      	uxth	r2, r3
 80163b8:	693b      	ldr	r3, [r7, #16]
 80163ba:	88db      	ldrh	r3, [r3, #6]
 80163bc:	b29b      	uxth	r3, r3
 80163be:	429a      	cmp	r2, r3
 80163c0:	d202      	bcs.n	80163c8 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80163c2:	f04f 33ff 	mov.w	r3, #4294967295
 80163c6:	e0ab      	b.n	8016520 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 80163c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80163ca:	2b00      	cmp	r3, #0
 80163cc:	d009      	beq.n	80163e2 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 80163ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80163d0:	88db      	ldrh	r3, [r3, #6]
 80163d2:	b29a      	uxth	r2, r3
 80163d4:	693b      	ldr	r3, [r7, #16]
 80163d6:	889b      	ldrh	r3, [r3, #4]
 80163d8:	b29b      	uxth	r3, r3
 80163da:	429a      	cmp	r2, r3
 80163dc:	d001      	beq.n	80163e2 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80163de:	2300      	movs	r3, #0
 80163e0:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 80163e2:	693b      	ldr	r3, [r7, #16]
 80163e4:	681b      	ldr	r3, [r3, #0]
 80163e6:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 80163e8:	693b      	ldr	r3, [r7, #16]
 80163ea:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 80163ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80163ee:	2b00      	cmp	r3, #0
 80163f0:	d193      	bne.n	801631a <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 80163f2:	e000      	b.n	80163f6 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 80163f4:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 80163f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80163f8:	2b00      	cmp	r3, #0
 80163fa:	d12d      	bne.n	8016458 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 80163fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80163fe:	2b00      	cmp	r3, #0
 8016400:	d01c      	beq.n	801643c <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8016402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016404:	88db      	ldrh	r3, [r3, #6]
 8016406:	b29a      	uxth	r2, r3
 8016408:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801640a:	889b      	ldrh	r3, [r3, #4]
 801640c:	b29b      	uxth	r3, r3
 801640e:	429a      	cmp	r2, r3
 8016410:	d906      	bls.n	8016420 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8016412:	4b45      	ldr	r3, [pc, #276]	; (8016528 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016414:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8016418:	4944      	ldr	r1, [pc, #272]	; (801652c <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801641a:	4845      	ldr	r0, [pc, #276]	; (8016530 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801641c:	f001 fa28 	bl	8017870 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8016420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016422:	68ba      	ldr	r2, [r7, #8]
 8016424:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8016426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016428:	88db      	ldrh	r3, [r3, #6]
 801642a:	b29a      	uxth	r2, r3
 801642c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801642e:	889b      	ldrh	r3, [r3, #4]
 8016430:	b29b      	uxth	r3, r3
 8016432:	429a      	cmp	r2, r3
 8016434:	d010      	beq.n	8016458 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8016436:	2300      	movs	r3, #0
 8016438:	623b      	str	r3, [r7, #32]
 801643a:	e00d      	b.n	8016458 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 801643c:	68fb      	ldr	r3, [r7, #12]
 801643e:	685b      	ldr	r3, [r3, #4]
 8016440:	2b00      	cmp	r3, #0
 8016442:	d006      	beq.n	8016452 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8016444:	4b38      	ldr	r3, [pc, #224]	; (8016528 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016446:	f44f 72df 	mov.w	r2, #446	; 0x1be
 801644a:	493a      	ldr	r1, [pc, #232]	; (8016534 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801644c:	4838      	ldr	r0, [pc, #224]	; (8016530 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801644e:	f001 fa0f 	bl	8017870 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8016452:	68fb      	ldr	r3, [r7, #12]
 8016454:	68ba      	ldr	r2, [r7, #8]
 8016456:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8016458:	687b      	ldr	r3, [r7, #4]
 801645a:	2b00      	cmp	r3, #0
 801645c:	d105      	bne.n	801646a <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801645e:	68fb      	ldr	r3, [r7, #12]
 8016460:	7f9b      	ldrb	r3, [r3, #30]
 8016462:	f003 0301 	and.w	r3, r3, #1
 8016466:	2b00      	cmp	r3, #0
 8016468:	d059      	beq.n	801651e <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801646a:	6a3b      	ldr	r3, [r7, #32]
 801646c:	2b00      	cmp	r3, #0
 801646e:	d04f      	beq.n	8016510 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8016470:	68fb      	ldr	r3, [r7, #12]
 8016472:	685b      	ldr	r3, [r3, #4]
 8016474:	2b00      	cmp	r3, #0
 8016476:	d006      	beq.n	8016486 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8016478:	68fb      	ldr	r3, [r7, #12]
 801647a:	685b      	ldr	r3, [r3, #4]
 801647c:	685b      	ldr	r3, [r3, #4]
 801647e:	889b      	ldrh	r3, [r3, #4]
 8016480:	b29b      	uxth	r3, r3
 8016482:	2b00      	cmp	r3, #0
 8016484:	d002      	beq.n	801648c <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8016486:	2300      	movs	r3, #0
 8016488:	623b      	str	r3, [r7, #32]
 801648a:	e041      	b.n	8016510 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 801648c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801648e:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8016490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016492:	681b      	ldr	r3, [r3, #0]
 8016494:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8016496:	e012      	b.n	80164be <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8016498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801649a:	685b      	ldr	r3, [r3, #4]
 801649c:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 801649e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80164a0:	88db      	ldrh	r3, [r3, #6]
 80164a2:	b29a      	uxth	r2, r3
 80164a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80164a6:	889b      	ldrh	r3, [r3, #4]
 80164a8:	b29b      	uxth	r3, r3
 80164aa:	429a      	cmp	r2, r3
 80164ac:	d002      	beq.n	80164b4 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 80164ae:	2300      	movs	r3, #0
 80164b0:	623b      	str	r3, [r7, #32]
            break;
 80164b2:	e007      	b.n	80164c4 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 80164b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80164b6:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 80164b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80164ba:	681b      	ldr	r3, [r3, #0]
 80164bc:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80164be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80164c0:	2b00      	cmp	r3, #0
 80164c2:	d1e9      	bne.n	8016498 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 80164c4:	6a3b      	ldr	r3, [r7, #32]
 80164c6:	2b00      	cmp	r3, #0
 80164c8:	d022      	beq.n	8016510 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 80164ca:	68fb      	ldr	r3, [r7, #12]
 80164cc:	685b      	ldr	r3, [r3, #4]
 80164ce:	2b00      	cmp	r3, #0
 80164d0:	d106      	bne.n	80164e0 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 80164d2:	4b15      	ldr	r3, [pc, #84]	; (8016528 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80164d4:	f240 12df 	movw	r2, #479	; 0x1df
 80164d8:	4917      	ldr	r1, [pc, #92]	; (8016538 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80164da:	4815      	ldr	r0, [pc, #84]	; (8016530 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80164dc:	f001 f9c8 	bl	8017870 <iprintf>
          LWIP_ASSERT("sanity check",
 80164e0:	68fb      	ldr	r3, [r7, #12]
 80164e2:	685b      	ldr	r3, [r3, #4]
 80164e4:	685b      	ldr	r3, [r3, #4]
 80164e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80164e8:	429a      	cmp	r2, r3
 80164ea:	d106      	bne.n	80164fa <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 80164ec:	4b0e      	ldr	r3, [pc, #56]	; (8016528 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80164ee:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80164f2:	4911      	ldr	r1, [pc, #68]	; (8016538 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80164f4:	480e      	ldr	r0, [pc, #56]	; (8016530 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80164f6:	f001 f9bb 	bl	8017870 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 80164fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80164fc:	681b      	ldr	r3, [r3, #0]
 80164fe:	2b00      	cmp	r3, #0
 8016500:	d006      	beq.n	8016510 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8016502:	4b09      	ldr	r3, [pc, #36]	; (8016528 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016504:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8016508:	490c      	ldr	r1, [pc, #48]	; (801653c <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801650a:	4809      	ldr	r0, [pc, #36]	; (8016530 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801650c:	f001 f9b0 	bl	8017870 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8016510:	6a3b      	ldr	r3, [r7, #32]
 8016512:	2b00      	cmp	r3, #0
 8016514:	bf14      	ite	ne
 8016516:	2301      	movne	r3, #1
 8016518:	2300      	moveq	r3, #0
 801651a:	b2db      	uxtb	r3, r3
 801651c:	e000      	b.n	8016520 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801651e:	2300      	movs	r3, #0
}
 8016520:	4618      	mov	r0, r3
 8016522:	3730      	adds	r7, #48	; 0x30
 8016524:	46bd      	mov	sp, r7
 8016526:	bd80      	pop	{r7, pc}
 8016528:	0801f704 	.word	0x0801f704
 801652c:	0801f7e8 	.word	0x0801f7e8
 8016530:	0801f74c 	.word	0x0801f74c
 8016534:	0801f808 	.word	0x0801f808
 8016538:	0801f840 	.word	0x0801f840
 801653c:	0801f850 	.word	0x0801f850

08016540 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8016540:	b580      	push	{r7, lr}
 8016542:	b08e      	sub	sp, #56	; 0x38
 8016544:	af00      	add	r7, sp, #0
 8016546:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8016548:	687b      	ldr	r3, [r7, #4]
 801654a:	685b      	ldr	r3, [r3, #4]
 801654c:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801654e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016550:	781b      	ldrb	r3, [r3, #0]
 8016552:	f003 030f 	and.w	r3, r3, #15
 8016556:	b2db      	uxtb	r3, r3
 8016558:	009b      	lsls	r3, r3, #2
 801655a:	b2db      	uxtb	r3, r3
 801655c:	2b14      	cmp	r3, #20
 801655e:	f040 8167 	bne.w	8016830 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8016562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016564:	88db      	ldrh	r3, [r3, #6]
 8016566:	b29b      	uxth	r3, r3
 8016568:	4618      	mov	r0, r3
 801656a:	f7f4 fe67 	bl	800b23c <lwip_htons>
 801656e:	4603      	mov	r3, r0
 8016570:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016574:	b29b      	uxth	r3, r3
 8016576:	00db      	lsls	r3, r3, #3
 8016578:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801657a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801657c:	885b      	ldrh	r3, [r3, #2]
 801657e:	b29b      	uxth	r3, r3
 8016580:	4618      	mov	r0, r3
 8016582:	f7f4 fe5b 	bl	800b23c <lwip_htons>
 8016586:	4603      	mov	r3, r0
 8016588:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801658a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801658c:	781b      	ldrb	r3, [r3, #0]
 801658e:	f003 030f 	and.w	r3, r3, #15
 8016592:	b2db      	uxtb	r3, r3
 8016594:	009b      	lsls	r3, r3, #2
 8016596:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 801659a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801659e:	b29b      	uxth	r3, r3
 80165a0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80165a2:	429a      	cmp	r2, r3
 80165a4:	f0c0 8146 	bcc.w	8016834 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 80165a8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80165ac:	b29b      	uxth	r3, r3
 80165ae:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80165b0:	1ad3      	subs	r3, r2, r3
 80165b2:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 80165b4:	6878      	ldr	r0, [r7, #4]
 80165b6:	f7f6 f965 	bl	800c884 <pbuf_clen>
 80165ba:	4603      	mov	r3, r0
 80165bc:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 80165be:	4b9f      	ldr	r3, [pc, #636]	; (801683c <ip4_reass+0x2fc>)
 80165c0:	881b      	ldrh	r3, [r3, #0]
 80165c2:	461a      	mov	r2, r3
 80165c4:	8c3b      	ldrh	r3, [r7, #32]
 80165c6:	4413      	add	r3, r2
 80165c8:	2b0a      	cmp	r3, #10
 80165ca:	dd10      	ble.n	80165ee <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80165cc:	8c3b      	ldrh	r3, [r7, #32]
 80165ce:	4619      	mov	r1, r3
 80165d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80165d2:	f7ff fd81 	bl	80160d8 <ip_reass_remove_oldest_datagram>
 80165d6:	4603      	mov	r3, r0
 80165d8:	2b00      	cmp	r3, #0
 80165da:	f000 812d 	beq.w	8016838 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 80165de:	4b97      	ldr	r3, [pc, #604]	; (801683c <ip4_reass+0x2fc>)
 80165e0:	881b      	ldrh	r3, [r3, #0]
 80165e2:	461a      	mov	r2, r3
 80165e4:	8c3b      	ldrh	r3, [r7, #32]
 80165e6:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80165e8:	2b0a      	cmp	r3, #10
 80165ea:	f300 8125 	bgt.w	8016838 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80165ee:	4b94      	ldr	r3, [pc, #592]	; (8016840 <ip4_reass+0x300>)
 80165f0:	681b      	ldr	r3, [r3, #0]
 80165f2:	633b      	str	r3, [r7, #48]	; 0x30
 80165f4:	e015      	b.n	8016622 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 80165f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80165f8:	695a      	ldr	r2, [r3, #20]
 80165fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80165fc:	68db      	ldr	r3, [r3, #12]
 80165fe:	429a      	cmp	r2, r3
 8016600:	d10c      	bne.n	801661c <ip4_reass+0xdc>
 8016602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016604:	699a      	ldr	r2, [r3, #24]
 8016606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016608:	691b      	ldr	r3, [r3, #16]
 801660a:	429a      	cmp	r2, r3
 801660c:	d106      	bne.n	801661c <ip4_reass+0xdc>
 801660e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016610:	899a      	ldrh	r2, [r3, #12]
 8016612:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016614:	889b      	ldrh	r3, [r3, #4]
 8016616:	b29b      	uxth	r3, r3
 8016618:	429a      	cmp	r2, r3
 801661a:	d006      	beq.n	801662a <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801661c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801661e:	681b      	ldr	r3, [r3, #0]
 8016620:	633b      	str	r3, [r7, #48]	; 0x30
 8016622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016624:	2b00      	cmp	r3, #0
 8016626:	d1e6      	bne.n	80165f6 <ip4_reass+0xb6>
 8016628:	e000      	b.n	801662c <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801662a:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 801662c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801662e:	2b00      	cmp	r3, #0
 8016630:	d109      	bne.n	8016646 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8016632:	8c3b      	ldrh	r3, [r7, #32]
 8016634:	4619      	mov	r1, r3
 8016636:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016638:	f7ff fdb0 	bl	801619c <ip_reass_enqueue_new_datagram>
 801663c:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801663e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016640:	2b00      	cmp	r3, #0
 8016642:	d11c      	bne.n	801667e <ip4_reass+0x13e>
      goto nullreturn;
 8016644:	e109      	b.n	801685a <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8016646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016648:	88db      	ldrh	r3, [r3, #6]
 801664a:	b29b      	uxth	r3, r3
 801664c:	4618      	mov	r0, r3
 801664e:	f7f4 fdf5 	bl	800b23c <lwip_htons>
 8016652:	4603      	mov	r3, r0
 8016654:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016658:	2b00      	cmp	r3, #0
 801665a:	d110      	bne.n	801667e <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801665c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801665e:	89db      	ldrh	r3, [r3, #14]
 8016660:	4618      	mov	r0, r3
 8016662:	f7f4 fdeb 	bl	800b23c <lwip_htons>
 8016666:	4603      	mov	r3, r0
 8016668:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801666c:	2b00      	cmp	r3, #0
 801666e:	d006      	beq.n	801667e <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8016670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016672:	3308      	adds	r3, #8
 8016674:	2214      	movs	r2, #20
 8016676:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8016678:	4618      	mov	r0, r3
 801667a:	f000 fbb5 	bl	8016de8 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801667e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016680:	88db      	ldrh	r3, [r3, #6]
 8016682:	b29b      	uxth	r3, r3
 8016684:	f003 0320 	and.w	r3, r3, #32
 8016688:	2b00      	cmp	r3, #0
 801668a:	bf0c      	ite	eq
 801668c:	2301      	moveq	r3, #1
 801668e:	2300      	movne	r3, #0
 8016690:	b2db      	uxtb	r3, r3
 8016692:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8016694:	69fb      	ldr	r3, [r7, #28]
 8016696:	2b00      	cmp	r3, #0
 8016698:	d00e      	beq.n	80166b8 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801669a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801669c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801669e:	4413      	add	r3, r2
 80166a0:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 80166a2:	8b7a      	ldrh	r2, [r7, #26]
 80166a4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80166a6:	429a      	cmp	r2, r3
 80166a8:	f0c0 80a0 	bcc.w	80167ec <ip4_reass+0x2ac>
 80166ac:	8b7b      	ldrh	r3, [r7, #26]
 80166ae:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 80166b2:	4293      	cmp	r3, r2
 80166b4:	f200 809a 	bhi.w	80167ec <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 80166b8:	69fa      	ldr	r2, [r7, #28]
 80166ba:	6879      	ldr	r1, [r7, #4]
 80166bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80166be:	f7ff fdd5 	bl	801626c <ip_reass_chain_frag_into_datagram_and_validate>
 80166c2:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 80166c4:	697b      	ldr	r3, [r7, #20]
 80166c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80166ca:	f000 8091 	beq.w	80167f0 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80166ce:	4b5b      	ldr	r3, [pc, #364]	; (801683c <ip4_reass+0x2fc>)
 80166d0:	881a      	ldrh	r2, [r3, #0]
 80166d2:	8c3b      	ldrh	r3, [r7, #32]
 80166d4:	4413      	add	r3, r2
 80166d6:	b29a      	uxth	r2, r3
 80166d8:	4b58      	ldr	r3, [pc, #352]	; (801683c <ip4_reass+0x2fc>)
 80166da:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 80166dc:	69fb      	ldr	r3, [r7, #28]
 80166de:	2b00      	cmp	r3, #0
 80166e0:	d00d      	beq.n	80166fe <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 80166e2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80166e4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80166e6:	4413      	add	r3, r2
 80166e8:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 80166ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80166ec:	8a7a      	ldrh	r2, [r7, #18]
 80166ee:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80166f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80166f2:	7f9b      	ldrb	r3, [r3, #30]
 80166f4:	f043 0301 	orr.w	r3, r3, #1
 80166f8:	b2da      	uxtb	r2, r3
 80166fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80166fc:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 80166fe:	697b      	ldr	r3, [r7, #20]
 8016700:	2b01      	cmp	r3, #1
 8016702:	d171      	bne.n	80167e8 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8016704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016706:	8b9b      	ldrh	r3, [r3, #28]
 8016708:	3314      	adds	r3, #20
 801670a:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 801670c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801670e:	685b      	ldr	r3, [r3, #4]
 8016710:	685b      	ldr	r3, [r3, #4]
 8016712:	681b      	ldr	r3, [r3, #0]
 8016714:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8016716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016718:	685b      	ldr	r3, [r3, #4]
 801671a:	685b      	ldr	r3, [r3, #4]
 801671c:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801671e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016720:	3308      	adds	r3, #8
 8016722:	2214      	movs	r2, #20
 8016724:	4619      	mov	r1, r3
 8016726:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016728:	f000 fb5e 	bl	8016de8 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801672c:	8a3b      	ldrh	r3, [r7, #16]
 801672e:	4618      	mov	r0, r3
 8016730:	f7f4 fd84 	bl	800b23c <lwip_htons>
 8016734:	4603      	mov	r3, r0
 8016736:	461a      	mov	r2, r3
 8016738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801673a:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 801673c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801673e:	2200      	movs	r2, #0
 8016740:	719a      	strb	r2, [r3, #6]
 8016742:	2200      	movs	r2, #0
 8016744:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8016746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016748:	2200      	movs	r2, #0
 801674a:	729a      	strb	r2, [r3, #10]
 801674c:	2200      	movs	r2, #0
 801674e:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8016750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016752:	685b      	ldr	r3, [r3, #4]
 8016754:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8016756:	e00d      	b.n	8016774 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8016758:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801675a:	685b      	ldr	r3, [r3, #4]
 801675c:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801675e:	2114      	movs	r1, #20
 8016760:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8016762:	f7f5 ff81 	bl	800c668 <pbuf_remove_header>
      pbuf_cat(p, r);
 8016766:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8016768:	6878      	ldr	r0, [r7, #4]
 801676a:	f7f6 f8c5 	bl	800c8f8 <pbuf_cat>
      r = iprh->next_pbuf;
 801676e:	68fb      	ldr	r3, [r7, #12]
 8016770:	681b      	ldr	r3, [r3, #0]
 8016772:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8016774:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016776:	2b00      	cmp	r3, #0
 8016778:	d1ee      	bne.n	8016758 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801677a:	4b31      	ldr	r3, [pc, #196]	; (8016840 <ip4_reass+0x300>)
 801677c:	681b      	ldr	r3, [r3, #0]
 801677e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016780:	429a      	cmp	r2, r3
 8016782:	d102      	bne.n	801678a <ip4_reass+0x24a>
      ipr_prev = NULL;
 8016784:	2300      	movs	r3, #0
 8016786:	62fb      	str	r3, [r7, #44]	; 0x2c
 8016788:	e010      	b.n	80167ac <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801678a:	4b2d      	ldr	r3, [pc, #180]	; (8016840 <ip4_reass+0x300>)
 801678c:	681b      	ldr	r3, [r3, #0]
 801678e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8016790:	e007      	b.n	80167a2 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8016792:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016794:	681b      	ldr	r3, [r3, #0]
 8016796:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016798:	429a      	cmp	r2, r3
 801679a:	d006      	beq.n	80167aa <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801679c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801679e:	681b      	ldr	r3, [r3, #0]
 80167a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80167a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80167a4:	2b00      	cmp	r3, #0
 80167a6:	d1f4      	bne.n	8016792 <ip4_reass+0x252>
 80167a8:	e000      	b.n	80167ac <ip4_reass+0x26c>
          break;
 80167aa:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 80167ac:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80167ae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80167b0:	f7ff fd2e 	bl	8016210 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 80167b4:	6878      	ldr	r0, [r7, #4]
 80167b6:	f7f6 f865 	bl	800c884 <pbuf_clen>
 80167ba:	4603      	mov	r3, r0
 80167bc:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 80167be:	4b1f      	ldr	r3, [pc, #124]	; (801683c <ip4_reass+0x2fc>)
 80167c0:	881b      	ldrh	r3, [r3, #0]
 80167c2:	8c3a      	ldrh	r2, [r7, #32]
 80167c4:	429a      	cmp	r2, r3
 80167c6:	d906      	bls.n	80167d6 <ip4_reass+0x296>
 80167c8:	4b1e      	ldr	r3, [pc, #120]	; (8016844 <ip4_reass+0x304>)
 80167ca:	f240 229b 	movw	r2, #667	; 0x29b
 80167ce:	491e      	ldr	r1, [pc, #120]	; (8016848 <ip4_reass+0x308>)
 80167d0:	481e      	ldr	r0, [pc, #120]	; (801684c <ip4_reass+0x30c>)
 80167d2:	f001 f84d 	bl	8017870 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 80167d6:	4b19      	ldr	r3, [pc, #100]	; (801683c <ip4_reass+0x2fc>)
 80167d8:	881a      	ldrh	r2, [r3, #0]
 80167da:	8c3b      	ldrh	r3, [r7, #32]
 80167dc:	1ad3      	subs	r3, r2, r3
 80167de:	b29a      	uxth	r2, r3
 80167e0:	4b16      	ldr	r3, [pc, #88]	; (801683c <ip4_reass+0x2fc>)
 80167e2:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 80167e4:	687b      	ldr	r3, [r7, #4]
 80167e6:	e03c      	b.n	8016862 <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 80167e8:	2300      	movs	r3, #0
 80167ea:	e03a      	b.n	8016862 <ip4_reass+0x322>
      goto nullreturn_ipr;
 80167ec:	bf00      	nop
 80167ee:	e000      	b.n	80167f2 <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 80167f0:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 80167f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80167f4:	2b00      	cmp	r3, #0
 80167f6:	d106      	bne.n	8016806 <ip4_reass+0x2c6>
 80167f8:	4b12      	ldr	r3, [pc, #72]	; (8016844 <ip4_reass+0x304>)
 80167fa:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 80167fe:	4914      	ldr	r1, [pc, #80]	; (8016850 <ip4_reass+0x310>)
 8016800:	4812      	ldr	r0, [pc, #72]	; (801684c <ip4_reass+0x30c>)
 8016802:	f001 f835 	bl	8017870 <iprintf>
  if (ipr->p == NULL) {
 8016806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016808:	685b      	ldr	r3, [r3, #4]
 801680a:	2b00      	cmp	r3, #0
 801680c:	d124      	bne.n	8016858 <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801680e:	4b0c      	ldr	r3, [pc, #48]	; (8016840 <ip4_reass+0x300>)
 8016810:	681b      	ldr	r3, [r3, #0]
 8016812:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016814:	429a      	cmp	r2, r3
 8016816:	d006      	beq.n	8016826 <ip4_reass+0x2e6>
 8016818:	4b0a      	ldr	r3, [pc, #40]	; (8016844 <ip4_reass+0x304>)
 801681a:	f240 22ab 	movw	r2, #683	; 0x2ab
 801681e:	490d      	ldr	r1, [pc, #52]	; (8016854 <ip4_reass+0x314>)
 8016820:	480a      	ldr	r0, [pc, #40]	; (801684c <ip4_reass+0x30c>)
 8016822:	f001 f825 	bl	8017870 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8016826:	2100      	movs	r1, #0
 8016828:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801682a:	f7ff fcf1 	bl	8016210 <ip_reass_dequeue_datagram>
 801682e:	e014      	b.n	801685a <ip4_reass+0x31a>
    goto nullreturn;
 8016830:	bf00      	nop
 8016832:	e012      	b.n	801685a <ip4_reass+0x31a>
    goto nullreturn;
 8016834:	bf00      	nop
 8016836:	e010      	b.n	801685a <ip4_reass+0x31a>
      goto nullreturn;
 8016838:	bf00      	nop
 801683a:	e00e      	b.n	801685a <ip4_reass+0x31a>
 801683c:	2000059c 	.word	0x2000059c
 8016840:	20000598 	.word	0x20000598
 8016844:	0801f704 	.word	0x0801f704
 8016848:	0801f874 	.word	0x0801f874
 801684c:	0801f74c 	.word	0x0801f74c
 8016850:	0801f890 	.word	0x0801f890
 8016854:	0801f89c 	.word	0x0801f89c
  }

nullreturn:
 8016858:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801685a:	6878      	ldr	r0, [r7, #4]
 801685c:	f7f5 ff8a 	bl	800c774 <pbuf_free>
  return NULL;
 8016860:	2300      	movs	r3, #0
}
 8016862:	4618      	mov	r0, r3
 8016864:	3738      	adds	r7, #56	; 0x38
 8016866:	46bd      	mov	sp, r7
 8016868:	bd80      	pop	{r7, pc}
 801686a:	bf00      	nop

0801686c <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 801686c:	b580      	push	{r7, lr}
 801686e:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8016870:	2005      	movs	r0, #5
 8016872:	f7f5 f939 	bl	800bae8 <memp_malloc>
 8016876:	4603      	mov	r3, r0
}
 8016878:	4618      	mov	r0, r3
 801687a:	bd80      	pop	{r7, pc}

0801687c <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 801687c:	b580      	push	{r7, lr}
 801687e:	b082      	sub	sp, #8
 8016880:	af00      	add	r7, sp, #0
 8016882:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8016884:	687b      	ldr	r3, [r7, #4]
 8016886:	2b00      	cmp	r3, #0
 8016888:	d106      	bne.n	8016898 <ip_frag_free_pbuf_custom_ref+0x1c>
 801688a:	4b07      	ldr	r3, [pc, #28]	; (80168a8 <ip_frag_free_pbuf_custom_ref+0x2c>)
 801688c:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8016890:	4906      	ldr	r1, [pc, #24]	; (80168ac <ip_frag_free_pbuf_custom_ref+0x30>)
 8016892:	4807      	ldr	r0, [pc, #28]	; (80168b0 <ip_frag_free_pbuf_custom_ref+0x34>)
 8016894:	f000 ffec 	bl	8017870 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8016898:	6879      	ldr	r1, [r7, #4]
 801689a:	2005      	movs	r0, #5
 801689c:	f7f5 f970 	bl	800bb80 <memp_free>
}
 80168a0:	bf00      	nop
 80168a2:	3708      	adds	r7, #8
 80168a4:	46bd      	mov	sp, r7
 80168a6:	bd80      	pop	{r7, pc}
 80168a8:	0801f704 	.word	0x0801f704
 80168ac:	0801f8bc 	.word	0x0801f8bc
 80168b0:	0801f74c 	.word	0x0801f74c

080168b4 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 80168b4:	b580      	push	{r7, lr}
 80168b6:	b084      	sub	sp, #16
 80168b8:	af00      	add	r7, sp, #0
 80168ba:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 80168bc:	687b      	ldr	r3, [r7, #4]
 80168be:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 80168c0:	68fb      	ldr	r3, [r7, #12]
 80168c2:	2b00      	cmp	r3, #0
 80168c4:	d106      	bne.n	80168d4 <ipfrag_free_pbuf_custom+0x20>
 80168c6:	4b11      	ldr	r3, [pc, #68]	; (801690c <ipfrag_free_pbuf_custom+0x58>)
 80168c8:	f240 22ce 	movw	r2, #718	; 0x2ce
 80168cc:	4910      	ldr	r1, [pc, #64]	; (8016910 <ipfrag_free_pbuf_custom+0x5c>)
 80168ce:	4811      	ldr	r0, [pc, #68]	; (8016914 <ipfrag_free_pbuf_custom+0x60>)
 80168d0:	f000 ffce 	bl	8017870 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 80168d4:	68fa      	ldr	r2, [r7, #12]
 80168d6:	687b      	ldr	r3, [r7, #4]
 80168d8:	429a      	cmp	r2, r3
 80168da:	d006      	beq.n	80168ea <ipfrag_free_pbuf_custom+0x36>
 80168dc:	4b0b      	ldr	r3, [pc, #44]	; (801690c <ipfrag_free_pbuf_custom+0x58>)
 80168de:	f240 22cf 	movw	r2, #719	; 0x2cf
 80168e2:	490d      	ldr	r1, [pc, #52]	; (8016918 <ipfrag_free_pbuf_custom+0x64>)
 80168e4:	480b      	ldr	r0, [pc, #44]	; (8016914 <ipfrag_free_pbuf_custom+0x60>)
 80168e6:	f000 ffc3 	bl	8017870 <iprintf>
  if (pcr->original != NULL) {
 80168ea:	68fb      	ldr	r3, [r7, #12]
 80168ec:	695b      	ldr	r3, [r3, #20]
 80168ee:	2b00      	cmp	r3, #0
 80168f0:	d004      	beq.n	80168fc <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 80168f2:	68fb      	ldr	r3, [r7, #12]
 80168f4:	695b      	ldr	r3, [r3, #20]
 80168f6:	4618      	mov	r0, r3
 80168f8:	f7f5 ff3c 	bl	800c774 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 80168fc:	68f8      	ldr	r0, [r7, #12]
 80168fe:	f7ff ffbd 	bl	801687c <ip_frag_free_pbuf_custom_ref>
}
 8016902:	bf00      	nop
 8016904:	3710      	adds	r7, #16
 8016906:	46bd      	mov	sp, r7
 8016908:	bd80      	pop	{r7, pc}
 801690a:	bf00      	nop
 801690c:	0801f704 	.word	0x0801f704
 8016910:	0801f8c8 	.word	0x0801f8c8
 8016914:	0801f74c 	.word	0x0801f74c
 8016918:	0801f8d4 	.word	0x0801f8d4

0801691c <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801691c:	b580      	push	{r7, lr}
 801691e:	b094      	sub	sp, #80	; 0x50
 8016920:	af02      	add	r7, sp, #8
 8016922:	60f8      	str	r0, [r7, #12]
 8016924:	60b9      	str	r1, [r7, #8]
 8016926:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8016928:	2300      	movs	r3, #0
 801692a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801692e:	68bb      	ldr	r3, [r7, #8]
 8016930:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016932:	3b14      	subs	r3, #20
 8016934:	2b00      	cmp	r3, #0
 8016936:	da00      	bge.n	801693a <ip4_frag+0x1e>
 8016938:	3307      	adds	r3, #7
 801693a:	10db      	asrs	r3, r3, #3
 801693c:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801693e:	2314      	movs	r3, #20
 8016940:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8016942:	68fb      	ldr	r3, [r7, #12]
 8016944:	685b      	ldr	r3, [r3, #4]
 8016946:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8016948:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801694a:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 801694c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801694e:	781b      	ldrb	r3, [r3, #0]
 8016950:	f003 030f 	and.w	r3, r3, #15
 8016954:	b2db      	uxtb	r3, r3
 8016956:	009b      	lsls	r3, r3, #2
 8016958:	b2db      	uxtb	r3, r3
 801695a:	2b14      	cmp	r3, #20
 801695c:	d002      	beq.n	8016964 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801695e:	f06f 0305 	mvn.w	r3, #5
 8016962:	e110      	b.n	8016b86 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8016964:	68fb      	ldr	r3, [r7, #12]
 8016966:	895b      	ldrh	r3, [r3, #10]
 8016968:	2b13      	cmp	r3, #19
 801696a:	d809      	bhi.n	8016980 <ip4_frag+0x64>
 801696c:	4b88      	ldr	r3, [pc, #544]	; (8016b90 <ip4_frag+0x274>)
 801696e:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8016972:	4988      	ldr	r1, [pc, #544]	; (8016b94 <ip4_frag+0x278>)
 8016974:	4888      	ldr	r0, [pc, #544]	; (8016b98 <ip4_frag+0x27c>)
 8016976:	f000 ff7b 	bl	8017870 <iprintf>
 801697a:	f06f 0305 	mvn.w	r3, #5
 801697e:	e102      	b.n	8016b86 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8016980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016982:	88db      	ldrh	r3, [r3, #6]
 8016984:	b29b      	uxth	r3, r3
 8016986:	4618      	mov	r0, r3
 8016988:	f7f4 fc58 	bl	800b23c <lwip_htons>
 801698c:	4603      	mov	r3, r0
 801698e:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8016990:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8016992:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016996:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801699a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801699c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80169a0:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 80169a2:	68fb      	ldr	r3, [r7, #12]
 80169a4:	891b      	ldrh	r3, [r3, #8]
 80169a6:	3b14      	subs	r3, #20
 80169a8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 80169ac:	e0e1      	b.n	8016b72 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 80169ae:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80169b0:	00db      	lsls	r3, r3, #3
 80169b2:	b29b      	uxth	r3, r3
 80169b4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80169b8:	4293      	cmp	r3, r2
 80169ba:	bf28      	it	cs
 80169bc:	4613      	movcs	r3, r2
 80169be:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 80169c0:	f44f 7220 	mov.w	r2, #640	; 0x280
 80169c4:	2114      	movs	r1, #20
 80169c6:	200e      	movs	r0, #14
 80169c8:	f7f5 fbf0 	bl	800c1ac <pbuf_alloc>
 80169cc:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 80169ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80169d0:	2b00      	cmp	r3, #0
 80169d2:	f000 80d5 	beq.w	8016b80 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 80169d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80169d8:	895b      	ldrh	r3, [r3, #10]
 80169da:	2b13      	cmp	r3, #19
 80169dc:	d806      	bhi.n	80169ec <ip4_frag+0xd0>
 80169de:	4b6c      	ldr	r3, [pc, #432]	; (8016b90 <ip4_frag+0x274>)
 80169e0:	f44f 7249 	mov.w	r2, #804	; 0x324
 80169e4:	496d      	ldr	r1, [pc, #436]	; (8016b9c <ip4_frag+0x280>)
 80169e6:	486c      	ldr	r0, [pc, #432]	; (8016b98 <ip4_frag+0x27c>)
 80169e8:	f000 ff42 	bl	8017870 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 80169ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80169ee:	685b      	ldr	r3, [r3, #4]
 80169f0:	2214      	movs	r2, #20
 80169f2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80169f4:	4618      	mov	r0, r3
 80169f6:	f000 f9f7 	bl	8016de8 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 80169fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80169fc:	685b      	ldr	r3, [r3, #4]
 80169fe:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8016a00:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8016a02:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8016a06:	e064      	b.n	8016ad2 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8016a08:	68fb      	ldr	r3, [r7, #12]
 8016a0a:	895a      	ldrh	r2, [r3, #10]
 8016a0c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8016a0e:	1ad3      	subs	r3, r2, r3
 8016a10:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8016a12:	68fb      	ldr	r3, [r7, #12]
 8016a14:	895b      	ldrh	r3, [r3, #10]
 8016a16:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8016a18:	429a      	cmp	r2, r3
 8016a1a:	d906      	bls.n	8016a2a <ip4_frag+0x10e>
 8016a1c:	4b5c      	ldr	r3, [pc, #368]	; (8016b90 <ip4_frag+0x274>)
 8016a1e:	f240 322d 	movw	r2, #813	; 0x32d
 8016a22:	495f      	ldr	r1, [pc, #380]	; (8016ba0 <ip4_frag+0x284>)
 8016a24:	485c      	ldr	r0, [pc, #368]	; (8016b98 <ip4_frag+0x27c>)
 8016a26:	f000 ff23 	bl	8017870 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8016a2a:	8bfa      	ldrh	r2, [r7, #30]
 8016a2c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8016a30:	4293      	cmp	r3, r2
 8016a32:	bf28      	it	cs
 8016a34:	4613      	movcs	r3, r2
 8016a36:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8016a3a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8016a3e:	2b00      	cmp	r3, #0
 8016a40:	d105      	bne.n	8016a4e <ip4_frag+0x132>
        poff = 0;
 8016a42:	2300      	movs	r3, #0
 8016a44:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8016a46:	68fb      	ldr	r3, [r7, #12]
 8016a48:	681b      	ldr	r3, [r3, #0]
 8016a4a:	60fb      	str	r3, [r7, #12]
        continue;
 8016a4c:	e041      	b.n	8016ad2 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8016a4e:	f7ff ff0d 	bl	801686c <ip_frag_alloc_pbuf_custom_ref>
 8016a52:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8016a54:	69bb      	ldr	r3, [r7, #24]
 8016a56:	2b00      	cmp	r3, #0
 8016a58:	d103      	bne.n	8016a62 <ip4_frag+0x146>
        pbuf_free(rambuf);
 8016a5a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016a5c:	f7f5 fe8a 	bl	800c774 <pbuf_free>
        goto memerr;
 8016a60:	e08f      	b.n	8016b82 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8016a62:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8016a64:	68fb      	ldr	r3, [r7, #12]
 8016a66:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8016a68:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8016a6a:	4413      	add	r3, r2
 8016a6c:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8016a70:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8016a74:	9201      	str	r2, [sp, #4]
 8016a76:	9300      	str	r3, [sp, #0]
 8016a78:	4603      	mov	r3, r0
 8016a7a:	2241      	movs	r2, #65	; 0x41
 8016a7c:	2000      	movs	r0, #0
 8016a7e:	f7f5 fcbf 	bl	800c400 <pbuf_alloced_custom>
 8016a82:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8016a84:	697b      	ldr	r3, [r7, #20]
 8016a86:	2b00      	cmp	r3, #0
 8016a88:	d106      	bne.n	8016a98 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8016a8a:	69b8      	ldr	r0, [r7, #24]
 8016a8c:	f7ff fef6 	bl	801687c <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8016a90:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016a92:	f7f5 fe6f 	bl	800c774 <pbuf_free>
        goto memerr;
 8016a96:	e074      	b.n	8016b82 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8016a98:	68f8      	ldr	r0, [r7, #12]
 8016a9a:	f7f5 ff0b 	bl	800c8b4 <pbuf_ref>
      pcr->original = p;
 8016a9e:	69bb      	ldr	r3, [r7, #24]
 8016aa0:	68fa      	ldr	r2, [r7, #12]
 8016aa2:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8016aa4:	69bb      	ldr	r3, [r7, #24]
 8016aa6:	4a3f      	ldr	r2, [pc, #252]	; (8016ba4 <ip4_frag+0x288>)
 8016aa8:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8016aaa:	6979      	ldr	r1, [r7, #20]
 8016aac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016aae:	f7f5 ff23 	bl	800c8f8 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8016ab2:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8016ab6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8016aba:	1ad3      	subs	r3, r2, r3
 8016abc:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8016ac0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8016ac4:	2b00      	cmp	r3, #0
 8016ac6:	d004      	beq.n	8016ad2 <ip4_frag+0x1b6>
        poff = 0;
 8016ac8:	2300      	movs	r3, #0
 8016aca:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8016acc:	68fb      	ldr	r3, [r7, #12]
 8016ace:	681b      	ldr	r3, [r3, #0]
 8016ad0:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8016ad2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8016ad6:	2b00      	cmp	r3, #0
 8016ad8:	d196      	bne.n	8016a08 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8016ada:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8016adc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8016ae0:	4413      	add	r3, r2
 8016ae2:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8016ae4:	68bb      	ldr	r3, [r7, #8]
 8016ae6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016ae8:	f1a3 0213 	sub.w	r2, r3, #19
 8016aec:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8016af0:	429a      	cmp	r2, r3
 8016af2:	bfcc      	ite	gt
 8016af4:	2301      	movgt	r3, #1
 8016af6:	2300      	movle	r3, #0
 8016af8:	b2db      	uxtb	r3, r3
 8016afa:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8016afc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8016b00:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016b04:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8016b06:	6a3b      	ldr	r3, [r7, #32]
 8016b08:	2b00      	cmp	r3, #0
 8016b0a:	d002      	beq.n	8016b12 <ip4_frag+0x1f6>
 8016b0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016b0e:	2b00      	cmp	r3, #0
 8016b10:	d003      	beq.n	8016b1a <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8016b12:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8016b14:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8016b18:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8016b1a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8016b1c:	4618      	mov	r0, r3
 8016b1e:	f7f4 fb8d 	bl	800b23c <lwip_htons>
 8016b22:	4603      	mov	r3, r0
 8016b24:	461a      	mov	r2, r3
 8016b26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016b28:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8016b2a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8016b2c:	3314      	adds	r3, #20
 8016b2e:	b29b      	uxth	r3, r3
 8016b30:	4618      	mov	r0, r3
 8016b32:	f7f4 fb83 	bl	800b23c <lwip_htons>
 8016b36:	4603      	mov	r3, r0
 8016b38:	461a      	mov	r2, r3
 8016b3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016b3c:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8016b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016b40:	2200      	movs	r2, #0
 8016b42:	729a      	strb	r2, [r3, #10]
 8016b44:	2200      	movs	r2, #0
 8016b46:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8016b48:	68bb      	ldr	r3, [r7, #8]
 8016b4a:	695b      	ldr	r3, [r3, #20]
 8016b4c:	687a      	ldr	r2, [r7, #4]
 8016b4e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016b50:	68b8      	ldr	r0, [r7, #8]
 8016b52:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8016b54:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016b56:	f7f5 fe0d 	bl	800c774 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8016b5a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8016b5e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8016b60:	1ad3      	subs	r3, r2, r3
 8016b62:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8016b66:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8016b6a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8016b6c:	4413      	add	r3, r2
 8016b6e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8016b72:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8016b76:	2b00      	cmp	r3, #0
 8016b78:	f47f af19 	bne.w	80169ae <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8016b7c:	2300      	movs	r3, #0
 8016b7e:	e002      	b.n	8016b86 <ip4_frag+0x26a>
      goto memerr;
 8016b80:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8016b82:	f04f 33ff 	mov.w	r3, #4294967295
}
 8016b86:	4618      	mov	r0, r3
 8016b88:	3748      	adds	r7, #72	; 0x48
 8016b8a:	46bd      	mov	sp, r7
 8016b8c:	bd80      	pop	{r7, pc}
 8016b8e:	bf00      	nop
 8016b90:	0801f704 	.word	0x0801f704
 8016b94:	0801f8e0 	.word	0x0801f8e0
 8016b98:	0801f74c 	.word	0x0801f74c
 8016b9c:	0801f8fc 	.word	0x0801f8fc
 8016ba0:	0801f91c 	.word	0x0801f91c
 8016ba4:	080168b5 	.word	0x080168b5

08016ba8 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8016ba8:	b580      	push	{r7, lr}
 8016baa:	b086      	sub	sp, #24
 8016bac:	af00      	add	r7, sp, #0
 8016bae:	6078      	str	r0, [r7, #4]
 8016bb0:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8016bb2:	230e      	movs	r3, #14
 8016bb4:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8016bb6:	687b      	ldr	r3, [r7, #4]
 8016bb8:	895b      	ldrh	r3, [r3, #10]
 8016bba:	2b0e      	cmp	r3, #14
 8016bbc:	d96e      	bls.n	8016c9c <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8016bbe:	687b      	ldr	r3, [r7, #4]
 8016bc0:	7bdb      	ldrb	r3, [r3, #15]
 8016bc2:	2b00      	cmp	r3, #0
 8016bc4:	d106      	bne.n	8016bd4 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8016bc6:	683b      	ldr	r3, [r7, #0]
 8016bc8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8016bcc:	3301      	adds	r3, #1
 8016bce:	b2da      	uxtb	r2, r3
 8016bd0:	687b      	ldr	r3, [r7, #4]
 8016bd2:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8016bd4:	687b      	ldr	r3, [r7, #4]
 8016bd6:	685b      	ldr	r3, [r3, #4]
 8016bd8:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8016bda:	693b      	ldr	r3, [r7, #16]
 8016bdc:	7b1a      	ldrb	r2, [r3, #12]
 8016bde:	7b5b      	ldrb	r3, [r3, #13]
 8016be0:	021b      	lsls	r3, r3, #8
 8016be2:	4313      	orrs	r3, r2
 8016be4:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8016be6:	693b      	ldr	r3, [r7, #16]
 8016be8:	781b      	ldrb	r3, [r3, #0]
 8016bea:	f003 0301 	and.w	r3, r3, #1
 8016bee:	2b00      	cmp	r3, #0
 8016bf0:	d023      	beq.n	8016c3a <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8016bf2:	693b      	ldr	r3, [r7, #16]
 8016bf4:	781b      	ldrb	r3, [r3, #0]
 8016bf6:	2b01      	cmp	r3, #1
 8016bf8:	d10f      	bne.n	8016c1a <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8016bfa:	693b      	ldr	r3, [r7, #16]
 8016bfc:	785b      	ldrb	r3, [r3, #1]
 8016bfe:	2b00      	cmp	r3, #0
 8016c00:	d11b      	bne.n	8016c3a <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8016c02:	693b      	ldr	r3, [r7, #16]
 8016c04:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8016c06:	2b5e      	cmp	r3, #94	; 0x5e
 8016c08:	d117      	bne.n	8016c3a <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8016c0a:	687b      	ldr	r3, [r7, #4]
 8016c0c:	7b5b      	ldrb	r3, [r3, #13]
 8016c0e:	f043 0310 	orr.w	r3, r3, #16
 8016c12:	b2da      	uxtb	r2, r3
 8016c14:	687b      	ldr	r3, [r7, #4]
 8016c16:	735a      	strb	r2, [r3, #13]
 8016c18:	e00f      	b.n	8016c3a <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8016c1a:	693b      	ldr	r3, [r7, #16]
 8016c1c:	2206      	movs	r2, #6
 8016c1e:	4928      	ldr	r1, [pc, #160]	; (8016cc0 <ethernet_input+0x118>)
 8016c20:	4618      	mov	r0, r3
 8016c22:	f000 f8d3 	bl	8016dcc <memcmp>
 8016c26:	4603      	mov	r3, r0
 8016c28:	2b00      	cmp	r3, #0
 8016c2a:	d106      	bne.n	8016c3a <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8016c2c:	687b      	ldr	r3, [r7, #4]
 8016c2e:	7b5b      	ldrb	r3, [r3, #13]
 8016c30:	f043 0308 	orr.w	r3, r3, #8
 8016c34:	b2da      	uxtb	r2, r3
 8016c36:	687b      	ldr	r3, [r7, #4]
 8016c38:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8016c3a:	89fb      	ldrh	r3, [r7, #14]
 8016c3c:	2b08      	cmp	r3, #8
 8016c3e:	d003      	beq.n	8016c48 <ethernet_input+0xa0>
 8016c40:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8016c44:	d014      	beq.n	8016c70 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8016c46:	e032      	b.n	8016cae <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8016c48:	683b      	ldr	r3, [r7, #0]
 8016c4a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8016c4e:	f003 0308 	and.w	r3, r3, #8
 8016c52:	2b00      	cmp	r3, #0
 8016c54:	d024      	beq.n	8016ca0 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8016c56:	8afb      	ldrh	r3, [r7, #22]
 8016c58:	4619      	mov	r1, r3
 8016c5a:	6878      	ldr	r0, [r7, #4]
 8016c5c:	f7f5 fd04 	bl	800c668 <pbuf_remove_header>
 8016c60:	4603      	mov	r3, r0
 8016c62:	2b00      	cmp	r3, #0
 8016c64:	d11e      	bne.n	8016ca4 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8016c66:	6839      	ldr	r1, [r7, #0]
 8016c68:	6878      	ldr	r0, [r7, #4]
 8016c6a:	f7fe ff09 	bl	8015a80 <ip4_input>
      break;
 8016c6e:	e013      	b.n	8016c98 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8016c70:	683b      	ldr	r3, [r7, #0]
 8016c72:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8016c76:	f003 0308 	and.w	r3, r3, #8
 8016c7a:	2b00      	cmp	r3, #0
 8016c7c:	d014      	beq.n	8016ca8 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8016c7e:	8afb      	ldrh	r3, [r7, #22]
 8016c80:	4619      	mov	r1, r3
 8016c82:	6878      	ldr	r0, [r7, #4]
 8016c84:	f7f5 fcf0 	bl	800c668 <pbuf_remove_header>
 8016c88:	4603      	mov	r3, r0
 8016c8a:	2b00      	cmp	r3, #0
 8016c8c:	d10e      	bne.n	8016cac <ethernet_input+0x104>
        etharp_input(p, netif);
 8016c8e:	6839      	ldr	r1, [r7, #0]
 8016c90:	6878      	ldr	r0, [r7, #4]
 8016c92:	f7fe f8a5 	bl	8014de0 <etharp_input>
      break;
 8016c96:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8016c98:	2300      	movs	r3, #0
 8016c9a:	e00c      	b.n	8016cb6 <ethernet_input+0x10e>
    goto free_and_return;
 8016c9c:	bf00      	nop
 8016c9e:	e006      	b.n	8016cae <ethernet_input+0x106>
        goto free_and_return;
 8016ca0:	bf00      	nop
 8016ca2:	e004      	b.n	8016cae <ethernet_input+0x106>
        goto free_and_return;
 8016ca4:	bf00      	nop
 8016ca6:	e002      	b.n	8016cae <ethernet_input+0x106>
        goto free_and_return;
 8016ca8:	bf00      	nop
 8016caa:	e000      	b.n	8016cae <ethernet_input+0x106>
        goto free_and_return;
 8016cac:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8016cae:	6878      	ldr	r0, [r7, #4]
 8016cb0:	f7f5 fd60 	bl	800c774 <pbuf_free>
  return ERR_OK;
 8016cb4:	2300      	movs	r3, #0
}
 8016cb6:	4618      	mov	r0, r3
 8016cb8:	3718      	adds	r7, #24
 8016cba:	46bd      	mov	sp, r7
 8016cbc:	bd80      	pop	{r7, pc}
 8016cbe:	bf00      	nop
 8016cc0:	0801fad0 	.word	0x0801fad0

08016cc4 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8016cc4:	b580      	push	{r7, lr}
 8016cc6:	b086      	sub	sp, #24
 8016cc8:	af00      	add	r7, sp, #0
 8016cca:	60f8      	str	r0, [r7, #12]
 8016ccc:	60b9      	str	r1, [r7, #8]
 8016cce:	607a      	str	r2, [r7, #4]
 8016cd0:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8016cd2:	8c3b      	ldrh	r3, [r7, #32]
 8016cd4:	4618      	mov	r0, r3
 8016cd6:	f7f4 fab1 	bl	800b23c <lwip_htons>
 8016cda:	4603      	mov	r3, r0
 8016cdc:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8016cde:	210e      	movs	r1, #14
 8016ce0:	68b8      	ldr	r0, [r7, #8]
 8016ce2:	f7f5 fcb1 	bl	800c648 <pbuf_add_header>
 8016ce6:	4603      	mov	r3, r0
 8016ce8:	2b00      	cmp	r3, #0
 8016cea:	d125      	bne.n	8016d38 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8016cec:	68bb      	ldr	r3, [r7, #8]
 8016cee:	685b      	ldr	r3, [r3, #4]
 8016cf0:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8016cf2:	693b      	ldr	r3, [r7, #16]
 8016cf4:	8afa      	ldrh	r2, [r7, #22]
 8016cf6:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8016cf8:	693b      	ldr	r3, [r7, #16]
 8016cfa:	2206      	movs	r2, #6
 8016cfc:	6839      	ldr	r1, [r7, #0]
 8016cfe:	4618      	mov	r0, r3
 8016d00:	f000 f872 	bl	8016de8 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8016d04:	693b      	ldr	r3, [r7, #16]
 8016d06:	3306      	adds	r3, #6
 8016d08:	2206      	movs	r2, #6
 8016d0a:	6879      	ldr	r1, [r7, #4]
 8016d0c:	4618      	mov	r0, r3
 8016d0e:	f000 f86b 	bl	8016de8 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8016d12:	68fb      	ldr	r3, [r7, #12]
 8016d14:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8016d18:	2b06      	cmp	r3, #6
 8016d1a:	d006      	beq.n	8016d2a <ethernet_output+0x66>
 8016d1c:	4b0a      	ldr	r3, [pc, #40]	; (8016d48 <ethernet_output+0x84>)
 8016d1e:	f44f 7299 	mov.w	r2, #306	; 0x132
 8016d22:	490a      	ldr	r1, [pc, #40]	; (8016d4c <ethernet_output+0x88>)
 8016d24:	480a      	ldr	r0, [pc, #40]	; (8016d50 <ethernet_output+0x8c>)
 8016d26:	f000 fda3 	bl	8017870 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8016d2a:	68fb      	ldr	r3, [r7, #12]
 8016d2c:	699b      	ldr	r3, [r3, #24]
 8016d2e:	68b9      	ldr	r1, [r7, #8]
 8016d30:	68f8      	ldr	r0, [r7, #12]
 8016d32:	4798      	blx	r3
 8016d34:	4603      	mov	r3, r0
 8016d36:	e002      	b.n	8016d3e <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8016d38:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8016d3a:	f06f 0301 	mvn.w	r3, #1
}
 8016d3e:	4618      	mov	r0, r3
 8016d40:	3718      	adds	r7, #24
 8016d42:	46bd      	mov	sp, r7
 8016d44:	bd80      	pop	{r7, pc}
 8016d46:	bf00      	nop
 8016d48:	0801f92c 	.word	0x0801f92c
 8016d4c:	0801f964 	.word	0x0801f964
 8016d50:	0801f998 	.word	0x0801f998

08016d54 <atof>:
 8016d54:	2100      	movs	r1, #0
 8016d56:	f001 bc99 	b.w	801868c <strtod>

08016d5a <atoi>:
 8016d5a:	220a      	movs	r2, #10
 8016d5c:	2100      	movs	r1, #0
 8016d5e:	f001 bd25 	b.w	80187ac <strtol>
	...

08016d64 <__libc_init_array>:
 8016d64:	b570      	push	{r4, r5, r6, lr}
 8016d66:	4d0d      	ldr	r5, [pc, #52]	; (8016d9c <__libc_init_array+0x38>)
 8016d68:	4c0d      	ldr	r4, [pc, #52]	; (8016da0 <__libc_init_array+0x3c>)
 8016d6a:	1b64      	subs	r4, r4, r5
 8016d6c:	10a4      	asrs	r4, r4, #2
 8016d6e:	2600      	movs	r6, #0
 8016d70:	42a6      	cmp	r6, r4
 8016d72:	d109      	bne.n	8016d88 <__libc_init_array+0x24>
 8016d74:	4d0b      	ldr	r5, [pc, #44]	; (8016da4 <__libc_init_array+0x40>)
 8016d76:	4c0c      	ldr	r4, [pc, #48]	; (8016da8 <__libc_init_array+0x44>)
 8016d78:	f005 faa8 	bl	801c2cc <_init>
 8016d7c:	1b64      	subs	r4, r4, r5
 8016d7e:	10a4      	asrs	r4, r4, #2
 8016d80:	2600      	movs	r6, #0
 8016d82:	42a6      	cmp	r6, r4
 8016d84:	d105      	bne.n	8016d92 <__libc_init_array+0x2e>
 8016d86:	bd70      	pop	{r4, r5, r6, pc}
 8016d88:	f855 3b04 	ldr.w	r3, [r5], #4
 8016d8c:	4798      	blx	r3
 8016d8e:	3601      	adds	r6, #1
 8016d90:	e7ee      	b.n	8016d70 <__libc_init_array+0xc>
 8016d92:	f855 3b04 	ldr.w	r3, [r5], #4
 8016d96:	4798      	blx	r3
 8016d98:	3601      	adds	r6, #1
 8016d9a:	e7f2      	b.n	8016d82 <__libc_init_array+0x1e>
 8016d9c:	08020038 	.word	0x08020038
 8016da0:	08020038 	.word	0x08020038
 8016da4:	08020038 	.word	0x08020038
 8016da8:	0802003c 	.word	0x0802003c

08016dac <malloc>:
 8016dac:	4b02      	ldr	r3, [pc, #8]	; (8016db8 <malloc+0xc>)
 8016dae:	4601      	mov	r1, r0
 8016db0:	6818      	ldr	r0, [r3, #0]
 8016db2:	f000 b899 	b.w	8016ee8 <_malloc_r>
 8016db6:	bf00      	nop
 8016db8:	20000074 	.word	0x20000074

08016dbc <free>:
 8016dbc:	4b02      	ldr	r3, [pc, #8]	; (8016dc8 <free+0xc>)
 8016dbe:	4601      	mov	r1, r0
 8016dc0:	6818      	ldr	r0, [r3, #0]
 8016dc2:	f000 b841 	b.w	8016e48 <_free_r>
 8016dc6:	bf00      	nop
 8016dc8:	20000074 	.word	0x20000074

08016dcc <memcmp>:
 8016dcc:	b530      	push	{r4, r5, lr}
 8016dce:	3901      	subs	r1, #1
 8016dd0:	2400      	movs	r4, #0
 8016dd2:	42a2      	cmp	r2, r4
 8016dd4:	d101      	bne.n	8016dda <memcmp+0xe>
 8016dd6:	2000      	movs	r0, #0
 8016dd8:	e005      	b.n	8016de6 <memcmp+0x1a>
 8016dda:	5d03      	ldrb	r3, [r0, r4]
 8016ddc:	3401      	adds	r4, #1
 8016dde:	5d0d      	ldrb	r5, [r1, r4]
 8016de0:	42ab      	cmp	r3, r5
 8016de2:	d0f6      	beq.n	8016dd2 <memcmp+0x6>
 8016de4:	1b58      	subs	r0, r3, r5
 8016de6:	bd30      	pop	{r4, r5, pc}

08016de8 <memcpy>:
 8016de8:	440a      	add	r2, r1
 8016dea:	4291      	cmp	r1, r2
 8016dec:	f100 33ff 	add.w	r3, r0, #4294967295
 8016df0:	d100      	bne.n	8016df4 <memcpy+0xc>
 8016df2:	4770      	bx	lr
 8016df4:	b510      	push	{r4, lr}
 8016df6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016dfa:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016dfe:	4291      	cmp	r1, r2
 8016e00:	d1f9      	bne.n	8016df6 <memcpy+0xe>
 8016e02:	bd10      	pop	{r4, pc}

08016e04 <memmove>:
 8016e04:	4288      	cmp	r0, r1
 8016e06:	b510      	push	{r4, lr}
 8016e08:	eb01 0402 	add.w	r4, r1, r2
 8016e0c:	d902      	bls.n	8016e14 <memmove+0x10>
 8016e0e:	4284      	cmp	r4, r0
 8016e10:	4623      	mov	r3, r4
 8016e12:	d807      	bhi.n	8016e24 <memmove+0x20>
 8016e14:	1e43      	subs	r3, r0, #1
 8016e16:	42a1      	cmp	r1, r4
 8016e18:	d008      	beq.n	8016e2c <memmove+0x28>
 8016e1a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016e1e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8016e22:	e7f8      	b.n	8016e16 <memmove+0x12>
 8016e24:	4402      	add	r2, r0
 8016e26:	4601      	mov	r1, r0
 8016e28:	428a      	cmp	r2, r1
 8016e2a:	d100      	bne.n	8016e2e <memmove+0x2a>
 8016e2c:	bd10      	pop	{r4, pc}
 8016e2e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8016e32:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8016e36:	e7f7      	b.n	8016e28 <memmove+0x24>

08016e38 <memset>:
 8016e38:	4402      	add	r2, r0
 8016e3a:	4603      	mov	r3, r0
 8016e3c:	4293      	cmp	r3, r2
 8016e3e:	d100      	bne.n	8016e42 <memset+0xa>
 8016e40:	4770      	bx	lr
 8016e42:	f803 1b01 	strb.w	r1, [r3], #1
 8016e46:	e7f9      	b.n	8016e3c <memset+0x4>

08016e48 <_free_r>:
 8016e48:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016e4a:	2900      	cmp	r1, #0
 8016e4c:	d048      	beq.n	8016ee0 <_free_r+0x98>
 8016e4e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016e52:	9001      	str	r0, [sp, #4]
 8016e54:	2b00      	cmp	r3, #0
 8016e56:	f1a1 0404 	sub.w	r4, r1, #4
 8016e5a:	bfb8      	it	lt
 8016e5c:	18e4      	addlt	r4, r4, r3
 8016e5e:	f002 ffdd 	bl	8019e1c <__malloc_lock>
 8016e62:	4a20      	ldr	r2, [pc, #128]	; (8016ee4 <_free_r+0x9c>)
 8016e64:	9801      	ldr	r0, [sp, #4]
 8016e66:	6813      	ldr	r3, [r2, #0]
 8016e68:	4615      	mov	r5, r2
 8016e6a:	b933      	cbnz	r3, 8016e7a <_free_r+0x32>
 8016e6c:	6063      	str	r3, [r4, #4]
 8016e6e:	6014      	str	r4, [r2, #0]
 8016e70:	b003      	add	sp, #12
 8016e72:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016e76:	f002 bfd7 	b.w	8019e28 <__malloc_unlock>
 8016e7a:	42a3      	cmp	r3, r4
 8016e7c:	d90b      	bls.n	8016e96 <_free_r+0x4e>
 8016e7e:	6821      	ldr	r1, [r4, #0]
 8016e80:	1862      	adds	r2, r4, r1
 8016e82:	4293      	cmp	r3, r2
 8016e84:	bf04      	itt	eq
 8016e86:	681a      	ldreq	r2, [r3, #0]
 8016e88:	685b      	ldreq	r3, [r3, #4]
 8016e8a:	6063      	str	r3, [r4, #4]
 8016e8c:	bf04      	itt	eq
 8016e8e:	1852      	addeq	r2, r2, r1
 8016e90:	6022      	streq	r2, [r4, #0]
 8016e92:	602c      	str	r4, [r5, #0]
 8016e94:	e7ec      	b.n	8016e70 <_free_r+0x28>
 8016e96:	461a      	mov	r2, r3
 8016e98:	685b      	ldr	r3, [r3, #4]
 8016e9a:	b10b      	cbz	r3, 8016ea0 <_free_r+0x58>
 8016e9c:	42a3      	cmp	r3, r4
 8016e9e:	d9fa      	bls.n	8016e96 <_free_r+0x4e>
 8016ea0:	6811      	ldr	r1, [r2, #0]
 8016ea2:	1855      	adds	r5, r2, r1
 8016ea4:	42a5      	cmp	r5, r4
 8016ea6:	d10b      	bne.n	8016ec0 <_free_r+0x78>
 8016ea8:	6824      	ldr	r4, [r4, #0]
 8016eaa:	4421      	add	r1, r4
 8016eac:	1854      	adds	r4, r2, r1
 8016eae:	42a3      	cmp	r3, r4
 8016eb0:	6011      	str	r1, [r2, #0]
 8016eb2:	d1dd      	bne.n	8016e70 <_free_r+0x28>
 8016eb4:	681c      	ldr	r4, [r3, #0]
 8016eb6:	685b      	ldr	r3, [r3, #4]
 8016eb8:	6053      	str	r3, [r2, #4]
 8016eba:	4421      	add	r1, r4
 8016ebc:	6011      	str	r1, [r2, #0]
 8016ebe:	e7d7      	b.n	8016e70 <_free_r+0x28>
 8016ec0:	d902      	bls.n	8016ec8 <_free_r+0x80>
 8016ec2:	230c      	movs	r3, #12
 8016ec4:	6003      	str	r3, [r0, #0]
 8016ec6:	e7d3      	b.n	8016e70 <_free_r+0x28>
 8016ec8:	6825      	ldr	r5, [r4, #0]
 8016eca:	1961      	adds	r1, r4, r5
 8016ecc:	428b      	cmp	r3, r1
 8016ece:	bf04      	itt	eq
 8016ed0:	6819      	ldreq	r1, [r3, #0]
 8016ed2:	685b      	ldreq	r3, [r3, #4]
 8016ed4:	6063      	str	r3, [r4, #4]
 8016ed6:	bf04      	itt	eq
 8016ed8:	1949      	addeq	r1, r1, r5
 8016eda:	6021      	streq	r1, [r4, #0]
 8016edc:	6054      	str	r4, [r2, #4]
 8016ede:	e7c7      	b.n	8016e70 <_free_r+0x28>
 8016ee0:	b003      	add	sp, #12
 8016ee2:	bd30      	pop	{r4, r5, pc}
 8016ee4:	200005a0 	.word	0x200005a0

08016ee8 <_malloc_r>:
 8016ee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016eea:	1ccd      	adds	r5, r1, #3
 8016eec:	f025 0503 	bic.w	r5, r5, #3
 8016ef0:	3508      	adds	r5, #8
 8016ef2:	2d0c      	cmp	r5, #12
 8016ef4:	bf38      	it	cc
 8016ef6:	250c      	movcc	r5, #12
 8016ef8:	2d00      	cmp	r5, #0
 8016efa:	4606      	mov	r6, r0
 8016efc:	db01      	blt.n	8016f02 <_malloc_r+0x1a>
 8016efe:	42a9      	cmp	r1, r5
 8016f00:	d903      	bls.n	8016f0a <_malloc_r+0x22>
 8016f02:	230c      	movs	r3, #12
 8016f04:	6033      	str	r3, [r6, #0]
 8016f06:	2000      	movs	r0, #0
 8016f08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016f0a:	f002 ff87 	bl	8019e1c <__malloc_lock>
 8016f0e:	4921      	ldr	r1, [pc, #132]	; (8016f94 <_malloc_r+0xac>)
 8016f10:	680a      	ldr	r2, [r1, #0]
 8016f12:	4614      	mov	r4, r2
 8016f14:	b99c      	cbnz	r4, 8016f3e <_malloc_r+0x56>
 8016f16:	4f20      	ldr	r7, [pc, #128]	; (8016f98 <_malloc_r+0xb0>)
 8016f18:	683b      	ldr	r3, [r7, #0]
 8016f1a:	b923      	cbnz	r3, 8016f26 <_malloc_r+0x3e>
 8016f1c:	4621      	mov	r1, r4
 8016f1e:	4630      	mov	r0, r6
 8016f20:	f000 fcfe 	bl	8017920 <_sbrk_r>
 8016f24:	6038      	str	r0, [r7, #0]
 8016f26:	4629      	mov	r1, r5
 8016f28:	4630      	mov	r0, r6
 8016f2a:	f000 fcf9 	bl	8017920 <_sbrk_r>
 8016f2e:	1c43      	adds	r3, r0, #1
 8016f30:	d123      	bne.n	8016f7a <_malloc_r+0x92>
 8016f32:	230c      	movs	r3, #12
 8016f34:	6033      	str	r3, [r6, #0]
 8016f36:	4630      	mov	r0, r6
 8016f38:	f002 ff76 	bl	8019e28 <__malloc_unlock>
 8016f3c:	e7e3      	b.n	8016f06 <_malloc_r+0x1e>
 8016f3e:	6823      	ldr	r3, [r4, #0]
 8016f40:	1b5b      	subs	r3, r3, r5
 8016f42:	d417      	bmi.n	8016f74 <_malloc_r+0x8c>
 8016f44:	2b0b      	cmp	r3, #11
 8016f46:	d903      	bls.n	8016f50 <_malloc_r+0x68>
 8016f48:	6023      	str	r3, [r4, #0]
 8016f4a:	441c      	add	r4, r3
 8016f4c:	6025      	str	r5, [r4, #0]
 8016f4e:	e004      	b.n	8016f5a <_malloc_r+0x72>
 8016f50:	6863      	ldr	r3, [r4, #4]
 8016f52:	42a2      	cmp	r2, r4
 8016f54:	bf0c      	ite	eq
 8016f56:	600b      	streq	r3, [r1, #0]
 8016f58:	6053      	strne	r3, [r2, #4]
 8016f5a:	4630      	mov	r0, r6
 8016f5c:	f002 ff64 	bl	8019e28 <__malloc_unlock>
 8016f60:	f104 000b 	add.w	r0, r4, #11
 8016f64:	1d23      	adds	r3, r4, #4
 8016f66:	f020 0007 	bic.w	r0, r0, #7
 8016f6a:	1ac2      	subs	r2, r0, r3
 8016f6c:	d0cc      	beq.n	8016f08 <_malloc_r+0x20>
 8016f6e:	1a1b      	subs	r3, r3, r0
 8016f70:	50a3      	str	r3, [r4, r2]
 8016f72:	e7c9      	b.n	8016f08 <_malloc_r+0x20>
 8016f74:	4622      	mov	r2, r4
 8016f76:	6864      	ldr	r4, [r4, #4]
 8016f78:	e7cc      	b.n	8016f14 <_malloc_r+0x2c>
 8016f7a:	1cc4      	adds	r4, r0, #3
 8016f7c:	f024 0403 	bic.w	r4, r4, #3
 8016f80:	42a0      	cmp	r0, r4
 8016f82:	d0e3      	beq.n	8016f4c <_malloc_r+0x64>
 8016f84:	1a21      	subs	r1, r4, r0
 8016f86:	4630      	mov	r0, r6
 8016f88:	f000 fcca 	bl	8017920 <_sbrk_r>
 8016f8c:	3001      	adds	r0, #1
 8016f8e:	d1dd      	bne.n	8016f4c <_malloc_r+0x64>
 8016f90:	e7cf      	b.n	8016f32 <_malloc_r+0x4a>
 8016f92:	bf00      	nop
 8016f94:	200005a0 	.word	0x200005a0
 8016f98:	200005a4 	.word	0x200005a4

08016f9c <__cvt>:
 8016f9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8016fa0:	ec55 4b10 	vmov	r4, r5, d0
 8016fa4:	2d00      	cmp	r5, #0
 8016fa6:	460e      	mov	r6, r1
 8016fa8:	4619      	mov	r1, r3
 8016faa:	462b      	mov	r3, r5
 8016fac:	bfbb      	ittet	lt
 8016fae:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8016fb2:	461d      	movlt	r5, r3
 8016fb4:	2300      	movge	r3, #0
 8016fb6:	232d      	movlt	r3, #45	; 0x2d
 8016fb8:	700b      	strb	r3, [r1, #0]
 8016fba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016fbc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8016fc0:	4691      	mov	r9, r2
 8016fc2:	f023 0820 	bic.w	r8, r3, #32
 8016fc6:	bfbc      	itt	lt
 8016fc8:	4622      	movlt	r2, r4
 8016fca:	4614      	movlt	r4, r2
 8016fcc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8016fd0:	d005      	beq.n	8016fde <__cvt+0x42>
 8016fd2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8016fd6:	d100      	bne.n	8016fda <__cvt+0x3e>
 8016fd8:	3601      	adds	r6, #1
 8016fda:	2102      	movs	r1, #2
 8016fdc:	e000      	b.n	8016fe0 <__cvt+0x44>
 8016fde:	2103      	movs	r1, #3
 8016fe0:	ab03      	add	r3, sp, #12
 8016fe2:	9301      	str	r3, [sp, #4]
 8016fe4:	ab02      	add	r3, sp, #8
 8016fe6:	9300      	str	r3, [sp, #0]
 8016fe8:	ec45 4b10 	vmov	d0, r4, r5
 8016fec:	4653      	mov	r3, sl
 8016fee:	4632      	mov	r2, r6
 8016ff0:	f001 fc92 	bl	8018918 <_dtoa_r>
 8016ff4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8016ff8:	4607      	mov	r7, r0
 8016ffa:	d102      	bne.n	8017002 <__cvt+0x66>
 8016ffc:	f019 0f01 	tst.w	r9, #1
 8017000:	d022      	beq.n	8017048 <__cvt+0xac>
 8017002:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8017006:	eb07 0906 	add.w	r9, r7, r6
 801700a:	d110      	bne.n	801702e <__cvt+0x92>
 801700c:	783b      	ldrb	r3, [r7, #0]
 801700e:	2b30      	cmp	r3, #48	; 0x30
 8017010:	d10a      	bne.n	8017028 <__cvt+0x8c>
 8017012:	2200      	movs	r2, #0
 8017014:	2300      	movs	r3, #0
 8017016:	4620      	mov	r0, r4
 8017018:	4629      	mov	r1, r5
 801701a:	f7e9 fd65 	bl	8000ae8 <__aeabi_dcmpeq>
 801701e:	b918      	cbnz	r0, 8017028 <__cvt+0x8c>
 8017020:	f1c6 0601 	rsb	r6, r6, #1
 8017024:	f8ca 6000 	str.w	r6, [sl]
 8017028:	f8da 3000 	ldr.w	r3, [sl]
 801702c:	4499      	add	r9, r3
 801702e:	2200      	movs	r2, #0
 8017030:	2300      	movs	r3, #0
 8017032:	4620      	mov	r0, r4
 8017034:	4629      	mov	r1, r5
 8017036:	f7e9 fd57 	bl	8000ae8 <__aeabi_dcmpeq>
 801703a:	b108      	cbz	r0, 8017040 <__cvt+0xa4>
 801703c:	f8cd 900c 	str.w	r9, [sp, #12]
 8017040:	2230      	movs	r2, #48	; 0x30
 8017042:	9b03      	ldr	r3, [sp, #12]
 8017044:	454b      	cmp	r3, r9
 8017046:	d307      	bcc.n	8017058 <__cvt+0xbc>
 8017048:	9b03      	ldr	r3, [sp, #12]
 801704a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801704c:	1bdb      	subs	r3, r3, r7
 801704e:	4638      	mov	r0, r7
 8017050:	6013      	str	r3, [r2, #0]
 8017052:	b004      	add	sp, #16
 8017054:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017058:	1c59      	adds	r1, r3, #1
 801705a:	9103      	str	r1, [sp, #12]
 801705c:	701a      	strb	r2, [r3, #0]
 801705e:	e7f0      	b.n	8017042 <__cvt+0xa6>

08017060 <__exponent>:
 8017060:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017062:	4603      	mov	r3, r0
 8017064:	2900      	cmp	r1, #0
 8017066:	bfb8      	it	lt
 8017068:	4249      	neglt	r1, r1
 801706a:	f803 2b02 	strb.w	r2, [r3], #2
 801706e:	bfb4      	ite	lt
 8017070:	222d      	movlt	r2, #45	; 0x2d
 8017072:	222b      	movge	r2, #43	; 0x2b
 8017074:	2909      	cmp	r1, #9
 8017076:	7042      	strb	r2, [r0, #1]
 8017078:	dd2a      	ble.n	80170d0 <__exponent+0x70>
 801707a:	f10d 0407 	add.w	r4, sp, #7
 801707e:	46a4      	mov	ip, r4
 8017080:	270a      	movs	r7, #10
 8017082:	46a6      	mov	lr, r4
 8017084:	460a      	mov	r2, r1
 8017086:	fb91 f6f7 	sdiv	r6, r1, r7
 801708a:	fb07 1516 	mls	r5, r7, r6, r1
 801708e:	3530      	adds	r5, #48	; 0x30
 8017090:	2a63      	cmp	r2, #99	; 0x63
 8017092:	f104 34ff 	add.w	r4, r4, #4294967295
 8017096:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801709a:	4631      	mov	r1, r6
 801709c:	dcf1      	bgt.n	8017082 <__exponent+0x22>
 801709e:	3130      	adds	r1, #48	; 0x30
 80170a0:	f1ae 0502 	sub.w	r5, lr, #2
 80170a4:	f804 1c01 	strb.w	r1, [r4, #-1]
 80170a8:	1c44      	adds	r4, r0, #1
 80170aa:	4629      	mov	r1, r5
 80170ac:	4561      	cmp	r1, ip
 80170ae:	d30a      	bcc.n	80170c6 <__exponent+0x66>
 80170b0:	f10d 0209 	add.w	r2, sp, #9
 80170b4:	eba2 020e 	sub.w	r2, r2, lr
 80170b8:	4565      	cmp	r5, ip
 80170ba:	bf88      	it	hi
 80170bc:	2200      	movhi	r2, #0
 80170be:	4413      	add	r3, r2
 80170c0:	1a18      	subs	r0, r3, r0
 80170c2:	b003      	add	sp, #12
 80170c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80170c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80170ca:	f804 2f01 	strb.w	r2, [r4, #1]!
 80170ce:	e7ed      	b.n	80170ac <__exponent+0x4c>
 80170d0:	2330      	movs	r3, #48	; 0x30
 80170d2:	3130      	adds	r1, #48	; 0x30
 80170d4:	7083      	strb	r3, [r0, #2]
 80170d6:	70c1      	strb	r1, [r0, #3]
 80170d8:	1d03      	adds	r3, r0, #4
 80170da:	e7f1      	b.n	80170c0 <__exponent+0x60>

080170dc <_printf_float>:
 80170dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80170e0:	ed2d 8b02 	vpush	{d8}
 80170e4:	b08d      	sub	sp, #52	; 0x34
 80170e6:	460c      	mov	r4, r1
 80170e8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80170ec:	4616      	mov	r6, r2
 80170ee:	461f      	mov	r7, r3
 80170f0:	4605      	mov	r5, r0
 80170f2:	f002 fe79 	bl	8019de8 <_localeconv_r>
 80170f6:	f8d0 a000 	ldr.w	sl, [r0]
 80170fa:	4650      	mov	r0, sl
 80170fc:	f7e9 f872 	bl	80001e4 <strlen>
 8017100:	2300      	movs	r3, #0
 8017102:	930a      	str	r3, [sp, #40]	; 0x28
 8017104:	6823      	ldr	r3, [r4, #0]
 8017106:	9305      	str	r3, [sp, #20]
 8017108:	f8d8 3000 	ldr.w	r3, [r8]
 801710c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8017110:	3307      	adds	r3, #7
 8017112:	f023 0307 	bic.w	r3, r3, #7
 8017116:	f103 0208 	add.w	r2, r3, #8
 801711a:	f8c8 2000 	str.w	r2, [r8]
 801711e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017122:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8017126:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 801712a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801712e:	9307      	str	r3, [sp, #28]
 8017130:	f8cd 8018 	str.w	r8, [sp, #24]
 8017134:	ee08 0a10 	vmov	s16, r0
 8017138:	4b9f      	ldr	r3, [pc, #636]	; (80173b8 <_printf_float+0x2dc>)
 801713a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801713e:	f04f 32ff 	mov.w	r2, #4294967295
 8017142:	f7e9 fd03 	bl	8000b4c <__aeabi_dcmpun>
 8017146:	bb88      	cbnz	r0, 80171ac <_printf_float+0xd0>
 8017148:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801714c:	4b9a      	ldr	r3, [pc, #616]	; (80173b8 <_printf_float+0x2dc>)
 801714e:	f04f 32ff 	mov.w	r2, #4294967295
 8017152:	f7e9 fcdd 	bl	8000b10 <__aeabi_dcmple>
 8017156:	bb48      	cbnz	r0, 80171ac <_printf_float+0xd0>
 8017158:	2200      	movs	r2, #0
 801715a:	2300      	movs	r3, #0
 801715c:	4640      	mov	r0, r8
 801715e:	4649      	mov	r1, r9
 8017160:	f7e9 fccc 	bl	8000afc <__aeabi_dcmplt>
 8017164:	b110      	cbz	r0, 801716c <_printf_float+0x90>
 8017166:	232d      	movs	r3, #45	; 0x2d
 8017168:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801716c:	4b93      	ldr	r3, [pc, #588]	; (80173bc <_printf_float+0x2e0>)
 801716e:	4894      	ldr	r0, [pc, #592]	; (80173c0 <_printf_float+0x2e4>)
 8017170:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8017174:	bf94      	ite	ls
 8017176:	4698      	movls	r8, r3
 8017178:	4680      	movhi	r8, r0
 801717a:	2303      	movs	r3, #3
 801717c:	6123      	str	r3, [r4, #16]
 801717e:	9b05      	ldr	r3, [sp, #20]
 8017180:	f023 0204 	bic.w	r2, r3, #4
 8017184:	6022      	str	r2, [r4, #0]
 8017186:	f04f 0900 	mov.w	r9, #0
 801718a:	9700      	str	r7, [sp, #0]
 801718c:	4633      	mov	r3, r6
 801718e:	aa0b      	add	r2, sp, #44	; 0x2c
 8017190:	4621      	mov	r1, r4
 8017192:	4628      	mov	r0, r5
 8017194:	f000 f9d8 	bl	8017548 <_printf_common>
 8017198:	3001      	adds	r0, #1
 801719a:	f040 8090 	bne.w	80172be <_printf_float+0x1e2>
 801719e:	f04f 30ff 	mov.w	r0, #4294967295
 80171a2:	b00d      	add	sp, #52	; 0x34
 80171a4:	ecbd 8b02 	vpop	{d8}
 80171a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80171ac:	4642      	mov	r2, r8
 80171ae:	464b      	mov	r3, r9
 80171b0:	4640      	mov	r0, r8
 80171b2:	4649      	mov	r1, r9
 80171b4:	f7e9 fcca 	bl	8000b4c <__aeabi_dcmpun>
 80171b8:	b140      	cbz	r0, 80171cc <_printf_float+0xf0>
 80171ba:	464b      	mov	r3, r9
 80171bc:	2b00      	cmp	r3, #0
 80171be:	bfbc      	itt	lt
 80171c0:	232d      	movlt	r3, #45	; 0x2d
 80171c2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80171c6:	487f      	ldr	r0, [pc, #508]	; (80173c4 <_printf_float+0x2e8>)
 80171c8:	4b7f      	ldr	r3, [pc, #508]	; (80173c8 <_printf_float+0x2ec>)
 80171ca:	e7d1      	b.n	8017170 <_printf_float+0x94>
 80171cc:	6863      	ldr	r3, [r4, #4]
 80171ce:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80171d2:	9206      	str	r2, [sp, #24]
 80171d4:	1c5a      	adds	r2, r3, #1
 80171d6:	d13f      	bne.n	8017258 <_printf_float+0x17c>
 80171d8:	2306      	movs	r3, #6
 80171da:	6063      	str	r3, [r4, #4]
 80171dc:	9b05      	ldr	r3, [sp, #20]
 80171de:	6861      	ldr	r1, [r4, #4]
 80171e0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80171e4:	2300      	movs	r3, #0
 80171e6:	9303      	str	r3, [sp, #12]
 80171e8:	ab0a      	add	r3, sp, #40	; 0x28
 80171ea:	e9cd b301 	strd	fp, r3, [sp, #4]
 80171ee:	ab09      	add	r3, sp, #36	; 0x24
 80171f0:	ec49 8b10 	vmov	d0, r8, r9
 80171f4:	9300      	str	r3, [sp, #0]
 80171f6:	6022      	str	r2, [r4, #0]
 80171f8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80171fc:	4628      	mov	r0, r5
 80171fe:	f7ff fecd 	bl	8016f9c <__cvt>
 8017202:	9b06      	ldr	r3, [sp, #24]
 8017204:	9909      	ldr	r1, [sp, #36]	; 0x24
 8017206:	2b47      	cmp	r3, #71	; 0x47
 8017208:	4680      	mov	r8, r0
 801720a:	d108      	bne.n	801721e <_printf_float+0x142>
 801720c:	1cc8      	adds	r0, r1, #3
 801720e:	db02      	blt.n	8017216 <_printf_float+0x13a>
 8017210:	6863      	ldr	r3, [r4, #4]
 8017212:	4299      	cmp	r1, r3
 8017214:	dd41      	ble.n	801729a <_printf_float+0x1be>
 8017216:	f1ab 0b02 	sub.w	fp, fp, #2
 801721a:	fa5f fb8b 	uxtb.w	fp, fp
 801721e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8017222:	d820      	bhi.n	8017266 <_printf_float+0x18a>
 8017224:	3901      	subs	r1, #1
 8017226:	465a      	mov	r2, fp
 8017228:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801722c:	9109      	str	r1, [sp, #36]	; 0x24
 801722e:	f7ff ff17 	bl	8017060 <__exponent>
 8017232:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017234:	1813      	adds	r3, r2, r0
 8017236:	2a01      	cmp	r2, #1
 8017238:	4681      	mov	r9, r0
 801723a:	6123      	str	r3, [r4, #16]
 801723c:	dc02      	bgt.n	8017244 <_printf_float+0x168>
 801723e:	6822      	ldr	r2, [r4, #0]
 8017240:	07d2      	lsls	r2, r2, #31
 8017242:	d501      	bpl.n	8017248 <_printf_float+0x16c>
 8017244:	3301      	adds	r3, #1
 8017246:	6123      	str	r3, [r4, #16]
 8017248:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 801724c:	2b00      	cmp	r3, #0
 801724e:	d09c      	beq.n	801718a <_printf_float+0xae>
 8017250:	232d      	movs	r3, #45	; 0x2d
 8017252:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017256:	e798      	b.n	801718a <_printf_float+0xae>
 8017258:	9a06      	ldr	r2, [sp, #24]
 801725a:	2a47      	cmp	r2, #71	; 0x47
 801725c:	d1be      	bne.n	80171dc <_printf_float+0x100>
 801725e:	2b00      	cmp	r3, #0
 8017260:	d1bc      	bne.n	80171dc <_printf_float+0x100>
 8017262:	2301      	movs	r3, #1
 8017264:	e7b9      	b.n	80171da <_printf_float+0xfe>
 8017266:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 801726a:	d118      	bne.n	801729e <_printf_float+0x1c2>
 801726c:	2900      	cmp	r1, #0
 801726e:	6863      	ldr	r3, [r4, #4]
 8017270:	dd0b      	ble.n	801728a <_printf_float+0x1ae>
 8017272:	6121      	str	r1, [r4, #16]
 8017274:	b913      	cbnz	r3, 801727c <_printf_float+0x1a0>
 8017276:	6822      	ldr	r2, [r4, #0]
 8017278:	07d0      	lsls	r0, r2, #31
 801727a:	d502      	bpl.n	8017282 <_printf_float+0x1a6>
 801727c:	3301      	adds	r3, #1
 801727e:	440b      	add	r3, r1
 8017280:	6123      	str	r3, [r4, #16]
 8017282:	65a1      	str	r1, [r4, #88]	; 0x58
 8017284:	f04f 0900 	mov.w	r9, #0
 8017288:	e7de      	b.n	8017248 <_printf_float+0x16c>
 801728a:	b913      	cbnz	r3, 8017292 <_printf_float+0x1b6>
 801728c:	6822      	ldr	r2, [r4, #0]
 801728e:	07d2      	lsls	r2, r2, #31
 8017290:	d501      	bpl.n	8017296 <_printf_float+0x1ba>
 8017292:	3302      	adds	r3, #2
 8017294:	e7f4      	b.n	8017280 <_printf_float+0x1a4>
 8017296:	2301      	movs	r3, #1
 8017298:	e7f2      	b.n	8017280 <_printf_float+0x1a4>
 801729a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801729e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80172a0:	4299      	cmp	r1, r3
 80172a2:	db05      	blt.n	80172b0 <_printf_float+0x1d4>
 80172a4:	6823      	ldr	r3, [r4, #0]
 80172a6:	6121      	str	r1, [r4, #16]
 80172a8:	07d8      	lsls	r0, r3, #31
 80172aa:	d5ea      	bpl.n	8017282 <_printf_float+0x1a6>
 80172ac:	1c4b      	adds	r3, r1, #1
 80172ae:	e7e7      	b.n	8017280 <_printf_float+0x1a4>
 80172b0:	2900      	cmp	r1, #0
 80172b2:	bfd4      	ite	le
 80172b4:	f1c1 0202 	rsble	r2, r1, #2
 80172b8:	2201      	movgt	r2, #1
 80172ba:	4413      	add	r3, r2
 80172bc:	e7e0      	b.n	8017280 <_printf_float+0x1a4>
 80172be:	6823      	ldr	r3, [r4, #0]
 80172c0:	055a      	lsls	r2, r3, #21
 80172c2:	d407      	bmi.n	80172d4 <_printf_float+0x1f8>
 80172c4:	6923      	ldr	r3, [r4, #16]
 80172c6:	4642      	mov	r2, r8
 80172c8:	4631      	mov	r1, r6
 80172ca:	4628      	mov	r0, r5
 80172cc:	47b8      	blx	r7
 80172ce:	3001      	adds	r0, #1
 80172d0:	d12c      	bne.n	801732c <_printf_float+0x250>
 80172d2:	e764      	b.n	801719e <_printf_float+0xc2>
 80172d4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80172d8:	f240 80e0 	bls.w	801749c <_printf_float+0x3c0>
 80172dc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80172e0:	2200      	movs	r2, #0
 80172e2:	2300      	movs	r3, #0
 80172e4:	f7e9 fc00 	bl	8000ae8 <__aeabi_dcmpeq>
 80172e8:	2800      	cmp	r0, #0
 80172ea:	d034      	beq.n	8017356 <_printf_float+0x27a>
 80172ec:	4a37      	ldr	r2, [pc, #220]	; (80173cc <_printf_float+0x2f0>)
 80172ee:	2301      	movs	r3, #1
 80172f0:	4631      	mov	r1, r6
 80172f2:	4628      	mov	r0, r5
 80172f4:	47b8      	blx	r7
 80172f6:	3001      	adds	r0, #1
 80172f8:	f43f af51 	beq.w	801719e <_printf_float+0xc2>
 80172fc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8017300:	429a      	cmp	r2, r3
 8017302:	db02      	blt.n	801730a <_printf_float+0x22e>
 8017304:	6823      	ldr	r3, [r4, #0]
 8017306:	07d8      	lsls	r0, r3, #31
 8017308:	d510      	bpl.n	801732c <_printf_float+0x250>
 801730a:	ee18 3a10 	vmov	r3, s16
 801730e:	4652      	mov	r2, sl
 8017310:	4631      	mov	r1, r6
 8017312:	4628      	mov	r0, r5
 8017314:	47b8      	blx	r7
 8017316:	3001      	adds	r0, #1
 8017318:	f43f af41 	beq.w	801719e <_printf_float+0xc2>
 801731c:	f04f 0800 	mov.w	r8, #0
 8017320:	f104 091a 	add.w	r9, r4, #26
 8017324:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017326:	3b01      	subs	r3, #1
 8017328:	4543      	cmp	r3, r8
 801732a:	dc09      	bgt.n	8017340 <_printf_float+0x264>
 801732c:	6823      	ldr	r3, [r4, #0]
 801732e:	079b      	lsls	r3, r3, #30
 8017330:	f100 8105 	bmi.w	801753e <_printf_float+0x462>
 8017334:	68e0      	ldr	r0, [r4, #12]
 8017336:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017338:	4298      	cmp	r0, r3
 801733a:	bfb8      	it	lt
 801733c:	4618      	movlt	r0, r3
 801733e:	e730      	b.n	80171a2 <_printf_float+0xc6>
 8017340:	2301      	movs	r3, #1
 8017342:	464a      	mov	r2, r9
 8017344:	4631      	mov	r1, r6
 8017346:	4628      	mov	r0, r5
 8017348:	47b8      	blx	r7
 801734a:	3001      	adds	r0, #1
 801734c:	f43f af27 	beq.w	801719e <_printf_float+0xc2>
 8017350:	f108 0801 	add.w	r8, r8, #1
 8017354:	e7e6      	b.n	8017324 <_printf_float+0x248>
 8017356:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017358:	2b00      	cmp	r3, #0
 801735a:	dc39      	bgt.n	80173d0 <_printf_float+0x2f4>
 801735c:	4a1b      	ldr	r2, [pc, #108]	; (80173cc <_printf_float+0x2f0>)
 801735e:	2301      	movs	r3, #1
 8017360:	4631      	mov	r1, r6
 8017362:	4628      	mov	r0, r5
 8017364:	47b8      	blx	r7
 8017366:	3001      	adds	r0, #1
 8017368:	f43f af19 	beq.w	801719e <_printf_float+0xc2>
 801736c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8017370:	4313      	orrs	r3, r2
 8017372:	d102      	bne.n	801737a <_printf_float+0x29e>
 8017374:	6823      	ldr	r3, [r4, #0]
 8017376:	07d9      	lsls	r1, r3, #31
 8017378:	d5d8      	bpl.n	801732c <_printf_float+0x250>
 801737a:	ee18 3a10 	vmov	r3, s16
 801737e:	4652      	mov	r2, sl
 8017380:	4631      	mov	r1, r6
 8017382:	4628      	mov	r0, r5
 8017384:	47b8      	blx	r7
 8017386:	3001      	adds	r0, #1
 8017388:	f43f af09 	beq.w	801719e <_printf_float+0xc2>
 801738c:	f04f 0900 	mov.w	r9, #0
 8017390:	f104 0a1a 	add.w	sl, r4, #26
 8017394:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017396:	425b      	negs	r3, r3
 8017398:	454b      	cmp	r3, r9
 801739a:	dc01      	bgt.n	80173a0 <_printf_float+0x2c4>
 801739c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801739e:	e792      	b.n	80172c6 <_printf_float+0x1ea>
 80173a0:	2301      	movs	r3, #1
 80173a2:	4652      	mov	r2, sl
 80173a4:	4631      	mov	r1, r6
 80173a6:	4628      	mov	r0, r5
 80173a8:	47b8      	blx	r7
 80173aa:	3001      	adds	r0, #1
 80173ac:	f43f aef7 	beq.w	801719e <_printf_float+0xc2>
 80173b0:	f109 0901 	add.w	r9, r9, #1
 80173b4:	e7ee      	b.n	8017394 <_printf_float+0x2b8>
 80173b6:	bf00      	nop
 80173b8:	7fefffff 	.word	0x7fefffff
 80173bc:	0801fbe4 	.word	0x0801fbe4
 80173c0:	0801fbe8 	.word	0x0801fbe8
 80173c4:	0801fbf0 	.word	0x0801fbf0
 80173c8:	0801fbec 	.word	0x0801fbec
 80173cc:	0801fbf4 	.word	0x0801fbf4
 80173d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80173d2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80173d4:	429a      	cmp	r2, r3
 80173d6:	bfa8      	it	ge
 80173d8:	461a      	movge	r2, r3
 80173da:	2a00      	cmp	r2, #0
 80173dc:	4691      	mov	r9, r2
 80173de:	dc37      	bgt.n	8017450 <_printf_float+0x374>
 80173e0:	f04f 0b00 	mov.w	fp, #0
 80173e4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80173e8:	f104 021a 	add.w	r2, r4, #26
 80173ec:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80173ee:	9305      	str	r3, [sp, #20]
 80173f0:	eba3 0309 	sub.w	r3, r3, r9
 80173f4:	455b      	cmp	r3, fp
 80173f6:	dc33      	bgt.n	8017460 <_printf_float+0x384>
 80173f8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80173fc:	429a      	cmp	r2, r3
 80173fe:	db3b      	blt.n	8017478 <_printf_float+0x39c>
 8017400:	6823      	ldr	r3, [r4, #0]
 8017402:	07da      	lsls	r2, r3, #31
 8017404:	d438      	bmi.n	8017478 <_printf_float+0x39c>
 8017406:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017408:	9b05      	ldr	r3, [sp, #20]
 801740a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801740c:	1ad3      	subs	r3, r2, r3
 801740e:	eba2 0901 	sub.w	r9, r2, r1
 8017412:	4599      	cmp	r9, r3
 8017414:	bfa8      	it	ge
 8017416:	4699      	movge	r9, r3
 8017418:	f1b9 0f00 	cmp.w	r9, #0
 801741c:	dc35      	bgt.n	801748a <_printf_float+0x3ae>
 801741e:	f04f 0800 	mov.w	r8, #0
 8017422:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8017426:	f104 0a1a 	add.w	sl, r4, #26
 801742a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801742e:	1a9b      	subs	r3, r3, r2
 8017430:	eba3 0309 	sub.w	r3, r3, r9
 8017434:	4543      	cmp	r3, r8
 8017436:	f77f af79 	ble.w	801732c <_printf_float+0x250>
 801743a:	2301      	movs	r3, #1
 801743c:	4652      	mov	r2, sl
 801743e:	4631      	mov	r1, r6
 8017440:	4628      	mov	r0, r5
 8017442:	47b8      	blx	r7
 8017444:	3001      	adds	r0, #1
 8017446:	f43f aeaa 	beq.w	801719e <_printf_float+0xc2>
 801744a:	f108 0801 	add.w	r8, r8, #1
 801744e:	e7ec      	b.n	801742a <_printf_float+0x34e>
 8017450:	4613      	mov	r3, r2
 8017452:	4631      	mov	r1, r6
 8017454:	4642      	mov	r2, r8
 8017456:	4628      	mov	r0, r5
 8017458:	47b8      	blx	r7
 801745a:	3001      	adds	r0, #1
 801745c:	d1c0      	bne.n	80173e0 <_printf_float+0x304>
 801745e:	e69e      	b.n	801719e <_printf_float+0xc2>
 8017460:	2301      	movs	r3, #1
 8017462:	4631      	mov	r1, r6
 8017464:	4628      	mov	r0, r5
 8017466:	9205      	str	r2, [sp, #20]
 8017468:	47b8      	blx	r7
 801746a:	3001      	adds	r0, #1
 801746c:	f43f ae97 	beq.w	801719e <_printf_float+0xc2>
 8017470:	9a05      	ldr	r2, [sp, #20]
 8017472:	f10b 0b01 	add.w	fp, fp, #1
 8017476:	e7b9      	b.n	80173ec <_printf_float+0x310>
 8017478:	ee18 3a10 	vmov	r3, s16
 801747c:	4652      	mov	r2, sl
 801747e:	4631      	mov	r1, r6
 8017480:	4628      	mov	r0, r5
 8017482:	47b8      	blx	r7
 8017484:	3001      	adds	r0, #1
 8017486:	d1be      	bne.n	8017406 <_printf_float+0x32a>
 8017488:	e689      	b.n	801719e <_printf_float+0xc2>
 801748a:	9a05      	ldr	r2, [sp, #20]
 801748c:	464b      	mov	r3, r9
 801748e:	4442      	add	r2, r8
 8017490:	4631      	mov	r1, r6
 8017492:	4628      	mov	r0, r5
 8017494:	47b8      	blx	r7
 8017496:	3001      	adds	r0, #1
 8017498:	d1c1      	bne.n	801741e <_printf_float+0x342>
 801749a:	e680      	b.n	801719e <_printf_float+0xc2>
 801749c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801749e:	2a01      	cmp	r2, #1
 80174a0:	dc01      	bgt.n	80174a6 <_printf_float+0x3ca>
 80174a2:	07db      	lsls	r3, r3, #31
 80174a4:	d538      	bpl.n	8017518 <_printf_float+0x43c>
 80174a6:	2301      	movs	r3, #1
 80174a8:	4642      	mov	r2, r8
 80174aa:	4631      	mov	r1, r6
 80174ac:	4628      	mov	r0, r5
 80174ae:	47b8      	blx	r7
 80174b0:	3001      	adds	r0, #1
 80174b2:	f43f ae74 	beq.w	801719e <_printf_float+0xc2>
 80174b6:	ee18 3a10 	vmov	r3, s16
 80174ba:	4652      	mov	r2, sl
 80174bc:	4631      	mov	r1, r6
 80174be:	4628      	mov	r0, r5
 80174c0:	47b8      	blx	r7
 80174c2:	3001      	adds	r0, #1
 80174c4:	f43f ae6b 	beq.w	801719e <_printf_float+0xc2>
 80174c8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80174cc:	2200      	movs	r2, #0
 80174ce:	2300      	movs	r3, #0
 80174d0:	f7e9 fb0a 	bl	8000ae8 <__aeabi_dcmpeq>
 80174d4:	b9d8      	cbnz	r0, 801750e <_printf_float+0x432>
 80174d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80174d8:	f108 0201 	add.w	r2, r8, #1
 80174dc:	3b01      	subs	r3, #1
 80174de:	4631      	mov	r1, r6
 80174e0:	4628      	mov	r0, r5
 80174e2:	47b8      	blx	r7
 80174e4:	3001      	adds	r0, #1
 80174e6:	d10e      	bne.n	8017506 <_printf_float+0x42a>
 80174e8:	e659      	b.n	801719e <_printf_float+0xc2>
 80174ea:	2301      	movs	r3, #1
 80174ec:	4652      	mov	r2, sl
 80174ee:	4631      	mov	r1, r6
 80174f0:	4628      	mov	r0, r5
 80174f2:	47b8      	blx	r7
 80174f4:	3001      	adds	r0, #1
 80174f6:	f43f ae52 	beq.w	801719e <_printf_float+0xc2>
 80174fa:	f108 0801 	add.w	r8, r8, #1
 80174fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017500:	3b01      	subs	r3, #1
 8017502:	4543      	cmp	r3, r8
 8017504:	dcf1      	bgt.n	80174ea <_printf_float+0x40e>
 8017506:	464b      	mov	r3, r9
 8017508:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801750c:	e6dc      	b.n	80172c8 <_printf_float+0x1ec>
 801750e:	f04f 0800 	mov.w	r8, #0
 8017512:	f104 0a1a 	add.w	sl, r4, #26
 8017516:	e7f2      	b.n	80174fe <_printf_float+0x422>
 8017518:	2301      	movs	r3, #1
 801751a:	4642      	mov	r2, r8
 801751c:	e7df      	b.n	80174de <_printf_float+0x402>
 801751e:	2301      	movs	r3, #1
 8017520:	464a      	mov	r2, r9
 8017522:	4631      	mov	r1, r6
 8017524:	4628      	mov	r0, r5
 8017526:	47b8      	blx	r7
 8017528:	3001      	adds	r0, #1
 801752a:	f43f ae38 	beq.w	801719e <_printf_float+0xc2>
 801752e:	f108 0801 	add.w	r8, r8, #1
 8017532:	68e3      	ldr	r3, [r4, #12]
 8017534:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8017536:	1a5b      	subs	r3, r3, r1
 8017538:	4543      	cmp	r3, r8
 801753a:	dcf0      	bgt.n	801751e <_printf_float+0x442>
 801753c:	e6fa      	b.n	8017334 <_printf_float+0x258>
 801753e:	f04f 0800 	mov.w	r8, #0
 8017542:	f104 0919 	add.w	r9, r4, #25
 8017546:	e7f4      	b.n	8017532 <_printf_float+0x456>

08017548 <_printf_common>:
 8017548:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801754c:	4616      	mov	r6, r2
 801754e:	4699      	mov	r9, r3
 8017550:	688a      	ldr	r2, [r1, #8]
 8017552:	690b      	ldr	r3, [r1, #16]
 8017554:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8017558:	4293      	cmp	r3, r2
 801755a:	bfb8      	it	lt
 801755c:	4613      	movlt	r3, r2
 801755e:	6033      	str	r3, [r6, #0]
 8017560:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8017564:	4607      	mov	r7, r0
 8017566:	460c      	mov	r4, r1
 8017568:	b10a      	cbz	r2, 801756e <_printf_common+0x26>
 801756a:	3301      	adds	r3, #1
 801756c:	6033      	str	r3, [r6, #0]
 801756e:	6823      	ldr	r3, [r4, #0]
 8017570:	0699      	lsls	r1, r3, #26
 8017572:	bf42      	ittt	mi
 8017574:	6833      	ldrmi	r3, [r6, #0]
 8017576:	3302      	addmi	r3, #2
 8017578:	6033      	strmi	r3, [r6, #0]
 801757a:	6825      	ldr	r5, [r4, #0]
 801757c:	f015 0506 	ands.w	r5, r5, #6
 8017580:	d106      	bne.n	8017590 <_printf_common+0x48>
 8017582:	f104 0a19 	add.w	sl, r4, #25
 8017586:	68e3      	ldr	r3, [r4, #12]
 8017588:	6832      	ldr	r2, [r6, #0]
 801758a:	1a9b      	subs	r3, r3, r2
 801758c:	42ab      	cmp	r3, r5
 801758e:	dc26      	bgt.n	80175de <_printf_common+0x96>
 8017590:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8017594:	1e13      	subs	r3, r2, #0
 8017596:	6822      	ldr	r2, [r4, #0]
 8017598:	bf18      	it	ne
 801759a:	2301      	movne	r3, #1
 801759c:	0692      	lsls	r2, r2, #26
 801759e:	d42b      	bmi.n	80175f8 <_printf_common+0xb0>
 80175a0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80175a4:	4649      	mov	r1, r9
 80175a6:	4638      	mov	r0, r7
 80175a8:	47c0      	blx	r8
 80175aa:	3001      	adds	r0, #1
 80175ac:	d01e      	beq.n	80175ec <_printf_common+0xa4>
 80175ae:	6823      	ldr	r3, [r4, #0]
 80175b0:	68e5      	ldr	r5, [r4, #12]
 80175b2:	6832      	ldr	r2, [r6, #0]
 80175b4:	f003 0306 	and.w	r3, r3, #6
 80175b8:	2b04      	cmp	r3, #4
 80175ba:	bf08      	it	eq
 80175bc:	1aad      	subeq	r5, r5, r2
 80175be:	68a3      	ldr	r3, [r4, #8]
 80175c0:	6922      	ldr	r2, [r4, #16]
 80175c2:	bf0c      	ite	eq
 80175c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80175c8:	2500      	movne	r5, #0
 80175ca:	4293      	cmp	r3, r2
 80175cc:	bfc4      	itt	gt
 80175ce:	1a9b      	subgt	r3, r3, r2
 80175d0:	18ed      	addgt	r5, r5, r3
 80175d2:	2600      	movs	r6, #0
 80175d4:	341a      	adds	r4, #26
 80175d6:	42b5      	cmp	r5, r6
 80175d8:	d11a      	bne.n	8017610 <_printf_common+0xc8>
 80175da:	2000      	movs	r0, #0
 80175dc:	e008      	b.n	80175f0 <_printf_common+0xa8>
 80175de:	2301      	movs	r3, #1
 80175e0:	4652      	mov	r2, sl
 80175e2:	4649      	mov	r1, r9
 80175e4:	4638      	mov	r0, r7
 80175e6:	47c0      	blx	r8
 80175e8:	3001      	adds	r0, #1
 80175ea:	d103      	bne.n	80175f4 <_printf_common+0xac>
 80175ec:	f04f 30ff 	mov.w	r0, #4294967295
 80175f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80175f4:	3501      	adds	r5, #1
 80175f6:	e7c6      	b.n	8017586 <_printf_common+0x3e>
 80175f8:	18e1      	adds	r1, r4, r3
 80175fa:	1c5a      	adds	r2, r3, #1
 80175fc:	2030      	movs	r0, #48	; 0x30
 80175fe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8017602:	4422      	add	r2, r4
 8017604:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8017608:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801760c:	3302      	adds	r3, #2
 801760e:	e7c7      	b.n	80175a0 <_printf_common+0x58>
 8017610:	2301      	movs	r3, #1
 8017612:	4622      	mov	r2, r4
 8017614:	4649      	mov	r1, r9
 8017616:	4638      	mov	r0, r7
 8017618:	47c0      	blx	r8
 801761a:	3001      	adds	r0, #1
 801761c:	d0e6      	beq.n	80175ec <_printf_common+0xa4>
 801761e:	3601      	adds	r6, #1
 8017620:	e7d9      	b.n	80175d6 <_printf_common+0x8e>
	...

08017624 <_printf_i>:
 8017624:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8017628:	460c      	mov	r4, r1
 801762a:	4691      	mov	r9, r2
 801762c:	7e27      	ldrb	r7, [r4, #24]
 801762e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8017630:	2f78      	cmp	r7, #120	; 0x78
 8017632:	4680      	mov	r8, r0
 8017634:	469a      	mov	sl, r3
 8017636:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801763a:	d807      	bhi.n	801764c <_printf_i+0x28>
 801763c:	2f62      	cmp	r7, #98	; 0x62
 801763e:	d80a      	bhi.n	8017656 <_printf_i+0x32>
 8017640:	2f00      	cmp	r7, #0
 8017642:	f000 80d8 	beq.w	80177f6 <_printf_i+0x1d2>
 8017646:	2f58      	cmp	r7, #88	; 0x58
 8017648:	f000 80a3 	beq.w	8017792 <_printf_i+0x16e>
 801764c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8017650:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8017654:	e03a      	b.n	80176cc <_printf_i+0xa8>
 8017656:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801765a:	2b15      	cmp	r3, #21
 801765c:	d8f6      	bhi.n	801764c <_printf_i+0x28>
 801765e:	a001      	add	r0, pc, #4	; (adr r0, 8017664 <_printf_i+0x40>)
 8017660:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8017664:	080176bd 	.word	0x080176bd
 8017668:	080176d1 	.word	0x080176d1
 801766c:	0801764d 	.word	0x0801764d
 8017670:	0801764d 	.word	0x0801764d
 8017674:	0801764d 	.word	0x0801764d
 8017678:	0801764d 	.word	0x0801764d
 801767c:	080176d1 	.word	0x080176d1
 8017680:	0801764d 	.word	0x0801764d
 8017684:	0801764d 	.word	0x0801764d
 8017688:	0801764d 	.word	0x0801764d
 801768c:	0801764d 	.word	0x0801764d
 8017690:	080177dd 	.word	0x080177dd
 8017694:	08017701 	.word	0x08017701
 8017698:	080177bf 	.word	0x080177bf
 801769c:	0801764d 	.word	0x0801764d
 80176a0:	0801764d 	.word	0x0801764d
 80176a4:	080177ff 	.word	0x080177ff
 80176a8:	0801764d 	.word	0x0801764d
 80176ac:	08017701 	.word	0x08017701
 80176b0:	0801764d 	.word	0x0801764d
 80176b4:	0801764d 	.word	0x0801764d
 80176b8:	080177c7 	.word	0x080177c7
 80176bc:	680b      	ldr	r3, [r1, #0]
 80176be:	1d1a      	adds	r2, r3, #4
 80176c0:	681b      	ldr	r3, [r3, #0]
 80176c2:	600a      	str	r2, [r1, #0]
 80176c4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80176c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80176cc:	2301      	movs	r3, #1
 80176ce:	e0a3      	b.n	8017818 <_printf_i+0x1f4>
 80176d0:	6825      	ldr	r5, [r4, #0]
 80176d2:	6808      	ldr	r0, [r1, #0]
 80176d4:	062e      	lsls	r6, r5, #24
 80176d6:	f100 0304 	add.w	r3, r0, #4
 80176da:	d50a      	bpl.n	80176f2 <_printf_i+0xce>
 80176dc:	6805      	ldr	r5, [r0, #0]
 80176de:	600b      	str	r3, [r1, #0]
 80176e0:	2d00      	cmp	r5, #0
 80176e2:	da03      	bge.n	80176ec <_printf_i+0xc8>
 80176e4:	232d      	movs	r3, #45	; 0x2d
 80176e6:	426d      	negs	r5, r5
 80176e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80176ec:	485e      	ldr	r0, [pc, #376]	; (8017868 <_printf_i+0x244>)
 80176ee:	230a      	movs	r3, #10
 80176f0:	e019      	b.n	8017726 <_printf_i+0x102>
 80176f2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80176f6:	6805      	ldr	r5, [r0, #0]
 80176f8:	600b      	str	r3, [r1, #0]
 80176fa:	bf18      	it	ne
 80176fc:	b22d      	sxthne	r5, r5
 80176fe:	e7ef      	b.n	80176e0 <_printf_i+0xbc>
 8017700:	680b      	ldr	r3, [r1, #0]
 8017702:	6825      	ldr	r5, [r4, #0]
 8017704:	1d18      	adds	r0, r3, #4
 8017706:	6008      	str	r0, [r1, #0]
 8017708:	0628      	lsls	r0, r5, #24
 801770a:	d501      	bpl.n	8017710 <_printf_i+0xec>
 801770c:	681d      	ldr	r5, [r3, #0]
 801770e:	e002      	b.n	8017716 <_printf_i+0xf2>
 8017710:	0669      	lsls	r1, r5, #25
 8017712:	d5fb      	bpl.n	801770c <_printf_i+0xe8>
 8017714:	881d      	ldrh	r5, [r3, #0]
 8017716:	4854      	ldr	r0, [pc, #336]	; (8017868 <_printf_i+0x244>)
 8017718:	2f6f      	cmp	r7, #111	; 0x6f
 801771a:	bf0c      	ite	eq
 801771c:	2308      	moveq	r3, #8
 801771e:	230a      	movne	r3, #10
 8017720:	2100      	movs	r1, #0
 8017722:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8017726:	6866      	ldr	r6, [r4, #4]
 8017728:	60a6      	str	r6, [r4, #8]
 801772a:	2e00      	cmp	r6, #0
 801772c:	bfa2      	ittt	ge
 801772e:	6821      	ldrge	r1, [r4, #0]
 8017730:	f021 0104 	bicge.w	r1, r1, #4
 8017734:	6021      	strge	r1, [r4, #0]
 8017736:	b90d      	cbnz	r5, 801773c <_printf_i+0x118>
 8017738:	2e00      	cmp	r6, #0
 801773a:	d04d      	beq.n	80177d8 <_printf_i+0x1b4>
 801773c:	4616      	mov	r6, r2
 801773e:	fbb5 f1f3 	udiv	r1, r5, r3
 8017742:	fb03 5711 	mls	r7, r3, r1, r5
 8017746:	5dc7      	ldrb	r7, [r0, r7]
 8017748:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801774c:	462f      	mov	r7, r5
 801774e:	42bb      	cmp	r3, r7
 8017750:	460d      	mov	r5, r1
 8017752:	d9f4      	bls.n	801773e <_printf_i+0x11a>
 8017754:	2b08      	cmp	r3, #8
 8017756:	d10b      	bne.n	8017770 <_printf_i+0x14c>
 8017758:	6823      	ldr	r3, [r4, #0]
 801775a:	07df      	lsls	r7, r3, #31
 801775c:	d508      	bpl.n	8017770 <_printf_i+0x14c>
 801775e:	6923      	ldr	r3, [r4, #16]
 8017760:	6861      	ldr	r1, [r4, #4]
 8017762:	4299      	cmp	r1, r3
 8017764:	bfde      	ittt	le
 8017766:	2330      	movle	r3, #48	; 0x30
 8017768:	f806 3c01 	strble.w	r3, [r6, #-1]
 801776c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8017770:	1b92      	subs	r2, r2, r6
 8017772:	6122      	str	r2, [r4, #16]
 8017774:	f8cd a000 	str.w	sl, [sp]
 8017778:	464b      	mov	r3, r9
 801777a:	aa03      	add	r2, sp, #12
 801777c:	4621      	mov	r1, r4
 801777e:	4640      	mov	r0, r8
 8017780:	f7ff fee2 	bl	8017548 <_printf_common>
 8017784:	3001      	adds	r0, #1
 8017786:	d14c      	bne.n	8017822 <_printf_i+0x1fe>
 8017788:	f04f 30ff 	mov.w	r0, #4294967295
 801778c:	b004      	add	sp, #16
 801778e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017792:	4835      	ldr	r0, [pc, #212]	; (8017868 <_printf_i+0x244>)
 8017794:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8017798:	6823      	ldr	r3, [r4, #0]
 801779a:	680e      	ldr	r6, [r1, #0]
 801779c:	061f      	lsls	r7, r3, #24
 801779e:	f856 5b04 	ldr.w	r5, [r6], #4
 80177a2:	600e      	str	r6, [r1, #0]
 80177a4:	d514      	bpl.n	80177d0 <_printf_i+0x1ac>
 80177a6:	07d9      	lsls	r1, r3, #31
 80177a8:	bf44      	itt	mi
 80177aa:	f043 0320 	orrmi.w	r3, r3, #32
 80177ae:	6023      	strmi	r3, [r4, #0]
 80177b0:	b91d      	cbnz	r5, 80177ba <_printf_i+0x196>
 80177b2:	6823      	ldr	r3, [r4, #0]
 80177b4:	f023 0320 	bic.w	r3, r3, #32
 80177b8:	6023      	str	r3, [r4, #0]
 80177ba:	2310      	movs	r3, #16
 80177bc:	e7b0      	b.n	8017720 <_printf_i+0xfc>
 80177be:	6823      	ldr	r3, [r4, #0]
 80177c0:	f043 0320 	orr.w	r3, r3, #32
 80177c4:	6023      	str	r3, [r4, #0]
 80177c6:	2378      	movs	r3, #120	; 0x78
 80177c8:	4828      	ldr	r0, [pc, #160]	; (801786c <_printf_i+0x248>)
 80177ca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80177ce:	e7e3      	b.n	8017798 <_printf_i+0x174>
 80177d0:	065e      	lsls	r6, r3, #25
 80177d2:	bf48      	it	mi
 80177d4:	b2ad      	uxthmi	r5, r5
 80177d6:	e7e6      	b.n	80177a6 <_printf_i+0x182>
 80177d8:	4616      	mov	r6, r2
 80177da:	e7bb      	b.n	8017754 <_printf_i+0x130>
 80177dc:	680b      	ldr	r3, [r1, #0]
 80177de:	6826      	ldr	r6, [r4, #0]
 80177e0:	6960      	ldr	r0, [r4, #20]
 80177e2:	1d1d      	adds	r5, r3, #4
 80177e4:	600d      	str	r5, [r1, #0]
 80177e6:	0635      	lsls	r5, r6, #24
 80177e8:	681b      	ldr	r3, [r3, #0]
 80177ea:	d501      	bpl.n	80177f0 <_printf_i+0x1cc>
 80177ec:	6018      	str	r0, [r3, #0]
 80177ee:	e002      	b.n	80177f6 <_printf_i+0x1d2>
 80177f0:	0671      	lsls	r1, r6, #25
 80177f2:	d5fb      	bpl.n	80177ec <_printf_i+0x1c8>
 80177f4:	8018      	strh	r0, [r3, #0]
 80177f6:	2300      	movs	r3, #0
 80177f8:	6123      	str	r3, [r4, #16]
 80177fa:	4616      	mov	r6, r2
 80177fc:	e7ba      	b.n	8017774 <_printf_i+0x150>
 80177fe:	680b      	ldr	r3, [r1, #0]
 8017800:	1d1a      	adds	r2, r3, #4
 8017802:	600a      	str	r2, [r1, #0]
 8017804:	681e      	ldr	r6, [r3, #0]
 8017806:	6862      	ldr	r2, [r4, #4]
 8017808:	2100      	movs	r1, #0
 801780a:	4630      	mov	r0, r6
 801780c:	f7e8 fcf8 	bl	8000200 <memchr>
 8017810:	b108      	cbz	r0, 8017816 <_printf_i+0x1f2>
 8017812:	1b80      	subs	r0, r0, r6
 8017814:	6060      	str	r0, [r4, #4]
 8017816:	6863      	ldr	r3, [r4, #4]
 8017818:	6123      	str	r3, [r4, #16]
 801781a:	2300      	movs	r3, #0
 801781c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017820:	e7a8      	b.n	8017774 <_printf_i+0x150>
 8017822:	6923      	ldr	r3, [r4, #16]
 8017824:	4632      	mov	r2, r6
 8017826:	4649      	mov	r1, r9
 8017828:	4640      	mov	r0, r8
 801782a:	47d0      	blx	sl
 801782c:	3001      	adds	r0, #1
 801782e:	d0ab      	beq.n	8017788 <_printf_i+0x164>
 8017830:	6823      	ldr	r3, [r4, #0]
 8017832:	079b      	lsls	r3, r3, #30
 8017834:	d413      	bmi.n	801785e <_printf_i+0x23a>
 8017836:	68e0      	ldr	r0, [r4, #12]
 8017838:	9b03      	ldr	r3, [sp, #12]
 801783a:	4298      	cmp	r0, r3
 801783c:	bfb8      	it	lt
 801783e:	4618      	movlt	r0, r3
 8017840:	e7a4      	b.n	801778c <_printf_i+0x168>
 8017842:	2301      	movs	r3, #1
 8017844:	4632      	mov	r2, r6
 8017846:	4649      	mov	r1, r9
 8017848:	4640      	mov	r0, r8
 801784a:	47d0      	blx	sl
 801784c:	3001      	adds	r0, #1
 801784e:	d09b      	beq.n	8017788 <_printf_i+0x164>
 8017850:	3501      	adds	r5, #1
 8017852:	68e3      	ldr	r3, [r4, #12]
 8017854:	9903      	ldr	r1, [sp, #12]
 8017856:	1a5b      	subs	r3, r3, r1
 8017858:	42ab      	cmp	r3, r5
 801785a:	dcf2      	bgt.n	8017842 <_printf_i+0x21e>
 801785c:	e7eb      	b.n	8017836 <_printf_i+0x212>
 801785e:	2500      	movs	r5, #0
 8017860:	f104 0619 	add.w	r6, r4, #25
 8017864:	e7f5      	b.n	8017852 <_printf_i+0x22e>
 8017866:	bf00      	nop
 8017868:	0801fbf6 	.word	0x0801fbf6
 801786c:	0801fc07 	.word	0x0801fc07

08017870 <iprintf>:
 8017870:	b40f      	push	{r0, r1, r2, r3}
 8017872:	4b0a      	ldr	r3, [pc, #40]	; (801789c <iprintf+0x2c>)
 8017874:	b513      	push	{r0, r1, r4, lr}
 8017876:	681c      	ldr	r4, [r3, #0]
 8017878:	b124      	cbz	r4, 8017884 <iprintf+0x14>
 801787a:	69a3      	ldr	r3, [r4, #24]
 801787c:	b913      	cbnz	r3, 8017884 <iprintf+0x14>
 801787e:	4620      	mov	r0, r4
 8017880:	f001 fe94 	bl	80195ac <__sinit>
 8017884:	ab05      	add	r3, sp, #20
 8017886:	9a04      	ldr	r2, [sp, #16]
 8017888:	68a1      	ldr	r1, [r4, #8]
 801788a:	9301      	str	r3, [sp, #4]
 801788c:	4620      	mov	r0, r4
 801788e:	f003 f921 	bl	801aad4 <_vfiprintf_r>
 8017892:	b002      	add	sp, #8
 8017894:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017898:	b004      	add	sp, #16
 801789a:	4770      	bx	lr
 801789c:	20000074 	.word	0x20000074

080178a0 <rand>:
 80178a0:	4b17      	ldr	r3, [pc, #92]	; (8017900 <rand+0x60>)
 80178a2:	b510      	push	{r4, lr}
 80178a4:	681c      	ldr	r4, [r3, #0]
 80178a6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80178a8:	b9b3      	cbnz	r3, 80178d8 <rand+0x38>
 80178aa:	2018      	movs	r0, #24
 80178ac:	f7ff fa7e 	bl	8016dac <malloc>
 80178b0:	63a0      	str	r0, [r4, #56]	; 0x38
 80178b2:	b928      	cbnz	r0, 80178c0 <rand+0x20>
 80178b4:	4602      	mov	r2, r0
 80178b6:	4b13      	ldr	r3, [pc, #76]	; (8017904 <rand+0x64>)
 80178b8:	4813      	ldr	r0, [pc, #76]	; (8017908 <rand+0x68>)
 80178ba:	214e      	movs	r1, #78	; 0x4e
 80178bc:	f000 ff80 	bl	80187c0 <__assert_func>
 80178c0:	4a12      	ldr	r2, [pc, #72]	; (801790c <rand+0x6c>)
 80178c2:	4b13      	ldr	r3, [pc, #76]	; (8017910 <rand+0x70>)
 80178c4:	e9c0 2300 	strd	r2, r3, [r0]
 80178c8:	4b12      	ldr	r3, [pc, #72]	; (8017914 <rand+0x74>)
 80178ca:	6083      	str	r3, [r0, #8]
 80178cc:	230b      	movs	r3, #11
 80178ce:	8183      	strh	r3, [r0, #12]
 80178d0:	2201      	movs	r2, #1
 80178d2:	2300      	movs	r3, #0
 80178d4:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80178d8:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80178da:	480f      	ldr	r0, [pc, #60]	; (8017918 <rand+0x78>)
 80178dc:	690a      	ldr	r2, [r1, #16]
 80178de:	694b      	ldr	r3, [r1, #20]
 80178e0:	4c0e      	ldr	r4, [pc, #56]	; (801791c <rand+0x7c>)
 80178e2:	4350      	muls	r0, r2
 80178e4:	fb04 0003 	mla	r0, r4, r3, r0
 80178e8:	fba2 3404 	umull	r3, r4, r2, r4
 80178ec:	1c5a      	adds	r2, r3, #1
 80178ee:	4404      	add	r4, r0
 80178f0:	f144 0000 	adc.w	r0, r4, #0
 80178f4:	e9c1 2004 	strd	r2, r0, [r1, #16]
 80178f8:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80178fc:	bd10      	pop	{r4, pc}
 80178fe:	bf00      	nop
 8017900:	20000074 	.word	0x20000074
 8017904:	0801fc18 	.word	0x0801fc18
 8017908:	0801fc2f 	.word	0x0801fc2f
 801790c:	abcd330e 	.word	0xabcd330e
 8017910:	e66d1234 	.word	0xe66d1234
 8017914:	0005deec 	.word	0x0005deec
 8017918:	5851f42d 	.word	0x5851f42d
 801791c:	4c957f2d 	.word	0x4c957f2d

08017920 <_sbrk_r>:
 8017920:	b538      	push	{r3, r4, r5, lr}
 8017922:	4d06      	ldr	r5, [pc, #24]	; (801793c <_sbrk_r+0x1c>)
 8017924:	2300      	movs	r3, #0
 8017926:	4604      	mov	r4, r0
 8017928:	4608      	mov	r0, r1
 801792a:	602b      	str	r3, [r5, #0]
 801792c:	f7ed fa1c 	bl	8004d68 <_sbrk>
 8017930:	1c43      	adds	r3, r0, #1
 8017932:	d102      	bne.n	801793a <_sbrk_r+0x1a>
 8017934:	682b      	ldr	r3, [r5, #0]
 8017936:	b103      	cbz	r3, 801793a <_sbrk_r+0x1a>
 8017938:	6023      	str	r3, [r4, #0]
 801793a:	bd38      	pop	{r3, r4, r5, pc}
 801793c:	20006e80 	.word	0x20006e80

08017940 <sniprintf>:
 8017940:	b40c      	push	{r2, r3}
 8017942:	b530      	push	{r4, r5, lr}
 8017944:	4b17      	ldr	r3, [pc, #92]	; (80179a4 <sniprintf+0x64>)
 8017946:	1e0c      	subs	r4, r1, #0
 8017948:	681d      	ldr	r5, [r3, #0]
 801794a:	b09d      	sub	sp, #116	; 0x74
 801794c:	da08      	bge.n	8017960 <sniprintf+0x20>
 801794e:	238b      	movs	r3, #139	; 0x8b
 8017950:	602b      	str	r3, [r5, #0]
 8017952:	f04f 30ff 	mov.w	r0, #4294967295
 8017956:	b01d      	add	sp, #116	; 0x74
 8017958:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801795c:	b002      	add	sp, #8
 801795e:	4770      	bx	lr
 8017960:	f44f 7302 	mov.w	r3, #520	; 0x208
 8017964:	f8ad 3014 	strh.w	r3, [sp, #20]
 8017968:	bf14      	ite	ne
 801796a:	f104 33ff 	addne.w	r3, r4, #4294967295
 801796e:	4623      	moveq	r3, r4
 8017970:	9304      	str	r3, [sp, #16]
 8017972:	9307      	str	r3, [sp, #28]
 8017974:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017978:	9002      	str	r0, [sp, #8]
 801797a:	9006      	str	r0, [sp, #24]
 801797c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8017980:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8017982:	ab21      	add	r3, sp, #132	; 0x84
 8017984:	a902      	add	r1, sp, #8
 8017986:	4628      	mov	r0, r5
 8017988:	9301      	str	r3, [sp, #4]
 801798a:	f002 ff79 	bl	801a880 <_svfiprintf_r>
 801798e:	1c43      	adds	r3, r0, #1
 8017990:	bfbc      	itt	lt
 8017992:	238b      	movlt	r3, #139	; 0x8b
 8017994:	602b      	strlt	r3, [r5, #0]
 8017996:	2c00      	cmp	r4, #0
 8017998:	d0dd      	beq.n	8017956 <sniprintf+0x16>
 801799a:	9b02      	ldr	r3, [sp, #8]
 801799c:	2200      	movs	r2, #0
 801799e:	701a      	strb	r2, [r3, #0]
 80179a0:	e7d9      	b.n	8017956 <sniprintf+0x16>
 80179a2:	bf00      	nop
 80179a4:	20000074 	.word	0x20000074

080179a8 <siprintf>:
 80179a8:	b40e      	push	{r1, r2, r3}
 80179aa:	b500      	push	{lr}
 80179ac:	b09c      	sub	sp, #112	; 0x70
 80179ae:	ab1d      	add	r3, sp, #116	; 0x74
 80179b0:	9002      	str	r0, [sp, #8]
 80179b2:	9006      	str	r0, [sp, #24]
 80179b4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80179b8:	4809      	ldr	r0, [pc, #36]	; (80179e0 <siprintf+0x38>)
 80179ba:	9107      	str	r1, [sp, #28]
 80179bc:	9104      	str	r1, [sp, #16]
 80179be:	4909      	ldr	r1, [pc, #36]	; (80179e4 <siprintf+0x3c>)
 80179c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80179c4:	9105      	str	r1, [sp, #20]
 80179c6:	6800      	ldr	r0, [r0, #0]
 80179c8:	9301      	str	r3, [sp, #4]
 80179ca:	a902      	add	r1, sp, #8
 80179cc:	f002 ff58 	bl	801a880 <_svfiprintf_r>
 80179d0:	9b02      	ldr	r3, [sp, #8]
 80179d2:	2200      	movs	r2, #0
 80179d4:	701a      	strb	r2, [r3, #0]
 80179d6:	b01c      	add	sp, #112	; 0x70
 80179d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80179dc:	b003      	add	sp, #12
 80179de:	4770      	bx	lr
 80179e0:	20000074 	.word	0x20000074
 80179e4:	ffff0208 	.word	0xffff0208

080179e8 <strncmp>:
 80179e8:	b510      	push	{r4, lr}
 80179ea:	b16a      	cbz	r2, 8017a08 <strncmp+0x20>
 80179ec:	3901      	subs	r1, #1
 80179ee:	1884      	adds	r4, r0, r2
 80179f0:	f810 3b01 	ldrb.w	r3, [r0], #1
 80179f4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80179f8:	4293      	cmp	r3, r2
 80179fa:	d103      	bne.n	8017a04 <strncmp+0x1c>
 80179fc:	42a0      	cmp	r0, r4
 80179fe:	d001      	beq.n	8017a04 <strncmp+0x1c>
 8017a00:	2b00      	cmp	r3, #0
 8017a02:	d1f5      	bne.n	80179f0 <strncmp+0x8>
 8017a04:	1a98      	subs	r0, r3, r2
 8017a06:	bd10      	pop	{r4, pc}
 8017a08:	4610      	mov	r0, r2
 8017a0a:	e7fc      	b.n	8017a06 <strncmp+0x1e>

08017a0c <strstr>:
 8017a0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017a0e:	780c      	ldrb	r4, [r1, #0]
 8017a10:	b164      	cbz	r4, 8017a2c <strstr+0x20>
 8017a12:	4603      	mov	r3, r0
 8017a14:	781a      	ldrb	r2, [r3, #0]
 8017a16:	4618      	mov	r0, r3
 8017a18:	1c5e      	adds	r6, r3, #1
 8017a1a:	b90a      	cbnz	r2, 8017a20 <strstr+0x14>
 8017a1c:	4610      	mov	r0, r2
 8017a1e:	e005      	b.n	8017a2c <strstr+0x20>
 8017a20:	4294      	cmp	r4, r2
 8017a22:	d108      	bne.n	8017a36 <strstr+0x2a>
 8017a24:	460d      	mov	r5, r1
 8017a26:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8017a2a:	b902      	cbnz	r2, 8017a2e <strstr+0x22>
 8017a2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017a2e:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8017a32:	4297      	cmp	r7, r2
 8017a34:	d0f7      	beq.n	8017a26 <strstr+0x1a>
 8017a36:	4633      	mov	r3, r6
 8017a38:	e7ec      	b.n	8017a14 <strstr+0x8>

08017a3a <sulp>:
 8017a3a:	b570      	push	{r4, r5, r6, lr}
 8017a3c:	4604      	mov	r4, r0
 8017a3e:	460d      	mov	r5, r1
 8017a40:	ec45 4b10 	vmov	d0, r4, r5
 8017a44:	4616      	mov	r6, r2
 8017a46:	f002 fd61 	bl	801a50c <__ulp>
 8017a4a:	ec51 0b10 	vmov	r0, r1, d0
 8017a4e:	b17e      	cbz	r6, 8017a70 <sulp+0x36>
 8017a50:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8017a54:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8017a58:	2b00      	cmp	r3, #0
 8017a5a:	dd09      	ble.n	8017a70 <sulp+0x36>
 8017a5c:	051b      	lsls	r3, r3, #20
 8017a5e:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8017a62:	2400      	movs	r4, #0
 8017a64:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8017a68:	4622      	mov	r2, r4
 8017a6a:	462b      	mov	r3, r5
 8017a6c:	f7e8 fdd4 	bl	8000618 <__aeabi_dmul>
 8017a70:	bd70      	pop	{r4, r5, r6, pc}
 8017a72:	0000      	movs	r0, r0
 8017a74:	0000      	movs	r0, r0
	...

08017a78 <_strtod_l>:
 8017a78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017a7c:	b0a3      	sub	sp, #140	; 0x8c
 8017a7e:	461f      	mov	r7, r3
 8017a80:	2300      	movs	r3, #0
 8017a82:	931e      	str	r3, [sp, #120]	; 0x78
 8017a84:	4ba4      	ldr	r3, [pc, #656]	; (8017d18 <_strtod_l+0x2a0>)
 8017a86:	9219      	str	r2, [sp, #100]	; 0x64
 8017a88:	681b      	ldr	r3, [r3, #0]
 8017a8a:	9307      	str	r3, [sp, #28]
 8017a8c:	4604      	mov	r4, r0
 8017a8e:	4618      	mov	r0, r3
 8017a90:	4688      	mov	r8, r1
 8017a92:	f7e8 fba7 	bl	80001e4 <strlen>
 8017a96:	f04f 0a00 	mov.w	sl, #0
 8017a9a:	4605      	mov	r5, r0
 8017a9c:	f04f 0b00 	mov.w	fp, #0
 8017aa0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8017aa4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8017aa6:	781a      	ldrb	r2, [r3, #0]
 8017aa8:	2a2b      	cmp	r2, #43	; 0x2b
 8017aaa:	d04c      	beq.n	8017b46 <_strtod_l+0xce>
 8017aac:	d839      	bhi.n	8017b22 <_strtod_l+0xaa>
 8017aae:	2a0d      	cmp	r2, #13
 8017ab0:	d832      	bhi.n	8017b18 <_strtod_l+0xa0>
 8017ab2:	2a08      	cmp	r2, #8
 8017ab4:	d832      	bhi.n	8017b1c <_strtod_l+0xa4>
 8017ab6:	2a00      	cmp	r2, #0
 8017ab8:	d03c      	beq.n	8017b34 <_strtod_l+0xbc>
 8017aba:	2300      	movs	r3, #0
 8017abc:	930e      	str	r3, [sp, #56]	; 0x38
 8017abe:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8017ac0:	7833      	ldrb	r3, [r6, #0]
 8017ac2:	2b30      	cmp	r3, #48	; 0x30
 8017ac4:	f040 80b4 	bne.w	8017c30 <_strtod_l+0x1b8>
 8017ac8:	7873      	ldrb	r3, [r6, #1]
 8017aca:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8017ace:	2b58      	cmp	r3, #88	; 0x58
 8017ad0:	d16c      	bne.n	8017bac <_strtod_l+0x134>
 8017ad2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017ad4:	9301      	str	r3, [sp, #4]
 8017ad6:	ab1e      	add	r3, sp, #120	; 0x78
 8017ad8:	9702      	str	r7, [sp, #8]
 8017ada:	9300      	str	r3, [sp, #0]
 8017adc:	4a8f      	ldr	r2, [pc, #572]	; (8017d1c <_strtod_l+0x2a4>)
 8017ade:	ab1f      	add	r3, sp, #124	; 0x7c
 8017ae0:	a91d      	add	r1, sp, #116	; 0x74
 8017ae2:	4620      	mov	r0, r4
 8017ae4:	f001 fe78 	bl	80197d8 <__gethex>
 8017ae8:	f010 0707 	ands.w	r7, r0, #7
 8017aec:	4605      	mov	r5, r0
 8017aee:	d005      	beq.n	8017afc <_strtod_l+0x84>
 8017af0:	2f06      	cmp	r7, #6
 8017af2:	d12a      	bne.n	8017b4a <_strtod_l+0xd2>
 8017af4:	3601      	adds	r6, #1
 8017af6:	2300      	movs	r3, #0
 8017af8:	961d      	str	r6, [sp, #116]	; 0x74
 8017afa:	930e      	str	r3, [sp, #56]	; 0x38
 8017afc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8017afe:	2b00      	cmp	r3, #0
 8017b00:	f040 8596 	bne.w	8018630 <_strtod_l+0xbb8>
 8017b04:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017b06:	b1db      	cbz	r3, 8017b40 <_strtod_l+0xc8>
 8017b08:	4652      	mov	r2, sl
 8017b0a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8017b0e:	ec43 2b10 	vmov	d0, r2, r3
 8017b12:	b023      	add	sp, #140	; 0x8c
 8017b14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017b18:	2a20      	cmp	r2, #32
 8017b1a:	d1ce      	bne.n	8017aba <_strtod_l+0x42>
 8017b1c:	3301      	adds	r3, #1
 8017b1e:	931d      	str	r3, [sp, #116]	; 0x74
 8017b20:	e7c0      	b.n	8017aa4 <_strtod_l+0x2c>
 8017b22:	2a2d      	cmp	r2, #45	; 0x2d
 8017b24:	d1c9      	bne.n	8017aba <_strtod_l+0x42>
 8017b26:	2201      	movs	r2, #1
 8017b28:	920e      	str	r2, [sp, #56]	; 0x38
 8017b2a:	1c5a      	adds	r2, r3, #1
 8017b2c:	921d      	str	r2, [sp, #116]	; 0x74
 8017b2e:	785b      	ldrb	r3, [r3, #1]
 8017b30:	2b00      	cmp	r3, #0
 8017b32:	d1c4      	bne.n	8017abe <_strtod_l+0x46>
 8017b34:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8017b36:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8017b3a:	2b00      	cmp	r3, #0
 8017b3c:	f040 8576 	bne.w	801862c <_strtod_l+0xbb4>
 8017b40:	4652      	mov	r2, sl
 8017b42:	465b      	mov	r3, fp
 8017b44:	e7e3      	b.n	8017b0e <_strtod_l+0x96>
 8017b46:	2200      	movs	r2, #0
 8017b48:	e7ee      	b.n	8017b28 <_strtod_l+0xb0>
 8017b4a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8017b4c:	b13a      	cbz	r2, 8017b5e <_strtod_l+0xe6>
 8017b4e:	2135      	movs	r1, #53	; 0x35
 8017b50:	a820      	add	r0, sp, #128	; 0x80
 8017b52:	f002 fde6 	bl	801a722 <__copybits>
 8017b56:	991e      	ldr	r1, [sp, #120]	; 0x78
 8017b58:	4620      	mov	r0, r4
 8017b5a:	f002 f9ab 	bl	8019eb4 <_Bfree>
 8017b5e:	3f01      	subs	r7, #1
 8017b60:	2f05      	cmp	r7, #5
 8017b62:	d807      	bhi.n	8017b74 <_strtod_l+0xfc>
 8017b64:	e8df f007 	tbb	[pc, r7]
 8017b68:	1d180b0e 	.word	0x1d180b0e
 8017b6c:	030e      	.short	0x030e
 8017b6e:	f04f 0b00 	mov.w	fp, #0
 8017b72:	46da      	mov	sl, fp
 8017b74:	0728      	lsls	r0, r5, #28
 8017b76:	d5c1      	bpl.n	8017afc <_strtod_l+0x84>
 8017b78:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8017b7c:	e7be      	b.n	8017afc <_strtod_l+0x84>
 8017b7e:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 8017b82:	e7f7      	b.n	8017b74 <_strtod_l+0xfc>
 8017b84:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8017b88:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8017b8a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8017b8e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8017b92:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8017b96:	e7ed      	b.n	8017b74 <_strtod_l+0xfc>
 8017b98:	f8df b184 	ldr.w	fp, [pc, #388]	; 8017d20 <_strtod_l+0x2a8>
 8017b9c:	f04f 0a00 	mov.w	sl, #0
 8017ba0:	e7e8      	b.n	8017b74 <_strtod_l+0xfc>
 8017ba2:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8017ba6:	f04f 3aff 	mov.w	sl, #4294967295
 8017baa:	e7e3      	b.n	8017b74 <_strtod_l+0xfc>
 8017bac:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8017bae:	1c5a      	adds	r2, r3, #1
 8017bb0:	921d      	str	r2, [sp, #116]	; 0x74
 8017bb2:	785b      	ldrb	r3, [r3, #1]
 8017bb4:	2b30      	cmp	r3, #48	; 0x30
 8017bb6:	d0f9      	beq.n	8017bac <_strtod_l+0x134>
 8017bb8:	2b00      	cmp	r3, #0
 8017bba:	d09f      	beq.n	8017afc <_strtod_l+0x84>
 8017bbc:	2301      	movs	r3, #1
 8017bbe:	f04f 0900 	mov.w	r9, #0
 8017bc2:	9304      	str	r3, [sp, #16]
 8017bc4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8017bc6:	930a      	str	r3, [sp, #40]	; 0x28
 8017bc8:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8017bcc:	464f      	mov	r7, r9
 8017bce:	220a      	movs	r2, #10
 8017bd0:	981d      	ldr	r0, [sp, #116]	; 0x74
 8017bd2:	7806      	ldrb	r6, [r0, #0]
 8017bd4:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8017bd8:	b2d9      	uxtb	r1, r3
 8017bda:	2909      	cmp	r1, #9
 8017bdc:	d92a      	bls.n	8017c34 <_strtod_l+0x1bc>
 8017bde:	9907      	ldr	r1, [sp, #28]
 8017be0:	462a      	mov	r2, r5
 8017be2:	f7ff ff01 	bl	80179e8 <strncmp>
 8017be6:	b398      	cbz	r0, 8017c50 <_strtod_l+0x1d8>
 8017be8:	2000      	movs	r0, #0
 8017bea:	4633      	mov	r3, r6
 8017bec:	463d      	mov	r5, r7
 8017bee:	9007      	str	r0, [sp, #28]
 8017bf0:	4602      	mov	r2, r0
 8017bf2:	2b65      	cmp	r3, #101	; 0x65
 8017bf4:	d001      	beq.n	8017bfa <_strtod_l+0x182>
 8017bf6:	2b45      	cmp	r3, #69	; 0x45
 8017bf8:	d118      	bne.n	8017c2c <_strtod_l+0x1b4>
 8017bfa:	b91d      	cbnz	r5, 8017c04 <_strtod_l+0x18c>
 8017bfc:	9b04      	ldr	r3, [sp, #16]
 8017bfe:	4303      	orrs	r3, r0
 8017c00:	d098      	beq.n	8017b34 <_strtod_l+0xbc>
 8017c02:	2500      	movs	r5, #0
 8017c04:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8017c08:	f108 0301 	add.w	r3, r8, #1
 8017c0c:	931d      	str	r3, [sp, #116]	; 0x74
 8017c0e:	f898 3001 	ldrb.w	r3, [r8, #1]
 8017c12:	2b2b      	cmp	r3, #43	; 0x2b
 8017c14:	d075      	beq.n	8017d02 <_strtod_l+0x28a>
 8017c16:	2b2d      	cmp	r3, #45	; 0x2d
 8017c18:	d07b      	beq.n	8017d12 <_strtod_l+0x29a>
 8017c1a:	f04f 0c00 	mov.w	ip, #0
 8017c1e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8017c22:	2909      	cmp	r1, #9
 8017c24:	f240 8082 	bls.w	8017d2c <_strtod_l+0x2b4>
 8017c28:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8017c2c:	2600      	movs	r6, #0
 8017c2e:	e09d      	b.n	8017d6c <_strtod_l+0x2f4>
 8017c30:	2300      	movs	r3, #0
 8017c32:	e7c4      	b.n	8017bbe <_strtod_l+0x146>
 8017c34:	2f08      	cmp	r7, #8
 8017c36:	bfd8      	it	le
 8017c38:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8017c3a:	f100 0001 	add.w	r0, r0, #1
 8017c3e:	bfda      	itte	le
 8017c40:	fb02 3301 	mlale	r3, r2, r1, r3
 8017c44:	9309      	strle	r3, [sp, #36]	; 0x24
 8017c46:	fb02 3909 	mlagt	r9, r2, r9, r3
 8017c4a:	3701      	adds	r7, #1
 8017c4c:	901d      	str	r0, [sp, #116]	; 0x74
 8017c4e:	e7bf      	b.n	8017bd0 <_strtod_l+0x158>
 8017c50:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8017c52:	195a      	adds	r2, r3, r5
 8017c54:	921d      	str	r2, [sp, #116]	; 0x74
 8017c56:	5d5b      	ldrb	r3, [r3, r5]
 8017c58:	2f00      	cmp	r7, #0
 8017c5a:	d037      	beq.n	8017ccc <_strtod_l+0x254>
 8017c5c:	9007      	str	r0, [sp, #28]
 8017c5e:	463d      	mov	r5, r7
 8017c60:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8017c64:	2a09      	cmp	r2, #9
 8017c66:	d912      	bls.n	8017c8e <_strtod_l+0x216>
 8017c68:	2201      	movs	r2, #1
 8017c6a:	e7c2      	b.n	8017bf2 <_strtod_l+0x17a>
 8017c6c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8017c6e:	1c5a      	adds	r2, r3, #1
 8017c70:	921d      	str	r2, [sp, #116]	; 0x74
 8017c72:	785b      	ldrb	r3, [r3, #1]
 8017c74:	3001      	adds	r0, #1
 8017c76:	2b30      	cmp	r3, #48	; 0x30
 8017c78:	d0f8      	beq.n	8017c6c <_strtod_l+0x1f4>
 8017c7a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8017c7e:	2a08      	cmp	r2, #8
 8017c80:	f200 84db 	bhi.w	801863a <_strtod_l+0xbc2>
 8017c84:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8017c86:	9007      	str	r0, [sp, #28]
 8017c88:	2000      	movs	r0, #0
 8017c8a:	920a      	str	r2, [sp, #40]	; 0x28
 8017c8c:	4605      	mov	r5, r0
 8017c8e:	3b30      	subs	r3, #48	; 0x30
 8017c90:	f100 0201 	add.w	r2, r0, #1
 8017c94:	d014      	beq.n	8017cc0 <_strtod_l+0x248>
 8017c96:	9907      	ldr	r1, [sp, #28]
 8017c98:	4411      	add	r1, r2
 8017c9a:	9107      	str	r1, [sp, #28]
 8017c9c:	462a      	mov	r2, r5
 8017c9e:	eb00 0e05 	add.w	lr, r0, r5
 8017ca2:	210a      	movs	r1, #10
 8017ca4:	4572      	cmp	r2, lr
 8017ca6:	d113      	bne.n	8017cd0 <_strtod_l+0x258>
 8017ca8:	182a      	adds	r2, r5, r0
 8017caa:	2a08      	cmp	r2, #8
 8017cac:	f105 0501 	add.w	r5, r5, #1
 8017cb0:	4405      	add	r5, r0
 8017cb2:	dc1c      	bgt.n	8017cee <_strtod_l+0x276>
 8017cb4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8017cb6:	220a      	movs	r2, #10
 8017cb8:	fb02 3301 	mla	r3, r2, r1, r3
 8017cbc:	9309      	str	r3, [sp, #36]	; 0x24
 8017cbe:	2200      	movs	r2, #0
 8017cc0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8017cc2:	1c59      	adds	r1, r3, #1
 8017cc4:	911d      	str	r1, [sp, #116]	; 0x74
 8017cc6:	785b      	ldrb	r3, [r3, #1]
 8017cc8:	4610      	mov	r0, r2
 8017cca:	e7c9      	b.n	8017c60 <_strtod_l+0x1e8>
 8017ccc:	4638      	mov	r0, r7
 8017cce:	e7d2      	b.n	8017c76 <_strtod_l+0x1fe>
 8017cd0:	2a08      	cmp	r2, #8
 8017cd2:	dc04      	bgt.n	8017cde <_strtod_l+0x266>
 8017cd4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8017cd6:	434e      	muls	r6, r1
 8017cd8:	9609      	str	r6, [sp, #36]	; 0x24
 8017cda:	3201      	adds	r2, #1
 8017cdc:	e7e2      	b.n	8017ca4 <_strtod_l+0x22c>
 8017cde:	f102 0c01 	add.w	ip, r2, #1
 8017ce2:	f1bc 0f10 	cmp.w	ip, #16
 8017ce6:	bfd8      	it	le
 8017ce8:	fb01 f909 	mulle.w	r9, r1, r9
 8017cec:	e7f5      	b.n	8017cda <_strtod_l+0x262>
 8017cee:	2d10      	cmp	r5, #16
 8017cf0:	bfdc      	itt	le
 8017cf2:	220a      	movle	r2, #10
 8017cf4:	fb02 3909 	mlale	r9, r2, r9, r3
 8017cf8:	e7e1      	b.n	8017cbe <_strtod_l+0x246>
 8017cfa:	2300      	movs	r3, #0
 8017cfc:	9307      	str	r3, [sp, #28]
 8017cfe:	2201      	movs	r2, #1
 8017d00:	e77c      	b.n	8017bfc <_strtod_l+0x184>
 8017d02:	f04f 0c00 	mov.w	ip, #0
 8017d06:	f108 0302 	add.w	r3, r8, #2
 8017d0a:	931d      	str	r3, [sp, #116]	; 0x74
 8017d0c:	f898 3002 	ldrb.w	r3, [r8, #2]
 8017d10:	e785      	b.n	8017c1e <_strtod_l+0x1a6>
 8017d12:	f04f 0c01 	mov.w	ip, #1
 8017d16:	e7f6      	b.n	8017d06 <_strtod_l+0x28e>
 8017d18:	0801fe68 	.word	0x0801fe68
 8017d1c:	0801fc90 	.word	0x0801fc90
 8017d20:	7ff00000 	.word	0x7ff00000
 8017d24:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8017d26:	1c59      	adds	r1, r3, #1
 8017d28:	911d      	str	r1, [sp, #116]	; 0x74
 8017d2a:	785b      	ldrb	r3, [r3, #1]
 8017d2c:	2b30      	cmp	r3, #48	; 0x30
 8017d2e:	d0f9      	beq.n	8017d24 <_strtod_l+0x2ac>
 8017d30:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8017d34:	2908      	cmp	r1, #8
 8017d36:	f63f af79 	bhi.w	8017c2c <_strtod_l+0x1b4>
 8017d3a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8017d3e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8017d40:	9308      	str	r3, [sp, #32]
 8017d42:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8017d44:	1c59      	adds	r1, r3, #1
 8017d46:	911d      	str	r1, [sp, #116]	; 0x74
 8017d48:	785b      	ldrb	r3, [r3, #1]
 8017d4a:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8017d4e:	2e09      	cmp	r6, #9
 8017d50:	d937      	bls.n	8017dc2 <_strtod_l+0x34a>
 8017d52:	9e08      	ldr	r6, [sp, #32]
 8017d54:	1b89      	subs	r1, r1, r6
 8017d56:	2908      	cmp	r1, #8
 8017d58:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8017d5c:	dc02      	bgt.n	8017d64 <_strtod_l+0x2ec>
 8017d5e:	4576      	cmp	r6, lr
 8017d60:	bfa8      	it	ge
 8017d62:	4676      	movge	r6, lr
 8017d64:	f1bc 0f00 	cmp.w	ip, #0
 8017d68:	d000      	beq.n	8017d6c <_strtod_l+0x2f4>
 8017d6a:	4276      	negs	r6, r6
 8017d6c:	2d00      	cmp	r5, #0
 8017d6e:	d14f      	bne.n	8017e10 <_strtod_l+0x398>
 8017d70:	9904      	ldr	r1, [sp, #16]
 8017d72:	4301      	orrs	r1, r0
 8017d74:	f47f aec2 	bne.w	8017afc <_strtod_l+0x84>
 8017d78:	2a00      	cmp	r2, #0
 8017d7a:	f47f aedb 	bne.w	8017b34 <_strtod_l+0xbc>
 8017d7e:	2b69      	cmp	r3, #105	; 0x69
 8017d80:	d027      	beq.n	8017dd2 <_strtod_l+0x35a>
 8017d82:	dc24      	bgt.n	8017dce <_strtod_l+0x356>
 8017d84:	2b49      	cmp	r3, #73	; 0x49
 8017d86:	d024      	beq.n	8017dd2 <_strtod_l+0x35a>
 8017d88:	2b4e      	cmp	r3, #78	; 0x4e
 8017d8a:	f47f aed3 	bne.w	8017b34 <_strtod_l+0xbc>
 8017d8e:	499e      	ldr	r1, [pc, #632]	; (8018008 <_strtod_l+0x590>)
 8017d90:	a81d      	add	r0, sp, #116	; 0x74
 8017d92:	f001 ff79 	bl	8019c88 <__match>
 8017d96:	2800      	cmp	r0, #0
 8017d98:	f43f aecc 	beq.w	8017b34 <_strtod_l+0xbc>
 8017d9c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8017d9e:	781b      	ldrb	r3, [r3, #0]
 8017da0:	2b28      	cmp	r3, #40	; 0x28
 8017da2:	d12d      	bne.n	8017e00 <_strtod_l+0x388>
 8017da4:	4999      	ldr	r1, [pc, #612]	; (801800c <_strtod_l+0x594>)
 8017da6:	aa20      	add	r2, sp, #128	; 0x80
 8017da8:	a81d      	add	r0, sp, #116	; 0x74
 8017daa:	f001 ff81 	bl	8019cb0 <__hexnan>
 8017dae:	2805      	cmp	r0, #5
 8017db0:	d126      	bne.n	8017e00 <_strtod_l+0x388>
 8017db2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017db4:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8017db8:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8017dbc:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8017dc0:	e69c      	b.n	8017afc <_strtod_l+0x84>
 8017dc2:	210a      	movs	r1, #10
 8017dc4:	fb01 3e0e 	mla	lr, r1, lr, r3
 8017dc8:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8017dcc:	e7b9      	b.n	8017d42 <_strtod_l+0x2ca>
 8017dce:	2b6e      	cmp	r3, #110	; 0x6e
 8017dd0:	e7db      	b.n	8017d8a <_strtod_l+0x312>
 8017dd2:	498f      	ldr	r1, [pc, #572]	; (8018010 <_strtod_l+0x598>)
 8017dd4:	a81d      	add	r0, sp, #116	; 0x74
 8017dd6:	f001 ff57 	bl	8019c88 <__match>
 8017dda:	2800      	cmp	r0, #0
 8017ddc:	f43f aeaa 	beq.w	8017b34 <_strtod_l+0xbc>
 8017de0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8017de2:	498c      	ldr	r1, [pc, #560]	; (8018014 <_strtod_l+0x59c>)
 8017de4:	3b01      	subs	r3, #1
 8017de6:	a81d      	add	r0, sp, #116	; 0x74
 8017de8:	931d      	str	r3, [sp, #116]	; 0x74
 8017dea:	f001 ff4d 	bl	8019c88 <__match>
 8017dee:	b910      	cbnz	r0, 8017df6 <_strtod_l+0x37e>
 8017df0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8017df2:	3301      	adds	r3, #1
 8017df4:	931d      	str	r3, [sp, #116]	; 0x74
 8017df6:	f8df b22c 	ldr.w	fp, [pc, #556]	; 8018024 <_strtod_l+0x5ac>
 8017dfa:	f04f 0a00 	mov.w	sl, #0
 8017dfe:	e67d      	b.n	8017afc <_strtod_l+0x84>
 8017e00:	4885      	ldr	r0, [pc, #532]	; (8018018 <_strtod_l+0x5a0>)
 8017e02:	f002 ff99 	bl	801ad38 <nan>
 8017e06:	ed8d 0b04 	vstr	d0, [sp, #16]
 8017e0a:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8017e0e:	e675      	b.n	8017afc <_strtod_l+0x84>
 8017e10:	9b07      	ldr	r3, [sp, #28]
 8017e12:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017e14:	1af3      	subs	r3, r6, r3
 8017e16:	2f00      	cmp	r7, #0
 8017e18:	bf08      	it	eq
 8017e1a:	462f      	moveq	r7, r5
 8017e1c:	2d10      	cmp	r5, #16
 8017e1e:	9308      	str	r3, [sp, #32]
 8017e20:	46a8      	mov	r8, r5
 8017e22:	bfa8      	it	ge
 8017e24:	f04f 0810 	movge.w	r8, #16
 8017e28:	f7e8 fb7c 	bl	8000524 <__aeabi_ui2d>
 8017e2c:	2d09      	cmp	r5, #9
 8017e2e:	4682      	mov	sl, r0
 8017e30:	468b      	mov	fp, r1
 8017e32:	dd13      	ble.n	8017e5c <_strtod_l+0x3e4>
 8017e34:	4b79      	ldr	r3, [pc, #484]	; (801801c <_strtod_l+0x5a4>)
 8017e36:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8017e3a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8017e3e:	f7e8 fbeb 	bl	8000618 <__aeabi_dmul>
 8017e42:	4682      	mov	sl, r0
 8017e44:	4648      	mov	r0, r9
 8017e46:	468b      	mov	fp, r1
 8017e48:	f7e8 fb6c 	bl	8000524 <__aeabi_ui2d>
 8017e4c:	4602      	mov	r2, r0
 8017e4e:	460b      	mov	r3, r1
 8017e50:	4650      	mov	r0, sl
 8017e52:	4659      	mov	r1, fp
 8017e54:	f7e8 fa2a 	bl	80002ac <__adddf3>
 8017e58:	4682      	mov	sl, r0
 8017e5a:	468b      	mov	fp, r1
 8017e5c:	2d0f      	cmp	r5, #15
 8017e5e:	dc38      	bgt.n	8017ed2 <_strtod_l+0x45a>
 8017e60:	9b08      	ldr	r3, [sp, #32]
 8017e62:	2b00      	cmp	r3, #0
 8017e64:	f43f ae4a 	beq.w	8017afc <_strtod_l+0x84>
 8017e68:	dd24      	ble.n	8017eb4 <_strtod_l+0x43c>
 8017e6a:	2b16      	cmp	r3, #22
 8017e6c:	dc0b      	bgt.n	8017e86 <_strtod_l+0x40e>
 8017e6e:	4d6b      	ldr	r5, [pc, #428]	; (801801c <_strtod_l+0x5a4>)
 8017e70:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8017e74:	e9d5 0100 	ldrd	r0, r1, [r5]
 8017e78:	4652      	mov	r2, sl
 8017e7a:	465b      	mov	r3, fp
 8017e7c:	f7e8 fbcc 	bl	8000618 <__aeabi_dmul>
 8017e80:	4682      	mov	sl, r0
 8017e82:	468b      	mov	fp, r1
 8017e84:	e63a      	b.n	8017afc <_strtod_l+0x84>
 8017e86:	9a08      	ldr	r2, [sp, #32]
 8017e88:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8017e8c:	4293      	cmp	r3, r2
 8017e8e:	db20      	blt.n	8017ed2 <_strtod_l+0x45a>
 8017e90:	4c62      	ldr	r4, [pc, #392]	; (801801c <_strtod_l+0x5a4>)
 8017e92:	f1c5 050f 	rsb	r5, r5, #15
 8017e96:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8017e9a:	4652      	mov	r2, sl
 8017e9c:	465b      	mov	r3, fp
 8017e9e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017ea2:	f7e8 fbb9 	bl	8000618 <__aeabi_dmul>
 8017ea6:	9b08      	ldr	r3, [sp, #32]
 8017ea8:	1b5d      	subs	r5, r3, r5
 8017eaa:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8017eae:	e9d4 2300 	ldrd	r2, r3, [r4]
 8017eb2:	e7e3      	b.n	8017e7c <_strtod_l+0x404>
 8017eb4:	9b08      	ldr	r3, [sp, #32]
 8017eb6:	3316      	adds	r3, #22
 8017eb8:	db0b      	blt.n	8017ed2 <_strtod_l+0x45a>
 8017eba:	9b07      	ldr	r3, [sp, #28]
 8017ebc:	4a57      	ldr	r2, [pc, #348]	; (801801c <_strtod_l+0x5a4>)
 8017ebe:	1b9e      	subs	r6, r3, r6
 8017ec0:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8017ec4:	e9d6 2300 	ldrd	r2, r3, [r6]
 8017ec8:	4650      	mov	r0, sl
 8017eca:	4659      	mov	r1, fp
 8017ecc:	f7e8 fcce 	bl	800086c <__aeabi_ddiv>
 8017ed0:	e7d6      	b.n	8017e80 <_strtod_l+0x408>
 8017ed2:	9b08      	ldr	r3, [sp, #32]
 8017ed4:	eba5 0808 	sub.w	r8, r5, r8
 8017ed8:	4498      	add	r8, r3
 8017eda:	f1b8 0f00 	cmp.w	r8, #0
 8017ede:	dd71      	ble.n	8017fc4 <_strtod_l+0x54c>
 8017ee0:	f018 030f 	ands.w	r3, r8, #15
 8017ee4:	d00a      	beq.n	8017efc <_strtod_l+0x484>
 8017ee6:	494d      	ldr	r1, [pc, #308]	; (801801c <_strtod_l+0x5a4>)
 8017ee8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8017eec:	4652      	mov	r2, sl
 8017eee:	465b      	mov	r3, fp
 8017ef0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017ef4:	f7e8 fb90 	bl	8000618 <__aeabi_dmul>
 8017ef8:	4682      	mov	sl, r0
 8017efa:	468b      	mov	fp, r1
 8017efc:	f038 080f 	bics.w	r8, r8, #15
 8017f00:	d04d      	beq.n	8017f9e <_strtod_l+0x526>
 8017f02:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8017f06:	dd22      	ble.n	8017f4e <_strtod_l+0x4d6>
 8017f08:	2500      	movs	r5, #0
 8017f0a:	462e      	mov	r6, r5
 8017f0c:	9509      	str	r5, [sp, #36]	; 0x24
 8017f0e:	9507      	str	r5, [sp, #28]
 8017f10:	2322      	movs	r3, #34	; 0x22
 8017f12:	f8df b110 	ldr.w	fp, [pc, #272]	; 8018024 <_strtod_l+0x5ac>
 8017f16:	6023      	str	r3, [r4, #0]
 8017f18:	f04f 0a00 	mov.w	sl, #0
 8017f1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017f1e:	2b00      	cmp	r3, #0
 8017f20:	f43f adec 	beq.w	8017afc <_strtod_l+0x84>
 8017f24:	991e      	ldr	r1, [sp, #120]	; 0x78
 8017f26:	4620      	mov	r0, r4
 8017f28:	f001 ffc4 	bl	8019eb4 <_Bfree>
 8017f2c:	9907      	ldr	r1, [sp, #28]
 8017f2e:	4620      	mov	r0, r4
 8017f30:	f001 ffc0 	bl	8019eb4 <_Bfree>
 8017f34:	4631      	mov	r1, r6
 8017f36:	4620      	mov	r0, r4
 8017f38:	f001 ffbc 	bl	8019eb4 <_Bfree>
 8017f3c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8017f3e:	4620      	mov	r0, r4
 8017f40:	f001 ffb8 	bl	8019eb4 <_Bfree>
 8017f44:	4629      	mov	r1, r5
 8017f46:	4620      	mov	r0, r4
 8017f48:	f001 ffb4 	bl	8019eb4 <_Bfree>
 8017f4c:	e5d6      	b.n	8017afc <_strtod_l+0x84>
 8017f4e:	2300      	movs	r3, #0
 8017f50:	ea4f 1828 	mov.w	r8, r8, asr #4
 8017f54:	4650      	mov	r0, sl
 8017f56:	4659      	mov	r1, fp
 8017f58:	4699      	mov	r9, r3
 8017f5a:	f1b8 0f01 	cmp.w	r8, #1
 8017f5e:	dc21      	bgt.n	8017fa4 <_strtod_l+0x52c>
 8017f60:	b10b      	cbz	r3, 8017f66 <_strtod_l+0x4ee>
 8017f62:	4682      	mov	sl, r0
 8017f64:	468b      	mov	fp, r1
 8017f66:	4b2e      	ldr	r3, [pc, #184]	; (8018020 <_strtod_l+0x5a8>)
 8017f68:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8017f6c:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8017f70:	4652      	mov	r2, sl
 8017f72:	465b      	mov	r3, fp
 8017f74:	e9d9 0100 	ldrd	r0, r1, [r9]
 8017f78:	f7e8 fb4e 	bl	8000618 <__aeabi_dmul>
 8017f7c:	4b29      	ldr	r3, [pc, #164]	; (8018024 <_strtod_l+0x5ac>)
 8017f7e:	460a      	mov	r2, r1
 8017f80:	400b      	ands	r3, r1
 8017f82:	4929      	ldr	r1, [pc, #164]	; (8018028 <_strtod_l+0x5b0>)
 8017f84:	428b      	cmp	r3, r1
 8017f86:	4682      	mov	sl, r0
 8017f88:	d8be      	bhi.n	8017f08 <_strtod_l+0x490>
 8017f8a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8017f8e:	428b      	cmp	r3, r1
 8017f90:	bf86      	itte	hi
 8017f92:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 801802c <_strtod_l+0x5b4>
 8017f96:	f04f 3aff 	movhi.w	sl, #4294967295
 8017f9a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8017f9e:	2300      	movs	r3, #0
 8017fa0:	9304      	str	r3, [sp, #16]
 8017fa2:	e081      	b.n	80180a8 <_strtod_l+0x630>
 8017fa4:	f018 0f01 	tst.w	r8, #1
 8017fa8:	d007      	beq.n	8017fba <_strtod_l+0x542>
 8017faa:	4b1d      	ldr	r3, [pc, #116]	; (8018020 <_strtod_l+0x5a8>)
 8017fac:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8017fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017fb4:	f7e8 fb30 	bl	8000618 <__aeabi_dmul>
 8017fb8:	2301      	movs	r3, #1
 8017fba:	f109 0901 	add.w	r9, r9, #1
 8017fbe:	ea4f 0868 	mov.w	r8, r8, asr #1
 8017fc2:	e7ca      	b.n	8017f5a <_strtod_l+0x4e2>
 8017fc4:	d0eb      	beq.n	8017f9e <_strtod_l+0x526>
 8017fc6:	f1c8 0800 	rsb	r8, r8, #0
 8017fca:	f018 020f 	ands.w	r2, r8, #15
 8017fce:	d00a      	beq.n	8017fe6 <_strtod_l+0x56e>
 8017fd0:	4b12      	ldr	r3, [pc, #72]	; (801801c <_strtod_l+0x5a4>)
 8017fd2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8017fd6:	4650      	mov	r0, sl
 8017fd8:	4659      	mov	r1, fp
 8017fda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017fde:	f7e8 fc45 	bl	800086c <__aeabi_ddiv>
 8017fe2:	4682      	mov	sl, r0
 8017fe4:	468b      	mov	fp, r1
 8017fe6:	ea5f 1828 	movs.w	r8, r8, asr #4
 8017fea:	d0d8      	beq.n	8017f9e <_strtod_l+0x526>
 8017fec:	f1b8 0f1f 	cmp.w	r8, #31
 8017ff0:	dd1e      	ble.n	8018030 <_strtod_l+0x5b8>
 8017ff2:	2500      	movs	r5, #0
 8017ff4:	462e      	mov	r6, r5
 8017ff6:	9509      	str	r5, [sp, #36]	; 0x24
 8017ff8:	9507      	str	r5, [sp, #28]
 8017ffa:	2322      	movs	r3, #34	; 0x22
 8017ffc:	f04f 0a00 	mov.w	sl, #0
 8018000:	f04f 0b00 	mov.w	fp, #0
 8018004:	6023      	str	r3, [r4, #0]
 8018006:	e789      	b.n	8017f1c <_strtod_l+0x4a4>
 8018008:	0801fbf1 	.word	0x0801fbf1
 801800c:	0801fca4 	.word	0x0801fca4
 8018010:	0801fbe9 	.word	0x0801fbe9
 8018014:	0801fd1f 	.word	0x0801fd1f
 8018018:	0801fd1b 	.word	0x0801fd1b
 801801c:	0801ff08 	.word	0x0801ff08
 8018020:	0801fee0 	.word	0x0801fee0
 8018024:	7ff00000 	.word	0x7ff00000
 8018028:	7ca00000 	.word	0x7ca00000
 801802c:	7fefffff 	.word	0x7fefffff
 8018030:	f018 0310 	ands.w	r3, r8, #16
 8018034:	bf18      	it	ne
 8018036:	236a      	movne	r3, #106	; 0x6a
 8018038:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 80183f0 <_strtod_l+0x978>
 801803c:	9304      	str	r3, [sp, #16]
 801803e:	4650      	mov	r0, sl
 8018040:	4659      	mov	r1, fp
 8018042:	2300      	movs	r3, #0
 8018044:	f018 0f01 	tst.w	r8, #1
 8018048:	d004      	beq.n	8018054 <_strtod_l+0x5dc>
 801804a:	e9d9 2300 	ldrd	r2, r3, [r9]
 801804e:	f7e8 fae3 	bl	8000618 <__aeabi_dmul>
 8018052:	2301      	movs	r3, #1
 8018054:	ea5f 0868 	movs.w	r8, r8, asr #1
 8018058:	f109 0908 	add.w	r9, r9, #8
 801805c:	d1f2      	bne.n	8018044 <_strtod_l+0x5cc>
 801805e:	b10b      	cbz	r3, 8018064 <_strtod_l+0x5ec>
 8018060:	4682      	mov	sl, r0
 8018062:	468b      	mov	fp, r1
 8018064:	9b04      	ldr	r3, [sp, #16]
 8018066:	b1bb      	cbz	r3, 8018098 <_strtod_l+0x620>
 8018068:	f3cb 530a 	ubfx	r3, fp, #20, #11
 801806c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8018070:	2b00      	cmp	r3, #0
 8018072:	4659      	mov	r1, fp
 8018074:	dd10      	ble.n	8018098 <_strtod_l+0x620>
 8018076:	2b1f      	cmp	r3, #31
 8018078:	f340 8128 	ble.w	80182cc <_strtod_l+0x854>
 801807c:	2b34      	cmp	r3, #52	; 0x34
 801807e:	bfde      	ittt	le
 8018080:	3b20      	suble	r3, #32
 8018082:	f04f 32ff 	movle.w	r2, #4294967295
 8018086:	fa02 f303 	lslle.w	r3, r2, r3
 801808a:	f04f 0a00 	mov.w	sl, #0
 801808e:	bfcc      	ite	gt
 8018090:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8018094:	ea03 0b01 	andle.w	fp, r3, r1
 8018098:	2200      	movs	r2, #0
 801809a:	2300      	movs	r3, #0
 801809c:	4650      	mov	r0, sl
 801809e:	4659      	mov	r1, fp
 80180a0:	f7e8 fd22 	bl	8000ae8 <__aeabi_dcmpeq>
 80180a4:	2800      	cmp	r0, #0
 80180a6:	d1a4      	bne.n	8017ff2 <_strtod_l+0x57a>
 80180a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80180aa:	9300      	str	r3, [sp, #0]
 80180ac:	990a      	ldr	r1, [sp, #40]	; 0x28
 80180ae:	462b      	mov	r3, r5
 80180b0:	463a      	mov	r2, r7
 80180b2:	4620      	mov	r0, r4
 80180b4:	f001 ff6a 	bl	8019f8c <__s2b>
 80180b8:	9009      	str	r0, [sp, #36]	; 0x24
 80180ba:	2800      	cmp	r0, #0
 80180bc:	f43f af24 	beq.w	8017f08 <_strtod_l+0x490>
 80180c0:	9b07      	ldr	r3, [sp, #28]
 80180c2:	1b9e      	subs	r6, r3, r6
 80180c4:	9b08      	ldr	r3, [sp, #32]
 80180c6:	2b00      	cmp	r3, #0
 80180c8:	bfb4      	ite	lt
 80180ca:	4633      	movlt	r3, r6
 80180cc:	2300      	movge	r3, #0
 80180ce:	9310      	str	r3, [sp, #64]	; 0x40
 80180d0:	9b08      	ldr	r3, [sp, #32]
 80180d2:	2500      	movs	r5, #0
 80180d4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80180d8:	9318      	str	r3, [sp, #96]	; 0x60
 80180da:	462e      	mov	r6, r5
 80180dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80180de:	4620      	mov	r0, r4
 80180e0:	6859      	ldr	r1, [r3, #4]
 80180e2:	f001 fea7 	bl	8019e34 <_Balloc>
 80180e6:	9007      	str	r0, [sp, #28]
 80180e8:	2800      	cmp	r0, #0
 80180ea:	f43f af11 	beq.w	8017f10 <_strtod_l+0x498>
 80180ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80180f0:	691a      	ldr	r2, [r3, #16]
 80180f2:	3202      	adds	r2, #2
 80180f4:	f103 010c 	add.w	r1, r3, #12
 80180f8:	0092      	lsls	r2, r2, #2
 80180fa:	300c      	adds	r0, #12
 80180fc:	f7fe fe74 	bl	8016de8 <memcpy>
 8018100:	ec4b ab10 	vmov	d0, sl, fp
 8018104:	aa20      	add	r2, sp, #128	; 0x80
 8018106:	a91f      	add	r1, sp, #124	; 0x7c
 8018108:	4620      	mov	r0, r4
 801810a:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 801810e:	f002 fa79 	bl	801a604 <__d2b>
 8018112:	901e      	str	r0, [sp, #120]	; 0x78
 8018114:	2800      	cmp	r0, #0
 8018116:	f43f aefb 	beq.w	8017f10 <_strtod_l+0x498>
 801811a:	2101      	movs	r1, #1
 801811c:	4620      	mov	r0, r4
 801811e:	f001 ffcf 	bl	801a0c0 <__i2b>
 8018122:	4606      	mov	r6, r0
 8018124:	2800      	cmp	r0, #0
 8018126:	f43f aef3 	beq.w	8017f10 <_strtod_l+0x498>
 801812a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801812c:	9904      	ldr	r1, [sp, #16]
 801812e:	2b00      	cmp	r3, #0
 8018130:	bfab      	itete	ge
 8018132:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 8018134:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 8018136:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8018138:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 801813c:	bfac      	ite	ge
 801813e:	eb03 0902 	addge.w	r9, r3, r2
 8018142:	1ad7      	sublt	r7, r2, r3
 8018144:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8018146:	eba3 0801 	sub.w	r8, r3, r1
 801814a:	4490      	add	r8, r2
 801814c:	4ba3      	ldr	r3, [pc, #652]	; (80183dc <_strtod_l+0x964>)
 801814e:	f108 38ff 	add.w	r8, r8, #4294967295
 8018152:	4598      	cmp	r8, r3
 8018154:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8018158:	f280 80cc 	bge.w	80182f4 <_strtod_l+0x87c>
 801815c:	eba3 0308 	sub.w	r3, r3, r8
 8018160:	2b1f      	cmp	r3, #31
 8018162:	eba2 0203 	sub.w	r2, r2, r3
 8018166:	f04f 0101 	mov.w	r1, #1
 801816a:	f300 80b6 	bgt.w	80182da <_strtod_l+0x862>
 801816e:	fa01 f303 	lsl.w	r3, r1, r3
 8018172:	9311      	str	r3, [sp, #68]	; 0x44
 8018174:	2300      	movs	r3, #0
 8018176:	930c      	str	r3, [sp, #48]	; 0x30
 8018178:	eb09 0802 	add.w	r8, r9, r2
 801817c:	9b04      	ldr	r3, [sp, #16]
 801817e:	45c1      	cmp	r9, r8
 8018180:	4417      	add	r7, r2
 8018182:	441f      	add	r7, r3
 8018184:	464b      	mov	r3, r9
 8018186:	bfa8      	it	ge
 8018188:	4643      	movge	r3, r8
 801818a:	42bb      	cmp	r3, r7
 801818c:	bfa8      	it	ge
 801818e:	463b      	movge	r3, r7
 8018190:	2b00      	cmp	r3, #0
 8018192:	bfc2      	ittt	gt
 8018194:	eba8 0803 	subgt.w	r8, r8, r3
 8018198:	1aff      	subgt	r7, r7, r3
 801819a:	eba9 0903 	subgt.w	r9, r9, r3
 801819e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80181a0:	2b00      	cmp	r3, #0
 80181a2:	dd17      	ble.n	80181d4 <_strtod_l+0x75c>
 80181a4:	4631      	mov	r1, r6
 80181a6:	461a      	mov	r2, r3
 80181a8:	4620      	mov	r0, r4
 80181aa:	f002 f845 	bl	801a238 <__pow5mult>
 80181ae:	4606      	mov	r6, r0
 80181b0:	2800      	cmp	r0, #0
 80181b2:	f43f aead 	beq.w	8017f10 <_strtod_l+0x498>
 80181b6:	4601      	mov	r1, r0
 80181b8:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80181ba:	4620      	mov	r0, r4
 80181bc:	f001 ff96 	bl	801a0ec <__multiply>
 80181c0:	900f      	str	r0, [sp, #60]	; 0x3c
 80181c2:	2800      	cmp	r0, #0
 80181c4:	f43f aea4 	beq.w	8017f10 <_strtod_l+0x498>
 80181c8:	991e      	ldr	r1, [sp, #120]	; 0x78
 80181ca:	4620      	mov	r0, r4
 80181cc:	f001 fe72 	bl	8019eb4 <_Bfree>
 80181d0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80181d2:	931e      	str	r3, [sp, #120]	; 0x78
 80181d4:	f1b8 0f00 	cmp.w	r8, #0
 80181d8:	f300 8091 	bgt.w	80182fe <_strtod_l+0x886>
 80181dc:	9b08      	ldr	r3, [sp, #32]
 80181de:	2b00      	cmp	r3, #0
 80181e0:	dd08      	ble.n	80181f4 <_strtod_l+0x77c>
 80181e2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80181e4:	9907      	ldr	r1, [sp, #28]
 80181e6:	4620      	mov	r0, r4
 80181e8:	f002 f826 	bl	801a238 <__pow5mult>
 80181ec:	9007      	str	r0, [sp, #28]
 80181ee:	2800      	cmp	r0, #0
 80181f0:	f43f ae8e 	beq.w	8017f10 <_strtod_l+0x498>
 80181f4:	2f00      	cmp	r7, #0
 80181f6:	dd08      	ble.n	801820a <_strtod_l+0x792>
 80181f8:	9907      	ldr	r1, [sp, #28]
 80181fa:	463a      	mov	r2, r7
 80181fc:	4620      	mov	r0, r4
 80181fe:	f002 f875 	bl	801a2ec <__lshift>
 8018202:	9007      	str	r0, [sp, #28]
 8018204:	2800      	cmp	r0, #0
 8018206:	f43f ae83 	beq.w	8017f10 <_strtod_l+0x498>
 801820a:	f1b9 0f00 	cmp.w	r9, #0
 801820e:	dd08      	ble.n	8018222 <_strtod_l+0x7aa>
 8018210:	4631      	mov	r1, r6
 8018212:	464a      	mov	r2, r9
 8018214:	4620      	mov	r0, r4
 8018216:	f002 f869 	bl	801a2ec <__lshift>
 801821a:	4606      	mov	r6, r0
 801821c:	2800      	cmp	r0, #0
 801821e:	f43f ae77 	beq.w	8017f10 <_strtod_l+0x498>
 8018222:	9a07      	ldr	r2, [sp, #28]
 8018224:	991e      	ldr	r1, [sp, #120]	; 0x78
 8018226:	4620      	mov	r0, r4
 8018228:	f002 f8e8 	bl	801a3fc <__mdiff>
 801822c:	4605      	mov	r5, r0
 801822e:	2800      	cmp	r0, #0
 8018230:	f43f ae6e 	beq.w	8017f10 <_strtod_l+0x498>
 8018234:	68c3      	ldr	r3, [r0, #12]
 8018236:	930f      	str	r3, [sp, #60]	; 0x3c
 8018238:	2300      	movs	r3, #0
 801823a:	60c3      	str	r3, [r0, #12]
 801823c:	4631      	mov	r1, r6
 801823e:	f002 f8c1 	bl	801a3c4 <__mcmp>
 8018242:	2800      	cmp	r0, #0
 8018244:	da65      	bge.n	8018312 <_strtod_l+0x89a>
 8018246:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018248:	ea53 030a 	orrs.w	r3, r3, sl
 801824c:	f040 8087 	bne.w	801835e <_strtod_l+0x8e6>
 8018250:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8018254:	2b00      	cmp	r3, #0
 8018256:	f040 8082 	bne.w	801835e <_strtod_l+0x8e6>
 801825a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801825e:	0d1b      	lsrs	r3, r3, #20
 8018260:	051b      	lsls	r3, r3, #20
 8018262:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8018266:	d97a      	bls.n	801835e <_strtod_l+0x8e6>
 8018268:	696b      	ldr	r3, [r5, #20]
 801826a:	b913      	cbnz	r3, 8018272 <_strtod_l+0x7fa>
 801826c:	692b      	ldr	r3, [r5, #16]
 801826e:	2b01      	cmp	r3, #1
 8018270:	dd75      	ble.n	801835e <_strtod_l+0x8e6>
 8018272:	4629      	mov	r1, r5
 8018274:	2201      	movs	r2, #1
 8018276:	4620      	mov	r0, r4
 8018278:	f002 f838 	bl	801a2ec <__lshift>
 801827c:	4631      	mov	r1, r6
 801827e:	4605      	mov	r5, r0
 8018280:	f002 f8a0 	bl	801a3c4 <__mcmp>
 8018284:	2800      	cmp	r0, #0
 8018286:	dd6a      	ble.n	801835e <_strtod_l+0x8e6>
 8018288:	9904      	ldr	r1, [sp, #16]
 801828a:	4a55      	ldr	r2, [pc, #340]	; (80183e0 <_strtod_l+0x968>)
 801828c:	465b      	mov	r3, fp
 801828e:	2900      	cmp	r1, #0
 8018290:	f000 8085 	beq.w	801839e <_strtod_l+0x926>
 8018294:	ea02 010b 	and.w	r1, r2, fp
 8018298:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801829c:	dc7f      	bgt.n	801839e <_strtod_l+0x926>
 801829e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80182a2:	f77f aeaa 	ble.w	8017ffa <_strtod_l+0x582>
 80182a6:	4a4f      	ldr	r2, [pc, #316]	; (80183e4 <_strtod_l+0x96c>)
 80182a8:	2300      	movs	r3, #0
 80182aa:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 80182ae:	4650      	mov	r0, sl
 80182b0:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 80182b4:	4659      	mov	r1, fp
 80182b6:	f7e8 f9af 	bl	8000618 <__aeabi_dmul>
 80182ba:	460b      	mov	r3, r1
 80182bc:	4303      	orrs	r3, r0
 80182be:	bf08      	it	eq
 80182c0:	2322      	moveq	r3, #34	; 0x22
 80182c2:	4682      	mov	sl, r0
 80182c4:	468b      	mov	fp, r1
 80182c6:	bf08      	it	eq
 80182c8:	6023      	streq	r3, [r4, #0]
 80182ca:	e62b      	b.n	8017f24 <_strtod_l+0x4ac>
 80182cc:	f04f 32ff 	mov.w	r2, #4294967295
 80182d0:	fa02 f303 	lsl.w	r3, r2, r3
 80182d4:	ea03 0a0a 	and.w	sl, r3, sl
 80182d8:	e6de      	b.n	8018098 <_strtod_l+0x620>
 80182da:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 80182de:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 80182e2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 80182e6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 80182ea:	fa01 f308 	lsl.w	r3, r1, r8
 80182ee:	930c      	str	r3, [sp, #48]	; 0x30
 80182f0:	9111      	str	r1, [sp, #68]	; 0x44
 80182f2:	e741      	b.n	8018178 <_strtod_l+0x700>
 80182f4:	2300      	movs	r3, #0
 80182f6:	930c      	str	r3, [sp, #48]	; 0x30
 80182f8:	2301      	movs	r3, #1
 80182fa:	9311      	str	r3, [sp, #68]	; 0x44
 80182fc:	e73c      	b.n	8018178 <_strtod_l+0x700>
 80182fe:	991e      	ldr	r1, [sp, #120]	; 0x78
 8018300:	4642      	mov	r2, r8
 8018302:	4620      	mov	r0, r4
 8018304:	f001 fff2 	bl	801a2ec <__lshift>
 8018308:	901e      	str	r0, [sp, #120]	; 0x78
 801830a:	2800      	cmp	r0, #0
 801830c:	f47f af66 	bne.w	80181dc <_strtod_l+0x764>
 8018310:	e5fe      	b.n	8017f10 <_strtod_l+0x498>
 8018312:	465f      	mov	r7, fp
 8018314:	d16e      	bne.n	80183f4 <_strtod_l+0x97c>
 8018316:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8018318:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801831c:	b342      	cbz	r2, 8018370 <_strtod_l+0x8f8>
 801831e:	4a32      	ldr	r2, [pc, #200]	; (80183e8 <_strtod_l+0x970>)
 8018320:	4293      	cmp	r3, r2
 8018322:	d128      	bne.n	8018376 <_strtod_l+0x8fe>
 8018324:	9b04      	ldr	r3, [sp, #16]
 8018326:	4650      	mov	r0, sl
 8018328:	b1eb      	cbz	r3, 8018366 <_strtod_l+0x8ee>
 801832a:	4a2d      	ldr	r2, [pc, #180]	; (80183e0 <_strtod_l+0x968>)
 801832c:	403a      	ands	r2, r7
 801832e:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8018332:	f04f 31ff 	mov.w	r1, #4294967295
 8018336:	d819      	bhi.n	801836c <_strtod_l+0x8f4>
 8018338:	0d12      	lsrs	r2, r2, #20
 801833a:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801833e:	fa01 f303 	lsl.w	r3, r1, r3
 8018342:	4298      	cmp	r0, r3
 8018344:	d117      	bne.n	8018376 <_strtod_l+0x8fe>
 8018346:	4b29      	ldr	r3, [pc, #164]	; (80183ec <_strtod_l+0x974>)
 8018348:	429f      	cmp	r7, r3
 801834a:	d102      	bne.n	8018352 <_strtod_l+0x8da>
 801834c:	3001      	adds	r0, #1
 801834e:	f43f addf 	beq.w	8017f10 <_strtod_l+0x498>
 8018352:	4b23      	ldr	r3, [pc, #140]	; (80183e0 <_strtod_l+0x968>)
 8018354:	403b      	ands	r3, r7
 8018356:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 801835a:	f04f 0a00 	mov.w	sl, #0
 801835e:	9b04      	ldr	r3, [sp, #16]
 8018360:	2b00      	cmp	r3, #0
 8018362:	d1a0      	bne.n	80182a6 <_strtod_l+0x82e>
 8018364:	e5de      	b.n	8017f24 <_strtod_l+0x4ac>
 8018366:	f04f 33ff 	mov.w	r3, #4294967295
 801836a:	e7ea      	b.n	8018342 <_strtod_l+0x8ca>
 801836c:	460b      	mov	r3, r1
 801836e:	e7e8      	b.n	8018342 <_strtod_l+0x8ca>
 8018370:	ea53 030a 	orrs.w	r3, r3, sl
 8018374:	d088      	beq.n	8018288 <_strtod_l+0x810>
 8018376:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018378:	b1db      	cbz	r3, 80183b2 <_strtod_l+0x93a>
 801837a:	423b      	tst	r3, r7
 801837c:	d0ef      	beq.n	801835e <_strtod_l+0x8e6>
 801837e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018380:	9a04      	ldr	r2, [sp, #16]
 8018382:	4650      	mov	r0, sl
 8018384:	4659      	mov	r1, fp
 8018386:	b1c3      	cbz	r3, 80183ba <_strtod_l+0x942>
 8018388:	f7ff fb57 	bl	8017a3a <sulp>
 801838c:	4602      	mov	r2, r0
 801838e:	460b      	mov	r3, r1
 8018390:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8018394:	f7e7 ff8a 	bl	80002ac <__adddf3>
 8018398:	4682      	mov	sl, r0
 801839a:	468b      	mov	fp, r1
 801839c:	e7df      	b.n	801835e <_strtod_l+0x8e6>
 801839e:	4013      	ands	r3, r2
 80183a0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80183a4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80183a8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80183ac:	f04f 3aff 	mov.w	sl, #4294967295
 80183b0:	e7d5      	b.n	801835e <_strtod_l+0x8e6>
 80183b2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80183b4:	ea13 0f0a 	tst.w	r3, sl
 80183b8:	e7e0      	b.n	801837c <_strtod_l+0x904>
 80183ba:	f7ff fb3e 	bl	8017a3a <sulp>
 80183be:	4602      	mov	r2, r0
 80183c0:	460b      	mov	r3, r1
 80183c2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80183c6:	f7e7 ff6f 	bl	80002a8 <__aeabi_dsub>
 80183ca:	2200      	movs	r2, #0
 80183cc:	2300      	movs	r3, #0
 80183ce:	4682      	mov	sl, r0
 80183d0:	468b      	mov	fp, r1
 80183d2:	f7e8 fb89 	bl	8000ae8 <__aeabi_dcmpeq>
 80183d6:	2800      	cmp	r0, #0
 80183d8:	d0c1      	beq.n	801835e <_strtod_l+0x8e6>
 80183da:	e60e      	b.n	8017ffa <_strtod_l+0x582>
 80183dc:	fffffc02 	.word	0xfffffc02
 80183e0:	7ff00000 	.word	0x7ff00000
 80183e4:	39500000 	.word	0x39500000
 80183e8:	000fffff 	.word	0x000fffff
 80183ec:	7fefffff 	.word	0x7fefffff
 80183f0:	0801fcb8 	.word	0x0801fcb8
 80183f4:	4631      	mov	r1, r6
 80183f6:	4628      	mov	r0, r5
 80183f8:	f002 f960 	bl	801a6bc <__ratio>
 80183fc:	ec59 8b10 	vmov	r8, r9, d0
 8018400:	ee10 0a10 	vmov	r0, s0
 8018404:	2200      	movs	r2, #0
 8018406:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801840a:	4649      	mov	r1, r9
 801840c:	f7e8 fb80 	bl	8000b10 <__aeabi_dcmple>
 8018410:	2800      	cmp	r0, #0
 8018412:	d07c      	beq.n	801850e <_strtod_l+0xa96>
 8018414:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018416:	2b00      	cmp	r3, #0
 8018418:	d04c      	beq.n	80184b4 <_strtod_l+0xa3c>
 801841a:	4b95      	ldr	r3, [pc, #596]	; (8018670 <_strtod_l+0xbf8>)
 801841c:	2200      	movs	r2, #0
 801841e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8018422:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8018670 <_strtod_l+0xbf8>
 8018426:	f04f 0800 	mov.w	r8, #0
 801842a:	4b92      	ldr	r3, [pc, #584]	; (8018674 <_strtod_l+0xbfc>)
 801842c:	403b      	ands	r3, r7
 801842e:	9311      	str	r3, [sp, #68]	; 0x44
 8018430:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8018432:	4b91      	ldr	r3, [pc, #580]	; (8018678 <_strtod_l+0xc00>)
 8018434:	429a      	cmp	r2, r3
 8018436:	f040 80b2 	bne.w	801859e <_strtod_l+0xb26>
 801843a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801843e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8018442:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8018446:	ec4b ab10 	vmov	d0, sl, fp
 801844a:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 801844e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8018452:	f002 f85b 	bl	801a50c <__ulp>
 8018456:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801845a:	ec53 2b10 	vmov	r2, r3, d0
 801845e:	f7e8 f8db 	bl	8000618 <__aeabi_dmul>
 8018462:	4652      	mov	r2, sl
 8018464:	465b      	mov	r3, fp
 8018466:	f7e7 ff21 	bl	80002ac <__adddf3>
 801846a:	460b      	mov	r3, r1
 801846c:	4981      	ldr	r1, [pc, #516]	; (8018674 <_strtod_l+0xbfc>)
 801846e:	4a83      	ldr	r2, [pc, #524]	; (801867c <_strtod_l+0xc04>)
 8018470:	4019      	ands	r1, r3
 8018472:	4291      	cmp	r1, r2
 8018474:	4682      	mov	sl, r0
 8018476:	d95e      	bls.n	8018536 <_strtod_l+0xabe>
 8018478:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801847a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 801847e:	4293      	cmp	r3, r2
 8018480:	d103      	bne.n	801848a <_strtod_l+0xa12>
 8018482:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018484:	3301      	adds	r3, #1
 8018486:	f43f ad43 	beq.w	8017f10 <_strtod_l+0x498>
 801848a:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8018688 <_strtod_l+0xc10>
 801848e:	f04f 3aff 	mov.w	sl, #4294967295
 8018492:	991e      	ldr	r1, [sp, #120]	; 0x78
 8018494:	4620      	mov	r0, r4
 8018496:	f001 fd0d 	bl	8019eb4 <_Bfree>
 801849a:	9907      	ldr	r1, [sp, #28]
 801849c:	4620      	mov	r0, r4
 801849e:	f001 fd09 	bl	8019eb4 <_Bfree>
 80184a2:	4631      	mov	r1, r6
 80184a4:	4620      	mov	r0, r4
 80184a6:	f001 fd05 	bl	8019eb4 <_Bfree>
 80184aa:	4629      	mov	r1, r5
 80184ac:	4620      	mov	r0, r4
 80184ae:	f001 fd01 	bl	8019eb4 <_Bfree>
 80184b2:	e613      	b.n	80180dc <_strtod_l+0x664>
 80184b4:	f1ba 0f00 	cmp.w	sl, #0
 80184b8:	d11b      	bne.n	80184f2 <_strtod_l+0xa7a>
 80184ba:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80184be:	b9f3      	cbnz	r3, 80184fe <_strtod_l+0xa86>
 80184c0:	4b6b      	ldr	r3, [pc, #428]	; (8018670 <_strtod_l+0xbf8>)
 80184c2:	2200      	movs	r2, #0
 80184c4:	4640      	mov	r0, r8
 80184c6:	4649      	mov	r1, r9
 80184c8:	f7e8 fb18 	bl	8000afc <__aeabi_dcmplt>
 80184cc:	b9d0      	cbnz	r0, 8018504 <_strtod_l+0xa8c>
 80184ce:	4640      	mov	r0, r8
 80184d0:	4649      	mov	r1, r9
 80184d2:	4b6b      	ldr	r3, [pc, #428]	; (8018680 <_strtod_l+0xc08>)
 80184d4:	2200      	movs	r2, #0
 80184d6:	f7e8 f89f 	bl	8000618 <__aeabi_dmul>
 80184da:	4680      	mov	r8, r0
 80184dc:	4689      	mov	r9, r1
 80184de:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80184e2:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 80184e6:	931b      	str	r3, [sp, #108]	; 0x6c
 80184e8:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 80184ec:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80184f0:	e79b      	b.n	801842a <_strtod_l+0x9b2>
 80184f2:	f1ba 0f01 	cmp.w	sl, #1
 80184f6:	d102      	bne.n	80184fe <_strtod_l+0xa86>
 80184f8:	2f00      	cmp	r7, #0
 80184fa:	f43f ad7e 	beq.w	8017ffa <_strtod_l+0x582>
 80184fe:	4b61      	ldr	r3, [pc, #388]	; (8018684 <_strtod_l+0xc0c>)
 8018500:	2200      	movs	r2, #0
 8018502:	e78c      	b.n	801841e <_strtod_l+0x9a6>
 8018504:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8018680 <_strtod_l+0xc08>
 8018508:	f04f 0800 	mov.w	r8, #0
 801850c:	e7e7      	b.n	80184de <_strtod_l+0xa66>
 801850e:	4b5c      	ldr	r3, [pc, #368]	; (8018680 <_strtod_l+0xc08>)
 8018510:	4640      	mov	r0, r8
 8018512:	4649      	mov	r1, r9
 8018514:	2200      	movs	r2, #0
 8018516:	f7e8 f87f 	bl	8000618 <__aeabi_dmul>
 801851a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801851c:	4680      	mov	r8, r0
 801851e:	4689      	mov	r9, r1
 8018520:	b933      	cbnz	r3, 8018530 <_strtod_l+0xab8>
 8018522:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8018526:	9012      	str	r0, [sp, #72]	; 0x48
 8018528:	9313      	str	r3, [sp, #76]	; 0x4c
 801852a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 801852e:	e7dd      	b.n	80184ec <_strtod_l+0xa74>
 8018530:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 8018534:	e7f9      	b.n	801852a <_strtod_l+0xab2>
 8018536:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 801853a:	9b04      	ldr	r3, [sp, #16]
 801853c:	2b00      	cmp	r3, #0
 801853e:	d1a8      	bne.n	8018492 <_strtod_l+0xa1a>
 8018540:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8018544:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8018546:	0d1b      	lsrs	r3, r3, #20
 8018548:	051b      	lsls	r3, r3, #20
 801854a:	429a      	cmp	r2, r3
 801854c:	d1a1      	bne.n	8018492 <_strtod_l+0xa1a>
 801854e:	4640      	mov	r0, r8
 8018550:	4649      	mov	r1, r9
 8018552:	f7e8 fb71 	bl	8000c38 <__aeabi_d2lz>
 8018556:	f7e8 f831 	bl	80005bc <__aeabi_l2d>
 801855a:	4602      	mov	r2, r0
 801855c:	460b      	mov	r3, r1
 801855e:	4640      	mov	r0, r8
 8018560:	4649      	mov	r1, r9
 8018562:	f7e7 fea1 	bl	80002a8 <__aeabi_dsub>
 8018566:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8018568:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801856c:	ea43 030a 	orr.w	r3, r3, sl
 8018570:	4313      	orrs	r3, r2
 8018572:	4680      	mov	r8, r0
 8018574:	4689      	mov	r9, r1
 8018576:	d053      	beq.n	8018620 <_strtod_l+0xba8>
 8018578:	a335      	add	r3, pc, #212	; (adr r3, 8018650 <_strtod_l+0xbd8>)
 801857a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801857e:	f7e8 fabd 	bl	8000afc <__aeabi_dcmplt>
 8018582:	2800      	cmp	r0, #0
 8018584:	f47f acce 	bne.w	8017f24 <_strtod_l+0x4ac>
 8018588:	a333      	add	r3, pc, #204	; (adr r3, 8018658 <_strtod_l+0xbe0>)
 801858a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801858e:	4640      	mov	r0, r8
 8018590:	4649      	mov	r1, r9
 8018592:	f7e8 fad1 	bl	8000b38 <__aeabi_dcmpgt>
 8018596:	2800      	cmp	r0, #0
 8018598:	f43f af7b 	beq.w	8018492 <_strtod_l+0xa1a>
 801859c:	e4c2      	b.n	8017f24 <_strtod_l+0x4ac>
 801859e:	9b04      	ldr	r3, [sp, #16]
 80185a0:	b333      	cbz	r3, 80185f0 <_strtod_l+0xb78>
 80185a2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80185a4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80185a8:	d822      	bhi.n	80185f0 <_strtod_l+0xb78>
 80185aa:	a32d      	add	r3, pc, #180	; (adr r3, 8018660 <_strtod_l+0xbe8>)
 80185ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80185b0:	4640      	mov	r0, r8
 80185b2:	4649      	mov	r1, r9
 80185b4:	f7e8 faac 	bl	8000b10 <__aeabi_dcmple>
 80185b8:	b1a0      	cbz	r0, 80185e4 <_strtod_l+0xb6c>
 80185ba:	4649      	mov	r1, r9
 80185bc:	4640      	mov	r0, r8
 80185be:	f7e8 fb03 	bl	8000bc8 <__aeabi_d2uiz>
 80185c2:	2801      	cmp	r0, #1
 80185c4:	bf38      	it	cc
 80185c6:	2001      	movcc	r0, #1
 80185c8:	f7e7 ffac 	bl	8000524 <__aeabi_ui2d>
 80185cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80185ce:	4680      	mov	r8, r0
 80185d0:	4689      	mov	r9, r1
 80185d2:	bb13      	cbnz	r3, 801861a <_strtod_l+0xba2>
 80185d4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80185d8:	9014      	str	r0, [sp, #80]	; 0x50
 80185da:	9315      	str	r3, [sp, #84]	; 0x54
 80185dc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80185e0:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80185e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80185e6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80185e8:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80185ec:	1a9b      	subs	r3, r3, r2
 80185ee:	930d      	str	r3, [sp, #52]	; 0x34
 80185f0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80185f4:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80185f8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80185fc:	f001 ff86 	bl	801a50c <__ulp>
 8018600:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8018604:	ec53 2b10 	vmov	r2, r3, d0
 8018608:	f7e8 f806 	bl	8000618 <__aeabi_dmul>
 801860c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8018610:	f7e7 fe4c 	bl	80002ac <__adddf3>
 8018614:	4682      	mov	sl, r0
 8018616:	468b      	mov	fp, r1
 8018618:	e78f      	b.n	801853a <_strtod_l+0xac2>
 801861a:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 801861e:	e7dd      	b.n	80185dc <_strtod_l+0xb64>
 8018620:	a311      	add	r3, pc, #68	; (adr r3, 8018668 <_strtod_l+0xbf0>)
 8018622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018626:	f7e8 fa69 	bl	8000afc <__aeabi_dcmplt>
 801862a:	e7b4      	b.n	8018596 <_strtod_l+0xb1e>
 801862c:	2300      	movs	r3, #0
 801862e:	930e      	str	r3, [sp, #56]	; 0x38
 8018630:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8018632:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8018634:	6013      	str	r3, [r2, #0]
 8018636:	f7ff ba65 	b.w	8017b04 <_strtod_l+0x8c>
 801863a:	2b65      	cmp	r3, #101	; 0x65
 801863c:	f43f ab5d 	beq.w	8017cfa <_strtod_l+0x282>
 8018640:	2b45      	cmp	r3, #69	; 0x45
 8018642:	f43f ab5a 	beq.w	8017cfa <_strtod_l+0x282>
 8018646:	2201      	movs	r2, #1
 8018648:	f7ff bb92 	b.w	8017d70 <_strtod_l+0x2f8>
 801864c:	f3af 8000 	nop.w
 8018650:	94a03595 	.word	0x94a03595
 8018654:	3fdfffff 	.word	0x3fdfffff
 8018658:	35afe535 	.word	0x35afe535
 801865c:	3fe00000 	.word	0x3fe00000
 8018660:	ffc00000 	.word	0xffc00000
 8018664:	41dfffff 	.word	0x41dfffff
 8018668:	94a03595 	.word	0x94a03595
 801866c:	3fcfffff 	.word	0x3fcfffff
 8018670:	3ff00000 	.word	0x3ff00000
 8018674:	7ff00000 	.word	0x7ff00000
 8018678:	7fe00000 	.word	0x7fe00000
 801867c:	7c9fffff 	.word	0x7c9fffff
 8018680:	3fe00000 	.word	0x3fe00000
 8018684:	bff00000 	.word	0xbff00000
 8018688:	7fefffff 	.word	0x7fefffff

0801868c <strtod>:
 801868c:	460a      	mov	r2, r1
 801868e:	4601      	mov	r1, r0
 8018690:	4802      	ldr	r0, [pc, #8]	; (801869c <strtod+0x10>)
 8018692:	4b03      	ldr	r3, [pc, #12]	; (80186a0 <strtod+0x14>)
 8018694:	6800      	ldr	r0, [r0, #0]
 8018696:	f7ff b9ef 	b.w	8017a78 <_strtod_l>
 801869a:	bf00      	nop
 801869c:	20000074 	.word	0x20000074
 80186a0:	200000dc 	.word	0x200000dc

080186a4 <_strtol_l.isra.0>:
 80186a4:	2b01      	cmp	r3, #1
 80186a6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80186aa:	d001      	beq.n	80186b0 <_strtol_l.isra.0+0xc>
 80186ac:	2b24      	cmp	r3, #36	; 0x24
 80186ae:	d906      	bls.n	80186be <_strtol_l.isra.0+0x1a>
 80186b0:	f000 ff1e 	bl	80194f0 <__errno>
 80186b4:	2316      	movs	r3, #22
 80186b6:	6003      	str	r3, [r0, #0]
 80186b8:	2000      	movs	r0, #0
 80186ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80186be:	4f3a      	ldr	r7, [pc, #232]	; (80187a8 <_strtol_l.isra.0+0x104>)
 80186c0:	468e      	mov	lr, r1
 80186c2:	4676      	mov	r6, lr
 80186c4:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80186c8:	5de5      	ldrb	r5, [r4, r7]
 80186ca:	f015 0508 	ands.w	r5, r5, #8
 80186ce:	d1f8      	bne.n	80186c2 <_strtol_l.isra.0+0x1e>
 80186d0:	2c2d      	cmp	r4, #45	; 0x2d
 80186d2:	d134      	bne.n	801873e <_strtol_l.isra.0+0x9a>
 80186d4:	f89e 4000 	ldrb.w	r4, [lr]
 80186d8:	f04f 0801 	mov.w	r8, #1
 80186dc:	f106 0e02 	add.w	lr, r6, #2
 80186e0:	2b00      	cmp	r3, #0
 80186e2:	d05c      	beq.n	801879e <_strtol_l.isra.0+0xfa>
 80186e4:	2b10      	cmp	r3, #16
 80186e6:	d10c      	bne.n	8018702 <_strtol_l.isra.0+0x5e>
 80186e8:	2c30      	cmp	r4, #48	; 0x30
 80186ea:	d10a      	bne.n	8018702 <_strtol_l.isra.0+0x5e>
 80186ec:	f89e 4000 	ldrb.w	r4, [lr]
 80186f0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80186f4:	2c58      	cmp	r4, #88	; 0x58
 80186f6:	d14d      	bne.n	8018794 <_strtol_l.isra.0+0xf0>
 80186f8:	f89e 4001 	ldrb.w	r4, [lr, #1]
 80186fc:	2310      	movs	r3, #16
 80186fe:	f10e 0e02 	add.w	lr, lr, #2
 8018702:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8018706:	f10c 3cff 	add.w	ip, ip, #4294967295
 801870a:	2600      	movs	r6, #0
 801870c:	fbbc f9f3 	udiv	r9, ip, r3
 8018710:	4635      	mov	r5, r6
 8018712:	fb03 ca19 	mls	sl, r3, r9, ip
 8018716:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 801871a:	2f09      	cmp	r7, #9
 801871c:	d818      	bhi.n	8018750 <_strtol_l.isra.0+0xac>
 801871e:	463c      	mov	r4, r7
 8018720:	42a3      	cmp	r3, r4
 8018722:	dd24      	ble.n	801876e <_strtol_l.isra.0+0xca>
 8018724:	2e00      	cmp	r6, #0
 8018726:	db1f      	blt.n	8018768 <_strtol_l.isra.0+0xc4>
 8018728:	45a9      	cmp	r9, r5
 801872a:	d31d      	bcc.n	8018768 <_strtol_l.isra.0+0xc4>
 801872c:	d101      	bne.n	8018732 <_strtol_l.isra.0+0x8e>
 801872e:	45a2      	cmp	sl, r4
 8018730:	db1a      	blt.n	8018768 <_strtol_l.isra.0+0xc4>
 8018732:	fb05 4503 	mla	r5, r5, r3, r4
 8018736:	2601      	movs	r6, #1
 8018738:	f81e 4b01 	ldrb.w	r4, [lr], #1
 801873c:	e7eb      	b.n	8018716 <_strtol_l.isra.0+0x72>
 801873e:	2c2b      	cmp	r4, #43	; 0x2b
 8018740:	bf08      	it	eq
 8018742:	f89e 4000 	ldrbeq.w	r4, [lr]
 8018746:	46a8      	mov	r8, r5
 8018748:	bf08      	it	eq
 801874a:	f106 0e02 	addeq.w	lr, r6, #2
 801874e:	e7c7      	b.n	80186e0 <_strtol_l.isra.0+0x3c>
 8018750:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8018754:	2f19      	cmp	r7, #25
 8018756:	d801      	bhi.n	801875c <_strtol_l.isra.0+0xb8>
 8018758:	3c37      	subs	r4, #55	; 0x37
 801875a:	e7e1      	b.n	8018720 <_strtol_l.isra.0+0x7c>
 801875c:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8018760:	2f19      	cmp	r7, #25
 8018762:	d804      	bhi.n	801876e <_strtol_l.isra.0+0xca>
 8018764:	3c57      	subs	r4, #87	; 0x57
 8018766:	e7db      	b.n	8018720 <_strtol_l.isra.0+0x7c>
 8018768:	f04f 36ff 	mov.w	r6, #4294967295
 801876c:	e7e4      	b.n	8018738 <_strtol_l.isra.0+0x94>
 801876e:	2e00      	cmp	r6, #0
 8018770:	da05      	bge.n	801877e <_strtol_l.isra.0+0xda>
 8018772:	2322      	movs	r3, #34	; 0x22
 8018774:	6003      	str	r3, [r0, #0]
 8018776:	4665      	mov	r5, ip
 8018778:	b942      	cbnz	r2, 801878c <_strtol_l.isra.0+0xe8>
 801877a:	4628      	mov	r0, r5
 801877c:	e79d      	b.n	80186ba <_strtol_l.isra.0+0x16>
 801877e:	f1b8 0f00 	cmp.w	r8, #0
 8018782:	d000      	beq.n	8018786 <_strtol_l.isra.0+0xe2>
 8018784:	426d      	negs	r5, r5
 8018786:	2a00      	cmp	r2, #0
 8018788:	d0f7      	beq.n	801877a <_strtol_l.isra.0+0xd6>
 801878a:	b10e      	cbz	r6, 8018790 <_strtol_l.isra.0+0xec>
 801878c:	f10e 31ff 	add.w	r1, lr, #4294967295
 8018790:	6011      	str	r1, [r2, #0]
 8018792:	e7f2      	b.n	801877a <_strtol_l.isra.0+0xd6>
 8018794:	2430      	movs	r4, #48	; 0x30
 8018796:	2b00      	cmp	r3, #0
 8018798:	d1b3      	bne.n	8018702 <_strtol_l.isra.0+0x5e>
 801879a:	2308      	movs	r3, #8
 801879c:	e7b1      	b.n	8018702 <_strtol_l.isra.0+0x5e>
 801879e:	2c30      	cmp	r4, #48	; 0x30
 80187a0:	d0a4      	beq.n	80186ec <_strtol_l.isra.0+0x48>
 80187a2:	230a      	movs	r3, #10
 80187a4:	e7ad      	b.n	8018702 <_strtol_l.isra.0+0x5e>
 80187a6:	bf00      	nop
 80187a8:	0801fadf 	.word	0x0801fadf

080187ac <strtol>:
 80187ac:	4613      	mov	r3, r2
 80187ae:	460a      	mov	r2, r1
 80187b0:	4601      	mov	r1, r0
 80187b2:	4802      	ldr	r0, [pc, #8]	; (80187bc <strtol+0x10>)
 80187b4:	6800      	ldr	r0, [r0, #0]
 80187b6:	f7ff bf75 	b.w	80186a4 <_strtol_l.isra.0>
 80187ba:	bf00      	nop
 80187bc:	20000074 	.word	0x20000074

080187c0 <__assert_func>:
 80187c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80187c2:	4614      	mov	r4, r2
 80187c4:	461a      	mov	r2, r3
 80187c6:	4b09      	ldr	r3, [pc, #36]	; (80187ec <__assert_func+0x2c>)
 80187c8:	681b      	ldr	r3, [r3, #0]
 80187ca:	4605      	mov	r5, r0
 80187cc:	68d8      	ldr	r0, [r3, #12]
 80187ce:	b14c      	cbz	r4, 80187e4 <__assert_func+0x24>
 80187d0:	4b07      	ldr	r3, [pc, #28]	; (80187f0 <__assert_func+0x30>)
 80187d2:	9100      	str	r1, [sp, #0]
 80187d4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80187d8:	4906      	ldr	r1, [pc, #24]	; (80187f4 <__assert_func+0x34>)
 80187da:	462b      	mov	r3, r5
 80187dc:	f000 ff64 	bl	80196a8 <fiprintf>
 80187e0:	f002 fbd6 	bl	801af90 <abort>
 80187e4:	4b04      	ldr	r3, [pc, #16]	; (80187f8 <__assert_func+0x38>)
 80187e6:	461c      	mov	r4, r3
 80187e8:	e7f3      	b.n	80187d2 <__assert_func+0x12>
 80187ea:	bf00      	nop
 80187ec:	20000074 	.word	0x20000074
 80187f0:	0801fce0 	.word	0x0801fce0
 80187f4:	0801fced 	.word	0x0801fced
 80187f8:	0801fd1b 	.word	0x0801fd1b

080187fc <quorem>:
 80187fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018800:	6903      	ldr	r3, [r0, #16]
 8018802:	690c      	ldr	r4, [r1, #16]
 8018804:	42a3      	cmp	r3, r4
 8018806:	4607      	mov	r7, r0
 8018808:	f2c0 8081 	blt.w	801890e <quorem+0x112>
 801880c:	3c01      	subs	r4, #1
 801880e:	f101 0814 	add.w	r8, r1, #20
 8018812:	f100 0514 	add.w	r5, r0, #20
 8018816:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801881a:	9301      	str	r3, [sp, #4]
 801881c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8018820:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8018824:	3301      	adds	r3, #1
 8018826:	429a      	cmp	r2, r3
 8018828:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801882c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8018830:	fbb2 f6f3 	udiv	r6, r2, r3
 8018834:	d331      	bcc.n	801889a <quorem+0x9e>
 8018836:	f04f 0e00 	mov.w	lr, #0
 801883a:	4640      	mov	r0, r8
 801883c:	46ac      	mov	ip, r5
 801883e:	46f2      	mov	sl, lr
 8018840:	f850 2b04 	ldr.w	r2, [r0], #4
 8018844:	b293      	uxth	r3, r2
 8018846:	fb06 e303 	mla	r3, r6, r3, lr
 801884a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801884e:	b29b      	uxth	r3, r3
 8018850:	ebaa 0303 	sub.w	r3, sl, r3
 8018854:	0c12      	lsrs	r2, r2, #16
 8018856:	f8dc a000 	ldr.w	sl, [ip]
 801885a:	fb06 e202 	mla	r2, r6, r2, lr
 801885e:	fa13 f38a 	uxtah	r3, r3, sl
 8018862:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8018866:	fa1f fa82 	uxth.w	sl, r2
 801886a:	f8dc 2000 	ldr.w	r2, [ip]
 801886e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8018872:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8018876:	b29b      	uxth	r3, r3
 8018878:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801887c:	4581      	cmp	r9, r0
 801887e:	f84c 3b04 	str.w	r3, [ip], #4
 8018882:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8018886:	d2db      	bcs.n	8018840 <quorem+0x44>
 8018888:	f855 300b 	ldr.w	r3, [r5, fp]
 801888c:	b92b      	cbnz	r3, 801889a <quorem+0x9e>
 801888e:	9b01      	ldr	r3, [sp, #4]
 8018890:	3b04      	subs	r3, #4
 8018892:	429d      	cmp	r5, r3
 8018894:	461a      	mov	r2, r3
 8018896:	d32e      	bcc.n	80188f6 <quorem+0xfa>
 8018898:	613c      	str	r4, [r7, #16]
 801889a:	4638      	mov	r0, r7
 801889c:	f001 fd92 	bl	801a3c4 <__mcmp>
 80188a0:	2800      	cmp	r0, #0
 80188a2:	db24      	blt.n	80188ee <quorem+0xf2>
 80188a4:	3601      	adds	r6, #1
 80188a6:	4628      	mov	r0, r5
 80188a8:	f04f 0c00 	mov.w	ip, #0
 80188ac:	f858 2b04 	ldr.w	r2, [r8], #4
 80188b0:	f8d0 e000 	ldr.w	lr, [r0]
 80188b4:	b293      	uxth	r3, r2
 80188b6:	ebac 0303 	sub.w	r3, ip, r3
 80188ba:	0c12      	lsrs	r2, r2, #16
 80188bc:	fa13 f38e 	uxtah	r3, r3, lr
 80188c0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80188c4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80188c8:	b29b      	uxth	r3, r3
 80188ca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80188ce:	45c1      	cmp	r9, r8
 80188d0:	f840 3b04 	str.w	r3, [r0], #4
 80188d4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80188d8:	d2e8      	bcs.n	80188ac <quorem+0xb0>
 80188da:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80188de:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80188e2:	b922      	cbnz	r2, 80188ee <quorem+0xf2>
 80188e4:	3b04      	subs	r3, #4
 80188e6:	429d      	cmp	r5, r3
 80188e8:	461a      	mov	r2, r3
 80188ea:	d30a      	bcc.n	8018902 <quorem+0x106>
 80188ec:	613c      	str	r4, [r7, #16]
 80188ee:	4630      	mov	r0, r6
 80188f0:	b003      	add	sp, #12
 80188f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80188f6:	6812      	ldr	r2, [r2, #0]
 80188f8:	3b04      	subs	r3, #4
 80188fa:	2a00      	cmp	r2, #0
 80188fc:	d1cc      	bne.n	8018898 <quorem+0x9c>
 80188fe:	3c01      	subs	r4, #1
 8018900:	e7c7      	b.n	8018892 <quorem+0x96>
 8018902:	6812      	ldr	r2, [r2, #0]
 8018904:	3b04      	subs	r3, #4
 8018906:	2a00      	cmp	r2, #0
 8018908:	d1f0      	bne.n	80188ec <quorem+0xf0>
 801890a:	3c01      	subs	r4, #1
 801890c:	e7eb      	b.n	80188e6 <quorem+0xea>
 801890e:	2000      	movs	r0, #0
 8018910:	e7ee      	b.n	80188f0 <quorem+0xf4>
 8018912:	0000      	movs	r0, r0
 8018914:	0000      	movs	r0, r0
	...

08018918 <_dtoa_r>:
 8018918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801891c:	ed2d 8b02 	vpush	{d8}
 8018920:	ec57 6b10 	vmov	r6, r7, d0
 8018924:	b095      	sub	sp, #84	; 0x54
 8018926:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8018928:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801892c:	9105      	str	r1, [sp, #20]
 801892e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8018932:	4604      	mov	r4, r0
 8018934:	9209      	str	r2, [sp, #36]	; 0x24
 8018936:	930f      	str	r3, [sp, #60]	; 0x3c
 8018938:	b975      	cbnz	r5, 8018958 <_dtoa_r+0x40>
 801893a:	2010      	movs	r0, #16
 801893c:	f7fe fa36 	bl	8016dac <malloc>
 8018940:	4602      	mov	r2, r0
 8018942:	6260      	str	r0, [r4, #36]	; 0x24
 8018944:	b920      	cbnz	r0, 8018950 <_dtoa_r+0x38>
 8018946:	4bb2      	ldr	r3, [pc, #712]	; (8018c10 <_dtoa_r+0x2f8>)
 8018948:	21ea      	movs	r1, #234	; 0xea
 801894a:	48b2      	ldr	r0, [pc, #712]	; (8018c14 <_dtoa_r+0x2fc>)
 801894c:	f7ff ff38 	bl	80187c0 <__assert_func>
 8018950:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8018954:	6005      	str	r5, [r0, #0]
 8018956:	60c5      	str	r5, [r0, #12]
 8018958:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801895a:	6819      	ldr	r1, [r3, #0]
 801895c:	b151      	cbz	r1, 8018974 <_dtoa_r+0x5c>
 801895e:	685a      	ldr	r2, [r3, #4]
 8018960:	604a      	str	r2, [r1, #4]
 8018962:	2301      	movs	r3, #1
 8018964:	4093      	lsls	r3, r2
 8018966:	608b      	str	r3, [r1, #8]
 8018968:	4620      	mov	r0, r4
 801896a:	f001 faa3 	bl	8019eb4 <_Bfree>
 801896e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018970:	2200      	movs	r2, #0
 8018972:	601a      	str	r2, [r3, #0]
 8018974:	1e3b      	subs	r3, r7, #0
 8018976:	bfb9      	ittee	lt
 8018978:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801897c:	9303      	strlt	r3, [sp, #12]
 801897e:	2300      	movge	r3, #0
 8018980:	f8c8 3000 	strge.w	r3, [r8]
 8018984:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8018988:	4ba3      	ldr	r3, [pc, #652]	; (8018c18 <_dtoa_r+0x300>)
 801898a:	bfbc      	itt	lt
 801898c:	2201      	movlt	r2, #1
 801898e:	f8c8 2000 	strlt.w	r2, [r8]
 8018992:	ea33 0309 	bics.w	r3, r3, r9
 8018996:	d11b      	bne.n	80189d0 <_dtoa_r+0xb8>
 8018998:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801899a:	f242 730f 	movw	r3, #9999	; 0x270f
 801899e:	6013      	str	r3, [r2, #0]
 80189a0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80189a4:	4333      	orrs	r3, r6
 80189a6:	f000 857a 	beq.w	801949e <_dtoa_r+0xb86>
 80189aa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80189ac:	b963      	cbnz	r3, 80189c8 <_dtoa_r+0xb0>
 80189ae:	4b9b      	ldr	r3, [pc, #620]	; (8018c1c <_dtoa_r+0x304>)
 80189b0:	e024      	b.n	80189fc <_dtoa_r+0xe4>
 80189b2:	4b9b      	ldr	r3, [pc, #620]	; (8018c20 <_dtoa_r+0x308>)
 80189b4:	9300      	str	r3, [sp, #0]
 80189b6:	3308      	adds	r3, #8
 80189b8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80189ba:	6013      	str	r3, [r2, #0]
 80189bc:	9800      	ldr	r0, [sp, #0]
 80189be:	b015      	add	sp, #84	; 0x54
 80189c0:	ecbd 8b02 	vpop	{d8}
 80189c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80189c8:	4b94      	ldr	r3, [pc, #592]	; (8018c1c <_dtoa_r+0x304>)
 80189ca:	9300      	str	r3, [sp, #0]
 80189cc:	3303      	adds	r3, #3
 80189ce:	e7f3      	b.n	80189b8 <_dtoa_r+0xa0>
 80189d0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80189d4:	2200      	movs	r2, #0
 80189d6:	ec51 0b17 	vmov	r0, r1, d7
 80189da:	2300      	movs	r3, #0
 80189dc:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80189e0:	f7e8 f882 	bl	8000ae8 <__aeabi_dcmpeq>
 80189e4:	4680      	mov	r8, r0
 80189e6:	b158      	cbz	r0, 8018a00 <_dtoa_r+0xe8>
 80189e8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80189ea:	2301      	movs	r3, #1
 80189ec:	6013      	str	r3, [r2, #0]
 80189ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80189f0:	2b00      	cmp	r3, #0
 80189f2:	f000 8551 	beq.w	8019498 <_dtoa_r+0xb80>
 80189f6:	488b      	ldr	r0, [pc, #556]	; (8018c24 <_dtoa_r+0x30c>)
 80189f8:	6018      	str	r0, [r3, #0]
 80189fa:	1e43      	subs	r3, r0, #1
 80189fc:	9300      	str	r3, [sp, #0]
 80189fe:	e7dd      	b.n	80189bc <_dtoa_r+0xa4>
 8018a00:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8018a04:	aa12      	add	r2, sp, #72	; 0x48
 8018a06:	a913      	add	r1, sp, #76	; 0x4c
 8018a08:	4620      	mov	r0, r4
 8018a0a:	f001 fdfb 	bl	801a604 <__d2b>
 8018a0e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8018a12:	4683      	mov	fp, r0
 8018a14:	2d00      	cmp	r5, #0
 8018a16:	d07c      	beq.n	8018b12 <_dtoa_r+0x1fa>
 8018a18:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018a1a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8018a1e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8018a22:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8018a26:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8018a2a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8018a2e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8018a32:	4b7d      	ldr	r3, [pc, #500]	; (8018c28 <_dtoa_r+0x310>)
 8018a34:	2200      	movs	r2, #0
 8018a36:	4630      	mov	r0, r6
 8018a38:	4639      	mov	r1, r7
 8018a3a:	f7e7 fc35 	bl	80002a8 <__aeabi_dsub>
 8018a3e:	a36e      	add	r3, pc, #440	; (adr r3, 8018bf8 <_dtoa_r+0x2e0>)
 8018a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018a44:	f7e7 fde8 	bl	8000618 <__aeabi_dmul>
 8018a48:	a36d      	add	r3, pc, #436	; (adr r3, 8018c00 <_dtoa_r+0x2e8>)
 8018a4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018a4e:	f7e7 fc2d 	bl	80002ac <__adddf3>
 8018a52:	4606      	mov	r6, r0
 8018a54:	4628      	mov	r0, r5
 8018a56:	460f      	mov	r7, r1
 8018a58:	f7e7 fd74 	bl	8000544 <__aeabi_i2d>
 8018a5c:	a36a      	add	r3, pc, #424	; (adr r3, 8018c08 <_dtoa_r+0x2f0>)
 8018a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018a62:	f7e7 fdd9 	bl	8000618 <__aeabi_dmul>
 8018a66:	4602      	mov	r2, r0
 8018a68:	460b      	mov	r3, r1
 8018a6a:	4630      	mov	r0, r6
 8018a6c:	4639      	mov	r1, r7
 8018a6e:	f7e7 fc1d 	bl	80002ac <__adddf3>
 8018a72:	4606      	mov	r6, r0
 8018a74:	460f      	mov	r7, r1
 8018a76:	f7e8 f87f 	bl	8000b78 <__aeabi_d2iz>
 8018a7a:	2200      	movs	r2, #0
 8018a7c:	4682      	mov	sl, r0
 8018a7e:	2300      	movs	r3, #0
 8018a80:	4630      	mov	r0, r6
 8018a82:	4639      	mov	r1, r7
 8018a84:	f7e8 f83a 	bl	8000afc <__aeabi_dcmplt>
 8018a88:	b148      	cbz	r0, 8018a9e <_dtoa_r+0x186>
 8018a8a:	4650      	mov	r0, sl
 8018a8c:	f7e7 fd5a 	bl	8000544 <__aeabi_i2d>
 8018a90:	4632      	mov	r2, r6
 8018a92:	463b      	mov	r3, r7
 8018a94:	f7e8 f828 	bl	8000ae8 <__aeabi_dcmpeq>
 8018a98:	b908      	cbnz	r0, 8018a9e <_dtoa_r+0x186>
 8018a9a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8018a9e:	f1ba 0f16 	cmp.w	sl, #22
 8018aa2:	d854      	bhi.n	8018b4e <_dtoa_r+0x236>
 8018aa4:	4b61      	ldr	r3, [pc, #388]	; (8018c2c <_dtoa_r+0x314>)
 8018aa6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8018aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018aae:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8018ab2:	f7e8 f823 	bl	8000afc <__aeabi_dcmplt>
 8018ab6:	2800      	cmp	r0, #0
 8018ab8:	d04b      	beq.n	8018b52 <_dtoa_r+0x23a>
 8018aba:	f10a 3aff 	add.w	sl, sl, #4294967295
 8018abe:	2300      	movs	r3, #0
 8018ac0:	930e      	str	r3, [sp, #56]	; 0x38
 8018ac2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8018ac4:	1b5d      	subs	r5, r3, r5
 8018ac6:	1e6b      	subs	r3, r5, #1
 8018ac8:	9304      	str	r3, [sp, #16]
 8018aca:	bf43      	ittte	mi
 8018acc:	2300      	movmi	r3, #0
 8018ace:	f1c5 0801 	rsbmi	r8, r5, #1
 8018ad2:	9304      	strmi	r3, [sp, #16]
 8018ad4:	f04f 0800 	movpl.w	r8, #0
 8018ad8:	f1ba 0f00 	cmp.w	sl, #0
 8018adc:	db3b      	blt.n	8018b56 <_dtoa_r+0x23e>
 8018ade:	9b04      	ldr	r3, [sp, #16]
 8018ae0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8018ae4:	4453      	add	r3, sl
 8018ae6:	9304      	str	r3, [sp, #16]
 8018ae8:	2300      	movs	r3, #0
 8018aea:	9306      	str	r3, [sp, #24]
 8018aec:	9b05      	ldr	r3, [sp, #20]
 8018aee:	2b09      	cmp	r3, #9
 8018af0:	d869      	bhi.n	8018bc6 <_dtoa_r+0x2ae>
 8018af2:	2b05      	cmp	r3, #5
 8018af4:	bfc4      	itt	gt
 8018af6:	3b04      	subgt	r3, #4
 8018af8:	9305      	strgt	r3, [sp, #20]
 8018afa:	9b05      	ldr	r3, [sp, #20]
 8018afc:	f1a3 0302 	sub.w	r3, r3, #2
 8018b00:	bfcc      	ite	gt
 8018b02:	2500      	movgt	r5, #0
 8018b04:	2501      	movle	r5, #1
 8018b06:	2b03      	cmp	r3, #3
 8018b08:	d869      	bhi.n	8018bde <_dtoa_r+0x2c6>
 8018b0a:	e8df f003 	tbb	[pc, r3]
 8018b0e:	4e2c      	.short	0x4e2c
 8018b10:	5a4c      	.short	0x5a4c
 8018b12:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8018b16:	441d      	add	r5, r3
 8018b18:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8018b1c:	2b20      	cmp	r3, #32
 8018b1e:	bfc1      	itttt	gt
 8018b20:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8018b24:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8018b28:	fa09 f303 	lslgt.w	r3, r9, r3
 8018b2c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8018b30:	bfda      	itte	le
 8018b32:	f1c3 0320 	rsble	r3, r3, #32
 8018b36:	fa06 f003 	lslle.w	r0, r6, r3
 8018b3a:	4318      	orrgt	r0, r3
 8018b3c:	f7e7 fcf2 	bl	8000524 <__aeabi_ui2d>
 8018b40:	2301      	movs	r3, #1
 8018b42:	4606      	mov	r6, r0
 8018b44:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8018b48:	3d01      	subs	r5, #1
 8018b4a:	9310      	str	r3, [sp, #64]	; 0x40
 8018b4c:	e771      	b.n	8018a32 <_dtoa_r+0x11a>
 8018b4e:	2301      	movs	r3, #1
 8018b50:	e7b6      	b.n	8018ac0 <_dtoa_r+0x1a8>
 8018b52:	900e      	str	r0, [sp, #56]	; 0x38
 8018b54:	e7b5      	b.n	8018ac2 <_dtoa_r+0x1aa>
 8018b56:	f1ca 0300 	rsb	r3, sl, #0
 8018b5a:	9306      	str	r3, [sp, #24]
 8018b5c:	2300      	movs	r3, #0
 8018b5e:	eba8 080a 	sub.w	r8, r8, sl
 8018b62:	930d      	str	r3, [sp, #52]	; 0x34
 8018b64:	e7c2      	b.n	8018aec <_dtoa_r+0x1d4>
 8018b66:	2300      	movs	r3, #0
 8018b68:	9308      	str	r3, [sp, #32]
 8018b6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018b6c:	2b00      	cmp	r3, #0
 8018b6e:	dc39      	bgt.n	8018be4 <_dtoa_r+0x2cc>
 8018b70:	f04f 0901 	mov.w	r9, #1
 8018b74:	f8cd 9004 	str.w	r9, [sp, #4]
 8018b78:	464b      	mov	r3, r9
 8018b7a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8018b7e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8018b80:	2200      	movs	r2, #0
 8018b82:	6042      	str	r2, [r0, #4]
 8018b84:	2204      	movs	r2, #4
 8018b86:	f102 0614 	add.w	r6, r2, #20
 8018b8a:	429e      	cmp	r6, r3
 8018b8c:	6841      	ldr	r1, [r0, #4]
 8018b8e:	d92f      	bls.n	8018bf0 <_dtoa_r+0x2d8>
 8018b90:	4620      	mov	r0, r4
 8018b92:	f001 f94f 	bl	8019e34 <_Balloc>
 8018b96:	9000      	str	r0, [sp, #0]
 8018b98:	2800      	cmp	r0, #0
 8018b9a:	d14b      	bne.n	8018c34 <_dtoa_r+0x31c>
 8018b9c:	4b24      	ldr	r3, [pc, #144]	; (8018c30 <_dtoa_r+0x318>)
 8018b9e:	4602      	mov	r2, r0
 8018ba0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8018ba4:	e6d1      	b.n	801894a <_dtoa_r+0x32>
 8018ba6:	2301      	movs	r3, #1
 8018ba8:	e7de      	b.n	8018b68 <_dtoa_r+0x250>
 8018baa:	2300      	movs	r3, #0
 8018bac:	9308      	str	r3, [sp, #32]
 8018bae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018bb0:	eb0a 0903 	add.w	r9, sl, r3
 8018bb4:	f109 0301 	add.w	r3, r9, #1
 8018bb8:	2b01      	cmp	r3, #1
 8018bba:	9301      	str	r3, [sp, #4]
 8018bbc:	bfb8      	it	lt
 8018bbe:	2301      	movlt	r3, #1
 8018bc0:	e7dd      	b.n	8018b7e <_dtoa_r+0x266>
 8018bc2:	2301      	movs	r3, #1
 8018bc4:	e7f2      	b.n	8018bac <_dtoa_r+0x294>
 8018bc6:	2501      	movs	r5, #1
 8018bc8:	2300      	movs	r3, #0
 8018bca:	9305      	str	r3, [sp, #20]
 8018bcc:	9508      	str	r5, [sp, #32]
 8018bce:	f04f 39ff 	mov.w	r9, #4294967295
 8018bd2:	2200      	movs	r2, #0
 8018bd4:	f8cd 9004 	str.w	r9, [sp, #4]
 8018bd8:	2312      	movs	r3, #18
 8018bda:	9209      	str	r2, [sp, #36]	; 0x24
 8018bdc:	e7cf      	b.n	8018b7e <_dtoa_r+0x266>
 8018bde:	2301      	movs	r3, #1
 8018be0:	9308      	str	r3, [sp, #32]
 8018be2:	e7f4      	b.n	8018bce <_dtoa_r+0x2b6>
 8018be4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8018be8:	f8cd 9004 	str.w	r9, [sp, #4]
 8018bec:	464b      	mov	r3, r9
 8018bee:	e7c6      	b.n	8018b7e <_dtoa_r+0x266>
 8018bf0:	3101      	adds	r1, #1
 8018bf2:	6041      	str	r1, [r0, #4]
 8018bf4:	0052      	lsls	r2, r2, #1
 8018bf6:	e7c6      	b.n	8018b86 <_dtoa_r+0x26e>
 8018bf8:	636f4361 	.word	0x636f4361
 8018bfc:	3fd287a7 	.word	0x3fd287a7
 8018c00:	8b60c8b3 	.word	0x8b60c8b3
 8018c04:	3fc68a28 	.word	0x3fc68a28
 8018c08:	509f79fb 	.word	0x509f79fb
 8018c0c:	3fd34413 	.word	0x3fd34413
 8018c10:	0801fc18 	.word	0x0801fc18
 8018c14:	0801fd29 	.word	0x0801fd29
 8018c18:	7ff00000 	.word	0x7ff00000
 8018c1c:	0801fd25 	.word	0x0801fd25
 8018c20:	0801fd1c 	.word	0x0801fd1c
 8018c24:	0801fbf5 	.word	0x0801fbf5
 8018c28:	3ff80000 	.word	0x3ff80000
 8018c2c:	0801ff08 	.word	0x0801ff08
 8018c30:	0801fd88 	.word	0x0801fd88
 8018c34:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018c36:	9a00      	ldr	r2, [sp, #0]
 8018c38:	601a      	str	r2, [r3, #0]
 8018c3a:	9b01      	ldr	r3, [sp, #4]
 8018c3c:	2b0e      	cmp	r3, #14
 8018c3e:	f200 80ad 	bhi.w	8018d9c <_dtoa_r+0x484>
 8018c42:	2d00      	cmp	r5, #0
 8018c44:	f000 80aa 	beq.w	8018d9c <_dtoa_r+0x484>
 8018c48:	f1ba 0f00 	cmp.w	sl, #0
 8018c4c:	dd36      	ble.n	8018cbc <_dtoa_r+0x3a4>
 8018c4e:	4ac3      	ldr	r2, [pc, #780]	; (8018f5c <_dtoa_r+0x644>)
 8018c50:	f00a 030f 	and.w	r3, sl, #15
 8018c54:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8018c58:	ed93 7b00 	vldr	d7, [r3]
 8018c5c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8018c60:	ea4f 172a 	mov.w	r7, sl, asr #4
 8018c64:	eeb0 8a47 	vmov.f32	s16, s14
 8018c68:	eef0 8a67 	vmov.f32	s17, s15
 8018c6c:	d016      	beq.n	8018c9c <_dtoa_r+0x384>
 8018c6e:	4bbc      	ldr	r3, [pc, #752]	; (8018f60 <_dtoa_r+0x648>)
 8018c70:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8018c74:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8018c78:	f7e7 fdf8 	bl	800086c <__aeabi_ddiv>
 8018c7c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018c80:	f007 070f 	and.w	r7, r7, #15
 8018c84:	2503      	movs	r5, #3
 8018c86:	4eb6      	ldr	r6, [pc, #728]	; (8018f60 <_dtoa_r+0x648>)
 8018c88:	b957      	cbnz	r7, 8018ca0 <_dtoa_r+0x388>
 8018c8a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8018c8e:	ec53 2b18 	vmov	r2, r3, d8
 8018c92:	f7e7 fdeb 	bl	800086c <__aeabi_ddiv>
 8018c96:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018c9a:	e029      	b.n	8018cf0 <_dtoa_r+0x3d8>
 8018c9c:	2502      	movs	r5, #2
 8018c9e:	e7f2      	b.n	8018c86 <_dtoa_r+0x36e>
 8018ca0:	07f9      	lsls	r1, r7, #31
 8018ca2:	d508      	bpl.n	8018cb6 <_dtoa_r+0x39e>
 8018ca4:	ec51 0b18 	vmov	r0, r1, d8
 8018ca8:	e9d6 2300 	ldrd	r2, r3, [r6]
 8018cac:	f7e7 fcb4 	bl	8000618 <__aeabi_dmul>
 8018cb0:	ec41 0b18 	vmov	d8, r0, r1
 8018cb4:	3501      	adds	r5, #1
 8018cb6:	107f      	asrs	r7, r7, #1
 8018cb8:	3608      	adds	r6, #8
 8018cba:	e7e5      	b.n	8018c88 <_dtoa_r+0x370>
 8018cbc:	f000 80a6 	beq.w	8018e0c <_dtoa_r+0x4f4>
 8018cc0:	f1ca 0600 	rsb	r6, sl, #0
 8018cc4:	4ba5      	ldr	r3, [pc, #660]	; (8018f5c <_dtoa_r+0x644>)
 8018cc6:	4fa6      	ldr	r7, [pc, #664]	; (8018f60 <_dtoa_r+0x648>)
 8018cc8:	f006 020f 	and.w	r2, r6, #15
 8018ccc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8018cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018cd4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8018cd8:	f7e7 fc9e 	bl	8000618 <__aeabi_dmul>
 8018cdc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018ce0:	1136      	asrs	r6, r6, #4
 8018ce2:	2300      	movs	r3, #0
 8018ce4:	2502      	movs	r5, #2
 8018ce6:	2e00      	cmp	r6, #0
 8018ce8:	f040 8085 	bne.w	8018df6 <_dtoa_r+0x4de>
 8018cec:	2b00      	cmp	r3, #0
 8018cee:	d1d2      	bne.n	8018c96 <_dtoa_r+0x37e>
 8018cf0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018cf2:	2b00      	cmp	r3, #0
 8018cf4:	f000 808c 	beq.w	8018e10 <_dtoa_r+0x4f8>
 8018cf8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8018cfc:	4b99      	ldr	r3, [pc, #612]	; (8018f64 <_dtoa_r+0x64c>)
 8018cfe:	2200      	movs	r2, #0
 8018d00:	4630      	mov	r0, r6
 8018d02:	4639      	mov	r1, r7
 8018d04:	f7e7 fefa 	bl	8000afc <__aeabi_dcmplt>
 8018d08:	2800      	cmp	r0, #0
 8018d0a:	f000 8081 	beq.w	8018e10 <_dtoa_r+0x4f8>
 8018d0e:	9b01      	ldr	r3, [sp, #4]
 8018d10:	2b00      	cmp	r3, #0
 8018d12:	d07d      	beq.n	8018e10 <_dtoa_r+0x4f8>
 8018d14:	f1b9 0f00 	cmp.w	r9, #0
 8018d18:	dd3c      	ble.n	8018d94 <_dtoa_r+0x47c>
 8018d1a:	f10a 33ff 	add.w	r3, sl, #4294967295
 8018d1e:	9307      	str	r3, [sp, #28]
 8018d20:	2200      	movs	r2, #0
 8018d22:	4b91      	ldr	r3, [pc, #580]	; (8018f68 <_dtoa_r+0x650>)
 8018d24:	4630      	mov	r0, r6
 8018d26:	4639      	mov	r1, r7
 8018d28:	f7e7 fc76 	bl	8000618 <__aeabi_dmul>
 8018d2c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018d30:	3501      	adds	r5, #1
 8018d32:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8018d36:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8018d3a:	4628      	mov	r0, r5
 8018d3c:	f7e7 fc02 	bl	8000544 <__aeabi_i2d>
 8018d40:	4632      	mov	r2, r6
 8018d42:	463b      	mov	r3, r7
 8018d44:	f7e7 fc68 	bl	8000618 <__aeabi_dmul>
 8018d48:	4b88      	ldr	r3, [pc, #544]	; (8018f6c <_dtoa_r+0x654>)
 8018d4a:	2200      	movs	r2, #0
 8018d4c:	f7e7 faae 	bl	80002ac <__adddf3>
 8018d50:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8018d54:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018d58:	9303      	str	r3, [sp, #12]
 8018d5a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018d5c:	2b00      	cmp	r3, #0
 8018d5e:	d15c      	bne.n	8018e1a <_dtoa_r+0x502>
 8018d60:	4b83      	ldr	r3, [pc, #524]	; (8018f70 <_dtoa_r+0x658>)
 8018d62:	2200      	movs	r2, #0
 8018d64:	4630      	mov	r0, r6
 8018d66:	4639      	mov	r1, r7
 8018d68:	f7e7 fa9e 	bl	80002a8 <__aeabi_dsub>
 8018d6c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8018d70:	4606      	mov	r6, r0
 8018d72:	460f      	mov	r7, r1
 8018d74:	f7e7 fee0 	bl	8000b38 <__aeabi_dcmpgt>
 8018d78:	2800      	cmp	r0, #0
 8018d7a:	f040 8296 	bne.w	80192aa <_dtoa_r+0x992>
 8018d7e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8018d82:	4630      	mov	r0, r6
 8018d84:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8018d88:	4639      	mov	r1, r7
 8018d8a:	f7e7 feb7 	bl	8000afc <__aeabi_dcmplt>
 8018d8e:	2800      	cmp	r0, #0
 8018d90:	f040 8288 	bne.w	80192a4 <_dtoa_r+0x98c>
 8018d94:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8018d98:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8018d9c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8018d9e:	2b00      	cmp	r3, #0
 8018da0:	f2c0 8158 	blt.w	8019054 <_dtoa_r+0x73c>
 8018da4:	f1ba 0f0e 	cmp.w	sl, #14
 8018da8:	f300 8154 	bgt.w	8019054 <_dtoa_r+0x73c>
 8018dac:	4b6b      	ldr	r3, [pc, #428]	; (8018f5c <_dtoa_r+0x644>)
 8018dae:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8018db2:	e9d3 8900 	ldrd	r8, r9, [r3]
 8018db6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018db8:	2b00      	cmp	r3, #0
 8018dba:	f280 80e3 	bge.w	8018f84 <_dtoa_r+0x66c>
 8018dbe:	9b01      	ldr	r3, [sp, #4]
 8018dc0:	2b00      	cmp	r3, #0
 8018dc2:	f300 80df 	bgt.w	8018f84 <_dtoa_r+0x66c>
 8018dc6:	f040 826d 	bne.w	80192a4 <_dtoa_r+0x98c>
 8018dca:	4b69      	ldr	r3, [pc, #420]	; (8018f70 <_dtoa_r+0x658>)
 8018dcc:	2200      	movs	r2, #0
 8018dce:	4640      	mov	r0, r8
 8018dd0:	4649      	mov	r1, r9
 8018dd2:	f7e7 fc21 	bl	8000618 <__aeabi_dmul>
 8018dd6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8018dda:	f7e7 fea3 	bl	8000b24 <__aeabi_dcmpge>
 8018dde:	9e01      	ldr	r6, [sp, #4]
 8018de0:	4637      	mov	r7, r6
 8018de2:	2800      	cmp	r0, #0
 8018de4:	f040 8243 	bne.w	801926e <_dtoa_r+0x956>
 8018de8:	9d00      	ldr	r5, [sp, #0]
 8018dea:	2331      	movs	r3, #49	; 0x31
 8018dec:	f805 3b01 	strb.w	r3, [r5], #1
 8018df0:	f10a 0a01 	add.w	sl, sl, #1
 8018df4:	e23f      	b.n	8019276 <_dtoa_r+0x95e>
 8018df6:	07f2      	lsls	r2, r6, #31
 8018df8:	d505      	bpl.n	8018e06 <_dtoa_r+0x4ee>
 8018dfa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8018dfe:	f7e7 fc0b 	bl	8000618 <__aeabi_dmul>
 8018e02:	3501      	adds	r5, #1
 8018e04:	2301      	movs	r3, #1
 8018e06:	1076      	asrs	r6, r6, #1
 8018e08:	3708      	adds	r7, #8
 8018e0a:	e76c      	b.n	8018ce6 <_dtoa_r+0x3ce>
 8018e0c:	2502      	movs	r5, #2
 8018e0e:	e76f      	b.n	8018cf0 <_dtoa_r+0x3d8>
 8018e10:	9b01      	ldr	r3, [sp, #4]
 8018e12:	f8cd a01c 	str.w	sl, [sp, #28]
 8018e16:	930c      	str	r3, [sp, #48]	; 0x30
 8018e18:	e78d      	b.n	8018d36 <_dtoa_r+0x41e>
 8018e1a:	9900      	ldr	r1, [sp, #0]
 8018e1c:	980c      	ldr	r0, [sp, #48]	; 0x30
 8018e1e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8018e20:	4b4e      	ldr	r3, [pc, #312]	; (8018f5c <_dtoa_r+0x644>)
 8018e22:	ed9d 7b02 	vldr	d7, [sp, #8]
 8018e26:	4401      	add	r1, r0
 8018e28:	9102      	str	r1, [sp, #8]
 8018e2a:	9908      	ldr	r1, [sp, #32]
 8018e2c:	eeb0 8a47 	vmov.f32	s16, s14
 8018e30:	eef0 8a67 	vmov.f32	s17, s15
 8018e34:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8018e38:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8018e3c:	2900      	cmp	r1, #0
 8018e3e:	d045      	beq.n	8018ecc <_dtoa_r+0x5b4>
 8018e40:	494c      	ldr	r1, [pc, #304]	; (8018f74 <_dtoa_r+0x65c>)
 8018e42:	2000      	movs	r0, #0
 8018e44:	f7e7 fd12 	bl	800086c <__aeabi_ddiv>
 8018e48:	ec53 2b18 	vmov	r2, r3, d8
 8018e4c:	f7e7 fa2c 	bl	80002a8 <__aeabi_dsub>
 8018e50:	9d00      	ldr	r5, [sp, #0]
 8018e52:	ec41 0b18 	vmov	d8, r0, r1
 8018e56:	4639      	mov	r1, r7
 8018e58:	4630      	mov	r0, r6
 8018e5a:	f7e7 fe8d 	bl	8000b78 <__aeabi_d2iz>
 8018e5e:	900c      	str	r0, [sp, #48]	; 0x30
 8018e60:	f7e7 fb70 	bl	8000544 <__aeabi_i2d>
 8018e64:	4602      	mov	r2, r0
 8018e66:	460b      	mov	r3, r1
 8018e68:	4630      	mov	r0, r6
 8018e6a:	4639      	mov	r1, r7
 8018e6c:	f7e7 fa1c 	bl	80002a8 <__aeabi_dsub>
 8018e70:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018e72:	3330      	adds	r3, #48	; 0x30
 8018e74:	f805 3b01 	strb.w	r3, [r5], #1
 8018e78:	ec53 2b18 	vmov	r2, r3, d8
 8018e7c:	4606      	mov	r6, r0
 8018e7e:	460f      	mov	r7, r1
 8018e80:	f7e7 fe3c 	bl	8000afc <__aeabi_dcmplt>
 8018e84:	2800      	cmp	r0, #0
 8018e86:	d165      	bne.n	8018f54 <_dtoa_r+0x63c>
 8018e88:	4632      	mov	r2, r6
 8018e8a:	463b      	mov	r3, r7
 8018e8c:	4935      	ldr	r1, [pc, #212]	; (8018f64 <_dtoa_r+0x64c>)
 8018e8e:	2000      	movs	r0, #0
 8018e90:	f7e7 fa0a 	bl	80002a8 <__aeabi_dsub>
 8018e94:	ec53 2b18 	vmov	r2, r3, d8
 8018e98:	f7e7 fe30 	bl	8000afc <__aeabi_dcmplt>
 8018e9c:	2800      	cmp	r0, #0
 8018e9e:	f040 80b9 	bne.w	8019014 <_dtoa_r+0x6fc>
 8018ea2:	9b02      	ldr	r3, [sp, #8]
 8018ea4:	429d      	cmp	r5, r3
 8018ea6:	f43f af75 	beq.w	8018d94 <_dtoa_r+0x47c>
 8018eaa:	4b2f      	ldr	r3, [pc, #188]	; (8018f68 <_dtoa_r+0x650>)
 8018eac:	ec51 0b18 	vmov	r0, r1, d8
 8018eb0:	2200      	movs	r2, #0
 8018eb2:	f7e7 fbb1 	bl	8000618 <__aeabi_dmul>
 8018eb6:	4b2c      	ldr	r3, [pc, #176]	; (8018f68 <_dtoa_r+0x650>)
 8018eb8:	ec41 0b18 	vmov	d8, r0, r1
 8018ebc:	2200      	movs	r2, #0
 8018ebe:	4630      	mov	r0, r6
 8018ec0:	4639      	mov	r1, r7
 8018ec2:	f7e7 fba9 	bl	8000618 <__aeabi_dmul>
 8018ec6:	4606      	mov	r6, r0
 8018ec8:	460f      	mov	r7, r1
 8018eca:	e7c4      	b.n	8018e56 <_dtoa_r+0x53e>
 8018ecc:	ec51 0b17 	vmov	r0, r1, d7
 8018ed0:	f7e7 fba2 	bl	8000618 <__aeabi_dmul>
 8018ed4:	9b02      	ldr	r3, [sp, #8]
 8018ed6:	9d00      	ldr	r5, [sp, #0]
 8018ed8:	930c      	str	r3, [sp, #48]	; 0x30
 8018eda:	ec41 0b18 	vmov	d8, r0, r1
 8018ede:	4639      	mov	r1, r7
 8018ee0:	4630      	mov	r0, r6
 8018ee2:	f7e7 fe49 	bl	8000b78 <__aeabi_d2iz>
 8018ee6:	9011      	str	r0, [sp, #68]	; 0x44
 8018ee8:	f7e7 fb2c 	bl	8000544 <__aeabi_i2d>
 8018eec:	4602      	mov	r2, r0
 8018eee:	460b      	mov	r3, r1
 8018ef0:	4630      	mov	r0, r6
 8018ef2:	4639      	mov	r1, r7
 8018ef4:	f7e7 f9d8 	bl	80002a8 <__aeabi_dsub>
 8018ef8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8018efa:	3330      	adds	r3, #48	; 0x30
 8018efc:	f805 3b01 	strb.w	r3, [r5], #1
 8018f00:	9b02      	ldr	r3, [sp, #8]
 8018f02:	429d      	cmp	r5, r3
 8018f04:	4606      	mov	r6, r0
 8018f06:	460f      	mov	r7, r1
 8018f08:	f04f 0200 	mov.w	r2, #0
 8018f0c:	d134      	bne.n	8018f78 <_dtoa_r+0x660>
 8018f0e:	4b19      	ldr	r3, [pc, #100]	; (8018f74 <_dtoa_r+0x65c>)
 8018f10:	ec51 0b18 	vmov	r0, r1, d8
 8018f14:	f7e7 f9ca 	bl	80002ac <__adddf3>
 8018f18:	4602      	mov	r2, r0
 8018f1a:	460b      	mov	r3, r1
 8018f1c:	4630      	mov	r0, r6
 8018f1e:	4639      	mov	r1, r7
 8018f20:	f7e7 fe0a 	bl	8000b38 <__aeabi_dcmpgt>
 8018f24:	2800      	cmp	r0, #0
 8018f26:	d175      	bne.n	8019014 <_dtoa_r+0x6fc>
 8018f28:	ec53 2b18 	vmov	r2, r3, d8
 8018f2c:	4911      	ldr	r1, [pc, #68]	; (8018f74 <_dtoa_r+0x65c>)
 8018f2e:	2000      	movs	r0, #0
 8018f30:	f7e7 f9ba 	bl	80002a8 <__aeabi_dsub>
 8018f34:	4602      	mov	r2, r0
 8018f36:	460b      	mov	r3, r1
 8018f38:	4630      	mov	r0, r6
 8018f3a:	4639      	mov	r1, r7
 8018f3c:	f7e7 fdde 	bl	8000afc <__aeabi_dcmplt>
 8018f40:	2800      	cmp	r0, #0
 8018f42:	f43f af27 	beq.w	8018d94 <_dtoa_r+0x47c>
 8018f46:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8018f48:	1e6b      	subs	r3, r5, #1
 8018f4a:	930c      	str	r3, [sp, #48]	; 0x30
 8018f4c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8018f50:	2b30      	cmp	r3, #48	; 0x30
 8018f52:	d0f8      	beq.n	8018f46 <_dtoa_r+0x62e>
 8018f54:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8018f58:	e04a      	b.n	8018ff0 <_dtoa_r+0x6d8>
 8018f5a:	bf00      	nop
 8018f5c:	0801ff08 	.word	0x0801ff08
 8018f60:	0801fee0 	.word	0x0801fee0
 8018f64:	3ff00000 	.word	0x3ff00000
 8018f68:	40240000 	.word	0x40240000
 8018f6c:	401c0000 	.word	0x401c0000
 8018f70:	40140000 	.word	0x40140000
 8018f74:	3fe00000 	.word	0x3fe00000
 8018f78:	4baf      	ldr	r3, [pc, #700]	; (8019238 <_dtoa_r+0x920>)
 8018f7a:	f7e7 fb4d 	bl	8000618 <__aeabi_dmul>
 8018f7e:	4606      	mov	r6, r0
 8018f80:	460f      	mov	r7, r1
 8018f82:	e7ac      	b.n	8018ede <_dtoa_r+0x5c6>
 8018f84:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8018f88:	9d00      	ldr	r5, [sp, #0]
 8018f8a:	4642      	mov	r2, r8
 8018f8c:	464b      	mov	r3, r9
 8018f8e:	4630      	mov	r0, r6
 8018f90:	4639      	mov	r1, r7
 8018f92:	f7e7 fc6b 	bl	800086c <__aeabi_ddiv>
 8018f96:	f7e7 fdef 	bl	8000b78 <__aeabi_d2iz>
 8018f9a:	9002      	str	r0, [sp, #8]
 8018f9c:	f7e7 fad2 	bl	8000544 <__aeabi_i2d>
 8018fa0:	4642      	mov	r2, r8
 8018fa2:	464b      	mov	r3, r9
 8018fa4:	f7e7 fb38 	bl	8000618 <__aeabi_dmul>
 8018fa8:	4602      	mov	r2, r0
 8018faa:	460b      	mov	r3, r1
 8018fac:	4630      	mov	r0, r6
 8018fae:	4639      	mov	r1, r7
 8018fb0:	f7e7 f97a 	bl	80002a8 <__aeabi_dsub>
 8018fb4:	9e02      	ldr	r6, [sp, #8]
 8018fb6:	9f01      	ldr	r7, [sp, #4]
 8018fb8:	3630      	adds	r6, #48	; 0x30
 8018fba:	f805 6b01 	strb.w	r6, [r5], #1
 8018fbe:	9e00      	ldr	r6, [sp, #0]
 8018fc0:	1bae      	subs	r6, r5, r6
 8018fc2:	42b7      	cmp	r7, r6
 8018fc4:	4602      	mov	r2, r0
 8018fc6:	460b      	mov	r3, r1
 8018fc8:	d137      	bne.n	801903a <_dtoa_r+0x722>
 8018fca:	f7e7 f96f 	bl	80002ac <__adddf3>
 8018fce:	4642      	mov	r2, r8
 8018fd0:	464b      	mov	r3, r9
 8018fd2:	4606      	mov	r6, r0
 8018fd4:	460f      	mov	r7, r1
 8018fd6:	f7e7 fdaf 	bl	8000b38 <__aeabi_dcmpgt>
 8018fda:	b9c8      	cbnz	r0, 8019010 <_dtoa_r+0x6f8>
 8018fdc:	4642      	mov	r2, r8
 8018fde:	464b      	mov	r3, r9
 8018fe0:	4630      	mov	r0, r6
 8018fe2:	4639      	mov	r1, r7
 8018fe4:	f7e7 fd80 	bl	8000ae8 <__aeabi_dcmpeq>
 8018fe8:	b110      	cbz	r0, 8018ff0 <_dtoa_r+0x6d8>
 8018fea:	9b02      	ldr	r3, [sp, #8]
 8018fec:	07d9      	lsls	r1, r3, #31
 8018fee:	d40f      	bmi.n	8019010 <_dtoa_r+0x6f8>
 8018ff0:	4620      	mov	r0, r4
 8018ff2:	4659      	mov	r1, fp
 8018ff4:	f000 ff5e 	bl	8019eb4 <_Bfree>
 8018ff8:	2300      	movs	r3, #0
 8018ffa:	702b      	strb	r3, [r5, #0]
 8018ffc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018ffe:	f10a 0001 	add.w	r0, sl, #1
 8019002:	6018      	str	r0, [r3, #0]
 8019004:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8019006:	2b00      	cmp	r3, #0
 8019008:	f43f acd8 	beq.w	80189bc <_dtoa_r+0xa4>
 801900c:	601d      	str	r5, [r3, #0]
 801900e:	e4d5      	b.n	80189bc <_dtoa_r+0xa4>
 8019010:	f8cd a01c 	str.w	sl, [sp, #28]
 8019014:	462b      	mov	r3, r5
 8019016:	461d      	mov	r5, r3
 8019018:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801901c:	2a39      	cmp	r2, #57	; 0x39
 801901e:	d108      	bne.n	8019032 <_dtoa_r+0x71a>
 8019020:	9a00      	ldr	r2, [sp, #0]
 8019022:	429a      	cmp	r2, r3
 8019024:	d1f7      	bne.n	8019016 <_dtoa_r+0x6fe>
 8019026:	9a07      	ldr	r2, [sp, #28]
 8019028:	9900      	ldr	r1, [sp, #0]
 801902a:	3201      	adds	r2, #1
 801902c:	9207      	str	r2, [sp, #28]
 801902e:	2230      	movs	r2, #48	; 0x30
 8019030:	700a      	strb	r2, [r1, #0]
 8019032:	781a      	ldrb	r2, [r3, #0]
 8019034:	3201      	adds	r2, #1
 8019036:	701a      	strb	r2, [r3, #0]
 8019038:	e78c      	b.n	8018f54 <_dtoa_r+0x63c>
 801903a:	4b7f      	ldr	r3, [pc, #508]	; (8019238 <_dtoa_r+0x920>)
 801903c:	2200      	movs	r2, #0
 801903e:	f7e7 faeb 	bl	8000618 <__aeabi_dmul>
 8019042:	2200      	movs	r2, #0
 8019044:	2300      	movs	r3, #0
 8019046:	4606      	mov	r6, r0
 8019048:	460f      	mov	r7, r1
 801904a:	f7e7 fd4d 	bl	8000ae8 <__aeabi_dcmpeq>
 801904e:	2800      	cmp	r0, #0
 8019050:	d09b      	beq.n	8018f8a <_dtoa_r+0x672>
 8019052:	e7cd      	b.n	8018ff0 <_dtoa_r+0x6d8>
 8019054:	9a08      	ldr	r2, [sp, #32]
 8019056:	2a00      	cmp	r2, #0
 8019058:	f000 80c4 	beq.w	80191e4 <_dtoa_r+0x8cc>
 801905c:	9a05      	ldr	r2, [sp, #20]
 801905e:	2a01      	cmp	r2, #1
 8019060:	f300 80a8 	bgt.w	80191b4 <_dtoa_r+0x89c>
 8019064:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8019066:	2a00      	cmp	r2, #0
 8019068:	f000 80a0 	beq.w	80191ac <_dtoa_r+0x894>
 801906c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8019070:	9e06      	ldr	r6, [sp, #24]
 8019072:	4645      	mov	r5, r8
 8019074:	9a04      	ldr	r2, [sp, #16]
 8019076:	2101      	movs	r1, #1
 8019078:	441a      	add	r2, r3
 801907a:	4620      	mov	r0, r4
 801907c:	4498      	add	r8, r3
 801907e:	9204      	str	r2, [sp, #16]
 8019080:	f001 f81e 	bl	801a0c0 <__i2b>
 8019084:	4607      	mov	r7, r0
 8019086:	2d00      	cmp	r5, #0
 8019088:	dd0b      	ble.n	80190a2 <_dtoa_r+0x78a>
 801908a:	9b04      	ldr	r3, [sp, #16]
 801908c:	2b00      	cmp	r3, #0
 801908e:	dd08      	ble.n	80190a2 <_dtoa_r+0x78a>
 8019090:	42ab      	cmp	r3, r5
 8019092:	9a04      	ldr	r2, [sp, #16]
 8019094:	bfa8      	it	ge
 8019096:	462b      	movge	r3, r5
 8019098:	eba8 0803 	sub.w	r8, r8, r3
 801909c:	1aed      	subs	r5, r5, r3
 801909e:	1ad3      	subs	r3, r2, r3
 80190a0:	9304      	str	r3, [sp, #16]
 80190a2:	9b06      	ldr	r3, [sp, #24]
 80190a4:	b1fb      	cbz	r3, 80190e6 <_dtoa_r+0x7ce>
 80190a6:	9b08      	ldr	r3, [sp, #32]
 80190a8:	2b00      	cmp	r3, #0
 80190aa:	f000 809f 	beq.w	80191ec <_dtoa_r+0x8d4>
 80190ae:	2e00      	cmp	r6, #0
 80190b0:	dd11      	ble.n	80190d6 <_dtoa_r+0x7be>
 80190b2:	4639      	mov	r1, r7
 80190b4:	4632      	mov	r2, r6
 80190b6:	4620      	mov	r0, r4
 80190b8:	f001 f8be 	bl	801a238 <__pow5mult>
 80190bc:	465a      	mov	r2, fp
 80190be:	4601      	mov	r1, r0
 80190c0:	4607      	mov	r7, r0
 80190c2:	4620      	mov	r0, r4
 80190c4:	f001 f812 	bl	801a0ec <__multiply>
 80190c8:	4659      	mov	r1, fp
 80190ca:	9007      	str	r0, [sp, #28]
 80190cc:	4620      	mov	r0, r4
 80190ce:	f000 fef1 	bl	8019eb4 <_Bfree>
 80190d2:	9b07      	ldr	r3, [sp, #28]
 80190d4:	469b      	mov	fp, r3
 80190d6:	9b06      	ldr	r3, [sp, #24]
 80190d8:	1b9a      	subs	r2, r3, r6
 80190da:	d004      	beq.n	80190e6 <_dtoa_r+0x7ce>
 80190dc:	4659      	mov	r1, fp
 80190de:	4620      	mov	r0, r4
 80190e0:	f001 f8aa 	bl	801a238 <__pow5mult>
 80190e4:	4683      	mov	fp, r0
 80190e6:	2101      	movs	r1, #1
 80190e8:	4620      	mov	r0, r4
 80190ea:	f000 ffe9 	bl	801a0c0 <__i2b>
 80190ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80190f0:	2b00      	cmp	r3, #0
 80190f2:	4606      	mov	r6, r0
 80190f4:	dd7c      	ble.n	80191f0 <_dtoa_r+0x8d8>
 80190f6:	461a      	mov	r2, r3
 80190f8:	4601      	mov	r1, r0
 80190fa:	4620      	mov	r0, r4
 80190fc:	f001 f89c 	bl	801a238 <__pow5mult>
 8019100:	9b05      	ldr	r3, [sp, #20]
 8019102:	2b01      	cmp	r3, #1
 8019104:	4606      	mov	r6, r0
 8019106:	dd76      	ble.n	80191f6 <_dtoa_r+0x8de>
 8019108:	2300      	movs	r3, #0
 801910a:	9306      	str	r3, [sp, #24]
 801910c:	6933      	ldr	r3, [r6, #16]
 801910e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8019112:	6918      	ldr	r0, [r3, #16]
 8019114:	f000 ff84 	bl	801a020 <__hi0bits>
 8019118:	f1c0 0020 	rsb	r0, r0, #32
 801911c:	9b04      	ldr	r3, [sp, #16]
 801911e:	4418      	add	r0, r3
 8019120:	f010 001f 	ands.w	r0, r0, #31
 8019124:	f000 8086 	beq.w	8019234 <_dtoa_r+0x91c>
 8019128:	f1c0 0320 	rsb	r3, r0, #32
 801912c:	2b04      	cmp	r3, #4
 801912e:	dd7f      	ble.n	8019230 <_dtoa_r+0x918>
 8019130:	f1c0 001c 	rsb	r0, r0, #28
 8019134:	9b04      	ldr	r3, [sp, #16]
 8019136:	4403      	add	r3, r0
 8019138:	4480      	add	r8, r0
 801913a:	4405      	add	r5, r0
 801913c:	9304      	str	r3, [sp, #16]
 801913e:	f1b8 0f00 	cmp.w	r8, #0
 8019142:	dd05      	ble.n	8019150 <_dtoa_r+0x838>
 8019144:	4659      	mov	r1, fp
 8019146:	4642      	mov	r2, r8
 8019148:	4620      	mov	r0, r4
 801914a:	f001 f8cf 	bl	801a2ec <__lshift>
 801914e:	4683      	mov	fp, r0
 8019150:	9b04      	ldr	r3, [sp, #16]
 8019152:	2b00      	cmp	r3, #0
 8019154:	dd05      	ble.n	8019162 <_dtoa_r+0x84a>
 8019156:	4631      	mov	r1, r6
 8019158:	461a      	mov	r2, r3
 801915a:	4620      	mov	r0, r4
 801915c:	f001 f8c6 	bl	801a2ec <__lshift>
 8019160:	4606      	mov	r6, r0
 8019162:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019164:	2b00      	cmp	r3, #0
 8019166:	d069      	beq.n	801923c <_dtoa_r+0x924>
 8019168:	4631      	mov	r1, r6
 801916a:	4658      	mov	r0, fp
 801916c:	f001 f92a 	bl	801a3c4 <__mcmp>
 8019170:	2800      	cmp	r0, #0
 8019172:	da63      	bge.n	801923c <_dtoa_r+0x924>
 8019174:	2300      	movs	r3, #0
 8019176:	4659      	mov	r1, fp
 8019178:	220a      	movs	r2, #10
 801917a:	4620      	mov	r0, r4
 801917c:	f000 febc 	bl	8019ef8 <__multadd>
 8019180:	9b08      	ldr	r3, [sp, #32]
 8019182:	f10a 3aff 	add.w	sl, sl, #4294967295
 8019186:	4683      	mov	fp, r0
 8019188:	2b00      	cmp	r3, #0
 801918a:	f000 818f 	beq.w	80194ac <_dtoa_r+0xb94>
 801918e:	4639      	mov	r1, r7
 8019190:	2300      	movs	r3, #0
 8019192:	220a      	movs	r2, #10
 8019194:	4620      	mov	r0, r4
 8019196:	f000 feaf 	bl	8019ef8 <__multadd>
 801919a:	f1b9 0f00 	cmp.w	r9, #0
 801919e:	4607      	mov	r7, r0
 80191a0:	f300 808e 	bgt.w	80192c0 <_dtoa_r+0x9a8>
 80191a4:	9b05      	ldr	r3, [sp, #20]
 80191a6:	2b02      	cmp	r3, #2
 80191a8:	dc50      	bgt.n	801924c <_dtoa_r+0x934>
 80191aa:	e089      	b.n	80192c0 <_dtoa_r+0x9a8>
 80191ac:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80191ae:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80191b2:	e75d      	b.n	8019070 <_dtoa_r+0x758>
 80191b4:	9b01      	ldr	r3, [sp, #4]
 80191b6:	1e5e      	subs	r6, r3, #1
 80191b8:	9b06      	ldr	r3, [sp, #24]
 80191ba:	42b3      	cmp	r3, r6
 80191bc:	bfbf      	itttt	lt
 80191be:	9b06      	ldrlt	r3, [sp, #24]
 80191c0:	9606      	strlt	r6, [sp, #24]
 80191c2:	1af2      	sublt	r2, r6, r3
 80191c4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 80191c6:	bfb6      	itet	lt
 80191c8:	189b      	addlt	r3, r3, r2
 80191ca:	1b9e      	subge	r6, r3, r6
 80191cc:	930d      	strlt	r3, [sp, #52]	; 0x34
 80191ce:	9b01      	ldr	r3, [sp, #4]
 80191d0:	bfb8      	it	lt
 80191d2:	2600      	movlt	r6, #0
 80191d4:	2b00      	cmp	r3, #0
 80191d6:	bfb5      	itete	lt
 80191d8:	eba8 0503 	sublt.w	r5, r8, r3
 80191dc:	9b01      	ldrge	r3, [sp, #4]
 80191de:	2300      	movlt	r3, #0
 80191e0:	4645      	movge	r5, r8
 80191e2:	e747      	b.n	8019074 <_dtoa_r+0x75c>
 80191e4:	9e06      	ldr	r6, [sp, #24]
 80191e6:	9f08      	ldr	r7, [sp, #32]
 80191e8:	4645      	mov	r5, r8
 80191ea:	e74c      	b.n	8019086 <_dtoa_r+0x76e>
 80191ec:	9a06      	ldr	r2, [sp, #24]
 80191ee:	e775      	b.n	80190dc <_dtoa_r+0x7c4>
 80191f0:	9b05      	ldr	r3, [sp, #20]
 80191f2:	2b01      	cmp	r3, #1
 80191f4:	dc18      	bgt.n	8019228 <_dtoa_r+0x910>
 80191f6:	9b02      	ldr	r3, [sp, #8]
 80191f8:	b9b3      	cbnz	r3, 8019228 <_dtoa_r+0x910>
 80191fa:	9b03      	ldr	r3, [sp, #12]
 80191fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8019200:	b9a3      	cbnz	r3, 801922c <_dtoa_r+0x914>
 8019202:	9b03      	ldr	r3, [sp, #12]
 8019204:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8019208:	0d1b      	lsrs	r3, r3, #20
 801920a:	051b      	lsls	r3, r3, #20
 801920c:	b12b      	cbz	r3, 801921a <_dtoa_r+0x902>
 801920e:	9b04      	ldr	r3, [sp, #16]
 8019210:	3301      	adds	r3, #1
 8019212:	9304      	str	r3, [sp, #16]
 8019214:	f108 0801 	add.w	r8, r8, #1
 8019218:	2301      	movs	r3, #1
 801921a:	9306      	str	r3, [sp, #24]
 801921c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801921e:	2b00      	cmp	r3, #0
 8019220:	f47f af74 	bne.w	801910c <_dtoa_r+0x7f4>
 8019224:	2001      	movs	r0, #1
 8019226:	e779      	b.n	801911c <_dtoa_r+0x804>
 8019228:	2300      	movs	r3, #0
 801922a:	e7f6      	b.n	801921a <_dtoa_r+0x902>
 801922c:	9b02      	ldr	r3, [sp, #8]
 801922e:	e7f4      	b.n	801921a <_dtoa_r+0x902>
 8019230:	d085      	beq.n	801913e <_dtoa_r+0x826>
 8019232:	4618      	mov	r0, r3
 8019234:	301c      	adds	r0, #28
 8019236:	e77d      	b.n	8019134 <_dtoa_r+0x81c>
 8019238:	40240000 	.word	0x40240000
 801923c:	9b01      	ldr	r3, [sp, #4]
 801923e:	2b00      	cmp	r3, #0
 8019240:	dc38      	bgt.n	80192b4 <_dtoa_r+0x99c>
 8019242:	9b05      	ldr	r3, [sp, #20]
 8019244:	2b02      	cmp	r3, #2
 8019246:	dd35      	ble.n	80192b4 <_dtoa_r+0x99c>
 8019248:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801924c:	f1b9 0f00 	cmp.w	r9, #0
 8019250:	d10d      	bne.n	801926e <_dtoa_r+0x956>
 8019252:	4631      	mov	r1, r6
 8019254:	464b      	mov	r3, r9
 8019256:	2205      	movs	r2, #5
 8019258:	4620      	mov	r0, r4
 801925a:	f000 fe4d 	bl	8019ef8 <__multadd>
 801925e:	4601      	mov	r1, r0
 8019260:	4606      	mov	r6, r0
 8019262:	4658      	mov	r0, fp
 8019264:	f001 f8ae 	bl	801a3c4 <__mcmp>
 8019268:	2800      	cmp	r0, #0
 801926a:	f73f adbd 	bgt.w	8018de8 <_dtoa_r+0x4d0>
 801926e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019270:	9d00      	ldr	r5, [sp, #0]
 8019272:	ea6f 0a03 	mvn.w	sl, r3
 8019276:	f04f 0800 	mov.w	r8, #0
 801927a:	4631      	mov	r1, r6
 801927c:	4620      	mov	r0, r4
 801927e:	f000 fe19 	bl	8019eb4 <_Bfree>
 8019282:	2f00      	cmp	r7, #0
 8019284:	f43f aeb4 	beq.w	8018ff0 <_dtoa_r+0x6d8>
 8019288:	f1b8 0f00 	cmp.w	r8, #0
 801928c:	d005      	beq.n	801929a <_dtoa_r+0x982>
 801928e:	45b8      	cmp	r8, r7
 8019290:	d003      	beq.n	801929a <_dtoa_r+0x982>
 8019292:	4641      	mov	r1, r8
 8019294:	4620      	mov	r0, r4
 8019296:	f000 fe0d 	bl	8019eb4 <_Bfree>
 801929a:	4639      	mov	r1, r7
 801929c:	4620      	mov	r0, r4
 801929e:	f000 fe09 	bl	8019eb4 <_Bfree>
 80192a2:	e6a5      	b.n	8018ff0 <_dtoa_r+0x6d8>
 80192a4:	2600      	movs	r6, #0
 80192a6:	4637      	mov	r7, r6
 80192a8:	e7e1      	b.n	801926e <_dtoa_r+0x956>
 80192aa:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80192ac:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80192b0:	4637      	mov	r7, r6
 80192b2:	e599      	b.n	8018de8 <_dtoa_r+0x4d0>
 80192b4:	9b08      	ldr	r3, [sp, #32]
 80192b6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80192ba:	2b00      	cmp	r3, #0
 80192bc:	f000 80fd 	beq.w	80194ba <_dtoa_r+0xba2>
 80192c0:	2d00      	cmp	r5, #0
 80192c2:	dd05      	ble.n	80192d0 <_dtoa_r+0x9b8>
 80192c4:	4639      	mov	r1, r7
 80192c6:	462a      	mov	r2, r5
 80192c8:	4620      	mov	r0, r4
 80192ca:	f001 f80f 	bl	801a2ec <__lshift>
 80192ce:	4607      	mov	r7, r0
 80192d0:	9b06      	ldr	r3, [sp, #24]
 80192d2:	2b00      	cmp	r3, #0
 80192d4:	d05c      	beq.n	8019390 <_dtoa_r+0xa78>
 80192d6:	6879      	ldr	r1, [r7, #4]
 80192d8:	4620      	mov	r0, r4
 80192da:	f000 fdab 	bl	8019e34 <_Balloc>
 80192de:	4605      	mov	r5, r0
 80192e0:	b928      	cbnz	r0, 80192ee <_dtoa_r+0x9d6>
 80192e2:	4b80      	ldr	r3, [pc, #512]	; (80194e4 <_dtoa_r+0xbcc>)
 80192e4:	4602      	mov	r2, r0
 80192e6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80192ea:	f7ff bb2e 	b.w	801894a <_dtoa_r+0x32>
 80192ee:	693a      	ldr	r2, [r7, #16]
 80192f0:	3202      	adds	r2, #2
 80192f2:	0092      	lsls	r2, r2, #2
 80192f4:	f107 010c 	add.w	r1, r7, #12
 80192f8:	300c      	adds	r0, #12
 80192fa:	f7fd fd75 	bl	8016de8 <memcpy>
 80192fe:	2201      	movs	r2, #1
 8019300:	4629      	mov	r1, r5
 8019302:	4620      	mov	r0, r4
 8019304:	f000 fff2 	bl	801a2ec <__lshift>
 8019308:	9b00      	ldr	r3, [sp, #0]
 801930a:	3301      	adds	r3, #1
 801930c:	9301      	str	r3, [sp, #4]
 801930e:	9b00      	ldr	r3, [sp, #0]
 8019310:	444b      	add	r3, r9
 8019312:	9307      	str	r3, [sp, #28]
 8019314:	9b02      	ldr	r3, [sp, #8]
 8019316:	f003 0301 	and.w	r3, r3, #1
 801931a:	46b8      	mov	r8, r7
 801931c:	9306      	str	r3, [sp, #24]
 801931e:	4607      	mov	r7, r0
 8019320:	9b01      	ldr	r3, [sp, #4]
 8019322:	4631      	mov	r1, r6
 8019324:	3b01      	subs	r3, #1
 8019326:	4658      	mov	r0, fp
 8019328:	9302      	str	r3, [sp, #8]
 801932a:	f7ff fa67 	bl	80187fc <quorem>
 801932e:	4603      	mov	r3, r0
 8019330:	3330      	adds	r3, #48	; 0x30
 8019332:	9004      	str	r0, [sp, #16]
 8019334:	4641      	mov	r1, r8
 8019336:	4658      	mov	r0, fp
 8019338:	9308      	str	r3, [sp, #32]
 801933a:	f001 f843 	bl	801a3c4 <__mcmp>
 801933e:	463a      	mov	r2, r7
 8019340:	4681      	mov	r9, r0
 8019342:	4631      	mov	r1, r6
 8019344:	4620      	mov	r0, r4
 8019346:	f001 f859 	bl	801a3fc <__mdiff>
 801934a:	68c2      	ldr	r2, [r0, #12]
 801934c:	9b08      	ldr	r3, [sp, #32]
 801934e:	4605      	mov	r5, r0
 8019350:	bb02      	cbnz	r2, 8019394 <_dtoa_r+0xa7c>
 8019352:	4601      	mov	r1, r0
 8019354:	4658      	mov	r0, fp
 8019356:	f001 f835 	bl	801a3c4 <__mcmp>
 801935a:	9b08      	ldr	r3, [sp, #32]
 801935c:	4602      	mov	r2, r0
 801935e:	4629      	mov	r1, r5
 8019360:	4620      	mov	r0, r4
 8019362:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8019366:	f000 fda5 	bl	8019eb4 <_Bfree>
 801936a:	9b05      	ldr	r3, [sp, #20]
 801936c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801936e:	9d01      	ldr	r5, [sp, #4]
 8019370:	ea43 0102 	orr.w	r1, r3, r2
 8019374:	9b06      	ldr	r3, [sp, #24]
 8019376:	430b      	orrs	r3, r1
 8019378:	9b08      	ldr	r3, [sp, #32]
 801937a:	d10d      	bne.n	8019398 <_dtoa_r+0xa80>
 801937c:	2b39      	cmp	r3, #57	; 0x39
 801937e:	d029      	beq.n	80193d4 <_dtoa_r+0xabc>
 8019380:	f1b9 0f00 	cmp.w	r9, #0
 8019384:	dd01      	ble.n	801938a <_dtoa_r+0xa72>
 8019386:	9b04      	ldr	r3, [sp, #16]
 8019388:	3331      	adds	r3, #49	; 0x31
 801938a:	9a02      	ldr	r2, [sp, #8]
 801938c:	7013      	strb	r3, [r2, #0]
 801938e:	e774      	b.n	801927a <_dtoa_r+0x962>
 8019390:	4638      	mov	r0, r7
 8019392:	e7b9      	b.n	8019308 <_dtoa_r+0x9f0>
 8019394:	2201      	movs	r2, #1
 8019396:	e7e2      	b.n	801935e <_dtoa_r+0xa46>
 8019398:	f1b9 0f00 	cmp.w	r9, #0
 801939c:	db06      	blt.n	80193ac <_dtoa_r+0xa94>
 801939e:	9905      	ldr	r1, [sp, #20]
 80193a0:	ea41 0909 	orr.w	r9, r1, r9
 80193a4:	9906      	ldr	r1, [sp, #24]
 80193a6:	ea59 0101 	orrs.w	r1, r9, r1
 80193aa:	d120      	bne.n	80193ee <_dtoa_r+0xad6>
 80193ac:	2a00      	cmp	r2, #0
 80193ae:	ddec      	ble.n	801938a <_dtoa_r+0xa72>
 80193b0:	4659      	mov	r1, fp
 80193b2:	2201      	movs	r2, #1
 80193b4:	4620      	mov	r0, r4
 80193b6:	9301      	str	r3, [sp, #4]
 80193b8:	f000 ff98 	bl	801a2ec <__lshift>
 80193bc:	4631      	mov	r1, r6
 80193be:	4683      	mov	fp, r0
 80193c0:	f001 f800 	bl	801a3c4 <__mcmp>
 80193c4:	2800      	cmp	r0, #0
 80193c6:	9b01      	ldr	r3, [sp, #4]
 80193c8:	dc02      	bgt.n	80193d0 <_dtoa_r+0xab8>
 80193ca:	d1de      	bne.n	801938a <_dtoa_r+0xa72>
 80193cc:	07da      	lsls	r2, r3, #31
 80193ce:	d5dc      	bpl.n	801938a <_dtoa_r+0xa72>
 80193d0:	2b39      	cmp	r3, #57	; 0x39
 80193d2:	d1d8      	bne.n	8019386 <_dtoa_r+0xa6e>
 80193d4:	9a02      	ldr	r2, [sp, #8]
 80193d6:	2339      	movs	r3, #57	; 0x39
 80193d8:	7013      	strb	r3, [r2, #0]
 80193da:	462b      	mov	r3, r5
 80193dc:	461d      	mov	r5, r3
 80193de:	3b01      	subs	r3, #1
 80193e0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80193e4:	2a39      	cmp	r2, #57	; 0x39
 80193e6:	d050      	beq.n	801948a <_dtoa_r+0xb72>
 80193e8:	3201      	adds	r2, #1
 80193ea:	701a      	strb	r2, [r3, #0]
 80193ec:	e745      	b.n	801927a <_dtoa_r+0x962>
 80193ee:	2a00      	cmp	r2, #0
 80193f0:	dd03      	ble.n	80193fa <_dtoa_r+0xae2>
 80193f2:	2b39      	cmp	r3, #57	; 0x39
 80193f4:	d0ee      	beq.n	80193d4 <_dtoa_r+0xabc>
 80193f6:	3301      	adds	r3, #1
 80193f8:	e7c7      	b.n	801938a <_dtoa_r+0xa72>
 80193fa:	9a01      	ldr	r2, [sp, #4]
 80193fc:	9907      	ldr	r1, [sp, #28]
 80193fe:	f802 3c01 	strb.w	r3, [r2, #-1]
 8019402:	428a      	cmp	r2, r1
 8019404:	d02a      	beq.n	801945c <_dtoa_r+0xb44>
 8019406:	4659      	mov	r1, fp
 8019408:	2300      	movs	r3, #0
 801940a:	220a      	movs	r2, #10
 801940c:	4620      	mov	r0, r4
 801940e:	f000 fd73 	bl	8019ef8 <__multadd>
 8019412:	45b8      	cmp	r8, r7
 8019414:	4683      	mov	fp, r0
 8019416:	f04f 0300 	mov.w	r3, #0
 801941a:	f04f 020a 	mov.w	r2, #10
 801941e:	4641      	mov	r1, r8
 8019420:	4620      	mov	r0, r4
 8019422:	d107      	bne.n	8019434 <_dtoa_r+0xb1c>
 8019424:	f000 fd68 	bl	8019ef8 <__multadd>
 8019428:	4680      	mov	r8, r0
 801942a:	4607      	mov	r7, r0
 801942c:	9b01      	ldr	r3, [sp, #4]
 801942e:	3301      	adds	r3, #1
 8019430:	9301      	str	r3, [sp, #4]
 8019432:	e775      	b.n	8019320 <_dtoa_r+0xa08>
 8019434:	f000 fd60 	bl	8019ef8 <__multadd>
 8019438:	4639      	mov	r1, r7
 801943a:	4680      	mov	r8, r0
 801943c:	2300      	movs	r3, #0
 801943e:	220a      	movs	r2, #10
 8019440:	4620      	mov	r0, r4
 8019442:	f000 fd59 	bl	8019ef8 <__multadd>
 8019446:	4607      	mov	r7, r0
 8019448:	e7f0      	b.n	801942c <_dtoa_r+0xb14>
 801944a:	f1b9 0f00 	cmp.w	r9, #0
 801944e:	9a00      	ldr	r2, [sp, #0]
 8019450:	bfcc      	ite	gt
 8019452:	464d      	movgt	r5, r9
 8019454:	2501      	movle	r5, #1
 8019456:	4415      	add	r5, r2
 8019458:	f04f 0800 	mov.w	r8, #0
 801945c:	4659      	mov	r1, fp
 801945e:	2201      	movs	r2, #1
 8019460:	4620      	mov	r0, r4
 8019462:	9301      	str	r3, [sp, #4]
 8019464:	f000 ff42 	bl	801a2ec <__lshift>
 8019468:	4631      	mov	r1, r6
 801946a:	4683      	mov	fp, r0
 801946c:	f000 ffaa 	bl	801a3c4 <__mcmp>
 8019470:	2800      	cmp	r0, #0
 8019472:	dcb2      	bgt.n	80193da <_dtoa_r+0xac2>
 8019474:	d102      	bne.n	801947c <_dtoa_r+0xb64>
 8019476:	9b01      	ldr	r3, [sp, #4]
 8019478:	07db      	lsls	r3, r3, #31
 801947a:	d4ae      	bmi.n	80193da <_dtoa_r+0xac2>
 801947c:	462b      	mov	r3, r5
 801947e:	461d      	mov	r5, r3
 8019480:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8019484:	2a30      	cmp	r2, #48	; 0x30
 8019486:	d0fa      	beq.n	801947e <_dtoa_r+0xb66>
 8019488:	e6f7      	b.n	801927a <_dtoa_r+0x962>
 801948a:	9a00      	ldr	r2, [sp, #0]
 801948c:	429a      	cmp	r2, r3
 801948e:	d1a5      	bne.n	80193dc <_dtoa_r+0xac4>
 8019490:	f10a 0a01 	add.w	sl, sl, #1
 8019494:	2331      	movs	r3, #49	; 0x31
 8019496:	e779      	b.n	801938c <_dtoa_r+0xa74>
 8019498:	4b13      	ldr	r3, [pc, #76]	; (80194e8 <_dtoa_r+0xbd0>)
 801949a:	f7ff baaf 	b.w	80189fc <_dtoa_r+0xe4>
 801949e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80194a0:	2b00      	cmp	r3, #0
 80194a2:	f47f aa86 	bne.w	80189b2 <_dtoa_r+0x9a>
 80194a6:	4b11      	ldr	r3, [pc, #68]	; (80194ec <_dtoa_r+0xbd4>)
 80194a8:	f7ff baa8 	b.w	80189fc <_dtoa_r+0xe4>
 80194ac:	f1b9 0f00 	cmp.w	r9, #0
 80194b0:	dc03      	bgt.n	80194ba <_dtoa_r+0xba2>
 80194b2:	9b05      	ldr	r3, [sp, #20]
 80194b4:	2b02      	cmp	r3, #2
 80194b6:	f73f aec9 	bgt.w	801924c <_dtoa_r+0x934>
 80194ba:	9d00      	ldr	r5, [sp, #0]
 80194bc:	4631      	mov	r1, r6
 80194be:	4658      	mov	r0, fp
 80194c0:	f7ff f99c 	bl	80187fc <quorem>
 80194c4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80194c8:	f805 3b01 	strb.w	r3, [r5], #1
 80194cc:	9a00      	ldr	r2, [sp, #0]
 80194ce:	1aaa      	subs	r2, r5, r2
 80194d0:	4591      	cmp	r9, r2
 80194d2:	ddba      	ble.n	801944a <_dtoa_r+0xb32>
 80194d4:	4659      	mov	r1, fp
 80194d6:	2300      	movs	r3, #0
 80194d8:	220a      	movs	r2, #10
 80194da:	4620      	mov	r0, r4
 80194dc:	f000 fd0c 	bl	8019ef8 <__multadd>
 80194e0:	4683      	mov	fp, r0
 80194e2:	e7eb      	b.n	80194bc <_dtoa_r+0xba4>
 80194e4:	0801fd88 	.word	0x0801fd88
 80194e8:	0801fbf4 	.word	0x0801fbf4
 80194ec:	0801fd1c 	.word	0x0801fd1c

080194f0 <__errno>:
 80194f0:	4b01      	ldr	r3, [pc, #4]	; (80194f8 <__errno+0x8>)
 80194f2:	6818      	ldr	r0, [r3, #0]
 80194f4:	4770      	bx	lr
 80194f6:	bf00      	nop
 80194f8:	20000074 	.word	0x20000074

080194fc <std>:
 80194fc:	2300      	movs	r3, #0
 80194fe:	b510      	push	{r4, lr}
 8019500:	4604      	mov	r4, r0
 8019502:	e9c0 3300 	strd	r3, r3, [r0]
 8019506:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801950a:	6083      	str	r3, [r0, #8]
 801950c:	8181      	strh	r1, [r0, #12]
 801950e:	6643      	str	r3, [r0, #100]	; 0x64
 8019510:	81c2      	strh	r2, [r0, #14]
 8019512:	6183      	str	r3, [r0, #24]
 8019514:	4619      	mov	r1, r3
 8019516:	2208      	movs	r2, #8
 8019518:	305c      	adds	r0, #92	; 0x5c
 801951a:	f7fd fc8d 	bl	8016e38 <memset>
 801951e:	4b05      	ldr	r3, [pc, #20]	; (8019534 <std+0x38>)
 8019520:	6263      	str	r3, [r4, #36]	; 0x24
 8019522:	4b05      	ldr	r3, [pc, #20]	; (8019538 <std+0x3c>)
 8019524:	62a3      	str	r3, [r4, #40]	; 0x28
 8019526:	4b05      	ldr	r3, [pc, #20]	; (801953c <std+0x40>)
 8019528:	62e3      	str	r3, [r4, #44]	; 0x2c
 801952a:	4b05      	ldr	r3, [pc, #20]	; (8019540 <std+0x44>)
 801952c:	6224      	str	r4, [r4, #32]
 801952e:	6323      	str	r3, [r4, #48]	; 0x30
 8019530:	bd10      	pop	{r4, pc}
 8019532:	bf00      	nop
 8019534:	0801ad49 	.word	0x0801ad49
 8019538:	0801ad6b 	.word	0x0801ad6b
 801953c:	0801ada3 	.word	0x0801ada3
 8019540:	0801adc7 	.word	0x0801adc7

08019544 <_cleanup_r>:
 8019544:	4901      	ldr	r1, [pc, #4]	; (801954c <_cleanup_r+0x8>)
 8019546:	f000 b8c1 	b.w	80196cc <_fwalk_reent>
 801954a:	bf00      	nop
 801954c:	0801b0cd 	.word	0x0801b0cd

08019550 <__sfmoreglue>:
 8019550:	b570      	push	{r4, r5, r6, lr}
 8019552:	1e4a      	subs	r2, r1, #1
 8019554:	2568      	movs	r5, #104	; 0x68
 8019556:	4355      	muls	r5, r2
 8019558:	460e      	mov	r6, r1
 801955a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801955e:	f7fd fcc3 	bl	8016ee8 <_malloc_r>
 8019562:	4604      	mov	r4, r0
 8019564:	b140      	cbz	r0, 8019578 <__sfmoreglue+0x28>
 8019566:	2100      	movs	r1, #0
 8019568:	e9c0 1600 	strd	r1, r6, [r0]
 801956c:	300c      	adds	r0, #12
 801956e:	60a0      	str	r0, [r4, #8]
 8019570:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8019574:	f7fd fc60 	bl	8016e38 <memset>
 8019578:	4620      	mov	r0, r4
 801957a:	bd70      	pop	{r4, r5, r6, pc}

0801957c <__sfp_lock_acquire>:
 801957c:	4801      	ldr	r0, [pc, #4]	; (8019584 <__sfp_lock_acquire+0x8>)
 801957e:	f000 bc38 	b.w	8019df2 <__retarget_lock_acquire_recursive>
 8019582:	bf00      	nop
 8019584:	20006e8c 	.word	0x20006e8c

08019588 <__sfp_lock_release>:
 8019588:	4801      	ldr	r0, [pc, #4]	; (8019590 <__sfp_lock_release+0x8>)
 801958a:	f000 bc33 	b.w	8019df4 <__retarget_lock_release_recursive>
 801958e:	bf00      	nop
 8019590:	20006e8c 	.word	0x20006e8c

08019594 <__sinit_lock_acquire>:
 8019594:	4801      	ldr	r0, [pc, #4]	; (801959c <__sinit_lock_acquire+0x8>)
 8019596:	f000 bc2c 	b.w	8019df2 <__retarget_lock_acquire_recursive>
 801959a:	bf00      	nop
 801959c:	20006e87 	.word	0x20006e87

080195a0 <__sinit_lock_release>:
 80195a0:	4801      	ldr	r0, [pc, #4]	; (80195a8 <__sinit_lock_release+0x8>)
 80195a2:	f000 bc27 	b.w	8019df4 <__retarget_lock_release_recursive>
 80195a6:	bf00      	nop
 80195a8:	20006e87 	.word	0x20006e87

080195ac <__sinit>:
 80195ac:	b510      	push	{r4, lr}
 80195ae:	4604      	mov	r4, r0
 80195b0:	f7ff fff0 	bl	8019594 <__sinit_lock_acquire>
 80195b4:	69a3      	ldr	r3, [r4, #24]
 80195b6:	b11b      	cbz	r3, 80195c0 <__sinit+0x14>
 80195b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80195bc:	f7ff bff0 	b.w	80195a0 <__sinit_lock_release>
 80195c0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80195c4:	6523      	str	r3, [r4, #80]	; 0x50
 80195c6:	4b13      	ldr	r3, [pc, #76]	; (8019614 <__sinit+0x68>)
 80195c8:	4a13      	ldr	r2, [pc, #76]	; (8019618 <__sinit+0x6c>)
 80195ca:	681b      	ldr	r3, [r3, #0]
 80195cc:	62a2      	str	r2, [r4, #40]	; 0x28
 80195ce:	42a3      	cmp	r3, r4
 80195d0:	bf04      	itt	eq
 80195d2:	2301      	moveq	r3, #1
 80195d4:	61a3      	streq	r3, [r4, #24]
 80195d6:	4620      	mov	r0, r4
 80195d8:	f000 f820 	bl	801961c <__sfp>
 80195dc:	6060      	str	r0, [r4, #4]
 80195de:	4620      	mov	r0, r4
 80195e0:	f000 f81c 	bl	801961c <__sfp>
 80195e4:	60a0      	str	r0, [r4, #8]
 80195e6:	4620      	mov	r0, r4
 80195e8:	f000 f818 	bl	801961c <__sfp>
 80195ec:	2200      	movs	r2, #0
 80195ee:	60e0      	str	r0, [r4, #12]
 80195f0:	2104      	movs	r1, #4
 80195f2:	6860      	ldr	r0, [r4, #4]
 80195f4:	f7ff ff82 	bl	80194fc <std>
 80195f8:	68a0      	ldr	r0, [r4, #8]
 80195fa:	2201      	movs	r2, #1
 80195fc:	2109      	movs	r1, #9
 80195fe:	f7ff ff7d 	bl	80194fc <std>
 8019602:	68e0      	ldr	r0, [r4, #12]
 8019604:	2202      	movs	r2, #2
 8019606:	2112      	movs	r1, #18
 8019608:	f7ff ff78 	bl	80194fc <std>
 801960c:	2301      	movs	r3, #1
 801960e:	61a3      	str	r3, [r4, #24]
 8019610:	e7d2      	b.n	80195b8 <__sinit+0xc>
 8019612:	bf00      	nop
 8019614:	0801fbe0 	.word	0x0801fbe0
 8019618:	08019545 	.word	0x08019545

0801961c <__sfp>:
 801961c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801961e:	4607      	mov	r7, r0
 8019620:	f7ff ffac 	bl	801957c <__sfp_lock_acquire>
 8019624:	4b1e      	ldr	r3, [pc, #120]	; (80196a0 <__sfp+0x84>)
 8019626:	681e      	ldr	r6, [r3, #0]
 8019628:	69b3      	ldr	r3, [r6, #24]
 801962a:	b913      	cbnz	r3, 8019632 <__sfp+0x16>
 801962c:	4630      	mov	r0, r6
 801962e:	f7ff ffbd 	bl	80195ac <__sinit>
 8019632:	3648      	adds	r6, #72	; 0x48
 8019634:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8019638:	3b01      	subs	r3, #1
 801963a:	d503      	bpl.n	8019644 <__sfp+0x28>
 801963c:	6833      	ldr	r3, [r6, #0]
 801963e:	b30b      	cbz	r3, 8019684 <__sfp+0x68>
 8019640:	6836      	ldr	r6, [r6, #0]
 8019642:	e7f7      	b.n	8019634 <__sfp+0x18>
 8019644:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8019648:	b9d5      	cbnz	r5, 8019680 <__sfp+0x64>
 801964a:	4b16      	ldr	r3, [pc, #88]	; (80196a4 <__sfp+0x88>)
 801964c:	60e3      	str	r3, [r4, #12]
 801964e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8019652:	6665      	str	r5, [r4, #100]	; 0x64
 8019654:	f000 fbcc 	bl	8019df0 <__retarget_lock_init_recursive>
 8019658:	f7ff ff96 	bl	8019588 <__sfp_lock_release>
 801965c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8019660:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8019664:	6025      	str	r5, [r4, #0]
 8019666:	61a5      	str	r5, [r4, #24]
 8019668:	2208      	movs	r2, #8
 801966a:	4629      	mov	r1, r5
 801966c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8019670:	f7fd fbe2 	bl	8016e38 <memset>
 8019674:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8019678:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801967c:	4620      	mov	r0, r4
 801967e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019680:	3468      	adds	r4, #104	; 0x68
 8019682:	e7d9      	b.n	8019638 <__sfp+0x1c>
 8019684:	2104      	movs	r1, #4
 8019686:	4638      	mov	r0, r7
 8019688:	f7ff ff62 	bl	8019550 <__sfmoreglue>
 801968c:	4604      	mov	r4, r0
 801968e:	6030      	str	r0, [r6, #0]
 8019690:	2800      	cmp	r0, #0
 8019692:	d1d5      	bne.n	8019640 <__sfp+0x24>
 8019694:	f7ff ff78 	bl	8019588 <__sfp_lock_release>
 8019698:	230c      	movs	r3, #12
 801969a:	603b      	str	r3, [r7, #0]
 801969c:	e7ee      	b.n	801967c <__sfp+0x60>
 801969e:	bf00      	nop
 80196a0:	0801fbe0 	.word	0x0801fbe0
 80196a4:	ffff0001 	.word	0xffff0001

080196a8 <fiprintf>:
 80196a8:	b40e      	push	{r1, r2, r3}
 80196aa:	b503      	push	{r0, r1, lr}
 80196ac:	4601      	mov	r1, r0
 80196ae:	ab03      	add	r3, sp, #12
 80196b0:	4805      	ldr	r0, [pc, #20]	; (80196c8 <fiprintf+0x20>)
 80196b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80196b6:	6800      	ldr	r0, [r0, #0]
 80196b8:	9301      	str	r3, [sp, #4]
 80196ba:	f001 fa0b 	bl	801aad4 <_vfiprintf_r>
 80196be:	b002      	add	sp, #8
 80196c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80196c4:	b003      	add	sp, #12
 80196c6:	4770      	bx	lr
 80196c8:	20000074 	.word	0x20000074

080196cc <_fwalk_reent>:
 80196cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80196d0:	4606      	mov	r6, r0
 80196d2:	4688      	mov	r8, r1
 80196d4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80196d8:	2700      	movs	r7, #0
 80196da:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80196de:	f1b9 0901 	subs.w	r9, r9, #1
 80196e2:	d505      	bpl.n	80196f0 <_fwalk_reent+0x24>
 80196e4:	6824      	ldr	r4, [r4, #0]
 80196e6:	2c00      	cmp	r4, #0
 80196e8:	d1f7      	bne.n	80196da <_fwalk_reent+0xe>
 80196ea:	4638      	mov	r0, r7
 80196ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80196f0:	89ab      	ldrh	r3, [r5, #12]
 80196f2:	2b01      	cmp	r3, #1
 80196f4:	d907      	bls.n	8019706 <_fwalk_reent+0x3a>
 80196f6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80196fa:	3301      	adds	r3, #1
 80196fc:	d003      	beq.n	8019706 <_fwalk_reent+0x3a>
 80196fe:	4629      	mov	r1, r5
 8019700:	4630      	mov	r0, r6
 8019702:	47c0      	blx	r8
 8019704:	4307      	orrs	r7, r0
 8019706:	3568      	adds	r5, #104	; 0x68
 8019708:	e7e9      	b.n	80196de <_fwalk_reent+0x12>

0801970a <rshift>:
 801970a:	6903      	ldr	r3, [r0, #16]
 801970c:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8019710:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019714:	ea4f 1261 	mov.w	r2, r1, asr #5
 8019718:	f100 0414 	add.w	r4, r0, #20
 801971c:	dd45      	ble.n	80197aa <rshift+0xa0>
 801971e:	f011 011f 	ands.w	r1, r1, #31
 8019722:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8019726:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801972a:	d10c      	bne.n	8019746 <rshift+0x3c>
 801972c:	f100 0710 	add.w	r7, r0, #16
 8019730:	4629      	mov	r1, r5
 8019732:	42b1      	cmp	r1, r6
 8019734:	d334      	bcc.n	80197a0 <rshift+0x96>
 8019736:	1a9b      	subs	r3, r3, r2
 8019738:	009b      	lsls	r3, r3, #2
 801973a:	1eea      	subs	r2, r5, #3
 801973c:	4296      	cmp	r6, r2
 801973e:	bf38      	it	cc
 8019740:	2300      	movcc	r3, #0
 8019742:	4423      	add	r3, r4
 8019744:	e015      	b.n	8019772 <rshift+0x68>
 8019746:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801974a:	f1c1 0820 	rsb	r8, r1, #32
 801974e:	40cf      	lsrs	r7, r1
 8019750:	f105 0e04 	add.w	lr, r5, #4
 8019754:	46a1      	mov	r9, r4
 8019756:	4576      	cmp	r6, lr
 8019758:	46f4      	mov	ip, lr
 801975a:	d815      	bhi.n	8019788 <rshift+0x7e>
 801975c:	1a9b      	subs	r3, r3, r2
 801975e:	009a      	lsls	r2, r3, #2
 8019760:	3a04      	subs	r2, #4
 8019762:	3501      	adds	r5, #1
 8019764:	42ae      	cmp	r6, r5
 8019766:	bf38      	it	cc
 8019768:	2200      	movcc	r2, #0
 801976a:	18a3      	adds	r3, r4, r2
 801976c:	50a7      	str	r7, [r4, r2]
 801976e:	b107      	cbz	r7, 8019772 <rshift+0x68>
 8019770:	3304      	adds	r3, #4
 8019772:	1b1a      	subs	r2, r3, r4
 8019774:	42a3      	cmp	r3, r4
 8019776:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801977a:	bf08      	it	eq
 801977c:	2300      	moveq	r3, #0
 801977e:	6102      	str	r2, [r0, #16]
 8019780:	bf08      	it	eq
 8019782:	6143      	streq	r3, [r0, #20]
 8019784:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019788:	f8dc c000 	ldr.w	ip, [ip]
 801978c:	fa0c fc08 	lsl.w	ip, ip, r8
 8019790:	ea4c 0707 	orr.w	r7, ip, r7
 8019794:	f849 7b04 	str.w	r7, [r9], #4
 8019798:	f85e 7b04 	ldr.w	r7, [lr], #4
 801979c:	40cf      	lsrs	r7, r1
 801979e:	e7da      	b.n	8019756 <rshift+0x4c>
 80197a0:	f851 cb04 	ldr.w	ip, [r1], #4
 80197a4:	f847 cf04 	str.w	ip, [r7, #4]!
 80197a8:	e7c3      	b.n	8019732 <rshift+0x28>
 80197aa:	4623      	mov	r3, r4
 80197ac:	e7e1      	b.n	8019772 <rshift+0x68>

080197ae <__hexdig_fun>:
 80197ae:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80197b2:	2b09      	cmp	r3, #9
 80197b4:	d802      	bhi.n	80197bc <__hexdig_fun+0xe>
 80197b6:	3820      	subs	r0, #32
 80197b8:	b2c0      	uxtb	r0, r0
 80197ba:	4770      	bx	lr
 80197bc:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80197c0:	2b05      	cmp	r3, #5
 80197c2:	d801      	bhi.n	80197c8 <__hexdig_fun+0x1a>
 80197c4:	3847      	subs	r0, #71	; 0x47
 80197c6:	e7f7      	b.n	80197b8 <__hexdig_fun+0xa>
 80197c8:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80197cc:	2b05      	cmp	r3, #5
 80197ce:	d801      	bhi.n	80197d4 <__hexdig_fun+0x26>
 80197d0:	3827      	subs	r0, #39	; 0x27
 80197d2:	e7f1      	b.n	80197b8 <__hexdig_fun+0xa>
 80197d4:	2000      	movs	r0, #0
 80197d6:	4770      	bx	lr

080197d8 <__gethex>:
 80197d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80197dc:	ed2d 8b02 	vpush	{d8}
 80197e0:	b089      	sub	sp, #36	; 0x24
 80197e2:	ee08 0a10 	vmov	s16, r0
 80197e6:	9304      	str	r3, [sp, #16]
 80197e8:	4bbc      	ldr	r3, [pc, #752]	; (8019adc <__gethex+0x304>)
 80197ea:	681b      	ldr	r3, [r3, #0]
 80197ec:	9301      	str	r3, [sp, #4]
 80197ee:	4618      	mov	r0, r3
 80197f0:	468b      	mov	fp, r1
 80197f2:	4690      	mov	r8, r2
 80197f4:	f7e6 fcf6 	bl	80001e4 <strlen>
 80197f8:	9b01      	ldr	r3, [sp, #4]
 80197fa:	f8db 2000 	ldr.w	r2, [fp]
 80197fe:	4403      	add	r3, r0
 8019800:	4682      	mov	sl, r0
 8019802:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8019806:	9305      	str	r3, [sp, #20]
 8019808:	1c93      	adds	r3, r2, #2
 801980a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801980e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8019812:	32fe      	adds	r2, #254	; 0xfe
 8019814:	18d1      	adds	r1, r2, r3
 8019816:	461f      	mov	r7, r3
 8019818:	f813 0b01 	ldrb.w	r0, [r3], #1
 801981c:	9100      	str	r1, [sp, #0]
 801981e:	2830      	cmp	r0, #48	; 0x30
 8019820:	d0f8      	beq.n	8019814 <__gethex+0x3c>
 8019822:	f7ff ffc4 	bl	80197ae <__hexdig_fun>
 8019826:	4604      	mov	r4, r0
 8019828:	2800      	cmp	r0, #0
 801982a:	d13a      	bne.n	80198a2 <__gethex+0xca>
 801982c:	9901      	ldr	r1, [sp, #4]
 801982e:	4652      	mov	r2, sl
 8019830:	4638      	mov	r0, r7
 8019832:	f7fe f8d9 	bl	80179e8 <strncmp>
 8019836:	4605      	mov	r5, r0
 8019838:	2800      	cmp	r0, #0
 801983a:	d168      	bne.n	801990e <__gethex+0x136>
 801983c:	f817 000a 	ldrb.w	r0, [r7, sl]
 8019840:	eb07 060a 	add.w	r6, r7, sl
 8019844:	f7ff ffb3 	bl	80197ae <__hexdig_fun>
 8019848:	2800      	cmp	r0, #0
 801984a:	d062      	beq.n	8019912 <__gethex+0x13a>
 801984c:	4633      	mov	r3, r6
 801984e:	7818      	ldrb	r0, [r3, #0]
 8019850:	2830      	cmp	r0, #48	; 0x30
 8019852:	461f      	mov	r7, r3
 8019854:	f103 0301 	add.w	r3, r3, #1
 8019858:	d0f9      	beq.n	801984e <__gethex+0x76>
 801985a:	f7ff ffa8 	bl	80197ae <__hexdig_fun>
 801985e:	2301      	movs	r3, #1
 8019860:	fab0 f480 	clz	r4, r0
 8019864:	0964      	lsrs	r4, r4, #5
 8019866:	4635      	mov	r5, r6
 8019868:	9300      	str	r3, [sp, #0]
 801986a:	463a      	mov	r2, r7
 801986c:	4616      	mov	r6, r2
 801986e:	3201      	adds	r2, #1
 8019870:	7830      	ldrb	r0, [r6, #0]
 8019872:	f7ff ff9c 	bl	80197ae <__hexdig_fun>
 8019876:	2800      	cmp	r0, #0
 8019878:	d1f8      	bne.n	801986c <__gethex+0x94>
 801987a:	9901      	ldr	r1, [sp, #4]
 801987c:	4652      	mov	r2, sl
 801987e:	4630      	mov	r0, r6
 8019880:	f7fe f8b2 	bl	80179e8 <strncmp>
 8019884:	b980      	cbnz	r0, 80198a8 <__gethex+0xd0>
 8019886:	b94d      	cbnz	r5, 801989c <__gethex+0xc4>
 8019888:	eb06 050a 	add.w	r5, r6, sl
 801988c:	462a      	mov	r2, r5
 801988e:	4616      	mov	r6, r2
 8019890:	3201      	adds	r2, #1
 8019892:	7830      	ldrb	r0, [r6, #0]
 8019894:	f7ff ff8b 	bl	80197ae <__hexdig_fun>
 8019898:	2800      	cmp	r0, #0
 801989a:	d1f8      	bne.n	801988e <__gethex+0xb6>
 801989c:	1bad      	subs	r5, r5, r6
 801989e:	00ad      	lsls	r5, r5, #2
 80198a0:	e004      	b.n	80198ac <__gethex+0xd4>
 80198a2:	2400      	movs	r4, #0
 80198a4:	4625      	mov	r5, r4
 80198a6:	e7e0      	b.n	801986a <__gethex+0x92>
 80198a8:	2d00      	cmp	r5, #0
 80198aa:	d1f7      	bne.n	801989c <__gethex+0xc4>
 80198ac:	7833      	ldrb	r3, [r6, #0]
 80198ae:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80198b2:	2b50      	cmp	r3, #80	; 0x50
 80198b4:	d13b      	bne.n	801992e <__gethex+0x156>
 80198b6:	7873      	ldrb	r3, [r6, #1]
 80198b8:	2b2b      	cmp	r3, #43	; 0x2b
 80198ba:	d02c      	beq.n	8019916 <__gethex+0x13e>
 80198bc:	2b2d      	cmp	r3, #45	; 0x2d
 80198be:	d02e      	beq.n	801991e <__gethex+0x146>
 80198c0:	1c71      	adds	r1, r6, #1
 80198c2:	f04f 0900 	mov.w	r9, #0
 80198c6:	7808      	ldrb	r0, [r1, #0]
 80198c8:	f7ff ff71 	bl	80197ae <__hexdig_fun>
 80198cc:	1e43      	subs	r3, r0, #1
 80198ce:	b2db      	uxtb	r3, r3
 80198d0:	2b18      	cmp	r3, #24
 80198d2:	d82c      	bhi.n	801992e <__gethex+0x156>
 80198d4:	f1a0 0210 	sub.w	r2, r0, #16
 80198d8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80198dc:	f7ff ff67 	bl	80197ae <__hexdig_fun>
 80198e0:	1e43      	subs	r3, r0, #1
 80198e2:	b2db      	uxtb	r3, r3
 80198e4:	2b18      	cmp	r3, #24
 80198e6:	d91d      	bls.n	8019924 <__gethex+0x14c>
 80198e8:	f1b9 0f00 	cmp.w	r9, #0
 80198ec:	d000      	beq.n	80198f0 <__gethex+0x118>
 80198ee:	4252      	negs	r2, r2
 80198f0:	4415      	add	r5, r2
 80198f2:	f8cb 1000 	str.w	r1, [fp]
 80198f6:	b1e4      	cbz	r4, 8019932 <__gethex+0x15a>
 80198f8:	9b00      	ldr	r3, [sp, #0]
 80198fa:	2b00      	cmp	r3, #0
 80198fc:	bf14      	ite	ne
 80198fe:	2700      	movne	r7, #0
 8019900:	2706      	moveq	r7, #6
 8019902:	4638      	mov	r0, r7
 8019904:	b009      	add	sp, #36	; 0x24
 8019906:	ecbd 8b02 	vpop	{d8}
 801990a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801990e:	463e      	mov	r6, r7
 8019910:	4625      	mov	r5, r4
 8019912:	2401      	movs	r4, #1
 8019914:	e7ca      	b.n	80198ac <__gethex+0xd4>
 8019916:	f04f 0900 	mov.w	r9, #0
 801991a:	1cb1      	adds	r1, r6, #2
 801991c:	e7d3      	b.n	80198c6 <__gethex+0xee>
 801991e:	f04f 0901 	mov.w	r9, #1
 8019922:	e7fa      	b.n	801991a <__gethex+0x142>
 8019924:	230a      	movs	r3, #10
 8019926:	fb03 0202 	mla	r2, r3, r2, r0
 801992a:	3a10      	subs	r2, #16
 801992c:	e7d4      	b.n	80198d8 <__gethex+0x100>
 801992e:	4631      	mov	r1, r6
 8019930:	e7df      	b.n	80198f2 <__gethex+0x11a>
 8019932:	1bf3      	subs	r3, r6, r7
 8019934:	3b01      	subs	r3, #1
 8019936:	4621      	mov	r1, r4
 8019938:	2b07      	cmp	r3, #7
 801993a:	dc0b      	bgt.n	8019954 <__gethex+0x17c>
 801993c:	ee18 0a10 	vmov	r0, s16
 8019940:	f000 fa78 	bl	8019e34 <_Balloc>
 8019944:	4604      	mov	r4, r0
 8019946:	b940      	cbnz	r0, 801995a <__gethex+0x182>
 8019948:	4b65      	ldr	r3, [pc, #404]	; (8019ae0 <__gethex+0x308>)
 801994a:	4602      	mov	r2, r0
 801994c:	21de      	movs	r1, #222	; 0xde
 801994e:	4865      	ldr	r0, [pc, #404]	; (8019ae4 <__gethex+0x30c>)
 8019950:	f7fe ff36 	bl	80187c0 <__assert_func>
 8019954:	3101      	adds	r1, #1
 8019956:	105b      	asrs	r3, r3, #1
 8019958:	e7ee      	b.n	8019938 <__gethex+0x160>
 801995a:	f100 0914 	add.w	r9, r0, #20
 801995e:	f04f 0b00 	mov.w	fp, #0
 8019962:	f1ca 0301 	rsb	r3, sl, #1
 8019966:	f8cd 9008 	str.w	r9, [sp, #8]
 801996a:	f8cd b000 	str.w	fp, [sp]
 801996e:	9306      	str	r3, [sp, #24]
 8019970:	42b7      	cmp	r7, r6
 8019972:	d340      	bcc.n	80199f6 <__gethex+0x21e>
 8019974:	9802      	ldr	r0, [sp, #8]
 8019976:	9b00      	ldr	r3, [sp, #0]
 8019978:	f840 3b04 	str.w	r3, [r0], #4
 801997c:	eba0 0009 	sub.w	r0, r0, r9
 8019980:	1080      	asrs	r0, r0, #2
 8019982:	0146      	lsls	r6, r0, #5
 8019984:	6120      	str	r0, [r4, #16]
 8019986:	4618      	mov	r0, r3
 8019988:	f000 fb4a 	bl	801a020 <__hi0bits>
 801998c:	1a30      	subs	r0, r6, r0
 801998e:	f8d8 6000 	ldr.w	r6, [r8]
 8019992:	42b0      	cmp	r0, r6
 8019994:	dd63      	ble.n	8019a5e <__gethex+0x286>
 8019996:	1b87      	subs	r7, r0, r6
 8019998:	4639      	mov	r1, r7
 801999a:	4620      	mov	r0, r4
 801999c:	f000 fee4 	bl	801a768 <__any_on>
 80199a0:	4682      	mov	sl, r0
 80199a2:	b1a8      	cbz	r0, 80199d0 <__gethex+0x1f8>
 80199a4:	1e7b      	subs	r3, r7, #1
 80199a6:	1159      	asrs	r1, r3, #5
 80199a8:	f003 021f 	and.w	r2, r3, #31
 80199ac:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80199b0:	f04f 0a01 	mov.w	sl, #1
 80199b4:	fa0a f202 	lsl.w	r2, sl, r2
 80199b8:	420a      	tst	r2, r1
 80199ba:	d009      	beq.n	80199d0 <__gethex+0x1f8>
 80199bc:	4553      	cmp	r3, sl
 80199be:	dd05      	ble.n	80199cc <__gethex+0x1f4>
 80199c0:	1eb9      	subs	r1, r7, #2
 80199c2:	4620      	mov	r0, r4
 80199c4:	f000 fed0 	bl	801a768 <__any_on>
 80199c8:	2800      	cmp	r0, #0
 80199ca:	d145      	bne.n	8019a58 <__gethex+0x280>
 80199cc:	f04f 0a02 	mov.w	sl, #2
 80199d0:	4639      	mov	r1, r7
 80199d2:	4620      	mov	r0, r4
 80199d4:	f7ff fe99 	bl	801970a <rshift>
 80199d8:	443d      	add	r5, r7
 80199da:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80199de:	42ab      	cmp	r3, r5
 80199e0:	da4c      	bge.n	8019a7c <__gethex+0x2a4>
 80199e2:	ee18 0a10 	vmov	r0, s16
 80199e6:	4621      	mov	r1, r4
 80199e8:	f000 fa64 	bl	8019eb4 <_Bfree>
 80199ec:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80199ee:	2300      	movs	r3, #0
 80199f0:	6013      	str	r3, [r2, #0]
 80199f2:	27a3      	movs	r7, #163	; 0xa3
 80199f4:	e785      	b.n	8019902 <__gethex+0x12a>
 80199f6:	1e73      	subs	r3, r6, #1
 80199f8:	9a05      	ldr	r2, [sp, #20]
 80199fa:	9303      	str	r3, [sp, #12]
 80199fc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8019a00:	4293      	cmp	r3, r2
 8019a02:	d019      	beq.n	8019a38 <__gethex+0x260>
 8019a04:	f1bb 0f20 	cmp.w	fp, #32
 8019a08:	d107      	bne.n	8019a1a <__gethex+0x242>
 8019a0a:	9b02      	ldr	r3, [sp, #8]
 8019a0c:	9a00      	ldr	r2, [sp, #0]
 8019a0e:	f843 2b04 	str.w	r2, [r3], #4
 8019a12:	9302      	str	r3, [sp, #8]
 8019a14:	2300      	movs	r3, #0
 8019a16:	9300      	str	r3, [sp, #0]
 8019a18:	469b      	mov	fp, r3
 8019a1a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8019a1e:	f7ff fec6 	bl	80197ae <__hexdig_fun>
 8019a22:	9b00      	ldr	r3, [sp, #0]
 8019a24:	f000 000f 	and.w	r0, r0, #15
 8019a28:	fa00 f00b 	lsl.w	r0, r0, fp
 8019a2c:	4303      	orrs	r3, r0
 8019a2e:	9300      	str	r3, [sp, #0]
 8019a30:	f10b 0b04 	add.w	fp, fp, #4
 8019a34:	9b03      	ldr	r3, [sp, #12]
 8019a36:	e00d      	b.n	8019a54 <__gethex+0x27c>
 8019a38:	9b03      	ldr	r3, [sp, #12]
 8019a3a:	9a06      	ldr	r2, [sp, #24]
 8019a3c:	4413      	add	r3, r2
 8019a3e:	42bb      	cmp	r3, r7
 8019a40:	d3e0      	bcc.n	8019a04 <__gethex+0x22c>
 8019a42:	4618      	mov	r0, r3
 8019a44:	9901      	ldr	r1, [sp, #4]
 8019a46:	9307      	str	r3, [sp, #28]
 8019a48:	4652      	mov	r2, sl
 8019a4a:	f7fd ffcd 	bl	80179e8 <strncmp>
 8019a4e:	9b07      	ldr	r3, [sp, #28]
 8019a50:	2800      	cmp	r0, #0
 8019a52:	d1d7      	bne.n	8019a04 <__gethex+0x22c>
 8019a54:	461e      	mov	r6, r3
 8019a56:	e78b      	b.n	8019970 <__gethex+0x198>
 8019a58:	f04f 0a03 	mov.w	sl, #3
 8019a5c:	e7b8      	b.n	80199d0 <__gethex+0x1f8>
 8019a5e:	da0a      	bge.n	8019a76 <__gethex+0x29e>
 8019a60:	1a37      	subs	r7, r6, r0
 8019a62:	4621      	mov	r1, r4
 8019a64:	ee18 0a10 	vmov	r0, s16
 8019a68:	463a      	mov	r2, r7
 8019a6a:	f000 fc3f 	bl	801a2ec <__lshift>
 8019a6e:	1bed      	subs	r5, r5, r7
 8019a70:	4604      	mov	r4, r0
 8019a72:	f100 0914 	add.w	r9, r0, #20
 8019a76:	f04f 0a00 	mov.w	sl, #0
 8019a7a:	e7ae      	b.n	80199da <__gethex+0x202>
 8019a7c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8019a80:	42a8      	cmp	r0, r5
 8019a82:	dd72      	ble.n	8019b6a <__gethex+0x392>
 8019a84:	1b45      	subs	r5, r0, r5
 8019a86:	42ae      	cmp	r6, r5
 8019a88:	dc36      	bgt.n	8019af8 <__gethex+0x320>
 8019a8a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8019a8e:	2b02      	cmp	r3, #2
 8019a90:	d02a      	beq.n	8019ae8 <__gethex+0x310>
 8019a92:	2b03      	cmp	r3, #3
 8019a94:	d02c      	beq.n	8019af0 <__gethex+0x318>
 8019a96:	2b01      	cmp	r3, #1
 8019a98:	d115      	bne.n	8019ac6 <__gethex+0x2ee>
 8019a9a:	42ae      	cmp	r6, r5
 8019a9c:	d113      	bne.n	8019ac6 <__gethex+0x2ee>
 8019a9e:	2e01      	cmp	r6, #1
 8019aa0:	d10b      	bne.n	8019aba <__gethex+0x2e2>
 8019aa2:	9a04      	ldr	r2, [sp, #16]
 8019aa4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8019aa8:	6013      	str	r3, [r2, #0]
 8019aaa:	2301      	movs	r3, #1
 8019aac:	6123      	str	r3, [r4, #16]
 8019aae:	f8c9 3000 	str.w	r3, [r9]
 8019ab2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8019ab4:	2762      	movs	r7, #98	; 0x62
 8019ab6:	601c      	str	r4, [r3, #0]
 8019ab8:	e723      	b.n	8019902 <__gethex+0x12a>
 8019aba:	1e71      	subs	r1, r6, #1
 8019abc:	4620      	mov	r0, r4
 8019abe:	f000 fe53 	bl	801a768 <__any_on>
 8019ac2:	2800      	cmp	r0, #0
 8019ac4:	d1ed      	bne.n	8019aa2 <__gethex+0x2ca>
 8019ac6:	ee18 0a10 	vmov	r0, s16
 8019aca:	4621      	mov	r1, r4
 8019acc:	f000 f9f2 	bl	8019eb4 <_Bfree>
 8019ad0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8019ad2:	2300      	movs	r3, #0
 8019ad4:	6013      	str	r3, [r2, #0]
 8019ad6:	2750      	movs	r7, #80	; 0x50
 8019ad8:	e713      	b.n	8019902 <__gethex+0x12a>
 8019ada:	bf00      	nop
 8019adc:	0801fe68 	.word	0x0801fe68
 8019ae0:	0801fd88 	.word	0x0801fd88
 8019ae4:	0801fdfc 	.word	0x0801fdfc
 8019ae8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8019aea:	2b00      	cmp	r3, #0
 8019aec:	d1eb      	bne.n	8019ac6 <__gethex+0x2ee>
 8019aee:	e7d8      	b.n	8019aa2 <__gethex+0x2ca>
 8019af0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8019af2:	2b00      	cmp	r3, #0
 8019af4:	d1d5      	bne.n	8019aa2 <__gethex+0x2ca>
 8019af6:	e7e6      	b.n	8019ac6 <__gethex+0x2ee>
 8019af8:	1e6f      	subs	r7, r5, #1
 8019afa:	f1ba 0f00 	cmp.w	sl, #0
 8019afe:	d131      	bne.n	8019b64 <__gethex+0x38c>
 8019b00:	b127      	cbz	r7, 8019b0c <__gethex+0x334>
 8019b02:	4639      	mov	r1, r7
 8019b04:	4620      	mov	r0, r4
 8019b06:	f000 fe2f 	bl	801a768 <__any_on>
 8019b0a:	4682      	mov	sl, r0
 8019b0c:	117b      	asrs	r3, r7, #5
 8019b0e:	2101      	movs	r1, #1
 8019b10:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8019b14:	f007 071f 	and.w	r7, r7, #31
 8019b18:	fa01 f707 	lsl.w	r7, r1, r7
 8019b1c:	421f      	tst	r7, r3
 8019b1e:	4629      	mov	r1, r5
 8019b20:	4620      	mov	r0, r4
 8019b22:	bf18      	it	ne
 8019b24:	f04a 0a02 	orrne.w	sl, sl, #2
 8019b28:	1b76      	subs	r6, r6, r5
 8019b2a:	f7ff fdee 	bl	801970a <rshift>
 8019b2e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8019b32:	2702      	movs	r7, #2
 8019b34:	f1ba 0f00 	cmp.w	sl, #0
 8019b38:	d048      	beq.n	8019bcc <__gethex+0x3f4>
 8019b3a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8019b3e:	2b02      	cmp	r3, #2
 8019b40:	d015      	beq.n	8019b6e <__gethex+0x396>
 8019b42:	2b03      	cmp	r3, #3
 8019b44:	d017      	beq.n	8019b76 <__gethex+0x39e>
 8019b46:	2b01      	cmp	r3, #1
 8019b48:	d109      	bne.n	8019b5e <__gethex+0x386>
 8019b4a:	f01a 0f02 	tst.w	sl, #2
 8019b4e:	d006      	beq.n	8019b5e <__gethex+0x386>
 8019b50:	f8d9 0000 	ldr.w	r0, [r9]
 8019b54:	ea4a 0a00 	orr.w	sl, sl, r0
 8019b58:	f01a 0f01 	tst.w	sl, #1
 8019b5c:	d10e      	bne.n	8019b7c <__gethex+0x3a4>
 8019b5e:	f047 0710 	orr.w	r7, r7, #16
 8019b62:	e033      	b.n	8019bcc <__gethex+0x3f4>
 8019b64:	f04f 0a01 	mov.w	sl, #1
 8019b68:	e7d0      	b.n	8019b0c <__gethex+0x334>
 8019b6a:	2701      	movs	r7, #1
 8019b6c:	e7e2      	b.n	8019b34 <__gethex+0x35c>
 8019b6e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8019b70:	f1c3 0301 	rsb	r3, r3, #1
 8019b74:	9315      	str	r3, [sp, #84]	; 0x54
 8019b76:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8019b78:	2b00      	cmp	r3, #0
 8019b7a:	d0f0      	beq.n	8019b5e <__gethex+0x386>
 8019b7c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8019b80:	f104 0314 	add.w	r3, r4, #20
 8019b84:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8019b88:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8019b8c:	f04f 0c00 	mov.w	ip, #0
 8019b90:	4618      	mov	r0, r3
 8019b92:	f853 2b04 	ldr.w	r2, [r3], #4
 8019b96:	f1b2 3fff 	cmp.w	r2, #4294967295
 8019b9a:	d01c      	beq.n	8019bd6 <__gethex+0x3fe>
 8019b9c:	3201      	adds	r2, #1
 8019b9e:	6002      	str	r2, [r0, #0]
 8019ba0:	2f02      	cmp	r7, #2
 8019ba2:	f104 0314 	add.w	r3, r4, #20
 8019ba6:	d13f      	bne.n	8019c28 <__gethex+0x450>
 8019ba8:	f8d8 2000 	ldr.w	r2, [r8]
 8019bac:	3a01      	subs	r2, #1
 8019bae:	42b2      	cmp	r2, r6
 8019bb0:	d10a      	bne.n	8019bc8 <__gethex+0x3f0>
 8019bb2:	1171      	asrs	r1, r6, #5
 8019bb4:	2201      	movs	r2, #1
 8019bb6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8019bba:	f006 061f 	and.w	r6, r6, #31
 8019bbe:	fa02 f606 	lsl.w	r6, r2, r6
 8019bc2:	421e      	tst	r6, r3
 8019bc4:	bf18      	it	ne
 8019bc6:	4617      	movne	r7, r2
 8019bc8:	f047 0720 	orr.w	r7, r7, #32
 8019bcc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8019bce:	601c      	str	r4, [r3, #0]
 8019bd0:	9b04      	ldr	r3, [sp, #16]
 8019bd2:	601d      	str	r5, [r3, #0]
 8019bd4:	e695      	b.n	8019902 <__gethex+0x12a>
 8019bd6:	4299      	cmp	r1, r3
 8019bd8:	f843 cc04 	str.w	ip, [r3, #-4]
 8019bdc:	d8d8      	bhi.n	8019b90 <__gethex+0x3b8>
 8019bde:	68a3      	ldr	r3, [r4, #8]
 8019be0:	459b      	cmp	fp, r3
 8019be2:	db19      	blt.n	8019c18 <__gethex+0x440>
 8019be4:	6861      	ldr	r1, [r4, #4]
 8019be6:	ee18 0a10 	vmov	r0, s16
 8019bea:	3101      	adds	r1, #1
 8019bec:	f000 f922 	bl	8019e34 <_Balloc>
 8019bf0:	4681      	mov	r9, r0
 8019bf2:	b918      	cbnz	r0, 8019bfc <__gethex+0x424>
 8019bf4:	4b1a      	ldr	r3, [pc, #104]	; (8019c60 <__gethex+0x488>)
 8019bf6:	4602      	mov	r2, r0
 8019bf8:	2184      	movs	r1, #132	; 0x84
 8019bfa:	e6a8      	b.n	801994e <__gethex+0x176>
 8019bfc:	6922      	ldr	r2, [r4, #16]
 8019bfe:	3202      	adds	r2, #2
 8019c00:	f104 010c 	add.w	r1, r4, #12
 8019c04:	0092      	lsls	r2, r2, #2
 8019c06:	300c      	adds	r0, #12
 8019c08:	f7fd f8ee 	bl	8016de8 <memcpy>
 8019c0c:	4621      	mov	r1, r4
 8019c0e:	ee18 0a10 	vmov	r0, s16
 8019c12:	f000 f94f 	bl	8019eb4 <_Bfree>
 8019c16:	464c      	mov	r4, r9
 8019c18:	6923      	ldr	r3, [r4, #16]
 8019c1a:	1c5a      	adds	r2, r3, #1
 8019c1c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8019c20:	6122      	str	r2, [r4, #16]
 8019c22:	2201      	movs	r2, #1
 8019c24:	615a      	str	r2, [r3, #20]
 8019c26:	e7bb      	b.n	8019ba0 <__gethex+0x3c8>
 8019c28:	6922      	ldr	r2, [r4, #16]
 8019c2a:	455a      	cmp	r2, fp
 8019c2c:	dd0b      	ble.n	8019c46 <__gethex+0x46e>
 8019c2e:	2101      	movs	r1, #1
 8019c30:	4620      	mov	r0, r4
 8019c32:	f7ff fd6a 	bl	801970a <rshift>
 8019c36:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8019c3a:	3501      	adds	r5, #1
 8019c3c:	42ab      	cmp	r3, r5
 8019c3e:	f6ff aed0 	blt.w	80199e2 <__gethex+0x20a>
 8019c42:	2701      	movs	r7, #1
 8019c44:	e7c0      	b.n	8019bc8 <__gethex+0x3f0>
 8019c46:	f016 061f 	ands.w	r6, r6, #31
 8019c4a:	d0fa      	beq.n	8019c42 <__gethex+0x46a>
 8019c4c:	449a      	add	sl, r3
 8019c4e:	f1c6 0620 	rsb	r6, r6, #32
 8019c52:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8019c56:	f000 f9e3 	bl	801a020 <__hi0bits>
 8019c5a:	42b0      	cmp	r0, r6
 8019c5c:	dbe7      	blt.n	8019c2e <__gethex+0x456>
 8019c5e:	e7f0      	b.n	8019c42 <__gethex+0x46a>
 8019c60:	0801fd88 	.word	0x0801fd88

08019c64 <L_shift>:
 8019c64:	f1c2 0208 	rsb	r2, r2, #8
 8019c68:	0092      	lsls	r2, r2, #2
 8019c6a:	b570      	push	{r4, r5, r6, lr}
 8019c6c:	f1c2 0620 	rsb	r6, r2, #32
 8019c70:	6843      	ldr	r3, [r0, #4]
 8019c72:	6804      	ldr	r4, [r0, #0]
 8019c74:	fa03 f506 	lsl.w	r5, r3, r6
 8019c78:	432c      	orrs	r4, r5
 8019c7a:	40d3      	lsrs	r3, r2
 8019c7c:	6004      	str	r4, [r0, #0]
 8019c7e:	f840 3f04 	str.w	r3, [r0, #4]!
 8019c82:	4288      	cmp	r0, r1
 8019c84:	d3f4      	bcc.n	8019c70 <L_shift+0xc>
 8019c86:	bd70      	pop	{r4, r5, r6, pc}

08019c88 <__match>:
 8019c88:	b530      	push	{r4, r5, lr}
 8019c8a:	6803      	ldr	r3, [r0, #0]
 8019c8c:	3301      	adds	r3, #1
 8019c8e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8019c92:	b914      	cbnz	r4, 8019c9a <__match+0x12>
 8019c94:	6003      	str	r3, [r0, #0]
 8019c96:	2001      	movs	r0, #1
 8019c98:	bd30      	pop	{r4, r5, pc}
 8019c9a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019c9e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8019ca2:	2d19      	cmp	r5, #25
 8019ca4:	bf98      	it	ls
 8019ca6:	3220      	addls	r2, #32
 8019ca8:	42a2      	cmp	r2, r4
 8019caa:	d0f0      	beq.n	8019c8e <__match+0x6>
 8019cac:	2000      	movs	r0, #0
 8019cae:	e7f3      	b.n	8019c98 <__match+0x10>

08019cb0 <__hexnan>:
 8019cb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019cb4:	680b      	ldr	r3, [r1, #0]
 8019cb6:	6801      	ldr	r1, [r0, #0]
 8019cb8:	115e      	asrs	r6, r3, #5
 8019cba:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8019cbe:	f013 031f 	ands.w	r3, r3, #31
 8019cc2:	b087      	sub	sp, #28
 8019cc4:	bf18      	it	ne
 8019cc6:	3604      	addne	r6, #4
 8019cc8:	2500      	movs	r5, #0
 8019cca:	1f37      	subs	r7, r6, #4
 8019ccc:	4682      	mov	sl, r0
 8019cce:	4690      	mov	r8, r2
 8019cd0:	9301      	str	r3, [sp, #4]
 8019cd2:	f846 5c04 	str.w	r5, [r6, #-4]
 8019cd6:	46b9      	mov	r9, r7
 8019cd8:	463c      	mov	r4, r7
 8019cda:	9502      	str	r5, [sp, #8]
 8019cdc:	46ab      	mov	fp, r5
 8019cde:	784a      	ldrb	r2, [r1, #1]
 8019ce0:	1c4b      	adds	r3, r1, #1
 8019ce2:	9303      	str	r3, [sp, #12]
 8019ce4:	b342      	cbz	r2, 8019d38 <__hexnan+0x88>
 8019ce6:	4610      	mov	r0, r2
 8019ce8:	9105      	str	r1, [sp, #20]
 8019cea:	9204      	str	r2, [sp, #16]
 8019cec:	f7ff fd5f 	bl	80197ae <__hexdig_fun>
 8019cf0:	2800      	cmp	r0, #0
 8019cf2:	d14f      	bne.n	8019d94 <__hexnan+0xe4>
 8019cf4:	9a04      	ldr	r2, [sp, #16]
 8019cf6:	9905      	ldr	r1, [sp, #20]
 8019cf8:	2a20      	cmp	r2, #32
 8019cfa:	d818      	bhi.n	8019d2e <__hexnan+0x7e>
 8019cfc:	9b02      	ldr	r3, [sp, #8]
 8019cfe:	459b      	cmp	fp, r3
 8019d00:	dd13      	ble.n	8019d2a <__hexnan+0x7a>
 8019d02:	454c      	cmp	r4, r9
 8019d04:	d206      	bcs.n	8019d14 <__hexnan+0x64>
 8019d06:	2d07      	cmp	r5, #7
 8019d08:	dc04      	bgt.n	8019d14 <__hexnan+0x64>
 8019d0a:	462a      	mov	r2, r5
 8019d0c:	4649      	mov	r1, r9
 8019d0e:	4620      	mov	r0, r4
 8019d10:	f7ff ffa8 	bl	8019c64 <L_shift>
 8019d14:	4544      	cmp	r4, r8
 8019d16:	d950      	bls.n	8019dba <__hexnan+0x10a>
 8019d18:	2300      	movs	r3, #0
 8019d1a:	f1a4 0904 	sub.w	r9, r4, #4
 8019d1e:	f844 3c04 	str.w	r3, [r4, #-4]
 8019d22:	f8cd b008 	str.w	fp, [sp, #8]
 8019d26:	464c      	mov	r4, r9
 8019d28:	461d      	mov	r5, r3
 8019d2a:	9903      	ldr	r1, [sp, #12]
 8019d2c:	e7d7      	b.n	8019cde <__hexnan+0x2e>
 8019d2e:	2a29      	cmp	r2, #41	; 0x29
 8019d30:	d156      	bne.n	8019de0 <__hexnan+0x130>
 8019d32:	3102      	adds	r1, #2
 8019d34:	f8ca 1000 	str.w	r1, [sl]
 8019d38:	f1bb 0f00 	cmp.w	fp, #0
 8019d3c:	d050      	beq.n	8019de0 <__hexnan+0x130>
 8019d3e:	454c      	cmp	r4, r9
 8019d40:	d206      	bcs.n	8019d50 <__hexnan+0xa0>
 8019d42:	2d07      	cmp	r5, #7
 8019d44:	dc04      	bgt.n	8019d50 <__hexnan+0xa0>
 8019d46:	462a      	mov	r2, r5
 8019d48:	4649      	mov	r1, r9
 8019d4a:	4620      	mov	r0, r4
 8019d4c:	f7ff ff8a 	bl	8019c64 <L_shift>
 8019d50:	4544      	cmp	r4, r8
 8019d52:	d934      	bls.n	8019dbe <__hexnan+0x10e>
 8019d54:	f1a8 0204 	sub.w	r2, r8, #4
 8019d58:	4623      	mov	r3, r4
 8019d5a:	f853 1b04 	ldr.w	r1, [r3], #4
 8019d5e:	f842 1f04 	str.w	r1, [r2, #4]!
 8019d62:	429f      	cmp	r7, r3
 8019d64:	d2f9      	bcs.n	8019d5a <__hexnan+0xaa>
 8019d66:	1b3b      	subs	r3, r7, r4
 8019d68:	f023 0303 	bic.w	r3, r3, #3
 8019d6c:	3304      	adds	r3, #4
 8019d6e:	3401      	adds	r4, #1
 8019d70:	3e03      	subs	r6, #3
 8019d72:	42b4      	cmp	r4, r6
 8019d74:	bf88      	it	hi
 8019d76:	2304      	movhi	r3, #4
 8019d78:	4443      	add	r3, r8
 8019d7a:	2200      	movs	r2, #0
 8019d7c:	f843 2b04 	str.w	r2, [r3], #4
 8019d80:	429f      	cmp	r7, r3
 8019d82:	d2fb      	bcs.n	8019d7c <__hexnan+0xcc>
 8019d84:	683b      	ldr	r3, [r7, #0]
 8019d86:	b91b      	cbnz	r3, 8019d90 <__hexnan+0xe0>
 8019d88:	4547      	cmp	r7, r8
 8019d8a:	d127      	bne.n	8019ddc <__hexnan+0x12c>
 8019d8c:	2301      	movs	r3, #1
 8019d8e:	603b      	str	r3, [r7, #0]
 8019d90:	2005      	movs	r0, #5
 8019d92:	e026      	b.n	8019de2 <__hexnan+0x132>
 8019d94:	3501      	adds	r5, #1
 8019d96:	2d08      	cmp	r5, #8
 8019d98:	f10b 0b01 	add.w	fp, fp, #1
 8019d9c:	dd06      	ble.n	8019dac <__hexnan+0xfc>
 8019d9e:	4544      	cmp	r4, r8
 8019da0:	d9c3      	bls.n	8019d2a <__hexnan+0x7a>
 8019da2:	2300      	movs	r3, #0
 8019da4:	f844 3c04 	str.w	r3, [r4, #-4]
 8019da8:	2501      	movs	r5, #1
 8019daa:	3c04      	subs	r4, #4
 8019dac:	6822      	ldr	r2, [r4, #0]
 8019dae:	f000 000f 	and.w	r0, r0, #15
 8019db2:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8019db6:	6022      	str	r2, [r4, #0]
 8019db8:	e7b7      	b.n	8019d2a <__hexnan+0x7a>
 8019dba:	2508      	movs	r5, #8
 8019dbc:	e7b5      	b.n	8019d2a <__hexnan+0x7a>
 8019dbe:	9b01      	ldr	r3, [sp, #4]
 8019dc0:	2b00      	cmp	r3, #0
 8019dc2:	d0df      	beq.n	8019d84 <__hexnan+0xd4>
 8019dc4:	f04f 32ff 	mov.w	r2, #4294967295
 8019dc8:	f1c3 0320 	rsb	r3, r3, #32
 8019dcc:	fa22 f303 	lsr.w	r3, r2, r3
 8019dd0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8019dd4:	401a      	ands	r2, r3
 8019dd6:	f846 2c04 	str.w	r2, [r6, #-4]
 8019dda:	e7d3      	b.n	8019d84 <__hexnan+0xd4>
 8019ddc:	3f04      	subs	r7, #4
 8019dde:	e7d1      	b.n	8019d84 <__hexnan+0xd4>
 8019de0:	2004      	movs	r0, #4
 8019de2:	b007      	add	sp, #28
 8019de4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019de8 <_localeconv_r>:
 8019de8:	4800      	ldr	r0, [pc, #0]	; (8019dec <_localeconv_r+0x4>)
 8019dea:	4770      	bx	lr
 8019dec:	200001cc 	.word	0x200001cc

08019df0 <__retarget_lock_init_recursive>:
 8019df0:	4770      	bx	lr

08019df2 <__retarget_lock_acquire_recursive>:
 8019df2:	4770      	bx	lr

08019df4 <__retarget_lock_release_recursive>:
 8019df4:	4770      	bx	lr

08019df6 <__ascii_mbtowc>:
 8019df6:	b082      	sub	sp, #8
 8019df8:	b901      	cbnz	r1, 8019dfc <__ascii_mbtowc+0x6>
 8019dfa:	a901      	add	r1, sp, #4
 8019dfc:	b142      	cbz	r2, 8019e10 <__ascii_mbtowc+0x1a>
 8019dfe:	b14b      	cbz	r3, 8019e14 <__ascii_mbtowc+0x1e>
 8019e00:	7813      	ldrb	r3, [r2, #0]
 8019e02:	600b      	str	r3, [r1, #0]
 8019e04:	7812      	ldrb	r2, [r2, #0]
 8019e06:	1e10      	subs	r0, r2, #0
 8019e08:	bf18      	it	ne
 8019e0a:	2001      	movne	r0, #1
 8019e0c:	b002      	add	sp, #8
 8019e0e:	4770      	bx	lr
 8019e10:	4610      	mov	r0, r2
 8019e12:	e7fb      	b.n	8019e0c <__ascii_mbtowc+0x16>
 8019e14:	f06f 0001 	mvn.w	r0, #1
 8019e18:	e7f8      	b.n	8019e0c <__ascii_mbtowc+0x16>
	...

08019e1c <__malloc_lock>:
 8019e1c:	4801      	ldr	r0, [pc, #4]	; (8019e24 <__malloc_lock+0x8>)
 8019e1e:	f7ff bfe8 	b.w	8019df2 <__retarget_lock_acquire_recursive>
 8019e22:	bf00      	nop
 8019e24:	20006e88 	.word	0x20006e88

08019e28 <__malloc_unlock>:
 8019e28:	4801      	ldr	r0, [pc, #4]	; (8019e30 <__malloc_unlock+0x8>)
 8019e2a:	f7ff bfe3 	b.w	8019df4 <__retarget_lock_release_recursive>
 8019e2e:	bf00      	nop
 8019e30:	20006e88 	.word	0x20006e88

08019e34 <_Balloc>:
 8019e34:	b570      	push	{r4, r5, r6, lr}
 8019e36:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8019e38:	4604      	mov	r4, r0
 8019e3a:	460d      	mov	r5, r1
 8019e3c:	b976      	cbnz	r6, 8019e5c <_Balloc+0x28>
 8019e3e:	2010      	movs	r0, #16
 8019e40:	f7fc ffb4 	bl	8016dac <malloc>
 8019e44:	4602      	mov	r2, r0
 8019e46:	6260      	str	r0, [r4, #36]	; 0x24
 8019e48:	b920      	cbnz	r0, 8019e54 <_Balloc+0x20>
 8019e4a:	4b18      	ldr	r3, [pc, #96]	; (8019eac <_Balloc+0x78>)
 8019e4c:	4818      	ldr	r0, [pc, #96]	; (8019eb0 <_Balloc+0x7c>)
 8019e4e:	2166      	movs	r1, #102	; 0x66
 8019e50:	f7fe fcb6 	bl	80187c0 <__assert_func>
 8019e54:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8019e58:	6006      	str	r6, [r0, #0]
 8019e5a:	60c6      	str	r6, [r0, #12]
 8019e5c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8019e5e:	68f3      	ldr	r3, [r6, #12]
 8019e60:	b183      	cbz	r3, 8019e84 <_Balloc+0x50>
 8019e62:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8019e64:	68db      	ldr	r3, [r3, #12]
 8019e66:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8019e6a:	b9b8      	cbnz	r0, 8019e9c <_Balloc+0x68>
 8019e6c:	2101      	movs	r1, #1
 8019e6e:	fa01 f605 	lsl.w	r6, r1, r5
 8019e72:	1d72      	adds	r2, r6, #5
 8019e74:	0092      	lsls	r2, r2, #2
 8019e76:	4620      	mov	r0, r4
 8019e78:	f000 fc97 	bl	801a7aa <_calloc_r>
 8019e7c:	b160      	cbz	r0, 8019e98 <_Balloc+0x64>
 8019e7e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8019e82:	e00e      	b.n	8019ea2 <_Balloc+0x6e>
 8019e84:	2221      	movs	r2, #33	; 0x21
 8019e86:	2104      	movs	r1, #4
 8019e88:	4620      	mov	r0, r4
 8019e8a:	f000 fc8e 	bl	801a7aa <_calloc_r>
 8019e8e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8019e90:	60f0      	str	r0, [r6, #12]
 8019e92:	68db      	ldr	r3, [r3, #12]
 8019e94:	2b00      	cmp	r3, #0
 8019e96:	d1e4      	bne.n	8019e62 <_Balloc+0x2e>
 8019e98:	2000      	movs	r0, #0
 8019e9a:	bd70      	pop	{r4, r5, r6, pc}
 8019e9c:	6802      	ldr	r2, [r0, #0]
 8019e9e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8019ea2:	2300      	movs	r3, #0
 8019ea4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8019ea8:	e7f7      	b.n	8019e9a <_Balloc+0x66>
 8019eaa:	bf00      	nop
 8019eac:	0801fc18 	.word	0x0801fc18
 8019eb0:	0801fe7c 	.word	0x0801fe7c

08019eb4 <_Bfree>:
 8019eb4:	b570      	push	{r4, r5, r6, lr}
 8019eb6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8019eb8:	4605      	mov	r5, r0
 8019eba:	460c      	mov	r4, r1
 8019ebc:	b976      	cbnz	r6, 8019edc <_Bfree+0x28>
 8019ebe:	2010      	movs	r0, #16
 8019ec0:	f7fc ff74 	bl	8016dac <malloc>
 8019ec4:	4602      	mov	r2, r0
 8019ec6:	6268      	str	r0, [r5, #36]	; 0x24
 8019ec8:	b920      	cbnz	r0, 8019ed4 <_Bfree+0x20>
 8019eca:	4b09      	ldr	r3, [pc, #36]	; (8019ef0 <_Bfree+0x3c>)
 8019ecc:	4809      	ldr	r0, [pc, #36]	; (8019ef4 <_Bfree+0x40>)
 8019ece:	218a      	movs	r1, #138	; 0x8a
 8019ed0:	f7fe fc76 	bl	80187c0 <__assert_func>
 8019ed4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8019ed8:	6006      	str	r6, [r0, #0]
 8019eda:	60c6      	str	r6, [r0, #12]
 8019edc:	b13c      	cbz	r4, 8019eee <_Bfree+0x3a>
 8019ede:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8019ee0:	6862      	ldr	r2, [r4, #4]
 8019ee2:	68db      	ldr	r3, [r3, #12]
 8019ee4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8019ee8:	6021      	str	r1, [r4, #0]
 8019eea:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8019eee:	bd70      	pop	{r4, r5, r6, pc}
 8019ef0:	0801fc18 	.word	0x0801fc18
 8019ef4:	0801fe7c 	.word	0x0801fe7c

08019ef8 <__multadd>:
 8019ef8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019efc:	690e      	ldr	r6, [r1, #16]
 8019efe:	4607      	mov	r7, r0
 8019f00:	4698      	mov	r8, r3
 8019f02:	460c      	mov	r4, r1
 8019f04:	f101 0014 	add.w	r0, r1, #20
 8019f08:	2300      	movs	r3, #0
 8019f0a:	6805      	ldr	r5, [r0, #0]
 8019f0c:	b2a9      	uxth	r1, r5
 8019f0e:	fb02 8101 	mla	r1, r2, r1, r8
 8019f12:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8019f16:	0c2d      	lsrs	r5, r5, #16
 8019f18:	fb02 c505 	mla	r5, r2, r5, ip
 8019f1c:	b289      	uxth	r1, r1
 8019f1e:	3301      	adds	r3, #1
 8019f20:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8019f24:	429e      	cmp	r6, r3
 8019f26:	f840 1b04 	str.w	r1, [r0], #4
 8019f2a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8019f2e:	dcec      	bgt.n	8019f0a <__multadd+0x12>
 8019f30:	f1b8 0f00 	cmp.w	r8, #0
 8019f34:	d022      	beq.n	8019f7c <__multadd+0x84>
 8019f36:	68a3      	ldr	r3, [r4, #8]
 8019f38:	42b3      	cmp	r3, r6
 8019f3a:	dc19      	bgt.n	8019f70 <__multadd+0x78>
 8019f3c:	6861      	ldr	r1, [r4, #4]
 8019f3e:	4638      	mov	r0, r7
 8019f40:	3101      	adds	r1, #1
 8019f42:	f7ff ff77 	bl	8019e34 <_Balloc>
 8019f46:	4605      	mov	r5, r0
 8019f48:	b928      	cbnz	r0, 8019f56 <__multadd+0x5e>
 8019f4a:	4602      	mov	r2, r0
 8019f4c:	4b0d      	ldr	r3, [pc, #52]	; (8019f84 <__multadd+0x8c>)
 8019f4e:	480e      	ldr	r0, [pc, #56]	; (8019f88 <__multadd+0x90>)
 8019f50:	21b5      	movs	r1, #181	; 0xb5
 8019f52:	f7fe fc35 	bl	80187c0 <__assert_func>
 8019f56:	6922      	ldr	r2, [r4, #16]
 8019f58:	3202      	adds	r2, #2
 8019f5a:	f104 010c 	add.w	r1, r4, #12
 8019f5e:	0092      	lsls	r2, r2, #2
 8019f60:	300c      	adds	r0, #12
 8019f62:	f7fc ff41 	bl	8016de8 <memcpy>
 8019f66:	4621      	mov	r1, r4
 8019f68:	4638      	mov	r0, r7
 8019f6a:	f7ff ffa3 	bl	8019eb4 <_Bfree>
 8019f6e:	462c      	mov	r4, r5
 8019f70:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8019f74:	3601      	adds	r6, #1
 8019f76:	f8c3 8014 	str.w	r8, [r3, #20]
 8019f7a:	6126      	str	r6, [r4, #16]
 8019f7c:	4620      	mov	r0, r4
 8019f7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019f82:	bf00      	nop
 8019f84:	0801fd88 	.word	0x0801fd88
 8019f88:	0801fe7c 	.word	0x0801fe7c

08019f8c <__s2b>:
 8019f8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019f90:	460c      	mov	r4, r1
 8019f92:	4615      	mov	r5, r2
 8019f94:	461f      	mov	r7, r3
 8019f96:	2209      	movs	r2, #9
 8019f98:	3308      	adds	r3, #8
 8019f9a:	4606      	mov	r6, r0
 8019f9c:	fb93 f3f2 	sdiv	r3, r3, r2
 8019fa0:	2100      	movs	r1, #0
 8019fa2:	2201      	movs	r2, #1
 8019fa4:	429a      	cmp	r2, r3
 8019fa6:	db09      	blt.n	8019fbc <__s2b+0x30>
 8019fa8:	4630      	mov	r0, r6
 8019faa:	f7ff ff43 	bl	8019e34 <_Balloc>
 8019fae:	b940      	cbnz	r0, 8019fc2 <__s2b+0x36>
 8019fb0:	4602      	mov	r2, r0
 8019fb2:	4b19      	ldr	r3, [pc, #100]	; (801a018 <__s2b+0x8c>)
 8019fb4:	4819      	ldr	r0, [pc, #100]	; (801a01c <__s2b+0x90>)
 8019fb6:	21ce      	movs	r1, #206	; 0xce
 8019fb8:	f7fe fc02 	bl	80187c0 <__assert_func>
 8019fbc:	0052      	lsls	r2, r2, #1
 8019fbe:	3101      	adds	r1, #1
 8019fc0:	e7f0      	b.n	8019fa4 <__s2b+0x18>
 8019fc2:	9b08      	ldr	r3, [sp, #32]
 8019fc4:	6143      	str	r3, [r0, #20]
 8019fc6:	2d09      	cmp	r5, #9
 8019fc8:	f04f 0301 	mov.w	r3, #1
 8019fcc:	6103      	str	r3, [r0, #16]
 8019fce:	dd16      	ble.n	8019ffe <__s2b+0x72>
 8019fd0:	f104 0909 	add.w	r9, r4, #9
 8019fd4:	46c8      	mov	r8, r9
 8019fd6:	442c      	add	r4, r5
 8019fd8:	f818 3b01 	ldrb.w	r3, [r8], #1
 8019fdc:	4601      	mov	r1, r0
 8019fde:	3b30      	subs	r3, #48	; 0x30
 8019fe0:	220a      	movs	r2, #10
 8019fe2:	4630      	mov	r0, r6
 8019fe4:	f7ff ff88 	bl	8019ef8 <__multadd>
 8019fe8:	45a0      	cmp	r8, r4
 8019fea:	d1f5      	bne.n	8019fd8 <__s2b+0x4c>
 8019fec:	f1a5 0408 	sub.w	r4, r5, #8
 8019ff0:	444c      	add	r4, r9
 8019ff2:	1b2d      	subs	r5, r5, r4
 8019ff4:	1963      	adds	r3, r4, r5
 8019ff6:	42bb      	cmp	r3, r7
 8019ff8:	db04      	blt.n	801a004 <__s2b+0x78>
 8019ffa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019ffe:	340a      	adds	r4, #10
 801a000:	2509      	movs	r5, #9
 801a002:	e7f6      	b.n	8019ff2 <__s2b+0x66>
 801a004:	f814 3b01 	ldrb.w	r3, [r4], #1
 801a008:	4601      	mov	r1, r0
 801a00a:	3b30      	subs	r3, #48	; 0x30
 801a00c:	220a      	movs	r2, #10
 801a00e:	4630      	mov	r0, r6
 801a010:	f7ff ff72 	bl	8019ef8 <__multadd>
 801a014:	e7ee      	b.n	8019ff4 <__s2b+0x68>
 801a016:	bf00      	nop
 801a018:	0801fd88 	.word	0x0801fd88
 801a01c:	0801fe7c 	.word	0x0801fe7c

0801a020 <__hi0bits>:
 801a020:	0c03      	lsrs	r3, r0, #16
 801a022:	041b      	lsls	r3, r3, #16
 801a024:	b9d3      	cbnz	r3, 801a05c <__hi0bits+0x3c>
 801a026:	0400      	lsls	r0, r0, #16
 801a028:	2310      	movs	r3, #16
 801a02a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801a02e:	bf04      	itt	eq
 801a030:	0200      	lsleq	r0, r0, #8
 801a032:	3308      	addeq	r3, #8
 801a034:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801a038:	bf04      	itt	eq
 801a03a:	0100      	lsleq	r0, r0, #4
 801a03c:	3304      	addeq	r3, #4
 801a03e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801a042:	bf04      	itt	eq
 801a044:	0080      	lsleq	r0, r0, #2
 801a046:	3302      	addeq	r3, #2
 801a048:	2800      	cmp	r0, #0
 801a04a:	db05      	blt.n	801a058 <__hi0bits+0x38>
 801a04c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801a050:	f103 0301 	add.w	r3, r3, #1
 801a054:	bf08      	it	eq
 801a056:	2320      	moveq	r3, #32
 801a058:	4618      	mov	r0, r3
 801a05a:	4770      	bx	lr
 801a05c:	2300      	movs	r3, #0
 801a05e:	e7e4      	b.n	801a02a <__hi0bits+0xa>

0801a060 <__lo0bits>:
 801a060:	6803      	ldr	r3, [r0, #0]
 801a062:	f013 0207 	ands.w	r2, r3, #7
 801a066:	4601      	mov	r1, r0
 801a068:	d00b      	beq.n	801a082 <__lo0bits+0x22>
 801a06a:	07da      	lsls	r2, r3, #31
 801a06c:	d424      	bmi.n	801a0b8 <__lo0bits+0x58>
 801a06e:	0798      	lsls	r0, r3, #30
 801a070:	bf49      	itett	mi
 801a072:	085b      	lsrmi	r3, r3, #1
 801a074:	089b      	lsrpl	r3, r3, #2
 801a076:	2001      	movmi	r0, #1
 801a078:	600b      	strmi	r3, [r1, #0]
 801a07a:	bf5c      	itt	pl
 801a07c:	600b      	strpl	r3, [r1, #0]
 801a07e:	2002      	movpl	r0, #2
 801a080:	4770      	bx	lr
 801a082:	b298      	uxth	r0, r3
 801a084:	b9b0      	cbnz	r0, 801a0b4 <__lo0bits+0x54>
 801a086:	0c1b      	lsrs	r3, r3, #16
 801a088:	2010      	movs	r0, #16
 801a08a:	f013 0fff 	tst.w	r3, #255	; 0xff
 801a08e:	bf04      	itt	eq
 801a090:	0a1b      	lsreq	r3, r3, #8
 801a092:	3008      	addeq	r0, #8
 801a094:	071a      	lsls	r2, r3, #28
 801a096:	bf04      	itt	eq
 801a098:	091b      	lsreq	r3, r3, #4
 801a09a:	3004      	addeq	r0, #4
 801a09c:	079a      	lsls	r2, r3, #30
 801a09e:	bf04      	itt	eq
 801a0a0:	089b      	lsreq	r3, r3, #2
 801a0a2:	3002      	addeq	r0, #2
 801a0a4:	07da      	lsls	r2, r3, #31
 801a0a6:	d403      	bmi.n	801a0b0 <__lo0bits+0x50>
 801a0a8:	085b      	lsrs	r3, r3, #1
 801a0aa:	f100 0001 	add.w	r0, r0, #1
 801a0ae:	d005      	beq.n	801a0bc <__lo0bits+0x5c>
 801a0b0:	600b      	str	r3, [r1, #0]
 801a0b2:	4770      	bx	lr
 801a0b4:	4610      	mov	r0, r2
 801a0b6:	e7e8      	b.n	801a08a <__lo0bits+0x2a>
 801a0b8:	2000      	movs	r0, #0
 801a0ba:	4770      	bx	lr
 801a0bc:	2020      	movs	r0, #32
 801a0be:	4770      	bx	lr

0801a0c0 <__i2b>:
 801a0c0:	b510      	push	{r4, lr}
 801a0c2:	460c      	mov	r4, r1
 801a0c4:	2101      	movs	r1, #1
 801a0c6:	f7ff feb5 	bl	8019e34 <_Balloc>
 801a0ca:	4602      	mov	r2, r0
 801a0cc:	b928      	cbnz	r0, 801a0da <__i2b+0x1a>
 801a0ce:	4b05      	ldr	r3, [pc, #20]	; (801a0e4 <__i2b+0x24>)
 801a0d0:	4805      	ldr	r0, [pc, #20]	; (801a0e8 <__i2b+0x28>)
 801a0d2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801a0d6:	f7fe fb73 	bl	80187c0 <__assert_func>
 801a0da:	2301      	movs	r3, #1
 801a0dc:	6144      	str	r4, [r0, #20]
 801a0de:	6103      	str	r3, [r0, #16]
 801a0e0:	bd10      	pop	{r4, pc}
 801a0e2:	bf00      	nop
 801a0e4:	0801fd88 	.word	0x0801fd88
 801a0e8:	0801fe7c 	.word	0x0801fe7c

0801a0ec <__multiply>:
 801a0ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a0f0:	4614      	mov	r4, r2
 801a0f2:	690a      	ldr	r2, [r1, #16]
 801a0f4:	6923      	ldr	r3, [r4, #16]
 801a0f6:	429a      	cmp	r2, r3
 801a0f8:	bfb8      	it	lt
 801a0fa:	460b      	movlt	r3, r1
 801a0fc:	460d      	mov	r5, r1
 801a0fe:	bfbc      	itt	lt
 801a100:	4625      	movlt	r5, r4
 801a102:	461c      	movlt	r4, r3
 801a104:	f8d5 a010 	ldr.w	sl, [r5, #16]
 801a108:	f8d4 9010 	ldr.w	r9, [r4, #16]
 801a10c:	68ab      	ldr	r3, [r5, #8]
 801a10e:	6869      	ldr	r1, [r5, #4]
 801a110:	eb0a 0709 	add.w	r7, sl, r9
 801a114:	42bb      	cmp	r3, r7
 801a116:	b085      	sub	sp, #20
 801a118:	bfb8      	it	lt
 801a11a:	3101      	addlt	r1, #1
 801a11c:	f7ff fe8a 	bl	8019e34 <_Balloc>
 801a120:	b930      	cbnz	r0, 801a130 <__multiply+0x44>
 801a122:	4602      	mov	r2, r0
 801a124:	4b42      	ldr	r3, [pc, #264]	; (801a230 <__multiply+0x144>)
 801a126:	4843      	ldr	r0, [pc, #268]	; (801a234 <__multiply+0x148>)
 801a128:	f240 115d 	movw	r1, #349	; 0x15d
 801a12c:	f7fe fb48 	bl	80187c0 <__assert_func>
 801a130:	f100 0614 	add.w	r6, r0, #20
 801a134:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 801a138:	4633      	mov	r3, r6
 801a13a:	2200      	movs	r2, #0
 801a13c:	4543      	cmp	r3, r8
 801a13e:	d31e      	bcc.n	801a17e <__multiply+0x92>
 801a140:	f105 0c14 	add.w	ip, r5, #20
 801a144:	f104 0314 	add.w	r3, r4, #20
 801a148:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 801a14c:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 801a150:	9202      	str	r2, [sp, #8]
 801a152:	ebac 0205 	sub.w	r2, ip, r5
 801a156:	3a15      	subs	r2, #21
 801a158:	f022 0203 	bic.w	r2, r2, #3
 801a15c:	3204      	adds	r2, #4
 801a15e:	f105 0115 	add.w	r1, r5, #21
 801a162:	458c      	cmp	ip, r1
 801a164:	bf38      	it	cc
 801a166:	2204      	movcc	r2, #4
 801a168:	9201      	str	r2, [sp, #4]
 801a16a:	9a02      	ldr	r2, [sp, #8]
 801a16c:	9303      	str	r3, [sp, #12]
 801a16e:	429a      	cmp	r2, r3
 801a170:	d808      	bhi.n	801a184 <__multiply+0x98>
 801a172:	2f00      	cmp	r7, #0
 801a174:	dc55      	bgt.n	801a222 <__multiply+0x136>
 801a176:	6107      	str	r7, [r0, #16]
 801a178:	b005      	add	sp, #20
 801a17a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a17e:	f843 2b04 	str.w	r2, [r3], #4
 801a182:	e7db      	b.n	801a13c <__multiply+0x50>
 801a184:	f8b3 a000 	ldrh.w	sl, [r3]
 801a188:	f1ba 0f00 	cmp.w	sl, #0
 801a18c:	d020      	beq.n	801a1d0 <__multiply+0xe4>
 801a18e:	f105 0e14 	add.w	lr, r5, #20
 801a192:	46b1      	mov	r9, r6
 801a194:	2200      	movs	r2, #0
 801a196:	f85e 4b04 	ldr.w	r4, [lr], #4
 801a19a:	f8d9 b000 	ldr.w	fp, [r9]
 801a19e:	b2a1      	uxth	r1, r4
 801a1a0:	fa1f fb8b 	uxth.w	fp, fp
 801a1a4:	fb0a b101 	mla	r1, sl, r1, fp
 801a1a8:	4411      	add	r1, r2
 801a1aa:	f8d9 2000 	ldr.w	r2, [r9]
 801a1ae:	0c24      	lsrs	r4, r4, #16
 801a1b0:	0c12      	lsrs	r2, r2, #16
 801a1b2:	fb0a 2404 	mla	r4, sl, r4, r2
 801a1b6:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 801a1ba:	b289      	uxth	r1, r1
 801a1bc:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 801a1c0:	45f4      	cmp	ip, lr
 801a1c2:	f849 1b04 	str.w	r1, [r9], #4
 801a1c6:	ea4f 4214 	mov.w	r2, r4, lsr #16
 801a1ca:	d8e4      	bhi.n	801a196 <__multiply+0xaa>
 801a1cc:	9901      	ldr	r1, [sp, #4]
 801a1ce:	5072      	str	r2, [r6, r1]
 801a1d0:	9a03      	ldr	r2, [sp, #12]
 801a1d2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801a1d6:	3304      	adds	r3, #4
 801a1d8:	f1b9 0f00 	cmp.w	r9, #0
 801a1dc:	d01f      	beq.n	801a21e <__multiply+0x132>
 801a1de:	6834      	ldr	r4, [r6, #0]
 801a1e0:	f105 0114 	add.w	r1, r5, #20
 801a1e4:	46b6      	mov	lr, r6
 801a1e6:	f04f 0a00 	mov.w	sl, #0
 801a1ea:	880a      	ldrh	r2, [r1, #0]
 801a1ec:	f8be b002 	ldrh.w	fp, [lr, #2]
 801a1f0:	fb09 b202 	mla	r2, r9, r2, fp
 801a1f4:	4492      	add	sl, r2
 801a1f6:	b2a4      	uxth	r4, r4
 801a1f8:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 801a1fc:	f84e 4b04 	str.w	r4, [lr], #4
 801a200:	f851 4b04 	ldr.w	r4, [r1], #4
 801a204:	f8be 2000 	ldrh.w	r2, [lr]
 801a208:	0c24      	lsrs	r4, r4, #16
 801a20a:	fb09 2404 	mla	r4, r9, r4, r2
 801a20e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 801a212:	458c      	cmp	ip, r1
 801a214:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 801a218:	d8e7      	bhi.n	801a1ea <__multiply+0xfe>
 801a21a:	9a01      	ldr	r2, [sp, #4]
 801a21c:	50b4      	str	r4, [r6, r2]
 801a21e:	3604      	adds	r6, #4
 801a220:	e7a3      	b.n	801a16a <__multiply+0x7e>
 801a222:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801a226:	2b00      	cmp	r3, #0
 801a228:	d1a5      	bne.n	801a176 <__multiply+0x8a>
 801a22a:	3f01      	subs	r7, #1
 801a22c:	e7a1      	b.n	801a172 <__multiply+0x86>
 801a22e:	bf00      	nop
 801a230:	0801fd88 	.word	0x0801fd88
 801a234:	0801fe7c 	.word	0x0801fe7c

0801a238 <__pow5mult>:
 801a238:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a23c:	4615      	mov	r5, r2
 801a23e:	f012 0203 	ands.w	r2, r2, #3
 801a242:	4606      	mov	r6, r0
 801a244:	460f      	mov	r7, r1
 801a246:	d007      	beq.n	801a258 <__pow5mult+0x20>
 801a248:	4c25      	ldr	r4, [pc, #148]	; (801a2e0 <__pow5mult+0xa8>)
 801a24a:	3a01      	subs	r2, #1
 801a24c:	2300      	movs	r3, #0
 801a24e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801a252:	f7ff fe51 	bl	8019ef8 <__multadd>
 801a256:	4607      	mov	r7, r0
 801a258:	10ad      	asrs	r5, r5, #2
 801a25a:	d03d      	beq.n	801a2d8 <__pow5mult+0xa0>
 801a25c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801a25e:	b97c      	cbnz	r4, 801a280 <__pow5mult+0x48>
 801a260:	2010      	movs	r0, #16
 801a262:	f7fc fda3 	bl	8016dac <malloc>
 801a266:	4602      	mov	r2, r0
 801a268:	6270      	str	r0, [r6, #36]	; 0x24
 801a26a:	b928      	cbnz	r0, 801a278 <__pow5mult+0x40>
 801a26c:	4b1d      	ldr	r3, [pc, #116]	; (801a2e4 <__pow5mult+0xac>)
 801a26e:	481e      	ldr	r0, [pc, #120]	; (801a2e8 <__pow5mult+0xb0>)
 801a270:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801a274:	f7fe faa4 	bl	80187c0 <__assert_func>
 801a278:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801a27c:	6004      	str	r4, [r0, #0]
 801a27e:	60c4      	str	r4, [r0, #12]
 801a280:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801a284:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801a288:	b94c      	cbnz	r4, 801a29e <__pow5mult+0x66>
 801a28a:	f240 2171 	movw	r1, #625	; 0x271
 801a28e:	4630      	mov	r0, r6
 801a290:	f7ff ff16 	bl	801a0c0 <__i2b>
 801a294:	2300      	movs	r3, #0
 801a296:	f8c8 0008 	str.w	r0, [r8, #8]
 801a29a:	4604      	mov	r4, r0
 801a29c:	6003      	str	r3, [r0, #0]
 801a29e:	f04f 0900 	mov.w	r9, #0
 801a2a2:	07eb      	lsls	r3, r5, #31
 801a2a4:	d50a      	bpl.n	801a2bc <__pow5mult+0x84>
 801a2a6:	4639      	mov	r1, r7
 801a2a8:	4622      	mov	r2, r4
 801a2aa:	4630      	mov	r0, r6
 801a2ac:	f7ff ff1e 	bl	801a0ec <__multiply>
 801a2b0:	4639      	mov	r1, r7
 801a2b2:	4680      	mov	r8, r0
 801a2b4:	4630      	mov	r0, r6
 801a2b6:	f7ff fdfd 	bl	8019eb4 <_Bfree>
 801a2ba:	4647      	mov	r7, r8
 801a2bc:	106d      	asrs	r5, r5, #1
 801a2be:	d00b      	beq.n	801a2d8 <__pow5mult+0xa0>
 801a2c0:	6820      	ldr	r0, [r4, #0]
 801a2c2:	b938      	cbnz	r0, 801a2d4 <__pow5mult+0x9c>
 801a2c4:	4622      	mov	r2, r4
 801a2c6:	4621      	mov	r1, r4
 801a2c8:	4630      	mov	r0, r6
 801a2ca:	f7ff ff0f 	bl	801a0ec <__multiply>
 801a2ce:	6020      	str	r0, [r4, #0]
 801a2d0:	f8c0 9000 	str.w	r9, [r0]
 801a2d4:	4604      	mov	r4, r0
 801a2d6:	e7e4      	b.n	801a2a2 <__pow5mult+0x6a>
 801a2d8:	4638      	mov	r0, r7
 801a2da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a2de:	bf00      	nop
 801a2e0:	0801ffd0 	.word	0x0801ffd0
 801a2e4:	0801fc18 	.word	0x0801fc18
 801a2e8:	0801fe7c 	.word	0x0801fe7c

0801a2ec <__lshift>:
 801a2ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a2f0:	460c      	mov	r4, r1
 801a2f2:	6849      	ldr	r1, [r1, #4]
 801a2f4:	6923      	ldr	r3, [r4, #16]
 801a2f6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801a2fa:	68a3      	ldr	r3, [r4, #8]
 801a2fc:	4607      	mov	r7, r0
 801a2fe:	4691      	mov	r9, r2
 801a300:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801a304:	f108 0601 	add.w	r6, r8, #1
 801a308:	42b3      	cmp	r3, r6
 801a30a:	db0b      	blt.n	801a324 <__lshift+0x38>
 801a30c:	4638      	mov	r0, r7
 801a30e:	f7ff fd91 	bl	8019e34 <_Balloc>
 801a312:	4605      	mov	r5, r0
 801a314:	b948      	cbnz	r0, 801a32a <__lshift+0x3e>
 801a316:	4602      	mov	r2, r0
 801a318:	4b28      	ldr	r3, [pc, #160]	; (801a3bc <__lshift+0xd0>)
 801a31a:	4829      	ldr	r0, [pc, #164]	; (801a3c0 <__lshift+0xd4>)
 801a31c:	f240 11d9 	movw	r1, #473	; 0x1d9
 801a320:	f7fe fa4e 	bl	80187c0 <__assert_func>
 801a324:	3101      	adds	r1, #1
 801a326:	005b      	lsls	r3, r3, #1
 801a328:	e7ee      	b.n	801a308 <__lshift+0x1c>
 801a32a:	2300      	movs	r3, #0
 801a32c:	f100 0114 	add.w	r1, r0, #20
 801a330:	f100 0210 	add.w	r2, r0, #16
 801a334:	4618      	mov	r0, r3
 801a336:	4553      	cmp	r3, sl
 801a338:	db33      	blt.n	801a3a2 <__lshift+0xb6>
 801a33a:	6920      	ldr	r0, [r4, #16]
 801a33c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801a340:	f104 0314 	add.w	r3, r4, #20
 801a344:	f019 091f 	ands.w	r9, r9, #31
 801a348:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801a34c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801a350:	d02b      	beq.n	801a3aa <__lshift+0xbe>
 801a352:	f1c9 0e20 	rsb	lr, r9, #32
 801a356:	468a      	mov	sl, r1
 801a358:	2200      	movs	r2, #0
 801a35a:	6818      	ldr	r0, [r3, #0]
 801a35c:	fa00 f009 	lsl.w	r0, r0, r9
 801a360:	4302      	orrs	r2, r0
 801a362:	f84a 2b04 	str.w	r2, [sl], #4
 801a366:	f853 2b04 	ldr.w	r2, [r3], #4
 801a36a:	459c      	cmp	ip, r3
 801a36c:	fa22 f20e 	lsr.w	r2, r2, lr
 801a370:	d8f3      	bhi.n	801a35a <__lshift+0x6e>
 801a372:	ebac 0304 	sub.w	r3, ip, r4
 801a376:	3b15      	subs	r3, #21
 801a378:	f023 0303 	bic.w	r3, r3, #3
 801a37c:	3304      	adds	r3, #4
 801a37e:	f104 0015 	add.w	r0, r4, #21
 801a382:	4584      	cmp	ip, r0
 801a384:	bf38      	it	cc
 801a386:	2304      	movcc	r3, #4
 801a388:	50ca      	str	r2, [r1, r3]
 801a38a:	b10a      	cbz	r2, 801a390 <__lshift+0xa4>
 801a38c:	f108 0602 	add.w	r6, r8, #2
 801a390:	3e01      	subs	r6, #1
 801a392:	4638      	mov	r0, r7
 801a394:	612e      	str	r6, [r5, #16]
 801a396:	4621      	mov	r1, r4
 801a398:	f7ff fd8c 	bl	8019eb4 <_Bfree>
 801a39c:	4628      	mov	r0, r5
 801a39e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a3a2:	f842 0f04 	str.w	r0, [r2, #4]!
 801a3a6:	3301      	adds	r3, #1
 801a3a8:	e7c5      	b.n	801a336 <__lshift+0x4a>
 801a3aa:	3904      	subs	r1, #4
 801a3ac:	f853 2b04 	ldr.w	r2, [r3], #4
 801a3b0:	f841 2f04 	str.w	r2, [r1, #4]!
 801a3b4:	459c      	cmp	ip, r3
 801a3b6:	d8f9      	bhi.n	801a3ac <__lshift+0xc0>
 801a3b8:	e7ea      	b.n	801a390 <__lshift+0xa4>
 801a3ba:	bf00      	nop
 801a3bc:	0801fd88 	.word	0x0801fd88
 801a3c0:	0801fe7c 	.word	0x0801fe7c

0801a3c4 <__mcmp>:
 801a3c4:	b530      	push	{r4, r5, lr}
 801a3c6:	6902      	ldr	r2, [r0, #16]
 801a3c8:	690c      	ldr	r4, [r1, #16]
 801a3ca:	1b12      	subs	r2, r2, r4
 801a3cc:	d10e      	bne.n	801a3ec <__mcmp+0x28>
 801a3ce:	f100 0314 	add.w	r3, r0, #20
 801a3d2:	3114      	adds	r1, #20
 801a3d4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801a3d8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801a3dc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801a3e0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801a3e4:	42a5      	cmp	r5, r4
 801a3e6:	d003      	beq.n	801a3f0 <__mcmp+0x2c>
 801a3e8:	d305      	bcc.n	801a3f6 <__mcmp+0x32>
 801a3ea:	2201      	movs	r2, #1
 801a3ec:	4610      	mov	r0, r2
 801a3ee:	bd30      	pop	{r4, r5, pc}
 801a3f0:	4283      	cmp	r3, r0
 801a3f2:	d3f3      	bcc.n	801a3dc <__mcmp+0x18>
 801a3f4:	e7fa      	b.n	801a3ec <__mcmp+0x28>
 801a3f6:	f04f 32ff 	mov.w	r2, #4294967295
 801a3fa:	e7f7      	b.n	801a3ec <__mcmp+0x28>

0801a3fc <__mdiff>:
 801a3fc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a400:	460c      	mov	r4, r1
 801a402:	4606      	mov	r6, r0
 801a404:	4611      	mov	r1, r2
 801a406:	4620      	mov	r0, r4
 801a408:	4617      	mov	r7, r2
 801a40a:	f7ff ffdb 	bl	801a3c4 <__mcmp>
 801a40e:	1e05      	subs	r5, r0, #0
 801a410:	d110      	bne.n	801a434 <__mdiff+0x38>
 801a412:	4629      	mov	r1, r5
 801a414:	4630      	mov	r0, r6
 801a416:	f7ff fd0d 	bl	8019e34 <_Balloc>
 801a41a:	b930      	cbnz	r0, 801a42a <__mdiff+0x2e>
 801a41c:	4b39      	ldr	r3, [pc, #228]	; (801a504 <__mdiff+0x108>)
 801a41e:	4602      	mov	r2, r0
 801a420:	f240 2132 	movw	r1, #562	; 0x232
 801a424:	4838      	ldr	r0, [pc, #224]	; (801a508 <__mdiff+0x10c>)
 801a426:	f7fe f9cb 	bl	80187c0 <__assert_func>
 801a42a:	2301      	movs	r3, #1
 801a42c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801a430:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a434:	bfa4      	itt	ge
 801a436:	463b      	movge	r3, r7
 801a438:	4627      	movge	r7, r4
 801a43a:	4630      	mov	r0, r6
 801a43c:	6879      	ldr	r1, [r7, #4]
 801a43e:	bfa6      	itte	ge
 801a440:	461c      	movge	r4, r3
 801a442:	2500      	movge	r5, #0
 801a444:	2501      	movlt	r5, #1
 801a446:	f7ff fcf5 	bl	8019e34 <_Balloc>
 801a44a:	b920      	cbnz	r0, 801a456 <__mdiff+0x5a>
 801a44c:	4b2d      	ldr	r3, [pc, #180]	; (801a504 <__mdiff+0x108>)
 801a44e:	4602      	mov	r2, r0
 801a450:	f44f 7110 	mov.w	r1, #576	; 0x240
 801a454:	e7e6      	b.n	801a424 <__mdiff+0x28>
 801a456:	693e      	ldr	r6, [r7, #16]
 801a458:	60c5      	str	r5, [r0, #12]
 801a45a:	6925      	ldr	r5, [r4, #16]
 801a45c:	f107 0114 	add.w	r1, r7, #20
 801a460:	f104 0914 	add.w	r9, r4, #20
 801a464:	f100 0e14 	add.w	lr, r0, #20
 801a468:	f107 0210 	add.w	r2, r7, #16
 801a46c:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 801a470:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 801a474:	46f2      	mov	sl, lr
 801a476:	2700      	movs	r7, #0
 801a478:	f859 3b04 	ldr.w	r3, [r9], #4
 801a47c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801a480:	fa1f f883 	uxth.w	r8, r3
 801a484:	fa17 f78b 	uxtah	r7, r7, fp
 801a488:	0c1b      	lsrs	r3, r3, #16
 801a48a:	eba7 0808 	sub.w	r8, r7, r8
 801a48e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801a492:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801a496:	fa1f f888 	uxth.w	r8, r8
 801a49a:	141f      	asrs	r7, r3, #16
 801a49c:	454d      	cmp	r5, r9
 801a49e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801a4a2:	f84a 3b04 	str.w	r3, [sl], #4
 801a4a6:	d8e7      	bhi.n	801a478 <__mdiff+0x7c>
 801a4a8:	1b2b      	subs	r3, r5, r4
 801a4aa:	3b15      	subs	r3, #21
 801a4ac:	f023 0303 	bic.w	r3, r3, #3
 801a4b0:	3304      	adds	r3, #4
 801a4b2:	3415      	adds	r4, #21
 801a4b4:	42a5      	cmp	r5, r4
 801a4b6:	bf38      	it	cc
 801a4b8:	2304      	movcc	r3, #4
 801a4ba:	4419      	add	r1, r3
 801a4bc:	4473      	add	r3, lr
 801a4be:	469e      	mov	lr, r3
 801a4c0:	460d      	mov	r5, r1
 801a4c2:	4565      	cmp	r5, ip
 801a4c4:	d30e      	bcc.n	801a4e4 <__mdiff+0xe8>
 801a4c6:	f10c 0203 	add.w	r2, ip, #3
 801a4ca:	1a52      	subs	r2, r2, r1
 801a4cc:	f022 0203 	bic.w	r2, r2, #3
 801a4d0:	3903      	subs	r1, #3
 801a4d2:	458c      	cmp	ip, r1
 801a4d4:	bf38      	it	cc
 801a4d6:	2200      	movcc	r2, #0
 801a4d8:	441a      	add	r2, r3
 801a4da:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801a4de:	b17b      	cbz	r3, 801a500 <__mdiff+0x104>
 801a4e0:	6106      	str	r6, [r0, #16]
 801a4e2:	e7a5      	b.n	801a430 <__mdiff+0x34>
 801a4e4:	f855 8b04 	ldr.w	r8, [r5], #4
 801a4e8:	fa17 f488 	uxtah	r4, r7, r8
 801a4ec:	1422      	asrs	r2, r4, #16
 801a4ee:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 801a4f2:	b2a4      	uxth	r4, r4
 801a4f4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 801a4f8:	f84e 4b04 	str.w	r4, [lr], #4
 801a4fc:	1417      	asrs	r7, r2, #16
 801a4fe:	e7e0      	b.n	801a4c2 <__mdiff+0xc6>
 801a500:	3e01      	subs	r6, #1
 801a502:	e7ea      	b.n	801a4da <__mdiff+0xde>
 801a504:	0801fd88 	.word	0x0801fd88
 801a508:	0801fe7c 	.word	0x0801fe7c

0801a50c <__ulp>:
 801a50c:	b082      	sub	sp, #8
 801a50e:	ed8d 0b00 	vstr	d0, [sp]
 801a512:	9b01      	ldr	r3, [sp, #4]
 801a514:	4912      	ldr	r1, [pc, #72]	; (801a560 <__ulp+0x54>)
 801a516:	4019      	ands	r1, r3
 801a518:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 801a51c:	2900      	cmp	r1, #0
 801a51e:	dd05      	ble.n	801a52c <__ulp+0x20>
 801a520:	2200      	movs	r2, #0
 801a522:	460b      	mov	r3, r1
 801a524:	ec43 2b10 	vmov	d0, r2, r3
 801a528:	b002      	add	sp, #8
 801a52a:	4770      	bx	lr
 801a52c:	4249      	negs	r1, r1
 801a52e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 801a532:	ea4f 5021 	mov.w	r0, r1, asr #20
 801a536:	f04f 0200 	mov.w	r2, #0
 801a53a:	f04f 0300 	mov.w	r3, #0
 801a53e:	da04      	bge.n	801a54a <__ulp+0x3e>
 801a540:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 801a544:	fa41 f300 	asr.w	r3, r1, r0
 801a548:	e7ec      	b.n	801a524 <__ulp+0x18>
 801a54a:	f1a0 0114 	sub.w	r1, r0, #20
 801a54e:	291e      	cmp	r1, #30
 801a550:	bfda      	itte	le
 801a552:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 801a556:	fa20 f101 	lsrle.w	r1, r0, r1
 801a55a:	2101      	movgt	r1, #1
 801a55c:	460a      	mov	r2, r1
 801a55e:	e7e1      	b.n	801a524 <__ulp+0x18>
 801a560:	7ff00000 	.word	0x7ff00000

0801a564 <__b2d>:
 801a564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a566:	6905      	ldr	r5, [r0, #16]
 801a568:	f100 0714 	add.w	r7, r0, #20
 801a56c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 801a570:	1f2e      	subs	r6, r5, #4
 801a572:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801a576:	4620      	mov	r0, r4
 801a578:	f7ff fd52 	bl	801a020 <__hi0bits>
 801a57c:	f1c0 0320 	rsb	r3, r0, #32
 801a580:	280a      	cmp	r0, #10
 801a582:	f8df c07c 	ldr.w	ip, [pc, #124]	; 801a600 <__b2d+0x9c>
 801a586:	600b      	str	r3, [r1, #0]
 801a588:	dc14      	bgt.n	801a5b4 <__b2d+0x50>
 801a58a:	f1c0 0e0b 	rsb	lr, r0, #11
 801a58e:	fa24 f10e 	lsr.w	r1, r4, lr
 801a592:	42b7      	cmp	r7, r6
 801a594:	ea41 030c 	orr.w	r3, r1, ip
 801a598:	bf34      	ite	cc
 801a59a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801a59e:	2100      	movcs	r1, #0
 801a5a0:	3015      	adds	r0, #21
 801a5a2:	fa04 f000 	lsl.w	r0, r4, r0
 801a5a6:	fa21 f10e 	lsr.w	r1, r1, lr
 801a5aa:	ea40 0201 	orr.w	r2, r0, r1
 801a5ae:	ec43 2b10 	vmov	d0, r2, r3
 801a5b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a5b4:	42b7      	cmp	r7, r6
 801a5b6:	bf3a      	itte	cc
 801a5b8:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801a5bc:	f1a5 0608 	subcc.w	r6, r5, #8
 801a5c0:	2100      	movcs	r1, #0
 801a5c2:	380b      	subs	r0, #11
 801a5c4:	d017      	beq.n	801a5f6 <__b2d+0x92>
 801a5c6:	f1c0 0c20 	rsb	ip, r0, #32
 801a5ca:	fa04 f500 	lsl.w	r5, r4, r0
 801a5ce:	42be      	cmp	r6, r7
 801a5d0:	fa21 f40c 	lsr.w	r4, r1, ip
 801a5d4:	ea45 0504 	orr.w	r5, r5, r4
 801a5d8:	bf8c      	ite	hi
 801a5da:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 801a5de:	2400      	movls	r4, #0
 801a5e0:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 801a5e4:	fa01 f000 	lsl.w	r0, r1, r0
 801a5e8:	fa24 f40c 	lsr.w	r4, r4, ip
 801a5ec:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801a5f0:	ea40 0204 	orr.w	r2, r0, r4
 801a5f4:	e7db      	b.n	801a5ae <__b2d+0x4a>
 801a5f6:	ea44 030c 	orr.w	r3, r4, ip
 801a5fa:	460a      	mov	r2, r1
 801a5fc:	e7d7      	b.n	801a5ae <__b2d+0x4a>
 801a5fe:	bf00      	nop
 801a600:	3ff00000 	.word	0x3ff00000

0801a604 <__d2b>:
 801a604:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801a608:	4689      	mov	r9, r1
 801a60a:	2101      	movs	r1, #1
 801a60c:	ec57 6b10 	vmov	r6, r7, d0
 801a610:	4690      	mov	r8, r2
 801a612:	f7ff fc0f 	bl	8019e34 <_Balloc>
 801a616:	4604      	mov	r4, r0
 801a618:	b930      	cbnz	r0, 801a628 <__d2b+0x24>
 801a61a:	4602      	mov	r2, r0
 801a61c:	4b25      	ldr	r3, [pc, #148]	; (801a6b4 <__d2b+0xb0>)
 801a61e:	4826      	ldr	r0, [pc, #152]	; (801a6b8 <__d2b+0xb4>)
 801a620:	f240 310a 	movw	r1, #778	; 0x30a
 801a624:	f7fe f8cc 	bl	80187c0 <__assert_func>
 801a628:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801a62c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801a630:	bb35      	cbnz	r5, 801a680 <__d2b+0x7c>
 801a632:	2e00      	cmp	r6, #0
 801a634:	9301      	str	r3, [sp, #4]
 801a636:	d028      	beq.n	801a68a <__d2b+0x86>
 801a638:	4668      	mov	r0, sp
 801a63a:	9600      	str	r6, [sp, #0]
 801a63c:	f7ff fd10 	bl	801a060 <__lo0bits>
 801a640:	9900      	ldr	r1, [sp, #0]
 801a642:	b300      	cbz	r0, 801a686 <__d2b+0x82>
 801a644:	9a01      	ldr	r2, [sp, #4]
 801a646:	f1c0 0320 	rsb	r3, r0, #32
 801a64a:	fa02 f303 	lsl.w	r3, r2, r3
 801a64e:	430b      	orrs	r3, r1
 801a650:	40c2      	lsrs	r2, r0
 801a652:	6163      	str	r3, [r4, #20]
 801a654:	9201      	str	r2, [sp, #4]
 801a656:	9b01      	ldr	r3, [sp, #4]
 801a658:	61a3      	str	r3, [r4, #24]
 801a65a:	2b00      	cmp	r3, #0
 801a65c:	bf14      	ite	ne
 801a65e:	2202      	movne	r2, #2
 801a660:	2201      	moveq	r2, #1
 801a662:	6122      	str	r2, [r4, #16]
 801a664:	b1d5      	cbz	r5, 801a69c <__d2b+0x98>
 801a666:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801a66a:	4405      	add	r5, r0
 801a66c:	f8c9 5000 	str.w	r5, [r9]
 801a670:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801a674:	f8c8 0000 	str.w	r0, [r8]
 801a678:	4620      	mov	r0, r4
 801a67a:	b003      	add	sp, #12
 801a67c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a680:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801a684:	e7d5      	b.n	801a632 <__d2b+0x2e>
 801a686:	6161      	str	r1, [r4, #20]
 801a688:	e7e5      	b.n	801a656 <__d2b+0x52>
 801a68a:	a801      	add	r0, sp, #4
 801a68c:	f7ff fce8 	bl	801a060 <__lo0bits>
 801a690:	9b01      	ldr	r3, [sp, #4]
 801a692:	6163      	str	r3, [r4, #20]
 801a694:	2201      	movs	r2, #1
 801a696:	6122      	str	r2, [r4, #16]
 801a698:	3020      	adds	r0, #32
 801a69a:	e7e3      	b.n	801a664 <__d2b+0x60>
 801a69c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801a6a0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801a6a4:	f8c9 0000 	str.w	r0, [r9]
 801a6a8:	6918      	ldr	r0, [r3, #16]
 801a6aa:	f7ff fcb9 	bl	801a020 <__hi0bits>
 801a6ae:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801a6b2:	e7df      	b.n	801a674 <__d2b+0x70>
 801a6b4:	0801fd88 	.word	0x0801fd88
 801a6b8:	0801fe7c 	.word	0x0801fe7c

0801a6bc <__ratio>:
 801a6bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a6c0:	4688      	mov	r8, r1
 801a6c2:	4669      	mov	r1, sp
 801a6c4:	4681      	mov	r9, r0
 801a6c6:	f7ff ff4d 	bl	801a564 <__b2d>
 801a6ca:	a901      	add	r1, sp, #4
 801a6cc:	4640      	mov	r0, r8
 801a6ce:	ec55 4b10 	vmov	r4, r5, d0
 801a6d2:	f7ff ff47 	bl	801a564 <__b2d>
 801a6d6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801a6da:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801a6de:	eba3 0c02 	sub.w	ip, r3, r2
 801a6e2:	e9dd 3200 	ldrd	r3, r2, [sp]
 801a6e6:	1a9b      	subs	r3, r3, r2
 801a6e8:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801a6ec:	ec51 0b10 	vmov	r0, r1, d0
 801a6f0:	2b00      	cmp	r3, #0
 801a6f2:	bfd6      	itet	le
 801a6f4:	460a      	movle	r2, r1
 801a6f6:	462a      	movgt	r2, r5
 801a6f8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801a6fc:	468b      	mov	fp, r1
 801a6fe:	462f      	mov	r7, r5
 801a700:	bfd4      	ite	le
 801a702:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 801a706:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801a70a:	4620      	mov	r0, r4
 801a70c:	ee10 2a10 	vmov	r2, s0
 801a710:	465b      	mov	r3, fp
 801a712:	4639      	mov	r1, r7
 801a714:	f7e6 f8aa 	bl	800086c <__aeabi_ddiv>
 801a718:	ec41 0b10 	vmov	d0, r0, r1
 801a71c:	b003      	add	sp, #12
 801a71e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a722 <__copybits>:
 801a722:	3901      	subs	r1, #1
 801a724:	b570      	push	{r4, r5, r6, lr}
 801a726:	1149      	asrs	r1, r1, #5
 801a728:	6914      	ldr	r4, [r2, #16]
 801a72a:	3101      	adds	r1, #1
 801a72c:	f102 0314 	add.w	r3, r2, #20
 801a730:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801a734:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801a738:	1f05      	subs	r5, r0, #4
 801a73a:	42a3      	cmp	r3, r4
 801a73c:	d30c      	bcc.n	801a758 <__copybits+0x36>
 801a73e:	1aa3      	subs	r3, r4, r2
 801a740:	3b11      	subs	r3, #17
 801a742:	f023 0303 	bic.w	r3, r3, #3
 801a746:	3211      	adds	r2, #17
 801a748:	42a2      	cmp	r2, r4
 801a74a:	bf88      	it	hi
 801a74c:	2300      	movhi	r3, #0
 801a74e:	4418      	add	r0, r3
 801a750:	2300      	movs	r3, #0
 801a752:	4288      	cmp	r0, r1
 801a754:	d305      	bcc.n	801a762 <__copybits+0x40>
 801a756:	bd70      	pop	{r4, r5, r6, pc}
 801a758:	f853 6b04 	ldr.w	r6, [r3], #4
 801a75c:	f845 6f04 	str.w	r6, [r5, #4]!
 801a760:	e7eb      	b.n	801a73a <__copybits+0x18>
 801a762:	f840 3b04 	str.w	r3, [r0], #4
 801a766:	e7f4      	b.n	801a752 <__copybits+0x30>

0801a768 <__any_on>:
 801a768:	f100 0214 	add.w	r2, r0, #20
 801a76c:	6900      	ldr	r0, [r0, #16]
 801a76e:	114b      	asrs	r3, r1, #5
 801a770:	4298      	cmp	r0, r3
 801a772:	b510      	push	{r4, lr}
 801a774:	db11      	blt.n	801a79a <__any_on+0x32>
 801a776:	dd0a      	ble.n	801a78e <__any_on+0x26>
 801a778:	f011 011f 	ands.w	r1, r1, #31
 801a77c:	d007      	beq.n	801a78e <__any_on+0x26>
 801a77e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801a782:	fa24 f001 	lsr.w	r0, r4, r1
 801a786:	fa00 f101 	lsl.w	r1, r0, r1
 801a78a:	428c      	cmp	r4, r1
 801a78c:	d10b      	bne.n	801a7a6 <__any_on+0x3e>
 801a78e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801a792:	4293      	cmp	r3, r2
 801a794:	d803      	bhi.n	801a79e <__any_on+0x36>
 801a796:	2000      	movs	r0, #0
 801a798:	bd10      	pop	{r4, pc}
 801a79a:	4603      	mov	r3, r0
 801a79c:	e7f7      	b.n	801a78e <__any_on+0x26>
 801a79e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801a7a2:	2900      	cmp	r1, #0
 801a7a4:	d0f5      	beq.n	801a792 <__any_on+0x2a>
 801a7a6:	2001      	movs	r0, #1
 801a7a8:	e7f6      	b.n	801a798 <__any_on+0x30>

0801a7aa <_calloc_r>:
 801a7aa:	b513      	push	{r0, r1, r4, lr}
 801a7ac:	434a      	muls	r2, r1
 801a7ae:	4611      	mov	r1, r2
 801a7b0:	9201      	str	r2, [sp, #4]
 801a7b2:	f7fc fb99 	bl	8016ee8 <_malloc_r>
 801a7b6:	4604      	mov	r4, r0
 801a7b8:	b118      	cbz	r0, 801a7c2 <_calloc_r+0x18>
 801a7ba:	9a01      	ldr	r2, [sp, #4]
 801a7bc:	2100      	movs	r1, #0
 801a7be:	f7fc fb3b 	bl	8016e38 <memset>
 801a7c2:	4620      	mov	r0, r4
 801a7c4:	b002      	add	sp, #8
 801a7c6:	bd10      	pop	{r4, pc}

0801a7c8 <__ssputs_r>:
 801a7c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a7cc:	688e      	ldr	r6, [r1, #8]
 801a7ce:	429e      	cmp	r6, r3
 801a7d0:	4682      	mov	sl, r0
 801a7d2:	460c      	mov	r4, r1
 801a7d4:	4690      	mov	r8, r2
 801a7d6:	461f      	mov	r7, r3
 801a7d8:	d838      	bhi.n	801a84c <__ssputs_r+0x84>
 801a7da:	898a      	ldrh	r2, [r1, #12]
 801a7dc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801a7e0:	d032      	beq.n	801a848 <__ssputs_r+0x80>
 801a7e2:	6825      	ldr	r5, [r4, #0]
 801a7e4:	6909      	ldr	r1, [r1, #16]
 801a7e6:	eba5 0901 	sub.w	r9, r5, r1
 801a7ea:	6965      	ldr	r5, [r4, #20]
 801a7ec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801a7f0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801a7f4:	3301      	adds	r3, #1
 801a7f6:	444b      	add	r3, r9
 801a7f8:	106d      	asrs	r5, r5, #1
 801a7fa:	429d      	cmp	r5, r3
 801a7fc:	bf38      	it	cc
 801a7fe:	461d      	movcc	r5, r3
 801a800:	0553      	lsls	r3, r2, #21
 801a802:	d531      	bpl.n	801a868 <__ssputs_r+0xa0>
 801a804:	4629      	mov	r1, r5
 801a806:	f7fc fb6f 	bl	8016ee8 <_malloc_r>
 801a80a:	4606      	mov	r6, r0
 801a80c:	b950      	cbnz	r0, 801a824 <__ssputs_r+0x5c>
 801a80e:	230c      	movs	r3, #12
 801a810:	f8ca 3000 	str.w	r3, [sl]
 801a814:	89a3      	ldrh	r3, [r4, #12]
 801a816:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a81a:	81a3      	strh	r3, [r4, #12]
 801a81c:	f04f 30ff 	mov.w	r0, #4294967295
 801a820:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a824:	6921      	ldr	r1, [r4, #16]
 801a826:	464a      	mov	r2, r9
 801a828:	f7fc fade 	bl	8016de8 <memcpy>
 801a82c:	89a3      	ldrh	r3, [r4, #12]
 801a82e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801a832:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a836:	81a3      	strh	r3, [r4, #12]
 801a838:	6126      	str	r6, [r4, #16]
 801a83a:	6165      	str	r5, [r4, #20]
 801a83c:	444e      	add	r6, r9
 801a83e:	eba5 0509 	sub.w	r5, r5, r9
 801a842:	6026      	str	r6, [r4, #0]
 801a844:	60a5      	str	r5, [r4, #8]
 801a846:	463e      	mov	r6, r7
 801a848:	42be      	cmp	r6, r7
 801a84a:	d900      	bls.n	801a84e <__ssputs_r+0x86>
 801a84c:	463e      	mov	r6, r7
 801a84e:	4632      	mov	r2, r6
 801a850:	6820      	ldr	r0, [r4, #0]
 801a852:	4641      	mov	r1, r8
 801a854:	f7fc fad6 	bl	8016e04 <memmove>
 801a858:	68a3      	ldr	r3, [r4, #8]
 801a85a:	6822      	ldr	r2, [r4, #0]
 801a85c:	1b9b      	subs	r3, r3, r6
 801a85e:	4432      	add	r2, r6
 801a860:	60a3      	str	r3, [r4, #8]
 801a862:	6022      	str	r2, [r4, #0]
 801a864:	2000      	movs	r0, #0
 801a866:	e7db      	b.n	801a820 <__ssputs_r+0x58>
 801a868:	462a      	mov	r2, r5
 801a86a:	f000 fce1 	bl	801b230 <_realloc_r>
 801a86e:	4606      	mov	r6, r0
 801a870:	2800      	cmp	r0, #0
 801a872:	d1e1      	bne.n	801a838 <__ssputs_r+0x70>
 801a874:	6921      	ldr	r1, [r4, #16]
 801a876:	4650      	mov	r0, sl
 801a878:	f7fc fae6 	bl	8016e48 <_free_r>
 801a87c:	e7c7      	b.n	801a80e <__ssputs_r+0x46>
	...

0801a880 <_svfiprintf_r>:
 801a880:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a884:	4698      	mov	r8, r3
 801a886:	898b      	ldrh	r3, [r1, #12]
 801a888:	061b      	lsls	r3, r3, #24
 801a88a:	b09d      	sub	sp, #116	; 0x74
 801a88c:	4607      	mov	r7, r0
 801a88e:	460d      	mov	r5, r1
 801a890:	4614      	mov	r4, r2
 801a892:	d50e      	bpl.n	801a8b2 <_svfiprintf_r+0x32>
 801a894:	690b      	ldr	r3, [r1, #16]
 801a896:	b963      	cbnz	r3, 801a8b2 <_svfiprintf_r+0x32>
 801a898:	2140      	movs	r1, #64	; 0x40
 801a89a:	f7fc fb25 	bl	8016ee8 <_malloc_r>
 801a89e:	6028      	str	r0, [r5, #0]
 801a8a0:	6128      	str	r0, [r5, #16]
 801a8a2:	b920      	cbnz	r0, 801a8ae <_svfiprintf_r+0x2e>
 801a8a4:	230c      	movs	r3, #12
 801a8a6:	603b      	str	r3, [r7, #0]
 801a8a8:	f04f 30ff 	mov.w	r0, #4294967295
 801a8ac:	e0d1      	b.n	801aa52 <_svfiprintf_r+0x1d2>
 801a8ae:	2340      	movs	r3, #64	; 0x40
 801a8b0:	616b      	str	r3, [r5, #20]
 801a8b2:	2300      	movs	r3, #0
 801a8b4:	9309      	str	r3, [sp, #36]	; 0x24
 801a8b6:	2320      	movs	r3, #32
 801a8b8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801a8bc:	f8cd 800c 	str.w	r8, [sp, #12]
 801a8c0:	2330      	movs	r3, #48	; 0x30
 801a8c2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801aa6c <_svfiprintf_r+0x1ec>
 801a8c6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801a8ca:	f04f 0901 	mov.w	r9, #1
 801a8ce:	4623      	mov	r3, r4
 801a8d0:	469a      	mov	sl, r3
 801a8d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a8d6:	b10a      	cbz	r2, 801a8dc <_svfiprintf_r+0x5c>
 801a8d8:	2a25      	cmp	r2, #37	; 0x25
 801a8da:	d1f9      	bne.n	801a8d0 <_svfiprintf_r+0x50>
 801a8dc:	ebba 0b04 	subs.w	fp, sl, r4
 801a8e0:	d00b      	beq.n	801a8fa <_svfiprintf_r+0x7a>
 801a8e2:	465b      	mov	r3, fp
 801a8e4:	4622      	mov	r2, r4
 801a8e6:	4629      	mov	r1, r5
 801a8e8:	4638      	mov	r0, r7
 801a8ea:	f7ff ff6d 	bl	801a7c8 <__ssputs_r>
 801a8ee:	3001      	adds	r0, #1
 801a8f0:	f000 80aa 	beq.w	801aa48 <_svfiprintf_r+0x1c8>
 801a8f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a8f6:	445a      	add	r2, fp
 801a8f8:	9209      	str	r2, [sp, #36]	; 0x24
 801a8fa:	f89a 3000 	ldrb.w	r3, [sl]
 801a8fe:	2b00      	cmp	r3, #0
 801a900:	f000 80a2 	beq.w	801aa48 <_svfiprintf_r+0x1c8>
 801a904:	2300      	movs	r3, #0
 801a906:	f04f 32ff 	mov.w	r2, #4294967295
 801a90a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801a90e:	f10a 0a01 	add.w	sl, sl, #1
 801a912:	9304      	str	r3, [sp, #16]
 801a914:	9307      	str	r3, [sp, #28]
 801a916:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801a91a:	931a      	str	r3, [sp, #104]	; 0x68
 801a91c:	4654      	mov	r4, sl
 801a91e:	2205      	movs	r2, #5
 801a920:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a924:	4851      	ldr	r0, [pc, #324]	; (801aa6c <_svfiprintf_r+0x1ec>)
 801a926:	f7e5 fc6b 	bl	8000200 <memchr>
 801a92a:	9a04      	ldr	r2, [sp, #16]
 801a92c:	b9d8      	cbnz	r0, 801a966 <_svfiprintf_r+0xe6>
 801a92e:	06d0      	lsls	r0, r2, #27
 801a930:	bf44      	itt	mi
 801a932:	2320      	movmi	r3, #32
 801a934:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a938:	0711      	lsls	r1, r2, #28
 801a93a:	bf44      	itt	mi
 801a93c:	232b      	movmi	r3, #43	; 0x2b
 801a93e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a942:	f89a 3000 	ldrb.w	r3, [sl]
 801a946:	2b2a      	cmp	r3, #42	; 0x2a
 801a948:	d015      	beq.n	801a976 <_svfiprintf_r+0xf6>
 801a94a:	9a07      	ldr	r2, [sp, #28]
 801a94c:	4654      	mov	r4, sl
 801a94e:	2000      	movs	r0, #0
 801a950:	f04f 0c0a 	mov.w	ip, #10
 801a954:	4621      	mov	r1, r4
 801a956:	f811 3b01 	ldrb.w	r3, [r1], #1
 801a95a:	3b30      	subs	r3, #48	; 0x30
 801a95c:	2b09      	cmp	r3, #9
 801a95e:	d94e      	bls.n	801a9fe <_svfiprintf_r+0x17e>
 801a960:	b1b0      	cbz	r0, 801a990 <_svfiprintf_r+0x110>
 801a962:	9207      	str	r2, [sp, #28]
 801a964:	e014      	b.n	801a990 <_svfiprintf_r+0x110>
 801a966:	eba0 0308 	sub.w	r3, r0, r8
 801a96a:	fa09 f303 	lsl.w	r3, r9, r3
 801a96e:	4313      	orrs	r3, r2
 801a970:	9304      	str	r3, [sp, #16]
 801a972:	46a2      	mov	sl, r4
 801a974:	e7d2      	b.n	801a91c <_svfiprintf_r+0x9c>
 801a976:	9b03      	ldr	r3, [sp, #12]
 801a978:	1d19      	adds	r1, r3, #4
 801a97a:	681b      	ldr	r3, [r3, #0]
 801a97c:	9103      	str	r1, [sp, #12]
 801a97e:	2b00      	cmp	r3, #0
 801a980:	bfbb      	ittet	lt
 801a982:	425b      	neglt	r3, r3
 801a984:	f042 0202 	orrlt.w	r2, r2, #2
 801a988:	9307      	strge	r3, [sp, #28]
 801a98a:	9307      	strlt	r3, [sp, #28]
 801a98c:	bfb8      	it	lt
 801a98e:	9204      	strlt	r2, [sp, #16]
 801a990:	7823      	ldrb	r3, [r4, #0]
 801a992:	2b2e      	cmp	r3, #46	; 0x2e
 801a994:	d10c      	bne.n	801a9b0 <_svfiprintf_r+0x130>
 801a996:	7863      	ldrb	r3, [r4, #1]
 801a998:	2b2a      	cmp	r3, #42	; 0x2a
 801a99a:	d135      	bne.n	801aa08 <_svfiprintf_r+0x188>
 801a99c:	9b03      	ldr	r3, [sp, #12]
 801a99e:	1d1a      	adds	r2, r3, #4
 801a9a0:	681b      	ldr	r3, [r3, #0]
 801a9a2:	9203      	str	r2, [sp, #12]
 801a9a4:	2b00      	cmp	r3, #0
 801a9a6:	bfb8      	it	lt
 801a9a8:	f04f 33ff 	movlt.w	r3, #4294967295
 801a9ac:	3402      	adds	r4, #2
 801a9ae:	9305      	str	r3, [sp, #20]
 801a9b0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801aa7c <_svfiprintf_r+0x1fc>
 801a9b4:	7821      	ldrb	r1, [r4, #0]
 801a9b6:	2203      	movs	r2, #3
 801a9b8:	4650      	mov	r0, sl
 801a9ba:	f7e5 fc21 	bl	8000200 <memchr>
 801a9be:	b140      	cbz	r0, 801a9d2 <_svfiprintf_r+0x152>
 801a9c0:	2340      	movs	r3, #64	; 0x40
 801a9c2:	eba0 000a 	sub.w	r0, r0, sl
 801a9c6:	fa03 f000 	lsl.w	r0, r3, r0
 801a9ca:	9b04      	ldr	r3, [sp, #16]
 801a9cc:	4303      	orrs	r3, r0
 801a9ce:	3401      	adds	r4, #1
 801a9d0:	9304      	str	r3, [sp, #16]
 801a9d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a9d6:	4826      	ldr	r0, [pc, #152]	; (801aa70 <_svfiprintf_r+0x1f0>)
 801a9d8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801a9dc:	2206      	movs	r2, #6
 801a9de:	f7e5 fc0f 	bl	8000200 <memchr>
 801a9e2:	2800      	cmp	r0, #0
 801a9e4:	d038      	beq.n	801aa58 <_svfiprintf_r+0x1d8>
 801a9e6:	4b23      	ldr	r3, [pc, #140]	; (801aa74 <_svfiprintf_r+0x1f4>)
 801a9e8:	bb1b      	cbnz	r3, 801aa32 <_svfiprintf_r+0x1b2>
 801a9ea:	9b03      	ldr	r3, [sp, #12]
 801a9ec:	3307      	adds	r3, #7
 801a9ee:	f023 0307 	bic.w	r3, r3, #7
 801a9f2:	3308      	adds	r3, #8
 801a9f4:	9303      	str	r3, [sp, #12]
 801a9f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a9f8:	4433      	add	r3, r6
 801a9fa:	9309      	str	r3, [sp, #36]	; 0x24
 801a9fc:	e767      	b.n	801a8ce <_svfiprintf_r+0x4e>
 801a9fe:	fb0c 3202 	mla	r2, ip, r2, r3
 801aa02:	460c      	mov	r4, r1
 801aa04:	2001      	movs	r0, #1
 801aa06:	e7a5      	b.n	801a954 <_svfiprintf_r+0xd4>
 801aa08:	2300      	movs	r3, #0
 801aa0a:	3401      	adds	r4, #1
 801aa0c:	9305      	str	r3, [sp, #20]
 801aa0e:	4619      	mov	r1, r3
 801aa10:	f04f 0c0a 	mov.w	ip, #10
 801aa14:	4620      	mov	r0, r4
 801aa16:	f810 2b01 	ldrb.w	r2, [r0], #1
 801aa1a:	3a30      	subs	r2, #48	; 0x30
 801aa1c:	2a09      	cmp	r2, #9
 801aa1e:	d903      	bls.n	801aa28 <_svfiprintf_r+0x1a8>
 801aa20:	2b00      	cmp	r3, #0
 801aa22:	d0c5      	beq.n	801a9b0 <_svfiprintf_r+0x130>
 801aa24:	9105      	str	r1, [sp, #20]
 801aa26:	e7c3      	b.n	801a9b0 <_svfiprintf_r+0x130>
 801aa28:	fb0c 2101 	mla	r1, ip, r1, r2
 801aa2c:	4604      	mov	r4, r0
 801aa2e:	2301      	movs	r3, #1
 801aa30:	e7f0      	b.n	801aa14 <_svfiprintf_r+0x194>
 801aa32:	ab03      	add	r3, sp, #12
 801aa34:	9300      	str	r3, [sp, #0]
 801aa36:	462a      	mov	r2, r5
 801aa38:	4b0f      	ldr	r3, [pc, #60]	; (801aa78 <_svfiprintf_r+0x1f8>)
 801aa3a:	a904      	add	r1, sp, #16
 801aa3c:	4638      	mov	r0, r7
 801aa3e:	f7fc fb4d 	bl	80170dc <_printf_float>
 801aa42:	1c42      	adds	r2, r0, #1
 801aa44:	4606      	mov	r6, r0
 801aa46:	d1d6      	bne.n	801a9f6 <_svfiprintf_r+0x176>
 801aa48:	89ab      	ldrh	r3, [r5, #12]
 801aa4a:	065b      	lsls	r3, r3, #25
 801aa4c:	f53f af2c 	bmi.w	801a8a8 <_svfiprintf_r+0x28>
 801aa50:	9809      	ldr	r0, [sp, #36]	; 0x24
 801aa52:	b01d      	add	sp, #116	; 0x74
 801aa54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aa58:	ab03      	add	r3, sp, #12
 801aa5a:	9300      	str	r3, [sp, #0]
 801aa5c:	462a      	mov	r2, r5
 801aa5e:	4b06      	ldr	r3, [pc, #24]	; (801aa78 <_svfiprintf_r+0x1f8>)
 801aa60:	a904      	add	r1, sp, #16
 801aa62:	4638      	mov	r0, r7
 801aa64:	f7fc fdde 	bl	8017624 <_printf_i>
 801aa68:	e7eb      	b.n	801aa42 <_svfiprintf_r+0x1c2>
 801aa6a:	bf00      	nop
 801aa6c:	0801ffdc 	.word	0x0801ffdc
 801aa70:	0801ffe6 	.word	0x0801ffe6
 801aa74:	080170dd 	.word	0x080170dd
 801aa78:	0801a7c9 	.word	0x0801a7c9
 801aa7c:	0801ffe2 	.word	0x0801ffe2

0801aa80 <__sfputc_r>:
 801aa80:	6893      	ldr	r3, [r2, #8]
 801aa82:	3b01      	subs	r3, #1
 801aa84:	2b00      	cmp	r3, #0
 801aa86:	b410      	push	{r4}
 801aa88:	6093      	str	r3, [r2, #8]
 801aa8a:	da08      	bge.n	801aa9e <__sfputc_r+0x1e>
 801aa8c:	6994      	ldr	r4, [r2, #24]
 801aa8e:	42a3      	cmp	r3, r4
 801aa90:	db01      	blt.n	801aa96 <__sfputc_r+0x16>
 801aa92:	290a      	cmp	r1, #10
 801aa94:	d103      	bne.n	801aa9e <__sfputc_r+0x1e>
 801aa96:	f85d 4b04 	ldr.w	r4, [sp], #4
 801aa9a:	f000 b999 	b.w	801add0 <__swbuf_r>
 801aa9e:	6813      	ldr	r3, [r2, #0]
 801aaa0:	1c58      	adds	r0, r3, #1
 801aaa2:	6010      	str	r0, [r2, #0]
 801aaa4:	7019      	strb	r1, [r3, #0]
 801aaa6:	4608      	mov	r0, r1
 801aaa8:	f85d 4b04 	ldr.w	r4, [sp], #4
 801aaac:	4770      	bx	lr

0801aaae <__sfputs_r>:
 801aaae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801aab0:	4606      	mov	r6, r0
 801aab2:	460f      	mov	r7, r1
 801aab4:	4614      	mov	r4, r2
 801aab6:	18d5      	adds	r5, r2, r3
 801aab8:	42ac      	cmp	r4, r5
 801aaba:	d101      	bne.n	801aac0 <__sfputs_r+0x12>
 801aabc:	2000      	movs	r0, #0
 801aabe:	e007      	b.n	801aad0 <__sfputs_r+0x22>
 801aac0:	f814 1b01 	ldrb.w	r1, [r4], #1
 801aac4:	463a      	mov	r2, r7
 801aac6:	4630      	mov	r0, r6
 801aac8:	f7ff ffda 	bl	801aa80 <__sfputc_r>
 801aacc:	1c43      	adds	r3, r0, #1
 801aace:	d1f3      	bne.n	801aab8 <__sfputs_r+0xa>
 801aad0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801aad4 <_vfiprintf_r>:
 801aad4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aad8:	460d      	mov	r5, r1
 801aada:	b09d      	sub	sp, #116	; 0x74
 801aadc:	4614      	mov	r4, r2
 801aade:	4698      	mov	r8, r3
 801aae0:	4606      	mov	r6, r0
 801aae2:	b118      	cbz	r0, 801aaec <_vfiprintf_r+0x18>
 801aae4:	6983      	ldr	r3, [r0, #24]
 801aae6:	b90b      	cbnz	r3, 801aaec <_vfiprintf_r+0x18>
 801aae8:	f7fe fd60 	bl	80195ac <__sinit>
 801aaec:	4b89      	ldr	r3, [pc, #548]	; (801ad14 <_vfiprintf_r+0x240>)
 801aaee:	429d      	cmp	r5, r3
 801aaf0:	d11b      	bne.n	801ab2a <_vfiprintf_r+0x56>
 801aaf2:	6875      	ldr	r5, [r6, #4]
 801aaf4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801aaf6:	07d9      	lsls	r1, r3, #31
 801aaf8:	d405      	bmi.n	801ab06 <_vfiprintf_r+0x32>
 801aafa:	89ab      	ldrh	r3, [r5, #12]
 801aafc:	059a      	lsls	r2, r3, #22
 801aafe:	d402      	bmi.n	801ab06 <_vfiprintf_r+0x32>
 801ab00:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801ab02:	f7ff f976 	bl	8019df2 <__retarget_lock_acquire_recursive>
 801ab06:	89ab      	ldrh	r3, [r5, #12]
 801ab08:	071b      	lsls	r3, r3, #28
 801ab0a:	d501      	bpl.n	801ab10 <_vfiprintf_r+0x3c>
 801ab0c:	692b      	ldr	r3, [r5, #16]
 801ab0e:	b9eb      	cbnz	r3, 801ab4c <_vfiprintf_r+0x78>
 801ab10:	4629      	mov	r1, r5
 801ab12:	4630      	mov	r0, r6
 801ab14:	f000 f9ce 	bl	801aeb4 <__swsetup_r>
 801ab18:	b1c0      	cbz	r0, 801ab4c <_vfiprintf_r+0x78>
 801ab1a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801ab1c:	07dc      	lsls	r4, r3, #31
 801ab1e:	d50e      	bpl.n	801ab3e <_vfiprintf_r+0x6a>
 801ab20:	f04f 30ff 	mov.w	r0, #4294967295
 801ab24:	b01d      	add	sp, #116	; 0x74
 801ab26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ab2a:	4b7b      	ldr	r3, [pc, #492]	; (801ad18 <_vfiprintf_r+0x244>)
 801ab2c:	429d      	cmp	r5, r3
 801ab2e:	d101      	bne.n	801ab34 <_vfiprintf_r+0x60>
 801ab30:	68b5      	ldr	r5, [r6, #8]
 801ab32:	e7df      	b.n	801aaf4 <_vfiprintf_r+0x20>
 801ab34:	4b79      	ldr	r3, [pc, #484]	; (801ad1c <_vfiprintf_r+0x248>)
 801ab36:	429d      	cmp	r5, r3
 801ab38:	bf08      	it	eq
 801ab3a:	68f5      	ldreq	r5, [r6, #12]
 801ab3c:	e7da      	b.n	801aaf4 <_vfiprintf_r+0x20>
 801ab3e:	89ab      	ldrh	r3, [r5, #12]
 801ab40:	0598      	lsls	r0, r3, #22
 801ab42:	d4ed      	bmi.n	801ab20 <_vfiprintf_r+0x4c>
 801ab44:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801ab46:	f7ff f955 	bl	8019df4 <__retarget_lock_release_recursive>
 801ab4a:	e7e9      	b.n	801ab20 <_vfiprintf_r+0x4c>
 801ab4c:	2300      	movs	r3, #0
 801ab4e:	9309      	str	r3, [sp, #36]	; 0x24
 801ab50:	2320      	movs	r3, #32
 801ab52:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801ab56:	f8cd 800c 	str.w	r8, [sp, #12]
 801ab5a:	2330      	movs	r3, #48	; 0x30
 801ab5c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801ad20 <_vfiprintf_r+0x24c>
 801ab60:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801ab64:	f04f 0901 	mov.w	r9, #1
 801ab68:	4623      	mov	r3, r4
 801ab6a:	469a      	mov	sl, r3
 801ab6c:	f813 2b01 	ldrb.w	r2, [r3], #1
 801ab70:	b10a      	cbz	r2, 801ab76 <_vfiprintf_r+0xa2>
 801ab72:	2a25      	cmp	r2, #37	; 0x25
 801ab74:	d1f9      	bne.n	801ab6a <_vfiprintf_r+0x96>
 801ab76:	ebba 0b04 	subs.w	fp, sl, r4
 801ab7a:	d00b      	beq.n	801ab94 <_vfiprintf_r+0xc0>
 801ab7c:	465b      	mov	r3, fp
 801ab7e:	4622      	mov	r2, r4
 801ab80:	4629      	mov	r1, r5
 801ab82:	4630      	mov	r0, r6
 801ab84:	f7ff ff93 	bl	801aaae <__sfputs_r>
 801ab88:	3001      	adds	r0, #1
 801ab8a:	f000 80aa 	beq.w	801ace2 <_vfiprintf_r+0x20e>
 801ab8e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801ab90:	445a      	add	r2, fp
 801ab92:	9209      	str	r2, [sp, #36]	; 0x24
 801ab94:	f89a 3000 	ldrb.w	r3, [sl]
 801ab98:	2b00      	cmp	r3, #0
 801ab9a:	f000 80a2 	beq.w	801ace2 <_vfiprintf_r+0x20e>
 801ab9e:	2300      	movs	r3, #0
 801aba0:	f04f 32ff 	mov.w	r2, #4294967295
 801aba4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801aba8:	f10a 0a01 	add.w	sl, sl, #1
 801abac:	9304      	str	r3, [sp, #16]
 801abae:	9307      	str	r3, [sp, #28]
 801abb0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801abb4:	931a      	str	r3, [sp, #104]	; 0x68
 801abb6:	4654      	mov	r4, sl
 801abb8:	2205      	movs	r2, #5
 801abba:	f814 1b01 	ldrb.w	r1, [r4], #1
 801abbe:	4858      	ldr	r0, [pc, #352]	; (801ad20 <_vfiprintf_r+0x24c>)
 801abc0:	f7e5 fb1e 	bl	8000200 <memchr>
 801abc4:	9a04      	ldr	r2, [sp, #16]
 801abc6:	b9d8      	cbnz	r0, 801ac00 <_vfiprintf_r+0x12c>
 801abc8:	06d1      	lsls	r1, r2, #27
 801abca:	bf44      	itt	mi
 801abcc:	2320      	movmi	r3, #32
 801abce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801abd2:	0713      	lsls	r3, r2, #28
 801abd4:	bf44      	itt	mi
 801abd6:	232b      	movmi	r3, #43	; 0x2b
 801abd8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801abdc:	f89a 3000 	ldrb.w	r3, [sl]
 801abe0:	2b2a      	cmp	r3, #42	; 0x2a
 801abe2:	d015      	beq.n	801ac10 <_vfiprintf_r+0x13c>
 801abe4:	9a07      	ldr	r2, [sp, #28]
 801abe6:	4654      	mov	r4, sl
 801abe8:	2000      	movs	r0, #0
 801abea:	f04f 0c0a 	mov.w	ip, #10
 801abee:	4621      	mov	r1, r4
 801abf0:	f811 3b01 	ldrb.w	r3, [r1], #1
 801abf4:	3b30      	subs	r3, #48	; 0x30
 801abf6:	2b09      	cmp	r3, #9
 801abf8:	d94e      	bls.n	801ac98 <_vfiprintf_r+0x1c4>
 801abfa:	b1b0      	cbz	r0, 801ac2a <_vfiprintf_r+0x156>
 801abfc:	9207      	str	r2, [sp, #28]
 801abfe:	e014      	b.n	801ac2a <_vfiprintf_r+0x156>
 801ac00:	eba0 0308 	sub.w	r3, r0, r8
 801ac04:	fa09 f303 	lsl.w	r3, r9, r3
 801ac08:	4313      	orrs	r3, r2
 801ac0a:	9304      	str	r3, [sp, #16]
 801ac0c:	46a2      	mov	sl, r4
 801ac0e:	e7d2      	b.n	801abb6 <_vfiprintf_r+0xe2>
 801ac10:	9b03      	ldr	r3, [sp, #12]
 801ac12:	1d19      	adds	r1, r3, #4
 801ac14:	681b      	ldr	r3, [r3, #0]
 801ac16:	9103      	str	r1, [sp, #12]
 801ac18:	2b00      	cmp	r3, #0
 801ac1a:	bfbb      	ittet	lt
 801ac1c:	425b      	neglt	r3, r3
 801ac1e:	f042 0202 	orrlt.w	r2, r2, #2
 801ac22:	9307      	strge	r3, [sp, #28]
 801ac24:	9307      	strlt	r3, [sp, #28]
 801ac26:	bfb8      	it	lt
 801ac28:	9204      	strlt	r2, [sp, #16]
 801ac2a:	7823      	ldrb	r3, [r4, #0]
 801ac2c:	2b2e      	cmp	r3, #46	; 0x2e
 801ac2e:	d10c      	bne.n	801ac4a <_vfiprintf_r+0x176>
 801ac30:	7863      	ldrb	r3, [r4, #1]
 801ac32:	2b2a      	cmp	r3, #42	; 0x2a
 801ac34:	d135      	bne.n	801aca2 <_vfiprintf_r+0x1ce>
 801ac36:	9b03      	ldr	r3, [sp, #12]
 801ac38:	1d1a      	adds	r2, r3, #4
 801ac3a:	681b      	ldr	r3, [r3, #0]
 801ac3c:	9203      	str	r2, [sp, #12]
 801ac3e:	2b00      	cmp	r3, #0
 801ac40:	bfb8      	it	lt
 801ac42:	f04f 33ff 	movlt.w	r3, #4294967295
 801ac46:	3402      	adds	r4, #2
 801ac48:	9305      	str	r3, [sp, #20]
 801ac4a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801ad30 <_vfiprintf_r+0x25c>
 801ac4e:	7821      	ldrb	r1, [r4, #0]
 801ac50:	2203      	movs	r2, #3
 801ac52:	4650      	mov	r0, sl
 801ac54:	f7e5 fad4 	bl	8000200 <memchr>
 801ac58:	b140      	cbz	r0, 801ac6c <_vfiprintf_r+0x198>
 801ac5a:	2340      	movs	r3, #64	; 0x40
 801ac5c:	eba0 000a 	sub.w	r0, r0, sl
 801ac60:	fa03 f000 	lsl.w	r0, r3, r0
 801ac64:	9b04      	ldr	r3, [sp, #16]
 801ac66:	4303      	orrs	r3, r0
 801ac68:	3401      	adds	r4, #1
 801ac6a:	9304      	str	r3, [sp, #16]
 801ac6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ac70:	482c      	ldr	r0, [pc, #176]	; (801ad24 <_vfiprintf_r+0x250>)
 801ac72:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801ac76:	2206      	movs	r2, #6
 801ac78:	f7e5 fac2 	bl	8000200 <memchr>
 801ac7c:	2800      	cmp	r0, #0
 801ac7e:	d03f      	beq.n	801ad00 <_vfiprintf_r+0x22c>
 801ac80:	4b29      	ldr	r3, [pc, #164]	; (801ad28 <_vfiprintf_r+0x254>)
 801ac82:	bb1b      	cbnz	r3, 801accc <_vfiprintf_r+0x1f8>
 801ac84:	9b03      	ldr	r3, [sp, #12]
 801ac86:	3307      	adds	r3, #7
 801ac88:	f023 0307 	bic.w	r3, r3, #7
 801ac8c:	3308      	adds	r3, #8
 801ac8e:	9303      	str	r3, [sp, #12]
 801ac90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ac92:	443b      	add	r3, r7
 801ac94:	9309      	str	r3, [sp, #36]	; 0x24
 801ac96:	e767      	b.n	801ab68 <_vfiprintf_r+0x94>
 801ac98:	fb0c 3202 	mla	r2, ip, r2, r3
 801ac9c:	460c      	mov	r4, r1
 801ac9e:	2001      	movs	r0, #1
 801aca0:	e7a5      	b.n	801abee <_vfiprintf_r+0x11a>
 801aca2:	2300      	movs	r3, #0
 801aca4:	3401      	adds	r4, #1
 801aca6:	9305      	str	r3, [sp, #20]
 801aca8:	4619      	mov	r1, r3
 801acaa:	f04f 0c0a 	mov.w	ip, #10
 801acae:	4620      	mov	r0, r4
 801acb0:	f810 2b01 	ldrb.w	r2, [r0], #1
 801acb4:	3a30      	subs	r2, #48	; 0x30
 801acb6:	2a09      	cmp	r2, #9
 801acb8:	d903      	bls.n	801acc2 <_vfiprintf_r+0x1ee>
 801acba:	2b00      	cmp	r3, #0
 801acbc:	d0c5      	beq.n	801ac4a <_vfiprintf_r+0x176>
 801acbe:	9105      	str	r1, [sp, #20]
 801acc0:	e7c3      	b.n	801ac4a <_vfiprintf_r+0x176>
 801acc2:	fb0c 2101 	mla	r1, ip, r1, r2
 801acc6:	4604      	mov	r4, r0
 801acc8:	2301      	movs	r3, #1
 801acca:	e7f0      	b.n	801acae <_vfiprintf_r+0x1da>
 801accc:	ab03      	add	r3, sp, #12
 801acce:	9300      	str	r3, [sp, #0]
 801acd0:	462a      	mov	r2, r5
 801acd2:	4b16      	ldr	r3, [pc, #88]	; (801ad2c <_vfiprintf_r+0x258>)
 801acd4:	a904      	add	r1, sp, #16
 801acd6:	4630      	mov	r0, r6
 801acd8:	f7fc fa00 	bl	80170dc <_printf_float>
 801acdc:	4607      	mov	r7, r0
 801acde:	1c78      	adds	r0, r7, #1
 801ace0:	d1d6      	bne.n	801ac90 <_vfiprintf_r+0x1bc>
 801ace2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801ace4:	07d9      	lsls	r1, r3, #31
 801ace6:	d405      	bmi.n	801acf4 <_vfiprintf_r+0x220>
 801ace8:	89ab      	ldrh	r3, [r5, #12]
 801acea:	059a      	lsls	r2, r3, #22
 801acec:	d402      	bmi.n	801acf4 <_vfiprintf_r+0x220>
 801acee:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801acf0:	f7ff f880 	bl	8019df4 <__retarget_lock_release_recursive>
 801acf4:	89ab      	ldrh	r3, [r5, #12]
 801acf6:	065b      	lsls	r3, r3, #25
 801acf8:	f53f af12 	bmi.w	801ab20 <_vfiprintf_r+0x4c>
 801acfc:	9809      	ldr	r0, [sp, #36]	; 0x24
 801acfe:	e711      	b.n	801ab24 <_vfiprintf_r+0x50>
 801ad00:	ab03      	add	r3, sp, #12
 801ad02:	9300      	str	r3, [sp, #0]
 801ad04:	462a      	mov	r2, r5
 801ad06:	4b09      	ldr	r3, [pc, #36]	; (801ad2c <_vfiprintf_r+0x258>)
 801ad08:	a904      	add	r1, sp, #16
 801ad0a:	4630      	mov	r0, r6
 801ad0c:	f7fc fc8a 	bl	8017624 <_printf_i>
 801ad10:	e7e4      	b.n	801acdc <_vfiprintf_r+0x208>
 801ad12:	bf00      	nop
 801ad14:	0801fdbc 	.word	0x0801fdbc
 801ad18:	0801fddc 	.word	0x0801fddc
 801ad1c:	0801fd9c 	.word	0x0801fd9c
 801ad20:	0801ffdc 	.word	0x0801ffdc
 801ad24:	0801ffe6 	.word	0x0801ffe6
 801ad28:	080170dd 	.word	0x080170dd
 801ad2c:	0801aaaf 	.word	0x0801aaaf
 801ad30:	0801ffe2 	.word	0x0801ffe2
 801ad34:	00000000 	.word	0x00000000

0801ad38 <nan>:
 801ad38:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801ad40 <nan+0x8>
 801ad3c:	4770      	bx	lr
 801ad3e:	bf00      	nop
 801ad40:	00000000 	.word	0x00000000
 801ad44:	7ff80000 	.word	0x7ff80000

0801ad48 <__sread>:
 801ad48:	b510      	push	{r4, lr}
 801ad4a:	460c      	mov	r4, r1
 801ad4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ad50:	f000 fa94 	bl	801b27c <_read_r>
 801ad54:	2800      	cmp	r0, #0
 801ad56:	bfab      	itete	ge
 801ad58:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801ad5a:	89a3      	ldrhlt	r3, [r4, #12]
 801ad5c:	181b      	addge	r3, r3, r0
 801ad5e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801ad62:	bfac      	ite	ge
 801ad64:	6563      	strge	r3, [r4, #84]	; 0x54
 801ad66:	81a3      	strhlt	r3, [r4, #12]
 801ad68:	bd10      	pop	{r4, pc}

0801ad6a <__swrite>:
 801ad6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ad6e:	461f      	mov	r7, r3
 801ad70:	898b      	ldrh	r3, [r1, #12]
 801ad72:	05db      	lsls	r3, r3, #23
 801ad74:	4605      	mov	r5, r0
 801ad76:	460c      	mov	r4, r1
 801ad78:	4616      	mov	r6, r2
 801ad7a:	d505      	bpl.n	801ad88 <__swrite+0x1e>
 801ad7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ad80:	2302      	movs	r3, #2
 801ad82:	2200      	movs	r2, #0
 801ad84:	f000 f9de 	bl	801b144 <_lseek_r>
 801ad88:	89a3      	ldrh	r3, [r4, #12]
 801ad8a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801ad8e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801ad92:	81a3      	strh	r3, [r4, #12]
 801ad94:	4632      	mov	r2, r6
 801ad96:	463b      	mov	r3, r7
 801ad98:	4628      	mov	r0, r5
 801ad9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801ad9e:	f000 b877 	b.w	801ae90 <_write_r>

0801ada2 <__sseek>:
 801ada2:	b510      	push	{r4, lr}
 801ada4:	460c      	mov	r4, r1
 801ada6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801adaa:	f000 f9cb 	bl	801b144 <_lseek_r>
 801adae:	1c43      	adds	r3, r0, #1
 801adb0:	89a3      	ldrh	r3, [r4, #12]
 801adb2:	bf15      	itete	ne
 801adb4:	6560      	strne	r0, [r4, #84]	; 0x54
 801adb6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801adba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801adbe:	81a3      	strheq	r3, [r4, #12]
 801adc0:	bf18      	it	ne
 801adc2:	81a3      	strhne	r3, [r4, #12]
 801adc4:	bd10      	pop	{r4, pc}

0801adc6 <__sclose>:
 801adc6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801adca:	f000 b8e9 	b.w	801afa0 <_close_r>
	...

0801add0 <__swbuf_r>:
 801add0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801add2:	460e      	mov	r6, r1
 801add4:	4614      	mov	r4, r2
 801add6:	4605      	mov	r5, r0
 801add8:	b118      	cbz	r0, 801ade2 <__swbuf_r+0x12>
 801adda:	6983      	ldr	r3, [r0, #24]
 801addc:	b90b      	cbnz	r3, 801ade2 <__swbuf_r+0x12>
 801adde:	f7fe fbe5 	bl	80195ac <__sinit>
 801ade2:	4b21      	ldr	r3, [pc, #132]	; (801ae68 <__swbuf_r+0x98>)
 801ade4:	429c      	cmp	r4, r3
 801ade6:	d12b      	bne.n	801ae40 <__swbuf_r+0x70>
 801ade8:	686c      	ldr	r4, [r5, #4]
 801adea:	69a3      	ldr	r3, [r4, #24]
 801adec:	60a3      	str	r3, [r4, #8]
 801adee:	89a3      	ldrh	r3, [r4, #12]
 801adf0:	071a      	lsls	r2, r3, #28
 801adf2:	d52f      	bpl.n	801ae54 <__swbuf_r+0x84>
 801adf4:	6923      	ldr	r3, [r4, #16]
 801adf6:	b36b      	cbz	r3, 801ae54 <__swbuf_r+0x84>
 801adf8:	6923      	ldr	r3, [r4, #16]
 801adfa:	6820      	ldr	r0, [r4, #0]
 801adfc:	1ac0      	subs	r0, r0, r3
 801adfe:	6963      	ldr	r3, [r4, #20]
 801ae00:	b2f6      	uxtb	r6, r6
 801ae02:	4283      	cmp	r3, r0
 801ae04:	4637      	mov	r7, r6
 801ae06:	dc04      	bgt.n	801ae12 <__swbuf_r+0x42>
 801ae08:	4621      	mov	r1, r4
 801ae0a:	4628      	mov	r0, r5
 801ae0c:	f000 f95e 	bl	801b0cc <_fflush_r>
 801ae10:	bb30      	cbnz	r0, 801ae60 <__swbuf_r+0x90>
 801ae12:	68a3      	ldr	r3, [r4, #8]
 801ae14:	3b01      	subs	r3, #1
 801ae16:	60a3      	str	r3, [r4, #8]
 801ae18:	6823      	ldr	r3, [r4, #0]
 801ae1a:	1c5a      	adds	r2, r3, #1
 801ae1c:	6022      	str	r2, [r4, #0]
 801ae1e:	701e      	strb	r6, [r3, #0]
 801ae20:	6963      	ldr	r3, [r4, #20]
 801ae22:	3001      	adds	r0, #1
 801ae24:	4283      	cmp	r3, r0
 801ae26:	d004      	beq.n	801ae32 <__swbuf_r+0x62>
 801ae28:	89a3      	ldrh	r3, [r4, #12]
 801ae2a:	07db      	lsls	r3, r3, #31
 801ae2c:	d506      	bpl.n	801ae3c <__swbuf_r+0x6c>
 801ae2e:	2e0a      	cmp	r6, #10
 801ae30:	d104      	bne.n	801ae3c <__swbuf_r+0x6c>
 801ae32:	4621      	mov	r1, r4
 801ae34:	4628      	mov	r0, r5
 801ae36:	f000 f949 	bl	801b0cc <_fflush_r>
 801ae3a:	b988      	cbnz	r0, 801ae60 <__swbuf_r+0x90>
 801ae3c:	4638      	mov	r0, r7
 801ae3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ae40:	4b0a      	ldr	r3, [pc, #40]	; (801ae6c <__swbuf_r+0x9c>)
 801ae42:	429c      	cmp	r4, r3
 801ae44:	d101      	bne.n	801ae4a <__swbuf_r+0x7a>
 801ae46:	68ac      	ldr	r4, [r5, #8]
 801ae48:	e7cf      	b.n	801adea <__swbuf_r+0x1a>
 801ae4a:	4b09      	ldr	r3, [pc, #36]	; (801ae70 <__swbuf_r+0xa0>)
 801ae4c:	429c      	cmp	r4, r3
 801ae4e:	bf08      	it	eq
 801ae50:	68ec      	ldreq	r4, [r5, #12]
 801ae52:	e7ca      	b.n	801adea <__swbuf_r+0x1a>
 801ae54:	4621      	mov	r1, r4
 801ae56:	4628      	mov	r0, r5
 801ae58:	f000 f82c 	bl	801aeb4 <__swsetup_r>
 801ae5c:	2800      	cmp	r0, #0
 801ae5e:	d0cb      	beq.n	801adf8 <__swbuf_r+0x28>
 801ae60:	f04f 37ff 	mov.w	r7, #4294967295
 801ae64:	e7ea      	b.n	801ae3c <__swbuf_r+0x6c>
 801ae66:	bf00      	nop
 801ae68:	0801fdbc 	.word	0x0801fdbc
 801ae6c:	0801fddc 	.word	0x0801fddc
 801ae70:	0801fd9c 	.word	0x0801fd9c

0801ae74 <__ascii_wctomb>:
 801ae74:	b149      	cbz	r1, 801ae8a <__ascii_wctomb+0x16>
 801ae76:	2aff      	cmp	r2, #255	; 0xff
 801ae78:	bf85      	ittet	hi
 801ae7a:	238a      	movhi	r3, #138	; 0x8a
 801ae7c:	6003      	strhi	r3, [r0, #0]
 801ae7e:	700a      	strbls	r2, [r1, #0]
 801ae80:	f04f 30ff 	movhi.w	r0, #4294967295
 801ae84:	bf98      	it	ls
 801ae86:	2001      	movls	r0, #1
 801ae88:	4770      	bx	lr
 801ae8a:	4608      	mov	r0, r1
 801ae8c:	4770      	bx	lr
	...

0801ae90 <_write_r>:
 801ae90:	b538      	push	{r3, r4, r5, lr}
 801ae92:	4d07      	ldr	r5, [pc, #28]	; (801aeb0 <_write_r+0x20>)
 801ae94:	4604      	mov	r4, r0
 801ae96:	4608      	mov	r0, r1
 801ae98:	4611      	mov	r1, r2
 801ae9a:	2200      	movs	r2, #0
 801ae9c:	602a      	str	r2, [r5, #0]
 801ae9e:	461a      	mov	r2, r3
 801aea0:	f7e9 ff11 	bl	8004cc6 <_write>
 801aea4:	1c43      	adds	r3, r0, #1
 801aea6:	d102      	bne.n	801aeae <_write_r+0x1e>
 801aea8:	682b      	ldr	r3, [r5, #0]
 801aeaa:	b103      	cbz	r3, 801aeae <_write_r+0x1e>
 801aeac:	6023      	str	r3, [r4, #0]
 801aeae:	bd38      	pop	{r3, r4, r5, pc}
 801aeb0:	20006e80 	.word	0x20006e80

0801aeb4 <__swsetup_r>:
 801aeb4:	4b32      	ldr	r3, [pc, #200]	; (801af80 <__swsetup_r+0xcc>)
 801aeb6:	b570      	push	{r4, r5, r6, lr}
 801aeb8:	681d      	ldr	r5, [r3, #0]
 801aeba:	4606      	mov	r6, r0
 801aebc:	460c      	mov	r4, r1
 801aebe:	b125      	cbz	r5, 801aeca <__swsetup_r+0x16>
 801aec0:	69ab      	ldr	r3, [r5, #24]
 801aec2:	b913      	cbnz	r3, 801aeca <__swsetup_r+0x16>
 801aec4:	4628      	mov	r0, r5
 801aec6:	f7fe fb71 	bl	80195ac <__sinit>
 801aeca:	4b2e      	ldr	r3, [pc, #184]	; (801af84 <__swsetup_r+0xd0>)
 801aecc:	429c      	cmp	r4, r3
 801aece:	d10f      	bne.n	801aef0 <__swsetup_r+0x3c>
 801aed0:	686c      	ldr	r4, [r5, #4]
 801aed2:	89a3      	ldrh	r3, [r4, #12]
 801aed4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801aed8:	0719      	lsls	r1, r3, #28
 801aeda:	d42c      	bmi.n	801af36 <__swsetup_r+0x82>
 801aedc:	06dd      	lsls	r5, r3, #27
 801aede:	d411      	bmi.n	801af04 <__swsetup_r+0x50>
 801aee0:	2309      	movs	r3, #9
 801aee2:	6033      	str	r3, [r6, #0]
 801aee4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801aee8:	81a3      	strh	r3, [r4, #12]
 801aeea:	f04f 30ff 	mov.w	r0, #4294967295
 801aeee:	e03e      	b.n	801af6e <__swsetup_r+0xba>
 801aef0:	4b25      	ldr	r3, [pc, #148]	; (801af88 <__swsetup_r+0xd4>)
 801aef2:	429c      	cmp	r4, r3
 801aef4:	d101      	bne.n	801aefa <__swsetup_r+0x46>
 801aef6:	68ac      	ldr	r4, [r5, #8]
 801aef8:	e7eb      	b.n	801aed2 <__swsetup_r+0x1e>
 801aefa:	4b24      	ldr	r3, [pc, #144]	; (801af8c <__swsetup_r+0xd8>)
 801aefc:	429c      	cmp	r4, r3
 801aefe:	bf08      	it	eq
 801af00:	68ec      	ldreq	r4, [r5, #12]
 801af02:	e7e6      	b.n	801aed2 <__swsetup_r+0x1e>
 801af04:	0758      	lsls	r0, r3, #29
 801af06:	d512      	bpl.n	801af2e <__swsetup_r+0x7a>
 801af08:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801af0a:	b141      	cbz	r1, 801af1e <__swsetup_r+0x6a>
 801af0c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801af10:	4299      	cmp	r1, r3
 801af12:	d002      	beq.n	801af1a <__swsetup_r+0x66>
 801af14:	4630      	mov	r0, r6
 801af16:	f7fb ff97 	bl	8016e48 <_free_r>
 801af1a:	2300      	movs	r3, #0
 801af1c:	6363      	str	r3, [r4, #52]	; 0x34
 801af1e:	89a3      	ldrh	r3, [r4, #12]
 801af20:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801af24:	81a3      	strh	r3, [r4, #12]
 801af26:	2300      	movs	r3, #0
 801af28:	6063      	str	r3, [r4, #4]
 801af2a:	6923      	ldr	r3, [r4, #16]
 801af2c:	6023      	str	r3, [r4, #0]
 801af2e:	89a3      	ldrh	r3, [r4, #12]
 801af30:	f043 0308 	orr.w	r3, r3, #8
 801af34:	81a3      	strh	r3, [r4, #12]
 801af36:	6923      	ldr	r3, [r4, #16]
 801af38:	b94b      	cbnz	r3, 801af4e <__swsetup_r+0x9a>
 801af3a:	89a3      	ldrh	r3, [r4, #12]
 801af3c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801af40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801af44:	d003      	beq.n	801af4e <__swsetup_r+0x9a>
 801af46:	4621      	mov	r1, r4
 801af48:	4630      	mov	r0, r6
 801af4a:	f000 f931 	bl	801b1b0 <__smakebuf_r>
 801af4e:	89a0      	ldrh	r0, [r4, #12]
 801af50:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801af54:	f010 0301 	ands.w	r3, r0, #1
 801af58:	d00a      	beq.n	801af70 <__swsetup_r+0xbc>
 801af5a:	2300      	movs	r3, #0
 801af5c:	60a3      	str	r3, [r4, #8]
 801af5e:	6963      	ldr	r3, [r4, #20]
 801af60:	425b      	negs	r3, r3
 801af62:	61a3      	str	r3, [r4, #24]
 801af64:	6923      	ldr	r3, [r4, #16]
 801af66:	b943      	cbnz	r3, 801af7a <__swsetup_r+0xc6>
 801af68:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801af6c:	d1ba      	bne.n	801aee4 <__swsetup_r+0x30>
 801af6e:	bd70      	pop	{r4, r5, r6, pc}
 801af70:	0781      	lsls	r1, r0, #30
 801af72:	bf58      	it	pl
 801af74:	6963      	ldrpl	r3, [r4, #20]
 801af76:	60a3      	str	r3, [r4, #8]
 801af78:	e7f4      	b.n	801af64 <__swsetup_r+0xb0>
 801af7a:	2000      	movs	r0, #0
 801af7c:	e7f7      	b.n	801af6e <__swsetup_r+0xba>
 801af7e:	bf00      	nop
 801af80:	20000074 	.word	0x20000074
 801af84:	0801fdbc 	.word	0x0801fdbc
 801af88:	0801fddc 	.word	0x0801fddc
 801af8c:	0801fd9c 	.word	0x0801fd9c

0801af90 <abort>:
 801af90:	b508      	push	{r3, lr}
 801af92:	2006      	movs	r0, #6
 801af94:	f000 f9ac 	bl	801b2f0 <raise>
 801af98:	2001      	movs	r0, #1
 801af9a:	f7e9 fe6d 	bl	8004c78 <_exit>
	...

0801afa0 <_close_r>:
 801afa0:	b538      	push	{r3, r4, r5, lr}
 801afa2:	4d06      	ldr	r5, [pc, #24]	; (801afbc <_close_r+0x1c>)
 801afa4:	2300      	movs	r3, #0
 801afa6:	4604      	mov	r4, r0
 801afa8:	4608      	mov	r0, r1
 801afaa:	602b      	str	r3, [r5, #0]
 801afac:	f7e9 fea7 	bl	8004cfe <_close>
 801afb0:	1c43      	adds	r3, r0, #1
 801afb2:	d102      	bne.n	801afba <_close_r+0x1a>
 801afb4:	682b      	ldr	r3, [r5, #0]
 801afb6:	b103      	cbz	r3, 801afba <_close_r+0x1a>
 801afb8:	6023      	str	r3, [r4, #0]
 801afba:	bd38      	pop	{r3, r4, r5, pc}
 801afbc:	20006e80 	.word	0x20006e80

0801afc0 <__sflush_r>:
 801afc0:	898a      	ldrh	r2, [r1, #12]
 801afc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801afc6:	4605      	mov	r5, r0
 801afc8:	0710      	lsls	r0, r2, #28
 801afca:	460c      	mov	r4, r1
 801afcc:	d458      	bmi.n	801b080 <__sflush_r+0xc0>
 801afce:	684b      	ldr	r3, [r1, #4]
 801afd0:	2b00      	cmp	r3, #0
 801afd2:	dc05      	bgt.n	801afe0 <__sflush_r+0x20>
 801afd4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801afd6:	2b00      	cmp	r3, #0
 801afd8:	dc02      	bgt.n	801afe0 <__sflush_r+0x20>
 801afda:	2000      	movs	r0, #0
 801afdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801afe0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801afe2:	2e00      	cmp	r6, #0
 801afe4:	d0f9      	beq.n	801afda <__sflush_r+0x1a>
 801afe6:	2300      	movs	r3, #0
 801afe8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801afec:	682f      	ldr	r7, [r5, #0]
 801afee:	602b      	str	r3, [r5, #0]
 801aff0:	d032      	beq.n	801b058 <__sflush_r+0x98>
 801aff2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801aff4:	89a3      	ldrh	r3, [r4, #12]
 801aff6:	075a      	lsls	r2, r3, #29
 801aff8:	d505      	bpl.n	801b006 <__sflush_r+0x46>
 801affa:	6863      	ldr	r3, [r4, #4]
 801affc:	1ac0      	subs	r0, r0, r3
 801affe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801b000:	b10b      	cbz	r3, 801b006 <__sflush_r+0x46>
 801b002:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801b004:	1ac0      	subs	r0, r0, r3
 801b006:	2300      	movs	r3, #0
 801b008:	4602      	mov	r2, r0
 801b00a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801b00c:	6a21      	ldr	r1, [r4, #32]
 801b00e:	4628      	mov	r0, r5
 801b010:	47b0      	blx	r6
 801b012:	1c43      	adds	r3, r0, #1
 801b014:	89a3      	ldrh	r3, [r4, #12]
 801b016:	d106      	bne.n	801b026 <__sflush_r+0x66>
 801b018:	6829      	ldr	r1, [r5, #0]
 801b01a:	291d      	cmp	r1, #29
 801b01c:	d82c      	bhi.n	801b078 <__sflush_r+0xb8>
 801b01e:	4a2a      	ldr	r2, [pc, #168]	; (801b0c8 <__sflush_r+0x108>)
 801b020:	40ca      	lsrs	r2, r1
 801b022:	07d6      	lsls	r6, r2, #31
 801b024:	d528      	bpl.n	801b078 <__sflush_r+0xb8>
 801b026:	2200      	movs	r2, #0
 801b028:	6062      	str	r2, [r4, #4]
 801b02a:	04d9      	lsls	r1, r3, #19
 801b02c:	6922      	ldr	r2, [r4, #16]
 801b02e:	6022      	str	r2, [r4, #0]
 801b030:	d504      	bpl.n	801b03c <__sflush_r+0x7c>
 801b032:	1c42      	adds	r2, r0, #1
 801b034:	d101      	bne.n	801b03a <__sflush_r+0x7a>
 801b036:	682b      	ldr	r3, [r5, #0]
 801b038:	b903      	cbnz	r3, 801b03c <__sflush_r+0x7c>
 801b03a:	6560      	str	r0, [r4, #84]	; 0x54
 801b03c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801b03e:	602f      	str	r7, [r5, #0]
 801b040:	2900      	cmp	r1, #0
 801b042:	d0ca      	beq.n	801afda <__sflush_r+0x1a>
 801b044:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801b048:	4299      	cmp	r1, r3
 801b04a:	d002      	beq.n	801b052 <__sflush_r+0x92>
 801b04c:	4628      	mov	r0, r5
 801b04e:	f7fb fefb 	bl	8016e48 <_free_r>
 801b052:	2000      	movs	r0, #0
 801b054:	6360      	str	r0, [r4, #52]	; 0x34
 801b056:	e7c1      	b.n	801afdc <__sflush_r+0x1c>
 801b058:	6a21      	ldr	r1, [r4, #32]
 801b05a:	2301      	movs	r3, #1
 801b05c:	4628      	mov	r0, r5
 801b05e:	47b0      	blx	r6
 801b060:	1c41      	adds	r1, r0, #1
 801b062:	d1c7      	bne.n	801aff4 <__sflush_r+0x34>
 801b064:	682b      	ldr	r3, [r5, #0]
 801b066:	2b00      	cmp	r3, #0
 801b068:	d0c4      	beq.n	801aff4 <__sflush_r+0x34>
 801b06a:	2b1d      	cmp	r3, #29
 801b06c:	d001      	beq.n	801b072 <__sflush_r+0xb2>
 801b06e:	2b16      	cmp	r3, #22
 801b070:	d101      	bne.n	801b076 <__sflush_r+0xb6>
 801b072:	602f      	str	r7, [r5, #0]
 801b074:	e7b1      	b.n	801afda <__sflush_r+0x1a>
 801b076:	89a3      	ldrh	r3, [r4, #12]
 801b078:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b07c:	81a3      	strh	r3, [r4, #12]
 801b07e:	e7ad      	b.n	801afdc <__sflush_r+0x1c>
 801b080:	690f      	ldr	r7, [r1, #16]
 801b082:	2f00      	cmp	r7, #0
 801b084:	d0a9      	beq.n	801afda <__sflush_r+0x1a>
 801b086:	0793      	lsls	r3, r2, #30
 801b088:	680e      	ldr	r6, [r1, #0]
 801b08a:	bf08      	it	eq
 801b08c:	694b      	ldreq	r3, [r1, #20]
 801b08e:	600f      	str	r7, [r1, #0]
 801b090:	bf18      	it	ne
 801b092:	2300      	movne	r3, #0
 801b094:	eba6 0807 	sub.w	r8, r6, r7
 801b098:	608b      	str	r3, [r1, #8]
 801b09a:	f1b8 0f00 	cmp.w	r8, #0
 801b09e:	dd9c      	ble.n	801afda <__sflush_r+0x1a>
 801b0a0:	6a21      	ldr	r1, [r4, #32]
 801b0a2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801b0a4:	4643      	mov	r3, r8
 801b0a6:	463a      	mov	r2, r7
 801b0a8:	4628      	mov	r0, r5
 801b0aa:	47b0      	blx	r6
 801b0ac:	2800      	cmp	r0, #0
 801b0ae:	dc06      	bgt.n	801b0be <__sflush_r+0xfe>
 801b0b0:	89a3      	ldrh	r3, [r4, #12]
 801b0b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b0b6:	81a3      	strh	r3, [r4, #12]
 801b0b8:	f04f 30ff 	mov.w	r0, #4294967295
 801b0bc:	e78e      	b.n	801afdc <__sflush_r+0x1c>
 801b0be:	4407      	add	r7, r0
 801b0c0:	eba8 0800 	sub.w	r8, r8, r0
 801b0c4:	e7e9      	b.n	801b09a <__sflush_r+0xda>
 801b0c6:	bf00      	nop
 801b0c8:	20400001 	.word	0x20400001

0801b0cc <_fflush_r>:
 801b0cc:	b538      	push	{r3, r4, r5, lr}
 801b0ce:	690b      	ldr	r3, [r1, #16]
 801b0d0:	4605      	mov	r5, r0
 801b0d2:	460c      	mov	r4, r1
 801b0d4:	b913      	cbnz	r3, 801b0dc <_fflush_r+0x10>
 801b0d6:	2500      	movs	r5, #0
 801b0d8:	4628      	mov	r0, r5
 801b0da:	bd38      	pop	{r3, r4, r5, pc}
 801b0dc:	b118      	cbz	r0, 801b0e6 <_fflush_r+0x1a>
 801b0de:	6983      	ldr	r3, [r0, #24]
 801b0e0:	b90b      	cbnz	r3, 801b0e6 <_fflush_r+0x1a>
 801b0e2:	f7fe fa63 	bl	80195ac <__sinit>
 801b0e6:	4b14      	ldr	r3, [pc, #80]	; (801b138 <_fflush_r+0x6c>)
 801b0e8:	429c      	cmp	r4, r3
 801b0ea:	d11b      	bne.n	801b124 <_fflush_r+0x58>
 801b0ec:	686c      	ldr	r4, [r5, #4]
 801b0ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b0f2:	2b00      	cmp	r3, #0
 801b0f4:	d0ef      	beq.n	801b0d6 <_fflush_r+0xa>
 801b0f6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801b0f8:	07d0      	lsls	r0, r2, #31
 801b0fa:	d404      	bmi.n	801b106 <_fflush_r+0x3a>
 801b0fc:	0599      	lsls	r1, r3, #22
 801b0fe:	d402      	bmi.n	801b106 <_fflush_r+0x3a>
 801b100:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b102:	f7fe fe76 	bl	8019df2 <__retarget_lock_acquire_recursive>
 801b106:	4628      	mov	r0, r5
 801b108:	4621      	mov	r1, r4
 801b10a:	f7ff ff59 	bl	801afc0 <__sflush_r>
 801b10e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801b110:	07da      	lsls	r2, r3, #31
 801b112:	4605      	mov	r5, r0
 801b114:	d4e0      	bmi.n	801b0d8 <_fflush_r+0xc>
 801b116:	89a3      	ldrh	r3, [r4, #12]
 801b118:	059b      	lsls	r3, r3, #22
 801b11a:	d4dd      	bmi.n	801b0d8 <_fflush_r+0xc>
 801b11c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b11e:	f7fe fe69 	bl	8019df4 <__retarget_lock_release_recursive>
 801b122:	e7d9      	b.n	801b0d8 <_fflush_r+0xc>
 801b124:	4b05      	ldr	r3, [pc, #20]	; (801b13c <_fflush_r+0x70>)
 801b126:	429c      	cmp	r4, r3
 801b128:	d101      	bne.n	801b12e <_fflush_r+0x62>
 801b12a:	68ac      	ldr	r4, [r5, #8]
 801b12c:	e7df      	b.n	801b0ee <_fflush_r+0x22>
 801b12e:	4b04      	ldr	r3, [pc, #16]	; (801b140 <_fflush_r+0x74>)
 801b130:	429c      	cmp	r4, r3
 801b132:	bf08      	it	eq
 801b134:	68ec      	ldreq	r4, [r5, #12]
 801b136:	e7da      	b.n	801b0ee <_fflush_r+0x22>
 801b138:	0801fdbc 	.word	0x0801fdbc
 801b13c:	0801fddc 	.word	0x0801fddc
 801b140:	0801fd9c 	.word	0x0801fd9c

0801b144 <_lseek_r>:
 801b144:	b538      	push	{r3, r4, r5, lr}
 801b146:	4d07      	ldr	r5, [pc, #28]	; (801b164 <_lseek_r+0x20>)
 801b148:	4604      	mov	r4, r0
 801b14a:	4608      	mov	r0, r1
 801b14c:	4611      	mov	r1, r2
 801b14e:	2200      	movs	r2, #0
 801b150:	602a      	str	r2, [r5, #0]
 801b152:	461a      	mov	r2, r3
 801b154:	f7e9 fdfa 	bl	8004d4c <_lseek>
 801b158:	1c43      	adds	r3, r0, #1
 801b15a:	d102      	bne.n	801b162 <_lseek_r+0x1e>
 801b15c:	682b      	ldr	r3, [r5, #0]
 801b15e:	b103      	cbz	r3, 801b162 <_lseek_r+0x1e>
 801b160:	6023      	str	r3, [r4, #0]
 801b162:	bd38      	pop	{r3, r4, r5, pc}
 801b164:	20006e80 	.word	0x20006e80

0801b168 <__swhatbuf_r>:
 801b168:	b570      	push	{r4, r5, r6, lr}
 801b16a:	460e      	mov	r6, r1
 801b16c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b170:	2900      	cmp	r1, #0
 801b172:	b096      	sub	sp, #88	; 0x58
 801b174:	4614      	mov	r4, r2
 801b176:	461d      	mov	r5, r3
 801b178:	da07      	bge.n	801b18a <__swhatbuf_r+0x22>
 801b17a:	2300      	movs	r3, #0
 801b17c:	602b      	str	r3, [r5, #0]
 801b17e:	89b3      	ldrh	r3, [r6, #12]
 801b180:	061a      	lsls	r2, r3, #24
 801b182:	d410      	bmi.n	801b1a6 <__swhatbuf_r+0x3e>
 801b184:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801b188:	e00e      	b.n	801b1a8 <__swhatbuf_r+0x40>
 801b18a:	466a      	mov	r2, sp
 801b18c:	f000 f8cc 	bl	801b328 <_fstat_r>
 801b190:	2800      	cmp	r0, #0
 801b192:	dbf2      	blt.n	801b17a <__swhatbuf_r+0x12>
 801b194:	9a01      	ldr	r2, [sp, #4]
 801b196:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801b19a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801b19e:	425a      	negs	r2, r3
 801b1a0:	415a      	adcs	r2, r3
 801b1a2:	602a      	str	r2, [r5, #0]
 801b1a4:	e7ee      	b.n	801b184 <__swhatbuf_r+0x1c>
 801b1a6:	2340      	movs	r3, #64	; 0x40
 801b1a8:	2000      	movs	r0, #0
 801b1aa:	6023      	str	r3, [r4, #0]
 801b1ac:	b016      	add	sp, #88	; 0x58
 801b1ae:	bd70      	pop	{r4, r5, r6, pc}

0801b1b0 <__smakebuf_r>:
 801b1b0:	898b      	ldrh	r3, [r1, #12]
 801b1b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801b1b4:	079d      	lsls	r5, r3, #30
 801b1b6:	4606      	mov	r6, r0
 801b1b8:	460c      	mov	r4, r1
 801b1ba:	d507      	bpl.n	801b1cc <__smakebuf_r+0x1c>
 801b1bc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801b1c0:	6023      	str	r3, [r4, #0]
 801b1c2:	6123      	str	r3, [r4, #16]
 801b1c4:	2301      	movs	r3, #1
 801b1c6:	6163      	str	r3, [r4, #20]
 801b1c8:	b002      	add	sp, #8
 801b1ca:	bd70      	pop	{r4, r5, r6, pc}
 801b1cc:	ab01      	add	r3, sp, #4
 801b1ce:	466a      	mov	r2, sp
 801b1d0:	f7ff ffca 	bl	801b168 <__swhatbuf_r>
 801b1d4:	9900      	ldr	r1, [sp, #0]
 801b1d6:	4605      	mov	r5, r0
 801b1d8:	4630      	mov	r0, r6
 801b1da:	f7fb fe85 	bl	8016ee8 <_malloc_r>
 801b1de:	b948      	cbnz	r0, 801b1f4 <__smakebuf_r+0x44>
 801b1e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b1e4:	059a      	lsls	r2, r3, #22
 801b1e6:	d4ef      	bmi.n	801b1c8 <__smakebuf_r+0x18>
 801b1e8:	f023 0303 	bic.w	r3, r3, #3
 801b1ec:	f043 0302 	orr.w	r3, r3, #2
 801b1f0:	81a3      	strh	r3, [r4, #12]
 801b1f2:	e7e3      	b.n	801b1bc <__smakebuf_r+0xc>
 801b1f4:	4b0d      	ldr	r3, [pc, #52]	; (801b22c <__smakebuf_r+0x7c>)
 801b1f6:	62b3      	str	r3, [r6, #40]	; 0x28
 801b1f8:	89a3      	ldrh	r3, [r4, #12]
 801b1fa:	6020      	str	r0, [r4, #0]
 801b1fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801b200:	81a3      	strh	r3, [r4, #12]
 801b202:	9b00      	ldr	r3, [sp, #0]
 801b204:	6163      	str	r3, [r4, #20]
 801b206:	9b01      	ldr	r3, [sp, #4]
 801b208:	6120      	str	r0, [r4, #16]
 801b20a:	b15b      	cbz	r3, 801b224 <__smakebuf_r+0x74>
 801b20c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801b210:	4630      	mov	r0, r6
 801b212:	f000 f89b 	bl	801b34c <_isatty_r>
 801b216:	b128      	cbz	r0, 801b224 <__smakebuf_r+0x74>
 801b218:	89a3      	ldrh	r3, [r4, #12]
 801b21a:	f023 0303 	bic.w	r3, r3, #3
 801b21e:	f043 0301 	orr.w	r3, r3, #1
 801b222:	81a3      	strh	r3, [r4, #12]
 801b224:	89a0      	ldrh	r0, [r4, #12]
 801b226:	4305      	orrs	r5, r0
 801b228:	81a5      	strh	r5, [r4, #12]
 801b22a:	e7cd      	b.n	801b1c8 <__smakebuf_r+0x18>
 801b22c:	08019545 	.word	0x08019545

0801b230 <_realloc_r>:
 801b230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b232:	4607      	mov	r7, r0
 801b234:	4614      	mov	r4, r2
 801b236:	460e      	mov	r6, r1
 801b238:	b921      	cbnz	r1, 801b244 <_realloc_r+0x14>
 801b23a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801b23e:	4611      	mov	r1, r2
 801b240:	f7fb be52 	b.w	8016ee8 <_malloc_r>
 801b244:	b922      	cbnz	r2, 801b250 <_realloc_r+0x20>
 801b246:	f7fb fdff 	bl	8016e48 <_free_r>
 801b24a:	4625      	mov	r5, r4
 801b24c:	4628      	mov	r0, r5
 801b24e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b250:	f000 f88c 	bl	801b36c <_malloc_usable_size_r>
 801b254:	42a0      	cmp	r0, r4
 801b256:	d20f      	bcs.n	801b278 <_realloc_r+0x48>
 801b258:	4621      	mov	r1, r4
 801b25a:	4638      	mov	r0, r7
 801b25c:	f7fb fe44 	bl	8016ee8 <_malloc_r>
 801b260:	4605      	mov	r5, r0
 801b262:	2800      	cmp	r0, #0
 801b264:	d0f2      	beq.n	801b24c <_realloc_r+0x1c>
 801b266:	4631      	mov	r1, r6
 801b268:	4622      	mov	r2, r4
 801b26a:	f7fb fdbd 	bl	8016de8 <memcpy>
 801b26e:	4631      	mov	r1, r6
 801b270:	4638      	mov	r0, r7
 801b272:	f7fb fde9 	bl	8016e48 <_free_r>
 801b276:	e7e9      	b.n	801b24c <_realloc_r+0x1c>
 801b278:	4635      	mov	r5, r6
 801b27a:	e7e7      	b.n	801b24c <_realloc_r+0x1c>

0801b27c <_read_r>:
 801b27c:	b538      	push	{r3, r4, r5, lr}
 801b27e:	4d07      	ldr	r5, [pc, #28]	; (801b29c <_read_r+0x20>)
 801b280:	4604      	mov	r4, r0
 801b282:	4608      	mov	r0, r1
 801b284:	4611      	mov	r1, r2
 801b286:	2200      	movs	r2, #0
 801b288:	602a      	str	r2, [r5, #0]
 801b28a:	461a      	mov	r2, r3
 801b28c:	f7e9 fcfe 	bl	8004c8c <_read>
 801b290:	1c43      	adds	r3, r0, #1
 801b292:	d102      	bne.n	801b29a <_read_r+0x1e>
 801b294:	682b      	ldr	r3, [r5, #0]
 801b296:	b103      	cbz	r3, 801b29a <_read_r+0x1e>
 801b298:	6023      	str	r3, [r4, #0]
 801b29a:	bd38      	pop	{r3, r4, r5, pc}
 801b29c:	20006e80 	.word	0x20006e80

0801b2a0 <_raise_r>:
 801b2a0:	291f      	cmp	r1, #31
 801b2a2:	b538      	push	{r3, r4, r5, lr}
 801b2a4:	4604      	mov	r4, r0
 801b2a6:	460d      	mov	r5, r1
 801b2a8:	d904      	bls.n	801b2b4 <_raise_r+0x14>
 801b2aa:	2316      	movs	r3, #22
 801b2ac:	6003      	str	r3, [r0, #0]
 801b2ae:	f04f 30ff 	mov.w	r0, #4294967295
 801b2b2:	bd38      	pop	{r3, r4, r5, pc}
 801b2b4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801b2b6:	b112      	cbz	r2, 801b2be <_raise_r+0x1e>
 801b2b8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801b2bc:	b94b      	cbnz	r3, 801b2d2 <_raise_r+0x32>
 801b2be:	4620      	mov	r0, r4
 801b2c0:	f000 f830 	bl	801b324 <_getpid_r>
 801b2c4:	462a      	mov	r2, r5
 801b2c6:	4601      	mov	r1, r0
 801b2c8:	4620      	mov	r0, r4
 801b2ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801b2ce:	f000 b817 	b.w	801b300 <_kill_r>
 801b2d2:	2b01      	cmp	r3, #1
 801b2d4:	d00a      	beq.n	801b2ec <_raise_r+0x4c>
 801b2d6:	1c59      	adds	r1, r3, #1
 801b2d8:	d103      	bne.n	801b2e2 <_raise_r+0x42>
 801b2da:	2316      	movs	r3, #22
 801b2dc:	6003      	str	r3, [r0, #0]
 801b2de:	2001      	movs	r0, #1
 801b2e0:	e7e7      	b.n	801b2b2 <_raise_r+0x12>
 801b2e2:	2400      	movs	r4, #0
 801b2e4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801b2e8:	4628      	mov	r0, r5
 801b2ea:	4798      	blx	r3
 801b2ec:	2000      	movs	r0, #0
 801b2ee:	e7e0      	b.n	801b2b2 <_raise_r+0x12>

0801b2f0 <raise>:
 801b2f0:	4b02      	ldr	r3, [pc, #8]	; (801b2fc <raise+0xc>)
 801b2f2:	4601      	mov	r1, r0
 801b2f4:	6818      	ldr	r0, [r3, #0]
 801b2f6:	f7ff bfd3 	b.w	801b2a0 <_raise_r>
 801b2fa:	bf00      	nop
 801b2fc:	20000074 	.word	0x20000074

0801b300 <_kill_r>:
 801b300:	b538      	push	{r3, r4, r5, lr}
 801b302:	4d07      	ldr	r5, [pc, #28]	; (801b320 <_kill_r+0x20>)
 801b304:	2300      	movs	r3, #0
 801b306:	4604      	mov	r4, r0
 801b308:	4608      	mov	r0, r1
 801b30a:	4611      	mov	r1, r2
 801b30c:	602b      	str	r3, [r5, #0]
 801b30e:	f7e9 fca1 	bl	8004c54 <_kill>
 801b312:	1c43      	adds	r3, r0, #1
 801b314:	d102      	bne.n	801b31c <_kill_r+0x1c>
 801b316:	682b      	ldr	r3, [r5, #0]
 801b318:	b103      	cbz	r3, 801b31c <_kill_r+0x1c>
 801b31a:	6023      	str	r3, [r4, #0]
 801b31c:	bd38      	pop	{r3, r4, r5, pc}
 801b31e:	bf00      	nop
 801b320:	20006e80 	.word	0x20006e80

0801b324 <_getpid_r>:
 801b324:	f7e9 bc8e 	b.w	8004c44 <_getpid>

0801b328 <_fstat_r>:
 801b328:	b538      	push	{r3, r4, r5, lr}
 801b32a:	4d07      	ldr	r5, [pc, #28]	; (801b348 <_fstat_r+0x20>)
 801b32c:	2300      	movs	r3, #0
 801b32e:	4604      	mov	r4, r0
 801b330:	4608      	mov	r0, r1
 801b332:	4611      	mov	r1, r2
 801b334:	602b      	str	r3, [r5, #0]
 801b336:	f7e9 fcee 	bl	8004d16 <_fstat>
 801b33a:	1c43      	adds	r3, r0, #1
 801b33c:	d102      	bne.n	801b344 <_fstat_r+0x1c>
 801b33e:	682b      	ldr	r3, [r5, #0]
 801b340:	b103      	cbz	r3, 801b344 <_fstat_r+0x1c>
 801b342:	6023      	str	r3, [r4, #0]
 801b344:	bd38      	pop	{r3, r4, r5, pc}
 801b346:	bf00      	nop
 801b348:	20006e80 	.word	0x20006e80

0801b34c <_isatty_r>:
 801b34c:	b538      	push	{r3, r4, r5, lr}
 801b34e:	4d06      	ldr	r5, [pc, #24]	; (801b368 <_isatty_r+0x1c>)
 801b350:	2300      	movs	r3, #0
 801b352:	4604      	mov	r4, r0
 801b354:	4608      	mov	r0, r1
 801b356:	602b      	str	r3, [r5, #0]
 801b358:	f7e9 fced 	bl	8004d36 <_isatty>
 801b35c:	1c43      	adds	r3, r0, #1
 801b35e:	d102      	bne.n	801b366 <_isatty_r+0x1a>
 801b360:	682b      	ldr	r3, [r5, #0]
 801b362:	b103      	cbz	r3, 801b366 <_isatty_r+0x1a>
 801b364:	6023      	str	r3, [r4, #0]
 801b366:	bd38      	pop	{r3, r4, r5, pc}
 801b368:	20006e80 	.word	0x20006e80

0801b36c <_malloc_usable_size_r>:
 801b36c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801b370:	1f18      	subs	r0, r3, #4
 801b372:	2b00      	cmp	r3, #0
 801b374:	bfbc      	itt	lt
 801b376:	580b      	ldrlt	r3, [r1, r0]
 801b378:	18c0      	addlt	r0, r0, r3
 801b37a:	4770      	bx	lr

0801b37c <pow>:
 801b37c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b380:	ec59 8b10 	vmov	r8, r9, d0
 801b384:	ec57 6b11 	vmov	r6, r7, d1
 801b388:	f000 f8a6 	bl	801b4d8 <__ieee754_pow>
 801b38c:	4b4e      	ldr	r3, [pc, #312]	; (801b4c8 <pow+0x14c>)
 801b38e:	f993 3000 	ldrsb.w	r3, [r3]
 801b392:	3301      	adds	r3, #1
 801b394:	ec55 4b10 	vmov	r4, r5, d0
 801b398:	d015      	beq.n	801b3c6 <pow+0x4a>
 801b39a:	4632      	mov	r2, r6
 801b39c:	463b      	mov	r3, r7
 801b39e:	4630      	mov	r0, r6
 801b3a0:	4639      	mov	r1, r7
 801b3a2:	f7e5 fbd3 	bl	8000b4c <__aeabi_dcmpun>
 801b3a6:	b970      	cbnz	r0, 801b3c6 <pow+0x4a>
 801b3a8:	4642      	mov	r2, r8
 801b3aa:	464b      	mov	r3, r9
 801b3ac:	4640      	mov	r0, r8
 801b3ae:	4649      	mov	r1, r9
 801b3b0:	f7e5 fbcc 	bl	8000b4c <__aeabi_dcmpun>
 801b3b4:	2200      	movs	r2, #0
 801b3b6:	2300      	movs	r3, #0
 801b3b8:	b148      	cbz	r0, 801b3ce <pow+0x52>
 801b3ba:	4630      	mov	r0, r6
 801b3bc:	4639      	mov	r1, r7
 801b3be:	f7e5 fb93 	bl	8000ae8 <__aeabi_dcmpeq>
 801b3c2:	2800      	cmp	r0, #0
 801b3c4:	d17d      	bne.n	801b4c2 <pow+0x146>
 801b3c6:	ec45 4b10 	vmov	d0, r4, r5
 801b3ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b3ce:	4640      	mov	r0, r8
 801b3d0:	4649      	mov	r1, r9
 801b3d2:	f7e5 fb89 	bl	8000ae8 <__aeabi_dcmpeq>
 801b3d6:	b1e0      	cbz	r0, 801b412 <pow+0x96>
 801b3d8:	2200      	movs	r2, #0
 801b3da:	2300      	movs	r3, #0
 801b3dc:	4630      	mov	r0, r6
 801b3de:	4639      	mov	r1, r7
 801b3e0:	f7e5 fb82 	bl	8000ae8 <__aeabi_dcmpeq>
 801b3e4:	2800      	cmp	r0, #0
 801b3e6:	d16c      	bne.n	801b4c2 <pow+0x146>
 801b3e8:	ec47 6b10 	vmov	d0, r6, r7
 801b3ec:	f000 fe53 	bl	801c096 <finite>
 801b3f0:	2800      	cmp	r0, #0
 801b3f2:	d0e8      	beq.n	801b3c6 <pow+0x4a>
 801b3f4:	2200      	movs	r2, #0
 801b3f6:	2300      	movs	r3, #0
 801b3f8:	4630      	mov	r0, r6
 801b3fa:	4639      	mov	r1, r7
 801b3fc:	f7e5 fb7e 	bl	8000afc <__aeabi_dcmplt>
 801b400:	2800      	cmp	r0, #0
 801b402:	d0e0      	beq.n	801b3c6 <pow+0x4a>
 801b404:	f7fe f874 	bl	80194f0 <__errno>
 801b408:	2321      	movs	r3, #33	; 0x21
 801b40a:	6003      	str	r3, [r0, #0]
 801b40c:	2400      	movs	r4, #0
 801b40e:	4d2f      	ldr	r5, [pc, #188]	; (801b4cc <pow+0x150>)
 801b410:	e7d9      	b.n	801b3c6 <pow+0x4a>
 801b412:	ec45 4b10 	vmov	d0, r4, r5
 801b416:	f000 fe3e 	bl	801c096 <finite>
 801b41a:	bbb8      	cbnz	r0, 801b48c <pow+0x110>
 801b41c:	ec49 8b10 	vmov	d0, r8, r9
 801b420:	f000 fe39 	bl	801c096 <finite>
 801b424:	b390      	cbz	r0, 801b48c <pow+0x110>
 801b426:	ec47 6b10 	vmov	d0, r6, r7
 801b42a:	f000 fe34 	bl	801c096 <finite>
 801b42e:	b368      	cbz	r0, 801b48c <pow+0x110>
 801b430:	4622      	mov	r2, r4
 801b432:	462b      	mov	r3, r5
 801b434:	4620      	mov	r0, r4
 801b436:	4629      	mov	r1, r5
 801b438:	f7e5 fb88 	bl	8000b4c <__aeabi_dcmpun>
 801b43c:	b160      	cbz	r0, 801b458 <pow+0xdc>
 801b43e:	f7fe f857 	bl	80194f0 <__errno>
 801b442:	2321      	movs	r3, #33	; 0x21
 801b444:	6003      	str	r3, [r0, #0]
 801b446:	2200      	movs	r2, #0
 801b448:	2300      	movs	r3, #0
 801b44a:	4610      	mov	r0, r2
 801b44c:	4619      	mov	r1, r3
 801b44e:	f7e5 fa0d 	bl	800086c <__aeabi_ddiv>
 801b452:	4604      	mov	r4, r0
 801b454:	460d      	mov	r5, r1
 801b456:	e7b6      	b.n	801b3c6 <pow+0x4a>
 801b458:	f7fe f84a 	bl	80194f0 <__errno>
 801b45c:	2322      	movs	r3, #34	; 0x22
 801b45e:	6003      	str	r3, [r0, #0]
 801b460:	2200      	movs	r2, #0
 801b462:	2300      	movs	r3, #0
 801b464:	4640      	mov	r0, r8
 801b466:	4649      	mov	r1, r9
 801b468:	f7e5 fb48 	bl	8000afc <__aeabi_dcmplt>
 801b46c:	2400      	movs	r4, #0
 801b46e:	b158      	cbz	r0, 801b488 <pow+0x10c>
 801b470:	ec47 6b10 	vmov	d0, r6, r7
 801b474:	f000 fe1a 	bl	801c0ac <rint>
 801b478:	4632      	mov	r2, r6
 801b47a:	ec51 0b10 	vmov	r0, r1, d0
 801b47e:	463b      	mov	r3, r7
 801b480:	f7e5 fb32 	bl	8000ae8 <__aeabi_dcmpeq>
 801b484:	2800      	cmp	r0, #0
 801b486:	d0c2      	beq.n	801b40e <pow+0x92>
 801b488:	4d11      	ldr	r5, [pc, #68]	; (801b4d0 <pow+0x154>)
 801b48a:	e79c      	b.n	801b3c6 <pow+0x4a>
 801b48c:	2200      	movs	r2, #0
 801b48e:	2300      	movs	r3, #0
 801b490:	4620      	mov	r0, r4
 801b492:	4629      	mov	r1, r5
 801b494:	f7e5 fb28 	bl	8000ae8 <__aeabi_dcmpeq>
 801b498:	2800      	cmp	r0, #0
 801b49a:	d094      	beq.n	801b3c6 <pow+0x4a>
 801b49c:	ec49 8b10 	vmov	d0, r8, r9
 801b4a0:	f000 fdf9 	bl	801c096 <finite>
 801b4a4:	2800      	cmp	r0, #0
 801b4a6:	d08e      	beq.n	801b3c6 <pow+0x4a>
 801b4a8:	ec47 6b10 	vmov	d0, r6, r7
 801b4ac:	f000 fdf3 	bl	801c096 <finite>
 801b4b0:	2800      	cmp	r0, #0
 801b4b2:	d088      	beq.n	801b3c6 <pow+0x4a>
 801b4b4:	f7fe f81c 	bl	80194f0 <__errno>
 801b4b8:	2322      	movs	r3, #34	; 0x22
 801b4ba:	6003      	str	r3, [r0, #0]
 801b4bc:	2400      	movs	r4, #0
 801b4be:	2500      	movs	r5, #0
 801b4c0:	e781      	b.n	801b3c6 <pow+0x4a>
 801b4c2:	4d04      	ldr	r5, [pc, #16]	; (801b4d4 <pow+0x158>)
 801b4c4:	2400      	movs	r4, #0
 801b4c6:	e77e      	b.n	801b3c6 <pow+0x4a>
 801b4c8:	20000248 	.word	0x20000248
 801b4cc:	fff00000 	.word	0xfff00000
 801b4d0:	7ff00000 	.word	0x7ff00000
 801b4d4:	3ff00000 	.word	0x3ff00000

0801b4d8 <__ieee754_pow>:
 801b4d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b4dc:	ed2d 8b06 	vpush	{d8-d10}
 801b4e0:	b08d      	sub	sp, #52	; 0x34
 801b4e2:	ed8d 1b02 	vstr	d1, [sp, #8]
 801b4e6:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 801b4ea:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 801b4ee:	ea56 0100 	orrs.w	r1, r6, r0
 801b4f2:	ec53 2b10 	vmov	r2, r3, d0
 801b4f6:	f000 84d1 	beq.w	801be9c <__ieee754_pow+0x9c4>
 801b4fa:	497f      	ldr	r1, [pc, #508]	; (801b6f8 <__ieee754_pow+0x220>)
 801b4fc:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 801b500:	428c      	cmp	r4, r1
 801b502:	ee10 8a10 	vmov	r8, s0
 801b506:	4699      	mov	r9, r3
 801b508:	dc09      	bgt.n	801b51e <__ieee754_pow+0x46>
 801b50a:	d103      	bne.n	801b514 <__ieee754_pow+0x3c>
 801b50c:	b97a      	cbnz	r2, 801b52e <__ieee754_pow+0x56>
 801b50e:	42a6      	cmp	r6, r4
 801b510:	dd02      	ble.n	801b518 <__ieee754_pow+0x40>
 801b512:	e00c      	b.n	801b52e <__ieee754_pow+0x56>
 801b514:	428e      	cmp	r6, r1
 801b516:	dc02      	bgt.n	801b51e <__ieee754_pow+0x46>
 801b518:	428e      	cmp	r6, r1
 801b51a:	d110      	bne.n	801b53e <__ieee754_pow+0x66>
 801b51c:	b178      	cbz	r0, 801b53e <__ieee754_pow+0x66>
 801b51e:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801b522:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801b526:	ea54 0308 	orrs.w	r3, r4, r8
 801b52a:	f000 84b7 	beq.w	801be9c <__ieee754_pow+0x9c4>
 801b52e:	4873      	ldr	r0, [pc, #460]	; (801b6fc <__ieee754_pow+0x224>)
 801b530:	b00d      	add	sp, #52	; 0x34
 801b532:	ecbd 8b06 	vpop	{d8-d10}
 801b536:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b53a:	f7ff bbfd 	b.w	801ad38 <nan>
 801b53e:	f1b9 0f00 	cmp.w	r9, #0
 801b542:	da36      	bge.n	801b5b2 <__ieee754_pow+0xda>
 801b544:	496e      	ldr	r1, [pc, #440]	; (801b700 <__ieee754_pow+0x228>)
 801b546:	428e      	cmp	r6, r1
 801b548:	dc51      	bgt.n	801b5ee <__ieee754_pow+0x116>
 801b54a:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 801b54e:	428e      	cmp	r6, r1
 801b550:	f340 84af 	ble.w	801beb2 <__ieee754_pow+0x9da>
 801b554:	1531      	asrs	r1, r6, #20
 801b556:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 801b55a:	2914      	cmp	r1, #20
 801b55c:	dd0f      	ble.n	801b57e <__ieee754_pow+0xa6>
 801b55e:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 801b562:	fa20 fc01 	lsr.w	ip, r0, r1
 801b566:	fa0c f101 	lsl.w	r1, ip, r1
 801b56a:	4281      	cmp	r1, r0
 801b56c:	f040 84a1 	bne.w	801beb2 <__ieee754_pow+0x9da>
 801b570:	f00c 0c01 	and.w	ip, ip, #1
 801b574:	f1cc 0102 	rsb	r1, ip, #2
 801b578:	9100      	str	r1, [sp, #0]
 801b57a:	b180      	cbz	r0, 801b59e <__ieee754_pow+0xc6>
 801b57c:	e059      	b.n	801b632 <__ieee754_pow+0x15a>
 801b57e:	2800      	cmp	r0, #0
 801b580:	d155      	bne.n	801b62e <__ieee754_pow+0x156>
 801b582:	f1c1 0114 	rsb	r1, r1, #20
 801b586:	fa46 fc01 	asr.w	ip, r6, r1
 801b58a:	fa0c f101 	lsl.w	r1, ip, r1
 801b58e:	42b1      	cmp	r1, r6
 801b590:	f040 848c 	bne.w	801beac <__ieee754_pow+0x9d4>
 801b594:	f00c 0c01 	and.w	ip, ip, #1
 801b598:	f1cc 0102 	rsb	r1, ip, #2
 801b59c:	9100      	str	r1, [sp, #0]
 801b59e:	4959      	ldr	r1, [pc, #356]	; (801b704 <__ieee754_pow+0x22c>)
 801b5a0:	428e      	cmp	r6, r1
 801b5a2:	d12d      	bne.n	801b600 <__ieee754_pow+0x128>
 801b5a4:	2f00      	cmp	r7, #0
 801b5a6:	da79      	bge.n	801b69c <__ieee754_pow+0x1c4>
 801b5a8:	4956      	ldr	r1, [pc, #344]	; (801b704 <__ieee754_pow+0x22c>)
 801b5aa:	2000      	movs	r0, #0
 801b5ac:	f7e5 f95e 	bl	800086c <__aeabi_ddiv>
 801b5b0:	e016      	b.n	801b5e0 <__ieee754_pow+0x108>
 801b5b2:	2100      	movs	r1, #0
 801b5b4:	9100      	str	r1, [sp, #0]
 801b5b6:	2800      	cmp	r0, #0
 801b5b8:	d13b      	bne.n	801b632 <__ieee754_pow+0x15a>
 801b5ba:	494f      	ldr	r1, [pc, #316]	; (801b6f8 <__ieee754_pow+0x220>)
 801b5bc:	428e      	cmp	r6, r1
 801b5be:	d1ee      	bne.n	801b59e <__ieee754_pow+0xc6>
 801b5c0:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 801b5c4:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 801b5c8:	ea53 0308 	orrs.w	r3, r3, r8
 801b5cc:	f000 8466 	beq.w	801be9c <__ieee754_pow+0x9c4>
 801b5d0:	4b4d      	ldr	r3, [pc, #308]	; (801b708 <__ieee754_pow+0x230>)
 801b5d2:	429c      	cmp	r4, r3
 801b5d4:	dd0d      	ble.n	801b5f2 <__ieee754_pow+0x11a>
 801b5d6:	2f00      	cmp	r7, #0
 801b5d8:	f280 8464 	bge.w	801bea4 <__ieee754_pow+0x9cc>
 801b5dc:	2000      	movs	r0, #0
 801b5de:	2100      	movs	r1, #0
 801b5e0:	ec41 0b10 	vmov	d0, r0, r1
 801b5e4:	b00d      	add	sp, #52	; 0x34
 801b5e6:	ecbd 8b06 	vpop	{d8-d10}
 801b5ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b5ee:	2102      	movs	r1, #2
 801b5f0:	e7e0      	b.n	801b5b4 <__ieee754_pow+0xdc>
 801b5f2:	2f00      	cmp	r7, #0
 801b5f4:	daf2      	bge.n	801b5dc <__ieee754_pow+0x104>
 801b5f6:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 801b5fa:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801b5fe:	e7ef      	b.n	801b5e0 <__ieee754_pow+0x108>
 801b600:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 801b604:	d104      	bne.n	801b610 <__ieee754_pow+0x138>
 801b606:	4610      	mov	r0, r2
 801b608:	4619      	mov	r1, r3
 801b60a:	f7e5 f805 	bl	8000618 <__aeabi_dmul>
 801b60e:	e7e7      	b.n	801b5e0 <__ieee754_pow+0x108>
 801b610:	493e      	ldr	r1, [pc, #248]	; (801b70c <__ieee754_pow+0x234>)
 801b612:	428f      	cmp	r7, r1
 801b614:	d10d      	bne.n	801b632 <__ieee754_pow+0x15a>
 801b616:	f1b9 0f00 	cmp.w	r9, #0
 801b61a:	db0a      	blt.n	801b632 <__ieee754_pow+0x15a>
 801b61c:	ec43 2b10 	vmov	d0, r2, r3
 801b620:	b00d      	add	sp, #52	; 0x34
 801b622:	ecbd 8b06 	vpop	{d8-d10}
 801b626:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b62a:	f000 bc77 	b.w	801bf1c <__ieee754_sqrt>
 801b62e:	2100      	movs	r1, #0
 801b630:	9100      	str	r1, [sp, #0]
 801b632:	ec43 2b10 	vmov	d0, r2, r3
 801b636:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801b63a:	f000 fd23 	bl	801c084 <fabs>
 801b63e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801b642:	ec51 0b10 	vmov	r0, r1, d0
 801b646:	f1b8 0f00 	cmp.w	r8, #0
 801b64a:	d12a      	bne.n	801b6a2 <__ieee754_pow+0x1ca>
 801b64c:	b12c      	cbz	r4, 801b65a <__ieee754_pow+0x182>
 801b64e:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 801b704 <__ieee754_pow+0x22c>
 801b652:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 801b656:	45e6      	cmp	lr, ip
 801b658:	d123      	bne.n	801b6a2 <__ieee754_pow+0x1ca>
 801b65a:	2f00      	cmp	r7, #0
 801b65c:	da05      	bge.n	801b66a <__ieee754_pow+0x192>
 801b65e:	4602      	mov	r2, r0
 801b660:	460b      	mov	r3, r1
 801b662:	2000      	movs	r0, #0
 801b664:	4927      	ldr	r1, [pc, #156]	; (801b704 <__ieee754_pow+0x22c>)
 801b666:	f7e5 f901 	bl	800086c <__aeabi_ddiv>
 801b66a:	f1b9 0f00 	cmp.w	r9, #0
 801b66e:	dab7      	bge.n	801b5e0 <__ieee754_pow+0x108>
 801b670:	9b00      	ldr	r3, [sp, #0]
 801b672:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801b676:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801b67a:	4323      	orrs	r3, r4
 801b67c:	d108      	bne.n	801b690 <__ieee754_pow+0x1b8>
 801b67e:	4602      	mov	r2, r0
 801b680:	460b      	mov	r3, r1
 801b682:	4610      	mov	r0, r2
 801b684:	4619      	mov	r1, r3
 801b686:	f7e4 fe0f 	bl	80002a8 <__aeabi_dsub>
 801b68a:	4602      	mov	r2, r0
 801b68c:	460b      	mov	r3, r1
 801b68e:	e78d      	b.n	801b5ac <__ieee754_pow+0xd4>
 801b690:	9b00      	ldr	r3, [sp, #0]
 801b692:	2b01      	cmp	r3, #1
 801b694:	d1a4      	bne.n	801b5e0 <__ieee754_pow+0x108>
 801b696:	4602      	mov	r2, r0
 801b698:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801b69c:	4610      	mov	r0, r2
 801b69e:	4619      	mov	r1, r3
 801b6a0:	e79e      	b.n	801b5e0 <__ieee754_pow+0x108>
 801b6a2:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 801b6a6:	f10c 35ff 	add.w	r5, ip, #4294967295
 801b6aa:	950a      	str	r5, [sp, #40]	; 0x28
 801b6ac:	9d00      	ldr	r5, [sp, #0]
 801b6ae:	46ac      	mov	ip, r5
 801b6b0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801b6b2:	ea5c 0505 	orrs.w	r5, ip, r5
 801b6b6:	d0e4      	beq.n	801b682 <__ieee754_pow+0x1aa>
 801b6b8:	4b15      	ldr	r3, [pc, #84]	; (801b710 <__ieee754_pow+0x238>)
 801b6ba:	429e      	cmp	r6, r3
 801b6bc:	f340 80fc 	ble.w	801b8b8 <__ieee754_pow+0x3e0>
 801b6c0:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 801b6c4:	429e      	cmp	r6, r3
 801b6c6:	4b10      	ldr	r3, [pc, #64]	; (801b708 <__ieee754_pow+0x230>)
 801b6c8:	dd07      	ble.n	801b6da <__ieee754_pow+0x202>
 801b6ca:	429c      	cmp	r4, r3
 801b6cc:	dc0a      	bgt.n	801b6e4 <__ieee754_pow+0x20c>
 801b6ce:	2f00      	cmp	r7, #0
 801b6d0:	da84      	bge.n	801b5dc <__ieee754_pow+0x104>
 801b6d2:	a307      	add	r3, pc, #28	; (adr r3, 801b6f0 <__ieee754_pow+0x218>)
 801b6d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b6d8:	e795      	b.n	801b606 <__ieee754_pow+0x12e>
 801b6da:	429c      	cmp	r4, r3
 801b6dc:	dbf7      	blt.n	801b6ce <__ieee754_pow+0x1f6>
 801b6de:	4b09      	ldr	r3, [pc, #36]	; (801b704 <__ieee754_pow+0x22c>)
 801b6e0:	429c      	cmp	r4, r3
 801b6e2:	dd17      	ble.n	801b714 <__ieee754_pow+0x23c>
 801b6e4:	2f00      	cmp	r7, #0
 801b6e6:	dcf4      	bgt.n	801b6d2 <__ieee754_pow+0x1fa>
 801b6e8:	e778      	b.n	801b5dc <__ieee754_pow+0x104>
 801b6ea:	bf00      	nop
 801b6ec:	f3af 8000 	nop.w
 801b6f0:	8800759c 	.word	0x8800759c
 801b6f4:	7e37e43c 	.word	0x7e37e43c
 801b6f8:	7ff00000 	.word	0x7ff00000
 801b6fc:	0801fd1b 	.word	0x0801fd1b
 801b700:	433fffff 	.word	0x433fffff
 801b704:	3ff00000 	.word	0x3ff00000
 801b708:	3fefffff 	.word	0x3fefffff
 801b70c:	3fe00000 	.word	0x3fe00000
 801b710:	41e00000 	.word	0x41e00000
 801b714:	4b64      	ldr	r3, [pc, #400]	; (801b8a8 <__ieee754_pow+0x3d0>)
 801b716:	2200      	movs	r2, #0
 801b718:	f7e4 fdc6 	bl	80002a8 <__aeabi_dsub>
 801b71c:	a356      	add	r3, pc, #344	; (adr r3, 801b878 <__ieee754_pow+0x3a0>)
 801b71e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b722:	4604      	mov	r4, r0
 801b724:	460d      	mov	r5, r1
 801b726:	f7e4 ff77 	bl	8000618 <__aeabi_dmul>
 801b72a:	a355      	add	r3, pc, #340	; (adr r3, 801b880 <__ieee754_pow+0x3a8>)
 801b72c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b730:	4606      	mov	r6, r0
 801b732:	460f      	mov	r7, r1
 801b734:	4620      	mov	r0, r4
 801b736:	4629      	mov	r1, r5
 801b738:	f7e4 ff6e 	bl	8000618 <__aeabi_dmul>
 801b73c:	4b5b      	ldr	r3, [pc, #364]	; (801b8ac <__ieee754_pow+0x3d4>)
 801b73e:	4682      	mov	sl, r0
 801b740:	468b      	mov	fp, r1
 801b742:	2200      	movs	r2, #0
 801b744:	4620      	mov	r0, r4
 801b746:	4629      	mov	r1, r5
 801b748:	f7e4 ff66 	bl	8000618 <__aeabi_dmul>
 801b74c:	4602      	mov	r2, r0
 801b74e:	460b      	mov	r3, r1
 801b750:	a14d      	add	r1, pc, #308	; (adr r1, 801b888 <__ieee754_pow+0x3b0>)
 801b752:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b756:	f7e4 fda7 	bl	80002a8 <__aeabi_dsub>
 801b75a:	4622      	mov	r2, r4
 801b75c:	462b      	mov	r3, r5
 801b75e:	f7e4 ff5b 	bl	8000618 <__aeabi_dmul>
 801b762:	4602      	mov	r2, r0
 801b764:	460b      	mov	r3, r1
 801b766:	2000      	movs	r0, #0
 801b768:	4951      	ldr	r1, [pc, #324]	; (801b8b0 <__ieee754_pow+0x3d8>)
 801b76a:	f7e4 fd9d 	bl	80002a8 <__aeabi_dsub>
 801b76e:	4622      	mov	r2, r4
 801b770:	4680      	mov	r8, r0
 801b772:	4689      	mov	r9, r1
 801b774:	462b      	mov	r3, r5
 801b776:	4620      	mov	r0, r4
 801b778:	4629      	mov	r1, r5
 801b77a:	f7e4 ff4d 	bl	8000618 <__aeabi_dmul>
 801b77e:	4602      	mov	r2, r0
 801b780:	460b      	mov	r3, r1
 801b782:	4640      	mov	r0, r8
 801b784:	4649      	mov	r1, r9
 801b786:	f7e4 ff47 	bl	8000618 <__aeabi_dmul>
 801b78a:	a341      	add	r3, pc, #260	; (adr r3, 801b890 <__ieee754_pow+0x3b8>)
 801b78c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b790:	f7e4 ff42 	bl	8000618 <__aeabi_dmul>
 801b794:	4602      	mov	r2, r0
 801b796:	460b      	mov	r3, r1
 801b798:	4650      	mov	r0, sl
 801b79a:	4659      	mov	r1, fp
 801b79c:	f7e4 fd84 	bl	80002a8 <__aeabi_dsub>
 801b7a0:	4602      	mov	r2, r0
 801b7a2:	460b      	mov	r3, r1
 801b7a4:	4680      	mov	r8, r0
 801b7a6:	4689      	mov	r9, r1
 801b7a8:	4630      	mov	r0, r6
 801b7aa:	4639      	mov	r1, r7
 801b7ac:	f7e4 fd7e 	bl	80002ac <__adddf3>
 801b7b0:	2400      	movs	r4, #0
 801b7b2:	4632      	mov	r2, r6
 801b7b4:	463b      	mov	r3, r7
 801b7b6:	4620      	mov	r0, r4
 801b7b8:	460d      	mov	r5, r1
 801b7ba:	f7e4 fd75 	bl	80002a8 <__aeabi_dsub>
 801b7be:	4602      	mov	r2, r0
 801b7c0:	460b      	mov	r3, r1
 801b7c2:	4640      	mov	r0, r8
 801b7c4:	4649      	mov	r1, r9
 801b7c6:	f7e4 fd6f 	bl	80002a8 <__aeabi_dsub>
 801b7ca:	9b00      	ldr	r3, [sp, #0]
 801b7cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801b7ce:	3b01      	subs	r3, #1
 801b7d0:	4313      	orrs	r3, r2
 801b7d2:	4682      	mov	sl, r0
 801b7d4:	468b      	mov	fp, r1
 801b7d6:	f040 81f1 	bne.w	801bbbc <__ieee754_pow+0x6e4>
 801b7da:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 801b898 <__ieee754_pow+0x3c0>
 801b7de:	eeb0 8a47 	vmov.f32	s16, s14
 801b7e2:	eef0 8a67 	vmov.f32	s17, s15
 801b7e6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801b7ea:	2600      	movs	r6, #0
 801b7ec:	4632      	mov	r2, r6
 801b7ee:	463b      	mov	r3, r7
 801b7f0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801b7f4:	f7e4 fd58 	bl	80002a8 <__aeabi_dsub>
 801b7f8:	4622      	mov	r2, r4
 801b7fa:	462b      	mov	r3, r5
 801b7fc:	f7e4 ff0c 	bl	8000618 <__aeabi_dmul>
 801b800:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801b804:	4680      	mov	r8, r0
 801b806:	4689      	mov	r9, r1
 801b808:	4650      	mov	r0, sl
 801b80a:	4659      	mov	r1, fp
 801b80c:	f7e4 ff04 	bl	8000618 <__aeabi_dmul>
 801b810:	4602      	mov	r2, r0
 801b812:	460b      	mov	r3, r1
 801b814:	4640      	mov	r0, r8
 801b816:	4649      	mov	r1, r9
 801b818:	f7e4 fd48 	bl	80002ac <__adddf3>
 801b81c:	4632      	mov	r2, r6
 801b81e:	463b      	mov	r3, r7
 801b820:	4680      	mov	r8, r0
 801b822:	4689      	mov	r9, r1
 801b824:	4620      	mov	r0, r4
 801b826:	4629      	mov	r1, r5
 801b828:	f7e4 fef6 	bl	8000618 <__aeabi_dmul>
 801b82c:	460b      	mov	r3, r1
 801b82e:	4604      	mov	r4, r0
 801b830:	460d      	mov	r5, r1
 801b832:	4602      	mov	r2, r0
 801b834:	4649      	mov	r1, r9
 801b836:	4640      	mov	r0, r8
 801b838:	f7e4 fd38 	bl	80002ac <__adddf3>
 801b83c:	4b1d      	ldr	r3, [pc, #116]	; (801b8b4 <__ieee754_pow+0x3dc>)
 801b83e:	4299      	cmp	r1, r3
 801b840:	ec45 4b19 	vmov	d9, r4, r5
 801b844:	4606      	mov	r6, r0
 801b846:	460f      	mov	r7, r1
 801b848:	468b      	mov	fp, r1
 801b84a:	f340 82fe 	ble.w	801be4a <__ieee754_pow+0x972>
 801b84e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 801b852:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 801b856:	4303      	orrs	r3, r0
 801b858:	f000 81f0 	beq.w	801bc3c <__ieee754_pow+0x764>
 801b85c:	a310      	add	r3, pc, #64	; (adr r3, 801b8a0 <__ieee754_pow+0x3c8>)
 801b85e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b862:	ec51 0b18 	vmov	r0, r1, d8
 801b866:	f7e4 fed7 	bl	8000618 <__aeabi_dmul>
 801b86a:	a30d      	add	r3, pc, #52	; (adr r3, 801b8a0 <__ieee754_pow+0x3c8>)
 801b86c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b870:	e6cb      	b.n	801b60a <__ieee754_pow+0x132>
 801b872:	bf00      	nop
 801b874:	f3af 8000 	nop.w
 801b878:	60000000 	.word	0x60000000
 801b87c:	3ff71547 	.word	0x3ff71547
 801b880:	f85ddf44 	.word	0xf85ddf44
 801b884:	3e54ae0b 	.word	0x3e54ae0b
 801b888:	55555555 	.word	0x55555555
 801b88c:	3fd55555 	.word	0x3fd55555
 801b890:	652b82fe 	.word	0x652b82fe
 801b894:	3ff71547 	.word	0x3ff71547
 801b898:	00000000 	.word	0x00000000
 801b89c:	bff00000 	.word	0xbff00000
 801b8a0:	8800759c 	.word	0x8800759c
 801b8a4:	7e37e43c 	.word	0x7e37e43c
 801b8a8:	3ff00000 	.word	0x3ff00000
 801b8ac:	3fd00000 	.word	0x3fd00000
 801b8b0:	3fe00000 	.word	0x3fe00000
 801b8b4:	408fffff 	.word	0x408fffff
 801b8b8:	4bd7      	ldr	r3, [pc, #860]	; (801bc18 <__ieee754_pow+0x740>)
 801b8ba:	ea03 0309 	and.w	r3, r3, r9
 801b8be:	2200      	movs	r2, #0
 801b8c0:	b92b      	cbnz	r3, 801b8ce <__ieee754_pow+0x3f6>
 801b8c2:	4bd6      	ldr	r3, [pc, #856]	; (801bc1c <__ieee754_pow+0x744>)
 801b8c4:	f7e4 fea8 	bl	8000618 <__aeabi_dmul>
 801b8c8:	f06f 0234 	mvn.w	r2, #52	; 0x34
 801b8cc:	460c      	mov	r4, r1
 801b8ce:	1523      	asrs	r3, r4, #20
 801b8d0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801b8d4:	4413      	add	r3, r2
 801b8d6:	9309      	str	r3, [sp, #36]	; 0x24
 801b8d8:	4bd1      	ldr	r3, [pc, #836]	; (801bc20 <__ieee754_pow+0x748>)
 801b8da:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801b8de:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 801b8e2:	429c      	cmp	r4, r3
 801b8e4:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 801b8e8:	dd08      	ble.n	801b8fc <__ieee754_pow+0x424>
 801b8ea:	4bce      	ldr	r3, [pc, #824]	; (801bc24 <__ieee754_pow+0x74c>)
 801b8ec:	429c      	cmp	r4, r3
 801b8ee:	f340 8163 	ble.w	801bbb8 <__ieee754_pow+0x6e0>
 801b8f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b8f4:	3301      	adds	r3, #1
 801b8f6:	9309      	str	r3, [sp, #36]	; 0x24
 801b8f8:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 801b8fc:	2400      	movs	r4, #0
 801b8fe:	00e3      	lsls	r3, r4, #3
 801b900:	930b      	str	r3, [sp, #44]	; 0x2c
 801b902:	4bc9      	ldr	r3, [pc, #804]	; (801bc28 <__ieee754_pow+0x750>)
 801b904:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801b908:	ed93 7b00 	vldr	d7, [r3]
 801b90c:	4629      	mov	r1, r5
 801b90e:	ec53 2b17 	vmov	r2, r3, d7
 801b912:	eeb0 8a47 	vmov.f32	s16, s14
 801b916:	eef0 8a67 	vmov.f32	s17, s15
 801b91a:	4682      	mov	sl, r0
 801b91c:	f7e4 fcc4 	bl	80002a8 <__aeabi_dsub>
 801b920:	4652      	mov	r2, sl
 801b922:	4606      	mov	r6, r0
 801b924:	460f      	mov	r7, r1
 801b926:	462b      	mov	r3, r5
 801b928:	ec51 0b18 	vmov	r0, r1, d8
 801b92c:	f7e4 fcbe 	bl	80002ac <__adddf3>
 801b930:	4602      	mov	r2, r0
 801b932:	460b      	mov	r3, r1
 801b934:	2000      	movs	r0, #0
 801b936:	49bd      	ldr	r1, [pc, #756]	; (801bc2c <__ieee754_pow+0x754>)
 801b938:	f7e4 ff98 	bl	800086c <__aeabi_ddiv>
 801b93c:	ec41 0b19 	vmov	d9, r0, r1
 801b940:	4602      	mov	r2, r0
 801b942:	460b      	mov	r3, r1
 801b944:	4630      	mov	r0, r6
 801b946:	4639      	mov	r1, r7
 801b948:	f7e4 fe66 	bl	8000618 <__aeabi_dmul>
 801b94c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801b950:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801b954:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801b958:	2300      	movs	r3, #0
 801b95a:	9304      	str	r3, [sp, #16]
 801b95c:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 801b960:	46ab      	mov	fp, r5
 801b962:	106d      	asrs	r5, r5, #1
 801b964:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 801b968:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 801b96c:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 801b970:	2200      	movs	r2, #0
 801b972:	4640      	mov	r0, r8
 801b974:	4649      	mov	r1, r9
 801b976:	4614      	mov	r4, r2
 801b978:	461d      	mov	r5, r3
 801b97a:	f7e4 fe4d 	bl	8000618 <__aeabi_dmul>
 801b97e:	4602      	mov	r2, r0
 801b980:	460b      	mov	r3, r1
 801b982:	4630      	mov	r0, r6
 801b984:	4639      	mov	r1, r7
 801b986:	f7e4 fc8f 	bl	80002a8 <__aeabi_dsub>
 801b98a:	ec53 2b18 	vmov	r2, r3, d8
 801b98e:	4606      	mov	r6, r0
 801b990:	460f      	mov	r7, r1
 801b992:	4620      	mov	r0, r4
 801b994:	4629      	mov	r1, r5
 801b996:	f7e4 fc87 	bl	80002a8 <__aeabi_dsub>
 801b99a:	4602      	mov	r2, r0
 801b99c:	460b      	mov	r3, r1
 801b99e:	4650      	mov	r0, sl
 801b9a0:	4659      	mov	r1, fp
 801b9a2:	f7e4 fc81 	bl	80002a8 <__aeabi_dsub>
 801b9a6:	4642      	mov	r2, r8
 801b9a8:	464b      	mov	r3, r9
 801b9aa:	f7e4 fe35 	bl	8000618 <__aeabi_dmul>
 801b9ae:	4602      	mov	r2, r0
 801b9b0:	460b      	mov	r3, r1
 801b9b2:	4630      	mov	r0, r6
 801b9b4:	4639      	mov	r1, r7
 801b9b6:	f7e4 fc77 	bl	80002a8 <__aeabi_dsub>
 801b9ba:	ec53 2b19 	vmov	r2, r3, d9
 801b9be:	f7e4 fe2b 	bl	8000618 <__aeabi_dmul>
 801b9c2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801b9c6:	ec41 0b18 	vmov	d8, r0, r1
 801b9ca:	4610      	mov	r0, r2
 801b9cc:	4619      	mov	r1, r3
 801b9ce:	f7e4 fe23 	bl	8000618 <__aeabi_dmul>
 801b9d2:	a37d      	add	r3, pc, #500	; (adr r3, 801bbc8 <__ieee754_pow+0x6f0>)
 801b9d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b9d8:	4604      	mov	r4, r0
 801b9da:	460d      	mov	r5, r1
 801b9dc:	f7e4 fe1c 	bl	8000618 <__aeabi_dmul>
 801b9e0:	a37b      	add	r3, pc, #492	; (adr r3, 801bbd0 <__ieee754_pow+0x6f8>)
 801b9e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b9e6:	f7e4 fc61 	bl	80002ac <__adddf3>
 801b9ea:	4622      	mov	r2, r4
 801b9ec:	462b      	mov	r3, r5
 801b9ee:	f7e4 fe13 	bl	8000618 <__aeabi_dmul>
 801b9f2:	a379      	add	r3, pc, #484	; (adr r3, 801bbd8 <__ieee754_pow+0x700>)
 801b9f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b9f8:	f7e4 fc58 	bl	80002ac <__adddf3>
 801b9fc:	4622      	mov	r2, r4
 801b9fe:	462b      	mov	r3, r5
 801ba00:	f7e4 fe0a 	bl	8000618 <__aeabi_dmul>
 801ba04:	a376      	add	r3, pc, #472	; (adr r3, 801bbe0 <__ieee754_pow+0x708>)
 801ba06:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ba0a:	f7e4 fc4f 	bl	80002ac <__adddf3>
 801ba0e:	4622      	mov	r2, r4
 801ba10:	462b      	mov	r3, r5
 801ba12:	f7e4 fe01 	bl	8000618 <__aeabi_dmul>
 801ba16:	a374      	add	r3, pc, #464	; (adr r3, 801bbe8 <__ieee754_pow+0x710>)
 801ba18:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ba1c:	f7e4 fc46 	bl	80002ac <__adddf3>
 801ba20:	4622      	mov	r2, r4
 801ba22:	462b      	mov	r3, r5
 801ba24:	f7e4 fdf8 	bl	8000618 <__aeabi_dmul>
 801ba28:	a371      	add	r3, pc, #452	; (adr r3, 801bbf0 <__ieee754_pow+0x718>)
 801ba2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ba2e:	f7e4 fc3d 	bl	80002ac <__adddf3>
 801ba32:	4622      	mov	r2, r4
 801ba34:	4606      	mov	r6, r0
 801ba36:	460f      	mov	r7, r1
 801ba38:	462b      	mov	r3, r5
 801ba3a:	4620      	mov	r0, r4
 801ba3c:	4629      	mov	r1, r5
 801ba3e:	f7e4 fdeb 	bl	8000618 <__aeabi_dmul>
 801ba42:	4602      	mov	r2, r0
 801ba44:	460b      	mov	r3, r1
 801ba46:	4630      	mov	r0, r6
 801ba48:	4639      	mov	r1, r7
 801ba4a:	f7e4 fde5 	bl	8000618 <__aeabi_dmul>
 801ba4e:	4642      	mov	r2, r8
 801ba50:	4604      	mov	r4, r0
 801ba52:	460d      	mov	r5, r1
 801ba54:	464b      	mov	r3, r9
 801ba56:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801ba5a:	f7e4 fc27 	bl	80002ac <__adddf3>
 801ba5e:	ec53 2b18 	vmov	r2, r3, d8
 801ba62:	f7e4 fdd9 	bl	8000618 <__aeabi_dmul>
 801ba66:	4622      	mov	r2, r4
 801ba68:	462b      	mov	r3, r5
 801ba6a:	f7e4 fc1f 	bl	80002ac <__adddf3>
 801ba6e:	4642      	mov	r2, r8
 801ba70:	4682      	mov	sl, r0
 801ba72:	468b      	mov	fp, r1
 801ba74:	464b      	mov	r3, r9
 801ba76:	4640      	mov	r0, r8
 801ba78:	4649      	mov	r1, r9
 801ba7a:	f7e4 fdcd 	bl	8000618 <__aeabi_dmul>
 801ba7e:	4b6c      	ldr	r3, [pc, #432]	; (801bc30 <__ieee754_pow+0x758>)
 801ba80:	2200      	movs	r2, #0
 801ba82:	4606      	mov	r6, r0
 801ba84:	460f      	mov	r7, r1
 801ba86:	f7e4 fc11 	bl	80002ac <__adddf3>
 801ba8a:	4652      	mov	r2, sl
 801ba8c:	465b      	mov	r3, fp
 801ba8e:	f7e4 fc0d 	bl	80002ac <__adddf3>
 801ba92:	9c04      	ldr	r4, [sp, #16]
 801ba94:	460d      	mov	r5, r1
 801ba96:	4622      	mov	r2, r4
 801ba98:	460b      	mov	r3, r1
 801ba9a:	4640      	mov	r0, r8
 801ba9c:	4649      	mov	r1, r9
 801ba9e:	f7e4 fdbb 	bl	8000618 <__aeabi_dmul>
 801baa2:	4b63      	ldr	r3, [pc, #396]	; (801bc30 <__ieee754_pow+0x758>)
 801baa4:	4680      	mov	r8, r0
 801baa6:	4689      	mov	r9, r1
 801baa8:	2200      	movs	r2, #0
 801baaa:	4620      	mov	r0, r4
 801baac:	4629      	mov	r1, r5
 801baae:	f7e4 fbfb 	bl	80002a8 <__aeabi_dsub>
 801bab2:	4632      	mov	r2, r6
 801bab4:	463b      	mov	r3, r7
 801bab6:	f7e4 fbf7 	bl	80002a8 <__aeabi_dsub>
 801baba:	4602      	mov	r2, r0
 801babc:	460b      	mov	r3, r1
 801babe:	4650      	mov	r0, sl
 801bac0:	4659      	mov	r1, fp
 801bac2:	f7e4 fbf1 	bl	80002a8 <__aeabi_dsub>
 801bac6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801baca:	f7e4 fda5 	bl	8000618 <__aeabi_dmul>
 801bace:	4622      	mov	r2, r4
 801bad0:	4606      	mov	r6, r0
 801bad2:	460f      	mov	r7, r1
 801bad4:	462b      	mov	r3, r5
 801bad6:	ec51 0b18 	vmov	r0, r1, d8
 801bada:	f7e4 fd9d 	bl	8000618 <__aeabi_dmul>
 801bade:	4602      	mov	r2, r0
 801bae0:	460b      	mov	r3, r1
 801bae2:	4630      	mov	r0, r6
 801bae4:	4639      	mov	r1, r7
 801bae6:	f7e4 fbe1 	bl	80002ac <__adddf3>
 801baea:	4606      	mov	r6, r0
 801baec:	460f      	mov	r7, r1
 801baee:	4602      	mov	r2, r0
 801baf0:	460b      	mov	r3, r1
 801baf2:	4640      	mov	r0, r8
 801baf4:	4649      	mov	r1, r9
 801baf6:	f7e4 fbd9 	bl	80002ac <__adddf3>
 801bafa:	9c04      	ldr	r4, [sp, #16]
 801bafc:	a33e      	add	r3, pc, #248	; (adr r3, 801bbf8 <__ieee754_pow+0x720>)
 801bafe:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bb02:	4620      	mov	r0, r4
 801bb04:	460d      	mov	r5, r1
 801bb06:	f7e4 fd87 	bl	8000618 <__aeabi_dmul>
 801bb0a:	4642      	mov	r2, r8
 801bb0c:	ec41 0b18 	vmov	d8, r0, r1
 801bb10:	464b      	mov	r3, r9
 801bb12:	4620      	mov	r0, r4
 801bb14:	4629      	mov	r1, r5
 801bb16:	f7e4 fbc7 	bl	80002a8 <__aeabi_dsub>
 801bb1a:	4602      	mov	r2, r0
 801bb1c:	460b      	mov	r3, r1
 801bb1e:	4630      	mov	r0, r6
 801bb20:	4639      	mov	r1, r7
 801bb22:	f7e4 fbc1 	bl	80002a8 <__aeabi_dsub>
 801bb26:	a336      	add	r3, pc, #216	; (adr r3, 801bc00 <__ieee754_pow+0x728>)
 801bb28:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bb2c:	f7e4 fd74 	bl	8000618 <__aeabi_dmul>
 801bb30:	a335      	add	r3, pc, #212	; (adr r3, 801bc08 <__ieee754_pow+0x730>)
 801bb32:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bb36:	4606      	mov	r6, r0
 801bb38:	460f      	mov	r7, r1
 801bb3a:	4620      	mov	r0, r4
 801bb3c:	4629      	mov	r1, r5
 801bb3e:	f7e4 fd6b 	bl	8000618 <__aeabi_dmul>
 801bb42:	4602      	mov	r2, r0
 801bb44:	460b      	mov	r3, r1
 801bb46:	4630      	mov	r0, r6
 801bb48:	4639      	mov	r1, r7
 801bb4a:	f7e4 fbaf 	bl	80002ac <__adddf3>
 801bb4e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801bb50:	4b38      	ldr	r3, [pc, #224]	; (801bc34 <__ieee754_pow+0x75c>)
 801bb52:	4413      	add	r3, r2
 801bb54:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bb58:	f7e4 fba8 	bl	80002ac <__adddf3>
 801bb5c:	4682      	mov	sl, r0
 801bb5e:	9809      	ldr	r0, [sp, #36]	; 0x24
 801bb60:	468b      	mov	fp, r1
 801bb62:	f7e4 fcef 	bl	8000544 <__aeabi_i2d>
 801bb66:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801bb68:	4b33      	ldr	r3, [pc, #204]	; (801bc38 <__ieee754_pow+0x760>)
 801bb6a:	4413      	add	r3, r2
 801bb6c:	e9d3 8900 	ldrd	r8, r9, [r3]
 801bb70:	4606      	mov	r6, r0
 801bb72:	460f      	mov	r7, r1
 801bb74:	4652      	mov	r2, sl
 801bb76:	465b      	mov	r3, fp
 801bb78:	ec51 0b18 	vmov	r0, r1, d8
 801bb7c:	f7e4 fb96 	bl	80002ac <__adddf3>
 801bb80:	4642      	mov	r2, r8
 801bb82:	464b      	mov	r3, r9
 801bb84:	f7e4 fb92 	bl	80002ac <__adddf3>
 801bb88:	4632      	mov	r2, r6
 801bb8a:	463b      	mov	r3, r7
 801bb8c:	f7e4 fb8e 	bl	80002ac <__adddf3>
 801bb90:	9c04      	ldr	r4, [sp, #16]
 801bb92:	4632      	mov	r2, r6
 801bb94:	463b      	mov	r3, r7
 801bb96:	4620      	mov	r0, r4
 801bb98:	460d      	mov	r5, r1
 801bb9a:	f7e4 fb85 	bl	80002a8 <__aeabi_dsub>
 801bb9e:	4642      	mov	r2, r8
 801bba0:	464b      	mov	r3, r9
 801bba2:	f7e4 fb81 	bl	80002a8 <__aeabi_dsub>
 801bba6:	ec53 2b18 	vmov	r2, r3, d8
 801bbaa:	f7e4 fb7d 	bl	80002a8 <__aeabi_dsub>
 801bbae:	4602      	mov	r2, r0
 801bbb0:	460b      	mov	r3, r1
 801bbb2:	4650      	mov	r0, sl
 801bbb4:	4659      	mov	r1, fp
 801bbb6:	e606      	b.n	801b7c6 <__ieee754_pow+0x2ee>
 801bbb8:	2401      	movs	r4, #1
 801bbba:	e6a0      	b.n	801b8fe <__ieee754_pow+0x426>
 801bbbc:	ed9f 7b14 	vldr	d7, [pc, #80]	; 801bc10 <__ieee754_pow+0x738>
 801bbc0:	e60d      	b.n	801b7de <__ieee754_pow+0x306>
 801bbc2:	bf00      	nop
 801bbc4:	f3af 8000 	nop.w
 801bbc8:	4a454eef 	.word	0x4a454eef
 801bbcc:	3fca7e28 	.word	0x3fca7e28
 801bbd0:	93c9db65 	.word	0x93c9db65
 801bbd4:	3fcd864a 	.word	0x3fcd864a
 801bbd8:	a91d4101 	.word	0xa91d4101
 801bbdc:	3fd17460 	.word	0x3fd17460
 801bbe0:	518f264d 	.word	0x518f264d
 801bbe4:	3fd55555 	.word	0x3fd55555
 801bbe8:	db6fabff 	.word	0xdb6fabff
 801bbec:	3fdb6db6 	.word	0x3fdb6db6
 801bbf0:	33333303 	.word	0x33333303
 801bbf4:	3fe33333 	.word	0x3fe33333
 801bbf8:	e0000000 	.word	0xe0000000
 801bbfc:	3feec709 	.word	0x3feec709
 801bc00:	dc3a03fd 	.word	0xdc3a03fd
 801bc04:	3feec709 	.word	0x3feec709
 801bc08:	145b01f5 	.word	0x145b01f5
 801bc0c:	be3e2fe0 	.word	0xbe3e2fe0
 801bc10:	00000000 	.word	0x00000000
 801bc14:	3ff00000 	.word	0x3ff00000
 801bc18:	7ff00000 	.word	0x7ff00000
 801bc1c:	43400000 	.word	0x43400000
 801bc20:	0003988e 	.word	0x0003988e
 801bc24:	000bb679 	.word	0x000bb679
 801bc28:	0801fff0 	.word	0x0801fff0
 801bc2c:	3ff00000 	.word	0x3ff00000
 801bc30:	40080000 	.word	0x40080000
 801bc34:	08020010 	.word	0x08020010
 801bc38:	08020000 	.word	0x08020000
 801bc3c:	a3b5      	add	r3, pc, #724	; (adr r3, 801bf14 <__ieee754_pow+0xa3c>)
 801bc3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bc42:	4640      	mov	r0, r8
 801bc44:	4649      	mov	r1, r9
 801bc46:	f7e4 fb31 	bl	80002ac <__adddf3>
 801bc4a:	4622      	mov	r2, r4
 801bc4c:	ec41 0b1a 	vmov	d10, r0, r1
 801bc50:	462b      	mov	r3, r5
 801bc52:	4630      	mov	r0, r6
 801bc54:	4639      	mov	r1, r7
 801bc56:	f7e4 fb27 	bl	80002a8 <__aeabi_dsub>
 801bc5a:	4602      	mov	r2, r0
 801bc5c:	460b      	mov	r3, r1
 801bc5e:	ec51 0b1a 	vmov	r0, r1, d10
 801bc62:	f7e4 ff69 	bl	8000b38 <__aeabi_dcmpgt>
 801bc66:	2800      	cmp	r0, #0
 801bc68:	f47f adf8 	bne.w	801b85c <__ieee754_pow+0x384>
 801bc6c:	4aa4      	ldr	r2, [pc, #656]	; (801bf00 <__ieee754_pow+0xa28>)
 801bc6e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801bc72:	4293      	cmp	r3, r2
 801bc74:	f340 810b 	ble.w	801be8e <__ieee754_pow+0x9b6>
 801bc78:	151b      	asrs	r3, r3, #20
 801bc7a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 801bc7e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 801bc82:	fa4a f303 	asr.w	r3, sl, r3
 801bc86:	445b      	add	r3, fp
 801bc88:	f3c3 520a 	ubfx	r2, r3, #20, #11
 801bc8c:	4e9d      	ldr	r6, [pc, #628]	; (801bf04 <__ieee754_pow+0xa2c>)
 801bc8e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 801bc92:	4116      	asrs	r6, r2
 801bc94:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 801bc98:	2000      	movs	r0, #0
 801bc9a:	ea23 0106 	bic.w	r1, r3, r6
 801bc9e:	f1c2 0214 	rsb	r2, r2, #20
 801bca2:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 801bca6:	fa4a fa02 	asr.w	sl, sl, r2
 801bcaa:	f1bb 0f00 	cmp.w	fp, #0
 801bcae:	4602      	mov	r2, r0
 801bcb0:	460b      	mov	r3, r1
 801bcb2:	4620      	mov	r0, r4
 801bcb4:	4629      	mov	r1, r5
 801bcb6:	bfb8      	it	lt
 801bcb8:	f1ca 0a00 	rsblt	sl, sl, #0
 801bcbc:	f7e4 faf4 	bl	80002a8 <__aeabi_dsub>
 801bcc0:	ec41 0b19 	vmov	d9, r0, r1
 801bcc4:	4642      	mov	r2, r8
 801bcc6:	464b      	mov	r3, r9
 801bcc8:	ec51 0b19 	vmov	r0, r1, d9
 801bccc:	f7e4 faee 	bl	80002ac <__adddf3>
 801bcd0:	2400      	movs	r4, #0
 801bcd2:	a379      	add	r3, pc, #484	; (adr r3, 801beb8 <__ieee754_pow+0x9e0>)
 801bcd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bcd8:	4620      	mov	r0, r4
 801bcda:	460d      	mov	r5, r1
 801bcdc:	f7e4 fc9c 	bl	8000618 <__aeabi_dmul>
 801bce0:	ec53 2b19 	vmov	r2, r3, d9
 801bce4:	4606      	mov	r6, r0
 801bce6:	460f      	mov	r7, r1
 801bce8:	4620      	mov	r0, r4
 801bcea:	4629      	mov	r1, r5
 801bcec:	f7e4 fadc 	bl	80002a8 <__aeabi_dsub>
 801bcf0:	4602      	mov	r2, r0
 801bcf2:	460b      	mov	r3, r1
 801bcf4:	4640      	mov	r0, r8
 801bcf6:	4649      	mov	r1, r9
 801bcf8:	f7e4 fad6 	bl	80002a8 <__aeabi_dsub>
 801bcfc:	a370      	add	r3, pc, #448	; (adr r3, 801bec0 <__ieee754_pow+0x9e8>)
 801bcfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bd02:	f7e4 fc89 	bl	8000618 <__aeabi_dmul>
 801bd06:	a370      	add	r3, pc, #448	; (adr r3, 801bec8 <__ieee754_pow+0x9f0>)
 801bd08:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bd0c:	4680      	mov	r8, r0
 801bd0e:	4689      	mov	r9, r1
 801bd10:	4620      	mov	r0, r4
 801bd12:	4629      	mov	r1, r5
 801bd14:	f7e4 fc80 	bl	8000618 <__aeabi_dmul>
 801bd18:	4602      	mov	r2, r0
 801bd1a:	460b      	mov	r3, r1
 801bd1c:	4640      	mov	r0, r8
 801bd1e:	4649      	mov	r1, r9
 801bd20:	f7e4 fac4 	bl	80002ac <__adddf3>
 801bd24:	4604      	mov	r4, r0
 801bd26:	460d      	mov	r5, r1
 801bd28:	4602      	mov	r2, r0
 801bd2a:	460b      	mov	r3, r1
 801bd2c:	4630      	mov	r0, r6
 801bd2e:	4639      	mov	r1, r7
 801bd30:	f7e4 fabc 	bl	80002ac <__adddf3>
 801bd34:	4632      	mov	r2, r6
 801bd36:	463b      	mov	r3, r7
 801bd38:	4680      	mov	r8, r0
 801bd3a:	4689      	mov	r9, r1
 801bd3c:	f7e4 fab4 	bl	80002a8 <__aeabi_dsub>
 801bd40:	4602      	mov	r2, r0
 801bd42:	460b      	mov	r3, r1
 801bd44:	4620      	mov	r0, r4
 801bd46:	4629      	mov	r1, r5
 801bd48:	f7e4 faae 	bl	80002a8 <__aeabi_dsub>
 801bd4c:	4642      	mov	r2, r8
 801bd4e:	4606      	mov	r6, r0
 801bd50:	460f      	mov	r7, r1
 801bd52:	464b      	mov	r3, r9
 801bd54:	4640      	mov	r0, r8
 801bd56:	4649      	mov	r1, r9
 801bd58:	f7e4 fc5e 	bl	8000618 <__aeabi_dmul>
 801bd5c:	a35c      	add	r3, pc, #368	; (adr r3, 801bed0 <__ieee754_pow+0x9f8>)
 801bd5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bd62:	4604      	mov	r4, r0
 801bd64:	460d      	mov	r5, r1
 801bd66:	f7e4 fc57 	bl	8000618 <__aeabi_dmul>
 801bd6a:	a35b      	add	r3, pc, #364	; (adr r3, 801bed8 <__ieee754_pow+0xa00>)
 801bd6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bd70:	f7e4 fa9a 	bl	80002a8 <__aeabi_dsub>
 801bd74:	4622      	mov	r2, r4
 801bd76:	462b      	mov	r3, r5
 801bd78:	f7e4 fc4e 	bl	8000618 <__aeabi_dmul>
 801bd7c:	a358      	add	r3, pc, #352	; (adr r3, 801bee0 <__ieee754_pow+0xa08>)
 801bd7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bd82:	f7e4 fa93 	bl	80002ac <__adddf3>
 801bd86:	4622      	mov	r2, r4
 801bd88:	462b      	mov	r3, r5
 801bd8a:	f7e4 fc45 	bl	8000618 <__aeabi_dmul>
 801bd8e:	a356      	add	r3, pc, #344	; (adr r3, 801bee8 <__ieee754_pow+0xa10>)
 801bd90:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bd94:	f7e4 fa88 	bl	80002a8 <__aeabi_dsub>
 801bd98:	4622      	mov	r2, r4
 801bd9a:	462b      	mov	r3, r5
 801bd9c:	f7e4 fc3c 	bl	8000618 <__aeabi_dmul>
 801bda0:	a353      	add	r3, pc, #332	; (adr r3, 801bef0 <__ieee754_pow+0xa18>)
 801bda2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bda6:	f7e4 fa81 	bl	80002ac <__adddf3>
 801bdaa:	4622      	mov	r2, r4
 801bdac:	462b      	mov	r3, r5
 801bdae:	f7e4 fc33 	bl	8000618 <__aeabi_dmul>
 801bdb2:	4602      	mov	r2, r0
 801bdb4:	460b      	mov	r3, r1
 801bdb6:	4640      	mov	r0, r8
 801bdb8:	4649      	mov	r1, r9
 801bdba:	f7e4 fa75 	bl	80002a8 <__aeabi_dsub>
 801bdbe:	4604      	mov	r4, r0
 801bdc0:	460d      	mov	r5, r1
 801bdc2:	4602      	mov	r2, r0
 801bdc4:	460b      	mov	r3, r1
 801bdc6:	4640      	mov	r0, r8
 801bdc8:	4649      	mov	r1, r9
 801bdca:	f7e4 fc25 	bl	8000618 <__aeabi_dmul>
 801bdce:	2200      	movs	r2, #0
 801bdd0:	ec41 0b19 	vmov	d9, r0, r1
 801bdd4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801bdd8:	4620      	mov	r0, r4
 801bdda:	4629      	mov	r1, r5
 801bddc:	f7e4 fa64 	bl	80002a8 <__aeabi_dsub>
 801bde0:	4602      	mov	r2, r0
 801bde2:	460b      	mov	r3, r1
 801bde4:	ec51 0b19 	vmov	r0, r1, d9
 801bde8:	f7e4 fd40 	bl	800086c <__aeabi_ddiv>
 801bdec:	4632      	mov	r2, r6
 801bdee:	4604      	mov	r4, r0
 801bdf0:	460d      	mov	r5, r1
 801bdf2:	463b      	mov	r3, r7
 801bdf4:	4640      	mov	r0, r8
 801bdf6:	4649      	mov	r1, r9
 801bdf8:	f7e4 fc0e 	bl	8000618 <__aeabi_dmul>
 801bdfc:	4632      	mov	r2, r6
 801bdfe:	463b      	mov	r3, r7
 801be00:	f7e4 fa54 	bl	80002ac <__adddf3>
 801be04:	4602      	mov	r2, r0
 801be06:	460b      	mov	r3, r1
 801be08:	4620      	mov	r0, r4
 801be0a:	4629      	mov	r1, r5
 801be0c:	f7e4 fa4c 	bl	80002a8 <__aeabi_dsub>
 801be10:	4642      	mov	r2, r8
 801be12:	464b      	mov	r3, r9
 801be14:	f7e4 fa48 	bl	80002a8 <__aeabi_dsub>
 801be18:	460b      	mov	r3, r1
 801be1a:	4602      	mov	r2, r0
 801be1c:	493a      	ldr	r1, [pc, #232]	; (801bf08 <__ieee754_pow+0xa30>)
 801be1e:	2000      	movs	r0, #0
 801be20:	f7e4 fa42 	bl	80002a8 <__aeabi_dsub>
 801be24:	e9cd 0100 	strd	r0, r1, [sp]
 801be28:	9b01      	ldr	r3, [sp, #4]
 801be2a:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 801be2e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801be32:	da2f      	bge.n	801be94 <__ieee754_pow+0x9bc>
 801be34:	4650      	mov	r0, sl
 801be36:	ed9d 0b00 	vldr	d0, [sp]
 801be3a:	f000 f9c1 	bl	801c1c0 <scalbn>
 801be3e:	ec51 0b10 	vmov	r0, r1, d0
 801be42:	ec53 2b18 	vmov	r2, r3, d8
 801be46:	f7ff bbe0 	b.w	801b60a <__ieee754_pow+0x132>
 801be4a:	4b30      	ldr	r3, [pc, #192]	; (801bf0c <__ieee754_pow+0xa34>)
 801be4c:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 801be50:	429e      	cmp	r6, r3
 801be52:	f77f af0b 	ble.w	801bc6c <__ieee754_pow+0x794>
 801be56:	4b2e      	ldr	r3, [pc, #184]	; (801bf10 <__ieee754_pow+0xa38>)
 801be58:	440b      	add	r3, r1
 801be5a:	4303      	orrs	r3, r0
 801be5c:	d00b      	beq.n	801be76 <__ieee754_pow+0x99e>
 801be5e:	a326      	add	r3, pc, #152	; (adr r3, 801bef8 <__ieee754_pow+0xa20>)
 801be60:	e9d3 2300 	ldrd	r2, r3, [r3]
 801be64:	ec51 0b18 	vmov	r0, r1, d8
 801be68:	f7e4 fbd6 	bl	8000618 <__aeabi_dmul>
 801be6c:	a322      	add	r3, pc, #136	; (adr r3, 801bef8 <__ieee754_pow+0xa20>)
 801be6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801be72:	f7ff bbca 	b.w	801b60a <__ieee754_pow+0x132>
 801be76:	4622      	mov	r2, r4
 801be78:	462b      	mov	r3, r5
 801be7a:	f7e4 fa15 	bl	80002a8 <__aeabi_dsub>
 801be7e:	4642      	mov	r2, r8
 801be80:	464b      	mov	r3, r9
 801be82:	f7e4 fe4f 	bl	8000b24 <__aeabi_dcmpge>
 801be86:	2800      	cmp	r0, #0
 801be88:	f43f aef0 	beq.w	801bc6c <__ieee754_pow+0x794>
 801be8c:	e7e7      	b.n	801be5e <__ieee754_pow+0x986>
 801be8e:	f04f 0a00 	mov.w	sl, #0
 801be92:	e717      	b.n	801bcc4 <__ieee754_pow+0x7ec>
 801be94:	e9dd 0100 	ldrd	r0, r1, [sp]
 801be98:	4619      	mov	r1, r3
 801be9a:	e7d2      	b.n	801be42 <__ieee754_pow+0x96a>
 801be9c:	491a      	ldr	r1, [pc, #104]	; (801bf08 <__ieee754_pow+0xa30>)
 801be9e:	2000      	movs	r0, #0
 801bea0:	f7ff bb9e 	b.w	801b5e0 <__ieee754_pow+0x108>
 801bea4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801bea8:	f7ff bb9a 	b.w	801b5e0 <__ieee754_pow+0x108>
 801beac:	9000      	str	r0, [sp, #0]
 801beae:	f7ff bb76 	b.w	801b59e <__ieee754_pow+0xc6>
 801beb2:	2100      	movs	r1, #0
 801beb4:	f7ff bb60 	b.w	801b578 <__ieee754_pow+0xa0>
 801beb8:	00000000 	.word	0x00000000
 801bebc:	3fe62e43 	.word	0x3fe62e43
 801bec0:	fefa39ef 	.word	0xfefa39ef
 801bec4:	3fe62e42 	.word	0x3fe62e42
 801bec8:	0ca86c39 	.word	0x0ca86c39
 801becc:	be205c61 	.word	0xbe205c61
 801bed0:	72bea4d0 	.word	0x72bea4d0
 801bed4:	3e663769 	.word	0x3e663769
 801bed8:	c5d26bf1 	.word	0xc5d26bf1
 801bedc:	3ebbbd41 	.word	0x3ebbbd41
 801bee0:	af25de2c 	.word	0xaf25de2c
 801bee4:	3f11566a 	.word	0x3f11566a
 801bee8:	16bebd93 	.word	0x16bebd93
 801beec:	3f66c16c 	.word	0x3f66c16c
 801bef0:	5555553e 	.word	0x5555553e
 801bef4:	3fc55555 	.word	0x3fc55555
 801bef8:	c2f8f359 	.word	0xc2f8f359
 801befc:	01a56e1f 	.word	0x01a56e1f
 801bf00:	3fe00000 	.word	0x3fe00000
 801bf04:	000fffff 	.word	0x000fffff
 801bf08:	3ff00000 	.word	0x3ff00000
 801bf0c:	4090cbff 	.word	0x4090cbff
 801bf10:	3f6f3400 	.word	0x3f6f3400
 801bf14:	652b82fe 	.word	0x652b82fe
 801bf18:	3c971547 	.word	0x3c971547

0801bf1c <__ieee754_sqrt>:
 801bf1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bf20:	ec55 4b10 	vmov	r4, r5, d0
 801bf24:	4e56      	ldr	r6, [pc, #344]	; (801c080 <__ieee754_sqrt+0x164>)
 801bf26:	43ae      	bics	r6, r5
 801bf28:	ee10 0a10 	vmov	r0, s0
 801bf2c:	ee10 3a10 	vmov	r3, s0
 801bf30:	4629      	mov	r1, r5
 801bf32:	462a      	mov	r2, r5
 801bf34:	d110      	bne.n	801bf58 <__ieee754_sqrt+0x3c>
 801bf36:	ee10 2a10 	vmov	r2, s0
 801bf3a:	462b      	mov	r3, r5
 801bf3c:	f7e4 fb6c 	bl	8000618 <__aeabi_dmul>
 801bf40:	4602      	mov	r2, r0
 801bf42:	460b      	mov	r3, r1
 801bf44:	4620      	mov	r0, r4
 801bf46:	4629      	mov	r1, r5
 801bf48:	f7e4 f9b0 	bl	80002ac <__adddf3>
 801bf4c:	4604      	mov	r4, r0
 801bf4e:	460d      	mov	r5, r1
 801bf50:	ec45 4b10 	vmov	d0, r4, r5
 801bf54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bf58:	2d00      	cmp	r5, #0
 801bf5a:	dc10      	bgt.n	801bf7e <__ieee754_sqrt+0x62>
 801bf5c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801bf60:	4330      	orrs	r0, r6
 801bf62:	d0f5      	beq.n	801bf50 <__ieee754_sqrt+0x34>
 801bf64:	b15d      	cbz	r5, 801bf7e <__ieee754_sqrt+0x62>
 801bf66:	ee10 2a10 	vmov	r2, s0
 801bf6a:	462b      	mov	r3, r5
 801bf6c:	ee10 0a10 	vmov	r0, s0
 801bf70:	f7e4 f99a 	bl	80002a8 <__aeabi_dsub>
 801bf74:	4602      	mov	r2, r0
 801bf76:	460b      	mov	r3, r1
 801bf78:	f7e4 fc78 	bl	800086c <__aeabi_ddiv>
 801bf7c:	e7e6      	b.n	801bf4c <__ieee754_sqrt+0x30>
 801bf7e:	1509      	asrs	r1, r1, #20
 801bf80:	d076      	beq.n	801c070 <__ieee754_sqrt+0x154>
 801bf82:	f3c2 0213 	ubfx	r2, r2, #0, #20
 801bf86:	07ce      	lsls	r6, r1, #31
 801bf88:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 801bf8c:	bf5e      	ittt	pl
 801bf8e:	0fda      	lsrpl	r2, r3, #31
 801bf90:	005b      	lslpl	r3, r3, #1
 801bf92:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 801bf96:	0fda      	lsrs	r2, r3, #31
 801bf98:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 801bf9c:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 801bfa0:	2000      	movs	r0, #0
 801bfa2:	106d      	asrs	r5, r5, #1
 801bfa4:	005b      	lsls	r3, r3, #1
 801bfa6:	f04f 0e16 	mov.w	lr, #22
 801bfaa:	4684      	mov	ip, r0
 801bfac:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801bfb0:	eb0c 0401 	add.w	r4, ip, r1
 801bfb4:	4294      	cmp	r4, r2
 801bfb6:	bfde      	ittt	le
 801bfb8:	1b12      	suble	r2, r2, r4
 801bfba:	eb04 0c01 	addle.w	ip, r4, r1
 801bfbe:	1840      	addle	r0, r0, r1
 801bfc0:	0052      	lsls	r2, r2, #1
 801bfc2:	f1be 0e01 	subs.w	lr, lr, #1
 801bfc6:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 801bfca:	ea4f 0151 	mov.w	r1, r1, lsr #1
 801bfce:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801bfd2:	d1ed      	bne.n	801bfb0 <__ieee754_sqrt+0x94>
 801bfd4:	4671      	mov	r1, lr
 801bfd6:	2720      	movs	r7, #32
 801bfd8:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 801bfdc:	4562      	cmp	r2, ip
 801bfde:	eb04 060e 	add.w	r6, r4, lr
 801bfe2:	dc02      	bgt.n	801bfea <__ieee754_sqrt+0xce>
 801bfe4:	d113      	bne.n	801c00e <__ieee754_sqrt+0xf2>
 801bfe6:	429e      	cmp	r6, r3
 801bfe8:	d811      	bhi.n	801c00e <__ieee754_sqrt+0xf2>
 801bfea:	2e00      	cmp	r6, #0
 801bfec:	eb06 0e04 	add.w	lr, r6, r4
 801bff0:	da43      	bge.n	801c07a <__ieee754_sqrt+0x15e>
 801bff2:	f1be 0f00 	cmp.w	lr, #0
 801bff6:	db40      	blt.n	801c07a <__ieee754_sqrt+0x15e>
 801bff8:	f10c 0801 	add.w	r8, ip, #1
 801bffc:	eba2 020c 	sub.w	r2, r2, ip
 801c000:	429e      	cmp	r6, r3
 801c002:	bf88      	it	hi
 801c004:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801c008:	1b9b      	subs	r3, r3, r6
 801c00a:	4421      	add	r1, r4
 801c00c:	46c4      	mov	ip, r8
 801c00e:	0052      	lsls	r2, r2, #1
 801c010:	3f01      	subs	r7, #1
 801c012:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 801c016:	ea4f 0454 	mov.w	r4, r4, lsr #1
 801c01a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801c01e:	d1dd      	bne.n	801bfdc <__ieee754_sqrt+0xc0>
 801c020:	4313      	orrs	r3, r2
 801c022:	d006      	beq.n	801c032 <__ieee754_sqrt+0x116>
 801c024:	1c4c      	adds	r4, r1, #1
 801c026:	bf13      	iteet	ne
 801c028:	3101      	addne	r1, #1
 801c02a:	3001      	addeq	r0, #1
 801c02c:	4639      	moveq	r1, r7
 801c02e:	f021 0101 	bicne.w	r1, r1, #1
 801c032:	1043      	asrs	r3, r0, #1
 801c034:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 801c038:	0849      	lsrs	r1, r1, #1
 801c03a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 801c03e:	07c2      	lsls	r2, r0, #31
 801c040:	bf48      	it	mi
 801c042:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 801c046:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 801c04a:	460c      	mov	r4, r1
 801c04c:	463d      	mov	r5, r7
 801c04e:	e77f      	b.n	801bf50 <__ieee754_sqrt+0x34>
 801c050:	0ada      	lsrs	r2, r3, #11
 801c052:	3815      	subs	r0, #21
 801c054:	055b      	lsls	r3, r3, #21
 801c056:	2a00      	cmp	r2, #0
 801c058:	d0fa      	beq.n	801c050 <__ieee754_sqrt+0x134>
 801c05a:	02d7      	lsls	r7, r2, #11
 801c05c:	d50a      	bpl.n	801c074 <__ieee754_sqrt+0x158>
 801c05e:	f1c1 0420 	rsb	r4, r1, #32
 801c062:	fa23 f404 	lsr.w	r4, r3, r4
 801c066:	1e4d      	subs	r5, r1, #1
 801c068:	408b      	lsls	r3, r1
 801c06a:	4322      	orrs	r2, r4
 801c06c:	1b41      	subs	r1, r0, r5
 801c06e:	e788      	b.n	801bf82 <__ieee754_sqrt+0x66>
 801c070:	4608      	mov	r0, r1
 801c072:	e7f0      	b.n	801c056 <__ieee754_sqrt+0x13a>
 801c074:	0052      	lsls	r2, r2, #1
 801c076:	3101      	adds	r1, #1
 801c078:	e7ef      	b.n	801c05a <__ieee754_sqrt+0x13e>
 801c07a:	46e0      	mov	r8, ip
 801c07c:	e7be      	b.n	801bffc <__ieee754_sqrt+0xe0>
 801c07e:	bf00      	nop
 801c080:	7ff00000 	.word	0x7ff00000

0801c084 <fabs>:
 801c084:	ec51 0b10 	vmov	r0, r1, d0
 801c088:	ee10 2a10 	vmov	r2, s0
 801c08c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801c090:	ec43 2b10 	vmov	d0, r2, r3
 801c094:	4770      	bx	lr

0801c096 <finite>:
 801c096:	b082      	sub	sp, #8
 801c098:	ed8d 0b00 	vstr	d0, [sp]
 801c09c:	9801      	ldr	r0, [sp, #4]
 801c09e:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 801c0a2:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 801c0a6:	0fc0      	lsrs	r0, r0, #31
 801c0a8:	b002      	add	sp, #8
 801c0aa:	4770      	bx	lr

0801c0ac <rint>:
 801c0ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801c0ae:	ec51 0b10 	vmov	r0, r1, d0
 801c0b2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801c0b6:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 801c0ba:	2e13      	cmp	r6, #19
 801c0bc:	ee10 4a10 	vmov	r4, s0
 801c0c0:	460b      	mov	r3, r1
 801c0c2:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 801c0c6:	dc58      	bgt.n	801c17a <rint+0xce>
 801c0c8:	2e00      	cmp	r6, #0
 801c0ca:	da2b      	bge.n	801c124 <rint+0x78>
 801c0cc:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 801c0d0:	4302      	orrs	r2, r0
 801c0d2:	d023      	beq.n	801c11c <rint+0x70>
 801c0d4:	f3c1 0213 	ubfx	r2, r1, #0, #20
 801c0d8:	4302      	orrs	r2, r0
 801c0da:	4254      	negs	r4, r2
 801c0dc:	4314      	orrs	r4, r2
 801c0de:	0c4b      	lsrs	r3, r1, #17
 801c0e0:	0b24      	lsrs	r4, r4, #12
 801c0e2:	045b      	lsls	r3, r3, #17
 801c0e4:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 801c0e8:	ea44 0103 	orr.w	r1, r4, r3
 801c0ec:	4b32      	ldr	r3, [pc, #200]	; (801c1b8 <rint+0x10c>)
 801c0ee:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801c0f2:	e9d3 6700 	ldrd	r6, r7, [r3]
 801c0f6:	4602      	mov	r2, r0
 801c0f8:	460b      	mov	r3, r1
 801c0fa:	4630      	mov	r0, r6
 801c0fc:	4639      	mov	r1, r7
 801c0fe:	f7e4 f8d5 	bl	80002ac <__adddf3>
 801c102:	e9cd 0100 	strd	r0, r1, [sp]
 801c106:	463b      	mov	r3, r7
 801c108:	e9dd 0100 	ldrd	r0, r1, [sp]
 801c10c:	4632      	mov	r2, r6
 801c10e:	f7e4 f8cb 	bl	80002a8 <__aeabi_dsub>
 801c112:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801c116:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 801c11a:	4639      	mov	r1, r7
 801c11c:	ec41 0b10 	vmov	d0, r0, r1
 801c120:	b003      	add	sp, #12
 801c122:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c124:	4a25      	ldr	r2, [pc, #148]	; (801c1bc <rint+0x110>)
 801c126:	4132      	asrs	r2, r6
 801c128:	ea01 0702 	and.w	r7, r1, r2
 801c12c:	4307      	orrs	r7, r0
 801c12e:	d0f5      	beq.n	801c11c <rint+0x70>
 801c130:	0851      	lsrs	r1, r2, #1
 801c132:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 801c136:	4314      	orrs	r4, r2
 801c138:	d00c      	beq.n	801c154 <rint+0xa8>
 801c13a:	ea23 0201 	bic.w	r2, r3, r1
 801c13e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 801c142:	2e13      	cmp	r6, #19
 801c144:	fa43 f606 	asr.w	r6, r3, r6
 801c148:	bf0c      	ite	eq
 801c14a:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 801c14e:	2400      	movne	r4, #0
 801c150:	ea42 0306 	orr.w	r3, r2, r6
 801c154:	4918      	ldr	r1, [pc, #96]	; (801c1b8 <rint+0x10c>)
 801c156:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 801c15a:	4622      	mov	r2, r4
 801c15c:	e9d5 4500 	ldrd	r4, r5, [r5]
 801c160:	4620      	mov	r0, r4
 801c162:	4629      	mov	r1, r5
 801c164:	f7e4 f8a2 	bl	80002ac <__adddf3>
 801c168:	e9cd 0100 	strd	r0, r1, [sp]
 801c16c:	e9dd 0100 	ldrd	r0, r1, [sp]
 801c170:	4622      	mov	r2, r4
 801c172:	462b      	mov	r3, r5
 801c174:	f7e4 f898 	bl	80002a8 <__aeabi_dsub>
 801c178:	e7d0      	b.n	801c11c <rint+0x70>
 801c17a:	2e33      	cmp	r6, #51	; 0x33
 801c17c:	dd07      	ble.n	801c18e <rint+0xe2>
 801c17e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801c182:	d1cb      	bne.n	801c11c <rint+0x70>
 801c184:	ee10 2a10 	vmov	r2, s0
 801c188:	f7e4 f890 	bl	80002ac <__adddf3>
 801c18c:	e7c6      	b.n	801c11c <rint+0x70>
 801c18e:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 801c192:	f04f 36ff 	mov.w	r6, #4294967295
 801c196:	40d6      	lsrs	r6, r2
 801c198:	4230      	tst	r0, r6
 801c19a:	d0bf      	beq.n	801c11c <rint+0x70>
 801c19c:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 801c1a0:	ea4f 0156 	mov.w	r1, r6, lsr #1
 801c1a4:	bf1f      	itttt	ne
 801c1a6:	ea24 0101 	bicne.w	r1, r4, r1
 801c1aa:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 801c1ae:	fa44 f202 	asrne.w	r2, r4, r2
 801c1b2:	ea41 0402 	orrne.w	r4, r1, r2
 801c1b6:	e7cd      	b.n	801c154 <rint+0xa8>
 801c1b8:	08020020 	.word	0x08020020
 801c1bc:	000fffff 	.word	0x000fffff

0801c1c0 <scalbn>:
 801c1c0:	b570      	push	{r4, r5, r6, lr}
 801c1c2:	ec55 4b10 	vmov	r4, r5, d0
 801c1c6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801c1ca:	4606      	mov	r6, r0
 801c1cc:	462b      	mov	r3, r5
 801c1ce:	b99a      	cbnz	r2, 801c1f8 <scalbn+0x38>
 801c1d0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801c1d4:	4323      	orrs	r3, r4
 801c1d6:	d036      	beq.n	801c246 <scalbn+0x86>
 801c1d8:	4b39      	ldr	r3, [pc, #228]	; (801c2c0 <scalbn+0x100>)
 801c1da:	4629      	mov	r1, r5
 801c1dc:	ee10 0a10 	vmov	r0, s0
 801c1e0:	2200      	movs	r2, #0
 801c1e2:	f7e4 fa19 	bl	8000618 <__aeabi_dmul>
 801c1e6:	4b37      	ldr	r3, [pc, #220]	; (801c2c4 <scalbn+0x104>)
 801c1e8:	429e      	cmp	r6, r3
 801c1ea:	4604      	mov	r4, r0
 801c1ec:	460d      	mov	r5, r1
 801c1ee:	da10      	bge.n	801c212 <scalbn+0x52>
 801c1f0:	a32b      	add	r3, pc, #172	; (adr r3, 801c2a0 <scalbn+0xe0>)
 801c1f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c1f6:	e03a      	b.n	801c26e <scalbn+0xae>
 801c1f8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 801c1fc:	428a      	cmp	r2, r1
 801c1fe:	d10c      	bne.n	801c21a <scalbn+0x5a>
 801c200:	ee10 2a10 	vmov	r2, s0
 801c204:	4620      	mov	r0, r4
 801c206:	4629      	mov	r1, r5
 801c208:	f7e4 f850 	bl	80002ac <__adddf3>
 801c20c:	4604      	mov	r4, r0
 801c20e:	460d      	mov	r5, r1
 801c210:	e019      	b.n	801c246 <scalbn+0x86>
 801c212:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801c216:	460b      	mov	r3, r1
 801c218:	3a36      	subs	r2, #54	; 0x36
 801c21a:	4432      	add	r2, r6
 801c21c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801c220:	428a      	cmp	r2, r1
 801c222:	dd08      	ble.n	801c236 <scalbn+0x76>
 801c224:	2d00      	cmp	r5, #0
 801c226:	a120      	add	r1, pc, #128	; (adr r1, 801c2a8 <scalbn+0xe8>)
 801c228:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c22c:	da1c      	bge.n	801c268 <scalbn+0xa8>
 801c22e:	a120      	add	r1, pc, #128	; (adr r1, 801c2b0 <scalbn+0xf0>)
 801c230:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c234:	e018      	b.n	801c268 <scalbn+0xa8>
 801c236:	2a00      	cmp	r2, #0
 801c238:	dd08      	ble.n	801c24c <scalbn+0x8c>
 801c23a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801c23e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801c242:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801c246:	ec45 4b10 	vmov	d0, r4, r5
 801c24a:	bd70      	pop	{r4, r5, r6, pc}
 801c24c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801c250:	da19      	bge.n	801c286 <scalbn+0xc6>
 801c252:	f24c 3350 	movw	r3, #50000	; 0xc350
 801c256:	429e      	cmp	r6, r3
 801c258:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 801c25c:	dd0a      	ble.n	801c274 <scalbn+0xb4>
 801c25e:	a112      	add	r1, pc, #72	; (adr r1, 801c2a8 <scalbn+0xe8>)
 801c260:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c264:	2b00      	cmp	r3, #0
 801c266:	d1e2      	bne.n	801c22e <scalbn+0x6e>
 801c268:	a30f      	add	r3, pc, #60	; (adr r3, 801c2a8 <scalbn+0xe8>)
 801c26a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c26e:	f7e4 f9d3 	bl	8000618 <__aeabi_dmul>
 801c272:	e7cb      	b.n	801c20c <scalbn+0x4c>
 801c274:	a10a      	add	r1, pc, #40	; (adr r1, 801c2a0 <scalbn+0xe0>)
 801c276:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c27a:	2b00      	cmp	r3, #0
 801c27c:	d0b8      	beq.n	801c1f0 <scalbn+0x30>
 801c27e:	a10e      	add	r1, pc, #56	; (adr r1, 801c2b8 <scalbn+0xf8>)
 801c280:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c284:	e7b4      	b.n	801c1f0 <scalbn+0x30>
 801c286:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801c28a:	3236      	adds	r2, #54	; 0x36
 801c28c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801c290:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801c294:	4620      	mov	r0, r4
 801c296:	4b0c      	ldr	r3, [pc, #48]	; (801c2c8 <scalbn+0x108>)
 801c298:	2200      	movs	r2, #0
 801c29a:	e7e8      	b.n	801c26e <scalbn+0xae>
 801c29c:	f3af 8000 	nop.w
 801c2a0:	c2f8f359 	.word	0xc2f8f359
 801c2a4:	01a56e1f 	.word	0x01a56e1f
 801c2a8:	8800759c 	.word	0x8800759c
 801c2ac:	7e37e43c 	.word	0x7e37e43c
 801c2b0:	8800759c 	.word	0x8800759c
 801c2b4:	fe37e43c 	.word	0xfe37e43c
 801c2b8:	c2f8f359 	.word	0xc2f8f359
 801c2bc:	81a56e1f 	.word	0x81a56e1f
 801c2c0:	43500000 	.word	0x43500000
 801c2c4:	ffff3cb0 	.word	0xffff3cb0
 801c2c8:	3c900000 	.word	0x3c900000

0801c2cc <_init>:
 801c2cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c2ce:	bf00      	nop
 801c2d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c2d2:	bc08      	pop	{r3}
 801c2d4:	469e      	mov	lr, r3
 801c2d6:	4770      	bx	lr

0801c2d8 <_fini>:
 801c2d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c2da:	bf00      	nop
 801c2dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c2de:	bc08      	pop	{r3}
 801c2e0:	469e      	mov	lr, r3
 801c2e2:	4770      	bx	lr
