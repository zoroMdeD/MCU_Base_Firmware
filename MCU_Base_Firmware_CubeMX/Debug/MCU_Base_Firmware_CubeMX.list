
MCU_Base_Firmware_CubeMX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001fc44  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000046d0  0801fdd8  0801fdd8  0002fdd8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080244a8  080244a8  0004025c  2**0
                  CONTENTS
  4 .ARM          00000008  080244a8  080244a8  000344a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080244b0  080244b0  0004025c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080244b0  080244b0  000344b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080244b4  080244b4  000344b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000025c  20000000  080244b8  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00007424  20000260  08024714  00040260  2**3
                  ALLOC
 10 ._user_heap_stack 00006004  20007684  08024714  00047684  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0004025c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0007ccf5  00000000  00000000  0004028c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000a27b  00000000  00000000  000bcf81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002520  00000000  00000000  000c7200  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000023b8  00000000  00000000  000c9720  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000391f9  00000000  00000000  000cbad8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000465a8  00000000  00000000  00104cd1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f4db1  00000000  00000000  0014b279  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0024002a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000ade8  00000000  00000000  00240080  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000260 	.word	0x20000260
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801fdbc 	.word	0x0801fdbc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000264 	.word	0x20000264
 80001cc:	0801fdbc 	.word	0x0801fdbc

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9a4 	b.w	8001008 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	468c      	mov	ip, r1
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	f040 8083 	bne.w	8000e5a <__udivmoddi4+0x116>
 8000d54:	428a      	cmp	r2, r1
 8000d56:	4617      	mov	r7, r2
 8000d58:	d947      	bls.n	8000dea <__udivmoddi4+0xa6>
 8000d5a:	fab2 f282 	clz	r2, r2
 8000d5e:	b142      	cbz	r2, 8000d72 <__udivmoddi4+0x2e>
 8000d60:	f1c2 0020 	rsb	r0, r2, #32
 8000d64:	fa24 f000 	lsr.w	r0, r4, r0
 8000d68:	4091      	lsls	r1, r2
 8000d6a:	4097      	lsls	r7, r2
 8000d6c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d70:	4094      	lsls	r4, r2
 8000d72:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d76:	0c23      	lsrs	r3, r4, #16
 8000d78:	fbbc f6f8 	udiv	r6, ip, r8
 8000d7c:	fa1f fe87 	uxth.w	lr, r7
 8000d80:	fb08 c116 	mls	r1, r8, r6, ip
 8000d84:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d88:	fb06 f10e 	mul.w	r1, r6, lr
 8000d8c:	4299      	cmp	r1, r3
 8000d8e:	d909      	bls.n	8000da4 <__udivmoddi4+0x60>
 8000d90:	18fb      	adds	r3, r7, r3
 8000d92:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d96:	f080 8119 	bcs.w	8000fcc <__udivmoddi4+0x288>
 8000d9a:	4299      	cmp	r1, r3
 8000d9c:	f240 8116 	bls.w	8000fcc <__udivmoddi4+0x288>
 8000da0:	3e02      	subs	r6, #2
 8000da2:	443b      	add	r3, r7
 8000da4:	1a5b      	subs	r3, r3, r1
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dac:	fb08 3310 	mls	r3, r8, r0, r3
 8000db0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000db4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000db8:	45a6      	cmp	lr, r4
 8000dba:	d909      	bls.n	8000dd0 <__udivmoddi4+0x8c>
 8000dbc:	193c      	adds	r4, r7, r4
 8000dbe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dc2:	f080 8105 	bcs.w	8000fd0 <__udivmoddi4+0x28c>
 8000dc6:	45a6      	cmp	lr, r4
 8000dc8:	f240 8102 	bls.w	8000fd0 <__udivmoddi4+0x28c>
 8000dcc:	3802      	subs	r0, #2
 8000dce:	443c      	add	r4, r7
 8000dd0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dd4:	eba4 040e 	sub.w	r4, r4, lr
 8000dd8:	2600      	movs	r6, #0
 8000dda:	b11d      	cbz	r5, 8000de4 <__udivmoddi4+0xa0>
 8000ddc:	40d4      	lsrs	r4, r2
 8000dde:	2300      	movs	r3, #0
 8000de0:	e9c5 4300 	strd	r4, r3, [r5]
 8000de4:	4631      	mov	r1, r6
 8000de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dea:	b902      	cbnz	r2, 8000dee <__udivmoddi4+0xaa>
 8000dec:	deff      	udf	#255	; 0xff
 8000dee:	fab2 f282 	clz	r2, r2
 8000df2:	2a00      	cmp	r2, #0
 8000df4:	d150      	bne.n	8000e98 <__udivmoddi4+0x154>
 8000df6:	1bcb      	subs	r3, r1, r7
 8000df8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dfc:	fa1f f887 	uxth.w	r8, r7
 8000e00:	2601      	movs	r6, #1
 8000e02:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e06:	0c21      	lsrs	r1, r4, #16
 8000e08:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e0c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e10:	fb08 f30c 	mul.w	r3, r8, ip
 8000e14:	428b      	cmp	r3, r1
 8000e16:	d907      	bls.n	8000e28 <__udivmoddi4+0xe4>
 8000e18:	1879      	adds	r1, r7, r1
 8000e1a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e1e:	d202      	bcs.n	8000e26 <__udivmoddi4+0xe2>
 8000e20:	428b      	cmp	r3, r1
 8000e22:	f200 80e9 	bhi.w	8000ff8 <__udivmoddi4+0x2b4>
 8000e26:	4684      	mov	ip, r0
 8000e28:	1ac9      	subs	r1, r1, r3
 8000e2a:	b2a3      	uxth	r3, r4
 8000e2c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e30:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e34:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e38:	fb08 f800 	mul.w	r8, r8, r0
 8000e3c:	45a0      	cmp	r8, r4
 8000e3e:	d907      	bls.n	8000e50 <__udivmoddi4+0x10c>
 8000e40:	193c      	adds	r4, r7, r4
 8000e42:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x10a>
 8000e48:	45a0      	cmp	r8, r4
 8000e4a:	f200 80d9 	bhi.w	8001000 <__udivmoddi4+0x2bc>
 8000e4e:	4618      	mov	r0, r3
 8000e50:	eba4 0408 	sub.w	r4, r4, r8
 8000e54:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e58:	e7bf      	b.n	8000dda <__udivmoddi4+0x96>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d909      	bls.n	8000e72 <__udivmoddi4+0x12e>
 8000e5e:	2d00      	cmp	r5, #0
 8000e60:	f000 80b1 	beq.w	8000fc6 <__udivmoddi4+0x282>
 8000e64:	2600      	movs	r6, #0
 8000e66:	e9c5 0100 	strd	r0, r1, [r5]
 8000e6a:	4630      	mov	r0, r6
 8000e6c:	4631      	mov	r1, r6
 8000e6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e72:	fab3 f683 	clz	r6, r3
 8000e76:	2e00      	cmp	r6, #0
 8000e78:	d14a      	bne.n	8000f10 <__udivmoddi4+0x1cc>
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	d302      	bcc.n	8000e84 <__udivmoddi4+0x140>
 8000e7e:	4282      	cmp	r2, r0
 8000e80:	f200 80b8 	bhi.w	8000ff4 <__udivmoddi4+0x2b0>
 8000e84:	1a84      	subs	r4, r0, r2
 8000e86:	eb61 0103 	sbc.w	r1, r1, r3
 8000e8a:	2001      	movs	r0, #1
 8000e8c:	468c      	mov	ip, r1
 8000e8e:	2d00      	cmp	r5, #0
 8000e90:	d0a8      	beq.n	8000de4 <__udivmoddi4+0xa0>
 8000e92:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e96:	e7a5      	b.n	8000de4 <__udivmoddi4+0xa0>
 8000e98:	f1c2 0320 	rsb	r3, r2, #32
 8000e9c:	fa20 f603 	lsr.w	r6, r0, r3
 8000ea0:	4097      	lsls	r7, r2
 8000ea2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ea6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000eaa:	40d9      	lsrs	r1, r3
 8000eac:	4330      	orrs	r0, r6
 8000eae:	0c03      	lsrs	r3, r0, #16
 8000eb0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000eb4:	fa1f f887 	uxth.w	r8, r7
 8000eb8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000ebc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ec0:	fb06 f108 	mul.w	r1, r6, r8
 8000ec4:	4299      	cmp	r1, r3
 8000ec6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eca:	d909      	bls.n	8000ee0 <__udivmoddi4+0x19c>
 8000ecc:	18fb      	adds	r3, r7, r3
 8000ece:	f106 3cff 	add.w	ip, r6, #4294967295
 8000ed2:	f080 808d 	bcs.w	8000ff0 <__udivmoddi4+0x2ac>
 8000ed6:	4299      	cmp	r1, r3
 8000ed8:	f240 808a 	bls.w	8000ff0 <__udivmoddi4+0x2ac>
 8000edc:	3e02      	subs	r6, #2
 8000ede:	443b      	add	r3, r7
 8000ee0:	1a5b      	subs	r3, r3, r1
 8000ee2:	b281      	uxth	r1, r0
 8000ee4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ee8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef0:	fb00 f308 	mul.w	r3, r0, r8
 8000ef4:	428b      	cmp	r3, r1
 8000ef6:	d907      	bls.n	8000f08 <__udivmoddi4+0x1c4>
 8000ef8:	1879      	adds	r1, r7, r1
 8000efa:	f100 3cff 	add.w	ip, r0, #4294967295
 8000efe:	d273      	bcs.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f00:	428b      	cmp	r3, r1
 8000f02:	d971      	bls.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f04:	3802      	subs	r0, #2
 8000f06:	4439      	add	r1, r7
 8000f08:	1acb      	subs	r3, r1, r3
 8000f0a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f0e:	e778      	b.n	8000e02 <__udivmoddi4+0xbe>
 8000f10:	f1c6 0c20 	rsb	ip, r6, #32
 8000f14:	fa03 f406 	lsl.w	r4, r3, r6
 8000f18:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f1c:	431c      	orrs	r4, r3
 8000f1e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f22:	fa01 f306 	lsl.w	r3, r1, r6
 8000f26:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f2a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f2e:	431f      	orrs	r7, r3
 8000f30:	0c3b      	lsrs	r3, r7, #16
 8000f32:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f36:	fa1f f884 	uxth.w	r8, r4
 8000f3a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f3e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f42:	fb09 fa08 	mul.w	sl, r9, r8
 8000f46:	458a      	cmp	sl, r1
 8000f48:	fa02 f206 	lsl.w	r2, r2, r6
 8000f4c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f50:	d908      	bls.n	8000f64 <__udivmoddi4+0x220>
 8000f52:	1861      	adds	r1, r4, r1
 8000f54:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f58:	d248      	bcs.n	8000fec <__udivmoddi4+0x2a8>
 8000f5a:	458a      	cmp	sl, r1
 8000f5c:	d946      	bls.n	8000fec <__udivmoddi4+0x2a8>
 8000f5e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f62:	4421      	add	r1, r4
 8000f64:	eba1 010a 	sub.w	r1, r1, sl
 8000f68:	b2bf      	uxth	r7, r7
 8000f6a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f6e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f72:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f76:	fb00 f808 	mul.w	r8, r0, r8
 8000f7a:	45b8      	cmp	r8, r7
 8000f7c:	d907      	bls.n	8000f8e <__udivmoddi4+0x24a>
 8000f7e:	19e7      	adds	r7, r4, r7
 8000f80:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f84:	d22e      	bcs.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f86:	45b8      	cmp	r8, r7
 8000f88:	d92c      	bls.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f8a:	3802      	subs	r0, #2
 8000f8c:	4427      	add	r7, r4
 8000f8e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f92:	eba7 0708 	sub.w	r7, r7, r8
 8000f96:	fba0 8902 	umull	r8, r9, r0, r2
 8000f9a:	454f      	cmp	r7, r9
 8000f9c:	46c6      	mov	lr, r8
 8000f9e:	4649      	mov	r1, r9
 8000fa0:	d31a      	bcc.n	8000fd8 <__udivmoddi4+0x294>
 8000fa2:	d017      	beq.n	8000fd4 <__udivmoddi4+0x290>
 8000fa4:	b15d      	cbz	r5, 8000fbe <__udivmoddi4+0x27a>
 8000fa6:	ebb3 020e 	subs.w	r2, r3, lr
 8000faa:	eb67 0701 	sbc.w	r7, r7, r1
 8000fae:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fb2:	40f2      	lsrs	r2, r6
 8000fb4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fb8:	40f7      	lsrs	r7, r6
 8000fba:	e9c5 2700 	strd	r2, r7, [r5]
 8000fbe:	2600      	movs	r6, #0
 8000fc0:	4631      	mov	r1, r6
 8000fc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fc6:	462e      	mov	r6, r5
 8000fc8:	4628      	mov	r0, r5
 8000fca:	e70b      	b.n	8000de4 <__udivmoddi4+0xa0>
 8000fcc:	4606      	mov	r6, r0
 8000fce:	e6e9      	b.n	8000da4 <__udivmoddi4+0x60>
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	e6fd      	b.n	8000dd0 <__udivmoddi4+0x8c>
 8000fd4:	4543      	cmp	r3, r8
 8000fd6:	d2e5      	bcs.n	8000fa4 <__udivmoddi4+0x260>
 8000fd8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fdc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fe0:	3801      	subs	r0, #1
 8000fe2:	e7df      	b.n	8000fa4 <__udivmoddi4+0x260>
 8000fe4:	4608      	mov	r0, r1
 8000fe6:	e7d2      	b.n	8000f8e <__udivmoddi4+0x24a>
 8000fe8:	4660      	mov	r0, ip
 8000fea:	e78d      	b.n	8000f08 <__udivmoddi4+0x1c4>
 8000fec:	4681      	mov	r9, r0
 8000fee:	e7b9      	b.n	8000f64 <__udivmoddi4+0x220>
 8000ff0:	4666      	mov	r6, ip
 8000ff2:	e775      	b.n	8000ee0 <__udivmoddi4+0x19c>
 8000ff4:	4630      	mov	r0, r6
 8000ff6:	e74a      	b.n	8000e8e <__udivmoddi4+0x14a>
 8000ff8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ffc:	4439      	add	r1, r7
 8000ffe:	e713      	b.n	8000e28 <__udivmoddi4+0xe4>
 8001000:	3802      	subs	r0, #2
 8001002:	443c      	add	r4, r7
 8001004:	e724      	b.n	8000e50 <__udivmoddi4+0x10c>
 8001006:	bf00      	nop

08001008 <__aeabi_idiv0>:
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop

0800100c <cJSON_strcasecmp>:
static const char *ep;

const char *cJSON_GetErrorPtr(void) {return ep;}

static int cJSON_strcasecmp(const char *s1,const char *s2)
{
 800100c:	b480      	push	{r7}
 800100e:	b085      	sub	sp, #20
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
 8001014:	6039      	str	r1, [r7, #0]
	if (!s1)
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	2b00      	cmp	r3, #0
 800101a:	d107      	bne.n	800102c <cJSON_strcasecmp+0x20>
		return (s1==s2)?0:1;
 800101c:	687a      	ldr	r2, [r7, #4]
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	429a      	cmp	r2, r3
 8001022:	bf14      	ite	ne
 8001024:	2301      	movne	r3, #1
 8001026:	2300      	moveq	r3, #0
 8001028:	b2db      	uxtb	r3, r3
 800102a:	e055      	b.n	80010d8 <cJSON_strcasecmp+0xcc>
	if (!s2)
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	2b00      	cmp	r3, #0
 8001030:	d10d      	bne.n	800104e <cJSON_strcasecmp+0x42>
		return 1;
 8001032:	2301      	movs	r3, #1
 8001034:	e050      	b.n	80010d8 <cJSON_strcasecmp+0xcc>
	for(; tolower(*s1) == tolower(*s2); ++s1, ++s2)
		if(*s1 == 0)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	781b      	ldrb	r3, [r3, #0]
 800103a:	2b00      	cmp	r3, #0
 800103c:	d101      	bne.n	8001042 <cJSON_strcasecmp+0x36>
			return 0;
 800103e:	2300      	movs	r3, #0
 8001040:	e04a      	b.n	80010d8 <cJSON_strcasecmp+0xcc>
	for(; tolower(*s1) == tolower(*s2); ++s1, ++s2)
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	3301      	adds	r3, #1
 8001046:	607b      	str	r3, [r7, #4]
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	3301      	adds	r3, #1
 800104c:	603b      	str	r3, [r7, #0]
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	781b      	ldrb	r3, [r3, #0]
 8001052:	73fb      	strb	r3, [r7, #15]
 8001054:	7bfb      	ldrb	r3, [r7, #15]
 8001056:	3301      	adds	r3, #1
 8001058:	4a22      	ldr	r2, [pc, #136]	; (80010e4 <cJSON_strcasecmp+0xd8>)
 800105a:	4413      	add	r3, r2
 800105c:	781b      	ldrb	r3, [r3, #0]
 800105e:	f003 0303 	and.w	r3, r3, #3
 8001062:	2b01      	cmp	r3, #1
 8001064:	d103      	bne.n	800106e <cJSON_strcasecmp+0x62>
 8001066:	7bfb      	ldrb	r3, [r7, #15]
 8001068:	f103 0220 	add.w	r2, r3, #32
 800106c:	e000      	b.n	8001070 <cJSON_strcasecmp+0x64>
 800106e:	7bfa      	ldrb	r2, [r7, #15]
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	781b      	ldrb	r3, [r3, #0]
 8001074:	73bb      	strb	r3, [r7, #14]
 8001076:	7bbb      	ldrb	r3, [r7, #14]
 8001078:	3301      	adds	r3, #1
 800107a:	491a      	ldr	r1, [pc, #104]	; (80010e4 <cJSON_strcasecmp+0xd8>)
 800107c:	440b      	add	r3, r1
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	f003 0303 	and.w	r3, r3, #3
 8001084:	2b01      	cmp	r3, #1
 8001086:	d102      	bne.n	800108e <cJSON_strcasecmp+0x82>
 8001088:	7bbb      	ldrb	r3, [r7, #14]
 800108a:	3320      	adds	r3, #32
 800108c:	e000      	b.n	8001090 <cJSON_strcasecmp+0x84>
 800108e:	7bbb      	ldrb	r3, [r7, #14]
 8001090:	429a      	cmp	r2, r3
 8001092:	d0d0      	beq.n	8001036 <cJSON_strcasecmp+0x2a>
	return tolower(*(const unsigned char *)s1) - tolower(*(const unsigned char *)s2);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	737b      	strb	r3, [r7, #13]
 800109a:	7b7b      	ldrb	r3, [r7, #13]
 800109c:	3301      	adds	r3, #1
 800109e:	4a11      	ldr	r2, [pc, #68]	; (80010e4 <cJSON_strcasecmp+0xd8>)
 80010a0:	4413      	add	r3, r2
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	f003 0303 	and.w	r3, r3, #3
 80010a8:	2b01      	cmp	r3, #1
 80010aa:	d103      	bne.n	80010b4 <cJSON_strcasecmp+0xa8>
 80010ac:	7b7b      	ldrb	r3, [r7, #13]
 80010ae:	f103 0220 	add.w	r2, r3, #32
 80010b2:	e000      	b.n	80010b6 <cJSON_strcasecmp+0xaa>
 80010b4:	7b7a      	ldrb	r2, [r7, #13]
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	781b      	ldrb	r3, [r3, #0]
 80010ba:	733b      	strb	r3, [r7, #12]
 80010bc:	7b3b      	ldrb	r3, [r7, #12]
 80010be:	3301      	adds	r3, #1
 80010c0:	4908      	ldr	r1, [pc, #32]	; (80010e4 <cJSON_strcasecmp+0xd8>)
 80010c2:	440b      	add	r3, r1
 80010c4:	781b      	ldrb	r3, [r3, #0]
 80010c6:	f003 0303 	and.w	r3, r3, #3
 80010ca:	2b01      	cmp	r3, #1
 80010cc:	d102      	bne.n	80010d4 <cJSON_strcasecmp+0xc8>
 80010ce:	7b3b      	ldrb	r3, [r7, #12]
 80010d0:	3320      	adds	r3, #32
 80010d2:	e000      	b.n	80010d6 <cJSON_strcasecmp+0xca>
 80010d4:	7b3b      	ldrb	r3, [r7, #12]
 80010d6:	1ad3      	subs	r3, r2, r3
}
 80010d8:	4618      	mov	r0, r3
 80010da:	3714      	adds	r7, #20
 80010dc:	46bd      	mov	sp, r7
 80010de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e2:	4770      	bx	lr
 80010e4:	08023f56 	.word	0x08023f56

080010e8 <cJSON_New_Item>:
	cJSON_free	 = (hooks->free_fn)?hooks->free_fn:free;
}

/* Internal constructor. */
static cJSON *cJSON_New_Item(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
	cJSON* node = (cJSON*)cJSON_malloc(sizeof(cJSON));
 80010ee:	4b09      	ldr	r3, [pc, #36]	; (8001114 <cJSON_New_Item+0x2c>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	2028      	movs	r0, #40	; 0x28
 80010f4:	4798      	blx	r3
 80010f6:	6078      	str	r0, [r7, #4]
	if (node) memset(node,0,sizeof(cJSON));
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d004      	beq.n	8001108 <cJSON_New_Item+0x20>
 80010fe:	2228      	movs	r2, #40	; 0x28
 8001100:	2100      	movs	r1, #0
 8001102:	6878      	ldr	r0, [r7, #4]
 8001104:	f019 fc10 	bl	801a928 <memset>
	return node;
 8001108:	687b      	ldr	r3, [r7, #4]
}
 800110a:	4618      	mov	r0, r3
 800110c:	3708      	adds	r7, #8
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	20000000 	.word	0x20000000

08001118 <cJSON_Delete>:

/* Delete a cJSON structure. */
void cJSON_Delete(cJSON *c)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b084      	sub	sp, #16
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
	cJSON *next;
	while (c)
 8001120:	e037      	b.n	8001192 <cJSON_Delete+0x7a>
	{
		next=c->next;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	60fb      	str	r3, [r7, #12]
		if (!(c->type&cJSON_IsReference) && c->child) cJSON_Delete(c->child);
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	68db      	ldr	r3, [r3, #12]
 800112c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001130:	2b00      	cmp	r3, #0
 8001132:	d108      	bne.n	8001146 <cJSON_Delete+0x2e>
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	689b      	ldr	r3, [r3, #8]
 8001138:	2b00      	cmp	r3, #0
 800113a:	d004      	beq.n	8001146 <cJSON_Delete+0x2e>
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	689b      	ldr	r3, [r3, #8]
 8001140:	4618      	mov	r0, r3
 8001142:	f7ff ffe9 	bl	8001118 <cJSON_Delete>
		if (!(c->type&cJSON_IsReference) && c->valuestring) cJSON_free(c->valuestring);
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	68db      	ldr	r3, [r3, #12]
 800114a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800114e:	2b00      	cmp	r3, #0
 8001150:	d109      	bne.n	8001166 <cJSON_Delete+0x4e>
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	691b      	ldr	r3, [r3, #16]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d005      	beq.n	8001166 <cJSON_Delete+0x4e>
 800115a:	4b12      	ldr	r3, [pc, #72]	; (80011a4 <cJSON_Delete+0x8c>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	687a      	ldr	r2, [r7, #4]
 8001160:	6912      	ldr	r2, [r2, #16]
 8001162:	4610      	mov	r0, r2
 8001164:	4798      	blx	r3
		if (!(c->type&cJSON_StringIsConst) && c->string) cJSON_free(c->string);
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	68db      	ldr	r3, [r3, #12]
 800116a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800116e:	2b00      	cmp	r3, #0
 8001170:	d109      	bne.n	8001186 <cJSON_Delete+0x6e>
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	6a1b      	ldr	r3, [r3, #32]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d005      	beq.n	8001186 <cJSON_Delete+0x6e>
 800117a:	4b0a      	ldr	r3, [pc, #40]	; (80011a4 <cJSON_Delete+0x8c>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	687a      	ldr	r2, [r7, #4]
 8001180:	6a12      	ldr	r2, [r2, #32]
 8001182:	4610      	mov	r0, r2
 8001184:	4798      	blx	r3
		cJSON_free(c);
 8001186:	4b07      	ldr	r3, [pc, #28]	; (80011a4 <cJSON_Delete+0x8c>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	6878      	ldr	r0, [r7, #4]
 800118c:	4798      	blx	r3
		c=next;
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	607b      	str	r3, [r7, #4]
	while (c)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d1c4      	bne.n	8001122 <cJSON_Delete+0xa>
	}
}
 8001198:	bf00      	nop
 800119a:	bf00      	nop
 800119c:	3710      	adds	r7, #16
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	20000004 	.word	0x20000004

080011a8 <parse_number>:

/* Parse the input text to generate a number, and populate the result into item. */
static const char *parse_number(cJSON *item,const char *num)
{
 80011a8:	b5b0      	push	{r4, r5, r7, lr}
 80011aa:	b08a      	sub	sp, #40	; 0x28
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
 80011b0:	6039      	str	r1, [r7, #0]
	double n=0,sign=1,scale=0;int subscale=0,signsubscale=1;
 80011b2:	f04f 0200 	mov.w	r2, #0
 80011b6:	f04f 0300 	mov.w	r3, #0
 80011ba:	e9c7 2308 	strd	r2, r3, [r7, #32]
 80011be:	f04f 0200 	mov.w	r2, #0
 80011c2:	4b83      	ldr	r3, [pc, #524]	; (80013d0 <parse_number+0x228>)
 80011c4:	e9c7 2306 	strd	r2, r3, [r7, #24]
 80011c8:	f04f 0200 	mov.w	r2, #0
 80011cc:	f04f 0300 	mov.w	r3, #0
 80011d0:	e9c7 2304 	strd	r2, r3, [r7, #16]
 80011d4:	2300      	movs	r3, #0
 80011d6:	60fb      	str	r3, [r7, #12]
 80011d8:	2301      	movs	r3, #1
 80011da:	60bb      	str	r3, [r7, #8]

	if (*num=='-') sign=-1,num++;	/* Has sign? */
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	2b2d      	cmp	r3, #45	; 0x2d
 80011e2:	d107      	bne.n	80011f4 <parse_number+0x4c>
 80011e4:	f04f 0200 	mov.w	r2, #0
 80011e8:	4b7a      	ldr	r3, [pc, #488]	; (80013d4 <parse_number+0x22c>)
 80011ea:	e9c7 2306 	strd	r2, r3, [r7, #24]
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	3301      	adds	r3, #1
 80011f2:	603b      	str	r3, [r7, #0]
	if (*num=='0') num++;			/* is zero */
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	2b30      	cmp	r3, #48	; 0x30
 80011fa:	d102      	bne.n	8001202 <parse_number+0x5a>
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	3301      	adds	r3, #1
 8001200:	603b      	str	r3, [r7, #0]
	if (*num>='1' && *num<='9')	do	n=(n*10.0)+(*num++ -'0');	while (*num>='0' && *num<='9');	/* Number? */
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	781b      	ldrb	r3, [r3, #0]
 8001206:	2b30      	cmp	r3, #48	; 0x30
 8001208:	d928      	bls.n	800125c <parse_number+0xb4>
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	781b      	ldrb	r3, [r3, #0]
 800120e:	2b39      	cmp	r3, #57	; 0x39
 8001210:	d824      	bhi.n	800125c <parse_number+0xb4>
 8001212:	f04f 0200 	mov.w	r2, #0
 8001216:	4b70      	ldr	r3, [pc, #448]	; (80013d8 <parse_number+0x230>)
 8001218:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800121c:	f7ff f9fc 	bl	8000618 <__aeabi_dmul>
 8001220:	4602      	mov	r2, r0
 8001222:	460b      	mov	r3, r1
 8001224:	4614      	mov	r4, r2
 8001226:	461d      	mov	r5, r3
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	1c5a      	adds	r2, r3, #1
 800122c:	603a      	str	r2, [r7, #0]
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	3b30      	subs	r3, #48	; 0x30
 8001232:	4618      	mov	r0, r3
 8001234:	f7ff f986 	bl	8000544 <__aeabi_i2d>
 8001238:	4602      	mov	r2, r0
 800123a:	460b      	mov	r3, r1
 800123c:	4620      	mov	r0, r4
 800123e:	4629      	mov	r1, r5
 8001240:	f7ff f834 	bl	80002ac <__adddf3>
 8001244:	4602      	mov	r2, r0
 8001246:	460b      	mov	r3, r1
 8001248:	e9c7 2308 	strd	r2, r3, [r7, #32]
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	2b2f      	cmp	r3, #47	; 0x2f
 8001252:	d903      	bls.n	800125c <parse_number+0xb4>
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	2b39      	cmp	r3, #57	; 0x39
 800125a:	d9da      	bls.n	8001212 <parse_number+0x6a>
	if (*num=='.' && num[1]>='0' && num[1]<='9') {num++;		do	n=(n*10.0)+(*num++ -'0'),scale--; while (*num>='0' && *num<='9');}	/* Fractional part? */
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	781b      	ldrb	r3, [r3, #0]
 8001260:	2b2e      	cmp	r3, #46	; 0x2e
 8001262:	d13c      	bne.n	80012de <parse_number+0x136>
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	3301      	adds	r3, #1
 8001268:	781b      	ldrb	r3, [r3, #0]
 800126a:	2b2f      	cmp	r3, #47	; 0x2f
 800126c:	d937      	bls.n	80012de <parse_number+0x136>
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	3301      	adds	r3, #1
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	2b39      	cmp	r3, #57	; 0x39
 8001276:	d832      	bhi.n	80012de <parse_number+0x136>
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	3301      	adds	r3, #1
 800127c:	603b      	str	r3, [r7, #0]
 800127e:	f04f 0200 	mov.w	r2, #0
 8001282:	4b55      	ldr	r3, [pc, #340]	; (80013d8 <parse_number+0x230>)
 8001284:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001288:	f7ff f9c6 	bl	8000618 <__aeabi_dmul>
 800128c:	4602      	mov	r2, r0
 800128e:	460b      	mov	r3, r1
 8001290:	4614      	mov	r4, r2
 8001292:	461d      	mov	r5, r3
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	1c5a      	adds	r2, r3, #1
 8001298:	603a      	str	r2, [r7, #0]
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	3b30      	subs	r3, #48	; 0x30
 800129e:	4618      	mov	r0, r3
 80012a0:	f7ff f950 	bl	8000544 <__aeabi_i2d>
 80012a4:	4602      	mov	r2, r0
 80012a6:	460b      	mov	r3, r1
 80012a8:	4620      	mov	r0, r4
 80012aa:	4629      	mov	r1, r5
 80012ac:	f7fe fffe 	bl	80002ac <__adddf3>
 80012b0:	4602      	mov	r2, r0
 80012b2:	460b      	mov	r3, r1
 80012b4:	e9c7 2308 	strd	r2, r3, [r7, #32]
 80012b8:	f04f 0200 	mov.w	r2, #0
 80012bc:	4b44      	ldr	r3, [pc, #272]	; (80013d0 <parse_number+0x228>)
 80012be:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80012c2:	f7fe fff1 	bl	80002a8 <__aeabi_dsub>
 80012c6:	4602      	mov	r2, r0
 80012c8:	460b      	mov	r3, r1
 80012ca:	e9c7 2304 	strd	r2, r3, [r7, #16]
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	781b      	ldrb	r3, [r3, #0]
 80012d2:	2b2f      	cmp	r3, #47	; 0x2f
 80012d4:	d903      	bls.n	80012de <parse_number+0x136>
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	781b      	ldrb	r3, [r3, #0]
 80012da:	2b39      	cmp	r3, #57	; 0x39
 80012dc:	d9cf      	bls.n	800127e <parse_number+0xd6>
	if (*num=='e' || *num=='E')		/* Exponent? */
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	781b      	ldrb	r3, [r3, #0]
 80012e2:	2b65      	cmp	r3, #101	; 0x65
 80012e4:	d003      	beq.n	80012ee <parse_number+0x146>
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	781b      	ldrb	r3, [r3, #0]
 80012ea:	2b45      	cmp	r3, #69	; 0x45
 80012ec:	d12a      	bne.n	8001344 <parse_number+0x19c>
	{	num++;if (*num=='+') num++;	else if (*num=='-') signsubscale=-1,num++;		/* With sign? */
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	3301      	adds	r3, #1
 80012f2:	603b      	str	r3, [r7, #0]
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	2b2b      	cmp	r3, #43	; 0x2b
 80012fa:	d103      	bne.n	8001304 <parse_number+0x15c>
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	3301      	adds	r3, #1
 8001300:	603b      	str	r3, [r7, #0]
 8001302:	e017      	b.n	8001334 <parse_number+0x18c>
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	781b      	ldrb	r3, [r3, #0]
 8001308:	2b2d      	cmp	r3, #45	; 0x2d
 800130a:	d113      	bne.n	8001334 <parse_number+0x18c>
 800130c:	f04f 33ff 	mov.w	r3, #4294967295
 8001310:	60bb      	str	r3, [r7, #8]
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	3301      	adds	r3, #1
 8001316:	603b      	str	r3, [r7, #0]
		while (*num>='0' && *num<='9') subscale=(subscale*10)+(*num++ - '0');	/* Number? */
 8001318:	e00c      	b.n	8001334 <parse_number+0x18c>
 800131a:	68fa      	ldr	r2, [r7, #12]
 800131c:	4613      	mov	r3, r2
 800131e:	009b      	lsls	r3, r3, #2
 8001320:	4413      	add	r3, r2
 8001322:	005b      	lsls	r3, r3, #1
 8001324:	4619      	mov	r1, r3
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	1c5a      	adds	r2, r3, #1
 800132a:	603a      	str	r2, [r7, #0]
 800132c:	781b      	ldrb	r3, [r3, #0]
 800132e:	3b30      	subs	r3, #48	; 0x30
 8001330:	440b      	add	r3, r1
 8001332:	60fb      	str	r3, [r7, #12]
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	2b2f      	cmp	r3, #47	; 0x2f
 800133a:	d903      	bls.n	8001344 <parse_number+0x19c>
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	2b39      	cmp	r3, #57	; 0x39
 8001342:	d9ea      	bls.n	800131a <parse_number+0x172>
	}

	n=sign*n*pow(10.0,(scale+subscale*signsubscale));	/* number = +/- number.fraction * 10^+/- exponent */
 8001344:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001348:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800134c:	f7ff f964 	bl	8000618 <__aeabi_dmul>
 8001350:	4602      	mov	r2, r0
 8001352:	460b      	mov	r3, r1
 8001354:	4614      	mov	r4, r2
 8001356:	461d      	mov	r5, r3
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	68ba      	ldr	r2, [r7, #8]
 800135c:	fb02 f303 	mul.w	r3, r2, r3
 8001360:	4618      	mov	r0, r3
 8001362:	f7ff f8ef 	bl	8000544 <__aeabi_i2d>
 8001366:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800136a:	f7fe ff9f 	bl	80002ac <__adddf3>
 800136e:	4602      	mov	r2, r0
 8001370:	460b      	mov	r3, r1
 8001372:	ec43 2b17 	vmov	d7, r2, r3
 8001376:	eeb0 1a47 	vmov.f32	s2, s14
 800137a:	eef0 1a67 	vmov.f32	s3, s15
 800137e:	ed9f 0b12 	vldr	d0, [pc, #72]	; 80013c8 <parse_number+0x220>
 8001382:	f01d fd73 	bl	801ee6c <pow>
 8001386:	ec53 2b10 	vmov	r2, r3, d0
 800138a:	4620      	mov	r0, r4
 800138c:	4629      	mov	r1, r5
 800138e:	f7ff f943 	bl	8000618 <__aeabi_dmul>
 8001392:	4602      	mov	r2, r0
 8001394:	460b      	mov	r3, r1
 8001396:	e9c7 2308 	strd	r2, r3, [r7, #32]
	
	item->valuedouble=n;
 800139a:	6879      	ldr	r1, [r7, #4]
 800139c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80013a0:	e9c1 2306 	strd	r2, r3, [r1, #24]
	item->valueint=(int)n;
 80013a4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80013a8:	f7ff fbe6 	bl	8000b78 <__aeabi_d2iz>
 80013ac:	4602      	mov	r2, r0
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	615a      	str	r2, [r3, #20]
	item->type=cJSON_Number;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	2203      	movs	r2, #3
 80013b6:	60da      	str	r2, [r3, #12]
	return num;
 80013b8:	683b      	ldr	r3, [r7, #0]
}
 80013ba:	4618      	mov	r0, r3
 80013bc:	3728      	adds	r7, #40	; 0x28
 80013be:	46bd      	mov	sp, r7
 80013c0:	bdb0      	pop	{r4, r5, r7, pc}
 80013c2:	bf00      	nop
 80013c4:	f3af 8000 	nop.w
 80013c8:	00000000 	.word	0x00000000
 80013cc:	40240000 	.word	0x40240000
 80013d0:	3ff00000 	.word	0x3ff00000
 80013d4:	bff00000 	.word	0xbff00000
 80013d8:	40240000 	.word	0x40240000

080013dc <parse_hex4>:
	}
	return str;
}

static unsigned parse_hex4(const char *str)
{
 80013dc:	b480      	push	{r7}
 80013de:	b085      	sub	sp, #20
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
	unsigned h=0;
 80013e4:	2300      	movs	r3, #0
 80013e6:	60fb      	str	r3, [r7, #12]
	if (*str>='0' && *str<='9') h+=(*str)-'0'; else if (*str>='A' && *str<='F') h+=10+(*str)-'A'; else if (*str>='a' && *str<='f') h+=10+(*str)-'a'; else return 0;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	2b2f      	cmp	r3, #47	; 0x2f
 80013ee:	d90b      	bls.n	8001408 <parse_hex4+0x2c>
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	781b      	ldrb	r3, [r3, #0]
 80013f4:	2b39      	cmp	r3, #57	; 0x39
 80013f6:	d807      	bhi.n	8001408 <parse_hex4+0x2c>
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	461a      	mov	r2, r3
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	4413      	add	r3, r2
 8001402:	3b30      	subs	r3, #48	; 0x30
 8001404:	60fb      	str	r3, [r7, #12]
 8001406:	e021      	b.n	800144c <parse_hex4+0x70>
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	781b      	ldrb	r3, [r3, #0]
 800140c:	2b40      	cmp	r3, #64	; 0x40
 800140e:	d90b      	bls.n	8001428 <parse_hex4+0x4c>
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	781b      	ldrb	r3, [r3, #0]
 8001414:	2b46      	cmp	r3, #70	; 0x46
 8001416:	d807      	bhi.n	8001428 <parse_hex4+0x4c>
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	461a      	mov	r2, r3
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	4413      	add	r3, r2
 8001422:	3b37      	subs	r3, #55	; 0x37
 8001424:	60fb      	str	r3, [r7, #12]
 8001426:	e011      	b.n	800144c <parse_hex4+0x70>
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	781b      	ldrb	r3, [r3, #0]
 800142c:	2b60      	cmp	r3, #96	; 0x60
 800142e:	d90b      	bls.n	8001448 <parse_hex4+0x6c>
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	781b      	ldrb	r3, [r3, #0]
 8001434:	2b66      	cmp	r3, #102	; 0x66
 8001436:	d807      	bhi.n	8001448 <parse_hex4+0x6c>
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	461a      	mov	r2, r3
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	4413      	add	r3, r2
 8001442:	3b57      	subs	r3, #87	; 0x57
 8001444:	60fb      	str	r3, [r7, #12]
 8001446:	e001      	b.n	800144c <parse_hex4+0x70>
 8001448:	2300      	movs	r3, #0
 800144a:	e0a8      	b.n	800159e <parse_hex4+0x1c2>
	h=h<<4;str++;
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	011b      	lsls	r3, r3, #4
 8001450:	60fb      	str	r3, [r7, #12]
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	3301      	adds	r3, #1
 8001456:	607b      	str	r3, [r7, #4]
	if (*str>='0' && *str<='9') h+=(*str)-'0'; else if (*str>='A' && *str<='F') h+=10+(*str)-'A'; else if (*str>='a' && *str<='f') h+=10+(*str)-'a'; else return 0;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	781b      	ldrb	r3, [r3, #0]
 800145c:	2b2f      	cmp	r3, #47	; 0x2f
 800145e:	d90b      	bls.n	8001478 <parse_hex4+0x9c>
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	2b39      	cmp	r3, #57	; 0x39
 8001466:	d807      	bhi.n	8001478 <parse_hex4+0x9c>
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	461a      	mov	r2, r3
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	4413      	add	r3, r2
 8001472:	3b30      	subs	r3, #48	; 0x30
 8001474:	60fb      	str	r3, [r7, #12]
 8001476:	e021      	b.n	80014bc <parse_hex4+0xe0>
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	781b      	ldrb	r3, [r3, #0]
 800147c:	2b40      	cmp	r3, #64	; 0x40
 800147e:	d90b      	bls.n	8001498 <parse_hex4+0xbc>
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	2b46      	cmp	r3, #70	; 0x46
 8001486:	d807      	bhi.n	8001498 <parse_hex4+0xbc>
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	781b      	ldrb	r3, [r3, #0]
 800148c:	461a      	mov	r2, r3
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	4413      	add	r3, r2
 8001492:	3b37      	subs	r3, #55	; 0x37
 8001494:	60fb      	str	r3, [r7, #12]
 8001496:	e011      	b.n	80014bc <parse_hex4+0xe0>
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	2b60      	cmp	r3, #96	; 0x60
 800149e:	d90b      	bls.n	80014b8 <parse_hex4+0xdc>
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	2b66      	cmp	r3, #102	; 0x66
 80014a6:	d807      	bhi.n	80014b8 <parse_hex4+0xdc>
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	461a      	mov	r2, r3
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	4413      	add	r3, r2
 80014b2:	3b57      	subs	r3, #87	; 0x57
 80014b4:	60fb      	str	r3, [r7, #12]
 80014b6:	e001      	b.n	80014bc <parse_hex4+0xe0>
 80014b8:	2300      	movs	r3, #0
 80014ba:	e070      	b.n	800159e <parse_hex4+0x1c2>
	h=h<<4;str++;
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	011b      	lsls	r3, r3, #4
 80014c0:	60fb      	str	r3, [r7, #12]
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	3301      	adds	r3, #1
 80014c6:	607b      	str	r3, [r7, #4]
	if (*str>='0' && *str<='9') h+=(*str)-'0'; else if (*str>='A' && *str<='F') h+=10+(*str)-'A'; else if (*str>='a' && *str<='f') h+=10+(*str)-'a'; else return 0;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	781b      	ldrb	r3, [r3, #0]
 80014cc:	2b2f      	cmp	r3, #47	; 0x2f
 80014ce:	d90b      	bls.n	80014e8 <parse_hex4+0x10c>
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	781b      	ldrb	r3, [r3, #0]
 80014d4:	2b39      	cmp	r3, #57	; 0x39
 80014d6:	d807      	bhi.n	80014e8 <parse_hex4+0x10c>
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	781b      	ldrb	r3, [r3, #0]
 80014dc:	461a      	mov	r2, r3
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	4413      	add	r3, r2
 80014e2:	3b30      	subs	r3, #48	; 0x30
 80014e4:	60fb      	str	r3, [r7, #12]
 80014e6:	e021      	b.n	800152c <parse_hex4+0x150>
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	781b      	ldrb	r3, [r3, #0]
 80014ec:	2b40      	cmp	r3, #64	; 0x40
 80014ee:	d90b      	bls.n	8001508 <parse_hex4+0x12c>
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	781b      	ldrb	r3, [r3, #0]
 80014f4:	2b46      	cmp	r3, #70	; 0x46
 80014f6:	d807      	bhi.n	8001508 <parse_hex4+0x12c>
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	461a      	mov	r2, r3
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	4413      	add	r3, r2
 8001502:	3b37      	subs	r3, #55	; 0x37
 8001504:	60fb      	str	r3, [r7, #12]
 8001506:	e011      	b.n	800152c <parse_hex4+0x150>
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	2b60      	cmp	r3, #96	; 0x60
 800150e:	d90b      	bls.n	8001528 <parse_hex4+0x14c>
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	781b      	ldrb	r3, [r3, #0]
 8001514:	2b66      	cmp	r3, #102	; 0x66
 8001516:	d807      	bhi.n	8001528 <parse_hex4+0x14c>
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	781b      	ldrb	r3, [r3, #0]
 800151c:	461a      	mov	r2, r3
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	4413      	add	r3, r2
 8001522:	3b57      	subs	r3, #87	; 0x57
 8001524:	60fb      	str	r3, [r7, #12]
 8001526:	e001      	b.n	800152c <parse_hex4+0x150>
 8001528:	2300      	movs	r3, #0
 800152a:	e038      	b.n	800159e <parse_hex4+0x1c2>
	h=h<<4;str++;
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	011b      	lsls	r3, r3, #4
 8001530:	60fb      	str	r3, [r7, #12]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	3301      	adds	r3, #1
 8001536:	607b      	str	r3, [r7, #4]
	if (*str>='0' && *str<='9') h+=(*str)-'0'; else if (*str>='A' && *str<='F') h+=10+(*str)-'A'; else if (*str>='a' && *str<='f') h+=10+(*str)-'a'; else return 0;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	2b2f      	cmp	r3, #47	; 0x2f
 800153e:	d90b      	bls.n	8001558 <parse_hex4+0x17c>
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	2b39      	cmp	r3, #57	; 0x39
 8001546:	d807      	bhi.n	8001558 <parse_hex4+0x17c>
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	781b      	ldrb	r3, [r3, #0]
 800154c:	461a      	mov	r2, r3
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	4413      	add	r3, r2
 8001552:	3b30      	subs	r3, #48	; 0x30
 8001554:	60fb      	str	r3, [r7, #12]
 8001556:	e021      	b.n	800159c <parse_hex4+0x1c0>
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	2b40      	cmp	r3, #64	; 0x40
 800155e:	d90b      	bls.n	8001578 <parse_hex4+0x19c>
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	2b46      	cmp	r3, #70	; 0x46
 8001566:	d807      	bhi.n	8001578 <parse_hex4+0x19c>
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	781b      	ldrb	r3, [r3, #0]
 800156c:	461a      	mov	r2, r3
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	4413      	add	r3, r2
 8001572:	3b37      	subs	r3, #55	; 0x37
 8001574:	60fb      	str	r3, [r7, #12]
 8001576:	e011      	b.n	800159c <parse_hex4+0x1c0>
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	781b      	ldrb	r3, [r3, #0]
 800157c:	2b60      	cmp	r3, #96	; 0x60
 800157e:	d90b      	bls.n	8001598 <parse_hex4+0x1bc>
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	781b      	ldrb	r3, [r3, #0]
 8001584:	2b66      	cmp	r3, #102	; 0x66
 8001586:	d807      	bhi.n	8001598 <parse_hex4+0x1bc>
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	461a      	mov	r2, r3
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	4413      	add	r3, r2
 8001592:	3b57      	subs	r3, #87	; 0x57
 8001594:	60fb      	str	r3, [r7, #12]
 8001596:	e001      	b.n	800159c <parse_hex4+0x1c0>
 8001598:	2300      	movs	r3, #0
 800159a:	e000      	b.n	800159e <parse_hex4+0x1c2>
	return h;
 800159c:	68fb      	ldr	r3, [r7, #12]
}
 800159e:	4618      	mov	r0, r3
 80015a0:	3714      	adds	r7, #20
 80015a2:	46bd      	mov	sp, r7
 80015a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a8:	4770      	bx	lr
	...

080015ac <parse_string>:

/* Parse the input text into an unescaped cstring, and populate item. */
static const unsigned char firstByteMark[7] = { 0x00, 0x00, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC };
static const char *parse_string(cJSON *item,const char *str)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b088      	sub	sp, #32
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
 80015b4:	6039      	str	r1, [r7, #0]
	const char *ptr=str+1;char *ptr2;char *out;int len=0;unsigned uc,uc2;
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	3301      	adds	r3, #1
 80015ba:	61fb      	str	r3, [r7, #28]
 80015bc:	2300      	movs	r3, #0
 80015be:	617b      	str	r3, [r7, #20]
	if (*str!='\"') {ep=str;return 0;}	/* not a string! */
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	2b22      	cmp	r3, #34	; 0x22
 80015c6:	d00d      	beq.n	80015e4 <parse_string+0x38>
 80015c8:	4aa3      	ldr	r2, [pc, #652]	; (8001858 <parse_string+0x2ac>)
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	6013      	str	r3, [r2, #0]
 80015ce:	2300      	movs	r3, #0
 80015d0:	e168      	b.n	80018a4 <parse_string+0x2f8>
	
	while (*ptr!='\"' && *ptr && ++len) if (*ptr++ == '\\') ptr++;	/* Skip escaped quotes. */
 80015d2:	69fb      	ldr	r3, [r7, #28]
 80015d4:	1c5a      	adds	r2, r3, #1
 80015d6:	61fa      	str	r2, [r7, #28]
 80015d8:	781b      	ldrb	r3, [r3, #0]
 80015da:	2b5c      	cmp	r3, #92	; 0x5c
 80015dc:	d102      	bne.n	80015e4 <parse_string+0x38>
 80015de:	69fb      	ldr	r3, [r7, #28]
 80015e0:	3301      	adds	r3, #1
 80015e2:	61fb      	str	r3, [r7, #28]
 80015e4:	69fb      	ldr	r3, [r7, #28]
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	2b22      	cmp	r3, #34	; 0x22
 80015ea:	d009      	beq.n	8001600 <parse_string+0x54>
 80015ec:	69fb      	ldr	r3, [r7, #28]
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d005      	beq.n	8001600 <parse_string+0x54>
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	3301      	adds	r3, #1
 80015f8:	617b      	str	r3, [r7, #20]
 80015fa:	697b      	ldr	r3, [r7, #20]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d1e8      	bne.n	80015d2 <parse_string+0x26>
	
	out=(char*)cJSON_malloc(len+1);	/* This is how long we need for the string, roughly. */
 8001600:	4b96      	ldr	r3, [pc, #600]	; (800185c <parse_string+0x2b0>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	697a      	ldr	r2, [r7, #20]
 8001606:	3201      	adds	r2, #1
 8001608:	4610      	mov	r0, r2
 800160a:	4798      	blx	r3
 800160c:	60f8      	str	r0, [r7, #12]
	if (!out) return 0;
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d101      	bne.n	8001618 <parse_string+0x6c>
 8001614:	2300      	movs	r3, #0
 8001616:	e145      	b.n	80018a4 <parse_string+0x2f8>
	
	ptr=str+1;ptr2=out;
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	3301      	adds	r3, #1
 800161c:	61fb      	str	r3, [r7, #28]
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	61bb      	str	r3, [r7, #24]
	while (*ptr!='\"' && *ptr)
 8001622:	e125      	b.n	8001870 <parse_string+0x2c4>
	{
		if (*ptr!='\\') *ptr2++=*ptr++;
 8001624:	69fb      	ldr	r3, [r7, #28]
 8001626:	781b      	ldrb	r3, [r3, #0]
 8001628:	2b5c      	cmp	r3, #92	; 0x5c
 800162a:	d008      	beq.n	800163e <parse_string+0x92>
 800162c:	69fa      	ldr	r2, [r7, #28]
 800162e:	1c53      	adds	r3, r2, #1
 8001630:	61fb      	str	r3, [r7, #28]
 8001632:	69bb      	ldr	r3, [r7, #24]
 8001634:	1c59      	adds	r1, r3, #1
 8001636:	61b9      	str	r1, [r7, #24]
 8001638:	7812      	ldrb	r2, [r2, #0]
 800163a:	701a      	strb	r2, [r3, #0]
 800163c:	e118      	b.n	8001870 <parse_string+0x2c4>
		else
		{
			ptr++;
 800163e:	69fb      	ldr	r3, [r7, #28]
 8001640:	3301      	adds	r3, #1
 8001642:	61fb      	str	r3, [r7, #28]
			switch (*ptr)
 8001644:	69fb      	ldr	r3, [r7, #28]
 8001646:	781b      	ldrb	r3, [r3, #0]
 8001648:	3b62      	subs	r3, #98	; 0x62
 800164a:	2b13      	cmp	r3, #19
 800164c:	f200 80fc 	bhi.w	8001848 <parse_string+0x29c>
 8001650:	a201      	add	r2, pc, #4	; (adr r2, 8001658 <parse_string+0xac>)
 8001652:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001656:	bf00      	nop
 8001658:	080016a9 	.word	0x080016a9
 800165c:	08001849 	.word	0x08001849
 8001660:	08001849 	.word	0x08001849
 8001664:	08001849 	.word	0x08001849
 8001668:	080016b5 	.word	0x080016b5
 800166c:	08001849 	.word	0x08001849
 8001670:	08001849 	.word	0x08001849
 8001674:	08001849 	.word	0x08001849
 8001678:	08001849 	.word	0x08001849
 800167c:	08001849 	.word	0x08001849
 8001680:	08001849 	.word	0x08001849
 8001684:	08001849 	.word	0x08001849
 8001688:	080016c1 	.word	0x080016c1
 800168c:	08001849 	.word	0x08001849
 8001690:	08001849 	.word	0x08001849
 8001694:	08001849 	.word	0x08001849
 8001698:	080016cd 	.word	0x080016cd
 800169c:	08001849 	.word	0x08001849
 80016a0:	080016d9 	.word	0x080016d9
 80016a4:	080016e5 	.word	0x080016e5
			{
				case 'b': *ptr2++='\b';	break;
 80016a8:	69bb      	ldr	r3, [r7, #24]
 80016aa:	1c5a      	adds	r2, r3, #1
 80016ac:	61ba      	str	r2, [r7, #24]
 80016ae:	2208      	movs	r2, #8
 80016b0:	701a      	strb	r2, [r3, #0]
 80016b2:	e0da      	b.n	800186a <parse_string+0x2be>
				case 'f': *ptr2++='\f';	break;
 80016b4:	69bb      	ldr	r3, [r7, #24]
 80016b6:	1c5a      	adds	r2, r3, #1
 80016b8:	61ba      	str	r2, [r7, #24]
 80016ba:	220c      	movs	r2, #12
 80016bc:	701a      	strb	r2, [r3, #0]
 80016be:	e0d4      	b.n	800186a <parse_string+0x2be>
				case 'n': *ptr2++='\n';	break;
 80016c0:	69bb      	ldr	r3, [r7, #24]
 80016c2:	1c5a      	adds	r2, r3, #1
 80016c4:	61ba      	str	r2, [r7, #24]
 80016c6:	220a      	movs	r2, #10
 80016c8:	701a      	strb	r2, [r3, #0]
 80016ca:	e0ce      	b.n	800186a <parse_string+0x2be>
				case 'r': *ptr2++='\r';	break;
 80016cc:	69bb      	ldr	r3, [r7, #24]
 80016ce:	1c5a      	adds	r2, r3, #1
 80016d0:	61ba      	str	r2, [r7, #24]
 80016d2:	220d      	movs	r2, #13
 80016d4:	701a      	strb	r2, [r3, #0]
 80016d6:	e0c8      	b.n	800186a <parse_string+0x2be>
				case 't': *ptr2++='\t';	break;
 80016d8:	69bb      	ldr	r3, [r7, #24]
 80016da:	1c5a      	adds	r2, r3, #1
 80016dc:	61ba      	str	r2, [r7, #24]
 80016de:	2209      	movs	r2, #9
 80016e0:	701a      	strb	r2, [r3, #0]
 80016e2:	e0c2      	b.n	800186a <parse_string+0x2be>
				case 'u':	 /* transcode utf16 to utf8. */
					uc=parse_hex4(ptr+1);ptr+=4;	/* get the unicode char. */
 80016e4:	69fb      	ldr	r3, [r7, #28]
 80016e6:	3301      	adds	r3, #1
 80016e8:	4618      	mov	r0, r3
 80016ea:	f7ff fe77 	bl	80013dc <parse_hex4>
 80016ee:	6138      	str	r0, [r7, #16]
 80016f0:	69fb      	ldr	r3, [r7, #28]
 80016f2:	3304      	adds	r3, #4
 80016f4:	61fb      	str	r3, [r7, #28]

					if ((uc>=0xDC00 && uc<=0xDFFF) || uc==0)	break;	/* check for invalid.	*/
 80016f6:	693b      	ldr	r3, [r7, #16]
 80016f8:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 80016fc:	d304      	bcc.n	8001708 <parse_string+0x15c>
 80016fe:	693b      	ldr	r3, [r7, #16]
 8001700:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 8001704:	f0c0 80b0 	bcc.w	8001868 <parse_string+0x2bc>
 8001708:	693b      	ldr	r3, [r7, #16]
 800170a:	2b00      	cmp	r3, #0
 800170c:	f000 80ac 	beq.w	8001868 <parse_string+0x2bc>

					if (uc>=0xD800 && uc<=0xDBFF)	/* UTF16 surrogate pairs.	*/
 8001710:	693b      	ldr	r3, [r7, #16]
 8001712:	f5b3 4f58 	cmp.w	r3, #55296	; 0xd800
 8001716:	d32d      	bcc.n	8001774 <parse_string+0x1c8>
 8001718:	693b      	ldr	r3, [r7, #16]
 800171a:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 800171e:	d229      	bcs.n	8001774 <parse_string+0x1c8>
					{
						if (ptr[1]!='\\' || ptr[2]!='u')	break;	/* missing second-half of surrogate.	*/
 8001720:	69fb      	ldr	r3, [r7, #28]
 8001722:	3301      	adds	r3, #1
 8001724:	781b      	ldrb	r3, [r3, #0]
 8001726:	2b5c      	cmp	r3, #92	; 0x5c
 8001728:	f040 809e 	bne.w	8001868 <parse_string+0x2bc>
 800172c:	69fb      	ldr	r3, [r7, #28]
 800172e:	3302      	adds	r3, #2
 8001730:	781b      	ldrb	r3, [r3, #0]
 8001732:	2b75      	cmp	r3, #117	; 0x75
 8001734:	f040 8098 	bne.w	8001868 <parse_string+0x2bc>
						uc2=parse_hex4(ptr+3);ptr+=6;
 8001738:	69fb      	ldr	r3, [r7, #28]
 800173a:	3303      	adds	r3, #3
 800173c:	4618      	mov	r0, r3
 800173e:	f7ff fe4d 	bl	80013dc <parse_hex4>
 8001742:	60b8      	str	r0, [r7, #8]
 8001744:	69fb      	ldr	r3, [r7, #28]
 8001746:	3306      	adds	r3, #6
 8001748:	61fb      	str	r3, [r7, #28]
						if (uc2<0xDC00 || uc2>0xDFFF)		break;	/* invalid second-half of surrogate.	*/
 800174a:	68bb      	ldr	r3, [r7, #8]
 800174c:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 8001750:	f0c0 808a 	bcc.w	8001868 <parse_string+0x2bc>
 8001754:	68bb      	ldr	r3, [r7, #8]
 8001756:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 800175a:	f080 8085 	bcs.w	8001868 <parse_string+0x2bc>
						uc=0x10000 + (((uc&0x3FF)<<10) | (uc2&0x3FF));
 800175e:	693b      	ldr	r3, [r7, #16]
 8001760:	029a      	lsls	r2, r3, #10
 8001762:	4b3f      	ldr	r3, [pc, #252]	; (8001860 <parse_string+0x2b4>)
 8001764:	4013      	ands	r3, r2
 8001766:	68ba      	ldr	r2, [r7, #8]
 8001768:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800176c:	4313      	orrs	r3, r2
 800176e:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8001772:	613b      	str	r3, [r7, #16]
					}

					len=4;if (uc<0x80) len=1;else if (uc<0x800) len=2;else if (uc<0x10000) len=3; ptr2+=len;
 8001774:	2304      	movs	r3, #4
 8001776:	617b      	str	r3, [r7, #20]
 8001778:	693b      	ldr	r3, [r7, #16]
 800177a:	2b7f      	cmp	r3, #127	; 0x7f
 800177c:	d802      	bhi.n	8001784 <parse_string+0x1d8>
 800177e:	2301      	movs	r3, #1
 8001780:	617b      	str	r3, [r7, #20]
 8001782:	e00c      	b.n	800179e <parse_string+0x1f2>
 8001784:	693b      	ldr	r3, [r7, #16]
 8001786:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800178a:	d202      	bcs.n	8001792 <parse_string+0x1e6>
 800178c:	2302      	movs	r3, #2
 800178e:	617b      	str	r3, [r7, #20]
 8001790:	e005      	b.n	800179e <parse_string+0x1f2>
 8001792:	693b      	ldr	r3, [r7, #16]
 8001794:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001798:	d201      	bcs.n	800179e <parse_string+0x1f2>
 800179a:	2303      	movs	r3, #3
 800179c:	617b      	str	r3, [r7, #20]
 800179e:	697b      	ldr	r3, [r7, #20]
 80017a0:	69ba      	ldr	r2, [r7, #24]
 80017a2:	4413      	add	r3, r2
 80017a4:	61bb      	str	r3, [r7, #24]
 80017a6:	697b      	ldr	r3, [r7, #20]
 80017a8:	3b01      	subs	r3, #1
 80017aa:	2b03      	cmp	r3, #3
 80017ac:	d847      	bhi.n	800183e <parse_string+0x292>
 80017ae:	a201      	add	r2, pc, #4	; (adr r2, 80017b4 <parse_string+0x208>)
 80017b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017b4:	08001825 	.word	0x08001825
 80017b8:	08001805 	.word	0x08001805
 80017bc:	080017e5 	.word	0x080017e5
 80017c0:	080017c5 	.word	0x080017c5
					
					switch (len) {
						case 4: *--ptr2 =((uc | 0x80) & 0xBF); uc >>= 6;
 80017c4:	693b      	ldr	r3, [r7, #16]
 80017c6:	b2db      	uxtb	r3, r3
 80017c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80017cc:	b2db      	uxtb	r3, r3
 80017ce:	69ba      	ldr	r2, [r7, #24]
 80017d0:	3a01      	subs	r2, #1
 80017d2:	61ba      	str	r2, [r7, #24]
 80017d4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80017d8:	b2da      	uxtb	r2, r3
 80017da:	69bb      	ldr	r3, [r7, #24]
 80017dc:	701a      	strb	r2, [r3, #0]
 80017de:	693b      	ldr	r3, [r7, #16]
 80017e0:	099b      	lsrs	r3, r3, #6
 80017e2:	613b      	str	r3, [r7, #16]
						case 3: *--ptr2 =((uc | 0x80) & 0xBF); uc >>= 6;
 80017e4:	693b      	ldr	r3, [r7, #16]
 80017e6:	b2db      	uxtb	r3, r3
 80017e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80017ec:	b2db      	uxtb	r3, r3
 80017ee:	69ba      	ldr	r2, [r7, #24]
 80017f0:	3a01      	subs	r2, #1
 80017f2:	61ba      	str	r2, [r7, #24]
 80017f4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80017f8:	b2da      	uxtb	r2, r3
 80017fa:	69bb      	ldr	r3, [r7, #24]
 80017fc:	701a      	strb	r2, [r3, #0]
 80017fe:	693b      	ldr	r3, [r7, #16]
 8001800:	099b      	lsrs	r3, r3, #6
 8001802:	613b      	str	r3, [r7, #16]
						case 2: *--ptr2 =((uc | 0x80) & 0xBF); uc >>= 6;
 8001804:	693b      	ldr	r3, [r7, #16]
 8001806:	b2db      	uxtb	r3, r3
 8001808:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800180c:	b2db      	uxtb	r3, r3
 800180e:	69ba      	ldr	r2, [r7, #24]
 8001810:	3a01      	subs	r2, #1
 8001812:	61ba      	str	r2, [r7, #24]
 8001814:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001818:	b2da      	uxtb	r2, r3
 800181a:	69bb      	ldr	r3, [r7, #24]
 800181c:	701a      	strb	r2, [r3, #0]
 800181e:	693b      	ldr	r3, [r7, #16]
 8001820:	099b      	lsrs	r3, r3, #6
 8001822:	613b      	str	r3, [r7, #16]
						case 1: *--ptr2 =(uc | firstByteMark[len]);
 8001824:	4a0f      	ldr	r2, [pc, #60]	; (8001864 <parse_string+0x2b8>)
 8001826:	697b      	ldr	r3, [r7, #20]
 8001828:	4413      	add	r3, r2
 800182a:	781a      	ldrb	r2, [r3, #0]
 800182c:	693b      	ldr	r3, [r7, #16]
 800182e:	b2db      	uxtb	r3, r3
 8001830:	69b9      	ldr	r1, [r7, #24]
 8001832:	3901      	subs	r1, #1
 8001834:	61b9      	str	r1, [r7, #24]
 8001836:	4313      	orrs	r3, r2
 8001838:	b2da      	uxtb	r2, r3
 800183a:	69bb      	ldr	r3, [r7, #24]
 800183c:	701a      	strb	r2, [r3, #0]
					}
					ptr2+=len;
 800183e:	697b      	ldr	r3, [r7, #20]
 8001840:	69ba      	ldr	r2, [r7, #24]
 8001842:	4413      	add	r3, r2
 8001844:	61bb      	str	r3, [r7, #24]
					break;
 8001846:	e010      	b.n	800186a <parse_string+0x2be>
				default:  *ptr2++=*ptr; break;
 8001848:	69bb      	ldr	r3, [r7, #24]
 800184a:	1c5a      	adds	r2, r3, #1
 800184c:	61ba      	str	r2, [r7, #24]
 800184e:	69fa      	ldr	r2, [r7, #28]
 8001850:	7812      	ldrb	r2, [r2, #0]
 8001852:	701a      	strb	r2, [r3, #0]
 8001854:	e009      	b.n	800186a <parse_string+0x2be>
 8001856:	bf00      	nop
 8001858:	2000027c 	.word	0x2000027c
 800185c:	20000000 	.word	0x20000000
 8001860:	000ffc00 	.word	0x000ffc00
 8001864:	080238e8 	.word	0x080238e8
			}
			ptr++;
 8001868:	bf00      	nop
 800186a:	69fb      	ldr	r3, [r7, #28]
 800186c:	3301      	adds	r3, #1
 800186e:	61fb      	str	r3, [r7, #28]
	while (*ptr!='\"' && *ptr)
 8001870:	69fb      	ldr	r3, [r7, #28]
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	2b22      	cmp	r3, #34	; 0x22
 8001876:	d004      	beq.n	8001882 <parse_string+0x2d6>
 8001878:	69fb      	ldr	r3, [r7, #28]
 800187a:	781b      	ldrb	r3, [r3, #0]
 800187c:	2b00      	cmp	r3, #0
 800187e:	f47f aed1 	bne.w	8001624 <parse_string+0x78>
		}
	}
	*ptr2=0;
 8001882:	69bb      	ldr	r3, [r7, #24]
 8001884:	2200      	movs	r2, #0
 8001886:	701a      	strb	r2, [r3, #0]
	if (*ptr=='\"') ptr++;
 8001888:	69fb      	ldr	r3, [r7, #28]
 800188a:	781b      	ldrb	r3, [r3, #0]
 800188c:	2b22      	cmp	r3, #34	; 0x22
 800188e:	d102      	bne.n	8001896 <parse_string+0x2ea>
 8001890:	69fb      	ldr	r3, [r7, #28]
 8001892:	3301      	adds	r3, #1
 8001894:	61fb      	str	r3, [r7, #28]
	item->valuestring=out;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	68fa      	ldr	r2, [r7, #12]
 800189a:	611a      	str	r2, [r3, #16]
	item->type=cJSON_String;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2204      	movs	r2, #4
 80018a0:	60da      	str	r2, [r3, #12]
	return ptr;
 80018a2:	69fb      	ldr	r3, [r7, #28]
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	3720      	adds	r7, #32
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}

080018ac <skip>:
static char *print_array(cJSON *item,int depth,int fmt,printbuffer *p);
static const char *parse_object(cJSON *item,const char *value);
static char *print_object(cJSON *item,int depth,int fmt,printbuffer *p);

/* Utility to jump whitespace and cr/lf */
static const char *skip(const char *in) {while (in && *in && (unsigned char)*in<=32) in++; return in;}
 80018ac:	b480      	push	{r7}
 80018ae:	b083      	sub	sp, #12
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
 80018b4:	e002      	b.n	80018bc <skip+0x10>
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	3301      	adds	r3, #1
 80018ba:	607b      	str	r3, [r7, #4]
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d007      	beq.n	80018d2 <skip+0x26>
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	781b      	ldrb	r3, [r3, #0]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d003      	beq.n	80018d2 <skip+0x26>
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	781b      	ldrb	r3, [r3, #0]
 80018ce:	2b20      	cmp	r3, #32
 80018d0:	d9f1      	bls.n	80018b6 <skip+0xa>
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	4618      	mov	r0, r3
 80018d6:	370c      	adds	r7, #12
 80018d8:	46bd      	mov	sp, r7
 80018da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018de:	4770      	bx	lr

080018e0 <cJSON_ParseWithOpts>:

/* Parse an object - create a new root, and populate. */
cJSON *cJSON_ParseWithOpts(const char *value,const char **return_parse_end,int require_null_terminated)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b086      	sub	sp, #24
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	60f8      	str	r0, [r7, #12]
 80018e8:	60b9      	str	r1, [r7, #8]
 80018ea:	607a      	str	r2, [r7, #4]
	const char *end=0;
 80018ec:	2300      	movs	r3, #0
 80018ee:	617b      	str	r3, [r7, #20]
	cJSON *c=cJSON_New_Item();
 80018f0:	f7ff fbfa 	bl	80010e8 <cJSON_New_Item>
 80018f4:	6138      	str	r0, [r7, #16]
	ep=0;
 80018f6:	4b1b      	ldr	r3, [pc, #108]	; (8001964 <cJSON_ParseWithOpts+0x84>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	601a      	str	r2, [r3, #0]
	if (!c) return 0;       /* memory fail */
 80018fc:	693b      	ldr	r3, [r7, #16]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d101      	bne.n	8001906 <cJSON_ParseWithOpts+0x26>
 8001902:	2300      	movs	r3, #0
 8001904:	e02a      	b.n	800195c <cJSON_ParseWithOpts+0x7c>

	end=parse_value(c,skip(value));
 8001906:	68f8      	ldr	r0, [r7, #12]
 8001908:	f7ff ffd0 	bl	80018ac <skip>
 800190c:	4603      	mov	r3, r0
 800190e:	4619      	mov	r1, r3
 8001910:	6938      	ldr	r0, [r7, #16]
 8001912:	f000 f837 	bl	8001984 <parse_value>
 8001916:	6178      	str	r0, [r7, #20]
	if (!end)	{cJSON_Delete(c);return 0;}	/* parse failure. ep is set. */
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d104      	bne.n	8001928 <cJSON_ParseWithOpts+0x48>
 800191e:	6938      	ldr	r0, [r7, #16]
 8001920:	f7ff fbfa 	bl	8001118 <cJSON_Delete>
 8001924:	2300      	movs	r3, #0
 8001926:	e019      	b.n	800195c <cJSON_ParseWithOpts+0x7c>

	/* if we require null-terminated JSON without appended garbage, skip and then check for a null terminator */
	if (require_null_terminated) {end=skip(end);if (*end) {cJSON_Delete(c);ep=end;return 0;}}
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d00f      	beq.n	800194e <cJSON_ParseWithOpts+0x6e>
 800192e:	6978      	ldr	r0, [r7, #20]
 8001930:	f7ff ffbc 	bl	80018ac <skip>
 8001934:	6178      	str	r0, [r7, #20]
 8001936:	697b      	ldr	r3, [r7, #20]
 8001938:	781b      	ldrb	r3, [r3, #0]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d007      	beq.n	800194e <cJSON_ParseWithOpts+0x6e>
 800193e:	6938      	ldr	r0, [r7, #16]
 8001940:	f7ff fbea 	bl	8001118 <cJSON_Delete>
 8001944:	4a07      	ldr	r2, [pc, #28]	; (8001964 <cJSON_ParseWithOpts+0x84>)
 8001946:	697b      	ldr	r3, [r7, #20]
 8001948:	6013      	str	r3, [r2, #0]
 800194a:	2300      	movs	r3, #0
 800194c:	e006      	b.n	800195c <cJSON_ParseWithOpts+0x7c>
	if (return_parse_end) *return_parse_end=end;
 800194e:	68bb      	ldr	r3, [r7, #8]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d002      	beq.n	800195a <cJSON_ParseWithOpts+0x7a>
 8001954:	68bb      	ldr	r3, [r7, #8]
 8001956:	697a      	ldr	r2, [r7, #20]
 8001958:	601a      	str	r2, [r3, #0]
	return c;
 800195a:	693b      	ldr	r3, [r7, #16]
}
 800195c:	4618      	mov	r0, r3
 800195e:	3718      	adds	r7, #24
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}
 8001964:	2000027c 	.word	0x2000027c

08001968 <cJSON_Parse>:
/* Default options for cJSON_Parse */
cJSON *cJSON_Parse(const char *value) {return cJSON_ParseWithOpts(value,0,0);}
 8001968:	b580      	push	{r7, lr}
 800196a:	b082      	sub	sp, #8
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
 8001970:	2200      	movs	r2, #0
 8001972:	2100      	movs	r1, #0
 8001974:	6878      	ldr	r0, [r7, #4]
 8001976:	f7ff ffb3 	bl	80018e0 <cJSON_ParseWithOpts>
 800197a:	4603      	mov	r3, r0
 800197c:	4618      	mov	r0, r3
 800197e:	3708      	adds	r7, #8
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}

08001984 <parse_value>:
}


/* Parser core - when encountering text, process appropriately. */
static const char *parse_value(cJSON *item,const char *value)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b082      	sub	sp, #8
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
 800198c:	6039      	str	r1, [r7, #0]
	if (!value)						return 0;	/* Fail on null. */
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d101      	bne.n	8001998 <parse_value+0x14>
 8001994:	2300      	movs	r3, #0
 8001996:	e060      	b.n	8001a5a <parse_value+0xd6>
	if (!strncmp(value,"null",4))	{ item->type=cJSON_NULL;  return value+4; }
 8001998:	2204      	movs	r2, #4
 800199a:	4932      	ldr	r1, [pc, #200]	; (8001a64 <parse_value+0xe0>)
 800199c:	6838      	ldr	r0, [r7, #0]
 800199e:	f019 fd9b 	bl	801b4d8 <strncmp>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d105      	bne.n	80019b4 <parse_value+0x30>
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2202      	movs	r2, #2
 80019ac:	60da      	str	r2, [r3, #12]
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	3304      	adds	r3, #4
 80019b2:	e052      	b.n	8001a5a <parse_value+0xd6>
	if (!strncmp(value,"false",5))	{ item->type=cJSON_False; return value+5; }
 80019b4:	2205      	movs	r2, #5
 80019b6:	492c      	ldr	r1, [pc, #176]	; (8001a68 <parse_value+0xe4>)
 80019b8:	6838      	ldr	r0, [r7, #0]
 80019ba:	f019 fd8d 	bl	801b4d8 <strncmp>
 80019be:	4603      	mov	r3, r0
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d105      	bne.n	80019d0 <parse_value+0x4c>
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2200      	movs	r2, #0
 80019c8:	60da      	str	r2, [r3, #12]
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	3305      	adds	r3, #5
 80019ce:	e044      	b.n	8001a5a <parse_value+0xd6>
	if (!strncmp(value,"true",4))	{ item->type=cJSON_True; item->valueint=1;	return value+4; }
 80019d0:	2204      	movs	r2, #4
 80019d2:	4926      	ldr	r1, [pc, #152]	; (8001a6c <parse_value+0xe8>)
 80019d4:	6838      	ldr	r0, [r7, #0]
 80019d6:	f019 fd7f 	bl	801b4d8 <strncmp>
 80019da:	4603      	mov	r3, r0
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d108      	bne.n	80019f2 <parse_value+0x6e>
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2201      	movs	r2, #1
 80019e4:	60da      	str	r2, [r3, #12]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2201      	movs	r2, #1
 80019ea:	615a      	str	r2, [r3, #20]
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	3304      	adds	r3, #4
 80019f0:	e033      	b.n	8001a5a <parse_value+0xd6>
	if (*value=='\"')				{ return parse_string(item,value); }
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	781b      	ldrb	r3, [r3, #0]
 80019f6:	2b22      	cmp	r3, #34	; 0x22
 80019f8:	d105      	bne.n	8001a06 <parse_value+0x82>
 80019fa:	6839      	ldr	r1, [r7, #0]
 80019fc:	6878      	ldr	r0, [r7, #4]
 80019fe:	f7ff fdd5 	bl	80015ac <parse_string>
 8001a02:	4603      	mov	r3, r0
 8001a04:	e029      	b.n	8001a5a <parse_value+0xd6>
	if (*value=='-' || (*value>='0' && *value<='9'))	{ return parse_number(item,value); }
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	781b      	ldrb	r3, [r3, #0]
 8001a0a:	2b2d      	cmp	r3, #45	; 0x2d
 8001a0c:	d007      	beq.n	8001a1e <parse_value+0x9a>
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	781b      	ldrb	r3, [r3, #0]
 8001a12:	2b2f      	cmp	r3, #47	; 0x2f
 8001a14:	d909      	bls.n	8001a2a <parse_value+0xa6>
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	781b      	ldrb	r3, [r3, #0]
 8001a1a:	2b39      	cmp	r3, #57	; 0x39
 8001a1c:	d805      	bhi.n	8001a2a <parse_value+0xa6>
 8001a1e:	6839      	ldr	r1, [r7, #0]
 8001a20:	6878      	ldr	r0, [r7, #4]
 8001a22:	f7ff fbc1 	bl	80011a8 <parse_number>
 8001a26:	4603      	mov	r3, r0
 8001a28:	e017      	b.n	8001a5a <parse_value+0xd6>
	if (*value=='[')				{ return parse_array(item,value); }
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	781b      	ldrb	r3, [r3, #0]
 8001a2e:	2b5b      	cmp	r3, #91	; 0x5b
 8001a30:	d105      	bne.n	8001a3e <parse_value+0xba>
 8001a32:	6839      	ldr	r1, [r7, #0]
 8001a34:	6878      	ldr	r0, [r7, #4]
 8001a36:	f000 f81d 	bl	8001a74 <parse_array>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	e00d      	b.n	8001a5a <parse_value+0xd6>
	if (*value=='{')				{ return parse_object(item,value); }
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	781b      	ldrb	r3, [r3, #0]
 8001a42:	2b7b      	cmp	r3, #123	; 0x7b
 8001a44:	d105      	bne.n	8001a52 <parse_value+0xce>
 8001a46:	6839      	ldr	r1, [r7, #0]
 8001a48:	6878      	ldr	r0, [r7, #4]
 8001a4a:	f000 f889 	bl	8001b60 <parse_object>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	e003      	b.n	8001a5a <parse_value+0xd6>

	ep=value;return 0;	/* failure. */
 8001a52:	4a07      	ldr	r2, [pc, #28]	; (8001a70 <parse_value+0xec>)
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	6013      	str	r3, [r2, #0]
 8001a58:	2300      	movs	r3, #0
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	3708      	adds	r7, #8
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	0801fe04 	.word	0x0801fe04
 8001a68:	0801fe0c 	.word	0x0801fe0c
 8001a6c:	0801fe14 	.word	0x0801fe14
 8001a70:	2000027c 	.word	0x2000027c

08001a74 <parse_array>:
	return out;
}

/* Build an array from input text. */
static const char *parse_array(cJSON *item,const char *value)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b084      	sub	sp, #16
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
 8001a7c:	6039      	str	r1, [r7, #0]
	cJSON *child;
	if (*value!='[')	{ep=value;return 0;}	/* not an array! */
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	781b      	ldrb	r3, [r3, #0]
 8001a82:	2b5b      	cmp	r3, #91	; 0x5b
 8001a84:	d004      	beq.n	8001a90 <parse_array+0x1c>
 8001a86:	4a35      	ldr	r2, [pc, #212]	; (8001b5c <parse_array+0xe8>)
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	6013      	str	r3, [r2, #0]
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	e060      	b.n	8001b52 <parse_array+0xde>

	item->type=cJSON_Array;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2205      	movs	r2, #5
 8001a94:	60da      	str	r2, [r3, #12]
	value=skip(value+1);
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	3301      	adds	r3, #1
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f7ff ff06 	bl	80018ac <skip>
 8001aa0:	6038      	str	r0, [r7, #0]
	if (*value==']') return value+1;	/* empty array. */
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	781b      	ldrb	r3, [r3, #0]
 8001aa6:	2b5d      	cmp	r3, #93	; 0x5d
 8001aa8:	d102      	bne.n	8001ab0 <parse_array+0x3c>
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	3301      	adds	r3, #1
 8001aae:	e050      	b.n	8001b52 <parse_array+0xde>

	item->child=child=cJSON_New_Item();
 8001ab0:	f7ff fb1a 	bl	80010e8 <cJSON_New_Item>
 8001ab4:	60f8      	str	r0, [r7, #12]
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	68fa      	ldr	r2, [r7, #12]
 8001aba:	609a      	str	r2, [r3, #8]
	if (!item->child) return 0;		 /* memory fail */
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	689b      	ldr	r3, [r3, #8]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d101      	bne.n	8001ac8 <parse_array+0x54>
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	e044      	b.n	8001b52 <parse_array+0xde>
	value=skip(parse_value(child,skip(value)));	/* skip any spacing, get the value. */
 8001ac8:	6838      	ldr	r0, [r7, #0]
 8001aca:	f7ff feef 	bl	80018ac <skip>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	68f8      	ldr	r0, [r7, #12]
 8001ad4:	f7ff ff56 	bl	8001984 <parse_value>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	4618      	mov	r0, r3
 8001adc:	f7ff fee6 	bl	80018ac <skip>
 8001ae0:	6038      	str	r0, [r7, #0]
	if (!value) return 0;
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d125      	bne.n	8001b34 <parse_array+0xc0>
 8001ae8:	2300      	movs	r3, #0
 8001aea:	e032      	b.n	8001b52 <parse_array+0xde>

	while (*value==',')
	{
		cJSON *new_item;
		if (!(new_item=cJSON_New_Item())) return 0; 	/* memory fail */
 8001aec:	f7ff fafc 	bl	80010e8 <cJSON_New_Item>
 8001af0:	60b8      	str	r0, [r7, #8]
 8001af2:	68bb      	ldr	r3, [r7, #8]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d101      	bne.n	8001afc <parse_array+0x88>
 8001af8:	2300      	movs	r3, #0
 8001afa:	e02a      	b.n	8001b52 <parse_array+0xde>
		child->next=new_item;new_item->prev=child;child=new_item;
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	68ba      	ldr	r2, [r7, #8]
 8001b00:	601a      	str	r2, [r3, #0]
 8001b02:	68bb      	ldr	r3, [r7, #8]
 8001b04:	68fa      	ldr	r2, [r7, #12]
 8001b06:	605a      	str	r2, [r3, #4]
 8001b08:	68bb      	ldr	r3, [r7, #8]
 8001b0a:	60fb      	str	r3, [r7, #12]
		value=skip(parse_value(child,skip(value+1)));
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	3301      	adds	r3, #1
 8001b10:	4618      	mov	r0, r3
 8001b12:	f7ff fecb 	bl	80018ac <skip>
 8001b16:	4603      	mov	r3, r0
 8001b18:	4619      	mov	r1, r3
 8001b1a:	68f8      	ldr	r0, [r7, #12]
 8001b1c:	f7ff ff32 	bl	8001984 <parse_value>
 8001b20:	4603      	mov	r3, r0
 8001b22:	4618      	mov	r0, r3
 8001b24:	f7ff fec2 	bl	80018ac <skip>
 8001b28:	6038      	str	r0, [r7, #0]
		if (!value) return 0;	/* memory fail */
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d101      	bne.n	8001b34 <parse_array+0xc0>
 8001b30:	2300      	movs	r3, #0
 8001b32:	e00e      	b.n	8001b52 <parse_array+0xde>
	while (*value==',')
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	781b      	ldrb	r3, [r3, #0]
 8001b38:	2b2c      	cmp	r3, #44	; 0x2c
 8001b3a:	d0d7      	beq.n	8001aec <parse_array+0x78>
	}

	if (*value==']') return value+1;	/* end of array */
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	781b      	ldrb	r3, [r3, #0]
 8001b40:	2b5d      	cmp	r3, #93	; 0x5d
 8001b42:	d102      	bne.n	8001b4a <parse_array+0xd6>
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	3301      	adds	r3, #1
 8001b48:	e003      	b.n	8001b52 <parse_array+0xde>
	ep=value;return 0;	/* malformed. */
 8001b4a:	4a04      	ldr	r2, [pc, #16]	; (8001b5c <parse_array+0xe8>)
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	6013      	str	r3, [r2, #0]
 8001b50:	2300      	movs	r3, #0
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	3710      	adds	r7, #16
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	2000027c 	.word	0x2000027c

08001b60 <parse_object>:
	return out;	
}

/* Build an object from the text. */
static const char *parse_object(cJSON *item,const char *value)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b084      	sub	sp, #16
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
 8001b68:	6039      	str	r1, [r7, #0]
	cJSON *child;
	if (*value!='{')	{ep=value;return 0;}	/* not an object! */
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	781b      	ldrb	r3, [r3, #0]
 8001b6e:	2b7b      	cmp	r3, #123	; 0x7b
 8001b70:	d004      	beq.n	8001b7c <parse_object+0x1c>
 8001b72:	4a59      	ldr	r2, [pc, #356]	; (8001cd8 <parse_object+0x178>)
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	6013      	str	r3, [r2, #0]
 8001b78:	2300      	movs	r3, #0
 8001b7a:	e0a8      	b.n	8001cce <parse_object+0x16e>
	
	item->type=cJSON_Object;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2206      	movs	r2, #6
 8001b80:	60da      	str	r2, [r3, #12]
	value=skip(value+1);
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	3301      	adds	r3, #1
 8001b86:	4618      	mov	r0, r3
 8001b88:	f7ff fe90 	bl	80018ac <skip>
 8001b8c:	6038      	str	r0, [r7, #0]
	if (*value=='}') return value+1;	/* empty array. */
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	781b      	ldrb	r3, [r3, #0]
 8001b92:	2b7d      	cmp	r3, #125	; 0x7d
 8001b94:	d102      	bne.n	8001b9c <parse_object+0x3c>
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	3301      	adds	r3, #1
 8001b9a:	e098      	b.n	8001cce <parse_object+0x16e>
	
	item->child=child=cJSON_New_Item();
 8001b9c:	f7ff faa4 	bl	80010e8 <cJSON_New_Item>
 8001ba0:	60f8      	str	r0, [r7, #12]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	68fa      	ldr	r2, [r7, #12]
 8001ba6:	609a      	str	r2, [r3, #8]
	if (!item->child) return 0;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	689b      	ldr	r3, [r3, #8]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d101      	bne.n	8001bb4 <parse_object+0x54>
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	e08c      	b.n	8001cce <parse_object+0x16e>
	value=skip(parse_string(child,skip(value)));
 8001bb4:	6838      	ldr	r0, [r7, #0]
 8001bb6:	f7ff fe79 	bl	80018ac <skip>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	68f8      	ldr	r0, [r7, #12]
 8001bc0:	f7ff fcf4 	bl	80015ac <parse_string>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f7ff fe70 	bl	80018ac <skip>
 8001bcc:	6038      	str	r0, [r7, #0]
	if (!value) return 0;
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d101      	bne.n	8001bd8 <parse_object+0x78>
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	e07a      	b.n	8001cce <parse_object+0x16e>
	child->string=child->valuestring;child->valuestring=0;
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	691a      	ldr	r2, [r3, #16]
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	621a      	str	r2, [r3, #32]
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	2200      	movs	r2, #0
 8001be4:	611a      	str	r2, [r3, #16]
	if (*value!=':') {ep=value;return 0;}	/* fail! */
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	781b      	ldrb	r3, [r3, #0]
 8001bea:	2b3a      	cmp	r3, #58	; 0x3a
 8001bec:	d004      	beq.n	8001bf8 <parse_object+0x98>
 8001bee:	4a3a      	ldr	r2, [pc, #232]	; (8001cd8 <parse_object+0x178>)
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	6013      	str	r3, [r2, #0]
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	e06a      	b.n	8001cce <parse_object+0x16e>
	value=skip(parse_value(child,skip(value+1)));	/* skip any spacing, get the value. */
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	3301      	adds	r3, #1
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f7ff fe55 	bl	80018ac <skip>
 8001c02:	4603      	mov	r3, r0
 8001c04:	4619      	mov	r1, r3
 8001c06:	68f8      	ldr	r0, [r7, #12]
 8001c08:	f7ff febc 	bl	8001984 <parse_value>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f7ff fe4c 	bl	80018ac <skip>
 8001c14:	6038      	str	r0, [r7, #0]
	if (!value) return 0;
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d149      	bne.n	8001cb0 <parse_object+0x150>
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	e056      	b.n	8001cce <parse_object+0x16e>
	
	while (*value==',')
	{
		cJSON *new_item;
		if (!(new_item=cJSON_New_Item()))	return 0; /* memory fail */
 8001c20:	f7ff fa62 	bl	80010e8 <cJSON_New_Item>
 8001c24:	60b8      	str	r0, [r7, #8]
 8001c26:	68bb      	ldr	r3, [r7, #8]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d101      	bne.n	8001c30 <parse_object+0xd0>
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	e04e      	b.n	8001cce <parse_object+0x16e>
		child->next=new_item;new_item->prev=child;child=new_item;
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	68ba      	ldr	r2, [r7, #8]
 8001c34:	601a      	str	r2, [r3, #0]
 8001c36:	68bb      	ldr	r3, [r7, #8]
 8001c38:	68fa      	ldr	r2, [r7, #12]
 8001c3a:	605a      	str	r2, [r3, #4]
 8001c3c:	68bb      	ldr	r3, [r7, #8]
 8001c3e:	60fb      	str	r3, [r7, #12]
		value=skip(parse_string(child,skip(value+1)));
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	3301      	adds	r3, #1
 8001c44:	4618      	mov	r0, r3
 8001c46:	f7ff fe31 	bl	80018ac <skip>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	68f8      	ldr	r0, [r7, #12]
 8001c50:	f7ff fcac 	bl	80015ac <parse_string>
 8001c54:	4603      	mov	r3, r0
 8001c56:	4618      	mov	r0, r3
 8001c58:	f7ff fe28 	bl	80018ac <skip>
 8001c5c:	6038      	str	r0, [r7, #0]
		if (!value) return 0;
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d101      	bne.n	8001c68 <parse_object+0x108>
 8001c64:	2300      	movs	r3, #0
 8001c66:	e032      	b.n	8001cce <parse_object+0x16e>
		child->string=child->valuestring;child->valuestring=0;
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	691a      	ldr	r2, [r3, #16]
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	621a      	str	r2, [r3, #32]
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	2200      	movs	r2, #0
 8001c74:	611a      	str	r2, [r3, #16]
		if (*value!=':') {ep=value;return 0;}	/* fail! */
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	781b      	ldrb	r3, [r3, #0]
 8001c7a:	2b3a      	cmp	r3, #58	; 0x3a
 8001c7c:	d004      	beq.n	8001c88 <parse_object+0x128>
 8001c7e:	4a16      	ldr	r2, [pc, #88]	; (8001cd8 <parse_object+0x178>)
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	6013      	str	r3, [r2, #0]
 8001c84:	2300      	movs	r3, #0
 8001c86:	e022      	b.n	8001cce <parse_object+0x16e>
		value=skip(parse_value(child,skip(value+1)));	/* skip any spacing, get the value. */
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	3301      	adds	r3, #1
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f7ff fe0d 	bl	80018ac <skip>
 8001c92:	4603      	mov	r3, r0
 8001c94:	4619      	mov	r1, r3
 8001c96:	68f8      	ldr	r0, [r7, #12]
 8001c98:	f7ff fe74 	bl	8001984 <parse_value>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f7ff fe04 	bl	80018ac <skip>
 8001ca4:	6038      	str	r0, [r7, #0]
		if (!value) return 0;
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d101      	bne.n	8001cb0 <parse_object+0x150>
 8001cac:	2300      	movs	r3, #0
 8001cae:	e00e      	b.n	8001cce <parse_object+0x16e>
	while (*value==',')
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	781b      	ldrb	r3, [r3, #0]
 8001cb4:	2b2c      	cmp	r3, #44	; 0x2c
 8001cb6:	d0b3      	beq.n	8001c20 <parse_object+0xc0>
	}
	
	if (*value=='}') return value+1;	/* end of array */
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	781b      	ldrb	r3, [r3, #0]
 8001cbc:	2b7d      	cmp	r3, #125	; 0x7d
 8001cbe:	d102      	bne.n	8001cc6 <parse_object+0x166>
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	3301      	adds	r3, #1
 8001cc4:	e003      	b.n	8001cce <parse_object+0x16e>
	ep=value;return 0;	/* malformed. */
 8001cc6:	4a04      	ldr	r2, [pc, #16]	; (8001cd8 <parse_object+0x178>)
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	6013      	str	r3, [r2, #0]
 8001ccc:	2300      	movs	r3, #0
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	3710      	adds	r7, #16
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	2000027c 	.word	0x2000027c

08001cdc <cJSON_GetObjectItem>:
}

/* Get Array size/item / object item. */
int    cJSON_GetArraySize(cJSON *array)							{cJSON *c=array->child; int i=0;while(c)i++,c=c->next;return i;}
cJSON *cJSON_GetArrayItem(cJSON *array,int item)				{cJSON *c=array->child; while (c && item>0) item--,c=c->next; return c;}
cJSON *cJSON_GetObjectItem(cJSON *object,const char *string)	{cJSON *c=object->child; while (c && cJSON_strcasecmp(c->string,string)) c=c->next; return c;}
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b084      	sub	sp, #16
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
 8001ce4:	6039      	str	r1, [r7, #0]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	689b      	ldr	r3, [r3, #8]
 8001cea:	60fb      	str	r3, [r7, #12]
 8001cec:	e002      	b.n	8001cf4 <cJSON_GetObjectItem+0x18>
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	60fb      	str	r3, [r7, #12]
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d008      	beq.n	8001d0c <cJSON_GetObjectItem+0x30>
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	6a1b      	ldr	r3, [r3, #32]
 8001cfe:	6839      	ldr	r1, [r7, #0]
 8001d00:	4618      	mov	r0, r3
 8001d02:	f7ff f983 	bl	800100c <cJSON_strcasecmp>
 8001d06:	4603      	mov	r3, r0
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d1f0      	bne.n	8001cee <cJSON_GetObjectItem+0x12>
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	4618      	mov	r0, r3
 8001d10:	3710      	adds	r7, #16
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
	...

08001d18 <parseValue>:

//Функция разбора подстроки значений параметра
//Принимает указатель на массив символов со значениями параметра
//Ворзвращает указатель на разобранный массив символов со значениями параметра
char *parseValue(char *value)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b086      	sub	sp, #24
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
	char *tmp;
	for(int i = 1, j = 0; i < strlen(value); i++)
 8001d20:	2301      	movs	r3, #1
 8001d22:	617b      	str	r3, [r7, #20]
 8001d24:	2300      	movs	r3, #0
 8001d26:	613b      	str	r3, [r7, #16]
 8001d28:	e013      	b.n	8001d52 <parseValue+0x3a>
	{
		if(i % 2)
 8001d2a:	697b      	ldr	r3, [r7, #20]
 8001d2c:	f003 0301 	and.w	r3, r3, #1
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d00b      	beq.n	8001d4c <parseValue+0x34>
		{
			paramValue[j] = value[i];
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	687a      	ldr	r2, [r7, #4]
 8001d38:	4413      	add	r3, r2
 8001d3a:	7819      	ldrb	r1, [r3, #0]
 8001d3c:	4a0c      	ldr	r2, [pc, #48]	; (8001d70 <parseValue+0x58>)
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	4413      	add	r3, r2
 8001d42:	460a      	mov	r2, r1
 8001d44:	701a      	strb	r2, [r3, #0]
			j++;
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	3301      	adds	r3, #1
 8001d4a:	613b      	str	r3, [r7, #16]
	for(int i = 1, j = 0; i < strlen(value); i++)
 8001d4c:	697b      	ldr	r3, [r7, #20]
 8001d4e:	3301      	adds	r3, #1
 8001d50:	617b      	str	r3, [r7, #20]
 8001d52:	6878      	ldr	r0, [r7, #4]
 8001d54:	f7fe fa46 	bl	80001e4 <strlen>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	697b      	ldr	r3, [r7, #20]
 8001d5c:	429a      	cmp	r2, r3
 8001d5e:	d8e4      	bhi.n	8001d2a <parseValue+0x12>
		}
	}
	tmp = paramValue;
 8001d60:	4b03      	ldr	r3, [pc, #12]	; (8001d70 <parseValue+0x58>)
 8001d62:	60fb      	str	r3, [r7, #12]

	return tmp;
 8001d64:	68fb      	ldr	r3, [r7, #12]
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	3718      	adds	r7, #24
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	20000834 	.word	0x20000834

08001d74 <json_input>:
//Функция разбора полученной строки JSON
void json_input(char *text)
{
 8001d74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d76:	ed2d 8b04 	vpush	{d8-d9}
 8001d7a:	b0a3      	sub	sp, #140	; 0x8c
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
	cJSON *json = cJSON_Parse(text);
 8001d80:	6878      	ldr	r0, [r7, #4]
 8001d82:	f7ff fdf1 	bl	8001968 <cJSON_Parse>
 8001d86:	67b8      	str	r0, [r7, #120]	; 0x78

	cJSON *stime = cJSON_GetObjectItem(json, "TIME");
 8001d88:	4978      	ldr	r1, [pc, #480]	; (8001f6c <json_input+0x1f8>)
 8001d8a:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8001d8c:	f7ff ffa6 	bl	8001cdc <cJSON_GetObjectItem>
 8001d90:	6778      	str	r0, [r7, #116]	; 0x74
	TIME = stime->valuestring;
 8001d92:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001d94:	691b      	ldr	r3, [r3, #16]
 8001d96:	4a76      	ldr	r2, [pc, #472]	; (8001f70 <json_input+0x1fc>)
 8001d98:	6013      	str	r3, [r2, #0]
	Time_Server = atoi(TIME);
 8001d9a:	4b75      	ldr	r3, [pc, #468]	; (8001f70 <json_input+0x1fc>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f018 fd53 	bl	801a84a <atoi>
 8001da4:	4603      	mov	r3, r0
 8001da6:	4a73      	ldr	r2, [pc, #460]	; (8001f74 <json_input+0x200>)
 8001da8:	6013      	str	r3, [r2, #0]
	if(Time_Server > Time_Client)
 8001daa:	4b72      	ldr	r3, [pc, #456]	; (8001f74 <json_input+0x200>)
 8001dac:	681a      	ldr	r2, [r3, #0]
 8001dae:	4b72      	ldr	r3, [pc, #456]	; (8001f78 <json_input+0x204>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	429a      	cmp	r2, r3
 8001db4:	f340 85ff 	ble.w	80029b6 <json_input+0xc42>
	{
		cJSON *sInstruction = cJSON_GetObjectItem(json, "INSTRUCTION");
 8001db8:	4970      	ldr	r1, [pc, #448]	; (8001f7c <json_input+0x208>)
 8001dba:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8001dbc:	f7ff ff8e 	bl	8001cdc <cJSON_GetObjectItem>
 8001dc0:	6738      	str	r0, [r7, #112]	; 0x70
		INSTRUCTION = sInstruction->valuestring;
 8001dc2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001dc4:	691b      	ldr	r3, [r3, #16]
 8001dc6:	4a6e      	ldr	r2, [pc, #440]	; (8001f80 <json_input+0x20c>)
 8001dc8:	6013      	str	r3, [r2, #0]

		if(strcmp(INSTRUCTION, "SET_PROGRAMM") == 0)
 8001dca:	4b6d      	ldr	r3, [pc, #436]	; (8001f80 <json_input+0x20c>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	496d      	ldr	r1, [pc, #436]	; (8001f84 <json_input+0x210>)
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f7fe f9fd 	bl	80001d0 <strcmp>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	f040 84ad 	bne.w	8002738 <json_input+0x9c4>
		{
			cJSON *sType = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "TYPE");
 8001dde:	496a      	ldr	r1, [pc, #424]	; (8001f88 <json_input+0x214>)
 8001de0:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8001de2:	f7ff ff7b 	bl	8001cdc <cJSON_GetObjectItem>
 8001de6:	4603      	mov	r3, r0
 8001de8:	4968      	ldr	r1, [pc, #416]	; (8001f8c <json_input+0x218>)
 8001dea:	4618      	mov	r0, r3
 8001dec:	f7ff ff76 	bl	8001cdc <cJSON_GetObjectItem>
 8001df0:	65f8      	str	r0, [r7, #92]	; 0x5c
			TYPE = sType->valuestring;
 8001df2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001df4:	691b      	ldr	r3, [r3, #16]
 8001df6:	4a66      	ldr	r2, [pc, #408]	; (8001f90 <json_input+0x21c>)
 8001df8:	6013      	str	r3, [r2, #0]

			if(strcmp(TYPE, "SET_DIDO") == 0)	//Включить/выключить цифровой выход если цифровой вход = значение(уровень)
 8001dfa:	4b65      	ldr	r3, [pc, #404]	; (8001f90 <json_input+0x21c>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4965      	ldr	r1, [pc, #404]	; (8001f94 <json_input+0x220>)
 8001e00:	4618      	mov	r0, r3
 8001e02:	f7fe f9e5 	bl	80001d0 <strcmp>
 8001e06:	4603      	mov	r3, r0
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	f040 80d9 	bne.w	8001fc0 <json_input+0x24c>
			{
				cJSON *s1 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "D_IN");
 8001e0e:	495e      	ldr	r1, [pc, #376]	; (8001f88 <json_input+0x214>)
 8001e10:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8001e12:	f7ff ff63 	bl	8001cdc <cJSON_GetObjectItem>
 8001e16:	4603      	mov	r3, r0
 8001e18:	495f      	ldr	r1, [pc, #380]	; (8001f98 <json_input+0x224>)
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f7ff ff5e 	bl	8001cdc <cJSON_GetObjectItem>
 8001e20:	6178      	str	r0, [r7, #20]
				cJSON *s2 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "VAR_IN");
 8001e22:	4959      	ldr	r1, [pc, #356]	; (8001f88 <json_input+0x214>)
 8001e24:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8001e26:	f7ff ff59 	bl	8001cdc <cJSON_GetObjectItem>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	495b      	ldr	r1, [pc, #364]	; (8001f9c <json_input+0x228>)
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f7ff ff54 	bl	8001cdc <cJSON_GetObjectItem>
 8001e34:	6138      	str	r0, [r7, #16]
				cJSON *s3 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "D_OUT");
 8001e36:	4954      	ldr	r1, [pc, #336]	; (8001f88 <json_input+0x214>)
 8001e38:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8001e3a:	f7ff ff4f 	bl	8001cdc <cJSON_GetObjectItem>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	4957      	ldr	r1, [pc, #348]	; (8001fa0 <json_input+0x22c>)
 8001e42:	4618      	mov	r0, r3
 8001e44:	f7ff ff4a 	bl	8001cdc <cJSON_GetObjectItem>
 8001e48:	60f8      	str	r0, [r7, #12]
				cJSON *s4 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "VAR_OUT");
 8001e4a:	494f      	ldr	r1, [pc, #316]	; (8001f88 <json_input+0x214>)
 8001e4c:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8001e4e:	f7ff ff45 	bl	8001cdc <cJSON_GetObjectItem>
 8001e52:	4603      	mov	r3, r0
 8001e54:	4953      	ldr	r1, [pc, #332]	; (8001fa4 <json_input+0x230>)
 8001e56:	4618      	mov	r0, r3
 8001e58:	f7ff ff40 	bl	8001cdc <cJSON_GetObjectItem>
 8001e5c:	60b8      	str	r0, [r7, #8]

				D_IN = s1->valuestring;
 8001e5e:	697b      	ldr	r3, [r7, #20]
 8001e60:	691b      	ldr	r3, [r3, #16]
 8001e62:	4a51      	ldr	r2, [pc, #324]	; (8001fa8 <json_input+0x234>)
 8001e64:	6013      	str	r3, [r2, #0]
				VAR_IN = s2->valuestring;
 8001e66:	693b      	ldr	r3, [r7, #16]
 8001e68:	691b      	ldr	r3, [r3, #16]
 8001e6a:	4a50      	ldr	r2, [pc, #320]	; (8001fac <json_input+0x238>)
 8001e6c:	6013      	str	r3, [r2, #0]
				D_OUT = s3->valuestring;
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	691b      	ldr	r3, [r3, #16]
 8001e72:	4a4f      	ldr	r2, [pc, #316]	; (8001fb0 <json_input+0x23c>)
 8001e74:	6013      	str	r3, [r2, #0]
				VAR_OUT = s4->valuestring;
 8001e76:	68bb      	ldr	r3, [r7, #8]
 8001e78:	691b      	ldr	r3, [r3, #16]
 8001e7a:	4a4e      	ldr	r2, [pc, #312]	; (8001fb4 <json_input+0x240>)
 8001e7c:	6013      	str	r3, [r2, #0]

				save_dido(D_IN, text);
 8001e7e:	4b4a      	ldr	r3, [pc, #296]	; (8001fa8 <json_input+0x234>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	6879      	ldr	r1, [r7, #4]
 8001e84:	4618      	mov	r0, r3
 8001e86:	f004 fef9 	bl	8006c7c <save_dido>

				set_dido(D_IN, (uint8_t)(atoi(VAR_IN)), D_OUT, (uint8_t)(atoi(VAR_OUT)));
 8001e8a:	4b47      	ldr	r3, [pc, #284]	; (8001fa8 <json_input+0x234>)
 8001e8c:	681c      	ldr	r4, [r3, #0]
 8001e8e:	4b47      	ldr	r3, [pc, #284]	; (8001fac <json_input+0x238>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4618      	mov	r0, r3
 8001e94:	f018 fcd9 	bl	801a84a <atoi>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	b2dd      	uxtb	r5, r3
 8001e9c:	4b44      	ldr	r3, [pc, #272]	; (8001fb0 <json_input+0x23c>)
 8001e9e:	681e      	ldr	r6, [r3, #0]
 8001ea0:	4b44      	ldr	r3, [pc, #272]	; (8001fb4 <json_input+0x240>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f018 fcd0 	bl	801a84a <atoi>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	b2db      	uxtb	r3, r3
 8001eae:	4632      	mov	r2, r6
 8001eb0:	4629      	mov	r1, r5
 8001eb2:	4620      	mov	r0, r4
 8001eb4:	f006 fa68 	bl	8008388 <set_dido>

				//---------------------------------QA---------------------------------
				SEND_str("\n");
 8001eb8:	483f      	ldr	r0, [pc, #252]	; (8001fb8 <json_input+0x244>)
 8001eba:	f000 fea7 	bl	8002c0c <SEND_str>
				SEND_str(TYPE);
 8001ebe:	4b34      	ldr	r3, [pc, #208]	; (8001f90 <json_input+0x21c>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f000 fea2 	bl	8002c0c <SEND_str>
				SEND_str("\n");
 8001ec8:	483b      	ldr	r0, [pc, #236]	; (8001fb8 <json_input+0x244>)
 8001eca:	f000 fe9f 	bl	8002c0c <SEND_str>
				SEND_str(D_IN);
 8001ece:	4b36      	ldr	r3, [pc, #216]	; (8001fa8 <json_input+0x234>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f000 fe9a 	bl	8002c0c <SEND_str>
				SEND_str(": ");
 8001ed8:	4838      	ldr	r0, [pc, #224]	; (8001fbc <json_input+0x248>)
 8001eda:	f000 fe97 	bl	8002c0c <SEND_str>
				USART_Tx(D_IN[4]);
 8001ede:	4b32      	ldr	r3, [pc, #200]	; (8001fa8 <json_input+0x234>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	3304      	adds	r3, #4
 8001ee4:	781b      	ldrb	r3, [r3, #0]
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f000 fe78 	bl	8002bdc <USART_Tx>
				SEND_str("\n");
 8001eec:	4832      	ldr	r0, [pc, #200]	; (8001fb8 <json_input+0x244>)
 8001eee:	f000 fe8d 	bl	8002c0c <SEND_str>
				SEND_str(VAR_IN);
 8001ef2:	4b2e      	ldr	r3, [pc, #184]	; (8001fac <json_input+0x238>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f000 fe88 	bl	8002c0c <SEND_str>
				SEND_str("\n");
 8001efc:	482e      	ldr	r0, [pc, #184]	; (8001fb8 <json_input+0x244>)
 8001efe:	f000 fe85 	bl	8002c0c <SEND_str>
				SEND_str(D_OUT);
 8001f02:	4b2b      	ldr	r3, [pc, #172]	; (8001fb0 <json_input+0x23c>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4618      	mov	r0, r3
 8001f08:	f000 fe80 	bl	8002c0c <SEND_str>
				SEND_str(": ");
 8001f0c:	482b      	ldr	r0, [pc, #172]	; (8001fbc <json_input+0x248>)
 8001f0e:	f000 fe7d 	bl	8002c0c <SEND_str>
				USART_Tx(D_OUT[5]);
 8001f12:	4b27      	ldr	r3, [pc, #156]	; (8001fb0 <json_input+0x23c>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	3305      	adds	r3, #5
 8001f18:	781b      	ldrb	r3, [r3, #0]
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f000 fe5e 	bl	8002bdc <USART_Tx>
				SEND_str("\n");
 8001f20:	4825      	ldr	r0, [pc, #148]	; (8001fb8 <json_input+0x244>)
 8001f22:	f000 fe73 	bl	8002c0c <SEND_str>
				SEND_str(VAR_OUT);
 8001f26:	4b23      	ldr	r3, [pc, #140]	; (8001fb4 <json_input+0x240>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f000 fe6e 	bl	8002c0c <SEND_str>
				SEND_str("\n");
 8001f30:	4821      	ldr	r0, [pc, #132]	; (8001fb8 <json_input+0x244>)
 8001f32:	f000 fe6b 	bl	8002c0c <SEND_str>
				//------------------------------------------------------------------

				cJSON_Delete(json);
 8001f36:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8001f38:	f7ff f8ee 	bl	8001118 <cJSON_Delete>
				free(stime);
 8001f3c:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8001f3e:	f018 fcb5 	bl	801a8ac <free>
				free(sInstruction);
 8001f42:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8001f44:	f018 fcb2 	bl	801a8ac <free>
				free(sType);
 8001f48:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8001f4a:	f018 fcaf 	bl	801a8ac <free>
				free(s1);
 8001f4e:	6978      	ldr	r0, [r7, #20]
 8001f50:	f018 fcac 	bl	801a8ac <free>
				free(s2);
 8001f54:	6938      	ldr	r0, [r7, #16]
 8001f56:	f018 fca9 	bl	801a8ac <free>
				free(s3);
 8001f5a:	68f8      	ldr	r0, [r7, #12]
 8001f5c:	f018 fca6 	bl	801a8ac <free>
				free(s4);
 8001f60:	68b8      	ldr	r0, [r7, #8]
 8001f62:	f018 fca3 	bl	801a8ac <free>
	else
	{
		cJSON_Delete(json);
		free(stime);
	}
}
 8001f66:	f000 bd2c 	b.w	80029c2 <json_input+0xc4e>
 8001f6a:	bf00      	nop
 8001f6c:	0801fe20 	.word	0x0801fe20
 8001f70:	20000810 	.word	0x20000810
 8001f74:	20000280 	.word	0x20000280
 8001f78:	20000284 	.word	0x20000284
 8001f7c:	0801fe28 	.word	0x0801fe28
 8001f80:	20000858 	.word	0x20000858
 8001f84:	0801fe34 	.word	0x0801fe34
 8001f88:	0801fe44 	.word	0x0801fe44
 8001f8c:	0801fe4c 	.word	0x0801fe4c
 8001f90:	20000804 	.word	0x20000804
 8001f94:	0801fe54 	.word	0x0801fe54
 8001f98:	0801fe60 	.word	0x0801fe60
 8001f9c:	0801fe68 	.word	0x0801fe68
 8001fa0:	0801fe70 	.word	0x0801fe70
 8001fa4:	0801fe78 	.word	0x0801fe78
 8001fa8:	20000850 	.word	0x20000850
 8001fac:	20000814 	.word	0x20000814
 8001fb0:	20000840 	.word	0x20000840
 8001fb4:	20000820 	.word	0x20000820
 8001fb8:	0801fe80 	.word	0x0801fe80
 8001fbc:	0801fe84 	.word	0x0801fe84
			else if((strcmp(TYPE, "SET_VAIDO") == 0) || strcmp(TYPE, "SET_CAIDO") == 0)	//Включить/выключить один цифровой выход если аналоговый вход(измерение напряжения || измерение тока) в интервале значений
 8001fc0:	4b76      	ldr	r3, [pc, #472]	; (800219c <json_input+0x428>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4976      	ldr	r1, [pc, #472]	; (80021a0 <json_input+0x42c>)
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f7fe f902 	bl	80001d0 <strcmp>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d009      	beq.n	8001fe6 <json_input+0x272>
 8001fd2:	4b72      	ldr	r3, [pc, #456]	; (800219c <json_input+0x428>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4973      	ldr	r1, [pc, #460]	; (80021a4 <json_input+0x430>)
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f7fe f8f9 	bl	80001d0 <strcmp>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	f040 818d 	bne.w	8002300 <json_input+0x58c>
				cJSON *s1 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "A_IN");
 8001fe6:	4970      	ldr	r1, [pc, #448]	; (80021a8 <json_input+0x434>)
 8001fe8:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8001fea:	f7ff fe77 	bl	8001cdc <cJSON_GetObjectItem>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	496e      	ldr	r1, [pc, #440]	; (80021ac <json_input+0x438>)
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f7ff fe72 	bl	8001cdc <cJSON_GetObjectItem>
 8001ff8:	62b8      	str	r0, [r7, #40]	; 0x28
				cJSON *s2 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "RANGE_LOW");
 8001ffa:	496b      	ldr	r1, [pc, #428]	; (80021a8 <json_input+0x434>)
 8001ffc:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8001ffe:	f7ff fe6d 	bl	8001cdc <cJSON_GetObjectItem>
 8002002:	4603      	mov	r3, r0
 8002004:	496a      	ldr	r1, [pc, #424]	; (80021b0 <json_input+0x43c>)
 8002006:	4618      	mov	r0, r3
 8002008:	f7ff fe68 	bl	8001cdc <cJSON_GetObjectItem>
 800200c:	6278      	str	r0, [r7, #36]	; 0x24
				cJSON *s3 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "RANGE_HIGH");
 800200e:	4966      	ldr	r1, [pc, #408]	; (80021a8 <json_input+0x434>)
 8002010:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8002012:	f7ff fe63 	bl	8001cdc <cJSON_GetObjectItem>
 8002016:	4603      	mov	r3, r0
 8002018:	4966      	ldr	r1, [pc, #408]	; (80021b4 <json_input+0x440>)
 800201a:	4618      	mov	r0, r3
 800201c:	f7ff fe5e 	bl	8001cdc <cJSON_GetObjectItem>
 8002020:	6238      	str	r0, [r7, #32]
				cJSON *s4 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "D_OUT");
 8002022:	4961      	ldr	r1, [pc, #388]	; (80021a8 <json_input+0x434>)
 8002024:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8002026:	f7ff fe59 	bl	8001cdc <cJSON_GetObjectItem>
 800202a:	4603      	mov	r3, r0
 800202c:	4962      	ldr	r1, [pc, #392]	; (80021b8 <json_input+0x444>)
 800202e:	4618      	mov	r0, r3
 8002030:	f7ff fe54 	bl	8001cdc <cJSON_GetObjectItem>
 8002034:	61f8      	str	r0, [r7, #28]
				cJSON *s5 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "VAR_OUT");
 8002036:	495c      	ldr	r1, [pc, #368]	; (80021a8 <json_input+0x434>)
 8002038:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800203a:	f7ff fe4f 	bl	8001cdc <cJSON_GetObjectItem>
 800203e:	4603      	mov	r3, r0
 8002040:	495e      	ldr	r1, [pc, #376]	; (80021bc <json_input+0x448>)
 8002042:	4618      	mov	r0, r3
 8002044:	f7ff fe4a 	bl	8001cdc <cJSON_GetObjectItem>
 8002048:	61b8      	str	r0, [r7, #24]
				A_IN = s1->valuestring;
 800204a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800204c:	691b      	ldr	r3, [r3, #16]
 800204e:	4a5c      	ldr	r2, [pc, #368]	; (80021c0 <json_input+0x44c>)
 8002050:	6013      	str	r3, [r2, #0]
				RANGE_LOW = s2->valuestring;
 8002052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002054:	691b      	ldr	r3, [r3, #16]
 8002056:	4a5b      	ldr	r2, [pc, #364]	; (80021c4 <json_input+0x450>)
 8002058:	6013      	str	r3, [r2, #0]
				RANGE_HIGH = s3->valuestring;
 800205a:	6a3b      	ldr	r3, [r7, #32]
 800205c:	691b      	ldr	r3, [r3, #16]
 800205e:	4a5a      	ldr	r2, [pc, #360]	; (80021c8 <json_input+0x454>)
 8002060:	6013      	str	r3, [r2, #0]
				D_OUT = s4->valuestring;
 8002062:	69fb      	ldr	r3, [r7, #28]
 8002064:	691b      	ldr	r3, [r3, #16]
 8002066:	4a59      	ldr	r2, [pc, #356]	; (80021cc <json_input+0x458>)
 8002068:	6013      	str	r3, [r2, #0]
				VAR_OUT = s5->valuestring;
 800206a:	69bb      	ldr	r3, [r7, #24]
 800206c:	691b      	ldr	r3, [r3, #16]
 800206e:	4a58      	ldr	r2, [pc, #352]	; (80021d0 <json_input+0x45c>)
 8002070:	6013      	str	r3, [r2, #0]
				if(strcmp(A_IN, "VHOD1") == 0)
 8002072:	4b53      	ldr	r3, [pc, #332]	; (80021c0 <json_input+0x44c>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4957      	ldr	r1, [pc, #348]	; (80021d4 <json_input+0x460>)
 8002078:	4618      	mov	r0, r3
 800207a:	f7fe f8a9 	bl	80001d0 <strcmp>
 800207e:	4603      	mov	r3, r0
 8002080:	2b00      	cmp	r3, #0
 8002082:	d11e      	bne.n	80020c2 <json_input+0x34e>
					if(strcmp(TYPE, "SET_VAIDO") == 0)
 8002084:	4b45      	ldr	r3, [pc, #276]	; (800219c <json_input+0x428>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4945      	ldr	r1, [pc, #276]	; (80021a0 <json_input+0x42c>)
 800208a:	4618      	mov	r0, r3
 800208c:	f7fe f8a0 	bl	80001d0 <strcmp>
 8002090:	4603      	mov	r3, r0
 8002092:	2b00      	cmp	r3, #0
 8002094:	d10a      	bne.n	80020ac <json_input+0x338>
						AiDo[0].inputFlag = true;
 8002096:	4b50      	ldr	r3, [pc, #320]	; (80021d8 <json_input+0x464>)
 8002098:	2201      	movs	r2, #1
 800209a:	f883 2020 	strb.w	r2, [r3, #32]
						SelectChannelOne(SET);
 800209e:	2201      	movs	r2, #1
 80020a0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80020a4:	484d      	ldr	r0, [pc, #308]	; (80021dc <json_input+0x468>)
 80020a6:	f009 fd15 	bl	800bad4 <HAL_GPIO_WritePin>
 80020aa:	e0a9      	b.n	8002200 <json_input+0x48c>
						AiDo[0].inputFlag = false;
 80020ac:	4b4a      	ldr	r3, [pc, #296]	; (80021d8 <json_input+0x464>)
 80020ae:	2200      	movs	r2, #0
 80020b0:	f883 2020 	strb.w	r2, [r3, #32]
						SelectChannelOne(RESET);
 80020b4:	2200      	movs	r2, #0
 80020b6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80020ba:	4848      	ldr	r0, [pc, #288]	; (80021dc <json_input+0x468>)
 80020bc:	f009 fd0a 	bl	800bad4 <HAL_GPIO_WritePin>
 80020c0:	e09e      	b.n	8002200 <json_input+0x48c>
				else if(strcmp(A_IN, "VHOD2") == 0)
 80020c2:	4b3f      	ldr	r3, [pc, #252]	; (80021c0 <json_input+0x44c>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4946      	ldr	r1, [pc, #280]	; (80021e0 <json_input+0x46c>)
 80020c8:	4618      	mov	r0, r3
 80020ca:	f7fe f881 	bl	80001d0 <strcmp>
 80020ce:	4603      	mov	r3, r0
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d11e      	bne.n	8002112 <json_input+0x39e>
					if(strcmp(TYPE, "SET_VAIDO") == 0)
 80020d4:	4b31      	ldr	r3, [pc, #196]	; (800219c <json_input+0x428>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4931      	ldr	r1, [pc, #196]	; (80021a0 <json_input+0x42c>)
 80020da:	4618      	mov	r0, r3
 80020dc:	f7fe f878 	bl	80001d0 <strcmp>
 80020e0:	4603      	mov	r3, r0
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d10a      	bne.n	80020fc <json_input+0x388>
						AiDo[1].inputFlag = true;
 80020e6:	4b3c      	ldr	r3, [pc, #240]	; (80021d8 <json_input+0x464>)
 80020e8:	2201      	movs	r2, #1
 80020ea:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
						SelectChannelTwo(SET);
 80020ee:	2201      	movs	r2, #1
 80020f0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80020f4:	4839      	ldr	r0, [pc, #228]	; (80021dc <json_input+0x468>)
 80020f6:	f009 fced 	bl	800bad4 <HAL_GPIO_WritePin>
 80020fa:	e081      	b.n	8002200 <json_input+0x48c>
						AiDo[1].inputFlag = false;
 80020fc:	4b36      	ldr	r3, [pc, #216]	; (80021d8 <json_input+0x464>)
 80020fe:	2200      	movs	r2, #0
 8002100:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
						SelectChannelTwo(RESET);
 8002104:	2200      	movs	r2, #0
 8002106:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800210a:	4834      	ldr	r0, [pc, #208]	; (80021dc <json_input+0x468>)
 800210c:	f009 fce2 	bl	800bad4 <HAL_GPIO_WritePin>
 8002110:	e076      	b.n	8002200 <json_input+0x48c>
				else if(strcmp(A_IN, "VHOD3") == 0)
 8002112:	4b2b      	ldr	r3, [pc, #172]	; (80021c0 <json_input+0x44c>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4933      	ldr	r1, [pc, #204]	; (80021e4 <json_input+0x470>)
 8002118:	4618      	mov	r0, r3
 800211a:	f7fe f859 	bl	80001d0 <strcmp>
 800211e:	4603      	mov	r3, r0
 8002120:	2b00      	cmp	r3, #0
 8002122:	d11e      	bne.n	8002162 <json_input+0x3ee>
					if(strcmp(TYPE, "SET_VAIDO") == 0)
 8002124:	4b1d      	ldr	r3, [pc, #116]	; (800219c <json_input+0x428>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	491d      	ldr	r1, [pc, #116]	; (80021a0 <json_input+0x42c>)
 800212a:	4618      	mov	r0, r3
 800212c:	f7fe f850 	bl	80001d0 <strcmp>
 8002130:	4603      	mov	r3, r0
 8002132:	2b00      	cmp	r3, #0
 8002134:	d10a      	bne.n	800214c <json_input+0x3d8>
						AiDo[2].inputFlag = true;
 8002136:	4b28      	ldr	r3, [pc, #160]	; (80021d8 <json_input+0x464>)
 8002138:	2201      	movs	r2, #1
 800213a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
						SelectChannelThree(SET);
 800213e:	2201      	movs	r2, #1
 8002140:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002144:	4825      	ldr	r0, [pc, #148]	; (80021dc <json_input+0x468>)
 8002146:	f009 fcc5 	bl	800bad4 <HAL_GPIO_WritePin>
 800214a:	e059      	b.n	8002200 <json_input+0x48c>
						AiDo[2].inputFlag = false;
 800214c:	4b22      	ldr	r3, [pc, #136]	; (80021d8 <json_input+0x464>)
 800214e:	2200      	movs	r2, #0
 8002150:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
						SelectChannelThree(RESET);
 8002154:	2200      	movs	r2, #0
 8002156:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800215a:	4820      	ldr	r0, [pc, #128]	; (80021dc <json_input+0x468>)
 800215c:	f009 fcba 	bl	800bad4 <HAL_GPIO_WritePin>
 8002160:	e04e      	b.n	8002200 <json_input+0x48c>
				else if(strcmp(A_IN, "VHOD4") == 0)
 8002162:	4b17      	ldr	r3, [pc, #92]	; (80021c0 <json_input+0x44c>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4920      	ldr	r1, [pc, #128]	; (80021e8 <json_input+0x474>)
 8002168:	4618      	mov	r0, r3
 800216a:	f7fe f831 	bl	80001d0 <strcmp>
 800216e:	4603      	mov	r3, r0
 8002170:	2b00      	cmp	r3, #0
 8002172:	d145      	bne.n	8002200 <json_input+0x48c>
					if(strcmp(TYPE, "SET_VAIDO") == 0)
 8002174:	4b09      	ldr	r3, [pc, #36]	; (800219c <json_input+0x428>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4909      	ldr	r1, [pc, #36]	; (80021a0 <json_input+0x42c>)
 800217a:	4618      	mov	r0, r3
 800217c:	f7fe f828 	bl	80001d0 <strcmp>
 8002180:	4603      	mov	r3, r0
 8002182:	2b00      	cmp	r3, #0
 8002184:	d132      	bne.n	80021ec <json_input+0x478>
						AiDo[3].inputFlag = true;
 8002186:	4b14      	ldr	r3, [pc, #80]	; (80021d8 <json_input+0x464>)
 8002188:	2201      	movs	r2, #1
 800218a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
						SelectChannelFour(SET);
 800218e:	2201      	movs	r2, #1
 8002190:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002194:	4811      	ldr	r0, [pc, #68]	; (80021dc <json_input+0x468>)
 8002196:	f009 fc9d 	bl	800bad4 <HAL_GPIO_WritePin>
 800219a:	e031      	b.n	8002200 <json_input+0x48c>
 800219c:	20000804 	.word	0x20000804
 80021a0:	0801fe88 	.word	0x0801fe88
 80021a4:	0801fe94 	.word	0x0801fe94
 80021a8:	0801fe44 	.word	0x0801fe44
 80021ac:	0801fea0 	.word	0x0801fea0
 80021b0:	0801fea8 	.word	0x0801fea8
 80021b4:	0801feb4 	.word	0x0801feb4
 80021b8:	0801fe70 	.word	0x0801fe70
 80021bc:	0801fe78 	.word	0x0801fe78
 80021c0:	20000854 	.word	0x20000854
 80021c4:	20000824 	.word	0x20000824
 80021c8:	20000844 	.word	0x20000844
 80021cc:	20000840 	.word	0x20000840
 80021d0:	20000820 	.word	0x20000820
 80021d4:	0801fec0 	.word	0x0801fec0
 80021d8:	200006c0 	.word	0x200006c0
 80021dc:	40021000 	.word	0x40021000
 80021e0:	0801fec8 	.word	0x0801fec8
 80021e4:	0801fed0 	.word	0x0801fed0
 80021e8:	0801fed8 	.word	0x0801fed8
						AiDo[3].inputFlag = false;
 80021ec:	4b77      	ldr	r3, [pc, #476]	; (80023cc <json_input+0x658>)
 80021ee:	2200      	movs	r2, #0
 80021f0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
						SelectChannelFour(RESET);
 80021f4:	2200      	movs	r2, #0
 80021f6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80021fa:	4875      	ldr	r0, [pc, #468]	; (80023d0 <json_input+0x65c>)
 80021fc:	f009 fc6a 	bl	800bad4 <HAL_GPIO_WritePin>
				save_aido(A_IN, text);
 8002200:	4b74      	ldr	r3, [pc, #464]	; (80023d4 <json_input+0x660>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	6879      	ldr	r1, [r7, #4]
 8002206:	4618      	mov	r0, r3
 8002208:	f004 fd5a 	bl	8006cc0 <save_aido>
				set_aido(A_IN, atof(RANGE_LOW), atof(RANGE_HIGH), D_OUT, (uint8_t)(atoi(VAR_OUT)));
 800220c:	4b71      	ldr	r3, [pc, #452]	; (80023d4 <json_input+0x660>)
 800220e:	681c      	ldr	r4, [r3, #0]
 8002210:	4b71      	ldr	r3, [pc, #452]	; (80023d8 <json_input+0x664>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4618      	mov	r0, r3
 8002216:	f018 fb15 	bl	801a844 <atof>
 800221a:	eeb0 8a40 	vmov.f32	s16, s0
 800221e:	eef0 8a60 	vmov.f32	s17, s1
 8002222:	4b6e      	ldr	r3, [pc, #440]	; (80023dc <json_input+0x668>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4618      	mov	r0, r3
 8002228:	f018 fb0c 	bl	801a844 <atof>
 800222c:	eeb0 9a40 	vmov.f32	s18, s0
 8002230:	eef0 9a60 	vmov.f32	s19, s1
 8002234:	4b6a      	ldr	r3, [pc, #424]	; (80023e0 <json_input+0x66c>)
 8002236:	681d      	ldr	r5, [r3, #0]
 8002238:	4b6a      	ldr	r3, [pc, #424]	; (80023e4 <json_input+0x670>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4618      	mov	r0, r3
 800223e:	f018 fb04 	bl	801a84a <atoi>
 8002242:	4603      	mov	r3, r0
 8002244:	b2db      	uxtb	r3, r3
 8002246:	461a      	mov	r2, r3
 8002248:	4629      	mov	r1, r5
 800224a:	eeb0 1a49 	vmov.f32	s2, s18
 800224e:	eef0 1a69 	vmov.f32	s3, s19
 8002252:	eeb0 0a48 	vmov.f32	s0, s16
 8002256:	eef0 0a68 	vmov.f32	s1, s17
 800225a:	4620      	mov	r0, r4
 800225c:	f006 fa5c 	bl	8008718 <set_aido>
				SEND_str("\n");
 8002260:	4861      	ldr	r0, [pc, #388]	; (80023e8 <json_input+0x674>)
 8002262:	f000 fcd3 	bl	8002c0c <SEND_str>
				SEND_str(TYPE);
 8002266:	4b61      	ldr	r3, [pc, #388]	; (80023ec <json_input+0x678>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4618      	mov	r0, r3
 800226c:	f000 fcce 	bl	8002c0c <SEND_str>
				SEND_str("\n");
 8002270:	485d      	ldr	r0, [pc, #372]	; (80023e8 <json_input+0x674>)
 8002272:	f000 fccb 	bl	8002c0c <SEND_str>
				SEND_str(A_IN);
 8002276:	4b57      	ldr	r3, [pc, #348]	; (80023d4 <json_input+0x660>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4618      	mov	r0, r3
 800227c:	f000 fcc6 	bl	8002c0c <SEND_str>
				SEND_str("\n");
 8002280:	4859      	ldr	r0, [pc, #356]	; (80023e8 <json_input+0x674>)
 8002282:	f000 fcc3 	bl	8002c0c <SEND_str>
				SEND_str(RANGE_LOW);
 8002286:	4b54      	ldr	r3, [pc, #336]	; (80023d8 <json_input+0x664>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4618      	mov	r0, r3
 800228c:	f000 fcbe 	bl	8002c0c <SEND_str>
				SEND_str("\n");
 8002290:	4855      	ldr	r0, [pc, #340]	; (80023e8 <json_input+0x674>)
 8002292:	f000 fcbb 	bl	8002c0c <SEND_str>
				SEND_str(RANGE_HIGH);
 8002296:	4b51      	ldr	r3, [pc, #324]	; (80023dc <json_input+0x668>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4618      	mov	r0, r3
 800229c:	f000 fcb6 	bl	8002c0c <SEND_str>
				SEND_str("\n");
 80022a0:	4851      	ldr	r0, [pc, #324]	; (80023e8 <json_input+0x674>)
 80022a2:	f000 fcb3 	bl	8002c0c <SEND_str>
				SEND_str(D_OUT);
 80022a6:	4b4e      	ldr	r3, [pc, #312]	; (80023e0 <json_input+0x66c>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4618      	mov	r0, r3
 80022ac:	f000 fcae 	bl	8002c0c <SEND_str>
				SEND_str("\n");
 80022b0:	484d      	ldr	r0, [pc, #308]	; (80023e8 <json_input+0x674>)
 80022b2:	f000 fcab 	bl	8002c0c <SEND_str>
				SEND_str(VAR_OUT);
 80022b6:	4b4b      	ldr	r3, [pc, #300]	; (80023e4 <json_input+0x670>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4618      	mov	r0, r3
 80022bc:	f000 fca6 	bl	8002c0c <SEND_str>
				SEND_str("\n");
 80022c0:	4849      	ldr	r0, [pc, #292]	; (80023e8 <json_input+0x674>)
 80022c2:	f000 fca3 	bl	8002c0c <SEND_str>
				cJSON_Delete(json);
 80022c6:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 80022c8:	f7fe ff26 	bl	8001118 <cJSON_Delete>
				free(stime);
 80022cc:	6f78      	ldr	r0, [r7, #116]	; 0x74
 80022ce:	f018 faed 	bl	801a8ac <free>
				free(sInstruction);
 80022d2:	6f38      	ldr	r0, [r7, #112]	; 0x70
 80022d4:	f018 faea 	bl	801a8ac <free>
				free(sType);
 80022d8:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80022da:	f018 fae7 	bl	801a8ac <free>
				free(s1);
 80022de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80022e0:	f018 fae4 	bl	801a8ac <free>
				free(s2);
 80022e4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80022e6:	f018 fae1 	bl	801a8ac <free>
				free(s3);
 80022ea:	6a38      	ldr	r0, [r7, #32]
 80022ec:	f018 fade 	bl	801a8ac <free>
				free(s4);
 80022f0:	69f8      	ldr	r0, [r7, #28]
 80022f2:	f018 fadb 	bl	801a8ac <free>
				free(s5);
 80022f6:	69b8      	ldr	r0, [r7, #24]
 80022f8:	f018 fad8 	bl	801a8ac <free>
			{
 80022fc:	bf00      	nop
}
 80022fe:	e360      	b.n	80029c2 <json_input+0xc4e>
			else if(strcmp(TYPE, "SET_PWM") == 0)	//Выставить коэффициент заполнения на ШИМ
 8002300:	4b3a      	ldr	r3, [pc, #232]	; (80023ec <json_input+0x678>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	493a      	ldr	r1, [pc, #232]	; (80023f0 <json_input+0x67c>)
 8002306:	4618      	mov	r0, r3
 8002308:	f7fd ff62 	bl	80001d0 <strcmp>
 800230c:	4603      	mov	r3, r0
 800230e:	2b00      	cmp	r3, #0
 8002310:	d17a      	bne.n	8002408 <json_input+0x694>
				cJSON *s1 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "PWM_OUT");
 8002312:	4938      	ldr	r1, [pc, #224]	; (80023f4 <json_input+0x680>)
 8002314:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8002316:	f7ff fce1 	bl	8001cdc <cJSON_GetObjectItem>
 800231a:	4603      	mov	r3, r0
 800231c:	4936      	ldr	r1, [pc, #216]	; (80023f8 <json_input+0x684>)
 800231e:	4618      	mov	r0, r3
 8002320:	f7ff fcdc 	bl	8001cdc <cJSON_GetObjectItem>
 8002324:	6338      	str	r0, [r7, #48]	; 0x30
				cJSON *s2 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "D_CYCLE");
 8002326:	4933      	ldr	r1, [pc, #204]	; (80023f4 <json_input+0x680>)
 8002328:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800232a:	f7ff fcd7 	bl	8001cdc <cJSON_GetObjectItem>
 800232e:	4603      	mov	r3, r0
 8002330:	4932      	ldr	r1, [pc, #200]	; (80023fc <json_input+0x688>)
 8002332:	4618      	mov	r0, r3
 8002334:	f7ff fcd2 	bl	8001cdc <cJSON_GetObjectItem>
 8002338:	62f8      	str	r0, [r7, #44]	; 0x2c
				PWM_OUT = s1->valuestring;
 800233a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800233c:	691b      	ldr	r3, [r3, #16]
 800233e:	4a30      	ldr	r2, [pc, #192]	; (8002400 <json_input+0x68c>)
 8002340:	6013      	str	r3, [r2, #0]
				D_CYCLE = s2->valuestring;
 8002342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002344:	691b      	ldr	r3, [r3, #16]
 8002346:	4a2f      	ldr	r2, [pc, #188]	; (8002404 <json_input+0x690>)
 8002348:	6013      	str	r3, [r2, #0]
				save_pwm(PWM_OUT, text);
 800234a:	4b2d      	ldr	r3, [pc, #180]	; (8002400 <json_input+0x68c>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	6879      	ldr	r1, [r7, #4]
 8002350:	4618      	mov	r0, r3
 8002352:	f004 fcd7 	bl	8006d04 <save_pwm>
				set_pwm(PWM_OUT, (uint32_t)(atoi(D_CYCLE)));
 8002356:	4b2a      	ldr	r3, [pc, #168]	; (8002400 <json_input+0x68c>)
 8002358:	681c      	ldr	r4, [r3, #0]
 800235a:	4b2a      	ldr	r3, [pc, #168]	; (8002404 <json_input+0x690>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4618      	mov	r0, r3
 8002360:	f018 fa73 	bl	801a84a <atoi>
 8002364:	4603      	mov	r3, r0
 8002366:	4619      	mov	r1, r3
 8002368:	4620      	mov	r0, r4
 800236a:	f006 fb1f 	bl	80089ac <set_pwm>
				SEND_str("\n");
 800236e:	481e      	ldr	r0, [pc, #120]	; (80023e8 <json_input+0x674>)
 8002370:	f000 fc4c 	bl	8002c0c <SEND_str>
				SEND_str(TYPE);
 8002374:	4b1d      	ldr	r3, [pc, #116]	; (80023ec <json_input+0x678>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4618      	mov	r0, r3
 800237a:	f000 fc47 	bl	8002c0c <SEND_str>
				SEND_str("\n");
 800237e:	481a      	ldr	r0, [pc, #104]	; (80023e8 <json_input+0x674>)
 8002380:	f000 fc44 	bl	8002c0c <SEND_str>
				SEND_str(PWM_OUT);
 8002384:	4b1e      	ldr	r3, [pc, #120]	; (8002400 <json_input+0x68c>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4618      	mov	r0, r3
 800238a:	f000 fc3f 	bl	8002c0c <SEND_str>
				SEND_str("\n");
 800238e:	4816      	ldr	r0, [pc, #88]	; (80023e8 <json_input+0x674>)
 8002390:	f000 fc3c 	bl	8002c0c <SEND_str>
				SEND_str(D_CYCLE);
 8002394:	4b1b      	ldr	r3, [pc, #108]	; (8002404 <json_input+0x690>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4618      	mov	r0, r3
 800239a:	f000 fc37 	bl	8002c0c <SEND_str>
				SEND_str("\n");
 800239e:	4812      	ldr	r0, [pc, #72]	; (80023e8 <json_input+0x674>)
 80023a0:	f000 fc34 	bl	8002c0c <SEND_str>
				cJSON_Delete(json);
 80023a4:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 80023a6:	f7fe feb7 	bl	8001118 <cJSON_Delete>
				free(stime);
 80023aa:	6f78      	ldr	r0, [r7, #116]	; 0x74
 80023ac:	f018 fa7e 	bl	801a8ac <free>
				free(sInstruction);
 80023b0:	6f38      	ldr	r0, [r7, #112]	; 0x70
 80023b2:	f018 fa7b 	bl	801a8ac <free>
				free(sType);
 80023b6:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80023b8:	f018 fa78 	bl	801a8ac <free>
				free(s1);
 80023bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80023be:	f018 fa75 	bl	801a8ac <free>
				free(s2);
 80023c2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80023c4:	f018 fa72 	bl	801a8ac <free>
}
 80023c8:	e2fb      	b.n	80029c2 <json_input+0xc4e>
 80023ca:	bf00      	nop
 80023cc:	200006c0 	.word	0x200006c0
 80023d0:	40021000 	.word	0x40021000
 80023d4:	20000854 	.word	0x20000854
 80023d8:	20000824 	.word	0x20000824
 80023dc:	20000844 	.word	0x20000844
 80023e0:	20000840 	.word	0x20000840
 80023e4:	20000820 	.word	0x20000820
 80023e8:	0801fe80 	.word	0x0801fe80
 80023ec:	20000804 	.word	0x20000804
 80023f0:	0801fee0 	.word	0x0801fee0
 80023f4:	0801fe44 	.word	0x0801fe44
 80023f8:	0801fee8 	.word	0x0801fee8
 80023fc:	0801fef0 	.word	0x0801fef0
 8002400:	2000080c 	.word	0x2000080c
 8002404:	20000848 	.word	0x20000848
			else if(strcmp(TYPE, "SET_TEMP_PROFILE") == 0)	//Установить профиль температуры: Если температура в диапазоне значений то установить цыфровой выход(OCD)
 8002408:	4b67      	ldr	r3, [pc, #412]	; (80025a8 <json_input+0x834>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4967      	ldr	r1, [pc, #412]	; (80025ac <json_input+0x838>)
 800240e:	4618      	mov	r0, r3
 8002410:	f7fd fede 	bl	80001d0 <strcmp>
 8002414:	4603      	mov	r3, r0
 8002416:	2b00      	cmp	r3, #0
 8002418:	f040 80e2 	bne.w	80025e0 <json_input+0x86c>
				cJSON *s1 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "ROM_RAW");
 800241c:	4964      	ldr	r1, [pc, #400]	; (80025b0 <json_input+0x83c>)
 800241e:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8002420:	f7ff fc5c 	bl	8001cdc <cJSON_GetObjectItem>
 8002424:	4603      	mov	r3, r0
 8002426:	4963      	ldr	r1, [pc, #396]	; (80025b4 <json_input+0x840>)
 8002428:	4618      	mov	r0, r3
 800242a:	f7ff fc57 	bl	8001cdc <cJSON_GetObjectItem>
 800242e:	6478      	str	r0, [r7, #68]	; 0x44
				cJSON *s2 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "RANGE_TEMP_LOW");
 8002430:	495f      	ldr	r1, [pc, #380]	; (80025b0 <json_input+0x83c>)
 8002432:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8002434:	f7ff fc52 	bl	8001cdc <cJSON_GetObjectItem>
 8002438:	4603      	mov	r3, r0
 800243a:	495f      	ldr	r1, [pc, #380]	; (80025b8 <json_input+0x844>)
 800243c:	4618      	mov	r0, r3
 800243e:	f7ff fc4d 	bl	8001cdc <cJSON_GetObjectItem>
 8002442:	6438      	str	r0, [r7, #64]	; 0x40
				cJSON *s3 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "RANGE_TEMP_HIGH");
 8002444:	495a      	ldr	r1, [pc, #360]	; (80025b0 <json_input+0x83c>)
 8002446:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8002448:	f7ff fc48 	bl	8001cdc <cJSON_GetObjectItem>
 800244c:	4603      	mov	r3, r0
 800244e:	495b      	ldr	r1, [pc, #364]	; (80025bc <json_input+0x848>)
 8002450:	4618      	mov	r0, r3
 8002452:	f7ff fc43 	bl	8001cdc <cJSON_GetObjectItem>
 8002456:	63f8      	str	r0, [r7, #60]	; 0x3c
				cJSON *s4 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "D_OUT");
 8002458:	4955      	ldr	r1, [pc, #340]	; (80025b0 <json_input+0x83c>)
 800245a:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800245c:	f7ff fc3e 	bl	8001cdc <cJSON_GetObjectItem>
 8002460:	4603      	mov	r3, r0
 8002462:	4957      	ldr	r1, [pc, #348]	; (80025c0 <json_input+0x84c>)
 8002464:	4618      	mov	r0, r3
 8002466:	f7ff fc39 	bl	8001cdc <cJSON_GetObjectItem>
 800246a:	63b8      	str	r0, [r7, #56]	; 0x38
				cJSON *s5 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "VAR_OUT");
 800246c:	4950      	ldr	r1, [pc, #320]	; (80025b0 <json_input+0x83c>)
 800246e:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8002470:	f7ff fc34 	bl	8001cdc <cJSON_GetObjectItem>
 8002474:	4603      	mov	r3, r0
 8002476:	4953      	ldr	r1, [pc, #332]	; (80025c4 <json_input+0x850>)
 8002478:	4618      	mov	r0, r3
 800247a:	f7ff fc2f 	bl	8001cdc <cJSON_GetObjectItem>
 800247e:	6378      	str	r0, [r7, #52]	; 0x34
				ROM_RAW = s1->valuestring;
 8002480:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002482:	691b      	ldr	r3, [r3, #16]
 8002484:	4a50      	ldr	r2, [pc, #320]	; (80025c8 <json_input+0x854>)
 8002486:	6013      	str	r3, [r2, #0]
				RANGE_TEMP_LOW = s2->valuestring;
 8002488:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800248a:	691b      	ldr	r3, [r3, #16]
 800248c:	4a4f      	ldr	r2, [pc, #316]	; (80025cc <json_input+0x858>)
 800248e:	6013      	str	r3, [r2, #0]
				RANGE_TEMP_HIGH = s3->valuestring;
 8002490:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002492:	691b      	ldr	r3, [r3, #16]
 8002494:	4a4e      	ldr	r2, [pc, #312]	; (80025d0 <json_input+0x85c>)
 8002496:	6013      	str	r3, [r2, #0]
				D_OUT = s4->valuestring;
 8002498:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800249a:	691b      	ldr	r3, [r3, #16]
 800249c:	4a4d      	ldr	r2, [pc, #308]	; (80025d4 <json_input+0x860>)
 800249e:	6013      	str	r3, [r2, #0]
				VAR_OUT = s5->valuestring;
 80024a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024a2:	691b      	ldr	r3, [r3, #16]
 80024a4:	4a4c      	ldr	r2, [pc, #304]	; (80025d8 <json_input+0x864>)
 80024a6:	6013      	str	r3, [r2, #0]
				save_tsido(ROM_RAW, text);
 80024a8:	4b47      	ldr	r3, [pc, #284]	; (80025c8 <json_input+0x854>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	6879      	ldr	r1, [r7, #4]
 80024ae:	4618      	mov	r0, r3
 80024b0:	f004 fc48 	bl	8006d44 <save_tsido>
				set_temperature(ROM_RAW, atof(RANGE_TEMP_LOW), atof(RANGE_TEMP_HIGH), D_OUT, (uint8_t)(atoi(VAR_OUT)));
 80024b4:	4b44      	ldr	r3, [pc, #272]	; (80025c8 <json_input+0x854>)
 80024b6:	681c      	ldr	r4, [r3, #0]
 80024b8:	4b44      	ldr	r3, [pc, #272]	; (80025cc <json_input+0x858>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4618      	mov	r0, r3
 80024be:	f018 f9c1 	bl	801a844 <atof>
 80024c2:	eeb0 8a40 	vmov.f32	s16, s0
 80024c6:	eef0 8a60 	vmov.f32	s17, s1
 80024ca:	4b41      	ldr	r3, [pc, #260]	; (80025d0 <json_input+0x85c>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4618      	mov	r0, r3
 80024d0:	f018 f9b8 	bl	801a844 <atof>
 80024d4:	eeb0 9a40 	vmov.f32	s18, s0
 80024d8:	eef0 9a60 	vmov.f32	s19, s1
 80024dc:	4b3d      	ldr	r3, [pc, #244]	; (80025d4 <json_input+0x860>)
 80024de:	681d      	ldr	r5, [r3, #0]
 80024e0:	4b3d      	ldr	r3, [pc, #244]	; (80025d8 <json_input+0x864>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4618      	mov	r0, r3
 80024e6:	f018 f9b0 	bl	801a84a <atoi>
 80024ea:	4603      	mov	r3, r0
 80024ec:	b2db      	uxtb	r3, r3
 80024ee:	461a      	mov	r2, r3
 80024f0:	4629      	mov	r1, r5
 80024f2:	eeb0 1a49 	vmov.f32	s2, s18
 80024f6:	eef0 1a69 	vmov.f32	s3, s19
 80024fa:	eeb0 0a48 	vmov.f32	s0, s16
 80024fe:	eef0 0a68 	vmov.f32	s1, s17
 8002502:	4620      	mov	r0, r4
 8002504:	f006 fb00 	bl	8008b08 <set_temperature>
				SEND_str("\n");
 8002508:	4834      	ldr	r0, [pc, #208]	; (80025dc <json_input+0x868>)
 800250a:	f000 fb7f 	bl	8002c0c <SEND_str>
				SEND_str(TYPE);
 800250e:	4b26      	ldr	r3, [pc, #152]	; (80025a8 <json_input+0x834>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4618      	mov	r0, r3
 8002514:	f000 fb7a 	bl	8002c0c <SEND_str>
				SEND_str("\n");
 8002518:	4830      	ldr	r0, [pc, #192]	; (80025dc <json_input+0x868>)
 800251a:	f000 fb77 	bl	8002c0c <SEND_str>
				SEND_str(ROM_RAW);
 800251e:	4b2a      	ldr	r3, [pc, #168]	; (80025c8 <json_input+0x854>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4618      	mov	r0, r3
 8002524:	f000 fb72 	bl	8002c0c <SEND_str>
				SEND_str("\n");
 8002528:	482c      	ldr	r0, [pc, #176]	; (80025dc <json_input+0x868>)
 800252a:	f000 fb6f 	bl	8002c0c <SEND_str>
				SEND_str(RANGE_TEMP_LOW);
 800252e:	4b27      	ldr	r3, [pc, #156]	; (80025cc <json_input+0x858>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4618      	mov	r0, r3
 8002534:	f000 fb6a 	bl	8002c0c <SEND_str>
				SEND_str("\n");
 8002538:	4828      	ldr	r0, [pc, #160]	; (80025dc <json_input+0x868>)
 800253a:	f000 fb67 	bl	8002c0c <SEND_str>
				SEND_str(RANGE_TEMP_HIGH);
 800253e:	4b24      	ldr	r3, [pc, #144]	; (80025d0 <json_input+0x85c>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4618      	mov	r0, r3
 8002544:	f000 fb62 	bl	8002c0c <SEND_str>
				SEND_str("\n");
 8002548:	4824      	ldr	r0, [pc, #144]	; (80025dc <json_input+0x868>)
 800254a:	f000 fb5f 	bl	8002c0c <SEND_str>
				SEND_str(D_OUT);
 800254e:	4b21      	ldr	r3, [pc, #132]	; (80025d4 <json_input+0x860>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4618      	mov	r0, r3
 8002554:	f000 fb5a 	bl	8002c0c <SEND_str>
				SEND_str("\n");
 8002558:	4820      	ldr	r0, [pc, #128]	; (80025dc <json_input+0x868>)
 800255a:	f000 fb57 	bl	8002c0c <SEND_str>
				SEND_str(VAR_OUT);
 800255e:	4b1e      	ldr	r3, [pc, #120]	; (80025d8 <json_input+0x864>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4618      	mov	r0, r3
 8002564:	f000 fb52 	bl	8002c0c <SEND_str>
				SEND_str("\n");
 8002568:	481c      	ldr	r0, [pc, #112]	; (80025dc <json_input+0x868>)
 800256a:	f000 fb4f 	bl	8002c0c <SEND_str>
				cJSON_Delete(json);
 800256e:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8002570:	f7fe fdd2 	bl	8001118 <cJSON_Delete>
				free(stime);
 8002574:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8002576:	f018 f999 	bl	801a8ac <free>
				free(sInstruction);
 800257a:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800257c:	f018 f996 	bl	801a8ac <free>
				free(sType);
 8002580:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8002582:	f018 f993 	bl	801a8ac <free>
				free(s1);
 8002586:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8002588:	f018 f990 	bl	801a8ac <free>
				free(s2);
 800258c:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800258e:	f018 f98d 	bl	801a8ac <free>
				free(s3);
 8002592:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002594:	f018 f98a 	bl	801a8ac <free>
				free(s4);
 8002598:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800259a:	f018 f987 	bl	801a8ac <free>
				free(s5);
 800259e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80025a0:	f018 f984 	bl	801a8ac <free>
}
 80025a4:	e20d      	b.n	80029c2 <json_input+0xc4e>
 80025a6:	bf00      	nop
 80025a8:	20000804 	.word	0x20000804
 80025ac:	0801fef8 	.word	0x0801fef8
 80025b0:	0801fe44 	.word	0x0801fe44
 80025b4:	0801ff0c 	.word	0x0801ff0c
 80025b8:	0801ff14 	.word	0x0801ff14
 80025bc:	0801ff24 	.word	0x0801ff24
 80025c0:	0801fe70 	.word	0x0801fe70
 80025c4:	0801fe78 	.word	0x0801fe78
 80025c8:	20000860 	.word	0x20000860
 80025cc:	20000800 	.word	0x20000800
 80025d0:	2000085c 	.word	0x2000085c
 80025d4:	20000840 	.word	0x20000840
 80025d8:	20000820 	.word	0x20000820
 80025dc:	0801fe80 	.word	0x0801fe80
			else if(strcmp(TYPE, "SET_AIAO") == 0)	//Установить значение в аналоговый выход если аналоговый вход = значение
 80025e0:	4b9d      	ldr	r3, [pc, #628]	; (8002858 <json_input+0xae4>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	499d      	ldr	r1, [pc, #628]	; (800285c <json_input+0xae8>)
 80025e6:	4618      	mov	r0, r3
 80025e8:	f7fd fdf2 	bl	80001d0 <strcmp>
 80025ec:	4603      	mov	r3, r0
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	f040 8095 	bne.w	800271e <json_input+0x9aa>
				cJSON *s1 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "A_IN");
 80025f4:	499a      	ldr	r1, [pc, #616]	; (8002860 <json_input+0xaec>)
 80025f6:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 80025f8:	f7ff fb70 	bl	8001cdc <cJSON_GetObjectItem>
 80025fc:	4603      	mov	r3, r0
 80025fe:	4999      	ldr	r1, [pc, #612]	; (8002864 <json_input+0xaf0>)
 8002600:	4618      	mov	r0, r3
 8002602:	f7ff fb6b 	bl	8001cdc <cJSON_GetObjectItem>
 8002606:	65b8      	str	r0, [r7, #88]	; 0x58
				cJSON *s2 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "RANGE_LOW");
 8002608:	4995      	ldr	r1, [pc, #596]	; (8002860 <json_input+0xaec>)
 800260a:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800260c:	f7ff fb66 	bl	8001cdc <cJSON_GetObjectItem>
 8002610:	4603      	mov	r3, r0
 8002612:	4995      	ldr	r1, [pc, #596]	; (8002868 <json_input+0xaf4>)
 8002614:	4618      	mov	r0, r3
 8002616:	f7ff fb61 	bl	8001cdc <cJSON_GetObjectItem>
 800261a:	6578      	str	r0, [r7, #84]	; 0x54
				cJSON *s3 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "RANGE_HIGH");
 800261c:	4990      	ldr	r1, [pc, #576]	; (8002860 <json_input+0xaec>)
 800261e:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8002620:	f7ff fb5c 	bl	8001cdc <cJSON_GetObjectItem>
 8002624:	4603      	mov	r3, r0
 8002626:	4991      	ldr	r1, [pc, #580]	; (800286c <json_input+0xaf8>)
 8002628:	4618      	mov	r0, r3
 800262a:	f7ff fb57 	bl	8001cdc <cJSON_GetObjectItem>
 800262e:	6538      	str	r0, [r7, #80]	; 0x50
				cJSON *s4 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "A_OUT");
 8002630:	498b      	ldr	r1, [pc, #556]	; (8002860 <json_input+0xaec>)
 8002632:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8002634:	f7ff fb52 	bl	8001cdc <cJSON_GetObjectItem>
 8002638:	4603      	mov	r3, r0
 800263a:	498d      	ldr	r1, [pc, #564]	; (8002870 <json_input+0xafc>)
 800263c:	4618      	mov	r0, r3
 800263e:	f7ff fb4d 	bl	8001cdc <cJSON_GetObjectItem>
 8002642:	64f8      	str	r0, [r7, #76]	; 0x4c
				cJSON *s5 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "VAR_OUT");
 8002644:	4986      	ldr	r1, [pc, #536]	; (8002860 <json_input+0xaec>)
 8002646:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8002648:	f7ff fb48 	bl	8001cdc <cJSON_GetObjectItem>
 800264c:	4603      	mov	r3, r0
 800264e:	4989      	ldr	r1, [pc, #548]	; (8002874 <json_input+0xb00>)
 8002650:	4618      	mov	r0, r3
 8002652:	f7ff fb43 	bl	8001cdc <cJSON_GetObjectItem>
 8002656:	64b8      	str	r0, [r7, #72]	; 0x48
				A_IN = s1->valuestring;
 8002658:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800265a:	691b      	ldr	r3, [r3, #16]
 800265c:	4a86      	ldr	r2, [pc, #536]	; (8002878 <json_input+0xb04>)
 800265e:	6013      	str	r3, [r2, #0]
				RANGE_LOW = s2->valuestring;
 8002660:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002662:	691b      	ldr	r3, [r3, #16]
 8002664:	4a85      	ldr	r2, [pc, #532]	; (800287c <json_input+0xb08>)
 8002666:	6013      	str	r3, [r2, #0]
				RANGE_HIGH = s3->valuestring;
 8002668:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800266a:	691b      	ldr	r3, [r3, #16]
 800266c:	4a84      	ldr	r2, [pc, #528]	; (8002880 <json_input+0xb0c>)
 800266e:	6013      	str	r3, [r2, #0]
				A_OUT = s4->valuestring;
 8002670:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002672:	691b      	ldr	r3, [r3, #16]
 8002674:	4a83      	ldr	r2, [pc, #524]	; (8002884 <json_input+0xb10>)
 8002676:	6013      	str	r3, [r2, #0]
				VAR_OUT = s5->valuestring;
 8002678:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800267a:	691b      	ldr	r3, [r3, #16]
 800267c:	4a82      	ldr	r2, [pc, #520]	; (8002888 <json_input+0xb14>)
 800267e:	6013      	str	r3, [r2, #0]
				SEND_str("\n");
 8002680:	4882      	ldr	r0, [pc, #520]	; (800288c <json_input+0xb18>)
 8002682:	f000 fac3 	bl	8002c0c <SEND_str>
				SEND_str(TYPE);
 8002686:	4b74      	ldr	r3, [pc, #464]	; (8002858 <json_input+0xae4>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4618      	mov	r0, r3
 800268c:	f000 fabe 	bl	8002c0c <SEND_str>
				SEND_str("\n");
 8002690:	487e      	ldr	r0, [pc, #504]	; (800288c <json_input+0xb18>)
 8002692:	f000 fabb 	bl	8002c0c <SEND_str>
				SEND_str(A_IN);
 8002696:	4b78      	ldr	r3, [pc, #480]	; (8002878 <json_input+0xb04>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4618      	mov	r0, r3
 800269c:	f000 fab6 	bl	8002c0c <SEND_str>
				SEND_str("\n");
 80026a0:	487a      	ldr	r0, [pc, #488]	; (800288c <json_input+0xb18>)
 80026a2:	f000 fab3 	bl	8002c0c <SEND_str>
				SEND_str(RANGE_LOW);
 80026a6:	4b75      	ldr	r3, [pc, #468]	; (800287c <json_input+0xb08>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4618      	mov	r0, r3
 80026ac:	f000 faae 	bl	8002c0c <SEND_str>
				SEND_str("\n");
 80026b0:	4876      	ldr	r0, [pc, #472]	; (800288c <json_input+0xb18>)
 80026b2:	f000 faab 	bl	8002c0c <SEND_str>
				SEND_str(RANGE_HIGH);
 80026b6:	4b72      	ldr	r3, [pc, #456]	; (8002880 <json_input+0xb0c>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4618      	mov	r0, r3
 80026bc:	f000 faa6 	bl	8002c0c <SEND_str>
				SEND_str("\n");
 80026c0:	4872      	ldr	r0, [pc, #456]	; (800288c <json_input+0xb18>)
 80026c2:	f000 faa3 	bl	8002c0c <SEND_str>
				SEND_str(A_OUT);
 80026c6:	4b6f      	ldr	r3, [pc, #444]	; (8002884 <json_input+0xb10>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4618      	mov	r0, r3
 80026cc:	f000 fa9e 	bl	8002c0c <SEND_str>
				SEND_str("\n");
 80026d0:	486e      	ldr	r0, [pc, #440]	; (800288c <json_input+0xb18>)
 80026d2:	f000 fa9b 	bl	8002c0c <SEND_str>
				SEND_str(VAR_OUT);
 80026d6:	4b6c      	ldr	r3, [pc, #432]	; (8002888 <json_input+0xb14>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4618      	mov	r0, r3
 80026dc:	f000 fa96 	bl	8002c0c <SEND_str>
				SEND_str("\n");
 80026e0:	486a      	ldr	r0, [pc, #424]	; (800288c <json_input+0xb18>)
 80026e2:	f000 fa93 	bl	8002c0c <SEND_str>
				cJSON_Delete(json);
 80026e6:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 80026e8:	f7fe fd16 	bl	8001118 <cJSON_Delete>
				free(stime);
 80026ec:	6f78      	ldr	r0, [r7, #116]	; 0x74
 80026ee:	f018 f8dd 	bl	801a8ac <free>
				free(sInstruction);
 80026f2:	6f38      	ldr	r0, [r7, #112]	; 0x70
 80026f4:	f018 f8da 	bl	801a8ac <free>
				free(sType);
 80026f8:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80026fa:	f018 f8d7 	bl	801a8ac <free>
				free(s1);
 80026fe:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8002700:	f018 f8d4 	bl	801a8ac <free>
				free(s2);
 8002704:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8002706:	f018 f8d1 	bl	801a8ac <free>
				free(s3);
 800270a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800270c:	f018 f8ce 	bl	801a8ac <free>
				free(s4);
 8002710:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8002712:	f018 f8cb 	bl	801a8ac <free>
				free(s5);
 8002716:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8002718:	f018 f8c8 	bl	801a8ac <free>
}
 800271c:	e151      	b.n	80029c2 <json_input+0xc4e>
				cJSON_Delete(json);
 800271e:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8002720:	f7fe fcfa 	bl	8001118 <cJSON_Delete>
				free(stime);
 8002724:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8002726:	f018 f8c1 	bl	801a8ac <free>
				free(sInstruction);
 800272a:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800272c:	f018 f8be 	bl	801a8ac <free>
				free(sType);
 8002730:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8002732:	f018 f8bb 	bl	801a8ac <free>
}
 8002736:	e144      	b.n	80029c2 <json_input+0xc4e>
		else if(strcmp(INSTRUCTION, "SET_PERIPHERALS") == 0)
 8002738:	4b55      	ldr	r3, [pc, #340]	; (8002890 <json_input+0xb1c>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4955      	ldr	r1, [pc, #340]	; (8002894 <json_input+0xb20>)
 800273e:	4618      	mov	r0, r3
 8002740:	f7fd fd46 	bl	80001d0 <strcmp>
 8002744:	4603      	mov	r3, r0
 8002746:	2b00      	cmp	r3, #0
 8002748:	f040 812e 	bne.w	80029a8 <json_input+0xc34>
			cJSON *sType = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "TYPE");
 800274c:	4944      	ldr	r1, [pc, #272]	; (8002860 <json_input+0xaec>)
 800274e:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8002750:	f7ff fac4 	bl	8001cdc <cJSON_GetObjectItem>
 8002754:	4603      	mov	r3, r0
 8002756:	4950      	ldr	r1, [pc, #320]	; (8002898 <json_input+0xb24>)
 8002758:	4618      	mov	r0, r3
 800275a:	f7ff fabf 	bl	8001cdc <cJSON_GetObjectItem>
 800275e:	66f8      	str	r0, [r7, #108]	; 0x6c
			TYPE = sType->valuestring;
 8002760:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002762:	691b      	ldr	r3, [r3, #16]
 8002764:	4a3c      	ldr	r2, [pc, #240]	; (8002858 <json_input+0xae4>)
 8002766:	6013      	str	r3, [r2, #0]
			if(strcmp(TYPE, "DIGITAL") == 0)
 8002768:	4b3b      	ldr	r3, [pc, #236]	; (8002858 <json_input+0xae4>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	494b      	ldr	r1, [pc, #300]	; (800289c <json_input+0xb28>)
 800276e:	4618      	mov	r0, r3
 8002770:	f7fd fd2e 	bl	80001d0 <strcmp>
 8002774:	4603      	mov	r3, r0
 8002776:	2b00      	cmp	r3, #0
 8002778:	d14b      	bne.n	8002812 <json_input+0xa9e>
				cJSON *s1 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "SET");
 800277a:	4939      	ldr	r1, [pc, #228]	; (8002860 <json_input+0xaec>)
 800277c:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800277e:	f7ff faad 	bl	8001cdc <cJSON_GetObjectItem>
 8002782:	4603      	mov	r3, r0
 8002784:	4946      	ldr	r1, [pc, #280]	; (80028a0 <json_input+0xb2c>)
 8002786:	4618      	mov	r0, r3
 8002788:	f7ff faa8 	bl	8001cdc <cJSON_GetObjectItem>
 800278c:	6638      	str	r0, [r7, #96]	; 0x60
				DigitalParamMass = s1->valuestring;
 800278e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002790:	691b      	ldr	r3, [r3, #16]
 8002792:	4a44      	ldr	r2, [pc, #272]	; (80028a4 <json_input+0xb30>)
 8002794:	6013      	str	r3, [r2, #0]
				test = parseValue(DigitalParamMass);
 8002796:	4b43      	ldr	r3, [pc, #268]	; (80028a4 <json_input+0xb30>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4618      	mov	r0, r3
 800279c:	f7ff fabc 	bl	8001d18 <parseValue>
 80027a0:	4603      	mov	r3, r0
 80027a2:	4a41      	ldr	r2, [pc, #260]	; (80028a8 <json_input+0xb34>)
 80027a4:	6013      	str	r3, [r2, #0]
				for(int i = 0; i < 8; i++)
 80027a6:	2300      	movs	r3, #0
 80027a8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80027ac:	e012      	b.n	80027d4 <json_input+0xa60>
					Status_DIN[i] = (test[i] - 0x30);
 80027ae:	4b3e      	ldr	r3, [pc, #248]	; (80028a8 <json_input+0xb34>)
 80027b0:	681a      	ldr	r2, [r3, #0]
 80027b2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80027b6:	4413      	add	r3, r2
 80027b8:	781b      	ldrb	r3, [r3, #0]
 80027ba:	3b30      	subs	r3, #48	; 0x30
 80027bc:	b2d9      	uxtb	r1, r3
 80027be:	4a3b      	ldr	r2, [pc, #236]	; (80028ac <json_input+0xb38>)
 80027c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80027c4:	4413      	add	r3, r2
 80027c6:	460a      	mov	r2, r1
 80027c8:	701a      	strb	r2, [r3, #0]
				for(int i = 0; i < 8; i++)
 80027ca:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80027ce:	3301      	adds	r3, #1
 80027d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80027d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80027d8:	2b07      	cmp	r3, #7
 80027da:	dde8      	ble.n	80027ae <json_input+0xa3a>
				SEND_str("\n");
 80027dc:	482b      	ldr	r0, [pc, #172]	; (800288c <json_input+0xb18>)
 80027de:	f000 fa15 	bl	8002c0c <SEND_str>
				SEND_str(TYPE);
 80027e2:	4b1d      	ldr	r3, [pc, #116]	; (8002858 <json_input+0xae4>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4618      	mov	r0, r3
 80027e8:	f000 fa10 	bl	8002c0c <SEND_str>
				SEND_str("\n");
 80027ec:	4827      	ldr	r0, [pc, #156]	; (800288c <json_input+0xb18>)
 80027ee:	f000 fa0d 	bl	8002c0c <SEND_str>
				cJSON_Delete(json);
 80027f2:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 80027f4:	f7fe fc90 	bl	8001118 <cJSON_Delete>
				free(stime);
 80027f8:	6f78      	ldr	r0, [r7, #116]	; 0x74
 80027fa:	f018 f857 	bl	801a8ac <free>
				free(sInstruction);
 80027fe:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8002800:	f018 f854 	bl	801a8ac <free>
				free(sType);
 8002804:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8002806:	f018 f851 	bl	801a8ac <free>
				free(s1);
 800280a:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800280c:	f018 f84e 	bl	801a8ac <free>
}
 8002810:	e0d7      	b.n	80029c2 <json_input+0xc4e>
			else if(strcmp(TYPE, "ANALOG") == 0)
 8002812:	4b11      	ldr	r3, [pc, #68]	; (8002858 <json_input+0xae4>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4926      	ldr	r1, [pc, #152]	; (80028b0 <json_input+0xb3c>)
 8002818:	4618      	mov	r0, r3
 800281a:	f7fd fcd9 	bl	80001d0 <strcmp>
 800281e:	4603      	mov	r3, r0
 8002820:	2b00      	cmp	r3, #0
 8002822:	d17b      	bne.n	800291c <json_input+0xba8>
				cJSON *s1 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "SET");
 8002824:	490e      	ldr	r1, [pc, #56]	; (8002860 <json_input+0xaec>)
 8002826:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8002828:	f7ff fa58 	bl	8001cdc <cJSON_GetObjectItem>
 800282c:	4603      	mov	r3, r0
 800282e:	491c      	ldr	r1, [pc, #112]	; (80028a0 <json_input+0xb2c>)
 8002830:	4618      	mov	r0, r3
 8002832:	f7ff fa53 	bl	8001cdc <cJSON_GetObjectItem>
 8002836:	6678      	str	r0, [r7, #100]	; 0x64
				AnalogParamMass = s1->valuestring;
 8002838:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800283a:	691b      	ldr	r3, [r3, #16]
 800283c:	4a1d      	ldr	r2, [pc, #116]	; (80028b4 <json_input+0xb40>)
 800283e:	6013      	str	r3, [r2, #0]
				test = parseValue(AnalogParamMass);
 8002840:	4b1c      	ldr	r3, [pc, #112]	; (80028b4 <json_input+0xb40>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4618      	mov	r0, r3
 8002846:	f7ff fa67 	bl	8001d18 <parseValue>
 800284a:	4603      	mov	r3, r0
 800284c:	4a16      	ldr	r2, [pc, #88]	; (80028a8 <json_input+0xb34>)
 800284e:	6013      	str	r3, [r2, #0]
				for(int i = 0; i < 8; i++)
 8002850:	2300      	movs	r3, #0
 8002852:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002856:	e042      	b.n	80028de <json_input+0xb6a>
 8002858:	20000804 	.word	0x20000804
 800285c:	0801ff34 	.word	0x0801ff34
 8002860:	0801fe44 	.word	0x0801fe44
 8002864:	0801fea0 	.word	0x0801fea0
 8002868:	0801fea8 	.word	0x0801fea8
 800286c:	0801feb4 	.word	0x0801feb4
 8002870:	0801ff40 	.word	0x0801ff40
 8002874:	0801fe78 	.word	0x0801fe78
 8002878:	20000854 	.word	0x20000854
 800287c:	20000824 	.word	0x20000824
 8002880:	20000844 	.word	0x20000844
 8002884:	2000083c 	.word	0x2000083c
 8002888:	20000820 	.word	0x20000820
 800288c:	0801fe80 	.word	0x0801fe80
 8002890:	20000858 	.word	0x20000858
 8002894:	0801ff48 	.word	0x0801ff48
 8002898:	0801fe4c 	.word	0x0801fe4c
 800289c:	0801ff58 	.word	0x0801ff58
 80028a0:	0801ff60 	.word	0x0801ff60
 80028a4:	20000808 	.word	0x20000808
 80028a8:	20001138 	.word	0x20001138
 80028ac:	2000049c 	.word	0x2000049c
 80028b0:	0801ff64 	.word	0x0801ff64
 80028b4:	20000830 	.word	0x20000830
					Status_AIN[i] = (test[i] - 0x30);
 80028b8:	4b45      	ldr	r3, [pc, #276]	; (80029d0 <json_input+0xc5c>)
 80028ba:	681a      	ldr	r2, [r3, #0]
 80028bc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80028c0:	4413      	add	r3, r2
 80028c2:	781b      	ldrb	r3, [r3, #0]
 80028c4:	3b30      	subs	r3, #48	; 0x30
 80028c6:	b2d9      	uxtb	r1, r3
 80028c8:	4a42      	ldr	r2, [pc, #264]	; (80029d4 <json_input+0xc60>)
 80028ca:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80028ce:	4413      	add	r3, r2
 80028d0:	460a      	mov	r2, r1
 80028d2:	701a      	strb	r2, [r3, #0]
				for(int i = 0; i < 8; i++)
 80028d4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80028d8:	3301      	adds	r3, #1
 80028da:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80028de:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80028e2:	2b07      	cmp	r3, #7
 80028e4:	dde8      	ble.n	80028b8 <json_input+0xb44>
				SEND_str("\n");
 80028e6:	483c      	ldr	r0, [pc, #240]	; (80029d8 <json_input+0xc64>)
 80028e8:	f000 f990 	bl	8002c0c <SEND_str>
				SEND_str(TYPE);
 80028ec:	4b3b      	ldr	r3, [pc, #236]	; (80029dc <json_input+0xc68>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4618      	mov	r0, r3
 80028f2:	f000 f98b 	bl	8002c0c <SEND_str>
				SEND_str("\n");
 80028f6:	4838      	ldr	r0, [pc, #224]	; (80029d8 <json_input+0xc64>)
 80028f8:	f000 f988 	bl	8002c0c <SEND_str>
				cJSON_Delete(json);
 80028fc:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 80028fe:	f7fe fc0b 	bl	8001118 <cJSON_Delete>
				free(stime);
 8002902:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8002904:	f017 ffd2 	bl	801a8ac <free>
				free(sInstruction);
 8002908:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800290a:	f017 ffcf 	bl	801a8ac <free>
				free(sType);
 800290e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8002910:	f017 ffcc 	bl	801a8ac <free>
				free(s1);
 8002914:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8002916:	f017 ffc9 	bl	801a8ac <free>
}
 800291a:	e052      	b.n	80029c2 <json_input+0xc4e>
			else if(strcmp(TYPE, "OCD") == 0)
 800291c:	4b2f      	ldr	r3, [pc, #188]	; (80029dc <json_input+0xc68>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	492f      	ldr	r1, [pc, #188]	; (80029e0 <json_input+0xc6c>)
 8002922:	4618      	mov	r0, r3
 8002924:	f7fd fc54 	bl	80001d0 <strcmp>
 8002928:	4603      	mov	r3, r0
 800292a:	2b00      	cmp	r3, #0
 800292c:	d149      	bne.n	80029c2 <json_input+0xc4e>
				cJSON *s1 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "SET");
 800292e:	492d      	ldr	r1, [pc, #180]	; (80029e4 <json_input+0xc70>)
 8002930:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8002932:	f7ff f9d3 	bl	8001cdc <cJSON_GetObjectItem>
 8002936:	4603      	mov	r3, r0
 8002938:	492b      	ldr	r1, [pc, #172]	; (80029e8 <json_input+0xc74>)
 800293a:	4618      	mov	r0, r3
 800293c:	f7ff f9ce 	bl	8001cdc <cJSON_GetObjectItem>
 8002940:	66b8      	str	r0, [r7, #104]	; 0x68
				OpenCollectorDrainParamMass = s1->valuestring;
 8002942:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002944:	691b      	ldr	r3, [r3, #16]
 8002946:	4a29      	ldr	r2, [pc, #164]	; (80029ec <json_input+0xc78>)
 8002948:	6013      	str	r3, [r2, #0]
				test = parseValue(OpenCollectorDrainParamMass);
 800294a:	4b28      	ldr	r3, [pc, #160]	; (80029ec <json_input+0xc78>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4618      	mov	r0, r3
 8002950:	f7ff f9e2 	bl	8001d18 <parseValue>
 8002954:	4603      	mov	r3, r0
 8002956:	4a1e      	ldr	r2, [pc, #120]	; (80029d0 <json_input+0xc5c>)
 8002958:	6013      	str	r3, [r2, #0]
				for(int i = 0; i < 8; i++)
 800295a:	2300      	movs	r3, #0
 800295c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800295e:	e00e      	b.n	800297e <json_input+0xc0a>
					Status_OCD[i] = (test[i] - 0x30);
 8002960:	4b1b      	ldr	r3, [pc, #108]	; (80029d0 <json_input+0xc5c>)
 8002962:	681a      	ldr	r2, [r3, #0]
 8002964:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002966:	4413      	add	r3, r2
 8002968:	781b      	ldrb	r3, [r3, #0]
 800296a:	3b30      	subs	r3, #48	; 0x30
 800296c:	b2d9      	uxtb	r1, r3
 800296e:	4a20      	ldr	r2, [pc, #128]	; (80029f0 <json_input+0xc7c>)
 8002970:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002972:	4413      	add	r3, r2
 8002974:	460a      	mov	r2, r1
 8002976:	701a      	strb	r2, [r3, #0]
				for(int i = 0; i < 8; i++)
 8002978:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800297a:	3301      	adds	r3, #1
 800297c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800297e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002980:	2b07      	cmp	r3, #7
 8002982:	dded      	ble.n	8002960 <json_input+0xbec>
				ReWriteOCD();
 8002984:	f005 f9c8 	bl	8007d18 <ReWriteOCD>
				cJSON_Delete(json);
 8002988:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800298a:	f7fe fbc5 	bl	8001118 <cJSON_Delete>
				free(stime);
 800298e:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8002990:	f017 ff8c 	bl	801a8ac <free>
				free(sInstruction);
 8002994:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8002996:	f017 ff89 	bl	801a8ac <free>
				free(sType);
 800299a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800299c:	f017 ff86 	bl	801a8ac <free>
				free(s1);
 80029a0:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 80029a2:	f017 ff83 	bl	801a8ac <free>
}
 80029a6:	e00c      	b.n	80029c2 <json_input+0xc4e>
			free(stime);
 80029a8:	6f78      	ldr	r0, [r7, #116]	; 0x74
 80029aa:	f017 ff7f 	bl	801a8ac <free>
			free(sInstruction);
 80029ae:	6f38      	ldr	r0, [r7, #112]	; 0x70
 80029b0:	f017 ff7c 	bl	801a8ac <free>
}
 80029b4:	e005      	b.n	80029c2 <json_input+0xc4e>
		cJSON_Delete(json);
 80029b6:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 80029b8:	f7fe fbae 	bl	8001118 <cJSON_Delete>
		free(stime);
 80029bc:	6f78      	ldr	r0, [r7, #116]	; 0x74
 80029be:	f017 ff75 	bl	801a8ac <free>
}
 80029c2:	bf00      	nop
 80029c4:	378c      	adds	r7, #140	; 0x8c
 80029c6:	46bd      	mov	sp, r7
 80029c8:	ecbd 8b04 	vpop	{d8-d9}
 80029cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80029ce:	bf00      	nop
 80029d0:	20001138 	.word	0x20001138
 80029d4:	20000494 	.word	0x20000494
 80029d8:	0801fe80 	.word	0x0801fe80
 80029dc:	20000804 	.word	0x20000804
 80029e0:	0801ff6c 	.word	0x0801ff6c
 80029e4:	0801fe44 	.word	0x0801fe44
 80029e8:	0801ff60 	.word	0x0801ff60
 80029ec:	20000864 	.word	0x20000864
 80029f0:	200004a4 	.word	0x200004a4

080029f4 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b084      	sub	sp, #16
 80029f8:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 80029fa:	463b      	mov	r3, r7
 80029fc:	2200      	movs	r2, #0
 80029fe:	601a      	str	r2, [r3, #0]
 8002a00:	605a      	str	r2, [r3, #4]
 8002a02:	609a      	str	r2, [r3, #8]
 8002a04:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002a06:	4b37      	ldr	r3, [pc, #220]	; (8002ae4 <MX_ADC1_Init+0xf0>)
 8002a08:	4a37      	ldr	r2, [pc, #220]	; (8002ae8 <MX_ADC1_Init+0xf4>)
 8002a0a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002a0c:	4b35      	ldr	r3, [pc, #212]	; (8002ae4 <MX_ADC1_Init+0xf0>)
 8002a0e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002a12:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002a14:	4b33      	ldr	r3, [pc, #204]	; (8002ae4 <MX_ADC1_Init+0xf0>)
 8002a16:	2200      	movs	r2, #0
 8002a18:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8002a1a:	4b32      	ldr	r3, [pc, #200]	; (8002ae4 <MX_ADC1_Init+0xf0>)
 8002a1c:	2201      	movs	r2, #1
 8002a1e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002a20:	4b30      	ldr	r3, [pc, #192]	; (8002ae4 <MX_ADC1_Init+0xf0>)
 8002a22:	2200      	movs	r2, #0
 8002a24:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002a26:	4b2f      	ldr	r3, [pc, #188]	; (8002ae4 <MX_ADC1_Init+0xf0>)
 8002a28:	2200      	movs	r2, #0
 8002a2a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8002a2e:	4b2d      	ldr	r3, [pc, #180]	; (8002ae4 <MX_ADC1_Init+0xf0>)
 8002a30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a34:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T4_CC4;
 8002a36:	4b2b      	ldr	r3, [pc, #172]	; (8002ae4 <MX_ADC1_Init+0xf0>)
 8002a38:	f04f 6210 	mov.w	r2, #150994944	; 0x9000000
 8002a3c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002a3e:	4b29      	ldr	r3, [pc, #164]	; (8002ae4 <MX_ADC1_Init+0xf0>)
 8002a40:	2200      	movs	r2, #0
 8002a42:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8002a44:	4b27      	ldr	r3, [pc, #156]	; (8002ae4 <MX_ADC1_Init+0xf0>)
 8002a46:	2204      	movs	r2, #4
 8002a48:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8002a4a:	4b26      	ldr	r3, [pc, #152]	; (8002ae4 <MX_ADC1_Init+0xf0>)
 8002a4c:	2201      	movs	r2, #1
 8002a4e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002a52:	4b24      	ldr	r3, [pc, #144]	; (8002ae4 <MX_ADC1_Init+0xf0>)
 8002a54:	2201      	movs	r2, #1
 8002a56:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002a58:	4822      	ldr	r0, [pc, #136]	; (8002ae4 <MX_ADC1_Init+0xf0>)
 8002a5a:	f006 fd87 	bl	800956c <HAL_ADC_Init>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d001      	beq.n	8002a68 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8002a64:	f000 fd14 	bl	8003490 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8002a68:	2303      	movs	r3, #3
 8002a6a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002a70:	2300      	movs	r3, #0
 8002a72:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002a74:	463b      	mov	r3, r7
 8002a76:	4619      	mov	r1, r3
 8002a78:	481a      	ldr	r0, [pc, #104]	; (8002ae4 <MX_ADC1_Init+0xf0>)
 8002a7a:	f006 fec1 	bl	8009800 <HAL_ADC_ConfigChannel>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d001      	beq.n	8002a88 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8002a84:	f000 fd04 	bl	8003490 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8002a88:	2304      	movs	r3, #4
 8002a8a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8002a8c:	2302      	movs	r3, #2
 8002a8e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002a90:	463b      	mov	r3, r7
 8002a92:	4619      	mov	r1, r3
 8002a94:	4813      	ldr	r0, [pc, #76]	; (8002ae4 <MX_ADC1_Init+0xf0>)
 8002a96:	f006 feb3 	bl	8009800 <HAL_ADC_ConfigChannel>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d001      	beq.n	8002aa4 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8002aa0:	f000 fcf6 	bl	8003490 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8002aa4:	2305      	movs	r3, #5
 8002aa6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8002aa8:	2303      	movs	r3, #3
 8002aaa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002aac:	463b      	mov	r3, r7
 8002aae:	4619      	mov	r1, r3
 8002ab0:	480c      	ldr	r0, [pc, #48]	; (8002ae4 <MX_ADC1_Init+0xf0>)
 8002ab2:	f006 fea5 	bl	8009800 <HAL_ADC_ConfigChannel>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d001      	beq.n	8002ac0 <MX_ADC1_Init+0xcc>
  {
    Error_Handler();
 8002abc:	f000 fce8 	bl	8003490 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8002ac0:	2306      	movs	r3, #6
 8002ac2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8002ac4:	2304      	movs	r3, #4
 8002ac6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002ac8:	463b      	mov	r3, r7
 8002aca:	4619      	mov	r1, r3
 8002acc:	4805      	ldr	r0, [pc, #20]	; (8002ae4 <MX_ADC1_Init+0xf0>)
 8002ace:	f006 fe97 	bl	8009800 <HAL_ADC_ConfigChannel>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d001      	beq.n	8002adc <MX_ADC1_Init+0xe8>
  {
    Error_Handler();
 8002ad8:	f000 fcda 	bl	8003490 <Error_Handler>
  }

}
 8002adc:	bf00      	nop
 8002ade:	3710      	adds	r7, #16
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd80      	pop	{r7, pc}
 8002ae4:	20000868 	.word	0x20000868
 8002ae8:	40012000 	.word	0x40012000

08002aec <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b08a      	sub	sp, #40	; 0x28
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002af4:	f107 0314 	add.w	r3, r7, #20
 8002af8:	2200      	movs	r2, #0
 8002afa:	601a      	str	r2, [r3, #0]
 8002afc:	605a      	str	r2, [r3, #4]
 8002afe:	609a      	str	r2, [r3, #8]
 8002b00:	60da      	str	r2, [r3, #12]
 8002b02:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a2f      	ldr	r2, [pc, #188]	; (8002bc8 <HAL_ADC_MspInit+0xdc>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d157      	bne.n	8002bbe <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002b0e:	2300      	movs	r3, #0
 8002b10:	613b      	str	r3, [r7, #16]
 8002b12:	4b2e      	ldr	r3, [pc, #184]	; (8002bcc <HAL_ADC_MspInit+0xe0>)
 8002b14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b16:	4a2d      	ldr	r2, [pc, #180]	; (8002bcc <HAL_ADC_MspInit+0xe0>)
 8002b18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b1c:	6453      	str	r3, [r2, #68]	; 0x44
 8002b1e:	4b2b      	ldr	r3, [pc, #172]	; (8002bcc <HAL_ADC_MspInit+0xe0>)
 8002b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b26:	613b      	str	r3, [r7, #16]
 8002b28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	60fb      	str	r3, [r7, #12]
 8002b2e:	4b27      	ldr	r3, [pc, #156]	; (8002bcc <HAL_ADC_MspInit+0xe0>)
 8002b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b32:	4a26      	ldr	r2, [pc, #152]	; (8002bcc <HAL_ADC_MspInit+0xe0>)
 8002b34:	f043 0301 	orr.w	r3, r3, #1
 8002b38:	6313      	str	r3, [r2, #48]	; 0x30
 8002b3a:	4b24      	ldr	r3, [pc, #144]	; (8002bcc <HAL_ADC_MspInit+0xe0>)
 8002b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b3e:	f003 0301 	and.w	r3, r3, #1
 8002b42:	60fb      	str	r3, [r7, #12]
 8002b44:	68fb      	ldr	r3, [r7, #12]
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = AIN0_Pin|AIN1_Pin|AIN2_Pin|AIN3_Pin;
 8002b46:	2378      	movs	r3, #120	; 0x78
 8002b48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002b4a:	2303      	movs	r3, #3
 8002b4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b52:	f107 0314 	add.w	r3, r7, #20
 8002b56:	4619      	mov	r1, r3
 8002b58:	481d      	ldr	r0, [pc, #116]	; (8002bd0 <HAL_ADC_MspInit+0xe4>)
 8002b5a:	f008 fe07 	bl	800b76c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8002b5e:	4b1d      	ldr	r3, [pc, #116]	; (8002bd4 <HAL_ADC_MspInit+0xe8>)
 8002b60:	4a1d      	ldr	r2, [pc, #116]	; (8002bd8 <HAL_ADC_MspInit+0xec>)
 8002b62:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002b64:	4b1b      	ldr	r3, [pc, #108]	; (8002bd4 <HAL_ADC_MspInit+0xe8>)
 8002b66:	2200      	movs	r2, #0
 8002b68:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002b6a:	4b1a      	ldr	r3, [pc, #104]	; (8002bd4 <HAL_ADC_MspInit+0xe8>)
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b70:	4b18      	ldr	r3, [pc, #96]	; (8002bd4 <HAL_ADC_MspInit+0xe8>)
 8002b72:	2200      	movs	r2, #0
 8002b74:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002b76:	4b17      	ldr	r3, [pc, #92]	; (8002bd4 <HAL_ADC_MspInit+0xe8>)
 8002b78:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002b7c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002b7e:	4b15      	ldr	r3, [pc, #84]	; (8002bd4 <HAL_ADC_MspInit+0xe8>)
 8002b80:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002b84:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002b86:	4b13      	ldr	r3, [pc, #76]	; (8002bd4 <HAL_ADC_MspInit+0xe8>)
 8002b88:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002b8c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002b8e:	4b11      	ldr	r3, [pc, #68]	; (8002bd4 <HAL_ADC_MspInit+0xe8>)
 8002b90:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b94:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002b96:	4b0f      	ldr	r3, [pc, #60]	; (8002bd4 <HAL_ADC_MspInit+0xe8>)
 8002b98:	2200      	movs	r2, #0
 8002b9a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002b9c:	4b0d      	ldr	r3, [pc, #52]	; (8002bd4 <HAL_ADC_MspInit+0xe8>)
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002ba2:	480c      	ldr	r0, [pc, #48]	; (8002bd4 <HAL_ADC_MspInit+0xe8>)
 8002ba4:	f007 f9ae 	bl	8009f04 <HAL_DMA_Init>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d001      	beq.n	8002bb2 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8002bae:	f000 fc6f 	bl	8003490 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	4a07      	ldr	r2, [pc, #28]	; (8002bd4 <HAL_ADC_MspInit+0xe8>)
 8002bb6:	639a      	str	r2, [r3, #56]	; 0x38
 8002bb8:	4a06      	ldr	r2, [pc, #24]	; (8002bd4 <HAL_ADC_MspInit+0xe8>)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8002bbe:	bf00      	nop
 8002bc0:	3728      	adds	r7, #40	; 0x28
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}
 8002bc6:	bf00      	nop
 8002bc8:	40012000 	.word	0x40012000
 8002bcc:	40023800 	.word	0x40023800
 8002bd0:	40020000 	.word	0x40020000
 8002bd4:	200008b0 	.word	0x200008b0
 8002bd8:	40026410 	.word	0x40026410

08002bdc <USART_Tx>:
char DBG_str[DBG_RX_BUFFER_SIZE] = {0,};

//Функция передачи байта по USART3
//Принимает байт
void USART_Tx(unsigned char Data)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b083      	sub	sp, #12
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	4603      	mov	r3, r0
 8002be4:	71fb      	strb	r3, [r7, #7]
	while(!(USART3->SR & USART_SR_TC));
 8002be6:	bf00      	nop
 8002be8:	4b07      	ldr	r3, [pc, #28]	; (8002c08 <USART_Tx+0x2c>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d0f9      	beq.n	8002be8 <USART_Tx+0xc>
	USART3->DR = Data;
 8002bf4:	4a04      	ldr	r2, [pc, #16]	; (8002c08 <USART_Tx+0x2c>)
 8002bf6:	79fb      	ldrb	r3, [r7, #7]
 8002bf8:	6053      	str	r3, [r2, #4]
}
 8002bfa:	bf00      	nop
 8002bfc:	370c      	adds	r7, #12
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c04:	4770      	bx	lr
 8002c06:	bf00      	nop
 8002c08:	40004800 	.word	0x40004800

08002c0c <SEND_str>:
//Функция отправки сткроки
//Принимает строку для отправки
void SEND_str(char * string)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b084      	sub	sp, #16
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
	uint8_t i = 0;
 8002c14:	2300      	movs	r3, #0
 8002c16:	73fb      	strb	r3, [r7, #15]
	while(string[i])
 8002c18:	e009      	b.n	8002c2e <SEND_str+0x22>
	{
		USART_Tx(string[i]);
 8002c1a:	7bfb      	ldrb	r3, [r7, #15]
 8002c1c:	687a      	ldr	r2, [r7, #4]
 8002c1e:	4413      	add	r3, r2
 8002c20:	781b      	ldrb	r3, [r3, #0]
 8002c22:	4618      	mov	r0, r3
 8002c24:	f7ff ffda 	bl	8002bdc <USART_Tx>
		i++;
 8002c28:	7bfb      	ldrb	r3, [r7, #15]
 8002c2a:	3301      	adds	r3, #1
 8002c2c:	73fb      	strb	r3, [r7, #15]
	while(string[i])
 8002c2e:	7bfb      	ldrb	r3, [r7, #15]
 8002c30:	687a      	ldr	r2, [r7, #4]
 8002c32:	4413      	add	r3, r2
 8002c34:	781b      	ldrb	r3, [r3, #0]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d1ef      	bne.n	8002c1a <SEND_str+0xe>
	}
}
 8002c3a:	bf00      	nop
 8002c3c:	bf00      	nop
 8002c3e:	3710      	adds	r7, #16
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bd80      	pop	{r7, pc}

08002c44 <DEBUG_main>:
//Функция для отладки через COM порт
void DEBUG_main(void)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b082      	sub	sp, #8
 8002c48:	af00      	add	r7, sp, #0
	if(dbg_available())
 8002c4a:	f001 fbcb 	bl	80043e4 <dbg_available>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	f000 80ef 	beq.w	8002e34 <DEBUG_main+0x1f0>
	{
		uint16_t i = 0;
 8002c56:	2300      	movs	r3, #0
 8002c58:	80fb      	strh	r3, [r7, #6]
		uint8_t fdbg = 1;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	717b      	strb	r3, [r7, #5]
		memset(DBG_buf, 0, DBG_RX_BUFFER_SIZE);
 8002c5e:	2240      	movs	r2, #64	; 0x40
 8002c60:	2100      	movs	r1, #0
 8002c62:	4876      	ldr	r0, [pc, #472]	; (8002e3c <DEBUG_main+0x1f8>)
 8002c64:	f017 fe60 	bl	801a928 <memset>
		HAL_Delay(50);
 8002c68:	2032      	movs	r0, #50	; 0x32
 8002c6a:	f006 fc5b 	bl	8009524 <HAL_Delay>

		while(dbg_available())
 8002c6e:	e010      	b.n	8002c92 <DEBUG_main+0x4e>
		{
			DBG_buf[i++] = dbg_read();
 8002c70:	f001 fbd4 	bl	800441c <dbg_read>
 8002c74:	4603      	mov	r3, r0
 8002c76:	4619      	mov	r1, r3
 8002c78:	88fb      	ldrh	r3, [r7, #6]
 8002c7a:	1c5a      	adds	r2, r3, #1
 8002c7c:	80fa      	strh	r2, [r7, #6]
 8002c7e:	461a      	mov	r2, r3
 8002c80:	b2c9      	uxtb	r1, r1
 8002c82:	4b6e      	ldr	r3, [pc, #440]	; (8002e3c <DEBUG_main+0x1f8>)
 8002c84:	5499      	strb	r1, [r3, r2]
			if(i > DBG_RX_BUFFER_SIZE - 1)
 8002c86:	88fb      	ldrh	r3, [r7, #6]
 8002c88:	2b3f      	cmp	r3, #63	; 0x3f
 8002c8a:	d808      	bhi.n	8002c9e <DEBUG_main+0x5a>
				break;
			HAL_Delay(1);
 8002c8c:	2001      	movs	r0, #1
 8002c8e:	f006 fc49 	bl	8009524 <HAL_Delay>
		while(dbg_available())
 8002c92:	f001 fba7 	bl	80043e4 <dbg_available>
 8002c96:	4603      	mov	r3, r0
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d1e9      	bne.n	8002c70 <DEBUG_main+0x2c>
 8002c9c:	e000      	b.n	8002ca0 <DEBUG_main+0x5c>
				break;
 8002c9e:	bf00      	nop
		}
		clear_string(DBG_buf);
 8002ca0:	4866      	ldr	r0, [pc, #408]	; (8002e3c <DEBUG_main+0x1f8>)
 8002ca2:	f004 fff9 	bl	8007c98 <clear_string>
		if(strstr(DBG_buf, "test") != NULL)
 8002ca6:	4966      	ldr	r1, [pc, #408]	; (8002e40 <DEBUG_main+0x1fc>)
 8002ca8:	4864      	ldr	r0, [pc, #400]	; (8002e3c <DEBUG_main+0x1f8>)
 8002caa:	f018 fc27 	bl	801b4fc <strstr>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d003      	beq.n	8002cbc <DEBUG_main+0x78>
		{
			SEND_str("respone\n");
 8002cb4:	4863      	ldr	r0, [pc, #396]	; (8002e44 <DEBUG_main+0x200>)
 8002cb6:	f7ff ffa9 	bl	8002c0c <SEND_str>
 8002cba:	e0b2      	b.n	8002e22 <DEBUG_main+0x1de>
		}
		else if(strstr(DBG_buf, "AIN") != NULL)
 8002cbc:	4962      	ldr	r1, [pc, #392]	; (8002e48 <DEBUG_main+0x204>)
 8002cbe:	485f      	ldr	r0, [pc, #380]	; (8002e3c <DEBUG_main+0x1f8>)
 8002cc0:	f018 fc1c 	bl	801b4fc <strstr>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d003      	beq.n	8002cd2 <DEBUG_main+0x8e>
		{
			json_input("{\"INSTRUCTION\":\"SET_PERIPHERALS\",\"COMMAND\":{\"TYPE\":\"ANALOG\",\"SET\":\"[1,1,0,0,1,1,0,0]\"},\"TIME\":\"1122334455\"}");
 8002cca:	4860      	ldr	r0, [pc, #384]	; (8002e4c <DEBUG_main+0x208>)
 8002ccc:	f7ff f852 	bl	8001d74 <json_input>
 8002cd0:	e0a7      	b.n	8002e22 <DEBUG_main+0x1de>
		}
		else if(strstr(DBG_buf, "DIN") != NULL)
 8002cd2:	495f      	ldr	r1, [pc, #380]	; (8002e50 <DEBUG_main+0x20c>)
 8002cd4:	4859      	ldr	r0, [pc, #356]	; (8002e3c <DEBUG_main+0x1f8>)
 8002cd6:	f018 fc11 	bl	801b4fc <strstr>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d003      	beq.n	8002ce8 <DEBUG_main+0xa4>
		{
			json_input("{\"INSTRUCTION\":\"SET_PERIPHERALS\",\"COMMAND\":{\"TYPE\":\"DIGITAL\",\"SET\":\"[0,0,1,1,0,0,1,1]\"},\"TIME\":\"1122334455\"}");
 8002ce0:	485c      	ldr	r0, [pc, #368]	; (8002e54 <DEBUG_main+0x210>)
 8002ce2:	f7ff f847 	bl	8001d74 <json_input>
 8002ce6:	e09c      	b.n	8002e22 <DEBUG_main+0x1de>
		}
		else if(strstr(DBG_buf, "OCD") != NULL)
 8002ce8:	495b      	ldr	r1, [pc, #364]	; (8002e58 <DEBUG_main+0x214>)
 8002cea:	4854      	ldr	r0, [pc, #336]	; (8002e3c <DEBUG_main+0x1f8>)
 8002cec:	f018 fc06 	bl	801b4fc <strstr>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d003      	beq.n	8002cfe <DEBUG_main+0xba>
		{
			json_input("{\"INSTRUCTION\":\"SET_PERIPHERALS\",\"COMMAND\":{\"TYPE\":\"OCD\",\"SET\":\"[0,1,1,0,0,1,1,0]\"},\"TIME\":\"1122334455\"}");
 8002cf6:	4859      	ldr	r0, [pc, #356]	; (8002e5c <DEBUG_main+0x218>)
 8002cf8:	f7ff f83c 	bl	8001d74 <json_input>
 8002cfc:	e091      	b.n	8002e22 <DEBUG_main+0x1de>
		}
		//------------------------------------------------Digital-----------------------------------------------
		else if(strstr(DBG_buf, "SP1") != NULL)
 8002cfe:	4958      	ldr	r1, [pc, #352]	; (8002e60 <DEBUG_main+0x21c>)
 8002d00:	484e      	ldr	r0, [pc, #312]	; (8002e3c <DEBUG_main+0x1f8>)
 8002d02:	f018 fbfb 	bl	801b4fc <strstr>
 8002d06:	4603      	mov	r3, r0
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d003      	beq.n	8002d14 <DEBUG_main+0xd0>
		{
			json_input("{\"INSTRUCTION\":\"SET_PROGRAMM\",\"COMMAND\":{\"TYPE\":\"SET_DIDO\",\"D_IN\":\"VHOD1\",\"VAR_IN\":\"0\",\"D_OUT\":\"VIHOD2\",\"VAR_OUT\":\"1\"},\"TIME\":\"1122334455\"}");
 8002d0c:	4855      	ldr	r0, [pc, #340]	; (8002e64 <DEBUG_main+0x220>)
 8002d0e:	f7ff f831 	bl	8001d74 <json_input>
 8002d12:	e086      	b.n	8002e22 <DEBUG_main+0x1de>
		}
		else if(strstr(DBG_buf, "SP2") != NULL)
 8002d14:	4954      	ldr	r1, [pc, #336]	; (8002e68 <DEBUG_main+0x224>)
 8002d16:	4849      	ldr	r0, [pc, #292]	; (8002e3c <DEBUG_main+0x1f8>)
 8002d18:	f018 fbf0 	bl	801b4fc <strstr>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d003      	beq.n	8002d2a <DEBUG_main+0xe6>
		{
			json_input("{\"INSTRUCTION\":\"SET_PROGRAMM\",\"COMMAND\":{\"TYPE\":\"SET_DIDO\",\"D_IN\":\"VHOD2\",\"VAR_IN\":\"0\",\"D_OUT\":\"VIHOD8\",\"VAR_OUT\":\"1\"},\"TIME\":\"1122334455\"}");
 8002d22:	4852      	ldr	r0, [pc, #328]	; (8002e6c <DEBUG_main+0x228>)
 8002d24:	f7ff f826 	bl	8001d74 <json_input>
 8002d28:	e07b      	b.n	8002e22 <DEBUG_main+0x1de>
		}
		//----------------------------------------------End_Digital---------------------------------------------
		//------------------------------------------------Analog------------------------------------------------
		else if(strstr(DBG_buf, "SP3") != NULL)
 8002d2a:	4951      	ldr	r1, [pc, #324]	; (8002e70 <DEBUG_main+0x22c>)
 8002d2c:	4843      	ldr	r0, [pc, #268]	; (8002e3c <DEBUG_main+0x1f8>)
 8002d2e:	f018 fbe5 	bl	801b4fc <strstr>
 8002d32:	4603      	mov	r3, r0
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d003      	beq.n	8002d40 <DEBUG_main+0xfc>
		{
			json_input("{\"INSTRUCTION\":\"SET_PROGRAMM\",\"COMMAND\":{\"TYPE\":\"SET_VAIDO\",\"A_IN\":\"VHOD1\",\"RANGE_LOW\":\"2.5\",\"RANGE_HIGH\":\"3.5\",\"D_OUT\":\"VIHOD3\",\"VAR_OUT\":\"1\"},\"TIME\":\"1122334455\"}");
 8002d38:	484e      	ldr	r0, [pc, #312]	; (8002e74 <DEBUG_main+0x230>)
 8002d3a:	f7ff f81b 	bl	8001d74 <json_input>
 8002d3e:	e070      	b.n	8002e22 <DEBUG_main+0x1de>
		}
		else if(strstr(DBG_buf, "SPVol") != NULL)		//Voltage
 8002d40:	494d      	ldr	r1, [pc, #308]	; (8002e78 <DEBUG_main+0x234>)
 8002d42:	483e      	ldr	r0, [pc, #248]	; (8002e3c <DEBUG_main+0x1f8>)
 8002d44:	f018 fbda 	bl	801b4fc <strstr>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d003      	beq.n	8002d56 <DEBUG_main+0x112>
		{
			json_input("{\"INSTRUCTION\":\"SET_PROGRAMM\",\"COMMAND\":{\"TYPE\":\"SET_VAIDO\",\"A_IN\":\"VHOD1\",\"RANGE_LOW\":\"1.5\",\"RANGE_HIGH\":\"2\",\"D_OUT\":\"VIHOD4\",\"VAR_OUT\":\"1\"},\"TIME\":\"1122334455\"}");
 8002d4e:	484b      	ldr	r0, [pc, #300]	; (8002e7c <DEBUG_main+0x238>)
 8002d50:	f7ff f810 	bl	8001d74 <json_input>
 8002d54:	e065      	b.n	8002e22 <DEBUG_main+0x1de>
		}
		else if(strstr(DBG_buf, "SPCur") != NULL)	//Current
 8002d56:	494a      	ldr	r1, [pc, #296]	; (8002e80 <DEBUG_main+0x23c>)
 8002d58:	4838      	ldr	r0, [pc, #224]	; (8002e3c <DEBUG_main+0x1f8>)
 8002d5a:	f018 fbcf 	bl	801b4fc <strstr>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d003      	beq.n	8002d6c <DEBUG_main+0x128>
		{
			json_input("{\"INSTRUCTION\":\"SET_PROGRAMM\",\"COMMAND\":{\"TYPE\":\"SET_CAIDO\",\"A_IN\":\"VHOD1\",\"RANGE_LOW\":\"0.006\",\"RANGE_HIGH\":\"0.008\",\"D_OUT\":\"VIHOD4\",\"VAR_OUT\":\"1\"},\"TIME\":\"1122334455\"}");
 8002d64:	4847      	ldr	r0, [pc, #284]	; (8002e84 <DEBUG_main+0x240>)
 8002d66:	f7ff f805 	bl	8001d74 <json_input>
 8002d6a:	e05a      	b.n	8002e22 <DEBUG_main+0x1de>
		}
		//----------------------------------------------End_Analog----------------------------------------------
		//--------------------------------------------------PWM-------------------------------------------------
		else if(strstr(DBG_buf, "SP5") != NULL)
 8002d6c:	4946      	ldr	r1, [pc, #280]	; (8002e88 <DEBUG_main+0x244>)
 8002d6e:	4833      	ldr	r0, [pc, #204]	; (8002e3c <DEBUG_main+0x1f8>)
 8002d70:	f018 fbc4 	bl	801b4fc <strstr>
 8002d74:	4603      	mov	r3, r0
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d003      	beq.n	8002d82 <DEBUG_main+0x13e>
		{
			json_input("{\"INSTRUCTION\":\"SET_PROGRAMM\",\"COMMAND\":{\"TYPE\":\"SET_PWM\",\"PWM_OUT\":\"PWM1\",\"D_CYCLE\":\"10\"},\"TIME\":\"1122334455\"}");
 8002d7a:	4844      	ldr	r0, [pc, #272]	; (8002e8c <DEBUG_main+0x248>)
 8002d7c:	f7fe fffa 	bl	8001d74 <json_input>
 8002d80:	e04f      	b.n	8002e22 <DEBUG_main+0x1de>
		}
		else if(strstr(DBG_buf, "SP6") != NULL)
 8002d82:	4943      	ldr	r1, [pc, #268]	; (8002e90 <DEBUG_main+0x24c>)
 8002d84:	482d      	ldr	r0, [pc, #180]	; (8002e3c <DEBUG_main+0x1f8>)
 8002d86:	f018 fbb9 	bl	801b4fc <strstr>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d003      	beq.n	8002d98 <DEBUG_main+0x154>
		{
			json_input("{\"INSTRUCTION\":\"SET_PROGRAMM\",\"COMMAND\":{\"TYPE\":\"SET_PWM\",\"PWM_OUT\":\"PWM2\",\"D_CYCLE\":\"25\"},\"TIME\":\"1122334455\"}");
 8002d90:	4840      	ldr	r0, [pc, #256]	; (8002e94 <DEBUG_main+0x250>)
 8002d92:	f7fe ffef 	bl	8001d74 <json_input>
 8002d96:	e044      	b.n	8002e22 <DEBUG_main+0x1de>
		}
		else if(strstr(DBG_buf, "SP7") != NULL)
 8002d98:	493f      	ldr	r1, [pc, #252]	; (8002e98 <DEBUG_main+0x254>)
 8002d9a:	4828      	ldr	r0, [pc, #160]	; (8002e3c <DEBUG_main+0x1f8>)
 8002d9c:	f018 fbae 	bl	801b4fc <strstr>
 8002da0:	4603      	mov	r3, r0
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d003      	beq.n	8002dae <DEBUG_main+0x16a>
		{
			json_input("{\"INSTRUCTION\":\"SET_PROGRAMM\",\"COMMAND\":{\"TYPE\":\"SET_PWM\",\"PWM_OUT\":\"PWM3\",\"D_CYCLE\":\"50\"},\"TIME\":\"1122334455\"}");
 8002da6:	483d      	ldr	r0, [pc, #244]	; (8002e9c <DEBUG_main+0x258>)
 8002da8:	f7fe ffe4 	bl	8001d74 <json_input>
 8002dac:	e039      	b.n	8002e22 <DEBUG_main+0x1de>
		}
		else if(strstr(DBG_buf, "SP8") != NULL)
 8002dae:	493c      	ldr	r1, [pc, #240]	; (8002ea0 <DEBUG_main+0x25c>)
 8002db0:	4822      	ldr	r0, [pc, #136]	; (8002e3c <DEBUG_main+0x1f8>)
 8002db2:	f018 fba3 	bl	801b4fc <strstr>
 8002db6:	4603      	mov	r3, r0
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d003      	beq.n	8002dc4 <DEBUG_main+0x180>
		{
			json_input("{\"INSTRUCTION\":\"SET_PROGRAMM\",\"COMMAND\":{\"TYPE\":\"SET_PWM\",\"PWM_OUT\":\"PWM4\",\"D_CYCLE\":\"90\"},\"TIME\":\"1122334455\"}");
 8002dbc:	4839      	ldr	r0, [pc, #228]	; (8002ea4 <DEBUG_main+0x260>)
 8002dbe:	f7fe ffd9 	bl	8001d74 <json_input>
 8002dc2:	e02e      	b.n	8002e22 <DEBUG_main+0x1de>
		}
		else if(strstr(DBG_buf, "SP9") != NULL)
 8002dc4:	4938      	ldr	r1, [pc, #224]	; (8002ea8 <DEBUG_main+0x264>)
 8002dc6:	481d      	ldr	r0, [pc, #116]	; (8002e3c <DEBUG_main+0x1f8>)
 8002dc8:	f018 fb98 	bl	801b4fc <strstr>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d003      	beq.n	8002dda <DEBUG_main+0x196>
		{
			json_input("{\"INSTRUCTION\":\"SET_PROGRAMM\",\"COMMAND\":{\"TYPE\":\"SET_PWM\",\"PWM_OUT\":\"PWM1\",\"D_CYCLE\":\"50\"},\"TIME\":\"1122334455\"}");
 8002dd2:	4836      	ldr	r0, [pc, #216]	; (8002eac <DEBUG_main+0x268>)
 8002dd4:	f7fe ffce 	bl	8001d74 <json_input>
 8002dd8:	e023      	b.n	8002e22 <DEBUG_main+0x1de>
		}
		//------------------------------------------------End_PWM-----------------------------------------------
		//----------------------------------------------TEMPERATURE---------------------------------------------
		else if(strstr(DBG_buf, "TP1") != NULL)
 8002dda:	4935      	ldr	r1, [pc, #212]	; (8002eb0 <DEBUG_main+0x26c>)
 8002ddc:	4817      	ldr	r0, [pc, #92]	; (8002e3c <DEBUG_main+0x1f8>)
 8002dde:	f018 fb8d 	bl	801b4fc <strstr>
 8002de2:	4603      	mov	r3, r0
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d003      	beq.n	8002df0 <DEBUG_main+0x1ac>
		{
			json_input("{\"INSTRUCTION\":\"SET_PROGRAMM\",\"COMMAND\":{\"TYPE\":\"SET_TEMP_PROFILE\",\"ROM_RAW\":\"28BF1E930C000031\",\"RANGE_TEMP_LOW\":\"-128\",\"RANGE_TEMP_HIGH\":\"-126\",\"D_OUT\":\"VIHOD3\",\"VAR_OUT\":\"1\"},\"TIME\":\"1122334455\"}");
 8002de8:	4832      	ldr	r0, [pc, #200]	; (8002eb4 <DEBUG_main+0x270>)
 8002dea:	f7fe ffc3 	bl	8001d74 <json_input>
 8002dee:	e018      	b.n	8002e22 <DEBUG_main+0x1de>
		}
		else if(strstr(DBG_buf, "TP2") != NULL)
 8002df0:	4931      	ldr	r1, [pc, #196]	; (8002eb8 <DEBUG_main+0x274>)
 8002df2:	4812      	ldr	r0, [pc, #72]	; (8002e3c <DEBUG_main+0x1f8>)
 8002df4:	f018 fb82 	bl	801b4fc <strstr>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d003      	beq.n	8002e06 <DEBUG_main+0x1c2>
		{
			json_input("{\"INSTRUCTION\":\"SET_PROGRAMM\",\"COMMAND\":{\"TYPE\":\"SET_TEMP_PROFILE\",\"ROM_RAW\":\"28790E950C000069\",\"RANGE_TEMP_LOW\":\"+28\",\"RANGE_TEMP_HIGH\":\"+50\",\"D_OUT\":\"VIHOD4\",\"VAR_OUT\":\"1\"},\"TIME\":\"1122334455\"}");
 8002dfe:	482f      	ldr	r0, [pc, #188]	; (8002ebc <DEBUG_main+0x278>)
 8002e00:	f7fe ffb8 	bl	8001d74 <json_input>
 8002e04:	e00d      	b.n	8002e22 <DEBUG_main+0x1de>
		}
		else if(strstr(DBG_buf, "READ_SD") != NULL)
 8002e06:	492e      	ldr	r1, [pc, #184]	; (8002ec0 <DEBUG_main+0x27c>)
 8002e08:	480c      	ldr	r0, [pc, #48]	; (8002e3c <DEBUG_main+0x1f8>)
 8002e0a:	f018 fb77 	bl	801b4fc <strstr>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d002      	beq.n	8002e1a <DEBUG_main+0x1d6>
		{
			my_read_file();
 8002e14:	f003 fe3e 	bl	8006a94 <my_read_file>
 8002e18:	e003      	b.n	8002e22 <DEBUG_main+0x1de>
		}
		else if(strstr(DBG_buf, "WRITE_SD") != NULL)
 8002e1a:	492a      	ldr	r1, [pc, #168]	; (8002ec4 <DEBUG_main+0x280>)
 8002e1c:	4807      	ldr	r0, [pc, #28]	; (8002e3c <DEBUG_main+0x1f8>)
 8002e1e:	f018 fb6d 	bl	801b4fc <strstr>
//			snprintf(DBG_str, DBG_RX_BUFFER_SIZE, "%s", DBG_buf);
//			SEND_str(DBG_str);
//			json_input(DBG_str);
//		}
		//--------------------------------------------End_TEMPERATURE-------------------------------------------
		if(fdbg)
 8002e22:	797b      	ldrb	r3, [r7, #5]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d005      	beq.n	8002e34 <DEBUG_main+0x1f0>
		{
			snprintf(DBG_str, DBG_RX_BUFFER_SIZE, "%s\n", DBG_buf);
 8002e28:	4b04      	ldr	r3, [pc, #16]	; (8002e3c <DEBUG_main+0x1f8>)
 8002e2a:	4a27      	ldr	r2, [pc, #156]	; (8002ec8 <DEBUG_main+0x284>)
 8002e2c:	2140      	movs	r1, #64	; 0x40
 8002e2e:	4827      	ldr	r0, [pc, #156]	; (8002ecc <DEBUG_main+0x288>)
 8002e30:	f018 fafe 	bl	801b430 <sniprintf>

			//json_input("{\"INSTRUCTION\":\"SET_PERIPHERALS\",\"COMMAND\":{\"TYPE\":\"DIGITAL\",\"SET\":\"[0,1,1,0,0,0,0,1]\"},\"TIME\":\"1122334455\"}");
		}
	}
}
 8002e34:	bf00      	nop
 8002e36:	3708      	adds	r7, #8
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bd80      	pop	{r7, pc}
 8002e3c:	20000288 	.word	0x20000288
 8002e40:	0801ff70 	.word	0x0801ff70
 8002e44:	0801ff78 	.word	0x0801ff78
 8002e48:	0801ff84 	.word	0x0801ff84
 8002e4c:	0801ff88 	.word	0x0801ff88
 8002e50:	0801fff4 	.word	0x0801fff4
 8002e54:	0801fff8 	.word	0x0801fff8
 8002e58:	08020068 	.word	0x08020068
 8002e5c:	0802006c 	.word	0x0802006c
 8002e60:	080200d8 	.word	0x080200d8
 8002e64:	080200dc 	.word	0x080200dc
 8002e68:	08020168 	.word	0x08020168
 8002e6c:	0802016c 	.word	0x0802016c
 8002e70:	080201f8 	.word	0x080201f8
 8002e74:	080201fc 	.word	0x080201fc
 8002e78:	080202a4 	.word	0x080202a4
 8002e7c:	080202ac 	.word	0x080202ac
 8002e80:	08020350 	.word	0x08020350
 8002e84:	08020358 	.word	0x08020358
 8002e88:	08020404 	.word	0x08020404
 8002e8c:	08020408 	.word	0x08020408
 8002e90:	08020478 	.word	0x08020478
 8002e94:	0802047c 	.word	0x0802047c
 8002e98:	080204ec 	.word	0x080204ec
 8002e9c:	080204f0 	.word	0x080204f0
 8002ea0:	08020560 	.word	0x08020560
 8002ea4:	08020564 	.word	0x08020564
 8002ea8:	080205d4 	.word	0x080205d4
 8002eac:	080205d8 	.word	0x080205d8
 8002eb0:	08020648 	.word	0x08020648
 8002eb4:	0802064c 	.word	0x0802064c
 8002eb8:	08020714 	.word	0x08020714
 8002ebc:	08020718 	.word	0x08020718
 8002ec0:	080207dc 	.word	0x080207dc
 8002ec4:	080207e4 	.word	0x080207e4
 8002ec8:	080207f0 	.word	0x080207f0
 8002ecc:	200002c8 	.word	0x200002c8

08002ed0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b082      	sub	sp, #8
 8002ed4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	607b      	str	r3, [r7, #4]
 8002eda:	4b23      	ldr	r3, [pc, #140]	; (8002f68 <MX_DMA_Init+0x98>)
 8002edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ede:	4a22      	ldr	r2, [pc, #136]	; (8002f68 <MX_DMA_Init+0x98>)
 8002ee0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002ee4:	6313      	str	r3, [r2, #48]	; 0x30
 8002ee6:	4b20      	ldr	r3, [pc, #128]	; (8002f68 <MX_DMA_Init+0x98>)
 8002ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002eee:	607b      	str	r3, [r7, #4]
 8002ef0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	603b      	str	r3, [r7, #0]
 8002ef6:	4b1c      	ldr	r3, [pc, #112]	; (8002f68 <MX_DMA_Init+0x98>)
 8002ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002efa:	4a1b      	ldr	r2, [pc, #108]	; (8002f68 <MX_DMA_Init+0x98>)
 8002efc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002f00:	6313      	str	r3, [r2, #48]	; 0x30
 8002f02:	4b19      	ldr	r3, [pc, #100]	; (8002f68 <MX_DMA_Init+0x98>)
 8002f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f06:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f0a:	603b      	str	r3, [r7, #0]
 8002f0c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8002f0e:	2200      	movs	r2, #0
 8002f10:	2100      	movs	r1, #0
 8002f12:	200d      	movs	r0, #13
 8002f14:	f006 ffcc 	bl	8009eb0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8002f18:	200d      	movs	r0, #13
 8002f1a:	f006 ffe5 	bl	8009ee8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8002f1e:	2200      	movs	r2, #0
 8002f20:	2100      	movs	r1, #0
 8002f22:	200f      	movs	r0, #15
 8002f24:	f006 ffc4 	bl	8009eb0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8002f28:	200f      	movs	r0, #15
 8002f2a:	f006 ffdd 	bl	8009ee8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8002f2e:	2200      	movs	r2, #0
 8002f30:	2100      	movs	r1, #0
 8002f32:	2010      	movs	r0, #16
 8002f34:	f006 ffbc 	bl	8009eb0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002f38:	2010      	movs	r0, #16
 8002f3a:	f006 ffd5 	bl	8009ee8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 8002f3e:	2200      	movs	r2, #0
 8002f40:	2100      	movs	r1, #0
 8002f42:	202f      	movs	r0, #47	; 0x2f
 8002f44:	f006 ffb4 	bl	8009eb0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8002f48:	202f      	movs	r0, #47	; 0x2f
 8002f4a:	f006 ffcd 	bl	8009ee8 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8002f4e:	2200      	movs	r2, #0
 8002f50:	2100      	movs	r1, #0
 8002f52:	2038      	movs	r0, #56	; 0x38
 8002f54:	f006 ffac 	bl	8009eb0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002f58:	2038      	movs	r0, #56	; 0x38
 8002f5a:	f006 ffc5 	bl	8009ee8 <HAL_NVIC_EnableIRQ>

}
 8002f5e:	bf00      	nop
 8002f60:	3708      	adds	r7, #8
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}
 8002f66:	bf00      	nop
 8002f68:	40023800 	.word	0x40023800

08002f6c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b08c      	sub	sp, #48	; 0x30
 8002f70:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f72:	f107 031c 	add.w	r3, r7, #28
 8002f76:	2200      	movs	r2, #0
 8002f78:	601a      	str	r2, [r3, #0]
 8002f7a:	605a      	str	r2, [r3, #4]
 8002f7c:	609a      	str	r2, [r3, #8]
 8002f7e:	60da      	str	r2, [r3, #12]
 8002f80:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002f82:	2300      	movs	r3, #0
 8002f84:	61bb      	str	r3, [r7, #24]
 8002f86:	4b8b      	ldr	r3, [pc, #556]	; (80031b4 <MX_GPIO_Init+0x248>)
 8002f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f8a:	4a8a      	ldr	r2, [pc, #552]	; (80031b4 <MX_GPIO_Init+0x248>)
 8002f8c:	f043 0310 	orr.w	r3, r3, #16
 8002f90:	6313      	str	r3, [r2, #48]	; 0x30
 8002f92:	4b88      	ldr	r3, [pc, #544]	; (80031b4 <MX_GPIO_Init+0x248>)
 8002f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f96:	f003 0310 	and.w	r3, r3, #16
 8002f9a:	61bb      	str	r3, [r7, #24]
 8002f9c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	617b      	str	r3, [r7, #20]
 8002fa2:	4b84      	ldr	r3, [pc, #528]	; (80031b4 <MX_GPIO_Init+0x248>)
 8002fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fa6:	4a83      	ldr	r2, [pc, #524]	; (80031b4 <MX_GPIO_Init+0x248>)
 8002fa8:	f043 0304 	orr.w	r3, r3, #4
 8002fac:	6313      	str	r3, [r2, #48]	; 0x30
 8002fae:	4b81      	ldr	r3, [pc, #516]	; (80031b4 <MX_GPIO_Init+0x248>)
 8002fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fb2:	f003 0304 	and.w	r3, r3, #4
 8002fb6:	617b      	str	r3, [r7, #20]
 8002fb8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002fba:	2300      	movs	r3, #0
 8002fbc:	613b      	str	r3, [r7, #16]
 8002fbe:	4b7d      	ldr	r3, [pc, #500]	; (80031b4 <MX_GPIO_Init+0x248>)
 8002fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fc2:	4a7c      	ldr	r2, [pc, #496]	; (80031b4 <MX_GPIO_Init+0x248>)
 8002fc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fc8:	6313      	str	r3, [r2, #48]	; 0x30
 8002fca:	4b7a      	ldr	r3, [pc, #488]	; (80031b4 <MX_GPIO_Init+0x248>)
 8002fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fd2:	613b      	str	r3, [r7, #16]
 8002fd4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	60fb      	str	r3, [r7, #12]
 8002fda:	4b76      	ldr	r3, [pc, #472]	; (80031b4 <MX_GPIO_Init+0x248>)
 8002fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fde:	4a75      	ldr	r2, [pc, #468]	; (80031b4 <MX_GPIO_Init+0x248>)
 8002fe0:	f043 0301 	orr.w	r3, r3, #1
 8002fe4:	6313      	str	r3, [r2, #48]	; 0x30
 8002fe6:	4b73      	ldr	r3, [pc, #460]	; (80031b4 <MX_GPIO_Init+0x248>)
 8002fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fea:	f003 0301 	and.w	r3, r3, #1
 8002fee:	60fb      	str	r3, [r7, #12]
 8002ff0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	60bb      	str	r3, [r7, #8]
 8002ff6:	4b6f      	ldr	r3, [pc, #444]	; (80031b4 <MX_GPIO_Init+0x248>)
 8002ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ffa:	4a6e      	ldr	r2, [pc, #440]	; (80031b4 <MX_GPIO_Init+0x248>)
 8002ffc:	f043 0302 	orr.w	r3, r3, #2
 8003000:	6313      	str	r3, [r2, #48]	; 0x30
 8003002:	4b6c      	ldr	r3, [pc, #432]	; (80031b4 <MX_GPIO_Init+0x248>)
 8003004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003006:	f003 0302 	and.w	r3, r3, #2
 800300a:	60bb      	str	r3, [r7, #8]
 800300c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800300e:	2300      	movs	r3, #0
 8003010:	607b      	str	r3, [r7, #4]
 8003012:	4b68      	ldr	r3, [pc, #416]	; (80031b4 <MX_GPIO_Init+0x248>)
 8003014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003016:	4a67      	ldr	r2, [pc, #412]	; (80031b4 <MX_GPIO_Init+0x248>)
 8003018:	f043 0308 	orr.w	r3, r3, #8
 800301c:	6313      	str	r3, [r2, #48]	; 0x30
 800301e:	4b65      	ldr	r3, [pc, #404]	; (80031b4 <MX_GPIO_Init+0x248>)
 8003020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003022:	f003 0308 	and.w	r3, r3, #8
 8003026:	607b      	str	r3, [r7, #4]
 8003028:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, FLAG_MCU_Pin|CS2__Pin, GPIO_PIN_SET);
 800302a:	2201      	movs	r2, #1
 800302c:	2142      	movs	r1, #66	; 0x42
 800302e:	4862      	ldr	r0, [pc, #392]	; (80031b8 <MX_GPIO_Init+0x24c>)
 8003030:	f008 fd50 	bl	800bad4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PWRON_GPIO_Port, PWRON_Pin, GPIO_PIN_RESET);
 8003034:	2200      	movs	r2, #0
 8003036:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800303a:	4860      	ldr	r0, [pc, #384]	; (80031bc <MX_GPIO_Init+0x250>)
 800303c:	f008 fd4a 	bl	800bad4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(O0_GPIO_Port, O0_Pin, GPIO_PIN_RESET);
 8003040:	2200      	movs	r2, #0
 8003042:	2101      	movs	r1, #1
 8003044:	485e      	ldr	r0, [pc, #376]	; (80031c0 <MX_GPIO_Init+0x254>)
 8003046:	f008 fd45 	bl	800bad4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, O1_Pin|O2_Pin|CS1__Pin, GPIO_PIN_RESET);
 800304a:	2200      	movs	r2, #0
 800304c:	2143      	movs	r1, #67	; 0x43
 800304e:	485d      	ldr	r0, [pc, #372]	; (80031c4 <MX_GPIO_Init+0x258>)
 8003050:	f008 fd40 	bl	800bad4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, O3_Pin|O4_Pin|O5_Pin|O6_Pin
 8003054:	2200      	movs	r2, #0
 8003056:	f64f 7181 	movw	r1, #65409	; 0xff81
 800305a:	4857      	ldr	r0, [pc, #348]	; (80031b8 <MX_GPIO_Init+0x24c>)
 800305c:	f008 fd3a 	bl	800bad4 <HAL_GPIO_WritePin>
                          |O7_Pin|S2_Pin|S3_Pin|S4_Pin
                          |S1_Pin|WP__Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PKEY_GPIO_Port, PKEY_Pin, GPIO_PIN_SET);
 8003060:	2201      	movs	r2, #1
 8003062:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003066:	4856      	ldr	r0, [pc, #344]	; (80031c0 <MX_GPIO_Init+0x254>)
 8003068:	f008 fd34 	bl	800bad4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, WR0_Pin|WR1_Pin|PWR1_Pin|RS485_DE_Pin
 800306c:	2200      	movs	r2, #0
 800306e:	219b      	movs	r1, #155	; 0x9b
 8003070:	4855      	ldr	r0, [pc, #340]	; (80031c8 <MX_GPIO_Init+0x25c>)
 8003072:	f008 fd2f 	bl	800bad4 <HAL_GPIO_WritePin>
                          |RS485_RE__Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = FLAG_MCU_Pin|O3_Pin|O4_Pin|O5_Pin
 8003076:	f64f 73c1 	movw	r3, #65473	; 0xffc1
 800307a:	61fb      	str	r3, [r7, #28]
                          |O6_Pin|O7_Pin|S2_Pin|S3_Pin
                          |S4_Pin|S1_Pin|WP__Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800307c:	2301      	movs	r3, #1
 800307e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003080:	2300      	movs	r3, #0
 8003082:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003084:	2303      	movs	r3, #3
 8003086:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003088:	f107 031c 	add.w	r3, r7, #28
 800308c:	4619      	mov	r1, r3
 800308e:	484a      	ldr	r0, [pc, #296]	; (80031b8 <MX_GPIO_Init+0x24c>)
 8003090:	f008 fb6c 	bl	800b76c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PWRON_Pin;
 8003094:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003098:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800309a:	2301      	movs	r3, #1
 800309c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800309e:	2300      	movs	r3, #0
 80030a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030a2:	2300      	movs	r3, #0
 80030a4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(PWRON_GPIO_Port, &GPIO_InitStruct);
 80030a6:	f107 031c 	add.w	r3, r7, #28
 80030aa:	4619      	mov	r1, r3
 80030ac:	4843      	ldr	r0, [pc, #268]	; (80031bc <MX_GPIO_Init+0x250>)
 80030ae:	f008 fb5d 	bl	800b76c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS__M_Pin;
 80030b2:	2301      	movs	r3, #1
 80030b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80030b6:	2300      	movs	r3, #0
 80030b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030ba:	2300      	movs	r3, #0
 80030bc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(CS__M_GPIO_Port, &GPIO_InitStruct);
 80030be:	f107 031c 	add.w	r3, r7, #28
 80030c2:	4619      	mov	r1, r3
 80030c4:	483d      	ldr	r0, [pc, #244]	; (80031bc <MX_GPIO_Init+0x250>)
 80030c6:	f008 fb51 	bl	800b76c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = O0_Pin|PKEY_Pin;
 80030ca:	f640 0301 	movw	r3, #2049	; 0x801
 80030ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80030d0:	2301      	movs	r3, #1
 80030d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030d4:	2300      	movs	r3, #0
 80030d6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030d8:	2303      	movs	r3, #3
 80030da:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030dc:	f107 031c 	add.w	r3, r7, #28
 80030e0:	4619      	mov	r1, r3
 80030e2:	4837      	ldr	r0, [pc, #220]	; (80031c0 <MX_GPIO_Init+0x254>)
 80030e4:	f008 fb42 	bl	800b76c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = O1_Pin|O2_Pin|CS1__Pin;
 80030e8:	2343      	movs	r3, #67	; 0x43
 80030ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80030ec:	2301      	movs	r3, #1
 80030ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030f0:	2300      	movs	r3, #0
 80030f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030f4:	2303      	movs	r3, #3
 80030f6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030f8:	f107 031c 	add.w	r3, r7, #28
 80030fc:	4619      	mov	r1, r3
 80030fe:	4831      	ldr	r0, [pc, #196]	; (80031c4 <MX_GPIO_Init+0x258>)
 8003100:	f008 fb34 	bl	800b76c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = IN7_Pin|IN6_Pin|IN5_Pin|IN4_Pin
 8003104:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8003108:	61fb      	str	r3, [r7, #28]
                          |IN3_Pin|IN2_Pin|IN1_Pin|IN0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800310a:	4b30      	ldr	r3, [pc, #192]	; (80031cc <MX_GPIO_Init+0x260>)
 800310c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800310e:	2300      	movs	r3, #0
 8003110:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003112:	f107 031c 	add.w	r3, r7, #28
 8003116:	4619      	mov	r1, r3
 8003118:	482b      	ldr	r0, [pc, #172]	; (80031c8 <MX_GPIO_Init+0x25c>)
 800311a:	f008 fb27 	bl	800b76c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = WR0_Pin;
 800311e:	2301      	movs	r3, #1
 8003120:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8003122:	2311      	movs	r3, #17
 8003124:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003126:	2300      	movs	r3, #0
 8003128:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800312a:	2302      	movs	r3, #2
 800312c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(WR0_GPIO_Port, &GPIO_InitStruct);
 800312e:	f107 031c 	add.w	r3, r7, #28
 8003132:	4619      	mov	r1, r3
 8003134:	4824      	ldr	r0, [pc, #144]	; (80031c8 <MX_GPIO_Init+0x25c>)
 8003136:	f008 fb19 	bl	800b76c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = WR1_Pin|PWR1_Pin|RS485_DE_Pin|RS485_RE__Pin;
 800313a:	239a      	movs	r3, #154	; 0x9a
 800313c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800313e:	2301      	movs	r3, #1
 8003140:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003142:	2300      	movs	r3, #0
 8003144:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003146:	2303      	movs	r3, #3
 8003148:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800314a:	f107 031c 	add.w	r3, r7, #28
 800314e:	4619      	mov	r1, r3
 8003150:	481d      	ldr	r0, [pc, #116]	; (80031c8 <MX_GPIO_Init+0x25c>)
 8003152:	f008 fb0b 	bl	800b76c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CD_Pin;
 8003156:	2380      	movs	r3, #128	; 0x80
 8003158:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800315a:	2300      	movs	r3, #0
 800315c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800315e:	2300      	movs	r3, #0
 8003160:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(CD_GPIO_Port, &GPIO_InitStruct);
 8003162:	f107 031c 	add.w	r3, r7, #28
 8003166:	4619      	mov	r1, r3
 8003168:	4816      	ldr	r0, [pc, #88]	; (80031c4 <MX_GPIO_Init+0x258>)
 800316a:	f008 faff 	bl	800b76c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS2__Pin;
 800316e:	2302      	movs	r3, #2
 8003170:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003172:	2301      	movs	r3, #1
 8003174:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003176:	2301      	movs	r3, #1
 8003178:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800317a:	2303      	movs	r3, #3
 800317c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS2__GPIO_Port, &GPIO_InitStruct);
 800317e:	f107 031c 	add.w	r3, r7, #28
 8003182:	4619      	mov	r1, r3
 8003184:	480c      	ldr	r0, [pc, #48]	; (80031b8 <MX_GPIO_Init+0x24c>)
 8003186:	f008 faf1 	bl	800b76c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800318a:	2200      	movs	r2, #0
 800318c:	2100      	movs	r1, #0
 800318e:	2017      	movs	r0, #23
 8003190:	f006 fe8e 	bl	8009eb0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003194:	2017      	movs	r0, #23
 8003196:	f006 fea7 	bl	8009ee8 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800319a:	2200      	movs	r2, #0
 800319c:	2100      	movs	r1, #0
 800319e:	2028      	movs	r0, #40	; 0x28
 80031a0:	f006 fe86 	bl	8009eb0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80031a4:	2028      	movs	r0, #40	; 0x28
 80031a6:	f006 fe9f 	bl	8009ee8 <HAL_NVIC_EnableIRQ>

}
 80031aa:	bf00      	nop
 80031ac:	3730      	adds	r7, #48	; 0x30
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bd80      	pop	{r7, pc}
 80031b2:	bf00      	nop
 80031b4:	40023800 	.word	0x40023800
 80031b8:	40021000 	.word	0x40021000
 80031bc:	40020800 	.word	0x40020800
 80031c0:	40020000 	.word	0x40020000
 80031c4:	40020400 	.word	0x40020400
 80031c8:	40020c00 	.word	0x40020c00
 80031cc:	10310000 	.word	0x10310000

080031d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80031d4:	f006 f964 	bl	80094a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80031d8:	f000 f840 	bl	800325c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80031dc:	f7ff fec6 	bl	8002f6c <MX_GPIO_Init>
  MX_DMA_Init();
 80031e0:	f7ff fe76 	bl	8002ed0 <MX_DMA_Init>
  MX_ADC1_Init();
 80031e4:	f7ff fc06 	bl	80029f4 <MX_ADC1_Init>
  MX_SPI1_Init();
 80031e8:	f000 f95a 	bl	80034a0 <MX_SPI1_Init>
  MX_SPI2_Init();
 80031ec:	f000 f98e 	bl	800350c <MX_SPI2_Init>
  MX_TIM3_Init();
 80031f0:	f000 fd20 	bl	8003c34 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 80031f4:	f000 ffaa 	bl	800414c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80031f8:	f000 ffd2 	bl	80041a0 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80031fc:	f000 fffa 	bl	80041f4 <MX_USART3_UART_Init>
  MX_LWIP_Init();
 8003200:	f00b fa9e 	bl	800e740 <MX_LWIP_Init>
  MX_TIM4_Init();
 8003204:	f000 fd92 	bl	8003d2c <MX_TIM4_Init>
//  MX_RTC_Init();
  MX_TIM6_Init();
 8003208:	f000 fde6 	bl	8003dd8 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

	HAL_Delay(1000);
 800320c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003210:	f006 f988 	bl	8009524 <HAL_Delay>
	DWT_Init();
 8003214:	f001 f980 	bl	8004518 <DWT_Init>

	EN_Interrupt();		//Для дебага по USART3
 8003218:	f001 f92e 	bl	8004478 <EN_Interrupt>

												//Для организации обмена данными по ethernet нужно включить:
												//net_ini(); MX_LWIP_Process();(Вкл в main) также закоментить в файле stm32f4xx_it.c строчки для отладки через DEBUG_main();

	//----------------ADC_test------------------
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&adc, 4);		//Стартуем АЦП
 800321c:	2204      	movs	r2, #4
 800321e:	490b      	ldr	r1, [pc, #44]	; (800324c <main+0x7c>)
 8003220:	480b      	ldr	r0, [pc, #44]	; (8003250 <main+0x80>)
 8003222:	f006 f9e7 	bl	80095f4 <HAL_ADC_Start_DMA>
	HAL_TIM_OC_Start(&htim4, TIM_CHANNEL_4);
 8003226:	210c      	movs	r1, #12
 8003228:	480a      	ldr	r0, [pc, #40]	; (8003254 <main+0x84>)
 800322a:	f009 fe4f 	bl	800cecc <HAL_TIM_OC_Start>
	//------------------------------------------

	//-------------1-WIRE_test------------------
	UpdateTempSens();
 800322e:	f006 f893 	bl	8009358 <UpdateTempSens>
//	HAL_SPI_TransmitReceive_IT(&hspi2, (uint8_t *)SPI_tx_buf, (uint8_t *)SPI_rx_buf, 1);	//Настройка прерывания по spi для МК

	//----------------PWM_test------------------
	//------------------------------------------
	//---------------FATfs----------------------
	my_init_card();
 8003232:	f003 fc29 	bl	8006a88 <my_init_card>
	SEND_str("Init sd card -> success\n");
 8003236:	4808      	ldr	r0, [pc, #32]	; (8003258 <main+0x88>)
 8003238:	f7ff fce8 	bl	8002c0c <SEND_str>

		//----------------PWM_test----------------
		//----------------------------------------

		//------------------DEBUG-----------------
		DEBUG_main();
 800323c:	f7ff fd02 	bl	8002c44 <DEBUG_main>
		//----------------------------------------

		//--------------ReINIT_GPIO---------------
		CheckReWriteAiDo();
 8003240:	f004 fe5c 	bl	8007efc <CheckReWriteAiDo>
		//----------------------------------------
		//----------TEST_EXAMPLE_1-WIRE-----------
//		TempSensMain();
		CheckReWriteTSiDo();
 8003244:	f004 ff08 	bl	8008058 <CheckReWriteTSiDo>
		DEBUG_main();
 8003248:	e7f8      	b.n	800323c <main+0x6c>
 800324a:	bf00      	nop
 800324c:	20000308 	.word	0x20000308
 8003250:	20000868 	.word	0x20000868
 8003254:	20000a00 	.word	0x20000a00
 8003258:	080207f4 	.word	0x080207f4

0800325c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b098      	sub	sp, #96	; 0x60
 8003260:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003262:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003266:	2230      	movs	r2, #48	; 0x30
 8003268:	2100      	movs	r1, #0
 800326a:	4618      	mov	r0, r3
 800326c:	f017 fb5c 	bl	801a928 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003270:	f107 031c 	add.w	r3, r7, #28
 8003274:	2200      	movs	r2, #0
 8003276:	601a      	str	r2, [r3, #0]
 8003278:	605a      	str	r2, [r3, #4]
 800327a:	609a      	str	r2, [r3, #8]
 800327c:	60da      	str	r2, [r3, #12]
 800327e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003280:	f107 030c 	add.w	r3, r7, #12
 8003284:	2200      	movs	r2, #0
 8003286:	601a      	str	r2, [r3, #0]
 8003288:	605a      	str	r2, [r3, #4]
 800328a:	609a      	str	r2, [r3, #8]
 800328c:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800328e:	2300      	movs	r3, #0
 8003290:	60bb      	str	r3, [r7, #8]
 8003292:	4b31      	ldr	r3, [pc, #196]	; (8003358 <SystemClock_Config+0xfc>)
 8003294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003296:	4a30      	ldr	r2, [pc, #192]	; (8003358 <SystemClock_Config+0xfc>)
 8003298:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800329c:	6413      	str	r3, [r2, #64]	; 0x40
 800329e:	4b2e      	ldr	r3, [pc, #184]	; (8003358 <SystemClock_Config+0xfc>)
 80032a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032a6:	60bb      	str	r3, [r7, #8]
 80032a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80032aa:	2300      	movs	r3, #0
 80032ac:	607b      	str	r3, [r7, #4]
 80032ae:	4b2b      	ldr	r3, [pc, #172]	; (800335c <SystemClock_Config+0x100>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4a2a      	ldr	r2, [pc, #168]	; (800335c <SystemClock_Config+0x100>)
 80032b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80032b8:	6013      	str	r3, [r2, #0]
 80032ba:	4b28      	ldr	r3, [pc, #160]	; (800335c <SystemClock_Config+0x100>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032c2:	607b      	str	r3, [r7, #4]
 80032c4:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 80032c6:	2305      	movs	r3, #5
 80032c8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80032ca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80032ce:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80032d0:	2301      	movs	r3, #1
 80032d2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80032d4:	2302      	movs	r3, #2
 80032d6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80032d8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80032dc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80032de:	2304      	movs	r3, #4
 80032e0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 168;
 80032e2:	23a8      	movs	r3, #168	; 0xa8
 80032e4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80032e6:	2302      	movs	r3, #2
 80032e8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80032ea:	2304      	movs	r3, #4
 80032ec:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80032ee:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80032f2:	4618      	mov	r0, r3
 80032f4:	f008 fc20 	bl	800bb38 <HAL_RCC_OscConfig>
 80032f8:	4603      	mov	r3, r0
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d001      	beq.n	8003302 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80032fe:	f000 f8c7 	bl	8003490 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003302:	230f      	movs	r3, #15
 8003304:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003306:	2302      	movs	r3, #2
 8003308:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800330a:	2300      	movs	r3, #0
 800330c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800330e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003312:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003314:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003318:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800331a:	f107 031c 	add.w	r3, r7, #28
 800331e:	2105      	movs	r1, #5
 8003320:	4618      	mov	r0, r3
 8003322:	f008 fe79 	bl	800c018 <HAL_RCC_ClockConfig>
 8003326:	4603      	mov	r3, r0
 8003328:	2b00      	cmp	r3, #0
 800332a:	d001      	beq.n	8003330 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 800332c:	f000 f8b0 	bl	8003490 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003330:	2302      	movs	r3, #2
 8003332:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8003334:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003338:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800333a:	f107 030c 	add.w	r3, r7, #12
 800333e:	4618      	mov	r0, r3
 8003340:	f009 f898 	bl	800c474 <HAL_RCCEx_PeriphCLKConfig>
 8003344:	4603      	mov	r3, r0
 8003346:	2b00      	cmp	r3, #0
 8003348:	d001      	beq.n	800334e <SystemClock_Config+0xf2>
  {
    Error_Handler();
 800334a:	f000 f8a1 	bl	8003490 <Error_Handler>
  }
}
 800334e:	bf00      	nop
 8003350:	3760      	adds	r7, #96	; 0x60
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}
 8003356:	bf00      	nop
 8003358:	40023800 	.word	0x40023800
 800335c:	40007000 	.word	0x40007000

08003360 <HAL_GPIO_EXTI_Callback>:
//	{
//		UART3_RxCpltCallback();
//	}
}
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b082      	sub	sp, #8
 8003364:	af00      	add	r7, sp, #0
 8003366:	4603      	mov	r3, r0
 8003368:	80fb      	strh	r3, [r7, #6]
	CheckReWriteDiDo();
 800336a:	f004 fd0b 	bl	8007d84 <CheckReWriteDiDo>
}
 800336e:	bf00      	nop
 8003370:	3708      	adds	r7, #8
 8003372:	46bd      	mov	sp, r7
 8003374:	bd80      	pop	{r7, pc}
	...

08003378 <HAL_ADC_ConvCpltCallback>:
	    	flag_iput_spi2 = 1;
	    }
	}
}
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b082      	sub	sp, #8
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
    if(hadc->Instance == ADC1)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a1f      	ldr	r2, [pc, #124]	; (8003404 <HAL_ADC_ConvCpltCallback+0x8c>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d137      	bne.n	80033fa <HAL_ADC_ConvCpltCallback+0x82>
    {
    	adcValue[0] = Conversion_ADC1((uint16_t)adc[0], 0);
 800338a:	4b1f      	ldr	r3, [pc, #124]	; (8003408 <HAL_ADC_ConvCpltCallback+0x90>)
 800338c:	881b      	ldrh	r3, [r3, #0]
 800338e:	b29b      	uxth	r3, r3
 8003390:	2100      	movs	r1, #0
 8003392:	4618      	mov	r0, r3
 8003394:	f004 ff9c 	bl	80082d0 <Conversion_ADC1>
 8003398:	eeb0 7a40 	vmov.f32	s14, s0
 800339c:	eef0 7a60 	vmov.f32	s15, s1
 80033a0:	4b1a      	ldr	r3, [pc, #104]	; (800340c <HAL_ADC_ConvCpltCallback+0x94>)
 80033a2:	ed83 7b00 	vstr	d7, [r3]
        adcValue[1] = Conversion_ADC1((uint16_t)adc[1], 1);
 80033a6:	4b18      	ldr	r3, [pc, #96]	; (8003408 <HAL_ADC_ConvCpltCallback+0x90>)
 80033a8:	885b      	ldrh	r3, [r3, #2]
 80033aa:	b29b      	uxth	r3, r3
 80033ac:	2101      	movs	r1, #1
 80033ae:	4618      	mov	r0, r3
 80033b0:	f004 ff8e 	bl	80082d0 <Conversion_ADC1>
 80033b4:	eeb0 7a40 	vmov.f32	s14, s0
 80033b8:	eef0 7a60 	vmov.f32	s15, s1
 80033bc:	4b13      	ldr	r3, [pc, #76]	; (800340c <HAL_ADC_ConvCpltCallback+0x94>)
 80033be:	ed83 7b02 	vstr	d7, [r3, #8]
        adcValue[2] = Conversion_ADC1((uint16_t)adc[2], 2);
 80033c2:	4b11      	ldr	r3, [pc, #68]	; (8003408 <HAL_ADC_ConvCpltCallback+0x90>)
 80033c4:	889b      	ldrh	r3, [r3, #4]
 80033c6:	b29b      	uxth	r3, r3
 80033c8:	2102      	movs	r1, #2
 80033ca:	4618      	mov	r0, r3
 80033cc:	f004 ff80 	bl	80082d0 <Conversion_ADC1>
 80033d0:	eeb0 7a40 	vmov.f32	s14, s0
 80033d4:	eef0 7a60 	vmov.f32	s15, s1
 80033d8:	4b0c      	ldr	r3, [pc, #48]	; (800340c <HAL_ADC_ConvCpltCallback+0x94>)
 80033da:	ed83 7b04 	vstr	d7, [r3, #16]
        adcValue[3] = Conversion_ADC1((uint16_t)adc[3], 3);
 80033de:	4b0a      	ldr	r3, [pc, #40]	; (8003408 <HAL_ADC_ConvCpltCallback+0x90>)
 80033e0:	88db      	ldrh	r3, [r3, #6]
 80033e2:	b29b      	uxth	r3, r3
 80033e4:	2103      	movs	r1, #3
 80033e6:	4618      	mov	r0, r3
 80033e8:	f004 ff72 	bl	80082d0 <Conversion_ADC1>
 80033ec:	eeb0 7a40 	vmov.f32	s14, s0
 80033f0:	eef0 7a60 	vmov.f32	s15, s1
 80033f4:	4b05      	ldr	r3, [pc, #20]	; (800340c <HAL_ADC_ConvCpltCallback+0x94>)
 80033f6:	ed83 7b06 	vstr	d7, [r3, #24]
    }
}
 80033fa:	bf00      	nop
 80033fc:	3708      	adds	r7, #8
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}
 8003402:	bf00      	nop
 8003404:	40012000 	.word	0x40012000
 8003408:	20000308 	.word	0x20000308
 800340c:	20000310 	.word	0x20000310

08003410 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b082      	sub	sp, #8
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
    if(htim->Instance == TIM6) //check if the interrupt comes from TIM6
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a16      	ldr	r2, [pc, #88]	; (8003478 <HAL_TIM_PeriodElapsedCallback+0x68>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d11f      	bne.n	8003462 <HAL_TIM_PeriodElapsedCallback+0x52>
    {
		Time_Counter_Init++;
 8003422:	4b16      	ldr	r3, [pc, #88]	; (800347c <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8003424:	781b      	ldrb	r3, [r3, #0]
 8003426:	3301      	adds	r3, #1
 8003428:	b2da      	uxtb	r2, r3
 800342a:	4b14      	ldr	r3, [pc, #80]	; (800347c <HAL_TIM_PeriodElapsedCallback+0x6c>)
 800342c:	701a      	strb	r2, [r3, #0]
		Time_Counter_Read++;
 800342e:	4b14      	ldr	r3, [pc, #80]	; (8003480 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8003430:	781b      	ldrb	r3, [r3, #0]
 8003432:	3301      	adds	r3, #1
 8003434:	b2da      	uxtb	r2, r3
 8003436:	4b12      	ldr	r3, [pc, #72]	; (8003480 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8003438:	701a      	strb	r2, [r3, #0]

		if(Time_Counter_Init == 16)		//Запрос данных каждую ~0.8 сек (old 16: 83 to 49999)
 800343a:	4b10      	ldr	r3, [pc, #64]	; (800347c <HAL_TIM_PeriodElapsedCallback+0x6c>)
 800343c:	781b      	ldrb	r3, [r3, #0]
 800343e:	2b10      	cmp	r3, #16
 8003440:	d102      	bne.n	8003448 <HAL_TIM_PeriodElapsedCallback+0x38>
        {
	    	OneWire_Test_Flag_Init = true;
 8003442:	4b10      	ldr	r3, [pc, #64]	; (8003484 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8003444:	2201      	movs	r2, #1
 8003446:	701a      	strb	r2, [r3, #0]
        }
		if(Time_Counter_Read == 32)	//Запрос данных каждую ~1.6 сек (old 32: 83 to 49999))
 8003448:	4b0d      	ldr	r3, [pc, #52]	; (8003480 <HAL_TIM_PeriodElapsedCallback+0x70>)
 800344a:	781b      	ldrb	r3, [r3, #0]
 800344c:	2b20      	cmp	r3, #32
 800344e:	d108      	bne.n	8003462 <HAL_TIM_PeriodElapsedCallback+0x52>
        {
	    	OneWire_Test_Flag_Read = true;
 8003450:	4b0d      	ldr	r3, [pc, #52]	; (8003488 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8003452:	2201      	movs	r2, #1
 8003454:	701a      	strb	r2, [r3, #0]

	    	Time_Counter_Init = 0;
 8003456:	4b09      	ldr	r3, [pc, #36]	; (800347c <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8003458:	2200      	movs	r2, #0
 800345a:	701a      	strb	r2, [r3, #0]
	    	Time_Counter_Read = 0;
 800345c:	4b08      	ldr	r3, [pc, #32]	; (8003480 <HAL_TIM_PeriodElapsedCallback+0x70>)
 800345e:	2200      	movs	r2, #0
 8003460:	701a      	strb	r2, [r3, #0]
        }
    }

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a09      	ldr	r2, [pc, #36]	; (800348c <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d101      	bne.n	8003470 <HAL_TIM_PeriodElapsedCallback+0x60>
    HAL_IncTick();
 800346c:	f006 f83a 	bl	80094e4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003470:	bf00      	nop
 8003472:	3708      	adds	r7, #8
 8003474:	46bd      	mov	sp, r7
 8003476:	bd80      	pop	{r7, pc}
 8003478:	40001000 	.word	0x40001000
 800347c:	20000330 	.word	0x20000330
 8003480:	20000331 	.word	0x20000331
 8003484:	20000332 	.word	0x20000332
 8003488:	20000333 	.word	0x20000333
 800348c:	40010000 	.word	0x40010000

08003490 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003490:	b480      	push	{r7}
 8003492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003494:	bf00      	nop
 8003496:	46bd      	mov	sp, r7
 8003498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349c:	4770      	bx	lr
	...

080034a0 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 80034a4:	4b17      	ldr	r3, [pc, #92]	; (8003504 <MX_SPI1_Init+0x64>)
 80034a6:	4a18      	ldr	r2, [pc, #96]	; (8003508 <MX_SPI1_Init+0x68>)
 80034a8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80034aa:	4b16      	ldr	r3, [pc, #88]	; (8003504 <MX_SPI1_Init+0x64>)
 80034ac:	f44f 7282 	mov.w	r2, #260	; 0x104
 80034b0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80034b2:	4b14      	ldr	r3, [pc, #80]	; (8003504 <MX_SPI1_Init+0x64>)
 80034b4:	2200      	movs	r2, #0
 80034b6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80034b8:	4b12      	ldr	r3, [pc, #72]	; (8003504 <MX_SPI1_Init+0x64>)
 80034ba:	2200      	movs	r2, #0
 80034bc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80034be:	4b11      	ldr	r3, [pc, #68]	; (8003504 <MX_SPI1_Init+0x64>)
 80034c0:	2200      	movs	r2, #0
 80034c2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80034c4:	4b0f      	ldr	r3, [pc, #60]	; (8003504 <MX_SPI1_Init+0x64>)
 80034c6:	2200      	movs	r2, #0
 80034c8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80034ca:	4b0e      	ldr	r3, [pc, #56]	; (8003504 <MX_SPI1_Init+0x64>)
 80034cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80034d0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80034d2:	4b0c      	ldr	r3, [pc, #48]	; (8003504 <MX_SPI1_Init+0x64>)
 80034d4:	2210      	movs	r2, #16
 80034d6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80034d8:	4b0a      	ldr	r3, [pc, #40]	; (8003504 <MX_SPI1_Init+0x64>)
 80034da:	2200      	movs	r2, #0
 80034dc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80034de:	4b09      	ldr	r3, [pc, #36]	; (8003504 <MX_SPI1_Init+0x64>)
 80034e0:	2200      	movs	r2, #0
 80034e2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80034e4:	4b07      	ldr	r3, [pc, #28]	; (8003504 <MX_SPI1_Init+0x64>)
 80034e6:	2200      	movs	r2, #0
 80034e8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80034ea:	4b06      	ldr	r3, [pc, #24]	; (8003504 <MX_SPI1_Init+0x64>)
 80034ec:	220a      	movs	r2, #10
 80034ee:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80034f0:	4804      	ldr	r0, [pc, #16]	; (8003504 <MX_SPI1_Init+0x64>)
 80034f2:	f009 f8a1 	bl	800c638 <HAL_SPI_Init>
 80034f6:	4603      	mov	r3, r0
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d001      	beq.n	8003500 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80034fc:	f7ff ffc8 	bl	8003490 <Error_Handler>
  }

}
 8003500:	bf00      	nop
 8003502:	bd80      	pop	{r7, pc}
 8003504:	20000968 	.word	0x20000968
 8003508:	40013000 	.word	0x40013000

0800350c <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 8003510:	4b15      	ldr	r3, [pc, #84]	; (8003568 <MX_SPI2_Init+0x5c>)
 8003512:	4a16      	ldr	r2, [pc, #88]	; (800356c <MX_SPI2_Init+0x60>)
 8003514:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 8003516:	4b14      	ldr	r3, [pc, #80]	; (8003568 <MX_SPI2_Init+0x5c>)
 8003518:	2200      	movs	r2, #0
 800351a:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800351c:	4b12      	ldr	r3, [pc, #72]	; (8003568 <MX_SPI2_Init+0x5c>)
 800351e:	2200      	movs	r2, #0
 8003520:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003522:	4b11      	ldr	r3, [pc, #68]	; (8003568 <MX_SPI2_Init+0x5c>)
 8003524:	2200      	movs	r2, #0
 8003526:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003528:	4b0f      	ldr	r3, [pc, #60]	; (8003568 <MX_SPI2_Init+0x5c>)
 800352a:	2200      	movs	r2, #0
 800352c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800352e:	4b0e      	ldr	r3, [pc, #56]	; (8003568 <MX_SPI2_Init+0x5c>)
 8003530:	2200      	movs	r2, #0
 8003532:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8003534:	4b0c      	ldr	r3, [pc, #48]	; (8003568 <MX_SPI2_Init+0x5c>)
 8003536:	f44f 7200 	mov.w	r2, #512	; 0x200
 800353a:	619a      	str	r2, [r3, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800353c:	4b0a      	ldr	r3, [pc, #40]	; (8003568 <MX_SPI2_Init+0x5c>)
 800353e:	2200      	movs	r2, #0
 8003540:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003542:	4b09      	ldr	r3, [pc, #36]	; (8003568 <MX_SPI2_Init+0x5c>)
 8003544:	2200      	movs	r2, #0
 8003546:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003548:	4b07      	ldr	r3, [pc, #28]	; (8003568 <MX_SPI2_Init+0x5c>)
 800354a:	2200      	movs	r2, #0
 800354c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800354e:	4b06      	ldr	r3, [pc, #24]	; (8003568 <MX_SPI2_Init+0x5c>)
 8003550:	220a      	movs	r2, #10
 8003552:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003554:	4804      	ldr	r0, [pc, #16]	; (8003568 <MX_SPI2_Init+0x5c>)
 8003556:	f009 f86f 	bl	800c638 <HAL_SPI_Init>
 800355a:	4603      	mov	r3, r0
 800355c:	2b00      	cmp	r3, #0
 800355e:	d001      	beq.n	8003564 <MX_SPI2_Init+0x58>
  {
    Error_Handler();
 8003560:	f7ff ff96 	bl	8003490 <Error_Handler>
  }

}
 8003564:	bf00      	nop
 8003566:	bd80      	pop	{r7, pc}
 8003568:	20000910 	.word	0x20000910
 800356c:	40003800 	.word	0x40003800

08003570 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b08c      	sub	sp, #48	; 0x30
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003578:	f107 031c 	add.w	r3, r7, #28
 800357c:	2200      	movs	r2, #0
 800357e:	601a      	str	r2, [r3, #0]
 8003580:	605a      	str	r2, [r3, #4]
 8003582:	609a      	str	r2, [r3, #8]
 8003584:	60da      	str	r2, [r3, #12]
 8003586:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a45      	ldr	r2, [pc, #276]	; (80036a4 <HAL_SPI_MspInit+0x134>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d12c      	bne.n	80035ec <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003592:	2300      	movs	r3, #0
 8003594:	61bb      	str	r3, [r7, #24]
 8003596:	4b44      	ldr	r3, [pc, #272]	; (80036a8 <HAL_SPI_MspInit+0x138>)
 8003598:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800359a:	4a43      	ldr	r2, [pc, #268]	; (80036a8 <HAL_SPI_MspInit+0x138>)
 800359c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80035a0:	6453      	str	r3, [r2, #68]	; 0x44
 80035a2:	4b41      	ldr	r3, [pc, #260]	; (80036a8 <HAL_SPI_MspInit+0x138>)
 80035a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80035aa:	61bb      	str	r3, [r7, #24]
 80035ac:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80035ae:	2300      	movs	r3, #0
 80035b0:	617b      	str	r3, [r7, #20]
 80035b2:	4b3d      	ldr	r3, [pc, #244]	; (80036a8 <HAL_SPI_MspInit+0x138>)
 80035b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035b6:	4a3c      	ldr	r2, [pc, #240]	; (80036a8 <HAL_SPI_MspInit+0x138>)
 80035b8:	f043 0302 	orr.w	r3, r3, #2
 80035bc:	6313      	str	r3, [r2, #48]	; 0x30
 80035be:	4b3a      	ldr	r3, [pc, #232]	; (80036a8 <HAL_SPI_MspInit+0x138>)
 80035c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035c2:	f003 0302 	and.w	r3, r3, #2
 80035c6:	617b      	str	r3, [r7, #20]
 80035c8:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SCK_Pin|MISO_Pin|MOSI_Pin;
 80035ca:	2338      	movs	r3, #56	; 0x38
 80035cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035ce:	2302      	movs	r3, #2
 80035d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035d2:	2300      	movs	r3, #0
 80035d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035d6:	2303      	movs	r3, #3
 80035d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80035da:	2305      	movs	r3, #5
 80035dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035de:	f107 031c 	add.w	r3, r7, #28
 80035e2:	4619      	mov	r1, r3
 80035e4:	4831      	ldr	r0, [pc, #196]	; (80036ac <HAL_SPI_MspInit+0x13c>)
 80035e6:	f008 f8c1 	bl	800b76c <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80035ea:	e057      	b.n	800369c <HAL_SPI_MspInit+0x12c>
  else if(spiHandle->Instance==SPI2)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a2f      	ldr	r2, [pc, #188]	; (80036b0 <HAL_SPI_MspInit+0x140>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d152      	bne.n	800369c <HAL_SPI_MspInit+0x12c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80035f6:	2300      	movs	r3, #0
 80035f8:	613b      	str	r3, [r7, #16]
 80035fa:	4b2b      	ldr	r3, [pc, #172]	; (80036a8 <HAL_SPI_MspInit+0x138>)
 80035fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035fe:	4a2a      	ldr	r2, [pc, #168]	; (80036a8 <HAL_SPI_MspInit+0x138>)
 8003600:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003604:	6413      	str	r3, [r2, #64]	; 0x40
 8003606:	4b28      	ldr	r3, [pc, #160]	; (80036a8 <HAL_SPI_MspInit+0x138>)
 8003608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800360a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800360e:	613b      	str	r3, [r7, #16]
 8003610:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003612:	2300      	movs	r3, #0
 8003614:	60fb      	str	r3, [r7, #12]
 8003616:	4b24      	ldr	r3, [pc, #144]	; (80036a8 <HAL_SPI_MspInit+0x138>)
 8003618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800361a:	4a23      	ldr	r2, [pc, #140]	; (80036a8 <HAL_SPI_MspInit+0x138>)
 800361c:	f043 0304 	orr.w	r3, r3, #4
 8003620:	6313      	str	r3, [r2, #48]	; 0x30
 8003622:	4b21      	ldr	r3, [pc, #132]	; (80036a8 <HAL_SPI_MspInit+0x138>)
 8003624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003626:	f003 0304 	and.w	r3, r3, #4
 800362a:	60fb      	str	r3, [r7, #12]
 800362c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800362e:	2300      	movs	r3, #0
 8003630:	60bb      	str	r3, [r7, #8]
 8003632:	4b1d      	ldr	r3, [pc, #116]	; (80036a8 <HAL_SPI_MspInit+0x138>)
 8003634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003636:	4a1c      	ldr	r2, [pc, #112]	; (80036a8 <HAL_SPI_MspInit+0x138>)
 8003638:	f043 0302 	orr.w	r3, r3, #2
 800363c:	6313      	str	r3, [r2, #48]	; 0x30
 800363e:	4b1a      	ldr	r3, [pc, #104]	; (80036a8 <HAL_SPI_MspInit+0x138>)
 8003640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003642:	f003 0302 	and.w	r3, r3, #2
 8003646:	60bb      	str	r3, [r7, #8]
 8003648:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = MISO_M_Pin|MOSI_M_Pin;
 800364a:	230c      	movs	r3, #12
 800364c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800364e:	2302      	movs	r3, #2
 8003650:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003652:	2300      	movs	r3, #0
 8003654:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003656:	2303      	movs	r3, #3
 8003658:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800365a:	2305      	movs	r3, #5
 800365c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800365e:	f107 031c 	add.w	r3, r7, #28
 8003662:	4619      	mov	r1, r3
 8003664:	4813      	ldr	r0, [pc, #76]	; (80036b4 <HAL_SPI_MspInit+0x144>)
 8003666:	f008 f881 	bl	800b76c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SCK_M_Pin;
 800366a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800366e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003670:	2302      	movs	r3, #2
 8003672:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003674:	2300      	movs	r3, #0
 8003676:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003678:	2303      	movs	r3, #3
 800367a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800367c:	2305      	movs	r3, #5
 800367e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SCK_M_GPIO_Port, &GPIO_InitStruct);
 8003680:	f107 031c 	add.w	r3, r7, #28
 8003684:	4619      	mov	r1, r3
 8003686:	4809      	ldr	r0, [pc, #36]	; (80036ac <HAL_SPI_MspInit+0x13c>)
 8003688:	f008 f870 	bl	800b76c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 800368c:	2200      	movs	r2, #0
 800368e:	2100      	movs	r1, #0
 8003690:	2024      	movs	r0, #36	; 0x24
 8003692:	f006 fc0d 	bl	8009eb0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8003696:	2024      	movs	r0, #36	; 0x24
 8003698:	f006 fc26 	bl	8009ee8 <HAL_NVIC_EnableIRQ>
}
 800369c:	bf00      	nop
 800369e:	3730      	adds	r7, #48	; 0x30
 80036a0:	46bd      	mov	sp, r7
 80036a2:	bd80      	pop	{r7, pc}
 80036a4:	40013000 	.word	0x40013000
 80036a8:	40023800 	.word	0x40023800
 80036ac:	40020400 	.word	0x40020400
 80036b0:	40003800 	.word	0x40003800
 80036b4:	40020800 	.word	0x40020800

080036b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80036b8:	b480      	push	{r7}
 80036ba:	b083      	sub	sp, #12
 80036bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036be:	2300      	movs	r3, #0
 80036c0:	607b      	str	r3, [r7, #4]
 80036c2:	4b10      	ldr	r3, [pc, #64]	; (8003704 <HAL_MspInit+0x4c>)
 80036c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036c6:	4a0f      	ldr	r2, [pc, #60]	; (8003704 <HAL_MspInit+0x4c>)
 80036c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80036cc:	6453      	str	r3, [r2, #68]	; 0x44
 80036ce:	4b0d      	ldr	r3, [pc, #52]	; (8003704 <HAL_MspInit+0x4c>)
 80036d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036d6:	607b      	str	r3, [r7, #4]
 80036d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80036da:	2300      	movs	r3, #0
 80036dc:	603b      	str	r3, [r7, #0]
 80036de:	4b09      	ldr	r3, [pc, #36]	; (8003704 <HAL_MspInit+0x4c>)
 80036e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e2:	4a08      	ldr	r2, [pc, #32]	; (8003704 <HAL_MspInit+0x4c>)
 80036e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036e8:	6413      	str	r3, [r2, #64]	; 0x40
 80036ea:	4b06      	ldr	r3, [pc, #24]	; (8003704 <HAL_MspInit+0x4c>)
 80036ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036f2:	603b      	str	r3, [r7, #0]
 80036f4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80036f6:	bf00      	nop
 80036f8:	370c      	adds	r7, #12
 80036fa:	46bd      	mov	sp, r7
 80036fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003700:	4770      	bx	lr
 8003702:	bf00      	nop
 8003704:	40023800 	.word	0x40023800

08003708 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b08c      	sub	sp, #48	; 0x30
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8003710:	2300      	movs	r3, #0
 8003712:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8003714:	2300      	movs	r3, #0
 8003716:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8003718:	2200      	movs	r2, #0
 800371a:	6879      	ldr	r1, [r7, #4]
 800371c:	2019      	movs	r0, #25
 800371e:	f006 fbc7 	bl	8009eb0 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8003722:	2019      	movs	r0, #25
 8003724:	f006 fbe0 	bl	8009ee8 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8003728:	2300      	movs	r3, #0
 800372a:	60fb      	str	r3, [r7, #12]
 800372c:	4b1f      	ldr	r3, [pc, #124]	; (80037ac <HAL_InitTick+0xa4>)
 800372e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003730:	4a1e      	ldr	r2, [pc, #120]	; (80037ac <HAL_InitTick+0xa4>)
 8003732:	f043 0301 	orr.w	r3, r3, #1
 8003736:	6453      	str	r3, [r2, #68]	; 0x44
 8003738:	4b1c      	ldr	r3, [pc, #112]	; (80037ac <HAL_InitTick+0xa4>)
 800373a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800373c:	f003 0301 	and.w	r3, r3, #1
 8003740:	60fb      	str	r3, [r7, #12]
 8003742:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003744:	f107 0210 	add.w	r2, r7, #16
 8003748:	f107 0314 	add.w	r3, r7, #20
 800374c:	4611      	mov	r1, r2
 800374e:	4618      	mov	r0, r3
 8003750:	f008 fe5e 	bl	800c410 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8003754:	f008 fe48 	bl	800c3e8 <HAL_RCC_GetPCLK2Freq>
 8003758:	4603      	mov	r3, r0
 800375a:	005b      	lsls	r3, r3, #1
 800375c:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800375e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003760:	4a13      	ldr	r2, [pc, #76]	; (80037b0 <HAL_InitTick+0xa8>)
 8003762:	fba2 2303 	umull	r2, r3, r2, r3
 8003766:	0c9b      	lsrs	r3, r3, #18
 8003768:	3b01      	subs	r3, #1
 800376a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800376c:	4b11      	ldr	r3, [pc, #68]	; (80037b4 <HAL_InitTick+0xac>)
 800376e:	4a12      	ldr	r2, [pc, #72]	; (80037b8 <HAL_InitTick+0xb0>)
 8003770:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8003772:	4b10      	ldr	r3, [pc, #64]	; (80037b4 <HAL_InitTick+0xac>)
 8003774:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003778:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800377a:	4a0e      	ldr	r2, [pc, #56]	; (80037b4 <HAL_InitTick+0xac>)
 800377c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800377e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8003780:	4b0c      	ldr	r3, [pc, #48]	; (80037b4 <HAL_InitTick+0xac>)
 8003782:	2200      	movs	r2, #0
 8003784:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003786:	4b0b      	ldr	r3, [pc, #44]	; (80037b4 <HAL_InitTick+0xac>)
 8003788:	2200      	movs	r2, #0
 800378a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 800378c:	4809      	ldr	r0, [pc, #36]	; (80037b4 <HAL_InitTick+0xac>)
 800378e:	f009 fb23 	bl	800cdd8 <HAL_TIM_Base_Init>
 8003792:	4603      	mov	r3, r0
 8003794:	2b00      	cmp	r3, #0
 8003796:	d104      	bne.n	80037a2 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8003798:	4806      	ldr	r0, [pc, #24]	; (80037b4 <HAL_InitTick+0xac>)
 800379a:	f009 fb48 	bl	800ce2e <HAL_TIM_Base_Start_IT>
 800379e:	4603      	mov	r3, r0
 80037a0:	e000      	b.n	80037a4 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80037a2:	2301      	movs	r3, #1
}
 80037a4:	4618      	mov	r0, r3
 80037a6:	3730      	adds	r7, #48	; 0x30
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd80      	pop	{r7, pc}
 80037ac:	40023800 	.word	0x40023800
 80037b0:	431bde83 	.word	0x431bde83
 80037b4:	200009c0 	.word	0x200009c0
 80037b8:	40010000 	.word	0x40010000

080037bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80037bc:	b480      	push	{r7}
 80037be:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80037c0:	bf00      	nop
 80037c2:	46bd      	mov	sp, r7
 80037c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c8:	4770      	bx	lr

080037ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80037ca:	b480      	push	{r7}
 80037cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80037ce:	e7fe      	b.n	80037ce <HardFault_Handler+0x4>

080037d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80037d0:	b480      	push	{r7}
 80037d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80037d4:	e7fe      	b.n	80037d4 <MemManage_Handler+0x4>

080037d6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80037d6:	b480      	push	{r7}
 80037d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80037da:	e7fe      	b.n	80037da <BusFault_Handler+0x4>

080037dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80037dc:	b480      	push	{r7}
 80037de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80037e0:	e7fe      	b.n	80037e0 <UsageFault_Handler+0x4>

080037e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80037e2:	b480      	push	{r7}
 80037e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80037e6:	bf00      	nop
 80037e8:	46bd      	mov	sp, r7
 80037ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ee:	4770      	bx	lr

080037f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80037f0:	b480      	push	{r7}
 80037f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80037f4:	bf00      	nop
 80037f6:	46bd      	mov	sp, r7
 80037f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fc:	4770      	bx	lr

080037fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80037fe:	b480      	push	{r7}
 8003800:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003802:	bf00      	nop
 8003804:	46bd      	mov	sp, r7
 8003806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380a:	4770      	bx	lr

0800380c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800380c:	b480      	push	{r7}
 800380e:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003810:	bf00      	nop
 8003812:	46bd      	mov	sp, r7
 8003814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003818:	4770      	bx	lr
	...

0800381c <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch4_up);
 8003820:	4802      	ldr	r0, [pc, #8]	; (800382c <DMA1_Stream2_IRQHandler+0x10>)
 8003822:	f006 fc97 	bl	800a154 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8003826:	bf00      	nop
 8003828:	bd80      	pop	{r7, pc}
 800382a:	bf00      	nop
 800382c:	20000be0 	.word	0x20000be0

08003830 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1_trig);
 8003834:	4802      	ldr	r0, [pc, #8]	; (8003840 <DMA1_Stream4_IRQHandler+0x10>)
 8003836:	f006 fc8d 	bl	800a154 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800383a:	bf00      	nop
 800383c:	bd80      	pop	{r7, pc}
 800383e:	bf00      	nop
 8003840:	20000ae0 	.word	0x20000ae0

08003844 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch2);
 8003848:	4802      	ldr	r0, [pc, #8]	; (8003854 <DMA1_Stream5_IRQHandler+0x10>)
 800384a:	f006 fc83 	bl	800a154 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800384e:	bf00      	nop
 8003850:	bd80      	pop	{r7, pc}
 8003852:	bf00      	nop
 8003854:	20000b40 	.word	0x20000b40

08003858 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 800385c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003860:	f008 f952 	bl	800bb08 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8003864:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003868:	f008 f94e 	bl	800bb08 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800386c:	bf00      	nop
 800386e:	bd80      	pop	{r7, pc}

08003870 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003874:	4802      	ldr	r0, [pc, #8]	; (8003880 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8003876:	f009 fca5 	bl	800d1c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800387a:	bf00      	nop
 800387c:	bd80      	pop	{r7, pc}
 800387e:	bf00      	nop
 8003880:	200009c0 	.word	0x200009c0

08003884 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8003888:	4802      	ldr	r0, [pc, #8]	; (8003894 <SPI2_IRQHandler+0x10>)
 800388a:	f009 f8db 	bl	800ca44 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 800388e:	bf00      	nop
 8003890:	bd80      	pop	{r7, pc}
 8003892:	bf00      	nop
 8003894:	20000910 	.word	0x20000910

08003898 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003898:	b480      	push	{r7}
 800389a:	b083      	sub	sp, #12
 800389c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	if(((huart1.Instance->SR & USART_SR_RXNE) != RESET) && ((huart1.Instance->CR1 & USART_CR1_RXNEIE) != RESET))
 800389e:	4b18      	ldr	r3, [pc, #96]	; (8003900 <USART1_IRQHandler+0x68>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f003 0320 	and.w	r3, r3, #32
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d022      	beq.n	80038f2 <USART1_IRQHandler+0x5a>
 80038ac:	4b14      	ldr	r3, [pc, #80]	; (8003900 <USART1_IRQHandler+0x68>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	68db      	ldr	r3, [r3, #12]
 80038b2:	f003 0320 	and.w	r3, r3, #32
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d01b      	beq.n	80038f2 <USART1_IRQHandler+0x5a>
	{
		uint8_t rbyte = (uint8_t)(huart1.Instance->DR & (uint8_t)0x00FF); // читает байт из регистра
 80038ba:	4b11      	ldr	r3, [pc, #68]	; (8003900 <USART1_IRQHandler+0x68>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	71fb      	strb	r3, [r7, #7]
		gsm_rx_buffer_index_t i = (uint16_t)(gsm_rx_buffer_head + 1) % GSM_RX_BUFFER_SIZE;
 80038c2:	4b10      	ldr	r3, [pc, #64]	; (8003904 <USART1_IRQHandler+0x6c>)
 80038c4:	781b      	ldrb	r3, [r3, #0]
 80038c6:	b2db      	uxtb	r3, r3
 80038c8:	3301      	adds	r3, #1
 80038ca:	b2db      	uxtb	r3, r3
 80038cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80038d0:	71bb      	strb	r3, [r7, #6]

		if(i != gsm_rx_buffer_tail)
 80038d2:	4b0d      	ldr	r3, [pc, #52]	; (8003908 <USART1_IRQHandler+0x70>)
 80038d4:	781b      	ldrb	r3, [r3, #0]
 80038d6:	b2db      	uxtb	r3, r3
 80038d8:	79ba      	ldrb	r2, [r7, #6]
 80038da:	429a      	cmp	r2, r3
 80038dc:	d009      	beq.n	80038f2 <USART1_IRQHandler+0x5a>
		{
			gsm_rx_buffer[gsm_rx_buffer_head] = rbyte;
 80038de:	4b09      	ldr	r3, [pc, #36]	; (8003904 <USART1_IRQHandler+0x6c>)
 80038e0:	781b      	ldrb	r3, [r3, #0]
 80038e2:	b2db      	uxtb	r3, r3
 80038e4:	4619      	mov	r1, r3
 80038e6:	4a09      	ldr	r2, [pc, #36]	; (800390c <USART1_IRQHandler+0x74>)
 80038e8:	79fb      	ldrb	r3, [r7, #7]
 80038ea:	5453      	strb	r3, [r2, r1]
			gsm_rx_buffer_head = i;
 80038ec:	4a05      	ldr	r2, [pc, #20]	; (8003904 <USART1_IRQHandler+0x6c>)
 80038ee:	79bb      	ldrb	r3, [r7, #6]
 80038f0:	7013      	strb	r3, [r2, #0]
		}
	}

	return;
 80038f2:	bf00      	nop
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80038f4:	370c      	adds	r7, #12
 80038f6:	46bd      	mov	sp, r7
 80038f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fc:	4770      	bx	lr
 80038fe:	bf00      	nop
 8003900:	20000c80 	.word	0x20000c80
 8003904:	20000338 	.word	0x20000338
 8003908:	20000339 	.word	0x20000339
 800390c:	2000033c 	.word	0x2000033c

08003910 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003910:	b480      	push	{r7}
 8003912:	b083      	sub	sp, #12
 8003914:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	if(((huart2.Instance->SR & USART_SR_RXNE) != RESET) && ((huart2.Instance->CR1 & USART_CR1_RXNEIE) != RESET))
 8003916:	4b18      	ldr	r3, [pc, #96]	; (8003978 <USART2_IRQHandler+0x68>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f003 0320 	and.w	r3, r3, #32
 8003920:	2b00      	cmp	r3, #0
 8003922:	d022      	beq.n	800396a <USART2_IRQHandler+0x5a>
 8003924:	4b14      	ldr	r3, [pc, #80]	; (8003978 <USART2_IRQHandler+0x68>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	68db      	ldr	r3, [r3, #12]
 800392a:	f003 0320 	and.w	r3, r3, #32
 800392e:	2b00      	cmp	r3, #0
 8003930:	d01b      	beq.n	800396a <USART2_IRQHandler+0x5a>
	{
		uint8_t rbyte = (uint8_t)(huart2.Instance->DR & (uint8_t)0x00FF); // читает байт из регистра
 8003932:	4b11      	ldr	r3, [pc, #68]	; (8003978 <USART2_IRQHandler+0x68>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	71fb      	strb	r3, [r7, #7]
		rs485_rx_buffer_index_t i = (uint16_t)(rs485_rx_buffer_head + 1) % RS485_RX_BUFFER_SIZE;
 800393a:	4b10      	ldr	r3, [pc, #64]	; (800397c <USART2_IRQHandler+0x6c>)
 800393c:	781b      	ldrb	r3, [r3, #0]
 800393e:	b2db      	uxtb	r3, r3
 8003940:	3301      	adds	r3, #1
 8003942:	b2db      	uxtb	r3, r3
 8003944:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003948:	71bb      	strb	r3, [r7, #6]

		if(i != rs485_rx_buffer_tail)
 800394a:	4b0d      	ldr	r3, [pc, #52]	; (8003980 <USART2_IRQHandler+0x70>)
 800394c:	781b      	ldrb	r3, [r3, #0]
 800394e:	b2db      	uxtb	r3, r3
 8003950:	79ba      	ldrb	r2, [r7, #6]
 8003952:	429a      	cmp	r2, r3
 8003954:	d009      	beq.n	800396a <USART2_IRQHandler+0x5a>
		{
			rs485_rx_buffer[rs485_rx_buffer_head] = rbyte;
 8003956:	4b09      	ldr	r3, [pc, #36]	; (800397c <USART2_IRQHandler+0x6c>)
 8003958:	781b      	ldrb	r3, [r3, #0]
 800395a:	b2db      	uxtb	r3, r3
 800395c:	4619      	mov	r1, r3
 800395e:	4a09      	ldr	r2, [pc, #36]	; (8003984 <USART2_IRQHandler+0x74>)
 8003960:	79fb      	ldrb	r3, [r7, #7]
 8003962:	5453      	strb	r3, [r2, r1]
			rs485_rx_buffer_head = i;
 8003964:	4a05      	ldr	r2, [pc, #20]	; (800397c <USART2_IRQHandler+0x6c>)
 8003966:	79bb      	ldrb	r3, [r7, #6]
 8003968:	7013      	strb	r3, [r2, #0]
		}
	}

	return;
 800396a:	bf00      	nop
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800396c:	370c      	adds	r7, #12
 800396e:	46bd      	mov	sp, r7
 8003970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003974:	4770      	bx	lr
 8003976:	bf00      	nop
 8003978:	20000cc0 	.word	0x20000cc0
 800397c:	200003c0 	.word	0x200003c0
 8003980:	200003c1 	.word	0x200003c1
 8003984:	200003c4 	.word	0x200003c4

08003988 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003988:	b480      	push	{r7}
 800398a:	b083      	sub	sp, #12
 800398c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
//Раскоментить для дебага по USART(кроме отладки по Ethernet)

	if(((huart3.Instance->SR & USART_SR_RXNE) != RESET) && ((huart3.Instance->CR1 & USART_CR1_RXNEIE) != RESET))
 800398e:	4b18      	ldr	r3, [pc, #96]	; (80039f0 <USART3_IRQHandler+0x68>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f003 0320 	and.w	r3, r3, #32
 8003998:	2b00      	cmp	r3, #0
 800399a:	d022      	beq.n	80039e2 <USART3_IRQHandler+0x5a>
 800399c:	4b14      	ldr	r3, [pc, #80]	; (80039f0 <USART3_IRQHandler+0x68>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	68db      	ldr	r3, [r3, #12]
 80039a2:	f003 0320 	and.w	r3, r3, #32
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d01b      	beq.n	80039e2 <USART3_IRQHandler+0x5a>
	{
		uint8_t rbyte = (uint8_t)(huart3.Instance->DR & (uint8_t)0x00FF); // читает байт из регистра
 80039aa:	4b11      	ldr	r3, [pc, #68]	; (80039f0 <USART3_IRQHandler+0x68>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	71fb      	strb	r3, [r7, #7]
		dbg_rx_buffer_index_t i = (uint16_t)(dbg_rx_buffer_head + 1) % DBG_RX_BUFFER_SIZE;
 80039b2:	4b10      	ldr	r3, [pc, #64]	; (80039f4 <USART3_IRQHandler+0x6c>)
 80039b4:	781b      	ldrb	r3, [r3, #0]
 80039b6:	b2db      	uxtb	r3, r3
 80039b8:	3301      	adds	r3, #1
 80039ba:	b2db      	uxtb	r3, r3
 80039bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80039c0:	71bb      	strb	r3, [r7, #6]

		if(i != dbg_rx_buffer_tail)
 80039c2:	4b0d      	ldr	r3, [pc, #52]	; (80039f8 <USART3_IRQHandler+0x70>)
 80039c4:	781b      	ldrb	r3, [r3, #0]
 80039c6:	b2db      	uxtb	r3, r3
 80039c8:	79ba      	ldrb	r2, [r7, #6]
 80039ca:	429a      	cmp	r2, r3
 80039cc:	d009      	beq.n	80039e2 <USART3_IRQHandler+0x5a>
		{
			dbg_rx_buffer[dbg_rx_buffer_head] = rbyte;
 80039ce:	4b09      	ldr	r3, [pc, #36]	; (80039f4 <USART3_IRQHandler+0x6c>)
 80039d0:	781b      	ldrb	r3, [r3, #0]
 80039d2:	b2db      	uxtb	r3, r3
 80039d4:	4619      	mov	r1, r3
 80039d6:	4a09      	ldr	r2, [pc, #36]	; (80039fc <USART3_IRQHandler+0x74>)
 80039d8:	79fb      	ldrb	r3, [r7, #7]
 80039da:	5453      	strb	r3, [r2, r1]
			dbg_rx_buffer_head = i;
 80039dc:	4a05      	ldr	r2, [pc, #20]	; (80039f4 <USART3_IRQHandler+0x6c>)
 80039de:	79bb      	ldrb	r3, [r7, #6]
 80039e0:	7013      	strb	r3, [r2, #0]
		}
	}

	return;
 80039e2:	bf00      	nop
  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80039e4:	370c      	adds	r7, #12
 80039e6:	46bd      	mov	sp, r7
 80039e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ec:	4770      	bx	lr
 80039ee:	bf00      	nop
 80039f0:	20000c40 	.word	0x20000c40
 80039f4:	2000037c 	.word	0x2000037c
 80039f8:	2000037d 	.word	0x2000037d
 80039fc:	20000380 	.word	0x20000380

08003a00 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8003a04:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8003a08:	f008 f87e 	bl	800bb08 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8003a0c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8003a10:	f008 f87a 	bl	800bb08 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8003a14:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003a18:	f008 f876 	bl	800bb08 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8003a1c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003a20:	f008 f872 	bl	800bb08 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8003a24:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003a28:	f008 f86e 	bl	800bb08 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8003a2c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8003a30:	f008 f86a 	bl	800bb08 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003a34:	bf00      	nop
 8003a36:	bd80      	pop	{r7, pc}

08003a38 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch3);
 8003a3c:	4802      	ldr	r0, [pc, #8]	; (8003a48 <DMA1_Stream7_IRQHandler+0x10>)
 8003a3e:	f006 fb89 	bl	800a154 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8003a42:	bf00      	nop
 8003a44:	bd80      	pop	{r7, pc}
 8003a46:	bf00      	nop
 8003a48:	20000a40 	.word	0x20000a40

08003a4c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003a50:	4802      	ldr	r0, [pc, #8]	; (8003a5c <TIM6_DAC_IRQHandler+0x10>)
 8003a52:	f009 fbb7 	bl	800d1c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003a56:	bf00      	nop
 8003a58:	bd80      	pop	{r7, pc}
 8003a5a:	bf00      	nop
 8003a5c:	20000ba0 	.word	0x20000ba0

08003a60 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003a64:	4802      	ldr	r0, [pc, #8]	; (8003a70 <DMA2_Stream0_IRQHandler+0x10>)
 8003a66:	f006 fb75 	bl	800a154 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003a6a:	bf00      	nop
 8003a6c:	bd80      	pop	{r7, pc}
 8003a6e:	bf00      	nop
 8003a70:	200008b0 	.word	0x200008b0

08003a74 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003a74:	b480      	push	{r7}
 8003a76:	af00      	add	r7, sp, #0
	return 1;
 8003a78:	2301      	movs	r3, #1
}
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a82:	4770      	bx	lr

08003a84 <_kill>:

int _kill(int pid, int sig)
{
 8003a84:	b480      	push	{r7}
 8003a86:	b083      	sub	sp, #12
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
 8003a8c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003a8e:	4b05      	ldr	r3, [pc, #20]	; (8003aa4 <_kill+0x20>)
 8003a90:	2216      	movs	r2, #22
 8003a92:	601a      	str	r2, [r3, #0]
	return -1;
 8003a94:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003a98:	4618      	mov	r0, r3
 8003a9a:	370c      	adds	r7, #12
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa2:	4770      	bx	lr
 8003aa4:	20007674 	.word	0x20007674

08003aa8 <_exit>:

void _exit (int status)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b082      	sub	sp, #8
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003ab0:	f04f 31ff 	mov.w	r1, #4294967295
 8003ab4:	6878      	ldr	r0, [r7, #4]
 8003ab6:	f7ff ffe5 	bl	8003a84 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003aba:	e7fe      	b.n	8003aba <_exit+0x12>

08003abc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b086      	sub	sp, #24
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	60f8      	str	r0, [r7, #12]
 8003ac4:	60b9      	str	r1, [r7, #8]
 8003ac6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ac8:	2300      	movs	r3, #0
 8003aca:	617b      	str	r3, [r7, #20]
 8003acc:	e00a      	b.n	8003ae4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003ace:	f3af 8000 	nop.w
 8003ad2:	4601      	mov	r1, r0
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	1c5a      	adds	r2, r3, #1
 8003ad8:	60ba      	str	r2, [r7, #8]
 8003ada:	b2ca      	uxtb	r2, r1
 8003adc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ade:	697b      	ldr	r3, [r7, #20]
 8003ae0:	3301      	adds	r3, #1
 8003ae2:	617b      	str	r3, [r7, #20]
 8003ae4:	697a      	ldr	r2, [r7, #20]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	429a      	cmp	r2, r3
 8003aea:	dbf0      	blt.n	8003ace <_read+0x12>
	}

return len;
 8003aec:	687b      	ldr	r3, [r7, #4]
}
 8003aee:	4618      	mov	r0, r3
 8003af0:	3718      	adds	r7, #24
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bd80      	pop	{r7, pc}

08003af6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003af6:	b580      	push	{r7, lr}
 8003af8:	b086      	sub	sp, #24
 8003afa:	af00      	add	r7, sp, #0
 8003afc:	60f8      	str	r0, [r7, #12]
 8003afe:	60b9      	str	r1, [r7, #8]
 8003b00:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b02:	2300      	movs	r3, #0
 8003b04:	617b      	str	r3, [r7, #20]
 8003b06:	e009      	b.n	8003b1c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	1c5a      	adds	r2, r3, #1
 8003b0c:	60ba      	str	r2, [r7, #8]
 8003b0e:	781b      	ldrb	r3, [r3, #0]
 8003b10:	4618      	mov	r0, r3
 8003b12:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b16:	697b      	ldr	r3, [r7, #20]
 8003b18:	3301      	adds	r3, #1
 8003b1a:	617b      	str	r3, [r7, #20]
 8003b1c:	697a      	ldr	r2, [r7, #20]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	429a      	cmp	r2, r3
 8003b22:	dbf1      	blt.n	8003b08 <_write+0x12>
	}
	return len;
 8003b24:	687b      	ldr	r3, [r7, #4]
}
 8003b26:	4618      	mov	r0, r3
 8003b28:	3718      	adds	r7, #24
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bd80      	pop	{r7, pc}

08003b2e <_close>:

int _close(int file)
{
 8003b2e:	b480      	push	{r7}
 8003b30:	b083      	sub	sp, #12
 8003b32:	af00      	add	r7, sp, #0
 8003b34:	6078      	str	r0, [r7, #4]
	return -1;
 8003b36:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	370c      	adds	r7, #12
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b44:	4770      	bx	lr

08003b46 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003b46:	b480      	push	{r7}
 8003b48:	b083      	sub	sp, #12
 8003b4a:	af00      	add	r7, sp, #0
 8003b4c:	6078      	str	r0, [r7, #4]
 8003b4e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003b56:	605a      	str	r2, [r3, #4]
	return 0;
 8003b58:	2300      	movs	r3, #0
}
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	370c      	adds	r7, #12
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b64:	4770      	bx	lr

08003b66 <_isatty>:

int _isatty(int file)
{
 8003b66:	b480      	push	{r7}
 8003b68:	b083      	sub	sp, #12
 8003b6a:	af00      	add	r7, sp, #0
 8003b6c:	6078      	str	r0, [r7, #4]
	return 1;
 8003b6e:	2301      	movs	r3, #1
}
 8003b70:	4618      	mov	r0, r3
 8003b72:	370c      	adds	r7, #12
 8003b74:	46bd      	mov	sp, r7
 8003b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7a:	4770      	bx	lr

08003b7c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	b085      	sub	sp, #20
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	60f8      	str	r0, [r7, #12]
 8003b84:	60b9      	str	r1, [r7, #8]
 8003b86:	607a      	str	r2, [r7, #4]
	return 0;
 8003b88:	2300      	movs	r3, #0
}
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	3714      	adds	r7, #20
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b94:	4770      	bx	lr
	...

08003b98 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	b087      	sub	sp, #28
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003ba0:	4a14      	ldr	r2, [pc, #80]	; (8003bf4 <_sbrk+0x5c>)
 8003ba2:	4b15      	ldr	r3, [pc, #84]	; (8003bf8 <_sbrk+0x60>)
 8003ba4:	1ad3      	subs	r3, r2, r3
 8003ba6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003ba8:	697b      	ldr	r3, [r7, #20]
 8003baa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003bac:	4b13      	ldr	r3, [pc, #76]	; (8003bfc <_sbrk+0x64>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d102      	bne.n	8003bba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003bb4:	4b11      	ldr	r3, [pc, #68]	; (8003bfc <_sbrk+0x64>)
 8003bb6:	4a12      	ldr	r2, [pc, #72]	; (8003c00 <_sbrk+0x68>)
 8003bb8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003bba:	4b10      	ldr	r3, [pc, #64]	; (8003bfc <_sbrk+0x64>)
 8003bbc:	681a      	ldr	r2, [r3, #0]
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	4413      	add	r3, r2
 8003bc2:	693a      	ldr	r2, [r7, #16]
 8003bc4:	429a      	cmp	r2, r3
 8003bc6:	d205      	bcs.n	8003bd4 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8003bc8:	4b0e      	ldr	r3, [pc, #56]	; (8003c04 <_sbrk+0x6c>)
 8003bca:	220c      	movs	r2, #12
 8003bcc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003bce:	f04f 33ff 	mov.w	r3, #4294967295
 8003bd2:	e009      	b.n	8003be8 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8003bd4:	4b09      	ldr	r3, [pc, #36]	; (8003bfc <_sbrk+0x64>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003bda:	4b08      	ldr	r3, [pc, #32]	; (8003bfc <_sbrk+0x64>)
 8003bdc:	681a      	ldr	r2, [r3, #0]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	4413      	add	r3, r2
 8003be2:	4a06      	ldr	r2, [pc, #24]	; (8003bfc <_sbrk+0x64>)
 8003be4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003be6:	68fb      	ldr	r3, [r7, #12]
}
 8003be8:	4618      	mov	r0, r3
 8003bea:	371c      	adds	r7, #28
 8003bec:	46bd      	mov	sp, r7
 8003bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf2:	4770      	bx	lr
 8003bf4:	20020000 	.word	0x20020000
 8003bf8:	00004000 	.word	0x00004000
 8003bfc:	20000334 	.word	0x20000334
 8003c00:	20007688 	.word	0x20007688
 8003c04:	20007674 	.word	0x20007674

08003c08 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003c0c:	4b08      	ldr	r3, [pc, #32]	; (8003c30 <SystemInit+0x28>)
 8003c0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c12:	4a07      	ldr	r2, [pc, #28]	; (8003c30 <SystemInit+0x28>)
 8003c14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003c18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003c1c:	4b04      	ldr	r3, [pc, #16]	; (8003c30 <SystemInit+0x28>)
 8003c1e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003c22:	609a      	str	r2, [r3, #8]
#endif
}
 8003c24:	bf00      	nop
 8003c26:	46bd      	mov	sp, r7
 8003c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2c:	4770      	bx	lr
 8003c2e:	bf00      	nop
 8003c30:	e000ed00 	.word	0xe000ed00

08003c34 <MX_TIM3_Init>:
DMA_HandleTypeDef hdma_tim3_ch3;
DMA_HandleTypeDef hdma_tim3_ch4_up;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b08a      	sub	sp, #40	; 0x28
 8003c38:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003c3a:	f107 0320 	add.w	r3, r7, #32
 8003c3e:	2200      	movs	r2, #0
 8003c40:	601a      	str	r2, [r3, #0]
 8003c42:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003c44:	1d3b      	adds	r3, r7, #4
 8003c46:	2200      	movs	r2, #0
 8003c48:	601a      	str	r2, [r3, #0]
 8003c4a:	605a      	str	r2, [r3, #4]
 8003c4c:	609a      	str	r2, [r3, #8]
 8003c4e:	60da      	str	r2, [r3, #12]
 8003c50:	611a      	str	r2, [r3, #16]
 8003c52:	615a      	str	r2, [r3, #20]
 8003c54:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 8003c56:	4b33      	ldr	r3, [pc, #204]	; (8003d24 <MX_TIM3_Init+0xf0>)
 8003c58:	4a33      	ldr	r2, [pc, #204]	; (8003d28 <MX_TIM3_Init+0xf4>)
 8003c5a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 3;
 8003c5c:	4b31      	ldr	r3, [pc, #196]	; (8003d24 <MX_TIM3_Init+0xf0>)
 8003c5e:	2203      	movs	r2, #3
 8003c60:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003c62:	4b30      	ldr	r3, [pc, #192]	; (8003d24 <MX_TIM3_Init+0xf0>)
 8003c64:	2200      	movs	r2, #0
 8003c66:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000;
 8003c68:	4b2e      	ldr	r3, [pc, #184]	; (8003d24 <MX_TIM3_Init+0xf0>)
 8003c6a:	f242 7210 	movw	r2, #10000	; 0x2710
 8003c6e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003c70:	4b2c      	ldr	r3, [pc, #176]	; (8003d24 <MX_TIM3_Init+0xf0>)
 8003c72:	2200      	movs	r2, #0
 8003c74:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003c76:	4b2b      	ldr	r3, [pc, #172]	; (8003d24 <MX_TIM3_Init+0xf0>)
 8003c78:	2200      	movs	r2, #0
 8003c7a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003c7c:	4829      	ldr	r0, [pc, #164]	; (8003d24 <MX_TIM3_Init+0xf0>)
 8003c7e:	f009 f963 	bl	800cf48 <HAL_TIM_PWM_Init>
 8003c82:	4603      	mov	r3, r0
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d001      	beq.n	8003c8c <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8003c88:	f7ff fc02 	bl	8003490 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003c90:	2300      	movs	r3, #0
 8003c92:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003c94:	f107 0320 	add.w	r3, r7, #32
 8003c98:	4619      	mov	r1, r3
 8003c9a:	4822      	ldr	r0, [pc, #136]	; (8003d24 <MX_TIM3_Init+0xf0>)
 8003c9c:	f009 fff4 	bl	800dc88 <HAL_TIMEx_MasterConfigSynchronization>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d001      	beq.n	8003caa <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8003ca6:	f7ff fbf3 	bl	8003490 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003caa:	2360      	movs	r3, #96	; 0x60
 8003cac:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1000;
 8003cae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003cb2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8003cb8:	2304      	movs	r3, #4
 8003cba:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003cbc:	1d3b      	adds	r3, r7, #4
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	4619      	mov	r1, r3
 8003cc2:	4818      	ldr	r0, [pc, #96]	; (8003d24 <MX_TIM3_Init+0xf0>)
 8003cc4:	f009 fbe6 	bl	800d494 <HAL_TIM_PWM_ConfigChannel>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d001      	beq.n	8003cd2 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8003cce:	f7ff fbdf 	bl	8003490 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003cd2:	1d3b      	adds	r3, r7, #4
 8003cd4:	2204      	movs	r2, #4
 8003cd6:	4619      	mov	r1, r3
 8003cd8:	4812      	ldr	r0, [pc, #72]	; (8003d24 <MX_TIM3_Init+0xf0>)
 8003cda:	f009 fbdb 	bl	800d494 <HAL_TIM_PWM_ConfigChannel>
 8003cde:	4603      	mov	r3, r0
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d001      	beq.n	8003ce8 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8003ce4:	f7ff fbd4 	bl	8003490 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003ce8:	1d3b      	adds	r3, r7, #4
 8003cea:	2208      	movs	r2, #8
 8003cec:	4619      	mov	r1, r3
 8003cee:	480d      	ldr	r0, [pc, #52]	; (8003d24 <MX_TIM3_Init+0xf0>)
 8003cf0:	f009 fbd0 	bl	800d494 <HAL_TIM_PWM_ConfigChannel>
 8003cf4:	4603      	mov	r3, r0
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d001      	beq.n	8003cfe <MX_TIM3_Init+0xca>
  {
    Error_Handler();
 8003cfa:	f7ff fbc9 	bl	8003490 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003cfe:	1d3b      	adds	r3, r7, #4
 8003d00:	220c      	movs	r2, #12
 8003d02:	4619      	mov	r1, r3
 8003d04:	4807      	ldr	r0, [pc, #28]	; (8003d24 <MX_TIM3_Init+0xf0>)
 8003d06:	f009 fbc5 	bl	800d494 <HAL_TIM_PWM_ConfigChannel>
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d001      	beq.n	8003d14 <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 8003d10:	f7ff fbbe 	bl	8003490 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 8003d14:	4803      	ldr	r0, [pc, #12]	; (8003d24 <MX_TIM3_Init+0xf0>)
 8003d16:	f000 f9df 	bl	80040d8 <HAL_TIM_MspPostInit>

}
 8003d1a:	bf00      	nop
 8003d1c:	3728      	adds	r7, #40	; 0x28
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd80      	pop	{r7, pc}
 8003d22:	bf00      	nop
 8003d24:	20000aa0 	.word	0x20000aa0
 8003d28:	40000400 	.word	0x40000400

08003d2c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b08a      	sub	sp, #40	; 0x28
 8003d30:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003d32:	f107 0320 	add.w	r3, r7, #32
 8003d36:	2200      	movs	r2, #0
 8003d38:	601a      	str	r2, [r3, #0]
 8003d3a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003d3c:	1d3b      	adds	r3, r7, #4
 8003d3e:	2200      	movs	r2, #0
 8003d40:	601a      	str	r2, [r3, #0]
 8003d42:	605a      	str	r2, [r3, #4]
 8003d44:	609a      	str	r2, [r3, #8]
 8003d46:	60da      	str	r2, [r3, #12]
 8003d48:	611a      	str	r2, [r3, #16]
 8003d4a:	615a      	str	r2, [r3, #20]
 8003d4c:	619a      	str	r2, [r3, #24]

  htim4.Instance = TIM4;
 8003d4e:	4b20      	ldr	r3, [pc, #128]	; (8003dd0 <MX_TIM4_Init+0xa4>)
 8003d50:	4a20      	ldr	r2, [pc, #128]	; (8003dd4 <MX_TIM4_Init+0xa8>)
 8003d52:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8003d54:	4b1e      	ldr	r3, [pc, #120]	; (8003dd0 <MX_TIM4_Init+0xa4>)
 8003d56:	2200      	movs	r2, #0
 8003d58:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003d5a:	4b1d      	ldr	r3, [pc, #116]	; (8003dd0 <MX_TIM4_Init+0xa4>)
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65000;
 8003d60:	4b1b      	ldr	r3, [pc, #108]	; (8003dd0 <MX_TIM4_Init+0xa4>)
 8003d62:	f64f 52e8 	movw	r2, #65000	; 0xfde8
 8003d66:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003d68:	4b19      	ldr	r3, [pc, #100]	; (8003dd0 <MX_TIM4_Init+0xa4>)
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003d6e:	4b18      	ldr	r3, [pc, #96]	; (8003dd0 <MX_TIM4_Init+0xa4>)
 8003d70:	2200      	movs	r2, #0
 8003d72:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 8003d74:	4816      	ldr	r0, [pc, #88]	; (8003dd0 <MX_TIM4_Init+0xa4>)
 8003d76:	f009 f87e 	bl	800ce76 <HAL_TIM_OC_Init>
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d001      	beq.n	8003d84 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8003d80:	f7ff fb86 	bl	8003490 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003d84:	2300      	movs	r3, #0
 8003d86:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003d88:	2300      	movs	r3, #0
 8003d8a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003d8c:	f107 0320 	add.w	r3, r7, #32
 8003d90:	4619      	mov	r1, r3
 8003d92:	480f      	ldr	r0, [pc, #60]	; (8003dd0 <MX_TIM4_Init+0xa4>)
 8003d94:	f009 ff78 	bl	800dc88 <HAL_TIMEx_MasterConfigSynchronization>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d001      	beq.n	8003da2 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8003d9e:	f7ff fb77 	bl	8003490 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8003da2:	2330      	movs	r3, #48	; 0x30
 8003da4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003da6:	2300      	movs	r3, #0
 8003da8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003daa:	2300      	movs	r3, #0
 8003dac:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003dae:	2300      	movs	r3, #0
 8003db0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003db2:	1d3b      	adds	r3, r7, #4
 8003db4:	220c      	movs	r2, #12
 8003db6:	4619      	mov	r1, r3
 8003db8:	4805      	ldr	r0, [pc, #20]	; (8003dd0 <MX_TIM4_Init+0xa4>)
 8003dba:	f009 fb0b 	bl	800d3d4 <HAL_TIM_OC_ConfigChannel>
 8003dbe:	4603      	mov	r3, r0
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d001      	beq.n	8003dc8 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8003dc4:	f7ff fb64 	bl	8003490 <Error_Handler>
  }

}
 8003dc8:	bf00      	nop
 8003dca:	3728      	adds	r7, #40	; 0x28
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	bd80      	pop	{r7, pc}
 8003dd0:	20000a00 	.word	0x20000a00
 8003dd4:	40000800 	.word	0x40000800

08003dd8 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b082      	sub	sp, #8
 8003ddc:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003dde:	463b      	mov	r3, r7
 8003de0:	2200      	movs	r2, #0
 8003de2:	601a      	str	r2, [r3, #0]
 8003de4:	605a      	str	r2, [r3, #4]

  htim6.Instance = TIM6;
 8003de6:	4b15      	ldr	r3, [pc, #84]	; (8003e3c <MX_TIM6_Init+0x64>)
 8003de8:	4a15      	ldr	r2, [pc, #84]	; (8003e40 <MX_TIM6_Init+0x68>)
 8003dea:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 83;
 8003dec:	4b13      	ldr	r3, [pc, #76]	; (8003e3c <MX_TIM6_Init+0x64>)
 8003dee:	2253      	movs	r2, #83	; 0x53
 8003df0:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003df2:	4b12      	ldr	r3, [pc, #72]	; (8003e3c <MX_TIM6_Init+0x64>)
 8003df4:	2200      	movs	r2, #0
 8003df6:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 49999;
 8003df8:	4b10      	ldr	r3, [pc, #64]	; (8003e3c <MX_TIM6_Init+0x64>)
 8003dfa:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8003dfe:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003e00:	4b0e      	ldr	r3, [pc, #56]	; (8003e3c <MX_TIM6_Init+0x64>)
 8003e02:	2200      	movs	r2, #0
 8003e04:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003e06:	480d      	ldr	r0, [pc, #52]	; (8003e3c <MX_TIM6_Init+0x64>)
 8003e08:	f008 ffe6 	bl	800cdd8 <HAL_TIM_Base_Init>
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d001      	beq.n	8003e16 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8003e12:	f7ff fb3d 	bl	8003490 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003e16:	2300      	movs	r3, #0
 8003e18:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8003e1e:	463b      	mov	r3, r7
 8003e20:	4619      	mov	r1, r3
 8003e22:	4806      	ldr	r0, [pc, #24]	; (8003e3c <MX_TIM6_Init+0x64>)
 8003e24:	f009 ff30 	bl	800dc88 <HAL_TIMEx_MasterConfigSynchronization>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d001      	beq.n	8003e32 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8003e2e:	f7ff fb2f 	bl	8003490 <Error_Handler>
  }

}
 8003e32:	bf00      	nop
 8003e34:	3708      	adds	r7, #8
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bd80      	pop	{r7, pc}
 8003e3a:	bf00      	nop
 8003e3c:	20000ba0 	.word	0x20000ba0
 8003e40:	40001000 	.word	0x40001000

08003e44 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b084      	sub	sp, #16
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4a72      	ldr	r2, [pc, #456]	; (800401c <HAL_TIM_PWM_MspInit+0x1d8>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	f040 80de 	bne.w	8004014 <HAL_TIM_PWM_MspInit+0x1d0>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003e58:	2300      	movs	r3, #0
 8003e5a:	60fb      	str	r3, [r7, #12]
 8003e5c:	4b70      	ldr	r3, [pc, #448]	; (8004020 <HAL_TIM_PWM_MspInit+0x1dc>)
 8003e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e60:	4a6f      	ldr	r2, [pc, #444]	; (8004020 <HAL_TIM_PWM_MspInit+0x1dc>)
 8003e62:	f043 0302 	orr.w	r3, r3, #2
 8003e66:	6413      	str	r3, [r2, #64]	; 0x40
 8003e68:	4b6d      	ldr	r3, [pc, #436]	; (8004020 <HAL_TIM_PWM_MspInit+0x1dc>)
 8003e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e6c:	f003 0302 	and.w	r3, r3, #2
 8003e70:	60fb      	str	r3, [r7, #12]
 8003e72:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 DMA Init */
    /* TIM3_CH1_TRIG Init */
    hdma_tim3_ch1_trig.Instance = DMA1_Stream4;
 8003e74:	4b6b      	ldr	r3, [pc, #428]	; (8004024 <HAL_TIM_PWM_MspInit+0x1e0>)
 8003e76:	4a6c      	ldr	r2, [pc, #432]	; (8004028 <HAL_TIM_PWM_MspInit+0x1e4>)
 8003e78:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1_trig.Init.Channel = DMA_CHANNEL_5;
 8003e7a:	4b6a      	ldr	r3, [pc, #424]	; (8004024 <HAL_TIM_PWM_MspInit+0x1e0>)
 8003e7c:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8003e80:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1_trig.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003e82:	4b68      	ldr	r3, [pc, #416]	; (8004024 <HAL_TIM_PWM_MspInit+0x1e0>)
 8003e84:	2240      	movs	r2, #64	; 0x40
 8003e86:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 8003e88:	4b66      	ldr	r3, [pc, #408]	; (8004024 <HAL_TIM_PWM_MspInit+0x1e0>)
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1_trig.Init.MemInc = DMA_MINC_ENABLE;
 8003e8e:	4b65      	ldr	r3, [pc, #404]	; (8004024 <HAL_TIM_PWM_MspInit+0x1e0>)
 8003e90:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003e94:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003e96:	4b63      	ldr	r3, [pc, #396]	; (8004024 <HAL_TIM_PWM_MspInit+0x1e0>)
 8003e98:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003e9c:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1_trig.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003e9e:	4b61      	ldr	r3, [pc, #388]	; (8004024 <HAL_TIM_PWM_MspInit+0x1e0>)
 8003ea0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003ea4:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1_trig.Init.Mode = DMA_CIRCULAR;
 8003ea6:	4b5f      	ldr	r3, [pc, #380]	; (8004024 <HAL_TIM_PWM_MspInit+0x1e0>)
 8003ea8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003eac:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1_trig.Init.Priority = DMA_PRIORITY_LOW;
 8003eae:	4b5d      	ldr	r3, [pc, #372]	; (8004024 <HAL_TIM_PWM_MspInit+0x1e0>)
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch1_trig.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003eb4:	4b5b      	ldr	r3, [pc, #364]	; (8004024 <HAL_TIM_PWM_MspInit+0x1e0>)
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch1_trig) != HAL_OK)
 8003eba:	485a      	ldr	r0, [pc, #360]	; (8004024 <HAL_TIM_PWM_MspInit+0x1e0>)
 8003ebc:	f006 f822 	bl	8009f04 <HAL_DMA_Init>
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d001      	beq.n	8003eca <HAL_TIM_PWM_MspInit+0x86>
    {
      Error_Handler();
 8003ec6:	f7ff fae3 	bl	8003490 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1_trig);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	4a55      	ldr	r2, [pc, #340]	; (8004024 <HAL_TIM_PWM_MspInit+0x1e0>)
 8003ece:	625a      	str	r2, [r3, #36]	; 0x24
 8003ed0:	4a54      	ldr	r2, [pc, #336]	; (8004024 <HAL_TIM_PWM_MspInit+0x1e0>)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_TRIGGER],hdma_tim3_ch1_trig);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	4a52      	ldr	r2, [pc, #328]	; (8004024 <HAL_TIM_PWM_MspInit+0x1e0>)
 8003eda:	639a      	str	r2, [r3, #56]	; 0x38
 8003edc:	4a51      	ldr	r2, [pc, #324]	; (8004024 <HAL_TIM_PWM_MspInit+0x1e0>)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM3_CH2 Init */
    hdma_tim3_ch2.Instance = DMA1_Stream5;
 8003ee2:	4b52      	ldr	r3, [pc, #328]	; (800402c <HAL_TIM_PWM_MspInit+0x1e8>)
 8003ee4:	4a52      	ldr	r2, [pc, #328]	; (8004030 <HAL_TIM_PWM_MspInit+0x1ec>)
 8003ee6:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch2.Init.Channel = DMA_CHANNEL_5;
 8003ee8:	4b50      	ldr	r3, [pc, #320]	; (800402c <HAL_TIM_PWM_MspInit+0x1e8>)
 8003eea:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8003eee:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003ef0:	4b4e      	ldr	r3, [pc, #312]	; (800402c <HAL_TIM_PWM_MspInit+0x1e8>)
 8003ef2:	2240      	movs	r2, #64	; 0x40
 8003ef4:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8003ef6:	4b4d      	ldr	r3, [pc, #308]	; (800402c <HAL_TIM_PWM_MspInit+0x1e8>)
 8003ef8:	2200      	movs	r2, #0
 8003efa:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8003efc:	4b4b      	ldr	r3, [pc, #300]	; (800402c <HAL_TIM_PWM_MspInit+0x1e8>)
 8003efe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003f02:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003f04:	4b49      	ldr	r3, [pc, #292]	; (800402c <HAL_TIM_PWM_MspInit+0x1e8>)
 8003f06:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003f0a:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003f0c:	4b47      	ldr	r3, [pc, #284]	; (800402c <HAL_TIM_PWM_MspInit+0x1e8>)
 8003f0e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003f12:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch2.Init.Mode = DMA_CIRCULAR;
 8003f14:	4b45      	ldr	r3, [pc, #276]	; (800402c <HAL_TIM_PWM_MspInit+0x1e8>)
 8003f16:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003f1a:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8003f1c:	4b43      	ldr	r3, [pc, #268]	; (800402c <HAL_TIM_PWM_MspInit+0x1e8>)
 8003f1e:	2200      	movs	r2, #0
 8003f20:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003f22:	4b42      	ldr	r3, [pc, #264]	; (800402c <HAL_TIM_PWM_MspInit+0x1e8>)
 8003f24:	2200      	movs	r2, #0
 8003f26:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch2) != HAL_OK)
 8003f28:	4840      	ldr	r0, [pc, #256]	; (800402c <HAL_TIM_PWM_MspInit+0x1e8>)
 8003f2a:	f005 ffeb 	bl	8009f04 <HAL_DMA_Init>
 8003f2e:	4603      	mov	r3, r0
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d001      	beq.n	8003f38 <HAL_TIM_PWM_MspInit+0xf4>
    {
      Error_Handler();
 8003f34:	f7ff faac 	bl	8003490 <Error_Handler>
    }

    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC2],hdma_tim3_ch2);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	4a3c      	ldr	r2, [pc, #240]	; (800402c <HAL_TIM_PWM_MspInit+0x1e8>)
 8003f3c:	629a      	str	r2, [r3, #40]	; 0x28
 8003f3e:	4a3b      	ldr	r2, [pc, #236]	; (800402c <HAL_TIM_PWM_MspInit+0x1e8>)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM3_CH3 Init */
    hdma_tim3_ch3.Instance = DMA1_Stream7;
 8003f44:	4b3b      	ldr	r3, [pc, #236]	; (8004034 <HAL_TIM_PWM_MspInit+0x1f0>)
 8003f46:	4a3c      	ldr	r2, [pc, #240]	; (8004038 <HAL_TIM_PWM_MspInit+0x1f4>)
 8003f48:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch3.Init.Channel = DMA_CHANNEL_5;
 8003f4a:	4b3a      	ldr	r3, [pc, #232]	; (8004034 <HAL_TIM_PWM_MspInit+0x1f0>)
 8003f4c:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8003f50:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003f52:	4b38      	ldr	r3, [pc, #224]	; (8004034 <HAL_TIM_PWM_MspInit+0x1f0>)
 8003f54:	2240      	movs	r2, #64	; 0x40
 8003f56:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8003f58:	4b36      	ldr	r3, [pc, #216]	; (8004034 <HAL_TIM_PWM_MspInit+0x1f0>)
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8003f5e:	4b35      	ldr	r3, [pc, #212]	; (8004034 <HAL_TIM_PWM_MspInit+0x1f0>)
 8003f60:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003f64:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003f66:	4b33      	ldr	r3, [pc, #204]	; (8004034 <HAL_TIM_PWM_MspInit+0x1f0>)
 8003f68:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003f6c:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003f6e:	4b31      	ldr	r3, [pc, #196]	; (8004034 <HAL_TIM_PWM_MspInit+0x1f0>)
 8003f70:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003f74:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch3.Init.Mode = DMA_CIRCULAR;
 8003f76:	4b2f      	ldr	r3, [pc, #188]	; (8004034 <HAL_TIM_PWM_MspInit+0x1f0>)
 8003f78:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003f7c:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch3.Init.Priority = DMA_PRIORITY_LOW;
 8003f7e:	4b2d      	ldr	r3, [pc, #180]	; (8004034 <HAL_TIM_PWM_MspInit+0x1f0>)
 8003f80:	2200      	movs	r2, #0
 8003f82:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003f84:	4b2b      	ldr	r3, [pc, #172]	; (8004034 <HAL_TIM_PWM_MspInit+0x1f0>)
 8003f86:	2200      	movs	r2, #0
 8003f88:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch3) != HAL_OK)
 8003f8a:	482a      	ldr	r0, [pc, #168]	; (8004034 <HAL_TIM_PWM_MspInit+0x1f0>)
 8003f8c:	f005 ffba 	bl	8009f04 <HAL_DMA_Init>
 8003f90:	4603      	mov	r3, r0
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d001      	beq.n	8003f9a <HAL_TIM_PWM_MspInit+0x156>
    {
      Error_Handler();
 8003f96:	f7ff fa7b 	bl	8003490 <Error_Handler>
    }

    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC3],hdma_tim3_ch3);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	4a25      	ldr	r2, [pc, #148]	; (8004034 <HAL_TIM_PWM_MspInit+0x1f0>)
 8003f9e:	62da      	str	r2, [r3, #44]	; 0x2c
 8003fa0:	4a24      	ldr	r2, [pc, #144]	; (8004034 <HAL_TIM_PWM_MspInit+0x1f0>)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM3_CH4_UP Init */
    hdma_tim3_ch4_up.Instance = DMA1_Stream2;
 8003fa6:	4b25      	ldr	r3, [pc, #148]	; (800403c <HAL_TIM_PWM_MspInit+0x1f8>)
 8003fa8:	4a25      	ldr	r2, [pc, #148]	; (8004040 <HAL_TIM_PWM_MspInit+0x1fc>)
 8003faa:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch4_up.Init.Channel = DMA_CHANNEL_5;
 8003fac:	4b23      	ldr	r3, [pc, #140]	; (800403c <HAL_TIM_PWM_MspInit+0x1f8>)
 8003fae:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8003fb2:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch4_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003fb4:	4b21      	ldr	r3, [pc, #132]	; (800403c <HAL_TIM_PWM_MspInit+0x1f8>)
 8003fb6:	2240      	movs	r2, #64	; 0x40
 8003fb8:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch4_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8003fba:	4b20      	ldr	r3, [pc, #128]	; (800403c <HAL_TIM_PWM_MspInit+0x1f8>)
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch4_up.Init.MemInc = DMA_MINC_ENABLE;
 8003fc0:	4b1e      	ldr	r3, [pc, #120]	; (800403c <HAL_TIM_PWM_MspInit+0x1f8>)
 8003fc2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003fc6:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch4_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003fc8:	4b1c      	ldr	r3, [pc, #112]	; (800403c <HAL_TIM_PWM_MspInit+0x1f8>)
 8003fca:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003fce:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch4_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003fd0:	4b1a      	ldr	r3, [pc, #104]	; (800403c <HAL_TIM_PWM_MspInit+0x1f8>)
 8003fd2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003fd6:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch4_up.Init.Mode = DMA_CIRCULAR;
 8003fd8:	4b18      	ldr	r3, [pc, #96]	; (800403c <HAL_TIM_PWM_MspInit+0x1f8>)
 8003fda:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003fde:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch4_up.Init.Priority = DMA_PRIORITY_LOW;
 8003fe0:	4b16      	ldr	r3, [pc, #88]	; (800403c <HAL_TIM_PWM_MspInit+0x1f8>)
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch4_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003fe6:	4b15      	ldr	r3, [pc, #84]	; (800403c <HAL_TIM_PWM_MspInit+0x1f8>)
 8003fe8:	2200      	movs	r2, #0
 8003fea:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch4_up) != HAL_OK)
 8003fec:	4813      	ldr	r0, [pc, #76]	; (800403c <HAL_TIM_PWM_MspInit+0x1f8>)
 8003fee:	f005 ff89 	bl	8009f04 <HAL_DMA_Init>
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d001      	beq.n	8003ffc <HAL_TIM_PWM_MspInit+0x1b8>
    {
      Error_Handler();
 8003ff8:	f7ff fa4a 	bl	8003490 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC4],hdma_tim3_ch4_up);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	4a0f      	ldr	r2, [pc, #60]	; (800403c <HAL_TIM_PWM_MspInit+0x1f8>)
 8004000:	631a      	str	r2, [r3, #48]	; 0x30
 8004002:	4a0e      	ldr	r2, [pc, #56]	; (800403c <HAL_TIM_PWM_MspInit+0x1f8>)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_UPDATE],hdma_tim3_ch4_up);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	4a0c      	ldr	r2, [pc, #48]	; (800403c <HAL_TIM_PWM_MspInit+0x1f8>)
 800400c:	621a      	str	r2, [r3, #32]
 800400e:	4a0b      	ldr	r2, [pc, #44]	; (800403c <HAL_TIM_PWM_MspInit+0x1f8>)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8004014:	bf00      	nop
 8004016:	3710      	adds	r7, #16
 8004018:	46bd      	mov	sp, r7
 800401a:	bd80      	pop	{r7, pc}
 800401c:	40000400 	.word	0x40000400
 8004020:	40023800 	.word	0x40023800
 8004024:	20000ae0 	.word	0x20000ae0
 8004028:	40026070 	.word	0x40026070
 800402c:	20000b40 	.word	0x20000b40
 8004030:	40026088 	.word	0x40026088
 8004034:	20000a40 	.word	0x20000a40
 8004038:	400260b8 	.word	0x400260b8
 800403c:	20000be0 	.word	0x20000be0
 8004040:	40026040 	.word	0x40026040

08004044 <HAL_TIM_OC_MspInit>:

void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* tim_ocHandle)
{
 8004044:	b480      	push	{r7}
 8004046:	b085      	sub	sp, #20
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]

  if(tim_ocHandle->Instance==TIM4)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a0b      	ldr	r2, [pc, #44]	; (8004080 <HAL_TIM_OC_MspInit+0x3c>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d10d      	bne.n	8004072 <HAL_TIM_OC_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004056:	2300      	movs	r3, #0
 8004058:	60fb      	str	r3, [r7, #12]
 800405a:	4b0a      	ldr	r3, [pc, #40]	; (8004084 <HAL_TIM_OC_MspInit+0x40>)
 800405c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800405e:	4a09      	ldr	r2, [pc, #36]	; (8004084 <HAL_TIM_OC_MspInit+0x40>)
 8004060:	f043 0304 	orr.w	r3, r3, #4
 8004064:	6413      	str	r3, [r2, #64]	; 0x40
 8004066:	4b07      	ldr	r3, [pc, #28]	; (8004084 <HAL_TIM_OC_MspInit+0x40>)
 8004068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800406a:	f003 0304 	and.w	r3, r3, #4
 800406e:	60fb      	str	r3, [r7, #12]
 8004070:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8004072:	bf00      	nop
 8004074:	3714      	adds	r7, #20
 8004076:	46bd      	mov	sp, r7
 8004078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407c:	4770      	bx	lr
 800407e:	bf00      	nop
 8004080:	40000800 	.word	0x40000800
 8004084:	40023800 	.word	0x40023800

08004088 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b084      	sub	sp, #16
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4a0e      	ldr	r2, [pc, #56]	; (80040d0 <HAL_TIM_Base_MspInit+0x48>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d115      	bne.n	80040c6 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800409a:	2300      	movs	r3, #0
 800409c:	60fb      	str	r3, [r7, #12]
 800409e:	4b0d      	ldr	r3, [pc, #52]	; (80040d4 <HAL_TIM_Base_MspInit+0x4c>)
 80040a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040a2:	4a0c      	ldr	r2, [pc, #48]	; (80040d4 <HAL_TIM_Base_MspInit+0x4c>)
 80040a4:	f043 0310 	orr.w	r3, r3, #16
 80040a8:	6413      	str	r3, [r2, #64]	; 0x40
 80040aa:	4b0a      	ldr	r3, [pc, #40]	; (80040d4 <HAL_TIM_Base_MspInit+0x4c>)
 80040ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ae:	f003 0310 	and.w	r3, r3, #16
 80040b2:	60fb      	str	r3, [r7, #12]
 80040b4:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80040b6:	2200      	movs	r2, #0
 80040b8:	2100      	movs	r1, #0
 80040ba:	2036      	movs	r0, #54	; 0x36
 80040bc:	f005 fef8 	bl	8009eb0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80040c0:	2036      	movs	r0, #54	; 0x36
 80040c2:	f005 ff11 	bl	8009ee8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 80040c6:	bf00      	nop
 80040c8:	3710      	adds	r7, #16
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bd80      	pop	{r7, pc}
 80040ce:	bf00      	nop
 80040d0:	40001000 	.word	0x40001000
 80040d4:	40023800 	.word	0x40023800

080040d8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b088      	sub	sp, #32
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040e0:	f107 030c 	add.w	r3, r7, #12
 80040e4:	2200      	movs	r2, #0
 80040e6:	601a      	str	r2, [r3, #0]
 80040e8:	605a      	str	r2, [r3, #4]
 80040ea:	609a      	str	r2, [r3, #8]
 80040ec:	60da      	str	r2, [r3, #12]
 80040ee:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a12      	ldr	r2, [pc, #72]	; (8004140 <HAL_TIM_MspPostInit+0x68>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d11e      	bne.n	8004138 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80040fa:	2300      	movs	r3, #0
 80040fc:	60bb      	str	r3, [r7, #8]
 80040fe:	4b11      	ldr	r3, [pc, #68]	; (8004144 <HAL_TIM_MspPostInit+0x6c>)
 8004100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004102:	4a10      	ldr	r2, [pc, #64]	; (8004144 <HAL_TIM_MspPostInit+0x6c>)
 8004104:	f043 0304 	orr.w	r3, r3, #4
 8004108:	6313      	str	r3, [r2, #48]	; 0x30
 800410a:	4b0e      	ldr	r3, [pc, #56]	; (8004144 <HAL_TIM_MspPostInit+0x6c>)
 800410c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800410e:	f003 0304 	and.w	r3, r3, #4
 8004112:	60bb      	str	r3, [r7, #8]
 8004114:	68bb      	ldr	r3, [r7, #8]
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    PC8     ------> TIM3_CH3
    PC9     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = PWM0_Pin|PWM1_Pin|PWM2_Pin|PWM3_Pin;
 8004116:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800411a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800411c:	2302      	movs	r3, #2
 800411e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004120:	2300      	movs	r3, #0
 8004122:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004124:	2303      	movs	r3, #3
 8004126:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004128:	2302      	movs	r3, #2
 800412a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800412c:	f107 030c 	add.w	r3, r7, #12
 8004130:	4619      	mov	r1, r3
 8004132:	4805      	ldr	r0, [pc, #20]	; (8004148 <HAL_TIM_MspPostInit+0x70>)
 8004134:	f007 fb1a 	bl	800b76c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8004138:	bf00      	nop
 800413a:	3720      	adds	r7, #32
 800413c:	46bd      	mov	sp, r7
 800413e:	bd80      	pop	{r7, pc}
 8004140:	40000400 	.word	0x40000400
 8004144:	40023800 	.word	0x40023800
 8004148:	40020800 	.word	0x40020800

0800414c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8004150:	4b11      	ldr	r3, [pc, #68]	; (8004198 <MX_USART1_UART_Init+0x4c>)
 8004152:	4a12      	ldr	r2, [pc, #72]	; (800419c <MX_USART1_UART_Init+0x50>)
 8004154:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600;
 8004156:	4b10      	ldr	r3, [pc, #64]	; (8004198 <MX_USART1_UART_Init+0x4c>)
 8004158:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 800415c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800415e:	4b0e      	ldr	r3, [pc, #56]	; (8004198 <MX_USART1_UART_Init+0x4c>)
 8004160:	2200      	movs	r2, #0
 8004162:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004164:	4b0c      	ldr	r3, [pc, #48]	; (8004198 <MX_USART1_UART_Init+0x4c>)
 8004166:	2200      	movs	r2, #0
 8004168:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800416a:	4b0b      	ldr	r3, [pc, #44]	; (8004198 <MX_USART1_UART_Init+0x4c>)
 800416c:	2200      	movs	r2, #0
 800416e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004170:	4b09      	ldr	r3, [pc, #36]	; (8004198 <MX_USART1_UART_Init+0x4c>)
 8004172:	220c      	movs	r2, #12
 8004174:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004176:	4b08      	ldr	r3, [pc, #32]	; (8004198 <MX_USART1_UART_Init+0x4c>)
 8004178:	2200      	movs	r2, #0
 800417a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800417c:	4b06      	ldr	r3, [pc, #24]	; (8004198 <MX_USART1_UART_Init+0x4c>)
 800417e:	2200      	movs	r2, #0
 8004180:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004182:	4805      	ldr	r0, [pc, #20]	; (8004198 <MX_USART1_UART_Init+0x4c>)
 8004184:	f009 fe10 	bl	800dda8 <HAL_UART_Init>
 8004188:	4603      	mov	r3, r0
 800418a:	2b00      	cmp	r3, #0
 800418c:	d001      	beq.n	8004192 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800418e:	f7ff f97f 	bl	8003490 <Error_Handler>
  }

}
 8004192:	bf00      	nop
 8004194:	bd80      	pop	{r7, pc}
 8004196:	bf00      	nop
 8004198:	20000c80 	.word	0x20000c80
 800419c:	40011000 	.word	0x40011000

080041a0 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 80041a4:	4b11      	ldr	r3, [pc, #68]	; (80041ec <MX_USART2_UART_Init+0x4c>)
 80041a6:	4a12      	ldr	r2, [pc, #72]	; (80041f0 <MX_USART2_UART_Init+0x50>)
 80041a8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80041aa:	4b10      	ldr	r3, [pc, #64]	; (80041ec <MX_USART2_UART_Init+0x4c>)
 80041ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80041b0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80041b2:	4b0e      	ldr	r3, [pc, #56]	; (80041ec <MX_USART2_UART_Init+0x4c>)
 80041b4:	2200      	movs	r2, #0
 80041b6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80041b8:	4b0c      	ldr	r3, [pc, #48]	; (80041ec <MX_USART2_UART_Init+0x4c>)
 80041ba:	2200      	movs	r2, #0
 80041bc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80041be:	4b0b      	ldr	r3, [pc, #44]	; (80041ec <MX_USART2_UART_Init+0x4c>)
 80041c0:	2200      	movs	r2, #0
 80041c2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80041c4:	4b09      	ldr	r3, [pc, #36]	; (80041ec <MX_USART2_UART_Init+0x4c>)
 80041c6:	220c      	movs	r2, #12
 80041c8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80041ca:	4b08      	ldr	r3, [pc, #32]	; (80041ec <MX_USART2_UART_Init+0x4c>)
 80041cc:	2200      	movs	r2, #0
 80041ce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80041d0:	4b06      	ldr	r3, [pc, #24]	; (80041ec <MX_USART2_UART_Init+0x4c>)
 80041d2:	2200      	movs	r2, #0
 80041d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80041d6:	4805      	ldr	r0, [pc, #20]	; (80041ec <MX_USART2_UART_Init+0x4c>)
 80041d8:	f009 fde6 	bl	800dda8 <HAL_UART_Init>
 80041dc:	4603      	mov	r3, r0
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d001      	beq.n	80041e6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80041e2:	f7ff f955 	bl	8003490 <Error_Handler>
  }

}
 80041e6:	bf00      	nop
 80041e8:	bd80      	pop	{r7, pc}
 80041ea:	bf00      	nop
 80041ec:	20000cc0 	.word	0x20000cc0
 80041f0:	40004400 	.word	0x40004400

080041f4 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 80041f8:	4b11      	ldr	r3, [pc, #68]	; (8004240 <MX_USART3_UART_Init+0x4c>)
 80041fa:	4a12      	ldr	r2, [pc, #72]	; (8004244 <MX_USART3_UART_Init+0x50>)
 80041fc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 57600;
 80041fe:	4b10      	ldr	r3, [pc, #64]	; (8004240 <MX_USART3_UART_Init+0x4c>)
 8004200:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8004204:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8004206:	4b0e      	ldr	r3, [pc, #56]	; (8004240 <MX_USART3_UART_Init+0x4c>)
 8004208:	2200      	movs	r2, #0
 800420a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800420c:	4b0c      	ldr	r3, [pc, #48]	; (8004240 <MX_USART3_UART_Init+0x4c>)
 800420e:	2200      	movs	r2, #0
 8004210:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8004212:	4b0b      	ldr	r3, [pc, #44]	; (8004240 <MX_USART3_UART_Init+0x4c>)
 8004214:	2200      	movs	r2, #0
 8004216:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8004218:	4b09      	ldr	r3, [pc, #36]	; (8004240 <MX_USART3_UART_Init+0x4c>)
 800421a:	220c      	movs	r2, #12
 800421c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800421e:	4b08      	ldr	r3, [pc, #32]	; (8004240 <MX_USART3_UART_Init+0x4c>)
 8004220:	2200      	movs	r2, #0
 8004222:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004224:	4b06      	ldr	r3, [pc, #24]	; (8004240 <MX_USART3_UART_Init+0x4c>)
 8004226:	2200      	movs	r2, #0
 8004228:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800422a:	4805      	ldr	r0, [pc, #20]	; (8004240 <MX_USART3_UART_Init+0x4c>)
 800422c:	f009 fdbc 	bl	800dda8 <HAL_UART_Init>
 8004230:	4603      	mov	r3, r0
 8004232:	2b00      	cmp	r3, #0
 8004234:	d001      	beq.n	800423a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8004236:	f7ff f92b 	bl	8003490 <Error_Handler>
  }

}
 800423a:	bf00      	nop
 800423c:	bd80      	pop	{r7, pc}
 800423e:	bf00      	nop
 8004240:	20000c40 	.word	0x20000c40
 8004244:	40004800 	.word	0x40004800

08004248 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b08e      	sub	sp, #56	; 0x38
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004250:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004254:	2200      	movs	r2, #0
 8004256:	601a      	str	r2, [r3, #0]
 8004258:	605a      	str	r2, [r3, #4]
 800425a:	609a      	str	r2, [r3, #8]
 800425c:	60da      	str	r2, [r3, #12]
 800425e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4a58      	ldr	r2, [pc, #352]	; (80043c8 <HAL_UART_MspInit+0x180>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d135      	bne.n	80042d6 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800426a:	2300      	movs	r3, #0
 800426c:	623b      	str	r3, [r7, #32]
 800426e:	4b57      	ldr	r3, [pc, #348]	; (80043cc <HAL_UART_MspInit+0x184>)
 8004270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004272:	4a56      	ldr	r2, [pc, #344]	; (80043cc <HAL_UART_MspInit+0x184>)
 8004274:	f043 0310 	orr.w	r3, r3, #16
 8004278:	6453      	str	r3, [r2, #68]	; 0x44
 800427a:	4b54      	ldr	r3, [pc, #336]	; (80043cc <HAL_UART_MspInit+0x184>)
 800427c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800427e:	f003 0310 	and.w	r3, r3, #16
 8004282:	623b      	str	r3, [r7, #32]
 8004284:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004286:	2300      	movs	r3, #0
 8004288:	61fb      	str	r3, [r7, #28]
 800428a:	4b50      	ldr	r3, [pc, #320]	; (80043cc <HAL_UART_MspInit+0x184>)
 800428c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800428e:	4a4f      	ldr	r2, [pc, #316]	; (80043cc <HAL_UART_MspInit+0x184>)
 8004290:	f043 0301 	orr.w	r3, r3, #1
 8004294:	6313      	str	r3, [r2, #48]	; 0x30
 8004296:	4b4d      	ldr	r3, [pc, #308]	; (80043cc <HAL_UART_MspInit+0x184>)
 8004298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800429a:	f003 0301 	and.w	r3, r3, #1
 800429e:	61fb      	str	r3, [r7, #28]
 80042a0:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = SIM_RxD_Pin|SIM_TxD_Pin;
 80042a2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80042a6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042a8:	2302      	movs	r3, #2
 80042aa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042ac:	2300      	movs	r3, #0
 80042ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80042b0:	2303      	movs	r3, #3
 80042b2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80042b4:	2307      	movs	r3, #7
 80042b6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80042b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80042bc:	4619      	mov	r1, r3
 80042be:	4844      	ldr	r0, [pc, #272]	; (80043d0 <HAL_UART_MspInit+0x188>)
 80042c0:	f007 fa54 	bl	800b76c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80042c4:	2200      	movs	r2, #0
 80042c6:	2100      	movs	r1, #0
 80042c8:	2025      	movs	r0, #37	; 0x25
 80042ca:	f005 fdf1 	bl	8009eb0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80042ce:	2025      	movs	r0, #37	; 0x25
 80042d0:	f005 fe0a 	bl	8009ee8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80042d4:	e073      	b.n	80043be <HAL_UART_MspInit+0x176>
  else if(uartHandle->Instance==USART2)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4a3e      	ldr	r2, [pc, #248]	; (80043d4 <HAL_UART_MspInit+0x18c>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d134      	bne.n	800434a <HAL_UART_MspInit+0x102>
    __HAL_RCC_USART2_CLK_ENABLE();
 80042e0:	2300      	movs	r3, #0
 80042e2:	61bb      	str	r3, [r7, #24]
 80042e4:	4b39      	ldr	r3, [pc, #228]	; (80043cc <HAL_UART_MspInit+0x184>)
 80042e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042e8:	4a38      	ldr	r2, [pc, #224]	; (80043cc <HAL_UART_MspInit+0x184>)
 80042ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042ee:	6413      	str	r3, [r2, #64]	; 0x40
 80042f0:	4b36      	ldr	r3, [pc, #216]	; (80043cc <HAL_UART_MspInit+0x184>)
 80042f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042f8:	61bb      	str	r3, [r7, #24]
 80042fa:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80042fc:	2300      	movs	r3, #0
 80042fe:	617b      	str	r3, [r7, #20]
 8004300:	4b32      	ldr	r3, [pc, #200]	; (80043cc <HAL_UART_MspInit+0x184>)
 8004302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004304:	4a31      	ldr	r2, [pc, #196]	; (80043cc <HAL_UART_MspInit+0x184>)
 8004306:	f043 0308 	orr.w	r3, r3, #8
 800430a:	6313      	str	r3, [r2, #48]	; 0x30
 800430c:	4b2f      	ldr	r3, [pc, #188]	; (80043cc <HAL_UART_MspInit+0x184>)
 800430e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004310:	f003 0308 	and.w	r3, r3, #8
 8004314:	617b      	str	r3, [r7, #20]
 8004316:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = RS485_RxD_Pin|RS485_TxD_Pin;
 8004318:	2360      	movs	r3, #96	; 0x60
 800431a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800431c:	2302      	movs	r3, #2
 800431e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004320:	2300      	movs	r3, #0
 8004322:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004324:	2303      	movs	r3, #3
 8004326:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004328:	2307      	movs	r3, #7
 800432a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800432c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004330:	4619      	mov	r1, r3
 8004332:	4829      	ldr	r0, [pc, #164]	; (80043d8 <HAL_UART_MspInit+0x190>)
 8004334:	f007 fa1a 	bl	800b76c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004338:	2200      	movs	r2, #0
 800433a:	2100      	movs	r1, #0
 800433c:	2026      	movs	r0, #38	; 0x26
 800433e:	f005 fdb7 	bl	8009eb0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004342:	2026      	movs	r0, #38	; 0x26
 8004344:	f005 fdd0 	bl	8009ee8 <HAL_NVIC_EnableIRQ>
}
 8004348:	e039      	b.n	80043be <HAL_UART_MspInit+0x176>
  else if(uartHandle->Instance==USART3)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4a23      	ldr	r2, [pc, #140]	; (80043dc <HAL_UART_MspInit+0x194>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d134      	bne.n	80043be <HAL_UART_MspInit+0x176>
    __HAL_RCC_USART3_CLK_ENABLE();
 8004354:	2300      	movs	r3, #0
 8004356:	613b      	str	r3, [r7, #16]
 8004358:	4b1c      	ldr	r3, [pc, #112]	; (80043cc <HAL_UART_MspInit+0x184>)
 800435a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800435c:	4a1b      	ldr	r2, [pc, #108]	; (80043cc <HAL_UART_MspInit+0x184>)
 800435e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004362:	6413      	str	r3, [r2, #64]	; 0x40
 8004364:	4b19      	ldr	r3, [pc, #100]	; (80043cc <HAL_UART_MspInit+0x184>)
 8004366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004368:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800436c:	613b      	str	r3, [r7, #16]
 800436e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004370:	2300      	movs	r3, #0
 8004372:	60fb      	str	r3, [r7, #12]
 8004374:	4b15      	ldr	r3, [pc, #84]	; (80043cc <HAL_UART_MspInit+0x184>)
 8004376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004378:	4a14      	ldr	r2, [pc, #80]	; (80043cc <HAL_UART_MspInit+0x184>)
 800437a:	f043 0304 	orr.w	r3, r3, #4
 800437e:	6313      	str	r3, [r2, #48]	; 0x30
 8004380:	4b12      	ldr	r3, [pc, #72]	; (80043cc <HAL_UART_MspInit+0x184>)
 8004382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004384:	f003 0304 	and.w	r3, r3, #4
 8004388:	60fb      	str	r3, [r7, #12]
 800438a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = COM_RxD_Pin|COM_TxD_Pin;
 800438c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004390:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004392:	2302      	movs	r3, #2
 8004394:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004396:	2300      	movs	r3, #0
 8004398:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800439a:	2303      	movs	r3, #3
 800439c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800439e:	2307      	movs	r3, #7
 80043a0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80043a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80043a6:	4619      	mov	r1, r3
 80043a8:	480d      	ldr	r0, [pc, #52]	; (80043e0 <HAL_UART_MspInit+0x198>)
 80043aa:	f007 f9df 	bl	800b76c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80043ae:	2200      	movs	r2, #0
 80043b0:	2100      	movs	r1, #0
 80043b2:	2027      	movs	r0, #39	; 0x27
 80043b4:	f005 fd7c 	bl	8009eb0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80043b8:	2027      	movs	r0, #39	; 0x27
 80043ba:	f005 fd95 	bl	8009ee8 <HAL_NVIC_EnableIRQ>
}
 80043be:	bf00      	nop
 80043c0:	3738      	adds	r7, #56	; 0x38
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bd80      	pop	{r7, pc}
 80043c6:	bf00      	nop
 80043c8:	40011000 	.word	0x40011000
 80043cc:	40023800 	.word	0x40023800
 80043d0:	40020000 	.word	0x40020000
 80043d4:	40004400 	.word	0x40004400
 80043d8:	40020c00 	.word	0x40020c00
 80043dc:	40004800 	.word	0x40004800
 80043e0:	40020800 	.word	0x40020800

080043e4 <dbg_available>:
volatile dbg_rx_buffer_index_t dbg_rx_buffer_head = 0;
volatile dbg_rx_buffer_index_t dbg_rx_buffer_tail = 0;
uint8_t dbg_rx_buffer[DBG_RX_BUFFER_SIZE] = {0,};

int16_t dbg_available(void)
{
 80043e4:	b480      	push	{r7}
 80043e6:	af00      	add	r7, sp, #0
	return ((uint16_t)(DBG_RX_BUFFER_SIZE + dbg_rx_buffer_head - dbg_rx_buffer_tail)) % DBG_RX_BUFFER_SIZE;
 80043e8:	4b0a      	ldr	r3, [pc, #40]	; (8004414 <dbg_available+0x30>)
 80043ea:	781b      	ldrb	r3, [r3, #0]
 80043ec:	b2db      	uxtb	r3, r3
 80043ee:	b29a      	uxth	r2, r3
 80043f0:	4b09      	ldr	r3, [pc, #36]	; (8004418 <dbg_available+0x34>)
 80043f2:	781b      	ldrb	r3, [r3, #0]
 80043f4:	b2db      	uxtb	r3, r3
 80043f6:	b29b      	uxth	r3, r3
 80043f8:	1ad3      	subs	r3, r2, r3
 80043fa:	b29b      	uxth	r3, r3
 80043fc:	3340      	adds	r3, #64	; 0x40
 80043fe:	b29b      	uxth	r3, r3
 8004400:	b21b      	sxth	r3, r3
 8004402:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004406:	b21b      	sxth	r3, r3
}
 8004408:	4618      	mov	r0, r3
 800440a:	46bd      	mov	sp, r7
 800440c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004410:	4770      	bx	lr
 8004412:	bf00      	nop
 8004414:	2000037c 	.word	0x2000037c
 8004418:	2000037d 	.word	0x2000037d

0800441c <dbg_read>:

int16_t dbg_read(void)
{
 800441c:	b480      	push	{r7}
 800441e:	b083      	sub	sp, #12
 8004420:	af00      	add	r7, sp, #0
	if(dbg_rx_buffer_head == dbg_rx_buffer_tail)
 8004422:	4b12      	ldr	r3, [pc, #72]	; (800446c <dbg_read+0x50>)
 8004424:	781b      	ldrb	r3, [r3, #0]
 8004426:	b2da      	uxtb	r2, r3
 8004428:	4b11      	ldr	r3, [pc, #68]	; (8004470 <dbg_read+0x54>)
 800442a:	781b      	ldrb	r3, [r3, #0]
 800442c:	b2db      	uxtb	r3, r3
 800442e:	429a      	cmp	r2, r3
 8004430:	d102      	bne.n	8004438 <dbg_read+0x1c>
	{
		return -1;
 8004432:	f04f 33ff 	mov.w	r3, #4294967295
 8004436:	e012      	b.n	800445e <dbg_read+0x42>
	}
	else
	{
		uint8_t c = dbg_rx_buffer[dbg_rx_buffer_tail];
 8004438:	4b0d      	ldr	r3, [pc, #52]	; (8004470 <dbg_read+0x54>)
 800443a:	781b      	ldrb	r3, [r3, #0]
 800443c:	b2db      	uxtb	r3, r3
 800443e:	461a      	mov	r2, r3
 8004440:	4b0c      	ldr	r3, [pc, #48]	; (8004474 <dbg_read+0x58>)
 8004442:	5c9b      	ldrb	r3, [r3, r2]
 8004444:	71fb      	strb	r3, [r7, #7]
		dbg_rx_buffer_tail = (dbg_rx_buffer_index_t)(dbg_rx_buffer_tail + 1) % DBG_RX_BUFFER_SIZE;
 8004446:	4b0a      	ldr	r3, [pc, #40]	; (8004470 <dbg_read+0x54>)
 8004448:	781b      	ldrb	r3, [r3, #0]
 800444a:	b2db      	uxtb	r3, r3
 800444c:	3301      	adds	r3, #1
 800444e:	b2db      	uxtb	r3, r3
 8004450:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004454:	b2da      	uxtb	r2, r3
 8004456:	4b06      	ldr	r3, [pc, #24]	; (8004470 <dbg_read+0x54>)
 8004458:	701a      	strb	r2, [r3, #0]
		return c;
 800445a:	79fb      	ldrb	r3, [r7, #7]
 800445c:	b21b      	sxth	r3, r3
	}
}
 800445e:	4618      	mov	r0, r3
 8004460:	370c      	adds	r7, #12
 8004462:	46bd      	mov	sp, r7
 8004464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004468:	4770      	bx	lr
 800446a:	bf00      	nop
 800446c:	2000037c 	.word	0x2000037c
 8004470:	2000037d 	.word	0x2000037d
 8004474:	20000380 	.word	0x20000380

08004478 <EN_Interrupt>:
		return c;
	}
}
//-----------------------------------------------------------------------------------------------------------------
void EN_Interrupt(void)
{
 8004478:	b480      	push	{r7}
 800447a:	af00      	add	r7, sp, #0
	__HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE);
 800447c:	4b0e      	ldr	r3, [pc, #56]	; (80044b8 <EN_Interrupt+0x40>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	68da      	ldr	r2, [r3, #12]
 8004482:	4b0d      	ldr	r3, [pc, #52]	; (80044b8 <EN_Interrupt+0x40>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f042 0220 	orr.w	r2, r2, #32
 800448a:	60da      	str	r2, [r3, #12]
	__HAL_UART_ENABLE_IT(&huart3, UART_IT_RXNE);
 800448c:	4b0b      	ldr	r3, [pc, #44]	; (80044bc <EN_Interrupt+0x44>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	68da      	ldr	r2, [r3, #12]
 8004492:	4b0a      	ldr	r3, [pc, #40]	; (80044bc <EN_Interrupt+0x44>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f042 0220 	orr.w	r2, r2, #32
 800449a:	60da      	str	r2, [r3, #12]
	__HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE);
 800449c:	4b08      	ldr	r3, [pc, #32]	; (80044c0 <EN_Interrupt+0x48>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	68da      	ldr	r2, [r3, #12]
 80044a2:	4b07      	ldr	r3, [pc, #28]	; (80044c0 <EN_Interrupt+0x48>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f042 0220 	orr.w	r2, r2, #32
 80044aa:	60da      	str	r2, [r3, #12]

	//__HAL_SPI_ENABLE_IT(&hspi2, SPI_IT_RXNE);
}
 80044ac:	bf00      	nop
 80044ae:	46bd      	mov	sp, r7
 80044b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b4:	4770      	bx	lr
 80044b6:	bf00      	nop
 80044b8:	20000c80 	.word	0x20000c80
 80044bc:	20000c40 	.word	0x20000c40
 80044c0:	20000cc0 	.word	0x20000cc0

080044c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80044c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80044fc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80044c8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80044ca:	e003      	b.n	80044d4 <LoopCopyDataInit>

080044cc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80044cc:	4b0c      	ldr	r3, [pc, #48]	; (8004500 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80044ce:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80044d0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80044d2:	3104      	adds	r1, #4

080044d4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80044d4:	480b      	ldr	r0, [pc, #44]	; (8004504 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80044d6:	4b0c      	ldr	r3, [pc, #48]	; (8004508 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80044d8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80044da:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80044dc:	d3f6      	bcc.n	80044cc <CopyDataInit>
  ldr  r2, =_sbss
 80044de:	4a0b      	ldr	r2, [pc, #44]	; (800450c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80044e0:	e002      	b.n	80044e8 <LoopFillZerobss>

080044e2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80044e2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80044e4:	f842 3b04 	str.w	r3, [r2], #4

080044e8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80044e8:	4b09      	ldr	r3, [pc, #36]	; (8004510 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80044ea:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80044ec:	d3f9      	bcc.n	80044e2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80044ee:	f7ff fb8b 	bl	8003c08 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80044f2:	f016 f9af 	bl	801a854 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80044f6:	f7fe fe6b 	bl	80031d0 <main>
  bx  lr    
 80044fa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80044fc:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8004500:	080244b8 	.word	0x080244b8
  ldr  r0, =_sdata
 8004504:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004508:	2000025c 	.word	0x2000025c
  ldr  r2, =_sbss
 800450c:	20000260 	.word	0x20000260
  ldr  r3, = _ebss
 8004510:	20007684 	.word	0x20007684

08004514 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004514:	e7fe      	b.n	8004514 <ADC_IRQHandler>
	...

08004518 <DWT_Init>:
 */
#include "main.h"

//Функция инициализации DWT таймера
void DWT_Init(void)
{
 8004518:	b480      	push	{r7}
 800451a:	af00      	add	r7, sp, #0
    SCB_DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;	//Разрешаем использовать счётчик
 800451c:	4b08      	ldr	r3, [pc, #32]	; (8004540 <DWT_Init+0x28>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4a07      	ldr	r2, [pc, #28]	; (8004540 <DWT_Init+0x28>)
 8004522:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004526:	6013      	str	r3, [r2, #0]
    DWT_CONTROL |= DWT_CTRL_CYCCNTENA_Msk;		//Запускаем счётчик
 8004528:	4b06      	ldr	r3, [pc, #24]	; (8004544 <DWT_Init+0x2c>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4a05      	ldr	r2, [pc, #20]	; (8004544 <DWT_Init+0x2c>)
 800452e:	f043 0301 	orr.w	r3, r3, #1
 8004532:	6013      	str	r3, [r2, #0]
}
 8004534:	bf00      	nop
 8004536:	46bd      	mov	sp, r7
 8004538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453c:	4770      	bx	lr
 800453e:	bf00      	nop
 8004540:	e000edfc 	.word	0xe000edfc
 8004544:	e0001000 	.word	0xe0001000

08004548 <delay_micros>:
//Функция временной задержки в мкс
//Принимает "us" - значение в микросекундах
void delay_micros(uint32_t us)
{
 8004548:	b480      	push	{r7}
 800454a:	b085      	sub	sp, #20
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
    uint32_t us_count_tic =  us * (SystemCoreClock / 1000000);	//Получаем кол-во тактов за 1 мкс и умножаем на наше значение
 8004550:	4b0c      	ldr	r3, [pc, #48]	; (8004584 <delay_micros+0x3c>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4a0c      	ldr	r2, [pc, #48]	; (8004588 <delay_micros+0x40>)
 8004556:	fba2 2303 	umull	r2, r3, r2, r3
 800455a:	0c9a      	lsrs	r2, r3, #18
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	fb02 f303 	mul.w	r3, r2, r3
 8004562:	60fb      	str	r3, [r7, #12]
    DWT->CYCCNT = 0U; 											//Обнуляем счётчик
 8004564:	4b09      	ldr	r3, [pc, #36]	; (800458c <delay_micros+0x44>)
 8004566:	2200      	movs	r2, #0
 8004568:	605a      	str	r2, [r3, #4]
    while(DWT->CYCCNT < us_count_tic);
 800456a:	bf00      	nop
 800456c:	4b07      	ldr	r3, [pc, #28]	; (800458c <delay_micros+0x44>)
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	68fa      	ldr	r2, [r7, #12]
 8004572:	429a      	cmp	r2, r3
 8004574:	d8fa      	bhi.n	800456c <delay_micros+0x24>
}
 8004576:	bf00      	nop
 8004578:	bf00      	nop
 800457a:	3714      	adds	r7, #20
 800457c:	46bd      	mov	sp, r7
 800457e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004582:	4770      	bx	lr
 8004584:	20000008 	.word	0x20000008
 8004588:	431bde83 	.word	0x431bde83
 800458c:	e0001000 	.word	0xe0001000

08004590 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	src,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEMCP, 1: OEMCP to Unicode */
)
{
 8004590:	b480      	push	{r7}
 8004592:	b085      	sub	sp, #20
 8004594:	af00      	add	r7, sp, #0
 8004596:	4603      	mov	r3, r0
 8004598:	6039      	str	r1, [r7, #0]
 800459a:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (src < 0x80) {	/* ASCII */
 800459c:	88fb      	ldrh	r3, [r7, #6]
 800459e:	2b7f      	cmp	r3, #127	; 0x7f
 80045a0:	d802      	bhi.n	80045a8 <ff_convert+0x18>
		c = src;
 80045a2:	88fb      	ldrh	r3, [r7, #6]
 80045a4:	81fb      	strh	r3, [r7, #14]
 80045a6:	e025      	b.n	80045f4 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEMCP to Unicode */
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d00b      	beq.n	80045c6 <ff_convert+0x36>
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];
 80045ae:	88fb      	ldrh	r3, [r7, #6]
 80045b0:	2bff      	cmp	r3, #255	; 0xff
 80045b2:	d805      	bhi.n	80045c0 <ff_convert+0x30>
 80045b4:	88fb      	ldrh	r3, [r7, #6]
 80045b6:	3b80      	subs	r3, #128	; 0x80
 80045b8:	4a12      	ldr	r2, [pc, #72]	; (8004604 <ff_convert+0x74>)
 80045ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80045be:	e000      	b.n	80045c2 <ff_convert+0x32>
 80045c0:	2300      	movs	r3, #0
 80045c2:	81fb      	strh	r3, [r7, #14]
 80045c4:	e016      	b.n	80045f4 <ff_convert+0x64>

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
 80045c6:	2300      	movs	r3, #0
 80045c8:	81fb      	strh	r3, [r7, #14]
 80045ca:	e009      	b.n	80045e0 <ff_convert+0x50>
				if (src == Tbl[c]) break;
 80045cc:	89fb      	ldrh	r3, [r7, #14]
 80045ce:	4a0d      	ldr	r2, [pc, #52]	; (8004604 <ff_convert+0x74>)
 80045d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80045d4:	88fa      	ldrh	r2, [r7, #6]
 80045d6:	429a      	cmp	r2, r3
 80045d8:	d006      	beq.n	80045e8 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 80045da:	89fb      	ldrh	r3, [r7, #14]
 80045dc:	3301      	adds	r3, #1
 80045de:	81fb      	strh	r3, [r7, #14]
 80045e0:	89fb      	ldrh	r3, [r7, #14]
 80045e2:	2b7f      	cmp	r3, #127	; 0x7f
 80045e4:	d9f2      	bls.n	80045cc <ff_convert+0x3c>
 80045e6:	e000      	b.n	80045ea <ff_convert+0x5a>
				if (src == Tbl[c]) break;
 80045e8:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 80045ea:	89fb      	ldrh	r3, [r7, #14]
 80045ec:	3380      	adds	r3, #128	; 0x80
 80045ee:	b29b      	uxth	r3, r3
 80045f0:	b2db      	uxtb	r3, r3
 80045f2:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 80045f4:	89fb      	ldrh	r3, [r7, #14]
}
 80045f6:	4618      	mov	r0, r3
 80045f8:	3714      	adds	r7, #20
 80045fa:	46bd      	mov	sp, r7
 80045fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004600:	4770      	bx	lr
 8004602:	bf00      	nop
 8004604:	08023908 	.word	0x08023908

08004608 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Upper converted character */
	WCHAR chr		/* Input character */
)
{
 8004608:	b480      	push	{r7}
 800460a:	b085      	sub	sp, #20
 800460c:	af00      	add	r7, sp, #0
 800460e:	4603      	mov	r3, r0
 8004610:	80fb      	strh	r3, [r7, #6]
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
 8004612:	2300      	movs	r3, #0
 8004614:	60fb      	str	r3, [r7, #12]
 8004616:	e002      	b.n	800461e <ff_wtoupper+0x16>
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	3301      	adds	r3, #1
 800461c:	60fb      	str	r3, [r7, #12]
 800461e:	4a0f      	ldr	r2, [pc, #60]	; (800465c <ff_wtoupper+0x54>)
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d006      	beq.n	8004638 <ff_wtoupper+0x30>
 800462a:	4a0c      	ldr	r2, [pc, #48]	; (800465c <ff_wtoupper+0x54>)
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004632:	88fa      	ldrh	r2, [r7, #6]
 8004634:	429a      	cmp	r2, r3
 8004636:	d1ef      	bne.n	8004618 <ff_wtoupper+0x10>

	return tbl_lower[i] ? tbl_upper[i] : chr;
 8004638:	4a08      	ldr	r2, [pc, #32]	; (800465c <ff_wtoupper+0x54>)
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d004      	beq.n	800464e <ff_wtoupper+0x46>
 8004644:	4a06      	ldr	r2, [pc, #24]	; (8004660 <ff_wtoupper+0x58>)
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800464c:	e000      	b.n	8004650 <ff_wtoupper+0x48>
 800464e:	88fb      	ldrh	r3, [r7, #6]
}
 8004650:	4618      	mov	r0, r3
 8004652:	3714      	adds	r7, #20
 8004654:	46bd      	mov	sp, r7
 8004656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465a:	4770      	bx	lr
 800465c:	08023a08 	.word	0x08023a08
 8004660:	08023be8 	.word	0x08023be8

08004664 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8004664:	b480      	push	{r7}
 8004666:	b087      	sub	sp, #28
 8004668:	af00      	add	r7, sp, #0
 800466a:	60f8      	str	r0, [r7, #12]
 800466c:	60b9      	str	r1, [r7, #8]
 800466e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8004674:	68bb      	ldr	r3, [r7, #8]
 8004676:	613b      	str	r3, [r7, #16]

#if _WORD_ACCESS == 1
	while (cnt >= sizeof (int)) {
 8004678:	e00c      	b.n	8004694 <mem_cpy+0x30>
		*(int*)d = *(int*)s;
 800467a:	693b      	ldr	r3, [r7, #16]
 800467c:	681a      	ldr	r2, [r3, #0]
 800467e:	697b      	ldr	r3, [r7, #20]
 8004680:	601a      	str	r2, [r3, #0]
		d += sizeof (int); s += sizeof (int);
 8004682:	697b      	ldr	r3, [r7, #20]
 8004684:	3304      	adds	r3, #4
 8004686:	617b      	str	r3, [r7, #20]
 8004688:	693b      	ldr	r3, [r7, #16]
 800468a:	3304      	adds	r3, #4
 800468c:	613b      	str	r3, [r7, #16]
		cnt -= sizeof (int);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	3b04      	subs	r3, #4
 8004692:	607b      	str	r3, [r7, #4]
	while (cnt >= sizeof (int)) {
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2b03      	cmp	r3, #3
 8004698:	d8ef      	bhi.n	800467a <mem_cpy+0x16>
	}
#endif
	while (cnt--)
 800469a:	e007      	b.n	80046ac <mem_cpy+0x48>
		*d++ = *s++;
 800469c:	693a      	ldr	r2, [r7, #16]
 800469e:	1c53      	adds	r3, r2, #1
 80046a0:	613b      	str	r3, [r7, #16]
 80046a2:	697b      	ldr	r3, [r7, #20]
 80046a4:	1c59      	adds	r1, r3, #1
 80046a6:	6179      	str	r1, [r7, #20]
 80046a8:	7812      	ldrb	r2, [r2, #0]
 80046aa:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	1e5a      	subs	r2, r3, #1
 80046b0:	607a      	str	r2, [r7, #4]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d1f2      	bne.n	800469c <mem_cpy+0x38>
}
 80046b6:	bf00      	nop
 80046b8:	bf00      	nop
 80046ba:	371c      	adds	r7, #28
 80046bc:	46bd      	mov	sp, r7
 80046be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c2:	4770      	bx	lr

080046c4 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 80046c4:	b480      	push	{r7}
 80046c6:	b087      	sub	sp, #28
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	60f8      	str	r0, [r7, #12]
 80046cc:	60b9      	str	r1, [r7, #8]
 80046ce:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	617b      	str	r3, [r7, #20]

	while (cnt--)
 80046d4:	e005      	b.n	80046e2 <mem_set+0x1e>
		*d++ = (BYTE)val;
 80046d6:	697b      	ldr	r3, [r7, #20]
 80046d8:	1c5a      	adds	r2, r3, #1
 80046da:	617a      	str	r2, [r7, #20]
 80046dc:	68ba      	ldr	r2, [r7, #8]
 80046de:	b2d2      	uxtb	r2, r2
 80046e0:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	1e5a      	subs	r2, r3, #1
 80046e6:	607a      	str	r2, [r7, #4]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d1f4      	bne.n	80046d6 <mem_set+0x12>
}
 80046ec:	bf00      	nop
 80046ee:	bf00      	nop
 80046f0:	371c      	adds	r7, #28
 80046f2:	46bd      	mov	sp, r7
 80046f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f8:	4770      	bx	lr

080046fa <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 80046fa:	b480      	push	{r7}
 80046fc:	b089      	sub	sp, #36	; 0x24
 80046fe:	af00      	add	r7, sp, #0
 8004700:	60f8      	str	r0, [r7, #12]
 8004702:	60b9      	str	r1, [r7, #8]
 8004704:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	61fb      	str	r3, [r7, #28]
 800470a:	68bb      	ldr	r3, [r7, #8]
 800470c:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800470e:	2300      	movs	r3, #0
 8004710:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 8004712:	bf00      	nop
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	1e5a      	subs	r2, r3, #1
 8004718:	607a      	str	r2, [r7, #4]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d00d      	beq.n	800473a <mem_cmp+0x40>
 800471e:	69fb      	ldr	r3, [r7, #28]
 8004720:	1c5a      	adds	r2, r3, #1
 8004722:	61fa      	str	r2, [r7, #28]
 8004724:	781b      	ldrb	r3, [r3, #0]
 8004726:	4619      	mov	r1, r3
 8004728:	69bb      	ldr	r3, [r7, #24]
 800472a:	1c5a      	adds	r2, r3, #1
 800472c:	61ba      	str	r2, [r7, #24]
 800472e:	781b      	ldrb	r3, [r3, #0]
 8004730:	1acb      	subs	r3, r1, r3
 8004732:	617b      	str	r3, [r7, #20]
 8004734:	697b      	ldr	r3, [r7, #20]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d0ec      	beq.n	8004714 <mem_cmp+0x1a>
	return r;
 800473a:	697b      	ldr	r3, [r7, #20]
}
 800473c:	4618      	mov	r0, r3
 800473e:	3724      	adds	r7, #36	; 0x24
 8004740:	46bd      	mov	sp, r7
 8004742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004746:	4770      	bx	lr

08004748 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 8004748:	b480      	push	{r7}
 800474a:	b083      	sub	sp, #12
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
 8004750:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8004752:	e002      	b.n	800475a <chk_chr+0x12>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	3301      	adds	r3, #1
 8004758:	607b      	str	r3, [r7, #4]
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	781b      	ldrb	r3, [r3, #0]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d005      	beq.n	800476e <chk_chr+0x26>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	781b      	ldrb	r3, [r3, #0]
 8004766:	461a      	mov	r2, r3
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	4293      	cmp	r3, r2
 800476c:	d1f2      	bne.n	8004754 <chk_chr+0xc>
	return *str;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	781b      	ldrb	r3, [r3, #0]
}
 8004772:	4618      	mov	r0, r3
 8004774:	370c      	adds	r7, #12
 8004776:	46bd      	mov	sp, r7
 8004778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477c:	4770      	bx	lr

0800477e <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS *fs		/* File system object */
)
{
 800477e:	b580      	push	{r7, lr}
 8004780:	b084      	sub	sp, #16
 8004782:	af00      	add	r7, sp, #0
 8004784:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;

	
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	791b      	ldrb	r3, [r3, #4]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d038      	beq.n	8004800 <sync_window+0x82>
		wsect = fs->winsect;	/* Current sector number */
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004792:	60fb      	str	r3, [r7, #12]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	7858      	ldrb	r0, [r3, #1]
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800479e:	2301      	movs	r3, #1
 80047a0:	68fa      	ldr	r2, [r7, #12]
 80047a2:	f002 ffe1 	bl	8007768 <disk_write>
 80047a6:	4603      	mov	r3, r0
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d001      	beq.n	80047b0 <sync_window+0x32>
			return FR_DISK_ERR;
 80047ac:	2301      	movs	r3, #1
 80047ae:	e028      	b.n	8004802 <sync_window+0x84>
		fs->wflag = 0;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2200      	movs	r2, #0
 80047b4:	711a      	strb	r2, [r3, #4]
		if (wsect >= fs->fatbase && wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area? */
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047ba:	68fa      	ldr	r2, [r7, #12]
 80047bc:	429a      	cmp	r2, r3
 80047be:	d31f      	bcc.n	8004800 <sync_window+0x82>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6a1b      	ldr	r3, [r3, #32]
 80047c8:	4413      	add	r3, r2
 80047ca:	68fa      	ldr	r2, [r7, #12]
 80047cc:	429a      	cmp	r2, r3
 80047ce:	d217      	bcs.n	8004800 <sync_window+0x82>
			for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	78db      	ldrb	r3, [r3, #3]
 80047d4:	60bb      	str	r3, [r7, #8]
 80047d6:	e010      	b.n	80047fa <sync_window+0x7c>
				wsect += fs->fsize;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6a1b      	ldr	r3, [r3, #32]
 80047dc:	68fa      	ldr	r2, [r7, #12]
 80047de:	4413      	add	r3, r2
 80047e0:	60fb      	str	r3, [r7, #12]
				disk_write(fs->drv, fs->win, wsect, 1);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	7858      	ldrb	r0, [r3, #1]
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80047ec:	2301      	movs	r3, #1
 80047ee:	68fa      	ldr	r2, [r7, #12]
 80047f0:	f002 ffba 	bl	8007768 <disk_write>
			for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80047f4:	68bb      	ldr	r3, [r7, #8]
 80047f6:	3b01      	subs	r3, #1
 80047f8:	60bb      	str	r3, [r7, #8]
 80047fa:	68bb      	ldr	r3, [r7, #8]
 80047fc:	2b01      	cmp	r3, #1
 80047fe:	d8eb      	bhi.n	80047d8 <sync_window+0x5a>
			}
		}
	}
	return FR_OK;
 8004800:	2300      	movs	r3, #0
}
 8004802:	4618      	mov	r0, r3
 8004804:	3710      	adds	r7, #16
 8004806:	46bd      	mov	sp, r7
 8004808:	bd80      	pop	{r7, pc}

0800480a <move_window>:
static
FRESULT move_window (
	FATFS *fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[] */
)
{
 800480a:	b580      	push	{r7, lr}
 800480c:	b082      	sub	sp, #8
 800480e:	af00      	add	r7, sp, #0
 8004810:	6078      	str	r0, [r7, #4]
 8004812:	6039      	str	r1, [r7, #0]
	if (sector != fs->winsect) {	/* Changed current window */
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004818:	683a      	ldr	r2, [r7, #0]
 800481a:	429a      	cmp	r2, r3
 800481c:	d018      	beq.n	8004850 <move_window+0x46>
#if !_FS_READONLY
		if (sync_window(fs) != FR_OK)
 800481e:	6878      	ldr	r0, [r7, #4]
 8004820:	f7ff ffad 	bl	800477e <sync_window>
 8004824:	4603      	mov	r3, r0
 8004826:	2b00      	cmp	r3, #0
 8004828:	d001      	beq.n	800482e <move_window+0x24>
			return FR_DISK_ERR;
 800482a:	2301      	movs	r3, #1
 800482c:	e011      	b.n	8004852 <move_window+0x48>
#endif
		if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	7858      	ldrb	r0, [r3, #1]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004838:	2301      	movs	r3, #1
 800483a:	683a      	ldr	r2, [r7, #0]
 800483c:	f002 ff2c 	bl	8007698 <disk_read>
 8004840:	4603      	mov	r3, r0
 8004842:	2b00      	cmp	r3, #0
 8004844:	d001      	beq.n	800484a <move_window+0x40>
			return FR_DISK_ERR;
 8004846:	2301      	movs	r3, #1
 8004848:	e003      	b.n	8004852 <move_window+0x48>
		fs->winsect = sector;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	683a      	ldr	r2, [r7, #0]
 800484e:	635a      	str	r2, [r3, #52]	; 0x34
	}

	return FR_OK;
 8004850:	2300      	movs	r3, #0
}
 8004852:	4618      	mov	r0, r3
 8004854:	3708      	adds	r7, #8
 8004856:	46bd      	mov	sp, r7
 8004858:	bd80      	pop	{r7, pc}
	...

0800485c <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS *fs		/* File system object */
)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b084      	sub	sp, #16
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8004864:	6878      	ldr	r0, [r7, #4]
 8004866:	f7ff ff8a 	bl	800477e <sync_window>
 800486a:	4603      	mov	r3, r0
 800486c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800486e:	7bfb      	ldrb	r3, [r7, #15]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d14a      	bne.n	800490a <sync_fs+0xae>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	781b      	ldrb	r3, [r3, #0]
 8004878:	2b03      	cmp	r3, #3
 800487a:	d13a      	bne.n	80048f2 <sync_fs+0x96>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	795b      	ldrb	r3, [r3, #5]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d036      	beq.n	80048f2 <sync_fs+0x96>
			fs->winsect = 0;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2200      	movs	r2, #0
 8004888:	635a      	str	r2, [r3, #52]	; 0x34
			/* Create FSInfo structure */
			mem_set(fs->win, 0, 512);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	3338      	adds	r3, #56	; 0x38
 800488e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004892:	2100      	movs	r1, #0
 8004894:	4618      	mov	r0, r3
 8004896:	f7ff ff15 	bl	80046c4 <mem_set>
			ST_WORD(fs->win+BS_55AA, 0xAA55);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	3338      	adds	r3, #56	; 0x38
 800489e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80048a2:	f64a 2255 	movw	r2, #43605	; 0xaa55
 80048a6:	801a      	strh	r2, [r3, #0]
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	3338      	adds	r3, #56	; 0x38
 80048ac:	4a19      	ldr	r2, [pc, #100]	; (8004914 <sync_fs+0xb8>)
 80048ae:	601a      	str	r2, [r3, #0]
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	3338      	adds	r3, #56	; 0x38
 80048b4:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80048b8:	4a17      	ldr	r2, [pc, #92]	; (8004918 <sync_fs+0xbc>)
 80048ba:	601a      	str	r2, [r3, #0]
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	3338      	adds	r3, #56	; 0x38
 80048c0:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80048c4:	687a      	ldr	r2, [r7, #4]
 80048c6:	6912      	ldr	r2, [r2, #16]
 80048c8:	601a      	str	r2, [r3, #0]
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	3338      	adds	r3, #56	; 0x38
 80048ce:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80048d2:	687a      	ldr	r2, [r7, #4]
 80048d4:	68d2      	ldr	r2, [r2, #12]
 80048d6:	601a      	str	r2, [r3, #0]
			/* Write it into the FSInfo sector */
			disk_write(fs->drv, fs->win, fs->fsi_sector, 1);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	7858      	ldrb	r0, [r3, #1]
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	695a      	ldr	r2, [r3, #20]
 80048e6:	2301      	movs	r3, #1
 80048e8:	f002 ff3e 	bl	8007768 <disk_write>
			fs->fsi_flag = 0;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2200      	movs	r2, #0
 80048f0:	715a      	strb	r2, [r3, #5]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	785b      	ldrb	r3, [r3, #1]
 80048f6:	2200      	movs	r2, #0
 80048f8:	2100      	movs	r1, #0
 80048fa:	4618      	mov	r0, r3
 80048fc:	f002 ffb4 	bl	8007868 <disk_ioctl>
 8004900:	4603      	mov	r3, r0
 8004902:	2b00      	cmp	r3, #0
 8004904:	d001      	beq.n	800490a <sync_fs+0xae>
			res = FR_DISK_ERR;
 8004906:	2301      	movs	r3, #1
 8004908:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800490a:	7bfb      	ldrb	r3, [r7, #15]
}
 800490c:	4618      	mov	r0, r3
 800490e:	3710      	adds	r7, #16
 8004910:	46bd      	mov	sp, r7
 8004912:	bd80      	pop	{r7, pc}
 8004914:	41615252 	.word	0x41615252
 8004918:	61417272 	.word	0x61417272

0800491c <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800491c:	b480      	push	{r7}
 800491e:	b083      	sub	sp, #12
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
 8004924:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	3b02      	subs	r3, #2
 800492a:	603b      	str	r3, [r7, #0]
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	69db      	ldr	r3, [r3, #28]
 8004930:	3b02      	subs	r3, #2
 8004932:	683a      	ldr	r2, [r7, #0]
 8004934:	429a      	cmp	r2, r3
 8004936:	d301      	bcc.n	800493c <clust2sect+0x20>
 8004938:	2300      	movs	r3, #0
 800493a:	e008      	b.n	800494e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	789b      	ldrb	r3, [r3, #2]
 8004940:	461a      	mov	r2, r3
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	fb03 f202 	mul.w	r2, r3, r2
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800494c:	4413      	add	r3, r2
}
 800494e:	4618      	mov	r0, r3
 8004950:	370c      	adds	r7, #12
 8004952:	46bd      	mov	sp, r7
 8004954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004958:	4770      	bx	lr

0800495a <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, Else:Cluster status */
	FATFS *fs,	/* File system object */
	DWORD clst	/* Cluster# to get the link information */
)
{
 800495a:	b580      	push	{r7, lr}
 800495c:	b086      	sub	sp, #24
 800495e:	af00      	add	r7, sp, #0
 8004960:	6078      	str	r0, [r7, #4]
 8004962:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;


	if (clst < 2 || clst >= fs->n_fatent)	/* Check range */
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	2b01      	cmp	r3, #1
 8004968:	d904      	bls.n	8004974 <get_fat+0x1a>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	69db      	ldr	r3, [r3, #28]
 800496e:	683a      	ldr	r2, [r7, #0]
 8004970:	429a      	cmp	r2, r3
 8004972:	d301      	bcc.n	8004978 <get_fat+0x1e>
		return 1;
 8004974:	2301      	movs	r3, #1
 8004976:	e085      	b.n	8004a84 <get_fat+0x12a>

	switch (fs->fs_type) {
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	781b      	ldrb	r3, [r3, #0]
 800497c:	2b03      	cmp	r3, #3
 800497e:	d05f      	beq.n	8004a40 <get_fat+0xe6>
 8004980:	2b03      	cmp	r3, #3
 8004982:	dc7d      	bgt.n	8004a80 <get_fat+0x126>
 8004984:	2b01      	cmp	r3, #1
 8004986:	d002      	beq.n	800498e <get_fat+0x34>
 8004988:	2b02      	cmp	r3, #2
 800498a:	d042      	beq.n	8004a12 <get_fat+0xb8>
 800498c:	e078      	b.n	8004a80 <get_fat+0x126>
	case FS_FAT12 :
		bc = (UINT)clst; bc += bc / 2;
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	613b      	str	r3, [r7, #16]
 8004992:	693b      	ldr	r3, [r7, #16]
 8004994:	085b      	lsrs	r3, r3, #1
 8004996:	693a      	ldr	r2, [r7, #16]
 8004998:	4413      	add	r3, r2
 800499a:	613b      	str	r3, [r7, #16]
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80049a0:	693b      	ldr	r3, [r7, #16]
 80049a2:	0a5b      	lsrs	r3, r3, #9
 80049a4:	4413      	add	r3, r2
 80049a6:	4619      	mov	r1, r3
 80049a8:	6878      	ldr	r0, [r7, #4]
 80049aa:	f7ff ff2e 	bl	800480a <move_window>
 80049ae:	4603      	mov	r3, r0
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d15e      	bne.n	8004a72 <get_fat+0x118>
		wc = fs->win[bc % SS(fs)]; bc++;
 80049b4:	693b      	ldr	r3, [r7, #16]
 80049b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049ba:	687a      	ldr	r2, [r7, #4]
 80049bc:	4413      	add	r3, r2
 80049be:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80049c2:	60fb      	str	r3, [r7, #12]
 80049c4:	693b      	ldr	r3, [r7, #16]
 80049c6:	3301      	adds	r3, #1
 80049c8:	613b      	str	r3, [r7, #16]
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80049ce:	693b      	ldr	r3, [r7, #16]
 80049d0:	0a5b      	lsrs	r3, r3, #9
 80049d2:	4413      	add	r3, r2
 80049d4:	4619      	mov	r1, r3
 80049d6:	6878      	ldr	r0, [r7, #4]
 80049d8:	f7ff ff17 	bl	800480a <move_window>
 80049dc:	4603      	mov	r3, r0
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d149      	bne.n	8004a76 <get_fat+0x11c>
		wc |= fs->win[bc % SS(fs)] << 8;
 80049e2:	693b      	ldr	r3, [r7, #16]
 80049e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049e8:	687a      	ldr	r2, [r7, #4]
 80049ea:	4413      	add	r3, r2
 80049ec:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80049f0:	021b      	lsls	r3, r3, #8
 80049f2:	461a      	mov	r2, r3
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	4313      	orrs	r3, r2
 80049f8:	60fb      	str	r3, [r7, #12]
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	f003 0301 	and.w	r3, r3, #1
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d002      	beq.n	8004a0a <get_fat+0xb0>
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	091b      	lsrs	r3, r3, #4
 8004a08:	e03c      	b.n	8004a84 <get_fat+0x12a>
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a10:	e038      	b.n	8004a84 <get_fat+0x12a>

	case FS_FAT16 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	0a1b      	lsrs	r3, r3, #8
 8004a1a:	4413      	add	r3, r2
 8004a1c:	4619      	mov	r1, r3
 8004a1e:	6878      	ldr	r0, [r7, #4]
 8004a20:	f7ff fef3 	bl	800480a <move_window>
 8004a24:	4603      	mov	r3, r0
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d127      	bne.n	8004a7a <get_fat+0x120>
		p = &fs->win[clst * 2 % SS(fs)];
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	005b      	lsls	r3, r3, #1
 8004a2e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8004a32:	3338      	adds	r3, #56	; 0x38
 8004a34:	687a      	ldr	r2, [r7, #4]
 8004a36:	4413      	add	r3, r2
 8004a38:	617b      	str	r3, [r7, #20]
		return LD_WORD(p);
 8004a3a:	697b      	ldr	r3, [r7, #20]
 8004a3c:	881b      	ldrh	r3, [r3, #0]
 8004a3e:	e021      	b.n	8004a84 <get_fat+0x12a>

	case FS_FAT32 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	09db      	lsrs	r3, r3, #7
 8004a48:	4413      	add	r3, r2
 8004a4a:	4619      	mov	r1, r3
 8004a4c:	6878      	ldr	r0, [r7, #4]
 8004a4e:	f7ff fedc 	bl	800480a <move_window>
 8004a52:	4603      	mov	r3, r0
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d112      	bne.n	8004a7e <get_fat+0x124>
		p = &fs->win[clst * 4 % SS(fs)];
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	009b      	lsls	r3, r3, #2
 8004a5c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8004a60:	3338      	adds	r3, #56	; 0x38
 8004a62:	687a      	ldr	r2, [r7, #4]
 8004a64:	4413      	add	r3, r2
 8004a66:	617b      	str	r3, [r7, #20]
		return LD_DWORD(p) & 0x0FFFFFFF;
 8004a68:	697b      	ldr	r3, [r7, #20]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004a70:	e008      	b.n	8004a84 <get_fat+0x12a>
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
 8004a72:	bf00      	nop
 8004a74:	e004      	b.n	8004a80 <get_fat+0x126>
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
 8004a76:	bf00      	nop
 8004a78:	e002      	b.n	8004a80 <get_fat+0x126>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
 8004a7a:	bf00      	nop
 8004a7c:	e000      	b.n	8004a80 <get_fat+0x126>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
 8004a7e:	bf00      	nop
	}

	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
 8004a80:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004a84:	4618      	mov	r0, r3
 8004a86:	3718      	adds	r7, #24
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	bd80      	pop	{r7, pc}

08004a8c <put_fat>:
FRESULT put_fat (
	FATFS *fs,	/* File system object */
	DWORD clst,	/* Cluster# to be changed in range of 2 to fs->n_fatent - 1 */
	DWORD val	/* New value to mark the cluster */
)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b088      	sub	sp, #32
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	60f8      	str	r0, [r7, #12]
 8004a94:	60b9      	str	r1, [r7, #8]
 8004a96:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8004a98:	68bb      	ldr	r3, [r7, #8]
 8004a9a:	2b01      	cmp	r3, #1
 8004a9c:	d904      	bls.n	8004aa8 <put_fat+0x1c>
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	69db      	ldr	r3, [r3, #28]
 8004aa2:	68ba      	ldr	r2, [r7, #8]
 8004aa4:	429a      	cmp	r2, r3
 8004aa6:	d302      	bcc.n	8004aae <put_fat+0x22>
		res = FR_INT_ERR;
 8004aa8:	2302      	movs	r3, #2
 8004aaa:	77fb      	strb	r3, [r7, #31]
 8004aac:	e0bf      	b.n	8004c2e <put_fat+0x1a2>

	} else {
		switch (fs->fs_type) {
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	781b      	ldrb	r3, [r3, #0]
 8004ab2:	2b03      	cmp	r3, #3
 8004ab4:	f000 808d 	beq.w	8004bd2 <put_fat+0x146>
 8004ab8:	2b03      	cmp	r3, #3
 8004aba:	f300 80ab 	bgt.w	8004c14 <put_fat+0x188>
 8004abe:	2b01      	cmp	r3, #1
 8004ac0:	d002      	beq.n	8004ac8 <put_fat+0x3c>
 8004ac2:	2b02      	cmp	r3, #2
 8004ac4:	d06a      	beq.n	8004b9c <put_fat+0x110>
 8004ac6:	e0a5      	b.n	8004c14 <put_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8004ac8:	68bb      	ldr	r3, [r7, #8]
 8004aca:	617b      	str	r3, [r7, #20]
 8004acc:	697b      	ldr	r3, [r7, #20]
 8004ace:	085b      	lsrs	r3, r3, #1
 8004ad0:	697a      	ldr	r2, [r7, #20]
 8004ad2:	4413      	add	r3, r2
 8004ad4:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004ada:	697b      	ldr	r3, [r7, #20]
 8004adc:	0a5b      	lsrs	r3, r3, #9
 8004ade:	4413      	add	r3, r2
 8004ae0:	4619      	mov	r1, r3
 8004ae2:	68f8      	ldr	r0, [r7, #12]
 8004ae4:	f7ff fe91 	bl	800480a <move_window>
 8004ae8:	4603      	mov	r3, r0
 8004aea:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004aec:	7ffb      	ldrb	r3, [r7, #31]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	f040 8093 	bne.w	8004c1a <put_fat+0x18e>
			p = &fs->win[bc % SS(fs)];
 8004af4:	697b      	ldr	r3, [r7, #20]
 8004af6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004afa:	3338      	adds	r3, #56	; 0x38
 8004afc:	68fa      	ldr	r2, [r7, #12]
 8004afe:	4413      	add	r3, r2
 8004b00:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8004b02:	68bb      	ldr	r3, [r7, #8]
 8004b04:	f003 0301 	and.w	r3, r3, #1
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d00d      	beq.n	8004b28 <put_fat+0x9c>
 8004b0c:	69bb      	ldr	r3, [r7, #24]
 8004b0e:	781b      	ldrb	r3, [r3, #0]
 8004b10:	b25b      	sxtb	r3, r3
 8004b12:	f003 030f 	and.w	r3, r3, #15
 8004b16:	b25a      	sxtb	r2, r3
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	b2db      	uxtb	r3, r3
 8004b1c:	011b      	lsls	r3, r3, #4
 8004b1e:	b25b      	sxtb	r3, r3
 8004b20:	4313      	orrs	r3, r2
 8004b22:	b25b      	sxtb	r3, r3
 8004b24:	b2db      	uxtb	r3, r3
 8004b26:	e001      	b.n	8004b2c <put_fat+0xa0>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	b2db      	uxtb	r3, r3
 8004b2c:	69ba      	ldr	r2, [r7, #24]
 8004b2e:	7013      	strb	r3, [r2, #0]
			bc++;
 8004b30:	697b      	ldr	r3, [r7, #20]
 8004b32:	3301      	adds	r3, #1
 8004b34:	617b      	str	r3, [r7, #20]
			fs->wflag = 1;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	2201      	movs	r2, #1
 8004b3a:	711a      	strb	r2, [r3, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004b40:	697b      	ldr	r3, [r7, #20]
 8004b42:	0a5b      	lsrs	r3, r3, #9
 8004b44:	4413      	add	r3, r2
 8004b46:	4619      	mov	r1, r3
 8004b48:	68f8      	ldr	r0, [r7, #12]
 8004b4a:	f7ff fe5e 	bl	800480a <move_window>
 8004b4e:	4603      	mov	r3, r0
 8004b50:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004b52:	7ffb      	ldrb	r3, [r7, #31]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d162      	bne.n	8004c1e <put_fat+0x192>
			p = &fs->win[bc % SS(fs)];
 8004b58:	697b      	ldr	r3, [r7, #20]
 8004b5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b5e:	3338      	adds	r3, #56	; 0x38
 8004b60:	68fa      	ldr	r2, [r7, #12]
 8004b62:	4413      	add	r3, r2
 8004b64:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8004b66:	68bb      	ldr	r3, [r7, #8]
 8004b68:	f003 0301 	and.w	r3, r3, #1
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d003      	beq.n	8004b78 <put_fat+0xec>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	091b      	lsrs	r3, r3, #4
 8004b74:	b2db      	uxtb	r3, r3
 8004b76:	e00e      	b.n	8004b96 <put_fat+0x10a>
 8004b78:	69bb      	ldr	r3, [r7, #24]
 8004b7a:	781b      	ldrb	r3, [r3, #0]
 8004b7c:	b25b      	sxtb	r3, r3
 8004b7e:	f023 030f 	bic.w	r3, r3, #15
 8004b82:	b25a      	sxtb	r2, r3
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	0a1b      	lsrs	r3, r3, #8
 8004b88:	b25b      	sxtb	r3, r3
 8004b8a:	f003 030f 	and.w	r3, r3, #15
 8004b8e:	b25b      	sxtb	r3, r3
 8004b90:	4313      	orrs	r3, r2
 8004b92:	b25b      	sxtb	r3, r3
 8004b94:	b2db      	uxtb	r3, r3
 8004b96:	69ba      	ldr	r2, [r7, #24]
 8004b98:	7013      	strb	r3, [r2, #0]
			break;
 8004b9a:	e045      	b.n	8004c28 <put_fat+0x19c>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004ba0:	68bb      	ldr	r3, [r7, #8]
 8004ba2:	0a1b      	lsrs	r3, r3, #8
 8004ba4:	4413      	add	r3, r2
 8004ba6:	4619      	mov	r1, r3
 8004ba8:	68f8      	ldr	r0, [r7, #12]
 8004baa:	f7ff fe2e 	bl	800480a <move_window>
 8004bae:	4603      	mov	r3, r0
 8004bb0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004bb2:	7ffb      	ldrb	r3, [r7, #31]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d134      	bne.n	8004c22 <put_fat+0x196>
			p = &fs->win[clst * 2 % SS(fs)];
 8004bb8:	68bb      	ldr	r3, [r7, #8]
 8004bba:	005b      	lsls	r3, r3, #1
 8004bbc:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8004bc0:	3338      	adds	r3, #56	; 0x38
 8004bc2:	68fa      	ldr	r2, [r7, #12]
 8004bc4:	4413      	add	r3, r2
 8004bc6:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	b29a      	uxth	r2, r3
 8004bcc:	69bb      	ldr	r3, [r7, #24]
 8004bce:	801a      	strh	r2, [r3, #0]
			break;
 8004bd0:	e02a      	b.n	8004c28 <put_fat+0x19c>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004bd6:	68bb      	ldr	r3, [r7, #8]
 8004bd8:	09db      	lsrs	r3, r3, #7
 8004bda:	4413      	add	r3, r2
 8004bdc:	4619      	mov	r1, r3
 8004bde:	68f8      	ldr	r0, [r7, #12]
 8004be0:	f7ff fe13 	bl	800480a <move_window>
 8004be4:	4603      	mov	r3, r0
 8004be6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004be8:	7ffb      	ldrb	r3, [r7, #31]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d11b      	bne.n	8004c26 <put_fat+0x19a>
			p = &fs->win[clst * 4 % SS(fs)];
 8004bee:	68bb      	ldr	r3, [r7, #8]
 8004bf0:	009b      	lsls	r3, r3, #2
 8004bf2:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8004bf6:	3338      	adds	r3, #56	; 0x38
 8004bf8:	68fa      	ldr	r2, [r7, #12]
 8004bfa:	4413      	add	r3, r2
 8004bfc:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 8004bfe:	69bb      	ldr	r3, [r7, #24]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8004c06:	687a      	ldr	r2, [r7, #4]
 8004c08:	4313      	orrs	r3, r2
 8004c0a:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 8004c0c:	69bb      	ldr	r3, [r7, #24]
 8004c0e:	687a      	ldr	r2, [r7, #4]
 8004c10:	601a      	str	r2, [r3, #0]
			break;
 8004c12:	e009      	b.n	8004c28 <put_fat+0x19c>

		default :
			res = FR_INT_ERR;
 8004c14:	2302      	movs	r3, #2
 8004c16:	77fb      	strb	r3, [r7, #31]
 8004c18:	e006      	b.n	8004c28 <put_fat+0x19c>
			if (res != FR_OK) break;
 8004c1a:	bf00      	nop
 8004c1c:	e004      	b.n	8004c28 <put_fat+0x19c>
			if (res != FR_OK) break;
 8004c1e:	bf00      	nop
 8004c20:	e002      	b.n	8004c28 <put_fat+0x19c>
			if (res != FR_OK) break;
 8004c22:	bf00      	nop
 8004c24:	e000      	b.n	8004c28 <put_fat+0x19c>
			if (res != FR_OK) break;
 8004c26:	bf00      	nop
		}
		fs->wflag = 1;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	2201      	movs	r2, #1
 8004c2c:	711a      	strb	r2, [r3, #4]
	}

	return res;
 8004c2e:	7ffb      	ldrb	r3, [r7, #31]
}
 8004c30:	4618      	mov	r0, r3
 8004c32:	3720      	adds	r7, #32
 8004c34:	46bd      	mov	sp, r7
 8004c36:	bd80      	pop	{r7, pc}

08004c38 <remove_chain>:
static
FRESULT remove_chain (
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b084      	sub	sp, #16
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
 8004c40:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_ERASE
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	2b01      	cmp	r3, #1
 8004c46:	d904      	bls.n	8004c52 <remove_chain+0x1a>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	69db      	ldr	r3, [r3, #28]
 8004c4c:	683a      	ldr	r2, [r7, #0]
 8004c4e:	429a      	cmp	r2, r3
 8004c50:	d302      	bcc.n	8004c58 <remove_chain+0x20>
		res = FR_INT_ERR;
 8004c52:	2302      	movs	r3, #2
 8004c54:	73fb      	strb	r3, [r7, #15]
 8004c56:	e039      	b.n	8004ccc <remove_chain+0x94>

	} else {
		res = FR_OK;
 8004c58:	2300      	movs	r3, #0
 8004c5a:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8004c5c:	e02d      	b.n	8004cba <remove_chain+0x82>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 8004c5e:	6839      	ldr	r1, [r7, #0]
 8004c60:	6878      	ldr	r0, [r7, #4]
 8004c62:	f7ff fe7a 	bl	800495a <get_fat>
 8004c66:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 8004c68:	68bb      	ldr	r3, [r7, #8]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d02b      	beq.n	8004cc6 <remove_chain+0x8e>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 8004c6e:	68bb      	ldr	r3, [r7, #8]
 8004c70:	2b01      	cmp	r3, #1
 8004c72:	d102      	bne.n	8004c7a <remove_chain+0x42>
 8004c74:	2302      	movs	r3, #2
 8004c76:	73fb      	strb	r3, [r7, #15]
 8004c78:	e028      	b.n	8004ccc <remove_chain+0x94>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 8004c7a:	68bb      	ldr	r3, [r7, #8]
 8004c7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c80:	d102      	bne.n	8004c88 <remove_chain+0x50>
 8004c82:	2301      	movs	r3, #1
 8004c84:	73fb      	strb	r3, [r7, #15]
 8004c86:	e021      	b.n	8004ccc <remove_chain+0x94>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 8004c88:	2200      	movs	r2, #0
 8004c8a:	6839      	ldr	r1, [r7, #0]
 8004c8c:	6878      	ldr	r0, [r7, #4]
 8004c8e:	f7ff fefd 	bl	8004a8c <put_fat>
 8004c92:	4603      	mov	r3, r0
 8004c94:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8004c96:	7bfb      	ldrb	r3, [r7, #15]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d116      	bne.n	8004cca <remove_chain+0x92>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	691b      	ldr	r3, [r3, #16]
 8004ca0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ca4:	d007      	beq.n	8004cb6 <remove_chain+0x7e>
				fs->free_clust++;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	691b      	ldr	r3, [r3, #16]
 8004caa:	1c5a      	adds	r2, r3, #1
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	611a      	str	r2, [r3, #16]
				fs->fsi_flag = 1;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2201      	movs	r2, #1
 8004cb4:	715a      	strb	r2, [r3, #5]
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_ERASE_SECTOR, rt);		/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	69db      	ldr	r3, [r3, #28]
 8004cbe:	683a      	ldr	r2, [r7, #0]
 8004cc0:	429a      	cmp	r2, r3
 8004cc2:	d3cc      	bcc.n	8004c5e <remove_chain+0x26>
 8004cc4:	e002      	b.n	8004ccc <remove_chain+0x94>
			if (nxt == 0) break;				/* Empty cluster? */
 8004cc6:	bf00      	nop
 8004cc8:	e000      	b.n	8004ccc <remove_chain+0x94>
			if (res != FR_OK) break;
 8004cca:	bf00      	nop
		}
	}

	return res;
 8004ccc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cce:	4618      	mov	r0, r3
 8004cd0:	3710      	adds	r7, #16
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	bd80      	pop	{r7, pc}

08004cd6 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 8004cd6:	b580      	push	{r7, lr}
 8004cd8:	b086      	sub	sp, #24
 8004cda:	af00      	add	r7, sp, #0
 8004cdc:	6078      	str	r0, [r7, #4]
 8004cde:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d10d      	bne.n	8004d02 <create_chain+0x2c>
		scl = fs->last_clust;			/* Get suggested start point */
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	68db      	ldr	r3, [r3, #12]
 8004cea:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 8004cec:	693b      	ldr	r3, [r7, #16]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d004      	beq.n	8004cfc <create_chain+0x26>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	69db      	ldr	r3, [r3, #28]
 8004cf6:	693a      	ldr	r2, [r7, #16]
 8004cf8:	429a      	cmp	r2, r3
 8004cfa:	d315      	bcc.n	8004d28 <create_chain+0x52>
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	613b      	str	r3, [r7, #16]
 8004d00:	e012      	b.n	8004d28 <create_chain+0x52>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 8004d02:	6839      	ldr	r1, [r7, #0]
 8004d04:	6878      	ldr	r0, [r7, #4]
 8004d06:	f7ff fe28 	bl	800495a <get_fat>
 8004d0a:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* It is an invalid cluster */
 8004d0c:	68bb      	ldr	r3, [r7, #8]
 8004d0e:	2b01      	cmp	r3, #1
 8004d10:	d801      	bhi.n	8004d16 <create_chain+0x40>
 8004d12:	2301      	movs	r3, #1
 8004d14:	e064      	b.n	8004de0 <create_chain+0x10a>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	69db      	ldr	r3, [r3, #28]
 8004d1a:	68ba      	ldr	r2, [r7, #8]
 8004d1c:	429a      	cmp	r2, r3
 8004d1e:	d201      	bcs.n	8004d24 <create_chain+0x4e>
 8004d20:	68bb      	ldr	r3, [r7, #8]
 8004d22:	e05d      	b.n	8004de0 <create_chain+0x10a>
		scl = clst;
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 8004d28:	693b      	ldr	r3, [r7, #16]
 8004d2a:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 8004d2c:	697b      	ldr	r3, [r7, #20]
 8004d2e:	3301      	adds	r3, #1
 8004d30:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Wrap around */
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	69db      	ldr	r3, [r3, #28]
 8004d36:	697a      	ldr	r2, [r7, #20]
 8004d38:	429a      	cmp	r2, r3
 8004d3a:	d307      	bcc.n	8004d4c <create_chain+0x76>
			ncl = 2;
 8004d3c:	2302      	movs	r3, #2
 8004d3e:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 8004d40:	697a      	ldr	r2, [r7, #20]
 8004d42:	693b      	ldr	r3, [r7, #16]
 8004d44:	429a      	cmp	r2, r3
 8004d46:	d901      	bls.n	8004d4c <create_chain+0x76>
 8004d48:	2300      	movs	r3, #0
 8004d4a:	e049      	b.n	8004de0 <create_chain+0x10a>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 8004d4c:	6979      	ldr	r1, [r7, #20]
 8004d4e:	6878      	ldr	r0, [r7, #4]
 8004d50:	f7ff fe03 	bl	800495a <get_fat>
 8004d54:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 8004d56:	68bb      	ldr	r3, [r7, #8]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d00e      	beq.n	8004d7a <create_chain+0xa4>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d62:	d002      	beq.n	8004d6a <create_chain+0x94>
 8004d64:	68bb      	ldr	r3, [r7, #8]
 8004d66:	2b01      	cmp	r3, #1
 8004d68:	d101      	bne.n	8004d6e <create_chain+0x98>
			return cs;
 8004d6a:	68bb      	ldr	r3, [r7, #8]
 8004d6c:	e038      	b.n	8004de0 <create_chain+0x10a>
		if (ncl == scl) return 0;		/* No free cluster */
 8004d6e:	697a      	ldr	r2, [r7, #20]
 8004d70:	693b      	ldr	r3, [r7, #16]
 8004d72:	429a      	cmp	r2, r3
 8004d74:	d1da      	bne.n	8004d2c <create_chain+0x56>
 8004d76:	2300      	movs	r3, #0
 8004d78:	e032      	b.n	8004de0 <create_chain+0x10a>
		if (cs == 0) break;				/* Found a free cluster */
 8004d7a:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 8004d7c:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 8004d80:	6979      	ldr	r1, [r7, #20]
 8004d82:	6878      	ldr	r0, [r7, #4]
 8004d84:	f7ff fe82 	bl	8004a8c <put_fat>
 8004d88:	4603      	mov	r3, r0
 8004d8a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 8004d8c:	7bfb      	ldrb	r3, [r7, #15]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d109      	bne.n	8004da6 <create_chain+0xd0>
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d006      	beq.n	8004da6 <create_chain+0xd0>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 8004d98:	697a      	ldr	r2, [r7, #20]
 8004d9a:	6839      	ldr	r1, [r7, #0]
 8004d9c:	6878      	ldr	r0, [r7, #4]
 8004d9e:	f7ff fe75 	bl	8004a8c <put_fat>
 8004da2:	4603      	mov	r3, r0
 8004da4:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 8004da6:	7bfb      	ldrb	r3, [r7, #15]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d110      	bne.n	8004dce <create_chain+0xf8>
		fs->last_clust = ncl;			/* Update FSINFO */
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	697a      	ldr	r2, [r7, #20]
 8004db0:	60da      	str	r2, [r3, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	691b      	ldr	r3, [r3, #16]
 8004db6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dba:	d010      	beq.n	8004dde <create_chain+0x108>
			fs->free_clust--;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	691b      	ldr	r3, [r3, #16]
 8004dc0:	1e5a      	subs	r2, r3, #1
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	611a      	str	r2, [r3, #16]
			fs->fsi_flag = 1;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2201      	movs	r2, #1
 8004dca:	715a      	strb	r2, [r3, #5]
 8004dcc:	e007      	b.n	8004dde <create_chain+0x108>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 8004dce:	7bfb      	ldrb	r3, [r7, #15]
 8004dd0:	2b01      	cmp	r3, #1
 8004dd2:	d102      	bne.n	8004dda <create_chain+0x104>
 8004dd4:	f04f 33ff 	mov.w	r3, #4294967295
 8004dd8:	e000      	b.n	8004ddc <create_chain+0x106>
 8004dda:	2301      	movs	r3, #1
 8004ddc:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 8004dde:	697b      	ldr	r3, [r7, #20]
}
 8004de0:	4618      	mov	r0, r3
 8004de2:	3718      	adds	r7, #24
 8004de4:	46bd      	mov	sp, r7
 8004de6:	bd80      	pop	{r7, pc}

08004de8 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR *dj,		/* Pointer to directory object */
	WORD idx		/* Index of directory table */
)
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b084      	sub	sp, #16
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
 8004df0:	460b      	mov	r3, r1
 8004df2:	807b      	strh	r3, [r7, #2]
	DWORD clst;
	WORD ic;


	dj->index = idx;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	887a      	ldrh	r2, [r7, #2]
 8004df8:	80da      	strh	r2, [r3, #6]
	clst = dj->sclust;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	689b      	ldr	r3, [r3, #8]
 8004dfe:	60fb      	str	r3, [r7, #12]
	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	2b01      	cmp	r3, #1
 8004e04:	d005      	beq.n	8004e12 <dir_sdi+0x2a>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	69db      	ldr	r3, [r3, #28]
 8004e0c:	68fa      	ldr	r2, [r7, #12]
 8004e0e:	429a      	cmp	r2, r3
 8004e10:	d301      	bcc.n	8004e16 <dir_sdi+0x2e>
		return FR_INT_ERR;
 8004e12:	2302      	movs	r3, #2
 8004e14:	e066      	b.n	8004ee4 <dir_sdi+0xfc>
	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d108      	bne.n	8004e2e <dir_sdi+0x46>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	781b      	ldrb	r3, [r3, #0]
 8004e22:	2b03      	cmp	r3, #3
 8004e24:	d103      	bne.n	8004e2e <dir_sdi+0x46>
		clst = dj->fs->dirbase;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e2c:	60fb      	str	r3, [r7, #12]

	if (clst == 0) {	/* Static table (root-dir in FAT12/16) */
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d114      	bne.n	8004e5e <dir_sdi+0x76>
		dj->clust = clst;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	68fa      	ldr	r2, [r7, #12]
 8004e38:	60da      	str	r2, [r3, #12]
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	891b      	ldrh	r3, [r3, #8]
 8004e40:	887a      	ldrh	r2, [r7, #2]
 8004e42:	429a      	cmp	r2, r3
 8004e44:	d301      	bcc.n	8004e4a <dir_sdi+0x62>
			return FR_INT_ERR;
 8004e46:	2302      	movs	r3, #2
 8004e48:	e04c      	b.n	8004ee4 <dir_sdi+0xfc>
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e50:	887a      	ldrh	r2, [r7, #2]
 8004e52:	0912      	lsrs	r2, r2, #4
 8004e54:	b292      	uxth	r2, r2
 8004e56:	441a      	add	r2, r3
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	611a      	str	r2, [r3, #16]
 8004e5c:	e036      	b.n	8004ecc <dir_sdi+0xe4>
	}
	else {				/* Dynamic table (sub-dirs or root-dir in FAT32) */
		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	789b      	ldrb	r3, [r3, #2]
 8004e64:	b29b      	uxth	r3, r3
 8004e66:	011b      	lsls	r3, r3, #4
 8004e68:	817b      	strh	r3, [r7, #10]
		while (idx >= ic) {	/* Follow cluster chain */
 8004e6a:	e01b      	b.n	8004ea4 <dir_sdi+0xbc>
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	68f9      	ldr	r1, [r7, #12]
 8004e72:	4618      	mov	r0, r3
 8004e74:	f7ff fd71 	bl	800495a <get_fat>
 8004e78:	60f8      	str	r0, [r7, #12]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e80:	d101      	bne.n	8004e86 <dir_sdi+0x9e>
 8004e82:	2301      	movs	r3, #1
 8004e84:	e02e      	b.n	8004ee4 <dir_sdi+0xfc>
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	2b01      	cmp	r3, #1
 8004e8a:	d905      	bls.n	8004e98 <dir_sdi+0xb0>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	69db      	ldr	r3, [r3, #28]
 8004e92:	68fa      	ldr	r2, [r7, #12]
 8004e94:	429a      	cmp	r2, r3
 8004e96:	d301      	bcc.n	8004e9c <dir_sdi+0xb4>
				return FR_INT_ERR;
 8004e98:	2302      	movs	r3, #2
 8004e9a:	e023      	b.n	8004ee4 <dir_sdi+0xfc>
			idx -= ic;
 8004e9c:	887a      	ldrh	r2, [r7, #2]
 8004e9e:	897b      	ldrh	r3, [r7, #10]
 8004ea0:	1ad3      	subs	r3, r2, r3
 8004ea2:	807b      	strh	r3, [r7, #2]
		while (idx >= ic) {	/* Follow cluster chain */
 8004ea4:	887a      	ldrh	r2, [r7, #2]
 8004ea6:	897b      	ldrh	r3, [r7, #10]
 8004ea8:	429a      	cmp	r2, r3
 8004eaa:	d2df      	bcs.n	8004e6c <dir_sdi+0x84>
		}
		dj->clust = clst;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	68fa      	ldr	r2, [r7, #12]
 8004eb0:	60da      	str	r2, [r3, #12]
		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	68f9      	ldr	r1, [r7, #12]
 8004eb8:	4618      	mov	r0, r3
 8004eba:	f7ff fd2f 	bl	800491c <clust2sect>
 8004ebe:	4602      	mov	r2, r0
 8004ec0:	887b      	ldrh	r3, [r7, #2]
 8004ec2:	091b      	lsrs	r3, r3, #4
 8004ec4:	b29b      	uxth	r3, r3
 8004ec6:	441a      	add	r2, r3
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	611a      	str	r2, [r3, #16]
	}

	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector */
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8004ed4:	887b      	ldrh	r3, [r7, #2]
 8004ed6:	f003 030f 	and.w	r3, r3, #15
 8004eda:	015b      	lsls	r3, r3, #5
 8004edc:	441a      	add	r2, r3
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	615a      	str	r2, [r3, #20]

	return FR_OK;	/* Seek succeeded */
 8004ee2:	2300      	movs	r3, #0
}
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	3710      	adds	r7, #16
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	bd80      	pop	{r7, pc}

08004eec <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR *dj,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8004eec:	b590      	push	{r4, r7, lr}
 8004eee:	b085      	sub	sp, #20
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
 8004ef4:	6039      	str	r1, [r7, #0]
	DWORD clst;
	WORD i;


	stretch = stretch;		/* To suppress warning on read-only cfg. */
	i = dj->index + 1;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	88db      	ldrh	r3, [r3, #6]
 8004efa:	3301      	adds	r3, #1
 8004efc:	813b      	strh	r3, [r7, #8]
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
 8004efe:	893b      	ldrh	r3, [r7, #8]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d003      	beq.n	8004f0c <dir_next+0x20>
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	691b      	ldr	r3, [r3, #16]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d101      	bne.n	8004f10 <dir_next+0x24>
		return FR_NO_FILE;
 8004f0c:	2304      	movs	r3, #4
 8004f0e:	e0bb      	b.n	8005088 <dir_next+0x19c>

	if (!(i % (SS(dj->fs) / SZ_DIR))) {	/* Sector changed? */
 8004f10:	893b      	ldrh	r3, [r7, #8]
 8004f12:	f003 030f 	and.w	r3, r3, #15
 8004f16:	b29b      	uxth	r3, r3
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	f040 80a6 	bne.w	800506a <dir_next+0x17e>
		dj->sect++;					/* Next sector */
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	691b      	ldr	r3, [r3, #16]
 8004f22:	1c5a      	adds	r2, r3, #1
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	611a      	str	r2, [r3, #16]

		if (dj->clust == 0) {	/* Static table */
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	68db      	ldr	r3, [r3, #12]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d108      	bne.n	8004f42 <dir_next+0x56>
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	891b      	ldrh	r3, [r3, #8]
 8004f36:	893a      	ldrh	r2, [r7, #8]
 8004f38:	429a      	cmp	r2, r3
 8004f3a:	f0c0 8096 	bcc.w	800506a <dir_next+0x17e>
				return FR_NO_FILE;
 8004f3e:	2304      	movs	r3, #4
 8004f40:	e0a2      	b.n	8005088 <dir_next+0x19c>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
 8004f42:	893b      	ldrh	r3, [r7, #8]
 8004f44:	091b      	lsrs	r3, r3, #4
 8004f46:	b29b      	uxth	r3, r3
 8004f48:	461a      	mov	r2, r3
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	789b      	ldrb	r3, [r3, #2]
 8004f50:	3b01      	subs	r3, #1
 8004f52:	4013      	ands	r3, r2
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	f040 8088 	bne.w	800506a <dir_next+0x17e>
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681a      	ldr	r2, [r3, #0]
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	68db      	ldr	r3, [r3, #12]
 8004f62:	4619      	mov	r1, r3
 8004f64:	4610      	mov	r0, r2
 8004f66:	f7ff fcf8 	bl	800495a <get_fat>
 8004f6a:	60f8      	str	r0, [r7, #12]
				if (clst <= 1) return FR_INT_ERR;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	2b01      	cmp	r3, #1
 8004f70:	d801      	bhi.n	8004f76 <dir_next+0x8a>
 8004f72:	2302      	movs	r3, #2
 8004f74:	e088      	b.n	8005088 <dir_next+0x19c>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f7c:	d101      	bne.n	8004f82 <dir_next+0x96>
 8004f7e:	2301      	movs	r3, #1
 8004f80:	e082      	b.n	8005088 <dir_next+0x19c>
				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	69db      	ldr	r3, [r3, #28]
 8004f88:	68fa      	ldr	r2, [r7, #12]
 8004f8a:	429a      	cmp	r2, r3
 8004f8c:	d361      	bcc.n	8005052 <dir_next+0x166>
#if !_FS_READONLY
					BYTE c;
					if (!stretch) return FR_NO_FILE;			/* When do not stretch, report EOT */
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d101      	bne.n	8004f98 <dir_next+0xac>
 8004f94:	2304      	movs	r3, #4
 8004f96:	e077      	b.n	8005088 <dir_next+0x19c>
					clst = create_chain(dj->fs, dj->clust);		/* Stretch cluster chain */
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681a      	ldr	r2, [r3, #0]
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	68db      	ldr	r3, [r3, #12]
 8004fa0:	4619      	mov	r1, r3
 8004fa2:	4610      	mov	r0, r2
 8004fa4:	f7ff fe97 	bl	8004cd6 <create_chain>
 8004fa8:	60f8      	str	r0, [r7, #12]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d101      	bne.n	8004fb4 <dir_next+0xc8>
 8004fb0:	2307      	movs	r3, #7
 8004fb2:	e069      	b.n	8005088 <dir_next+0x19c>
					if (clst == 1) return FR_INT_ERR;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	2b01      	cmp	r3, #1
 8004fb8:	d101      	bne.n	8004fbe <dir_next+0xd2>
 8004fba:	2302      	movs	r3, #2
 8004fbc:	e064      	b.n	8005088 <dir_next+0x19c>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fc4:	d101      	bne.n	8004fca <dir_next+0xde>
 8004fc6:	2301      	movs	r3, #1
 8004fc8:	e05e      	b.n	8005088 <dir_next+0x19c>
					/* Clean-up stretched table */
					if (sync_window(dj->fs)) return FR_DISK_ERR;	/* Flush active window */
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	4618      	mov	r0, r3
 8004fd0:	f7ff fbd5 	bl	800477e <sync_window>
 8004fd4:	4603      	mov	r3, r0
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d001      	beq.n	8004fde <dir_next+0xf2>
 8004fda:	2301      	movs	r3, #1
 8004fdc:	e054      	b.n	8005088 <dir_next+0x19c>
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	3338      	adds	r3, #56	; 0x38
 8004fe4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004fe8:	2100      	movs	r1, #0
 8004fea:	4618      	mov	r0, r3
 8004fec:	f7ff fb6a 	bl	80046c4 <mem_set>
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681a      	ldr	r2, [r3, #0]
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681c      	ldr	r4, [r3, #0]
 8004ff8:	68f9      	ldr	r1, [r7, #12]
 8004ffa:	4610      	mov	r0, r2
 8004ffc:	f7ff fc8e 	bl	800491c <clust2sect>
 8005000:	4603      	mov	r3, r0
 8005002:	6363      	str	r3, [r4, #52]	; 0x34
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8005004:	2300      	movs	r3, #0
 8005006:	72fb      	strb	r3, [r7, #11]
 8005008:	e015      	b.n	8005036 <dir_next+0x14a>
						dj->fs->wflag = 1;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	2201      	movs	r2, #1
 8005010:	711a      	strb	r2, [r3, #4]
						if (sync_window(dj->fs)) return FR_DISK_ERR;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	4618      	mov	r0, r3
 8005018:	f7ff fbb1 	bl	800477e <sync_window>
 800501c:	4603      	mov	r3, r0
 800501e:	2b00      	cmp	r3, #0
 8005020:	d001      	beq.n	8005026 <dir_next+0x13a>
 8005022:	2301      	movs	r3, #1
 8005024:	e030      	b.n	8005088 <dir_next+0x19c>
						dj->fs->winsect++;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800502c:	3201      	adds	r2, #1
 800502e:	635a      	str	r2, [r3, #52]	; 0x34
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8005030:	7afb      	ldrb	r3, [r7, #11]
 8005032:	3301      	adds	r3, #1
 8005034:	72fb      	strb	r3, [r7, #11]
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	789b      	ldrb	r3, [r3, #2]
 800503c:	7afa      	ldrb	r2, [r7, #11]
 800503e:	429a      	cmp	r2, r3
 8005040:	d3e3      	bcc.n	800500a <dir_next+0x11e>
					}
					dj->fs->winsect -= c;						/* Rewind window address */
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005048:	7afa      	ldrb	r2, [r7, #11]
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	1a8a      	subs	r2, r1, r2
 8005050:	635a      	str	r2, [r3, #52]	; 0x34
#else
					return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dj->clust = clst;				/* Initialize data for new cluster */
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	68fa      	ldr	r2, [r7, #12]
 8005056:	60da      	str	r2, [r3, #12]
				dj->sect = clust2sect(dj->fs, clst);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	68f9      	ldr	r1, [r7, #12]
 800505e:	4618      	mov	r0, r3
 8005060:	f7ff fc5c 	bl	800491c <clust2sect>
 8005064:	4602      	mov	r2, r0
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	611a      	str	r2, [r3, #16]
			}
		}
	}

	dj->index = i;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	893a      	ldrh	r2, [r7, #8]
 800506e:	80da      	strh	r2, [r3, #6]
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8005078:	893b      	ldrh	r3, [r7, #8]
 800507a:	f003 030f 	and.w	r3, r3, #15
 800507e:	015b      	lsls	r3, r3, #5
 8005080:	441a      	add	r2, r3
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	615a      	str	r2, [r3, #20]

	return FR_OK;
 8005086:	2300      	movs	r3, #0
}
 8005088:	4618      	mov	r0, r3
 800508a:	3714      	adds	r7, #20
 800508c:	46bd      	mov	sp, r7
 800508e:	bd90      	pop	{r4, r7, pc}

08005090 <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dj,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b084      	sub	sp, #16
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
 8005098:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dj, 0);
 800509a:	2100      	movs	r1, #0
 800509c:	6878      	ldr	r0, [r7, #4]
 800509e:	f7ff fea3 	bl	8004de8 <dir_sdi>
 80050a2:	4603      	mov	r3, r0
 80050a4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80050a6:	7bfb      	ldrb	r3, [r7, #15]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d12d      	bne.n	8005108 <dir_alloc+0x78>
		n = 0;
 80050ac:	2300      	movs	r3, #0
 80050ae:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dj->fs, dj->sect);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681a      	ldr	r2, [r3, #0]
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	691b      	ldr	r3, [r3, #16]
 80050b8:	4619      	mov	r1, r3
 80050ba:	4610      	mov	r0, r2
 80050bc:	f7ff fba5 	bl	800480a <move_window>
 80050c0:	4603      	mov	r3, r0
 80050c2:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 80050c4:	7bfb      	ldrb	r3, [r7, #15]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d11d      	bne.n	8005106 <dir_alloc+0x76>
			if (dj->dir[0] == DDE || dj->dir[0] == 0) {	/* Is it a blank entry? */
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	695b      	ldr	r3, [r3, #20]
 80050ce:	781b      	ldrb	r3, [r3, #0]
 80050d0:	2be5      	cmp	r3, #229	; 0xe5
 80050d2:	d004      	beq.n	80050de <dir_alloc+0x4e>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	695b      	ldr	r3, [r3, #20]
 80050d8:	781b      	ldrb	r3, [r3, #0]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d107      	bne.n	80050ee <dir_alloc+0x5e>
				if (++n == nent) break;	/* A block of contiguous entry is found */
 80050de:	68bb      	ldr	r3, [r7, #8]
 80050e0:	3301      	adds	r3, #1
 80050e2:	60bb      	str	r3, [r7, #8]
 80050e4:	68ba      	ldr	r2, [r7, #8]
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	429a      	cmp	r2, r3
 80050ea:	d102      	bne.n	80050f2 <dir_alloc+0x62>
 80050ec:	e00c      	b.n	8005108 <dir_alloc+0x78>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80050ee:	2300      	movs	r3, #0
 80050f0:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dj, 1);		/* Next entry with table stretch enabled */
 80050f2:	2101      	movs	r1, #1
 80050f4:	6878      	ldr	r0, [r7, #4]
 80050f6:	f7ff fef9 	bl	8004eec <dir_next>
 80050fa:	4603      	mov	r3, r0
 80050fc:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 80050fe:	7bfb      	ldrb	r3, [r7, #15]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d0d5      	beq.n	80050b0 <dir_alloc+0x20>
 8005104:	e000      	b.n	8005108 <dir_alloc+0x78>
			if (res != FR_OK) break;
 8005106:	bf00      	nop
	}
	return res;
 8005108:	7bfb      	ldrb	r3, [r7, #15]
}
 800510a:	4618      	mov	r0, r3
 800510c:	3710      	adds	r7, #16
 800510e:	46bd      	mov	sp, r7
 8005110:	bd80      	pop	{r7, pc}

08005112 <ld_clust>:
static
DWORD ld_clust (
	FATFS *fs,	/* Pointer to the fs object */
	BYTE *dir	/* Pointer to the directory entry */
)
{
 8005112:	b480      	push	{r7}
 8005114:	b085      	sub	sp, #20
 8005116:	af00      	add	r7, sp, #0
 8005118:	6078      	str	r0, [r7, #4]
 800511a:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir+DIR_FstClusLO);
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	331a      	adds	r3, #26
 8005120:	881b      	ldrh	r3, [r3, #0]
 8005122:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	781b      	ldrb	r3, [r3, #0]
 8005128:	2b03      	cmp	r3, #3
 800512a:	d106      	bne.n	800513a <ld_clust+0x28>
		cl |= (DWORD)LD_WORD(dir+DIR_FstClusHI) << 16;
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	3314      	adds	r3, #20
 8005130:	881b      	ldrh	r3, [r3, #0]
 8005132:	041b      	lsls	r3, r3, #16
 8005134:	68fa      	ldr	r2, [r7, #12]
 8005136:	4313      	orrs	r3, r2
 8005138:	60fb      	str	r3, [r7, #12]

	return cl;
 800513a:	68fb      	ldr	r3, [r7, #12]
}
 800513c:	4618      	mov	r0, r3
 800513e:	3714      	adds	r7, #20
 8005140:	46bd      	mov	sp, r7
 8005142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005146:	4770      	bx	lr

08005148 <st_clust>:
static
void st_clust (
	BYTE *dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 8005148:	b480      	push	{r7}
 800514a:	b083      	sub	sp, #12
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
 8005150:	6039      	str	r1, [r7, #0]
	ST_WORD(dir+DIR_FstClusLO, cl);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	331a      	adds	r3, #26
 8005156:	683a      	ldr	r2, [r7, #0]
 8005158:	b292      	uxth	r2, r2
 800515a:	801a      	strh	r2, [r3, #0]
	ST_WORD(dir+DIR_FstClusHI, cl >> 16);
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	0c1a      	lsrs	r2, r3, #16
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	3314      	adds	r3, #20
 8005164:	b292      	uxth	r2, r2
 8005166:	801a      	strh	r2, [r3, #0]
}
 8005168:	bf00      	nop
 800516a:	370c      	adds	r7, #12
 800516c:	46bd      	mov	sp, r7
 800516e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005172:	4770      	bx	lr

08005174 <cmp_lfn>:
static
int cmp_lfn (			/* 1:Matched, 0:Not matched */
	WCHAR *lfnbuf,		/* Pointer to the LFN to be compared */
	BYTE *dir			/* Pointer to the directory entry containing a part of LFN */
)
{
 8005174:	b580      	push	{r7, lr}
 8005176:	b086      	sub	sp, #24
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
 800517c:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	781b      	ldrb	r3, [r3, #0]
 8005182:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005186:	1e5a      	subs	r2, r3, #1
 8005188:	4613      	mov	r3, r2
 800518a:	005b      	lsls	r3, r3, #1
 800518c:	4413      	add	r3, r2
 800518e:	009b      	lsls	r3, r3, #2
 8005190:	4413      	add	r3, r2
 8005192:	617b      	str	r3, [r7, #20]
	s = 0; wc = 1;
 8005194:	2300      	movs	r3, #0
 8005196:	613b      	str	r3, [r7, #16]
 8005198:	2301      	movs	r3, #1
 800519a:	81fb      	strh	r3, [r7, #14]
	do {
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
 800519c:	4a24      	ldr	r2, [pc, #144]	; (8005230 <cmp_lfn+0xbc>)
 800519e:	693b      	ldr	r3, [r7, #16]
 80051a0:	4413      	add	r3, r2
 80051a2:	781b      	ldrb	r3, [r3, #0]
 80051a4:	461a      	mov	r2, r3
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	4413      	add	r3, r2
 80051aa:	881b      	ldrh	r3, [r3, #0]
 80051ac:	81bb      	strh	r3, [r7, #12]
		if (wc) {	/* Last char has not been processed */
 80051ae:	89fb      	ldrh	r3, [r7, #14]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d019      	beq.n	80051e8 <cmp_lfn+0x74>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 80051b4:	89bb      	ldrh	r3, [r7, #12]
 80051b6:	4618      	mov	r0, r3
 80051b8:	f7ff fa26 	bl	8004608 <ff_wtoupper>
 80051bc:	4603      	mov	r3, r0
 80051be:	81fb      	strh	r3, [r7, #14]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 80051c0:	697b      	ldr	r3, [r7, #20]
 80051c2:	2b13      	cmp	r3, #19
 80051c4:	d80e      	bhi.n	80051e4 <cmp_lfn+0x70>
 80051c6:	697b      	ldr	r3, [r7, #20]
 80051c8:	1c5a      	adds	r2, r3, #1
 80051ca:	617a      	str	r2, [r7, #20]
 80051cc:	005b      	lsls	r3, r3, #1
 80051ce:	687a      	ldr	r2, [r7, #4]
 80051d0:	4413      	add	r3, r2
 80051d2:	881b      	ldrh	r3, [r3, #0]
 80051d4:	4618      	mov	r0, r3
 80051d6:	f7ff fa17 	bl	8004608 <ff_wtoupper>
 80051da:	4603      	mov	r3, r0
 80051dc:	461a      	mov	r2, r3
 80051de:	89fb      	ldrh	r3, [r7, #14]
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d008      	beq.n	80051f6 <cmp_lfn+0x82>
				return 0;				/* Not matched */
 80051e4:	2300      	movs	r3, #0
 80051e6:	e01f      	b.n	8005228 <cmp_lfn+0xb4>
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
 80051e8:	89bb      	ldrh	r3, [r7, #12]
 80051ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d001      	beq.n	80051f6 <cmp_lfn+0x82>
 80051f2:	2300      	movs	r3, #0
 80051f4:	e018      	b.n	8005228 <cmp_lfn+0xb4>
		}
	} while (++s < 13);				/* Repeat until all chars in the entry are checked */
 80051f6:	693b      	ldr	r3, [r7, #16]
 80051f8:	3301      	adds	r3, #1
 80051fa:	613b      	str	r3, [r7, #16]
 80051fc:	693b      	ldr	r3, [r7, #16]
 80051fe:	2b0c      	cmp	r3, #12
 8005200:	d9cc      	bls.n	800519c <cmp_lfn+0x28>

	if ((dir[LDIR_Ord] & LLE) && wc && lfnbuf[i])	/* Last segment matched but different length */
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	781b      	ldrb	r3, [r3, #0]
 8005206:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800520a:	2b00      	cmp	r3, #0
 800520c:	d00b      	beq.n	8005226 <cmp_lfn+0xb2>
 800520e:	89fb      	ldrh	r3, [r7, #14]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d008      	beq.n	8005226 <cmp_lfn+0xb2>
 8005214:	697b      	ldr	r3, [r7, #20]
 8005216:	005b      	lsls	r3, r3, #1
 8005218:	687a      	ldr	r2, [r7, #4]
 800521a:	4413      	add	r3, r2
 800521c:	881b      	ldrh	r3, [r3, #0]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d001      	beq.n	8005226 <cmp_lfn+0xb2>
		return 0;
 8005222:	2300      	movs	r3, #0
 8005224:	e000      	b.n	8005228 <cmp_lfn+0xb4>

	return 1;						/* The part of LFN matched */
 8005226:	2301      	movs	r3, #1
}
 8005228:	4618      	mov	r0, r3
 800522a:	3718      	adds	r7, #24
 800522c:	46bd      	mov	sp, r7
 800522e:	bd80      	pop	{r7, pc}
 8005230:	08023e48 	.word	0x08023e48

08005234 <fit_lfn>:
	const WCHAR *lfnbuf,	/* Pointer to the LFN buffer */
	BYTE *dir,				/* Pointer to the directory entry */
	BYTE ord,				/* LFN order (1-20) */
	BYTE sum				/* SFN sum */
)
{
 8005234:	b480      	push	{r7}
 8005236:	b089      	sub	sp, #36	; 0x24
 8005238:	af00      	add	r7, sp, #0
 800523a:	60f8      	str	r0, [r7, #12]
 800523c:	60b9      	str	r1, [r7, #8]
 800523e:	4611      	mov	r1, r2
 8005240:	461a      	mov	r2, r3
 8005242:	460b      	mov	r3, r1
 8005244:	71fb      	strb	r3, [r7, #7]
 8005246:	4613      	mov	r3, r2
 8005248:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set check sum */
 800524a:	68bb      	ldr	r3, [r7, #8]
 800524c:	330d      	adds	r3, #13
 800524e:	79ba      	ldrb	r2, [r7, #6]
 8005250:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8005252:	68bb      	ldr	r3, [r7, #8]
 8005254:	330b      	adds	r3, #11
 8005256:	220f      	movs	r2, #15
 8005258:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800525a:	68bb      	ldr	r3, [r7, #8]
 800525c:	330c      	adds	r3, #12
 800525e:	2200      	movs	r2, #0
 8005260:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir+LDIR_FstClusLO, 0);
 8005262:	68bb      	ldr	r3, [r7, #8]
 8005264:	331a      	adds	r3, #26
 8005266:	2200      	movs	r2, #0
 8005268:	801a      	strh	r2, [r3, #0]

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
 800526a:	79fb      	ldrb	r3, [r7, #7]
 800526c:	1e5a      	subs	r2, r3, #1
 800526e:	4613      	mov	r3, r2
 8005270:	005b      	lsls	r3, r3, #1
 8005272:	4413      	add	r3, r2
 8005274:	009b      	lsls	r3, r3, #2
 8005276:	4413      	add	r3, r2
 8005278:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800527a:	2300      	movs	r3, #0
 800527c:	82fb      	strh	r3, [r7, #22]
 800527e:	2300      	movs	r3, #0
 8005280:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
 8005282:	8afb      	ldrh	r3, [r7, #22]
 8005284:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005288:	4293      	cmp	r3, r2
 800528a:	d007      	beq.n	800529c <fit_lfn+0x68>
 800528c:	69fb      	ldr	r3, [r7, #28]
 800528e:	1c5a      	adds	r2, r3, #1
 8005290:	61fa      	str	r2, [r7, #28]
 8005292:	005b      	lsls	r3, r3, #1
 8005294:	68fa      	ldr	r2, [r7, #12]
 8005296:	4413      	add	r3, r2
 8005298:	881b      	ldrh	r3, [r3, #0]
 800529a:	82fb      	strh	r3, [r7, #22]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 800529c:	4a16      	ldr	r2, [pc, #88]	; (80052f8 <fit_lfn+0xc4>)
 800529e:	69bb      	ldr	r3, [r7, #24]
 80052a0:	4413      	add	r3, r2
 80052a2:	781b      	ldrb	r3, [r3, #0]
 80052a4:	461a      	mov	r2, r3
 80052a6:	68bb      	ldr	r3, [r7, #8]
 80052a8:	4413      	add	r3, r2
 80052aa:	8afa      	ldrh	r2, [r7, #22]
 80052ac:	801a      	strh	r2, [r3, #0]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
 80052ae:	8afb      	ldrh	r3, [r7, #22]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d102      	bne.n	80052ba <fit_lfn+0x86>
 80052b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80052b8:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 80052ba:	69bb      	ldr	r3, [r7, #24]
 80052bc:	3301      	adds	r3, #1
 80052be:	61bb      	str	r3, [r7, #24]
 80052c0:	69bb      	ldr	r3, [r7, #24]
 80052c2:	2b0c      	cmp	r3, #12
 80052c4:	d9dd      	bls.n	8005282 <fit_lfn+0x4e>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLE;	/* Bottom LFN part is the start of LFN sequence */
 80052c6:	8afb      	ldrh	r3, [r7, #22]
 80052c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d006      	beq.n	80052de <fit_lfn+0xaa>
 80052d0:	69fb      	ldr	r3, [r7, #28]
 80052d2:	005b      	lsls	r3, r3, #1
 80052d4:	68fa      	ldr	r2, [r7, #12]
 80052d6:	4413      	add	r3, r2
 80052d8:	881b      	ldrh	r3, [r3, #0]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d103      	bne.n	80052e6 <fit_lfn+0xb2>
 80052de:	79fb      	ldrb	r3, [r7, #7]
 80052e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80052e4:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 80052e6:	68bb      	ldr	r3, [r7, #8]
 80052e8:	79fa      	ldrb	r2, [r7, #7]
 80052ea:	701a      	strb	r2, [r3, #0]
}
 80052ec:	bf00      	nop
 80052ee:	3724      	adds	r7, #36	; 0x24
 80052f0:	46bd      	mov	sp, r7
 80052f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f6:	4770      	bx	lr
 80052f8:	08023e48 	.word	0x08023e48

080052fc <gen_numname>:
	BYTE *dst,			/* Pointer to generated SFN */
	const BYTE *src,	/* Pointer to source SFN to be modified */
	const WCHAR *lfn,	/* Pointer to LFN */
	WORD seq			/* Sequence number */
)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b08a      	sub	sp, #40	; 0x28
 8005300:	af00      	add	r7, sp, #0
 8005302:	60f8      	str	r0, [r7, #12]
 8005304:	60b9      	str	r1, [r7, #8]
 8005306:	607a      	str	r2, [r7, #4]
 8005308:	807b      	strh	r3, [r7, #2]
	BYTE ns[8], c;
	UINT i, j;


	mem_cpy(dst, src, 11);
 800530a:	220b      	movs	r2, #11
 800530c:	68b9      	ldr	r1, [r7, #8]
 800530e:	68f8      	ldr	r0, [r7, #12]
 8005310:	f7ff f9a8 	bl	8004664 <mem_cpy>

	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
 8005314:	887b      	ldrh	r3, [r7, #2]
 8005316:	2b05      	cmp	r3, #5
 8005318:	d90f      	bls.n	800533a <gen_numname+0x3e>
		do seq = (seq >> 1) + (seq << 15) + (WORD)*lfn++; while (*lfn);
 800531a:	887b      	ldrh	r3, [r7, #2]
 800531c:	b29a      	uxth	r2, r3
 800531e:	0852      	lsrs	r2, r2, #1
 8005320:	03db      	lsls	r3, r3, #15
 8005322:	4313      	orrs	r3, r2
 8005324:	b29a      	uxth	r2, r3
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	1c99      	adds	r1, r3, #2
 800532a:	6079      	str	r1, [r7, #4]
 800532c:	881b      	ldrh	r3, [r3, #0]
 800532e:	4413      	add	r3, r2
 8005330:	807b      	strh	r3, [r7, #2]
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	881b      	ldrh	r3, [r3, #0]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d1ef      	bne.n	800531a <gen_numname+0x1e>
	}

	/* itoa (hexdecimal) */
	i = 7;
 800533a:	2307      	movs	r3, #7
 800533c:	623b      	str	r3, [r7, #32]
	do {
		c = (seq % 16) + '0';
 800533e:	887b      	ldrh	r3, [r7, #2]
 8005340:	b2db      	uxtb	r3, r3
 8005342:	f003 030f 	and.w	r3, r3, #15
 8005346:	b2db      	uxtb	r3, r3
 8005348:	3330      	adds	r3, #48	; 0x30
 800534a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (c > '9') c += 7;
 800534e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005352:	2b39      	cmp	r3, #57	; 0x39
 8005354:	d904      	bls.n	8005360 <gen_numname+0x64>
 8005356:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800535a:	3307      	adds	r3, #7
 800535c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		ns[i--] = c;
 8005360:	6a3b      	ldr	r3, [r7, #32]
 8005362:	1e5a      	subs	r2, r3, #1
 8005364:	623a      	str	r2, [r7, #32]
 8005366:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800536a:	4413      	add	r3, r2
 800536c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8005370:	f803 2c14 	strb.w	r2, [r3, #-20]
		seq /= 16;
 8005374:	887b      	ldrh	r3, [r7, #2]
 8005376:	091b      	lsrs	r3, r3, #4
 8005378:	807b      	strh	r3, [r7, #2]
	} while (seq);
 800537a:	887b      	ldrh	r3, [r7, #2]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d1de      	bne.n	800533e <gen_numname+0x42>
	ns[i] = '~';
 8005380:	f107 0214 	add.w	r2, r7, #20
 8005384:	6a3b      	ldr	r3, [r7, #32]
 8005386:	4413      	add	r3, r2
 8005388:	227e      	movs	r2, #126	; 0x7e
 800538a:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800538c:	2300      	movs	r3, #0
 800538e:	61fb      	str	r3, [r7, #28]
 8005390:	e002      	b.n	8005398 <gen_numname+0x9c>
 8005392:	69fb      	ldr	r3, [r7, #28]
 8005394:	3301      	adds	r3, #1
 8005396:	61fb      	str	r3, [r7, #28]
 8005398:	69fa      	ldr	r2, [r7, #28]
 800539a:	6a3b      	ldr	r3, [r7, #32]
 800539c:	429a      	cmp	r2, r3
 800539e:	d205      	bcs.n	80053ac <gen_numname+0xb0>
 80053a0:	68fa      	ldr	r2, [r7, #12]
 80053a2:	69fb      	ldr	r3, [r7, #28]
 80053a4:	4413      	add	r3, r2
 80053a6:	781b      	ldrb	r3, [r3, #0]
 80053a8:	2b20      	cmp	r3, #32
 80053aa:	d1f2      	bne.n	8005392 <gen_numname+0x96>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80053ac:	6a3b      	ldr	r3, [r7, #32]
 80053ae:	2b07      	cmp	r3, #7
 80053b0:	d808      	bhi.n	80053c4 <gen_numname+0xc8>
 80053b2:	6a3b      	ldr	r3, [r7, #32]
 80053b4:	1c5a      	adds	r2, r3, #1
 80053b6:	623a      	str	r2, [r7, #32]
 80053b8:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80053bc:	4413      	add	r3, r2
 80053be:	f813 1c14 	ldrb.w	r1, [r3, #-20]
 80053c2:	e000      	b.n	80053c6 <gen_numname+0xca>
 80053c4:	2120      	movs	r1, #32
 80053c6:	69fb      	ldr	r3, [r7, #28]
 80053c8:	1c5a      	adds	r2, r3, #1
 80053ca:	61fa      	str	r2, [r7, #28]
 80053cc:	68fa      	ldr	r2, [r7, #12]
 80053ce:	4413      	add	r3, r2
 80053d0:	460a      	mov	r2, r1
 80053d2:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 80053d4:	69fb      	ldr	r3, [r7, #28]
 80053d6:	2b07      	cmp	r3, #7
 80053d8:	d9e8      	bls.n	80053ac <gen_numname+0xb0>
}
 80053da:	bf00      	nop
 80053dc:	bf00      	nop
 80053de:	3728      	adds	r7, #40	; 0x28
 80053e0:	46bd      	mov	sp, r7
 80053e2:	bd80      	pop	{r7, pc}

080053e4 <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE *dir		/* Ptr to directory entry */
)
{
 80053e4:	b480      	push	{r7}
 80053e6:	b085      	sub	sp, #20
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 80053ec:	2300      	movs	r3, #0
 80053ee:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 80053f0:	230b      	movs	r3, #11
 80053f2:	60bb      	str	r3, [r7, #8]

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
 80053f4:	7bfb      	ldrb	r3, [r7, #15]
 80053f6:	b2da      	uxtb	r2, r3
 80053f8:	0852      	lsrs	r2, r2, #1
 80053fa:	01db      	lsls	r3, r3, #7
 80053fc:	4313      	orrs	r3, r2
 80053fe:	b2da      	uxtb	r2, r3
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	1c59      	adds	r1, r3, #1
 8005404:	6079      	str	r1, [r7, #4]
 8005406:	781b      	ldrb	r3, [r3, #0]
 8005408:	4413      	add	r3, r2
 800540a:	73fb      	strb	r3, [r7, #15]
 800540c:	68bb      	ldr	r3, [r7, #8]
 800540e:	3b01      	subs	r3, #1
 8005410:	60bb      	str	r3, [r7, #8]
 8005412:	68bb      	ldr	r3, [r7, #8]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d1ed      	bne.n	80053f4 <sum_sfn+0x10>
	return sum;
 8005418:	7bfb      	ldrb	r3, [r7, #15]
}
 800541a:	4618      	mov	r0, r3
 800541c:	3714      	adds	r7, #20
 800541e:	46bd      	mov	sp, r7
 8005420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005424:	4770      	bx	lr

08005426 <dir_find>:

static
FRESULT dir_find (
	DIR *dj			/* Pointer to the directory object linked to the file name */
)
{
 8005426:	b580      	push	{r7, lr}
 8005428:	b086      	sub	sp, #24
 800542a:	af00      	add	r7, sp, #0
 800542c:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dj, 0);			/* Rewind directory object */
 800542e:	2100      	movs	r1, #0
 8005430:	6878      	ldr	r0, [r7, #4]
 8005432:	f7ff fcd9 	bl	8004de8 <dir_sdi>
 8005436:	4603      	mov	r3, r0
 8005438:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800543a:	7dfb      	ldrb	r3, [r7, #23]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d001      	beq.n	8005444 <dir_find+0x1e>
 8005440:	7dfb      	ldrb	r3, [r7, #23]
 8005442:	e098      	b.n	8005576 <dir_find+0x150>

#if _USE_LFN
	ord = sum = 0xFF;
 8005444:	23ff      	movs	r3, #255	; 0xff
 8005446:	753b      	strb	r3, [r7, #20]
 8005448:	7d3b      	ldrb	r3, [r7, #20]
 800544a:	757b      	strb	r3, [r7, #21]
#endif
	do {
		res = move_window(dj->fs, dj->sect);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681a      	ldr	r2, [r3, #0]
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	691b      	ldr	r3, [r3, #16]
 8005454:	4619      	mov	r1, r3
 8005456:	4610      	mov	r0, r2
 8005458:	f7ff f9d7 	bl	800480a <move_window>
 800545c:	4603      	mov	r3, r0
 800545e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8005460:	7dfb      	ldrb	r3, [r7, #23]
 8005462:	2b00      	cmp	r3, #0
 8005464:	f040 8081 	bne.w	800556a <dir_find+0x144>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	695b      	ldr	r3, [r3, #20]
 800546c:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 800546e:	693b      	ldr	r3, [r7, #16]
 8005470:	781b      	ldrb	r3, [r3, #0]
 8005472:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8005474:	7dbb      	ldrb	r3, [r7, #22]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d102      	bne.n	8005480 <dir_find+0x5a>
 800547a:	2304      	movs	r3, #4
 800547c:	75fb      	strb	r3, [r7, #23]
 800547e:	e079      	b.n	8005574 <dir_find+0x14e>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
 8005480:	693b      	ldr	r3, [r7, #16]
 8005482:	330b      	adds	r3, #11
 8005484:	781b      	ldrb	r3, [r3, #0]
 8005486:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800548a:	73fb      	strb	r3, [r7, #15]
		if (c == DDE || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800548c:	7dbb      	ldrb	r3, [r7, #22]
 800548e:	2be5      	cmp	r3, #229	; 0xe5
 8005490:	d007      	beq.n	80054a2 <dir_find+0x7c>
 8005492:	7bfb      	ldrb	r3, [r7, #15]
 8005494:	f003 0308 	and.w	r3, r3, #8
 8005498:	2b00      	cmp	r3, #0
 800549a:	d005      	beq.n	80054a8 <dir_find+0x82>
 800549c:	7bfb      	ldrb	r3, [r7, #15]
 800549e:	2b0f      	cmp	r3, #15
 80054a0:	d002      	beq.n	80054a8 <dir_find+0x82>
			ord = 0xFF;
 80054a2:	23ff      	movs	r3, #255	; 0xff
 80054a4:	757b      	strb	r3, [r7, #21]
 80054a6:	e055      	b.n	8005554 <dir_find+0x12e>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 80054a8:	7bfb      	ldrb	r3, [r7, #15]
 80054aa:	2b0f      	cmp	r3, #15
 80054ac:	d12f      	bne.n	800550e <dir_find+0xe8>
				if (dj->lfn) {
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	69db      	ldr	r3, [r3, #28]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d04e      	beq.n	8005554 <dir_find+0x12e>
					if (c & LLE) {		/* Is it start of LFN sequence? */
 80054b6:	7dbb      	ldrb	r3, [r7, #22]
 80054b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d00c      	beq.n	80054da <dir_find+0xb4>
						sum = dir[LDIR_Chksum];
 80054c0:	693b      	ldr	r3, [r7, #16]
 80054c2:	7b5b      	ldrb	r3, [r3, #13]
 80054c4:	753b      	strb	r3, [r7, #20]
						c &= ~LLE; ord = c;	/* LFN start order */
 80054c6:	7dbb      	ldrb	r3, [r7, #22]
 80054c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80054cc:	75bb      	strb	r3, [r7, #22]
 80054ce:	7dbb      	ldrb	r3, [r7, #22]
 80054d0:	757b      	strb	r3, [r7, #21]
						dj->lfn_idx = dj->index;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	88da      	ldrh	r2, [r3, #6]
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	841a      	strh	r2, [r3, #32]
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
 80054da:	7dba      	ldrb	r2, [r7, #22]
 80054dc:	7d7b      	ldrb	r3, [r7, #21]
 80054de:	429a      	cmp	r2, r3
 80054e0:	d112      	bne.n	8005508 <dir_find+0xe2>
 80054e2:	693b      	ldr	r3, [r7, #16]
 80054e4:	330d      	adds	r3, #13
 80054e6:	781b      	ldrb	r3, [r3, #0]
 80054e8:	7d3a      	ldrb	r2, [r7, #20]
 80054ea:	429a      	cmp	r2, r3
 80054ec:	d10c      	bne.n	8005508 <dir_find+0xe2>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	69db      	ldr	r3, [r3, #28]
 80054f2:	6939      	ldr	r1, [r7, #16]
 80054f4:	4618      	mov	r0, r3
 80054f6:	f7ff fe3d 	bl	8005174 <cmp_lfn>
 80054fa:	4603      	mov	r3, r0
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d003      	beq.n	8005508 <dir_find+0xe2>
 8005500:	7d7b      	ldrb	r3, [r7, #21]
 8005502:	3b01      	subs	r3, #1
 8005504:	b2db      	uxtb	r3, r3
 8005506:	e000      	b.n	800550a <dir_find+0xe4>
 8005508:	23ff      	movs	r3, #255	; 0xff
 800550a:	757b      	strb	r3, [r7, #21]
 800550c:	e022      	b.n	8005554 <dir_find+0x12e>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 800550e:	7d7b      	ldrb	r3, [r7, #21]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d107      	bne.n	8005524 <dir_find+0xfe>
 8005514:	6938      	ldr	r0, [r7, #16]
 8005516:	f7ff ff65 	bl	80053e4 <sum_sfn>
 800551a:	4603      	mov	r3, r0
 800551c:	461a      	mov	r2, r3
 800551e:	7d3b      	ldrb	r3, [r7, #20]
 8005520:	4293      	cmp	r3, r2
 8005522:	d024      	beq.n	800556e <dir_find+0x148>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 8005524:	23ff      	movs	r3, #255	; 0xff
 8005526:	757b      	strb	r3, [r7, #21]
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800552e:	841a      	strh	r2, [r3, #32]
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	699b      	ldr	r3, [r3, #24]
 8005534:	330b      	adds	r3, #11
 8005536:	781b      	ldrb	r3, [r3, #0]
 8005538:	f003 0301 	and.w	r3, r3, #1
 800553c:	2b00      	cmp	r3, #0
 800553e:	d109      	bne.n	8005554 <dir_find+0x12e>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	699b      	ldr	r3, [r3, #24]
 8005544:	220b      	movs	r2, #11
 8005546:	4619      	mov	r1, r3
 8005548:	6938      	ldr	r0, [r7, #16]
 800554a:	f7ff f8d6 	bl	80046fa <mem_cmp>
 800554e:	4603      	mov	r3, r0
 8005550:	2b00      	cmp	r3, #0
 8005552:	d00e      	beq.n	8005572 <dir_find+0x14c>
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dj, 0);		/* Next entry */
 8005554:	2100      	movs	r1, #0
 8005556:	6878      	ldr	r0, [r7, #4]
 8005558:	f7ff fcc8 	bl	8004eec <dir_next>
 800555c:	4603      	mov	r3, r0
 800555e:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8005560:	7dfb      	ldrb	r3, [r7, #23]
 8005562:	2b00      	cmp	r3, #0
 8005564:	f43f af72 	beq.w	800544c <dir_find+0x26>
 8005568:	e004      	b.n	8005574 <dir_find+0x14e>
		if (res != FR_OK) break;
 800556a:	bf00      	nop
 800556c:	e002      	b.n	8005574 <dir_find+0x14e>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 800556e:	bf00      	nop
 8005570:	e000      	b.n	8005574 <dir_find+0x14e>
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
 8005572:	bf00      	nop

	return res;
 8005574:	7dfb      	ldrb	r3, [r7, #23]
}
 8005576:	4618      	mov	r0, r3
 8005578:	3718      	adds	r7, #24
 800557a:	46bd      	mov	sp, r7
 800557c:	bd80      	pop	{r7, pc}
	...

08005580 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR *dj				/* Target directory with object name to be created */
)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b08a      	sub	sp, #40	; 0x28
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
	WORD n, ne;
	BYTE sn[12], *fn, sum;
	WCHAR *lfn;


	fn = dj->fn; lfn = dj->lfn;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	699b      	ldr	r3, [r3, #24]
 800558c:	61fb      	str	r3, [r7, #28]
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	69db      	ldr	r3, [r3, #28]
 8005592:	61bb      	str	r3, [r7, #24]
	mem_cpy(sn, fn, 12);
 8005594:	f107 0308 	add.w	r3, r7, #8
 8005598:	220c      	movs	r2, #12
 800559a:	69f9      	ldr	r1, [r7, #28]
 800559c:	4618      	mov	r0, r3
 800559e:	f7ff f861 	bl	8004664 <mem_cpy>

	if (_FS_RPATH && (sn[NS] & NS_DOT))		/* Cannot create dot entry */
 80055a2:	7cfb      	ldrb	r3, [r7, #19]
 80055a4:	f003 0320 	and.w	r3, r3, #32
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d001      	beq.n	80055b0 <dir_register+0x30>
		return FR_INVALID_NAME;
 80055ac:	2306      	movs	r3, #6
 80055ae:	e0e3      	b.n	8005778 <dir_register+0x1f8>

	if (sn[NS] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 80055b0:	7cfb      	ldrb	r3, [r7, #19]
 80055b2:	f003 0301 	and.w	r3, r3, #1
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d035      	beq.n	8005626 <dir_register+0xa6>
		fn[NS] = 0; dj->lfn = 0;			/* Find only SFN */
 80055ba:	69fb      	ldr	r3, [r7, #28]
 80055bc:	330b      	adds	r3, #11
 80055be:	2200      	movs	r2, #0
 80055c0:	701a      	strb	r2, [r3, #0]
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2200      	movs	r2, #0
 80055c6:	61da      	str	r2, [r3, #28]
		for (n = 1; n < 100; n++) {
 80055c8:	2301      	movs	r3, #1
 80055ca:	84bb      	strh	r3, [r7, #36]	; 0x24
 80055cc:	e013      	b.n	80055f6 <dir_register+0x76>
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
 80055ce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80055d0:	f107 0108 	add.w	r1, r7, #8
 80055d4:	69ba      	ldr	r2, [r7, #24]
 80055d6:	69f8      	ldr	r0, [r7, #28]
 80055d8:	f7ff fe90 	bl	80052fc <gen_numname>
			res = dir_find(dj);				/* Check if the name collides with existing SFN */
 80055dc:	6878      	ldr	r0, [r7, #4]
 80055de:	f7ff ff22 	bl	8005426 <dir_find>
 80055e2:	4603      	mov	r3, r0
 80055e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (res != FR_OK) break;
 80055e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d106      	bne.n	80055fe <dir_register+0x7e>
		for (n = 1; n < 100; n++) {
 80055f0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80055f2:	3301      	adds	r3, #1
 80055f4:	84bb      	strh	r3, [r7, #36]	; 0x24
 80055f6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80055f8:	2b63      	cmp	r3, #99	; 0x63
 80055fa:	d9e8      	bls.n	80055ce <dir_register+0x4e>
 80055fc:	e000      	b.n	8005600 <dir_register+0x80>
			if (res != FR_OK) break;
 80055fe:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8005600:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005602:	2b64      	cmp	r3, #100	; 0x64
 8005604:	d101      	bne.n	800560a <dir_register+0x8a>
 8005606:	2307      	movs	r3, #7
 8005608:	e0b6      	b.n	8005778 <dir_register+0x1f8>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800560a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800560e:	2b04      	cmp	r3, #4
 8005610:	d002      	beq.n	8005618 <dir_register+0x98>
 8005612:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005616:	e0af      	b.n	8005778 <dir_register+0x1f8>
		fn[NS] = sn[NS]; dj->lfn = lfn;
 8005618:	69fb      	ldr	r3, [r7, #28]
 800561a:	330b      	adds	r3, #11
 800561c:	7cfa      	ldrb	r2, [r7, #19]
 800561e:	701a      	strb	r2, [r3, #0]
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	69ba      	ldr	r2, [r7, #24]
 8005624:	61da      	str	r2, [r3, #28]
	}

	if (sn[NS] & NS_LFN) {			/* When LFN is to be created, allocate entries for an SFN + LFNs. */
 8005626:	7cfb      	ldrb	r3, [r7, #19]
 8005628:	f003 0302 	and.w	r3, r3, #2
 800562c:	2b00      	cmp	r3, #0
 800562e:	d016      	beq.n	800565e <dir_register+0xde>
		for (n = 0; lfn[n]; n++) ;
 8005630:	2300      	movs	r3, #0
 8005632:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005634:	e002      	b.n	800563c <dir_register+0xbc>
 8005636:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005638:	3301      	adds	r3, #1
 800563a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800563c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800563e:	005b      	lsls	r3, r3, #1
 8005640:	69ba      	ldr	r2, [r7, #24]
 8005642:	4413      	add	r3, r2
 8005644:	881b      	ldrh	r3, [r3, #0]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d1f5      	bne.n	8005636 <dir_register+0xb6>
		ne = (n + 25) / 13;
 800564a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800564c:	3319      	adds	r3, #25
 800564e:	4a4c      	ldr	r2, [pc, #304]	; (8005780 <dir_register+0x200>)
 8005650:	fb82 1203 	smull	r1, r2, r2, r3
 8005654:	1092      	asrs	r2, r2, #2
 8005656:	17db      	asrs	r3, r3, #31
 8005658:	1ad3      	subs	r3, r2, r3
 800565a:	847b      	strh	r3, [r7, #34]	; 0x22
 800565c:	e001      	b.n	8005662 <dir_register+0xe2>
	} else {						/* Otherwise allocate an entry for an SFN  */
		ne = 1;
 800565e:	2301      	movs	r3, #1
 8005660:	847b      	strh	r3, [r7, #34]	; 0x22
	}
	res = dir_alloc(dj, ne);		/* Allocate entries */
 8005662:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005664:	4619      	mov	r1, r3
 8005666:	6878      	ldr	r0, [r7, #4]
 8005668:	f7ff fd12 	bl	8005090 <dir_alloc>
 800566c:	4603      	mov	r3, r0
 800566e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (res == FR_OK && --ne) {		/* Set LFN entry if needed */
 8005672:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005676:	2b00      	cmp	r3, #0
 8005678:	d14b      	bne.n	8005712 <dir_register+0x192>
 800567a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800567c:	3b01      	subs	r3, #1
 800567e:	847b      	strh	r3, [r7, #34]	; 0x22
 8005680:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005682:	2b00      	cmp	r3, #0
 8005684:	d045      	beq.n	8005712 <dir_register+0x192>
		res = dir_sdi(dj, (WORD)(dj->index - ne));
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	88da      	ldrh	r2, [r3, #6]
 800568a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800568c:	1ad3      	subs	r3, r2, r3
 800568e:	b29b      	uxth	r3, r3
 8005690:	4619      	mov	r1, r3
 8005692:	6878      	ldr	r0, [r7, #4]
 8005694:	f7ff fba8 	bl	8004de8 <dir_sdi>
 8005698:	4603      	mov	r3, r0
 800569a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (res == FR_OK) {
 800569e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d135      	bne.n	8005712 <dir_register+0x192>
			sum = sum_sfn(dj->fn);	/* Sum value of the SFN tied to the LFN */
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	699b      	ldr	r3, [r3, #24]
 80056aa:	4618      	mov	r0, r3
 80056ac:	f7ff fe9a 	bl	80053e4 <sum_sfn>
 80056b0:	4603      	mov	r3, r0
 80056b2:	75fb      	strb	r3, [r7, #23]
			do {					/* Store LFN entries in bottom first */
				res = move_window(dj->fs, dj->sect);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681a      	ldr	r2, [r3, #0]
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	691b      	ldr	r3, [r3, #16]
 80056bc:	4619      	mov	r1, r3
 80056be:	4610      	mov	r0, r2
 80056c0:	f7ff f8a3 	bl	800480a <move_window>
 80056c4:	4603      	mov	r3, r0
 80056c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				if (res != FR_OK) break;
 80056ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d11e      	bne.n	8005710 <dir_register+0x190>
				fit_lfn(dj->lfn, dj->dir, (BYTE)ne, sum);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	69d8      	ldr	r0, [r3, #28]
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6959      	ldr	r1, [r3, #20]
 80056da:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80056dc:	b2da      	uxtb	r2, r3
 80056de:	7dfb      	ldrb	r3, [r7, #23]
 80056e0:	f7ff fda8 	bl	8005234 <fit_lfn>
				dj->fs->wflag = 1;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	2201      	movs	r2, #1
 80056ea:	711a      	strb	r2, [r3, #4]
				res = dir_next(dj, 0);	/* Next entry */
 80056ec:	2100      	movs	r1, #0
 80056ee:	6878      	ldr	r0, [r7, #4]
 80056f0:	f7ff fbfc 	bl	8004eec <dir_next>
 80056f4:	4603      	mov	r3, r0
 80056f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			} while (res == FR_OK && --ne);
 80056fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d107      	bne.n	8005712 <dir_register+0x192>
 8005702:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005704:	3b01      	subs	r3, #1
 8005706:	847b      	strh	r3, [r7, #34]	; 0x22
 8005708:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800570a:	2b00      	cmp	r3, #0
 800570c:	d1d2      	bne.n	80056b4 <dir_register+0x134>
 800570e:	e000      	b.n	8005712 <dir_register+0x192>
				if (res != FR_OK) break;
 8005710:	bf00      	nop
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dj, 1);		/* Allocate an entry for SFN */
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 8005712:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005716:	2b00      	cmp	r3, #0
 8005718:	d12c      	bne.n	8005774 <dir_register+0x1f4>
		res = move_window(dj->fs, dj->sect);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681a      	ldr	r2, [r3, #0]
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	691b      	ldr	r3, [r3, #16]
 8005722:	4619      	mov	r1, r3
 8005724:	4610      	mov	r0, r2
 8005726:	f7ff f870 	bl	800480a <move_window>
 800572a:	4603      	mov	r3, r0
 800572c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (res == FR_OK) {
 8005730:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005734:	2b00      	cmp	r3, #0
 8005736:	d11d      	bne.n	8005774 <dir_register+0x1f4>
			mem_set(dj->dir, 0, SZ_DIR);	/* Clean the entry */
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	695b      	ldr	r3, [r3, #20]
 800573c:	2220      	movs	r2, #32
 800573e:	2100      	movs	r1, #0
 8005740:	4618      	mov	r0, r3
 8005742:	f7fe ffbf 	bl	80046c4 <mem_set>
			mem_cpy(dj->dir, dj->fn, 11);	/* Put SFN */
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6958      	ldr	r0, [r3, #20]
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	699b      	ldr	r3, [r3, #24]
 800574e:	220b      	movs	r2, #11
 8005750:	4619      	mov	r1, r3
 8005752:	f7fe ff87 	bl	8004664 <mem_cpy>
#if _USE_LFN
			dj->dir[DIR_NTres] = *(dj->fn+NS) & (NS_BODY | NS_EXT);	/* Put NT flag */
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	699b      	ldr	r3, [r3, #24]
 800575a:	330b      	adds	r3, #11
 800575c:	781a      	ldrb	r2, [r3, #0]
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	695b      	ldr	r3, [r3, #20]
 8005762:	330c      	adds	r3, #12
 8005764:	f002 0218 	and.w	r2, r2, #24
 8005768:	b2d2      	uxtb	r2, r2
 800576a:	701a      	strb	r2, [r3, #0]
#endif
			dj->fs->wflag = 1;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	2201      	movs	r2, #1
 8005772:	711a      	strb	r2, [r3, #4]
		}
	}

	return res;
 8005774:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8005778:	4618      	mov	r0, r3
 800577a:	3728      	adds	r7, #40	; 0x28
 800577c:	46bd      	mov	sp, r7
 800577e:	bd80      	pop	{r7, pc}
 8005780:	4ec4ec4f 	.word	0x4ec4ec4f

08005784 <create_name>:
static
FRESULT create_name (
	DIR *dj,			/* Pointer to the directory object */
	const TCHAR **path	/* Pointer to pointer to the segment in the path string */
)
{
 8005784:	b580      	push	{r7, lr}
 8005786:	b08a      	sub	sp, #40	; 0x28
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
 800578c:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	613b      	str	r3, [r7, #16]
 8005794:	e002      	b.n	800579c <create_name+0x18>
 8005796:	693b      	ldr	r3, [r7, #16]
 8005798:	3301      	adds	r3, #1
 800579a:	613b      	str	r3, [r7, #16]
 800579c:	693b      	ldr	r3, [r7, #16]
 800579e:	781b      	ldrb	r3, [r3, #0]
 80057a0:	2b2f      	cmp	r3, #47	; 0x2f
 80057a2:	d0f8      	beq.n	8005796 <create_name+0x12>
 80057a4:	693b      	ldr	r3, [r7, #16]
 80057a6:	781b      	ldrb	r3, [r3, #0]
 80057a8:	2b5c      	cmp	r3, #92	; 0x5c
 80057aa:	d0f4      	beq.n	8005796 <create_name+0x12>
	lfn = dj->lfn;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	69db      	ldr	r3, [r3, #28]
 80057b0:	60fb      	str	r3, [r7, #12]
	si = di = 0;
 80057b2:	2300      	movs	r3, #0
 80057b4:	617b      	str	r3, [r7, #20]
 80057b6:	697b      	ldr	r3, [r7, #20]
 80057b8:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 80057ba:	69bb      	ldr	r3, [r7, #24]
 80057bc:	1c5a      	adds	r2, r3, #1
 80057be:	61ba      	str	r2, [r7, #24]
 80057c0:	693a      	ldr	r2, [r7, #16]
 80057c2:	4413      	add	r3, r2
 80057c4:	781b      	ldrb	r3, [r3, #0]
 80057c6:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
 80057c8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80057ca:	2b1f      	cmp	r3, #31
 80057cc:	d92f      	bls.n	800582e <create_name+0xaa>
 80057ce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80057d0:	2b2f      	cmp	r3, #47	; 0x2f
 80057d2:	d02c      	beq.n	800582e <create_name+0xaa>
 80057d4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80057d6:	2b5c      	cmp	r3, #92	; 0x5c
 80057d8:	d029      	beq.n	800582e <create_name+0xaa>
		if (di >= _MAX_LFN)				/* Reject too long name */
 80057da:	697b      	ldr	r3, [r7, #20]
 80057dc:	2b13      	cmp	r3, #19
 80057de:	d901      	bls.n	80057e4 <create_name+0x60>
			return FR_INVALID_NAME;
 80057e0:	2306      	movs	r3, #6
 80057e2:	e1c7      	b.n	8005b74 <create_name+0x3f0>
#if !_LFN_UNICODE
		w &= 0xFF;
 80057e4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80057e6:	b2db      	uxtb	r3, r3
 80057e8:	84bb      	strh	r3, [r7, #36]	; 0x24
			b = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(b))
				return FR_INVALID_NAME;	/* Reject invalid sequence */
			w = (w << 8) + b;			/* Create a DBC */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 80057ea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80057ec:	2101      	movs	r1, #1
 80057ee:	4618      	mov	r0, r3
 80057f0:	f7fe fece 	bl	8004590 <ff_convert>
 80057f4:	4603      	mov	r3, r0
 80057f6:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 80057f8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d101      	bne.n	8005802 <create_name+0x7e>
 80057fe:	2306      	movs	r3, #6
 8005800:	e1b8      	b.n	8005b74 <create_name+0x3f0>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
 8005802:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005804:	2b7f      	cmp	r3, #127	; 0x7f
 8005806:	d809      	bhi.n	800581c <create_name+0x98>
 8005808:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800580a:	4619      	mov	r1, r3
 800580c:	48a4      	ldr	r0, [pc, #656]	; (8005aa0 <create_name+0x31c>)
 800580e:	f7fe ff9b 	bl	8004748 <chk_chr>
 8005812:	4603      	mov	r3, r0
 8005814:	2b00      	cmp	r3, #0
 8005816:	d001      	beq.n	800581c <create_name+0x98>
			return FR_INVALID_NAME;
 8005818:	2306      	movs	r3, #6
 800581a:	e1ab      	b.n	8005b74 <create_name+0x3f0>
		lfn[di++] = w;					/* Store the Unicode char */
 800581c:	697b      	ldr	r3, [r7, #20]
 800581e:	1c5a      	adds	r2, r3, #1
 8005820:	617a      	str	r2, [r7, #20]
 8005822:	005b      	lsls	r3, r3, #1
 8005824:	68fa      	ldr	r2, [r7, #12]
 8005826:	4413      	add	r3, r2
 8005828:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800582a:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800582c:	e7c5      	b.n	80057ba <create_name+0x36>
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800582e:	693a      	ldr	r2, [r7, #16]
 8005830:	69bb      	ldr	r3, [r7, #24]
 8005832:	441a      	add	r2, r3
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 8005838:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800583a:	2b1f      	cmp	r3, #31
 800583c:	d801      	bhi.n	8005842 <create_name+0xbe>
 800583e:	2304      	movs	r3, #4
 8005840:	e000      	b.n	8005844 <create_name+0xc0>
 8005842:	2300      	movs	r3, #0
 8005844:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if _FS_RPATH
	if ((di == 1 && lfn[di-1] == '.') || /* Is this a dot entry? */
 8005848:	697b      	ldr	r3, [r7, #20]
 800584a:	2b01      	cmp	r3, #1
 800584c:	d109      	bne.n	8005862 <create_name+0xde>
 800584e:	697b      	ldr	r3, [r7, #20]
 8005850:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005854:	3b01      	subs	r3, #1
 8005856:	005b      	lsls	r3, r3, #1
 8005858:	68fa      	ldr	r2, [r7, #12]
 800585a:	4413      	add	r3, r2
 800585c:	881b      	ldrh	r3, [r3, #0]
 800585e:	2b2e      	cmp	r3, #46	; 0x2e
 8005860:	d016      	beq.n	8005890 <create_name+0x10c>
 8005862:	697b      	ldr	r3, [r7, #20]
 8005864:	2b02      	cmp	r3, #2
 8005866:	d14d      	bne.n	8005904 <create_name+0x180>
		(di == 2 && lfn[di-1] == '.' && lfn[di-2] == '.')) {
 8005868:	697b      	ldr	r3, [r7, #20]
 800586a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800586e:	3b01      	subs	r3, #1
 8005870:	005b      	lsls	r3, r3, #1
 8005872:	68fa      	ldr	r2, [r7, #12]
 8005874:	4413      	add	r3, r2
 8005876:	881b      	ldrh	r3, [r3, #0]
 8005878:	2b2e      	cmp	r3, #46	; 0x2e
 800587a:	d143      	bne.n	8005904 <create_name+0x180>
 800587c:	697b      	ldr	r3, [r7, #20]
 800587e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005882:	3b02      	subs	r3, #2
 8005884:	005b      	lsls	r3, r3, #1
 8005886:	68fa      	ldr	r2, [r7, #12]
 8005888:	4413      	add	r3, r2
 800588a:	881b      	ldrh	r3, [r3, #0]
 800588c:	2b2e      	cmp	r3, #46	; 0x2e
 800588e:	d139      	bne.n	8005904 <create_name+0x180>
		lfn[di] = 0;
 8005890:	697b      	ldr	r3, [r7, #20]
 8005892:	005b      	lsls	r3, r3, #1
 8005894:	68fa      	ldr	r2, [r7, #12]
 8005896:	4413      	add	r3, r2
 8005898:	2200      	movs	r2, #0
 800589a:	801a      	strh	r2, [r3, #0]
		for (i = 0; i < 11; i++)
 800589c:	2300      	movs	r3, #0
 800589e:	623b      	str	r3, [r7, #32]
 80058a0:	e00f      	b.n	80058c2 <create_name+0x13e>
			dj->fn[i] = (i < di) ? '.' : ' ';
 80058a2:	6a3a      	ldr	r2, [r7, #32]
 80058a4:	697b      	ldr	r3, [r7, #20]
 80058a6:	429a      	cmp	r2, r3
 80058a8:	d201      	bcs.n	80058ae <create_name+0x12a>
 80058aa:	212e      	movs	r1, #46	; 0x2e
 80058ac:	e000      	b.n	80058b0 <create_name+0x12c>
 80058ae:	2120      	movs	r1, #32
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	699a      	ldr	r2, [r3, #24]
 80058b4:	6a3b      	ldr	r3, [r7, #32]
 80058b6:	4413      	add	r3, r2
 80058b8:	460a      	mov	r2, r1
 80058ba:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < 11; i++)
 80058bc:	6a3b      	ldr	r3, [r7, #32]
 80058be:	3301      	adds	r3, #1
 80058c0:	623b      	str	r3, [r7, #32]
 80058c2:	6a3b      	ldr	r3, [r7, #32]
 80058c4:	2b0a      	cmp	r3, #10
 80058c6:	d9ec      	bls.n	80058a2 <create_name+0x11e>
		dj->fn[i] = cf | NS_DOT;		/* This is a dot entry */
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	699a      	ldr	r2, [r3, #24]
 80058cc:	6a3b      	ldr	r3, [r7, #32]
 80058ce:	4413      	add	r3, r2
 80058d0:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80058d4:	f042 0220 	orr.w	r2, r2, #32
 80058d8:	b2d2      	uxtb	r2, r2
 80058da:	701a      	strb	r2, [r3, #0]
		return FR_OK;
 80058dc:	2300      	movs	r3, #0
 80058de:	e149      	b.n	8005b74 <create_name+0x3f0>
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
		w = lfn[di-1];
 80058e0:	697b      	ldr	r3, [r7, #20]
 80058e2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80058e6:	3b01      	subs	r3, #1
 80058e8:	005b      	lsls	r3, r3, #1
 80058ea:	68fa      	ldr	r2, [r7, #12]
 80058ec:	4413      	add	r3, r2
 80058ee:	881b      	ldrh	r3, [r3, #0]
 80058f0:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 80058f2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80058f4:	2b20      	cmp	r3, #32
 80058f6:	d002      	beq.n	80058fe <create_name+0x17a>
 80058f8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80058fa:	2b2e      	cmp	r3, #46	; 0x2e
 80058fc:	d106      	bne.n	800590c <create_name+0x188>
		di--;
 80058fe:	697b      	ldr	r3, [r7, #20]
 8005900:	3b01      	subs	r3, #1
 8005902:	617b      	str	r3, [r7, #20]
	while (di) {						/* Strip trailing spaces and dots */
 8005904:	697b      	ldr	r3, [r7, #20]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d1ea      	bne.n	80058e0 <create_name+0x15c>
 800590a:	e000      	b.n	800590e <create_name+0x18a>
		if (w != ' ' && w != '.') break;
 800590c:	bf00      	nop
	}
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
 800590e:	697b      	ldr	r3, [r7, #20]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d101      	bne.n	8005918 <create_name+0x194>
 8005914:	2306      	movs	r3, #6
 8005916:	e12d      	b.n	8005b74 <create_name+0x3f0>

	lfn[di] = 0;						/* LFN is created */
 8005918:	697b      	ldr	r3, [r7, #20]
 800591a:	005b      	lsls	r3, r3, #1
 800591c:	68fa      	ldr	r2, [r7, #12]
 800591e:	4413      	add	r3, r2
 8005920:	2200      	movs	r2, #0
 8005922:	801a      	strh	r2, [r3, #0]

	/* Create SFN in directory form */
	mem_set(dj->fn, ' ', 11);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	699b      	ldr	r3, [r3, #24]
 8005928:	220b      	movs	r2, #11
 800592a:	2120      	movs	r1, #32
 800592c:	4618      	mov	r0, r3
 800592e:	f7fe fec9 	bl	80046c4 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8005932:	2300      	movs	r3, #0
 8005934:	61bb      	str	r3, [r7, #24]
 8005936:	e002      	b.n	800593e <create_name+0x1ba>
 8005938:	69bb      	ldr	r3, [r7, #24]
 800593a:	3301      	adds	r3, #1
 800593c:	61bb      	str	r3, [r7, #24]
 800593e:	69bb      	ldr	r3, [r7, #24]
 8005940:	005b      	lsls	r3, r3, #1
 8005942:	68fa      	ldr	r2, [r7, #12]
 8005944:	4413      	add	r3, r2
 8005946:	881b      	ldrh	r3, [r3, #0]
 8005948:	2b20      	cmp	r3, #32
 800594a:	d0f5      	beq.n	8005938 <create_name+0x1b4>
 800594c:	69bb      	ldr	r3, [r7, #24]
 800594e:	005b      	lsls	r3, r3, #1
 8005950:	68fa      	ldr	r2, [r7, #12]
 8005952:	4413      	add	r3, r2
 8005954:	881b      	ldrh	r3, [r3, #0]
 8005956:	2b2e      	cmp	r3, #46	; 0x2e
 8005958:	d0ee      	beq.n	8005938 <create_name+0x1b4>
	if (si) cf |= NS_LOSS | NS_LFN;
 800595a:	69bb      	ldr	r3, [r7, #24]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d009      	beq.n	8005974 <create_name+0x1f0>
 8005960:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005964:	f043 0303 	orr.w	r3, r3, #3
 8005968:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800596c:	e002      	b.n	8005974 <create_name+0x1f0>
 800596e:	697b      	ldr	r3, [r7, #20]
 8005970:	3b01      	subs	r3, #1
 8005972:	617b      	str	r3, [r7, #20]
 8005974:	697b      	ldr	r3, [r7, #20]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d009      	beq.n	800598e <create_name+0x20a>
 800597a:	697b      	ldr	r3, [r7, #20]
 800597c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005980:	3b01      	subs	r3, #1
 8005982:	005b      	lsls	r3, r3, #1
 8005984:	68fa      	ldr	r2, [r7, #12]
 8005986:	4413      	add	r3, r2
 8005988:	881b      	ldrh	r3, [r3, #0]
 800598a:	2b2e      	cmp	r3, #46	; 0x2e
 800598c:	d1ef      	bne.n	800596e <create_name+0x1ea>

	b = i = 0; ni = 8;
 800598e:	2300      	movs	r3, #0
 8005990:	623b      	str	r3, [r7, #32]
 8005992:	2300      	movs	r3, #0
 8005994:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8005998:	2308      	movs	r3, #8
 800599a:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN char */
 800599c:	69bb      	ldr	r3, [r7, #24]
 800599e:	1c5a      	adds	r2, r3, #1
 80059a0:	61ba      	str	r2, [r7, #24]
 80059a2:	005b      	lsls	r3, r3, #1
 80059a4:	68fa      	ldr	r2, [r7, #12]
 80059a6:	4413      	add	r3, r2
 80059a8:	881b      	ldrh	r3, [r3, #0]
 80059aa:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 80059ac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	f000 8095 	beq.w	8005ade <create_name+0x35a>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 80059b4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80059b6:	2b20      	cmp	r3, #32
 80059b8:	d006      	beq.n	80059c8 <create_name+0x244>
 80059ba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80059bc:	2b2e      	cmp	r3, #46	; 0x2e
 80059be:	d10a      	bne.n	80059d6 <create_name+0x252>
 80059c0:	69ba      	ldr	r2, [r7, #24]
 80059c2:	697b      	ldr	r3, [r7, #20]
 80059c4:	429a      	cmp	r2, r3
 80059c6:	d006      	beq.n	80059d6 <create_name+0x252>
			cf |= NS_LOSS | NS_LFN; continue;
 80059c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80059cc:	f043 0303 	orr.w	r3, r3, #3
 80059d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80059d4:	e082      	b.n	8005adc <create_name+0x358>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 80059d6:	6a3a      	ldr	r2, [r7, #32]
 80059d8:	69fb      	ldr	r3, [r7, #28]
 80059da:	429a      	cmp	r2, r3
 80059dc:	d203      	bcs.n	80059e6 <create_name+0x262>
 80059de:	69ba      	ldr	r2, [r7, #24]
 80059e0:	697b      	ldr	r3, [r7, #20]
 80059e2:	429a      	cmp	r2, r3
 80059e4:	d123      	bne.n	8005a2e <create_name+0x2aa>
			if (ni == 11) {				/* Long extension */
 80059e6:	69fb      	ldr	r3, [r7, #28]
 80059e8:	2b0b      	cmp	r3, #11
 80059ea:	d106      	bne.n	80059fa <create_name+0x276>
				cf |= NS_LOSS | NS_LFN; break;
 80059ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80059f0:	f043 0303 	orr.w	r3, r3, #3
 80059f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80059f8:	e074      	b.n	8005ae4 <create_name+0x360>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 80059fa:	69ba      	ldr	r2, [r7, #24]
 80059fc:	697b      	ldr	r3, [r7, #20]
 80059fe:	429a      	cmp	r2, r3
 8005a00:	d005      	beq.n	8005a0e <create_name+0x28a>
 8005a02:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005a06:	f043 0303 	orr.w	r3, r3, #3
 8005a0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8005a0e:	69ba      	ldr	r2, [r7, #24]
 8005a10:	697b      	ldr	r3, [r7, #20]
 8005a12:	429a      	cmp	r2, r3
 8005a14:	d865      	bhi.n	8005ae2 <create_name+0x35e>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8005a16:	697b      	ldr	r3, [r7, #20]
 8005a18:	61bb      	str	r3, [r7, #24]
 8005a1a:	2308      	movs	r3, #8
 8005a1c:	623b      	str	r3, [r7, #32]
 8005a1e:	230b      	movs	r3, #11
 8005a20:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8005a22:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005a26:	009b      	lsls	r3, r3, #2
 8005a28:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8005a2c:	e056      	b.n	8005adc <create_name+0x358>
		}

		if (w >= 0x80) {				/* Non ASCII char */
 8005a2e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005a30:	2b7f      	cmp	r3, #127	; 0x7f
 8005a32:	d914      	bls.n	8005a5e <create_name+0x2da>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8005a34:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005a36:	2100      	movs	r1, #0
 8005a38:	4618      	mov	r0, r3
 8005a3a:	f7fe fda9 	bl	8004590 <ff_convert>
 8005a3e:	4603      	mov	r3, r0
 8005a40:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended char to upper (SBCS) */
 8005a42:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d004      	beq.n	8005a52 <create_name+0x2ce>
 8005a48:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005a4a:	3b80      	subs	r3, #128	; 0x80
 8005a4c:	4a15      	ldr	r2, [pc, #84]	; (8005aa4 <create_name+0x320>)
 8005a4e:	5cd3      	ldrb	r3, [r2, r3]
 8005a50:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8005a52:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005a56:	f043 0302 	orr.w	r3, r3, #2
 8005a5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dj->fn[i++] = (BYTE)(w >> 8);
		} else {						/* Single byte char */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal chars for SFN */
 8005a5e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d007      	beq.n	8005a74 <create_name+0x2f0>
 8005a64:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005a66:	4619      	mov	r1, r3
 8005a68:	480f      	ldr	r0, [pc, #60]	; (8005aa8 <create_name+0x324>)
 8005a6a:	f7fe fe6d 	bl	8004748 <chk_chr>
 8005a6e:	4603      	mov	r3, r0
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d008      	beq.n	8005a86 <create_name+0x302>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8005a74:	235f      	movs	r3, #95	; 0x5f
 8005a76:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005a78:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005a7c:	f043 0303 	orr.w	r3, r3, #3
 8005a80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005a84:	e021      	b.n	8005aca <create_name+0x346>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8005a86:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005a88:	2b40      	cmp	r3, #64	; 0x40
 8005a8a:	d90f      	bls.n	8005aac <create_name+0x328>
 8005a8c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005a8e:	2b5a      	cmp	r3, #90	; 0x5a
 8005a90:	d80c      	bhi.n	8005aac <create_name+0x328>
					b |= 2;
 8005a92:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005a96:	f043 0302 	orr.w	r3, r3, #2
 8005a9a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8005a9e:	e014      	b.n	8005aca <create_name+0x346>
 8005aa0:	08020810 	.word	0x08020810
 8005aa4:	08023dc8 	.word	0x08023dc8
 8005aa8:	0802081c 	.word	0x0802081c
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8005aac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005aae:	2b60      	cmp	r3, #96	; 0x60
 8005ab0:	d90b      	bls.n	8005aca <create_name+0x346>
 8005ab2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005ab4:	2b7a      	cmp	r3, #122	; 0x7a
 8005ab6:	d808      	bhi.n	8005aca <create_name+0x346>
						b |= 1; w -= 0x20;
 8005ab8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005abc:	f043 0301 	orr.w	r3, r3, #1
 8005ac0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8005ac4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005ac6:	3b20      	subs	r3, #32
 8005ac8:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dj->fn[i++] = (BYTE)w;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	699a      	ldr	r2, [r3, #24]
 8005ace:	6a3b      	ldr	r3, [r7, #32]
 8005ad0:	1c59      	adds	r1, r3, #1
 8005ad2:	6239      	str	r1, [r7, #32]
 8005ad4:	4413      	add	r3, r2
 8005ad6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005ad8:	b2d2      	uxtb	r2, r2
 8005ada:	701a      	strb	r2, [r3, #0]
		w = lfn[si++];					/* Get an LFN char */
 8005adc:	e75e      	b.n	800599c <create_name+0x218>
		if (!w) break;					/* Break on end of the LFN */
 8005ade:	bf00      	nop
 8005ae0:	e000      	b.n	8005ae4 <create_name+0x360>
			if (si > di) break;			/* No extension */
 8005ae2:	bf00      	nop
	}

	if (dj->fn[0] == DDE) dj->fn[0] = NDDE;	/* If the first char collides with deleted mark, replace it with 0x05 */
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	699b      	ldr	r3, [r3, #24]
 8005ae8:	781b      	ldrb	r3, [r3, #0]
 8005aea:	2be5      	cmp	r3, #229	; 0xe5
 8005aec:	d103      	bne.n	8005af6 <create_name+0x372>
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	699b      	ldr	r3, [r3, #24]
 8005af2:	2205      	movs	r2, #5
 8005af4:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 8005af6:	69fb      	ldr	r3, [r7, #28]
 8005af8:	2b08      	cmp	r3, #8
 8005afa:	d104      	bne.n	8005b06 <create_name+0x382>
 8005afc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005b00:	009b      	lsls	r3, r3, #2
 8005b02:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
 8005b06:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005b0a:	f003 030c 	and.w	r3, r3, #12
 8005b0e:	2b0c      	cmp	r3, #12
 8005b10:	d005      	beq.n	8005b1e <create_name+0x39a>
 8005b12:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005b16:	f003 0303 	and.w	r3, r3, #3
 8005b1a:	2b03      	cmp	r3, #3
 8005b1c:	d105      	bne.n	8005b2a <create_name+0x3a6>
		cf |= NS_LFN;
 8005b1e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005b22:	f043 0302 	orr.w	r3, r3, #2
 8005b26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended char, NT flags are created */
 8005b2a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005b2e:	f003 0302 	and.w	r3, r3, #2
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d117      	bne.n	8005b66 <create_name+0x3e2>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8005b36:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005b3a:	f003 0303 	and.w	r3, r3, #3
 8005b3e:	2b01      	cmp	r3, #1
 8005b40:	d105      	bne.n	8005b4e <create_name+0x3ca>
 8005b42:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005b46:	f043 0310 	orr.w	r3, r3, #16
 8005b4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8005b4e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005b52:	f003 030c 	and.w	r3, r3, #12
 8005b56:	2b04      	cmp	r3, #4
 8005b58:	d105      	bne.n	8005b66 <create_name+0x3e2>
 8005b5a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005b5e:	f043 0308 	orr.w	r3, r3, #8
 8005b62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dj->fn[NS] = cf;	/* SFN is created */
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	699b      	ldr	r3, [r3, #24]
 8005b6a:	330b      	adds	r3, #11
 8005b6c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8005b70:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8005b72:	2300      	movs	r3, #0

	sfn[NS] = c;		/* Store NT flag, File name is created */

	return FR_OK;
#endif
}
 8005b74:	4618      	mov	r0, r3
 8005b76:	3728      	adds	r7, #40	; 0x28
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	bd80      	pop	{r7, pc}

08005b7c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR *dj,			/* Directory object to return last directory and found object */
	const TCHAR *path	/* Full-path string to find a file or directory */
)
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b084      	sub	sp, #16
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
 8005b84:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE *dir, ns;


#if _FS_RPATH
	if (*path == '/' || *path == '\\') { /* There is a heading separator */
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	781b      	ldrb	r3, [r3, #0]
 8005b8a:	2b2f      	cmp	r3, #47	; 0x2f
 8005b8c:	d003      	beq.n	8005b96 <follow_path+0x1a>
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	781b      	ldrb	r3, [r3, #0]
 8005b92:	2b5c      	cmp	r3, #92	; 0x5c
 8005b94:	d106      	bne.n	8005ba4 <follow_path+0x28>
		path++;	dj->sclust = 0;		/* Strip it and start from the root dir */
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	3301      	adds	r3, #1
 8005b9a:	603b      	str	r3, [r7, #0]
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	609a      	str	r2, [r3, #8]
 8005ba2:	e004      	b.n	8005bae <follow_path+0x32>
	} else {							/* No heading separator */
		dj->sclust = dj->fs->cdir;	/* Start from the current dir */
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	699a      	ldr	r2, [r3, #24]
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	609a      	str	r2, [r3, #8]
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
		path++;
	dj->sclust = 0;						/* Start from the root dir */
#endif

	if ((UINT)*path < ' ') {			/* Nul path means the start directory itself */
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	781b      	ldrb	r3, [r3, #0]
 8005bb2:	2b1f      	cmp	r3, #31
 8005bb4:	d809      	bhi.n	8005bca <follow_path+0x4e>
		res = dir_sdi(dj, 0);
 8005bb6:	2100      	movs	r1, #0
 8005bb8:	6878      	ldr	r0, [r7, #4]
 8005bba:	f7ff f915 	bl	8004de8 <dir_sdi>
 8005bbe:	4603      	mov	r3, r0
 8005bc0:	73fb      	strb	r3, [r7, #15]
		dj->dir = 0;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	615a      	str	r2, [r3, #20]
 8005bc8:	e056      	b.n	8005c78 <follow_path+0xfc>
	} else {							/* Follow path */
		for (;;) {
			res = create_name(dj, &path);	/* Get a segment */
 8005bca:	463b      	mov	r3, r7
 8005bcc:	4619      	mov	r1, r3
 8005bce:	6878      	ldr	r0, [r7, #4]
 8005bd0:	f7ff fdd8 	bl	8005784 <create_name>
 8005bd4:	4603      	mov	r3, r0
 8005bd6:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8005bd8:	7bfb      	ldrb	r3, [r7, #15]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d145      	bne.n	8005c6a <follow_path+0xee>
			res = dir_find(dj);				/* Find it */
 8005bde:	6878      	ldr	r0, [r7, #4]
 8005be0:	f7ff fc21 	bl	8005426 <dir_find>
 8005be4:	4603      	mov	r3, r0
 8005be6:	73fb      	strb	r3, [r7, #15]
			ns = *(dj->fn+NS);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	699b      	ldr	r3, [r3, #24]
 8005bec:	7adb      	ldrb	r3, [r3, #11]
 8005bee:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 8005bf0:	7bfb      	ldrb	r3, [r7, #15]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d01d      	beq.n	8005c32 <follow_path+0xb6>
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occurred */
 8005bf6:	7bfb      	ldrb	r3, [r7, #15]
 8005bf8:	2b04      	cmp	r3, #4
 8005bfa:	d138      	bne.n	8005c6e <follow_path+0xf2>
				/* Object not found */
				if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exit */
 8005bfc:	7bbb      	ldrb	r3, [r7, #14]
 8005bfe:	f003 0320 	and.w	r3, r3, #32
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d00d      	beq.n	8005c22 <follow_path+0xa6>
					dj->sclust = 0; dj->dir = 0;	/* It is the root dir */
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2200      	movs	r2, #0
 8005c0a:	609a      	str	r2, [r3, #8]
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2200      	movs	r2, #0
 8005c10:	615a      	str	r2, [r3, #20]
					res = FR_OK;
 8005c12:	2300      	movs	r3, #0
 8005c14:	73fb      	strb	r3, [r7, #15]
					if (!(ns & NS_LAST)) continue;
 8005c16:	7bbb      	ldrb	r3, [r7, #14]
 8005c18:	f003 0304 	and.w	r3, r3, #4
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d128      	bne.n	8005c72 <follow_path+0xf6>
 8005c20:	e022      	b.n	8005c68 <follow_path+0xec>
				} else {							/* Could not find the object */
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
 8005c22:	7bbb      	ldrb	r3, [r7, #14]
 8005c24:	f003 0304 	and.w	r3, r3, #4
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d122      	bne.n	8005c72 <follow_path+0xf6>
 8005c2c:	2305      	movs	r3, #5
 8005c2e:	73fb      	strb	r3, [r7, #15]
				}
				break;
 8005c30:	e01f      	b.n	8005c72 <follow_path+0xf6>
			}
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
 8005c32:	7bbb      	ldrb	r3, [r7, #14]
 8005c34:	f003 0304 	and.w	r3, r3, #4
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d11c      	bne.n	8005c76 <follow_path+0xfa>
			dir = dj->dir;						/* There is next segment. Follow the sub directory */
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	695b      	ldr	r3, [r3, #20]
 8005c40:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
 8005c42:	68bb      	ldr	r3, [r7, #8]
 8005c44:	330b      	adds	r3, #11
 8005c46:	781b      	ldrb	r3, [r3, #0]
 8005c48:	f003 0310 	and.w	r3, r3, #16
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d102      	bne.n	8005c56 <follow_path+0xda>
				res = FR_NO_PATH; break;
 8005c50:	2305      	movs	r3, #5
 8005c52:	73fb      	strb	r3, [r7, #15]
 8005c54:	e010      	b.n	8005c78 <follow_path+0xfc>
			}
			dj->sclust = ld_clust(dj->fs, dir);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	68b9      	ldr	r1, [r7, #8]
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	f7ff fa58 	bl	8005112 <ld_clust>
 8005c62:	4602      	mov	r2, r0
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	609a      	str	r2, [r3, #8]
			res = create_name(dj, &path);	/* Get a segment */
 8005c68:	e7af      	b.n	8005bca <follow_path+0x4e>
			if (res != FR_OK) break;
 8005c6a:	bf00      	nop
 8005c6c:	e004      	b.n	8005c78 <follow_path+0xfc>
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occurred */
 8005c6e:	bf00      	nop
 8005c70:	e002      	b.n	8005c78 <follow_path+0xfc>
				break;
 8005c72:	bf00      	nop
 8005c74:	e000      	b.n	8005c78 <follow_path+0xfc>
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
 8005c76:	bf00      	nop
		}
	}

	return res;
 8005c78:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	3710      	adds	r7, #16
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	bd80      	pop	{r7, pc}
	...

08005c84 <check_fs>:
static
BYTE check_fs (	/* 0:FAT-VBR, 1:Any BR but not FAT, 2:Not a BR, 3:Disk error */
	FATFS *fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b082      	sub	sp, #8
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
 8005c8c:	6039      	str	r1, [r7, #0]
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	7858      	ldrb	r0, [r3, #1]
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005c98:	2301      	movs	r3, #1
 8005c9a:	683a      	ldr	r2, [r7, #0]
 8005c9c:	f001 fcfc 	bl	8007698 <disk_read>
 8005ca0:	4603      	mov	r3, r0
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d001      	beq.n	8005caa <check_fs+0x26>
		return 3;
 8005ca6:	2303      	movs	r3, #3
 8005ca8:	e01e      	b.n	8005ce8 <check_fs+0x64>
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	f203 2336 	addw	r3, r3, #566	; 0x236
 8005cb0:	881b      	ldrh	r3, [r3, #0]
 8005cb2:	f64a 2255 	movw	r2, #43605	; 0xaa55
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d001      	beq.n	8005cbe <check_fs+0x3a>
		return 2;
 8005cba:	2302      	movs	r3, #2
 8005cbc:	e014      	b.n	8005ce8 <check_fs+0x64>

	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	336e      	adds	r3, #110	; 0x6e
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005cc8:	4a09      	ldr	r2, [pc, #36]	; (8005cf0 <check_fs+0x6c>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d101      	bne.n	8005cd2 <check_fs+0x4e>
		return 0;
 8005cce:	2300      	movs	r3, #0
 8005cd0:	e00a      	b.n	8005ce8 <check_fs+0x64>
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	338a      	adds	r3, #138	; 0x8a
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005cdc:	4a04      	ldr	r2, [pc, #16]	; (8005cf0 <check_fs+0x6c>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d101      	bne.n	8005ce6 <check_fs+0x62>
		return 0;
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	e000      	b.n	8005ce8 <check_fs+0x64>

	return 1;
 8005ce6:	2301      	movs	r3, #1
}
 8005ce8:	4618      	mov	r0, r3
 8005cea:	3708      	adds	r7, #8
 8005cec:	46bd      	mov	sp, r7
 8005cee:	bd80      	pop	{r7, pc}
 8005cf0:	00544146 	.word	0x00544146

08005cf4 <chk_mounted>:
FRESULT chk_mounted (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR **path,	/* Pointer to pointer to the path name (drive number) */
	FATFS **rfs,		/* Pointer to pointer to the found file system object */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b092      	sub	sp, #72	; 0x48
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	60f8      	str	r0, [r7, #12]
 8005cfc:	60b9      	str	r1, [r7, #8]
 8005cfe:	4613      	mov	r3, r2
 8005d00:	71fb      	strb	r3, [r7, #7]
	BYTE fmt, b, pi, *tbl;
	UINT vol;
	DSTATUS stat;
	DWORD bsect, fasize, tsect, sysect, nclst, szbfat;
	WORD nrsv;
	const TCHAR *p = *path;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	62fb      	str	r3, [r7, #44]	; 0x2c
	FATFS *fs;


	/* Get logical drive number from the path name */
	vol = p[0] - '0';					/* Is there a drive number? */
 8005d08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d0a:	781b      	ldrb	r3, [r3, #0]
 8005d0c:	3b30      	subs	r3, #48	; 0x30
 8005d0e:	643b      	str	r3, [r7, #64]	; 0x40
	if (vol <= 9 && p[1] == ':') {		/* Found a drive number, get and strip it */
 8005d10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d12:	2b09      	cmp	r3, #9
 8005d14:	d80b      	bhi.n	8005d2e <chk_mounted+0x3a>
 8005d16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d18:	3301      	adds	r3, #1
 8005d1a:	781b      	ldrb	r3, [r3, #0]
 8005d1c:	2b3a      	cmp	r3, #58	; 0x3a
 8005d1e:	d106      	bne.n	8005d2e <chk_mounted+0x3a>
		p += 2; *path = p;				/* Return pointer to the path name */
 8005d20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d22:	3302      	adds	r3, #2
 8005d24:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d2a:	601a      	str	r2, [r3, #0]
 8005d2c:	e002      	b.n	8005d34 <chk_mounted+0x40>
	} else {							/* No drive number, use default drive */
#if _FS_RPATH
		vol = CurrVol;					/* Use current drive */
 8005d2e:	4ba8      	ldr	r3, [pc, #672]	; (8005fd0 <chk_mounted+0x2dc>)
 8005d30:	781b      	ldrb	r3, [r3, #0]
 8005d32:	643b      	str	r3, [r7, #64]	; 0x40
		vol = 0;						/* Use drive 0 */
#endif
	}

	/* Check if the file system object is valid or not */
	*rfs = 0;
 8005d34:	68bb      	ldr	r3, [r7, #8]
 8005d36:	2200      	movs	r2, #0
 8005d38:	601a      	str	r2, [r3, #0]
	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
 8005d3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d001      	beq.n	8005d44 <chk_mounted+0x50>
		return FR_INVALID_DRIVE;
 8005d40:	230b      	movs	r3, #11
 8005d42:	e1d4      	b.n	80060ee <chk_mounted+0x3fa>
	fs = FatFs[vol];					/* Get corresponding file system object */
 8005d44:	4aa3      	ldr	r2, [pc, #652]	; (8005fd4 <chk_mounted+0x2e0>)
 8005d46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d4c:	62bb      	str	r3, [r7, #40]	; 0x28
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8005d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d101      	bne.n	8005d58 <chk_mounted+0x64>
 8005d54:	230c      	movs	r3, #12
 8005d56:	e1ca      	b.n	80060ee <chk_mounted+0x3fa>

	ENTER_FF(fs);						/* Lock volume */

	*rfs = fs;							/* Return pointer to the corresponding file system object */
 8005d58:	68bb      	ldr	r3, [r7, #8]
 8005d5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005d5c:	601a      	str	r2, [r3, #0]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8005d5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d60:	781b      	ldrb	r3, [r3, #0]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d01a      	beq.n	8005d9c <chk_mounted+0xa8>
		stat = disk_status(fs->drv);
 8005d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d68:	785b      	ldrb	r3, [r3, #1]
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	f001 fc7e 	bl	800766c <disk_status>
 8005d70:	4603      	mov	r3, r0
 8005d72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized (has not been changed), */
 8005d76:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005d7a:	f003 0301 	and.w	r3, r3, #1
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d10c      	bne.n	8005d9c <chk_mounted+0xa8>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 8005d82:	79fb      	ldrb	r3, [r7, #7]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d007      	beq.n	8005d98 <chk_mounted+0xa4>
 8005d88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005d8c:	f003 0304 	and.w	r3, r3, #4
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d001      	beq.n	8005d98 <chk_mounted+0xa4>
				return FR_WRITE_PROTECTED;
 8005d94:	230a      	movs	r3, #10
 8005d96:	e1aa      	b.n	80060ee <chk_mounted+0x3fa>
			return FR_OK;				/* The file system object is valid */
 8005d98:	2300      	movs	r3, #0
 8005d9a:	e1a8      	b.n	80060ee <chk_mounted+0x3fa>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8005d9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d9e:	2200      	movs	r2, #0
 8005da0:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8005da2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005da4:	b2da      	uxtb	r2, r3
 8005da6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005da8:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8005daa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dac:	785b      	ldrb	r3, [r3, #1]
 8005dae:	4618      	mov	r0, r3
 8005db0:	f001 fb7c 	bl	80074ac <disk_initialize>
 8005db4:	4603      	mov	r3, r0
 8005db6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 8005dba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005dbe:	f003 0301 	and.w	r3, r3, #1
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d001      	beq.n	8005dca <chk_mounted+0xd6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8005dc6:	2303      	movs	r3, #3
 8005dc8:	e191      	b.n	80060ee <chk_mounted+0x3fa>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 8005dca:	79fb      	ldrb	r3, [r7, #7]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d007      	beq.n	8005de0 <chk_mounted+0xec>
 8005dd0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005dd4:	f003 0304 	and.w	r3, r3, #4
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d001      	beq.n	8005de0 <chk_mounted+0xec>
		return FR_WRITE_PROTECTED;
 8005ddc:	230a      	movs	r3, #10
 8005dde:	e186      	b.n	80060ee <chk_mounted+0x3fa>
#if _MAX_SS != 512						/* Get disk sector size (variable sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &fs->ssize) != RES_OK)
		return FR_DISK_ERR;
#endif
	/* Search FAT partition on the drive. Supports only generic partitions, FDISK and SFD. */
	fmt = check_fs(fs, bsect = 0);		/* Load sector 0 and check if it is an FAT-VBR (in SFD) */
 8005de0:	2300      	movs	r3, #0
 8005de2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005de4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005de6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005de8:	f7ff ff4c 	bl	8005c84 <check_fs>
 8005dec:	4603      	mov	r3, r0
 8005dee:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (LD2PT(vol) && !fmt) fmt = 1;	/* Force non-SFD if the volume is forced partition */
	if (fmt == 1) {						/* Not an FAT-VBR, the physical drive can be partitioned */
 8005df2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005df6:	2b01      	cmp	r3, #1
 8005df8:	d124      	bne.n	8005e44 <chk_mounted+0x150>
		/* Check the partition listed in the partition table */
		pi = LD2PT(vol);
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
		if (pi) pi--;
 8005e00:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d004      	beq.n	8005e12 <chk_mounted+0x11e>
 8005e08:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8005e0c:	3b01      	subs	r3, #1
 8005e0e:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
		tbl = &fs->win[MBR_Table + pi * SZ_PTE];/* Partition table */
 8005e12:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8005e16:	011b      	lsls	r3, r3, #4
 8005e18:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8005e1c:	3338      	adds	r3, #56	; 0x38
 8005e1e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005e20:	4413      	add	r3, r2
 8005e22:	623b      	str	r3, [r7, #32]
		if (tbl[4]) {						/* Is the partition existing? */
 8005e24:	6a3b      	ldr	r3, [r7, #32]
 8005e26:	3304      	adds	r3, #4
 8005e28:	781b      	ldrb	r3, [r3, #0]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d00a      	beq.n	8005e44 <chk_mounted+0x150>
			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
 8005e2e:	6a3b      	ldr	r3, [r7, #32]
 8005e30:	3308      	adds	r3, #8
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	63fb      	str	r3, [r7, #60]	; 0x3c
			fmt = check_fs(fs, bsect);		/* Check the partition */
 8005e36:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005e38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005e3a:	f7ff ff23 	bl	8005c84 <check_fs>
 8005e3e:	4603      	mov	r3, r0
 8005e40:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
 8005e44:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005e48:	2b03      	cmp	r3, #3
 8005e4a:	d101      	bne.n	8005e50 <chk_mounted+0x15c>
 8005e4c:	2301      	movs	r3, #1
 8005e4e:	e14e      	b.n	80060ee <chk_mounted+0x3fa>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 8005e50:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d001      	beq.n	8005e5c <chk_mounted+0x168>
 8005e58:	230d      	movs	r3, #13
 8005e5a:	e148      	b.n	80060ee <chk_mounted+0x3fa>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8005e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e5e:	3338      	adds	r3, #56	; 0x38
 8005e60:	330b      	adds	r3, #11
 8005e62:	881b      	ldrh	r3, [r3, #0]
 8005e64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e68:	d001      	beq.n	8005e6e <chk_mounted+0x17a>
		return FR_NO_FILESYSTEM;
 8005e6a:	230d      	movs	r3, #13
 8005e6c:	e13f      	b.n	80060ee <chk_mounted+0x3fa>

	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
 8005e6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e70:	3338      	adds	r3, #56	; 0x38
 8005e72:	3316      	adds	r3, #22
 8005e74:	881b      	ldrh	r3, [r3, #0]
 8005e76:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
 8005e78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d104      	bne.n	8005e88 <chk_mounted+0x194>
 8005e7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e80:	3338      	adds	r3, #56	; 0x38
 8005e82:	3324      	adds	r3, #36	; 0x24
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	63bb      	str	r3, [r7, #56]	; 0x38
	fs->fsize = fasize;
 8005e88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e8a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005e8c:	621a      	str	r2, [r3, #32]

	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
 8005e8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e90:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8005e94:	77fb      	strb	r3, [r7, #31]
 8005e96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e98:	7ffa      	ldrb	r2, [r7, #31]
 8005e9a:	70da      	strb	r2, [r3, #3]
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
 8005e9c:	7ffb      	ldrb	r3, [r7, #31]
 8005e9e:	2b01      	cmp	r3, #1
 8005ea0:	d004      	beq.n	8005eac <chk_mounted+0x1b8>
 8005ea2:	7ffb      	ldrb	r3, [r7, #31]
 8005ea4:	2b02      	cmp	r3, #2
 8005ea6:	d001      	beq.n	8005eac <chk_mounted+0x1b8>
 8005ea8:	230d      	movs	r3, #13
 8005eaa:	e120      	b.n	80060ee <chk_mounted+0x3fa>
	fasize *= b;										/* Number of sectors for FAT area */
 8005eac:	7ffa      	ldrb	r2, [r7, #31]
 8005eae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eb0:	fb02 f303 	mul.w	r3, r2, r3
 8005eb4:	63bb      	str	r3, [r7, #56]	; 0x38

	fs->csize = b = fs->win[BPB_SecPerClus];			/* Number of sectors per cluster */
 8005eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eb8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005ebc:	77fb      	strb	r3, [r7, #31]
 8005ebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ec0:	7ffa      	ldrb	r2, [r7, #31]
 8005ec2:	709a      	strb	r2, [r3, #2]
	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8005ec4:	7ffb      	ldrb	r3, [r7, #31]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d005      	beq.n	8005ed6 <chk_mounted+0x1e2>
 8005eca:	7ffa      	ldrb	r2, [r7, #31]
 8005ecc:	7ffb      	ldrb	r3, [r7, #31]
 8005ece:	3b01      	subs	r3, #1
 8005ed0:	4013      	ands	r3, r2
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d001      	beq.n	8005eda <chk_mounted+0x1e6>
 8005ed6:	230d      	movs	r3, #13
 8005ed8:	e109      	b.n	80060ee <chk_mounted+0x3fa>

	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
 8005eda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005edc:	3338      	adds	r3, #56	; 0x38
 8005ede:	3311      	adds	r3, #17
 8005ee0:	881a      	ldrh	r2, [r3, #0]
 8005ee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ee4:	811a      	strh	r2, [r3, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
 8005ee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ee8:	891b      	ldrh	r3, [r3, #8]
 8005eea:	f003 030f 	and.w	r3, r3, #15
 8005eee:	b29b      	uxth	r3, r3
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d001      	beq.n	8005ef8 <chk_mounted+0x204>
 8005ef4:	230d      	movs	r3, #13
 8005ef6:	e0fa      	b.n	80060ee <chk_mounted+0x3fa>

	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
 8005ef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005efa:	3338      	adds	r3, #56	; 0x38
 8005efc:	3313      	adds	r3, #19
 8005efe:	881b      	ldrh	r3, [r3, #0]
 8005f00:	637b      	str	r3, [r7, #52]	; 0x34
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
 8005f02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d104      	bne.n	8005f12 <chk_mounted+0x21e>
 8005f08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f0a:	3338      	adds	r3, #56	; 0x38
 8005f0c:	3320      	adds	r3, #32
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	637b      	str	r3, [r7, #52]	; 0x34

	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
 8005f12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f14:	3338      	adds	r3, #56	; 0x38
 8005f16:	330e      	adds	r3, #14
 8005f18:	881b      	ldrh	r3, [r3, #0]
 8005f1a:	83bb      	strh	r3, [r7, #28]
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
 8005f1c:	8bbb      	ldrh	r3, [r7, #28]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d101      	bne.n	8005f26 <chk_mounted+0x232>
 8005f22:	230d      	movs	r3, #13
 8005f24:	e0e3      	b.n	80060ee <chk_mounted+0x3fa>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
 8005f26:	8bba      	ldrh	r2, [r7, #28]
 8005f28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f2a:	4413      	add	r3, r2
 8005f2c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005f2e:	8912      	ldrh	r2, [r2, #8]
 8005f30:	0912      	lsrs	r2, r2, #4
 8005f32:	b292      	uxth	r2, r2
 8005f34:	4413      	add	r3, r2
 8005f36:	61bb      	str	r3, [r7, #24]
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8005f38:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005f3a:	69bb      	ldr	r3, [r7, #24]
 8005f3c:	429a      	cmp	r2, r3
 8005f3e:	d201      	bcs.n	8005f44 <chk_mounted+0x250>
 8005f40:	230d      	movs	r3, #13
 8005f42:	e0d4      	b.n	80060ee <chk_mounted+0x3fa>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 8005f44:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005f46:	69bb      	ldr	r3, [r7, #24]
 8005f48:	1ad3      	subs	r3, r2, r3
 8005f4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005f4c:	7892      	ldrb	r2, [r2, #2]
 8005f4e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005f52:	617b      	str	r3, [r7, #20]
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 8005f54:	697b      	ldr	r3, [r7, #20]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d101      	bne.n	8005f5e <chk_mounted+0x26a>
 8005f5a:	230d      	movs	r3, #13
 8005f5c:	e0c7      	b.n	80060ee <chk_mounted+0x3fa>
	fmt = FS_FAT12;
 8005f5e:	2301      	movs	r3, #1
 8005f60:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 8005f64:	697b      	ldr	r3, [r7, #20]
 8005f66:	f640 72f5 	movw	r2, #4085	; 0xff5
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d902      	bls.n	8005f74 <chk_mounted+0x280>
 8005f6e:	2302      	movs	r3, #2
 8005f70:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 8005f74:	697b      	ldr	r3, [r7, #20]
 8005f76:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8005f7a:	4293      	cmp	r3, r2
 8005f7c:	d902      	bls.n	8005f84 <chk_mounted+0x290>
 8005f7e:	2303      	movs	r3, #3
 8005f80:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 8005f84:	697b      	ldr	r3, [r7, #20]
 8005f86:	1c9a      	adds	r2, r3, #2
 8005f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f8a:	61da      	str	r2, [r3, #28]
	fs->volbase = bsect;								/* Volume start sector */
 8005f8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f8e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005f90:	625a      	str	r2, [r3, #36]	; 0x24
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8005f92:	8bba      	ldrh	r2, [r7, #28]
 8005f94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f96:	441a      	add	r2, r3
 8005f98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f9a:	629a      	str	r2, [r3, #40]	; 0x28
	fs->database = bsect + sysect;						/* Data start sector */
 8005f9c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005f9e:	69bb      	ldr	r3, [r7, #24]
 8005fa0:	441a      	add	r2, r3
 8005fa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fa4:	631a      	str	r2, [r3, #48]	; 0x30
	if (fmt == FS_FAT32) {
 8005fa6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005faa:	2b03      	cmp	r3, #3
 8005fac:	d114      	bne.n	8005fd8 <chk_mounted+0x2e4>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 8005fae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fb0:	891b      	ldrh	r3, [r3, #8]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d001      	beq.n	8005fba <chk_mounted+0x2c6>
 8005fb6:	230d      	movs	r3, #13
 8005fb8:	e099      	b.n	80060ee <chk_mounted+0x3fa>
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
 8005fba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fbc:	3338      	adds	r3, #56	; 0x38
 8005fbe:	332c      	adds	r3, #44	; 0x2c
 8005fc0:	681a      	ldr	r2, [r3, #0]
 8005fc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fc4:	62da      	str	r2, [r3, #44]	; 0x2c
		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
 8005fc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fc8:	69db      	ldr	r3, [r3, #28]
 8005fca:	009b      	lsls	r3, r3, #2
 8005fcc:	633b      	str	r3, [r7, #48]	; 0x30
 8005fce:	e023      	b.n	8006018 <chk_mounted+0x324>
 8005fd0:	2000040a 	.word	0x2000040a
 8005fd4:	20000404 	.word	0x20000404
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8005fd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fda:	891b      	ldrh	r3, [r3, #8]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d101      	bne.n	8005fe4 <chk_mounted+0x2f0>
 8005fe0:	230d      	movs	r3, #13
 8005fe2:	e084      	b.n	80060ee <chk_mounted+0x3fa>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 8005fe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fe6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005fe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fea:	441a      	add	r2, r3
 8005fec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fee:	62da      	str	r2, [r3, #44]	; 0x2c
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8005ff0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005ff4:	2b02      	cmp	r3, #2
 8005ff6:	d103      	bne.n	8006000 <chk_mounted+0x30c>
 8005ff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ffa:	69db      	ldr	r3, [r3, #28]
 8005ffc:	005b      	lsls	r3, r3, #1
 8005ffe:	e00a      	b.n	8006016 <chk_mounted+0x322>
 8006000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006002:	69da      	ldr	r2, [r3, #28]
 8006004:	4613      	mov	r3, r2
 8006006:	005b      	lsls	r3, r3, #1
 8006008:	4413      	add	r3, r2
 800600a:	085a      	lsrs	r2, r3, #1
 800600c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800600e:	69db      	ldr	r3, [r3, #28]
 8006010:	f003 0301 	and.w	r3, r3, #1
 8006014:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
 8006016:	633b      	str	r3, [r7, #48]	; 0x30
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
 8006018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800601a:	6a1a      	ldr	r2, [r3, #32]
 800601c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800601e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8006022:	0a5b      	lsrs	r3, r3, #9
 8006024:	429a      	cmp	r2, r3
 8006026:	d201      	bcs.n	800602c <chk_mounted+0x338>
		return FR_NO_FILESYSTEM;
 8006028:	230d      	movs	r3, #13
 800602a:	e060      	b.n	80060ee <chk_mounted+0x3fa>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->free_clust = 0xFFFFFFFF;
 800602c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800602e:	f04f 32ff 	mov.w	r2, #4294967295
 8006032:	611a      	str	r2, [r3, #16]
	fs->last_clust = 0;
 8006034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006036:	2200      	movs	r2, #0
 8006038:	60da      	str	r2, [r3, #12]

	/* Get fsinfo if available */
	if (fmt == FS_FAT32) {
 800603a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800603e:	2b03      	cmp	r3, #3
 8006040:	d13d      	bne.n	80060be <chk_mounted+0x3ca>
	 	fs->fsi_flag = 0;
 8006042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006044:	2200      	movs	r2, #0
 8006046:	715a      	strb	r2, [r3, #5]
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
 8006048:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800604a:	3338      	adds	r3, #56	; 0x38
 800604c:	3330      	adds	r3, #48	; 0x30
 800604e:	881b      	ldrh	r3, [r3, #0]
 8006050:	461a      	mov	r2, r3
 8006052:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006054:	441a      	add	r2, r3
 8006056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006058:	615a      	str	r2, [r3, #20]
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
 800605a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800605c:	7858      	ldrb	r0, [r3, #1]
 800605e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006060:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006066:	695a      	ldr	r2, [r3, #20]
 8006068:	2301      	movs	r3, #1
 800606a:	f001 fb15 	bl	8007698 <disk_read>
 800606e:	4603      	mov	r3, r0
 8006070:	2b00      	cmp	r3, #0
 8006072:	d124      	bne.n	80060be <chk_mounted+0x3ca>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
 8006074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006076:	3338      	adds	r3, #56	; 0x38
 8006078:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800607c:	881b      	ldrh	r3, [r3, #0]
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
 800607e:	f64a 2255 	movw	r2, #43605	; 0xaa55
 8006082:	4293      	cmp	r3, r2
 8006084:	d11b      	bne.n	80060be <chk_mounted+0x3ca>
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
 8006086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006088:	3338      	adds	r3, #56	; 0x38
 800608a:	681b      	ldr	r3, [r3, #0]
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
 800608c:	4a1a      	ldr	r2, [pc, #104]	; (80060f8 <chk_mounted+0x404>)
 800608e:	4293      	cmp	r3, r2
 8006090:	d115      	bne.n	80060be <chk_mounted+0x3ca>
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
 8006092:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006094:	3338      	adds	r3, #56	; 0x38
 8006096:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800609a:	681b      	ldr	r3, [r3, #0]
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
 800609c:	4a17      	ldr	r2, [pc, #92]	; (80060fc <chk_mounted+0x408>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d10d      	bne.n	80060be <chk_mounted+0x3ca>
				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
 80060a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060a4:	3338      	adds	r3, #56	; 0x38
 80060a6:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80060aa:	681a      	ldr	r2, [r3, #0]
 80060ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060ae:	60da      	str	r2, [r3, #12]
				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
 80060b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060b2:	3338      	adds	r3, #56	; 0x38
 80060b4:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80060b8:	681a      	ldr	r2, [r3, #0]
 80060ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060bc:	611a      	str	r2, [r3, #16]
		}
	}
#endif
	fs->fs_type = fmt;		/* FAT sub-type */
 80060be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060c0:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 80060c4:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80060c6:	4b0e      	ldr	r3, [pc, #56]	; (8006100 <chk_mounted+0x40c>)
 80060c8:	881b      	ldrh	r3, [r3, #0]
 80060ca:	3301      	adds	r3, #1
 80060cc:	b29a      	uxth	r2, r3
 80060ce:	4b0c      	ldr	r3, [pc, #48]	; (8006100 <chk_mounted+0x40c>)
 80060d0:	801a      	strh	r2, [r3, #0]
 80060d2:	4b0b      	ldr	r3, [pc, #44]	; (8006100 <chk_mounted+0x40c>)
 80060d4:	881a      	ldrh	r2, [r3, #0]
 80060d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060d8:	80da      	strh	r2, [r3, #6]
	fs->winsect = 0;		/* Invalidate sector cache */
 80060da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060dc:	2200      	movs	r2, #0
 80060de:	635a      	str	r2, [r3, #52]	; 0x34
	fs->wflag = 0;
 80060e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060e2:	2200      	movs	r2, #0
 80060e4:	711a      	strb	r2, [r3, #4]
#if _FS_RPATH
	fs->cdir = 0;			/* Current directory (root dir) */
 80060e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060e8:	2200      	movs	r2, #0
 80060ea:	619a      	str	r2, [r3, #24]
#endif
#if _FS_LOCK				/* Clear file lock semaphores */
	clear_lock(fs);
#endif

	return FR_OK;
 80060ec:	2300      	movs	r3, #0
}
 80060ee:	4618      	mov	r0, r3
 80060f0:	3748      	adds	r7, #72	; 0x48
 80060f2:	46bd      	mov	sp, r7
 80060f4:	bd80      	pop	{r7, pc}
 80060f6:	bf00      	nop
 80060f8:	41615252 	.word	0x41615252
 80060fc:	61417272 	.word	0x61417272
 8006100:	20000408 	.word	0x20000408

08006104 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 8006104:	b580      	push	{r7, lr}
 8006106:	b084      	sub	sp, #16
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of fs and id in the FIL/DIR is identical */
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id)
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	2b00      	cmp	r3, #0
 8006114:	d00f      	beq.n	8006136 <validate+0x32>
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d00b      	beq.n	8006136 <validate+0x32>
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	781b      	ldrb	r3, [r3, #0]
 8006124:	2b00      	cmp	r3, #0
 8006126:	d006      	beq.n	8006136 <validate+0x32>
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	88da      	ldrh	r2, [r3, #6]
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	889b      	ldrh	r3, [r3, #4]
 8006132:	429a      	cmp	r2, r3
 8006134:	d001      	beq.n	800613a <validate+0x36>
		return FR_INVALID_OBJECT;
 8006136:	2309      	movs	r3, #9
 8006138:	e00d      	b.n	8006156 <validate+0x52>

	ENTER_FF(fil->fs);		/* Lock file system */

	if (disk_status(fil->fs->drv) & STA_NOINIT)
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	785b      	ldrb	r3, [r3, #1]
 8006140:	4618      	mov	r0, r3
 8006142:	f001 fa93 	bl	800766c <disk_status>
 8006146:	4603      	mov	r3, r0
 8006148:	f003 0301 	and.w	r3, r3, #1
 800614c:	2b00      	cmp	r3, #0
 800614e:	d001      	beq.n	8006154 <validate+0x50>
		return FR_NOT_READY;
 8006150:	2303      	movs	r3, #3
 8006152:	e000      	b.n	8006156 <validate+0x52>

	return FR_OK;
 8006154:	2300      	movs	r3, #0
}
 8006156:	4618      	mov	r0, r3
 8006158:	3710      	adds	r7, #16
 800615a:	46bd      	mov	sp, r7
 800615c:	bd80      	pop	{r7, pc}
	...

08006160 <f_mount>:

FRESULT f_mount (
	BYTE vol,		/* Logical drive number to be mounted/unmounted */
	FATFS *fs		/* Pointer to new file system object (NULL for unmount)*/
)
{
 8006160:	b480      	push	{r7}
 8006162:	b085      	sub	sp, #20
 8006164:	af00      	add	r7, sp, #0
 8006166:	4603      	mov	r3, r0
 8006168:	6039      	str	r1, [r7, #0]
 800616a:	71fb      	strb	r3, [r7, #7]
	FATFS *rfs;


	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
 800616c:	79fb      	ldrb	r3, [r7, #7]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d001      	beq.n	8006176 <f_mount+0x16>
		return FR_INVALID_DRIVE;
 8006172:	230b      	movs	r3, #11
 8006174:	e016      	b.n	80061a4 <f_mount+0x44>
	rfs = FatFs[vol];			/* Get current fs object */
 8006176:	79fb      	ldrb	r3, [r7, #7]
 8006178:	4a0d      	ldr	r2, [pc, #52]	; (80061b0 <f_mount+0x50>)
 800617a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800617e:	60fb      	str	r3, [r7, #12]

	if (rfs) {
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d002      	beq.n	800618c <f_mount+0x2c>
		clear_lock(rfs);
#endif
#if _FS_REENTRANT				/* Discard sync object of the current volume */
		if (!ff_del_syncobj(rfs->sobj)) return FR_INT_ERR;
#endif
		rfs->fs_type = 0;		/* Clear old fs object */
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	2200      	movs	r2, #0
 800618a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d002      	beq.n	8006198 <f_mount+0x38>
		fs->fs_type = 0;		/* Clear new fs object */
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	2200      	movs	r2, #0
 8006196:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT				/* Create sync object for the new volume */
		if (!ff_cre_syncobj(vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;			/* Register new fs object */
 8006198:	79fb      	ldrb	r3, [r7, #7]
 800619a:	4905      	ldr	r1, [pc, #20]	; (80061b0 <f_mount+0x50>)
 800619c:	683a      	ldr	r2, [r7, #0]
 800619e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	return FR_OK;
 80061a2:	2300      	movs	r3, #0
}
 80061a4:	4618      	mov	r0, r3
 80061a6:	3714      	adds	r7, #20
 80061a8:	46bd      	mov	sp, r7
 80061aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ae:	4770      	bx	lr
 80061b0:	20000404 	.word	0x20000404

080061b4 <f_open>:
FRESULT f_open (
	FIL *fp,			/* Pointer to the blank file object */
	const TCHAR *path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b094      	sub	sp, #80	; 0x50
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	60f8      	str	r0, [r7, #12]
 80061bc:	60b9      	str	r1, [r7, #8]
 80061be:	4613      	mov	r3, r2
 80061c0:	71fb      	strb	r3, [r7, #7]
	DIR dj;
	BYTE *dir;
	DEF_NAMEBUF;


	if (!fp) return FR_INVALID_OBJECT;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d101      	bne.n	80061cc <f_open+0x18>
 80061c8:	2309      	movs	r3, #9
 80061ca:	e0fc      	b.n	80063c6 <f_open+0x212>
	fp->fs = 0;			/* Clear file object */
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	2200      	movs	r2, #0
 80061d0:	601a      	str	r2, [r3, #0]

#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 80061d2:	79fb      	ldrb	r3, [r7, #7]
 80061d4:	f003 031f 	and.w	r3, r3, #31
 80061d8:	71fb      	strb	r3, [r7, #7]
	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & ~FA_READ));
 80061da:	79fb      	ldrb	r3, [r7, #7]
 80061dc:	f023 0301 	bic.w	r3, r3, #1
 80061e0:	b2da      	uxtb	r2, r3
 80061e2:	f107 011c 	add.w	r1, r7, #28
 80061e6:	f107 0308 	add.w	r3, r7, #8
 80061ea:	4618      	mov	r0, r3
 80061ec:	f7ff fd82 	bl	8005cf4 <chk_mounted>
 80061f0:	4603      	mov	r3, r0
 80061f2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
#else
	mode &= FA_READ;
	res = chk_mounted(&path, &dj.fs, 0);
#endif
	if (res == FR_OK) {
 80061f6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	f040 80e1 	bne.w	80063c2 <f_open+0x20e>
		INIT_BUF(dj);
 8006200:	f107 0310 	add.w	r3, r7, #16
 8006204:	637b      	str	r3, [r7, #52]	; 0x34
 8006206:	4b72      	ldr	r3, [pc, #456]	; (80063d0 <f_open+0x21c>)
 8006208:	63bb      	str	r3, [r7, #56]	; 0x38
		res = follow_path(&dj, path);	/* Follow the file path */
 800620a:	68ba      	ldr	r2, [r7, #8]
 800620c:	f107 031c 	add.w	r3, r7, #28
 8006210:	4611      	mov	r1, r2
 8006212:	4618      	mov	r0, r3
 8006214:	f7ff fcb2 	bl	8005b7c <follow_path>
 8006218:	4603      	mov	r3, r0
 800621a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		dir = dj.dir;
 800621e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006220:	64bb      	str	r3, [r7, #72]	; 0x48
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8006222:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8006226:	2b00      	cmp	r3, #0
 8006228:	d105      	bne.n	8006236 <f_open+0x82>
			if (!dir)	/* Current dir itself */
 800622a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800622c:	2b00      	cmp	r3, #0
 800622e:	d102      	bne.n	8006236 <f_open+0x82>
				res = FR_INVALID_NAME;
 8006230:	2306      	movs	r3, #6
 8006232:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8006236:	79fb      	ldrb	r3, [r7, #7]
 8006238:	f003 031c 	and.w	r3, r3, #28
 800623c:	2b00      	cmp	r3, #0
 800623e:	d06d      	beq.n	800631c <f_open+0x168>
			DWORD dw, cl;

			if (res != FR_OK) {					/* No file, create new */
 8006240:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8006244:	2b00      	cmp	r3, #0
 8006246:	d012      	beq.n	800626e <f_open+0xba>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 8006248:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800624c:	2b04      	cmp	r3, #4
 800624e:	d107      	bne.n	8006260 <f_open+0xac>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
					res = dir_register(&dj);
 8006250:	f107 031c 	add.w	r3, r7, #28
 8006254:	4618      	mov	r0, r3
 8006256:	f7ff f993 	bl	8005580 <dir_register>
 800625a:	4603      	mov	r3, r0
 800625c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8006260:	79fb      	ldrb	r3, [r7, #7]
 8006262:	f043 0308 	orr.w	r3, r3, #8
 8006266:	71fb      	strb	r3, [r7, #7]
				dir = dj.dir;					/* New entry */
 8006268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800626a:	64bb      	str	r3, [r7, #72]	; 0x48
 800626c:	e012      	b.n	8006294 <f_open+0xe0>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800626e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006270:	330b      	adds	r3, #11
 8006272:	781b      	ldrb	r3, [r3, #0]
 8006274:	f003 0311 	and.w	r3, r3, #17
 8006278:	2b00      	cmp	r3, #0
 800627a:	d003      	beq.n	8006284 <f_open+0xd0>
					res = FR_DENIED;
 800627c:	2307      	movs	r3, #7
 800627e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8006282:	e007      	b.n	8006294 <f_open+0xe0>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 8006284:	79fb      	ldrb	r3, [r7, #7]
 8006286:	f003 0304 	and.w	r3, r3, #4
 800628a:	2b00      	cmp	r3, #0
 800628c:	d002      	beq.n	8006294 <f_open+0xe0>
						res = FR_EXIST;
 800628e:	2308      	movs	r3, #8
 8006290:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8006294:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8006298:	2b00      	cmp	r3, #0
 800629a:	d15d      	bne.n	8006358 <f_open+0x1a4>
 800629c:	79fb      	ldrb	r3, [r7, #7]
 800629e:	f003 0308 	and.w	r3, r3, #8
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d058      	beq.n	8006358 <f_open+0x1a4>
				dw = get_fattime();					/* Created time */
 80062a6:	f001 fced 	bl	8007c84 <get_fattime>
 80062aa:	6478      	str	r0, [r7, #68]	; 0x44
				ST_DWORD(dir+DIR_CrtTime, dw);
 80062ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80062ae:	330e      	adds	r3, #14
 80062b0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80062b2:	601a      	str	r2, [r3, #0]
				dir[DIR_Attr] = 0;					/* Reset attribute */
 80062b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80062b6:	330b      	adds	r3, #11
 80062b8:	2200      	movs	r2, #0
 80062ba:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir+DIR_FileSize, 0);		/* size = 0 */
 80062bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80062be:	331c      	adds	r3, #28
 80062c0:	2200      	movs	r2, #0
 80062c2:	601a      	str	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);			/* Get start cluster */
 80062c4:	69fb      	ldr	r3, [r7, #28]
 80062c6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80062c8:	4618      	mov	r0, r3
 80062ca:	f7fe ff22 	bl	8005112 <ld_clust>
 80062ce:	6438      	str	r0, [r7, #64]	; 0x40
				st_clust(dir, 0);					/* cluster = 0 */
 80062d0:	2100      	movs	r1, #0
 80062d2:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80062d4:	f7fe ff38 	bl	8005148 <st_clust>
				dj.fs->wflag = 1;
 80062d8:	69fb      	ldr	r3, [r7, #28]
 80062da:	2201      	movs	r2, #1
 80062dc:	711a      	strb	r2, [r3, #4]
				if (cl) {							/* Remove the cluster chain if exist */
 80062de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d039      	beq.n	8006358 <f_open+0x1a4>
					dw = dj.fs->winsect;
 80062e4:	69fb      	ldr	r3, [r7, #28]
 80062e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062e8:	647b      	str	r3, [r7, #68]	; 0x44
					res = remove_chain(dj.fs, cl);
 80062ea:	69fb      	ldr	r3, [r7, #28]
 80062ec:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80062ee:	4618      	mov	r0, r3
 80062f0:	f7fe fca2 	bl	8004c38 <remove_chain>
 80062f4:	4603      	mov	r3, r0
 80062f6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					if (res == FR_OK) {
 80062fa:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d12a      	bne.n	8006358 <f_open+0x1a4>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 8006302:	69fb      	ldr	r3, [r7, #28]
 8006304:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006306:	3a01      	subs	r2, #1
 8006308:	60da      	str	r2, [r3, #12]
						res = move_window(dj.fs, dw);
 800630a:	69fb      	ldr	r3, [r7, #28]
 800630c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800630e:	4618      	mov	r0, r3
 8006310:	f7fe fa7b 	bl	800480a <move_window>
 8006314:	4603      	mov	r3, r0
 8006316:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800631a:	e01d      	b.n	8006358 <f_open+0x1a4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {						/* Follow succeeded */
 800631c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8006320:	2b00      	cmp	r3, #0
 8006322:	d119      	bne.n	8006358 <f_open+0x1a4>
				if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
 8006324:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006326:	330b      	adds	r3, #11
 8006328:	781b      	ldrb	r3, [r3, #0]
 800632a:	f003 0310 	and.w	r3, r3, #16
 800632e:	2b00      	cmp	r3, #0
 8006330:	d003      	beq.n	800633a <f_open+0x186>
					res = FR_NO_FILE;
 8006332:	2304      	movs	r3, #4
 8006334:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8006338:	e00e      	b.n	8006358 <f_open+0x1a4>
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 800633a:	79fb      	ldrb	r3, [r7, #7]
 800633c:	f003 0302 	and.w	r3, r3, #2
 8006340:	2b00      	cmp	r3, #0
 8006342:	d009      	beq.n	8006358 <f_open+0x1a4>
 8006344:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006346:	330b      	adds	r3, #11
 8006348:	781b      	ldrb	r3, [r3, #0]
 800634a:	f003 0301 	and.w	r3, r3, #1
 800634e:	2b00      	cmp	r3, #0
 8006350:	d002      	beq.n	8006358 <f_open+0x1a4>
						res = FR_DENIED;
 8006352:	2307      	movs	r3, #7
 8006354:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
				}
			}
		}
		if (res == FR_OK) {
 8006358:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800635c:	2b00      	cmp	r3, #0
 800635e:	d10f      	bne.n	8006380 <f_open+0x1cc>
			if (mode & FA_CREATE_ALWAYS)			/* Set file change flag if created or overwritten */
 8006360:	79fb      	ldrb	r3, [r7, #7]
 8006362:	f003 0308 	and.w	r3, r3, #8
 8006366:	2b00      	cmp	r3, #0
 8006368:	d003      	beq.n	8006372 <f_open+0x1be>
				mode |= FA__WRITTEN;
 800636a:	79fb      	ldrb	r3, [r7, #7]
 800636c:	f043 0320 	orr.w	r3, r3, #32
 8006370:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = dj.fs->winsect;			/* Pointer to the directory entry */
 8006372:	69fb      	ldr	r3, [r7, #28]
 8006374:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	61da      	str	r2, [r3, #28]
			fp->dir_ptr = dir;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800637e:	621a      	str	r2, [r3, #32]
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 8006380:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8006384:	2b00      	cmp	r3, #0
 8006386:	d11c      	bne.n	80063c2 <f_open+0x20e>
			fp->flag = mode;					/* File access mode */
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	79fa      	ldrb	r2, [r7, #7]
 800638c:	719a      	strb	r2, [r3, #6]
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 800638e:	69fb      	ldr	r3, [r7, #28]
 8006390:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8006392:	4618      	mov	r0, r3
 8006394:	f7fe febd 	bl	8005112 <ld_clust>
 8006398:	4602      	mov	r2, r0
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	611a      	str	r2, [r3, #16]
			fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
 800639e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80063a0:	331c      	adds	r3, #28
 80063a2:	681a      	ldr	r2, [r3, #0]
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	60da      	str	r2, [r3, #12]
			fp->fptr = 0;						/* File pointer */
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	2200      	movs	r2, #0
 80063ac:	609a      	str	r2, [r3, #8]
			fp->dsect = 0;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	2200      	movs	r2, #0
 80063b2:	619a      	str	r2, [r3, #24]
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
#endif
			fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
 80063b4:	69fa      	ldr	r2, [r7, #28]
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	601a      	str	r2, [r3, #0]
 80063ba:	69fb      	ldr	r3, [r7, #28]
 80063bc:	88da      	ldrh	r2, [r3, #6]
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	809a      	strh	r2, [r3, #4]
		}
	}

	LEAVE_FF(dj.fs, res);
 80063c2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 80063c6:	4618      	mov	r0, r3
 80063c8:	3750      	adds	r7, #80	; 0x50
 80063ca:	46bd      	mov	sp, r7
 80063cc:	bd80      	pop	{r7, pc}
 80063ce:	bf00      	nop
 80063d0:	2000040c 	.word	0x2000040c

080063d4 <f_read>:
	FIL *fp, 		/* Pointer to the file object */
	void *buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT *br		/* Pointer to number of bytes read */
)
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b08c      	sub	sp, #48	; 0x30
 80063d8:	af00      	add	r7, sp, #0
 80063da:	60f8      	str	r0, [r7, #12]
 80063dc:	60b9      	str	r1, [r7, #8]
 80063de:	607a      	str	r2, [r7, #4]
 80063e0:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = (BYTE*)buff;
 80063e2:	68bb      	ldr	r3, [r7, #8]
 80063e4:	623b      	str	r3, [r7, #32]


	*br = 0;	/* Clear read byte counter */
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	2200      	movs	r2, #0
 80063ea:	601a      	str	r2, [r3, #0]

	res = validate(fp);							/* Check validity */
 80063ec:	68f8      	ldr	r0, [r7, #12]
 80063ee:	f7ff fe89 	bl	8006104 <validate>
 80063f2:	4603      	mov	r3, r0
 80063f4:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 80063f6:	7ffb      	ldrb	r3, [r7, #31]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d001      	beq.n	8006400 <f_read+0x2c>
 80063fc:	7ffb      	ldrb	r3, [r7, #31]
 80063fe:	e135      	b.n	800666c <f_read+0x298>
	if (fp->flag & FA__ERROR)					/* Aborted file? */
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	799b      	ldrb	r3, [r3, #6]
 8006404:	b25b      	sxtb	r3, r3
 8006406:	2b00      	cmp	r3, #0
 8006408:	da01      	bge.n	800640e <f_read+0x3a>
		LEAVE_FF(fp->fs, FR_INT_ERR);
 800640a:	2302      	movs	r3, #2
 800640c:	e12e      	b.n	800666c <f_read+0x298>
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	799b      	ldrb	r3, [r3, #6]
 8006412:	f003 0301 	and.w	r3, r3, #1
 8006416:	2b00      	cmp	r3, #0
 8006418:	d101      	bne.n	800641e <f_read+0x4a>
		LEAVE_FF(fp->fs, FR_DENIED);
 800641a:	2307      	movs	r3, #7
 800641c:	e126      	b.n	800666c <f_read+0x298>
	remain = fp->fsize - fp->fptr;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	68da      	ldr	r2, [r3, #12]
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	689b      	ldr	r3, [r3, #8]
 8006426:	1ad3      	subs	r3, r2, r3
 8006428:	61bb      	str	r3, [r7, #24]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800642a:	687a      	ldr	r2, [r7, #4]
 800642c:	69bb      	ldr	r3, [r7, #24]
 800642e:	429a      	cmp	r2, r3
 8006430:	f240 8117 	bls.w	8006662 <f_read+0x28e>
 8006434:	69bb      	ldr	r3, [r7, #24]
 8006436:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8006438:	e113      	b.n	8006662 <f_read+0x28e>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	689b      	ldr	r3, [r3, #8]
 800643e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006442:	2b00      	cmp	r3, #0
 8006444:	f040 80df 	bne.w	8006606 <f_read+0x232>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	689b      	ldr	r3, [r3, #8]
 800644c:	0a5b      	lsrs	r3, r3, #9
 800644e:	b2da      	uxtb	r2, r3
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	789b      	ldrb	r3, [r3, #2]
 8006456:	3b01      	subs	r3, #1
 8006458:	b2db      	uxtb	r3, r3
 800645a:	4013      	ands	r3, r2
 800645c:	75fb      	strb	r3, [r7, #23]
			if (!csect) {						/* On the cluster boundary? */
 800645e:	7dfb      	ldrb	r3, [r7, #23]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d12c      	bne.n	80064be <f_read+0xea>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	689b      	ldr	r3, [r3, #8]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d103      	bne.n	8006474 <f_read+0xa0>
					clst = fp->sclust;			/* Follow from the origin */
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	691b      	ldr	r3, [r3, #16]
 8006470:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006472:	e008      	b.n	8006486 <f_read+0xb2>
#if _USE_FASTSEEK
					if (fp->cltbl)
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681a      	ldr	r2, [r3, #0]
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	695b      	ldr	r3, [r3, #20]
 800647c:	4619      	mov	r1, r3
 800647e:	4610      	mov	r0, r2
 8006480:	f7fe fa6b 	bl	800495a <get_fat>
 8006484:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
 8006486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006488:	2b01      	cmp	r3, #1
 800648a:	d808      	bhi.n	800649e <f_read+0xca>
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	799b      	ldrb	r3, [r3, #6]
 8006490:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006494:	b2da      	uxtb	r2, r3
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	719a      	strb	r2, [r3, #6]
 800649a:	2302      	movs	r3, #2
 800649c:	e0e6      	b.n	800666c <f_read+0x298>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800649e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064a4:	d108      	bne.n	80064b8 <f_read+0xe4>
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	799b      	ldrb	r3, [r3, #6]
 80064aa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80064ae:	b2da      	uxtb	r2, r3
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	719a      	strb	r2, [r3, #6]
 80064b4:	2301      	movs	r3, #1
 80064b6:	e0d9      	b.n	800666c <f_read+0x298>
				fp->clust = clst;				/* Update current cluster */
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80064bc:	615a      	str	r2, [r3, #20]
			}
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	681a      	ldr	r2, [r3, #0]
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	695b      	ldr	r3, [r3, #20]
 80064c6:	4619      	mov	r1, r3
 80064c8:	4610      	mov	r0, r2
 80064ca:	f7fe fa27 	bl	800491c <clust2sect>
 80064ce:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 80064d0:	693b      	ldr	r3, [r7, #16]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d108      	bne.n	80064e8 <f_read+0x114>
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	799b      	ldrb	r3, [r3, #6]
 80064da:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80064de:	b2da      	uxtb	r2, r3
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	719a      	strb	r2, [r3, #6]
 80064e4:	2302      	movs	r3, #2
 80064e6:	e0c1      	b.n	800666c <f_read+0x298>
			sect += csect;
 80064e8:	7dfb      	ldrb	r3, [r7, #23]
 80064ea:	693a      	ldr	r2, [r7, #16]
 80064ec:	4413      	add	r3, r2
 80064ee:	613b      	str	r3, [r7, #16]
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	0a5b      	lsrs	r3, r3, #9
 80064f4:	627b      	str	r3, [r7, #36]	; 0x24
			if (cc) {							/* Read maximum contiguous sectors directly */
 80064f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d042      	beq.n	8006582 <f_read+0x1ae>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 80064fc:	7dfa      	ldrb	r2, [r7, #23]
 80064fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006500:	4413      	add	r3, r2
 8006502:	68fa      	ldr	r2, [r7, #12]
 8006504:	6812      	ldr	r2, [r2, #0]
 8006506:	7892      	ldrb	r2, [r2, #2]
 8006508:	4293      	cmp	r3, r2
 800650a:	d906      	bls.n	800651a <f_read+0x146>
					cc = fp->fs->csize - csect;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	789b      	ldrb	r3, [r3, #2]
 8006512:	461a      	mov	r2, r3
 8006514:	7dfb      	ldrb	r3, [r7, #23]
 8006516:	1ad3      	subs	r3, r2, r3
 8006518:	627b      	str	r3, [r7, #36]	; 0x24
				if (disk_read(fp->fs->drv, rbuff, sect, (BYTE)cc) != RES_OK)
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	7858      	ldrb	r0, [r3, #1]
 8006520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006522:	b2db      	uxtb	r3, r3
 8006524:	693a      	ldr	r2, [r7, #16]
 8006526:	6a39      	ldr	r1, [r7, #32]
 8006528:	f001 f8b6 	bl	8007698 <disk_read>
 800652c:	4603      	mov	r3, r0
 800652e:	2b00      	cmp	r3, #0
 8006530:	d008      	beq.n	8006544 <f_read+0x170>
					ABORT(fp->fs, FR_DISK_ERR);
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	799b      	ldrb	r3, [r3, #6]
 8006536:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800653a:	b2da      	uxtb	r2, r3
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	719a      	strb	r2, [r3, #6]
 8006540:	2301      	movs	r3, #1
 8006542:	e093      	b.n	800666c <f_read+0x298>
#if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it contains a dirty sector */
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win, SS(fp->fs));
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	799b      	ldrb	r3, [r3, #6]
 8006548:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800654c:	2b00      	cmp	r3, #0
 800654e:	d014      	beq.n	800657a <f_read+0x1a6>
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	699a      	ldr	r2, [r3, #24]
 8006554:	693b      	ldr	r3, [r7, #16]
 8006556:	1ad3      	subs	r3, r2, r3
 8006558:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800655a:	429a      	cmp	r2, r3
 800655c:	d90d      	bls.n	800657a <f_read+0x1a6>
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf, SS(fp->fs));
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	699a      	ldr	r2, [r3, #24]
 8006562:	693b      	ldr	r3, [r7, #16]
 8006564:	1ad3      	subs	r3, r2, r3
 8006566:	025b      	lsls	r3, r3, #9
 8006568:	6a3a      	ldr	r2, [r7, #32]
 800656a:	18d0      	adds	r0, r2, r3
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	3324      	adds	r3, #36	; 0x24
 8006570:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006574:	4619      	mov	r1, r3
 8006576:	f7fe f875 	bl	8004664 <mem_cpy>
#endif
#endif
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
 800657a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800657c:	025b      	lsls	r3, r3, #9
 800657e:	62bb      	str	r3, [r7, #40]	; 0x28
				continue;
 8006580:	e05b      	b.n	800663a <f_read+0x266>
			}
#if !_FS_TINY
			if (fp->dsect != sect) {			/* Load data sector if not in cache */
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	699b      	ldr	r3, [r3, #24]
 8006586:	693a      	ldr	r2, [r7, #16]
 8006588:	429a      	cmp	r2, r3
 800658a:	d039      	beq.n	8006600 <f_read+0x22c>
#if !_FS_READONLY
				if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	799b      	ldrb	r3, [r3, #6]
 8006590:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006594:	2b00      	cmp	r3, #0
 8006596:	d01d      	beq.n	80065d4 <f_read+0x200>
					if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	7858      	ldrb	r0, [r3, #1]
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	f103 0124 	add.w	r1, r3, #36	; 0x24
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	699a      	ldr	r2, [r3, #24]
 80065a8:	2301      	movs	r3, #1
 80065aa:	f001 f8dd 	bl	8007768 <disk_write>
 80065ae:	4603      	mov	r3, r0
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d008      	beq.n	80065c6 <f_read+0x1f2>
						ABORT(fp->fs, FR_DISK_ERR);
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	799b      	ldrb	r3, [r3, #6]
 80065b8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80065bc:	b2da      	uxtb	r2, r3
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	719a      	strb	r2, [r3, #6]
 80065c2:	2301      	movs	r3, #1
 80065c4:	e052      	b.n	800666c <f_read+0x298>
					fp->flag &= ~FA__DIRTY;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	799b      	ldrb	r3, [r3, #6]
 80065ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80065ce:	b2da      	uxtb	r2, r3
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	719a      	strb	r2, [r3, #6]
				}
#endif
				if (disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)	/* Fill sector cache */
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	7858      	ldrb	r0, [r3, #1]
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	f103 0124 	add.w	r1, r3, #36	; 0x24
 80065e0:	2301      	movs	r3, #1
 80065e2:	693a      	ldr	r2, [r7, #16]
 80065e4:	f001 f858 	bl	8007698 <disk_read>
 80065e8:	4603      	mov	r3, r0
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d008      	beq.n	8006600 <f_read+0x22c>
					ABORT(fp->fs, FR_DISK_ERR);
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	799b      	ldrb	r3, [r3, #6]
 80065f2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80065f6:	b2da      	uxtb	r2, r3
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	719a      	strb	r2, [r3, #6]
 80065fc:	2301      	movs	r3, #1
 80065fe:	e035      	b.n	800666c <f_read+0x298>
			}
#endif
			fp->dsect = sect;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	693a      	ldr	r2, [r7, #16]
 8006604:	619a      	str	r2, [r3, #24]
		}
		rcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	689b      	ldr	r3, [r3, #8]
 800660a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800660e:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8006612:	62bb      	str	r3, [r7, #40]	; 0x28
		if (rcnt > btr) rcnt = btr;
 8006614:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	429a      	cmp	r2, r3
 800661a:	d901      	bls.n	8006620 <f_read+0x24c>
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	62bb      	str	r3, [r7, #40]	; 0x28
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))		/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(rbuff, &fp->fs->win[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#else
		mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	689b      	ldr	r3, [r3, #8]
 8006624:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006628:	3320      	adds	r3, #32
 800662a:	68fa      	ldr	r2, [r7, #12]
 800662c:	4413      	add	r3, r2
 800662e:	3304      	adds	r3, #4
 8006630:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006632:	4619      	mov	r1, r3
 8006634:	6a38      	ldr	r0, [r7, #32]
 8006636:	f7fe f815 	bl	8004664 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800663a:	6a3a      	ldr	r2, [r7, #32]
 800663c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800663e:	4413      	add	r3, r2
 8006640:	623b      	str	r3, [r7, #32]
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	689a      	ldr	r2, [r3, #8]
 8006646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006648:	441a      	add	r2, r3
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	609a      	str	r2, [r3, #8]
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	681a      	ldr	r2, [r3, #0]
 8006652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006654:	441a      	add	r2, r3
 8006656:	683b      	ldr	r3, [r7, #0]
 8006658:	601a      	str	r2, [r3, #0]
 800665a:	687a      	ldr	r2, [r7, #4]
 800665c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800665e:	1ad3      	subs	r3, r2, r3
 8006660:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	2b00      	cmp	r3, #0
 8006666:	f47f aee8 	bne.w	800643a <f_read+0x66>
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
 800666a:	2300      	movs	r3, #0
}
 800666c:	4618      	mov	r0, r3
 800666e:	3730      	adds	r7, #48	; 0x30
 8006670:	46bd      	mov	sp, r7
 8006672:	bd80      	pop	{r7, pc}

08006674 <f_write>:
	FIL *fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT *bw			/* Pointer to number of bytes written */
)
{
 8006674:	b580      	push	{r7, lr}
 8006676:	b08a      	sub	sp, #40	; 0x28
 8006678:	af00      	add	r7, sp, #0
 800667a:	60f8      	str	r0, [r7, #12]
 800667c:	60b9      	str	r1, [r7, #8]
 800667e:	607a      	str	r2, [r7, #4]
 8006680:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
 8006682:	68bb      	ldr	r3, [r7, #8]
 8006684:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 8006686:	683b      	ldr	r3, [r7, #0]
 8006688:	2200      	movs	r2, #0
 800668a:	601a      	str	r2, [r3, #0]

	res = validate(fp);						/* Check validity */
 800668c:	68f8      	ldr	r0, [r7, #12]
 800668e:	f7ff fd39 	bl	8006104 <validate>
 8006692:	4603      	mov	r3, r0
 8006694:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8006696:	7dfb      	ldrb	r3, [r7, #23]
 8006698:	2b00      	cmp	r3, #0
 800669a:	d001      	beq.n	80066a0 <f_write+0x2c>
 800669c:	7dfb      	ldrb	r3, [r7, #23]
 800669e:	e166      	b.n	800696e <f_write+0x2fa>
	if (fp->flag & FA__ERROR)				/* Aborted file? */
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	799b      	ldrb	r3, [r3, #6]
 80066a4:	b25b      	sxtb	r3, r3
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	da01      	bge.n	80066ae <f_write+0x3a>
		LEAVE_FF(fp->fs, FR_INT_ERR);
 80066aa:	2302      	movs	r3, #2
 80066ac:	e15f      	b.n	800696e <f_write+0x2fa>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	799b      	ldrb	r3, [r3, #6]
 80066b2:	f003 0302 	and.w	r3, r3, #2
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d101      	bne.n	80066be <f_write+0x4a>
		LEAVE_FF(fp->fs, FR_DENIED);
 80066ba:	2307      	movs	r3, #7
 80066bc:	e157      	b.n	800696e <f_write+0x2fa>
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	68da      	ldr	r2, [r3, #12]
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	441a      	add	r2, r3
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	68db      	ldr	r3, [r3, #12]
 80066ca:	429a      	cmp	r2, r3
 80066cc:	f080 8137 	bcs.w	800693e <f_write+0x2ca>
 80066d0:	2300      	movs	r3, #0
 80066d2:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
 80066d4:	e133      	b.n	800693e <f_write+0x2ca>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	689b      	ldr	r3, [r3, #8]
 80066da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066de:	2b00      	cmp	r3, #0
 80066e0:	f040 80f8 	bne.w	80068d4 <f_write+0x260>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	689b      	ldr	r3, [r3, #8]
 80066e8:	0a5b      	lsrs	r3, r3, #9
 80066ea:	b2da      	uxtb	r2, r3
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	789b      	ldrb	r3, [r3, #2]
 80066f2:	3b01      	subs	r3, #1
 80066f4:	b2db      	uxtb	r3, r3
 80066f6:	4013      	ands	r3, r2
 80066f8:	75bb      	strb	r3, [r7, #22]
			if (!csect) {					/* On the cluster boundary? */
 80066fa:	7dbb      	ldrb	r3, [r7, #22]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d13d      	bne.n	800677c <f_write+0x108>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	689b      	ldr	r3, [r3, #8]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d110      	bne.n	800672a <f_write+0xb6>
					clst = fp->sclust;		/* Follow from the origin */
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	691b      	ldr	r3, [r3, #16]
 800670c:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
 800670e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006710:	2b00      	cmp	r3, #0
 8006712:	d113      	bne.n	800673c <f_write+0xc8>
						fp->sclust = clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	2100      	movs	r1, #0
 800671a:	4618      	mov	r0, r3
 800671c:	f7fe fadb 	bl	8004cd6 <create_chain>
 8006720:	6278      	str	r0, [r7, #36]	; 0x24
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006726:	611a      	str	r2, [r3, #16]
 8006728:	e008      	b.n	800673c <f_write+0xc8>
#if _USE_FASTSEEK
					if (fp->cltbl)
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	681a      	ldr	r2, [r3, #0]
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	695b      	ldr	r3, [r3, #20]
 8006732:	4619      	mov	r1, r3
 8006734:	4610      	mov	r0, r2
 8006736:	f7fe face 	bl	8004cd6 <create_chain>
 800673a:	6278      	str	r0, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800673c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800673e:	2b00      	cmp	r3, #0
 8006740:	f000 8102 	beq.w	8006948 <f_write+0x2d4>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 8006744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006746:	2b01      	cmp	r3, #1
 8006748:	d108      	bne.n	800675c <f_write+0xe8>
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	799b      	ldrb	r3, [r3, #6]
 800674e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006752:	b2da      	uxtb	r2, r3
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	719a      	strb	r2, [r3, #6]
 8006758:	2302      	movs	r3, #2
 800675a:	e108      	b.n	800696e <f_write+0x2fa>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800675c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800675e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006762:	d108      	bne.n	8006776 <f_write+0x102>
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	799b      	ldrb	r3, [r3, #6]
 8006768:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800676c:	b2da      	uxtb	r2, r3
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	719a      	strb	r2, [r3, #6]
 8006772:	2301      	movs	r3, #1
 8006774:	e0fb      	b.n	800696e <f_write+0x2fa>
				fp->clust = clst;			/* Update current cluster */
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800677a:	615a      	str	r2, [r3, #20]
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	799b      	ldrb	r3, [r3, #6]
 8006780:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006784:	2b00      	cmp	r3, #0
 8006786:	d01d      	beq.n	80067c4 <f_write+0x150>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	7858      	ldrb	r0, [r3, #1]
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	699a      	ldr	r2, [r3, #24]
 8006798:	2301      	movs	r3, #1
 800679a:	f000 ffe5 	bl	8007768 <disk_write>
 800679e:	4603      	mov	r3, r0
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d008      	beq.n	80067b6 <f_write+0x142>
					ABORT(fp->fs, FR_DISK_ERR);
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	799b      	ldrb	r3, [r3, #6]
 80067a8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80067ac:	b2da      	uxtb	r2, r3
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	719a      	strb	r2, [r3, #6]
 80067b2:	2301      	movs	r3, #1
 80067b4:	e0db      	b.n	800696e <f_write+0x2fa>
				fp->flag &= ~FA__DIRTY;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	799b      	ldrb	r3, [r3, #6]
 80067ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80067be:	b2da      	uxtb	r2, r3
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	719a      	strb	r2, [r3, #6]
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	681a      	ldr	r2, [r3, #0]
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	695b      	ldr	r3, [r3, #20]
 80067cc:	4619      	mov	r1, r3
 80067ce:	4610      	mov	r0, r2
 80067d0:	f7fe f8a4 	bl	800491c <clust2sect>
 80067d4:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 80067d6:	693b      	ldr	r3, [r7, #16]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d108      	bne.n	80067ee <f_write+0x17a>
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	799b      	ldrb	r3, [r3, #6]
 80067e0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80067e4:	b2da      	uxtb	r2, r3
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	719a      	strb	r2, [r3, #6]
 80067ea:	2302      	movs	r3, #2
 80067ec:	e0bf      	b.n	800696e <f_write+0x2fa>
			sect += csect;
 80067ee:	7dbb      	ldrb	r3, [r7, #22]
 80067f0:	693a      	ldr	r2, [r7, #16]
 80067f2:	4413      	add	r3, r2
 80067f4:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	0a5b      	lsrs	r3, r3, #9
 80067fa:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80067fc:	69fb      	ldr	r3, [r7, #28]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d044      	beq.n	800688c <f_write+0x218>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 8006802:	7dba      	ldrb	r2, [r7, #22]
 8006804:	69fb      	ldr	r3, [r7, #28]
 8006806:	4413      	add	r3, r2
 8006808:	68fa      	ldr	r2, [r7, #12]
 800680a:	6812      	ldr	r2, [r2, #0]
 800680c:	7892      	ldrb	r2, [r2, #2]
 800680e:	4293      	cmp	r3, r2
 8006810:	d906      	bls.n	8006820 <f_write+0x1ac>
					cc = fp->fs->csize - csect;
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	789b      	ldrb	r3, [r3, #2]
 8006818:	461a      	mov	r2, r3
 800681a:	7dbb      	ldrb	r3, [r7, #22]
 800681c:	1ad3      	subs	r3, r2, r3
 800681e:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, (BYTE)cc) != RES_OK)
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	7858      	ldrb	r0, [r3, #1]
 8006826:	69fb      	ldr	r3, [r7, #28]
 8006828:	b2db      	uxtb	r3, r3
 800682a:	693a      	ldr	r2, [r7, #16]
 800682c:	69b9      	ldr	r1, [r7, #24]
 800682e:	f000 ff9b 	bl	8007768 <disk_write>
 8006832:	4603      	mov	r3, r0
 8006834:	2b00      	cmp	r3, #0
 8006836:	d008      	beq.n	800684a <f_write+0x1d6>
					ABORT(fp->fs, FR_DISK_ERR);
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	799b      	ldrb	r3, [r3, #6]
 800683c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006840:	b2da      	uxtb	r2, r3
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	719a      	strb	r2, [r3, #6]
 8006846:	2301      	movs	r3, #1
 8006848:	e091      	b.n	800696e <f_write+0x2fa>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	699a      	ldr	r2, [r3, #24]
 800684e:	693b      	ldr	r3, [r7, #16]
 8006850:	1ad3      	subs	r3, r2, r3
 8006852:	69fa      	ldr	r2, [r7, #28]
 8006854:	429a      	cmp	r2, r3
 8006856:	d915      	bls.n	8006884 <f_write+0x210>
					mem_cpy(fp->buf, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	699a      	ldr	r2, [r3, #24]
 8006862:	693b      	ldr	r3, [r7, #16]
 8006864:	1ad3      	subs	r3, r2, r3
 8006866:	025b      	lsls	r3, r3, #9
 8006868:	69ba      	ldr	r2, [r7, #24]
 800686a:	4413      	add	r3, r2
 800686c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006870:	4619      	mov	r1, r3
 8006872:	f7fd fef7 	bl	8004664 <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	799b      	ldrb	r3, [r3, #6]
 800687a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800687e:	b2da      	uxtb	r2, r3
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	719a      	strb	r2, [r3, #6]
				}
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 8006884:	69fb      	ldr	r3, [r7, #28]
 8006886:	025b      	lsls	r3, r3, #9
 8006888:	623b      	str	r3, [r7, #32]
				continue;
 800688a:	e044      	b.n	8006916 <f_write+0x2a2>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	699b      	ldr	r3, [r3, #24]
 8006890:	693a      	ldr	r2, [r7, #16]
 8006892:	429a      	cmp	r2, r3
 8006894:	d01b      	beq.n	80068ce <f_write+0x25a>
				if (fp->fptr < fp->fsize &&
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	689a      	ldr	r2, [r3, #8]
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	68db      	ldr	r3, [r3, #12]
 800689e:	429a      	cmp	r2, r3
 80068a0:	d215      	bcs.n	80068ce <f_write+0x25a>
					disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	7858      	ldrb	r0, [r3, #1]
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	f103 0124 	add.w	r1, r3, #36	; 0x24
 80068ae:	2301      	movs	r3, #1
 80068b0:	693a      	ldr	r2, [r7, #16]
 80068b2:	f000 fef1 	bl	8007698 <disk_read>
 80068b6:	4603      	mov	r3, r0
				if (fp->fptr < fp->fsize &&
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d008      	beq.n	80068ce <f_write+0x25a>
						ABORT(fp->fs, FR_DISK_ERR);
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	799b      	ldrb	r3, [r3, #6]
 80068c0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80068c4:	b2da      	uxtb	r2, r3
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	719a      	strb	r2, [r3, #6]
 80068ca:	2301      	movs	r3, #1
 80068cc:	e04f      	b.n	800696e <f_write+0x2fa>
			}
#endif
			fp->dsect = sect;
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	693a      	ldr	r2, [r7, #16]
 80068d2:	619a      	str	r2, [r3, #24]
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	689b      	ldr	r3, [r3, #8]
 80068d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068dc:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80068e0:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
 80068e2:	6a3a      	ldr	r2, [r7, #32]
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	429a      	cmp	r2, r3
 80068e8:	d901      	bls.n	80068ee <f_write+0x27a>
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	623b      	str	r3, [r7, #32]
		if (move_window(fp->fs, fp->dsect))	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	689b      	ldr	r3, [r3, #8]
 80068f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068f6:	3320      	adds	r3, #32
 80068f8:	68fa      	ldr	r2, [r7, #12]
 80068fa:	4413      	add	r3, r2
 80068fc:	3304      	adds	r3, #4
 80068fe:	6a3a      	ldr	r2, [r7, #32]
 8006900:	69b9      	ldr	r1, [r7, #24]
 8006902:	4618      	mov	r0, r3
 8006904:	f7fd feae 	bl	8004664 <mem_cpy>
		fp->flag |= FA__DIRTY;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	799b      	ldrb	r3, [r3, #6]
 800690c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006910:	b2da      	uxtb	r2, r3
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	719a      	strb	r2, [r3, #6]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 8006916:	69ba      	ldr	r2, [r7, #24]
 8006918:	6a3b      	ldr	r3, [r7, #32]
 800691a:	4413      	add	r3, r2
 800691c:	61bb      	str	r3, [r7, #24]
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	689a      	ldr	r2, [r3, #8]
 8006922:	6a3b      	ldr	r3, [r7, #32]
 8006924:	441a      	add	r2, r3
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	609a      	str	r2, [r3, #8]
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	681a      	ldr	r2, [r3, #0]
 800692e:	6a3b      	ldr	r3, [r7, #32]
 8006930:	441a      	add	r2, r3
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	601a      	str	r2, [r3, #0]
 8006936:	687a      	ldr	r2, [r7, #4]
 8006938:	6a3b      	ldr	r3, [r7, #32]
 800693a:	1ad3      	subs	r3, r2, r3
 800693c:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	2b00      	cmp	r3, #0
 8006942:	f47f aec8 	bne.w	80066d6 <f_write+0x62>
 8006946:	e000      	b.n	800694a <f_write+0x2d6>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8006948:	bf00      	nop
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	689a      	ldr	r2, [r3, #8]
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	68db      	ldr	r3, [r3, #12]
 8006952:	429a      	cmp	r2, r3
 8006954:	d903      	bls.n	800695e <f_write+0x2ea>
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	689a      	ldr	r2, [r3, #8]
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	60da      	str	r2, [r3, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	799b      	ldrb	r3, [r3, #6]
 8006962:	f043 0320 	orr.w	r3, r3, #32
 8006966:	b2da      	uxtb	r2, r3
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	719a      	strb	r2, [r3, #6]

	LEAVE_FF(fp->fs, FR_OK);
 800696c:	2300      	movs	r3, #0
}
 800696e:	4618      	mov	r0, r3
 8006970:	3728      	adds	r7, #40	; 0x28
 8006972:	46bd      	mov	sp, r7
 8006974:	bd80      	pop	{r7, pc}

08006976 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL *fp		/* Pointer to the file object */
)
{
 8006976:	b580      	push	{r7, lr}
 8006978:	b086      	sub	sp, #24
 800697a:	af00      	add	r7, sp, #0
 800697c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 800697e:	6878      	ldr	r0, [r7, #4]
 8006980:	f7ff fbc0 	bl	8006104 <validate>
 8006984:	4603      	mov	r3, r0
 8006986:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8006988:	7dfb      	ldrb	r3, [r7, #23]
 800698a:	2b00      	cmp	r3, #0
 800698c:	d163      	bne.n	8006a56 <f_sync+0xe0>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	799b      	ldrb	r3, [r3, #6]
 8006992:	f003 0320 	and.w	r3, r3, #32
 8006996:	2b00      	cmp	r3, #0
 8006998:	d05d      	beq.n	8006a56 <f_sync+0xe0>
#if !_FS_TINY	/* Write-back dirty buffer */
			if (fp->flag & FA__DIRTY) {
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	799b      	ldrb	r3, [r3, #6]
 800699e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d016      	beq.n	80069d4 <f_sync+0x5e>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	7858      	ldrb	r0, [r3, #1]
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	f103 0124 	add.w	r1, r3, #36	; 0x24
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	699a      	ldr	r2, [r3, #24]
 80069b6:	2301      	movs	r3, #1
 80069b8:	f000 fed6 	bl	8007768 <disk_write>
 80069bc:	4603      	mov	r3, r0
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d001      	beq.n	80069c6 <f_sync+0x50>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 80069c2:	2301      	movs	r3, #1
 80069c4:	e048      	b.n	8006a58 <f_sync+0xe2>
				fp->flag &= ~FA__DIRTY;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	799b      	ldrb	r3, [r3, #6]
 80069ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80069ce:	b2da      	uxtb	r2, r3
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	719a      	strb	r2, [r3, #6]
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681a      	ldr	r2, [r3, #0]
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	69db      	ldr	r3, [r3, #28]
 80069dc:	4619      	mov	r1, r3
 80069de:	4610      	mov	r0, r2
 80069e0:	f7fd ff13 	bl	800480a <move_window>
 80069e4:	4603      	mov	r3, r0
 80069e6:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 80069e8:	7dfb      	ldrb	r3, [r7, #23]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d133      	bne.n	8006a56 <f_sync+0xe0>
				dir = fp->dir_ptr;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	6a1b      	ldr	r3, [r3, #32]
 80069f2:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 80069f4:	693b      	ldr	r3, [r7, #16]
 80069f6:	330b      	adds	r3, #11
 80069f8:	781a      	ldrb	r2, [r3, #0]
 80069fa:	693b      	ldr	r3, [r7, #16]
 80069fc:	330b      	adds	r3, #11
 80069fe:	f042 0220 	orr.w	r2, r2, #32
 8006a02:	b2d2      	uxtb	r2, r2
 8006a04:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
 8006a06:	693b      	ldr	r3, [r7, #16]
 8006a08:	331c      	adds	r3, #28
 8006a0a:	687a      	ldr	r2, [r7, #4]
 8006a0c:	68d2      	ldr	r2, [r2, #12]
 8006a0e:	601a      	str	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	691b      	ldr	r3, [r3, #16]
 8006a14:	4619      	mov	r1, r3
 8006a16:	6938      	ldr	r0, [r7, #16]
 8006a18:	f7fe fb96 	bl	8005148 <st_clust>
				tm = get_fattime();							/* Update updated time */
 8006a1c:	f001 f932 	bl	8007c84 <get_fattime>
 8006a20:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir+DIR_WrtTime, tm);
 8006a22:	693b      	ldr	r3, [r7, #16]
 8006a24:	3316      	adds	r3, #22
 8006a26:	68fa      	ldr	r2, [r7, #12]
 8006a28:	601a      	str	r2, [r3, #0]
				ST_WORD(dir+DIR_LstAccDate, 0);
 8006a2a:	693b      	ldr	r3, [r7, #16]
 8006a2c:	3312      	adds	r3, #18
 8006a2e:	2200      	movs	r2, #0
 8006a30:	801a      	strh	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	799b      	ldrb	r3, [r3, #6]
 8006a36:	f023 0320 	bic.w	r3, r3, #32
 8006a3a:	b2da      	uxtb	r2, r3
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	719a      	strb	r2, [r3, #6]
				fp->fs->wflag = 1;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	2201      	movs	r2, #1
 8006a46:	711a      	strb	r2, [r3, #4]
				res = sync_fs(fp->fs);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	f7fd ff05 	bl	800485c <sync_fs>
 8006a52:	4603      	mov	r3, r0
 8006a54:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 8006a56:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a58:	4618      	mov	r0, r3
 8006a5a:	3718      	adds	r7, #24
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	bd80      	pop	{r7, pc}

08006a60 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 8006a60:	b580      	push	{r7, lr}
 8006a62:	b084      	sub	sp, #16
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
#endif
		if (res == FR_OK) fp->fs = 0;	/* Discard file object */
		LEAVE_FF(fs, res);
	}
#else
	res = f_sync(fp);		/* Flush cached data */
 8006a68:	6878      	ldr	r0, [r7, #4]
 8006a6a:	f7ff ff84 	bl	8006976 <f_sync>
 8006a6e:	4603      	mov	r3, r0
 8006a70:	73fb      	strb	r3, [r7, #15]
#else
		res = dec_lock(fp->lockid);
#endif
	}
#endif
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
 8006a72:	7bfb      	ldrb	r3, [r7, #15]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d102      	bne.n	8006a7e <f_close+0x1e>
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	601a      	str	r2, [r3, #0]
	return res;
 8006a7e:	7bfb      	ldrb	r3, [r7, #15]
#endif
}
 8006a80:	4618      	mov	r0, r3
 8006a82:	3710      	adds	r7, #16
 8006a84:	46bd      	mov	sp, r7
 8006a86:	bd80      	pop	{r7, pc}

08006a88 <my_init_card>:
UINT readBytes = 0;			//Счетчик кол-ва прочитанных данных
UINT WriteBytes = 0;		//Счетчик кол-ва записанных данных

//Функция инициализации карты памяти
void my_init_card(void)
{
 8006a88:	b580      	push	{r7, lr}
 8006a8a:	af00      	add	r7, sp, #0
//	SD_PowerOn();
	sd_ini();
 8006a8c:	f000 fa32 	bl	8006ef4 <sd_ini>
}
 8006a90:	bf00      	nop
 8006a92:	bd80      	pop	{r7, pc}

08006a94 <my_read_file>:
//Функция чтения файла с карты памяти
void my_read_file(void)
{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	b092      	sub	sp, #72	; 0x48
 8006a98:	af00      	add	r7, sp, #0
	if (f_mount(0, &FATFS_Obj) == FR_OK)	//Монтируем модуль FatFs
 8006a9a:	4940      	ldr	r1, [pc, #256]	; (8006b9c <my_read_file+0x108>)
 8006a9c:	2000      	movs	r0, #0
 8006a9e:	f7ff fb5f 	bl	8006160 <f_mount>
 8006aa2:	4603      	mov	r3, r0
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d175      	bne.n	8006b94 <my_read_file+0x100>
	{
		SEND_str("f_mount -> success\n");
 8006aa8:	483d      	ldr	r0, [pc, #244]	; (8006ba0 <my_read_file+0x10c>)
 8006aaa:	f7fc f8af 	bl	8002c0c <SEND_str>

		uint8_t path[10]="test.json";
 8006aae:	4a3d      	ldr	r2, [pc, #244]	; (8006ba4 <my_read_file+0x110>)
 8006ab0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006ab4:	ca07      	ldmia	r2, {r0, r1, r2}
 8006ab6:	c303      	stmia	r3!, {r0, r1}
 8006ab8:	801a      	strh	r2, [r3, #0]
		path[9] = '\0';
 8006aba:	2300      	movs	r3, #0
 8006abc:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45

		result = f_open(&test, (char*)path, FA_READ);
 8006ac0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006ac4:	2201      	movs	r2, #1
 8006ac6:	4619      	mov	r1, r3
 8006ac8:	4837      	ldr	r0, [pc, #220]	; (8006ba8 <my_read_file+0x114>)
 8006aca:	f7ff fb73 	bl	80061b4 <f_open>
 8006ace:	4603      	mov	r3, r0
 8006ad0:	461a      	mov	r2, r3
 8006ad2:	4b36      	ldr	r3, [pc, #216]	; (8006bac <my_read_file+0x118>)
 8006ad4:	701a      	strb	r2, [r3, #0]

		if(result == FR_OK)
 8006ad6:	4b35      	ldr	r3, [pc, #212]	; (8006bac <my_read_file+0x118>)
 8006ad8:	781b      	ldrb	r3, [r3, #0]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d15a      	bne.n	8006b94 <my_read_file+0x100>
		{
			SEND_str("f_open -> success\n");
 8006ade:	4834      	ldr	r0, [pc, #208]	; (8006bb0 <my_read_file+0x11c>)
 8006ae0:	f7fc f894 	bl	8002c0c <SEND_str>

			BytesToRead = test.fsize;
 8006ae4:	4b30      	ldr	r3, [pc, #192]	; (8006ba8 <my_read_file+0x114>)
 8006ae6:	68db      	ldr	r3, [r3, #12]
 8006ae8:	4a32      	ldr	r2, [pc, #200]	; (8006bb4 <my_read_file+0x120>)
 8006aea:	6013      	str	r3, [r2, #0]

			char str1[60];
			sprintf(str1, "file_Size: %d Byte\n", BytesToRead);
 8006aec:	4b31      	ldr	r3, [pc, #196]	; (8006bb4 <my_read_file+0x120>)
 8006aee:	681a      	ldr	r2, [r3, #0]
 8006af0:	463b      	mov	r3, r7
 8006af2:	4931      	ldr	r1, [pc, #196]	; (8006bb8 <my_read_file+0x124>)
 8006af4:	4618      	mov	r0, r3
 8006af6:	f014 fccf 	bl	801b498 <siprintf>
			SEND_str(str1);
 8006afa:	463b      	mov	r3, r7
 8006afc:	4618      	mov	r0, r3
 8006afe:	f7fc f885 	bl	8002c0c <SEND_str>

			BytesCounter = 0;
 8006b02:	4b2e      	ldr	r3, [pc, #184]	; (8006bbc <my_read_file+0x128>)
 8006b04:	2200      	movs	r2, #0
 8006b06:	601a      	str	r2, [r3, #0]
			while ((BytesToRead - BytesCounter) >= 512)
 8006b08:	e017      	b.n	8006b3a <my_read_file+0xa6>
		    {
		       	f_read(&test, readBuffer, 512, &readBytes);
 8006b0a:	4b2d      	ldr	r3, [pc, #180]	; (8006bc0 <my_read_file+0x12c>)
 8006b0c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006b10:	492c      	ldr	r1, [pc, #176]	; (8006bc4 <my_read_file+0x130>)
 8006b12:	4825      	ldr	r0, [pc, #148]	; (8006ba8 <my_read_file+0x114>)
 8006b14:	f7ff fc5e 	bl	80063d4 <f_read>
		       	BytesCounter += 512;
 8006b18:	4b28      	ldr	r3, [pc, #160]	; (8006bbc <my_read_file+0x128>)
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8006b20:	4a26      	ldr	r2, [pc, #152]	; (8006bbc <my_read_file+0x128>)
 8006b22:	6013      	str	r3, [r2, #0]

		       	HAL_UART_Transmit(&huart3, (uint8_t*)readBuffer, strlen(readBuffer), 0x1000);
 8006b24:	4827      	ldr	r0, [pc, #156]	; (8006bc4 <my_read_file+0x130>)
 8006b26:	f7f9 fb5d 	bl	80001e4 <strlen>
 8006b2a:	4603      	mov	r3, r0
 8006b2c:	b29a      	uxth	r2, r3
 8006b2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006b32:	4924      	ldr	r1, [pc, #144]	; (8006bc4 <my_read_file+0x130>)
 8006b34:	4824      	ldr	r0, [pc, #144]	; (8006bc8 <my_read_file+0x134>)
 8006b36:	f007 f984 	bl	800de42 <HAL_UART_Transmit>
			while ((BytesToRead - BytesCounter) >= 512)
 8006b3a:	4b1e      	ldr	r3, [pc, #120]	; (8006bb4 <my_read_file+0x120>)
 8006b3c:	681a      	ldr	r2, [r3, #0]
 8006b3e:	4b1f      	ldr	r3, [pc, #124]	; (8006bbc <my_read_file+0x128>)
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	1ad3      	subs	r3, r2, r3
 8006b44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b48:	d2df      	bcs.n	8006b0a <my_read_file+0x76>
		    }
		    if (BytesToRead != BytesCounter)
 8006b4a:	4b1a      	ldr	r3, [pc, #104]	; (8006bb4 <my_read_file+0x120>)
 8006b4c:	681a      	ldr	r2, [r3, #0]
 8006b4e:	4b1b      	ldr	r3, [pc, #108]	; (8006bbc <my_read_file+0x128>)
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	429a      	cmp	r2, r3
 8006b54:	d01b      	beq.n	8006b8e <my_read_file+0xfa>
		    {
	        	f_read(&test, readBuffer, (BytesToRead - BytesCounter), &readBytes);
 8006b56:	4b17      	ldr	r3, [pc, #92]	; (8006bb4 <my_read_file+0x120>)
 8006b58:	681a      	ldr	r2, [r3, #0]
 8006b5a:	4b18      	ldr	r3, [pc, #96]	; (8006bbc <my_read_file+0x128>)
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	1ad2      	subs	r2, r2, r3
 8006b60:	4b17      	ldr	r3, [pc, #92]	; (8006bc0 <my_read_file+0x12c>)
 8006b62:	4918      	ldr	r1, [pc, #96]	; (8006bc4 <my_read_file+0x130>)
 8006b64:	4810      	ldr	r0, [pc, #64]	; (8006ba8 <my_read_file+0x114>)
 8006b66:	f7ff fc35 	bl	80063d4 <f_read>

	        	HAL_UART_Transmit(&huart3, (uint8_t*)readBuffer, BytesToRead - BytesCounter, 0x1000);
 8006b6a:	4b12      	ldr	r3, [pc, #72]	; (8006bb4 <my_read_file+0x120>)
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	b29a      	uxth	r2, r3
 8006b70:	4b12      	ldr	r3, [pc, #72]	; (8006bbc <my_read_file+0x128>)
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	b29b      	uxth	r3, r3
 8006b76:	1ad3      	subs	r3, r2, r3
 8006b78:	b29a      	uxth	r2, r3
 8006b7a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006b7e:	4911      	ldr	r1, [pc, #68]	; (8006bc4 <my_read_file+0x130>)
 8006b80:	4811      	ldr	r0, [pc, #68]	; (8006bc8 <my_read_file+0x134>)
 8006b82:	f007 f95e 	bl	800de42 <HAL_UART_Transmit>

	        	BytesCounter = BytesToRead;
 8006b86:	4b0b      	ldr	r3, [pc, #44]	; (8006bb4 <my_read_file+0x120>)
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	4a0c      	ldr	r2, [pc, #48]	; (8006bbc <my_read_file+0x128>)
 8006b8c:	6013      	str	r3, [r2, #0]
//				SEND_str(readBuffer);
//				SEND_str("\n");
//				sprintf(str1,"BytesToRead: %d\n",readBytes);
//				SEND_str(str1);
//			}
		    f_close(&test);
 8006b8e:	4806      	ldr	r0, [pc, #24]	; (8006ba8 <my_read_file+0x114>)
 8006b90:	f7ff ff66 	bl	8006a60 <f_close>
//		    f_unlink((char*)path);
		}
	}
}
 8006b94:	bf00      	nop
 8006b96:	3748      	adds	r7, #72	; 0x48
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	bd80      	pop	{r7, pc}
 8006b9c:	20000f00 	.word	0x20000f00
 8006ba0:	08020858 	.word	0x08020858
 8006ba4:	08020894 	.word	0x08020894
 8006ba8:	20001138 	.word	0x20001138
 8006bac:	2000135c 	.word	0x2000135c
 8006bb0:	0802086c 	.word	0x0802086c
 8006bb4:	20000438 	.word	0x20000438
 8006bb8:	08020880 	.word	0x08020880
 8006bbc:	2000043c 	.word	0x2000043c
 8006bc0:	20000440 	.word	0x20000440
 8006bc4:	20000d00 	.word	0x20000d00
 8006bc8:	20000c40 	.word	0x20000c40

08006bcc <my_write_file_json>:
//Функция записи файла на карту памяти
//Принимает "path" - указатель на имя файла
//Принимает "text" - указатель на строку JSON, которую нужно сохранить
void my_write_file_json(char *path, char *text)
{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b092      	sub	sp, #72	; 0x48
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
 8006bd4:	6039      	str	r1, [r7, #0]
	if (f_mount(0, &FATFS_Obj) == FR_OK)
 8006bd6:	4921      	ldr	r1, [pc, #132]	; (8006c5c <my_write_file_json+0x90>)
 8006bd8:	2000      	movs	r0, #0
 8006bda:	f7ff fac1 	bl	8006160 <f_mount>
 8006bde:	4603      	mov	r3, r0
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d136      	bne.n	8006c52 <my_write_file_json+0x86>
	{
		SEND_str("f_mount -> success\n");
 8006be4:	481e      	ldr	r0, [pc, #120]	; (8006c60 <my_write_file_json+0x94>)
 8006be6:	f7fc f811 	bl	8002c0c <SEND_str>

		result = f_open(&test, path + '\0', FA_CREATE_ALWAYS|FA_WRITE);
 8006bea:	220a      	movs	r2, #10
 8006bec:	6879      	ldr	r1, [r7, #4]
 8006bee:	481d      	ldr	r0, [pc, #116]	; (8006c64 <my_write_file_json+0x98>)
 8006bf0:	f7ff fae0 	bl	80061b4 <f_open>
 8006bf4:	4603      	mov	r3, r0
 8006bf6:	461a      	mov	r2, r3
 8006bf8:	4b1b      	ldr	r3, [pc, #108]	; (8006c68 <my_write_file_json+0x9c>)
 8006bfa:	701a      	strb	r2, [r3, #0]

		if(result == FR_OK)
 8006bfc:	4b1a      	ldr	r3, [pc, #104]	; (8006c68 <my_write_file_json+0x9c>)
 8006bfe:	781b      	ldrb	r3, [r3, #0]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d126      	bne.n	8006c52 <my_write_file_json+0x86>
		{
			SEND_str("f_open -> success\n");
 8006c04:	4819      	ldr	r0, [pc, #100]	; (8006c6c <my_write_file_json+0xa0>)
 8006c06:	f7fc f801 	bl	8002c0c <SEND_str>

			result = f_write(&test, text, strlen(text), &WriteBytes);
 8006c0a:	6838      	ldr	r0, [r7, #0]
 8006c0c:	f7f9 faea 	bl	80001e4 <strlen>
 8006c10:	4602      	mov	r2, r0
 8006c12:	4b17      	ldr	r3, [pc, #92]	; (8006c70 <my_write_file_json+0xa4>)
 8006c14:	6839      	ldr	r1, [r7, #0]
 8006c16:	4813      	ldr	r0, [pc, #76]	; (8006c64 <my_write_file_json+0x98>)
 8006c18:	f7ff fd2c 	bl	8006674 <f_write>
 8006c1c:	4603      	mov	r3, r0
 8006c1e:	461a      	mov	r2, r3
 8006c20:	4b11      	ldr	r3, [pc, #68]	; (8006c68 <my_write_file_json+0x9c>)
 8006c22:	701a      	strb	r2, [r3, #0]
			if(result == FR_OK)
 8006c24:	4b10      	ldr	r3, [pc, #64]	; (8006c68 <my_write_file_json+0x9c>)
 8006c26:	781b      	ldrb	r3, [r3, #0]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d10f      	bne.n	8006c4c <my_write_file_json+0x80>
			{
				SEND_str("f_write -> success\n");
 8006c2c:	4811      	ldr	r0, [pc, #68]	; (8006c74 <my_write_file_json+0xa8>)
 8006c2e:	f7fb ffed 	bl	8002c0c <SEND_str>

				char str1[60];
				sprintf(str1, "write_bytes: %d Byte\n", WriteBytes);
 8006c32:	4b0f      	ldr	r3, [pc, #60]	; (8006c70 <my_write_file_json+0xa4>)
 8006c34:	681a      	ldr	r2, [r3, #0]
 8006c36:	f107 030c 	add.w	r3, r7, #12
 8006c3a:	490f      	ldr	r1, [pc, #60]	; (8006c78 <my_write_file_json+0xac>)
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	f014 fc2b 	bl	801b498 <siprintf>
				SEND_str(str1);
 8006c42:	f107 030c 	add.w	r3, r7, #12
 8006c46:	4618      	mov	r0, r3
 8006c48:	f7fb ffe0 	bl	8002c0c <SEND_str>
			}
		    f_close(&test);
 8006c4c:	4805      	ldr	r0, [pc, #20]	; (8006c64 <my_write_file_json+0x98>)
 8006c4e:	f7ff ff07 	bl	8006a60 <f_close>
		}
	}
}
 8006c52:	bf00      	nop
 8006c54:	3748      	adds	r7, #72	; 0x48
 8006c56:	46bd      	mov	sp, r7
 8006c58:	bd80      	pop	{r7, pc}
 8006c5a:	bf00      	nop
 8006c5c:	20000f00 	.word	0x20000f00
 8006c60:	08020858 	.word	0x08020858
 8006c64:	20001138 	.word	0x20001138
 8006c68:	2000135c 	.word	0x2000135c
 8006c6c:	0802086c 	.word	0x0802086c
 8006c70:	20000444 	.word	0x20000444
 8006c74:	080208a0 	.word	0x080208a0
 8006c78:	080208b4 	.word	0x080208b4

08006c7c <save_dido>:
//Функция сохраниения конфигурационных данных (Включить/выключить цифровой выход(Открытый коллектор) если цифровой вход = значение(уровень))
//Принимает "D_IN" - строку с номером цифрового входа
//Принимает "text" - указатель на строку JSON
void save_dido(char *D_IN, char *text)
{
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	b08a      	sub	sp, #40	; 0x28
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
 8006c84:	6039      	str	r1, [r7, #0]
	char name_FIL[32];

	SEND_str(text);
 8006c86:	6838      	ldr	r0, [r7, #0]
 8006c88:	f7fb ffc0 	bl	8002c0c <SEND_str>
	sprintf(name_FIL,"%s%s.json", D_IN, "(DiDo)");
 8006c8c:	f107 0008 	add.w	r0, r7, #8
 8006c90:	4b09      	ldr	r3, [pc, #36]	; (8006cb8 <save_dido+0x3c>)
 8006c92:	687a      	ldr	r2, [r7, #4]
 8006c94:	4909      	ldr	r1, [pc, #36]	; (8006cbc <save_dido+0x40>)
 8006c96:	f014 fbff 	bl	801b498 <siprintf>
	SEND_str(name_FIL);
 8006c9a:	f107 0308 	add.w	r3, r7, #8
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	f7fb ffb4 	bl	8002c0c <SEND_str>
	my_write_file_json(name_FIL, text);
 8006ca4:	f107 0308 	add.w	r3, r7, #8
 8006ca8:	6839      	ldr	r1, [r7, #0]
 8006caa:	4618      	mov	r0, r3
 8006cac:	f7ff ff8e 	bl	8006bcc <my_write_file_json>
}
 8006cb0:	bf00      	nop
 8006cb2:	3728      	adds	r7, #40	; 0x28
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	bd80      	pop	{r7, pc}
 8006cb8:	080208cc 	.word	0x080208cc
 8006cbc:	080208d4 	.word	0x080208d4

08006cc0 <save_aido>:
//Функция сохраниения конфигурационных данных (Включить/выключить один цифровой выход(открытый коллектор) если аналоговый вход в интервале значений)
//Принимает "A_IN" - строку с номером аналогового входа
//Принимает "text" - указатель на строку JSON
void save_aido(char *A_IN, char *text)
{
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	b08a      	sub	sp, #40	; 0x28
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
 8006cc8:	6039      	str	r1, [r7, #0]
	char name_FIL[32];

	SEND_str(text);
 8006cca:	6838      	ldr	r0, [r7, #0]
 8006ccc:	f7fb ff9e 	bl	8002c0c <SEND_str>
	sprintf(name_FIL,"%s%s.json", A_IN, "(AiDo)");
 8006cd0:	f107 0008 	add.w	r0, r7, #8
 8006cd4:	4b09      	ldr	r3, [pc, #36]	; (8006cfc <save_aido+0x3c>)
 8006cd6:	687a      	ldr	r2, [r7, #4]
 8006cd8:	4909      	ldr	r1, [pc, #36]	; (8006d00 <save_aido+0x40>)
 8006cda:	f014 fbdd 	bl	801b498 <siprintf>
	SEND_str(name_FIL);
 8006cde:	f107 0308 	add.w	r3, r7, #8
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	f7fb ff92 	bl	8002c0c <SEND_str>
	my_write_file_json(name_FIL, text);
 8006ce8:	f107 0308 	add.w	r3, r7, #8
 8006cec:	6839      	ldr	r1, [r7, #0]
 8006cee:	4618      	mov	r0, r3
 8006cf0:	f7ff ff6c 	bl	8006bcc <my_write_file_json>
}
 8006cf4:	bf00      	nop
 8006cf6:	3728      	adds	r7, #40	; 0x28
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	bd80      	pop	{r7, pc}
 8006cfc:	080208e0 	.word	0x080208e0
 8006d00:	080208d4 	.word	0x080208d4

08006d04 <save_pwm>:
//Функция сохраниения конфигурационных данных (Задать сигнал ШИМ на одном выходе)
//Принимает "PWM_OUT" - строку с номером ШИМ выхода
//Принимает "text" - указатель на строку JSON
void save_pwm(char *PWM_OUT, char *text)
{
 8006d04:	b580      	push	{r7, lr}
 8006d06:	b08a      	sub	sp, #40	; 0x28
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
 8006d0c:	6039      	str	r1, [r7, #0]
	char name_FIL[32];

	SEND_str(text);
 8006d0e:	6838      	ldr	r0, [r7, #0]
 8006d10:	f7fb ff7c 	bl	8002c0c <SEND_str>
	sprintf(name_FIL,"%s.json", PWM_OUT);
 8006d14:	f107 0308 	add.w	r3, r7, #8
 8006d18:	687a      	ldr	r2, [r7, #4]
 8006d1a:	4909      	ldr	r1, [pc, #36]	; (8006d40 <save_pwm+0x3c>)
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	f014 fbbb 	bl	801b498 <siprintf>
	SEND_str(name_FIL);
 8006d22:	f107 0308 	add.w	r3, r7, #8
 8006d26:	4618      	mov	r0, r3
 8006d28:	f7fb ff70 	bl	8002c0c <SEND_str>
	my_write_file_json(name_FIL, text);
 8006d2c:	f107 0308 	add.w	r3, r7, #8
 8006d30:	6839      	ldr	r1, [r7, #0]
 8006d32:	4618      	mov	r0, r3
 8006d34:	f7ff ff4a 	bl	8006bcc <my_write_file_json>
}
 8006d38:	bf00      	nop
 8006d3a:	3728      	adds	r7, #40	; 0x28
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	bd80      	pop	{r7, pc}
 8006d40:	080208e8 	.word	0x080208e8

08006d44 <save_tsido>:
//Функция сохраниения конфигурационных данных (Включить/выключить один цифровой выход(открытый коллектор) если температура датчика в интервале значений)
//Принимает "ROM_RAW" - строку с уникальным идентификатором температурного датчика
//Принимает "text" - указатель на строку JSON
void save_tsido(char *ROM_RAW, char *text)
{
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b08a      	sub	sp, #40	; 0x28
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
 8006d4c:	6039      	str	r1, [r7, #0]
	char name_FIL[32];

	SEND_str(text);
 8006d4e:	6838      	ldr	r0, [r7, #0]
 8006d50:	f7fb ff5c 	bl	8002c0c <SEND_str>
	sprintf(name_FIL,"%s%s.json", ROM_RAW, "(TSiDo)");
 8006d54:	f107 0008 	add.w	r0, r7, #8
 8006d58:	4b09      	ldr	r3, [pc, #36]	; (8006d80 <save_tsido+0x3c>)
 8006d5a:	687a      	ldr	r2, [r7, #4]
 8006d5c:	4909      	ldr	r1, [pc, #36]	; (8006d84 <save_tsido+0x40>)
 8006d5e:	f014 fb9b 	bl	801b498 <siprintf>
	SEND_str(name_FIL);
 8006d62:	f107 0308 	add.w	r3, r7, #8
 8006d66:	4618      	mov	r0, r3
 8006d68:	f7fb ff50 	bl	8002c0c <SEND_str>
	my_write_file_json(name_FIL, text);
 8006d6c:	f107 0308 	add.w	r3, r7, #8
 8006d70:	6839      	ldr	r1, [r7, #0]
 8006d72:	4618      	mov	r0, r3
 8006d74:	f7ff ff2a 	bl	8006bcc <my_write_file_json>
}
 8006d78:	bf00      	nop
 8006d7a:	3728      	adds	r7, #40	; 0x28
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	bd80      	pop	{r7, pc}
 8006d80:	080208f0 	.word	0x080208f0
 8006d84:	080208d4 	.word	0x080208d4

08006d88 <Error>:
extern volatile uint16_t Timer1;
sd_info_ptr sdinfo;
char str1[60]={0};
//--------------------------------------------------
static void Error (void)
{
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	af00      	add	r7, sp, #0
	LD_ON;
 8006d8c:	2200      	movs	r2, #0
 8006d8e:	2101      	movs	r1, #1
 8006d90:	4802      	ldr	r0, [pc, #8]	; (8006d9c <Error+0x14>)
 8006d92:	f004 fe9f 	bl	800bad4 <HAL_GPIO_WritePin>
}
 8006d96:	bf00      	nop
 8006d98:	bd80      	pop	{r7, pc}
 8006d9a:	bf00      	nop
 8006d9c:	40020000 	.word	0x40020000

08006da0 <SPIx_WriteRead>:
//-----------------------------------------------
uint8_t SPIx_WriteRead(uint8_t Byte)
{
 8006da0:	b580      	push	{r7, lr}
 8006da2:	b086      	sub	sp, #24
 8006da4:	af02      	add	r7, sp, #8
 8006da6:	4603      	mov	r3, r0
 8006da8:	71fb      	strb	r3, [r7, #7]
	uint8_t receivedbyte = 0;
 8006daa:	2300      	movs	r3, #0
 8006dac:	73fb      	strb	r3, [r7, #15]
	if(HAL_SPI_TransmitReceive(&hspi1,(uint8_t*) &Byte, (uint8_t*) &receivedbyte, 1, 0x1000) != HAL_OK)
 8006dae:	f107 020f 	add.w	r2, r7, #15
 8006db2:	1df9      	adds	r1, r7, #7
 8006db4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006db8:	9300      	str	r3, [sp, #0]
 8006dba:	2301      	movs	r3, #1
 8006dbc:	4806      	ldr	r0, [pc, #24]	; (8006dd8 <SPIx_WriteRead+0x38>)
 8006dbe:	f005 fc9f 	bl	800c700 <HAL_SPI_TransmitReceive>
 8006dc2:	4603      	mov	r3, r0
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d001      	beq.n	8006dcc <SPIx_WriteRead+0x2c>
	{
		Error();
 8006dc8:	f7ff ffde 	bl	8006d88 <Error>
  	}
  	return receivedbyte;
 8006dcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dce:	4618      	mov	r0, r3
 8006dd0:	3710      	adds	r7, #16
 8006dd2:	46bd      	mov	sp, r7
 8006dd4:	bd80      	pop	{r7, pc}
 8006dd6:	bf00      	nop
 8006dd8:	20000968 	.word	0x20000968

08006ddc <SPI_SendByte>:
//-----------------------------------------------
void SPI_SendByte(uint8_t bt)
{
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	b082      	sub	sp, #8
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	4603      	mov	r3, r0
 8006de4:	71fb      	strb	r3, [r7, #7]
	SPIx_WriteRead(bt);
 8006de6:	79fb      	ldrb	r3, [r7, #7]
 8006de8:	4618      	mov	r0, r3
 8006dea:	f7ff ffd9 	bl	8006da0 <SPIx_WriteRead>
}
 8006dee:	bf00      	nop
 8006df0:	3708      	adds	r7, #8
 8006df2:	46bd      	mov	sp, r7
 8006df4:	bd80      	pop	{r7, pc}

08006df6 <SPI_ReceiveByte>:
//-----------------------------------------------
uint8_t SPI_ReceiveByte(void)
{
 8006df6:	b580      	push	{r7, lr}
 8006df8:	b082      	sub	sp, #8
 8006dfa:	af00      	add	r7, sp, #0
	uint8_t bt = SPIx_WriteRead(0xFF);
 8006dfc:	20ff      	movs	r0, #255	; 0xff
 8006dfe:	f7ff ffcf 	bl	8006da0 <SPIx_WriteRead>
 8006e02:	4603      	mov	r3, r0
 8006e04:	71fb      	strb	r3, [r7, #7]
	return bt;
 8006e06:	79fb      	ldrb	r3, [r7, #7]
}
 8006e08:	4618      	mov	r0, r3
 8006e0a:	3708      	adds	r7, #8
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	bd80      	pop	{r7, pc}

08006e10 <SPI_Release>:
//-----------------------------------------------
void SPI_Release(void)
{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	af00      	add	r7, sp, #0
	SPIx_WriteRead(0xFF);
 8006e14:	20ff      	movs	r0, #255	; 0xff
 8006e16:	f7ff ffc3 	bl	8006da0 <SPIx_WriteRead>
}
 8006e1a:	bf00      	nop
 8006e1c:	bd80      	pop	{r7, pc}
	...

08006e20 <SD_cmd>:
//-----------------------------------------------
static uint8_t SD_cmd (uint8_t cmd, uint32_t arg)
{
 8006e20:	b580      	push	{r7, lr}
 8006e22:	b084      	sub	sp, #16
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	4603      	mov	r3, r0
 8006e28:	6039      	str	r1, [r7, #0]
 8006e2a:	71fb      	strb	r3, [r7, #7]
	uint8_t n, res;
	//ACMD<n> is the command sequense of CMD55-CMD<n>
	if (cmd & 0x80)
 8006e2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	da0e      	bge.n	8006e52 <SD_cmd+0x32>
	{
		cmd &= 0x7F;
 8006e34:	79fb      	ldrb	r3, [r7, #7]
 8006e36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e3a:	71fb      	strb	r3, [r7, #7]
		res = SD_cmd(CMD55, 0);
 8006e3c:	2100      	movs	r1, #0
 8006e3e:	2077      	movs	r0, #119	; 0x77
 8006e40:	f7ff ffee 	bl	8006e20 <SD_cmd>
 8006e44:	4603      	mov	r3, r0
 8006e46:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 8006e48:	7bbb      	ldrb	r3, [r7, #14]
 8006e4a:	2b01      	cmp	r3, #1
 8006e4c:	d901      	bls.n	8006e52 <SD_cmd+0x32>
 8006e4e:	7bbb      	ldrb	r3, [r7, #14]
 8006e50:	e049      	b.n	8006ee6 <SD_cmd+0xc6>
	}
	//Select the card
	SS_SD_DESELECT();
 8006e52:	2201      	movs	r2, #1
 8006e54:	2140      	movs	r1, #64	; 0x40
 8006e56:	4826      	ldr	r0, [pc, #152]	; (8006ef0 <SD_cmd+0xd0>)
 8006e58:	f004 fe3c 	bl	800bad4 <HAL_GPIO_WritePin>
	SPI_ReceiveByte();
 8006e5c:	f7ff ffcb 	bl	8006df6 <SPI_ReceiveByte>
	SS_SD_SELECT();
 8006e60:	2200      	movs	r2, #0
 8006e62:	2140      	movs	r1, #64	; 0x40
 8006e64:	4822      	ldr	r0, [pc, #136]	; (8006ef0 <SD_cmd+0xd0>)
 8006e66:	f004 fe35 	bl	800bad4 <HAL_GPIO_WritePin>
	SPI_ReceiveByte();
 8006e6a:	f7ff ffc4 	bl	8006df6 <SPI_ReceiveByte>
	//Send a command packet
	SPI_SendByte(cmd); 						//Start + Command index
 8006e6e:	79fb      	ldrb	r3, [r7, #7]
 8006e70:	4618      	mov	r0, r3
 8006e72:	f7ff ffb3 	bl	8006ddc <SPI_SendByte>
	SPI_SendByte((uint8_t)(arg >> 24)); 	//Argument[31..24]
 8006e76:	683b      	ldr	r3, [r7, #0]
 8006e78:	0e1b      	lsrs	r3, r3, #24
 8006e7a:	b2db      	uxtb	r3, r3
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	f7ff ffad 	bl	8006ddc <SPI_SendByte>
	SPI_SendByte((uint8_t)(arg >> 16)); 	//Argument[23..16]
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	0c1b      	lsrs	r3, r3, #16
 8006e86:	b2db      	uxtb	r3, r3
 8006e88:	4618      	mov	r0, r3
 8006e8a:	f7ff ffa7 	bl	8006ddc <SPI_SendByte>
	SPI_SendByte((uint8_t)(arg >> 8)); 		//Argument[15..8]
 8006e8e:	683b      	ldr	r3, [r7, #0]
 8006e90:	0a1b      	lsrs	r3, r3, #8
 8006e92:	b2db      	uxtb	r3, r3
 8006e94:	4618      	mov	r0, r3
 8006e96:	f7ff ffa1 	bl	8006ddc <SPI_SendByte>
	SPI_SendByte((uint8_t)arg); 			//Argument[7..0]
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	b2db      	uxtb	r3, r3
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	f7ff ff9c 	bl	8006ddc <SPI_SendByte>
	n = 0x01; 								//Dummy CRC + Stop
 8006ea4:	2301      	movs	r3, #1
 8006ea6:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) {n = 0x95;} 			//Valid CRC for CMD0(0)
 8006ea8:	79fb      	ldrb	r3, [r7, #7]
 8006eaa:	2b40      	cmp	r3, #64	; 0x40
 8006eac:	d101      	bne.n	8006eb2 <SD_cmd+0x92>
 8006eae:	2395      	movs	r3, #149	; 0x95
 8006eb0:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) {n = 0x87;} 			//Valid CRC for CMD8(0x1AA)
 8006eb2:	79fb      	ldrb	r3, [r7, #7]
 8006eb4:	2b48      	cmp	r3, #72	; 0x48
 8006eb6:	d101      	bne.n	8006ebc <SD_cmd+0x9c>
 8006eb8:	2387      	movs	r3, #135	; 0x87
 8006eba:	73fb      	strb	r3, [r7, #15]
	SPI_SendByte(n);
 8006ebc:	7bfb      	ldrb	r3, [r7, #15]
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	f7ff ff8c 	bl	8006ddc <SPI_SendByte>
	//Receive a command response
	n = 10; //Wait for a valid response in timeout of 10 attempts
 8006ec4:	230a      	movs	r3, #10
 8006ec6:	73fb      	strb	r3, [r7, #15]
	do
	{
		res = SPI_ReceiveByte();
 8006ec8:	f7ff ff95 	bl	8006df6 <SPI_ReceiveByte>
 8006ecc:	4603      	mov	r3, r0
 8006ece:	73bb      	strb	r3, [r7, #14]
	}
	while ((res & 0x80) && --n);
 8006ed0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	da05      	bge.n	8006ee4 <SD_cmd+0xc4>
 8006ed8:	7bfb      	ldrb	r3, [r7, #15]
 8006eda:	3b01      	subs	r3, #1
 8006edc:	73fb      	strb	r3, [r7, #15]
 8006ede:	7bfb      	ldrb	r3, [r7, #15]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d1f1      	bne.n	8006ec8 <SD_cmd+0xa8>

	return res;
 8006ee4:	7bbb      	ldrb	r3, [r7, #14]
}
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	3710      	adds	r7, #16
 8006eea:	46bd      	mov	sp, r7
 8006eec:	bd80      	pop	{r7, pc}
 8006eee:	bf00      	nop
 8006ef0:	40020400 	.word	0x40020400

08006ef4 <sd_ini>:
	Timer1 = 0;
	while(Timer1 < 2); //ждём 20 милисекунд, для того, чтобы напряжение стабилизировалось
}
//-----------------------------------------------
uint8_t sd_ini(void)
{
 8006ef4:	b590      	push	{r4, r7, lr}
 8006ef6:	b087      	sub	sp, #28
 8006ef8:	af02      	add	r7, sp, #8
	uint8_t i, cmd;
	int16_t tmr;
	uint32_t temp;
	LD_OFF;
 8006efa:	2201      	movs	r2, #1
 8006efc:	2101      	movs	r1, #1
 8006efe:	4881      	ldr	r0, [pc, #516]	; (8007104 <sd_ini+0x210>)
 8006f00:	f004 fde8 	bl	800bad4 <HAL_GPIO_WritePin>
	sdinfo.type = 0;
 8006f04:	4b80      	ldr	r3, [pc, #512]	; (8007108 <sd_ini+0x214>)
 8006f06:	2200      	movs	r2, #0
 8006f08:	701a      	strb	r2, [r3, #0]
	uint8_t ocr[4];
	temp = hspi1.Init.BaudRatePrescaler;
 8006f0a:	4b80      	ldr	r3, [pc, #512]	; (800710c <sd_ini+0x218>)
 8006f0c:	69db      	ldr	r3, [r3, #28]
 8006f0e:	60bb      	str	r3, [r7, #8]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256; //156.25 kbbs
 8006f10:	4b7e      	ldr	r3, [pc, #504]	; (800710c <sd_ini+0x218>)
 8006f12:	2238      	movs	r2, #56	; 0x38
 8006f14:	61da      	str	r2, [r3, #28]
	HAL_SPI_Init(&hspi1);
 8006f16:	487d      	ldr	r0, [pc, #500]	; (800710c <sd_ini+0x218>)
 8006f18:	f005 fb8e 	bl	800c638 <HAL_SPI_Init>
	SS_SD_DESELECT();
 8006f1c:	2201      	movs	r2, #1
 8006f1e:	2140      	movs	r1, #64	; 0x40
 8006f20:	487b      	ldr	r0, [pc, #492]	; (8007110 <sd_ini+0x21c>)
 8006f22:	f004 fdd7 	bl	800bad4 <HAL_GPIO_WritePin>
	for(i = 0; i < 10; i++) //80 импульсов (не менее 74) Даташит стр 91
 8006f26:	2300      	movs	r3, #0
 8006f28:	73fb      	strb	r3, [r7, #15]
 8006f2a:	e004      	b.n	8006f36 <sd_ini+0x42>
		SPI_Release();
 8006f2c:	f7ff ff70 	bl	8006e10 <SPI_Release>
	for(i = 0; i < 10; i++) //80 импульсов (не менее 74) Даташит стр 91
 8006f30:	7bfb      	ldrb	r3, [r7, #15]
 8006f32:	3301      	adds	r3, #1
 8006f34:	73fb      	strb	r3, [r7, #15]
 8006f36:	7bfb      	ldrb	r3, [r7, #15]
 8006f38:	2b09      	cmp	r3, #9
 8006f3a:	d9f7      	bls.n	8006f2c <sd_ini+0x38>
	hspi1.Init.BaudRatePrescaler = temp;
 8006f3c:	4a73      	ldr	r2, [pc, #460]	; (800710c <sd_ini+0x218>)
 8006f3e:	68bb      	ldr	r3, [r7, #8]
 8006f40:	61d3      	str	r3, [r2, #28]
	HAL_SPI_Init(&hspi1);
 8006f42:	4872      	ldr	r0, [pc, #456]	; (800710c <sd_ini+0x218>)
 8006f44:	f005 fb78 	bl	800c638 <HAL_SPI_Init>
	SS_SD_SELECT();
 8006f48:	2200      	movs	r2, #0
 8006f4a:	2140      	movs	r1, #64	; 0x40
 8006f4c:	4870      	ldr	r0, [pc, #448]	; (8007110 <sd_ini+0x21c>)
 8006f4e:	f004 fdc1 	bl	800bad4 <HAL_GPIO_WritePin>
	if(SD_cmd(CMD0, 0) == 1) // Enter Idle state
 8006f52:	2100      	movs	r1, #0
 8006f54:	2040      	movs	r0, #64	; 0x40
 8006f56:	f7ff ff63 	bl	8006e20 <SD_cmd>
 8006f5a:	4603      	mov	r3, r0
 8006f5c:	2b01      	cmp	r3, #1
 8006f5e:	f040 80be 	bne.w	80070de <sd_ini+0x1ea>
	{
		SPI_Release();
 8006f62:	f7ff ff55 	bl	8006e10 <SPI_Release>
		if(SD_cmd(CMD8, 0x1AA) == 1) // SDv2
 8006f66:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006f6a:	2048      	movs	r0, #72	; 0x48
 8006f6c:	f7ff ff58 	bl	8006e20 <SD_cmd>
 8006f70:	4603      	mov	r3, r0
 8006f72:	2b01      	cmp	r3, #1
 8006f74:	d17b      	bne.n	800706e <sd_ini+0x17a>
		{
			for(i = 0; i < 4; i++) ocr[i] = SPI_ReceiveByte();
 8006f76:	2300      	movs	r3, #0
 8006f78:	73fb      	strb	r3, [r7, #15]
 8006f7a:	e00c      	b.n	8006f96 <sd_ini+0xa2>
 8006f7c:	7bfc      	ldrb	r4, [r7, #15]
 8006f7e:	f7ff ff3a 	bl	8006df6 <SPI_ReceiveByte>
 8006f82:	4603      	mov	r3, r0
 8006f84:	461a      	mov	r2, r3
 8006f86:	f107 0310 	add.w	r3, r7, #16
 8006f8a:	4423      	add	r3, r4
 8006f8c:	f803 2c0c 	strb.w	r2, [r3, #-12]
 8006f90:	7bfb      	ldrb	r3, [r7, #15]
 8006f92:	3301      	adds	r3, #1
 8006f94:	73fb      	strb	r3, [r7, #15]
 8006f96:	7bfb      	ldrb	r3, [r7, #15]
 8006f98:	2b03      	cmp	r3, #3
 8006f9a:	d9ef      	bls.n	8006f7c <sd_ini+0x88>
			sprintf(str1,"OCR: 0x%02X 0x%02X 0x%02X 0x%02X\r\n",ocr[0],ocr[1],ocr[2],ocr[3]);
 8006f9c:	793b      	ldrb	r3, [r7, #4]
 8006f9e:	4619      	mov	r1, r3
 8006fa0:	797b      	ldrb	r3, [r7, #5]
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	79bb      	ldrb	r3, [r7, #6]
 8006fa6:	79fa      	ldrb	r2, [r7, #7]
 8006fa8:	9201      	str	r2, [sp, #4]
 8006faa:	9300      	str	r3, [sp, #0]
 8006fac:	4603      	mov	r3, r0
 8006fae:	460a      	mov	r2, r1
 8006fb0:	4958      	ldr	r1, [pc, #352]	; (8007114 <sd_ini+0x220>)
 8006fb2:	4859      	ldr	r0, [pc, #356]	; (8007118 <sd_ini+0x224>)
 8006fb4:	f014 fa70 	bl	801b498 <siprintf>
			SEND_str(str1);
 8006fb8:	4857      	ldr	r0, [pc, #348]	; (8007118 <sd_ini+0x224>)
 8006fba:	f7fb fe27 	bl	8002c0c <SEND_str>
			// Get trailing return value of R7 resp
			if(ocr[2] == 0x01 && ocr[3] == 0xAA) // The card can work at vdd range of 2.7-3.6V
 8006fbe:	79bb      	ldrb	r3, [r7, #6]
 8006fc0:	2b01      	cmp	r3, #1
 8006fc2:	f040 808e 	bne.w	80070e2 <sd_ini+0x1ee>
 8006fc6:	79fb      	ldrb	r3, [r7, #7]
 8006fc8:	2baa      	cmp	r3, #170	; 0xaa
 8006fca:	f040 808a 	bne.w	80070e2 <sd_ini+0x1ee>
			{
				for (tmr = 12000; tmr && SD_cmd(ACMD41, 1UL << 30); tmr--); // Wait for leaving idle state (ACMD41 with HCS bit)
 8006fce:	f642 63e0 	movw	r3, #12000	; 0x2ee0
 8006fd2:	81bb      	strh	r3, [r7, #12]
 8006fd4:	e005      	b.n	8006fe2 <sd_ini+0xee>
 8006fd6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006fda:	b29b      	uxth	r3, r3
 8006fdc:	3b01      	subs	r3, #1
 8006fde:	b29b      	uxth	r3, r3
 8006fe0:	81bb      	strh	r3, [r7, #12]
 8006fe2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d007      	beq.n	8006ffa <sd_ini+0x106>
 8006fea:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8006fee:	20e9      	movs	r0, #233	; 0xe9
 8006ff0:	f7ff ff16 	bl	8006e20 <SD_cmd>
 8006ff4:	4603      	mov	r3, r0
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d1ed      	bne.n	8006fd6 <sd_ini+0xe2>
				if (tmr && SD_cmd(CMD58, 0) == 0) { // Check CCS bit in the OCR
 8006ffa:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d06f      	beq.n	80070e2 <sd_ini+0x1ee>
 8007002:	2100      	movs	r1, #0
 8007004:	207a      	movs	r0, #122	; 0x7a
 8007006:	f7ff ff0b 	bl	8006e20 <SD_cmd>
 800700a:	4603      	mov	r3, r0
 800700c:	2b00      	cmp	r3, #0
 800700e:	d168      	bne.n	80070e2 <sd_ini+0x1ee>
				for (i = 0; i < 4; i++) ocr[i] = SPI_ReceiveByte();
 8007010:	2300      	movs	r3, #0
 8007012:	73fb      	strb	r3, [r7, #15]
 8007014:	e00c      	b.n	8007030 <sd_ini+0x13c>
 8007016:	7bfc      	ldrb	r4, [r7, #15]
 8007018:	f7ff feed 	bl	8006df6 <SPI_ReceiveByte>
 800701c:	4603      	mov	r3, r0
 800701e:	461a      	mov	r2, r3
 8007020:	f107 0310 	add.w	r3, r7, #16
 8007024:	4423      	add	r3, r4
 8007026:	f803 2c0c 	strb.w	r2, [r3, #-12]
 800702a:	7bfb      	ldrb	r3, [r7, #15]
 800702c:	3301      	adds	r3, #1
 800702e:	73fb      	strb	r3, [r7, #15]
 8007030:	7bfb      	ldrb	r3, [r7, #15]
 8007032:	2b03      	cmp	r3, #3
 8007034:	d9ef      	bls.n	8007016 <sd_ini+0x122>
				sprintf(str1,"OCR: 0x%02X 0x%02X 0x%02X 0x%02X\r\n",ocr[0],ocr[1],ocr[2],ocr[3]);
 8007036:	793b      	ldrb	r3, [r7, #4]
 8007038:	4619      	mov	r1, r3
 800703a:	797b      	ldrb	r3, [r7, #5]
 800703c:	4618      	mov	r0, r3
 800703e:	79bb      	ldrb	r3, [r7, #6]
 8007040:	79fa      	ldrb	r2, [r7, #7]
 8007042:	9201      	str	r2, [sp, #4]
 8007044:	9300      	str	r3, [sp, #0]
 8007046:	4603      	mov	r3, r0
 8007048:	460a      	mov	r2, r1
 800704a:	4932      	ldr	r1, [pc, #200]	; (8007114 <sd_ini+0x220>)
 800704c:	4832      	ldr	r0, [pc, #200]	; (8007118 <sd_ini+0x224>)
 800704e:	f014 fa23 	bl	801b498 <siprintf>
				SEND_str(str1);
 8007052:	4831      	ldr	r0, [pc, #196]	; (8007118 <sd_ini+0x224>)
 8007054:	f7fb fdda 	bl	8002c0c <SEND_str>
				sdinfo.type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2; // SDv2 (HC or SC)
 8007058:	793b      	ldrb	r3, [r7, #4]
 800705a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800705e:	2b00      	cmp	r3, #0
 8007060:	d001      	beq.n	8007066 <sd_ini+0x172>
 8007062:	220c      	movs	r2, #12
 8007064:	e000      	b.n	8007068 <sd_ini+0x174>
 8007066:	2204      	movs	r2, #4
 8007068:	4b27      	ldr	r3, [pc, #156]	; (8007108 <sd_ini+0x214>)
 800706a:	701a      	strb	r2, [r3, #0]
 800706c:	e039      	b.n	80070e2 <sd_ini+0x1ee>
				}
			}
		}
		else //SDv1 or MMCv3
		{
			if (SD_cmd(ACMD41, 0) <= 1)
 800706e:	2100      	movs	r1, #0
 8007070:	20e9      	movs	r0, #233	; 0xe9
 8007072:	f7ff fed5 	bl	8006e20 <SD_cmd>
 8007076:	4603      	mov	r3, r0
 8007078:	2b01      	cmp	r3, #1
 800707a:	d805      	bhi.n	8007088 <sd_ini+0x194>
			{
				sdinfo.type = CT_SD1; cmd = ACMD41;		//SDv1
 800707c:	4b22      	ldr	r3, [pc, #136]	; (8007108 <sd_ini+0x214>)
 800707e:	2202      	movs	r2, #2
 8007080:	701a      	strb	r2, [r3, #0]
 8007082:	23e9      	movs	r3, #233	; 0xe9
 8007084:	73bb      	strb	r3, [r7, #14]
 8007086:	e004      	b.n	8007092 <sd_ini+0x19e>
			}
			else
			{
				sdinfo.type = CT_MMC; cmd = CMD1; 		//MMCv3
 8007088:	4b1f      	ldr	r3, [pc, #124]	; (8007108 <sd_ini+0x214>)
 800708a:	2201      	movs	r2, #1
 800708c:	701a      	strb	r2, [r3, #0]
 800708e:	2341      	movs	r3, #65	; 0x41
 8007090:	73bb      	strb	r3, [r7, #14]
			}
			for (tmr = 25000; tmr && SD_cmd(cmd, 0); tmr--) ; 	//Wait for leaving idle state
 8007092:	f246 13a8 	movw	r3, #25000	; 0x61a8
 8007096:	81bb      	strh	r3, [r7, #12]
 8007098:	e005      	b.n	80070a6 <sd_ini+0x1b2>
 800709a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800709e:	b29b      	uxth	r3, r3
 80070a0:	3b01      	subs	r3, #1
 80070a2:	b29b      	uxth	r3, r3
 80070a4:	81bb      	strh	r3, [r7, #12]
 80070a6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d007      	beq.n	80070be <sd_ini+0x1ca>
 80070ae:	7bbb      	ldrb	r3, [r7, #14]
 80070b0:	2100      	movs	r1, #0
 80070b2:	4618      	mov	r0, r3
 80070b4:	f7ff feb4 	bl	8006e20 <SD_cmd>
 80070b8:	4603      	mov	r3, r0
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d1ed      	bne.n	800709a <sd_ini+0x1a6>
			if (!tmr || SD_cmd(CMD16, 512) != 0) 				//Set R/W block length to 512
 80070be:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d007      	beq.n	80070d6 <sd_ini+0x1e2>
 80070c6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80070ca:	2050      	movs	r0, #80	; 0x50
 80070cc:	f7ff fea8 	bl	8006e20 <SD_cmd>
 80070d0:	4603      	mov	r3, r0
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d005      	beq.n	80070e2 <sd_ini+0x1ee>
				sdinfo.type = 0;
 80070d6:	4b0c      	ldr	r3, [pc, #48]	; (8007108 <sd_ini+0x214>)
 80070d8:	2200      	movs	r2, #0
 80070da:	701a      	strb	r2, [r3, #0]
 80070dc:	e001      	b.n	80070e2 <sd_ini+0x1ee>
		}
	}
	else
	{
		return 1;
 80070de:	2301      	movs	r3, #1
 80070e0:	e00b      	b.n	80070fa <sd_ini+0x206>
	}
	sprintf(str1,"Type SD: 0x%02X\r\n",sdinfo.type);
 80070e2:	4b09      	ldr	r3, [pc, #36]	; (8007108 <sd_ini+0x214>)
 80070e4:	781b      	ldrb	r3, [r3, #0]
 80070e6:	b2db      	uxtb	r3, r3
 80070e8:	461a      	mov	r2, r3
 80070ea:	490c      	ldr	r1, [pc, #48]	; (800711c <sd_ini+0x228>)
 80070ec:	480a      	ldr	r0, [pc, #40]	; (8007118 <sd_ini+0x224>)
 80070ee:	f014 f9d3 	bl	801b498 <siprintf>
	SEND_str(str1);
 80070f2:	4809      	ldr	r0, [pc, #36]	; (8007118 <sd_ini+0x224>)
 80070f4:	f7fb fd8a 	bl	8002c0c <SEND_str>
	return 0;
 80070f8:	2300      	movs	r3, #0
}
 80070fa:	4618      	mov	r0, r3
 80070fc:	3714      	adds	r7, #20
 80070fe:	46bd      	mov	sp, r7
 8007100:	bd90      	pop	{r4, r7, pc}
 8007102:	bf00      	nop
 8007104:	40020000 	.word	0x40020000
 8007108:	20001360 	.word	0x20001360
 800710c:	20000968 	.word	0x20000968
 8007110:	40020400 	.word	0x40020400
 8007114:	080208f8 	.word	0x080208f8
 8007118:	20000448 	.word	0x20000448
 800711c:	0802091c 	.word	0x0802091c

08007120 <FCLK_SLOW>:
	@param  None
    @retval : None
*/
/**************************************************************************/
static void FCLK_SLOW(void)
{
 8007120:	b480      	push	{r7}
 8007122:	b083      	sub	sp, #12
 8007124:	af00      	add	r7, sp, #0
	uint32_t tmp;

	tmp = SPI1->CR1;
 8007126:	4b08      	ldr	r3, [pc, #32]	; (8007148 <FCLK_SLOW+0x28>)
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	607b      	str	r3, [r7, #4]
	tmp = ( tmp | SPI_BAUDRATEPRESCALER_256 );
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 8007132:	607b      	str	r3, [r7, #4]
	SPI1->CR1 = tmp;
 8007134:	4a04      	ldr	r2, [pc, #16]	; (8007148 <FCLK_SLOW+0x28>)
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	6013      	str	r3, [r2, #0]
}
 800713a:	bf00      	nop
 800713c:	370c      	adds	r7, #12
 800713e:	46bd      	mov	sp, r7
 8007140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007144:	4770      	bx	lr
 8007146:	bf00      	nop
 8007148:	40013000 	.word	0x40013000

0800714c <FCLK_FAST>:
	@param  None
    @retval : None
*/
/**************************************************************************/
static void FCLK_FAST(void)
{
 800714c:	b480      	push	{r7}
 800714e:	b083      	sub	sp, #12
 8007150:	af00      	add	r7, sp, #0
	uint32_t tmp;

	tmp = SPI1->CR1;
 8007152:	4b09      	ldr	r3, [pc, #36]	; (8007178 <FCLK_FAST+0x2c>)
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	607b      	str	r3, [r7, #4]
//	tmp = ( tmp & ~SPI_BaudRatePrescaler_256 ) | SPI_BaudRatePrescaler_2;
	tmp = ( tmp & ~SPI_BAUDRATEPRESCALER_256 ) | SPI_BAUDRATEPRESCALER_8;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 800715e:	f043 0310 	orr.w	r3, r3, #16
 8007162:	607b      	str	r3, [r7, #4]
	SPI1->CR1 = tmp;
 8007164:	4a04      	ldr	r2, [pc, #16]	; (8007178 <FCLK_FAST+0x2c>)
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	6013      	str	r3, [r2, #0]
}
 800716a:	bf00      	nop
 800716c:	370c      	adds	r7, #12
 800716e:	46bd      	mov	sp, r7
 8007170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007174:	4770      	bx	lr
 8007176:	bf00      	nop
 8007178:	40013000 	.word	0x40013000

0800717c <xmit_spi>:
	@param  uint8_t out
    @retval : uint8_t
*/
/**************************************************************************/
static inline uint8_t xmit_spi(uint8_t out)
{
 800717c:	b480      	push	{r7}
 800717e:	b083      	sub	sp, #12
 8007180:	af00      	add	r7, sp, #0
 8007182:	4603      	mov	r3, r0
 8007184:	71fb      	strb	r3, [r7, #7]
/* Loop while DR register in not empty */
	while(!(SPI1->SR & SPI_FLAG_TXE));	//SPI_I2S_FLAG_TXE
 8007186:	bf00      	nop
 8007188:	4b0c      	ldr	r3, [pc, #48]	; (80071bc <xmit_spi+0x40>)
 800718a:	689b      	ldr	r3, [r3, #8]
 800718c:	f003 0302 	and.w	r3, r3, #2
 8007190:	2b00      	cmp	r3, #0
 8007192:	d0f9      	beq.n	8007188 <xmit_spi+0xc>

/* Send byte through the SPIMMC peripheral */
	SPI1->DR = out;
 8007194:	4a09      	ldr	r2, [pc, #36]	; (80071bc <xmit_spi+0x40>)
 8007196:	79fb      	ldrb	r3, [r7, #7]
 8007198:	60d3      	str	r3, [r2, #12]
/* Wait to receive a byte */
	while(!(SPI1->SR & SPI_FLAG_RXNE));	//SPI_I2S_FLAG_RXNE
 800719a:	bf00      	nop
 800719c:	4b07      	ldr	r3, [pc, #28]	; (80071bc <xmit_spi+0x40>)
 800719e:	689b      	ldr	r3, [r3, #8]
 80071a0:	f003 0301 	and.w	r3, r3, #1
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d0f9      	beq.n	800719c <xmit_spi+0x20>

/* Return the byte read from the SPI bus */
	return (SPI1->DR);
 80071a8:	4b04      	ldr	r3, [pc, #16]	; (80071bc <xmit_spi+0x40>)
 80071aa:	68db      	ldr	r3, [r3, #12]
 80071ac:	b2db      	uxtb	r3, r3
}
 80071ae:	4618      	mov	r0, r3
 80071b0:	370c      	adds	r7, #12
 80071b2:	46bd      	mov	sp, r7
 80071b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b8:	4770      	bx	lr
 80071ba:	bf00      	nop
 80071bc:	40013000 	.word	0x40013000

080071c0 <rcvr_spi>:
	@param  none
    @retval : uint8_t
*/
/**************************************************************************/
static inline uint8_t rcvr_spi(void)
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	af00      	add	r7, sp, #0
	return xmit_spi(0xFF);
 80071c4:	20ff      	movs	r0, #255	; 0xff
 80071c6:	f7ff ffd9 	bl	800717c <xmit_spi>
 80071ca:	4603      	mov	r3, r0
}
 80071cc:	4618      	mov	r0, r3
 80071ce:	bd80      	pop	{r7, pc}

080071d0 <wait_ready>:
*/
/**************************************************************************/
static int wait_ready (	/* 1:Ready, 0:Timeout */
	unsigned int wt		/* Timeout [ms/10] */
)
{
 80071d0:	b580      	push	{r7, lr}
 80071d2:	b082      	sub	sp, #8
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
	Timer2 = wt;
 80071d8:	4a0a      	ldr	r2, [pc, #40]	; (8007204 <wait_ready+0x34>)
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	6013      	str	r3, [r2, #0]
	rcvr_spi();
 80071de:	f7ff ffef 	bl	80071c0 <rcvr_spi>
	do
		if (rcvr_spi() == 0xFF) return 1;
 80071e2:	f7ff ffed 	bl	80071c0 <rcvr_spi>
 80071e6:	4603      	mov	r3, r0
 80071e8:	2bff      	cmp	r3, #255	; 0xff
 80071ea:	d101      	bne.n	80071f0 <wait_ready+0x20>
 80071ec:	2301      	movs	r3, #1
 80071ee:	e004      	b.n	80071fa <wait_ready+0x2a>
	while (Timer2);
 80071f0:	4b04      	ldr	r3, [pc, #16]	; (8007204 <wait_ready+0x34>)
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d1f4      	bne.n	80071e2 <wait_ready+0x12>

	return 0;
 80071f8:	2300      	movs	r3, #0
}
 80071fa:	4618      	mov	r0, r3
 80071fc:	3708      	adds	r7, #8
 80071fe:	46bd      	mov	sp, r7
 8007200:	bd80      	pop	{r7, pc}
 8007202:	bf00      	nop
 8007204:	2000048c 	.word	0x2000048c

08007208 <deselect>:
	@param  none
    @retval : none
*/
/**************************************************************************/
static inline void deselect(void)
{
 8007208:	b580      	push	{r7, lr}
 800720a:	af00      	add	r7, sp, #0
	CS_HIGH();
 800720c:	2201      	movs	r2, #1
 800720e:	2140      	movs	r1, #64	; 0x40
 8007210:	4803      	ldr	r0, [pc, #12]	; (8007220 <deselect+0x18>)
 8007212:	f004 fc5f 	bl	800bad4 <HAL_GPIO_WritePin>
	rcvr_spi();
 8007216:	f7ff ffd3 	bl	80071c0 <rcvr_spi>
}
 800721a:	bf00      	nop
 800721c:	bd80      	pop	{r7, pc}
 800721e:	bf00      	nop
 8007220:	40020400 	.word	0x40020400

08007224 <selecting>:
	@param  none
    @retval : 1:Successful, 0:Timeout
*/
/**************************************************************************/
static inline int selecting(void)
{
 8007224:	b580      	push	{r7, lr}
 8007226:	af00      	add	r7, sp, #0
	CS_LOW();
 8007228:	2200      	movs	r2, #0
 800722a:	2140      	movs	r1, #64	; 0x40
 800722c:	4807      	ldr	r0, [pc, #28]	; (800724c <selecting+0x28>)
 800722e:	f004 fc51 	bl	800bad4 <HAL_GPIO_WritePin>
	if (!wait_ready(50)) {
 8007232:	2032      	movs	r0, #50	; 0x32
 8007234:	f7ff ffcc 	bl	80071d0 <wait_ready>
 8007238:	4603      	mov	r3, r0
 800723a:	2b00      	cmp	r3, #0
 800723c:	d103      	bne.n	8007246 <selecting+0x22>
		deselect();
 800723e:	f7ff ffe3 	bl	8007208 <deselect>
		return 0;
 8007242:	2300      	movs	r3, #0
 8007244:	e000      	b.n	8007248 <selecting+0x24>
	}
	return 1;
 8007246:	2301      	movs	r3, #1
}
 8007248:	4618      	mov	r0, r3
 800724a:	bd80      	pop	{r7, pc}
 800724c:	40020400 	.word	0x40020400

08007250 <power_status>:
	@param  none
    @retval : Socket power state: 0=off, 1=on
*/
/**************************************************************************/
static int power_status(void)
{
 8007250:	b480      	push	{r7}
 8007252:	af00      	add	r7, sp, #0
	return PowerFlag;
 8007254:	4b03      	ldr	r3, [pc, #12]	; (8007264 <power_status+0x14>)
 8007256:	781b      	ldrb	r3, [r3, #0]
}
 8007258:	4618      	mov	r0, r3
 800725a:	46bd      	mov	sp, r7
 800725c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007260:	4770      	bx	lr
 8007262:	bf00      	nop
 8007264:	20000484 	.word	0x20000484

08007268 <power_on>:
	@param  none
    @retval : none
*/
/**************************************************************************/
static void power_on (void)
{
 8007268:	b580      	push	{r7, lr}
 800726a:	b082      	sub	sp, #8
 800726c:	af00      	add	r7, sp, #0
	//u8 i;
	uint8_t i;

	CS_HIGH();      // CS = 1
 800726e:	2201      	movs	r2, #1
 8007270:	2140      	movs	r1, #64	; 0x40
 8007272:	480b      	ldr	r0, [pc, #44]	; (80072a0 <power_on+0x38>)
 8007274:	f004 fc2e 	bl	800bad4 <HAL_GPIO_WritePin>

	for (i = 0; i < 10; i++)
 8007278:	2300      	movs	r3, #0
 800727a:	71fb      	strb	r3, [r7, #7]
 800727c:	e005      	b.n	800728a <power_on+0x22>
		xmit_spi(0xFF);
 800727e:	20ff      	movs	r0, #255	; 0xff
 8007280:	f7ff ff7c 	bl	800717c <xmit_spi>
	for (i = 0; i < 10; i++)
 8007284:	79fb      	ldrb	r3, [r7, #7]
 8007286:	3301      	adds	r3, #1
 8007288:	71fb      	strb	r3, [r7, #7]
 800728a:	79fb      	ldrb	r3, [r7, #7]
 800728c:	2b09      	cmp	r3, #9
 800728e:	d9f6      	bls.n	800727e <power_on+0x16>

	PowerFlag = 1;
 8007290:	4b04      	ldr	r3, [pc, #16]	; (80072a4 <power_on+0x3c>)
 8007292:	2201      	movs	r2, #1
 8007294:	701a      	strb	r2, [r3, #0]

}
 8007296:	bf00      	nop
 8007298:	3708      	adds	r7, #8
 800729a:	46bd      	mov	sp, r7
 800729c:	bd80      	pop	{r7, pc}
 800729e:	bf00      	nop
 80072a0:	40020400 	.word	0x40020400
 80072a4:	20000484 	.word	0x20000484

080072a8 <power_off>:
	@param  none
    @retval : none
*/
/**************************************************************************/
static void power_off (void)
{
 80072a8:	b480      	push	{r7}
 80072aa:	af00      	add	r7, sp, #0
    PowerFlag = 0;
 80072ac:	4b03      	ldr	r3, [pc, #12]	; (80072bc <power_off+0x14>)
 80072ae:	2200      	movs	r2, #0
 80072b0:	701a      	strb	r2, [r3, #0]
}
 80072b2:	bf00      	nop
 80072b4:	46bd      	mov	sp, r7
 80072b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ba:	4770      	bx	lr
 80072bc:	20000484 	.word	0x20000484

080072c0 <rcvr_datablock>:
/**************************************************************************/
static int rcvr_datablock (
	uint8_t 		*buff,			/* Data buffer to store received data */
	unsigned int 	 btr			/* Byte count (must be multiple of 4) */
)
{
 80072c0:	b590      	push	{r4, r7, lr}
 80072c2:	b085      	sub	sp, #20
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]
 80072c8:	6039      	str	r1, [r7, #0]
	uint8_t token;


	Timer1 = 20;
 80072ca:	4b21      	ldr	r3, [pc, #132]	; (8007350 <rcvr_datablock+0x90>)
 80072cc:	2214      	movs	r2, #20
 80072ce:	601a      	str	r2, [r3, #0]
	do {							/* Wait for data packet in timeout of 200ms */
		token = rcvr_spi();
 80072d0:	f7ff ff76 	bl	80071c0 <rcvr_spi>
 80072d4:	4603      	mov	r3, r0
 80072d6:	73fb      	strb	r3, [r7, #15]
	} while ((token == 0xFF) && Timer1);
 80072d8:	7bfb      	ldrb	r3, [r7, #15]
 80072da:	2bff      	cmp	r3, #255	; 0xff
 80072dc:	d103      	bne.n	80072e6 <rcvr_datablock+0x26>
 80072de:	4b1c      	ldr	r3, [pc, #112]	; (8007350 <rcvr_datablock+0x90>)
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d1f4      	bne.n	80072d0 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* If not valid data token, retutn with error */
 80072e6:	7bfb      	ldrb	r3, [r7, #15]
 80072e8:	2bfe      	cmp	r3, #254	; 0xfe
 80072ea:	d001      	beq.n	80072f0 <rcvr_datablock+0x30>
 80072ec:	2300      	movs	r3, #0
 80072ee:	e02a      	b.n	8007346 <rcvr_datablock+0x86>


	do {							/* Receive the data block into buffer */
		rcvr_spi_m(buff++);
 80072f0:	687c      	ldr	r4, [r7, #4]
 80072f2:	1c63      	adds	r3, r4, #1
 80072f4:	607b      	str	r3, [r7, #4]
 80072f6:	20ff      	movs	r0, #255	; 0xff
 80072f8:	f7ff ff40 	bl	800717c <xmit_spi>
 80072fc:	4603      	mov	r3, r0
 80072fe:	7023      	strb	r3, [r4, #0]
		rcvr_spi_m(buff++);
 8007300:	687c      	ldr	r4, [r7, #4]
 8007302:	1c63      	adds	r3, r4, #1
 8007304:	607b      	str	r3, [r7, #4]
 8007306:	20ff      	movs	r0, #255	; 0xff
 8007308:	f7ff ff38 	bl	800717c <xmit_spi>
 800730c:	4603      	mov	r3, r0
 800730e:	7023      	strb	r3, [r4, #0]
		rcvr_spi_m(buff++);
 8007310:	687c      	ldr	r4, [r7, #4]
 8007312:	1c63      	adds	r3, r4, #1
 8007314:	607b      	str	r3, [r7, #4]
 8007316:	20ff      	movs	r0, #255	; 0xff
 8007318:	f7ff ff30 	bl	800717c <xmit_spi>
 800731c:	4603      	mov	r3, r0
 800731e:	7023      	strb	r3, [r4, #0]
		rcvr_spi_m(buff++);
 8007320:	687c      	ldr	r4, [r7, #4]
 8007322:	1c63      	adds	r3, r4, #1
 8007324:	607b      	str	r3, [r7, #4]
 8007326:	20ff      	movs	r0, #255	; 0xff
 8007328:	f7ff ff28 	bl	800717c <xmit_spi>
 800732c:	4603      	mov	r3, r0
 800732e:	7023      	strb	r3, [r4, #0]
	} while (btr -= 4);
 8007330:	683b      	ldr	r3, [r7, #0]
 8007332:	3b04      	subs	r3, #4
 8007334:	603b      	str	r3, [r7, #0]
 8007336:	683b      	ldr	r3, [r7, #0]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d1d9      	bne.n	80072f0 <rcvr_datablock+0x30>
	rcvr_spi();						/* Discard CRC */
 800733c:	f7ff ff40 	bl	80071c0 <rcvr_spi>
	rcvr_spi();
 8007340:	f7ff ff3e 	bl	80071c0 <rcvr_spi>

	return 1;						/* Return with success */
 8007344:	2301      	movs	r3, #1
}
 8007346:	4618      	mov	r0, r3
 8007348:	3714      	adds	r7, #20
 800734a:	46bd      	mov	sp, r7
 800734c:	bd90      	pop	{r4, r7, pc}
 800734e:	bf00      	nop
 8007350:	20000488 	.word	0x20000488

08007354 <xmit_datablock>:
#if _READONLY == 0
static int xmit_datablock (
	const uint8_t *buff,	/* 512 byte data block to be transmitted */
	uint8_t       token		/* Data/Stop token */
)
{
 8007354:	b580      	push	{r7, lr}
 8007356:	b084      	sub	sp, #16
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]
 800735c:	460b      	mov	r3, r1
 800735e:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t wc;

	if (!wait_ready(50)) return 0;
 8007360:	2032      	movs	r0, #50	; 0x32
 8007362:	f7ff ff35 	bl	80071d0 <wait_ready>
 8007366:	4603      	mov	r3, r0
 8007368:	2b00      	cmp	r3, #0
 800736a:	d101      	bne.n	8007370 <xmit_datablock+0x1c>
 800736c:	2300      	movs	r3, #0
 800736e:	e02e      	b.n	80073ce <xmit_datablock+0x7a>

	xmit_spi(token);					/* Xmit data token */
 8007370:	78fb      	ldrb	r3, [r7, #3]
 8007372:	4618      	mov	r0, r3
 8007374:	f7ff ff02 	bl	800717c <xmit_spi>
	if (token != 0xFD) {				/* Is data token */
 8007378:	78fb      	ldrb	r3, [r7, #3]
 800737a:	2bfd      	cmp	r3, #253	; 0xfd
 800737c:	d026      	beq.n	80073cc <xmit_datablock+0x78>
		wc = 0;
 800737e:	2300      	movs	r3, #0
 8007380:	73fb      	strb	r3, [r7, #15]
		do {							/* Xmit the 512 byte data block to MMC */
			xmit_spi(*buff++);
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	1c5a      	adds	r2, r3, #1
 8007386:	607a      	str	r2, [r7, #4]
 8007388:	781b      	ldrb	r3, [r3, #0]
 800738a:	4618      	mov	r0, r3
 800738c:	f7ff fef6 	bl	800717c <xmit_spi>
			xmit_spi(*buff++);
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	1c5a      	adds	r2, r3, #1
 8007394:	607a      	str	r2, [r7, #4]
 8007396:	781b      	ldrb	r3, [r3, #0]
 8007398:	4618      	mov	r0, r3
 800739a:	f7ff feef 	bl	800717c <xmit_spi>
		} while (--wc);
 800739e:	7bfb      	ldrb	r3, [r7, #15]
 80073a0:	3b01      	subs	r3, #1
 80073a2:	73fb      	strb	r3, [r7, #15]
 80073a4:	7bfb      	ldrb	r3, [r7, #15]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d1eb      	bne.n	8007382 <xmit_datablock+0x2e>
		xmit_spi(0xFF);					/* CRC (Dummy) */
 80073aa:	20ff      	movs	r0, #255	; 0xff
 80073ac:	f7ff fee6 	bl	800717c <xmit_spi>
		xmit_spi(0xFF);
 80073b0:	20ff      	movs	r0, #255	; 0xff
 80073b2:	f7ff fee3 	bl	800717c <xmit_spi>
		resp = rcvr_spi();				/* Reveive data response */
 80073b6:	f7ff ff03 	bl	80071c0 <rcvr_spi>
 80073ba:	4603      	mov	r3, r0
 80073bc:	73bb      	strb	r3, [r7, #14]
		if ((resp & 0x1F) != 0x05)		/* If not accepted, return with error */
 80073be:	7bbb      	ldrb	r3, [r7, #14]
 80073c0:	f003 031f 	and.w	r3, r3, #31
 80073c4:	2b05      	cmp	r3, #5
 80073c6:	d001      	beq.n	80073cc <xmit_datablock+0x78>
			return 0;
 80073c8:	2300      	movs	r3, #0
 80073ca:	e000      	b.n	80073ce <xmit_datablock+0x7a>
	}

	return 1;
 80073cc:	2301      	movs	r3, #1
}
 80073ce:	4618      	mov	r0, r3
 80073d0:	3710      	adds	r7, #16
 80073d2:	46bd      	mov	sp, r7
 80073d4:	bd80      	pop	{r7, pc}

080073d6 <send_cmd>:
/**************************************************************************/
static uint8_t send_cmd (		/* Returns R1 resp (bit7==1:Send failed) */
	uint8_t  cmd,				/* Command index */
	uint32_t arg				/* Argument */
)
{
 80073d6:	b580      	push	{r7, lr}
 80073d8:	b084      	sub	sp, #16
 80073da:	af00      	add	r7, sp, #0
 80073dc:	4603      	mov	r3, r0
 80073de:	6039      	str	r1, [r7, #0]
 80073e0:	71fb      	strb	r3, [r7, #7]
	uint8_t n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
 80073e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	da0e      	bge.n	8007408 <send_cmd+0x32>
		cmd &= 0x7F;
 80073ea:	79fb      	ldrb	r3, [r7, #7]
 80073ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80073f0:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 80073f2:	2100      	movs	r1, #0
 80073f4:	2037      	movs	r0, #55	; 0x37
 80073f6:	f7ff ffee 	bl	80073d6 <send_cmd>
 80073fa:	4603      	mov	r3, r0
 80073fc:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 80073fe:	7bbb      	ldrb	r3, [r7, #14]
 8007400:	2b01      	cmp	r3, #1
 8007402:	d901      	bls.n	8007408 <send_cmd+0x32>
 8007404:	7bbb      	ldrb	r3, [r7, #14]
 8007406:	e04c      	b.n	80074a2 <send_cmd+0xcc>
	}

	/* Select the card and wait for ready */
	deselect();
 8007408:	f7ff fefe 	bl	8007208 <deselect>
	if (!selecting()) return 0xFF;
 800740c:	f7ff ff0a 	bl	8007224 <selecting>
 8007410:	4603      	mov	r3, r0
 8007412:	2b00      	cmp	r3, #0
 8007414:	d101      	bne.n	800741a <send_cmd+0x44>
 8007416:	23ff      	movs	r3, #255	; 0xff
 8007418:	e043      	b.n	80074a2 <send_cmd+0xcc>

	/* Send command packet */
	xmit_spi(0x40 | cmd);				/* Start + Command index */
 800741a:	79fb      	ldrb	r3, [r7, #7]
 800741c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007420:	b2db      	uxtb	r3, r3
 8007422:	4618      	mov	r0, r3
 8007424:	f7ff feaa 	bl	800717c <xmit_spi>
	xmit_spi((uint8_t)(arg >> 24));		/* Argument[31..24] */
 8007428:	683b      	ldr	r3, [r7, #0]
 800742a:	0e1b      	lsrs	r3, r3, #24
 800742c:	b2db      	uxtb	r3, r3
 800742e:	4618      	mov	r0, r3
 8007430:	f7ff fea4 	bl	800717c <xmit_spi>
	xmit_spi((uint8_t)(arg >> 16));		/* Argument[23..16] */
 8007434:	683b      	ldr	r3, [r7, #0]
 8007436:	0c1b      	lsrs	r3, r3, #16
 8007438:	b2db      	uxtb	r3, r3
 800743a:	4618      	mov	r0, r3
 800743c:	f7ff fe9e 	bl	800717c <xmit_spi>
	xmit_spi((uint8_t)(arg >> 8));		/* Argument[15..8] */
 8007440:	683b      	ldr	r3, [r7, #0]
 8007442:	0a1b      	lsrs	r3, r3, #8
 8007444:	b2db      	uxtb	r3, r3
 8007446:	4618      	mov	r0, r3
 8007448:	f7ff fe98 	bl	800717c <xmit_spi>
	xmit_spi((uint8_t)arg);				/* Argument[7..0] */
 800744c:	683b      	ldr	r3, [r7, #0]
 800744e:	b2db      	uxtb	r3, r3
 8007450:	4618      	mov	r0, r3
 8007452:	f7ff fe93 	bl	800717c <xmit_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 8007456:	2301      	movs	r3, #1
 8007458:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 800745a:	79fb      	ldrb	r3, [r7, #7]
 800745c:	2b00      	cmp	r3, #0
 800745e:	d101      	bne.n	8007464 <send_cmd+0x8e>
 8007460:	2395      	movs	r3, #149	; 0x95
 8007462:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 8007464:	79fb      	ldrb	r3, [r7, #7]
 8007466:	2b08      	cmp	r3, #8
 8007468:	d101      	bne.n	800746e <send_cmd+0x98>
 800746a:	2387      	movs	r3, #135	; 0x87
 800746c:	73fb      	strb	r3, [r7, #15]
	xmit_spi(n);
 800746e:	7bfb      	ldrb	r3, [r7, #15]
 8007470:	4618      	mov	r0, r3
 8007472:	f7ff fe83 	bl	800717c <xmit_spi>

	/* Receive command response */
	if (cmd == CMD12) rcvr_spi();		/* Skip a stuff byte when stop reading */
 8007476:	79fb      	ldrb	r3, [r7, #7]
 8007478:	2b0c      	cmp	r3, #12
 800747a:	d101      	bne.n	8007480 <send_cmd+0xaa>
 800747c:	f7ff fea0 	bl	80071c0 <rcvr_spi>
	n = 10;								/* Wait for a valid response in timeout of 10 attempts */
 8007480:	230a      	movs	r3, #10
 8007482:	73fb      	strb	r3, [r7, #15]
	do
		res = rcvr_spi();
 8007484:	f7ff fe9c 	bl	80071c0 <rcvr_spi>
 8007488:	4603      	mov	r3, r0
 800748a:	73bb      	strb	r3, [r7, #14]
	while ((res & 0x80) && --n);
 800748c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007490:	2b00      	cmp	r3, #0
 8007492:	da05      	bge.n	80074a0 <send_cmd+0xca>
 8007494:	7bfb      	ldrb	r3, [r7, #15]
 8007496:	3b01      	subs	r3, #1
 8007498:	73fb      	strb	r3, [r7, #15]
 800749a:	7bfb      	ldrb	r3, [r7, #15]
 800749c:	2b00      	cmp	r3, #0
 800749e:	d1f1      	bne.n	8007484 <send_cmd+0xae>

	return res;			/* Return with the response value */
 80074a0:	7bbb      	ldrb	r3, [r7, #14]
}
 80074a2:	4618      	mov	r0, r3
 80074a4:	3710      	adds	r7, #16
 80074a6:	46bd      	mov	sp, r7
 80074a8:	bd80      	pop	{r7, pc}
	...

080074ac <disk_initialize>:
*/
/**************************************************************************/
DSTATUS disk_initialize (
	uint8_t drv		/* Physical drive number (0) */
)
{
 80074ac:	b590      	push	{r4, r7, lr}
 80074ae:	b085      	sub	sp, #20
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	4603      	mov	r3, r0
 80074b4:	71fb      	strb	r3, [r7, #7]
	uint8_t n, cmd, ty, ocr[4];


	if (drv) return STA_NOINIT;			/* Supports only single drive */
 80074b6:	79fb      	ldrb	r3, [r7, #7]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d001      	beq.n	80074c0 <disk_initialize+0x14>
 80074bc:	2301      	movs	r3, #1
 80074be:	e0c9      	b.n	8007654 <disk_initialize+0x1a8>
	if (Stat & STA_NODISK) return Stat;	/* No card in the socket */
 80074c0:	4b66      	ldr	r3, [pc, #408]	; (800765c <disk_initialize+0x1b0>)
 80074c2:	781b      	ldrb	r3, [r3, #0]
 80074c4:	b2db      	uxtb	r3, r3
 80074c6:	f003 0302 	and.w	r3, r3, #2
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d003      	beq.n	80074d6 <disk_initialize+0x2a>
 80074ce:	4b63      	ldr	r3, [pc, #396]	; (800765c <disk_initialize+0x1b0>)
 80074d0:	781b      	ldrb	r3, [r3, #0]
 80074d2:	b2db      	uxtb	r3, r3
 80074d4:	e0be      	b.n	8007654 <disk_initialize+0x1a8>

//	spi_init();
	CS_HIGH();
 80074d6:	2201      	movs	r2, #1
 80074d8:	2140      	movs	r1, #64	; 0x40
 80074da:	4861      	ldr	r0, [pc, #388]	; (8007660 <disk_initialize+0x1b4>)
 80074dc:	f004 fafa 	bl	800bad4 <HAL_GPIO_WritePin>
	power_on();							/* Force socket power on */
 80074e0:	f7ff fec2 	bl	8007268 <power_on>
	FCLK_SLOW();
 80074e4:	f7ff fe1c 	bl	8007120 <FCLK_SLOW>
	CS_LOW();
 80074e8:	2200      	movs	r2, #0
 80074ea:	2140      	movs	r1, #64	; 0x40
 80074ec:	485c      	ldr	r0, [pc, #368]	; (8007660 <disk_initialize+0x1b4>)
 80074ee:	f004 faf1 	bl	800bad4 <HAL_GPIO_WritePin>
	for (n = 10; n; n--) rcvr_spi();	/* 80 dummy clocks */
 80074f2:	230a      	movs	r3, #10
 80074f4:	73fb      	strb	r3, [r7, #15]
 80074f6:	e004      	b.n	8007502 <disk_initialize+0x56>
 80074f8:	f7ff fe62 	bl	80071c0 <rcvr_spi>
 80074fc:	7bfb      	ldrb	r3, [r7, #15]
 80074fe:	3b01      	subs	r3, #1
 8007500:	73fb      	strb	r3, [r7, #15]
 8007502:	7bfb      	ldrb	r3, [r7, #15]
 8007504:	2b00      	cmp	r3, #0
 8007506:	d1f7      	bne.n	80074f8 <disk_initialize+0x4c>

	ty = 0;
 8007508:	2300      	movs	r3, #0
 800750a:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
 800750c:	2100      	movs	r1, #0
 800750e:	2000      	movs	r0, #0
 8007510:	f7ff ff61 	bl	80073d6 <send_cmd>
 8007514:	4603      	mov	r3, r0
 8007516:	2b01      	cmp	r3, #1
 8007518:	f040 8084 	bne.w	8007624 <disk_initialize+0x178>
		Timer1 = 100;						/* Initialization timeout of 1000 msec */
 800751c:	4b51      	ldr	r3, [pc, #324]	; (8007664 <disk_initialize+0x1b8>)
 800751e:	2264      	movs	r2, #100	; 0x64
 8007520:	601a      	str	r2, [r3, #0]
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 8007522:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007526:	2008      	movs	r0, #8
 8007528:	f7ff ff55 	bl	80073d6 <send_cmd>
 800752c:	4603      	mov	r3, r0
 800752e:	2b01      	cmp	r3, #1
 8007530:	d14d      	bne.n	80075ce <disk_initialize+0x122>
			for (n = 0; n < 4; n++) ocr[n] = rcvr_spi();		/* Get trailing return value of R7 resp */
 8007532:	2300      	movs	r3, #0
 8007534:	73fb      	strb	r3, [r7, #15]
 8007536:	e00c      	b.n	8007552 <disk_initialize+0xa6>
 8007538:	7bfc      	ldrb	r4, [r7, #15]
 800753a:	f7ff fe41 	bl	80071c0 <rcvr_spi>
 800753e:	4603      	mov	r3, r0
 8007540:	461a      	mov	r2, r3
 8007542:	f107 0310 	add.w	r3, r7, #16
 8007546:	4423      	add	r3, r4
 8007548:	f803 2c08 	strb.w	r2, [r3, #-8]
 800754c:	7bfb      	ldrb	r3, [r7, #15]
 800754e:	3301      	adds	r3, #1
 8007550:	73fb      	strb	r3, [r7, #15]
 8007552:	7bfb      	ldrb	r3, [r7, #15]
 8007554:	2b03      	cmp	r3, #3
 8007556:	d9ef      	bls.n	8007538 <disk_initialize+0x8c>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* The card can work at vdd range of 2.7-3.6V */
 8007558:	7abb      	ldrb	r3, [r7, #10]
 800755a:	2b01      	cmp	r3, #1
 800755c:	d162      	bne.n	8007624 <disk_initialize+0x178>
 800755e:	7afb      	ldrb	r3, [r7, #11]
 8007560:	2baa      	cmp	r3, #170	; 0xaa
 8007562:	d15f      	bne.n	8007624 <disk_initialize+0x178>
				while (Timer1 && send_cmd(ACMD41, 1UL << 30));	/* Wait for leaving idle state (ACMD41 with HCS bit) */
 8007564:	bf00      	nop
 8007566:	4b3f      	ldr	r3, [pc, #252]	; (8007664 <disk_initialize+0x1b8>)
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	2b00      	cmp	r3, #0
 800756c:	d007      	beq.n	800757e <disk_initialize+0xd2>
 800756e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8007572:	20a9      	movs	r0, #169	; 0xa9
 8007574:	f7ff ff2f 	bl	80073d6 <send_cmd>
 8007578:	4603      	mov	r3, r0
 800757a:	2b00      	cmp	r3, #0
 800757c:	d1f3      	bne.n	8007566 <disk_initialize+0xba>
				if (Timer1 && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 800757e:	4b39      	ldr	r3, [pc, #228]	; (8007664 <disk_initialize+0x1b8>)
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	2b00      	cmp	r3, #0
 8007584:	d04e      	beq.n	8007624 <disk_initialize+0x178>
 8007586:	2100      	movs	r1, #0
 8007588:	203a      	movs	r0, #58	; 0x3a
 800758a:	f7ff ff24 	bl	80073d6 <send_cmd>
 800758e:	4603      	mov	r3, r0
 8007590:	2b00      	cmp	r3, #0
 8007592:	d147      	bne.n	8007624 <disk_initialize+0x178>
					for (n = 0; n < 4; n++) ocr[n] = rcvr_spi();
 8007594:	2300      	movs	r3, #0
 8007596:	73fb      	strb	r3, [r7, #15]
 8007598:	e00c      	b.n	80075b4 <disk_initialize+0x108>
 800759a:	7bfc      	ldrb	r4, [r7, #15]
 800759c:	f7ff fe10 	bl	80071c0 <rcvr_spi>
 80075a0:	4603      	mov	r3, r0
 80075a2:	461a      	mov	r2, r3
 80075a4:	f107 0310 	add.w	r3, r7, #16
 80075a8:	4423      	add	r3, r4
 80075aa:	f803 2c08 	strb.w	r2, [r3, #-8]
 80075ae:	7bfb      	ldrb	r3, [r7, #15]
 80075b0:	3301      	adds	r3, #1
 80075b2:	73fb      	strb	r3, [r7, #15]
 80075b4:	7bfb      	ldrb	r3, [r7, #15]
 80075b6:	2b03      	cmp	r3, #3
 80075b8:	d9ef      	bls.n	800759a <disk_initialize+0xee>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
 80075ba:	7a3b      	ldrb	r3, [r7, #8]
 80075bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d001      	beq.n	80075c8 <disk_initialize+0x11c>
 80075c4:	230c      	movs	r3, #12
 80075c6:	e000      	b.n	80075ca <disk_initialize+0x11e>
 80075c8:	2304      	movs	r3, #4
 80075ca:	737b      	strb	r3, [r7, #13]
 80075cc:	e02a      	b.n	8007624 <disk_initialize+0x178>
				}
			}
		} else {							/* SDv1 or MMCv3 */
			if (send_cmd(ACMD41, 0) <= 1) 	{
 80075ce:	2100      	movs	r1, #0
 80075d0:	20a9      	movs	r0, #169	; 0xa9
 80075d2:	f7ff ff00 	bl	80073d6 <send_cmd>
 80075d6:	4603      	mov	r3, r0
 80075d8:	2b01      	cmp	r3, #1
 80075da:	d804      	bhi.n	80075e6 <disk_initialize+0x13a>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
 80075dc:	2302      	movs	r3, #2
 80075de:	737b      	strb	r3, [r7, #13]
 80075e0:	23a9      	movs	r3, #169	; 0xa9
 80075e2:	73bb      	strb	r3, [r7, #14]
 80075e4:	e003      	b.n	80075ee <disk_initialize+0x142>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
 80075e6:	2301      	movs	r3, #1
 80075e8:	737b      	strb	r3, [r7, #13]
 80075ea:	2301      	movs	r3, #1
 80075ec:	73bb      	strb	r3, [r7, #14]
			}
			while (Timer1 && send_cmd(cmd, 0));			/* Wait for leaving idle state */
 80075ee:	bf00      	nop
 80075f0:	4b1c      	ldr	r3, [pc, #112]	; (8007664 <disk_initialize+0x1b8>)
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d007      	beq.n	8007608 <disk_initialize+0x15c>
 80075f8:	7bbb      	ldrb	r3, [r7, #14]
 80075fa:	2100      	movs	r1, #0
 80075fc:	4618      	mov	r0, r3
 80075fe:	f7ff feea 	bl	80073d6 <send_cmd>
 8007602:	4603      	mov	r3, r0
 8007604:	2b00      	cmp	r3, #0
 8007606:	d1f3      	bne.n	80075f0 <disk_initialize+0x144>
			if (!Timer1 || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
 8007608:	4b16      	ldr	r3, [pc, #88]	; (8007664 <disk_initialize+0x1b8>)
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	2b00      	cmp	r3, #0
 800760e:	d007      	beq.n	8007620 <disk_initialize+0x174>
 8007610:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007614:	2010      	movs	r0, #16
 8007616:	f7ff fede 	bl	80073d6 <send_cmd>
 800761a:	4603      	mov	r3, r0
 800761c:	2b00      	cmp	r3, #0
 800761e:	d001      	beq.n	8007624 <disk_initialize+0x178>
				ty = 0;
 8007620:	2300      	movs	r3, #0
 8007622:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;
 8007624:	4a10      	ldr	r2, [pc, #64]	; (8007668 <disk_initialize+0x1bc>)
 8007626:	7b7b      	ldrb	r3, [r7, #13]
 8007628:	7013      	strb	r3, [r2, #0]
	deselect();
 800762a:	f7ff fded 	bl	8007208 <deselect>

	if (ty) {						/* Initialization succeded */
 800762e:	7b7b      	ldrb	r3, [r7, #13]
 8007630:	2b00      	cmp	r3, #0
 8007632:	d00a      	beq.n	800764a <disk_initialize+0x19e>
		Stat &= ~STA_NOINIT;		/* Clear STA_NOINIT */
 8007634:	4b09      	ldr	r3, [pc, #36]	; (800765c <disk_initialize+0x1b0>)
 8007636:	781b      	ldrb	r3, [r3, #0]
 8007638:	b2db      	uxtb	r3, r3
 800763a:	f023 0301 	bic.w	r3, r3, #1
 800763e:	b2da      	uxtb	r2, r3
 8007640:	4b06      	ldr	r3, [pc, #24]	; (800765c <disk_initialize+0x1b0>)
 8007642:	701a      	strb	r2, [r3, #0]

		FCLK_FAST();
 8007644:	f7ff fd82 	bl	800714c <FCLK_FAST>
 8007648:	e001      	b.n	800764e <disk_initialize+0x1a2>

	} else {						/* Initialization failed */
		power_off();
 800764a:	f7ff fe2d 	bl	80072a8 <power_off>
	}

	return Stat;
 800764e:	4b03      	ldr	r3, [pc, #12]	; (800765c <disk_initialize+0x1b0>)
 8007650:	781b      	ldrb	r3, [r3, #0]
 8007652:	b2db      	uxtb	r3, r3
}
 8007654:	4618      	mov	r0, r3
 8007656:	3714      	adds	r7, #20
 8007658:	46bd      	mov	sp, r7
 800765a:	bd90      	pop	{r4, r7, pc}
 800765c:	2000000c 	.word	0x2000000c
 8007660:	40020400 	.word	0x40020400
 8007664:	20000488 	.word	0x20000488
 8007668:	20000490 	.word	0x20000490

0800766c <disk_status>:
*/
/**************************************************************************/
DSTATUS disk_status (
	uint8_t drv		/* Physical drive number (0) */
)
{
 800766c:	b480      	push	{r7}
 800766e:	b083      	sub	sp, #12
 8007670:	af00      	add	r7, sp, #0
 8007672:	4603      	mov	r3, r0
 8007674:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only single drive */
 8007676:	79fb      	ldrb	r3, [r7, #7]
 8007678:	2b00      	cmp	r3, #0
 800767a:	d001      	beq.n	8007680 <disk_status+0x14>
 800767c:	2301      	movs	r3, #1
 800767e:	e002      	b.n	8007686 <disk_status+0x1a>
	return Stat;
 8007680:	4b04      	ldr	r3, [pc, #16]	; (8007694 <disk_status+0x28>)
 8007682:	781b      	ldrb	r3, [r3, #0]
 8007684:	b2db      	uxtb	r3, r3
}
 8007686:	4618      	mov	r0, r3
 8007688:	370c      	adds	r7, #12
 800768a:	46bd      	mov	sp, r7
 800768c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007690:	4770      	bx	lr
 8007692:	bf00      	nop
 8007694:	2000000c 	.word	0x2000000c

08007698 <disk_read>:
	uint8_t drv,			/* Physical drive number (0) */
	uint8_t *buff,			/* Pointer to the data buffer to store read data */
	uint32_t sector,		/* Start sector number (LBA) */
	uint8_t count			/* Sector count (1..255) */
)
{
 8007698:	b580      	push	{r7, lr}
 800769a:	b084      	sub	sp, #16
 800769c:	af00      	add	r7, sp, #0
 800769e:	60b9      	str	r1, [r7, #8]
 80076a0:	607a      	str	r2, [r7, #4]
 80076a2:	461a      	mov	r2, r3
 80076a4:	4603      	mov	r3, r0
 80076a6:	73fb      	strb	r3, [r7, #15]
 80076a8:	4613      	mov	r3, r2
 80076aa:	73bb      	strb	r3, [r7, #14]
	if (drv || !count) return RES_PARERR;
 80076ac:	7bfb      	ldrb	r3, [r7, #15]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d102      	bne.n	80076b8 <disk_read+0x20>
 80076b2:	7bbb      	ldrb	r3, [r7, #14]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d101      	bne.n	80076bc <disk_read+0x24>
 80076b8:	2304      	movs	r3, #4
 80076ba:	e04d      	b.n	8007758 <disk_read+0xc0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 80076bc:	4b28      	ldr	r3, [pc, #160]	; (8007760 <disk_read+0xc8>)
 80076be:	781b      	ldrb	r3, [r3, #0]
 80076c0:	b2db      	uxtb	r3, r3
 80076c2:	f003 0301 	and.w	r3, r3, #1
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d001      	beq.n	80076ce <disk_read+0x36>
 80076ca:	2303      	movs	r3, #3
 80076cc:	e044      	b.n	8007758 <disk_read+0xc0>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */
 80076ce:	4b25      	ldr	r3, [pc, #148]	; (8007764 <disk_read+0xcc>)
 80076d0:	781b      	ldrb	r3, [r3, #0]
 80076d2:	f003 0308 	and.w	r3, r3, #8
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d102      	bne.n	80076e0 <disk_read+0x48>
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	025b      	lsls	r3, r3, #9
 80076de:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single block read */
 80076e0:	7bbb      	ldrb	r3, [r7, #14]
 80076e2:	2b01      	cmp	r3, #1
 80076e4:	d111      	bne.n	800770a <disk_read+0x72>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 80076e6:	6879      	ldr	r1, [r7, #4]
 80076e8:	2011      	movs	r0, #17
 80076ea:	f7ff fe74 	bl	80073d6 <send_cmd>
 80076ee:	4603      	mov	r3, r0
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d129      	bne.n	8007748 <disk_read+0xb0>
			&& rcvr_datablock(buff, 512))
 80076f4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80076f8:	68b8      	ldr	r0, [r7, #8]
 80076fa:	f7ff fde1 	bl	80072c0 <rcvr_datablock>
 80076fe:	4603      	mov	r3, r0
 8007700:	2b00      	cmp	r3, #0
 8007702:	d021      	beq.n	8007748 <disk_read+0xb0>
			count = 0;
 8007704:	2300      	movs	r3, #0
 8007706:	73bb      	strb	r3, [r7, #14]
 8007708:	e01e      	b.n	8007748 <disk_read+0xb0>
	}
	else {				/* Multiple block read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 800770a:	6879      	ldr	r1, [r7, #4]
 800770c:	2012      	movs	r0, #18
 800770e:	f7ff fe62 	bl	80073d6 <send_cmd>
 8007712:	4603      	mov	r3, r0
 8007714:	2b00      	cmp	r3, #0
 8007716:	d117      	bne.n	8007748 <disk_read+0xb0>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 8007718:	f44f 7100 	mov.w	r1, #512	; 0x200
 800771c:	68b8      	ldr	r0, [r7, #8]
 800771e:	f7ff fdcf 	bl	80072c0 <rcvr_datablock>
 8007722:	4603      	mov	r3, r0
 8007724:	2b00      	cmp	r3, #0
 8007726:	d00a      	beq.n	800773e <disk_read+0xa6>
				buff += 512;
 8007728:	68bb      	ldr	r3, [r7, #8]
 800772a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800772e:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8007730:	7bbb      	ldrb	r3, [r7, #14]
 8007732:	3b01      	subs	r3, #1
 8007734:	73bb      	strb	r3, [r7, #14]
 8007736:	7bbb      	ldrb	r3, [r7, #14]
 8007738:	2b00      	cmp	r3, #0
 800773a:	d1ed      	bne.n	8007718 <disk_read+0x80>
 800773c:	e000      	b.n	8007740 <disk_read+0xa8>
				if (!rcvr_datablock(buff, 512)) break;
 800773e:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8007740:	2100      	movs	r1, #0
 8007742:	200c      	movs	r0, #12
 8007744:	f7ff fe47 	bl	80073d6 <send_cmd>
		}
	}
	deselect();
 8007748:	f7ff fd5e 	bl	8007208 <deselect>

	return count ? RES_ERROR : RES_OK;
 800774c:	7bbb      	ldrb	r3, [r7, #14]
 800774e:	2b00      	cmp	r3, #0
 8007750:	bf14      	ite	ne
 8007752:	2301      	movne	r3, #1
 8007754:	2300      	moveq	r3, #0
 8007756:	b2db      	uxtb	r3, r3
}
 8007758:	4618      	mov	r0, r3
 800775a:	3710      	adds	r7, #16
 800775c:	46bd      	mov	sp, r7
 800775e:	bd80      	pop	{r7, pc}
 8007760:	2000000c 	.word	0x2000000c
 8007764:	20000490 	.word	0x20000490

08007768 <disk_write>:
	uint8_t  drv,			/* Physical drive number (0) */
	const    uint8_t *buff,	/* Pointer to the data to be written */
	uint32_t sector,		/* Start sector number (LBA) */
	uint8_t  count			/* Sector count (1..255) */
)
{
 8007768:	b580      	push	{r7, lr}
 800776a:	b084      	sub	sp, #16
 800776c:	af00      	add	r7, sp, #0
 800776e:	60b9      	str	r1, [r7, #8]
 8007770:	607a      	str	r2, [r7, #4]
 8007772:	461a      	mov	r2, r3
 8007774:	4603      	mov	r3, r0
 8007776:	73fb      	strb	r3, [r7, #15]
 8007778:	4613      	mov	r3, r2
 800777a:	73bb      	strb	r3, [r7, #14]
	if (drv || !count) return RES_PARERR;
 800777c:	7bfb      	ldrb	r3, [r7, #15]
 800777e:	2b00      	cmp	r3, #0
 8007780:	d102      	bne.n	8007788 <disk_write+0x20>
 8007782:	7bbb      	ldrb	r3, [r7, #14]
 8007784:	2b00      	cmp	r3, #0
 8007786:	d101      	bne.n	800778c <disk_write+0x24>
 8007788:	2304      	movs	r3, #4
 800778a:	e064      	b.n	8007856 <disk_write+0xee>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 800778c:	4b34      	ldr	r3, [pc, #208]	; (8007860 <disk_write+0xf8>)
 800778e:	781b      	ldrb	r3, [r3, #0]
 8007790:	b2db      	uxtb	r3, r3
 8007792:	f003 0301 	and.w	r3, r3, #1
 8007796:	2b00      	cmp	r3, #0
 8007798:	d001      	beq.n	800779e <disk_write+0x36>
 800779a:	2303      	movs	r3, #3
 800779c:	e05b      	b.n	8007856 <disk_write+0xee>
	if (Stat & STA_PROTECT) return RES_WRPRT;
 800779e:	4b30      	ldr	r3, [pc, #192]	; (8007860 <disk_write+0xf8>)
 80077a0:	781b      	ldrb	r3, [r3, #0]
 80077a2:	b2db      	uxtb	r3, r3
 80077a4:	f003 0304 	and.w	r3, r3, #4
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d001      	beq.n	80077b0 <disk_write+0x48>
 80077ac:	2302      	movs	r3, #2
 80077ae:	e052      	b.n	8007856 <disk_write+0xee>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */
 80077b0:	4b2c      	ldr	r3, [pc, #176]	; (8007864 <disk_write+0xfc>)
 80077b2:	781b      	ldrb	r3, [r3, #0]
 80077b4:	f003 0308 	and.w	r3, r3, #8
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d102      	bne.n	80077c2 <disk_write+0x5a>
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	025b      	lsls	r3, r3, #9
 80077c0:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single block write */
 80077c2:	7bbb      	ldrb	r3, [r7, #14]
 80077c4:	2b01      	cmp	r3, #1
 80077c6:	d110      	bne.n	80077ea <disk_write+0x82>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 80077c8:	6879      	ldr	r1, [r7, #4]
 80077ca:	2018      	movs	r0, #24
 80077cc:	f7ff fe03 	bl	80073d6 <send_cmd>
 80077d0:	4603      	mov	r3, r0
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d137      	bne.n	8007846 <disk_write+0xde>
			&& xmit_datablock(buff, 0xFE))
 80077d6:	21fe      	movs	r1, #254	; 0xfe
 80077d8:	68b8      	ldr	r0, [r7, #8]
 80077da:	f7ff fdbb 	bl	8007354 <xmit_datablock>
 80077de:	4603      	mov	r3, r0
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d030      	beq.n	8007846 <disk_write+0xde>
			count = 0;
 80077e4:	2300      	movs	r3, #0
 80077e6:	73bb      	strb	r3, [r7, #14]
 80077e8:	e02d      	b.n	8007846 <disk_write+0xde>
	}
	else {				/* Multiple block write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);
 80077ea:	4b1e      	ldr	r3, [pc, #120]	; (8007864 <disk_write+0xfc>)
 80077ec:	781b      	ldrb	r3, [r3, #0]
 80077ee:	f003 0306 	and.w	r3, r3, #6
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d004      	beq.n	8007800 <disk_write+0x98>
 80077f6:	7bbb      	ldrb	r3, [r7, #14]
 80077f8:	4619      	mov	r1, r3
 80077fa:	2097      	movs	r0, #151	; 0x97
 80077fc:	f7ff fdeb 	bl	80073d6 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 8007800:	6879      	ldr	r1, [r7, #4]
 8007802:	2019      	movs	r0, #25
 8007804:	f7ff fde7 	bl	80073d6 <send_cmd>
 8007808:	4603      	mov	r3, r0
 800780a:	2b00      	cmp	r3, #0
 800780c:	d11b      	bne.n	8007846 <disk_write+0xde>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 800780e:	21fc      	movs	r1, #252	; 0xfc
 8007810:	68b8      	ldr	r0, [r7, #8]
 8007812:	f7ff fd9f 	bl	8007354 <xmit_datablock>
 8007816:	4603      	mov	r3, r0
 8007818:	2b00      	cmp	r3, #0
 800781a:	d00a      	beq.n	8007832 <disk_write+0xca>
				buff += 512;
 800781c:	68bb      	ldr	r3, [r7, #8]
 800781e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8007822:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8007824:	7bbb      	ldrb	r3, [r7, #14]
 8007826:	3b01      	subs	r3, #1
 8007828:	73bb      	strb	r3, [r7, #14]
 800782a:	7bbb      	ldrb	r3, [r7, #14]
 800782c:	2b00      	cmp	r3, #0
 800782e:	d1ee      	bne.n	800780e <disk_write+0xa6>
 8007830:	e000      	b.n	8007834 <disk_write+0xcc>
				if (!xmit_datablock(buff, 0xFC)) break;
 8007832:	bf00      	nop
			if (!xmit_datablock(0, 0xFD))	/* STOP_TRAN token */
 8007834:	21fd      	movs	r1, #253	; 0xfd
 8007836:	2000      	movs	r0, #0
 8007838:	f7ff fd8c 	bl	8007354 <xmit_datablock>
 800783c:	4603      	mov	r3, r0
 800783e:	2b00      	cmp	r3, #0
 8007840:	d101      	bne.n	8007846 <disk_write+0xde>
				count = 1;
 8007842:	2301      	movs	r3, #1
 8007844:	73bb      	strb	r3, [r7, #14]
		}
	}
	deselect();
 8007846:	f7ff fcdf 	bl	8007208 <deselect>

	return count ? RES_ERROR : RES_OK;
 800784a:	7bbb      	ldrb	r3, [r7, #14]
 800784c:	2b00      	cmp	r3, #0
 800784e:	bf14      	ite	ne
 8007850:	2301      	movne	r3, #1
 8007852:	2300      	moveq	r3, #0
 8007854:	b2db      	uxtb	r3, r3
}
 8007856:	4618      	mov	r0, r3
 8007858:	3710      	adds	r7, #16
 800785a:	46bd      	mov	sp, r7
 800785c:	bd80      	pop	{r7, pc}
 800785e:	bf00      	nop
 8007860:	2000000c 	.word	0x2000000c
 8007864:	20000490 	.word	0x20000490

08007868 <disk_ioctl>:
DRESULT disk_ioctl (
	uint8_t drv,		/* Physical drive number (0) */
	uint8_t ctrl,		/* Control code */
	void    *buff		/* Buffer to send/receive control data */
)
{
 8007868:	b590      	push	{r4, r7, lr}
 800786a:	b089      	sub	sp, #36	; 0x24
 800786c:	af00      	add	r7, sp, #0
 800786e:	4603      	mov	r3, r0
 8007870:	603a      	str	r2, [r7, #0]
 8007872:	71fb      	strb	r3, [r7, #7]
 8007874:	460b      	mov	r3, r1
 8007876:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, *ptr = buff;
 8007878:	683b      	ldr	r3, [r7, #0]
 800787a:	61bb      	str	r3, [r7, #24]
	/*uint8_t csd[16];*/ /* local variable(CCRAM region) cannot DMA! */
	uint32_t *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 800787c:	79fb      	ldrb	r3, [r7, #7]
 800787e:	2b00      	cmp	r3, #0
 8007880:	d001      	beq.n	8007886 <disk_ioctl+0x1e>
 8007882:	2304      	movs	r3, #4
 8007884:	e1f6      	b.n	8007c74 <disk_ioctl+0x40c>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8007886:	4b97      	ldr	r3, [pc, #604]	; (8007ae4 <disk_ioctl+0x27c>)
 8007888:	781b      	ldrb	r3, [r3, #0]
 800788a:	b2db      	uxtb	r3, r3
 800788c:	f003 0301 	and.w	r3, r3, #1
 8007890:	2b00      	cmp	r3, #0
 8007892:	d001      	beq.n	8007898 <disk_ioctl+0x30>
 8007894:	2303      	movs	r3, #3
 8007896:	e1ed      	b.n	8007c74 <disk_ioctl+0x40c>

	res = RES_ERROR;
 8007898:	2301      	movs	r3, #1
 800789a:	77fb      	strb	r3, [r7, #31]

	switch (ctrl) {
 800789c:	79bb      	ldrb	r3, [r7, #6]
 800789e:	2b0e      	cmp	r3, #14
 80078a0:	f200 81cd 	bhi.w	8007c3e <disk_ioctl+0x3d6>
 80078a4:	a201      	add	r2, pc, #4	; (adr r2, 80078ac <disk_ioctl+0x44>)
 80078a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078aa:	bf00      	nop
 80078ac:	0800791d 	.word	0x0800791d
 80078b0:	08007933 	.word	0x08007933
 80078b4:	080079e9 	.word	0x080079e9
 80078b8:	080079f7 	.word	0x080079f7
 80078bc:	08007af1 	.word	0x08007af1
 80078c0:	080078e9 	.word	0x080078e9
 80078c4:	08007c3f 	.word	0x08007c3f
 80078c8:	08007c3f 	.word	0x08007c3f
 80078cc:	08007c3f 	.word	0x08007c3f
 80078d0:	08007c3f 	.word	0x08007c3f
 80078d4:	08007b93 	.word	0x08007b93
 80078d8:	08007ba1 	.word	0x08007ba1
 80078dc:	08007bc3 	.word	0x08007bc3
 80078e0:	08007be5 	.word	0x08007be5
 80078e4:	08007c19 	.word	0x08007c19

	case CTRL_POWER :
		switch (ptr[0]) {
 80078e8:	69bb      	ldr	r3, [r7, #24]
 80078ea:	781b      	ldrb	r3, [r3, #0]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d002      	beq.n	80078f6 <disk_ioctl+0x8e>
 80078f0:	2b01      	cmp	r3, #1
 80078f2:	d005      	beq.n	8007900 <disk_ioctl+0x98>
 80078f4:	e00e      	b.n	8007914 <disk_ioctl+0xac>
		case 0:		/* Sub control code (POWER_OFF) */
			power_off();		/* Power off */
 80078f6:	f7ff fcd7 	bl	80072a8 <power_off>
			res = RES_OK;
 80078fa:	2300      	movs	r3, #0
 80078fc:	77fb      	strb	r3, [r7, #31]
			break;
 80078fe:	e00c      	b.n	800791a <disk_ioctl+0xb2>
		case 1:		/* Sub control code (POWER_GET) */
			ptr[1] = (uint8_t)power_status();
 8007900:	f7ff fca6 	bl	8007250 <power_status>
 8007904:	4602      	mov	r2, r0
 8007906:	69bb      	ldr	r3, [r7, #24]
 8007908:	3301      	adds	r3, #1
 800790a:	b2d2      	uxtb	r2, r2
 800790c:	701a      	strb	r2, [r3, #0]
			res = RES_OK;
 800790e:	2300      	movs	r3, #0
 8007910:	77fb      	strb	r3, [r7, #31]
			break;
 8007912:	e002      	b.n	800791a <disk_ioctl+0xb2>
		default :
			res = RES_PARERR;
 8007914:	2304      	movs	r3, #4
 8007916:	77fb      	strb	r3, [r7, #31]
		}
		break;
 8007918:	e1a9      	b.n	8007c6e <disk_ioctl+0x406>
 800791a:	e1a8      	b.n	8007c6e <disk_ioctl+0x406>

	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (selecting()) {
 800791c:	f7ff fc82 	bl	8007224 <selecting>
 8007920:	4603      	mov	r3, r0
 8007922:	2b00      	cmp	r3, #0
 8007924:	f000 818e 	beq.w	8007c44 <disk_ioctl+0x3dc>
			deselect();
 8007928:	f7ff fc6e 	bl	8007208 <deselect>
			res = RES_OK;
 800792c:	2300      	movs	r3, #0
 800792e:	77fb      	strb	r3, [r7, #31]
		}
		break;
 8007930:	e188      	b.n	8007c44 <disk_ioctl+0x3dc>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (uint32_t) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8007932:	2100      	movs	r1, #0
 8007934:	2009      	movs	r0, #9
 8007936:	f7ff fd4e 	bl	80073d6 <send_cmd>
 800793a:	4603      	mov	r3, r0
 800793c:	2b00      	cmp	r3, #0
 800793e:	f040 8183 	bne.w	8007c48 <disk_ioctl+0x3e0>
 8007942:	2110      	movs	r1, #16
 8007944:	4868      	ldr	r0, [pc, #416]	; (8007ae8 <disk_ioctl+0x280>)
 8007946:	f7ff fcbb 	bl	80072c0 <rcvr_datablock>
 800794a:	4603      	mov	r3, r0
 800794c:	2b00      	cmp	r3, #0
 800794e:	f000 817b 	beq.w	8007c48 <disk_ioctl+0x3e0>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8007952:	4b65      	ldr	r3, [pc, #404]	; (8007ae8 <disk_ioctl+0x280>)
 8007954:	781b      	ldrb	r3, [r3, #0]
 8007956:	099b      	lsrs	r3, r3, #6
 8007958:	b2db      	uxtb	r3, r3
 800795a:	2b01      	cmp	r3, #1
 800795c:	d114      	bne.n	8007988 <disk_ioctl+0x120>
				csize = csd[9] + ((uint16_t)csd[8] << 8) + ((uint32_t)(csd[7] & 63) << 16) + 1;
 800795e:	4b62      	ldr	r3, [pc, #392]	; (8007ae8 <disk_ioctl+0x280>)
 8007960:	7a5b      	ldrb	r3, [r3, #9]
 8007962:	461a      	mov	r2, r3
 8007964:	4b60      	ldr	r3, [pc, #384]	; (8007ae8 <disk_ioctl+0x280>)
 8007966:	7a1b      	ldrb	r3, [r3, #8]
 8007968:	021b      	lsls	r3, r3, #8
 800796a:	4413      	add	r3, r2
 800796c:	461a      	mov	r2, r3
 800796e:	4b5e      	ldr	r3, [pc, #376]	; (8007ae8 <disk_ioctl+0x280>)
 8007970:	79db      	ldrb	r3, [r3, #7]
 8007972:	041b      	lsls	r3, r3, #16
 8007974:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 8007978:	4413      	add	r3, r2
 800797a:	3301      	adds	r3, #1
 800797c:	60bb      	str	r3, [r7, #8]
				*(uint32_t*)buff = csize << 10;
 800797e:	68bb      	ldr	r3, [r7, #8]
 8007980:	029a      	lsls	r2, r3, #10
 8007982:	683b      	ldr	r3, [r7, #0]
 8007984:	601a      	str	r2, [r3, #0]
 8007986:	e02c      	b.n	80079e2 <disk_ioctl+0x17a>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8007988:	4b57      	ldr	r3, [pc, #348]	; (8007ae8 <disk_ioctl+0x280>)
 800798a:	795b      	ldrb	r3, [r3, #5]
 800798c:	f003 030f 	and.w	r3, r3, #15
 8007990:	b2da      	uxtb	r2, r3
 8007992:	4b55      	ldr	r3, [pc, #340]	; (8007ae8 <disk_ioctl+0x280>)
 8007994:	7a9b      	ldrb	r3, [r3, #10]
 8007996:	09db      	lsrs	r3, r3, #7
 8007998:	b2db      	uxtb	r3, r3
 800799a:	4413      	add	r3, r2
 800799c:	b2da      	uxtb	r2, r3
 800799e:	4b52      	ldr	r3, [pc, #328]	; (8007ae8 <disk_ioctl+0x280>)
 80079a0:	7a5b      	ldrb	r3, [r3, #9]
 80079a2:	005b      	lsls	r3, r3, #1
 80079a4:	b2db      	uxtb	r3, r3
 80079a6:	f003 0306 	and.w	r3, r3, #6
 80079aa:	b2db      	uxtb	r3, r3
 80079ac:	4413      	add	r3, r2
 80079ae:	b2db      	uxtb	r3, r3
 80079b0:	3302      	adds	r3, #2
 80079b2:	77bb      	strb	r3, [r7, #30]
				csize = (csd[8] >> 6) + ((uint16_t)csd[7] << 2) + ((uint16_t)(csd[6] & 3) << 10) + 1;
 80079b4:	4b4c      	ldr	r3, [pc, #304]	; (8007ae8 <disk_ioctl+0x280>)
 80079b6:	7a1b      	ldrb	r3, [r3, #8]
 80079b8:	099b      	lsrs	r3, r3, #6
 80079ba:	b2db      	uxtb	r3, r3
 80079bc:	461a      	mov	r2, r3
 80079be:	4b4a      	ldr	r3, [pc, #296]	; (8007ae8 <disk_ioctl+0x280>)
 80079c0:	79db      	ldrb	r3, [r3, #7]
 80079c2:	009b      	lsls	r3, r3, #2
 80079c4:	441a      	add	r2, r3
 80079c6:	4b48      	ldr	r3, [pc, #288]	; (8007ae8 <disk_ioctl+0x280>)
 80079c8:	799b      	ldrb	r3, [r3, #6]
 80079ca:	029b      	lsls	r3, r3, #10
 80079cc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80079d0:	4413      	add	r3, r2
 80079d2:	3301      	adds	r3, #1
 80079d4:	60bb      	str	r3, [r7, #8]
				*(uint32_t*)buff = csize << (n - 9);
 80079d6:	7fbb      	ldrb	r3, [r7, #30]
 80079d8:	3b09      	subs	r3, #9
 80079da:	68ba      	ldr	r2, [r7, #8]
 80079dc:	409a      	lsls	r2, r3
 80079de:	683b      	ldr	r3, [r7, #0]
 80079e0:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 80079e2:	2300      	movs	r3, #0
 80079e4:	77fb      	strb	r3, [r7, #31]
		}
		break;
 80079e6:	e12f      	b.n	8007c48 <disk_ioctl+0x3e0>

	case GET_SECTOR_SIZE :	/* Get sector size in unit of byte (uint16_t) */
		*(uint16_t*)buff = 512;
 80079e8:	683b      	ldr	r3, [r7, #0]
 80079ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80079ee:	801a      	strh	r2, [r3, #0]
		res = RES_OK;
 80079f0:	2300      	movs	r3, #0
 80079f2:	77fb      	strb	r3, [r7, #31]
		break;
 80079f4:	e13b      	b.n	8007c6e <disk_ioctl+0x406>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (uint32_t) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 80079f6:	4b3d      	ldr	r3, [pc, #244]	; (8007aec <disk_ioctl+0x284>)
 80079f8:	781b      	ldrb	r3, [r3, #0]
 80079fa:	f003 0304 	and.w	r3, r3, #4
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d029      	beq.n	8007a56 <disk_ioctl+0x1ee>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8007a02:	2100      	movs	r1, #0
 8007a04:	208d      	movs	r0, #141	; 0x8d
 8007a06:	f7ff fce6 	bl	80073d6 <send_cmd>
 8007a0a:	4603      	mov	r3, r0
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	f040 811d 	bne.w	8007c4c <disk_ioctl+0x3e4>
				rcvr_spi();
 8007a12:	f7ff fbd5 	bl	80071c0 <rcvr_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 8007a16:	2110      	movs	r1, #16
 8007a18:	4833      	ldr	r0, [pc, #204]	; (8007ae8 <disk_ioctl+0x280>)
 8007a1a:	f7ff fc51 	bl	80072c0 <rcvr_datablock>
 8007a1e:	4603      	mov	r3, r0
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	f000 8113 	beq.w	8007c4c <disk_ioctl+0x3e4>
					for (n = 64 - 16; n; n--) rcvr_spi();	/* Purge trailing data */
 8007a26:	2330      	movs	r3, #48	; 0x30
 8007a28:	77bb      	strb	r3, [r7, #30]
 8007a2a:	e004      	b.n	8007a36 <disk_ioctl+0x1ce>
 8007a2c:	f7ff fbc8 	bl	80071c0 <rcvr_spi>
 8007a30:	7fbb      	ldrb	r3, [r7, #30]
 8007a32:	3b01      	subs	r3, #1
 8007a34:	77bb      	strb	r3, [r7, #30]
 8007a36:	7fbb      	ldrb	r3, [r7, #30]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d1f7      	bne.n	8007a2c <disk_ioctl+0x1c4>
					*(uint32_t*)buff = 16UL << (csd[10] >> 4);
 8007a3c:	4b2a      	ldr	r3, [pc, #168]	; (8007ae8 <disk_ioctl+0x280>)
 8007a3e:	7a9b      	ldrb	r3, [r3, #10]
 8007a40:	091b      	lsrs	r3, r3, #4
 8007a42:	b2db      	uxtb	r3, r3
 8007a44:	461a      	mov	r2, r3
 8007a46:	2310      	movs	r3, #16
 8007a48:	fa03 f202 	lsl.w	r2, r3, r2
 8007a4c:	683b      	ldr	r3, [r7, #0]
 8007a4e:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 8007a50:	2300      	movs	r3, #0
 8007a52:	77fb      	strb	r3, [r7, #31]
					*(uint32_t*)buff = ((uint16_t)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 8007a54:	e0fa      	b.n	8007c4c <disk_ioctl+0x3e4>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 8007a56:	2100      	movs	r1, #0
 8007a58:	2009      	movs	r0, #9
 8007a5a:	f7ff fcbc 	bl	80073d6 <send_cmd>
 8007a5e:	4603      	mov	r3, r0
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	f040 80f3 	bne.w	8007c4c <disk_ioctl+0x3e4>
 8007a66:	2110      	movs	r1, #16
 8007a68:	481f      	ldr	r0, [pc, #124]	; (8007ae8 <disk_ioctl+0x280>)
 8007a6a:	f7ff fc29 	bl	80072c0 <rcvr_datablock>
 8007a6e:	4603      	mov	r3, r0
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	f000 80eb 	beq.w	8007c4c <disk_ioctl+0x3e4>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8007a76:	4b1d      	ldr	r3, [pc, #116]	; (8007aec <disk_ioctl+0x284>)
 8007a78:	781b      	ldrb	r3, [r3, #0]
 8007a7a:	f003 0302 	and.w	r3, r3, #2
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d015      	beq.n	8007aae <disk_ioctl+0x246>
					*(uint32_t*)buff = (((csd[10] & 63) << 1) + ((uint16_t)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8007a82:	4b19      	ldr	r3, [pc, #100]	; (8007ae8 <disk_ioctl+0x280>)
 8007a84:	7a9b      	ldrb	r3, [r3, #10]
 8007a86:	005b      	lsls	r3, r3, #1
 8007a88:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8007a8c:	4a16      	ldr	r2, [pc, #88]	; (8007ae8 <disk_ioctl+0x280>)
 8007a8e:	7ad2      	ldrb	r2, [r2, #11]
 8007a90:	09d2      	lsrs	r2, r2, #7
 8007a92:	b2d2      	uxtb	r2, r2
 8007a94:	4413      	add	r3, r2
 8007a96:	1c5a      	adds	r2, r3, #1
 8007a98:	4b13      	ldr	r3, [pc, #76]	; (8007ae8 <disk_ioctl+0x280>)
 8007a9a:	7b5b      	ldrb	r3, [r3, #13]
 8007a9c:	099b      	lsrs	r3, r3, #6
 8007a9e:	b2db      	uxtb	r3, r3
 8007aa0:	3b01      	subs	r3, #1
 8007aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8007aa6:	461a      	mov	r2, r3
 8007aa8:	683b      	ldr	r3, [r7, #0]
 8007aaa:	601a      	str	r2, [r3, #0]
 8007aac:	e016      	b.n	8007adc <disk_ioctl+0x274>
					*(uint32_t*)buff = ((uint16_t)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 8007aae:	4b0e      	ldr	r3, [pc, #56]	; (8007ae8 <disk_ioctl+0x280>)
 8007ab0:	7a9b      	ldrb	r3, [r3, #10]
 8007ab2:	109b      	asrs	r3, r3, #2
 8007ab4:	b29b      	uxth	r3, r3
 8007ab6:	f003 031f 	and.w	r3, r3, #31
 8007aba:	3301      	adds	r3, #1
 8007abc:	4a0a      	ldr	r2, [pc, #40]	; (8007ae8 <disk_ioctl+0x280>)
 8007abe:	7ad2      	ldrb	r2, [r2, #11]
 8007ac0:	00d2      	lsls	r2, r2, #3
 8007ac2:	f002 0218 	and.w	r2, r2, #24
 8007ac6:	4908      	ldr	r1, [pc, #32]	; (8007ae8 <disk_ioctl+0x280>)
 8007ac8:	7ac9      	ldrb	r1, [r1, #11]
 8007aca:	0949      	lsrs	r1, r1, #5
 8007acc:	b2c9      	uxtb	r1, r1
 8007ace:	440a      	add	r2, r1
 8007ad0:	3201      	adds	r2, #1
 8007ad2:	fb02 f303 	mul.w	r3, r2, r3
 8007ad6:	461a      	mov	r2, r3
 8007ad8:	683b      	ldr	r3, [r7, #0]
 8007ada:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 8007adc:	2300      	movs	r3, #0
 8007ade:	77fb      	strb	r3, [r7, #31]
		break;
 8007ae0:	e0b4      	b.n	8007c4c <disk_ioctl+0x3e4>
 8007ae2:	bf00      	nop
 8007ae4:	2000000c 	.word	0x2000000c
 8007ae8:	20001364 	.word	0x20001364
 8007aec:	20000490 	.word	0x20000490

	case CTRL_ERASE_SECTOR :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8007af0:	4b62      	ldr	r3, [pc, #392]	; (8007c7c <disk_ioctl+0x414>)
 8007af2:	781b      	ldrb	r3, [r3, #0]
 8007af4:	f003 0306 	and.w	r3, r3, #6
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	f000 80a9 	beq.w	8007c50 <disk_ioctl+0x3e8>
		if (disk_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8007afe:	79fb      	ldrb	r3, [r7, #7]
 8007b00:	4a5f      	ldr	r2, [pc, #380]	; (8007c80 <disk_ioctl+0x418>)
 8007b02:	210b      	movs	r1, #11
 8007b04:	4618      	mov	r0, r3
 8007b06:	f7ff feaf 	bl	8007868 <disk_ioctl>
 8007b0a:	4603      	mov	r3, r0
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	f040 80a1 	bne.w	8007c54 <disk_ioctl+0x3ec>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8007b12:	4b5b      	ldr	r3, [pc, #364]	; (8007c80 <disk_ioctl+0x418>)
 8007b14:	781b      	ldrb	r3, [r3, #0]
 8007b16:	099b      	lsrs	r3, r3, #6
 8007b18:	b2db      	uxtb	r3, r3
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d106      	bne.n	8007b2c <disk_ioctl+0x2c4>
 8007b1e:	4b58      	ldr	r3, [pc, #352]	; (8007c80 <disk_ioctl+0x418>)
 8007b20:	7a9b      	ldrb	r3, [r3, #10]
 8007b22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	f000 8096 	beq.w	8007c58 <disk_ioctl+0x3f0>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 8007b2c:	683b      	ldr	r3, [r7, #0]
 8007b2e:	60fb      	str	r3, [r7, #12]
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	617b      	str	r3, [r7, #20]
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	685b      	ldr	r3, [r3, #4]
 8007b3a:	613b      	str	r3, [r7, #16]
		if (!(CardType & CT_BLOCK)) {
 8007b3c:	4b4f      	ldr	r3, [pc, #316]	; (8007c7c <disk_ioctl+0x414>)
 8007b3e:	781b      	ldrb	r3, [r3, #0]
 8007b40:	f003 0308 	and.w	r3, r3, #8
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d105      	bne.n	8007b54 <disk_ioctl+0x2ec>
			st *= 512; ed *= 512;
 8007b48:	697b      	ldr	r3, [r7, #20]
 8007b4a:	025b      	lsls	r3, r3, #9
 8007b4c:	617b      	str	r3, [r7, #20]
 8007b4e:	693b      	ldr	r3, [r7, #16]
 8007b50:	025b      	lsls	r3, r3, #9
 8007b52:	613b      	str	r3, [r7, #16]
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(3000))	/* Erase sector block */
 8007b54:	6979      	ldr	r1, [r7, #20]
 8007b56:	2020      	movs	r0, #32
 8007b58:	f7ff fc3d 	bl	80073d6 <send_cmd>
 8007b5c:	4603      	mov	r3, r0
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d17c      	bne.n	8007c5c <disk_ioctl+0x3f4>
 8007b62:	6939      	ldr	r1, [r7, #16]
 8007b64:	2021      	movs	r0, #33	; 0x21
 8007b66:	f7ff fc36 	bl	80073d6 <send_cmd>
 8007b6a:	4603      	mov	r3, r0
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d175      	bne.n	8007c5c <disk_ioctl+0x3f4>
 8007b70:	2100      	movs	r1, #0
 8007b72:	2026      	movs	r0, #38	; 0x26
 8007b74:	f7ff fc2f 	bl	80073d6 <send_cmd>
 8007b78:	4603      	mov	r3, r0
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d16e      	bne.n	8007c5c <disk_ioctl+0x3f4>
 8007b7e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8007b82:	f7ff fb25 	bl	80071d0 <wait_ready>
 8007b86:	4603      	mov	r3, r0
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d067      	beq.n	8007c5c <disk_ioctl+0x3f4>
			res = RES_OK;	/* FatFs does not check result of this command */
 8007b8c:	2300      	movs	r3, #0
 8007b8e:	77fb      	strb	r3, [r7, #31]
		break;
 8007b90:	e064      	b.n	8007c5c <disk_ioctl+0x3f4>

	/* Following command are not used by FatFs module */

	case MMC_GET_TYPE :		/* Get MMC/SDC type (uint8_t) */
		*ptr = CardType;
 8007b92:	4b3a      	ldr	r3, [pc, #232]	; (8007c7c <disk_ioctl+0x414>)
 8007b94:	781a      	ldrb	r2, [r3, #0]
 8007b96:	69bb      	ldr	r3, [r7, #24]
 8007b98:	701a      	strb	r2, [r3, #0]
		res = RES_OK;
 8007b9a:	2300      	movs	r3, #0
 8007b9c:	77fb      	strb	r3, [r7, #31]
		break;
 8007b9e:	e066      	b.n	8007c6e <disk_ioctl+0x406>

	case MMC_GET_CSD :		/* Read CSD (16 bytes) */
		if (send_cmd(CMD9, 0) == 0		/* READ_CSD */
 8007ba0:	2100      	movs	r1, #0
 8007ba2:	2009      	movs	r0, #9
 8007ba4:	f7ff fc17 	bl	80073d6 <send_cmd>
 8007ba8:	4603      	mov	r3, r0
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d158      	bne.n	8007c60 <disk_ioctl+0x3f8>
			&& rcvr_datablock(ptr, 16))
 8007bae:	2110      	movs	r1, #16
 8007bb0:	69b8      	ldr	r0, [r7, #24]
 8007bb2:	f7ff fb85 	bl	80072c0 <rcvr_datablock>
 8007bb6:	4603      	mov	r3, r0
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d051      	beq.n	8007c60 <disk_ioctl+0x3f8>
			res = RES_OK;
 8007bbc:	2300      	movs	r3, #0
 8007bbe:	77fb      	strb	r3, [r7, #31]
		break;
 8007bc0:	e04e      	b.n	8007c60 <disk_ioctl+0x3f8>

	case MMC_GET_CID :		/* Read CID (16 bytes) */
		if (send_cmd(CMD10, 0) == 0		/* READ_CID */
 8007bc2:	2100      	movs	r1, #0
 8007bc4:	200a      	movs	r0, #10
 8007bc6:	f7ff fc06 	bl	80073d6 <send_cmd>
 8007bca:	4603      	mov	r3, r0
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d149      	bne.n	8007c64 <disk_ioctl+0x3fc>
			&& rcvr_datablock(ptr, 16))
 8007bd0:	2110      	movs	r1, #16
 8007bd2:	69b8      	ldr	r0, [r7, #24]
 8007bd4:	f7ff fb74 	bl	80072c0 <rcvr_datablock>
 8007bd8:	4603      	mov	r3, r0
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d042      	beq.n	8007c64 <disk_ioctl+0x3fc>
			res = RES_OK;
 8007bde:	2300      	movs	r3, #0
 8007be0:	77fb      	strb	r3, [r7, #31]
		break;
 8007be2:	e03f      	b.n	8007c64 <disk_ioctl+0x3fc>

	case MMC_GET_OCR :		/* Read OCR (4 bytes) */
		if (send_cmd(CMD58, 0) == 0) {	/* READ_OCR */
 8007be4:	2100      	movs	r1, #0
 8007be6:	203a      	movs	r0, #58	; 0x3a
 8007be8:	f7ff fbf5 	bl	80073d6 <send_cmd>
 8007bec:	4603      	mov	r3, r0
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d13a      	bne.n	8007c68 <disk_ioctl+0x400>
			for (n = 4; n; n--) *ptr++ = rcvr_spi();
 8007bf2:	2304      	movs	r3, #4
 8007bf4:	77bb      	strb	r3, [r7, #30]
 8007bf6:	e009      	b.n	8007c0c <disk_ioctl+0x3a4>
 8007bf8:	69bc      	ldr	r4, [r7, #24]
 8007bfa:	1c63      	adds	r3, r4, #1
 8007bfc:	61bb      	str	r3, [r7, #24]
 8007bfe:	f7ff fadf 	bl	80071c0 <rcvr_spi>
 8007c02:	4603      	mov	r3, r0
 8007c04:	7023      	strb	r3, [r4, #0]
 8007c06:	7fbb      	ldrb	r3, [r7, #30]
 8007c08:	3b01      	subs	r3, #1
 8007c0a:	77bb      	strb	r3, [r7, #30]
 8007c0c:	7fbb      	ldrb	r3, [r7, #30]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d1f2      	bne.n	8007bf8 <disk_ioctl+0x390>
			res = RES_OK;
 8007c12:	2300      	movs	r3, #0
 8007c14:	77fb      	strb	r3, [r7, #31]
		}
		break;
 8007c16:	e027      	b.n	8007c68 <disk_ioctl+0x400>

	case MMC_GET_SDSTAT :	/* Read SD status (64 bytes) */
		if (send_cmd(ACMD13, 0) == 0) {	/* SD_STATUS */
 8007c18:	2100      	movs	r1, #0
 8007c1a:	208d      	movs	r0, #141	; 0x8d
 8007c1c:	f7ff fbdb 	bl	80073d6 <send_cmd>
 8007c20:	4603      	mov	r3, r0
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d122      	bne.n	8007c6c <disk_ioctl+0x404>
			rcvr_spi();
 8007c26:	f7ff facb 	bl	80071c0 <rcvr_spi>
			if (rcvr_datablock(ptr, 64))
 8007c2a:	2140      	movs	r1, #64	; 0x40
 8007c2c:	69b8      	ldr	r0, [r7, #24]
 8007c2e:	f7ff fb47 	bl	80072c0 <rcvr_datablock>
 8007c32:	4603      	mov	r3, r0
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d019      	beq.n	8007c6c <disk_ioctl+0x404>
				res = RES_OK;
 8007c38:	2300      	movs	r3, #0
 8007c3a:	77fb      	strb	r3, [r7, #31]
		}
		break;
 8007c3c:	e016      	b.n	8007c6c <disk_ioctl+0x404>

	default:
		res = RES_PARERR;
 8007c3e:	2304      	movs	r3, #4
 8007c40:	77fb      	strb	r3, [r7, #31]
 8007c42:	e014      	b.n	8007c6e <disk_ioctl+0x406>
		break;
 8007c44:	bf00      	nop
 8007c46:	e012      	b.n	8007c6e <disk_ioctl+0x406>
		break;
 8007c48:	bf00      	nop
 8007c4a:	e010      	b.n	8007c6e <disk_ioctl+0x406>
		break;
 8007c4c:	bf00      	nop
 8007c4e:	e00e      	b.n	8007c6e <disk_ioctl+0x406>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8007c50:	bf00      	nop
 8007c52:	e00c      	b.n	8007c6e <disk_ioctl+0x406>
		if (disk_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8007c54:	bf00      	nop
 8007c56:	e00a      	b.n	8007c6e <disk_ioctl+0x406>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8007c58:	bf00      	nop
 8007c5a:	e008      	b.n	8007c6e <disk_ioctl+0x406>
		break;
 8007c5c:	bf00      	nop
 8007c5e:	e006      	b.n	8007c6e <disk_ioctl+0x406>
		break;
 8007c60:	bf00      	nop
 8007c62:	e004      	b.n	8007c6e <disk_ioctl+0x406>
		break;
 8007c64:	bf00      	nop
 8007c66:	e002      	b.n	8007c6e <disk_ioctl+0x406>
		break;
 8007c68:	bf00      	nop
 8007c6a:	e000      	b.n	8007c6e <disk_ioctl+0x406>
		break;
 8007c6c:	bf00      	nop
	}

	deselect();
 8007c6e:	f7ff facb 	bl	8007208 <deselect>

	return res;
 8007c72:	7ffb      	ldrb	r3, [r7, #31]
}
 8007c74:	4618      	mov	r0, r3
 8007c76:	3724      	adds	r7, #36	; 0x24
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	bd90      	pop	{r4, r7, pc}
 8007c7c:	20000490 	.word	0x20000490
 8007c80:	20001364 	.word	0x20001364

08007c84 <get_fattime>:
/* This is a real time clock service to be called from     */
/* FatFs module. Any valid time must be returned even if   */
/* the system does not support a real time clock.          */

uint32_t get_fattime (void)
{
 8007c84:	b480      	push	{r7}
 8007c86:	af00      	add	r7, sp, #0

    return  ((2011UL-1980) << 25)    // Year = 2011
 8007c88:	4b02      	ldr	r3, [pc, #8]	; (8007c94 <get_fattime+0x10>)
            | (12U << 11)            // Hour = 12
            | (0U << 5)              // Min = 00
            | (0U >> 1)              // Sec = 00
            ;

}
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c92:	4770      	bx	lr
 8007c94:	3e216000 	.word	0x3e216000

08007c98 <clear_string>:
	  }
  }
}
//Функция удаления символов \r и \n из строки
void clear_string(char *src)
{
 8007c98:	b480      	push	{r7}
 8007c9a:	b085      	sub	sp, #20
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	6078      	str	r0, [r7, #4]
	char *dst = NULL;
 8007ca0:	2300      	movs	r3, #0
 8007ca2:	60fb      	str	r3, [r7, #12]
	if(!src) return;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d02f      	beq.n	8007d0a <clear_string+0x72>
	uint8_t i = 0;
 8007caa:	2300      	movs	r3, #0
 8007cac:	72fb      	strb	r3, [r7, #11]

	for(dst = src; *src; src++)
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	60fb      	str	r3, [r7, #12]
 8007cb2:	e022      	b.n	8007cfa <clear_string+0x62>
	{
		if(i < 2 && (*src == '\n' || *src == '\r'))
 8007cb4:	7afb      	ldrb	r3, [r7, #11]
 8007cb6:	2b01      	cmp	r3, #1
 8007cb8:	d80b      	bhi.n	8007cd2 <clear_string+0x3a>
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	781b      	ldrb	r3, [r3, #0]
 8007cbe:	2b0a      	cmp	r3, #10
 8007cc0:	d003      	beq.n	8007cca <clear_string+0x32>
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	781b      	ldrb	r3, [r3, #0]
 8007cc6:	2b0d      	cmp	r3, #13
 8007cc8:	d103      	bne.n	8007cd2 <clear_string+0x3a>
		{
			i++;
 8007cca:	7afb      	ldrb	r3, [r7, #11]
 8007ccc:	3301      	adds	r3, #1
 8007cce:	72fb      	strb	r3, [r7, #11]
			continue;
 8007cd0:	e010      	b.n	8007cf4 <clear_string+0x5c>
		}
		else if(*src == '\n' || *src == '\r') *src = ' ';
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	781b      	ldrb	r3, [r3, #0]
 8007cd6:	2b0a      	cmp	r3, #10
 8007cd8:	d003      	beq.n	8007ce2 <clear_string+0x4a>
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	781b      	ldrb	r3, [r3, #0]
 8007cde:	2b0d      	cmp	r3, #13
 8007ce0:	d102      	bne.n	8007ce8 <clear_string+0x50>
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	2220      	movs	r2, #32
 8007ce6:	701a      	strb	r2, [r3, #0]

		*dst++ = *src;
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	1c5a      	adds	r2, r3, #1
 8007cec:	60fa      	str	r2, [r7, #12]
 8007cee:	687a      	ldr	r2, [r7, #4]
 8007cf0:	7812      	ldrb	r2, [r2, #0]
 8007cf2:	701a      	strb	r2, [r3, #0]
	for(dst = src; *src; src++)
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	3301      	adds	r3, #1
 8007cf8:	607b      	str	r3, [r7, #4]
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	781b      	ldrb	r3, [r3, #0]
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d1d8      	bne.n	8007cb4 <clear_string+0x1c>
	}

	*dst = 0;
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	2200      	movs	r2, #0
 8007d06:	701a      	strb	r2, [r3, #0]
 8007d08:	e000      	b.n	8007d0c <clear_string+0x74>
	if(!src) return;
 8007d0a:	bf00      	nop
}
 8007d0c:	3714      	adds	r7, #20
 8007d0e:	46bd      	mov	sp, r7
 8007d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d14:	4770      	bx	lr
	...

08007d18 <ReWriteOCD>:
//char trans_str[64] = {0,};


//Функция обновления значений в массиве данных коллекторных выходов
void ReWriteOCD(void)
{
 8007d18:	b580      	push	{r7, lr}
 8007d1a:	b082      	sub	sp, #8
 8007d1c:	af00      	add	r7, sp, #0
	for(int i = 0; i < 8; i++)
 8007d1e:	2300      	movs	r3, #0
 8007d20:	607b      	str	r3, [r7, #4]
 8007d22:	e021      	b.n	8007d68 <ReWriteOCD+0x50>
		(Status_OCD[i]) ? (HAL_GPIO_WritePin(pVIHOD[i], OCD_Pin[i], SET)) : (HAL_GPIO_WritePin(pVIHOD[i], OCD_Pin[i], RESET));
 8007d24:	4a14      	ldr	r2, [pc, #80]	; (8007d78 <ReWriteOCD+0x60>)
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	4413      	add	r3, r2
 8007d2a:	781b      	ldrb	r3, [r3, #0]
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d00c      	beq.n	8007d4a <ReWriteOCD+0x32>
 8007d30:	4a12      	ldr	r2, [pc, #72]	; (8007d7c <ReWriteOCD+0x64>)
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8007d38:	4a11      	ldr	r2, [pc, #68]	; (8007d80 <ReWriteOCD+0x68>)
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007d40:	2201      	movs	r2, #1
 8007d42:	4619      	mov	r1, r3
 8007d44:	f003 fec6 	bl	800bad4 <HAL_GPIO_WritePin>
 8007d48:	e00b      	b.n	8007d62 <ReWriteOCD+0x4a>
 8007d4a:	4a0c      	ldr	r2, [pc, #48]	; (8007d7c <ReWriteOCD+0x64>)
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8007d52:	4a0b      	ldr	r2, [pc, #44]	; (8007d80 <ReWriteOCD+0x68>)
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007d5a:	2200      	movs	r2, #0
 8007d5c:	4619      	mov	r1, r3
 8007d5e:	f003 feb9 	bl	800bad4 <HAL_GPIO_WritePin>
	for(int i = 0; i < 8; i++)
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	3301      	adds	r3, #1
 8007d66:	607b      	str	r3, [r7, #4]
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	2b07      	cmp	r3, #7
 8007d6c:	ddda      	ble.n	8007d24 <ReWriteOCD+0xc>
}
 8007d6e:	bf00      	nop
 8007d70:	bf00      	nop
 8007d72:	3708      	adds	r7, #8
 8007d74:	46bd      	mov	sp, r7
 8007d76:	bd80      	pop	{r7, pc}
 8007d78:	200004a4 	.word	0x200004a4
 8007d7c:	20000030 	.word	0x20000030
 8007d80:	20000060 	.word	0x20000060

08007d84 <CheckReWriteDiDo>:
uint16_t OW_Pin[2] = {WR0_Pin, WR1_Pin};

//Мониторинг дискретных входов и изменение выходов открытый коллектор
//	*(Если Вход1 == 0 то Выход3 = 1) Инверсная логика на входах оптопар
void CheckReWriteDiDo(void)
{
 8007d84:	b590      	push	{r4, r7, lr}
 8007d86:	b083      	sub	sp, #12
 8007d88:	af00      	add	r7, sp, #0
	for(int i = 0; i < 8; i++)
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	607b      	str	r3, [r7, #4]
 8007d8e:	e0a8      	b.n	8007ee2 <CheckReWriteDiDo+0x15e>
	{
		if(HAL_GPIO_ReadPin(DiDo[i].D_IN, DiDo[i].DIN_Pin) != DiDo[i].VAR_IN)
 8007d90:	4958      	ldr	r1, [pc, #352]	; (8007ef4 <CheckReWriteDiDo+0x170>)
 8007d92:	687a      	ldr	r2, [r7, #4]
 8007d94:	4613      	mov	r3, r2
 8007d96:	009b      	lsls	r3, r3, #2
 8007d98:	4413      	add	r3, r2
 8007d9a:	009b      	lsls	r3, r3, #2
 8007d9c:	440b      	add	r3, r1
 8007d9e:	6818      	ldr	r0, [r3, #0]
 8007da0:	4954      	ldr	r1, [pc, #336]	; (8007ef4 <CheckReWriteDiDo+0x170>)
 8007da2:	687a      	ldr	r2, [r7, #4]
 8007da4:	4613      	mov	r3, r2
 8007da6:	009b      	lsls	r3, r3, #2
 8007da8:	4413      	add	r3, r2
 8007daa:	009b      	lsls	r3, r3, #2
 8007dac:	440b      	add	r3, r1
 8007dae:	3306      	adds	r3, #6
 8007db0:	881b      	ldrh	r3, [r3, #0]
 8007db2:	4619      	mov	r1, r3
 8007db4:	f003 fe76 	bl	800baa4 <HAL_GPIO_ReadPin>
 8007db8:	4603      	mov	r3, r0
 8007dba:	4618      	mov	r0, r3
 8007dbc:	494d      	ldr	r1, [pc, #308]	; (8007ef4 <CheckReWriteDiDo+0x170>)
 8007dbe:	687a      	ldr	r2, [r7, #4]
 8007dc0:	4613      	mov	r3, r2
 8007dc2:	009b      	lsls	r3, r3, #2
 8007dc4:	4413      	add	r3, r2
 8007dc6:	009b      	lsls	r3, r3, #2
 8007dc8:	440b      	add	r3, r1
 8007dca:	3304      	adds	r3, #4
 8007dcc:	781b      	ldrb	r3, [r3, #0]
 8007dce:	4298      	cmp	r0, r3
 8007dd0:	d02c      	beq.n	8007e2c <CheckReWriteDiDo+0xa8>
		{
			Status_OCD[i] = DiDo[i].VAR_OUT;
 8007dd2:	4948      	ldr	r1, [pc, #288]	; (8007ef4 <CheckReWriteDiDo+0x170>)
 8007dd4:	687a      	ldr	r2, [r7, #4]
 8007dd6:	4613      	mov	r3, r2
 8007dd8:	009b      	lsls	r3, r3, #2
 8007dda:	4413      	add	r3, r2
 8007ddc:	009b      	lsls	r3, r3, #2
 8007dde:	440b      	add	r3, r1
 8007de0:	330c      	adds	r3, #12
 8007de2:	7819      	ldrb	r1, [r3, #0]
 8007de4:	4a44      	ldr	r2, [pc, #272]	; (8007ef8 <CheckReWriteDiDo+0x174>)
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	4413      	add	r3, r2
 8007dea:	460a      	mov	r2, r1
 8007dec:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(DiDo[i].D_OUT, DiDo[i].OCD_Pin, DiDo[i].VAR_OUT);
 8007dee:	4941      	ldr	r1, [pc, #260]	; (8007ef4 <CheckReWriteDiDo+0x170>)
 8007df0:	687a      	ldr	r2, [r7, #4]
 8007df2:	4613      	mov	r3, r2
 8007df4:	009b      	lsls	r3, r3, #2
 8007df6:	4413      	add	r3, r2
 8007df8:	009b      	lsls	r3, r3, #2
 8007dfa:	440b      	add	r3, r1
 8007dfc:	3308      	adds	r3, #8
 8007dfe:	6818      	ldr	r0, [r3, #0]
 8007e00:	493c      	ldr	r1, [pc, #240]	; (8007ef4 <CheckReWriteDiDo+0x170>)
 8007e02:	687a      	ldr	r2, [r7, #4]
 8007e04:	4613      	mov	r3, r2
 8007e06:	009b      	lsls	r3, r3, #2
 8007e08:	4413      	add	r3, r2
 8007e0a:	009b      	lsls	r3, r3, #2
 8007e0c:	440b      	add	r3, r1
 8007e0e:	330e      	adds	r3, #14
 8007e10:	8819      	ldrh	r1, [r3, #0]
 8007e12:	4c38      	ldr	r4, [pc, #224]	; (8007ef4 <CheckReWriteDiDo+0x170>)
 8007e14:	687a      	ldr	r2, [r7, #4]
 8007e16:	4613      	mov	r3, r2
 8007e18:	009b      	lsls	r3, r3, #2
 8007e1a:	4413      	add	r3, r2
 8007e1c:	009b      	lsls	r3, r3, #2
 8007e1e:	4423      	add	r3, r4
 8007e20:	330c      	adds	r3, #12
 8007e22:	781b      	ldrb	r3, [r3, #0]
 8007e24:	461a      	mov	r2, r3
 8007e26:	f003 fe55 	bl	800bad4 <HAL_GPIO_WritePin>
 8007e2a:	e057      	b.n	8007edc <CheckReWriteDiDo+0x158>
		}
		else if(HAL_GPIO_ReadPin(DiDo[i].D_IN, DiDo[i].DIN_Pin) == DiDo[i].VAR_IN)
 8007e2c:	4931      	ldr	r1, [pc, #196]	; (8007ef4 <CheckReWriteDiDo+0x170>)
 8007e2e:	687a      	ldr	r2, [r7, #4]
 8007e30:	4613      	mov	r3, r2
 8007e32:	009b      	lsls	r3, r3, #2
 8007e34:	4413      	add	r3, r2
 8007e36:	009b      	lsls	r3, r3, #2
 8007e38:	440b      	add	r3, r1
 8007e3a:	6818      	ldr	r0, [r3, #0]
 8007e3c:	492d      	ldr	r1, [pc, #180]	; (8007ef4 <CheckReWriteDiDo+0x170>)
 8007e3e:	687a      	ldr	r2, [r7, #4]
 8007e40:	4613      	mov	r3, r2
 8007e42:	009b      	lsls	r3, r3, #2
 8007e44:	4413      	add	r3, r2
 8007e46:	009b      	lsls	r3, r3, #2
 8007e48:	440b      	add	r3, r1
 8007e4a:	3306      	adds	r3, #6
 8007e4c:	881b      	ldrh	r3, [r3, #0]
 8007e4e:	4619      	mov	r1, r3
 8007e50:	f003 fe28 	bl	800baa4 <HAL_GPIO_ReadPin>
 8007e54:	4603      	mov	r3, r0
 8007e56:	4618      	mov	r0, r3
 8007e58:	4926      	ldr	r1, [pc, #152]	; (8007ef4 <CheckReWriteDiDo+0x170>)
 8007e5a:	687a      	ldr	r2, [r7, #4]
 8007e5c:	4613      	mov	r3, r2
 8007e5e:	009b      	lsls	r3, r3, #2
 8007e60:	4413      	add	r3, r2
 8007e62:	009b      	lsls	r3, r3, #2
 8007e64:	440b      	add	r3, r1
 8007e66:	3304      	adds	r3, #4
 8007e68:	781b      	ldrb	r3, [r3, #0]
 8007e6a:	4298      	cmp	r0, r3
 8007e6c:	d136      	bne.n	8007edc <CheckReWriteDiDo+0x158>
		{
			Status_OCD[i] = !DiDo[i].VAR_OUT;
 8007e6e:	4921      	ldr	r1, [pc, #132]	; (8007ef4 <CheckReWriteDiDo+0x170>)
 8007e70:	687a      	ldr	r2, [r7, #4]
 8007e72:	4613      	mov	r3, r2
 8007e74:	009b      	lsls	r3, r3, #2
 8007e76:	4413      	add	r3, r2
 8007e78:	009b      	lsls	r3, r3, #2
 8007e7a:	440b      	add	r3, r1
 8007e7c:	330c      	adds	r3, #12
 8007e7e:	781b      	ldrb	r3, [r3, #0]
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	bf0c      	ite	eq
 8007e84:	2301      	moveq	r3, #1
 8007e86:	2300      	movne	r3, #0
 8007e88:	b2db      	uxtb	r3, r3
 8007e8a:	4619      	mov	r1, r3
 8007e8c:	4a1a      	ldr	r2, [pc, #104]	; (8007ef8 <CheckReWriteDiDo+0x174>)
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	4413      	add	r3, r2
 8007e92:	460a      	mov	r2, r1
 8007e94:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(DiDo[i].D_OUT, DiDo[i].OCD_Pin, !DiDo[i].VAR_OUT);
 8007e96:	4917      	ldr	r1, [pc, #92]	; (8007ef4 <CheckReWriteDiDo+0x170>)
 8007e98:	687a      	ldr	r2, [r7, #4]
 8007e9a:	4613      	mov	r3, r2
 8007e9c:	009b      	lsls	r3, r3, #2
 8007e9e:	4413      	add	r3, r2
 8007ea0:	009b      	lsls	r3, r3, #2
 8007ea2:	440b      	add	r3, r1
 8007ea4:	3308      	adds	r3, #8
 8007ea6:	6818      	ldr	r0, [r3, #0]
 8007ea8:	4912      	ldr	r1, [pc, #72]	; (8007ef4 <CheckReWriteDiDo+0x170>)
 8007eaa:	687a      	ldr	r2, [r7, #4]
 8007eac:	4613      	mov	r3, r2
 8007eae:	009b      	lsls	r3, r3, #2
 8007eb0:	4413      	add	r3, r2
 8007eb2:	009b      	lsls	r3, r3, #2
 8007eb4:	440b      	add	r3, r1
 8007eb6:	330e      	adds	r3, #14
 8007eb8:	8819      	ldrh	r1, [r3, #0]
 8007eba:	4c0e      	ldr	r4, [pc, #56]	; (8007ef4 <CheckReWriteDiDo+0x170>)
 8007ebc:	687a      	ldr	r2, [r7, #4]
 8007ebe:	4613      	mov	r3, r2
 8007ec0:	009b      	lsls	r3, r3, #2
 8007ec2:	4413      	add	r3, r2
 8007ec4:	009b      	lsls	r3, r3, #2
 8007ec6:	4423      	add	r3, r4
 8007ec8:	330c      	adds	r3, #12
 8007eca:	781b      	ldrb	r3, [r3, #0]
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	bf0c      	ite	eq
 8007ed0:	2301      	moveq	r3, #1
 8007ed2:	2300      	movne	r3, #0
 8007ed4:	b2db      	uxtb	r3, r3
 8007ed6:	461a      	mov	r2, r3
 8007ed8:	f003 fdfc 	bl	800bad4 <HAL_GPIO_WritePin>
	for(int i = 0; i < 8; i++)
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	3301      	adds	r3, #1
 8007ee0:	607b      	str	r3, [r7, #4]
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	2b07      	cmp	r3, #7
 8007ee6:	f77f af53 	ble.w	8007d90 <CheckReWriteDiDo+0xc>
		}
	}
}
 8007eea:	bf00      	nop
 8007eec:	bf00      	nop
 8007eee:	370c      	adds	r7, #12
 8007ef0:	46bd      	mov	sp, r7
 8007ef2:	bd90      	pop	{r4, r7, pc}
 8007ef4:	20000760 	.word	0x20000760
 8007ef8:	200004a4 	.word	0x200004a4

08007efc <CheckReWriteAiDo>:
//Мониторинг аналоговых входов и изменение выходов открытый коллектор
void CheckReWriteAiDo(void)
{
 8007efc:	b590      	push	{r4, r7, lr}
 8007efe:	b083      	sub	sp, #12
 8007f00:	af00      	add	r7, sp, #0
	for(int i = 0; i < 4; i++)
 8007f02:	2300      	movs	r3, #0
 8007f04:	607b      	str	r3, [r7, #4]
 8007f06:	e096      	b.n	8008036 <CheckReWriteAiDo+0x13a>
	{
		for(int j = 0; j < 8; j++)
 8007f08:	2300      	movs	r3, #0
 8007f0a:	603b      	str	r3, [r7, #0]
 8007f0c:	e08c      	b.n	8008028 <CheckReWriteAiDo+0x12c>
		{
			if(AiDo[i].OCD_Pin == OCD_Pin[j])
 8007f0e:	494e      	ldr	r1, [pc, #312]	; (8008048 <CheckReWriteAiDo+0x14c>)
 8007f10:	687a      	ldr	r2, [r7, #4]
 8007f12:	4613      	mov	r3, r2
 8007f14:	009b      	lsls	r3, r3, #2
 8007f16:	4413      	add	r3, r2
 8007f18:	00db      	lsls	r3, r3, #3
 8007f1a:	440b      	add	r3, r1
 8007f1c:	331e      	adds	r3, #30
 8007f1e:	881a      	ldrh	r2, [r3, #0]
 8007f20:	494a      	ldr	r1, [pc, #296]	; (800804c <CheckReWriteAiDo+0x150>)
 8007f22:	683b      	ldr	r3, [r7, #0]
 8007f24:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8007f28:	429a      	cmp	r2, r3
 8007f2a:	d17a      	bne.n	8008022 <CheckReWriteAiDo+0x126>
			{
				if((adcValue[i] >= AiDo[i].RANGE_LOW) && (AiDo[i].RANGE_HIGH >= adcValue[i]))
 8007f2c:	4a48      	ldr	r2, [pc, #288]	; (8008050 <CheckReWriteAiDo+0x154>)
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	00db      	lsls	r3, r3, #3
 8007f32:	4413      	add	r3, r2
 8007f34:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007f38:	4c43      	ldr	r4, [pc, #268]	; (8008048 <CheckReWriteAiDo+0x14c>)
 8007f3a:	687a      	ldr	r2, [r7, #4]
 8007f3c:	4613      	mov	r3, r2
 8007f3e:	009b      	lsls	r3, r3, #2
 8007f40:	4413      	add	r3, r2
 8007f42:	00db      	lsls	r3, r3, #3
 8007f44:	4423      	add	r3, r4
 8007f46:	3308      	adds	r3, #8
 8007f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f4c:	f7f8 fdea 	bl	8000b24 <__aeabi_dcmpge>
 8007f50:	4603      	mov	r3, r0
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d041      	beq.n	8007fda <CheckReWriteAiDo+0xde>
 8007f56:	493c      	ldr	r1, [pc, #240]	; (8008048 <CheckReWriteAiDo+0x14c>)
 8007f58:	687a      	ldr	r2, [r7, #4]
 8007f5a:	4613      	mov	r3, r2
 8007f5c:	009b      	lsls	r3, r3, #2
 8007f5e:	4413      	add	r3, r2
 8007f60:	00db      	lsls	r3, r3, #3
 8007f62:	440b      	add	r3, r1
 8007f64:	3310      	adds	r3, #16
 8007f66:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007f6a:	4a39      	ldr	r2, [pc, #228]	; (8008050 <CheckReWriteAiDo+0x154>)
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	00db      	lsls	r3, r3, #3
 8007f70:	4413      	add	r3, r2
 8007f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f76:	f7f8 fdd5 	bl	8000b24 <__aeabi_dcmpge>
 8007f7a:	4603      	mov	r3, r0
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d02c      	beq.n	8007fda <CheckReWriteAiDo+0xde>
				{
					Status_OCD[j] = AiDo[i].VAR_OUT;
 8007f80:	4931      	ldr	r1, [pc, #196]	; (8008048 <CheckReWriteAiDo+0x14c>)
 8007f82:	687a      	ldr	r2, [r7, #4]
 8007f84:	4613      	mov	r3, r2
 8007f86:	009b      	lsls	r3, r3, #2
 8007f88:	4413      	add	r3, r2
 8007f8a:	00db      	lsls	r3, r3, #3
 8007f8c:	440b      	add	r3, r1
 8007f8e:	331c      	adds	r3, #28
 8007f90:	7819      	ldrb	r1, [r3, #0]
 8007f92:	4a30      	ldr	r2, [pc, #192]	; (8008054 <CheckReWriteAiDo+0x158>)
 8007f94:	683b      	ldr	r3, [r7, #0]
 8007f96:	4413      	add	r3, r2
 8007f98:	460a      	mov	r2, r1
 8007f9a:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_WritePin(AiDo[i].D_OUT, AiDo[i].OCD_Pin, AiDo[i].VAR_OUT);
 8007f9c:	492a      	ldr	r1, [pc, #168]	; (8008048 <CheckReWriteAiDo+0x14c>)
 8007f9e:	687a      	ldr	r2, [r7, #4]
 8007fa0:	4613      	mov	r3, r2
 8007fa2:	009b      	lsls	r3, r3, #2
 8007fa4:	4413      	add	r3, r2
 8007fa6:	00db      	lsls	r3, r3, #3
 8007fa8:	440b      	add	r3, r1
 8007faa:	3318      	adds	r3, #24
 8007fac:	6818      	ldr	r0, [r3, #0]
 8007fae:	4926      	ldr	r1, [pc, #152]	; (8008048 <CheckReWriteAiDo+0x14c>)
 8007fb0:	687a      	ldr	r2, [r7, #4]
 8007fb2:	4613      	mov	r3, r2
 8007fb4:	009b      	lsls	r3, r3, #2
 8007fb6:	4413      	add	r3, r2
 8007fb8:	00db      	lsls	r3, r3, #3
 8007fba:	440b      	add	r3, r1
 8007fbc:	331e      	adds	r3, #30
 8007fbe:	8819      	ldrh	r1, [r3, #0]
 8007fc0:	4c21      	ldr	r4, [pc, #132]	; (8008048 <CheckReWriteAiDo+0x14c>)
 8007fc2:	687a      	ldr	r2, [r7, #4]
 8007fc4:	4613      	mov	r3, r2
 8007fc6:	009b      	lsls	r3, r3, #2
 8007fc8:	4413      	add	r3, r2
 8007fca:	00db      	lsls	r3, r3, #3
 8007fcc:	4423      	add	r3, r4
 8007fce:	331c      	adds	r3, #28
 8007fd0:	781b      	ldrb	r3, [r3, #0]
 8007fd2:	461a      	mov	r2, r3
 8007fd4:	f003 fd7e 	bl	800bad4 <HAL_GPIO_WritePin>
 8007fd8:	e023      	b.n	8008022 <CheckReWriteAiDo+0x126>
				}
				else
				{
					Status_OCD[j] = AiDo[i].VAR_OUT;
 8007fda:	491b      	ldr	r1, [pc, #108]	; (8008048 <CheckReWriteAiDo+0x14c>)
 8007fdc:	687a      	ldr	r2, [r7, #4]
 8007fde:	4613      	mov	r3, r2
 8007fe0:	009b      	lsls	r3, r3, #2
 8007fe2:	4413      	add	r3, r2
 8007fe4:	00db      	lsls	r3, r3, #3
 8007fe6:	440b      	add	r3, r1
 8007fe8:	331c      	adds	r3, #28
 8007fea:	7819      	ldrb	r1, [r3, #0]
 8007fec:	4a19      	ldr	r2, [pc, #100]	; (8008054 <CheckReWriteAiDo+0x158>)
 8007fee:	683b      	ldr	r3, [r7, #0]
 8007ff0:	4413      	add	r3, r2
 8007ff2:	460a      	mov	r2, r1
 8007ff4:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_WritePin(AiDo[i].D_OUT, AiDo[i].OCD_Pin, RESET);	//!AiDo[i].VAR_OUT - вариант инверсии выхода по отношении ко входу
 8007ff6:	4914      	ldr	r1, [pc, #80]	; (8008048 <CheckReWriteAiDo+0x14c>)
 8007ff8:	687a      	ldr	r2, [r7, #4]
 8007ffa:	4613      	mov	r3, r2
 8007ffc:	009b      	lsls	r3, r3, #2
 8007ffe:	4413      	add	r3, r2
 8008000:	00db      	lsls	r3, r3, #3
 8008002:	440b      	add	r3, r1
 8008004:	3318      	adds	r3, #24
 8008006:	6818      	ldr	r0, [r3, #0]
 8008008:	490f      	ldr	r1, [pc, #60]	; (8008048 <CheckReWriteAiDo+0x14c>)
 800800a:	687a      	ldr	r2, [r7, #4]
 800800c:	4613      	mov	r3, r2
 800800e:	009b      	lsls	r3, r3, #2
 8008010:	4413      	add	r3, r2
 8008012:	00db      	lsls	r3, r3, #3
 8008014:	440b      	add	r3, r1
 8008016:	331e      	adds	r3, #30
 8008018:	881b      	ldrh	r3, [r3, #0]
 800801a:	2200      	movs	r2, #0
 800801c:	4619      	mov	r1, r3
 800801e:	f003 fd59 	bl	800bad4 <HAL_GPIO_WritePin>
		for(int j = 0; j < 8; j++)
 8008022:	683b      	ldr	r3, [r7, #0]
 8008024:	3301      	adds	r3, #1
 8008026:	603b      	str	r3, [r7, #0]
 8008028:	683b      	ldr	r3, [r7, #0]
 800802a:	2b07      	cmp	r3, #7
 800802c:	f77f af6f 	ble.w	8007f0e <CheckReWriteAiDo+0x12>
	for(int i = 0; i < 4; i++)
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	3301      	adds	r3, #1
 8008034:	607b      	str	r3, [r7, #4]
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	2b03      	cmp	r3, #3
 800803a:	f77f af65 	ble.w	8007f08 <CheckReWriteAiDo+0xc>
				}
			}
		}
	}
}
 800803e:	bf00      	nop
 8008040:	bf00      	nop
 8008042:	370c      	adds	r7, #12
 8008044:	46bd      	mov	sp, r7
 8008046:	bd90      	pop	{r4, r7, pc}
 8008048:	200006c0 	.word	0x200006c0
 800804c:	20000060 	.word	0x20000060
 8008050:	20000310 	.word	0x20000310
 8008054:	200004a4 	.word	0x200004a4

08008058 <CheckReWriteTSiDo>:
//Мониторинг датчиков температуры и изменение выходов открытый коллектор
void CheckReWriteTSiDo(void)
{
 8008058:	b5b0      	push	{r4, r5, r7, lr}
 800805a:	b084      	sub	sp, #16
 800805c:	af02      	add	r7, sp, #8
	if(OneWire_Test_Flag_Init)
 800805e:	4b8f      	ldr	r3, [pc, #572]	; (800829c <CheckReWriteTSiDo+0x244>)
 8008060:	781b      	ldrb	r3, [r3, #0]
 8008062:	2b00      	cmp	r3, #0
 8008064:	d012      	beq.n	800808c <CheckReWriteTSiDo+0x34>
	{
		OneWire_Test_Flag_Init = false;
 8008066:	4b8d      	ldr	r3, [pc, #564]	; (800829c <CheckReWriteTSiDo+0x244>)
 8008068:	2200      	movs	r2, #0
 800806a:	701a      	strb	r2, [r3, #0]
    	for(uint8_t i = 1; i <= Dev_Cnt; i++)
 800806c:	2301      	movs	r3, #1
 800806e:	71fb      	strb	r3, [r7, #7]
 8008070:	e007      	b.n	8008082 <CheckReWriteTSiDo+0x2a>
    	{
    		sensors_MeasureTemperCmd(NO_SKIP_ROM, i);
 8008072:	79fb      	ldrb	r3, [r7, #7]
 8008074:	4619      	mov	r1, r3
 8008076:	2001      	movs	r0, #1
 8008078:	f001 f8ba 	bl	80091f0 <sensors_MeasureTemperCmd>
    	for(uint8_t i = 1; i <= Dev_Cnt; i++)
 800807c:	79fb      	ldrb	r3, [r7, #7]
 800807e:	3301      	adds	r3, #1
 8008080:	71fb      	strb	r3, [r7, #7]
 8008082:	4b87      	ldr	r3, [pc, #540]	; (80082a0 <CheckReWriteTSiDo+0x248>)
 8008084:	781b      	ldrb	r3, [r3, #0]
 8008086:	79fa      	ldrb	r2, [r7, #7]
 8008088:	429a      	cmp	r2, r3
 800808a:	d9f2      	bls.n	8008072 <CheckReWriteTSiDo+0x1a>
    	}
	}
	if(OneWire_Test_Flag_Read)
 800808c:	4b85      	ldr	r3, [pc, #532]	; (80082a4 <CheckReWriteTSiDo+0x24c>)
 800808e:	781b      	ldrb	r3, [r3, #0]
 8008090:	2b00      	cmp	r3, #0
 8008092:	f000 80ff 	beq.w	8008294 <CheckReWriteTSiDo+0x23c>
	{
		OneWire_Test_Flag_Read = false;
 8008096:	4b83      	ldr	r3, [pc, #524]	; (80082a4 <CheckReWriteTSiDo+0x24c>)
 8008098:	2200      	movs	r2, #0
 800809a:	701a      	strb	r2, [r3, #0]
    	for(uint8_t i = 1; i <= Dev_Cnt; i++)
 800809c:	2301      	movs	r3, #1
 800809e:	71bb      	strb	r3, [r7, #6]
 80080a0:	e0f2      	b.n	8008288 <CheckReWriteTSiDo+0x230>
    	{
    		for(uint8_t j = 0; j < 8; j++)
 80080a2:	2300      	movs	r3, #0
 80080a4:	717b      	strb	r3, [r7, #5]
 80080a6:	e0e8      	b.n	800827a <CheckReWriteTSiDo+0x222>
    		{
    			if(TSiDo[i-1].OCD_Pin == OCD_Pin[j])
 80080a8:	79bb      	ldrb	r3, [r7, #6]
 80080aa:	1e5a      	subs	r2, r3, #1
 80080ac:	497e      	ldr	r1, [pc, #504]	; (80082a8 <CheckReWriteTSiDo+0x250>)
 80080ae:	4613      	mov	r3, r2
 80080b0:	00db      	lsls	r3, r3, #3
 80080b2:	1a9b      	subs	r3, r3, r2
 80080b4:	00db      	lsls	r3, r3, #3
 80080b6:	440b      	add	r3, r1
 80080b8:	332e      	adds	r3, #46	; 0x2e
 80080ba:	881a      	ldrh	r2, [r3, #0]
 80080bc:	797b      	ldrb	r3, [r7, #5]
 80080be:	497b      	ldr	r1, [pc, #492]	; (80082ac <CheckReWriteTSiDo+0x254>)
 80080c0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80080c4:	429a      	cmp	r2, r3
 80080c6:	f040 80d5 	bne.w	8008274 <CheckReWriteTSiDo+0x21c>
    			{
    				sensors_ReadStratcpad(NO_SKIP_ROM, dt, i);
 80080ca:	79bb      	ldrb	r3, [r7, #6]
 80080cc:	461a      	mov	r2, r3
 80080ce:	4978      	ldr	r1, [pc, #480]	; (80082b0 <CheckReWriteTSiDo+0x258>)
 80080d0:	2001      	movs	r0, #1
 80080d2:	f001 f8c1 	bl	8009258 <sensors_ReadStratcpad>
    				raw_temper = ((uint16_t)dt[1]<<8)|dt[0];
 80080d6:	4b76      	ldr	r3, [pc, #472]	; (80082b0 <CheckReWriteTSiDo+0x258>)
 80080d8:	785b      	ldrb	r3, [r3, #1]
 80080da:	021b      	lsls	r3, r3, #8
 80080dc:	b21a      	sxth	r2, r3
 80080de:	4b74      	ldr	r3, [pc, #464]	; (80082b0 <CheckReWriteTSiDo+0x258>)
 80080e0:	781b      	ldrb	r3, [r3, #0]
 80080e2:	b21b      	sxth	r3, r3
 80080e4:	4313      	orrs	r3, r2
 80080e6:	b21b      	sxth	r3, r3
 80080e8:	b29a      	uxth	r2, r3
 80080ea:	4b72      	ldr	r3, [pc, #456]	; (80082b4 <CheckReWriteTSiDo+0x25c>)
 80080ec:	801a      	strh	r2, [r3, #0]
    				if(sensors_GetSign(raw_temper))
 80080ee:	4b71      	ldr	r3, [pc, #452]	; (80082b4 <CheckReWriteTSiDo+0x25c>)
 80080f0:	881b      	ldrh	r3, [r3, #0]
 80080f2:	4618      	mov	r0, r3
 80080f4:	f001 f8f2 	bl	80092dc <sensors_GetSign>
 80080f8:	4603      	mov	r3, r0
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d003      	beq.n	8008106 <CheckReWriteTSiDo+0xae>
    					c='-';
 80080fe:	4b6e      	ldr	r3, [pc, #440]	; (80082b8 <CheckReWriteTSiDo+0x260>)
 8008100:	222d      	movs	r2, #45	; 0x2d
 8008102:	701a      	strb	r2, [r3, #0]
 8008104:	e002      	b.n	800810c <CheckReWriteTSiDo+0xb4>
    				else
    					c='+';
 8008106:	4b6c      	ldr	r3, [pc, #432]	; (80082b8 <CheckReWriteTSiDo+0x260>)
 8008108:	222b      	movs	r2, #43	; 0x2b
 800810a:	701a      	strb	r2, [r3, #0]
    				temper = sensors_Convert(raw_temper);
 800810c:	4b69      	ldr	r3, [pc, #420]	; (80082b4 <CheckReWriteTSiDo+0x25c>)
 800810e:	881b      	ldrh	r3, [r3, #0]
 8008110:	4618      	mov	r0, r3
 8008112:	f001 f8f6 	bl	8009302 <sensors_Convert>
 8008116:	eef0 7a40 	vmov.f32	s15, s0
 800811a:	4b68      	ldr	r3, [pc, #416]	; (80082bc <CheckReWriteTSiDo+0x264>)
 800811c:	edc3 7a00 	vstr	s15, [r3]
    				sprintf(sign_temper, "%c%.2f", c, temper);
 8008120:	4b65      	ldr	r3, [pc, #404]	; (80082b8 <CheckReWriteTSiDo+0x260>)
 8008122:	781b      	ldrb	r3, [r3, #0]
 8008124:	461c      	mov	r4, r3
 8008126:	4b65      	ldr	r3, [pc, #404]	; (80082bc <CheckReWriteTSiDo+0x264>)
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	4618      	mov	r0, r3
 800812c:	f7f8 fa1c 	bl	8000568 <__aeabi_f2d>
 8008130:	4602      	mov	r2, r0
 8008132:	460b      	mov	r3, r1
 8008134:	e9cd 2300 	strd	r2, r3, [sp]
 8008138:	4622      	mov	r2, r4
 800813a:	4961      	ldr	r1, [pc, #388]	; (80082c0 <CheckReWriteTSiDo+0x268>)
 800813c:	4861      	ldr	r0, [pc, #388]	; (80082c4 <CheckReWriteTSiDo+0x26c>)
 800813e:	f013 f9ab 	bl	801b498 <siprintf>
    				temper = atof(sign_temper);
 8008142:	4860      	ldr	r0, [pc, #384]	; (80082c4 <CheckReWriteTSiDo+0x26c>)
 8008144:	f012 fb7e 	bl	801a844 <atof>
 8008148:	ec53 2b10 	vmov	r2, r3, d0
 800814c:	4610      	mov	r0, r2
 800814e:	4619      	mov	r1, r3
 8008150:	f7f8 fd5a 	bl	8000c08 <__aeabi_d2f>
 8008154:	4603      	mov	r3, r0
 8008156:	4a59      	ldr	r2, [pc, #356]	; (80082bc <CheckReWriteTSiDo+0x264>)
 8008158:	6013      	str	r3, [r2, #0]
    				//--------------------from debug--------------------------
    				HAL_UART_Transmit(&huart3, (uint8_t*)sign_temper, strlen(sign_temper), 0x1000);
 800815a:	485a      	ldr	r0, [pc, #360]	; (80082c4 <CheckReWriteTSiDo+0x26c>)
 800815c:	f7f8 f842 	bl	80001e4 <strlen>
 8008160:	4603      	mov	r3, r0
 8008162:	b29a      	uxth	r2, r3
 8008164:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008168:	4956      	ldr	r1, [pc, #344]	; (80082c4 <CheckReWriteTSiDo+0x26c>)
 800816a:	4857      	ldr	r0, [pc, #348]	; (80082c8 <CheckReWriteTSiDo+0x270>)
 800816c:	f005 fe69 	bl	800de42 <HAL_UART_Transmit>
    				//--------------------------------------------------------
					if((temper >= TSiDo[i-1].RANGE_TEMP_LOW) && (TSiDo[i-1].RANGE_TEMP_HIGH >= temper))
 8008170:	4b52      	ldr	r3, [pc, #328]	; (80082bc <CheckReWriteTSiDo+0x264>)
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	4618      	mov	r0, r3
 8008176:	f7f8 f9f7 	bl	8000568 <__aeabi_f2d>
 800817a:	79bb      	ldrb	r3, [r7, #6]
 800817c:	1e5a      	subs	r2, r3, #1
 800817e:	4c4a      	ldr	r4, [pc, #296]	; (80082a8 <CheckReWriteTSiDo+0x250>)
 8008180:	4613      	mov	r3, r2
 8008182:	00db      	lsls	r3, r3, #3
 8008184:	1a9b      	subs	r3, r3, r2
 8008186:	00db      	lsls	r3, r3, #3
 8008188:	4423      	add	r3, r4
 800818a:	3318      	adds	r3, #24
 800818c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008190:	f7f8 fcc8 	bl	8000b24 <__aeabi_dcmpge>
 8008194:	4603      	mov	r3, r0
 8008196:	2b00      	cmp	r3, #0
 8008198:	d047      	beq.n	800822a <CheckReWriteTSiDo+0x1d2>
 800819a:	79bb      	ldrb	r3, [r7, #6]
 800819c:	1e5a      	subs	r2, r3, #1
 800819e:	4942      	ldr	r1, [pc, #264]	; (80082a8 <CheckReWriteTSiDo+0x250>)
 80081a0:	4613      	mov	r3, r2
 80081a2:	00db      	lsls	r3, r3, #3
 80081a4:	1a9b      	subs	r3, r3, r2
 80081a6:	00db      	lsls	r3, r3, #3
 80081a8:	440b      	add	r3, r1
 80081aa:	3320      	adds	r3, #32
 80081ac:	e9d3 4500 	ldrd	r4, r5, [r3]
 80081b0:	4b42      	ldr	r3, [pc, #264]	; (80082bc <CheckReWriteTSiDo+0x264>)
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	4618      	mov	r0, r3
 80081b6:	f7f8 f9d7 	bl	8000568 <__aeabi_f2d>
 80081ba:	4602      	mov	r2, r0
 80081bc:	460b      	mov	r3, r1
 80081be:	4620      	mov	r0, r4
 80081c0:	4629      	mov	r1, r5
 80081c2:	f7f8 fcaf 	bl	8000b24 <__aeabi_dcmpge>
 80081c6:	4603      	mov	r3, r0
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d02e      	beq.n	800822a <CheckReWriteTSiDo+0x1d2>
					{
						Status_OCD[j] = TSiDo[i-1].VAR_OUT;
 80081cc:	79bb      	ldrb	r3, [r7, #6]
 80081ce:	1e5a      	subs	r2, r3, #1
 80081d0:	7979      	ldrb	r1, [r7, #5]
 80081d2:	4835      	ldr	r0, [pc, #212]	; (80082a8 <CheckReWriteTSiDo+0x250>)
 80081d4:	4613      	mov	r3, r2
 80081d6:	00db      	lsls	r3, r3, #3
 80081d8:	1a9b      	subs	r3, r3, r2
 80081da:	00db      	lsls	r3, r3, #3
 80081dc:	4403      	add	r3, r0
 80081de:	332c      	adds	r3, #44	; 0x2c
 80081e0:	781a      	ldrb	r2, [r3, #0]
 80081e2:	4b3a      	ldr	r3, [pc, #232]	; (80082cc <CheckReWriteTSiDo+0x274>)
 80081e4:	545a      	strb	r2, [r3, r1]
						HAL_GPIO_WritePin(TSiDo[i-1].D_OUT, TSiDo[i-1].OCD_Pin, TSiDo[i-1].VAR_OUT);
 80081e6:	79bb      	ldrb	r3, [r7, #6]
 80081e8:	1e5a      	subs	r2, r3, #1
 80081ea:	492f      	ldr	r1, [pc, #188]	; (80082a8 <CheckReWriteTSiDo+0x250>)
 80081ec:	4613      	mov	r3, r2
 80081ee:	00db      	lsls	r3, r3, #3
 80081f0:	1a9b      	subs	r3, r3, r2
 80081f2:	00db      	lsls	r3, r3, #3
 80081f4:	440b      	add	r3, r1
 80081f6:	3328      	adds	r3, #40	; 0x28
 80081f8:	6818      	ldr	r0, [r3, #0]
 80081fa:	79bb      	ldrb	r3, [r7, #6]
 80081fc:	1e5a      	subs	r2, r3, #1
 80081fe:	492a      	ldr	r1, [pc, #168]	; (80082a8 <CheckReWriteTSiDo+0x250>)
 8008200:	4613      	mov	r3, r2
 8008202:	00db      	lsls	r3, r3, #3
 8008204:	1a9b      	subs	r3, r3, r2
 8008206:	00db      	lsls	r3, r3, #3
 8008208:	440b      	add	r3, r1
 800820a:	332e      	adds	r3, #46	; 0x2e
 800820c:	8819      	ldrh	r1, [r3, #0]
 800820e:	79bb      	ldrb	r3, [r7, #6]
 8008210:	1e5a      	subs	r2, r3, #1
 8008212:	4c25      	ldr	r4, [pc, #148]	; (80082a8 <CheckReWriteTSiDo+0x250>)
 8008214:	4613      	mov	r3, r2
 8008216:	00db      	lsls	r3, r3, #3
 8008218:	1a9b      	subs	r3, r3, r2
 800821a:	00db      	lsls	r3, r3, #3
 800821c:	4423      	add	r3, r4
 800821e:	332c      	adds	r3, #44	; 0x2c
 8008220:	781b      	ldrb	r3, [r3, #0]
 8008222:	461a      	mov	r2, r3
 8008224:	f003 fc56 	bl	800bad4 <HAL_GPIO_WritePin>
 8008228:	e024      	b.n	8008274 <CheckReWriteTSiDo+0x21c>
					}
					else
					{
						Status_OCD[j] =  TSiDo[i-1].VAR_OUT;
 800822a:	79bb      	ldrb	r3, [r7, #6]
 800822c:	1e5a      	subs	r2, r3, #1
 800822e:	7979      	ldrb	r1, [r7, #5]
 8008230:	481d      	ldr	r0, [pc, #116]	; (80082a8 <CheckReWriteTSiDo+0x250>)
 8008232:	4613      	mov	r3, r2
 8008234:	00db      	lsls	r3, r3, #3
 8008236:	1a9b      	subs	r3, r3, r2
 8008238:	00db      	lsls	r3, r3, #3
 800823a:	4403      	add	r3, r0
 800823c:	332c      	adds	r3, #44	; 0x2c
 800823e:	781a      	ldrb	r2, [r3, #0]
 8008240:	4b22      	ldr	r3, [pc, #136]	; (80082cc <CheckReWriteTSiDo+0x274>)
 8008242:	545a      	strb	r2, [r3, r1]
						HAL_GPIO_WritePin(TSiDo[i-1].D_OUT, TSiDo[i-1].OCD_Pin, RESET);
 8008244:	79bb      	ldrb	r3, [r7, #6]
 8008246:	1e5a      	subs	r2, r3, #1
 8008248:	4917      	ldr	r1, [pc, #92]	; (80082a8 <CheckReWriteTSiDo+0x250>)
 800824a:	4613      	mov	r3, r2
 800824c:	00db      	lsls	r3, r3, #3
 800824e:	1a9b      	subs	r3, r3, r2
 8008250:	00db      	lsls	r3, r3, #3
 8008252:	440b      	add	r3, r1
 8008254:	3328      	adds	r3, #40	; 0x28
 8008256:	6818      	ldr	r0, [r3, #0]
 8008258:	79bb      	ldrb	r3, [r7, #6]
 800825a:	1e5a      	subs	r2, r3, #1
 800825c:	4912      	ldr	r1, [pc, #72]	; (80082a8 <CheckReWriteTSiDo+0x250>)
 800825e:	4613      	mov	r3, r2
 8008260:	00db      	lsls	r3, r3, #3
 8008262:	1a9b      	subs	r3, r3, r2
 8008264:	00db      	lsls	r3, r3, #3
 8008266:	440b      	add	r3, r1
 8008268:	332e      	adds	r3, #46	; 0x2e
 800826a:	881b      	ldrh	r3, [r3, #0]
 800826c:	2200      	movs	r2, #0
 800826e:	4619      	mov	r1, r3
 8008270:	f003 fc30 	bl	800bad4 <HAL_GPIO_WritePin>
    		for(uint8_t j = 0; j < 8; j++)
 8008274:	797b      	ldrb	r3, [r7, #5]
 8008276:	3301      	adds	r3, #1
 8008278:	717b      	strb	r3, [r7, #5]
 800827a:	797b      	ldrb	r3, [r7, #5]
 800827c:	2b07      	cmp	r3, #7
 800827e:	f67f af13 	bls.w	80080a8 <CheckReWriteTSiDo+0x50>
    	for(uint8_t i = 1; i <= Dev_Cnt; i++)
 8008282:	79bb      	ldrb	r3, [r7, #6]
 8008284:	3301      	adds	r3, #1
 8008286:	71bb      	strb	r3, [r7, #6]
 8008288:	4b05      	ldr	r3, [pc, #20]	; (80082a0 <CheckReWriteTSiDo+0x248>)
 800828a:	781b      	ldrb	r3, [r3, #0]
 800828c:	79ba      	ldrb	r2, [r7, #6]
 800828e:	429a      	cmp	r2, r3
 8008290:	f67f af07 	bls.w	80080a2 <CheckReWriteTSiDo+0x4a>
					}
    			}
    		}
    	}
	}
}
 8008294:	bf00      	nop
 8008296:	3708      	adds	r7, #8
 8008298:	46bd      	mov	sp, r7
 800829a:	bdb0      	pop	{r4, r5, r7, pc}
 800829c:	20000332 	.word	0x20000332
 80082a0:	200013b0 	.word	0x200013b0
 80082a4:	20000333 	.word	0x20000333
 80082a8:	20000630 	.word	0x20000630
 80082ac:	20000060 	.word	0x20000060
 80082b0:	2000138c 	.word	0x2000138c
 80082b4:	20001374 	.word	0x20001374
 80082b8:	20001388 	.word	0x20001388
 80082bc:	200013a4 	.word	0x200013a4
 80082c0:	08020930 	.word	0x08020930
 80082c4:	20001378 	.word	0x20001378
 80082c8:	20000c40 	.word	0x20000c40
 80082cc:	200004a4 	.word	0x200004a4

080082d0 <Conversion_ADC1>:
//Функция преобразования данных АЦП
//Принимает "ADC_value" - значение АЦП
//Принимает "item" - номер аналогового входа АЦП
//Возвращает преобразованное значение в зависимости от конфигурации аналогового входа
double Conversion_ADC1(uint16_t ADC_value, uint8_t item)
{
 80082d0:	b580      	push	{r7, lr}
 80082d2:	b086      	sub	sp, #24
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	4603      	mov	r3, r0
 80082d8:	460a      	mov	r2, r1
 80082da:	80fb      	strh	r3, [r7, #6]
 80082dc:	4613      	mov	r3, r2
 80082de:	717b      	strb	r3, [r7, #5]
	double Value = 0;
 80082e0:	f04f 0200 	mov.w	r2, #0
 80082e4:	f04f 0300 	mov.w	r3, #0
 80082e8:	e9c7 2304 	strd	r2, r3, [r7, #16]
	const double Resolution = 0.0008056640625;
 80082ec:	a324      	add	r3, pc, #144	; (adr r3, 8008380 <Conversion_ADC1+0xb0>)
 80082ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082f2:	e9c7 2302 	strd	r2, r3, [r7, #8]
	Value = (ADC_value * Resolution);
 80082f6:	88fb      	ldrh	r3, [r7, #6]
 80082f8:	4618      	mov	r0, r3
 80082fa:	f7f8 f923 	bl	8000544 <__aeabi_i2d>
 80082fe:	4602      	mov	r2, r0
 8008300:	460b      	mov	r3, r1
 8008302:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008306:	f7f8 f987 	bl	8000618 <__aeabi_dmul>
 800830a:	4602      	mov	r2, r0
 800830c:	460b      	mov	r3, r1
 800830e:	e9c7 2304 	strd	r2, r3, [r7, #16]
	(AiDo[item].inputFlag == true) ? (Value = (Value * 3.2323232323232)) : (Value = (Value / 60));
 8008312:	797a      	ldrb	r2, [r7, #5]
 8008314:	4918      	ldr	r1, [pc, #96]	; (8008378 <Conversion_ADC1+0xa8>)
 8008316:	4613      	mov	r3, r2
 8008318:	009b      	lsls	r3, r3, #2
 800831a:	4413      	add	r3, r2
 800831c:	00db      	lsls	r3, r3, #3
 800831e:	440b      	add	r3, r1
 8008320:	3320      	adds	r3, #32
 8008322:	781b      	ldrb	r3, [r3, #0]
 8008324:	2b00      	cmp	r3, #0
 8008326:	d00b      	beq.n	8008340 <Conversion_ADC1+0x70>
 8008328:	a311      	add	r3, pc, #68	; (adr r3, 8008370 <Conversion_ADC1+0xa0>)
 800832a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800832e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008332:	f7f8 f971 	bl	8000618 <__aeabi_dmul>
 8008336:	4602      	mov	r2, r0
 8008338:	460b      	mov	r3, r1
 800833a:	e9c7 2304 	strd	r2, r3, [r7, #16]
 800833e:	e00a      	b.n	8008356 <Conversion_ADC1+0x86>
 8008340:	f04f 0200 	mov.w	r2, #0
 8008344:	4b0d      	ldr	r3, [pc, #52]	; (800837c <Conversion_ADC1+0xac>)
 8008346:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800834a:	f7f8 fa8f 	bl	800086c <__aeabi_ddiv>
 800834e:	4602      	mov	r2, r0
 8008350:	460b      	mov	r3, r1
 8008352:	e9c7 2304 	strd	r2, r3, [r7, #16]
	return Value;
 8008356:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800835a:	ec43 2b17 	vmov	d7, r2, r3
}
 800835e:	eeb0 0a47 	vmov.f32	s0, s14
 8008362:	eef0 0a67 	vmov.f32	s1, s15
 8008366:	3718      	adds	r7, #24
 8008368:	46bd      	mov	sp, r7
 800836a:	bd80      	pop	{r7, pc}
 800836c:	f3af 8000 	nop.w
 8008370:	48676ee8 	.word	0x48676ee8
 8008374:	4009dbcc 	.word	0x4009dbcc
 8008378:	200006c0 	.word	0x200006c0
 800837c:	404e0000 	.word	0x404e0000
 8008380:	66666666 	.word	0x66666666
 8008384:	3f4a6666 	.word	0x3f4a6666

08008388 <set_dido>:
//Принимает "D_IN" - строку с номером цифрового входа
//Принимает "VAR_IN" - переменная состояния входа
//Принимает "D_OUT" - строку с номером цифрового выхода
//Принимает "VAR_OUT" - переменная состояния выхода
void set_dido(char *D_IN, uint8_t VAR_IN, char *D_OUT, uint8_t VAR_OUT)
{
 8008388:	b580      	push	{r7, lr}
 800838a:	b0ae      	sub	sp, #184	; 0xb8
 800838c:	af00      	add	r7, sp, #0
 800838e:	60f8      	str	r0, [r7, #12]
 8008390:	607a      	str	r2, [r7, #4]
 8008392:	461a      	mov	r2, r3
 8008394:	460b      	mov	r3, r1
 8008396:	72fb      	strb	r3, [r7, #11]
 8008398:	4613      	mov	r3, r2
 800839a:	72bb      	strb	r3, [r7, #10]
	char VHOD[8][10] = {"VHOD1", "VHOD2", "VHOD3", "VHOD4", "VHOD5", "VHOD6", "VHOD7", "VHOD8"};
 800839c:	4ace      	ldr	r2, [pc, #824]	; (80086d8 <set_dido+0x350>)
 800839e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80083a2:	4611      	mov	r1, r2
 80083a4:	2250      	movs	r2, #80	; 0x50
 80083a6:	4618      	mov	r0, r3
 80083a8:	f012 fa96 	bl	801a8d8 <memcpy>
	char VIHOD[8][10] = {"VIHOD1", "VIHOD2", "VIHOD3", "VIHOD4", "VIHOD5", "VIHOD6", "VIHOD7", "VIHOD8"};
 80083ac:	4acb      	ldr	r2, [pc, #812]	; (80086dc <set_dido+0x354>)
 80083ae:	f107 0310 	add.w	r3, r7, #16
 80083b2:	4611      	mov	r1, r2
 80083b4:	2250      	movs	r2, #80	; 0x50
 80083b6:	4618      	mov	r0, r3
 80083b8:	f012 fa8e 	bl	801a8d8 <memcpy>

	for(int i = 0; i < 8; i++)
 80083bc:	2300      	movs	r3, #0
 80083be:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80083c2:	e17e      	b.n	80086c2 <set_dido+0x33a>
	{
		if(strcmp(D_IN, VHOD[i]) == 0)
 80083c4:	f107 0160 	add.w	r1, r7, #96	; 0x60
 80083c8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80083cc:	4613      	mov	r3, r2
 80083ce:	009b      	lsls	r3, r3, #2
 80083d0:	4413      	add	r3, r2
 80083d2:	005b      	lsls	r3, r3, #1
 80083d4:	440b      	add	r3, r1
 80083d6:	4619      	mov	r1, r3
 80083d8:	68f8      	ldr	r0, [r7, #12]
 80083da:	f7f7 fef9 	bl	80001d0 <strcmp>
 80083de:	4603      	mov	r3, r0
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	f040 8169 	bne.w	80086b8 <set_dido+0x330>
		{
			if(DiDo[i].clrFlag != false)
 80083e6:	49be      	ldr	r1, [pc, #760]	; (80086e0 <set_dido+0x358>)
 80083e8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80083ec:	4613      	mov	r3, r2
 80083ee:	009b      	lsls	r3, r3, #2
 80083f0:	4413      	add	r3, r2
 80083f2:	009b      	lsls	r3, r3, #2
 80083f4:	440b      	add	r3, r1
 80083f6:	3310      	adds	r3, #16
 80083f8:	781b      	ldrb	r3, [r3, #0]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d017      	beq.n	800842e <set_dido+0xa6>
				HAL_GPIO_WritePin(DiDo[i].D_OUT, DiDo[i].OCD_Pin, RESET);
 80083fe:	49b8      	ldr	r1, [pc, #736]	; (80086e0 <set_dido+0x358>)
 8008400:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008404:	4613      	mov	r3, r2
 8008406:	009b      	lsls	r3, r3, #2
 8008408:	4413      	add	r3, r2
 800840a:	009b      	lsls	r3, r3, #2
 800840c:	440b      	add	r3, r1
 800840e:	3308      	adds	r3, #8
 8008410:	6818      	ldr	r0, [r3, #0]
 8008412:	49b3      	ldr	r1, [pc, #716]	; (80086e0 <set_dido+0x358>)
 8008414:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008418:	4613      	mov	r3, r2
 800841a:	009b      	lsls	r3, r3, #2
 800841c:	4413      	add	r3, r2
 800841e:	009b      	lsls	r3, r3, #2
 8008420:	440b      	add	r3, r1
 8008422:	330e      	adds	r3, #14
 8008424:	881b      	ldrh	r3, [r3, #0]
 8008426:	2200      	movs	r2, #0
 8008428:	4619      	mov	r1, r3
 800842a:	f003 fb53 	bl	800bad4 <HAL_GPIO_WritePin>
			DiDo[i].clrFlag = true;
 800842e:	49ac      	ldr	r1, [pc, #688]	; (80086e0 <set_dido+0x358>)
 8008430:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008434:	4613      	mov	r3, r2
 8008436:	009b      	lsls	r3, r3, #2
 8008438:	4413      	add	r3, r2
 800843a:	009b      	lsls	r3, r3, #2
 800843c:	440b      	add	r3, r1
 800843e:	3310      	adds	r3, #16
 8008440:	2201      	movs	r2, #1
 8008442:	701a      	strb	r2, [r3, #0]
			DiDo[i].D_IN = pVHOD[i];
 8008444:	4aa7      	ldr	r2, [pc, #668]	; (80086e4 <set_dido+0x35c>)
 8008446:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800844a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800844e:	48a4      	ldr	r0, [pc, #656]	; (80086e0 <set_dido+0x358>)
 8008450:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008454:	4613      	mov	r3, r2
 8008456:	009b      	lsls	r3, r3, #2
 8008458:	4413      	add	r3, r2
 800845a:	009b      	lsls	r3, r3, #2
 800845c:	4403      	add	r3, r0
 800845e:	6019      	str	r1, [r3, #0]
			DiDo[i].VAR_IN = VAR_IN;
 8008460:	499f      	ldr	r1, [pc, #636]	; (80086e0 <set_dido+0x358>)
 8008462:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008466:	4613      	mov	r3, r2
 8008468:	009b      	lsls	r3, r3, #2
 800846a:	4413      	add	r3, r2
 800846c:	009b      	lsls	r3, r3, #2
 800846e:	440b      	add	r3, r1
 8008470:	3304      	adds	r3, #4
 8008472:	7afa      	ldrb	r2, [r7, #11]
 8008474:	701a      	strb	r2, [r3, #0]
			DiDo[i].DIN_Pin = DIN_Pin[i];
 8008476:	4a9c      	ldr	r2, [pc, #624]	; (80086e8 <set_dido+0x360>)
 8008478:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800847c:	f832 0013 	ldrh.w	r0, [r2, r3, lsl #1]
 8008480:	4997      	ldr	r1, [pc, #604]	; (80086e0 <set_dido+0x358>)
 8008482:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008486:	4613      	mov	r3, r2
 8008488:	009b      	lsls	r3, r3, #2
 800848a:	4413      	add	r3, r2
 800848c:	009b      	lsls	r3, r3, #2
 800848e:	440b      	add	r3, r1
 8008490:	3306      	adds	r3, #6
 8008492:	4602      	mov	r2, r0
 8008494:	801a      	strh	r2, [r3, #0]
			for(int j = 0; j < 8; j++)
 8008496:	2300      	movs	r3, #0
 8008498:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800849c:	e104      	b.n	80086a8 <set_dido+0x320>
			{
				if(strcmp(D_OUT, VIHOD[j]) == 0)
 800849e:	f107 0110 	add.w	r1, r7, #16
 80084a2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80084a6:	4613      	mov	r3, r2
 80084a8:	009b      	lsls	r3, r3, #2
 80084aa:	4413      	add	r3, r2
 80084ac:	005b      	lsls	r3, r3, #1
 80084ae:	440b      	add	r3, r1
 80084b0:	4619      	mov	r1, r3
 80084b2:	6878      	ldr	r0, [r7, #4]
 80084b4:	f7f7 fe8c 	bl	80001d0 <strcmp>
 80084b8:	4603      	mov	r3, r0
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	f040 80ef 	bne.w	800869e <set_dido+0x316>
				{
					DiDo[i].D_OUT = pVIHOD[j];
 80084c0:	4a8a      	ldr	r2, [pc, #552]	; (80086ec <set_dido+0x364>)
 80084c2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80084c6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80084ca:	4885      	ldr	r0, [pc, #532]	; (80086e0 <set_dido+0x358>)
 80084cc:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80084d0:	4613      	mov	r3, r2
 80084d2:	009b      	lsls	r3, r3, #2
 80084d4:	4413      	add	r3, r2
 80084d6:	009b      	lsls	r3, r3, #2
 80084d8:	4403      	add	r3, r0
 80084da:	3308      	adds	r3, #8
 80084dc:	6019      	str	r1, [r3, #0]
					DiDo[i].VAR_OUT = VAR_OUT;
 80084de:	4980      	ldr	r1, [pc, #512]	; (80086e0 <set_dido+0x358>)
 80084e0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80084e4:	4613      	mov	r3, r2
 80084e6:	009b      	lsls	r3, r3, #2
 80084e8:	4413      	add	r3, r2
 80084ea:	009b      	lsls	r3, r3, #2
 80084ec:	440b      	add	r3, r1
 80084ee:	330c      	adds	r3, #12
 80084f0:	7aba      	ldrb	r2, [r7, #10]
 80084f2:	701a      	strb	r2, [r3, #0]
					DiDo[i].OCD_Pin = OCD_Pin[j];
 80084f4:	4a7e      	ldr	r2, [pc, #504]	; (80086f0 <set_dido+0x368>)
 80084f6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80084fa:	f832 0013 	ldrh.w	r0, [r2, r3, lsl #1]
 80084fe:	4978      	ldr	r1, [pc, #480]	; (80086e0 <set_dido+0x358>)
 8008500:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008504:	4613      	mov	r3, r2
 8008506:	009b      	lsls	r3, r3, #2
 8008508:	4413      	add	r3, r2
 800850a:	009b      	lsls	r3, r3, #2
 800850c:	440b      	add	r3, r1
 800850e:	330e      	adds	r3, #14
 8008510:	4602      	mov	r2, r0
 8008512:	801a      	strh	r2, [r3, #0]
					if(HAL_GPIO_ReadPin(DiDo[i].D_IN, DiDo[i].DIN_Pin) != VAR_IN)	//(Если Вход1 == 0 то Выход3 = 1) Инверсная логика на входах оптопар
 8008514:	4972      	ldr	r1, [pc, #456]	; (80086e0 <set_dido+0x358>)
 8008516:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800851a:	4613      	mov	r3, r2
 800851c:	009b      	lsls	r3, r3, #2
 800851e:	4413      	add	r3, r2
 8008520:	009b      	lsls	r3, r3, #2
 8008522:	440b      	add	r3, r1
 8008524:	6818      	ldr	r0, [r3, #0]
 8008526:	496e      	ldr	r1, [pc, #440]	; (80086e0 <set_dido+0x358>)
 8008528:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800852c:	4613      	mov	r3, r2
 800852e:	009b      	lsls	r3, r3, #2
 8008530:	4413      	add	r3, r2
 8008532:	009b      	lsls	r3, r3, #2
 8008534:	440b      	add	r3, r1
 8008536:	3306      	adds	r3, #6
 8008538:	881b      	ldrh	r3, [r3, #0]
 800853a:	4619      	mov	r1, r3
 800853c:	f003 fab2 	bl	800baa4 <HAL_GPIO_ReadPin>
 8008540:	4603      	mov	r3, r0
 8008542:	461a      	mov	r2, r3
 8008544:	7afb      	ldrb	r3, [r7, #11]
 8008546:	4293      	cmp	r3, r2
 8008548:	d021      	beq.n	800858e <set_dido+0x206>
					{
						Status_OCD[j] = VAR_OUT;
 800854a:	4a6a      	ldr	r2, [pc, #424]	; (80086f4 <set_dido+0x36c>)
 800854c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008550:	4413      	add	r3, r2
 8008552:	7aba      	ldrb	r2, [r7, #10]
 8008554:	701a      	strb	r2, [r3, #0]
						HAL_GPIO_WritePin(DiDo[i].D_OUT, DiDo[i].OCD_Pin, VAR_OUT);
 8008556:	4962      	ldr	r1, [pc, #392]	; (80086e0 <set_dido+0x358>)
 8008558:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800855c:	4613      	mov	r3, r2
 800855e:	009b      	lsls	r3, r3, #2
 8008560:	4413      	add	r3, r2
 8008562:	009b      	lsls	r3, r3, #2
 8008564:	440b      	add	r3, r1
 8008566:	3308      	adds	r3, #8
 8008568:	6818      	ldr	r0, [r3, #0]
 800856a:	495d      	ldr	r1, [pc, #372]	; (80086e0 <set_dido+0x358>)
 800856c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008570:	4613      	mov	r3, r2
 8008572:	009b      	lsls	r3, r3, #2
 8008574:	4413      	add	r3, r2
 8008576:	009b      	lsls	r3, r3, #2
 8008578:	440b      	add	r3, r1
 800857a:	330e      	adds	r3, #14
 800857c:	881b      	ldrh	r3, [r3, #0]
 800857e:	7aba      	ldrb	r2, [r7, #10]
 8008580:	4619      	mov	r1, r3
 8008582:	f003 faa7 	bl	800bad4 <HAL_GPIO_WritePin>
						SEND_str("success...\n");
 8008586:	485c      	ldr	r0, [pc, #368]	; (80086f8 <set_dido+0x370>)
 8008588:	f7fa fb40 	bl	8002c0c <SEND_str>
 800858c:	e047      	b.n	800861e <set_dido+0x296>
					}
					else if(HAL_GPIO_ReadPin(DiDo[i].D_IN, DiDo[i].DIN_Pin) == VAR_IN)
 800858e:	4954      	ldr	r1, [pc, #336]	; (80086e0 <set_dido+0x358>)
 8008590:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008594:	4613      	mov	r3, r2
 8008596:	009b      	lsls	r3, r3, #2
 8008598:	4413      	add	r3, r2
 800859a:	009b      	lsls	r3, r3, #2
 800859c:	440b      	add	r3, r1
 800859e:	6818      	ldr	r0, [r3, #0]
 80085a0:	494f      	ldr	r1, [pc, #316]	; (80086e0 <set_dido+0x358>)
 80085a2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80085a6:	4613      	mov	r3, r2
 80085a8:	009b      	lsls	r3, r3, #2
 80085aa:	4413      	add	r3, r2
 80085ac:	009b      	lsls	r3, r3, #2
 80085ae:	440b      	add	r3, r1
 80085b0:	3306      	adds	r3, #6
 80085b2:	881b      	ldrh	r3, [r3, #0]
 80085b4:	4619      	mov	r1, r3
 80085b6:	f003 fa75 	bl	800baa4 <HAL_GPIO_ReadPin>
 80085ba:	4603      	mov	r3, r0
 80085bc:	461a      	mov	r2, r3
 80085be:	7afb      	ldrb	r3, [r7, #11]
 80085c0:	4293      	cmp	r3, r2
 80085c2:	d12c      	bne.n	800861e <set_dido+0x296>
					{
						Status_OCD[j] = !VAR_OUT;
 80085c4:	7abb      	ldrb	r3, [r7, #10]
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	bf0c      	ite	eq
 80085ca:	2301      	moveq	r3, #1
 80085cc:	2300      	movne	r3, #0
 80085ce:	b2db      	uxtb	r3, r3
 80085d0:	4619      	mov	r1, r3
 80085d2:	4a48      	ldr	r2, [pc, #288]	; (80086f4 <set_dido+0x36c>)
 80085d4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80085d8:	4413      	add	r3, r2
 80085da:	460a      	mov	r2, r1
 80085dc:	701a      	strb	r2, [r3, #0]
						HAL_GPIO_WritePin(DiDo[i].D_OUT, DiDo[i].OCD_Pin, !VAR_OUT);
 80085de:	4940      	ldr	r1, [pc, #256]	; (80086e0 <set_dido+0x358>)
 80085e0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80085e4:	4613      	mov	r3, r2
 80085e6:	009b      	lsls	r3, r3, #2
 80085e8:	4413      	add	r3, r2
 80085ea:	009b      	lsls	r3, r3, #2
 80085ec:	440b      	add	r3, r1
 80085ee:	3308      	adds	r3, #8
 80085f0:	6818      	ldr	r0, [r3, #0]
 80085f2:	493b      	ldr	r1, [pc, #236]	; (80086e0 <set_dido+0x358>)
 80085f4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80085f8:	4613      	mov	r3, r2
 80085fa:	009b      	lsls	r3, r3, #2
 80085fc:	4413      	add	r3, r2
 80085fe:	009b      	lsls	r3, r3, #2
 8008600:	440b      	add	r3, r1
 8008602:	330e      	adds	r3, #14
 8008604:	8819      	ldrh	r1, [r3, #0]
 8008606:	7abb      	ldrb	r3, [r7, #10]
 8008608:	2b00      	cmp	r3, #0
 800860a:	bf0c      	ite	eq
 800860c:	2301      	moveq	r3, #1
 800860e:	2300      	movne	r3, #0
 8008610:	b2db      	uxtb	r3, r3
 8008612:	461a      	mov	r2, r3
 8008614:	f003 fa5e 	bl	800bad4 <HAL_GPIO_WritePin>
						SEND_str("miss...\n");
 8008618:	4838      	ldr	r0, [pc, #224]	; (80086fc <set_dido+0x374>)
 800861a:	f7fa faf7 	bl	8002c0c <SEND_str>
					}

					//For Debug:
					//------------------------------------------------
					if(DiDo[i].D_IN == VHOD1)
 800861e:	4930      	ldr	r1, [pc, #192]	; (80086e0 <set_dido+0x358>)
 8008620:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008624:	4613      	mov	r3, r2
 8008626:	009b      	lsls	r3, r3, #2
 8008628:	4413      	add	r3, r2
 800862a:	009b      	lsls	r3, r3, #2
 800862c:	440b      	add	r3, r1
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	4a33      	ldr	r2, [pc, #204]	; (8008700 <set_dido+0x378>)
 8008632:	4293      	cmp	r3, r2
 8008634:	d102      	bne.n	800863c <set_dido+0x2b4>
						SEND_str("1 - success...\n");
 8008636:	4833      	ldr	r0, [pc, #204]	; (8008704 <set_dido+0x37c>)
 8008638:	f7fa fae8 	bl	8002c0c <SEND_str>
					if(DiDo[i].VAR_IN == VAR_IN)
 800863c:	4928      	ldr	r1, [pc, #160]	; (80086e0 <set_dido+0x358>)
 800863e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008642:	4613      	mov	r3, r2
 8008644:	009b      	lsls	r3, r3, #2
 8008646:	4413      	add	r3, r2
 8008648:	009b      	lsls	r3, r3, #2
 800864a:	440b      	add	r3, r1
 800864c:	3304      	adds	r3, #4
 800864e:	781b      	ldrb	r3, [r3, #0]
 8008650:	7afa      	ldrb	r2, [r7, #11]
 8008652:	429a      	cmp	r2, r3
 8008654:	d102      	bne.n	800865c <set_dido+0x2d4>
						SEND_str("2 - success...\n");
 8008656:	482c      	ldr	r0, [pc, #176]	; (8008708 <set_dido+0x380>)
 8008658:	f7fa fad8 	bl	8002c0c <SEND_str>
					if(DiDo[i].D_OUT == VIHOD3)
 800865c:	4920      	ldr	r1, [pc, #128]	; (80086e0 <set_dido+0x358>)
 800865e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008662:	4613      	mov	r3, r2
 8008664:	009b      	lsls	r3, r3, #2
 8008666:	4413      	add	r3, r2
 8008668:	009b      	lsls	r3, r3, #2
 800866a:	440b      	add	r3, r1
 800866c:	3308      	adds	r3, #8
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	4a26      	ldr	r2, [pc, #152]	; (800870c <set_dido+0x384>)
 8008672:	4293      	cmp	r3, r2
 8008674:	d102      	bne.n	800867c <set_dido+0x2f4>
						SEND_str("3 - success...\n");
 8008676:	4826      	ldr	r0, [pc, #152]	; (8008710 <set_dido+0x388>)
 8008678:	f7fa fac8 	bl	8002c0c <SEND_str>
					if(DiDo[i].VAR_OUT == VAR_OUT)
 800867c:	4918      	ldr	r1, [pc, #96]	; (80086e0 <set_dido+0x358>)
 800867e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008682:	4613      	mov	r3, r2
 8008684:	009b      	lsls	r3, r3, #2
 8008686:	4413      	add	r3, r2
 8008688:	009b      	lsls	r3, r3, #2
 800868a:	440b      	add	r3, r1
 800868c:	330c      	adds	r3, #12
 800868e:	781b      	ldrb	r3, [r3, #0]
 8008690:	7aba      	ldrb	r2, [r7, #10]
 8008692:	429a      	cmp	r2, r3
 8008694:	d10e      	bne.n	80086b4 <set_dido+0x32c>
						SEND_str("4 - success...\n");
 8008696:	481f      	ldr	r0, [pc, #124]	; (8008714 <set_dido+0x38c>)
 8008698:	f7fa fab8 	bl	8002c0c <SEND_str>
					//------------------------------------------------

					break;
 800869c:	e00a      	b.n	80086b4 <set_dido+0x32c>
			for(int j = 0; j < 8; j++)
 800869e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80086a2:	3301      	adds	r3, #1
 80086a4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80086a8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80086ac:	2b07      	cmp	r3, #7
 80086ae:	f77f aef6 	ble.w	800849e <set_dido+0x116>
				}
			}
			break;
 80086b2:	e00c      	b.n	80086ce <set_dido+0x346>
					break;
 80086b4:	bf00      	nop
			break;
 80086b6:	e00a      	b.n	80086ce <set_dido+0x346>
	for(int i = 0; i < 8; i++)
 80086b8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80086bc:	3301      	adds	r3, #1
 80086be:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80086c2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80086c6:	2b07      	cmp	r3, #7
 80086c8:	f77f ae7c 	ble.w	80083c4 <set_dido+0x3c>
		}
	}
}
 80086cc:	bf00      	nop
 80086ce:	bf00      	nop
 80086d0:	37b8      	adds	r7, #184	; 0xb8
 80086d2:	46bd      	mov	sp, r7
 80086d4:	bd80      	pop	{r7, pc}
 80086d6:	bf00      	nop
 80086d8:	08020990 	.word	0x08020990
 80086dc:	080209e0 	.word	0x080209e0
 80086e0:	20000760 	.word	0x20000760
 80086e4:	20000010 	.word	0x20000010
 80086e8:	20000050 	.word	0x20000050
 80086ec:	20000030 	.word	0x20000030
 80086f0:	20000060 	.word	0x20000060
 80086f4:	200004a4 	.word	0x200004a4
 80086f8:	08020938 	.word	0x08020938
 80086fc:	08020944 	.word	0x08020944
 8008700:	40020c00 	.word	0x40020c00
 8008704:	08020950 	.word	0x08020950
 8008708:	08020960 	.word	0x08020960
 800870c:	40020400 	.word	0x40020400
 8008710:	08020970 	.word	0x08020970
 8008714:	08020980 	.word	0x08020980

08008718 <set_aido>:
//Принимает "RANGE_LOW" - нижний предел значений
//Принимает "RANGE_HIGH" - верхний предел значений
//Принимает "D_OUT" - строку с номером цифрового выхода
//Принимает "VAR_OUT" - переменная состояния выхода
void set_aido(char *A_IN, double RANGE_LOW, double RANGE_HIGH, char *D_OUT, uint8_t VAR_OUT)
{
 8008718:	b5b0      	push	{r4, r5, r7, lr}
 800871a:	b0b2      	sub	sp, #200	; 0xc8
 800871c:	af00      	add	r7, sp, #0
 800871e:	61f8      	str	r0, [r7, #28]
 8008720:	ed87 0b04 	vstr	d0, [r7, #16]
 8008724:	ed87 1b02 	vstr	d1, [r7, #8]
 8008728:	61b9      	str	r1, [r7, #24]
 800872a:	4613      	mov	r3, r2
 800872c:	71fb      	strb	r3, [r7, #7]
	char VHOD[4][10] = {"VHOD1", "VHOD2", "VHOD3", "VHOD4"};
 800872e:	4b93      	ldr	r3, [pc, #588]	; (800897c <set_aido+0x264>)
 8008730:	f107 0498 	add.w	r4, r7, #152	; 0x98
 8008734:	461d      	mov	r5, r3
 8008736:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008738:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800873a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800873c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800873e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8008742:	e884 0003 	stmia.w	r4, {r0, r1}
	char VIHOD[8][10] = {"VIHOD1", "VIHOD2", "VIHOD3", "VIHOD4", "VIHOD5", "VIHOD6", "VIHOD7", "VIHOD8"};
 8008746:	4a8e      	ldr	r2, [pc, #568]	; (8008980 <set_aido+0x268>)
 8008748:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800874c:	4611      	mov	r1, r2
 800874e:	2250      	movs	r2, #80	; 0x50
 8008750:	4618      	mov	r0, r3
 8008752:	f012 f8c1 	bl	801a8d8 <memcpy>

	uint8_t pVHOD[4] = {ADC1_IN3, ADC1_IN4, ADC1_IN5, ADC1_IN6};
 8008756:	4b8b      	ldr	r3, [pc, #556]	; (8008984 <set_aido+0x26c>)
 8008758:	647b      	str	r3, [r7, #68]	; 0x44

	for(int i = 0; i < 4; i++)
 800875a:	2300      	movs	r3, #0
 800875c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008760:	e102      	b.n	8008968 <set_aido+0x250>
	{
		if(strcmp(A_IN, VHOD[i]) == 0)
 8008762:	f107 0198 	add.w	r1, r7, #152	; 0x98
 8008766:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800876a:	4613      	mov	r3, r2
 800876c:	009b      	lsls	r3, r3, #2
 800876e:	4413      	add	r3, r2
 8008770:	005b      	lsls	r3, r3, #1
 8008772:	440b      	add	r3, r1
 8008774:	4619      	mov	r1, r3
 8008776:	69f8      	ldr	r0, [r7, #28]
 8008778:	f7f7 fd2a 	bl	80001d0 <strcmp>
 800877c:	4603      	mov	r3, r0
 800877e:	2b00      	cmp	r3, #0
 8008780:	f040 80ed 	bne.w	800895e <set_aido+0x246>
		{
			if(AiDo[i].clrFlag != false)
 8008784:	4980      	ldr	r1, [pc, #512]	; (8008988 <set_aido+0x270>)
 8008786:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800878a:	4613      	mov	r3, r2
 800878c:	009b      	lsls	r3, r3, #2
 800878e:	4413      	add	r3, r2
 8008790:	00db      	lsls	r3, r3, #3
 8008792:	440b      	add	r3, r1
 8008794:	3321      	adds	r3, #33	; 0x21
 8008796:	781b      	ldrb	r3, [r3, #0]
 8008798:	2b00      	cmp	r3, #0
 800879a:	d017      	beq.n	80087cc <set_aido+0xb4>
				HAL_GPIO_WritePin(AiDo[i].D_OUT, AiDo[i].OCD_Pin, RESET);
 800879c:	497a      	ldr	r1, [pc, #488]	; (8008988 <set_aido+0x270>)
 800879e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80087a2:	4613      	mov	r3, r2
 80087a4:	009b      	lsls	r3, r3, #2
 80087a6:	4413      	add	r3, r2
 80087a8:	00db      	lsls	r3, r3, #3
 80087aa:	440b      	add	r3, r1
 80087ac:	3318      	adds	r3, #24
 80087ae:	6818      	ldr	r0, [r3, #0]
 80087b0:	4975      	ldr	r1, [pc, #468]	; (8008988 <set_aido+0x270>)
 80087b2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80087b6:	4613      	mov	r3, r2
 80087b8:	009b      	lsls	r3, r3, #2
 80087ba:	4413      	add	r3, r2
 80087bc:	00db      	lsls	r3, r3, #3
 80087be:	440b      	add	r3, r1
 80087c0:	331e      	adds	r3, #30
 80087c2:	881b      	ldrh	r3, [r3, #0]
 80087c4:	2200      	movs	r2, #0
 80087c6:	4619      	mov	r1, r3
 80087c8:	f003 f984 	bl	800bad4 <HAL_GPIO_WritePin>

			AiDo[i].clrFlag = true;
 80087cc:	496e      	ldr	r1, [pc, #440]	; (8008988 <set_aido+0x270>)
 80087ce:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80087d2:	4613      	mov	r3, r2
 80087d4:	009b      	lsls	r3, r3, #2
 80087d6:	4413      	add	r3, r2
 80087d8:	00db      	lsls	r3, r3, #3
 80087da:	440b      	add	r3, r1
 80087dc:	3321      	adds	r3, #33	; 0x21
 80087de:	2201      	movs	r2, #1
 80087e0:	701a      	strb	r2, [r3, #0]
			AiDo[i].A_IN = pVHOD[i];
 80087e2:	f107 0244 	add.w	r2, r7, #68	; 0x44
 80087e6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80087ea:	4413      	add	r3, r2
 80087ec:	7818      	ldrb	r0, [r3, #0]
 80087ee:	4966      	ldr	r1, [pc, #408]	; (8008988 <set_aido+0x270>)
 80087f0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80087f4:	4613      	mov	r3, r2
 80087f6:	009b      	lsls	r3, r3, #2
 80087f8:	4413      	add	r3, r2
 80087fa:	00db      	lsls	r3, r3, #3
 80087fc:	440b      	add	r3, r1
 80087fe:	4602      	mov	r2, r0
 8008800:	701a      	strb	r2, [r3, #0]
			AiDo[i].RANGE_LOW = RANGE_LOW;
 8008802:	4961      	ldr	r1, [pc, #388]	; (8008988 <set_aido+0x270>)
 8008804:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008808:	4613      	mov	r3, r2
 800880a:	009b      	lsls	r3, r3, #2
 800880c:	4413      	add	r3, r2
 800880e:	00db      	lsls	r3, r3, #3
 8008810:	440b      	add	r3, r1
 8008812:	f103 0108 	add.w	r1, r3, #8
 8008816:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800881a:	e9c1 2300 	strd	r2, r3, [r1]
			AiDo[i].RANGE_HIGH = RANGE_HIGH;
 800881e:	495a      	ldr	r1, [pc, #360]	; (8008988 <set_aido+0x270>)
 8008820:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008824:	4613      	mov	r3, r2
 8008826:	009b      	lsls	r3, r3, #2
 8008828:	4413      	add	r3, r2
 800882a:	00db      	lsls	r3, r3, #3
 800882c:	440b      	add	r3, r1
 800882e:	f103 0110 	add.w	r1, r3, #16
 8008832:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008836:	e9c1 2300 	strd	r2, r3, [r1]
			//DiDo[i].DIN_Pin = DIN_Pin[i];
			for(int j = 0; j < 8; j++)
 800883a:	2300      	movs	r3, #0
 800883c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008840:	e087      	b.n	8008952 <set_aido+0x23a>
			{
				if(strcmp(D_OUT, VIHOD[j]) == 0)
 8008842:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8008846:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800884a:	4613      	mov	r3, r2
 800884c:	009b      	lsls	r3, r3, #2
 800884e:	4413      	add	r3, r2
 8008850:	005b      	lsls	r3, r3, #1
 8008852:	440b      	add	r3, r1
 8008854:	4619      	mov	r1, r3
 8008856:	69b8      	ldr	r0, [r7, #24]
 8008858:	f7f7 fcba 	bl	80001d0 <strcmp>
 800885c:	4603      	mov	r3, r0
 800885e:	2b00      	cmp	r3, #0
 8008860:	d172      	bne.n	8008948 <set_aido+0x230>
				{
					AiDo[i].D_OUT = pVIHOD[j];
 8008862:	4a4a      	ldr	r2, [pc, #296]	; (800898c <set_aido+0x274>)
 8008864:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008868:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800886c:	4846      	ldr	r0, [pc, #280]	; (8008988 <set_aido+0x270>)
 800886e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008872:	4613      	mov	r3, r2
 8008874:	009b      	lsls	r3, r3, #2
 8008876:	4413      	add	r3, r2
 8008878:	00db      	lsls	r3, r3, #3
 800887a:	4403      	add	r3, r0
 800887c:	3318      	adds	r3, #24
 800887e:	6019      	str	r1, [r3, #0]
					AiDo[i].VAR_OUT = VAR_OUT;
 8008880:	4941      	ldr	r1, [pc, #260]	; (8008988 <set_aido+0x270>)
 8008882:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008886:	4613      	mov	r3, r2
 8008888:	009b      	lsls	r3, r3, #2
 800888a:	4413      	add	r3, r2
 800888c:	00db      	lsls	r3, r3, #3
 800888e:	440b      	add	r3, r1
 8008890:	331c      	adds	r3, #28
 8008892:	79fa      	ldrb	r2, [r7, #7]
 8008894:	701a      	strb	r2, [r3, #0]
					AiDo[i].OCD_Pin = OCD_Pin[j];
 8008896:	4a3e      	ldr	r2, [pc, #248]	; (8008990 <set_aido+0x278>)
 8008898:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800889c:	f832 0013 	ldrh.w	r0, [r2, r3, lsl #1]
 80088a0:	4939      	ldr	r1, [pc, #228]	; (8008988 <set_aido+0x270>)
 80088a2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80088a6:	4613      	mov	r3, r2
 80088a8:	009b      	lsls	r3, r3, #2
 80088aa:	4413      	add	r3, r2
 80088ac:	00db      	lsls	r3, r3, #3
 80088ae:	440b      	add	r3, r1
 80088b0:	331e      	adds	r3, #30
 80088b2:	4602      	mov	r2, r0
 80088b4:	801a      	strh	r2, [r3, #0]

					//For Debug:
					//------------------------------------------------
					char Buff[32];
					SEND_str("SET VALUE: ");
 80088b6:	4837      	ldr	r0, [pc, #220]	; (8008994 <set_aido+0x27c>)
 80088b8:	f7fa f9a8 	bl	8002c0c <SEND_str>
					sprintf(Buff, "%.3f", adcValue[i]);
 80088bc:	4a36      	ldr	r2, [pc, #216]	; (8008998 <set_aido+0x280>)
 80088be:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80088c2:	00db      	lsls	r3, r3, #3
 80088c4:	4413      	add	r3, r2
 80088c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088ca:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80088ce:	4933      	ldr	r1, [pc, #204]	; (800899c <set_aido+0x284>)
 80088d0:	f012 fde2 	bl	801b498 <siprintf>
					SEND_str(Buff);
 80088d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80088d8:	4618      	mov	r0, r3
 80088da:	f7fa f997 	bl	8002c0c <SEND_str>
					SEND_str("\nRANGE_LOW: ");
 80088de:	4830      	ldr	r0, [pc, #192]	; (80089a0 <set_aido+0x288>)
 80088e0:	f7fa f994 	bl	8002c0c <SEND_str>
					sprintf(Buff, "%.3f", AiDo[i].RANGE_LOW);
 80088e4:	4928      	ldr	r1, [pc, #160]	; (8008988 <set_aido+0x270>)
 80088e6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80088ea:	4613      	mov	r3, r2
 80088ec:	009b      	lsls	r3, r3, #2
 80088ee:	4413      	add	r3, r2
 80088f0:	00db      	lsls	r3, r3, #3
 80088f2:	440b      	add	r3, r1
 80088f4:	3308      	adds	r3, #8
 80088f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088fa:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80088fe:	4927      	ldr	r1, [pc, #156]	; (800899c <set_aido+0x284>)
 8008900:	f012 fdca 	bl	801b498 <siprintf>
					SEND_str(Buff);
 8008904:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008908:	4618      	mov	r0, r3
 800890a:	f7fa f97f 	bl	8002c0c <SEND_str>
					SEND_str("\nRANGE_HIGH: ");
 800890e:	4825      	ldr	r0, [pc, #148]	; (80089a4 <set_aido+0x28c>)
 8008910:	f7fa f97c 	bl	8002c0c <SEND_str>
					sprintf(Buff, "%.3f", AiDo[i].RANGE_HIGH);
 8008914:	491c      	ldr	r1, [pc, #112]	; (8008988 <set_aido+0x270>)
 8008916:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800891a:	4613      	mov	r3, r2
 800891c:	009b      	lsls	r3, r3, #2
 800891e:	4413      	add	r3, r2
 8008920:	00db      	lsls	r3, r3, #3
 8008922:	440b      	add	r3, r1
 8008924:	3310      	adds	r3, #16
 8008926:	e9d3 2300 	ldrd	r2, r3, [r3]
 800892a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800892e:	491b      	ldr	r1, [pc, #108]	; (800899c <set_aido+0x284>)
 8008930:	f012 fdb2 	bl	801b498 <siprintf>
					SEND_str(Buff);
 8008934:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008938:	4618      	mov	r0, r3
 800893a:	f7fa f967 	bl	8002c0c <SEND_str>
					SEND_str("\n");
 800893e:	481a      	ldr	r0, [pc, #104]	; (80089a8 <set_aido+0x290>)
 8008940:	f7fa f964 	bl	8002c0c <SEND_str>
					//------------------------------------------------

					break;
 8008944:	bf00      	nop
				}
			}
			break;
 8008946:	e015      	b.n	8008974 <set_aido+0x25c>
			for(int j = 0; j < 8; j++)
 8008948:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800894c:	3301      	adds	r3, #1
 800894e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008952:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008956:	2b07      	cmp	r3, #7
 8008958:	f77f af73 	ble.w	8008842 <set_aido+0x12a>
			break;
 800895c:	e00a      	b.n	8008974 <set_aido+0x25c>
	for(int i = 0; i < 4; i++)
 800895e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008962:	3301      	adds	r3, #1
 8008964:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008968:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800896c:	2b03      	cmp	r3, #3
 800896e:	f77f aef8 	ble.w	8008762 <set_aido+0x4a>
		}
	}
}
 8008972:	bf00      	nop
 8008974:	bf00      	nop
 8008976:	37c8      	adds	r7, #200	; 0xc8
 8008978:	46bd      	mov	sp, r7
 800897a:	bdb0      	pop	{r4, r5, r7, pc}
 800897c:	08020a68 	.word	0x08020a68
 8008980:	080209e0 	.word	0x080209e0
 8008984:	04030201 	.word	0x04030201
 8008988:	200006c0 	.word	0x200006c0
 800898c:	20000030 	.word	0x20000030
 8008990:	20000060 	.word	0x20000060
 8008994:	08020a30 	.word	0x08020a30
 8008998:	20000310 	.word	0x20000310
 800899c:	08020a3c 	.word	0x08020a3c
 80089a0:	08020a44 	.word	0x08020a44
 80089a4:	08020a54 	.word	0x08020a54
 80089a8:	08020a64 	.word	0x08020a64

080089ac <set_pwm>:
//Задать сигнал ШИМ на одном выходе
//Принимает "PWM_OUT" - строку с номером ШИМ выхода
//Принимает "D_CYCLE" - коэффициент заполнения ШИМ
void set_pwm(char *PWM_OUT, uint32_t D_CYCLE)
{
 80089ac:	b5b0      	push	{r4, r5, r7, lr}
 80089ae:	b094      	sub	sp, #80	; 0x50
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	6078      	str	r0, [r7, #4]
 80089b4:	6039      	str	r1, [r7, #0]
	char PVIHOD[4][5] = {"PWM1", "PWM2", "PWM3", "PWM4"};
 80089b6:	4b4b      	ldr	r3, [pc, #300]	; (8008ae4 <set_pwm+0x138>)
 80089b8:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80089bc:	461d      	mov	r5, r3
 80089be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80089c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80089c2:	682b      	ldr	r3, [r5, #0]
 80089c4:	6023      	str	r3, [r4, #0]
	uint32_t PWM_Channel[4] = {TIM_CHANNEL_1, TIM_CHANNEL_2, TIM_CHANNEL_3, TIM_CHANNEL_4};
 80089c6:	4b48      	ldr	r3, [pc, #288]	; (8008ae8 <set_pwm+0x13c>)
 80089c8:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80089cc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80089ce:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	for(int i = 0; i < 4; i++)
 80089d2:	2300      	movs	r3, #0
 80089d4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80089d6:	e07c      	b.n	8008ad2 <set_pwm+0x126>
	{
		if(strcmp(PWM_OUT, PVIHOD[i]) == 0)
 80089d8:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80089dc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80089de:	4613      	mov	r3, r2
 80089e0:	009b      	lsls	r3, r3, #2
 80089e2:	4413      	add	r3, r2
 80089e4:	440b      	add	r3, r1
 80089e6:	4619      	mov	r1, r3
 80089e8:	6878      	ldr	r0, [r7, #4]
 80089ea:	f7f7 fbf1 	bl	80001d0 <strcmp>
 80089ee:	4603      	mov	r3, r0
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d16b      	bne.n	8008acc <set_pwm+0x120>
		{
			if(PWM[i].clrFlag != false)
 80089f4:	4a3d      	ldr	r2, [pc, #244]	; (8008aec <set_pwm+0x140>)
 80089f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80089f8:	00db      	lsls	r3, r3, #3
 80089fa:	4413      	add	r3, r2
 80089fc:	799b      	ldrb	r3, [r3, #6]
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d00b      	beq.n	8008a1a <set_pwm+0x6e>
				HAL_TIM_PWM_Start_DMA(&htim3, PWM_Channel[i], 0, 1);
 8008a02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a04:	009b      	lsls	r3, r3, #2
 8008a06:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8008a0a:	4413      	add	r3, r2
 8008a0c:	f853 1c28 	ldr.w	r1, [r3, #-40]
 8008a10:	2301      	movs	r3, #1
 8008a12:	2200      	movs	r2, #0
 8008a14:	4836      	ldr	r0, [pc, #216]	; (8008af0 <set_pwm+0x144>)
 8008a16:	f004 fac3 	bl	800cfa0 <HAL_TIM_PWM_Start_DMA>

			PWM[i].clrFlag = true;
 8008a1a:	4a34      	ldr	r2, [pc, #208]	; (8008aec <set_pwm+0x140>)
 8008a1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a1e:	00db      	lsls	r3, r3, #3
 8008a20:	4413      	add	r3, r2
 8008a22:	2201      	movs	r2, #1
 8008a24:	719a      	strb	r2, [r3, #6]
			PWM[i].PWM_Channel = PWM_Channel[i];
 8008a26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a28:	009b      	lsls	r3, r3, #2
 8008a2a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8008a2e:	4413      	add	r3, r2
 8008a30:	f853 2c28 	ldr.w	r2, [r3, #-40]
 8008a34:	492d      	ldr	r1, [pc, #180]	; (8008aec <set_pwm+0x140>)
 8008a36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a38:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
			PWM[i].D_CYCLE[0] = (D_CYCLE * 100);
 8008a3c:	683b      	ldr	r3, [r7, #0]
 8008a3e:	b29b      	uxth	r3, r3
 8008a40:	461a      	mov	r2, r3
 8008a42:	0092      	lsls	r2, r2, #2
 8008a44:	4413      	add	r3, r2
 8008a46:	461a      	mov	r2, r3
 8008a48:	0091      	lsls	r1, r2, #2
 8008a4a:	461a      	mov	r2, r3
 8008a4c:	460b      	mov	r3, r1
 8008a4e:	4413      	add	r3, r2
 8008a50:	009b      	lsls	r3, r3, #2
 8008a52:	b299      	uxth	r1, r3
 8008a54:	4a25      	ldr	r2, [pc, #148]	; (8008aec <set_pwm+0x140>)
 8008a56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a58:	00db      	lsls	r3, r3, #3
 8008a5a:	4413      	add	r3, r2
 8008a5c:	460a      	mov	r2, r1
 8008a5e:	809a      	strh	r2, [r3, #4]
			HAL_TIM_PWM_Start_DMA(&htim3, PWM_Channel[i], (uint32_t*)PWM[i].D_CYCLE, 1);
 8008a60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a62:	009b      	lsls	r3, r3, #2
 8008a64:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8008a68:	4413      	add	r3, r2
 8008a6a:	f853 1c28 	ldr.w	r1, [r3, #-40]
 8008a6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a70:	00db      	lsls	r3, r3, #3
 8008a72:	4a1e      	ldr	r2, [pc, #120]	; (8008aec <set_pwm+0x140>)
 8008a74:	4413      	add	r3, r2
 8008a76:	1d1a      	adds	r2, r3, #4
 8008a78:	2301      	movs	r3, #1
 8008a7a:	481d      	ldr	r0, [pc, #116]	; (8008af0 <set_pwm+0x144>)
 8008a7c:	f004 fa90 	bl	800cfa0 <HAL_TIM_PWM_Start_DMA>

			//For Debug:
			//------------------------------------------------
			char Buff[32];
			SEND_str("PWM_OUT: ");
 8008a80:	481c      	ldr	r0, [pc, #112]	; (8008af4 <set_pwm+0x148>)
 8008a82:	f7fa f8c3 	bl	8002c0c <SEND_str>
			SEND_str(PVIHOD[i]);
 8008a86:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8008a8a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008a8c:	4613      	mov	r3, r2
 8008a8e:	009b      	lsls	r3, r3, #2
 8008a90:	4413      	add	r3, r2
 8008a92:	440b      	add	r3, r1
 8008a94:	4618      	mov	r0, r3
 8008a96:	f7fa f8b9 	bl	8002c0c <SEND_str>
			SEND_str("\n");
 8008a9a:	4817      	ldr	r0, [pc, #92]	; (8008af8 <set_pwm+0x14c>)
 8008a9c:	f7fa f8b6 	bl	8002c0c <SEND_str>
			SEND_str("DUTY_CYCLE: ");
 8008aa0:	4816      	ldr	r0, [pc, #88]	; (8008afc <set_pwm+0x150>)
 8008aa2:	f7fa f8b3 	bl	8002c0c <SEND_str>
			sprintf(Buff, "%d", D_CYCLE);
 8008aa6:	f107 0308 	add.w	r3, r7, #8
 8008aaa:	683a      	ldr	r2, [r7, #0]
 8008aac:	4914      	ldr	r1, [pc, #80]	; (8008b00 <set_pwm+0x154>)
 8008aae:	4618      	mov	r0, r3
 8008ab0:	f012 fcf2 	bl	801b498 <siprintf>
			SEND_str(Buff);
 8008ab4:	f107 0308 	add.w	r3, r7, #8
 8008ab8:	4618      	mov	r0, r3
 8008aba:	f7fa f8a7 	bl	8002c0c <SEND_str>
			SEND_str("%");
 8008abe:	4811      	ldr	r0, [pc, #68]	; (8008b04 <set_pwm+0x158>)
 8008ac0:	f7fa f8a4 	bl	8002c0c <SEND_str>
			SEND_str("\n");
 8008ac4:	480c      	ldr	r0, [pc, #48]	; (8008af8 <set_pwm+0x14c>)
 8008ac6:	f7fa f8a1 	bl	8002c0c <SEND_str>
			//------------------------------------------------

			break;
 8008aca:	e007      	b.n	8008adc <set_pwm+0x130>
	for(int i = 0; i < 4; i++)
 8008acc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ace:	3301      	adds	r3, #1
 8008ad0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008ad2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ad4:	2b03      	cmp	r3, #3
 8008ad6:	f77f af7f 	ble.w	80089d8 <set_pwm+0x2c>
		}
	}
}
 8008ada:	bf00      	nop
 8008adc:	bf00      	nop
 8008ade:	3750      	adds	r7, #80	; 0x50
 8008ae0:	46bd      	mov	sp, r7
 8008ae2:	bdb0      	pop	{r4, r5, r7, pc}
 8008ae4:	08020ab4 	.word	0x08020ab4
 8008ae8:	08020ac8 	.word	0x08020ac8
 8008aec:	200006a0 	.word	0x200006a0
 8008af0:	20000aa0 	.word	0x20000aa0
 8008af4:	08020a90 	.word	0x08020a90
 8008af8:	08020a64 	.word	0x08020a64
 8008afc:	08020a9c 	.word	0x08020a9c
 8008b00:	08020aac 	.word	0x08020aac
 8008b04:	08020ab0 	.word	0x08020ab0

08008b08 <set_temperature>:
//Принимает "RANGE_TEMP_LOW" - нижний предел значения температуры
//Принимает "RANGE_TEMP_HIGH" - верхний предел значения температуры
//Принимает "D_OUT" - строку с номером цифрового выхода
//Принимает "VAR_OUT" - переменная состояния выхода
void set_temperature(char *ROM_RAW, double RANGE_TEMP_LOW, double RANGE_TEMP_HIGH, char *D_OUT, uint8_t VAR_OUT)
{
 8008b08:	b580      	push	{r7, lr}
 8008b0a:	b0a8      	sub	sp, #160	; 0xa0
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	61f8      	str	r0, [r7, #28]
 8008b10:	ed87 0b04 	vstr	d0, [r7, #16]
 8008b14:	ed87 1b02 	vstr	d1, [r7, #8]
 8008b18:	61b9      	str	r1, [r7, #24]
 8008b1a:	4613      	mov	r3, r2
 8008b1c:	71fb      	strb	r3, [r7, #7]
	char VIHOD[8][10] = {"VIHOD1", "VIHOD2", "VIHOD3", "VIHOD4", "VIHOD5", "VIHOD6", "VIHOD7", "VIHOD8"};
 8008b1e:	4aa2      	ldr	r2, [pc, #648]	; (8008da8 <set_temperature+0x2a0>)
 8008b20:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8008b24:	4611      	mov	r1, r2
 8008b26:	2250      	movs	r2, #80	; 0x50
 8008b28:	4618      	mov	r0, r3
 8008b2a:	f011 fed5 	bl	801a8d8 <memcpy>

	for(int i = 0; i < AMT_TEMP_SENS; i++)
 8008b2e:	2300      	movs	r3, #0
 8008b30:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008b34:	e12e      	b.n	8008d94 <set_temperature+0x28c>
	{
		if(strcmp(ROM_RAW, Device_RAW_ROM[i]) == 0)
 8008b36:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8008b3a:	4613      	mov	r3, r2
 8008b3c:	009b      	lsls	r3, r3, #2
 8008b3e:	4413      	add	r3, r2
 8008b40:	009b      	lsls	r3, r3, #2
 8008b42:	4a9a      	ldr	r2, [pc, #616]	; (8008dac <set_temperature+0x2a4>)
 8008b44:	4413      	add	r3, r2
 8008b46:	4619      	mov	r1, r3
 8008b48:	69f8      	ldr	r0, [r7, #28]
 8008b4a:	f7f7 fb41 	bl	80001d0 <strcmp>
 8008b4e:	4603      	mov	r3, r0
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	f040 811a 	bne.w	8008d8a <set_temperature+0x282>
		{
			if(TSiDo[i].clrFlag != false)
 8008b56:	4996      	ldr	r1, [pc, #600]	; (8008db0 <set_temperature+0x2a8>)
 8008b58:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8008b5c:	4613      	mov	r3, r2
 8008b5e:	00db      	lsls	r3, r3, #3
 8008b60:	1a9b      	subs	r3, r3, r2
 8008b62:	00db      	lsls	r3, r3, #3
 8008b64:	440b      	add	r3, r1
 8008b66:	3330      	adds	r3, #48	; 0x30
 8008b68:	781b      	ldrb	r3, [r3, #0]
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d017      	beq.n	8008b9e <set_temperature+0x96>
				HAL_GPIO_WritePin(TSiDo[i].D_OUT, TSiDo[i].OCD_Pin, RESET);
 8008b6e:	4990      	ldr	r1, [pc, #576]	; (8008db0 <set_temperature+0x2a8>)
 8008b70:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8008b74:	4613      	mov	r3, r2
 8008b76:	00db      	lsls	r3, r3, #3
 8008b78:	1a9b      	subs	r3, r3, r2
 8008b7a:	00db      	lsls	r3, r3, #3
 8008b7c:	440b      	add	r3, r1
 8008b7e:	3328      	adds	r3, #40	; 0x28
 8008b80:	6818      	ldr	r0, [r3, #0]
 8008b82:	498b      	ldr	r1, [pc, #556]	; (8008db0 <set_temperature+0x2a8>)
 8008b84:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8008b88:	4613      	mov	r3, r2
 8008b8a:	00db      	lsls	r3, r3, #3
 8008b8c:	1a9b      	subs	r3, r3, r2
 8008b8e:	00db      	lsls	r3, r3, #3
 8008b90:	440b      	add	r3, r1
 8008b92:	332e      	adds	r3, #46	; 0x2e
 8008b94:	881b      	ldrh	r3, [r3, #0]
 8008b96:	2200      	movs	r2, #0
 8008b98:	4619      	mov	r1, r3
 8008b9a:	f002 ff9b 	bl	800bad4 <HAL_GPIO_WritePin>

			TSiDo[i].clrFlag = true;
 8008b9e:	4984      	ldr	r1, [pc, #528]	; (8008db0 <set_temperature+0x2a8>)
 8008ba0:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8008ba4:	4613      	mov	r3, r2
 8008ba6:	00db      	lsls	r3, r3, #3
 8008ba8:	1a9b      	subs	r3, r3, r2
 8008baa:	00db      	lsls	r3, r3, #3
 8008bac:	440b      	add	r3, r1
 8008bae:	3330      	adds	r3, #48	; 0x30
 8008bb0:	2201      	movs	r2, #1
 8008bb2:	701a      	strb	r2, [r3, #0]
			TSiDo[i].DEVICE_NUMBER = i+1;
 8008bb4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008bb8:	b2db      	uxtb	r3, r3
 8008bba:	3301      	adds	r3, #1
 8008bbc:	b2d8      	uxtb	r0, r3
 8008bbe:	497c      	ldr	r1, [pc, #496]	; (8008db0 <set_temperature+0x2a8>)
 8008bc0:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8008bc4:	4613      	mov	r3, r2
 8008bc6:	00db      	lsls	r3, r3, #3
 8008bc8:	1a9b      	subs	r3, r3, r2
 8008bca:	00db      	lsls	r3, r3, #3
 8008bcc:	440b      	add	r3, r1
 8008bce:	4602      	mov	r2, r0
 8008bd0:	701a      	strb	r2, [r3, #0]
			for(int j = 0; j < 16; j++)
 8008bd2:	2300      	movs	r3, #0
 8008bd4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008bd8:	e01e      	b.n	8008c18 <set_temperature+0x110>
				TSiDo[i].ROM_RAW[j] = Device_RAW_ROM[i][j];
 8008bda:	4974      	ldr	r1, [pc, #464]	; (8008dac <set_temperature+0x2a4>)
 8008bdc:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8008be0:	4613      	mov	r3, r2
 8008be2:	009b      	lsls	r3, r3, #2
 8008be4:	4413      	add	r3, r2
 8008be6:	009b      	lsls	r3, r3, #2
 8008be8:	18ca      	adds	r2, r1, r3
 8008bea:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008bee:	4413      	add	r3, r2
 8008bf0:	7818      	ldrb	r0, [r3, #0]
 8008bf2:	496f      	ldr	r1, [pc, #444]	; (8008db0 <set_temperature+0x2a8>)
 8008bf4:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8008bf8:	4613      	mov	r3, r2
 8008bfa:	00db      	lsls	r3, r3, #3
 8008bfc:	1a9b      	subs	r3, r3, r2
 8008bfe:	00db      	lsls	r3, r3, #3
 8008c00:	18ca      	adds	r2, r1, r3
 8008c02:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008c06:	4413      	add	r3, r2
 8008c08:	3301      	adds	r3, #1
 8008c0a:	4602      	mov	r2, r0
 8008c0c:	701a      	strb	r2, [r3, #0]
			for(int j = 0; j < 16; j++)
 8008c0e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008c12:	3301      	adds	r3, #1
 8008c14:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008c18:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008c1c:	2b0f      	cmp	r3, #15
 8008c1e:	dddc      	ble.n	8008bda <set_temperature+0xd2>
			TSiDo[i].RANGE_TEMP_LOW = RANGE_TEMP_LOW;
 8008c20:	4963      	ldr	r1, [pc, #396]	; (8008db0 <set_temperature+0x2a8>)
 8008c22:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8008c26:	4613      	mov	r3, r2
 8008c28:	00db      	lsls	r3, r3, #3
 8008c2a:	1a9b      	subs	r3, r3, r2
 8008c2c:	00db      	lsls	r3, r3, #3
 8008c2e:	440b      	add	r3, r1
 8008c30:	f103 0118 	add.w	r1, r3, #24
 8008c34:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008c38:	e9c1 2300 	strd	r2, r3, [r1]
			TSiDo[i].RANGE_TEMP_HIGH = RANGE_TEMP_HIGH;
 8008c3c:	495c      	ldr	r1, [pc, #368]	; (8008db0 <set_temperature+0x2a8>)
 8008c3e:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8008c42:	4613      	mov	r3, r2
 8008c44:	00db      	lsls	r3, r3, #3
 8008c46:	1a9b      	subs	r3, r3, r2
 8008c48:	00db      	lsls	r3, r3, #3
 8008c4a:	440b      	add	r3, r1
 8008c4c:	f103 0120 	add.w	r1, r3, #32
 8008c50:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008c54:	e9c1 2300 	strd	r2, r3, [r1]
			for(int j = 0; j < 8; j++)
 8008c58:	2300      	movs	r3, #0
 8008c5a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008c5e:	e08e      	b.n	8008d7e <set_temperature+0x276>
			{
				if(strcmp(D_OUT, VIHOD[j]) == 0)
 8008c60:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8008c64:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008c68:	4613      	mov	r3, r2
 8008c6a:	009b      	lsls	r3, r3, #2
 8008c6c:	4413      	add	r3, r2
 8008c6e:	005b      	lsls	r3, r3, #1
 8008c70:	440b      	add	r3, r1
 8008c72:	4619      	mov	r1, r3
 8008c74:	69b8      	ldr	r0, [r7, #24]
 8008c76:	f7f7 faab 	bl	80001d0 <strcmp>
 8008c7a:	4603      	mov	r3, r0
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d179      	bne.n	8008d74 <set_temperature+0x26c>
				{
					TSiDo[i].D_OUT = pVIHOD[j];
 8008c80:	4a4c      	ldr	r2, [pc, #304]	; (8008db4 <set_temperature+0x2ac>)
 8008c82:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008c86:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8008c8a:	4849      	ldr	r0, [pc, #292]	; (8008db0 <set_temperature+0x2a8>)
 8008c8c:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8008c90:	4613      	mov	r3, r2
 8008c92:	00db      	lsls	r3, r3, #3
 8008c94:	1a9b      	subs	r3, r3, r2
 8008c96:	00db      	lsls	r3, r3, #3
 8008c98:	4403      	add	r3, r0
 8008c9a:	3328      	adds	r3, #40	; 0x28
 8008c9c:	6019      	str	r1, [r3, #0]
					TSiDo[i].VAR_OUT = VAR_OUT;
 8008c9e:	4944      	ldr	r1, [pc, #272]	; (8008db0 <set_temperature+0x2a8>)
 8008ca0:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8008ca4:	4613      	mov	r3, r2
 8008ca6:	00db      	lsls	r3, r3, #3
 8008ca8:	1a9b      	subs	r3, r3, r2
 8008caa:	00db      	lsls	r3, r3, #3
 8008cac:	440b      	add	r3, r1
 8008cae:	332c      	adds	r3, #44	; 0x2c
 8008cb0:	79fa      	ldrb	r2, [r7, #7]
 8008cb2:	701a      	strb	r2, [r3, #0]
					TSiDo[i].OCD_Pin = OCD_Pin[j];
 8008cb4:	4a40      	ldr	r2, [pc, #256]	; (8008db8 <set_temperature+0x2b0>)
 8008cb6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008cba:	f832 0013 	ldrh.w	r0, [r2, r3, lsl #1]
 8008cbe:	493c      	ldr	r1, [pc, #240]	; (8008db0 <set_temperature+0x2a8>)
 8008cc0:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8008cc4:	4613      	mov	r3, r2
 8008cc6:	00db      	lsls	r3, r3, #3
 8008cc8:	1a9b      	subs	r3, r3, r2
 8008cca:	00db      	lsls	r3, r3, #3
 8008ccc:	440b      	add	r3, r1
 8008cce:	332e      	adds	r3, #46	; 0x2e
 8008cd0:	4602      	mov	r2, r0
 8008cd2:	801a      	strh	r2, [r3, #0]

					//For Debug:
					//------------------------------------------------
					char Buff[32];
					SEND_str("ROM_RAW: ");
 8008cd4:	4839      	ldr	r0, [pc, #228]	; (8008dbc <set_temperature+0x2b4>)
 8008cd6:	f7f9 ff99 	bl	8002c0c <SEND_str>
					SEND_str(ROM_RAW);
 8008cda:	69f8      	ldr	r0, [r7, #28]
 8008cdc:	f7f9 ff96 	bl	8002c0c <SEND_str>
					SEND_str("\n");
 8008ce0:	4837      	ldr	r0, [pc, #220]	; (8008dc0 <set_temperature+0x2b8>)
 8008ce2:	f7f9 ff93 	bl	8002c0c <SEND_str>
					SEND_str("SET VALUE: ");
 8008ce6:	4837      	ldr	r0, [pc, #220]	; (8008dc4 <set_temperature+0x2bc>)
 8008ce8:	f7f9 ff90 	bl	8002c0c <SEND_str>
					sprintf(Buff, "%.2f", atof(sign_temper));
 8008cec:	4836      	ldr	r0, [pc, #216]	; (8008dc8 <set_temperature+0x2c0>)
 8008cee:	f011 fda9 	bl	801a844 <atof>
 8008cf2:	ec53 2b10 	vmov	r2, r3, d0
 8008cf6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008cfa:	4934      	ldr	r1, [pc, #208]	; (8008dcc <set_temperature+0x2c4>)
 8008cfc:	f012 fbcc 	bl	801b498 <siprintf>
					SEND_str(Buff);
 8008d00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008d04:	4618      	mov	r0, r3
 8008d06:	f7f9 ff81 	bl	8002c0c <SEND_str>
					SEND_str("\nRANGE_TEMP_LOW: ");
 8008d0a:	4831      	ldr	r0, [pc, #196]	; (8008dd0 <set_temperature+0x2c8>)
 8008d0c:	f7f9 ff7e 	bl	8002c0c <SEND_str>
					sprintf(Buff, "%.2f", TSiDo[i].RANGE_TEMP_LOW);
 8008d10:	4927      	ldr	r1, [pc, #156]	; (8008db0 <set_temperature+0x2a8>)
 8008d12:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8008d16:	4613      	mov	r3, r2
 8008d18:	00db      	lsls	r3, r3, #3
 8008d1a:	1a9b      	subs	r3, r3, r2
 8008d1c:	00db      	lsls	r3, r3, #3
 8008d1e:	440b      	add	r3, r1
 8008d20:	3318      	adds	r3, #24
 8008d22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d26:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008d2a:	4928      	ldr	r1, [pc, #160]	; (8008dcc <set_temperature+0x2c4>)
 8008d2c:	f012 fbb4 	bl	801b498 <siprintf>
					SEND_str(Buff);
 8008d30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008d34:	4618      	mov	r0, r3
 8008d36:	f7f9 ff69 	bl	8002c0c <SEND_str>
					SEND_str("\nRANGE_TEMP_HIGH: ");
 8008d3a:	4826      	ldr	r0, [pc, #152]	; (8008dd4 <set_temperature+0x2cc>)
 8008d3c:	f7f9 ff66 	bl	8002c0c <SEND_str>
					sprintf(Buff, "%.2f", TSiDo[i].RANGE_TEMP_HIGH);
 8008d40:	491b      	ldr	r1, [pc, #108]	; (8008db0 <set_temperature+0x2a8>)
 8008d42:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8008d46:	4613      	mov	r3, r2
 8008d48:	00db      	lsls	r3, r3, #3
 8008d4a:	1a9b      	subs	r3, r3, r2
 8008d4c:	00db      	lsls	r3, r3, #3
 8008d4e:	440b      	add	r3, r1
 8008d50:	3320      	adds	r3, #32
 8008d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d56:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008d5a:	491c      	ldr	r1, [pc, #112]	; (8008dcc <set_temperature+0x2c4>)
 8008d5c:	f012 fb9c 	bl	801b498 <siprintf>
					SEND_str(Buff);
 8008d60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008d64:	4618      	mov	r0, r3
 8008d66:	f7f9 ff51 	bl	8002c0c <SEND_str>
					SEND_str("\n");
 8008d6a:	4815      	ldr	r0, [pc, #84]	; (8008dc0 <set_temperature+0x2b8>)
 8008d6c:	f7f9 ff4e 	bl	8002c0c <SEND_str>
					//------------------------------------------------

					break;
 8008d70:	bf00      	nop
				}
			}
			break;
 8008d72:	e015      	b.n	8008da0 <set_temperature+0x298>
			for(int j = 0; j < 8; j++)
 8008d74:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008d78:	3301      	adds	r3, #1
 8008d7a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008d7e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008d82:	2b07      	cmp	r3, #7
 8008d84:	f77f af6c 	ble.w	8008c60 <set_temperature+0x158>
			break;
 8008d88:	e00a      	b.n	8008da0 <set_temperature+0x298>
	for(int i = 0; i < AMT_TEMP_SENS; i++)
 8008d8a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008d8e:	3301      	adds	r3, #1
 8008d90:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008d94:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008d98:	2b01      	cmp	r3, #1
 8008d9a:	f77f aecc 	ble.w	8008b36 <set_temperature+0x2e>
		}
	}
}
 8008d9e:	bf00      	nop
 8008da0:	bf00      	nop
 8008da2:	37a0      	adds	r7, #160	; 0xa0
 8008da4:	46bd      	mov	sp, r7
 8008da6:	bd80      	pop	{r7, pc}
 8008da8:	080209e0 	.word	0x080209e0
 8008dac:	200013b4 	.word	0x200013b4
 8008db0:	20000630 	.word	0x20000630
 8008db4:	20000030 	.word	0x20000030
 8008db8:	20000060 	.word	0x20000060
 8008dbc:	08020ad8 	.word	0x08020ad8
 8008dc0:	08020a64 	.word	0x08020a64
 8008dc4:	08020a30 	.word	0x08020a30
 8008dc8:	20001378 	.word	0x20001378
 8008dcc:	08020ae4 	.word	0x08020ae4
 8008dd0:	08020aec 	.word	0x08020aec
 8008dd4:	08020b00 	.word	0x08020b00

08008dd8 <sensors_Reset>:
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
}
//--------------------------------------------------
uint8_t sensors_Reset(void)
{
 8008dd8:	b580      	push	{r7, lr}
 8008dda:	b082      	sub	sp, #8
 8008ddc:	af00      	add	r7, sp, #0
	uint16_t status;

	SET_LOW;					//низкий уровень
 8008dde:	4b13      	ldr	r3, [pc, #76]	; (8008e2c <sensors_Reset+0x54>)
 8008de0:	695b      	ldr	r3, [r3, #20]
 8008de2:	4a12      	ldr	r2, [pc, #72]	; (8008e2c <sensors_Reset+0x54>)
 8008de4:	f023 0301 	bic.w	r3, r3, #1
 8008de8:	6153      	str	r3, [r2, #20]
	delay_micros(480);			//задержка как минимум на 480 микросекунд
 8008dea:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 8008dee:	f7fb fbab 	bl	8004548 <delay_micros>
	SET_HIGH;					//высокий уровень
 8008df2:	4b0e      	ldr	r3, [pc, #56]	; (8008e2c <sensors_Reset+0x54>)
 8008df4:	695b      	ldr	r3, [r3, #20]
 8008df6:	4a0d      	ldr	r2, [pc, #52]	; (8008e2c <sensors_Reset+0x54>)
 8008df8:	f043 0301 	orr.w	r3, r3, #1
 8008dfc:	6153      	str	r3, [r2, #20]
	delay_micros(60);			//задержка как минимум на 60 микросекунд
 8008dfe:	203c      	movs	r0, #60	; 0x3c
 8008e00:	f7fb fba2 	bl	8004548 <delay_micros>
	status = GET_STATUS_PIN;	//провер¤ем уровень
 8008e04:	4b09      	ldr	r3, [pc, #36]	; (8008e2c <sensors_Reset+0x54>)
 8008e06:	691b      	ldr	r3, [r3, #16]
 8008e08:	b29b      	uxth	r3, r3
 8008e0a:	f003 0301 	and.w	r3, r3, #1
 8008e0e:	80fb      	strh	r3, [r7, #6]
	delay_micros(480);			//задержка как минимум на 480 микросекунд
 8008e10:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 8008e14:	f7fb fb98 	bl	8004548 <delay_micros>
  	  	  	  	  	  	  		//(на всякий случай подождЄм побольше, так как могут быть неточности в задержке)
	return (status ? 1 : 0);	//вернЄм результат
 8008e18:	88fb      	ldrh	r3, [r7, #6]
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	bf14      	ite	ne
 8008e1e:	2301      	movne	r3, #1
 8008e20:	2300      	moveq	r3, #0
 8008e22:	b2db      	uxtb	r3, r3
}
 8008e24:	4618      	mov	r0, r3
 8008e26:	3708      	adds	r7, #8
 8008e28:	46bd      	mov	sp, r7
 8008e2a:	bd80      	pop	{r7, pc}
 8008e2c:	40020c00 	.word	0x40020c00

08008e30 <sensors_ReadBit>:
//----------------------------------------------------------
uint8_t sensors_ReadBit(void)
{
 8008e30:	b580      	push	{r7, lr}
 8008e32:	b082      	sub	sp, #8
 8008e34:	af00      	add	r7, sp, #0
	uint8_t bit = 0;
 8008e36:	2300      	movs	r3, #0
 8008e38:	71fb      	strb	r3, [r7, #7]

	SET_LOW;							//низкий уровень
 8008e3a:	4b12      	ldr	r3, [pc, #72]	; (8008e84 <sensors_ReadBit+0x54>)
 8008e3c:	695b      	ldr	r3, [r3, #20]
 8008e3e:	4a11      	ldr	r2, [pc, #68]	; (8008e84 <sensors_ReadBit+0x54>)
 8008e40:	f023 0301 	bic.w	r3, r3, #1
 8008e44:	6153      	str	r3, [r2, #20]
	delay_micros(1);
 8008e46:	2001      	movs	r0, #1
 8008e48:	f7fb fb7e 	bl	8004548 <delay_micros>
	SET_HIGH;							//высокий уровень
 8008e4c:	4b0d      	ldr	r3, [pc, #52]	; (8008e84 <sensors_ReadBit+0x54>)
 8008e4e:	695b      	ldr	r3, [r3, #20]
 8008e50:	4a0c      	ldr	r2, [pc, #48]	; (8008e84 <sensors_ReadBit+0x54>)
 8008e52:	f043 0301 	orr.w	r3, r3, #1
 8008e56:	6153      	str	r3, [r2, #20]
	delay_micros(14);
 8008e58:	200e      	movs	r0, #14
 8008e5a:	f7fb fb75 	bl	8004548 <delay_micros>
	bit = (GET_STATUS_PIN ? 1 : 0);		//провер¤ем уровень
 8008e5e:	4b09      	ldr	r3, [pc, #36]	; (8008e84 <sensors_ReadBit+0x54>)
 8008e60:	691b      	ldr	r3, [r3, #16]
 8008e62:	f003 0301 	and.w	r3, r3, #1
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	bf14      	ite	ne
 8008e6a:	2301      	movne	r3, #1
 8008e6c:	2300      	moveq	r3, #0
 8008e6e:	b2db      	uxtb	r3, r3
 8008e70:	71fb      	strb	r3, [r7, #7]
	delay_micros(45);
 8008e72:	202d      	movs	r0, #45	; 0x2d
 8008e74:	f7fb fb68 	bl	8004548 <delay_micros>

	return bit;
 8008e78:	79fb      	ldrb	r3, [r7, #7]
}
 8008e7a:	4618      	mov	r0, r3
 8008e7c:	3708      	adds	r7, #8
 8008e7e:	46bd      	mov	sp, r7
 8008e80:	bd80      	pop	{r7, pc}
 8008e82:	bf00      	nop
 8008e84:	40020c00 	.word	0x40020c00

08008e88 <sensors_ReadByte>:
//-----------------------------------------------
uint8_t sensors_ReadByte(void)
{
 8008e88:	b580      	push	{r7, lr}
 8008e8a:	b082      	sub	sp, #8
 8008e8c:	af00      	add	r7, sp, #0
	uint8_t data = 0;
 8008e8e:	2300      	movs	r3, #0
 8008e90:	71fb      	strb	r3, [r7, #7]

	for (uint8_t i = 0; i <= 7; i++)
 8008e92:	2300      	movs	r3, #0
 8008e94:	71bb      	strb	r3, [r7, #6]
 8008e96:	e00d      	b.n	8008eb4 <sensors_ReadByte+0x2c>
		data += sensors_ReadBit() << i;
 8008e98:	f7ff ffca 	bl	8008e30 <sensors_ReadBit>
 8008e9c:	4603      	mov	r3, r0
 8008e9e:	461a      	mov	r2, r3
 8008ea0:	79bb      	ldrb	r3, [r7, #6]
 8008ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8008ea6:	b2da      	uxtb	r2, r3
 8008ea8:	79fb      	ldrb	r3, [r7, #7]
 8008eaa:	4413      	add	r3, r2
 8008eac:	71fb      	strb	r3, [r7, #7]
	for (uint8_t i = 0; i <= 7; i++)
 8008eae:	79bb      	ldrb	r3, [r7, #6]
 8008eb0:	3301      	adds	r3, #1
 8008eb2:	71bb      	strb	r3, [r7, #6]
 8008eb4:	79bb      	ldrb	r3, [r7, #6]
 8008eb6:	2b07      	cmp	r3, #7
 8008eb8:	d9ee      	bls.n	8008e98 <sensors_ReadByte+0x10>

	return data;
 8008eba:	79fb      	ldrb	r3, [r7, #7]
}
 8008ebc:	4618      	mov	r0, r3
 8008ebe:	3708      	adds	r7, #8
 8008ec0:	46bd      	mov	sp, r7
 8008ec2:	bd80      	pop	{r7, pc}

08008ec4 <sensors_WriteBit>:
//-----------------------------------------------
void sensors_WriteBit(uint8_t bit)
{
 8008ec4:	b580      	push	{r7, lr}
 8008ec6:	b082      	sub	sp, #8
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	4603      	mov	r3, r0
 8008ecc:	71fb      	strb	r3, [r7, #7]
	SET_LOW;
 8008ece:	4b11      	ldr	r3, [pc, #68]	; (8008f14 <sensors_WriteBit+0x50>)
 8008ed0:	695b      	ldr	r3, [r3, #20]
 8008ed2:	4a10      	ldr	r2, [pc, #64]	; (8008f14 <sensors_WriteBit+0x50>)
 8008ed4:	f023 0301 	bic.w	r3, r3, #1
 8008ed8:	6153      	str	r3, [r2, #20]
	delay_micros(bit ? 1 : 60);
 8008eda:	79fb      	ldrb	r3, [r7, #7]
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d001      	beq.n	8008ee4 <sensors_WriteBit+0x20>
 8008ee0:	2301      	movs	r3, #1
 8008ee2:	e000      	b.n	8008ee6 <sensors_WriteBit+0x22>
 8008ee4:	233c      	movs	r3, #60	; 0x3c
 8008ee6:	4618      	mov	r0, r3
 8008ee8:	f7fb fb2e 	bl	8004548 <delay_micros>
	SET_HIGH;
 8008eec:	4b09      	ldr	r3, [pc, #36]	; (8008f14 <sensors_WriteBit+0x50>)
 8008eee:	695b      	ldr	r3, [r3, #20]
 8008ef0:	4a08      	ldr	r2, [pc, #32]	; (8008f14 <sensors_WriteBit+0x50>)
 8008ef2:	f043 0301 	orr.w	r3, r3, #1
 8008ef6:	6153      	str	r3, [r2, #20]
	delay_micros(bit ? 60 : 1);
 8008ef8:	79fb      	ldrb	r3, [r7, #7]
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d001      	beq.n	8008f02 <sensors_WriteBit+0x3e>
 8008efe:	233c      	movs	r3, #60	; 0x3c
 8008f00:	e000      	b.n	8008f04 <sensors_WriteBit+0x40>
 8008f02:	2301      	movs	r3, #1
 8008f04:	4618      	mov	r0, r3
 8008f06:	f7fb fb1f 	bl	8004548 <delay_micros>
}
 8008f0a:	bf00      	nop
 8008f0c:	3708      	adds	r7, #8
 8008f0e:	46bd      	mov	sp, r7
 8008f10:	bd80      	pop	{r7, pc}
 8008f12:	bf00      	nop
 8008f14:	40020c00 	.word	0x40020c00

08008f18 <sensors_WriteByte>:
//-----------------------------------------------
void sensors_WriteByte(uint8_t dt)
{
 8008f18:	b580      	push	{r7, lr}
 8008f1a:	b084      	sub	sp, #16
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	4603      	mov	r3, r0
 8008f20:	71fb      	strb	r3, [r7, #7]
	for (uint8_t i = 0; i < 8; i++)
 8008f22:	2300      	movs	r3, #0
 8008f24:	73fb      	strb	r3, [r7, #15]
 8008f26:	e010      	b.n	8008f4a <sensors_WriteByte+0x32>
	{
		sensors_WriteBit(dt >> i & 1);
 8008f28:	79fa      	ldrb	r2, [r7, #7]
 8008f2a:	7bfb      	ldrb	r3, [r7, #15]
 8008f2c:	fa42 f303 	asr.w	r3, r2, r3
 8008f30:	b2db      	uxtb	r3, r3
 8008f32:	f003 0301 	and.w	r3, r3, #1
 8008f36:	b2db      	uxtb	r3, r3
 8008f38:	4618      	mov	r0, r3
 8008f3a:	f7ff ffc3 	bl	8008ec4 <sensors_WriteBit>
		//Delay Protection
		delay_micros(5);
 8008f3e:	2005      	movs	r0, #5
 8008f40:	f7fb fb02 	bl	8004548 <delay_micros>
	for (uint8_t i = 0; i < 8; i++)
 8008f44:	7bfb      	ldrb	r3, [r7, #15]
 8008f46:	3301      	adds	r3, #1
 8008f48:	73fb      	strb	r3, [r7, #15]
 8008f4a:	7bfb      	ldrb	r3, [r7, #15]
 8008f4c:	2b07      	cmp	r3, #7
 8008f4e:	d9eb      	bls.n	8008f28 <sensors_WriteByte+0x10>
	}
}
 8008f50:	bf00      	nop
 8008f52:	bf00      	nop
 8008f54:	3710      	adds	r7, #16
 8008f56:	46bd      	mov	sp, r7
 8008f58:	bd80      	pop	{r7, pc}
	...

08008f5c <sensors_SearchRom>:
//-----------------------------------------------
uint8_t sensors_SearchRom(uint8_t *Addr)
{
 8008f5c:	b580      	push	{r7, lr}
 8008f5e:	b086      	sub	sp, #24
 8008f60:	af00      	add	r7, sp, #0
 8008f62:	6078      	str	r0, [r7, #4]
	uint8_t last_zero, rom_byte_number, search_result;
	uint8_t id_bit, cmp_id_bit;
	uint8_t rom_byte_mask, search_direction;

	//проинициализируем переменные
	id_bit_number = 1;
 8008f64:	2301      	movs	r3, #1
 8008f66:	75fb      	strb	r3, [r7, #23]
	last_zero = 0;
 8008f68:	2300      	movs	r3, #0
 8008f6a:	75bb      	strb	r3, [r7, #22]
	rom_byte_number = 0;
 8008f6c:	2300      	movs	r3, #0
 8008f6e:	757b      	strb	r3, [r7, #21]
	rom_byte_mask = 1;
 8008f70:	2301      	movs	r3, #1
 8008f72:	74fb      	strb	r3, [r7, #19]
	search_result = 0;
 8008f74:	2300      	movs	r3, #0
 8008f76:	753b      	strb	r3, [r7, #20]
	if (!LastDeviceFlag)
 8008f78:	4b55      	ldr	r3, [pc, #340]	; (80090d0 <sensors_SearchRom+0x174>)
 8008f7a:	781b      	ldrb	r3, [r3, #0]
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d104      	bne.n	8008f8a <sensors_SearchRom+0x2e>
	{
		sensors_Reset();
 8008f80:	f7ff ff2a 	bl	8008dd8 <sensors_Reset>
		sensors_WriteByte(0xF0);
 8008f84:	20f0      	movs	r0, #240	; 0xf0
 8008f86:	f7ff ffc7 	bl	8008f18 <sensors_WriteByte>
	}
	do
	{
		id_bit = sensors_ReadBit();
 8008f8a:	f7ff ff51 	bl	8008e30 <sensors_ReadBit>
 8008f8e:	4603      	mov	r3, r0
 8008f90:	72fb      	strb	r3, [r7, #11]
		cmp_id_bit = sensors_ReadBit();
 8008f92:	f7ff ff4d 	bl	8008e30 <sensors_ReadBit>
 8008f96:	4603      	mov	r3, r0
 8008f98:	72bb      	strb	r3, [r7, #10]
		if ((id_bit == 1) && (cmp_id_bit == 1))
 8008f9a:	7afb      	ldrb	r3, [r7, #11]
 8008f9c:	2b01      	cmp	r3, #1
 8008f9e:	d102      	bne.n	8008fa6 <sensors_SearchRom+0x4a>
 8008fa0:	7abb      	ldrb	r3, [r7, #10]
 8008fa2:	2b01      	cmp	r3, #1
 8008fa4:	d05c      	beq.n	8009060 <sensors_SearchRom+0x104>
			break;
		else
		{
			if (id_bit != cmp_id_bit)
 8008fa6:	7afa      	ldrb	r2, [r7, #11]
 8008fa8:	7abb      	ldrb	r3, [r7, #10]
 8008faa:	429a      	cmp	r2, r3
 8008fac:	d002      	beq.n	8008fb4 <sensors_SearchRom+0x58>
				search_direction = id_bit; // bit write value for search
 8008fae:	7afb      	ldrb	r3, [r7, #11]
 8008fb0:	74bb      	strb	r3, [r7, #18]
 8008fb2:	e025      	b.n	8009000 <sensors_SearchRom+0xa4>
			else
			{
				if (id_bit_number < LastDiscrepancy)
 8008fb4:	4b47      	ldr	r3, [pc, #284]	; (80090d4 <sensors_SearchRom+0x178>)
 8008fb6:	781b      	ldrb	r3, [r3, #0]
 8008fb8:	7dfa      	ldrb	r2, [r7, #23]
 8008fba:	429a      	cmp	r2, r3
 8008fbc:	d20c      	bcs.n	8008fd8 <sensors_SearchRom+0x7c>
					search_direction = ((ROM_NO[rom_byte_number] & rom_byte_mask) > 0);
 8008fbe:	7d7b      	ldrb	r3, [r7, #21]
 8008fc0:	4a45      	ldr	r2, [pc, #276]	; (80090d8 <sensors_SearchRom+0x17c>)
 8008fc2:	5cd2      	ldrb	r2, [r2, r3]
 8008fc4:	7cfb      	ldrb	r3, [r7, #19]
 8008fc6:	4013      	ands	r3, r2
 8008fc8:	b2db      	uxtb	r3, r3
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	bf14      	ite	ne
 8008fce:	2301      	movne	r3, #1
 8008fd0:	2300      	moveq	r3, #0
 8008fd2:	b2db      	uxtb	r3, r3
 8008fd4:	74bb      	strb	r3, [r7, #18]
 8008fd6:	e008      	b.n	8008fea <sensors_SearchRom+0x8e>
				else
					search_direction = (id_bit_number == LastDiscrepancy);
 8008fd8:	4b3e      	ldr	r3, [pc, #248]	; (80090d4 <sensors_SearchRom+0x178>)
 8008fda:	781b      	ldrb	r3, [r3, #0]
 8008fdc:	7dfa      	ldrb	r2, [r7, #23]
 8008fde:	429a      	cmp	r2, r3
 8008fe0:	bf0c      	ite	eq
 8008fe2:	2301      	moveq	r3, #1
 8008fe4:	2300      	movne	r3, #0
 8008fe6:	b2db      	uxtb	r3, r3
 8008fe8:	74bb      	strb	r3, [r7, #18]
				if (search_direction == 0)
 8008fea:	7cbb      	ldrb	r3, [r7, #18]
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d107      	bne.n	8009000 <sensors_SearchRom+0xa4>
				{
					last_zero = id_bit_number;
 8008ff0:	7dfb      	ldrb	r3, [r7, #23]
 8008ff2:	75bb      	strb	r3, [r7, #22]
					if (last_zero < 9)
 8008ff4:	7dbb      	ldrb	r3, [r7, #22]
 8008ff6:	2b08      	cmp	r3, #8
 8008ff8:	d802      	bhi.n	8009000 <sensors_SearchRom+0xa4>
					LastFamilyDiscrepancy = last_zero;
 8008ffa:	4a38      	ldr	r2, [pc, #224]	; (80090dc <sensors_SearchRom+0x180>)
 8008ffc:	7dbb      	ldrb	r3, [r7, #22]
 8008ffe:	7013      	strb	r3, [r2, #0]
				}
			}
			if (search_direction == 1)
 8009000:	7cbb      	ldrb	r3, [r7, #18]
 8009002:	2b01      	cmp	r3, #1
 8009004:	d109      	bne.n	800901a <sensors_SearchRom+0xbe>
				ROM_NO[rom_byte_number] |= rom_byte_mask;
 8009006:	7d7b      	ldrb	r3, [r7, #21]
 8009008:	4a33      	ldr	r2, [pc, #204]	; (80090d8 <sensors_SearchRom+0x17c>)
 800900a:	5cd1      	ldrb	r1, [r2, r3]
 800900c:	7d7b      	ldrb	r3, [r7, #21]
 800900e:	7cfa      	ldrb	r2, [r7, #19]
 8009010:	430a      	orrs	r2, r1
 8009012:	b2d1      	uxtb	r1, r2
 8009014:	4a30      	ldr	r2, [pc, #192]	; (80090d8 <sensors_SearchRom+0x17c>)
 8009016:	54d1      	strb	r1, [r2, r3]
 8009018:	e00d      	b.n	8009036 <sensors_SearchRom+0xda>
			else
				ROM_NO[rom_byte_number] &= ~rom_byte_mask;
 800901a:	7d7b      	ldrb	r3, [r7, #21]
 800901c:	4a2e      	ldr	r2, [pc, #184]	; (80090d8 <sensors_SearchRom+0x17c>)
 800901e:	5cd3      	ldrb	r3, [r2, r3]
 8009020:	b25a      	sxtb	r2, r3
 8009022:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009026:	43db      	mvns	r3, r3
 8009028:	b25b      	sxtb	r3, r3
 800902a:	4013      	ands	r3, r2
 800902c:	b25a      	sxtb	r2, r3
 800902e:	7d7b      	ldrb	r3, [r7, #21]
 8009030:	b2d1      	uxtb	r1, r2
 8009032:	4a29      	ldr	r2, [pc, #164]	; (80090d8 <sensors_SearchRom+0x17c>)
 8009034:	54d1      	strb	r1, [r2, r3]
			sensors_WriteBit(search_direction);
 8009036:	7cbb      	ldrb	r3, [r7, #18]
 8009038:	4618      	mov	r0, r3
 800903a:	f7ff ff43 	bl	8008ec4 <sensors_WriteBit>
			id_bit_number++;
 800903e:	7dfb      	ldrb	r3, [r7, #23]
 8009040:	3301      	adds	r3, #1
 8009042:	75fb      	strb	r3, [r7, #23]
			rom_byte_mask <<= 1;
 8009044:	7cfb      	ldrb	r3, [r7, #19]
 8009046:	005b      	lsls	r3, r3, #1
 8009048:	74fb      	strb	r3, [r7, #19]
			if (rom_byte_mask == 0)
 800904a:	7cfb      	ldrb	r3, [r7, #19]
 800904c:	2b00      	cmp	r3, #0
 800904e:	d104      	bne.n	800905a <sensors_SearchRom+0xfe>
			{
				rom_byte_number++;
 8009050:	7d7b      	ldrb	r3, [r7, #21]
 8009052:	3301      	adds	r3, #1
 8009054:	757b      	strb	r3, [r7, #21]
				rom_byte_mask = 1;
 8009056:	2301      	movs	r3, #1
 8009058:	74fb      	strb	r3, [r7, #19]
			}
		}
	} while(rom_byte_number < 8);		//считываем байты с 0 до 7 в цикле
 800905a:	7d7b      	ldrb	r3, [r7, #21]
 800905c:	2b07      	cmp	r3, #7
 800905e:	d994      	bls.n	8008f8a <sensors_SearchRom+0x2e>

	if (!(id_bit_number < 65))
 8009060:	7dfb      	ldrb	r3, [r7, #23]
 8009062:	2b40      	cmp	r3, #64	; 0x40
 8009064:	d90b      	bls.n	800907e <sensors_SearchRom+0x122>
	{
		// search successful so set LastDiscrepancy,LastDeviceFlag,search_result
		LastDiscrepancy = last_zero;
 8009066:	4a1b      	ldr	r2, [pc, #108]	; (80090d4 <sensors_SearchRom+0x178>)
 8009068:	7dbb      	ldrb	r3, [r7, #22]
 800906a:	7013      	strb	r3, [r2, #0]
		// check for last device
		if (LastDiscrepancy == 0)
 800906c:	4b19      	ldr	r3, [pc, #100]	; (80090d4 <sensors_SearchRom+0x178>)
 800906e:	781b      	ldrb	r3, [r3, #0]
 8009070:	2b00      	cmp	r3, #0
 8009072:	d102      	bne.n	800907a <sensors_SearchRom+0x11e>
			LastDeviceFlag = 1;
 8009074:	4b16      	ldr	r3, [pc, #88]	; (80090d0 <sensors_SearchRom+0x174>)
 8009076:	2201      	movs	r2, #1
 8009078:	701a      	strb	r2, [r3, #0]
		search_result = 1;	
 800907a:	2301      	movs	r3, #1
 800907c:	753b      	strb	r3, [r7, #20]
	}
	if (!search_result || !ROM_NO[0])
 800907e:	7d3b      	ldrb	r3, [r7, #20]
 8009080:	2b00      	cmp	r3, #0
 8009082:	d003      	beq.n	800908c <sensors_SearchRom+0x130>
 8009084:	4b14      	ldr	r3, [pc, #80]	; (80090d8 <sensors_SearchRom+0x17c>)
 8009086:	781b      	ldrb	r3, [r3, #0]
 8009088:	2b00      	cmp	r3, #0
 800908a:	d10b      	bne.n	80090a4 <sensors_SearchRom+0x148>
	{
		LastDiscrepancy = 0;
 800908c:	4b11      	ldr	r3, [pc, #68]	; (80090d4 <sensors_SearchRom+0x178>)
 800908e:	2200      	movs	r2, #0
 8009090:	701a      	strb	r2, [r3, #0]
		LastDeviceFlag = 0;
 8009092:	4b0f      	ldr	r3, [pc, #60]	; (80090d0 <sensors_SearchRom+0x174>)
 8009094:	2200      	movs	r2, #0
 8009096:	701a      	strb	r2, [r3, #0]
		LastFamilyDiscrepancy = 0;
 8009098:	4b10      	ldr	r3, [pc, #64]	; (80090dc <sensors_SearchRom+0x180>)
 800909a:	2200      	movs	r2, #0
 800909c:	701a      	strb	r2, [r3, #0]
		search_result = 0;
 800909e:	2300      	movs	r3, #0
 80090a0:	753b      	strb	r3, [r7, #20]
 80090a2:	e010      	b.n	80090c6 <sensors_SearchRom+0x16a>
	}
	else
	{
		for (int i = 0; i < 8; i++)
 80090a4:	2300      	movs	r3, #0
 80090a6:	60fb      	str	r3, [r7, #12]
 80090a8:	e00a      	b.n	80090c0 <sensors_SearchRom+0x164>
			Addr[i] = ROM_NO[i];
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	687a      	ldr	r2, [r7, #4]
 80090ae:	4413      	add	r3, r2
 80090b0:	4909      	ldr	r1, [pc, #36]	; (80090d8 <sensors_SearchRom+0x17c>)
 80090b2:	68fa      	ldr	r2, [r7, #12]
 80090b4:	440a      	add	r2, r1
 80090b6:	7812      	ldrb	r2, [r2, #0]
 80090b8:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < 8; i++)
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	3301      	adds	r3, #1
 80090be:	60fb      	str	r3, [r7, #12]
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	2b07      	cmp	r3, #7
 80090c4:	ddf1      	ble.n	80090aa <sensors_SearchRom+0x14e>
	}
	return search_result;
 80090c6:	7d3b      	ldrb	r3, [r7, #20]
}
 80090c8:	4618      	mov	r0, r3
 80090ca:	3718      	adds	r7, #24
 80090cc:	46bd      	mov	sp, r7
 80090ce:	bd80      	pop	{r7, pc}
 80090d0:	200013b2 	.word	0x200013b2
 80090d4:	200013b3 	.word	0x200013b3
 80090d8:	200013a8 	.word	0x200013a8
 80090dc:	200013b1 	.word	0x200013b1

080090e0 <sensors_init>:
//-----------------------------------------------
uint8_t sensors_init(uint8_t mode)
{
 80090e0:	b580      	push	{r7, lr}
 80090e2:	b086      	sub	sp, #24
 80090e4:	af00      	add	r7, sp, #0
 80090e6:	4603      	mov	r3, r0
 80090e8:	71fb      	strb	r3, [r7, #7]
	int i = 0, j=0;
 80090ea:	2300      	movs	r3, #0
 80090ec:	617b      	str	r3, [r7, #20]
 80090ee:	2300      	movs	r3, #0
 80090f0:	613b      	str	r3, [r7, #16]
	uint8_t dt[8];
	if(mode == SKIP_ROM)
 80090f2:	79fb      	ldrb	r3, [r7, #7]
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d116      	bne.n	8009126 <sensors_init+0x46>
	{
		if(sensors_Reset())
 80090f8:	f7ff fe6e 	bl	8008dd8 <sensors_Reset>
 80090fc:	4603      	mov	r3, r0
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d001      	beq.n	8009106 <sensors_init+0x26>
			return 1;
 8009102:	2301      	movs	r3, #1
 8009104:	e06b      	b.n	80091de <sensors_init+0xfe>
		//SKIP ROM
		sensors_WriteByte(0xCC);
 8009106:	20cc      	movs	r0, #204	; 0xcc
 8009108:	f7ff ff06 	bl	8008f18 <sensors_WriteByte>
		//WRITE SCRATCHPAD
		sensors_WriteByte(0x4E);
 800910c:	204e      	movs	r0, #78	; 0x4e
 800910e:	f7ff ff03 	bl	8008f18 <sensors_WriteByte>
		//TH REGISTER 100 градусов
		sensors_WriteByte(0x64);
 8009112:	2064      	movs	r0, #100	; 0x64
 8009114:	f7ff ff00 	bl	8008f18 <sensors_WriteByte>
		//TL REGISTER - 30 градусов
		sensors_WriteByte(0x9E);
 8009118:	209e      	movs	r0, #158	; 0x9e
 800911a:	f7ff fefd 	bl	8008f18 <sensors_WriteByte>
		//Resolution 12 bit
		sensors_WriteByte(RESOLUTION_12BIT);
 800911e:	207f      	movs	r0, #127	; 0x7f
 8009120:	f7ff fefa 	bl	8008f18 <sensors_WriteByte>
 8009124:	e05a      	b.n	80091dc <sensors_init+0xfc>
	}
	else
	{
		for(i = 1; i <= 8; i++)
 8009126:	2301      	movs	r3, #1
 8009128:	617b      	str	r3, [r7, #20]
 800912a:	e01c      	b.n	8009166 <sensors_init+0x86>
		{
			if(sensors_SearchRom(dt))
 800912c:	f107 0308 	add.w	r3, r7, #8
 8009130:	4618      	mov	r0, r3
 8009132:	f7ff ff13 	bl	8008f5c <sensors_SearchRom>
 8009136:	4603      	mov	r3, r0
 8009138:	2b00      	cmp	r3, #0
 800913a:	d018      	beq.n	800916e <sensors_init+0x8e>
			{
				Dev_Cnt++;
 800913c:	4b2a      	ldr	r3, [pc, #168]	; (80091e8 <sensors_init+0x108>)
 800913e:	781b      	ldrb	r3, [r3, #0]
 8009140:	3301      	adds	r3, #1
 8009142:	b2da      	uxtb	r2, r3
 8009144:	4b28      	ldr	r3, [pc, #160]	; (80091e8 <sensors_init+0x108>)
 8009146:	701a      	strb	r2, [r3, #0]
				memcpy(Dev_ID[Dev_Cnt-1], dt, sizeof(dt));
 8009148:	4b27      	ldr	r3, [pc, #156]	; (80091e8 <sensors_init+0x108>)
 800914a:	781b      	ldrb	r3, [r3, #0]
 800914c:	3b01      	subs	r3, #1
 800914e:	00db      	lsls	r3, r3, #3
 8009150:	4a26      	ldr	r2, [pc, #152]	; (80091ec <sensors_init+0x10c>)
 8009152:	4413      	add	r3, r2
 8009154:	461a      	mov	r2, r3
 8009156:	f107 0308 	add.w	r3, r7, #8
 800915a:	cb03      	ldmia	r3!, {r0, r1}
 800915c:	6010      	str	r0, [r2, #0]
 800915e:	6051      	str	r1, [r2, #4]
		for(i = 1; i <= 8; i++)
 8009160:	697b      	ldr	r3, [r7, #20]
 8009162:	3301      	adds	r3, #1
 8009164:	617b      	str	r3, [r7, #20]
 8009166:	697b      	ldr	r3, [r7, #20]
 8009168:	2b08      	cmp	r3, #8
 800916a:	dddf      	ble.n	800912c <sensors_init+0x4c>
 800916c:	e000      	b.n	8009170 <sensors_init+0x90>
			}
			else break;
 800916e:	bf00      	nop
		}
		for(i = 1; i <= Dev_Cnt; i++)
 8009170:	2301      	movs	r3, #1
 8009172:	617b      	str	r3, [r7, #20]
 8009174:	e02c      	b.n	80091d0 <sensors_init+0xf0>
		{
			if(sensors_Reset())
 8009176:	f7ff fe2f 	bl	8008dd8 <sensors_Reset>
 800917a:	4603      	mov	r3, r0
 800917c:	2b00      	cmp	r3, #0
 800917e:	d001      	beq.n	8009184 <sensors_init+0xa4>
				return 1;
 8009180:	2301      	movs	r3, #1
 8009182:	e02c      	b.n	80091de <sensors_init+0xfe>
			//Match Rom
			sensors_WriteByte(0x55);
 8009184:	2055      	movs	r0, #85	; 0x55
 8009186:	f7ff fec7 	bl	8008f18 <sensors_WriteByte>
			for(j = 0; j <= 7; j++)
 800918a:	2300      	movs	r3, #0
 800918c:	613b      	str	r3, [r7, #16]
 800918e:	e00d      	b.n	80091ac <sensors_init+0xcc>
			{
				sensors_WriteByte(Dev_ID[i-1][j]);
 8009190:	697b      	ldr	r3, [r7, #20]
 8009192:	3b01      	subs	r3, #1
 8009194:	4a15      	ldr	r2, [pc, #84]	; (80091ec <sensors_init+0x10c>)
 8009196:	00db      	lsls	r3, r3, #3
 8009198:	441a      	add	r2, r3
 800919a:	693b      	ldr	r3, [r7, #16]
 800919c:	4413      	add	r3, r2
 800919e:	781b      	ldrb	r3, [r3, #0]
 80091a0:	4618      	mov	r0, r3
 80091a2:	f7ff feb9 	bl	8008f18 <sensors_WriteByte>
			for(j = 0; j <= 7; j++)
 80091a6:	693b      	ldr	r3, [r7, #16]
 80091a8:	3301      	adds	r3, #1
 80091aa:	613b      	str	r3, [r7, #16]
 80091ac:	693b      	ldr	r3, [r7, #16]
 80091ae:	2b07      	cmp	r3, #7
 80091b0:	ddee      	ble.n	8009190 <sensors_init+0xb0>
			}
			//WRITE SCRATCHPAD
			sensors_WriteByte(0x4E);
 80091b2:	204e      	movs	r0, #78	; 0x4e
 80091b4:	f7ff feb0 	bl	8008f18 <sensors_WriteByte>
			//TH REGISTER 100 градусов
			sensors_WriteByte(0x64);
 80091b8:	2064      	movs	r0, #100	; 0x64
 80091ba:	f7ff fead 	bl	8008f18 <sensors_WriteByte>
			//TL REGISTER - 30 градусов
			sensors_WriteByte(0x9E);
 80091be:	209e      	movs	r0, #158	; 0x9e
 80091c0:	f7ff feaa 	bl	8008f18 <sensors_WriteByte>
			//Resolution 12 bit
			sensors_WriteByte(RESOLUTION_12BIT);
 80091c4:	207f      	movs	r0, #127	; 0x7f
 80091c6:	f7ff fea7 	bl	8008f18 <sensors_WriteByte>
		for(i = 1; i <= Dev_Cnt; i++)
 80091ca:	697b      	ldr	r3, [r7, #20]
 80091cc:	3301      	adds	r3, #1
 80091ce:	617b      	str	r3, [r7, #20]
 80091d0:	4b05      	ldr	r3, [pc, #20]	; (80091e8 <sensors_init+0x108>)
 80091d2:	781b      	ldrb	r3, [r3, #0]
 80091d4:	461a      	mov	r2, r3
 80091d6:	697b      	ldr	r3, [r7, #20]
 80091d8:	4293      	cmp	r3, r2
 80091da:	ddcc      	ble.n	8009176 <sensors_init+0x96>
		}
	}
	return 0;
 80091dc:	2300      	movs	r3, #0
}
 80091de:	4618      	mov	r0, r3
 80091e0:	3718      	adds	r7, #24
 80091e2:	46bd      	mov	sp, r7
 80091e4:	bd80      	pop	{r7, pc}
 80091e6:	bf00      	nop
 80091e8:	200013b0 	.word	0x200013b0
 80091ec:	20001394 	.word	0x20001394

080091f0 <sensors_MeasureTemperCmd>:
//----------------------------------------------------------
void sensors_MeasureTemperCmd(uint8_t mode, uint8_t DevNum)
{
 80091f0:	b580      	push	{r7, lr}
 80091f2:	b084      	sub	sp, #16
 80091f4:	af00      	add	r7, sp, #0
 80091f6:	4603      	mov	r3, r0
 80091f8:	460a      	mov	r2, r1
 80091fa:	71fb      	strb	r3, [r7, #7]
 80091fc:	4613      	mov	r3, r2
 80091fe:	71bb      	strb	r3, [r7, #6]
	int i = 0;
 8009200:	2300      	movs	r3, #0
 8009202:	60fb      	str	r3, [r7, #12]
	sensors_Reset();
 8009204:	f7ff fde8 	bl	8008dd8 <sensors_Reset>
	if(mode == SKIP_ROM)
 8009208:	79fb      	ldrb	r3, [r7, #7]
 800920a:	2b00      	cmp	r3, #0
 800920c:	d103      	bne.n	8009216 <sensors_MeasureTemperCmd+0x26>
	{
    //SKIP ROM
		sensors_WriteByte(0xCC);
 800920e:	20cc      	movs	r0, #204	; 0xcc
 8009210:	f7ff fe82 	bl	8008f18 <sensors_WriteByte>
 8009214:	e016      	b.n	8009244 <sensors_MeasureTemperCmd+0x54>
	}
	else
	{
		//Match Rom
		sensors_WriteByte(0x55);
 8009216:	2055      	movs	r0, #85	; 0x55
 8009218:	f7ff fe7e 	bl	8008f18 <sensors_WriteByte>
		for(i = 0; i <= 7; i++)
 800921c:	2300      	movs	r3, #0
 800921e:	60fb      	str	r3, [r7, #12]
 8009220:	e00d      	b.n	800923e <sensors_MeasureTemperCmd+0x4e>
		{
			sensors_WriteByte(Dev_ID[DevNum-1][i]);
 8009222:	79bb      	ldrb	r3, [r7, #6]
 8009224:	3b01      	subs	r3, #1
 8009226:	4a0b      	ldr	r2, [pc, #44]	; (8009254 <sensors_MeasureTemperCmd+0x64>)
 8009228:	00db      	lsls	r3, r3, #3
 800922a:	441a      	add	r2, r3
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	4413      	add	r3, r2
 8009230:	781b      	ldrb	r3, [r3, #0]
 8009232:	4618      	mov	r0, r3
 8009234:	f7ff fe70 	bl	8008f18 <sensors_WriteByte>
		for(i = 0; i <= 7; i++)
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	3301      	adds	r3, #1
 800923c:	60fb      	str	r3, [r7, #12]
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	2b07      	cmp	r3, #7
 8009242:	ddee      	ble.n	8009222 <sensors_MeasureTemperCmd+0x32>
		}
	}
	//CONVERT T
	sensors_WriteByte(0x44);
 8009244:	2044      	movs	r0, #68	; 0x44
 8009246:	f7ff fe67 	bl	8008f18 <sensors_WriteByte>
}
 800924a:	bf00      	nop
 800924c:	3710      	adds	r7, #16
 800924e:	46bd      	mov	sp, r7
 8009250:	bd80      	pop	{r7, pc}
 8009252:	bf00      	nop
 8009254:	20001394 	.word	0x20001394

08009258 <sensors_ReadStratcpad>:
//----------------------------------------------------------
void sensors_ReadStratcpad(uint8_t mode, uint8_t *Data, uint8_t DevNum)
{
 8009258:	b590      	push	{r4, r7, lr}
 800925a:	b085      	sub	sp, #20
 800925c:	af00      	add	r7, sp, #0
 800925e:	4603      	mov	r3, r0
 8009260:	6039      	str	r1, [r7, #0]
 8009262:	71fb      	strb	r3, [r7, #7]
 8009264:	4613      	mov	r3, r2
 8009266:	71bb      	strb	r3, [r7, #6]
	uint8_t i;
	sensors_Reset();
 8009268:	f7ff fdb6 	bl	8008dd8 <sensors_Reset>
	if(mode == SKIP_ROM)
 800926c:	79fb      	ldrb	r3, [r7, #7]
 800926e:	2b00      	cmp	r3, #0
 8009270:	d103      	bne.n	800927a <sensors_ReadStratcpad+0x22>
	{
		//SKIP ROM
		sensors_WriteByte(0xCC);
 8009272:	20cc      	movs	r0, #204	; 0xcc
 8009274:	f7ff fe50 	bl	8008f18 <sensors_WriteByte>
 8009278:	e016      	b.n	80092a8 <sensors_ReadStratcpad+0x50>
	}
	else
	{
		//Match Rom
		sensors_WriteByte(0x55);
 800927a:	2055      	movs	r0, #85	; 0x55
 800927c:	f7ff fe4c 	bl	8008f18 <sensors_WriteByte>
		for(i = 0; i <= 7; i++)
 8009280:	2300      	movs	r3, #0
 8009282:	73fb      	strb	r3, [r7, #15]
 8009284:	e00d      	b.n	80092a2 <sensors_ReadStratcpad+0x4a>
		{
			sensors_WriteByte(Dev_ID[DevNum-1][i]);
 8009286:	79bb      	ldrb	r3, [r7, #6]
 8009288:	1e5a      	subs	r2, r3, #1
 800928a:	7bfb      	ldrb	r3, [r7, #15]
 800928c:	4912      	ldr	r1, [pc, #72]	; (80092d8 <sensors_ReadStratcpad+0x80>)
 800928e:	00d2      	lsls	r2, r2, #3
 8009290:	440a      	add	r2, r1
 8009292:	4413      	add	r3, r2
 8009294:	781b      	ldrb	r3, [r3, #0]
 8009296:	4618      	mov	r0, r3
 8009298:	f7ff fe3e 	bl	8008f18 <sensors_WriteByte>
		for(i = 0; i <= 7; i++)
 800929c:	7bfb      	ldrb	r3, [r7, #15]
 800929e:	3301      	adds	r3, #1
 80092a0:	73fb      	strb	r3, [r7, #15]
 80092a2:	7bfb      	ldrb	r3, [r7, #15]
 80092a4:	2b07      	cmp	r3, #7
 80092a6:	d9ee      	bls.n	8009286 <sensors_ReadStratcpad+0x2e>
		}
	}
	//READ SCRATCHPAD
	sensors_WriteByte(0xBE);
 80092a8:	20be      	movs	r0, #190	; 0xbe
 80092aa:	f7ff fe35 	bl	8008f18 <sensors_WriteByte>
	for(i = 0; i < 8; i++)
 80092ae:	2300      	movs	r3, #0
 80092b0:	73fb      	strb	r3, [r7, #15]
 80092b2:	e009      	b.n	80092c8 <sensors_ReadStratcpad+0x70>
	{
		Data[i] = sensors_ReadByte();
 80092b4:	7bfb      	ldrb	r3, [r7, #15]
 80092b6:	683a      	ldr	r2, [r7, #0]
 80092b8:	18d4      	adds	r4, r2, r3
 80092ba:	f7ff fde5 	bl	8008e88 <sensors_ReadByte>
 80092be:	4603      	mov	r3, r0
 80092c0:	7023      	strb	r3, [r4, #0]
	for(i = 0; i < 8; i++)
 80092c2:	7bfb      	ldrb	r3, [r7, #15]
 80092c4:	3301      	adds	r3, #1
 80092c6:	73fb      	strb	r3, [r7, #15]
 80092c8:	7bfb      	ldrb	r3, [r7, #15]
 80092ca:	2b07      	cmp	r3, #7
 80092cc:	d9f2      	bls.n	80092b4 <sensors_ReadStratcpad+0x5c>
	}
}
 80092ce:	bf00      	nop
 80092d0:	bf00      	nop
 80092d2:	3714      	adds	r7, #20
 80092d4:	46bd      	mov	sp, r7
 80092d6:	bd90      	pop	{r4, r7, pc}
 80092d8:	20001394 	.word	0x20001394

080092dc <sensors_GetSign>:
//----------------------------------------------------------
uint8_t sensors_GetSign(uint16_t dt)
{
 80092dc:	b480      	push	{r7}
 80092de:	b083      	sub	sp, #12
 80092e0:	af00      	add	r7, sp, #0
 80092e2:	4603      	mov	r3, r0
 80092e4:	80fb      	strh	r3, [r7, #6]
	//ѕроверим 11-й бит
	if (dt&(1<<11))
 80092e6:	88fb      	ldrh	r3, [r7, #6]
 80092e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d001      	beq.n	80092f4 <sensors_GetSign+0x18>
		return 1;
 80092f0:	2301      	movs	r3, #1
 80092f2:	e000      	b.n	80092f6 <sensors_GetSign+0x1a>
	else
		return 0;
 80092f4:	2300      	movs	r3, #0
}
 80092f6:	4618      	mov	r0, r3
 80092f8:	370c      	adds	r7, #12
 80092fa:	46bd      	mov	sp, r7
 80092fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009300:	4770      	bx	lr

08009302 <sensors_Convert>:
//----------------------------------------------------------
float sensors_Convert(uint16_t dt)
{
 8009302:	b480      	push	{r7}
 8009304:	b085      	sub	sp, #20
 8009306:	af00      	add	r7, sp, #0
 8009308:	4603      	mov	r3, r0
 800930a:	80fb      	strh	r3, [r7, #6]
	float t;

	t = (float)((dt&0x07FF)>>4);		//отборосим знаковые и дробные биты
 800930c:	88fb      	ldrh	r3, [r7, #6]
 800930e:	111b      	asrs	r3, r3, #4
 8009310:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009314:	ee07 3a90 	vmov	s15, r3
 8009318:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800931c:	edc7 7a03 	vstr	s15, [r7, #12]
	t += (float)(dt&0x000F) / 16.0f;	//ѕрибавим дробную часть
 8009320:	88fb      	ldrh	r3, [r7, #6]
 8009322:	f003 030f 	and.w	r3, r3, #15
 8009326:	ee07 3a90 	vmov	s15, r3
 800932a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800932e:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8009332:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009336:	ed97 7a03 	vldr	s14, [r7, #12]
 800933a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800933e:	edc7 7a03 	vstr	s15, [r7, #12]

	return t;
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	ee07 3a90 	vmov	s15, r3
}
 8009348:	eeb0 0a67 	vmov.f32	s0, s15
 800934c:	3714      	adds	r7, #20
 800934e:	46bd      	mov	sp, r7
 8009350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009354:	4770      	bx	lr
	...

08009358 <UpdateTempSens>:
//----------------------------------------------------------
void UpdateTempSens(void)
{
 8009358:	b5f0      	push	{r4, r5, r6, r7, lr}
 800935a:	b08b      	sub	sp, #44	; 0x2c
 800935c:	af06      	add	r7, sp, #24
	sensors_init(NO_SKIP_ROM);
 800935e:	2001      	movs	r0, #1
 8009360:	f7ff febe 	bl	80090e0 <sensors_init>

	for(uint8_t i = 0; i < Dev_Cnt; i++)
 8009364:	2300      	movs	r3, #0
 8009366:	73fb      	strb	r3, [r7, #15]
 8009368:	e079      	b.n	800945e <UpdateTempSens+0x106>
	{
		sprintf(Device_RAW_ROM[i],"%02X%02X%02X%02X%02X%02X%02X%02X", Dev_ID[i][0], Dev_ID[i][1], Dev_ID[i][2], Dev_ID[i][3], Dev_ID[i][4], Dev_ID[i][5], Dev_ID[i][6], Dev_ID[i][7]);
 800936a:	7bfa      	ldrb	r2, [r7, #15]
 800936c:	4613      	mov	r3, r2
 800936e:	009b      	lsls	r3, r3, #2
 8009370:	4413      	add	r3, r2
 8009372:	009b      	lsls	r3, r3, #2
 8009374:	4a42      	ldr	r2, [pc, #264]	; (8009480 <UpdateTempSens+0x128>)
 8009376:	1898      	adds	r0, r3, r2
 8009378:	7bfb      	ldrb	r3, [r7, #15]
 800937a:	4a42      	ldr	r2, [pc, #264]	; (8009484 <UpdateTempSens+0x12c>)
 800937c:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 8009380:	469c      	mov	ip, r3
 8009382:	7bfb      	ldrb	r3, [r7, #15]
 8009384:	4a3f      	ldr	r2, [pc, #252]	; (8009484 <UpdateTempSens+0x12c>)
 8009386:	00db      	lsls	r3, r3, #3
 8009388:	4413      	add	r3, r2
 800938a:	785b      	ldrb	r3, [r3, #1]
 800938c:	469e      	mov	lr, r3
 800938e:	7bfb      	ldrb	r3, [r7, #15]
 8009390:	4a3c      	ldr	r2, [pc, #240]	; (8009484 <UpdateTempSens+0x12c>)
 8009392:	00db      	lsls	r3, r3, #3
 8009394:	4413      	add	r3, r2
 8009396:	789b      	ldrb	r3, [r3, #2]
 8009398:	4619      	mov	r1, r3
 800939a:	7bfb      	ldrb	r3, [r7, #15]
 800939c:	4a39      	ldr	r2, [pc, #228]	; (8009484 <UpdateTempSens+0x12c>)
 800939e:	00db      	lsls	r3, r3, #3
 80093a0:	4413      	add	r3, r2
 80093a2:	78db      	ldrb	r3, [r3, #3]
 80093a4:	461c      	mov	r4, r3
 80093a6:	7bfb      	ldrb	r3, [r7, #15]
 80093a8:	4a36      	ldr	r2, [pc, #216]	; (8009484 <UpdateTempSens+0x12c>)
 80093aa:	00db      	lsls	r3, r3, #3
 80093ac:	4413      	add	r3, r2
 80093ae:	791b      	ldrb	r3, [r3, #4]
 80093b0:	461d      	mov	r5, r3
 80093b2:	7bfb      	ldrb	r3, [r7, #15]
 80093b4:	4a33      	ldr	r2, [pc, #204]	; (8009484 <UpdateTempSens+0x12c>)
 80093b6:	00db      	lsls	r3, r3, #3
 80093b8:	4413      	add	r3, r2
 80093ba:	795b      	ldrb	r3, [r3, #5]
 80093bc:	461e      	mov	r6, r3
 80093be:	7bfb      	ldrb	r3, [r7, #15]
 80093c0:	4a30      	ldr	r2, [pc, #192]	; (8009484 <UpdateTempSens+0x12c>)
 80093c2:	00db      	lsls	r3, r3, #3
 80093c4:	4413      	add	r3, r2
 80093c6:	799b      	ldrb	r3, [r3, #6]
 80093c8:	607b      	str	r3, [r7, #4]
 80093ca:	7bfb      	ldrb	r3, [r7, #15]
 80093cc:	4a2d      	ldr	r2, [pc, #180]	; (8009484 <UpdateTempSens+0x12c>)
 80093ce:	00db      	lsls	r3, r3, #3
 80093d0:	4413      	add	r3, r2
 80093d2:	79db      	ldrb	r3, [r3, #7]
 80093d4:	9305      	str	r3, [sp, #20]
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	9304      	str	r3, [sp, #16]
 80093da:	9603      	str	r6, [sp, #12]
 80093dc:	9502      	str	r5, [sp, #8]
 80093de:	9401      	str	r4, [sp, #4]
 80093e0:	9100      	str	r1, [sp, #0]
 80093e2:	4673      	mov	r3, lr
 80093e4:	4662      	mov	r2, ip
 80093e6:	4928      	ldr	r1, [pc, #160]	; (8009488 <UpdateTempSens+0x130>)
 80093e8:	f012 f856 	bl	801b498 <siprintf>
		//----------------------from debug---------------------------
		if(strcmp(Device_RAW_ROM[i], "28790E950C000069") == 0)
 80093ec:	7bfa      	ldrb	r2, [r7, #15]
 80093ee:	4613      	mov	r3, r2
 80093f0:	009b      	lsls	r3, r3, #2
 80093f2:	4413      	add	r3, r2
 80093f4:	009b      	lsls	r3, r3, #2
 80093f6:	4a22      	ldr	r2, [pc, #136]	; (8009480 <UpdateTempSens+0x128>)
 80093f8:	4413      	add	r3, r2
 80093fa:	4924      	ldr	r1, [pc, #144]	; (800948c <UpdateTempSens+0x134>)
 80093fc:	4618      	mov	r0, r3
 80093fe:	f7f6 fee7 	bl	80001d0 <strcmp>
 8009402:	4603      	mov	r3, r0
 8009404:	2b00      	cmp	r3, #0
 8009406:	d10c      	bne.n	8009422 <UpdateTempSens+0xca>
		{
			SEND_str(Device_RAW_ROM[i]);
 8009408:	7bfa      	ldrb	r2, [r7, #15]
 800940a:	4613      	mov	r3, r2
 800940c:	009b      	lsls	r3, r3, #2
 800940e:	4413      	add	r3, r2
 8009410:	009b      	lsls	r3, r3, #2
 8009412:	4a1b      	ldr	r2, [pc, #108]	; (8009480 <UpdateTempSens+0x128>)
 8009414:	4413      	add	r3, r2
 8009416:	4618      	mov	r0, r3
 8009418:	f7f9 fbf8 	bl	8002c0c <SEND_str>
			SEND_str(" - YES\n");
 800941c:	481c      	ldr	r0, [pc, #112]	; (8009490 <UpdateTempSens+0x138>)
 800941e:	f7f9 fbf5 	bl	8002c0c <SEND_str>
		}
		if(strcmp(Device_RAW_ROM[i], "28BF1E930C000031") == 0)
 8009422:	7bfa      	ldrb	r2, [r7, #15]
 8009424:	4613      	mov	r3, r2
 8009426:	009b      	lsls	r3, r3, #2
 8009428:	4413      	add	r3, r2
 800942a:	009b      	lsls	r3, r3, #2
 800942c:	4a14      	ldr	r2, [pc, #80]	; (8009480 <UpdateTempSens+0x128>)
 800942e:	4413      	add	r3, r2
 8009430:	4918      	ldr	r1, [pc, #96]	; (8009494 <UpdateTempSens+0x13c>)
 8009432:	4618      	mov	r0, r3
 8009434:	f7f6 fecc 	bl	80001d0 <strcmp>
 8009438:	4603      	mov	r3, r0
 800943a:	2b00      	cmp	r3, #0
 800943c:	d10c      	bne.n	8009458 <UpdateTempSens+0x100>
		{
			SEND_str(Device_RAW_ROM[i]);
 800943e:	7bfa      	ldrb	r2, [r7, #15]
 8009440:	4613      	mov	r3, r2
 8009442:	009b      	lsls	r3, r3, #2
 8009444:	4413      	add	r3, r2
 8009446:	009b      	lsls	r3, r3, #2
 8009448:	4a0d      	ldr	r2, [pc, #52]	; (8009480 <UpdateTempSens+0x128>)
 800944a:	4413      	add	r3, r2
 800944c:	4618      	mov	r0, r3
 800944e:	f7f9 fbdd 	bl	8002c0c <SEND_str>
			SEND_str(" - YES\n");
 8009452:	480f      	ldr	r0, [pc, #60]	; (8009490 <UpdateTempSens+0x138>)
 8009454:	f7f9 fbda 	bl	8002c0c <SEND_str>
	for(uint8_t i = 0; i < Dev_Cnt; i++)
 8009458:	7bfb      	ldrb	r3, [r7, #15]
 800945a:	3301      	adds	r3, #1
 800945c:	73fb      	strb	r3, [r7, #15]
 800945e:	4b0e      	ldr	r3, [pc, #56]	; (8009498 <UpdateTempSens+0x140>)
 8009460:	781b      	ldrb	r3, [r3, #0]
 8009462:	7bfa      	ldrb	r2, [r7, #15]
 8009464:	429a      	cmp	r2, r3
 8009466:	d380      	bcc.n	800936a <UpdateTempSens+0x12>
		}
		//-----------------------------------------------------------
	}

	__HAL_TIM_CLEAR_FLAG(&htim6, TIM_SR_UIF); // очищаем флаг
 8009468:	4b0c      	ldr	r3, [pc, #48]	; (800949c <UpdateTempSens+0x144>)
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	f06f 0201 	mvn.w	r2, #1
 8009470:	611a      	str	r2, [r3, #16]
	HAL_TIM_Base_Start_IT(&htim6);
 8009472:	480a      	ldr	r0, [pc, #40]	; (800949c <UpdateTempSens+0x144>)
 8009474:	f003 fcdb 	bl	800ce2e <HAL_TIM_Base_Start_IT>
}
 8009478:	bf00      	nop
 800947a:	3714      	adds	r7, #20
 800947c:	46bd      	mov	sp, r7
 800947e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009480:	200013b4 	.word	0x200013b4
 8009484:	20001394 	.word	0x20001394
 8009488:	08020b14 	.word	0x08020b14
 800948c:	08020b38 	.word	0x08020b38
 8009490:	08020b4c 	.word	0x08020b4c
 8009494:	08020b54 	.word	0x08020b54
 8009498:	200013b0 	.word	0x200013b0
 800949c:	20000ba0 	.word	0x20000ba0

080094a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80094a0:	b580      	push	{r7, lr}
 80094a2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80094a4:	4b0e      	ldr	r3, [pc, #56]	; (80094e0 <HAL_Init+0x40>)
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	4a0d      	ldr	r2, [pc, #52]	; (80094e0 <HAL_Init+0x40>)
 80094aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80094ae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80094b0:	4b0b      	ldr	r3, [pc, #44]	; (80094e0 <HAL_Init+0x40>)
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	4a0a      	ldr	r2, [pc, #40]	; (80094e0 <HAL_Init+0x40>)
 80094b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80094ba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80094bc:	4b08      	ldr	r3, [pc, #32]	; (80094e0 <HAL_Init+0x40>)
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	4a07      	ldr	r2, [pc, #28]	; (80094e0 <HAL_Init+0x40>)
 80094c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80094c6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80094c8:	2003      	movs	r0, #3
 80094ca:	f000 fce6 	bl	8009e9a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80094ce:	2000      	movs	r0, #0
 80094d0:	f7fa f91a 	bl	8003708 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80094d4:	f7fa f8f0 	bl	80036b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80094d8:	2300      	movs	r3, #0
}
 80094da:	4618      	mov	r0, r3
 80094dc:	bd80      	pop	{r7, pc}
 80094de:	bf00      	nop
 80094e0:	40023c00 	.word	0x40023c00

080094e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80094e4:	b480      	push	{r7}
 80094e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80094e8:	4b06      	ldr	r3, [pc, #24]	; (8009504 <HAL_IncTick+0x20>)
 80094ea:	781b      	ldrb	r3, [r3, #0]
 80094ec:	461a      	mov	r2, r3
 80094ee:	4b06      	ldr	r3, [pc, #24]	; (8009508 <HAL_IncTick+0x24>)
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	4413      	add	r3, r2
 80094f4:	4a04      	ldr	r2, [pc, #16]	; (8009508 <HAL_IncTick+0x24>)
 80094f6:	6013      	str	r3, [r2, #0]
}
 80094f8:	bf00      	nop
 80094fa:	46bd      	mov	sp, r7
 80094fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009500:	4770      	bx	lr
 8009502:	bf00      	nop
 8009504:	20000074 	.word	0x20000074
 8009508:	200013dc 	.word	0x200013dc

0800950c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800950c:	b480      	push	{r7}
 800950e:	af00      	add	r7, sp, #0
  return uwTick;
 8009510:	4b03      	ldr	r3, [pc, #12]	; (8009520 <HAL_GetTick+0x14>)
 8009512:	681b      	ldr	r3, [r3, #0]
}
 8009514:	4618      	mov	r0, r3
 8009516:	46bd      	mov	sp, r7
 8009518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800951c:	4770      	bx	lr
 800951e:	bf00      	nop
 8009520:	200013dc 	.word	0x200013dc

08009524 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8009524:	b580      	push	{r7, lr}
 8009526:	b084      	sub	sp, #16
 8009528:	af00      	add	r7, sp, #0
 800952a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800952c:	f7ff ffee 	bl	800950c <HAL_GetTick>
 8009530:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	f1b3 3fff 	cmp.w	r3, #4294967295
 800953c:	d005      	beq.n	800954a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800953e:	4b0a      	ldr	r3, [pc, #40]	; (8009568 <HAL_Delay+0x44>)
 8009540:	781b      	ldrb	r3, [r3, #0]
 8009542:	461a      	mov	r2, r3
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	4413      	add	r3, r2
 8009548:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800954a:	bf00      	nop
 800954c:	f7ff ffde 	bl	800950c <HAL_GetTick>
 8009550:	4602      	mov	r2, r0
 8009552:	68bb      	ldr	r3, [r7, #8]
 8009554:	1ad3      	subs	r3, r2, r3
 8009556:	68fa      	ldr	r2, [r7, #12]
 8009558:	429a      	cmp	r2, r3
 800955a:	d8f7      	bhi.n	800954c <HAL_Delay+0x28>
  {
  }
}
 800955c:	bf00      	nop
 800955e:	bf00      	nop
 8009560:	3710      	adds	r7, #16
 8009562:	46bd      	mov	sp, r7
 8009564:	bd80      	pop	{r7, pc}
 8009566:	bf00      	nop
 8009568:	20000074 	.word	0x20000074

0800956c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800956c:	b580      	push	{r7, lr}
 800956e:	b084      	sub	sp, #16
 8009570:	af00      	add	r7, sp, #0
 8009572:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8009574:	2300      	movs	r3, #0
 8009576:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	2b00      	cmp	r3, #0
 800957c:	d101      	bne.n	8009582 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800957e:	2301      	movs	r3, #1
 8009580:	e033      	b.n	80095ea <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009586:	2b00      	cmp	r3, #0
 8009588:	d109      	bne.n	800959e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800958a:	6878      	ldr	r0, [r7, #4]
 800958c:	f7f9 faae 	bl	8002aec <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	2200      	movs	r2, #0
 8009594:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	2200      	movs	r2, #0
 800959a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095a2:	f003 0310 	and.w	r3, r3, #16
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d118      	bne.n	80095dc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095ae:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80095b2:	f023 0302 	bic.w	r3, r3, #2
 80095b6:	f043 0202 	orr.w	r2, r3, #2
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80095be:	6878      	ldr	r0, [r7, #4]
 80095c0:	f000 fa40 	bl	8009a44 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	2200      	movs	r2, #0
 80095c8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095ce:	f023 0303 	bic.w	r3, r3, #3
 80095d2:	f043 0201 	orr.w	r2, r3, #1
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	641a      	str	r2, [r3, #64]	; 0x40
 80095da:	e001      	b.n	80095e0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80095dc:	2301      	movs	r3, #1
 80095de:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	2200      	movs	r2, #0
 80095e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80095e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80095ea:	4618      	mov	r0, r3
 80095ec:	3710      	adds	r7, #16
 80095ee:	46bd      	mov	sp, r7
 80095f0:	bd80      	pop	{r7, pc}
	...

080095f4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80095f4:	b580      	push	{r7, lr}
 80095f6:	b086      	sub	sp, #24
 80095f8:	af00      	add	r7, sp, #0
 80095fa:	60f8      	str	r0, [r7, #12]
 80095fc:	60b9      	str	r1, [r7, #8]
 80095fe:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8009600:	2300      	movs	r3, #0
 8009602:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800960a:	2b01      	cmp	r3, #1
 800960c:	d101      	bne.n	8009612 <HAL_ADC_Start_DMA+0x1e>
 800960e:	2302      	movs	r3, #2
 8009610:	e0cc      	b.n	80097ac <HAL_ADC_Start_DMA+0x1b8>
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	2201      	movs	r2, #1
 8009616:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	689b      	ldr	r3, [r3, #8]
 8009620:	f003 0301 	and.w	r3, r3, #1
 8009624:	2b01      	cmp	r3, #1
 8009626:	d018      	beq.n	800965a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	689a      	ldr	r2, [r3, #8]
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	f042 0201 	orr.w	r2, r2, #1
 8009636:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8009638:	4b5e      	ldr	r3, [pc, #376]	; (80097b4 <HAL_ADC_Start_DMA+0x1c0>)
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	4a5e      	ldr	r2, [pc, #376]	; (80097b8 <HAL_ADC_Start_DMA+0x1c4>)
 800963e:	fba2 2303 	umull	r2, r3, r2, r3
 8009642:	0c9a      	lsrs	r2, r3, #18
 8009644:	4613      	mov	r3, r2
 8009646:	005b      	lsls	r3, r3, #1
 8009648:	4413      	add	r3, r2
 800964a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800964c:	e002      	b.n	8009654 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800964e:	693b      	ldr	r3, [r7, #16]
 8009650:	3b01      	subs	r3, #1
 8009652:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8009654:	693b      	ldr	r3, [r7, #16]
 8009656:	2b00      	cmp	r3, #0
 8009658:	d1f9      	bne.n	800964e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	689b      	ldr	r3, [r3, #8]
 8009660:	f003 0301 	and.w	r3, r3, #1
 8009664:	2b01      	cmp	r3, #1
 8009666:	f040 80a0 	bne.w	80097aa <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800966e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8009672:	f023 0301 	bic.w	r3, r3, #1
 8009676:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	685b      	ldr	r3, [r3, #4]
 8009684:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009688:	2b00      	cmp	r3, #0
 800968a:	d007      	beq.n	800969c <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009690:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8009694:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80096a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80096a8:	d106      	bne.n	80096b8 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80096ae:	f023 0206 	bic.w	r2, r3, #6
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	645a      	str	r2, [r3, #68]	; 0x44
 80096b6:	e002      	b.n	80096be <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	2200      	movs	r2, #0
 80096bc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	2200      	movs	r2, #0
 80096c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80096c6:	4b3d      	ldr	r3, [pc, #244]	; (80097bc <HAL_ADC_Start_DMA+0x1c8>)
 80096c8:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096ce:	4a3c      	ldr	r2, [pc, #240]	; (80097c0 <HAL_ADC_Start_DMA+0x1cc>)
 80096d0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096d6:	4a3b      	ldr	r2, [pc, #236]	; (80097c4 <HAL_ADC_Start_DMA+0x1d0>)
 80096d8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096de:	4a3a      	ldr	r2, [pc, #232]	; (80097c8 <HAL_ADC_Start_DMA+0x1d4>)
 80096e0:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80096ea:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	685a      	ldr	r2, [r3, #4]
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80096fa:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	689a      	ldr	r2, [r3, #8]
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800970a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	334c      	adds	r3, #76	; 0x4c
 8009716:	4619      	mov	r1, r3
 8009718:	68ba      	ldr	r2, [r7, #8]
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	f000 fca0 	bl	800a060 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8009720:	697b      	ldr	r3, [r7, #20]
 8009722:	685b      	ldr	r3, [r3, #4]
 8009724:	f003 031f 	and.w	r3, r3, #31
 8009728:	2b00      	cmp	r3, #0
 800972a:	d12a      	bne.n	8009782 <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	4a26      	ldr	r2, [pc, #152]	; (80097cc <HAL_ADC_Start_DMA+0x1d8>)
 8009732:	4293      	cmp	r3, r2
 8009734:	d015      	beq.n	8009762 <HAL_ADC_Start_DMA+0x16e>
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	4a25      	ldr	r2, [pc, #148]	; (80097d0 <HAL_ADC_Start_DMA+0x1dc>)
 800973c:	4293      	cmp	r3, r2
 800973e:	d105      	bne.n	800974c <HAL_ADC_Start_DMA+0x158>
 8009740:	4b1e      	ldr	r3, [pc, #120]	; (80097bc <HAL_ADC_Start_DMA+0x1c8>)
 8009742:	685b      	ldr	r3, [r3, #4]
 8009744:	f003 031f 	and.w	r3, r3, #31
 8009748:	2b00      	cmp	r3, #0
 800974a:	d00a      	beq.n	8009762 <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	4a20      	ldr	r2, [pc, #128]	; (80097d4 <HAL_ADC_Start_DMA+0x1e0>)
 8009752:	4293      	cmp	r3, r2
 8009754:	d129      	bne.n	80097aa <HAL_ADC_Start_DMA+0x1b6>
 8009756:	4b19      	ldr	r3, [pc, #100]	; (80097bc <HAL_ADC_Start_DMA+0x1c8>)
 8009758:	685b      	ldr	r3, [r3, #4]
 800975a:	f003 0310 	and.w	r3, r3, #16
 800975e:	2b00      	cmp	r3, #0
 8009760:	d123      	bne.n	80097aa <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	689b      	ldr	r3, [r3, #8]
 8009768:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800976c:	2b00      	cmp	r3, #0
 800976e:	d11c      	bne.n	80097aa <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	689a      	ldr	r2, [r3, #8]
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800977e:	609a      	str	r2, [r3, #8]
 8009780:	e013      	b.n	80097aa <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	4a11      	ldr	r2, [pc, #68]	; (80097cc <HAL_ADC_Start_DMA+0x1d8>)
 8009788:	4293      	cmp	r3, r2
 800978a:	d10e      	bne.n	80097aa <HAL_ADC_Start_DMA+0x1b6>
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	689b      	ldr	r3, [r3, #8]
 8009792:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009796:	2b00      	cmp	r3, #0
 8009798:	d107      	bne.n	80097aa <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	689a      	ldr	r2, [r3, #8]
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80097a8:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80097aa:	2300      	movs	r3, #0
}
 80097ac:	4618      	mov	r0, r3
 80097ae:	3718      	adds	r7, #24
 80097b0:	46bd      	mov	sp, r7
 80097b2:	bd80      	pop	{r7, pc}
 80097b4:	20000008 	.word	0x20000008
 80097b8:	431bde83 	.word	0x431bde83
 80097bc:	40012300 	.word	0x40012300
 80097c0:	08009c3d 	.word	0x08009c3d
 80097c4:	08009cf7 	.word	0x08009cf7
 80097c8:	08009d13 	.word	0x08009d13
 80097cc:	40012000 	.word	0x40012000
 80097d0:	40012100 	.word	0x40012100
 80097d4:	40012200 	.word	0x40012200

080097d8 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80097d8:	b480      	push	{r7}
 80097da:	b083      	sub	sp, #12
 80097dc:	af00      	add	r7, sp, #0
 80097de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80097e0:	bf00      	nop
 80097e2:	370c      	adds	r7, #12
 80097e4:	46bd      	mov	sp, r7
 80097e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ea:	4770      	bx	lr

080097ec <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80097ec:	b480      	push	{r7}
 80097ee:	b083      	sub	sp, #12
 80097f0:	af00      	add	r7, sp, #0
 80097f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80097f4:	bf00      	nop
 80097f6:	370c      	adds	r7, #12
 80097f8:	46bd      	mov	sp, r7
 80097fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097fe:	4770      	bx	lr

08009800 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8009800:	b480      	push	{r7}
 8009802:	b085      	sub	sp, #20
 8009804:	af00      	add	r7, sp, #0
 8009806:	6078      	str	r0, [r7, #4]
 8009808:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800980a:	2300      	movs	r3, #0
 800980c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009814:	2b01      	cmp	r3, #1
 8009816:	d101      	bne.n	800981c <HAL_ADC_ConfigChannel+0x1c>
 8009818:	2302      	movs	r3, #2
 800981a:	e105      	b.n	8009a28 <HAL_ADC_ConfigChannel+0x228>
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	2201      	movs	r2, #1
 8009820:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8009824:	683b      	ldr	r3, [r7, #0]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	2b09      	cmp	r3, #9
 800982a:	d925      	bls.n	8009878 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	68d9      	ldr	r1, [r3, #12]
 8009832:	683b      	ldr	r3, [r7, #0]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	b29b      	uxth	r3, r3
 8009838:	461a      	mov	r2, r3
 800983a:	4613      	mov	r3, r2
 800983c:	005b      	lsls	r3, r3, #1
 800983e:	4413      	add	r3, r2
 8009840:	3b1e      	subs	r3, #30
 8009842:	2207      	movs	r2, #7
 8009844:	fa02 f303 	lsl.w	r3, r2, r3
 8009848:	43da      	mvns	r2, r3
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	400a      	ands	r2, r1
 8009850:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	68d9      	ldr	r1, [r3, #12]
 8009858:	683b      	ldr	r3, [r7, #0]
 800985a:	689a      	ldr	r2, [r3, #8]
 800985c:	683b      	ldr	r3, [r7, #0]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	b29b      	uxth	r3, r3
 8009862:	4618      	mov	r0, r3
 8009864:	4603      	mov	r3, r0
 8009866:	005b      	lsls	r3, r3, #1
 8009868:	4403      	add	r3, r0
 800986a:	3b1e      	subs	r3, #30
 800986c:	409a      	lsls	r2, r3
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	430a      	orrs	r2, r1
 8009874:	60da      	str	r2, [r3, #12]
 8009876:	e022      	b.n	80098be <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	6919      	ldr	r1, [r3, #16]
 800987e:	683b      	ldr	r3, [r7, #0]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	b29b      	uxth	r3, r3
 8009884:	461a      	mov	r2, r3
 8009886:	4613      	mov	r3, r2
 8009888:	005b      	lsls	r3, r3, #1
 800988a:	4413      	add	r3, r2
 800988c:	2207      	movs	r2, #7
 800988e:	fa02 f303 	lsl.w	r3, r2, r3
 8009892:	43da      	mvns	r2, r3
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	400a      	ands	r2, r1
 800989a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	6919      	ldr	r1, [r3, #16]
 80098a2:	683b      	ldr	r3, [r7, #0]
 80098a4:	689a      	ldr	r2, [r3, #8]
 80098a6:	683b      	ldr	r3, [r7, #0]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	b29b      	uxth	r3, r3
 80098ac:	4618      	mov	r0, r3
 80098ae:	4603      	mov	r3, r0
 80098b0:	005b      	lsls	r3, r3, #1
 80098b2:	4403      	add	r3, r0
 80098b4:	409a      	lsls	r2, r3
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	430a      	orrs	r2, r1
 80098bc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80098be:	683b      	ldr	r3, [r7, #0]
 80098c0:	685b      	ldr	r3, [r3, #4]
 80098c2:	2b06      	cmp	r3, #6
 80098c4:	d824      	bhi.n	8009910 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80098cc:	683b      	ldr	r3, [r7, #0]
 80098ce:	685a      	ldr	r2, [r3, #4]
 80098d0:	4613      	mov	r3, r2
 80098d2:	009b      	lsls	r3, r3, #2
 80098d4:	4413      	add	r3, r2
 80098d6:	3b05      	subs	r3, #5
 80098d8:	221f      	movs	r2, #31
 80098da:	fa02 f303 	lsl.w	r3, r2, r3
 80098de:	43da      	mvns	r2, r3
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	400a      	ands	r2, r1
 80098e6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80098ee:	683b      	ldr	r3, [r7, #0]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	b29b      	uxth	r3, r3
 80098f4:	4618      	mov	r0, r3
 80098f6:	683b      	ldr	r3, [r7, #0]
 80098f8:	685a      	ldr	r2, [r3, #4]
 80098fa:	4613      	mov	r3, r2
 80098fc:	009b      	lsls	r3, r3, #2
 80098fe:	4413      	add	r3, r2
 8009900:	3b05      	subs	r3, #5
 8009902:	fa00 f203 	lsl.w	r2, r0, r3
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	430a      	orrs	r2, r1
 800990c:	635a      	str	r2, [r3, #52]	; 0x34
 800990e:	e04c      	b.n	80099aa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8009910:	683b      	ldr	r3, [r7, #0]
 8009912:	685b      	ldr	r3, [r3, #4]
 8009914:	2b0c      	cmp	r3, #12
 8009916:	d824      	bhi.n	8009962 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800991e:	683b      	ldr	r3, [r7, #0]
 8009920:	685a      	ldr	r2, [r3, #4]
 8009922:	4613      	mov	r3, r2
 8009924:	009b      	lsls	r3, r3, #2
 8009926:	4413      	add	r3, r2
 8009928:	3b23      	subs	r3, #35	; 0x23
 800992a:	221f      	movs	r2, #31
 800992c:	fa02 f303 	lsl.w	r3, r2, r3
 8009930:	43da      	mvns	r2, r3
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	400a      	ands	r2, r1
 8009938:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8009940:	683b      	ldr	r3, [r7, #0]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	b29b      	uxth	r3, r3
 8009946:	4618      	mov	r0, r3
 8009948:	683b      	ldr	r3, [r7, #0]
 800994a:	685a      	ldr	r2, [r3, #4]
 800994c:	4613      	mov	r3, r2
 800994e:	009b      	lsls	r3, r3, #2
 8009950:	4413      	add	r3, r2
 8009952:	3b23      	subs	r3, #35	; 0x23
 8009954:	fa00 f203 	lsl.w	r2, r0, r3
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	430a      	orrs	r2, r1
 800995e:	631a      	str	r2, [r3, #48]	; 0x30
 8009960:	e023      	b.n	80099aa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8009968:	683b      	ldr	r3, [r7, #0]
 800996a:	685a      	ldr	r2, [r3, #4]
 800996c:	4613      	mov	r3, r2
 800996e:	009b      	lsls	r3, r3, #2
 8009970:	4413      	add	r3, r2
 8009972:	3b41      	subs	r3, #65	; 0x41
 8009974:	221f      	movs	r2, #31
 8009976:	fa02 f303 	lsl.w	r3, r2, r3
 800997a:	43da      	mvns	r2, r3
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	400a      	ands	r2, r1
 8009982:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800998a:	683b      	ldr	r3, [r7, #0]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	b29b      	uxth	r3, r3
 8009990:	4618      	mov	r0, r3
 8009992:	683b      	ldr	r3, [r7, #0]
 8009994:	685a      	ldr	r2, [r3, #4]
 8009996:	4613      	mov	r3, r2
 8009998:	009b      	lsls	r3, r3, #2
 800999a:	4413      	add	r3, r2
 800999c:	3b41      	subs	r3, #65	; 0x41
 800999e:	fa00 f203 	lsl.w	r2, r0, r3
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	430a      	orrs	r2, r1
 80099a8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80099aa:	4b22      	ldr	r3, [pc, #136]	; (8009a34 <HAL_ADC_ConfigChannel+0x234>)
 80099ac:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	4a21      	ldr	r2, [pc, #132]	; (8009a38 <HAL_ADC_ConfigChannel+0x238>)
 80099b4:	4293      	cmp	r3, r2
 80099b6:	d109      	bne.n	80099cc <HAL_ADC_ConfigChannel+0x1cc>
 80099b8:	683b      	ldr	r3, [r7, #0]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	2b12      	cmp	r3, #18
 80099be:	d105      	bne.n	80099cc <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	685b      	ldr	r3, [r3, #4]
 80099c4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	4a19      	ldr	r2, [pc, #100]	; (8009a38 <HAL_ADC_ConfigChannel+0x238>)
 80099d2:	4293      	cmp	r3, r2
 80099d4:	d123      	bne.n	8009a1e <HAL_ADC_ConfigChannel+0x21e>
 80099d6:	683b      	ldr	r3, [r7, #0]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	2b10      	cmp	r3, #16
 80099dc:	d003      	beq.n	80099e6 <HAL_ADC_ConfigChannel+0x1e6>
 80099de:	683b      	ldr	r3, [r7, #0]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	2b11      	cmp	r3, #17
 80099e4:	d11b      	bne.n	8009a1e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	685b      	ldr	r3, [r3, #4]
 80099ea:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80099f2:	683b      	ldr	r3, [r7, #0]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	2b10      	cmp	r3, #16
 80099f8:	d111      	bne.n	8009a1e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80099fa:	4b10      	ldr	r3, [pc, #64]	; (8009a3c <HAL_ADC_ConfigChannel+0x23c>)
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	4a10      	ldr	r2, [pc, #64]	; (8009a40 <HAL_ADC_ConfigChannel+0x240>)
 8009a00:	fba2 2303 	umull	r2, r3, r2, r3
 8009a04:	0c9a      	lsrs	r2, r3, #18
 8009a06:	4613      	mov	r3, r2
 8009a08:	009b      	lsls	r3, r3, #2
 8009a0a:	4413      	add	r3, r2
 8009a0c:	005b      	lsls	r3, r3, #1
 8009a0e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8009a10:	e002      	b.n	8009a18 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8009a12:	68bb      	ldr	r3, [r7, #8]
 8009a14:	3b01      	subs	r3, #1
 8009a16:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8009a18:	68bb      	ldr	r3, [r7, #8]
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d1f9      	bne.n	8009a12 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	2200      	movs	r2, #0
 8009a22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8009a26:	2300      	movs	r3, #0
}
 8009a28:	4618      	mov	r0, r3
 8009a2a:	3714      	adds	r7, #20
 8009a2c:	46bd      	mov	sp, r7
 8009a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a32:	4770      	bx	lr
 8009a34:	40012300 	.word	0x40012300
 8009a38:	40012000 	.word	0x40012000
 8009a3c:	20000008 	.word	0x20000008
 8009a40:	431bde83 	.word	0x431bde83

08009a44 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8009a44:	b480      	push	{r7}
 8009a46:	b085      	sub	sp, #20
 8009a48:	af00      	add	r7, sp, #0
 8009a4a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8009a4c:	4b79      	ldr	r3, [pc, #484]	; (8009c34 <ADC_Init+0x1f0>)
 8009a4e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	685b      	ldr	r3, [r3, #4]
 8009a54:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	685a      	ldr	r2, [r3, #4]
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	685b      	ldr	r3, [r3, #4]
 8009a64:	431a      	orrs	r2, r3
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	685a      	ldr	r2, [r3, #4]
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009a78:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	6859      	ldr	r1, [r3, #4]
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	691b      	ldr	r3, [r3, #16]
 8009a84:	021a      	lsls	r2, r3, #8
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	430a      	orrs	r2, r1
 8009a8c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	685a      	ldr	r2, [r3, #4]
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8009a9c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	6859      	ldr	r1, [r3, #4]
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	689a      	ldr	r2, [r3, #8]
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	430a      	orrs	r2, r1
 8009aae:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	689a      	ldr	r2, [r3, #8]
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009abe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	6899      	ldr	r1, [r3, #8]
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	68da      	ldr	r2, [r3, #12]
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	430a      	orrs	r2, r1
 8009ad0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ad6:	4a58      	ldr	r2, [pc, #352]	; (8009c38 <ADC_Init+0x1f4>)
 8009ad8:	4293      	cmp	r3, r2
 8009ada:	d022      	beq.n	8009b22 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	689a      	ldr	r2, [r3, #8]
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8009aea:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	6899      	ldr	r1, [r3, #8]
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	430a      	orrs	r2, r1
 8009afc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	689a      	ldr	r2, [r3, #8]
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8009b0c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	6899      	ldr	r1, [r3, #8]
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	430a      	orrs	r2, r1
 8009b1e:	609a      	str	r2, [r3, #8]
 8009b20:	e00f      	b.n	8009b42 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	689a      	ldr	r2, [r3, #8]
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8009b30:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	689a      	ldr	r2, [r3, #8]
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8009b40:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	689a      	ldr	r2, [r3, #8]
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	f022 0202 	bic.w	r2, r2, #2
 8009b50:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	6899      	ldr	r1, [r3, #8]
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	7e1b      	ldrb	r3, [r3, #24]
 8009b5c:	005a      	lsls	r2, r3, #1
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	430a      	orrs	r2, r1
 8009b64:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d01b      	beq.n	8009ba8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	685a      	ldr	r2, [r3, #4]
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009b7e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	685a      	ldr	r2, [r3, #4]
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8009b8e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	6859      	ldr	r1, [r3, #4]
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b9a:	3b01      	subs	r3, #1
 8009b9c:	035a      	lsls	r2, r3, #13
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	430a      	orrs	r2, r1
 8009ba4:	605a      	str	r2, [r3, #4]
 8009ba6:	e007      	b.n	8009bb8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	685a      	ldr	r2, [r3, #4]
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009bb6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8009bc6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	69db      	ldr	r3, [r3, #28]
 8009bd2:	3b01      	subs	r3, #1
 8009bd4:	051a      	lsls	r2, r3, #20
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	430a      	orrs	r2, r1
 8009bdc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	689a      	ldr	r2, [r3, #8]
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8009bec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	6899      	ldr	r1, [r3, #8]
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009bfa:	025a      	lsls	r2, r3, #9
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	430a      	orrs	r2, r1
 8009c02:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	689a      	ldr	r2, [r3, #8]
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009c12:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	6899      	ldr	r1, [r3, #8]
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	695b      	ldr	r3, [r3, #20]
 8009c1e:	029a      	lsls	r2, r3, #10
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	430a      	orrs	r2, r1
 8009c26:	609a      	str	r2, [r3, #8]
}
 8009c28:	bf00      	nop
 8009c2a:	3714      	adds	r7, #20
 8009c2c:	46bd      	mov	sp, r7
 8009c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c32:	4770      	bx	lr
 8009c34:	40012300 	.word	0x40012300
 8009c38:	0f000001 	.word	0x0f000001

08009c3c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8009c3c:	b580      	push	{r7, lr}
 8009c3e:	b084      	sub	sp, #16
 8009c40:	af00      	add	r7, sp, #0
 8009c42:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c48:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c4e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d13c      	bne.n	8009cd0 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c5a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	689b      	ldr	r3, [r3, #8]
 8009c68:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d12b      	bne.n	8009cc8 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d127      	bne.n	8009cc8 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c7e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d006      	beq.n	8009c94 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	689b      	ldr	r3, [r3, #8]
 8009c8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d119      	bne.n	8009cc8 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	685a      	ldr	r2, [r3, #4]
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	f022 0220 	bic.w	r2, r2, #32
 8009ca2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ca8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cb4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d105      	bne.n	8009cc8 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cc0:	f043 0201 	orr.w	r2, r3, #1
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8009cc8:	68f8      	ldr	r0, [r7, #12]
 8009cca:	f7f9 fb55 	bl	8003378 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8009cce:	e00e      	b.n	8009cee <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cd4:	f003 0310 	and.w	r3, r3, #16
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d003      	beq.n	8009ce4 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8009cdc:	68f8      	ldr	r0, [r7, #12]
 8009cde:	f7ff fd85 	bl	80097ec <HAL_ADC_ErrorCallback>
}
 8009ce2:	e004      	b.n	8009cee <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ce8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009cea:	6878      	ldr	r0, [r7, #4]
 8009cec:	4798      	blx	r3
}
 8009cee:	bf00      	nop
 8009cf0:	3710      	adds	r7, #16
 8009cf2:	46bd      	mov	sp, r7
 8009cf4:	bd80      	pop	{r7, pc}

08009cf6 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8009cf6:	b580      	push	{r7, lr}
 8009cf8:	b084      	sub	sp, #16
 8009cfa:	af00      	add	r7, sp, #0
 8009cfc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d02:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8009d04:	68f8      	ldr	r0, [r7, #12]
 8009d06:	f7ff fd67 	bl	80097d8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8009d0a:	bf00      	nop
 8009d0c:	3710      	adds	r7, #16
 8009d0e:	46bd      	mov	sp, r7
 8009d10:	bd80      	pop	{r7, pc}

08009d12 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8009d12:	b580      	push	{r7, lr}
 8009d14:	b084      	sub	sp, #16
 8009d16:	af00      	add	r7, sp, #0
 8009d18:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d1e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	2240      	movs	r2, #64	; 0x40
 8009d24:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d2a:	f043 0204 	orr.w	r2, r3, #4
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8009d32:	68f8      	ldr	r0, [r7, #12]
 8009d34:	f7ff fd5a 	bl	80097ec <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8009d38:	bf00      	nop
 8009d3a:	3710      	adds	r7, #16
 8009d3c:	46bd      	mov	sp, r7
 8009d3e:	bd80      	pop	{r7, pc}

08009d40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009d40:	b480      	push	{r7}
 8009d42:	b085      	sub	sp, #20
 8009d44:	af00      	add	r7, sp, #0
 8009d46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	f003 0307 	and.w	r3, r3, #7
 8009d4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009d50:	4b0c      	ldr	r3, [pc, #48]	; (8009d84 <__NVIC_SetPriorityGrouping+0x44>)
 8009d52:	68db      	ldr	r3, [r3, #12]
 8009d54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8009d56:	68ba      	ldr	r2, [r7, #8]
 8009d58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8009d5c:	4013      	ands	r3, r2
 8009d5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009d64:	68bb      	ldr	r3, [r7, #8]
 8009d66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8009d68:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8009d6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009d70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8009d72:	4a04      	ldr	r2, [pc, #16]	; (8009d84 <__NVIC_SetPriorityGrouping+0x44>)
 8009d74:	68bb      	ldr	r3, [r7, #8]
 8009d76:	60d3      	str	r3, [r2, #12]
}
 8009d78:	bf00      	nop
 8009d7a:	3714      	adds	r7, #20
 8009d7c:	46bd      	mov	sp, r7
 8009d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d82:	4770      	bx	lr
 8009d84:	e000ed00 	.word	0xe000ed00

08009d88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8009d88:	b480      	push	{r7}
 8009d8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8009d8c:	4b04      	ldr	r3, [pc, #16]	; (8009da0 <__NVIC_GetPriorityGrouping+0x18>)
 8009d8e:	68db      	ldr	r3, [r3, #12]
 8009d90:	0a1b      	lsrs	r3, r3, #8
 8009d92:	f003 0307 	and.w	r3, r3, #7
}
 8009d96:	4618      	mov	r0, r3
 8009d98:	46bd      	mov	sp, r7
 8009d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d9e:	4770      	bx	lr
 8009da0:	e000ed00 	.word	0xe000ed00

08009da4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009da4:	b480      	push	{r7}
 8009da6:	b083      	sub	sp, #12
 8009da8:	af00      	add	r7, sp, #0
 8009daa:	4603      	mov	r3, r0
 8009dac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009dae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	db0b      	blt.n	8009dce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009db6:	79fb      	ldrb	r3, [r7, #7]
 8009db8:	f003 021f 	and.w	r2, r3, #31
 8009dbc:	4907      	ldr	r1, [pc, #28]	; (8009ddc <__NVIC_EnableIRQ+0x38>)
 8009dbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009dc2:	095b      	lsrs	r3, r3, #5
 8009dc4:	2001      	movs	r0, #1
 8009dc6:	fa00 f202 	lsl.w	r2, r0, r2
 8009dca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8009dce:	bf00      	nop
 8009dd0:	370c      	adds	r7, #12
 8009dd2:	46bd      	mov	sp, r7
 8009dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd8:	4770      	bx	lr
 8009dda:	bf00      	nop
 8009ddc:	e000e100 	.word	0xe000e100

08009de0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8009de0:	b480      	push	{r7}
 8009de2:	b083      	sub	sp, #12
 8009de4:	af00      	add	r7, sp, #0
 8009de6:	4603      	mov	r3, r0
 8009de8:	6039      	str	r1, [r7, #0]
 8009dea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009dec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	db0a      	blt.n	8009e0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009df4:	683b      	ldr	r3, [r7, #0]
 8009df6:	b2da      	uxtb	r2, r3
 8009df8:	490c      	ldr	r1, [pc, #48]	; (8009e2c <__NVIC_SetPriority+0x4c>)
 8009dfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009dfe:	0112      	lsls	r2, r2, #4
 8009e00:	b2d2      	uxtb	r2, r2
 8009e02:	440b      	add	r3, r1
 8009e04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8009e08:	e00a      	b.n	8009e20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009e0a:	683b      	ldr	r3, [r7, #0]
 8009e0c:	b2da      	uxtb	r2, r3
 8009e0e:	4908      	ldr	r1, [pc, #32]	; (8009e30 <__NVIC_SetPriority+0x50>)
 8009e10:	79fb      	ldrb	r3, [r7, #7]
 8009e12:	f003 030f 	and.w	r3, r3, #15
 8009e16:	3b04      	subs	r3, #4
 8009e18:	0112      	lsls	r2, r2, #4
 8009e1a:	b2d2      	uxtb	r2, r2
 8009e1c:	440b      	add	r3, r1
 8009e1e:	761a      	strb	r2, [r3, #24]
}
 8009e20:	bf00      	nop
 8009e22:	370c      	adds	r7, #12
 8009e24:	46bd      	mov	sp, r7
 8009e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e2a:	4770      	bx	lr
 8009e2c:	e000e100 	.word	0xe000e100
 8009e30:	e000ed00 	.word	0xe000ed00

08009e34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009e34:	b480      	push	{r7}
 8009e36:	b089      	sub	sp, #36	; 0x24
 8009e38:	af00      	add	r7, sp, #0
 8009e3a:	60f8      	str	r0, [r7, #12]
 8009e3c:	60b9      	str	r1, [r7, #8]
 8009e3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	f003 0307 	and.w	r3, r3, #7
 8009e46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009e48:	69fb      	ldr	r3, [r7, #28]
 8009e4a:	f1c3 0307 	rsb	r3, r3, #7
 8009e4e:	2b04      	cmp	r3, #4
 8009e50:	bf28      	it	cs
 8009e52:	2304      	movcs	r3, #4
 8009e54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009e56:	69fb      	ldr	r3, [r7, #28]
 8009e58:	3304      	adds	r3, #4
 8009e5a:	2b06      	cmp	r3, #6
 8009e5c:	d902      	bls.n	8009e64 <NVIC_EncodePriority+0x30>
 8009e5e:	69fb      	ldr	r3, [r7, #28]
 8009e60:	3b03      	subs	r3, #3
 8009e62:	e000      	b.n	8009e66 <NVIC_EncodePriority+0x32>
 8009e64:	2300      	movs	r3, #0
 8009e66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009e68:	f04f 32ff 	mov.w	r2, #4294967295
 8009e6c:	69bb      	ldr	r3, [r7, #24]
 8009e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8009e72:	43da      	mvns	r2, r3
 8009e74:	68bb      	ldr	r3, [r7, #8]
 8009e76:	401a      	ands	r2, r3
 8009e78:	697b      	ldr	r3, [r7, #20]
 8009e7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009e7c:	f04f 31ff 	mov.w	r1, #4294967295
 8009e80:	697b      	ldr	r3, [r7, #20]
 8009e82:	fa01 f303 	lsl.w	r3, r1, r3
 8009e86:	43d9      	mvns	r1, r3
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009e8c:	4313      	orrs	r3, r2
         );
}
 8009e8e:	4618      	mov	r0, r3
 8009e90:	3724      	adds	r7, #36	; 0x24
 8009e92:	46bd      	mov	sp, r7
 8009e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e98:	4770      	bx	lr

08009e9a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009e9a:	b580      	push	{r7, lr}
 8009e9c:	b082      	sub	sp, #8
 8009e9e:	af00      	add	r7, sp, #0
 8009ea0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8009ea2:	6878      	ldr	r0, [r7, #4]
 8009ea4:	f7ff ff4c 	bl	8009d40 <__NVIC_SetPriorityGrouping>
}
 8009ea8:	bf00      	nop
 8009eaa:	3708      	adds	r7, #8
 8009eac:	46bd      	mov	sp, r7
 8009eae:	bd80      	pop	{r7, pc}

08009eb0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8009eb0:	b580      	push	{r7, lr}
 8009eb2:	b086      	sub	sp, #24
 8009eb4:	af00      	add	r7, sp, #0
 8009eb6:	4603      	mov	r3, r0
 8009eb8:	60b9      	str	r1, [r7, #8]
 8009eba:	607a      	str	r2, [r7, #4]
 8009ebc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8009ebe:	2300      	movs	r3, #0
 8009ec0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8009ec2:	f7ff ff61 	bl	8009d88 <__NVIC_GetPriorityGrouping>
 8009ec6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8009ec8:	687a      	ldr	r2, [r7, #4]
 8009eca:	68b9      	ldr	r1, [r7, #8]
 8009ecc:	6978      	ldr	r0, [r7, #20]
 8009ece:	f7ff ffb1 	bl	8009e34 <NVIC_EncodePriority>
 8009ed2:	4602      	mov	r2, r0
 8009ed4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009ed8:	4611      	mov	r1, r2
 8009eda:	4618      	mov	r0, r3
 8009edc:	f7ff ff80 	bl	8009de0 <__NVIC_SetPriority>
}
 8009ee0:	bf00      	nop
 8009ee2:	3718      	adds	r7, #24
 8009ee4:	46bd      	mov	sp, r7
 8009ee6:	bd80      	pop	{r7, pc}

08009ee8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009ee8:	b580      	push	{r7, lr}
 8009eea:	b082      	sub	sp, #8
 8009eec:	af00      	add	r7, sp, #0
 8009eee:	4603      	mov	r3, r0
 8009ef0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009ef2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009ef6:	4618      	mov	r0, r3
 8009ef8:	f7ff ff54 	bl	8009da4 <__NVIC_EnableIRQ>
}
 8009efc:	bf00      	nop
 8009efe:	3708      	adds	r7, #8
 8009f00:	46bd      	mov	sp, r7
 8009f02:	bd80      	pop	{r7, pc}

08009f04 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8009f04:	b580      	push	{r7, lr}
 8009f06:	b086      	sub	sp, #24
 8009f08:	af00      	add	r7, sp, #0
 8009f0a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8009f0c:	2300      	movs	r3, #0
 8009f0e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8009f10:	f7ff fafc 	bl	800950c <HAL_GetTick>
 8009f14:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d101      	bne.n	8009f20 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8009f1c:	2301      	movs	r3, #1
 8009f1e:	e099      	b.n	800a054 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	2200      	movs	r2, #0
 8009f24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	2202      	movs	r2, #2
 8009f2c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	681a      	ldr	r2, [r3, #0]
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	f022 0201 	bic.w	r2, r2, #1
 8009f3e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8009f40:	e00f      	b.n	8009f62 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8009f42:	f7ff fae3 	bl	800950c <HAL_GetTick>
 8009f46:	4602      	mov	r2, r0
 8009f48:	693b      	ldr	r3, [r7, #16]
 8009f4a:	1ad3      	subs	r3, r2, r3
 8009f4c:	2b05      	cmp	r3, #5
 8009f4e:	d908      	bls.n	8009f62 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	2220      	movs	r2, #32
 8009f54:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	2203      	movs	r2, #3
 8009f5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8009f5e:	2303      	movs	r3, #3
 8009f60:	e078      	b.n	800a054 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	f003 0301 	and.w	r3, r3, #1
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d1e8      	bne.n	8009f42 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8009f78:	697a      	ldr	r2, [r7, #20]
 8009f7a:	4b38      	ldr	r3, [pc, #224]	; (800a05c <HAL_DMA_Init+0x158>)
 8009f7c:	4013      	ands	r3, r2
 8009f7e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	685a      	ldr	r2, [r3, #4]
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	689b      	ldr	r3, [r3, #8]
 8009f88:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8009f8e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	691b      	ldr	r3, [r3, #16]
 8009f94:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009f9a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	699b      	ldr	r3, [r3, #24]
 8009fa0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009fa6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	6a1b      	ldr	r3, [r3, #32]
 8009fac:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8009fae:	697a      	ldr	r2, [r7, #20]
 8009fb0:	4313      	orrs	r3, r2
 8009fb2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fb8:	2b04      	cmp	r3, #4
 8009fba:	d107      	bne.n	8009fcc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fc4:	4313      	orrs	r3, r2
 8009fc6:	697a      	ldr	r2, [r7, #20]
 8009fc8:	4313      	orrs	r3, r2
 8009fca:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	697a      	ldr	r2, [r7, #20]
 8009fd2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	695b      	ldr	r3, [r3, #20]
 8009fda:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8009fdc:	697b      	ldr	r3, [r7, #20]
 8009fde:	f023 0307 	bic.w	r3, r3, #7
 8009fe2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fe8:	697a      	ldr	r2, [r7, #20]
 8009fea:	4313      	orrs	r3, r2
 8009fec:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ff2:	2b04      	cmp	r3, #4
 8009ff4:	d117      	bne.n	800a026 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ffa:	697a      	ldr	r2, [r7, #20]
 8009ffc:	4313      	orrs	r3, r2
 8009ffe:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a004:	2b00      	cmp	r3, #0
 800a006:	d00e      	beq.n	800a026 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800a008:	6878      	ldr	r0, [r7, #4]
 800a00a:	f000 fa91 	bl	800a530 <DMA_CheckFifoParam>
 800a00e:	4603      	mov	r3, r0
 800a010:	2b00      	cmp	r3, #0
 800a012:	d008      	beq.n	800a026 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	2240      	movs	r2, #64	; 0x40
 800a018:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	2201      	movs	r2, #1
 800a01e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800a022:	2301      	movs	r3, #1
 800a024:	e016      	b.n	800a054 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	697a      	ldr	r2, [r7, #20]
 800a02c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800a02e:	6878      	ldr	r0, [r7, #4]
 800a030:	f000 fa48 	bl	800a4c4 <DMA_CalcBaseAndBitshift>
 800a034:	4603      	mov	r3, r0
 800a036:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a03c:	223f      	movs	r2, #63	; 0x3f
 800a03e:	409a      	lsls	r2, r3
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	2200      	movs	r2, #0
 800a048:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	2201      	movs	r2, #1
 800a04e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800a052:	2300      	movs	r3, #0
}
 800a054:	4618      	mov	r0, r3
 800a056:	3718      	adds	r7, #24
 800a058:	46bd      	mov	sp, r7
 800a05a:	bd80      	pop	{r7, pc}
 800a05c:	f010803f 	.word	0xf010803f

0800a060 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a060:	b580      	push	{r7, lr}
 800a062:	b086      	sub	sp, #24
 800a064:	af00      	add	r7, sp, #0
 800a066:	60f8      	str	r0, [r7, #12]
 800a068:	60b9      	str	r1, [r7, #8]
 800a06a:	607a      	str	r2, [r7, #4]
 800a06c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a06e:	2300      	movs	r3, #0
 800a070:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a076:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a07e:	2b01      	cmp	r3, #1
 800a080:	d101      	bne.n	800a086 <HAL_DMA_Start_IT+0x26>
 800a082:	2302      	movs	r3, #2
 800a084:	e040      	b.n	800a108 <HAL_DMA_Start_IT+0xa8>
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	2201      	movs	r2, #1
 800a08a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a094:	b2db      	uxtb	r3, r3
 800a096:	2b01      	cmp	r3, #1
 800a098:	d12f      	bne.n	800a0fa <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	2202      	movs	r2, #2
 800a09e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	2200      	movs	r2, #0
 800a0a6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800a0a8:	683b      	ldr	r3, [r7, #0]
 800a0aa:	687a      	ldr	r2, [r7, #4]
 800a0ac:	68b9      	ldr	r1, [r7, #8]
 800a0ae:	68f8      	ldr	r0, [r7, #12]
 800a0b0:	f000 f9da 	bl	800a468 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a0b8:	223f      	movs	r2, #63	; 0x3f
 800a0ba:	409a      	lsls	r2, r3
 800a0bc:	693b      	ldr	r3, [r7, #16]
 800a0be:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	681a      	ldr	r2, [r3, #0]
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	f042 0216 	orr.w	r2, r2, #22
 800a0ce:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d007      	beq.n	800a0e8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	681a      	ldr	r2, [r3, #0]
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	f042 0208 	orr.w	r2, r2, #8
 800a0e6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	681a      	ldr	r2, [r3, #0]
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	f042 0201 	orr.w	r2, r2, #1
 800a0f6:	601a      	str	r2, [r3, #0]
 800a0f8:	e005      	b.n	800a106 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	2200      	movs	r2, #0
 800a0fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800a102:	2302      	movs	r3, #2
 800a104:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800a106:	7dfb      	ldrb	r3, [r7, #23]
}
 800a108:	4618      	mov	r0, r3
 800a10a:	3718      	adds	r7, #24
 800a10c:	46bd      	mov	sp, r7
 800a10e:	bd80      	pop	{r7, pc}

0800a110 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800a110:	b480      	push	{r7}
 800a112:	b083      	sub	sp, #12
 800a114:	af00      	add	r7, sp, #0
 800a116:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a11e:	b2db      	uxtb	r3, r3
 800a120:	2b02      	cmp	r3, #2
 800a122:	d004      	beq.n	800a12e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	2280      	movs	r2, #128	; 0x80
 800a128:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800a12a:	2301      	movs	r3, #1
 800a12c:	e00c      	b.n	800a148 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	2205      	movs	r2, #5
 800a132:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	681a      	ldr	r2, [r3, #0]
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	f022 0201 	bic.w	r2, r2, #1
 800a144:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800a146:	2300      	movs	r3, #0
}
 800a148:	4618      	mov	r0, r3
 800a14a:	370c      	adds	r7, #12
 800a14c:	46bd      	mov	sp, r7
 800a14e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a152:	4770      	bx	lr

0800a154 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800a154:	b580      	push	{r7, lr}
 800a156:	b086      	sub	sp, #24
 800a158:	af00      	add	r7, sp, #0
 800a15a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800a15c:	2300      	movs	r3, #0
 800a15e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800a160:	4b92      	ldr	r3, [pc, #584]	; (800a3ac <HAL_DMA_IRQHandler+0x258>)
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	4a92      	ldr	r2, [pc, #584]	; (800a3b0 <HAL_DMA_IRQHandler+0x25c>)
 800a166:	fba2 2303 	umull	r2, r3, r2, r3
 800a16a:	0a9b      	lsrs	r3, r3, #10
 800a16c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a172:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800a174:	693b      	ldr	r3, [r7, #16]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a17e:	2208      	movs	r2, #8
 800a180:	409a      	lsls	r2, r3
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	4013      	ands	r3, r2
 800a186:	2b00      	cmp	r3, #0
 800a188:	d01a      	beq.n	800a1c0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	f003 0304 	and.w	r3, r3, #4
 800a194:	2b00      	cmp	r3, #0
 800a196:	d013      	beq.n	800a1c0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	681a      	ldr	r2, [r3, #0]
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	f022 0204 	bic.w	r2, r2, #4
 800a1a6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a1ac:	2208      	movs	r2, #8
 800a1ae:	409a      	lsls	r2, r3
 800a1b0:	693b      	ldr	r3, [r7, #16]
 800a1b2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a1b8:	f043 0201 	orr.w	r2, r3, #1
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a1c4:	2201      	movs	r2, #1
 800a1c6:	409a      	lsls	r2, r3
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	4013      	ands	r3, r2
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d012      	beq.n	800a1f6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	695b      	ldr	r3, [r3, #20]
 800a1d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d00b      	beq.n	800a1f6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a1e2:	2201      	movs	r2, #1
 800a1e4:	409a      	lsls	r2, r3
 800a1e6:	693b      	ldr	r3, [r7, #16]
 800a1e8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a1ee:	f043 0202 	orr.w	r2, r3, #2
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a1fa:	2204      	movs	r2, #4
 800a1fc:	409a      	lsls	r2, r3
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	4013      	ands	r3, r2
 800a202:	2b00      	cmp	r3, #0
 800a204:	d012      	beq.n	800a22c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	f003 0302 	and.w	r3, r3, #2
 800a210:	2b00      	cmp	r3, #0
 800a212:	d00b      	beq.n	800a22c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a218:	2204      	movs	r2, #4
 800a21a:	409a      	lsls	r2, r3
 800a21c:	693b      	ldr	r3, [r7, #16]
 800a21e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a224:	f043 0204 	orr.w	r2, r3, #4
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a230:	2210      	movs	r2, #16
 800a232:	409a      	lsls	r2, r3
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	4013      	ands	r3, r2
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d043      	beq.n	800a2c4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	f003 0308 	and.w	r3, r3, #8
 800a246:	2b00      	cmp	r3, #0
 800a248:	d03c      	beq.n	800a2c4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a24e:	2210      	movs	r2, #16
 800a250:	409a      	lsls	r2, r3
 800a252:	693b      	ldr	r3, [r7, #16]
 800a254:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a260:	2b00      	cmp	r3, #0
 800a262:	d018      	beq.n	800a296 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d108      	bne.n	800a284 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a276:	2b00      	cmp	r3, #0
 800a278:	d024      	beq.n	800a2c4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a27e:	6878      	ldr	r0, [r7, #4]
 800a280:	4798      	blx	r3
 800a282:	e01f      	b.n	800a2c4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d01b      	beq.n	800a2c4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a290:	6878      	ldr	r0, [r7, #4]
 800a292:	4798      	blx	r3
 800a294:	e016      	b.n	800a2c4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d107      	bne.n	800a2b4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	681a      	ldr	r2, [r3, #0]
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	f022 0208 	bic.w	r2, r2, #8
 800a2b2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d003      	beq.n	800a2c4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2c0:	6878      	ldr	r0, [r7, #4]
 800a2c2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a2c8:	2220      	movs	r2, #32
 800a2ca:	409a      	lsls	r2, r3
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	4013      	ands	r3, r2
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	f000 808e 	beq.w	800a3f2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	f003 0310 	and.w	r3, r3, #16
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	f000 8086 	beq.w	800a3f2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a2ea:	2220      	movs	r2, #32
 800a2ec:	409a      	lsls	r2, r3
 800a2ee:	693b      	ldr	r3, [r7, #16]
 800a2f0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a2f8:	b2db      	uxtb	r3, r3
 800a2fa:	2b05      	cmp	r3, #5
 800a2fc:	d136      	bne.n	800a36c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	681a      	ldr	r2, [r3, #0]
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	f022 0216 	bic.w	r2, r2, #22
 800a30c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	695a      	ldr	r2, [r3, #20]
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a31c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a322:	2b00      	cmp	r3, #0
 800a324:	d103      	bne.n	800a32e <HAL_DMA_IRQHandler+0x1da>
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d007      	beq.n	800a33e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	681a      	ldr	r2, [r3, #0]
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	f022 0208 	bic.w	r2, r2, #8
 800a33c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a342:	223f      	movs	r2, #63	; 0x3f
 800a344:	409a      	lsls	r2, r3
 800a346:	693b      	ldr	r3, [r7, #16]
 800a348:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	2200      	movs	r2, #0
 800a34e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	2201      	movs	r2, #1
 800a356:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d07d      	beq.n	800a45e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a366:	6878      	ldr	r0, [r7, #4]
 800a368:	4798      	blx	r3
        }
        return;
 800a36a:	e078      	b.n	800a45e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a376:	2b00      	cmp	r3, #0
 800a378:	d01c      	beq.n	800a3b4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a384:	2b00      	cmp	r3, #0
 800a386:	d108      	bne.n	800a39a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d030      	beq.n	800a3f2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a394:	6878      	ldr	r0, [r7, #4]
 800a396:	4798      	blx	r3
 800a398:	e02b      	b.n	800a3f2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d027      	beq.n	800a3f2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a3a6:	6878      	ldr	r0, [r7, #4]
 800a3a8:	4798      	blx	r3
 800a3aa:	e022      	b.n	800a3f2 <HAL_DMA_IRQHandler+0x29e>
 800a3ac:	20000008 	.word	0x20000008
 800a3b0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d10f      	bne.n	800a3e2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	681a      	ldr	r2, [r3, #0]
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	f022 0210 	bic.w	r2, r2, #16
 800a3d0:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	2200      	movs	r2, #0
 800a3d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	2201      	movs	r2, #1
 800a3de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d003      	beq.n	800a3f2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a3ee:	6878      	ldr	r0, [r7, #4]
 800a3f0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d032      	beq.n	800a460 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a3fe:	f003 0301 	and.w	r3, r3, #1
 800a402:	2b00      	cmp	r3, #0
 800a404:	d022      	beq.n	800a44c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	2205      	movs	r2, #5
 800a40a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	681a      	ldr	r2, [r3, #0]
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	f022 0201 	bic.w	r2, r2, #1
 800a41c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800a41e:	68bb      	ldr	r3, [r7, #8]
 800a420:	3301      	adds	r3, #1
 800a422:	60bb      	str	r3, [r7, #8]
 800a424:	697a      	ldr	r2, [r7, #20]
 800a426:	429a      	cmp	r2, r3
 800a428:	d307      	bcc.n	800a43a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	f003 0301 	and.w	r3, r3, #1
 800a434:	2b00      	cmp	r3, #0
 800a436:	d1f2      	bne.n	800a41e <HAL_DMA_IRQHandler+0x2ca>
 800a438:	e000      	b.n	800a43c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800a43a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	2200      	movs	r2, #0
 800a440:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	2201      	movs	r2, #1
 800a448:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a450:	2b00      	cmp	r3, #0
 800a452:	d005      	beq.n	800a460 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a458:	6878      	ldr	r0, [r7, #4]
 800a45a:	4798      	blx	r3
 800a45c:	e000      	b.n	800a460 <HAL_DMA_IRQHandler+0x30c>
        return;
 800a45e:	bf00      	nop
    }
  }
}
 800a460:	3718      	adds	r7, #24
 800a462:	46bd      	mov	sp, r7
 800a464:	bd80      	pop	{r7, pc}
 800a466:	bf00      	nop

0800a468 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a468:	b480      	push	{r7}
 800a46a:	b085      	sub	sp, #20
 800a46c:	af00      	add	r7, sp, #0
 800a46e:	60f8      	str	r0, [r7, #12]
 800a470:	60b9      	str	r1, [r7, #8]
 800a472:	607a      	str	r2, [r7, #4]
 800a474:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	681a      	ldr	r2, [r3, #0]
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800a484:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	683a      	ldr	r2, [r7, #0]
 800a48c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	689b      	ldr	r3, [r3, #8]
 800a492:	2b40      	cmp	r3, #64	; 0x40
 800a494:	d108      	bne.n	800a4a8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	687a      	ldr	r2, [r7, #4]
 800a49c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	68ba      	ldr	r2, [r7, #8]
 800a4a4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800a4a6:	e007      	b.n	800a4b8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	68ba      	ldr	r2, [r7, #8]
 800a4ae:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	687a      	ldr	r2, [r7, #4]
 800a4b6:	60da      	str	r2, [r3, #12]
}
 800a4b8:	bf00      	nop
 800a4ba:	3714      	adds	r7, #20
 800a4bc:	46bd      	mov	sp, r7
 800a4be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c2:	4770      	bx	lr

0800a4c4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800a4c4:	b480      	push	{r7}
 800a4c6:	b085      	sub	sp, #20
 800a4c8:	af00      	add	r7, sp, #0
 800a4ca:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	b2db      	uxtb	r3, r3
 800a4d2:	3b10      	subs	r3, #16
 800a4d4:	4a14      	ldr	r2, [pc, #80]	; (800a528 <DMA_CalcBaseAndBitshift+0x64>)
 800a4d6:	fba2 2303 	umull	r2, r3, r2, r3
 800a4da:	091b      	lsrs	r3, r3, #4
 800a4dc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800a4de:	4a13      	ldr	r2, [pc, #76]	; (800a52c <DMA_CalcBaseAndBitshift+0x68>)
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	4413      	add	r3, r2
 800a4e4:	781b      	ldrb	r3, [r3, #0]
 800a4e6:	461a      	mov	r2, r3
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	2b03      	cmp	r3, #3
 800a4f0:	d909      	bls.n	800a506 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800a4fa:	f023 0303 	bic.w	r3, r3, #3
 800a4fe:	1d1a      	adds	r2, r3, #4
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	659a      	str	r2, [r3, #88]	; 0x58
 800a504:	e007      	b.n	800a516 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800a50e:	f023 0303 	bic.w	r3, r3, #3
 800a512:	687a      	ldr	r2, [r7, #4]
 800a514:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800a51a:	4618      	mov	r0, r3
 800a51c:	3714      	adds	r7, #20
 800a51e:	46bd      	mov	sp, r7
 800a520:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a524:	4770      	bx	lr
 800a526:	bf00      	nop
 800a528:	aaaaaaab 	.word	0xaaaaaaab
 800a52c:	08023e58 	.word	0x08023e58

0800a530 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800a530:	b480      	push	{r7}
 800a532:	b085      	sub	sp, #20
 800a534:	af00      	add	r7, sp, #0
 800a536:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a538:	2300      	movs	r3, #0
 800a53a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a540:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	699b      	ldr	r3, [r3, #24]
 800a546:	2b00      	cmp	r3, #0
 800a548:	d11f      	bne.n	800a58a <DMA_CheckFifoParam+0x5a>
 800a54a:	68bb      	ldr	r3, [r7, #8]
 800a54c:	2b03      	cmp	r3, #3
 800a54e:	d856      	bhi.n	800a5fe <DMA_CheckFifoParam+0xce>
 800a550:	a201      	add	r2, pc, #4	; (adr r2, 800a558 <DMA_CheckFifoParam+0x28>)
 800a552:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a556:	bf00      	nop
 800a558:	0800a569 	.word	0x0800a569
 800a55c:	0800a57b 	.word	0x0800a57b
 800a560:	0800a569 	.word	0x0800a569
 800a564:	0800a5ff 	.word	0x0800a5ff
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a56c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a570:	2b00      	cmp	r3, #0
 800a572:	d046      	beq.n	800a602 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800a574:	2301      	movs	r3, #1
 800a576:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a578:	e043      	b.n	800a602 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a57e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800a582:	d140      	bne.n	800a606 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800a584:	2301      	movs	r3, #1
 800a586:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a588:	e03d      	b.n	800a606 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	699b      	ldr	r3, [r3, #24]
 800a58e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a592:	d121      	bne.n	800a5d8 <DMA_CheckFifoParam+0xa8>
 800a594:	68bb      	ldr	r3, [r7, #8]
 800a596:	2b03      	cmp	r3, #3
 800a598:	d837      	bhi.n	800a60a <DMA_CheckFifoParam+0xda>
 800a59a:	a201      	add	r2, pc, #4	; (adr r2, 800a5a0 <DMA_CheckFifoParam+0x70>)
 800a59c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5a0:	0800a5b1 	.word	0x0800a5b1
 800a5a4:	0800a5b7 	.word	0x0800a5b7
 800a5a8:	0800a5b1 	.word	0x0800a5b1
 800a5ac:	0800a5c9 	.word	0x0800a5c9
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800a5b0:	2301      	movs	r3, #1
 800a5b2:	73fb      	strb	r3, [r7, #15]
      break;
 800a5b4:	e030      	b.n	800a618 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5ba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d025      	beq.n	800a60e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800a5c2:	2301      	movs	r3, #1
 800a5c4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a5c6:	e022      	b.n	800a60e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5cc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800a5d0:	d11f      	bne.n	800a612 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800a5d2:	2301      	movs	r3, #1
 800a5d4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800a5d6:	e01c      	b.n	800a612 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800a5d8:	68bb      	ldr	r3, [r7, #8]
 800a5da:	2b02      	cmp	r3, #2
 800a5dc:	d903      	bls.n	800a5e6 <DMA_CheckFifoParam+0xb6>
 800a5de:	68bb      	ldr	r3, [r7, #8]
 800a5e0:	2b03      	cmp	r3, #3
 800a5e2:	d003      	beq.n	800a5ec <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800a5e4:	e018      	b.n	800a618 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800a5e6:	2301      	movs	r3, #1
 800a5e8:	73fb      	strb	r3, [r7, #15]
      break;
 800a5ea:	e015      	b.n	800a618 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d00e      	beq.n	800a616 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800a5f8:	2301      	movs	r3, #1
 800a5fa:	73fb      	strb	r3, [r7, #15]
      break;
 800a5fc:	e00b      	b.n	800a616 <DMA_CheckFifoParam+0xe6>
      break;
 800a5fe:	bf00      	nop
 800a600:	e00a      	b.n	800a618 <DMA_CheckFifoParam+0xe8>
      break;
 800a602:	bf00      	nop
 800a604:	e008      	b.n	800a618 <DMA_CheckFifoParam+0xe8>
      break;
 800a606:	bf00      	nop
 800a608:	e006      	b.n	800a618 <DMA_CheckFifoParam+0xe8>
      break;
 800a60a:	bf00      	nop
 800a60c:	e004      	b.n	800a618 <DMA_CheckFifoParam+0xe8>
      break;
 800a60e:	bf00      	nop
 800a610:	e002      	b.n	800a618 <DMA_CheckFifoParam+0xe8>
      break;   
 800a612:	bf00      	nop
 800a614:	e000      	b.n	800a618 <DMA_CheckFifoParam+0xe8>
      break;
 800a616:	bf00      	nop
    }
  } 
  
  return status; 
 800a618:	7bfb      	ldrb	r3, [r7, #15]
}
 800a61a:	4618      	mov	r0, r3
 800a61c:	3714      	adds	r7, #20
 800a61e:	46bd      	mov	sp, r7
 800a620:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a624:	4770      	bx	lr
 800a626:	bf00      	nop

0800a628 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800a628:	b580      	push	{r7, lr}
 800a62a:	b088      	sub	sp, #32
 800a62c:	af00      	add	r7, sp, #0
 800a62e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 800a630:	2300      	movs	r3, #0
 800a632:	61fb      	str	r3, [r7, #28]
 800a634:	2300      	movs	r3, #0
 800a636:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 800a638:	4baa      	ldr	r3, [pc, #680]	; (800a8e4 <HAL_ETH_Init+0x2bc>)
 800a63a:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 800a63c:	2300      	movs	r3, #0
 800a63e:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 800a640:	2300      	movs	r3, #0
 800a642:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	2b00      	cmp	r3, #0
 800a648:	d101      	bne.n	800a64e <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 800a64a:	2301      	movs	r3, #1
 800a64c:	e183      	b.n	800a956 <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a654:	b2db      	uxtb	r3, r3
 800a656:	2b00      	cmp	r3, #0
 800a658:	d106      	bne.n	800a668 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	2200      	movs	r2, #0
 800a65e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800a662:	6878      	ldr	r0, [r7, #4]
 800a664:	f004 f8b2 	bl	800e7cc <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a668:	2300      	movs	r3, #0
 800a66a:	60bb      	str	r3, [r7, #8]
 800a66c:	4b9e      	ldr	r3, [pc, #632]	; (800a8e8 <HAL_ETH_Init+0x2c0>)
 800a66e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a670:	4a9d      	ldr	r2, [pc, #628]	; (800a8e8 <HAL_ETH_Init+0x2c0>)
 800a672:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a676:	6453      	str	r3, [r2, #68]	; 0x44
 800a678:	4b9b      	ldr	r3, [pc, #620]	; (800a8e8 <HAL_ETH_Init+0x2c0>)
 800a67a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a67c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a680:	60bb      	str	r3, [r7, #8]
 800a682:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800a684:	4b99      	ldr	r3, [pc, #612]	; (800a8ec <HAL_ETH_Init+0x2c4>)
 800a686:	685b      	ldr	r3, [r3, #4]
 800a688:	4a98      	ldr	r2, [pc, #608]	; (800a8ec <HAL_ETH_Init+0x2c4>)
 800a68a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800a68e:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800a690:	4b96      	ldr	r3, [pc, #600]	; (800a8ec <HAL_ETH_Init+0x2c4>)
 800a692:	685a      	ldr	r2, [r3, #4]
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	6a1b      	ldr	r3, [r3, #32]
 800a698:	4994      	ldr	r1, [pc, #592]	; (800a8ec <HAL_ETH_Init+0x2c4>)
 800a69a:	4313      	orrs	r3, r2
 800a69c:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a6a6:	681a      	ldr	r2, [r3, #0]
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	f042 0201 	orr.w	r2, r2, #1
 800a6b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a6b4:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800a6b6:	f7fe ff29 	bl	800950c <HAL_GetTick>
 800a6ba:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 800a6bc:	e011      	b.n	800a6e2 <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 800a6be:	f7fe ff25 	bl	800950c <HAL_GetTick>
 800a6c2:	4602      	mov	r2, r0
 800a6c4:	697b      	ldr	r3, [r7, #20]
 800a6c6:	1ad3      	subs	r3, r2, r3
 800a6c8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800a6cc:	d909      	bls.n	800a6e2 <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	2203      	movs	r2, #3
 800a6d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	2200      	movs	r2, #0
 800a6da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 800a6de:	2303      	movs	r3, #3
 800a6e0:	e139      	b.n	800a956 <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	f003 0301 	and.w	r3, r3, #1
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d1e4      	bne.n	800a6be <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	691b      	ldr	r3, [r3, #16]
 800a6fa:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 800a6fc:	69fb      	ldr	r3, [r7, #28]
 800a6fe:	f023 031c 	bic.w	r3, r3, #28
 800a702:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800a704:	f001 fe50 	bl	800c3a8 <HAL_RCC_GetHCLKFreq>
 800a708:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 800a70a:	69bb      	ldr	r3, [r7, #24]
 800a70c:	4a78      	ldr	r2, [pc, #480]	; (800a8f0 <HAL_ETH_Init+0x2c8>)
 800a70e:	4293      	cmp	r3, r2
 800a710:	d908      	bls.n	800a724 <HAL_ETH_Init+0xfc>
 800a712:	69bb      	ldr	r3, [r7, #24]
 800a714:	4a77      	ldr	r2, [pc, #476]	; (800a8f4 <HAL_ETH_Init+0x2cc>)
 800a716:	4293      	cmp	r3, r2
 800a718:	d804      	bhi.n	800a724 <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800a71a:	69fb      	ldr	r3, [r7, #28]
 800a71c:	f043 0308 	orr.w	r3, r3, #8
 800a720:	61fb      	str	r3, [r7, #28]
 800a722:	e027      	b.n	800a774 <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 800a724:	69bb      	ldr	r3, [r7, #24]
 800a726:	4a73      	ldr	r2, [pc, #460]	; (800a8f4 <HAL_ETH_Init+0x2cc>)
 800a728:	4293      	cmp	r3, r2
 800a72a:	d908      	bls.n	800a73e <HAL_ETH_Init+0x116>
 800a72c:	69bb      	ldr	r3, [r7, #24]
 800a72e:	4a6d      	ldr	r2, [pc, #436]	; (800a8e4 <HAL_ETH_Init+0x2bc>)
 800a730:	4293      	cmp	r3, r2
 800a732:	d204      	bcs.n	800a73e <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 800a734:	69fb      	ldr	r3, [r7, #28]
 800a736:	f043 030c 	orr.w	r3, r3, #12
 800a73a:	61fb      	str	r3, [r7, #28]
 800a73c:	e01a      	b.n	800a774 <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 800a73e:	69bb      	ldr	r3, [r7, #24]
 800a740:	4a68      	ldr	r2, [pc, #416]	; (800a8e4 <HAL_ETH_Init+0x2bc>)
 800a742:	4293      	cmp	r3, r2
 800a744:	d303      	bcc.n	800a74e <HAL_ETH_Init+0x126>
 800a746:	69bb      	ldr	r3, [r7, #24]
 800a748:	4a6b      	ldr	r2, [pc, #428]	; (800a8f8 <HAL_ETH_Init+0x2d0>)
 800a74a:	4293      	cmp	r3, r2
 800a74c:	d911      	bls.n	800a772 <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 800a74e:	69bb      	ldr	r3, [r7, #24]
 800a750:	4a69      	ldr	r2, [pc, #420]	; (800a8f8 <HAL_ETH_Init+0x2d0>)
 800a752:	4293      	cmp	r3, r2
 800a754:	d908      	bls.n	800a768 <HAL_ETH_Init+0x140>
 800a756:	69bb      	ldr	r3, [r7, #24]
 800a758:	4a68      	ldr	r2, [pc, #416]	; (800a8fc <HAL_ETH_Init+0x2d4>)
 800a75a:	4293      	cmp	r3, r2
 800a75c:	d804      	bhi.n	800a768 <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 800a75e:	69fb      	ldr	r3, [r7, #28]
 800a760:	f043 0304 	orr.w	r3, r3, #4
 800a764:	61fb      	str	r3, [r7, #28]
 800a766:	e005      	b.n	800a774 <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 800a768:	69fb      	ldr	r3, [r7, #28]
 800a76a:	f043 0310 	orr.w	r3, r3, #16
 800a76e:	61fb      	str	r3, [r7, #28]
 800a770:	e000      	b.n	800a774 <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 800a772:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	69fa      	ldr	r2, [r7, #28]
 800a77a:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 800a77c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800a780:	2100      	movs	r1, #0
 800a782:	6878      	ldr	r0, [r7, #4]
 800a784:	f000 fb14 	bl	800adb0 <HAL_ETH_WritePHYRegister>
 800a788:	4603      	mov	r3, r0
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d00b      	beq.n	800a7a6 <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 800a78e:	2301      	movs	r3, #1
 800a790:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 800a792:	6939      	ldr	r1, [r7, #16]
 800a794:	6878      	ldr	r0, [r7, #4]
 800a796:	f000 fcc9 	bl	800b12c <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	2201      	movs	r2, #1
 800a79e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 800a7a2:	2301      	movs	r3, #1
 800a7a4:	e0d7      	b.n	800a956 <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 800a7a6:	20ff      	movs	r0, #255	; 0xff
 800a7a8:	f7fe febc 	bl	8009524 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	685b      	ldr	r3, [r3, #4]
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	f000 80a5 	beq.w	800a900 <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800a7b6:	f7fe fea9 	bl	800950c <HAL_GetTick>
 800a7ba:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800a7bc:	f107 030c 	add.w	r3, r7, #12
 800a7c0:	461a      	mov	r2, r3
 800a7c2:	2101      	movs	r1, #1
 800a7c4:	6878      	ldr	r0, [r7, #4]
 800a7c6:	f000 fa8b 	bl	800ace0 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 800a7ca:	f7fe fe9f 	bl	800950c <HAL_GetTick>
 800a7ce:	4602      	mov	r2, r0
 800a7d0:	697b      	ldr	r3, [r7, #20]
 800a7d2:	1ad3      	subs	r3, r2, r3
 800a7d4:	f241 3288 	movw	r2, #5000	; 0x1388
 800a7d8:	4293      	cmp	r3, r2
 800a7da:	d90f      	bls.n	800a7fc <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 800a7dc:	2301      	movs	r3, #1
 800a7de:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 800a7e0:	6939      	ldr	r1, [r7, #16]
 800a7e2:	6878      	ldr	r0, [r7, #4]
 800a7e4:	f000 fca2 	bl	800b12c <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	2201      	movs	r2, #1
 800a7ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	2200      	movs	r2, #0
 800a7f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 800a7f8:	2303      	movs	r3, #3
 800a7fa:	e0ac      	b.n	800a956 <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	f003 0304 	and.w	r3, r3, #4
 800a802:	2b00      	cmp	r3, #0
 800a804:	d0da      	beq.n	800a7bc <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 800a806:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a80a:	2100      	movs	r1, #0
 800a80c:	6878      	ldr	r0, [r7, #4]
 800a80e:	f000 facf 	bl	800adb0 <HAL_ETH_WritePHYRegister>
 800a812:	4603      	mov	r3, r0
 800a814:	2b00      	cmp	r3, #0
 800a816:	d00b      	beq.n	800a830 <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 800a818:	2301      	movs	r3, #1
 800a81a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800a81c:	6939      	ldr	r1, [r7, #16]
 800a81e:	6878      	ldr	r0, [r7, #4]
 800a820:	f000 fc84 	bl	800b12c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	2201      	movs	r2, #1
 800a828:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 800a82c:	2301      	movs	r3, #1
 800a82e:	e092      	b.n	800a956 <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 800a830:	f7fe fe6c 	bl	800950c <HAL_GetTick>
 800a834:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800a836:	f107 030c 	add.w	r3, r7, #12
 800a83a:	461a      	mov	r2, r3
 800a83c:	2101      	movs	r1, #1
 800a83e:	6878      	ldr	r0, [r7, #4]
 800a840:	f000 fa4e 	bl	800ace0 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 800a844:	f7fe fe62 	bl	800950c <HAL_GetTick>
 800a848:	4602      	mov	r2, r0
 800a84a:	697b      	ldr	r3, [r7, #20]
 800a84c:	1ad3      	subs	r3, r2, r3
 800a84e:	f241 3288 	movw	r2, #5000	; 0x1388
 800a852:	4293      	cmp	r3, r2
 800a854:	d90f      	bls.n	800a876 <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 800a856:	2301      	movs	r3, #1
 800a858:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 800a85a:	6939      	ldr	r1, [r7, #16]
 800a85c:	6878      	ldr	r0, [r7, #4]
 800a85e:	f000 fc65 	bl	800b12c <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	2201      	movs	r2, #1
 800a866:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	2200      	movs	r2, #0
 800a86e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 800a872:	2303      	movs	r3, #3
 800a874:	e06f      	b.n	800a956 <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	f003 0320 	and.w	r3, r3, #32
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d0da      	beq.n	800a836 <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 800a880:	f107 030c 	add.w	r3, r7, #12
 800a884:	461a      	mov	r2, r3
 800a886:	211f      	movs	r1, #31
 800a888:	6878      	ldr	r0, [r7, #4]
 800a88a:	f000 fa29 	bl	800ace0 <HAL_ETH_ReadPHYRegister>
 800a88e:	4603      	mov	r3, r0
 800a890:	2b00      	cmp	r3, #0
 800a892:	d00b      	beq.n	800a8ac <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 800a894:	2301      	movs	r3, #1
 800a896:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800a898:	6939      	ldr	r1, [r7, #16]
 800a89a:	6878      	ldr	r0, [r7, #4]
 800a89c:	f000 fc46 	bl	800b12c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	2201      	movs	r2, #1
 800a8a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 800a8a8:	2301      	movs	r3, #1
 800a8aa:	e054      	b.n	800a956 <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	f003 0310 	and.w	r3, r3, #16
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d004      	beq.n	800a8c0 <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a8bc:	60da      	str	r2, [r3, #12]
 800a8be:	e002      	b.n	800a8c6 <HAL_ETH_Init+0x29e>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	2200      	movs	r2, #0
 800a8c4:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	f003 0304 	and.w	r3, r3, #4
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d003      	beq.n	800a8d8 <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	2200      	movs	r2, #0
 800a8d4:	609a      	str	r2, [r3, #8]
 800a8d6:	e035      	b.n	800a944 <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800a8de:	609a      	str	r2, [r3, #8]
 800a8e0:	e030      	b.n	800a944 <HAL_ETH_Init+0x31c>
 800a8e2:	bf00      	nop
 800a8e4:	03938700 	.word	0x03938700
 800a8e8:	40023800 	.word	0x40023800
 800a8ec:	40013800 	.word	0x40013800
 800a8f0:	01312cff 	.word	0x01312cff
 800a8f4:	02160ebf 	.word	0x02160ebf
 800a8f8:	05f5e0ff 	.word	0x05f5e0ff
 800a8fc:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	68db      	ldr	r3, [r3, #12]
 800a904:	08db      	lsrs	r3, r3, #3
 800a906:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	689b      	ldr	r3, [r3, #8]
 800a90c:	085b      	lsrs	r3, r3, #1
 800a90e:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 800a910:	4313      	orrs	r3, r2
 800a912:	b29b      	uxth	r3, r3
 800a914:	461a      	mov	r2, r3
 800a916:	2100      	movs	r1, #0
 800a918:	6878      	ldr	r0, [r7, #4]
 800a91a:	f000 fa49 	bl	800adb0 <HAL_ETH_WritePHYRegister>
 800a91e:	4603      	mov	r3, r0
 800a920:	2b00      	cmp	r3, #0
 800a922:	d00b      	beq.n	800a93c <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 800a924:	2301      	movs	r3, #1
 800a926:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800a928:	6939      	ldr	r1, [r7, #16]
 800a92a:	6878      	ldr	r0, [r7, #4]
 800a92c:	f000 fbfe 	bl	800b12c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	2201      	movs	r2, #1
 800a934:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 800a938:	2301      	movs	r3, #1
 800a93a:	e00c      	b.n	800a956 <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 800a93c:	f640 70ff 	movw	r0, #4095	; 0xfff
 800a940:	f7fe fdf0 	bl	8009524 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 800a944:	6939      	ldr	r1, [r7, #16]
 800a946:	6878      	ldr	r0, [r7, #4]
 800a948:	f000 fbf0 	bl	800b12c <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	2201      	movs	r2, #1
 800a950:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 800a954:	2300      	movs	r3, #0
}
 800a956:	4618      	mov	r0, r3
 800a958:	3720      	adds	r7, #32
 800a95a:	46bd      	mov	sp, r7
 800a95c:	bd80      	pop	{r7, pc}
 800a95e:	bf00      	nop

0800a960 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 800a960:	b480      	push	{r7}
 800a962:	b087      	sub	sp, #28
 800a964:	af00      	add	r7, sp, #0
 800a966:	60f8      	str	r0, [r7, #12]
 800a968:	60b9      	str	r1, [r7, #8]
 800a96a:	607a      	str	r2, [r7, #4]
 800a96c:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 800a96e:	2300      	movs	r3, #0
 800a970:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a978:	2b01      	cmp	r3, #1
 800a97a:	d101      	bne.n	800a980 <HAL_ETH_DMATxDescListInit+0x20>
 800a97c:	2302      	movs	r3, #2
 800a97e:	e052      	b.n	800aa26 <HAL_ETH_DMATxDescListInit+0xc6>
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	2201      	movs	r2, #1
 800a984:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	2202      	movs	r2, #2
 800a98c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	68ba      	ldr	r2, [r7, #8]
 800a994:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0U; i < TxBuffCount; i++)
 800a996:	2300      	movs	r3, #0
 800a998:	617b      	str	r3, [r7, #20]
 800a99a:	e030      	b.n	800a9fe <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 800a99c:	697b      	ldr	r3, [r7, #20]
 800a99e:	015b      	lsls	r3, r3, #5
 800a9a0:	68ba      	ldr	r2, [r7, #8]
 800a9a2:	4413      	add	r3, r2
 800a9a4:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 800a9a6:	693b      	ldr	r3, [r7, #16]
 800a9a8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800a9ac:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 800a9ae:	697b      	ldr	r3, [r7, #20]
 800a9b0:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800a9b4:	fb02 f303 	mul.w	r3, r2, r3
 800a9b8:	687a      	ldr	r2, [r7, #4]
 800a9ba:	4413      	add	r3, r2
 800a9bc:	461a      	mov	r2, r3
 800a9be:	693b      	ldr	r3, [r7, #16]
 800a9c0:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	69db      	ldr	r3, [r3, #28]
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d105      	bne.n	800a9d6 <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 800a9ca:	693b      	ldr	r3, [r7, #16]
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800a9d2:	693b      	ldr	r3, [r7, #16]
 800a9d4:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1U))
 800a9d6:	683b      	ldr	r3, [r7, #0]
 800a9d8:	3b01      	subs	r3, #1
 800a9da:	697a      	ldr	r2, [r7, #20]
 800a9dc:	429a      	cmp	r2, r3
 800a9de:	d208      	bcs.n	800a9f2 <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 800a9e0:	697b      	ldr	r3, [r7, #20]
 800a9e2:	3301      	adds	r3, #1
 800a9e4:	015b      	lsls	r3, r3, #5
 800a9e6:	68ba      	ldr	r2, [r7, #8]
 800a9e8:	4413      	add	r3, r2
 800a9ea:	461a      	mov	r2, r3
 800a9ec:	693b      	ldr	r3, [r7, #16]
 800a9ee:	60da      	str	r2, [r3, #12]
 800a9f0:	e002      	b.n	800a9f8 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 800a9f2:	68ba      	ldr	r2, [r7, #8]
 800a9f4:	693b      	ldr	r3, [r7, #16]
 800a9f6:	60da      	str	r2, [r3, #12]
  for(i=0U; i < TxBuffCount; i++)
 800a9f8:	697b      	ldr	r3, [r7, #20]
 800a9fa:	3301      	adds	r3, #1
 800a9fc:	617b      	str	r3, [r7, #20]
 800a9fe:	697a      	ldr	r2, [r7, #20]
 800aa00:	683b      	ldr	r3, [r7, #0]
 800aa02:	429a      	cmp	r2, r3
 800aa04:	d3ca      	bcc.n	800a99c <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	68ba      	ldr	r2, [r7, #8]
 800aa0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aa10:	3310      	adds	r3, #16
 800aa12:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	2201      	movs	r2, #1
 800aa18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	2200      	movs	r2, #0
 800aa20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800aa24:	2300      	movs	r3, #0
}
 800aa26:	4618      	mov	r0, r3
 800aa28:	371c      	adds	r7, #28
 800aa2a:	46bd      	mov	sp, r7
 800aa2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa30:	4770      	bx	lr

0800aa32 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 800aa32:	b480      	push	{r7}
 800aa34:	b087      	sub	sp, #28
 800aa36:	af00      	add	r7, sp, #0
 800aa38:	60f8      	str	r0, [r7, #12]
 800aa3a:	60b9      	str	r1, [r7, #8]
 800aa3c:	607a      	str	r2, [r7, #4]
 800aa3e:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 800aa40:	2300      	movs	r3, #0
 800aa42:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800aa4a:	2b01      	cmp	r3, #1
 800aa4c:	d101      	bne.n	800aa52 <HAL_ETH_DMARxDescListInit+0x20>
 800aa4e:	2302      	movs	r3, #2
 800aa50:	e056      	b.n	800ab00 <HAL_ETH_DMARxDescListInit+0xce>
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	2201      	movs	r2, #1
 800aa56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	2202      	movs	r2, #2
 800aa5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	68ba      	ldr	r2, [r7, #8]
 800aa66:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0U; i < RxBuffCount; i++)
 800aa68:	2300      	movs	r3, #0
 800aa6a:	617b      	str	r3, [r7, #20]
 800aa6c:	e034      	b.n	800aad8 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 800aa6e:	697b      	ldr	r3, [r7, #20]
 800aa70:	015b      	lsls	r3, r3, #5
 800aa72:	68ba      	ldr	r2, [r7, #8]
 800aa74:	4413      	add	r3, r2
 800aa76:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 800aa78:	693b      	ldr	r3, [r7, #16]
 800aa7a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800aa7e:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 800aa80:	693b      	ldr	r3, [r7, #16]
 800aa82:	f244 52f4 	movw	r2, #17908	; 0x45f4
 800aa86:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 800aa88:	697b      	ldr	r3, [r7, #20]
 800aa8a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800aa8e:	fb02 f303 	mul.w	r3, r2, r3
 800aa92:	687a      	ldr	r2, [r7, #4]
 800aa94:	4413      	add	r3, r2
 800aa96:	461a      	mov	r2, r3
 800aa98:	693b      	ldr	r3, [r7, #16]
 800aa9a:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	699b      	ldr	r3, [r3, #24]
 800aaa0:	2b01      	cmp	r3, #1
 800aaa2:	d105      	bne.n	800aab0 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 800aaa4:	693b      	ldr	r3, [r7, #16]
 800aaa6:	685b      	ldr	r3, [r3, #4]
 800aaa8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800aaac:	693b      	ldr	r3, [r7, #16]
 800aaae:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1U))
 800aab0:	683b      	ldr	r3, [r7, #0]
 800aab2:	3b01      	subs	r3, #1
 800aab4:	697a      	ldr	r2, [r7, #20]
 800aab6:	429a      	cmp	r2, r3
 800aab8:	d208      	bcs.n	800aacc <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 800aaba:	697b      	ldr	r3, [r7, #20]
 800aabc:	3301      	adds	r3, #1
 800aabe:	015b      	lsls	r3, r3, #5
 800aac0:	68ba      	ldr	r2, [r7, #8]
 800aac2:	4413      	add	r3, r2
 800aac4:	461a      	mov	r2, r3
 800aac6:	693b      	ldr	r3, [r7, #16]
 800aac8:	60da      	str	r2, [r3, #12]
 800aaca:	e002      	b.n	800aad2 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 800aacc:	68ba      	ldr	r2, [r7, #8]
 800aace:	693b      	ldr	r3, [r7, #16]
 800aad0:	60da      	str	r2, [r3, #12]
  for(i=0U; i < RxBuffCount; i++)
 800aad2:	697b      	ldr	r3, [r7, #20]
 800aad4:	3301      	adds	r3, #1
 800aad6:	617b      	str	r3, [r7, #20]
 800aad8:	697a      	ldr	r2, [r7, #20]
 800aada:	683b      	ldr	r3, [r7, #0]
 800aadc:	429a      	cmp	r2, r3
 800aade:	d3c6      	bcc.n	800aa6e <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	68ba      	ldr	r2, [r7, #8]
 800aae6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aaea:	330c      	adds	r3, #12
 800aaec:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	2201      	movs	r2, #1
 800aaf2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	2200      	movs	r2, #0
 800aafa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800aafe:	2300      	movs	r3, #0
}
 800ab00:	4618      	mov	r0, r3
 800ab02:	371c      	adds	r7, #28
 800ab04:	46bd      	mov	sp, r7
 800ab06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab0a:	4770      	bx	lr

0800ab0c <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 800ab0c:	b480      	push	{r7}
 800ab0e:	b087      	sub	sp, #28
 800ab10:	af00      	add	r7, sp, #0
 800ab12:	6078      	str	r0, [r7, #4]
 800ab14:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 800ab16:	2300      	movs	r3, #0
 800ab18:	617b      	str	r3, [r7, #20]
 800ab1a:	2300      	movs	r3, #0
 800ab1c:	60fb      	str	r3, [r7, #12]
 800ab1e:	2300      	movs	r3, #0
 800ab20:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ab28:	2b01      	cmp	r3, #1
 800ab2a:	d101      	bne.n	800ab30 <HAL_ETH_TransmitFrame+0x24>
 800ab2c:	2302      	movs	r3, #2
 800ab2e:	e0cd      	b.n	800accc <HAL_ETH_TransmitFrame+0x1c0>
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	2201      	movs	r2, #1
 800ab34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	2202      	movs	r2, #2
 800ab3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0U) 
 800ab40:	683b      	ldr	r3, [r7, #0]
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d109      	bne.n	800ab5a <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	2201      	movs	r2, #1
 800ab4a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	2200      	movs	r2, #0
 800ab52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 800ab56:	2301      	movs	r3, #1
 800ab58:	e0b8      	b.n	800accc <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	da09      	bge.n	800ab78 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	2212      	movs	r2, #18
 800ab68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	2200      	movs	r2, #0
 800ab70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 800ab74:	2301      	movs	r3, #1
 800ab76:	e0a9      	b.n	800accc <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 800ab78:	683b      	ldr	r3, [r7, #0]
 800ab7a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800ab7e:	4293      	cmp	r3, r2
 800ab80:	d915      	bls.n	800abae <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 800ab82:	683b      	ldr	r3, [r7, #0]
 800ab84:	4a54      	ldr	r2, [pc, #336]	; (800acd8 <HAL_ETH_TransmitFrame+0x1cc>)
 800ab86:	fba2 2303 	umull	r2, r3, r2, r3
 800ab8a:	0a9b      	lsrs	r3, r3, #10
 800ab8c:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 800ab8e:	683a      	ldr	r2, [r7, #0]
 800ab90:	4b51      	ldr	r3, [pc, #324]	; (800acd8 <HAL_ETH_TransmitFrame+0x1cc>)
 800ab92:	fba3 1302 	umull	r1, r3, r3, r2
 800ab96:	0a9b      	lsrs	r3, r3, #10
 800ab98:	f240 51f4 	movw	r1, #1524	; 0x5f4
 800ab9c:	fb01 f303 	mul.w	r3, r1, r3
 800aba0:	1ad3      	subs	r3, r2, r3
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d005      	beq.n	800abb2 <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 800aba6:	697b      	ldr	r3, [r7, #20]
 800aba8:	3301      	adds	r3, #1
 800abaa:	617b      	str	r3, [r7, #20]
 800abac:	e001      	b.n	800abb2 <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1U;
 800abae:	2301      	movs	r3, #1
 800abb0:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 800abb2:	697b      	ldr	r3, [r7, #20]
 800abb4:	2b01      	cmp	r3, #1
 800abb6:	d11c      	bne.n	800abf2 <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abbc:	681a      	ldr	r2, [r3, #0]
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abc2:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 800abc6:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abcc:	683a      	ldr	r2, [r7, #0]
 800abce:	f3c2 020c 	ubfx	r2, r2, #0, #13
 800abd2:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abd8:	681a      	ldr	r2, [r3, #0]
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abde:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800abe2:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abe8:	68db      	ldr	r3, [r3, #12]
 800abea:	461a      	mov	r2, r3
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	62da      	str	r2, [r3, #44]	; 0x2c
 800abf0:	e04b      	b.n	800ac8a <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0U; i< bufcount; i++)
 800abf2:	2300      	movs	r3, #0
 800abf4:	613b      	str	r3, [r7, #16]
 800abf6:	e044      	b.n	800ac82 <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abfc:	681a      	ldr	r2, [r3, #0]
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac02:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800ac06:	601a      	str	r2, [r3, #0]
      
      if (i == 0U) 
 800ac08:	693b      	ldr	r3, [r7, #16]
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d107      	bne.n	800ac1e <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac12:	681a      	ldr	r2, [r3, #0]
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac18:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800ac1c:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac22:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800ac26:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 800ac28:	697b      	ldr	r3, [r7, #20]
 800ac2a:	3b01      	subs	r3, #1
 800ac2c:	693a      	ldr	r2, [r7, #16]
 800ac2e:	429a      	cmp	r2, r3
 800ac30:	d116      	bne.n	800ac60 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac36:	681a      	ldr	r2, [r3, #0]
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac3c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800ac40:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 800ac42:	697b      	ldr	r3, [r7, #20]
 800ac44:	4a25      	ldr	r2, [pc, #148]	; (800acdc <HAL_ETH_TransmitFrame+0x1d0>)
 800ac46:	fb02 f203 	mul.w	r2, r2, r3
 800ac4a:	683b      	ldr	r3, [r7, #0]
 800ac4c:	4413      	add	r3, r2
 800ac4e:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800ac52:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac58:	68fa      	ldr	r2, [r7, #12]
 800ac5a:	f3c2 020c 	ubfx	r2, r2, #0, #13
 800ac5e:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac64:	681a      	ldr	r2, [r3, #0]
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac6a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800ac6e:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac74:	68db      	ldr	r3, [r3, #12]
 800ac76:	461a      	mov	r2, r3
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 800ac7c:	693b      	ldr	r3, [r7, #16]
 800ac7e:	3301      	adds	r3, #1
 800ac80:	613b      	str	r3, [r7, #16]
 800ac82:	693a      	ldr	r2, [r7, #16]
 800ac84:	697b      	ldr	r3, [r7, #20]
 800ac86:	429a      	cmp	r2, r3
 800ac88:	d3b6      	bcc.n	800abf8 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ac92:	3314      	adds	r3, #20
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	f003 0304 	and.w	r3, r3, #4
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d00d      	beq.n	800acba <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aca6:	3314      	adds	r3, #20
 800aca8:	2204      	movs	r2, #4
 800acaa:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800acb4:	3304      	adds	r3, #4
 800acb6:	2200      	movs	r2, #0
 800acb8:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	2201      	movs	r2, #1
 800acbe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	2200      	movs	r2, #0
 800acc6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800acca:	2300      	movs	r3, #0
}
 800accc:	4618      	mov	r0, r3
 800acce:	371c      	adds	r7, #28
 800acd0:	46bd      	mov	sp, r7
 800acd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd6:	4770      	bx	lr
 800acd8:	ac02b00b 	.word	0xac02b00b
 800acdc:	fffffa0c 	.word	0xfffffa0c

0800ace0 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 800ace0:	b580      	push	{r7, lr}
 800ace2:	b086      	sub	sp, #24
 800ace4:	af00      	add	r7, sp, #0
 800ace6:	60f8      	str	r0, [r7, #12]
 800ace8:	460b      	mov	r3, r1
 800acea:	607a      	str	r2, [r7, #4]
 800acec:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 800acee:	2300      	movs	r3, #0
 800acf0:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 800acf2:	2300      	movs	r3, #0
 800acf4:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800acfc:	b2db      	uxtb	r3, r3
 800acfe:	2b82      	cmp	r3, #130	; 0x82
 800ad00:	d101      	bne.n	800ad06 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 800ad02:	2302      	movs	r3, #2
 800ad04:	e050      	b.n	800ada8 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	2282      	movs	r2, #130	; 0x82
 800ad0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	691b      	ldr	r3, [r3, #16]
 800ad14:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 800ad16:	697b      	ldr	r3, [r7, #20]
 800ad18:	f003 031c 	and.w	r3, r3, #28
 800ad1c:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	8a1b      	ldrh	r3, [r3, #16]
 800ad22:	02db      	lsls	r3, r3, #11
 800ad24:	b29b      	uxth	r3, r3
 800ad26:	697a      	ldr	r2, [r7, #20]
 800ad28:	4313      	orrs	r3, r2
 800ad2a:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 800ad2c:	897b      	ldrh	r3, [r7, #10]
 800ad2e:	019b      	lsls	r3, r3, #6
 800ad30:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 800ad34:	697a      	ldr	r2, [r7, #20]
 800ad36:	4313      	orrs	r3, r2
 800ad38:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 800ad3a:	697b      	ldr	r3, [r7, #20]
 800ad3c:	f023 0302 	bic.w	r3, r3, #2
 800ad40:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 800ad42:	697b      	ldr	r3, [r7, #20]
 800ad44:	f043 0301 	orr.w	r3, r3, #1
 800ad48:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	697a      	ldr	r2, [r7, #20]
 800ad50:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800ad52:	f7fe fbdb 	bl	800950c <HAL_GetTick>
 800ad56:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800ad58:	e015      	b.n	800ad86 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 800ad5a:	f7fe fbd7 	bl	800950c <HAL_GetTick>
 800ad5e:	4602      	mov	r2, r0
 800ad60:	693b      	ldr	r3, [r7, #16]
 800ad62:	1ad3      	subs	r3, r2, r3
 800ad64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ad68:	d309      	bcc.n	800ad7e <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	2201      	movs	r2, #1
 800ad6e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	2200      	movs	r2, #0
 800ad76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 800ad7a:	2303      	movs	r3, #3
 800ad7c:	e014      	b.n	800ada8 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	691b      	ldr	r3, [r3, #16]
 800ad84:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800ad86:	697b      	ldr	r3, [r7, #20]
 800ad88:	f003 0301 	and.w	r3, r3, #1
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d1e4      	bne.n	800ad5a <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	695b      	ldr	r3, [r3, #20]
 800ad96:	b29b      	uxth	r3, r3
 800ad98:	461a      	mov	r2, r3
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	2201      	movs	r2, #1
 800ada2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 800ada6:	2300      	movs	r3, #0
}
 800ada8:	4618      	mov	r0, r3
 800adaa:	3718      	adds	r7, #24
 800adac:	46bd      	mov	sp, r7
 800adae:	bd80      	pop	{r7, pc}

0800adb0 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 800adb0:	b580      	push	{r7, lr}
 800adb2:	b086      	sub	sp, #24
 800adb4:	af00      	add	r7, sp, #0
 800adb6:	60f8      	str	r0, [r7, #12]
 800adb8:	460b      	mov	r3, r1
 800adba:	607a      	str	r2, [r7, #4]
 800adbc:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 800adbe:	2300      	movs	r3, #0
 800adc0:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 800adc2:	2300      	movs	r3, #0
 800adc4:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800adcc:	b2db      	uxtb	r3, r3
 800adce:	2b42      	cmp	r3, #66	; 0x42
 800add0:	d101      	bne.n	800add6 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 800add2:	2302      	movs	r3, #2
 800add4:	e04e      	b.n	800ae74 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	2242      	movs	r2, #66	; 0x42
 800adda:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	691b      	ldr	r3, [r3, #16]
 800ade4:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 800ade6:	697b      	ldr	r3, [r7, #20]
 800ade8:	f003 031c 	and.w	r3, r3, #28
 800adec:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	8a1b      	ldrh	r3, [r3, #16]
 800adf2:	02db      	lsls	r3, r3, #11
 800adf4:	b29b      	uxth	r3, r3
 800adf6:	697a      	ldr	r2, [r7, #20]
 800adf8:	4313      	orrs	r3, r2
 800adfa:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 800adfc:	897b      	ldrh	r3, [r7, #10]
 800adfe:	019b      	lsls	r3, r3, #6
 800ae00:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 800ae04:	697a      	ldr	r2, [r7, #20]
 800ae06:	4313      	orrs	r3, r2
 800ae08:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 800ae0a:	697b      	ldr	r3, [r7, #20]
 800ae0c:	f043 0302 	orr.w	r3, r3, #2
 800ae10:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 800ae12:	697b      	ldr	r3, [r7, #20]
 800ae14:	f043 0301 	orr.w	r3, r3, #1
 800ae18:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	b29a      	uxth	r2, r3
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	697a      	ldr	r2, [r7, #20]
 800ae2a:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800ae2c:	f7fe fb6e 	bl	800950c <HAL_GetTick>
 800ae30:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800ae32:	e015      	b.n	800ae60 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 800ae34:	f7fe fb6a 	bl	800950c <HAL_GetTick>
 800ae38:	4602      	mov	r2, r0
 800ae3a:	693b      	ldr	r3, [r7, #16]
 800ae3c:	1ad3      	subs	r3, r2, r3
 800ae3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ae42:	d309      	bcc.n	800ae58 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	2201      	movs	r2, #1
 800ae48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	2200      	movs	r2, #0
 800ae50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 800ae54:	2303      	movs	r3, #3
 800ae56:	e00d      	b.n	800ae74 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	691b      	ldr	r3, [r3, #16]
 800ae5e:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800ae60:	697b      	ldr	r3, [r7, #20]
 800ae62:	f003 0301 	and.w	r3, r3, #1
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d1e4      	bne.n	800ae34 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	2201      	movs	r2, #1
 800ae6e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 800ae72:	2300      	movs	r3, #0
}
 800ae74:	4618      	mov	r0, r3
 800ae76:	3718      	adds	r7, #24
 800ae78:	46bd      	mov	sp, r7
 800ae7a:	bd80      	pop	{r7, pc}

0800ae7c <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 800ae7c:	b580      	push	{r7, lr}
 800ae7e:	b082      	sub	sp, #8
 800ae80:	af00      	add	r7, sp, #0
 800ae82:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ae8a:	2b01      	cmp	r3, #1
 800ae8c:	d101      	bne.n	800ae92 <HAL_ETH_Start+0x16>
 800ae8e:	2302      	movs	r3, #2
 800ae90:	e01f      	b.n	800aed2 <HAL_ETH_Start+0x56>
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	2201      	movs	r2, #1
 800ae96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	2202      	movs	r2, #2
 800ae9e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 800aea2:	6878      	ldr	r0, [r7, #4]
 800aea4:	f000 fb44 	bl	800b530 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 800aea8:	6878      	ldr	r0, [r7, #4]
 800aeaa:	f000 fb7b 	bl	800b5a4 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 800aeae:	6878      	ldr	r0, [r7, #4]
 800aeb0:	f000 fc12 	bl	800b6d8 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 800aeb4:	6878      	ldr	r0, [r7, #4]
 800aeb6:	f000 fbaf 	bl	800b618 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 800aeba:	6878      	ldr	r0, [r7, #4]
 800aebc:	f000 fbdc 	bl	800b678 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	2201      	movs	r2, #1
 800aec4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	2200      	movs	r2, #0
 800aecc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800aed0:	2300      	movs	r3, #0
}
 800aed2:	4618      	mov	r0, r3
 800aed4:	3708      	adds	r7, #8
 800aed6:	46bd      	mov	sp, r7
 800aed8:	bd80      	pop	{r7, pc}

0800aeda <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 800aeda:	b580      	push	{r7, lr}
 800aedc:	b082      	sub	sp, #8
 800aede:	af00      	add	r7, sp, #0
 800aee0:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800aee8:	2b01      	cmp	r3, #1
 800aeea:	d101      	bne.n	800aef0 <HAL_ETH_Stop+0x16>
 800aeec:	2302      	movs	r3, #2
 800aeee:	e01f      	b.n	800af30 <HAL_ETH_Stop+0x56>
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	2201      	movs	r2, #1
 800aef4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	2202      	movs	r2, #2
 800aefc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 800af00:	6878      	ldr	r0, [r7, #4]
 800af02:	f000 fba1 	bl	800b648 <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 800af06:	6878      	ldr	r0, [r7, #4]
 800af08:	f000 fbce 	bl	800b6a8 <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 800af0c:	6878      	ldr	r0, [r7, #4]
 800af0e:	f000 fb66 	bl	800b5de <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 800af12:	6878      	ldr	r0, [r7, #4]
 800af14:	f000 fbe0 	bl	800b6d8 <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 800af18:	6878      	ldr	r0, [r7, #4]
 800af1a:	f000 fb26 	bl	800b56a <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	2201      	movs	r2, #1
 800af22:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	2200      	movs	r2, #0
 800af2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800af2e:	2300      	movs	r3, #0
}
 800af30:	4618      	mov	r0, r3
 800af32:	3708      	adds	r7, #8
 800af34:	46bd      	mov	sp, r7
 800af36:	bd80      	pop	{r7, pc}

0800af38 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 800af38:	b580      	push	{r7, lr}
 800af3a:	b084      	sub	sp, #16
 800af3c:	af00      	add	r7, sp, #0
 800af3e:	6078      	str	r0, [r7, #4]
 800af40:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0U;
 800af42:	2300      	movs	r3, #0
 800af44:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800af4c:	2b01      	cmp	r3, #1
 800af4e:	d101      	bne.n	800af54 <HAL_ETH_ConfigMAC+0x1c>
 800af50:	2302      	movs	r3, #2
 800af52:	e0e4      	b.n	800b11e <HAL_ETH_ConfigMAC+0x1e6>
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	2201      	movs	r2, #1
 800af58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	2202      	movs	r2, #2
 800af60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 800af64:	683b      	ldr	r3, [r7, #0]
 800af66:	2b00      	cmp	r3, #0
 800af68:	f000 80b1 	beq.w	800b0ce <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800af74:	68fa      	ldr	r2, [r7, #12]
 800af76:	4b6c      	ldr	r3, [pc, #432]	; (800b128 <HAL_ETH_ConfigMAC+0x1f0>)
 800af78:	4013      	ands	r3, r2
 800af7a:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 800af7c:	683b      	ldr	r3, [r7, #0]
 800af7e:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 800af80:	683b      	ldr	r3, [r7, #0]
 800af82:	685b      	ldr	r3, [r3, #4]
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 800af84:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 800af86:	683b      	ldr	r3, [r7, #0]
 800af88:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 800af8a:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 800af8c:	683b      	ldr	r3, [r7, #0]
 800af8e:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 800af90:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 800af96:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 800af98:	683b      	ldr	r3, [r7, #0]
 800af9a:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 800af9c:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 800af9e:	683b      	ldr	r3, [r7, #0]
 800afa0:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 800afa2:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 800afa8:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 800afaa:	683b      	ldr	r3, [r7, #0]
 800afac:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 800afae:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 800afb0:	683b      	ldr	r3, [r7, #0]
 800afb2:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 800afb4:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 800afb6:	683b      	ldr	r3, [r7, #0]
 800afb8:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 800afba:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 800afbc:	683b      	ldr	r3, [r7, #0]
 800afbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 800afc0:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 800afc2:	683b      	ldr	r3, [r7, #0]
 800afc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 800afc6:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 800afc8:	68fa      	ldr	r2, [r7, #12]
 800afca:	4313      	orrs	r3, r2
 800afcc:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	68fa      	ldr	r2, [r7, #12]
 800afd4:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800afde:	2001      	movs	r0, #1
 800afe0:	f7fe faa0 	bl	8009524 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1; 
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	68fa      	ldr	r2, [r7, #12]
 800afea:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 800afec:	683b      	ldr	r3, [r7, #0]
 800afee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 800aff0:	683b      	ldr	r3, [r7, #0]
 800aff2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 800aff4:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 800aff6:	683b      	ldr	r3, [r7, #0]
 800aff8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 800affa:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 800affc:	683b      	ldr	r3, [r7, #0]
 800affe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 800b000:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 800b002:	683b      	ldr	r3, [r7, #0]
 800b004:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 800b006:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 800b008:	683b      	ldr	r3, [r7, #0]
 800b00a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 800b00c:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 800b00e:	683b      	ldr	r3, [r7, #0]
 800b010:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 800b012:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 800b016:	683b      	ldr	r3, [r7, #0]
 800b018:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 800b01e:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 800b020:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFFR;
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	685b      	ldr	r3, [r3, #4]
 800b028:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800b02a:	2001      	movs	r0, #1
 800b02c:	f7fe fa7a 	bl	8009524 <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg1;
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	68fa      	ldr	r2, [r7, #12]
 800b036:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	683a      	ldr	r2, [r7, #0]
 800b03e:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800b040:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	683a      	ldr	r2, [r7, #0]
 800b048:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800b04a:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg1 = (heth->Instance)->MACFCR;
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	699b      	ldr	r3, [r3, #24]
 800b052:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800b054:	68fa      	ldr	r2, [r7, #12]
 800b056:	f64f 7341 	movw	r3, #65345	; 0xff41
 800b05a:	4013      	ands	r3, r2
 800b05c:	60fb      	str	r3, [r7, #12]
     
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 800b05e:	683b      	ldr	r3, [r7, #0]
 800b060:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b062:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 800b064:	683b      	ldr	r3, [r7, #0]
 800b066:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 800b068:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 800b06a:	683b      	ldr	r3, [r7, #0]
 800b06c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 800b06e:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 800b070:	683b      	ldr	r3, [r7, #0]
 800b072:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 800b074:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 800b076:	683b      	ldr	r3, [r7, #0]
 800b078:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 800b07a:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 800b07c:	683b      	ldr	r3, [r7, #0]
 800b07e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 800b080:	4313      	orrs	r3, r2
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 800b082:	68fa      	ldr	r2, [r7, #12]
 800b084:	4313      	orrs	r3, r2
 800b086:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	68fa      	ldr	r2, [r7, #12]
 800b08e:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFCR;
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	699b      	ldr	r3, [r3, #24]
 800b096:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800b098:	2001      	movs	r0, #1
 800b09a:	f7fe fa43 	bl	8009524 <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg1;
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	68fa      	ldr	r2, [r7, #12]
 800b0a4:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 800b0a6:	683b      	ldr	r3, [r7, #0]
 800b0a8:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 800b0aa:	683b      	ldr	r3, [r7, #0]
 800b0ac:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	430a      	orrs	r2, r1
 800b0b4:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg1 = (heth->Instance)->MACVLANTR;
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	69db      	ldr	r3, [r3, #28]
 800b0bc:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 800b0be:	2001      	movs	r0, #1
 800b0c0:	f7fe fa30 	bl	8009524 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg1;
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	68fa      	ldr	r2, [r7, #12]
 800b0ca:	61da      	str	r2, [r3, #28]
 800b0cc:	e01e      	b.n	800b10c <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg1 &= ~(0x00004800U);
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800b0dc:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	689a      	ldr	r2, [r3, #8]
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	68db      	ldr	r3, [r3, #12]
 800b0e6:	4313      	orrs	r3, r2
 800b0e8:	68fa      	ldr	r2, [r7, #12]
 800b0ea:	4313      	orrs	r3, r2
 800b0ec:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	68fa      	ldr	r2, [r7, #12]
 800b0f4:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800b0fe:	2001      	movs	r0, #1
 800b100:	f7fe fa10 	bl	8009524 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	68fa      	ldr	r2, [r7, #12]
 800b10a:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	2201      	movs	r2, #1
 800b110:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	2200      	movs	r2, #0
 800b118:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 800b11c:	2300      	movs	r3, #0
}
 800b11e:	4618      	mov	r0, r3
 800b120:	3710      	adds	r7, #16
 800b122:	46bd      	mov	sp, r7
 800b124:	bd80      	pop	{r7, pc}
 800b126:	bf00      	nop
 800b128:	ff20810f 	.word	0xff20810f

0800b12c <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 800b12c:	b580      	push	{r7, lr}
 800b12e:	b0b0      	sub	sp, #192	; 0xc0
 800b130:	af00      	add	r7, sp, #0
 800b132:	6078      	str	r0, [r7, #4]
 800b134:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 800b136:	2300      	movs	r3, #0
 800b138:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 800b13c:	683b      	ldr	r3, [r7, #0]
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d007      	beq.n	800b152 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b148:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800b150:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 800b152:	2300      	movs	r3, #0
 800b154:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 800b156:	2300      	movs	r3, #0
 800b158:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 800b15a:	2300      	movs	r3, #0
 800b15c:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 800b15e:	2300      	movs	r3, #0
 800b160:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 800b162:	2300      	movs	r3, #0
 800b164:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 800b166:	2300      	movs	r3, #0
 800b168:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	69db      	ldr	r3, [r3, #28]
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d103      	bne.n	800b17a <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 800b172:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b176:	663b      	str	r3, [r7, #96]	; 0x60
 800b178:	e001      	b.n	800b17e <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 800b17a:	2300      	movs	r3, #0
 800b17c:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 800b17e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b182:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 800b184:	2300      	movs	r3, #0
 800b186:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800b188:	2300      	movs	r3, #0
 800b18a:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 800b18c:	2300      	movs	r3, #0
 800b18e:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 800b190:	2300      	movs	r3, #0
 800b192:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 800b194:	2300      	movs	r3, #0
 800b196:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 800b198:	2340      	movs	r3, #64	; 0x40
 800b19a:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 800b19c:	2300      	movs	r3, #0
 800b19e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 800b1a2:	2300      	movs	r3, #0
 800b1a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 800b1a8:	2300      	movs	r3, #0
 800b1aa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 800b1ae:	2300      	movs	r3, #0
 800b1b0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 800b1b4:	2300      	movs	r3, #0
 800b1b6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 800b1ba:	2300      	movs	r3, #0
 800b1bc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 800b1c0:	2300      	movs	r3, #0
 800b1c2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 800b1c6:	2300      	movs	r3, #0
 800b1c8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 800b1cc:	2380      	movs	r3, #128	; 0x80
 800b1ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800b1d2:	2300      	movs	r3, #0
 800b1d4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 800b1d8:	2300      	movs	r3, #0
 800b1da:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 800b1de:	2300      	movs	r3, #0
 800b1e0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 800b1e4:	2300      	movs	r3, #0
 800b1e6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 800b1ea:	2300      	movs	r3, #0
 800b1ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 800b1f0:	2300      	movs	r3, #0
 800b1f2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800b200:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800b204:	4bac      	ldr	r3, [pc, #688]	; (800b4b8 <ETH_MACDMAConfig+0x38c>)
 800b206:	4013      	ands	r3, r2
 800b208:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 800b20c:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 800b20e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 800b210:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 800b212:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 800b214:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 800b216:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 800b218:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 800b21e:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 800b220:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 800b222:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 800b224:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 800b226:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 800b22c:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 800b22e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 800b230:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 800b232:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 800b234:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 800b236:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 800b238:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 800b23a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 800b23c:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 800b23e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 800b240:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 800b242:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800b246:	4313      	orrs	r3, r2
 800b248:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800b254:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800b260:	2001      	movs	r0, #1
 800b262:	f7fe f95f 	bl	8009524 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800b26e:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800b270:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 800b272:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800b274:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 800b276:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 800b278:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 800b27a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 800b27e:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 800b280:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 800b284:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 800b286:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 800b28a:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 800b28c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 800b290:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 800b294:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 800b29c:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800b29e:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	685b      	ldr	r3, [r3, #4]
 800b2a6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 800b2aa:	2001      	movs	r0, #1
 800b2ac:	f7fe f93a 	bl	8009524 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800b2b8:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b2c2:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800b2cc:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	699b      	ldr	r3, [r3, #24]
 800b2d4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800b2d8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800b2dc:	f64f 7341 	movw	r3, #65345	; 0xff41
 800b2e0:	4013      	ands	r3, r2
 800b2e2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 800b2e6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b2ea:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 800b2ec:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 800b2f0:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 800b2f2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 800b2f6:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 800b2f8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 800b2fc:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 800b2fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 800b302:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 800b304:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 800b308:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 800b30a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800b30e:	4313      	orrs	r3, r2
 800b310:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800b31c:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	699b      	ldr	r3, [r3, #24]
 800b324:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 800b328:	2001      	movs	r0, #1
 800b32a:	f7fe f8fb 	bl	8009524 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800b336:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 800b338:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 800b33c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	430a      	orrs	r2, r1
 800b346:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	69db      	ldr	r3, [r3, #28]
 800b34e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800b352:	2001      	movs	r0, #1
 800b354:	f7fe f8e6 	bl	8009524 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800b360:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 800b362:	2300      	movs	r3, #0
 800b364:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 800b366:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b36a:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 800b36c:	2300      	movs	r3, #0
 800b36e:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 800b370:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800b374:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800b376:	2300      	movs	r3, #0
 800b378:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 800b37a:	2300      	movs	r3, #0
 800b37c:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 800b37e:	2300      	movs	r3, #0
 800b380:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800b382:	2300      	movs	r3, #0
 800b384:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 800b386:	2304      	movs	r3, #4
 800b388:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 800b38a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b38e:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 800b390:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800b394:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800b396:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800b39a:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800b39c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b3a0:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 800b3a2:	2380      	movs	r3, #128	; 0x80
 800b3a4:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 800b3a6:	2300      	movs	r3, #0
 800b3a8:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800b3aa:	2300      	movs	r3, #0
 800b3ac:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b3b6:	3318      	adds	r3, #24
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800b3be:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800b3c2:	4b3e      	ldr	r3, [pc, #248]	; (800b4bc <ETH_MACDMAConfig+0x390>)
 800b3c4:	4013      	ands	r3, r2
 800b3c6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800b3ca:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 800b3cc:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800b3ce:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 800b3d0:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 800b3d2:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 800b3d4:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 800b3d6:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 800b3d8:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 800b3da:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 800b3dc:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 800b3de:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 800b3e0:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 800b3e2:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 800b3e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 800b3e6:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 800b3e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 800b3ea:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800b3ec:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800b3f0:	4313      	orrs	r3, r2
 800b3f2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b3fe:	3318      	adds	r3, #24
 800b400:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800b404:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b40e:	3318      	adds	r3, #24
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800b416:	2001      	movs	r0, #1
 800b418:	f7fe f884 	bl	8009524 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b424:	3318      	adds	r3, #24
 800b426:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800b42a:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 800b42c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 800b42e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 800b430:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 800b432:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 800b434:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 800b436:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 800b438:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 800b43a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 800b43c:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 800b43e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b440:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 800b442:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 800b444:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 800b446:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800b450:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b454:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800b464:	2001      	movs	r0, #1
 800b466:	f7fe f85d 	bl	8009524 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b472:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800b476:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	699b      	ldr	r3, [r3, #24]
 800b47c:	2b01      	cmp	r3, #1
 800b47e:	d10f      	bne.n	800b4a0 <ETH_MACDMAConfig+0x374>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b488:	331c      	adds	r3, #28
 800b48a:	681a      	ldr	r2, [r3, #0]
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800b494:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b498:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b49c:	331c      	adds	r3, #28
 800b49e:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	695b      	ldr	r3, [r3, #20]
 800b4a4:	461a      	mov	r2, r3
 800b4a6:	2100      	movs	r1, #0
 800b4a8:	6878      	ldr	r0, [r7, #4]
 800b4aa:	f000 f809 	bl	800b4c0 <ETH_MACAddressConfig>
}
 800b4ae:	bf00      	nop
 800b4b0:	37c0      	adds	r7, #192	; 0xc0
 800b4b2:	46bd      	mov	sp, r7
 800b4b4:	bd80      	pop	{r7, pc}
 800b4b6:	bf00      	nop
 800b4b8:	ff20810f 	.word	0xff20810f
 800b4bc:	f8de3f23 	.word	0xf8de3f23

0800b4c0 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 800b4c0:	b480      	push	{r7}
 800b4c2:	b087      	sub	sp, #28
 800b4c4:	af00      	add	r7, sp, #0
 800b4c6:	60f8      	str	r0, [r7, #12]
 800b4c8:	60b9      	str	r1, [r7, #8]
 800b4ca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	3305      	adds	r3, #5
 800b4d0:	781b      	ldrb	r3, [r3, #0]
 800b4d2:	021b      	lsls	r3, r3, #8
 800b4d4:	687a      	ldr	r2, [r7, #4]
 800b4d6:	3204      	adds	r2, #4
 800b4d8:	7812      	ldrb	r2, [r2, #0]
 800b4da:	4313      	orrs	r3, r2
 800b4dc:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800b4de:	68ba      	ldr	r2, [r7, #8]
 800b4e0:	4b11      	ldr	r3, [pc, #68]	; (800b528 <ETH_MACAddressConfig+0x68>)
 800b4e2:	4413      	add	r3, r2
 800b4e4:	461a      	mov	r2, r3
 800b4e6:	697b      	ldr	r3, [r7, #20]
 800b4e8:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	3303      	adds	r3, #3
 800b4ee:	781b      	ldrb	r3, [r3, #0]
 800b4f0:	061a      	lsls	r2, r3, #24
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	3302      	adds	r3, #2
 800b4f6:	781b      	ldrb	r3, [r3, #0]
 800b4f8:	041b      	lsls	r3, r3, #16
 800b4fa:	431a      	orrs	r2, r3
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	3301      	adds	r3, #1
 800b500:	781b      	ldrb	r3, [r3, #0]
 800b502:	021b      	lsls	r3, r3, #8
 800b504:	4313      	orrs	r3, r2
 800b506:	687a      	ldr	r2, [r7, #4]
 800b508:	7812      	ldrb	r2, [r2, #0]
 800b50a:	4313      	orrs	r3, r2
 800b50c:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800b50e:	68ba      	ldr	r2, [r7, #8]
 800b510:	4b06      	ldr	r3, [pc, #24]	; (800b52c <ETH_MACAddressConfig+0x6c>)
 800b512:	4413      	add	r3, r2
 800b514:	461a      	mov	r2, r3
 800b516:	697b      	ldr	r3, [r7, #20]
 800b518:	6013      	str	r3, [r2, #0]
}
 800b51a:	bf00      	nop
 800b51c:	371c      	adds	r7, #28
 800b51e:	46bd      	mov	sp, r7
 800b520:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b524:	4770      	bx	lr
 800b526:	bf00      	nop
 800b528:	40028040 	.word	0x40028040
 800b52c:	40028044 	.word	0x40028044

0800b530 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 800b530:	b580      	push	{r7, lr}
 800b532:	b084      	sub	sp, #16
 800b534:	af00      	add	r7, sp, #0
 800b536:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 800b538:	2300      	movs	r3, #0
 800b53a:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	681a      	ldr	r2, [r3, #0]
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	f042 0208 	orr.w	r2, r2, #8
 800b54a:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800b554:	2001      	movs	r0, #1
 800b556:	f000 f8e9 	bl	800b72c <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	68fa      	ldr	r2, [r7, #12]
 800b560:	601a      	str	r2, [r3, #0]
}
 800b562:	bf00      	nop
 800b564:	3710      	adds	r7, #16
 800b566:	46bd      	mov	sp, r7
 800b568:	bd80      	pop	{r7, pc}

0800b56a <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 800b56a:	b580      	push	{r7, lr}
 800b56c:	b084      	sub	sp, #16
 800b56e:	af00      	add	r7, sp, #0
 800b570:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 800b572:	2300      	movs	r3, #0
 800b574:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	681a      	ldr	r2, [r3, #0]
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	f022 0208 	bic.w	r2, r2, #8
 800b584:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800b58e:	2001      	movs	r0, #1
 800b590:	f000 f8cc 	bl	800b72c <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	68fa      	ldr	r2, [r7, #12]
 800b59a:	601a      	str	r2, [r3, #0]
}
 800b59c:	bf00      	nop
 800b59e:	3710      	adds	r7, #16
 800b5a0:	46bd      	mov	sp, r7
 800b5a2:	bd80      	pop	{r7, pc}

0800b5a4 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 800b5a4:	b580      	push	{r7, lr}
 800b5a6:	b084      	sub	sp, #16
 800b5a8:	af00      	add	r7, sp, #0
 800b5aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 800b5ac:	2300      	movs	r3, #0
 800b5ae:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	681a      	ldr	r2, [r3, #0]
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	f042 0204 	orr.w	r2, r2, #4
 800b5be:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800b5c8:	2001      	movs	r0, #1
 800b5ca:	f000 f8af 	bl	800b72c <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	68fa      	ldr	r2, [r7, #12]
 800b5d4:	601a      	str	r2, [r3, #0]
}
 800b5d6:	bf00      	nop
 800b5d8:	3710      	adds	r7, #16
 800b5da:	46bd      	mov	sp, r7
 800b5dc:	bd80      	pop	{r7, pc}

0800b5de <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 800b5de:	b580      	push	{r7, lr}
 800b5e0:	b084      	sub	sp, #16
 800b5e2:	af00      	add	r7, sp, #0
 800b5e4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 800b5e6:	2300      	movs	r3, #0
 800b5e8:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	681a      	ldr	r2, [r3, #0]
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	f022 0204 	bic.w	r2, r2, #4
 800b5f8:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800b602:	2001      	movs	r0, #1
 800b604:	f000 f892 	bl	800b72c <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	681b      	ldr	r3, [r3, #0]
 800b60c:	68fa      	ldr	r2, [r7, #12]
 800b60e:	601a      	str	r2, [r3, #0]
}
 800b610:	bf00      	nop
 800b612:	3710      	adds	r7, #16
 800b614:	46bd      	mov	sp, r7
 800b616:	bd80      	pop	{r7, pc}

0800b618 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 800b618:	b480      	push	{r7}
 800b61a:	b083      	sub	sp, #12
 800b61c:	af00      	add	r7, sp, #0
 800b61e:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b628:	3318      	adds	r3, #24
 800b62a:	681a      	ldr	r2, [r3, #0]
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b634:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b638:	3318      	adds	r3, #24
 800b63a:	601a      	str	r2, [r3, #0]
}
 800b63c:	bf00      	nop
 800b63e:	370c      	adds	r7, #12
 800b640:	46bd      	mov	sp, r7
 800b642:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b646:	4770      	bx	lr

0800b648 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 800b648:	b480      	push	{r7}
 800b64a:	b083      	sub	sp, #12
 800b64c:	af00      	add	r7, sp, #0
 800b64e:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b658:	3318      	adds	r3, #24
 800b65a:	681a      	ldr	r2, [r3, #0]
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b664:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b668:	3318      	adds	r3, #24
 800b66a:	601a      	str	r2, [r3, #0]
}
 800b66c:	bf00      	nop
 800b66e:	370c      	adds	r7, #12
 800b670:	46bd      	mov	sp, r7
 800b672:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b676:	4770      	bx	lr

0800b678 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 800b678:	b480      	push	{r7}
 800b67a:	b083      	sub	sp, #12
 800b67c:	af00      	add	r7, sp, #0
 800b67e:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b688:	3318      	adds	r3, #24
 800b68a:	681a      	ldr	r2, [r3, #0]
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	f042 0202 	orr.w	r2, r2, #2
 800b694:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b698:	3318      	adds	r3, #24
 800b69a:	601a      	str	r2, [r3, #0]
}
 800b69c:	bf00      	nop
 800b69e:	370c      	adds	r7, #12
 800b6a0:	46bd      	mov	sp, r7
 800b6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6a6:	4770      	bx	lr

0800b6a8 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 800b6a8:	b480      	push	{r7}
 800b6aa:	b083      	sub	sp, #12
 800b6ac:	af00      	add	r7, sp, #0
 800b6ae:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b6b8:	3318      	adds	r3, #24
 800b6ba:	681a      	ldr	r2, [r3, #0]
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	f022 0202 	bic.w	r2, r2, #2
 800b6c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b6c8:	3318      	adds	r3, #24
 800b6ca:	601a      	str	r2, [r3, #0]
}
 800b6cc:	bf00      	nop
 800b6ce:	370c      	adds	r7, #12
 800b6d0:	46bd      	mov	sp, r7
 800b6d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6d6:	4770      	bx	lr

0800b6d8 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 800b6d8:	b580      	push	{r7, lr}
 800b6da:	b084      	sub	sp, #16
 800b6dc:	af00      	add	r7, sp, #0
 800b6de:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 800b6e0:	2300      	movs	r3, #0
 800b6e2:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b6ec:	3318      	adds	r3, #24
 800b6ee:	681a      	ldr	r2, [r3, #0]
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800b6f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b6fc:	3318      	adds	r3, #24
 800b6fe:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b708:	3318      	adds	r3, #24
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800b70e:	2001      	movs	r0, #1
 800b710:	f000 f80c 	bl	800b72c <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	68fa      	ldr	r2, [r7, #12]
 800b71a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b71e:	3318      	adds	r3, #24
 800b720:	601a      	str	r2, [r3, #0]
}
 800b722:	bf00      	nop
 800b724:	3710      	adds	r7, #16
 800b726:	46bd      	mov	sp, r7
 800b728:	bd80      	pop	{r7, pc}
	...

0800b72c <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 800b72c:	b480      	push	{r7}
 800b72e:	b085      	sub	sp, #20
 800b730:	af00      	add	r7, sp, #0
 800b732:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800b734:	4b0b      	ldr	r3, [pc, #44]	; (800b764 <ETH_Delay+0x38>)
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	4a0b      	ldr	r2, [pc, #44]	; (800b768 <ETH_Delay+0x3c>)
 800b73a:	fba2 2303 	umull	r2, r3, r2, r3
 800b73e:	0a5b      	lsrs	r3, r3, #9
 800b740:	687a      	ldr	r2, [r7, #4]
 800b742:	fb02 f303 	mul.w	r3, r2, r3
 800b746:	60fb      	str	r3, [r7, #12]
  do 
  {
    __NOP();
 800b748:	bf00      	nop
  } 
  while (Delay --);
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	1e5a      	subs	r2, r3, #1
 800b74e:	60fa      	str	r2, [r7, #12]
 800b750:	2b00      	cmp	r3, #0
 800b752:	d1f9      	bne.n	800b748 <ETH_Delay+0x1c>
}
 800b754:	bf00      	nop
 800b756:	bf00      	nop
 800b758:	3714      	adds	r7, #20
 800b75a:	46bd      	mov	sp, r7
 800b75c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b760:	4770      	bx	lr
 800b762:	bf00      	nop
 800b764:	20000008 	.word	0x20000008
 800b768:	10624dd3 	.word	0x10624dd3

0800b76c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800b76c:	b480      	push	{r7}
 800b76e:	b089      	sub	sp, #36	; 0x24
 800b770:	af00      	add	r7, sp, #0
 800b772:	6078      	str	r0, [r7, #4]
 800b774:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800b776:	2300      	movs	r3, #0
 800b778:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800b77a:	2300      	movs	r3, #0
 800b77c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800b77e:	2300      	movs	r3, #0
 800b780:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800b782:	2300      	movs	r3, #0
 800b784:	61fb      	str	r3, [r7, #28]
 800b786:	e16b      	b.n	800ba60 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800b788:	2201      	movs	r2, #1
 800b78a:	69fb      	ldr	r3, [r7, #28]
 800b78c:	fa02 f303 	lsl.w	r3, r2, r3
 800b790:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800b792:	683b      	ldr	r3, [r7, #0]
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	697a      	ldr	r2, [r7, #20]
 800b798:	4013      	ands	r3, r2
 800b79a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800b79c:	693a      	ldr	r2, [r7, #16]
 800b79e:	697b      	ldr	r3, [r7, #20]
 800b7a0:	429a      	cmp	r2, r3
 800b7a2:	f040 815a 	bne.w	800ba5a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800b7a6:	683b      	ldr	r3, [r7, #0]
 800b7a8:	685b      	ldr	r3, [r3, #4]
 800b7aa:	2b01      	cmp	r3, #1
 800b7ac:	d00b      	beq.n	800b7c6 <HAL_GPIO_Init+0x5a>
 800b7ae:	683b      	ldr	r3, [r7, #0]
 800b7b0:	685b      	ldr	r3, [r3, #4]
 800b7b2:	2b02      	cmp	r3, #2
 800b7b4:	d007      	beq.n	800b7c6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800b7b6:	683b      	ldr	r3, [r7, #0]
 800b7b8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800b7ba:	2b11      	cmp	r3, #17
 800b7bc:	d003      	beq.n	800b7c6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800b7be:	683b      	ldr	r3, [r7, #0]
 800b7c0:	685b      	ldr	r3, [r3, #4]
 800b7c2:	2b12      	cmp	r3, #18
 800b7c4:	d130      	bne.n	800b828 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	689b      	ldr	r3, [r3, #8]
 800b7ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800b7cc:	69fb      	ldr	r3, [r7, #28]
 800b7ce:	005b      	lsls	r3, r3, #1
 800b7d0:	2203      	movs	r2, #3
 800b7d2:	fa02 f303 	lsl.w	r3, r2, r3
 800b7d6:	43db      	mvns	r3, r3
 800b7d8:	69ba      	ldr	r2, [r7, #24]
 800b7da:	4013      	ands	r3, r2
 800b7dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800b7de:	683b      	ldr	r3, [r7, #0]
 800b7e0:	68da      	ldr	r2, [r3, #12]
 800b7e2:	69fb      	ldr	r3, [r7, #28]
 800b7e4:	005b      	lsls	r3, r3, #1
 800b7e6:	fa02 f303 	lsl.w	r3, r2, r3
 800b7ea:	69ba      	ldr	r2, [r7, #24]
 800b7ec:	4313      	orrs	r3, r2
 800b7ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	69ba      	ldr	r2, [r7, #24]
 800b7f4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	685b      	ldr	r3, [r3, #4]
 800b7fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800b7fc:	2201      	movs	r2, #1
 800b7fe:	69fb      	ldr	r3, [r7, #28]
 800b800:	fa02 f303 	lsl.w	r3, r2, r3
 800b804:	43db      	mvns	r3, r3
 800b806:	69ba      	ldr	r2, [r7, #24]
 800b808:	4013      	ands	r3, r2
 800b80a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800b80c:	683b      	ldr	r3, [r7, #0]
 800b80e:	685b      	ldr	r3, [r3, #4]
 800b810:	091b      	lsrs	r3, r3, #4
 800b812:	f003 0201 	and.w	r2, r3, #1
 800b816:	69fb      	ldr	r3, [r7, #28]
 800b818:	fa02 f303 	lsl.w	r3, r2, r3
 800b81c:	69ba      	ldr	r2, [r7, #24]
 800b81e:	4313      	orrs	r3, r2
 800b820:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	69ba      	ldr	r2, [r7, #24]
 800b826:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	68db      	ldr	r3, [r3, #12]
 800b82c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800b82e:	69fb      	ldr	r3, [r7, #28]
 800b830:	005b      	lsls	r3, r3, #1
 800b832:	2203      	movs	r2, #3
 800b834:	fa02 f303 	lsl.w	r3, r2, r3
 800b838:	43db      	mvns	r3, r3
 800b83a:	69ba      	ldr	r2, [r7, #24]
 800b83c:	4013      	ands	r3, r2
 800b83e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800b840:	683b      	ldr	r3, [r7, #0]
 800b842:	689a      	ldr	r2, [r3, #8]
 800b844:	69fb      	ldr	r3, [r7, #28]
 800b846:	005b      	lsls	r3, r3, #1
 800b848:	fa02 f303 	lsl.w	r3, r2, r3
 800b84c:	69ba      	ldr	r2, [r7, #24]
 800b84e:	4313      	orrs	r3, r2
 800b850:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	69ba      	ldr	r2, [r7, #24]
 800b856:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800b858:	683b      	ldr	r3, [r7, #0]
 800b85a:	685b      	ldr	r3, [r3, #4]
 800b85c:	2b02      	cmp	r3, #2
 800b85e:	d003      	beq.n	800b868 <HAL_GPIO_Init+0xfc>
 800b860:	683b      	ldr	r3, [r7, #0]
 800b862:	685b      	ldr	r3, [r3, #4]
 800b864:	2b12      	cmp	r3, #18
 800b866:	d123      	bne.n	800b8b0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800b868:	69fb      	ldr	r3, [r7, #28]
 800b86a:	08da      	lsrs	r2, r3, #3
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	3208      	adds	r2, #8
 800b870:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b874:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800b876:	69fb      	ldr	r3, [r7, #28]
 800b878:	f003 0307 	and.w	r3, r3, #7
 800b87c:	009b      	lsls	r3, r3, #2
 800b87e:	220f      	movs	r2, #15
 800b880:	fa02 f303 	lsl.w	r3, r2, r3
 800b884:	43db      	mvns	r3, r3
 800b886:	69ba      	ldr	r2, [r7, #24]
 800b888:	4013      	ands	r3, r2
 800b88a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800b88c:	683b      	ldr	r3, [r7, #0]
 800b88e:	691a      	ldr	r2, [r3, #16]
 800b890:	69fb      	ldr	r3, [r7, #28]
 800b892:	f003 0307 	and.w	r3, r3, #7
 800b896:	009b      	lsls	r3, r3, #2
 800b898:	fa02 f303 	lsl.w	r3, r2, r3
 800b89c:	69ba      	ldr	r2, [r7, #24]
 800b89e:	4313      	orrs	r3, r2
 800b8a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800b8a2:	69fb      	ldr	r3, [r7, #28]
 800b8a4:	08da      	lsrs	r2, r3, #3
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	3208      	adds	r2, #8
 800b8aa:	69b9      	ldr	r1, [r7, #24]
 800b8ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800b8b6:	69fb      	ldr	r3, [r7, #28]
 800b8b8:	005b      	lsls	r3, r3, #1
 800b8ba:	2203      	movs	r2, #3
 800b8bc:	fa02 f303 	lsl.w	r3, r2, r3
 800b8c0:	43db      	mvns	r3, r3
 800b8c2:	69ba      	ldr	r2, [r7, #24]
 800b8c4:	4013      	ands	r3, r2
 800b8c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800b8c8:	683b      	ldr	r3, [r7, #0]
 800b8ca:	685b      	ldr	r3, [r3, #4]
 800b8cc:	f003 0203 	and.w	r2, r3, #3
 800b8d0:	69fb      	ldr	r3, [r7, #28]
 800b8d2:	005b      	lsls	r3, r3, #1
 800b8d4:	fa02 f303 	lsl.w	r3, r2, r3
 800b8d8:	69ba      	ldr	r2, [r7, #24]
 800b8da:	4313      	orrs	r3, r2
 800b8dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	69ba      	ldr	r2, [r7, #24]
 800b8e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800b8e4:	683b      	ldr	r3, [r7, #0]
 800b8e6:	685b      	ldr	r3, [r3, #4]
 800b8e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	f000 80b4 	beq.w	800ba5a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b8f2:	2300      	movs	r3, #0
 800b8f4:	60fb      	str	r3, [r7, #12]
 800b8f6:	4b60      	ldr	r3, [pc, #384]	; (800ba78 <HAL_GPIO_Init+0x30c>)
 800b8f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b8fa:	4a5f      	ldr	r2, [pc, #380]	; (800ba78 <HAL_GPIO_Init+0x30c>)
 800b8fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b900:	6453      	str	r3, [r2, #68]	; 0x44
 800b902:	4b5d      	ldr	r3, [pc, #372]	; (800ba78 <HAL_GPIO_Init+0x30c>)
 800b904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b906:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b90a:	60fb      	str	r3, [r7, #12]
 800b90c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800b90e:	4a5b      	ldr	r2, [pc, #364]	; (800ba7c <HAL_GPIO_Init+0x310>)
 800b910:	69fb      	ldr	r3, [r7, #28]
 800b912:	089b      	lsrs	r3, r3, #2
 800b914:	3302      	adds	r3, #2
 800b916:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b91a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800b91c:	69fb      	ldr	r3, [r7, #28]
 800b91e:	f003 0303 	and.w	r3, r3, #3
 800b922:	009b      	lsls	r3, r3, #2
 800b924:	220f      	movs	r2, #15
 800b926:	fa02 f303 	lsl.w	r3, r2, r3
 800b92a:	43db      	mvns	r3, r3
 800b92c:	69ba      	ldr	r2, [r7, #24]
 800b92e:	4013      	ands	r3, r2
 800b930:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	4a52      	ldr	r2, [pc, #328]	; (800ba80 <HAL_GPIO_Init+0x314>)
 800b936:	4293      	cmp	r3, r2
 800b938:	d02b      	beq.n	800b992 <HAL_GPIO_Init+0x226>
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	4a51      	ldr	r2, [pc, #324]	; (800ba84 <HAL_GPIO_Init+0x318>)
 800b93e:	4293      	cmp	r3, r2
 800b940:	d025      	beq.n	800b98e <HAL_GPIO_Init+0x222>
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	4a50      	ldr	r2, [pc, #320]	; (800ba88 <HAL_GPIO_Init+0x31c>)
 800b946:	4293      	cmp	r3, r2
 800b948:	d01f      	beq.n	800b98a <HAL_GPIO_Init+0x21e>
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	4a4f      	ldr	r2, [pc, #316]	; (800ba8c <HAL_GPIO_Init+0x320>)
 800b94e:	4293      	cmp	r3, r2
 800b950:	d019      	beq.n	800b986 <HAL_GPIO_Init+0x21a>
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	4a4e      	ldr	r2, [pc, #312]	; (800ba90 <HAL_GPIO_Init+0x324>)
 800b956:	4293      	cmp	r3, r2
 800b958:	d013      	beq.n	800b982 <HAL_GPIO_Init+0x216>
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	4a4d      	ldr	r2, [pc, #308]	; (800ba94 <HAL_GPIO_Init+0x328>)
 800b95e:	4293      	cmp	r3, r2
 800b960:	d00d      	beq.n	800b97e <HAL_GPIO_Init+0x212>
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	4a4c      	ldr	r2, [pc, #304]	; (800ba98 <HAL_GPIO_Init+0x32c>)
 800b966:	4293      	cmp	r3, r2
 800b968:	d007      	beq.n	800b97a <HAL_GPIO_Init+0x20e>
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	4a4b      	ldr	r2, [pc, #300]	; (800ba9c <HAL_GPIO_Init+0x330>)
 800b96e:	4293      	cmp	r3, r2
 800b970:	d101      	bne.n	800b976 <HAL_GPIO_Init+0x20a>
 800b972:	2307      	movs	r3, #7
 800b974:	e00e      	b.n	800b994 <HAL_GPIO_Init+0x228>
 800b976:	2308      	movs	r3, #8
 800b978:	e00c      	b.n	800b994 <HAL_GPIO_Init+0x228>
 800b97a:	2306      	movs	r3, #6
 800b97c:	e00a      	b.n	800b994 <HAL_GPIO_Init+0x228>
 800b97e:	2305      	movs	r3, #5
 800b980:	e008      	b.n	800b994 <HAL_GPIO_Init+0x228>
 800b982:	2304      	movs	r3, #4
 800b984:	e006      	b.n	800b994 <HAL_GPIO_Init+0x228>
 800b986:	2303      	movs	r3, #3
 800b988:	e004      	b.n	800b994 <HAL_GPIO_Init+0x228>
 800b98a:	2302      	movs	r3, #2
 800b98c:	e002      	b.n	800b994 <HAL_GPIO_Init+0x228>
 800b98e:	2301      	movs	r3, #1
 800b990:	e000      	b.n	800b994 <HAL_GPIO_Init+0x228>
 800b992:	2300      	movs	r3, #0
 800b994:	69fa      	ldr	r2, [r7, #28]
 800b996:	f002 0203 	and.w	r2, r2, #3
 800b99a:	0092      	lsls	r2, r2, #2
 800b99c:	4093      	lsls	r3, r2
 800b99e:	69ba      	ldr	r2, [r7, #24]
 800b9a0:	4313      	orrs	r3, r2
 800b9a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800b9a4:	4935      	ldr	r1, [pc, #212]	; (800ba7c <HAL_GPIO_Init+0x310>)
 800b9a6:	69fb      	ldr	r3, [r7, #28]
 800b9a8:	089b      	lsrs	r3, r3, #2
 800b9aa:	3302      	adds	r3, #2
 800b9ac:	69ba      	ldr	r2, [r7, #24]
 800b9ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800b9b2:	4b3b      	ldr	r3, [pc, #236]	; (800baa0 <HAL_GPIO_Init+0x334>)
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b9b8:	693b      	ldr	r3, [r7, #16]
 800b9ba:	43db      	mvns	r3, r3
 800b9bc:	69ba      	ldr	r2, [r7, #24]
 800b9be:	4013      	ands	r3, r2
 800b9c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800b9c2:	683b      	ldr	r3, [r7, #0]
 800b9c4:	685b      	ldr	r3, [r3, #4]
 800b9c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	d003      	beq.n	800b9d6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800b9ce:	69ba      	ldr	r2, [r7, #24]
 800b9d0:	693b      	ldr	r3, [r7, #16]
 800b9d2:	4313      	orrs	r3, r2
 800b9d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800b9d6:	4a32      	ldr	r2, [pc, #200]	; (800baa0 <HAL_GPIO_Init+0x334>)
 800b9d8:	69bb      	ldr	r3, [r7, #24]
 800b9da:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800b9dc:	4b30      	ldr	r3, [pc, #192]	; (800baa0 <HAL_GPIO_Init+0x334>)
 800b9de:	685b      	ldr	r3, [r3, #4]
 800b9e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b9e2:	693b      	ldr	r3, [r7, #16]
 800b9e4:	43db      	mvns	r3, r3
 800b9e6:	69ba      	ldr	r2, [r7, #24]
 800b9e8:	4013      	ands	r3, r2
 800b9ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800b9ec:	683b      	ldr	r3, [r7, #0]
 800b9ee:	685b      	ldr	r3, [r3, #4]
 800b9f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d003      	beq.n	800ba00 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800b9f8:	69ba      	ldr	r2, [r7, #24]
 800b9fa:	693b      	ldr	r3, [r7, #16]
 800b9fc:	4313      	orrs	r3, r2
 800b9fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800ba00:	4a27      	ldr	r2, [pc, #156]	; (800baa0 <HAL_GPIO_Init+0x334>)
 800ba02:	69bb      	ldr	r3, [r7, #24]
 800ba04:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800ba06:	4b26      	ldr	r3, [pc, #152]	; (800baa0 <HAL_GPIO_Init+0x334>)
 800ba08:	689b      	ldr	r3, [r3, #8]
 800ba0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800ba0c:	693b      	ldr	r3, [r7, #16]
 800ba0e:	43db      	mvns	r3, r3
 800ba10:	69ba      	ldr	r2, [r7, #24]
 800ba12:	4013      	ands	r3, r2
 800ba14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800ba16:	683b      	ldr	r3, [r7, #0]
 800ba18:	685b      	ldr	r3, [r3, #4]
 800ba1a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d003      	beq.n	800ba2a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800ba22:	69ba      	ldr	r2, [r7, #24]
 800ba24:	693b      	ldr	r3, [r7, #16]
 800ba26:	4313      	orrs	r3, r2
 800ba28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800ba2a:	4a1d      	ldr	r2, [pc, #116]	; (800baa0 <HAL_GPIO_Init+0x334>)
 800ba2c:	69bb      	ldr	r3, [r7, #24]
 800ba2e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800ba30:	4b1b      	ldr	r3, [pc, #108]	; (800baa0 <HAL_GPIO_Init+0x334>)
 800ba32:	68db      	ldr	r3, [r3, #12]
 800ba34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800ba36:	693b      	ldr	r3, [r7, #16]
 800ba38:	43db      	mvns	r3, r3
 800ba3a:	69ba      	ldr	r2, [r7, #24]
 800ba3c:	4013      	ands	r3, r2
 800ba3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800ba40:	683b      	ldr	r3, [r7, #0]
 800ba42:	685b      	ldr	r3, [r3, #4]
 800ba44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d003      	beq.n	800ba54 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800ba4c:	69ba      	ldr	r2, [r7, #24]
 800ba4e:	693b      	ldr	r3, [r7, #16]
 800ba50:	4313      	orrs	r3, r2
 800ba52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800ba54:	4a12      	ldr	r2, [pc, #72]	; (800baa0 <HAL_GPIO_Init+0x334>)
 800ba56:	69bb      	ldr	r3, [r7, #24]
 800ba58:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800ba5a:	69fb      	ldr	r3, [r7, #28]
 800ba5c:	3301      	adds	r3, #1
 800ba5e:	61fb      	str	r3, [r7, #28]
 800ba60:	69fb      	ldr	r3, [r7, #28]
 800ba62:	2b0f      	cmp	r3, #15
 800ba64:	f67f ae90 	bls.w	800b788 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800ba68:	bf00      	nop
 800ba6a:	bf00      	nop
 800ba6c:	3724      	adds	r7, #36	; 0x24
 800ba6e:	46bd      	mov	sp, r7
 800ba70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba74:	4770      	bx	lr
 800ba76:	bf00      	nop
 800ba78:	40023800 	.word	0x40023800
 800ba7c:	40013800 	.word	0x40013800
 800ba80:	40020000 	.word	0x40020000
 800ba84:	40020400 	.word	0x40020400
 800ba88:	40020800 	.word	0x40020800
 800ba8c:	40020c00 	.word	0x40020c00
 800ba90:	40021000 	.word	0x40021000
 800ba94:	40021400 	.word	0x40021400
 800ba98:	40021800 	.word	0x40021800
 800ba9c:	40021c00 	.word	0x40021c00
 800baa0:	40013c00 	.word	0x40013c00

0800baa4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800baa4:	b480      	push	{r7}
 800baa6:	b085      	sub	sp, #20
 800baa8:	af00      	add	r7, sp, #0
 800baaa:	6078      	str	r0, [r7, #4]
 800baac:	460b      	mov	r3, r1
 800baae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	691a      	ldr	r2, [r3, #16]
 800bab4:	887b      	ldrh	r3, [r7, #2]
 800bab6:	4013      	ands	r3, r2
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d002      	beq.n	800bac2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800babc:	2301      	movs	r3, #1
 800babe:	73fb      	strb	r3, [r7, #15]
 800bac0:	e001      	b.n	800bac6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800bac2:	2300      	movs	r3, #0
 800bac4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800bac6:	7bfb      	ldrb	r3, [r7, #15]
}
 800bac8:	4618      	mov	r0, r3
 800baca:	3714      	adds	r7, #20
 800bacc:	46bd      	mov	sp, r7
 800bace:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bad2:	4770      	bx	lr

0800bad4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800bad4:	b480      	push	{r7}
 800bad6:	b083      	sub	sp, #12
 800bad8:	af00      	add	r7, sp, #0
 800bada:	6078      	str	r0, [r7, #4]
 800badc:	460b      	mov	r3, r1
 800bade:	807b      	strh	r3, [r7, #2]
 800bae0:	4613      	mov	r3, r2
 800bae2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800bae4:	787b      	ldrb	r3, [r7, #1]
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	d003      	beq.n	800baf2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800baea:	887a      	ldrh	r2, [r7, #2]
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800baf0:	e003      	b.n	800bafa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800baf2:	887b      	ldrh	r3, [r7, #2]
 800baf4:	041a      	lsls	r2, r3, #16
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	619a      	str	r2, [r3, #24]
}
 800bafa:	bf00      	nop
 800bafc:	370c      	adds	r7, #12
 800bafe:	46bd      	mov	sp, r7
 800bb00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb04:	4770      	bx	lr
	...

0800bb08 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800bb08:	b580      	push	{r7, lr}
 800bb0a:	b082      	sub	sp, #8
 800bb0c:	af00      	add	r7, sp, #0
 800bb0e:	4603      	mov	r3, r0
 800bb10:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800bb12:	4b08      	ldr	r3, [pc, #32]	; (800bb34 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800bb14:	695a      	ldr	r2, [r3, #20]
 800bb16:	88fb      	ldrh	r3, [r7, #6]
 800bb18:	4013      	ands	r3, r2
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	d006      	beq.n	800bb2c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800bb1e:	4a05      	ldr	r2, [pc, #20]	; (800bb34 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800bb20:	88fb      	ldrh	r3, [r7, #6]
 800bb22:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800bb24:	88fb      	ldrh	r3, [r7, #6]
 800bb26:	4618      	mov	r0, r3
 800bb28:	f7f7 fc1a 	bl	8003360 <HAL_GPIO_EXTI_Callback>
  }
}
 800bb2c:	bf00      	nop
 800bb2e:	3708      	adds	r7, #8
 800bb30:	46bd      	mov	sp, r7
 800bb32:	bd80      	pop	{r7, pc}
 800bb34:	40013c00 	.word	0x40013c00

0800bb38 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800bb38:	b580      	push	{r7, lr}
 800bb3a:	b086      	sub	sp, #24
 800bb3c:	af00      	add	r7, sp, #0
 800bb3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d101      	bne.n	800bb4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800bb46:	2301      	movs	r3, #1
 800bb48:	e25b      	b.n	800c002 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	f003 0301 	and.w	r3, r3, #1
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d075      	beq.n	800bc42 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800bb56:	4ba3      	ldr	r3, [pc, #652]	; (800bde4 <HAL_RCC_OscConfig+0x2ac>)
 800bb58:	689b      	ldr	r3, [r3, #8]
 800bb5a:	f003 030c 	and.w	r3, r3, #12
 800bb5e:	2b04      	cmp	r3, #4
 800bb60:	d00c      	beq.n	800bb7c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800bb62:	4ba0      	ldr	r3, [pc, #640]	; (800bde4 <HAL_RCC_OscConfig+0x2ac>)
 800bb64:	689b      	ldr	r3, [r3, #8]
 800bb66:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800bb6a:	2b08      	cmp	r3, #8
 800bb6c:	d112      	bne.n	800bb94 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800bb6e:	4b9d      	ldr	r3, [pc, #628]	; (800bde4 <HAL_RCC_OscConfig+0x2ac>)
 800bb70:	685b      	ldr	r3, [r3, #4]
 800bb72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bb76:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bb7a:	d10b      	bne.n	800bb94 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800bb7c:	4b99      	ldr	r3, [pc, #612]	; (800bde4 <HAL_RCC_OscConfig+0x2ac>)
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d05b      	beq.n	800bc40 <HAL_RCC_OscConfig+0x108>
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	685b      	ldr	r3, [r3, #4]
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d157      	bne.n	800bc40 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800bb90:	2301      	movs	r3, #1
 800bb92:	e236      	b.n	800c002 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	685b      	ldr	r3, [r3, #4]
 800bb98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bb9c:	d106      	bne.n	800bbac <HAL_RCC_OscConfig+0x74>
 800bb9e:	4b91      	ldr	r3, [pc, #580]	; (800bde4 <HAL_RCC_OscConfig+0x2ac>)
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	4a90      	ldr	r2, [pc, #576]	; (800bde4 <HAL_RCC_OscConfig+0x2ac>)
 800bba4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bba8:	6013      	str	r3, [r2, #0]
 800bbaa:	e01d      	b.n	800bbe8 <HAL_RCC_OscConfig+0xb0>
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	685b      	ldr	r3, [r3, #4]
 800bbb0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800bbb4:	d10c      	bne.n	800bbd0 <HAL_RCC_OscConfig+0x98>
 800bbb6:	4b8b      	ldr	r3, [pc, #556]	; (800bde4 <HAL_RCC_OscConfig+0x2ac>)
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	4a8a      	ldr	r2, [pc, #552]	; (800bde4 <HAL_RCC_OscConfig+0x2ac>)
 800bbbc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800bbc0:	6013      	str	r3, [r2, #0]
 800bbc2:	4b88      	ldr	r3, [pc, #544]	; (800bde4 <HAL_RCC_OscConfig+0x2ac>)
 800bbc4:	681b      	ldr	r3, [r3, #0]
 800bbc6:	4a87      	ldr	r2, [pc, #540]	; (800bde4 <HAL_RCC_OscConfig+0x2ac>)
 800bbc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bbcc:	6013      	str	r3, [r2, #0]
 800bbce:	e00b      	b.n	800bbe8 <HAL_RCC_OscConfig+0xb0>
 800bbd0:	4b84      	ldr	r3, [pc, #528]	; (800bde4 <HAL_RCC_OscConfig+0x2ac>)
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	4a83      	ldr	r2, [pc, #524]	; (800bde4 <HAL_RCC_OscConfig+0x2ac>)
 800bbd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bbda:	6013      	str	r3, [r2, #0]
 800bbdc:	4b81      	ldr	r3, [pc, #516]	; (800bde4 <HAL_RCC_OscConfig+0x2ac>)
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	4a80      	ldr	r2, [pc, #512]	; (800bde4 <HAL_RCC_OscConfig+0x2ac>)
 800bbe2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800bbe6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	685b      	ldr	r3, [r3, #4]
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d013      	beq.n	800bc18 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800bbf0:	f7fd fc8c 	bl	800950c <HAL_GetTick>
 800bbf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800bbf6:	e008      	b.n	800bc0a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800bbf8:	f7fd fc88 	bl	800950c <HAL_GetTick>
 800bbfc:	4602      	mov	r2, r0
 800bbfe:	693b      	ldr	r3, [r7, #16]
 800bc00:	1ad3      	subs	r3, r2, r3
 800bc02:	2b64      	cmp	r3, #100	; 0x64
 800bc04:	d901      	bls.n	800bc0a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800bc06:	2303      	movs	r3, #3
 800bc08:	e1fb      	b.n	800c002 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800bc0a:	4b76      	ldr	r3, [pc, #472]	; (800bde4 <HAL_RCC_OscConfig+0x2ac>)
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	d0f0      	beq.n	800bbf8 <HAL_RCC_OscConfig+0xc0>
 800bc16:	e014      	b.n	800bc42 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800bc18:	f7fd fc78 	bl	800950c <HAL_GetTick>
 800bc1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800bc1e:	e008      	b.n	800bc32 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800bc20:	f7fd fc74 	bl	800950c <HAL_GetTick>
 800bc24:	4602      	mov	r2, r0
 800bc26:	693b      	ldr	r3, [r7, #16]
 800bc28:	1ad3      	subs	r3, r2, r3
 800bc2a:	2b64      	cmp	r3, #100	; 0x64
 800bc2c:	d901      	bls.n	800bc32 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800bc2e:	2303      	movs	r3, #3
 800bc30:	e1e7      	b.n	800c002 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800bc32:	4b6c      	ldr	r3, [pc, #432]	; (800bde4 <HAL_RCC_OscConfig+0x2ac>)
 800bc34:	681b      	ldr	r3, [r3, #0]
 800bc36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	d1f0      	bne.n	800bc20 <HAL_RCC_OscConfig+0xe8>
 800bc3e:	e000      	b.n	800bc42 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800bc40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	681b      	ldr	r3, [r3, #0]
 800bc46:	f003 0302 	and.w	r3, r3, #2
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	d063      	beq.n	800bd16 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800bc4e:	4b65      	ldr	r3, [pc, #404]	; (800bde4 <HAL_RCC_OscConfig+0x2ac>)
 800bc50:	689b      	ldr	r3, [r3, #8]
 800bc52:	f003 030c 	and.w	r3, r3, #12
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d00b      	beq.n	800bc72 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800bc5a:	4b62      	ldr	r3, [pc, #392]	; (800bde4 <HAL_RCC_OscConfig+0x2ac>)
 800bc5c:	689b      	ldr	r3, [r3, #8]
 800bc5e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800bc62:	2b08      	cmp	r3, #8
 800bc64:	d11c      	bne.n	800bca0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800bc66:	4b5f      	ldr	r3, [pc, #380]	; (800bde4 <HAL_RCC_OscConfig+0x2ac>)
 800bc68:	685b      	ldr	r3, [r3, #4]
 800bc6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d116      	bne.n	800bca0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800bc72:	4b5c      	ldr	r3, [pc, #368]	; (800bde4 <HAL_RCC_OscConfig+0x2ac>)
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	f003 0302 	and.w	r3, r3, #2
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	d005      	beq.n	800bc8a <HAL_RCC_OscConfig+0x152>
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	68db      	ldr	r3, [r3, #12]
 800bc82:	2b01      	cmp	r3, #1
 800bc84:	d001      	beq.n	800bc8a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800bc86:	2301      	movs	r3, #1
 800bc88:	e1bb      	b.n	800c002 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bc8a:	4b56      	ldr	r3, [pc, #344]	; (800bde4 <HAL_RCC_OscConfig+0x2ac>)
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	691b      	ldr	r3, [r3, #16]
 800bc96:	00db      	lsls	r3, r3, #3
 800bc98:	4952      	ldr	r1, [pc, #328]	; (800bde4 <HAL_RCC_OscConfig+0x2ac>)
 800bc9a:	4313      	orrs	r3, r2
 800bc9c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800bc9e:	e03a      	b.n	800bd16 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	68db      	ldr	r3, [r3, #12]
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	d020      	beq.n	800bcea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800bca8:	4b4f      	ldr	r3, [pc, #316]	; (800bde8 <HAL_RCC_OscConfig+0x2b0>)
 800bcaa:	2201      	movs	r2, #1
 800bcac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bcae:	f7fd fc2d 	bl	800950c <HAL_GetTick>
 800bcb2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800bcb4:	e008      	b.n	800bcc8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800bcb6:	f7fd fc29 	bl	800950c <HAL_GetTick>
 800bcba:	4602      	mov	r2, r0
 800bcbc:	693b      	ldr	r3, [r7, #16]
 800bcbe:	1ad3      	subs	r3, r2, r3
 800bcc0:	2b02      	cmp	r3, #2
 800bcc2:	d901      	bls.n	800bcc8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800bcc4:	2303      	movs	r3, #3
 800bcc6:	e19c      	b.n	800c002 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800bcc8:	4b46      	ldr	r3, [pc, #280]	; (800bde4 <HAL_RCC_OscConfig+0x2ac>)
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	f003 0302 	and.w	r3, r3, #2
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	d0f0      	beq.n	800bcb6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bcd4:	4b43      	ldr	r3, [pc, #268]	; (800bde4 <HAL_RCC_OscConfig+0x2ac>)
 800bcd6:	681b      	ldr	r3, [r3, #0]
 800bcd8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	691b      	ldr	r3, [r3, #16]
 800bce0:	00db      	lsls	r3, r3, #3
 800bce2:	4940      	ldr	r1, [pc, #256]	; (800bde4 <HAL_RCC_OscConfig+0x2ac>)
 800bce4:	4313      	orrs	r3, r2
 800bce6:	600b      	str	r3, [r1, #0]
 800bce8:	e015      	b.n	800bd16 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800bcea:	4b3f      	ldr	r3, [pc, #252]	; (800bde8 <HAL_RCC_OscConfig+0x2b0>)
 800bcec:	2200      	movs	r2, #0
 800bcee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bcf0:	f7fd fc0c 	bl	800950c <HAL_GetTick>
 800bcf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800bcf6:	e008      	b.n	800bd0a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800bcf8:	f7fd fc08 	bl	800950c <HAL_GetTick>
 800bcfc:	4602      	mov	r2, r0
 800bcfe:	693b      	ldr	r3, [r7, #16]
 800bd00:	1ad3      	subs	r3, r2, r3
 800bd02:	2b02      	cmp	r3, #2
 800bd04:	d901      	bls.n	800bd0a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800bd06:	2303      	movs	r3, #3
 800bd08:	e17b      	b.n	800c002 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800bd0a:	4b36      	ldr	r3, [pc, #216]	; (800bde4 <HAL_RCC_OscConfig+0x2ac>)
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	f003 0302 	and.w	r3, r3, #2
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	d1f0      	bne.n	800bcf8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	f003 0308 	and.w	r3, r3, #8
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	d030      	beq.n	800bd84 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	695b      	ldr	r3, [r3, #20]
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d016      	beq.n	800bd58 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800bd2a:	4b30      	ldr	r3, [pc, #192]	; (800bdec <HAL_RCC_OscConfig+0x2b4>)
 800bd2c:	2201      	movs	r2, #1
 800bd2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bd30:	f7fd fbec 	bl	800950c <HAL_GetTick>
 800bd34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800bd36:	e008      	b.n	800bd4a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800bd38:	f7fd fbe8 	bl	800950c <HAL_GetTick>
 800bd3c:	4602      	mov	r2, r0
 800bd3e:	693b      	ldr	r3, [r7, #16]
 800bd40:	1ad3      	subs	r3, r2, r3
 800bd42:	2b02      	cmp	r3, #2
 800bd44:	d901      	bls.n	800bd4a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800bd46:	2303      	movs	r3, #3
 800bd48:	e15b      	b.n	800c002 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800bd4a:	4b26      	ldr	r3, [pc, #152]	; (800bde4 <HAL_RCC_OscConfig+0x2ac>)
 800bd4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bd4e:	f003 0302 	and.w	r3, r3, #2
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d0f0      	beq.n	800bd38 <HAL_RCC_OscConfig+0x200>
 800bd56:	e015      	b.n	800bd84 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800bd58:	4b24      	ldr	r3, [pc, #144]	; (800bdec <HAL_RCC_OscConfig+0x2b4>)
 800bd5a:	2200      	movs	r2, #0
 800bd5c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800bd5e:	f7fd fbd5 	bl	800950c <HAL_GetTick>
 800bd62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800bd64:	e008      	b.n	800bd78 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800bd66:	f7fd fbd1 	bl	800950c <HAL_GetTick>
 800bd6a:	4602      	mov	r2, r0
 800bd6c:	693b      	ldr	r3, [r7, #16]
 800bd6e:	1ad3      	subs	r3, r2, r3
 800bd70:	2b02      	cmp	r3, #2
 800bd72:	d901      	bls.n	800bd78 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800bd74:	2303      	movs	r3, #3
 800bd76:	e144      	b.n	800c002 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800bd78:	4b1a      	ldr	r3, [pc, #104]	; (800bde4 <HAL_RCC_OscConfig+0x2ac>)
 800bd7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bd7c:	f003 0302 	and.w	r3, r3, #2
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	d1f0      	bne.n	800bd66 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	f003 0304 	and.w	r3, r3, #4
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	f000 80a0 	beq.w	800bed2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800bd92:	2300      	movs	r3, #0
 800bd94:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800bd96:	4b13      	ldr	r3, [pc, #76]	; (800bde4 <HAL_RCC_OscConfig+0x2ac>)
 800bd98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d10f      	bne.n	800bdc2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800bda2:	2300      	movs	r3, #0
 800bda4:	60bb      	str	r3, [r7, #8]
 800bda6:	4b0f      	ldr	r3, [pc, #60]	; (800bde4 <HAL_RCC_OscConfig+0x2ac>)
 800bda8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bdaa:	4a0e      	ldr	r2, [pc, #56]	; (800bde4 <HAL_RCC_OscConfig+0x2ac>)
 800bdac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bdb0:	6413      	str	r3, [r2, #64]	; 0x40
 800bdb2:	4b0c      	ldr	r3, [pc, #48]	; (800bde4 <HAL_RCC_OscConfig+0x2ac>)
 800bdb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bdb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bdba:	60bb      	str	r3, [r7, #8]
 800bdbc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800bdbe:	2301      	movs	r3, #1
 800bdc0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800bdc2:	4b0b      	ldr	r3, [pc, #44]	; (800bdf0 <HAL_RCC_OscConfig+0x2b8>)
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	d121      	bne.n	800be12 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800bdce:	4b08      	ldr	r3, [pc, #32]	; (800bdf0 <HAL_RCC_OscConfig+0x2b8>)
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	4a07      	ldr	r2, [pc, #28]	; (800bdf0 <HAL_RCC_OscConfig+0x2b8>)
 800bdd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bdd8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800bdda:	f7fd fb97 	bl	800950c <HAL_GetTick>
 800bdde:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800bde0:	e011      	b.n	800be06 <HAL_RCC_OscConfig+0x2ce>
 800bde2:	bf00      	nop
 800bde4:	40023800 	.word	0x40023800
 800bde8:	42470000 	.word	0x42470000
 800bdec:	42470e80 	.word	0x42470e80
 800bdf0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bdf4:	f7fd fb8a 	bl	800950c <HAL_GetTick>
 800bdf8:	4602      	mov	r2, r0
 800bdfa:	693b      	ldr	r3, [r7, #16]
 800bdfc:	1ad3      	subs	r3, r2, r3
 800bdfe:	2b02      	cmp	r3, #2
 800be00:	d901      	bls.n	800be06 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800be02:	2303      	movs	r3, #3
 800be04:	e0fd      	b.n	800c002 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800be06:	4b81      	ldr	r3, [pc, #516]	; (800c00c <HAL_RCC_OscConfig+0x4d4>)
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800be0e:	2b00      	cmp	r3, #0
 800be10:	d0f0      	beq.n	800bdf4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	689b      	ldr	r3, [r3, #8]
 800be16:	2b01      	cmp	r3, #1
 800be18:	d106      	bne.n	800be28 <HAL_RCC_OscConfig+0x2f0>
 800be1a:	4b7d      	ldr	r3, [pc, #500]	; (800c010 <HAL_RCC_OscConfig+0x4d8>)
 800be1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800be1e:	4a7c      	ldr	r2, [pc, #496]	; (800c010 <HAL_RCC_OscConfig+0x4d8>)
 800be20:	f043 0301 	orr.w	r3, r3, #1
 800be24:	6713      	str	r3, [r2, #112]	; 0x70
 800be26:	e01c      	b.n	800be62 <HAL_RCC_OscConfig+0x32a>
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	689b      	ldr	r3, [r3, #8]
 800be2c:	2b05      	cmp	r3, #5
 800be2e:	d10c      	bne.n	800be4a <HAL_RCC_OscConfig+0x312>
 800be30:	4b77      	ldr	r3, [pc, #476]	; (800c010 <HAL_RCC_OscConfig+0x4d8>)
 800be32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800be34:	4a76      	ldr	r2, [pc, #472]	; (800c010 <HAL_RCC_OscConfig+0x4d8>)
 800be36:	f043 0304 	orr.w	r3, r3, #4
 800be3a:	6713      	str	r3, [r2, #112]	; 0x70
 800be3c:	4b74      	ldr	r3, [pc, #464]	; (800c010 <HAL_RCC_OscConfig+0x4d8>)
 800be3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800be40:	4a73      	ldr	r2, [pc, #460]	; (800c010 <HAL_RCC_OscConfig+0x4d8>)
 800be42:	f043 0301 	orr.w	r3, r3, #1
 800be46:	6713      	str	r3, [r2, #112]	; 0x70
 800be48:	e00b      	b.n	800be62 <HAL_RCC_OscConfig+0x32a>
 800be4a:	4b71      	ldr	r3, [pc, #452]	; (800c010 <HAL_RCC_OscConfig+0x4d8>)
 800be4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800be4e:	4a70      	ldr	r2, [pc, #448]	; (800c010 <HAL_RCC_OscConfig+0x4d8>)
 800be50:	f023 0301 	bic.w	r3, r3, #1
 800be54:	6713      	str	r3, [r2, #112]	; 0x70
 800be56:	4b6e      	ldr	r3, [pc, #440]	; (800c010 <HAL_RCC_OscConfig+0x4d8>)
 800be58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800be5a:	4a6d      	ldr	r2, [pc, #436]	; (800c010 <HAL_RCC_OscConfig+0x4d8>)
 800be5c:	f023 0304 	bic.w	r3, r3, #4
 800be60:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	689b      	ldr	r3, [r3, #8]
 800be66:	2b00      	cmp	r3, #0
 800be68:	d015      	beq.n	800be96 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800be6a:	f7fd fb4f 	bl	800950c <HAL_GetTick>
 800be6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800be70:	e00a      	b.n	800be88 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800be72:	f7fd fb4b 	bl	800950c <HAL_GetTick>
 800be76:	4602      	mov	r2, r0
 800be78:	693b      	ldr	r3, [r7, #16]
 800be7a:	1ad3      	subs	r3, r2, r3
 800be7c:	f241 3288 	movw	r2, #5000	; 0x1388
 800be80:	4293      	cmp	r3, r2
 800be82:	d901      	bls.n	800be88 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800be84:	2303      	movs	r3, #3
 800be86:	e0bc      	b.n	800c002 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800be88:	4b61      	ldr	r3, [pc, #388]	; (800c010 <HAL_RCC_OscConfig+0x4d8>)
 800be8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800be8c:	f003 0302 	and.w	r3, r3, #2
 800be90:	2b00      	cmp	r3, #0
 800be92:	d0ee      	beq.n	800be72 <HAL_RCC_OscConfig+0x33a>
 800be94:	e014      	b.n	800bec0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800be96:	f7fd fb39 	bl	800950c <HAL_GetTick>
 800be9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800be9c:	e00a      	b.n	800beb4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800be9e:	f7fd fb35 	bl	800950c <HAL_GetTick>
 800bea2:	4602      	mov	r2, r0
 800bea4:	693b      	ldr	r3, [r7, #16]
 800bea6:	1ad3      	subs	r3, r2, r3
 800bea8:	f241 3288 	movw	r2, #5000	; 0x1388
 800beac:	4293      	cmp	r3, r2
 800beae:	d901      	bls.n	800beb4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800beb0:	2303      	movs	r3, #3
 800beb2:	e0a6      	b.n	800c002 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800beb4:	4b56      	ldr	r3, [pc, #344]	; (800c010 <HAL_RCC_OscConfig+0x4d8>)
 800beb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800beb8:	f003 0302 	and.w	r3, r3, #2
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	d1ee      	bne.n	800be9e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800bec0:	7dfb      	ldrb	r3, [r7, #23]
 800bec2:	2b01      	cmp	r3, #1
 800bec4:	d105      	bne.n	800bed2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800bec6:	4b52      	ldr	r3, [pc, #328]	; (800c010 <HAL_RCC_OscConfig+0x4d8>)
 800bec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800beca:	4a51      	ldr	r2, [pc, #324]	; (800c010 <HAL_RCC_OscConfig+0x4d8>)
 800becc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bed0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	699b      	ldr	r3, [r3, #24]
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	f000 8092 	beq.w	800c000 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800bedc:	4b4c      	ldr	r3, [pc, #304]	; (800c010 <HAL_RCC_OscConfig+0x4d8>)
 800bede:	689b      	ldr	r3, [r3, #8]
 800bee0:	f003 030c 	and.w	r3, r3, #12
 800bee4:	2b08      	cmp	r3, #8
 800bee6:	d05c      	beq.n	800bfa2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	699b      	ldr	r3, [r3, #24]
 800beec:	2b02      	cmp	r3, #2
 800beee:	d141      	bne.n	800bf74 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800bef0:	4b48      	ldr	r3, [pc, #288]	; (800c014 <HAL_RCC_OscConfig+0x4dc>)
 800bef2:	2200      	movs	r2, #0
 800bef4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800bef6:	f7fd fb09 	bl	800950c <HAL_GetTick>
 800befa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800befc:	e008      	b.n	800bf10 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800befe:	f7fd fb05 	bl	800950c <HAL_GetTick>
 800bf02:	4602      	mov	r2, r0
 800bf04:	693b      	ldr	r3, [r7, #16]
 800bf06:	1ad3      	subs	r3, r2, r3
 800bf08:	2b02      	cmp	r3, #2
 800bf0a:	d901      	bls.n	800bf10 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800bf0c:	2303      	movs	r3, #3
 800bf0e:	e078      	b.n	800c002 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800bf10:	4b3f      	ldr	r3, [pc, #252]	; (800c010 <HAL_RCC_OscConfig+0x4d8>)
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d1f0      	bne.n	800befe <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	69da      	ldr	r2, [r3, #28]
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	6a1b      	ldr	r3, [r3, #32]
 800bf24:	431a      	orrs	r2, r3
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf2a:	019b      	lsls	r3, r3, #6
 800bf2c:	431a      	orrs	r2, r3
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf32:	085b      	lsrs	r3, r3, #1
 800bf34:	3b01      	subs	r3, #1
 800bf36:	041b      	lsls	r3, r3, #16
 800bf38:	431a      	orrs	r2, r3
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf3e:	061b      	lsls	r3, r3, #24
 800bf40:	4933      	ldr	r1, [pc, #204]	; (800c010 <HAL_RCC_OscConfig+0x4d8>)
 800bf42:	4313      	orrs	r3, r2
 800bf44:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800bf46:	4b33      	ldr	r3, [pc, #204]	; (800c014 <HAL_RCC_OscConfig+0x4dc>)
 800bf48:	2201      	movs	r2, #1
 800bf4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800bf4c:	f7fd fade 	bl	800950c <HAL_GetTick>
 800bf50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800bf52:	e008      	b.n	800bf66 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800bf54:	f7fd fada 	bl	800950c <HAL_GetTick>
 800bf58:	4602      	mov	r2, r0
 800bf5a:	693b      	ldr	r3, [r7, #16]
 800bf5c:	1ad3      	subs	r3, r2, r3
 800bf5e:	2b02      	cmp	r3, #2
 800bf60:	d901      	bls.n	800bf66 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800bf62:	2303      	movs	r3, #3
 800bf64:	e04d      	b.n	800c002 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800bf66:	4b2a      	ldr	r3, [pc, #168]	; (800c010 <HAL_RCC_OscConfig+0x4d8>)
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d0f0      	beq.n	800bf54 <HAL_RCC_OscConfig+0x41c>
 800bf72:	e045      	b.n	800c000 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800bf74:	4b27      	ldr	r3, [pc, #156]	; (800c014 <HAL_RCC_OscConfig+0x4dc>)
 800bf76:	2200      	movs	r2, #0
 800bf78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800bf7a:	f7fd fac7 	bl	800950c <HAL_GetTick>
 800bf7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800bf80:	e008      	b.n	800bf94 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800bf82:	f7fd fac3 	bl	800950c <HAL_GetTick>
 800bf86:	4602      	mov	r2, r0
 800bf88:	693b      	ldr	r3, [r7, #16]
 800bf8a:	1ad3      	subs	r3, r2, r3
 800bf8c:	2b02      	cmp	r3, #2
 800bf8e:	d901      	bls.n	800bf94 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800bf90:	2303      	movs	r3, #3
 800bf92:	e036      	b.n	800c002 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800bf94:	4b1e      	ldr	r3, [pc, #120]	; (800c010 <HAL_RCC_OscConfig+0x4d8>)
 800bf96:	681b      	ldr	r3, [r3, #0]
 800bf98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	d1f0      	bne.n	800bf82 <HAL_RCC_OscConfig+0x44a>
 800bfa0:	e02e      	b.n	800c000 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	699b      	ldr	r3, [r3, #24]
 800bfa6:	2b01      	cmp	r3, #1
 800bfa8:	d101      	bne.n	800bfae <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800bfaa:	2301      	movs	r3, #1
 800bfac:	e029      	b.n	800c002 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800bfae:	4b18      	ldr	r3, [pc, #96]	; (800c010 <HAL_RCC_OscConfig+0x4d8>)
 800bfb0:	685b      	ldr	r3, [r3, #4]
 800bfb2:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800bfb4:	68fb      	ldr	r3, [r7, #12]
 800bfb6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	69db      	ldr	r3, [r3, #28]
 800bfbe:	429a      	cmp	r2, r3
 800bfc0:	d11c      	bne.n	800bffc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800bfc2:	68fb      	ldr	r3, [r7, #12]
 800bfc4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800bfcc:	429a      	cmp	r2, r3
 800bfce:	d115      	bne.n	800bffc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800bfd0:	68fa      	ldr	r2, [r7, #12]
 800bfd2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800bfd6:	4013      	ands	r3, r2
 800bfd8:	687a      	ldr	r2, [r7, #4]
 800bfda:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800bfdc:	4293      	cmp	r3, r2
 800bfde:	d10d      	bne.n	800bffc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800bfea:	429a      	cmp	r2, r3
 800bfec:	d106      	bne.n	800bffc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800bfee:	68fb      	ldr	r3, [r7, #12]
 800bff0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800bff8:	429a      	cmp	r2, r3
 800bffa:	d001      	beq.n	800c000 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800bffc:	2301      	movs	r3, #1
 800bffe:	e000      	b.n	800c002 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800c000:	2300      	movs	r3, #0
}
 800c002:	4618      	mov	r0, r3
 800c004:	3718      	adds	r7, #24
 800c006:	46bd      	mov	sp, r7
 800c008:	bd80      	pop	{r7, pc}
 800c00a:	bf00      	nop
 800c00c:	40007000 	.word	0x40007000
 800c010:	40023800 	.word	0x40023800
 800c014:	42470060 	.word	0x42470060

0800c018 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800c018:	b580      	push	{r7, lr}
 800c01a:	b084      	sub	sp, #16
 800c01c:	af00      	add	r7, sp, #0
 800c01e:	6078      	str	r0, [r7, #4]
 800c020:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	2b00      	cmp	r3, #0
 800c026:	d101      	bne.n	800c02c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800c028:	2301      	movs	r3, #1
 800c02a:	e0cc      	b.n	800c1c6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800c02c:	4b68      	ldr	r3, [pc, #416]	; (800c1d0 <HAL_RCC_ClockConfig+0x1b8>)
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	f003 030f 	and.w	r3, r3, #15
 800c034:	683a      	ldr	r2, [r7, #0]
 800c036:	429a      	cmp	r2, r3
 800c038:	d90c      	bls.n	800c054 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c03a:	4b65      	ldr	r3, [pc, #404]	; (800c1d0 <HAL_RCC_ClockConfig+0x1b8>)
 800c03c:	683a      	ldr	r2, [r7, #0]
 800c03e:	b2d2      	uxtb	r2, r2
 800c040:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800c042:	4b63      	ldr	r3, [pc, #396]	; (800c1d0 <HAL_RCC_ClockConfig+0x1b8>)
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	f003 030f 	and.w	r3, r3, #15
 800c04a:	683a      	ldr	r2, [r7, #0]
 800c04c:	429a      	cmp	r2, r3
 800c04e:	d001      	beq.n	800c054 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800c050:	2301      	movs	r3, #1
 800c052:	e0b8      	b.n	800c1c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	f003 0302 	and.w	r3, r3, #2
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d020      	beq.n	800c0a2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	f003 0304 	and.w	r3, r3, #4
 800c068:	2b00      	cmp	r3, #0
 800c06a:	d005      	beq.n	800c078 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800c06c:	4b59      	ldr	r3, [pc, #356]	; (800c1d4 <HAL_RCC_ClockConfig+0x1bc>)
 800c06e:	689b      	ldr	r3, [r3, #8]
 800c070:	4a58      	ldr	r2, [pc, #352]	; (800c1d4 <HAL_RCC_ClockConfig+0x1bc>)
 800c072:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800c076:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	f003 0308 	and.w	r3, r3, #8
 800c080:	2b00      	cmp	r3, #0
 800c082:	d005      	beq.n	800c090 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800c084:	4b53      	ldr	r3, [pc, #332]	; (800c1d4 <HAL_RCC_ClockConfig+0x1bc>)
 800c086:	689b      	ldr	r3, [r3, #8]
 800c088:	4a52      	ldr	r2, [pc, #328]	; (800c1d4 <HAL_RCC_ClockConfig+0x1bc>)
 800c08a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800c08e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c090:	4b50      	ldr	r3, [pc, #320]	; (800c1d4 <HAL_RCC_ClockConfig+0x1bc>)
 800c092:	689b      	ldr	r3, [r3, #8]
 800c094:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	689b      	ldr	r3, [r3, #8]
 800c09c:	494d      	ldr	r1, [pc, #308]	; (800c1d4 <HAL_RCC_ClockConfig+0x1bc>)
 800c09e:	4313      	orrs	r3, r2
 800c0a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	681b      	ldr	r3, [r3, #0]
 800c0a6:	f003 0301 	and.w	r3, r3, #1
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d044      	beq.n	800c138 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	685b      	ldr	r3, [r3, #4]
 800c0b2:	2b01      	cmp	r3, #1
 800c0b4:	d107      	bne.n	800c0c6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c0b6:	4b47      	ldr	r3, [pc, #284]	; (800c1d4 <HAL_RCC_ClockConfig+0x1bc>)
 800c0b8:	681b      	ldr	r3, [r3, #0]
 800c0ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d119      	bne.n	800c0f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c0c2:	2301      	movs	r3, #1
 800c0c4:	e07f      	b.n	800c1c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	685b      	ldr	r3, [r3, #4]
 800c0ca:	2b02      	cmp	r3, #2
 800c0cc:	d003      	beq.n	800c0d6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800c0d2:	2b03      	cmp	r3, #3
 800c0d4:	d107      	bne.n	800c0e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c0d6:	4b3f      	ldr	r3, [pc, #252]	; (800c1d4 <HAL_RCC_ClockConfig+0x1bc>)
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	d109      	bne.n	800c0f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c0e2:	2301      	movs	r3, #1
 800c0e4:	e06f      	b.n	800c1c6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c0e6:	4b3b      	ldr	r3, [pc, #236]	; (800c1d4 <HAL_RCC_ClockConfig+0x1bc>)
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	f003 0302 	and.w	r3, r3, #2
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	d101      	bne.n	800c0f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c0f2:	2301      	movs	r3, #1
 800c0f4:	e067      	b.n	800c1c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800c0f6:	4b37      	ldr	r3, [pc, #220]	; (800c1d4 <HAL_RCC_ClockConfig+0x1bc>)
 800c0f8:	689b      	ldr	r3, [r3, #8]
 800c0fa:	f023 0203 	bic.w	r2, r3, #3
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	685b      	ldr	r3, [r3, #4]
 800c102:	4934      	ldr	r1, [pc, #208]	; (800c1d4 <HAL_RCC_ClockConfig+0x1bc>)
 800c104:	4313      	orrs	r3, r2
 800c106:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800c108:	f7fd fa00 	bl	800950c <HAL_GetTick>
 800c10c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c10e:	e00a      	b.n	800c126 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c110:	f7fd f9fc 	bl	800950c <HAL_GetTick>
 800c114:	4602      	mov	r2, r0
 800c116:	68fb      	ldr	r3, [r7, #12]
 800c118:	1ad3      	subs	r3, r2, r3
 800c11a:	f241 3288 	movw	r2, #5000	; 0x1388
 800c11e:	4293      	cmp	r3, r2
 800c120:	d901      	bls.n	800c126 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800c122:	2303      	movs	r3, #3
 800c124:	e04f      	b.n	800c1c6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c126:	4b2b      	ldr	r3, [pc, #172]	; (800c1d4 <HAL_RCC_ClockConfig+0x1bc>)
 800c128:	689b      	ldr	r3, [r3, #8]
 800c12a:	f003 020c 	and.w	r2, r3, #12
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	685b      	ldr	r3, [r3, #4]
 800c132:	009b      	lsls	r3, r3, #2
 800c134:	429a      	cmp	r2, r3
 800c136:	d1eb      	bne.n	800c110 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800c138:	4b25      	ldr	r3, [pc, #148]	; (800c1d0 <HAL_RCC_ClockConfig+0x1b8>)
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	f003 030f 	and.w	r3, r3, #15
 800c140:	683a      	ldr	r2, [r7, #0]
 800c142:	429a      	cmp	r2, r3
 800c144:	d20c      	bcs.n	800c160 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c146:	4b22      	ldr	r3, [pc, #136]	; (800c1d0 <HAL_RCC_ClockConfig+0x1b8>)
 800c148:	683a      	ldr	r2, [r7, #0]
 800c14a:	b2d2      	uxtb	r2, r2
 800c14c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800c14e:	4b20      	ldr	r3, [pc, #128]	; (800c1d0 <HAL_RCC_ClockConfig+0x1b8>)
 800c150:	681b      	ldr	r3, [r3, #0]
 800c152:	f003 030f 	and.w	r3, r3, #15
 800c156:	683a      	ldr	r2, [r7, #0]
 800c158:	429a      	cmp	r2, r3
 800c15a:	d001      	beq.n	800c160 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800c15c:	2301      	movs	r3, #1
 800c15e:	e032      	b.n	800c1c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	681b      	ldr	r3, [r3, #0]
 800c164:	f003 0304 	and.w	r3, r3, #4
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d008      	beq.n	800c17e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800c16c:	4b19      	ldr	r3, [pc, #100]	; (800c1d4 <HAL_RCC_ClockConfig+0x1bc>)
 800c16e:	689b      	ldr	r3, [r3, #8]
 800c170:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	68db      	ldr	r3, [r3, #12]
 800c178:	4916      	ldr	r1, [pc, #88]	; (800c1d4 <HAL_RCC_ClockConfig+0x1bc>)
 800c17a:	4313      	orrs	r3, r2
 800c17c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	f003 0308 	and.w	r3, r3, #8
 800c186:	2b00      	cmp	r3, #0
 800c188:	d009      	beq.n	800c19e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800c18a:	4b12      	ldr	r3, [pc, #72]	; (800c1d4 <HAL_RCC_ClockConfig+0x1bc>)
 800c18c:	689b      	ldr	r3, [r3, #8]
 800c18e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	691b      	ldr	r3, [r3, #16]
 800c196:	00db      	lsls	r3, r3, #3
 800c198:	490e      	ldr	r1, [pc, #56]	; (800c1d4 <HAL_RCC_ClockConfig+0x1bc>)
 800c19a:	4313      	orrs	r3, r2
 800c19c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800c19e:	f000 f821 	bl	800c1e4 <HAL_RCC_GetSysClockFreq>
 800c1a2:	4602      	mov	r2, r0
 800c1a4:	4b0b      	ldr	r3, [pc, #44]	; (800c1d4 <HAL_RCC_ClockConfig+0x1bc>)
 800c1a6:	689b      	ldr	r3, [r3, #8]
 800c1a8:	091b      	lsrs	r3, r3, #4
 800c1aa:	f003 030f 	and.w	r3, r3, #15
 800c1ae:	490a      	ldr	r1, [pc, #40]	; (800c1d8 <HAL_RCC_ClockConfig+0x1c0>)
 800c1b0:	5ccb      	ldrb	r3, [r1, r3]
 800c1b2:	fa22 f303 	lsr.w	r3, r2, r3
 800c1b6:	4a09      	ldr	r2, [pc, #36]	; (800c1dc <HAL_RCC_ClockConfig+0x1c4>)
 800c1b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800c1ba:	4b09      	ldr	r3, [pc, #36]	; (800c1e0 <HAL_RCC_ClockConfig+0x1c8>)
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	4618      	mov	r0, r3
 800c1c0:	f7f7 faa2 	bl	8003708 <HAL_InitTick>

  return HAL_OK;
 800c1c4:	2300      	movs	r3, #0
}
 800c1c6:	4618      	mov	r0, r3
 800c1c8:	3710      	adds	r7, #16
 800c1ca:	46bd      	mov	sp, r7
 800c1cc:	bd80      	pop	{r7, pc}
 800c1ce:	bf00      	nop
 800c1d0:	40023c00 	.word	0x40023c00
 800c1d4:	40023800 	.word	0x40023800
 800c1d8:	080238f0 	.word	0x080238f0
 800c1dc:	20000008 	.word	0x20000008
 800c1e0:	20000070 	.word	0x20000070

0800c1e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c1e4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800c1e8:	b084      	sub	sp, #16
 800c1ea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800c1ec:	2300      	movs	r3, #0
 800c1ee:	607b      	str	r3, [r7, #4]
 800c1f0:	2300      	movs	r3, #0
 800c1f2:	60fb      	str	r3, [r7, #12]
 800c1f4:	2300      	movs	r3, #0
 800c1f6:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800c1f8:	2300      	movs	r3, #0
 800c1fa:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800c1fc:	4b67      	ldr	r3, [pc, #412]	; (800c39c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800c1fe:	689b      	ldr	r3, [r3, #8]
 800c200:	f003 030c 	and.w	r3, r3, #12
 800c204:	2b08      	cmp	r3, #8
 800c206:	d00d      	beq.n	800c224 <HAL_RCC_GetSysClockFreq+0x40>
 800c208:	2b08      	cmp	r3, #8
 800c20a:	f200 80bd 	bhi.w	800c388 <HAL_RCC_GetSysClockFreq+0x1a4>
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d002      	beq.n	800c218 <HAL_RCC_GetSysClockFreq+0x34>
 800c212:	2b04      	cmp	r3, #4
 800c214:	d003      	beq.n	800c21e <HAL_RCC_GetSysClockFreq+0x3a>
 800c216:	e0b7      	b.n	800c388 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800c218:	4b61      	ldr	r3, [pc, #388]	; (800c3a0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800c21a:	60bb      	str	r3, [r7, #8]
       break;
 800c21c:	e0b7      	b.n	800c38e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800c21e:	4b61      	ldr	r3, [pc, #388]	; (800c3a4 <HAL_RCC_GetSysClockFreq+0x1c0>)
 800c220:	60bb      	str	r3, [r7, #8]
      break;
 800c222:	e0b4      	b.n	800c38e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800c224:	4b5d      	ldr	r3, [pc, #372]	; (800c39c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800c226:	685b      	ldr	r3, [r3, #4]
 800c228:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c22c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800c22e:	4b5b      	ldr	r3, [pc, #364]	; (800c39c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800c230:	685b      	ldr	r3, [r3, #4]
 800c232:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c236:	2b00      	cmp	r3, #0
 800c238:	d04d      	beq.n	800c2d6 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c23a:	4b58      	ldr	r3, [pc, #352]	; (800c39c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800c23c:	685b      	ldr	r3, [r3, #4]
 800c23e:	099b      	lsrs	r3, r3, #6
 800c240:	461a      	mov	r2, r3
 800c242:	f04f 0300 	mov.w	r3, #0
 800c246:	f240 10ff 	movw	r0, #511	; 0x1ff
 800c24a:	f04f 0100 	mov.w	r1, #0
 800c24e:	ea02 0800 	and.w	r8, r2, r0
 800c252:	ea03 0901 	and.w	r9, r3, r1
 800c256:	4640      	mov	r0, r8
 800c258:	4649      	mov	r1, r9
 800c25a:	f04f 0200 	mov.w	r2, #0
 800c25e:	f04f 0300 	mov.w	r3, #0
 800c262:	014b      	lsls	r3, r1, #5
 800c264:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800c268:	0142      	lsls	r2, r0, #5
 800c26a:	4610      	mov	r0, r2
 800c26c:	4619      	mov	r1, r3
 800c26e:	ebb0 0008 	subs.w	r0, r0, r8
 800c272:	eb61 0109 	sbc.w	r1, r1, r9
 800c276:	f04f 0200 	mov.w	r2, #0
 800c27a:	f04f 0300 	mov.w	r3, #0
 800c27e:	018b      	lsls	r3, r1, #6
 800c280:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800c284:	0182      	lsls	r2, r0, #6
 800c286:	1a12      	subs	r2, r2, r0
 800c288:	eb63 0301 	sbc.w	r3, r3, r1
 800c28c:	f04f 0000 	mov.w	r0, #0
 800c290:	f04f 0100 	mov.w	r1, #0
 800c294:	00d9      	lsls	r1, r3, #3
 800c296:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800c29a:	00d0      	lsls	r0, r2, #3
 800c29c:	4602      	mov	r2, r0
 800c29e:	460b      	mov	r3, r1
 800c2a0:	eb12 0208 	adds.w	r2, r2, r8
 800c2a4:	eb43 0309 	adc.w	r3, r3, r9
 800c2a8:	f04f 0000 	mov.w	r0, #0
 800c2ac:	f04f 0100 	mov.w	r1, #0
 800c2b0:	0259      	lsls	r1, r3, #9
 800c2b2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800c2b6:	0250      	lsls	r0, r2, #9
 800c2b8:	4602      	mov	r2, r0
 800c2ba:	460b      	mov	r3, r1
 800c2bc:	4610      	mov	r0, r2
 800c2be:	4619      	mov	r1, r3
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	461a      	mov	r2, r3
 800c2c4:	f04f 0300 	mov.w	r3, #0
 800c2c8:	f7f4 fcee 	bl	8000ca8 <__aeabi_uldivmod>
 800c2cc:	4602      	mov	r2, r0
 800c2ce:	460b      	mov	r3, r1
 800c2d0:	4613      	mov	r3, r2
 800c2d2:	60fb      	str	r3, [r7, #12]
 800c2d4:	e04a      	b.n	800c36c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c2d6:	4b31      	ldr	r3, [pc, #196]	; (800c39c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800c2d8:	685b      	ldr	r3, [r3, #4]
 800c2da:	099b      	lsrs	r3, r3, #6
 800c2dc:	461a      	mov	r2, r3
 800c2de:	f04f 0300 	mov.w	r3, #0
 800c2e2:	f240 10ff 	movw	r0, #511	; 0x1ff
 800c2e6:	f04f 0100 	mov.w	r1, #0
 800c2ea:	ea02 0400 	and.w	r4, r2, r0
 800c2ee:	ea03 0501 	and.w	r5, r3, r1
 800c2f2:	4620      	mov	r0, r4
 800c2f4:	4629      	mov	r1, r5
 800c2f6:	f04f 0200 	mov.w	r2, #0
 800c2fa:	f04f 0300 	mov.w	r3, #0
 800c2fe:	014b      	lsls	r3, r1, #5
 800c300:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800c304:	0142      	lsls	r2, r0, #5
 800c306:	4610      	mov	r0, r2
 800c308:	4619      	mov	r1, r3
 800c30a:	1b00      	subs	r0, r0, r4
 800c30c:	eb61 0105 	sbc.w	r1, r1, r5
 800c310:	f04f 0200 	mov.w	r2, #0
 800c314:	f04f 0300 	mov.w	r3, #0
 800c318:	018b      	lsls	r3, r1, #6
 800c31a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800c31e:	0182      	lsls	r2, r0, #6
 800c320:	1a12      	subs	r2, r2, r0
 800c322:	eb63 0301 	sbc.w	r3, r3, r1
 800c326:	f04f 0000 	mov.w	r0, #0
 800c32a:	f04f 0100 	mov.w	r1, #0
 800c32e:	00d9      	lsls	r1, r3, #3
 800c330:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800c334:	00d0      	lsls	r0, r2, #3
 800c336:	4602      	mov	r2, r0
 800c338:	460b      	mov	r3, r1
 800c33a:	1912      	adds	r2, r2, r4
 800c33c:	eb45 0303 	adc.w	r3, r5, r3
 800c340:	f04f 0000 	mov.w	r0, #0
 800c344:	f04f 0100 	mov.w	r1, #0
 800c348:	0299      	lsls	r1, r3, #10
 800c34a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800c34e:	0290      	lsls	r0, r2, #10
 800c350:	4602      	mov	r2, r0
 800c352:	460b      	mov	r3, r1
 800c354:	4610      	mov	r0, r2
 800c356:	4619      	mov	r1, r3
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	461a      	mov	r2, r3
 800c35c:	f04f 0300 	mov.w	r3, #0
 800c360:	f7f4 fca2 	bl	8000ca8 <__aeabi_uldivmod>
 800c364:	4602      	mov	r2, r0
 800c366:	460b      	mov	r3, r1
 800c368:	4613      	mov	r3, r2
 800c36a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800c36c:	4b0b      	ldr	r3, [pc, #44]	; (800c39c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800c36e:	685b      	ldr	r3, [r3, #4]
 800c370:	0c1b      	lsrs	r3, r3, #16
 800c372:	f003 0303 	and.w	r3, r3, #3
 800c376:	3301      	adds	r3, #1
 800c378:	005b      	lsls	r3, r3, #1
 800c37a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800c37c:	68fa      	ldr	r2, [r7, #12]
 800c37e:	683b      	ldr	r3, [r7, #0]
 800c380:	fbb2 f3f3 	udiv	r3, r2, r3
 800c384:	60bb      	str	r3, [r7, #8]
      break;
 800c386:	e002      	b.n	800c38e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800c388:	4b05      	ldr	r3, [pc, #20]	; (800c3a0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800c38a:	60bb      	str	r3, [r7, #8]
      break;
 800c38c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800c38e:	68bb      	ldr	r3, [r7, #8]
}
 800c390:	4618      	mov	r0, r3
 800c392:	3710      	adds	r7, #16
 800c394:	46bd      	mov	sp, r7
 800c396:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800c39a:	bf00      	nop
 800c39c:	40023800 	.word	0x40023800
 800c3a0:	00f42400 	.word	0x00f42400
 800c3a4:	007a1200 	.word	0x007a1200

0800c3a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c3a8:	b480      	push	{r7}
 800c3aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800c3ac:	4b03      	ldr	r3, [pc, #12]	; (800c3bc <HAL_RCC_GetHCLKFreq+0x14>)
 800c3ae:	681b      	ldr	r3, [r3, #0]
}
 800c3b0:	4618      	mov	r0, r3
 800c3b2:	46bd      	mov	sp, r7
 800c3b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3b8:	4770      	bx	lr
 800c3ba:	bf00      	nop
 800c3bc:	20000008 	.word	0x20000008

0800c3c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c3c0:	b580      	push	{r7, lr}
 800c3c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800c3c4:	f7ff fff0 	bl	800c3a8 <HAL_RCC_GetHCLKFreq>
 800c3c8:	4602      	mov	r2, r0
 800c3ca:	4b05      	ldr	r3, [pc, #20]	; (800c3e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800c3cc:	689b      	ldr	r3, [r3, #8]
 800c3ce:	0a9b      	lsrs	r3, r3, #10
 800c3d0:	f003 0307 	and.w	r3, r3, #7
 800c3d4:	4903      	ldr	r1, [pc, #12]	; (800c3e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800c3d6:	5ccb      	ldrb	r3, [r1, r3]
 800c3d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 800c3dc:	4618      	mov	r0, r3
 800c3de:	bd80      	pop	{r7, pc}
 800c3e0:	40023800 	.word	0x40023800
 800c3e4:	08023900 	.word	0x08023900

0800c3e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800c3e8:	b580      	push	{r7, lr}
 800c3ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800c3ec:	f7ff ffdc 	bl	800c3a8 <HAL_RCC_GetHCLKFreq>
 800c3f0:	4602      	mov	r2, r0
 800c3f2:	4b05      	ldr	r3, [pc, #20]	; (800c408 <HAL_RCC_GetPCLK2Freq+0x20>)
 800c3f4:	689b      	ldr	r3, [r3, #8]
 800c3f6:	0b5b      	lsrs	r3, r3, #13
 800c3f8:	f003 0307 	and.w	r3, r3, #7
 800c3fc:	4903      	ldr	r1, [pc, #12]	; (800c40c <HAL_RCC_GetPCLK2Freq+0x24>)
 800c3fe:	5ccb      	ldrb	r3, [r1, r3]
 800c400:	fa22 f303 	lsr.w	r3, r2, r3
}
 800c404:	4618      	mov	r0, r3
 800c406:	bd80      	pop	{r7, pc}
 800c408:	40023800 	.word	0x40023800
 800c40c:	08023900 	.word	0x08023900

0800c410 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800c410:	b480      	push	{r7}
 800c412:	b083      	sub	sp, #12
 800c414:	af00      	add	r7, sp, #0
 800c416:	6078      	str	r0, [r7, #4]
 800c418:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	220f      	movs	r2, #15
 800c41e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800c420:	4b12      	ldr	r3, [pc, #72]	; (800c46c <HAL_RCC_GetClockConfig+0x5c>)
 800c422:	689b      	ldr	r3, [r3, #8]
 800c424:	f003 0203 	and.w	r2, r3, #3
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800c42c:	4b0f      	ldr	r3, [pc, #60]	; (800c46c <HAL_RCC_GetClockConfig+0x5c>)
 800c42e:	689b      	ldr	r3, [r3, #8]
 800c430:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800c438:	4b0c      	ldr	r3, [pc, #48]	; (800c46c <HAL_RCC_GetClockConfig+0x5c>)
 800c43a:	689b      	ldr	r3, [r3, #8]
 800c43c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800c444:	4b09      	ldr	r3, [pc, #36]	; (800c46c <HAL_RCC_GetClockConfig+0x5c>)
 800c446:	689b      	ldr	r3, [r3, #8]
 800c448:	08db      	lsrs	r3, r3, #3
 800c44a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800c452:	4b07      	ldr	r3, [pc, #28]	; (800c470 <HAL_RCC_GetClockConfig+0x60>)
 800c454:	681b      	ldr	r3, [r3, #0]
 800c456:	f003 020f 	and.w	r2, r3, #15
 800c45a:	683b      	ldr	r3, [r7, #0]
 800c45c:	601a      	str	r2, [r3, #0]
}
 800c45e:	bf00      	nop
 800c460:	370c      	adds	r7, #12
 800c462:	46bd      	mov	sp, r7
 800c464:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c468:	4770      	bx	lr
 800c46a:	bf00      	nop
 800c46c:	40023800 	.word	0x40023800
 800c470:	40023c00 	.word	0x40023c00

0800c474 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800c474:	b580      	push	{r7, lr}
 800c476:	b086      	sub	sp, #24
 800c478:	af00      	add	r7, sp, #0
 800c47a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800c47c:	2300      	movs	r3, #0
 800c47e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800c480:	2300      	movs	r3, #0
 800c482:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	681b      	ldr	r3, [r3, #0]
 800c488:	f003 0301 	and.w	r3, r3, #1
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d105      	bne.n	800c49c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	681b      	ldr	r3, [r3, #0]
 800c494:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800c498:	2b00      	cmp	r3, #0
 800c49a:	d035      	beq.n	800c508 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800c49c:	4b62      	ldr	r3, [pc, #392]	; (800c628 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800c49e:	2200      	movs	r2, #0
 800c4a0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800c4a2:	f7fd f833 	bl	800950c <HAL_GetTick>
 800c4a6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800c4a8:	e008      	b.n	800c4bc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800c4aa:	f7fd f82f 	bl	800950c <HAL_GetTick>
 800c4ae:	4602      	mov	r2, r0
 800c4b0:	697b      	ldr	r3, [r7, #20]
 800c4b2:	1ad3      	subs	r3, r2, r3
 800c4b4:	2b02      	cmp	r3, #2
 800c4b6:	d901      	bls.n	800c4bc <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c4b8:	2303      	movs	r3, #3
 800c4ba:	e0b0      	b.n	800c61e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800c4bc:	4b5b      	ldr	r3, [pc, #364]	; (800c62c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800c4be:	681b      	ldr	r3, [r3, #0]
 800c4c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	d1f0      	bne.n	800c4aa <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	685b      	ldr	r3, [r3, #4]
 800c4cc:	019a      	lsls	r2, r3, #6
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	689b      	ldr	r3, [r3, #8]
 800c4d2:	071b      	lsls	r3, r3, #28
 800c4d4:	4955      	ldr	r1, [pc, #340]	; (800c62c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800c4d6:	4313      	orrs	r3, r2
 800c4d8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800c4dc:	4b52      	ldr	r3, [pc, #328]	; (800c628 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800c4de:	2201      	movs	r2, #1
 800c4e0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800c4e2:	f7fd f813 	bl	800950c <HAL_GetTick>
 800c4e6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800c4e8:	e008      	b.n	800c4fc <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800c4ea:	f7fd f80f 	bl	800950c <HAL_GetTick>
 800c4ee:	4602      	mov	r2, r0
 800c4f0:	697b      	ldr	r3, [r7, #20]
 800c4f2:	1ad3      	subs	r3, r2, r3
 800c4f4:	2b02      	cmp	r3, #2
 800c4f6:	d901      	bls.n	800c4fc <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c4f8:	2303      	movs	r3, #3
 800c4fa:	e090      	b.n	800c61e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800c4fc:	4b4b      	ldr	r3, [pc, #300]	; (800c62c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c504:	2b00      	cmp	r3, #0
 800c506:	d0f0      	beq.n	800c4ea <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	681b      	ldr	r3, [r3, #0]
 800c50c:	f003 0302 	and.w	r3, r3, #2
 800c510:	2b00      	cmp	r3, #0
 800c512:	f000 8083 	beq.w	800c61c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800c516:	2300      	movs	r3, #0
 800c518:	60fb      	str	r3, [r7, #12]
 800c51a:	4b44      	ldr	r3, [pc, #272]	; (800c62c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800c51c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c51e:	4a43      	ldr	r2, [pc, #268]	; (800c62c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800c520:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c524:	6413      	str	r3, [r2, #64]	; 0x40
 800c526:	4b41      	ldr	r3, [pc, #260]	; (800c62c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800c528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c52a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c52e:	60fb      	str	r3, [r7, #12]
 800c530:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800c532:	4b3f      	ldr	r3, [pc, #252]	; (800c630 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	4a3e      	ldr	r2, [pc, #248]	; (800c630 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800c538:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c53c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800c53e:	f7fc ffe5 	bl	800950c <HAL_GetTick>
 800c542:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800c544:	e008      	b.n	800c558 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800c546:	f7fc ffe1 	bl	800950c <HAL_GetTick>
 800c54a:	4602      	mov	r2, r0
 800c54c:	697b      	ldr	r3, [r7, #20]
 800c54e:	1ad3      	subs	r3, r2, r3
 800c550:	2b02      	cmp	r3, #2
 800c552:	d901      	bls.n	800c558 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 800c554:	2303      	movs	r3, #3
 800c556:	e062      	b.n	800c61e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800c558:	4b35      	ldr	r3, [pc, #212]	; (800c630 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c560:	2b00      	cmp	r3, #0
 800c562:	d0f0      	beq.n	800c546 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800c564:	4b31      	ldr	r3, [pc, #196]	; (800c62c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800c566:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c568:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c56c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800c56e:	693b      	ldr	r3, [r7, #16]
 800c570:	2b00      	cmp	r3, #0
 800c572:	d02f      	beq.n	800c5d4 <HAL_RCCEx_PeriphCLKConfig+0x160>
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	68db      	ldr	r3, [r3, #12]
 800c578:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c57c:	693a      	ldr	r2, [r7, #16]
 800c57e:	429a      	cmp	r2, r3
 800c580:	d028      	beq.n	800c5d4 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800c582:	4b2a      	ldr	r3, [pc, #168]	; (800c62c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800c584:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c586:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c58a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800c58c:	4b29      	ldr	r3, [pc, #164]	; (800c634 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800c58e:	2201      	movs	r2, #1
 800c590:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800c592:	4b28      	ldr	r3, [pc, #160]	; (800c634 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800c594:	2200      	movs	r2, #0
 800c596:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800c598:	4a24      	ldr	r2, [pc, #144]	; (800c62c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800c59a:	693b      	ldr	r3, [r7, #16]
 800c59c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800c59e:	4b23      	ldr	r3, [pc, #140]	; (800c62c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800c5a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c5a2:	f003 0301 	and.w	r3, r3, #1
 800c5a6:	2b01      	cmp	r3, #1
 800c5a8:	d114      	bne.n	800c5d4 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800c5aa:	f7fc ffaf 	bl	800950c <HAL_GetTick>
 800c5ae:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c5b0:	e00a      	b.n	800c5c8 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800c5b2:	f7fc ffab 	bl	800950c <HAL_GetTick>
 800c5b6:	4602      	mov	r2, r0
 800c5b8:	697b      	ldr	r3, [r7, #20]
 800c5ba:	1ad3      	subs	r3, r2, r3
 800c5bc:	f241 3288 	movw	r2, #5000	; 0x1388
 800c5c0:	4293      	cmp	r3, r2
 800c5c2:	d901      	bls.n	800c5c8 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800c5c4:	2303      	movs	r3, #3
 800c5c6:	e02a      	b.n	800c61e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c5c8:	4b18      	ldr	r3, [pc, #96]	; (800c62c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800c5ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c5cc:	f003 0302 	and.w	r3, r3, #2
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	d0ee      	beq.n	800c5b2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	68db      	ldr	r3, [r3, #12]
 800c5d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c5dc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c5e0:	d10d      	bne.n	800c5fe <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800c5e2:	4b12      	ldr	r3, [pc, #72]	; (800c62c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800c5e4:	689b      	ldr	r3, [r3, #8]
 800c5e6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	68db      	ldr	r3, [r3, #12]
 800c5ee:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800c5f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c5f6:	490d      	ldr	r1, [pc, #52]	; (800c62c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800c5f8:	4313      	orrs	r3, r2
 800c5fa:	608b      	str	r3, [r1, #8]
 800c5fc:	e005      	b.n	800c60a <HAL_RCCEx_PeriphCLKConfig+0x196>
 800c5fe:	4b0b      	ldr	r3, [pc, #44]	; (800c62c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800c600:	689b      	ldr	r3, [r3, #8]
 800c602:	4a0a      	ldr	r2, [pc, #40]	; (800c62c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800c604:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800c608:	6093      	str	r3, [r2, #8]
 800c60a:	4b08      	ldr	r3, [pc, #32]	; (800c62c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800c60c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	68db      	ldr	r3, [r3, #12]
 800c612:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c616:	4905      	ldr	r1, [pc, #20]	; (800c62c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800c618:	4313      	orrs	r3, r2
 800c61a:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800c61c:	2300      	movs	r3, #0
}
 800c61e:	4618      	mov	r0, r3
 800c620:	3718      	adds	r7, #24
 800c622:	46bd      	mov	sp, r7
 800c624:	bd80      	pop	{r7, pc}
 800c626:	bf00      	nop
 800c628:	42470068 	.word	0x42470068
 800c62c:	40023800 	.word	0x40023800
 800c630:	40007000 	.word	0x40007000
 800c634:	42470e40 	.word	0x42470e40

0800c638 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800c638:	b580      	push	{r7, lr}
 800c63a:	b082      	sub	sp, #8
 800c63c:	af00      	add	r7, sp, #0
 800c63e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	2b00      	cmp	r3, #0
 800c644:	d101      	bne.n	800c64a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800c646:	2301      	movs	r3, #1
 800c648:	e056      	b.n	800c6f8 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	2200      	movs	r2, #0
 800c64e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c656:	b2db      	uxtb	r3, r3
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d106      	bne.n	800c66a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	2200      	movs	r2, #0
 800c660:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800c664:	6878      	ldr	r0, [r7, #4]
 800c666:	f7f6 ff83 	bl	8003570 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	2202      	movs	r2, #2
 800c66e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	681b      	ldr	r3, [r3, #0]
 800c676:	681a      	ldr	r2, [r3, #0]
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	681b      	ldr	r3, [r3, #0]
 800c67c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c680:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	685a      	ldr	r2, [r3, #4]
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	689b      	ldr	r3, [r3, #8]
 800c68a:	431a      	orrs	r2, r3
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	68db      	ldr	r3, [r3, #12]
 800c690:	431a      	orrs	r2, r3
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	691b      	ldr	r3, [r3, #16]
 800c696:	431a      	orrs	r2, r3
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	695b      	ldr	r3, [r3, #20]
 800c69c:	431a      	orrs	r2, r3
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	699b      	ldr	r3, [r3, #24]
 800c6a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c6a6:	431a      	orrs	r2, r3
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	69db      	ldr	r3, [r3, #28]
 800c6ac:	431a      	orrs	r2, r3
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	6a1b      	ldr	r3, [r3, #32]
 800c6b2:	ea42 0103 	orr.w	r1, r2, r3
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	681b      	ldr	r3, [r3, #0]
 800c6be:	430a      	orrs	r2, r1
 800c6c0:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	699b      	ldr	r3, [r3, #24]
 800c6c6:	0c1b      	lsrs	r3, r3, #16
 800c6c8:	f003 0104 	and.w	r1, r3, #4
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	681b      	ldr	r3, [r3, #0]
 800c6d4:	430a      	orrs	r2, r1
 800c6d6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	681b      	ldr	r3, [r3, #0]
 800c6dc:	69da      	ldr	r2, [r3, #28]
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	681b      	ldr	r3, [r3, #0]
 800c6e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c6e6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	2200      	movs	r2, #0
 800c6ec:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	2201      	movs	r2, #1
 800c6f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800c6f6:	2300      	movs	r3, #0
}
 800c6f8:	4618      	mov	r0, r3
 800c6fa:	3708      	adds	r7, #8
 800c6fc:	46bd      	mov	sp, r7
 800c6fe:	bd80      	pop	{r7, pc}

0800c700 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800c700:	b580      	push	{r7, lr}
 800c702:	b08c      	sub	sp, #48	; 0x30
 800c704:	af00      	add	r7, sp, #0
 800c706:	60f8      	str	r0, [r7, #12]
 800c708:	60b9      	str	r1, [r7, #8]
 800c70a:	607a      	str	r2, [r7, #4]
 800c70c:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800c70e:	2301      	movs	r3, #1
 800c710:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800c712:	2300      	movs	r3, #0
 800c714:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800c718:	68fb      	ldr	r3, [r7, #12]
 800c71a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800c71e:	2b01      	cmp	r3, #1
 800c720:	d101      	bne.n	800c726 <HAL_SPI_TransmitReceive+0x26>
 800c722:	2302      	movs	r3, #2
 800c724:	e18a      	b.n	800ca3c <HAL_SPI_TransmitReceive+0x33c>
 800c726:	68fb      	ldr	r3, [r7, #12]
 800c728:	2201      	movs	r2, #1
 800c72a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c72e:	f7fc feed 	bl	800950c <HAL_GetTick>
 800c732:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800c734:	68fb      	ldr	r3, [r7, #12]
 800c736:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c73a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800c73e:	68fb      	ldr	r3, [r7, #12]
 800c740:	685b      	ldr	r3, [r3, #4]
 800c742:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800c744:	887b      	ldrh	r3, [r7, #2]
 800c746:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800c748:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c74c:	2b01      	cmp	r3, #1
 800c74e:	d00f      	beq.n	800c770 <HAL_SPI_TransmitReceive+0x70>
 800c750:	69fb      	ldr	r3, [r7, #28]
 800c752:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c756:	d107      	bne.n	800c768 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800c758:	68fb      	ldr	r3, [r7, #12]
 800c75a:	689b      	ldr	r3, [r3, #8]
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	d103      	bne.n	800c768 <HAL_SPI_TransmitReceive+0x68>
 800c760:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c764:	2b04      	cmp	r3, #4
 800c766:	d003      	beq.n	800c770 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800c768:	2302      	movs	r3, #2
 800c76a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800c76e:	e15b      	b.n	800ca28 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800c770:	68bb      	ldr	r3, [r7, #8]
 800c772:	2b00      	cmp	r3, #0
 800c774:	d005      	beq.n	800c782 <HAL_SPI_TransmitReceive+0x82>
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	2b00      	cmp	r3, #0
 800c77a:	d002      	beq.n	800c782 <HAL_SPI_TransmitReceive+0x82>
 800c77c:	887b      	ldrh	r3, [r7, #2]
 800c77e:	2b00      	cmp	r3, #0
 800c780:	d103      	bne.n	800c78a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800c782:	2301      	movs	r3, #1
 800c784:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800c788:	e14e      	b.n	800ca28 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800c78a:	68fb      	ldr	r3, [r7, #12]
 800c78c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c790:	b2db      	uxtb	r3, r3
 800c792:	2b04      	cmp	r3, #4
 800c794:	d003      	beq.n	800c79e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800c796:	68fb      	ldr	r3, [r7, #12]
 800c798:	2205      	movs	r2, #5
 800c79a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c79e:	68fb      	ldr	r3, [r7, #12]
 800c7a0:	2200      	movs	r2, #0
 800c7a2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800c7a4:	68fb      	ldr	r3, [r7, #12]
 800c7a6:	687a      	ldr	r2, [r7, #4]
 800c7a8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800c7aa:	68fb      	ldr	r3, [r7, #12]
 800c7ac:	887a      	ldrh	r2, [r7, #2]
 800c7ae:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800c7b0:	68fb      	ldr	r3, [r7, #12]
 800c7b2:	887a      	ldrh	r2, [r7, #2]
 800c7b4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800c7b6:	68fb      	ldr	r3, [r7, #12]
 800c7b8:	68ba      	ldr	r2, [r7, #8]
 800c7ba:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800c7bc:	68fb      	ldr	r3, [r7, #12]
 800c7be:	887a      	ldrh	r2, [r7, #2]
 800c7c0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800c7c2:	68fb      	ldr	r3, [r7, #12]
 800c7c4:	887a      	ldrh	r2, [r7, #2]
 800c7c6:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800c7c8:	68fb      	ldr	r3, [r7, #12]
 800c7ca:	2200      	movs	r2, #0
 800c7cc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800c7ce:	68fb      	ldr	r3, [r7, #12]
 800c7d0:	2200      	movs	r2, #0
 800c7d2:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800c7d4:	68fb      	ldr	r3, [r7, #12]
 800c7d6:	681b      	ldr	r3, [r3, #0]
 800c7d8:	681b      	ldr	r3, [r3, #0]
 800c7da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c7de:	2b40      	cmp	r3, #64	; 0x40
 800c7e0:	d007      	beq.n	800c7f2 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800c7e2:	68fb      	ldr	r3, [r7, #12]
 800c7e4:	681b      	ldr	r3, [r3, #0]
 800c7e6:	681a      	ldr	r2, [r3, #0]
 800c7e8:	68fb      	ldr	r3, [r7, #12]
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c7f0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800c7f2:	68fb      	ldr	r3, [r7, #12]
 800c7f4:	68db      	ldr	r3, [r3, #12]
 800c7f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c7fa:	d178      	bne.n	800c8ee <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c7fc:	68fb      	ldr	r3, [r7, #12]
 800c7fe:	685b      	ldr	r3, [r3, #4]
 800c800:	2b00      	cmp	r3, #0
 800c802:	d002      	beq.n	800c80a <HAL_SPI_TransmitReceive+0x10a>
 800c804:	8b7b      	ldrh	r3, [r7, #26]
 800c806:	2b01      	cmp	r3, #1
 800c808:	d166      	bne.n	800c8d8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c80a:	68fb      	ldr	r3, [r7, #12]
 800c80c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c80e:	881a      	ldrh	r2, [r3, #0]
 800c810:	68fb      	ldr	r3, [r7, #12]
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800c816:	68fb      	ldr	r3, [r7, #12]
 800c818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c81a:	1c9a      	adds	r2, r3, #2
 800c81c:	68fb      	ldr	r3, [r7, #12]
 800c81e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800c820:	68fb      	ldr	r3, [r7, #12]
 800c822:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c824:	b29b      	uxth	r3, r3
 800c826:	3b01      	subs	r3, #1
 800c828:	b29a      	uxth	r2, r3
 800c82a:	68fb      	ldr	r3, [r7, #12]
 800c82c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c82e:	e053      	b.n	800c8d8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800c830:	68fb      	ldr	r3, [r7, #12]
 800c832:	681b      	ldr	r3, [r3, #0]
 800c834:	689b      	ldr	r3, [r3, #8]
 800c836:	f003 0302 	and.w	r3, r3, #2
 800c83a:	2b02      	cmp	r3, #2
 800c83c:	d11b      	bne.n	800c876 <HAL_SPI_TransmitReceive+0x176>
 800c83e:	68fb      	ldr	r3, [r7, #12]
 800c840:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c842:	b29b      	uxth	r3, r3
 800c844:	2b00      	cmp	r3, #0
 800c846:	d016      	beq.n	800c876 <HAL_SPI_TransmitReceive+0x176>
 800c848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c84a:	2b01      	cmp	r3, #1
 800c84c:	d113      	bne.n	800c876 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c84e:	68fb      	ldr	r3, [r7, #12]
 800c850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c852:	881a      	ldrh	r2, [r3, #0]
 800c854:	68fb      	ldr	r3, [r7, #12]
 800c856:	681b      	ldr	r3, [r3, #0]
 800c858:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800c85a:	68fb      	ldr	r3, [r7, #12]
 800c85c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c85e:	1c9a      	adds	r2, r3, #2
 800c860:	68fb      	ldr	r3, [r7, #12]
 800c862:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800c864:	68fb      	ldr	r3, [r7, #12]
 800c866:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c868:	b29b      	uxth	r3, r3
 800c86a:	3b01      	subs	r3, #1
 800c86c:	b29a      	uxth	r2, r3
 800c86e:	68fb      	ldr	r3, [r7, #12]
 800c870:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800c872:	2300      	movs	r3, #0
 800c874:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800c876:	68fb      	ldr	r3, [r7, #12]
 800c878:	681b      	ldr	r3, [r3, #0]
 800c87a:	689b      	ldr	r3, [r3, #8]
 800c87c:	f003 0301 	and.w	r3, r3, #1
 800c880:	2b01      	cmp	r3, #1
 800c882:	d119      	bne.n	800c8b8 <HAL_SPI_TransmitReceive+0x1b8>
 800c884:	68fb      	ldr	r3, [r7, #12]
 800c886:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c888:	b29b      	uxth	r3, r3
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d014      	beq.n	800c8b8 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800c88e:	68fb      	ldr	r3, [r7, #12]
 800c890:	681b      	ldr	r3, [r3, #0]
 800c892:	68da      	ldr	r2, [r3, #12]
 800c894:	68fb      	ldr	r3, [r7, #12]
 800c896:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c898:	b292      	uxth	r2, r2
 800c89a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800c89c:	68fb      	ldr	r3, [r7, #12]
 800c89e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8a0:	1c9a      	adds	r2, r3, #2
 800c8a2:	68fb      	ldr	r3, [r7, #12]
 800c8a4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800c8a6:	68fb      	ldr	r3, [r7, #12]
 800c8a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c8aa:	b29b      	uxth	r3, r3
 800c8ac:	3b01      	subs	r3, #1
 800c8ae:	b29a      	uxth	r2, r3
 800c8b0:	68fb      	ldr	r3, [r7, #12]
 800c8b2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800c8b4:	2301      	movs	r3, #1
 800c8b6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800c8b8:	f7fc fe28 	bl	800950c <HAL_GetTick>
 800c8bc:	4602      	mov	r2, r0
 800c8be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8c0:	1ad3      	subs	r3, r2, r3
 800c8c2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c8c4:	429a      	cmp	r2, r3
 800c8c6:	d807      	bhi.n	800c8d8 <HAL_SPI_TransmitReceive+0x1d8>
 800c8c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c8ce:	d003      	beq.n	800c8d8 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800c8d0:	2303      	movs	r3, #3
 800c8d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800c8d6:	e0a7      	b.n	800ca28 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c8d8:	68fb      	ldr	r3, [r7, #12]
 800c8da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c8dc:	b29b      	uxth	r3, r3
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	d1a6      	bne.n	800c830 <HAL_SPI_TransmitReceive+0x130>
 800c8e2:	68fb      	ldr	r3, [r7, #12]
 800c8e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c8e6:	b29b      	uxth	r3, r3
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	d1a1      	bne.n	800c830 <HAL_SPI_TransmitReceive+0x130>
 800c8ec:	e07c      	b.n	800c9e8 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c8ee:	68fb      	ldr	r3, [r7, #12]
 800c8f0:	685b      	ldr	r3, [r3, #4]
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	d002      	beq.n	800c8fc <HAL_SPI_TransmitReceive+0x1fc>
 800c8f6:	8b7b      	ldrh	r3, [r7, #26]
 800c8f8:	2b01      	cmp	r3, #1
 800c8fa:	d16b      	bne.n	800c9d4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800c8fc:	68fb      	ldr	r3, [r7, #12]
 800c8fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c900:	68fb      	ldr	r3, [r7, #12]
 800c902:	681b      	ldr	r3, [r3, #0]
 800c904:	330c      	adds	r3, #12
 800c906:	7812      	ldrb	r2, [r2, #0]
 800c908:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800c90a:	68fb      	ldr	r3, [r7, #12]
 800c90c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c90e:	1c5a      	adds	r2, r3, #1
 800c910:	68fb      	ldr	r3, [r7, #12]
 800c912:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800c914:	68fb      	ldr	r3, [r7, #12]
 800c916:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c918:	b29b      	uxth	r3, r3
 800c91a:	3b01      	subs	r3, #1
 800c91c:	b29a      	uxth	r2, r3
 800c91e:	68fb      	ldr	r3, [r7, #12]
 800c920:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c922:	e057      	b.n	800c9d4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800c924:	68fb      	ldr	r3, [r7, #12]
 800c926:	681b      	ldr	r3, [r3, #0]
 800c928:	689b      	ldr	r3, [r3, #8]
 800c92a:	f003 0302 	and.w	r3, r3, #2
 800c92e:	2b02      	cmp	r3, #2
 800c930:	d11c      	bne.n	800c96c <HAL_SPI_TransmitReceive+0x26c>
 800c932:	68fb      	ldr	r3, [r7, #12]
 800c934:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c936:	b29b      	uxth	r3, r3
 800c938:	2b00      	cmp	r3, #0
 800c93a:	d017      	beq.n	800c96c <HAL_SPI_TransmitReceive+0x26c>
 800c93c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c93e:	2b01      	cmp	r3, #1
 800c940:	d114      	bne.n	800c96c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800c942:	68fb      	ldr	r3, [r7, #12]
 800c944:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c946:	68fb      	ldr	r3, [r7, #12]
 800c948:	681b      	ldr	r3, [r3, #0]
 800c94a:	330c      	adds	r3, #12
 800c94c:	7812      	ldrb	r2, [r2, #0]
 800c94e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800c950:	68fb      	ldr	r3, [r7, #12]
 800c952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c954:	1c5a      	adds	r2, r3, #1
 800c956:	68fb      	ldr	r3, [r7, #12]
 800c958:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800c95a:	68fb      	ldr	r3, [r7, #12]
 800c95c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c95e:	b29b      	uxth	r3, r3
 800c960:	3b01      	subs	r3, #1
 800c962:	b29a      	uxth	r2, r3
 800c964:	68fb      	ldr	r3, [r7, #12]
 800c966:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800c968:	2300      	movs	r3, #0
 800c96a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800c96c:	68fb      	ldr	r3, [r7, #12]
 800c96e:	681b      	ldr	r3, [r3, #0]
 800c970:	689b      	ldr	r3, [r3, #8]
 800c972:	f003 0301 	and.w	r3, r3, #1
 800c976:	2b01      	cmp	r3, #1
 800c978:	d119      	bne.n	800c9ae <HAL_SPI_TransmitReceive+0x2ae>
 800c97a:	68fb      	ldr	r3, [r7, #12]
 800c97c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c97e:	b29b      	uxth	r3, r3
 800c980:	2b00      	cmp	r3, #0
 800c982:	d014      	beq.n	800c9ae <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800c984:	68fb      	ldr	r3, [r7, #12]
 800c986:	681b      	ldr	r3, [r3, #0]
 800c988:	68da      	ldr	r2, [r3, #12]
 800c98a:	68fb      	ldr	r3, [r7, #12]
 800c98c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c98e:	b2d2      	uxtb	r2, r2
 800c990:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800c992:	68fb      	ldr	r3, [r7, #12]
 800c994:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c996:	1c5a      	adds	r2, r3, #1
 800c998:	68fb      	ldr	r3, [r7, #12]
 800c99a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800c99c:	68fb      	ldr	r3, [r7, #12]
 800c99e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c9a0:	b29b      	uxth	r3, r3
 800c9a2:	3b01      	subs	r3, #1
 800c9a4:	b29a      	uxth	r2, r3
 800c9a6:	68fb      	ldr	r3, [r7, #12]
 800c9a8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800c9aa:	2301      	movs	r3, #1
 800c9ac:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800c9ae:	f7fc fdad 	bl	800950c <HAL_GetTick>
 800c9b2:	4602      	mov	r2, r0
 800c9b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9b6:	1ad3      	subs	r3, r2, r3
 800c9b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c9ba:	429a      	cmp	r2, r3
 800c9bc:	d803      	bhi.n	800c9c6 <HAL_SPI_TransmitReceive+0x2c6>
 800c9be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c9c4:	d102      	bne.n	800c9cc <HAL_SPI_TransmitReceive+0x2cc>
 800c9c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	d103      	bne.n	800c9d4 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800c9cc:	2303      	movs	r3, #3
 800c9ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800c9d2:	e029      	b.n	800ca28 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c9d4:	68fb      	ldr	r3, [r7, #12]
 800c9d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c9d8:	b29b      	uxth	r3, r3
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	d1a2      	bne.n	800c924 <HAL_SPI_TransmitReceive+0x224>
 800c9de:	68fb      	ldr	r3, [r7, #12]
 800c9e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c9e2:	b29b      	uxth	r3, r3
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	d19d      	bne.n	800c924 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800c9e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c9ea:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c9ec:	68f8      	ldr	r0, [r7, #12]
 800c9ee:	f000 f9b1 	bl	800cd54 <SPI_EndRxTxTransaction>
 800c9f2:	4603      	mov	r3, r0
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	d006      	beq.n	800ca06 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800c9f8:	2301      	movs	r3, #1
 800c9fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800c9fe:	68fb      	ldr	r3, [r7, #12]
 800ca00:	2220      	movs	r2, #32
 800ca02:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800ca04:	e010      	b.n	800ca28 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800ca06:	68fb      	ldr	r3, [r7, #12]
 800ca08:	689b      	ldr	r3, [r3, #8]
 800ca0a:	2b00      	cmp	r3, #0
 800ca0c:	d10b      	bne.n	800ca26 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ca0e:	2300      	movs	r3, #0
 800ca10:	617b      	str	r3, [r7, #20]
 800ca12:	68fb      	ldr	r3, [r7, #12]
 800ca14:	681b      	ldr	r3, [r3, #0]
 800ca16:	68db      	ldr	r3, [r3, #12]
 800ca18:	617b      	str	r3, [r7, #20]
 800ca1a:	68fb      	ldr	r3, [r7, #12]
 800ca1c:	681b      	ldr	r3, [r3, #0]
 800ca1e:	689b      	ldr	r3, [r3, #8]
 800ca20:	617b      	str	r3, [r7, #20]
 800ca22:	697b      	ldr	r3, [r7, #20]
 800ca24:	e000      	b.n	800ca28 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800ca26:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800ca28:	68fb      	ldr	r3, [r7, #12]
 800ca2a:	2201      	movs	r2, #1
 800ca2c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800ca30:	68fb      	ldr	r3, [r7, #12]
 800ca32:	2200      	movs	r2, #0
 800ca34:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800ca38:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800ca3c:	4618      	mov	r0, r3
 800ca3e:	3730      	adds	r7, #48	; 0x30
 800ca40:	46bd      	mov	sp, r7
 800ca42:	bd80      	pop	{r7, pc}

0800ca44 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800ca44:	b580      	push	{r7, lr}
 800ca46:	b088      	sub	sp, #32
 800ca48:	af00      	add	r7, sp, #0
 800ca4a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	681b      	ldr	r3, [r3, #0]
 800ca50:	685b      	ldr	r3, [r3, #4]
 800ca52:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	681b      	ldr	r3, [r3, #0]
 800ca58:	689b      	ldr	r3, [r3, #8]
 800ca5a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800ca5c:	69bb      	ldr	r3, [r7, #24]
 800ca5e:	099b      	lsrs	r3, r3, #6
 800ca60:	f003 0301 	and.w	r3, r3, #1
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	d10f      	bne.n	800ca88 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800ca68:	69bb      	ldr	r3, [r7, #24]
 800ca6a:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	d00a      	beq.n	800ca88 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800ca72:	69fb      	ldr	r3, [r7, #28]
 800ca74:	099b      	lsrs	r3, r3, #6
 800ca76:	f003 0301 	and.w	r3, r3, #1
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	d004      	beq.n	800ca88 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca82:	6878      	ldr	r0, [r7, #4]
 800ca84:	4798      	blx	r3
    return;
 800ca86:	e0d7      	b.n	800cc38 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800ca88:	69bb      	ldr	r3, [r7, #24]
 800ca8a:	085b      	lsrs	r3, r3, #1
 800ca8c:	f003 0301 	and.w	r3, r3, #1
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	d00a      	beq.n	800caaa <HAL_SPI_IRQHandler+0x66>
 800ca94:	69fb      	ldr	r3, [r7, #28]
 800ca96:	09db      	lsrs	r3, r3, #7
 800ca98:	f003 0301 	and.w	r3, r3, #1
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	d004      	beq.n	800caaa <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800caa4:	6878      	ldr	r0, [r7, #4]
 800caa6:	4798      	blx	r3
    return;
 800caa8:	e0c6      	b.n	800cc38 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800caaa:	69bb      	ldr	r3, [r7, #24]
 800caac:	095b      	lsrs	r3, r3, #5
 800caae:	f003 0301 	and.w	r3, r3, #1
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	d10c      	bne.n	800cad0 <HAL_SPI_IRQHandler+0x8c>
 800cab6:	69bb      	ldr	r3, [r7, #24]
 800cab8:	099b      	lsrs	r3, r3, #6
 800caba:	f003 0301 	and.w	r3, r3, #1
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	d106      	bne.n	800cad0 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800cac2:	69bb      	ldr	r3, [r7, #24]
 800cac4:	0a1b      	lsrs	r3, r3, #8
 800cac6:	f003 0301 	and.w	r3, r3, #1
 800caca:	2b00      	cmp	r3, #0
 800cacc:	f000 80b4 	beq.w	800cc38 <HAL_SPI_IRQHandler+0x1f4>
 800cad0:	69fb      	ldr	r3, [r7, #28]
 800cad2:	095b      	lsrs	r3, r3, #5
 800cad4:	f003 0301 	and.w	r3, r3, #1
 800cad8:	2b00      	cmp	r3, #0
 800cada:	f000 80ad 	beq.w	800cc38 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800cade:	69bb      	ldr	r3, [r7, #24]
 800cae0:	099b      	lsrs	r3, r3, #6
 800cae2:	f003 0301 	and.w	r3, r3, #1
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	d023      	beq.n	800cb32 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800caf0:	b2db      	uxtb	r3, r3
 800caf2:	2b03      	cmp	r3, #3
 800caf4:	d011      	beq.n	800cb1a <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cafa:	f043 0204 	orr.w	r2, r3, #4
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800cb02:	2300      	movs	r3, #0
 800cb04:	617b      	str	r3, [r7, #20]
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	681b      	ldr	r3, [r3, #0]
 800cb0a:	68db      	ldr	r3, [r3, #12]
 800cb0c:	617b      	str	r3, [r7, #20]
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	681b      	ldr	r3, [r3, #0]
 800cb12:	689b      	ldr	r3, [r3, #8]
 800cb14:	617b      	str	r3, [r7, #20]
 800cb16:	697b      	ldr	r3, [r7, #20]
 800cb18:	e00b      	b.n	800cb32 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800cb1a:	2300      	movs	r3, #0
 800cb1c:	613b      	str	r3, [r7, #16]
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	681b      	ldr	r3, [r3, #0]
 800cb22:	68db      	ldr	r3, [r3, #12]
 800cb24:	613b      	str	r3, [r7, #16]
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	681b      	ldr	r3, [r3, #0]
 800cb2a:	689b      	ldr	r3, [r3, #8]
 800cb2c:	613b      	str	r3, [r7, #16]
 800cb2e:	693b      	ldr	r3, [r7, #16]
        return;
 800cb30:	e082      	b.n	800cc38 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800cb32:	69bb      	ldr	r3, [r7, #24]
 800cb34:	095b      	lsrs	r3, r3, #5
 800cb36:	f003 0301 	and.w	r3, r3, #1
 800cb3a:	2b00      	cmp	r3, #0
 800cb3c:	d014      	beq.n	800cb68 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cb42:	f043 0201 	orr.w	r2, r3, #1
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800cb4a:	2300      	movs	r3, #0
 800cb4c:	60fb      	str	r3, [r7, #12]
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	681b      	ldr	r3, [r3, #0]
 800cb52:	689b      	ldr	r3, [r3, #8]
 800cb54:	60fb      	str	r3, [r7, #12]
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	681b      	ldr	r3, [r3, #0]
 800cb5a:	681a      	ldr	r2, [r3, #0]
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	681b      	ldr	r3, [r3, #0]
 800cb60:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800cb64:	601a      	str	r2, [r3, #0]
 800cb66:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800cb68:	69bb      	ldr	r3, [r7, #24]
 800cb6a:	0a1b      	lsrs	r3, r3, #8
 800cb6c:	f003 0301 	and.w	r3, r3, #1
 800cb70:	2b00      	cmp	r3, #0
 800cb72:	d00c      	beq.n	800cb8e <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cb78:	f043 0208 	orr.w	r2, r3, #8
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800cb80:	2300      	movs	r3, #0
 800cb82:	60bb      	str	r3, [r7, #8]
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	681b      	ldr	r3, [r3, #0]
 800cb88:	689b      	ldr	r3, [r3, #8]
 800cb8a:	60bb      	str	r3, [r7, #8]
 800cb8c:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	d04f      	beq.n	800cc36 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	681b      	ldr	r3, [r3, #0]
 800cb9a:	685a      	ldr	r2, [r3, #4]
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	681b      	ldr	r3, [r3, #0]
 800cba0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800cba4:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	2201      	movs	r2, #1
 800cbaa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800cbae:	69fb      	ldr	r3, [r7, #28]
 800cbb0:	f003 0302 	and.w	r3, r3, #2
 800cbb4:	2b00      	cmp	r3, #0
 800cbb6:	d104      	bne.n	800cbc2 <HAL_SPI_IRQHandler+0x17e>
 800cbb8:	69fb      	ldr	r3, [r7, #28]
 800cbba:	f003 0301 	and.w	r3, r3, #1
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	d034      	beq.n	800cc2c <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	681b      	ldr	r3, [r3, #0]
 800cbc6:	685a      	ldr	r2, [r3, #4]
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	681b      	ldr	r3, [r3, #0]
 800cbcc:	f022 0203 	bic.w	r2, r2, #3
 800cbd0:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cbd6:	2b00      	cmp	r3, #0
 800cbd8:	d011      	beq.n	800cbfe <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cbde:	4a18      	ldr	r2, [pc, #96]	; (800cc40 <HAL_SPI_IRQHandler+0x1fc>)
 800cbe0:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cbe6:	4618      	mov	r0, r3
 800cbe8:	f7fd fa92 	bl	800a110 <HAL_DMA_Abort_IT>
 800cbec:	4603      	mov	r3, r0
 800cbee:	2b00      	cmp	r3, #0
 800cbf0:	d005      	beq.n	800cbfe <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cbf6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cc02:	2b00      	cmp	r3, #0
 800cc04:	d016      	beq.n	800cc34 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cc0a:	4a0d      	ldr	r2, [pc, #52]	; (800cc40 <HAL_SPI_IRQHandler+0x1fc>)
 800cc0c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cc12:	4618      	mov	r0, r3
 800cc14:	f7fd fa7c 	bl	800a110 <HAL_DMA_Abort_IT>
 800cc18:	4603      	mov	r3, r0
 800cc1a:	2b00      	cmp	r3, #0
 800cc1c:	d00a      	beq.n	800cc34 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cc22:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800cc2a:	e003      	b.n	800cc34 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800cc2c:	6878      	ldr	r0, [r7, #4]
 800cc2e:	f000 f809 	bl	800cc44 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800cc32:	e000      	b.n	800cc36 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800cc34:	bf00      	nop
    return;
 800cc36:	bf00      	nop
  }
}
 800cc38:	3720      	adds	r7, #32
 800cc3a:	46bd      	mov	sp, r7
 800cc3c:	bd80      	pop	{r7, pc}
 800cc3e:	bf00      	nop
 800cc40:	0800cc59 	.word	0x0800cc59

0800cc44 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800cc44:	b480      	push	{r7}
 800cc46:	b083      	sub	sp, #12
 800cc48:	af00      	add	r7, sp, #0
 800cc4a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800cc4c:	bf00      	nop
 800cc4e:	370c      	adds	r7, #12
 800cc50:	46bd      	mov	sp, r7
 800cc52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc56:	4770      	bx	lr

0800cc58 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800cc58:	b580      	push	{r7, lr}
 800cc5a:	b084      	sub	sp, #16
 800cc5c:	af00      	add	r7, sp, #0
 800cc5e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc64:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800cc66:	68fb      	ldr	r3, [r7, #12]
 800cc68:	2200      	movs	r2, #0
 800cc6a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800cc6c:	68fb      	ldr	r3, [r7, #12]
 800cc6e:	2200      	movs	r2, #0
 800cc70:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800cc72:	68f8      	ldr	r0, [r7, #12]
 800cc74:	f7ff ffe6 	bl	800cc44 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800cc78:	bf00      	nop
 800cc7a:	3710      	adds	r7, #16
 800cc7c:	46bd      	mov	sp, r7
 800cc7e:	bd80      	pop	{r7, pc}

0800cc80 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800cc80:	b580      	push	{r7, lr}
 800cc82:	b084      	sub	sp, #16
 800cc84:	af00      	add	r7, sp, #0
 800cc86:	60f8      	str	r0, [r7, #12]
 800cc88:	60b9      	str	r1, [r7, #8]
 800cc8a:	603b      	str	r3, [r7, #0]
 800cc8c:	4613      	mov	r3, r2
 800cc8e:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800cc90:	e04c      	b.n	800cd2c <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800cc92:	683b      	ldr	r3, [r7, #0]
 800cc94:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc98:	d048      	beq.n	800cd2c <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800cc9a:	f7fc fc37 	bl	800950c <HAL_GetTick>
 800cc9e:	4602      	mov	r2, r0
 800cca0:	69bb      	ldr	r3, [r7, #24]
 800cca2:	1ad3      	subs	r3, r2, r3
 800cca4:	683a      	ldr	r2, [r7, #0]
 800cca6:	429a      	cmp	r2, r3
 800cca8:	d902      	bls.n	800ccb0 <SPI_WaitFlagStateUntilTimeout+0x30>
 800ccaa:	683b      	ldr	r3, [r7, #0]
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	d13d      	bne.n	800cd2c <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800ccb0:	68fb      	ldr	r3, [r7, #12]
 800ccb2:	681b      	ldr	r3, [r3, #0]
 800ccb4:	685a      	ldr	r2, [r3, #4]
 800ccb6:	68fb      	ldr	r3, [r7, #12]
 800ccb8:	681b      	ldr	r3, [r3, #0]
 800ccba:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800ccbe:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ccc0:	68fb      	ldr	r3, [r7, #12]
 800ccc2:	685b      	ldr	r3, [r3, #4]
 800ccc4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ccc8:	d111      	bne.n	800ccee <SPI_WaitFlagStateUntilTimeout+0x6e>
 800ccca:	68fb      	ldr	r3, [r7, #12]
 800cccc:	689b      	ldr	r3, [r3, #8]
 800ccce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ccd2:	d004      	beq.n	800ccde <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ccd4:	68fb      	ldr	r3, [r7, #12]
 800ccd6:	689b      	ldr	r3, [r3, #8]
 800ccd8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ccdc:	d107      	bne.n	800ccee <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800ccde:	68fb      	ldr	r3, [r7, #12]
 800cce0:	681b      	ldr	r3, [r3, #0]
 800cce2:	681a      	ldr	r2, [r3, #0]
 800cce4:	68fb      	ldr	r3, [r7, #12]
 800cce6:	681b      	ldr	r3, [r3, #0]
 800cce8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ccec:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800ccee:	68fb      	ldr	r3, [r7, #12]
 800ccf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ccf2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ccf6:	d10f      	bne.n	800cd18 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800ccf8:	68fb      	ldr	r3, [r7, #12]
 800ccfa:	681b      	ldr	r3, [r3, #0]
 800ccfc:	681a      	ldr	r2, [r3, #0]
 800ccfe:	68fb      	ldr	r3, [r7, #12]
 800cd00:	681b      	ldr	r3, [r3, #0]
 800cd02:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800cd06:	601a      	str	r2, [r3, #0]
 800cd08:	68fb      	ldr	r3, [r7, #12]
 800cd0a:	681b      	ldr	r3, [r3, #0]
 800cd0c:	681a      	ldr	r2, [r3, #0]
 800cd0e:	68fb      	ldr	r3, [r7, #12]
 800cd10:	681b      	ldr	r3, [r3, #0]
 800cd12:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800cd16:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800cd18:	68fb      	ldr	r3, [r7, #12]
 800cd1a:	2201      	movs	r2, #1
 800cd1c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800cd20:	68fb      	ldr	r3, [r7, #12]
 800cd22:	2200      	movs	r2, #0
 800cd24:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800cd28:	2303      	movs	r3, #3
 800cd2a:	e00f      	b.n	800cd4c <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800cd2c:	68fb      	ldr	r3, [r7, #12]
 800cd2e:	681b      	ldr	r3, [r3, #0]
 800cd30:	689a      	ldr	r2, [r3, #8]
 800cd32:	68bb      	ldr	r3, [r7, #8]
 800cd34:	4013      	ands	r3, r2
 800cd36:	68ba      	ldr	r2, [r7, #8]
 800cd38:	429a      	cmp	r2, r3
 800cd3a:	bf0c      	ite	eq
 800cd3c:	2301      	moveq	r3, #1
 800cd3e:	2300      	movne	r3, #0
 800cd40:	b2db      	uxtb	r3, r3
 800cd42:	461a      	mov	r2, r3
 800cd44:	79fb      	ldrb	r3, [r7, #7]
 800cd46:	429a      	cmp	r2, r3
 800cd48:	d1a3      	bne.n	800cc92 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800cd4a:	2300      	movs	r3, #0
}
 800cd4c:	4618      	mov	r0, r3
 800cd4e:	3710      	adds	r7, #16
 800cd50:	46bd      	mov	sp, r7
 800cd52:	bd80      	pop	{r7, pc}

0800cd54 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800cd54:	b580      	push	{r7, lr}
 800cd56:	b088      	sub	sp, #32
 800cd58:	af02      	add	r7, sp, #8
 800cd5a:	60f8      	str	r0, [r7, #12]
 800cd5c:	60b9      	str	r1, [r7, #8]
 800cd5e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800cd60:	4b1b      	ldr	r3, [pc, #108]	; (800cdd0 <SPI_EndRxTxTransaction+0x7c>)
 800cd62:	681b      	ldr	r3, [r3, #0]
 800cd64:	4a1b      	ldr	r2, [pc, #108]	; (800cdd4 <SPI_EndRxTxTransaction+0x80>)
 800cd66:	fba2 2303 	umull	r2, r3, r2, r3
 800cd6a:	0d5b      	lsrs	r3, r3, #21
 800cd6c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800cd70:	fb02 f303 	mul.w	r3, r2, r3
 800cd74:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800cd76:	68fb      	ldr	r3, [r7, #12]
 800cd78:	685b      	ldr	r3, [r3, #4]
 800cd7a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800cd7e:	d112      	bne.n	800cda6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	9300      	str	r3, [sp, #0]
 800cd84:	68bb      	ldr	r3, [r7, #8]
 800cd86:	2200      	movs	r2, #0
 800cd88:	2180      	movs	r1, #128	; 0x80
 800cd8a:	68f8      	ldr	r0, [r7, #12]
 800cd8c:	f7ff ff78 	bl	800cc80 <SPI_WaitFlagStateUntilTimeout>
 800cd90:	4603      	mov	r3, r0
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	d016      	beq.n	800cdc4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800cd96:	68fb      	ldr	r3, [r7, #12]
 800cd98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cd9a:	f043 0220 	orr.w	r2, r3, #32
 800cd9e:	68fb      	ldr	r3, [r7, #12]
 800cda0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800cda2:	2303      	movs	r3, #3
 800cda4:	e00f      	b.n	800cdc6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800cda6:	697b      	ldr	r3, [r7, #20]
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	d00a      	beq.n	800cdc2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800cdac:	697b      	ldr	r3, [r7, #20]
 800cdae:	3b01      	subs	r3, #1
 800cdb0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800cdb2:	68fb      	ldr	r3, [r7, #12]
 800cdb4:	681b      	ldr	r3, [r3, #0]
 800cdb6:	689b      	ldr	r3, [r3, #8]
 800cdb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cdbc:	2b80      	cmp	r3, #128	; 0x80
 800cdbe:	d0f2      	beq.n	800cda6 <SPI_EndRxTxTransaction+0x52>
 800cdc0:	e000      	b.n	800cdc4 <SPI_EndRxTxTransaction+0x70>
        break;
 800cdc2:	bf00      	nop
  }

  return HAL_OK;
 800cdc4:	2300      	movs	r3, #0
}
 800cdc6:	4618      	mov	r0, r3
 800cdc8:	3718      	adds	r7, #24
 800cdca:	46bd      	mov	sp, r7
 800cdcc:	bd80      	pop	{r7, pc}
 800cdce:	bf00      	nop
 800cdd0:	20000008 	.word	0x20000008
 800cdd4:	165e9f81 	.word	0x165e9f81

0800cdd8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800cdd8:	b580      	push	{r7, lr}
 800cdda:	b082      	sub	sp, #8
 800cddc:	af00      	add	r7, sp, #0
 800cdde:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	2b00      	cmp	r3, #0
 800cde4:	d101      	bne.n	800cdea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800cde6:	2301      	movs	r3, #1
 800cde8:	e01d      	b.n	800ce26 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cdf0:	b2db      	uxtb	r3, r3
 800cdf2:	2b00      	cmp	r3, #0
 800cdf4:	d106      	bne.n	800ce04 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	2200      	movs	r2, #0
 800cdfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800cdfe:	6878      	ldr	r0, [r7, #4]
 800ce00:	f7f7 f942 	bl	8004088 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	2202      	movs	r2, #2
 800ce08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	681a      	ldr	r2, [r3, #0]
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	3304      	adds	r3, #4
 800ce14:	4619      	mov	r1, r3
 800ce16:	4610      	mov	r0, r2
 800ce18:	f000 fcc0 	bl	800d79c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	2201      	movs	r2, #1
 800ce20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ce24:	2300      	movs	r3, #0
}
 800ce26:	4618      	mov	r0, r3
 800ce28:	3708      	adds	r7, #8
 800ce2a:	46bd      	mov	sp, r7
 800ce2c:	bd80      	pop	{r7, pc}

0800ce2e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800ce2e:	b480      	push	{r7}
 800ce30:	b085      	sub	sp, #20
 800ce32:	af00      	add	r7, sp, #0
 800ce34:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	681b      	ldr	r3, [r3, #0]
 800ce3a:	68da      	ldr	r2, [r3, #12]
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	681b      	ldr	r3, [r3, #0]
 800ce40:	f042 0201 	orr.w	r2, r2, #1
 800ce44:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	681b      	ldr	r3, [r3, #0]
 800ce4a:	689b      	ldr	r3, [r3, #8]
 800ce4c:	f003 0307 	and.w	r3, r3, #7
 800ce50:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ce52:	68fb      	ldr	r3, [r7, #12]
 800ce54:	2b06      	cmp	r3, #6
 800ce56:	d007      	beq.n	800ce68 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	681b      	ldr	r3, [r3, #0]
 800ce5c:	681a      	ldr	r2, [r3, #0]
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	681b      	ldr	r3, [r3, #0]
 800ce62:	f042 0201 	orr.w	r2, r2, #1
 800ce66:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800ce68:	2300      	movs	r3, #0
}
 800ce6a:	4618      	mov	r0, r3
 800ce6c:	3714      	adds	r7, #20
 800ce6e:	46bd      	mov	sp, r7
 800ce70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce74:	4770      	bx	lr

0800ce76 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800ce76:	b580      	push	{r7, lr}
 800ce78:	b082      	sub	sp, #8
 800ce7a:	af00      	add	r7, sp, #0
 800ce7c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	d101      	bne.n	800ce88 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800ce84:	2301      	movs	r3, #1
 800ce86:	e01d      	b.n	800cec4 <HAL_TIM_OC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ce8e:	b2db      	uxtb	r3, r3
 800ce90:	2b00      	cmp	r3, #0
 800ce92:	d106      	bne.n	800cea2 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	2200      	movs	r2, #0
 800ce98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800ce9c:	6878      	ldr	r0, [r7, #4]
 800ce9e:	f7f7 f8d1 	bl	8004044 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	2202      	movs	r2, #2
 800cea6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	681a      	ldr	r2, [r3, #0]
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	3304      	adds	r3, #4
 800ceb2:	4619      	mov	r1, r3
 800ceb4:	4610      	mov	r0, r2
 800ceb6:	f000 fc71 	bl	800d79c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	2201      	movs	r2, #1
 800cebe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800cec2:	2300      	movs	r3, #0
}
 800cec4:	4618      	mov	r0, r3
 800cec6:	3708      	adds	r7, #8
 800cec8:	46bd      	mov	sp, r7
 800ceca:	bd80      	pop	{r7, pc}

0800cecc <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800cecc:	b580      	push	{r7, lr}
 800cece:	b084      	sub	sp, #16
 800ced0:	af00      	add	r7, sp, #0
 800ced2:	6078      	str	r0, [r7, #4]
 800ced4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	681b      	ldr	r3, [r3, #0]
 800ceda:	2201      	movs	r2, #1
 800cedc:	6839      	ldr	r1, [r7, #0]
 800cede:	4618      	mov	r0, r3
 800cee0:	f000 feac 	bl	800dc3c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	681b      	ldr	r3, [r3, #0]
 800cee8:	4a15      	ldr	r2, [pc, #84]	; (800cf40 <HAL_TIM_OC_Start+0x74>)
 800ceea:	4293      	cmp	r3, r2
 800ceec:	d004      	beq.n	800cef8 <HAL_TIM_OC_Start+0x2c>
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	681b      	ldr	r3, [r3, #0]
 800cef2:	4a14      	ldr	r2, [pc, #80]	; (800cf44 <HAL_TIM_OC_Start+0x78>)
 800cef4:	4293      	cmp	r3, r2
 800cef6:	d101      	bne.n	800cefc <HAL_TIM_OC_Start+0x30>
 800cef8:	2301      	movs	r3, #1
 800cefa:	e000      	b.n	800cefe <HAL_TIM_OC_Start+0x32>
 800cefc:	2300      	movs	r3, #0
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	d007      	beq.n	800cf12 <HAL_TIM_OC_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	681b      	ldr	r3, [r3, #0]
 800cf06:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	681b      	ldr	r3, [r3, #0]
 800cf0c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800cf10:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	681b      	ldr	r3, [r3, #0]
 800cf16:	689b      	ldr	r3, [r3, #8]
 800cf18:	f003 0307 	and.w	r3, r3, #7
 800cf1c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cf1e:	68fb      	ldr	r3, [r7, #12]
 800cf20:	2b06      	cmp	r3, #6
 800cf22:	d007      	beq.n	800cf34 <HAL_TIM_OC_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	681b      	ldr	r3, [r3, #0]
 800cf28:	681a      	ldr	r2, [r3, #0]
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	681b      	ldr	r3, [r3, #0]
 800cf2e:	f042 0201 	orr.w	r2, r2, #1
 800cf32:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800cf34:	2300      	movs	r3, #0
}
 800cf36:	4618      	mov	r0, r3
 800cf38:	3710      	adds	r7, #16
 800cf3a:	46bd      	mov	sp, r7
 800cf3c:	bd80      	pop	{r7, pc}
 800cf3e:	bf00      	nop
 800cf40:	40010000 	.word	0x40010000
 800cf44:	40010400 	.word	0x40010400

0800cf48 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800cf48:	b580      	push	{r7, lr}
 800cf4a:	b082      	sub	sp, #8
 800cf4c:	af00      	add	r7, sp, #0
 800cf4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	2b00      	cmp	r3, #0
 800cf54:	d101      	bne.n	800cf5a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800cf56:	2301      	movs	r3, #1
 800cf58:	e01d      	b.n	800cf96 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cf60:	b2db      	uxtb	r3, r3
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	d106      	bne.n	800cf74 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	2200      	movs	r2, #0
 800cf6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800cf6e:	6878      	ldr	r0, [r7, #4]
 800cf70:	f7f6 ff68 	bl	8003e44 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	2202      	movs	r2, #2
 800cf78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	681a      	ldr	r2, [r3, #0]
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	3304      	adds	r3, #4
 800cf84:	4619      	mov	r1, r3
 800cf86:	4610      	mov	r0, r2
 800cf88:	f000 fc08 	bl	800d79c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	2201      	movs	r2, #1
 800cf90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800cf94:	2300      	movs	r3, #0
}
 800cf96:	4618      	mov	r0, r3
 800cf98:	3708      	adds	r7, #8
 800cf9a:	46bd      	mov	sp, r7
 800cf9c:	bd80      	pop	{r7, pc}
	...

0800cfa0 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 800cfa0:	b580      	push	{r7, lr}
 800cfa2:	b086      	sub	sp, #24
 800cfa4:	af00      	add	r7, sp, #0
 800cfa6:	60f8      	str	r0, [r7, #12]
 800cfa8:	60b9      	str	r1, [r7, #8]
 800cfaa:	607a      	str	r2, [r7, #4]
 800cfac:	807b      	strh	r3, [r7, #2]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  if (htim->State == HAL_TIM_STATE_BUSY)
 800cfae:	68fb      	ldr	r3, [r7, #12]
 800cfb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cfb4:	b2db      	uxtb	r3, r3
 800cfb6:	2b02      	cmp	r3, #2
 800cfb8:	d101      	bne.n	800cfbe <HAL_TIM_PWM_Start_DMA+0x1e>
  {
    return HAL_BUSY;
 800cfba:	2302      	movs	r3, #2
 800cfbc:	e0f3      	b.n	800d1a6 <HAL_TIM_PWM_Start_DMA+0x206>
  }
  else if (htim->State == HAL_TIM_STATE_READY)
 800cfbe:	68fb      	ldr	r3, [r7, #12]
 800cfc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cfc4:	b2db      	uxtb	r3, r3
 800cfc6:	2b01      	cmp	r3, #1
 800cfc8:	d10b      	bne.n	800cfe2 <HAL_TIM_PWM_Start_DMA+0x42>
  {
    if ((pData == NULL) && (Length > 0U))
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	2b00      	cmp	r3, #0
 800cfce:	d104      	bne.n	800cfda <HAL_TIM_PWM_Start_DMA+0x3a>
 800cfd0:	887b      	ldrh	r3, [r7, #2]
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	d001      	beq.n	800cfda <HAL_TIM_PWM_Start_DMA+0x3a>
    {
      return HAL_ERROR;
 800cfd6:	2301      	movs	r3, #1
 800cfd8:	e0e5      	b.n	800d1a6 <HAL_TIM_PWM_Start_DMA+0x206>
    }
    else
    {
      htim->State = HAL_TIM_STATE_BUSY;
 800cfda:	68fb      	ldr	r3, [r7, #12]
 800cfdc:	2202      	movs	r2, #2
 800cfde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800cfe2:	68bb      	ldr	r3, [r7, #8]
 800cfe4:	2b0c      	cmp	r3, #12
 800cfe6:	f200 80ad 	bhi.w	800d144 <HAL_TIM_PWM_Start_DMA+0x1a4>
 800cfea:	a201      	add	r2, pc, #4	; (adr r2, 800cff0 <HAL_TIM_PWM_Start_DMA+0x50>)
 800cfec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cff0:	0800d025 	.word	0x0800d025
 800cff4:	0800d145 	.word	0x0800d145
 800cff8:	0800d145 	.word	0x0800d145
 800cffc:	0800d145 	.word	0x0800d145
 800d000:	0800d06d 	.word	0x0800d06d
 800d004:	0800d145 	.word	0x0800d145
 800d008:	0800d145 	.word	0x0800d145
 800d00c:	0800d145 	.word	0x0800d145
 800d010:	0800d0b5 	.word	0x0800d0b5
 800d014:	0800d145 	.word	0x0800d145
 800d018:	0800d145 	.word	0x0800d145
 800d01c:	0800d145 	.word	0x0800d145
 800d020:	0800d0fd 	.word	0x0800d0fd
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800d024:	68fb      	ldr	r3, [r7, #12]
 800d026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d028:	4a61      	ldr	r2, [pc, #388]	; (800d1b0 <HAL_TIM_PWM_Start_DMA+0x210>)
 800d02a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800d02c:	68fb      	ldr	r3, [r7, #12]
 800d02e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d030:	4a60      	ldr	r2, [pc, #384]	; (800d1b4 <HAL_TIM_PWM_Start_DMA+0x214>)
 800d032:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800d034:	68fb      	ldr	r3, [r7, #12]
 800d036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d038:	4a5f      	ldr	r2, [pc, #380]	; (800d1b8 <HAL_TIM_PWM_Start_DMA+0x218>)
 800d03a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1, Length) != HAL_OK)
 800d03c:	68fb      	ldr	r3, [r7, #12]
 800d03e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800d040:	6879      	ldr	r1, [r7, #4]
 800d042:	68fb      	ldr	r3, [r7, #12]
 800d044:	681b      	ldr	r3, [r3, #0]
 800d046:	3334      	adds	r3, #52	; 0x34
 800d048:	461a      	mov	r2, r3
 800d04a:	887b      	ldrh	r3, [r7, #2]
 800d04c:	f7fd f808 	bl	800a060 <HAL_DMA_Start_IT>
 800d050:	4603      	mov	r3, r0
 800d052:	2b00      	cmp	r3, #0
 800d054:	d001      	beq.n	800d05a <HAL_TIM_PWM_Start_DMA+0xba>
      {
        return HAL_ERROR;
 800d056:	2301      	movs	r3, #1
 800d058:	e0a5      	b.n	800d1a6 <HAL_TIM_PWM_Start_DMA+0x206>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800d05a:	68fb      	ldr	r3, [r7, #12]
 800d05c:	681b      	ldr	r3, [r3, #0]
 800d05e:	68da      	ldr	r2, [r3, #12]
 800d060:	68fb      	ldr	r3, [r7, #12]
 800d062:	681b      	ldr	r3, [r3, #0]
 800d064:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d068:	60da      	str	r2, [r3, #12]
      break;
 800d06a:	e06c      	b.n	800d146 <HAL_TIM_PWM_Start_DMA+0x1a6>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800d06c:	68fb      	ldr	r3, [r7, #12]
 800d06e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d070:	4a4f      	ldr	r2, [pc, #316]	; (800d1b0 <HAL_TIM_PWM_Start_DMA+0x210>)
 800d072:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800d074:	68fb      	ldr	r3, [r7, #12]
 800d076:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d078:	4a4e      	ldr	r2, [pc, #312]	; (800d1b4 <HAL_TIM_PWM_Start_DMA+0x214>)
 800d07a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800d07c:	68fb      	ldr	r3, [r7, #12]
 800d07e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d080:	4a4d      	ldr	r2, [pc, #308]	; (800d1b8 <HAL_TIM_PWM_Start_DMA+0x218>)
 800d082:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2, Length) != HAL_OK)
 800d084:	68fb      	ldr	r3, [r7, #12]
 800d086:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800d088:	6879      	ldr	r1, [r7, #4]
 800d08a:	68fb      	ldr	r3, [r7, #12]
 800d08c:	681b      	ldr	r3, [r3, #0]
 800d08e:	3338      	adds	r3, #56	; 0x38
 800d090:	461a      	mov	r2, r3
 800d092:	887b      	ldrh	r3, [r7, #2]
 800d094:	f7fc ffe4 	bl	800a060 <HAL_DMA_Start_IT>
 800d098:	4603      	mov	r3, r0
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	d001      	beq.n	800d0a2 <HAL_TIM_PWM_Start_DMA+0x102>
      {
        return HAL_ERROR;
 800d09e:	2301      	movs	r3, #1
 800d0a0:	e081      	b.n	800d1a6 <HAL_TIM_PWM_Start_DMA+0x206>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800d0a2:	68fb      	ldr	r3, [r7, #12]
 800d0a4:	681b      	ldr	r3, [r3, #0]
 800d0a6:	68da      	ldr	r2, [r3, #12]
 800d0a8:	68fb      	ldr	r3, [r7, #12]
 800d0aa:	681b      	ldr	r3, [r3, #0]
 800d0ac:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800d0b0:	60da      	str	r2, [r3, #12]
      break;
 800d0b2:	e048      	b.n	800d146 <HAL_TIM_PWM_Start_DMA+0x1a6>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800d0b4:	68fb      	ldr	r3, [r7, #12]
 800d0b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0b8:	4a3d      	ldr	r2, [pc, #244]	; (800d1b0 <HAL_TIM_PWM_Start_DMA+0x210>)
 800d0ba:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800d0bc:	68fb      	ldr	r3, [r7, #12]
 800d0be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0c0:	4a3c      	ldr	r2, [pc, #240]	; (800d1b4 <HAL_TIM_PWM_Start_DMA+0x214>)
 800d0c2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800d0c4:	68fb      	ldr	r3, [r7, #12]
 800d0c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0c8:	4a3b      	ldr	r2, [pc, #236]	; (800d1b8 <HAL_TIM_PWM_Start_DMA+0x218>)
 800d0ca:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3, Length) != HAL_OK)
 800d0cc:	68fb      	ldr	r3, [r7, #12]
 800d0ce:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800d0d0:	6879      	ldr	r1, [r7, #4]
 800d0d2:	68fb      	ldr	r3, [r7, #12]
 800d0d4:	681b      	ldr	r3, [r3, #0]
 800d0d6:	333c      	adds	r3, #60	; 0x3c
 800d0d8:	461a      	mov	r2, r3
 800d0da:	887b      	ldrh	r3, [r7, #2]
 800d0dc:	f7fc ffc0 	bl	800a060 <HAL_DMA_Start_IT>
 800d0e0:	4603      	mov	r3, r0
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	d001      	beq.n	800d0ea <HAL_TIM_PWM_Start_DMA+0x14a>
      {
        return HAL_ERROR;
 800d0e6:	2301      	movs	r3, #1
 800d0e8:	e05d      	b.n	800d1a6 <HAL_TIM_PWM_Start_DMA+0x206>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800d0ea:	68fb      	ldr	r3, [r7, #12]
 800d0ec:	681b      	ldr	r3, [r3, #0]
 800d0ee:	68da      	ldr	r2, [r3, #12]
 800d0f0:	68fb      	ldr	r3, [r7, #12]
 800d0f2:	681b      	ldr	r3, [r3, #0]
 800d0f4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d0f8:	60da      	str	r2, [r3, #12]
      break;
 800d0fa:	e024      	b.n	800d146 <HAL_TIM_PWM_Start_DMA+0x1a6>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800d0fc:	68fb      	ldr	r3, [r7, #12]
 800d0fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d100:	4a2b      	ldr	r2, [pc, #172]	; (800d1b0 <HAL_TIM_PWM_Start_DMA+0x210>)
 800d102:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800d104:	68fb      	ldr	r3, [r7, #12]
 800d106:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d108:	4a2a      	ldr	r2, [pc, #168]	; (800d1b4 <HAL_TIM_PWM_Start_DMA+0x214>)
 800d10a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800d10c:	68fb      	ldr	r3, [r7, #12]
 800d10e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d110:	4a29      	ldr	r2, [pc, #164]	; (800d1b8 <HAL_TIM_PWM_Start_DMA+0x218>)
 800d112:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4, Length) != HAL_OK)
 800d114:	68fb      	ldr	r3, [r7, #12]
 800d116:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800d118:	6879      	ldr	r1, [r7, #4]
 800d11a:	68fb      	ldr	r3, [r7, #12]
 800d11c:	681b      	ldr	r3, [r3, #0]
 800d11e:	3340      	adds	r3, #64	; 0x40
 800d120:	461a      	mov	r2, r3
 800d122:	887b      	ldrh	r3, [r7, #2]
 800d124:	f7fc ff9c 	bl	800a060 <HAL_DMA_Start_IT>
 800d128:	4603      	mov	r3, r0
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	d001      	beq.n	800d132 <HAL_TIM_PWM_Start_DMA+0x192>
      {
        return HAL_ERROR;
 800d12e:	2301      	movs	r3, #1
 800d130:	e039      	b.n	800d1a6 <HAL_TIM_PWM_Start_DMA+0x206>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800d132:	68fb      	ldr	r3, [r7, #12]
 800d134:	681b      	ldr	r3, [r3, #0]
 800d136:	68da      	ldr	r2, [r3, #12]
 800d138:	68fb      	ldr	r3, [r7, #12]
 800d13a:	681b      	ldr	r3, [r3, #0]
 800d13c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800d140:	60da      	str	r2, [r3, #12]
      break;
 800d142:	e000      	b.n	800d146 <HAL_TIM_PWM_Start_DMA+0x1a6>
    }

    default:
      break;
 800d144:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800d146:	68fb      	ldr	r3, [r7, #12]
 800d148:	681b      	ldr	r3, [r3, #0]
 800d14a:	2201      	movs	r2, #1
 800d14c:	68b9      	ldr	r1, [r7, #8]
 800d14e:	4618      	mov	r0, r3
 800d150:	f000 fd74 	bl	800dc3c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800d154:	68fb      	ldr	r3, [r7, #12]
 800d156:	681b      	ldr	r3, [r3, #0]
 800d158:	4a18      	ldr	r2, [pc, #96]	; (800d1bc <HAL_TIM_PWM_Start_DMA+0x21c>)
 800d15a:	4293      	cmp	r3, r2
 800d15c:	d004      	beq.n	800d168 <HAL_TIM_PWM_Start_DMA+0x1c8>
 800d15e:	68fb      	ldr	r3, [r7, #12]
 800d160:	681b      	ldr	r3, [r3, #0]
 800d162:	4a17      	ldr	r2, [pc, #92]	; (800d1c0 <HAL_TIM_PWM_Start_DMA+0x220>)
 800d164:	4293      	cmp	r3, r2
 800d166:	d101      	bne.n	800d16c <HAL_TIM_PWM_Start_DMA+0x1cc>
 800d168:	2301      	movs	r3, #1
 800d16a:	e000      	b.n	800d16e <HAL_TIM_PWM_Start_DMA+0x1ce>
 800d16c:	2300      	movs	r3, #0
 800d16e:	2b00      	cmp	r3, #0
 800d170:	d007      	beq.n	800d182 <HAL_TIM_PWM_Start_DMA+0x1e2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800d172:	68fb      	ldr	r3, [r7, #12]
 800d174:	681b      	ldr	r3, [r3, #0]
 800d176:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d178:	68fb      	ldr	r3, [r7, #12]
 800d17a:	681b      	ldr	r3, [r3, #0]
 800d17c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d180:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d182:	68fb      	ldr	r3, [r7, #12]
 800d184:	681b      	ldr	r3, [r3, #0]
 800d186:	689b      	ldr	r3, [r3, #8]
 800d188:	f003 0307 	and.w	r3, r3, #7
 800d18c:	617b      	str	r3, [r7, #20]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d18e:	697b      	ldr	r3, [r7, #20]
 800d190:	2b06      	cmp	r3, #6
 800d192:	d007      	beq.n	800d1a4 <HAL_TIM_PWM_Start_DMA+0x204>
  {
    __HAL_TIM_ENABLE(htim);
 800d194:	68fb      	ldr	r3, [r7, #12]
 800d196:	681b      	ldr	r3, [r3, #0]
 800d198:	681a      	ldr	r2, [r3, #0]
 800d19a:	68fb      	ldr	r3, [r7, #12]
 800d19c:	681b      	ldr	r3, [r3, #0]
 800d19e:	f042 0201 	orr.w	r2, r2, #1
 800d1a2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800d1a4:	2300      	movs	r3, #0
}
 800d1a6:	4618      	mov	r0, r3
 800d1a8:	3718      	adds	r7, #24
 800d1aa:	46bd      	mov	sp, r7
 800d1ac:	bd80      	pop	{r7, pc}
 800d1ae:	bf00      	nop
 800d1b0:	0800d6bd 	.word	0x0800d6bd
 800d1b4:	0800d72d 	.word	0x0800d72d
 800d1b8:	0800d699 	.word	0x0800d699
 800d1bc:	40010000 	.word	0x40010000
 800d1c0:	40010400 	.word	0x40010400

0800d1c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d1c4:	b580      	push	{r7, lr}
 800d1c6:	b082      	sub	sp, #8
 800d1c8:	af00      	add	r7, sp, #0
 800d1ca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	681b      	ldr	r3, [r3, #0]
 800d1d0:	691b      	ldr	r3, [r3, #16]
 800d1d2:	f003 0302 	and.w	r3, r3, #2
 800d1d6:	2b02      	cmp	r3, #2
 800d1d8:	d122      	bne.n	800d220 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	681b      	ldr	r3, [r3, #0]
 800d1de:	68db      	ldr	r3, [r3, #12]
 800d1e0:	f003 0302 	and.w	r3, r3, #2
 800d1e4:	2b02      	cmp	r3, #2
 800d1e6:	d11b      	bne.n	800d220 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	681b      	ldr	r3, [r3, #0]
 800d1ec:	f06f 0202 	mvn.w	r2, #2
 800d1f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	2201      	movs	r2, #1
 800d1f6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	681b      	ldr	r3, [r3, #0]
 800d1fc:	699b      	ldr	r3, [r3, #24]
 800d1fe:	f003 0303 	and.w	r3, r3, #3
 800d202:	2b00      	cmp	r3, #0
 800d204:	d003      	beq.n	800d20e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d206:	6878      	ldr	r0, [r7, #4]
 800d208:	f000 fa14 	bl	800d634 <HAL_TIM_IC_CaptureCallback>
 800d20c:	e005      	b.n	800d21a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d20e:	6878      	ldr	r0, [r7, #4]
 800d210:	f000 fa06 	bl	800d620 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d214:	6878      	ldr	r0, [r7, #4]
 800d216:	f000 fa17 	bl	800d648 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	2200      	movs	r2, #0
 800d21e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	681b      	ldr	r3, [r3, #0]
 800d224:	691b      	ldr	r3, [r3, #16]
 800d226:	f003 0304 	and.w	r3, r3, #4
 800d22a:	2b04      	cmp	r3, #4
 800d22c:	d122      	bne.n	800d274 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	681b      	ldr	r3, [r3, #0]
 800d232:	68db      	ldr	r3, [r3, #12]
 800d234:	f003 0304 	and.w	r3, r3, #4
 800d238:	2b04      	cmp	r3, #4
 800d23a:	d11b      	bne.n	800d274 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	681b      	ldr	r3, [r3, #0]
 800d240:	f06f 0204 	mvn.w	r2, #4
 800d244:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	2202      	movs	r2, #2
 800d24a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	681b      	ldr	r3, [r3, #0]
 800d250:	699b      	ldr	r3, [r3, #24]
 800d252:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d256:	2b00      	cmp	r3, #0
 800d258:	d003      	beq.n	800d262 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d25a:	6878      	ldr	r0, [r7, #4]
 800d25c:	f000 f9ea 	bl	800d634 <HAL_TIM_IC_CaptureCallback>
 800d260:	e005      	b.n	800d26e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d262:	6878      	ldr	r0, [r7, #4]
 800d264:	f000 f9dc 	bl	800d620 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d268:	6878      	ldr	r0, [r7, #4]
 800d26a:	f000 f9ed 	bl	800d648 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	2200      	movs	r2, #0
 800d272:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	681b      	ldr	r3, [r3, #0]
 800d278:	691b      	ldr	r3, [r3, #16]
 800d27a:	f003 0308 	and.w	r3, r3, #8
 800d27e:	2b08      	cmp	r3, #8
 800d280:	d122      	bne.n	800d2c8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	681b      	ldr	r3, [r3, #0]
 800d286:	68db      	ldr	r3, [r3, #12]
 800d288:	f003 0308 	and.w	r3, r3, #8
 800d28c:	2b08      	cmp	r3, #8
 800d28e:	d11b      	bne.n	800d2c8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	681b      	ldr	r3, [r3, #0]
 800d294:	f06f 0208 	mvn.w	r2, #8
 800d298:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	2204      	movs	r2, #4
 800d29e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	681b      	ldr	r3, [r3, #0]
 800d2a4:	69db      	ldr	r3, [r3, #28]
 800d2a6:	f003 0303 	and.w	r3, r3, #3
 800d2aa:	2b00      	cmp	r3, #0
 800d2ac:	d003      	beq.n	800d2b6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d2ae:	6878      	ldr	r0, [r7, #4]
 800d2b0:	f000 f9c0 	bl	800d634 <HAL_TIM_IC_CaptureCallback>
 800d2b4:	e005      	b.n	800d2c2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d2b6:	6878      	ldr	r0, [r7, #4]
 800d2b8:	f000 f9b2 	bl	800d620 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d2bc:	6878      	ldr	r0, [r7, #4]
 800d2be:	f000 f9c3 	bl	800d648 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	2200      	movs	r2, #0
 800d2c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	681b      	ldr	r3, [r3, #0]
 800d2cc:	691b      	ldr	r3, [r3, #16]
 800d2ce:	f003 0310 	and.w	r3, r3, #16
 800d2d2:	2b10      	cmp	r3, #16
 800d2d4:	d122      	bne.n	800d31c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	681b      	ldr	r3, [r3, #0]
 800d2da:	68db      	ldr	r3, [r3, #12]
 800d2dc:	f003 0310 	and.w	r3, r3, #16
 800d2e0:	2b10      	cmp	r3, #16
 800d2e2:	d11b      	bne.n	800d31c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	681b      	ldr	r3, [r3, #0]
 800d2e8:	f06f 0210 	mvn.w	r2, #16
 800d2ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	2208      	movs	r2, #8
 800d2f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	681b      	ldr	r3, [r3, #0]
 800d2f8:	69db      	ldr	r3, [r3, #28]
 800d2fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d2fe:	2b00      	cmp	r3, #0
 800d300:	d003      	beq.n	800d30a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d302:	6878      	ldr	r0, [r7, #4]
 800d304:	f000 f996 	bl	800d634 <HAL_TIM_IC_CaptureCallback>
 800d308:	e005      	b.n	800d316 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d30a:	6878      	ldr	r0, [r7, #4]
 800d30c:	f000 f988 	bl	800d620 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d310:	6878      	ldr	r0, [r7, #4]
 800d312:	f000 f999 	bl	800d648 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	2200      	movs	r2, #0
 800d31a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	681b      	ldr	r3, [r3, #0]
 800d320:	691b      	ldr	r3, [r3, #16]
 800d322:	f003 0301 	and.w	r3, r3, #1
 800d326:	2b01      	cmp	r3, #1
 800d328:	d10e      	bne.n	800d348 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	681b      	ldr	r3, [r3, #0]
 800d32e:	68db      	ldr	r3, [r3, #12]
 800d330:	f003 0301 	and.w	r3, r3, #1
 800d334:	2b01      	cmp	r3, #1
 800d336:	d107      	bne.n	800d348 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	681b      	ldr	r3, [r3, #0]
 800d33c:	f06f 0201 	mvn.w	r2, #1
 800d340:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d342:	6878      	ldr	r0, [r7, #4]
 800d344:	f7f6 f864 	bl	8003410 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	681b      	ldr	r3, [r3, #0]
 800d34c:	691b      	ldr	r3, [r3, #16]
 800d34e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d352:	2b80      	cmp	r3, #128	; 0x80
 800d354:	d10e      	bne.n	800d374 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	681b      	ldr	r3, [r3, #0]
 800d35a:	68db      	ldr	r3, [r3, #12]
 800d35c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d360:	2b80      	cmp	r3, #128	; 0x80
 800d362:	d107      	bne.n	800d374 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	681b      	ldr	r3, [r3, #0]
 800d368:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800d36c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d36e:	6878      	ldr	r0, [r7, #4]
 800d370:	f000 fd10 	bl	800dd94 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	681b      	ldr	r3, [r3, #0]
 800d378:	691b      	ldr	r3, [r3, #16]
 800d37a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d37e:	2b40      	cmp	r3, #64	; 0x40
 800d380:	d10e      	bne.n	800d3a0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	681b      	ldr	r3, [r3, #0]
 800d386:	68db      	ldr	r3, [r3, #12]
 800d388:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d38c:	2b40      	cmp	r3, #64	; 0x40
 800d38e:	d107      	bne.n	800d3a0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	681b      	ldr	r3, [r3, #0]
 800d394:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800d398:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d39a:	6878      	ldr	r0, [r7, #4]
 800d39c:	f000 f968 	bl	800d670 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	681b      	ldr	r3, [r3, #0]
 800d3a4:	691b      	ldr	r3, [r3, #16]
 800d3a6:	f003 0320 	and.w	r3, r3, #32
 800d3aa:	2b20      	cmp	r3, #32
 800d3ac:	d10e      	bne.n	800d3cc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	681b      	ldr	r3, [r3, #0]
 800d3b2:	68db      	ldr	r3, [r3, #12]
 800d3b4:	f003 0320 	and.w	r3, r3, #32
 800d3b8:	2b20      	cmp	r3, #32
 800d3ba:	d107      	bne.n	800d3cc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	681b      	ldr	r3, [r3, #0]
 800d3c0:	f06f 0220 	mvn.w	r2, #32
 800d3c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d3c6:	6878      	ldr	r0, [r7, #4]
 800d3c8:	f000 fcda 	bl	800dd80 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d3cc:	bf00      	nop
 800d3ce:	3708      	adds	r7, #8
 800d3d0:	46bd      	mov	sp, r7
 800d3d2:	bd80      	pop	{r7, pc}

0800d3d4 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800d3d4:	b580      	push	{r7, lr}
 800d3d6:	b084      	sub	sp, #16
 800d3d8:	af00      	add	r7, sp, #0
 800d3da:	60f8      	str	r0, [r7, #12]
 800d3dc:	60b9      	str	r1, [r7, #8]
 800d3de:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800d3e0:	68fb      	ldr	r3, [r7, #12]
 800d3e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d3e6:	2b01      	cmp	r3, #1
 800d3e8:	d101      	bne.n	800d3ee <HAL_TIM_OC_ConfigChannel+0x1a>
 800d3ea:	2302      	movs	r3, #2
 800d3ec:	e04e      	b.n	800d48c <HAL_TIM_OC_ConfigChannel+0xb8>
 800d3ee:	68fb      	ldr	r3, [r7, #12]
 800d3f0:	2201      	movs	r2, #1
 800d3f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800d3f6:	68fb      	ldr	r3, [r7, #12]
 800d3f8:	2202      	movs	r2, #2
 800d3fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	2b0c      	cmp	r3, #12
 800d402:	d839      	bhi.n	800d478 <HAL_TIM_OC_ConfigChannel+0xa4>
 800d404:	a201      	add	r2, pc, #4	; (adr r2, 800d40c <HAL_TIM_OC_ConfigChannel+0x38>)
 800d406:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d40a:	bf00      	nop
 800d40c:	0800d441 	.word	0x0800d441
 800d410:	0800d479 	.word	0x0800d479
 800d414:	0800d479 	.word	0x0800d479
 800d418:	0800d479 	.word	0x0800d479
 800d41c:	0800d44f 	.word	0x0800d44f
 800d420:	0800d479 	.word	0x0800d479
 800d424:	0800d479 	.word	0x0800d479
 800d428:	0800d479 	.word	0x0800d479
 800d42c:	0800d45d 	.word	0x0800d45d
 800d430:	0800d479 	.word	0x0800d479
 800d434:	0800d479 	.word	0x0800d479
 800d438:	0800d479 	.word	0x0800d479
 800d43c:	0800d46b 	.word	0x0800d46b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800d440:	68fb      	ldr	r3, [r7, #12]
 800d442:	681b      	ldr	r3, [r3, #0]
 800d444:	68b9      	ldr	r1, [r7, #8]
 800d446:	4618      	mov	r0, r3
 800d448:	f000 fa48 	bl	800d8dc <TIM_OC1_SetConfig>
      break;
 800d44c:	e015      	b.n	800d47a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800d44e:	68fb      	ldr	r3, [r7, #12]
 800d450:	681b      	ldr	r3, [r3, #0]
 800d452:	68b9      	ldr	r1, [r7, #8]
 800d454:	4618      	mov	r0, r3
 800d456:	f000 fab1 	bl	800d9bc <TIM_OC2_SetConfig>
      break;
 800d45a:	e00e      	b.n	800d47a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800d45c:	68fb      	ldr	r3, [r7, #12]
 800d45e:	681b      	ldr	r3, [r3, #0]
 800d460:	68b9      	ldr	r1, [r7, #8]
 800d462:	4618      	mov	r0, r3
 800d464:	f000 fb20 	bl	800daa8 <TIM_OC3_SetConfig>
      break;
 800d468:	e007      	b.n	800d47a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800d46a:	68fb      	ldr	r3, [r7, #12]
 800d46c:	681b      	ldr	r3, [r3, #0]
 800d46e:	68b9      	ldr	r1, [r7, #8]
 800d470:	4618      	mov	r0, r3
 800d472:	f000 fb8d 	bl	800db90 <TIM_OC4_SetConfig>
      break;
 800d476:	e000      	b.n	800d47a <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      break;
 800d478:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800d47a:	68fb      	ldr	r3, [r7, #12]
 800d47c:	2201      	movs	r2, #1
 800d47e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d482:	68fb      	ldr	r3, [r7, #12]
 800d484:	2200      	movs	r2, #0
 800d486:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d48a:	2300      	movs	r3, #0
}
 800d48c:	4618      	mov	r0, r3
 800d48e:	3710      	adds	r7, #16
 800d490:	46bd      	mov	sp, r7
 800d492:	bd80      	pop	{r7, pc}

0800d494 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800d494:	b580      	push	{r7, lr}
 800d496:	b084      	sub	sp, #16
 800d498:	af00      	add	r7, sp, #0
 800d49a:	60f8      	str	r0, [r7, #12]
 800d49c:	60b9      	str	r1, [r7, #8]
 800d49e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800d4a0:	68fb      	ldr	r3, [r7, #12]
 800d4a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d4a6:	2b01      	cmp	r3, #1
 800d4a8:	d101      	bne.n	800d4ae <HAL_TIM_PWM_ConfigChannel+0x1a>
 800d4aa:	2302      	movs	r3, #2
 800d4ac:	e0b4      	b.n	800d618 <HAL_TIM_PWM_ConfigChannel+0x184>
 800d4ae:	68fb      	ldr	r3, [r7, #12]
 800d4b0:	2201      	movs	r2, #1
 800d4b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800d4b6:	68fb      	ldr	r3, [r7, #12]
 800d4b8:	2202      	movs	r2, #2
 800d4ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	2b0c      	cmp	r3, #12
 800d4c2:	f200 809f 	bhi.w	800d604 <HAL_TIM_PWM_ConfigChannel+0x170>
 800d4c6:	a201      	add	r2, pc, #4	; (adr r2, 800d4cc <HAL_TIM_PWM_ConfigChannel+0x38>)
 800d4c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d4cc:	0800d501 	.word	0x0800d501
 800d4d0:	0800d605 	.word	0x0800d605
 800d4d4:	0800d605 	.word	0x0800d605
 800d4d8:	0800d605 	.word	0x0800d605
 800d4dc:	0800d541 	.word	0x0800d541
 800d4e0:	0800d605 	.word	0x0800d605
 800d4e4:	0800d605 	.word	0x0800d605
 800d4e8:	0800d605 	.word	0x0800d605
 800d4ec:	0800d583 	.word	0x0800d583
 800d4f0:	0800d605 	.word	0x0800d605
 800d4f4:	0800d605 	.word	0x0800d605
 800d4f8:	0800d605 	.word	0x0800d605
 800d4fc:	0800d5c3 	.word	0x0800d5c3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800d500:	68fb      	ldr	r3, [r7, #12]
 800d502:	681b      	ldr	r3, [r3, #0]
 800d504:	68b9      	ldr	r1, [r7, #8]
 800d506:	4618      	mov	r0, r3
 800d508:	f000 f9e8 	bl	800d8dc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800d50c:	68fb      	ldr	r3, [r7, #12]
 800d50e:	681b      	ldr	r3, [r3, #0]
 800d510:	699a      	ldr	r2, [r3, #24]
 800d512:	68fb      	ldr	r3, [r7, #12]
 800d514:	681b      	ldr	r3, [r3, #0]
 800d516:	f042 0208 	orr.w	r2, r2, #8
 800d51a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800d51c:	68fb      	ldr	r3, [r7, #12]
 800d51e:	681b      	ldr	r3, [r3, #0]
 800d520:	699a      	ldr	r2, [r3, #24]
 800d522:	68fb      	ldr	r3, [r7, #12]
 800d524:	681b      	ldr	r3, [r3, #0]
 800d526:	f022 0204 	bic.w	r2, r2, #4
 800d52a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800d52c:	68fb      	ldr	r3, [r7, #12]
 800d52e:	681b      	ldr	r3, [r3, #0]
 800d530:	6999      	ldr	r1, [r3, #24]
 800d532:	68bb      	ldr	r3, [r7, #8]
 800d534:	691a      	ldr	r2, [r3, #16]
 800d536:	68fb      	ldr	r3, [r7, #12]
 800d538:	681b      	ldr	r3, [r3, #0]
 800d53a:	430a      	orrs	r2, r1
 800d53c:	619a      	str	r2, [r3, #24]
      break;
 800d53e:	e062      	b.n	800d606 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800d540:	68fb      	ldr	r3, [r7, #12]
 800d542:	681b      	ldr	r3, [r3, #0]
 800d544:	68b9      	ldr	r1, [r7, #8]
 800d546:	4618      	mov	r0, r3
 800d548:	f000 fa38 	bl	800d9bc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800d54c:	68fb      	ldr	r3, [r7, #12]
 800d54e:	681b      	ldr	r3, [r3, #0]
 800d550:	699a      	ldr	r2, [r3, #24]
 800d552:	68fb      	ldr	r3, [r7, #12]
 800d554:	681b      	ldr	r3, [r3, #0]
 800d556:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d55a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800d55c:	68fb      	ldr	r3, [r7, #12]
 800d55e:	681b      	ldr	r3, [r3, #0]
 800d560:	699a      	ldr	r2, [r3, #24]
 800d562:	68fb      	ldr	r3, [r7, #12]
 800d564:	681b      	ldr	r3, [r3, #0]
 800d566:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d56a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800d56c:	68fb      	ldr	r3, [r7, #12]
 800d56e:	681b      	ldr	r3, [r3, #0]
 800d570:	6999      	ldr	r1, [r3, #24]
 800d572:	68bb      	ldr	r3, [r7, #8]
 800d574:	691b      	ldr	r3, [r3, #16]
 800d576:	021a      	lsls	r2, r3, #8
 800d578:	68fb      	ldr	r3, [r7, #12]
 800d57a:	681b      	ldr	r3, [r3, #0]
 800d57c:	430a      	orrs	r2, r1
 800d57e:	619a      	str	r2, [r3, #24]
      break;
 800d580:	e041      	b.n	800d606 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800d582:	68fb      	ldr	r3, [r7, #12]
 800d584:	681b      	ldr	r3, [r3, #0]
 800d586:	68b9      	ldr	r1, [r7, #8]
 800d588:	4618      	mov	r0, r3
 800d58a:	f000 fa8d 	bl	800daa8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800d58e:	68fb      	ldr	r3, [r7, #12]
 800d590:	681b      	ldr	r3, [r3, #0]
 800d592:	69da      	ldr	r2, [r3, #28]
 800d594:	68fb      	ldr	r3, [r7, #12]
 800d596:	681b      	ldr	r3, [r3, #0]
 800d598:	f042 0208 	orr.w	r2, r2, #8
 800d59c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800d59e:	68fb      	ldr	r3, [r7, #12]
 800d5a0:	681b      	ldr	r3, [r3, #0]
 800d5a2:	69da      	ldr	r2, [r3, #28]
 800d5a4:	68fb      	ldr	r3, [r7, #12]
 800d5a6:	681b      	ldr	r3, [r3, #0]
 800d5a8:	f022 0204 	bic.w	r2, r2, #4
 800d5ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800d5ae:	68fb      	ldr	r3, [r7, #12]
 800d5b0:	681b      	ldr	r3, [r3, #0]
 800d5b2:	69d9      	ldr	r1, [r3, #28]
 800d5b4:	68bb      	ldr	r3, [r7, #8]
 800d5b6:	691a      	ldr	r2, [r3, #16]
 800d5b8:	68fb      	ldr	r3, [r7, #12]
 800d5ba:	681b      	ldr	r3, [r3, #0]
 800d5bc:	430a      	orrs	r2, r1
 800d5be:	61da      	str	r2, [r3, #28]
      break;
 800d5c0:	e021      	b.n	800d606 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800d5c2:	68fb      	ldr	r3, [r7, #12]
 800d5c4:	681b      	ldr	r3, [r3, #0]
 800d5c6:	68b9      	ldr	r1, [r7, #8]
 800d5c8:	4618      	mov	r0, r3
 800d5ca:	f000 fae1 	bl	800db90 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800d5ce:	68fb      	ldr	r3, [r7, #12]
 800d5d0:	681b      	ldr	r3, [r3, #0]
 800d5d2:	69da      	ldr	r2, [r3, #28]
 800d5d4:	68fb      	ldr	r3, [r7, #12]
 800d5d6:	681b      	ldr	r3, [r3, #0]
 800d5d8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d5dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800d5de:	68fb      	ldr	r3, [r7, #12]
 800d5e0:	681b      	ldr	r3, [r3, #0]
 800d5e2:	69da      	ldr	r2, [r3, #28]
 800d5e4:	68fb      	ldr	r3, [r7, #12]
 800d5e6:	681b      	ldr	r3, [r3, #0]
 800d5e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d5ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800d5ee:	68fb      	ldr	r3, [r7, #12]
 800d5f0:	681b      	ldr	r3, [r3, #0]
 800d5f2:	69d9      	ldr	r1, [r3, #28]
 800d5f4:	68bb      	ldr	r3, [r7, #8]
 800d5f6:	691b      	ldr	r3, [r3, #16]
 800d5f8:	021a      	lsls	r2, r3, #8
 800d5fa:	68fb      	ldr	r3, [r7, #12]
 800d5fc:	681b      	ldr	r3, [r3, #0]
 800d5fe:	430a      	orrs	r2, r1
 800d600:	61da      	str	r2, [r3, #28]
      break;
 800d602:	e000      	b.n	800d606 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800d604:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800d606:	68fb      	ldr	r3, [r7, #12]
 800d608:	2201      	movs	r2, #1
 800d60a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d60e:	68fb      	ldr	r3, [r7, #12]
 800d610:	2200      	movs	r2, #0
 800d612:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d616:	2300      	movs	r3, #0
}
 800d618:	4618      	mov	r0, r3
 800d61a:	3710      	adds	r7, #16
 800d61c:	46bd      	mov	sp, r7
 800d61e:	bd80      	pop	{r7, pc}

0800d620 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d620:	b480      	push	{r7}
 800d622:	b083      	sub	sp, #12
 800d624:	af00      	add	r7, sp, #0
 800d626:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d628:	bf00      	nop
 800d62a:	370c      	adds	r7, #12
 800d62c:	46bd      	mov	sp, r7
 800d62e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d632:	4770      	bx	lr

0800d634 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d634:	b480      	push	{r7}
 800d636:	b083      	sub	sp, #12
 800d638:	af00      	add	r7, sp, #0
 800d63a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d63c:	bf00      	nop
 800d63e:	370c      	adds	r7, #12
 800d640:	46bd      	mov	sp, r7
 800d642:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d646:	4770      	bx	lr

0800d648 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d648:	b480      	push	{r7}
 800d64a:	b083      	sub	sp, #12
 800d64c:	af00      	add	r7, sp, #0
 800d64e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d650:	bf00      	nop
 800d652:	370c      	adds	r7, #12
 800d654:	46bd      	mov	sp, r7
 800d656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d65a:	4770      	bx	lr

0800d65c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800d65c:	b480      	push	{r7}
 800d65e:	b083      	sub	sp, #12
 800d660:	af00      	add	r7, sp, #0
 800d662:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800d664:	bf00      	nop
 800d666:	370c      	adds	r7, #12
 800d668:	46bd      	mov	sp, r7
 800d66a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d66e:	4770      	bx	lr

0800d670 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d670:	b480      	push	{r7}
 800d672:	b083      	sub	sp, #12
 800d674:	af00      	add	r7, sp, #0
 800d676:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d678:	bf00      	nop
 800d67a:	370c      	adds	r7, #12
 800d67c:	46bd      	mov	sp, r7
 800d67e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d682:	4770      	bx	lr

0800d684 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800d684:	b480      	push	{r7}
 800d686:	b083      	sub	sp, #12
 800d688:	af00      	add	r7, sp, #0
 800d68a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800d68c:	bf00      	nop
 800d68e:	370c      	adds	r7, #12
 800d690:	46bd      	mov	sp, r7
 800d692:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d696:	4770      	bx	lr

0800d698 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800d698:	b580      	push	{r7, lr}
 800d69a:	b084      	sub	sp, #16
 800d69c:	af00      	add	r7, sp, #0
 800d69e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d6a4:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 800d6a6:	68fb      	ldr	r3, [r7, #12]
 800d6a8:	2201      	movs	r2, #1
 800d6aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800d6ae:	68f8      	ldr	r0, [r7, #12]
 800d6b0:	f7ff ffe8 	bl	800d684 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
}
 800d6b4:	bf00      	nop
 800d6b6:	3710      	adds	r7, #16
 800d6b8:	46bd      	mov	sp, r7
 800d6ba:	bd80      	pop	{r7, pc}

0800d6bc <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 800d6bc:	b580      	push	{r7, lr}
 800d6be:	b084      	sub	sp, #16
 800d6c0:	af00      	add	r7, sp, #0
 800d6c2:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d6c8:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 800d6ca:	68fb      	ldr	r3, [r7, #12]
 800d6cc:	2201      	movs	r2, #1
 800d6ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800d6d2:	68fb      	ldr	r3, [r7, #12]
 800d6d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6d6:	687a      	ldr	r2, [r7, #4]
 800d6d8:	429a      	cmp	r2, r3
 800d6da:	d103      	bne.n	800d6e4 <TIM_DMADelayPulseCplt+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d6dc:	68fb      	ldr	r3, [r7, #12]
 800d6de:	2201      	movs	r2, #1
 800d6e0:	771a      	strb	r2, [r3, #28]
 800d6e2:	e019      	b.n	800d718 <TIM_DMADelayPulseCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800d6e4:	68fb      	ldr	r3, [r7, #12]
 800d6e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d6e8:	687a      	ldr	r2, [r7, #4]
 800d6ea:	429a      	cmp	r2, r3
 800d6ec:	d103      	bne.n	800d6f6 <TIM_DMADelayPulseCplt+0x3a>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d6ee:	68fb      	ldr	r3, [r7, #12]
 800d6f0:	2202      	movs	r2, #2
 800d6f2:	771a      	strb	r2, [r3, #28]
 800d6f4:	e010      	b.n	800d718 <TIM_DMADelayPulseCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800d6f6:	68fb      	ldr	r3, [r7, #12]
 800d6f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d6fa:	687a      	ldr	r2, [r7, #4]
 800d6fc:	429a      	cmp	r2, r3
 800d6fe:	d103      	bne.n	800d708 <TIM_DMADelayPulseCplt+0x4c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d700:	68fb      	ldr	r3, [r7, #12]
 800d702:	2204      	movs	r2, #4
 800d704:	771a      	strb	r2, [r3, #28]
 800d706:	e007      	b.n	800d718 <TIM_DMADelayPulseCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800d708:	68fb      	ldr	r3, [r7, #12]
 800d70a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d70c:	687a      	ldr	r2, [r7, #4]
 800d70e:	429a      	cmp	r2, r3
 800d710:	d102      	bne.n	800d718 <TIM_DMADelayPulseCplt+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d712:	68fb      	ldr	r3, [r7, #12]
 800d714:	2208      	movs	r2, #8
 800d716:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d718:	68f8      	ldr	r0, [r7, #12]
 800d71a:	f7ff ff95 	bl	800d648 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d71e:	68fb      	ldr	r3, [r7, #12]
 800d720:	2200      	movs	r2, #0
 800d722:	771a      	strb	r2, [r3, #28]
}
 800d724:	bf00      	nop
 800d726:	3710      	adds	r7, #16
 800d728:	46bd      	mov	sp, r7
 800d72a:	bd80      	pop	{r7, pc}

0800d72c <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 800d72c:	b580      	push	{r7, lr}
 800d72e:	b084      	sub	sp, #16
 800d730:	af00      	add	r7, sp, #0
 800d732:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d738:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 800d73a:	68fb      	ldr	r3, [r7, #12]
 800d73c:	2201      	movs	r2, #1
 800d73e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800d742:	68fb      	ldr	r3, [r7, #12]
 800d744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d746:	687a      	ldr	r2, [r7, #4]
 800d748:	429a      	cmp	r2, r3
 800d74a:	d103      	bne.n	800d754 <TIM_DMADelayPulseHalfCplt+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d74c:	68fb      	ldr	r3, [r7, #12]
 800d74e:	2201      	movs	r2, #1
 800d750:	771a      	strb	r2, [r3, #28]
 800d752:	e019      	b.n	800d788 <TIM_DMADelayPulseHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800d754:	68fb      	ldr	r3, [r7, #12]
 800d756:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d758:	687a      	ldr	r2, [r7, #4]
 800d75a:	429a      	cmp	r2, r3
 800d75c:	d103      	bne.n	800d766 <TIM_DMADelayPulseHalfCplt+0x3a>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d75e:	68fb      	ldr	r3, [r7, #12]
 800d760:	2202      	movs	r2, #2
 800d762:	771a      	strb	r2, [r3, #28]
 800d764:	e010      	b.n	800d788 <TIM_DMADelayPulseHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800d766:	68fb      	ldr	r3, [r7, #12]
 800d768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d76a:	687a      	ldr	r2, [r7, #4]
 800d76c:	429a      	cmp	r2, r3
 800d76e:	d103      	bne.n	800d778 <TIM_DMADelayPulseHalfCplt+0x4c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d770:	68fb      	ldr	r3, [r7, #12]
 800d772:	2204      	movs	r2, #4
 800d774:	771a      	strb	r2, [r3, #28]
 800d776:	e007      	b.n	800d788 <TIM_DMADelayPulseHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800d778:	68fb      	ldr	r3, [r7, #12]
 800d77a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d77c:	687a      	ldr	r2, [r7, #4]
 800d77e:	429a      	cmp	r2, r3
 800d780:	d102      	bne.n	800d788 <TIM_DMADelayPulseHalfCplt+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d782:	68fb      	ldr	r3, [r7, #12]
 800d784:	2208      	movs	r2, #8
 800d786:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 800d788:	68f8      	ldr	r0, [r7, #12]
 800d78a:	f7ff ff67 	bl	800d65c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d78e:	68fb      	ldr	r3, [r7, #12]
 800d790:	2200      	movs	r2, #0
 800d792:	771a      	strb	r2, [r3, #28]
}
 800d794:	bf00      	nop
 800d796:	3710      	adds	r7, #16
 800d798:	46bd      	mov	sp, r7
 800d79a:	bd80      	pop	{r7, pc}

0800d79c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800d79c:	b480      	push	{r7}
 800d79e:	b085      	sub	sp, #20
 800d7a0:	af00      	add	r7, sp, #0
 800d7a2:	6078      	str	r0, [r7, #4]
 800d7a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	681b      	ldr	r3, [r3, #0]
 800d7aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	4a40      	ldr	r2, [pc, #256]	; (800d8b0 <TIM_Base_SetConfig+0x114>)
 800d7b0:	4293      	cmp	r3, r2
 800d7b2:	d013      	beq.n	800d7dc <TIM_Base_SetConfig+0x40>
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d7ba:	d00f      	beq.n	800d7dc <TIM_Base_SetConfig+0x40>
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	4a3d      	ldr	r2, [pc, #244]	; (800d8b4 <TIM_Base_SetConfig+0x118>)
 800d7c0:	4293      	cmp	r3, r2
 800d7c2:	d00b      	beq.n	800d7dc <TIM_Base_SetConfig+0x40>
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	4a3c      	ldr	r2, [pc, #240]	; (800d8b8 <TIM_Base_SetConfig+0x11c>)
 800d7c8:	4293      	cmp	r3, r2
 800d7ca:	d007      	beq.n	800d7dc <TIM_Base_SetConfig+0x40>
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	4a3b      	ldr	r2, [pc, #236]	; (800d8bc <TIM_Base_SetConfig+0x120>)
 800d7d0:	4293      	cmp	r3, r2
 800d7d2:	d003      	beq.n	800d7dc <TIM_Base_SetConfig+0x40>
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	4a3a      	ldr	r2, [pc, #232]	; (800d8c0 <TIM_Base_SetConfig+0x124>)
 800d7d8:	4293      	cmp	r3, r2
 800d7da:	d108      	bne.n	800d7ee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d7dc:	68fb      	ldr	r3, [r7, #12]
 800d7de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d7e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d7e4:	683b      	ldr	r3, [r7, #0]
 800d7e6:	685b      	ldr	r3, [r3, #4]
 800d7e8:	68fa      	ldr	r2, [r7, #12]
 800d7ea:	4313      	orrs	r3, r2
 800d7ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	4a2f      	ldr	r2, [pc, #188]	; (800d8b0 <TIM_Base_SetConfig+0x114>)
 800d7f2:	4293      	cmp	r3, r2
 800d7f4:	d02b      	beq.n	800d84e <TIM_Base_SetConfig+0xb2>
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d7fc:	d027      	beq.n	800d84e <TIM_Base_SetConfig+0xb2>
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	4a2c      	ldr	r2, [pc, #176]	; (800d8b4 <TIM_Base_SetConfig+0x118>)
 800d802:	4293      	cmp	r3, r2
 800d804:	d023      	beq.n	800d84e <TIM_Base_SetConfig+0xb2>
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	4a2b      	ldr	r2, [pc, #172]	; (800d8b8 <TIM_Base_SetConfig+0x11c>)
 800d80a:	4293      	cmp	r3, r2
 800d80c:	d01f      	beq.n	800d84e <TIM_Base_SetConfig+0xb2>
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	4a2a      	ldr	r2, [pc, #168]	; (800d8bc <TIM_Base_SetConfig+0x120>)
 800d812:	4293      	cmp	r3, r2
 800d814:	d01b      	beq.n	800d84e <TIM_Base_SetConfig+0xb2>
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	4a29      	ldr	r2, [pc, #164]	; (800d8c0 <TIM_Base_SetConfig+0x124>)
 800d81a:	4293      	cmp	r3, r2
 800d81c:	d017      	beq.n	800d84e <TIM_Base_SetConfig+0xb2>
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	4a28      	ldr	r2, [pc, #160]	; (800d8c4 <TIM_Base_SetConfig+0x128>)
 800d822:	4293      	cmp	r3, r2
 800d824:	d013      	beq.n	800d84e <TIM_Base_SetConfig+0xb2>
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	4a27      	ldr	r2, [pc, #156]	; (800d8c8 <TIM_Base_SetConfig+0x12c>)
 800d82a:	4293      	cmp	r3, r2
 800d82c:	d00f      	beq.n	800d84e <TIM_Base_SetConfig+0xb2>
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	4a26      	ldr	r2, [pc, #152]	; (800d8cc <TIM_Base_SetConfig+0x130>)
 800d832:	4293      	cmp	r3, r2
 800d834:	d00b      	beq.n	800d84e <TIM_Base_SetConfig+0xb2>
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	4a25      	ldr	r2, [pc, #148]	; (800d8d0 <TIM_Base_SetConfig+0x134>)
 800d83a:	4293      	cmp	r3, r2
 800d83c:	d007      	beq.n	800d84e <TIM_Base_SetConfig+0xb2>
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	4a24      	ldr	r2, [pc, #144]	; (800d8d4 <TIM_Base_SetConfig+0x138>)
 800d842:	4293      	cmp	r3, r2
 800d844:	d003      	beq.n	800d84e <TIM_Base_SetConfig+0xb2>
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	4a23      	ldr	r2, [pc, #140]	; (800d8d8 <TIM_Base_SetConfig+0x13c>)
 800d84a:	4293      	cmp	r3, r2
 800d84c:	d108      	bne.n	800d860 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d84e:	68fb      	ldr	r3, [r7, #12]
 800d850:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d854:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d856:	683b      	ldr	r3, [r7, #0]
 800d858:	68db      	ldr	r3, [r3, #12]
 800d85a:	68fa      	ldr	r2, [r7, #12]
 800d85c:	4313      	orrs	r3, r2
 800d85e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d860:	68fb      	ldr	r3, [r7, #12]
 800d862:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800d866:	683b      	ldr	r3, [r7, #0]
 800d868:	695b      	ldr	r3, [r3, #20]
 800d86a:	4313      	orrs	r3, r2
 800d86c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	68fa      	ldr	r2, [r7, #12]
 800d872:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d874:	683b      	ldr	r3, [r7, #0]
 800d876:	689a      	ldr	r2, [r3, #8]
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d87c:	683b      	ldr	r3, [r7, #0]
 800d87e:	681a      	ldr	r2, [r3, #0]
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	4a0a      	ldr	r2, [pc, #40]	; (800d8b0 <TIM_Base_SetConfig+0x114>)
 800d888:	4293      	cmp	r3, r2
 800d88a:	d003      	beq.n	800d894 <TIM_Base_SetConfig+0xf8>
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	4a0c      	ldr	r2, [pc, #48]	; (800d8c0 <TIM_Base_SetConfig+0x124>)
 800d890:	4293      	cmp	r3, r2
 800d892:	d103      	bne.n	800d89c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d894:	683b      	ldr	r3, [r7, #0]
 800d896:	691a      	ldr	r2, [r3, #16]
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	2201      	movs	r2, #1
 800d8a0:	615a      	str	r2, [r3, #20]
}
 800d8a2:	bf00      	nop
 800d8a4:	3714      	adds	r7, #20
 800d8a6:	46bd      	mov	sp, r7
 800d8a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8ac:	4770      	bx	lr
 800d8ae:	bf00      	nop
 800d8b0:	40010000 	.word	0x40010000
 800d8b4:	40000400 	.word	0x40000400
 800d8b8:	40000800 	.word	0x40000800
 800d8bc:	40000c00 	.word	0x40000c00
 800d8c0:	40010400 	.word	0x40010400
 800d8c4:	40014000 	.word	0x40014000
 800d8c8:	40014400 	.word	0x40014400
 800d8cc:	40014800 	.word	0x40014800
 800d8d0:	40001800 	.word	0x40001800
 800d8d4:	40001c00 	.word	0x40001c00
 800d8d8:	40002000 	.word	0x40002000

0800d8dc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d8dc:	b480      	push	{r7}
 800d8de:	b087      	sub	sp, #28
 800d8e0:	af00      	add	r7, sp, #0
 800d8e2:	6078      	str	r0, [r7, #4]
 800d8e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	6a1b      	ldr	r3, [r3, #32]
 800d8ea:	f023 0201 	bic.w	r2, r3, #1
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	6a1b      	ldr	r3, [r3, #32]
 800d8f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	685b      	ldr	r3, [r3, #4]
 800d8fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	699b      	ldr	r3, [r3, #24]
 800d902:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800d904:	68fb      	ldr	r3, [r7, #12]
 800d906:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d90a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800d90c:	68fb      	ldr	r3, [r7, #12]
 800d90e:	f023 0303 	bic.w	r3, r3, #3
 800d912:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d914:	683b      	ldr	r3, [r7, #0]
 800d916:	681b      	ldr	r3, [r3, #0]
 800d918:	68fa      	ldr	r2, [r7, #12]
 800d91a:	4313      	orrs	r3, r2
 800d91c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800d91e:	697b      	ldr	r3, [r7, #20]
 800d920:	f023 0302 	bic.w	r3, r3, #2
 800d924:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800d926:	683b      	ldr	r3, [r7, #0]
 800d928:	689b      	ldr	r3, [r3, #8]
 800d92a:	697a      	ldr	r2, [r7, #20]
 800d92c:	4313      	orrs	r3, r2
 800d92e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	4a20      	ldr	r2, [pc, #128]	; (800d9b4 <TIM_OC1_SetConfig+0xd8>)
 800d934:	4293      	cmp	r3, r2
 800d936:	d003      	beq.n	800d940 <TIM_OC1_SetConfig+0x64>
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	4a1f      	ldr	r2, [pc, #124]	; (800d9b8 <TIM_OC1_SetConfig+0xdc>)
 800d93c:	4293      	cmp	r3, r2
 800d93e:	d10c      	bne.n	800d95a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800d940:	697b      	ldr	r3, [r7, #20]
 800d942:	f023 0308 	bic.w	r3, r3, #8
 800d946:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800d948:	683b      	ldr	r3, [r7, #0]
 800d94a:	68db      	ldr	r3, [r3, #12]
 800d94c:	697a      	ldr	r2, [r7, #20]
 800d94e:	4313      	orrs	r3, r2
 800d950:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800d952:	697b      	ldr	r3, [r7, #20]
 800d954:	f023 0304 	bic.w	r3, r3, #4
 800d958:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	4a15      	ldr	r2, [pc, #84]	; (800d9b4 <TIM_OC1_SetConfig+0xd8>)
 800d95e:	4293      	cmp	r3, r2
 800d960:	d003      	beq.n	800d96a <TIM_OC1_SetConfig+0x8e>
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	4a14      	ldr	r2, [pc, #80]	; (800d9b8 <TIM_OC1_SetConfig+0xdc>)
 800d966:	4293      	cmp	r3, r2
 800d968:	d111      	bne.n	800d98e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800d96a:	693b      	ldr	r3, [r7, #16]
 800d96c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d970:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800d972:	693b      	ldr	r3, [r7, #16]
 800d974:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d978:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800d97a:	683b      	ldr	r3, [r7, #0]
 800d97c:	695b      	ldr	r3, [r3, #20]
 800d97e:	693a      	ldr	r2, [r7, #16]
 800d980:	4313      	orrs	r3, r2
 800d982:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800d984:	683b      	ldr	r3, [r7, #0]
 800d986:	699b      	ldr	r3, [r3, #24]
 800d988:	693a      	ldr	r2, [r7, #16]
 800d98a:	4313      	orrs	r3, r2
 800d98c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	693a      	ldr	r2, [r7, #16]
 800d992:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	68fa      	ldr	r2, [r7, #12]
 800d998:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800d99a:	683b      	ldr	r3, [r7, #0]
 800d99c:	685a      	ldr	r2, [r3, #4]
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	697a      	ldr	r2, [r7, #20]
 800d9a6:	621a      	str	r2, [r3, #32]
}
 800d9a8:	bf00      	nop
 800d9aa:	371c      	adds	r7, #28
 800d9ac:	46bd      	mov	sp, r7
 800d9ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9b2:	4770      	bx	lr
 800d9b4:	40010000 	.word	0x40010000
 800d9b8:	40010400 	.word	0x40010400

0800d9bc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d9bc:	b480      	push	{r7}
 800d9be:	b087      	sub	sp, #28
 800d9c0:	af00      	add	r7, sp, #0
 800d9c2:	6078      	str	r0, [r7, #4]
 800d9c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	6a1b      	ldr	r3, [r3, #32]
 800d9ca:	f023 0210 	bic.w	r2, r3, #16
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	6a1b      	ldr	r3, [r3, #32]
 800d9d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	685b      	ldr	r3, [r3, #4]
 800d9dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	699b      	ldr	r3, [r3, #24]
 800d9e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800d9e4:	68fb      	ldr	r3, [r7, #12]
 800d9e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d9ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800d9ec:	68fb      	ldr	r3, [r7, #12]
 800d9ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d9f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d9f4:	683b      	ldr	r3, [r7, #0]
 800d9f6:	681b      	ldr	r3, [r3, #0]
 800d9f8:	021b      	lsls	r3, r3, #8
 800d9fa:	68fa      	ldr	r2, [r7, #12]
 800d9fc:	4313      	orrs	r3, r2
 800d9fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800da00:	697b      	ldr	r3, [r7, #20]
 800da02:	f023 0320 	bic.w	r3, r3, #32
 800da06:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800da08:	683b      	ldr	r3, [r7, #0]
 800da0a:	689b      	ldr	r3, [r3, #8]
 800da0c:	011b      	lsls	r3, r3, #4
 800da0e:	697a      	ldr	r2, [r7, #20]
 800da10:	4313      	orrs	r3, r2
 800da12:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	4a22      	ldr	r2, [pc, #136]	; (800daa0 <TIM_OC2_SetConfig+0xe4>)
 800da18:	4293      	cmp	r3, r2
 800da1a:	d003      	beq.n	800da24 <TIM_OC2_SetConfig+0x68>
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	4a21      	ldr	r2, [pc, #132]	; (800daa4 <TIM_OC2_SetConfig+0xe8>)
 800da20:	4293      	cmp	r3, r2
 800da22:	d10d      	bne.n	800da40 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800da24:	697b      	ldr	r3, [r7, #20]
 800da26:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800da2a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800da2c:	683b      	ldr	r3, [r7, #0]
 800da2e:	68db      	ldr	r3, [r3, #12]
 800da30:	011b      	lsls	r3, r3, #4
 800da32:	697a      	ldr	r2, [r7, #20]
 800da34:	4313      	orrs	r3, r2
 800da36:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800da38:	697b      	ldr	r3, [r7, #20]
 800da3a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800da3e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	4a17      	ldr	r2, [pc, #92]	; (800daa0 <TIM_OC2_SetConfig+0xe4>)
 800da44:	4293      	cmp	r3, r2
 800da46:	d003      	beq.n	800da50 <TIM_OC2_SetConfig+0x94>
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	4a16      	ldr	r2, [pc, #88]	; (800daa4 <TIM_OC2_SetConfig+0xe8>)
 800da4c:	4293      	cmp	r3, r2
 800da4e:	d113      	bne.n	800da78 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800da50:	693b      	ldr	r3, [r7, #16]
 800da52:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800da56:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800da58:	693b      	ldr	r3, [r7, #16]
 800da5a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800da5e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800da60:	683b      	ldr	r3, [r7, #0]
 800da62:	695b      	ldr	r3, [r3, #20]
 800da64:	009b      	lsls	r3, r3, #2
 800da66:	693a      	ldr	r2, [r7, #16]
 800da68:	4313      	orrs	r3, r2
 800da6a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800da6c:	683b      	ldr	r3, [r7, #0]
 800da6e:	699b      	ldr	r3, [r3, #24]
 800da70:	009b      	lsls	r3, r3, #2
 800da72:	693a      	ldr	r2, [r7, #16]
 800da74:	4313      	orrs	r3, r2
 800da76:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	693a      	ldr	r2, [r7, #16]
 800da7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	68fa      	ldr	r2, [r7, #12]
 800da82:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800da84:	683b      	ldr	r3, [r7, #0]
 800da86:	685a      	ldr	r2, [r3, #4]
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	697a      	ldr	r2, [r7, #20]
 800da90:	621a      	str	r2, [r3, #32]
}
 800da92:	bf00      	nop
 800da94:	371c      	adds	r7, #28
 800da96:	46bd      	mov	sp, r7
 800da98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da9c:	4770      	bx	lr
 800da9e:	bf00      	nop
 800daa0:	40010000 	.word	0x40010000
 800daa4:	40010400 	.word	0x40010400

0800daa8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800daa8:	b480      	push	{r7}
 800daaa:	b087      	sub	sp, #28
 800daac:	af00      	add	r7, sp, #0
 800daae:	6078      	str	r0, [r7, #4]
 800dab0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	6a1b      	ldr	r3, [r3, #32]
 800dab6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	6a1b      	ldr	r3, [r3, #32]
 800dac2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	685b      	ldr	r3, [r3, #4]
 800dac8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	69db      	ldr	r3, [r3, #28]
 800dace:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800dad0:	68fb      	ldr	r3, [r7, #12]
 800dad2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dad6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800dad8:	68fb      	ldr	r3, [r7, #12]
 800dada:	f023 0303 	bic.w	r3, r3, #3
 800dade:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800dae0:	683b      	ldr	r3, [r7, #0]
 800dae2:	681b      	ldr	r3, [r3, #0]
 800dae4:	68fa      	ldr	r2, [r7, #12]
 800dae6:	4313      	orrs	r3, r2
 800dae8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800daea:	697b      	ldr	r3, [r7, #20]
 800daec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800daf0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800daf2:	683b      	ldr	r3, [r7, #0]
 800daf4:	689b      	ldr	r3, [r3, #8]
 800daf6:	021b      	lsls	r3, r3, #8
 800daf8:	697a      	ldr	r2, [r7, #20]
 800dafa:	4313      	orrs	r3, r2
 800dafc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	4a21      	ldr	r2, [pc, #132]	; (800db88 <TIM_OC3_SetConfig+0xe0>)
 800db02:	4293      	cmp	r3, r2
 800db04:	d003      	beq.n	800db0e <TIM_OC3_SetConfig+0x66>
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	4a20      	ldr	r2, [pc, #128]	; (800db8c <TIM_OC3_SetConfig+0xe4>)
 800db0a:	4293      	cmp	r3, r2
 800db0c:	d10d      	bne.n	800db2a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800db0e:	697b      	ldr	r3, [r7, #20]
 800db10:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800db14:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800db16:	683b      	ldr	r3, [r7, #0]
 800db18:	68db      	ldr	r3, [r3, #12]
 800db1a:	021b      	lsls	r3, r3, #8
 800db1c:	697a      	ldr	r2, [r7, #20]
 800db1e:	4313      	orrs	r3, r2
 800db20:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800db22:	697b      	ldr	r3, [r7, #20]
 800db24:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800db28:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	4a16      	ldr	r2, [pc, #88]	; (800db88 <TIM_OC3_SetConfig+0xe0>)
 800db2e:	4293      	cmp	r3, r2
 800db30:	d003      	beq.n	800db3a <TIM_OC3_SetConfig+0x92>
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	4a15      	ldr	r2, [pc, #84]	; (800db8c <TIM_OC3_SetConfig+0xe4>)
 800db36:	4293      	cmp	r3, r2
 800db38:	d113      	bne.n	800db62 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800db3a:	693b      	ldr	r3, [r7, #16]
 800db3c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800db40:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800db42:	693b      	ldr	r3, [r7, #16]
 800db44:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800db48:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800db4a:	683b      	ldr	r3, [r7, #0]
 800db4c:	695b      	ldr	r3, [r3, #20]
 800db4e:	011b      	lsls	r3, r3, #4
 800db50:	693a      	ldr	r2, [r7, #16]
 800db52:	4313      	orrs	r3, r2
 800db54:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800db56:	683b      	ldr	r3, [r7, #0]
 800db58:	699b      	ldr	r3, [r3, #24]
 800db5a:	011b      	lsls	r3, r3, #4
 800db5c:	693a      	ldr	r2, [r7, #16]
 800db5e:	4313      	orrs	r3, r2
 800db60:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	693a      	ldr	r2, [r7, #16]
 800db66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	68fa      	ldr	r2, [r7, #12]
 800db6c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800db6e:	683b      	ldr	r3, [r7, #0]
 800db70:	685a      	ldr	r2, [r3, #4]
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	697a      	ldr	r2, [r7, #20]
 800db7a:	621a      	str	r2, [r3, #32]
}
 800db7c:	bf00      	nop
 800db7e:	371c      	adds	r7, #28
 800db80:	46bd      	mov	sp, r7
 800db82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db86:	4770      	bx	lr
 800db88:	40010000 	.word	0x40010000
 800db8c:	40010400 	.word	0x40010400

0800db90 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800db90:	b480      	push	{r7}
 800db92:	b087      	sub	sp, #28
 800db94:	af00      	add	r7, sp, #0
 800db96:	6078      	str	r0, [r7, #4]
 800db98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	6a1b      	ldr	r3, [r3, #32]
 800db9e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	6a1b      	ldr	r3, [r3, #32]
 800dbaa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	685b      	ldr	r3, [r3, #4]
 800dbb0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	69db      	ldr	r3, [r3, #28]
 800dbb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800dbb8:	68fb      	ldr	r3, [r7, #12]
 800dbba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800dbbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800dbc0:	68fb      	ldr	r3, [r7, #12]
 800dbc2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800dbc6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800dbc8:	683b      	ldr	r3, [r7, #0]
 800dbca:	681b      	ldr	r3, [r3, #0]
 800dbcc:	021b      	lsls	r3, r3, #8
 800dbce:	68fa      	ldr	r2, [r7, #12]
 800dbd0:	4313      	orrs	r3, r2
 800dbd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800dbd4:	693b      	ldr	r3, [r7, #16]
 800dbd6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800dbda:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800dbdc:	683b      	ldr	r3, [r7, #0]
 800dbde:	689b      	ldr	r3, [r3, #8]
 800dbe0:	031b      	lsls	r3, r3, #12
 800dbe2:	693a      	ldr	r2, [r7, #16]
 800dbe4:	4313      	orrs	r3, r2
 800dbe6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	4a12      	ldr	r2, [pc, #72]	; (800dc34 <TIM_OC4_SetConfig+0xa4>)
 800dbec:	4293      	cmp	r3, r2
 800dbee:	d003      	beq.n	800dbf8 <TIM_OC4_SetConfig+0x68>
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	4a11      	ldr	r2, [pc, #68]	; (800dc38 <TIM_OC4_SetConfig+0xa8>)
 800dbf4:	4293      	cmp	r3, r2
 800dbf6:	d109      	bne.n	800dc0c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800dbf8:	697b      	ldr	r3, [r7, #20]
 800dbfa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800dbfe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800dc00:	683b      	ldr	r3, [r7, #0]
 800dc02:	695b      	ldr	r3, [r3, #20]
 800dc04:	019b      	lsls	r3, r3, #6
 800dc06:	697a      	ldr	r2, [r7, #20]
 800dc08:	4313      	orrs	r3, r2
 800dc0a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	697a      	ldr	r2, [r7, #20]
 800dc10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	68fa      	ldr	r2, [r7, #12]
 800dc16:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800dc18:	683b      	ldr	r3, [r7, #0]
 800dc1a:	685a      	ldr	r2, [r3, #4]
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	693a      	ldr	r2, [r7, #16]
 800dc24:	621a      	str	r2, [r3, #32]
}
 800dc26:	bf00      	nop
 800dc28:	371c      	adds	r7, #28
 800dc2a:	46bd      	mov	sp, r7
 800dc2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc30:	4770      	bx	lr
 800dc32:	bf00      	nop
 800dc34:	40010000 	.word	0x40010000
 800dc38:	40010400 	.word	0x40010400

0800dc3c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800dc3c:	b480      	push	{r7}
 800dc3e:	b087      	sub	sp, #28
 800dc40:	af00      	add	r7, sp, #0
 800dc42:	60f8      	str	r0, [r7, #12]
 800dc44:	60b9      	str	r1, [r7, #8]
 800dc46:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800dc48:	68bb      	ldr	r3, [r7, #8]
 800dc4a:	f003 031f 	and.w	r3, r3, #31
 800dc4e:	2201      	movs	r2, #1
 800dc50:	fa02 f303 	lsl.w	r3, r2, r3
 800dc54:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800dc56:	68fb      	ldr	r3, [r7, #12]
 800dc58:	6a1a      	ldr	r2, [r3, #32]
 800dc5a:	697b      	ldr	r3, [r7, #20]
 800dc5c:	43db      	mvns	r3, r3
 800dc5e:	401a      	ands	r2, r3
 800dc60:	68fb      	ldr	r3, [r7, #12]
 800dc62:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800dc64:	68fb      	ldr	r3, [r7, #12]
 800dc66:	6a1a      	ldr	r2, [r3, #32]
 800dc68:	68bb      	ldr	r3, [r7, #8]
 800dc6a:	f003 031f 	and.w	r3, r3, #31
 800dc6e:	6879      	ldr	r1, [r7, #4]
 800dc70:	fa01 f303 	lsl.w	r3, r1, r3
 800dc74:	431a      	orrs	r2, r3
 800dc76:	68fb      	ldr	r3, [r7, #12]
 800dc78:	621a      	str	r2, [r3, #32]
}
 800dc7a:	bf00      	nop
 800dc7c:	371c      	adds	r7, #28
 800dc7e:	46bd      	mov	sp, r7
 800dc80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc84:	4770      	bx	lr
	...

0800dc88 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800dc88:	b480      	push	{r7}
 800dc8a:	b085      	sub	sp, #20
 800dc8c:	af00      	add	r7, sp, #0
 800dc8e:	6078      	str	r0, [r7, #4]
 800dc90:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800dc98:	2b01      	cmp	r3, #1
 800dc9a:	d101      	bne.n	800dca0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800dc9c:	2302      	movs	r3, #2
 800dc9e:	e05a      	b.n	800dd56 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	2201      	movs	r2, #1
 800dca4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	2202      	movs	r2, #2
 800dcac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	681b      	ldr	r3, [r3, #0]
 800dcb4:	685b      	ldr	r3, [r3, #4]
 800dcb6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	681b      	ldr	r3, [r3, #0]
 800dcbc:	689b      	ldr	r3, [r3, #8]
 800dcbe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800dcc0:	68fb      	ldr	r3, [r7, #12]
 800dcc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dcc6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800dcc8:	683b      	ldr	r3, [r7, #0]
 800dcca:	681b      	ldr	r3, [r3, #0]
 800dccc:	68fa      	ldr	r2, [r7, #12]
 800dcce:	4313      	orrs	r3, r2
 800dcd0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	681b      	ldr	r3, [r3, #0]
 800dcd6:	68fa      	ldr	r2, [r7, #12]
 800dcd8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	681b      	ldr	r3, [r3, #0]
 800dcde:	4a21      	ldr	r2, [pc, #132]	; (800dd64 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800dce0:	4293      	cmp	r3, r2
 800dce2:	d022      	beq.n	800dd2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	681b      	ldr	r3, [r3, #0]
 800dce8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dcec:	d01d      	beq.n	800dd2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	681b      	ldr	r3, [r3, #0]
 800dcf2:	4a1d      	ldr	r2, [pc, #116]	; (800dd68 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800dcf4:	4293      	cmp	r3, r2
 800dcf6:	d018      	beq.n	800dd2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	681b      	ldr	r3, [r3, #0]
 800dcfc:	4a1b      	ldr	r2, [pc, #108]	; (800dd6c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800dcfe:	4293      	cmp	r3, r2
 800dd00:	d013      	beq.n	800dd2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	681b      	ldr	r3, [r3, #0]
 800dd06:	4a1a      	ldr	r2, [pc, #104]	; (800dd70 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800dd08:	4293      	cmp	r3, r2
 800dd0a:	d00e      	beq.n	800dd2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	681b      	ldr	r3, [r3, #0]
 800dd10:	4a18      	ldr	r2, [pc, #96]	; (800dd74 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800dd12:	4293      	cmp	r3, r2
 800dd14:	d009      	beq.n	800dd2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	681b      	ldr	r3, [r3, #0]
 800dd1a:	4a17      	ldr	r2, [pc, #92]	; (800dd78 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800dd1c:	4293      	cmp	r3, r2
 800dd1e:	d004      	beq.n	800dd2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	681b      	ldr	r3, [r3, #0]
 800dd24:	4a15      	ldr	r2, [pc, #84]	; (800dd7c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800dd26:	4293      	cmp	r3, r2
 800dd28:	d10c      	bne.n	800dd44 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800dd2a:	68bb      	ldr	r3, [r7, #8]
 800dd2c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800dd30:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800dd32:	683b      	ldr	r3, [r7, #0]
 800dd34:	685b      	ldr	r3, [r3, #4]
 800dd36:	68ba      	ldr	r2, [r7, #8]
 800dd38:	4313      	orrs	r3, r2
 800dd3a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	681b      	ldr	r3, [r3, #0]
 800dd40:	68ba      	ldr	r2, [r7, #8]
 800dd42:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	2201      	movs	r2, #1
 800dd48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	2200      	movs	r2, #0
 800dd50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800dd54:	2300      	movs	r3, #0
}
 800dd56:	4618      	mov	r0, r3
 800dd58:	3714      	adds	r7, #20
 800dd5a:	46bd      	mov	sp, r7
 800dd5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd60:	4770      	bx	lr
 800dd62:	bf00      	nop
 800dd64:	40010000 	.word	0x40010000
 800dd68:	40000400 	.word	0x40000400
 800dd6c:	40000800 	.word	0x40000800
 800dd70:	40000c00 	.word	0x40000c00
 800dd74:	40010400 	.word	0x40010400
 800dd78:	40014000 	.word	0x40014000
 800dd7c:	40001800 	.word	0x40001800

0800dd80 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800dd80:	b480      	push	{r7}
 800dd82:	b083      	sub	sp, #12
 800dd84:	af00      	add	r7, sp, #0
 800dd86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800dd88:	bf00      	nop
 800dd8a:	370c      	adds	r7, #12
 800dd8c:	46bd      	mov	sp, r7
 800dd8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd92:	4770      	bx	lr

0800dd94 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800dd94:	b480      	push	{r7}
 800dd96:	b083      	sub	sp, #12
 800dd98:	af00      	add	r7, sp, #0
 800dd9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800dd9c:	bf00      	nop
 800dd9e:	370c      	adds	r7, #12
 800dda0:	46bd      	mov	sp, r7
 800dda2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dda6:	4770      	bx	lr

0800dda8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800dda8:	b580      	push	{r7, lr}
 800ddaa:	b082      	sub	sp, #8
 800ddac:	af00      	add	r7, sp, #0
 800ddae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	2b00      	cmp	r3, #0
 800ddb4:	d101      	bne.n	800ddba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ddb6:	2301      	movs	r3, #1
 800ddb8:	e03f      	b.n	800de3a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800ddc0:	b2db      	uxtb	r3, r3
 800ddc2:	2b00      	cmp	r3, #0
 800ddc4:	d106      	bne.n	800ddd4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	2200      	movs	r2, #0
 800ddca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ddce:	6878      	ldr	r0, [r7, #4]
 800ddd0:	f7f6 fa3a 	bl	8004248 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	2224      	movs	r2, #36	; 0x24
 800ddd8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	681b      	ldr	r3, [r3, #0]
 800dde0:	68da      	ldr	r2, [r3, #12]
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	681b      	ldr	r3, [r3, #0]
 800dde6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800ddea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800ddec:	6878      	ldr	r0, [r7, #4]
 800ddee:	f000 f90b 	bl	800e008 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	681b      	ldr	r3, [r3, #0]
 800ddf6:	691a      	ldr	r2, [r3, #16]
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	681b      	ldr	r3, [r3, #0]
 800ddfc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800de00:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	681b      	ldr	r3, [r3, #0]
 800de06:	695a      	ldr	r2, [r3, #20]
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	681b      	ldr	r3, [r3, #0]
 800de0c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800de10:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	681b      	ldr	r3, [r3, #0]
 800de16:	68da      	ldr	r2, [r3, #12]
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	681b      	ldr	r3, [r3, #0]
 800de1c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800de20:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	2200      	movs	r2, #0
 800de26:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	2220      	movs	r2, #32
 800de2c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	2220      	movs	r2, #32
 800de34:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800de38:	2300      	movs	r3, #0
}
 800de3a:	4618      	mov	r0, r3
 800de3c:	3708      	adds	r7, #8
 800de3e:	46bd      	mov	sp, r7
 800de40:	bd80      	pop	{r7, pc}

0800de42 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800de42:	b580      	push	{r7, lr}
 800de44:	b088      	sub	sp, #32
 800de46:	af02      	add	r7, sp, #8
 800de48:	60f8      	str	r0, [r7, #12]
 800de4a:	60b9      	str	r1, [r7, #8]
 800de4c:	603b      	str	r3, [r7, #0]
 800de4e:	4613      	mov	r3, r2
 800de50:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800de52:	2300      	movs	r3, #0
 800de54:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800de56:	68fb      	ldr	r3, [r7, #12]
 800de58:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800de5c:	b2db      	uxtb	r3, r3
 800de5e:	2b20      	cmp	r3, #32
 800de60:	f040 8083 	bne.w	800df6a <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800de64:	68bb      	ldr	r3, [r7, #8]
 800de66:	2b00      	cmp	r3, #0
 800de68:	d002      	beq.n	800de70 <HAL_UART_Transmit+0x2e>
 800de6a:	88fb      	ldrh	r3, [r7, #6]
 800de6c:	2b00      	cmp	r3, #0
 800de6e:	d101      	bne.n	800de74 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800de70:	2301      	movs	r3, #1
 800de72:	e07b      	b.n	800df6c <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800de74:	68fb      	ldr	r3, [r7, #12]
 800de76:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800de7a:	2b01      	cmp	r3, #1
 800de7c:	d101      	bne.n	800de82 <HAL_UART_Transmit+0x40>
 800de7e:	2302      	movs	r3, #2
 800de80:	e074      	b.n	800df6c <HAL_UART_Transmit+0x12a>
 800de82:	68fb      	ldr	r3, [r7, #12]
 800de84:	2201      	movs	r2, #1
 800de86:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800de8a:	68fb      	ldr	r3, [r7, #12]
 800de8c:	2200      	movs	r2, #0
 800de8e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800de90:	68fb      	ldr	r3, [r7, #12]
 800de92:	2221      	movs	r2, #33	; 0x21
 800de94:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800de98:	f7fb fb38 	bl	800950c <HAL_GetTick>
 800de9c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800de9e:	68fb      	ldr	r3, [r7, #12]
 800dea0:	88fa      	ldrh	r2, [r7, #6]
 800dea2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800dea4:	68fb      	ldr	r3, [r7, #12]
 800dea6:	88fa      	ldrh	r2, [r7, #6]
 800dea8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800deaa:	68fb      	ldr	r3, [r7, #12]
 800deac:	2200      	movs	r2, #0
 800deae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800deb2:	e042      	b.n	800df3a <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 800deb4:	68fb      	ldr	r3, [r7, #12]
 800deb6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800deb8:	b29b      	uxth	r3, r3
 800deba:	3b01      	subs	r3, #1
 800debc:	b29a      	uxth	r2, r3
 800debe:	68fb      	ldr	r3, [r7, #12]
 800dec0:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800dec2:	68fb      	ldr	r3, [r7, #12]
 800dec4:	689b      	ldr	r3, [r3, #8]
 800dec6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800deca:	d122      	bne.n	800df12 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800decc:	683b      	ldr	r3, [r7, #0]
 800dece:	9300      	str	r3, [sp, #0]
 800ded0:	697b      	ldr	r3, [r7, #20]
 800ded2:	2200      	movs	r2, #0
 800ded4:	2180      	movs	r1, #128	; 0x80
 800ded6:	68f8      	ldr	r0, [r7, #12]
 800ded8:	f000 f84c 	bl	800df74 <UART_WaitOnFlagUntilTimeout>
 800dedc:	4603      	mov	r3, r0
 800dede:	2b00      	cmp	r3, #0
 800dee0:	d001      	beq.n	800dee6 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800dee2:	2303      	movs	r3, #3
 800dee4:	e042      	b.n	800df6c <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800dee6:	68bb      	ldr	r3, [r7, #8]
 800dee8:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800deea:	693b      	ldr	r3, [r7, #16]
 800deec:	881b      	ldrh	r3, [r3, #0]
 800deee:	461a      	mov	r2, r3
 800def0:	68fb      	ldr	r3, [r7, #12]
 800def2:	681b      	ldr	r3, [r3, #0]
 800def4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800def8:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800defa:	68fb      	ldr	r3, [r7, #12]
 800defc:	691b      	ldr	r3, [r3, #16]
 800defe:	2b00      	cmp	r3, #0
 800df00:	d103      	bne.n	800df0a <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800df02:	68bb      	ldr	r3, [r7, #8]
 800df04:	3302      	adds	r3, #2
 800df06:	60bb      	str	r3, [r7, #8]
 800df08:	e017      	b.n	800df3a <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800df0a:	68bb      	ldr	r3, [r7, #8]
 800df0c:	3301      	adds	r3, #1
 800df0e:	60bb      	str	r3, [r7, #8]
 800df10:	e013      	b.n	800df3a <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800df12:	683b      	ldr	r3, [r7, #0]
 800df14:	9300      	str	r3, [sp, #0]
 800df16:	697b      	ldr	r3, [r7, #20]
 800df18:	2200      	movs	r2, #0
 800df1a:	2180      	movs	r1, #128	; 0x80
 800df1c:	68f8      	ldr	r0, [r7, #12]
 800df1e:	f000 f829 	bl	800df74 <UART_WaitOnFlagUntilTimeout>
 800df22:	4603      	mov	r3, r0
 800df24:	2b00      	cmp	r3, #0
 800df26:	d001      	beq.n	800df2c <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 800df28:	2303      	movs	r3, #3
 800df2a:	e01f      	b.n	800df6c <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800df2c:	68bb      	ldr	r3, [r7, #8]
 800df2e:	1c5a      	adds	r2, r3, #1
 800df30:	60ba      	str	r2, [r7, #8]
 800df32:	781a      	ldrb	r2, [r3, #0]
 800df34:	68fb      	ldr	r3, [r7, #12]
 800df36:	681b      	ldr	r3, [r3, #0]
 800df38:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800df3a:	68fb      	ldr	r3, [r7, #12]
 800df3c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800df3e:	b29b      	uxth	r3, r3
 800df40:	2b00      	cmp	r3, #0
 800df42:	d1b7      	bne.n	800deb4 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800df44:	683b      	ldr	r3, [r7, #0]
 800df46:	9300      	str	r3, [sp, #0]
 800df48:	697b      	ldr	r3, [r7, #20]
 800df4a:	2200      	movs	r2, #0
 800df4c:	2140      	movs	r1, #64	; 0x40
 800df4e:	68f8      	ldr	r0, [r7, #12]
 800df50:	f000 f810 	bl	800df74 <UART_WaitOnFlagUntilTimeout>
 800df54:	4603      	mov	r3, r0
 800df56:	2b00      	cmp	r3, #0
 800df58:	d001      	beq.n	800df5e <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800df5a:	2303      	movs	r3, #3
 800df5c:	e006      	b.n	800df6c <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800df5e:	68fb      	ldr	r3, [r7, #12]
 800df60:	2220      	movs	r2, #32
 800df62:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800df66:	2300      	movs	r3, #0
 800df68:	e000      	b.n	800df6c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800df6a:	2302      	movs	r3, #2
  }
}
 800df6c:	4618      	mov	r0, r3
 800df6e:	3718      	adds	r7, #24
 800df70:	46bd      	mov	sp, r7
 800df72:	bd80      	pop	{r7, pc}

0800df74 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800df74:	b580      	push	{r7, lr}
 800df76:	b084      	sub	sp, #16
 800df78:	af00      	add	r7, sp, #0
 800df7a:	60f8      	str	r0, [r7, #12]
 800df7c:	60b9      	str	r1, [r7, #8]
 800df7e:	603b      	str	r3, [r7, #0]
 800df80:	4613      	mov	r3, r2
 800df82:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800df84:	e02c      	b.n	800dfe0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800df86:	69bb      	ldr	r3, [r7, #24]
 800df88:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df8c:	d028      	beq.n	800dfe0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800df8e:	69bb      	ldr	r3, [r7, #24]
 800df90:	2b00      	cmp	r3, #0
 800df92:	d007      	beq.n	800dfa4 <UART_WaitOnFlagUntilTimeout+0x30>
 800df94:	f7fb faba 	bl	800950c <HAL_GetTick>
 800df98:	4602      	mov	r2, r0
 800df9a:	683b      	ldr	r3, [r7, #0]
 800df9c:	1ad3      	subs	r3, r2, r3
 800df9e:	69ba      	ldr	r2, [r7, #24]
 800dfa0:	429a      	cmp	r2, r3
 800dfa2:	d21d      	bcs.n	800dfe0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800dfa4:	68fb      	ldr	r3, [r7, #12]
 800dfa6:	681b      	ldr	r3, [r3, #0]
 800dfa8:	68da      	ldr	r2, [r3, #12]
 800dfaa:	68fb      	ldr	r3, [r7, #12]
 800dfac:	681b      	ldr	r3, [r3, #0]
 800dfae:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800dfb2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dfb4:	68fb      	ldr	r3, [r7, #12]
 800dfb6:	681b      	ldr	r3, [r3, #0]
 800dfb8:	695a      	ldr	r2, [r3, #20]
 800dfba:	68fb      	ldr	r3, [r7, #12]
 800dfbc:	681b      	ldr	r3, [r3, #0]
 800dfbe:	f022 0201 	bic.w	r2, r2, #1
 800dfc2:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800dfc4:	68fb      	ldr	r3, [r7, #12]
 800dfc6:	2220      	movs	r2, #32
 800dfc8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800dfcc:	68fb      	ldr	r3, [r7, #12]
 800dfce:	2220      	movs	r2, #32
 800dfd0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800dfd4:	68fb      	ldr	r3, [r7, #12]
 800dfd6:	2200      	movs	r2, #0
 800dfd8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800dfdc:	2303      	movs	r3, #3
 800dfde:	e00f      	b.n	800e000 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800dfe0:	68fb      	ldr	r3, [r7, #12]
 800dfe2:	681b      	ldr	r3, [r3, #0]
 800dfe4:	681a      	ldr	r2, [r3, #0]
 800dfe6:	68bb      	ldr	r3, [r7, #8]
 800dfe8:	4013      	ands	r3, r2
 800dfea:	68ba      	ldr	r2, [r7, #8]
 800dfec:	429a      	cmp	r2, r3
 800dfee:	bf0c      	ite	eq
 800dff0:	2301      	moveq	r3, #1
 800dff2:	2300      	movne	r3, #0
 800dff4:	b2db      	uxtb	r3, r3
 800dff6:	461a      	mov	r2, r3
 800dff8:	79fb      	ldrb	r3, [r7, #7]
 800dffa:	429a      	cmp	r2, r3
 800dffc:	d0c3      	beq.n	800df86 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800dffe:	2300      	movs	r3, #0
}
 800e000:	4618      	mov	r0, r3
 800e002:	3710      	adds	r7, #16
 800e004:	46bd      	mov	sp, r7
 800e006:	bd80      	pop	{r7, pc}

0800e008 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e00c:	b0bd      	sub	sp, #244	; 0xf4
 800e00e:	af00      	add	r7, sp, #0
 800e010:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e014:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e018:	681b      	ldr	r3, [r3, #0]
 800e01a:	691b      	ldr	r3, [r3, #16]
 800e01c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800e020:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e024:	68d9      	ldr	r1, [r3, #12]
 800e026:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e02a:	681a      	ldr	r2, [r3, #0]
 800e02c:	ea40 0301 	orr.w	r3, r0, r1
 800e030:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800e032:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e036:	689a      	ldr	r2, [r3, #8]
 800e038:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e03c:	691b      	ldr	r3, [r3, #16]
 800e03e:	431a      	orrs	r2, r3
 800e040:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e044:	695b      	ldr	r3, [r3, #20]
 800e046:	431a      	orrs	r2, r3
 800e048:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e04c:	69db      	ldr	r3, [r3, #28]
 800e04e:	4313      	orrs	r3, r2
 800e050:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  MODIFY_REG(huart->Instance->CR1,
 800e054:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e058:	681b      	ldr	r3, [r3, #0]
 800e05a:	68db      	ldr	r3, [r3, #12]
 800e05c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800e060:	f021 010c 	bic.w	r1, r1, #12
 800e064:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e068:	681a      	ldr	r2, [r3, #0]
 800e06a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800e06e:	430b      	orrs	r3, r1
 800e070:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800e072:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e076:	681b      	ldr	r3, [r3, #0]
 800e078:	695b      	ldr	r3, [r3, #20]
 800e07a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800e07e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e082:	6999      	ldr	r1, [r3, #24]
 800e084:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e088:	681a      	ldr	r2, [r3, #0]
 800e08a:	ea40 0301 	orr.w	r3, r0, r1
 800e08e:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e090:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e094:	69db      	ldr	r3, [r3, #28]
 800e096:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e09a:	f040 81a5 	bne.w	800e3e8 <UART_SetConfig+0x3e0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800e09e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e0a2:	681a      	ldr	r2, [r3, #0]
 800e0a4:	4bcd      	ldr	r3, [pc, #820]	; (800e3dc <UART_SetConfig+0x3d4>)
 800e0a6:	429a      	cmp	r2, r3
 800e0a8:	d006      	beq.n	800e0b8 <UART_SetConfig+0xb0>
 800e0aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e0ae:	681a      	ldr	r2, [r3, #0]
 800e0b0:	4bcb      	ldr	r3, [pc, #812]	; (800e3e0 <UART_SetConfig+0x3d8>)
 800e0b2:	429a      	cmp	r2, r3
 800e0b4:	f040 80cb 	bne.w	800e24e <UART_SetConfig+0x246>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800e0b8:	f7fe f996 	bl	800c3e8 <HAL_RCC_GetPCLK2Freq>
 800e0bc:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800e0c0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800e0c4:	461c      	mov	r4, r3
 800e0c6:	f04f 0500 	mov.w	r5, #0
 800e0ca:	4622      	mov	r2, r4
 800e0cc:	462b      	mov	r3, r5
 800e0ce:	1891      	adds	r1, r2, r2
 800e0d0:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 800e0d4:	415b      	adcs	r3, r3
 800e0d6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800e0da:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800e0de:	1912      	adds	r2, r2, r4
 800e0e0:	eb45 0303 	adc.w	r3, r5, r3
 800e0e4:	f04f 0000 	mov.w	r0, #0
 800e0e8:	f04f 0100 	mov.w	r1, #0
 800e0ec:	00d9      	lsls	r1, r3, #3
 800e0ee:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800e0f2:	00d0      	lsls	r0, r2, #3
 800e0f4:	4602      	mov	r2, r0
 800e0f6:	460b      	mov	r3, r1
 800e0f8:	1911      	adds	r1, r2, r4
 800e0fa:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 800e0fe:	416b      	adcs	r3, r5
 800e100:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800e104:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e108:	685b      	ldr	r3, [r3, #4]
 800e10a:	461a      	mov	r2, r3
 800e10c:	f04f 0300 	mov.w	r3, #0
 800e110:	1891      	adds	r1, r2, r2
 800e112:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 800e116:	415b      	adcs	r3, r3
 800e118:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800e11c:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 800e120:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 800e124:	f7f2 fdc0 	bl	8000ca8 <__aeabi_uldivmod>
 800e128:	4602      	mov	r2, r0
 800e12a:	460b      	mov	r3, r1
 800e12c:	4bad      	ldr	r3, [pc, #692]	; (800e3e4 <UART_SetConfig+0x3dc>)
 800e12e:	fba3 2302 	umull	r2, r3, r3, r2
 800e132:	095b      	lsrs	r3, r3, #5
 800e134:	011e      	lsls	r6, r3, #4
 800e136:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800e13a:	461c      	mov	r4, r3
 800e13c:	f04f 0500 	mov.w	r5, #0
 800e140:	4622      	mov	r2, r4
 800e142:	462b      	mov	r3, r5
 800e144:	1891      	adds	r1, r2, r2
 800e146:	67b9      	str	r1, [r7, #120]	; 0x78
 800e148:	415b      	adcs	r3, r3
 800e14a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800e14c:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800e150:	1912      	adds	r2, r2, r4
 800e152:	eb45 0303 	adc.w	r3, r5, r3
 800e156:	f04f 0000 	mov.w	r0, #0
 800e15a:	f04f 0100 	mov.w	r1, #0
 800e15e:	00d9      	lsls	r1, r3, #3
 800e160:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800e164:	00d0      	lsls	r0, r2, #3
 800e166:	4602      	mov	r2, r0
 800e168:	460b      	mov	r3, r1
 800e16a:	1911      	adds	r1, r2, r4
 800e16c:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 800e170:	416b      	adcs	r3, r5
 800e172:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800e176:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e17a:	685b      	ldr	r3, [r3, #4]
 800e17c:	461a      	mov	r2, r3
 800e17e:	f04f 0300 	mov.w	r3, #0
 800e182:	1891      	adds	r1, r2, r2
 800e184:	6739      	str	r1, [r7, #112]	; 0x70
 800e186:	415b      	adcs	r3, r3
 800e188:	677b      	str	r3, [r7, #116]	; 0x74
 800e18a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800e18e:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 800e192:	f7f2 fd89 	bl	8000ca8 <__aeabi_uldivmod>
 800e196:	4602      	mov	r2, r0
 800e198:	460b      	mov	r3, r1
 800e19a:	4b92      	ldr	r3, [pc, #584]	; (800e3e4 <UART_SetConfig+0x3dc>)
 800e19c:	fba3 1302 	umull	r1, r3, r3, r2
 800e1a0:	095b      	lsrs	r3, r3, #5
 800e1a2:	2164      	movs	r1, #100	; 0x64
 800e1a4:	fb01 f303 	mul.w	r3, r1, r3
 800e1a8:	1ad3      	subs	r3, r2, r3
 800e1aa:	00db      	lsls	r3, r3, #3
 800e1ac:	3332      	adds	r3, #50	; 0x32
 800e1ae:	4a8d      	ldr	r2, [pc, #564]	; (800e3e4 <UART_SetConfig+0x3dc>)
 800e1b0:	fba2 2303 	umull	r2, r3, r2, r3
 800e1b4:	095b      	lsrs	r3, r3, #5
 800e1b6:	005b      	lsls	r3, r3, #1
 800e1b8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800e1bc:	441e      	add	r6, r3
 800e1be:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800e1c2:	4618      	mov	r0, r3
 800e1c4:	f04f 0100 	mov.w	r1, #0
 800e1c8:	4602      	mov	r2, r0
 800e1ca:	460b      	mov	r3, r1
 800e1cc:	1894      	adds	r4, r2, r2
 800e1ce:	66bc      	str	r4, [r7, #104]	; 0x68
 800e1d0:	415b      	adcs	r3, r3
 800e1d2:	66fb      	str	r3, [r7, #108]	; 0x6c
 800e1d4:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800e1d8:	1812      	adds	r2, r2, r0
 800e1da:	eb41 0303 	adc.w	r3, r1, r3
 800e1de:	f04f 0400 	mov.w	r4, #0
 800e1e2:	f04f 0500 	mov.w	r5, #0
 800e1e6:	00dd      	lsls	r5, r3, #3
 800e1e8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800e1ec:	00d4      	lsls	r4, r2, #3
 800e1ee:	4622      	mov	r2, r4
 800e1f0:	462b      	mov	r3, r5
 800e1f2:	1814      	adds	r4, r2, r0
 800e1f4:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 800e1f8:	414b      	adcs	r3, r1
 800e1fa:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800e1fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e202:	685b      	ldr	r3, [r3, #4]
 800e204:	461a      	mov	r2, r3
 800e206:	f04f 0300 	mov.w	r3, #0
 800e20a:	1891      	adds	r1, r2, r2
 800e20c:	6639      	str	r1, [r7, #96]	; 0x60
 800e20e:	415b      	adcs	r3, r3
 800e210:	667b      	str	r3, [r7, #100]	; 0x64
 800e212:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800e216:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800e21a:	f7f2 fd45 	bl	8000ca8 <__aeabi_uldivmod>
 800e21e:	4602      	mov	r2, r0
 800e220:	460b      	mov	r3, r1
 800e222:	4b70      	ldr	r3, [pc, #448]	; (800e3e4 <UART_SetConfig+0x3dc>)
 800e224:	fba3 1302 	umull	r1, r3, r3, r2
 800e228:	095b      	lsrs	r3, r3, #5
 800e22a:	2164      	movs	r1, #100	; 0x64
 800e22c:	fb01 f303 	mul.w	r3, r1, r3
 800e230:	1ad3      	subs	r3, r2, r3
 800e232:	00db      	lsls	r3, r3, #3
 800e234:	3332      	adds	r3, #50	; 0x32
 800e236:	4a6b      	ldr	r2, [pc, #428]	; (800e3e4 <UART_SetConfig+0x3dc>)
 800e238:	fba2 2303 	umull	r2, r3, r2, r3
 800e23c:	095b      	lsrs	r3, r3, #5
 800e23e:	f003 0207 	and.w	r2, r3, #7
 800e242:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e246:	681b      	ldr	r3, [r3, #0]
 800e248:	4432      	add	r2, r6
 800e24a:	609a      	str	r2, [r3, #8]
 800e24c:	e26d      	b.n	800e72a <UART_SetConfig+0x722>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800e24e:	f7fe f8b7 	bl	800c3c0 <HAL_RCC_GetPCLK1Freq>
 800e252:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800e256:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800e25a:	461c      	mov	r4, r3
 800e25c:	f04f 0500 	mov.w	r5, #0
 800e260:	4622      	mov	r2, r4
 800e262:	462b      	mov	r3, r5
 800e264:	1891      	adds	r1, r2, r2
 800e266:	65b9      	str	r1, [r7, #88]	; 0x58
 800e268:	415b      	adcs	r3, r3
 800e26a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e26c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800e270:	1912      	adds	r2, r2, r4
 800e272:	eb45 0303 	adc.w	r3, r5, r3
 800e276:	f04f 0000 	mov.w	r0, #0
 800e27a:	f04f 0100 	mov.w	r1, #0
 800e27e:	00d9      	lsls	r1, r3, #3
 800e280:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800e284:	00d0      	lsls	r0, r2, #3
 800e286:	4602      	mov	r2, r0
 800e288:	460b      	mov	r3, r1
 800e28a:	1911      	adds	r1, r2, r4
 800e28c:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 800e290:	416b      	adcs	r3, r5
 800e292:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800e296:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e29a:	685b      	ldr	r3, [r3, #4]
 800e29c:	461a      	mov	r2, r3
 800e29e:	f04f 0300 	mov.w	r3, #0
 800e2a2:	1891      	adds	r1, r2, r2
 800e2a4:	6539      	str	r1, [r7, #80]	; 0x50
 800e2a6:	415b      	adcs	r3, r3
 800e2a8:	657b      	str	r3, [r7, #84]	; 0x54
 800e2aa:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800e2ae:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 800e2b2:	f7f2 fcf9 	bl	8000ca8 <__aeabi_uldivmod>
 800e2b6:	4602      	mov	r2, r0
 800e2b8:	460b      	mov	r3, r1
 800e2ba:	4b4a      	ldr	r3, [pc, #296]	; (800e3e4 <UART_SetConfig+0x3dc>)
 800e2bc:	fba3 2302 	umull	r2, r3, r3, r2
 800e2c0:	095b      	lsrs	r3, r3, #5
 800e2c2:	011e      	lsls	r6, r3, #4
 800e2c4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800e2c8:	461c      	mov	r4, r3
 800e2ca:	f04f 0500 	mov.w	r5, #0
 800e2ce:	4622      	mov	r2, r4
 800e2d0:	462b      	mov	r3, r5
 800e2d2:	1891      	adds	r1, r2, r2
 800e2d4:	64b9      	str	r1, [r7, #72]	; 0x48
 800e2d6:	415b      	adcs	r3, r3
 800e2d8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e2da:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800e2de:	1912      	adds	r2, r2, r4
 800e2e0:	eb45 0303 	adc.w	r3, r5, r3
 800e2e4:	f04f 0000 	mov.w	r0, #0
 800e2e8:	f04f 0100 	mov.w	r1, #0
 800e2ec:	00d9      	lsls	r1, r3, #3
 800e2ee:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800e2f2:	00d0      	lsls	r0, r2, #3
 800e2f4:	4602      	mov	r2, r0
 800e2f6:	460b      	mov	r3, r1
 800e2f8:	1911      	adds	r1, r2, r4
 800e2fa:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 800e2fe:	416b      	adcs	r3, r5
 800e300:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800e304:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e308:	685b      	ldr	r3, [r3, #4]
 800e30a:	461a      	mov	r2, r3
 800e30c:	f04f 0300 	mov.w	r3, #0
 800e310:	1891      	adds	r1, r2, r2
 800e312:	6439      	str	r1, [r7, #64]	; 0x40
 800e314:	415b      	adcs	r3, r3
 800e316:	647b      	str	r3, [r7, #68]	; 0x44
 800e318:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800e31c:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 800e320:	f7f2 fcc2 	bl	8000ca8 <__aeabi_uldivmod>
 800e324:	4602      	mov	r2, r0
 800e326:	460b      	mov	r3, r1
 800e328:	4b2e      	ldr	r3, [pc, #184]	; (800e3e4 <UART_SetConfig+0x3dc>)
 800e32a:	fba3 1302 	umull	r1, r3, r3, r2
 800e32e:	095b      	lsrs	r3, r3, #5
 800e330:	2164      	movs	r1, #100	; 0x64
 800e332:	fb01 f303 	mul.w	r3, r1, r3
 800e336:	1ad3      	subs	r3, r2, r3
 800e338:	00db      	lsls	r3, r3, #3
 800e33a:	3332      	adds	r3, #50	; 0x32
 800e33c:	4a29      	ldr	r2, [pc, #164]	; (800e3e4 <UART_SetConfig+0x3dc>)
 800e33e:	fba2 2303 	umull	r2, r3, r2, r3
 800e342:	095b      	lsrs	r3, r3, #5
 800e344:	005b      	lsls	r3, r3, #1
 800e346:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800e34a:	441e      	add	r6, r3
 800e34c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800e350:	4618      	mov	r0, r3
 800e352:	f04f 0100 	mov.w	r1, #0
 800e356:	4602      	mov	r2, r0
 800e358:	460b      	mov	r3, r1
 800e35a:	1894      	adds	r4, r2, r2
 800e35c:	63bc      	str	r4, [r7, #56]	; 0x38
 800e35e:	415b      	adcs	r3, r3
 800e360:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e362:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800e366:	1812      	adds	r2, r2, r0
 800e368:	eb41 0303 	adc.w	r3, r1, r3
 800e36c:	f04f 0400 	mov.w	r4, #0
 800e370:	f04f 0500 	mov.w	r5, #0
 800e374:	00dd      	lsls	r5, r3, #3
 800e376:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800e37a:	00d4      	lsls	r4, r2, #3
 800e37c:	4622      	mov	r2, r4
 800e37e:	462b      	mov	r3, r5
 800e380:	1814      	adds	r4, r2, r0
 800e382:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 800e386:	414b      	adcs	r3, r1
 800e388:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800e38c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e390:	685b      	ldr	r3, [r3, #4]
 800e392:	461a      	mov	r2, r3
 800e394:	f04f 0300 	mov.w	r3, #0
 800e398:	1891      	adds	r1, r2, r2
 800e39a:	6339      	str	r1, [r7, #48]	; 0x30
 800e39c:	415b      	adcs	r3, r3
 800e39e:	637b      	str	r3, [r7, #52]	; 0x34
 800e3a0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800e3a4:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800e3a8:	f7f2 fc7e 	bl	8000ca8 <__aeabi_uldivmod>
 800e3ac:	4602      	mov	r2, r0
 800e3ae:	460b      	mov	r3, r1
 800e3b0:	4b0c      	ldr	r3, [pc, #48]	; (800e3e4 <UART_SetConfig+0x3dc>)
 800e3b2:	fba3 1302 	umull	r1, r3, r3, r2
 800e3b6:	095b      	lsrs	r3, r3, #5
 800e3b8:	2164      	movs	r1, #100	; 0x64
 800e3ba:	fb01 f303 	mul.w	r3, r1, r3
 800e3be:	1ad3      	subs	r3, r2, r3
 800e3c0:	00db      	lsls	r3, r3, #3
 800e3c2:	3332      	adds	r3, #50	; 0x32
 800e3c4:	4a07      	ldr	r2, [pc, #28]	; (800e3e4 <UART_SetConfig+0x3dc>)
 800e3c6:	fba2 2303 	umull	r2, r3, r2, r3
 800e3ca:	095b      	lsrs	r3, r3, #5
 800e3cc:	f003 0207 	and.w	r2, r3, #7
 800e3d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e3d4:	681b      	ldr	r3, [r3, #0]
 800e3d6:	4432      	add	r2, r6
 800e3d8:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800e3da:	e1a6      	b.n	800e72a <UART_SetConfig+0x722>
 800e3dc:	40011000 	.word	0x40011000
 800e3e0:	40011400 	.word	0x40011400
 800e3e4:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800e3e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e3ec:	681a      	ldr	r2, [r3, #0]
 800e3ee:	4bd1      	ldr	r3, [pc, #836]	; (800e734 <UART_SetConfig+0x72c>)
 800e3f0:	429a      	cmp	r2, r3
 800e3f2:	d006      	beq.n	800e402 <UART_SetConfig+0x3fa>
 800e3f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e3f8:	681a      	ldr	r2, [r3, #0]
 800e3fa:	4bcf      	ldr	r3, [pc, #828]	; (800e738 <UART_SetConfig+0x730>)
 800e3fc:	429a      	cmp	r2, r3
 800e3fe:	f040 80ca 	bne.w	800e596 <UART_SetConfig+0x58e>
      pclk = HAL_RCC_GetPCLK2Freq();
 800e402:	f7fd fff1 	bl	800c3e8 <HAL_RCC_GetPCLK2Freq>
 800e406:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800e40a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800e40e:	461c      	mov	r4, r3
 800e410:	f04f 0500 	mov.w	r5, #0
 800e414:	4622      	mov	r2, r4
 800e416:	462b      	mov	r3, r5
 800e418:	1891      	adds	r1, r2, r2
 800e41a:	62b9      	str	r1, [r7, #40]	; 0x28
 800e41c:	415b      	adcs	r3, r3
 800e41e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e420:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800e424:	1912      	adds	r2, r2, r4
 800e426:	eb45 0303 	adc.w	r3, r5, r3
 800e42a:	f04f 0000 	mov.w	r0, #0
 800e42e:	f04f 0100 	mov.w	r1, #0
 800e432:	00d9      	lsls	r1, r3, #3
 800e434:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800e438:	00d0      	lsls	r0, r2, #3
 800e43a:	4602      	mov	r2, r0
 800e43c:	460b      	mov	r3, r1
 800e43e:	eb12 0a04 	adds.w	sl, r2, r4
 800e442:	eb43 0b05 	adc.w	fp, r3, r5
 800e446:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e44a:	685b      	ldr	r3, [r3, #4]
 800e44c:	4618      	mov	r0, r3
 800e44e:	f04f 0100 	mov.w	r1, #0
 800e452:	f04f 0200 	mov.w	r2, #0
 800e456:	f04f 0300 	mov.w	r3, #0
 800e45a:	008b      	lsls	r3, r1, #2
 800e45c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800e460:	0082      	lsls	r2, r0, #2
 800e462:	4650      	mov	r0, sl
 800e464:	4659      	mov	r1, fp
 800e466:	f7f2 fc1f 	bl	8000ca8 <__aeabi_uldivmod>
 800e46a:	4602      	mov	r2, r0
 800e46c:	460b      	mov	r3, r1
 800e46e:	4bb3      	ldr	r3, [pc, #716]	; (800e73c <UART_SetConfig+0x734>)
 800e470:	fba3 2302 	umull	r2, r3, r3, r2
 800e474:	095b      	lsrs	r3, r3, #5
 800e476:	011e      	lsls	r6, r3, #4
 800e478:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800e47c:	4618      	mov	r0, r3
 800e47e:	f04f 0100 	mov.w	r1, #0
 800e482:	4602      	mov	r2, r0
 800e484:	460b      	mov	r3, r1
 800e486:	1894      	adds	r4, r2, r2
 800e488:	623c      	str	r4, [r7, #32]
 800e48a:	415b      	adcs	r3, r3
 800e48c:	627b      	str	r3, [r7, #36]	; 0x24
 800e48e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800e492:	1812      	adds	r2, r2, r0
 800e494:	eb41 0303 	adc.w	r3, r1, r3
 800e498:	f04f 0400 	mov.w	r4, #0
 800e49c:	f04f 0500 	mov.w	r5, #0
 800e4a0:	00dd      	lsls	r5, r3, #3
 800e4a2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800e4a6:	00d4      	lsls	r4, r2, #3
 800e4a8:	4622      	mov	r2, r4
 800e4aa:	462b      	mov	r3, r5
 800e4ac:	1814      	adds	r4, r2, r0
 800e4ae:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 800e4b2:	414b      	adcs	r3, r1
 800e4b4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800e4b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e4bc:	685b      	ldr	r3, [r3, #4]
 800e4be:	4618      	mov	r0, r3
 800e4c0:	f04f 0100 	mov.w	r1, #0
 800e4c4:	f04f 0200 	mov.w	r2, #0
 800e4c8:	f04f 0300 	mov.w	r3, #0
 800e4cc:	008b      	lsls	r3, r1, #2
 800e4ce:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800e4d2:	0082      	lsls	r2, r0, #2
 800e4d4:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 800e4d8:	f7f2 fbe6 	bl	8000ca8 <__aeabi_uldivmod>
 800e4dc:	4602      	mov	r2, r0
 800e4de:	460b      	mov	r3, r1
 800e4e0:	4b96      	ldr	r3, [pc, #600]	; (800e73c <UART_SetConfig+0x734>)
 800e4e2:	fba3 1302 	umull	r1, r3, r3, r2
 800e4e6:	095b      	lsrs	r3, r3, #5
 800e4e8:	2164      	movs	r1, #100	; 0x64
 800e4ea:	fb01 f303 	mul.w	r3, r1, r3
 800e4ee:	1ad3      	subs	r3, r2, r3
 800e4f0:	011b      	lsls	r3, r3, #4
 800e4f2:	3332      	adds	r3, #50	; 0x32
 800e4f4:	4a91      	ldr	r2, [pc, #580]	; (800e73c <UART_SetConfig+0x734>)
 800e4f6:	fba2 2303 	umull	r2, r3, r2, r3
 800e4fa:	095b      	lsrs	r3, r3, #5
 800e4fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e500:	441e      	add	r6, r3
 800e502:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800e506:	4618      	mov	r0, r3
 800e508:	f04f 0100 	mov.w	r1, #0
 800e50c:	4602      	mov	r2, r0
 800e50e:	460b      	mov	r3, r1
 800e510:	1894      	adds	r4, r2, r2
 800e512:	61bc      	str	r4, [r7, #24]
 800e514:	415b      	adcs	r3, r3
 800e516:	61fb      	str	r3, [r7, #28]
 800e518:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800e51c:	1812      	adds	r2, r2, r0
 800e51e:	eb41 0303 	adc.w	r3, r1, r3
 800e522:	f04f 0400 	mov.w	r4, #0
 800e526:	f04f 0500 	mov.w	r5, #0
 800e52a:	00dd      	lsls	r5, r3, #3
 800e52c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800e530:	00d4      	lsls	r4, r2, #3
 800e532:	4622      	mov	r2, r4
 800e534:	462b      	mov	r3, r5
 800e536:	1814      	adds	r4, r2, r0
 800e538:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 800e53c:	414b      	adcs	r3, r1
 800e53e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800e542:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e546:	685b      	ldr	r3, [r3, #4]
 800e548:	4618      	mov	r0, r3
 800e54a:	f04f 0100 	mov.w	r1, #0
 800e54e:	f04f 0200 	mov.w	r2, #0
 800e552:	f04f 0300 	mov.w	r3, #0
 800e556:	008b      	lsls	r3, r1, #2
 800e558:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800e55c:	0082      	lsls	r2, r0, #2
 800e55e:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 800e562:	f7f2 fba1 	bl	8000ca8 <__aeabi_uldivmod>
 800e566:	4602      	mov	r2, r0
 800e568:	460b      	mov	r3, r1
 800e56a:	4b74      	ldr	r3, [pc, #464]	; (800e73c <UART_SetConfig+0x734>)
 800e56c:	fba3 1302 	umull	r1, r3, r3, r2
 800e570:	095b      	lsrs	r3, r3, #5
 800e572:	2164      	movs	r1, #100	; 0x64
 800e574:	fb01 f303 	mul.w	r3, r1, r3
 800e578:	1ad3      	subs	r3, r2, r3
 800e57a:	011b      	lsls	r3, r3, #4
 800e57c:	3332      	adds	r3, #50	; 0x32
 800e57e:	4a6f      	ldr	r2, [pc, #444]	; (800e73c <UART_SetConfig+0x734>)
 800e580:	fba2 2303 	umull	r2, r3, r2, r3
 800e584:	095b      	lsrs	r3, r3, #5
 800e586:	f003 020f 	and.w	r2, r3, #15
 800e58a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e58e:	681b      	ldr	r3, [r3, #0]
 800e590:	4432      	add	r2, r6
 800e592:	609a      	str	r2, [r3, #8]
 800e594:	e0c9      	b.n	800e72a <UART_SetConfig+0x722>
      pclk = HAL_RCC_GetPCLK1Freq();
 800e596:	f7fd ff13 	bl	800c3c0 <HAL_RCC_GetPCLK1Freq>
 800e59a:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800e59e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800e5a2:	461c      	mov	r4, r3
 800e5a4:	f04f 0500 	mov.w	r5, #0
 800e5a8:	4622      	mov	r2, r4
 800e5aa:	462b      	mov	r3, r5
 800e5ac:	1891      	adds	r1, r2, r2
 800e5ae:	6139      	str	r1, [r7, #16]
 800e5b0:	415b      	adcs	r3, r3
 800e5b2:	617b      	str	r3, [r7, #20]
 800e5b4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800e5b8:	1912      	adds	r2, r2, r4
 800e5ba:	eb45 0303 	adc.w	r3, r5, r3
 800e5be:	f04f 0000 	mov.w	r0, #0
 800e5c2:	f04f 0100 	mov.w	r1, #0
 800e5c6:	00d9      	lsls	r1, r3, #3
 800e5c8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800e5cc:	00d0      	lsls	r0, r2, #3
 800e5ce:	4602      	mov	r2, r0
 800e5d0:	460b      	mov	r3, r1
 800e5d2:	eb12 0804 	adds.w	r8, r2, r4
 800e5d6:	eb43 0905 	adc.w	r9, r3, r5
 800e5da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e5de:	685b      	ldr	r3, [r3, #4]
 800e5e0:	4618      	mov	r0, r3
 800e5e2:	f04f 0100 	mov.w	r1, #0
 800e5e6:	f04f 0200 	mov.w	r2, #0
 800e5ea:	f04f 0300 	mov.w	r3, #0
 800e5ee:	008b      	lsls	r3, r1, #2
 800e5f0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800e5f4:	0082      	lsls	r2, r0, #2
 800e5f6:	4640      	mov	r0, r8
 800e5f8:	4649      	mov	r1, r9
 800e5fa:	f7f2 fb55 	bl	8000ca8 <__aeabi_uldivmod>
 800e5fe:	4602      	mov	r2, r0
 800e600:	460b      	mov	r3, r1
 800e602:	4b4e      	ldr	r3, [pc, #312]	; (800e73c <UART_SetConfig+0x734>)
 800e604:	fba3 2302 	umull	r2, r3, r3, r2
 800e608:	095b      	lsrs	r3, r3, #5
 800e60a:	011e      	lsls	r6, r3, #4
 800e60c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800e610:	4618      	mov	r0, r3
 800e612:	f04f 0100 	mov.w	r1, #0
 800e616:	4602      	mov	r2, r0
 800e618:	460b      	mov	r3, r1
 800e61a:	1894      	adds	r4, r2, r2
 800e61c:	60bc      	str	r4, [r7, #8]
 800e61e:	415b      	adcs	r3, r3
 800e620:	60fb      	str	r3, [r7, #12]
 800e622:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800e626:	1812      	adds	r2, r2, r0
 800e628:	eb41 0303 	adc.w	r3, r1, r3
 800e62c:	f04f 0400 	mov.w	r4, #0
 800e630:	f04f 0500 	mov.w	r5, #0
 800e634:	00dd      	lsls	r5, r3, #3
 800e636:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800e63a:	00d4      	lsls	r4, r2, #3
 800e63c:	4622      	mov	r2, r4
 800e63e:	462b      	mov	r3, r5
 800e640:	1814      	adds	r4, r2, r0
 800e642:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 800e646:	414b      	adcs	r3, r1
 800e648:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800e64c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e650:	685b      	ldr	r3, [r3, #4]
 800e652:	4618      	mov	r0, r3
 800e654:	f04f 0100 	mov.w	r1, #0
 800e658:	f04f 0200 	mov.w	r2, #0
 800e65c:	f04f 0300 	mov.w	r3, #0
 800e660:	008b      	lsls	r3, r1, #2
 800e662:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800e666:	0082      	lsls	r2, r0, #2
 800e668:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800e66c:	f7f2 fb1c 	bl	8000ca8 <__aeabi_uldivmod>
 800e670:	4602      	mov	r2, r0
 800e672:	460b      	mov	r3, r1
 800e674:	4b31      	ldr	r3, [pc, #196]	; (800e73c <UART_SetConfig+0x734>)
 800e676:	fba3 1302 	umull	r1, r3, r3, r2
 800e67a:	095b      	lsrs	r3, r3, #5
 800e67c:	2164      	movs	r1, #100	; 0x64
 800e67e:	fb01 f303 	mul.w	r3, r1, r3
 800e682:	1ad3      	subs	r3, r2, r3
 800e684:	011b      	lsls	r3, r3, #4
 800e686:	3332      	adds	r3, #50	; 0x32
 800e688:	4a2c      	ldr	r2, [pc, #176]	; (800e73c <UART_SetConfig+0x734>)
 800e68a:	fba2 2303 	umull	r2, r3, r2, r3
 800e68e:	095b      	lsrs	r3, r3, #5
 800e690:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e694:	441e      	add	r6, r3
 800e696:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800e69a:	4618      	mov	r0, r3
 800e69c:	f04f 0100 	mov.w	r1, #0
 800e6a0:	4602      	mov	r2, r0
 800e6a2:	460b      	mov	r3, r1
 800e6a4:	1894      	adds	r4, r2, r2
 800e6a6:	603c      	str	r4, [r7, #0]
 800e6a8:	415b      	adcs	r3, r3
 800e6aa:	607b      	str	r3, [r7, #4]
 800e6ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e6b0:	1812      	adds	r2, r2, r0
 800e6b2:	eb41 0303 	adc.w	r3, r1, r3
 800e6b6:	f04f 0400 	mov.w	r4, #0
 800e6ba:	f04f 0500 	mov.w	r5, #0
 800e6be:	00dd      	lsls	r5, r3, #3
 800e6c0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800e6c4:	00d4      	lsls	r4, r2, #3
 800e6c6:	4622      	mov	r2, r4
 800e6c8:	462b      	mov	r3, r5
 800e6ca:	1814      	adds	r4, r2, r0
 800e6cc:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 800e6d0:	414b      	adcs	r3, r1
 800e6d2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800e6d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e6da:	685b      	ldr	r3, [r3, #4]
 800e6dc:	4618      	mov	r0, r3
 800e6de:	f04f 0100 	mov.w	r1, #0
 800e6e2:	f04f 0200 	mov.w	r2, #0
 800e6e6:	f04f 0300 	mov.w	r3, #0
 800e6ea:	008b      	lsls	r3, r1, #2
 800e6ec:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800e6f0:	0082      	lsls	r2, r0, #2
 800e6f2:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 800e6f6:	f7f2 fad7 	bl	8000ca8 <__aeabi_uldivmod>
 800e6fa:	4602      	mov	r2, r0
 800e6fc:	460b      	mov	r3, r1
 800e6fe:	4b0f      	ldr	r3, [pc, #60]	; (800e73c <UART_SetConfig+0x734>)
 800e700:	fba3 1302 	umull	r1, r3, r3, r2
 800e704:	095b      	lsrs	r3, r3, #5
 800e706:	2164      	movs	r1, #100	; 0x64
 800e708:	fb01 f303 	mul.w	r3, r1, r3
 800e70c:	1ad3      	subs	r3, r2, r3
 800e70e:	011b      	lsls	r3, r3, #4
 800e710:	3332      	adds	r3, #50	; 0x32
 800e712:	4a0a      	ldr	r2, [pc, #40]	; (800e73c <UART_SetConfig+0x734>)
 800e714:	fba2 2303 	umull	r2, r3, r2, r3
 800e718:	095b      	lsrs	r3, r3, #5
 800e71a:	f003 020f 	and.w	r2, r3, #15
 800e71e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e722:	681b      	ldr	r3, [r3, #0]
 800e724:	4432      	add	r2, r6
 800e726:	609a      	str	r2, [r3, #8]
}
 800e728:	e7ff      	b.n	800e72a <UART_SetConfig+0x722>
 800e72a:	bf00      	nop
 800e72c:	37f4      	adds	r7, #244	; 0xf4
 800e72e:	46bd      	mov	sp, r7
 800e730:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e734:	40011000 	.word	0x40011000
 800e738:	40011400 	.word	0x40011400
 800e73c:	51eb851f 	.word	0x51eb851f

0800e740 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800e740:	b580      	push	{r7, lr}
 800e742:	b084      	sub	sp, #16
 800e744:	af04      	add	r7, sp, #16
  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 800e746:	f000 fb1f 	bl	800ed88 <lwip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 800e74a:	4b19      	ldr	r3, [pc, #100]	; (800e7b0 <MX_LWIP_Init+0x70>)
 800e74c:	2200      	movs	r2, #0
 800e74e:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 800e750:	4b18      	ldr	r3, [pc, #96]	; (800e7b4 <MX_LWIP_Init+0x74>)
 800e752:	2200      	movs	r2, #0
 800e754:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 800e756:	4b18      	ldr	r3, [pc, #96]	; (800e7b8 <MX_LWIP_Init+0x78>)
 800e758:	2200      	movs	r2, #0
 800e75a:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 800e75c:	4b17      	ldr	r3, [pc, #92]	; (800e7bc <MX_LWIP_Init+0x7c>)
 800e75e:	9302      	str	r3, [sp, #8]
 800e760:	4b17      	ldr	r3, [pc, #92]	; (800e7c0 <MX_LWIP_Init+0x80>)
 800e762:	9301      	str	r3, [sp, #4]
 800e764:	2300      	movs	r3, #0
 800e766:	9300      	str	r3, [sp, #0]
 800e768:	4b13      	ldr	r3, [pc, #76]	; (800e7b8 <MX_LWIP_Init+0x78>)
 800e76a:	4a12      	ldr	r2, [pc, #72]	; (800e7b4 <MX_LWIP_Init+0x74>)
 800e76c:	4910      	ldr	r1, [pc, #64]	; (800e7b0 <MX_LWIP_Init+0x70>)
 800e76e:	4815      	ldr	r0, [pc, #84]	; (800e7c4 <MX_LWIP_Init+0x84>)
 800e770:	f000 ffb0 	bl	800f6d4 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800e774:	4813      	ldr	r0, [pc, #76]	; (800e7c4 <MX_LWIP_Init+0x84>)
 800e776:	f001 f967 	bl	800fa48 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800e77a:	4b12      	ldr	r3, [pc, #72]	; (800e7c4 <MX_LWIP_Init+0x84>)
 800e77c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800e780:	089b      	lsrs	r3, r3, #2
 800e782:	f003 0301 	and.w	r3, r3, #1
 800e786:	b2db      	uxtb	r3, r3
 800e788:	2b00      	cmp	r3, #0
 800e78a:	d003      	beq.n	800e794 <MX_LWIP_Init+0x54>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 800e78c:	480d      	ldr	r0, [pc, #52]	; (800e7c4 <MX_LWIP_Init+0x84>)
 800e78e:	f001 f96b 	bl	800fa68 <netif_set_up>
 800e792:	e002      	b.n	800e79a <MX_LWIP_Init+0x5a>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 800e794:	480b      	ldr	r0, [pc, #44]	; (800e7c4 <MX_LWIP_Init+0x84>)
 800e796:	f001 f9d3 	bl	800fb40 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 800e79a:	490b      	ldr	r1, [pc, #44]	; (800e7c8 <MX_LWIP_Init+0x88>)
 800e79c:	4809      	ldr	r0, [pc, #36]	; (800e7c4 <MX_LWIP_Init+0x84>)
 800e79e:	f001 fa01 	bl	800fba4 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 800e7a2:	4808      	ldr	r0, [pc, #32]	; (800e7c4 <MX_LWIP_Init+0x84>)
 800e7a4:	f008 fa92 	bl	8016ccc <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800e7a8:	bf00      	nop
 800e7aa:	46bd      	mov	sp, r7
 800e7ac:	bd80      	pop	{r7, pc}
 800e7ae:	bf00      	nop
 800e7b0:	20001418 	.word	0x20001418
 800e7b4:	2000141c 	.word	0x2000141c
 800e7b8:	20001420 	.word	0x20001420
 800e7bc:	0801a699 	.word	0x0801a699
 800e7c0:	0800ebb5 	.word	0x0800ebb5
 800e7c4:	200013e0 	.word	0x200013e0
 800e7c8:	0800ec21 	.word	0x0800ec21

0800e7cc <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800e7cc:	b580      	push	{r7, lr}
 800e7ce:	b08e      	sub	sp, #56	; 0x38
 800e7d0:	af00      	add	r7, sp, #0
 800e7d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e7d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e7d8:	2200      	movs	r2, #0
 800e7da:	601a      	str	r2, [r3, #0]
 800e7dc:	605a      	str	r2, [r3, #4]
 800e7de:	609a      	str	r2, [r3, #8]
 800e7e0:	60da      	str	r2, [r3, #12]
 800e7e2:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	681b      	ldr	r3, [r3, #0]
 800e7e8:	4a46      	ldr	r2, [pc, #280]	; (800e904 <HAL_ETH_MspInit+0x138>)
 800e7ea:	4293      	cmp	r3, r2
 800e7ec:	f040 8085 	bne.w	800e8fa <HAL_ETH_MspInit+0x12e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 800e7f0:	2300      	movs	r3, #0
 800e7f2:	623b      	str	r3, [r7, #32]
 800e7f4:	4b44      	ldr	r3, [pc, #272]	; (800e908 <HAL_ETH_MspInit+0x13c>)
 800e7f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e7f8:	4a43      	ldr	r2, [pc, #268]	; (800e908 <HAL_ETH_MspInit+0x13c>)
 800e7fa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800e7fe:	6313      	str	r3, [r2, #48]	; 0x30
 800e800:	4b41      	ldr	r3, [pc, #260]	; (800e908 <HAL_ETH_MspInit+0x13c>)
 800e802:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e804:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e808:	623b      	str	r3, [r7, #32]
 800e80a:	6a3b      	ldr	r3, [r7, #32]
 800e80c:	2300      	movs	r3, #0
 800e80e:	61fb      	str	r3, [r7, #28]
 800e810:	4b3d      	ldr	r3, [pc, #244]	; (800e908 <HAL_ETH_MspInit+0x13c>)
 800e812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e814:	4a3c      	ldr	r2, [pc, #240]	; (800e908 <HAL_ETH_MspInit+0x13c>)
 800e816:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800e81a:	6313      	str	r3, [r2, #48]	; 0x30
 800e81c:	4b3a      	ldr	r3, [pc, #232]	; (800e908 <HAL_ETH_MspInit+0x13c>)
 800e81e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e820:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800e824:	61fb      	str	r3, [r7, #28]
 800e826:	69fb      	ldr	r3, [r7, #28]
 800e828:	2300      	movs	r3, #0
 800e82a:	61bb      	str	r3, [r7, #24]
 800e82c:	4b36      	ldr	r3, [pc, #216]	; (800e908 <HAL_ETH_MspInit+0x13c>)
 800e82e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e830:	4a35      	ldr	r2, [pc, #212]	; (800e908 <HAL_ETH_MspInit+0x13c>)
 800e832:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800e836:	6313      	str	r3, [r2, #48]	; 0x30
 800e838:	4b33      	ldr	r3, [pc, #204]	; (800e908 <HAL_ETH_MspInit+0x13c>)
 800e83a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e83c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e840:	61bb      	str	r3, [r7, #24]
 800e842:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800e844:	2300      	movs	r3, #0
 800e846:	617b      	str	r3, [r7, #20]
 800e848:	4b2f      	ldr	r3, [pc, #188]	; (800e908 <HAL_ETH_MspInit+0x13c>)
 800e84a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e84c:	4a2e      	ldr	r2, [pc, #184]	; (800e908 <HAL_ETH_MspInit+0x13c>)
 800e84e:	f043 0304 	orr.w	r3, r3, #4
 800e852:	6313      	str	r3, [r2, #48]	; 0x30
 800e854:	4b2c      	ldr	r3, [pc, #176]	; (800e908 <HAL_ETH_MspInit+0x13c>)
 800e856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e858:	f003 0304 	and.w	r3, r3, #4
 800e85c:	617b      	str	r3, [r7, #20]
 800e85e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e860:	2300      	movs	r3, #0
 800e862:	613b      	str	r3, [r7, #16]
 800e864:	4b28      	ldr	r3, [pc, #160]	; (800e908 <HAL_ETH_MspInit+0x13c>)
 800e866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e868:	4a27      	ldr	r2, [pc, #156]	; (800e908 <HAL_ETH_MspInit+0x13c>)
 800e86a:	f043 0301 	orr.w	r3, r3, #1
 800e86e:	6313      	str	r3, [r2, #48]	; 0x30
 800e870:	4b25      	ldr	r3, [pc, #148]	; (800e908 <HAL_ETH_MspInit+0x13c>)
 800e872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e874:	f003 0301 	and.w	r3, r3, #1
 800e878:	613b      	str	r3, [r7, #16]
 800e87a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800e87c:	2300      	movs	r3, #0
 800e87e:	60fb      	str	r3, [r7, #12]
 800e880:	4b21      	ldr	r3, [pc, #132]	; (800e908 <HAL_ETH_MspInit+0x13c>)
 800e882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e884:	4a20      	ldr	r2, [pc, #128]	; (800e908 <HAL_ETH_MspInit+0x13c>)
 800e886:	f043 0302 	orr.w	r3, r3, #2
 800e88a:	6313      	str	r3, [r2, #48]	; 0x30
 800e88c:	4b1e      	ldr	r3, [pc, #120]	; (800e908 <HAL_ETH_MspInit+0x13c>)
 800e88e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e890:	f003 0302 	and.w	r3, r3, #2
 800e894:	60fb      	str	r3, [r7, #12]
 800e896:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800e898:	2332      	movs	r3, #50	; 0x32
 800e89a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e89c:	2302      	movs	r3, #2
 800e89e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e8a0:	2300      	movs	r3, #0
 800e8a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e8a4:	2303      	movs	r3, #3
 800e8a6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800e8a8:	230b      	movs	r3, #11
 800e8aa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800e8ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e8b0:	4619      	mov	r1, r3
 800e8b2:	4816      	ldr	r0, [pc, #88]	; (800e90c <HAL_ETH_MspInit+0x140>)
 800e8b4:	f7fc ff5a 	bl	800b76c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800e8b8:	2386      	movs	r3, #134	; 0x86
 800e8ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e8bc:	2302      	movs	r3, #2
 800e8be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e8c0:	2300      	movs	r3, #0
 800e8c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e8c4:	2303      	movs	r3, #3
 800e8c6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800e8c8:	230b      	movs	r3, #11
 800e8ca:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e8cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e8d0:	4619      	mov	r1, r3
 800e8d2:	480f      	ldr	r0, [pc, #60]	; (800e910 <HAL_ETH_MspInit+0x144>)
 800e8d4:	f7fc ff4a 	bl	800b76c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 800e8d8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800e8dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e8de:	2302      	movs	r3, #2
 800e8e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e8e2:	2300      	movs	r3, #0
 800e8e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e8e6:	2303      	movs	r3, #3
 800e8e8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800e8ea:	230b      	movs	r3, #11
 800e8ec:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800e8ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e8f2:	4619      	mov	r1, r3
 800e8f4:	4807      	ldr	r0, [pc, #28]	; (800e914 <HAL_ETH_MspInit+0x148>)
 800e8f6:	f7fc ff39 	bl	800b76c <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800e8fa:	bf00      	nop
 800e8fc:	3738      	adds	r7, #56	; 0x38
 800e8fe:	46bd      	mov	sp, r7
 800e900:	bd80      	pop	{r7, pc}
 800e902:	bf00      	nop
 800e904:	40028000 	.word	0x40028000
 800e908:	40023800 	.word	0x40023800
 800e90c:	40020800 	.word	0x40020800
 800e910:	40020000 	.word	0x40020000
 800e914:	40020400 	.word	0x40020400

0800e918 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800e918:	b580      	push	{r7, lr}
 800e91a:	b086      	sub	sp, #24
 800e91c:	af00      	add	r7, sp, #0
 800e91e:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 800e920:	2300      	movs	r3, #0
 800e922:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800e924:	4b4e      	ldr	r3, [pc, #312]	; (800ea60 <low_level_init+0x148>)
 800e926:	4a4f      	ldr	r2, [pc, #316]	; (800ea64 <low_level_init+0x14c>)
 800e928:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 800e92a:	4b4d      	ldr	r3, [pc, #308]	; (800ea60 <low_level_init+0x148>)
 800e92c:	2201      	movs	r2, #1
 800e92e:	605a      	str	r2, [r3, #4]
  heth.Init.PhyAddress = DP83848_PHY_ADDRESS;
 800e930:	4b4b      	ldr	r3, [pc, #300]	; (800ea60 <low_level_init+0x148>)
 800e932:	2201      	movs	r2, #1
 800e934:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x02;
 800e936:	2302      	movs	r3, #2
 800e938:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x00;
 800e93a:	2300      	movs	r3, #0
 800e93c:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0x00;
 800e93e:	2300      	movs	r3, #0
 800e940:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 800e942:	2300      	movs	r3, #0
 800e944:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 800e946:	2300      	movs	r3, #0
 800e948:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 800e94a:	2300      	movs	r3, #0
 800e94c:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 800e94e:	4a44      	ldr	r2, [pc, #272]	; (800ea60 <low_level_init+0x148>)
 800e950:	f107 0308 	add.w	r3, r7, #8
 800e954:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 800e956:	4b42      	ldr	r3, [pc, #264]	; (800ea60 <low_level_init+0x148>)
 800e958:	2200      	movs	r2, #0
 800e95a:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 800e95c:	4b40      	ldr	r3, [pc, #256]	; (800ea60 <low_level_init+0x148>)
 800e95e:	2200      	movs	r2, #0
 800e960:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 800e962:	4b3f      	ldr	r3, [pc, #252]	; (800ea60 <low_level_init+0x148>)
 800e964:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800e968:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800e96a:	483d      	ldr	r0, [pc, #244]	; (800ea60 <low_level_init+0x148>)
 800e96c:	f7fb fe5c 	bl	800a628 <HAL_ETH_Init>
 800e970:	4603      	mov	r3, r0
 800e972:	75fb      	strb	r3, [r7, #23]

  if (hal_eth_init_status == HAL_OK)
 800e974:	7dfb      	ldrb	r3, [r7, #23]
 800e976:	2b00      	cmp	r3, #0
 800e978:	d108      	bne.n	800e98c <low_level_init+0x74>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800e980:	f043 0304 	orr.w	r3, r3, #4
 800e984:	b2da      	uxtb	r2, r3
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 800e98c:	2304      	movs	r3, #4
 800e98e:	4a36      	ldr	r2, [pc, #216]	; (800ea68 <low_level_init+0x150>)
 800e990:	4936      	ldr	r1, [pc, #216]	; (800ea6c <low_level_init+0x154>)
 800e992:	4833      	ldr	r0, [pc, #204]	; (800ea60 <low_level_init+0x148>)
 800e994:	f7fb ffe4 	bl	800a960 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 800e998:	2304      	movs	r3, #4
 800e99a:	4a35      	ldr	r2, [pc, #212]	; (800ea70 <low_level_init+0x158>)
 800e99c:	4935      	ldr	r1, [pc, #212]	; (800ea74 <low_level_init+0x15c>)
 800e99e:	4830      	ldr	r0, [pc, #192]	; (800ea60 <low_level_init+0x148>)
 800e9a0:	f7fc f847 	bl	800aa32 <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	2206      	movs	r2, #6
 800e9a8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800e9ac:	4b2c      	ldr	r3, [pc, #176]	; (800ea60 <low_level_init+0x148>)
 800e9ae:	695b      	ldr	r3, [r3, #20]
 800e9b0:	781a      	ldrb	r2, [r3, #0]
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800e9b8:	4b29      	ldr	r3, [pc, #164]	; (800ea60 <low_level_init+0x148>)
 800e9ba:	695b      	ldr	r3, [r3, #20]
 800e9bc:	785a      	ldrb	r2, [r3, #1]
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800e9c4:	4b26      	ldr	r3, [pc, #152]	; (800ea60 <low_level_init+0x148>)
 800e9c6:	695b      	ldr	r3, [r3, #20]
 800e9c8:	789a      	ldrb	r2, [r3, #2]
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800e9d0:	4b23      	ldr	r3, [pc, #140]	; (800ea60 <low_level_init+0x148>)
 800e9d2:	695b      	ldr	r3, [r3, #20]
 800e9d4:	78da      	ldrb	r2, [r3, #3]
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800e9dc:	4b20      	ldr	r3, [pc, #128]	; (800ea60 <low_level_init+0x148>)
 800e9de:	695b      	ldr	r3, [r3, #20]
 800e9e0:	791a      	ldrb	r2, [r3, #4]
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800e9e8:	4b1d      	ldr	r3, [pc, #116]	; (800ea60 <low_level_init+0x148>)
 800e9ea:	695b      	ldr	r3, [r3, #20]
 800e9ec:	795a      	ldrb	r2, [r3, #5]
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

  /* maximum transfer unit */
  netif->mtu = 1500;
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800e9fa:	851a      	strh	r2, [r3, #40]	; 0x28

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ea02:	f043 030a 	orr.w	r3, r3, #10
 800ea06:	b2da      	uxtb	r2, r3
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 800ea0e:	4814      	ldr	r0, [pc, #80]	; (800ea60 <low_level_init+0x148>)
 800ea10:	f7fc fa34 	bl	800ae7c <HAL_ETH_Start>

/* USER CODE END PHY_PRE_CONFIG */

  /**** Configure PHY to generate an interrupt when Eth Link state changes ****/
  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_MICR, &regvalue);
 800ea14:	f107 0310 	add.w	r3, r7, #16
 800ea18:	461a      	mov	r2, r3
 800ea1a:	2111      	movs	r1, #17
 800ea1c:	4810      	ldr	r0, [pc, #64]	; (800ea60 <low_level_init+0x148>)
 800ea1e:	f7fc f95f 	bl	800ace0 <HAL_ETH_ReadPHYRegister>

  regvalue |= (PHY_MICR_INT_EN | PHY_MICR_INT_OE);
 800ea22:	693b      	ldr	r3, [r7, #16]
 800ea24:	f043 0303 	orr.w	r3, r3, #3
 800ea28:	613b      	str	r3, [r7, #16]

  /* Enable Interrupts */
  HAL_ETH_WritePHYRegister(&heth, PHY_MICR, regvalue );
 800ea2a:	693b      	ldr	r3, [r7, #16]
 800ea2c:	461a      	mov	r2, r3
 800ea2e:	2111      	movs	r1, #17
 800ea30:	480b      	ldr	r0, [pc, #44]	; (800ea60 <low_level_init+0x148>)
 800ea32:	f7fc f9bd 	bl	800adb0 <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_MISR, &regvalue);
 800ea36:	f107 0310 	add.w	r3, r7, #16
 800ea3a:	461a      	mov	r2, r3
 800ea3c:	2112      	movs	r1, #18
 800ea3e:	4808      	ldr	r0, [pc, #32]	; (800ea60 <low_level_init+0x148>)
 800ea40:	f7fc f94e 	bl	800ace0 <HAL_ETH_ReadPHYRegister>

  regvalue |= PHY_MISR_LINK_INT_EN;
 800ea44:	693b      	ldr	r3, [r7, #16]
 800ea46:	f043 0320 	orr.w	r3, r3, #32
 800ea4a:	613b      	str	r3, [r7, #16]

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_MISR, regvalue);
 800ea4c:	693b      	ldr	r3, [r7, #16]
 800ea4e:	461a      	mov	r2, r3
 800ea50:	2112      	movs	r1, #18
 800ea52:	4803      	ldr	r0, [pc, #12]	; (800ea60 <low_level_init+0x148>)
 800ea54:	f7fc f9ac 	bl	800adb0 <HAL_ETH_WritePHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800ea58:	bf00      	nop
 800ea5a:	3718      	adds	r7, #24
 800ea5c:	46bd      	mov	sp, r7
 800ea5e:	bd80      	pop	{r7, pc}
 800ea60:	20002cf4 	.word	0x20002cf4
 800ea64:	40028000 	.word	0x40028000
 800ea68:	20002d3c 	.word	0x20002d3c
 800ea6c:	20001424 	.word	0x20001424
 800ea70:	200014a4 	.word	0x200014a4
 800ea74:	20002c74 	.word	0x20002c74

0800ea78 <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800ea78:	b580      	push	{r7, lr}
 800ea7a:	b08a      	sub	sp, #40	; 0x28
 800ea7c:	af00      	add	r7, sp, #0
 800ea7e:	6078      	str	r0, [r7, #4]
 800ea80:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 800ea82:	4b4b      	ldr	r3, [pc, #300]	; (800ebb0 <low_level_output+0x138>)
 800ea84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea86:	689b      	ldr	r3, [r3, #8]
 800ea88:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 800ea8a:	2300      	movs	r3, #0
 800ea8c:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 800ea8e:	2300      	movs	r3, #0
 800ea90:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 800ea92:	2300      	movs	r3, #0
 800ea94:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 800ea96:	2300      	movs	r3, #0
 800ea98:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 800ea9a:	4b45      	ldr	r3, [pc, #276]	; (800ebb0 <low_level_output+0x138>)
 800ea9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea9e:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 800eaa0:	2300      	movs	r3, #0
 800eaa2:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 800eaa4:	683b      	ldr	r3, [r7, #0]
 800eaa6:	623b      	str	r3, [r7, #32]
 800eaa8:	e05a      	b.n	800eb60 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800eaaa:	69bb      	ldr	r3, [r7, #24]
 800eaac:	681b      	ldr	r3, [r3, #0]
 800eaae:	2b00      	cmp	r3, #0
 800eab0:	da03      	bge.n	800eaba <low_level_output+0x42>
      {
        errval = ERR_USE;
 800eab2:	23f8      	movs	r3, #248	; 0xf8
 800eab4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 800eab8:	e05c      	b.n	800eb74 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 800eaba:	6a3b      	ldr	r3, [r7, #32]
 800eabc:	895b      	ldrh	r3, [r3, #10]
 800eabe:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 800eac0:	2300      	movs	r3, #0
 800eac2:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800eac4:	e02f      	b.n	800eb26 <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 800eac6:	69fa      	ldr	r2, [r7, #28]
 800eac8:	693b      	ldr	r3, [r7, #16]
 800eaca:	18d0      	adds	r0, r2, r3
 800eacc:	6a3b      	ldr	r3, [r7, #32]
 800eace:	685a      	ldr	r2, [r3, #4]
 800ead0:	68bb      	ldr	r3, [r7, #8]
 800ead2:	18d1      	adds	r1, r2, r3
 800ead4:	693b      	ldr	r3, [r7, #16]
 800ead6:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 800eada:	3304      	adds	r3, #4
 800eadc:	461a      	mov	r2, r3
 800eade:	f00b fefb 	bl	801a8d8 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 800eae2:	69bb      	ldr	r3, [r7, #24]
 800eae4:	68db      	ldr	r3, [r3, #12]
 800eae6:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800eae8:	69bb      	ldr	r3, [r7, #24]
 800eaea:	681b      	ldr	r3, [r3, #0]
 800eaec:	2b00      	cmp	r3, #0
 800eaee:	da03      	bge.n	800eaf8 <low_level_output+0x80>
        {
          errval = ERR_USE;
 800eaf0:	23f8      	movs	r3, #248	; 0xf8
 800eaf2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 800eaf6:	e03d      	b.n	800eb74 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 800eaf8:	69bb      	ldr	r3, [r7, #24]
 800eafa:	689b      	ldr	r3, [r3, #8]
 800eafc:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 800eafe:	693a      	ldr	r2, [r7, #16]
 800eb00:	68fb      	ldr	r3, [r7, #12]
 800eb02:	4413      	add	r3, r2
 800eb04:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 800eb08:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 800eb0a:	68ba      	ldr	r2, [r7, #8]
 800eb0c:	693b      	ldr	r3, [r7, #16]
 800eb0e:	1ad3      	subs	r3, r2, r3
 800eb10:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800eb14:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 800eb16:	697a      	ldr	r2, [r7, #20]
 800eb18:	693b      	ldr	r3, [r7, #16]
 800eb1a:	1ad3      	subs	r3, r2, r3
 800eb1c:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800eb20:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 800eb22:	2300      	movs	r3, #0
 800eb24:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800eb26:	68fa      	ldr	r2, [r7, #12]
 800eb28:	693b      	ldr	r3, [r7, #16]
 800eb2a:	4413      	add	r3, r2
 800eb2c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800eb30:	4293      	cmp	r3, r2
 800eb32:	d8c8      	bhi.n	800eac6 <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 800eb34:	69fa      	ldr	r2, [r7, #28]
 800eb36:	693b      	ldr	r3, [r7, #16]
 800eb38:	18d0      	adds	r0, r2, r3
 800eb3a:	6a3b      	ldr	r3, [r7, #32]
 800eb3c:	685a      	ldr	r2, [r3, #4]
 800eb3e:	68bb      	ldr	r3, [r7, #8]
 800eb40:	4413      	add	r3, r2
 800eb42:	68fa      	ldr	r2, [r7, #12]
 800eb44:	4619      	mov	r1, r3
 800eb46:	f00b fec7 	bl	801a8d8 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 800eb4a:	693a      	ldr	r2, [r7, #16]
 800eb4c:	68fb      	ldr	r3, [r7, #12]
 800eb4e:	4413      	add	r3, r2
 800eb50:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 800eb52:	697a      	ldr	r2, [r7, #20]
 800eb54:	68fb      	ldr	r3, [r7, #12]
 800eb56:	4413      	add	r3, r2
 800eb58:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 800eb5a:	6a3b      	ldr	r3, [r7, #32]
 800eb5c:	681b      	ldr	r3, [r3, #0]
 800eb5e:	623b      	str	r3, [r7, #32]
 800eb60:	6a3b      	ldr	r3, [r7, #32]
 800eb62:	2b00      	cmp	r3, #0
 800eb64:	d1a1      	bne.n	800eaaa <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 800eb66:	6979      	ldr	r1, [r7, #20]
 800eb68:	4811      	ldr	r0, [pc, #68]	; (800ebb0 <low_level_output+0x138>)
 800eb6a:	f7fb ffcf 	bl	800ab0c <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 800eb6e:	2300      	movs	r3, #0
 800eb70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 800eb74:	4b0e      	ldr	r3, [pc, #56]	; (800ebb0 <low_level_output+0x138>)
 800eb76:	681b      	ldr	r3, [r3, #0]
 800eb78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800eb7c:	3314      	adds	r3, #20
 800eb7e:	681b      	ldr	r3, [r3, #0]
 800eb80:	f003 0320 	and.w	r3, r3, #32
 800eb84:	2b00      	cmp	r3, #0
 800eb86:	d00d      	beq.n	800eba4 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 800eb88:	4b09      	ldr	r3, [pc, #36]	; (800ebb0 <low_level_output+0x138>)
 800eb8a:	681b      	ldr	r3, [r3, #0]
 800eb8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800eb90:	3314      	adds	r3, #20
 800eb92:	2220      	movs	r2, #32
 800eb94:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 800eb96:	4b06      	ldr	r3, [pc, #24]	; (800ebb0 <low_level_output+0x138>)
 800eb98:	681b      	ldr	r3, [r3, #0]
 800eb9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800eb9e:	3304      	adds	r3, #4
 800eba0:	2200      	movs	r2, #0
 800eba2:	601a      	str	r2, [r3, #0]
  }
  return errval;
 800eba4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800eba8:	4618      	mov	r0, r3
 800ebaa:	3728      	adds	r7, #40	; 0x28
 800ebac:	46bd      	mov	sp, r7
 800ebae:	bd80      	pop	{r7, pc}
 800ebb0:	20002cf4 	.word	0x20002cf4

0800ebb4 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800ebb4:	b580      	push	{r7, lr}
 800ebb6:	b082      	sub	sp, #8
 800ebb8:	af00      	add	r7, sp, #0
 800ebba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	2b00      	cmp	r3, #0
 800ebc0:	d106      	bne.n	800ebd0 <ethernetif_init+0x1c>
 800ebc2:	4b0e      	ldr	r3, [pc, #56]	; (800ebfc <ethernetif_init+0x48>)
 800ebc4:	f44f 7203 	mov.w	r2, #524	; 0x20c
 800ebc8:	490d      	ldr	r1, [pc, #52]	; (800ec00 <ethernetif_init+0x4c>)
 800ebca:	480e      	ldr	r0, [pc, #56]	; (800ec04 <ethernetif_init+0x50>)
 800ebcc:	f00c fbc8 	bl	801b360 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	2273      	movs	r2, #115	; 0x73
 800ebd4:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  netif->name[1] = IFNAME1;
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	2274      	movs	r2, #116	; 0x74
 800ebdc:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	4a09      	ldr	r2, [pc, #36]	; (800ec08 <ethernetif_init+0x54>)
 800ebe4:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	4a08      	ldr	r2, [pc, #32]	; (800ec0c <ethernetif_init+0x58>)
 800ebea:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800ebec:	6878      	ldr	r0, [r7, #4]
 800ebee:	f7ff fe93 	bl	800e918 <low_level_init>

  return ERR_OK;
 800ebf2:	2300      	movs	r3, #0
}
 800ebf4:	4618      	mov	r0, r3
 800ebf6:	3708      	adds	r7, #8
 800ebf8:	46bd      	mov	sp, r7
 800ebfa:	bd80      	pop	{r7, pc}
 800ebfc:	08020b68 	.word	0x08020b68
 800ec00:	08020b84 	.word	0x08020b84
 800ec04:	08020b94 	.word	0x08020b94
 800ec08:	08018b21 	.word	0x08018b21
 800ec0c:	0800ea79 	.word	0x0800ea79

0800ec10 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 800ec10:	b580      	push	{r7, lr}
 800ec12:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800ec14:	f7fa fc7a 	bl	800950c <HAL_GetTick>
 800ec18:	4603      	mov	r3, r0
}
 800ec1a:	4618      	mov	r0, r3
 800ec1c:	bd80      	pop	{r7, pc}
	...

0800ec20 <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 800ec20:	b580      	push	{r7, lr}
 800ec22:	b084      	sub	sp, #16
 800ec24:	af00      	add	r7, sp, #0
 800ec26:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 800ec28:	2300      	movs	r3, #0
 800ec2a:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 800ec2c:	2300      	movs	r3, #0
 800ec2e:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ec36:	089b      	lsrs	r3, r3, #2
 800ec38:	f003 0301 	and.w	r3, r3, #1
 800ec3c:	b2db      	uxtb	r3, r3
 800ec3e:	2b00      	cmp	r3, #0
 800ec40:	d05d      	beq.n	800ecfe <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 800ec42:	4b34      	ldr	r3, [pc, #208]	; (800ed14 <ethernetif_update_config+0xf4>)
 800ec44:	685b      	ldr	r3, [r3, #4]
 800ec46:	2b00      	cmp	r3, #0
 800ec48:	d03f      	beq.n	800ecca <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 800ec4a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800ec4e:	2100      	movs	r1, #0
 800ec50:	4830      	ldr	r0, [pc, #192]	; (800ed14 <ethernetif_update_config+0xf4>)
 800ec52:	f7fc f8ad 	bl	800adb0 <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 800ec56:	f7fa fc59 	bl	800950c <HAL_GetTick>
 800ec5a:	4603      	mov	r3, r0
 800ec5c:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 800ec5e:	f107 0308 	add.w	r3, r7, #8
 800ec62:	461a      	mov	r2, r3
 800ec64:	2101      	movs	r1, #1
 800ec66:	482b      	ldr	r0, [pc, #172]	; (800ed14 <ethernetif_update_config+0xf4>)
 800ec68:	f7fc f83a 	bl	800ace0 <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 800ec6c:	f7fa fc4e 	bl	800950c <HAL_GetTick>
 800ec70:	4602      	mov	r2, r0
 800ec72:	68fb      	ldr	r3, [r7, #12]
 800ec74:	1ad3      	subs	r3, r2, r3
 800ec76:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ec7a:	d828      	bhi.n	800ecce <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 800ec7c:	68bb      	ldr	r3, [r7, #8]
 800ec7e:	f003 0320 	and.w	r3, r3, #32
 800ec82:	2b00      	cmp	r3, #0
 800ec84:	d0eb      	beq.n	800ec5e <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 800ec86:	f107 0308 	add.w	r3, r7, #8
 800ec8a:	461a      	mov	r2, r3
 800ec8c:	211f      	movs	r1, #31
 800ec8e:	4821      	ldr	r0, [pc, #132]	; (800ed14 <ethernetif_update_config+0xf4>)
 800ec90:	f7fc f826 	bl	800ace0 <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 800ec94:	68bb      	ldr	r3, [r7, #8]
 800ec96:	f003 0310 	and.w	r3, r3, #16
 800ec9a:	2b00      	cmp	r3, #0
 800ec9c:	d004      	beq.n	800eca8 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 800ec9e:	4b1d      	ldr	r3, [pc, #116]	; (800ed14 <ethernetif_update_config+0xf4>)
 800eca0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800eca4:	60da      	str	r2, [r3, #12]
 800eca6:	e002      	b.n	800ecae <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 800eca8:	4b1a      	ldr	r3, [pc, #104]	; (800ed14 <ethernetif_update_config+0xf4>)
 800ecaa:	2200      	movs	r2, #0
 800ecac:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 800ecae:	68bb      	ldr	r3, [r7, #8]
 800ecb0:	f003 0304 	and.w	r3, r3, #4
 800ecb4:	2b00      	cmp	r3, #0
 800ecb6:	d003      	beq.n	800ecc0 <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 800ecb8:	4b16      	ldr	r3, [pc, #88]	; (800ed14 <ethernetif_update_config+0xf4>)
 800ecba:	2200      	movs	r2, #0
 800ecbc:	609a      	str	r2, [r3, #8]
 800ecbe:	e016      	b.n	800ecee <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 800ecc0:	4b14      	ldr	r3, [pc, #80]	; (800ed14 <ethernetif_update_config+0xf4>)
 800ecc2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800ecc6:	609a      	str	r2, [r3, #8]
 800ecc8:	e011      	b.n	800ecee <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 800ecca:	bf00      	nop
 800eccc:	e000      	b.n	800ecd0 <ethernetif_update_config+0xb0>
          goto error;
 800ecce:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 800ecd0:	4b10      	ldr	r3, [pc, #64]	; (800ed14 <ethernetif_update_config+0xf4>)
 800ecd2:	68db      	ldr	r3, [r3, #12]
 800ecd4:	08db      	lsrs	r3, r3, #3
 800ecd6:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 800ecd8:	4b0e      	ldr	r3, [pc, #56]	; (800ed14 <ethernetif_update_config+0xf4>)
 800ecda:	689b      	ldr	r3, [r3, #8]
 800ecdc:	085b      	lsrs	r3, r3, #1
 800ecde:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 800ece0:	4313      	orrs	r3, r2
 800ece2:	b29b      	uxth	r3, r3
 800ece4:	461a      	mov	r2, r3
 800ece6:	2100      	movs	r1, #0
 800ece8:	480a      	ldr	r0, [pc, #40]	; (800ed14 <ethernetif_update_config+0xf4>)
 800ecea:	f7fc f861 	bl	800adb0 <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 800ecee:	2100      	movs	r1, #0
 800ecf0:	4808      	ldr	r0, [pc, #32]	; (800ed14 <ethernetif_update_config+0xf4>)
 800ecf2:	f7fc f921 	bl	800af38 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 800ecf6:	4807      	ldr	r0, [pc, #28]	; (800ed14 <ethernetif_update_config+0xf4>)
 800ecf8:	f7fc f8c0 	bl	800ae7c <HAL_ETH_Start>
 800ecfc:	e002      	b.n	800ed04 <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 800ecfe:	4805      	ldr	r0, [pc, #20]	; (800ed14 <ethernetif_update_config+0xf4>)
 800ed00:	f7fc f8eb 	bl	800aeda <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 800ed04:	6878      	ldr	r0, [r7, #4]
 800ed06:	f000 f807 	bl	800ed18 <ethernetif_notify_conn_changed>
}
 800ed0a:	bf00      	nop
 800ed0c:	3710      	adds	r7, #16
 800ed0e:	46bd      	mov	sp, r7
 800ed10:	bd80      	pop	{r7, pc}
 800ed12:	bf00      	nop
 800ed14:	20002cf4 	.word	0x20002cf4

0800ed18 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 800ed18:	b480      	push	{r7}
 800ed1a:	b083      	sub	sp, #12
 800ed1c:	af00      	add	r7, sp, #0
 800ed1e:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 800ed20:	bf00      	nop
 800ed22:	370c      	adds	r7, #12
 800ed24:	46bd      	mov	sp, r7
 800ed26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed2a:	4770      	bx	lr

0800ed2c <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800ed2c:	b480      	push	{r7}
 800ed2e:	b083      	sub	sp, #12
 800ed30:	af00      	add	r7, sp, #0
 800ed32:	4603      	mov	r3, r0
 800ed34:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800ed36:	88fb      	ldrh	r3, [r7, #6]
 800ed38:	021b      	lsls	r3, r3, #8
 800ed3a:	b21a      	sxth	r2, r3
 800ed3c:	88fb      	ldrh	r3, [r7, #6]
 800ed3e:	0a1b      	lsrs	r3, r3, #8
 800ed40:	b29b      	uxth	r3, r3
 800ed42:	b21b      	sxth	r3, r3
 800ed44:	4313      	orrs	r3, r2
 800ed46:	b21b      	sxth	r3, r3
 800ed48:	b29b      	uxth	r3, r3
}
 800ed4a:	4618      	mov	r0, r3
 800ed4c:	370c      	adds	r7, #12
 800ed4e:	46bd      	mov	sp, r7
 800ed50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed54:	4770      	bx	lr

0800ed56 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800ed56:	b480      	push	{r7}
 800ed58:	b083      	sub	sp, #12
 800ed5a:	af00      	add	r7, sp, #0
 800ed5c:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	061a      	lsls	r2, r3, #24
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	021b      	lsls	r3, r3, #8
 800ed66:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ed6a:	431a      	orrs	r2, r3
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	0a1b      	lsrs	r3, r3, #8
 800ed70:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800ed74:	431a      	orrs	r2, r3
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	0e1b      	lsrs	r3, r3, #24
 800ed7a:	4313      	orrs	r3, r2
}
 800ed7c:	4618      	mov	r0, r3
 800ed7e:	370c      	adds	r7, #12
 800ed80:	46bd      	mov	sp, r7
 800ed82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed86:	4770      	bx	lr

0800ed88 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800ed88:	b580      	push	{r7, lr}
 800ed8a:	b082      	sub	sp, #8
 800ed8c:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800ed8e:	2300      	movs	r3, #0
 800ed90:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 800ed92:	f000 f8d5 	bl	800ef40 <mem_init>
  memp_init();
 800ed96:	f000 fbdb 	bl	800f550 <memp_init>
  pbuf_init();
  netif_init();
 800ed9a:	f000 fc93 	bl	800f6c4 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800ed9e:	f006 ff5d 	bl	8015c5c <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800eda2:	f001 fcfd 	bl	80107a0 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800eda6:	f006 ff11 	bl	8015bcc <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800edaa:	bf00      	nop
 800edac:	3708      	adds	r7, #8
 800edae:	46bd      	mov	sp, r7
 800edb0:	bd80      	pop	{r7, pc}
	...

0800edb4 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800edb4:	b480      	push	{r7}
 800edb6:	b083      	sub	sp, #12
 800edb8:	af00      	add	r7, sp, #0
 800edba:	4603      	mov	r3, r0
 800edbc:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800edbe:	4b05      	ldr	r3, [pc, #20]	; (800edd4 <ptr_to_mem+0x20>)
 800edc0:	681a      	ldr	r2, [r3, #0]
 800edc2:	88fb      	ldrh	r3, [r7, #6]
 800edc4:	4413      	add	r3, r2
}
 800edc6:	4618      	mov	r0, r3
 800edc8:	370c      	adds	r7, #12
 800edca:	46bd      	mov	sp, r7
 800edcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edd0:	4770      	bx	lr
 800edd2:	bf00      	nop
 800edd4:	200004ac 	.word	0x200004ac

0800edd8 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800edd8:	b480      	push	{r7}
 800edda:	b083      	sub	sp, #12
 800eddc:	af00      	add	r7, sp, #0
 800edde:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800ede0:	4b05      	ldr	r3, [pc, #20]	; (800edf8 <mem_to_ptr+0x20>)
 800ede2:	681b      	ldr	r3, [r3, #0]
 800ede4:	687a      	ldr	r2, [r7, #4]
 800ede6:	1ad3      	subs	r3, r2, r3
 800ede8:	b29b      	uxth	r3, r3
}
 800edea:	4618      	mov	r0, r3
 800edec:	370c      	adds	r7, #12
 800edee:	46bd      	mov	sp, r7
 800edf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edf4:	4770      	bx	lr
 800edf6:	bf00      	nop
 800edf8:	200004ac 	.word	0x200004ac

0800edfc <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800edfc:	b590      	push	{r4, r7, lr}
 800edfe:	b085      	sub	sp, #20
 800ee00:	af00      	add	r7, sp, #0
 800ee02:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800ee04:	4b45      	ldr	r3, [pc, #276]	; (800ef1c <plug_holes+0x120>)
 800ee06:	681b      	ldr	r3, [r3, #0]
 800ee08:	687a      	ldr	r2, [r7, #4]
 800ee0a:	429a      	cmp	r2, r3
 800ee0c:	d206      	bcs.n	800ee1c <plug_holes+0x20>
 800ee0e:	4b44      	ldr	r3, [pc, #272]	; (800ef20 <plug_holes+0x124>)
 800ee10:	f240 12df 	movw	r2, #479	; 0x1df
 800ee14:	4943      	ldr	r1, [pc, #268]	; (800ef24 <plug_holes+0x128>)
 800ee16:	4844      	ldr	r0, [pc, #272]	; (800ef28 <plug_holes+0x12c>)
 800ee18:	f00c faa2 	bl	801b360 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800ee1c:	4b43      	ldr	r3, [pc, #268]	; (800ef2c <plug_holes+0x130>)
 800ee1e:	681b      	ldr	r3, [r3, #0]
 800ee20:	687a      	ldr	r2, [r7, #4]
 800ee22:	429a      	cmp	r2, r3
 800ee24:	d306      	bcc.n	800ee34 <plug_holes+0x38>
 800ee26:	4b3e      	ldr	r3, [pc, #248]	; (800ef20 <plug_holes+0x124>)
 800ee28:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800ee2c:	4940      	ldr	r1, [pc, #256]	; (800ef30 <plug_holes+0x134>)
 800ee2e:	483e      	ldr	r0, [pc, #248]	; (800ef28 <plug_holes+0x12c>)
 800ee30:	f00c fa96 	bl	801b360 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	791b      	ldrb	r3, [r3, #4]
 800ee38:	2b00      	cmp	r3, #0
 800ee3a:	d006      	beq.n	800ee4a <plug_holes+0x4e>
 800ee3c:	4b38      	ldr	r3, [pc, #224]	; (800ef20 <plug_holes+0x124>)
 800ee3e:	f240 12e1 	movw	r2, #481	; 0x1e1
 800ee42:	493c      	ldr	r1, [pc, #240]	; (800ef34 <plug_holes+0x138>)
 800ee44:	4838      	ldr	r0, [pc, #224]	; (800ef28 <plug_holes+0x12c>)
 800ee46:	f00c fa8b 	bl	801b360 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800ee4a:	687b      	ldr	r3, [r7, #4]
 800ee4c:	881b      	ldrh	r3, [r3, #0]
 800ee4e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ee52:	d906      	bls.n	800ee62 <plug_holes+0x66>
 800ee54:	4b32      	ldr	r3, [pc, #200]	; (800ef20 <plug_holes+0x124>)
 800ee56:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800ee5a:	4937      	ldr	r1, [pc, #220]	; (800ef38 <plug_holes+0x13c>)
 800ee5c:	4832      	ldr	r0, [pc, #200]	; (800ef28 <plug_holes+0x12c>)
 800ee5e:	f00c fa7f 	bl	801b360 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	881b      	ldrh	r3, [r3, #0]
 800ee66:	4618      	mov	r0, r3
 800ee68:	f7ff ffa4 	bl	800edb4 <ptr_to_mem>
 800ee6c:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800ee6e:	687a      	ldr	r2, [r7, #4]
 800ee70:	68fb      	ldr	r3, [r7, #12]
 800ee72:	429a      	cmp	r2, r3
 800ee74:	d024      	beq.n	800eec0 <plug_holes+0xc4>
 800ee76:	68fb      	ldr	r3, [r7, #12]
 800ee78:	791b      	ldrb	r3, [r3, #4]
 800ee7a:	2b00      	cmp	r3, #0
 800ee7c:	d120      	bne.n	800eec0 <plug_holes+0xc4>
 800ee7e:	4b2b      	ldr	r3, [pc, #172]	; (800ef2c <plug_holes+0x130>)
 800ee80:	681b      	ldr	r3, [r3, #0]
 800ee82:	68fa      	ldr	r2, [r7, #12]
 800ee84:	429a      	cmp	r2, r3
 800ee86:	d01b      	beq.n	800eec0 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800ee88:	4b2c      	ldr	r3, [pc, #176]	; (800ef3c <plug_holes+0x140>)
 800ee8a:	681b      	ldr	r3, [r3, #0]
 800ee8c:	68fa      	ldr	r2, [r7, #12]
 800ee8e:	429a      	cmp	r2, r3
 800ee90:	d102      	bne.n	800ee98 <plug_holes+0x9c>
      lfree = mem;
 800ee92:	4a2a      	ldr	r2, [pc, #168]	; (800ef3c <plug_holes+0x140>)
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800ee98:	68fb      	ldr	r3, [r7, #12]
 800ee9a:	881a      	ldrh	r2, [r3, #0]
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800eea0:	68fb      	ldr	r3, [r7, #12]
 800eea2:	881b      	ldrh	r3, [r3, #0]
 800eea4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800eea8:	d00a      	beq.n	800eec0 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800eeaa:	68fb      	ldr	r3, [r7, #12]
 800eeac:	881b      	ldrh	r3, [r3, #0]
 800eeae:	4618      	mov	r0, r3
 800eeb0:	f7ff ff80 	bl	800edb4 <ptr_to_mem>
 800eeb4:	4604      	mov	r4, r0
 800eeb6:	6878      	ldr	r0, [r7, #4]
 800eeb8:	f7ff ff8e 	bl	800edd8 <mem_to_ptr>
 800eebc:	4603      	mov	r3, r0
 800eebe:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	885b      	ldrh	r3, [r3, #2]
 800eec4:	4618      	mov	r0, r3
 800eec6:	f7ff ff75 	bl	800edb4 <ptr_to_mem>
 800eeca:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800eecc:	68ba      	ldr	r2, [r7, #8]
 800eece:	687b      	ldr	r3, [r7, #4]
 800eed0:	429a      	cmp	r2, r3
 800eed2:	d01f      	beq.n	800ef14 <plug_holes+0x118>
 800eed4:	68bb      	ldr	r3, [r7, #8]
 800eed6:	791b      	ldrb	r3, [r3, #4]
 800eed8:	2b00      	cmp	r3, #0
 800eeda:	d11b      	bne.n	800ef14 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800eedc:	4b17      	ldr	r3, [pc, #92]	; (800ef3c <plug_holes+0x140>)
 800eede:	681b      	ldr	r3, [r3, #0]
 800eee0:	687a      	ldr	r2, [r7, #4]
 800eee2:	429a      	cmp	r2, r3
 800eee4:	d102      	bne.n	800eeec <plug_holes+0xf0>
      lfree = pmem;
 800eee6:	4a15      	ldr	r2, [pc, #84]	; (800ef3c <plug_holes+0x140>)
 800eee8:	68bb      	ldr	r3, [r7, #8]
 800eeea:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	881a      	ldrh	r2, [r3, #0]
 800eef0:	68bb      	ldr	r3, [r7, #8]
 800eef2:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800eef4:	687b      	ldr	r3, [r7, #4]
 800eef6:	881b      	ldrh	r3, [r3, #0]
 800eef8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800eefc:	d00a      	beq.n	800ef14 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	881b      	ldrh	r3, [r3, #0]
 800ef02:	4618      	mov	r0, r3
 800ef04:	f7ff ff56 	bl	800edb4 <ptr_to_mem>
 800ef08:	4604      	mov	r4, r0
 800ef0a:	68b8      	ldr	r0, [r7, #8]
 800ef0c:	f7ff ff64 	bl	800edd8 <mem_to_ptr>
 800ef10:	4603      	mov	r3, r0
 800ef12:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800ef14:	bf00      	nop
 800ef16:	3714      	adds	r7, #20
 800ef18:	46bd      	mov	sp, r7
 800ef1a:	bd90      	pop	{r4, r7, pc}
 800ef1c:	200004ac 	.word	0x200004ac
 800ef20:	08020bbc 	.word	0x08020bbc
 800ef24:	08020bec 	.word	0x08020bec
 800ef28:	08020c04 	.word	0x08020c04
 800ef2c:	200004b0 	.word	0x200004b0
 800ef30:	08020c2c 	.word	0x08020c2c
 800ef34:	08020c48 	.word	0x08020c48
 800ef38:	08020c64 	.word	0x08020c64
 800ef3c:	200004b4 	.word	0x200004b4

0800ef40 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800ef40:	b580      	push	{r7, lr}
 800ef42:	b082      	sub	sp, #8
 800ef44:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800ef46:	4b18      	ldr	r3, [pc, #96]	; (800efa8 <mem_init+0x68>)
 800ef48:	3303      	adds	r3, #3
 800ef4a:	f023 0303 	bic.w	r3, r3, #3
 800ef4e:	461a      	mov	r2, r3
 800ef50:	4b16      	ldr	r3, [pc, #88]	; (800efac <mem_init+0x6c>)
 800ef52:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800ef54:	4b15      	ldr	r3, [pc, #84]	; (800efac <mem_init+0x6c>)
 800ef56:	681b      	ldr	r3, [r3, #0]
 800ef58:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800ef60:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	2200      	movs	r2, #0
 800ef66:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	2200      	movs	r2, #0
 800ef6c:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800ef6e:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800ef72:	f7ff ff1f 	bl	800edb4 <ptr_to_mem>
 800ef76:	4603      	mov	r3, r0
 800ef78:	4a0d      	ldr	r2, [pc, #52]	; (800efb0 <mem_init+0x70>)
 800ef7a:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800ef7c:	4b0c      	ldr	r3, [pc, #48]	; (800efb0 <mem_init+0x70>)
 800ef7e:	681b      	ldr	r3, [r3, #0]
 800ef80:	2201      	movs	r2, #1
 800ef82:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800ef84:	4b0a      	ldr	r3, [pc, #40]	; (800efb0 <mem_init+0x70>)
 800ef86:	681b      	ldr	r3, [r3, #0]
 800ef88:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800ef8c:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800ef8e:	4b08      	ldr	r3, [pc, #32]	; (800efb0 <mem_init+0x70>)
 800ef90:	681b      	ldr	r3, [r3, #0]
 800ef92:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800ef96:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800ef98:	4b04      	ldr	r3, [pc, #16]	; (800efac <mem_init+0x6c>)
 800ef9a:	681b      	ldr	r3, [r3, #0]
 800ef9c:	4a05      	ldr	r2, [pc, #20]	; (800efb4 <mem_init+0x74>)
 800ef9e:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 800efa0:	bf00      	nop
 800efa2:	3708      	adds	r7, #8
 800efa4:	46bd      	mov	sp, r7
 800efa6:	bd80      	pop	{r7, pc}
 800efa8:	20004524 	.word	0x20004524
 800efac:	200004ac 	.word	0x200004ac
 800efb0:	200004b0 	.word	0x200004b0
 800efb4:	200004b4 	.word	0x200004b4

0800efb8 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800efb8:	b580      	push	{r7, lr}
 800efba:	b086      	sub	sp, #24
 800efbc:	af00      	add	r7, sp, #0
 800efbe:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800efc0:	6878      	ldr	r0, [r7, #4]
 800efc2:	f7ff ff09 	bl	800edd8 <mem_to_ptr>
 800efc6:	4603      	mov	r3, r0
 800efc8:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	881b      	ldrh	r3, [r3, #0]
 800efce:	4618      	mov	r0, r3
 800efd0:	f7ff fef0 	bl	800edb4 <ptr_to_mem>
 800efd4:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	885b      	ldrh	r3, [r3, #2]
 800efda:	4618      	mov	r0, r3
 800efdc:	f7ff feea 	bl	800edb4 <ptr_to_mem>
 800efe0:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800efe2:	687b      	ldr	r3, [r7, #4]
 800efe4:	881b      	ldrh	r3, [r3, #0]
 800efe6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800efea:	d818      	bhi.n	800f01e <mem_link_valid+0x66>
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	885b      	ldrh	r3, [r3, #2]
 800eff0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800eff4:	d813      	bhi.n	800f01e <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800eff6:	687b      	ldr	r3, [r7, #4]
 800eff8:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800effa:	8afa      	ldrh	r2, [r7, #22]
 800effc:	429a      	cmp	r2, r3
 800effe:	d004      	beq.n	800f00a <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800f000:	68fb      	ldr	r3, [r7, #12]
 800f002:	881b      	ldrh	r3, [r3, #0]
 800f004:	8afa      	ldrh	r2, [r7, #22]
 800f006:	429a      	cmp	r2, r3
 800f008:	d109      	bne.n	800f01e <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800f00a:	4b08      	ldr	r3, [pc, #32]	; (800f02c <mem_link_valid+0x74>)
 800f00c:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800f00e:	693a      	ldr	r2, [r7, #16]
 800f010:	429a      	cmp	r2, r3
 800f012:	d006      	beq.n	800f022 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800f014:	693b      	ldr	r3, [r7, #16]
 800f016:	885b      	ldrh	r3, [r3, #2]
 800f018:	8afa      	ldrh	r2, [r7, #22]
 800f01a:	429a      	cmp	r2, r3
 800f01c:	d001      	beq.n	800f022 <mem_link_valid+0x6a>
    return 0;
 800f01e:	2300      	movs	r3, #0
 800f020:	e000      	b.n	800f024 <mem_link_valid+0x6c>
  }
  return 1;
 800f022:	2301      	movs	r3, #1
}
 800f024:	4618      	mov	r0, r3
 800f026:	3718      	adds	r7, #24
 800f028:	46bd      	mov	sp, r7
 800f02a:	bd80      	pop	{r7, pc}
 800f02c:	200004b0 	.word	0x200004b0

0800f030 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800f030:	b580      	push	{r7, lr}
 800f032:	b084      	sub	sp, #16
 800f034:	af00      	add	r7, sp, #0
 800f036:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	2b00      	cmp	r3, #0
 800f03c:	d04c      	beq.n	800f0d8 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	f003 0303 	and.w	r3, r3, #3
 800f044:	2b00      	cmp	r3, #0
 800f046:	d007      	beq.n	800f058 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800f048:	4b25      	ldr	r3, [pc, #148]	; (800f0e0 <mem_free+0xb0>)
 800f04a:	f240 2273 	movw	r2, #627	; 0x273
 800f04e:	4925      	ldr	r1, [pc, #148]	; (800f0e4 <mem_free+0xb4>)
 800f050:	4825      	ldr	r0, [pc, #148]	; (800f0e8 <mem_free+0xb8>)
 800f052:	f00c f985 	bl	801b360 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800f056:	e040      	b.n	800f0da <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	3b08      	subs	r3, #8
 800f05c:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800f05e:	4b23      	ldr	r3, [pc, #140]	; (800f0ec <mem_free+0xbc>)
 800f060:	681b      	ldr	r3, [r3, #0]
 800f062:	68fa      	ldr	r2, [r7, #12]
 800f064:	429a      	cmp	r2, r3
 800f066:	d306      	bcc.n	800f076 <mem_free+0x46>
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	f103 020c 	add.w	r2, r3, #12
 800f06e:	4b20      	ldr	r3, [pc, #128]	; (800f0f0 <mem_free+0xc0>)
 800f070:	681b      	ldr	r3, [r3, #0]
 800f072:	429a      	cmp	r2, r3
 800f074:	d907      	bls.n	800f086 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800f076:	4b1a      	ldr	r3, [pc, #104]	; (800f0e0 <mem_free+0xb0>)
 800f078:	f240 227f 	movw	r2, #639	; 0x27f
 800f07c:	491d      	ldr	r1, [pc, #116]	; (800f0f4 <mem_free+0xc4>)
 800f07e:	481a      	ldr	r0, [pc, #104]	; (800f0e8 <mem_free+0xb8>)
 800f080:	f00c f96e 	bl	801b360 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800f084:	e029      	b.n	800f0da <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 800f086:	68fb      	ldr	r3, [r7, #12]
 800f088:	791b      	ldrb	r3, [r3, #4]
 800f08a:	2b00      	cmp	r3, #0
 800f08c:	d107      	bne.n	800f09e <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800f08e:	4b14      	ldr	r3, [pc, #80]	; (800f0e0 <mem_free+0xb0>)
 800f090:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800f094:	4918      	ldr	r1, [pc, #96]	; (800f0f8 <mem_free+0xc8>)
 800f096:	4814      	ldr	r0, [pc, #80]	; (800f0e8 <mem_free+0xb8>)
 800f098:	f00c f962 	bl	801b360 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800f09c:	e01d      	b.n	800f0da <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 800f09e:	68f8      	ldr	r0, [r7, #12]
 800f0a0:	f7ff ff8a 	bl	800efb8 <mem_link_valid>
 800f0a4:	4603      	mov	r3, r0
 800f0a6:	2b00      	cmp	r3, #0
 800f0a8:	d107      	bne.n	800f0ba <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800f0aa:	4b0d      	ldr	r3, [pc, #52]	; (800f0e0 <mem_free+0xb0>)
 800f0ac:	f240 2295 	movw	r2, #661	; 0x295
 800f0b0:	4912      	ldr	r1, [pc, #72]	; (800f0fc <mem_free+0xcc>)
 800f0b2:	480d      	ldr	r0, [pc, #52]	; (800f0e8 <mem_free+0xb8>)
 800f0b4:	f00c f954 	bl	801b360 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800f0b8:	e00f      	b.n	800f0da <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 800f0ba:	68fb      	ldr	r3, [r7, #12]
 800f0bc:	2200      	movs	r2, #0
 800f0be:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800f0c0:	4b0f      	ldr	r3, [pc, #60]	; (800f100 <mem_free+0xd0>)
 800f0c2:	681b      	ldr	r3, [r3, #0]
 800f0c4:	68fa      	ldr	r2, [r7, #12]
 800f0c6:	429a      	cmp	r2, r3
 800f0c8:	d202      	bcs.n	800f0d0 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800f0ca:	4a0d      	ldr	r2, [pc, #52]	; (800f100 <mem_free+0xd0>)
 800f0cc:	68fb      	ldr	r3, [r7, #12]
 800f0ce:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800f0d0:	68f8      	ldr	r0, [r7, #12]
 800f0d2:	f7ff fe93 	bl	800edfc <plug_holes>
 800f0d6:	e000      	b.n	800f0da <mem_free+0xaa>
    return;
 800f0d8:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 800f0da:	3710      	adds	r7, #16
 800f0dc:	46bd      	mov	sp, r7
 800f0de:	bd80      	pop	{r7, pc}
 800f0e0:	08020bbc 	.word	0x08020bbc
 800f0e4:	08020c90 	.word	0x08020c90
 800f0e8:	08020c04 	.word	0x08020c04
 800f0ec:	200004ac 	.word	0x200004ac
 800f0f0:	200004b0 	.word	0x200004b0
 800f0f4:	08020cb4 	.word	0x08020cb4
 800f0f8:	08020cd0 	.word	0x08020cd0
 800f0fc:	08020cf8 	.word	0x08020cf8
 800f100:	200004b4 	.word	0x200004b4

0800f104 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800f104:	b580      	push	{r7, lr}
 800f106:	b088      	sub	sp, #32
 800f108:	af00      	add	r7, sp, #0
 800f10a:	6078      	str	r0, [r7, #4]
 800f10c:	460b      	mov	r3, r1
 800f10e:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800f110:	887b      	ldrh	r3, [r7, #2]
 800f112:	3303      	adds	r3, #3
 800f114:	b29b      	uxth	r3, r3
 800f116:	f023 0303 	bic.w	r3, r3, #3
 800f11a:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800f11c:	8bfb      	ldrh	r3, [r7, #30]
 800f11e:	2b0b      	cmp	r3, #11
 800f120:	d801      	bhi.n	800f126 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800f122:	230c      	movs	r3, #12
 800f124:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800f126:	8bfb      	ldrh	r3, [r7, #30]
 800f128:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800f12c:	d803      	bhi.n	800f136 <mem_trim+0x32>
 800f12e:	8bfa      	ldrh	r2, [r7, #30]
 800f130:	887b      	ldrh	r3, [r7, #2]
 800f132:	429a      	cmp	r2, r3
 800f134:	d201      	bcs.n	800f13a <mem_trim+0x36>
    return NULL;
 800f136:	2300      	movs	r3, #0
 800f138:	e0cc      	b.n	800f2d4 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800f13a:	4b68      	ldr	r3, [pc, #416]	; (800f2dc <mem_trim+0x1d8>)
 800f13c:	681b      	ldr	r3, [r3, #0]
 800f13e:	687a      	ldr	r2, [r7, #4]
 800f140:	429a      	cmp	r2, r3
 800f142:	d304      	bcc.n	800f14e <mem_trim+0x4a>
 800f144:	4b66      	ldr	r3, [pc, #408]	; (800f2e0 <mem_trim+0x1dc>)
 800f146:	681b      	ldr	r3, [r3, #0]
 800f148:	687a      	ldr	r2, [r7, #4]
 800f14a:	429a      	cmp	r2, r3
 800f14c:	d306      	bcc.n	800f15c <mem_trim+0x58>
 800f14e:	4b65      	ldr	r3, [pc, #404]	; (800f2e4 <mem_trim+0x1e0>)
 800f150:	f240 22d1 	movw	r2, #721	; 0x2d1
 800f154:	4964      	ldr	r1, [pc, #400]	; (800f2e8 <mem_trim+0x1e4>)
 800f156:	4865      	ldr	r0, [pc, #404]	; (800f2ec <mem_trim+0x1e8>)
 800f158:	f00c f902 	bl	801b360 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800f15c:	4b5f      	ldr	r3, [pc, #380]	; (800f2dc <mem_trim+0x1d8>)
 800f15e:	681b      	ldr	r3, [r3, #0]
 800f160:	687a      	ldr	r2, [r7, #4]
 800f162:	429a      	cmp	r2, r3
 800f164:	d304      	bcc.n	800f170 <mem_trim+0x6c>
 800f166:	4b5e      	ldr	r3, [pc, #376]	; (800f2e0 <mem_trim+0x1dc>)
 800f168:	681b      	ldr	r3, [r3, #0]
 800f16a:	687a      	ldr	r2, [r7, #4]
 800f16c:	429a      	cmp	r2, r3
 800f16e:	d301      	bcc.n	800f174 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 800f170:	687b      	ldr	r3, [r7, #4]
 800f172:	e0af      	b.n	800f2d4 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800f174:	687b      	ldr	r3, [r7, #4]
 800f176:	3b08      	subs	r3, #8
 800f178:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800f17a:	69b8      	ldr	r0, [r7, #24]
 800f17c:	f7ff fe2c 	bl	800edd8 <mem_to_ptr>
 800f180:	4603      	mov	r3, r0
 800f182:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800f184:	69bb      	ldr	r3, [r7, #24]
 800f186:	881a      	ldrh	r2, [r3, #0]
 800f188:	8afb      	ldrh	r3, [r7, #22]
 800f18a:	1ad3      	subs	r3, r2, r3
 800f18c:	b29b      	uxth	r3, r3
 800f18e:	3b08      	subs	r3, #8
 800f190:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800f192:	8bfa      	ldrh	r2, [r7, #30]
 800f194:	8abb      	ldrh	r3, [r7, #20]
 800f196:	429a      	cmp	r2, r3
 800f198:	d906      	bls.n	800f1a8 <mem_trim+0xa4>
 800f19a:	4b52      	ldr	r3, [pc, #328]	; (800f2e4 <mem_trim+0x1e0>)
 800f19c:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800f1a0:	4953      	ldr	r1, [pc, #332]	; (800f2f0 <mem_trim+0x1ec>)
 800f1a2:	4852      	ldr	r0, [pc, #328]	; (800f2ec <mem_trim+0x1e8>)
 800f1a4:	f00c f8dc 	bl	801b360 <iprintf>
  if (newsize > size) {
 800f1a8:	8bfa      	ldrh	r2, [r7, #30]
 800f1aa:	8abb      	ldrh	r3, [r7, #20]
 800f1ac:	429a      	cmp	r2, r3
 800f1ae:	d901      	bls.n	800f1b4 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 800f1b0:	2300      	movs	r3, #0
 800f1b2:	e08f      	b.n	800f2d4 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 800f1b4:	8bfa      	ldrh	r2, [r7, #30]
 800f1b6:	8abb      	ldrh	r3, [r7, #20]
 800f1b8:	429a      	cmp	r2, r3
 800f1ba:	d101      	bne.n	800f1c0 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 800f1bc:	687b      	ldr	r3, [r7, #4]
 800f1be:	e089      	b.n	800f2d4 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 800f1c0:	69bb      	ldr	r3, [r7, #24]
 800f1c2:	881b      	ldrh	r3, [r3, #0]
 800f1c4:	4618      	mov	r0, r3
 800f1c6:	f7ff fdf5 	bl	800edb4 <ptr_to_mem>
 800f1ca:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800f1cc:	693b      	ldr	r3, [r7, #16]
 800f1ce:	791b      	ldrb	r3, [r3, #4]
 800f1d0:	2b00      	cmp	r3, #0
 800f1d2:	d13f      	bne.n	800f254 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800f1d4:	69bb      	ldr	r3, [r7, #24]
 800f1d6:	881b      	ldrh	r3, [r3, #0]
 800f1d8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800f1dc:	d106      	bne.n	800f1ec <mem_trim+0xe8>
 800f1de:	4b41      	ldr	r3, [pc, #260]	; (800f2e4 <mem_trim+0x1e0>)
 800f1e0:	f240 22f5 	movw	r2, #757	; 0x2f5
 800f1e4:	4943      	ldr	r1, [pc, #268]	; (800f2f4 <mem_trim+0x1f0>)
 800f1e6:	4841      	ldr	r0, [pc, #260]	; (800f2ec <mem_trim+0x1e8>)
 800f1e8:	f00c f8ba 	bl	801b360 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800f1ec:	693b      	ldr	r3, [r7, #16]
 800f1ee:	881b      	ldrh	r3, [r3, #0]
 800f1f0:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800f1f2:	8afa      	ldrh	r2, [r7, #22]
 800f1f4:	8bfb      	ldrh	r3, [r7, #30]
 800f1f6:	4413      	add	r3, r2
 800f1f8:	b29b      	uxth	r3, r3
 800f1fa:	3308      	adds	r3, #8
 800f1fc:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800f1fe:	4b3e      	ldr	r3, [pc, #248]	; (800f2f8 <mem_trim+0x1f4>)
 800f200:	681b      	ldr	r3, [r3, #0]
 800f202:	693a      	ldr	r2, [r7, #16]
 800f204:	429a      	cmp	r2, r3
 800f206:	d106      	bne.n	800f216 <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 800f208:	89fb      	ldrh	r3, [r7, #14]
 800f20a:	4618      	mov	r0, r3
 800f20c:	f7ff fdd2 	bl	800edb4 <ptr_to_mem>
 800f210:	4603      	mov	r3, r0
 800f212:	4a39      	ldr	r2, [pc, #228]	; (800f2f8 <mem_trim+0x1f4>)
 800f214:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800f216:	89fb      	ldrh	r3, [r7, #14]
 800f218:	4618      	mov	r0, r3
 800f21a:	f7ff fdcb 	bl	800edb4 <ptr_to_mem>
 800f21e:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800f220:	693b      	ldr	r3, [r7, #16]
 800f222:	2200      	movs	r2, #0
 800f224:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800f226:	693b      	ldr	r3, [r7, #16]
 800f228:	89ba      	ldrh	r2, [r7, #12]
 800f22a:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800f22c:	693b      	ldr	r3, [r7, #16]
 800f22e:	8afa      	ldrh	r2, [r7, #22]
 800f230:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800f232:	69bb      	ldr	r3, [r7, #24]
 800f234:	89fa      	ldrh	r2, [r7, #14]
 800f236:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800f238:	693b      	ldr	r3, [r7, #16]
 800f23a:	881b      	ldrh	r3, [r3, #0]
 800f23c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800f240:	d047      	beq.n	800f2d2 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800f242:	693b      	ldr	r3, [r7, #16]
 800f244:	881b      	ldrh	r3, [r3, #0]
 800f246:	4618      	mov	r0, r3
 800f248:	f7ff fdb4 	bl	800edb4 <ptr_to_mem>
 800f24c:	4602      	mov	r2, r0
 800f24e:	89fb      	ldrh	r3, [r7, #14]
 800f250:	8053      	strh	r3, [r2, #2]
 800f252:	e03e      	b.n	800f2d2 <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800f254:	8bfb      	ldrh	r3, [r7, #30]
 800f256:	f103 0214 	add.w	r2, r3, #20
 800f25a:	8abb      	ldrh	r3, [r7, #20]
 800f25c:	429a      	cmp	r2, r3
 800f25e:	d838      	bhi.n	800f2d2 <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800f260:	8afa      	ldrh	r2, [r7, #22]
 800f262:	8bfb      	ldrh	r3, [r7, #30]
 800f264:	4413      	add	r3, r2
 800f266:	b29b      	uxth	r3, r3
 800f268:	3308      	adds	r3, #8
 800f26a:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800f26c:	69bb      	ldr	r3, [r7, #24]
 800f26e:	881b      	ldrh	r3, [r3, #0]
 800f270:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800f274:	d106      	bne.n	800f284 <mem_trim+0x180>
 800f276:	4b1b      	ldr	r3, [pc, #108]	; (800f2e4 <mem_trim+0x1e0>)
 800f278:	f240 3216 	movw	r2, #790	; 0x316
 800f27c:	491d      	ldr	r1, [pc, #116]	; (800f2f4 <mem_trim+0x1f0>)
 800f27e:	481b      	ldr	r0, [pc, #108]	; (800f2ec <mem_trim+0x1e8>)
 800f280:	f00c f86e 	bl	801b360 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800f284:	89fb      	ldrh	r3, [r7, #14]
 800f286:	4618      	mov	r0, r3
 800f288:	f7ff fd94 	bl	800edb4 <ptr_to_mem>
 800f28c:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800f28e:	4b1a      	ldr	r3, [pc, #104]	; (800f2f8 <mem_trim+0x1f4>)
 800f290:	681b      	ldr	r3, [r3, #0]
 800f292:	693a      	ldr	r2, [r7, #16]
 800f294:	429a      	cmp	r2, r3
 800f296:	d202      	bcs.n	800f29e <mem_trim+0x19a>
      lfree = mem2;
 800f298:	4a17      	ldr	r2, [pc, #92]	; (800f2f8 <mem_trim+0x1f4>)
 800f29a:	693b      	ldr	r3, [r7, #16]
 800f29c:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800f29e:	693b      	ldr	r3, [r7, #16]
 800f2a0:	2200      	movs	r2, #0
 800f2a2:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800f2a4:	69bb      	ldr	r3, [r7, #24]
 800f2a6:	881a      	ldrh	r2, [r3, #0]
 800f2a8:	693b      	ldr	r3, [r7, #16]
 800f2aa:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800f2ac:	693b      	ldr	r3, [r7, #16]
 800f2ae:	8afa      	ldrh	r2, [r7, #22]
 800f2b0:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800f2b2:	69bb      	ldr	r3, [r7, #24]
 800f2b4:	89fa      	ldrh	r2, [r7, #14]
 800f2b6:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800f2b8:	693b      	ldr	r3, [r7, #16]
 800f2ba:	881b      	ldrh	r3, [r3, #0]
 800f2bc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800f2c0:	d007      	beq.n	800f2d2 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800f2c2:	693b      	ldr	r3, [r7, #16]
 800f2c4:	881b      	ldrh	r3, [r3, #0]
 800f2c6:	4618      	mov	r0, r3
 800f2c8:	f7ff fd74 	bl	800edb4 <ptr_to_mem>
 800f2cc:	4602      	mov	r2, r0
 800f2ce:	89fb      	ldrh	r3, [r7, #14]
 800f2d0:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 800f2d2:	687b      	ldr	r3, [r7, #4]
}
 800f2d4:	4618      	mov	r0, r3
 800f2d6:	3720      	adds	r7, #32
 800f2d8:	46bd      	mov	sp, r7
 800f2da:	bd80      	pop	{r7, pc}
 800f2dc:	200004ac 	.word	0x200004ac
 800f2e0:	200004b0 	.word	0x200004b0
 800f2e4:	08020bbc 	.word	0x08020bbc
 800f2e8:	08020d2c 	.word	0x08020d2c
 800f2ec:	08020c04 	.word	0x08020c04
 800f2f0:	08020d44 	.word	0x08020d44
 800f2f4:	08020d64 	.word	0x08020d64
 800f2f8:	200004b4 	.word	0x200004b4

0800f2fc <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800f2fc:	b580      	push	{r7, lr}
 800f2fe:	b088      	sub	sp, #32
 800f300:	af00      	add	r7, sp, #0
 800f302:	4603      	mov	r3, r0
 800f304:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800f306:	88fb      	ldrh	r3, [r7, #6]
 800f308:	2b00      	cmp	r3, #0
 800f30a:	d101      	bne.n	800f310 <mem_malloc+0x14>
    return NULL;
 800f30c:	2300      	movs	r3, #0
 800f30e:	e0d9      	b.n	800f4c4 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800f310:	88fb      	ldrh	r3, [r7, #6]
 800f312:	3303      	adds	r3, #3
 800f314:	b29b      	uxth	r3, r3
 800f316:	f023 0303 	bic.w	r3, r3, #3
 800f31a:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800f31c:	8bbb      	ldrh	r3, [r7, #28]
 800f31e:	2b0b      	cmp	r3, #11
 800f320:	d801      	bhi.n	800f326 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800f322:	230c      	movs	r3, #12
 800f324:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800f326:	8bbb      	ldrh	r3, [r7, #28]
 800f328:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800f32c:	d803      	bhi.n	800f336 <mem_malloc+0x3a>
 800f32e:	8bba      	ldrh	r2, [r7, #28]
 800f330:	88fb      	ldrh	r3, [r7, #6]
 800f332:	429a      	cmp	r2, r3
 800f334:	d201      	bcs.n	800f33a <mem_malloc+0x3e>
    return NULL;
 800f336:	2300      	movs	r3, #0
 800f338:	e0c4      	b.n	800f4c4 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800f33a:	4b64      	ldr	r3, [pc, #400]	; (800f4cc <mem_malloc+0x1d0>)
 800f33c:	681b      	ldr	r3, [r3, #0]
 800f33e:	4618      	mov	r0, r3
 800f340:	f7ff fd4a 	bl	800edd8 <mem_to_ptr>
 800f344:	4603      	mov	r3, r0
 800f346:	83fb      	strh	r3, [r7, #30]
 800f348:	e0b4      	b.n	800f4b4 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800f34a:	8bfb      	ldrh	r3, [r7, #30]
 800f34c:	4618      	mov	r0, r3
 800f34e:	f7ff fd31 	bl	800edb4 <ptr_to_mem>
 800f352:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800f354:	697b      	ldr	r3, [r7, #20]
 800f356:	791b      	ldrb	r3, [r3, #4]
 800f358:	2b00      	cmp	r3, #0
 800f35a:	f040 80a4 	bne.w	800f4a6 <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800f35e:	697b      	ldr	r3, [r7, #20]
 800f360:	881b      	ldrh	r3, [r3, #0]
 800f362:	461a      	mov	r2, r3
 800f364:	8bfb      	ldrh	r3, [r7, #30]
 800f366:	1ad3      	subs	r3, r2, r3
 800f368:	f1a3 0208 	sub.w	r2, r3, #8
 800f36c:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800f36e:	429a      	cmp	r2, r3
 800f370:	f0c0 8099 	bcc.w	800f4a6 <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800f374:	697b      	ldr	r3, [r7, #20]
 800f376:	881b      	ldrh	r3, [r3, #0]
 800f378:	461a      	mov	r2, r3
 800f37a:	8bfb      	ldrh	r3, [r7, #30]
 800f37c:	1ad3      	subs	r3, r2, r3
 800f37e:	f1a3 0208 	sub.w	r2, r3, #8
 800f382:	8bbb      	ldrh	r3, [r7, #28]
 800f384:	3314      	adds	r3, #20
 800f386:	429a      	cmp	r2, r3
 800f388:	d333      	bcc.n	800f3f2 <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800f38a:	8bfa      	ldrh	r2, [r7, #30]
 800f38c:	8bbb      	ldrh	r3, [r7, #28]
 800f38e:	4413      	add	r3, r2
 800f390:	b29b      	uxth	r3, r3
 800f392:	3308      	adds	r3, #8
 800f394:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800f396:	8a7b      	ldrh	r3, [r7, #18]
 800f398:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800f39c:	d106      	bne.n	800f3ac <mem_malloc+0xb0>
 800f39e:	4b4c      	ldr	r3, [pc, #304]	; (800f4d0 <mem_malloc+0x1d4>)
 800f3a0:	f240 3287 	movw	r2, #903	; 0x387
 800f3a4:	494b      	ldr	r1, [pc, #300]	; (800f4d4 <mem_malloc+0x1d8>)
 800f3a6:	484c      	ldr	r0, [pc, #304]	; (800f4d8 <mem_malloc+0x1dc>)
 800f3a8:	f00b ffda 	bl	801b360 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800f3ac:	8a7b      	ldrh	r3, [r7, #18]
 800f3ae:	4618      	mov	r0, r3
 800f3b0:	f7ff fd00 	bl	800edb4 <ptr_to_mem>
 800f3b4:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800f3b6:	68fb      	ldr	r3, [r7, #12]
 800f3b8:	2200      	movs	r2, #0
 800f3ba:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800f3bc:	697b      	ldr	r3, [r7, #20]
 800f3be:	881a      	ldrh	r2, [r3, #0]
 800f3c0:	68fb      	ldr	r3, [r7, #12]
 800f3c2:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800f3c4:	68fb      	ldr	r3, [r7, #12]
 800f3c6:	8bfa      	ldrh	r2, [r7, #30]
 800f3c8:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800f3ca:	697b      	ldr	r3, [r7, #20]
 800f3cc:	8a7a      	ldrh	r2, [r7, #18]
 800f3ce:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800f3d0:	697b      	ldr	r3, [r7, #20]
 800f3d2:	2201      	movs	r2, #1
 800f3d4:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800f3d6:	68fb      	ldr	r3, [r7, #12]
 800f3d8:	881b      	ldrh	r3, [r3, #0]
 800f3da:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800f3de:	d00b      	beq.n	800f3f8 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800f3e0:	68fb      	ldr	r3, [r7, #12]
 800f3e2:	881b      	ldrh	r3, [r3, #0]
 800f3e4:	4618      	mov	r0, r3
 800f3e6:	f7ff fce5 	bl	800edb4 <ptr_to_mem>
 800f3ea:	4602      	mov	r2, r0
 800f3ec:	8a7b      	ldrh	r3, [r7, #18]
 800f3ee:	8053      	strh	r3, [r2, #2]
 800f3f0:	e002      	b.n	800f3f8 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800f3f2:	697b      	ldr	r3, [r7, #20]
 800f3f4:	2201      	movs	r2, #1
 800f3f6:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800f3f8:	4b34      	ldr	r3, [pc, #208]	; (800f4cc <mem_malloc+0x1d0>)
 800f3fa:	681b      	ldr	r3, [r3, #0]
 800f3fc:	697a      	ldr	r2, [r7, #20]
 800f3fe:	429a      	cmp	r2, r3
 800f400:	d127      	bne.n	800f452 <mem_malloc+0x156>
          struct mem *cur = lfree;
 800f402:	4b32      	ldr	r3, [pc, #200]	; (800f4cc <mem_malloc+0x1d0>)
 800f404:	681b      	ldr	r3, [r3, #0]
 800f406:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800f408:	e005      	b.n	800f416 <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800f40a:	69bb      	ldr	r3, [r7, #24]
 800f40c:	881b      	ldrh	r3, [r3, #0]
 800f40e:	4618      	mov	r0, r3
 800f410:	f7ff fcd0 	bl	800edb4 <ptr_to_mem>
 800f414:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800f416:	69bb      	ldr	r3, [r7, #24]
 800f418:	791b      	ldrb	r3, [r3, #4]
 800f41a:	2b00      	cmp	r3, #0
 800f41c:	d004      	beq.n	800f428 <mem_malloc+0x12c>
 800f41e:	4b2f      	ldr	r3, [pc, #188]	; (800f4dc <mem_malloc+0x1e0>)
 800f420:	681b      	ldr	r3, [r3, #0]
 800f422:	69ba      	ldr	r2, [r7, #24]
 800f424:	429a      	cmp	r2, r3
 800f426:	d1f0      	bne.n	800f40a <mem_malloc+0x10e>
          }
          lfree = cur;
 800f428:	4a28      	ldr	r2, [pc, #160]	; (800f4cc <mem_malloc+0x1d0>)
 800f42a:	69bb      	ldr	r3, [r7, #24]
 800f42c:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800f42e:	4b27      	ldr	r3, [pc, #156]	; (800f4cc <mem_malloc+0x1d0>)
 800f430:	681a      	ldr	r2, [r3, #0]
 800f432:	4b2a      	ldr	r3, [pc, #168]	; (800f4dc <mem_malloc+0x1e0>)
 800f434:	681b      	ldr	r3, [r3, #0]
 800f436:	429a      	cmp	r2, r3
 800f438:	d00b      	beq.n	800f452 <mem_malloc+0x156>
 800f43a:	4b24      	ldr	r3, [pc, #144]	; (800f4cc <mem_malloc+0x1d0>)
 800f43c:	681b      	ldr	r3, [r3, #0]
 800f43e:	791b      	ldrb	r3, [r3, #4]
 800f440:	2b00      	cmp	r3, #0
 800f442:	d006      	beq.n	800f452 <mem_malloc+0x156>
 800f444:	4b22      	ldr	r3, [pc, #136]	; (800f4d0 <mem_malloc+0x1d4>)
 800f446:	f240 32b5 	movw	r2, #949	; 0x3b5
 800f44a:	4925      	ldr	r1, [pc, #148]	; (800f4e0 <mem_malloc+0x1e4>)
 800f44c:	4822      	ldr	r0, [pc, #136]	; (800f4d8 <mem_malloc+0x1dc>)
 800f44e:	f00b ff87 	bl	801b360 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800f452:	8bba      	ldrh	r2, [r7, #28]
 800f454:	697b      	ldr	r3, [r7, #20]
 800f456:	4413      	add	r3, r2
 800f458:	3308      	adds	r3, #8
 800f45a:	4a20      	ldr	r2, [pc, #128]	; (800f4dc <mem_malloc+0x1e0>)
 800f45c:	6812      	ldr	r2, [r2, #0]
 800f45e:	4293      	cmp	r3, r2
 800f460:	d906      	bls.n	800f470 <mem_malloc+0x174>
 800f462:	4b1b      	ldr	r3, [pc, #108]	; (800f4d0 <mem_malloc+0x1d4>)
 800f464:	f240 32b9 	movw	r2, #953	; 0x3b9
 800f468:	491e      	ldr	r1, [pc, #120]	; (800f4e4 <mem_malloc+0x1e8>)
 800f46a:	481b      	ldr	r0, [pc, #108]	; (800f4d8 <mem_malloc+0x1dc>)
 800f46c:	f00b ff78 	bl	801b360 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800f470:	697b      	ldr	r3, [r7, #20]
 800f472:	f003 0303 	and.w	r3, r3, #3
 800f476:	2b00      	cmp	r3, #0
 800f478:	d006      	beq.n	800f488 <mem_malloc+0x18c>
 800f47a:	4b15      	ldr	r3, [pc, #84]	; (800f4d0 <mem_malloc+0x1d4>)
 800f47c:	f240 32bb 	movw	r2, #955	; 0x3bb
 800f480:	4919      	ldr	r1, [pc, #100]	; (800f4e8 <mem_malloc+0x1ec>)
 800f482:	4815      	ldr	r0, [pc, #84]	; (800f4d8 <mem_malloc+0x1dc>)
 800f484:	f00b ff6c 	bl	801b360 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800f488:	697b      	ldr	r3, [r7, #20]
 800f48a:	f003 0303 	and.w	r3, r3, #3
 800f48e:	2b00      	cmp	r3, #0
 800f490:	d006      	beq.n	800f4a0 <mem_malloc+0x1a4>
 800f492:	4b0f      	ldr	r3, [pc, #60]	; (800f4d0 <mem_malloc+0x1d4>)
 800f494:	f240 32bd 	movw	r2, #957	; 0x3bd
 800f498:	4914      	ldr	r1, [pc, #80]	; (800f4ec <mem_malloc+0x1f0>)
 800f49a:	480f      	ldr	r0, [pc, #60]	; (800f4d8 <mem_malloc+0x1dc>)
 800f49c:	f00b ff60 	bl	801b360 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800f4a0:	697b      	ldr	r3, [r7, #20]
 800f4a2:	3308      	adds	r3, #8
 800f4a4:	e00e      	b.n	800f4c4 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 800f4a6:	8bfb      	ldrh	r3, [r7, #30]
 800f4a8:	4618      	mov	r0, r3
 800f4aa:	f7ff fc83 	bl	800edb4 <ptr_to_mem>
 800f4ae:	4603      	mov	r3, r0
 800f4b0:	881b      	ldrh	r3, [r3, #0]
 800f4b2:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800f4b4:	8bfa      	ldrh	r2, [r7, #30]
 800f4b6:	8bbb      	ldrh	r3, [r7, #28]
 800f4b8:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800f4bc:	429a      	cmp	r2, r3
 800f4be:	f4ff af44 	bcc.w	800f34a <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800f4c2:	2300      	movs	r3, #0
}
 800f4c4:	4618      	mov	r0, r3
 800f4c6:	3720      	adds	r7, #32
 800f4c8:	46bd      	mov	sp, r7
 800f4ca:	bd80      	pop	{r7, pc}
 800f4cc:	200004b4 	.word	0x200004b4
 800f4d0:	08020bbc 	.word	0x08020bbc
 800f4d4:	08020d64 	.word	0x08020d64
 800f4d8:	08020c04 	.word	0x08020c04
 800f4dc:	200004b0 	.word	0x200004b0
 800f4e0:	08020d78 	.word	0x08020d78
 800f4e4:	08020d94 	.word	0x08020d94
 800f4e8:	08020dc4 	.word	0x08020dc4
 800f4ec:	08020df4 	.word	0x08020df4

0800f4f0 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800f4f0:	b480      	push	{r7}
 800f4f2:	b085      	sub	sp, #20
 800f4f4:	af00      	add	r7, sp, #0
 800f4f6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	689b      	ldr	r3, [r3, #8]
 800f4fc:	2200      	movs	r2, #0
 800f4fe:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	685b      	ldr	r3, [r3, #4]
 800f504:	3303      	adds	r3, #3
 800f506:	f023 0303 	bic.w	r3, r3, #3
 800f50a:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800f50c:	2300      	movs	r3, #0
 800f50e:	60fb      	str	r3, [r7, #12]
 800f510:	e011      	b.n	800f536 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800f512:	687b      	ldr	r3, [r7, #4]
 800f514:	689b      	ldr	r3, [r3, #8]
 800f516:	681a      	ldr	r2, [r3, #0]
 800f518:	68bb      	ldr	r3, [r7, #8]
 800f51a:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	689b      	ldr	r3, [r3, #8]
 800f520:	68ba      	ldr	r2, [r7, #8]
 800f522:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800f524:	687b      	ldr	r3, [r7, #4]
 800f526:	881b      	ldrh	r3, [r3, #0]
 800f528:	461a      	mov	r2, r3
 800f52a:	68bb      	ldr	r3, [r7, #8]
 800f52c:	4413      	add	r3, r2
 800f52e:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800f530:	68fb      	ldr	r3, [r7, #12]
 800f532:	3301      	adds	r3, #1
 800f534:	60fb      	str	r3, [r7, #12]
 800f536:	687b      	ldr	r3, [r7, #4]
 800f538:	885b      	ldrh	r3, [r3, #2]
 800f53a:	461a      	mov	r2, r3
 800f53c:	68fb      	ldr	r3, [r7, #12]
 800f53e:	4293      	cmp	r3, r2
 800f540:	dbe7      	blt.n	800f512 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800f542:	bf00      	nop
 800f544:	bf00      	nop
 800f546:	3714      	adds	r7, #20
 800f548:	46bd      	mov	sp, r7
 800f54a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f54e:	4770      	bx	lr

0800f550 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800f550:	b580      	push	{r7, lr}
 800f552:	b082      	sub	sp, #8
 800f554:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800f556:	2300      	movs	r3, #0
 800f558:	80fb      	strh	r3, [r7, #6]
 800f55a:	e009      	b.n	800f570 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800f55c:	88fb      	ldrh	r3, [r7, #6]
 800f55e:	4a08      	ldr	r2, [pc, #32]	; (800f580 <memp_init+0x30>)
 800f560:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f564:	4618      	mov	r0, r3
 800f566:	f7ff ffc3 	bl	800f4f0 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800f56a:	88fb      	ldrh	r3, [r7, #6]
 800f56c:	3301      	adds	r3, #1
 800f56e:	80fb      	strh	r3, [r7, #6]
 800f570:	88fb      	ldrh	r3, [r7, #6]
 800f572:	2b08      	cmp	r3, #8
 800f574:	d9f2      	bls.n	800f55c <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800f576:	bf00      	nop
 800f578:	bf00      	nop
 800f57a:	3708      	adds	r7, #8
 800f57c:	46bd      	mov	sp, r7
 800f57e:	bd80      	pop	{r7, pc}
 800f580:	08023ecc 	.word	0x08023ecc

0800f584 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800f584:	b580      	push	{r7, lr}
 800f586:	b084      	sub	sp, #16
 800f588:	af00      	add	r7, sp, #0
 800f58a:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 800f58c:	687b      	ldr	r3, [r7, #4]
 800f58e:	689b      	ldr	r3, [r3, #8]
 800f590:	681b      	ldr	r3, [r3, #0]
 800f592:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800f594:	68fb      	ldr	r3, [r7, #12]
 800f596:	2b00      	cmp	r3, #0
 800f598:	d012      	beq.n	800f5c0 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800f59a:	687b      	ldr	r3, [r7, #4]
 800f59c:	689b      	ldr	r3, [r3, #8]
 800f59e:	68fa      	ldr	r2, [r7, #12]
 800f5a0:	6812      	ldr	r2, [r2, #0]
 800f5a2:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800f5a4:	68fb      	ldr	r3, [r7, #12]
 800f5a6:	f003 0303 	and.w	r3, r3, #3
 800f5aa:	2b00      	cmp	r3, #0
 800f5ac:	d006      	beq.n	800f5bc <do_memp_malloc_pool+0x38>
 800f5ae:	4b07      	ldr	r3, [pc, #28]	; (800f5cc <do_memp_malloc_pool+0x48>)
 800f5b0:	f44f 728c 	mov.w	r2, #280	; 0x118
 800f5b4:	4906      	ldr	r1, [pc, #24]	; (800f5d0 <do_memp_malloc_pool+0x4c>)
 800f5b6:	4807      	ldr	r0, [pc, #28]	; (800f5d4 <do_memp_malloc_pool+0x50>)
 800f5b8:	f00b fed2 	bl	801b360 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800f5bc:	68fb      	ldr	r3, [r7, #12]
 800f5be:	e000      	b.n	800f5c2 <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800f5c0:	2300      	movs	r3, #0
}
 800f5c2:	4618      	mov	r0, r3
 800f5c4:	3710      	adds	r7, #16
 800f5c6:	46bd      	mov	sp, r7
 800f5c8:	bd80      	pop	{r7, pc}
 800f5ca:	bf00      	nop
 800f5cc:	08020e18 	.word	0x08020e18
 800f5d0:	08020e48 	.word	0x08020e48
 800f5d4:	08020e6c 	.word	0x08020e6c

0800f5d8 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800f5d8:	b580      	push	{r7, lr}
 800f5da:	b084      	sub	sp, #16
 800f5dc:	af00      	add	r7, sp, #0
 800f5de:	4603      	mov	r3, r0
 800f5e0:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800f5e2:	79fb      	ldrb	r3, [r7, #7]
 800f5e4:	2b08      	cmp	r3, #8
 800f5e6:	d908      	bls.n	800f5fa <memp_malloc+0x22>
 800f5e8:	4b0a      	ldr	r3, [pc, #40]	; (800f614 <memp_malloc+0x3c>)
 800f5ea:	f240 1257 	movw	r2, #343	; 0x157
 800f5ee:	490a      	ldr	r1, [pc, #40]	; (800f618 <memp_malloc+0x40>)
 800f5f0:	480a      	ldr	r0, [pc, #40]	; (800f61c <memp_malloc+0x44>)
 800f5f2:	f00b feb5 	bl	801b360 <iprintf>
 800f5f6:	2300      	movs	r3, #0
 800f5f8:	e008      	b.n	800f60c <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800f5fa:	79fb      	ldrb	r3, [r7, #7]
 800f5fc:	4a08      	ldr	r2, [pc, #32]	; (800f620 <memp_malloc+0x48>)
 800f5fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f602:	4618      	mov	r0, r3
 800f604:	f7ff ffbe 	bl	800f584 <do_memp_malloc_pool>
 800f608:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800f60a:	68fb      	ldr	r3, [r7, #12]
}
 800f60c:	4618      	mov	r0, r3
 800f60e:	3710      	adds	r7, #16
 800f610:	46bd      	mov	sp, r7
 800f612:	bd80      	pop	{r7, pc}
 800f614:	08020e18 	.word	0x08020e18
 800f618:	08020ea8 	.word	0x08020ea8
 800f61c:	08020e6c 	.word	0x08020e6c
 800f620:	08023ecc 	.word	0x08023ecc

0800f624 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800f624:	b580      	push	{r7, lr}
 800f626:	b084      	sub	sp, #16
 800f628:	af00      	add	r7, sp, #0
 800f62a:	6078      	str	r0, [r7, #4]
 800f62c:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800f62e:	683b      	ldr	r3, [r7, #0]
 800f630:	f003 0303 	and.w	r3, r3, #3
 800f634:	2b00      	cmp	r3, #0
 800f636:	d006      	beq.n	800f646 <do_memp_free_pool+0x22>
 800f638:	4b0a      	ldr	r3, [pc, #40]	; (800f664 <do_memp_free_pool+0x40>)
 800f63a:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800f63e:	490a      	ldr	r1, [pc, #40]	; (800f668 <do_memp_free_pool+0x44>)
 800f640:	480a      	ldr	r0, [pc, #40]	; (800f66c <do_memp_free_pool+0x48>)
 800f642:	f00b fe8d 	bl	801b360 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800f646:	683b      	ldr	r3, [r7, #0]
 800f648:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	689b      	ldr	r3, [r3, #8]
 800f64e:	681a      	ldr	r2, [r3, #0]
 800f650:	68fb      	ldr	r3, [r7, #12]
 800f652:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800f654:	687b      	ldr	r3, [r7, #4]
 800f656:	689b      	ldr	r3, [r3, #8]
 800f658:	68fa      	ldr	r2, [r7, #12]
 800f65a:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 800f65c:	bf00      	nop
 800f65e:	3710      	adds	r7, #16
 800f660:	46bd      	mov	sp, r7
 800f662:	bd80      	pop	{r7, pc}
 800f664:	08020e18 	.word	0x08020e18
 800f668:	08020ec8 	.word	0x08020ec8
 800f66c:	08020e6c 	.word	0x08020e6c

0800f670 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800f670:	b580      	push	{r7, lr}
 800f672:	b082      	sub	sp, #8
 800f674:	af00      	add	r7, sp, #0
 800f676:	4603      	mov	r3, r0
 800f678:	6039      	str	r1, [r7, #0]
 800f67a:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800f67c:	79fb      	ldrb	r3, [r7, #7]
 800f67e:	2b08      	cmp	r3, #8
 800f680:	d907      	bls.n	800f692 <memp_free+0x22>
 800f682:	4b0c      	ldr	r3, [pc, #48]	; (800f6b4 <memp_free+0x44>)
 800f684:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800f688:	490b      	ldr	r1, [pc, #44]	; (800f6b8 <memp_free+0x48>)
 800f68a:	480c      	ldr	r0, [pc, #48]	; (800f6bc <memp_free+0x4c>)
 800f68c:	f00b fe68 	bl	801b360 <iprintf>
 800f690:	e00c      	b.n	800f6ac <memp_free+0x3c>

  if (mem == NULL) {
 800f692:	683b      	ldr	r3, [r7, #0]
 800f694:	2b00      	cmp	r3, #0
 800f696:	d008      	beq.n	800f6aa <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800f698:	79fb      	ldrb	r3, [r7, #7]
 800f69a:	4a09      	ldr	r2, [pc, #36]	; (800f6c0 <memp_free+0x50>)
 800f69c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f6a0:	6839      	ldr	r1, [r7, #0]
 800f6a2:	4618      	mov	r0, r3
 800f6a4:	f7ff ffbe 	bl	800f624 <do_memp_free_pool>
 800f6a8:	e000      	b.n	800f6ac <memp_free+0x3c>
    return;
 800f6aa:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800f6ac:	3708      	adds	r7, #8
 800f6ae:	46bd      	mov	sp, r7
 800f6b0:	bd80      	pop	{r7, pc}
 800f6b2:	bf00      	nop
 800f6b4:	08020e18 	.word	0x08020e18
 800f6b8:	08020ee8 	.word	0x08020ee8
 800f6bc:	08020e6c 	.word	0x08020e6c
 800f6c0:	08023ecc 	.word	0x08023ecc

0800f6c4 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800f6c4:	b480      	push	{r7}
 800f6c6:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800f6c8:	bf00      	nop
 800f6ca:	46bd      	mov	sp, r7
 800f6cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6d0:	4770      	bx	lr
	...

0800f6d4 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800f6d4:	b580      	push	{r7, lr}
 800f6d6:	b086      	sub	sp, #24
 800f6d8:	af00      	add	r7, sp, #0
 800f6da:	60f8      	str	r0, [r7, #12]
 800f6dc:	60b9      	str	r1, [r7, #8]
 800f6de:	607a      	str	r2, [r7, #4]
 800f6e0:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800f6e2:	68fb      	ldr	r3, [r7, #12]
 800f6e4:	2b00      	cmp	r3, #0
 800f6e6:	d108      	bne.n	800f6fa <netif_add+0x26>
 800f6e8:	4b5b      	ldr	r3, [pc, #364]	; (800f858 <netif_add+0x184>)
 800f6ea:	f240 1227 	movw	r2, #295	; 0x127
 800f6ee:	495b      	ldr	r1, [pc, #364]	; (800f85c <netif_add+0x188>)
 800f6f0:	485b      	ldr	r0, [pc, #364]	; (800f860 <netif_add+0x18c>)
 800f6f2:	f00b fe35 	bl	801b360 <iprintf>
 800f6f6:	2300      	movs	r3, #0
 800f6f8:	e0a9      	b.n	800f84e <netif_add+0x17a>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800f6fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6fc:	2b00      	cmp	r3, #0
 800f6fe:	d108      	bne.n	800f712 <netif_add+0x3e>
 800f700:	4b55      	ldr	r3, [pc, #340]	; (800f858 <netif_add+0x184>)
 800f702:	f44f 7294 	mov.w	r2, #296	; 0x128
 800f706:	4957      	ldr	r1, [pc, #348]	; (800f864 <netif_add+0x190>)
 800f708:	4855      	ldr	r0, [pc, #340]	; (800f860 <netif_add+0x18c>)
 800f70a:	f00b fe29 	bl	801b360 <iprintf>
 800f70e:	2300      	movs	r3, #0
 800f710:	e09d      	b.n	800f84e <netif_add+0x17a>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800f712:	68bb      	ldr	r3, [r7, #8]
 800f714:	2b00      	cmp	r3, #0
 800f716:	d101      	bne.n	800f71c <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800f718:	4b53      	ldr	r3, [pc, #332]	; (800f868 <netif_add+0x194>)
 800f71a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	2b00      	cmp	r3, #0
 800f720:	d101      	bne.n	800f726 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800f722:	4b51      	ldr	r3, [pc, #324]	; (800f868 <netif_add+0x194>)
 800f724:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800f726:	683b      	ldr	r3, [r7, #0]
 800f728:	2b00      	cmp	r3, #0
 800f72a:	d101      	bne.n	800f730 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800f72c:	4b4e      	ldr	r3, [pc, #312]	; (800f868 <netif_add+0x194>)
 800f72e:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800f730:	68fb      	ldr	r3, [r7, #12]
 800f732:	2200      	movs	r2, #0
 800f734:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800f736:	68fb      	ldr	r3, [r7, #12]
 800f738:	2200      	movs	r2, #0
 800f73a:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800f73c:	68fb      	ldr	r3, [r7, #12]
 800f73e:	2200      	movs	r2, #0
 800f740:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800f742:	68fb      	ldr	r3, [r7, #12]
 800f744:	4a49      	ldr	r2, [pc, #292]	; (800f86c <netif_add+0x198>)
 800f746:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800f748:	68fb      	ldr	r3, [r7, #12]
 800f74a:	2200      	movs	r2, #0
 800f74c:	851a      	strh	r2, [r3, #40]	; 0x28
  netif->flags = 0;
 800f74e:	68fb      	ldr	r3, [r7, #12]
 800f750:	2200      	movs	r2, #0
 800f752:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 800f756:	68fb      	ldr	r3, [r7, #12]
 800f758:	3324      	adds	r3, #36	; 0x24
 800f75a:	2204      	movs	r2, #4
 800f75c:	2100      	movs	r1, #0
 800f75e:	4618      	mov	r0, r3
 800f760:	f00b f8e2 	bl	801a928 <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800f764:	68fb      	ldr	r3, [r7, #12]
 800f766:	2200      	movs	r2, #0
 800f768:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800f76a:	68fb      	ldr	r3, [r7, #12]
 800f76c:	6a3a      	ldr	r2, [r7, #32]
 800f76e:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800f770:	4b3f      	ldr	r3, [pc, #252]	; (800f870 <netif_add+0x19c>)
 800f772:	781a      	ldrb	r2, [r3, #0]
 800f774:	68fb      	ldr	r3, [r7, #12]
 800f776:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  netif->input = input;
 800f77a:	68fb      	ldr	r3, [r7, #12]
 800f77c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f77e:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800f780:	683b      	ldr	r3, [r7, #0]
 800f782:	687a      	ldr	r2, [r7, #4]
 800f784:	68b9      	ldr	r1, [r7, #8]
 800f786:	68f8      	ldr	r0, [r7, #12]
 800f788:	f000 f914 	bl	800f9b4 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800f78c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f78e:	68f8      	ldr	r0, [r7, #12]
 800f790:	4798      	blx	r3
 800f792:	4603      	mov	r3, r0
 800f794:	2b00      	cmp	r3, #0
 800f796:	d001      	beq.n	800f79c <netif_add+0xc8>
    return NULL;
 800f798:	2300      	movs	r3, #0
 800f79a:	e058      	b.n	800f84e <netif_add+0x17a>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800f79c:	68fb      	ldr	r3, [r7, #12]
 800f79e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800f7a2:	2bff      	cmp	r3, #255	; 0xff
 800f7a4:	d103      	bne.n	800f7ae <netif_add+0xda>
        netif->num = 0;
 800f7a6:	68fb      	ldr	r3, [r7, #12]
 800f7a8:	2200      	movs	r2, #0
 800f7aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }
      num_netifs = 0;
 800f7ae:	2300      	movs	r3, #0
 800f7b0:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800f7b2:	4b30      	ldr	r3, [pc, #192]	; (800f874 <netif_add+0x1a0>)
 800f7b4:	681b      	ldr	r3, [r3, #0]
 800f7b6:	617b      	str	r3, [r7, #20]
 800f7b8:	e02b      	b.n	800f812 <netif_add+0x13e>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800f7ba:	697a      	ldr	r2, [r7, #20]
 800f7bc:	68fb      	ldr	r3, [r7, #12]
 800f7be:	429a      	cmp	r2, r3
 800f7c0:	d106      	bne.n	800f7d0 <netif_add+0xfc>
 800f7c2:	4b25      	ldr	r3, [pc, #148]	; (800f858 <netif_add+0x184>)
 800f7c4:	f240 128b 	movw	r2, #395	; 0x18b
 800f7c8:	492b      	ldr	r1, [pc, #172]	; (800f878 <netif_add+0x1a4>)
 800f7ca:	4825      	ldr	r0, [pc, #148]	; (800f860 <netif_add+0x18c>)
 800f7cc:	f00b fdc8 	bl	801b360 <iprintf>
        num_netifs++;
 800f7d0:	693b      	ldr	r3, [r7, #16]
 800f7d2:	3301      	adds	r3, #1
 800f7d4:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800f7d6:	693b      	ldr	r3, [r7, #16]
 800f7d8:	2bff      	cmp	r3, #255	; 0xff
 800f7da:	dd06      	ble.n	800f7ea <netif_add+0x116>
 800f7dc:	4b1e      	ldr	r3, [pc, #120]	; (800f858 <netif_add+0x184>)
 800f7de:	f240 128d 	movw	r2, #397	; 0x18d
 800f7e2:	4926      	ldr	r1, [pc, #152]	; (800f87c <netif_add+0x1a8>)
 800f7e4:	481e      	ldr	r0, [pc, #120]	; (800f860 <netif_add+0x18c>)
 800f7e6:	f00b fdbb 	bl	801b360 <iprintf>
        if (netif2->num == netif->num) {
 800f7ea:	697b      	ldr	r3, [r7, #20]
 800f7ec:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 800f7f0:	68fb      	ldr	r3, [r7, #12]
 800f7f2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800f7f6:	429a      	cmp	r2, r3
 800f7f8:	d108      	bne.n	800f80c <netif_add+0x138>
          netif->num++;
 800f7fa:	68fb      	ldr	r3, [r7, #12]
 800f7fc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800f800:	3301      	adds	r3, #1
 800f802:	b2da      	uxtb	r2, r3
 800f804:	68fb      	ldr	r3, [r7, #12]
 800f806:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          break;
 800f80a:	e005      	b.n	800f818 <netif_add+0x144>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800f80c:	697b      	ldr	r3, [r7, #20]
 800f80e:	681b      	ldr	r3, [r3, #0]
 800f810:	617b      	str	r3, [r7, #20]
 800f812:	697b      	ldr	r3, [r7, #20]
 800f814:	2b00      	cmp	r3, #0
 800f816:	d1d0      	bne.n	800f7ba <netif_add+0xe6>
        }
      }
    } while (netif2 != NULL);
 800f818:	697b      	ldr	r3, [r7, #20]
 800f81a:	2b00      	cmp	r3, #0
 800f81c:	d1be      	bne.n	800f79c <netif_add+0xc8>
  }
  if (netif->num == 254) {
 800f81e:	68fb      	ldr	r3, [r7, #12]
 800f820:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800f824:	2bfe      	cmp	r3, #254	; 0xfe
 800f826:	d103      	bne.n	800f830 <netif_add+0x15c>
    netif_num = 0;
 800f828:	4b11      	ldr	r3, [pc, #68]	; (800f870 <netif_add+0x19c>)
 800f82a:	2200      	movs	r2, #0
 800f82c:	701a      	strb	r2, [r3, #0]
 800f82e:	e006      	b.n	800f83e <netif_add+0x16a>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800f830:	68fb      	ldr	r3, [r7, #12]
 800f832:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800f836:	3301      	adds	r3, #1
 800f838:	b2da      	uxtb	r2, r3
 800f83a:	4b0d      	ldr	r3, [pc, #52]	; (800f870 <netif_add+0x19c>)
 800f83c:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800f83e:	4b0d      	ldr	r3, [pc, #52]	; (800f874 <netif_add+0x1a0>)
 800f840:	681a      	ldr	r2, [r3, #0]
 800f842:	68fb      	ldr	r3, [r7, #12]
 800f844:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800f846:	4a0b      	ldr	r2, [pc, #44]	; (800f874 <netif_add+0x1a0>)
 800f848:	68fb      	ldr	r3, [r7, #12]
 800f84a:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800f84c:	68fb      	ldr	r3, [r7, #12]
}
 800f84e:	4618      	mov	r0, r3
 800f850:	3718      	adds	r7, #24
 800f852:	46bd      	mov	sp, r7
 800f854:	bd80      	pop	{r7, pc}
 800f856:	bf00      	nop
 800f858:	08020f04 	.word	0x08020f04
 800f85c:	08020f98 	.word	0x08020f98
 800f860:	08020f54 	.word	0x08020f54
 800f864:	08020fb4 	.word	0x08020fb4
 800f868:	08023f40 	.word	0x08023f40
 800f86c:	0800fbc7 	.word	0x0800fbc7
 800f870:	200004dc 	.word	0x200004dc
 800f874:	20007620 	.word	0x20007620
 800f878:	08020fd8 	.word	0x08020fd8
 800f87c:	08020fec 	.word	0x08020fec

0800f880 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800f880:	b580      	push	{r7, lr}
 800f882:	b082      	sub	sp, #8
 800f884:	af00      	add	r7, sp, #0
 800f886:	6078      	str	r0, [r7, #4]
 800f888:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800f88a:	6839      	ldr	r1, [r7, #0]
 800f88c:	6878      	ldr	r0, [r7, #4]
 800f88e:	f002 facf 	bl	8011e30 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800f892:	6839      	ldr	r1, [r7, #0]
 800f894:	6878      	ldr	r0, [r7, #4]
 800f896:	f006 fe6d 	bl	8016574 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800f89a:	bf00      	nop
 800f89c:	3708      	adds	r7, #8
 800f89e:	46bd      	mov	sp, r7
 800f8a0:	bd80      	pop	{r7, pc}
	...

0800f8a4 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800f8a4:	b580      	push	{r7, lr}
 800f8a6:	b086      	sub	sp, #24
 800f8a8:	af00      	add	r7, sp, #0
 800f8aa:	60f8      	str	r0, [r7, #12]
 800f8ac:	60b9      	str	r1, [r7, #8]
 800f8ae:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800f8b0:	68bb      	ldr	r3, [r7, #8]
 800f8b2:	2b00      	cmp	r3, #0
 800f8b4:	d106      	bne.n	800f8c4 <netif_do_set_ipaddr+0x20>
 800f8b6:	4b1d      	ldr	r3, [pc, #116]	; (800f92c <netif_do_set_ipaddr+0x88>)
 800f8b8:	f240 12cb 	movw	r2, #459	; 0x1cb
 800f8bc:	491c      	ldr	r1, [pc, #112]	; (800f930 <netif_do_set_ipaddr+0x8c>)
 800f8be:	481d      	ldr	r0, [pc, #116]	; (800f934 <netif_do_set_ipaddr+0x90>)
 800f8c0:	f00b fd4e 	bl	801b360 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800f8c4:	687b      	ldr	r3, [r7, #4]
 800f8c6:	2b00      	cmp	r3, #0
 800f8c8:	d106      	bne.n	800f8d8 <netif_do_set_ipaddr+0x34>
 800f8ca:	4b18      	ldr	r3, [pc, #96]	; (800f92c <netif_do_set_ipaddr+0x88>)
 800f8cc:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800f8d0:	4917      	ldr	r1, [pc, #92]	; (800f930 <netif_do_set_ipaddr+0x8c>)
 800f8d2:	4818      	ldr	r0, [pc, #96]	; (800f934 <netif_do_set_ipaddr+0x90>)
 800f8d4:	f00b fd44 	bl	801b360 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800f8d8:	68bb      	ldr	r3, [r7, #8]
 800f8da:	681a      	ldr	r2, [r3, #0]
 800f8dc:	68fb      	ldr	r3, [r7, #12]
 800f8de:	3304      	adds	r3, #4
 800f8e0:	681b      	ldr	r3, [r3, #0]
 800f8e2:	429a      	cmp	r2, r3
 800f8e4:	d01c      	beq.n	800f920 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800f8e6:	68bb      	ldr	r3, [r7, #8]
 800f8e8:	681b      	ldr	r3, [r3, #0]
 800f8ea:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800f8ec:	68fb      	ldr	r3, [r7, #12]
 800f8ee:	3304      	adds	r3, #4
 800f8f0:	681a      	ldr	r2, [r3, #0]
 800f8f2:	687b      	ldr	r3, [r7, #4]
 800f8f4:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800f8f6:	f107 0314 	add.w	r3, r7, #20
 800f8fa:	4619      	mov	r1, r3
 800f8fc:	6878      	ldr	r0, [r7, #4]
 800f8fe:	f7ff ffbf 	bl	800f880 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800f902:	68bb      	ldr	r3, [r7, #8]
 800f904:	2b00      	cmp	r3, #0
 800f906:	d002      	beq.n	800f90e <netif_do_set_ipaddr+0x6a>
 800f908:	68bb      	ldr	r3, [r7, #8]
 800f90a:	681b      	ldr	r3, [r3, #0]
 800f90c:	e000      	b.n	800f910 <netif_do_set_ipaddr+0x6c>
 800f90e:	2300      	movs	r3, #0
 800f910:	68fa      	ldr	r2, [r7, #12]
 800f912:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800f914:	2101      	movs	r1, #1
 800f916:	68f8      	ldr	r0, [r7, #12]
 800f918:	f000 f8d2 	bl	800fac0 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800f91c:	2301      	movs	r3, #1
 800f91e:	e000      	b.n	800f922 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800f920:	2300      	movs	r3, #0
}
 800f922:	4618      	mov	r0, r3
 800f924:	3718      	adds	r7, #24
 800f926:	46bd      	mov	sp, r7
 800f928:	bd80      	pop	{r7, pc}
 800f92a:	bf00      	nop
 800f92c:	08020f04 	.word	0x08020f04
 800f930:	0802101c 	.word	0x0802101c
 800f934:	08020f54 	.word	0x08020f54

0800f938 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800f938:	b480      	push	{r7}
 800f93a:	b085      	sub	sp, #20
 800f93c:	af00      	add	r7, sp, #0
 800f93e:	60f8      	str	r0, [r7, #12]
 800f940:	60b9      	str	r1, [r7, #8]
 800f942:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800f944:	68bb      	ldr	r3, [r7, #8]
 800f946:	681a      	ldr	r2, [r3, #0]
 800f948:	68fb      	ldr	r3, [r7, #12]
 800f94a:	3308      	adds	r3, #8
 800f94c:	681b      	ldr	r3, [r3, #0]
 800f94e:	429a      	cmp	r2, r3
 800f950:	d00a      	beq.n	800f968 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800f952:	68bb      	ldr	r3, [r7, #8]
 800f954:	2b00      	cmp	r3, #0
 800f956:	d002      	beq.n	800f95e <netif_do_set_netmask+0x26>
 800f958:	68bb      	ldr	r3, [r7, #8]
 800f95a:	681b      	ldr	r3, [r3, #0]
 800f95c:	e000      	b.n	800f960 <netif_do_set_netmask+0x28>
 800f95e:	2300      	movs	r3, #0
 800f960:	68fa      	ldr	r2, [r7, #12]
 800f962:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800f964:	2301      	movs	r3, #1
 800f966:	e000      	b.n	800f96a <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800f968:	2300      	movs	r3, #0
}
 800f96a:	4618      	mov	r0, r3
 800f96c:	3714      	adds	r7, #20
 800f96e:	46bd      	mov	sp, r7
 800f970:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f974:	4770      	bx	lr

0800f976 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800f976:	b480      	push	{r7}
 800f978:	b085      	sub	sp, #20
 800f97a:	af00      	add	r7, sp, #0
 800f97c:	60f8      	str	r0, [r7, #12]
 800f97e:	60b9      	str	r1, [r7, #8]
 800f980:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800f982:	68bb      	ldr	r3, [r7, #8]
 800f984:	681a      	ldr	r2, [r3, #0]
 800f986:	68fb      	ldr	r3, [r7, #12]
 800f988:	330c      	adds	r3, #12
 800f98a:	681b      	ldr	r3, [r3, #0]
 800f98c:	429a      	cmp	r2, r3
 800f98e:	d00a      	beq.n	800f9a6 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800f990:	68bb      	ldr	r3, [r7, #8]
 800f992:	2b00      	cmp	r3, #0
 800f994:	d002      	beq.n	800f99c <netif_do_set_gw+0x26>
 800f996:	68bb      	ldr	r3, [r7, #8]
 800f998:	681b      	ldr	r3, [r3, #0]
 800f99a:	e000      	b.n	800f99e <netif_do_set_gw+0x28>
 800f99c:	2300      	movs	r3, #0
 800f99e:	68fa      	ldr	r2, [r7, #12]
 800f9a0:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800f9a2:	2301      	movs	r3, #1
 800f9a4:	e000      	b.n	800f9a8 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800f9a6:	2300      	movs	r3, #0
}
 800f9a8:	4618      	mov	r0, r3
 800f9aa:	3714      	adds	r7, #20
 800f9ac:	46bd      	mov	sp, r7
 800f9ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9b2:	4770      	bx	lr

0800f9b4 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800f9b4:	b580      	push	{r7, lr}
 800f9b6:	b088      	sub	sp, #32
 800f9b8:	af00      	add	r7, sp, #0
 800f9ba:	60f8      	str	r0, [r7, #12]
 800f9bc:	60b9      	str	r1, [r7, #8]
 800f9be:	607a      	str	r2, [r7, #4]
 800f9c0:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800f9c2:	2300      	movs	r3, #0
 800f9c4:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800f9c6:	2300      	movs	r3, #0
 800f9c8:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800f9ca:	68bb      	ldr	r3, [r7, #8]
 800f9cc:	2b00      	cmp	r3, #0
 800f9ce:	d101      	bne.n	800f9d4 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800f9d0:	4b1c      	ldr	r3, [pc, #112]	; (800fa44 <netif_set_addr+0x90>)
 800f9d2:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800f9d4:	687b      	ldr	r3, [r7, #4]
 800f9d6:	2b00      	cmp	r3, #0
 800f9d8:	d101      	bne.n	800f9de <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800f9da:	4b1a      	ldr	r3, [pc, #104]	; (800fa44 <netif_set_addr+0x90>)
 800f9dc:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800f9de:	683b      	ldr	r3, [r7, #0]
 800f9e0:	2b00      	cmp	r3, #0
 800f9e2:	d101      	bne.n	800f9e8 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800f9e4:	4b17      	ldr	r3, [pc, #92]	; (800fa44 <netif_set_addr+0x90>)
 800f9e6:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800f9e8:	68bb      	ldr	r3, [r7, #8]
 800f9ea:	2b00      	cmp	r3, #0
 800f9ec:	d003      	beq.n	800f9f6 <netif_set_addr+0x42>
 800f9ee:	68bb      	ldr	r3, [r7, #8]
 800f9f0:	681b      	ldr	r3, [r3, #0]
 800f9f2:	2b00      	cmp	r3, #0
 800f9f4:	d101      	bne.n	800f9fa <netif_set_addr+0x46>
 800f9f6:	2301      	movs	r3, #1
 800f9f8:	e000      	b.n	800f9fc <netif_set_addr+0x48>
 800f9fa:	2300      	movs	r3, #0
 800f9fc:	617b      	str	r3, [r7, #20]
  if (remove) {
 800f9fe:	697b      	ldr	r3, [r7, #20]
 800fa00:	2b00      	cmp	r3, #0
 800fa02:	d006      	beq.n	800fa12 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800fa04:	f107 0310 	add.w	r3, r7, #16
 800fa08:	461a      	mov	r2, r3
 800fa0a:	68b9      	ldr	r1, [r7, #8]
 800fa0c:	68f8      	ldr	r0, [r7, #12]
 800fa0e:	f7ff ff49 	bl	800f8a4 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800fa12:	69fa      	ldr	r2, [r7, #28]
 800fa14:	6879      	ldr	r1, [r7, #4]
 800fa16:	68f8      	ldr	r0, [r7, #12]
 800fa18:	f7ff ff8e 	bl	800f938 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800fa1c:	69ba      	ldr	r2, [r7, #24]
 800fa1e:	6839      	ldr	r1, [r7, #0]
 800fa20:	68f8      	ldr	r0, [r7, #12]
 800fa22:	f7ff ffa8 	bl	800f976 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800fa26:	697b      	ldr	r3, [r7, #20]
 800fa28:	2b00      	cmp	r3, #0
 800fa2a:	d106      	bne.n	800fa3a <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800fa2c:	f107 0310 	add.w	r3, r7, #16
 800fa30:	461a      	mov	r2, r3
 800fa32:	68b9      	ldr	r1, [r7, #8]
 800fa34:	68f8      	ldr	r0, [r7, #12]
 800fa36:	f7ff ff35 	bl	800f8a4 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800fa3a:	bf00      	nop
 800fa3c:	3720      	adds	r7, #32
 800fa3e:	46bd      	mov	sp, r7
 800fa40:	bd80      	pop	{r7, pc}
 800fa42:	bf00      	nop
 800fa44:	08023f40 	.word	0x08023f40

0800fa48 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800fa48:	b480      	push	{r7}
 800fa4a:	b083      	sub	sp, #12
 800fa4c:	af00      	add	r7, sp, #0
 800fa4e:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800fa50:	4a04      	ldr	r2, [pc, #16]	; (800fa64 <netif_set_default+0x1c>)
 800fa52:	687b      	ldr	r3, [r7, #4]
 800fa54:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800fa56:	bf00      	nop
 800fa58:	370c      	adds	r7, #12
 800fa5a:	46bd      	mov	sp, r7
 800fa5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa60:	4770      	bx	lr
 800fa62:	bf00      	nop
 800fa64:	20007624 	.word	0x20007624

0800fa68 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800fa68:	b580      	push	{r7, lr}
 800fa6a:	b082      	sub	sp, #8
 800fa6c:	af00      	add	r7, sp, #0
 800fa6e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800fa70:	687b      	ldr	r3, [r7, #4]
 800fa72:	2b00      	cmp	r3, #0
 800fa74:	d107      	bne.n	800fa86 <netif_set_up+0x1e>
 800fa76:	4b0f      	ldr	r3, [pc, #60]	; (800fab4 <netif_set_up+0x4c>)
 800fa78:	f44f 7254 	mov.w	r2, #848	; 0x350
 800fa7c:	490e      	ldr	r1, [pc, #56]	; (800fab8 <netif_set_up+0x50>)
 800fa7e:	480f      	ldr	r0, [pc, #60]	; (800fabc <netif_set_up+0x54>)
 800fa80:	f00b fc6e 	bl	801b360 <iprintf>
 800fa84:	e013      	b.n	800faae <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800fa86:	687b      	ldr	r3, [r7, #4]
 800fa88:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800fa8c:	f003 0301 	and.w	r3, r3, #1
 800fa90:	2b00      	cmp	r3, #0
 800fa92:	d10c      	bne.n	800faae <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800fa94:	687b      	ldr	r3, [r7, #4]
 800fa96:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800fa9a:	f043 0301 	orr.w	r3, r3, #1
 800fa9e:	b2da      	uxtb	r2, r3
 800faa0:	687b      	ldr	r3, [r7, #4]
 800faa2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800faa6:	2103      	movs	r1, #3
 800faa8:	6878      	ldr	r0, [r7, #4]
 800faaa:	f000 f809 	bl	800fac0 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800faae:	3708      	adds	r7, #8
 800fab0:	46bd      	mov	sp, r7
 800fab2:	bd80      	pop	{r7, pc}
 800fab4:	08020f04 	.word	0x08020f04
 800fab8:	0802108c 	.word	0x0802108c
 800fabc:	08020f54 	.word	0x08020f54

0800fac0 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800fac0:	b580      	push	{r7, lr}
 800fac2:	b082      	sub	sp, #8
 800fac4:	af00      	add	r7, sp, #0
 800fac6:	6078      	str	r0, [r7, #4]
 800fac8:	460b      	mov	r3, r1
 800faca:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800facc:	687b      	ldr	r3, [r7, #4]
 800face:	2b00      	cmp	r3, #0
 800fad0:	d106      	bne.n	800fae0 <netif_issue_reports+0x20>
 800fad2:	4b18      	ldr	r3, [pc, #96]	; (800fb34 <netif_issue_reports+0x74>)
 800fad4:	f240 326d 	movw	r2, #877	; 0x36d
 800fad8:	4917      	ldr	r1, [pc, #92]	; (800fb38 <netif_issue_reports+0x78>)
 800fada:	4818      	ldr	r0, [pc, #96]	; (800fb3c <netif_issue_reports+0x7c>)
 800fadc:	f00b fc40 	bl	801b360 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800fae0:	687b      	ldr	r3, [r7, #4]
 800fae2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800fae6:	f003 0304 	and.w	r3, r3, #4
 800faea:	2b00      	cmp	r3, #0
 800faec:	d01e      	beq.n	800fb2c <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800faee:	687b      	ldr	r3, [r7, #4]
 800faf0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800faf4:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800faf8:	2b00      	cmp	r3, #0
 800fafa:	d017      	beq.n	800fb2c <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800fafc:	78fb      	ldrb	r3, [r7, #3]
 800fafe:	f003 0301 	and.w	r3, r3, #1
 800fb02:	2b00      	cmp	r3, #0
 800fb04:	d013      	beq.n	800fb2e <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800fb06:	687b      	ldr	r3, [r7, #4]
 800fb08:	3304      	adds	r3, #4
 800fb0a:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800fb0c:	2b00      	cmp	r3, #0
 800fb0e:	d00e      	beq.n	800fb2e <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800fb10:	687b      	ldr	r3, [r7, #4]
 800fb12:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800fb16:	f003 0308 	and.w	r3, r3, #8
 800fb1a:	2b00      	cmp	r3, #0
 800fb1c:	d007      	beq.n	800fb2e <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800fb1e:	687b      	ldr	r3, [r7, #4]
 800fb20:	3304      	adds	r3, #4
 800fb22:	4619      	mov	r1, r3
 800fb24:	6878      	ldr	r0, [r7, #4]
 800fb26:	f009 fae9 	bl	80190fc <etharp_request>
 800fb2a:	e000      	b.n	800fb2e <netif_issue_reports+0x6e>
    return;
 800fb2c:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800fb2e:	3708      	adds	r7, #8
 800fb30:	46bd      	mov	sp, r7
 800fb32:	bd80      	pop	{r7, pc}
 800fb34:	08020f04 	.word	0x08020f04
 800fb38:	080210a8 	.word	0x080210a8
 800fb3c:	08020f54 	.word	0x08020f54

0800fb40 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800fb40:	b580      	push	{r7, lr}
 800fb42:	b082      	sub	sp, #8
 800fb44:	af00      	add	r7, sp, #0
 800fb46:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	2b00      	cmp	r3, #0
 800fb4c:	d107      	bne.n	800fb5e <netif_set_down+0x1e>
 800fb4e:	4b12      	ldr	r3, [pc, #72]	; (800fb98 <netif_set_down+0x58>)
 800fb50:	f240 329b 	movw	r2, #923	; 0x39b
 800fb54:	4911      	ldr	r1, [pc, #68]	; (800fb9c <netif_set_down+0x5c>)
 800fb56:	4812      	ldr	r0, [pc, #72]	; (800fba0 <netif_set_down+0x60>)
 800fb58:	f00b fc02 	bl	801b360 <iprintf>
 800fb5c:	e019      	b.n	800fb92 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800fb5e:	687b      	ldr	r3, [r7, #4]
 800fb60:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800fb64:	f003 0301 	and.w	r3, r3, #1
 800fb68:	2b00      	cmp	r3, #0
 800fb6a:	d012      	beq.n	800fb92 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800fb6c:	687b      	ldr	r3, [r7, #4]
 800fb6e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800fb72:	f023 0301 	bic.w	r3, r3, #1
 800fb76:	b2da      	uxtb	r2, r3
 800fb78:	687b      	ldr	r3, [r7, #4]
 800fb7a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800fb7e:	687b      	ldr	r3, [r7, #4]
 800fb80:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800fb84:	f003 0308 	and.w	r3, r3, #8
 800fb88:	2b00      	cmp	r3, #0
 800fb8a:	d002      	beq.n	800fb92 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800fb8c:	6878      	ldr	r0, [r7, #4]
 800fb8e:	f008 fe6f 	bl	8018870 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800fb92:	3708      	adds	r7, #8
 800fb94:	46bd      	mov	sp, r7
 800fb96:	bd80      	pop	{r7, pc}
 800fb98:	08020f04 	.word	0x08020f04
 800fb9c:	080210cc 	.word	0x080210cc
 800fba0:	08020f54 	.word	0x08020f54

0800fba4 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800fba4:	b480      	push	{r7}
 800fba6:	b083      	sub	sp, #12
 800fba8:	af00      	add	r7, sp, #0
 800fbaa:	6078      	str	r0, [r7, #4]
 800fbac:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800fbae:	687b      	ldr	r3, [r7, #4]
 800fbb0:	2b00      	cmp	r3, #0
 800fbb2:	d002      	beq.n	800fbba <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800fbb4:	687b      	ldr	r3, [r7, #4]
 800fbb6:	683a      	ldr	r2, [r7, #0]
 800fbb8:	61da      	str	r2, [r3, #28]
  }
}
 800fbba:	bf00      	nop
 800fbbc:	370c      	adds	r7, #12
 800fbbe:	46bd      	mov	sp, r7
 800fbc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbc4:	4770      	bx	lr

0800fbc6 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800fbc6:	b480      	push	{r7}
 800fbc8:	b085      	sub	sp, #20
 800fbca:	af00      	add	r7, sp, #0
 800fbcc:	60f8      	str	r0, [r7, #12]
 800fbce:	60b9      	str	r1, [r7, #8]
 800fbd0:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800fbd2:	f06f 030b 	mvn.w	r3, #11
}
 800fbd6:	4618      	mov	r0, r3
 800fbd8:	3714      	adds	r7, #20
 800fbda:	46bd      	mov	sp, r7
 800fbdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbe0:	4770      	bx	lr
	...

0800fbe4 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800fbe4:	b480      	push	{r7}
 800fbe6:	b085      	sub	sp, #20
 800fbe8:	af00      	add	r7, sp, #0
 800fbea:	4603      	mov	r3, r0
 800fbec:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800fbee:	79fb      	ldrb	r3, [r7, #7]
 800fbf0:	2b00      	cmp	r3, #0
 800fbf2:	d013      	beq.n	800fc1c <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800fbf4:	4b0d      	ldr	r3, [pc, #52]	; (800fc2c <netif_get_by_index+0x48>)
 800fbf6:	681b      	ldr	r3, [r3, #0]
 800fbf8:	60fb      	str	r3, [r7, #12]
 800fbfa:	e00c      	b.n	800fc16 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800fbfc:	68fb      	ldr	r3, [r7, #12]
 800fbfe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800fc02:	3301      	adds	r3, #1
 800fc04:	b2db      	uxtb	r3, r3
 800fc06:	79fa      	ldrb	r2, [r7, #7]
 800fc08:	429a      	cmp	r2, r3
 800fc0a:	d101      	bne.n	800fc10 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800fc0c:	68fb      	ldr	r3, [r7, #12]
 800fc0e:	e006      	b.n	800fc1e <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800fc10:	68fb      	ldr	r3, [r7, #12]
 800fc12:	681b      	ldr	r3, [r3, #0]
 800fc14:	60fb      	str	r3, [r7, #12]
 800fc16:	68fb      	ldr	r3, [r7, #12]
 800fc18:	2b00      	cmp	r3, #0
 800fc1a:	d1ef      	bne.n	800fbfc <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800fc1c:	2300      	movs	r3, #0
}
 800fc1e:	4618      	mov	r0, r3
 800fc20:	3714      	adds	r7, #20
 800fc22:	46bd      	mov	sp, r7
 800fc24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc28:	4770      	bx	lr
 800fc2a:	bf00      	nop
 800fc2c:	20007620 	.word	0x20007620

0800fc30 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800fc30:	b480      	push	{r7}
 800fc32:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 800fc34:	4b03      	ldr	r3, [pc, #12]	; (800fc44 <pbuf_pool_is_empty+0x14>)
 800fc36:	2201      	movs	r2, #1
 800fc38:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800fc3a:	bf00      	nop
 800fc3c:	46bd      	mov	sp, r7
 800fc3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc42:	4770      	bx	lr
 800fc44:	20007628 	.word	0x20007628

0800fc48 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800fc48:	b480      	push	{r7}
 800fc4a:	b085      	sub	sp, #20
 800fc4c:	af00      	add	r7, sp, #0
 800fc4e:	60f8      	str	r0, [r7, #12]
 800fc50:	60b9      	str	r1, [r7, #8]
 800fc52:	4611      	mov	r1, r2
 800fc54:	461a      	mov	r2, r3
 800fc56:	460b      	mov	r3, r1
 800fc58:	80fb      	strh	r3, [r7, #6]
 800fc5a:	4613      	mov	r3, r2
 800fc5c:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800fc5e:	68fb      	ldr	r3, [r7, #12]
 800fc60:	2200      	movs	r2, #0
 800fc62:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800fc64:	68fb      	ldr	r3, [r7, #12]
 800fc66:	68ba      	ldr	r2, [r7, #8]
 800fc68:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800fc6a:	68fb      	ldr	r3, [r7, #12]
 800fc6c:	88fa      	ldrh	r2, [r7, #6]
 800fc6e:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800fc70:	68fb      	ldr	r3, [r7, #12]
 800fc72:	88ba      	ldrh	r2, [r7, #4]
 800fc74:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800fc76:	8b3b      	ldrh	r3, [r7, #24]
 800fc78:	b2da      	uxtb	r2, r3
 800fc7a:	68fb      	ldr	r3, [r7, #12]
 800fc7c:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800fc7e:	68fb      	ldr	r3, [r7, #12]
 800fc80:	7f3a      	ldrb	r2, [r7, #28]
 800fc82:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800fc84:	68fb      	ldr	r3, [r7, #12]
 800fc86:	2201      	movs	r2, #1
 800fc88:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800fc8a:	68fb      	ldr	r3, [r7, #12]
 800fc8c:	2200      	movs	r2, #0
 800fc8e:	73da      	strb	r2, [r3, #15]
}
 800fc90:	bf00      	nop
 800fc92:	3714      	adds	r7, #20
 800fc94:	46bd      	mov	sp, r7
 800fc96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc9a:	4770      	bx	lr

0800fc9c <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800fc9c:	b580      	push	{r7, lr}
 800fc9e:	b08c      	sub	sp, #48	; 0x30
 800fca0:	af02      	add	r7, sp, #8
 800fca2:	4603      	mov	r3, r0
 800fca4:	71fb      	strb	r3, [r7, #7]
 800fca6:	460b      	mov	r3, r1
 800fca8:	80bb      	strh	r3, [r7, #4]
 800fcaa:	4613      	mov	r3, r2
 800fcac:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800fcae:	79fb      	ldrb	r3, [r7, #7]
 800fcb0:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800fcb2:	887b      	ldrh	r3, [r7, #2]
 800fcb4:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800fcb8:	d07f      	beq.n	800fdba <pbuf_alloc+0x11e>
 800fcba:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800fcbe:	f300 80c8 	bgt.w	800fe52 <pbuf_alloc+0x1b6>
 800fcc2:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800fcc6:	d010      	beq.n	800fcea <pbuf_alloc+0x4e>
 800fcc8:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800fccc:	f300 80c1 	bgt.w	800fe52 <pbuf_alloc+0x1b6>
 800fcd0:	2b01      	cmp	r3, #1
 800fcd2:	d002      	beq.n	800fcda <pbuf_alloc+0x3e>
 800fcd4:	2b41      	cmp	r3, #65	; 0x41
 800fcd6:	f040 80bc 	bne.w	800fe52 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800fcda:	887a      	ldrh	r2, [r7, #2]
 800fcdc:	88bb      	ldrh	r3, [r7, #4]
 800fcde:	4619      	mov	r1, r3
 800fce0:	2000      	movs	r0, #0
 800fce2:	f000 f8d1 	bl	800fe88 <pbuf_alloc_reference>
 800fce6:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800fce8:	e0bd      	b.n	800fe66 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800fcea:	2300      	movs	r3, #0
 800fcec:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800fcee:	2300      	movs	r3, #0
 800fcf0:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800fcf2:	88bb      	ldrh	r3, [r7, #4]
 800fcf4:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800fcf6:	2008      	movs	r0, #8
 800fcf8:	f7ff fc6e 	bl	800f5d8 <memp_malloc>
 800fcfc:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800fcfe:	693b      	ldr	r3, [r7, #16]
 800fd00:	2b00      	cmp	r3, #0
 800fd02:	d109      	bne.n	800fd18 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800fd04:	f7ff ff94 	bl	800fc30 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800fd08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd0a:	2b00      	cmp	r3, #0
 800fd0c:	d002      	beq.n	800fd14 <pbuf_alloc+0x78>
            pbuf_free(p);
 800fd0e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fd10:	f000 faa8 	bl	8010264 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800fd14:	2300      	movs	r3, #0
 800fd16:	e0a7      	b.n	800fe68 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800fd18:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fd1a:	3303      	adds	r3, #3
 800fd1c:	b29b      	uxth	r3, r3
 800fd1e:	f023 0303 	bic.w	r3, r3, #3
 800fd22:	b29b      	uxth	r3, r3
 800fd24:	f5c3 7301 	rsb	r3, r3, #516	; 0x204
 800fd28:	b29b      	uxth	r3, r3
 800fd2a:	8b7a      	ldrh	r2, [r7, #26]
 800fd2c:	4293      	cmp	r3, r2
 800fd2e:	bf28      	it	cs
 800fd30:	4613      	movcs	r3, r2
 800fd32:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800fd34:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fd36:	3310      	adds	r3, #16
 800fd38:	693a      	ldr	r2, [r7, #16]
 800fd3a:	4413      	add	r3, r2
 800fd3c:	3303      	adds	r3, #3
 800fd3e:	f023 0303 	bic.w	r3, r3, #3
 800fd42:	4618      	mov	r0, r3
 800fd44:	89f9      	ldrh	r1, [r7, #14]
 800fd46:	8b7a      	ldrh	r2, [r7, #26]
 800fd48:	2300      	movs	r3, #0
 800fd4a:	9301      	str	r3, [sp, #4]
 800fd4c:	887b      	ldrh	r3, [r7, #2]
 800fd4e:	9300      	str	r3, [sp, #0]
 800fd50:	460b      	mov	r3, r1
 800fd52:	4601      	mov	r1, r0
 800fd54:	6938      	ldr	r0, [r7, #16]
 800fd56:	f7ff ff77 	bl	800fc48 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800fd5a:	693b      	ldr	r3, [r7, #16]
 800fd5c:	685b      	ldr	r3, [r3, #4]
 800fd5e:	f003 0303 	and.w	r3, r3, #3
 800fd62:	2b00      	cmp	r3, #0
 800fd64:	d006      	beq.n	800fd74 <pbuf_alloc+0xd8>
 800fd66:	4b42      	ldr	r3, [pc, #264]	; (800fe70 <pbuf_alloc+0x1d4>)
 800fd68:	f44f 7280 	mov.w	r2, #256	; 0x100
 800fd6c:	4941      	ldr	r1, [pc, #260]	; (800fe74 <pbuf_alloc+0x1d8>)
 800fd6e:	4842      	ldr	r0, [pc, #264]	; (800fe78 <pbuf_alloc+0x1dc>)
 800fd70:	f00b faf6 	bl	801b360 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800fd74:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fd76:	3303      	adds	r3, #3
 800fd78:	f023 0303 	bic.w	r3, r3, #3
 800fd7c:	f5b3 7f01 	cmp.w	r3, #516	; 0x204
 800fd80:	d106      	bne.n	800fd90 <pbuf_alloc+0xf4>
 800fd82:	4b3b      	ldr	r3, [pc, #236]	; (800fe70 <pbuf_alloc+0x1d4>)
 800fd84:	f44f 7281 	mov.w	r2, #258	; 0x102
 800fd88:	493c      	ldr	r1, [pc, #240]	; (800fe7c <pbuf_alloc+0x1e0>)
 800fd8a:	483b      	ldr	r0, [pc, #236]	; (800fe78 <pbuf_alloc+0x1dc>)
 800fd8c:	f00b fae8 	bl	801b360 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800fd90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd92:	2b00      	cmp	r3, #0
 800fd94:	d102      	bne.n	800fd9c <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800fd96:	693b      	ldr	r3, [r7, #16]
 800fd98:	627b      	str	r3, [r7, #36]	; 0x24
 800fd9a:	e002      	b.n	800fda2 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800fd9c:	69fb      	ldr	r3, [r7, #28]
 800fd9e:	693a      	ldr	r2, [r7, #16]
 800fda0:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800fda2:	693b      	ldr	r3, [r7, #16]
 800fda4:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800fda6:	8b7a      	ldrh	r2, [r7, #26]
 800fda8:	89fb      	ldrh	r3, [r7, #14]
 800fdaa:	1ad3      	subs	r3, r2, r3
 800fdac:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800fdae:	2300      	movs	r3, #0
 800fdb0:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800fdb2:	8b7b      	ldrh	r3, [r7, #26]
 800fdb4:	2b00      	cmp	r3, #0
 800fdb6:	d19e      	bne.n	800fcf6 <pbuf_alloc+0x5a>
      break;
 800fdb8:	e055      	b.n	800fe66 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800fdba:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fdbc:	3303      	adds	r3, #3
 800fdbe:	b29b      	uxth	r3, r3
 800fdc0:	f023 0303 	bic.w	r3, r3, #3
 800fdc4:	b29a      	uxth	r2, r3
 800fdc6:	88bb      	ldrh	r3, [r7, #4]
 800fdc8:	3303      	adds	r3, #3
 800fdca:	b29b      	uxth	r3, r3
 800fdcc:	f023 0303 	bic.w	r3, r3, #3
 800fdd0:	b29b      	uxth	r3, r3
 800fdd2:	4413      	add	r3, r2
 800fdd4:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800fdd6:	8b3b      	ldrh	r3, [r7, #24]
 800fdd8:	3310      	adds	r3, #16
 800fdda:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800fddc:	8b3a      	ldrh	r2, [r7, #24]
 800fdde:	88bb      	ldrh	r3, [r7, #4]
 800fde0:	3303      	adds	r3, #3
 800fde2:	f023 0303 	bic.w	r3, r3, #3
 800fde6:	429a      	cmp	r2, r3
 800fde8:	d306      	bcc.n	800fdf8 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800fdea:	8afa      	ldrh	r2, [r7, #22]
 800fdec:	88bb      	ldrh	r3, [r7, #4]
 800fdee:	3303      	adds	r3, #3
 800fdf0:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800fdf4:	429a      	cmp	r2, r3
 800fdf6:	d201      	bcs.n	800fdfc <pbuf_alloc+0x160>
        return NULL;
 800fdf8:	2300      	movs	r3, #0
 800fdfa:	e035      	b.n	800fe68 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800fdfc:	8afb      	ldrh	r3, [r7, #22]
 800fdfe:	4618      	mov	r0, r3
 800fe00:	f7ff fa7c 	bl	800f2fc <mem_malloc>
 800fe04:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800fe06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe08:	2b00      	cmp	r3, #0
 800fe0a:	d101      	bne.n	800fe10 <pbuf_alloc+0x174>
        return NULL;
 800fe0c:	2300      	movs	r3, #0
 800fe0e:	e02b      	b.n	800fe68 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800fe10:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fe12:	3310      	adds	r3, #16
 800fe14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fe16:	4413      	add	r3, r2
 800fe18:	3303      	adds	r3, #3
 800fe1a:	f023 0303 	bic.w	r3, r3, #3
 800fe1e:	4618      	mov	r0, r3
 800fe20:	88b9      	ldrh	r1, [r7, #4]
 800fe22:	88ba      	ldrh	r2, [r7, #4]
 800fe24:	2300      	movs	r3, #0
 800fe26:	9301      	str	r3, [sp, #4]
 800fe28:	887b      	ldrh	r3, [r7, #2]
 800fe2a:	9300      	str	r3, [sp, #0]
 800fe2c:	460b      	mov	r3, r1
 800fe2e:	4601      	mov	r1, r0
 800fe30:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fe32:	f7ff ff09 	bl	800fc48 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800fe36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe38:	685b      	ldr	r3, [r3, #4]
 800fe3a:	f003 0303 	and.w	r3, r3, #3
 800fe3e:	2b00      	cmp	r3, #0
 800fe40:	d010      	beq.n	800fe64 <pbuf_alloc+0x1c8>
 800fe42:	4b0b      	ldr	r3, [pc, #44]	; (800fe70 <pbuf_alloc+0x1d4>)
 800fe44:	f44f 7291 	mov.w	r2, #290	; 0x122
 800fe48:	490d      	ldr	r1, [pc, #52]	; (800fe80 <pbuf_alloc+0x1e4>)
 800fe4a:	480b      	ldr	r0, [pc, #44]	; (800fe78 <pbuf_alloc+0x1dc>)
 800fe4c:	f00b fa88 	bl	801b360 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800fe50:	e008      	b.n	800fe64 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800fe52:	4b07      	ldr	r3, [pc, #28]	; (800fe70 <pbuf_alloc+0x1d4>)
 800fe54:	f240 1227 	movw	r2, #295	; 0x127
 800fe58:	490a      	ldr	r1, [pc, #40]	; (800fe84 <pbuf_alloc+0x1e8>)
 800fe5a:	4807      	ldr	r0, [pc, #28]	; (800fe78 <pbuf_alloc+0x1dc>)
 800fe5c:	f00b fa80 	bl	801b360 <iprintf>
      return NULL;
 800fe60:	2300      	movs	r3, #0
 800fe62:	e001      	b.n	800fe68 <pbuf_alloc+0x1cc>
      break;
 800fe64:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800fe66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800fe68:	4618      	mov	r0, r3
 800fe6a:	3728      	adds	r7, #40	; 0x28
 800fe6c:	46bd      	mov	sp, r7
 800fe6e:	bd80      	pop	{r7, pc}
 800fe70:	08021134 	.word	0x08021134
 800fe74:	08021164 	.word	0x08021164
 800fe78:	08021194 	.word	0x08021194
 800fe7c:	080211bc 	.word	0x080211bc
 800fe80:	080211f0 	.word	0x080211f0
 800fe84:	0802121c 	.word	0x0802121c

0800fe88 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800fe88:	b580      	push	{r7, lr}
 800fe8a:	b086      	sub	sp, #24
 800fe8c:	af02      	add	r7, sp, #8
 800fe8e:	6078      	str	r0, [r7, #4]
 800fe90:	460b      	mov	r3, r1
 800fe92:	807b      	strh	r3, [r7, #2]
 800fe94:	4613      	mov	r3, r2
 800fe96:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800fe98:	883b      	ldrh	r3, [r7, #0]
 800fe9a:	2b41      	cmp	r3, #65	; 0x41
 800fe9c:	d009      	beq.n	800feb2 <pbuf_alloc_reference+0x2a>
 800fe9e:	883b      	ldrh	r3, [r7, #0]
 800fea0:	2b01      	cmp	r3, #1
 800fea2:	d006      	beq.n	800feb2 <pbuf_alloc_reference+0x2a>
 800fea4:	4b0f      	ldr	r3, [pc, #60]	; (800fee4 <pbuf_alloc_reference+0x5c>)
 800fea6:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800feaa:	490f      	ldr	r1, [pc, #60]	; (800fee8 <pbuf_alloc_reference+0x60>)
 800feac:	480f      	ldr	r0, [pc, #60]	; (800feec <pbuf_alloc_reference+0x64>)
 800feae:	f00b fa57 	bl	801b360 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800feb2:	2007      	movs	r0, #7
 800feb4:	f7ff fb90 	bl	800f5d8 <memp_malloc>
 800feb8:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800feba:	68fb      	ldr	r3, [r7, #12]
 800febc:	2b00      	cmp	r3, #0
 800febe:	d101      	bne.n	800fec4 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800fec0:	2300      	movs	r3, #0
 800fec2:	e00b      	b.n	800fedc <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800fec4:	8879      	ldrh	r1, [r7, #2]
 800fec6:	887a      	ldrh	r2, [r7, #2]
 800fec8:	2300      	movs	r3, #0
 800feca:	9301      	str	r3, [sp, #4]
 800fecc:	883b      	ldrh	r3, [r7, #0]
 800fece:	9300      	str	r3, [sp, #0]
 800fed0:	460b      	mov	r3, r1
 800fed2:	6879      	ldr	r1, [r7, #4]
 800fed4:	68f8      	ldr	r0, [r7, #12]
 800fed6:	f7ff feb7 	bl	800fc48 <pbuf_init_alloced_pbuf>
  return p;
 800feda:	68fb      	ldr	r3, [r7, #12]
}
 800fedc:	4618      	mov	r0, r3
 800fede:	3710      	adds	r7, #16
 800fee0:	46bd      	mov	sp, r7
 800fee2:	bd80      	pop	{r7, pc}
 800fee4:	08021134 	.word	0x08021134
 800fee8:	08021238 	.word	0x08021238
 800feec:	08021194 	.word	0x08021194

0800fef0 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800fef0:	b580      	push	{r7, lr}
 800fef2:	b088      	sub	sp, #32
 800fef4:	af02      	add	r7, sp, #8
 800fef6:	607b      	str	r3, [r7, #4]
 800fef8:	4603      	mov	r3, r0
 800fefa:	73fb      	strb	r3, [r7, #15]
 800fefc:	460b      	mov	r3, r1
 800fefe:	81bb      	strh	r3, [r7, #12]
 800ff00:	4613      	mov	r3, r2
 800ff02:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800ff04:	7bfb      	ldrb	r3, [r7, #15]
 800ff06:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800ff08:	8a7b      	ldrh	r3, [r7, #18]
 800ff0a:	3303      	adds	r3, #3
 800ff0c:	f023 0203 	bic.w	r2, r3, #3
 800ff10:	89bb      	ldrh	r3, [r7, #12]
 800ff12:	441a      	add	r2, r3
 800ff14:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ff16:	429a      	cmp	r2, r3
 800ff18:	d901      	bls.n	800ff1e <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800ff1a:	2300      	movs	r3, #0
 800ff1c:	e018      	b.n	800ff50 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800ff1e:	6a3b      	ldr	r3, [r7, #32]
 800ff20:	2b00      	cmp	r3, #0
 800ff22:	d007      	beq.n	800ff34 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800ff24:	8a7b      	ldrh	r3, [r7, #18]
 800ff26:	3303      	adds	r3, #3
 800ff28:	f023 0303 	bic.w	r3, r3, #3
 800ff2c:	6a3a      	ldr	r2, [r7, #32]
 800ff2e:	4413      	add	r3, r2
 800ff30:	617b      	str	r3, [r7, #20]
 800ff32:	e001      	b.n	800ff38 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800ff34:	2300      	movs	r3, #0
 800ff36:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800ff38:	6878      	ldr	r0, [r7, #4]
 800ff3a:	89b9      	ldrh	r1, [r7, #12]
 800ff3c:	89ba      	ldrh	r2, [r7, #12]
 800ff3e:	2302      	movs	r3, #2
 800ff40:	9301      	str	r3, [sp, #4]
 800ff42:	897b      	ldrh	r3, [r7, #10]
 800ff44:	9300      	str	r3, [sp, #0]
 800ff46:	460b      	mov	r3, r1
 800ff48:	6979      	ldr	r1, [r7, #20]
 800ff4a:	f7ff fe7d 	bl	800fc48 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800ff4e:	687b      	ldr	r3, [r7, #4]
}
 800ff50:	4618      	mov	r0, r3
 800ff52:	3718      	adds	r7, #24
 800ff54:	46bd      	mov	sp, r7
 800ff56:	bd80      	pop	{r7, pc}

0800ff58 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800ff58:	b580      	push	{r7, lr}
 800ff5a:	b084      	sub	sp, #16
 800ff5c:	af00      	add	r7, sp, #0
 800ff5e:	6078      	str	r0, [r7, #4]
 800ff60:	460b      	mov	r3, r1
 800ff62:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800ff64:	687b      	ldr	r3, [r7, #4]
 800ff66:	2b00      	cmp	r3, #0
 800ff68:	d106      	bne.n	800ff78 <pbuf_realloc+0x20>
 800ff6a:	4b3a      	ldr	r3, [pc, #232]	; (8010054 <pbuf_realloc+0xfc>)
 800ff6c:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800ff70:	4939      	ldr	r1, [pc, #228]	; (8010058 <pbuf_realloc+0x100>)
 800ff72:	483a      	ldr	r0, [pc, #232]	; (801005c <pbuf_realloc+0x104>)
 800ff74:	f00b f9f4 	bl	801b360 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800ff78:	687b      	ldr	r3, [r7, #4]
 800ff7a:	891b      	ldrh	r3, [r3, #8]
 800ff7c:	887a      	ldrh	r2, [r7, #2]
 800ff7e:	429a      	cmp	r2, r3
 800ff80:	d263      	bcs.n	801004a <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800ff82:	687b      	ldr	r3, [r7, #4]
 800ff84:	891a      	ldrh	r2, [r3, #8]
 800ff86:	887b      	ldrh	r3, [r7, #2]
 800ff88:	1ad3      	subs	r3, r2, r3
 800ff8a:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800ff8c:	887b      	ldrh	r3, [r7, #2]
 800ff8e:	817b      	strh	r3, [r7, #10]
  q = p;
 800ff90:	687b      	ldr	r3, [r7, #4]
 800ff92:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800ff94:	e018      	b.n	800ffc8 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800ff96:	68fb      	ldr	r3, [r7, #12]
 800ff98:	895b      	ldrh	r3, [r3, #10]
 800ff9a:	897a      	ldrh	r2, [r7, #10]
 800ff9c:	1ad3      	subs	r3, r2, r3
 800ff9e:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800ffa0:	68fb      	ldr	r3, [r7, #12]
 800ffa2:	891a      	ldrh	r2, [r3, #8]
 800ffa4:	893b      	ldrh	r3, [r7, #8]
 800ffa6:	1ad3      	subs	r3, r2, r3
 800ffa8:	b29a      	uxth	r2, r3
 800ffaa:	68fb      	ldr	r3, [r7, #12]
 800ffac:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800ffae:	68fb      	ldr	r3, [r7, #12]
 800ffb0:	681b      	ldr	r3, [r3, #0]
 800ffb2:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800ffb4:	68fb      	ldr	r3, [r7, #12]
 800ffb6:	2b00      	cmp	r3, #0
 800ffb8:	d106      	bne.n	800ffc8 <pbuf_realloc+0x70>
 800ffba:	4b26      	ldr	r3, [pc, #152]	; (8010054 <pbuf_realloc+0xfc>)
 800ffbc:	f240 12af 	movw	r2, #431	; 0x1af
 800ffc0:	4927      	ldr	r1, [pc, #156]	; (8010060 <pbuf_realloc+0x108>)
 800ffc2:	4826      	ldr	r0, [pc, #152]	; (801005c <pbuf_realloc+0x104>)
 800ffc4:	f00b f9cc 	bl	801b360 <iprintf>
  while (rem_len > q->len) {
 800ffc8:	68fb      	ldr	r3, [r7, #12]
 800ffca:	895b      	ldrh	r3, [r3, #10]
 800ffcc:	897a      	ldrh	r2, [r7, #10]
 800ffce:	429a      	cmp	r2, r3
 800ffd0:	d8e1      	bhi.n	800ff96 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800ffd2:	68fb      	ldr	r3, [r7, #12]
 800ffd4:	7b1b      	ldrb	r3, [r3, #12]
 800ffd6:	f003 030f 	and.w	r3, r3, #15
 800ffda:	2b00      	cmp	r3, #0
 800ffdc:	d121      	bne.n	8010022 <pbuf_realloc+0xca>
 800ffde:	68fb      	ldr	r3, [r7, #12]
 800ffe0:	895b      	ldrh	r3, [r3, #10]
 800ffe2:	897a      	ldrh	r2, [r7, #10]
 800ffe4:	429a      	cmp	r2, r3
 800ffe6:	d01c      	beq.n	8010022 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800ffe8:	68fb      	ldr	r3, [r7, #12]
 800ffea:	7b5b      	ldrb	r3, [r3, #13]
 800ffec:	f003 0302 	and.w	r3, r3, #2
 800fff0:	2b00      	cmp	r3, #0
 800fff2:	d116      	bne.n	8010022 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800fff4:	68fb      	ldr	r3, [r7, #12]
 800fff6:	685a      	ldr	r2, [r3, #4]
 800fff8:	68fb      	ldr	r3, [r7, #12]
 800fffa:	1ad3      	subs	r3, r2, r3
 800fffc:	b29a      	uxth	r2, r3
 800fffe:	897b      	ldrh	r3, [r7, #10]
 8010000:	4413      	add	r3, r2
 8010002:	b29b      	uxth	r3, r3
 8010004:	4619      	mov	r1, r3
 8010006:	68f8      	ldr	r0, [r7, #12]
 8010008:	f7ff f87c 	bl	800f104 <mem_trim>
 801000c:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 801000e:	68fb      	ldr	r3, [r7, #12]
 8010010:	2b00      	cmp	r3, #0
 8010012:	d106      	bne.n	8010022 <pbuf_realloc+0xca>
 8010014:	4b0f      	ldr	r3, [pc, #60]	; (8010054 <pbuf_realloc+0xfc>)
 8010016:	f240 12bd 	movw	r2, #445	; 0x1bd
 801001a:	4912      	ldr	r1, [pc, #72]	; (8010064 <pbuf_realloc+0x10c>)
 801001c:	480f      	ldr	r0, [pc, #60]	; (801005c <pbuf_realloc+0x104>)
 801001e:	f00b f99f 	bl	801b360 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8010022:	68fb      	ldr	r3, [r7, #12]
 8010024:	897a      	ldrh	r2, [r7, #10]
 8010026:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8010028:	68fb      	ldr	r3, [r7, #12]
 801002a:	895a      	ldrh	r2, [r3, #10]
 801002c:	68fb      	ldr	r3, [r7, #12]
 801002e:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8010030:	68fb      	ldr	r3, [r7, #12]
 8010032:	681b      	ldr	r3, [r3, #0]
 8010034:	2b00      	cmp	r3, #0
 8010036:	d004      	beq.n	8010042 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8010038:	68fb      	ldr	r3, [r7, #12]
 801003a:	681b      	ldr	r3, [r3, #0]
 801003c:	4618      	mov	r0, r3
 801003e:	f000 f911 	bl	8010264 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8010042:	68fb      	ldr	r3, [r7, #12]
 8010044:	2200      	movs	r2, #0
 8010046:	601a      	str	r2, [r3, #0]
 8010048:	e000      	b.n	801004c <pbuf_realloc+0xf4>
    return;
 801004a:	bf00      	nop

}
 801004c:	3710      	adds	r7, #16
 801004e:	46bd      	mov	sp, r7
 8010050:	bd80      	pop	{r7, pc}
 8010052:	bf00      	nop
 8010054:	08021134 	.word	0x08021134
 8010058:	0802124c 	.word	0x0802124c
 801005c:	08021194 	.word	0x08021194
 8010060:	08021264 	.word	0x08021264
 8010064:	0802127c 	.word	0x0802127c

08010068 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8010068:	b580      	push	{r7, lr}
 801006a:	b086      	sub	sp, #24
 801006c:	af00      	add	r7, sp, #0
 801006e:	60f8      	str	r0, [r7, #12]
 8010070:	60b9      	str	r1, [r7, #8]
 8010072:	4613      	mov	r3, r2
 8010074:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8010076:	68fb      	ldr	r3, [r7, #12]
 8010078:	2b00      	cmp	r3, #0
 801007a:	d106      	bne.n	801008a <pbuf_add_header_impl+0x22>
 801007c:	4b2b      	ldr	r3, [pc, #172]	; (801012c <pbuf_add_header_impl+0xc4>)
 801007e:	f240 12df 	movw	r2, #479	; 0x1df
 8010082:	492b      	ldr	r1, [pc, #172]	; (8010130 <pbuf_add_header_impl+0xc8>)
 8010084:	482b      	ldr	r0, [pc, #172]	; (8010134 <pbuf_add_header_impl+0xcc>)
 8010086:	f00b f96b 	bl	801b360 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 801008a:	68fb      	ldr	r3, [r7, #12]
 801008c:	2b00      	cmp	r3, #0
 801008e:	d003      	beq.n	8010098 <pbuf_add_header_impl+0x30>
 8010090:	68bb      	ldr	r3, [r7, #8]
 8010092:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010096:	d301      	bcc.n	801009c <pbuf_add_header_impl+0x34>
    return 1;
 8010098:	2301      	movs	r3, #1
 801009a:	e043      	b.n	8010124 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 801009c:	68bb      	ldr	r3, [r7, #8]
 801009e:	2b00      	cmp	r3, #0
 80100a0:	d101      	bne.n	80100a6 <pbuf_add_header_impl+0x3e>
    return 0;
 80100a2:	2300      	movs	r3, #0
 80100a4:	e03e      	b.n	8010124 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 80100a6:	68bb      	ldr	r3, [r7, #8]
 80100a8:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 80100aa:	68fb      	ldr	r3, [r7, #12]
 80100ac:	891a      	ldrh	r2, [r3, #8]
 80100ae:	8a7b      	ldrh	r3, [r7, #18]
 80100b0:	4413      	add	r3, r2
 80100b2:	b29b      	uxth	r3, r3
 80100b4:	8a7a      	ldrh	r2, [r7, #18]
 80100b6:	429a      	cmp	r2, r3
 80100b8:	d901      	bls.n	80100be <pbuf_add_header_impl+0x56>
    return 1;
 80100ba:	2301      	movs	r3, #1
 80100bc:	e032      	b.n	8010124 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 80100be:	68fb      	ldr	r3, [r7, #12]
 80100c0:	7b1b      	ldrb	r3, [r3, #12]
 80100c2:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 80100c4:	8a3b      	ldrh	r3, [r7, #16]
 80100c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80100ca:	2b00      	cmp	r3, #0
 80100cc:	d00c      	beq.n	80100e8 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 80100ce:	68fb      	ldr	r3, [r7, #12]
 80100d0:	685a      	ldr	r2, [r3, #4]
 80100d2:	68bb      	ldr	r3, [r7, #8]
 80100d4:	425b      	negs	r3, r3
 80100d6:	4413      	add	r3, r2
 80100d8:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 80100da:	68fb      	ldr	r3, [r7, #12]
 80100dc:	3310      	adds	r3, #16
 80100de:	697a      	ldr	r2, [r7, #20]
 80100e0:	429a      	cmp	r2, r3
 80100e2:	d20d      	bcs.n	8010100 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 80100e4:	2301      	movs	r3, #1
 80100e6:	e01d      	b.n	8010124 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 80100e8:	79fb      	ldrb	r3, [r7, #7]
 80100ea:	2b00      	cmp	r3, #0
 80100ec:	d006      	beq.n	80100fc <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 80100ee:	68fb      	ldr	r3, [r7, #12]
 80100f0:	685a      	ldr	r2, [r3, #4]
 80100f2:	68bb      	ldr	r3, [r7, #8]
 80100f4:	425b      	negs	r3, r3
 80100f6:	4413      	add	r3, r2
 80100f8:	617b      	str	r3, [r7, #20]
 80100fa:	e001      	b.n	8010100 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 80100fc:	2301      	movs	r3, #1
 80100fe:	e011      	b.n	8010124 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8010100:	68fb      	ldr	r3, [r7, #12]
 8010102:	697a      	ldr	r2, [r7, #20]
 8010104:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8010106:	68fb      	ldr	r3, [r7, #12]
 8010108:	895a      	ldrh	r2, [r3, #10]
 801010a:	8a7b      	ldrh	r3, [r7, #18]
 801010c:	4413      	add	r3, r2
 801010e:	b29a      	uxth	r2, r3
 8010110:	68fb      	ldr	r3, [r7, #12]
 8010112:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8010114:	68fb      	ldr	r3, [r7, #12]
 8010116:	891a      	ldrh	r2, [r3, #8]
 8010118:	8a7b      	ldrh	r3, [r7, #18]
 801011a:	4413      	add	r3, r2
 801011c:	b29a      	uxth	r2, r3
 801011e:	68fb      	ldr	r3, [r7, #12]
 8010120:	811a      	strh	r2, [r3, #8]


  return 0;
 8010122:	2300      	movs	r3, #0
}
 8010124:	4618      	mov	r0, r3
 8010126:	3718      	adds	r7, #24
 8010128:	46bd      	mov	sp, r7
 801012a:	bd80      	pop	{r7, pc}
 801012c:	08021134 	.word	0x08021134
 8010130:	08021298 	.word	0x08021298
 8010134:	08021194 	.word	0x08021194

08010138 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8010138:	b580      	push	{r7, lr}
 801013a:	b082      	sub	sp, #8
 801013c:	af00      	add	r7, sp, #0
 801013e:	6078      	str	r0, [r7, #4]
 8010140:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8010142:	2200      	movs	r2, #0
 8010144:	6839      	ldr	r1, [r7, #0]
 8010146:	6878      	ldr	r0, [r7, #4]
 8010148:	f7ff ff8e 	bl	8010068 <pbuf_add_header_impl>
 801014c:	4603      	mov	r3, r0
}
 801014e:	4618      	mov	r0, r3
 8010150:	3708      	adds	r7, #8
 8010152:	46bd      	mov	sp, r7
 8010154:	bd80      	pop	{r7, pc}
	...

08010158 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8010158:	b580      	push	{r7, lr}
 801015a:	b084      	sub	sp, #16
 801015c:	af00      	add	r7, sp, #0
 801015e:	6078      	str	r0, [r7, #4]
 8010160:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8010162:	687b      	ldr	r3, [r7, #4]
 8010164:	2b00      	cmp	r3, #0
 8010166:	d106      	bne.n	8010176 <pbuf_remove_header+0x1e>
 8010168:	4b20      	ldr	r3, [pc, #128]	; (80101ec <pbuf_remove_header+0x94>)
 801016a:	f240 224b 	movw	r2, #587	; 0x24b
 801016e:	4920      	ldr	r1, [pc, #128]	; (80101f0 <pbuf_remove_header+0x98>)
 8010170:	4820      	ldr	r0, [pc, #128]	; (80101f4 <pbuf_remove_header+0x9c>)
 8010172:	f00b f8f5 	bl	801b360 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8010176:	687b      	ldr	r3, [r7, #4]
 8010178:	2b00      	cmp	r3, #0
 801017a:	d003      	beq.n	8010184 <pbuf_remove_header+0x2c>
 801017c:	683b      	ldr	r3, [r7, #0]
 801017e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010182:	d301      	bcc.n	8010188 <pbuf_remove_header+0x30>
    return 1;
 8010184:	2301      	movs	r3, #1
 8010186:	e02c      	b.n	80101e2 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8010188:	683b      	ldr	r3, [r7, #0]
 801018a:	2b00      	cmp	r3, #0
 801018c:	d101      	bne.n	8010192 <pbuf_remove_header+0x3a>
    return 0;
 801018e:	2300      	movs	r3, #0
 8010190:	e027      	b.n	80101e2 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8010192:	683b      	ldr	r3, [r7, #0]
 8010194:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8010196:	687b      	ldr	r3, [r7, #4]
 8010198:	895b      	ldrh	r3, [r3, #10]
 801019a:	89fa      	ldrh	r2, [r7, #14]
 801019c:	429a      	cmp	r2, r3
 801019e:	d908      	bls.n	80101b2 <pbuf_remove_header+0x5a>
 80101a0:	4b12      	ldr	r3, [pc, #72]	; (80101ec <pbuf_remove_header+0x94>)
 80101a2:	f240 2255 	movw	r2, #597	; 0x255
 80101a6:	4914      	ldr	r1, [pc, #80]	; (80101f8 <pbuf_remove_header+0xa0>)
 80101a8:	4812      	ldr	r0, [pc, #72]	; (80101f4 <pbuf_remove_header+0x9c>)
 80101aa:	f00b f8d9 	bl	801b360 <iprintf>
 80101ae:	2301      	movs	r3, #1
 80101b0:	e017      	b.n	80101e2 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 80101b2:	687b      	ldr	r3, [r7, #4]
 80101b4:	685b      	ldr	r3, [r3, #4]
 80101b6:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 80101b8:	687b      	ldr	r3, [r7, #4]
 80101ba:	685a      	ldr	r2, [r3, #4]
 80101bc:	683b      	ldr	r3, [r7, #0]
 80101be:	441a      	add	r2, r3
 80101c0:	687b      	ldr	r3, [r7, #4]
 80101c2:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 80101c4:	687b      	ldr	r3, [r7, #4]
 80101c6:	895a      	ldrh	r2, [r3, #10]
 80101c8:	89fb      	ldrh	r3, [r7, #14]
 80101ca:	1ad3      	subs	r3, r2, r3
 80101cc:	b29a      	uxth	r2, r3
 80101ce:	687b      	ldr	r3, [r7, #4]
 80101d0:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 80101d2:	687b      	ldr	r3, [r7, #4]
 80101d4:	891a      	ldrh	r2, [r3, #8]
 80101d6:	89fb      	ldrh	r3, [r7, #14]
 80101d8:	1ad3      	subs	r3, r2, r3
 80101da:	b29a      	uxth	r2, r3
 80101dc:	687b      	ldr	r3, [r7, #4]
 80101de:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 80101e0:	2300      	movs	r3, #0
}
 80101e2:	4618      	mov	r0, r3
 80101e4:	3710      	adds	r7, #16
 80101e6:	46bd      	mov	sp, r7
 80101e8:	bd80      	pop	{r7, pc}
 80101ea:	bf00      	nop
 80101ec:	08021134 	.word	0x08021134
 80101f0:	08021298 	.word	0x08021298
 80101f4:	08021194 	.word	0x08021194
 80101f8:	080212a4 	.word	0x080212a4

080101fc <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 80101fc:	b580      	push	{r7, lr}
 80101fe:	b082      	sub	sp, #8
 8010200:	af00      	add	r7, sp, #0
 8010202:	6078      	str	r0, [r7, #4]
 8010204:	460b      	mov	r3, r1
 8010206:	807b      	strh	r3, [r7, #2]
 8010208:	4613      	mov	r3, r2
 801020a:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 801020c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010210:	2b00      	cmp	r3, #0
 8010212:	da08      	bge.n	8010226 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8010214:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010218:	425b      	negs	r3, r3
 801021a:	4619      	mov	r1, r3
 801021c:	6878      	ldr	r0, [r7, #4]
 801021e:	f7ff ff9b 	bl	8010158 <pbuf_remove_header>
 8010222:	4603      	mov	r3, r0
 8010224:	e007      	b.n	8010236 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8010226:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801022a:	787a      	ldrb	r2, [r7, #1]
 801022c:	4619      	mov	r1, r3
 801022e:	6878      	ldr	r0, [r7, #4]
 8010230:	f7ff ff1a 	bl	8010068 <pbuf_add_header_impl>
 8010234:	4603      	mov	r3, r0
  }
}
 8010236:	4618      	mov	r0, r3
 8010238:	3708      	adds	r7, #8
 801023a:	46bd      	mov	sp, r7
 801023c:	bd80      	pop	{r7, pc}

0801023e <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 801023e:	b580      	push	{r7, lr}
 8010240:	b082      	sub	sp, #8
 8010242:	af00      	add	r7, sp, #0
 8010244:	6078      	str	r0, [r7, #4]
 8010246:	460b      	mov	r3, r1
 8010248:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 801024a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801024e:	2201      	movs	r2, #1
 8010250:	4619      	mov	r1, r3
 8010252:	6878      	ldr	r0, [r7, #4]
 8010254:	f7ff ffd2 	bl	80101fc <pbuf_header_impl>
 8010258:	4603      	mov	r3, r0
}
 801025a:	4618      	mov	r0, r3
 801025c:	3708      	adds	r7, #8
 801025e:	46bd      	mov	sp, r7
 8010260:	bd80      	pop	{r7, pc}
	...

08010264 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8010264:	b580      	push	{r7, lr}
 8010266:	b086      	sub	sp, #24
 8010268:	af00      	add	r7, sp, #0
 801026a:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 801026c:	687b      	ldr	r3, [r7, #4]
 801026e:	2b00      	cmp	r3, #0
 8010270:	d10b      	bne.n	801028a <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8010272:	687b      	ldr	r3, [r7, #4]
 8010274:	2b00      	cmp	r3, #0
 8010276:	d106      	bne.n	8010286 <pbuf_free+0x22>
 8010278:	4b38      	ldr	r3, [pc, #224]	; (801035c <pbuf_free+0xf8>)
 801027a:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 801027e:	4938      	ldr	r1, [pc, #224]	; (8010360 <pbuf_free+0xfc>)
 8010280:	4838      	ldr	r0, [pc, #224]	; (8010364 <pbuf_free+0x100>)
 8010282:	f00b f86d 	bl	801b360 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8010286:	2300      	movs	r3, #0
 8010288:	e063      	b.n	8010352 <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 801028a:	2300      	movs	r3, #0
 801028c:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 801028e:	e05c      	b.n	801034a <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8010290:	687b      	ldr	r3, [r7, #4]
 8010292:	7b9b      	ldrb	r3, [r3, #14]
 8010294:	2b00      	cmp	r3, #0
 8010296:	d106      	bne.n	80102a6 <pbuf_free+0x42>
 8010298:	4b30      	ldr	r3, [pc, #192]	; (801035c <pbuf_free+0xf8>)
 801029a:	f240 22f1 	movw	r2, #753	; 0x2f1
 801029e:	4932      	ldr	r1, [pc, #200]	; (8010368 <pbuf_free+0x104>)
 80102a0:	4830      	ldr	r0, [pc, #192]	; (8010364 <pbuf_free+0x100>)
 80102a2:	f00b f85d 	bl	801b360 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 80102a6:	687b      	ldr	r3, [r7, #4]
 80102a8:	7b9b      	ldrb	r3, [r3, #14]
 80102aa:	3b01      	subs	r3, #1
 80102ac:	b2da      	uxtb	r2, r3
 80102ae:	687b      	ldr	r3, [r7, #4]
 80102b0:	739a      	strb	r2, [r3, #14]
 80102b2:	687b      	ldr	r3, [r7, #4]
 80102b4:	7b9b      	ldrb	r3, [r3, #14]
 80102b6:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 80102b8:	7dbb      	ldrb	r3, [r7, #22]
 80102ba:	2b00      	cmp	r3, #0
 80102bc:	d143      	bne.n	8010346 <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 80102be:	687b      	ldr	r3, [r7, #4]
 80102c0:	681b      	ldr	r3, [r3, #0]
 80102c2:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 80102c4:	687b      	ldr	r3, [r7, #4]
 80102c6:	7b1b      	ldrb	r3, [r3, #12]
 80102c8:	f003 030f 	and.w	r3, r3, #15
 80102cc:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 80102ce:	687b      	ldr	r3, [r7, #4]
 80102d0:	7b5b      	ldrb	r3, [r3, #13]
 80102d2:	f003 0302 	and.w	r3, r3, #2
 80102d6:	2b00      	cmp	r3, #0
 80102d8:	d011      	beq.n	80102fe <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 80102da:	687b      	ldr	r3, [r7, #4]
 80102dc:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 80102de:	68bb      	ldr	r3, [r7, #8]
 80102e0:	691b      	ldr	r3, [r3, #16]
 80102e2:	2b00      	cmp	r3, #0
 80102e4:	d106      	bne.n	80102f4 <pbuf_free+0x90>
 80102e6:	4b1d      	ldr	r3, [pc, #116]	; (801035c <pbuf_free+0xf8>)
 80102e8:	f240 22ff 	movw	r2, #767	; 0x2ff
 80102ec:	491f      	ldr	r1, [pc, #124]	; (801036c <pbuf_free+0x108>)
 80102ee:	481d      	ldr	r0, [pc, #116]	; (8010364 <pbuf_free+0x100>)
 80102f0:	f00b f836 	bl	801b360 <iprintf>
        pc->custom_free_function(p);
 80102f4:	68bb      	ldr	r3, [r7, #8]
 80102f6:	691b      	ldr	r3, [r3, #16]
 80102f8:	6878      	ldr	r0, [r7, #4]
 80102fa:	4798      	blx	r3
 80102fc:	e01d      	b.n	801033a <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 80102fe:	7bfb      	ldrb	r3, [r7, #15]
 8010300:	2b02      	cmp	r3, #2
 8010302:	d104      	bne.n	801030e <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 8010304:	6879      	ldr	r1, [r7, #4]
 8010306:	2008      	movs	r0, #8
 8010308:	f7ff f9b2 	bl	800f670 <memp_free>
 801030c:	e015      	b.n	801033a <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 801030e:	7bfb      	ldrb	r3, [r7, #15]
 8010310:	2b01      	cmp	r3, #1
 8010312:	d104      	bne.n	801031e <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 8010314:	6879      	ldr	r1, [r7, #4]
 8010316:	2007      	movs	r0, #7
 8010318:	f7ff f9aa 	bl	800f670 <memp_free>
 801031c:	e00d      	b.n	801033a <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 801031e:	7bfb      	ldrb	r3, [r7, #15]
 8010320:	2b00      	cmp	r3, #0
 8010322:	d103      	bne.n	801032c <pbuf_free+0xc8>
          mem_free(p);
 8010324:	6878      	ldr	r0, [r7, #4]
 8010326:	f7fe fe83 	bl	800f030 <mem_free>
 801032a:	e006      	b.n	801033a <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 801032c:	4b0b      	ldr	r3, [pc, #44]	; (801035c <pbuf_free+0xf8>)
 801032e:	f240 320f 	movw	r2, #783	; 0x30f
 8010332:	490f      	ldr	r1, [pc, #60]	; (8010370 <pbuf_free+0x10c>)
 8010334:	480b      	ldr	r0, [pc, #44]	; (8010364 <pbuf_free+0x100>)
 8010336:	f00b f813 	bl	801b360 <iprintf>
        }
      }
      count++;
 801033a:	7dfb      	ldrb	r3, [r7, #23]
 801033c:	3301      	adds	r3, #1
 801033e:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8010340:	693b      	ldr	r3, [r7, #16]
 8010342:	607b      	str	r3, [r7, #4]
 8010344:	e001      	b.n	801034a <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8010346:	2300      	movs	r3, #0
 8010348:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 801034a:	687b      	ldr	r3, [r7, #4]
 801034c:	2b00      	cmp	r3, #0
 801034e:	d19f      	bne.n	8010290 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8010350:	7dfb      	ldrb	r3, [r7, #23]
}
 8010352:	4618      	mov	r0, r3
 8010354:	3718      	adds	r7, #24
 8010356:	46bd      	mov	sp, r7
 8010358:	bd80      	pop	{r7, pc}
 801035a:	bf00      	nop
 801035c:	08021134 	.word	0x08021134
 8010360:	08021298 	.word	0x08021298
 8010364:	08021194 	.word	0x08021194
 8010368:	080212c4 	.word	0x080212c4
 801036c:	080212dc 	.word	0x080212dc
 8010370:	08021300 	.word	0x08021300

08010374 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8010374:	b480      	push	{r7}
 8010376:	b085      	sub	sp, #20
 8010378:	af00      	add	r7, sp, #0
 801037a:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 801037c:	2300      	movs	r3, #0
 801037e:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8010380:	e005      	b.n	801038e <pbuf_clen+0x1a>
    ++len;
 8010382:	89fb      	ldrh	r3, [r7, #14]
 8010384:	3301      	adds	r3, #1
 8010386:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8010388:	687b      	ldr	r3, [r7, #4]
 801038a:	681b      	ldr	r3, [r3, #0]
 801038c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 801038e:	687b      	ldr	r3, [r7, #4]
 8010390:	2b00      	cmp	r3, #0
 8010392:	d1f6      	bne.n	8010382 <pbuf_clen+0xe>
  }
  return len;
 8010394:	89fb      	ldrh	r3, [r7, #14]
}
 8010396:	4618      	mov	r0, r3
 8010398:	3714      	adds	r7, #20
 801039a:	46bd      	mov	sp, r7
 801039c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103a0:	4770      	bx	lr
	...

080103a4 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 80103a4:	b580      	push	{r7, lr}
 80103a6:	b082      	sub	sp, #8
 80103a8:	af00      	add	r7, sp, #0
 80103aa:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 80103ac:	687b      	ldr	r3, [r7, #4]
 80103ae:	2b00      	cmp	r3, #0
 80103b0:	d010      	beq.n	80103d4 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 80103b2:	687b      	ldr	r3, [r7, #4]
 80103b4:	7b9b      	ldrb	r3, [r3, #14]
 80103b6:	3301      	adds	r3, #1
 80103b8:	b2da      	uxtb	r2, r3
 80103ba:	687b      	ldr	r3, [r7, #4]
 80103bc:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 80103be:	687b      	ldr	r3, [r7, #4]
 80103c0:	7b9b      	ldrb	r3, [r3, #14]
 80103c2:	2b00      	cmp	r3, #0
 80103c4:	d106      	bne.n	80103d4 <pbuf_ref+0x30>
 80103c6:	4b05      	ldr	r3, [pc, #20]	; (80103dc <pbuf_ref+0x38>)
 80103c8:	f240 3242 	movw	r2, #834	; 0x342
 80103cc:	4904      	ldr	r1, [pc, #16]	; (80103e0 <pbuf_ref+0x3c>)
 80103ce:	4805      	ldr	r0, [pc, #20]	; (80103e4 <pbuf_ref+0x40>)
 80103d0:	f00a ffc6 	bl	801b360 <iprintf>
  }
}
 80103d4:	bf00      	nop
 80103d6:	3708      	adds	r7, #8
 80103d8:	46bd      	mov	sp, r7
 80103da:	bd80      	pop	{r7, pc}
 80103dc:	08021134 	.word	0x08021134
 80103e0:	08021314 	.word	0x08021314
 80103e4:	08021194 	.word	0x08021194

080103e8 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 80103e8:	b580      	push	{r7, lr}
 80103ea:	b084      	sub	sp, #16
 80103ec:	af00      	add	r7, sp, #0
 80103ee:	6078      	str	r0, [r7, #4]
 80103f0:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 80103f2:	687b      	ldr	r3, [r7, #4]
 80103f4:	2b00      	cmp	r3, #0
 80103f6:	d002      	beq.n	80103fe <pbuf_cat+0x16>
 80103f8:	683b      	ldr	r3, [r7, #0]
 80103fa:	2b00      	cmp	r3, #0
 80103fc:	d107      	bne.n	801040e <pbuf_cat+0x26>
 80103fe:	4b20      	ldr	r3, [pc, #128]	; (8010480 <pbuf_cat+0x98>)
 8010400:	f240 3259 	movw	r2, #857	; 0x359
 8010404:	491f      	ldr	r1, [pc, #124]	; (8010484 <pbuf_cat+0x9c>)
 8010406:	4820      	ldr	r0, [pc, #128]	; (8010488 <pbuf_cat+0xa0>)
 8010408:	f00a ffaa 	bl	801b360 <iprintf>
 801040c:	e034      	b.n	8010478 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 801040e:	687b      	ldr	r3, [r7, #4]
 8010410:	60fb      	str	r3, [r7, #12]
 8010412:	e00a      	b.n	801042a <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8010414:	68fb      	ldr	r3, [r7, #12]
 8010416:	891a      	ldrh	r2, [r3, #8]
 8010418:	683b      	ldr	r3, [r7, #0]
 801041a:	891b      	ldrh	r3, [r3, #8]
 801041c:	4413      	add	r3, r2
 801041e:	b29a      	uxth	r2, r3
 8010420:	68fb      	ldr	r3, [r7, #12]
 8010422:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8010424:	68fb      	ldr	r3, [r7, #12]
 8010426:	681b      	ldr	r3, [r3, #0]
 8010428:	60fb      	str	r3, [r7, #12]
 801042a:	68fb      	ldr	r3, [r7, #12]
 801042c:	681b      	ldr	r3, [r3, #0]
 801042e:	2b00      	cmp	r3, #0
 8010430:	d1f0      	bne.n	8010414 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8010432:	68fb      	ldr	r3, [r7, #12]
 8010434:	891a      	ldrh	r2, [r3, #8]
 8010436:	68fb      	ldr	r3, [r7, #12]
 8010438:	895b      	ldrh	r3, [r3, #10]
 801043a:	429a      	cmp	r2, r3
 801043c:	d006      	beq.n	801044c <pbuf_cat+0x64>
 801043e:	4b10      	ldr	r3, [pc, #64]	; (8010480 <pbuf_cat+0x98>)
 8010440:	f240 3262 	movw	r2, #866	; 0x362
 8010444:	4911      	ldr	r1, [pc, #68]	; (801048c <pbuf_cat+0xa4>)
 8010446:	4810      	ldr	r0, [pc, #64]	; (8010488 <pbuf_cat+0xa0>)
 8010448:	f00a ff8a 	bl	801b360 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 801044c:	68fb      	ldr	r3, [r7, #12]
 801044e:	681b      	ldr	r3, [r3, #0]
 8010450:	2b00      	cmp	r3, #0
 8010452:	d006      	beq.n	8010462 <pbuf_cat+0x7a>
 8010454:	4b0a      	ldr	r3, [pc, #40]	; (8010480 <pbuf_cat+0x98>)
 8010456:	f240 3263 	movw	r2, #867	; 0x363
 801045a:	490d      	ldr	r1, [pc, #52]	; (8010490 <pbuf_cat+0xa8>)
 801045c:	480a      	ldr	r0, [pc, #40]	; (8010488 <pbuf_cat+0xa0>)
 801045e:	f00a ff7f 	bl	801b360 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8010462:	68fb      	ldr	r3, [r7, #12]
 8010464:	891a      	ldrh	r2, [r3, #8]
 8010466:	683b      	ldr	r3, [r7, #0]
 8010468:	891b      	ldrh	r3, [r3, #8]
 801046a:	4413      	add	r3, r2
 801046c:	b29a      	uxth	r2, r3
 801046e:	68fb      	ldr	r3, [r7, #12]
 8010470:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8010472:	68fb      	ldr	r3, [r7, #12]
 8010474:	683a      	ldr	r2, [r7, #0]
 8010476:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8010478:	3710      	adds	r7, #16
 801047a:	46bd      	mov	sp, r7
 801047c:	bd80      	pop	{r7, pc}
 801047e:	bf00      	nop
 8010480:	08021134 	.word	0x08021134
 8010484:	08021328 	.word	0x08021328
 8010488:	08021194 	.word	0x08021194
 801048c:	08021360 	.word	0x08021360
 8010490:	08021390 	.word	0x08021390

08010494 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8010494:	b580      	push	{r7, lr}
 8010496:	b082      	sub	sp, #8
 8010498:	af00      	add	r7, sp, #0
 801049a:	6078      	str	r0, [r7, #4]
 801049c:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 801049e:	6839      	ldr	r1, [r7, #0]
 80104a0:	6878      	ldr	r0, [r7, #4]
 80104a2:	f7ff ffa1 	bl	80103e8 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 80104a6:	6838      	ldr	r0, [r7, #0]
 80104a8:	f7ff ff7c 	bl	80103a4 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 80104ac:	bf00      	nop
 80104ae:	3708      	adds	r7, #8
 80104b0:	46bd      	mov	sp, r7
 80104b2:	bd80      	pop	{r7, pc}

080104b4 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 80104b4:	b580      	push	{r7, lr}
 80104b6:	b086      	sub	sp, #24
 80104b8:	af00      	add	r7, sp, #0
 80104ba:	6078      	str	r0, [r7, #4]
 80104bc:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 80104be:	2300      	movs	r3, #0
 80104c0:	617b      	str	r3, [r7, #20]
 80104c2:	2300      	movs	r3, #0
 80104c4:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 80104c6:	687b      	ldr	r3, [r7, #4]
 80104c8:	2b00      	cmp	r3, #0
 80104ca:	d008      	beq.n	80104de <pbuf_copy+0x2a>
 80104cc:	683b      	ldr	r3, [r7, #0]
 80104ce:	2b00      	cmp	r3, #0
 80104d0:	d005      	beq.n	80104de <pbuf_copy+0x2a>
 80104d2:	687b      	ldr	r3, [r7, #4]
 80104d4:	891a      	ldrh	r2, [r3, #8]
 80104d6:	683b      	ldr	r3, [r7, #0]
 80104d8:	891b      	ldrh	r3, [r3, #8]
 80104da:	429a      	cmp	r2, r3
 80104dc:	d209      	bcs.n	80104f2 <pbuf_copy+0x3e>
 80104de:	4b57      	ldr	r3, [pc, #348]	; (801063c <pbuf_copy+0x188>)
 80104e0:	f240 32c9 	movw	r2, #969	; 0x3c9
 80104e4:	4956      	ldr	r1, [pc, #344]	; (8010640 <pbuf_copy+0x18c>)
 80104e6:	4857      	ldr	r0, [pc, #348]	; (8010644 <pbuf_copy+0x190>)
 80104e8:	f00a ff3a 	bl	801b360 <iprintf>
 80104ec:	f06f 030f 	mvn.w	r3, #15
 80104f0:	e09f      	b.n	8010632 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 80104f2:	687b      	ldr	r3, [r7, #4]
 80104f4:	895b      	ldrh	r3, [r3, #10]
 80104f6:	461a      	mov	r2, r3
 80104f8:	697b      	ldr	r3, [r7, #20]
 80104fa:	1ad2      	subs	r2, r2, r3
 80104fc:	683b      	ldr	r3, [r7, #0]
 80104fe:	895b      	ldrh	r3, [r3, #10]
 8010500:	4619      	mov	r1, r3
 8010502:	693b      	ldr	r3, [r7, #16]
 8010504:	1acb      	subs	r3, r1, r3
 8010506:	429a      	cmp	r2, r3
 8010508:	d306      	bcc.n	8010518 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 801050a:	683b      	ldr	r3, [r7, #0]
 801050c:	895b      	ldrh	r3, [r3, #10]
 801050e:	461a      	mov	r2, r3
 8010510:	693b      	ldr	r3, [r7, #16]
 8010512:	1ad3      	subs	r3, r2, r3
 8010514:	60fb      	str	r3, [r7, #12]
 8010516:	e005      	b.n	8010524 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8010518:	687b      	ldr	r3, [r7, #4]
 801051a:	895b      	ldrh	r3, [r3, #10]
 801051c:	461a      	mov	r2, r3
 801051e:	697b      	ldr	r3, [r7, #20]
 8010520:	1ad3      	subs	r3, r2, r3
 8010522:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8010524:	687b      	ldr	r3, [r7, #4]
 8010526:	685a      	ldr	r2, [r3, #4]
 8010528:	697b      	ldr	r3, [r7, #20]
 801052a:	18d0      	adds	r0, r2, r3
 801052c:	683b      	ldr	r3, [r7, #0]
 801052e:	685a      	ldr	r2, [r3, #4]
 8010530:	693b      	ldr	r3, [r7, #16]
 8010532:	4413      	add	r3, r2
 8010534:	68fa      	ldr	r2, [r7, #12]
 8010536:	4619      	mov	r1, r3
 8010538:	f00a f9ce 	bl	801a8d8 <memcpy>
    offset_to += len;
 801053c:	697a      	ldr	r2, [r7, #20]
 801053e:	68fb      	ldr	r3, [r7, #12]
 8010540:	4413      	add	r3, r2
 8010542:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8010544:	693a      	ldr	r2, [r7, #16]
 8010546:	68fb      	ldr	r3, [r7, #12]
 8010548:	4413      	add	r3, r2
 801054a:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 801054c:	687b      	ldr	r3, [r7, #4]
 801054e:	895b      	ldrh	r3, [r3, #10]
 8010550:	461a      	mov	r2, r3
 8010552:	697b      	ldr	r3, [r7, #20]
 8010554:	4293      	cmp	r3, r2
 8010556:	d906      	bls.n	8010566 <pbuf_copy+0xb2>
 8010558:	4b38      	ldr	r3, [pc, #224]	; (801063c <pbuf_copy+0x188>)
 801055a:	f240 32d9 	movw	r2, #985	; 0x3d9
 801055e:	493a      	ldr	r1, [pc, #232]	; (8010648 <pbuf_copy+0x194>)
 8010560:	4838      	ldr	r0, [pc, #224]	; (8010644 <pbuf_copy+0x190>)
 8010562:	f00a fefd 	bl	801b360 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8010566:	683b      	ldr	r3, [r7, #0]
 8010568:	895b      	ldrh	r3, [r3, #10]
 801056a:	461a      	mov	r2, r3
 801056c:	693b      	ldr	r3, [r7, #16]
 801056e:	4293      	cmp	r3, r2
 8010570:	d906      	bls.n	8010580 <pbuf_copy+0xcc>
 8010572:	4b32      	ldr	r3, [pc, #200]	; (801063c <pbuf_copy+0x188>)
 8010574:	f240 32da 	movw	r2, #986	; 0x3da
 8010578:	4934      	ldr	r1, [pc, #208]	; (801064c <pbuf_copy+0x198>)
 801057a:	4832      	ldr	r0, [pc, #200]	; (8010644 <pbuf_copy+0x190>)
 801057c:	f00a fef0 	bl	801b360 <iprintf>
    if (offset_from >= p_from->len) {
 8010580:	683b      	ldr	r3, [r7, #0]
 8010582:	895b      	ldrh	r3, [r3, #10]
 8010584:	461a      	mov	r2, r3
 8010586:	693b      	ldr	r3, [r7, #16]
 8010588:	4293      	cmp	r3, r2
 801058a:	d304      	bcc.n	8010596 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 801058c:	2300      	movs	r3, #0
 801058e:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8010590:	683b      	ldr	r3, [r7, #0]
 8010592:	681b      	ldr	r3, [r3, #0]
 8010594:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8010596:	687b      	ldr	r3, [r7, #4]
 8010598:	895b      	ldrh	r3, [r3, #10]
 801059a:	461a      	mov	r2, r3
 801059c:	697b      	ldr	r3, [r7, #20]
 801059e:	4293      	cmp	r3, r2
 80105a0:	d114      	bne.n	80105cc <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 80105a2:	2300      	movs	r3, #0
 80105a4:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 80105a6:	687b      	ldr	r3, [r7, #4]
 80105a8:	681b      	ldr	r3, [r3, #0]
 80105aa:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 80105ac:	687b      	ldr	r3, [r7, #4]
 80105ae:	2b00      	cmp	r3, #0
 80105b0:	d10c      	bne.n	80105cc <pbuf_copy+0x118>
 80105b2:	683b      	ldr	r3, [r7, #0]
 80105b4:	2b00      	cmp	r3, #0
 80105b6:	d009      	beq.n	80105cc <pbuf_copy+0x118>
 80105b8:	4b20      	ldr	r3, [pc, #128]	; (801063c <pbuf_copy+0x188>)
 80105ba:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 80105be:	4924      	ldr	r1, [pc, #144]	; (8010650 <pbuf_copy+0x19c>)
 80105c0:	4820      	ldr	r0, [pc, #128]	; (8010644 <pbuf_copy+0x190>)
 80105c2:	f00a fecd 	bl	801b360 <iprintf>
 80105c6:	f06f 030f 	mvn.w	r3, #15
 80105ca:	e032      	b.n	8010632 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 80105cc:	683b      	ldr	r3, [r7, #0]
 80105ce:	2b00      	cmp	r3, #0
 80105d0:	d013      	beq.n	80105fa <pbuf_copy+0x146>
 80105d2:	683b      	ldr	r3, [r7, #0]
 80105d4:	895a      	ldrh	r2, [r3, #10]
 80105d6:	683b      	ldr	r3, [r7, #0]
 80105d8:	891b      	ldrh	r3, [r3, #8]
 80105da:	429a      	cmp	r2, r3
 80105dc:	d10d      	bne.n	80105fa <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80105de:	683b      	ldr	r3, [r7, #0]
 80105e0:	681b      	ldr	r3, [r3, #0]
 80105e2:	2b00      	cmp	r3, #0
 80105e4:	d009      	beq.n	80105fa <pbuf_copy+0x146>
 80105e6:	4b15      	ldr	r3, [pc, #84]	; (801063c <pbuf_copy+0x188>)
 80105e8:	f240 32e9 	movw	r2, #1001	; 0x3e9
 80105ec:	4919      	ldr	r1, [pc, #100]	; (8010654 <pbuf_copy+0x1a0>)
 80105ee:	4815      	ldr	r0, [pc, #84]	; (8010644 <pbuf_copy+0x190>)
 80105f0:	f00a feb6 	bl	801b360 <iprintf>
 80105f4:	f06f 0305 	mvn.w	r3, #5
 80105f8:	e01b      	b.n	8010632 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 80105fa:	687b      	ldr	r3, [r7, #4]
 80105fc:	2b00      	cmp	r3, #0
 80105fe:	d013      	beq.n	8010628 <pbuf_copy+0x174>
 8010600:	687b      	ldr	r3, [r7, #4]
 8010602:	895a      	ldrh	r2, [r3, #10]
 8010604:	687b      	ldr	r3, [r7, #4]
 8010606:	891b      	ldrh	r3, [r3, #8]
 8010608:	429a      	cmp	r2, r3
 801060a:	d10d      	bne.n	8010628 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 801060c:	687b      	ldr	r3, [r7, #4]
 801060e:	681b      	ldr	r3, [r3, #0]
 8010610:	2b00      	cmp	r3, #0
 8010612:	d009      	beq.n	8010628 <pbuf_copy+0x174>
 8010614:	4b09      	ldr	r3, [pc, #36]	; (801063c <pbuf_copy+0x188>)
 8010616:	f240 32ee 	movw	r2, #1006	; 0x3ee
 801061a:	490e      	ldr	r1, [pc, #56]	; (8010654 <pbuf_copy+0x1a0>)
 801061c:	4809      	ldr	r0, [pc, #36]	; (8010644 <pbuf_copy+0x190>)
 801061e:	f00a fe9f 	bl	801b360 <iprintf>
 8010622:	f06f 0305 	mvn.w	r3, #5
 8010626:	e004      	b.n	8010632 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8010628:	683b      	ldr	r3, [r7, #0]
 801062a:	2b00      	cmp	r3, #0
 801062c:	f47f af61 	bne.w	80104f2 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8010630:	2300      	movs	r3, #0
}
 8010632:	4618      	mov	r0, r3
 8010634:	3718      	adds	r7, #24
 8010636:	46bd      	mov	sp, r7
 8010638:	bd80      	pop	{r7, pc}
 801063a:	bf00      	nop
 801063c:	08021134 	.word	0x08021134
 8010640:	080213dc 	.word	0x080213dc
 8010644:	08021194 	.word	0x08021194
 8010648:	0802140c 	.word	0x0802140c
 801064c:	08021424 	.word	0x08021424
 8010650:	08021440 	.word	0x08021440
 8010654:	08021450 	.word	0x08021450

08010658 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8010658:	b580      	push	{r7, lr}
 801065a:	b088      	sub	sp, #32
 801065c:	af00      	add	r7, sp, #0
 801065e:	60f8      	str	r0, [r7, #12]
 8010660:	60b9      	str	r1, [r7, #8]
 8010662:	4611      	mov	r1, r2
 8010664:	461a      	mov	r2, r3
 8010666:	460b      	mov	r3, r1
 8010668:	80fb      	strh	r3, [r7, #6]
 801066a:	4613      	mov	r3, r2
 801066c:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 801066e:	2300      	movs	r3, #0
 8010670:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8010672:	2300      	movs	r3, #0
 8010674:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8010676:	68fb      	ldr	r3, [r7, #12]
 8010678:	2b00      	cmp	r3, #0
 801067a:	d108      	bne.n	801068e <pbuf_copy_partial+0x36>
 801067c:	4b2b      	ldr	r3, [pc, #172]	; (801072c <pbuf_copy_partial+0xd4>)
 801067e:	f240 420a 	movw	r2, #1034	; 0x40a
 8010682:	492b      	ldr	r1, [pc, #172]	; (8010730 <pbuf_copy_partial+0xd8>)
 8010684:	482b      	ldr	r0, [pc, #172]	; (8010734 <pbuf_copy_partial+0xdc>)
 8010686:	f00a fe6b 	bl	801b360 <iprintf>
 801068a:	2300      	movs	r3, #0
 801068c:	e04a      	b.n	8010724 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 801068e:	68bb      	ldr	r3, [r7, #8]
 8010690:	2b00      	cmp	r3, #0
 8010692:	d108      	bne.n	80106a6 <pbuf_copy_partial+0x4e>
 8010694:	4b25      	ldr	r3, [pc, #148]	; (801072c <pbuf_copy_partial+0xd4>)
 8010696:	f240 420b 	movw	r2, #1035	; 0x40b
 801069a:	4927      	ldr	r1, [pc, #156]	; (8010738 <pbuf_copy_partial+0xe0>)
 801069c:	4825      	ldr	r0, [pc, #148]	; (8010734 <pbuf_copy_partial+0xdc>)
 801069e:	f00a fe5f 	bl	801b360 <iprintf>
 80106a2:	2300      	movs	r3, #0
 80106a4:	e03e      	b.n	8010724 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80106a6:	68fb      	ldr	r3, [r7, #12]
 80106a8:	61fb      	str	r3, [r7, #28]
 80106aa:	e034      	b.n	8010716 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 80106ac:	88bb      	ldrh	r3, [r7, #4]
 80106ae:	2b00      	cmp	r3, #0
 80106b0:	d00a      	beq.n	80106c8 <pbuf_copy_partial+0x70>
 80106b2:	69fb      	ldr	r3, [r7, #28]
 80106b4:	895b      	ldrh	r3, [r3, #10]
 80106b6:	88ba      	ldrh	r2, [r7, #4]
 80106b8:	429a      	cmp	r2, r3
 80106ba:	d305      	bcc.n	80106c8 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 80106bc:	69fb      	ldr	r3, [r7, #28]
 80106be:	895b      	ldrh	r3, [r3, #10]
 80106c0:	88ba      	ldrh	r2, [r7, #4]
 80106c2:	1ad3      	subs	r3, r2, r3
 80106c4:	80bb      	strh	r3, [r7, #4]
 80106c6:	e023      	b.n	8010710 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 80106c8:	69fb      	ldr	r3, [r7, #28]
 80106ca:	895a      	ldrh	r2, [r3, #10]
 80106cc:	88bb      	ldrh	r3, [r7, #4]
 80106ce:	1ad3      	subs	r3, r2, r3
 80106d0:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 80106d2:	8b3a      	ldrh	r2, [r7, #24]
 80106d4:	88fb      	ldrh	r3, [r7, #6]
 80106d6:	429a      	cmp	r2, r3
 80106d8:	d901      	bls.n	80106de <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 80106da:	88fb      	ldrh	r3, [r7, #6]
 80106dc:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 80106de:	8b7b      	ldrh	r3, [r7, #26]
 80106e0:	68ba      	ldr	r2, [r7, #8]
 80106e2:	18d0      	adds	r0, r2, r3
 80106e4:	69fb      	ldr	r3, [r7, #28]
 80106e6:	685a      	ldr	r2, [r3, #4]
 80106e8:	88bb      	ldrh	r3, [r7, #4]
 80106ea:	4413      	add	r3, r2
 80106ec:	8b3a      	ldrh	r2, [r7, #24]
 80106ee:	4619      	mov	r1, r3
 80106f0:	f00a f8f2 	bl	801a8d8 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 80106f4:	8afa      	ldrh	r2, [r7, #22]
 80106f6:	8b3b      	ldrh	r3, [r7, #24]
 80106f8:	4413      	add	r3, r2
 80106fa:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 80106fc:	8b7a      	ldrh	r2, [r7, #26]
 80106fe:	8b3b      	ldrh	r3, [r7, #24]
 8010700:	4413      	add	r3, r2
 8010702:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8010704:	88fa      	ldrh	r2, [r7, #6]
 8010706:	8b3b      	ldrh	r3, [r7, #24]
 8010708:	1ad3      	subs	r3, r2, r3
 801070a:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 801070c:	2300      	movs	r3, #0
 801070e:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8010710:	69fb      	ldr	r3, [r7, #28]
 8010712:	681b      	ldr	r3, [r3, #0]
 8010714:	61fb      	str	r3, [r7, #28]
 8010716:	88fb      	ldrh	r3, [r7, #6]
 8010718:	2b00      	cmp	r3, #0
 801071a:	d002      	beq.n	8010722 <pbuf_copy_partial+0xca>
 801071c:	69fb      	ldr	r3, [r7, #28]
 801071e:	2b00      	cmp	r3, #0
 8010720:	d1c4      	bne.n	80106ac <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8010722:	8afb      	ldrh	r3, [r7, #22]
}
 8010724:	4618      	mov	r0, r3
 8010726:	3720      	adds	r7, #32
 8010728:	46bd      	mov	sp, r7
 801072a:	bd80      	pop	{r7, pc}
 801072c:	08021134 	.word	0x08021134
 8010730:	0802147c 	.word	0x0802147c
 8010734:	08021194 	.word	0x08021194
 8010738:	0802149c 	.word	0x0802149c

0801073c <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 801073c:	b580      	push	{r7, lr}
 801073e:	b084      	sub	sp, #16
 8010740:	af00      	add	r7, sp, #0
 8010742:	4603      	mov	r3, r0
 8010744:	603a      	str	r2, [r7, #0]
 8010746:	71fb      	strb	r3, [r7, #7]
 8010748:	460b      	mov	r3, r1
 801074a:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 801074c:	683b      	ldr	r3, [r7, #0]
 801074e:	8919      	ldrh	r1, [r3, #8]
 8010750:	88ba      	ldrh	r2, [r7, #4]
 8010752:	79fb      	ldrb	r3, [r7, #7]
 8010754:	4618      	mov	r0, r3
 8010756:	f7ff faa1 	bl	800fc9c <pbuf_alloc>
 801075a:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 801075c:	68fb      	ldr	r3, [r7, #12]
 801075e:	2b00      	cmp	r3, #0
 8010760:	d101      	bne.n	8010766 <pbuf_clone+0x2a>
    return NULL;
 8010762:	2300      	movs	r3, #0
 8010764:	e011      	b.n	801078a <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8010766:	6839      	ldr	r1, [r7, #0]
 8010768:	68f8      	ldr	r0, [r7, #12]
 801076a:	f7ff fea3 	bl	80104b4 <pbuf_copy>
 801076e:	4603      	mov	r3, r0
 8010770:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8010772:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8010776:	2b00      	cmp	r3, #0
 8010778:	d006      	beq.n	8010788 <pbuf_clone+0x4c>
 801077a:	4b06      	ldr	r3, [pc, #24]	; (8010794 <pbuf_clone+0x58>)
 801077c:	f240 5224 	movw	r2, #1316	; 0x524
 8010780:	4905      	ldr	r1, [pc, #20]	; (8010798 <pbuf_clone+0x5c>)
 8010782:	4806      	ldr	r0, [pc, #24]	; (801079c <pbuf_clone+0x60>)
 8010784:	f00a fdec 	bl	801b360 <iprintf>
  return q;
 8010788:	68fb      	ldr	r3, [r7, #12]
}
 801078a:	4618      	mov	r0, r3
 801078c:	3710      	adds	r7, #16
 801078e:	46bd      	mov	sp, r7
 8010790:	bd80      	pop	{r7, pc}
 8010792:	bf00      	nop
 8010794:	08021134 	.word	0x08021134
 8010798:	080215a8 	.word	0x080215a8
 801079c:	08021194 	.word	0x08021194

080107a0 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 80107a0:	b580      	push	{r7, lr}
 80107a2:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80107a4:	f00a fdf4 	bl	801b390 <rand>
 80107a8:	4603      	mov	r3, r0
 80107aa:	b29b      	uxth	r3, r3
 80107ac:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80107b0:	b29b      	uxth	r3, r3
 80107b2:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80107b6:	b29a      	uxth	r2, r3
 80107b8:	4b01      	ldr	r3, [pc, #4]	; (80107c0 <tcp_init+0x20>)
 80107ba:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80107bc:	bf00      	nop
 80107be:	bd80      	pop	{r7, pc}
 80107c0:	20000076 	.word	0x20000076

080107c4 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 80107c4:	b580      	push	{r7, lr}
 80107c6:	b082      	sub	sp, #8
 80107c8:	af00      	add	r7, sp, #0
 80107ca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 80107cc:	687b      	ldr	r3, [r7, #4]
 80107ce:	7d1b      	ldrb	r3, [r3, #20]
 80107d0:	2b01      	cmp	r3, #1
 80107d2:	d105      	bne.n	80107e0 <tcp_free+0x1c>
 80107d4:	4b06      	ldr	r3, [pc, #24]	; (80107f0 <tcp_free+0x2c>)
 80107d6:	22d4      	movs	r2, #212	; 0xd4
 80107d8:	4906      	ldr	r1, [pc, #24]	; (80107f4 <tcp_free+0x30>)
 80107da:	4807      	ldr	r0, [pc, #28]	; (80107f8 <tcp_free+0x34>)
 80107dc:	f00a fdc0 	bl	801b360 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 80107e0:	6879      	ldr	r1, [r7, #4]
 80107e2:	2001      	movs	r0, #1
 80107e4:	f7fe ff44 	bl	800f670 <memp_free>
}
 80107e8:	bf00      	nop
 80107ea:	3708      	adds	r7, #8
 80107ec:	46bd      	mov	sp, r7
 80107ee:	bd80      	pop	{r7, pc}
 80107f0:	08021634 	.word	0x08021634
 80107f4:	08021664 	.word	0x08021664
 80107f8:	08021678 	.word	0x08021678

080107fc <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 80107fc:	b580      	push	{r7, lr}
 80107fe:	b082      	sub	sp, #8
 8010800:	af00      	add	r7, sp, #0
 8010802:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8010804:	687b      	ldr	r3, [r7, #4]
 8010806:	7d1b      	ldrb	r3, [r3, #20]
 8010808:	2b01      	cmp	r3, #1
 801080a:	d105      	bne.n	8010818 <tcp_free_listen+0x1c>
 801080c:	4b06      	ldr	r3, [pc, #24]	; (8010828 <tcp_free_listen+0x2c>)
 801080e:	22df      	movs	r2, #223	; 0xdf
 8010810:	4906      	ldr	r1, [pc, #24]	; (801082c <tcp_free_listen+0x30>)
 8010812:	4807      	ldr	r0, [pc, #28]	; (8010830 <tcp_free_listen+0x34>)
 8010814:	f00a fda4 	bl	801b360 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8010818:	6879      	ldr	r1, [r7, #4]
 801081a:	2002      	movs	r0, #2
 801081c:	f7fe ff28 	bl	800f670 <memp_free>
}
 8010820:	bf00      	nop
 8010822:	3708      	adds	r7, #8
 8010824:	46bd      	mov	sp, r7
 8010826:	bd80      	pop	{r7, pc}
 8010828:	08021634 	.word	0x08021634
 801082c:	080216a0 	.word	0x080216a0
 8010830:	08021678 	.word	0x08021678

08010834 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8010834:	b580      	push	{r7, lr}
 8010836:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8010838:	f000 fea2 	bl	8011580 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 801083c:	4b07      	ldr	r3, [pc, #28]	; (801085c <tcp_tmr+0x28>)
 801083e:	781b      	ldrb	r3, [r3, #0]
 8010840:	3301      	adds	r3, #1
 8010842:	b2da      	uxtb	r2, r3
 8010844:	4b05      	ldr	r3, [pc, #20]	; (801085c <tcp_tmr+0x28>)
 8010846:	701a      	strb	r2, [r3, #0]
 8010848:	4b04      	ldr	r3, [pc, #16]	; (801085c <tcp_tmr+0x28>)
 801084a:	781b      	ldrb	r3, [r3, #0]
 801084c:	f003 0301 	and.w	r3, r3, #1
 8010850:	2b00      	cmp	r3, #0
 8010852:	d001      	beq.n	8010858 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8010854:	f000 fb54 	bl	8010f00 <tcp_slowtmr>
  }
}
 8010858:	bf00      	nop
 801085a:	bd80      	pop	{r7, pc}
 801085c:	200004dd 	.word	0x200004dd

08010860 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8010860:	b580      	push	{r7, lr}
 8010862:	b084      	sub	sp, #16
 8010864:	af00      	add	r7, sp, #0
 8010866:	6078      	str	r0, [r7, #4]
 8010868:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 801086a:	683b      	ldr	r3, [r7, #0]
 801086c:	2b00      	cmp	r3, #0
 801086e:	d105      	bne.n	801087c <tcp_remove_listener+0x1c>
 8010870:	4b0d      	ldr	r3, [pc, #52]	; (80108a8 <tcp_remove_listener+0x48>)
 8010872:	22ff      	movs	r2, #255	; 0xff
 8010874:	490d      	ldr	r1, [pc, #52]	; (80108ac <tcp_remove_listener+0x4c>)
 8010876:	480e      	ldr	r0, [pc, #56]	; (80108b0 <tcp_remove_listener+0x50>)
 8010878:	f00a fd72 	bl	801b360 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 801087c:	687b      	ldr	r3, [r7, #4]
 801087e:	60fb      	str	r3, [r7, #12]
 8010880:	e00a      	b.n	8010898 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8010882:	68fb      	ldr	r3, [r7, #12]
 8010884:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010886:	683a      	ldr	r2, [r7, #0]
 8010888:	429a      	cmp	r2, r3
 801088a:	d102      	bne.n	8010892 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 801088c:	68fb      	ldr	r3, [r7, #12]
 801088e:	2200      	movs	r2, #0
 8010890:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8010892:	68fb      	ldr	r3, [r7, #12]
 8010894:	68db      	ldr	r3, [r3, #12]
 8010896:	60fb      	str	r3, [r7, #12]
 8010898:	68fb      	ldr	r3, [r7, #12]
 801089a:	2b00      	cmp	r3, #0
 801089c:	d1f1      	bne.n	8010882 <tcp_remove_listener+0x22>
    }
  }
}
 801089e:	bf00      	nop
 80108a0:	bf00      	nop
 80108a2:	3710      	adds	r7, #16
 80108a4:	46bd      	mov	sp, r7
 80108a6:	bd80      	pop	{r7, pc}
 80108a8:	08021634 	.word	0x08021634
 80108ac:	080216bc 	.word	0x080216bc
 80108b0:	08021678 	.word	0x08021678

080108b4 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 80108b4:	b580      	push	{r7, lr}
 80108b6:	b084      	sub	sp, #16
 80108b8:	af00      	add	r7, sp, #0
 80108ba:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80108bc:	687b      	ldr	r3, [r7, #4]
 80108be:	2b00      	cmp	r3, #0
 80108c0:	d106      	bne.n	80108d0 <tcp_listen_closed+0x1c>
 80108c2:	4b14      	ldr	r3, [pc, #80]	; (8010914 <tcp_listen_closed+0x60>)
 80108c4:	f240 1211 	movw	r2, #273	; 0x111
 80108c8:	4913      	ldr	r1, [pc, #76]	; (8010918 <tcp_listen_closed+0x64>)
 80108ca:	4814      	ldr	r0, [pc, #80]	; (801091c <tcp_listen_closed+0x68>)
 80108cc:	f00a fd48 	bl	801b360 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 80108d0:	687b      	ldr	r3, [r7, #4]
 80108d2:	7d1b      	ldrb	r3, [r3, #20]
 80108d4:	2b01      	cmp	r3, #1
 80108d6:	d006      	beq.n	80108e6 <tcp_listen_closed+0x32>
 80108d8:	4b0e      	ldr	r3, [pc, #56]	; (8010914 <tcp_listen_closed+0x60>)
 80108da:	f44f 7289 	mov.w	r2, #274	; 0x112
 80108de:	4910      	ldr	r1, [pc, #64]	; (8010920 <tcp_listen_closed+0x6c>)
 80108e0:	480e      	ldr	r0, [pc, #56]	; (801091c <tcp_listen_closed+0x68>)
 80108e2:	f00a fd3d 	bl	801b360 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80108e6:	2301      	movs	r3, #1
 80108e8:	60fb      	str	r3, [r7, #12]
 80108ea:	e00b      	b.n	8010904 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 80108ec:	4a0d      	ldr	r2, [pc, #52]	; (8010924 <tcp_listen_closed+0x70>)
 80108ee:	68fb      	ldr	r3, [r7, #12]
 80108f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80108f4:	681b      	ldr	r3, [r3, #0]
 80108f6:	6879      	ldr	r1, [r7, #4]
 80108f8:	4618      	mov	r0, r3
 80108fa:	f7ff ffb1 	bl	8010860 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80108fe:	68fb      	ldr	r3, [r7, #12]
 8010900:	3301      	adds	r3, #1
 8010902:	60fb      	str	r3, [r7, #12]
 8010904:	68fb      	ldr	r3, [r7, #12]
 8010906:	2b03      	cmp	r3, #3
 8010908:	d9f0      	bls.n	80108ec <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 801090a:	bf00      	nop
 801090c:	bf00      	nop
 801090e:	3710      	adds	r7, #16
 8010910:	46bd      	mov	sp, r7
 8010912:	bd80      	pop	{r7, pc}
 8010914:	08021634 	.word	0x08021634
 8010918:	080216e4 	.word	0x080216e4
 801091c:	08021678 	.word	0x08021678
 8010920:	080216f0 	.word	0x080216f0
 8010924:	08023f08 	.word	0x08023f08

08010928 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8010928:	b5b0      	push	{r4, r5, r7, lr}
 801092a:	b088      	sub	sp, #32
 801092c:	af04      	add	r7, sp, #16
 801092e:	6078      	str	r0, [r7, #4]
 8010930:	460b      	mov	r3, r1
 8010932:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8010934:	687b      	ldr	r3, [r7, #4]
 8010936:	2b00      	cmp	r3, #0
 8010938:	d106      	bne.n	8010948 <tcp_close_shutdown+0x20>
 801093a:	4b63      	ldr	r3, [pc, #396]	; (8010ac8 <tcp_close_shutdown+0x1a0>)
 801093c:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8010940:	4962      	ldr	r1, [pc, #392]	; (8010acc <tcp_close_shutdown+0x1a4>)
 8010942:	4863      	ldr	r0, [pc, #396]	; (8010ad0 <tcp_close_shutdown+0x1a8>)
 8010944:	f00a fd0c 	bl	801b360 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8010948:	78fb      	ldrb	r3, [r7, #3]
 801094a:	2b00      	cmp	r3, #0
 801094c:	d066      	beq.n	8010a1c <tcp_close_shutdown+0xf4>
 801094e:	687b      	ldr	r3, [r7, #4]
 8010950:	7d1b      	ldrb	r3, [r3, #20]
 8010952:	2b04      	cmp	r3, #4
 8010954:	d003      	beq.n	801095e <tcp_close_shutdown+0x36>
 8010956:	687b      	ldr	r3, [r7, #4]
 8010958:	7d1b      	ldrb	r3, [r3, #20]
 801095a:	2b07      	cmp	r3, #7
 801095c:	d15e      	bne.n	8010a1c <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 801095e:	687b      	ldr	r3, [r7, #4]
 8010960:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010962:	2b00      	cmp	r3, #0
 8010964:	d104      	bne.n	8010970 <tcp_close_shutdown+0x48>
 8010966:	687b      	ldr	r3, [r7, #4]
 8010968:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801096a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801096e:	d055      	beq.n	8010a1c <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8010970:	687b      	ldr	r3, [r7, #4]
 8010972:	8b5b      	ldrh	r3, [r3, #26]
 8010974:	f003 0310 	and.w	r3, r3, #16
 8010978:	2b00      	cmp	r3, #0
 801097a:	d106      	bne.n	801098a <tcp_close_shutdown+0x62>
 801097c:	4b52      	ldr	r3, [pc, #328]	; (8010ac8 <tcp_close_shutdown+0x1a0>)
 801097e:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8010982:	4954      	ldr	r1, [pc, #336]	; (8010ad4 <tcp_close_shutdown+0x1ac>)
 8010984:	4852      	ldr	r0, [pc, #328]	; (8010ad0 <tcp_close_shutdown+0x1a8>)
 8010986:	f00a fceb 	bl	801b360 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 801098a:	687b      	ldr	r3, [r7, #4]
 801098c:	6d18      	ldr	r0, [r3, #80]	; 0x50
 801098e:	687b      	ldr	r3, [r7, #4]
 8010990:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8010992:	687d      	ldr	r5, [r7, #4]
 8010994:	687b      	ldr	r3, [r7, #4]
 8010996:	3304      	adds	r3, #4
 8010998:	687a      	ldr	r2, [r7, #4]
 801099a:	8ad2      	ldrh	r2, [r2, #22]
 801099c:	6879      	ldr	r1, [r7, #4]
 801099e:	8b09      	ldrh	r1, [r1, #24]
 80109a0:	9102      	str	r1, [sp, #8]
 80109a2:	9201      	str	r2, [sp, #4]
 80109a4:	9300      	str	r3, [sp, #0]
 80109a6:	462b      	mov	r3, r5
 80109a8:	4622      	mov	r2, r4
 80109aa:	4601      	mov	r1, r0
 80109ac:	6878      	ldr	r0, [r7, #4]
 80109ae:	f004 fe8d 	bl	80156cc <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 80109b2:	6878      	ldr	r0, [r7, #4]
 80109b4:	f001 f8c6 	bl	8011b44 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 80109b8:	4b47      	ldr	r3, [pc, #284]	; (8010ad8 <tcp_close_shutdown+0x1b0>)
 80109ba:	681b      	ldr	r3, [r3, #0]
 80109bc:	687a      	ldr	r2, [r7, #4]
 80109be:	429a      	cmp	r2, r3
 80109c0:	d105      	bne.n	80109ce <tcp_close_shutdown+0xa6>
 80109c2:	4b45      	ldr	r3, [pc, #276]	; (8010ad8 <tcp_close_shutdown+0x1b0>)
 80109c4:	681b      	ldr	r3, [r3, #0]
 80109c6:	68db      	ldr	r3, [r3, #12]
 80109c8:	4a43      	ldr	r2, [pc, #268]	; (8010ad8 <tcp_close_shutdown+0x1b0>)
 80109ca:	6013      	str	r3, [r2, #0]
 80109cc:	e013      	b.n	80109f6 <tcp_close_shutdown+0xce>
 80109ce:	4b42      	ldr	r3, [pc, #264]	; (8010ad8 <tcp_close_shutdown+0x1b0>)
 80109d0:	681b      	ldr	r3, [r3, #0]
 80109d2:	60fb      	str	r3, [r7, #12]
 80109d4:	e00c      	b.n	80109f0 <tcp_close_shutdown+0xc8>
 80109d6:	68fb      	ldr	r3, [r7, #12]
 80109d8:	68db      	ldr	r3, [r3, #12]
 80109da:	687a      	ldr	r2, [r7, #4]
 80109dc:	429a      	cmp	r2, r3
 80109de:	d104      	bne.n	80109ea <tcp_close_shutdown+0xc2>
 80109e0:	687b      	ldr	r3, [r7, #4]
 80109e2:	68da      	ldr	r2, [r3, #12]
 80109e4:	68fb      	ldr	r3, [r7, #12]
 80109e6:	60da      	str	r2, [r3, #12]
 80109e8:	e005      	b.n	80109f6 <tcp_close_shutdown+0xce>
 80109ea:	68fb      	ldr	r3, [r7, #12]
 80109ec:	68db      	ldr	r3, [r3, #12]
 80109ee:	60fb      	str	r3, [r7, #12]
 80109f0:	68fb      	ldr	r3, [r7, #12]
 80109f2:	2b00      	cmp	r3, #0
 80109f4:	d1ef      	bne.n	80109d6 <tcp_close_shutdown+0xae>
 80109f6:	687b      	ldr	r3, [r7, #4]
 80109f8:	2200      	movs	r2, #0
 80109fa:	60da      	str	r2, [r3, #12]
 80109fc:	4b37      	ldr	r3, [pc, #220]	; (8010adc <tcp_close_shutdown+0x1b4>)
 80109fe:	2201      	movs	r2, #1
 8010a00:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8010a02:	4b37      	ldr	r3, [pc, #220]	; (8010ae0 <tcp_close_shutdown+0x1b8>)
 8010a04:	681b      	ldr	r3, [r3, #0]
 8010a06:	687a      	ldr	r2, [r7, #4]
 8010a08:	429a      	cmp	r2, r3
 8010a0a:	d102      	bne.n	8010a12 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8010a0c:	f003 fd5a 	bl	80144c4 <tcp_trigger_input_pcb_close>
 8010a10:	e002      	b.n	8010a18 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8010a12:	6878      	ldr	r0, [r7, #4]
 8010a14:	f7ff fed6 	bl	80107c4 <tcp_free>
      }
      return ERR_OK;
 8010a18:	2300      	movs	r3, #0
 8010a1a:	e050      	b.n	8010abe <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8010a1c:	687b      	ldr	r3, [r7, #4]
 8010a1e:	7d1b      	ldrb	r3, [r3, #20]
 8010a20:	2b02      	cmp	r3, #2
 8010a22:	d03b      	beq.n	8010a9c <tcp_close_shutdown+0x174>
 8010a24:	2b02      	cmp	r3, #2
 8010a26:	dc44      	bgt.n	8010ab2 <tcp_close_shutdown+0x18a>
 8010a28:	2b00      	cmp	r3, #0
 8010a2a:	d002      	beq.n	8010a32 <tcp_close_shutdown+0x10a>
 8010a2c:	2b01      	cmp	r3, #1
 8010a2e:	d02a      	beq.n	8010a86 <tcp_close_shutdown+0x15e>
 8010a30:	e03f      	b.n	8010ab2 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8010a32:	687b      	ldr	r3, [r7, #4]
 8010a34:	8adb      	ldrh	r3, [r3, #22]
 8010a36:	2b00      	cmp	r3, #0
 8010a38:	d021      	beq.n	8010a7e <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8010a3a:	4b2a      	ldr	r3, [pc, #168]	; (8010ae4 <tcp_close_shutdown+0x1bc>)
 8010a3c:	681b      	ldr	r3, [r3, #0]
 8010a3e:	687a      	ldr	r2, [r7, #4]
 8010a40:	429a      	cmp	r2, r3
 8010a42:	d105      	bne.n	8010a50 <tcp_close_shutdown+0x128>
 8010a44:	4b27      	ldr	r3, [pc, #156]	; (8010ae4 <tcp_close_shutdown+0x1bc>)
 8010a46:	681b      	ldr	r3, [r3, #0]
 8010a48:	68db      	ldr	r3, [r3, #12]
 8010a4a:	4a26      	ldr	r2, [pc, #152]	; (8010ae4 <tcp_close_shutdown+0x1bc>)
 8010a4c:	6013      	str	r3, [r2, #0]
 8010a4e:	e013      	b.n	8010a78 <tcp_close_shutdown+0x150>
 8010a50:	4b24      	ldr	r3, [pc, #144]	; (8010ae4 <tcp_close_shutdown+0x1bc>)
 8010a52:	681b      	ldr	r3, [r3, #0]
 8010a54:	60bb      	str	r3, [r7, #8]
 8010a56:	e00c      	b.n	8010a72 <tcp_close_shutdown+0x14a>
 8010a58:	68bb      	ldr	r3, [r7, #8]
 8010a5a:	68db      	ldr	r3, [r3, #12]
 8010a5c:	687a      	ldr	r2, [r7, #4]
 8010a5e:	429a      	cmp	r2, r3
 8010a60:	d104      	bne.n	8010a6c <tcp_close_shutdown+0x144>
 8010a62:	687b      	ldr	r3, [r7, #4]
 8010a64:	68da      	ldr	r2, [r3, #12]
 8010a66:	68bb      	ldr	r3, [r7, #8]
 8010a68:	60da      	str	r2, [r3, #12]
 8010a6a:	e005      	b.n	8010a78 <tcp_close_shutdown+0x150>
 8010a6c:	68bb      	ldr	r3, [r7, #8]
 8010a6e:	68db      	ldr	r3, [r3, #12]
 8010a70:	60bb      	str	r3, [r7, #8]
 8010a72:	68bb      	ldr	r3, [r7, #8]
 8010a74:	2b00      	cmp	r3, #0
 8010a76:	d1ef      	bne.n	8010a58 <tcp_close_shutdown+0x130>
 8010a78:	687b      	ldr	r3, [r7, #4]
 8010a7a:	2200      	movs	r2, #0
 8010a7c:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8010a7e:	6878      	ldr	r0, [r7, #4]
 8010a80:	f7ff fea0 	bl	80107c4 <tcp_free>
      break;
 8010a84:	e01a      	b.n	8010abc <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 8010a86:	6878      	ldr	r0, [r7, #4]
 8010a88:	f7ff ff14 	bl	80108b4 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8010a8c:	6879      	ldr	r1, [r7, #4]
 8010a8e:	4816      	ldr	r0, [pc, #88]	; (8010ae8 <tcp_close_shutdown+0x1c0>)
 8010a90:	f001 f8a8 	bl	8011be4 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8010a94:	6878      	ldr	r0, [r7, #4]
 8010a96:	f7ff feb1 	bl	80107fc <tcp_free_listen>
      break;
 8010a9a:	e00f      	b.n	8010abc <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8010a9c:	6879      	ldr	r1, [r7, #4]
 8010a9e:	480e      	ldr	r0, [pc, #56]	; (8010ad8 <tcp_close_shutdown+0x1b0>)
 8010aa0:	f001 f8a0 	bl	8011be4 <tcp_pcb_remove>
 8010aa4:	4b0d      	ldr	r3, [pc, #52]	; (8010adc <tcp_close_shutdown+0x1b4>)
 8010aa6:	2201      	movs	r2, #1
 8010aa8:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8010aaa:	6878      	ldr	r0, [r7, #4]
 8010aac:	f7ff fe8a 	bl	80107c4 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8010ab0:	e004      	b.n	8010abc <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8010ab2:	6878      	ldr	r0, [r7, #4]
 8010ab4:	f000 f81a 	bl	8010aec <tcp_close_shutdown_fin>
 8010ab8:	4603      	mov	r3, r0
 8010aba:	e000      	b.n	8010abe <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8010abc:	2300      	movs	r3, #0
}
 8010abe:	4618      	mov	r0, r3
 8010ac0:	3710      	adds	r7, #16
 8010ac2:	46bd      	mov	sp, r7
 8010ac4:	bdb0      	pop	{r4, r5, r7, pc}
 8010ac6:	bf00      	nop
 8010ac8:	08021634 	.word	0x08021634
 8010acc:	08021708 	.word	0x08021708
 8010ad0:	08021678 	.word	0x08021678
 8010ad4:	08021728 	.word	0x08021728
 8010ad8:	20007630 	.word	0x20007630
 8010adc:	2000762c 	.word	0x2000762c
 8010ae0:	20007644 	.word	0x20007644
 8010ae4:	2000763c 	.word	0x2000763c
 8010ae8:	20007638 	.word	0x20007638

08010aec <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8010aec:	b580      	push	{r7, lr}
 8010aee:	b084      	sub	sp, #16
 8010af0:	af00      	add	r7, sp, #0
 8010af2:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8010af4:	687b      	ldr	r3, [r7, #4]
 8010af6:	2b00      	cmp	r3, #0
 8010af8:	d106      	bne.n	8010b08 <tcp_close_shutdown_fin+0x1c>
 8010afa:	4b2e      	ldr	r3, [pc, #184]	; (8010bb4 <tcp_close_shutdown_fin+0xc8>)
 8010afc:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8010b00:	492d      	ldr	r1, [pc, #180]	; (8010bb8 <tcp_close_shutdown_fin+0xcc>)
 8010b02:	482e      	ldr	r0, [pc, #184]	; (8010bbc <tcp_close_shutdown_fin+0xd0>)
 8010b04:	f00a fc2c 	bl	801b360 <iprintf>

  switch (pcb->state) {
 8010b08:	687b      	ldr	r3, [r7, #4]
 8010b0a:	7d1b      	ldrb	r3, [r3, #20]
 8010b0c:	2b07      	cmp	r3, #7
 8010b0e:	d020      	beq.n	8010b52 <tcp_close_shutdown_fin+0x66>
 8010b10:	2b07      	cmp	r3, #7
 8010b12:	dc2b      	bgt.n	8010b6c <tcp_close_shutdown_fin+0x80>
 8010b14:	2b03      	cmp	r3, #3
 8010b16:	d002      	beq.n	8010b1e <tcp_close_shutdown_fin+0x32>
 8010b18:	2b04      	cmp	r3, #4
 8010b1a:	d00d      	beq.n	8010b38 <tcp_close_shutdown_fin+0x4c>
 8010b1c:	e026      	b.n	8010b6c <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8010b1e:	6878      	ldr	r0, [r7, #4]
 8010b20:	f003 fee2 	bl	80148e8 <tcp_send_fin>
 8010b24:	4603      	mov	r3, r0
 8010b26:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8010b28:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010b2c:	2b00      	cmp	r3, #0
 8010b2e:	d11f      	bne.n	8010b70 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8010b30:	687b      	ldr	r3, [r7, #4]
 8010b32:	2205      	movs	r2, #5
 8010b34:	751a      	strb	r2, [r3, #20]
      }
      break;
 8010b36:	e01b      	b.n	8010b70 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8010b38:	6878      	ldr	r0, [r7, #4]
 8010b3a:	f003 fed5 	bl	80148e8 <tcp_send_fin>
 8010b3e:	4603      	mov	r3, r0
 8010b40:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8010b42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010b46:	2b00      	cmp	r3, #0
 8010b48:	d114      	bne.n	8010b74 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8010b4a:	687b      	ldr	r3, [r7, #4]
 8010b4c:	2205      	movs	r2, #5
 8010b4e:	751a      	strb	r2, [r3, #20]
      }
      break;
 8010b50:	e010      	b.n	8010b74 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8010b52:	6878      	ldr	r0, [r7, #4]
 8010b54:	f003 fec8 	bl	80148e8 <tcp_send_fin>
 8010b58:	4603      	mov	r3, r0
 8010b5a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8010b5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010b60:	2b00      	cmp	r3, #0
 8010b62:	d109      	bne.n	8010b78 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8010b64:	687b      	ldr	r3, [r7, #4]
 8010b66:	2209      	movs	r2, #9
 8010b68:	751a      	strb	r2, [r3, #20]
      }
      break;
 8010b6a:	e005      	b.n	8010b78 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8010b6c:	2300      	movs	r3, #0
 8010b6e:	e01c      	b.n	8010baa <tcp_close_shutdown_fin+0xbe>
      break;
 8010b70:	bf00      	nop
 8010b72:	e002      	b.n	8010b7a <tcp_close_shutdown_fin+0x8e>
      break;
 8010b74:	bf00      	nop
 8010b76:	e000      	b.n	8010b7a <tcp_close_shutdown_fin+0x8e>
      break;
 8010b78:	bf00      	nop
  }

  if (err == ERR_OK) {
 8010b7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010b7e:	2b00      	cmp	r3, #0
 8010b80:	d103      	bne.n	8010b8a <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8010b82:	6878      	ldr	r0, [r7, #4]
 8010b84:	f003 ffee 	bl	8014b64 <tcp_output>
 8010b88:	e00d      	b.n	8010ba6 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8010b8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010b8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010b92:	d108      	bne.n	8010ba6 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8010b94:	687b      	ldr	r3, [r7, #4]
 8010b96:	8b5b      	ldrh	r3, [r3, #26]
 8010b98:	f043 0308 	orr.w	r3, r3, #8
 8010b9c:	b29a      	uxth	r2, r3
 8010b9e:	687b      	ldr	r3, [r7, #4]
 8010ba0:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8010ba2:	2300      	movs	r3, #0
 8010ba4:	e001      	b.n	8010baa <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8010ba6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8010baa:	4618      	mov	r0, r3
 8010bac:	3710      	adds	r7, #16
 8010bae:	46bd      	mov	sp, r7
 8010bb0:	bd80      	pop	{r7, pc}
 8010bb2:	bf00      	nop
 8010bb4:	08021634 	.word	0x08021634
 8010bb8:	080216e4 	.word	0x080216e4
 8010bbc:	08021678 	.word	0x08021678

08010bc0 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8010bc0:	b580      	push	{r7, lr}
 8010bc2:	b082      	sub	sp, #8
 8010bc4:	af00      	add	r7, sp, #0
 8010bc6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8010bc8:	687b      	ldr	r3, [r7, #4]
 8010bca:	2b00      	cmp	r3, #0
 8010bcc:	d109      	bne.n	8010be2 <tcp_close+0x22>
 8010bce:	4b0f      	ldr	r3, [pc, #60]	; (8010c0c <tcp_close+0x4c>)
 8010bd0:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8010bd4:	490e      	ldr	r1, [pc, #56]	; (8010c10 <tcp_close+0x50>)
 8010bd6:	480f      	ldr	r0, [pc, #60]	; (8010c14 <tcp_close+0x54>)
 8010bd8:	f00a fbc2 	bl	801b360 <iprintf>
 8010bdc:	f06f 030f 	mvn.w	r3, #15
 8010be0:	e00f      	b.n	8010c02 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8010be2:	687b      	ldr	r3, [r7, #4]
 8010be4:	7d1b      	ldrb	r3, [r3, #20]
 8010be6:	2b01      	cmp	r3, #1
 8010be8:	d006      	beq.n	8010bf8 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8010bea:	687b      	ldr	r3, [r7, #4]
 8010bec:	8b5b      	ldrh	r3, [r3, #26]
 8010bee:	f043 0310 	orr.w	r3, r3, #16
 8010bf2:	b29a      	uxth	r2, r3
 8010bf4:	687b      	ldr	r3, [r7, #4]
 8010bf6:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8010bf8:	2101      	movs	r1, #1
 8010bfa:	6878      	ldr	r0, [r7, #4]
 8010bfc:	f7ff fe94 	bl	8010928 <tcp_close_shutdown>
 8010c00:	4603      	mov	r3, r0
}
 8010c02:	4618      	mov	r0, r3
 8010c04:	3708      	adds	r7, #8
 8010c06:	46bd      	mov	sp, r7
 8010c08:	bd80      	pop	{r7, pc}
 8010c0a:	bf00      	nop
 8010c0c:	08021634 	.word	0x08021634
 8010c10:	08021744 	.word	0x08021744
 8010c14:	08021678 	.word	0x08021678

08010c18 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8010c18:	b580      	push	{r7, lr}
 8010c1a:	b08e      	sub	sp, #56	; 0x38
 8010c1c:	af04      	add	r7, sp, #16
 8010c1e:	6078      	str	r0, [r7, #4]
 8010c20:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8010c22:	687b      	ldr	r3, [r7, #4]
 8010c24:	2b00      	cmp	r3, #0
 8010c26:	d107      	bne.n	8010c38 <tcp_abandon+0x20>
 8010c28:	4b52      	ldr	r3, [pc, #328]	; (8010d74 <tcp_abandon+0x15c>)
 8010c2a:	f240 223d 	movw	r2, #573	; 0x23d
 8010c2e:	4952      	ldr	r1, [pc, #328]	; (8010d78 <tcp_abandon+0x160>)
 8010c30:	4852      	ldr	r0, [pc, #328]	; (8010d7c <tcp_abandon+0x164>)
 8010c32:	f00a fb95 	bl	801b360 <iprintf>
 8010c36:	e099      	b.n	8010d6c <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8010c38:	687b      	ldr	r3, [r7, #4]
 8010c3a:	7d1b      	ldrb	r3, [r3, #20]
 8010c3c:	2b01      	cmp	r3, #1
 8010c3e:	d106      	bne.n	8010c4e <tcp_abandon+0x36>
 8010c40:	4b4c      	ldr	r3, [pc, #304]	; (8010d74 <tcp_abandon+0x15c>)
 8010c42:	f44f 7210 	mov.w	r2, #576	; 0x240
 8010c46:	494e      	ldr	r1, [pc, #312]	; (8010d80 <tcp_abandon+0x168>)
 8010c48:	484c      	ldr	r0, [pc, #304]	; (8010d7c <tcp_abandon+0x164>)
 8010c4a:	f00a fb89 	bl	801b360 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8010c4e:	687b      	ldr	r3, [r7, #4]
 8010c50:	7d1b      	ldrb	r3, [r3, #20]
 8010c52:	2b0a      	cmp	r3, #10
 8010c54:	d107      	bne.n	8010c66 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8010c56:	6879      	ldr	r1, [r7, #4]
 8010c58:	484a      	ldr	r0, [pc, #296]	; (8010d84 <tcp_abandon+0x16c>)
 8010c5a:	f000 ffc3 	bl	8011be4 <tcp_pcb_remove>
    tcp_free(pcb);
 8010c5e:	6878      	ldr	r0, [r7, #4]
 8010c60:	f7ff fdb0 	bl	80107c4 <tcp_free>
 8010c64:	e082      	b.n	8010d6c <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8010c66:	2300      	movs	r3, #0
 8010c68:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8010c6a:	2300      	movs	r3, #0
 8010c6c:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8010c6e:	687b      	ldr	r3, [r7, #4]
 8010c70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010c72:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8010c74:	687b      	ldr	r3, [r7, #4]
 8010c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010c78:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8010c7a:	687b      	ldr	r3, [r7, #4]
 8010c7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010c80:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8010c82:	687b      	ldr	r3, [r7, #4]
 8010c84:	691b      	ldr	r3, [r3, #16]
 8010c86:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8010c88:	687b      	ldr	r3, [r7, #4]
 8010c8a:	7d1b      	ldrb	r3, [r3, #20]
 8010c8c:	2b00      	cmp	r3, #0
 8010c8e:	d126      	bne.n	8010cde <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8010c90:	687b      	ldr	r3, [r7, #4]
 8010c92:	8adb      	ldrh	r3, [r3, #22]
 8010c94:	2b00      	cmp	r3, #0
 8010c96:	d02e      	beq.n	8010cf6 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8010c98:	4b3b      	ldr	r3, [pc, #236]	; (8010d88 <tcp_abandon+0x170>)
 8010c9a:	681b      	ldr	r3, [r3, #0]
 8010c9c:	687a      	ldr	r2, [r7, #4]
 8010c9e:	429a      	cmp	r2, r3
 8010ca0:	d105      	bne.n	8010cae <tcp_abandon+0x96>
 8010ca2:	4b39      	ldr	r3, [pc, #228]	; (8010d88 <tcp_abandon+0x170>)
 8010ca4:	681b      	ldr	r3, [r3, #0]
 8010ca6:	68db      	ldr	r3, [r3, #12]
 8010ca8:	4a37      	ldr	r2, [pc, #220]	; (8010d88 <tcp_abandon+0x170>)
 8010caa:	6013      	str	r3, [r2, #0]
 8010cac:	e013      	b.n	8010cd6 <tcp_abandon+0xbe>
 8010cae:	4b36      	ldr	r3, [pc, #216]	; (8010d88 <tcp_abandon+0x170>)
 8010cb0:	681b      	ldr	r3, [r3, #0]
 8010cb2:	61fb      	str	r3, [r7, #28]
 8010cb4:	e00c      	b.n	8010cd0 <tcp_abandon+0xb8>
 8010cb6:	69fb      	ldr	r3, [r7, #28]
 8010cb8:	68db      	ldr	r3, [r3, #12]
 8010cba:	687a      	ldr	r2, [r7, #4]
 8010cbc:	429a      	cmp	r2, r3
 8010cbe:	d104      	bne.n	8010cca <tcp_abandon+0xb2>
 8010cc0:	687b      	ldr	r3, [r7, #4]
 8010cc2:	68da      	ldr	r2, [r3, #12]
 8010cc4:	69fb      	ldr	r3, [r7, #28]
 8010cc6:	60da      	str	r2, [r3, #12]
 8010cc8:	e005      	b.n	8010cd6 <tcp_abandon+0xbe>
 8010cca:	69fb      	ldr	r3, [r7, #28]
 8010ccc:	68db      	ldr	r3, [r3, #12]
 8010cce:	61fb      	str	r3, [r7, #28]
 8010cd0:	69fb      	ldr	r3, [r7, #28]
 8010cd2:	2b00      	cmp	r3, #0
 8010cd4:	d1ef      	bne.n	8010cb6 <tcp_abandon+0x9e>
 8010cd6:	687b      	ldr	r3, [r7, #4]
 8010cd8:	2200      	movs	r2, #0
 8010cda:	60da      	str	r2, [r3, #12]
 8010cdc:	e00b      	b.n	8010cf6 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8010cde:	683b      	ldr	r3, [r7, #0]
 8010ce0:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8010ce2:	687b      	ldr	r3, [r7, #4]
 8010ce4:	8adb      	ldrh	r3, [r3, #22]
 8010ce6:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8010ce8:	6879      	ldr	r1, [r7, #4]
 8010cea:	4828      	ldr	r0, [pc, #160]	; (8010d8c <tcp_abandon+0x174>)
 8010cec:	f000 ff7a 	bl	8011be4 <tcp_pcb_remove>
 8010cf0:	4b27      	ldr	r3, [pc, #156]	; (8010d90 <tcp_abandon+0x178>)
 8010cf2:	2201      	movs	r2, #1
 8010cf4:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8010cf6:	687b      	ldr	r3, [r7, #4]
 8010cf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010cfa:	2b00      	cmp	r3, #0
 8010cfc:	d004      	beq.n	8010d08 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8010cfe:	687b      	ldr	r3, [r7, #4]
 8010d00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010d02:	4618      	mov	r0, r3
 8010d04:	f000 fd1c 	bl	8011740 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8010d08:	687b      	ldr	r3, [r7, #4]
 8010d0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010d0c:	2b00      	cmp	r3, #0
 8010d0e:	d004      	beq.n	8010d1a <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8010d10:	687b      	ldr	r3, [r7, #4]
 8010d12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010d14:	4618      	mov	r0, r3
 8010d16:	f000 fd13 	bl	8011740 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8010d1a:	687b      	ldr	r3, [r7, #4]
 8010d1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010d1e:	2b00      	cmp	r3, #0
 8010d20:	d004      	beq.n	8010d2c <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8010d22:	687b      	ldr	r3, [r7, #4]
 8010d24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010d26:	4618      	mov	r0, r3
 8010d28:	f000 fd0a 	bl	8011740 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8010d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d2e:	2b00      	cmp	r3, #0
 8010d30:	d00e      	beq.n	8010d50 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8010d32:	6879      	ldr	r1, [r7, #4]
 8010d34:	687b      	ldr	r3, [r7, #4]
 8010d36:	3304      	adds	r3, #4
 8010d38:	687a      	ldr	r2, [r7, #4]
 8010d3a:	8b12      	ldrh	r2, [r2, #24]
 8010d3c:	9202      	str	r2, [sp, #8]
 8010d3e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8010d40:	9201      	str	r2, [sp, #4]
 8010d42:	9300      	str	r3, [sp, #0]
 8010d44:	460b      	mov	r3, r1
 8010d46:	697a      	ldr	r2, [r7, #20]
 8010d48:	69b9      	ldr	r1, [r7, #24]
 8010d4a:	6878      	ldr	r0, [r7, #4]
 8010d4c:	f004 fcbe 	bl	80156cc <tcp_rst>
    }
    last_state = pcb->state;
 8010d50:	687b      	ldr	r3, [r7, #4]
 8010d52:	7d1b      	ldrb	r3, [r3, #20]
 8010d54:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8010d56:	6878      	ldr	r0, [r7, #4]
 8010d58:	f7ff fd34 	bl	80107c4 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8010d5c:	693b      	ldr	r3, [r7, #16]
 8010d5e:	2b00      	cmp	r3, #0
 8010d60:	d004      	beq.n	8010d6c <tcp_abandon+0x154>
 8010d62:	693b      	ldr	r3, [r7, #16]
 8010d64:	f06f 010c 	mvn.w	r1, #12
 8010d68:	68f8      	ldr	r0, [r7, #12]
 8010d6a:	4798      	blx	r3
  }
}
 8010d6c:	3728      	adds	r7, #40	; 0x28
 8010d6e:	46bd      	mov	sp, r7
 8010d70:	bd80      	pop	{r7, pc}
 8010d72:	bf00      	nop
 8010d74:	08021634 	.word	0x08021634
 8010d78:	08021778 	.word	0x08021778
 8010d7c:	08021678 	.word	0x08021678
 8010d80:	08021794 	.word	0x08021794
 8010d84:	20007640 	.word	0x20007640
 8010d88:	2000763c 	.word	0x2000763c
 8010d8c:	20007630 	.word	0x20007630
 8010d90:	2000762c 	.word	0x2000762c

08010d94 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8010d94:	b580      	push	{r7, lr}
 8010d96:	b082      	sub	sp, #8
 8010d98:	af00      	add	r7, sp, #0
 8010d9a:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8010d9c:	2101      	movs	r1, #1
 8010d9e:	6878      	ldr	r0, [r7, #4]
 8010da0:	f7ff ff3a 	bl	8010c18 <tcp_abandon>
}
 8010da4:	bf00      	nop
 8010da6:	3708      	adds	r7, #8
 8010da8:	46bd      	mov	sp, r7
 8010daa:	bd80      	pop	{r7, pc}

08010dac <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8010dac:	b580      	push	{r7, lr}
 8010dae:	b084      	sub	sp, #16
 8010db0:	af00      	add	r7, sp, #0
 8010db2:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8010db4:	687b      	ldr	r3, [r7, #4]
 8010db6:	2b00      	cmp	r3, #0
 8010db8:	d106      	bne.n	8010dc8 <tcp_update_rcv_ann_wnd+0x1c>
 8010dba:	4b25      	ldr	r3, [pc, #148]	; (8010e50 <tcp_update_rcv_ann_wnd+0xa4>)
 8010dbc:	f240 32a6 	movw	r2, #934	; 0x3a6
 8010dc0:	4924      	ldr	r1, [pc, #144]	; (8010e54 <tcp_update_rcv_ann_wnd+0xa8>)
 8010dc2:	4825      	ldr	r0, [pc, #148]	; (8010e58 <tcp_update_rcv_ann_wnd+0xac>)
 8010dc4:	f00a facc 	bl	801b360 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8010dc8:	687b      	ldr	r3, [r7, #4]
 8010dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010dcc:	687a      	ldr	r2, [r7, #4]
 8010dce:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8010dd0:	4413      	add	r3, r2
 8010dd2:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8010dd4:	687b      	ldr	r3, [r7, #4]
 8010dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010dd8:	687a      	ldr	r2, [r7, #4]
 8010dda:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8010ddc:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8010de0:	bf28      	it	cs
 8010de2:	f44f 6280 	movcs.w	r2, #1024	; 0x400
 8010de6:	b292      	uxth	r2, r2
 8010de8:	4413      	add	r3, r2
 8010dea:	68fa      	ldr	r2, [r7, #12]
 8010dec:	1ad3      	subs	r3, r2, r3
 8010dee:	2b00      	cmp	r3, #0
 8010df0:	db08      	blt.n	8010e04 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8010df2:	687b      	ldr	r3, [r7, #4]
 8010df4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010df6:	687b      	ldr	r3, [r7, #4]
 8010df8:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8010dfa:	687b      	ldr	r3, [r7, #4]
 8010dfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010dfe:	68fa      	ldr	r2, [r7, #12]
 8010e00:	1ad3      	subs	r3, r2, r3
 8010e02:	e020      	b.n	8010e46 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8010e04:	687b      	ldr	r3, [r7, #4]
 8010e06:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010e08:	687b      	ldr	r3, [r7, #4]
 8010e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010e0c:	1ad3      	subs	r3, r2, r3
 8010e0e:	2b00      	cmp	r3, #0
 8010e10:	dd03      	ble.n	8010e1a <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8010e12:	687b      	ldr	r3, [r7, #4]
 8010e14:	2200      	movs	r2, #0
 8010e16:	855a      	strh	r2, [r3, #42]	; 0x2a
 8010e18:	e014      	b.n	8010e44 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8010e1a:	687b      	ldr	r3, [r7, #4]
 8010e1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010e1e:	687b      	ldr	r3, [r7, #4]
 8010e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010e22:	1ad3      	subs	r3, r2, r3
 8010e24:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8010e26:	68bb      	ldr	r3, [r7, #8]
 8010e28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010e2c:	d306      	bcc.n	8010e3c <tcp_update_rcv_ann_wnd+0x90>
 8010e2e:	4b08      	ldr	r3, [pc, #32]	; (8010e50 <tcp_update_rcv_ann_wnd+0xa4>)
 8010e30:	f240 32b6 	movw	r2, #950	; 0x3b6
 8010e34:	4909      	ldr	r1, [pc, #36]	; (8010e5c <tcp_update_rcv_ann_wnd+0xb0>)
 8010e36:	4808      	ldr	r0, [pc, #32]	; (8010e58 <tcp_update_rcv_ann_wnd+0xac>)
 8010e38:	f00a fa92 	bl	801b360 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8010e3c:	68bb      	ldr	r3, [r7, #8]
 8010e3e:	b29a      	uxth	r2, r3
 8010e40:	687b      	ldr	r3, [r7, #4]
 8010e42:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8010e44:	2300      	movs	r3, #0
  }
}
 8010e46:	4618      	mov	r0, r3
 8010e48:	3710      	adds	r7, #16
 8010e4a:	46bd      	mov	sp, r7
 8010e4c:	bd80      	pop	{r7, pc}
 8010e4e:	bf00      	nop
 8010e50:	08021634 	.word	0x08021634
 8010e54:	08021890 	.word	0x08021890
 8010e58:	08021678 	.word	0x08021678
 8010e5c:	080218b4 	.word	0x080218b4

08010e60 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8010e60:	b580      	push	{r7, lr}
 8010e62:	b084      	sub	sp, #16
 8010e64:	af00      	add	r7, sp, #0
 8010e66:	6078      	str	r0, [r7, #4]
 8010e68:	460b      	mov	r3, r1
 8010e6a:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8010e6c:	687b      	ldr	r3, [r7, #4]
 8010e6e:	2b00      	cmp	r3, #0
 8010e70:	d107      	bne.n	8010e82 <tcp_recved+0x22>
 8010e72:	4b1f      	ldr	r3, [pc, #124]	; (8010ef0 <tcp_recved+0x90>)
 8010e74:	f240 32cf 	movw	r2, #975	; 0x3cf
 8010e78:	491e      	ldr	r1, [pc, #120]	; (8010ef4 <tcp_recved+0x94>)
 8010e7a:	481f      	ldr	r0, [pc, #124]	; (8010ef8 <tcp_recved+0x98>)
 8010e7c:	f00a fa70 	bl	801b360 <iprintf>
 8010e80:	e032      	b.n	8010ee8 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8010e82:	687b      	ldr	r3, [r7, #4]
 8010e84:	7d1b      	ldrb	r3, [r3, #20]
 8010e86:	2b01      	cmp	r3, #1
 8010e88:	d106      	bne.n	8010e98 <tcp_recved+0x38>
 8010e8a:	4b19      	ldr	r3, [pc, #100]	; (8010ef0 <tcp_recved+0x90>)
 8010e8c:	f240 32d2 	movw	r2, #978	; 0x3d2
 8010e90:	491a      	ldr	r1, [pc, #104]	; (8010efc <tcp_recved+0x9c>)
 8010e92:	4819      	ldr	r0, [pc, #100]	; (8010ef8 <tcp_recved+0x98>)
 8010e94:	f00a fa64 	bl	801b360 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8010e98:	687b      	ldr	r3, [r7, #4]
 8010e9a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010e9c:	887b      	ldrh	r3, [r7, #2]
 8010e9e:	4413      	add	r3, r2
 8010ea0:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8010ea2:	89fb      	ldrh	r3, [r7, #14]
 8010ea4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010ea8:	d804      	bhi.n	8010eb4 <tcp_recved+0x54>
 8010eaa:	687b      	ldr	r3, [r7, #4]
 8010eac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010eae:	89fa      	ldrh	r2, [r7, #14]
 8010eb0:	429a      	cmp	r2, r3
 8010eb2:	d204      	bcs.n	8010ebe <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8010eb4:	687b      	ldr	r3, [r7, #4]
 8010eb6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8010eba:	851a      	strh	r2, [r3, #40]	; 0x28
 8010ebc:	e002      	b.n	8010ec4 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8010ebe:	687b      	ldr	r3, [r7, #4]
 8010ec0:	89fa      	ldrh	r2, [r7, #14]
 8010ec2:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8010ec4:	6878      	ldr	r0, [r7, #4]
 8010ec6:	f7ff ff71 	bl	8010dac <tcp_update_rcv_ann_wnd>
 8010eca:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8010ecc:	68bb      	ldr	r3, [r7, #8]
 8010ece:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010ed2:	d309      	bcc.n	8010ee8 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8010ed4:	687b      	ldr	r3, [r7, #4]
 8010ed6:	8b5b      	ldrh	r3, [r3, #26]
 8010ed8:	f043 0302 	orr.w	r3, r3, #2
 8010edc:	b29a      	uxth	r2, r3
 8010ede:	687b      	ldr	r3, [r7, #4]
 8010ee0:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8010ee2:	6878      	ldr	r0, [r7, #4]
 8010ee4:	f003 fe3e 	bl	8014b64 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8010ee8:	3710      	adds	r7, #16
 8010eea:	46bd      	mov	sp, r7
 8010eec:	bd80      	pop	{r7, pc}
 8010eee:	bf00      	nop
 8010ef0:	08021634 	.word	0x08021634
 8010ef4:	080218d0 	.word	0x080218d0
 8010ef8:	08021678 	.word	0x08021678
 8010efc:	080218e8 	.word	0x080218e8

08010f00 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8010f00:	b5b0      	push	{r4, r5, r7, lr}
 8010f02:	b090      	sub	sp, #64	; 0x40
 8010f04:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8010f06:	2300      	movs	r3, #0
 8010f08:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8010f0c:	4b94      	ldr	r3, [pc, #592]	; (8011160 <tcp_slowtmr+0x260>)
 8010f0e:	681b      	ldr	r3, [r3, #0]
 8010f10:	3301      	adds	r3, #1
 8010f12:	4a93      	ldr	r2, [pc, #588]	; (8011160 <tcp_slowtmr+0x260>)
 8010f14:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8010f16:	4b93      	ldr	r3, [pc, #588]	; (8011164 <tcp_slowtmr+0x264>)
 8010f18:	781b      	ldrb	r3, [r3, #0]
 8010f1a:	3301      	adds	r3, #1
 8010f1c:	b2da      	uxtb	r2, r3
 8010f1e:	4b91      	ldr	r3, [pc, #580]	; (8011164 <tcp_slowtmr+0x264>)
 8010f20:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8010f22:	2300      	movs	r3, #0
 8010f24:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 8010f26:	4b90      	ldr	r3, [pc, #576]	; (8011168 <tcp_slowtmr+0x268>)
 8010f28:	681b      	ldr	r3, [r3, #0]
 8010f2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8010f2c:	e29f      	b.n	801146e <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8010f2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f30:	7d1b      	ldrb	r3, [r3, #20]
 8010f32:	2b00      	cmp	r3, #0
 8010f34:	d106      	bne.n	8010f44 <tcp_slowtmr+0x44>
 8010f36:	4b8d      	ldr	r3, [pc, #564]	; (801116c <tcp_slowtmr+0x26c>)
 8010f38:	f240 42be 	movw	r2, #1214	; 0x4be
 8010f3c:	498c      	ldr	r1, [pc, #560]	; (8011170 <tcp_slowtmr+0x270>)
 8010f3e:	488d      	ldr	r0, [pc, #564]	; (8011174 <tcp_slowtmr+0x274>)
 8010f40:	f00a fa0e 	bl	801b360 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8010f44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f46:	7d1b      	ldrb	r3, [r3, #20]
 8010f48:	2b01      	cmp	r3, #1
 8010f4a:	d106      	bne.n	8010f5a <tcp_slowtmr+0x5a>
 8010f4c:	4b87      	ldr	r3, [pc, #540]	; (801116c <tcp_slowtmr+0x26c>)
 8010f4e:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8010f52:	4989      	ldr	r1, [pc, #548]	; (8011178 <tcp_slowtmr+0x278>)
 8010f54:	4887      	ldr	r0, [pc, #540]	; (8011174 <tcp_slowtmr+0x274>)
 8010f56:	f00a fa03 	bl	801b360 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8010f5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f5c:	7d1b      	ldrb	r3, [r3, #20]
 8010f5e:	2b0a      	cmp	r3, #10
 8010f60:	d106      	bne.n	8010f70 <tcp_slowtmr+0x70>
 8010f62:	4b82      	ldr	r3, [pc, #520]	; (801116c <tcp_slowtmr+0x26c>)
 8010f64:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8010f68:	4984      	ldr	r1, [pc, #528]	; (801117c <tcp_slowtmr+0x27c>)
 8010f6a:	4882      	ldr	r0, [pc, #520]	; (8011174 <tcp_slowtmr+0x274>)
 8010f6c:	f00a f9f8 	bl	801b360 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8010f70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f72:	7f9a      	ldrb	r2, [r3, #30]
 8010f74:	4b7b      	ldr	r3, [pc, #492]	; (8011164 <tcp_slowtmr+0x264>)
 8010f76:	781b      	ldrb	r3, [r3, #0]
 8010f78:	429a      	cmp	r2, r3
 8010f7a:	d105      	bne.n	8010f88 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8010f7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f7e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8010f80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f82:	68db      	ldr	r3, [r3, #12]
 8010f84:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 8010f86:	e272      	b.n	801146e <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 8010f88:	4b76      	ldr	r3, [pc, #472]	; (8011164 <tcp_slowtmr+0x264>)
 8010f8a:	781a      	ldrb	r2, [r3, #0]
 8010f8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f8e:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8010f90:	2300      	movs	r3, #0
 8010f92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8010f96:	2300      	movs	r3, #0
 8010f98:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8010f9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f9e:	7d1b      	ldrb	r3, [r3, #20]
 8010fa0:	2b02      	cmp	r3, #2
 8010fa2:	d10a      	bne.n	8010fba <tcp_slowtmr+0xba>
 8010fa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fa6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010faa:	2b05      	cmp	r3, #5
 8010fac:	d905      	bls.n	8010fba <tcp_slowtmr+0xba>
      ++pcb_remove;
 8010fae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010fb2:	3301      	adds	r3, #1
 8010fb4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010fb8:	e11e      	b.n	80111f8 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8010fba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fbc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010fc0:	2b0b      	cmp	r3, #11
 8010fc2:	d905      	bls.n	8010fd0 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8010fc4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010fc8:	3301      	adds	r3, #1
 8010fca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010fce:	e113      	b.n	80111f8 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8010fd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fd2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8010fd6:	2b00      	cmp	r3, #0
 8010fd8:	d075      	beq.n	80110c6 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8010fda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010fde:	2b00      	cmp	r3, #0
 8010fe0:	d006      	beq.n	8010ff0 <tcp_slowtmr+0xf0>
 8010fe2:	4b62      	ldr	r3, [pc, #392]	; (801116c <tcp_slowtmr+0x26c>)
 8010fe4:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8010fe8:	4965      	ldr	r1, [pc, #404]	; (8011180 <tcp_slowtmr+0x280>)
 8010fea:	4862      	ldr	r0, [pc, #392]	; (8011174 <tcp_slowtmr+0x274>)
 8010fec:	f00a f9b8 	bl	801b360 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8010ff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ff2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010ff4:	2b00      	cmp	r3, #0
 8010ff6:	d106      	bne.n	8011006 <tcp_slowtmr+0x106>
 8010ff8:	4b5c      	ldr	r3, [pc, #368]	; (801116c <tcp_slowtmr+0x26c>)
 8010ffa:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8010ffe:	4961      	ldr	r1, [pc, #388]	; (8011184 <tcp_slowtmr+0x284>)
 8011000:	485c      	ldr	r0, [pc, #368]	; (8011174 <tcp_slowtmr+0x274>)
 8011002:	f00a f9ad 	bl	801b360 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8011006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011008:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801100c:	2b0b      	cmp	r3, #11
 801100e:	d905      	bls.n	801101c <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8011010:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011014:	3301      	adds	r3, #1
 8011016:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801101a:	e0ed      	b.n	80111f8 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 801101c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801101e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8011022:	3b01      	subs	r3, #1
 8011024:	4a58      	ldr	r2, [pc, #352]	; (8011188 <tcp_slowtmr+0x288>)
 8011026:	5cd3      	ldrb	r3, [r2, r3]
 8011028:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 801102a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801102c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8011030:	7c7a      	ldrb	r2, [r7, #17]
 8011032:	429a      	cmp	r2, r3
 8011034:	d907      	bls.n	8011046 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 8011036:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011038:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 801103c:	3301      	adds	r3, #1
 801103e:	b2da      	uxtb	r2, r3
 8011040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011042:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 8011046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011048:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 801104c:	7c7a      	ldrb	r2, [r7, #17]
 801104e:	429a      	cmp	r2, r3
 8011050:	f200 80d2 	bhi.w	80111f8 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8011054:	2301      	movs	r3, #1
 8011056:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8011058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801105a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801105e:	2b00      	cmp	r3, #0
 8011060:	d108      	bne.n	8011074 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8011062:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011064:	f004 fc24 	bl	80158b0 <tcp_zero_window_probe>
 8011068:	4603      	mov	r3, r0
 801106a:	2b00      	cmp	r3, #0
 801106c:	d014      	beq.n	8011098 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 801106e:	2300      	movs	r3, #0
 8011070:	623b      	str	r3, [r7, #32]
 8011072:	e011      	b.n	8011098 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8011074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011076:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801107a:	4619      	mov	r1, r3
 801107c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801107e:	f003 faeb 	bl	8014658 <tcp_split_unsent_seg>
 8011082:	4603      	mov	r3, r0
 8011084:	2b00      	cmp	r3, #0
 8011086:	d107      	bne.n	8011098 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8011088:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801108a:	f003 fd6b 	bl	8014b64 <tcp_output>
 801108e:	4603      	mov	r3, r0
 8011090:	2b00      	cmp	r3, #0
 8011092:	d101      	bne.n	8011098 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8011094:	2300      	movs	r3, #0
 8011096:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8011098:	6a3b      	ldr	r3, [r7, #32]
 801109a:	2b00      	cmp	r3, #0
 801109c:	f000 80ac 	beq.w	80111f8 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 80110a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110a2:	2200      	movs	r2, #0
 80110a4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 80110a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110aa:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80110ae:	2b06      	cmp	r3, #6
 80110b0:	f200 80a2 	bhi.w	80111f8 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 80110b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110b6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80110ba:	3301      	adds	r3, #1
 80110bc:	b2da      	uxtb	r2, r3
 80110be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110c0:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 80110c4:	e098      	b.n	80111f8 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 80110c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110c8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80110cc:	2b00      	cmp	r3, #0
 80110ce:	db0f      	blt.n	80110f0 <tcp_slowtmr+0x1f0>
 80110d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110d2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80110d6:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80110da:	4293      	cmp	r3, r2
 80110dc:	d008      	beq.n	80110f0 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 80110de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110e0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80110e4:	b29b      	uxth	r3, r3
 80110e6:	3301      	adds	r3, #1
 80110e8:	b29b      	uxth	r3, r3
 80110ea:	b21a      	sxth	r2, r3
 80110ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110ee:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 80110f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110f2:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 80110f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110f8:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 80110fc:	429a      	cmp	r2, r3
 80110fe:	db7b      	blt.n	80111f8 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8011100:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011102:	f004 f821 	bl	8015148 <tcp_rexmit_rto_prepare>
 8011106:	4603      	mov	r3, r0
 8011108:	2b00      	cmp	r3, #0
 801110a:	d007      	beq.n	801111c <tcp_slowtmr+0x21c>
 801110c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801110e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011110:	2b00      	cmp	r3, #0
 8011112:	d171      	bne.n	80111f8 <tcp_slowtmr+0x2f8>
 8011114:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011116:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011118:	2b00      	cmp	r3, #0
 801111a:	d06d      	beq.n	80111f8 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 801111c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801111e:	7d1b      	ldrb	r3, [r3, #20]
 8011120:	2b02      	cmp	r3, #2
 8011122:	d03a      	beq.n	801119a <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8011124:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011126:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801112a:	2b0c      	cmp	r3, #12
 801112c:	bf28      	it	cs
 801112e:	230c      	movcs	r3, #12
 8011130:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8011132:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011134:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8011138:	10db      	asrs	r3, r3, #3
 801113a:	b21b      	sxth	r3, r3
 801113c:	461a      	mov	r2, r3
 801113e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011140:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8011144:	4413      	add	r3, r2
 8011146:	7efa      	ldrb	r2, [r7, #27]
 8011148:	4910      	ldr	r1, [pc, #64]	; (801118c <tcp_slowtmr+0x28c>)
 801114a:	5c8a      	ldrb	r2, [r1, r2]
 801114c:	4093      	lsls	r3, r2
 801114e:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8011150:	697b      	ldr	r3, [r7, #20]
 8011152:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8011156:	4293      	cmp	r3, r2
 8011158:	dc1a      	bgt.n	8011190 <tcp_slowtmr+0x290>
 801115a:	697b      	ldr	r3, [r7, #20]
 801115c:	b21a      	sxth	r2, r3
 801115e:	e019      	b.n	8011194 <tcp_slowtmr+0x294>
 8011160:	20007634 	.word	0x20007634
 8011164:	200004de 	.word	0x200004de
 8011168:	20007630 	.word	0x20007630
 801116c:	08021634 	.word	0x08021634
 8011170:	08021978 	.word	0x08021978
 8011174:	08021678 	.word	0x08021678
 8011178:	080219a4 	.word	0x080219a4
 801117c:	080219d0 	.word	0x080219d0
 8011180:	08021a00 	.word	0x08021a00
 8011184:	08021a34 	.word	0x08021a34
 8011188:	08023f00 	.word	0x08023f00
 801118c:	08023ef0 	.word	0x08023ef0
 8011190:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8011194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011196:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 801119a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801119c:	2200      	movs	r2, #0
 801119e:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 80111a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111a2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80111a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111a8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80111ac:	4293      	cmp	r3, r2
 80111ae:	bf28      	it	cs
 80111b0:	4613      	movcs	r3, r2
 80111b2:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 80111b4:	8a7b      	ldrh	r3, [r7, #18]
 80111b6:	085b      	lsrs	r3, r3, #1
 80111b8:	b29a      	uxth	r2, r3
 80111ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111bc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 80111c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111c2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80111c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111c8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80111ca:	005b      	lsls	r3, r3, #1
 80111cc:	b29b      	uxth	r3, r3
 80111ce:	429a      	cmp	r2, r3
 80111d0:	d206      	bcs.n	80111e0 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 80111d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111d4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80111d6:	005b      	lsls	r3, r3, #1
 80111d8:	b29a      	uxth	r2, r3
 80111da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111dc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 80111e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111e2:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 80111e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111e6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 80111ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111ec:	2200      	movs	r2, #0
 80111ee:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 80111f2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80111f4:	f004 f818 	bl	8015228 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 80111f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111fa:	7d1b      	ldrb	r3, [r3, #20]
 80111fc:	2b06      	cmp	r3, #6
 80111fe:	d111      	bne.n	8011224 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8011200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011202:	8b5b      	ldrh	r3, [r3, #26]
 8011204:	f003 0310 	and.w	r3, r3, #16
 8011208:	2b00      	cmp	r3, #0
 801120a:	d00b      	beq.n	8011224 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 801120c:	4b9d      	ldr	r3, [pc, #628]	; (8011484 <tcp_slowtmr+0x584>)
 801120e:	681a      	ldr	r2, [r3, #0]
 8011210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011212:	6a1b      	ldr	r3, [r3, #32]
 8011214:	1ad3      	subs	r3, r2, r3
 8011216:	2b28      	cmp	r3, #40	; 0x28
 8011218:	d904      	bls.n	8011224 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 801121a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801121e:	3301      	adds	r3, #1
 8011220:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8011224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011226:	7a5b      	ldrb	r3, [r3, #9]
 8011228:	f003 0308 	and.w	r3, r3, #8
 801122c:	2b00      	cmp	r3, #0
 801122e:	d04c      	beq.n	80112ca <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 8011230:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011232:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8011234:	2b04      	cmp	r3, #4
 8011236:	d003      	beq.n	8011240 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8011238:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801123a:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 801123c:	2b07      	cmp	r3, #7
 801123e:	d144      	bne.n	80112ca <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011240:	4b90      	ldr	r3, [pc, #576]	; (8011484 <tcp_slowtmr+0x584>)
 8011242:	681a      	ldr	r2, [r3, #0]
 8011244:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011246:	6a1b      	ldr	r3, [r3, #32]
 8011248:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 801124a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801124c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8011250:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 8011254:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 8011258:	498b      	ldr	r1, [pc, #556]	; (8011488 <tcp_slowtmr+0x588>)
 801125a:	fba1 1303 	umull	r1, r3, r1, r3
 801125e:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011260:	429a      	cmp	r2, r3
 8011262:	d90a      	bls.n	801127a <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8011264:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011268:	3301      	adds	r3, #1
 801126a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 801126e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8011272:	3301      	adds	r3, #1
 8011274:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8011278:	e027      	b.n	80112ca <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 801127a:	4b82      	ldr	r3, [pc, #520]	; (8011484 <tcp_slowtmr+0x584>)
 801127c:	681a      	ldr	r2, [r3, #0]
 801127e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011280:	6a1b      	ldr	r3, [r3, #32]
 8011282:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8011284:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011286:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 801128a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801128c:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8011290:	4618      	mov	r0, r3
 8011292:	4b7e      	ldr	r3, [pc, #504]	; (801148c <tcp_slowtmr+0x58c>)
 8011294:	fb03 f300 	mul.w	r3, r3, r0
 8011298:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 801129a:	497b      	ldr	r1, [pc, #492]	; (8011488 <tcp_slowtmr+0x588>)
 801129c:	fba1 1303 	umull	r1, r3, r1, r3
 80112a0:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80112a2:	429a      	cmp	r2, r3
 80112a4:	d911      	bls.n	80112ca <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 80112a6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80112a8:	f004 fac2 	bl	8015830 <tcp_keepalive>
 80112ac:	4603      	mov	r3, r0
 80112ae:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 80112b2:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 80112b6:	2b00      	cmp	r3, #0
 80112b8:	d107      	bne.n	80112ca <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 80112ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112bc:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 80112c0:	3301      	adds	r3, #1
 80112c2:	b2da      	uxtb	r2, r3
 80112c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112c6:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 80112ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80112ce:	2b00      	cmp	r3, #0
 80112d0:	d011      	beq.n	80112f6 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 80112d2:	4b6c      	ldr	r3, [pc, #432]	; (8011484 <tcp_slowtmr+0x584>)
 80112d4:	681a      	ldr	r2, [r3, #0]
 80112d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112d8:	6a1b      	ldr	r3, [r3, #32]
 80112da:	1ad2      	subs	r2, r2, r3
 80112dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112de:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 80112e2:	4619      	mov	r1, r3
 80112e4:	460b      	mov	r3, r1
 80112e6:	005b      	lsls	r3, r3, #1
 80112e8:	440b      	add	r3, r1
 80112ea:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 80112ec:	429a      	cmp	r2, r3
 80112ee:	d302      	bcc.n	80112f6 <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 80112f0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80112f2:	f000 fddb 	bl	8011eac <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 80112f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112f8:	7d1b      	ldrb	r3, [r3, #20]
 80112fa:	2b03      	cmp	r3, #3
 80112fc:	d10b      	bne.n	8011316 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80112fe:	4b61      	ldr	r3, [pc, #388]	; (8011484 <tcp_slowtmr+0x584>)
 8011300:	681a      	ldr	r2, [r3, #0]
 8011302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011304:	6a1b      	ldr	r3, [r3, #32]
 8011306:	1ad3      	subs	r3, r2, r3
 8011308:	2b28      	cmp	r3, #40	; 0x28
 801130a:	d904      	bls.n	8011316 <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 801130c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011310:	3301      	adds	r3, #1
 8011312:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8011316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011318:	7d1b      	ldrb	r3, [r3, #20]
 801131a:	2b09      	cmp	r3, #9
 801131c:	d10b      	bne.n	8011336 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 801131e:	4b59      	ldr	r3, [pc, #356]	; (8011484 <tcp_slowtmr+0x584>)
 8011320:	681a      	ldr	r2, [r3, #0]
 8011322:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011324:	6a1b      	ldr	r3, [r3, #32]
 8011326:	1ad3      	subs	r3, r2, r3
 8011328:	2bf0      	cmp	r3, #240	; 0xf0
 801132a:	d904      	bls.n	8011336 <tcp_slowtmr+0x436>
        ++pcb_remove;
 801132c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011330:	3301      	adds	r3, #1
 8011332:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8011336:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801133a:	2b00      	cmp	r3, #0
 801133c:	d060      	beq.n	8011400 <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 801133e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011340:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011344:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8011346:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011348:	f000 fbfc 	bl	8011b44 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 801134c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801134e:	2b00      	cmp	r3, #0
 8011350:	d010      	beq.n	8011374 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8011352:	4b4f      	ldr	r3, [pc, #316]	; (8011490 <tcp_slowtmr+0x590>)
 8011354:	681b      	ldr	r3, [r3, #0]
 8011356:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011358:	429a      	cmp	r2, r3
 801135a:	d106      	bne.n	801136a <tcp_slowtmr+0x46a>
 801135c:	4b4d      	ldr	r3, [pc, #308]	; (8011494 <tcp_slowtmr+0x594>)
 801135e:	f240 526d 	movw	r2, #1389	; 0x56d
 8011362:	494d      	ldr	r1, [pc, #308]	; (8011498 <tcp_slowtmr+0x598>)
 8011364:	484d      	ldr	r0, [pc, #308]	; (801149c <tcp_slowtmr+0x59c>)
 8011366:	f009 fffb 	bl	801b360 <iprintf>
        prev->next = pcb->next;
 801136a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801136c:	68da      	ldr	r2, [r3, #12]
 801136e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011370:	60da      	str	r2, [r3, #12]
 8011372:	e00f      	b.n	8011394 <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8011374:	4b46      	ldr	r3, [pc, #280]	; (8011490 <tcp_slowtmr+0x590>)
 8011376:	681b      	ldr	r3, [r3, #0]
 8011378:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801137a:	429a      	cmp	r2, r3
 801137c:	d006      	beq.n	801138c <tcp_slowtmr+0x48c>
 801137e:	4b45      	ldr	r3, [pc, #276]	; (8011494 <tcp_slowtmr+0x594>)
 8011380:	f240 5271 	movw	r2, #1393	; 0x571
 8011384:	4946      	ldr	r1, [pc, #280]	; (80114a0 <tcp_slowtmr+0x5a0>)
 8011386:	4845      	ldr	r0, [pc, #276]	; (801149c <tcp_slowtmr+0x59c>)
 8011388:	f009 ffea 	bl	801b360 <iprintf>
        tcp_active_pcbs = pcb->next;
 801138c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801138e:	68db      	ldr	r3, [r3, #12]
 8011390:	4a3f      	ldr	r2, [pc, #252]	; (8011490 <tcp_slowtmr+0x590>)
 8011392:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8011394:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8011398:	2b00      	cmp	r3, #0
 801139a:	d013      	beq.n	80113c4 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 801139c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801139e:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80113a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80113a2:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80113a4:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 80113a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80113a8:	3304      	adds	r3, #4
 80113aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80113ac:	8ad2      	ldrh	r2, [r2, #22]
 80113ae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80113b0:	8b09      	ldrh	r1, [r1, #24]
 80113b2:	9102      	str	r1, [sp, #8]
 80113b4:	9201      	str	r2, [sp, #4]
 80113b6:	9300      	str	r3, [sp, #0]
 80113b8:	462b      	mov	r3, r5
 80113ba:	4622      	mov	r2, r4
 80113bc:	4601      	mov	r1, r0
 80113be:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80113c0:	f004 f984 	bl	80156cc <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 80113c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80113c6:	691b      	ldr	r3, [r3, #16]
 80113c8:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 80113ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80113cc:	7d1b      	ldrb	r3, [r3, #20]
 80113ce:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 80113d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80113d2:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 80113d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80113d6:	68db      	ldr	r3, [r3, #12]
 80113d8:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 80113da:	6838      	ldr	r0, [r7, #0]
 80113dc:	f7ff f9f2 	bl	80107c4 <tcp_free>

      tcp_active_pcbs_changed = 0;
 80113e0:	4b30      	ldr	r3, [pc, #192]	; (80114a4 <tcp_slowtmr+0x5a4>)
 80113e2:	2200      	movs	r2, #0
 80113e4:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 80113e6:	68fb      	ldr	r3, [r7, #12]
 80113e8:	2b00      	cmp	r3, #0
 80113ea:	d004      	beq.n	80113f6 <tcp_slowtmr+0x4f6>
 80113ec:	68fb      	ldr	r3, [r7, #12]
 80113ee:	f06f 010c 	mvn.w	r1, #12
 80113f2:	68b8      	ldr	r0, [r7, #8]
 80113f4:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 80113f6:	4b2b      	ldr	r3, [pc, #172]	; (80114a4 <tcp_slowtmr+0x5a4>)
 80113f8:	781b      	ldrb	r3, [r3, #0]
 80113fa:	2b00      	cmp	r3, #0
 80113fc:	d037      	beq.n	801146e <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 80113fe:	e590      	b.n	8010f22 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8011400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011402:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8011404:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011406:	68db      	ldr	r3, [r3, #12]
 8011408:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 801140a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801140c:	7f1b      	ldrb	r3, [r3, #28]
 801140e:	3301      	adds	r3, #1
 8011410:	b2da      	uxtb	r2, r3
 8011412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011414:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8011416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011418:	7f1a      	ldrb	r2, [r3, #28]
 801141a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801141c:	7f5b      	ldrb	r3, [r3, #29]
 801141e:	429a      	cmp	r2, r3
 8011420:	d325      	bcc.n	801146e <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 8011422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011424:	2200      	movs	r2, #0
 8011426:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8011428:	4b1e      	ldr	r3, [pc, #120]	; (80114a4 <tcp_slowtmr+0x5a4>)
 801142a:	2200      	movs	r2, #0
 801142c:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 801142e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011430:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011434:	2b00      	cmp	r3, #0
 8011436:	d00b      	beq.n	8011450 <tcp_slowtmr+0x550>
 8011438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801143a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801143e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011440:	6912      	ldr	r2, [r2, #16]
 8011442:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011444:	4610      	mov	r0, r2
 8011446:	4798      	blx	r3
 8011448:	4603      	mov	r3, r0
 801144a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 801144e:	e002      	b.n	8011456 <tcp_slowtmr+0x556>
 8011450:	2300      	movs	r3, #0
 8011452:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 8011456:	4b13      	ldr	r3, [pc, #76]	; (80114a4 <tcp_slowtmr+0x5a4>)
 8011458:	781b      	ldrb	r3, [r3, #0]
 801145a:	2b00      	cmp	r3, #0
 801145c:	d000      	beq.n	8011460 <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 801145e:	e560      	b.n	8010f22 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8011460:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8011464:	2b00      	cmp	r3, #0
 8011466:	d102      	bne.n	801146e <tcp_slowtmr+0x56e>
          tcp_output(prev);
 8011468:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801146a:	f003 fb7b 	bl	8014b64 <tcp_output>
  while (pcb != NULL) {
 801146e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011470:	2b00      	cmp	r3, #0
 8011472:	f47f ad5c 	bne.w	8010f2e <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8011476:	2300      	movs	r3, #0
 8011478:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 801147a:	4b0b      	ldr	r3, [pc, #44]	; (80114a8 <tcp_slowtmr+0x5a8>)
 801147c:	681b      	ldr	r3, [r3, #0]
 801147e:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8011480:	e067      	b.n	8011552 <tcp_slowtmr+0x652>
 8011482:	bf00      	nop
 8011484:	20007634 	.word	0x20007634
 8011488:	10624dd3 	.word	0x10624dd3
 801148c:	000124f8 	.word	0x000124f8
 8011490:	20007630 	.word	0x20007630
 8011494:	08021634 	.word	0x08021634
 8011498:	08021a6c 	.word	0x08021a6c
 801149c:	08021678 	.word	0x08021678
 80114a0:	08021a98 	.word	0x08021a98
 80114a4:	2000762c 	.word	0x2000762c
 80114a8:	20007640 	.word	0x20007640
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80114ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80114ae:	7d1b      	ldrb	r3, [r3, #20]
 80114b0:	2b0a      	cmp	r3, #10
 80114b2:	d006      	beq.n	80114c2 <tcp_slowtmr+0x5c2>
 80114b4:	4b2b      	ldr	r3, [pc, #172]	; (8011564 <tcp_slowtmr+0x664>)
 80114b6:	f240 52a1 	movw	r2, #1441	; 0x5a1
 80114ba:	492b      	ldr	r1, [pc, #172]	; (8011568 <tcp_slowtmr+0x668>)
 80114bc:	482b      	ldr	r0, [pc, #172]	; (801156c <tcp_slowtmr+0x66c>)
 80114be:	f009 ff4f 	bl	801b360 <iprintf>
    pcb_remove = 0;
 80114c2:	2300      	movs	r3, #0
 80114c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80114c8:	4b29      	ldr	r3, [pc, #164]	; (8011570 <tcp_slowtmr+0x670>)
 80114ca:	681a      	ldr	r2, [r3, #0]
 80114cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80114ce:	6a1b      	ldr	r3, [r3, #32]
 80114d0:	1ad3      	subs	r3, r2, r3
 80114d2:	2bf0      	cmp	r3, #240	; 0xf0
 80114d4:	d904      	bls.n	80114e0 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 80114d6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80114da:	3301      	adds	r3, #1
 80114dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80114e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80114e4:	2b00      	cmp	r3, #0
 80114e6:	d02f      	beq.n	8011548 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 80114e8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80114ea:	f000 fb2b 	bl	8011b44 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 80114ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80114f0:	2b00      	cmp	r3, #0
 80114f2:	d010      	beq.n	8011516 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 80114f4:	4b1f      	ldr	r3, [pc, #124]	; (8011574 <tcp_slowtmr+0x674>)
 80114f6:	681b      	ldr	r3, [r3, #0]
 80114f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80114fa:	429a      	cmp	r2, r3
 80114fc:	d106      	bne.n	801150c <tcp_slowtmr+0x60c>
 80114fe:	4b19      	ldr	r3, [pc, #100]	; (8011564 <tcp_slowtmr+0x664>)
 8011500:	f240 52af 	movw	r2, #1455	; 0x5af
 8011504:	491c      	ldr	r1, [pc, #112]	; (8011578 <tcp_slowtmr+0x678>)
 8011506:	4819      	ldr	r0, [pc, #100]	; (801156c <tcp_slowtmr+0x66c>)
 8011508:	f009 ff2a 	bl	801b360 <iprintf>
        prev->next = pcb->next;
 801150c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801150e:	68da      	ldr	r2, [r3, #12]
 8011510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011512:	60da      	str	r2, [r3, #12]
 8011514:	e00f      	b.n	8011536 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8011516:	4b17      	ldr	r3, [pc, #92]	; (8011574 <tcp_slowtmr+0x674>)
 8011518:	681b      	ldr	r3, [r3, #0]
 801151a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801151c:	429a      	cmp	r2, r3
 801151e:	d006      	beq.n	801152e <tcp_slowtmr+0x62e>
 8011520:	4b10      	ldr	r3, [pc, #64]	; (8011564 <tcp_slowtmr+0x664>)
 8011522:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8011526:	4915      	ldr	r1, [pc, #84]	; (801157c <tcp_slowtmr+0x67c>)
 8011528:	4810      	ldr	r0, [pc, #64]	; (801156c <tcp_slowtmr+0x66c>)
 801152a:	f009 ff19 	bl	801b360 <iprintf>
        tcp_tw_pcbs = pcb->next;
 801152e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011530:	68db      	ldr	r3, [r3, #12]
 8011532:	4a10      	ldr	r2, [pc, #64]	; (8011574 <tcp_slowtmr+0x674>)
 8011534:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8011536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011538:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 801153a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801153c:	68db      	ldr	r3, [r3, #12]
 801153e:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8011540:	69f8      	ldr	r0, [r7, #28]
 8011542:	f7ff f93f 	bl	80107c4 <tcp_free>
 8011546:	e004      	b.n	8011552 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8011548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801154a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 801154c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801154e:	68db      	ldr	r3, [r3, #12]
 8011550:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8011552:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011554:	2b00      	cmp	r3, #0
 8011556:	d1a9      	bne.n	80114ac <tcp_slowtmr+0x5ac>
    }
  }
}
 8011558:	bf00      	nop
 801155a:	bf00      	nop
 801155c:	3730      	adds	r7, #48	; 0x30
 801155e:	46bd      	mov	sp, r7
 8011560:	bdb0      	pop	{r4, r5, r7, pc}
 8011562:	bf00      	nop
 8011564:	08021634 	.word	0x08021634
 8011568:	08021ac4 	.word	0x08021ac4
 801156c:	08021678 	.word	0x08021678
 8011570:	20007634 	.word	0x20007634
 8011574:	20007640 	.word	0x20007640
 8011578:	08021af4 	.word	0x08021af4
 801157c:	08021b1c 	.word	0x08021b1c

08011580 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8011580:	b580      	push	{r7, lr}
 8011582:	b082      	sub	sp, #8
 8011584:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8011586:	4b2d      	ldr	r3, [pc, #180]	; (801163c <tcp_fasttmr+0xbc>)
 8011588:	781b      	ldrb	r3, [r3, #0]
 801158a:	3301      	adds	r3, #1
 801158c:	b2da      	uxtb	r2, r3
 801158e:	4b2b      	ldr	r3, [pc, #172]	; (801163c <tcp_fasttmr+0xbc>)
 8011590:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8011592:	4b2b      	ldr	r3, [pc, #172]	; (8011640 <tcp_fasttmr+0xc0>)
 8011594:	681b      	ldr	r3, [r3, #0]
 8011596:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8011598:	e048      	b.n	801162c <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 801159a:	687b      	ldr	r3, [r7, #4]
 801159c:	7f9a      	ldrb	r2, [r3, #30]
 801159e:	4b27      	ldr	r3, [pc, #156]	; (801163c <tcp_fasttmr+0xbc>)
 80115a0:	781b      	ldrb	r3, [r3, #0]
 80115a2:	429a      	cmp	r2, r3
 80115a4:	d03f      	beq.n	8011626 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 80115a6:	4b25      	ldr	r3, [pc, #148]	; (801163c <tcp_fasttmr+0xbc>)
 80115a8:	781a      	ldrb	r2, [r3, #0]
 80115aa:	687b      	ldr	r3, [r7, #4]
 80115ac:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 80115ae:	687b      	ldr	r3, [r7, #4]
 80115b0:	8b5b      	ldrh	r3, [r3, #26]
 80115b2:	f003 0301 	and.w	r3, r3, #1
 80115b6:	2b00      	cmp	r3, #0
 80115b8:	d010      	beq.n	80115dc <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 80115ba:	687b      	ldr	r3, [r7, #4]
 80115bc:	8b5b      	ldrh	r3, [r3, #26]
 80115be:	f043 0302 	orr.w	r3, r3, #2
 80115c2:	b29a      	uxth	r2, r3
 80115c4:	687b      	ldr	r3, [r7, #4]
 80115c6:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 80115c8:	6878      	ldr	r0, [r7, #4]
 80115ca:	f003 facb 	bl	8014b64 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80115ce:	687b      	ldr	r3, [r7, #4]
 80115d0:	8b5b      	ldrh	r3, [r3, #26]
 80115d2:	f023 0303 	bic.w	r3, r3, #3
 80115d6:	b29a      	uxth	r2, r3
 80115d8:	687b      	ldr	r3, [r7, #4]
 80115da:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 80115dc:	687b      	ldr	r3, [r7, #4]
 80115de:	8b5b      	ldrh	r3, [r3, #26]
 80115e0:	f003 0308 	and.w	r3, r3, #8
 80115e4:	2b00      	cmp	r3, #0
 80115e6:	d009      	beq.n	80115fc <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 80115e8:	687b      	ldr	r3, [r7, #4]
 80115ea:	8b5b      	ldrh	r3, [r3, #26]
 80115ec:	f023 0308 	bic.w	r3, r3, #8
 80115f0:	b29a      	uxth	r2, r3
 80115f2:	687b      	ldr	r3, [r7, #4]
 80115f4:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 80115f6:	6878      	ldr	r0, [r7, #4]
 80115f8:	f7ff fa78 	bl	8010aec <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 80115fc:	687b      	ldr	r3, [r7, #4]
 80115fe:	68db      	ldr	r3, [r3, #12]
 8011600:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8011602:	687b      	ldr	r3, [r7, #4]
 8011604:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011606:	2b00      	cmp	r3, #0
 8011608:	d00a      	beq.n	8011620 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 801160a:	4b0e      	ldr	r3, [pc, #56]	; (8011644 <tcp_fasttmr+0xc4>)
 801160c:	2200      	movs	r2, #0
 801160e:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8011610:	6878      	ldr	r0, [r7, #4]
 8011612:	f000 f819 	bl	8011648 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8011616:	4b0b      	ldr	r3, [pc, #44]	; (8011644 <tcp_fasttmr+0xc4>)
 8011618:	781b      	ldrb	r3, [r3, #0]
 801161a:	2b00      	cmp	r3, #0
 801161c:	d000      	beq.n	8011620 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 801161e:	e7b8      	b.n	8011592 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8011620:	683b      	ldr	r3, [r7, #0]
 8011622:	607b      	str	r3, [r7, #4]
 8011624:	e002      	b.n	801162c <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8011626:	687b      	ldr	r3, [r7, #4]
 8011628:	68db      	ldr	r3, [r3, #12]
 801162a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 801162c:	687b      	ldr	r3, [r7, #4]
 801162e:	2b00      	cmp	r3, #0
 8011630:	d1b3      	bne.n	801159a <tcp_fasttmr+0x1a>
    }
  }
}
 8011632:	bf00      	nop
 8011634:	bf00      	nop
 8011636:	3708      	adds	r7, #8
 8011638:	46bd      	mov	sp, r7
 801163a:	bd80      	pop	{r7, pc}
 801163c:	200004de 	.word	0x200004de
 8011640:	20007630 	.word	0x20007630
 8011644:	2000762c 	.word	0x2000762c

08011648 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8011648:	b590      	push	{r4, r7, lr}
 801164a:	b085      	sub	sp, #20
 801164c:	af00      	add	r7, sp, #0
 801164e:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8011650:	687b      	ldr	r3, [r7, #4]
 8011652:	2b00      	cmp	r3, #0
 8011654:	d109      	bne.n	801166a <tcp_process_refused_data+0x22>
 8011656:	4b37      	ldr	r3, [pc, #220]	; (8011734 <tcp_process_refused_data+0xec>)
 8011658:	f240 6209 	movw	r2, #1545	; 0x609
 801165c:	4936      	ldr	r1, [pc, #216]	; (8011738 <tcp_process_refused_data+0xf0>)
 801165e:	4837      	ldr	r0, [pc, #220]	; (801173c <tcp_process_refused_data+0xf4>)
 8011660:	f009 fe7e 	bl	801b360 <iprintf>
 8011664:	f06f 030f 	mvn.w	r3, #15
 8011668:	e060      	b.n	801172c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 801166a:	687b      	ldr	r3, [r7, #4]
 801166c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801166e:	7b5b      	ldrb	r3, [r3, #13]
 8011670:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8011672:	687b      	ldr	r3, [r7, #4]
 8011674:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011676:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8011678:	687b      	ldr	r3, [r7, #4]
 801167a:	2200      	movs	r2, #0
 801167c:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 801167e:	687b      	ldr	r3, [r7, #4]
 8011680:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011684:	2b00      	cmp	r3, #0
 8011686:	d00b      	beq.n	80116a0 <tcp_process_refused_data+0x58>
 8011688:	687b      	ldr	r3, [r7, #4]
 801168a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 801168e:	687b      	ldr	r3, [r7, #4]
 8011690:	6918      	ldr	r0, [r3, #16]
 8011692:	2300      	movs	r3, #0
 8011694:	68ba      	ldr	r2, [r7, #8]
 8011696:	6879      	ldr	r1, [r7, #4]
 8011698:	47a0      	blx	r4
 801169a:	4603      	mov	r3, r0
 801169c:	73fb      	strb	r3, [r7, #15]
 801169e:	e007      	b.n	80116b0 <tcp_process_refused_data+0x68>
 80116a0:	2300      	movs	r3, #0
 80116a2:	68ba      	ldr	r2, [r7, #8]
 80116a4:	6879      	ldr	r1, [r7, #4]
 80116a6:	2000      	movs	r0, #0
 80116a8:	f000 f8a4 	bl	80117f4 <tcp_recv_null>
 80116ac:	4603      	mov	r3, r0
 80116ae:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 80116b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80116b4:	2b00      	cmp	r3, #0
 80116b6:	d12a      	bne.n	801170e <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 80116b8:	7bbb      	ldrb	r3, [r7, #14]
 80116ba:	f003 0320 	and.w	r3, r3, #32
 80116be:	2b00      	cmp	r3, #0
 80116c0:	d033      	beq.n	801172a <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80116c2:	687b      	ldr	r3, [r7, #4]
 80116c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80116c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80116ca:	d005      	beq.n	80116d8 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 80116cc:	687b      	ldr	r3, [r7, #4]
 80116ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80116d0:	3301      	adds	r3, #1
 80116d2:	b29a      	uxth	r2, r3
 80116d4:	687b      	ldr	r3, [r7, #4]
 80116d6:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 80116d8:	687b      	ldr	r3, [r7, #4]
 80116da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80116de:	2b00      	cmp	r3, #0
 80116e0:	d00b      	beq.n	80116fa <tcp_process_refused_data+0xb2>
 80116e2:	687b      	ldr	r3, [r7, #4]
 80116e4:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80116e8:	687b      	ldr	r3, [r7, #4]
 80116ea:	6918      	ldr	r0, [r3, #16]
 80116ec:	2300      	movs	r3, #0
 80116ee:	2200      	movs	r2, #0
 80116f0:	6879      	ldr	r1, [r7, #4]
 80116f2:	47a0      	blx	r4
 80116f4:	4603      	mov	r3, r0
 80116f6:	73fb      	strb	r3, [r7, #15]
 80116f8:	e001      	b.n	80116fe <tcp_process_refused_data+0xb6>
 80116fa:	2300      	movs	r3, #0
 80116fc:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 80116fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011702:	f113 0f0d 	cmn.w	r3, #13
 8011706:	d110      	bne.n	801172a <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8011708:	f06f 030c 	mvn.w	r3, #12
 801170c:	e00e      	b.n	801172c <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 801170e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011712:	f113 0f0d 	cmn.w	r3, #13
 8011716:	d102      	bne.n	801171e <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8011718:	f06f 030c 	mvn.w	r3, #12
 801171c:	e006      	b.n	801172c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 801171e:	687b      	ldr	r3, [r7, #4]
 8011720:	68ba      	ldr	r2, [r7, #8]
 8011722:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8011724:	f06f 0304 	mvn.w	r3, #4
 8011728:	e000      	b.n	801172c <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 801172a:	2300      	movs	r3, #0
}
 801172c:	4618      	mov	r0, r3
 801172e:	3714      	adds	r7, #20
 8011730:	46bd      	mov	sp, r7
 8011732:	bd90      	pop	{r4, r7, pc}
 8011734:	08021634 	.word	0x08021634
 8011738:	08021b44 	.word	0x08021b44
 801173c:	08021678 	.word	0x08021678

08011740 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8011740:	b580      	push	{r7, lr}
 8011742:	b084      	sub	sp, #16
 8011744:	af00      	add	r7, sp, #0
 8011746:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8011748:	e007      	b.n	801175a <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 801174a:	687b      	ldr	r3, [r7, #4]
 801174c:	681b      	ldr	r3, [r3, #0]
 801174e:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8011750:	6878      	ldr	r0, [r7, #4]
 8011752:	f000 f80a 	bl	801176a <tcp_seg_free>
    seg = next;
 8011756:	68fb      	ldr	r3, [r7, #12]
 8011758:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 801175a:	687b      	ldr	r3, [r7, #4]
 801175c:	2b00      	cmp	r3, #0
 801175e:	d1f4      	bne.n	801174a <tcp_segs_free+0xa>
  }
}
 8011760:	bf00      	nop
 8011762:	bf00      	nop
 8011764:	3710      	adds	r7, #16
 8011766:	46bd      	mov	sp, r7
 8011768:	bd80      	pop	{r7, pc}

0801176a <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 801176a:	b580      	push	{r7, lr}
 801176c:	b082      	sub	sp, #8
 801176e:	af00      	add	r7, sp, #0
 8011770:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8011772:	687b      	ldr	r3, [r7, #4]
 8011774:	2b00      	cmp	r3, #0
 8011776:	d00c      	beq.n	8011792 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8011778:	687b      	ldr	r3, [r7, #4]
 801177a:	685b      	ldr	r3, [r3, #4]
 801177c:	2b00      	cmp	r3, #0
 801177e:	d004      	beq.n	801178a <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8011780:	687b      	ldr	r3, [r7, #4]
 8011782:	685b      	ldr	r3, [r3, #4]
 8011784:	4618      	mov	r0, r3
 8011786:	f7fe fd6d 	bl	8010264 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 801178a:	6879      	ldr	r1, [r7, #4]
 801178c:	2003      	movs	r0, #3
 801178e:	f7fd ff6f 	bl	800f670 <memp_free>
  }
}
 8011792:	bf00      	nop
 8011794:	3708      	adds	r7, #8
 8011796:	46bd      	mov	sp, r7
 8011798:	bd80      	pop	{r7, pc}
	...

0801179c <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 801179c:	b580      	push	{r7, lr}
 801179e:	b084      	sub	sp, #16
 80117a0:	af00      	add	r7, sp, #0
 80117a2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 80117a4:	687b      	ldr	r3, [r7, #4]
 80117a6:	2b00      	cmp	r3, #0
 80117a8:	d106      	bne.n	80117b8 <tcp_seg_copy+0x1c>
 80117aa:	4b0f      	ldr	r3, [pc, #60]	; (80117e8 <tcp_seg_copy+0x4c>)
 80117ac:	f240 6282 	movw	r2, #1666	; 0x682
 80117b0:	490e      	ldr	r1, [pc, #56]	; (80117ec <tcp_seg_copy+0x50>)
 80117b2:	480f      	ldr	r0, [pc, #60]	; (80117f0 <tcp_seg_copy+0x54>)
 80117b4:	f009 fdd4 	bl	801b360 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 80117b8:	2003      	movs	r0, #3
 80117ba:	f7fd ff0d 	bl	800f5d8 <memp_malloc>
 80117be:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 80117c0:	68fb      	ldr	r3, [r7, #12]
 80117c2:	2b00      	cmp	r3, #0
 80117c4:	d101      	bne.n	80117ca <tcp_seg_copy+0x2e>
    return NULL;
 80117c6:	2300      	movs	r3, #0
 80117c8:	e00a      	b.n	80117e0 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 80117ca:	2210      	movs	r2, #16
 80117cc:	6879      	ldr	r1, [r7, #4]
 80117ce:	68f8      	ldr	r0, [r7, #12]
 80117d0:	f009 f882 	bl	801a8d8 <memcpy>
  pbuf_ref(cseg->p);
 80117d4:	68fb      	ldr	r3, [r7, #12]
 80117d6:	685b      	ldr	r3, [r3, #4]
 80117d8:	4618      	mov	r0, r3
 80117da:	f7fe fde3 	bl	80103a4 <pbuf_ref>
  return cseg;
 80117de:	68fb      	ldr	r3, [r7, #12]
}
 80117e0:	4618      	mov	r0, r3
 80117e2:	3710      	adds	r7, #16
 80117e4:	46bd      	mov	sp, r7
 80117e6:	bd80      	pop	{r7, pc}
 80117e8:	08021634 	.word	0x08021634
 80117ec:	08021b88 	.word	0x08021b88
 80117f0:	08021678 	.word	0x08021678

080117f4 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 80117f4:	b580      	push	{r7, lr}
 80117f6:	b084      	sub	sp, #16
 80117f8:	af00      	add	r7, sp, #0
 80117fa:	60f8      	str	r0, [r7, #12]
 80117fc:	60b9      	str	r1, [r7, #8]
 80117fe:	607a      	str	r2, [r7, #4]
 8011800:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8011802:	68bb      	ldr	r3, [r7, #8]
 8011804:	2b00      	cmp	r3, #0
 8011806:	d109      	bne.n	801181c <tcp_recv_null+0x28>
 8011808:	4b12      	ldr	r3, [pc, #72]	; (8011854 <tcp_recv_null+0x60>)
 801180a:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 801180e:	4912      	ldr	r1, [pc, #72]	; (8011858 <tcp_recv_null+0x64>)
 8011810:	4812      	ldr	r0, [pc, #72]	; (801185c <tcp_recv_null+0x68>)
 8011812:	f009 fda5 	bl	801b360 <iprintf>
 8011816:	f06f 030f 	mvn.w	r3, #15
 801181a:	e016      	b.n	801184a <tcp_recv_null+0x56>

  if (p != NULL) {
 801181c:	687b      	ldr	r3, [r7, #4]
 801181e:	2b00      	cmp	r3, #0
 8011820:	d009      	beq.n	8011836 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8011822:	687b      	ldr	r3, [r7, #4]
 8011824:	891b      	ldrh	r3, [r3, #8]
 8011826:	4619      	mov	r1, r3
 8011828:	68b8      	ldr	r0, [r7, #8]
 801182a:	f7ff fb19 	bl	8010e60 <tcp_recved>
    pbuf_free(p);
 801182e:	6878      	ldr	r0, [r7, #4]
 8011830:	f7fe fd18 	bl	8010264 <pbuf_free>
 8011834:	e008      	b.n	8011848 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8011836:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801183a:	2b00      	cmp	r3, #0
 801183c:	d104      	bne.n	8011848 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 801183e:	68b8      	ldr	r0, [r7, #8]
 8011840:	f7ff f9be 	bl	8010bc0 <tcp_close>
 8011844:	4603      	mov	r3, r0
 8011846:	e000      	b.n	801184a <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8011848:	2300      	movs	r3, #0
}
 801184a:	4618      	mov	r0, r3
 801184c:	3710      	adds	r7, #16
 801184e:	46bd      	mov	sp, r7
 8011850:	bd80      	pop	{r7, pc}
 8011852:	bf00      	nop
 8011854:	08021634 	.word	0x08021634
 8011858:	08021ba4 	.word	0x08021ba4
 801185c:	08021678 	.word	0x08021678

08011860 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8011860:	b580      	push	{r7, lr}
 8011862:	b086      	sub	sp, #24
 8011864:	af00      	add	r7, sp, #0
 8011866:	4603      	mov	r3, r0
 8011868:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 801186a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801186e:	2b00      	cmp	r3, #0
 8011870:	db01      	blt.n	8011876 <tcp_kill_prio+0x16>
 8011872:	79fb      	ldrb	r3, [r7, #7]
 8011874:	e000      	b.n	8011878 <tcp_kill_prio+0x18>
 8011876:	237f      	movs	r3, #127	; 0x7f
 8011878:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 801187a:	7afb      	ldrb	r3, [r7, #11]
 801187c:	2b00      	cmp	r3, #0
 801187e:	d034      	beq.n	80118ea <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8011880:	7afb      	ldrb	r3, [r7, #11]
 8011882:	3b01      	subs	r3, #1
 8011884:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8011886:	2300      	movs	r3, #0
 8011888:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 801188a:	2300      	movs	r3, #0
 801188c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801188e:	4b19      	ldr	r3, [pc, #100]	; (80118f4 <tcp_kill_prio+0x94>)
 8011890:	681b      	ldr	r3, [r3, #0]
 8011892:	617b      	str	r3, [r7, #20]
 8011894:	e01f      	b.n	80118d6 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8011896:	697b      	ldr	r3, [r7, #20]
 8011898:	7d5b      	ldrb	r3, [r3, #21]
 801189a:	7afa      	ldrb	r2, [r7, #11]
 801189c:	429a      	cmp	r2, r3
 801189e:	d80c      	bhi.n	80118ba <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80118a0:	697b      	ldr	r3, [r7, #20]
 80118a2:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 80118a4:	7afa      	ldrb	r2, [r7, #11]
 80118a6:	429a      	cmp	r2, r3
 80118a8:	d112      	bne.n	80118d0 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80118aa:	4b13      	ldr	r3, [pc, #76]	; (80118f8 <tcp_kill_prio+0x98>)
 80118ac:	681a      	ldr	r2, [r3, #0]
 80118ae:	697b      	ldr	r3, [r7, #20]
 80118b0:	6a1b      	ldr	r3, [r3, #32]
 80118b2:	1ad3      	subs	r3, r2, r3
 80118b4:	68fa      	ldr	r2, [r7, #12]
 80118b6:	429a      	cmp	r2, r3
 80118b8:	d80a      	bhi.n	80118d0 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 80118ba:	4b0f      	ldr	r3, [pc, #60]	; (80118f8 <tcp_kill_prio+0x98>)
 80118bc:	681a      	ldr	r2, [r3, #0]
 80118be:	697b      	ldr	r3, [r7, #20]
 80118c0:	6a1b      	ldr	r3, [r3, #32]
 80118c2:	1ad3      	subs	r3, r2, r3
 80118c4:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 80118c6:	697b      	ldr	r3, [r7, #20]
 80118c8:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 80118ca:	697b      	ldr	r3, [r7, #20]
 80118cc:	7d5b      	ldrb	r3, [r3, #21]
 80118ce:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80118d0:	697b      	ldr	r3, [r7, #20]
 80118d2:	68db      	ldr	r3, [r3, #12]
 80118d4:	617b      	str	r3, [r7, #20]
 80118d6:	697b      	ldr	r3, [r7, #20]
 80118d8:	2b00      	cmp	r3, #0
 80118da:	d1dc      	bne.n	8011896 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 80118dc:	693b      	ldr	r3, [r7, #16]
 80118de:	2b00      	cmp	r3, #0
 80118e0:	d004      	beq.n	80118ec <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80118e2:	6938      	ldr	r0, [r7, #16]
 80118e4:	f7ff fa56 	bl	8010d94 <tcp_abort>
 80118e8:	e000      	b.n	80118ec <tcp_kill_prio+0x8c>
    return;
 80118ea:	bf00      	nop
  }
}
 80118ec:	3718      	adds	r7, #24
 80118ee:	46bd      	mov	sp, r7
 80118f0:	bd80      	pop	{r7, pc}
 80118f2:	bf00      	nop
 80118f4:	20007630 	.word	0x20007630
 80118f8:	20007634 	.word	0x20007634

080118fc <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 80118fc:	b580      	push	{r7, lr}
 80118fe:	b086      	sub	sp, #24
 8011900:	af00      	add	r7, sp, #0
 8011902:	4603      	mov	r3, r0
 8011904:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8011906:	79fb      	ldrb	r3, [r7, #7]
 8011908:	2b08      	cmp	r3, #8
 801190a:	d009      	beq.n	8011920 <tcp_kill_state+0x24>
 801190c:	79fb      	ldrb	r3, [r7, #7]
 801190e:	2b09      	cmp	r3, #9
 8011910:	d006      	beq.n	8011920 <tcp_kill_state+0x24>
 8011912:	4b1a      	ldr	r3, [pc, #104]	; (801197c <tcp_kill_state+0x80>)
 8011914:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8011918:	4919      	ldr	r1, [pc, #100]	; (8011980 <tcp_kill_state+0x84>)
 801191a:	481a      	ldr	r0, [pc, #104]	; (8011984 <tcp_kill_state+0x88>)
 801191c:	f009 fd20 	bl	801b360 <iprintf>

  inactivity = 0;
 8011920:	2300      	movs	r3, #0
 8011922:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8011924:	2300      	movs	r3, #0
 8011926:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8011928:	4b17      	ldr	r3, [pc, #92]	; (8011988 <tcp_kill_state+0x8c>)
 801192a:	681b      	ldr	r3, [r3, #0]
 801192c:	617b      	str	r3, [r7, #20]
 801192e:	e017      	b.n	8011960 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8011930:	697b      	ldr	r3, [r7, #20]
 8011932:	7d1b      	ldrb	r3, [r3, #20]
 8011934:	79fa      	ldrb	r2, [r7, #7]
 8011936:	429a      	cmp	r2, r3
 8011938:	d10f      	bne.n	801195a <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801193a:	4b14      	ldr	r3, [pc, #80]	; (801198c <tcp_kill_state+0x90>)
 801193c:	681a      	ldr	r2, [r3, #0]
 801193e:	697b      	ldr	r3, [r7, #20]
 8011940:	6a1b      	ldr	r3, [r3, #32]
 8011942:	1ad3      	subs	r3, r2, r3
 8011944:	68fa      	ldr	r2, [r7, #12]
 8011946:	429a      	cmp	r2, r3
 8011948:	d807      	bhi.n	801195a <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 801194a:	4b10      	ldr	r3, [pc, #64]	; (801198c <tcp_kill_state+0x90>)
 801194c:	681a      	ldr	r2, [r3, #0]
 801194e:	697b      	ldr	r3, [r7, #20]
 8011950:	6a1b      	ldr	r3, [r3, #32]
 8011952:	1ad3      	subs	r3, r2, r3
 8011954:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8011956:	697b      	ldr	r3, [r7, #20]
 8011958:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801195a:	697b      	ldr	r3, [r7, #20]
 801195c:	68db      	ldr	r3, [r3, #12]
 801195e:	617b      	str	r3, [r7, #20]
 8011960:	697b      	ldr	r3, [r7, #20]
 8011962:	2b00      	cmp	r3, #0
 8011964:	d1e4      	bne.n	8011930 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8011966:	693b      	ldr	r3, [r7, #16]
 8011968:	2b00      	cmp	r3, #0
 801196a:	d003      	beq.n	8011974 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 801196c:	2100      	movs	r1, #0
 801196e:	6938      	ldr	r0, [r7, #16]
 8011970:	f7ff f952 	bl	8010c18 <tcp_abandon>
  }
}
 8011974:	bf00      	nop
 8011976:	3718      	adds	r7, #24
 8011978:	46bd      	mov	sp, r7
 801197a:	bd80      	pop	{r7, pc}
 801197c:	08021634 	.word	0x08021634
 8011980:	08021bc0 	.word	0x08021bc0
 8011984:	08021678 	.word	0x08021678
 8011988:	20007630 	.word	0x20007630
 801198c:	20007634 	.word	0x20007634

08011990 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8011990:	b580      	push	{r7, lr}
 8011992:	b084      	sub	sp, #16
 8011994:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8011996:	2300      	movs	r3, #0
 8011998:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 801199a:	2300      	movs	r3, #0
 801199c:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801199e:	4b12      	ldr	r3, [pc, #72]	; (80119e8 <tcp_kill_timewait+0x58>)
 80119a0:	681b      	ldr	r3, [r3, #0]
 80119a2:	60fb      	str	r3, [r7, #12]
 80119a4:	e012      	b.n	80119cc <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80119a6:	4b11      	ldr	r3, [pc, #68]	; (80119ec <tcp_kill_timewait+0x5c>)
 80119a8:	681a      	ldr	r2, [r3, #0]
 80119aa:	68fb      	ldr	r3, [r7, #12]
 80119ac:	6a1b      	ldr	r3, [r3, #32]
 80119ae:	1ad3      	subs	r3, r2, r3
 80119b0:	687a      	ldr	r2, [r7, #4]
 80119b2:	429a      	cmp	r2, r3
 80119b4:	d807      	bhi.n	80119c6 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 80119b6:	4b0d      	ldr	r3, [pc, #52]	; (80119ec <tcp_kill_timewait+0x5c>)
 80119b8:	681a      	ldr	r2, [r3, #0]
 80119ba:	68fb      	ldr	r3, [r7, #12]
 80119bc:	6a1b      	ldr	r3, [r3, #32]
 80119be:	1ad3      	subs	r3, r2, r3
 80119c0:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 80119c2:	68fb      	ldr	r3, [r7, #12]
 80119c4:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80119c6:	68fb      	ldr	r3, [r7, #12]
 80119c8:	68db      	ldr	r3, [r3, #12]
 80119ca:	60fb      	str	r3, [r7, #12]
 80119cc:	68fb      	ldr	r3, [r7, #12]
 80119ce:	2b00      	cmp	r3, #0
 80119d0:	d1e9      	bne.n	80119a6 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 80119d2:	68bb      	ldr	r3, [r7, #8]
 80119d4:	2b00      	cmp	r3, #0
 80119d6:	d002      	beq.n	80119de <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80119d8:	68b8      	ldr	r0, [r7, #8]
 80119da:	f7ff f9db 	bl	8010d94 <tcp_abort>
  }
}
 80119de:	bf00      	nop
 80119e0:	3710      	adds	r7, #16
 80119e2:	46bd      	mov	sp, r7
 80119e4:	bd80      	pop	{r7, pc}
 80119e6:	bf00      	nop
 80119e8:	20007640 	.word	0x20007640
 80119ec:	20007634 	.word	0x20007634

080119f0 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 80119f0:	b580      	push	{r7, lr}
 80119f2:	b082      	sub	sp, #8
 80119f4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 80119f6:	4b10      	ldr	r3, [pc, #64]	; (8011a38 <tcp_handle_closepend+0x48>)
 80119f8:	681b      	ldr	r3, [r3, #0]
 80119fa:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80119fc:	e014      	b.n	8011a28 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 80119fe:	687b      	ldr	r3, [r7, #4]
 8011a00:	68db      	ldr	r3, [r3, #12]
 8011a02:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8011a04:	687b      	ldr	r3, [r7, #4]
 8011a06:	8b5b      	ldrh	r3, [r3, #26]
 8011a08:	f003 0308 	and.w	r3, r3, #8
 8011a0c:	2b00      	cmp	r3, #0
 8011a0e:	d009      	beq.n	8011a24 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8011a10:	687b      	ldr	r3, [r7, #4]
 8011a12:	8b5b      	ldrh	r3, [r3, #26]
 8011a14:	f023 0308 	bic.w	r3, r3, #8
 8011a18:	b29a      	uxth	r2, r3
 8011a1a:	687b      	ldr	r3, [r7, #4]
 8011a1c:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8011a1e:	6878      	ldr	r0, [r7, #4]
 8011a20:	f7ff f864 	bl	8010aec <tcp_close_shutdown_fin>
    }
    pcb = next;
 8011a24:	683b      	ldr	r3, [r7, #0]
 8011a26:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8011a28:	687b      	ldr	r3, [r7, #4]
 8011a2a:	2b00      	cmp	r3, #0
 8011a2c:	d1e7      	bne.n	80119fe <tcp_handle_closepend+0xe>
  }
}
 8011a2e:	bf00      	nop
 8011a30:	bf00      	nop
 8011a32:	3708      	adds	r7, #8
 8011a34:	46bd      	mov	sp, r7
 8011a36:	bd80      	pop	{r7, pc}
 8011a38:	20007630 	.word	0x20007630

08011a3c <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8011a3c:	b580      	push	{r7, lr}
 8011a3e:	b084      	sub	sp, #16
 8011a40:	af00      	add	r7, sp, #0
 8011a42:	4603      	mov	r3, r0
 8011a44:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8011a46:	2001      	movs	r0, #1
 8011a48:	f7fd fdc6 	bl	800f5d8 <memp_malloc>
 8011a4c:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8011a4e:	68fb      	ldr	r3, [r7, #12]
 8011a50:	2b00      	cmp	r3, #0
 8011a52:	d126      	bne.n	8011aa2 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8011a54:	f7ff ffcc 	bl	80119f0 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8011a58:	f7ff ff9a 	bl	8011990 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8011a5c:	2001      	movs	r0, #1
 8011a5e:	f7fd fdbb 	bl	800f5d8 <memp_malloc>
 8011a62:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8011a64:	68fb      	ldr	r3, [r7, #12]
 8011a66:	2b00      	cmp	r3, #0
 8011a68:	d11b      	bne.n	8011aa2 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8011a6a:	2009      	movs	r0, #9
 8011a6c:	f7ff ff46 	bl	80118fc <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8011a70:	2001      	movs	r0, #1
 8011a72:	f7fd fdb1 	bl	800f5d8 <memp_malloc>
 8011a76:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8011a78:	68fb      	ldr	r3, [r7, #12]
 8011a7a:	2b00      	cmp	r3, #0
 8011a7c:	d111      	bne.n	8011aa2 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8011a7e:	2008      	movs	r0, #8
 8011a80:	f7ff ff3c 	bl	80118fc <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8011a84:	2001      	movs	r0, #1
 8011a86:	f7fd fda7 	bl	800f5d8 <memp_malloc>
 8011a8a:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8011a8c:	68fb      	ldr	r3, [r7, #12]
 8011a8e:	2b00      	cmp	r3, #0
 8011a90:	d107      	bne.n	8011aa2 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8011a92:	79fb      	ldrb	r3, [r7, #7]
 8011a94:	4618      	mov	r0, r3
 8011a96:	f7ff fee3 	bl	8011860 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8011a9a:	2001      	movs	r0, #1
 8011a9c:	f7fd fd9c 	bl	800f5d8 <memp_malloc>
 8011aa0:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8011aa2:	68fb      	ldr	r3, [r7, #12]
 8011aa4:	2b00      	cmp	r3, #0
 8011aa6:	d03f      	beq.n	8011b28 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8011aa8:	229c      	movs	r2, #156	; 0x9c
 8011aaa:	2100      	movs	r1, #0
 8011aac:	68f8      	ldr	r0, [r7, #12]
 8011aae:	f008 ff3b 	bl	801a928 <memset>
    pcb->prio = prio;
 8011ab2:	68fb      	ldr	r3, [r7, #12]
 8011ab4:	79fa      	ldrb	r2, [r7, #7]
 8011ab6:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8011ab8:	68fb      	ldr	r3, [r7, #12]
 8011aba:	f44f 62e6 	mov.w	r2, #1840	; 0x730
 8011abe:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8011ac2:	68fb      	ldr	r3, [r7, #12]
 8011ac4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8011ac8:	855a      	strh	r2, [r3, #42]	; 0x2a
 8011aca:	68fb      	ldr	r3, [r7, #12]
 8011acc:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8011ace:	68fb      	ldr	r3, [r7, #12]
 8011ad0:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8011ad2:	68fb      	ldr	r3, [r7, #12]
 8011ad4:	22ff      	movs	r2, #255	; 0xff
 8011ad6:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8011ad8:	68fb      	ldr	r3, [r7, #12]
 8011ada:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8011ade:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8011ae0:	68fb      	ldr	r3, [r7, #12]
 8011ae2:	2206      	movs	r2, #6
 8011ae4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8011ae8:	68fb      	ldr	r3, [r7, #12]
 8011aea:	2206      	movs	r2, #6
 8011aec:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8011aee:	68fb      	ldr	r3, [r7, #12]
 8011af0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011af4:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 8011af6:	68fb      	ldr	r3, [r7, #12]
 8011af8:	2201      	movs	r2, #1
 8011afa:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8011afe:	4b0d      	ldr	r3, [pc, #52]	; (8011b34 <tcp_alloc+0xf8>)
 8011b00:	681a      	ldr	r2, [r3, #0]
 8011b02:	68fb      	ldr	r3, [r7, #12]
 8011b04:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8011b06:	4b0c      	ldr	r3, [pc, #48]	; (8011b38 <tcp_alloc+0xfc>)
 8011b08:	781a      	ldrb	r2, [r3, #0]
 8011b0a:	68fb      	ldr	r3, [r7, #12]
 8011b0c:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8011b0e:	68fb      	ldr	r3, [r7, #12]
 8011b10:	f44f 62e6 	mov.w	r2, #1840	; 0x730
 8011b14:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8011b18:	68fb      	ldr	r3, [r7, #12]
 8011b1a:	4a08      	ldr	r2, [pc, #32]	; (8011b3c <tcp_alloc+0x100>)
 8011b1c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8011b20:	68fb      	ldr	r3, [r7, #12]
 8011b22:	4a07      	ldr	r2, [pc, #28]	; (8011b40 <tcp_alloc+0x104>)
 8011b24:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8011b28:	68fb      	ldr	r3, [r7, #12]
}
 8011b2a:	4618      	mov	r0, r3
 8011b2c:	3710      	adds	r7, #16
 8011b2e:	46bd      	mov	sp, r7
 8011b30:	bd80      	pop	{r7, pc}
 8011b32:	bf00      	nop
 8011b34:	20007634 	.word	0x20007634
 8011b38:	200004de 	.word	0x200004de
 8011b3c:	080117f5 	.word	0x080117f5
 8011b40:	006ddd00 	.word	0x006ddd00

08011b44 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8011b44:	b580      	push	{r7, lr}
 8011b46:	b082      	sub	sp, #8
 8011b48:	af00      	add	r7, sp, #0
 8011b4a:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8011b4c:	687b      	ldr	r3, [r7, #4]
 8011b4e:	2b00      	cmp	r3, #0
 8011b50:	d107      	bne.n	8011b62 <tcp_pcb_purge+0x1e>
 8011b52:	4b21      	ldr	r3, [pc, #132]	; (8011bd8 <tcp_pcb_purge+0x94>)
 8011b54:	f640 0251 	movw	r2, #2129	; 0x851
 8011b58:	4920      	ldr	r1, [pc, #128]	; (8011bdc <tcp_pcb_purge+0x98>)
 8011b5a:	4821      	ldr	r0, [pc, #132]	; (8011be0 <tcp_pcb_purge+0x9c>)
 8011b5c:	f009 fc00 	bl	801b360 <iprintf>
 8011b60:	e037      	b.n	8011bd2 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8011b62:	687b      	ldr	r3, [r7, #4]
 8011b64:	7d1b      	ldrb	r3, [r3, #20]
 8011b66:	2b00      	cmp	r3, #0
 8011b68:	d033      	beq.n	8011bd2 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8011b6a:	687b      	ldr	r3, [r7, #4]
 8011b6c:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8011b6e:	2b0a      	cmp	r3, #10
 8011b70:	d02f      	beq.n	8011bd2 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8011b72:	687b      	ldr	r3, [r7, #4]
 8011b74:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8011b76:	2b01      	cmp	r3, #1
 8011b78:	d02b      	beq.n	8011bd2 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8011b7a:	687b      	ldr	r3, [r7, #4]
 8011b7c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011b7e:	2b00      	cmp	r3, #0
 8011b80:	d007      	beq.n	8011b92 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8011b82:	687b      	ldr	r3, [r7, #4]
 8011b84:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011b86:	4618      	mov	r0, r3
 8011b88:	f7fe fb6c 	bl	8010264 <pbuf_free>
      pcb->refused_data = NULL;
 8011b8c:	687b      	ldr	r3, [r7, #4]
 8011b8e:	2200      	movs	r2, #0
 8011b90:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8011b92:	687b      	ldr	r3, [r7, #4]
 8011b94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011b96:	2b00      	cmp	r3, #0
 8011b98:	d002      	beq.n	8011ba0 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8011b9a:	6878      	ldr	r0, [r7, #4]
 8011b9c:	f000 f986 	bl	8011eac <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8011ba0:	687b      	ldr	r3, [r7, #4]
 8011ba2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011ba6:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8011ba8:	687b      	ldr	r3, [r7, #4]
 8011baa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011bac:	4618      	mov	r0, r3
 8011bae:	f7ff fdc7 	bl	8011740 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8011bb2:	687b      	ldr	r3, [r7, #4]
 8011bb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011bb6:	4618      	mov	r0, r3
 8011bb8:	f7ff fdc2 	bl	8011740 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8011bbc:	687b      	ldr	r3, [r7, #4]
 8011bbe:	2200      	movs	r2, #0
 8011bc0:	66da      	str	r2, [r3, #108]	; 0x6c
 8011bc2:	687b      	ldr	r3, [r7, #4]
 8011bc4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8011bc6:	687b      	ldr	r3, [r7, #4]
 8011bc8:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8011bca:	687b      	ldr	r3, [r7, #4]
 8011bcc:	2200      	movs	r2, #0
 8011bce:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8011bd2:	3708      	adds	r7, #8
 8011bd4:	46bd      	mov	sp, r7
 8011bd6:	bd80      	pop	{r7, pc}
 8011bd8:	08021634 	.word	0x08021634
 8011bdc:	08021c80 	.word	0x08021c80
 8011be0:	08021678 	.word	0x08021678

08011be4 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8011be4:	b580      	push	{r7, lr}
 8011be6:	b084      	sub	sp, #16
 8011be8:	af00      	add	r7, sp, #0
 8011bea:	6078      	str	r0, [r7, #4]
 8011bec:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8011bee:	683b      	ldr	r3, [r7, #0]
 8011bf0:	2b00      	cmp	r3, #0
 8011bf2:	d106      	bne.n	8011c02 <tcp_pcb_remove+0x1e>
 8011bf4:	4b3e      	ldr	r3, [pc, #248]	; (8011cf0 <tcp_pcb_remove+0x10c>)
 8011bf6:	f640 0283 	movw	r2, #2179	; 0x883
 8011bfa:	493e      	ldr	r1, [pc, #248]	; (8011cf4 <tcp_pcb_remove+0x110>)
 8011bfc:	483e      	ldr	r0, [pc, #248]	; (8011cf8 <tcp_pcb_remove+0x114>)
 8011bfe:	f009 fbaf 	bl	801b360 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8011c02:	687b      	ldr	r3, [r7, #4]
 8011c04:	2b00      	cmp	r3, #0
 8011c06:	d106      	bne.n	8011c16 <tcp_pcb_remove+0x32>
 8011c08:	4b39      	ldr	r3, [pc, #228]	; (8011cf0 <tcp_pcb_remove+0x10c>)
 8011c0a:	f640 0284 	movw	r2, #2180	; 0x884
 8011c0e:	493b      	ldr	r1, [pc, #236]	; (8011cfc <tcp_pcb_remove+0x118>)
 8011c10:	4839      	ldr	r0, [pc, #228]	; (8011cf8 <tcp_pcb_remove+0x114>)
 8011c12:	f009 fba5 	bl	801b360 <iprintf>

  TCP_RMV(pcblist, pcb);
 8011c16:	687b      	ldr	r3, [r7, #4]
 8011c18:	681b      	ldr	r3, [r3, #0]
 8011c1a:	683a      	ldr	r2, [r7, #0]
 8011c1c:	429a      	cmp	r2, r3
 8011c1e:	d105      	bne.n	8011c2c <tcp_pcb_remove+0x48>
 8011c20:	687b      	ldr	r3, [r7, #4]
 8011c22:	681b      	ldr	r3, [r3, #0]
 8011c24:	68da      	ldr	r2, [r3, #12]
 8011c26:	687b      	ldr	r3, [r7, #4]
 8011c28:	601a      	str	r2, [r3, #0]
 8011c2a:	e013      	b.n	8011c54 <tcp_pcb_remove+0x70>
 8011c2c:	687b      	ldr	r3, [r7, #4]
 8011c2e:	681b      	ldr	r3, [r3, #0]
 8011c30:	60fb      	str	r3, [r7, #12]
 8011c32:	e00c      	b.n	8011c4e <tcp_pcb_remove+0x6a>
 8011c34:	68fb      	ldr	r3, [r7, #12]
 8011c36:	68db      	ldr	r3, [r3, #12]
 8011c38:	683a      	ldr	r2, [r7, #0]
 8011c3a:	429a      	cmp	r2, r3
 8011c3c:	d104      	bne.n	8011c48 <tcp_pcb_remove+0x64>
 8011c3e:	683b      	ldr	r3, [r7, #0]
 8011c40:	68da      	ldr	r2, [r3, #12]
 8011c42:	68fb      	ldr	r3, [r7, #12]
 8011c44:	60da      	str	r2, [r3, #12]
 8011c46:	e005      	b.n	8011c54 <tcp_pcb_remove+0x70>
 8011c48:	68fb      	ldr	r3, [r7, #12]
 8011c4a:	68db      	ldr	r3, [r3, #12]
 8011c4c:	60fb      	str	r3, [r7, #12]
 8011c4e:	68fb      	ldr	r3, [r7, #12]
 8011c50:	2b00      	cmp	r3, #0
 8011c52:	d1ef      	bne.n	8011c34 <tcp_pcb_remove+0x50>
 8011c54:	683b      	ldr	r3, [r7, #0]
 8011c56:	2200      	movs	r2, #0
 8011c58:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8011c5a:	6838      	ldr	r0, [r7, #0]
 8011c5c:	f7ff ff72 	bl	8011b44 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8011c60:	683b      	ldr	r3, [r7, #0]
 8011c62:	7d1b      	ldrb	r3, [r3, #20]
 8011c64:	2b0a      	cmp	r3, #10
 8011c66:	d013      	beq.n	8011c90 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8011c68:	683b      	ldr	r3, [r7, #0]
 8011c6a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8011c6c:	2b01      	cmp	r3, #1
 8011c6e:	d00f      	beq.n	8011c90 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8011c70:	683b      	ldr	r3, [r7, #0]
 8011c72:	8b5b      	ldrh	r3, [r3, #26]
 8011c74:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8011c78:	2b00      	cmp	r3, #0
 8011c7a:	d009      	beq.n	8011c90 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8011c7c:	683b      	ldr	r3, [r7, #0]
 8011c7e:	8b5b      	ldrh	r3, [r3, #26]
 8011c80:	f043 0302 	orr.w	r3, r3, #2
 8011c84:	b29a      	uxth	r2, r3
 8011c86:	683b      	ldr	r3, [r7, #0]
 8011c88:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8011c8a:	6838      	ldr	r0, [r7, #0]
 8011c8c:	f002 ff6a 	bl	8014b64 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8011c90:	683b      	ldr	r3, [r7, #0]
 8011c92:	7d1b      	ldrb	r3, [r3, #20]
 8011c94:	2b01      	cmp	r3, #1
 8011c96:	d020      	beq.n	8011cda <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8011c98:	683b      	ldr	r3, [r7, #0]
 8011c9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011c9c:	2b00      	cmp	r3, #0
 8011c9e:	d006      	beq.n	8011cae <tcp_pcb_remove+0xca>
 8011ca0:	4b13      	ldr	r3, [pc, #76]	; (8011cf0 <tcp_pcb_remove+0x10c>)
 8011ca2:	f640 0293 	movw	r2, #2195	; 0x893
 8011ca6:	4916      	ldr	r1, [pc, #88]	; (8011d00 <tcp_pcb_remove+0x11c>)
 8011ca8:	4813      	ldr	r0, [pc, #76]	; (8011cf8 <tcp_pcb_remove+0x114>)
 8011caa:	f009 fb59 	bl	801b360 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8011cae:	683b      	ldr	r3, [r7, #0]
 8011cb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011cb2:	2b00      	cmp	r3, #0
 8011cb4:	d006      	beq.n	8011cc4 <tcp_pcb_remove+0xe0>
 8011cb6:	4b0e      	ldr	r3, [pc, #56]	; (8011cf0 <tcp_pcb_remove+0x10c>)
 8011cb8:	f640 0294 	movw	r2, #2196	; 0x894
 8011cbc:	4911      	ldr	r1, [pc, #68]	; (8011d04 <tcp_pcb_remove+0x120>)
 8011cbe:	480e      	ldr	r0, [pc, #56]	; (8011cf8 <tcp_pcb_remove+0x114>)
 8011cc0:	f009 fb4e 	bl	801b360 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8011cc4:	683b      	ldr	r3, [r7, #0]
 8011cc6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011cc8:	2b00      	cmp	r3, #0
 8011cca:	d006      	beq.n	8011cda <tcp_pcb_remove+0xf6>
 8011ccc:	4b08      	ldr	r3, [pc, #32]	; (8011cf0 <tcp_pcb_remove+0x10c>)
 8011cce:	f640 0296 	movw	r2, #2198	; 0x896
 8011cd2:	490d      	ldr	r1, [pc, #52]	; (8011d08 <tcp_pcb_remove+0x124>)
 8011cd4:	4808      	ldr	r0, [pc, #32]	; (8011cf8 <tcp_pcb_remove+0x114>)
 8011cd6:	f009 fb43 	bl	801b360 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8011cda:	683b      	ldr	r3, [r7, #0]
 8011cdc:	2200      	movs	r2, #0
 8011cde:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8011ce0:	683b      	ldr	r3, [r7, #0]
 8011ce2:	2200      	movs	r2, #0
 8011ce4:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8011ce6:	bf00      	nop
 8011ce8:	3710      	adds	r7, #16
 8011cea:	46bd      	mov	sp, r7
 8011cec:	bd80      	pop	{r7, pc}
 8011cee:	bf00      	nop
 8011cf0:	08021634 	.word	0x08021634
 8011cf4:	08021c9c 	.word	0x08021c9c
 8011cf8:	08021678 	.word	0x08021678
 8011cfc:	08021cb8 	.word	0x08021cb8
 8011d00:	08021cd8 	.word	0x08021cd8
 8011d04:	08021cf0 	.word	0x08021cf0
 8011d08:	08021d0c 	.word	0x08021d0c

08011d0c <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8011d0c:	b580      	push	{r7, lr}
 8011d0e:	b082      	sub	sp, #8
 8011d10:	af00      	add	r7, sp, #0
 8011d12:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8011d14:	687b      	ldr	r3, [r7, #4]
 8011d16:	2b00      	cmp	r3, #0
 8011d18:	d106      	bne.n	8011d28 <tcp_next_iss+0x1c>
 8011d1a:	4b0a      	ldr	r3, [pc, #40]	; (8011d44 <tcp_next_iss+0x38>)
 8011d1c:	f640 02af 	movw	r2, #2223	; 0x8af
 8011d20:	4909      	ldr	r1, [pc, #36]	; (8011d48 <tcp_next_iss+0x3c>)
 8011d22:	480a      	ldr	r0, [pc, #40]	; (8011d4c <tcp_next_iss+0x40>)
 8011d24:	f009 fb1c 	bl	801b360 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8011d28:	4b09      	ldr	r3, [pc, #36]	; (8011d50 <tcp_next_iss+0x44>)
 8011d2a:	681a      	ldr	r2, [r3, #0]
 8011d2c:	4b09      	ldr	r3, [pc, #36]	; (8011d54 <tcp_next_iss+0x48>)
 8011d2e:	681b      	ldr	r3, [r3, #0]
 8011d30:	4413      	add	r3, r2
 8011d32:	4a07      	ldr	r2, [pc, #28]	; (8011d50 <tcp_next_iss+0x44>)
 8011d34:	6013      	str	r3, [r2, #0]
  return iss;
 8011d36:	4b06      	ldr	r3, [pc, #24]	; (8011d50 <tcp_next_iss+0x44>)
 8011d38:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8011d3a:	4618      	mov	r0, r3
 8011d3c:	3708      	adds	r7, #8
 8011d3e:	46bd      	mov	sp, r7
 8011d40:	bd80      	pop	{r7, pc}
 8011d42:	bf00      	nop
 8011d44:	08021634 	.word	0x08021634
 8011d48:	08021d24 	.word	0x08021d24
 8011d4c:	08021678 	.word	0x08021678
 8011d50:	20000078 	.word	0x20000078
 8011d54:	20007634 	.word	0x20007634

08011d58 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8011d58:	b580      	push	{r7, lr}
 8011d5a:	b086      	sub	sp, #24
 8011d5c:	af00      	add	r7, sp, #0
 8011d5e:	4603      	mov	r3, r0
 8011d60:	60b9      	str	r1, [r7, #8]
 8011d62:	607a      	str	r2, [r7, #4]
 8011d64:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8011d66:	687b      	ldr	r3, [r7, #4]
 8011d68:	2b00      	cmp	r3, #0
 8011d6a:	d106      	bne.n	8011d7a <tcp_eff_send_mss_netif+0x22>
 8011d6c:	4b14      	ldr	r3, [pc, #80]	; (8011dc0 <tcp_eff_send_mss_netif+0x68>)
 8011d6e:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8011d72:	4914      	ldr	r1, [pc, #80]	; (8011dc4 <tcp_eff_send_mss_netif+0x6c>)
 8011d74:	4814      	ldr	r0, [pc, #80]	; (8011dc8 <tcp_eff_send_mss_netif+0x70>)
 8011d76:	f009 faf3 	bl	801b360 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8011d7a:	68bb      	ldr	r3, [r7, #8]
 8011d7c:	2b00      	cmp	r3, #0
 8011d7e:	d101      	bne.n	8011d84 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8011d80:	89fb      	ldrh	r3, [r7, #14]
 8011d82:	e019      	b.n	8011db8 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8011d84:	68bb      	ldr	r3, [r7, #8]
 8011d86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011d88:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8011d8a:	8afb      	ldrh	r3, [r7, #22]
 8011d8c:	2b00      	cmp	r3, #0
 8011d8e:	d012      	beq.n	8011db6 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8011d90:	2328      	movs	r3, #40	; 0x28
 8011d92:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8011d94:	8afa      	ldrh	r2, [r7, #22]
 8011d96:	8abb      	ldrh	r3, [r7, #20]
 8011d98:	429a      	cmp	r2, r3
 8011d9a:	d904      	bls.n	8011da6 <tcp_eff_send_mss_netif+0x4e>
 8011d9c:	8afa      	ldrh	r2, [r7, #22]
 8011d9e:	8abb      	ldrh	r3, [r7, #20]
 8011da0:	1ad3      	subs	r3, r2, r3
 8011da2:	b29b      	uxth	r3, r3
 8011da4:	e000      	b.n	8011da8 <tcp_eff_send_mss_netif+0x50>
 8011da6:	2300      	movs	r3, #0
 8011da8:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8011daa:	8a7a      	ldrh	r2, [r7, #18]
 8011dac:	89fb      	ldrh	r3, [r7, #14]
 8011dae:	4293      	cmp	r3, r2
 8011db0:	bf28      	it	cs
 8011db2:	4613      	movcs	r3, r2
 8011db4:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8011db6:	89fb      	ldrh	r3, [r7, #14]
}
 8011db8:	4618      	mov	r0, r3
 8011dba:	3718      	adds	r7, #24
 8011dbc:	46bd      	mov	sp, r7
 8011dbe:	bd80      	pop	{r7, pc}
 8011dc0:	08021634 	.word	0x08021634
 8011dc4:	08021d40 	.word	0x08021d40
 8011dc8:	08021678 	.word	0x08021678

08011dcc <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8011dcc:	b580      	push	{r7, lr}
 8011dce:	b084      	sub	sp, #16
 8011dd0:	af00      	add	r7, sp, #0
 8011dd2:	6078      	str	r0, [r7, #4]
 8011dd4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8011dd6:	683b      	ldr	r3, [r7, #0]
 8011dd8:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8011dda:	687b      	ldr	r3, [r7, #4]
 8011ddc:	2b00      	cmp	r3, #0
 8011dde:	d119      	bne.n	8011e14 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8011de0:	4b10      	ldr	r3, [pc, #64]	; (8011e24 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8011de2:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8011de6:	4910      	ldr	r1, [pc, #64]	; (8011e28 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8011de8:	4810      	ldr	r0, [pc, #64]	; (8011e2c <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8011dea:	f009 fab9 	bl	801b360 <iprintf>

  while (pcb != NULL) {
 8011dee:	e011      	b.n	8011e14 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8011df0:	68fb      	ldr	r3, [r7, #12]
 8011df2:	681a      	ldr	r2, [r3, #0]
 8011df4:	687b      	ldr	r3, [r7, #4]
 8011df6:	681b      	ldr	r3, [r3, #0]
 8011df8:	429a      	cmp	r2, r3
 8011dfa:	d108      	bne.n	8011e0e <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8011dfc:	68fb      	ldr	r3, [r7, #12]
 8011dfe:	68db      	ldr	r3, [r3, #12]
 8011e00:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8011e02:	68f8      	ldr	r0, [r7, #12]
 8011e04:	f7fe ffc6 	bl	8010d94 <tcp_abort>
      pcb = next;
 8011e08:	68bb      	ldr	r3, [r7, #8]
 8011e0a:	60fb      	str	r3, [r7, #12]
 8011e0c:	e002      	b.n	8011e14 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8011e0e:	68fb      	ldr	r3, [r7, #12]
 8011e10:	68db      	ldr	r3, [r3, #12]
 8011e12:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8011e14:	68fb      	ldr	r3, [r7, #12]
 8011e16:	2b00      	cmp	r3, #0
 8011e18:	d1ea      	bne.n	8011df0 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8011e1a:	bf00      	nop
 8011e1c:	bf00      	nop
 8011e1e:	3710      	adds	r7, #16
 8011e20:	46bd      	mov	sp, r7
 8011e22:	bd80      	pop	{r7, pc}
 8011e24:	08021634 	.word	0x08021634
 8011e28:	08021d68 	.word	0x08021d68
 8011e2c:	08021678 	.word	0x08021678

08011e30 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8011e30:	b580      	push	{r7, lr}
 8011e32:	b084      	sub	sp, #16
 8011e34:	af00      	add	r7, sp, #0
 8011e36:	6078      	str	r0, [r7, #4]
 8011e38:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8011e3a:	687b      	ldr	r3, [r7, #4]
 8011e3c:	2b00      	cmp	r3, #0
 8011e3e:	d02a      	beq.n	8011e96 <tcp_netif_ip_addr_changed+0x66>
 8011e40:	687b      	ldr	r3, [r7, #4]
 8011e42:	681b      	ldr	r3, [r3, #0]
 8011e44:	2b00      	cmp	r3, #0
 8011e46:	d026      	beq.n	8011e96 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8011e48:	4b15      	ldr	r3, [pc, #84]	; (8011ea0 <tcp_netif_ip_addr_changed+0x70>)
 8011e4a:	681b      	ldr	r3, [r3, #0]
 8011e4c:	4619      	mov	r1, r3
 8011e4e:	6878      	ldr	r0, [r7, #4]
 8011e50:	f7ff ffbc 	bl	8011dcc <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8011e54:	4b13      	ldr	r3, [pc, #76]	; (8011ea4 <tcp_netif_ip_addr_changed+0x74>)
 8011e56:	681b      	ldr	r3, [r3, #0]
 8011e58:	4619      	mov	r1, r3
 8011e5a:	6878      	ldr	r0, [r7, #4]
 8011e5c:	f7ff ffb6 	bl	8011dcc <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8011e60:	683b      	ldr	r3, [r7, #0]
 8011e62:	2b00      	cmp	r3, #0
 8011e64:	d017      	beq.n	8011e96 <tcp_netif_ip_addr_changed+0x66>
 8011e66:	683b      	ldr	r3, [r7, #0]
 8011e68:	681b      	ldr	r3, [r3, #0]
 8011e6a:	2b00      	cmp	r3, #0
 8011e6c:	d013      	beq.n	8011e96 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8011e6e:	4b0e      	ldr	r3, [pc, #56]	; (8011ea8 <tcp_netif_ip_addr_changed+0x78>)
 8011e70:	681b      	ldr	r3, [r3, #0]
 8011e72:	60fb      	str	r3, [r7, #12]
 8011e74:	e00c      	b.n	8011e90 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8011e76:	68fb      	ldr	r3, [r7, #12]
 8011e78:	681a      	ldr	r2, [r3, #0]
 8011e7a:	687b      	ldr	r3, [r7, #4]
 8011e7c:	681b      	ldr	r3, [r3, #0]
 8011e7e:	429a      	cmp	r2, r3
 8011e80:	d103      	bne.n	8011e8a <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8011e82:	683b      	ldr	r3, [r7, #0]
 8011e84:	681a      	ldr	r2, [r3, #0]
 8011e86:	68fb      	ldr	r3, [r7, #12]
 8011e88:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8011e8a:	68fb      	ldr	r3, [r7, #12]
 8011e8c:	68db      	ldr	r3, [r3, #12]
 8011e8e:	60fb      	str	r3, [r7, #12]
 8011e90:	68fb      	ldr	r3, [r7, #12]
 8011e92:	2b00      	cmp	r3, #0
 8011e94:	d1ef      	bne.n	8011e76 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8011e96:	bf00      	nop
 8011e98:	3710      	adds	r7, #16
 8011e9a:	46bd      	mov	sp, r7
 8011e9c:	bd80      	pop	{r7, pc}
 8011e9e:	bf00      	nop
 8011ea0:	20007630 	.word	0x20007630
 8011ea4:	2000763c 	.word	0x2000763c
 8011ea8:	20007638 	.word	0x20007638

08011eac <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8011eac:	b580      	push	{r7, lr}
 8011eae:	b082      	sub	sp, #8
 8011eb0:	af00      	add	r7, sp, #0
 8011eb2:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8011eb4:	687b      	ldr	r3, [r7, #4]
 8011eb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011eb8:	2b00      	cmp	r3, #0
 8011eba:	d007      	beq.n	8011ecc <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8011ebc:	687b      	ldr	r3, [r7, #4]
 8011ebe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011ec0:	4618      	mov	r0, r3
 8011ec2:	f7ff fc3d 	bl	8011740 <tcp_segs_free>
    pcb->ooseq = NULL;
 8011ec6:	687b      	ldr	r3, [r7, #4]
 8011ec8:	2200      	movs	r2, #0
 8011eca:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8011ecc:	bf00      	nop
 8011ece:	3708      	adds	r7, #8
 8011ed0:	46bd      	mov	sp, r7
 8011ed2:	bd80      	pop	{r7, pc}

08011ed4 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8011ed4:	b590      	push	{r4, r7, lr}
 8011ed6:	b08d      	sub	sp, #52	; 0x34
 8011ed8:	af04      	add	r7, sp, #16
 8011eda:	6078      	str	r0, [r7, #4]
 8011edc:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8011ede:	687b      	ldr	r3, [r7, #4]
 8011ee0:	2b00      	cmp	r3, #0
 8011ee2:	d105      	bne.n	8011ef0 <tcp_input+0x1c>
 8011ee4:	4b9b      	ldr	r3, [pc, #620]	; (8012154 <tcp_input+0x280>)
 8011ee6:	2283      	movs	r2, #131	; 0x83
 8011ee8:	499b      	ldr	r1, [pc, #620]	; (8012158 <tcp_input+0x284>)
 8011eea:	489c      	ldr	r0, [pc, #624]	; (801215c <tcp_input+0x288>)
 8011eec:	f009 fa38 	bl	801b360 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8011ef0:	687b      	ldr	r3, [r7, #4]
 8011ef2:	685b      	ldr	r3, [r3, #4]
 8011ef4:	4a9a      	ldr	r2, [pc, #616]	; (8012160 <tcp_input+0x28c>)
 8011ef6:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8011ef8:	687b      	ldr	r3, [r7, #4]
 8011efa:	895b      	ldrh	r3, [r3, #10]
 8011efc:	2b13      	cmp	r3, #19
 8011efe:	f240 83c4 	bls.w	801268a <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8011f02:	4b98      	ldr	r3, [pc, #608]	; (8012164 <tcp_input+0x290>)
 8011f04:	695b      	ldr	r3, [r3, #20]
 8011f06:	4a97      	ldr	r2, [pc, #604]	; (8012164 <tcp_input+0x290>)
 8011f08:	6812      	ldr	r2, [r2, #0]
 8011f0a:	4611      	mov	r1, r2
 8011f0c:	4618      	mov	r0, r3
 8011f0e:	f007 fd49 	bl	80199a4 <ip4_addr_isbroadcast_u32>
 8011f12:	4603      	mov	r3, r0
 8011f14:	2b00      	cmp	r3, #0
 8011f16:	f040 83ba 	bne.w	801268e <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8011f1a:	4b92      	ldr	r3, [pc, #584]	; (8012164 <tcp_input+0x290>)
 8011f1c:	695b      	ldr	r3, [r3, #20]
 8011f1e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8011f22:	2be0      	cmp	r3, #224	; 0xe0
 8011f24:	f000 83b3 	beq.w	801268e <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8011f28:	4b8d      	ldr	r3, [pc, #564]	; (8012160 <tcp_input+0x28c>)
 8011f2a:	681b      	ldr	r3, [r3, #0]
 8011f2c:	899b      	ldrh	r3, [r3, #12]
 8011f2e:	b29b      	uxth	r3, r3
 8011f30:	4618      	mov	r0, r3
 8011f32:	f7fc fefb 	bl	800ed2c <lwip_htons>
 8011f36:	4603      	mov	r3, r0
 8011f38:	0b1b      	lsrs	r3, r3, #12
 8011f3a:	b29b      	uxth	r3, r3
 8011f3c:	b2db      	uxtb	r3, r3
 8011f3e:	009b      	lsls	r3, r3, #2
 8011f40:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8011f42:	7cbb      	ldrb	r3, [r7, #18]
 8011f44:	2b13      	cmp	r3, #19
 8011f46:	f240 83a4 	bls.w	8012692 <tcp_input+0x7be>
 8011f4a:	7cbb      	ldrb	r3, [r7, #18]
 8011f4c:	b29a      	uxth	r2, r3
 8011f4e:	687b      	ldr	r3, [r7, #4]
 8011f50:	891b      	ldrh	r3, [r3, #8]
 8011f52:	429a      	cmp	r2, r3
 8011f54:	f200 839d 	bhi.w	8012692 <tcp_input+0x7be>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8011f58:	7cbb      	ldrb	r3, [r7, #18]
 8011f5a:	b29b      	uxth	r3, r3
 8011f5c:	3b14      	subs	r3, #20
 8011f5e:	b29a      	uxth	r2, r3
 8011f60:	4b81      	ldr	r3, [pc, #516]	; (8012168 <tcp_input+0x294>)
 8011f62:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8011f64:	4b81      	ldr	r3, [pc, #516]	; (801216c <tcp_input+0x298>)
 8011f66:	2200      	movs	r2, #0
 8011f68:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8011f6a:	687b      	ldr	r3, [r7, #4]
 8011f6c:	895a      	ldrh	r2, [r3, #10]
 8011f6e:	7cbb      	ldrb	r3, [r7, #18]
 8011f70:	b29b      	uxth	r3, r3
 8011f72:	429a      	cmp	r2, r3
 8011f74:	d309      	bcc.n	8011f8a <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8011f76:	4b7c      	ldr	r3, [pc, #496]	; (8012168 <tcp_input+0x294>)
 8011f78:	881a      	ldrh	r2, [r3, #0]
 8011f7a:	4b7d      	ldr	r3, [pc, #500]	; (8012170 <tcp_input+0x29c>)
 8011f7c:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8011f7e:	7cbb      	ldrb	r3, [r7, #18]
 8011f80:	4619      	mov	r1, r3
 8011f82:	6878      	ldr	r0, [r7, #4]
 8011f84:	f7fe f8e8 	bl	8010158 <pbuf_remove_header>
 8011f88:	e04e      	b.n	8012028 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8011f8a:	687b      	ldr	r3, [r7, #4]
 8011f8c:	681b      	ldr	r3, [r3, #0]
 8011f8e:	2b00      	cmp	r3, #0
 8011f90:	d105      	bne.n	8011f9e <tcp_input+0xca>
 8011f92:	4b70      	ldr	r3, [pc, #448]	; (8012154 <tcp_input+0x280>)
 8011f94:	22c2      	movs	r2, #194	; 0xc2
 8011f96:	4977      	ldr	r1, [pc, #476]	; (8012174 <tcp_input+0x2a0>)
 8011f98:	4870      	ldr	r0, [pc, #448]	; (801215c <tcp_input+0x288>)
 8011f9a:	f009 f9e1 	bl	801b360 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8011f9e:	2114      	movs	r1, #20
 8011fa0:	6878      	ldr	r0, [r7, #4]
 8011fa2:	f7fe f8d9 	bl	8010158 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8011fa6:	687b      	ldr	r3, [r7, #4]
 8011fa8:	895a      	ldrh	r2, [r3, #10]
 8011faa:	4b71      	ldr	r3, [pc, #452]	; (8012170 <tcp_input+0x29c>)
 8011fac:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8011fae:	4b6e      	ldr	r3, [pc, #440]	; (8012168 <tcp_input+0x294>)
 8011fb0:	881a      	ldrh	r2, [r3, #0]
 8011fb2:	4b6f      	ldr	r3, [pc, #444]	; (8012170 <tcp_input+0x29c>)
 8011fb4:	881b      	ldrh	r3, [r3, #0]
 8011fb6:	1ad3      	subs	r3, r2, r3
 8011fb8:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8011fba:	4b6d      	ldr	r3, [pc, #436]	; (8012170 <tcp_input+0x29c>)
 8011fbc:	881b      	ldrh	r3, [r3, #0]
 8011fbe:	4619      	mov	r1, r3
 8011fc0:	6878      	ldr	r0, [r7, #4]
 8011fc2:	f7fe f8c9 	bl	8010158 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8011fc6:	687b      	ldr	r3, [r7, #4]
 8011fc8:	681b      	ldr	r3, [r3, #0]
 8011fca:	895b      	ldrh	r3, [r3, #10]
 8011fcc:	8a3a      	ldrh	r2, [r7, #16]
 8011fce:	429a      	cmp	r2, r3
 8011fd0:	f200 8361 	bhi.w	8012696 <tcp_input+0x7c2>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8011fd4:	687b      	ldr	r3, [r7, #4]
 8011fd6:	681b      	ldr	r3, [r3, #0]
 8011fd8:	685b      	ldr	r3, [r3, #4]
 8011fda:	4a64      	ldr	r2, [pc, #400]	; (801216c <tcp_input+0x298>)
 8011fdc:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8011fde:	687b      	ldr	r3, [r7, #4]
 8011fe0:	681b      	ldr	r3, [r3, #0]
 8011fe2:	8a3a      	ldrh	r2, [r7, #16]
 8011fe4:	4611      	mov	r1, r2
 8011fe6:	4618      	mov	r0, r3
 8011fe8:	f7fe f8b6 	bl	8010158 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8011fec:	687b      	ldr	r3, [r7, #4]
 8011fee:	891a      	ldrh	r2, [r3, #8]
 8011ff0:	8a3b      	ldrh	r3, [r7, #16]
 8011ff2:	1ad3      	subs	r3, r2, r3
 8011ff4:	b29a      	uxth	r2, r3
 8011ff6:	687b      	ldr	r3, [r7, #4]
 8011ff8:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8011ffa:	687b      	ldr	r3, [r7, #4]
 8011ffc:	895b      	ldrh	r3, [r3, #10]
 8011ffe:	2b00      	cmp	r3, #0
 8012000:	d005      	beq.n	801200e <tcp_input+0x13a>
 8012002:	4b54      	ldr	r3, [pc, #336]	; (8012154 <tcp_input+0x280>)
 8012004:	22df      	movs	r2, #223	; 0xdf
 8012006:	495c      	ldr	r1, [pc, #368]	; (8012178 <tcp_input+0x2a4>)
 8012008:	4854      	ldr	r0, [pc, #336]	; (801215c <tcp_input+0x288>)
 801200a:	f009 f9a9 	bl	801b360 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 801200e:	687b      	ldr	r3, [r7, #4]
 8012010:	891a      	ldrh	r2, [r3, #8]
 8012012:	687b      	ldr	r3, [r7, #4]
 8012014:	681b      	ldr	r3, [r3, #0]
 8012016:	891b      	ldrh	r3, [r3, #8]
 8012018:	429a      	cmp	r2, r3
 801201a:	d005      	beq.n	8012028 <tcp_input+0x154>
 801201c:	4b4d      	ldr	r3, [pc, #308]	; (8012154 <tcp_input+0x280>)
 801201e:	22e0      	movs	r2, #224	; 0xe0
 8012020:	4956      	ldr	r1, [pc, #344]	; (801217c <tcp_input+0x2a8>)
 8012022:	484e      	ldr	r0, [pc, #312]	; (801215c <tcp_input+0x288>)
 8012024:	f009 f99c 	bl	801b360 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8012028:	4b4d      	ldr	r3, [pc, #308]	; (8012160 <tcp_input+0x28c>)
 801202a:	681b      	ldr	r3, [r3, #0]
 801202c:	881b      	ldrh	r3, [r3, #0]
 801202e:	b29b      	uxth	r3, r3
 8012030:	4a4b      	ldr	r2, [pc, #300]	; (8012160 <tcp_input+0x28c>)
 8012032:	6814      	ldr	r4, [r2, #0]
 8012034:	4618      	mov	r0, r3
 8012036:	f7fc fe79 	bl	800ed2c <lwip_htons>
 801203a:	4603      	mov	r3, r0
 801203c:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 801203e:	4b48      	ldr	r3, [pc, #288]	; (8012160 <tcp_input+0x28c>)
 8012040:	681b      	ldr	r3, [r3, #0]
 8012042:	885b      	ldrh	r3, [r3, #2]
 8012044:	b29b      	uxth	r3, r3
 8012046:	4a46      	ldr	r2, [pc, #280]	; (8012160 <tcp_input+0x28c>)
 8012048:	6814      	ldr	r4, [r2, #0]
 801204a:	4618      	mov	r0, r3
 801204c:	f7fc fe6e 	bl	800ed2c <lwip_htons>
 8012050:	4603      	mov	r3, r0
 8012052:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8012054:	4b42      	ldr	r3, [pc, #264]	; (8012160 <tcp_input+0x28c>)
 8012056:	681b      	ldr	r3, [r3, #0]
 8012058:	685b      	ldr	r3, [r3, #4]
 801205a:	4a41      	ldr	r2, [pc, #260]	; (8012160 <tcp_input+0x28c>)
 801205c:	6814      	ldr	r4, [r2, #0]
 801205e:	4618      	mov	r0, r3
 8012060:	f7fc fe79 	bl	800ed56 <lwip_htonl>
 8012064:	4603      	mov	r3, r0
 8012066:	6063      	str	r3, [r4, #4]
 8012068:	6863      	ldr	r3, [r4, #4]
 801206a:	4a45      	ldr	r2, [pc, #276]	; (8012180 <tcp_input+0x2ac>)
 801206c:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 801206e:	4b3c      	ldr	r3, [pc, #240]	; (8012160 <tcp_input+0x28c>)
 8012070:	681b      	ldr	r3, [r3, #0]
 8012072:	689b      	ldr	r3, [r3, #8]
 8012074:	4a3a      	ldr	r2, [pc, #232]	; (8012160 <tcp_input+0x28c>)
 8012076:	6814      	ldr	r4, [r2, #0]
 8012078:	4618      	mov	r0, r3
 801207a:	f7fc fe6c 	bl	800ed56 <lwip_htonl>
 801207e:	4603      	mov	r3, r0
 8012080:	60a3      	str	r3, [r4, #8]
 8012082:	68a3      	ldr	r3, [r4, #8]
 8012084:	4a3f      	ldr	r2, [pc, #252]	; (8012184 <tcp_input+0x2b0>)
 8012086:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8012088:	4b35      	ldr	r3, [pc, #212]	; (8012160 <tcp_input+0x28c>)
 801208a:	681b      	ldr	r3, [r3, #0]
 801208c:	89db      	ldrh	r3, [r3, #14]
 801208e:	b29b      	uxth	r3, r3
 8012090:	4a33      	ldr	r2, [pc, #204]	; (8012160 <tcp_input+0x28c>)
 8012092:	6814      	ldr	r4, [r2, #0]
 8012094:	4618      	mov	r0, r3
 8012096:	f7fc fe49 	bl	800ed2c <lwip_htons>
 801209a:	4603      	mov	r3, r0
 801209c:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 801209e:	4b30      	ldr	r3, [pc, #192]	; (8012160 <tcp_input+0x28c>)
 80120a0:	681b      	ldr	r3, [r3, #0]
 80120a2:	899b      	ldrh	r3, [r3, #12]
 80120a4:	b29b      	uxth	r3, r3
 80120a6:	4618      	mov	r0, r3
 80120a8:	f7fc fe40 	bl	800ed2c <lwip_htons>
 80120ac:	4603      	mov	r3, r0
 80120ae:	b2db      	uxtb	r3, r3
 80120b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80120b4:	b2da      	uxtb	r2, r3
 80120b6:	4b34      	ldr	r3, [pc, #208]	; (8012188 <tcp_input+0x2b4>)
 80120b8:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 80120ba:	687b      	ldr	r3, [r7, #4]
 80120bc:	891a      	ldrh	r2, [r3, #8]
 80120be:	4b33      	ldr	r3, [pc, #204]	; (801218c <tcp_input+0x2b8>)
 80120c0:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 80120c2:	4b31      	ldr	r3, [pc, #196]	; (8012188 <tcp_input+0x2b4>)
 80120c4:	781b      	ldrb	r3, [r3, #0]
 80120c6:	f003 0303 	and.w	r3, r3, #3
 80120ca:	2b00      	cmp	r3, #0
 80120cc:	d00c      	beq.n	80120e8 <tcp_input+0x214>
    tcplen++;
 80120ce:	4b2f      	ldr	r3, [pc, #188]	; (801218c <tcp_input+0x2b8>)
 80120d0:	881b      	ldrh	r3, [r3, #0]
 80120d2:	3301      	adds	r3, #1
 80120d4:	b29a      	uxth	r2, r3
 80120d6:	4b2d      	ldr	r3, [pc, #180]	; (801218c <tcp_input+0x2b8>)
 80120d8:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 80120da:	687b      	ldr	r3, [r7, #4]
 80120dc:	891a      	ldrh	r2, [r3, #8]
 80120de:	4b2b      	ldr	r3, [pc, #172]	; (801218c <tcp_input+0x2b8>)
 80120e0:	881b      	ldrh	r3, [r3, #0]
 80120e2:	429a      	cmp	r2, r3
 80120e4:	f200 82d9 	bhi.w	801269a <tcp_input+0x7c6>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 80120e8:	2300      	movs	r3, #0
 80120ea:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80120ec:	4b28      	ldr	r3, [pc, #160]	; (8012190 <tcp_input+0x2bc>)
 80120ee:	681b      	ldr	r3, [r3, #0]
 80120f0:	61fb      	str	r3, [r7, #28]
 80120f2:	e09d      	b.n	8012230 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 80120f4:	69fb      	ldr	r3, [r7, #28]
 80120f6:	7d1b      	ldrb	r3, [r3, #20]
 80120f8:	2b00      	cmp	r3, #0
 80120fa:	d105      	bne.n	8012108 <tcp_input+0x234>
 80120fc:	4b15      	ldr	r3, [pc, #84]	; (8012154 <tcp_input+0x280>)
 80120fe:	22fb      	movs	r2, #251	; 0xfb
 8012100:	4924      	ldr	r1, [pc, #144]	; (8012194 <tcp_input+0x2c0>)
 8012102:	4816      	ldr	r0, [pc, #88]	; (801215c <tcp_input+0x288>)
 8012104:	f009 f92c 	bl	801b360 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8012108:	69fb      	ldr	r3, [r7, #28]
 801210a:	7d1b      	ldrb	r3, [r3, #20]
 801210c:	2b0a      	cmp	r3, #10
 801210e:	d105      	bne.n	801211c <tcp_input+0x248>
 8012110:	4b10      	ldr	r3, [pc, #64]	; (8012154 <tcp_input+0x280>)
 8012112:	22fc      	movs	r2, #252	; 0xfc
 8012114:	4920      	ldr	r1, [pc, #128]	; (8012198 <tcp_input+0x2c4>)
 8012116:	4811      	ldr	r0, [pc, #68]	; (801215c <tcp_input+0x288>)
 8012118:	f009 f922 	bl	801b360 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 801211c:	69fb      	ldr	r3, [r7, #28]
 801211e:	7d1b      	ldrb	r3, [r3, #20]
 8012120:	2b01      	cmp	r3, #1
 8012122:	d105      	bne.n	8012130 <tcp_input+0x25c>
 8012124:	4b0b      	ldr	r3, [pc, #44]	; (8012154 <tcp_input+0x280>)
 8012126:	22fd      	movs	r2, #253	; 0xfd
 8012128:	491c      	ldr	r1, [pc, #112]	; (801219c <tcp_input+0x2c8>)
 801212a:	480c      	ldr	r0, [pc, #48]	; (801215c <tcp_input+0x288>)
 801212c:	f009 f918 	bl	801b360 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012130:	69fb      	ldr	r3, [r7, #28]
 8012132:	7a1b      	ldrb	r3, [r3, #8]
 8012134:	2b00      	cmp	r3, #0
 8012136:	d033      	beq.n	80121a0 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8012138:	69fb      	ldr	r3, [r7, #28]
 801213a:	7a1a      	ldrb	r2, [r3, #8]
 801213c:	4b09      	ldr	r3, [pc, #36]	; (8012164 <tcp_input+0x290>)
 801213e:	685b      	ldr	r3, [r3, #4]
 8012140:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8012144:	3301      	adds	r3, #1
 8012146:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012148:	429a      	cmp	r2, r3
 801214a:	d029      	beq.n	80121a0 <tcp_input+0x2cc>
      prev = pcb;
 801214c:	69fb      	ldr	r3, [r7, #28]
 801214e:	61bb      	str	r3, [r7, #24]
      continue;
 8012150:	e06b      	b.n	801222a <tcp_input+0x356>
 8012152:	bf00      	nop
 8012154:	08021d9c 	.word	0x08021d9c
 8012158:	08021dd0 	.word	0x08021dd0
 801215c:	08021de8 	.word	0x08021de8
 8012160:	200004f0 	.word	0x200004f0
 8012164:	2000450c 	.word	0x2000450c
 8012168:	200004f4 	.word	0x200004f4
 801216c:	200004f8 	.word	0x200004f8
 8012170:	200004f6 	.word	0x200004f6
 8012174:	08021e10 	.word	0x08021e10
 8012178:	08021e20 	.word	0x08021e20
 801217c:	08021e2c 	.word	0x08021e2c
 8012180:	20000500 	.word	0x20000500
 8012184:	20000504 	.word	0x20000504
 8012188:	2000050c 	.word	0x2000050c
 801218c:	2000050a 	.word	0x2000050a
 8012190:	20007630 	.word	0x20007630
 8012194:	08021e4c 	.word	0x08021e4c
 8012198:	08021e74 	.word	0x08021e74
 801219c:	08021ea0 	.word	0x08021ea0
    }

    if (pcb->remote_port == tcphdr->src &&
 80121a0:	69fb      	ldr	r3, [r7, #28]
 80121a2:	8b1a      	ldrh	r2, [r3, #24]
 80121a4:	4b94      	ldr	r3, [pc, #592]	; (80123f8 <tcp_input+0x524>)
 80121a6:	681b      	ldr	r3, [r3, #0]
 80121a8:	881b      	ldrh	r3, [r3, #0]
 80121aa:	b29b      	uxth	r3, r3
 80121ac:	429a      	cmp	r2, r3
 80121ae:	d13a      	bne.n	8012226 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 80121b0:	69fb      	ldr	r3, [r7, #28]
 80121b2:	8ada      	ldrh	r2, [r3, #22]
 80121b4:	4b90      	ldr	r3, [pc, #576]	; (80123f8 <tcp_input+0x524>)
 80121b6:	681b      	ldr	r3, [r3, #0]
 80121b8:	885b      	ldrh	r3, [r3, #2]
 80121ba:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 80121bc:	429a      	cmp	r2, r3
 80121be:	d132      	bne.n	8012226 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80121c0:	69fb      	ldr	r3, [r7, #28]
 80121c2:	685a      	ldr	r2, [r3, #4]
 80121c4:	4b8d      	ldr	r3, [pc, #564]	; (80123fc <tcp_input+0x528>)
 80121c6:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 80121c8:	429a      	cmp	r2, r3
 80121ca:	d12c      	bne.n	8012226 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80121cc:	69fb      	ldr	r3, [r7, #28]
 80121ce:	681a      	ldr	r2, [r3, #0]
 80121d0:	4b8a      	ldr	r3, [pc, #552]	; (80123fc <tcp_input+0x528>)
 80121d2:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80121d4:	429a      	cmp	r2, r3
 80121d6:	d126      	bne.n	8012226 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 80121d8:	69fb      	ldr	r3, [r7, #28]
 80121da:	68db      	ldr	r3, [r3, #12]
 80121dc:	69fa      	ldr	r2, [r7, #28]
 80121de:	429a      	cmp	r2, r3
 80121e0:	d106      	bne.n	80121f0 <tcp_input+0x31c>
 80121e2:	4b87      	ldr	r3, [pc, #540]	; (8012400 <tcp_input+0x52c>)
 80121e4:	f240 120d 	movw	r2, #269	; 0x10d
 80121e8:	4986      	ldr	r1, [pc, #536]	; (8012404 <tcp_input+0x530>)
 80121ea:	4887      	ldr	r0, [pc, #540]	; (8012408 <tcp_input+0x534>)
 80121ec:	f009 f8b8 	bl	801b360 <iprintf>
      if (prev != NULL) {
 80121f0:	69bb      	ldr	r3, [r7, #24]
 80121f2:	2b00      	cmp	r3, #0
 80121f4:	d00a      	beq.n	801220c <tcp_input+0x338>
        prev->next = pcb->next;
 80121f6:	69fb      	ldr	r3, [r7, #28]
 80121f8:	68da      	ldr	r2, [r3, #12]
 80121fa:	69bb      	ldr	r3, [r7, #24]
 80121fc:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 80121fe:	4b83      	ldr	r3, [pc, #524]	; (801240c <tcp_input+0x538>)
 8012200:	681a      	ldr	r2, [r3, #0]
 8012202:	69fb      	ldr	r3, [r7, #28]
 8012204:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8012206:	4a81      	ldr	r2, [pc, #516]	; (801240c <tcp_input+0x538>)
 8012208:	69fb      	ldr	r3, [r7, #28]
 801220a:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 801220c:	69fb      	ldr	r3, [r7, #28]
 801220e:	68db      	ldr	r3, [r3, #12]
 8012210:	69fa      	ldr	r2, [r7, #28]
 8012212:	429a      	cmp	r2, r3
 8012214:	d111      	bne.n	801223a <tcp_input+0x366>
 8012216:	4b7a      	ldr	r3, [pc, #488]	; (8012400 <tcp_input+0x52c>)
 8012218:	f240 1215 	movw	r2, #277	; 0x115
 801221c:	497c      	ldr	r1, [pc, #496]	; (8012410 <tcp_input+0x53c>)
 801221e:	487a      	ldr	r0, [pc, #488]	; (8012408 <tcp_input+0x534>)
 8012220:	f009 f89e 	bl	801b360 <iprintf>
      break;
 8012224:	e009      	b.n	801223a <tcp_input+0x366>
    }
    prev = pcb;
 8012226:	69fb      	ldr	r3, [r7, #28]
 8012228:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801222a:	69fb      	ldr	r3, [r7, #28]
 801222c:	68db      	ldr	r3, [r3, #12]
 801222e:	61fb      	str	r3, [r7, #28]
 8012230:	69fb      	ldr	r3, [r7, #28]
 8012232:	2b00      	cmp	r3, #0
 8012234:	f47f af5e 	bne.w	80120f4 <tcp_input+0x220>
 8012238:	e000      	b.n	801223c <tcp_input+0x368>
      break;
 801223a:	bf00      	nop
  }

  if (pcb == NULL) {
 801223c:	69fb      	ldr	r3, [r7, #28]
 801223e:	2b00      	cmp	r3, #0
 8012240:	f040 8095 	bne.w	801236e <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8012244:	4b73      	ldr	r3, [pc, #460]	; (8012414 <tcp_input+0x540>)
 8012246:	681b      	ldr	r3, [r3, #0]
 8012248:	61fb      	str	r3, [r7, #28]
 801224a:	e03f      	b.n	80122cc <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 801224c:	69fb      	ldr	r3, [r7, #28]
 801224e:	7d1b      	ldrb	r3, [r3, #20]
 8012250:	2b0a      	cmp	r3, #10
 8012252:	d006      	beq.n	8012262 <tcp_input+0x38e>
 8012254:	4b6a      	ldr	r3, [pc, #424]	; (8012400 <tcp_input+0x52c>)
 8012256:	f240 121f 	movw	r2, #287	; 0x11f
 801225a:	496f      	ldr	r1, [pc, #444]	; (8012418 <tcp_input+0x544>)
 801225c:	486a      	ldr	r0, [pc, #424]	; (8012408 <tcp_input+0x534>)
 801225e:	f009 f87f 	bl	801b360 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012262:	69fb      	ldr	r3, [r7, #28]
 8012264:	7a1b      	ldrb	r3, [r3, #8]
 8012266:	2b00      	cmp	r3, #0
 8012268:	d009      	beq.n	801227e <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801226a:	69fb      	ldr	r3, [r7, #28]
 801226c:	7a1a      	ldrb	r2, [r3, #8]
 801226e:	4b63      	ldr	r3, [pc, #396]	; (80123fc <tcp_input+0x528>)
 8012270:	685b      	ldr	r3, [r3, #4]
 8012272:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8012276:	3301      	adds	r3, #1
 8012278:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801227a:	429a      	cmp	r2, r3
 801227c:	d122      	bne.n	80122c4 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 801227e:	69fb      	ldr	r3, [r7, #28]
 8012280:	8b1a      	ldrh	r2, [r3, #24]
 8012282:	4b5d      	ldr	r3, [pc, #372]	; (80123f8 <tcp_input+0x524>)
 8012284:	681b      	ldr	r3, [r3, #0]
 8012286:	881b      	ldrh	r3, [r3, #0]
 8012288:	b29b      	uxth	r3, r3
 801228a:	429a      	cmp	r2, r3
 801228c:	d11b      	bne.n	80122c6 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 801228e:	69fb      	ldr	r3, [r7, #28]
 8012290:	8ada      	ldrh	r2, [r3, #22]
 8012292:	4b59      	ldr	r3, [pc, #356]	; (80123f8 <tcp_input+0x524>)
 8012294:	681b      	ldr	r3, [r3, #0]
 8012296:	885b      	ldrh	r3, [r3, #2]
 8012298:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 801229a:	429a      	cmp	r2, r3
 801229c:	d113      	bne.n	80122c6 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801229e:	69fb      	ldr	r3, [r7, #28]
 80122a0:	685a      	ldr	r2, [r3, #4]
 80122a2:	4b56      	ldr	r3, [pc, #344]	; (80123fc <tcp_input+0x528>)
 80122a4:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 80122a6:	429a      	cmp	r2, r3
 80122a8:	d10d      	bne.n	80122c6 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80122aa:	69fb      	ldr	r3, [r7, #28]
 80122ac:	681a      	ldr	r2, [r3, #0]
 80122ae:	4b53      	ldr	r3, [pc, #332]	; (80123fc <tcp_input+0x528>)
 80122b0:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80122b2:	429a      	cmp	r2, r3
 80122b4:	d107      	bne.n	80122c6 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 80122b6:	69f8      	ldr	r0, [r7, #28]
 80122b8:	f000 fb54 	bl	8012964 <tcp_timewait_input>
        }
        pbuf_free(p);
 80122bc:	6878      	ldr	r0, [r7, #4]
 80122be:	f7fd ffd1 	bl	8010264 <pbuf_free>
        return;
 80122c2:	e1f0      	b.n	80126a6 <tcp_input+0x7d2>
        continue;
 80122c4:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80122c6:	69fb      	ldr	r3, [r7, #28]
 80122c8:	68db      	ldr	r3, [r3, #12]
 80122ca:	61fb      	str	r3, [r7, #28]
 80122cc:	69fb      	ldr	r3, [r7, #28]
 80122ce:	2b00      	cmp	r3, #0
 80122d0:	d1bc      	bne.n	801224c <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 80122d2:	2300      	movs	r3, #0
 80122d4:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80122d6:	4b51      	ldr	r3, [pc, #324]	; (801241c <tcp_input+0x548>)
 80122d8:	681b      	ldr	r3, [r3, #0]
 80122da:	617b      	str	r3, [r7, #20]
 80122dc:	e02a      	b.n	8012334 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80122de:	697b      	ldr	r3, [r7, #20]
 80122e0:	7a1b      	ldrb	r3, [r3, #8]
 80122e2:	2b00      	cmp	r3, #0
 80122e4:	d00c      	beq.n	8012300 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80122e6:	697b      	ldr	r3, [r7, #20]
 80122e8:	7a1a      	ldrb	r2, [r3, #8]
 80122ea:	4b44      	ldr	r3, [pc, #272]	; (80123fc <tcp_input+0x528>)
 80122ec:	685b      	ldr	r3, [r3, #4]
 80122ee:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80122f2:	3301      	adds	r3, #1
 80122f4:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80122f6:	429a      	cmp	r2, r3
 80122f8:	d002      	beq.n	8012300 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 80122fa:	697b      	ldr	r3, [r7, #20]
 80122fc:	61bb      	str	r3, [r7, #24]
        continue;
 80122fe:	e016      	b.n	801232e <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8012300:	697b      	ldr	r3, [r7, #20]
 8012302:	8ada      	ldrh	r2, [r3, #22]
 8012304:	4b3c      	ldr	r3, [pc, #240]	; (80123f8 <tcp_input+0x524>)
 8012306:	681b      	ldr	r3, [r3, #0]
 8012308:	885b      	ldrh	r3, [r3, #2]
 801230a:	b29b      	uxth	r3, r3
 801230c:	429a      	cmp	r2, r3
 801230e:	d10c      	bne.n	801232a <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8012310:	697b      	ldr	r3, [r7, #20]
 8012312:	681a      	ldr	r2, [r3, #0]
 8012314:	4b39      	ldr	r3, [pc, #228]	; (80123fc <tcp_input+0x528>)
 8012316:	695b      	ldr	r3, [r3, #20]
 8012318:	429a      	cmp	r2, r3
 801231a:	d00f      	beq.n	801233c <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 801231c:	697b      	ldr	r3, [r7, #20]
 801231e:	2b00      	cmp	r3, #0
 8012320:	d00d      	beq.n	801233e <tcp_input+0x46a>
 8012322:	697b      	ldr	r3, [r7, #20]
 8012324:	681b      	ldr	r3, [r3, #0]
 8012326:	2b00      	cmp	r3, #0
 8012328:	d009      	beq.n	801233e <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 801232a:	697b      	ldr	r3, [r7, #20]
 801232c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801232e:	697b      	ldr	r3, [r7, #20]
 8012330:	68db      	ldr	r3, [r3, #12]
 8012332:	617b      	str	r3, [r7, #20]
 8012334:	697b      	ldr	r3, [r7, #20]
 8012336:	2b00      	cmp	r3, #0
 8012338:	d1d1      	bne.n	80122de <tcp_input+0x40a>
 801233a:	e000      	b.n	801233e <tcp_input+0x46a>
            break;
 801233c:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 801233e:	697b      	ldr	r3, [r7, #20]
 8012340:	2b00      	cmp	r3, #0
 8012342:	d014      	beq.n	801236e <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8012344:	69bb      	ldr	r3, [r7, #24]
 8012346:	2b00      	cmp	r3, #0
 8012348:	d00a      	beq.n	8012360 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 801234a:	697b      	ldr	r3, [r7, #20]
 801234c:	68da      	ldr	r2, [r3, #12]
 801234e:	69bb      	ldr	r3, [r7, #24]
 8012350:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8012352:	4b32      	ldr	r3, [pc, #200]	; (801241c <tcp_input+0x548>)
 8012354:	681a      	ldr	r2, [r3, #0]
 8012356:	697b      	ldr	r3, [r7, #20]
 8012358:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 801235a:	4a30      	ldr	r2, [pc, #192]	; (801241c <tcp_input+0x548>)
 801235c:	697b      	ldr	r3, [r7, #20]
 801235e:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8012360:	6978      	ldr	r0, [r7, #20]
 8012362:	f000 fa01 	bl	8012768 <tcp_listen_input>
      }
      pbuf_free(p);
 8012366:	6878      	ldr	r0, [r7, #4]
 8012368:	f7fd ff7c 	bl	8010264 <pbuf_free>
      return;
 801236c:	e19b      	b.n	80126a6 <tcp_input+0x7d2>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 801236e:	69fb      	ldr	r3, [r7, #28]
 8012370:	2b00      	cmp	r3, #0
 8012372:	f000 8160 	beq.w	8012636 <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8012376:	4b2a      	ldr	r3, [pc, #168]	; (8012420 <tcp_input+0x54c>)
 8012378:	2200      	movs	r2, #0
 801237a:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 801237c:	687b      	ldr	r3, [r7, #4]
 801237e:	891a      	ldrh	r2, [r3, #8]
 8012380:	4b27      	ldr	r3, [pc, #156]	; (8012420 <tcp_input+0x54c>)
 8012382:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8012384:	4a26      	ldr	r2, [pc, #152]	; (8012420 <tcp_input+0x54c>)
 8012386:	687b      	ldr	r3, [r7, #4]
 8012388:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 801238a:	4b1b      	ldr	r3, [pc, #108]	; (80123f8 <tcp_input+0x524>)
 801238c:	681b      	ldr	r3, [r3, #0]
 801238e:	4a24      	ldr	r2, [pc, #144]	; (8012420 <tcp_input+0x54c>)
 8012390:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8012392:	4b24      	ldr	r3, [pc, #144]	; (8012424 <tcp_input+0x550>)
 8012394:	2200      	movs	r2, #0
 8012396:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8012398:	4b23      	ldr	r3, [pc, #140]	; (8012428 <tcp_input+0x554>)
 801239a:	2200      	movs	r2, #0
 801239c:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 801239e:	4b23      	ldr	r3, [pc, #140]	; (801242c <tcp_input+0x558>)
 80123a0:	2200      	movs	r2, #0
 80123a2:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 80123a4:	4b22      	ldr	r3, [pc, #136]	; (8012430 <tcp_input+0x55c>)
 80123a6:	781b      	ldrb	r3, [r3, #0]
 80123a8:	f003 0308 	and.w	r3, r3, #8
 80123ac:	2b00      	cmp	r3, #0
 80123ae:	d006      	beq.n	80123be <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 80123b0:	687b      	ldr	r3, [r7, #4]
 80123b2:	7b5b      	ldrb	r3, [r3, #13]
 80123b4:	f043 0301 	orr.w	r3, r3, #1
 80123b8:	b2da      	uxtb	r2, r3
 80123ba:	687b      	ldr	r3, [r7, #4]
 80123bc:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 80123be:	69fb      	ldr	r3, [r7, #28]
 80123c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80123c2:	2b00      	cmp	r3, #0
 80123c4:	d038      	beq.n	8012438 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80123c6:	69f8      	ldr	r0, [r7, #28]
 80123c8:	f7ff f93e 	bl	8011648 <tcp_process_refused_data>
 80123cc:	4603      	mov	r3, r0
 80123ce:	f113 0f0d 	cmn.w	r3, #13
 80123d2:	d007      	beq.n	80123e4 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80123d4:	69fb      	ldr	r3, [r7, #28]
 80123d6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80123d8:	2b00      	cmp	r3, #0
 80123da:	d02d      	beq.n	8012438 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80123dc:	4b15      	ldr	r3, [pc, #84]	; (8012434 <tcp_input+0x560>)
 80123de:	881b      	ldrh	r3, [r3, #0]
 80123e0:	2b00      	cmp	r3, #0
 80123e2:	d029      	beq.n	8012438 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 80123e4:	69fb      	ldr	r3, [r7, #28]
 80123e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80123e8:	2b00      	cmp	r3, #0
 80123ea:	f040 8104 	bne.w	80125f6 <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 80123ee:	69f8      	ldr	r0, [r7, #28]
 80123f0:	f003 f9bc 	bl	801576c <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 80123f4:	e0ff      	b.n	80125f6 <tcp_input+0x722>
 80123f6:	bf00      	nop
 80123f8:	200004f0 	.word	0x200004f0
 80123fc:	2000450c 	.word	0x2000450c
 8012400:	08021d9c 	.word	0x08021d9c
 8012404:	08021ec8 	.word	0x08021ec8
 8012408:	08021de8 	.word	0x08021de8
 801240c:	20007630 	.word	0x20007630
 8012410:	08021ef4 	.word	0x08021ef4
 8012414:	20007640 	.word	0x20007640
 8012418:	08021f20 	.word	0x08021f20
 801241c:	20007638 	.word	0x20007638
 8012420:	200004e0 	.word	0x200004e0
 8012424:	20000510 	.word	0x20000510
 8012428:	2000050d 	.word	0x2000050d
 801242c:	20000508 	.word	0x20000508
 8012430:	2000050c 	.word	0x2000050c
 8012434:	2000050a 	.word	0x2000050a
      }
    }
    tcp_input_pcb = pcb;
 8012438:	4a9c      	ldr	r2, [pc, #624]	; (80126ac <tcp_input+0x7d8>)
 801243a:	69fb      	ldr	r3, [r7, #28]
 801243c:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 801243e:	69f8      	ldr	r0, [r7, #28]
 8012440:	f000 fb0a 	bl	8012a58 <tcp_process>
 8012444:	4603      	mov	r3, r0
 8012446:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8012448:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801244c:	f113 0f0d 	cmn.w	r3, #13
 8012450:	f000 80d3 	beq.w	80125fa <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 8012454:	4b96      	ldr	r3, [pc, #600]	; (80126b0 <tcp_input+0x7dc>)
 8012456:	781b      	ldrb	r3, [r3, #0]
 8012458:	f003 0308 	and.w	r3, r3, #8
 801245c:	2b00      	cmp	r3, #0
 801245e:	d015      	beq.n	801248c <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8012460:	69fb      	ldr	r3, [r7, #28]
 8012462:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012466:	2b00      	cmp	r3, #0
 8012468:	d008      	beq.n	801247c <tcp_input+0x5a8>
 801246a:	69fb      	ldr	r3, [r7, #28]
 801246c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012470:	69fa      	ldr	r2, [r7, #28]
 8012472:	6912      	ldr	r2, [r2, #16]
 8012474:	f06f 010d 	mvn.w	r1, #13
 8012478:	4610      	mov	r0, r2
 801247a:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 801247c:	69f9      	ldr	r1, [r7, #28]
 801247e:	488d      	ldr	r0, [pc, #564]	; (80126b4 <tcp_input+0x7e0>)
 8012480:	f7ff fbb0 	bl	8011be4 <tcp_pcb_remove>
        tcp_free(pcb);
 8012484:	69f8      	ldr	r0, [r7, #28]
 8012486:	f7fe f99d 	bl	80107c4 <tcp_free>
 801248a:	e0c1      	b.n	8012610 <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 801248c:	2300      	movs	r3, #0
 801248e:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8012490:	4b89      	ldr	r3, [pc, #548]	; (80126b8 <tcp_input+0x7e4>)
 8012492:	881b      	ldrh	r3, [r3, #0]
 8012494:	2b00      	cmp	r3, #0
 8012496:	d01d      	beq.n	80124d4 <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8012498:	4b87      	ldr	r3, [pc, #540]	; (80126b8 <tcp_input+0x7e4>)
 801249a:	881b      	ldrh	r3, [r3, #0]
 801249c:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 801249e:	69fb      	ldr	r3, [r7, #28]
 80124a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80124a4:	2b00      	cmp	r3, #0
 80124a6:	d00a      	beq.n	80124be <tcp_input+0x5ea>
 80124a8:	69fb      	ldr	r3, [r7, #28]
 80124aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80124ae:	69fa      	ldr	r2, [r7, #28]
 80124b0:	6910      	ldr	r0, [r2, #16]
 80124b2:	89fa      	ldrh	r2, [r7, #14]
 80124b4:	69f9      	ldr	r1, [r7, #28]
 80124b6:	4798      	blx	r3
 80124b8:	4603      	mov	r3, r0
 80124ba:	74fb      	strb	r3, [r7, #19]
 80124bc:	e001      	b.n	80124c2 <tcp_input+0x5ee>
 80124be:	2300      	movs	r3, #0
 80124c0:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80124c2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80124c6:	f113 0f0d 	cmn.w	r3, #13
 80124ca:	f000 8098 	beq.w	80125fe <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 80124ce:	4b7a      	ldr	r3, [pc, #488]	; (80126b8 <tcp_input+0x7e4>)
 80124d0:	2200      	movs	r2, #0
 80124d2:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 80124d4:	69f8      	ldr	r0, [r7, #28]
 80124d6:	f000 f907 	bl	80126e8 <tcp_input_delayed_close>
 80124da:	4603      	mov	r3, r0
 80124dc:	2b00      	cmp	r3, #0
 80124de:	f040 8090 	bne.w	8012602 <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 80124e2:	4b76      	ldr	r3, [pc, #472]	; (80126bc <tcp_input+0x7e8>)
 80124e4:	681b      	ldr	r3, [r3, #0]
 80124e6:	2b00      	cmp	r3, #0
 80124e8:	d041      	beq.n	801256e <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 80124ea:	69fb      	ldr	r3, [r7, #28]
 80124ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80124ee:	2b00      	cmp	r3, #0
 80124f0:	d006      	beq.n	8012500 <tcp_input+0x62c>
 80124f2:	4b73      	ldr	r3, [pc, #460]	; (80126c0 <tcp_input+0x7ec>)
 80124f4:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 80124f8:	4972      	ldr	r1, [pc, #456]	; (80126c4 <tcp_input+0x7f0>)
 80124fa:	4873      	ldr	r0, [pc, #460]	; (80126c8 <tcp_input+0x7f4>)
 80124fc:	f008 ff30 	bl	801b360 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8012500:	69fb      	ldr	r3, [r7, #28]
 8012502:	8b5b      	ldrh	r3, [r3, #26]
 8012504:	f003 0310 	and.w	r3, r3, #16
 8012508:	2b00      	cmp	r3, #0
 801250a:	d008      	beq.n	801251e <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 801250c:	4b6b      	ldr	r3, [pc, #428]	; (80126bc <tcp_input+0x7e8>)
 801250e:	681b      	ldr	r3, [r3, #0]
 8012510:	4618      	mov	r0, r3
 8012512:	f7fd fea7 	bl	8010264 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8012516:	69f8      	ldr	r0, [r7, #28]
 8012518:	f7fe fc3c 	bl	8010d94 <tcp_abort>
            goto aborted;
 801251c:	e078      	b.n	8012610 <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 801251e:	69fb      	ldr	r3, [r7, #28]
 8012520:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012524:	2b00      	cmp	r3, #0
 8012526:	d00c      	beq.n	8012542 <tcp_input+0x66e>
 8012528:	69fb      	ldr	r3, [r7, #28]
 801252a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 801252e:	69fb      	ldr	r3, [r7, #28]
 8012530:	6918      	ldr	r0, [r3, #16]
 8012532:	4b62      	ldr	r3, [pc, #392]	; (80126bc <tcp_input+0x7e8>)
 8012534:	681a      	ldr	r2, [r3, #0]
 8012536:	2300      	movs	r3, #0
 8012538:	69f9      	ldr	r1, [r7, #28]
 801253a:	47a0      	blx	r4
 801253c:	4603      	mov	r3, r0
 801253e:	74fb      	strb	r3, [r7, #19]
 8012540:	e008      	b.n	8012554 <tcp_input+0x680>
 8012542:	4b5e      	ldr	r3, [pc, #376]	; (80126bc <tcp_input+0x7e8>)
 8012544:	681a      	ldr	r2, [r3, #0]
 8012546:	2300      	movs	r3, #0
 8012548:	69f9      	ldr	r1, [r7, #28]
 801254a:	2000      	movs	r0, #0
 801254c:	f7ff f952 	bl	80117f4 <tcp_recv_null>
 8012550:	4603      	mov	r3, r0
 8012552:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8012554:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012558:	f113 0f0d 	cmn.w	r3, #13
 801255c:	d053      	beq.n	8012606 <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 801255e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012562:	2b00      	cmp	r3, #0
 8012564:	d003      	beq.n	801256e <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8012566:	4b55      	ldr	r3, [pc, #340]	; (80126bc <tcp_input+0x7e8>)
 8012568:	681a      	ldr	r2, [r3, #0]
 801256a:	69fb      	ldr	r3, [r7, #28]
 801256c:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 801256e:	4b50      	ldr	r3, [pc, #320]	; (80126b0 <tcp_input+0x7dc>)
 8012570:	781b      	ldrb	r3, [r3, #0]
 8012572:	f003 0320 	and.w	r3, r3, #32
 8012576:	2b00      	cmp	r3, #0
 8012578:	d030      	beq.n	80125dc <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 801257a:	69fb      	ldr	r3, [r7, #28]
 801257c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801257e:	2b00      	cmp	r3, #0
 8012580:	d009      	beq.n	8012596 <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8012582:	69fb      	ldr	r3, [r7, #28]
 8012584:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012586:	7b5a      	ldrb	r2, [r3, #13]
 8012588:	69fb      	ldr	r3, [r7, #28]
 801258a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801258c:	f042 0220 	orr.w	r2, r2, #32
 8012590:	b2d2      	uxtb	r2, r2
 8012592:	735a      	strb	r2, [r3, #13]
 8012594:	e022      	b.n	80125dc <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8012596:	69fb      	ldr	r3, [r7, #28]
 8012598:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801259a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801259e:	d005      	beq.n	80125ac <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 80125a0:	69fb      	ldr	r3, [r7, #28]
 80125a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80125a4:	3301      	adds	r3, #1
 80125a6:	b29a      	uxth	r2, r3
 80125a8:	69fb      	ldr	r3, [r7, #28]
 80125aa:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 80125ac:	69fb      	ldr	r3, [r7, #28]
 80125ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80125b2:	2b00      	cmp	r3, #0
 80125b4:	d00b      	beq.n	80125ce <tcp_input+0x6fa>
 80125b6:	69fb      	ldr	r3, [r7, #28]
 80125b8:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80125bc:	69fb      	ldr	r3, [r7, #28]
 80125be:	6918      	ldr	r0, [r3, #16]
 80125c0:	2300      	movs	r3, #0
 80125c2:	2200      	movs	r2, #0
 80125c4:	69f9      	ldr	r1, [r7, #28]
 80125c6:	47a0      	blx	r4
 80125c8:	4603      	mov	r3, r0
 80125ca:	74fb      	strb	r3, [r7, #19]
 80125cc:	e001      	b.n	80125d2 <tcp_input+0x6fe>
 80125ce:	2300      	movs	r3, #0
 80125d0:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80125d2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80125d6:	f113 0f0d 	cmn.w	r3, #13
 80125da:	d016      	beq.n	801260a <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 80125dc:	4b33      	ldr	r3, [pc, #204]	; (80126ac <tcp_input+0x7d8>)
 80125de:	2200      	movs	r2, #0
 80125e0:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 80125e2:	69f8      	ldr	r0, [r7, #28]
 80125e4:	f000 f880 	bl	80126e8 <tcp_input_delayed_close>
 80125e8:	4603      	mov	r3, r0
 80125ea:	2b00      	cmp	r3, #0
 80125ec:	d10f      	bne.n	801260e <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 80125ee:	69f8      	ldr	r0, [r7, #28]
 80125f0:	f002 fab8 	bl	8014b64 <tcp_output>
 80125f4:	e00c      	b.n	8012610 <tcp_input+0x73c>
        goto aborted;
 80125f6:	bf00      	nop
 80125f8:	e00a      	b.n	8012610 <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 80125fa:	bf00      	nop
 80125fc:	e008      	b.n	8012610 <tcp_input+0x73c>
              goto aborted;
 80125fe:	bf00      	nop
 8012600:	e006      	b.n	8012610 <tcp_input+0x73c>
          goto aborted;
 8012602:	bf00      	nop
 8012604:	e004      	b.n	8012610 <tcp_input+0x73c>
            goto aborted;
 8012606:	bf00      	nop
 8012608:	e002      	b.n	8012610 <tcp_input+0x73c>
              goto aborted;
 801260a:	bf00      	nop
 801260c:	e000      	b.n	8012610 <tcp_input+0x73c>
          goto aborted;
 801260e:	bf00      	nop
    tcp_input_pcb = NULL;
 8012610:	4b26      	ldr	r3, [pc, #152]	; (80126ac <tcp_input+0x7d8>)
 8012612:	2200      	movs	r2, #0
 8012614:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8012616:	4b29      	ldr	r3, [pc, #164]	; (80126bc <tcp_input+0x7e8>)
 8012618:	2200      	movs	r2, #0
 801261a:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 801261c:	4b2b      	ldr	r3, [pc, #172]	; (80126cc <tcp_input+0x7f8>)
 801261e:	685b      	ldr	r3, [r3, #4]
 8012620:	2b00      	cmp	r3, #0
 8012622:	d03f      	beq.n	80126a4 <tcp_input+0x7d0>
      pbuf_free(inseg.p);
 8012624:	4b29      	ldr	r3, [pc, #164]	; (80126cc <tcp_input+0x7f8>)
 8012626:	685b      	ldr	r3, [r3, #4]
 8012628:	4618      	mov	r0, r3
 801262a:	f7fd fe1b 	bl	8010264 <pbuf_free>
      inseg.p = NULL;
 801262e:	4b27      	ldr	r3, [pc, #156]	; (80126cc <tcp_input+0x7f8>)
 8012630:	2200      	movs	r2, #0
 8012632:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8012634:	e036      	b.n	80126a4 <tcp_input+0x7d0>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8012636:	4b26      	ldr	r3, [pc, #152]	; (80126d0 <tcp_input+0x7fc>)
 8012638:	681b      	ldr	r3, [r3, #0]
 801263a:	899b      	ldrh	r3, [r3, #12]
 801263c:	b29b      	uxth	r3, r3
 801263e:	4618      	mov	r0, r3
 8012640:	f7fc fb74 	bl	800ed2c <lwip_htons>
 8012644:	4603      	mov	r3, r0
 8012646:	b2db      	uxtb	r3, r3
 8012648:	f003 0304 	and.w	r3, r3, #4
 801264c:	2b00      	cmp	r3, #0
 801264e:	d118      	bne.n	8012682 <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012650:	4b20      	ldr	r3, [pc, #128]	; (80126d4 <tcp_input+0x800>)
 8012652:	6819      	ldr	r1, [r3, #0]
 8012654:	4b20      	ldr	r3, [pc, #128]	; (80126d8 <tcp_input+0x804>)
 8012656:	881b      	ldrh	r3, [r3, #0]
 8012658:	461a      	mov	r2, r3
 801265a:	4b20      	ldr	r3, [pc, #128]	; (80126dc <tcp_input+0x808>)
 801265c:	681b      	ldr	r3, [r3, #0]
 801265e:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012660:	4b1b      	ldr	r3, [pc, #108]	; (80126d0 <tcp_input+0x7fc>)
 8012662:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012664:	885b      	ldrh	r3, [r3, #2]
 8012666:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012668:	4a19      	ldr	r2, [pc, #100]	; (80126d0 <tcp_input+0x7fc>)
 801266a:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801266c:	8812      	ldrh	r2, [r2, #0]
 801266e:	b292      	uxth	r2, r2
 8012670:	9202      	str	r2, [sp, #8]
 8012672:	9301      	str	r3, [sp, #4]
 8012674:	4b1a      	ldr	r3, [pc, #104]	; (80126e0 <tcp_input+0x80c>)
 8012676:	9300      	str	r3, [sp, #0]
 8012678:	4b1a      	ldr	r3, [pc, #104]	; (80126e4 <tcp_input+0x810>)
 801267a:	4602      	mov	r2, r0
 801267c:	2000      	movs	r0, #0
 801267e:	f003 f825 	bl	80156cc <tcp_rst>
    pbuf_free(p);
 8012682:	6878      	ldr	r0, [r7, #4]
 8012684:	f7fd fdee 	bl	8010264 <pbuf_free>
  return;
 8012688:	e00c      	b.n	80126a4 <tcp_input+0x7d0>
    goto dropped;
 801268a:	bf00      	nop
 801268c:	e006      	b.n	801269c <tcp_input+0x7c8>
    goto dropped;
 801268e:	bf00      	nop
 8012690:	e004      	b.n	801269c <tcp_input+0x7c8>
    goto dropped;
 8012692:	bf00      	nop
 8012694:	e002      	b.n	801269c <tcp_input+0x7c8>
      goto dropped;
 8012696:	bf00      	nop
 8012698:	e000      	b.n	801269c <tcp_input+0x7c8>
      goto dropped;
 801269a:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 801269c:	6878      	ldr	r0, [r7, #4]
 801269e:	f7fd fde1 	bl	8010264 <pbuf_free>
 80126a2:	e000      	b.n	80126a6 <tcp_input+0x7d2>
  return;
 80126a4:	bf00      	nop
}
 80126a6:	3724      	adds	r7, #36	; 0x24
 80126a8:	46bd      	mov	sp, r7
 80126aa:	bd90      	pop	{r4, r7, pc}
 80126ac:	20007644 	.word	0x20007644
 80126b0:	2000050d 	.word	0x2000050d
 80126b4:	20007630 	.word	0x20007630
 80126b8:	20000508 	.word	0x20000508
 80126bc:	20000510 	.word	0x20000510
 80126c0:	08021d9c 	.word	0x08021d9c
 80126c4:	08021f50 	.word	0x08021f50
 80126c8:	08021de8 	.word	0x08021de8
 80126cc:	200004e0 	.word	0x200004e0
 80126d0:	200004f0 	.word	0x200004f0
 80126d4:	20000504 	.word	0x20000504
 80126d8:	2000050a 	.word	0x2000050a
 80126dc:	20000500 	.word	0x20000500
 80126e0:	2000451c 	.word	0x2000451c
 80126e4:	20004520 	.word	0x20004520

080126e8 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 80126e8:	b580      	push	{r7, lr}
 80126ea:	b082      	sub	sp, #8
 80126ec:	af00      	add	r7, sp, #0
 80126ee:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 80126f0:	687b      	ldr	r3, [r7, #4]
 80126f2:	2b00      	cmp	r3, #0
 80126f4:	d106      	bne.n	8012704 <tcp_input_delayed_close+0x1c>
 80126f6:	4b17      	ldr	r3, [pc, #92]	; (8012754 <tcp_input_delayed_close+0x6c>)
 80126f8:	f240 225a 	movw	r2, #602	; 0x25a
 80126fc:	4916      	ldr	r1, [pc, #88]	; (8012758 <tcp_input_delayed_close+0x70>)
 80126fe:	4817      	ldr	r0, [pc, #92]	; (801275c <tcp_input_delayed_close+0x74>)
 8012700:	f008 fe2e 	bl	801b360 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8012704:	4b16      	ldr	r3, [pc, #88]	; (8012760 <tcp_input_delayed_close+0x78>)
 8012706:	781b      	ldrb	r3, [r3, #0]
 8012708:	f003 0310 	and.w	r3, r3, #16
 801270c:	2b00      	cmp	r3, #0
 801270e:	d01c      	beq.n	801274a <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8012710:	687b      	ldr	r3, [r7, #4]
 8012712:	8b5b      	ldrh	r3, [r3, #26]
 8012714:	f003 0310 	and.w	r3, r3, #16
 8012718:	2b00      	cmp	r3, #0
 801271a:	d10d      	bne.n	8012738 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 801271c:	687b      	ldr	r3, [r7, #4]
 801271e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012722:	2b00      	cmp	r3, #0
 8012724:	d008      	beq.n	8012738 <tcp_input_delayed_close+0x50>
 8012726:	687b      	ldr	r3, [r7, #4]
 8012728:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801272c:	687a      	ldr	r2, [r7, #4]
 801272e:	6912      	ldr	r2, [r2, #16]
 8012730:	f06f 010e 	mvn.w	r1, #14
 8012734:	4610      	mov	r0, r2
 8012736:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8012738:	6879      	ldr	r1, [r7, #4]
 801273a:	480a      	ldr	r0, [pc, #40]	; (8012764 <tcp_input_delayed_close+0x7c>)
 801273c:	f7ff fa52 	bl	8011be4 <tcp_pcb_remove>
    tcp_free(pcb);
 8012740:	6878      	ldr	r0, [r7, #4]
 8012742:	f7fe f83f 	bl	80107c4 <tcp_free>
    return 1;
 8012746:	2301      	movs	r3, #1
 8012748:	e000      	b.n	801274c <tcp_input_delayed_close+0x64>
  }
  return 0;
 801274a:	2300      	movs	r3, #0
}
 801274c:	4618      	mov	r0, r3
 801274e:	3708      	adds	r7, #8
 8012750:	46bd      	mov	sp, r7
 8012752:	bd80      	pop	{r7, pc}
 8012754:	08021d9c 	.word	0x08021d9c
 8012758:	08021f6c 	.word	0x08021f6c
 801275c:	08021de8 	.word	0x08021de8
 8012760:	2000050d 	.word	0x2000050d
 8012764:	20007630 	.word	0x20007630

08012768 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8012768:	b590      	push	{r4, r7, lr}
 801276a:	b08b      	sub	sp, #44	; 0x2c
 801276c:	af04      	add	r7, sp, #16
 801276e:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8012770:	4b6f      	ldr	r3, [pc, #444]	; (8012930 <tcp_listen_input+0x1c8>)
 8012772:	781b      	ldrb	r3, [r3, #0]
 8012774:	f003 0304 	and.w	r3, r3, #4
 8012778:	2b00      	cmp	r3, #0
 801277a:	f040 80d2 	bne.w	8012922 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 801277e:	687b      	ldr	r3, [r7, #4]
 8012780:	2b00      	cmp	r3, #0
 8012782:	d106      	bne.n	8012792 <tcp_listen_input+0x2a>
 8012784:	4b6b      	ldr	r3, [pc, #428]	; (8012934 <tcp_listen_input+0x1cc>)
 8012786:	f240 2281 	movw	r2, #641	; 0x281
 801278a:	496b      	ldr	r1, [pc, #428]	; (8012938 <tcp_listen_input+0x1d0>)
 801278c:	486b      	ldr	r0, [pc, #428]	; (801293c <tcp_listen_input+0x1d4>)
 801278e:	f008 fde7 	bl	801b360 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8012792:	4b67      	ldr	r3, [pc, #412]	; (8012930 <tcp_listen_input+0x1c8>)
 8012794:	781b      	ldrb	r3, [r3, #0]
 8012796:	f003 0310 	and.w	r3, r3, #16
 801279a:	2b00      	cmp	r3, #0
 801279c:	d019      	beq.n	80127d2 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801279e:	4b68      	ldr	r3, [pc, #416]	; (8012940 <tcp_listen_input+0x1d8>)
 80127a0:	6819      	ldr	r1, [r3, #0]
 80127a2:	4b68      	ldr	r3, [pc, #416]	; (8012944 <tcp_listen_input+0x1dc>)
 80127a4:	881b      	ldrh	r3, [r3, #0]
 80127a6:	461a      	mov	r2, r3
 80127a8:	4b67      	ldr	r3, [pc, #412]	; (8012948 <tcp_listen_input+0x1e0>)
 80127aa:	681b      	ldr	r3, [r3, #0]
 80127ac:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80127ae:	4b67      	ldr	r3, [pc, #412]	; (801294c <tcp_listen_input+0x1e4>)
 80127b0:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80127b2:	885b      	ldrh	r3, [r3, #2]
 80127b4:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80127b6:	4a65      	ldr	r2, [pc, #404]	; (801294c <tcp_listen_input+0x1e4>)
 80127b8:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80127ba:	8812      	ldrh	r2, [r2, #0]
 80127bc:	b292      	uxth	r2, r2
 80127be:	9202      	str	r2, [sp, #8]
 80127c0:	9301      	str	r3, [sp, #4]
 80127c2:	4b63      	ldr	r3, [pc, #396]	; (8012950 <tcp_listen_input+0x1e8>)
 80127c4:	9300      	str	r3, [sp, #0]
 80127c6:	4b63      	ldr	r3, [pc, #396]	; (8012954 <tcp_listen_input+0x1ec>)
 80127c8:	4602      	mov	r2, r0
 80127ca:	6878      	ldr	r0, [r7, #4]
 80127cc:	f002 ff7e 	bl	80156cc <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 80127d0:	e0a9      	b.n	8012926 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 80127d2:	4b57      	ldr	r3, [pc, #348]	; (8012930 <tcp_listen_input+0x1c8>)
 80127d4:	781b      	ldrb	r3, [r3, #0]
 80127d6:	f003 0302 	and.w	r3, r3, #2
 80127da:	2b00      	cmp	r3, #0
 80127dc:	f000 80a3 	beq.w	8012926 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 80127e0:	687b      	ldr	r3, [r7, #4]
 80127e2:	7d5b      	ldrb	r3, [r3, #21]
 80127e4:	4618      	mov	r0, r3
 80127e6:	f7ff f929 	bl	8011a3c <tcp_alloc>
 80127ea:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 80127ec:	697b      	ldr	r3, [r7, #20]
 80127ee:	2b00      	cmp	r3, #0
 80127f0:	d111      	bne.n	8012816 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80127f2:	687b      	ldr	r3, [r7, #4]
 80127f4:	699b      	ldr	r3, [r3, #24]
 80127f6:	2b00      	cmp	r3, #0
 80127f8:	d00a      	beq.n	8012810 <tcp_listen_input+0xa8>
 80127fa:	687b      	ldr	r3, [r7, #4]
 80127fc:	699b      	ldr	r3, [r3, #24]
 80127fe:	687a      	ldr	r2, [r7, #4]
 8012800:	6910      	ldr	r0, [r2, #16]
 8012802:	f04f 32ff 	mov.w	r2, #4294967295
 8012806:	2100      	movs	r1, #0
 8012808:	4798      	blx	r3
 801280a:	4603      	mov	r3, r0
 801280c:	73bb      	strb	r3, [r7, #14]
      return;
 801280e:	e08b      	b.n	8012928 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8012810:	23f0      	movs	r3, #240	; 0xf0
 8012812:	73bb      	strb	r3, [r7, #14]
      return;
 8012814:	e088      	b.n	8012928 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8012816:	4b50      	ldr	r3, [pc, #320]	; (8012958 <tcp_listen_input+0x1f0>)
 8012818:	695a      	ldr	r2, [r3, #20]
 801281a:	697b      	ldr	r3, [r7, #20]
 801281c:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 801281e:	4b4e      	ldr	r3, [pc, #312]	; (8012958 <tcp_listen_input+0x1f0>)
 8012820:	691a      	ldr	r2, [r3, #16]
 8012822:	697b      	ldr	r3, [r7, #20]
 8012824:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8012826:	687b      	ldr	r3, [r7, #4]
 8012828:	8ada      	ldrh	r2, [r3, #22]
 801282a:	697b      	ldr	r3, [r7, #20]
 801282c:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 801282e:	4b47      	ldr	r3, [pc, #284]	; (801294c <tcp_listen_input+0x1e4>)
 8012830:	681b      	ldr	r3, [r3, #0]
 8012832:	881b      	ldrh	r3, [r3, #0]
 8012834:	b29a      	uxth	r2, r3
 8012836:	697b      	ldr	r3, [r7, #20]
 8012838:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 801283a:	697b      	ldr	r3, [r7, #20]
 801283c:	2203      	movs	r2, #3
 801283e:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8012840:	4b41      	ldr	r3, [pc, #260]	; (8012948 <tcp_listen_input+0x1e0>)
 8012842:	681b      	ldr	r3, [r3, #0]
 8012844:	1c5a      	adds	r2, r3, #1
 8012846:	697b      	ldr	r3, [r7, #20]
 8012848:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 801284a:	697b      	ldr	r3, [r7, #20]
 801284c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801284e:	697b      	ldr	r3, [r7, #20]
 8012850:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8012852:	6978      	ldr	r0, [r7, #20]
 8012854:	f7ff fa5a 	bl	8011d0c <tcp_next_iss>
 8012858:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 801285a:	697b      	ldr	r3, [r7, #20]
 801285c:	693a      	ldr	r2, [r7, #16]
 801285e:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8012860:	697b      	ldr	r3, [r7, #20]
 8012862:	693a      	ldr	r2, [r7, #16]
 8012864:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 8012866:	697b      	ldr	r3, [r7, #20]
 8012868:	693a      	ldr	r2, [r7, #16]
 801286a:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 801286c:	697b      	ldr	r3, [r7, #20]
 801286e:	693a      	ldr	r2, [r7, #16]
 8012870:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8012872:	4b35      	ldr	r3, [pc, #212]	; (8012948 <tcp_listen_input+0x1e0>)
 8012874:	681b      	ldr	r3, [r3, #0]
 8012876:	1e5a      	subs	r2, r3, #1
 8012878:	697b      	ldr	r3, [r7, #20]
 801287a:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 801287c:	687b      	ldr	r3, [r7, #4]
 801287e:	691a      	ldr	r2, [r3, #16]
 8012880:	697b      	ldr	r3, [r7, #20]
 8012882:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8012884:	697b      	ldr	r3, [r7, #20]
 8012886:	687a      	ldr	r2, [r7, #4]
 8012888:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 801288a:	687b      	ldr	r3, [r7, #4]
 801288c:	7a5b      	ldrb	r3, [r3, #9]
 801288e:	f003 030c 	and.w	r3, r3, #12
 8012892:	b2da      	uxtb	r2, r3
 8012894:	697b      	ldr	r3, [r7, #20]
 8012896:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8012898:	687b      	ldr	r3, [r7, #4]
 801289a:	7a1a      	ldrb	r2, [r3, #8]
 801289c:	697b      	ldr	r3, [r7, #20]
 801289e:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 80128a0:	4b2e      	ldr	r3, [pc, #184]	; (801295c <tcp_listen_input+0x1f4>)
 80128a2:	681a      	ldr	r2, [r3, #0]
 80128a4:	697b      	ldr	r3, [r7, #20]
 80128a6:	60da      	str	r2, [r3, #12]
 80128a8:	4a2c      	ldr	r2, [pc, #176]	; (801295c <tcp_listen_input+0x1f4>)
 80128aa:	697b      	ldr	r3, [r7, #20]
 80128ac:	6013      	str	r3, [r2, #0]
 80128ae:	f003 f8cd 	bl	8015a4c <tcp_timer_needed>
 80128b2:	4b2b      	ldr	r3, [pc, #172]	; (8012960 <tcp_listen_input+0x1f8>)
 80128b4:	2201      	movs	r2, #1
 80128b6:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 80128b8:	6978      	ldr	r0, [r7, #20]
 80128ba:	f001 fd8d 	bl	80143d8 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 80128be:	4b23      	ldr	r3, [pc, #140]	; (801294c <tcp_listen_input+0x1e4>)
 80128c0:	681b      	ldr	r3, [r3, #0]
 80128c2:	89db      	ldrh	r3, [r3, #14]
 80128c4:	b29a      	uxth	r2, r3
 80128c6:	697b      	ldr	r3, [r7, #20]
 80128c8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 80128cc:	697b      	ldr	r3, [r7, #20]
 80128ce:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80128d2:	697b      	ldr	r3, [r7, #20]
 80128d4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 80128d8:	697b      	ldr	r3, [r7, #20]
 80128da:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 80128dc:	697b      	ldr	r3, [r7, #20]
 80128de:	3304      	adds	r3, #4
 80128e0:	4618      	mov	r0, r3
 80128e2:	f006 fdab 	bl	801943c <ip4_route>
 80128e6:	4601      	mov	r1, r0
 80128e8:	697b      	ldr	r3, [r7, #20]
 80128ea:	3304      	adds	r3, #4
 80128ec:	461a      	mov	r2, r3
 80128ee:	4620      	mov	r0, r4
 80128f0:	f7ff fa32 	bl	8011d58 <tcp_eff_send_mss_netif>
 80128f4:	4603      	mov	r3, r0
 80128f6:	461a      	mov	r2, r3
 80128f8:	697b      	ldr	r3, [r7, #20]
 80128fa:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 80128fc:	2112      	movs	r1, #18
 80128fe:	6978      	ldr	r0, [r7, #20]
 8012900:	f002 f842 	bl	8014988 <tcp_enqueue_flags>
 8012904:	4603      	mov	r3, r0
 8012906:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8012908:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801290c:	2b00      	cmp	r3, #0
 801290e:	d004      	beq.n	801291a <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8012910:	2100      	movs	r1, #0
 8012912:	6978      	ldr	r0, [r7, #20]
 8012914:	f7fe f980 	bl	8010c18 <tcp_abandon>
      return;
 8012918:	e006      	b.n	8012928 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 801291a:	6978      	ldr	r0, [r7, #20]
 801291c:	f002 f922 	bl	8014b64 <tcp_output>
  return;
 8012920:	e001      	b.n	8012926 <tcp_listen_input+0x1be>
    return;
 8012922:	bf00      	nop
 8012924:	e000      	b.n	8012928 <tcp_listen_input+0x1c0>
  return;
 8012926:	bf00      	nop
}
 8012928:	371c      	adds	r7, #28
 801292a:	46bd      	mov	sp, r7
 801292c:	bd90      	pop	{r4, r7, pc}
 801292e:	bf00      	nop
 8012930:	2000050c 	.word	0x2000050c
 8012934:	08021d9c 	.word	0x08021d9c
 8012938:	08021f94 	.word	0x08021f94
 801293c:	08021de8 	.word	0x08021de8
 8012940:	20000504 	.word	0x20000504
 8012944:	2000050a 	.word	0x2000050a
 8012948:	20000500 	.word	0x20000500
 801294c:	200004f0 	.word	0x200004f0
 8012950:	2000451c 	.word	0x2000451c
 8012954:	20004520 	.word	0x20004520
 8012958:	2000450c 	.word	0x2000450c
 801295c:	20007630 	.word	0x20007630
 8012960:	2000762c 	.word	0x2000762c

08012964 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8012964:	b580      	push	{r7, lr}
 8012966:	b086      	sub	sp, #24
 8012968:	af04      	add	r7, sp, #16
 801296a:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 801296c:	4b2f      	ldr	r3, [pc, #188]	; (8012a2c <tcp_timewait_input+0xc8>)
 801296e:	781b      	ldrb	r3, [r3, #0]
 8012970:	f003 0304 	and.w	r3, r3, #4
 8012974:	2b00      	cmp	r3, #0
 8012976:	d153      	bne.n	8012a20 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8012978:	687b      	ldr	r3, [r7, #4]
 801297a:	2b00      	cmp	r3, #0
 801297c:	d106      	bne.n	801298c <tcp_timewait_input+0x28>
 801297e:	4b2c      	ldr	r3, [pc, #176]	; (8012a30 <tcp_timewait_input+0xcc>)
 8012980:	f240 22ee 	movw	r2, #750	; 0x2ee
 8012984:	492b      	ldr	r1, [pc, #172]	; (8012a34 <tcp_timewait_input+0xd0>)
 8012986:	482c      	ldr	r0, [pc, #176]	; (8012a38 <tcp_timewait_input+0xd4>)
 8012988:	f008 fcea 	bl	801b360 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 801298c:	4b27      	ldr	r3, [pc, #156]	; (8012a2c <tcp_timewait_input+0xc8>)
 801298e:	781b      	ldrb	r3, [r3, #0]
 8012990:	f003 0302 	and.w	r3, r3, #2
 8012994:	2b00      	cmp	r3, #0
 8012996:	d02a      	beq.n	80129ee <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8012998:	4b28      	ldr	r3, [pc, #160]	; (8012a3c <tcp_timewait_input+0xd8>)
 801299a:	681a      	ldr	r2, [r3, #0]
 801299c:	687b      	ldr	r3, [r7, #4]
 801299e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80129a0:	1ad3      	subs	r3, r2, r3
 80129a2:	2b00      	cmp	r3, #0
 80129a4:	db2d      	blt.n	8012a02 <tcp_timewait_input+0x9e>
 80129a6:	4b25      	ldr	r3, [pc, #148]	; (8012a3c <tcp_timewait_input+0xd8>)
 80129a8:	681a      	ldr	r2, [r3, #0]
 80129aa:	687b      	ldr	r3, [r7, #4]
 80129ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80129ae:	6879      	ldr	r1, [r7, #4]
 80129b0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80129b2:	440b      	add	r3, r1
 80129b4:	1ad3      	subs	r3, r2, r3
 80129b6:	2b00      	cmp	r3, #0
 80129b8:	dc23      	bgt.n	8012a02 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80129ba:	4b21      	ldr	r3, [pc, #132]	; (8012a40 <tcp_timewait_input+0xdc>)
 80129bc:	6819      	ldr	r1, [r3, #0]
 80129be:	4b21      	ldr	r3, [pc, #132]	; (8012a44 <tcp_timewait_input+0xe0>)
 80129c0:	881b      	ldrh	r3, [r3, #0]
 80129c2:	461a      	mov	r2, r3
 80129c4:	4b1d      	ldr	r3, [pc, #116]	; (8012a3c <tcp_timewait_input+0xd8>)
 80129c6:	681b      	ldr	r3, [r3, #0]
 80129c8:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80129ca:	4b1f      	ldr	r3, [pc, #124]	; (8012a48 <tcp_timewait_input+0xe4>)
 80129cc:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80129ce:	885b      	ldrh	r3, [r3, #2]
 80129d0:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80129d2:	4a1d      	ldr	r2, [pc, #116]	; (8012a48 <tcp_timewait_input+0xe4>)
 80129d4:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80129d6:	8812      	ldrh	r2, [r2, #0]
 80129d8:	b292      	uxth	r2, r2
 80129da:	9202      	str	r2, [sp, #8]
 80129dc:	9301      	str	r3, [sp, #4]
 80129de:	4b1b      	ldr	r3, [pc, #108]	; (8012a4c <tcp_timewait_input+0xe8>)
 80129e0:	9300      	str	r3, [sp, #0]
 80129e2:	4b1b      	ldr	r3, [pc, #108]	; (8012a50 <tcp_timewait_input+0xec>)
 80129e4:	4602      	mov	r2, r0
 80129e6:	6878      	ldr	r0, [r7, #4]
 80129e8:	f002 fe70 	bl	80156cc <tcp_rst>
      return;
 80129ec:	e01b      	b.n	8012a26 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 80129ee:	4b0f      	ldr	r3, [pc, #60]	; (8012a2c <tcp_timewait_input+0xc8>)
 80129f0:	781b      	ldrb	r3, [r3, #0]
 80129f2:	f003 0301 	and.w	r3, r3, #1
 80129f6:	2b00      	cmp	r3, #0
 80129f8:	d003      	beq.n	8012a02 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 80129fa:	4b16      	ldr	r3, [pc, #88]	; (8012a54 <tcp_timewait_input+0xf0>)
 80129fc:	681a      	ldr	r2, [r3, #0]
 80129fe:	687b      	ldr	r3, [r7, #4]
 8012a00:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8012a02:	4b10      	ldr	r3, [pc, #64]	; (8012a44 <tcp_timewait_input+0xe0>)
 8012a04:	881b      	ldrh	r3, [r3, #0]
 8012a06:	2b00      	cmp	r3, #0
 8012a08:	d00c      	beq.n	8012a24 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8012a0a:	687b      	ldr	r3, [r7, #4]
 8012a0c:	8b5b      	ldrh	r3, [r3, #26]
 8012a0e:	f043 0302 	orr.w	r3, r3, #2
 8012a12:	b29a      	uxth	r2, r3
 8012a14:	687b      	ldr	r3, [r7, #4]
 8012a16:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8012a18:	6878      	ldr	r0, [r7, #4]
 8012a1a:	f002 f8a3 	bl	8014b64 <tcp_output>
  }
  return;
 8012a1e:	e001      	b.n	8012a24 <tcp_timewait_input+0xc0>
    return;
 8012a20:	bf00      	nop
 8012a22:	e000      	b.n	8012a26 <tcp_timewait_input+0xc2>
  return;
 8012a24:	bf00      	nop
}
 8012a26:	3708      	adds	r7, #8
 8012a28:	46bd      	mov	sp, r7
 8012a2a:	bd80      	pop	{r7, pc}
 8012a2c:	2000050c 	.word	0x2000050c
 8012a30:	08021d9c 	.word	0x08021d9c
 8012a34:	08021fb4 	.word	0x08021fb4
 8012a38:	08021de8 	.word	0x08021de8
 8012a3c:	20000500 	.word	0x20000500
 8012a40:	20000504 	.word	0x20000504
 8012a44:	2000050a 	.word	0x2000050a
 8012a48:	200004f0 	.word	0x200004f0
 8012a4c:	2000451c 	.word	0x2000451c
 8012a50:	20004520 	.word	0x20004520
 8012a54:	20007634 	.word	0x20007634

08012a58 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8012a58:	b590      	push	{r4, r7, lr}
 8012a5a:	b08d      	sub	sp, #52	; 0x34
 8012a5c:	af04      	add	r7, sp, #16
 8012a5e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8012a60:	2300      	movs	r3, #0
 8012a62:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8012a64:	2300      	movs	r3, #0
 8012a66:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8012a68:	687b      	ldr	r3, [r7, #4]
 8012a6a:	2b00      	cmp	r3, #0
 8012a6c:	d106      	bne.n	8012a7c <tcp_process+0x24>
 8012a6e:	4ba5      	ldr	r3, [pc, #660]	; (8012d04 <tcp_process+0x2ac>)
 8012a70:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8012a74:	49a4      	ldr	r1, [pc, #656]	; (8012d08 <tcp_process+0x2b0>)
 8012a76:	48a5      	ldr	r0, [pc, #660]	; (8012d0c <tcp_process+0x2b4>)
 8012a78:	f008 fc72 	bl	801b360 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8012a7c:	4ba4      	ldr	r3, [pc, #656]	; (8012d10 <tcp_process+0x2b8>)
 8012a7e:	781b      	ldrb	r3, [r3, #0]
 8012a80:	f003 0304 	and.w	r3, r3, #4
 8012a84:	2b00      	cmp	r3, #0
 8012a86:	d04e      	beq.n	8012b26 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8012a88:	687b      	ldr	r3, [r7, #4]
 8012a8a:	7d1b      	ldrb	r3, [r3, #20]
 8012a8c:	2b02      	cmp	r3, #2
 8012a8e:	d108      	bne.n	8012aa2 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8012a90:	687b      	ldr	r3, [r7, #4]
 8012a92:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012a94:	4b9f      	ldr	r3, [pc, #636]	; (8012d14 <tcp_process+0x2bc>)
 8012a96:	681b      	ldr	r3, [r3, #0]
 8012a98:	429a      	cmp	r2, r3
 8012a9a:	d123      	bne.n	8012ae4 <tcp_process+0x8c>
        acceptable = 1;
 8012a9c:	2301      	movs	r3, #1
 8012a9e:	76fb      	strb	r3, [r7, #27]
 8012aa0:	e020      	b.n	8012ae4 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8012aa2:	687b      	ldr	r3, [r7, #4]
 8012aa4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012aa6:	4b9c      	ldr	r3, [pc, #624]	; (8012d18 <tcp_process+0x2c0>)
 8012aa8:	681b      	ldr	r3, [r3, #0]
 8012aaa:	429a      	cmp	r2, r3
 8012aac:	d102      	bne.n	8012ab4 <tcp_process+0x5c>
        acceptable = 1;
 8012aae:	2301      	movs	r3, #1
 8012ab0:	76fb      	strb	r3, [r7, #27]
 8012ab2:	e017      	b.n	8012ae4 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8012ab4:	4b98      	ldr	r3, [pc, #608]	; (8012d18 <tcp_process+0x2c0>)
 8012ab6:	681a      	ldr	r2, [r3, #0]
 8012ab8:	687b      	ldr	r3, [r7, #4]
 8012aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012abc:	1ad3      	subs	r3, r2, r3
 8012abe:	2b00      	cmp	r3, #0
 8012ac0:	db10      	blt.n	8012ae4 <tcp_process+0x8c>
 8012ac2:	4b95      	ldr	r3, [pc, #596]	; (8012d18 <tcp_process+0x2c0>)
 8012ac4:	681a      	ldr	r2, [r3, #0]
 8012ac6:	687b      	ldr	r3, [r7, #4]
 8012ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012aca:	6879      	ldr	r1, [r7, #4]
 8012acc:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8012ace:	440b      	add	r3, r1
 8012ad0:	1ad3      	subs	r3, r2, r3
 8012ad2:	2b00      	cmp	r3, #0
 8012ad4:	dc06      	bgt.n	8012ae4 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8012ad6:	687b      	ldr	r3, [r7, #4]
 8012ad8:	8b5b      	ldrh	r3, [r3, #26]
 8012ada:	f043 0302 	orr.w	r3, r3, #2
 8012ade:	b29a      	uxth	r2, r3
 8012ae0:	687b      	ldr	r3, [r7, #4]
 8012ae2:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8012ae4:	7efb      	ldrb	r3, [r7, #27]
 8012ae6:	2b00      	cmp	r3, #0
 8012ae8:	d01b      	beq.n	8012b22 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8012aea:	687b      	ldr	r3, [r7, #4]
 8012aec:	7d1b      	ldrb	r3, [r3, #20]
 8012aee:	2b00      	cmp	r3, #0
 8012af0:	d106      	bne.n	8012b00 <tcp_process+0xa8>
 8012af2:	4b84      	ldr	r3, [pc, #528]	; (8012d04 <tcp_process+0x2ac>)
 8012af4:	f44f 724e 	mov.w	r2, #824	; 0x338
 8012af8:	4988      	ldr	r1, [pc, #544]	; (8012d1c <tcp_process+0x2c4>)
 8012afa:	4884      	ldr	r0, [pc, #528]	; (8012d0c <tcp_process+0x2b4>)
 8012afc:	f008 fc30 	bl	801b360 <iprintf>
      recv_flags |= TF_RESET;
 8012b00:	4b87      	ldr	r3, [pc, #540]	; (8012d20 <tcp_process+0x2c8>)
 8012b02:	781b      	ldrb	r3, [r3, #0]
 8012b04:	f043 0308 	orr.w	r3, r3, #8
 8012b08:	b2da      	uxtb	r2, r3
 8012b0a:	4b85      	ldr	r3, [pc, #532]	; (8012d20 <tcp_process+0x2c8>)
 8012b0c:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8012b0e:	687b      	ldr	r3, [r7, #4]
 8012b10:	8b5b      	ldrh	r3, [r3, #26]
 8012b12:	f023 0301 	bic.w	r3, r3, #1
 8012b16:	b29a      	uxth	r2, r3
 8012b18:	687b      	ldr	r3, [r7, #4]
 8012b1a:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8012b1c:	f06f 030d 	mvn.w	r3, #13
 8012b20:	e37a      	b.n	8013218 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8012b22:	2300      	movs	r3, #0
 8012b24:	e378      	b.n	8013218 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8012b26:	4b7a      	ldr	r3, [pc, #488]	; (8012d10 <tcp_process+0x2b8>)
 8012b28:	781b      	ldrb	r3, [r3, #0]
 8012b2a:	f003 0302 	and.w	r3, r3, #2
 8012b2e:	2b00      	cmp	r3, #0
 8012b30:	d010      	beq.n	8012b54 <tcp_process+0xfc>
 8012b32:	687b      	ldr	r3, [r7, #4]
 8012b34:	7d1b      	ldrb	r3, [r3, #20]
 8012b36:	2b02      	cmp	r3, #2
 8012b38:	d00c      	beq.n	8012b54 <tcp_process+0xfc>
 8012b3a:	687b      	ldr	r3, [r7, #4]
 8012b3c:	7d1b      	ldrb	r3, [r3, #20]
 8012b3e:	2b03      	cmp	r3, #3
 8012b40:	d008      	beq.n	8012b54 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8012b42:	687b      	ldr	r3, [r7, #4]
 8012b44:	8b5b      	ldrh	r3, [r3, #26]
 8012b46:	f043 0302 	orr.w	r3, r3, #2
 8012b4a:	b29a      	uxth	r2, r3
 8012b4c:	687b      	ldr	r3, [r7, #4]
 8012b4e:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8012b50:	2300      	movs	r3, #0
 8012b52:	e361      	b.n	8013218 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8012b54:	687b      	ldr	r3, [r7, #4]
 8012b56:	8b5b      	ldrh	r3, [r3, #26]
 8012b58:	f003 0310 	and.w	r3, r3, #16
 8012b5c:	2b00      	cmp	r3, #0
 8012b5e:	d103      	bne.n	8012b68 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8012b60:	4b70      	ldr	r3, [pc, #448]	; (8012d24 <tcp_process+0x2cc>)
 8012b62:	681a      	ldr	r2, [r3, #0]
 8012b64:	687b      	ldr	r3, [r7, #4]
 8012b66:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8012b68:	687b      	ldr	r3, [r7, #4]
 8012b6a:	2200      	movs	r2, #0
 8012b6c:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8012b70:	687b      	ldr	r3, [r7, #4]
 8012b72:	2200      	movs	r2, #0
 8012b74:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8012b78:	6878      	ldr	r0, [r7, #4]
 8012b7a:	f001 fc2d 	bl	80143d8 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8012b7e:	687b      	ldr	r3, [r7, #4]
 8012b80:	7d1b      	ldrb	r3, [r3, #20]
 8012b82:	3b02      	subs	r3, #2
 8012b84:	2b07      	cmp	r3, #7
 8012b86:	f200 8337 	bhi.w	80131f8 <tcp_process+0x7a0>
 8012b8a:	a201      	add	r2, pc, #4	; (adr r2, 8012b90 <tcp_process+0x138>)
 8012b8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012b90:	08012bb1 	.word	0x08012bb1
 8012b94:	08012de1 	.word	0x08012de1
 8012b98:	08012f59 	.word	0x08012f59
 8012b9c:	08012f83 	.word	0x08012f83
 8012ba0:	080130a7 	.word	0x080130a7
 8012ba4:	08012f59 	.word	0x08012f59
 8012ba8:	08013133 	.word	0x08013133
 8012bac:	080131c3 	.word	0x080131c3
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8012bb0:	4b57      	ldr	r3, [pc, #348]	; (8012d10 <tcp_process+0x2b8>)
 8012bb2:	781b      	ldrb	r3, [r3, #0]
 8012bb4:	f003 0310 	and.w	r3, r3, #16
 8012bb8:	2b00      	cmp	r3, #0
 8012bba:	f000 80e4 	beq.w	8012d86 <tcp_process+0x32e>
 8012bbe:	4b54      	ldr	r3, [pc, #336]	; (8012d10 <tcp_process+0x2b8>)
 8012bc0:	781b      	ldrb	r3, [r3, #0]
 8012bc2:	f003 0302 	and.w	r3, r3, #2
 8012bc6:	2b00      	cmp	r3, #0
 8012bc8:	f000 80dd 	beq.w	8012d86 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8012bcc:	687b      	ldr	r3, [r7, #4]
 8012bce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012bd0:	1c5a      	adds	r2, r3, #1
 8012bd2:	4b50      	ldr	r3, [pc, #320]	; (8012d14 <tcp_process+0x2bc>)
 8012bd4:	681b      	ldr	r3, [r3, #0]
 8012bd6:	429a      	cmp	r2, r3
 8012bd8:	f040 80d5 	bne.w	8012d86 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8012bdc:	4b4e      	ldr	r3, [pc, #312]	; (8012d18 <tcp_process+0x2c0>)
 8012bde:	681b      	ldr	r3, [r3, #0]
 8012be0:	1c5a      	adds	r2, r3, #1
 8012be2:	687b      	ldr	r3, [r7, #4]
 8012be4:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8012be6:	687b      	ldr	r3, [r7, #4]
 8012be8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012bea:	687b      	ldr	r3, [r7, #4]
 8012bec:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8012bee:	4b49      	ldr	r3, [pc, #292]	; (8012d14 <tcp_process+0x2bc>)
 8012bf0:	681a      	ldr	r2, [r3, #0]
 8012bf2:	687b      	ldr	r3, [r7, #4]
 8012bf4:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8012bf6:	4b4c      	ldr	r3, [pc, #304]	; (8012d28 <tcp_process+0x2d0>)
 8012bf8:	681b      	ldr	r3, [r3, #0]
 8012bfa:	89db      	ldrh	r3, [r3, #14]
 8012bfc:	b29a      	uxth	r2, r3
 8012bfe:	687b      	ldr	r3, [r7, #4]
 8012c00:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8012c04:	687b      	ldr	r3, [r7, #4]
 8012c06:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8012c0a:	687b      	ldr	r3, [r7, #4]
 8012c0c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8012c10:	4b41      	ldr	r3, [pc, #260]	; (8012d18 <tcp_process+0x2c0>)
 8012c12:	681b      	ldr	r3, [r3, #0]
 8012c14:	1e5a      	subs	r2, r3, #1
 8012c16:	687b      	ldr	r3, [r7, #4]
 8012c18:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8012c1a:	687b      	ldr	r3, [r7, #4]
 8012c1c:	2204      	movs	r2, #4
 8012c1e:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8012c20:	687b      	ldr	r3, [r7, #4]
 8012c22:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8012c24:	687b      	ldr	r3, [r7, #4]
 8012c26:	3304      	adds	r3, #4
 8012c28:	4618      	mov	r0, r3
 8012c2a:	f006 fc07 	bl	801943c <ip4_route>
 8012c2e:	4601      	mov	r1, r0
 8012c30:	687b      	ldr	r3, [r7, #4]
 8012c32:	3304      	adds	r3, #4
 8012c34:	461a      	mov	r2, r3
 8012c36:	4620      	mov	r0, r4
 8012c38:	f7ff f88e 	bl	8011d58 <tcp_eff_send_mss_netif>
 8012c3c:	4603      	mov	r3, r0
 8012c3e:	461a      	mov	r2, r3
 8012c40:	687b      	ldr	r3, [r7, #4]
 8012c42:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8012c44:	687b      	ldr	r3, [r7, #4]
 8012c46:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012c48:	009a      	lsls	r2, r3, #2
 8012c4a:	687b      	ldr	r3, [r7, #4]
 8012c4c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012c4e:	005b      	lsls	r3, r3, #1
 8012c50:	f241 111c 	movw	r1, #4380	; 0x111c
 8012c54:	428b      	cmp	r3, r1
 8012c56:	bf38      	it	cc
 8012c58:	460b      	movcc	r3, r1
 8012c5a:	429a      	cmp	r2, r3
 8012c5c:	d204      	bcs.n	8012c68 <tcp_process+0x210>
 8012c5e:	687b      	ldr	r3, [r7, #4]
 8012c60:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012c62:	009b      	lsls	r3, r3, #2
 8012c64:	b29b      	uxth	r3, r3
 8012c66:	e00d      	b.n	8012c84 <tcp_process+0x22c>
 8012c68:	687b      	ldr	r3, [r7, #4]
 8012c6a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012c6c:	005b      	lsls	r3, r3, #1
 8012c6e:	f241 121c 	movw	r2, #4380	; 0x111c
 8012c72:	4293      	cmp	r3, r2
 8012c74:	d904      	bls.n	8012c80 <tcp_process+0x228>
 8012c76:	687b      	ldr	r3, [r7, #4]
 8012c78:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012c7a:	005b      	lsls	r3, r3, #1
 8012c7c:	b29b      	uxth	r3, r3
 8012c7e:	e001      	b.n	8012c84 <tcp_process+0x22c>
 8012c80:	f241 131c 	movw	r3, #4380	; 0x111c
 8012c84:	687a      	ldr	r2, [r7, #4]
 8012c86:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8012c8a:	687b      	ldr	r3, [r7, #4]
 8012c8c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012c90:	2b00      	cmp	r3, #0
 8012c92:	d106      	bne.n	8012ca2 <tcp_process+0x24a>
 8012c94:	4b1b      	ldr	r3, [pc, #108]	; (8012d04 <tcp_process+0x2ac>)
 8012c96:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8012c9a:	4924      	ldr	r1, [pc, #144]	; (8012d2c <tcp_process+0x2d4>)
 8012c9c:	481b      	ldr	r0, [pc, #108]	; (8012d0c <tcp_process+0x2b4>)
 8012c9e:	f008 fb5f 	bl	801b360 <iprintf>
        --pcb->snd_queuelen;
 8012ca2:	687b      	ldr	r3, [r7, #4]
 8012ca4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012ca8:	3b01      	subs	r3, #1
 8012caa:	b29a      	uxth	r2, r3
 8012cac:	687b      	ldr	r3, [r7, #4]
 8012cae:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8012cb2:	687b      	ldr	r3, [r7, #4]
 8012cb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012cb6:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8012cb8:	69fb      	ldr	r3, [r7, #28]
 8012cba:	2b00      	cmp	r3, #0
 8012cbc:	d111      	bne.n	8012ce2 <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8012cbe:	687b      	ldr	r3, [r7, #4]
 8012cc0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012cc2:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8012cc4:	69fb      	ldr	r3, [r7, #28]
 8012cc6:	2b00      	cmp	r3, #0
 8012cc8:	d106      	bne.n	8012cd8 <tcp_process+0x280>
 8012cca:	4b0e      	ldr	r3, [pc, #56]	; (8012d04 <tcp_process+0x2ac>)
 8012ccc:	f44f 725d 	mov.w	r2, #884	; 0x374
 8012cd0:	4917      	ldr	r1, [pc, #92]	; (8012d30 <tcp_process+0x2d8>)
 8012cd2:	480e      	ldr	r0, [pc, #56]	; (8012d0c <tcp_process+0x2b4>)
 8012cd4:	f008 fb44 	bl	801b360 <iprintf>
          pcb->unsent = rseg->next;
 8012cd8:	69fb      	ldr	r3, [r7, #28]
 8012cda:	681a      	ldr	r2, [r3, #0]
 8012cdc:	687b      	ldr	r3, [r7, #4]
 8012cde:	66da      	str	r2, [r3, #108]	; 0x6c
 8012ce0:	e003      	b.n	8012cea <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 8012ce2:	69fb      	ldr	r3, [r7, #28]
 8012ce4:	681a      	ldr	r2, [r3, #0]
 8012ce6:	687b      	ldr	r3, [r7, #4]
 8012ce8:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8012cea:	69f8      	ldr	r0, [r7, #28]
 8012cec:	f7fe fd3d 	bl	801176a <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8012cf0:	687b      	ldr	r3, [r7, #4]
 8012cf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012cf4:	2b00      	cmp	r3, #0
 8012cf6:	d11d      	bne.n	8012d34 <tcp_process+0x2dc>
          pcb->rtime = -1;
 8012cf8:	687b      	ldr	r3, [r7, #4]
 8012cfa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012cfe:	861a      	strh	r2, [r3, #48]	; 0x30
 8012d00:	e01f      	b.n	8012d42 <tcp_process+0x2ea>
 8012d02:	bf00      	nop
 8012d04:	08021d9c 	.word	0x08021d9c
 8012d08:	08021fd4 	.word	0x08021fd4
 8012d0c:	08021de8 	.word	0x08021de8
 8012d10:	2000050c 	.word	0x2000050c
 8012d14:	20000504 	.word	0x20000504
 8012d18:	20000500 	.word	0x20000500
 8012d1c:	08021ff0 	.word	0x08021ff0
 8012d20:	2000050d 	.word	0x2000050d
 8012d24:	20007634 	.word	0x20007634
 8012d28:	200004f0 	.word	0x200004f0
 8012d2c:	08022010 	.word	0x08022010
 8012d30:	08022028 	.word	0x08022028
        } else {
          pcb->rtime = 0;
 8012d34:	687b      	ldr	r3, [r7, #4]
 8012d36:	2200      	movs	r2, #0
 8012d38:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8012d3a:	687b      	ldr	r3, [r7, #4]
 8012d3c:	2200      	movs	r2, #0
 8012d3e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8012d42:	687b      	ldr	r3, [r7, #4]
 8012d44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012d48:	2b00      	cmp	r3, #0
 8012d4a:	d00a      	beq.n	8012d62 <tcp_process+0x30a>
 8012d4c:	687b      	ldr	r3, [r7, #4]
 8012d4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012d52:	687a      	ldr	r2, [r7, #4]
 8012d54:	6910      	ldr	r0, [r2, #16]
 8012d56:	2200      	movs	r2, #0
 8012d58:	6879      	ldr	r1, [r7, #4]
 8012d5a:	4798      	blx	r3
 8012d5c:	4603      	mov	r3, r0
 8012d5e:	76bb      	strb	r3, [r7, #26]
 8012d60:	e001      	b.n	8012d66 <tcp_process+0x30e>
 8012d62:	2300      	movs	r3, #0
 8012d64:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8012d66:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8012d6a:	f113 0f0d 	cmn.w	r3, #13
 8012d6e:	d102      	bne.n	8012d76 <tcp_process+0x31e>
          return ERR_ABRT;
 8012d70:	f06f 030c 	mvn.w	r3, #12
 8012d74:	e250      	b.n	8013218 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8012d76:	687b      	ldr	r3, [r7, #4]
 8012d78:	8b5b      	ldrh	r3, [r3, #26]
 8012d7a:	f043 0302 	orr.w	r3, r3, #2
 8012d7e:	b29a      	uxth	r2, r3
 8012d80:	687b      	ldr	r3, [r7, #4]
 8012d82:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8012d84:	e23a      	b.n	80131fc <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8012d86:	4b9d      	ldr	r3, [pc, #628]	; (8012ffc <tcp_process+0x5a4>)
 8012d88:	781b      	ldrb	r3, [r3, #0]
 8012d8a:	f003 0310 	and.w	r3, r3, #16
 8012d8e:	2b00      	cmp	r3, #0
 8012d90:	f000 8234 	beq.w	80131fc <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012d94:	4b9a      	ldr	r3, [pc, #616]	; (8013000 <tcp_process+0x5a8>)
 8012d96:	6819      	ldr	r1, [r3, #0]
 8012d98:	4b9a      	ldr	r3, [pc, #616]	; (8013004 <tcp_process+0x5ac>)
 8012d9a:	881b      	ldrh	r3, [r3, #0]
 8012d9c:	461a      	mov	r2, r3
 8012d9e:	4b9a      	ldr	r3, [pc, #616]	; (8013008 <tcp_process+0x5b0>)
 8012da0:	681b      	ldr	r3, [r3, #0]
 8012da2:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012da4:	4b99      	ldr	r3, [pc, #612]	; (801300c <tcp_process+0x5b4>)
 8012da6:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012da8:	885b      	ldrh	r3, [r3, #2]
 8012daa:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012dac:	4a97      	ldr	r2, [pc, #604]	; (801300c <tcp_process+0x5b4>)
 8012dae:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012db0:	8812      	ldrh	r2, [r2, #0]
 8012db2:	b292      	uxth	r2, r2
 8012db4:	9202      	str	r2, [sp, #8]
 8012db6:	9301      	str	r3, [sp, #4]
 8012db8:	4b95      	ldr	r3, [pc, #596]	; (8013010 <tcp_process+0x5b8>)
 8012dba:	9300      	str	r3, [sp, #0]
 8012dbc:	4b95      	ldr	r3, [pc, #596]	; (8013014 <tcp_process+0x5bc>)
 8012dbe:	4602      	mov	r2, r0
 8012dc0:	6878      	ldr	r0, [r7, #4]
 8012dc2:	f002 fc83 	bl	80156cc <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8012dc6:	687b      	ldr	r3, [r7, #4]
 8012dc8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012dcc:	2b05      	cmp	r3, #5
 8012dce:	f200 8215 	bhi.w	80131fc <tcp_process+0x7a4>
          pcb->rtime = 0;
 8012dd2:	687b      	ldr	r3, [r7, #4]
 8012dd4:	2200      	movs	r2, #0
 8012dd6:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8012dd8:	6878      	ldr	r0, [r7, #4]
 8012dda:	f002 fa4d 	bl	8015278 <tcp_rexmit_rto>
      break;
 8012dde:	e20d      	b.n	80131fc <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8012de0:	4b86      	ldr	r3, [pc, #536]	; (8012ffc <tcp_process+0x5a4>)
 8012de2:	781b      	ldrb	r3, [r3, #0]
 8012de4:	f003 0310 	and.w	r3, r3, #16
 8012de8:	2b00      	cmp	r3, #0
 8012dea:	f000 80a1 	beq.w	8012f30 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8012dee:	4b84      	ldr	r3, [pc, #528]	; (8013000 <tcp_process+0x5a8>)
 8012df0:	681a      	ldr	r2, [r3, #0]
 8012df2:	687b      	ldr	r3, [r7, #4]
 8012df4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012df6:	1ad3      	subs	r3, r2, r3
 8012df8:	3b01      	subs	r3, #1
 8012dfa:	2b00      	cmp	r3, #0
 8012dfc:	db7e      	blt.n	8012efc <tcp_process+0x4a4>
 8012dfe:	4b80      	ldr	r3, [pc, #512]	; (8013000 <tcp_process+0x5a8>)
 8012e00:	681a      	ldr	r2, [r3, #0]
 8012e02:	687b      	ldr	r3, [r7, #4]
 8012e04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012e06:	1ad3      	subs	r3, r2, r3
 8012e08:	2b00      	cmp	r3, #0
 8012e0a:	dc77      	bgt.n	8012efc <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8012e0c:	687b      	ldr	r3, [r7, #4]
 8012e0e:	2204      	movs	r2, #4
 8012e10:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8012e12:	687b      	ldr	r3, [r7, #4]
 8012e14:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012e16:	2b00      	cmp	r3, #0
 8012e18:	d102      	bne.n	8012e20 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8012e1a:	23fa      	movs	r3, #250	; 0xfa
 8012e1c:	76bb      	strb	r3, [r7, #26]
 8012e1e:	e01d      	b.n	8012e5c <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8012e20:	687b      	ldr	r3, [r7, #4]
 8012e22:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012e24:	699b      	ldr	r3, [r3, #24]
 8012e26:	2b00      	cmp	r3, #0
 8012e28:	d106      	bne.n	8012e38 <tcp_process+0x3e0>
 8012e2a:	4b7b      	ldr	r3, [pc, #492]	; (8013018 <tcp_process+0x5c0>)
 8012e2c:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8012e30:	497a      	ldr	r1, [pc, #488]	; (801301c <tcp_process+0x5c4>)
 8012e32:	487b      	ldr	r0, [pc, #492]	; (8013020 <tcp_process+0x5c8>)
 8012e34:	f008 fa94 	bl	801b360 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8012e38:	687b      	ldr	r3, [r7, #4]
 8012e3a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012e3c:	699b      	ldr	r3, [r3, #24]
 8012e3e:	2b00      	cmp	r3, #0
 8012e40:	d00a      	beq.n	8012e58 <tcp_process+0x400>
 8012e42:	687b      	ldr	r3, [r7, #4]
 8012e44:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012e46:	699b      	ldr	r3, [r3, #24]
 8012e48:	687a      	ldr	r2, [r7, #4]
 8012e4a:	6910      	ldr	r0, [r2, #16]
 8012e4c:	2200      	movs	r2, #0
 8012e4e:	6879      	ldr	r1, [r7, #4]
 8012e50:	4798      	blx	r3
 8012e52:	4603      	mov	r3, r0
 8012e54:	76bb      	strb	r3, [r7, #26]
 8012e56:	e001      	b.n	8012e5c <tcp_process+0x404>
 8012e58:	23f0      	movs	r3, #240	; 0xf0
 8012e5a:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8012e5c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8012e60:	2b00      	cmp	r3, #0
 8012e62:	d00a      	beq.n	8012e7a <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8012e64:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8012e68:	f113 0f0d 	cmn.w	r3, #13
 8012e6c:	d002      	beq.n	8012e74 <tcp_process+0x41c>
              tcp_abort(pcb);
 8012e6e:	6878      	ldr	r0, [r7, #4]
 8012e70:	f7fd ff90 	bl	8010d94 <tcp_abort>
            }
            return ERR_ABRT;
 8012e74:	f06f 030c 	mvn.w	r3, #12
 8012e78:	e1ce      	b.n	8013218 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8012e7a:	6878      	ldr	r0, [r7, #4]
 8012e7c:	f000 fae0 	bl	8013440 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8012e80:	4b68      	ldr	r3, [pc, #416]	; (8013024 <tcp_process+0x5cc>)
 8012e82:	881b      	ldrh	r3, [r3, #0]
 8012e84:	2b00      	cmp	r3, #0
 8012e86:	d005      	beq.n	8012e94 <tcp_process+0x43c>
            recv_acked--;
 8012e88:	4b66      	ldr	r3, [pc, #408]	; (8013024 <tcp_process+0x5cc>)
 8012e8a:	881b      	ldrh	r3, [r3, #0]
 8012e8c:	3b01      	subs	r3, #1
 8012e8e:	b29a      	uxth	r2, r3
 8012e90:	4b64      	ldr	r3, [pc, #400]	; (8013024 <tcp_process+0x5cc>)
 8012e92:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8012e94:	687b      	ldr	r3, [r7, #4]
 8012e96:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012e98:	009a      	lsls	r2, r3, #2
 8012e9a:	687b      	ldr	r3, [r7, #4]
 8012e9c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012e9e:	005b      	lsls	r3, r3, #1
 8012ea0:	f241 111c 	movw	r1, #4380	; 0x111c
 8012ea4:	428b      	cmp	r3, r1
 8012ea6:	bf38      	it	cc
 8012ea8:	460b      	movcc	r3, r1
 8012eaa:	429a      	cmp	r2, r3
 8012eac:	d204      	bcs.n	8012eb8 <tcp_process+0x460>
 8012eae:	687b      	ldr	r3, [r7, #4]
 8012eb0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012eb2:	009b      	lsls	r3, r3, #2
 8012eb4:	b29b      	uxth	r3, r3
 8012eb6:	e00d      	b.n	8012ed4 <tcp_process+0x47c>
 8012eb8:	687b      	ldr	r3, [r7, #4]
 8012eba:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012ebc:	005b      	lsls	r3, r3, #1
 8012ebe:	f241 121c 	movw	r2, #4380	; 0x111c
 8012ec2:	4293      	cmp	r3, r2
 8012ec4:	d904      	bls.n	8012ed0 <tcp_process+0x478>
 8012ec6:	687b      	ldr	r3, [r7, #4]
 8012ec8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012eca:	005b      	lsls	r3, r3, #1
 8012ecc:	b29b      	uxth	r3, r3
 8012ece:	e001      	b.n	8012ed4 <tcp_process+0x47c>
 8012ed0:	f241 131c 	movw	r3, #4380	; 0x111c
 8012ed4:	687a      	ldr	r2, [r7, #4]
 8012ed6:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8012eda:	4b53      	ldr	r3, [pc, #332]	; (8013028 <tcp_process+0x5d0>)
 8012edc:	781b      	ldrb	r3, [r3, #0]
 8012ede:	f003 0320 	and.w	r3, r3, #32
 8012ee2:	2b00      	cmp	r3, #0
 8012ee4:	d037      	beq.n	8012f56 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8012ee6:	687b      	ldr	r3, [r7, #4]
 8012ee8:	8b5b      	ldrh	r3, [r3, #26]
 8012eea:	f043 0302 	orr.w	r3, r3, #2
 8012eee:	b29a      	uxth	r2, r3
 8012ef0:	687b      	ldr	r3, [r7, #4]
 8012ef2:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8012ef4:	687b      	ldr	r3, [r7, #4]
 8012ef6:	2207      	movs	r2, #7
 8012ef8:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8012efa:	e02c      	b.n	8012f56 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012efc:	4b40      	ldr	r3, [pc, #256]	; (8013000 <tcp_process+0x5a8>)
 8012efe:	6819      	ldr	r1, [r3, #0]
 8012f00:	4b40      	ldr	r3, [pc, #256]	; (8013004 <tcp_process+0x5ac>)
 8012f02:	881b      	ldrh	r3, [r3, #0]
 8012f04:	461a      	mov	r2, r3
 8012f06:	4b40      	ldr	r3, [pc, #256]	; (8013008 <tcp_process+0x5b0>)
 8012f08:	681b      	ldr	r3, [r3, #0]
 8012f0a:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012f0c:	4b3f      	ldr	r3, [pc, #252]	; (801300c <tcp_process+0x5b4>)
 8012f0e:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012f10:	885b      	ldrh	r3, [r3, #2]
 8012f12:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012f14:	4a3d      	ldr	r2, [pc, #244]	; (801300c <tcp_process+0x5b4>)
 8012f16:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012f18:	8812      	ldrh	r2, [r2, #0]
 8012f1a:	b292      	uxth	r2, r2
 8012f1c:	9202      	str	r2, [sp, #8]
 8012f1e:	9301      	str	r3, [sp, #4]
 8012f20:	4b3b      	ldr	r3, [pc, #236]	; (8013010 <tcp_process+0x5b8>)
 8012f22:	9300      	str	r3, [sp, #0]
 8012f24:	4b3b      	ldr	r3, [pc, #236]	; (8013014 <tcp_process+0x5bc>)
 8012f26:	4602      	mov	r2, r0
 8012f28:	6878      	ldr	r0, [r7, #4]
 8012f2a:	f002 fbcf 	bl	80156cc <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8012f2e:	e167      	b.n	8013200 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8012f30:	4b32      	ldr	r3, [pc, #200]	; (8012ffc <tcp_process+0x5a4>)
 8012f32:	781b      	ldrb	r3, [r3, #0]
 8012f34:	f003 0302 	and.w	r3, r3, #2
 8012f38:	2b00      	cmp	r3, #0
 8012f3a:	f000 8161 	beq.w	8013200 <tcp_process+0x7a8>
 8012f3e:	687b      	ldr	r3, [r7, #4]
 8012f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012f42:	1e5a      	subs	r2, r3, #1
 8012f44:	4b30      	ldr	r3, [pc, #192]	; (8013008 <tcp_process+0x5b0>)
 8012f46:	681b      	ldr	r3, [r3, #0]
 8012f48:	429a      	cmp	r2, r3
 8012f4a:	f040 8159 	bne.w	8013200 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8012f4e:	6878      	ldr	r0, [r7, #4]
 8012f50:	f002 f9b4 	bl	80152bc <tcp_rexmit>
      break;
 8012f54:	e154      	b.n	8013200 <tcp_process+0x7a8>
 8012f56:	e153      	b.n	8013200 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8012f58:	6878      	ldr	r0, [r7, #4]
 8012f5a:	f000 fa71 	bl	8013440 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8012f5e:	4b32      	ldr	r3, [pc, #200]	; (8013028 <tcp_process+0x5d0>)
 8012f60:	781b      	ldrb	r3, [r3, #0]
 8012f62:	f003 0320 	and.w	r3, r3, #32
 8012f66:	2b00      	cmp	r3, #0
 8012f68:	f000 814c 	beq.w	8013204 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8012f6c:	687b      	ldr	r3, [r7, #4]
 8012f6e:	8b5b      	ldrh	r3, [r3, #26]
 8012f70:	f043 0302 	orr.w	r3, r3, #2
 8012f74:	b29a      	uxth	r2, r3
 8012f76:	687b      	ldr	r3, [r7, #4]
 8012f78:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8012f7a:	687b      	ldr	r3, [r7, #4]
 8012f7c:	2207      	movs	r2, #7
 8012f7e:	751a      	strb	r2, [r3, #20]
      }
      break;
 8012f80:	e140      	b.n	8013204 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8012f82:	6878      	ldr	r0, [r7, #4]
 8012f84:	f000 fa5c 	bl	8013440 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8012f88:	4b27      	ldr	r3, [pc, #156]	; (8013028 <tcp_process+0x5d0>)
 8012f8a:	781b      	ldrb	r3, [r3, #0]
 8012f8c:	f003 0320 	and.w	r3, r3, #32
 8012f90:	2b00      	cmp	r3, #0
 8012f92:	d071      	beq.n	8013078 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8012f94:	4b19      	ldr	r3, [pc, #100]	; (8012ffc <tcp_process+0x5a4>)
 8012f96:	781b      	ldrb	r3, [r3, #0]
 8012f98:	f003 0310 	and.w	r3, r3, #16
 8012f9c:	2b00      	cmp	r3, #0
 8012f9e:	d060      	beq.n	8013062 <tcp_process+0x60a>
 8012fa0:	687b      	ldr	r3, [r7, #4]
 8012fa2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012fa4:	4b16      	ldr	r3, [pc, #88]	; (8013000 <tcp_process+0x5a8>)
 8012fa6:	681b      	ldr	r3, [r3, #0]
 8012fa8:	429a      	cmp	r2, r3
 8012faa:	d15a      	bne.n	8013062 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8012fac:	687b      	ldr	r3, [r7, #4]
 8012fae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8012fb0:	2b00      	cmp	r3, #0
 8012fb2:	d156      	bne.n	8013062 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8012fb4:	687b      	ldr	r3, [r7, #4]
 8012fb6:	8b5b      	ldrh	r3, [r3, #26]
 8012fb8:	f043 0302 	orr.w	r3, r3, #2
 8012fbc:	b29a      	uxth	r2, r3
 8012fbe:	687b      	ldr	r3, [r7, #4]
 8012fc0:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8012fc2:	6878      	ldr	r0, [r7, #4]
 8012fc4:	f7fe fdbe 	bl	8011b44 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8012fc8:	4b18      	ldr	r3, [pc, #96]	; (801302c <tcp_process+0x5d4>)
 8012fca:	681b      	ldr	r3, [r3, #0]
 8012fcc:	687a      	ldr	r2, [r7, #4]
 8012fce:	429a      	cmp	r2, r3
 8012fd0:	d105      	bne.n	8012fde <tcp_process+0x586>
 8012fd2:	4b16      	ldr	r3, [pc, #88]	; (801302c <tcp_process+0x5d4>)
 8012fd4:	681b      	ldr	r3, [r3, #0]
 8012fd6:	68db      	ldr	r3, [r3, #12]
 8012fd8:	4a14      	ldr	r2, [pc, #80]	; (801302c <tcp_process+0x5d4>)
 8012fda:	6013      	str	r3, [r2, #0]
 8012fdc:	e02e      	b.n	801303c <tcp_process+0x5e4>
 8012fde:	4b13      	ldr	r3, [pc, #76]	; (801302c <tcp_process+0x5d4>)
 8012fe0:	681b      	ldr	r3, [r3, #0]
 8012fe2:	617b      	str	r3, [r7, #20]
 8012fe4:	e027      	b.n	8013036 <tcp_process+0x5de>
 8012fe6:	697b      	ldr	r3, [r7, #20]
 8012fe8:	68db      	ldr	r3, [r3, #12]
 8012fea:	687a      	ldr	r2, [r7, #4]
 8012fec:	429a      	cmp	r2, r3
 8012fee:	d11f      	bne.n	8013030 <tcp_process+0x5d8>
 8012ff0:	687b      	ldr	r3, [r7, #4]
 8012ff2:	68da      	ldr	r2, [r3, #12]
 8012ff4:	697b      	ldr	r3, [r7, #20]
 8012ff6:	60da      	str	r2, [r3, #12]
 8012ff8:	e020      	b.n	801303c <tcp_process+0x5e4>
 8012ffa:	bf00      	nop
 8012ffc:	2000050c 	.word	0x2000050c
 8013000:	20000504 	.word	0x20000504
 8013004:	2000050a 	.word	0x2000050a
 8013008:	20000500 	.word	0x20000500
 801300c:	200004f0 	.word	0x200004f0
 8013010:	2000451c 	.word	0x2000451c
 8013014:	20004520 	.word	0x20004520
 8013018:	08021d9c 	.word	0x08021d9c
 801301c:	0802203c 	.word	0x0802203c
 8013020:	08021de8 	.word	0x08021de8
 8013024:	20000508 	.word	0x20000508
 8013028:	2000050d 	.word	0x2000050d
 801302c:	20007630 	.word	0x20007630
 8013030:	697b      	ldr	r3, [r7, #20]
 8013032:	68db      	ldr	r3, [r3, #12]
 8013034:	617b      	str	r3, [r7, #20]
 8013036:	697b      	ldr	r3, [r7, #20]
 8013038:	2b00      	cmp	r3, #0
 801303a:	d1d4      	bne.n	8012fe6 <tcp_process+0x58e>
 801303c:	687b      	ldr	r3, [r7, #4]
 801303e:	2200      	movs	r2, #0
 8013040:	60da      	str	r2, [r3, #12]
 8013042:	4b77      	ldr	r3, [pc, #476]	; (8013220 <tcp_process+0x7c8>)
 8013044:	2201      	movs	r2, #1
 8013046:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8013048:	687b      	ldr	r3, [r7, #4]
 801304a:	220a      	movs	r2, #10
 801304c:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 801304e:	4b75      	ldr	r3, [pc, #468]	; (8013224 <tcp_process+0x7cc>)
 8013050:	681a      	ldr	r2, [r3, #0]
 8013052:	687b      	ldr	r3, [r7, #4]
 8013054:	60da      	str	r2, [r3, #12]
 8013056:	4a73      	ldr	r2, [pc, #460]	; (8013224 <tcp_process+0x7cc>)
 8013058:	687b      	ldr	r3, [r7, #4]
 801305a:	6013      	str	r3, [r2, #0]
 801305c:	f002 fcf6 	bl	8015a4c <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8013060:	e0d2      	b.n	8013208 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8013062:	687b      	ldr	r3, [r7, #4]
 8013064:	8b5b      	ldrh	r3, [r3, #26]
 8013066:	f043 0302 	orr.w	r3, r3, #2
 801306a:	b29a      	uxth	r2, r3
 801306c:	687b      	ldr	r3, [r7, #4]
 801306e:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8013070:	687b      	ldr	r3, [r7, #4]
 8013072:	2208      	movs	r2, #8
 8013074:	751a      	strb	r2, [r3, #20]
      break;
 8013076:	e0c7      	b.n	8013208 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8013078:	4b6b      	ldr	r3, [pc, #428]	; (8013228 <tcp_process+0x7d0>)
 801307a:	781b      	ldrb	r3, [r3, #0]
 801307c:	f003 0310 	and.w	r3, r3, #16
 8013080:	2b00      	cmp	r3, #0
 8013082:	f000 80c1 	beq.w	8013208 <tcp_process+0x7b0>
 8013086:	687b      	ldr	r3, [r7, #4]
 8013088:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801308a:	4b68      	ldr	r3, [pc, #416]	; (801322c <tcp_process+0x7d4>)
 801308c:	681b      	ldr	r3, [r3, #0]
 801308e:	429a      	cmp	r2, r3
 8013090:	f040 80ba 	bne.w	8013208 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8013094:	687b      	ldr	r3, [r7, #4]
 8013096:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8013098:	2b00      	cmp	r3, #0
 801309a:	f040 80b5 	bne.w	8013208 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 801309e:	687b      	ldr	r3, [r7, #4]
 80130a0:	2206      	movs	r2, #6
 80130a2:	751a      	strb	r2, [r3, #20]
      break;
 80130a4:	e0b0      	b.n	8013208 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 80130a6:	6878      	ldr	r0, [r7, #4]
 80130a8:	f000 f9ca 	bl	8013440 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80130ac:	4b60      	ldr	r3, [pc, #384]	; (8013230 <tcp_process+0x7d8>)
 80130ae:	781b      	ldrb	r3, [r3, #0]
 80130b0:	f003 0320 	and.w	r3, r3, #32
 80130b4:	2b00      	cmp	r3, #0
 80130b6:	f000 80a9 	beq.w	801320c <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 80130ba:	687b      	ldr	r3, [r7, #4]
 80130bc:	8b5b      	ldrh	r3, [r3, #26]
 80130be:	f043 0302 	orr.w	r3, r3, #2
 80130c2:	b29a      	uxth	r2, r3
 80130c4:	687b      	ldr	r3, [r7, #4]
 80130c6:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 80130c8:	6878      	ldr	r0, [r7, #4]
 80130ca:	f7fe fd3b 	bl	8011b44 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80130ce:	4b59      	ldr	r3, [pc, #356]	; (8013234 <tcp_process+0x7dc>)
 80130d0:	681b      	ldr	r3, [r3, #0]
 80130d2:	687a      	ldr	r2, [r7, #4]
 80130d4:	429a      	cmp	r2, r3
 80130d6:	d105      	bne.n	80130e4 <tcp_process+0x68c>
 80130d8:	4b56      	ldr	r3, [pc, #344]	; (8013234 <tcp_process+0x7dc>)
 80130da:	681b      	ldr	r3, [r3, #0]
 80130dc:	68db      	ldr	r3, [r3, #12]
 80130de:	4a55      	ldr	r2, [pc, #340]	; (8013234 <tcp_process+0x7dc>)
 80130e0:	6013      	str	r3, [r2, #0]
 80130e2:	e013      	b.n	801310c <tcp_process+0x6b4>
 80130e4:	4b53      	ldr	r3, [pc, #332]	; (8013234 <tcp_process+0x7dc>)
 80130e6:	681b      	ldr	r3, [r3, #0]
 80130e8:	613b      	str	r3, [r7, #16]
 80130ea:	e00c      	b.n	8013106 <tcp_process+0x6ae>
 80130ec:	693b      	ldr	r3, [r7, #16]
 80130ee:	68db      	ldr	r3, [r3, #12]
 80130f0:	687a      	ldr	r2, [r7, #4]
 80130f2:	429a      	cmp	r2, r3
 80130f4:	d104      	bne.n	8013100 <tcp_process+0x6a8>
 80130f6:	687b      	ldr	r3, [r7, #4]
 80130f8:	68da      	ldr	r2, [r3, #12]
 80130fa:	693b      	ldr	r3, [r7, #16]
 80130fc:	60da      	str	r2, [r3, #12]
 80130fe:	e005      	b.n	801310c <tcp_process+0x6b4>
 8013100:	693b      	ldr	r3, [r7, #16]
 8013102:	68db      	ldr	r3, [r3, #12]
 8013104:	613b      	str	r3, [r7, #16]
 8013106:	693b      	ldr	r3, [r7, #16]
 8013108:	2b00      	cmp	r3, #0
 801310a:	d1ef      	bne.n	80130ec <tcp_process+0x694>
 801310c:	687b      	ldr	r3, [r7, #4]
 801310e:	2200      	movs	r2, #0
 8013110:	60da      	str	r2, [r3, #12]
 8013112:	4b43      	ldr	r3, [pc, #268]	; (8013220 <tcp_process+0x7c8>)
 8013114:	2201      	movs	r2, #1
 8013116:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8013118:	687b      	ldr	r3, [r7, #4]
 801311a:	220a      	movs	r2, #10
 801311c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801311e:	4b41      	ldr	r3, [pc, #260]	; (8013224 <tcp_process+0x7cc>)
 8013120:	681a      	ldr	r2, [r3, #0]
 8013122:	687b      	ldr	r3, [r7, #4]
 8013124:	60da      	str	r2, [r3, #12]
 8013126:	4a3f      	ldr	r2, [pc, #252]	; (8013224 <tcp_process+0x7cc>)
 8013128:	687b      	ldr	r3, [r7, #4]
 801312a:	6013      	str	r3, [r2, #0]
 801312c:	f002 fc8e 	bl	8015a4c <tcp_timer_needed>
      }
      break;
 8013130:	e06c      	b.n	801320c <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8013132:	6878      	ldr	r0, [r7, #4]
 8013134:	f000 f984 	bl	8013440 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8013138:	4b3b      	ldr	r3, [pc, #236]	; (8013228 <tcp_process+0x7d0>)
 801313a:	781b      	ldrb	r3, [r3, #0]
 801313c:	f003 0310 	and.w	r3, r3, #16
 8013140:	2b00      	cmp	r3, #0
 8013142:	d065      	beq.n	8013210 <tcp_process+0x7b8>
 8013144:	687b      	ldr	r3, [r7, #4]
 8013146:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013148:	4b38      	ldr	r3, [pc, #224]	; (801322c <tcp_process+0x7d4>)
 801314a:	681b      	ldr	r3, [r3, #0]
 801314c:	429a      	cmp	r2, r3
 801314e:	d15f      	bne.n	8013210 <tcp_process+0x7b8>
 8013150:	687b      	ldr	r3, [r7, #4]
 8013152:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013154:	2b00      	cmp	r3, #0
 8013156:	d15b      	bne.n	8013210 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8013158:	6878      	ldr	r0, [r7, #4]
 801315a:	f7fe fcf3 	bl	8011b44 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801315e:	4b35      	ldr	r3, [pc, #212]	; (8013234 <tcp_process+0x7dc>)
 8013160:	681b      	ldr	r3, [r3, #0]
 8013162:	687a      	ldr	r2, [r7, #4]
 8013164:	429a      	cmp	r2, r3
 8013166:	d105      	bne.n	8013174 <tcp_process+0x71c>
 8013168:	4b32      	ldr	r3, [pc, #200]	; (8013234 <tcp_process+0x7dc>)
 801316a:	681b      	ldr	r3, [r3, #0]
 801316c:	68db      	ldr	r3, [r3, #12]
 801316e:	4a31      	ldr	r2, [pc, #196]	; (8013234 <tcp_process+0x7dc>)
 8013170:	6013      	str	r3, [r2, #0]
 8013172:	e013      	b.n	801319c <tcp_process+0x744>
 8013174:	4b2f      	ldr	r3, [pc, #188]	; (8013234 <tcp_process+0x7dc>)
 8013176:	681b      	ldr	r3, [r3, #0]
 8013178:	60fb      	str	r3, [r7, #12]
 801317a:	e00c      	b.n	8013196 <tcp_process+0x73e>
 801317c:	68fb      	ldr	r3, [r7, #12]
 801317e:	68db      	ldr	r3, [r3, #12]
 8013180:	687a      	ldr	r2, [r7, #4]
 8013182:	429a      	cmp	r2, r3
 8013184:	d104      	bne.n	8013190 <tcp_process+0x738>
 8013186:	687b      	ldr	r3, [r7, #4]
 8013188:	68da      	ldr	r2, [r3, #12]
 801318a:	68fb      	ldr	r3, [r7, #12]
 801318c:	60da      	str	r2, [r3, #12]
 801318e:	e005      	b.n	801319c <tcp_process+0x744>
 8013190:	68fb      	ldr	r3, [r7, #12]
 8013192:	68db      	ldr	r3, [r3, #12]
 8013194:	60fb      	str	r3, [r7, #12]
 8013196:	68fb      	ldr	r3, [r7, #12]
 8013198:	2b00      	cmp	r3, #0
 801319a:	d1ef      	bne.n	801317c <tcp_process+0x724>
 801319c:	687b      	ldr	r3, [r7, #4]
 801319e:	2200      	movs	r2, #0
 80131a0:	60da      	str	r2, [r3, #12]
 80131a2:	4b1f      	ldr	r3, [pc, #124]	; (8013220 <tcp_process+0x7c8>)
 80131a4:	2201      	movs	r2, #1
 80131a6:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80131a8:	687b      	ldr	r3, [r7, #4]
 80131aa:	220a      	movs	r2, #10
 80131ac:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80131ae:	4b1d      	ldr	r3, [pc, #116]	; (8013224 <tcp_process+0x7cc>)
 80131b0:	681a      	ldr	r2, [r3, #0]
 80131b2:	687b      	ldr	r3, [r7, #4]
 80131b4:	60da      	str	r2, [r3, #12]
 80131b6:	4a1b      	ldr	r2, [pc, #108]	; (8013224 <tcp_process+0x7cc>)
 80131b8:	687b      	ldr	r3, [r7, #4]
 80131ba:	6013      	str	r3, [r2, #0]
 80131bc:	f002 fc46 	bl	8015a4c <tcp_timer_needed>
      }
      break;
 80131c0:	e026      	b.n	8013210 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 80131c2:	6878      	ldr	r0, [r7, #4]
 80131c4:	f000 f93c 	bl	8013440 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80131c8:	4b17      	ldr	r3, [pc, #92]	; (8013228 <tcp_process+0x7d0>)
 80131ca:	781b      	ldrb	r3, [r3, #0]
 80131cc:	f003 0310 	and.w	r3, r3, #16
 80131d0:	2b00      	cmp	r3, #0
 80131d2:	d01f      	beq.n	8013214 <tcp_process+0x7bc>
 80131d4:	687b      	ldr	r3, [r7, #4]
 80131d6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80131d8:	4b14      	ldr	r3, [pc, #80]	; (801322c <tcp_process+0x7d4>)
 80131da:	681b      	ldr	r3, [r3, #0]
 80131dc:	429a      	cmp	r2, r3
 80131de:	d119      	bne.n	8013214 <tcp_process+0x7bc>
 80131e0:	687b      	ldr	r3, [r7, #4]
 80131e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80131e4:	2b00      	cmp	r3, #0
 80131e6:	d115      	bne.n	8013214 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 80131e8:	4b11      	ldr	r3, [pc, #68]	; (8013230 <tcp_process+0x7d8>)
 80131ea:	781b      	ldrb	r3, [r3, #0]
 80131ec:	f043 0310 	orr.w	r3, r3, #16
 80131f0:	b2da      	uxtb	r2, r3
 80131f2:	4b0f      	ldr	r3, [pc, #60]	; (8013230 <tcp_process+0x7d8>)
 80131f4:	701a      	strb	r2, [r3, #0]
      }
      break;
 80131f6:	e00d      	b.n	8013214 <tcp_process+0x7bc>
    default:
      break;
 80131f8:	bf00      	nop
 80131fa:	e00c      	b.n	8013216 <tcp_process+0x7be>
      break;
 80131fc:	bf00      	nop
 80131fe:	e00a      	b.n	8013216 <tcp_process+0x7be>
      break;
 8013200:	bf00      	nop
 8013202:	e008      	b.n	8013216 <tcp_process+0x7be>
      break;
 8013204:	bf00      	nop
 8013206:	e006      	b.n	8013216 <tcp_process+0x7be>
      break;
 8013208:	bf00      	nop
 801320a:	e004      	b.n	8013216 <tcp_process+0x7be>
      break;
 801320c:	bf00      	nop
 801320e:	e002      	b.n	8013216 <tcp_process+0x7be>
      break;
 8013210:	bf00      	nop
 8013212:	e000      	b.n	8013216 <tcp_process+0x7be>
      break;
 8013214:	bf00      	nop
  }
  return ERR_OK;
 8013216:	2300      	movs	r3, #0
}
 8013218:	4618      	mov	r0, r3
 801321a:	3724      	adds	r7, #36	; 0x24
 801321c:	46bd      	mov	sp, r7
 801321e:	bd90      	pop	{r4, r7, pc}
 8013220:	2000762c 	.word	0x2000762c
 8013224:	20007640 	.word	0x20007640
 8013228:	2000050c 	.word	0x2000050c
 801322c:	20000504 	.word	0x20000504
 8013230:	2000050d 	.word	0x2000050d
 8013234:	20007630 	.word	0x20007630

08013238 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8013238:	b590      	push	{r4, r7, lr}
 801323a:	b085      	sub	sp, #20
 801323c:	af00      	add	r7, sp, #0
 801323e:	6078      	str	r0, [r7, #4]
 8013240:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8013242:	687b      	ldr	r3, [r7, #4]
 8013244:	2b00      	cmp	r3, #0
 8013246:	d106      	bne.n	8013256 <tcp_oos_insert_segment+0x1e>
 8013248:	4b3b      	ldr	r3, [pc, #236]	; (8013338 <tcp_oos_insert_segment+0x100>)
 801324a:	f240 421f 	movw	r2, #1055	; 0x41f
 801324e:	493b      	ldr	r1, [pc, #236]	; (801333c <tcp_oos_insert_segment+0x104>)
 8013250:	483b      	ldr	r0, [pc, #236]	; (8013340 <tcp_oos_insert_segment+0x108>)
 8013252:	f008 f885 	bl	801b360 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8013256:	687b      	ldr	r3, [r7, #4]
 8013258:	68db      	ldr	r3, [r3, #12]
 801325a:	899b      	ldrh	r3, [r3, #12]
 801325c:	b29b      	uxth	r3, r3
 801325e:	4618      	mov	r0, r3
 8013260:	f7fb fd64 	bl	800ed2c <lwip_htons>
 8013264:	4603      	mov	r3, r0
 8013266:	b2db      	uxtb	r3, r3
 8013268:	f003 0301 	and.w	r3, r3, #1
 801326c:	2b00      	cmp	r3, #0
 801326e:	d028      	beq.n	80132c2 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8013270:	6838      	ldr	r0, [r7, #0]
 8013272:	f7fe fa65 	bl	8011740 <tcp_segs_free>
    next = NULL;
 8013276:	2300      	movs	r3, #0
 8013278:	603b      	str	r3, [r7, #0]
 801327a:	e056      	b.n	801332a <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801327c:	683b      	ldr	r3, [r7, #0]
 801327e:	68db      	ldr	r3, [r3, #12]
 8013280:	899b      	ldrh	r3, [r3, #12]
 8013282:	b29b      	uxth	r3, r3
 8013284:	4618      	mov	r0, r3
 8013286:	f7fb fd51 	bl	800ed2c <lwip_htons>
 801328a:	4603      	mov	r3, r0
 801328c:	b2db      	uxtb	r3, r3
 801328e:	f003 0301 	and.w	r3, r3, #1
 8013292:	2b00      	cmp	r3, #0
 8013294:	d00d      	beq.n	80132b2 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8013296:	687b      	ldr	r3, [r7, #4]
 8013298:	68db      	ldr	r3, [r3, #12]
 801329a:	899b      	ldrh	r3, [r3, #12]
 801329c:	b29c      	uxth	r4, r3
 801329e:	2001      	movs	r0, #1
 80132a0:	f7fb fd44 	bl	800ed2c <lwip_htons>
 80132a4:	4603      	mov	r3, r0
 80132a6:	461a      	mov	r2, r3
 80132a8:	687b      	ldr	r3, [r7, #4]
 80132aa:	68db      	ldr	r3, [r3, #12]
 80132ac:	4322      	orrs	r2, r4
 80132ae:	b292      	uxth	r2, r2
 80132b0:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 80132b2:	683b      	ldr	r3, [r7, #0]
 80132b4:	60fb      	str	r3, [r7, #12]
      next = next->next;
 80132b6:	683b      	ldr	r3, [r7, #0]
 80132b8:	681b      	ldr	r3, [r3, #0]
 80132ba:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 80132bc:	68f8      	ldr	r0, [r7, #12]
 80132be:	f7fe fa54 	bl	801176a <tcp_seg_free>
    while (next &&
 80132c2:	683b      	ldr	r3, [r7, #0]
 80132c4:	2b00      	cmp	r3, #0
 80132c6:	d00e      	beq.n	80132e6 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 80132c8:	687b      	ldr	r3, [r7, #4]
 80132ca:	891b      	ldrh	r3, [r3, #8]
 80132cc:	461a      	mov	r2, r3
 80132ce:	4b1d      	ldr	r3, [pc, #116]	; (8013344 <tcp_oos_insert_segment+0x10c>)
 80132d0:	681b      	ldr	r3, [r3, #0]
 80132d2:	441a      	add	r2, r3
 80132d4:	683b      	ldr	r3, [r7, #0]
 80132d6:	68db      	ldr	r3, [r3, #12]
 80132d8:	685b      	ldr	r3, [r3, #4]
 80132da:	6839      	ldr	r1, [r7, #0]
 80132dc:	8909      	ldrh	r1, [r1, #8]
 80132de:	440b      	add	r3, r1
 80132e0:	1ad3      	subs	r3, r2, r3
    while (next &&
 80132e2:	2b00      	cmp	r3, #0
 80132e4:	daca      	bge.n	801327c <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 80132e6:	683b      	ldr	r3, [r7, #0]
 80132e8:	2b00      	cmp	r3, #0
 80132ea:	d01e      	beq.n	801332a <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 80132ec:	687b      	ldr	r3, [r7, #4]
 80132ee:	891b      	ldrh	r3, [r3, #8]
 80132f0:	461a      	mov	r2, r3
 80132f2:	4b14      	ldr	r3, [pc, #80]	; (8013344 <tcp_oos_insert_segment+0x10c>)
 80132f4:	681b      	ldr	r3, [r3, #0]
 80132f6:	441a      	add	r2, r3
 80132f8:	683b      	ldr	r3, [r7, #0]
 80132fa:	68db      	ldr	r3, [r3, #12]
 80132fc:	685b      	ldr	r3, [r3, #4]
 80132fe:	1ad3      	subs	r3, r2, r3
    if (next &&
 8013300:	2b00      	cmp	r3, #0
 8013302:	dd12      	ble.n	801332a <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8013304:	683b      	ldr	r3, [r7, #0]
 8013306:	68db      	ldr	r3, [r3, #12]
 8013308:	685b      	ldr	r3, [r3, #4]
 801330a:	b29a      	uxth	r2, r3
 801330c:	4b0d      	ldr	r3, [pc, #52]	; (8013344 <tcp_oos_insert_segment+0x10c>)
 801330e:	681b      	ldr	r3, [r3, #0]
 8013310:	b29b      	uxth	r3, r3
 8013312:	1ad3      	subs	r3, r2, r3
 8013314:	b29a      	uxth	r2, r3
 8013316:	687b      	ldr	r3, [r7, #4]
 8013318:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 801331a:	687b      	ldr	r3, [r7, #4]
 801331c:	685a      	ldr	r2, [r3, #4]
 801331e:	687b      	ldr	r3, [r7, #4]
 8013320:	891b      	ldrh	r3, [r3, #8]
 8013322:	4619      	mov	r1, r3
 8013324:	4610      	mov	r0, r2
 8013326:	f7fc fe17 	bl	800ff58 <pbuf_realloc>
    }
  }
  cseg->next = next;
 801332a:	687b      	ldr	r3, [r7, #4]
 801332c:	683a      	ldr	r2, [r7, #0]
 801332e:	601a      	str	r2, [r3, #0]
}
 8013330:	bf00      	nop
 8013332:	3714      	adds	r7, #20
 8013334:	46bd      	mov	sp, r7
 8013336:	bd90      	pop	{r4, r7, pc}
 8013338:	08021d9c 	.word	0x08021d9c
 801333c:	0802205c 	.word	0x0802205c
 8013340:	08021de8 	.word	0x08021de8
 8013344:	20000500 	.word	0x20000500

08013348 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8013348:	b5b0      	push	{r4, r5, r7, lr}
 801334a:	b086      	sub	sp, #24
 801334c:	af00      	add	r7, sp, #0
 801334e:	60f8      	str	r0, [r7, #12]
 8013350:	60b9      	str	r1, [r7, #8]
 8013352:	607a      	str	r2, [r7, #4]
 8013354:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8013356:	e03e      	b.n	80133d6 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8013358:	68bb      	ldr	r3, [r7, #8]
 801335a:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 801335c:	68bb      	ldr	r3, [r7, #8]
 801335e:	681b      	ldr	r3, [r3, #0]
 8013360:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8013362:	697b      	ldr	r3, [r7, #20]
 8013364:	685b      	ldr	r3, [r3, #4]
 8013366:	4618      	mov	r0, r3
 8013368:	f7fd f804 	bl	8010374 <pbuf_clen>
 801336c:	4603      	mov	r3, r0
 801336e:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8013370:	68fb      	ldr	r3, [r7, #12]
 8013372:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013376:	8a7a      	ldrh	r2, [r7, #18]
 8013378:	429a      	cmp	r2, r3
 801337a:	d906      	bls.n	801338a <tcp_free_acked_segments+0x42>
 801337c:	4b2a      	ldr	r3, [pc, #168]	; (8013428 <tcp_free_acked_segments+0xe0>)
 801337e:	f240 4257 	movw	r2, #1111	; 0x457
 8013382:	492a      	ldr	r1, [pc, #168]	; (801342c <tcp_free_acked_segments+0xe4>)
 8013384:	482a      	ldr	r0, [pc, #168]	; (8013430 <tcp_free_acked_segments+0xe8>)
 8013386:	f007 ffeb 	bl	801b360 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 801338a:	68fb      	ldr	r3, [r7, #12]
 801338c:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8013390:	8a7b      	ldrh	r3, [r7, #18]
 8013392:	1ad3      	subs	r3, r2, r3
 8013394:	b29a      	uxth	r2, r3
 8013396:	68fb      	ldr	r3, [r7, #12]
 8013398:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 801339c:	697b      	ldr	r3, [r7, #20]
 801339e:	891a      	ldrh	r2, [r3, #8]
 80133a0:	4b24      	ldr	r3, [pc, #144]	; (8013434 <tcp_free_acked_segments+0xec>)
 80133a2:	881b      	ldrh	r3, [r3, #0]
 80133a4:	4413      	add	r3, r2
 80133a6:	b29a      	uxth	r2, r3
 80133a8:	4b22      	ldr	r3, [pc, #136]	; (8013434 <tcp_free_acked_segments+0xec>)
 80133aa:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 80133ac:	6978      	ldr	r0, [r7, #20]
 80133ae:	f7fe f9dc 	bl	801176a <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 80133b2:	68fb      	ldr	r3, [r7, #12]
 80133b4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80133b8:	2b00      	cmp	r3, #0
 80133ba:	d00c      	beq.n	80133d6 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 80133bc:	68bb      	ldr	r3, [r7, #8]
 80133be:	2b00      	cmp	r3, #0
 80133c0:	d109      	bne.n	80133d6 <tcp_free_acked_segments+0x8e>
 80133c2:	683b      	ldr	r3, [r7, #0]
 80133c4:	2b00      	cmp	r3, #0
 80133c6:	d106      	bne.n	80133d6 <tcp_free_acked_segments+0x8e>
 80133c8:	4b17      	ldr	r3, [pc, #92]	; (8013428 <tcp_free_acked_segments+0xe0>)
 80133ca:	f240 4261 	movw	r2, #1121	; 0x461
 80133ce:	491a      	ldr	r1, [pc, #104]	; (8013438 <tcp_free_acked_segments+0xf0>)
 80133d0:	4817      	ldr	r0, [pc, #92]	; (8013430 <tcp_free_acked_segments+0xe8>)
 80133d2:	f007 ffc5 	bl	801b360 <iprintf>
  while (seg_list != NULL &&
 80133d6:	68bb      	ldr	r3, [r7, #8]
 80133d8:	2b00      	cmp	r3, #0
 80133da:	d020      	beq.n	801341e <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 80133dc:	68bb      	ldr	r3, [r7, #8]
 80133de:	68db      	ldr	r3, [r3, #12]
 80133e0:	685b      	ldr	r3, [r3, #4]
 80133e2:	4618      	mov	r0, r3
 80133e4:	f7fb fcb7 	bl	800ed56 <lwip_htonl>
 80133e8:	4604      	mov	r4, r0
 80133ea:	68bb      	ldr	r3, [r7, #8]
 80133ec:	891b      	ldrh	r3, [r3, #8]
 80133ee:	461d      	mov	r5, r3
 80133f0:	68bb      	ldr	r3, [r7, #8]
 80133f2:	68db      	ldr	r3, [r3, #12]
 80133f4:	899b      	ldrh	r3, [r3, #12]
 80133f6:	b29b      	uxth	r3, r3
 80133f8:	4618      	mov	r0, r3
 80133fa:	f7fb fc97 	bl	800ed2c <lwip_htons>
 80133fe:	4603      	mov	r3, r0
 8013400:	b2db      	uxtb	r3, r3
 8013402:	f003 0303 	and.w	r3, r3, #3
 8013406:	2b00      	cmp	r3, #0
 8013408:	d001      	beq.n	801340e <tcp_free_acked_segments+0xc6>
 801340a:	2301      	movs	r3, #1
 801340c:	e000      	b.n	8013410 <tcp_free_acked_segments+0xc8>
 801340e:	2300      	movs	r3, #0
 8013410:	442b      	add	r3, r5
 8013412:	18e2      	adds	r2, r4, r3
 8013414:	4b09      	ldr	r3, [pc, #36]	; (801343c <tcp_free_acked_segments+0xf4>)
 8013416:	681b      	ldr	r3, [r3, #0]
 8013418:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 801341a:	2b00      	cmp	r3, #0
 801341c:	dd9c      	ble.n	8013358 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 801341e:	68bb      	ldr	r3, [r7, #8]
}
 8013420:	4618      	mov	r0, r3
 8013422:	3718      	adds	r7, #24
 8013424:	46bd      	mov	sp, r7
 8013426:	bdb0      	pop	{r4, r5, r7, pc}
 8013428:	08021d9c 	.word	0x08021d9c
 801342c:	08022084 	.word	0x08022084
 8013430:	08021de8 	.word	0x08021de8
 8013434:	20000508 	.word	0x20000508
 8013438:	080220ac 	.word	0x080220ac
 801343c:	20000504 	.word	0x20000504

08013440 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8013440:	b5b0      	push	{r4, r5, r7, lr}
 8013442:	b094      	sub	sp, #80	; 0x50
 8013444:	af00      	add	r7, sp, #0
 8013446:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8013448:	2300      	movs	r3, #0
 801344a:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 801344c:	687b      	ldr	r3, [r7, #4]
 801344e:	2b00      	cmp	r3, #0
 8013450:	d106      	bne.n	8013460 <tcp_receive+0x20>
 8013452:	4ba6      	ldr	r3, [pc, #664]	; (80136ec <tcp_receive+0x2ac>)
 8013454:	f240 427b 	movw	r2, #1147	; 0x47b
 8013458:	49a5      	ldr	r1, [pc, #660]	; (80136f0 <tcp_receive+0x2b0>)
 801345a:	48a6      	ldr	r0, [pc, #664]	; (80136f4 <tcp_receive+0x2b4>)
 801345c:	f007 ff80 	bl	801b360 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8013460:	687b      	ldr	r3, [r7, #4]
 8013462:	7d1b      	ldrb	r3, [r3, #20]
 8013464:	2b03      	cmp	r3, #3
 8013466:	d806      	bhi.n	8013476 <tcp_receive+0x36>
 8013468:	4ba0      	ldr	r3, [pc, #640]	; (80136ec <tcp_receive+0x2ac>)
 801346a:	f240 427c 	movw	r2, #1148	; 0x47c
 801346e:	49a2      	ldr	r1, [pc, #648]	; (80136f8 <tcp_receive+0x2b8>)
 8013470:	48a0      	ldr	r0, [pc, #640]	; (80136f4 <tcp_receive+0x2b4>)
 8013472:	f007 ff75 	bl	801b360 <iprintf>

  if (flags & TCP_ACK) {
 8013476:	4ba1      	ldr	r3, [pc, #644]	; (80136fc <tcp_receive+0x2bc>)
 8013478:	781b      	ldrb	r3, [r3, #0]
 801347a:	f003 0310 	and.w	r3, r3, #16
 801347e:	2b00      	cmp	r3, #0
 8013480:	f000 8263 	beq.w	801394a <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8013484:	687b      	ldr	r3, [r7, #4]
 8013486:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801348a:	461a      	mov	r2, r3
 801348c:	687b      	ldr	r3, [r7, #4]
 801348e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013490:	4413      	add	r3, r2
 8013492:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8013494:	687b      	ldr	r3, [r7, #4]
 8013496:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8013498:	4b99      	ldr	r3, [pc, #612]	; (8013700 <tcp_receive+0x2c0>)
 801349a:	681b      	ldr	r3, [r3, #0]
 801349c:	1ad3      	subs	r3, r2, r3
 801349e:	2b00      	cmp	r3, #0
 80134a0:	db1b      	blt.n	80134da <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80134a2:	687b      	ldr	r3, [r7, #4]
 80134a4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80134a6:	4b96      	ldr	r3, [pc, #600]	; (8013700 <tcp_receive+0x2c0>)
 80134a8:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80134aa:	429a      	cmp	r2, r3
 80134ac:	d106      	bne.n	80134bc <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80134ae:	687b      	ldr	r3, [r7, #4]
 80134b0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80134b2:	4b94      	ldr	r3, [pc, #592]	; (8013704 <tcp_receive+0x2c4>)
 80134b4:	681b      	ldr	r3, [r3, #0]
 80134b6:	1ad3      	subs	r3, r2, r3
 80134b8:	2b00      	cmp	r3, #0
 80134ba:	db0e      	blt.n	80134da <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80134bc:	687b      	ldr	r3, [r7, #4]
 80134be:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80134c0:	4b90      	ldr	r3, [pc, #576]	; (8013704 <tcp_receive+0x2c4>)
 80134c2:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80134c4:	429a      	cmp	r2, r3
 80134c6:	d125      	bne.n	8013514 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80134c8:	4b8f      	ldr	r3, [pc, #572]	; (8013708 <tcp_receive+0x2c8>)
 80134ca:	681b      	ldr	r3, [r3, #0]
 80134cc:	89db      	ldrh	r3, [r3, #14]
 80134ce:	b29a      	uxth	r2, r3
 80134d0:	687b      	ldr	r3, [r7, #4]
 80134d2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80134d6:	429a      	cmp	r2, r3
 80134d8:	d91c      	bls.n	8013514 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 80134da:	4b8b      	ldr	r3, [pc, #556]	; (8013708 <tcp_receive+0x2c8>)
 80134dc:	681b      	ldr	r3, [r3, #0]
 80134de:	89db      	ldrh	r3, [r3, #14]
 80134e0:	b29a      	uxth	r2, r3
 80134e2:	687b      	ldr	r3, [r7, #4]
 80134e4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 80134e8:	687b      	ldr	r3, [r7, #4]
 80134ea:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 80134ee:	687b      	ldr	r3, [r7, #4]
 80134f0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80134f4:	429a      	cmp	r2, r3
 80134f6:	d205      	bcs.n	8013504 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 80134f8:	687b      	ldr	r3, [r7, #4]
 80134fa:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80134fe:	687b      	ldr	r3, [r7, #4]
 8013500:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8013504:	4b7e      	ldr	r3, [pc, #504]	; (8013700 <tcp_receive+0x2c0>)
 8013506:	681a      	ldr	r2, [r3, #0]
 8013508:	687b      	ldr	r3, [r7, #4]
 801350a:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 801350c:	4b7d      	ldr	r3, [pc, #500]	; (8013704 <tcp_receive+0x2c4>)
 801350e:	681a      	ldr	r2, [r3, #0]
 8013510:	687b      	ldr	r3, [r7, #4]
 8013512:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8013514:	4b7b      	ldr	r3, [pc, #492]	; (8013704 <tcp_receive+0x2c4>)
 8013516:	681a      	ldr	r2, [r3, #0]
 8013518:	687b      	ldr	r3, [r7, #4]
 801351a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801351c:	1ad3      	subs	r3, r2, r3
 801351e:	2b00      	cmp	r3, #0
 8013520:	dc58      	bgt.n	80135d4 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8013522:	4b7a      	ldr	r3, [pc, #488]	; (801370c <tcp_receive+0x2cc>)
 8013524:	881b      	ldrh	r3, [r3, #0]
 8013526:	2b00      	cmp	r3, #0
 8013528:	d14b      	bne.n	80135c2 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 801352a:	687b      	ldr	r3, [r7, #4]
 801352c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801352e:	687a      	ldr	r2, [r7, #4]
 8013530:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8013534:	4413      	add	r3, r2
 8013536:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013538:	429a      	cmp	r2, r3
 801353a:	d142      	bne.n	80135c2 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 801353c:	687b      	ldr	r3, [r7, #4]
 801353e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8013542:	2b00      	cmp	r3, #0
 8013544:	db3d      	blt.n	80135c2 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8013546:	687b      	ldr	r3, [r7, #4]
 8013548:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801354a:	4b6e      	ldr	r3, [pc, #440]	; (8013704 <tcp_receive+0x2c4>)
 801354c:	681b      	ldr	r3, [r3, #0]
 801354e:	429a      	cmp	r2, r3
 8013550:	d137      	bne.n	80135c2 <tcp_receive+0x182>
              found_dupack = 1;
 8013552:	2301      	movs	r3, #1
 8013554:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8013556:	687b      	ldr	r3, [r7, #4]
 8013558:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801355c:	2bff      	cmp	r3, #255	; 0xff
 801355e:	d007      	beq.n	8013570 <tcp_receive+0x130>
                ++pcb->dupacks;
 8013560:	687b      	ldr	r3, [r7, #4]
 8013562:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8013566:	3301      	adds	r3, #1
 8013568:	b2da      	uxtb	r2, r3
 801356a:	687b      	ldr	r3, [r7, #4]
 801356c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8013570:	687b      	ldr	r3, [r7, #4]
 8013572:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8013576:	2b03      	cmp	r3, #3
 8013578:	d91b      	bls.n	80135b2 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 801357a:	687b      	ldr	r3, [r7, #4]
 801357c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8013580:	687b      	ldr	r3, [r7, #4]
 8013582:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013584:	4413      	add	r3, r2
 8013586:	b29a      	uxth	r2, r3
 8013588:	687b      	ldr	r3, [r7, #4]
 801358a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801358e:	429a      	cmp	r2, r3
 8013590:	d30a      	bcc.n	80135a8 <tcp_receive+0x168>
 8013592:	687b      	ldr	r3, [r7, #4]
 8013594:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8013598:	687b      	ldr	r3, [r7, #4]
 801359a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801359c:	4413      	add	r3, r2
 801359e:	b29a      	uxth	r2, r3
 80135a0:	687b      	ldr	r3, [r7, #4]
 80135a2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80135a6:	e004      	b.n	80135b2 <tcp_receive+0x172>
 80135a8:	687b      	ldr	r3, [r7, #4]
 80135aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80135ae:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 80135b2:	687b      	ldr	r3, [r7, #4]
 80135b4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80135b8:	2b02      	cmp	r3, #2
 80135ba:	d902      	bls.n	80135c2 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 80135bc:	6878      	ldr	r0, [r7, #4]
 80135be:	f001 fee9 	bl	8015394 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 80135c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80135c4:	2b00      	cmp	r3, #0
 80135c6:	f040 8160 	bne.w	801388a <tcp_receive+0x44a>
        pcb->dupacks = 0;
 80135ca:	687b      	ldr	r3, [r7, #4]
 80135cc:	2200      	movs	r2, #0
 80135ce:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80135d2:	e15a      	b.n	801388a <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80135d4:	4b4b      	ldr	r3, [pc, #300]	; (8013704 <tcp_receive+0x2c4>)
 80135d6:	681a      	ldr	r2, [r3, #0]
 80135d8:	687b      	ldr	r3, [r7, #4]
 80135da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80135dc:	1ad3      	subs	r3, r2, r3
 80135de:	3b01      	subs	r3, #1
 80135e0:	2b00      	cmp	r3, #0
 80135e2:	f2c0 814d 	blt.w	8013880 <tcp_receive+0x440>
 80135e6:	4b47      	ldr	r3, [pc, #284]	; (8013704 <tcp_receive+0x2c4>)
 80135e8:	681a      	ldr	r2, [r3, #0]
 80135ea:	687b      	ldr	r3, [r7, #4]
 80135ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80135ee:	1ad3      	subs	r3, r2, r3
 80135f0:	2b00      	cmp	r3, #0
 80135f2:	f300 8145 	bgt.w	8013880 <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 80135f6:	687b      	ldr	r3, [r7, #4]
 80135f8:	8b5b      	ldrh	r3, [r3, #26]
 80135fa:	f003 0304 	and.w	r3, r3, #4
 80135fe:	2b00      	cmp	r3, #0
 8013600:	d010      	beq.n	8013624 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8013602:	687b      	ldr	r3, [r7, #4]
 8013604:	8b5b      	ldrh	r3, [r3, #26]
 8013606:	f023 0304 	bic.w	r3, r3, #4
 801360a:	b29a      	uxth	r2, r3
 801360c:	687b      	ldr	r3, [r7, #4]
 801360e:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8013610:	687b      	ldr	r3, [r7, #4]
 8013612:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8013616:	687b      	ldr	r3, [r7, #4]
 8013618:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 801361c:	687b      	ldr	r3, [r7, #4]
 801361e:	2200      	movs	r2, #0
 8013620:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8013624:	687b      	ldr	r3, [r7, #4]
 8013626:	2200      	movs	r2, #0
 8013628:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801362c:	687b      	ldr	r3, [r7, #4]
 801362e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8013632:	10db      	asrs	r3, r3, #3
 8013634:	b21b      	sxth	r3, r3
 8013636:	b29a      	uxth	r2, r3
 8013638:	687b      	ldr	r3, [r7, #4]
 801363a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801363e:	b29b      	uxth	r3, r3
 8013640:	4413      	add	r3, r2
 8013642:	b29b      	uxth	r3, r3
 8013644:	b21a      	sxth	r2, r3
 8013646:	687b      	ldr	r3, [r7, #4]
 8013648:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 801364c:	4b2d      	ldr	r3, [pc, #180]	; (8013704 <tcp_receive+0x2c4>)
 801364e:	681b      	ldr	r3, [r3, #0]
 8013650:	b29a      	uxth	r2, r3
 8013652:	687b      	ldr	r3, [r7, #4]
 8013654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013656:	b29b      	uxth	r3, r3
 8013658:	1ad3      	subs	r3, r2, r3
 801365a:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 801365c:	687b      	ldr	r3, [r7, #4]
 801365e:	2200      	movs	r2, #0
 8013660:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8013664:	4b27      	ldr	r3, [pc, #156]	; (8013704 <tcp_receive+0x2c4>)
 8013666:	681a      	ldr	r2, [r3, #0]
 8013668:	687b      	ldr	r3, [r7, #4]
 801366a:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 801366c:	687b      	ldr	r3, [r7, #4]
 801366e:	7d1b      	ldrb	r3, [r3, #20]
 8013670:	2b03      	cmp	r3, #3
 8013672:	f240 8096 	bls.w	80137a2 <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 8013676:	687b      	ldr	r3, [r7, #4]
 8013678:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801367c:	687b      	ldr	r3, [r7, #4]
 801367e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8013682:	429a      	cmp	r2, r3
 8013684:	d244      	bcs.n	8013710 <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8013686:	687b      	ldr	r3, [r7, #4]
 8013688:	8b5b      	ldrh	r3, [r3, #26]
 801368a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801368e:	2b00      	cmp	r3, #0
 8013690:	d001      	beq.n	8013696 <tcp_receive+0x256>
 8013692:	2301      	movs	r3, #1
 8013694:	e000      	b.n	8013698 <tcp_receive+0x258>
 8013696:	2302      	movs	r3, #2
 8013698:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 801369c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80136a0:	b29a      	uxth	r2, r3
 80136a2:	687b      	ldr	r3, [r7, #4]
 80136a4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80136a6:	fb12 f303 	smulbb	r3, r2, r3
 80136aa:	b29b      	uxth	r3, r3
 80136ac:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80136ae:	4293      	cmp	r3, r2
 80136b0:	bf28      	it	cs
 80136b2:	4613      	movcs	r3, r2
 80136b4:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 80136b6:	687b      	ldr	r3, [r7, #4]
 80136b8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80136bc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80136be:	4413      	add	r3, r2
 80136c0:	b29a      	uxth	r2, r3
 80136c2:	687b      	ldr	r3, [r7, #4]
 80136c4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80136c8:	429a      	cmp	r2, r3
 80136ca:	d309      	bcc.n	80136e0 <tcp_receive+0x2a0>
 80136cc:	687b      	ldr	r3, [r7, #4]
 80136ce:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80136d2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80136d4:	4413      	add	r3, r2
 80136d6:	b29a      	uxth	r2, r3
 80136d8:	687b      	ldr	r3, [r7, #4]
 80136da:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80136de:	e060      	b.n	80137a2 <tcp_receive+0x362>
 80136e0:	687b      	ldr	r3, [r7, #4]
 80136e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80136e6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80136ea:	e05a      	b.n	80137a2 <tcp_receive+0x362>
 80136ec:	08021d9c 	.word	0x08021d9c
 80136f0:	080220cc 	.word	0x080220cc
 80136f4:	08021de8 	.word	0x08021de8
 80136f8:	080220e8 	.word	0x080220e8
 80136fc:	2000050c 	.word	0x2000050c
 8013700:	20000500 	.word	0x20000500
 8013704:	20000504 	.word	0x20000504
 8013708:	200004f0 	.word	0x200004f0
 801370c:	2000050a 	.word	0x2000050a
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8013710:	687b      	ldr	r3, [r7, #4]
 8013712:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8013716:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8013718:	4413      	add	r3, r2
 801371a:	b29a      	uxth	r2, r3
 801371c:	687b      	ldr	r3, [r7, #4]
 801371e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8013722:	429a      	cmp	r2, r3
 8013724:	d309      	bcc.n	801373a <tcp_receive+0x2fa>
 8013726:	687b      	ldr	r3, [r7, #4]
 8013728:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801372c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801372e:	4413      	add	r3, r2
 8013730:	b29a      	uxth	r2, r3
 8013732:	687b      	ldr	r3, [r7, #4]
 8013734:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8013738:	e004      	b.n	8013744 <tcp_receive+0x304>
 801373a:	687b      	ldr	r3, [r7, #4]
 801373c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013740:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8013744:	687b      	ldr	r3, [r7, #4]
 8013746:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801374a:	687b      	ldr	r3, [r7, #4]
 801374c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8013750:	429a      	cmp	r2, r3
 8013752:	d326      	bcc.n	80137a2 <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8013754:	687b      	ldr	r3, [r7, #4]
 8013756:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801375a:	687b      	ldr	r3, [r7, #4]
 801375c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8013760:	1ad3      	subs	r3, r2, r3
 8013762:	b29a      	uxth	r2, r3
 8013764:	687b      	ldr	r3, [r7, #4]
 8013766:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 801376a:	687b      	ldr	r3, [r7, #4]
 801376c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8013770:	687b      	ldr	r3, [r7, #4]
 8013772:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013774:	4413      	add	r3, r2
 8013776:	b29a      	uxth	r2, r3
 8013778:	687b      	ldr	r3, [r7, #4]
 801377a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801377e:	429a      	cmp	r2, r3
 8013780:	d30a      	bcc.n	8013798 <tcp_receive+0x358>
 8013782:	687b      	ldr	r3, [r7, #4]
 8013784:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8013788:	687b      	ldr	r3, [r7, #4]
 801378a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801378c:	4413      	add	r3, r2
 801378e:	b29a      	uxth	r2, r3
 8013790:	687b      	ldr	r3, [r7, #4]
 8013792:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8013796:	e004      	b.n	80137a2 <tcp_receive+0x362>
 8013798:	687b      	ldr	r3, [r7, #4]
 801379a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801379e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 80137a2:	687b      	ldr	r3, [r7, #4]
 80137a4:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80137a6:	687b      	ldr	r3, [r7, #4]
 80137a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80137aa:	4a98      	ldr	r2, [pc, #608]	; (8013a0c <tcp_receive+0x5cc>)
 80137ac:	6878      	ldr	r0, [r7, #4]
 80137ae:	f7ff fdcb 	bl	8013348 <tcp_free_acked_segments>
 80137b2:	4602      	mov	r2, r0
 80137b4:	687b      	ldr	r3, [r7, #4]
 80137b6:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 80137b8:	687b      	ldr	r3, [r7, #4]
 80137ba:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 80137bc:	687b      	ldr	r3, [r7, #4]
 80137be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80137c0:	4a93      	ldr	r2, [pc, #588]	; (8013a10 <tcp_receive+0x5d0>)
 80137c2:	6878      	ldr	r0, [r7, #4]
 80137c4:	f7ff fdc0 	bl	8013348 <tcp_free_acked_segments>
 80137c8:	4602      	mov	r2, r0
 80137ca:	687b      	ldr	r3, [r7, #4]
 80137cc:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 80137ce:	687b      	ldr	r3, [r7, #4]
 80137d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80137d2:	2b00      	cmp	r3, #0
 80137d4:	d104      	bne.n	80137e0 <tcp_receive+0x3a0>
        pcb->rtime = -1;
 80137d6:	687b      	ldr	r3, [r7, #4]
 80137d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80137dc:	861a      	strh	r2, [r3, #48]	; 0x30
 80137de:	e002      	b.n	80137e6 <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 80137e0:	687b      	ldr	r3, [r7, #4]
 80137e2:	2200      	movs	r2, #0
 80137e4:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 80137e6:	687b      	ldr	r3, [r7, #4]
 80137e8:	2200      	movs	r2, #0
 80137ea:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 80137ec:	687b      	ldr	r3, [r7, #4]
 80137ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80137f0:	2b00      	cmp	r3, #0
 80137f2:	d103      	bne.n	80137fc <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 80137f4:	687b      	ldr	r3, [r7, #4]
 80137f6:	2200      	movs	r2, #0
 80137f8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 80137fc:	687b      	ldr	r3, [r7, #4]
 80137fe:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8013802:	4b84      	ldr	r3, [pc, #528]	; (8013a14 <tcp_receive+0x5d4>)
 8013804:	881b      	ldrh	r3, [r3, #0]
 8013806:	4413      	add	r3, r2
 8013808:	b29a      	uxth	r2, r3
 801380a:	687b      	ldr	r3, [r7, #4]
 801380c:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8013810:	687b      	ldr	r3, [r7, #4]
 8013812:	8b5b      	ldrh	r3, [r3, #26]
 8013814:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8013818:	2b00      	cmp	r3, #0
 801381a:	d035      	beq.n	8013888 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 801381c:	687b      	ldr	r3, [r7, #4]
 801381e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013820:	2b00      	cmp	r3, #0
 8013822:	d118      	bne.n	8013856 <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 8013824:	687b      	ldr	r3, [r7, #4]
 8013826:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013828:	2b00      	cmp	r3, #0
 801382a:	d00c      	beq.n	8013846 <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 801382c:	687b      	ldr	r3, [r7, #4]
 801382e:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8013830:	687b      	ldr	r3, [r7, #4]
 8013832:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013834:	68db      	ldr	r3, [r3, #12]
 8013836:	685b      	ldr	r3, [r3, #4]
 8013838:	4618      	mov	r0, r3
 801383a:	f7fb fa8c 	bl	800ed56 <lwip_htonl>
 801383e:	4603      	mov	r3, r0
 8013840:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8013842:	2b00      	cmp	r3, #0
 8013844:	dc20      	bgt.n	8013888 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 8013846:	687b      	ldr	r3, [r7, #4]
 8013848:	8b5b      	ldrh	r3, [r3, #26]
 801384a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801384e:	b29a      	uxth	r2, r3
 8013850:	687b      	ldr	r3, [r7, #4]
 8013852:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8013854:	e018      	b.n	8013888 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8013856:	687b      	ldr	r3, [r7, #4]
 8013858:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 801385a:	687b      	ldr	r3, [r7, #4]
 801385c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801385e:	68db      	ldr	r3, [r3, #12]
 8013860:	685b      	ldr	r3, [r3, #4]
 8013862:	4618      	mov	r0, r3
 8013864:	f7fb fa77 	bl	800ed56 <lwip_htonl>
 8013868:	4603      	mov	r3, r0
 801386a:	1ae3      	subs	r3, r4, r3
 801386c:	2b00      	cmp	r3, #0
 801386e:	dc0b      	bgt.n	8013888 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 8013870:	687b      	ldr	r3, [r7, #4]
 8013872:	8b5b      	ldrh	r3, [r3, #26]
 8013874:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8013878:	b29a      	uxth	r2, r3
 801387a:	687b      	ldr	r3, [r7, #4]
 801387c:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801387e:	e003      	b.n	8013888 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8013880:	6878      	ldr	r0, [r7, #4]
 8013882:	f001 ff73 	bl	801576c <tcp_send_empty_ack>
 8013886:	e000      	b.n	801388a <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8013888:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 801388a:	687b      	ldr	r3, [r7, #4]
 801388c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801388e:	2b00      	cmp	r3, #0
 8013890:	d05b      	beq.n	801394a <tcp_receive+0x50a>
 8013892:	687b      	ldr	r3, [r7, #4]
 8013894:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013896:	4b60      	ldr	r3, [pc, #384]	; (8013a18 <tcp_receive+0x5d8>)
 8013898:	681b      	ldr	r3, [r3, #0]
 801389a:	1ad3      	subs	r3, r2, r3
 801389c:	2b00      	cmp	r3, #0
 801389e:	da54      	bge.n	801394a <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 80138a0:	4b5e      	ldr	r3, [pc, #376]	; (8013a1c <tcp_receive+0x5dc>)
 80138a2:	681b      	ldr	r3, [r3, #0]
 80138a4:	b29a      	uxth	r2, r3
 80138a6:	687b      	ldr	r3, [r7, #4]
 80138a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80138aa:	b29b      	uxth	r3, r3
 80138ac:	1ad3      	subs	r3, r2, r3
 80138ae:	b29b      	uxth	r3, r3
 80138b0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 80138b4:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80138b8:	687b      	ldr	r3, [r7, #4]
 80138ba:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80138be:	10db      	asrs	r3, r3, #3
 80138c0:	b21b      	sxth	r3, r3
 80138c2:	b29b      	uxth	r3, r3
 80138c4:	1ad3      	subs	r3, r2, r3
 80138c6:	b29b      	uxth	r3, r3
 80138c8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 80138cc:	687b      	ldr	r3, [r7, #4]
 80138ce:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80138d2:	b29a      	uxth	r2, r3
 80138d4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80138d8:	4413      	add	r3, r2
 80138da:	b29b      	uxth	r3, r3
 80138dc:	b21a      	sxth	r2, r3
 80138de:	687b      	ldr	r3, [r7, #4]
 80138e0:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 80138e2:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 80138e6:	2b00      	cmp	r3, #0
 80138e8:	da05      	bge.n	80138f6 <tcp_receive+0x4b6>
        m = (s16_t) - m;
 80138ea:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80138ee:	425b      	negs	r3, r3
 80138f0:	b29b      	uxth	r3, r3
 80138f2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 80138f6:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80138fa:	687b      	ldr	r3, [r7, #4]
 80138fc:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8013900:	109b      	asrs	r3, r3, #2
 8013902:	b21b      	sxth	r3, r3
 8013904:	b29b      	uxth	r3, r3
 8013906:	1ad3      	subs	r3, r2, r3
 8013908:	b29b      	uxth	r3, r3
 801390a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 801390e:	687b      	ldr	r3, [r7, #4]
 8013910:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8013914:	b29a      	uxth	r2, r3
 8013916:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801391a:	4413      	add	r3, r2
 801391c:	b29b      	uxth	r3, r3
 801391e:	b21a      	sxth	r2, r3
 8013920:	687b      	ldr	r3, [r7, #4]
 8013922:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8013924:	687b      	ldr	r3, [r7, #4]
 8013926:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801392a:	10db      	asrs	r3, r3, #3
 801392c:	b21b      	sxth	r3, r3
 801392e:	b29a      	uxth	r2, r3
 8013930:	687b      	ldr	r3, [r7, #4]
 8013932:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8013936:	b29b      	uxth	r3, r3
 8013938:	4413      	add	r3, r2
 801393a:	b29b      	uxth	r3, r3
 801393c:	b21a      	sxth	r2, r3
 801393e:	687b      	ldr	r3, [r7, #4]
 8013940:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8013944:	687b      	ldr	r3, [r7, #4]
 8013946:	2200      	movs	r2, #0
 8013948:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801394a:	4b35      	ldr	r3, [pc, #212]	; (8013a20 <tcp_receive+0x5e0>)
 801394c:	881b      	ldrh	r3, [r3, #0]
 801394e:	2b00      	cmp	r3, #0
 8013950:	f000 84e1 	beq.w	8014316 <tcp_receive+0xed6>
 8013954:	687b      	ldr	r3, [r7, #4]
 8013956:	7d1b      	ldrb	r3, [r3, #20]
 8013958:	2b06      	cmp	r3, #6
 801395a:	f200 84dc 	bhi.w	8014316 <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801395e:	687b      	ldr	r3, [r7, #4]
 8013960:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013962:	4b30      	ldr	r3, [pc, #192]	; (8013a24 <tcp_receive+0x5e4>)
 8013964:	681b      	ldr	r3, [r3, #0]
 8013966:	1ad3      	subs	r3, r2, r3
 8013968:	3b01      	subs	r3, #1
 801396a:	2b00      	cmp	r3, #0
 801396c:	f2c0 808e 	blt.w	8013a8c <tcp_receive+0x64c>
 8013970:	687b      	ldr	r3, [r7, #4]
 8013972:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013974:	4b2a      	ldr	r3, [pc, #168]	; (8013a20 <tcp_receive+0x5e0>)
 8013976:	881b      	ldrh	r3, [r3, #0]
 8013978:	4619      	mov	r1, r3
 801397a:	4b2a      	ldr	r3, [pc, #168]	; (8013a24 <tcp_receive+0x5e4>)
 801397c:	681b      	ldr	r3, [r3, #0]
 801397e:	440b      	add	r3, r1
 8013980:	1ad3      	subs	r3, r2, r3
 8013982:	3301      	adds	r3, #1
 8013984:	2b00      	cmp	r3, #0
 8013986:	f300 8081 	bgt.w	8013a8c <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 801398a:	4b27      	ldr	r3, [pc, #156]	; (8013a28 <tcp_receive+0x5e8>)
 801398c:	685b      	ldr	r3, [r3, #4]
 801398e:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8013990:	687b      	ldr	r3, [r7, #4]
 8013992:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013994:	4b23      	ldr	r3, [pc, #140]	; (8013a24 <tcp_receive+0x5e4>)
 8013996:	681b      	ldr	r3, [r3, #0]
 8013998:	1ad3      	subs	r3, r2, r3
 801399a:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 801399c:	4b22      	ldr	r3, [pc, #136]	; (8013a28 <tcp_receive+0x5e8>)
 801399e:	685b      	ldr	r3, [r3, #4]
 80139a0:	2b00      	cmp	r3, #0
 80139a2:	d106      	bne.n	80139b2 <tcp_receive+0x572>
 80139a4:	4b21      	ldr	r3, [pc, #132]	; (8013a2c <tcp_receive+0x5ec>)
 80139a6:	f240 5294 	movw	r2, #1428	; 0x594
 80139aa:	4921      	ldr	r1, [pc, #132]	; (8013a30 <tcp_receive+0x5f0>)
 80139ac:	4821      	ldr	r0, [pc, #132]	; (8013a34 <tcp_receive+0x5f4>)
 80139ae:	f007 fcd7 	bl	801b360 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 80139b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80139b4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80139b8:	4293      	cmp	r3, r2
 80139ba:	d906      	bls.n	80139ca <tcp_receive+0x58a>
 80139bc:	4b1b      	ldr	r3, [pc, #108]	; (8013a2c <tcp_receive+0x5ec>)
 80139be:	f240 5295 	movw	r2, #1429	; 0x595
 80139c2:	491d      	ldr	r1, [pc, #116]	; (8013a38 <tcp_receive+0x5f8>)
 80139c4:	481b      	ldr	r0, [pc, #108]	; (8013a34 <tcp_receive+0x5f4>)
 80139c6:	f007 fccb 	bl	801b360 <iprintf>
      off = (u16_t)off32;
 80139ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80139cc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 80139d0:	4b15      	ldr	r3, [pc, #84]	; (8013a28 <tcp_receive+0x5e8>)
 80139d2:	685b      	ldr	r3, [r3, #4]
 80139d4:	891b      	ldrh	r3, [r3, #8]
 80139d6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80139da:	429a      	cmp	r2, r3
 80139dc:	d906      	bls.n	80139ec <tcp_receive+0x5ac>
 80139de:	4b13      	ldr	r3, [pc, #76]	; (8013a2c <tcp_receive+0x5ec>)
 80139e0:	f240 5297 	movw	r2, #1431	; 0x597
 80139e4:	4915      	ldr	r1, [pc, #84]	; (8013a3c <tcp_receive+0x5fc>)
 80139e6:	4813      	ldr	r0, [pc, #76]	; (8013a34 <tcp_receive+0x5f4>)
 80139e8:	f007 fcba 	bl	801b360 <iprintf>
      inseg.len -= off;
 80139ec:	4b0e      	ldr	r3, [pc, #56]	; (8013a28 <tcp_receive+0x5e8>)
 80139ee:	891a      	ldrh	r2, [r3, #8]
 80139f0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80139f4:	1ad3      	subs	r3, r2, r3
 80139f6:	b29a      	uxth	r2, r3
 80139f8:	4b0b      	ldr	r3, [pc, #44]	; (8013a28 <tcp_receive+0x5e8>)
 80139fa:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 80139fc:	4b0a      	ldr	r3, [pc, #40]	; (8013a28 <tcp_receive+0x5e8>)
 80139fe:	685b      	ldr	r3, [r3, #4]
 8013a00:	891a      	ldrh	r2, [r3, #8]
 8013a02:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8013a06:	1ad3      	subs	r3, r2, r3
 8013a08:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8013a0a:	e029      	b.n	8013a60 <tcp_receive+0x620>
 8013a0c:	08022104 	.word	0x08022104
 8013a10:	0802210c 	.word	0x0802210c
 8013a14:	20000508 	.word	0x20000508
 8013a18:	20000504 	.word	0x20000504
 8013a1c:	20007634 	.word	0x20007634
 8013a20:	2000050a 	.word	0x2000050a
 8013a24:	20000500 	.word	0x20000500
 8013a28:	200004e0 	.word	0x200004e0
 8013a2c:	08021d9c 	.word	0x08021d9c
 8013a30:	08022114 	.word	0x08022114
 8013a34:	08021de8 	.word	0x08021de8
 8013a38:	08022124 	.word	0x08022124
 8013a3c:	08022134 	.word	0x08022134
        off -= p->len;
 8013a40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013a42:	895b      	ldrh	r3, [r3, #10]
 8013a44:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8013a48:	1ad3      	subs	r3, r2, r3
 8013a4a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8013a4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013a50:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8013a52:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8013a54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013a56:	2200      	movs	r2, #0
 8013a58:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8013a5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013a5c:	681b      	ldr	r3, [r3, #0]
 8013a5e:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8013a60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013a62:	895b      	ldrh	r3, [r3, #10]
 8013a64:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8013a68:	429a      	cmp	r2, r3
 8013a6a:	d8e9      	bhi.n	8013a40 <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8013a6c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8013a70:	4619      	mov	r1, r3
 8013a72:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8013a74:	f7fc fb70 	bl	8010158 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8013a78:	687b      	ldr	r3, [r7, #4]
 8013a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013a7c:	4a91      	ldr	r2, [pc, #580]	; (8013cc4 <tcp_receive+0x884>)
 8013a7e:	6013      	str	r3, [r2, #0]
 8013a80:	4b91      	ldr	r3, [pc, #580]	; (8013cc8 <tcp_receive+0x888>)
 8013a82:	68db      	ldr	r3, [r3, #12]
 8013a84:	4a8f      	ldr	r2, [pc, #572]	; (8013cc4 <tcp_receive+0x884>)
 8013a86:	6812      	ldr	r2, [r2, #0]
 8013a88:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8013a8a:	e00d      	b.n	8013aa8 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8013a8c:	4b8d      	ldr	r3, [pc, #564]	; (8013cc4 <tcp_receive+0x884>)
 8013a8e:	681a      	ldr	r2, [r3, #0]
 8013a90:	687b      	ldr	r3, [r7, #4]
 8013a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013a94:	1ad3      	subs	r3, r2, r3
 8013a96:	2b00      	cmp	r3, #0
 8013a98:	da06      	bge.n	8013aa8 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8013a9a:	687b      	ldr	r3, [r7, #4]
 8013a9c:	8b5b      	ldrh	r3, [r3, #26]
 8013a9e:	f043 0302 	orr.w	r3, r3, #2
 8013aa2:	b29a      	uxth	r2, r3
 8013aa4:	687b      	ldr	r3, [r7, #4]
 8013aa6:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8013aa8:	4b86      	ldr	r3, [pc, #536]	; (8013cc4 <tcp_receive+0x884>)
 8013aaa:	681a      	ldr	r2, [r3, #0]
 8013aac:	687b      	ldr	r3, [r7, #4]
 8013aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013ab0:	1ad3      	subs	r3, r2, r3
 8013ab2:	2b00      	cmp	r3, #0
 8013ab4:	f2c0 842a 	blt.w	801430c <tcp_receive+0xecc>
 8013ab8:	4b82      	ldr	r3, [pc, #520]	; (8013cc4 <tcp_receive+0x884>)
 8013aba:	681a      	ldr	r2, [r3, #0]
 8013abc:	687b      	ldr	r3, [r7, #4]
 8013abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013ac0:	6879      	ldr	r1, [r7, #4]
 8013ac2:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8013ac4:	440b      	add	r3, r1
 8013ac6:	1ad3      	subs	r3, r2, r3
 8013ac8:	3301      	adds	r3, #1
 8013aca:	2b00      	cmp	r3, #0
 8013acc:	f300 841e 	bgt.w	801430c <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8013ad0:	687b      	ldr	r3, [r7, #4]
 8013ad2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013ad4:	4b7b      	ldr	r3, [pc, #492]	; (8013cc4 <tcp_receive+0x884>)
 8013ad6:	681b      	ldr	r3, [r3, #0]
 8013ad8:	429a      	cmp	r2, r3
 8013ada:	f040 829a 	bne.w	8014012 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8013ade:	4b7a      	ldr	r3, [pc, #488]	; (8013cc8 <tcp_receive+0x888>)
 8013ae0:	891c      	ldrh	r4, [r3, #8]
 8013ae2:	4b79      	ldr	r3, [pc, #484]	; (8013cc8 <tcp_receive+0x888>)
 8013ae4:	68db      	ldr	r3, [r3, #12]
 8013ae6:	899b      	ldrh	r3, [r3, #12]
 8013ae8:	b29b      	uxth	r3, r3
 8013aea:	4618      	mov	r0, r3
 8013aec:	f7fb f91e 	bl	800ed2c <lwip_htons>
 8013af0:	4603      	mov	r3, r0
 8013af2:	b2db      	uxtb	r3, r3
 8013af4:	f003 0303 	and.w	r3, r3, #3
 8013af8:	2b00      	cmp	r3, #0
 8013afa:	d001      	beq.n	8013b00 <tcp_receive+0x6c0>
 8013afc:	2301      	movs	r3, #1
 8013afe:	e000      	b.n	8013b02 <tcp_receive+0x6c2>
 8013b00:	2300      	movs	r3, #0
 8013b02:	4423      	add	r3, r4
 8013b04:	b29a      	uxth	r2, r3
 8013b06:	4b71      	ldr	r3, [pc, #452]	; (8013ccc <tcp_receive+0x88c>)
 8013b08:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8013b0a:	687b      	ldr	r3, [r7, #4]
 8013b0c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8013b0e:	4b6f      	ldr	r3, [pc, #444]	; (8013ccc <tcp_receive+0x88c>)
 8013b10:	881b      	ldrh	r3, [r3, #0]
 8013b12:	429a      	cmp	r2, r3
 8013b14:	d275      	bcs.n	8013c02 <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8013b16:	4b6c      	ldr	r3, [pc, #432]	; (8013cc8 <tcp_receive+0x888>)
 8013b18:	68db      	ldr	r3, [r3, #12]
 8013b1a:	899b      	ldrh	r3, [r3, #12]
 8013b1c:	b29b      	uxth	r3, r3
 8013b1e:	4618      	mov	r0, r3
 8013b20:	f7fb f904 	bl	800ed2c <lwip_htons>
 8013b24:	4603      	mov	r3, r0
 8013b26:	b2db      	uxtb	r3, r3
 8013b28:	f003 0301 	and.w	r3, r3, #1
 8013b2c:	2b00      	cmp	r3, #0
 8013b2e:	d01f      	beq.n	8013b70 <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8013b30:	4b65      	ldr	r3, [pc, #404]	; (8013cc8 <tcp_receive+0x888>)
 8013b32:	68db      	ldr	r3, [r3, #12]
 8013b34:	899b      	ldrh	r3, [r3, #12]
 8013b36:	b29b      	uxth	r3, r3
 8013b38:	b21b      	sxth	r3, r3
 8013b3a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8013b3e:	b21c      	sxth	r4, r3
 8013b40:	4b61      	ldr	r3, [pc, #388]	; (8013cc8 <tcp_receive+0x888>)
 8013b42:	68db      	ldr	r3, [r3, #12]
 8013b44:	899b      	ldrh	r3, [r3, #12]
 8013b46:	b29b      	uxth	r3, r3
 8013b48:	4618      	mov	r0, r3
 8013b4a:	f7fb f8ef 	bl	800ed2c <lwip_htons>
 8013b4e:	4603      	mov	r3, r0
 8013b50:	b2db      	uxtb	r3, r3
 8013b52:	b29b      	uxth	r3, r3
 8013b54:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8013b58:	b29b      	uxth	r3, r3
 8013b5a:	4618      	mov	r0, r3
 8013b5c:	f7fb f8e6 	bl	800ed2c <lwip_htons>
 8013b60:	4603      	mov	r3, r0
 8013b62:	b21b      	sxth	r3, r3
 8013b64:	4323      	orrs	r3, r4
 8013b66:	b21a      	sxth	r2, r3
 8013b68:	4b57      	ldr	r3, [pc, #348]	; (8013cc8 <tcp_receive+0x888>)
 8013b6a:	68db      	ldr	r3, [r3, #12]
 8013b6c:	b292      	uxth	r2, r2
 8013b6e:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8013b70:	687b      	ldr	r3, [r7, #4]
 8013b72:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8013b74:	4b54      	ldr	r3, [pc, #336]	; (8013cc8 <tcp_receive+0x888>)
 8013b76:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8013b78:	4b53      	ldr	r3, [pc, #332]	; (8013cc8 <tcp_receive+0x888>)
 8013b7a:	68db      	ldr	r3, [r3, #12]
 8013b7c:	899b      	ldrh	r3, [r3, #12]
 8013b7e:	b29b      	uxth	r3, r3
 8013b80:	4618      	mov	r0, r3
 8013b82:	f7fb f8d3 	bl	800ed2c <lwip_htons>
 8013b86:	4603      	mov	r3, r0
 8013b88:	b2db      	uxtb	r3, r3
 8013b8a:	f003 0302 	and.w	r3, r3, #2
 8013b8e:	2b00      	cmp	r3, #0
 8013b90:	d005      	beq.n	8013b9e <tcp_receive+0x75e>
            inseg.len -= 1;
 8013b92:	4b4d      	ldr	r3, [pc, #308]	; (8013cc8 <tcp_receive+0x888>)
 8013b94:	891b      	ldrh	r3, [r3, #8]
 8013b96:	3b01      	subs	r3, #1
 8013b98:	b29a      	uxth	r2, r3
 8013b9a:	4b4b      	ldr	r3, [pc, #300]	; (8013cc8 <tcp_receive+0x888>)
 8013b9c:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8013b9e:	4b4a      	ldr	r3, [pc, #296]	; (8013cc8 <tcp_receive+0x888>)
 8013ba0:	685b      	ldr	r3, [r3, #4]
 8013ba2:	4a49      	ldr	r2, [pc, #292]	; (8013cc8 <tcp_receive+0x888>)
 8013ba4:	8912      	ldrh	r2, [r2, #8]
 8013ba6:	4611      	mov	r1, r2
 8013ba8:	4618      	mov	r0, r3
 8013baa:	f7fc f9d5 	bl	800ff58 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8013bae:	4b46      	ldr	r3, [pc, #280]	; (8013cc8 <tcp_receive+0x888>)
 8013bb0:	891c      	ldrh	r4, [r3, #8]
 8013bb2:	4b45      	ldr	r3, [pc, #276]	; (8013cc8 <tcp_receive+0x888>)
 8013bb4:	68db      	ldr	r3, [r3, #12]
 8013bb6:	899b      	ldrh	r3, [r3, #12]
 8013bb8:	b29b      	uxth	r3, r3
 8013bba:	4618      	mov	r0, r3
 8013bbc:	f7fb f8b6 	bl	800ed2c <lwip_htons>
 8013bc0:	4603      	mov	r3, r0
 8013bc2:	b2db      	uxtb	r3, r3
 8013bc4:	f003 0303 	and.w	r3, r3, #3
 8013bc8:	2b00      	cmp	r3, #0
 8013bca:	d001      	beq.n	8013bd0 <tcp_receive+0x790>
 8013bcc:	2301      	movs	r3, #1
 8013bce:	e000      	b.n	8013bd2 <tcp_receive+0x792>
 8013bd0:	2300      	movs	r3, #0
 8013bd2:	4423      	add	r3, r4
 8013bd4:	b29a      	uxth	r2, r3
 8013bd6:	4b3d      	ldr	r3, [pc, #244]	; (8013ccc <tcp_receive+0x88c>)
 8013bd8:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8013bda:	4b3c      	ldr	r3, [pc, #240]	; (8013ccc <tcp_receive+0x88c>)
 8013bdc:	881b      	ldrh	r3, [r3, #0]
 8013bde:	461a      	mov	r2, r3
 8013be0:	4b38      	ldr	r3, [pc, #224]	; (8013cc4 <tcp_receive+0x884>)
 8013be2:	681b      	ldr	r3, [r3, #0]
 8013be4:	441a      	add	r2, r3
 8013be6:	687b      	ldr	r3, [r7, #4]
 8013be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013bea:	6879      	ldr	r1, [r7, #4]
 8013bec:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8013bee:	440b      	add	r3, r1
 8013bf0:	429a      	cmp	r2, r3
 8013bf2:	d006      	beq.n	8013c02 <tcp_receive+0x7c2>
 8013bf4:	4b36      	ldr	r3, [pc, #216]	; (8013cd0 <tcp_receive+0x890>)
 8013bf6:	f240 52cb 	movw	r2, #1483	; 0x5cb
 8013bfa:	4936      	ldr	r1, [pc, #216]	; (8013cd4 <tcp_receive+0x894>)
 8013bfc:	4836      	ldr	r0, [pc, #216]	; (8013cd8 <tcp_receive+0x898>)
 8013bfe:	f007 fbaf 	bl	801b360 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8013c02:	687b      	ldr	r3, [r7, #4]
 8013c04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013c06:	2b00      	cmp	r3, #0
 8013c08:	f000 80e7 	beq.w	8013dda <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8013c0c:	4b2e      	ldr	r3, [pc, #184]	; (8013cc8 <tcp_receive+0x888>)
 8013c0e:	68db      	ldr	r3, [r3, #12]
 8013c10:	899b      	ldrh	r3, [r3, #12]
 8013c12:	b29b      	uxth	r3, r3
 8013c14:	4618      	mov	r0, r3
 8013c16:	f7fb f889 	bl	800ed2c <lwip_htons>
 8013c1a:	4603      	mov	r3, r0
 8013c1c:	b2db      	uxtb	r3, r3
 8013c1e:	f003 0301 	and.w	r3, r3, #1
 8013c22:	2b00      	cmp	r3, #0
 8013c24:	d010      	beq.n	8013c48 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8013c26:	e00a      	b.n	8013c3e <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8013c28:	687b      	ldr	r3, [r7, #4]
 8013c2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013c2c:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8013c2e:	687b      	ldr	r3, [r7, #4]
 8013c30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013c32:	681a      	ldr	r2, [r3, #0]
 8013c34:	687b      	ldr	r3, [r7, #4]
 8013c36:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8013c38:	68f8      	ldr	r0, [r7, #12]
 8013c3a:	f7fd fd96 	bl	801176a <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8013c3e:	687b      	ldr	r3, [r7, #4]
 8013c40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013c42:	2b00      	cmp	r3, #0
 8013c44:	d1f0      	bne.n	8013c28 <tcp_receive+0x7e8>
 8013c46:	e0c8      	b.n	8013dda <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8013c48:	687b      	ldr	r3, [r7, #4]
 8013c4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013c4c:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8013c4e:	e052      	b.n	8013cf6 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8013c50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013c52:	68db      	ldr	r3, [r3, #12]
 8013c54:	899b      	ldrh	r3, [r3, #12]
 8013c56:	b29b      	uxth	r3, r3
 8013c58:	4618      	mov	r0, r3
 8013c5a:	f7fb f867 	bl	800ed2c <lwip_htons>
 8013c5e:	4603      	mov	r3, r0
 8013c60:	b2db      	uxtb	r3, r3
 8013c62:	f003 0301 	and.w	r3, r3, #1
 8013c66:	2b00      	cmp	r3, #0
 8013c68:	d03d      	beq.n	8013ce6 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8013c6a:	4b17      	ldr	r3, [pc, #92]	; (8013cc8 <tcp_receive+0x888>)
 8013c6c:	68db      	ldr	r3, [r3, #12]
 8013c6e:	899b      	ldrh	r3, [r3, #12]
 8013c70:	b29b      	uxth	r3, r3
 8013c72:	4618      	mov	r0, r3
 8013c74:	f7fb f85a 	bl	800ed2c <lwip_htons>
 8013c78:	4603      	mov	r3, r0
 8013c7a:	b2db      	uxtb	r3, r3
 8013c7c:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8013c80:	2b00      	cmp	r3, #0
 8013c82:	d130      	bne.n	8013ce6 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8013c84:	4b10      	ldr	r3, [pc, #64]	; (8013cc8 <tcp_receive+0x888>)
 8013c86:	68db      	ldr	r3, [r3, #12]
 8013c88:	899b      	ldrh	r3, [r3, #12]
 8013c8a:	b29c      	uxth	r4, r3
 8013c8c:	2001      	movs	r0, #1
 8013c8e:	f7fb f84d 	bl	800ed2c <lwip_htons>
 8013c92:	4603      	mov	r3, r0
 8013c94:	461a      	mov	r2, r3
 8013c96:	4b0c      	ldr	r3, [pc, #48]	; (8013cc8 <tcp_receive+0x888>)
 8013c98:	68db      	ldr	r3, [r3, #12]
 8013c9a:	4322      	orrs	r2, r4
 8013c9c:	b292      	uxth	r2, r2
 8013c9e:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8013ca0:	4b09      	ldr	r3, [pc, #36]	; (8013cc8 <tcp_receive+0x888>)
 8013ca2:	891c      	ldrh	r4, [r3, #8]
 8013ca4:	4b08      	ldr	r3, [pc, #32]	; (8013cc8 <tcp_receive+0x888>)
 8013ca6:	68db      	ldr	r3, [r3, #12]
 8013ca8:	899b      	ldrh	r3, [r3, #12]
 8013caa:	b29b      	uxth	r3, r3
 8013cac:	4618      	mov	r0, r3
 8013cae:	f7fb f83d 	bl	800ed2c <lwip_htons>
 8013cb2:	4603      	mov	r3, r0
 8013cb4:	b2db      	uxtb	r3, r3
 8013cb6:	f003 0303 	and.w	r3, r3, #3
 8013cba:	2b00      	cmp	r3, #0
 8013cbc:	d00e      	beq.n	8013cdc <tcp_receive+0x89c>
 8013cbe:	2301      	movs	r3, #1
 8013cc0:	e00d      	b.n	8013cde <tcp_receive+0x89e>
 8013cc2:	bf00      	nop
 8013cc4:	20000500 	.word	0x20000500
 8013cc8:	200004e0 	.word	0x200004e0
 8013ccc:	2000050a 	.word	0x2000050a
 8013cd0:	08021d9c 	.word	0x08021d9c
 8013cd4:	08022144 	.word	0x08022144
 8013cd8:	08021de8 	.word	0x08021de8
 8013cdc:	2300      	movs	r3, #0
 8013cde:	4423      	add	r3, r4
 8013ce0:	b29a      	uxth	r2, r3
 8013ce2:	4b98      	ldr	r3, [pc, #608]	; (8013f44 <tcp_receive+0xb04>)
 8013ce4:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8013ce6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013ce8:	613b      	str	r3, [r7, #16]
              next = next->next;
 8013cea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013cec:	681b      	ldr	r3, [r3, #0]
 8013cee:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8013cf0:	6938      	ldr	r0, [r7, #16]
 8013cf2:	f7fd fd3a 	bl	801176a <tcp_seg_free>
            while (next &&
 8013cf6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013cf8:	2b00      	cmp	r3, #0
 8013cfa:	d00e      	beq.n	8013d1a <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8013cfc:	4b91      	ldr	r3, [pc, #580]	; (8013f44 <tcp_receive+0xb04>)
 8013cfe:	881b      	ldrh	r3, [r3, #0]
 8013d00:	461a      	mov	r2, r3
 8013d02:	4b91      	ldr	r3, [pc, #580]	; (8013f48 <tcp_receive+0xb08>)
 8013d04:	681b      	ldr	r3, [r3, #0]
 8013d06:	441a      	add	r2, r3
 8013d08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013d0a:	68db      	ldr	r3, [r3, #12]
 8013d0c:	685b      	ldr	r3, [r3, #4]
 8013d0e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8013d10:	8909      	ldrh	r1, [r1, #8]
 8013d12:	440b      	add	r3, r1
 8013d14:	1ad3      	subs	r3, r2, r3
            while (next &&
 8013d16:	2b00      	cmp	r3, #0
 8013d18:	da9a      	bge.n	8013c50 <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8013d1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013d1c:	2b00      	cmp	r3, #0
 8013d1e:	d059      	beq.n	8013dd4 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8013d20:	4b88      	ldr	r3, [pc, #544]	; (8013f44 <tcp_receive+0xb04>)
 8013d22:	881b      	ldrh	r3, [r3, #0]
 8013d24:	461a      	mov	r2, r3
 8013d26:	4b88      	ldr	r3, [pc, #544]	; (8013f48 <tcp_receive+0xb08>)
 8013d28:	681b      	ldr	r3, [r3, #0]
 8013d2a:	441a      	add	r2, r3
 8013d2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013d2e:	68db      	ldr	r3, [r3, #12]
 8013d30:	685b      	ldr	r3, [r3, #4]
 8013d32:	1ad3      	subs	r3, r2, r3
            if (next &&
 8013d34:	2b00      	cmp	r3, #0
 8013d36:	dd4d      	ble.n	8013dd4 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8013d38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013d3a:	68db      	ldr	r3, [r3, #12]
 8013d3c:	685b      	ldr	r3, [r3, #4]
 8013d3e:	b29a      	uxth	r2, r3
 8013d40:	4b81      	ldr	r3, [pc, #516]	; (8013f48 <tcp_receive+0xb08>)
 8013d42:	681b      	ldr	r3, [r3, #0]
 8013d44:	b29b      	uxth	r3, r3
 8013d46:	1ad3      	subs	r3, r2, r3
 8013d48:	b29a      	uxth	r2, r3
 8013d4a:	4b80      	ldr	r3, [pc, #512]	; (8013f4c <tcp_receive+0xb0c>)
 8013d4c:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8013d4e:	4b7f      	ldr	r3, [pc, #508]	; (8013f4c <tcp_receive+0xb0c>)
 8013d50:	68db      	ldr	r3, [r3, #12]
 8013d52:	899b      	ldrh	r3, [r3, #12]
 8013d54:	b29b      	uxth	r3, r3
 8013d56:	4618      	mov	r0, r3
 8013d58:	f7fa ffe8 	bl	800ed2c <lwip_htons>
 8013d5c:	4603      	mov	r3, r0
 8013d5e:	b2db      	uxtb	r3, r3
 8013d60:	f003 0302 	and.w	r3, r3, #2
 8013d64:	2b00      	cmp	r3, #0
 8013d66:	d005      	beq.n	8013d74 <tcp_receive+0x934>
                inseg.len -= 1;
 8013d68:	4b78      	ldr	r3, [pc, #480]	; (8013f4c <tcp_receive+0xb0c>)
 8013d6a:	891b      	ldrh	r3, [r3, #8]
 8013d6c:	3b01      	subs	r3, #1
 8013d6e:	b29a      	uxth	r2, r3
 8013d70:	4b76      	ldr	r3, [pc, #472]	; (8013f4c <tcp_receive+0xb0c>)
 8013d72:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8013d74:	4b75      	ldr	r3, [pc, #468]	; (8013f4c <tcp_receive+0xb0c>)
 8013d76:	685b      	ldr	r3, [r3, #4]
 8013d78:	4a74      	ldr	r2, [pc, #464]	; (8013f4c <tcp_receive+0xb0c>)
 8013d7a:	8912      	ldrh	r2, [r2, #8]
 8013d7c:	4611      	mov	r1, r2
 8013d7e:	4618      	mov	r0, r3
 8013d80:	f7fc f8ea 	bl	800ff58 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8013d84:	4b71      	ldr	r3, [pc, #452]	; (8013f4c <tcp_receive+0xb0c>)
 8013d86:	891c      	ldrh	r4, [r3, #8]
 8013d88:	4b70      	ldr	r3, [pc, #448]	; (8013f4c <tcp_receive+0xb0c>)
 8013d8a:	68db      	ldr	r3, [r3, #12]
 8013d8c:	899b      	ldrh	r3, [r3, #12]
 8013d8e:	b29b      	uxth	r3, r3
 8013d90:	4618      	mov	r0, r3
 8013d92:	f7fa ffcb 	bl	800ed2c <lwip_htons>
 8013d96:	4603      	mov	r3, r0
 8013d98:	b2db      	uxtb	r3, r3
 8013d9a:	f003 0303 	and.w	r3, r3, #3
 8013d9e:	2b00      	cmp	r3, #0
 8013da0:	d001      	beq.n	8013da6 <tcp_receive+0x966>
 8013da2:	2301      	movs	r3, #1
 8013da4:	e000      	b.n	8013da8 <tcp_receive+0x968>
 8013da6:	2300      	movs	r3, #0
 8013da8:	4423      	add	r3, r4
 8013daa:	b29a      	uxth	r2, r3
 8013dac:	4b65      	ldr	r3, [pc, #404]	; (8013f44 <tcp_receive+0xb04>)
 8013dae:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8013db0:	4b64      	ldr	r3, [pc, #400]	; (8013f44 <tcp_receive+0xb04>)
 8013db2:	881b      	ldrh	r3, [r3, #0]
 8013db4:	461a      	mov	r2, r3
 8013db6:	4b64      	ldr	r3, [pc, #400]	; (8013f48 <tcp_receive+0xb08>)
 8013db8:	681b      	ldr	r3, [r3, #0]
 8013dba:	441a      	add	r2, r3
 8013dbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013dbe:	68db      	ldr	r3, [r3, #12]
 8013dc0:	685b      	ldr	r3, [r3, #4]
 8013dc2:	429a      	cmp	r2, r3
 8013dc4:	d006      	beq.n	8013dd4 <tcp_receive+0x994>
 8013dc6:	4b62      	ldr	r3, [pc, #392]	; (8013f50 <tcp_receive+0xb10>)
 8013dc8:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8013dcc:	4961      	ldr	r1, [pc, #388]	; (8013f54 <tcp_receive+0xb14>)
 8013dce:	4862      	ldr	r0, [pc, #392]	; (8013f58 <tcp_receive+0xb18>)
 8013dd0:	f007 fac6 	bl	801b360 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8013dd4:	687b      	ldr	r3, [r7, #4]
 8013dd6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013dd8:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8013dda:	4b5a      	ldr	r3, [pc, #360]	; (8013f44 <tcp_receive+0xb04>)
 8013ddc:	881b      	ldrh	r3, [r3, #0]
 8013dde:	461a      	mov	r2, r3
 8013de0:	4b59      	ldr	r3, [pc, #356]	; (8013f48 <tcp_receive+0xb08>)
 8013de2:	681b      	ldr	r3, [r3, #0]
 8013de4:	441a      	add	r2, r3
 8013de6:	687b      	ldr	r3, [r7, #4]
 8013de8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8013dea:	687b      	ldr	r3, [r7, #4]
 8013dec:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8013dee:	4b55      	ldr	r3, [pc, #340]	; (8013f44 <tcp_receive+0xb04>)
 8013df0:	881b      	ldrh	r3, [r3, #0]
 8013df2:	429a      	cmp	r2, r3
 8013df4:	d206      	bcs.n	8013e04 <tcp_receive+0x9c4>
 8013df6:	4b56      	ldr	r3, [pc, #344]	; (8013f50 <tcp_receive+0xb10>)
 8013df8:	f240 6207 	movw	r2, #1543	; 0x607
 8013dfc:	4957      	ldr	r1, [pc, #348]	; (8013f5c <tcp_receive+0xb1c>)
 8013dfe:	4856      	ldr	r0, [pc, #344]	; (8013f58 <tcp_receive+0xb18>)
 8013e00:	f007 faae 	bl	801b360 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8013e04:	687b      	ldr	r3, [r7, #4]
 8013e06:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8013e08:	4b4e      	ldr	r3, [pc, #312]	; (8013f44 <tcp_receive+0xb04>)
 8013e0a:	881b      	ldrh	r3, [r3, #0]
 8013e0c:	1ad3      	subs	r3, r2, r3
 8013e0e:	b29a      	uxth	r2, r3
 8013e10:	687b      	ldr	r3, [r7, #4]
 8013e12:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8013e14:	6878      	ldr	r0, [r7, #4]
 8013e16:	f7fc ffc9 	bl	8010dac <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8013e1a:	4b4c      	ldr	r3, [pc, #304]	; (8013f4c <tcp_receive+0xb0c>)
 8013e1c:	685b      	ldr	r3, [r3, #4]
 8013e1e:	891b      	ldrh	r3, [r3, #8]
 8013e20:	2b00      	cmp	r3, #0
 8013e22:	d006      	beq.n	8013e32 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 8013e24:	4b49      	ldr	r3, [pc, #292]	; (8013f4c <tcp_receive+0xb0c>)
 8013e26:	685b      	ldr	r3, [r3, #4]
 8013e28:	4a4d      	ldr	r2, [pc, #308]	; (8013f60 <tcp_receive+0xb20>)
 8013e2a:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8013e2c:	4b47      	ldr	r3, [pc, #284]	; (8013f4c <tcp_receive+0xb0c>)
 8013e2e:	2200      	movs	r2, #0
 8013e30:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8013e32:	4b46      	ldr	r3, [pc, #280]	; (8013f4c <tcp_receive+0xb0c>)
 8013e34:	68db      	ldr	r3, [r3, #12]
 8013e36:	899b      	ldrh	r3, [r3, #12]
 8013e38:	b29b      	uxth	r3, r3
 8013e3a:	4618      	mov	r0, r3
 8013e3c:	f7fa ff76 	bl	800ed2c <lwip_htons>
 8013e40:	4603      	mov	r3, r0
 8013e42:	b2db      	uxtb	r3, r3
 8013e44:	f003 0301 	and.w	r3, r3, #1
 8013e48:	2b00      	cmp	r3, #0
 8013e4a:	f000 80b8 	beq.w	8013fbe <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8013e4e:	4b45      	ldr	r3, [pc, #276]	; (8013f64 <tcp_receive+0xb24>)
 8013e50:	781b      	ldrb	r3, [r3, #0]
 8013e52:	f043 0320 	orr.w	r3, r3, #32
 8013e56:	b2da      	uxtb	r2, r3
 8013e58:	4b42      	ldr	r3, [pc, #264]	; (8013f64 <tcp_receive+0xb24>)
 8013e5a:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8013e5c:	e0af      	b.n	8013fbe <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8013e5e:	687b      	ldr	r3, [r7, #4]
 8013e60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013e62:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8013e64:	687b      	ldr	r3, [r7, #4]
 8013e66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013e68:	68db      	ldr	r3, [r3, #12]
 8013e6a:	685b      	ldr	r3, [r3, #4]
 8013e6c:	4a36      	ldr	r2, [pc, #216]	; (8013f48 <tcp_receive+0xb08>)
 8013e6e:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8013e70:	68bb      	ldr	r3, [r7, #8]
 8013e72:	891b      	ldrh	r3, [r3, #8]
 8013e74:	461c      	mov	r4, r3
 8013e76:	68bb      	ldr	r3, [r7, #8]
 8013e78:	68db      	ldr	r3, [r3, #12]
 8013e7a:	899b      	ldrh	r3, [r3, #12]
 8013e7c:	b29b      	uxth	r3, r3
 8013e7e:	4618      	mov	r0, r3
 8013e80:	f7fa ff54 	bl	800ed2c <lwip_htons>
 8013e84:	4603      	mov	r3, r0
 8013e86:	b2db      	uxtb	r3, r3
 8013e88:	f003 0303 	and.w	r3, r3, #3
 8013e8c:	2b00      	cmp	r3, #0
 8013e8e:	d001      	beq.n	8013e94 <tcp_receive+0xa54>
 8013e90:	2301      	movs	r3, #1
 8013e92:	e000      	b.n	8013e96 <tcp_receive+0xa56>
 8013e94:	2300      	movs	r3, #0
 8013e96:	191a      	adds	r2, r3, r4
 8013e98:	687b      	ldr	r3, [r7, #4]
 8013e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013e9c:	441a      	add	r2, r3
 8013e9e:	687b      	ldr	r3, [r7, #4]
 8013ea0:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8013ea2:	687b      	ldr	r3, [r7, #4]
 8013ea4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013ea6:	461c      	mov	r4, r3
 8013ea8:	68bb      	ldr	r3, [r7, #8]
 8013eaa:	891b      	ldrh	r3, [r3, #8]
 8013eac:	461d      	mov	r5, r3
 8013eae:	68bb      	ldr	r3, [r7, #8]
 8013eb0:	68db      	ldr	r3, [r3, #12]
 8013eb2:	899b      	ldrh	r3, [r3, #12]
 8013eb4:	b29b      	uxth	r3, r3
 8013eb6:	4618      	mov	r0, r3
 8013eb8:	f7fa ff38 	bl	800ed2c <lwip_htons>
 8013ebc:	4603      	mov	r3, r0
 8013ebe:	b2db      	uxtb	r3, r3
 8013ec0:	f003 0303 	and.w	r3, r3, #3
 8013ec4:	2b00      	cmp	r3, #0
 8013ec6:	d001      	beq.n	8013ecc <tcp_receive+0xa8c>
 8013ec8:	2301      	movs	r3, #1
 8013eca:	e000      	b.n	8013ece <tcp_receive+0xa8e>
 8013ecc:	2300      	movs	r3, #0
 8013ece:	442b      	add	r3, r5
 8013ed0:	429c      	cmp	r4, r3
 8013ed2:	d206      	bcs.n	8013ee2 <tcp_receive+0xaa2>
 8013ed4:	4b1e      	ldr	r3, [pc, #120]	; (8013f50 <tcp_receive+0xb10>)
 8013ed6:	f240 622b 	movw	r2, #1579	; 0x62b
 8013eda:	4923      	ldr	r1, [pc, #140]	; (8013f68 <tcp_receive+0xb28>)
 8013edc:	481e      	ldr	r0, [pc, #120]	; (8013f58 <tcp_receive+0xb18>)
 8013ede:	f007 fa3f 	bl	801b360 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8013ee2:	68bb      	ldr	r3, [r7, #8]
 8013ee4:	891b      	ldrh	r3, [r3, #8]
 8013ee6:	461c      	mov	r4, r3
 8013ee8:	68bb      	ldr	r3, [r7, #8]
 8013eea:	68db      	ldr	r3, [r3, #12]
 8013eec:	899b      	ldrh	r3, [r3, #12]
 8013eee:	b29b      	uxth	r3, r3
 8013ef0:	4618      	mov	r0, r3
 8013ef2:	f7fa ff1b 	bl	800ed2c <lwip_htons>
 8013ef6:	4603      	mov	r3, r0
 8013ef8:	b2db      	uxtb	r3, r3
 8013efa:	f003 0303 	and.w	r3, r3, #3
 8013efe:	2b00      	cmp	r3, #0
 8013f00:	d001      	beq.n	8013f06 <tcp_receive+0xac6>
 8013f02:	2301      	movs	r3, #1
 8013f04:	e000      	b.n	8013f08 <tcp_receive+0xac8>
 8013f06:	2300      	movs	r3, #0
 8013f08:	1919      	adds	r1, r3, r4
 8013f0a:	687b      	ldr	r3, [r7, #4]
 8013f0c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8013f0e:	b28b      	uxth	r3, r1
 8013f10:	1ad3      	subs	r3, r2, r3
 8013f12:	b29a      	uxth	r2, r3
 8013f14:	687b      	ldr	r3, [r7, #4]
 8013f16:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8013f18:	6878      	ldr	r0, [r7, #4]
 8013f1a:	f7fc ff47 	bl	8010dac <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8013f1e:	68bb      	ldr	r3, [r7, #8]
 8013f20:	685b      	ldr	r3, [r3, #4]
 8013f22:	891b      	ldrh	r3, [r3, #8]
 8013f24:	2b00      	cmp	r3, #0
 8013f26:	d028      	beq.n	8013f7a <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8013f28:	4b0d      	ldr	r3, [pc, #52]	; (8013f60 <tcp_receive+0xb20>)
 8013f2a:	681b      	ldr	r3, [r3, #0]
 8013f2c:	2b00      	cmp	r3, #0
 8013f2e:	d01d      	beq.n	8013f6c <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 8013f30:	4b0b      	ldr	r3, [pc, #44]	; (8013f60 <tcp_receive+0xb20>)
 8013f32:	681a      	ldr	r2, [r3, #0]
 8013f34:	68bb      	ldr	r3, [r7, #8]
 8013f36:	685b      	ldr	r3, [r3, #4]
 8013f38:	4619      	mov	r1, r3
 8013f3a:	4610      	mov	r0, r2
 8013f3c:	f7fc fa54 	bl	80103e8 <pbuf_cat>
 8013f40:	e018      	b.n	8013f74 <tcp_receive+0xb34>
 8013f42:	bf00      	nop
 8013f44:	2000050a 	.word	0x2000050a
 8013f48:	20000500 	.word	0x20000500
 8013f4c:	200004e0 	.word	0x200004e0
 8013f50:	08021d9c 	.word	0x08021d9c
 8013f54:	0802217c 	.word	0x0802217c
 8013f58:	08021de8 	.word	0x08021de8
 8013f5c:	080221b8 	.word	0x080221b8
 8013f60:	20000510 	.word	0x20000510
 8013f64:	2000050d 	.word	0x2000050d
 8013f68:	080221d8 	.word	0x080221d8
            } else {
              recv_data = cseg->p;
 8013f6c:	68bb      	ldr	r3, [r7, #8]
 8013f6e:	685b      	ldr	r3, [r3, #4]
 8013f70:	4a70      	ldr	r2, [pc, #448]	; (8014134 <tcp_receive+0xcf4>)
 8013f72:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8013f74:	68bb      	ldr	r3, [r7, #8]
 8013f76:	2200      	movs	r2, #0
 8013f78:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8013f7a:	68bb      	ldr	r3, [r7, #8]
 8013f7c:	68db      	ldr	r3, [r3, #12]
 8013f7e:	899b      	ldrh	r3, [r3, #12]
 8013f80:	b29b      	uxth	r3, r3
 8013f82:	4618      	mov	r0, r3
 8013f84:	f7fa fed2 	bl	800ed2c <lwip_htons>
 8013f88:	4603      	mov	r3, r0
 8013f8a:	b2db      	uxtb	r3, r3
 8013f8c:	f003 0301 	and.w	r3, r3, #1
 8013f90:	2b00      	cmp	r3, #0
 8013f92:	d00d      	beq.n	8013fb0 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8013f94:	4b68      	ldr	r3, [pc, #416]	; (8014138 <tcp_receive+0xcf8>)
 8013f96:	781b      	ldrb	r3, [r3, #0]
 8013f98:	f043 0320 	orr.w	r3, r3, #32
 8013f9c:	b2da      	uxtb	r2, r3
 8013f9e:	4b66      	ldr	r3, [pc, #408]	; (8014138 <tcp_receive+0xcf8>)
 8013fa0:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8013fa2:	687b      	ldr	r3, [r7, #4]
 8013fa4:	7d1b      	ldrb	r3, [r3, #20]
 8013fa6:	2b04      	cmp	r3, #4
 8013fa8:	d102      	bne.n	8013fb0 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 8013faa:	687b      	ldr	r3, [r7, #4]
 8013fac:	2207      	movs	r2, #7
 8013fae:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8013fb0:	68bb      	ldr	r3, [r7, #8]
 8013fb2:	681a      	ldr	r2, [r3, #0]
 8013fb4:	687b      	ldr	r3, [r7, #4]
 8013fb6:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8013fb8:	68b8      	ldr	r0, [r7, #8]
 8013fba:	f7fd fbd6 	bl	801176a <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8013fbe:	687b      	ldr	r3, [r7, #4]
 8013fc0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013fc2:	2b00      	cmp	r3, #0
 8013fc4:	d008      	beq.n	8013fd8 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8013fc6:	687b      	ldr	r3, [r7, #4]
 8013fc8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013fca:	68db      	ldr	r3, [r3, #12]
 8013fcc:	685a      	ldr	r2, [r3, #4]
 8013fce:	687b      	ldr	r3, [r7, #4]
 8013fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8013fd2:	429a      	cmp	r2, r3
 8013fd4:	f43f af43 	beq.w	8013e5e <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8013fd8:	687b      	ldr	r3, [r7, #4]
 8013fda:	8b5b      	ldrh	r3, [r3, #26]
 8013fdc:	f003 0301 	and.w	r3, r3, #1
 8013fe0:	2b00      	cmp	r3, #0
 8013fe2:	d00e      	beq.n	8014002 <tcp_receive+0xbc2>
 8013fe4:	687b      	ldr	r3, [r7, #4]
 8013fe6:	8b5b      	ldrh	r3, [r3, #26]
 8013fe8:	f023 0301 	bic.w	r3, r3, #1
 8013fec:	b29a      	uxth	r2, r3
 8013fee:	687b      	ldr	r3, [r7, #4]
 8013ff0:	835a      	strh	r2, [r3, #26]
 8013ff2:	687b      	ldr	r3, [r7, #4]
 8013ff4:	8b5b      	ldrh	r3, [r3, #26]
 8013ff6:	f043 0302 	orr.w	r3, r3, #2
 8013ffa:	b29a      	uxth	r2, r3
 8013ffc:	687b      	ldr	r3, [r7, #4]
 8013ffe:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8014000:	e188      	b.n	8014314 <tcp_receive+0xed4>
        tcp_ack(pcb);
 8014002:	687b      	ldr	r3, [r7, #4]
 8014004:	8b5b      	ldrh	r3, [r3, #26]
 8014006:	f043 0301 	orr.w	r3, r3, #1
 801400a:	b29a      	uxth	r2, r3
 801400c:	687b      	ldr	r3, [r7, #4]
 801400e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8014010:	e180      	b.n	8014314 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8014012:	687b      	ldr	r3, [r7, #4]
 8014014:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014016:	2b00      	cmp	r3, #0
 8014018:	d106      	bne.n	8014028 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 801401a:	4848      	ldr	r0, [pc, #288]	; (801413c <tcp_receive+0xcfc>)
 801401c:	f7fd fbbe 	bl	801179c <tcp_seg_copy>
 8014020:	4602      	mov	r2, r0
 8014022:	687b      	ldr	r3, [r7, #4]
 8014024:	675a      	str	r2, [r3, #116]	; 0x74
 8014026:	e16d      	b.n	8014304 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8014028:	2300      	movs	r3, #0
 801402a:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801402c:	687b      	ldr	r3, [r7, #4]
 801402e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014030:	63bb      	str	r3, [r7, #56]	; 0x38
 8014032:	e157      	b.n	80142e4 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 8014034:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014036:	68db      	ldr	r3, [r3, #12]
 8014038:	685a      	ldr	r2, [r3, #4]
 801403a:	4b41      	ldr	r3, [pc, #260]	; (8014140 <tcp_receive+0xd00>)
 801403c:	681b      	ldr	r3, [r3, #0]
 801403e:	429a      	cmp	r2, r3
 8014040:	d11d      	bne.n	801407e <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8014042:	4b3e      	ldr	r3, [pc, #248]	; (801413c <tcp_receive+0xcfc>)
 8014044:	891a      	ldrh	r2, [r3, #8]
 8014046:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014048:	891b      	ldrh	r3, [r3, #8]
 801404a:	429a      	cmp	r2, r3
 801404c:	f240 814f 	bls.w	80142ee <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8014050:	483a      	ldr	r0, [pc, #232]	; (801413c <tcp_receive+0xcfc>)
 8014052:	f7fd fba3 	bl	801179c <tcp_seg_copy>
 8014056:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8014058:	697b      	ldr	r3, [r7, #20]
 801405a:	2b00      	cmp	r3, #0
 801405c:	f000 8149 	beq.w	80142f2 <tcp_receive+0xeb2>
                  if (prev != NULL) {
 8014060:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014062:	2b00      	cmp	r3, #0
 8014064:	d003      	beq.n	801406e <tcp_receive+0xc2e>
                    prev->next = cseg;
 8014066:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014068:	697a      	ldr	r2, [r7, #20]
 801406a:	601a      	str	r2, [r3, #0]
 801406c:	e002      	b.n	8014074 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 801406e:	687b      	ldr	r3, [r7, #4]
 8014070:	697a      	ldr	r2, [r7, #20]
 8014072:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8014074:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8014076:	6978      	ldr	r0, [r7, #20]
 8014078:	f7ff f8de 	bl	8013238 <tcp_oos_insert_segment>
                }
                break;
 801407c:	e139      	b.n	80142f2 <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 801407e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014080:	2b00      	cmp	r3, #0
 8014082:	d117      	bne.n	80140b4 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8014084:	4b2e      	ldr	r3, [pc, #184]	; (8014140 <tcp_receive+0xd00>)
 8014086:	681a      	ldr	r2, [r3, #0]
 8014088:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801408a:	68db      	ldr	r3, [r3, #12]
 801408c:	685b      	ldr	r3, [r3, #4]
 801408e:	1ad3      	subs	r3, r2, r3
 8014090:	2b00      	cmp	r3, #0
 8014092:	da57      	bge.n	8014144 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8014094:	4829      	ldr	r0, [pc, #164]	; (801413c <tcp_receive+0xcfc>)
 8014096:	f7fd fb81 	bl	801179c <tcp_seg_copy>
 801409a:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 801409c:	69bb      	ldr	r3, [r7, #24]
 801409e:	2b00      	cmp	r3, #0
 80140a0:	f000 8129 	beq.w	80142f6 <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 80140a4:	687b      	ldr	r3, [r7, #4]
 80140a6:	69ba      	ldr	r2, [r7, #24]
 80140a8:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 80140aa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80140ac:	69b8      	ldr	r0, [r7, #24]
 80140ae:	f7ff f8c3 	bl	8013238 <tcp_oos_insert_segment>
                  }
                  break;
 80140b2:	e120      	b.n	80142f6 <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 80140b4:	4b22      	ldr	r3, [pc, #136]	; (8014140 <tcp_receive+0xd00>)
 80140b6:	681a      	ldr	r2, [r3, #0]
 80140b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80140ba:	68db      	ldr	r3, [r3, #12]
 80140bc:	685b      	ldr	r3, [r3, #4]
 80140be:	1ad3      	subs	r3, r2, r3
 80140c0:	3b01      	subs	r3, #1
 80140c2:	2b00      	cmp	r3, #0
 80140c4:	db3e      	blt.n	8014144 <tcp_receive+0xd04>
 80140c6:	4b1e      	ldr	r3, [pc, #120]	; (8014140 <tcp_receive+0xd00>)
 80140c8:	681a      	ldr	r2, [r3, #0]
 80140ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80140cc:	68db      	ldr	r3, [r3, #12]
 80140ce:	685b      	ldr	r3, [r3, #4]
 80140d0:	1ad3      	subs	r3, r2, r3
 80140d2:	3301      	adds	r3, #1
 80140d4:	2b00      	cmp	r3, #0
 80140d6:	dc35      	bgt.n	8014144 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80140d8:	4818      	ldr	r0, [pc, #96]	; (801413c <tcp_receive+0xcfc>)
 80140da:	f7fd fb5f 	bl	801179c <tcp_seg_copy>
 80140de:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 80140e0:	69fb      	ldr	r3, [r7, #28]
 80140e2:	2b00      	cmp	r3, #0
 80140e4:	f000 8109 	beq.w	80142fa <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 80140e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80140ea:	68db      	ldr	r3, [r3, #12]
 80140ec:	685b      	ldr	r3, [r3, #4]
 80140ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80140f0:	8912      	ldrh	r2, [r2, #8]
 80140f2:	441a      	add	r2, r3
 80140f4:	4b12      	ldr	r3, [pc, #72]	; (8014140 <tcp_receive+0xd00>)
 80140f6:	681b      	ldr	r3, [r3, #0]
 80140f8:	1ad3      	subs	r3, r2, r3
 80140fa:	2b00      	cmp	r3, #0
 80140fc:	dd12      	ble.n	8014124 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 80140fe:	4b10      	ldr	r3, [pc, #64]	; (8014140 <tcp_receive+0xd00>)
 8014100:	681b      	ldr	r3, [r3, #0]
 8014102:	b29a      	uxth	r2, r3
 8014104:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014106:	68db      	ldr	r3, [r3, #12]
 8014108:	685b      	ldr	r3, [r3, #4]
 801410a:	b29b      	uxth	r3, r3
 801410c:	1ad3      	subs	r3, r2, r3
 801410e:	b29a      	uxth	r2, r3
 8014110:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014112:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8014114:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014116:	685a      	ldr	r2, [r3, #4]
 8014118:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801411a:	891b      	ldrh	r3, [r3, #8]
 801411c:	4619      	mov	r1, r3
 801411e:	4610      	mov	r0, r2
 8014120:	f7fb ff1a 	bl	800ff58 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8014124:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014126:	69fa      	ldr	r2, [r7, #28]
 8014128:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 801412a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801412c:	69f8      	ldr	r0, [r7, #28]
 801412e:	f7ff f883 	bl	8013238 <tcp_oos_insert_segment>
                  }
                  break;
 8014132:	e0e2      	b.n	80142fa <tcp_receive+0xeba>
 8014134:	20000510 	.word	0x20000510
 8014138:	2000050d 	.word	0x2000050d
 801413c:	200004e0 	.word	0x200004e0
 8014140:	20000500 	.word	0x20000500
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8014144:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014146:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8014148:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801414a:	681b      	ldr	r3, [r3, #0]
 801414c:	2b00      	cmp	r3, #0
 801414e:	f040 80c6 	bne.w	80142de <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8014152:	4b80      	ldr	r3, [pc, #512]	; (8014354 <tcp_receive+0xf14>)
 8014154:	681a      	ldr	r2, [r3, #0]
 8014156:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014158:	68db      	ldr	r3, [r3, #12]
 801415a:	685b      	ldr	r3, [r3, #4]
 801415c:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 801415e:	2b00      	cmp	r3, #0
 8014160:	f340 80bd 	ble.w	80142de <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8014164:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014166:	68db      	ldr	r3, [r3, #12]
 8014168:	899b      	ldrh	r3, [r3, #12]
 801416a:	b29b      	uxth	r3, r3
 801416c:	4618      	mov	r0, r3
 801416e:	f7fa fddd 	bl	800ed2c <lwip_htons>
 8014172:	4603      	mov	r3, r0
 8014174:	b2db      	uxtb	r3, r3
 8014176:	f003 0301 	and.w	r3, r3, #1
 801417a:	2b00      	cmp	r3, #0
 801417c:	f040 80bf 	bne.w	80142fe <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8014180:	4875      	ldr	r0, [pc, #468]	; (8014358 <tcp_receive+0xf18>)
 8014182:	f7fd fb0b 	bl	801179c <tcp_seg_copy>
 8014186:	4602      	mov	r2, r0
 8014188:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801418a:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 801418c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801418e:	681b      	ldr	r3, [r3, #0]
 8014190:	2b00      	cmp	r3, #0
 8014192:	f000 80b6 	beq.w	8014302 <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8014196:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014198:	68db      	ldr	r3, [r3, #12]
 801419a:	685b      	ldr	r3, [r3, #4]
 801419c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801419e:	8912      	ldrh	r2, [r2, #8]
 80141a0:	441a      	add	r2, r3
 80141a2:	4b6c      	ldr	r3, [pc, #432]	; (8014354 <tcp_receive+0xf14>)
 80141a4:	681b      	ldr	r3, [r3, #0]
 80141a6:	1ad3      	subs	r3, r2, r3
 80141a8:	2b00      	cmp	r3, #0
 80141aa:	dd12      	ble.n	80141d2 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 80141ac:	4b69      	ldr	r3, [pc, #420]	; (8014354 <tcp_receive+0xf14>)
 80141ae:	681b      	ldr	r3, [r3, #0]
 80141b0:	b29a      	uxth	r2, r3
 80141b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80141b4:	68db      	ldr	r3, [r3, #12]
 80141b6:	685b      	ldr	r3, [r3, #4]
 80141b8:	b29b      	uxth	r3, r3
 80141ba:	1ad3      	subs	r3, r2, r3
 80141bc:	b29a      	uxth	r2, r3
 80141be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80141c0:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 80141c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80141c4:	685a      	ldr	r2, [r3, #4]
 80141c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80141c8:	891b      	ldrh	r3, [r3, #8]
 80141ca:	4619      	mov	r1, r3
 80141cc:	4610      	mov	r0, r2
 80141ce:	f7fb fec3 	bl	800ff58 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 80141d2:	4b62      	ldr	r3, [pc, #392]	; (801435c <tcp_receive+0xf1c>)
 80141d4:	881b      	ldrh	r3, [r3, #0]
 80141d6:	461a      	mov	r2, r3
 80141d8:	4b5e      	ldr	r3, [pc, #376]	; (8014354 <tcp_receive+0xf14>)
 80141da:	681b      	ldr	r3, [r3, #0]
 80141dc:	441a      	add	r2, r3
 80141de:	687b      	ldr	r3, [r7, #4]
 80141e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80141e2:	6879      	ldr	r1, [r7, #4]
 80141e4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80141e6:	440b      	add	r3, r1
 80141e8:	1ad3      	subs	r3, r2, r3
 80141ea:	2b00      	cmp	r3, #0
 80141ec:	f340 8089 	ble.w	8014302 <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 80141f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80141f2:	681b      	ldr	r3, [r3, #0]
 80141f4:	68db      	ldr	r3, [r3, #12]
 80141f6:	899b      	ldrh	r3, [r3, #12]
 80141f8:	b29b      	uxth	r3, r3
 80141fa:	4618      	mov	r0, r3
 80141fc:	f7fa fd96 	bl	800ed2c <lwip_htons>
 8014200:	4603      	mov	r3, r0
 8014202:	b2db      	uxtb	r3, r3
 8014204:	f003 0301 	and.w	r3, r3, #1
 8014208:	2b00      	cmp	r3, #0
 801420a:	d022      	beq.n	8014252 <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 801420c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801420e:	681b      	ldr	r3, [r3, #0]
 8014210:	68db      	ldr	r3, [r3, #12]
 8014212:	899b      	ldrh	r3, [r3, #12]
 8014214:	b29b      	uxth	r3, r3
 8014216:	b21b      	sxth	r3, r3
 8014218:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801421c:	b21c      	sxth	r4, r3
 801421e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014220:	681b      	ldr	r3, [r3, #0]
 8014222:	68db      	ldr	r3, [r3, #12]
 8014224:	899b      	ldrh	r3, [r3, #12]
 8014226:	b29b      	uxth	r3, r3
 8014228:	4618      	mov	r0, r3
 801422a:	f7fa fd7f 	bl	800ed2c <lwip_htons>
 801422e:	4603      	mov	r3, r0
 8014230:	b2db      	uxtb	r3, r3
 8014232:	b29b      	uxth	r3, r3
 8014234:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8014238:	b29b      	uxth	r3, r3
 801423a:	4618      	mov	r0, r3
 801423c:	f7fa fd76 	bl	800ed2c <lwip_htons>
 8014240:	4603      	mov	r3, r0
 8014242:	b21b      	sxth	r3, r3
 8014244:	4323      	orrs	r3, r4
 8014246:	b21a      	sxth	r2, r3
 8014248:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801424a:	681b      	ldr	r3, [r3, #0]
 801424c:	68db      	ldr	r3, [r3, #12]
 801424e:	b292      	uxth	r2, r2
 8014250:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8014252:	687b      	ldr	r3, [r7, #4]
 8014254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014256:	b29a      	uxth	r2, r3
 8014258:	687b      	ldr	r3, [r7, #4]
 801425a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801425c:	4413      	add	r3, r2
 801425e:	b299      	uxth	r1, r3
 8014260:	4b3c      	ldr	r3, [pc, #240]	; (8014354 <tcp_receive+0xf14>)
 8014262:	681b      	ldr	r3, [r3, #0]
 8014264:	b29a      	uxth	r2, r3
 8014266:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014268:	681b      	ldr	r3, [r3, #0]
 801426a:	1a8a      	subs	r2, r1, r2
 801426c:	b292      	uxth	r2, r2
 801426e:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8014270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014272:	681b      	ldr	r3, [r3, #0]
 8014274:	685a      	ldr	r2, [r3, #4]
 8014276:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014278:	681b      	ldr	r3, [r3, #0]
 801427a:	891b      	ldrh	r3, [r3, #8]
 801427c:	4619      	mov	r1, r3
 801427e:	4610      	mov	r0, r2
 8014280:	f7fb fe6a 	bl	800ff58 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8014284:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014286:	681b      	ldr	r3, [r3, #0]
 8014288:	891c      	ldrh	r4, [r3, #8]
 801428a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801428c:	681b      	ldr	r3, [r3, #0]
 801428e:	68db      	ldr	r3, [r3, #12]
 8014290:	899b      	ldrh	r3, [r3, #12]
 8014292:	b29b      	uxth	r3, r3
 8014294:	4618      	mov	r0, r3
 8014296:	f7fa fd49 	bl	800ed2c <lwip_htons>
 801429a:	4603      	mov	r3, r0
 801429c:	b2db      	uxtb	r3, r3
 801429e:	f003 0303 	and.w	r3, r3, #3
 80142a2:	2b00      	cmp	r3, #0
 80142a4:	d001      	beq.n	80142aa <tcp_receive+0xe6a>
 80142a6:	2301      	movs	r3, #1
 80142a8:	e000      	b.n	80142ac <tcp_receive+0xe6c>
 80142aa:	2300      	movs	r3, #0
 80142ac:	4423      	add	r3, r4
 80142ae:	b29a      	uxth	r2, r3
 80142b0:	4b2a      	ldr	r3, [pc, #168]	; (801435c <tcp_receive+0xf1c>)
 80142b2:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80142b4:	4b29      	ldr	r3, [pc, #164]	; (801435c <tcp_receive+0xf1c>)
 80142b6:	881b      	ldrh	r3, [r3, #0]
 80142b8:	461a      	mov	r2, r3
 80142ba:	4b26      	ldr	r3, [pc, #152]	; (8014354 <tcp_receive+0xf14>)
 80142bc:	681b      	ldr	r3, [r3, #0]
 80142be:	441a      	add	r2, r3
 80142c0:	687b      	ldr	r3, [r7, #4]
 80142c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80142c4:	6879      	ldr	r1, [r7, #4]
 80142c6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80142c8:	440b      	add	r3, r1
 80142ca:	429a      	cmp	r2, r3
 80142cc:	d019      	beq.n	8014302 <tcp_receive+0xec2>
 80142ce:	4b24      	ldr	r3, [pc, #144]	; (8014360 <tcp_receive+0xf20>)
 80142d0:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 80142d4:	4923      	ldr	r1, [pc, #140]	; (8014364 <tcp_receive+0xf24>)
 80142d6:	4824      	ldr	r0, [pc, #144]	; (8014368 <tcp_receive+0xf28>)
 80142d8:	f007 f842 	bl	801b360 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 80142dc:	e011      	b.n	8014302 <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80142de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80142e0:	681b      	ldr	r3, [r3, #0]
 80142e2:	63bb      	str	r3, [r7, #56]	; 0x38
 80142e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80142e6:	2b00      	cmp	r3, #0
 80142e8:	f47f aea4 	bne.w	8014034 <tcp_receive+0xbf4>
 80142ec:	e00a      	b.n	8014304 <tcp_receive+0xec4>
                break;
 80142ee:	bf00      	nop
 80142f0:	e008      	b.n	8014304 <tcp_receive+0xec4>
                break;
 80142f2:	bf00      	nop
 80142f4:	e006      	b.n	8014304 <tcp_receive+0xec4>
                  break;
 80142f6:	bf00      	nop
 80142f8:	e004      	b.n	8014304 <tcp_receive+0xec4>
                  break;
 80142fa:	bf00      	nop
 80142fc:	e002      	b.n	8014304 <tcp_receive+0xec4>
                  break;
 80142fe:	bf00      	nop
 8014300:	e000      	b.n	8014304 <tcp_receive+0xec4>
                break;
 8014302:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8014304:	6878      	ldr	r0, [r7, #4]
 8014306:	f001 fa31 	bl	801576c <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 801430a:	e003      	b.n	8014314 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 801430c:	6878      	ldr	r0, [r7, #4]
 801430e:	f001 fa2d 	bl	801576c <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8014312:	e01a      	b.n	801434a <tcp_receive+0xf0a>
 8014314:	e019      	b.n	801434a <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8014316:	4b0f      	ldr	r3, [pc, #60]	; (8014354 <tcp_receive+0xf14>)
 8014318:	681a      	ldr	r2, [r3, #0]
 801431a:	687b      	ldr	r3, [r7, #4]
 801431c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801431e:	1ad3      	subs	r3, r2, r3
 8014320:	2b00      	cmp	r3, #0
 8014322:	db0a      	blt.n	801433a <tcp_receive+0xefa>
 8014324:	4b0b      	ldr	r3, [pc, #44]	; (8014354 <tcp_receive+0xf14>)
 8014326:	681a      	ldr	r2, [r3, #0]
 8014328:	687b      	ldr	r3, [r7, #4]
 801432a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801432c:	6879      	ldr	r1, [r7, #4]
 801432e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8014330:	440b      	add	r3, r1
 8014332:	1ad3      	subs	r3, r2, r3
 8014334:	3301      	adds	r3, #1
 8014336:	2b00      	cmp	r3, #0
 8014338:	dd07      	ble.n	801434a <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 801433a:	687b      	ldr	r3, [r7, #4]
 801433c:	8b5b      	ldrh	r3, [r3, #26]
 801433e:	f043 0302 	orr.w	r3, r3, #2
 8014342:	b29a      	uxth	r2, r3
 8014344:	687b      	ldr	r3, [r7, #4]
 8014346:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8014348:	e7ff      	b.n	801434a <tcp_receive+0xf0a>
 801434a:	bf00      	nop
 801434c:	3750      	adds	r7, #80	; 0x50
 801434e:	46bd      	mov	sp, r7
 8014350:	bdb0      	pop	{r4, r5, r7, pc}
 8014352:	bf00      	nop
 8014354:	20000500 	.word	0x20000500
 8014358:	200004e0 	.word	0x200004e0
 801435c:	2000050a 	.word	0x2000050a
 8014360:	08021d9c 	.word	0x08021d9c
 8014364:	08022144 	.word	0x08022144
 8014368:	08021de8 	.word	0x08021de8

0801436c <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 801436c:	b480      	push	{r7}
 801436e:	b083      	sub	sp, #12
 8014370:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8014372:	4b15      	ldr	r3, [pc, #84]	; (80143c8 <tcp_get_next_optbyte+0x5c>)
 8014374:	881b      	ldrh	r3, [r3, #0]
 8014376:	1c5a      	adds	r2, r3, #1
 8014378:	b291      	uxth	r1, r2
 801437a:	4a13      	ldr	r2, [pc, #76]	; (80143c8 <tcp_get_next_optbyte+0x5c>)
 801437c:	8011      	strh	r1, [r2, #0]
 801437e:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8014380:	4b12      	ldr	r3, [pc, #72]	; (80143cc <tcp_get_next_optbyte+0x60>)
 8014382:	681b      	ldr	r3, [r3, #0]
 8014384:	2b00      	cmp	r3, #0
 8014386:	d004      	beq.n	8014392 <tcp_get_next_optbyte+0x26>
 8014388:	4b11      	ldr	r3, [pc, #68]	; (80143d0 <tcp_get_next_optbyte+0x64>)
 801438a:	881b      	ldrh	r3, [r3, #0]
 801438c:	88fa      	ldrh	r2, [r7, #6]
 801438e:	429a      	cmp	r2, r3
 8014390:	d208      	bcs.n	80143a4 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8014392:	4b10      	ldr	r3, [pc, #64]	; (80143d4 <tcp_get_next_optbyte+0x68>)
 8014394:	681b      	ldr	r3, [r3, #0]
 8014396:	3314      	adds	r3, #20
 8014398:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 801439a:	88fb      	ldrh	r3, [r7, #6]
 801439c:	683a      	ldr	r2, [r7, #0]
 801439e:	4413      	add	r3, r2
 80143a0:	781b      	ldrb	r3, [r3, #0]
 80143a2:	e00b      	b.n	80143bc <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 80143a4:	88fb      	ldrh	r3, [r7, #6]
 80143a6:	b2da      	uxtb	r2, r3
 80143a8:	4b09      	ldr	r3, [pc, #36]	; (80143d0 <tcp_get_next_optbyte+0x64>)
 80143aa:	881b      	ldrh	r3, [r3, #0]
 80143ac:	b2db      	uxtb	r3, r3
 80143ae:	1ad3      	subs	r3, r2, r3
 80143b0:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 80143b2:	4b06      	ldr	r3, [pc, #24]	; (80143cc <tcp_get_next_optbyte+0x60>)
 80143b4:	681a      	ldr	r2, [r3, #0]
 80143b6:	797b      	ldrb	r3, [r7, #5]
 80143b8:	4413      	add	r3, r2
 80143ba:	781b      	ldrb	r3, [r3, #0]
  }
}
 80143bc:	4618      	mov	r0, r3
 80143be:	370c      	adds	r7, #12
 80143c0:	46bd      	mov	sp, r7
 80143c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143c6:	4770      	bx	lr
 80143c8:	200004fc 	.word	0x200004fc
 80143cc:	200004f8 	.word	0x200004f8
 80143d0:	200004f6 	.word	0x200004f6
 80143d4:	200004f0 	.word	0x200004f0

080143d8 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 80143d8:	b580      	push	{r7, lr}
 80143da:	b084      	sub	sp, #16
 80143dc:	af00      	add	r7, sp, #0
 80143de:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 80143e0:	687b      	ldr	r3, [r7, #4]
 80143e2:	2b00      	cmp	r3, #0
 80143e4:	d106      	bne.n	80143f4 <tcp_parseopt+0x1c>
 80143e6:	4b32      	ldr	r3, [pc, #200]	; (80144b0 <tcp_parseopt+0xd8>)
 80143e8:	f240 727d 	movw	r2, #1917	; 0x77d
 80143ec:	4931      	ldr	r1, [pc, #196]	; (80144b4 <tcp_parseopt+0xdc>)
 80143ee:	4832      	ldr	r0, [pc, #200]	; (80144b8 <tcp_parseopt+0xe0>)
 80143f0:	f006 ffb6 	bl	801b360 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 80143f4:	4b31      	ldr	r3, [pc, #196]	; (80144bc <tcp_parseopt+0xe4>)
 80143f6:	881b      	ldrh	r3, [r3, #0]
 80143f8:	2b00      	cmp	r3, #0
 80143fa:	d055      	beq.n	80144a8 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80143fc:	4b30      	ldr	r3, [pc, #192]	; (80144c0 <tcp_parseopt+0xe8>)
 80143fe:	2200      	movs	r2, #0
 8014400:	801a      	strh	r2, [r3, #0]
 8014402:	e045      	b.n	8014490 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 8014404:	f7ff ffb2 	bl	801436c <tcp_get_next_optbyte>
 8014408:	4603      	mov	r3, r0
 801440a:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 801440c:	7bfb      	ldrb	r3, [r7, #15]
 801440e:	2b02      	cmp	r3, #2
 8014410:	d006      	beq.n	8014420 <tcp_parseopt+0x48>
 8014412:	2b02      	cmp	r3, #2
 8014414:	dc2b      	bgt.n	801446e <tcp_parseopt+0x96>
 8014416:	2b00      	cmp	r3, #0
 8014418:	d041      	beq.n	801449e <tcp_parseopt+0xc6>
 801441a:	2b01      	cmp	r3, #1
 801441c:	d127      	bne.n	801446e <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 801441e:	e037      	b.n	8014490 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8014420:	f7ff ffa4 	bl	801436c <tcp_get_next_optbyte>
 8014424:	4603      	mov	r3, r0
 8014426:	2b04      	cmp	r3, #4
 8014428:	d13b      	bne.n	80144a2 <tcp_parseopt+0xca>
 801442a:	4b25      	ldr	r3, [pc, #148]	; (80144c0 <tcp_parseopt+0xe8>)
 801442c:	881b      	ldrh	r3, [r3, #0]
 801442e:	3301      	adds	r3, #1
 8014430:	4a22      	ldr	r2, [pc, #136]	; (80144bc <tcp_parseopt+0xe4>)
 8014432:	8812      	ldrh	r2, [r2, #0]
 8014434:	4293      	cmp	r3, r2
 8014436:	da34      	bge.n	80144a2 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8014438:	f7ff ff98 	bl	801436c <tcp_get_next_optbyte>
 801443c:	4603      	mov	r3, r0
 801443e:	b29b      	uxth	r3, r3
 8014440:	021b      	lsls	r3, r3, #8
 8014442:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8014444:	f7ff ff92 	bl	801436c <tcp_get_next_optbyte>
 8014448:	4603      	mov	r3, r0
 801444a:	b29a      	uxth	r2, r3
 801444c:	89bb      	ldrh	r3, [r7, #12]
 801444e:	4313      	orrs	r3, r2
 8014450:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8014452:	89bb      	ldrh	r3, [r7, #12]
 8014454:	f5b3 7fe6 	cmp.w	r3, #460	; 0x1cc
 8014458:	d804      	bhi.n	8014464 <tcp_parseopt+0x8c>
 801445a:	89bb      	ldrh	r3, [r7, #12]
 801445c:	2b00      	cmp	r3, #0
 801445e:	d001      	beq.n	8014464 <tcp_parseopt+0x8c>
 8014460:	89ba      	ldrh	r2, [r7, #12]
 8014462:	e001      	b.n	8014468 <tcp_parseopt+0x90>
 8014464:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8014468:	687b      	ldr	r3, [r7, #4]
 801446a:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 801446c:	e010      	b.n	8014490 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 801446e:	f7ff ff7d 	bl	801436c <tcp_get_next_optbyte>
 8014472:	4603      	mov	r3, r0
 8014474:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8014476:	7afb      	ldrb	r3, [r7, #11]
 8014478:	2b01      	cmp	r3, #1
 801447a:	d914      	bls.n	80144a6 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 801447c:	7afb      	ldrb	r3, [r7, #11]
 801447e:	b29a      	uxth	r2, r3
 8014480:	4b0f      	ldr	r3, [pc, #60]	; (80144c0 <tcp_parseopt+0xe8>)
 8014482:	881b      	ldrh	r3, [r3, #0]
 8014484:	4413      	add	r3, r2
 8014486:	b29b      	uxth	r3, r3
 8014488:	3b02      	subs	r3, #2
 801448a:	b29a      	uxth	r2, r3
 801448c:	4b0c      	ldr	r3, [pc, #48]	; (80144c0 <tcp_parseopt+0xe8>)
 801448e:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8014490:	4b0b      	ldr	r3, [pc, #44]	; (80144c0 <tcp_parseopt+0xe8>)
 8014492:	881a      	ldrh	r2, [r3, #0]
 8014494:	4b09      	ldr	r3, [pc, #36]	; (80144bc <tcp_parseopt+0xe4>)
 8014496:	881b      	ldrh	r3, [r3, #0]
 8014498:	429a      	cmp	r2, r3
 801449a:	d3b3      	bcc.n	8014404 <tcp_parseopt+0x2c>
 801449c:	e004      	b.n	80144a8 <tcp_parseopt+0xd0>
          return;
 801449e:	bf00      	nop
 80144a0:	e002      	b.n	80144a8 <tcp_parseopt+0xd0>
            return;
 80144a2:	bf00      	nop
 80144a4:	e000      	b.n	80144a8 <tcp_parseopt+0xd0>
            return;
 80144a6:	bf00      	nop
      }
    }
  }
}
 80144a8:	3710      	adds	r7, #16
 80144aa:	46bd      	mov	sp, r7
 80144ac:	bd80      	pop	{r7, pc}
 80144ae:	bf00      	nop
 80144b0:	08021d9c 	.word	0x08021d9c
 80144b4:	08022200 	.word	0x08022200
 80144b8:	08021de8 	.word	0x08021de8
 80144bc:	200004f4 	.word	0x200004f4
 80144c0:	200004fc 	.word	0x200004fc

080144c4 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 80144c4:	b480      	push	{r7}
 80144c6:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 80144c8:	4b05      	ldr	r3, [pc, #20]	; (80144e0 <tcp_trigger_input_pcb_close+0x1c>)
 80144ca:	781b      	ldrb	r3, [r3, #0]
 80144cc:	f043 0310 	orr.w	r3, r3, #16
 80144d0:	b2da      	uxtb	r2, r3
 80144d2:	4b03      	ldr	r3, [pc, #12]	; (80144e0 <tcp_trigger_input_pcb_close+0x1c>)
 80144d4:	701a      	strb	r2, [r3, #0]
}
 80144d6:	bf00      	nop
 80144d8:	46bd      	mov	sp, r7
 80144da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144de:	4770      	bx	lr
 80144e0:	2000050d 	.word	0x2000050d

080144e4 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 80144e4:	b580      	push	{r7, lr}
 80144e6:	b084      	sub	sp, #16
 80144e8:	af00      	add	r7, sp, #0
 80144ea:	60f8      	str	r0, [r7, #12]
 80144ec:	60b9      	str	r1, [r7, #8]
 80144ee:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 80144f0:	68fb      	ldr	r3, [r7, #12]
 80144f2:	2b00      	cmp	r3, #0
 80144f4:	d00a      	beq.n	801450c <tcp_route+0x28>
 80144f6:	68fb      	ldr	r3, [r7, #12]
 80144f8:	7a1b      	ldrb	r3, [r3, #8]
 80144fa:	2b00      	cmp	r3, #0
 80144fc:	d006      	beq.n	801450c <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 80144fe:	68fb      	ldr	r3, [r7, #12]
 8014500:	7a1b      	ldrb	r3, [r3, #8]
 8014502:	4618      	mov	r0, r3
 8014504:	f7fb fb6e 	bl	800fbe4 <netif_get_by_index>
 8014508:	4603      	mov	r3, r0
 801450a:	e003      	b.n	8014514 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 801450c:	6878      	ldr	r0, [r7, #4]
 801450e:	f004 ff95 	bl	801943c <ip4_route>
 8014512:	4603      	mov	r3, r0
  }
}
 8014514:	4618      	mov	r0, r3
 8014516:	3710      	adds	r7, #16
 8014518:	46bd      	mov	sp, r7
 801451a:	bd80      	pop	{r7, pc}

0801451c <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 801451c:	b590      	push	{r4, r7, lr}
 801451e:	b087      	sub	sp, #28
 8014520:	af00      	add	r7, sp, #0
 8014522:	60f8      	str	r0, [r7, #12]
 8014524:	60b9      	str	r1, [r7, #8]
 8014526:	603b      	str	r3, [r7, #0]
 8014528:	4613      	mov	r3, r2
 801452a:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 801452c:	68fb      	ldr	r3, [r7, #12]
 801452e:	2b00      	cmp	r3, #0
 8014530:	d105      	bne.n	801453e <tcp_create_segment+0x22>
 8014532:	4b44      	ldr	r3, [pc, #272]	; (8014644 <tcp_create_segment+0x128>)
 8014534:	22a3      	movs	r2, #163	; 0xa3
 8014536:	4944      	ldr	r1, [pc, #272]	; (8014648 <tcp_create_segment+0x12c>)
 8014538:	4844      	ldr	r0, [pc, #272]	; (801464c <tcp_create_segment+0x130>)
 801453a:	f006 ff11 	bl	801b360 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 801453e:	68bb      	ldr	r3, [r7, #8]
 8014540:	2b00      	cmp	r3, #0
 8014542:	d105      	bne.n	8014550 <tcp_create_segment+0x34>
 8014544:	4b3f      	ldr	r3, [pc, #252]	; (8014644 <tcp_create_segment+0x128>)
 8014546:	22a4      	movs	r2, #164	; 0xa4
 8014548:	4941      	ldr	r1, [pc, #260]	; (8014650 <tcp_create_segment+0x134>)
 801454a:	4840      	ldr	r0, [pc, #256]	; (801464c <tcp_create_segment+0x130>)
 801454c:	f006 ff08 	bl	801b360 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8014550:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8014554:	009b      	lsls	r3, r3, #2
 8014556:	b2db      	uxtb	r3, r3
 8014558:	f003 0304 	and.w	r3, r3, #4
 801455c:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 801455e:	2003      	movs	r0, #3
 8014560:	f7fb f83a 	bl	800f5d8 <memp_malloc>
 8014564:	6138      	str	r0, [r7, #16]
 8014566:	693b      	ldr	r3, [r7, #16]
 8014568:	2b00      	cmp	r3, #0
 801456a:	d104      	bne.n	8014576 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 801456c:	68b8      	ldr	r0, [r7, #8]
 801456e:	f7fb fe79 	bl	8010264 <pbuf_free>
    return NULL;
 8014572:	2300      	movs	r3, #0
 8014574:	e061      	b.n	801463a <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 8014576:	693b      	ldr	r3, [r7, #16]
 8014578:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 801457c:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 801457e:	693b      	ldr	r3, [r7, #16]
 8014580:	2200      	movs	r2, #0
 8014582:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8014584:	693b      	ldr	r3, [r7, #16]
 8014586:	68ba      	ldr	r2, [r7, #8]
 8014588:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801458a:	68bb      	ldr	r3, [r7, #8]
 801458c:	891a      	ldrh	r2, [r3, #8]
 801458e:	7dfb      	ldrb	r3, [r7, #23]
 8014590:	b29b      	uxth	r3, r3
 8014592:	429a      	cmp	r2, r3
 8014594:	d205      	bcs.n	80145a2 <tcp_create_segment+0x86>
 8014596:	4b2b      	ldr	r3, [pc, #172]	; (8014644 <tcp_create_segment+0x128>)
 8014598:	22b0      	movs	r2, #176	; 0xb0
 801459a:	492e      	ldr	r1, [pc, #184]	; (8014654 <tcp_create_segment+0x138>)
 801459c:	482b      	ldr	r0, [pc, #172]	; (801464c <tcp_create_segment+0x130>)
 801459e:	f006 fedf 	bl	801b360 <iprintf>
  seg->len = p->tot_len - optlen;
 80145a2:	68bb      	ldr	r3, [r7, #8]
 80145a4:	891a      	ldrh	r2, [r3, #8]
 80145a6:	7dfb      	ldrb	r3, [r7, #23]
 80145a8:	b29b      	uxth	r3, r3
 80145aa:	1ad3      	subs	r3, r2, r3
 80145ac:	b29a      	uxth	r2, r3
 80145ae:	693b      	ldr	r3, [r7, #16]
 80145b0:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 80145b2:	2114      	movs	r1, #20
 80145b4:	68b8      	ldr	r0, [r7, #8]
 80145b6:	f7fb fdbf 	bl	8010138 <pbuf_add_header>
 80145ba:	4603      	mov	r3, r0
 80145bc:	2b00      	cmp	r3, #0
 80145be:	d004      	beq.n	80145ca <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 80145c0:	6938      	ldr	r0, [r7, #16]
 80145c2:	f7fd f8d2 	bl	801176a <tcp_seg_free>
    return NULL;
 80145c6:	2300      	movs	r3, #0
 80145c8:	e037      	b.n	801463a <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 80145ca:	693b      	ldr	r3, [r7, #16]
 80145cc:	685b      	ldr	r3, [r3, #4]
 80145ce:	685a      	ldr	r2, [r3, #4]
 80145d0:	693b      	ldr	r3, [r7, #16]
 80145d2:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 80145d4:	68fb      	ldr	r3, [r7, #12]
 80145d6:	8ada      	ldrh	r2, [r3, #22]
 80145d8:	693b      	ldr	r3, [r7, #16]
 80145da:	68dc      	ldr	r4, [r3, #12]
 80145dc:	4610      	mov	r0, r2
 80145de:	f7fa fba5 	bl	800ed2c <lwip_htons>
 80145e2:	4603      	mov	r3, r0
 80145e4:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 80145e6:	68fb      	ldr	r3, [r7, #12]
 80145e8:	8b1a      	ldrh	r2, [r3, #24]
 80145ea:	693b      	ldr	r3, [r7, #16]
 80145ec:	68dc      	ldr	r4, [r3, #12]
 80145ee:	4610      	mov	r0, r2
 80145f0:	f7fa fb9c 	bl	800ed2c <lwip_htons>
 80145f4:	4603      	mov	r3, r0
 80145f6:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 80145f8:	693b      	ldr	r3, [r7, #16]
 80145fa:	68dc      	ldr	r4, [r3, #12]
 80145fc:	6838      	ldr	r0, [r7, #0]
 80145fe:	f7fa fbaa 	bl	800ed56 <lwip_htonl>
 8014602:	4603      	mov	r3, r0
 8014604:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8014606:	7dfb      	ldrb	r3, [r7, #23]
 8014608:	089b      	lsrs	r3, r3, #2
 801460a:	b2db      	uxtb	r3, r3
 801460c:	b29b      	uxth	r3, r3
 801460e:	3305      	adds	r3, #5
 8014610:	b29b      	uxth	r3, r3
 8014612:	031b      	lsls	r3, r3, #12
 8014614:	b29a      	uxth	r2, r3
 8014616:	79fb      	ldrb	r3, [r7, #7]
 8014618:	b29b      	uxth	r3, r3
 801461a:	4313      	orrs	r3, r2
 801461c:	b29a      	uxth	r2, r3
 801461e:	693b      	ldr	r3, [r7, #16]
 8014620:	68dc      	ldr	r4, [r3, #12]
 8014622:	4610      	mov	r0, r2
 8014624:	f7fa fb82 	bl	800ed2c <lwip_htons>
 8014628:	4603      	mov	r3, r0
 801462a:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 801462c:	693b      	ldr	r3, [r7, #16]
 801462e:	68db      	ldr	r3, [r3, #12]
 8014630:	2200      	movs	r2, #0
 8014632:	749a      	strb	r2, [r3, #18]
 8014634:	2200      	movs	r2, #0
 8014636:	74da      	strb	r2, [r3, #19]
  return seg;
 8014638:	693b      	ldr	r3, [r7, #16]
}
 801463a:	4618      	mov	r0, r3
 801463c:	371c      	adds	r7, #28
 801463e:	46bd      	mov	sp, r7
 8014640:	bd90      	pop	{r4, r7, pc}
 8014642:	bf00      	nop
 8014644:	0802221c 	.word	0x0802221c
 8014648:	08022250 	.word	0x08022250
 801464c:	08022270 	.word	0x08022270
 8014650:	08022298 	.word	0x08022298
 8014654:	080222bc 	.word	0x080222bc

08014658 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8014658:	b590      	push	{r4, r7, lr}
 801465a:	b08b      	sub	sp, #44	; 0x2c
 801465c:	af02      	add	r7, sp, #8
 801465e:	6078      	str	r0, [r7, #4]
 8014660:	460b      	mov	r3, r1
 8014662:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8014664:	2300      	movs	r3, #0
 8014666:	61fb      	str	r3, [r7, #28]
 8014668:	2300      	movs	r3, #0
 801466a:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 801466c:	2300      	movs	r3, #0
 801466e:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8014670:	687b      	ldr	r3, [r7, #4]
 8014672:	2b00      	cmp	r3, #0
 8014674:	d106      	bne.n	8014684 <tcp_split_unsent_seg+0x2c>
 8014676:	4b95      	ldr	r3, [pc, #596]	; (80148cc <tcp_split_unsent_seg+0x274>)
 8014678:	f240 324b 	movw	r2, #843	; 0x34b
 801467c:	4994      	ldr	r1, [pc, #592]	; (80148d0 <tcp_split_unsent_seg+0x278>)
 801467e:	4895      	ldr	r0, [pc, #596]	; (80148d4 <tcp_split_unsent_seg+0x27c>)
 8014680:	f006 fe6e 	bl	801b360 <iprintf>

  useg = pcb->unsent;
 8014684:	687b      	ldr	r3, [r7, #4]
 8014686:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014688:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 801468a:	697b      	ldr	r3, [r7, #20]
 801468c:	2b00      	cmp	r3, #0
 801468e:	d102      	bne.n	8014696 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8014690:	f04f 33ff 	mov.w	r3, #4294967295
 8014694:	e116      	b.n	80148c4 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8014696:	887b      	ldrh	r3, [r7, #2]
 8014698:	2b00      	cmp	r3, #0
 801469a:	d109      	bne.n	80146b0 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 801469c:	4b8b      	ldr	r3, [pc, #556]	; (80148cc <tcp_split_unsent_seg+0x274>)
 801469e:	f240 3253 	movw	r2, #851	; 0x353
 80146a2:	498d      	ldr	r1, [pc, #564]	; (80148d8 <tcp_split_unsent_seg+0x280>)
 80146a4:	488b      	ldr	r0, [pc, #556]	; (80148d4 <tcp_split_unsent_seg+0x27c>)
 80146a6:	f006 fe5b 	bl	801b360 <iprintf>
    return ERR_VAL;
 80146aa:	f06f 0305 	mvn.w	r3, #5
 80146ae:	e109      	b.n	80148c4 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 80146b0:	697b      	ldr	r3, [r7, #20]
 80146b2:	891b      	ldrh	r3, [r3, #8]
 80146b4:	887a      	ldrh	r2, [r7, #2]
 80146b6:	429a      	cmp	r2, r3
 80146b8:	d301      	bcc.n	80146be <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 80146ba:	2300      	movs	r3, #0
 80146bc:	e102      	b.n	80148c4 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 80146be:	687b      	ldr	r3, [r7, #4]
 80146c0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80146c2:	887a      	ldrh	r2, [r7, #2]
 80146c4:	429a      	cmp	r2, r3
 80146c6:	d906      	bls.n	80146d6 <tcp_split_unsent_seg+0x7e>
 80146c8:	4b80      	ldr	r3, [pc, #512]	; (80148cc <tcp_split_unsent_seg+0x274>)
 80146ca:	f240 325b 	movw	r2, #859	; 0x35b
 80146ce:	4983      	ldr	r1, [pc, #524]	; (80148dc <tcp_split_unsent_seg+0x284>)
 80146d0:	4880      	ldr	r0, [pc, #512]	; (80148d4 <tcp_split_unsent_seg+0x27c>)
 80146d2:	f006 fe45 	bl	801b360 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 80146d6:	697b      	ldr	r3, [r7, #20]
 80146d8:	891b      	ldrh	r3, [r3, #8]
 80146da:	2b00      	cmp	r3, #0
 80146dc:	d106      	bne.n	80146ec <tcp_split_unsent_seg+0x94>
 80146de:	4b7b      	ldr	r3, [pc, #492]	; (80148cc <tcp_split_unsent_seg+0x274>)
 80146e0:	f44f 7257 	mov.w	r2, #860	; 0x35c
 80146e4:	497e      	ldr	r1, [pc, #504]	; (80148e0 <tcp_split_unsent_seg+0x288>)
 80146e6:	487b      	ldr	r0, [pc, #492]	; (80148d4 <tcp_split_unsent_seg+0x27c>)
 80146e8:	f006 fe3a 	bl	801b360 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 80146ec:	697b      	ldr	r3, [r7, #20]
 80146ee:	7a9b      	ldrb	r3, [r3, #10]
 80146f0:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 80146f2:	7bfb      	ldrb	r3, [r7, #15]
 80146f4:	009b      	lsls	r3, r3, #2
 80146f6:	b2db      	uxtb	r3, r3
 80146f8:	f003 0304 	and.w	r3, r3, #4
 80146fc:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 80146fe:	697b      	ldr	r3, [r7, #20]
 8014700:	891a      	ldrh	r2, [r3, #8]
 8014702:	887b      	ldrh	r3, [r7, #2]
 8014704:	1ad3      	subs	r3, r2, r3
 8014706:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8014708:	7bbb      	ldrb	r3, [r7, #14]
 801470a:	b29a      	uxth	r2, r3
 801470c:	89bb      	ldrh	r3, [r7, #12]
 801470e:	4413      	add	r3, r2
 8014710:	b29b      	uxth	r3, r3
 8014712:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014716:	4619      	mov	r1, r3
 8014718:	2036      	movs	r0, #54	; 0x36
 801471a:	f7fb fabf 	bl	800fc9c <pbuf_alloc>
 801471e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8014720:	693b      	ldr	r3, [r7, #16]
 8014722:	2b00      	cmp	r3, #0
 8014724:	f000 80b7 	beq.w	8014896 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8014728:	697b      	ldr	r3, [r7, #20]
 801472a:	685b      	ldr	r3, [r3, #4]
 801472c:	891a      	ldrh	r2, [r3, #8]
 801472e:	697b      	ldr	r3, [r7, #20]
 8014730:	891b      	ldrh	r3, [r3, #8]
 8014732:	1ad3      	subs	r3, r2, r3
 8014734:	b29a      	uxth	r2, r3
 8014736:	887b      	ldrh	r3, [r7, #2]
 8014738:	4413      	add	r3, r2
 801473a:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 801473c:	697b      	ldr	r3, [r7, #20]
 801473e:	6858      	ldr	r0, [r3, #4]
 8014740:	693b      	ldr	r3, [r7, #16]
 8014742:	685a      	ldr	r2, [r3, #4]
 8014744:	7bbb      	ldrb	r3, [r7, #14]
 8014746:	18d1      	adds	r1, r2, r3
 8014748:	897b      	ldrh	r3, [r7, #10]
 801474a:	89ba      	ldrh	r2, [r7, #12]
 801474c:	f7fb ff84 	bl	8010658 <pbuf_copy_partial>
 8014750:	4603      	mov	r3, r0
 8014752:	461a      	mov	r2, r3
 8014754:	89bb      	ldrh	r3, [r7, #12]
 8014756:	4293      	cmp	r3, r2
 8014758:	f040 809f 	bne.w	801489a <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 801475c:	697b      	ldr	r3, [r7, #20]
 801475e:	68db      	ldr	r3, [r3, #12]
 8014760:	899b      	ldrh	r3, [r3, #12]
 8014762:	b29b      	uxth	r3, r3
 8014764:	4618      	mov	r0, r3
 8014766:	f7fa fae1 	bl	800ed2c <lwip_htons>
 801476a:	4603      	mov	r3, r0
 801476c:	b2db      	uxtb	r3, r3
 801476e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8014772:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8014774:	2300      	movs	r3, #0
 8014776:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8014778:	7efb      	ldrb	r3, [r7, #27]
 801477a:	f003 0308 	and.w	r3, r3, #8
 801477e:	2b00      	cmp	r3, #0
 8014780:	d007      	beq.n	8014792 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8014782:	7efb      	ldrb	r3, [r7, #27]
 8014784:	f023 0308 	bic.w	r3, r3, #8
 8014788:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 801478a:	7ebb      	ldrb	r3, [r7, #26]
 801478c:	f043 0308 	orr.w	r3, r3, #8
 8014790:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8014792:	7efb      	ldrb	r3, [r7, #27]
 8014794:	f003 0301 	and.w	r3, r3, #1
 8014798:	2b00      	cmp	r3, #0
 801479a:	d007      	beq.n	80147ac <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 801479c:	7efb      	ldrb	r3, [r7, #27]
 801479e:	f023 0301 	bic.w	r3, r3, #1
 80147a2:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 80147a4:	7ebb      	ldrb	r3, [r7, #26]
 80147a6:	f043 0301 	orr.w	r3, r3, #1
 80147aa:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 80147ac:	697b      	ldr	r3, [r7, #20]
 80147ae:	68db      	ldr	r3, [r3, #12]
 80147b0:	685b      	ldr	r3, [r3, #4]
 80147b2:	4618      	mov	r0, r3
 80147b4:	f7fa facf 	bl	800ed56 <lwip_htonl>
 80147b8:	4602      	mov	r2, r0
 80147ba:	887b      	ldrh	r3, [r7, #2]
 80147bc:	18d1      	adds	r1, r2, r3
 80147be:	7eba      	ldrb	r2, [r7, #26]
 80147c0:	7bfb      	ldrb	r3, [r7, #15]
 80147c2:	9300      	str	r3, [sp, #0]
 80147c4:	460b      	mov	r3, r1
 80147c6:	6939      	ldr	r1, [r7, #16]
 80147c8:	6878      	ldr	r0, [r7, #4]
 80147ca:	f7ff fea7 	bl	801451c <tcp_create_segment>
 80147ce:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 80147d0:	69fb      	ldr	r3, [r7, #28]
 80147d2:	2b00      	cmp	r3, #0
 80147d4:	d063      	beq.n	801489e <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 80147d6:	697b      	ldr	r3, [r7, #20]
 80147d8:	685b      	ldr	r3, [r3, #4]
 80147da:	4618      	mov	r0, r3
 80147dc:	f7fb fdca 	bl	8010374 <pbuf_clen>
 80147e0:	4603      	mov	r3, r0
 80147e2:	461a      	mov	r2, r3
 80147e4:	687b      	ldr	r3, [r7, #4]
 80147e6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80147ea:	1a9b      	subs	r3, r3, r2
 80147ec:	b29a      	uxth	r2, r3
 80147ee:	687b      	ldr	r3, [r7, #4]
 80147f0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 80147f4:	697b      	ldr	r3, [r7, #20]
 80147f6:	6858      	ldr	r0, [r3, #4]
 80147f8:	697b      	ldr	r3, [r7, #20]
 80147fa:	685b      	ldr	r3, [r3, #4]
 80147fc:	891a      	ldrh	r2, [r3, #8]
 80147fe:	89bb      	ldrh	r3, [r7, #12]
 8014800:	1ad3      	subs	r3, r2, r3
 8014802:	b29b      	uxth	r3, r3
 8014804:	4619      	mov	r1, r3
 8014806:	f7fb fba7 	bl	800ff58 <pbuf_realloc>
  useg->len -= remainder;
 801480a:	697b      	ldr	r3, [r7, #20]
 801480c:	891a      	ldrh	r2, [r3, #8]
 801480e:	89bb      	ldrh	r3, [r7, #12]
 8014810:	1ad3      	subs	r3, r2, r3
 8014812:	b29a      	uxth	r2, r3
 8014814:	697b      	ldr	r3, [r7, #20]
 8014816:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8014818:	697b      	ldr	r3, [r7, #20]
 801481a:	68db      	ldr	r3, [r3, #12]
 801481c:	899b      	ldrh	r3, [r3, #12]
 801481e:	b29c      	uxth	r4, r3
 8014820:	7efb      	ldrb	r3, [r7, #27]
 8014822:	b29b      	uxth	r3, r3
 8014824:	4618      	mov	r0, r3
 8014826:	f7fa fa81 	bl	800ed2c <lwip_htons>
 801482a:	4603      	mov	r3, r0
 801482c:	461a      	mov	r2, r3
 801482e:	697b      	ldr	r3, [r7, #20]
 8014830:	68db      	ldr	r3, [r3, #12]
 8014832:	4322      	orrs	r2, r4
 8014834:	b292      	uxth	r2, r2
 8014836:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8014838:	697b      	ldr	r3, [r7, #20]
 801483a:	685b      	ldr	r3, [r3, #4]
 801483c:	4618      	mov	r0, r3
 801483e:	f7fb fd99 	bl	8010374 <pbuf_clen>
 8014842:	4603      	mov	r3, r0
 8014844:	461a      	mov	r2, r3
 8014846:	687b      	ldr	r3, [r7, #4]
 8014848:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801484c:	4413      	add	r3, r2
 801484e:	b29a      	uxth	r2, r3
 8014850:	687b      	ldr	r3, [r7, #4]
 8014852:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8014856:	69fb      	ldr	r3, [r7, #28]
 8014858:	685b      	ldr	r3, [r3, #4]
 801485a:	4618      	mov	r0, r3
 801485c:	f7fb fd8a 	bl	8010374 <pbuf_clen>
 8014860:	4603      	mov	r3, r0
 8014862:	461a      	mov	r2, r3
 8014864:	687b      	ldr	r3, [r7, #4]
 8014866:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801486a:	4413      	add	r3, r2
 801486c:	b29a      	uxth	r2, r3
 801486e:	687b      	ldr	r3, [r7, #4]
 8014870:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8014874:	697b      	ldr	r3, [r7, #20]
 8014876:	681a      	ldr	r2, [r3, #0]
 8014878:	69fb      	ldr	r3, [r7, #28]
 801487a:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 801487c:	697b      	ldr	r3, [r7, #20]
 801487e:	69fa      	ldr	r2, [r7, #28]
 8014880:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8014882:	69fb      	ldr	r3, [r7, #28]
 8014884:	681b      	ldr	r3, [r3, #0]
 8014886:	2b00      	cmp	r3, #0
 8014888:	d103      	bne.n	8014892 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 801488a:	687b      	ldr	r3, [r7, #4]
 801488c:	2200      	movs	r2, #0
 801488e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8014892:	2300      	movs	r3, #0
 8014894:	e016      	b.n	80148c4 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8014896:	bf00      	nop
 8014898:	e002      	b.n	80148a0 <tcp_split_unsent_seg+0x248>
    goto memerr;
 801489a:	bf00      	nop
 801489c:	e000      	b.n	80148a0 <tcp_split_unsent_seg+0x248>
    goto memerr;
 801489e:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 80148a0:	69fb      	ldr	r3, [r7, #28]
 80148a2:	2b00      	cmp	r3, #0
 80148a4:	d006      	beq.n	80148b4 <tcp_split_unsent_seg+0x25c>
 80148a6:	4b09      	ldr	r3, [pc, #36]	; (80148cc <tcp_split_unsent_seg+0x274>)
 80148a8:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 80148ac:	490d      	ldr	r1, [pc, #52]	; (80148e4 <tcp_split_unsent_seg+0x28c>)
 80148ae:	4809      	ldr	r0, [pc, #36]	; (80148d4 <tcp_split_unsent_seg+0x27c>)
 80148b0:	f006 fd56 	bl	801b360 <iprintf>
  if (p != NULL) {
 80148b4:	693b      	ldr	r3, [r7, #16]
 80148b6:	2b00      	cmp	r3, #0
 80148b8:	d002      	beq.n	80148c0 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 80148ba:	6938      	ldr	r0, [r7, #16]
 80148bc:	f7fb fcd2 	bl	8010264 <pbuf_free>
  }

  return ERR_MEM;
 80148c0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80148c4:	4618      	mov	r0, r3
 80148c6:	3724      	adds	r7, #36	; 0x24
 80148c8:	46bd      	mov	sp, r7
 80148ca:	bd90      	pop	{r4, r7, pc}
 80148cc:	0802221c 	.word	0x0802221c
 80148d0:	080225b0 	.word	0x080225b0
 80148d4:	08022270 	.word	0x08022270
 80148d8:	080225d4 	.word	0x080225d4
 80148dc:	080225f8 	.word	0x080225f8
 80148e0:	08022608 	.word	0x08022608
 80148e4:	08022618 	.word	0x08022618

080148e8 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 80148e8:	b590      	push	{r4, r7, lr}
 80148ea:	b085      	sub	sp, #20
 80148ec:	af00      	add	r7, sp, #0
 80148ee:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 80148f0:	687b      	ldr	r3, [r7, #4]
 80148f2:	2b00      	cmp	r3, #0
 80148f4:	d106      	bne.n	8014904 <tcp_send_fin+0x1c>
 80148f6:	4b21      	ldr	r3, [pc, #132]	; (801497c <tcp_send_fin+0x94>)
 80148f8:	f240 32eb 	movw	r2, #1003	; 0x3eb
 80148fc:	4920      	ldr	r1, [pc, #128]	; (8014980 <tcp_send_fin+0x98>)
 80148fe:	4821      	ldr	r0, [pc, #132]	; (8014984 <tcp_send_fin+0x9c>)
 8014900:	f006 fd2e 	bl	801b360 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8014904:	687b      	ldr	r3, [r7, #4]
 8014906:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014908:	2b00      	cmp	r3, #0
 801490a:	d02e      	beq.n	801496a <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801490c:	687b      	ldr	r3, [r7, #4]
 801490e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014910:	60fb      	str	r3, [r7, #12]
 8014912:	e002      	b.n	801491a <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8014914:	68fb      	ldr	r3, [r7, #12]
 8014916:	681b      	ldr	r3, [r3, #0]
 8014918:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801491a:	68fb      	ldr	r3, [r7, #12]
 801491c:	681b      	ldr	r3, [r3, #0]
 801491e:	2b00      	cmp	r3, #0
 8014920:	d1f8      	bne.n	8014914 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8014922:	68fb      	ldr	r3, [r7, #12]
 8014924:	68db      	ldr	r3, [r3, #12]
 8014926:	899b      	ldrh	r3, [r3, #12]
 8014928:	b29b      	uxth	r3, r3
 801492a:	4618      	mov	r0, r3
 801492c:	f7fa f9fe 	bl	800ed2c <lwip_htons>
 8014930:	4603      	mov	r3, r0
 8014932:	b2db      	uxtb	r3, r3
 8014934:	f003 0307 	and.w	r3, r3, #7
 8014938:	2b00      	cmp	r3, #0
 801493a:	d116      	bne.n	801496a <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 801493c:	68fb      	ldr	r3, [r7, #12]
 801493e:	68db      	ldr	r3, [r3, #12]
 8014940:	899b      	ldrh	r3, [r3, #12]
 8014942:	b29c      	uxth	r4, r3
 8014944:	2001      	movs	r0, #1
 8014946:	f7fa f9f1 	bl	800ed2c <lwip_htons>
 801494a:	4603      	mov	r3, r0
 801494c:	461a      	mov	r2, r3
 801494e:	68fb      	ldr	r3, [r7, #12]
 8014950:	68db      	ldr	r3, [r3, #12]
 8014952:	4322      	orrs	r2, r4
 8014954:	b292      	uxth	r2, r2
 8014956:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8014958:	687b      	ldr	r3, [r7, #4]
 801495a:	8b5b      	ldrh	r3, [r3, #26]
 801495c:	f043 0320 	orr.w	r3, r3, #32
 8014960:	b29a      	uxth	r2, r3
 8014962:	687b      	ldr	r3, [r7, #4]
 8014964:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8014966:	2300      	movs	r3, #0
 8014968:	e004      	b.n	8014974 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 801496a:	2101      	movs	r1, #1
 801496c:	6878      	ldr	r0, [r7, #4]
 801496e:	f000 f80b 	bl	8014988 <tcp_enqueue_flags>
 8014972:	4603      	mov	r3, r0
}
 8014974:	4618      	mov	r0, r3
 8014976:	3714      	adds	r7, #20
 8014978:	46bd      	mov	sp, r7
 801497a:	bd90      	pop	{r4, r7, pc}
 801497c:	0802221c 	.word	0x0802221c
 8014980:	08022624 	.word	0x08022624
 8014984:	08022270 	.word	0x08022270

08014988 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8014988:	b580      	push	{r7, lr}
 801498a:	b08a      	sub	sp, #40	; 0x28
 801498c:	af02      	add	r7, sp, #8
 801498e:	6078      	str	r0, [r7, #4]
 8014990:	460b      	mov	r3, r1
 8014992:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8014994:	2300      	movs	r3, #0
 8014996:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8014998:	2300      	movs	r3, #0
 801499a:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 801499c:	78fb      	ldrb	r3, [r7, #3]
 801499e:	f003 0303 	and.w	r3, r3, #3
 80149a2:	2b00      	cmp	r3, #0
 80149a4:	d106      	bne.n	80149b4 <tcp_enqueue_flags+0x2c>
 80149a6:	4b67      	ldr	r3, [pc, #412]	; (8014b44 <tcp_enqueue_flags+0x1bc>)
 80149a8:	f240 4211 	movw	r2, #1041	; 0x411
 80149ac:	4966      	ldr	r1, [pc, #408]	; (8014b48 <tcp_enqueue_flags+0x1c0>)
 80149ae:	4867      	ldr	r0, [pc, #412]	; (8014b4c <tcp_enqueue_flags+0x1c4>)
 80149b0:	f006 fcd6 	bl	801b360 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 80149b4:	687b      	ldr	r3, [r7, #4]
 80149b6:	2b00      	cmp	r3, #0
 80149b8:	d106      	bne.n	80149c8 <tcp_enqueue_flags+0x40>
 80149ba:	4b62      	ldr	r3, [pc, #392]	; (8014b44 <tcp_enqueue_flags+0x1bc>)
 80149bc:	f240 4213 	movw	r2, #1043	; 0x413
 80149c0:	4963      	ldr	r1, [pc, #396]	; (8014b50 <tcp_enqueue_flags+0x1c8>)
 80149c2:	4862      	ldr	r0, [pc, #392]	; (8014b4c <tcp_enqueue_flags+0x1c4>)
 80149c4:	f006 fccc 	bl	801b360 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 80149c8:	78fb      	ldrb	r3, [r7, #3]
 80149ca:	f003 0302 	and.w	r3, r3, #2
 80149ce:	2b00      	cmp	r3, #0
 80149d0:	d001      	beq.n	80149d6 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 80149d2:	2301      	movs	r3, #1
 80149d4:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80149d6:	7ffb      	ldrb	r3, [r7, #31]
 80149d8:	009b      	lsls	r3, r3, #2
 80149da:	b2db      	uxtb	r3, r3
 80149dc:	f003 0304 	and.w	r3, r3, #4
 80149e0:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80149e2:	7dfb      	ldrb	r3, [r7, #23]
 80149e4:	b29b      	uxth	r3, r3
 80149e6:	f44f 7220 	mov.w	r2, #640	; 0x280
 80149ea:	4619      	mov	r1, r3
 80149ec:	2036      	movs	r0, #54	; 0x36
 80149ee:	f7fb f955 	bl	800fc9c <pbuf_alloc>
 80149f2:	6138      	str	r0, [r7, #16]
 80149f4:	693b      	ldr	r3, [r7, #16]
 80149f6:	2b00      	cmp	r3, #0
 80149f8:	d109      	bne.n	8014a0e <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80149fa:	687b      	ldr	r3, [r7, #4]
 80149fc:	8b5b      	ldrh	r3, [r3, #26]
 80149fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014a02:	b29a      	uxth	r2, r3
 8014a04:	687b      	ldr	r3, [r7, #4]
 8014a06:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8014a08:	f04f 33ff 	mov.w	r3, #4294967295
 8014a0c:	e095      	b.n	8014b3a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8014a0e:	693b      	ldr	r3, [r7, #16]
 8014a10:	895a      	ldrh	r2, [r3, #10]
 8014a12:	7dfb      	ldrb	r3, [r7, #23]
 8014a14:	b29b      	uxth	r3, r3
 8014a16:	429a      	cmp	r2, r3
 8014a18:	d206      	bcs.n	8014a28 <tcp_enqueue_flags+0xa0>
 8014a1a:	4b4a      	ldr	r3, [pc, #296]	; (8014b44 <tcp_enqueue_flags+0x1bc>)
 8014a1c:	f240 4239 	movw	r2, #1081	; 0x439
 8014a20:	494c      	ldr	r1, [pc, #304]	; (8014b54 <tcp_enqueue_flags+0x1cc>)
 8014a22:	484a      	ldr	r0, [pc, #296]	; (8014b4c <tcp_enqueue_flags+0x1c4>)
 8014a24:	f006 fc9c 	bl	801b360 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8014a28:	687b      	ldr	r3, [r7, #4]
 8014a2a:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8014a2c:	78fa      	ldrb	r2, [r7, #3]
 8014a2e:	7ffb      	ldrb	r3, [r7, #31]
 8014a30:	9300      	str	r3, [sp, #0]
 8014a32:	460b      	mov	r3, r1
 8014a34:	6939      	ldr	r1, [r7, #16]
 8014a36:	6878      	ldr	r0, [r7, #4]
 8014a38:	f7ff fd70 	bl	801451c <tcp_create_segment>
 8014a3c:	60f8      	str	r0, [r7, #12]
 8014a3e:	68fb      	ldr	r3, [r7, #12]
 8014a40:	2b00      	cmp	r3, #0
 8014a42:	d109      	bne.n	8014a58 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8014a44:	687b      	ldr	r3, [r7, #4]
 8014a46:	8b5b      	ldrh	r3, [r3, #26]
 8014a48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014a4c:	b29a      	uxth	r2, r3
 8014a4e:	687b      	ldr	r3, [r7, #4]
 8014a50:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8014a52:	f04f 33ff 	mov.w	r3, #4294967295
 8014a56:	e070      	b.n	8014b3a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8014a58:	68fb      	ldr	r3, [r7, #12]
 8014a5a:	68db      	ldr	r3, [r3, #12]
 8014a5c:	f003 0303 	and.w	r3, r3, #3
 8014a60:	2b00      	cmp	r3, #0
 8014a62:	d006      	beq.n	8014a72 <tcp_enqueue_flags+0xea>
 8014a64:	4b37      	ldr	r3, [pc, #220]	; (8014b44 <tcp_enqueue_flags+0x1bc>)
 8014a66:	f240 4242 	movw	r2, #1090	; 0x442
 8014a6a:	493b      	ldr	r1, [pc, #236]	; (8014b58 <tcp_enqueue_flags+0x1d0>)
 8014a6c:	4837      	ldr	r0, [pc, #220]	; (8014b4c <tcp_enqueue_flags+0x1c4>)
 8014a6e:	f006 fc77 	bl	801b360 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8014a72:	68fb      	ldr	r3, [r7, #12]
 8014a74:	891b      	ldrh	r3, [r3, #8]
 8014a76:	2b00      	cmp	r3, #0
 8014a78:	d006      	beq.n	8014a88 <tcp_enqueue_flags+0x100>
 8014a7a:	4b32      	ldr	r3, [pc, #200]	; (8014b44 <tcp_enqueue_flags+0x1bc>)
 8014a7c:	f240 4243 	movw	r2, #1091	; 0x443
 8014a80:	4936      	ldr	r1, [pc, #216]	; (8014b5c <tcp_enqueue_flags+0x1d4>)
 8014a82:	4832      	ldr	r0, [pc, #200]	; (8014b4c <tcp_enqueue_flags+0x1c4>)
 8014a84:	f006 fc6c 	bl	801b360 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8014a88:	687b      	ldr	r3, [r7, #4]
 8014a8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014a8c:	2b00      	cmp	r3, #0
 8014a8e:	d103      	bne.n	8014a98 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8014a90:	687b      	ldr	r3, [r7, #4]
 8014a92:	68fa      	ldr	r2, [r7, #12]
 8014a94:	66da      	str	r2, [r3, #108]	; 0x6c
 8014a96:	e00d      	b.n	8014ab4 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8014a98:	687b      	ldr	r3, [r7, #4]
 8014a9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014a9c:	61bb      	str	r3, [r7, #24]
 8014a9e:	e002      	b.n	8014aa6 <tcp_enqueue_flags+0x11e>
 8014aa0:	69bb      	ldr	r3, [r7, #24]
 8014aa2:	681b      	ldr	r3, [r3, #0]
 8014aa4:	61bb      	str	r3, [r7, #24]
 8014aa6:	69bb      	ldr	r3, [r7, #24]
 8014aa8:	681b      	ldr	r3, [r3, #0]
 8014aaa:	2b00      	cmp	r3, #0
 8014aac:	d1f8      	bne.n	8014aa0 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8014aae:	69bb      	ldr	r3, [r7, #24]
 8014ab0:	68fa      	ldr	r2, [r7, #12]
 8014ab2:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8014ab4:	687b      	ldr	r3, [r7, #4]
 8014ab6:	2200      	movs	r2, #0
 8014ab8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8014abc:	78fb      	ldrb	r3, [r7, #3]
 8014abe:	f003 0302 	and.w	r3, r3, #2
 8014ac2:	2b00      	cmp	r3, #0
 8014ac4:	d104      	bne.n	8014ad0 <tcp_enqueue_flags+0x148>
 8014ac6:	78fb      	ldrb	r3, [r7, #3]
 8014ac8:	f003 0301 	and.w	r3, r3, #1
 8014acc:	2b00      	cmp	r3, #0
 8014ace:	d004      	beq.n	8014ada <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8014ad0:	687b      	ldr	r3, [r7, #4]
 8014ad2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8014ad4:	1c5a      	adds	r2, r3, #1
 8014ad6:	687b      	ldr	r3, [r7, #4]
 8014ad8:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8014ada:	78fb      	ldrb	r3, [r7, #3]
 8014adc:	f003 0301 	and.w	r3, r3, #1
 8014ae0:	2b00      	cmp	r3, #0
 8014ae2:	d006      	beq.n	8014af2 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8014ae4:	687b      	ldr	r3, [r7, #4]
 8014ae6:	8b5b      	ldrh	r3, [r3, #26]
 8014ae8:	f043 0320 	orr.w	r3, r3, #32
 8014aec:	b29a      	uxth	r2, r3
 8014aee:	687b      	ldr	r3, [r7, #4]
 8014af0:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8014af2:	68fb      	ldr	r3, [r7, #12]
 8014af4:	685b      	ldr	r3, [r3, #4]
 8014af6:	4618      	mov	r0, r3
 8014af8:	f7fb fc3c 	bl	8010374 <pbuf_clen>
 8014afc:	4603      	mov	r3, r0
 8014afe:	461a      	mov	r2, r3
 8014b00:	687b      	ldr	r3, [r7, #4]
 8014b02:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014b06:	4413      	add	r3, r2
 8014b08:	b29a      	uxth	r2, r3
 8014b0a:	687b      	ldr	r3, [r7, #4]
 8014b0c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8014b10:	687b      	ldr	r3, [r7, #4]
 8014b12:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014b16:	2b00      	cmp	r3, #0
 8014b18:	d00e      	beq.n	8014b38 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8014b1a:	687b      	ldr	r3, [r7, #4]
 8014b1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014b1e:	2b00      	cmp	r3, #0
 8014b20:	d10a      	bne.n	8014b38 <tcp_enqueue_flags+0x1b0>
 8014b22:	687b      	ldr	r3, [r7, #4]
 8014b24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014b26:	2b00      	cmp	r3, #0
 8014b28:	d106      	bne.n	8014b38 <tcp_enqueue_flags+0x1b0>
 8014b2a:	4b06      	ldr	r3, [pc, #24]	; (8014b44 <tcp_enqueue_flags+0x1bc>)
 8014b2c:	f240 4265 	movw	r2, #1125	; 0x465
 8014b30:	490b      	ldr	r1, [pc, #44]	; (8014b60 <tcp_enqueue_flags+0x1d8>)
 8014b32:	4806      	ldr	r0, [pc, #24]	; (8014b4c <tcp_enqueue_flags+0x1c4>)
 8014b34:	f006 fc14 	bl	801b360 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8014b38:	2300      	movs	r3, #0
}
 8014b3a:	4618      	mov	r0, r3
 8014b3c:	3720      	adds	r7, #32
 8014b3e:	46bd      	mov	sp, r7
 8014b40:	bd80      	pop	{r7, pc}
 8014b42:	bf00      	nop
 8014b44:	0802221c 	.word	0x0802221c
 8014b48:	08022640 	.word	0x08022640
 8014b4c:	08022270 	.word	0x08022270
 8014b50:	08022698 	.word	0x08022698
 8014b54:	080226b8 	.word	0x080226b8
 8014b58:	080226f4 	.word	0x080226f4
 8014b5c:	0802270c 	.word	0x0802270c
 8014b60:	08022738 	.word	0x08022738

08014b64 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8014b64:	b5b0      	push	{r4, r5, r7, lr}
 8014b66:	b08a      	sub	sp, #40	; 0x28
 8014b68:	af00      	add	r7, sp, #0
 8014b6a:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8014b6c:	687b      	ldr	r3, [r7, #4]
 8014b6e:	2b00      	cmp	r3, #0
 8014b70:	d106      	bne.n	8014b80 <tcp_output+0x1c>
 8014b72:	4b9e      	ldr	r3, [pc, #632]	; (8014dec <tcp_output+0x288>)
 8014b74:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8014b78:	499d      	ldr	r1, [pc, #628]	; (8014df0 <tcp_output+0x28c>)
 8014b7a:	489e      	ldr	r0, [pc, #632]	; (8014df4 <tcp_output+0x290>)
 8014b7c:	f006 fbf0 	bl	801b360 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8014b80:	687b      	ldr	r3, [r7, #4]
 8014b82:	7d1b      	ldrb	r3, [r3, #20]
 8014b84:	2b01      	cmp	r3, #1
 8014b86:	d106      	bne.n	8014b96 <tcp_output+0x32>
 8014b88:	4b98      	ldr	r3, [pc, #608]	; (8014dec <tcp_output+0x288>)
 8014b8a:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8014b8e:	499a      	ldr	r1, [pc, #616]	; (8014df8 <tcp_output+0x294>)
 8014b90:	4898      	ldr	r0, [pc, #608]	; (8014df4 <tcp_output+0x290>)
 8014b92:	f006 fbe5 	bl	801b360 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8014b96:	4b99      	ldr	r3, [pc, #612]	; (8014dfc <tcp_output+0x298>)
 8014b98:	681b      	ldr	r3, [r3, #0]
 8014b9a:	687a      	ldr	r2, [r7, #4]
 8014b9c:	429a      	cmp	r2, r3
 8014b9e:	d101      	bne.n	8014ba4 <tcp_output+0x40>
    return ERR_OK;
 8014ba0:	2300      	movs	r3, #0
 8014ba2:	e1ce      	b.n	8014f42 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8014ba4:	687b      	ldr	r3, [r7, #4]
 8014ba6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8014baa:	687b      	ldr	r3, [r7, #4]
 8014bac:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8014bb0:	4293      	cmp	r3, r2
 8014bb2:	bf28      	it	cs
 8014bb4:	4613      	movcs	r3, r2
 8014bb6:	b29b      	uxth	r3, r3
 8014bb8:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8014bba:	687b      	ldr	r3, [r7, #4]
 8014bbc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014bbe:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8014bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014bc2:	2b00      	cmp	r3, #0
 8014bc4:	d10b      	bne.n	8014bde <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8014bc6:	687b      	ldr	r3, [r7, #4]
 8014bc8:	8b5b      	ldrh	r3, [r3, #26]
 8014bca:	f003 0302 	and.w	r3, r3, #2
 8014bce:	2b00      	cmp	r3, #0
 8014bd0:	f000 81aa 	beq.w	8014f28 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8014bd4:	6878      	ldr	r0, [r7, #4]
 8014bd6:	f000 fdc9 	bl	801576c <tcp_send_empty_ack>
 8014bda:	4603      	mov	r3, r0
 8014bdc:	e1b1      	b.n	8014f42 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8014bde:	6879      	ldr	r1, [r7, #4]
 8014be0:	687b      	ldr	r3, [r7, #4]
 8014be2:	3304      	adds	r3, #4
 8014be4:	461a      	mov	r2, r3
 8014be6:	6878      	ldr	r0, [r7, #4]
 8014be8:	f7ff fc7c 	bl	80144e4 <tcp_route>
 8014bec:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8014bee:	697b      	ldr	r3, [r7, #20]
 8014bf0:	2b00      	cmp	r3, #0
 8014bf2:	d102      	bne.n	8014bfa <tcp_output+0x96>
    return ERR_RTE;
 8014bf4:	f06f 0303 	mvn.w	r3, #3
 8014bf8:	e1a3      	b.n	8014f42 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8014bfa:	687b      	ldr	r3, [r7, #4]
 8014bfc:	2b00      	cmp	r3, #0
 8014bfe:	d003      	beq.n	8014c08 <tcp_output+0xa4>
 8014c00:	687b      	ldr	r3, [r7, #4]
 8014c02:	681b      	ldr	r3, [r3, #0]
 8014c04:	2b00      	cmp	r3, #0
 8014c06:	d111      	bne.n	8014c2c <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8014c08:	697b      	ldr	r3, [r7, #20]
 8014c0a:	2b00      	cmp	r3, #0
 8014c0c:	d002      	beq.n	8014c14 <tcp_output+0xb0>
 8014c0e:	697b      	ldr	r3, [r7, #20]
 8014c10:	3304      	adds	r3, #4
 8014c12:	e000      	b.n	8014c16 <tcp_output+0xb2>
 8014c14:	2300      	movs	r3, #0
 8014c16:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8014c18:	693b      	ldr	r3, [r7, #16]
 8014c1a:	2b00      	cmp	r3, #0
 8014c1c:	d102      	bne.n	8014c24 <tcp_output+0xc0>
      return ERR_RTE;
 8014c1e:	f06f 0303 	mvn.w	r3, #3
 8014c22:	e18e      	b.n	8014f42 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8014c24:	693b      	ldr	r3, [r7, #16]
 8014c26:	681a      	ldr	r2, [r3, #0]
 8014c28:	687b      	ldr	r3, [r7, #4]
 8014c2a:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8014c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c2e:	68db      	ldr	r3, [r3, #12]
 8014c30:	685b      	ldr	r3, [r3, #4]
 8014c32:	4618      	mov	r0, r3
 8014c34:	f7fa f88f 	bl	800ed56 <lwip_htonl>
 8014c38:	4602      	mov	r2, r0
 8014c3a:	687b      	ldr	r3, [r7, #4]
 8014c3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014c3e:	1ad3      	subs	r3, r2, r3
 8014c40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014c42:	8912      	ldrh	r2, [r2, #8]
 8014c44:	4413      	add	r3, r2
 8014c46:	69ba      	ldr	r2, [r7, #24]
 8014c48:	429a      	cmp	r2, r3
 8014c4a:	d227      	bcs.n	8014c9c <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8014c4c:	687b      	ldr	r3, [r7, #4]
 8014c4e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8014c52:	461a      	mov	r2, r3
 8014c54:	69bb      	ldr	r3, [r7, #24]
 8014c56:	4293      	cmp	r3, r2
 8014c58:	d114      	bne.n	8014c84 <tcp_output+0x120>
 8014c5a:	687b      	ldr	r3, [r7, #4]
 8014c5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014c5e:	2b00      	cmp	r3, #0
 8014c60:	d110      	bne.n	8014c84 <tcp_output+0x120>
 8014c62:	687b      	ldr	r3, [r7, #4]
 8014c64:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8014c68:	2b00      	cmp	r3, #0
 8014c6a:	d10b      	bne.n	8014c84 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8014c6c:	687b      	ldr	r3, [r7, #4]
 8014c6e:	2200      	movs	r2, #0
 8014c70:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8014c74:	687b      	ldr	r3, [r7, #4]
 8014c76:	2201      	movs	r2, #1
 8014c78:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8014c7c:	687b      	ldr	r3, [r7, #4]
 8014c7e:	2200      	movs	r2, #0
 8014c80:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8014c84:	687b      	ldr	r3, [r7, #4]
 8014c86:	8b5b      	ldrh	r3, [r3, #26]
 8014c88:	f003 0302 	and.w	r3, r3, #2
 8014c8c:	2b00      	cmp	r3, #0
 8014c8e:	f000 814d 	beq.w	8014f2c <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8014c92:	6878      	ldr	r0, [r7, #4]
 8014c94:	f000 fd6a 	bl	801576c <tcp_send_empty_ack>
 8014c98:	4603      	mov	r3, r0
 8014c9a:	e152      	b.n	8014f42 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8014c9c:	687b      	ldr	r3, [r7, #4]
 8014c9e:	2200      	movs	r2, #0
 8014ca0:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8014ca4:	687b      	ldr	r3, [r7, #4]
 8014ca6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014ca8:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8014caa:	6a3b      	ldr	r3, [r7, #32]
 8014cac:	2b00      	cmp	r3, #0
 8014cae:	f000 811c 	beq.w	8014eea <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8014cb2:	e002      	b.n	8014cba <tcp_output+0x156>
 8014cb4:	6a3b      	ldr	r3, [r7, #32]
 8014cb6:	681b      	ldr	r3, [r3, #0]
 8014cb8:	623b      	str	r3, [r7, #32]
 8014cba:	6a3b      	ldr	r3, [r7, #32]
 8014cbc:	681b      	ldr	r3, [r3, #0]
 8014cbe:	2b00      	cmp	r3, #0
 8014cc0:	d1f8      	bne.n	8014cb4 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8014cc2:	e112      	b.n	8014eea <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8014cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014cc6:	68db      	ldr	r3, [r3, #12]
 8014cc8:	899b      	ldrh	r3, [r3, #12]
 8014cca:	b29b      	uxth	r3, r3
 8014ccc:	4618      	mov	r0, r3
 8014cce:	f7fa f82d 	bl	800ed2c <lwip_htons>
 8014cd2:	4603      	mov	r3, r0
 8014cd4:	b2db      	uxtb	r3, r3
 8014cd6:	f003 0304 	and.w	r3, r3, #4
 8014cda:	2b00      	cmp	r3, #0
 8014cdc:	d006      	beq.n	8014cec <tcp_output+0x188>
 8014cde:	4b43      	ldr	r3, [pc, #268]	; (8014dec <tcp_output+0x288>)
 8014ce0:	f240 5236 	movw	r2, #1334	; 0x536
 8014ce4:	4946      	ldr	r1, [pc, #280]	; (8014e00 <tcp_output+0x29c>)
 8014ce6:	4843      	ldr	r0, [pc, #268]	; (8014df4 <tcp_output+0x290>)
 8014ce8:	f006 fb3a 	bl	801b360 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8014cec:	687b      	ldr	r3, [r7, #4]
 8014cee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014cf0:	2b00      	cmp	r3, #0
 8014cf2:	d01f      	beq.n	8014d34 <tcp_output+0x1d0>
 8014cf4:	687b      	ldr	r3, [r7, #4]
 8014cf6:	8b5b      	ldrh	r3, [r3, #26]
 8014cf8:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8014cfc:	2b00      	cmp	r3, #0
 8014cfe:	d119      	bne.n	8014d34 <tcp_output+0x1d0>
 8014d00:	687b      	ldr	r3, [r7, #4]
 8014d02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014d04:	2b00      	cmp	r3, #0
 8014d06:	d00b      	beq.n	8014d20 <tcp_output+0x1bc>
 8014d08:	687b      	ldr	r3, [r7, #4]
 8014d0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014d0c:	681b      	ldr	r3, [r3, #0]
 8014d0e:	2b00      	cmp	r3, #0
 8014d10:	d110      	bne.n	8014d34 <tcp_output+0x1d0>
 8014d12:	687b      	ldr	r3, [r7, #4]
 8014d14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014d16:	891a      	ldrh	r2, [r3, #8]
 8014d18:	687b      	ldr	r3, [r7, #4]
 8014d1a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014d1c:	429a      	cmp	r2, r3
 8014d1e:	d209      	bcs.n	8014d34 <tcp_output+0x1d0>
 8014d20:	687b      	ldr	r3, [r7, #4]
 8014d22:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8014d26:	2b00      	cmp	r3, #0
 8014d28:	d004      	beq.n	8014d34 <tcp_output+0x1d0>
 8014d2a:	687b      	ldr	r3, [r7, #4]
 8014d2c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014d30:	2b0f      	cmp	r3, #15
 8014d32:	d901      	bls.n	8014d38 <tcp_output+0x1d4>
 8014d34:	2301      	movs	r3, #1
 8014d36:	e000      	b.n	8014d3a <tcp_output+0x1d6>
 8014d38:	2300      	movs	r3, #0
 8014d3a:	2b00      	cmp	r3, #0
 8014d3c:	d106      	bne.n	8014d4c <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8014d3e:	687b      	ldr	r3, [r7, #4]
 8014d40:	8b5b      	ldrh	r3, [r3, #26]
 8014d42:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8014d46:	2b00      	cmp	r3, #0
 8014d48:	f000 80e4 	beq.w	8014f14 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8014d4c:	687b      	ldr	r3, [r7, #4]
 8014d4e:	7d1b      	ldrb	r3, [r3, #20]
 8014d50:	2b02      	cmp	r3, #2
 8014d52:	d00d      	beq.n	8014d70 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8014d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014d56:	68db      	ldr	r3, [r3, #12]
 8014d58:	899b      	ldrh	r3, [r3, #12]
 8014d5a:	b29c      	uxth	r4, r3
 8014d5c:	2010      	movs	r0, #16
 8014d5e:	f7f9 ffe5 	bl	800ed2c <lwip_htons>
 8014d62:	4603      	mov	r3, r0
 8014d64:	461a      	mov	r2, r3
 8014d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014d68:	68db      	ldr	r3, [r3, #12]
 8014d6a:	4322      	orrs	r2, r4
 8014d6c:	b292      	uxth	r2, r2
 8014d6e:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8014d70:	697a      	ldr	r2, [r7, #20]
 8014d72:	6879      	ldr	r1, [r7, #4]
 8014d74:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014d76:	f000 f909 	bl	8014f8c <tcp_output_segment>
 8014d7a:	4603      	mov	r3, r0
 8014d7c:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8014d7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014d82:	2b00      	cmp	r3, #0
 8014d84:	d009      	beq.n	8014d9a <tcp_output+0x236>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8014d86:	687b      	ldr	r3, [r7, #4]
 8014d88:	8b5b      	ldrh	r3, [r3, #26]
 8014d8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014d8e:	b29a      	uxth	r2, r3
 8014d90:	687b      	ldr	r3, [r7, #4]
 8014d92:	835a      	strh	r2, [r3, #26]
      return err;
 8014d94:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014d98:	e0d3      	b.n	8014f42 <tcp_output+0x3de>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8014d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014d9c:	681a      	ldr	r2, [r3, #0]
 8014d9e:	687b      	ldr	r3, [r7, #4]
 8014da0:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8014da2:	687b      	ldr	r3, [r7, #4]
 8014da4:	7d1b      	ldrb	r3, [r3, #20]
 8014da6:	2b02      	cmp	r3, #2
 8014da8:	d006      	beq.n	8014db8 <tcp_output+0x254>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8014daa:	687b      	ldr	r3, [r7, #4]
 8014dac:	8b5b      	ldrh	r3, [r3, #26]
 8014dae:	f023 0303 	bic.w	r3, r3, #3
 8014db2:	b29a      	uxth	r2, r3
 8014db4:	687b      	ldr	r3, [r7, #4]
 8014db6:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8014db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014dba:	68db      	ldr	r3, [r3, #12]
 8014dbc:	685b      	ldr	r3, [r3, #4]
 8014dbe:	4618      	mov	r0, r3
 8014dc0:	f7f9 ffc9 	bl	800ed56 <lwip_htonl>
 8014dc4:	4604      	mov	r4, r0
 8014dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014dc8:	891b      	ldrh	r3, [r3, #8]
 8014dca:	461d      	mov	r5, r3
 8014dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014dce:	68db      	ldr	r3, [r3, #12]
 8014dd0:	899b      	ldrh	r3, [r3, #12]
 8014dd2:	b29b      	uxth	r3, r3
 8014dd4:	4618      	mov	r0, r3
 8014dd6:	f7f9 ffa9 	bl	800ed2c <lwip_htons>
 8014dda:	4603      	mov	r3, r0
 8014ddc:	b2db      	uxtb	r3, r3
 8014dde:	f003 0303 	and.w	r3, r3, #3
 8014de2:	2b00      	cmp	r3, #0
 8014de4:	d00e      	beq.n	8014e04 <tcp_output+0x2a0>
 8014de6:	2301      	movs	r3, #1
 8014de8:	e00d      	b.n	8014e06 <tcp_output+0x2a2>
 8014dea:	bf00      	nop
 8014dec:	0802221c 	.word	0x0802221c
 8014df0:	08022760 	.word	0x08022760
 8014df4:	08022270 	.word	0x08022270
 8014df8:	08022778 	.word	0x08022778
 8014dfc:	20007644 	.word	0x20007644
 8014e00:	080227a0 	.word	0x080227a0
 8014e04:	2300      	movs	r3, #0
 8014e06:	442b      	add	r3, r5
 8014e08:	4423      	add	r3, r4
 8014e0a:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8014e0c:	687b      	ldr	r3, [r7, #4]
 8014e0e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8014e10:	68bb      	ldr	r3, [r7, #8]
 8014e12:	1ad3      	subs	r3, r2, r3
 8014e14:	2b00      	cmp	r3, #0
 8014e16:	da02      	bge.n	8014e1e <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8014e18:	687b      	ldr	r3, [r7, #4]
 8014e1a:	68ba      	ldr	r2, [r7, #8]
 8014e1c:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8014e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e20:	891b      	ldrh	r3, [r3, #8]
 8014e22:	461c      	mov	r4, r3
 8014e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e26:	68db      	ldr	r3, [r3, #12]
 8014e28:	899b      	ldrh	r3, [r3, #12]
 8014e2a:	b29b      	uxth	r3, r3
 8014e2c:	4618      	mov	r0, r3
 8014e2e:	f7f9 ff7d 	bl	800ed2c <lwip_htons>
 8014e32:	4603      	mov	r3, r0
 8014e34:	b2db      	uxtb	r3, r3
 8014e36:	f003 0303 	and.w	r3, r3, #3
 8014e3a:	2b00      	cmp	r3, #0
 8014e3c:	d001      	beq.n	8014e42 <tcp_output+0x2de>
 8014e3e:	2301      	movs	r3, #1
 8014e40:	e000      	b.n	8014e44 <tcp_output+0x2e0>
 8014e42:	2300      	movs	r3, #0
 8014e44:	4423      	add	r3, r4
 8014e46:	2b00      	cmp	r3, #0
 8014e48:	d049      	beq.n	8014ede <tcp_output+0x37a>
      seg->next = NULL;
 8014e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e4c:	2200      	movs	r2, #0
 8014e4e:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8014e50:	687b      	ldr	r3, [r7, #4]
 8014e52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014e54:	2b00      	cmp	r3, #0
 8014e56:	d105      	bne.n	8014e64 <tcp_output+0x300>
        pcb->unacked = seg;
 8014e58:	687b      	ldr	r3, [r7, #4]
 8014e5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014e5c:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8014e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e60:	623b      	str	r3, [r7, #32]
 8014e62:	e03f      	b.n	8014ee4 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8014e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e66:	68db      	ldr	r3, [r3, #12]
 8014e68:	685b      	ldr	r3, [r3, #4]
 8014e6a:	4618      	mov	r0, r3
 8014e6c:	f7f9 ff73 	bl	800ed56 <lwip_htonl>
 8014e70:	4604      	mov	r4, r0
 8014e72:	6a3b      	ldr	r3, [r7, #32]
 8014e74:	68db      	ldr	r3, [r3, #12]
 8014e76:	685b      	ldr	r3, [r3, #4]
 8014e78:	4618      	mov	r0, r3
 8014e7a:	f7f9 ff6c 	bl	800ed56 <lwip_htonl>
 8014e7e:	4603      	mov	r3, r0
 8014e80:	1ae3      	subs	r3, r4, r3
 8014e82:	2b00      	cmp	r3, #0
 8014e84:	da24      	bge.n	8014ed0 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8014e86:	687b      	ldr	r3, [r7, #4]
 8014e88:	3370      	adds	r3, #112	; 0x70
 8014e8a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8014e8c:	e002      	b.n	8014e94 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8014e8e:	69fb      	ldr	r3, [r7, #28]
 8014e90:	681b      	ldr	r3, [r3, #0]
 8014e92:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8014e94:	69fb      	ldr	r3, [r7, #28]
 8014e96:	681b      	ldr	r3, [r3, #0]
 8014e98:	2b00      	cmp	r3, #0
 8014e9a:	d011      	beq.n	8014ec0 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8014e9c:	69fb      	ldr	r3, [r7, #28]
 8014e9e:	681b      	ldr	r3, [r3, #0]
 8014ea0:	68db      	ldr	r3, [r3, #12]
 8014ea2:	685b      	ldr	r3, [r3, #4]
 8014ea4:	4618      	mov	r0, r3
 8014ea6:	f7f9 ff56 	bl	800ed56 <lwip_htonl>
 8014eaa:	4604      	mov	r4, r0
 8014eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014eae:	68db      	ldr	r3, [r3, #12]
 8014eb0:	685b      	ldr	r3, [r3, #4]
 8014eb2:	4618      	mov	r0, r3
 8014eb4:	f7f9 ff4f 	bl	800ed56 <lwip_htonl>
 8014eb8:	4603      	mov	r3, r0
 8014eba:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8014ebc:	2b00      	cmp	r3, #0
 8014ebe:	dbe6      	blt.n	8014e8e <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8014ec0:	69fb      	ldr	r3, [r7, #28]
 8014ec2:	681a      	ldr	r2, [r3, #0]
 8014ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ec6:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8014ec8:	69fb      	ldr	r3, [r7, #28]
 8014eca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014ecc:	601a      	str	r2, [r3, #0]
 8014ece:	e009      	b.n	8014ee4 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8014ed0:	6a3b      	ldr	r3, [r7, #32]
 8014ed2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014ed4:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8014ed6:	6a3b      	ldr	r3, [r7, #32]
 8014ed8:	681b      	ldr	r3, [r3, #0]
 8014eda:	623b      	str	r3, [r7, #32]
 8014edc:	e002      	b.n	8014ee4 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8014ede:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014ee0:	f7fc fc43 	bl	801176a <tcp_seg_free>
    }
    seg = pcb->unsent;
 8014ee4:	687b      	ldr	r3, [r7, #4]
 8014ee6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014ee8:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8014eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014eec:	2b00      	cmp	r3, #0
 8014eee:	d012      	beq.n	8014f16 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8014ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ef2:	68db      	ldr	r3, [r3, #12]
 8014ef4:	685b      	ldr	r3, [r3, #4]
 8014ef6:	4618      	mov	r0, r3
 8014ef8:	f7f9 ff2d 	bl	800ed56 <lwip_htonl>
 8014efc:	4602      	mov	r2, r0
 8014efe:	687b      	ldr	r3, [r7, #4]
 8014f00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014f02:	1ad3      	subs	r3, r2, r3
 8014f04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014f06:	8912      	ldrh	r2, [r2, #8]
 8014f08:	4413      	add	r3, r2
  while (seg != NULL &&
 8014f0a:	69ba      	ldr	r2, [r7, #24]
 8014f0c:	429a      	cmp	r2, r3
 8014f0e:	f4bf aed9 	bcs.w	8014cc4 <tcp_output+0x160>
 8014f12:	e000      	b.n	8014f16 <tcp_output+0x3b2>
      break;
 8014f14:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8014f16:	687b      	ldr	r3, [r7, #4]
 8014f18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014f1a:	2b00      	cmp	r3, #0
 8014f1c:	d108      	bne.n	8014f30 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8014f1e:	687b      	ldr	r3, [r7, #4]
 8014f20:	2200      	movs	r2, #0
 8014f22:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8014f26:	e004      	b.n	8014f32 <tcp_output+0x3ce>
    goto output_done;
 8014f28:	bf00      	nop
 8014f2a:	e002      	b.n	8014f32 <tcp_output+0x3ce>
    goto output_done;
 8014f2c:	bf00      	nop
 8014f2e:	e000      	b.n	8014f32 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8014f30:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8014f32:	687b      	ldr	r3, [r7, #4]
 8014f34:	8b5b      	ldrh	r3, [r3, #26]
 8014f36:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8014f3a:	b29a      	uxth	r2, r3
 8014f3c:	687b      	ldr	r3, [r7, #4]
 8014f3e:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8014f40:	2300      	movs	r3, #0
}
 8014f42:	4618      	mov	r0, r3
 8014f44:	3728      	adds	r7, #40	; 0x28
 8014f46:	46bd      	mov	sp, r7
 8014f48:	bdb0      	pop	{r4, r5, r7, pc}
 8014f4a:	bf00      	nop

08014f4c <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8014f4c:	b580      	push	{r7, lr}
 8014f4e:	b082      	sub	sp, #8
 8014f50:	af00      	add	r7, sp, #0
 8014f52:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8014f54:	687b      	ldr	r3, [r7, #4]
 8014f56:	2b00      	cmp	r3, #0
 8014f58:	d106      	bne.n	8014f68 <tcp_output_segment_busy+0x1c>
 8014f5a:	4b09      	ldr	r3, [pc, #36]	; (8014f80 <tcp_output_segment_busy+0x34>)
 8014f5c:	f240 529a 	movw	r2, #1434	; 0x59a
 8014f60:	4908      	ldr	r1, [pc, #32]	; (8014f84 <tcp_output_segment_busy+0x38>)
 8014f62:	4809      	ldr	r0, [pc, #36]	; (8014f88 <tcp_output_segment_busy+0x3c>)
 8014f64:	f006 f9fc 	bl	801b360 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8014f68:	687b      	ldr	r3, [r7, #4]
 8014f6a:	685b      	ldr	r3, [r3, #4]
 8014f6c:	7b9b      	ldrb	r3, [r3, #14]
 8014f6e:	2b01      	cmp	r3, #1
 8014f70:	d001      	beq.n	8014f76 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8014f72:	2301      	movs	r3, #1
 8014f74:	e000      	b.n	8014f78 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8014f76:	2300      	movs	r3, #0
}
 8014f78:	4618      	mov	r0, r3
 8014f7a:	3708      	adds	r7, #8
 8014f7c:	46bd      	mov	sp, r7
 8014f7e:	bd80      	pop	{r7, pc}
 8014f80:	0802221c 	.word	0x0802221c
 8014f84:	080227b8 	.word	0x080227b8
 8014f88:	08022270 	.word	0x08022270

08014f8c <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8014f8c:	b5b0      	push	{r4, r5, r7, lr}
 8014f8e:	b08c      	sub	sp, #48	; 0x30
 8014f90:	af04      	add	r7, sp, #16
 8014f92:	60f8      	str	r0, [r7, #12]
 8014f94:	60b9      	str	r1, [r7, #8]
 8014f96:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8014f98:	68fb      	ldr	r3, [r7, #12]
 8014f9a:	2b00      	cmp	r3, #0
 8014f9c:	d106      	bne.n	8014fac <tcp_output_segment+0x20>
 8014f9e:	4b63      	ldr	r3, [pc, #396]	; (801512c <tcp_output_segment+0x1a0>)
 8014fa0:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8014fa4:	4962      	ldr	r1, [pc, #392]	; (8015130 <tcp_output_segment+0x1a4>)
 8014fa6:	4863      	ldr	r0, [pc, #396]	; (8015134 <tcp_output_segment+0x1a8>)
 8014fa8:	f006 f9da 	bl	801b360 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8014fac:	68bb      	ldr	r3, [r7, #8]
 8014fae:	2b00      	cmp	r3, #0
 8014fb0:	d106      	bne.n	8014fc0 <tcp_output_segment+0x34>
 8014fb2:	4b5e      	ldr	r3, [pc, #376]	; (801512c <tcp_output_segment+0x1a0>)
 8014fb4:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8014fb8:	495f      	ldr	r1, [pc, #380]	; (8015138 <tcp_output_segment+0x1ac>)
 8014fba:	485e      	ldr	r0, [pc, #376]	; (8015134 <tcp_output_segment+0x1a8>)
 8014fbc:	f006 f9d0 	bl	801b360 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8014fc0:	687b      	ldr	r3, [r7, #4]
 8014fc2:	2b00      	cmp	r3, #0
 8014fc4:	d106      	bne.n	8014fd4 <tcp_output_segment+0x48>
 8014fc6:	4b59      	ldr	r3, [pc, #356]	; (801512c <tcp_output_segment+0x1a0>)
 8014fc8:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8014fcc:	495b      	ldr	r1, [pc, #364]	; (801513c <tcp_output_segment+0x1b0>)
 8014fce:	4859      	ldr	r0, [pc, #356]	; (8015134 <tcp_output_segment+0x1a8>)
 8014fd0:	f006 f9c6 	bl	801b360 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8014fd4:	68f8      	ldr	r0, [r7, #12]
 8014fd6:	f7ff ffb9 	bl	8014f4c <tcp_output_segment_busy>
 8014fda:	4603      	mov	r3, r0
 8014fdc:	2b00      	cmp	r3, #0
 8014fde:	d001      	beq.n	8014fe4 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8014fe0:	2300      	movs	r3, #0
 8014fe2:	e09f      	b.n	8015124 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8014fe4:	68bb      	ldr	r3, [r7, #8]
 8014fe6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014fe8:	68fb      	ldr	r3, [r7, #12]
 8014fea:	68dc      	ldr	r4, [r3, #12]
 8014fec:	4610      	mov	r0, r2
 8014fee:	f7f9 feb2 	bl	800ed56 <lwip_htonl>
 8014ff2:	4603      	mov	r3, r0
 8014ff4:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8014ff6:	68bb      	ldr	r3, [r7, #8]
 8014ff8:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8014ffa:	68fb      	ldr	r3, [r7, #12]
 8014ffc:	68dc      	ldr	r4, [r3, #12]
 8014ffe:	4610      	mov	r0, r2
 8015000:	f7f9 fe94 	bl	800ed2c <lwip_htons>
 8015004:	4603      	mov	r3, r0
 8015006:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8015008:	68bb      	ldr	r3, [r7, #8]
 801500a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801500c:	68ba      	ldr	r2, [r7, #8]
 801500e:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8015010:	441a      	add	r2, r3
 8015012:	68bb      	ldr	r3, [r7, #8]
 8015014:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8015016:	68fb      	ldr	r3, [r7, #12]
 8015018:	68db      	ldr	r3, [r3, #12]
 801501a:	3314      	adds	r3, #20
 801501c:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 801501e:	68fb      	ldr	r3, [r7, #12]
 8015020:	7a9b      	ldrb	r3, [r3, #10]
 8015022:	f003 0301 	and.w	r3, r3, #1
 8015026:	2b00      	cmp	r3, #0
 8015028:	d015      	beq.n	8015056 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 801502a:	68bb      	ldr	r3, [r7, #8]
 801502c:	3304      	adds	r3, #4
 801502e:	461a      	mov	r2, r3
 8015030:	6879      	ldr	r1, [r7, #4]
 8015032:	f44f 70e6 	mov.w	r0, #460	; 0x1cc
 8015036:	f7fc fe8f 	bl	8011d58 <tcp_eff_send_mss_netif>
 801503a:	4603      	mov	r3, r0
 801503c:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 801503e:	8b7b      	ldrh	r3, [r7, #26]
 8015040:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8015044:	4618      	mov	r0, r3
 8015046:	f7f9 fe86 	bl	800ed56 <lwip_htonl>
 801504a:	4602      	mov	r2, r0
 801504c:	69fb      	ldr	r3, [r7, #28]
 801504e:	601a      	str	r2, [r3, #0]
    opts += 1;
 8015050:	69fb      	ldr	r3, [r7, #28]
 8015052:	3304      	adds	r3, #4
 8015054:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8015056:	68bb      	ldr	r3, [r7, #8]
 8015058:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801505c:	2b00      	cmp	r3, #0
 801505e:	da02      	bge.n	8015066 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8015060:	68bb      	ldr	r3, [r7, #8]
 8015062:	2200      	movs	r2, #0
 8015064:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8015066:	68bb      	ldr	r3, [r7, #8]
 8015068:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801506a:	2b00      	cmp	r3, #0
 801506c:	d10c      	bne.n	8015088 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 801506e:	4b34      	ldr	r3, [pc, #208]	; (8015140 <tcp_output_segment+0x1b4>)
 8015070:	681a      	ldr	r2, [r3, #0]
 8015072:	68bb      	ldr	r3, [r7, #8]
 8015074:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8015076:	68fb      	ldr	r3, [r7, #12]
 8015078:	68db      	ldr	r3, [r3, #12]
 801507a:	685b      	ldr	r3, [r3, #4]
 801507c:	4618      	mov	r0, r3
 801507e:	f7f9 fe6a 	bl	800ed56 <lwip_htonl>
 8015082:	4602      	mov	r2, r0
 8015084:	68bb      	ldr	r3, [r7, #8]
 8015086:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8015088:	68fb      	ldr	r3, [r7, #12]
 801508a:	68da      	ldr	r2, [r3, #12]
 801508c:	68fb      	ldr	r3, [r7, #12]
 801508e:	685b      	ldr	r3, [r3, #4]
 8015090:	685b      	ldr	r3, [r3, #4]
 8015092:	1ad3      	subs	r3, r2, r3
 8015094:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8015096:	68fb      	ldr	r3, [r7, #12]
 8015098:	685b      	ldr	r3, [r3, #4]
 801509a:	8959      	ldrh	r1, [r3, #10]
 801509c:	68fb      	ldr	r3, [r7, #12]
 801509e:	685b      	ldr	r3, [r3, #4]
 80150a0:	8b3a      	ldrh	r2, [r7, #24]
 80150a2:	1a8a      	subs	r2, r1, r2
 80150a4:	b292      	uxth	r2, r2
 80150a6:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 80150a8:	68fb      	ldr	r3, [r7, #12]
 80150aa:	685b      	ldr	r3, [r3, #4]
 80150ac:	8919      	ldrh	r1, [r3, #8]
 80150ae:	68fb      	ldr	r3, [r7, #12]
 80150b0:	685b      	ldr	r3, [r3, #4]
 80150b2:	8b3a      	ldrh	r2, [r7, #24]
 80150b4:	1a8a      	subs	r2, r1, r2
 80150b6:	b292      	uxth	r2, r2
 80150b8:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 80150ba:	68fb      	ldr	r3, [r7, #12]
 80150bc:	685b      	ldr	r3, [r3, #4]
 80150be:	68fa      	ldr	r2, [r7, #12]
 80150c0:	68d2      	ldr	r2, [r2, #12]
 80150c2:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 80150c4:	68fb      	ldr	r3, [r7, #12]
 80150c6:	68db      	ldr	r3, [r3, #12]
 80150c8:	2200      	movs	r2, #0
 80150ca:	741a      	strb	r2, [r3, #16]
 80150cc:	2200      	movs	r2, #0
 80150ce:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 80150d0:	68fb      	ldr	r3, [r7, #12]
 80150d2:	68db      	ldr	r3, [r3, #12]
 80150d4:	f103 0214 	add.w	r2, r3, #20
 80150d8:	68fb      	ldr	r3, [r7, #12]
 80150da:	7a9b      	ldrb	r3, [r3, #10]
 80150dc:	009b      	lsls	r3, r3, #2
 80150de:	f003 0304 	and.w	r3, r3, #4
 80150e2:	4413      	add	r3, r2
 80150e4:	69fa      	ldr	r2, [r7, #28]
 80150e6:	429a      	cmp	r2, r3
 80150e8:	d006      	beq.n	80150f8 <tcp_output_segment+0x16c>
 80150ea:	4b10      	ldr	r3, [pc, #64]	; (801512c <tcp_output_segment+0x1a0>)
 80150ec:	f240 621c 	movw	r2, #1564	; 0x61c
 80150f0:	4914      	ldr	r1, [pc, #80]	; (8015144 <tcp_output_segment+0x1b8>)
 80150f2:	4810      	ldr	r0, [pc, #64]	; (8015134 <tcp_output_segment+0x1a8>)
 80150f4:	f006 f934 	bl	801b360 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 80150f8:	68fb      	ldr	r3, [r7, #12]
 80150fa:	6858      	ldr	r0, [r3, #4]
 80150fc:	68b9      	ldr	r1, [r7, #8]
 80150fe:	68bb      	ldr	r3, [r7, #8]
 8015100:	1d1c      	adds	r4, r3, #4
 8015102:	68bb      	ldr	r3, [r7, #8]
 8015104:	7add      	ldrb	r5, [r3, #11]
 8015106:	68bb      	ldr	r3, [r7, #8]
 8015108:	7a9b      	ldrb	r3, [r3, #10]
 801510a:	687a      	ldr	r2, [r7, #4]
 801510c:	9202      	str	r2, [sp, #8]
 801510e:	2206      	movs	r2, #6
 8015110:	9201      	str	r2, [sp, #4]
 8015112:	9300      	str	r3, [sp, #0]
 8015114:	462b      	mov	r3, r5
 8015116:	4622      	mov	r2, r4
 8015118:	f004 fb6c 	bl	80197f4 <ip4_output_if>
 801511c:	4603      	mov	r3, r0
 801511e:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8015120:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8015124:	4618      	mov	r0, r3
 8015126:	3720      	adds	r7, #32
 8015128:	46bd      	mov	sp, r7
 801512a:	bdb0      	pop	{r4, r5, r7, pc}
 801512c:	0802221c 	.word	0x0802221c
 8015130:	080227e0 	.word	0x080227e0
 8015134:	08022270 	.word	0x08022270
 8015138:	08022800 	.word	0x08022800
 801513c:	08022820 	.word	0x08022820
 8015140:	20007634 	.word	0x20007634
 8015144:	08022844 	.word	0x08022844

08015148 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8015148:	b5b0      	push	{r4, r5, r7, lr}
 801514a:	b084      	sub	sp, #16
 801514c:	af00      	add	r7, sp, #0
 801514e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8015150:	687b      	ldr	r3, [r7, #4]
 8015152:	2b00      	cmp	r3, #0
 8015154:	d106      	bne.n	8015164 <tcp_rexmit_rto_prepare+0x1c>
 8015156:	4b31      	ldr	r3, [pc, #196]	; (801521c <tcp_rexmit_rto_prepare+0xd4>)
 8015158:	f240 6263 	movw	r2, #1635	; 0x663
 801515c:	4930      	ldr	r1, [pc, #192]	; (8015220 <tcp_rexmit_rto_prepare+0xd8>)
 801515e:	4831      	ldr	r0, [pc, #196]	; (8015224 <tcp_rexmit_rto_prepare+0xdc>)
 8015160:	f006 f8fe 	bl	801b360 <iprintf>

  if (pcb->unacked == NULL) {
 8015164:	687b      	ldr	r3, [r7, #4]
 8015166:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015168:	2b00      	cmp	r3, #0
 801516a:	d102      	bne.n	8015172 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 801516c:	f06f 0305 	mvn.w	r3, #5
 8015170:	e050      	b.n	8015214 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8015172:	687b      	ldr	r3, [r7, #4]
 8015174:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015176:	60fb      	str	r3, [r7, #12]
 8015178:	e00b      	b.n	8015192 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 801517a:	68f8      	ldr	r0, [r7, #12]
 801517c:	f7ff fee6 	bl	8014f4c <tcp_output_segment_busy>
 8015180:	4603      	mov	r3, r0
 8015182:	2b00      	cmp	r3, #0
 8015184:	d002      	beq.n	801518c <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8015186:	f06f 0305 	mvn.w	r3, #5
 801518a:	e043      	b.n	8015214 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801518c:	68fb      	ldr	r3, [r7, #12]
 801518e:	681b      	ldr	r3, [r3, #0]
 8015190:	60fb      	str	r3, [r7, #12]
 8015192:	68fb      	ldr	r3, [r7, #12]
 8015194:	681b      	ldr	r3, [r3, #0]
 8015196:	2b00      	cmp	r3, #0
 8015198:	d1ef      	bne.n	801517a <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 801519a:	68f8      	ldr	r0, [r7, #12]
 801519c:	f7ff fed6 	bl	8014f4c <tcp_output_segment_busy>
 80151a0:	4603      	mov	r3, r0
 80151a2:	2b00      	cmp	r3, #0
 80151a4:	d002      	beq.n	80151ac <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 80151a6:	f06f 0305 	mvn.w	r3, #5
 80151aa:	e033      	b.n	8015214 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 80151ac:	687b      	ldr	r3, [r7, #4]
 80151ae:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80151b0:	68fb      	ldr	r3, [r7, #12]
 80151b2:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 80151b4:	687b      	ldr	r3, [r7, #4]
 80151b6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80151b8:	687b      	ldr	r3, [r7, #4]
 80151ba:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 80151bc:	687b      	ldr	r3, [r7, #4]
 80151be:	2200      	movs	r2, #0
 80151c0:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 80151c2:	687b      	ldr	r3, [r7, #4]
 80151c4:	8b5b      	ldrh	r3, [r3, #26]
 80151c6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80151ca:	b29a      	uxth	r2, r3
 80151cc:	687b      	ldr	r3, [r7, #4]
 80151ce:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80151d0:	68fb      	ldr	r3, [r7, #12]
 80151d2:	68db      	ldr	r3, [r3, #12]
 80151d4:	685b      	ldr	r3, [r3, #4]
 80151d6:	4618      	mov	r0, r3
 80151d8:	f7f9 fdbd 	bl	800ed56 <lwip_htonl>
 80151dc:	4604      	mov	r4, r0
 80151de:	68fb      	ldr	r3, [r7, #12]
 80151e0:	891b      	ldrh	r3, [r3, #8]
 80151e2:	461d      	mov	r5, r3
 80151e4:	68fb      	ldr	r3, [r7, #12]
 80151e6:	68db      	ldr	r3, [r3, #12]
 80151e8:	899b      	ldrh	r3, [r3, #12]
 80151ea:	b29b      	uxth	r3, r3
 80151ec:	4618      	mov	r0, r3
 80151ee:	f7f9 fd9d 	bl	800ed2c <lwip_htons>
 80151f2:	4603      	mov	r3, r0
 80151f4:	b2db      	uxtb	r3, r3
 80151f6:	f003 0303 	and.w	r3, r3, #3
 80151fa:	2b00      	cmp	r3, #0
 80151fc:	d001      	beq.n	8015202 <tcp_rexmit_rto_prepare+0xba>
 80151fe:	2301      	movs	r3, #1
 8015200:	e000      	b.n	8015204 <tcp_rexmit_rto_prepare+0xbc>
 8015202:	2300      	movs	r3, #0
 8015204:	442b      	add	r3, r5
 8015206:	18e2      	adds	r2, r4, r3
 8015208:	687b      	ldr	r3, [r7, #4]
 801520a:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 801520c:	687b      	ldr	r3, [r7, #4]
 801520e:	2200      	movs	r2, #0
 8015210:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 8015212:	2300      	movs	r3, #0
}
 8015214:	4618      	mov	r0, r3
 8015216:	3710      	adds	r7, #16
 8015218:	46bd      	mov	sp, r7
 801521a:	bdb0      	pop	{r4, r5, r7, pc}
 801521c:	0802221c 	.word	0x0802221c
 8015220:	08022858 	.word	0x08022858
 8015224:	08022270 	.word	0x08022270

08015228 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8015228:	b580      	push	{r7, lr}
 801522a:	b082      	sub	sp, #8
 801522c:	af00      	add	r7, sp, #0
 801522e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8015230:	687b      	ldr	r3, [r7, #4]
 8015232:	2b00      	cmp	r3, #0
 8015234:	d106      	bne.n	8015244 <tcp_rexmit_rto_commit+0x1c>
 8015236:	4b0d      	ldr	r3, [pc, #52]	; (801526c <tcp_rexmit_rto_commit+0x44>)
 8015238:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 801523c:	490c      	ldr	r1, [pc, #48]	; (8015270 <tcp_rexmit_rto_commit+0x48>)
 801523e:	480d      	ldr	r0, [pc, #52]	; (8015274 <tcp_rexmit_rto_commit+0x4c>)
 8015240:	f006 f88e 	bl	801b360 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8015244:	687b      	ldr	r3, [r7, #4]
 8015246:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801524a:	2bff      	cmp	r3, #255	; 0xff
 801524c:	d007      	beq.n	801525e <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 801524e:	687b      	ldr	r3, [r7, #4]
 8015250:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8015254:	3301      	adds	r3, #1
 8015256:	b2da      	uxtb	r2, r3
 8015258:	687b      	ldr	r3, [r7, #4]
 801525a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 801525e:	6878      	ldr	r0, [r7, #4]
 8015260:	f7ff fc80 	bl	8014b64 <tcp_output>
}
 8015264:	bf00      	nop
 8015266:	3708      	adds	r7, #8
 8015268:	46bd      	mov	sp, r7
 801526a:	bd80      	pop	{r7, pc}
 801526c:	0802221c 	.word	0x0802221c
 8015270:	0802287c 	.word	0x0802287c
 8015274:	08022270 	.word	0x08022270

08015278 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8015278:	b580      	push	{r7, lr}
 801527a:	b082      	sub	sp, #8
 801527c:	af00      	add	r7, sp, #0
 801527e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8015280:	687b      	ldr	r3, [r7, #4]
 8015282:	2b00      	cmp	r3, #0
 8015284:	d106      	bne.n	8015294 <tcp_rexmit_rto+0x1c>
 8015286:	4b0a      	ldr	r3, [pc, #40]	; (80152b0 <tcp_rexmit_rto+0x38>)
 8015288:	f240 62ad 	movw	r2, #1709	; 0x6ad
 801528c:	4909      	ldr	r1, [pc, #36]	; (80152b4 <tcp_rexmit_rto+0x3c>)
 801528e:	480a      	ldr	r0, [pc, #40]	; (80152b8 <tcp_rexmit_rto+0x40>)
 8015290:	f006 f866 	bl	801b360 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8015294:	6878      	ldr	r0, [r7, #4]
 8015296:	f7ff ff57 	bl	8015148 <tcp_rexmit_rto_prepare>
 801529a:	4603      	mov	r3, r0
 801529c:	2b00      	cmp	r3, #0
 801529e:	d102      	bne.n	80152a6 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 80152a0:	6878      	ldr	r0, [r7, #4]
 80152a2:	f7ff ffc1 	bl	8015228 <tcp_rexmit_rto_commit>
  }
}
 80152a6:	bf00      	nop
 80152a8:	3708      	adds	r7, #8
 80152aa:	46bd      	mov	sp, r7
 80152ac:	bd80      	pop	{r7, pc}
 80152ae:	bf00      	nop
 80152b0:	0802221c 	.word	0x0802221c
 80152b4:	080228a0 	.word	0x080228a0
 80152b8:	08022270 	.word	0x08022270

080152bc <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 80152bc:	b590      	push	{r4, r7, lr}
 80152be:	b085      	sub	sp, #20
 80152c0:	af00      	add	r7, sp, #0
 80152c2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 80152c4:	687b      	ldr	r3, [r7, #4]
 80152c6:	2b00      	cmp	r3, #0
 80152c8:	d106      	bne.n	80152d8 <tcp_rexmit+0x1c>
 80152ca:	4b2f      	ldr	r3, [pc, #188]	; (8015388 <tcp_rexmit+0xcc>)
 80152cc:	f240 62c1 	movw	r2, #1729	; 0x6c1
 80152d0:	492e      	ldr	r1, [pc, #184]	; (801538c <tcp_rexmit+0xd0>)
 80152d2:	482f      	ldr	r0, [pc, #188]	; (8015390 <tcp_rexmit+0xd4>)
 80152d4:	f006 f844 	bl	801b360 <iprintf>

  if (pcb->unacked == NULL) {
 80152d8:	687b      	ldr	r3, [r7, #4]
 80152da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80152dc:	2b00      	cmp	r3, #0
 80152de:	d102      	bne.n	80152e6 <tcp_rexmit+0x2a>
    return ERR_VAL;
 80152e0:	f06f 0305 	mvn.w	r3, #5
 80152e4:	e04c      	b.n	8015380 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 80152e6:	687b      	ldr	r3, [r7, #4]
 80152e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80152ea:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 80152ec:	68b8      	ldr	r0, [r7, #8]
 80152ee:	f7ff fe2d 	bl	8014f4c <tcp_output_segment_busy>
 80152f2:	4603      	mov	r3, r0
 80152f4:	2b00      	cmp	r3, #0
 80152f6:	d002      	beq.n	80152fe <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 80152f8:	f06f 0305 	mvn.w	r3, #5
 80152fc:	e040      	b.n	8015380 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 80152fe:	68bb      	ldr	r3, [r7, #8]
 8015300:	681a      	ldr	r2, [r3, #0]
 8015302:	687b      	ldr	r3, [r7, #4]
 8015304:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 8015306:	687b      	ldr	r3, [r7, #4]
 8015308:	336c      	adds	r3, #108	; 0x6c
 801530a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801530c:	e002      	b.n	8015314 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 801530e:	68fb      	ldr	r3, [r7, #12]
 8015310:	681b      	ldr	r3, [r3, #0]
 8015312:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8015314:	68fb      	ldr	r3, [r7, #12]
 8015316:	681b      	ldr	r3, [r3, #0]
 8015318:	2b00      	cmp	r3, #0
 801531a:	d011      	beq.n	8015340 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801531c:	68fb      	ldr	r3, [r7, #12]
 801531e:	681b      	ldr	r3, [r3, #0]
 8015320:	68db      	ldr	r3, [r3, #12]
 8015322:	685b      	ldr	r3, [r3, #4]
 8015324:	4618      	mov	r0, r3
 8015326:	f7f9 fd16 	bl	800ed56 <lwip_htonl>
 801532a:	4604      	mov	r4, r0
 801532c:	68bb      	ldr	r3, [r7, #8]
 801532e:	68db      	ldr	r3, [r3, #12]
 8015330:	685b      	ldr	r3, [r3, #4]
 8015332:	4618      	mov	r0, r3
 8015334:	f7f9 fd0f 	bl	800ed56 <lwip_htonl>
 8015338:	4603      	mov	r3, r0
 801533a:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 801533c:	2b00      	cmp	r3, #0
 801533e:	dbe6      	blt.n	801530e <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8015340:	68fb      	ldr	r3, [r7, #12]
 8015342:	681a      	ldr	r2, [r3, #0]
 8015344:	68bb      	ldr	r3, [r7, #8]
 8015346:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8015348:	68fb      	ldr	r3, [r7, #12]
 801534a:	68ba      	ldr	r2, [r7, #8]
 801534c:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 801534e:	68bb      	ldr	r3, [r7, #8]
 8015350:	681b      	ldr	r3, [r3, #0]
 8015352:	2b00      	cmp	r3, #0
 8015354:	d103      	bne.n	801535e <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8015356:	687b      	ldr	r3, [r7, #4]
 8015358:	2200      	movs	r2, #0
 801535a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 801535e:	687b      	ldr	r3, [r7, #4]
 8015360:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8015364:	2bff      	cmp	r3, #255	; 0xff
 8015366:	d007      	beq.n	8015378 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8015368:	687b      	ldr	r3, [r7, #4]
 801536a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801536e:	3301      	adds	r3, #1
 8015370:	b2da      	uxtb	r2, r3
 8015372:	687b      	ldr	r3, [r7, #4]
 8015374:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8015378:	687b      	ldr	r3, [r7, #4]
 801537a:	2200      	movs	r2, #0
 801537c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 801537e:	2300      	movs	r3, #0
}
 8015380:	4618      	mov	r0, r3
 8015382:	3714      	adds	r7, #20
 8015384:	46bd      	mov	sp, r7
 8015386:	bd90      	pop	{r4, r7, pc}
 8015388:	0802221c 	.word	0x0802221c
 801538c:	080228bc 	.word	0x080228bc
 8015390:	08022270 	.word	0x08022270

08015394 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8015394:	b580      	push	{r7, lr}
 8015396:	b082      	sub	sp, #8
 8015398:	af00      	add	r7, sp, #0
 801539a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 801539c:	687b      	ldr	r3, [r7, #4]
 801539e:	2b00      	cmp	r3, #0
 80153a0:	d106      	bne.n	80153b0 <tcp_rexmit_fast+0x1c>
 80153a2:	4b2a      	ldr	r3, [pc, #168]	; (801544c <tcp_rexmit_fast+0xb8>)
 80153a4:	f240 62f9 	movw	r2, #1785	; 0x6f9
 80153a8:	4929      	ldr	r1, [pc, #164]	; (8015450 <tcp_rexmit_fast+0xbc>)
 80153aa:	482a      	ldr	r0, [pc, #168]	; (8015454 <tcp_rexmit_fast+0xc0>)
 80153ac:	f005 ffd8 	bl	801b360 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 80153b0:	687b      	ldr	r3, [r7, #4]
 80153b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80153b4:	2b00      	cmp	r3, #0
 80153b6:	d044      	beq.n	8015442 <tcp_rexmit_fast+0xae>
 80153b8:	687b      	ldr	r3, [r7, #4]
 80153ba:	8b5b      	ldrh	r3, [r3, #26]
 80153bc:	f003 0304 	and.w	r3, r3, #4
 80153c0:	2b00      	cmp	r3, #0
 80153c2:	d13e      	bne.n	8015442 <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 80153c4:	6878      	ldr	r0, [r7, #4]
 80153c6:	f7ff ff79 	bl	80152bc <tcp_rexmit>
 80153ca:	4603      	mov	r3, r0
 80153cc:	2b00      	cmp	r3, #0
 80153ce:	d138      	bne.n	8015442 <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 80153d0:	687b      	ldr	r3, [r7, #4]
 80153d2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80153d6:	687b      	ldr	r3, [r7, #4]
 80153d8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80153dc:	4293      	cmp	r3, r2
 80153de:	bf28      	it	cs
 80153e0:	4613      	movcs	r3, r2
 80153e2:	b29b      	uxth	r3, r3
 80153e4:	0fda      	lsrs	r2, r3, #31
 80153e6:	4413      	add	r3, r2
 80153e8:	105b      	asrs	r3, r3, #1
 80153ea:	b29a      	uxth	r2, r3
 80153ec:	687b      	ldr	r3, [r7, #4]
 80153ee:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 80153f2:	687b      	ldr	r3, [r7, #4]
 80153f4:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80153f8:	461a      	mov	r2, r3
 80153fa:	687b      	ldr	r3, [r7, #4]
 80153fc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80153fe:	005b      	lsls	r3, r3, #1
 8015400:	429a      	cmp	r2, r3
 8015402:	d206      	bcs.n	8015412 <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8015404:	687b      	ldr	r3, [r7, #4]
 8015406:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015408:	005b      	lsls	r3, r3, #1
 801540a:	b29a      	uxth	r2, r3
 801540c:	687b      	ldr	r3, [r7, #4]
 801540e:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8015412:	687b      	ldr	r3, [r7, #4]
 8015414:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8015418:	687b      	ldr	r3, [r7, #4]
 801541a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801541c:	4619      	mov	r1, r3
 801541e:	0049      	lsls	r1, r1, #1
 8015420:	440b      	add	r3, r1
 8015422:	b29b      	uxth	r3, r3
 8015424:	4413      	add	r3, r2
 8015426:	b29a      	uxth	r2, r3
 8015428:	687b      	ldr	r3, [r7, #4]
 801542a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 801542e:	687b      	ldr	r3, [r7, #4]
 8015430:	8b5b      	ldrh	r3, [r3, #26]
 8015432:	f043 0304 	orr.w	r3, r3, #4
 8015436:	b29a      	uxth	r2, r3
 8015438:	687b      	ldr	r3, [r7, #4]
 801543a:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 801543c:	687b      	ldr	r3, [r7, #4]
 801543e:	2200      	movs	r2, #0
 8015440:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8015442:	bf00      	nop
 8015444:	3708      	adds	r7, #8
 8015446:	46bd      	mov	sp, r7
 8015448:	bd80      	pop	{r7, pc}
 801544a:	bf00      	nop
 801544c:	0802221c 	.word	0x0802221c
 8015450:	080228d4 	.word	0x080228d4
 8015454:	08022270 	.word	0x08022270

08015458 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8015458:	b580      	push	{r7, lr}
 801545a:	b086      	sub	sp, #24
 801545c:	af00      	add	r7, sp, #0
 801545e:	60f8      	str	r0, [r7, #12]
 8015460:	607b      	str	r3, [r7, #4]
 8015462:	460b      	mov	r3, r1
 8015464:	817b      	strh	r3, [r7, #10]
 8015466:	4613      	mov	r3, r2
 8015468:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801546a:	897a      	ldrh	r2, [r7, #10]
 801546c:	893b      	ldrh	r3, [r7, #8]
 801546e:	4413      	add	r3, r2
 8015470:	b29b      	uxth	r3, r3
 8015472:	3314      	adds	r3, #20
 8015474:	b29b      	uxth	r3, r3
 8015476:	f44f 7220 	mov.w	r2, #640	; 0x280
 801547a:	4619      	mov	r1, r3
 801547c:	2022      	movs	r0, #34	; 0x22
 801547e:	f7fa fc0d 	bl	800fc9c <pbuf_alloc>
 8015482:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8015484:	697b      	ldr	r3, [r7, #20]
 8015486:	2b00      	cmp	r3, #0
 8015488:	d04d      	beq.n	8015526 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801548a:	897b      	ldrh	r3, [r7, #10]
 801548c:	3313      	adds	r3, #19
 801548e:	697a      	ldr	r2, [r7, #20]
 8015490:	8952      	ldrh	r2, [r2, #10]
 8015492:	4293      	cmp	r3, r2
 8015494:	db06      	blt.n	80154a4 <tcp_output_alloc_header_common+0x4c>
 8015496:	4b26      	ldr	r3, [pc, #152]	; (8015530 <tcp_output_alloc_header_common+0xd8>)
 8015498:	f240 7223 	movw	r2, #1827	; 0x723
 801549c:	4925      	ldr	r1, [pc, #148]	; (8015534 <tcp_output_alloc_header_common+0xdc>)
 801549e:	4826      	ldr	r0, [pc, #152]	; (8015538 <tcp_output_alloc_header_common+0xe0>)
 80154a0:	f005 ff5e 	bl	801b360 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 80154a4:	697b      	ldr	r3, [r7, #20]
 80154a6:	685b      	ldr	r3, [r3, #4]
 80154a8:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 80154aa:	8c3b      	ldrh	r3, [r7, #32]
 80154ac:	4618      	mov	r0, r3
 80154ae:	f7f9 fc3d 	bl	800ed2c <lwip_htons>
 80154b2:	4603      	mov	r3, r0
 80154b4:	461a      	mov	r2, r3
 80154b6:	693b      	ldr	r3, [r7, #16]
 80154b8:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 80154ba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80154bc:	4618      	mov	r0, r3
 80154be:	f7f9 fc35 	bl	800ed2c <lwip_htons>
 80154c2:	4603      	mov	r3, r0
 80154c4:	461a      	mov	r2, r3
 80154c6:	693b      	ldr	r3, [r7, #16]
 80154c8:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 80154ca:	693b      	ldr	r3, [r7, #16]
 80154cc:	687a      	ldr	r2, [r7, #4]
 80154ce:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 80154d0:	68f8      	ldr	r0, [r7, #12]
 80154d2:	f7f9 fc40 	bl	800ed56 <lwip_htonl>
 80154d6:	4602      	mov	r2, r0
 80154d8:	693b      	ldr	r3, [r7, #16]
 80154da:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 80154dc:	897b      	ldrh	r3, [r7, #10]
 80154de:	089b      	lsrs	r3, r3, #2
 80154e0:	b29b      	uxth	r3, r3
 80154e2:	3305      	adds	r3, #5
 80154e4:	b29b      	uxth	r3, r3
 80154e6:	031b      	lsls	r3, r3, #12
 80154e8:	b29a      	uxth	r2, r3
 80154ea:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80154ee:	b29b      	uxth	r3, r3
 80154f0:	4313      	orrs	r3, r2
 80154f2:	b29b      	uxth	r3, r3
 80154f4:	4618      	mov	r0, r3
 80154f6:	f7f9 fc19 	bl	800ed2c <lwip_htons>
 80154fa:	4603      	mov	r3, r0
 80154fc:	461a      	mov	r2, r3
 80154fe:	693b      	ldr	r3, [r7, #16]
 8015500:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8015502:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8015504:	4618      	mov	r0, r3
 8015506:	f7f9 fc11 	bl	800ed2c <lwip_htons>
 801550a:	4603      	mov	r3, r0
 801550c:	461a      	mov	r2, r3
 801550e:	693b      	ldr	r3, [r7, #16]
 8015510:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8015512:	693b      	ldr	r3, [r7, #16]
 8015514:	2200      	movs	r2, #0
 8015516:	741a      	strb	r2, [r3, #16]
 8015518:	2200      	movs	r2, #0
 801551a:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 801551c:	693b      	ldr	r3, [r7, #16]
 801551e:	2200      	movs	r2, #0
 8015520:	749a      	strb	r2, [r3, #18]
 8015522:	2200      	movs	r2, #0
 8015524:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8015526:	697b      	ldr	r3, [r7, #20]
}
 8015528:	4618      	mov	r0, r3
 801552a:	3718      	adds	r7, #24
 801552c:	46bd      	mov	sp, r7
 801552e:	bd80      	pop	{r7, pc}
 8015530:	0802221c 	.word	0x0802221c
 8015534:	080228f4 	.word	0x080228f4
 8015538:	08022270 	.word	0x08022270

0801553c <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 801553c:	b5b0      	push	{r4, r5, r7, lr}
 801553e:	b08a      	sub	sp, #40	; 0x28
 8015540:	af04      	add	r7, sp, #16
 8015542:	60f8      	str	r0, [r7, #12]
 8015544:	607b      	str	r3, [r7, #4]
 8015546:	460b      	mov	r3, r1
 8015548:	817b      	strh	r3, [r7, #10]
 801554a:	4613      	mov	r3, r2
 801554c:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801554e:	68fb      	ldr	r3, [r7, #12]
 8015550:	2b00      	cmp	r3, #0
 8015552:	d106      	bne.n	8015562 <tcp_output_alloc_header+0x26>
 8015554:	4b15      	ldr	r3, [pc, #84]	; (80155ac <tcp_output_alloc_header+0x70>)
 8015556:	f240 7242 	movw	r2, #1858	; 0x742
 801555a:	4915      	ldr	r1, [pc, #84]	; (80155b0 <tcp_output_alloc_header+0x74>)
 801555c:	4815      	ldr	r0, [pc, #84]	; (80155b4 <tcp_output_alloc_header+0x78>)
 801555e:	f005 feff 	bl	801b360 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8015562:	68fb      	ldr	r3, [r7, #12]
 8015564:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8015566:	68fb      	ldr	r3, [r7, #12]
 8015568:	8adb      	ldrh	r3, [r3, #22]
 801556a:	68fa      	ldr	r2, [r7, #12]
 801556c:	8b12      	ldrh	r2, [r2, #24]
 801556e:	68f9      	ldr	r1, [r7, #12]
 8015570:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 8015572:	893d      	ldrh	r5, [r7, #8]
 8015574:	897c      	ldrh	r4, [r7, #10]
 8015576:	9103      	str	r1, [sp, #12]
 8015578:	2110      	movs	r1, #16
 801557a:	9102      	str	r1, [sp, #8]
 801557c:	9201      	str	r2, [sp, #4]
 801557e:	9300      	str	r3, [sp, #0]
 8015580:	687b      	ldr	r3, [r7, #4]
 8015582:	462a      	mov	r2, r5
 8015584:	4621      	mov	r1, r4
 8015586:	f7ff ff67 	bl	8015458 <tcp_output_alloc_header_common>
 801558a:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 801558c:	697b      	ldr	r3, [r7, #20]
 801558e:	2b00      	cmp	r3, #0
 8015590:	d006      	beq.n	80155a0 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8015592:	68fb      	ldr	r3, [r7, #12]
 8015594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015596:	68fa      	ldr	r2, [r7, #12]
 8015598:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801559a:	441a      	add	r2, r3
 801559c:	68fb      	ldr	r3, [r7, #12]
 801559e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 80155a0:	697b      	ldr	r3, [r7, #20]
}
 80155a2:	4618      	mov	r0, r3
 80155a4:	3718      	adds	r7, #24
 80155a6:	46bd      	mov	sp, r7
 80155a8:	bdb0      	pop	{r4, r5, r7, pc}
 80155aa:	bf00      	nop
 80155ac:	0802221c 	.word	0x0802221c
 80155b0:	08022924 	.word	0x08022924
 80155b4:	08022270 	.word	0x08022270

080155b8 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 80155b8:	b580      	push	{r7, lr}
 80155ba:	b088      	sub	sp, #32
 80155bc:	af00      	add	r7, sp, #0
 80155be:	60f8      	str	r0, [r7, #12]
 80155c0:	60b9      	str	r1, [r7, #8]
 80155c2:	4611      	mov	r1, r2
 80155c4:	461a      	mov	r2, r3
 80155c6:	460b      	mov	r3, r1
 80155c8:	71fb      	strb	r3, [r7, #7]
 80155ca:	4613      	mov	r3, r2
 80155cc:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 80155ce:	2300      	movs	r3, #0
 80155d0:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 80155d2:	68bb      	ldr	r3, [r7, #8]
 80155d4:	2b00      	cmp	r3, #0
 80155d6:	d106      	bne.n	80155e6 <tcp_output_fill_options+0x2e>
 80155d8:	4b13      	ldr	r3, [pc, #76]	; (8015628 <tcp_output_fill_options+0x70>)
 80155da:	f240 7256 	movw	r2, #1878	; 0x756
 80155de:	4913      	ldr	r1, [pc, #76]	; (801562c <tcp_output_fill_options+0x74>)
 80155e0:	4813      	ldr	r0, [pc, #76]	; (8015630 <tcp_output_fill_options+0x78>)
 80155e2:	f005 febd 	bl	801b360 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 80155e6:	68bb      	ldr	r3, [r7, #8]
 80155e8:	685b      	ldr	r3, [r3, #4]
 80155ea:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 80155ec:	69bb      	ldr	r3, [r7, #24]
 80155ee:	3314      	adds	r3, #20
 80155f0:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 80155f2:	69bb      	ldr	r3, [r7, #24]
 80155f4:	f103 0214 	add.w	r2, r3, #20
 80155f8:	8bfb      	ldrh	r3, [r7, #30]
 80155fa:	009b      	lsls	r3, r3, #2
 80155fc:	4619      	mov	r1, r3
 80155fe:	79fb      	ldrb	r3, [r7, #7]
 8015600:	009b      	lsls	r3, r3, #2
 8015602:	f003 0304 	and.w	r3, r3, #4
 8015606:	440b      	add	r3, r1
 8015608:	4413      	add	r3, r2
 801560a:	697a      	ldr	r2, [r7, #20]
 801560c:	429a      	cmp	r2, r3
 801560e:	d006      	beq.n	801561e <tcp_output_fill_options+0x66>
 8015610:	4b05      	ldr	r3, [pc, #20]	; (8015628 <tcp_output_fill_options+0x70>)
 8015612:	f240 7275 	movw	r2, #1909	; 0x775
 8015616:	4907      	ldr	r1, [pc, #28]	; (8015634 <tcp_output_fill_options+0x7c>)
 8015618:	4805      	ldr	r0, [pc, #20]	; (8015630 <tcp_output_fill_options+0x78>)
 801561a:	f005 fea1 	bl	801b360 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 801561e:	bf00      	nop
 8015620:	3720      	adds	r7, #32
 8015622:	46bd      	mov	sp, r7
 8015624:	bd80      	pop	{r7, pc}
 8015626:	bf00      	nop
 8015628:	0802221c 	.word	0x0802221c
 801562c:	0802294c 	.word	0x0802294c
 8015630:	08022270 	.word	0x08022270
 8015634:	08022844 	.word	0x08022844

08015638 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8015638:	b580      	push	{r7, lr}
 801563a:	b08a      	sub	sp, #40	; 0x28
 801563c:	af04      	add	r7, sp, #16
 801563e:	60f8      	str	r0, [r7, #12]
 8015640:	60b9      	str	r1, [r7, #8]
 8015642:	607a      	str	r2, [r7, #4]
 8015644:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8015646:	68bb      	ldr	r3, [r7, #8]
 8015648:	2b00      	cmp	r3, #0
 801564a:	d106      	bne.n	801565a <tcp_output_control_segment+0x22>
 801564c:	4b1c      	ldr	r3, [pc, #112]	; (80156c0 <tcp_output_control_segment+0x88>)
 801564e:	f240 7287 	movw	r2, #1927	; 0x787
 8015652:	491c      	ldr	r1, [pc, #112]	; (80156c4 <tcp_output_control_segment+0x8c>)
 8015654:	481c      	ldr	r0, [pc, #112]	; (80156c8 <tcp_output_control_segment+0x90>)
 8015656:	f005 fe83 	bl	801b360 <iprintf>

  netif = tcp_route(pcb, src, dst);
 801565a:	683a      	ldr	r2, [r7, #0]
 801565c:	6879      	ldr	r1, [r7, #4]
 801565e:	68f8      	ldr	r0, [r7, #12]
 8015660:	f7fe ff40 	bl	80144e4 <tcp_route>
 8015664:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8015666:	693b      	ldr	r3, [r7, #16]
 8015668:	2b00      	cmp	r3, #0
 801566a:	d102      	bne.n	8015672 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 801566c:	23fc      	movs	r3, #252	; 0xfc
 801566e:	75fb      	strb	r3, [r7, #23]
 8015670:	e01c      	b.n	80156ac <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8015672:	68fb      	ldr	r3, [r7, #12]
 8015674:	2b00      	cmp	r3, #0
 8015676:	d006      	beq.n	8015686 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8015678:	68fb      	ldr	r3, [r7, #12]
 801567a:	7adb      	ldrb	r3, [r3, #11]
 801567c:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 801567e:	68fb      	ldr	r3, [r7, #12]
 8015680:	7a9b      	ldrb	r3, [r3, #10]
 8015682:	757b      	strb	r3, [r7, #21]
 8015684:	e003      	b.n	801568e <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8015686:	23ff      	movs	r3, #255	; 0xff
 8015688:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 801568a:	2300      	movs	r3, #0
 801568c:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801568e:	7dba      	ldrb	r2, [r7, #22]
 8015690:	693b      	ldr	r3, [r7, #16]
 8015692:	9302      	str	r3, [sp, #8]
 8015694:	2306      	movs	r3, #6
 8015696:	9301      	str	r3, [sp, #4]
 8015698:	7d7b      	ldrb	r3, [r7, #21]
 801569a:	9300      	str	r3, [sp, #0]
 801569c:	4613      	mov	r3, r2
 801569e:	683a      	ldr	r2, [r7, #0]
 80156a0:	6879      	ldr	r1, [r7, #4]
 80156a2:	68b8      	ldr	r0, [r7, #8]
 80156a4:	f004 f8a6 	bl	80197f4 <ip4_output_if>
 80156a8:	4603      	mov	r3, r0
 80156aa:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 80156ac:	68b8      	ldr	r0, [r7, #8]
 80156ae:	f7fa fdd9 	bl	8010264 <pbuf_free>
  return err;
 80156b2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80156b6:	4618      	mov	r0, r3
 80156b8:	3718      	adds	r7, #24
 80156ba:	46bd      	mov	sp, r7
 80156bc:	bd80      	pop	{r7, pc}
 80156be:	bf00      	nop
 80156c0:	0802221c 	.word	0x0802221c
 80156c4:	08022974 	.word	0x08022974
 80156c8:	08022270 	.word	0x08022270

080156cc <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 80156cc:	b590      	push	{r4, r7, lr}
 80156ce:	b08b      	sub	sp, #44	; 0x2c
 80156d0:	af04      	add	r7, sp, #16
 80156d2:	60f8      	str	r0, [r7, #12]
 80156d4:	60b9      	str	r1, [r7, #8]
 80156d6:	607a      	str	r2, [r7, #4]
 80156d8:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 80156da:	683b      	ldr	r3, [r7, #0]
 80156dc:	2b00      	cmp	r3, #0
 80156de:	d106      	bne.n	80156ee <tcp_rst+0x22>
 80156e0:	4b1e      	ldr	r3, [pc, #120]	; (801575c <tcp_rst+0x90>)
 80156e2:	f240 72c4 	movw	r2, #1988	; 0x7c4
 80156e6:	491e      	ldr	r1, [pc, #120]	; (8015760 <tcp_rst+0x94>)
 80156e8:	481e      	ldr	r0, [pc, #120]	; (8015764 <tcp_rst+0x98>)
 80156ea:	f005 fe39 	bl	801b360 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 80156ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80156f0:	2b00      	cmp	r3, #0
 80156f2:	d106      	bne.n	8015702 <tcp_rst+0x36>
 80156f4:	4b19      	ldr	r3, [pc, #100]	; (801575c <tcp_rst+0x90>)
 80156f6:	f240 72c5 	movw	r2, #1989	; 0x7c5
 80156fa:	491b      	ldr	r1, [pc, #108]	; (8015768 <tcp_rst+0x9c>)
 80156fc:	4819      	ldr	r0, [pc, #100]	; (8015764 <tcp_rst+0x98>)
 80156fe:	f005 fe2f 	bl	801b360 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8015702:	2300      	movs	r3, #0
 8015704:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8015706:	2308      	movs	r3, #8
 8015708:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 801570a:	7dfb      	ldrb	r3, [r7, #23]
 801570c:	b29c      	uxth	r4, r3
 801570e:	68b8      	ldr	r0, [r7, #8]
 8015710:	f7f9 fb21 	bl	800ed56 <lwip_htonl>
 8015714:	4602      	mov	r2, r0
 8015716:	8abb      	ldrh	r3, [r7, #20]
 8015718:	9303      	str	r3, [sp, #12]
 801571a:	2314      	movs	r3, #20
 801571c:	9302      	str	r3, [sp, #8]
 801571e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8015720:	9301      	str	r3, [sp, #4]
 8015722:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8015724:	9300      	str	r3, [sp, #0]
 8015726:	4613      	mov	r3, r2
 8015728:	2200      	movs	r2, #0
 801572a:	4621      	mov	r1, r4
 801572c:	6878      	ldr	r0, [r7, #4]
 801572e:	f7ff fe93 	bl	8015458 <tcp_output_alloc_header_common>
 8015732:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8015734:	693b      	ldr	r3, [r7, #16]
 8015736:	2b00      	cmp	r3, #0
 8015738:	d00c      	beq.n	8015754 <tcp_rst+0x88>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801573a:	7dfb      	ldrb	r3, [r7, #23]
 801573c:	2200      	movs	r2, #0
 801573e:	6939      	ldr	r1, [r7, #16]
 8015740:	68f8      	ldr	r0, [r7, #12]
 8015742:	f7ff ff39 	bl	80155b8 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8015746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015748:	683a      	ldr	r2, [r7, #0]
 801574a:	6939      	ldr	r1, [r7, #16]
 801574c:	68f8      	ldr	r0, [r7, #12]
 801574e:	f7ff ff73 	bl	8015638 <tcp_output_control_segment>
 8015752:	e000      	b.n	8015756 <tcp_rst+0x8a>
    return;
 8015754:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8015756:	371c      	adds	r7, #28
 8015758:	46bd      	mov	sp, r7
 801575a:	bd90      	pop	{r4, r7, pc}
 801575c:	0802221c 	.word	0x0802221c
 8015760:	080229a0 	.word	0x080229a0
 8015764:	08022270 	.word	0x08022270
 8015768:	080229bc 	.word	0x080229bc

0801576c <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 801576c:	b590      	push	{r4, r7, lr}
 801576e:	b087      	sub	sp, #28
 8015770:	af00      	add	r7, sp, #0
 8015772:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8015774:	2300      	movs	r3, #0
 8015776:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8015778:	2300      	movs	r3, #0
 801577a:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 801577c:	687b      	ldr	r3, [r7, #4]
 801577e:	2b00      	cmp	r3, #0
 8015780:	d106      	bne.n	8015790 <tcp_send_empty_ack+0x24>
 8015782:	4b28      	ldr	r3, [pc, #160]	; (8015824 <tcp_send_empty_ack+0xb8>)
 8015784:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8015788:	4927      	ldr	r1, [pc, #156]	; (8015828 <tcp_send_empty_ack+0xbc>)
 801578a:	4828      	ldr	r0, [pc, #160]	; (801582c <tcp_send_empty_ack+0xc0>)
 801578c:	f005 fde8 	bl	801b360 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8015790:	7dfb      	ldrb	r3, [r7, #23]
 8015792:	009b      	lsls	r3, r3, #2
 8015794:	b2db      	uxtb	r3, r3
 8015796:	f003 0304 	and.w	r3, r3, #4
 801579a:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 801579c:	7d7b      	ldrb	r3, [r7, #21]
 801579e:	b29c      	uxth	r4, r3
 80157a0:	687b      	ldr	r3, [r7, #4]
 80157a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80157a4:	4618      	mov	r0, r3
 80157a6:	f7f9 fad6 	bl	800ed56 <lwip_htonl>
 80157aa:	4603      	mov	r3, r0
 80157ac:	2200      	movs	r2, #0
 80157ae:	4621      	mov	r1, r4
 80157b0:	6878      	ldr	r0, [r7, #4]
 80157b2:	f7ff fec3 	bl	801553c <tcp_output_alloc_header>
 80157b6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80157b8:	693b      	ldr	r3, [r7, #16]
 80157ba:	2b00      	cmp	r3, #0
 80157bc:	d109      	bne.n	80157d2 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80157be:	687b      	ldr	r3, [r7, #4]
 80157c0:	8b5b      	ldrh	r3, [r3, #26]
 80157c2:	f043 0303 	orr.w	r3, r3, #3
 80157c6:	b29a      	uxth	r2, r3
 80157c8:	687b      	ldr	r3, [r7, #4]
 80157ca:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 80157cc:	f06f 0301 	mvn.w	r3, #1
 80157d0:	e023      	b.n	801581a <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 80157d2:	7dbb      	ldrb	r3, [r7, #22]
 80157d4:	7dfa      	ldrb	r2, [r7, #23]
 80157d6:	6939      	ldr	r1, [r7, #16]
 80157d8:	6878      	ldr	r0, [r7, #4]
 80157da:	f7ff feed 	bl	80155b8 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80157de:	687a      	ldr	r2, [r7, #4]
 80157e0:	687b      	ldr	r3, [r7, #4]
 80157e2:	3304      	adds	r3, #4
 80157e4:	6939      	ldr	r1, [r7, #16]
 80157e6:	6878      	ldr	r0, [r7, #4]
 80157e8:	f7ff ff26 	bl	8015638 <tcp_output_control_segment>
 80157ec:	4603      	mov	r3, r0
 80157ee:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 80157f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80157f4:	2b00      	cmp	r3, #0
 80157f6:	d007      	beq.n	8015808 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80157f8:	687b      	ldr	r3, [r7, #4]
 80157fa:	8b5b      	ldrh	r3, [r3, #26]
 80157fc:	f043 0303 	orr.w	r3, r3, #3
 8015800:	b29a      	uxth	r2, r3
 8015802:	687b      	ldr	r3, [r7, #4]
 8015804:	835a      	strh	r2, [r3, #26]
 8015806:	e006      	b.n	8015816 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8015808:	687b      	ldr	r3, [r7, #4]
 801580a:	8b5b      	ldrh	r3, [r3, #26]
 801580c:	f023 0303 	bic.w	r3, r3, #3
 8015810:	b29a      	uxth	r2, r3
 8015812:	687b      	ldr	r3, [r7, #4]
 8015814:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8015816:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801581a:	4618      	mov	r0, r3
 801581c:	371c      	adds	r7, #28
 801581e:	46bd      	mov	sp, r7
 8015820:	bd90      	pop	{r4, r7, pc}
 8015822:	bf00      	nop
 8015824:	0802221c 	.word	0x0802221c
 8015828:	080229d8 	.word	0x080229d8
 801582c:	08022270 	.word	0x08022270

08015830 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8015830:	b590      	push	{r4, r7, lr}
 8015832:	b087      	sub	sp, #28
 8015834:	af00      	add	r7, sp, #0
 8015836:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8015838:	2300      	movs	r3, #0
 801583a:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 801583c:	687b      	ldr	r3, [r7, #4]
 801583e:	2b00      	cmp	r3, #0
 8015840:	d106      	bne.n	8015850 <tcp_keepalive+0x20>
 8015842:	4b18      	ldr	r3, [pc, #96]	; (80158a4 <tcp_keepalive+0x74>)
 8015844:	f640 0224 	movw	r2, #2084	; 0x824
 8015848:	4917      	ldr	r1, [pc, #92]	; (80158a8 <tcp_keepalive+0x78>)
 801584a:	4818      	ldr	r0, [pc, #96]	; (80158ac <tcp_keepalive+0x7c>)
 801584c:	f005 fd88 	bl	801b360 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8015850:	7dfb      	ldrb	r3, [r7, #23]
 8015852:	b29c      	uxth	r4, r3
 8015854:	687b      	ldr	r3, [r7, #4]
 8015856:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015858:	3b01      	subs	r3, #1
 801585a:	4618      	mov	r0, r3
 801585c:	f7f9 fa7b 	bl	800ed56 <lwip_htonl>
 8015860:	4603      	mov	r3, r0
 8015862:	2200      	movs	r2, #0
 8015864:	4621      	mov	r1, r4
 8015866:	6878      	ldr	r0, [r7, #4]
 8015868:	f7ff fe68 	bl	801553c <tcp_output_alloc_header>
 801586c:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801586e:	693b      	ldr	r3, [r7, #16]
 8015870:	2b00      	cmp	r3, #0
 8015872:	d102      	bne.n	801587a <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8015874:	f04f 33ff 	mov.w	r3, #4294967295
 8015878:	e010      	b.n	801589c <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801587a:	7dfb      	ldrb	r3, [r7, #23]
 801587c:	2200      	movs	r2, #0
 801587e:	6939      	ldr	r1, [r7, #16]
 8015880:	6878      	ldr	r0, [r7, #4]
 8015882:	f7ff fe99 	bl	80155b8 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8015886:	687a      	ldr	r2, [r7, #4]
 8015888:	687b      	ldr	r3, [r7, #4]
 801588a:	3304      	adds	r3, #4
 801588c:	6939      	ldr	r1, [r7, #16]
 801588e:	6878      	ldr	r0, [r7, #4]
 8015890:	f7ff fed2 	bl	8015638 <tcp_output_control_segment>
 8015894:	4603      	mov	r3, r0
 8015896:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8015898:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801589c:	4618      	mov	r0, r3
 801589e:	371c      	adds	r7, #28
 80158a0:	46bd      	mov	sp, r7
 80158a2:	bd90      	pop	{r4, r7, pc}
 80158a4:	0802221c 	.word	0x0802221c
 80158a8:	080229f8 	.word	0x080229f8
 80158ac:	08022270 	.word	0x08022270

080158b0 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 80158b0:	b590      	push	{r4, r7, lr}
 80158b2:	b08b      	sub	sp, #44	; 0x2c
 80158b4:	af00      	add	r7, sp, #0
 80158b6:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80158b8:	2300      	movs	r3, #0
 80158ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 80158be:	687b      	ldr	r3, [r7, #4]
 80158c0:	2b00      	cmp	r3, #0
 80158c2:	d106      	bne.n	80158d2 <tcp_zero_window_probe+0x22>
 80158c4:	4b4c      	ldr	r3, [pc, #304]	; (80159f8 <tcp_zero_window_probe+0x148>)
 80158c6:	f640 024f 	movw	r2, #2127	; 0x84f
 80158ca:	494c      	ldr	r1, [pc, #304]	; (80159fc <tcp_zero_window_probe+0x14c>)
 80158cc:	484c      	ldr	r0, [pc, #304]	; (8015a00 <tcp_zero_window_probe+0x150>)
 80158ce:	f005 fd47 	bl	801b360 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 80158d2:	687b      	ldr	r3, [r7, #4]
 80158d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80158d6:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 80158d8:	6a3b      	ldr	r3, [r7, #32]
 80158da:	2b00      	cmp	r3, #0
 80158dc:	d101      	bne.n	80158e2 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 80158de:	2300      	movs	r3, #0
 80158e0:	e086      	b.n	80159f0 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 80158e2:	687b      	ldr	r3, [r7, #4]
 80158e4:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80158e8:	2bff      	cmp	r3, #255	; 0xff
 80158ea:	d007      	beq.n	80158fc <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 80158ec:	687b      	ldr	r3, [r7, #4]
 80158ee:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80158f2:	3301      	adds	r3, #1
 80158f4:	b2da      	uxtb	r2, r3
 80158f6:	687b      	ldr	r3, [r7, #4]
 80158f8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 80158fc:	6a3b      	ldr	r3, [r7, #32]
 80158fe:	68db      	ldr	r3, [r3, #12]
 8015900:	899b      	ldrh	r3, [r3, #12]
 8015902:	b29b      	uxth	r3, r3
 8015904:	4618      	mov	r0, r3
 8015906:	f7f9 fa11 	bl	800ed2c <lwip_htons>
 801590a:	4603      	mov	r3, r0
 801590c:	b2db      	uxtb	r3, r3
 801590e:	f003 0301 	and.w	r3, r3, #1
 8015912:	2b00      	cmp	r3, #0
 8015914:	d005      	beq.n	8015922 <tcp_zero_window_probe+0x72>
 8015916:	6a3b      	ldr	r3, [r7, #32]
 8015918:	891b      	ldrh	r3, [r3, #8]
 801591a:	2b00      	cmp	r3, #0
 801591c:	d101      	bne.n	8015922 <tcp_zero_window_probe+0x72>
 801591e:	2301      	movs	r3, #1
 8015920:	e000      	b.n	8015924 <tcp_zero_window_probe+0x74>
 8015922:	2300      	movs	r3, #0
 8015924:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8015926:	7ffb      	ldrb	r3, [r7, #31]
 8015928:	2b00      	cmp	r3, #0
 801592a:	bf0c      	ite	eq
 801592c:	2301      	moveq	r3, #1
 801592e:	2300      	movne	r3, #0
 8015930:	b2db      	uxtb	r3, r3
 8015932:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8015934:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015938:	b299      	uxth	r1, r3
 801593a:	6a3b      	ldr	r3, [r7, #32]
 801593c:	68db      	ldr	r3, [r3, #12]
 801593e:	685b      	ldr	r3, [r3, #4]
 8015940:	8bba      	ldrh	r2, [r7, #28]
 8015942:	6878      	ldr	r0, [r7, #4]
 8015944:	f7ff fdfa 	bl	801553c <tcp_output_alloc_header>
 8015948:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 801594a:	69bb      	ldr	r3, [r7, #24]
 801594c:	2b00      	cmp	r3, #0
 801594e:	d102      	bne.n	8015956 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8015950:	f04f 33ff 	mov.w	r3, #4294967295
 8015954:	e04c      	b.n	80159f0 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8015956:	69bb      	ldr	r3, [r7, #24]
 8015958:	685b      	ldr	r3, [r3, #4]
 801595a:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 801595c:	7ffb      	ldrb	r3, [r7, #31]
 801595e:	2b00      	cmp	r3, #0
 8015960:	d011      	beq.n	8015986 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8015962:	697b      	ldr	r3, [r7, #20]
 8015964:	899b      	ldrh	r3, [r3, #12]
 8015966:	b29b      	uxth	r3, r3
 8015968:	b21b      	sxth	r3, r3
 801596a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801596e:	b21c      	sxth	r4, r3
 8015970:	2011      	movs	r0, #17
 8015972:	f7f9 f9db 	bl	800ed2c <lwip_htons>
 8015976:	4603      	mov	r3, r0
 8015978:	b21b      	sxth	r3, r3
 801597a:	4323      	orrs	r3, r4
 801597c:	b21b      	sxth	r3, r3
 801597e:	b29a      	uxth	r2, r3
 8015980:	697b      	ldr	r3, [r7, #20]
 8015982:	819a      	strh	r2, [r3, #12]
 8015984:	e010      	b.n	80159a8 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8015986:	69bb      	ldr	r3, [r7, #24]
 8015988:	685b      	ldr	r3, [r3, #4]
 801598a:	3314      	adds	r3, #20
 801598c:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801598e:	6a3b      	ldr	r3, [r7, #32]
 8015990:	6858      	ldr	r0, [r3, #4]
 8015992:	6a3b      	ldr	r3, [r7, #32]
 8015994:	685b      	ldr	r3, [r3, #4]
 8015996:	891a      	ldrh	r2, [r3, #8]
 8015998:	6a3b      	ldr	r3, [r7, #32]
 801599a:	891b      	ldrh	r3, [r3, #8]
 801599c:	1ad3      	subs	r3, r2, r3
 801599e:	b29b      	uxth	r3, r3
 80159a0:	2201      	movs	r2, #1
 80159a2:	6939      	ldr	r1, [r7, #16]
 80159a4:	f7fa fe58 	bl	8010658 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 80159a8:	6a3b      	ldr	r3, [r7, #32]
 80159aa:	68db      	ldr	r3, [r3, #12]
 80159ac:	685b      	ldr	r3, [r3, #4]
 80159ae:	4618      	mov	r0, r3
 80159b0:	f7f9 f9d1 	bl	800ed56 <lwip_htonl>
 80159b4:	4603      	mov	r3, r0
 80159b6:	3301      	adds	r3, #1
 80159b8:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80159ba:	687b      	ldr	r3, [r7, #4]
 80159bc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80159be:	68fb      	ldr	r3, [r7, #12]
 80159c0:	1ad3      	subs	r3, r2, r3
 80159c2:	2b00      	cmp	r3, #0
 80159c4:	da02      	bge.n	80159cc <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 80159c6:	687b      	ldr	r3, [r7, #4]
 80159c8:	68fa      	ldr	r2, [r7, #12]
 80159ca:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80159cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80159d0:	2200      	movs	r2, #0
 80159d2:	69b9      	ldr	r1, [r7, #24]
 80159d4:	6878      	ldr	r0, [r7, #4]
 80159d6:	f7ff fdef 	bl	80155b8 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80159da:	687a      	ldr	r2, [r7, #4]
 80159dc:	687b      	ldr	r3, [r7, #4]
 80159de:	3304      	adds	r3, #4
 80159e0:	69b9      	ldr	r1, [r7, #24]
 80159e2:	6878      	ldr	r0, [r7, #4]
 80159e4:	f7ff fe28 	bl	8015638 <tcp_output_control_segment>
 80159e8:	4603      	mov	r3, r0
 80159ea:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80159ec:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80159f0:	4618      	mov	r0, r3
 80159f2:	372c      	adds	r7, #44	; 0x2c
 80159f4:	46bd      	mov	sp, r7
 80159f6:	bd90      	pop	{r4, r7, pc}
 80159f8:	0802221c 	.word	0x0802221c
 80159fc:	08022a14 	.word	0x08022a14
 8015a00:	08022270 	.word	0x08022270

08015a04 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8015a04:	b580      	push	{r7, lr}
 8015a06:	b082      	sub	sp, #8
 8015a08:	af00      	add	r7, sp, #0
 8015a0a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8015a0c:	f7fa ff12 	bl	8010834 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8015a10:	4b0a      	ldr	r3, [pc, #40]	; (8015a3c <tcpip_tcp_timer+0x38>)
 8015a12:	681b      	ldr	r3, [r3, #0]
 8015a14:	2b00      	cmp	r3, #0
 8015a16:	d103      	bne.n	8015a20 <tcpip_tcp_timer+0x1c>
 8015a18:	4b09      	ldr	r3, [pc, #36]	; (8015a40 <tcpip_tcp_timer+0x3c>)
 8015a1a:	681b      	ldr	r3, [r3, #0]
 8015a1c:	2b00      	cmp	r3, #0
 8015a1e:	d005      	beq.n	8015a2c <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8015a20:	2200      	movs	r2, #0
 8015a22:	4908      	ldr	r1, [pc, #32]	; (8015a44 <tcpip_tcp_timer+0x40>)
 8015a24:	20fa      	movs	r0, #250	; 0xfa
 8015a26:	f000 f8f3 	bl	8015c10 <sys_timeout>
 8015a2a:	e003      	b.n	8015a34 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8015a2c:	4b06      	ldr	r3, [pc, #24]	; (8015a48 <tcpip_tcp_timer+0x44>)
 8015a2e:	2200      	movs	r2, #0
 8015a30:	601a      	str	r2, [r3, #0]
  }
}
 8015a32:	bf00      	nop
 8015a34:	bf00      	nop
 8015a36:	3708      	adds	r7, #8
 8015a38:	46bd      	mov	sp, r7
 8015a3a:	bd80      	pop	{r7, pc}
 8015a3c:	20007630 	.word	0x20007630
 8015a40:	20007640 	.word	0x20007640
 8015a44:	08015a05 	.word	0x08015a05
 8015a48:	2000051c 	.word	0x2000051c

08015a4c <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8015a4c:	b580      	push	{r7, lr}
 8015a4e:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8015a50:	4b0a      	ldr	r3, [pc, #40]	; (8015a7c <tcp_timer_needed+0x30>)
 8015a52:	681b      	ldr	r3, [r3, #0]
 8015a54:	2b00      	cmp	r3, #0
 8015a56:	d10f      	bne.n	8015a78 <tcp_timer_needed+0x2c>
 8015a58:	4b09      	ldr	r3, [pc, #36]	; (8015a80 <tcp_timer_needed+0x34>)
 8015a5a:	681b      	ldr	r3, [r3, #0]
 8015a5c:	2b00      	cmp	r3, #0
 8015a5e:	d103      	bne.n	8015a68 <tcp_timer_needed+0x1c>
 8015a60:	4b08      	ldr	r3, [pc, #32]	; (8015a84 <tcp_timer_needed+0x38>)
 8015a62:	681b      	ldr	r3, [r3, #0]
 8015a64:	2b00      	cmp	r3, #0
 8015a66:	d007      	beq.n	8015a78 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8015a68:	4b04      	ldr	r3, [pc, #16]	; (8015a7c <tcp_timer_needed+0x30>)
 8015a6a:	2201      	movs	r2, #1
 8015a6c:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8015a6e:	2200      	movs	r2, #0
 8015a70:	4905      	ldr	r1, [pc, #20]	; (8015a88 <tcp_timer_needed+0x3c>)
 8015a72:	20fa      	movs	r0, #250	; 0xfa
 8015a74:	f000 f8cc 	bl	8015c10 <sys_timeout>
  }
}
 8015a78:	bf00      	nop
 8015a7a:	bd80      	pop	{r7, pc}
 8015a7c:	2000051c 	.word	0x2000051c
 8015a80:	20007630 	.word	0x20007630
 8015a84:	20007640 	.word	0x20007640
 8015a88:	08015a05 	.word	0x08015a05

08015a8c <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8015a8c:	b580      	push	{r7, lr}
 8015a8e:	b086      	sub	sp, #24
 8015a90:	af00      	add	r7, sp, #0
 8015a92:	60f8      	str	r0, [r7, #12]
 8015a94:	60b9      	str	r1, [r7, #8]
 8015a96:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8015a98:	2006      	movs	r0, #6
 8015a9a:	f7f9 fd9d 	bl	800f5d8 <memp_malloc>
 8015a9e:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8015aa0:	693b      	ldr	r3, [r7, #16]
 8015aa2:	2b00      	cmp	r3, #0
 8015aa4:	d109      	bne.n	8015aba <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8015aa6:	693b      	ldr	r3, [r7, #16]
 8015aa8:	2b00      	cmp	r3, #0
 8015aaa:	d151      	bne.n	8015b50 <sys_timeout_abs+0xc4>
 8015aac:	4b2a      	ldr	r3, [pc, #168]	; (8015b58 <sys_timeout_abs+0xcc>)
 8015aae:	22be      	movs	r2, #190	; 0xbe
 8015ab0:	492a      	ldr	r1, [pc, #168]	; (8015b5c <sys_timeout_abs+0xd0>)
 8015ab2:	482b      	ldr	r0, [pc, #172]	; (8015b60 <sys_timeout_abs+0xd4>)
 8015ab4:	f005 fc54 	bl	801b360 <iprintf>
    return;
 8015ab8:	e04a      	b.n	8015b50 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8015aba:	693b      	ldr	r3, [r7, #16]
 8015abc:	2200      	movs	r2, #0
 8015abe:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8015ac0:	693b      	ldr	r3, [r7, #16]
 8015ac2:	68ba      	ldr	r2, [r7, #8]
 8015ac4:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8015ac6:	693b      	ldr	r3, [r7, #16]
 8015ac8:	687a      	ldr	r2, [r7, #4]
 8015aca:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8015acc:	693b      	ldr	r3, [r7, #16]
 8015ace:	68fa      	ldr	r2, [r7, #12]
 8015ad0:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8015ad2:	4b24      	ldr	r3, [pc, #144]	; (8015b64 <sys_timeout_abs+0xd8>)
 8015ad4:	681b      	ldr	r3, [r3, #0]
 8015ad6:	2b00      	cmp	r3, #0
 8015ad8:	d103      	bne.n	8015ae2 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8015ada:	4a22      	ldr	r2, [pc, #136]	; (8015b64 <sys_timeout_abs+0xd8>)
 8015adc:	693b      	ldr	r3, [r7, #16]
 8015ade:	6013      	str	r3, [r2, #0]
    return;
 8015ae0:	e037      	b.n	8015b52 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8015ae2:	693b      	ldr	r3, [r7, #16]
 8015ae4:	685a      	ldr	r2, [r3, #4]
 8015ae6:	4b1f      	ldr	r3, [pc, #124]	; (8015b64 <sys_timeout_abs+0xd8>)
 8015ae8:	681b      	ldr	r3, [r3, #0]
 8015aea:	685b      	ldr	r3, [r3, #4]
 8015aec:	1ad3      	subs	r3, r2, r3
 8015aee:	0fdb      	lsrs	r3, r3, #31
 8015af0:	f003 0301 	and.w	r3, r3, #1
 8015af4:	b2db      	uxtb	r3, r3
 8015af6:	2b00      	cmp	r3, #0
 8015af8:	d007      	beq.n	8015b0a <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8015afa:	4b1a      	ldr	r3, [pc, #104]	; (8015b64 <sys_timeout_abs+0xd8>)
 8015afc:	681a      	ldr	r2, [r3, #0]
 8015afe:	693b      	ldr	r3, [r7, #16]
 8015b00:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8015b02:	4a18      	ldr	r2, [pc, #96]	; (8015b64 <sys_timeout_abs+0xd8>)
 8015b04:	693b      	ldr	r3, [r7, #16]
 8015b06:	6013      	str	r3, [r2, #0]
 8015b08:	e023      	b.n	8015b52 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8015b0a:	4b16      	ldr	r3, [pc, #88]	; (8015b64 <sys_timeout_abs+0xd8>)
 8015b0c:	681b      	ldr	r3, [r3, #0]
 8015b0e:	617b      	str	r3, [r7, #20]
 8015b10:	e01a      	b.n	8015b48 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8015b12:	697b      	ldr	r3, [r7, #20]
 8015b14:	681b      	ldr	r3, [r3, #0]
 8015b16:	2b00      	cmp	r3, #0
 8015b18:	d00b      	beq.n	8015b32 <sys_timeout_abs+0xa6>
 8015b1a:	693b      	ldr	r3, [r7, #16]
 8015b1c:	685a      	ldr	r2, [r3, #4]
 8015b1e:	697b      	ldr	r3, [r7, #20]
 8015b20:	681b      	ldr	r3, [r3, #0]
 8015b22:	685b      	ldr	r3, [r3, #4]
 8015b24:	1ad3      	subs	r3, r2, r3
 8015b26:	0fdb      	lsrs	r3, r3, #31
 8015b28:	f003 0301 	and.w	r3, r3, #1
 8015b2c:	b2db      	uxtb	r3, r3
 8015b2e:	2b00      	cmp	r3, #0
 8015b30:	d007      	beq.n	8015b42 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8015b32:	697b      	ldr	r3, [r7, #20]
 8015b34:	681a      	ldr	r2, [r3, #0]
 8015b36:	693b      	ldr	r3, [r7, #16]
 8015b38:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8015b3a:	697b      	ldr	r3, [r7, #20]
 8015b3c:	693a      	ldr	r2, [r7, #16]
 8015b3e:	601a      	str	r2, [r3, #0]
        break;
 8015b40:	e007      	b.n	8015b52 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8015b42:	697b      	ldr	r3, [r7, #20]
 8015b44:	681b      	ldr	r3, [r3, #0]
 8015b46:	617b      	str	r3, [r7, #20]
 8015b48:	697b      	ldr	r3, [r7, #20]
 8015b4a:	2b00      	cmp	r3, #0
 8015b4c:	d1e1      	bne.n	8015b12 <sys_timeout_abs+0x86>
 8015b4e:	e000      	b.n	8015b52 <sys_timeout_abs+0xc6>
    return;
 8015b50:	bf00      	nop
      }
    }
  }
}
 8015b52:	3718      	adds	r7, #24
 8015b54:	46bd      	mov	sp, r7
 8015b56:	bd80      	pop	{r7, pc}
 8015b58:	08022a38 	.word	0x08022a38
 8015b5c:	08022a6c 	.word	0x08022a6c
 8015b60:	08022aac 	.word	0x08022aac
 8015b64:	20000514 	.word	0x20000514

08015b68 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8015b68:	b580      	push	{r7, lr}
 8015b6a:	b086      	sub	sp, #24
 8015b6c:	af00      	add	r7, sp, #0
 8015b6e:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8015b70:	687b      	ldr	r3, [r7, #4]
 8015b72:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8015b74:	697b      	ldr	r3, [r7, #20]
 8015b76:	685b      	ldr	r3, [r3, #4]
 8015b78:	4798      	blx	r3

  now = sys_now();
 8015b7a:	f7f9 f849 	bl	800ec10 <sys_now>
 8015b7e:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8015b80:	697b      	ldr	r3, [r7, #20]
 8015b82:	681a      	ldr	r2, [r3, #0]
 8015b84:	4b0f      	ldr	r3, [pc, #60]	; (8015bc4 <lwip_cyclic_timer+0x5c>)
 8015b86:	681b      	ldr	r3, [r3, #0]
 8015b88:	4413      	add	r3, r2
 8015b8a:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8015b8c:	68fa      	ldr	r2, [r7, #12]
 8015b8e:	693b      	ldr	r3, [r7, #16]
 8015b90:	1ad3      	subs	r3, r2, r3
 8015b92:	0fdb      	lsrs	r3, r3, #31
 8015b94:	f003 0301 	and.w	r3, r3, #1
 8015b98:	b2db      	uxtb	r3, r3
 8015b9a:	2b00      	cmp	r3, #0
 8015b9c:	d009      	beq.n	8015bb2 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8015b9e:	697b      	ldr	r3, [r7, #20]
 8015ba0:	681a      	ldr	r2, [r3, #0]
 8015ba2:	693b      	ldr	r3, [r7, #16]
 8015ba4:	4413      	add	r3, r2
 8015ba6:	687a      	ldr	r2, [r7, #4]
 8015ba8:	4907      	ldr	r1, [pc, #28]	; (8015bc8 <lwip_cyclic_timer+0x60>)
 8015baa:	4618      	mov	r0, r3
 8015bac:	f7ff ff6e 	bl	8015a8c <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8015bb0:	e004      	b.n	8015bbc <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8015bb2:	687a      	ldr	r2, [r7, #4]
 8015bb4:	4904      	ldr	r1, [pc, #16]	; (8015bc8 <lwip_cyclic_timer+0x60>)
 8015bb6:	68f8      	ldr	r0, [r7, #12]
 8015bb8:	f7ff ff68 	bl	8015a8c <sys_timeout_abs>
}
 8015bbc:	bf00      	nop
 8015bbe:	3718      	adds	r7, #24
 8015bc0:	46bd      	mov	sp, r7
 8015bc2:	bd80      	pop	{r7, pc}
 8015bc4:	20000518 	.word	0x20000518
 8015bc8:	08015b69 	.word	0x08015b69

08015bcc <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8015bcc:	b580      	push	{r7, lr}
 8015bce:	b082      	sub	sp, #8
 8015bd0:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8015bd2:	2301      	movs	r3, #1
 8015bd4:	607b      	str	r3, [r7, #4]
 8015bd6:	e00e      	b.n	8015bf6 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8015bd8:	4a0b      	ldr	r2, [pc, #44]	; (8015c08 <sys_timeouts_init+0x3c>)
 8015bda:	687b      	ldr	r3, [r7, #4]
 8015bdc:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8015be0:	687b      	ldr	r3, [r7, #4]
 8015be2:	00db      	lsls	r3, r3, #3
 8015be4:	4a08      	ldr	r2, [pc, #32]	; (8015c08 <sys_timeouts_init+0x3c>)
 8015be6:	4413      	add	r3, r2
 8015be8:	461a      	mov	r2, r3
 8015bea:	4908      	ldr	r1, [pc, #32]	; (8015c0c <sys_timeouts_init+0x40>)
 8015bec:	f000 f810 	bl	8015c10 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8015bf0:	687b      	ldr	r3, [r7, #4]
 8015bf2:	3301      	adds	r3, #1
 8015bf4:	607b      	str	r3, [r7, #4]
 8015bf6:	687b      	ldr	r3, [r7, #4]
 8015bf8:	2b04      	cmp	r3, #4
 8015bfa:	d9ed      	bls.n	8015bd8 <sys_timeouts_init+0xc>
  }
}
 8015bfc:	bf00      	nop
 8015bfe:	bf00      	nop
 8015c00:	3708      	adds	r7, #8
 8015c02:	46bd      	mov	sp, r7
 8015c04:	bd80      	pop	{r7, pc}
 8015c06:	bf00      	nop
 8015c08:	08023f18 	.word	0x08023f18
 8015c0c:	08015b69 	.word	0x08015b69

08015c10 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8015c10:	b580      	push	{r7, lr}
 8015c12:	b086      	sub	sp, #24
 8015c14:	af00      	add	r7, sp, #0
 8015c16:	60f8      	str	r0, [r7, #12]
 8015c18:	60b9      	str	r1, [r7, #8]
 8015c1a:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8015c1c:	68fb      	ldr	r3, [r7, #12]
 8015c1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8015c22:	d306      	bcc.n	8015c32 <sys_timeout+0x22>
 8015c24:	4b0a      	ldr	r3, [pc, #40]	; (8015c50 <sys_timeout+0x40>)
 8015c26:	f240 1229 	movw	r2, #297	; 0x129
 8015c2a:	490a      	ldr	r1, [pc, #40]	; (8015c54 <sys_timeout+0x44>)
 8015c2c:	480a      	ldr	r0, [pc, #40]	; (8015c58 <sys_timeout+0x48>)
 8015c2e:	f005 fb97 	bl	801b360 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8015c32:	f7f8 ffed 	bl	800ec10 <sys_now>
 8015c36:	4602      	mov	r2, r0
 8015c38:	68fb      	ldr	r3, [r7, #12]
 8015c3a:	4413      	add	r3, r2
 8015c3c:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8015c3e:	687a      	ldr	r2, [r7, #4]
 8015c40:	68b9      	ldr	r1, [r7, #8]
 8015c42:	6978      	ldr	r0, [r7, #20]
 8015c44:	f7ff ff22 	bl	8015a8c <sys_timeout_abs>
#endif
}
 8015c48:	bf00      	nop
 8015c4a:	3718      	adds	r7, #24
 8015c4c:	46bd      	mov	sp, r7
 8015c4e:	bd80      	pop	{r7, pc}
 8015c50:	08022a38 	.word	0x08022a38
 8015c54:	08022ad4 	.word	0x08022ad4
 8015c58:	08022aac 	.word	0x08022aac

08015c5c <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8015c5c:	b580      	push	{r7, lr}
 8015c5e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8015c60:	f005 fb96 	bl	801b390 <rand>
 8015c64:	4603      	mov	r3, r0
 8015c66:	b29b      	uxth	r3, r3
 8015c68:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8015c6c:	b29b      	uxth	r3, r3
 8015c6e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8015c72:	b29a      	uxth	r2, r3
 8015c74:	4b01      	ldr	r3, [pc, #4]	; (8015c7c <udp_init+0x20>)
 8015c76:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8015c78:	bf00      	nop
 8015c7a:	bd80      	pop	{r7, pc}
 8015c7c:	2000007c 	.word	0x2000007c

08015c80 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8015c80:	b480      	push	{r7}
 8015c82:	b083      	sub	sp, #12
 8015c84:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8015c86:	2300      	movs	r3, #0
 8015c88:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8015c8a:	4b17      	ldr	r3, [pc, #92]	; (8015ce8 <udp_new_port+0x68>)
 8015c8c:	881b      	ldrh	r3, [r3, #0]
 8015c8e:	1c5a      	adds	r2, r3, #1
 8015c90:	b291      	uxth	r1, r2
 8015c92:	4a15      	ldr	r2, [pc, #84]	; (8015ce8 <udp_new_port+0x68>)
 8015c94:	8011      	strh	r1, [r2, #0]
 8015c96:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015c9a:	4293      	cmp	r3, r2
 8015c9c:	d103      	bne.n	8015ca6 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8015c9e:	4b12      	ldr	r3, [pc, #72]	; (8015ce8 <udp_new_port+0x68>)
 8015ca0:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8015ca4:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8015ca6:	4b11      	ldr	r3, [pc, #68]	; (8015cec <udp_new_port+0x6c>)
 8015ca8:	681b      	ldr	r3, [r3, #0]
 8015caa:	603b      	str	r3, [r7, #0]
 8015cac:	e011      	b.n	8015cd2 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8015cae:	683b      	ldr	r3, [r7, #0]
 8015cb0:	8a5a      	ldrh	r2, [r3, #18]
 8015cb2:	4b0d      	ldr	r3, [pc, #52]	; (8015ce8 <udp_new_port+0x68>)
 8015cb4:	881b      	ldrh	r3, [r3, #0]
 8015cb6:	429a      	cmp	r2, r3
 8015cb8:	d108      	bne.n	8015ccc <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8015cba:	88fb      	ldrh	r3, [r7, #6]
 8015cbc:	3301      	adds	r3, #1
 8015cbe:	80fb      	strh	r3, [r7, #6]
 8015cc0:	88fb      	ldrh	r3, [r7, #6]
 8015cc2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8015cc6:	d3e0      	bcc.n	8015c8a <udp_new_port+0xa>
        return 0;
 8015cc8:	2300      	movs	r3, #0
 8015cca:	e007      	b.n	8015cdc <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8015ccc:	683b      	ldr	r3, [r7, #0]
 8015cce:	68db      	ldr	r3, [r3, #12]
 8015cd0:	603b      	str	r3, [r7, #0]
 8015cd2:	683b      	ldr	r3, [r7, #0]
 8015cd4:	2b00      	cmp	r3, #0
 8015cd6:	d1ea      	bne.n	8015cae <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8015cd8:	4b03      	ldr	r3, [pc, #12]	; (8015ce8 <udp_new_port+0x68>)
 8015cda:	881b      	ldrh	r3, [r3, #0]
}
 8015cdc:	4618      	mov	r0, r3
 8015cde:	370c      	adds	r7, #12
 8015ce0:	46bd      	mov	sp, r7
 8015ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ce6:	4770      	bx	lr
 8015ce8:	2000007c 	.word	0x2000007c
 8015cec:	20007648 	.word	0x20007648

08015cf0 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8015cf0:	b580      	push	{r7, lr}
 8015cf2:	b084      	sub	sp, #16
 8015cf4:	af00      	add	r7, sp, #0
 8015cf6:	60f8      	str	r0, [r7, #12]
 8015cf8:	60b9      	str	r1, [r7, #8]
 8015cfa:	4613      	mov	r3, r2
 8015cfc:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8015cfe:	68fb      	ldr	r3, [r7, #12]
 8015d00:	2b00      	cmp	r3, #0
 8015d02:	d105      	bne.n	8015d10 <udp_input_local_match+0x20>
 8015d04:	4b27      	ldr	r3, [pc, #156]	; (8015da4 <udp_input_local_match+0xb4>)
 8015d06:	2287      	movs	r2, #135	; 0x87
 8015d08:	4927      	ldr	r1, [pc, #156]	; (8015da8 <udp_input_local_match+0xb8>)
 8015d0a:	4828      	ldr	r0, [pc, #160]	; (8015dac <udp_input_local_match+0xbc>)
 8015d0c:	f005 fb28 	bl	801b360 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8015d10:	68bb      	ldr	r3, [r7, #8]
 8015d12:	2b00      	cmp	r3, #0
 8015d14:	d105      	bne.n	8015d22 <udp_input_local_match+0x32>
 8015d16:	4b23      	ldr	r3, [pc, #140]	; (8015da4 <udp_input_local_match+0xb4>)
 8015d18:	2288      	movs	r2, #136	; 0x88
 8015d1a:	4925      	ldr	r1, [pc, #148]	; (8015db0 <udp_input_local_match+0xc0>)
 8015d1c:	4823      	ldr	r0, [pc, #140]	; (8015dac <udp_input_local_match+0xbc>)
 8015d1e:	f005 fb1f 	bl	801b360 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8015d22:	68fb      	ldr	r3, [r7, #12]
 8015d24:	7a1b      	ldrb	r3, [r3, #8]
 8015d26:	2b00      	cmp	r3, #0
 8015d28:	d00b      	beq.n	8015d42 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8015d2a:	68fb      	ldr	r3, [r7, #12]
 8015d2c:	7a1a      	ldrb	r2, [r3, #8]
 8015d2e:	4b21      	ldr	r3, [pc, #132]	; (8015db4 <udp_input_local_match+0xc4>)
 8015d30:	685b      	ldr	r3, [r3, #4]
 8015d32:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8015d36:	3301      	adds	r3, #1
 8015d38:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8015d3a:	429a      	cmp	r2, r3
 8015d3c:	d001      	beq.n	8015d42 <udp_input_local_match+0x52>
    return 0;
 8015d3e:	2300      	movs	r3, #0
 8015d40:	e02b      	b.n	8015d9a <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8015d42:	79fb      	ldrb	r3, [r7, #7]
 8015d44:	2b00      	cmp	r3, #0
 8015d46:	d018      	beq.n	8015d7a <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8015d48:	68fb      	ldr	r3, [r7, #12]
 8015d4a:	2b00      	cmp	r3, #0
 8015d4c:	d013      	beq.n	8015d76 <udp_input_local_match+0x86>
 8015d4e:	68fb      	ldr	r3, [r7, #12]
 8015d50:	681b      	ldr	r3, [r3, #0]
 8015d52:	2b00      	cmp	r3, #0
 8015d54:	d00f      	beq.n	8015d76 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8015d56:	4b17      	ldr	r3, [pc, #92]	; (8015db4 <udp_input_local_match+0xc4>)
 8015d58:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8015d5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015d5e:	d00a      	beq.n	8015d76 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8015d60:	68fb      	ldr	r3, [r7, #12]
 8015d62:	681a      	ldr	r2, [r3, #0]
 8015d64:	4b13      	ldr	r3, [pc, #76]	; (8015db4 <udp_input_local_match+0xc4>)
 8015d66:	695b      	ldr	r3, [r3, #20]
 8015d68:	405a      	eors	r2, r3
 8015d6a:	68bb      	ldr	r3, [r7, #8]
 8015d6c:	3308      	adds	r3, #8
 8015d6e:	681b      	ldr	r3, [r3, #0]
 8015d70:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8015d72:	2b00      	cmp	r3, #0
 8015d74:	d110      	bne.n	8015d98 <udp_input_local_match+0xa8>
          return 1;
 8015d76:	2301      	movs	r3, #1
 8015d78:	e00f      	b.n	8015d9a <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8015d7a:	68fb      	ldr	r3, [r7, #12]
 8015d7c:	2b00      	cmp	r3, #0
 8015d7e:	d009      	beq.n	8015d94 <udp_input_local_match+0xa4>
 8015d80:	68fb      	ldr	r3, [r7, #12]
 8015d82:	681b      	ldr	r3, [r3, #0]
 8015d84:	2b00      	cmp	r3, #0
 8015d86:	d005      	beq.n	8015d94 <udp_input_local_match+0xa4>
 8015d88:	68fb      	ldr	r3, [r7, #12]
 8015d8a:	681a      	ldr	r2, [r3, #0]
 8015d8c:	4b09      	ldr	r3, [pc, #36]	; (8015db4 <udp_input_local_match+0xc4>)
 8015d8e:	695b      	ldr	r3, [r3, #20]
 8015d90:	429a      	cmp	r2, r3
 8015d92:	d101      	bne.n	8015d98 <udp_input_local_match+0xa8>
        return 1;
 8015d94:	2301      	movs	r3, #1
 8015d96:	e000      	b.n	8015d9a <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8015d98:	2300      	movs	r3, #0
}
 8015d9a:	4618      	mov	r0, r3
 8015d9c:	3710      	adds	r7, #16
 8015d9e:	46bd      	mov	sp, r7
 8015da0:	bd80      	pop	{r7, pc}
 8015da2:	bf00      	nop
 8015da4:	08022b20 	.word	0x08022b20
 8015da8:	08022b50 	.word	0x08022b50
 8015dac:	08022b74 	.word	0x08022b74
 8015db0:	08022b9c 	.word	0x08022b9c
 8015db4:	2000450c 	.word	0x2000450c

08015db8 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8015db8:	b590      	push	{r4, r7, lr}
 8015dba:	b08d      	sub	sp, #52	; 0x34
 8015dbc:	af02      	add	r7, sp, #8
 8015dbe:	6078      	str	r0, [r7, #4]
 8015dc0:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8015dc2:	2300      	movs	r3, #0
 8015dc4:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8015dc6:	687b      	ldr	r3, [r7, #4]
 8015dc8:	2b00      	cmp	r3, #0
 8015dca:	d105      	bne.n	8015dd8 <udp_input+0x20>
 8015dcc:	4b7c      	ldr	r3, [pc, #496]	; (8015fc0 <udp_input+0x208>)
 8015dce:	22cf      	movs	r2, #207	; 0xcf
 8015dd0:	497c      	ldr	r1, [pc, #496]	; (8015fc4 <udp_input+0x20c>)
 8015dd2:	487d      	ldr	r0, [pc, #500]	; (8015fc8 <udp_input+0x210>)
 8015dd4:	f005 fac4 	bl	801b360 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8015dd8:	683b      	ldr	r3, [r7, #0]
 8015dda:	2b00      	cmp	r3, #0
 8015ddc:	d105      	bne.n	8015dea <udp_input+0x32>
 8015dde:	4b78      	ldr	r3, [pc, #480]	; (8015fc0 <udp_input+0x208>)
 8015de0:	22d0      	movs	r2, #208	; 0xd0
 8015de2:	497a      	ldr	r1, [pc, #488]	; (8015fcc <udp_input+0x214>)
 8015de4:	4878      	ldr	r0, [pc, #480]	; (8015fc8 <udp_input+0x210>)
 8015de6:	f005 fabb 	bl	801b360 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8015dea:	687b      	ldr	r3, [r7, #4]
 8015dec:	895b      	ldrh	r3, [r3, #10]
 8015dee:	2b07      	cmp	r3, #7
 8015df0:	d803      	bhi.n	8015dfa <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8015df2:	6878      	ldr	r0, [r7, #4]
 8015df4:	f7fa fa36 	bl	8010264 <pbuf_free>
    goto end;
 8015df8:	e0de      	b.n	8015fb8 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8015dfa:	687b      	ldr	r3, [r7, #4]
 8015dfc:	685b      	ldr	r3, [r3, #4]
 8015dfe:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8015e00:	4b73      	ldr	r3, [pc, #460]	; (8015fd0 <udp_input+0x218>)
 8015e02:	695b      	ldr	r3, [r3, #20]
 8015e04:	4a72      	ldr	r2, [pc, #456]	; (8015fd0 <udp_input+0x218>)
 8015e06:	6812      	ldr	r2, [r2, #0]
 8015e08:	4611      	mov	r1, r2
 8015e0a:	4618      	mov	r0, r3
 8015e0c:	f003 fdca 	bl	80199a4 <ip4_addr_isbroadcast_u32>
 8015e10:	4603      	mov	r3, r0
 8015e12:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8015e14:	697b      	ldr	r3, [r7, #20]
 8015e16:	881b      	ldrh	r3, [r3, #0]
 8015e18:	b29b      	uxth	r3, r3
 8015e1a:	4618      	mov	r0, r3
 8015e1c:	f7f8 ff86 	bl	800ed2c <lwip_htons>
 8015e20:	4603      	mov	r3, r0
 8015e22:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8015e24:	697b      	ldr	r3, [r7, #20]
 8015e26:	885b      	ldrh	r3, [r3, #2]
 8015e28:	b29b      	uxth	r3, r3
 8015e2a:	4618      	mov	r0, r3
 8015e2c:	f7f8 ff7e 	bl	800ed2c <lwip_htons>
 8015e30:	4603      	mov	r3, r0
 8015e32:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8015e34:	2300      	movs	r3, #0
 8015e36:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8015e38:	2300      	movs	r3, #0
 8015e3a:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8015e3c:	2300      	movs	r3, #0
 8015e3e:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8015e40:	4b64      	ldr	r3, [pc, #400]	; (8015fd4 <udp_input+0x21c>)
 8015e42:	681b      	ldr	r3, [r3, #0]
 8015e44:	627b      	str	r3, [r7, #36]	; 0x24
 8015e46:	e054      	b.n	8015ef2 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8015e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e4a:	8a5b      	ldrh	r3, [r3, #18]
 8015e4c:	89fa      	ldrh	r2, [r7, #14]
 8015e4e:	429a      	cmp	r2, r3
 8015e50:	d14a      	bne.n	8015ee8 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8015e52:	7cfb      	ldrb	r3, [r7, #19]
 8015e54:	461a      	mov	r2, r3
 8015e56:	6839      	ldr	r1, [r7, #0]
 8015e58:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015e5a:	f7ff ff49 	bl	8015cf0 <udp_input_local_match>
 8015e5e:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8015e60:	2b00      	cmp	r3, #0
 8015e62:	d041      	beq.n	8015ee8 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8015e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e66:	7c1b      	ldrb	r3, [r3, #16]
 8015e68:	f003 0304 	and.w	r3, r3, #4
 8015e6c:	2b00      	cmp	r3, #0
 8015e6e:	d11d      	bne.n	8015eac <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8015e70:	69fb      	ldr	r3, [r7, #28]
 8015e72:	2b00      	cmp	r3, #0
 8015e74:	d102      	bne.n	8015e7c <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8015e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e78:	61fb      	str	r3, [r7, #28]
 8015e7a:	e017      	b.n	8015eac <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8015e7c:	7cfb      	ldrb	r3, [r7, #19]
 8015e7e:	2b00      	cmp	r3, #0
 8015e80:	d014      	beq.n	8015eac <udp_input+0xf4>
 8015e82:	4b53      	ldr	r3, [pc, #332]	; (8015fd0 <udp_input+0x218>)
 8015e84:	695b      	ldr	r3, [r3, #20]
 8015e86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015e8a:	d10f      	bne.n	8015eac <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8015e8c:	69fb      	ldr	r3, [r7, #28]
 8015e8e:	681a      	ldr	r2, [r3, #0]
 8015e90:	683b      	ldr	r3, [r7, #0]
 8015e92:	3304      	adds	r3, #4
 8015e94:	681b      	ldr	r3, [r3, #0]
 8015e96:	429a      	cmp	r2, r3
 8015e98:	d008      	beq.n	8015eac <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8015e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e9c:	681a      	ldr	r2, [r3, #0]
 8015e9e:	683b      	ldr	r3, [r7, #0]
 8015ea0:	3304      	adds	r3, #4
 8015ea2:	681b      	ldr	r3, [r3, #0]
 8015ea4:	429a      	cmp	r2, r3
 8015ea6:	d101      	bne.n	8015eac <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8015ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015eaa:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8015eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015eae:	8a9b      	ldrh	r3, [r3, #20]
 8015eb0:	8a3a      	ldrh	r2, [r7, #16]
 8015eb2:	429a      	cmp	r2, r3
 8015eb4:	d118      	bne.n	8015ee8 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8015eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015eb8:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8015eba:	2b00      	cmp	r3, #0
 8015ebc:	d005      	beq.n	8015eca <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8015ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015ec0:	685a      	ldr	r2, [r3, #4]
 8015ec2:	4b43      	ldr	r3, [pc, #268]	; (8015fd0 <udp_input+0x218>)
 8015ec4:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8015ec6:	429a      	cmp	r2, r3
 8015ec8:	d10e      	bne.n	8015ee8 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8015eca:	6a3b      	ldr	r3, [r7, #32]
 8015ecc:	2b00      	cmp	r3, #0
 8015ece:	d014      	beq.n	8015efa <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8015ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015ed2:	68da      	ldr	r2, [r3, #12]
 8015ed4:	6a3b      	ldr	r3, [r7, #32]
 8015ed6:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8015ed8:	4b3e      	ldr	r3, [pc, #248]	; (8015fd4 <udp_input+0x21c>)
 8015eda:	681a      	ldr	r2, [r3, #0]
 8015edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015ede:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8015ee0:	4a3c      	ldr	r2, [pc, #240]	; (8015fd4 <udp_input+0x21c>)
 8015ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015ee4:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8015ee6:	e008      	b.n	8015efa <udp_input+0x142>
      }
    }

    prev = pcb;
 8015ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015eea:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8015eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015eee:	68db      	ldr	r3, [r3, #12]
 8015ef0:	627b      	str	r3, [r7, #36]	; 0x24
 8015ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015ef4:	2b00      	cmp	r3, #0
 8015ef6:	d1a7      	bne.n	8015e48 <udp_input+0x90>
 8015ef8:	e000      	b.n	8015efc <udp_input+0x144>
        break;
 8015efa:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8015efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015efe:	2b00      	cmp	r3, #0
 8015f00:	d101      	bne.n	8015f06 <udp_input+0x14e>
    pcb = uncon_pcb;
 8015f02:	69fb      	ldr	r3, [r7, #28]
 8015f04:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8015f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f08:	2b00      	cmp	r3, #0
 8015f0a:	d002      	beq.n	8015f12 <udp_input+0x15a>
    for_us = 1;
 8015f0c:	2301      	movs	r3, #1
 8015f0e:	76fb      	strb	r3, [r7, #27]
 8015f10:	e00a      	b.n	8015f28 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8015f12:	683b      	ldr	r3, [r7, #0]
 8015f14:	3304      	adds	r3, #4
 8015f16:	681a      	ldr	r2, [r3, #0]
 8015f18:	4b2d      	ldr	r3, [pc, #180]	; (8015fd0 <udp_input+0x218>)
 8015f1a:	695b      	ldr	r3, [r3, #20]
 8015f1c:	429a      	cmp	r2, r3
 8015f1e:	bf0c      	ite	eq
 8015f20:	2301      	moveq	r3, #1
 8015f22:	2300      	movne	r3, #0
 8015f24:	b2db      	uxtb	r3, r3
 8015f26:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8015f28:	7efb      	ldrb	r3, [r7, #27]
 8015f2a:	2b00      	cmp	r3, #0
 8015f2c:	d041      	beq.n	8015fb2 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8015f2e:	2108      	movs	r1, #8
 8015f30:	6878      	ldr	r0, [r7, #4]
 8015f32:	f7fa f911 	bl	8010158 <pbuf_remove_header>
 8015f36:	4603      	mov	r3, r0
 8015f38:	2b00      	cmp	r3, #0
 8015f3a:	d00a      	beq.n	8015f52 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8015f3c:	4b20      	ldr	r3, [pc, #128]	; (8015fc0 <udp_input+0x208>)
 8015f3e:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8015f42:	4925      	ldr	r1, [pc, #148]	; (8015fd8 <udp_input+0x220>)
 8015f44:	4820      	ldr	r0, [pc, #128]	; (8015fc8 <udp_input+0x210>)
 8015f46:	f005 fa0b 	bl	801b360 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8015f4a:	6878      	ldr	r0, [r7, #4]
 8015f4c:	f7fa f98a 	bl	8010264 <pbuf_free>
      goto end;
 8015f50:	e032      	b.n	8015fb8 <udp_input+0x200>
    }

    if (pcb != NULL) {
 8015f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f54:	2b00      	cmp	r3, #0
 8015f56:	d012      	beq.n	8015f7e <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8015f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f5a:	699b      	ldr	r3, [r3, #24]
 8015f5c:	2b00      	cmp	r3, #0
 8015f5e:	d00a      	beq.n	8015f76 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8015f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f62:	699c      	ldr	r4, [r3, #24]
 8015f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f66:	69d8      	ldr	r0, [r3, #28]
 8015f68:	8a3b      	ldrh	r3, [r7, #16]
 8015f6a:	9300      	str	r3, [sp, #0]
 8015f6c:	4b1b      	ldr	r3, [pc, #108]	; (8015fdc <udp_input+0x224>)
 8015f6e:	687a      	ldr	r2, [r7, #4]
 8015f70:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8015f72:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8015f74:	e021      	b.n	8015fba <udp_input+0x202>
        pbuf_free(p);
 8015f76:	6878      	ldr	r0, [r7, #4]
 8015f78:	f7fa f974 	bl	8010264 <pbuf_free>
        goto end;
 8015f7c:	e01c      	b.n	8015fb8 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8015f7e:	7cfb      	ldrb	r3, [r7, #19]
 8015f80:	2b00      	cmp	r3, #0
 8015f82:	d112      	bne.n	8015faa <udp_input+0x1f2>
 8015f84:	4b12      	ldr	r3, [pc, #72]	; (8015fd0 <udp_input+0x218>)
 8015f86:	695b      	ldr	r3, [r3, #20]
 8015f88:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015f8c:	2be0      	cmp	r3, #224	; 0xe0
 8015f8e:	d00c      	beq.n	8015faa <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8015f90:	4b0f      	ldr	r3, [pc, #60]	; (8015fd0 <udp_input+0x218>)
 8015f92:	899b      	ldrh	r3, [r3, #12]
 8015f94:	3308      	adds	r3, #8
 8015f96:	b29b      	uxth	r3, r3
 8015f98:	b21b      	sxth	r3, r3
 8015f9a:	4619      	mov	r1, r3
 8015f9c:	6878      	ldr	r0, [r7, #4]
 8015f9e:	f7fa f94e 	bl	801023e <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8015fa2:	2103      	movs	r1, #3
 8015fa4:	6878      	ldr	r0, [r7, #4]
 8015fa6:	f003 f9bf 	bl	8019328 <icmp_dest_unreach>
      pbuf_free(p);
 8015faa:	6878      	ldr	r0, [r7, #4]
 8015fac:	f7fa f95a 	bl	8010264 <pbuf_free>
  return;
 8015fb0:	e003      	b.n	8015fba <udp_input+0x202>
    pbuf_free(p);
 8015fb2:	6878      	ldr	r0, [r7, #4]
 8015fb4:	f7fa f956 	bl	8010264 <pbuf_free>
  return;
 8015fb8:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8015fba:	372c      	adds	r7, #44	; 0x2c
 8015fbc:	46bd      	mov	sp, r7
 8015fbe:	bd90      	pop	{r4, r7, pc}
 8015fc0:	08022b20 	.word	0x08022b20
 8015fc4:	08022bc4 	.word	0x08022bc4
 8015fc8:	08022b74 	.word	0x08022b74
 8015fcc:	08022bdc 	.word	0x08022bdc
 8015fd0:	2000450c 	.word	0x2000450c
 8015fd4:	20007648 	.word	0x20007648
 8015fd8:	08022bf8 	.word	0x08022bf8
 8015fdc:	2000451c 	.word	0x2000451c

08015fe0 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8015fe0:	b580      	push	{r7, lr}
 8015fe2:	b088      	sub	sp, #32
 8015fe4:	af02      	add	r7, sp, #8
 8015fe6:	60f8      	str	r0, [r7, #12]
 8015fe8:	60b9      	str	r1, [r7, #8]
 8015fea:	607a      	str	r2, [r7, #4]
 8015fec:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 8015fee:	68fb      	ldr	r3, [r7, #12]
 8015ff0:	2b00      	cmp	r3, #0
 8015ff2:	d109      	bne.n	8016008 <udp_sendto_if+0x28>
 8015ff4:	4b2e      	ldr	r3, [pc, #184]	; (80160b0 <udp_sendto_if+0xd0>)
 8015ff6:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015ffa:	492e      	ldr	r1, [pc, #184]	; (80160b4 <udp_sendto_if+0xd4>)
 8015ffc:	482e      	ldr	r0, [pc, #184]	; (80160b8 <udp_sendto_if+0xd8>)
 8015ffe:	f005 f9af 	bl	801b360 <iprintf>
 8016002:	f06f 030f 	mvn.w	r3, #15
 8016006:	e04f      	b.n	80160a8 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8016008:	68bb      	ldr	r3, [r7, #8]
 801600a:	2b00      	cmp	r3, #0
 801600c:	d109      	bne.n	8016022 <udp_sendto_if+0x42>
 801600e:	4b28      	ldr	r3, [pc, #160]	; (80160b0 <udp_sendto_if+0xd0>)
 8016010:	f240 2281 	movw	r2, #641	; 0x281
 8016014:	4929      	ldr	r1, [pc, #164]	; (80160bc <udp_sendto_if+0xdc>)
 8016016:	4828      	ldr	r0, [pc, #160]	; (80160b8 <udp_sendto_if+0xd8>)
 8016018:	f005 f9a2 	bl	801b360 <iprintf>
 801601c:	f06f 030f 	mvn.w	r3, #15
 8016020:	e042      	b.n	80160a8 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8016022:	687b      	ldr	r3, [r7, #4]
 8016024:	2b00      	cmp	r3, #0
 8016026:	d109      	bne.n	801603c <udp_sendto_if+0x5c>
 8016028:	4b21      	ldr	r3, [pc, #132]	; (80160b0 <udp_sendto_if+0xd0>)
 801602a:	f240 2282 	movw	r2, #642	; 0x282
 801602e:	4924      	ldr	r1, [pc, #144]	; (80160c0 <udp_sendto_if+0xe0>)
 8016030:	4821      	ldr	r0, [pc, #132]	; (80160b8 <udp_sendto_if+0xd8>)
 8016032:	f005 f995 	bl	801b360 <iprintf>
 8016036:	f06f 030f 	mvn.w	r3, #15
 801603a:	e035      	b.n	80160a8 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 801603c:	6a3b      	ldr	r3, [r7, #32]
 801603e:	2b00      	cmp	r3, #0
 8016040:	d109      	bne.n	8016056 <udp_sendto_if+0x76>
 8016042:	4b1b      	ldr	r3, [pc, #108]	; (80160b0 <udp_sendto_if+0xd0>)
 8016044:	f240 2283 	movw	r2, #643	; 0x283
 8016048:	491e      	ldr	r1, [pc, #120]	; (80160c4 <udp_sendto_if+0xe4>)
 801604a:	481b      	ldr	r0, [pc, #108]	; (80160b8 <udp_sendto_if+0xd8>)
 801604c:	f005 f988 	bl	801b360 <iprintf>
 8016050:	f06f 030f 	mvn.w	r3, #15
 8016054:	e028      	b.n	80160a8 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8016056:	68fb      	ldr	r3, [r7, #12]
 8016058:	2b00      	cmp	r3, #0
 801605a:	d009      	beq.n	8016070 <udp_sendto_if+0x90>
 801605c:	68fb      	ldr	r3, [r7, #12]
 801605e:	681b      	ldr	r3, [r3, #0]
 8016060:	2b00      	cmp	r3, #0
 8016062:	d005      	beq.n	8016070 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8016064:	68fb      	ldr	r3, [r7, #12]
 8016066:	681b      	ldr	r3, [r3, #0]
 8016068:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801606c:	2be0      	cmp	r3, #224	; 0xe0
 801606e:	d103      	bne.n	8016078 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 8016070:	6a3b      	ldr	r3, [r7, #32]
 8016072:	3304      	adds	r3, #4
 8016074:	617b      	str	r3, [r7, #20]
 8016076:	e00b      	b.n	8016090 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8016078:	68fb      	ldr	r3, [r7, #12]
 801607a:	681a      	ldr	r2, [r3, #0]
 801607c:	6a3b      	ldr	r3, [r7, #32]
 801607e:	3304      	adds	r3, #4
 8016080:	681b      	ldr	r3, [r3, #0]
 8016082:	429a      	cmp	r2, r3
 8016084:	d002      	beq.n	801608c <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 8016086:	f06f 0303 	mvn.w	r3, #3
 801608a:	e00d      	b.n	80160a8 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 801608c:	68fb      	ldr	r3, [r7, #12]
 801608e:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8016090:	887a      	ldrh	r2, [r7, #2]
 8016092:	697b      	ldr	r3, [r7, #20]
 8016094:	9301      	str	r3, [sp, #4]
 8016096:	6a3b      	ldr	r3, [r7, #32]
 8016098:	9300      	str	r3, [sp, #0]
 801609a:	4613      	mov	r3, r2
 801609c:	687a      	ldr	r2, [r7, #4]
 801609e:	68b9      	ldr	r1, [r7, #8]
 80160a0:	68f8      	ldr	r0, [r7, #12]
 80160a2:	f000 f811 	bl	80160c8 <udp_sendto_if_src>
 80160a6:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 80160a8:	4618      	mov	r0, r3
 80160aa:	3718      	adds	r7, #24
 80160ac:	46bd      	mov	sp, r7
 80160ae:	bd80      	pop	{r7, pc}
 80160b0:	08022b20 	.word	0x08022b20
 80160b4:	08022c94 	.word	0x08022c94
 80160b8:	08022b74 	.word	0x08022b74
 80160bc:	08022cb0 	.word	0x08022cb0
 80160c0:	08022ccc 	.word	0x08022ccc
 80160c4:	08022cec 	.word	0x08022cec

080160c8 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 80160c8:	b580      	push	{r7, lr}
 80160ca:	b08c      	sub	sp, #48	; 0x30
 80160cc:	af04      	add	r7, sp, #16
 80160ce:	60f8      	str	r0, [r7, #12]
 80160d0:	60b9      	str	r1, [r7, #8]
 80160d2:	607a      	str	r2, [r7, #4]
 80160d4:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 80160d6:	68fb      	ldr	r3, [r7, #12]
 80160d8:	2b00      	cmp	r3, #0
 80160da:	d109      	bne.n	80160f0 <udp_sendto_if_src+0x28>
 80160dc:	4b65      	ldr	r3, [pc, #404]	; (8016274 <udp_sendto_if_src+0x1ac>)
 80160de:	f240 22d1 	movw	r2, #721	; 0x2d1
 80160e2:	4965      	ldr	r1, [pc, #404]	; (8016278 <udp_sendto_if_src+0x1b0>)
 80160e4:	4865      	ldr	r0, [pc, #404]	; (801627c <udp_sendto_if_src+0x1b4>)
 80160e6:	f005 f93b 	bl	801b360 <iprintf>
 80160ea:	f06f 030f 	mvn.w	r3, #15
 80160ee:	e0bc      	b.n	801626a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 80160f0:	68bb      	ldr	r3, [r7, #8]
 80160f2:	2b00      	cmp	r3, #0
 80160f4:	d109      	bne.n	801610a <udp_sendto_if_src+0x42>
 80160f6:	4b5f      	ldr	r3, [pc, #380]	; (8016274 <udp_sendto_if_src+0x1ac>)
 80160f8:	f240 22d2 	movw	r2, #722	; 0x2d2
 80160fc:	4960      	ldr	r1, [pc, #384]	; (8016280 <udp_sendto_if_src+0x1b8>)
 80160fe:	485f      	ldr	r0, [pc, #380]	; (801627c <udp_sendto_if_src+0x1b4>)
 8016100:	f005 f92e 	bl	801b360 <iprintf>
 8016104:	f06f 030f 	mvn.w	r3, #15
 8016108:	e0af      	b.n	801626a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801610a:	687b      	ldr	r3, [r7, #4]
 801610c:	2b00      	cmp	r3, #0
 801610e:	d109      	bne.n	8016124 <udp_sendto_if_src+0x5c>
 8016110:	4b58      	ldr	r3, [pc, #352]	; (8016274 <udp_sendto_if_src+0x1ac>)
 8016112:	f240 22d3 	movw	r2, #723	; 0x2d3
 8016116:	495b      	ldr	r1, [pc, #364]	; (8016284 <udp_sendto_if_src+0x1bc>)
 8016118:	4858      	ldr	r0, [pc, #352]	; (801627c <udp_sendto_if_src+0x1b4>)
 801611a:	f005 f921 	bl	801b360 <iprintf>
 801611e:	f06f 030f 	mvn.w	r3, #15
 8016122:	e0a2      	b.n	801626a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8016124:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016126:	2b00      	cmp	r3, #0
 8016128:	d109      	bne.n	801613e <udp_sendto_if_src+0x76>
 801612a:	4b52      	ldr	r3, [pc, #328]	; (8016274 <udp_sendto_if_src+0x1ac>)
 801612c:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 8016130:	4955      	ldr	r1, [pc, #340]	; (8016288 <udp_sendto_if_src+0x1c0>)
 8016132:	4852      	ldr	r0, [pc, #328]	; (801627c <udp_sendto_if_src+0x1b4>)
 8016134:	f005 f914 	bl	801b360 <iprintf>
 8016138:	f06f 030f 	mvn.w	r3, #15
 801613c:	e095      	b.n	801626a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 801613e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016140:	2b00      	cmp	r3, #0
 8016142:	d109      	bne.n	8016158 <udp_sendto_if_src+0x90>
 8016144:	4b4b      	ldr	r3, [pc, #300]	; (8016274 <udp_sendto_if_src+0x1ac>)
 8016146:	f240 22d5 	movw	r2, #725	; 0x2d5
 801614a:	4950      	ldr	r1, [pc, #320]	; (801628c <udp_sendto_if_src+0x1c4>)
 801614c:	484b      	ldr	r0, [pc, #300]	; (801627c <udp_sendto_if_src+0x1b4>)
 801614e:	f005 f907 	bl	801b360 <iprintf>
 8016152:	f06f 030f 	mvn.w	r3, #15
 8016156:	e088      	b.n	801626a <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8016158:	68fb      	ldr	r3, [r7, #12]
 801615a:	8a5b      	ldrh	r3, [r3, #18]
 801615c:	2b00      	cmp	r3, #0
 801615e:	d10f      	bne.n	8016180 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8016160:	68f9      	ldr	r1, [r7, #12]
 8016162:	68fb      	ldr	r3, [r7, #12]
 8016164:	8a5b      	ldrh	r3, [r3, #18]
 8016166:	461a      	mov	r2, r3
 8016168:	68f8      	ldr	r0, [r7, #12]
 801616a:	f000 f893 	bl	8016294 <udp_bind>
 801616e:	4603      	mov	r3, r0
 8016170:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 8016172:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8016176:	2b00      	cmp	r3, #0
 8016178:	d002      	beq.n	8016180 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 801617a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801617e:	e074      	b.n	801626a <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8016180:	68bb      	ldr	r3, [r7, #8]
 8016182:	891b      	ldrh	r3, [r3, #8]
 8016184:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8016188:	4293      	cmp	r3, r2
 801618a:	d902      	bls.n	8016192 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 801618c:	f04f 33ff 	mov.w	r3, #4294967295
 8016190:	e06b      	b.n	801626a <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 8016192:	2108      	movs	r1, #8
 8016194:	68b8      	ldr	r0, [r7, #8]
 8016196:	f7f9 ffcf 	bl	8010138 <pbuf_add_header>
 801619a:	4603      	mov	r3, r0
 801619c:	2b00      	cmp	r3, #0
 801619e:	d015      	beq.n	80161cc <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 80161a0:	f44f 7220 	mov.w	r2, #640	; 0x280
 80161a4:	2108      	movs	r1, #8
 80161a6:	2022      	movs	r0, #34	; 0x22
 80161a8:	f7f9 fd78 	bl	800fc9c <pbuf_alloc>
 80161ac:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 80161ae:	69fb      	ldr	r3, [r7, #28]
 80161b0:	2b00      	cmp	r3, #0
 80161b2:	d102      	bne.n	80161ba <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 80161b4:	f04f 33ff 	mov.w	r3, #4294967295
 80161b8:	e057      	b.n	801626a <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 80161ba:	68bb      	ldr	r3, [r7, #8]
 80161bc:	891b      	ldrh	r3, [r3, #8]
 80161be:	2b00      	cmp	r3, #0
 80161c0:	d006      	beq.n	80161d0 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 80161c2:	68b9      	ldr	r1, [r7, #8]
 80161c4:	69f8      	ldr	r0, [r7, #28]
 80161c6:	f7fa f965 	bl	8010494 <pbuf_chain>
 80161ca:	e001      	b.n	80161d0 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 80161cc:	68bb      	ldr	r3, [r7, #8]
 80161ce:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 80161d0:	69fb      	ldr	r3, [r7, #28]
 80161d2:	895b      	ldrh	r3, [r3, #10]
 80161d4:	2b07      	cmp	r3, #7
 80161d6:	d806      	bhi.n	80161e6 <udp_sendto_if_src+0x11e>
 80161d8:	4b26      	ldr	r3, [pc, #152]	; (8016274 <udp_sendto_if_src+0x1ac>)
 80161da:	f240 320d 	movw	r2, #781	; 0x30d
 80161de:	492c      	ldr	r1, [pc, #176]	; (8016290 <udp_sendto_if_src+0x1c8>)
 80161e0:	4826      	ldr	r0, [pc, #152]	; (801627c <udp_sendto_if_src+0x1b4>)
 80161e2:	f005 f8bd 	bl	801b360 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 80161e6:	69fb      	ldr	r3, [r7, #28]
 80161e8:	685b      	ldr	r3, [r3, #4]
 80161ea:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 80161ec:	68fb      	ldr	r3, [r7, #12]
 80161ee:	8a5b      	ldrh	r3, [r3, #18]
 80161f0:	4618      	mov	r0, r3
 80161f2:	f7f8 fd9b 	bl	800ed2c <lwip_htons>
 80161f6:	4603      	mov	r3, r0
 80161f8:	461a      	mov	r2, r3
 80161fa:	697b      	ldr	r3, [r7, #20]
 80161fc:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 80161fe:	887b      	ldrh	r3, [r7, #2]
 8016200:	4618      	mov	r0, r3
 8016202:	f7f8 fd93 	bl	800ed2c <lwip_htons>
 8016206:	4603      	mov	r3, r0
 8016208:	461a      	mov	r2, r3
 801620a:	697b      	ldr	r3, [r7, #20]
 801620c:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 801620e:	697b      	ldr	r3, [r7, #20]
 8016210:	2200      	movs	r2, #0
 8016212:	719a      	strb	r2, [r3, #6]
 8016214:	2200      	movs	r2, #0
 8016216:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8016218:	69fb      	ldr	r3, [r7, #28]
 801621a:	891b      	ldrh	r3, [r3, #8]
 801621c:	4618      	mov	r0, r3
 801621e:	f7f8 fd85 	bl	800ed2c <lwip_htons>
 8016222:	4603      	mov	r3, r0
 8016224:	461a      	mov	r2, r3
 8016226:	697b      	ldr	r3, [r7, #20]
 8016228:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 801622a:	2311      	movs	r3, #17
 801622c:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 801622e:	68fb      	ldr	r3, [r7, #12]
 8016230:	7adb      	ldrb	r3, [r3, #11]
 8016232:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8016234:	68fb      	ldr	r3, [r7, #12]
 8016236:	7a9b      	ldrb	r3, [r3, #10]
 8016238:	7cb9      	ldrb	r1, [r7, #18]
 801623a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801623c:	9202      	str	r2, [sp, #8]
 801623e:	7cfa      	ldrb	r2, [r7, #19]
 8016240:	9201      	str	r2, [sp, #4]
 8016242:	9300      	str	r3, [sp, #0]
 8016244:	460b      	mov	r3, r1
 8016246:	687a      	ldr	r2, [r7, #4]
 8016248:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801624a:	69f8      	ldr	r0, [r7, #28]
 801624c:	f003 fafc 	bl	8019848 <ip4_output_if_src>
 8016250:	4603      	mov	r3, r0
 8016252:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8016254:	69fa      	ldr	r2, [r7, #28]
 8016256:	68bb      	ldr	r3, [r7, #8]
 8016258:	429a      	cmp	r2, r3
 801625a:	d004      	beq.n	8016266 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 801625c:	69f8      	ldr	r0, [r7, #28]
 801625e:	f7fa f801 	bl	8010264 <pbuf_free>
    q = NULL;
 8016262:	2300      	movs	r3, #0
 8016264:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 8016266:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 801626a:	4618      	mov	r0, r3
 801626c:	3720      	adds	r7, #32
 801626e:	46bd      	mov	sp, r7
 8016270:	bd80      	pop	{r7, pc}
 8016272:	bf00      	nop
 8016274:	08022b20 	.word	0x08022b20
 8016278:	08022d0c 	.word	0x08022d0c
 801627c:	08022b74 	.word	0x08022b74
 8016280:	08022d2c 	.word	0x08022d2c
 8016284:	08022d4c 	.word	0x08022d4c
 8016288:	08022d70 	.word	0x08022d70
 801628c:	08022d94 	.word	0x08022d94
 8016290:	08022db8 	.word	0x08022db8

08016294 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8016294:	b580      	push	{r7, lr}
 8016296:	b086      	sub	sp, #24
 8016298:	af00      	add	r7, sp, #0
 801629a:	60f8      	str	r0, [r7, #12]
 801629c:	60b9      	str	r1, [r7, #8]
 801629e:	4613      	mov	r3, r2
 80162a0:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80162a2:	68bb      	ldr	r3, [r7, #8]
 80162a4:	2b00      	cmp	r3, #0
 80162a6:	d101      	bne.n	80162ac <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 80162a8:	4b39      	ldr	r3, [pc, #228]	; (8016390 <udp_bind+0xfc>)
 80162aa:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 80162ac:	68fb      	ldr	r3, [r7, #12]
 80162ae:	2b00      	cmp	r3, #0
 80162b0:	d109      	bne.n	80162c6 <udp_bind+0x32>
 80162b2:	4b38      	ldr	r3, [pc, #224]	; (8016394 <udp_bind+0x100>)
 80162b4:	f240 32b7 	movw	r2, #951	; 0x3b7
 80162b8:	4937      	ldr	r1, [pc, #220]	; (8016398 <udp_bind+0x104>)
 80162ba:	4838      	ldr	r0, [pc, #224]	; (801639c <udp_bind+0x108>)
 80162bc:	f005 f850 	bl	801b360 <iprintf>
 80162c0:	f06f 030f 	mvn.w	r3, #15
 80162c4:	e060      	b.n	8016388 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 80162c6:	2300      	movs	r3, #0
 80162c8:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80162ca:	4b35      	ldr	r3, [pc, #212]	; (80163a0 <udp_bind+0x10c>)
 80162cc:	681b      	ldr	r3, [r3, #0]
 80162ce:	617b      	str	r3, [r7, #20]
 80162d0:	e009      	b.n	80162e6 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 80162d2:	68fa      	ldr	r2, [r7, #12]
 80162d4:	697b      	ldr	r3, [r7, #20]
 80162d6:	429a      	cmp	r2, r3
 80162d8:	d102      	bne.n	80162e0 <udp_bind+0x4c>
      rebind = 1;
 80162da:	2301      	movs	r3, #1
 80162dc:	74fb      	strb	r3, [r7, #19]
      break;
 80162de:	e005      	b.n	80162ec <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80162e0:	697b      	ldr	r3, [r7, #20]
 80162e2:	68db      	ldr	r3, [r3, #12]
 80162e4:	617b      	str	r3, [r7, #20]
 80162e6:	697b      	ldr	r3, [r7, #20]
 80162e8:	2b00      	cmp	r3, #0
 80162ea:	d1f2      	bne.n	80162d2 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 80162ec:	88fb      	ldrh	r3, [r7, #6]
 80162ee:	2b00      	cmp	r3, #0
 80162f0:	d109      	bne.n	8016306 <udp_bind+0x72>
    port = udp_new_port();
 80162f2:	f7ff fcc5 	bl	8015c80 <udp_new_port>
 80162f6:	4603      	mov	r3, r0
 80162f8:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 80162fa:	88fb      	ldrh	r3, [r7, #6]
 80162fc:	2b00      	cmp	r3, #0
 80162fe:	d12c      	bne.n	801635a <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8016300:	f06f 0307 	mvn.w	r3, #7
 8016304:	e040      	b.n	8016388 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8016306:	4b26      	ldr	r3, [pc, #152]	; (80163a0 <udp_bind+0x10c>)
 8016308:	681b      	ldr	r3, [r3, #0]
 801630a:	617b      	str	r3, [r7, #20]
 801630c:	e022      	b.n	8016354 <udp_bind+0xc0>
      if (pcb != ipcb) {
 801630e:	68fa      	ldr	r2, [r7, #12]
 8016310:	697b      	ldr	r3, [r7, #20]
 8016312:	429a      	cmp	r2, r3
 8016314:	d01b      	beq.n	801634e <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8016316:	697b      	ldr	r3, [r7, #20]
 8016318:	8a5b      	ldrh	r3, [r3, #18]
 801631a:	88fa      	ldrh	r2, [r7, #6]
 801631c:	429a      	cmp	r2, r3
 801631e:	d116      	bne.n	801634e <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8016320:	697b      	ldr	r3, [r7, #20]
 8016322:	681a      	ldr	r2, [r3, #0]
 8016324:	68bb      	ldr	r3, [r7, #8]
 8016326:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8016328:	429a      	cmp	r2, r3
 801632a:	d00d      	beq.n	8016348 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801632c:	68bb      	ldr	r3, [r7, #8]
 801632e:	2b00      	cmp	r3, #0
 8016330:	d00a      	beq.n	8016348 <udp_bind+0xb4>
 8016332:	68bb      	ldr	r3, [r7, #8]
 8016334:	681b      	ldr	r3, [r3, #0]
 8016336:	2b00      	cmp	r3, #0
 8016338:	d006      	beq.n	8016348 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801633a:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801633c:	2b00      	cmp	r3, #0
 801633e:	d003      	beq.n	8016348 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8016340:	697b      	ldr	r3, [r7, #20]
 8016342:	681b      	ldr	r3, [r3, #0]
 8016344:	2b00      	cmp	r3, #0
 8016346:	d102      	bne.n	801634e <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8016348:	f06f 0307 	mvn.w	r3, #7
 801634c:	e01c      	b.n	8016388 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801634e:	697b      	ldr	r3, [r7, #20]
 8016350:	68db      	ldr	r3, [r3, #12]
 8016352:	617b      	str	r3, [r7, #20]
 8016354:	697b      	ldr	r3, [r7, #20]
 8016356:	2b00      	cmp	r3, #0
 8016358:	d1d9      	bne.n	801630e <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 801635a:	68bb      	ldr	r3, [r7, #8]
 801635c:	2b00      	cmp	r3, #0
 801635e:	d002      	beq.n	8016366 <udp_bind+0xd2>
 8016360:	68bb      	ldr	r3, [r7, #8]
 8016362:	681b      	ldr	r3, [r3, #0]
 8016364:	e000      	b.n	8016368 <udp_bind+0xd4>
 8016366:	2300      	movs	r3, #0
 8016368:	68fa      	ldr	r2, [r7, #12]
 801636a:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 801636c:	68fb      	ldr	r3, [r7, #12]
 801636e:	88fa      	ldrh	r2, [r7, #6]
 8016370:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8016372:	7cfb      	ldrb	r3, [r7, #19]
 8016374:	2b00      	cmp	r3, #0
 8016376:	d106      	bne.n	8016386 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8016378:	4b09      	ldr	r3, [pc, #36]	; (80163a0 <udp_bind+0x10c>)
 801637a:	681a      	ldr	r2, [r3, #0]
 801637c:	68fb      	ldr	r3, [r7, #12]
 801637e:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8016380:	4a07      	ldr	r2, [pc, #28]	; (80163a0 <udp_bind+0x10c>)
 8016382:	68fb      	ldr	r3, [r7, #12]
 8016384:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8016386:	2300      	movs	r3, #0
}
 8016388:	4618      	mov	r0, r3
 801638a:	3718      	adds	r7, #24
 801638c:	46bd      	mov	sp, r7
 801638e:	bd80      	pop	{r7, pc}
 8016390:	08023f40 	.word	0x08023f40
 8016394:	08022b20 	.word	0x08022b20
 8016398:	08022de8 	.word	0x08022de8
 801639c:	08022b74 	.word	0x08022b74
 80163a0:	20007648 	.word	0x20007648

080163a4 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80163a4:	b580      	push	{r7, lr}
 80163a6:	b086      	sub	sp, #24
 80163a8:	af00      	add	r7, sp, #0
 80163aa:	60f8      	str	r0, [r7, #12]
 80163ac:	60b9      	str	r1, [r7, #8]
 80163ae:	4613      	mov	r3, r2
 80163b0:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 80163b2:	68fb      	ldr	r3, [r7, #12]
 80163b4:	2b00      	cmp	r3, #0
 80163b6:	d109      	bne.n	80163cc <udp_connect+0x28>
 80163b8:	4b2c      	ldr	r3, [pc, #176]	; (801646c <udp_connect+0xc8>)
 80163ba:	f240 4235 	movw	r2, #1077	; 0x435
 80163be:	492c      	ldr	r1, [pc, #176]	; (8016470 <udp_connect+0xcc>)
 80163c0:	482c      	ldr	r0, [pc, #176]	; (8016474 <udp_connect+0xd0>)
 80163c2:	f004 ffcd 	bl	801b360 <iprintf>
 80163c6:	f06f 030f 	mvn.w	r3, #15
 80163ca:	e04b      	b.n	8016464 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 80163cc:	68bb      	ldr	r3, [r7, #8]
 80163ce:	2b00      	cmp	r3, #0
 80163d0:	d109      	bne.n	80163e6 <udp_connect+0x42>
 80163d2:	4b26      	ldr	r3, [pc, #152]	; (801646c <udp_connect+0xc8>)
 80163d4:	f240 4236 	movw	r2, #1078	; 0x436
 80163d8:	4927      	ldr	r1, [pc, #156]	; (8016478 <udp_connect+0xd4>)
 80163da:	4826      	ldr	r0, [pc, #152]	; (8016474 <udp_connect+0xd0>)
 80163dc:	f004 ffc0 	bl	801b360 <iprintf>
 80163e0:	f06f 030f 	mvn.w	r3, #15
 80163e4:	e03e      	b.n	8016464 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 80163e6:	68fb      	ldr	r3, [r7, #12]
 80163e8:	8a5b      	ldrh	r3, [r3, #18]
 80163ea:	2b00      	cmp	r3, #0
 80163ec:	d10f      	bne.n	801640e <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 80163ee:	68f9      	ldr	r1, [r7, #12]
 80163f0:	68fb      	ldr	r3, [r7, #12]
 80163f2:	8a5b      	ldrh	r3, [r3, #18]
 80163f4:	461a      	mov	r2, r3
 80163f6:	68f8      	ldr	r0, [r7, #12]
 80163f8:	f7ff ff4c 	bl	8016294 <udp_bind>
 80163fc:	4603      	mov	r3, r0
 80163fe:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8016400:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8016404:	2b00      	cmp	r3, #0
 8016406:	d002      	beq.n	801640e <udp_connect+0x6a>
      return err;
 8016408:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801640c:	e02a      	b.n	8016464 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 801640e:	68bb      	ldr	r3, [r7, #8]
 8016410:	2b00      	cmp	r3, #0
 8016412:	d002      	beq.n	801641a <udp_connect+0x76>
 8016414:	68bb      	ldr	r3, [r7, #8]
 8016416:	681b      	ldr	r3, [r3, #0]
 8016418:	e000      	b.n	801641c <udp_connect+0x78>
 801641a:	2300      	movs	r3, #0
 801641c:	68fa      	ldr	r2, [r7, #12]
 801641e:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 8016420:	68fb      	ldr	r3, [r7, #12]
 8016422:	88fa      	ldrh	r2, [r7, #6]
 8016424:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 8016426:	68fb      	ldr	r3, [r7, #12]
 8016428:	7c1b      	ldrb	r3, [r3, #16]
 801642a:	f043 0304 	orr.w	r3, r3, #4
 801642e:	b2da      	uxtb	r2, r3
 8016430:	68fb      	ldr	r3, [r7, #12]
 8016432:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8016434:	4b11      	ldr	r3, [pc, #68]	; (801647c <udp_connect+0xd8>)
 8016436:	681b      	ldr	r3, [r3, #0]
 8016438:	617b      	str	r3, [r7, #20]
 801643a:	e008      	b.n	801644e <udp_connect+0xaa>
    if (pcb == ipcb) {
 801643c:	68fa      	ldr	r2, [r7, #12]
 801643e:	697b      	ldr	r3, [r7, #20]
 8016440:	429a      	cmp	r2, r3
 8016442:	d101      	bne.n	8016448 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 8016444:	2300      	movs	r3, #0
 8016446:	e00d      	b.n	8016464 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8016448:	697b      	ldr	r3, [r7, #20]
 801644a:	68db      	ldr	r3, [r3, #12]
 801644c:	617b      	str	r3, [r7, #20]
 801644e:	697b      	ldr	r3, [r7, #20]
 8016450:	2b00      	cmp	r3, #0
 8016452:	d1f3      	bne.n	801643c <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 8016454:	4b09      	ldr	r3, [pc, #36]	; (801647c <udp_connect+0xd8>)
 8016456:	681a      	ldr	r2, [r3, #0]
 8016458:	68fb      	ldr	r3, [r7, #12]
 801645a:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 801645c:	4a07      	ldr	r2, [pc, #28]	; (801647c <udp_connect+0xd8>)
 801645e:	68fb      	ldr	r3, [r7, #12]
 8016460:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 8016462:	2300      	movs	r3, #0
}
 8016464:	4618      	mov	r0, r3
 8016466:	3718      	adds	r7, #24
 8016468:	46bd      	mov	sp, r7
 801646a:	bd80      	pop	{r7, pc}
 801646c:	08022b20 	.word	0x08022b20
 8016470:	08022e00 	.word	0x08022e00
 8016474:	08022b74 	.word	0x08022b74
 8016478:	08022e1c 	.word	0x08022e1c
 801647c:	20007648 	.word	0x20007648

08016480 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8016480:	b580      	push	{r7, lr}
 8016482:	b084      	sub	sp, #16
 8016484:	af00      	add	r7, sp, #0
 8016486:	60f8      	str	r0, [r7, #12]
 8016488:	60b9      	str	r1, [r7, #8]
 801648a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 801648c:	68fb      	ldr	r3, [r7, #12]
 801648e:	2b00      	cmp	r3, #0
 8016490:	d107      	bne.n	80164a2 <udp_recv+0x22>
 8016492:	4b08      	ldr	r3, [pc, #32]	; (80164b4 <udp_recv+0x34>)
 8016494:	f240 428a 	movw	r2, #1162	; 0x48a
 8016498:	4907      	ldr	r1, [pc, #28]	; (80164b8 <udp_recv+0x38>)
 801649a:	4808      	ldr	r0, [pc, #32]	; (80164bc <udp_recv+0x3c>)
 801649c:	f004 ff60 	bl	801b360 <iprintf>
 80164a0:	e005      	b.n	80164ae <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 80164a2:	68fb      	ldr	r3, [r7, #12]
 80164a4:	68ba      	ldr	r2, [r7, #8]
 80164a6:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 80164a8:	68fb      	ldr	r3, [r7, #12]
 80164aa:	687a      	ldr	r2, [r7, #4]
 80164ac:	61da      	str	r2, [r3, #28]
}
 80164ae:	3710      	adds	r7, #16
 80164b0:	46bd      	mov	sp, r7
 80164b2:	bd80      	pop	{r7, pc}
 80164b4:	08022b20 	.word	0x08022b20
 80164b8:	08022e54 	.word	0x08022e54
 80164bc:	08022b74 	.word	0x08022b74

080164c0 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 80164c0:	b580      	push	{r7, lr}
 80164c2:	b084      	sub	sp, #16
 80164c4:	af00      	add	r7, sp, #0
 80164c6:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 80164c8:	687b      	ldr	r3, [r7, #4]
 80164ca:	2b00      	cmp	r3, #0
 80164cc:	d107      	bne.n	80164de <udp_remove+0x1e>
 80164ce:	4b19      	ldr	r3, [pc, #100]	; (8016534 <udp_remove+0x74>)
 80164d0:	f240 42a1 	movw	r2, #1185	; 0x4a1
 80164d4:	4918      	ldr	r1, [pc, #96]	; (8016538 <udp_remove+0x78>)
 80164d6:	4819      	ldr	r0, [pc, #100]	; (801653c <udp_remove+0x7c>)
 80164d8:	f004 ff42 	bl	801b360 <iprintf>
 80164dc:	e026      	b.n	801652c <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 80164de:	4b18      	ldr	r3, [pc, #96]	; (8016540 <udp_remove+0x80>)
 80164e0:	681b      	ldr	r3, [r3, #0]
 80164e2:	687a      	ldr	r2, [r7, #4]
 80164e4:	429a      	cmp	r2, r3
 80164e6:	d105      	bne.n	80164f4 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 80164e8:	4b15      	ldr	r3, [pc, #84]	; (8016540 <udp_remove+0x80>)
 80164ea:	681b      	ldr	r3, [r3, #0]
 80164ec:	68db      	ldr	r3, [r3, #12]
 80164ee:	4a14      	ldr	r2, [pc, #80]	; (8016540 <udp_remove+0x80>)
 80164f0:	6013      	str	r3, [r2, #0]
 80164f2:	e017      	b.n	8016524 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 80164f4:	4b12      	ldr	r3, [pc, #72]	; (8016540 <udp_remove+0x80>)
 80164f6:	681b      	ldr	r3, [r3, #0]
 80164f8:	60fb      	str	r3, [r7, #12]
 80164fa:	e010      	b.n	801651e <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 80164fc:	68fb      	ldr	r3, [r7, #12]
 80164fe:	68db      	ldr	r3, [r3, #12]
 8016500:	2b00      	cmp	r3, #0
 8016502:	d009      	beq.n	8016518 <udp_remove+0x58>
 8016504:	68fb      	ldr	r3, [r7, #12]
 8016506:	68db      	ldr	r3, [r3, #12]
 8016508:	687a      	ldr	r2, [r7, #4]
 801650a:	429a      	cmp	r2, r3
 801650c:	d104      	bne.n	8016518 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 801650e:	687b      	ldr	r3, [r7, #4]
 8016510:	68da      	ldr	r2, [r3, #12]
 8016512:	68fb      	ldr	r3, [r7, #12]
 8016514:	60da      	str	r2, [r3, #12]
        break;
 8016516:	e005      	b.n	8016524 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8016518:	68fb      	ldr	r3, [r7, #12]
 801651a:	68db      	ldr	r3, [r3, #12]
 801651c:	60fb      	str	r3, [r7, #12]
 801651e:	68fb      	ldr	r3, [r7, #12]
 8016520:	2b00      	cmp	r3, #0
 8016522:	d1eb      	bne.n	80164fc <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8016524:	6879      	ldr	r1, [r7, #4]
 8016526:	2000      	movs	r0, #0
 8016528:	f7f9 f8a2 	bl	800f670 <memp_free>
}
 801652c:	3710      	adds	r7, #16
 801652e:	46bd      	mov	sp, r7
 8016530:	bd80      	pop	{r7, pc}
 8016532:	bf00      	nop
 8016534:	08022b20 	.word	0x08022b20
 8016538:	08022e6c 	.word	0x08022e6c
 801653c:	08022b74 	.word	0x08022b74
 8016540:	20007648 	.word	0x20007648

08016544 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8016544:	b580      	push	{r7, lr}
 8016546:	b082      	sub	sp, #8
 8016548:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 801654a:	2000      	movs	r0, #0
 801654c:	f7f9 f844 	bl	800f5d8 <memp_malloc>
 8016550:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8016552:	687b      	ldr	r3, [r7, #4]
 8016554:	2b00      	cmp	r3, #0
 8016556:	d007      	beq.n	8016568 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8016558:	2220      	movs	r2, #32
 801655a:	2100      	movs	r1, #0
 801655c:	6878      	ldr	r0, [r7, #4]
 801655e:	f004 f9e3 	bl	801a928 <memset>
    pcb->ttl = UDP_TTL;
 8016562:	687b      	ldr	r3, [r7, #4]
 8016564:	22ff      	movs	r2, #255	; 0xff
 8016566:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8016568:	687b      	ldr	r3, [r7, #4]
}
 801656a:	4618      	mov	r0, r3
 801656c:	3708      	adds	r7, #8
 801656e:	46bd      	mov	sp, r7
 8016570:	bd80      	pop	{r7, pc}
	...

08016574 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8016574:	b480      	push	{r7}
 8016576:	b085      	sub	sp, #20
 8016578:	af00      	add	r7, sp, #0
 801657a:	6078      	str	r0, [r7, #4]
 801657c:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801657e:	687b      	ldr	r3, [r7, #4]
 8016580:	2b00      	cmp	r3, #0
 8016582:	d01e      	beq.n	80165c2 <udp_netif_ip_addr_changed+0x4e>
 8016584:	687b      	ldr	r3, [r7, #4]
 8016586:	681b      	ldr	r3, [r3, #0]
 8016588:	2b00      	cmp	r3, #0
 801658a:	d01a      	beq.n	80165c2 <udp_netif_ip_addr_changed+0x4e>
 801658c:	683b      	ldr	r3, [r7, #0]
 801658e:	2b00      	cmp	r3, #0
 8016590:	d017      	beq.n	80165c2 <udp_netif_ip_addr_changed+0x4e>
 8016592:	683b      	ldr	r3, [r7, #0]
 8016594:	681b      	ldr	r3, [r3, #0]
 8016596:	2b00      	cmp	r3, #0
 8016598:	d013      	beq.n	80165c2 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801659a:	4b0d      	ldr	r3, [pc, #52]	; (80165d0 <udp_netif_ip_addr_changed+0x5c>)
 801659c:	681b      	ldr	r3, [r3, #0]
 801659e:	60fb      	str	r3, [r7, #12]
 80165a0:	e00c      	b.n	80165bc <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 80165a2:	68fb      	ldr	r3, [r7, #12]
 80165a4:	681a      	ldr	r2, [r3, #0]
 80165a6:	687b      	ldr	r3, [r7, #4]
 80165a8:	681b      	ldr	r3, [r3, #0]
 80165aa:	429a      	cmp	r2, r3
 80165ac:	d103      	bne.n	80165b6 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 80165ae:	683b      	ldr	r3, [r7, #0]
 80165b0:	681a      	ldr	r2, [r3, #0]
 80165b2:	68fb      	ldr	r3, [r7, #12]
 80165b4:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80165b6:	68fb      	ldr	r3, [r7, #12]
 80165b8:	68db      	ldr	r3, [r3, #12]
 80165ba:	60fb      	str	r3, [r7, #12]
 80165bc:	68fb      	ldr	r3, [r7, #12]
 80165be:	2b00      	cmp	r3, #0
 80165c0:	d1ef      	bne.n	80165a2 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 80165c2:	bf00      	nop
 80165c4:	3714      	adds	r7, #20
 80165c6:	46bd      	mov	sp, r7
 80165c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165cc:	4770      	bx	lr
 80165ce:	bf00      	nop
 80165d0:	20007648 	.word	0x20007648

080165d4 <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 80165d4:	b580      	push	{r7, lr}
 80165d6:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 80165d8:	4b20      	ldr	r3, [pc, #128]	; (801665c <dhcp_inc_pcb_refcount+0x88>)
 80165da:	781b      	ldrb	r3, [r3, #0]
 80165dc:	2b00      	cmp	r3, #0
 80165de:	d133      	bne.n	8016648 <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 80165e0:	4b1f      	ldr	r3, [pc, #124]	; (8016660 <dhcp_inc_pcb_refcount+0x8c>)
 80165e2:	681b      	ldr	r3, [r3, #0]
 80165e4:	2b00      	cmp	r3, #0
 80165e6:	d005      	beq.n	80165f4 <dhcp_inc_pcb_refcount+0x20>
 80165e8:	4b1e      	ldr	r3, [pc, #120]	; (8016664 <dhcp_inc_pcb_refcount+0x90>)
 80165ea:	22e5      	movs	r2, #229	; 0xe5
 80165ec:	491e      	ldr	r1, [pc, #120]	; (8016668 <dhcp_inc_pcb_refcount+0x94>)
 80165ee:	481f      	ldr	r0, [pc, #124]	; (801666c <dhcp_inc_pcb_refcount+0x98>)
 80165f0:	f004 feb6 	bl	801b360 <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 80165f4:	f7ff ffa6 	bl	8016544 <udp_new>
 80165f8:	4603      	mov	r3, r0
 80165fa:	4a19      	ldr	r2, [pc, #100]	; (8016660 <dhcp_inc_pcb_refcount+0x8c>)
 80165fc:	6013      	str	r3, [r2, #0]

    if (dhcp_pcb == NULL) {
 80165fe:	4b18      	ldr	r3, [pc, #96]	; (8016660 <dhcp_inc_pcb_refcount+0x8c>)
 8016600:	681b      	ldr	r3, [r3, #0]
 8016602:	2b00      	cmp	r3, #0
 8016604:	d102      	bne.n	801660c <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 8016606:	f04f 33ff 	mov.w	r3, #4294967295
 801660a:	e024      	b.n	8016656 <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 801660c:	4b14      	ldr	r3, [pc, #80]	; (8016660 <dhcp_inc_pcb_refcount+0x8c>)
 801660e:	681b      	ldr	r3, [r3, #0]
 8016610:	7a5a      	ldrb	r2, [r3, #9]
 8016612:	4b13      	ldr	r3, [pc, #76]	; (8016660 <dhcp_inc_pcb_refcount+0x8c>)
 8016614:	681b      	ldr	r3, [r3, #0]
 8016616:	f042 0220 	orr.w	r2, r2, #32
 801661a:	b2d2      	uxtb	r2, r2
 801661c:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 801661e:	4b10      	ldr	r3, [pc, #64]	; (8016660 <dhcp_inc_pcb_refcount+0x8c>)
 8016620:	681b      	ldr	r3, [r3, #0]
 8016622:	2244      	movs	r2, #68	; 0x44
 8016624:	4912      	ldr	r1, [pc, #72]	; (8016670 <dhcp_inc_pcb_refcount+0x9c>)
 8016626:	4618      	mov	r0, r3
 8016628:	f7ff fe34 	bl	8016294 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 801662c:	4b0c      	ldr	r3, [pc, #48]	; (8016660 <dhcp_inc_pcb_refcount+0x8c>)
 801662e:	681b      	ldr	r3, [r3, #0]
 8016630:	2243      	movs	r2, #67	; 0x43
 8016632:	490f      	ldr	r1, [pc, #60]	; (8016670 <dhcp_inc_pcb_refcount+0x9c>)
 8016634:	4618      	mov	r0, r3
 8016636:	f7ff feb5 	bl	80163a4 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 801663a:	4b09      	ldr	r3, [pc, #36]	; (8016660 <dhcp_inc_pcb_refcount+0x8c>)
 801663c:	681b      	ldr	r3, [r3, #0]
 801663e:	2200      	movs	r2, #0
 8016640:	490c      	ldr	r1, [pc, #48]	; (8016674 <dhcp_inc_pcb_refcount+0xa0>)
 8016642:	4618      	mov	r0, r3
 8016644:	f7ff ff1c 	bl	8016480 <udp_recv>
  }

  dhcp_pcb_refcount++;
 8016648:	4b04      	ldr	r3, [pc, #16]	; (801665c <dhcp_inc_pcb_refcount+0x88>)
 801664a:	781b      	ldrb	r3, [r3, #0]
 801664c:	3301      	adds	r3, #1
 801664e:	b2da      	uxtb	r2, r3
 8016650:	4b02      	ldr	r3, [pc, #8]	; (801665c <dhcp_inc_pcb_refcount+0x88>)
 8016652:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 8016654:	2300      	movs	r3, #0
}
 8016656:	4618      	mov	r0, r3
 8016658:	bd80      	pop	{r7, pc}
 801665a:	bf00      	nop
 801665c:	20000524 	.word	0x20000524
 8016660:	20000520 	.word	0x20000520
 8016664:	08022e84 	.word	0x08022e84
 8016668:	08022ebc 	.word	0x08022ebc
 801666c:	08022ee4 	.word	0x08022ee4
 8016670:	08023f40 	.word	0x08023f40
 8016674:	08017e91 	.word	0x08017e91

08016678 <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 8016678:	b580      	push	{r7, lr}
 801667a:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 801667c:	4b0e      	ldr	r3, [pc, #56]	; (80166b8 <dhcp_dec_pcb_refcount+0x40>)
 801667e:	781b      	ldrb	r3, [r3, #0]
 8016680:	2b00      	cmp	r3, #0
 8016682:	d105      	bne.n	8016690 <dhcp_dec_pcb_refcount+0x18>
 8016684:	4b0d      	ldr	r3, [pc, #52]	; (80166bc <dhcp_dec_pcb_refcount+0x44>)
 8016686:	22ff      	movs	r2, #255	; 0xff
 8016688:	490d      	ldr	r1, [pc, #52]	; (80166c0 <dhcp_dec_pcb_refcount+0x48>)
 801668a:	480e      	ldr	r0, [pc, #56]	; (80166c4 <dhcp_dec_pcb_refcount+0x4c>)
 801668c:	f004 fe68 	bl	801b360 <iprintf>
  dhcp_pcb_refcount--;
 8016690:	4b09      	ldr	r3, [pc, #36]	; (80166b8 <dhcp_dec_pcb_refcount+0x40>)
 8016692:	781b      	ldrb	r3, [r3, #0]
 8016694:	3b01      	subs	r3, #1
 8016696:	b2da      	uxtb	r2, r3
 8016698:	4b07      	ldr	r3, [pc, #28]	; (80166b8 <dhcp_dec_pcb_refcount+0x40>)
 801669a:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 801669c:	4b06      	ldr	r3, [pc, #24]	; (80166b8 <dhcp_dec_pcb_refcount+0x40>)
 801669e:	781b      	ldrb	r3, [r3, #0]
 80166a0:	2b00      	cmp	r3, #0
 80166a2:	d107      	bne.n	80166b4 <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 80166a4:	4b08      	ldr	r3, [pc, #32]	; (80166c8 <dhcp_dec_pcb_refcount+0x50>)
 80166a6:	681b      	ldr	r3, [r3, #0]
 80166a8:	4618      	mov	r0, r3
 80166aa:	f7ff ff09 	bl	80164c0 <udp_remove>
    dhcp_pcb = NULL;
 80166ae:	4b06      	ldr	r3, [pc, #24]	; (80166c8 <dhcp_dec_pcb_refcount+0x50>)
 80166b0:	2200      	movs	r2, #0
 80166b2:	601a      	str	r2, [r3, #0]
  }
}
 80166b4:	bf00      	nop
 80166b6:	bd80      	pop	{r7, pc}
 80166b8:	20000524 	.word	0x20000524
 80166bc:	08022e84 	.word	0x08022e84
 80166c0:	08022f0c 	.word	0x08022f0c
 80166c4:	08022ee4 	.word	0x08022ee4
 80166c8:	20000520 	.word	0x20000520

080166cc <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 80166cc:	b580      	push	{r7, lr}
 80166ce:	b084      	sub	sp, #16
 80166d0:	af00      	add	r7, sp, #0
 80166d2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80166d4:	687b      	ldr	r3, [r7, #4]
 80166d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80166d8:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 80166da:	210c      	movs	r1, #12
 80166dc:	68f8      	ldr	r0, [r7, #12]
 80166de:	f001 f819 	bl	8017714 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 80166e2:	4b06      	ldr	r3, [pc, #24]	; (80166fc <dhcp_handle_nak+0x30>)
 80166e4:	4a05      	ldr	r2, [pc, #20]	; (80166fc <dhcp_handle_nak+0x30>)
 80166e6:	4905      	ldr	r1, [pc, #20]	; (80166fc <dhcp_handle_nak+0x30>)
 80166e8:	6878      	ldr	r0, [r7, #4]
 80166ea:	f7f9 f963 	bl	800f9b4 <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 80166ee:	6878      	ldr	r0, [r7, #4]
 80166f0:	f000 fc0c 	bl	8016f0c <dhcp_discover>
}
 80166f4:	bf00      	nop
 80166f6:	3710      	adds	r7, #16
 80166f8:	46bd      	mov	sp, r7
 80166fa:	bd80      	pop	{r7, pc}
 80166fc:	08023f40 	.word	0x08023f40

08016700 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 8016700:	b580      	push	{r7, lr}
 8016702:	b084      	sub	sp, #16
 8016704:	af00      	add	r7, sp, #0
 8016706:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8016708:	687b      	ldr	r3, [r7, #4]
 801670a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801670c:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 801670e:	2108      	movs	r1, #8
 8016710:	68f8      	ldr	r0, [r7, #12]
 8016712:	f000 ffff 	bl	8017714 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 8016716:	68fb      	ldr	r3, [r7, #12]
 8016718:	331c      	adds	r3, #28
 801671a:	2200      	movs	r2, #0
 801671c:	4619      	mov	r1, r3
 801671e:	6878      	ldr	r0, [r7, #4]
 8016720:	f002 fb00 	bl	8018d24 <etharp_query>
 8016724:	4603      	mov	r3, r0
 8016726:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 8016728:	68fb      	ldr	r3, [r7, #12]
 801672a:	799b      	ldrb	r3, [r3, #6]
 801672c:	2bff      	cmp	r3, #255	; 0xff
 801672e:	d005      	beq.n	801673c <dhcp_check+0x3c>
    dhcp->tries++;
 8016730:	68fb      	ldr	r3, [r7, #12]
 8016732:	799b      	ldrb	r3, [r3, #6]
 8016734:	3301      	adds	r3, #1
 8016736:	b2da      	uxtb	r2, r3
 8016738:	68fb      	ldr	r3, [r7, #12]
 801673a:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 801673c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8016740:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8016742:	893b      	ldrh	r3, [r7, #8]
 8016744:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8016748:	4a06      	ldr	r2, [pc, #24]	; (8016764 <dhcp_check+0x64>)
 801674a:	fb82 1203 	smull	r1, r2, r2, r3
 801674e:	1152      	asrs	r2, r2, #5
 8016750:	17db      	asrs	r3, r3, #31
 8016752:	1ad3      	subs	r3, r2, r3
 8016754:	b29a      	uxth	r2, r3
 8016756:	68fb      	ldr	r3, [r7, #12]
 8016758:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 801675a:	bf00      	nop
 801675c:	3710      	adds	r7, #16
 801675e:	46bd      	mov	sp, r7
 8016760:	bd80      	pop	{r7, pc}
 8016762:	bf00      	nop
 8016764:	10624dd3 	.word	0x10624dd3

08016768 <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 8016768:	b580      	push	{r7, lr}
 801676a:	b084      	sub	sp, #16
 801676c:	af00      	add	r7, sp, #0
 801676e:	6078      	str	r0, [r7, #4]
 8016770:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8016772:	687b      	ldr	r3, [r7, #4]
 8016774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016776:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 8016778:	4b0c      	ldr	r3, [pc, #48]	; (80167ac <dhcp_handle_offer+0x44>)
 801677a:	789b      	ldrb	r3, [r3, #2]
 801677c:	2b00      	cmp	r3, #0
 801677e:	d011      	beq.n	80167a4 <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 8016780:	68fb      	ldr	r3, [r7, #12]
 8016782:	2200      	movs	r2, #0
 8016784:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 8016786:	4b0a      	ldr	r3, [pc, #40]	; (80167b0 <dhcp_handle_offer+0x48>)
 8016788:	689b      	ldr	r3, [r3, #8]
 801678a:	4618      	mov	r0, r3
 801678c:	f7f8 fae3 	bl	800ed56 <lwip_htonl>
 8016790:	4602      	mov	r2, r0
 8016792:	68fb      	ldr	r3, [r7, #12]
 8016794:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8016796:	683b      	ldr	r3, [r7, #0]
 8016798:	691a      	ldr	r2, [r3, #16]
 801679a:	68fb      	ldr	r3, [r7, #12]
 801679c:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 801679e:	6878      	ldr	r0, [r7, #4]
 80167a0:	f000 f808 	bl	80167b4 <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 80167a4:	bf00      	nop
 80167a6:	3710      	adds	r7, #16
 80167a8:	46bd      	mov	sp, r7
 80167aa:	bd80      	pop	{r7, pc}
 80167ac:	2000764c 	.word	0x2000764c
 80167b0:	20007654 	.word	0x20007654

080167b4 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 80167b4:	b5b0      	push	{r4, r5, r7, lr}
 80167b6:	b08a      	sub	sp, #40	; 0x28
 80167b8:	af02      	add	r7, sp, #8
 80167ba:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 80167bc:	687b      	ldr	r3, [r7, #4]
 80167be:	2b00      	cmp	r3, #0
 80167c0:	d109      	bne.n	80167d6 <dhcp_select+0x22>
 80167c2:	4b71      	ldr	r3, [pc, #452]	; (8016988 <dhcp_select+0x1d4>)
 80167c4:	f240 1277 	movw	r2, #375	; 0x177
 80167c8:	4970      	ldr	r1, [pc, #448]	; (801698c <dhcp_select+0x1d8>)
 80167ca:	4871      	ldr	r0, [pc, #452]	; (8016990 <dhcp_select+0x1dc>)
 80167cc:	f004 fdc8 	bl	801b360 <iprintf>
 80167d0:	f06f 030f 	mvn.w	r3, #15
 80167d4:	e0d3      	b.n	801697e <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 80167d6:	687b      	ldr	r3, [r7, #4]
 80167d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80167da:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 80167dc:	69bb      	ldr	r3, [r7, #24]
 80167de:	2b00      	cmp	r3, #0
 80167e0:	d109      	bne.n	80167f6 <dhcp_select+0x42>
 80167e2:	4b69      	ldr	r3, [pc, #420]	; (8016988 <dhcp_select+0x1d4>)
 80167e4:	f240 1279 	movw	r2, #377	; 0x179
 80167e8:	496a      	ldr	r1, [pc, #424]	; (8016994 <dhcp_select+0x1e0>)
 80167ea:	4869      	ldr	r0, [pc, #420]	; (8016990 <dhcp_select+0x1dc>)
 80167ec:	f004 fdb8 	bl	801b360 <iprintf>
 80167f0:	f06f 0305 	mvn.w	r3, #5
 80167f4:	e0c3      	b.n	801697e <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 80167f6:	2101      	movs	r1, #1
 80167f8:	69b8      	ldr	r0, [r7, #24]
 80167fa:	f000 ff8b 	bl	8017714 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 80167fe:	f107 030c 	add.w	r3, r7, #12
 8016802:	2203      	movs	r2, #3
 8016804:	69b9      	ldr	r1, [r7, #24]
 8016806:	6878      	ldr	r0, [r7, #4]
 8016808:	f001 fc10 	bl	801802c <dhcp_create_msg>
 801680c:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801680e:	697b      	ldr	r3, [r7, #20]
 8016810:	2b00      	cmp	r3, #0
 8016812:	f000 8085 	beq.w	8016920 <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8016816:	697b      	ldr	r3, [r7, #20]
 8016818:	685b      	ldr	r3, [r3, #4]
 801681a:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801681c:	89b8      	ldrh	r0, [r7, #12]
 801681e:	693b      	ldr	r3, [r7, #16]
 8016820:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8016824:	2302      	movs	r3, #2
 8016826:	2239      	movs	r2, #57	; 0x39
 8016828:	f000 ff8e 	bl	8017748 <dhcp_option>
 801682c:	4603      	mov	r3, r0
 801682e:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8016830:	89b8      	ldrh	r0, [r7, #12]
 8016832:	693b      	ldr	r3, [r7, #16]
 8016834:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8016838:	687b      	ldr	r3, [r7, #4]
 801683a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801683c:	461a      	mov	r2, r3
 801683e:	f000 ffdd 	bl	80177fc <dhcp_option_short>
 8016842:	4603      	mov	r3, r0
 8016844:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8016846:	89b8      	ldrh	r0, [r7, #12]
 8016848:	693b      	ldr	r3, [r7, #16]
 801684a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801684e:	2304      	movs	r3, #4
 8016850:	2232      	movs	r2, #50	; 0x32
 8016852:	f000 ff79 	bl	8017748 <dhcp_option>
 8016856:	4603      	mov	r3, r0
 8016858:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801685a:	89bc      	ldrh	r4, [r7, #12]
 801685c:	693b      	ldr	r3, [r7, #16]
 801685e:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8016862:	69bb      	ldr	r3, [r7, #24]
 8016864:	69db      	ldr	r3, [r3, #28]
 8016866:	4618      	mov	r0, r3
 8016868:	f7f8 fa75 	bl	800ed56 <lwip_htonl>
 801686c:	4603      	mov	r3, r0
 801686e:	461a      	mov	r2, r3
 8016870:	4629      	mov	r1, r5
 8016872:	4620      	mov	r0, r4
 8016874:	f000 fff4 	bl	8017860 <dhcp_option_long>
 8016878:	4603      	mov	r3, r0
 801687a:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 801687c:	89b8      	ldrh	r0, [r7, #12]
 801687e:	693b      	ldr	r3, [r7, #16]
 8016880:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8016884:	2304      	movs	r3, #4
 8016886:	2236      	movs	r2, #54	; 0x36
 8016888:	f000 ff5e 	bl	8017748 <dhcp_option>
 801688c:	4603      	mov	r3, r0
 801688e:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 8016890:	89bc      	ldrh	r4, [r7, #12]
 8016892:	693b      	ldr	r3, [r7, #16]
 8016894:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8016898:	69bb      	ldr	r3, [r7, #24]
 801689a:	699b      	ldr	r3, [r3, #24]
 801689c:	4618      	mov	r0, r3
 801689e:	f7f8 fa5a 	bl	800ed56 <lwip_htonl>
 80168a2:	4603      	mov	r3, r0
 80168a4:	461a      	mov	r2, r3
 80168a6:	4629      	mov	r1, r5
 80168a8:	4620      	mov	r0, r4
 80168aa:	f000 ffd9 	bl	8017860 <dhcp_option_long>
 80168ae:	4603      	mov	r3, r0
 80168b0:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80168b2:	89b8      	ldrh	r0, [r7, #12]
 80168b4:	693b      	ldr	r3, [r7, #16]
 80168b6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80168ba:	2303      	movs	r3, #3
 80168bc:	2237      	movs	r2, #55	; 0x37
 80168be:	f000 ff43 	bl	8017748 <dhcp_option>
 80168c2:	4603      	mov	r3, r0
 80168c4:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80168c6:	2300      	movs	r3, #0
 80168c8:	77bb      	strb	r3, [r7, #30]
 80168ca:	e00e      	b.n	80168ea <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80168cc:	89b8      	ldrh	r0, [r7, #12]
 80168ce:	693b      	ldr	r3, [r7, #16]
 80168d0:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80168d4:	7fbb      	ldrb	r3, [r7, #30]
 80168d6:	4a30      	ldr	r2, [pc, #192]	; (8016998 <dhcp_select+0x1e4>)
 80168d8:	5cd3      	ldrb	r3, [r2, r3]
 80168da:	461a      	mov	r2, r3
 80168dc:	f000 ff68 	bl	80177b0 <dhcp_option_byte>
 80168e0:	4603      	mov	r3, r0
 80168e2:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80168e4:	7fbb      	ldrb	r3, [r7, #30]
 80168e6:	3301      	adds	r3, #1
 80168e8:	77bb      	strb	r3, [r7, #30]
 80168ea:	7fbb      	ldrb	r3, [r7, #30]
 80168ec:	2b02      	cmp	r3, #2
 80168ee:	d9ed      	bls.n	80168cc <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80168f0:	89b8      	ldrh	r0, [r7, #12]
 80168f2:	693b      	ldr	r3, [r7, #16]
 80168f4:	33f0      	adds	r3, #240	; 0xf0
 80168f6:	697a      	ldr	r2, [r7, #20]
 80168f8:	4619      	mov	r1, r3
 80168fa:	f001 fc6d 	bl	80181d8 <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 80168fe:	4b27      	ldr	r3, [pc, #156]	; (801699c <dhcp_select+0x1e8>)
 8016900:	6818      	ldr	r0, [r3, #0]
 8016902:	4b27      	ldr	r3, [pc, #156]	; (80169a0 <dhcp_select+0x1ec>)
 8016904:	9301      	str	r3, [sp, #4]
 8016906:	687b      	ldr	r3, [r7, #4]
 8016908:	9300      	str	r3, [sp, #0]
 801690a:	2343      	movs	r3, #67	; 0x43
 801690c:	4a25      	ldr	r2, [pc, #148]	; (80169a4 <dhcp_select+0x1f0>)
 801690e:	6979      	ldr	r1, [r7, #20]
 8016910:	f7ff fbda 	bl	80160c8 <udp_sendto_if_src>
 8016914:	4603      	mov	r3, r0
 8016916:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8016918:	6978      	ldr	r0, [r7, #20]
 801691a:	f7f9 fca3 	bl	8010264 <pbuf_free>
 801691e:	e001      	b.n	8016924 <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8016920:	23ff      	movs	r3, #255	; 0xff
 8016922:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8016924:	69bb      	ldr	r3, [r7, #24]
 8016926:	799b      	ldrb	r3, [r3, #6]
 8016928:	2bff      	cmp	r3, #255	; 0xff
 801692a:	d005      	beq.n	8016938 <dhcp_select+0x184>
    dhcp->tries++;
 801692c:	69bb      	ldr	r3, [r7, #24]
 801692e:	799b      	ldrb	r3, [r3, #6]
 8016930:	3301      	adds	r3, #1
 8016932:	b2da      	uxtb	r2, r3
 8016934:	69bb      	ldr	r3, [r7, #24]
 8016936:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8016938:	69bb      	ldr	r3, [r7, #24]
 801693a:	799b      	ldrb	r3, [r3, #6]
 801693c:	2b05      	cmp	r3, #5
 801693e:	d80d      	bhi.n	801695c <dhcp_select+0x1a8>
 8016940:	69bb      	ldr	r3, [r7, #24]
 8016942:	799b      	ldrb	r3, [r3, #6]
 8016944:	461a      	mov	r2, r3
 8016946:	2301      	movs	r3, #1
 8016948:	4093      	lsls	r3, r2
 801694a:	b29b      	uxth	r3, r3
 801694c:	461a      	mov	r2, r3
 801694e:	0152      	lsls	r2, r2, #5
 8016950:	1ad2      	subs	r2, r2, r3
 8016952:	0092      	lsls	r2, r2, #2
 8016954:	4413      	add	r3, r2
 8016956:	00db      	lsls	r3, r3, #3
 8016958:	b29b      	uxth	r3, r3
 801695a:	e001      	b.n	8016960 <dhcp_select+0x1ac>
 801695c:	f64e 2360 	movw	r3, #60000	; 0xea60
 8016960:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8016962:	89fb      	ldrh	r3, [r7, #14]
 8016964:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8016968:	4a0f      	ldr	r2, [pc, #60]	; (80169a8 <dhcp_select+0x1f4>)
 801696a:	fb82 1203 	smull	r1, r2, r2, r3
 801696e:	1152      	asrs	r2, r2, #5
 8016970:	17db      	asrs	r3, r3, #31
 8016972:	1ad3      	subs	r3, r2, r3
 8016974:	b29a      	uxth	r2, r3
 8016976:	69bb      	ldr	r3, [r7, #24]
 8016978:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801697a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801697e:	4618      	mov	r0, r3
 8016980:	3720      	adds	r7, #32
 8016982:	46bd      	mov	sp, r7
 8016984:	bdb0      	pop	{r4, r5, r7, pc}
 8016986:	bf00      	nop
 8016988:	08022e84 	.word	0x08022e84
 801698c:	08022f30 	.word	0x08022f30
 8016990:	08022ee4 	.word	0x08022ee4
 8016994:	08022f4c 	.word	0x08022f4c
 8016998:	20000080 	.word	0x20000080
 801699c:	20000520 	.word	0x20000520
 80169a0:	08023f40 	.word	0x08023f40
 80169a4:	08023f44 	.word	0x08023f44
 80169a8:	10624dd3 	.word	0x10624dd3

080169ac <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 80169ac:	b580      	push	{r7, lr}
 80169ae:	b082      	sub	sp, #8
 80169b0:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 80169b2:	4b27      	ldr	r3, [pc, #156]	; (8016a50 <dhcp_coarse_tmr+0xa4>)
 80169b4:	681b      	ldr	r3, [r3, #0]
 80169b6:	607b      	str	r3, [r7, #4]
 80169b8:	e042      	b.n	8016a40 <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 80169ba:	687b      	ldr	r3, [r7, #4]
 80169bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80169be:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 80169c0:	683b      	ldr	r3, [r7, #0]
 80169c2:	2b00      	cmp	r3, #0
 80169c4:	d039      	beq.n	8016a3a <dhcp_coarse_tmr+0x8e>
 80169c6:	683b      	ldr	r3, [r7, #0]
 80169c8:	795b      	ldrb	r3, [r3, #5]
 80169ca:	2b00      	cmp	r3, #0
 80169cc:	d035      	beq.n	8016a3a <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 80169ce:	683b      	ldr	r3, [r7, #0]
 80169d0:	8a9b      	ldrh	r3, [r3, #20]
 80169d2:	2b00      	cmp	r3, #0
 80169d4:	d012      	beq.n	80169fc <dhcp_coarse_tmr+0x50>
 80169d6:	683b      	ldr	r3, [r7, #0]
 80169d8:	8a5b      	ldrh	r3, [r3, #18]
 80169da:	3301      	adds	r3, #1
 80169dc:	b29a      	uxth	r2, r3
 80169de:	683b      	ldr	r3, [r7, #0]
 80169e0:	825a      	strh	r2, [r3, #18]
 80169e2:	683b      	ldr	r3, [r7, #0]
 80169e4:	8a5a      	ldrh	r2, [r3, #18]
 80169e6:	683b      	ldr	r3, [r7, #0]
 80169e8:	8a9b      	ldrh	r3, [r3, #20]
 80169ea:	429a      	cmp	r2, r3
 80169ec:	d106      	bne.n	80169fc <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 80169ee:	6878      	ldr	r0, [r7, #4]
 80169f0:	f000 fdf6 	bl	80175e0 <dhcp_release_and_stop>
        dhcp_start(netif);
 80169f4:	6878      	ldr	r0, [r7, #4]
 80169f6:	f000 f969 	bl	8016ccc <dhcp_start>
 80169fa:	e01e      	b.n	8016a3a <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 80169fc:	683b      	ldr	r3, [r7, #0]
 80169fe:	8a1b      	ldrh	r3, [r3, #16]
 8016a00:	2b00      	cmp	r3, #0
 8016a02:	d00b      	beq.n	8016a1c <dhcp_coarse_tmr+0x70>
 8016a04:	683b      	ldr	r3, [r7, #0]
 8016a06:	8a1b      	ldrh	r3, [r3, #16]
 8016a08:	1e5a      	subs	r2, r3, #1
 8016a0a:	b291      	uxth	r1, r2
 8016a0c:	683a      	ldr	r2, [r7, #0]
 8016a0e:	8211      	strh	r1, [r2, #16]
 8016a10:	2b01      	cmp	r3, #1
 8016a12:	d103      	bne.n	8016a1c <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 8016a14:	6878      	ldr	r0, [r7, #4]
 8016a16:	f000 f8c6 	bl	8016ba6 <dhcp_t2_timeout>
 8016a1a:	e00e      	b.n	8016a3a <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 8016a1c:	683b      	ldr	r3, [r7, #0]
 8016a1e:	89db      	ldrh	r3, [r3, #14]
 8016a20:	2b00      	cmp	r3, #0
 8016a22:	d00a      	beq.n	8016a3a <dhcp_coarse_tmr+0x8e>
 8016a24:	683b      	ldr	r3, [r7, #0]
 8016a26:	89db      	ldrh	r3, [r3, #14]
 8016a28:	1e5a      	subs	r2, r3, #1
 8016a2a:	b291      	uxth	r1, r2
 8016a2c:	683a      	ldr	r2, [r7, #0]
 8016a2e:	81d1      	strh	r1, [r2, #14]
 8016a30:	2b01      	cmp	r3, #1
 8016a32:	d102      	bne.n	8016a3a <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 8016a34:	6878      	ldr	r0, [r7, #4]
 8016a36:	f000 f888 	bl	8016b4a <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 8016a3a:	687b      	ldr	r3, [r7, #4]
 8016a3c:	681b      	ldr	r3, [r3, #0]
 8016a3e:	607b      	str	r3, [r7, #4]
 8016a40:	687b      	ldr	r3, [r7, #4]
 8016a42:	2b00      	cmp	r3, #0
 8016a44:	d1b9      	bne.n	80169ba <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 8016a46:	bf00      	nop
 8016a48:	bf00      	nop
 8016a4a:	3708      	adds	r7, #8
 8016a4c:	46bd      	mov	sp, r7
 8016a4e:	bd80      	pop	{r7, pc}
 8016a50:	20007620 	.word	0x20007620

08016a54 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 8016a54:	b580      	push	{r7, lr}
 8016a56:	b082      	sub	sp, #8
 8016a58:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 8016a5a:	4b16      	ldr	r3, [pc, #88]	; (8016ab4 <dhcp_fine_tmr+0x60>)
 8016a5c:	681b      	ldr	r3, [r3, #0]
 8016a5e:	607b      	str	r3, [r7, #4]
 8016a60:	e020      	b.n	8016aa4 <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8016a62:	687b      	ldr	r3, [r7, #4]
 8016a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016a66:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 8016a68:	683b      	ldr	r3, [r7, #0]
 8016a6a:	2b00      	cmp	r3, #0
 8016a6c:	d017      	beq.n	8016a9e <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 8016a6e:	683b      	ldr	r3, [r7, #0]
 8016a70:	891b      	ldrh	r3, [r3, #8]
 8016a72:	2b01      	cmp	r3, #1
 8016a74:	d906      	bls.n	8016a84 <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 8016a76:	683b      	ldr	r3, [r7, #0]
 8016a78:	891b      	ldrh	r3, [r3, #8]
 8016a7a:	3b01      	subs	r3, #1
 8016a7c:	b29a      	uxth	r2, r3
 8016a7e:	683b      	ldr	r3, [r7, #0]
 8016a80:	811a      	strh	r2, [r3, #8]
 8016a82:	e00c      	b.n	8016a9e <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 8016a84:	683b      	ldr	r3, [r7, #0]
 8016a86:	891b      	ldrh	r3, [r3, #8]
 8016a88:	2b01      	cmp	r3, #1
 8016a8a:	d108      	bne.n	8016a9e <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 8016a8c:	683b      	ldr	r3, [r7, #0]
 8016a8e:	891b      	ldrh	r3, [r3, #8]
 8016a90:	3b01      	subs	r3, #1
 8016a92:	b29a      	uxth	r2, r3
 8016a94:	683b      	ldr	r3, [r7, #0]
 8016a96:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 8016a98:	6878      	ldr	r0, [r7, #4]
 8016a9a:	f000 f80d 	bl	8016ab8 <dhcp_timeout>
  NETIF_FOREACH(netif) {
 8016a9e:	687b      	ldr	r3, [r7, #4]
 8016aa0:	681b      	ldr	r3, [r3, #0]
 8016aa2:	607b      	str	r3, [r7, #4]
 8016aa4:	687b      	ldr	r3, [r7, #4]
 8016aa6:	2b00      	cmp	r3, #0
 8016aa8:	d1db      	bne.n	8016a62 <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 8016aaa:	bf00      	nop
 8016aac:	bf00      	nop
 8016aae:	3708      	adds	r7, #8
 8016ab0:	46bd      	mov	sp, r7
 8016ab2:	bd80      	pop	{r7, pc}
 8016ab4:	20007620 	.word	0x20007620

08016ab8 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 8016ab8:	b580      	push	{r7, lr}
 8016aba:	b084      	sub	sp, #16
 8016abc:	af00      	add	r7, sp, #0
 8016abe:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8016ac0:	687b      	ldr	r3, [r7, #4]
 8016ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016ac4:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 8016ac6:	68fb      	ldr	r3, [r7, #12]
 8016ac8:	795b      	ldrb	r3, [r3, #5]
 8016aca:	2b0c      	cmp	r3, #12
 8016acc:	d003      	beq.n	8016ad6 <dhcp_timeout+0x1e>
 8016ace:	68fb      	ldr	r3, [r7, #12]
 8016ad0:	795b      	ldrb	r3, [r3, #5]
 8016ad2:	2b06      	cmp	r3, #6
 8016ad4:	d103      	bne.n	8016ade <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 8016ad6:	6878      	ldr	r0, [r7, #4]
 8016ad8:	f000 fa18 	bl	8016f0c <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 8016adc:	e031      	b.n	8016b42 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 8016ade:	68fb      	ldr	r3, [r7, #12]
 8016ae0:	795b      	ldrb	r3, [r3, #5]
 8016ae2:	2b01      	cmp	r3, #1
 8016ae4:	d10e      	bne.n	8016b04 <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 8016ae6:	68fb      	ldr	r3, [r7, #12]
 8016ae8:	799b      	ldrb	r3, [r3, #6]
 8016aea:	2b05      	cmp	r3, #5
 8016aec:	d803      	bhi.n	8016af6 <dhcp_timeout+0x3e>
      dhcp_select(netif);
 8016aee:	6878      	ldr	r0, [r7, #4]
 8016af0:	f7ff fe60 	bl	80167b4 <dhcp_select>
}
 8016af4:	e025      	b.n	8016b42 <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 8016af6:	6878      	ldr	r0, [r7, #4]
 8016af8:	f000 fd72 	bl	80175e0 <dhcp_release_and_stop>
      dhcp_start(netif);
 8016afc:	6878      	ldr	r0, [r7, #4]
 8016afe:	f000 f8e5 	bl	8016ccc <dhcp_start>
}
 8016b02:	e01e      	b.n	8016b42 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 8016b04:	68fb      	ldr	r3, [r7, #12]
 8016b06:	795b      	ldrb	r3, [r3, #5]
 8016b08:	2b08      	cmp	r3, #8
 8016b0a:	d10b      	bne.n	8016b24 <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 8016b0c:	68fb      	ldr	r3, [r7, #12]
 8016b0e:	799b      	ldrb	r3, [r3, #6]
 8016b10:	2b01      	cmp	r3, #1
 8016b12:	d803      	bhi.n	8016b1c <dhcp_timeout+0x64>
      dhcp_check(netif);
 8016b14:	6878      	ldr	r0, [r7, #4]
 8016b16:	f7ff fdf3 	bl	8016700 <dhcp_check>
}
 8016b1a:	e012      	b.n	8016b42 <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 8016b1c:	6878      	ldr	r0, [r7, #4]
 8016b1e:	f000 fa97 	bl	8017050 <dhcp_bind>
}
 8016b22:	e00e      	b.n	8016b42 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 8016b24:	68fb      	ldr	r3, [r7, #12]
 8016b26:	795b      	ldrb	r3, [r3, #5]
 8016b28:	2b03      	cmp	r3, #3
 8016b2a:	d10a      	bne.n	8016b42 <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 8016b2c:	68fb      	ldr	r3, [r7, #12]
 8016b2e:	799b      	ldrb	r3, [r3, #6]
 8016b30:	2b01      	cmp	r3, #1
 8016b32:	d803      	bhi.n	8016b3c <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 8016b34:	6878      	ldr	r0, [r7, #4]
 8016b36:	f000 fc9d 	bl	8017474 <dhcp_reboot>
}
 8016b3a:	e002      	b.n	8016b42 <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 8016b3c:	6878      	ldr	r0, [r7, #4]
 8016b3e:	f000 f9e5 	bl	8016f0c <dhcp_discover>
}
 8016b42:	bf00      	nop
 8016b44:	3710      	adds	r7, #16
 8016b46:	46bd      	mov	sp, r7
 8016b48:	bd80      	pop	{r7, pc}

08016b4a <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 8016b4a:	b580      	push	{r7, lr}
 8016b4c:	b084      	sub	sp, #16
 8016b4e:	af00      	add	r7, sp, #0
 8016b50:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8016b52:	687b      	ldr	r3, [r7, #4]
 8016b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016b56:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8016b58:	68fb      	ldr	r3, [r7, #12]
 8016b5a:	795b      	ldrb	r3, [r3, #5]
 8016b5c:	2b01      	cmp	r3, #1
 8016b5e:	d007      	beq.n	8016b70 <dhcp_t1_timeout+0x26>
 8016b60:	68fb      	ldr	r3, [r7, #12]
 8016b62:	795b      	ldrb	r3, [r3, #5]
 8016b64:	2b0a      	cmp	r3, #10
 8016b66:	d003      	beq.n	8016b70 <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 8016b68:	68fb      	ldr	r3, [r7, #12]
 8016b6a:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8016b6c:	2b05      	cmp	r3, #5
 8016b6e:	d116      	bne.n	8016b9e <dhcp_t1_timeout+0x54>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 8016b70:	6878      	ldr	r0, [r7, #4]
 8016b72:	f000 fb47 	bl	8017204 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8016b76:	68fb      	ldr	r3, [r7, #12]
 8016b78:	899b      	ldrh	r3, [r3, #12]
 8016b7a:	461a      	mov	r2, r3
 8016b7c:	68fb      	ldr	r3, [r7, #12]
 8016b7e:	8a5b      	ldrh	r3, [r3, #18]
 8016b80:	1ad3      	subs	r3, r2, r3
 8016b82:	2b01      	cmp	r3, #1
 8016b84:	dd0b      	ble.n	8016b9e <dhcp_t1_timeout+0x54>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 8016b86:	68fb      	ldr	r3, [r7, #12]
 8016b88:	899b      	ldrh	r3, [r3, #12]
 8016b8a:	461a      	mov	r2, r3
 8016b8c:	68fb      	ldr	r3, [r7, #12]
 8016b8e:	8a5b      	ldrh	r3, [r3, #18]
 8016b90:	1ad3      	subs	r3, r2, r3
 8016b92:	0fda      	lsrs	r2, r3, #31
 8016b94:	4413      	add	r3, r2
 8016b96:	105b      	asrs	r3, r3, #1
 8016b98:	b29a      	uxth	r2, r3
 8016b9a:	68fb      	ldr	r3, [r7, #12]
 8016b9c:	81da      	strh	r2, [r3, #14]
    }
  }
}
 8016b9e:	bf00      	nop
 8016ba0:	3710      	adds	r7, #16
 8016ba2:	46bd      	mov	sp, r7
 8016ba4:	bd80      	pop	{r7, pc}

08016ba6 <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 8016ba6:	b580      	push	{r7, lr}
 8016ba8:	b084      	sub	sp, #16
 8016baa:	af00      	add	r7, sp, #0
 8016bac:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8016bae:	687b      	ldr	r3, [r7, #4]
 8016bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016bb2:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8016bb4:	68fb      	ldr	r3, [r7, #12]
 8016bb6:	795b      	ldrb	r3, [r3, #5]
 8016bb8:	2b01      	cmp	r3, #1
 8016bba:	d00b      	beq.n	8016bd4 <dhcp_t2_timeout+0x2e>
 8016bbc:	68fb      	ldr	r3, [r7, #12]
 8016bbe:	795b      	ldrb	r3, [r3, #5]
 8016bc0:	2b0a      	cmp	r3, #10
 8016bc2:	d007      	beq.n	8016bd4 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8016bc4:	68fb      	ldr	r3, [r7, #12]
 8016bc6:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8016bc8:	2b05      	cmp	r3, #5
 8016bca:	d003      	beq.n	8016bd4 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8016bcc:	68fb      	ldr	r3, [r7, #12]
 8016bce:	795b      	ldrb	r3, [r3, #5]
 8016bd0:	2b04      	cmp	r3, #4
 8016bd2:	d116      	bne.n	8016c02 <dhcp_t2_timeout+0x5c>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 8016bd4:	6878      	ldr	r0, [r7, #4]
 8016bd6:	f000 fbb1 	bl	801733c <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8016bda:	68fb      	ldr	r3, [r7, #12]
 8016bdc:	8a9b      	ldrh	r3, [r3, #20]
 8016bde:	461a      	mov	r2, r3
 8016be0:	68fb      	ldr	r3, [r7, #12]
 8016be2:	8a5b      	ldrh	r3, [r3, #18]
 8016be4:	1ad3      	subs	r3, r2, r3
 8016be6:	2b01      	cmp	r3, #1
 8016be8:	dd0b      	ble.n	8016c02 <dhcp_t2_timeout+0x5c>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 8016bea:	68fb      	ldr	r3, [r7, #12]
 8016bec:	8a9b      	ldrh	r3, [r3, #20]
 8016bee:	461a      	mov	r2, r3
 8016bf0:	68fb      	ldr	r3, [r7, #12]
 8016bf2:	8a5b      	ldrh	r3, [r3, #18]
 8016bf4:	1ad3      	subs	r3, r2, r3
 8016bf6:	0fda      	lsrs	r2, r3, #31
 8016bf8:	4413      	add	r3, r2
 8016bfa:	105b      	asrs	r3, r3, #1
 8016bfc:	b29a      	uxth	r2, r3
 8016bfe:	68fb      	ldr	r3, [r7, #12]
 8016c00:	821a      	strh	r2, [r3, #16]
    }
  }
}
 8016c02:	bf00      	nop
 8016c04:	3710      	adds	r7, #16
 8016c06:	46bd      	mov	sp, r7
 8016c08:	bd80      	pop	{r7, pc}
	...

08016c0c <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 8016c0c:	b580      	push	{r7, lr}
 8016c0e:	b084      	sub	sp, #16
 8016c10:	af00      	add	r7, sp, #0
 8016c12:	6078      	str	r0, [r7, #4]
 8016c14:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8016c16:	687b      	ldr	r3, [r7, #4]
 8016c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016c1a:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8016c1c:	68fb      	ldr	r3, [r7, #12]
 8016c1e:	2200      	movs	r2, #0
 8016c20:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8016c22:	68fb      	ldr	r3, [r7, #12]
 8016c24:	2200      	movs	r2, #0
 8016c26:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 8016c28:	4b26      	ldr	r3, [pc, #152]	; (8016cc4 <dhcp_handle_ack+0xb8>)
 8016c2a:	78db      	ldrb	r3, [r3, #3]
 8016c2c:	2b00      	cmp	r3, #0
 8016c2e:	d003      	beq.n	8016c38 <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 8016c30:	4b25      	ldr	r3, [pc, #148]	; (8016cc8 <dhcp_handle_ack+0xbc>)
 8016c32:	68da      	ldr	r2, [r3, #12]
 8016c34:	68fb      	ldr	r3, [r7, #12]
 8016c36:	629a      	str	r2, [r3, #40]	; 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 8016c38:	4b22      	ldr	r3, [pc, #136]	; (8016cc4 <dhcp_handle_ack+0xb8>)
 8016c3a:	791b      	ldrb	r3, [r3, #4]
 8016c3c:	2b00      	cmp	r3, #0
 8016c3e:	d004      	beq.n	8016c4a <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 8016c40:	4b21      	ldr	r3, [pc, #132]	; (8016cc8 <dhcp_handle_ack+0xbc>)
 8016c42:	691a      	ldr	r2, [r3, #16]
 8016c44:	68fb      	ldr	r3, [r7, #12]
 8016c46:	62da      	str	r2, [r3, #44]	; 0x2c
 8016c48:	e004      	b.n	8016c54 <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 8016c4a:	68fb      	ldr	r3, [r7, #12]
 8016c4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016c4e:	085a      	lsrs	r2, r3, #1
 8016c50:	68fb      	ldr	r3, [r7, #12]
 8016c52:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 8016c54:	4b1b      	ldr	r3, [pc, #108]	; (8016cc4 <dhcp_handle_ack+0xb8>)
 8016c56:	795b      	ldrb	r3, [r3, #5]
 8016c58:	2b00      	cmp	r3, #0
 8016c5a:	d004      	beq.n	8016c66 <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 8016c5c:	4b1a      	ldr	r3, [pc, #104]	; (8016cc8 <dhcp_handle_ack+0xbc>)
 8016c5e:	695a      	ldr	r2, [r3, #20]
 8016c60:	68fb      	ldr	r3, [r7, #12]
 8016c62:	631a      	str	r2, [r3, #48]	; 0x30
 8016c64:	e007      	b.n	8016c76 <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 8016c66:	68fb      	ldr	r3, [r7, #12]
 8016c68:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8016c6a:	4613      	mov	r3, r2
 8016c6c:	00db      	lsls	r3, r3, #3
 8016c6e:	1a9b      	subs	r3, r3, r2
 8016c70:	08da      	lsrs	r2, r3, #3
 8016c72:	68fb      	ldr	r3, [r7, #12]
 8016c74:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8016c76:	683b      	ldr	r3, [r7, #0]
 8016c78:	691a      	ldr	r2, [r3, #16]
 8016c7a:	68fb      	ldr	r3, [r7, #12]
 8016c7c:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 8016c7e:	4b11      	ldr	r3, [pc, #68]	; (8016cc4 <dhcp_handle_ack+0xb8>)
 8016c80:	799b      	ldrb	r3, [r3, #6]
 8016c82:	2b00      	cmp	r3, #0
 8016c84:	d00b      	beq.n	8016c9e <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 8016c86:	4b10      	ldr	r3, [pc, #64]	; (8016cc8 <dhcp_handle_ack+0xbc>)
 8016c88:	699b      	ldr	r3, [r3, #24]
 8016c8a:	4618      	mov	r0, r3
 8016c8c:	f7f8 f863 	bl	800ed56 <lwip_htonl>
 8016c90:	4602      	mov	r2, r0
 8016c92:	68fb      	ldr	r3, [r7, #12]
 8016c94:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 8016c96:	68fb      	ldr	r3, [r7, #12]
 8016c98:	2201      	movs	r2, #1
 8016c9a:	71da      	strb	r2, [r3, #7]
 8016c9c:	e002      	b.n	8016ca4 <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 8016c9e:	68fb      	ldr	r3, [r7, #12]
 8016ca0:	2200      	movs	r2, #0
 8016ca2:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 8016ca4:	4b07      	ldr	r3, [pc, #28]	; (8016cc4 <dhcp_handle_ack+0xb8>)
 8016ca6:	79db      	ldrb	r3, [r3, #7]
 8016ca8:	2b00      	cmp	r3, #0
 8016caa:	d007      	beq.n	8016cbc <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 8016cac:	4b06      	ldr	r3, [pc, #24]	; (8016cc8 <dhcp_handle_ack+0xbc>)
 8016cae:	69db      	ldr	r3, [r3, #28]
 8016cb0:	4618      	mov	r0, r3
 8016cb2:	f7f8 f850 	bl	800ed56 <lwip_htonl>
 8016cb6:	4602      	mov	r2, r0
 8016cb8:	68fb      	ldr	r3, [r7, #12]
 8016cba:	625a      	str	r2, [r3, #36]	; 0x24
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 8016cbc:	bf00      	nop
 8016cbe:	3710      	adds	r7, #16
 8016cc0:	46bd      	mov	sp, r7
 8016cc2:	bd80      	pop	{r7, pc}
 8016cc4:	2000764c 	.word	0x2000764c
 8016cc8:	20007654 	.word	0x20007654

08016ccc <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 8016ccc:	b580      	push	{r7, lr}
 8016cce:	b084      	sub	sp, #16
 8016cd0:	af00      	add	r7, sp, #0
 8016cd2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 8016cd4:	687b      	ldr	r3, [r7, #4]
 8016cd6:	2b00      	cmp	r3, #0
 8016cd8:	d109      	bne.n	8016cee <dhcp_start+0x22>
 8016cda:	4b37      	ldr	r3, [pc, #220]	; (8016db8 <dhcp_start+0xec>)
 8016cdc:	f240 22e7 	movw	r2, #743	; 0x2e7
 8016ce0:	4936      	ldr	r1, [pc, #216]	; (8016dbc <dhcp_start+0xf0>)
 8016ce2:	4837      	ldr	r0, [pc, #220]	; (8016dc0 <dhcp_start+0xf4>)
 8016ce4:	f004 fb3c 	bl	801b360 <iprintf>
 8016ce8:	f06f 030f 	mvn.w	r3, #15
 8016cec:	e060      	b.n	8016db0 <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 8016cee:	687b      	ldr	r3, [r7, #4]
 8016cf0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8016cf4:	f003 0301 	and.w	r3, r3, #1
 8016cf8:	2b00      	cmp	r3, #0
 8016cfa:	d109      	bne.n	8016d10 <dhcp_start+0x44>
 8016cfc:	4b2e      	ldr	r3, [pc, #184]	; (8016db8 <dhcp_start+0xec>)
 8016cfe:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 8016d02:	4930      	ldr	r1, [pc, #192]	; (8016dc4 <dhcp_start+0xf8>)
 8016d04:	482e      	ldr	r0, [pc, #184]	; (8016dc0 <dhcp_start+0xf4>)
 8016d06:	f004 fb2b 	bl	801b360 <iprintf>
 8016d0a:	f06f 030f 	mvn.w	r3, #15
 8016d0e:	e04f      	b.n	8016db0 <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 8016d10:	687b      	ldr	r3, [r7, #4]
 8016d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016d14:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 8016d16:	687b      	ldr	r3, [r7, #4]
 8016d18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016d1a:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 8016d1e:	d202      	bcs.n	8016d26 <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 8016d20:	f04f 33ff 	mov.w	r3, #4294967295
 8016d24:	e044      	b.n	8016db0 <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 8016d26:	68fb      	ldr	r3, [r7, #12]
 8016d28:	2b00      	cmp	r3, #0
 8016d2a:	d10d      	bne.n	8016d48 <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 8016d2c:	2034      	movs	r0, #52	; 0x34
 8016d2e:	f7f8 fae5 	bl	800f2fc <mem_malloc>
 8016d32:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 8016d34:	68fb      	ldr	r3, [r7, #12]
 8016d36:	2b00      	cmp	r3, #0
 8016d38:	d102      	bne.n	8016d40 <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 8016d3a:	f04f 33ff 	mov.w	r3, #4294967295
 8016d3e:	e037      	b.n	8016db0 <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 8016d40:	687b      	ldr	r3, [r7, #4]
 8016d42:	68fa      	ldr	r2, [r7, #12]
 8016d44:	625a      	str	r2, [r3, #36]	; 0x24
 8016d46:	e005      	b.n	8016d54 <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 8016d48:	68fb      	ldr	r3, [r7, #12]
 8016d4a:	791b      	ldrb	r3, [r3, #4]
 8016d4c:	2b00      	cmp	r3, #0
 8016d4e:	d001      	beq.n	8016d54 <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8016d50:	f7ff fc92 	bl	8016678 <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 8016d54:	2234      	movs	r2, #52	; 0x34
 8016d56:	2100      	movs	r1, #0
 8016d58:	68f8      	ldr	r0, [r7, #12]
 8016d5a:	f003 fde5 	bl	801a928 <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 8016d5e:	f7ff fc39 	bl	80165d4 <dhcp_inc_pcb_refcount>
 8016d62:	4603      	mov	r3, r0
 8016d64:	2b00      	cmp	r3, #0
 8016d66:	d002      	beq.n	8016d6e <dhcp_start+0xa2>
    return ERR_MEM;
 8016d68:	f04f 33ff 	mov.w	r3, #4294967295
 8016d6c:	e020      	b.n	8016db0 <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 8016d6e:	68fb      	ldr	r3, [r7, #12]
 8016d70:	2201      	movs	r2, #1
 8016d72:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 8016d74:	687b      	ldr	r3, [r7, #4]
 8016d76:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8016d7a:	f003 0304 	and.w	r3, r3, #4
 8016d7e:	2b00      	cmp	r3, #0
 8016d80:	d105      	bne.n	8016d8e <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 8016d82:	2102      	movs	r1, #2
 8016d84:	68f8      	ldr	r0, [r7, #12]
 8016d86:	f000 fcc5 	bl	8017714 <dhcp_set_state>
    return ERR_OK;
 8016d8a:	2300      	movs	r3, #0
 8016d8c:	e010      	b.n	8016db0 <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 8016d8e:	6878      	ldr	r0, [r7, #4]
 8016d90:	f000 f8bc 	bl	8016f0c <dhcp_discover>
 8016d94:	4603      	mov	r3, r0
 8016d96:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 8016d98:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8016d9c:	2b00      	cmp	r3, #0
 8016d9e:	d005      	beq.n	8016dac <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 8016da0:	6878      	ldr	r0, [r7, #4]
 8016da2:	f000 fc1d 	bl	80175e0 <dhcp_release_and_stop>
    return ERR_MEM;
 8016da6:	f04f 33ff 	mov.w	r3, #4294967295
 8016daa:	e001      	b.n	8016db0 <dhcp_start+0xe4>
  }
  return result;
 8016dac:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8016db0:	4618      	mov	r0, r3
 8016db2:	3710      	adds	r7, #16
 8016db4:	46bd      	mov	sp, r7
 8016db6:	bd80      	pop	{r7, pc}
 8016db8:	08022e84 	.word	0x08022e84
 8016dbc:	08022f68 	.word	0x08022f68
 8016dc0:	08022ee4 	.word	0x08022ee4
 8016dc4:	08022fac 	.word	0x08022fac

08016dc8 <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 8016dc8:	b580      	push	{r7, lr}
 8016dca:	b084      	sub	sp, #16
 8016dcc:	af00      	add	r7, sp, #0
 8016dce:	6078      	str	r0, [r7, #4]
 8016dd0:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8016dd2:	687b      	ldr	r3, [r7, #4]
 8016dd4:	2b00      	cmp	r3, #0
 8016dd6:	d107      	bne.n	8016de8 <dhcp_arp_reply+0x20>
 8016dd8:	4b0e      	ldr	r3, [pc, #56]	; (8016e14 <dhcp_arp_reply+0x4c>)
 8016dda:	f240 328b 	movw	r2, #907	; 0x38b
 8016dde:	490e      	ldr	r1, [pc, #56]	; (8016e18 <dhcp_arp_reply+0x50>)
 8016de0:	480e      	ldr	r0, [pc, #56]	; (8016e1c <dhcp_arp_reply+0x54>)
 8016de2:	f004 fabd 	bl	801b360 <iprintf>
 8016de6:	e012      	b.n	8016e0e <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 8016de8:	687b      	ldr	r3, [r7, #4]
 8016dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016dec:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 8016dee:	68fb      	ldr	r3, [r7, #12]
 8016df0:	2b00      	cmp	r3, #0
 8016df2:	d00c      	beq.n	8016e0e <dhcp_arp_reply+0x46>
 8016df4:	68fb      	ldr	r3, [r7, #12]
 8016df6:	795b      	ldrb	r3, [r3, #5]
 8016df8:	2b08      	cmp	r3, #8
 8016dfa:	d108      	bne.n	8016e0e <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 8016dfc:	683b      	ldr	r3, [r7, #0]
 8016dfe:	681a      	ldr	r2, [r3, #0]
 8016e00:	68fb      	ldr	r3, [r7, #12]
 8016e02:	69db      	ldr	r3, [r3, #28]
 8016e04:	429a      	cmp	r2, r3
 8016e06:	d102      	bne.n	8016e0e <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 8016e08:	6878      	ldr	r0, [r7, #4]
 8016e0a:	f000 f809 	bl	8016e20 <dhcp_decline>
    }
  }
}
 8016e0e:	3710      	adds	r7, #16
 8016e10:	46bd      	mov	sp, r7
 8016e12:	bd80      	pop	{r7, pc}
 8016e14:	08022e84 	.word	0x08022e84
 8016e18:	08022f68 	.word	0x08022f68
 8016e1c:	08022ee4 	.word	0x08022ee4

08016e20 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 8016e20:	b5b0      	push	{r4, r5, r7, lr}
 8016e22:	b08a      	sub	sp, #40	; 0x28
 8016e24:	af02      	add	r7, sp, #8
 8016e26:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8016e28:	687b      	ldr	r3, [r7, #4]
 8016e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016e2c:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8016e2e:	210c      	movs	r1, #12
 8016e30:	69b8      	ldr	r0, [r7, #24]
 8016e32:	f000 fc6f 	bl	8017714 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 8016e36:	f107 030c 	add.w	r3, r7, #12
 8016e3a:	2204      	movs	r2, #4
 8016e3c:	69b9      	ldr	r1, [r7, #24]
 8016e3e:	6878      	ldr	r0, [r7, #4]
 8016e40:	f001 f8f4 	bl	801802c <dhcp_create_msg>
 8016e44:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8016e46:	697b      	ldr	r3, [r7, #20]
 8016e48:	2b00      	cmp	r3, #0
 8016e4a:	d035      	beq.n	8016eb8 <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8016e4c:	697b      	ldr	r3, [r7, #20]
 8016e4e:	685b      	ldr	r3, [r3, #4]
 8016e50:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8016e52:	89b8      	ldrh	r0, [r7, #12]
 8016e54:	693b      	ldr	r3, [r7, #16]
 8016e56:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8016e5a:	2304      	movs	r3, #4
 8016e5c:	2232      	movs	r2, #50	; 0x32
 8016e5e:	f000 fc73 	bl	8017748 <dhcp_option>
 8016e62:	4603      	mov	r3, r0
 8016e64:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8016e66:	89bc      	ldrh	r4, [r7, #12]
 8016e68:	693b      	ldr	r3, [r7, #16]
 8016e6a:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8016e6e:	69bb      	ldr	r3, [r7, #24]
 8016e70:	69db      	ldr	r3, [r3, #28]
 8016e72:	4618      	mov	r0, r3
 8016e74:	f7f7 ff6f 	bl	800ed56 <lwip_htonl>
 8016e78:	4603      	mov	r3, r0
 8016e7a:	461a      	mov	r2, r3
 8016e7c:	4629      	mov	r1, r5
 8016e7e:	4620      	mov	r0, r4
 8016e80:	f000 fcee 	bl	8017860 <dhcp_option_long>
 8016e84:	4603      	mov	r3, r0
 8016e86:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8016e88:	89b8      	ldrh	r0, [r7, #12]
 8016e8a:	693b      	ldr	r3, [r7, #16]
 8016e8c:	33f0      	adds	r3, #240	; 0xf0
 8016e8e:	697a      	ldr	r2, [r7, #20]
 8016e90:	4619      	mov	r1, r3
 8016e92:	f001 f9a1 	bl	80181d8 <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8016e96:	4b19      	ldr	r3, [pc, #100]	; (8016efc <dhcp_decline+0xdc>)
 8016e98:	6818      	ldr	r0, [r3, #0]
 8016e9a:	4b19      	ldr	r3, [pc, #100]	; (8016f00 <dhcp_decline+0xe0>)
 8016e9c:	9301      	str	r3, [sp, #4]
 8016e9e:	687b      	ldr	r3, [r7, #4]
 8016ea0:	9300      	str	r3, [sp, #0]
 8016ea2:	2343      	movs	r3, #67	; 0x43
 8016ea4:	4a17      	ldr	r2, [pc, #92]	; (8016f04 <dhcp_decline+0xe4>)
 8016ea6:	6979      	ldr	r1, [r7, #20]
 8016ea8:	f7ff f90e 	bl	80160c8 <udp_sendto_if_src>
 8016eac:	4603      	mov	r3, r0
 8016eae:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8016eb0:	6978      	ldr	r0, [r7, #20]
 8016eb2:	f7f9 f9d7 	bl	8010264 <pbuf_free>
 8016eb6:	e001      	b.n	8016ebc <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8016eb8:	23ff      	movs	r3, #255	; 0xff
 8016eba:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8016ebc:	69bb      	ldr	r3, [r7, #24]
 8016ebe:	799b      	ldrb	r3, [r3, #6]
 8016ec0:	2bff      	cmp	r3, #255	; 0xff
 8016ec2:	d005      	beq.n	8016ed0 <dhcp_decline+0xb0>
    dhcp->tries++;
 8016ec4:	69bb      	ldr	r3, [r7, #24]
 8016ec6:	799b      	ldrb	r3, [r3, #6]
 8016ec8:	3301      	adds	r3, #1
 8016eca:	b2da      	uxtb	r2, r3
 8016ecc:	69bb      	ldr	r3, [r7, #24]
 8016ece:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 8016ed0:	f242 7310 	movw	r3, #10000	; 0x2710
 8016ed4:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8016ed6:	89fb      	ldrh	r3, [r7, #14]
 8016ed8:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8016edc:	4a0a      	ldr	r2, [pc, #40]	; (8016f08 <dhcp_decline+0xe8>)
 8016ede:	fb82 1203 	smull	r1, r2, r2, r3
 8016ee2:	1152      	asrs	r2, r2, #5
 8016ee4:	17db      	asrs	r3, r3, #31
 8016ee6:	1ad3      	subs	r3, r2, r3
 8016ee8:	b29a      	uxth	r2, r3
 8016eea:	69bb      	ldr	r3, [r7, #24]
 8016eec:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8016eee:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8016ef2:	4618      	mov	r0, r3
 8016ef4:	3720      	adds	r7, #32
 8016ef6:	46bd      	mov	sp, r7
 8016ef8:	bdb0      	pop	{r4, r5, r7, pc}
 8016efa:	bf00      	nop
 8016efc:	20000520 	.word	0x20000520
 8016f00:	08023f40 	.word	0x08023f40
 8016f04:	08023f44 	.word	0x08023f44
 8016f08:	10624dd3 	.word	0x10624dd3

08016f0c <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 8016f0c:	b580      	push	{r7, lr}
 8016f0e:	b08a      	sub	sp, #40	; 0x28
 8016f10:	af02      	add	r7, sp, #8
 8016f12:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8016f14:	687b      	ldr	r3, [r7, #4]
 8016f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016f18:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 8016f1a:	2300      	movs	r3, #0
 8016f1c:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 8016f1e:	69bb      	ldr	r3, [r7, #24]
 8016f20:	2200      	movs	r2, #0
 8016f22:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 8016f24:	2106      	movs	r1, #6
 8016f26:	69b8      	ldr	r0, [r7, #24]
 8016f28:	f000 fbf4 	bl	8017714 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 8016f2c:	f107 0308 	add.w	r3, r7, #8
 8016f30:	2201      	movs	r2, #1
 8016f32:	69b9      	ldr	r1, [r7, #24]
 8016f34:	6878      	ldr	r0, [r7, #4]
 8016f36:	f001 f879 	bl	801802c <dhcp_create_msg>
 8016f3a:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 8016f3c:	693b      	ldr	r3, [r7, #16]
 8016f3e:	2b00      	cmp	r3, #0
 8016f40:	d04b      	beq.n	8016fda <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8016f42:	693b      	ldr	r3, [r7, #16]
 8016f44:	685b      	ldr	r3, [r3, #4]
 8016f46:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8016f48:	8938      	ldrh	r0, [r7, #8]
 8016f4a:	68fb      	ldr	r3, [r7, #12]
 8016f4c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8016f50:	2302      	movs	r3, #2
 8016f52:	2239      	movs	r2, #57	; 0x39
 8016f54:	f000 fbf8 	bl	8017748 <dhcp_option>
 8016f58:	4603      	mov	r3, r0
 8016f5a:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8016f5c:	8938      	ldrh	r0, [r7, #8]
 8016f5e:	68fb      	ldr	r3, [r7, #12]
 8016f60:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8016f64:	687b      	ldr	r3, [r7, #4]
 8016f66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016f68:	461a      	mov	r2, r3
 8016f6a:	f000 fc47 	bl	80177fc <dhcp_option_short>
 8016f6e:	4603      	mov	r3, r0
 8016f70:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8016f72:	8938      	ldrh	r0, [r7, #8]
 8016f74:	68fb      	ldr	r3, [r7, #12]
 8016f76:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8016f7a:	2303      	movs	r3, #3
 8016f7c:	2237      	movs	r2, #55	; 0x37
 8016f7e:	f000 fbe3 	bl	8017748 <dhcp_option>
 8016f82:	4603      	mov	r3, r0
 8016f84:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8016f86:	2300      	movs	r3, #0
 8016f88:	77fb      	strb	r3, [r7, #31]
 8016f8a:	e00e      	b.n	8016faa <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8016f8c:	8938      	ldrh	r0, [r7, #8]
 8016f8e:	68fb      	ldr	r3, [r7, #12]
 8016f90:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8016f94:	7ffb      	ldrb	r3, [r7, #31]
 8016f96:	4a29      	ldr	r2, [pc, #164]	; (801703c <dhcp_discover+0x130>)
 8016f98:	5cd3      	ldrb	r3, [r2, r3]
 8016f9a:	461a      	mov	r2, r3
 8016f9c:	f000 fc08 	bl	80177b0 <dhcp_option_byte>
 8016fa0:	4603      	mov	r3, r0
 8016fa2:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8016fa4:	7ffb      	ldrb	r3, [r7, #31]
 8016fa6:	3301      	adds	r3, #1
 8016fa8:	77fb      	strb	r3, [r7, #31]
 8016faa:	7ffb      	ldrb	r3, [r7, #31]
 8016fac:	2b02      	cmp	r3, #2
 8016fae:	d9ed      	bls.n	8016f8c <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8016fb0:	8938      	ldrh	r0, [r7, #8]
 8016fb2:	68fb      	ldr	r3, [r7, #12]
 8016fb4:	33f0      	adds	r3, #240	; 0xf0
 8016fb6:	693a      	ldr	r2, [r7, #16]
 8016fb8:	4619      	mov	r1, r3
 8016fba:	f001 f90d 	bl	80181d8 <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8016fbe:	4b20      	ldr	r3, [pc, #128]	; (8017040 <dhcp_discover+0x134>)
 8016fc0:	6818      	ldr	r0, [r3, #0]
 8016fc2:	4b20      	ldr	r3, [pc, #128]	; (8017044 <dhcp_discover+0x138>)
 8016fc4:	9301      	str	r3, [sp, #4]
 8016fc6:	687b      	ldr	r3, [r7, #4]
 8016fc8:	9300      	str	r3, [sp, #0]
 8016fca:	2343      	movs	r3, #67	; 0x43
 8016fcc:	4a1e      	ldr	r2, [pc, #120]	; (8017048 <dhcp_discover+0x13c>)
 8016fce:	6939      	ldr	r1, [r7, #16]
 8016fd0:	f7ff f87a 	bl	80160c8 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 8016fd4:	6938      	ldr	r0, [r7, #16]
 8016fd6:	f7f9 f945 	bl	8010264 <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 8016fda:	69bb      	ldr	r3, [r7, #24]
 8016fdc:	799b      	ldrb	r3, [r3, #6]
 8016fde:	2bff      	cmp	r3, #255	; 0xff
 8016fe0:	d005      	beq.n	8016fee <dhcp_discover+0xe2>
    dhcp->tries++;
 8016fe2:	69bb      	ldr	r3, [r7, #24]
 8016fe4:	799b      	ldrb	r3, [r3, #6]
 8016fe6:	3301      	adds	r3, #1
 8016fe8:	b2da      	uxtb	r2, r3
 8016fea:	69bb      	ldr	r3, [r7, #24]
 8016fec:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8016fee:	69bb      	ldr	r3, [r7, #24]
 8016ff0:	799b      	ldrb	r3, [r3, #6]
 8016ff2:	2b05      	cmp	r3, #5
 8016ff4:	d80d      	bhi.n	8017012 <dhcp_discover+0x106>
 8016ff6:	69bb      	ldr	r3, [r7, #24]
 8016ff8:	799b      	ldrb	r3, [r3, #6]
 8016ffa:	461a      	mov	r2, r3
 8016ffc:	2301      	movs	r3, #1
 8016ffe:	4093      	lsls	r3, r2
 8017000:	b29b      	uxth	r3, r3
 8017002:	461a      	mov	r2, r3
 8017004:	0152      	lsls	r2, r2, #5
 8017006:	1ad2      	subs	r2, r2, r3
 8017008:	0092      	lsls	r2, r2, #2
 801700a:	4413      	add	r3, r2
 801700c:	00db      	lsls	r3, r3, #3
 801700e:	b29b      	uxth	r3, r3
 8017010:	e001      	b.n	8017016 <dhcp_discover+0x10a>
 8017012:	f64e 2360 	movw	r3, #60000	; 0xea60
 8017016:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8017018:	897b      	ldrh	r3, [r7, #10]
 801701a:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801701e:	4a0b      	ldr	r2, [pc, #44]	; (801704c <dhcp_discover+0x140>)
 8017020:	fb82 1203 	smull	r1, r2, r2, r3
 8017024:	1152      	asrs	r2, r2, #5
 8017026:	17db      	asrs	r3, r3, #31
 8017028:	1ad3      	subs	r3, r2, r3
 801702a:	b29a      	uxth	r2, r3
 801702c:	69bb      	ldr	r3, [r7, #24]
 801702e:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8017030:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8017034:	4618      	mov	r0, r3
 8017036:	3720      	adds	r7, #32
 8017038:	46bd      	mov	sp, r7
 801703a:	bd80      	pop	{r7, pc}
 801703c:	20000080 	.word	0x20000080
 8017040:	20000520 	.word	0x20000520
 8017044:	08023f40 	.word	0x08023f40
 8017048:	08023f44 	.word	0x08023f44
 801704c:	10624dd3 	.word	0x10624dd3

08017050 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 8017050:	b580      	push	{r7, lr}
 8017052:	b088      	sub	sp, #32
 8017054:	af00      	add	r7, sp, #0
 8017056:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 8017058:	687b      	ldr	r3, [r7, #4]
 801705a:	2b00      	cmp	r3, #0
 801705c:	d107      	bne.n	801706e <dhcp_bind+0x1e>
 801705e:	4b64      	ldr	r3, [pc, #400]	; (80171f0 <dhcp_bind+0x1a0>)
 8017060:	f240 4215 	movw	r2, #1045	; 0x415
 8017064:	4963      	ldr	r1, [pc, #396]	; (80171f4 <dhcp_bind+0x1a4>)
 8017066:	4864      	ldr	r0, [pc, #400]	; (80171f8 <dhcp_bind+0x1a8>)
 8017068:	f004 f97a 	bl	801b360 <iprintf>
 801706c:	e0bc      	b.n	80171e8 <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 801706e:	687b      	ldr	r3, [r7, #4]
 8017070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017072:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 8017074:	69bb      	ldr	r3, [r7, #24]
 8017076:	2b00      	cmp	r3, #0
 8017078:	d107      	bne.n	801708a <dhcp_bind+0x3a>
 801707a:	4b5d      	ldr	r3, [pc, #372]	; (80171f0 <dhcp_bind+0x1a0>)
 801707c:	f240 4217 	movw	r2, #1047	; 0x417
 8017080:	495e      	ldr	r1, [pc, #376]	; (80171fc <dhcp_bind+0x1ac>)
 8017082:	485d      	ldr	r0, [pc, #372]	; (80171f8 <dhcp_bind+0x1a8>)
 8017084:	f004 f96c 	bl	801b360 <iprintf>
 8017088:	e0ae      	b.n	80171e8 <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 801708a:	69bb      	ldr	r3, [r7, #24]
 801708c:	2200      	movs	r2, #0
 801708e:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 8017090:	69bb      	ldr	r3, [r7, #24]
 8017092:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017094:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017098:	d019      	beq.n	80170ce <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801709a:	69bb      	ldr	r3, [r7, #24]
 801709c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801709e:	331e      	adds	r3, #30
 80170a0:	4a57      	ldr	r2, [pc, #348]	; (8017200 <dhcp_bind+0x1b0>)
 80170a2:	fba2 2303 	umull	r2, r3, r2, r3
 80170a6:	095b      	lsrs	r3, r3, #5
 80170a8:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 80170aa:	69fb      	ldr	r3, [r7, #28]
 80170ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80170b0:	d302      	bcc.n	80170b8 <dhcp_bind+0x68>
      timeout = 0xffff;
 80170b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80170b6:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 80170b8:	69fb      	ldr	r3, [r7, #28]
 80170ba:	b29a      	uxth	r2, r3
 80170bc:	69bb      	ldr	r3, [r7, #24]
 80170be:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 80170c0:	69bb      	ldr	r3, [r7, #24]
 80170c2:	8a9b      	ldrh	r3, [r3, #20]
 80170c4:	2b00      	cmp	r3, #0
 80170c6:	d102      	bne.n	80170ce <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 80170c8:	69bb      	ldr	r3, [r7, #24]
 80170ca:	2201      	movs	r2, #1
 80170cc:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 80170ce:	69bb      	ldr	r3, [r7, #24]
 80170d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80170d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80170d6:	d01d      	beq.n	8017114 <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80170d8:	69bb      	ldr	r3, [r7, #24]
 80170da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80170dc:	331e      	adds	r3, #30
 80170de:	4a48      	ldr	r2, [pc, #288]	; (8017200 <dhcp_bind+0x1b0>)
 80170e0:	fba2 2303 	umull	r2, r3, r2, r3
 80170e4:	095b      	lsrs	r3, r3, #5
 80170e6:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 80170e8:	69fb      	ldr	r3, [r7, #28]
 80170ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80170ee:	d302      	bcc.n	80170f6 <dhcp_bind+0xa6>
      timeout = 0xffff;
 80170f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80170f4:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 80170f6:	69fb      	ldr	r3, [r7, #28]
 80170f8:	b29a      	uxth	r2, r3
 80170fa:	69bb      	ldr	r3, [r7, #24]
 80170fc:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 80170fe:	69bb      	ldr	r3, [r7, #24]
 8017100:	895b      	ldrh	r3, [r3, #10]
 8017102:	2b00      	cmp	r3, #0
 8017104:	d102      	bne.n	801710c <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 8017106:	69bb      	ldr	r3, [r7, #24]
 8017108:	2201      	movs	r2, #1
 801710a:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 801710c:	69bb      	ldr	r3, [r7, #24]
 801710e:	895a      	ldrh	r2, [r3, #10]
 8017110:	69bb      	ldr	r3, [r7, #24]
 8017112:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 8017114:	69bb      	ldr	r3, [r7, #24]
 8017116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017118:	f1b3 3fff 	cmp.w	r3, #4294967295
 801711c:	d01d      	beq.n	801715a <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801711e:	69bb      	ldr	r3, [r7, #24]
 8017120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017122:	331e      	adds	r3, #30
 8017124:	4a36      	ldr	r2, [pc, #216]	; (8017200 <dhcp_bind+0x1b0>)
 8017126:	fba2 2303 	umull	r2, r3, r2, r3
 801712a:	095b      	lsrs	r3, r3, #5
 801712c:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 801712e:	69fb      	ldr	r3, [r7, #28]
 8017130:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8017134:	d302      	bcc.n	801713c <dhcp_bind+0xec>
      timeout = 0xffff;
 8017136:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801713a:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 801713c:	69fb      	ldr	r3, [r7, #28]
 801713e:	b29a      	uxth	r2, r3
 8017140:	69bb      	ldr	r3, [r7, #24]
 8017142:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 8017144:	69bb      	ldr	r3, [r7, #24]
 8017146:	899b      	ldrh	r3, [r3, #12]
 8017148:	2b00      	cmp	r3, #0
 801714a:	d102      	bne.n	8017152 <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 801714c:	69bb      	ldr	r3, [r7, #24]
 801714e:	2201      	movs	r2, #1
 8017150:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 8017152:	69bb      	ldr	r3, [r7, #24]
 8017154:	899a      	ldrh	r2, [r3, #12]
 8017156:	69bb      	ldr	r3, [r7, #24]
 8017158:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 801715a:	69bb      	ldr	r3, [r7, #24]
 801715c:	895a      	ldrh	r2, [r3, #10]
 801715e:	69bb      	ldr	r3, [r7, #24]
 8017160:	899b      	ldrh	r3, [r3, #12]
 8017162:	429a      	cmp	r2, r3
 8017164:	d306      	bcc.n	8017174 <dhcp_bind+0x124>
 8017166:	69bb      	ldr	r3, [r7, #24]
 8017168:	899b      	ldrh	r3, [r3, #12]
 801716a:	2b00      	cmp	r3, #0
 801716c:	d002      	beq.n	8017174 <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 801716e:	69bb      	ldr	r3, [r7, #24]
 8017170:	2200      	movs	r2, #0
 8017172:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 8017174:	69bb      	ldr	r3, [r7, #24]
 8017176:	79db      	ldrb	r3, [r3, #7]
 8017178:	2b00      	cmp	r3, #0
 801717a:	d003      	beq.n	8017184 <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 801717c:	69bb      	ldr	r3, [r7, #24]
 801717e:	6a1b      	ldr	r3, [r3, #32]
 8017180:	613b      	str	r3, [r7, #16]
 8017182:	e014      	b.n	80171ae <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 8017184:	69bb      	ldr	r3, [r7, #24]
 8017186:	331c      	adds	r3, #28
 8017188:	781b      	ldrb	r3, [r3, #0]
 801718a:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 801718c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8017190:	2b00      	cmp	r3, #0
 8017192:	db02      	blt.n	801719a <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 8017194:	23ff      	movs	r3, #255	; 0xff
 8017196:	613b      	str	r3, [r7, #16]
 8017198:	e009      	b.n	80171ae <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 801719a:	7dfb      	ldrb	r3, [r7, #23]
 801719c:	2bbf      	cmp	r3, #191	; 0xbf
 801719e:	d903      	bls.n	80171a8 <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 80171a0:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80171a4:	613b      	str	r3, [r7, #16]
 80171a6:	e002      	b.n	80171ae <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 80171a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80171ac:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 80171ae:	69bb      	ldr	r3, [r7, #24]
 80171b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80171b2:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 80171b4:	68fb      	ldr	r3, [r7, #12]
 80171b6:	2b00      	cmp	r3, #0
 80171b8:	d108      	bne.n	80171cc <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 80171ba:	69bb      	ldr	r3, [r7, #24]
 80171bc:	69da      	ldr	r2, [r3, #28]
 80171be:	693b      	ldr	r3, [r7, #16]
 80171c0:	4013      	ands	r3, r2
 80171c2:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 80171c4:	68fb      	ldr	r3, [r7, #12]
 80171c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80171ca:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 80171cc:	210a      	movs	r1, #10
 80171ce:	69b8      	ldr	r0, [r7, #24]
 80171d0:	f000 faa0 	bl	8017714 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 80171d4:	69bb      	ldr	r3, [r7, #24]
 80171d6:	f103 011c 	add.w	r1, r3, #28
 80171da:	f107 030c 	add.w	r3, r7, #12
 80171de:	f107 0210 	add.w	r2, r7, #16
 80171e2:	6878      	ldr	r0, [r7, #4]
 80171e4:	f7f8 fbe6 	bl	800f9b4 <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 80171e8:	3720      	adds	r7, #32
 80171ea:	46bd      	mov	sp, r7
 80171ec:	bd80      	pop	{r7, pc}
 80171ee:	bf00      	nop
 80171f0:	08022e84 	.word	0x08022e84
 80171f4:	08022fe4 	.word	0x08022fe4
 80171f8:	08022ee4 	.word	0x08022ee4
 80171fc:	08023000 	.word	0x08023000
 8017200:	88888889 	.word	0x88888889

08017204 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 8017204:	b580      	push	{r7, lr}
 8017206:	b08a      	sub	sp, #40	; 0x28
 8017208:	af02      	add	r7, sp, #8
 801720a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801720c:	687b      	ldr	r3, [r7, #4]
 801720e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017210:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 8017212:	2105      	movs	r1, #5
 8017214:	69b8      	ldr	r0, [r7, #24]
 8017216:	f000 fa7d 	bl	8017714 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801721a:	f107 030c 	add.w	r3, r7, #12
 801721e:	2203      	movs	r2, #3
 8017220:	69b9      	ldr	r1, [r7, #24]
 8017222:	6878      	ldr	r0, [r7, #4]
 8017224:	f000 ff02 	bl	801802c <dhcp_create_msg>
 8017228:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801722a:	697b      	ldr	r3, [r7, #20]
 801722c:	2b00      	cmp	r3, #0
 801722e:	d04e      	beq.n	80172ce <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8017230:	697b      	ldr	r3, [r7, #20]
 8017232:	685b      	ldr	r3, [r3, #4]
 8017234:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8017236:	89b8      	ldrh	r0, [r7, #12]
 8017238:	693b      	ldr	r3, [r7, #16]
 801723a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801723e:	2302      	movs	r3, #2
 8017240:	2239      	movs	r2, #57	; 0x39
 8017242:	f000 fa81 	bl	8017748 <dhcp_option>
 8017246:	4603      	mov	r3, r0
 8017248:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801724a:	89b8      	ldrh	r0, [r7, #12]
 801724c:	693b      	ldr	r3, [r7, #16]
 801724e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8017252:	687b      	ldr	r3, [r7, #4]
 8017254:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017256:	461a      	mov	r2, r3
 8017258:	f000 fad0 	bl	80177fc <dhcp_option_short>
 801725c:	4603      	mov	r3, r0
 801725e:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8017260:	89b8      	ldrh	r0, [r7, #12]
 8017262:	693b      	ldr	r3, [r7, #16]
 8017264:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8017268:	2303      	movs	r3, #3
 801726a:	2237      	movs	r2, #55	; 0x37
 801726c:	f000 fa6c 	bl	8017748 <dhcp_option>
 8017270:	4603      	mov	r3, r0
 8017272:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8017274:	2300      	movs	r3, #0
 8017276:	77bb      	strb	r3, [r7, #30]
 8017278:	e00e      	b.n	8017298 <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801727a:	89b8      	ldrh	r0, [r7, #12]
 801727c:	693b      	ldr	r3, [r7, #16]
 801727e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8017282:	7fbb      	ldrb	r3, [r7, #30]
 8017284:	4a2a      	ldr	r2, [pc, #168]	; (8017330 <dhcp_renew+0x12c>)
 8017286:	5cd3      	ldrb	r3, [r2, r3]
 8017288:	461a      	mov	r2, r3
 801728a:	f000 fa91 	bl	80177b0 <dhcp_option_byte>
 801728e:	4603      	mov	r3, r0
 8017290:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8017292:	7fbb      	ldrb	r3, [r7, #30]
 8017294:	3301      	adds	r3, #1
 8017296:	77bb      	strb	r3, [r7, #30]
 8017298:	7fbb      	ldrb	r3, [r7, #30]
 801729a:	2b02      	cmp	r3, #2
 801729c:	d9ed      	bls.n	801727a <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801729e:	89b8      	ldrh	r0, [r7, #12]
 80172a0:	693b      	ldr	r3, [r7, #16]
 80172a2:	33f0      	adds	r3, #240	; 0xf0
 80172a4:	697a      	ldr	r2, [r7, #20]
 80172a6:	4619      	mov	r1, r3
 80172a8:	f000 ff96 	bl	80181d8 <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80172ac:	4b21      	ldr	r3, [pc, #132]	; (8017334 <dhcp_renew+0x130>)
 80172ae:	6818      	ldr	r0, [r3, #0]
 80172b0:	69bb      	ldr	r3, [r7, #24]
 80172b2:	f103 0218 	add.w	r2, r3, #24
 80172b6:	687b      	ldr	r3, [r7, #4]
 80172b8:	9300      	str	r3, [sp, #0]
 80172ba:	2343      	movs	r3, #67	; 0x43
 80172bc:	6979      	ldr	r1, [r7, #20]
 80172be:	f7fe fe8f 	bl	8015fe0 <udp_sendto_if>
 80172c2:	4603      	mov	r3, r0
 80172c4:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80172c6:	6978      	ldr	r0, [r7, #20]
 80172c8:	f7f8 ffcc 	bl	8010264 <pbuf_free>
 80172cc:	e001      	b.n	80172d2 <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80172ce:	23ff      	movs	r3, #255	; 0xff
 80172d0:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80172d2:	69bb      	ldr	r3, [r7, #24]
 80172d4:	799b      	ldrb	r3, [r3, #6]
 80172d6:	2bff      	cmp	r3, #255	; 0xff
 80172d8:	d005      	beq.n	80172e6 <dhcp_renew+0xe2>
    dhcp->tries++;
 80172da:	69bb      	ldr	r3, [r7, #24]
 80172dc:	799b      	ldrb	r3, [r3, #6]
 80172de:	3301      	adds	r3, #1
 80172e0:	b2da      	uxtb	r2, r3
 80172e2:	69bb      	ldr	r3, [r7, #24]
 80172e4:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 80172e6:	69bb      	ldr	r3, [r7, #24]
 80172e8:	799b      	ldrb	r3, [r3, #6]
 80172ea:	2b09      	cmp	r3, #9
 80172ec:	d80a      	bhi.n	8017304 <dhcp_renew+0x100>
 80172ee:	69bb      	ldr	r3, [r7, #24]
 80172f0:	799b      	ldrb	r3, [r3, #6]
 80172f2:	b29b      	uxth	r3, r3
 80172f4:	461a      	mov	r2, r3
 80172f6:	0152      	lsls	r2, r2, #5
 80172f8:	1ad2      	subs	r2, r2, r3
 80172fa:	0092      	lsls	r2, r2, #2
 80172fc:	4413      	add	r3, r2
 80172fe:	011b      	lsls	r3, r3, #4
 8017300:	b29b      	uxth	r3, r3
 8017302:	e001      	b.n	8017308 <dhcp_renew+0x104>
 8017304:	f644 6320 	movw	r3, #20000	; 0x4e20
 8017308:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801730a:	89fb      	ldrh	r3, [r7, #14]
 801730c:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8017310:	4a09      	ldr	r2, [pc, #36]	; (8017338 <dhcp_renew+0x134>)
 8017312:	fb82 1203 	smull	r1, r2, r2, r3
 8017316:	1152      	asrs	r2, r2, #5
 8017318:	17db      	asrs	r3, r3, #31
 801731a:	1ad3      	subs	r3, r2, r3
 801731c:	b29a      	uxth	r2, r3
 801731e:	69bb      	ldr	r3, [r7, #24]
 8017320:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8017322:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8017326:	4618      	mov	r0, r3
 8017328:	3720      	adds	r7, #32
 801732a:	46bd      	mov	sp, r7
 801732c:	bd80      	pop	{r7, pc}
 801732e:	bf00      	nop
 8017330:	20000080 	.word	0x20000080
 8017334:	20000520 	.word	0x20000520
 8017338:	10624dd3 	.word	0x10624dd3

0801733c <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 801733c:	b580      	push	{r7, lr}
 801733e:	b08a      	sub	sp, #40	; 0x28
 8017340:	af02      	add	r7, sp, #8
 8017342:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8017344:	687b      	ldr	r3, [r7, #4]
 8017346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017348:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 801734a:	2104      	movs	r1, #4
 801734c:	69b8      	ldr	r0, [r7, #24]
 801734e:	f000 f9e1 	bl	8017714 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8017352:	f107 030c 	add.w	r3, r7, #12
 8017356:	2203      	movs	r2, #3
 8017358:	69b9      	ldr	r1, [r7, #24]
 801735a:	6878      	ldr	r0, [r7, #4]
 801735c:	f000 fe66 	bl	801802c <dhcp_create_msg>
 8017360:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8017362:	697b      	ldr	r3, [r7, #20]
 8017364:	2b00      	cmp	r3, #0
 8017366:	d04c      	beq.n	8017402 <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8017368:	697b      	ldr	r3, [r7, #20]
 801736a:	685b      	ldr	r3, [r3, #4]
 801736c:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801736e:	89b8      	ldrh	r0, [r7, #12]
 8017370:	693b      	ldr	r3, [r7, #16]
 8017372:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8017376:	2302      	movs	r3, #2
 8017378:	2239      	movs	r2, #57	; 0x39
 801737a:	f000 f9e5 	bl	8017748 <dhcp_option>
 801737e:	4603      	mov	r3, r0
 8017380:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8017382:	89b8      	ldrh	r0, [r7, #12]
 8017384:	693b      	ldr	r3, [r7, #16]
 8017386:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801738a:	687b      	ldr	r3, [r7, #4]
 801738c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801738e:	461a      	mov	r2, r3
 8017390:	f000 fa34 	bl	80177fc <dhcp_option_short>
 8017394:	4603      	mov	r3, r0
 8017396:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8017398:	89b8      	ldrh	r0, [r7, #12]
 801739a:	693b      	ldr	r3, [r7, #16]
 801739c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80173a0:	2303      	movs	r3, #3
 80173a2:	2237      	movs	r2, #55	; 0x37
 80173a4:	f000 f9d0 	bl	8017748 <dhcp_option>
 80173a8:	4603      	mov	r3, r0
 80173aa:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80173ac:	2300      	movs	r3, #0
 80173ae:	77bb      	strb	r3, [r7, #30]
 80173b0:	e00e      	b.n	80173d0 <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80173b2:	89b8      	ldrh	r0, [r7, #12]
 80173b4:	693b      	ldr	r3, [r7, #16]
 80173b6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80173ba:	7fbb      	ldrb	r3, [r7, #30]
 80173bc:	4a29      	ldr	r2, [pc, #164]	; (8017464 <dhcp_rebind+0x128>)
 80173be:	5cd3      	ldrb	r3, [r2, r3]
 80173c0:	461a      	mov	r2, r3
 80173c2:	f000 f9f5 	bl	80177b0 <dhcp_option_byte>
 80173c6:	4603      	mov	r3, r0
 80173c8:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80173ca:	7fbb      	ldrb	r3, [r7, #30]
 80173cc:	3301      	adds	r3, #1
 80173ce:	77bb      	strb	r3, [r7, #30]
 80173d0:	7fbb      	ldrb	r3, [r7, #30]
 80173d2:	2b02      	cmp	r3, #2
 80173d4:	d9ed      	bls.n	80173b2 <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80173d6:	89b8      	ldrh	r0, [r7, #12]
 80173d8:	693b      	ldr	r3, [r7, #16]
 80173da:	33f0      	adds	r3, #240	; 0xf0
 80173dc:	697a      	ldr	r2, [r7, #20]
 80173de:	4619      	mov	r1, r3
 80173e0:	f000 fefa 	bl	80181d8 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80173e4:	4b20      	ldr	r3, [pc, #128]	; (8017468 <dhcp_rebind+0x12c>)
 80173e6:	6818      	ldr	r0, [r3, #0]
 80173e8:	687b      	ldr	r3, [r7, #4]
 80173ea:	9300      	str	r3, [sp, #0]
 80173ec:	2343      	movs	r3, #67	; 0x43
 80173ee:	4a1f      	ldr	r2, [pc, #124]	; (801746c <dhcp_rebind+0x130>)
 80173f0:	6979      	ldr	r1, [r7, #20]
 80173f2:	f7fe fdf5 	bl	8015fe0 <udp_sendto_if>
 80173f6:	4603      	mov	r3, r0
 80173f8:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80173fa:	6978      	ldr	r0, [r7, #20]
 80173fc:	f7f8 ff32 	bl	8010264 <pbuf_free>
 8017400:	e001      	b.n	8017406 <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8017402:	23ff      	movs	r3, #255	; 0xff
 8017404:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8017406:	69bb      	ldr	r3, [r7, #24]
 8017408:	799b      	ldrb	r3, [r3, #6]
 801740a:	2bff      	cmp	r3, #255	; 0xff
 801740c:	d005      	beq.n	801741a <dhcp_rebind+0xde>
    dhcp->tries++;
 801740e:	69bb      	ldr	r3, [r7, #24]
 8017410:	799b      	ldrb	r3, [r3, #6]
 8017412:	3301      	adds	r3, #1
 8017414:	b2da      	uxtb	r2, r3
 8017416:	69bb      	ldr	r3, [r7, #24]
 8017418:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 801741a:	69bb      	ldr	r3, [r7, #24]
 801741c:	799b      	ldrb	r3, [r3, #6]
 801741e:	2b09      	cmp	r3, #9
 8017420:	d80a      	bhi.n	8017438 <dhcp_rebind+0xfc>
 8017422:	69bb      	ldr	r3, [r7, #24]
 8017424:	799b      	ldrb	r3, [r3, #6]
 8017426:	b29b      	uxth	r3, r3
 8017428:	461a      	mov	r2, r3
 801742a:	0152      	lsls	r2, r2, #5
 801742c:	1ad2      	subs	r2, r2, r3
 801742e:	0092      	lsls	r2, r2, #2
 8017430:	4413      	add	r3, r2
 8017432:	00db      	lsls	r3, r3, #3
 8017434:	b29b      	uxth	r3, r3
 8017436:	e001      	b.n	801743c <dhcp_rebind+0x100>
 8017438:	f242 7310 	movw	r3, #10000	; 0x2710
 801743c:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801743e:	89fb      	ldrh	r3, [r7, #14]
 8017440:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8017444:	4a0a      	ldr	r2, [pc, #40]	; (8017470 <dhcp_rebind+0x134>)
 8017446:	fb82 1203 	smull	r1, r2, r2, r3
 801744a:	1152      	asrs	r2, r2, #5
 801744c:	17db      	asrs	r3, r3, #31
 801744e:	1ad3      	subs	r3, r2, r3
 8017450:	b29a      	uxth	r2, r3
 8017452:	69bb      	ldr	r3, [r7, #24]
 8017454:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8017456:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801745a:	4618      	mov	r0, r3
 801745c:	3720      	adds	r7, #32
 801745e:	46bd      	mov	sp, r7
 8017460:	bd80      	pop	{r7, pc}
 8017462:	bf00      	nop
 8017464:	20000080 	.word	0x20000080
 8017468:	20000520 	.word	0x20000520
 801746c:	08023f44 	.word	0x08023f44
 8017470:	10624dd3 	.word	0x10624dd3

08017474 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 8017474:	b5b0      	push	{r4, r5, r7, lr}
 8017476:	b08a      	sub	sp, #40	; 0x28
 8017478:	af02      	add	r7, sp, #8
 801747a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801747c:	687b      	ldr	r3, [r7, #4]
 801747e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017480:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 8017482:	2103      	movs	r1, #3
 8017484:	69b8      	ldr	r0, [r7, #24]
 8017486:	f000 f945 	bl	8017714 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801748a:	f107 030c 	add.w	r3, r7, #12
 801748e:	2203      	movs	r2, #3
 8017490:	69b9      	ldr	r1, [r7, #24]
 8017492:	6878      	ldr	r0, [r7, #4]
 8017494:	f000 fdca 	bl	801802c <dhcp_create_msg>
 8017498:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801749a:	697b      	ldr	r3, [r7, #20]
 801749c:	2b00      	cmp	r3, #0
 801749e:	d066      	beq.n	801756e <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80174a0:	697b      	ldr	r3, [r7, #20]
 80174a2:	685b      	ldr	r3, [r3, #4]
 80174a4:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80174a6:	89b8      	ldrh	r0, [r7, #12]
 80174a8:	693b      	ldr	r3, [r7, #16]
 80174aa:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80174ae:	2302      	movs	r3, #2
 80174b0:	2239      	movs	r2, #57	; 0x39
 80174b2:	f000 f949 	bl	8017748 <dhcp_option>
 80174b6:	4603      	mov	r3, r0
 80174b8:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 80174ba:	89b8      	ldrh	r0, [r7, #12]
 80174bc:	693b      	ldr	r3, [r7, #16]
 80174be:	33f0      	adds	r3, #240	; 0xf0
 80174c0:	f44f 7210 	mov.w	r2, #576	; 0x240
 80174c4:	4619      	mov	r1, r3
 80174c6:	f000 f999 	bl	80177fc <dhcp_option_short>
 80174ca:	4603      	mov	r3, r0
 80174cc:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 80174ce:	89b8      	ldrh	r0, [r7, #12]
 80174d0:	693b      	ldr	r3, [r7, #16]
 80174d2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80174d6:	2304      	movs	r3, #4
 80174d8:	2232      	movs	r2, #50	; 0x32
 80174da:	f000 f935 	bl	8017748 <dhcp_option>
 80174de:	4603      	mov	r3, r0
 80174e0:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 80174e2:	89bc      	ldrh	r4, [r7, #12]
 80174e4:	693b      	ldr	r3, [r7, #16]
 80174e6:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 80174ea:	69bb      	ldr	r3, [r7, #24]
 80174ec:	69db      	ldr	r3, [r3, #28]
 80174ee:	4618      	mov	r0, r3
 80174f0:	f7f7 fc31 	bl	800ed56 <lwip_htonl>
 80174f4:	4603      	mov	r3, r0
 80174f6:	461a      	mov	r2, r3
 80174f8:	4629      	mov	r1, r5
 80174fa:	4620      	mov	r0, r4
 80174fc:	f000 f9b0 	bl	8017860 <dhcp_option_long>
 8017500:	4603      	mov	r3, r0
 8017502:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8017504:	89b8      	ldrh	r0, [r7, #12]
 8017506:	693b      	ldr	r3, [r7, #16]
 8017508:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801750c:	2303      	movs	r3, #3
 801750e:	2237      	movs	r2, #55	; 0x37
 8017510:	f000 f91a 	bl	8017748 <dhcp_option>
 8017514:	4603      	mov	r3, r0
 8017516:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8017518:	2300      	movs	r3, #0
 801751a:	77bb      	strb	r3, [r7, #30]
 801751c:	e00e      	b.n	801753c <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801751e:	89b8      	ldrh	r0, [r7, #12]
 8017520:	693b      	ldr	r3, [r7, #16]
 8017522:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8017526:	7fbb      	ldrb	r3, [r7, #30]
 8017528:	4a29      	ldr	r2, [pc, #164]	; (80175d0 <dhcp_reboot+0x15c>)
 801752a:	5cd3      	ldrb	r3, [r2, r3]
 801752c:	461a      	mov	r2, r3
 801752e:	f000 f93f 	bl	80177b0 <dhcp_option_byte>
 8017532:	4603      	mov	r3, r0
 8017534:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8017536:	7fbb      	ldrb	r3, [r7, #30]
 8017538:	3301      	adds	r3, #1
 801753a:	77bb      	strb	r3, [r7, #30]
 801753c:	7fbb      	ldrb	r3, [r7, #30]
 801753e:	2b02      	cmp	r3, #2
 8017540:	d9ed      	bls.n	801751e <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8017542:	89b8      	ldrh	r0, [r7, #12]
 8017544:	693b      	ldr	r3, [r7, #16]
 8017546:	33f0      	adds	r3, #240	; 0xf0
 8017548:	697a      	ldr	r2, [r7, #20]
 801754a:	4619      	mov	r1, r3
 801754c:	f000 fe44 	bl	80181d8 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8017550:	4b20      	ldr	r3, [pc, #128]	; (80175d4 <dhcp_reboot+0x160>)
 8017552:	6818      	ldr	r0, [r3, #0]
 8017554:	687b      	ldr	r3, [r7, #4]
 8017556:	9300      	str	r3, [sp, #0]
 8017558:	2343      	movs	r3, #67	; 0x43
 801755a:	4a1f      	ldr	r2, [pc, #124]	; (80175d8 <dhcp_reboot+0x164>)
 801755c:	6979      	ldr	r1, [r7, #20]
 801755e:	f7fe fd3f 	bl	8015fe0 <udp_sendto_if>
 8017562:	4603      	mov	r3, r0
 8017564:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8017566:	6978      	ldr	r0, [r7, #20]
 8017568:	f7f8 fe7c 	bl	8010264 <pbuf_free>
 801756c:	e001      	b.n	8017572 <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801756e:	23ff      	movs	r3, #255	; 0xff
 8017570:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8017572:	69bb      	ldr	r3, [r7, #24]
 8017574:	799b      	ldrb	r3, [r3, #6]
 8017576:	2bff      	cmp	r3, #255	; 0xff
 8017578:	d005      	beq.n	8017586 <dhcp_reboot+0x112>
    dhcp->tries++;
 801757a:	69bb      	ldr	r3, [r7, #24]
 801757c:	799b      	ldrb	r3, [r3, #6]
 801757e:	3301      	adds	r3, #1
 8017580:	b2da      	uxtb	r2, r3
 8017582:	69bb      	ldr	r3, [r7, #24]
 8017584:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8017586:	69bb      	ldr	r3, [r7, #24]
 8017588:	799b      	ldrb	r3, [r3, #6]
 801758a:	2b09      	cmp	r3, #9
 801758c:	d80a      	bhi.n	80175a4 <dhcp_reboot+0x130>
 801758e:	69bb      	ldr	r3, [r7, #24]
 8017590:	799b      	ldrb	r3, [r3, #6]
 8017592:	b29b      	uxth	r3, r3
 8017594:	461a      	mov	r2, r3
 8017596:	0152      	lsls	r2, r2, #5
 8017598:	1ad2      	subs	r2, r2, r3
 801759a:	0092      	lsls	r2, r2, #2
 801759c:	4413      	add	r3, r2
 801759e:	00db      	lsls	r3, r3, #3
 80175a0:	b29b      	uxth	r3, r3
 80175a2:	e001      	b.n	80175a8 <dhcp_reboot+0x134>
 80175a4:	f242 7310 	movw	r3, #10000	; 0x2710
 80175a8:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80175aa:	89fb      	ldrh	r3, [r7, #14]
 80175ac:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80175b0:	4a0a      	ldr	r2, [pc, #40]	; (80175dc <dhcp_reboot+0x168>)
 80175b2:	fb82 1203 	smull	r1, r2, r2, r3
 80175b6:	1152      	asrs	r2, r2, #5
 80175b8:	17db      	asrs	r3, r3, #31
 80175ba:	1ad3      	subs	r3, r2, r3
 80175bc:	b29a      	uxth	r2, r3
 80175be:	69bb      	ldr	r3, [r7, #24]
 80175c0:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80175c2:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80175c6:	4618      	mov	r0, r3
 80175c8:	3720      	adds	r7, #32
 80175ca:	46bd      	mov	sp, r7
 80175cc:	bdb0      	pop	{r4, r5, r7, pc}
 80175ce:	bf00      	nop
 80175d0:	20000080 	.word	0x20000080
 80175d4:	20000520 	.word	0x20000520
 80175d8:	08023f44 	.word	0x08023f44
 80175dc:	10624dd3 	.word	0x10624dd3

080175e0 <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 80175e0:	b5b0      	push	{r4, r5, r7, lr}
 80175e2:	b08a      	sub	sp, #40	; 0x28
 80175e4:	af02      	add	r7, sp, #8
 80175e6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80175e8:	687b      	ldr	r3, [r7, #4]
 80175ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80175ec:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 80175ee:	69fb      	ldr	r3, [r7, #28]
 80175f0:	2b00      	cmp	r3, #0
 80175f2:	f000 8084 	beq.w	80176fe <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 80175f6:	69fb      	ldr	r3, [r7, #28]
 80175f8:	795b      	ldrb	r3, [r3, #5]
 80175fa:	2b00      	cmp	r3, #0
 80175fc:	f000 8081 	beq.w	8017702 <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 8017600:	69fb      	ldr	r3, [r7, #28]
 8017602:	699b      	ldr	r3, [r3, #24]
 8017604:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 8017606:	69fb      	ldr	r3, [r7, #28]
 8017608:	2200      	movs	r2, #0
 801760a:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 801760c:	69fb      	ldr	r3, [r7, #28]
 801760e:	2200      	movs	r2, #0
 8017610:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8017612:	69fb      	ldr	r3, [r7, #28]
 8017614:	2200      	movs	r2, #0
 8017616:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8017618:	69fb      	ldr	r3, [r7, #28]
 801761a:	2200      	movs	r2, #0
 801761c:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 801761e:	69fb      	ldr	r3, [r7, #28]
 8017620:	2200      	movs	r2, #0
 8017622:	631a      	str	r2, [r3, #48]	; 0x30
 8017624:	69fb      	ldr	r3, [r7, #28]
 8017626:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8017628:	69fb      	ldr	r3, [r7, #28]
 801762a:	62da      	str	r2, [r3, #44]	; 0x2c
 801762c:	69fb      	ldr	r3, [r7, #28]
 801762e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017630:	69fb      	ldr	r3, [r7, #28]
 8017632:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 8017634:	69fb      	ldr	r3, [r7, #28]
 8017636:	2200      	movs	r2, #0
 8017638:	829a      	strh	r2, [r3, #20]
 801763a:	69fb      	ldr	r3, [r7, #28]
 801763c:	8a9a      	ldrh	r2, [r3, #20]
 801763e:	69fb      	ldr	r3, [r7, #28]
 8017640:	825a      	strh	r2, [r3, #18]
 8017642:	69fb      	ldr	r3, [r7, #28]
 8017644:	8a5a      	ldrh	r2, [r3, #18]
 8017646:	69fb      	ldr	r3, [r7, #28]
 8017648:	821a      	strh	r2, [r3, #16]
 801764a:	69fb      	ldr	r3, [r7, #28]
 801764c:	8a1a      	ldrh	r2, [r3, #16]
 801764e:	69fb      	ldr	r3, [r7, #28]
 8017650:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 8017652:	6878      	ldr	r0, [r7, #4]
 8017654:	f000 fdee 	bl	8018234 <dhcp_supplied_address>
 8017658:	4603      	mov	r3, r0
 801765a:	2b00      	cmp	r3, #0
 801765c:	d03b      	beq.n	80176d6 <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 801765e:	f107 030e 	add.w	r3, r7, #14
 8017662:	2207      	movs	r2, #7
 8017664:	69f9      	ldr	r1, [r7, #28]
 8017666:	6878      	ldr	r0, [r7, #4]
 8017668:	f000 fce0 	bl	801802c <dhcp_create_msg>
 801766c:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 801766e:	69bb      	ldr	r3, [r7, #24]
 8017670:	2b00      	cmp	r3, #0
 8017672:	d030      	beq.n	80176d6 <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8017674:	69bb      	ldr	r3, [r7, #24]
 8017676:	685b      	ldr	r3, [r3, #4]
 8017678:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 801767a:	89f8      	ldrh	r0, [r7, #14]
 801767c:	697b      	ldr	r3, [r7, #20]
 801767e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8017682:	2304      	movs	r3, #4
 8017684:	2236      	movs	r2, #54	; 0x36
 8017686:	f000 f85f 	bl	8017748 <dhcp_option>
 801768a:	4603      	mov	r3, r0
 801768c:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 801768e:	89fc      	ldrh	r4, [r7, #14]
 8017690:	697b      	ldr	r3, [r7, #20]
 8017692:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8017696:	693b      	ldr	r3, [r7, #16]
 8017698:	4618      	mov	r0, r3
 801769a:	f7f7 fb5c 	bl	800ed56 <lwip_htonl>
 801769e:	4603      	mov	r3, r0
 80176a0:	461a      	mov	r2, r3
 80176a2:	4629      	mov	r1, r5
 80176a4:	4620      	mov	r0, r4
 80176a6:	f000 f8db 	bl	8017860 <dhcp_option_long>
 80176aa:	4603      	mov	r3, r0
 80176ac:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80176ae:	89f8      	ldrh	r0, [r7, #14]
 80176b0:	697b      	ldr	r3, [r7, #20]
 80176b2:	33f0      	adds	r3, #240	; 0xf0
 80176b4:	69ba      	ldr	r2, [r7, #24]
 80176b6:	4619      	mov	r1, r3
 80176b8:	f000 fd8e 	bl	80181d8 <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80176bc:	4b13      	ldr	r3, [pc, #76]	; (801770c <dhcp_release_and_stop+0x12c>)
 80176be:	6818      	ldr	r0, [r3, #0]
 80176c0:	f107 0210 	add.w	r2, r7, #16
 80176c4:	687b      	ldr	r3, [r7, #4]
 80176c6:	9300      	str	r3, [sp, #0]
 80176c8:	2343      	movs	r3, #67	; 0x43
 80176ca:	69b9      	ldr	r1, [r7, #24]
 80176cc:	f7fe fc88 	bl	8015fe0 <udp_sendto_if>
      pbuf_free(p_out);
 80176d0:	69b8      	ldr	r0, [r7, #24]
 80176d2:	f7f8 fdc7 	bl	8010264 <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 80176d6:	4b0e      	ldr	r3, [pc, #56]	; (8017710 <dhcp_release_and_stop+0x130>)
 80176d8:	4a0d      	ldr	r2, [pc, #52]	; (8017710 <dhcp_release_and_stop+0x130>)
 80176da:	490d      	ldr	r1, [pc, #52]	; (8017710 <dhcp_release_and_stop+0x130>)
 80176dc:	6878      	ldr	r0, [r7, #4]
 80176de:	f7f8 f969 	bl	800f9b4 <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 80176e2:	2100      	movs	r1, #0
 80176e4:	69f8      	ldr	r0, [r7, #28]
 80176e6:	f000 f815 	bl	8017714 <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 80176ea:	69fb      	ldr	r3, [r7, #28]
 80176ec:	791b      	ldrb	r3, [r3, #4]
 80176ee:	2b00      	cmp	r3, #0
 80176f0:	d008      	beq.n	8017704 <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 80176f2:	f7fe ffc1 	bl	8016678 <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 80176f6:	69fb      	ldr	r3, [r7, #28]
 80176f8:	2200      	movs	r2, #0
 80176fa:	711a      	strb	r2, [r3, #4]
 80176fc:	e002      	b.n	8017704 <dhcp_release_and_stop+0x124>
    return;
 80176fe:	bf00      	nop
 8017700:	e000      	b.n	8017704 <dhcp_release_and_stop+0x124>
    return;
 8017702:	bf00      	nop
  }
}
 8017704:	3720      	adds	r7, #32
 8017706:	46bd      	mov	sp, r7
 8017708:	bdb0      	pop	{r4, r5, r7, pc}
 801770a:	bf00      	nop
 801770c:	20000520 	.word	0x20000520
 8017710:	08023f40 	.word	0x08023f40

08017714 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 8017714:	b480      	push	{r7}
 8017716:	b083      	sub	sp, #12
 8017718:	af00      	add	r7, sp, #0
 801771a:	6078      	str	r0, [r7, #4]
 801771c:	460b      	mov	r3, r1
 801771e:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 8017720:	687b      	ldr	r3, [r7, #4]
 8017722:	795b      	ldrb	r3, [r3, #5]
 8017724:	78fa      	ldrb	r2, [r7, #3]
 8017726:	429a      	cmp	r2, r3
 8017728:	d008      	beq.n	801773c <dhcp_set_state+0x28>
    dhcp->state = new_state;
 801772a:	687b      	ldr	r3, [r7, #4]
 801772c:	78fa      	ldrb	r2, [r7, #3]
 801772e:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 8017730:	687b      	ldr	r3, [r7, #4]
 8017732:	2200      	movs	r2, #0
 8017734:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 8017736:	687b      	ldr	r3, [r7, #4]
 8017738:	2200      	movs	r2, #0
 801773a:	811a      	strh	r2, [r3, #8]
  }
}
 801773c:	bf00      	nop
 801773e:	370c      	adds	r7, #12
 8017740:	46bd      	mov	sp, r7
 8017742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017746:	4770      	bx	lr

08017748 <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 8017748:	b580      	push	{r7, lr}
 801774a:	b082      	sub	sp, #8
 801774c:	af00      	add	r7, sp, #0
 801774e:	6039      	str	r1, [r7, #0]
 8017750:	4611      	mov	r1, r2
 8017752:	461a      	mov	r2, r3
 8017754:	4603      	mov	r3, r0
 8017756:	80fb      	strh	r3, [r7, #6]
 8017758:	460b      	mov	r3, r1
 801775a:	717b      	strb	r3, [r7, #5]
 801775c:	4613      	mov	r3, r2
 801775e:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8017760:	88fa      	ldrh	r2, [r7, #6]
 8017762:	793b      	ldrb	r3, [r7, #4]
 8017764:	4413      	add	r3, r2
 8017766:	3302      	adds	r3, #2
 8017768:	2b44      	cmp	r3, #68	; 0x44
 801776a:	d906      	bls.n	801777a <dhcp_option+0x32>
 801776c:	4b0d      	ldr	r3, [pc, #52]	; (80177a4 <dhcp_option+0x5c>)
 801776e:	f240 529a 	movw	r2, #1434	; 0x59a
 8017772:	490d      	ldr	r1, [pc, #52]	; (80177a8 <dhcp_option+0x60>)
 8017774:	480d      	ldr	r0, [pc, #52]	; (80177ac <dhcp_option+0x64>)
 8017776:	f003 fdf3 	bl	801b360 <iprintf>
  options[options_out_len++] = option_type;
 801777a:	88fb      	ldrh	r3, [r7, #6]
 801777c:	1c5a      	adds	r2, r3, #1
 801777e:	80fa      	strh	r2, [r7, #6]
 8017780:	461a      	mov	r2, r3
 8017782:	683b      	ldr	r3, [r7, #0]
 8017784:	4413      	add	r3, r2
 8017786:	797a      	ldrb	r2, [r7, #5]
 8017788:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 801778a:	88fb      	ldrh	r3, [r7, #6]
 801778c:	1c5a      	adds	r2, r3, #1
 801778e:	80fa      	strh	r2, [r7, #6]
 8017790:	461a      	mov	r2, r3
 8017792:	683b      	ldr	r3, [r7, #0]
 8017794:	4413      	add	r3, r2
 8017796:	793a      	ldrb	r2, [r7, #4]
 8017798:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 801779a:	88fb      	ldrh	r3, [r7, #6]
}
 801779c:	4618      	mov	r0, r3
 801779e:	3708      	adds	r7, #8
 80177a0:	46bd      	mov	sp, r7
 80177a2:	bd80      	pop	{r7, pc}
 80177a4:	08022e84 	.word	0x08022e84
 80177a8:	08023018 	.word	0x08023018
 80177ac:	08022ee4 	.word	0x08022ee4

080177b0 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 80177b0:	b580      	push	{r7, lr}
 80177b2:	b082      	sub	sp, #8
 80177b4:	af00      	add	r7, sp, #0
 80177b6:	4603      	mov	r3, r0
 80177b8:	6039      	str	r1, [r7, #0]
 80177ba:	80fb      	strh	r3, [r7, #6]
 80177bc:	4613      	mov	r3, r2
 80177be:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 80177c0:	88fb      	ldrh	r3, [r7, #6]
 80177c2:	2b43      	cmp	r3, #67	; 0x43
 80177c4:	d906      	bls.n	80177d4 <dhcp_option_byte+0x24>
 80177c6:	4b0a      	ldr	r3, [pc, #40]	; (80177f0 <dhcp_option_byte+0x40>)
 80177c8:	f240 52a6 	movw	r2, #1446	; 0x5a6
 80177cc:	4909      	ldr	r1, [pc, #36]	; (80177f4 <dhcp_option_byte+0x44>)
 80177ce:	480a      	ldr	r0, [pc, #40]	; (80177f8 <dhcp_option_byte+0x48>)
 80177d0:	f003 fdc6 	bl	801b360 <iprintf>
  options[options_out_len++] = value;
 80177d4:	88fb      	ldrh	r3, [r7, #6]
 80177d6:	1c5a      	adds	r2, r3, #1
 80177d8:	80fa      	strh	r2, [r7, #6]
 80177da:	461a      	mov	r2, r3
 80177dc:	683b      	ldr	r3, [r7, #0]
 80177de:	4413      	add	r3, r2
 80177e0:	797a      	ldrb	r2, [r7, #5]
 80177e2:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 80177e4:	88fb      	ldrh	r3, [r7, #6]
}
 80177e6:	4618      	mov	r0, r3
 80177e8:	3708      	adds	r7, #8
 80177ea:	46bd      	mov	sp, r7
 80177ec:	bd80      	pop	{r7, pc}
 80177ee:	bf00      	nop
 80177f0:	08022e84 	.word	0x08022e84
 80177f4:	0802305c 	.word	0x0802305c
 80177f8:	08022ee4 	.word	0x08022ee4

080177fc <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 80177fc:	b580      	push	{r7, lr}
 80177fe:	b082      	sub	sp, #8
 8017800:	af00      	add	r7, sp, #0
 8017802:	4603      	mov	r3, r0
 8017804:	6039      	str	r1, [r7, #0]
 8017806:	80fb      	strh	r3, [r7, #6]
 8017808:	4613      	mov	r3, r2
 801780a:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 801780c:	88fb      	ldrh	r3, [r7, #6]
 801780e:	3302      	adds	r3, #2
 8017810:	2b44      	cmp	r3, #68	; 0x44
 8017812:	d906      	bls.n	8017822 <dhcp_option_short+0x26>
 8017814:	4b0f      	ldr	r3, [pc, #60]	; (8017854 <dhcp_option_short+0x58>)
 8017816:	f240 52ae 	movw	r2, #1454	; 0x5ae
 801781a:	490f      	ldr	r1, [pc, #60]	; (8017858 <dhcp_option_short+0x5c>)
 801781c:	480f      	ldr	r0, [pc, #60]	; (801785c <dhcp_option_short+0x60>)
 801781e:	f003 fd9f 	bl	801b360 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8017822:	88bb      	ldrh	r3, [r7, #4]
 8017824:	0a1b      	lsrs	r3, r3, #8
 8017826:	b29a      	uxth	r2, r3
 8017828:	88fb      	ldrh	r3, [r7, #6]
 801782a:	1c59      	adds	r1, r3, #1
 801782c:	80f9      	strh	r1, [r7, #6]
 801782e:	4619      	mov	r1, r3
 8017830:	683b      	ldr	r3, [r7, #0]
 8017832:	440b      	add	r3, r1
 8017834:	b2d2      	uxtb	r2, r2
 8017836:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 8017838:	88fb      	ldrh	r3, [r7, #6]
 801783a:	1c5a      	adds	r2, r3, #1
 801783c:	80fa      	strh	r2, [r7, #6]
 801783e:	461a      	mov	r2, r3
 8017840:	683b      	ldr	r3, [r7, #0]
 8017842:	4413      	add	r3, r2
 8017844:	88ba      	ldrh	r2, [r7, #4]
 8017846:	b2d2      	uxtb	r2, r2
 8017848:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 801784a:	88fb      	ldrh	r3, [r7, #6]
}
 801784c:	4618      	mov	r0, r3
 801784e:	3708      	adds	r7, #8
 8017850:	46bd      	mov	sp, r7
 8017852:	bd80      	pop	{r7, pc}
 8017854:	08022e84 	.word	0x08022e84
 8017858:	08023094 	.word	0x08023094
 801785c:	08022ee4 	.word	0x08022ee4

08017860 <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 8017860:	b580      	push	{r7, lr}
 8017862:	b084      	sub	sp, #16
 8017864:	af00      	add	r7, sp, #0
 8017866:	4603      	mov	r3, r0
 8017868:	60b9      	str	r1, [r7, #8]
 801786a:	607a      	str	r2, [r7, #4]
 801786c:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 801786e:	89fb      	ldrh	r3, [r7, #14]
 8017870:	3304      	adds	r3, #4
 8017872:	2b44      	cmp	r3, #68	; 0x44
 8017874:	d906      	bls.n	8017884 <dhcp_option_long+0x24>
 8017876:	4b19      	ldr	r3, [pc, #100]	; (80178dc <dhcp_option_long+0x7c>)
 8017878:	f240 52b7 	movw	r2, #1463	; 0x5b7
 801787c:	4918      	ldr	r1, [pc, #96]	; (80178e0 <dhcp_option_long+0x80>)
 801787e:	4819      	ldr	r0, [pc, #100]	; (80178e4 <dhcp_option_long+0x84>)
 8017880:	f003 fd6e 	bl	801b360 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 8017884:	687b      	ldr	r3, [r7, #4]
 8017886:	0e1a      	lsrs	r2, r3, #24
 8017888:	89fb      	ldrh	r3, [r7, #14]
 801788a:	1c59      	adds	r1, r3, #1
 801788c:	81f9      	strh	r1, [r7, #14]
 801788e:	4619      	mov	r1, r3
 8017890:	68bb      	ldr	r3, [r7, #8]
 8017892:	440b      	add	r3, r1
 8017894:	b2d2      	uxtb	r2, r2
 8017896:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 8017898:	687b      	ldr	r3, [r7, #4]
 801789a:	0c1a      	lsrs	r2, r3, #16
 801789c:	89fb      	ldrh	r3, [r7, #14]
 801789e:	1c59      	adds	r1, r3, #1
 80178a0:	81f9      	strh	r1, [r7, #14]
 80178a2:	4619      	mov	r1, r3
 80178a4:	68bb      	ldr	r3, [r7, #8]
 80178a6:	440b      	add	r3, r1
 80178a8:	b2d2      	uxtb	r2, r2
 80178aa:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 80178ac:	687b      	ldr	r3, [r7, #4]
 80178ae:	0a1a      	lsrs	r2, r3, #8
 80178b0:	89fb      	ldrh	r3, [r7, #14]
 80178b2:	1c59      	adds	r1, r3, #1
 80178b4:	81f9      	strh	r1, [r7, #14]
 80178b6:	4619      	mov	r1, r3
 80178b8:	68bb      	ldr	r3, [r7, #8]
 80178ba:	440b      	add	r3, r1
 80178bc:	b2d2      	uxtb	r2, r2
 80178be:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 80178c0:	89fb      	ldrh	r3, [r7, #14]
 80178c2:	1c5a      	adds	r2, r3, #1
 80178c4:	81fa      	strh	r2, [r7, #14]
 80178c6:	461a      	mov	r2, r3
 80178c8:	68bb      	ldr	r3, [r7, #8]
 80178ca:	4413      	add	r3, r2
 80178cc:	687a      	ldr	r2, [r7, #4]
 80178ce:	b2d2      	uxtb	r2, r2
 80178d0:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 80178d2:	89fb      	ldrh	r3, [r7, #14]
}
 80178d4:	4618      	mov	r0, r3
 80178d6:	3710      	adds	r7, #16
 80178d8:	46bd      	mov	sp, r7
 80178da:	bd80      	pop	{r7, pc}
 80178dc:	08022e84 	.word	0x08022e84
 80178e0:	080230d0 	.word	0x080230d0
 80178e4:	08022ee4 	.word	0x08022ee4

080178e8 <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 80178e8:	b580      	push	{r7, lr}
 80178ea:	b090      	sub	sp, #64	; 0x40
 80178ec:	af00      	add	r7, sp, #0
 80178ee:	6078      	str	r0, [r7, #4]
 80178f0:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 80178f2:	2300      	movs	r3, #0
 80178f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  int parse_sname_as_options = 0;
 80178f6:	2300      	movs	r3, #0
 80178f8:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 80178fa:	2208      	movs	r2, #8
 80178fc:	2100      	movs	r1, #0
 80178fe:	48be      	ldr	r0, [pc, #760]	; (8017bf8 <dhcp_parse_reply+0x310>)
 8017900:	f003 f812 	bl	801a928 <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 8017904:	687b      	ldr	r3, [r7, #4]
 8017906:	895b      	ldrh	r3, [r3, #10]
 8017908:	2b2b      	cmp	r3, #43	; 0x2b
 801790a:	d802      	bhi.n	8017912 <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 801790c:	f06f 0301 	mvn.w	r3, #1
 8017910:	e2a8      	b.n	8017e64 <dhcp_parse_reply+0x57c>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 8017912:	687b      	ldr	r3, [r7, #4]
 8017914:	685b      	ldr	r3, [r3, #4]
 8017916:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 8017918:	23f0      	movs	r3, #240	; 0xf0
 801791a:	86fb      	strh	r3, [r7, #54]	; 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 801791c:	687b      	ldr	r3, [r7, #4]
 801791e:	891b      	ldrh	r3, [r3, #8]
 8017920:	86bb      	strh	r3, [r7, #52]	; 0x34
again:
  q = p;
 8017922:	687b      	ldr	r3, [r7, #4]
 8017924:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 8017926:	e00c      	b.n	8017942 <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 8017928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801792a:	895b      	ldrh	r3, [r3, #10]
 801792c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801792e:	1ad3      	subs	r3, r2, r3
 8017930:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 8017932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017934:	895b      	ldrh	r3, [r3, #10]
 8017936:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8017938:	1ad3      	subs	r3, r2, r3
 801793a:	86bb      	strh	r3, [r7, #52]	; 0x34
    q = q->next;
 801793c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801793e:	681b      	ldr	r3, [r3, #0]
 8017940:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 8017942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017944:	2b00      	cmp	r3, #0
 8017946:	d004      	beq.n	8017952 <dhcp_parse_reply+0x6a>
 8017948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801794a:	895b      	ldrh	r3, [r3, #10]
 801794c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801794e:	429a      	cmp	r2, r3
 8017950:	d2ea      	bcs.n	8017928 <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 8017952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017954:	2b00      	cmp	r3, #0
 8017956:	d102      	bne.n	801795e <dhcp_parse_reply+0x76>
    return ERR_BUF;
 8017958:	f06f 0301 	mvn.w	r3, #1
 801795c:	e282      	b.n	8017e64 <dhcp_parse_reply+0x57c>
  }
  offset = options_idx;
 801795e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8017960:	877b      	strh	r3, [r7, #58]	; 0x3a
  offset_max = options_idx_max;
 8017962:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8017964:	873b      	strh	r3, [r7, #56]	; 0x38
  options = (u8_t *)q->payload;
 8017966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017968:	685b      	ldr	r3, [r3, #4]
 801796a:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 801796c:	e23a      	b.n	8017de4 <dhcp_parse_reply+0x4fc>
    u8_t op = options[offset];
 801796e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8017970:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8017972:	4413      	add	r3, r2
 8017974:	781b      	ldrb	r3, [r3, #0]
 8017976:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 8017978:	2300      	movs	r3, #0
 801797a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    int decode_idx = -1;
 801797e:	f04f 33ff 	mov.w	r3, #4294967295
 8017982:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 8017984:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8017986:	3302      	adds	r3, #2
 8017988:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 801798a:	8bfa      	ldrh	r2, [r7, #30]
 801798c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801798e:	429a      	cmp	r2, r3
 8017990:	d202      	bcs.n	8017998 <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 8017992:	f06f 0301 	mvn.w	r3, #1
 8017996:	e265      	b.n	8017e64 <dhcp_parse_reply+0x57c>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 8017998:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801799a:	3301      	adds	r3, #1
 801799c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801799e:	8952      	ldrh	r2, [r2, #10]
 80179a0:	4293      	cmp	r3, r2
 80179a2:	da07      	bge.n	80179b4 <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 80179a4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80179a6:	3301      	adds	r3, #1
 80179a8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80179aa:	4413      	add	r3, r2
 80179ac:	781b      	ldrb	r3, [r3, #0]
 80179ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80179b2:	e00b      	b.n	80179cc <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 80179b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80179b6:	681b      	ldr	r3, [r3, #0]
 80179b8:	2b00      	cmp	r3, #0
 80179ba:	d004      	beq.n	80179c6 <dhcp_parse_reply+0xde>
 80179bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80179be:	681b      	ldr	r3, [r3, #0]
 80179c0:	685b      	ldr	r3, [r3, #4]
 80179c2:	781b      	ldrb	r3, [r3, #0]
 80179c4:	e000      	b.n	80179c8 <dhcp_parse_reply+0xe0>
 80179c6:	2300      	movs	r3, #0
 80179c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 80179cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80179d0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    switch (op) {
 80179d4:	7dfb      	ldrb	r3, [r7, #23]
 80179d6:	2b3b      	cmp	r3, #59	; 0x3b
 80179d8:	f200 812d 	bhi.w	8017c36 <dhcp_parse_reply+0x34e>
 80179dc:	a201      	add	r2, pc, #4	; (adr r2, 80179e4 <dhcp_parse_reply+0xfc>)
 80179de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80179e2:	bf00      	nop
 80179e4:	08017ad5 	.word	0x08017ad5
 80179e8:	08017ae5 	.word	0x08017ae5
 80179ec:	08017c37 	.word	0x08017c37
 80179f0:	08017b07 	.word	0x08017b07
 80179f4:	08017c37 	.word	0x08017c37
 80179f8:	08017c37 	.word	0x08017c37
 80179fc:	08017c37 	.word	0x08017c37
 8017a00:	08017c37 	.word	0x08017c37
 8017a04:	08017c37 	.word	0x08017c37
 8017a08:	08017c37 	.word	0x08017c37
 8017a0c:	08017c37 	.word	0x08017c37
 8017a10:	08017c37 	.word	0x08017c37
 8017a14:	08017c37 	.word	0x08017c37
 8017a18:	08017c37 	.word	0x08017c37
 8017a1c:	08017c37 	.word	0x08017c37
 8017a20:	08017c37 	.word	0x08017c37
 8017a24:	08017c37 	.word	0x08017c37
 8017a28:	08017c37 	.word	0x08017c37
 8017a2c:	08017c37 	.word	0x08017c37
 8017a30:	08017c37 	.word	0x08017c37
 8017a34:	08017c37 	.word	0x08017c37
 8017a38:	08017c37 	.word	0x08017c37
 8017a3c:	08017c37 	.word	0x08017c37
 8017a40:	08017c37 	.word	0x08017c37
 8017a44:	08017c37 	.word	0x08017c37
 8017a48:	08017c37 	.word	0x08017c37
 8017a4c:	08017c37 	.word	0x08017c37
 8017a50:	08017c37 	.word	0x08017c37
 8017a54:	08017c37 	.word	0x08017c37
 8017a58:	08017c37 	.word	0x08017c37
 8017a5c:	08017c37 	.word	0x08017c37
 8017a60:	08017c37 	.word	0x08017c37
 8017a64:	08017c37 	.word	0x08017c37
 8017a68:	08017c37 	.word	0x08017c37
 8017a6c:	08017c37 	.word	0x08017c37
 8017a70:	08017c37 	.word	0x08017c37
 8017a74:	08017c37 	.word	0x08017c37
 8017a78:	08017c37 	.word	0x08017c37
 8017a7c:	08017c37 	.word	0x08017c37
 8017a80:	08017c37 	.word	0x08017c37
 8017a84:	08017c37 	.word	0x08017c37
 8017a88:	08017c37 	.word	0x08017c37
 8017a8c:	08017c37 	.word	0x08017c37
 8017a90:	08017c37 	.word	0x08017c37
 8017a94:	08017c37 	.word	0x08017c37
 8017a98:	08017c37 	.word	0x08017c37
 8017a9c:	08017c37 	.word	0x08017c37
 8017aa0:	08017c37 	.word	0x08017c37
 8017aa4:	08017c37 	.word	0x08017c37
 8017aa8:	08017c37 	.word	0x08017c37
 8017aac:	08017c37 	.word	0x08017c37
 8017ab0:	08017b33 	.word	0x08017b33
 8017ab4:	08017b55 	.word	0x08017b55
 8017ab8:	08017b91 	.word	0x08017b91
 8017abc:	08017bb3 	.word	0x08017bb3
 8017ac0:	08017c37 	.word	0x08017c37
 8017ac4:	08017c37 	.word	0x08017c37
 8017ac8:	08017c37 	.word	0x08017c37
 8017acc:	08017bd5 	.word	0x08017bd5
 8017ad0:	08017c15 	.word	0x08017c15
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 8017ad4:	2300      	movs	r3, #0
 8017ad6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8017ada:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017ade:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        /* will be increased below */
        break;
 8017ae2:	e0ac      	b.n	8017c3e <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8017ae4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017ae8:	2b04      	cmp	r3, #4
 8017aea:	d009      	beq.n	8017b00 <dhcp_parse_reply+0x218>
 8017aec:	4b43      	ldr	r3, [pc, #268]	; (8017bfc <dhcp_parse_reply+0x314>)
 8017aee:	f240 622e 	movw	r2, #1582	; 0x62e
 8017af2:	4943      	ldr	r1, [pc, #268]	; (8017c00 <dhcp_parse_reply+0x318>)
 8017af4:	4843      	ldr	r0, [pc, #268]	; (8017c04 <dhcp_parse_reply+0x31c>)
 8017af6:	f003 fc33 	bl	801b360 <iprintf>
 8017afa:	f06f 0305 	mvn.w	r3, #5
 8017afe:	e1b1      	b.n	8017e64 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 8017b00:	2306      	movs	r3, #6
 8017b02:	623b      	str	r3, [r7, #32]
        break;
 8017b04:	e09b      	b.n	8017c3e <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 8017b06:	2304      	movs	r3, #4
 8017b08:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 8017b0c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8017b10:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8017b14:	429a      	cmp	r2, r3
 8017b16:	d209      	bcs.n	8017b2c <dhcp_parse_reply+0x244>
 8017b18:	4b38      	ldr	r3, [pc, #224]	; (8017bfc <dhcp_parse_reply+0x314>)
 8017b1a:	f240 6233 	movw	r2, #1587	; 0x633
 8017b1e:	493a      	ldr	r1, [pc, #232]	; (8017c08 <dhcp_parse_reply+0x320>)
 8017b20:	4838      	ldr	r0, [pc, #224]	; (8017c04 <dhcp_parse_reply+0x31c>)
 8017b22:	f003 fc1d 	bl	801b360 <iprintf>
 8017b26:	f06f 0305 	mvn.w	r3, #5
 8017b2a:	e19b      	b.n	8017e64 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 8017b2c:	2307      	movs	r3, #7
 8017b2e:	623b      	str	r3, [r7, #32]
        break;
 8017b30:	e085      	b.n	8017c3e <dhcp_parse_reply+0x356>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8017b32:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017b36:	2b04      	cmp	r3, #4
 8017b38:	d009      	beq.n	8017b4e <dhcp_parse_reply+0x266>
 8017b3a:	4b30      	ldr	r3, [pc, #192]	; (8017bfc <dhcp_parse_reply+0x314>)
 8017b3c:	f240 6241 	movw	r2, #1601	; 0x641
 8017b40:	492f      	ldr	r1, [pc, #188]	; (8017c00 <dhcp_parse_reply+0x318>)
 8017b42:	4830      	ldr	r0, [pc, #192]	; (8017c04 <dhcp_parse_reply+0x31c>)
 8017b44:	f003 fc0c 	bl	801b360 <iprintf>
 8017b48:	f06f 0305 	mvn.w	r3, #5
 8017b4c:	e18a      	b.n	8017e64 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 8017b4e:	2303      	movs	r3, #3
 8017b50:	623b      	str	r3, [r7, #32]
        break;
 8017b52:	e074      	b.n	8017c3e <dhcp_parse_reply+0x356>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8017b54:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017b58:	2b01      	cmp	r3, #1
 8017b5a:	d009      	beq.n	8017b70 <dhcp_parse_reply+0x288>
 8017b5c:	4b27      	ldr	r3, [pc, #156]	; (8017bfc <dhcp_parse_reply+0x314>)
 8017b5e:	f240 624f 	movw	r2, #1615	; 0x64f
 8017b62:	492a      	ldr	r1, [pc, #168]	; (8017c0c <dhcp_parse_reply+0x324>)
 8017b64:	4827      	ldr	r0, [pc, #156]	; (8017c04 <dhcp_parse_reply+0x31c>)
 8017b66:	f003 fbfb 	bl	801b360 <iprintf>
 8017b6a:	f06f 0305 	mvn.w	r3, #5
 8017b6e:	e179      	b.n	8017e64 <dhcp_parse_reply+0x57c>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 8017b70:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8017b72:	2bf0      	cmp	r3, #240	; 0xf0
 8017b74:	d009      	beq.n	8017b8a <dhcp_parse_reply+0x2a2>
 8017b76:	4b21      	ldr	r3, [pc, #132]	; (8017bfc <dhcp_parse_reply+0x314>)
 8017b78:	f240 6251 	movw	r2, #1617	; 0x651
 8017b7c:	4924      	ldr	r1, [pc, #144]	; (8017c10 <dhcp_parse_reply+0x328>)
 8017b7e:	4821      	ldr	r0, [pc, #132]	; (8017c04 <dhcp_parse_reply+0x31c>)
 8017b80:	f003 fbee 	bl	801b360 <iprintf>
 8017b84:	f06f 0305 	mvn.w	r3, #5
 8017b88:	e16c      	b.n	8017e64 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 8017b8a:	2300      	movs	r3, #0
 8017b8c:	623b      	str	r3, [r7, #32]
        break;
 8017b8e:	e056      	b.n	8017c3e <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8017b90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017b94:	2b01      	cmp	r3, #1
 8017b96:	d009      	beq.n	8017bac <dhcp_parse_reply+0x2c4>
 8017b98:	4b18      	ldr	r3, [pc, #96]	; (8017bfc <dhcp_parse_reply+0x314>)
 8017b9a:	f240 6255 	movw	r2, #1621	; 0x655
 8017b9e:	491b      	ldr	r1, [pc, #108]	; (8017c0c <dhcp_parse_reply+0x324>)
 8017ba0:	4818      	ldr	r0, [pc, #96]	; (8017c04 <dhcp_parse_reply+0x31c>)
 8017ba2:	f003 fbdd 	bl	801b360 <iprintf>
 8017ba6:	f06f 0305 	mvn.w	r3, #5
 8017baa:	e15b      	b.n	8017e64 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 8017bac:	2301      	movs	r3, #1
 8017bae:	623b      	str	r3, [r7, #32]
        break;
 8017bb0:	e045      	b.n	8017c3e <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8017bb2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017bb6:	2b04      	cmp	r3, #4
 8017bb8:	d009      	beq.n	8017bce <dhcp_parse_reply+0x2e6>
 8017bba:	4b10      	ldr	r3, [pc, #64]	; (8017bfc <dhcp_parse_reply+0x314>)
 8017bbc:	f240 6259 	movw	r2, #1625	; 0x659
 8017bc0:	490f      	ldr	r1, [pc, #60]	; (8017c00 <dhcp_parse_reply+0x318>)
 8017bc2:	4810      	ldr	r0, [pc, #64]	; (8017c04 <dhcp_parse_reply+0x31c>)
 8017bc4:	f003 fbcc 	bl	801b360 <iprintf>
 8017bc8:	f06f 0305 	mvn.w	r3, #5
 8017bcc:	e14a      	b.n	8017e64 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 8017bce:	2302      	movs	r3, #2
 8017bd0:	623b      	str	r3, [r7, #32]
        break;
 8017bd2:	e034      	b.n	8017c3e <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8017bd4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017bd8:	2b04      	cmp	r3, #4
 8017bda:	d009      	beq.n	8017bf0 <dhcp_parse_reply+0x308>
 8017bdc:	4b07      	ldr	r3, [pc, #28]	; (8017bfc <dhcp_parse_reply+0x314>)
 8017bde:	f240 625d 	movw	r2, #1629	; 0x65d
 8017be2:	4907      	ldr	r1, [pc, #28]	; (8017c00 <dhcp_parse_reply+0x318>)
 8017be4:	4807      	ldr	r0, [pc, #28]	; (8017c04 <dhcp_parse_reply+0x31c>)
 8017be6:	f003 fbbb 	bl	801b360 <iprintf>
 8017bea:	f06f 0305 	mvn.w	r3, #5
 8017bee:	e139      	b.n	8017e64 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_T1;
 8017bf0:	2304      	movs	r3, #4
 8017bf2:	623b      	str	r3, [r7, #32]
        break;
 8017bf4:	e023      	b.n	8017c3e <dhcp_parse_reply+0x356>
 8017bf6:	bf00      	nop
 8017bf8:	2000764c 	.word	0x2000764c
 8017bfc:	08022e84 	.word	0x08022e84
 8017c00:	0802310c 	.word	0x0802310c
 8017c04:	08022ee4 	.word	0x08022ee4
 8017c08:	08023118 	.word	0x08023118
 8017c0c:	0802312c 	.word	0x0802312c
 8017c10:	08023138 	.word	0x08023138
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8017c14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017c18:	2b04      	cmp	r3, #4
 8017c1a:	d009      	beq.n	8017c30 <dhcp_parse_reply+0x348>
 8017c1c:	4b93      	ldr	r3, [pc, #588]	; (8017e6c <dhcp_parse_reply+0x584>)
 8017c1e:	f240 6261 	movw	r2, #1633	; 0x661
 8017c22:	4993      	ldr	r1, [pc, #588]	; (8017e70 <dhcp_parse_reply+0x588>)
 8017c24:	4893      	ldr	r0, [pc, #588]	; (8017e74 <dhcp_parse_reply+0x58c>)
 8017c26:	f003 fb9b 	bl	801b360 <iprintf>
 8017c2a:	f06f 0305 	mvn.w	r3, #5
 8017c2e:	e119      	b.n	8017e64 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_T2;
 8017c30:	2305      	movs	r3, #5
 8017c32:	623b      	str	r3, [r7, #32]
        break;
 8017c34:	e003      	b.n	8017c3e <dhcp_parse_reply+0x356>
      default:
        decode_len = 0;
 8017c36:	2300      	movs	r3, #0
 8017c38:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 8017c3c:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 8017c3e:	7dfb      	ldrb	r3, [r7, #23]
 8017c40:	2b00      	cmp	r3, #0
 8017c42:	d103      	bne.n	8017c4c <dhcp_parse_reply+0x364>
      offset++;
 8017c44:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8017c46:	3301      	adds	r3, #1
 8017c48:	877b      	strh	r3, [r7, #58]	; 0x3a
 8017c4a:	e0a1      	b.n	8017d90 <dhcp_parse_reply+0x4a8>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 8017c4c:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8017c4e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017c52:	4413      	add	r3, r2
 8017c54:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 8017c58:	4293      	cmp	r3, r2
 8017c5a:	dd02      	ble.n	8017c62 <dhcp_parse_reply+0x37a>
        /* overflow */
        return ERR_BUF;
 8017c5c:	f06f 0301 	mvn.w	r3, #1
 8017c60:	e100      	b.n	8017e64 <dhcp_parse_reply+0x57c>
      }
      offset = (u16_t)(offset + len + 2);
 8017c62:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017c66:	b29a      	uxth	r2, r3
 8017c68:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8017c6a:	4413      	add	r3, r2
 8017c6c:	b29b      	uxth	r3, r3
 8017c6e:	3302      	adds	r3, #2
 8017c70:	877b      	strh	r3, [r7, #58]	; 0x3a
      if (decode_len > 0) {
 8017c72:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8017c76:	2b00      	cmp	r3, #0
 8017c78:	f000 808a 	beq.w	8017d90 <dhcp_parse_reply+0x4a8>
        u32_t value = 0;
 8017c7c:	2300      	movs	r3, #0
 8017c7e:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 8017c80:	6a3b      	ldr	r3, [r7, #32]
 8017c82:	2b00      	cmp	r3, #0
 8017c84:	db02      	blt.n	8017c8c <dhcp_parse_reply+0x3a4>
 8017c86:	6a3b      	ldr	r3, [r7, #32]
 8017c88:	2b07      	cmp	r3, #7
 8017c8a:	dd06      	ble.n	8017c9a <dhcp_parse_reply+0x3b2>
 8017c8c:	4b77      	ldr	r3, [pc, #476]	; (8017e6c <dhcp_parse_reply+0x584>)
 8017c8e:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 8017c92:	4979      	ldr	r1, [pc, #484]	; (8017e78 <dhcp_parse_reply+0x590>)
 8017c94:	4877      	ldr	r0, [pc, #476]	; (8017e74 <dhcp_parse_reply+0x58c>)
 8017c96:	f003 fb63 	bl	801b360 <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 8017c9a:	4a78      	ldr	r2, [pc, #480]	; (8017e7c <dhcp_parse_reply+0x594>)
 8017c9c:	6a3b      	ldr	r3, [r7, #32]
 8017c9e:	4413      	add	r3, r2
 8017ca0:	781b      	ldrb	r3, [r3, #0]
 8017ca2:	2b00      	cmp	r3, #0
 8017ca4:	d174      	bne.n	8017d90 <dhcp_parse_reply+0x4a8>
          copy_len = LWIP_MIN(decode_len, 4);
 8017ca6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8017caa:	2b04      	cmp	r3, #4
 8017cac:	bf28      	it	cs
 8017cae:	2304      	movcs	r3, #4
 8017cb0:	b2db      	uxtb	r3, r3
 8017cb2:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 8017cb4:	8bfb      	ldrh	r3, [r7, #30]
 8017cb6:	8aba      	ldrh	r2, [r7, #20]
 8017cb8:	f107 0108 	add.w	r1, r7, #8
 8017cbc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017cbe:	f7f8 fccb 	bl	8010658 <pbuf_copy_partial>
 8017cc2:	4603      	mov	r3, r0
 8017cc4:	461a      	mov	r2, r3
 8017cc6:	8abb      	ldrh	r3, [r7, #20]
 8017cc8:	4293      	cmp	r3, r2
 8017cca:	d002      	beq.n	8017cd2 <dhcp_parse_reply+0x3ea>
            return ERR_BUF;
 8017ccc:	f06f 0301 	mvn.w	r3, #1
 8017cd0:	e0c8      	b.n	8017e64 <dhcp_parse_reply+0x57c>
          }
          if (decode_len > 4) {
 8017cd2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8017cd6:	2b04      	cmp	r3, #4
 8017cd8:	d933      	bls.n	8017d42 <dhcp_parse_reply+0x45a>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 8017cda:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8017cde:	f003 0303 	and.w	r3, r3, #3
 8017ce2:	b2db      	uxtb	r3, r3
 8017ce4:	2b00      	cmp	r3, #0
 8017ce6:	d009      	beq.n	8017cfc <dhcp_parse_reply+0x414>
 8017ce8:	4b60      	ldr	r3, [pc, #384]	; (8017e6c <dhcp_parse_reply+0x584>)
 8017cea:	f240 6281 	movw	r2, #1665	; 0x681
 8017cee:	4964      	ldr	r1, [pc, #400]	; (8017e80 <dhcp_parse_reply+0x598>)
 8017cf0:	4860      	ldr	r0, [pc, #384]	; (8017e74 <dhcp_parse_reply+0x58c>)
 8017cf2:	f003 fb35 	bl	801b360 <iprintf>
 8017cf6:	f06f 0305 	mvn.w	r3, #5
 8017cfa:	e0b3      	b.n	8017e64 <dhcp_parse_reply+0x57c>
            dhcp_got_option(dhcp, decode_idx);
 8017cfc:	4a5f      	ldr	r2, [pc, #380]	; (8017e7c <dhcp_parse_reply+0x594>)
 8017cfe:	6a3b      	ldr	r3, [r7, #32]
 8017d00:	4413      	add	r3, r2
 8017d02:	2201      	movs	r2, #1
 8017d04:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 8017d06:	68bb      	ldr	r3, [r7, #8]
 8017d08:	4618      	mov	r0, r3
 8017d0a:	f7f7 f824 	bl	800ed56 <lwip_htonl>
 8017d0e:	4602      	mov	r2, r0
 8017d10:	495c      	ldr	r1, [pc, #368]	; (8017e84 <dhcp_parse_reply+0x59c>)
 8017d12:	6a3b      	ldr	r3, [r7, #32]
 8017d14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 8017d18:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8017d1c:	3b04      	subs	r3, #4
 8017d1e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 8017d22:	8bfb      	ldrh	r3, [r7, #30]
 8017d24:	3304      	adds	r3, #4
 8017d26:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 8017d28:	8a7a      	ldrh	r2, [r7, #18]
 8017d2a:	8bfb      	ldrh	r3, [r7, #30]
 8017d2c:	429a      	cmp	r2, r3
 8017d2e:	d202      	bcs.n	8017d36 <dhcp_parse_reply+0x44e>
              /* overflow */
              return ERR_BUF;
 8017d30:	f06f 0301 	mvn.w	r3, #1
 8017d34:	e096      	b.n	8017e64 <dhcp_parse_reply+0x57c>
            }
            val_offset = next_val_offset;
 8017d36:	8a7b      	ldrh	r3, [r7, #18]
 8017d38:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 8017d3a:	6a3b      	ldr	r3, [r7, #32]
 8017d3c:	3301      	adds	r3, #1
 8017d3e:	623b      	str	r3, [r7, #32]
            goto decode_next;
 8017d40:	e79e      	b.n	8017c80 <dhcp_parse_reply+0x398>
          } else if (decode_len == 4) {
 8017d42:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8017d46:	2b04      	cmp	r3, #4
 8017d48:	d106      	bne.n	8017d58 <dhcp_parse_reply+0x470>
            value = lwip_ntohl(value);
 8017d4a:	68bb      	ldr	r3, [r7, #8]
 8017d4c:	4618      	mov	r0, r3
 8017d4e:	f7f7 f802 	bl	800ed56 <lwip_htonl>
 8017d52:	4603      	mov	r3, r0
 8017d54:	60bb      	str	r3, [r7, #8]
 8017d56:	e011      	b.n	8017d7c <dhcp_parse_reply+0x494>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 8017d58:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8017d5c:	2b01      	cmp	r3, #1
 8017d5e:	d009      	beq.n	8017d74 <dhcp_parse_reply+0x48c>
 8017d60:	4b42      	ldr	r3, [pc, #264]	; (8017e6c <dhcp_parse_reply+0x584>)
 8017d62:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 8017d66:	4948      	ldr	r1, [pc, #288]	; (8017e88 <dhcp_parse_reply+0x5a0>)
 8017d68:	4842      	ldr	r0, [pc, #264]	; (8017e74 <dhcp_parse_reply+0x58c>)
 8017d6a:	f003 faf9 	bl	801b360 <iprintf>
 8017d6e:	f06f 0305 	mvn.w	r3, #5
 8017d72:	e077      	b.n	8017e64 <dhcp_parse_reply+0x57c>
            value = ((u8_t *)&value)[0];
 8017d74:	f107 0308 	add.w	r3, r7, #8
 8017d78:	781b      	ldrb	r3, [r3, #0]
 8017d7a:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 8017d7c:	4a3f      	ldr	r2, [pc, #252]	; (8017e7c <dhcp_parse_reply+0x594>)
 8017d7e:	6a3b      	ldr	r3, [r7, #32]
 8017d80:	4413      	add	r3, r2
 8017d82:	2201      	movs	r2, #1
 8017d84:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 8017d86:	68ba      	ldr	r2, [r7, #8]
 8017d88:	493e      	ldr	r1, [pc, #248]	; (8017e84 <dhcp_parse_reply+0x59c>)
 8017d8a:	6a3b      	ldr	r3, [r7, #32]
 8017d8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 8017d90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017d92:	895b      	ldrh	r3, [r3, #10]
 8017d94:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8017d96:	429a      	cmp	r2, r3
 8017d98:	d324      	bcc.n	8017de4 <dhcp_parse_reply+0x4fc>
      offset = (u16_t)(offset - q->len);
 8017d9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017d9c:	895b      	ldrh	r3, [r3, #10]
 8017d9e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8017da0:	1ad3      	subs	r3, r2, r3
 8017da2:	877b      	strh	r3, [r7, #58]	; 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 8017da4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017da6:	895b      	ldrh	r3, [r3, #10]
 8017da8:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8017daa:	1ad3      	subs	r3, r2, r3
 8017dac:	873b      	strh	r3, [r7, #56]	; 0x38
      if (offset < offset_max) {
 8017dae:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8017db0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8017db2:	429a      	cmp	r2, r3
 8017db4:	d213      	bcs.n	8017dde <dhcp_parse_reply+0x4f6>
        q = q->next;
 8017db6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017db8:	681b      	ldr	r3, [r3, #0]
 8017dba:	633b      	str	r3, [r7, #48]	; 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 8017dbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017dbe:	2b00      	cmp	r3, #0
 8017dc0:	d109      	bne.n	8017dd6 <dhcp_parse_reply+0x4ee>
 8017dc2:	4b2a      	ldr	r3, [pc, #168]	; (8017e6c <dhcp_parse_reply+0x584>)
 8017dc4:	f240 629d 	movw	r2, #1693	; 0x69d
 8017dc8:	4930      	ldr	r1, [pc, #192]	; (8017e8c <dhcp_parse_reply+0x5a4>)
 8017dca:	482a      	ldr	r0, [pc, #168]	; (8017e74 <dhcp_parse_reply+0x58c>)
 8017dcc:	f003 fac8 	bl	801b360 <iprintf>
 8017dd0:	f06f 0305 	mvn.w	r3, #5
 8017dd4:	e046      	b.n	8017e64 <dhcp_parse_reply+0x57c>
        options = (u8_t *)q->payload;
 8017dd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017dd8:	685b      	ldr	r3, [r3, #4]
 8017dda:	63fb      	str	r3, [r7, #60]	; 0x3c
 8017ddc:	e002      	b.n	8017de4 <dhcp_parse_reply+0x4fc>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 8017dde:	f06f 0301 	mvn.w	r3, #1
 8017de2:	e03f      	b.n	8017e64 <dhcp_parse_reply+0x57c>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8017de4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017de6:	2b00      	cmp	r3, #0
 8017de8:	d00a      	beq.n	8017e00 <dhcp_parse_reply+0x518>
 8017dea:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8017dec:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8017dee:	429a      	cmp	r2, r3
 8017df0:	d206      	bcs.n	8017e00 <dhcp_parse_reply+0x518>
 8017df2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8017df4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8017df6:	4413      	add	r3, r2
 8017df8:	781b      	ldrb	r3, [r3, #0]
 8017dfa:	2bff      	cmp	r3, #255	; 0xff
 8017dfc:	f47f adb7 	bne.w	801796e <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 8017e00:	4b1e      	ldr	r3, [pc, #120]	; (8017e7c <dhcp_parse_reply+0x594>)
 8017e02:	781b      	ldrb	r3, [r3, #0]
 8017e04:	2b00      	cmp	r3, #0
 8017e06:	d018      	beq.n	8017e3a <dhcp_parse_reply+0x552>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8017e08:	4b1e      	ldr	r3, [pc, #120]	; (8017e84 <dhcp_parse_reply+0x59c>)
 8017e0a:	681b      	ldr	r3, [r3, #0]
 8017e0c:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8017e0e:	4b1b      	ldr	r3, [pc, #108]	; (8017e7c <dhcp_parse_reply+0x594>)
 8017e10:	2200      	movs	r2, #0
 8017e12:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 8017e14:	68fb      	ldr	r3, [r7, #12]
 8017e16:	2b01      	cmp	r3, #1
 8017e18:	d102      	bne.n	8017e20 <dhcp_parse_reply+0x538>
      parse_file_as_options = 1;
 8017e1a:	2301      	movs	r3, #1
 8017e1c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017e1e:	e00c      	b.n	8017e3a <dhcp_parse_reply+0x552>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 8017e20:	68fb      	ldr	r3, [r7, #12]
 8017e22:	2b02      	cmp	r3, #2
 8017e24:	d102      	bne.n	8017e2c <dhcp_parse_reply+0x544>
      parse_sname_as_options = 1;
 8017e26:	2301      	movs	r3, #1
 8017e28:	62bb      	str	r3, [r7, #40]	; 0x28
 8017e2a:	e006      	b.n	8017e3a <dhcp_parse_reply+0x552>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 8017e2c:	68fb      	ldr	r3, [r7, #12]
 8017e2e:	2b03      	cmp	r3, #3
 8017e30:	d103      	bne.n	8017e3a <dhcp_parse_reply+0x552>
      parse_sname_as_options = 1;
 8017e32:	2301      	movs	r3, #1
 8017e34:	62bb      	str	r3, [r7, #40]	; 0x28
      parse_file_as_options = 1;
 8017e36:	2301      	movs	r3, #1
 8017e38:	62fb      	str	r3, [r7, #44]	; 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 8017e3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017e3c:	2b00      	cmp	r3, #0
 8017e3e:	d006      	beq.n	8017e4e <dhcp_parse_reply+0x566>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 8017e40:	2300      	movs	r3, #0
 8017e42:	62fb      	str	r3, [r7, #44]	; 0x2c
    options_idx = DHCP_FILE_OFS;
 8017e44:	236c      	movs	r3, #108	; 0x6c
 8017e46:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 8017e48:	23ec      	movs	r3, #236	; 0xec
 8017e4a:	86bb      	strh	r3, [r7, #52]	; 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 8017e4c:	e569      	b.n	8017922 <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 8017e4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017e50:	2b00      	cmp	r3, #0
 8017e52:	d006      	beq.n	8017e62 <dhcp_parse_reply+0x57a>
    parse_sname_as_options = 0;
 8017e54:	2300      	movs	r3, #0
 8017e56:	62bb      	str	r3, [r7, #40]	; 0x28
    options_idx = DHCP_SNAME_OFS;
 8017e58:	232c      	movs	r3, #44	; 0x2c
 8017e5a:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 8017e5c:	236c      	movs	r3, #108	; 0x6c
 8017e5e:	86bb      	strh	r3, [r7, #52]	; 0x34
    goto again;
 8017e60:	e55f      	b.n	8017922 <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 8017e62:	2300      	movs	r3, #0
}
 8017e64:	4618      	mov	r0, r3
 8017e66:	3740      	adds	r7, #64	; 0x40
 8017e68:	46bd      	mov	sp, r7
 8017e6a:	bd80      	pop	{r7, pc}
 8017e6c:	08022e84 	.word	0x08022e84
 8017e70:	0802310c 	.word	0x0802310c
 8017e74:	08022ee4 	.word	0x08022ee4
 8017e78:	08023150 	.word	0x08023150
 8017e7c:	2000764c 	.word	0x2000764c
 8017e80:	08023164 	.word	0x08023164
 8017e84:	20007654 	.word	0x20007654
 8017e88:	0802317c 	.word	0x0802317c
 8017e8c:	08023190 	.word	0x08023190

08017e90 <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8017e90:	b580      	push	{r7, lr}
 8017e92:	b08a      	sub	sp, #40	; 0x28
 8017e94:	af00      	add	r7, sp, #0
 8017e96:	60f8      	str	r0, [r7, #12]
 8017e98:	60b9      	str	r1, [r7, #8]
 8017e9a:	607a      	str	r2, [r7, #4]
 8017e9c:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 8017e9e:	4b60      	ldr	r3, [pc, #384]	; (8018020 <dhcp_recv+0x190>)
 8017ea0:	685b      	ldr	r3, [r3, #4]
 8017ea2:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8017ea4:	6a3b      	ldr	r3, [r7, #32]
 8017ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017ea8:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 8017eaa:	687b      	ldr	r3, [r7, #4]
 8017eac:	685b      	ldr	r3, [r3, #4]
 8017eae:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 8017eb0:	69fb      	ldr	r3, [r7, #28]
 8017eb2:	2b00      	cmp	r3, #0
 8017eb4:	f000 809d 	beq.w	8017ff2 <dhcp_recv+0x162>
 8017eb8:	69fb      	ldr	r3, [r7, #28]
 8017eba:	791b      	ldrb	r3, [r3, #4]
 8017ebc:	2b00      	cmp	r3, #0
 8017ebe:	f000 8098 	beq.w	8017ff2 <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 8017ec2:	687b      	ldr	r3, [r7, #4]
 8017ec4:	895b      	ldrh	r3, [r3, #10]
 8017ec6:	2b2b      	cmp	r3, #43	; 0x2b
 8017ec8:	f240 8095 	bls.w	8017ff6 <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 8017ecc:	69bb      	ldr	r3, [r7, #24]
 8017ece:	781b      	ldrb	r3, [r3, #0]
 8017ed0:	2b02      	cmp	r3, #2
 8017ed2:	f040 8092 	bne.w	8017ffa <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8017ed6:	2300      	movs	r3, #0
 8017ed8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8017edc:	e012      	b.n	8017f04 <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 8017ede:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017ee2:	6a3a      	ldr	r2, [r7, #32]
 8017ee4:	4413      	add	r3, r2
 8017ee6:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 8017eea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017eee:	69b9      	ldr	r1, [r7, #24]
 8017ef0:	440b      	add	r3, r1
 8017ef2:	7f1b      	ldrb	r3, [r3, #28]
 8017ef4:	429a      	cmp	r2, r3
 8017ef6:	f040 8082 	bne.w	8017ffe <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8017efa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017efe:	3301      	adds	r3, #1
 8017f00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8017f04:	6a3b      	ldr	r3, [r7, #32]
 8017f06:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8017f0a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8017f0e:	429a      	cmp	r2, r3
 8017f10:	d203      	bcs.n	8017f1a <dhcp_recv+0x8a>
 8017f12:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017f16:	2b05      	cmp	r3, #5
 8017f18:	d9e1      	bls.n	8017ede <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 8017f1a:	69bb      	ldr	r3, [r7, #24]
 8017f1c:	685b      	ldr	r3, [r3, #4]
 8017f1e:	4618      	mov	r0, r3
 8017f20:	f7f6 ff19 	bl	800ed56 <lwip_htonl>
 8017f24:	4602      	mov	r2, r0
 8017f26:	69fb      	ldr	r3, [r7, #28]
 8017f28:	681b      	ldr	r3, [r3, #0]
 8017f2a:	429a      	cmp	r2, r3
 8017f2c:	d169      	bne.n	8018002 <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 8017f2e:	69f9      	ldr	r1, [r7, #28]
 8017f30:	6878      	ldr	r0, [r7, #4]
 8017f32:	f7ff fcd9 	bl	80178e8 <dhcp_parse_reply>
 8017f36:	4603      	mov	r3, r0
 8017f38:	2b00      	cmp	r3, #0
 8017f3a:	d164      	bne.n	8018006 <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 8017f3c:	4b39      	ldr	r3, [pc, #228]	; (8018024 <dhcp_recv+0x194>)
 8017f3e:	785b      	ldrb	r3, [r3, #1]
 8017f40:	2b00      	cmp	r3, #0
 8017f42:	d062      	beq.n	801800a <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 8017f44:	687b      	ldr	r3, [r7, #4]
 8017f46:	685b      	ldr	r3, [r3, #4]
 8017f48:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 8017f4a:	4b37      	ldr	r3, [pc, #220]	; (8018028 <dhcp_recv+0x198>)
 8017f4c:	685b      	ldr	r3, [r3, #4]
 8017f4e:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 8017f50:	7cfb      	ldrb	r3, [r7, #19]
 8017f52:	2b05      	cmp	r3, #5
 8017f54:	d12a      	bne.n	8017fac <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 8017f56:	69fb      	ldr	r3, [r7, #28]
 8017f58:	795b      	ldrb	r3, [r3, #5]
 8017f5a:	2b01      	cmp	r3, #1
 8017f5c:	d112      	bne.n	8017f84 <dhcp_recv+0xf4>
      dhcp_handle_ack(netif, msg_in);
 8017f5e:	6979      	ldr	r1, [r7, #20]
 8017f60:	6a38      	ldr	r0, [r7, #32]
 8017f62:	f7fe fe53 	bl	8016c0c <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 8017f66:	6a3b      	ldr	r3, [r7, #32]
 8017f68:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8017f6c:	f003 0308 	and.w	r3, r3, #8
 8017f70:	2b00      	cmp	r3, #0
 8017f72:	d003      	beq.n	8017f7c <dhcp_recv+0xec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 8017f74:	6a38      	ldr	r0, [r7, #32]
 8017f76:	f7fe fbc3 	bl	8016700 <dhcp_check>
 8017f7a:	e049      	b.n	8018010 <dhcp_recv+0x180>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 8017f7c:	6a38      	ldr	r0, [r7, #32]
 8017f7e:	f7ff f867 	bl	8017050 <dhcp_bind>
 8017f82:	e045      	b.n	8018010 <dhcp_recv+0x180>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8017f84:	69fb      	ldr	r3, [r7, #28]
 8017f86:	795b      	ldrb	r3, [r3, #5]
 8017f88:	2b03      	cmp	r3, #3
 8017f8a:	d007      	beq.n	8017f9c <dhcp_recv+0x10c>
 8017f8c:	69fb      	ldr	r3, [r7, #28]
 8017f8e:	795b      	ldrb	r3, [r3, #5]
 8017f90:	2b04      	cmp	r3, #4
 8017f92:	d003      	beq.n	8017f9c <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 8017f94:	69fb      	ldr	r3, [r7, #28]
 8017f96:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8017f98:	2b05      	cmp	r3, #5
 8017f9a:	d139      	bne.n	8018010 <dhcp_recv+0x180>
      dhcp_handle_ack(netif, msg_in);
 8017f9c:	6979      	ldr	r1, [r7, #20]
 8017f9e:	6a38      	ldr	r0, [r7, #32]
 8017fa0:	f7fe fe34 	bl	8016c0c <dhcp_handle_ack>
      dhcp_bind(netif);
 8017fa4:	6a38      	ldr	r0, [r7, #32]
 8017fa6:	f7ff f853 	bl	8017050 <dhcp_bind>
 8017faa:	e031      	b.n	8018010 <dhcp_recv+0x180>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 8017fac:	7cfb      	ldrb	r3, [r7, #19]
 8017fae:	2b06      	cmp	r3, #6
 8017fb0:	d113      	bne.n	8017fda <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8017fb2:	69fb      	ldr	r3, [r7, #28]
 8017fb4:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 8017fb6:	2b03      	cmp	r3, #3
 8017fb8:	d00b      	beq.n	8017fd2 <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8017fba:	69fb      	ldr	r3, [r7, #28]
 8017fbc:	795b      	ldrb	r3, [r3, #5]
 8017fbe:	2b01      	cmp	r3, #1
 8017fc0:	d007      	beq.n	8017fd2 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8017fc2:	69fb      	ldr	r3, [r7, #28]
 8017fc4:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8017fc6:	2b04      	cmp	r3, #4
 8017fc8:	d003      	beq.n	8017fd2 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8017fca:	69fb      	ldr	r3, [r7, #28]
 8017fcc:	795b      	ldrb	r3, [r3, #5]
 8017fce:	2b05      	cmp	r3, #5
 8017fd0:	d103      	bne.n	8017fda <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 8017fd2:	6a38      	ldr	r0, [r7, #32]
 8017fd4:	f7fe fb7a 	bl	80166cc <dhcp_handle_nak>
 8017fd8:	e01a      	b.n	8018010 <dhcp_recv+0x180>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 8017fda:	7cfb      	ldrb	r3, [r7, #19]
 8017fdc:	2b02      	cmp	r3, #2
 8017fde:	d116      	bne.n	801800e <dhcp_recv+0x17e>
 8017fe0:	69fb      	ldr	r3, [r7, #28]
 8017fe2:	795b      	ldrb	r3, [r3, #5]
 8017fe4:	2b06      	cmp	r3, #6
 8017fe6:	d112      	bne.n	801800e <dhcp_recv+0x17e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 8017fe8:	6979      	ldr	r1, [r7, #20]
 8017fea:	6a38      	ldr	r0, [r7, #32]
 8017fec:	f7fe fbbc 	bl	8016768 <dhcp_handle_offer>
 8017ff0:	e00e      	b.n	8018010 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8017ff2:	bf00      	nop
 8017ff4:	e00c      	b.n	8018010 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8017ff6:	bf00      	nop
 8017ff8:	e00a      	b.n	8018010 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8017ffa:	bf00      	nop
 8017ffc:	e008      	b.n	8018010 <dhcp_recv+0x180>
      goto free_pbuf_and_return;
 8017ffe:	bf00      	nop
 8018000:	e006      	b.n	8018010 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8018002:	bf00      	nop
 8018004:	e004      	b.n	8018010 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8018006:	bf00      	nop
 8018008:	e002      	b.n	8018010 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801800a:	bf00      	nop
 801800c:	e000      	b.n	8018010 <dhcp_recv+0x180>
  }

free_pbuf_and_return:
 801800e:	bf00      	nop
  pbuf_free(p);
 8018010:	6878      	ldr	r0, [r7, #4]
 8018012:	f7f8 f927 	bl	8010264 <pbuf_free>
}
 8018016:	bf00      	nop
 8018018:	3728      	adds	r7, #40	; 0x28
 801801a:	46bd      	mov	sp, r7
 801801c:	bd80      	pop	{r7, pc}
 801801e:	bf00      	nop
 8018020:	2000450c 	.word	0x2000450c
 8018024:	2000764c 	.word	0x2000764c
 8018028:	20007654 	.word	0x20007654

0801802c <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 801802c:	b580      	push	{r7, lr}
 801802e:	b088      	sub	sp, #32
 8018030:	af00      	add	r7, sp, #0
 8018032:	60f8      	str	r0, [r7, #12]
 8018034:	60b9      	str	r1, [r7, #8]
 8018036:	603b      	str	r3, [r7, #0]
 8018038:	4613      	mov	r3, r2
 801803a:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 801803c:	68fb      	ldr	r3, [r7, #12]
 801803e:	2b00      	cmp	r3, #0
 8018040:	d108      	bne.n	8018054 <dhcp_create_msg+0x28>
 8018042:	4b5f      	ldr	r3, [pc, #380]	; (80181c0 <dhcp_create_msg+0x194>)
 8018044:	f240 7269 	movw	r2, #1897	; 0x769
 8018048:	495e      	ldr	r1, [pc, #376]	; (80181c4 <dhcp_create_msg+0x198>)
 801804a:	485f      	ldr	r0, [pc, #380]	; (80181c8 <dhcp_create_msg+0x19c>)
 801804c:	f003 f988 	bl	801b360 <iprintf>
 8018050:	2300      	movs	r3, #0
 8018052:	e0b1      	b.n	80181b8 <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 8018054:	68bb      	ldr	r3, [r7, #8]
 8018056:	2b00      	cmp	r3, #0
 8018058:	d108      	bne.n	801806c <dhcp_create_msg+0x40>
 801805a:	4b59      	ldr	r3, [pc, #356]	; (80181c0 <dhcp_create_msg+0x194>)
 801805c:	f240 726a 	movw	r2, #1898	; 0x76a
 8018060:	495a      	ldr	r1, [pc, #360]	; (80181cc <dhcp_create_msg+0x1a0>)
 8018062:	4859      	ldr	r0, [pc, #356]	; (80181c8 <dhcp_create_msg+0x19c>)
 8018064:	f003 f97c 	bl	801b360 <iprintf>
 8018068:	2300      	movs	r3, #0
 801806a:	e0a5      	b.n	80181b8 <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 801806c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8018070:	f44f 719a 	mov.w	r1, #308	; 0x134
 8018074:	2036      	movs	r0, #54	; 0x36
 8018076:	f7f7 fe11 	bl	800fc9c <pbuf_alloc>
 801807a:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 801807c:	69bb      	ldr	r3, [r7, #24]
 801807e:	2b00      	cmp	r3, #0
 8018080:	d101      	bne.n	8018086 <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 8018082:	2300      	movs	r3, #0
 8018084:	e098      	b.n	80181b8 <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 8018086:	69bb      	ldr	r3, [r7, #24]
 8018088:	895b      	ldrh	r3, [r3, #10]
 801808a:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 801808e:	d206      	bcs.n	801809e <dhcp_create_msg+0x72>
 8018090:	4b4b      	ldr	r3, [pc, #300]	; (80181c0 <dhcp_create_msg+0x194>)
 8018092:	f240 7271 	movw	r2, #1905	; 0x771
 8018096:	494e      	ldr	r1, [pc, #312]	; (80181d0 <dhcp_create_msg+0x1a4>)
 8018098:	484b      	ldr	r0, [pc, #300]	; (80181c8 <dhcp_create_msg+0x19c>)
 801809a:	f003 f961 	bl	801b360 <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 801809e:	79fb      	ldrb	r3, [r7, #7]
 80180a0:	2b03      	cmp	r3, #3
 80180a2:	d103      	bne.n	80180ac <dhcp_create_msg+0x80>
 80180a4:	68bb      	ldr	r3, [r7, #8]
 80180a6:	795b      	ldrb	r3, [r3, #5]
 80180a8:	2b03      	cmp	r3, #3
 80180aa:	d10d      	bne.n	80180c8 <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 80180ac:	68bb      	ldr	r3, [r7, #8]
 80180ae:	799b      	ldrb	r3, [r3, #6]
 80180b0:	2b00      	cmp	r3, #0
 80180b2:	d105      	bne.n	80180c0 <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 80180b4:	f003 f96c 	bl	801b390 <rand>
 80180b8:	4603      	mov	r3, r0
 80180ba:	461a      	mov	r2, r3
 80180bc:	4b45      	ldr	r3, [pc, #276]	; (80181d4 <dhcp_create_msg+0x1a8>)
 80180be:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 80180c0:	4b44      	ldr	r3, [pc, #272]	; (80181d4 <dhcp_create_msg+0x1a8>)
 80180c2:	681a      	ldr	r2, [r3, #0]
 80180c4:	68bb      	ldr	r3, [r7, #8]
 80180c6:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 80180c8:	69bb      	ldr	r3, [r7, #24]
 80180ca:	685b      	ldr	r3, [r3, #4]
 80180cc:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 80180ce:	f44f 729a 	mov.w	r2, #308	; 0x134
 80180d2:	2100      	movs	r1, #0
 80180d4:	6978      	ldr	r0, [r7, #20]
 80180d6:	f002 fc27 	bl	801a928 <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 80180da:	697b      	ldr	r3, [r7, #20]
 80180dc:	2201      	movs	r2, #1
 80180de:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 80180e0:	697b      	ldr	r3, [r7, #20]
 80180e2:	2201      	movs	r2, #1
 80180e4:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 80180e6:	68fb      	ldr	r3, [r7, #12]
 80180e8:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 80180ec:	697b      	ldr	r3, [r7, #20]
 80180ee:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 80180f0:	68bb      	ldr	r3, [r7, #8]
 80180f2:	681b      	ldr	r3, [r3, #0]
 80180f4:	4618      	mov	r0, r3
 80180f6:	f7f6 fe2e 	bl	800ed56 <lwip_htonl>
 80180fa:	4602      	mov	r2, r0
 80180fc:	697b      	ldr	r3, [r7, #20]
 80180fe:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 8018100:	79fb      	ldrb	r3, [r7, #7]
 8018102:	2b08      	cmp	r3, #8
 8018104:	d010      	beq.n	8018128 <dhcp_create_msg+0xfc>
 8018106:	79fb      	ldrb	r3, [r7, #7]
 8018108:	2b04      	cmp	r3, #4
 801810a:	d00d      	beq.n	8018128 <dhcp_create_msg+0xfc>
 801810c:	79fb      	ldrb	r3, [r7, #7]
 801810e:	2b07      	cmp	r3, #7
 8018110:	d00a      	beq.n	8018128 <dhcp_create_msg+0xfc>
 8018112:	79fb      	ldrb	r3, [r7, #7]
 8018114:	2b03      	cmp	r3, #3
 8018116:	d10c      	bne.n	8018132 <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8018118:	68bb      	ldr	r3, [r7, #8]
 801811a:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 801811c:	2b05      	cmp	r3, #5
 801811e:	d003      	beq.n	8018128 <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8018120:	68bb      	ldr	r3, [r7, #8]
 8018122:	795b      	ldrb	r3, [r3, #5]
 8018124:	2b04      	cmp	r3, #4
 8018126:	d104      	bne.n	8018132 <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 8018128:	68fb      	ldr	r3, [r7, #12]
 801812a:	3304      	adds	r3, #4
 801812c:	681a      	ldr	r2, [r3, #0]
 801812e:	697b      	ldr	r3, [r7, #20]
 8018130:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8018132:	2300      	movs	r3, #0
 8018134:	83fb      	strh	r3, [r7, #30]
 8018136:	e00c      	b.n	8018152 <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 8018138:	8bfa      	ldrh	r2, [r7, #30]
 801813a:	8bfb      	ldrh	r3, [r7, #30]
 801813c:	68f9      	ldr	r1, [r7, #12]
 801813e:	440a      	add	r2, r1
 8018140:	f892 102a 	ldrb.w	r1, [r2, #42]	; 0x2a
 8018144:	697a      	ldr	r2, [r7, #20]
 8018146:	4413      	add	r3, r2
 8018148:	460a      	mov	r2, r1
 801814a:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801814c:	8bfb      	ldrh	r3, [r7, #30]
 801814e:	3301      	adds	r3, #1
 8018150:	83fb      	strh	r3, [r7, #30]
 8018152:	8bfb      	ldrh	r3, [r7, #30]
 8018154:	2b05      	cmp	r3, #5
 8018156:	d9ef      	bls.n	8018138 <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 8018158:	697b      	ldr	r3, [r7, #20]
 801815a:	2200      	movs	r2, #0
 801815c:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 8018160:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 8018164:	2200      	movs	r2, #0
 8018166:	f062 027d 	orn	r2, r2, #125	; 0x7d
 801816a:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 801816e:	2200      	movs	r2, #0
 8018170:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 8018174:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 8018178:	2200      	movs	r2, #0
 801817a:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 801817e:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 8018182:	697b      	ldr	r3, [r7, #20]
 8018184:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8018188:	2301      	movs	r3, #1
 801818a:	2235      	movs	r2, #53	; 0x35
 801818c:	2000      	movs	r0, #0
 801818e:	f7ff fadb 	bl	8017748 <dhcp_option>
 8018192:	4603      	mov	r3, r0
 8018194:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 8018196:	697b      	ldr	r3, [r7, #20]
 8018198:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801819c:	79fa      	ldrb	r2, [r7, #7]
 801819e:	8a7b      	ldrh	r3, [r7, #18]
 80181a0:	4618      	mov	r0, r3
 80181a2:	f7ff fb05 	bl	80177b0 <dhcp_option_byte>
 80181a6:	4603      	mov	r3, r0
 80181a8:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 80181aa:	683b      	ldr	r3, [r7, #0]
 80181ac:	2b00      	cmp	r3, #0
 80181ae:	d002      	beq.n	80181b6 <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 80181b0:	683b      	ldr	r3, [r7, #0]
 80181b2:	8a7a      	ldrh	r2, [r7, #18]
 80181b4:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 80181b6:	69bb      	ldr	r3, [r7, #24]
}
 80181b8:	4618      	mov	r0, r3
 80181ba:	3720      	adds	r7, #32
 80181bc:	46bd      	mov	sp, r7
 80181be:	bd80      	pop	{r7, pc}
 80181c0:	08022e84 	.word	0x08022e84
 80181c4:	080231a4 	.word	0x080231a4
 80181c8:	08022ee4 	.word	0x08022ee4
 80181cc:	080231c4 	.word	0x080231c4
 80181d0:	080231e4 	.word	0x080231e4
 80181d4:	20000528 	.word	0x20000528

080181d8 <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 80181d8:	b580      	push	{r7, lr}
 80181da:	b084      	sub	sp, #16
 80181dc:	af00      	add	r7, sp, #0
 80181de:	4603      	mov	r3, r0
 80181e0:	60b9      	str	r1, [r7, #8]
 80181e2:	607a      	str	r2, [r7, #4]
 80181e4:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 80181e6:	89fb      	ldrh	r3, [r7, #14]
 80181e8:	1c5a      	adds	r2, r3, #1
 80181ea:	81fa      	strh	r2, [r7, #14]
 80181ec:	461a      	mov	r2, r3
 80181ee:	68bb      	ldr	r3, [r7, #8]
 80181f0:	4413      	add	r3, r2
 80181f2:	22ff      	movs	r2, #255	; 0xff
 80181f4:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 80181f6:	e007      	b.n	8018208 <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 80181f8:	89fb      	ldrh	r3, [r7, #14]
 80181fa:	1c5a      	adds	r2, r3, #1
 80181fc:	81fa      	strh	r2, [r7, #14]
 80181fe:	461a      	mov	r2, r3
 8018200:	68bb      	ldr	r3, [r7, #8]
 8018202:	4413      	add	r3, r2
 8018204:	2200      	movs	r2, #0
 8018206:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8018208:	89fb      	ldrh	r3, [r7, #14]
 801820a:	2b43      	cmp	r3, #67	; 0x43
 801820c:	d904      	bls.n	8018218 <dhcp_option_trailer+0x40>
 801820e:	89fb      	ldrh	r3, [r7, #14]
 8018210:	f003 0303 	and.w	r3, r3, #3
 8018214:	2b00      	cmp	r3, #0
 8018216:	d002      	beq.n	801821e <dhcp_option_trailer+0x46>
 8018218:	89fb      	ldrh	r3, [r7, #14]
 801821a:	2b43      	cmp	r3, #67	; 0x43
 801821c:	d9ec      	bls.n	80181f8 <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 801821e:	89fb      	ldrh	r3, [r7, #14]
 8018220:	33f0      	adds	r3, #240	; 0xf0
 8018222:	b29b      	uxth	r3, r3
 8018224:	4619      	mov	r1, r3
 8018226:	6878      	ldr	r0, [r7, #4]
 8018228:	f7f7 fe96 	bl	800ff58 <pbuf_realloc>
}
 801822c:	bf00      	nop
 801822e:	3710      	adds	r7, #16
 8018230:	46bd      	mov	sp, r7
 8018232:	bd80      	pop	{r7, pc}

08018234 <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 8018234:	b480      	push	{r7}
 8018236:	b085      	sub	sp, #20
 8018238:	af00      	add	r7, sp, #0
 801823a:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 801823c:	687b      	ldr	r3, [r7, #4]
 801823e:	2b00      	cmp	r3, #0
 8018240:	d017      	beq.n	8018272 <dhcp_supplied_address+0x3e>
 8018242:	687b      	ldr	r3, [r7, #4]
 8018244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018246:	2b00      	cmp	r3, #0
 8018248:	d013      	beq.n	8018272 <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 801824a:	687b      	ldr	r3, [r7, #4]
 801824c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801824e:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8018250:	68fb      	ldr	r3, [r7, #12]
 8018252:	795b      	ldrb	r3, [r3, #5]
 8018254:	2b0a      	cmp	r3, #10
 8018256:	d007      	beq.n	8018268 <dhcp_supplied_address+0x34>
 8018258:	68fb      	ldr	r3, [r7, #12]
 801825a:	795b      	ldrb	r3, [r3, #5]
 801825c:	2b05      	cmp	r3, #5
 801825e:	d003      	beq.n	8018268 <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 8018260:	68fb      	ldr	r3, [r7, #12]
 8018262:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8018264:	2b04      	cmp	r3, #4
 8018266:	d101      	bne.n	801826c <dhcp_supplied_address+0x38>
 8018268:	2301      	movs	r3, #1
 801826a:	e000      	b.n	801826e <dhcp_supplied_address+0x3a>
 801826c:	2300      	movs	r3, #0
 801826e:	b2db      	uxtb	r3, r3
 8018270:	e000      	b.n	8018274 <dhcp_supplied_address+0x40>
  }
  return 0;
 8018272:	2300      	movs	r3, #0
}
 8018274:	4618      	mov	r0, r3
 8018276:	3714      	adds	r7, #20
 8018278:	46bd      	mov	sp, r7
 801827a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801827e:	4770      	bx	lr

08018280 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8018280:	b580      	push	{r7, lr}
 8018282:	b082      	sub	sp, #8
 8018284:	af00      	add	r7, sp, #0
 8018286:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8018288:	4915      	ldr	r1, [pc, #84]	; (80182e0 <etharp_free_entry+0x60>)
 801828a:	687a      	ldr	r2, [r7, #4]
 801828c:	4613      	mov	r3, r2
 801828e:	005b      	lsls	r3, r3, #1
 8018290:	4413      	add	r3, r2
 8018292:	00db      	lsls	r3, r3, #3
 8018294:	440b      	add	r3, r1
 8018296:	681b      	ldr	r3, [r3, #0]
 8018298:	2b00      	cmp	r3, #0
 801829a:	d013      	beq.n	80182c4 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 801829c:	4910      	ldr	r1, [pc, #64]	; (80182e0 <etharp_free_entry+0x60>)
 801829e:	687a      	ldr	r2, [r7, #4]
 80182a0:	4613      	mov	r3, r2
 80182a2:	005b      	lsls	r3, r3, #1
 80182a4:	4413      	add	r3, r2
 80182a6:	00db      	lsls	r3, r3, #3
 80182a8:	440b      	add	r3, r1
 80182aa:	681b      	ldr	r3, [r3, #0]
 80182ac:	4618      	mov	r0, r3
 80182ae:	f7f7 ffd9 	bl	8010264 <pbuf_free>
    arp_table[i].q = NULL;
 80182b2:	490b      	ldr	r1, [pc, #44]	; (80182e0 <etharp_free_entry+0x60>)
 80182b4:	687a      	ldr	r2, [r7, #4]
 80182b6:	4613      	mov	r3, r2
 80182b8:	005b      	lsls	r3, r3, #1
 80182ba:	4413      	add	r3, r2
 80182bc:	00db      	lsls	r3, r3, #3
 80182be:	440b      	add	r3, r1
 80182c0:	2200      	movs	r2, #0
 80182c2:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 80182c4:	4906      	ldr	r1, [pc, #24]	; (80182e0 <etharp_free_entry+0x60>)
 80182c6:	687a      	ldr	r2, [r7, #4]
 80182c8:	4613      	mov	r3, r2
 80182ca:	005b      	lsls	r3, r3, #1
 80182cc:	4413      	add	r3, r2
 80182ce:	00db      	lsls	r3, r3, #3
 80182d0:	440b      	add	r3, r1
 80182d2:	3314      	adds	r3, #20
 80182d4:	2200      	movs	r2, #0
 80182d6:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 80182d8:	bf00      	nop
 80182da:	3708      	adds	r7, #8
 80182dc:	46bd      	mov	sp, r7
 80182de:	bd80      	pop	{r7, pc}
 80182e0:	2000052c 	.word	0x2000052c

080182e4 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 80182e4:	b580      	push	{r7, lr}
 80182e6:	b082      	sub	sp, #8
 80182e8:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80182ea:	2300      	movs	r3, #0
 80182ec:	607b      	str	r3, [r7, #4]
 80182ee:	e096      	b.n	801841e <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 80182f0:	494f      	ldr	r1, [pc, #316]	; (8018430 <etharp_tmr+0x14c>)
 80182f2:	687a      	ldr	r2, [r7, #4]
 80182f4:	4613      	mov	r3, r2
 80182f6:	005b      	lsls	r3, r3, #1
 80182f8:	4413      	add	r3, r2
 80182fa:	00db      	lsls	r3, r3, #3
 80182fc:	440b      	add	r3, r1
 80182fe:	3314      	adds	r3, #20
 8018300:	781b      	ldrb	r3, [r3, #0]
 8018302:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8018304:	78fb      	ldrb	r3, [r7, #3]
 8018306:	2b00      	cmp	r3, #0
 8018308:	f000 8086 	beq.w	8018418 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 801830c:	4948      	ldr	r1, [pc, #288]	; (8018430 <etharp_tmr+0x14c>)
 801830e:	687a      	ldr	r2, [r7, #4]
 8018310:	4613      	mov	r3, r2
 8018312:	005b      	lsls	r3, r3, #1
 8018314:	4413      	add	r3, r2
 8018316:	00db      	lsls	r3, r3, #3
 8018318:	440b      	add	r3, r1
 801831a:	3312      	adds	r3, #18
 801831c:	881b      	ldrh	r3, [r3, #0]
 801831e:	3301      	adds	r3, #1
 8018320:	b298      	uxth	r0, r3
 8018322:	4943      	ldr	r1, [pc, #268]	; (8018430 <etharp_tmr+0x14c>)
 8018324:	687a      	ldr	r2, [r7, #4]
 8018326:	4613      	mov	r3, r2
 8018328:	005b      	lsls	r3, r3, #1
 801832a:	4413      	add	r3, r2
 801832c:	00db      	lsls	r3, r3, #3
 801832e:	440b      	add	r3, r1
 8018330:	3312      	adds	r3, #18
 8018332:	4602      	mov	r2, r0
 8018334:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8018336:	493e      	ldr	r1, [pc, #248]	; (8018430 <etharp_tmr+0x14c>)
 8018338:	687a      	ldr	r2, [r7, #4]
 801833a:	4613      	mov	r3, r2
 801833c:	005b      	lsls	r3, r3, #1
 801833e:	4413      	add	r3, r2
 8018340:	00db      	lsls	r3, r3, #3
 8018342:	440b      	add	r3, r1
 8018344:	3312      	adds	r3, #18
 8018346:	881b      	ldrh	r3, [r3, #0]
 8018348:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 801834c:	d215      	bcs.n	801837a <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801834e:	4938      	ldr	r1, [pc, #224]	; (8018430 <etharp_tmr+0x14c>)
 8018350:	687a      	ldr	r2, [r7, #4]
 8018352:	4613      	mov	r3, r2
 8018354:	005b      	lsls	r3, r3, #1
 8018356:	4413      	add	r3, r2
 8018358:	00db      	lsls	r3, r3, #3
 801835a:	440b      	add	r3, r1
 801835c:	3314      	adds	r3, #20
 801835e:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8018360:	2b01      	cmp	r3, #1
 8018362:	d10e      	bne.n	8018382 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8018364:	4932      	ldr	r1, [pc, #200]	; (8018430 <etharp_tmr+0x14c>)
 8018366:	687a      	ldr	r2, [r7, #4]
 8018368:	4613      	mov	r3, r2
 801836a:	005b      	lsls	r3, r3, #1
 801836c:	4413      	add	r3, r2
 801836e:	00db      	lsls	r3, r3, #3
 8018370:	440b      	add	r3, r1
 8018372:	3312      	adds	r3, #18
 8018374:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8018376:	2b04      	cmp	r3, #4
 8018378:	d903      	bls.n	8018382 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801837a:	6878      	ldr	r0, [r7, #4]
 801837c:	f7ff ff80 	bl	8018280 <etharp_free_entry>
 8018380:	e04a      	b.n	8018418 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8018382:	492b      	ldr	r1, [pc, #172]	; (8018430 <etharp_tmr+0x14c>)
 8018384:	687a      	ldr	r2, [r7, #4]
 8018386:	4613      	mov	r3, r2
 8018388:	005b      	lsls	r3, r3, #1
 801838a:	4413      	add	r3, r2
 801838c:	00db      	lsls	r3, r3, #3
 801838e:	440b      	add	r3, r1
 8018390:	3314      	adds	r3, #20
 8018392:	781b      	ldrb	r3, [r3, #0]
 8018394:	2b03      	cmp	r3, #3
 8018396:	d10a      	bne.n	80183ae <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8018398:	4925      	ldr	r1, [pc, #148]	; (8018430 <etharp_tmr+0x14c>)
 801839a:	687a      	ldr	r2, [r7, #4]
 801839c:	4613      	mov	r3, r2
 801839e:	005b      	lsls	r3, r3, #1
 80183a0:	4413      	add	r3, r2
 80183a2:	00db      	lsls	r3, r3, #3
 80183a4:	440b      	add	r3, r1
 80183a6:	3314      	adds	r3, #20
 80183a8:	2204      	movs	r2, #4
 80183aa:	701a      	strb	r2, [r3, #0]
 80183ac:	e034      	b.n	8018418 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 80183ae:	4920      	ldr	r1, [pc, #128]	; (8018430 <etharp_tmr+0x14c>)
 80183b0:	687a      	ldr	r2, [r7, #4]
 80183b2:	4613      	mov	r3, r2
 80183b4:	005b      	lsls	r3, r3, #1
 80183b6:	4413      	add	r3, r2
 80183b8:	00db      	lsls	r3, r3, #3
 80183ba:	440b      	add	r3, r1
 80183bc:	3314      	adds	r3, #20
 80183be:	781b      	ldrb	r3, [r3, #0]
 80183c0:	2b04      	cmp	r3, #4
 80183c2:	d10a      	bne.n	80183da <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 80183c4:	491a      	ldr	r1, [pc, #104]	; (8018430 <etharp_tmr+0x14c>)
 80183c6:	687a      	ldr	r2, [r7, #4]
 80183c8:	4613      	mov	r3, r2
 80183ca:	005b      	lsls	r3, r3, #1
 80183cc:	4413      	add	r3, r2
 80183ce:	00db      	lsls	r3, r3, #3
 80183d0:	440b      	add	r3, r1
 80183d2:	3314      	adds	r3, #20
 80183d4:	2202      	movs	r2, #2
 80183d6:	701a      	strb	r2, [r3, #0]
 80183d8:	e01e      	b.n	8018418 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80183da:	4915      	ldr	r1, [pc, #84]	; (8018430 <etharp_tmr+0x14c>)
 80183dc:	687a      	ldr	r2, [r7, #4]
 80183de:	4613      	mov	r3, r2
 80183e0:	005b      	lsls	r3, r3, #1
 80183e2:	4413      	add	r3, r2
 80183e4:	00db      	lsls	r3, r3, #3
 80183e6:	440b      	add	r3, r1
 80183e8:	3314      	adds	r3, #20
 80183ea:	781b      	ldrb	r3, [r3, #0]
 80183ec:	2b01      	cmp	r3, #1
 80183ee:	d113      	bne.n	8018418 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 80183f0:	490f      	ldr	r1, [pc, #60]	; (8018430 <etharp_tmr+0x14c>)
 80183f2:	687a      	ldr	r2, [r7, #4]
 80183f4:	4613      	mov	r3, r2
 80183f6:	005b      	lsls	r3, r3, #1
 80183f8:	4413      	add	r3, r2
 80183fa:	00db      	lsls	r3, r3, #3
 80183fc:	440b      	add	r3, r1
 80183fe:	3308      	adds	r3, #8
 8018400:	6818      	ldr	r0, [r3, #0]
 8018402:	687a      	ldr	r2, [r7, #4]
 8018404:	4613      	mov	r3, r2
 8018406:	005b      	lsls	r3, r3, #1
 8018408:	4413      	add	r3, r2
 801840a:	00db      	lsls	r3, r3, #3
 801840c:	4a08      	ldr	r2, [pc, #32]	; (8018430 <etharp_tmr+0x14c>)
 801840e:	4413      	add	r3, r2
 8018410:	3304      	adds	r3, #4
 8018412:	4619      	mov	r1, r3
 8018414:	f000 fe72 	bl	80190fc <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8018418:	687b      	ldr	r3, [r7, #4]
 801841a:	3301      	adds	r3, #1
 801841c:	607b      	str	r3, [r7, #4]
 801841e:	687b      	ldr	r3, [r7, #4]
 8018420:	2b09      	cmp	r3, #9
 8018422:	f77f af65 	ble.w	80182f0 <etharp_tmr+0xc>
      }
    }
  }
}
 8018426:	bf00      	nop
 8018428:	bf00      	nop
 801842a:	3708      	adds	r7, #8
 801842c:	46bd      	mov	sp, r7
 801842e:	bd80      	pop	{r7, pc}
 8018430:	2000052c 	.word	0x2000052c

08018434 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8018434:	b580      	push	{r7, lr}
 8018436:	b08a      	sub	sp, #40	; 0x28
 8018438:	af00      	add	r7, sp, #0
 801843a:	60f8      	str	r0, [r7, #12]
 801843c:	460b      	mov	r3, r1
 801843e:	607a      	str	r2, [r7, #4]
 8018440:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8018442:	230a      	movs	r3, #10
 8018444:	84fb      	strh	r3, [r7, #38]	; 0x26
 8018446:	230a      	movs	r3, #10
 8018448:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 801844a:	230a      	movs	r3, #10
 801844c:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 801844e:	2300      	movs	r3, #0
 8018450:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8018452:	230a      	movs	r3, #10
 8018454:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8018456:	2300      	movs	r3, #0
 8018458:	83bb      	strh	r3, [r7, #28]
 801845a:	2300      	movs	r3, #0
 801845c:	837b      	strh	r3, [r7, #26]
 801845e:	2300      	movs	r3, #0
 8018460:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8018462:	2300      	movs	r3, #0
 8018464:	843b      	strh	r3, [r7, #32]
 8018466:	e0ae      	b.n	80185c6 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8018468:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801846c:	49a6      	ldr	r1, [pc, #664]	; (8018708 <etharp_find_entry+0x2d4>)
 801846e:	4613      	mov	r3, r2
 8018470:	005b      	lsls	r3, r3, #1
 8018472:	4413      	add	r3, r2
 8018474:	00db      	lsls	r3, r3, #3
 8018476:	440b      	add	r3, r1
 8018478:	3314      	adds	r3, #20
 801847a:	781b      	ldrb	r3, [r3, #0]
 801847c:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801847e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8018482:	2b0a      	cmp	r3, #10
 8018484:	d105      	bne.n	8018492 <etharp_find_entry+0x5e>
 8018486:	7dfb      	ldrb	r3, [r7, #23]
 8018488:	2b00      	cmp	r3, #0
 801848a:	d102      	bne.n	8018492 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 801848c:	8c3b      	ldrh	r3, [r7, #32]
 801848e:	847b      	strh	r3, [r7, #34]	; 0x22
 8018490:	e095      	b.n	80185be <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8018492:	7dfb      	ldrb	r3, [r7, #23]
 8018494:	2b00      	cmp	r3, #0
 8018496:	f000 8092 	beq.w	80185be <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 801849a:	7dfb      	ldrb	r3, [r7, #23]
 801849c:	2b01      	cmp	r3, #1
 801849e:	d009      	beq.n	80184b4 <etharp_find_entry+0x80>
 80184a0:	7dfb      	ldrb	r3, [r7, #23]
 80184a2:	2b01      	cmp	r3, #1
 80184a4:	d806      	bhi.n	80184b4 <etharp_find_entry+0x80>
 80184a6:	4b99      	ldr	r3, [pc, #612]	; (801870c <etharp_find_entry+0x2d8>)
 80184a8:	f240 1223 	movw	r2, #291	; 0x123
 80184ac:	4998      	ldr	r1, [pc, #608]	; (8018710 <etharp_find_entry+0x2dc>)
 80184ae:	4899      	ldr	r0, [pc, #612]	; (8018714 <etharp_find_entry+0x2e0>)
 80184b0:	f002 ff56 	bl	801b360 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 80184b4:	68fb      	ldr	r3, [r7, #12]
 80184b6:	2b00      	cmp	r3, #0
 80184b8:	d020      	beq.n	80184fc <etharp_find_entry+0xc8>
 80184ba:	68fb      	ldr	r3, [r7, #12]
 80184bc:	6819      	ldr	r1, [r3, #0]
 80184be:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80184c2:	4891      	ldr	r0, [pc, #580]	; (8018708 <etharp_find_entry+0x2d4>)
 80184c4:	4613      	mov	r3, r2
 80184c6:	005b      	lsls	r3, r3, #1
 80184c8:	4413      	add	r3, r2
 80184ca:	00db      	lsls	r3, r3, #3
 80184cc:	4403      	add	r3, r0
 80184ce:	3304      	adds	r3, #4
 80184d0:	681b      	ldr	r3, [r3, #0]
 80184d2:	4299      	cmp	r1, r3
 80184d4:	d112      	bne.n	80184fc <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 80184d6:	687b      	ldr	r3, [r7, #4]
 80184d8:	2b00      	cmp	r3, #0
 80184da:	d00c      	beq.n	80184f6 <etharp_find_entry+0xc2>
 80184dc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80184e0:	4989      	ldr	r1, [pc, #548]	; (8018708 <etharp_find_entry+0x2d4>)
 80184e2:	4613      	mov	r3, r2
 80184e4:	005b      	lsls	r3, r3, #1
 80184e6:	4413      	add	r3, r2
 80184e8:	00db      	lsls	r3, r3, #3
 80184ea:	440b      	add	r3, r1
 80184ec:	3308      	adds	r3, #8
 80184ee:	681b      	ldr	r3, [r3, #0]
 80184f0:	687a      	ldr	r2, [r7, #4]
 80184f2:	429a      	cmp	r2, r3
 80184f4:	d102      	bne.n	80184fc <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 80184f6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80184fa:	e100      	b.n	80186fe <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 80184fc:	7dfb      	ldrb	r3, [r7, #23]
 80184fe:	2b01      	cmp	r3, #1
 8018500:	d140      	bne.n	8018584 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8018502:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018506:	4980      	ldr	r1, [pc, #512]	; (8018708 <etharp_find_entry+0x2d4>)
 8018508:	4613      	mov	r3, r2
 801850a:	005b      	lsls	r3, r3, #1
 801850c:	4413      	add	r3, r2
 801850e:	00db      	lsls	r3, r3, #3
 8018510:	440b      	add	r3, r1
 8018512:	681b      	ldr	r3, [r3, #0]
 8018514:	2b00      	cmp	r3, #0
 8018516:	d01a      	beq.n	801854e <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8018518:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801851c:	497a      	ldr	r1, [pc, #488]	; (8018708 <etharp_find_entry+0x2d4>)
 801851e:	4613      	mov	r3, r2
 8018520:	005b      	lsls	r3, r3, #1
 8018522:	4413      	add	r3, r2
 8018524:	00db      	lsls	r3, r3, #3
 8018526:	440b      	add	r3, r1
 8018528:	3312      	adds	r3, #18
 801852a:	881b      	ldrh	r3, [r3, #0]
 801852c:	8bba      	ldrh	r2, [r7, #28]
 801852e:	429a      	cmp	r2, r3
 8018530:	d845      	bhi.n	80185be <etharp_find_entry+0x18a>
            old_queue = i;
 8018532:	8c3b      	ldrh	r3, [r7, #32]
 8018534:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8018536:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801853a:	4973      	ldr	r1, [pc, #460]	; (8018708 <etharp_find_entry+0x2d4>)
 801853c:	4613      	mov	r3, r2
 801853e:	005b      	lsls	r3, r3, #1
 8018540:	4413      	add	r3, r2
 8018542:	00db      	lsls	r3, r3, #3
 8018544:	440b      	add	r3, r1
 8018546:	3312      	adds	r3, #18
 8018548:	881b      	ldrh	r3, [r3, #0]
 801854a:	83bb      	strh	r3, [r7, #28]
 801854c:	e037      	b.n	80185be <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 801854e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018552:	496d      	ldr	r1, [pc, #436]	; (8018708 <etharp_find_entry+0x2d4>)
 8018554:	4613      	mov	r3, r2
 8018556:	005b      	lsls	r3, r3, #1
 8018558:	4413      	add	r3, r2
 801855a:	00db      	lsls	r3, r3, #3
 801855c:	440b      	add	r3, r1
 801855e:	3312      	adds	r3, #18
 8018560:	881b      	ldrh	r3, [r3, #0]
 8018562:	8b7a      	ldrh	r2, [r7, #26]
 8018564:	429a      	cmp	r2, r3
 8018566:	d82a      	bhi.n	80185be <etharp_find_entry+0x18a>
            old_pending = i;
 8018568:	8c3b      	ldrh	r3, [r7, #32]
 801856a:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 801856c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018570:	4965      	ldr	r1, [pc, #404]	; (8018708 <etharp_find_entry+0x2d4>)
 8018572:	4613      	mov	r3, r2
 8018574:	005b      	lsls	r3, r3, #1
 8018576:	4413      	add	r3, r2
 8018578:	00db      	lsls	r3, r3, #3
 801857a:	440b      	add	r3, r1
 801857c:	3312      	adds	r3, #18
 801857e:	881b      	ldrh	r3, [r3, #0]
 8018580:	837b      	strh	r3, [r7, #26]
 8018582:	e01c      	b.n	80185be <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8018584:	7dfb      	ldrb	r3, [r7, #23]
 8018586:	2b01      	cmp	r3, #1
 8018588:	d919      	bls.n	80185be <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 801858a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801858e:	495e      	ldr	r1, [pc, #376]	; (8018708 <etharp_find_entry+0x2d4>)
 8018590:	4613      	mov	r3, r2
 8018592:	005b      	lsls	r3, r3, #1
 8018594:	4413      	add	r3, r2
 8018596:	00db      	lsls	r3, r3, #3
 8018598:	440b      	add	r3, r1
 801859a:	3312      	adds	r3, #18
 801859c:	881b      	ldrh	r3, [r3, #0]
 801859e:	8b3a      	ldrh	r2, [r7, #24]
 80185a0:	429a      	cmp	r2, r3
 80185a2:	d80c      	bhi.n	80185be <etharp_find_entry+0x18a>
            old_stable = i;
 80185a4:	8c3b      	ldrh	r3, [r7, #32]
 80185a6:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 80185a8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80185ac:	4956      	ldr	r1, [pc, #344]	; (8018708 <etharp_find_entry+0x2d4>)
 80185ae:	4613      	mov	r3, r2
 80185b0:	005b      	lsls	r3, r3, #1
 80185b2:	4413      	add	r3, r2
 80185b4:	00db      	lsls	r3, r3, #3
 80185b6:	440b      	add	r3, r1
 80185b8:	3312      	adds	r3, #18
 80185ba:	881b      	ldrh	r3, [r3, #0]
 80185bc:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80185be:	8c3b      	ldrh	r3, [r7, #32]
 80185c0:	3301      	adds	r3, #1
 80185c2:	b29b      	uxth	r3, r3
 80185c4:	843b      	strh	r3, [r7, #32]
 80185c6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80185ca:	2b09      	cmp	r3, #9
 80185cc:	f77f af4c 	ble.w	8018468 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 80185d0:	7afb      	ldrb	r3, [r7, #11]
 80185d2:	f003 0302 	and.w	r3, r3, #2
 80185d6:	2b00      	cmp	r3, #0
 80185d8:	d108      	bne.n	80185ec <etharp_find_entry+0x1b8>
 80185da:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80185de:	2b0a      	cmp	r3, #10
 80185e0:	d107      	bne.n	80185f2 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 80185e2:	7afb      	ldrb	r3, [r7, #11]
 80185e4:	f003 0301 	and.w	r3, r3, #1
 80185e8:	2b00      	cmp	r3, #0
 80185ea:	d102      	bne.n	80185f2 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 80185ec:	f04f 33ff 	mov.w	r3, #4294967295
 80185f0:	e085      	b.n	80186fe <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 80185f2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80185f6:	2b09      	cmp	r3, #9
 80185f8:	dc02      	bgt.n	8018600 <etharp_find_entry+0x1cc>
    i = empty;
 80185fa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80185fc:	843b      	strh	r3, [r7, #32]
 80185fe:	e039      	b.n	8018674 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8018600:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8018604:	2b09      	cmp	r3, #9
 8018606:	dc14      	bgt.n	8018632 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8018608:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801860a:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 801860c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018610:	493d      	ldr	r1, [pc, #244]	; (8018708 <etharp_find_entry+0x2d4>)
 8018612:	4613      	mov	r3, r2
 8018614:	005b      	lsls	r3, r3, #1
 8018616:	4413      	add	r3, r2
 8018618:	00db      	lsls	r3, r3, #3
 801861a:	440b      	add	r3, r1
 801861c:	681b      	ldr	r3, [r3, #0]
 801861e:	2b00      	cmp	r3, #0
 8018620:	d018      	beq.n	8018654 <etharp_find_entry+0x220>
 8018622:	4b3a      	ldr	r3, [pc, #232]	; (801870c <etharp_find_entry+0x2d8>)
 8018624:	f240 126d 	movw	r2, #365	; 0x16d
 8018628:	493b      	ldr	r1, [pc, #236]	; (8018718 <etharp_find_entry+0x2e4>)
 801862a:	483a      	ldr	r0, [pc, #232]	; (8018714 <etharp_find_entry+0x2e0>)
 801862c:	f002 fe98 	bl	801b360 <iprintf>
 8018630:	e010      	b.n	8018654 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8018632:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8018636:	2b09      	cmp	r3, #9
 8018638:	dc02      	bgt.n	8018640 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 801863a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801863c:	843b      	strh	r3, [r7, #32]
 801863e:	e009      	b.n	8018654 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8018640:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8018644:	2b09      	cmp	r3, #9
 8018646:	dc02      	bgt.n	801864e <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8018648:	8bfb      	ldrh	r3, [r7, #30]
 801864a:	843b      	strh	r3, [r7, #32]
 801864c:	e002      	b.n	8018654 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 801864e:	f04f 33ff 	mov.w	r3, #4294967295
 8018652:	e054      	b.n	80186fe <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8018654:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8018658:	2b09      	cmp	r3, #9
 801865a:	dd06      	ble.n	801866a <etharp_find_entry+0x236>
 801865c:	4b2b      	ldr	r3, [pc, #172]	; (801870c <etharp_find_entry+0x2d8>)
 801865e:	f240 127f 	movw	r2, #383	; 0x17f
 8018662:	492e      	ldr	r1, [pc, #184]	; (801871c <etharp_find_entry+0x2e8>)
 8018664:	482b      	ldr	r0, [pc, #172]	; (8018714 <etharp_find_entry+0x2e0>)
 8018666:	f002 fe7b 	bl	801b360 <iprintf>
    etharp_free_entry(i);
 801866a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801866e:	4618      	mov	r0, r3
 8018670:	f7ff fe06 	bl	8018280 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8018674:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8018678:	2b09      	cmp	r3, #9
 801867a:	dd06      	ble.n	801868a <etharp_find_entry+0x256>
 801867c:	4b23      	ldr	r3, [pc, #140]	; (801870c <etharp_find_entry+0x2d8>)
 801867e:	f240 1283 	movw	r2, #387	; 0x183
 8018682:	4926      	ldr	r1, [pc, #152]	; (801871c <etharp_find_entry+0x2e8>)
 8018684:	4823      	ldr	r0, [pc, #140]	; (8018714 <etharp_find_entry+0x2e0>)
 8018686:	f002 fe6b 	bl	801b360 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801868a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801868e:	491e      	ldr	r1, [pc, #120]	; (8018708 <etharp_find_entry+0x2d4>)
 8018690:	4613      	mov	r3, r2
 8018692:	005b      	lsls	r3, r3, #1
 8018694:	4413      	add	r3, r2
 8018696:	00db      	lsls	r3, r3, #3
 8018698:	440b      	add	r3, r1
 801869a:	3314      	adds	r3, #20
 801869c:	781b      	ldrb	r3, [r3, #0]
 801869e:	2b00      	cmp	r3, #0
 80186a0:	d006      	beq.n	80186b0 <etharp_find_entry+0x27c>
 80186a2:	4b1a      	ldr	r3, [pc, #104]	; (801870c <etharp_find_entry+0x2d8>)
 80186a4:	f44f 72c2 	mov.w	r2, #388	; 0x184
 80186a8:	491d      	ldr	r1, [pc, #116]	; (8018720 <etharp_find_entry+0x2ec>)
 80186aa:	481a      	ldr	r0, [pc, #104]	; (8018714 <etharp_find_entry+0x2e0>)
 80186ac:	f002 fe58 	bl	801b360 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 80186b0:	68fb      	ldr	r3, [r7, #12]
 80186b2:	2b00      	cmp	r3, #0
 80186b4:	d00b      	beq.n	80186ce <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 80186b6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80186ba:	68fb      	ldr	r3, [r7, #12]
 80186bc:	6819      	ldr	r1, [r3, #0]
 80186be:	4812      	ldr	r0, [pc, #72]	; (8018708 <etharp_find_entry+0x2d4>)
 80186c0:	4613      	mov	r3, r2
 80186c2:	005b      	lsls	r3, r3, #1
 80186c4:	4413      	add	r3, r2
 80186c6:	00db      	lsls	r3, r3, #3
 80186c8:	4403      	add	r3, r0
 80186ca:	3304      	adds	r3, #4
 80186cc:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 80186ce:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80186d2:	490d      	ldr	r1, [pc, #52]	; (8018708 <etharp_find_entry+0x2d4>)
 80186d4:	4613      	mov	r3, r2
 80186d6:	005b      	lsls	r3, r3, #1
 80186d8:	4413      	add	r3, r2
 80186da:	00db      	lsls	r3, r3, #3
 80186dc:	440b      	add	r3, r1
 80186de:	3312      	adds	r3, #18
 80186e0:	2200      	movs	r2, #0
 80186e2:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 80186e4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80186e8:	4907      	ldr	r1, [pc, #28]	; (8018708 <etharp_find_entry+0x2d4>)
 80186ea:	4613      	mov	r3, r2
 80186ec:	005b      	lsls	r3, r3, #1
 80186ee:	4413      	add	r3, r2
 80186f0:	00db      	lsls	r3, r3, #3
 80186f2:	440b      	add	r3, r1
 80186f4:	3308      	adds	r3, #8
 80186f6:	687a      	ldr	r2, [r7, #4]
 80186f8:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 80186fa:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 80186fe:	4618      	mov	r0, r3
 8018700:	3728      	adds	r7, #40	; 0x28
 8018702:	46bd      	mov	sp, r7
 8018704:	bd80      	pop	{r7, pc}
 8018706:	bf00      	nop
 8018708:	2000052c 	.word	0x2000052c
 801870c:	08023224 	.word	0x08023224
 8018710:	0802325c 	.word	0x0802325c
 8018714:	0802329c 	.word	0x0802329c
 8018718:	080232c4 	.word	0x080232c4
 801871c:	080232dc 	.word	0x080232dc
 8018720:	080232f0 	.word	0x080232f0

08018724 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8018724:	b580      	push	{r7, lr}
 8018726:	b088      	sub	sp, #32
 8018728:	af02      	add	r7, sp, #8
 801872a:	60f8      	str	r0, [r7, #12]
 801872c:	60b9      	str	r1, [r7, #8]
 801872e:	607a      	str	r2, [r7, #4]
 8018730:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8018732:	68fb      	ldr	r3, [r7, #12]
 8018734:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8018738:	2b06      	cmp	r3, #6
 801873a:	d006      	beq.n	801874a <etharp_update_arp_entry+0x26>
 801873c:	4b48      	ldr	r3, [pc, #288]	; (8018860 <etharp_update_arp_entry+0x13c>)
 801873e:	f240 12a9 	movw	r2, #425	; 0x1a9
 8018742:	4948      	ldr	r1, [pc, #288]	; (8018864 <etharp_update_arp_entry+0x140>)
 8018744:	4848      	ldr	r0, [pc, #288]	; (8018868 <etharp_update_arp_entry+0x144>)
 8018746:	f002 fe0b 	bl	801b360 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801874a:	68bb      	ldr	r3, [r7, #8]
 801874c:	2b00      	cmp	r3, #0
 801874e:	d012      	beq.n	8018776 <etharp_update_arp_entry+0x52>
 8018750:	68bb      	ldr	r3, [r7, #8]
 8018752:	681b      	ldr	r3, [r3, #0]
 8018754:	2b00      	cmp	r3, #0
 8018756:	d00e      	beq.n	8018776 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8018758:	68bb      	ldr	r3, [r7, #8]
 801875a:	681b      	ldr	r3, [r3, #0]
 801875c:	68f9      	ldr	r1, [r7, #12]
 801875e:	4618      	mov	r0, r3
 8018760:	f001 f920 	bl	80199a4 <ip4_addr_isbroadcast_u32>
 8018764:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8018766:	2b00      	cmp	r3, #0
 8018768:	d105      	bne.n	8018776 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 801876a:	68bb      	ldr	r3, [r7, #8]
 801876c:	681b      	ldr	r3, [r3, #0]
 801876e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8018772:	2be0      	cmp	r3, #224	; 0xe0
 8018774:	d102      	bne.n	801877c <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8018776:	f06f 030f 	mvn.w	r3, #15
 801877a:	e06c      	b.n	8018856 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 801877c:	78fb      	ldrb	r3, [r7, #3]
 801877e:	68fa      	ldr	r2, [r7, #12]
 8018780:	4619      	mov	r1, r3
 8018782:	68b8      	ldr	r0, [r7, #8]
 8018784:	f7ff fe56 	bl	8018434 <etharp_find_entry>
 8018788:	4603      	mov	r3, r0
 801878a:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 801878c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8018790:	2b00      	cmp	r3, #0
 8018792:	da02      	bge.n	801879a <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8018794:	8afb      	ldrh	r3, [r7, #22]
 8018796:	b25b      	sxtb	r3, r3
 8018798:	e05d      	b.n	8018856 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 801879a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801879e:	4933      	ldr	r1, [pc, #204]	; (801886c <etharp_update_arp_entry+0x148>)
 80187a0:	4613      	mov	r3, r2
 80187a2:	005b      	lsls	r3, r3, #1
 80187a4:	4413      	add	r3, r2
 80187a6:	00db      	lsls	r3, r3, #3
 80187a8:	440b      	add	r3, r1
 80187aa:	3314      	adds	r3, #20
 80187ac:	2202      	movs	r2, #2
 80187ae:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 80187b0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80187b4:	492d      	ldr	r1, [pc, #180]	; (801886c <etharp_update_arp_entry+0x148>)
 80187b6:	4613      	mov	r3, r2
 80187b8:	005b      	lsls	r3, r3, #1
 80187ba:	4413      	add	r3, r2
 80187bc:	00db      	lsls	r3, r3, #3
 80187be:	440b      	add	r3, r1
 80187c0:	3308      	adds	r3, #8
 80187c2:	68fa      	ldr	r2, [r7, #12]
 80187c4:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 80187c6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80187ca:	4613      	mov	r3, r2
 80187cc:	005b      	lsls	r3, r3, #1
 80187ce:	4413      	add	r3, r2
 80187d0:	00db      	lsls	r3, r3, #3
 80187d2:	3308      	adds	r3, #8
 80187d4:	4a25      	ldr	r2, [pc, #148]	; (801886c <etharp_update_arp_entry+0x148>)
 80187d6:	4413      	add	r3, r2
 80187d8:	3304      	adds	r3, #4
 80187da:	2206      	movs	r2, #6
 80187dc:	6879      	ldr	r1, [r7, #4]
 80187de:	4618      	mov	r0, r3
 80187e0:	f002 f87a 	bl	801a8d8 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 80187e4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80187e8:	4920      	ldr	r1, [pc, #128]	; (801886c <etharp_update_arp_entry+0x148>)
 80187ea:	4613      	mov	r3, r2
 80187ec:	005b      	lsls	r3, r3, #1
 80187ee:	4413      	add	r3, r2
 80187f0:	00db      	lsls	r3, r3, #3
 80187f2:	440b      	add	r3, r1
 80187f4:	3312      	adds	r3, #18
 80187f6:	2200      	movs	r2, #0
 80187f8:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 80187fa:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80187fe:	491b      	ldr	r1, [pc, #108]	; (801886c <etharp_update_arp_entry+0x148>)
 8018800:	4613      	mov	r3, r2
 8018802:	005b      	lsls	r3, r3, #1
 8018804:	4413      	add	r3, r2
 8018806:	00db      	lsls	r3, r3, #3
 8018808:	440b      	add	r3, r1
 801880a:	681b      	ldr	r3, [r3, #0]
 801880c:	2b00      	cmp	r3, #0
 801880e:	d021      	beq.n	8018854 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8018810:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8018814:	4915      	ldr	r1, [pc, #84]	; (801886c <etharp_update_arp_entry+0x148>)
 8018816:	4613      	mov	r3, r2
 8018818:	005b      	lsls	r3, r3, #1
 801881a:	4413      	add	r3, r2
 801881c:	00db      	lsls	r3, r3, #3
 801881e:	440b      	add	r3, r1
 8018820:	681b      	ldr	r3, [r3, #0]
 8018822:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8018824:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8018828:	4910      	ldr	r1, [pc, #64]	; (801886c <etharp_update_arp_entry+0x148>)
 801882a:	4613      	mov	r3, r2
 801882c:	005b      	lsls	r3, r3, #1
 801882e:	4413      	add	r3, r2
 8018830:	00db      	lsls	r3, r3, #3
 8018832:	440b      	add	r3, r1
 8018834:	2200      	movs	r2, #0
 8018836:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8018838:	68fb      	ldr	r3, [r7, #12]
 801883a:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 801883e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8018842:	9300      	str	r3, [sp, #0]
 8018844:	687b      	ldr	r3, [r7, #4]
 8018846:	6939      	ldr	r1, [r7, #16]
 8018848:	68f8      	ldr	r0, [r7, #12]
 801884a:	f001 ffb3 	bl	801a7b4 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801884e:	6938      	ldr	r0, [r7, #16]
 8018850:	f7f7 fd08 	bl	8010264 <pbuf_free>
  }
  return ERR_OK;
 8018854:	2300      	movs	r3, #0
}
 8018856:	4618      	mov	r0, r3
 8018858:	3718      	adds	r7, #24
 801885a:	46bd      	mov	sp, r7
 801885c:	bd80      	pop	{r7, pc}
 801885e:	bf00      	nop
 8018860:	08023224 	.word	0x08023224
 8018864:	0802331c 	.word	0x0802331c
 8018868:	0802329c 	.word	0x0802329c
 801886c:	2000052c 	.word	0x2000052c

08018870 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8018870:	b580      	push	{r7, lr}
 8018872:	b084      	sub	sp, #16
 8018874:	af00      	add	r7, sp, #0
 8018876:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8018878:	2300      	movs	r3, #0
 801887a:	60fb      	str	r3, [r7, #12]
 801887c:	e01e      	b.n	80188bc <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 801887e:	4913      	ldr	r1, [pc, #76]	; (80188cc <etharp_cleanup_netif+0x5c>)
 8018880:	68fa      	ldr	r2, [r7, #12]
 8018882:	4613      	mov	r3, r2
 8018884:	005b      	lsls	r3, r3, #1
 8018886:	4413      	add	r3, r2
 8018888:	00db      	lsls	r3, r3, #3
 801888a:	440b      	add	r3, r1
 801888c:	3314      	adds	r3, #20
 801888e:	781b      	ldrb	r3, [r3, #0]
 8018890:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8018892:	7afb      	ldrb	r3, [r7, #11]
 8018894:	2b00      	cmp	r3, #0
 8018896:	d00e      	beq.n	80188b6 <etharp_cleanup_netif+0x46>
 8018898:	490c      	ldr	r1, [pc, #48]	; (80188cc <etharp_cleanup_netif+0x5c>)
 801889a:	68fa      	ldr	r2, [r7, #12]
 801889c:	4613      	mov	r3, r2
 801889e:	005b      	lsls	r3, r3, #1
 80188a0:	4413      	add	r3, r2
 80188a2:	00db      	lsls	r3, r3, #3
 80188a4:	440b      	add	r3, r1
 80188a6:	3308      	adds	r3, #8
 80188a8:	681b      	ldr	r3, [r3, #0]
 80188aa:	687a      	ldr	r2, [r7, #4]
 80188ac:	429a      	cmp	r2, r3
 80188ae:	d102      	bne.n	80188b6 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 80188b0:	68f8      	ldr	r0, [r7, #12]
 80188b2:	f7ff fce5 	bl	8018280 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80188b6:	68fb      	ldr	r3, [r7, #12]
 80188b8:	3301      	adds	r3, #1
 80188ba:	60fb      	str	r3, [r7, #12]
 80188bc:	68fb      	ldr	r3, [r7, #12]
 80188be:	2b09      	cmp	r3, #9
 80188c0:	dddd      	ble.n	801887e <etharp_cleanup_netif+0xe>
    }
  }
}
 80188c2:	bf00      	nop
 80188c4:	bf00      	nop
 80188c6:	3710      	adds	r7, #16
 80188c8:	46bd      	mov	sp, r7
 80188ca:	bd80      	pop	{r7, pc}
 80188cc:	2000052c 	.word	0x2000052c

080188d0 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 80188d0:	b5b0      	push	{r4, r5, r7, lr}
 80188d2:	b08a      	sub	sp, #40	; 0x28
 80188d4:	af04      	add	r7, sp, #16
 80188d6:	6078      	str	r0, [r7, #4]
 80188d8:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80188da:	683b      	ldr	r3, [r7, #0]
 80188dc:	2b00      	cmp	r3, #0
 80188de:	d107      	bne.n	80188f0 <etharp_input+0x20>
 80188e0:	4b3f      	ldr	r3, [pc, #252]	; (80189e0 <etharp_input+0x110>)
 80188e2:	f240 228a 	movw	r2, #650	; 0x28a
 80188e6:	493f      	ldr	r1, [pc, #252]	; (80189e4 <etharp_input+0x114>)
 80188e8:	483f      	ldr	r0, [pc, #252]	; (80189e8 <etharp_input+0x118>)
 80188ea:	f002 fd39 	bl	801b360 <iprintf>
 80188ee:	e074      	b.n	80189da <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 80188f0:	687b      	ldr	r3, [r7, #4]
 80188f2:	685b      	ldr	r3, [r3, #4]
 80188f4:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80188f6:	693b      	ldr	r3, [r7, #16]
 80188f8:	881b      	ldrh	r3, [r3, #0]
 80188fa:	b29b      	uxth	r3, r3
 80188fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8018900:	d10c      	bne.n	801891c <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8018902:	693b      	ldr	r3, [r7, #16]
 8018904:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8018906:	2b06      	cmp	r3, #6
 8018908:	d108      	bne.n	801891c <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801890a:	693b      	ldr	r3, [r7, #16]
 801890c:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801890e:	2b04      	cmp	r3, #4
 8018910:	d104      	bne.n	801891c <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8018912:	693b      	ldr	r3, [r7, #16]
 8018914:	885b      	ldrh	r3, [r3, #2]
 8018916:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8018918:	2b08      	cmp	r3, #8
 801891a:	d003      	beq.n	8018924 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 801891c:	6878      	ldr	r0, [r7, #4]
 801891e:	f7f7 fca1 	bl	8010264 <pbuf_free>
    return;
 8018922:	e05a      	b.n	80189da <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8018924:	693b      	ldr	r3, [r7, #16]
 8018926:	330e      	adds	r3, #14
 8018928:	681b      	ldr	r3, [r3, #0]
 801892a:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 801892c:	693b      	ldr	r3, [r7, #16]
 801892e:	3318      	adds	r3, #24
 8018930:	681b      	ldr	r3, [r3, #0]
 8018932:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8018934:	683b      	ldr	r3, [r7, #0]
 8018936:	3304      	adds	r3, #4
 8018938:	681b      	ldr	r3, [r3, #0]
 801893a:	2b00      	cmp	r3, #0
 801893c:	d102      	bne.n	8018944 <etharp_input+0x74>
    for_us = 0;
 801893e:	2300      	movs	r3, #0
 8018940:	75fb      	strb	r3, [r7, #23]
 8018942:	e009      	b.n	8018958 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8018944:	68ba      	ldr	r2, [r7, #8]
 8018946:	683b      	ldr	r3, [r7, #0]
 8018948:	3304      	adds	r3, #4
 801894a:	681b      	ldr	r3, [r3, #0]
 801894c:	429a      	cmp	r2, r3
 801894e:	bf0c      	ite	eq
 8018950:	2301      	moveq	r3, #1
 8018952:	2300      	movne	r3, #0
 8018954:	b2db      	uxtb	r3, r3
 8018956:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8018958:	693b      	ldr	r3, [r7, #16]
 801895a:	f103 0208 	add.w	r2, r3, #8
 801895e:	7dfb      	ldrb	r3, [r7, #23]
 8018960:	2b00      	cmp	r3, #0
 8018962:	d001      	beq.n	8018968 <etharp_input+0x98>
 8018964:	2301      	movs	r3, #1
 8018966:	e000      	b.n	801896a <etharp_input+0x9a>
 8018968:	2302      	movs	r3, #2
 801896a:	f107 010c 	add.w	r1, r7, #12
 801896e:	6838      	ldr	r0, [r7, #0]
 8018970:	f7ff fed8 	bl	8018724 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8018974:	693b      	ldr	r3, [r7, #16]
 8018976:	88db      	ldrh	r3, [r3, #6]
 8018978:	b29b      	uxth	r3, r3
 801897a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801897e:	d003      	beq.n	8018988 <etharp_input+0xb8>
 8018980:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8018984:	d01e      	beq.n	80189c4 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8018986:	e025      	b.n	80189d4 <etharp_input+0x104>
      if (for_us) {
 8018988:	7dfb      	ldrb	r3, [r7, #23]
 801898a:	2b00      	cmp	r3, #0
 801898c:	d021      	beq.n	80189d2 <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801898e:	683b      	ldr	r3, [r7, #0]
 8018990:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 8018994:	693b      	ldr	r3, [r7, #16]
 8018996:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801899a:	683b      	ldr	r3, [r7, #0]
 801899c:	f103 052a 	add.w	r5, r3, #42	; 0x2a
 80189a0:	683b      	ldr	r3, [r7, #0]
 80189a2:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 80189a4:	693a      	ldr	r2, [r7, #16]
 80189a6:	3208      	adds	r2, #8
        etharp_raw(netif,
 80189a8:	2102      	movs	r1, #2
 80189aa:	9103      	str	r1, [sp, #12]
 80189ac:	f107 010c 	add.w	r1, r7, #12
 80189b0:	9102      	str	r1, [sp, #8]
 80189b2:	9201      	str	r2, [sp, #4]
 80189b4:	9300      	str	r3, [sp, #0]
 80189b6:	462b      	mov	r3, r5
 80189b8:	4622      	mov	r2, r4
 80189ba:	4601      	mov	r1, r0
 80189bc:	6838      	ldr	r0, [r7, #0]
 80189be:	f000 faef 	bl	8018fa0 <etharp_raw>
      break;
 80189c2:	e006      	b.n	80189d2 <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 80189c4:	f107 030c 	add.w	r3, r7, #12
 80189c8:	4619      	mov	r1, r3
 80189ca:	6838      	ldr	r0, [r7, #0]
 80189cc:	f7fe f9fc 	bl	8016dc8 <dhcp_arp_reply>
      break;
 80189d0:	e000      	b.n	80189d4 <etharp_input+0x104>
      break;
 80189d2:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 80189d4:	6878      	ldr	r0, [r7, #4]
 80189d6:	f7f7 fc45 	bl	8010264 <pbuf_free>
}
 80189da:	3718      	adds	r7, #24
 80189dc:	46bd      	mov	sp, r7
 80189de:	bdb0      	pop	{r4, r5, r7, pc}
 80189e0:	08023224 	.word	0x08023224
 80189e4:	08023374 	.word	0x08023374
 80189e8:	0802329c 	.word	0x0802329c

080189ec <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 80189ec:	b580      	push	{r7, lr}
 80189ee:	b086      	sub	sp, #24
 80189f0:	af02      	add	r7, sp, #8
 80189f2:	60f8      	str	r0, [r7, #12]
 80189f4:	60b9      	str	r1, [r7, #8]
 80189f6:	4613      	mov	r3, r2
 80189f8:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 80189fa:	79fa      	ldrb	r2, [r7, #7]
 80189fc:	4944      	ldr	r1, [pc, #272]	; (8018b10 <etharp_output_to_arp_index+0x124>)
 80189fe:	4613      	mov	r3, r2
 8018a00:	005b      	lsls	r3, r3, #1
 8018a02:	4413      	add	r3, r2
 8018a04:	00db      	lsls	r3, r3, #3
 8018a06:	440b      	add	r3, r1
 8018a08:	3314      	adds	r3, #20
 8018a0a:	781b      	ldrb	r3, [r3, #0]
 8018a0c:	2b01      	cmp	r3, #1
 8018a0e:	d806      	bhi.n	8018a1e <etharp_output_to_arp_index+0x32>
 8018a10:	4b40      	ldr	r3, [pc, #256]	; (8018b14 <etharp_output_to_arp_index+0x128>)
 8018a12:	f240 22ee 	movw	r2, #750	; 0x2ee
 8018a16:	4940      	ldr	r1, [pc, #256]	; (8018b18 <etharp_output_to_arp_index+0x12c>)
 8018a18:	4840      	ldr	r0, [pc, #256]	; (8018b1c <etharp_output_to_arp_index+0x130>)
 8018a1a:	f002 fca1 	bl	801b360 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8018a1e:	79fa      	ldrb	r2, [r7, #7]
 8018a20:	493b      	ldr	r1, [pc, #236]	; (8018b10 <etharp_output_to_arp_index+0x124>)
 8018a22:	4613      	mov	r3, r2
 8018a24:	005b      	lsls	r3, r3, #1
 8018a26:	4413      	add	r3, r2
 8018a28:	00db      	lsls	r3, r3, #3
 8018a2a:	440b      	add	r3, r1
 8018a2c:	3314      	adds	r3, #20
 8018a2e:	781b      	ldrb	r3, [r3, #0]
 8018a30:	2b02      	cmp	r3, #2
 8018a32:	d153      	bne.n	8018adc <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8018a34:	79fa      	ldrb	r2, [r7, #7]
 8018a36:	4936      	ldr	r1, [pc, #216]	; (8018b10 <etharp_output_to_arp_index+0x124>)
 8018a38:	4613      	mov	r3, r2
 8018a3a:	005b      	lsls	r3, r3, #1
 8018a3c:	4413      	add	r3, r2
 8018a3e:	00db      	lsls	r3, r3, #3
 8018a40:	440b      	add	r3, r1
 8018a42:	3312      	adds	r3, #18
 8018a44:	881b      	ldrh	r3, [r3, #0]
 8018a46:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8018a4a:	d919      	bls.n	8018a80 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8018a4c:	79fa      	ldrb	r2, [r7, #7]
 8018a4e:	4613      	mov	r3, r2
 8018a50:	005b      	lsls	r3, r3, #1
 8018a52:	4413      	add	r3, r2
 8018a54:	00db      	lsls	r3, r3, #3
 8018a56:	4a2e      	ldr	r2, [pc, #184]	; (8018b10 <etharp_output_to_arp_index+0x124>)
 8018a58:	4413      	add	r3, r2
 8018a5a:	3304      	adds	r3, #4
 8018a5c:	4619      	mov	r1, r3
 8018a5e:	68f8      	ldr	r0, [r7, #12]
 8018a60:	f000 fb4c 	bl	80190fc <etharp_request>
 8018a64:	4603      	mov	r3, r0
 8018a66:	2b00      	cmp	r3, #0
 8018a68:	d138      	bne.n	8018adc <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8018a6a:	79fa      	ldrb	r2, [r7, #7]
 8018a6c:	4928      	ldr	r1, [pc, #160]	; (8018b10 <etharp_output_to_arp_index+0x124>)
 8018a6e:	4613      	mov	r3, r2
 8018a70:	005b      	lsls	r3, r3, #1
 8018a72:	4413      	add	r3, r2
 8018a74:	00db      	lsls	r3, r3, #3
 8018a76:	440b      	add	r3, r1
 8018a78:	3314      	adds	r3, #20
 8018a7a:	2203      	movs	r2, #3
 8018a7c:	701a      	strb	r2, [r3, #0]
 8018a7e:	e02d      	b.n	8018adc <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8018a80:	79fa      	ldrb	r2, [r7, #7]
 8018a82:	4923      	ldr	r1, [pc, #140]	; (8018b10 <etharp_output_to_arp_index+0x124>)
 8018a84:	4613      	mov	r3, r2
 8018a86:	005b      	lsls	r3, r3, #1
 8018a88:	4413      	add	r3, r2
 8018a8a:	00db      	lsls	r3, r3, #3
 8018a8c:	440b      	add	r3, r1
 8018a8e:	3312      	adds	r3, #18
 8018a90:	881b      	ldrh	r3, [r3, #0]
 8018a92:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8018a96:	d321      	bcc.n	8018adc <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8018a98:	79fa      	ldrb	r2, [r7, #7]
 8018a9a:	4613      	mov	r3, r2
 8018a9c:	005b      	lsls	r3, r3, #1
 8018a9e:	4413      	add	r3, r2
 8018aa0:	00db      	lsls	r3, r3, #3
 8018aa2:	4a1b      	ldr	r2, [pc, #108]	; (8018b10 <etharp_output_to_arp_index+0x124>)
 8018aa4:	4413      	add	r3, r2
 8018aa6:	1d19      	adds	r1, r3, #4
 8018aa8:	79fa      	ldrb	r2, [r7, #7]
 8018aaa:	4613      	mov	r3, r2
 8018aac:	005b      	lsls	r3, r3, #1
 8018aae:	4413      	add	r3, r2
 8018ab0:	00db      	lsls	r3, r3, #3
 8018ab2:	3308      	adds	r3, #8
 8018ab4:	4a16      	ldr	r2, [pc, #88]	; (8018b10 <etharp_output_to_arp_index+0x124>)
 8018ab6:	4413      	add	r3, r2
 8018ab8:	3304      	adds	r3, #4
 8018aba:	461a      	mov	r2, r3
 8018abc:	68f8      	ldr	r0, [r7, #12]
 8018abe:	f000 fafb 	bl	80190b8 <etharp_request_dst>
 8018ac2:	4603      	mov	r3, r0
 8018ac4:	2b00      	cmp	r3, #0
 8018ac6:	d109      	bne.n	8018adc <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8018ac8:	79fa      	ldrb	r2, [r7, #7]
 8018aca:	4911      	ldr	r1, [pc, #68]	; (8018b10 <etharp_output_to_arp_index+0x124>)
 8018acc:	4613      	mov	r3, r2
 8018ace:	005b      	lsls	r3, r3, #1
 8018ad0:	4413      	add	r3, r2
 8018ad2:	00db      	lsls	r3, r3, #3
 8018ad4:	440b      	add	r3, r1
 8018ad6:	3314      	adds	r3, #20
 8018ad8:	2203      	movs	r2, #3
 8018ada:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8018adc:	68fb      	ldr	r3, [r7, #12]
 8018ade:	f103 012a 	add.w	r1, r3, #42	; 0x2a
 8018ae2:	79fa      	ldrb	r2, [r7, #7]
 8018ae4:	4613      	mov	r3, r2
 8018ae6:	005b      	lsls	r3, r3, #1
 8018ae8:	4413      	add	r3, r2
 8018aea:	00db      	lsls	r3, r3, #3
 8018aec:	3308      	adds	r3, #8
 8018aee:	4a08      	ldr	r2, [pc, #32]	; (8018b10 <etharp_output_to_arp_index+0x124>)
 8018af0:	4413      	add	r3, r2
 8018af2:	3304      	adds	r3, #4
 8018af4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8018af8:	9200      	str	r2, [sp, #0]
 8018afa:	460a      	mov	r2, r1
 8018afc:	68b9      	ldr	r1, [r7, #8]
 8018afe:	68f8      	ldr	r0, [r7, #12]
 8018b00:	f001 fe58 	bl	801a7b4 <ethernet_output>
 8018b04:	4603      	mov	r3, r0
}
 8018b06:	4618      	mov	r0, r3
 8018b08:	3710      	adds	r7, #16
 8018b0a:	46bd      	mov	sp, r7
 8018b0c:	bd80      	pop	{r7, pc}
 8018b0e:	bf00      	nop
 8018b10:	2000052c 	.word	0x2000052c
 8018b14:	08023224 	.word	0x08023224
 8018b18:	08023394 	.word	0x08023394
 8018b1c:	0802329c 	.word	0x0802329c

08018b20 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8018b20:	b580      	push	{r7, lr}
 8018b22:	b08a      	sub	sp, #40	; 0x28
 8018b24:	af02      	add	r7, sp, #8
 8018b26:	60f8      	str	r0, [r7, #12]
 8018b28:	60b9      	str	r1, [r7, #8]
 8018b2a:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8018b2c:	687b      	ldr	r3, [r7, #4]
 8018b2e:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8018b30:	68fb      	ldr	r3, [r7, #12]
 8018b32:	2b00      	cmp	r3, #0
 8018b34:	d106      	bne.n	8018b44 <etharp_output+0x24>
 8018b36:	4b73      	ldr	r3, [pc, #460]	; (8018d04 <etharp_output+0x1e4>)
 8018b38:	f240 321e 	movw	r2, #798	; 0x31e
 8018b3c:	4972      	ldr	r1, [pc, #456]	; (8018d08 <etharp_output+0x1e8>)
 8018b3e:	4873      	ldr	r0, [pc, #460]	; (8018d0c <etharp_output+0x1ec>)
 8018b40:	f002 fc0e 	bl	801b360 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8018b44:	68bb      	ldr	r3, [r7, #8]
 8018b46:	2b00      	cmp	r3, #0
 8018b48:	d106      	bne.n	8018b58 <etharp_output+0x38>
 8018b4a:	4b6e      	ldr	r3, [pc, #440]	; (8018d04 <etharp_output+0x1e4>)
 8018b4c:	f240 321f 	movw	r2, #799	; 0x31f
 8018b50:	496f      	ldr	r1, [pc, #444]	; (8018d10 <etharp_output+0x1f0>)
 8018b52:	486e      	ldr	r0, [pc, #440]	; (8018d0c <etharp_output+0x1ec>)
 8018b54:	f002 fc04 	bl	801b360 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8018b58:	687b      	ldr	r3, [r7, #4]
 8018b5a:	2b00      	cmp	r3, #0
 8018b5c:	d106      	bne.n	8018b6c <etharp_output+0x4c>
 8018b5e:	4b69      	ldr	r3, [pc, #420]	; (8018d04 <etharp_output+0x1e4>)
 8018b60:	f44f 7248 	mov.w	r2, #800	; 0x320
 8018b64:	496b      	ldr	r1, [pc, #428]	; (8018d14 <etharp_output+0x1f4>)
 8018b66:	4869      	ldr	r0, [pc, #420]	; (8018d0c <etharp_output+0x1ec>)
 8018b68:	f002 fbfa 	bl	801b360 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8018b6c:	687b      	ldr	r3, [r7, #4]
 8018b6e:	681b      	ldr	r3, [r3, #0]
 8018b70:	68f9      	ldr	r1, [r7, #12]
 8018b72:	4618      	mov	r0, r3
 8018b74:	f000 ff16 	bl	80199a4 <ip4_addr_isbroadcast_u32>
 8018b78:	4603      	mov	r3, r0
 8018b7a:	2b00      	cmp	r3, #0
 8018b7c:	d002      	beq.n	8018b84 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8018b7e:	4b66      	ldr	r3, [pc, #408]	; (8018d18 <etharp_output+0x1f8>)
 8018b80:	61fb      	str	r3, [r7, #28]
 8018b82:	e0af      	b.n	8018ce4 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8018b84:	687b      	ldr	r3, [r7, #4]
 8018b86:	681b      	ldr	r3, [r3, #0]
 8018b88:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8018b8c:	2be0      	cmp	r3, #224	; 0xe0
 8018b8e:	d118      	bne.n	8018bc2 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8018b90:	2301      	movs	r3, #1
 8018b92:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8018b94:	2300      	movs	r3, #0
 8018b96:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8018b98:	235e      	movs	r3, #94	; 0x5e
 8018b9a:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8018b9c:	687b      	ldr	r3, [r7, #4]
 8018b9e:	3301      	adds	r3, #1
 8018ba0:	781b      	ldrb	r3, [r3, #0]
 8018ba2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8018ba6:	b2db      	uxtb	r3, r3
 8018ba8:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8018baa:	687b      	ldr	r3, [r7, #4]
 8018bac:	3302      	adds	r3, #2
 8018bae:	781b      	ldrb	r3, [r3, #0]
 8018bb0:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8018bb2:	687b      	ldr	r3, [r7, #4]
 8018bb4:	3303      	adds	r3, #3
 8018bb6:	781b      	ldrb	r3, [r3, #0]
 8018bb8:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8018bba:	f107 0310 	add.w	r3, r7, #16
 8018bbe:	61fb      	str	r3, [r7, #28]
 8018bc0:	e090      	b.n	8018ce4 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8018bc2:	687b      	ldr	r3, [r7, #4]
 8018bc4:	681a      	ldr	r2, [r3, #0]
 8018bc6:	68fb      	ldr	r3, [r7, #12]
 8018bc8:	3304      	adds	r3, #4
 8018bca:	681b      	ldr	r3, [r3, #0]
 8018bcc:	405a      	eors	r2, r3
 8018bce:	68fb      	ldr	r3, [r7, #12]
 8018bd0:	3308      	adds	r3, #8
 8018bd2:	681b      	ldr	r3, [r3, #0]
 8018bd4:	4013      	ands	r3, r2
 8018bd6:	2b00      	cmp	r3, #0
 8018bd8:	d012      	beq.n	8018c00 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8018bda:	687b      	ldr	r3, [r7, #4]
 8018bdc:	681b      	ldr	r3, [r3, #0]
 8018bde:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8018be0:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8018be4:	4293      	cmp	r3, r2
 8018be6:	d00b      	beq.n	8018c00 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8018be8:	68fb      	ldr	r3, [r7, #12]
 8018bea:	330c      	adds	r3, #12
 8018bec:	681b      	ldr	r3, [r3, #0]
 8018bee:	2b00      	cmp	r3, #0
 8018bf0:	d003      	beq.n	8018bfa <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8018bf2:	68fb      	ldr	r3, [r7, #12]
 8018bf4:	330c      	adds	r3, #12
 8018bf6:	61bb      	str	r3, [r7, #24]
 8018bf8:	e002      	b.n	8018c00 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8018bfa:	f06f 0303 	mvn.w	r3, #3
 8018bfe:	e07d      	b.n	8018cfc <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8018c00:	4b46      	ldr	r3, [pc, #280]	; (8018d1c <etharp_output+0x1fc>)
 8018c02:	781b      	ldrb	r3, [r3, #0]
 8018c04:	4619      	mov	r1, r3
 8018c06:	4a46      	ldr	r2, [pc, #280]	; (8018d20 <etharp_output+0x200>)
 8018c08:	460b      	mov	r3, r1
 8018c0a:	005b      	lsls	r3, r3, #1
 8018c0c:	440b      	add	r3, r1
 8018c0e:	00db      	lsls	r3, r3, #3
 8018c10:	4413      	add	r3, r2
 8018c12:	3314      	adds	r3, #20
 8018c14:	781b      	ldrb	r3, [r3, #0]
 8018c16:	2b01      	cmp	r3, #1
 8018c18:	d925      	bls.n	8018c66 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8018c1a:	4b40      	ldr	r3, [pc, #256]	; (8018d1c <etharp_output+0x1fc>)
 8018c1c:	781b      	ldrb	r3, [r3, #0]
 8018c1e:	4619      	mov	r1, r3
 8018c20:	4a3f      	ldr	r2, [pc, #252]	; (8018d20 <etharp_output+0x200>)
 8018c22:	460b      	mov	r3, r1
 8018c24:	005b      	lsls	r3, r3, #1
 8018c26:	440b      	add	r3, r1
 8018c28:	00db      	lsls	r3, r3, #3
 8018c2a:	4413      	add	r3, r2
 8018c2c:	3308      	adds	r3, #8
 8018c2e:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8018c30:	68fa      	ldr	r2, [r7, #12]
 8018c32:	429a      	cmp	r2, r3
 8018c34:	d117      	bne.n	8018c66 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8018c36:	69bb      	ldr	r3, [r7, #24]
 8018c38:	681a      	ldr	r2, [r3, #0]
 8018c3a:	4b38      	ldr	r3, [pc, #224]	; (8018d1c <etharp_output+0x1fc>)
 8018c3c:	781b      	ldrb	r3, [r3, #0]
 8018c3e:	4618      	mov	r0, r3
 8018c40:	4937      	ldr	r1, [pc, #220]	; (8018d20 <etharp_output+0x200>)
 8018c42:	4603      	mov	r3, r0
 8018c44:	005b      	lsls	r3, r3, #1
 8018c46:	4403      	add	r3, r0
 8018c48:	00db      	lsls	r3, r3, #3
 8018c4a:	440b      	add	r3, r1
 8018c4c:	3304      	adds	r3, #4
 8018c4e:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8018c50:	429a      	cmp	r2, r3
 8018c52:	d108      	bne.n	8018c66 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8018c54:	4b31      	ldr	r3, [pc, #196]	; (8018d1c <etharp_output+0x1fc>)
 8018c56:	781b      	ldrb	r3, [r3, #0]
 8018c58:	461a      	mov	r2, r3
 8018c5a:	68b9      	ldr	r1, [r7, #8]
 8018c5c:	68f8      	ldr	r0, [r7, #12]
 8018c5e:	f7ff fec5 	bl	80189ec <etharp_output_to_arp_index>
 8018c62:	4603      	mov	r3, r0
 8018c64:	e04a      	b.n	8018cfc <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8018c66:	2300      	movs	r3, #0
 8018c68:	75fb      	strb	r3, [r7, #23]
 8018c6a:	e031      	b.n	8018cd0 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8018c6c:	7dfa      	ldrb	r2, [r7, #23]
 8018c6e:	492c      	ldr	r1, [pc, #176]	; (8018d20 <etharp_output+0x200>)
 8018c70:	4613      	mov	r3, r2
 8018c72:	005b      	lsls	r3, r3, #1
 8018c74:	4413      	add	r3, r2
 8018c76:	00db      	lsls	r3, r3, #3
 8018c78:	440b      	add	r3, r1
 8018c7a:	3314      	adds	r3, #20
 8018c7c:	781b      	ldrb	r3, [r3, #0]
 8018c7e:	2b01      	cmp	r3, #1
 8018c80:	d923      	bls.n	8018cca <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8018c82:	7dfa      	ldrb	r2, [r7, #23]
 8018c84:	4926      	ldr	r1, [pc, #152]	; (8018d20 <etharp_output+0x200>)
 8018c86:	4613      	mov	r3, r2
 8018c88:	005b      	lsls	r3, r3, #1
 8018c8a:	4413      	add	r3, r2
 8018c8c:	00db      	lsls	r3, r3, #3
 8018c8e:	440b      	add	r3, r1
 8018c90:	3308      	adds	r3, #8
 8018c92:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8018c94:	68fa      	ldr	r2, [r7, #12]
 8018c96:	429a      	cmp	r2, r3
 8018c98:	d117      	bne.n	8018cca <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8018c9a:	69bb      	ldr	r3, [r7, #24]
 8018c9c:	6819      	ldr	r1, [r3, #0]
 8018c9e:	7dfa      	ldrb	r2, [r7, #23]
 8018ca0:	481f      	ldr	r0, [pc, #124]	; (8018d20 <etharp_output+0x200>)
 8018ca2:	4613      	mov	r3, r2
 8018ca4:	005b      	lsls	r3, r3, #1
 8018ca6:	4413      	add	r3, r2
 8018ca8:	00db      	lsls	r3, r3, #3
 8018caa:	4403      	add	r3, r0
 8018cac:	3304      	adds	r3, #4
 8018cae:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8018cb0:	4299      	cmp	r1, r3
 8018cb2:	d10a      	bne.n	8018cca <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8018cb4:	4a19      	ldr	r2, [pc, #100]	; (8018d1c <etharp_output+0x1fc>)
 8018cb6:	7dfb      	ldrb	r3, [r7, #23]
 8018cb8:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8018cba:	7dfb      	ldrb	r3, [r7, #23]
 8018cbc:	461a      	mov	r2, r3
 8018cbe:	68b9      	ldr	r1, [r7, #8]
 8018cc0:	68f8      	ldr	r0, [r7, #12]
 8018cc2:	f7ff fe93 	bl	80189ec <etharp_output_to_arp_index>
 8018cc6:	4603      	mov	r3, r0
 8018cc8:	e018      	b.n	8018cfc <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8018cca:	7dfb      	ldrb	r3, [r7, #23]
 8018ccc:	3301      	adds	r3, #1
 8018cce:	75fb      	strb	r3, [r7, #23]
 8018cd0:	7dfb      	ldrb	r3, [r7, #23]
 8018cd2:	2b09      	cmp	r3, #9
 8018cd4:	d9ca      	bls.n	8018c6c <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8018cd6:	68ba      	ldr	r2, [r7, #8]
 8018cd8:	69b9      	ldr	r1, [r7, #24]
 8018cda:	68f8      	ldr	r0, [r7, #12]
 8018cdc:	f000 f822 	bl	8018d24 <etharp_query>
 8018ce0:	4603      	mov	r3, r0
 8018ce2:	e00b      	b.n	8018cfc <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8018ce4:	68fb      	ldr	r3, [r7, #12]
 8018ce6:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 8018cea:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8018cee:	9300      	str	r3, [sp, #0]
 8018cf0:	69fb      	ldr	r3, [r7, #28]
 8018cf2:	68b9      	ldr	r1, [r7, #8]
 8018cf4:	68f8      	ldr	r0, [r7, #12]
 8018cf6:	f001 fd5d 	bl	801a7b4 <ethernet_output>
 8018cfa:	4603      	mov	r3, r0
}
 8018cfc:	4618      	mov	r0, r3
 8018cfe:	3720      	adds	r7, #32
 8018d00:	46bd      	mov	sp, r7
 8018d02:	bd80      	pop	{r7, pc}
 8018d04:	08023224 	.word	0x08023224
 8018d08:	08023374 	.word	0x08023374
 8018d0c:	0802329c 	.word	0x0802329c
 8018d10:	080233c4 	.word	0x080233c4
 8018d14:	08023364 	.word	0x08023364
 8018d18:	08023f48 	.word	0x08023f48
 8018d1c:	2000061c 	.word	0x2000061c
 8018d20:	2000052c 	.word	0x2000052c

08018d24 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8018d24:	b580      	push	{r7, lr}
 8018d26:	b08c      	sub	sp, #48	; 0x30
 8018d28:	af02      	add	r7, sp, #8
 8018d2a:	60f8      	str	r0, [r7, #12]
 8018d2c:	60b9      	str	r1, [r7, #8]
 8018d2e:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8018d30:	68fb      	ldr	r3, [r7, #12]
 8018d32:	332a      	adds	r3, #42	; 0x2a
 8018d34:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8018d36:	23ff      	movs	r3, #255	; 0xff
 8018d38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8018d3c:	2300      	movs	r3, #0
 8018d3e:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8018d40:	68bb      	ldr	r3, [r7, #8]
 8018d42:	681b      	ldr	r3, [r3, #0]
 8018d44:	68f9      	ldr	r1, [r7, #12]
 8018d46:	4618      	mov	r0, r3
 8018d48:	f000 fe2c 	bl	80199a4 <ip4_addr_isbroadcast_u32>
 8018d4c:	4603      	mov	r3, r0
 8018d4e:	2b00      	cmp	r3, #0
 8018d50:	d10c      	bne.n	8018d6c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8018d52:	68bb      	ldr	r3, [r7, #8]
 8018d54:	681b      	ldr	r3, [r3, #0]
 8018d56:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8018d5a:	2be0      	cmp	r3, #224	; 0xe0
 8018d5c:	d006      	beq.n	8018d6c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8018d5e:	68bb      	ldr	r3, [r7, #8]
 8018d60:	2b00      	cmp	r3, #0
 8018d62:	d003      	beq.n	8018d6c <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8018d64:	68bb      	ldr	r3, [r7, #8]
 8018d66:	681b      	ldr	r3, [r3, #0]
 8018d68:	2b00      	cmp	r3, #0
 8018d6a:	d102      	bne.n	8018d72 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8018d6c:	f06f 030f 	mvn.w	r3, #15
 8018d70:	e101      	b.n	8018f76 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8018d72:	68fa      	ldr	r2, [r7, #12]
 8018d74:	2101      	movs	r1, #1
 8018d76:	68b8      	ldr	r0, [r7, #8]
 8018d78:	f7ff fb5c 	bl	8018434 <etharp_find_entry>
 8018d7c:	4603      	mov	r3, r0
 8018d7e:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8018d80:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8018d84:	2b00      	cmp	r3, #0
 8018d86:	da02      	bge.n	8018d8e <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8018d88:	8a7b      	ldrh	r3, [r7, #18]
 8018d8a:	b25b      	sxtb	r3, r3
 8018d8c:	e0f3      	b.n	8018f76 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8018d8e:	8a7b      	ldrh	r3, [r7, #18]
 8018d90:	2b7e      	cmp	r3, #126	; 0x7e
 8018d92:	d906      	bls.n	8018da2 <etharp_query+0x7e>
 8018d94:	4b7a      	ldr	r3, [pc, #488]	; (8018f80 <etharp_query+0x25c>)
 8018d96:	f240 32c1 	movw	r2, #961	; 0x3c1
 8018d9a:	497a      	ldr	r1, [pc, #488]	; (8018f84 <etharp_query+0x260>)
 8018d9c:	487a      	ldr	r0, [pc, #488]	; (8018f88 <etharp_query+0x264>)
 8018d9e:	f002 fadf 	bl	801b360 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8018da2:	8a7b      	ldrh	r3, [r7, #18]
 8018da4:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8018da6:	7c7a      	ldrb	r2, [r7, #17]
 8018da8:	4978      	ldr	r1, [pc, #480]	; (8018f8c <etharp_query+0x268>)
 8018daa:	4613      	mov	r3, r2
 8018dac:	005b      	lsls	r3, r3, #1
 8018dae:	4413      	add	r3, r2
 8018db0:	00db      	lsls	r3, r3, #3
 8018db2:	440b      	add	r3, r1
 8018db4:	3314      	adds	r3, #20
 8018db6:	781b      	ldrb	r3, [r3, #0]
 8018db8:	2b00      	cmp	r3, #0
 8018dba:	d115      	bne.n	8018de8 <etharp_query+0xc4>
    is_new_entry = 1;
 8018dbc:	2301      	movs	r3, #1
 8018dbe:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8018dc0:	7c7a      	ldrb	r2, [r7, #17]
 8018dc2:	4972      	ldr	r1, [pc, #456]	; (8018f8c <etharp_query+0x268>)
 8018dc4:	4613      	mov	r3, r2
 8018dc6:	005b      	lsls	r3, r3, #1
 8018dc8:	4413      	add	r3, r2
 8018dca:	00db      	lsls	r3, r3, #3
 8018dcc:	440b      	add	r3, r1
 8018dce:	3314      	adds	r3, #20
 8018dd0:	2201      	movs	r2, #1
 8018dd2:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8018dd4:	7c7a      	ldrb	r2, [r7, #17]
 8018dd6:	496d      	ldr	r1, [pc, #436]	; (8018f8c <etharp_query+0x268>)
 8018dd8:	4613      	mov	r3, r2
 8018dda:	005b      	lsls	r3, r3, #1
 8018ddc:	4413      	add	r3, r2
 8018dde:	00db      	lsls	r3, r3, #3
 8018de0:	440b      	add	r3, r1
 8018de2:	3308      	adds	r3, #8
 8018de4:	68fa      	ldr	r2, [r7, #12]
 8018de6:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8018de8:	7c7a      	ldrb	r2, [r7, #17]
 8018dea:	4968      	ldr	r1, [pc, #416]	; (8018f8c <etharp_query+0x268>)
 8018dec:	4613      	mov	r3, r2
 8018dee:	005b      	lsls	r3, r3, #1
 8018df0:	4413      	add	r3, r2
 8018df2:	00db      	lsls	r3, r3, #3
 8018df4:	440b      	add	r3, r1
 8018df6:	3314      	adds	r3, #20
 8018df8:	781b      	ldrb	r3, [r3, #0]
 8018dfa:	2b01      	cmp	r3, #1
 8018dfc:	d011      	beq.n	8018e22 <etharp_query+0xfe>
 8018dfe:	7c7a      	ldrb	r2, [r7, #17]
 8018e00:	4962      	ldr	r1, [pc, #392]	; (8018f8c <etharp_query+0x268>)
 8018e02:	4613      	mov	r3, r2
 8018e04:	005b      	lsls	r3, r3, #1
 8018e06:	4413      	add	r3, r2
 8018e08:	00db      	lsls	r3, r3, #3
 8018e0a:	440b      	add	r3, r1
 8018e0c:	3314      	adds	r3, #20
 8018e0e:	781b      	ldrb	r3, [r3, #0]
 8018e10:	2b01      	cmp	r3, #1
 8018e12:	d806      	bhi.n	8018e22 <etharp_query+0xfe>
 8018e14:	4b5a      	ldr	r3, [pc, #360]	; (8018f80 <etharp_query+0x25c>)
 8018e16:	f240 32cd 	movw	r2, #973	; 0x3cd
 8018e1a:	495d      	ldr	r1, [pc, #372]	; (8018f90 <etharp_query+0x26c>)
 8018e1c:	485a      	ldr	r0, [pc, #360]	; (8018f88 <etharp_query+0x264>)
 8018e1e:	f002 fa9f 	bl	801b360 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8018e22:	6a3b      	ldr	r3, [r7, #32]
 8018e24:	2b00      	cmp	r3, #0
 8018e26:	d102      	bne.n	8018e2e <etharp_query+0x10a>
 8018e28:	687b      	ldr	r3, [r7, #4]
 8018e2a:	2b00      	cmp	r3, #0
 8018e2c:	d10c      	bne.n	8018e48 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8018e2e:	68b9      	ldr	r1, [r7, #8]
 8018e30:	68f8      	ldr	r0, [r7, #12]
 8018e32:	f000 f963 	bl	80190fc <etharp_request>
 8018e36:	4603      	mov	r3, r0
 8018e38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8018e3c:	687b      	ldr	r3, [r7, #4]
 8018e3e:	2b00      	cmp	r3, #0
 8018e40:	d102      	bne.n	8018e48 <etharp_query+0x124>
      return result;
 8018e42:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8018e46:	e096      	b.n	8018f76 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8018e48:	687b      	ldr	r3, [r7, #4]
 8018e4a:	2b00      	cmp	r3, #0
 8018e4c:	d106      	bne.n	8018e5c <etharp_query+0x138>
 8018e4e:	4b4c      	ldr	r3, [pc, #304]	; (8018f80 <etharp_query+0x25c>)
 8018e50:	f240 32e1 	movw	r2, #993	; 0x3e1
 8018e54:	494f      	ldr	r1, [pc, #316]	; (8018f94 <etharp_query+0x270>)
 8018e56:	484c      	ldr	r0, [pc, #304]	; (8018f88 <etharp_query+0x264>)
 8018e58:	f002 fa82 	bl	801b360 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8018e5c:	7c7a      	ldrb	r2, [r7, #17]
 8018e5e:	494b      	ldr	r1, [pc, #300]	; (8018f8c <etharp_query+0x268>)
 8018e60:	4613      	mov	r3, r2
 8018e62:	005b      	lsls	r3, r3, #1
 8018e64:	4413      	add	r3, r2
 8018e66:	00db      	lsls	r3, r3, #3
 8018e68:	440b      	add	r3, r1
 8018e6a:	3314      	adds	r3, #20
 8018e6c:	781b      	ldrb	r3, [r3, #0]
 8018e6e:	2b01      	cmp	r3, #1
 8018e70:	d917      	bls.n	8018ea2 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8018e72:	4a49      	ldr	r2, [pc, #292]	; (8018f98 <etharp_query+0x274>)
 8018e74:	7c7b      	ldrb	r3, [r7, #17]
 8018e76:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8018e78:	7c7a      	ldrb	r2, [r7, #17]
 8018e7a:	4613      	mov	r3, r2
 8018e7c:	005b      	lsls	r3, r3, #1
 8018e7e:	4413      	add	r3, r2
 8018e80:	00db      	lsls	r3, r3, #3
 8018e82:	3308      	adds	r3, #8
 8018e84:	4a41      	ldr	r2, [pc, #260]	; (8018f8c <etharp_query+0x268>)
 8018e86:	4413      	add	r3, r2
 8018e88:	3304      	adds	r3, #4
 8018e8a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8018e8e:	9200      	str	r2, [sp, #0]
 8018e90:	697a      	ldr	r2, [r7, #20]
 8018e92:	6879      	ldr	r1, [r7, #4]
 8018e94:	68f8      	ldr	r0, [r7, #12]
 8018e96:	f001 fc8d 	bl	801a7b4 <ethernet_output>
 8018e9a:	4603      	mov	r3, r0
 8018e9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8018ea0:	e067      	b.n	8018f72 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8018ea2:	7c7a      	ldrb	r2, [r7, #17]
 8018ea4:	4939      	ldr	r1, [pc, #228]	; (8018f8c <etharp_query+0x268>)
 8018ea6:	4613      	mov	r3, r2
 8018ea8:	005b      	lsls	r3, r3, #1
 8018eaa:	4413      	add	r3, r2
 8018eac:	00db      	lsls	r3, r3, #3
 8018eae:	440b      	add	r3, r1
 8018eb0:	3314      	adds	r3, #20
 8018eb2:	781b      	ldrb	r3, [r3, #0]
 8018eb4:	2b01      	cmp	r3, #1
 8018eb6:	d15c      	bne.n	8018f72 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8018eb8:	2300      	movs	r3, #0
 8018eba:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8018ebc:	687b      	ldr	r3, [r7, #4]
 8018ebe:	61fb      	str	r3, [r7, #28]
    while (p) {
 8018ec0:	e01c      	b.n	8018efc <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8018ec2:	69fb      	ldr	r3, [r7, #28]
 8018ec4:	895a      	ldrh	r2, [r3, #10]
 8018ec6:	69fb      	ldr	r3, [r7, #28]
 8018ec8:	891b      	ldrh	r3, [r3, #8]
 8018eca:	429a      	cmp	r2, r3
 8018ecc:	d10a      	bne.n	8018ee4 <etharp_query+0x1c0>
 8018ece:	69fb      	ldr	r3, [r7, #28]
 8018ed0:	681b      	ldr	r3, [r3, #0]
 8018ed2:	2b00      	cmp	r3, #0
 8018ed4:	d006      	beq.n	8018ee4 <etharp_query+0x1c0>
 8018ed6:	4b2a      	ldr	r3, [pc, #168]	; (8018f80 <etharp_query+0x25c>)
 8018ed8:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8018edc:	492f      	ldr	r1, [pc, #188]	; (8018f9c <etharp_query+0x278>)
 8018ede:	482a      	ldr	r0, [pc, #168]	; (8018f88 <etharp_query+0x264>)
 8018ee0:	f002 fa3e 	bl	801b360 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8018ee4:	69fb      	ldr	r3, [r7, #28]
 8018ee6:	7b1b      	ldrb	r3, [r3, #12]
 8018ee8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8018eec:	2b00      	cmp	r3, #0
 8018eee:	d002      	beq.n	8018ef6 <etharp_query+0x1d2>
        copy_needed = 1;
 8018ef0:	2301      	movs	r3, #1
 8018ef2:	61bb      	str	r3, [r7, #24]
        break;
 8018ef4:	e005      	b.n	8018f02 <etharp_query+0x1de>
      }
      p = p->next;
 8018ef6:	69fb      	ldr	r3, [r7, #28]
 8018ef8:	681b      	ldr	r3, [r3, #0]
 8018efa:	61fb      	str	r3, [r7, #28]
    while (p) {
 8018efc:	69fb      	ldr	r3, [r7, #28]
 8018efe:	2b00      	cmp	r3, #0
 8018f00:	d1df      	bne.n	8018ec2 <etharp_query+0x19e>
    }
    if (copy_needed) {
 8018f02:	69bb      	ldr	r3, [r7, #24]
 8018f04:	2b00      	cmp	r3, #0
 8018f06:	d007      	beq.n	8018f18 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8018f08:	687a      	ldr	r2, [r7, #4]
 8018f0a:	f44f 7120 	mov.w	r1, #640	; 0x280
 8018f0e:	200e      	movs	r0, #14
 8018f10:	f7f7 fc14 	bl	801073c <pbuf_clone>
 8018f14:	61f8      	str	r0, [r7, #28]
 8018f16:	e004      	b.n	8018f22 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8018f18:	687b      	ldr	r3, [r7, #4]
 8018f1a:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8018f1c:	69f8      	ldr	r0, [r7, #28]
 8018f1e:	f7f7 fa41 	bl	80103a4 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8018f22:	69fb      	ldr	r3, [r7, #28]
 8018f24:	2b00      	cmp	r3, #0
 8018f26:	d021      	beq.n	8018f6c <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8018f28:	7c7a      	ldrb	r2, [r7, #17]
 8018f2a:	4918      	ldr	r1, [pc, #96]	; (8018f8c <etharp_query+0x268>)
 8018f2c:	4613      	mov	r3, r2
 8018f2e:	005b      	lsls	r3, r3, #1
 8018f30:	4413      	add	r3, r2
 8018f32:	00db      	lsls	r3, r3, #3
 8018f34:	440b      	add	r3, r1
 8018f36:	681b      	ldr	r3, [r3, #0]
 8018f38:	2b00      	cmp	r3, #0
 8018f3a:	d00a      	beq.n	8018f52 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8018f3c:	7c7a      	ldrb	r2, [r7, #17]
 8018f3e:	4913      	ldr	r1, [pc, #76]	; (8018f8c <etharp_query+0x268>)
 8018f40:	4613      	mov	r3, r2
 8018f42:	005b      	lsls	r3, r3, #1
 8018f44:	4413      	add	r3, r2
 8018f46:	00db      	lsls	r3, r3, #3
 8018f48:	440b      	add	r3, r1
 8018f4a:	681b      	ldr	r3, [r3, #0]
 8018f4c:	4618      	mov	r0, r3
 8018f4e:	f7f7 f989 	bl	8010264 <pbuf_free>
      }
      arp_table[i].q = p;
 8018f52:	7c7a      	ldrb	r2, [r7, #17]
 8018f54:	490d      	ldr	r1, [pc, #52]	; (8018f8c <etharp_query+0x268>)
 8018f56:	4613      	mov	r3, r2
 8018f58:	005b      	lsls	r3, r3, #1
 8018f5a:	4413      	add	r3, r2
 8018f5c:	00db      	lsls	r3, r3, #3
 8018f5e:	440b      	add	r3, r1
 8018f60:	69fa      	ldr	r2, [r7, #28]
 8018f62:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8018f64:	2300      	movs	r3, #0
 8018f66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8018f6a:	e002      	b.n	8018f72 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8018f6c:	23ff      	movs	r3, #255	; 0xff
 8018f6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8018f72:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8018f76:	4618      	mov	r0, r3
 8018f78:	3728      	adds	r7, #40	; 0x28
 8018f7a:	46bd      	mov	sp, r7
 8018f7c:	bd80      	pop	{r7, pc}
 8018f7e:	bf00      	nop
 8018f80:	08023224 	.word	0x08023224
 8018f84:	080233d0 	.word	0x080233d0
 8018f88:	0802329c 	.word	0x0802329c
 8018f8c:	2000052c 	.word	0x2000052c
 8018f90:	080233e0 	.word	0x080233e0
 8018f94:	080233c4 	.word	0x080233c4
 8018f98:	2000061c 	.word	0x2000061c
 8018f9c:	08023408 	.word	0x08023408

08018fa0 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8018fa0:	b580      	push	{r7, lr}
 8018fa2:	b08a      	sub	sp, #40	; 0x28
 8018fa4:	af02      	add	r7, sp, #8
 8018fa6:	60f8      	str	r0, [r7, #12]
 8018fa8:	60b9      	str	r1, [r7, #8]
 8018faa:	607a      	str	r2, [r7, #4]
 8018fac:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8018fae:	2300      	movs	r3, #0
 8018fb0:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8018fb2:	68fb      	ldr	r3, [r7, #12]
 8018fb4:	2b00      	cmp	r3, #0
 8018fb6:	d106      	bne.n	8018fc6 <etharp_raw+0x26>
 8018fb8:	4b3a      	ldr	r3, [pc, #232]	; (80190a4 <etharp_raw+0x104>)
 8018fba:	f240 4257 	movw	r2, #1111	; 0x457
 8018fbe:	493a      	ldr	r1, [pc, #232]	; (80190a8 <etharp_raw+0x108>)
 8018fc0:	483a      	ldr	r0, [pc, #232]	; (80190ac <etharp_raw+0x10c>)
 8018fc2:	f002 f9cd 	bl	801b360 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8018fc6:	f44f 7220 	mov.w	r2, #640	; 0x280
 8018fca:	211c      	movs	r1, #28
 8018fcc:	200e      	movs	r0, #14
 8018fce:	f7f6 fe65 	bl	800fc9c <pbuf_alloc>
 8018fd2:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8018fd4:	69bb      	ldr	r3, [r7, #24]
 8018fd6:	2b00      	cmp	r3, #0
 8018fd8:	d102      	bne.n	8018fe0 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8018fda:	f04f 33ff 	mov.w	r3, #4294967295
 8018fde:	e05d      	b.n	801909c <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8018fe0:	69bb      	ldr	r3, [r7, #24]
 8018fe2:	895b      	ldrh	r3, [r3, #10]
 8018fe4:	2b1b      	cmp	r3, #27
 8018fe6:	d806      	bhi.n	8018ff6 <etharp_raw+0x56>
 8018fe8:	4b2e      	ldr	r3, [pc, #184]	; (80190a4 <etharp_raw+0x104>)
 8018fea:	f240 4262 	movw	r2, #1122	; 0x462
 8018fee:	4930      	ldr	r1, [pc, #192]	; (80190b0 <etharp_raw+0x110>)
 8018ff0:	482e      	ldr	r0, [pc, #184]	; (80190ac <etharp_raw+0x10c>)
 8018ff2:	f002 f9b5 	bl	801b360 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8018ff6:	69bb      	ldr	r3, [r7, #24]
 8018ff8:	685b      	ldr	r3, [r3, #4]
 8018ffa:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8018ffc:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8018ffe:	4618      	mov	r0, r3
 8019000:	f7f5 fe94 	bl	800ed2c <lwip_htons>
 8019004:	4603      	mov	r3, r0
 8019006:	461a      	mov	r2, r3
 8019008:	697b      	ldr	r3, [r7, #20]
 801900a:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 801900c:	68fb      	ldr	r3, [r7, #12]
 801900e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8019012:	2b06      	cmp	r3, #6
 8019014:	d006      	beq.n	8019024 <etharp_raw+0x84>
 8019016:	4b23      	ldr	r3, [pc, #140]	; (80190a4 <etharp_raw+0x104>)
 8019018:	f240 4269 	movw	r2, #1129	; 0x469
 801901c:	4925      	ldr	r1, [pc, #148]	; (80190b4 <etharp_raw+0x114>)
 801901e:	4823      	ldr	r0, [pc, #140]	; (80190ac <etharp_raw+0x10c>)
 8019020:	f002 f99e 	bl	801b360 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8019024:	697b      	ldr	r3, [r7, #20]
 8019026:	3308      	adds	r3, #8
 8019028:	2206      	movs	r2, #6
 801902a:	6839      	ldr	r1, [r7, #0]
 801902c:	4618      	mov	r0, r3
 801902e:	f001 fc53 	bl	801a8d8 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8019032:	697b      	ldr	r3, [r7, #20]
 8019034:	3312      	adds	r3, #18
 8019036:	2206      	movs	r2, #6
 8019038:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801903a:	4618      	mov	r0, r3
 801903c:	f001 fc4c 	bl	801a8d8 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8019040:	697b      	ldr	r3, [r7, #20]
 8019042:	330e      	adds	r3, #14
 8019044:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019046:	6812      	ldr	r2, [r2, #0]
 8019048:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801904a:	697b      	ldr	r3, [r7, #20]
 801904c:	3318      	adds	r3, #24
 801904e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019050:	6812      	ldr	r2, [r2, #0]
 8019052:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8019054:	697b      	ldr	r3, [r7, #20]
 8019056:	2200      	movs	r2, #0
 8019058:	701a      	strb	r2, [r3, #0]
 801905a:	2200      	movs	r2, #0
 801905c:	f042 0201 	orr.w	r2, r2, #1
 8019060:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8019062:	697b      	ldr	r3, [r7, #20]
 8019064:	2200      	movs	r2, #0
 8019066:	f042 0208 	orr.w	r2, r2, #8
 801906a:	709a      	strb	r2, [r3, #2]
 801906c:	2200      	movs	r2, #0
 801906e:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8019070:	697b      	ldr	r3, [r7, #20]
 8019072:	2206      	movs	r2, #6
 8019074:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8019076:	697b      	ldr	r3, [r7, #20]
 8019078:	2204      	movs	r2, #4
 801907a:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801907c:	f640 0306 	movw	r3, #2054	; 0x806
 8019080:	9300      	str	r3, [sp, #0]
 8019082:	687b      	ldr	r3, [r7, #4]
 8019084:	68ba      	ldr	r2, [r7, #8]
 8019086:	69b9      	ldr	r1, [r7, #24]
 8019088:	68f8      	ldr	r0, [r7, #12]
 801908a:	f001 fb93 	bl	801a7b4 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 801908e:	69b8      	ldr	r0, [r7, #24]
 8019090:	f7f7 f8e8 	bl	8010264 <pbuf_free>
  p = NULL;
 8019094:	2300      	movs	r3, #0
 8019096:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8019098:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801909c:	4618      	mov	r0, r3
 801909e:	3720      	adds	r7, #32
 80190a0:	46bd      	mov	sp, r7
 80190a2:	bd80      	pop	{r7, pc}
 80190a4:	08023224 	.word	0x08023224
 80190a8:	08023374 	.word	0x08023374
 80190ac:	0802329c 	.word	0x0802329c
 80190b0:	08023424 	.word	0x08023424
 80190b4:	08023458 	.word	0x08023458

080190b8 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 80190b8:	b580      	push	{r7, lr}
 80190ba:	b088      	sub	sp, #32
 80190bc:	af04      	add	r7, sp, #16
 80190be:	60f8      	str	r0, [r7, #12]
 80190c0:	60b9      	str	r1, [r7, #8]
 80190c2:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80190c4:	68fb      	ldr	r3, [r7, #12]
 80190c6:	f103 012a 	add.w	r1, r3, #42	; 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 80190ca:	68fb      	ldr	r3, [r7, #12]
 80190cc:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 80190d0:	68fb      	ldr	r3, [r7, #12]
 80190d2:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80190d4:	2201      	movs	r2, #1
 80190d6:	9203      	str	r2, [sp, #12]
 80190d8:	68ba      	ldr	r2, [r7, #8]
 80190da:	9202      	str	r2, [sp, #8]
 80190dc:	4a06      	ldr	r2, [pc, #24]	; (80190f8 <etharp_request_dst+0x40>)
 80190de:	9201      	str	r2, [sp, #4]
 80190e0:	9300      	str	r3, [sp, #0]
 80190e2:	4603      	mov	r3, r0
 80190e4:	687a      	ldr	r2, [r7, #4]
 80190e6:	68f8      	ldr	r0, [r7, #12]
 80190e8:	f7ff ff5a 	bl	8018fa0 <etharp_raw>
 80190ec:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 80190ee:	4618      	mov	r0, r3
 80190f0:	3710      	adds	r7, #16
 80190f2:	46bd      	mov	sp, r7
 80190f4:	bd80      	pop	{r7, pc}
 80190f6:	bf00      	nop
 80190f8:	08023f50 	.word	0x08023f50

080190fc <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 80190fc:	b580      	push	{r7, lr}
 80190fe:	b082      	sub	sp, #8
 8019100:	af00      	add	r7, sp, #0
 8019102:	6078      	str	r0, [r7, #4]
 8019104:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8019106:	4a05      	ldr	r2, [pc, #20]	; (801911c <etharp_request+0x20>)
 8019108:	6839      	ldr	r1, [r7, #0]
 801910a:	6878      	ldr	r0, [r7, #4]
 801910c:	f7ff ffd4 	bl	80190b8 <etharp_request_dst>
 8019110:	4603      	mov	r3, r0
}
 8019112:	4618      	mov	r0, r3
 8019114:	3708      	adds	r7, #8
 8019116:	46bd      	mov	sp, r7
 8019118:	bd80      	pop	{r7, pc}
 801911a:	bf00      	nop
 801911c:	08023f48 	.word	0x08023f48

08019120 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8019120:	b580      	push	{r7, lr}
 8019122:	b08e      	sub	sp, #56	; 0x38
 8019124:	af04      	add	r7, sp, #16
 8019126:	6078      	str	r0, [r7, #4]
 8019128:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801912a:	4b79      	ldr	r3, [pc, #484]	; (8019310 <icmp_input+0x1f0>)
 801912c:	689b      	ldr	r3, [r3, #8]
 801912e:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8019130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019132:	781b      	ldrb	r3, [r3, #0]
 8019134:	f003 030f 	and.w	r3, r3, #15
 8019138:	b2db      	uxtb	r3, r3
 801913a:	009b      	lsls	r3, r3, #2
 801913c:	b2db      	uxtb	r3, r3
 801913e:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8019140:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8019142:	2b13      	cmp	r3, #19
 8019144:	f240 80cd 	bls.w	80192e2 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8019148:	687b      	ldr	r3, [r7, #4]
 801914a:	895b      	ldrh	r3, [r3, #10]
 801914c:	2b03      	cmp	r3, #3
 801914e:	f240 80ca 	bls.w	80192e6 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8019152:	687b      	ldr	r3, [r7, #4]
 8019154:	685b      	ldr	r3, [r3, #4]
 8019156:	781b      	ldrb	r3, [r3, #0]
 8019158:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 801915c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8019160:	2b00      	cmp	r3, #0
 8019162:	f000 80b7 	beq.w	80192d4 <icmp_input+0x1b4>
 8019166:	2b08      	cmp	r3, #8
 8019168:	f040 80b7 	bne.w	80192da <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 801916c:	4b69      	ldr	r3, [pc, #420]	; (8019314 <icmp_input+0x1f4>)
 801916e:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8019170:	4b67      	ldr	r3, [pc, #412]	; (8019310 <icmp_input+0x1f0>)
 8019172:	695b      	ldr	r3, [r3, #20]
 8019174:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8019178:	2be0      	cmp	r3, #224	; 0xe0
 801917a:	f000 80bb 	beq.w	80192f4 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801917e:	4b64      	ldr	r3, [pc, #400]	; (8019310 <icmp_input+0x1f0>)
 8019180:	695b      	ldr	r3, [r3, #20]
 8019182:	4a63      	ldr	r2, [pc, #396]	; (8019310 <icmp_input+0x1f0>)
 8019184:	6812      	ldr	r2, [r2, #0]
 8019186:	4611      	mov	r1, r2
 8019188:	4618      	mov	r0, r3
 801918a:	f000 fc0b 	bl	80199a4 <ip4_addr_isbroadcast_u32>
 801918e:	4603      	mov	r3, r0
 8019190:	2b00      	cmp	r3, #0
 8019192:	f040 80b1 	bne.w	80192f8 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8019196:	687b      	ldr	r3, [r7, #4]
 8019198:	891b      	ldrh	r3, [r3, #8]
 801919a:	2b07      	cmp	r3, #7
 801919c:	f240 80a5 	bls.w	80192ea <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80191a0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80191a2:	330e      	adds	r3, #14
 80191a4:	4619      	mov	r1, r3
 80191a6:	6878      	ldr	r0, [r7, #4]
 80191a8:	f7f6 ffc6 	bl	8010138 <pbuf_add_header>
 80191ac:	4603      	mov	r3, r0
 80191ae:	2b00      	cmp	r3, #0
 80191b0:	d04b      	beq.n	801924a <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 80191b2:	687b      	ldr	r3, [r7, #4]
 80191b4:	891a      	ldrh	r2, [r3, #8]
 80191b6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80191b8:	4413      	add	r3, r2
 80191ba:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 80191bc:	687b      	ldr	r3, [r7, #4]
 80191be:	891b      	ldrh	r3, [r3, #8]
 80191c0:	8b7a      	ldrh	r2, [r7, #26]
 80191c2:	429a      	cmp	r2, r3
 80191c4:	f0c0 809a 	bcc.w	80192fc <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 80191c8:	8b7b      	ldrh	r3, [r7, #26]
 80191ca:	f44f 7220 	mov.w	r2, #640	; 0x280
 80191ce:	4619      	mov	r1, r3
 80191d0:	200e      	movs	r0, #14
 80191d2:	f7f6 fd63 	bl	800fc9c <pbuf_alloc>
 80191d6:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 80191d8:	697b      	ldr	r3, [r7, #20]
 80191da:	2b00      	cmp	r3, #0
 80191dc:	f000 8090 	beq.w	8019300 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 80191e0:	697b      	ldr	r3, [r7, #20]
 80191e2:	895b      	ldrh	r3, [r3, #10]
 80191e4:	461a      	mov	r2, r3
 80191e6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80191e8:	3308      	adds	r3, #8
 80191ea:	429a      	cmp	r2, r3
 80191ec:	d203      	bcs.n	80191f6 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 80191ee:	6978      	ldr	r0, [r7, #20]
 80191f0:	f7f7 f838 	bl	8010264 <pbuf_free>
          goto icmperr;
 80191f4:	e085      	b.n	8019302 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 80191f6:	697b      	ldr	r3, [r7, #20]
 80191f8:	685b      	ldr	r3, [r3, #4]
 80191fa:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80191fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80191fe:	4618      	mov	r0, r3
 8019200:	f001 fb6a 	bl	801a8d8 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8019204:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8019206:	4619      	mov	r1, r3
 8019208:	6978      	ldr	r0, [r7, #20]
 801920a:	f7f6 ffa5 	bl	8010158 <pbuf_remove_header>
 801920e:	4603      	mov	r3, r0
 8019210:	2b00      	cmp	r3, #0
 8019212:	d009      	beq.n	8019228 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8019214:	4b40      	ldr	r3, [pc, #256]	; (8019318 <icmp_input+0x1f8>)
 8019216:	22b6      	movs	r2, #182	; 0xb6
 8019218:	4940      	ldr	r1, [pc, #256]	; (801931c <icmp_input+0x1fc>)
 801921a:	4841      	ldr	r0, [pc, #260]	; (8019320 <icmp_input+0x200>)
 801921c:	f002 f8a0 	bl	801b360 <iprintf>
          pbuf_free(r);
 8019220:	6978      	ldr	r0, [r7, #20]
 8019222:	f7f7 f81f 	bl	8010264 <pbuf_free>
          goto icmperr;
 8019226:	e06c      	b.n	8019302 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8019228:	6879      	ldr	r1, [r7, #4]
 801922a:	6978      	ldr	r0, [r7, #20]
 801922c:	f7f7 f942 	bl	80104b4 <pbuf_copy>
 8019230:	4603      	mov	r3, r0
 8019232:	2b00      	cmp	r3, #0
 8019234:	d003      	beq.n	801923e <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8019236:	6978      	ldr	r0, [r7, #20]
 8019238:	f7f7 f814 	bl	8010264 <pbuf_free>
          goto icmperr;
 801923c:	e061      	b.n	8019302 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 801923e:	6878      	ldr	r0, [r7, #4]
 8019240:	f7f7 f810 	bl	8010264 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8019244:	697b      	ldr	r3, [r7, #20]
 8019246:	607b      	str	r3, [r7, #4]
 8019248:	e00f      	b.n	801926a <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801924a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801924c:	330e      	adds	r3, #14
 801924e:	4619      	mov	r1, r3
 8019250:	6878      	ldr	r0, [r7, #4]
 8019252:	f7f6 ff81 	bl	8010158 <pbuf_remove_header>
 8019256:	4603      	mov	r3, r0
 8019258:	2b00      	cmp	r3, #0
 801925a:	d006      	beq.n	801926a <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 801925c:	4b2e      	ldr	r3, [pc, #184]	; (8019318 <icmp_input+0x1f8>)
 801925e:	22c7      	movs	r2, #199	; 0xc7
 8019260:	4930      	ldr	r1, [pc, #192]	; (8019324 <icmp_input+0x204>)
 8019262:	482f      	ldr	r0, [pc, #188]	; (8019320 <icmp_input+0x200>)
 8019264:	f002 f87c 	bl	801b360 <iprintf>
          goto icmperr;
 8019268:	e04b      	b.n	8019302 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 801926a:	687b      	ldr	r3, [r7, #4]
 801926c:	685b      	ldr	r3, [r3, #4]
 801926e:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8019270:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8019272:	4619      	mov	r1, r3
 8019274:	6878      	ldr	r0, [r7, #4]
 8019276:	f7f6 ff5f 	bl	8010138 <pbuf_add_header>
 801927a:	4603      	mov	r3, r0
 801927c:	2b00      	cmp	r3, #0
 801927e:	d12b      	bne.n	80192d8 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8019280:	687b      	ldr	r3, [r7, #4]
 8019282:	685b      	ldr	r3, [r3, #4]
 8019284:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8019286:	69fb      	ldr	r3, [r7, #28]
 8019288:	681a      	ldr	r2, [r3, #0]
 801928a:	68fb      	ldr	r3, [r7, #12]
 801928c:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801928e:	4b20      	ldr	r3, [pc, #128]	; (8019310 <icmp_input+0x1f0>)
 8019290:	691a      	ldr	r2, [r3, #16]
 8019292:	68fb      	ldr	r3, [r7, #12]
 8019294:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8019296:	693b      	ldr	r3, [r7, #16]
 8019298:	2200      	movs	r2, #0
 801929a:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 801929c:	693b      	ldr	r3, [r7, #16]
 801929e:	2200      	movs	r2, #0
 80192a0:	709a      	strb	r2, [r3, #2]
 80192a2:	2200      	movs	r2, #0
 80192a4:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 80192a6:	68fb      	ldr	r3, [r7, #12]
 80192a8:	22ff      	movs	r2, #255	; 0xff
 80192aa:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 80192ac:	68fb      	ldr	r3, [r7, #12]
 80192ae:	2200      	movs	r2, #0
 80192b0:	729a      	strb	r2, [r3, #10]
 80192b2:	2200      	movs	r2, #0
 80192b4:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 80192b6:	683b      	ldr	r3, [r7, #0]
 80192b8:	9302      	str	r3, [sp, #8]
 80192ba:	2301      	movs	r3, #1
 80192bc:	9301      	str	r3, [sp, #4]
 80192be:	2300      	movs	r3, #0
 80192c0:	9300      	str	r3, [sp, #0]
 80192c2:	23ff      	movs	r3, #255	; 0xff
 80192c4:	2200      	movs	r2, #0
 80192c6:	69f9      	ldr	r1, [r7, #28]
 80192c8:	6878      	ldr	r0, [r7, #4]
 80192ca:	f000 fa93 	bl	80197f4 <ip4_output_if>
 80192ce:	4603      	mov	r3, r0
 80192d0:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 80192d2:	e001      	b.n	80192d8 <icmp_input+0x1b8>
      break;
 80192d4:	bf00      	nop
 80192d6:	e000      	b.n	80192da <icmp_input+0x1ba>
      break;
 80192d8:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 80192da:	6878      	ldr	r0, [r7, #4]
 80192dc:	f7f6 ffc2 	bl	8010264 <pbuf_free>
  return;
 80192e0:	e013      	b.n	801930a <icmp_input+0x1ea>
    goto lenerr;
 80192e2:	bf00      	nop
 80192e4:	e002      	b.n	80192ec <icmp_input+0x1cc>
    goto lenerr;
 80192e6:	bf00      	nop
 80192e8:	e000      	b.n	80192ec <icmp_input+0x1cc>
        goto lenerr;
 80192ea:	bf00      	nop
lenerr:
  pbuf_free(p);
 80192ec:	6878      	ldr	r0, [r7, #4]
 80192ee:	f7f6 ffb9 	bl	8010264 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80192f2:	e00a      	b.n	801930a <icmp_input+0x1ea>
        goto icmperr;
 80192f4:	bf00      	nop
 80192f6:	e004      	b.n	8019302 <icmp_input+0x1e2>
        goto icmperr;
 80192f8:	bf00      	nop
 80192fa:	e002      	b.n	8019302 <icmp_input+0x1e2>
          goto icmperr;
 80192fc:	bf00      	nop
 80192fe:	e000      	b.n	8019302 <icmp_input+0x1e2>
          goto icmperr;
 8019300:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8019302:	6878      	ldr	r0, [r7, #4]
 8019304:	f7f6 ffae 	bl	8010264 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8019308:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 801930a:	3728      	adds	r7, #40	; 0x28
 801930c:	46bd      	mov	sp, r7
 801930e:	bd80      	pop	{r7, pc}
 8019310:	2000450c 	.word	0x2000450c
 8019314:	20004520 	.word	0x20004520
 8019318:	0802349c 	.word	0x0802349c
 801931c:	080234d4 	.word	0x080234d4
 8019320:	0802350c 	.word	0x0802350c
 8019324:	08023534 	.word	0x08023534

08019328 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8019328:	b580      	push	{r7, lr}
 801932a:	b082      	sub	sp, #8
 801932c:	af00      	add	r7, sp, #0
 801932e:	6078      	str	r0, [r7, #4]
 8019330:	460b      	mov	r3, r1
 8019332:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8019334:	78fb      	ldrb	r3, [r7, #3]
 8019336:	461a      	mov	r2, r3
 8019338:	2103      	movs	r1, #3
 801933a:	6878      	ldr	r0, [r7, #4]
 801933c:	f000 f814 	bl	8019368 <icmp_send_response>
}
 8019340:	bf00      	nop
 8019342:	3708      	adds	r7, #8
 8019344:	46bd      	mov	sp, r7
 8019346:	bd80      	pop	{r7, pc}

08019348 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8019348:	b580      	push	{r7, lr}
 801934a:	b082      	sub	sp, #8
 801934c:	af00      	add	r7, sp, #0
 801934e:	6078      	str	r0, [r7, #4]
 8019350:	460b      	mov	r3, r1
 8019352:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8019354:	78fb      	ldrb	r3, [r7, #3]
 8019356:	461a      	mov	r2, r3
 8019358:	210b      	movs	r1, #11
 801935a:	6878      	ldr	r0, [r7, #4]
 801935c:	f000 f804 	bl	8019368 <icmp_send_response>
}
 8019360:	bf00      	nop
 8019362:	3708      	adds	r7, #8
 8019364:	46bd      	mov	sp, r7
 8019366:	bd80      	pop	{r7, pc}

08019368 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8019368:	b580      	push	{r7, lr}
 801936a:	b08c      	sub	sp, #48	; 0x30
 801936c:	af04      	add	r7, sp, #16
 801936e:	6078      	str	r0, [r7, #4]
 8019370:	460b      	mov	r3, r1
 8019372:	70fb      	strb	r3, [r7, #3]
 8019374:	4613      	mov	r3, r2
 8019376:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8019378:	f44f 7220 	mov.w	r2, #640	; 0x280
 801937c:	2124      	movs	r1, #36	; 0x24
 801937e:	2022      	movs	r0, #34	; 0x22
 8019380:	f7f6 fc8c 	bl	800fc9c <pbuf_alloc>
 8019384:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8019386:	69fb      	ldr	r3, [r7, #28]
 8019388:	2b00      	cmp	r3, #0
 801938a:	d04c      	beq.n	8019426 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 801938c:	69fb      	ldr	r3, [r7, #28]
 801938e:	895b      	ldrh	r3, [r3, #10]
 8019390:	2b23      	cmp	r3, #35	; 0x23
 8019392:	d806      	bhi.n	80193a2 <icmp_send_response+0x3a>
 8019394:	4b26      	ldr	r3, [pc, #152]	; (8019430 <icmp_send_response+0xc8>)
 8019396:	f44f 72b4 	mov.w	r2, #360	; 0x168
 801939a:	4926      	ldr	r1, [pc, #152]	; (8019434 <icmp_send_response+0xcc>)
 801939c:	4826      	ldr	r0, [pc, #152]	; (8019438 <icmp_send_response+0xd0>)
 801939e:	f001 ffdf 	bl	801b360 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 80193a2:	687b      	ldr	r3, [r7, #4]
 80193a4:	685b      	ldr	r3, [r3, #4]
 80193a6:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 80193a8:	69fb      	ldr	r3, [r7, #28]
 80193aa:	685b      	ldr	r3, [r3, #4]
 80193ac:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 80193ae:	697b      	ldr	r3, [r7, #20]
 80193b0:	78fa      	ldrb	r2, [r7, #3]
 80193b2:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 80193b4:	697b      	ldr	r3, [r7, #20]
 80193b6:	78ba      	ldrb	r2, [r7, #2]
 80193b8:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 80193ba:	697b      	ldr	r3, [r7, #20]
 80193bc:	2200      	movs	r2, #0
 80193be:	711a      	strb	r2, [r3, #4]
 80193c0:	2200      	movs	r2, #0
 80193c2:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 80193c4:	697b      	ldr	r3, [r7, #20]
 80193c6:	2200      	movs	r2, #0
 80193c8:	719a      	strb	r2, [r3, #6]
 80193ca:	2200      	movs	r2, #0
 80193cc:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 80193ce:	69fb      	ldr	r3, [r7, #28]
 80193d0:	685b      	ldr	r3, [r3, #4]
 80193d2:	f103 0008 	add.w	r0, r3, #8
 80193d6:	687b      	ldr	r3, [r7, #4]
 80193d8:	685b      	ldr	r3, [r3, #4]
 80193da:	221c      	movs	r2, #28
 80193dc:	4619      	mov	r1, r3
 80193de:	f001 fa7b 	bl	801a8d8 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 80193e2:	69bb      	ldr	r3, [r7, #24]
 80193e4:	68db      	ldr	r3, [r3, #12]
 80193e6:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 80193e8:	f107 030c 	add.w	r3, r7, #12
 80193ec:	4618      	mov	r0, r3
 80193ee:	f000 f825 	bl	801943c <ip4_route>
 80193f2:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 80193f4:	693b      	ldr	r3, [r7, #16]
 80193f6:	2b00      	cmp	r3, #0
 80193f8:	d011      	beq.n	801941e <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 80193fa:	697b      	ldr	r3, [r7, #20]
 80193fc:	2200      	movs	r2, #0
 80193fe:	709a      	strb	r2, [r3, #2]
 8019400:	2200      	movs	r2, #0
 8019402:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8019404:	f107 020c 	add.w	r2, r7, #12
 8019408:	693b      	ldr	r3, [r7, #16]
 801940a:	9302      	str	r3, [sp, #8]
 801940c:	2301      	movs	r3, #1
 801940e:	9301      	str	r3, [sp, #4]
 8019410:	2300      	movs	r3, #0
 8019412:	9300      	str	r3, [sp, #0]
 8019414:	23ff      	movs	r3, #255	; 0xff
 8019416:	2100      	movs	r1, #0
 8019418:	69f8      	ldr	r0, [r7, #28]
 801941a:	f000 f9eb 	bl	80197f4 <ip4_output_if>
  }
  pbuf_free(q);
 801941e:	69f8      	ldr	r0, [r7, #28]
 8019420:	f7f6 ff20 	bl	8010264 <pbuf_free>
 8019424:	e000      	b.n	8019428 <icmp_send_response+0xc0>
    return;
 8019426:	bf00      	nop
}
 8019428:	3720      	adds	r7, #32
 801942a:	46bd      	mov	sp, r7
 801942c:	bd80      	pop	{r7, pc}
 801942e:	bf00      	nop
 8019430:	0802349c 	.word	0x0802349c
 8019434:	08023568 	.word	0x08023568
 8019438:	0802350c 	.word	0x0802350c

0801943c <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 801943c:	b480      	push	{r7}
 801943e:	b085      	sub	sp, #20
 8019440:	af00      	add	r7, sp, #0
 8019442:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8019444:	4b33      	ldr	r3, [pc, #204]	; (8019514 <ip4_route+0xd8>)
 8019446:	681b      	ldr	r3, [r3, #0]
 8019448:	60fb      	str	r3, [r7, #12]
 801944a:	e036      	b.n	80194ba <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801944c:	68fb      	ldr	r3, [r7, #12]
 801944e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8019452:	f003 0301 	and.w	r3, r3, #1
 8019456:	b2db      	uxtb	r3, r3
 8019458:	2b00      	cmp	r3, #0
 801945a:	d02b      	beq.n	80194b4 <ip4_route+0x78>
 801945c:	68fb      	ldr	r3, [r7, #12]
 801945e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8019462:	089b      	lsrs	r3, r3, #2
 8019464:	f003 0301 	and.w	r3, r3, #1
 8019468:	b2db      	uxtb	r3, r3
 801946a:	2b00      	cmp	r3, #0
 801946c:	d022      	beq.n	80194b4 <ip4_route+0x78>
 801946e:	68fb      	ldr	r3, [r7, #12]
 8019470:	3304      	adds	r3, #4
 8019472:	681b      	ldr	r3, [r3, #0]
 8019474:	2b00      	cmp	r3, #0
 8019476:	d01d      	beq.n	80194b4 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8019478:	687b      	ldr	r3, [r7, #4]
 801947a:	681a      	ldr	r2, [r3, #0]
 801947c:	68fb      	ldr	r3, [r7, #12]
 801947e:	3304      	adds	r3, #4
 8019480:	681b      	ldr	r3, [r3, #0]
 8019482:	405a      	eors	r2, r3
 8019484:	68fb      	ldr	r3, [r7, #12]
 8019486:	3308      	adds	r3, #8
 8019488:	681b      	ldr	r3, [r3, #0]
 801948a:	4013      	ands	r3, r2
 801948c:	2b00      	cmp	r3, #0
 801948e:	d101      	bne.n	8019494 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8019490:	68fb      	ldr	r3, [r7, #12]
 8019492:	e038      	b.n	8019506 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8019494:	68fb      	ldr	r3, [r7, #12]
 8019496:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801949a:	f003 0302 	and.w	r3, r3, #2
 801949e:	2b00      	cmp	r3, #0
 80194a0:	d108      	bne.n	80194b4 <ip4_route+0x78>
 80194a2:	687b      	ldr	r3, [r7, #4]
 80194a4:	681a      	ldr	r2, [r3, #0]
 80194a6:	68fb      	ldr	r3, [r7, #12]
 80194a8:	330c      	adds	r3, #12
 80194aa:	681b      	ldr	r3, [r3, #0]
 80194ac:	429a      	cmp	r2, r3
 80194ae:	d101      	bne.n	80194b4 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 80194b0:	68fb      	ldr	r3, [r7, #12]
 80194b2:	e028      	b.n	8019506 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 80194b4:	68fb      	ldr	r3, [r7, #12]
 80194b6:	681b      	ldr	r3, [r3, #0]
 80194b8:	60fb      	str	r3, [r7, #12]
 80194ba:	68fb      	ldr	r3, [r7, #12]
 80194bc:	2b00      	cmp	r3, #0
 80194be:	d1c5      	bne.n	801944c <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80194c0:	4b15      	ldr	r3, [pc, #84]	; (8019518 <ip4_route+0xdc>)
 80194c2:	681b      	ldr	r3, [r3, #0]
 80194c4:	2b00      	cmp	r3, #0
 80194c6:	d01a      	beq.n	80194fe <ip4_route+0xc2>
 80194c8:	4b13      	ldr	r3, [pc, #76]	; (8019518 <ip4_route+0xdc>)
 80194ca:	681b      	ldr	r3, [r3, #0]
 80194cc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80194d0:	f003 0301 	and.w	r3, r3, #1
 80194d4:	2b00      	cmp	r3, #0
 80194d6:	d012      	beq.n	80194fe <ip4_route+0xc2>
 80194d8:	4b0f      	ldr	r3, [pc, #60]	; (8019518 <ip4_route+0xdc>)
 80194da:	681b      	ldr	r3, [r3, #0]
 80194dc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80194e0:	f003 0304 	and.w	r3, r3, #4
 80194e4:	2b00      	cmp	r3, #0
 80194e6:	d00a      	beq.n	80194fe <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80194e8:	4b0b      	ldr	r3, [pc, #44]	; (8019518 <ip4_route+0xdc>)
 80194ea:	681b      	ldr	r3, [r3, #0]
 80194ec:	3304      	adds	r3, #4
 80194ee:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80194f0:	2b00      	cmp	r3, #0
 80194f2:	d004      	beq.n	80194fe <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80194f4:	687b      	ldr	r3, [r7, #4]
 80194f6:	681b      	ldr	r3, [r3, #0]
 80194f8:	b2db      	uxtb	r3, r3
 80194fa:	2b7f      	cmp	r3, #127	; 0x7f
 80194fc:	d101      	bne.n	8019502 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 80194fe:	2300      	movs	r3, #0
 8019500:	e001      	b.n	8019506 <ip4_route+0xca>
  }

  return netif_default;
 8019502:	4b05      	ldr	r3, [pc, #20]	; (8019518 <ip4_route+0xdc>)
 8019504:	681b      	ldr	r3, [r3, #0]
}
 8019506:	4618      	mov	r0, r3
 8019508:	3714      	adds	r7, #20
 801950a:	46bd      	mov	sp, r7
 801950c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019510:	4770      	bx	lr
 8019512:	bf00      	nop
 8019514:	20007620 	.word	0x20007620
 8019518:	20007624 	.word	0x20007624

0801951c <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 801951c:	b580      	push	{r7, lr}
 801951e:	b082      	sub	sp, #8
 8019520:	af00      	add	r7, sp, #0
 8019522:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8019524:	687b      	ldr	r3, [r7, #4]
 8019526:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801952a:	f003 0301 	and.w	r3, r3, #1
 801952e:	b2db      	uxtb	r3, r3
 8019530:	2b00      	cmp	r3, #0
 8019532:	d016      	beq.n	8019562 <ip4_input_accept+0x46>
 8019534:	687b      	ldr	r3, [r7, #4]
 8019536:	3304      	adds	r3, #4
 8019538:	681b      	ldr	r3, [r3, #0]
 801953a:	2b00      	cmp	r3, #0
 801953c:	d011      	beq.n	8019562 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801953e:	4b0b      	ldr	r3, [pc, #44]	; (801956c <ip4_input_accept+0x50>)
 8019540:	695a      	ldr	r2, [r3, #20]
 8019542:	687b      	ldr	r3, [r7, #4]
 8019544:	3304      	adds	r3, #4
 8019546:	681b      	ldr	r3, [r3, #0]
 8019548:	429a      	cmp	r2, r3
 801954a:	d008      	beq.n	801955e <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 801954c:	4b07      	ldr	r3, [pc, #28]	; (801956c <ip4_input_accept+0x50>)
 801954e:	695b      	ldr	r3, [r3, #20]
 8019550:	6879      	ldr	r1, [r7, #4]
 8019552:	4618      	mov	r0, r3
 8019554:	f000 fa26 	bl	80199a4 <ip4_addr_isbroadcast_u32>
 8019558:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801955a:	2b00      	cmp	r3, #0
 801955c:	d001      	beq.n	8019562 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801955e:	2301      	movs	r3, #1
 8019560:	e000      	b.n	8019564 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8019562:	2300      	movs	r3, #0
}
 8019564:	4618      	mov	r0, r3
 8019566:	3708      	adds	r7, #8
 8019568:	46bd      	mov	sp, r7
 801956a:	bd80      	pop	{r7, pc}
 801956c:	2000450c 	.word	0x2000450c

08019570 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8019570:	b580      	push	{r7, lr}
 8019572:	b088      	sub	sp, #32
 8019574:	af00      	add	r7, sp, #0
 8019576:	6078      	str	r0, [r7, #4]
 8019578:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 801957a:	2301      	movs	r3, #1
 801957c:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801957e:	687b      	ldr	r3, [r7, #4]
 8019580:	685b      	ldr	r3, [r3, #4]
 8019582:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 8019584:	69fb      	ldr	r3, [r7, #28]
 8019586:	781b      	ldrb	r3, [r3, #0]
 8019588:	091b      	lsrs	r3, r3, #4
 801958a:	b2db      	uxtb	r3, r3
 801958c:	2b04      	cmp	r3, #4
 801958e:	d004      	beq.n	801959a <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8019590:	6878      	ldr	r0, [r7, #4]
 8019592:	f7f6 fe67 	bl	8010264 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8019596:	2300      	movs	r3, #0
 8019598:	e123      	b.n	80197e2 <ip4_input+0x272>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801959a:	69fb      	ldr	r3, [r7, #28]
 801959c:	781b      	ldrb	r3, [r3, #0]
 801959e:	f003 030f 	and.w	r3, r3, #15
 80195a2:	b2db      	uxtb	r3, r3
 80195a4:	009b      	lsls	r3, r3, #2
 80195a6:	b2db      	uxtb	r3, r3
 80195a8:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 80195aa:	69fb      	ldr	r3, [r7, #28]
 80195ac:	885b      	ldrh	r3, [r3, #2]
 80195ae:	b29b      	uxth	r3, r3
 80195b0:	4618      	mov	r0, r3
 80195b2:	f7f5 fbbb 	bl	800ed2c <lwip_htons>
 80195b6:	4603      	mov	r3, r0
 80195b8:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 80195ba:	687b      	ldr	r3, [r7, #4]
 80195bc:	891b      	ldrh	r3, [r3, #8]
 80195be:	8a3a      	ldrh	r2, [r7, #16]
 80195c0:	429a      	cmp	r2, r3
 80195c2:	d204      	bcs.n	80195ce <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 80195c4:	8a3b      	ldrh	r3, [r7, #16]
 80195c6:	4619      	mov	r1, r3
 80195c8:	6878      	ldr	r0, [r7, #4]
 80195ca:	f7f6 fcc5 	bl	800ff58 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 80195ce:	687b      	ldr	r3, [r7, #4]
 80195d0:	895b      	ldrh	r3, [r3, #10]
 80195d2:	8a7a      	ldrh	r2, [r7, #18]
 80195d4:	429a      	cmp	r2, r3
 80195d6:	d807      	bhi.n	80195e8 <ip4_input+0x78>
 80195d8:	687b      	ldr	r3, [r7, #4]
 80195da:	891b      	ldrh	r3, [r3, #8]
 80195dc:	8a3a      	ldrh	r2, [r7, #16]
 80195de:	429a      	cmp	r2, r3
 80195e0:	d802      	bhi.n	80195e8 <ip4_input+0x78>
 80195e2:	8a7b      	ldrh	r3, [r7, #18]
 80195e4:	2b13      	cmp	r3, #19
 80195e6:	d804      	bhi.n	80195f2 <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 80195e8:	6878      	ldr	r0, [r7, #4]
 80195ea:	f7f6 fe3b 	bl	8010264 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 80195ee:	2300      	movs	r3, #0
 80195f0:	e0f7      	b.n	80197e2 <ip4_input+0x272>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 80195f2:	69fb      	ldr	r3, [r7, #28]
 80195f4:	691b      	ldr	r3, [r3, #16]
 80195f6:	4a7d      	ldr	r2, [pc, #500]	; (80197ec <ip4_input+0x27c>)
 80195f8:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 80195fa:	69fb      	ldr	r3, [r7, #28]
 80195fc:	68db      	ldr	r3, [r3, #12]
 80195fe:	4a7b      	ldr	r2, [pc, #492]	; (80197ec <ip4_input+0x27c>)
 8019600:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8019602:	4b7a      	ldr	r3, [pc, #488]	; (80197ec <ip4_input+0x27c>)
 8019604:	695b      	ldr	r3, [r3, #20]
 8019606:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801960a:	2be0      	cmp	r3, #224	; 0xe0
 801960c:	d112      	bne.n	8019634 <ip4_input+0xc4>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801960e:	683b      	ldr	r3, [r7, #0]
 8019610:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8019614:	f003 0301 	and.w	r3, r3, #1
 8019618:	b2db      	uxtb	r3, r3
 801961a:	2b00      	cmp	r3, #0
 801961c:	d007      	beq.n	801962e <ip4_input+0xbe>
 801961e:	683b      	ldr	r3, [r7, #0]
 8019620:	3304      	adds	r3, #4
 8019622:	681b      	ldr	r3, [r3, #0]
 8019624:	2b00      	cmp	r3, #0
 8019626:	d002      	beq.n	801962e <ip4_input+0xbe>
      netif = inp;
 8019628:	683b      	ldr	r3, [r7, #0]
 801962a:	61bb      	str	r3, [r7, #24]
 801962c:	e02a      	b.n	8019684 <ip4_input+0x114>
    } else {
      netif = NULL;
 801962e:	2300      	movs	r3, #0
 8019630:	61bb      	str	r3, [r7, #24]
 8019632:	e027      	b.n	8019684 <ip4_input+0x114>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8019634:	6838      	ldr	r0, [r7, #0]
 8019636:	f7ff ff71 	bl	801951c <ip4_input_accept>
 801963a:	4603      	mov	r3, r0
 801963c:	2b00      	cmp	r3, #0
 801963e:	d002      	beq.n	8019646 <ip4_input+0xd6>
      netif = inp;
 8019640:	683b      	ldr	r3, [r7, #0]
 8019642:	61bb      	str	r3, [r7, #24]
 8019644:	e01e      	b.n	8019684 <ip4_input+0x114>
    } else {
      netif = NULL;
 8019646:	2300      	movs	r3, #0
 8019648:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801964a:	4b68      	ldr	r3, [pc, #416]	; (80197ec <ip4_input+0x27c>)
 801964c:	695b      	ldr	r3, [r3, #20]
 801964e:	b2db      	uxtb	r3, r3
 8019650:	2b7f      	cmp	r3, #127	; 0x7f
 8019652:	d017      	beq.n	8019684 <ip4_input+0x114>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8019654:	4b66      	ldr	r3, [pc, #408]	; (80197f0 <ip4_input+0x280>)
 8019656:	681b      	ldr	r3, [r3, #0]
 8019658:	61bb      	str	r3, [r7, #24]
 801965a:	e00e      	b.n	801967a <ip4_input+0x10a>
          if (netif == inp) {
 801965c:	69ba      	ldr	r2, [r7, #24]
 801965e:	683b      	ldr	r3, [r7, #0]
 8019660:	429a      	cmp	r2, r3
 8019662:	d006      	beq.n	8019672 <ip4_input+0x102>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8019664:	69b8      	ldr	r0, [r7, #24]
 8019666:	f7ff ff59 	bl	801951c <ip4_input_accept>
 801966a:	4603      	mov	r3, r0
 801966c:	2b00      	cmp	r3, #0
 801966e:	d108      	bne.n	8019682 <ip4_input+0x112>
 8019670:	e000      	b.n	8019674 <ip4_input+0x104>
            continue;
 8019672:	bf00      	nop
        NETIF_FOREACH(netif) {
 8019674:	69bb      	ldr	r3, [r7, #24]
 8019676:	681b      	ldr	r3, [r3, #0]
 8019678:	61bb      	str	r3, [r7, #24]
 801967a:	69bb      	ldr	r3, [r7, #24]
 801967c:	2b00      	cmp	r3, #0
 801967e:	d1ed      	bne.n	801965c <ip4_input+0xec>
 8019680:	e000      	b.n	8019684 <ip4_input+0x114>
            break;
 8019682:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 8019684:	69bb      	ldr	r3, [r7, #24]
 8019686:	2b00      	cmp	r3, #0
 8019688:	d111      	bne.n	80196ae <ip4_input+0x13e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 801968a:	69fb      	ldr	r3, [r7, #28]
 801968c:	7a5b      	ldrb	r3, [r3, #9]
 801968e:	2b11      	cmp	r3, #17
 8019690:	d10d      	bne.n	80196ae <ip4_input+0x13e>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 8019692:	8a7b      	ldrh	r3, [r7, #18]
 8019694:	69fa      	ldr	r2, [r7, #28]
 8019696:	4413      	add	r3, r2
 8019698:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 801969a:	68fb      	ldr	r3, [r7, #12]
 801969c:	885b      	ldrh	r3, [r3, #2]
 801969e:	b29b      	uxth	r3, r3
 80196a0:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 80196a4:	d103      	bne.n	80196ae <ip4_input+0x13e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 80196a6:	683b      	ldr	r3, [r7, #0]
 80196a8:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 80196aa:	2300      	movs	r3, #0
 80196ac:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 80196ae:	697b      	ldr	r3, [r7, #20]
 80196b0:	2b00      	cmp	r3, #0
 80196b2:	d017      	beq.n	80196e4 <ip4_input+0x174>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 80196b4:	4b4d      	ldr	r3, [pc, #308]	; (80197ec <ip4_input+0x27c>)
 80196b6:	691b      	ldr	r3, [r3, #16]
 80196b8:	2b00      	cmp	r3, #0
 80196ba:	d013      	beq.n	80196e4 <ip4_input+0x174>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80196bc:	4b4b      	ldr	r3, [pc, #300]	; (80197ec <ip4_input+0x27c>)
 80196be:	691b      	ldr	r3, [r3, #16]
 80196c0:	6839      	ldr	r1, [r7, #0]
 80196c2:	4618      	mov	r0, r3
 80196c4:	f000 f96e 	bl	80199a4 <ip4_addr_isbroadcast_u32>
 80196c8:	4603      	mov	r3, r0
 80196ca:	2b00      	cmp	r3, #0
 80196cc:	d105      	bne.n	80196da <ip4_input+0x16a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 80196ce:	4b47      	ldr	r3, [pc, #284]	; (80197ec <ip4_input+0x27c>)
 80196d0:	691b      	ldr	r3, [r3, #16]
 80196d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80196d6:	2be0      	cmp	r3, #224	; 0xe0
 80196d8:	d104      	bne.n	80196e4 <ip4_input+0x174>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 80196da:	6878      	ldr	r0, [r7, #4]
 80196dc:	f7f6 fdc2 	bl	8010264 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 80196e0:	2300      	movs	r3, #0
 80196e2:	e07e      	b.n	80197e2 <ip4_input+0x272>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 80196e4:	69bb      	ldr	r3, [r7, #24]
 80196e6:	2b00      	cmp	r3, #0
 80196e8:	d104      	bne.n	80196f4 <ip4_input+0x184>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 80196ea:	6878      	ldr	r0, [r7, #4]
 80196ec:	f7f6 fdba 	bl	8010264 <pbuf_free>
    return ERR_OK;
 80196f0:	2300      	movs	r3, #0
 80196f2:	e076      	b.n	80197e2 <ip4_input+0x272>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 80196f4:	69fb      	ldr	r3, [r7, #28]
 80196f6:	88db      	ldrh	r3, [r3, #6]
 80196f8:	b29b      	uxth	r3, r3
 80196fa:	461a      	mov	r2, r3
 80196fc:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8019700:	4013      	ands	r3, r2
 8019702:	2b00      	cmp	r3, #0
 8019704:	d00b      	beq.n	801971e <ip4_input+0x1ae>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8019706:	6878      	ldr	r0, [r7, #4]
 8019708:	f000 fc92 	bl	801a030 <ip4_reass>
 801970c:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801970e:	687b      	ldr	r3, [r7, #4]
 8019710:	2b00      	cmp	r3, #0
 8019712:	d101      	bne.n	8019718 <ip4_input+0x1a8>
      return ERR_OK;
 8019714:	2300      	movs	r3, #0
 8019716:	e064      	b.n	80197e2 <ip4_input+0x272>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8019718:	687b      	ldr	r3, [r7, #4]
 801971a:	685b      	ldr	r3, [r3, #4]
 801971c:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 801971e:	4a33      	ldr	r2, [pc, #204]	; (80197ec <ip4_input+0x27c>)
 8019720:	69bb      	ldr	r3, [r7, #24]
 8019722:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8019724:	4a31      	ldr	r2, [pc, #196]	; (80197ec <ip4_input+0x27c>)
 8019726:	683b      	ldr	r3, [r7, #0]
 8019728:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801972a:	4a30      	ldr	r2, [pc, #192]	; (80197ec <ip4_input+0x27c>)
 801972c:	69fb      	ldr	r3, [r7, #28]
 801972e:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8019730:	69fb      	ldr	r3, [r7, #28]
 8019732:	781b      	ldrb	r3, [r3, #0]
 8019734:	f003 030f 	and.w	r3, r3, #15
 8019738:	b2db      	uxtb	r3, r3
 801973a:	009b      	lsls	r3, r3, #2
 801973c:	b2db      	uxtb	r3, r3
 801973e:	b29a      	uxth	r2, r3
 8019740:	4b2a      	ldr	r3, [pc, #168]	; (80197ec <ip4_input+0x27c>)
 8019742:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8019744:	8a7b      	ldrh	r3, [r7, #18]
 8019746:	4619      	mov	r1, r3
 8019748:	6878      	ldr	r0, [r7, #4]
 801974a:	f7f6 fd05 	bl	8010158 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 801974e:	69fb      	ldr	r3, [r7, #28]
 8019750:	7a5b      	ldrb	r3, [r3, #9]
 8019752:	2b11      	cmp	r3, #17
 8019754:	d006      	beq.n	8019764 <ip4_input+0x1f4>
 8019756:	2b11      	cmp	r3, #17
 8019758:	dc13      	bgt.n	8019782 <ip4_input+0x212>
 801975a:	2b01      	cmp	r3, #1
 801975c:	d00c      	beq.n	8019778 <ip4_input+0x208>
 801975e:	2b06      	cmp	r3, #6
 8019760:	d005      	beq.n	801976e <ip4_input+0x1fe>
 8019762:	e00e      	b.n	8019782 <ip4_input+0x212>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8019764:	6839      	ldr	r1, [r7, #0]
 8019766:	6878      	ldr	r0, [r7, #4]
 8019768:	f7fc fb26 	bl	8015db8 <udp_input>
        break;
 801976c:	e026      	b.n	80197bc <ip4_input+0x24c>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 801976e:	6839      	ldr	r1, [r7, #0]
 8019770:	6878      	ldr	r0, [r7, #4]
 8019772:	f7f8 fbaf 	bl	8011ed4 <tcp_input>
        break;
 8019776:	e021      	b.n	80197bc <ip4_input+0x24c>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8019778:	6839      	ldr	r1, [r7, #0]
 801977a:	6878      	ldr	r0, [r7, #4]
 801977c:	f7ff fcd0 	bl	8019120 <icmp_input>
        break;
 8019780:	e01c      	b.n	80197bc <ip4_input+0x24c>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8019782:	4b1a      	ldr	r3, [pc, #104]	; (80197ec <ip4_input+0x27c>)
 8019784:	695b      	ldr	r3, [r3, #20]
 8019786:	69b9      	ldr	r1, [r7, #24]
 8019788:	4618      	mov	r0, r3
 801978a:	f000 f90b 	bl	80199a4 <ip4_addr_isbroadcast_u32>
 801978e:	4603      	mov	r3, r0
 8019790:	2b00      	cmp	r3, #0
 8019792:	d10f      	bne.n	80197b4 <ip4_input+0x244>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8019794:	4b15      	ldr	r3, [pc, #84]	; (80197ec <ip4_input+0x27c>)
 8019796:	695b      	ldr	r3, [r3, #20]
 8019798:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801979c:	2be0      	cmp	r3, #224	; 0xe0
 801979e:	d009      	beq.n	80197b4 <ip4_input+0x244>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 80197a0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80197a4:	4619      	mov	r1, r3
 80197a6:	6878      	ldr	r0, [r7, #4]
 80197a8:	f7f6 fd49 	bl	801023e <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 80197ac:	2102      	movs	r1, #2
 80197ae:	6878      	ldr	r0, [r7, #4]
 80197b0:	f7ff fdba 	bl	8019328 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 80197b4:	6878      	ldr	r0, [r7, #4]
 80197b6:	f7f6 fd55 	bl	8010264 <pbuf_free>
        break;
 80197ba:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 80197bc:	4b0b      	ldr	r3, [pc, #44]	; (80197ec <ip4_input+0x27c>)
 80197be:	2200      	movs	r2, #0
 80197c0:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 80197c2:	4b0a      	ldr	r3, [pc, #40]	; (80197ec <ip4_input+0x27c>)
 80197c4:	2200      	movs	r2, #0
 80197c6:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 80197c8:	4b08      	ldr	r3, [pc, #32]	; (80197ec <ip4_input+0x27c>)
 80197ca:	2200      	movs	r2, #0
 80197cc:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 80197ce:	4b07      	ldr	r3, [pc, #28]	; (80197ec <ip4_input+0x27c>)
 80197d0:	2200      	movs	r2, #0
 80197d2:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 80197d4:	4b05      	ldr	r3, [pc, #20]	; (80197ec <ip4_input+0x27c>)
 80197d6:	2200      	movs	r2, #0
 80197d8:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 80197da:	4b04      	ldr	r3, [pc, #16]	; (80197ec <ip4_input+0x27c>)
 80197dc:	2200      	movs	r2, #0
 80197de:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 80197e0:	2300      	movs	r3, #0
}
 80197e2:	4618      	mov	r0, r3
 80197e4:	3720      	adds	r7, #32
 80197e6:	46bd      	mov	sp, r7
 80197e8:	bd80      	pop	{r7, pc}
 80197ea:	bf00      	nop
 80197ec:	2000450c 	.word	0x2000450c
 80197f0:	20007620 	.word	0x20007620

080197f4 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 80197f4:	b580      	push	{r7, lr}
 80197f6:	b08a      	sub	sp, #40	; 0x28
 80197f8:	af04      	add	r7, sp, #16
 80197fa:	60f8      	str	r0, [r7, #12]
 80197fc:	60b9      	str	r1, [r7, #8]
 80197fe:	607a      	str	r2, [r7, #4]
 8019800:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8019802:	68bb      	ldr	r3, [r7, #8]
 8019804:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8019806:	687b      	ldr	r3, [r7, #4]
 8019808:	2b00      	cmp	r3, #0
 801980a:	d009      	beq.n	8019820 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 801980c:	68bb      	ldr	r3, [r7, #8]
 801980e:	2b00      	cmp	r3, #0
 8019810:	d003      	beq.n	801981a <ip4_output_if+0x26>
 8019812:	68bb      	ldr	r3, [r7, #8]
 8019814:	681b      	ldr	r3, [r3, #0]
 8019816:	2b00      	cmp	r3, #0
 8019818:	d102      	bne.n	8019820 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801981a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801981c:	3304      	adds	r3, #4
 801981e:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8019820:	78fa      	ldrb	r2, [r7, #3]
 8019822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019824:	9302      	str	r3, [sp, #8]
 8019826:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801982a:	9301      	str	r3, [sp, #4]
 801982c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8019830:	9300      	str	r3, [sp, #0]
 8019832:	4613      	mov	r3, r2
 8019834:	687a      	ldr	r2, [r7, #4]
 8019836:	6979      	ldr	r1, [r7, #20]
 8019838:	68f8      	ldr	r0, [r7, #12]
 801983a:	f000 f805 	bl	8019848 <ip4_output_if_src>
 801983e:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8019840:	4618      	mov	r0, r3
 8019842:	3718      	adds	r7, #24
 8019844:	46bd      	mov	sp, r7
 8019846:	bd80      	pop	{r7, pc}

08019848 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8019848:	b580      	push	{r7, lr}
 801984a:	b088      	sub	sp, #32
 801984c:	af00      	add	r7, sp, #0
 801984e:	60f8      	str	r0, [r7, #12]
 8019850:	60b9      	str	r1, [r7, #8]
 8019852:	607a      	str	r2, [r7, #4]
 8019854:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8019856:	68fb      	ldr	r3, [r7, #12]
 8019858:	7b9b      	ldrb	r3, [r3, #14]
 801985a:	2b01      	cmp	r3, #1
 801985c:	d006      	beq.n	801986c <ip4_output_if_src+0x24>
 801985e:	4b4b      	ldr	r3, [pc, #300]	; (801998c <ip4_output_if_src+0x144>)
 8019860:	f44f 7255 	mov.w	r2, #852	; 0x354
 8019864:	494a      	ldr	r1, [pc, #296]	; (8019990 <ip4_output_if_src+0x148>)
 8019866:	484b      	ldr	r0, [pc, #300]	; (8019994 <ip4_output_if_src+0x14c>)
 8019868:	f001 fd7a 	bl	801b360 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 801986c:	687b      	ldr	r3, [r7, #4]
 801986e:	2b00      	cmp	r3, #0
 8019870:	d060      	beq.n	8019934 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8019872:	2314      	movs	r3, #20
 8019874:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8019876:	2114      	movs	r1, #20
 8019878:	68f8      	ldr	r0, [r7, #12]
 801987a:	f7f6 fc5d 	bl	8010138 <pbuf_add_header>
 801987e:	4603      	mov	r3, r0
 8019880:	2b00      	cmp	r3, #0
 8019882:	d002      	beq.n	801988a <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8019884:	f06f 0301 	mvn.w	r3, #1
 8019888:	e07c      	b.n	8019984 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801988a:	68fb      	ldr	r3, [r7, #12]
 801988c:	685b      	ldr	r3, [r3, #4]
 801988e:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8019890:	68fb      	ldr	r3, [r7, #12]
 8019892:	895b      	ldrh	r3, [r3, #10]
 8019894:	2b13      	cmp	r3, #19
 8019896:	d806      	bhi.n	80198a6 <ip4_output_if_src+0x5e>
 8019898:	4b3c      	ldr	r3, [pc, #240]	; (801998c <ip4_output_if_src+0x144>)
 801989a:	f44f 7262 	mov.w	r2, #904	; 0x388
 801989e:	493e      	ldr	r1, [pc, #248]	; (8019998 <ip4_output_if_src+0x150>)
 80198a0:	483c      	ldr	r0, [pc, #240]	; (8019994 <ip4_output_if_src+0x14c>)
 80198a2:	f001 fd5d 	bl	801b360 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 80198a6:	69fb      	ldr	r3, [r7, #28]
 80198a8:	78fa      	ldrb	r2, [r7, #3]
 80198aa:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 80198ac:	69fb      	ldr	r3, [r7, #28]
 80198ae:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80198b2:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 80198b4:	687b      	ldr	r3, [r7, #4]
 80198b6:	681a      	ldr	r2, [r3, #0]
 80198b8:	69fb      	ldr	r3, [r7, #28]
 80198ba:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 80198bc:	8b7b      	ldrh	r3, [r7, #26]
 80198be:	089b      	lsrs	r3, r3, #2
 80198c0:	b29b      	uxth	r3, r3
 80198c2:	b2db      	uxtb	r3, r3
 80198c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80198c8:	b2da      	uxtb	r2, r3
 80198ca:	69fb      	ldr	r3, [r7, #28]
 80198cc:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 80198ce:	69fb      	ldr	r3, [r7, #28]
 80198d0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80198d4:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 80198d6:	68fb      	ldr	r3, [r7, #12]
 80198d8:	891b      	ldrh	r3, [r3, #8]
 80198da:	4618      	mov	r0, r3
 80198dc:	f7f5 fa26 	bl	800ed2c <lwip_htons>
 80198e0:	4603      	mov	r3, r0
 80198e2:	461a      	mov	r2, r3
 80198e4:	69fb      	ldr	r3, [r7, #28]
 80198e6:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 80198e8:	69fb      	ldr	r3, [r7, #28]
 80198ea:	2200      	movs	r2, #0
 80198ec:	719a      	strb	r2, [r3, #6]
 80198ee:	2200      	movs	r2, #0
 80198f0:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 80198f2:	4b2a      	ldr	r3, [pc, #168]	; (801999c <ip4_output_if_src+0x154>)
 80198f4:	881b      	ldrh	r3, [r3, #0]
 80198f6:	4618      	mov	r0, r3
 80198f8:	f7f5 fa18 	bl	800ed2c <lwip_htons>
 80198fc:	4603      	mov	r3, r0
 80198fe:	461a      	mov	r2, r3
 8019900:	69fb      	ldr	r3, [r7, #28]
 8019902:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8019904:	4b25      	ldr	r3, [pc, #148]	; (801999c <ip4_output_if_src+0x154>)
 8019906:	881b      	ldrh	r3, [r3, #0]
 8019908:	3301      	adds	r3, #1
 801990a:	b29a      	uxth	r2, r3
 801990c:	4b23      	ldr	r3, [pc, #140]	; (801999c <ip4_output_if_src+0x154>)
 801990e:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8019910:	68bb      	ldr	r3, [r7, #8]
 8019912:	2b00      	cmp	r3, #0
 8019914:	d104      	bne.n	8019920 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8019916:	4b22      	ldr	r3, [pc, #136]	; (80199a0 <ip4_output_if_src+0x158>)
 8019918:	681a      	ldr	r2, [r3, #0]
 801991a:	69fb      	ldr	r3, [r7, #28]
 801991c:	60da      	str	r2, [r3, #12]
 801991e:	e003      	b.n	8019928 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8019920:	68bb      	ldr	r3, [r7, #8]
 8019922:	681a      	ldr	r2, [r3, #0]
 8019924:	69fb      	ldr	r3, [r7, #28]
 8019926:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8019928:	69fb      	ldr	r3, [r7, #28]
 801992a:	2200      	movs	r2, #0
 801992c:	729a      	strb	r2, [r3, #10]
 801992e:	2200      	movs	r2, #0
 8019930:	72da      	strb	r2, [r3, #11]
 8019932:	e00f      	b.n	8019954 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8019934:	68fb      	ldr	r3, [r7, #12]
 8019936:	895b      	ldrh	r3, [r3, #10]
 8019938:	2b13      	cmp	r3, #19
 801993a:	d802      	bhi.n	8019942 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801993c:	f06f 0301 	mvn.w	r3, #1
 8019940:	e020      	b.n	8019984 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8019942:	68fb      	ldr	r3, [r7, #12]
 8019944:	685b      	ldr	r3, [r3, #4]
 8019946:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8019948:	69fb      	ldr	r3, [r7, #28]
 801994a:	691b      	ldr	r3, [r3, #16]
 801994c:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 801994e:	f107 0314 	add.w	r3, r7, #20
 8019952:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8019954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019956:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8019958:	2b00      	cmp	r3, #0
 801995a:	d00c      	beq.n	8019976 <ip4_output_if_src+0x12e>
 801995c:	68fb      	ldr	r3, [r7, #12]
 801995e:	891a      	ldrh	r2, [r3, #8]
 8019960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019962:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8019964:	429a      	cmp	r2, r3
 8019966:	d906      	bls.n	8019976 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8019968:	687a      	ldr	r2, [r7, #4]
 801996a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801996c:	68f8      	ldr	r0, [r7, #12]
 801996e:	f000 fd4d 	bl	801a40c <ip4_frag>
 8019972:	4603      	mov	r3, r0
 8019974:	e006      	b.n	8019984 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8019976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019978:	695b      	ldr	r3, [r3, #20]
 801997a:	687a      	ldr	r2, [r7, #4]
 801997c:	68f9      	ldr	r1, [r7, #12]
 801997e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8019980:	4798      	blx	r3
 8019982:	4603      	mov	r3, r0
}
 8019984:	4618      	mov	r0, r3
 8019986:	3720      	adds	r7, #32
 8019988:	46bd      	mov	sp, r7
 801998a:	bd80      	pop	{r7, pc}
 801998c:	08023594 	.word	0x08023594
 8019990:	080235c8 	.word	0x080235c8
 8019994:	080235d4 	.word	0x080235d4
 8019998:	080235fc 	.word	0x080235fc
 801999c:	2000061e 	.word	0x2000061e
 80199a0:	08023f40 	.word	0x08023f40

080199a4 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 80199a4:	b480      	push	{r7}
 80199a6:	b085      	sub	sp, #20
 80199a8:	af00      	add	r7, sp, #0
 80199aa:	6078      	str	r0, [r7, #4]
 80199ac:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 80199ae:	687b      	ldr	r3, [r7, #4]
 80199b0:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 80199b2:	687b      	ldr	r3, [r7, #4]
 80199b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80199b8:	d002      	beq.n	80199c0 <ip4_addr_isbroadcast_u32+0x1c>
 80199ba:	687b      	ldr	r3, [r7, #4]
 80199bc:	2b00      	cmp	r3, #0
 80199be:	d101      	bne.n	80199c4 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 80199c0:	2301      	movs	r3, #1
 80199c2:	e02a      	b.n	8019a1a <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 80199c4:	683b      	ldr	r3, [r7, #0]
 80199c6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80199ca:	f003 0302 	and.w	r3, r3, #2
 80199ce:	2b00      	cmp	r3, #0
 80199d0:	d101      	bne.n	80199d6 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 80199d2:	2300      	movs	r3, #0
 80199d4:	e021      	b.n	8019a1a <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 80199d6:	683b      	ldr	r3, [r7, #0]
 80199d8:	3304      	adds	r3, #4
 80199da:	681b      	ldr	r3, [r3, #0]
 80199dc:	687a      	ldr	r2, [r7, #4]
 80199de:	429a      	cmp	r2, r3
 80199e0:	d101      	bne.n	80199e6 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 80199e2:	2300      	movs	r3, #0
 80199e4:	e019      	b.n	8019a1a <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 80199e6:	68fa      	ldr	r2, [r7, #12]
 80199e8:	683b      	ldr	r3, [r7, #0]
 80199ea:	3304      	adds	r3, #4
 80199ec:	681b      	ldr	r3, [r3, #0]
 80199ee:	405a      	eors	r2, r3
 80199f0:	683b      	ldr	r3, [r7, #0]
 80199f2:	3308      	adds	r3, #8
 80199f4:	681b      	ldr	r3, [r3, #0]
 80199f6:	4013      	ands	r3, r2
 80199f8:	2b00      	cmp	r3, #0
 80199fa:	d10d      	bne.n	8019a18 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80199fc:	683b      	ldr	r3, [r7, #0]
 80199fe:	3308      	adds	r3, #8
 8019a00:	681b      	ldr	r3, [r3, #0]
 8019a02:	43da      	mvns	r2, r3
 8019a04:	687b      	ldr	r3, [r7, #4]
 8019a06:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8019a08:	683b      	ldr	r3, [r7, #0]
 8019a0a:	3308      	adds	r3, #8
 8019a0c:	681b      	ldr	r3, [r3, #0]
 8019a0e:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8019a10:	429a      	cmp	r2, r3
 8019a12:	d101      	bne.n	8019a18 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8019a14:	2301      	movs	r3, #1
 8019a16:	e000      	b.n	8019a1a <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8019a18:	2300      	movs	r3, #0
  }
}
 8019a1a:	4618      	mov	r0, r3
 8019a1c:	3714      	adds	r7, #20
 8019a1e:	46bd      	mov	sp, r7
 8019a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a24:	4770      	bx	lr
	...

08019a28 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8019a28:	b580      	push	{r7, lr}
 8019a2a:	b084      	sub	sp, #16
 8019a2c:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8019a2e:	2300      	movs	r3, #0
 8019a30:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8019a32:	4b12      	ldr	r3, [pc, #72]	; (8019a7c <ip_reass_tmr+0x54>)
 8019a34:	681b      	ldr	r3, [r3, #0]
 8019a36:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8019a38:	e018      	b.n	8019a6c <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8019a3a:	68fb      	ldr	r3, [r7, #12]
 8019a3c:	7fdb      	ldrb	r3, [r3, #31]
 8019a3e:	2b00      	cmp	r3, #0
 8019a40:	d00b      	beq.n	8019a5a <ip_reass_tmr+0x32>
      r->timer--;
 8019a42:	68fb      	ldr	r3, [r7, #12]
 8019a44:	7fdb      	ldrb	r3, [r3, #31]
 8019a46:	3b01      	subs	r3, #1
 8019a48:	b2da      	uxtb	r2, r3
 8019a4a:	68fb      	ldr	r3, [r7, #12]
 8019a4c:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8019a4e:	68fb      	ldr	r3, [r7, #12]
 8019a50:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8019a52:	68fb      	ldr	r3, [r7, #12]
 8019a54:	681b      	ldr	r3, [r3, #0]
 8019a56:	60fb      	str	r3, [r7, #12]
 8019a58:	e008      	b.n	8019a6c <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8019a5a:	68fb      	ldr	r3, [r7, #12]
 8019a5c:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8019a5e:	68fb      	ldr	r3, [r7, #12]
 8019a60:	681b      	ldr	r3, [r3, #0]
 8019a62:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8019a64:	68b9      	ldr	r1, [r7, #8]
 8019a66:	6878      	ldr	r0, [r7, #4]
 8019a68:	f000 f80a 	bl	8019a80 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8019a6c:	68fb      	ldr	r3, [r7, #12]
 8019a6e:	2b00      	cmp	r3, #0
 8019a70:	d1e3      	bne.n	8019a3a <ip_reass_tmr+0x12>
    }
  }
}
 8019a72:	bf00      	nop
 8019a74:	bf00      	nop
 8019a76:	3710      	adds	r7, #16
 8019a78:	46bd      	mov	sp, r7
 8019a7a:	bd80      	pop	{r7, pc}
 8019a7c:	20000620 	.word	0x20000620

08019a80 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8019a80:	b580      	push	{r7, lr}
 8019a82:	b088      	sub	sp, #32
 8019a84:	af00      	add	r7, sp, #0
 8019a86:	6078      	str	r0, [r7, #4]
 8019a88:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8019a8a:	2300      	movs	r3, #0
 8019a8c:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8019a8e:	683a      	ldr	r2, [r7, #0]
 8019a90:	687b      	ldr	r3, [r7, #4]
 8019a92:	429a      	cmp	r2, r3
 8019a94:	d105      	bne.n	8019aa2 <ip_reass_free_complete_datagram+0x22>
 8019a96:	4b45      	ldr	r3, [pc, #276]	; (8019bac <ip_reass_free_complete_datagram+0x12c>)
 8019a98:	22ab      	movs	r2, #171	; 0xab
 8019a9a:	4945      	ldr	r1, [pc, #276]	; (8019bb0 <ip_reass_free_complete_datagram+0x130>)
 8019a9c:	4845      	ldr	r0, [pc, #276]	; (8019bb4 <ip_reass_free_complete_datagram+0x134>)
 8019a9e:	f001 fc5f 	bl	801b360 <iprintf>
  if (prev != NULL) {
 8019aa2:	683b      	ldr	r3, [r7, #0]
 8019aa4:	2b00      	cmp	r3, #0
 8019aa6:	d00a      	beq.n	8019abe <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8019aa8:	683b      	ldr	r3, [r7, #0]
 8019aaa:	681b      	ldr	r3, [r3, #0]
 8019aac:	687a      	ldr	r2, [r7, #4]
 8019aae:	429a      	cmp	r2, r3
 8019ab0:	d005      	beq.n	8019abe <ip_reass_free_complete_datagram+0x3e>
 8019ab2:	4b3e      	ldr	r3, [pc, #248]	; (8019bac <ip_reass_free_complete_datagram+0x12c>)
 8019ab4:	22ad      	movs	r2, #173	; 0xad
 8019ab6:	4940      	ldr	r1, [pc, #256]	; (8019bb8 <ip_reass_free_complete_datagram+0x138>)
 8019ab8:	483e      	ldr	r0, [pc, #248]	; (8019bb4 <ip_reass_free_complete_datagram+0x134>)
 8019aba:	f001 fc51 	bl	801b360 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8019abe:	687b      	ldr	r3, [r7, #4]
 8019ac0:	685b      	ldr	r3, [r3, #4]
 8019ac2:	685b      	ldr	r3, [r3, #4]
 8019ac4:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8019ac6:	697b      	ldr	r3, [r7, #20]
 8019ac8:	889b      	ldrh	r3, [r3, #4]
 8019aca:	b29b      	uxth	r3, r3
 8019acc:	2b00      	cmp	r3, #0
 8019ace:	d12a      	bne.n	8019b26 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8019ad0:	687b      	ldr	r3, [r7, #4]
 8019ad2:	685b      	ldr	r3, [r3, #4]
 8019ad4:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8019ad6:	697b      	ldr	r3, [r7, #20]
 8019ad8:	681a      	ldr	r2, [r3, #0]
 8019ada:	687b      	ldr	r3, [r7, #4]
 8019adc:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8019ade:	69bb      	ldr	r3, [r7, #24]
 8019ae0:	6858      	ldr	r0, [r3, #4]
 8019ae2:	687b      	ldr	r3, [r7, #4]
 8019ae4:	3308      	adds	r3, #8
 8019ae6:	2214      	movs	r2, #20
 8019ae8:	4619      	mov	r1, r3
 8019aea:	f000 fef5 	bl	801a8d8 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8019aee:	2101      	movs	r1, #1
 8019af0:	69b8      	ldr	r0, [r7, #24]
 8019af2:	f7ff fc29 	bl	8019348 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8019af6:	69b8      	ldr	r0, [r7, #24]
 8019af8:	f7f6 fc3c 	bl	8010374 <pbuf_clen>
 8019afc:	4603      	mov	r3, r0
 8019afe:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8019b00:	8bfa      	ldrh	r2, [r7, #30]
 8019b02:	8a7b      	ldrh	r3, [r7, #18]
 8019b04:	4413      	add	r3, r2
 8019b06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8019b0a:	db05      	blt.n	8019b18 <ip_reass_free_complete_datagram+0x98>
 8019b0c:	4b27      	ldr	r3, [pc, #156]	; (8019bac <ip_reass_free_complete_datagram+0x12c>)
 8019b0e:	22bc      	movs	r2, #188	; 0xbc
 8019b10:	492a      	ldr	r1, [pc, #168]	; (8019bbc <ip_reass_free_complete_datagram+0x13c>)
 8019b12:	4828      	ldr	r0, [pc, #160]	; (8019bb4 <ip_reass_free_complete_datagram+0x134>)
 8019b14:	f001 fc24 	bl	801b360 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8019b18:	8bfa      	ldrh	r2, [r7, #30]
 8019b1a:	8a7b      	ldrh	r3, [r7, #18]
 8019b1c:	4413      	add	r3, r2
 8019b1e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8019b20:	69b8      	ldr	r0, [r7, #24]
 8019b22:	f7f6 fb9f 	bl	8010264 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8019b26:	687b      	ldr	r3, [r7, #4]
 8019b28:	685b      	ldr	r3, [r3, #4]
 8019b2a:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8019b2c:	e01f      	b.n	8019b6e <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8019b2e:	69bb      	ldr	r3, [r7, #24]
 8019b30:	685b      	ldr	r3, [r3, #4]
 8019b32:	617b      	str	r3, [r7, #20]
    pcur = p;
 8019b34:	69bb      	ldr	r3, [r7, #24]
 8019b36:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8019b38:	697b      	ldr	r3, [r7, #20]
 8019b3a:	681b      	ldr	r3, [r3, #0]
 8019b3c:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8019b3e:	68f8      	ldr	r0, [r7, #12]
 8019b40:	f7f6 fc18 	bl	8010374 <pbuf_clen>
 8019b44:	4603      	mov	r3, r0
 8019b46:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8019b48:	8bfa      	ldrh	r2, [r7, #30]
 8019b4a:	8a7b      	ldrh	r3, [r7, #18]
 8019b4c:	4413      	add	r3, r2
 8019b4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8019b52:	db05      	blt.n	8019b60 <ip_reass_free_complete_datagram+0xe0>
 8019b54:	4b15      	ldr	r3, [pc, #84]	; (8019bac <ip_reass_free_complete_datagram+0x12c>)
 8019b56:	22cc      	movs	r2, #204	; 0xcc
 8019b58:	4918      	ldr	r1, [pc, #96]	; (8019bbc <ip_reass_free_complete_datagram+0x13c>)
 8019b5a:	4816      	ldr	r0, [pc, #88]	; (8019bb4 <ip_reass_free_complete_datagram+0x134>)
 8019b5c:	f001 fc00 	bl	801b360 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8019b60:	8bfa      	ldrh	r2, [r7, #30]
 8019b62:	8a7b      	ldrh	r3, [r7, #18]
 8019b64:	4413      	add	r3, r2
 8019b66:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8019b68:	68f8      	ldr	r0, [r7, #12]
 8019b6a:	f7f6 fb7b 	bl	8010264 <pbuf_free>
  while (p != NULL) {
 8019b6e:	69bb      	ldr	r3, [r7, #24]
 8019b70:	2b00      	cmp	r3, #0
 8019b72:	d1dc      	bne.n	8019b2e <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8019b74:	6839      	ldr	r1, [r7, #0]
 8019b76:	6878      	ldr	r0, [r7, #4]
 8019b78:	f000 f8c2 	bl	8019d00 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8019b7c:	4b10      	ldr	r3, [pc, #64]	; (8019bc0 <ip_reass_free_complete_datagram+0x140>)
 8019b7e:	881b      	ldrh	r3, [r3, #0]
 8019b80:	8bfa      	ldrh	r2, [r7, #30]
 8019b82:	429a      	cmp	r2, r3
 8019b84:	d905      	bls.n	8019b92 <ip_reass_free_complete_datagram+0x112>
 8019b86:	4b09      	ldr	r3, [pc, #36]	; (8019bac <ip_reass_free_complete_datagram+0x12c>)
 8019b88:	22d2      	movs	r2, #210	; 0xd2
 8019b8a:	490e      	ldr	r1, [pc, #56]	; (8019bc4 <ip_reass_free_complete_datagram+0x144>)
 8019b8c:	4809      	ldr	r0, [pc, #36]	; (8019bb4 <ip_reass_free_complete_datagram+0x134>)
 8019b8e:	f001 fbe7 	bl	801b360 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8019b92:	4b0b      	ldr	r3, [pc, #44]	; (8019bc0 <ip_reass_free_complete_datagram+0x140>)
 8019b94:	881a      	ldrh	r2, [r3, #0]
 8019b96:	8bfb      	ldrh	r3, [r7, #30]
 8019b98:	1ad3      	subs	r3, r2, r3
 8019b9a:	b29a      	uxth	r2, r3
 8019b9c:	4b08      	ldr	r3, [pc, #32]	; (8019bc0 <ip_reass_free_complete_datagram+0x140>)
 8019b9e:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8019ba0:	8bfb      	ldrh	r3, [r7, #30]
}
 8019ba2:	4618      	mov	r0, r3
 8019ba4:	3720      	adds	r7, #32
 8019ba6:	46bd      	mov	sp, r7
 8019ba8:	bd80      	pop	{r7, pc}
 8019baa:	bf00      	nop
 8019bac:	0802362c 	.word	0x0802362c
 8019bb0:	08023668 	.word	0x08023668
 8019bb4:	08023674 	.word	0x08023674
 8019bb8:	0802369c 	.word	0x0802369c
 8019bbc:	080236b0 	.word	0x080236b0
 8019bc0:	20000624 	.word	0x20000624
 8019bc4:	080236d0 	.word	0x080236d0

08019bc8 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8019bc8:	b580      	push	{r7, lr}
 8019bca:	b08a      	sub	sp, #40	; 0x28
 8019bcc:	af00      	add	r7, sp, #0
 8019bce:	6078      	str	r0, [r7, #4]
 8019bd0:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8019bd2:	2300      	movs	r3, #0
 8019bd4:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8019bd6:	2300      	movs	r3, #0
 8019bd8:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8019bda:	2300      	movs	r3, #0
 8019bdc:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8019bde:	2300      	movs	r3, #0
 8019be0:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8019be2:	2300      	movs	r3, #0
 8019be4:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8019be6:	4b28      	ldr	r3, [pc, #160]	; (8019c88 <ip_reass_remove_oldest_datagram+0xc0>)
 8019be8:	681b      	ldr	r3, [r3, #0]
 8019bea:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8019bec:	e030      	b.n	8019c50 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8019bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019bf0:	695a      	ldr	r2, [r3, #20]
 8019bf2:	687b      	ldr	r3, [r7, #4]
 8019bf4:	68db      	ldr	r3, [r3, #12]
 8019bf6:	429a      	cmp	r2, r3
 8019bf8:	d10c      	bne.n	8019c14 <ip_reass_remove_oldest_datagram+0x4c>
 8019bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019bfc:	699a      	ldr	r2, [r3, #24]
 8019bfe:	687b      	ldr	r3, [r7, #4]
 8019c00:	691b      	ldr	r3, [r3, #16]
 8019c02:	429a      	cmp	r2, r3
 8019c04:	d106      	bne.n	8019c14 <ip_reass_remove_oldest_datagram+0x4c>
 8019c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019c08:	899a      	ldrh	r2, [r3, #12]
 8019c0a:	687b      	ldr	r3, [r7, #4]
 8019c0c:	889b      	ldrh	r3, [r3, #4]
 8019c0e:	b29b      	uxth	r3, r3
 8019c10:	429a      	cmp	r2, r3
 8019c12:	d014      	beq.n	8019c3e <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8019c14:	693b      	ldr	r3, [r7, #16]
 8019c16:	3301      	adds	r3, #1
 8019c18:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8019c1a:	6a3b      	ldr	r3, [r7, #32]
 8019c1c:	2b00      	cmp	r3, #0
 8019c1e:	d104      	bne.n	8019c2a <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8019c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019c22:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8019c24:	69fb      	ldr	r3, [r7, #28]
 8019c26:	61bb      	str	r3, [r7, #24]
 8019c28:	e009      	b.n	8019c3e <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8019c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019c2c:	7fda      	ldrb	r2, [r3, #31]
 8019c2e:	6a3b      	ldr	r3, [r7, #32]
 8019c30:	7fdb      	ldrb	r3, [r3, #31]
 8019c32:	429a      	cmp	r2, r3
 8019c34:	d803      	bhi.n	8019c3e <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8019c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019c38:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8019c3a:	69fb      	ldr	r3, [r7, #28]
 8019c3c:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8019c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019c40:	681b      	ldr	r3, [r3, #0]
 8019c42:	2b00      	cmp	r3, #0
 8019c44:	d001      	beq.n	8019c4a <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8019c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019c48:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8019c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019c4c:	681b      	ldr	r3, [r3, #0]
 8019c4e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8019c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019c52:	2b00      	cmp	r3, #0
 8019c54:	d1cb      	bne.n	8019bee <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8019c56:	6a3b      	ldr	r3, [r7, #32]
 8019c58:	2b00      	cmp	r3, #0
 8019c5a:	d008      	beq.n	8019c6e <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8019c5c:	69b9      	ldr	r1, [r7, #24]
 8019c5e:	6a38      	ldr	r0, [r7, #32]
 8019c60:	f7ff ff0e 	bl	8019a80 <ip_reass_free_complete_datagram>
 8019c64:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8019c66:	697a      	ldr	r2, [r7, #20]
 8019c68:	68fb      	ldr	r3, [r7, #12]
 8019c6a:	4413      	add	r3, r2
 8019c6c:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8019c6e:	697a      	ldr	r2, [r7, #20]
 8019c70:	683b      	ldr	r3, [r7, #0]
 8019c72:	429a      	cmp	r2, r3
 8019c74:	da02      	bge.n	8019c7c <ip_reass_remove_oldest_datagram+0xb4>
 8019c76:	693b      	ldr	r3, [r7, #16]
 8019c78:	2b01      	cmp	r3, #1
 8019c7a:	dcac      	bgt.n	8019bd6 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8019c7c:	697b      	ldr	r3, [r7, #20]
}
 8019c7e:	4618      	mov	r0, r3
 8019c80:	3728      	adds	r7, #40	; 0x28
 8019c82:	46bd      	mov	sp, r7
 8019c84:	bd80      	pop	{r7, pc}
 8019c86:	bf00      	nop
 8019c88:	20000620 	.word	0x20000620

08019c8c <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8019c8c:	b580      	push	{r7, lr}
 8019c8e:	b084      	sub	sp, #16
 8019c90:	af00      	add	r7, sp, #0
 8019c92:	6078      	str	r0, [r7, #4]
 8019c94:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8019c96:	2004      	movs	r0, #4
 8019c98:	f7f5 fc9e 	bl	800f5d8 <memp_malloc>
 8019c9c:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8019c9e:	68fb      	ldr	r3, [r7, #12]
 8019ca0:	2b00      	cmp	r3, #0
 8019ca2:	d110      	bne.n	8019cc6 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8019ca4:	6839      	ldr	r1, [r7, #0]
 8019ca6:	6878      	ldr	r0, [r7, #4]
 8019ca8:	f7ff ff8e 	bl	8019bc8 <ip_reass_remove_oldest_datagram>
 8019cac:	4602      	mov	r2, r0
 8019cae:	683b      	ldr	r3, [r7, #0]
 8019cb0:	4293      	cmp	r3, r2
 8019cb2:	dc03      	bgt.n	8019cbc <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8019cb4:	2004      	movs	r0, #4
 8019cb6:	f7f5 fc8f 	bl	800f5d8 <memp_malloc>
 8019cba:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8019cbc:	68fb      	ldr	r3, [r7, #12]
 8019cbe:	2b00      	cmp	r3, #0
 8019cc0:	d101      	bne.n	8019cc6 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8019cc2:	2300      	movs	r3, #0
 8019cc4:	e016      	b.n	8019cf4 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8019cc6:	2220      	movs	r2, #32
 8019cc8:	2100      	movs	r1, #0
 8019cca:	68f8      	ldr	r0, [r7, #12]
 8019ccc:	f000 fe2c 	bl	801a928 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8019cd0:	68fb      	ldr	r3, [r7, #12]
 8019cd2:	220f      	movs	r2, #15
 8019cd4:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8019cd6:	4b09      	ldr	r3, [pc, #36]	; (8019cfc <ip_reass_enqueue_new_datagram+0x70>)
 8019cd8:	681a      	ldr	r2, [r3, #0]
 8019cda:	68fb      	ldr	r3, [r7, #12]
 8019cdc:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8019cde:	4a07      	ldr	r2, [pc, #28]	; (8019cfc <ip_reass_enqueue_new_datagram+0x70>)
 8019ce0:	68fb      	ldr	r3, [r7, #12]
 8019ce2:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8019ce4:	68fb      	ldr	r3, [r7, #12]
 8019ce6:	3308      	adds	r3, #8
 8019ce8:	2214      	movs	r2, #20
 8019cea:	6879      	ldr	r1, [r7, #4]
 8019cec:	4618      	mov	r0, r3
 8019cee:	f000 fdf3 	bl	801a8d8 <memcpy>
  return ipr;
 8019cf2:	68fb      	ldr	r3, [r7, #12]
}
 8019cf4:	4618      	mov	r0, r3
 8019cf6:	3710      	adds	r7, #16
 8019cf8:	46bd      	mov	sp, r7
 8019cfa:	bd80      	pop	{r7, pc}
 8019cfc:	20000620 	.word	0x20000620

08019d00 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8019d00:	b580      	push	{r7, lr}
 8019d02:	b082      	sub	sp, #8
 8019d04:	af00      	add	r7, sp, #0
 8019d06:	6078      	str	r0, [r7, #4]
 8019d08:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8019d0a:	4b10      	ldr	r3, [pc, #64]	; (8019d4c <ip_reass_dequeue_datagram+0x4c>)
 8019d0c:	681b      	ldr	r3, [r3, #0]
 8019d0e:	687a      	ldr	r2, [r7, #4]
 8019d10:	429a      	cmp	r2, r3
 8019d12:	d104      	bne.n	8019d1e <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8019d14:	687b      	ldr	r3, [r7, #4]
 8019d16:	681b      	ldr	r3, [r3, #0]
 8019d18:	4a0c      	ldr	r2, [pc, #48]	; (8019d4c <ip_reass_dequeue_datagram+0x4c>)
 8019d1a:	6013      	str	r3, [r2, #0]
 8019d1c:	e00d      	b.n	8019d3a <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8019d1e:	683b      	ldr	r3, [r7, #0]
 8019d20:	2b00      	cmp	r3, #0
 8019d22:	d106      	bne.n	8019d32 <ip_reass_dequeue_datagram+0x32>
 8019d24:	4b0a      	ldr	r3, [pc, #40]	; (8019d50 <ip_reass_dequeue_datagram+0x50>)
 8019d26:	f240 1245 	movw	r2, #325	; 0x145
 8019d2a:	490a      	ldr	r1, [pc, #40]	; (8019d54 <ip_reass_dequeue_datagram+0x54>)
 8019d2c:	480a      	ldr	r0, [pc, #40]	; (8019d58 <ip_reass_dequeue_datagram+0x58>)
 8019d2e:	f001 fb17 	bl	801b360 <iprintf>
    prev->next = ipr->next;
 8019d32:	687b      	ldr	r3, [r7, #4]
 8019d34:	681a      	ldr	r2, [r3, #0]
 8019d36:	683b      	ldr	r3, [r7, #0]
 8019d38:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8019d3a:	6879      	ldr	r1, [r7, #4]
 8019d3c:	2004      	movs	r0, #4
 8019d3e:	f7f5 fc97 	bl	800f670 <memp_free>
}
 8019d42:	bf00      	nop
 8019d44:	3708      	adds	r7, #8
 8019d46:	46bd      	mov	sp, r7
 8019d48:	bd80      	pop	{r7, pc}
 8019d4a:	bf00      	nop
 8019d4c:	20000620 	.word	0x20000620
 8019d50:	0802362c 	.word	0x0802362c
 8019d54:	080236f4 	.word	0x080236f4
 8019d58:	08023674 	.word	0x08023674

08019d5c <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8019d5c:	b580      	push	{r7, lr}
 8019d5e:	b08c      	sub	sp, #48	; 0x30
 8019d60:	af00      	add	r7, sp, #0
 8019d62:	60f8      	str	r0, [r7, #12]
 8019d64:	60b9      	str	r1, [r7, #8]
 8019d66:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8019d68:	2300      	movs	r3, #0
 8019d6a:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8019d6c:	2301      	movs	r3, #1
 8019d6e:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8019d70:	68bb      	ldr	r3, [r7, #8]
 8019d72:	685b      	ldr	r3, [r3, #4]
 8019d74:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8019d76:	69fb      	ldr	r3, [r7, #28]
 8019d78:	885b      	ldrh	r3, [r3, #2]
 8019d7a:	b29b      	uxth	r3, r3
 8019d7c:	4618      	mov	r0, r3
 8019d7e:	f7f4 ffd5 	bl	800ed2c <lwip_htons>
 8019d82:	4603      	mov	r3, r0
 8019d84:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8019d86:	69fb      	ldr	r3, [r7, #28]
 8019d88:	781b      	ldrb	r3, [r3, #0]
 8019d8a:	f003 030f 	and.w	r3, r3, #15
 8019d8e:	b2db      	uxtb	r3, r3
 8019d90:	009b      	lsls	r3, r3, #2
 8019d92:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8019d94:	7e7b      	ldrb	r3, [r7, #25]
 8019d96:	b29b      	uxth	r3, r3
 8019d98:	8b7a      	ldrh	r2, [r7, #26]
 8019d9a:	429a      	cmp	r2, r3
 8019d9c:	d202      	bcs.n	8019da4 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8019d9e:	f04f 33ff 	mov.w	r3, #4294967295
 8019da2:	e135      	b.n	801a010 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8019da4:	7e7b      	ldrb	r3, [r7, #25]
 8019da6:	b29b      	uxth	r3, r3
 8019da8:	8b7a      	ldrh	r2, [r7, #26]
 8019daa:	1ad3      	subs	r3, r2, r3
 8019dac:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8019dae:	69fb      	ldr	r3, [r7, #28]
 8019db0:	88db      	ldrh	r3, [r3, #6]
 8019db2:	b29b      	uxth	r3, r3
 8019db4:	4618      	mov	r0, r3
 8019db6:	f7f4 ffb9 	bl	800ed2c <lwip_htons>
 8019dba:	4603      	mov	r3, r0
 8019dbc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8019dc0:	b29b      	uxth	r3, r3
 8019dc2:	00db      	lsls	r3, r3, #3
 8019dc4:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8019dc6:	68bb      	ldr	r3, [r7, #8]
 8019dc8:	685b      	ldr	r3, [r3, #4]
 8019dca:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8019dcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019dce:	2200      	movs	r2, #0
 8019dd0:	701a      	strb	r2, [r3, #0]
 8019dd2:	2200      	movs	r2, #0
 8019dd4:	705a      	strb	r2, [r3, #1]
 8019dd6:	2200      	movs	r2, #0
 8019dd8:	709a      	strb	r2, [r3, #2]
 8019dda:	2200      	movs	r2, #0
 8019ddc:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8019dde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019de0:	8afa      	ldrh	r2, [r7, #22]
 8019de2:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8019de4:	8afa      	ldrh	r2, [r7, #22]
 8019de6:	8b7b      	ldrh	r3, [r7, #26]
 8019de8:	4413      	add	r3, r2
 8019dea:	b29a      	uxth	r2, r3
 8019dec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019dee:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8019df0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019df2:	88db      	ldrh	r3, [r3, #6]
 8019df4:	b29b      	uxth	r3, r3
 8019df6:	8afa      	ldrh	r2, [r7, #22]
 8019df8:	429a      	cmp	r2, r3
 8019dfa:	d902      	bls.n	8019e02 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8019dfc:	f04f 33ff 	mov.w	r3, #4294967295
 8019e00:	e106      	b.n	801a010 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8019e02:	68fb      	ldr	r3, [r7, #12]
 8019e04:	685b      	ldr	r3, [r3, #4]
 8019e06:	627b      	str	r3, [r7, #36]	; 0x24
 8019e08:	e068      	b.n	8019edc <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8019e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019e0c:	685b      	ldr	r3, [r3, #4]
 8019e0e:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8019e10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019e12:	889b      	ldrh	r3, [r3, #4]
 8019e14:	b29a      	uxth	r2, r3
 8019e16:	693b      	ldr	r3, [r7, #16]
 8019e18:	889b      	ldrh	r3, [r3, #4]
 8019e1a:	b29b      	uxth	r3, r3
 8019e1c:	429a      	cmp	r2, r3
 8019e1e:	d235      	bcs.n	8019e8c <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8019e20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019e22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019e24:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8019e26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019e28:	2b00      	cmp	r3, #0
 8019e2a:	d020      	beq.n	8019e6e <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8019e2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019e2e:	889b      	ldrh	r3, [r3, #4]
 8019e30:	b29a      	uxth	r2, r3
 8019e32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019e34:	88db      	ldrh	r3, [r3, #6]
 8019e36:	b29b      	uxth	r3, r3
 8019e38:	429a      	cmp	r2, r3
 8019e3a:	d307      	bcc.n	8019e4c <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8019e3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019e3e:	88db      	ldrh	r3, [r3, #6]
 8019e40:	b29a      	uxth	r2, r3
 8019e42:	693b      	ldr	r3, [r7, #16]
 8019e44:	889b      	ldrh	r3, [r3, #4]
 8019e46:	b29b      	uxth	r3, r3
 8019e48:	429a      	cmp	r2, r3
 8019e4a:	d902      	bls.n	8019e52 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8019e4c:	f04f 33ff 	mov.w	r3, #4294967295
 8019e50:	e0de      	b.n	801a010 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8019e52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019e54:	68ba      	ldr	r2, [r7, #8]
 8019e56:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8019e58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019e5a:	88db      	ldrh	r3, [r3, #6]
 8019e5c:	b29a      	uxth	r2, r3
 8019e5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019e60:	889b      	ldrh	r3, [r3, #4]
 8019e62:	b29b      	uxth	r3, r3
 8019e64:	429a      	cmp	r2, r3
 8019e66:	d03d      	beq.n	8019ee4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8019e68:	2300      	movs	r3, #0
 8019e6a:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8019e6c:	e03a      	b.n	8019ee4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8019e6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019e70:	88db      	ldrh	r3, [r3, #6]
 8019e72:	b29a      	uxth	r2, r3
 8019e74:	693b      	ldr	r3, [r7, #16]
 8019e76:	889b      	ldrh	r3, [r3, #4]
 8019e78:	b29b      	uxth	r3, r3
 8019e7a:	429a      	cmp	r2, r3
 8019e7c:	d902      	bls.n	8019e84 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8019e7e:	f04f 33ff 	mov.w	r3, #4294967295
 8019e82:	e0c5      	b.n	801a010 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8019e84:	68fb      	ldr	r3, [r7, #12]
 8019e86:	68ba      	ldr	r2, [r7, #8]
 8019e88:	605a      	str	r2, [r3, #4]
      break;
 8019e8a:	e02b      	b.n	8019ee4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8019e8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019e8e:	889b      	ldrh	r3, [r3, #4]
 8019e90:	b29a      	uxth	r2, r3
 8019e92:	693b      	ldr	r3, [r7, #16]
 8019e94:	889b      	ldrh	r3, [r3, #4]
 8019e96:	b29b      	uxth	r3, r3
 8019e98:	429a      	cmp	r2, r3
 8019e9a:	d102      	bne.n	8019ea2 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8019e9c:	f04f 33ff 	mov.w	r3, #4294967295
 8019ea0:	e0b6      	b.n	801a010 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8019ea2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019ea4:	889b      	ldrh	r3, [r3, #4]
 8019ea6:	b29a      	uxth	r2, r3
 8019ea8:	693b      	ldr	r3, [r7, #16]
 8019eaa:	88db      	ldrh	r3, [r3, #6]
 8019eac:	b29b      	uxth	r3, r3
 8019eae:	429a      	cmp	r2, r3
 8019eb0:	d202      	bcs.n	8019eb8 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8019eb2:	f04f 33ff 	mov.w	r3, #4294967295
 8019eb6:	e0ab      	b.n	801a010 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8019eb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019eba:	2b00      	cmp	r3, #0
 8019ebc:	d009      	beq.n	8019ed2 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8019ebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019ec0:	88db      	ldrh	r3, [r3, #6]
 8019ec2:	b29a      	uxth	r2, r3
 8019ec4:	693b      	ldr	r3, [r7, #16]
 8019ec6:	889b      	ldrh	r3, [r3, #4]
 8019ec8:	b29b      	uxth	r3, r3
 8019eca:	429a      	cmp	r2, r3
 8019ecc:	d001      	beq.n	8019ed2 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8019ece:	2300      	movs	r3, #0
 8019ed0:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8019ed2:	693b      	ldr	r3, [r7, #16]
 8019ed4:	681b      	ldr	r3, [r3, #0]
 8019ed6:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8019ed8:	693b      	ldr	r3, [r7, #16]
 8019eda:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8019edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019ede:	2b00      	cmp	r3, #0
 8019ee0:	d193      	bne.n	8019e0a <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8019ee2:	e000      	b.n	8019ee6 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8019ee4:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8019ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019ee8:	2b00      	cmp	r3, #0
 8019eea:	d12d      	bne.n	8019f48 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8019eec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019eee:	2b00      	cmp	r3, #0
 8019ef0:	d01c      	beq.n	8019f2c <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8019ef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019ef4:	88db      	ldrh	r3, [r3, #6]
 8019ef6:	b29a      	uxth	r2, r3
 8019ef8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019efa:	889b      	ldrh	r3, [r3, #4]
 8019efc:	b29b      	uxth	r3, r3
 8019efe:	429a      	cmp	r2, r3
 8019f00:	d906      	bls.n	8019f10 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8019f02:	4b45      	ldr	r3, [pc, #276]	; (801a018 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8019f04:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8019f08:	4944      	ldr	r1, [pc, #272]	; (801a01c <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8019f0a:	4845      	ldr	r0, [pc, #276]	; (801a020 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8019f0c:	f001 fa28 	bl	801b360 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8019f10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019f12:	68ba      	ldr	r2, [r7, #8]
 8019f14:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8019f16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019f18:	88db      	ldrh	r3, [r3, #6]
 8019f1a:	b29a      	uxth	r2, r3
 8019f1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019f1e:	889b      	ldrh	r3, [r3, #4]
 8019f20:	b29b      	uxth	r3, r3
 8019f22:	429a      	cmp	r2, r3
 8019f24:	d010      	beq.n	8019f48 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8019f26:	2300      	movs	r3, #0
 8019f28:	623b      	str	r3, [r7, #32]
 8019f2a:	e00d      	b.n	8019f48 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8019f2c:	68fb      	ldr	r3, [r7, #12]
 8019f2e:	685b      	ldr	r3, [r3, #4]
 8019f30:	2b00      	cmp	r3, #0
 8019f32:	d006      	beq.n	8019f42 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8019f34:	4b38      	ldr	r3, [pc, #224]	; (801a018 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8019f36:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8019f3a:	493a      	ldr	r1, [pc, #232]	; (801a024 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8019f3c:	4838      	ldr	r0, [pc, #224]	; (801a020 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8019f3e:	f001 fa0f 	bl	801b360 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8019f42:	68fb      	ldr	r3, [r7, #12]
 8019f44:	68ba      	ldr	r2, [r7, #8]
 8019f46:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8019f48:	687b      	ldr	r3, [r7, #4]
 8019f4a:	2b00      	cmp	r3, #0
 8019f4c:	d105      	bne.n	8019f5a <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8019f4e:	68fb      	ldr	r3, [r7, #12]
 8019f50:	7f9b      	ldrb	r3, [r3, #30]
 8019f52:	f003 0301 	and.w	r3, r3, #1
 8019f56:	2b00      	cmp	r3, #0
 8019f58:	d059      	beq.n	801a00e <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8019f5a:	6a3b      	ldr	r3, [r7, #32]
 8019f5c:	2b00      	cmp	r3, #0
 8019f5e:	d04f      	beq.n	801a000 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8019f60:	68fb      	ldr	r3, [r7, #12]
 8019f62:	685b      	ldr	r3, [r3, #4]
 8019f64:	2b00      	cmp	r3, #0
 8019f66:	d006      	beq.n	8019f76 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8019f68:	68fb      	ldr	r3, [r7, #12]
 8019f6a:	685b      	ldr	r3, [r3, #4]
 8019f6c:	685b      	ldr	r3, [r3, #4]
 8019f6e:	889b      	ldrh	r3, [r3, #4]
 8019f70:	b29b      	uxth	r3, r3
 8019f72:	2b00      	cmp	r3, #0
 8019f74:	d002      	beq.n	8019f7c <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8019f76:	2300      	movs	r3, #0
 8019f78:	623b      	str	r3, [r7, #32]
 8019f7a:	e041      	b.n	801a000 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8019f7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019f7e:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8019f80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019f82:	681b      	ldr	r3, [r3, #0]
 8019f84:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8019f86:	e012      	b.n	8019fae <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8019f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019f8a:	685b      	ldr	r3, [r3, #4]
 8019f8c:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8019f8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019f90:	88db      	ldrh	r3, [r3, #6]
 8019f92:	b29a      	uxth	r2, r3
 8019f94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019f96:	889b      	ldrh	r3, [r3, #4]
 8019f98:	b29b      	uxth	r3, r3
 8019f9a:	429a      	cmp	r2, r3
 8019f9c:	d002      	beq.n	8019fa4 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8019f9e:	2300      	movs	r3, #0
 8019fa0:	623b      	str	r3, [r7, #32]
            break;
 8019fa2:	e007      	b.n	8019fb4 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8019fa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019fa6:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8019fa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019faa:	681b      	ldr	r3, [r3, #0]
 8019fac:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8019fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019fb0:	2b00      	cmp	r3, #0
 8019fb2:	d1e9      	bne.n	8019f88 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8019fb4:	6a3b      	ldr	r3, [r7, #32]
 8019fb6:	2b00      	cmp	r3, #0
 8019fb8:	d022      	beq.n	801a000 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8019fba:	68fb      	ldr	r3, [r7, #12]
 8019fbc:	685b      	ldr	r3, [r3, #4]
 8019fbe:	2b00      	cmp	r3, #0
 8019fc0:	d106      	bne.n	8019fd0 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8019fc2:	4b15      	ldr	r3, [pc, #84]	; (801a018 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8019fc4:	f240 12df 	movw	r2, #479	; 0x1df
 8019fc8:	4917      	ldr	r1, [pc, #92]	; (801a028 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8019fca:	4815      	ldr	r0, [pc, #84]	; (801a020 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8019fcc:	f001 f9c8 	bl	801b360 <iprintf>
          LWIP_ASSERT("sanity check",
 8019fd0:	68fb      	ldr	r3, [r7, #12]
 8019fd2:	685b      	ldr	r3, [r3, #4]
 8019fd4:	685b      	ldr	r3, [r3, #4]
 8019fd6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019fd8:	429a      	cmp	r2, r3
 8019fda:	d106      	bne.n	8019fea <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8019fdc:	4b0e      	ldr	r3, [pc, #56]	; (801a018 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8019fde:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8019fe2:	4911      	ldr	r1, [pc, #68]	; (801a028 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8019fe4:	480e      	ldr	r0, [pc, #56]	; (801a020 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8019fe6:	f001 f9bb 	bl	801b360 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8019fea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019fec:	681b      	ldr	r3, [r3, #0]
 8019fee:	2b00      	cmp	r3, #0
 8019ff0:	d006      	beq.n	801a000 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8019ff2:	4b09      	ldr	r3, [pc, #36]	; (801a018 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8019ff4:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8019ff8:	490c      	ldr	r1, [pc, #48]	; (801a02c <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8019ffa:	4809      	ldr	r0, [pc, #36]	; (801a020 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8019ffc:	f001 f9b0 	bl	801b360 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 801a000:	6a3b      	ldr	r3, [r7, #32]
 801a002:	2b00      	cmp	r3, #0
 801a004:	bf14      	ite	ne
 801a006:	2301      	movne	r3, #1
 801a008:	2300      	moveq	r3, #0
 801a00a:	b2db      	uxtb	r3, r3
 801a00c:	e000      	b.n	801a010 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801a00e:	2300      	movs	r3, #0
}
 801a010:	4618      	mov	r0, r3
 801a012:	3730      	adds	r7, #48	; 0x30
 801a014:	46bd      	mov	sp, r7
 801a016:	bd80      	pop	{r7, pc}
 801a018:	0802362c 	.word	0x0802362c
 801a01c:	08023710 	.word	0x08023710
 801a020:	08023674 	.word	0x08023674
 801a024:	08023730 	.word	0x08023730
 801a028:	08023768 	.word	0x08023768
 801a02c:	08023778 	.word	0x08023778

0801a030 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 801a030:	b580      	push	{r7, lr}
 801a032:	b08e      	sub	sp, #56	; 0x38
 801a034:	af00      	add	r7, sp, #0
 801a036:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 801a038:	687b      	ldr	r3, [r7, #4]
 801a03a:	685b      	ldr	r3, [r3, #4]
 801a03c:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801a03e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a040:	781b      	ldrb	r3, [r3, #0]
 801a042:	f003 030f 	and.w	r3, r3, #15
 801a046:	b2db      	uxtb	r3, r3
 801a048:	009b      	lsls	r3, r3, #2
 801a04a:	b2db      	uxtb	r3, r3
 801a04c:	2b14      	cmp	r3, #20
 801a04e:	f040 8167 	bne.w	801a320 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801a052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a054:	88db      	ldrh	r3, [r3, #6]
 801a056:	b29b      	uxth	r3, r3
 801a058:	4618      	mov	r0, r3
 801a05a:	f7f4 fe67 	bl	800ed2c <lwip_htons>
 801a05e:	4603      	mov	r3, r0
 801a060:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801a064:	b29b      	uxth	r3, r3
 801a066:	00db      	lsls	r3, r3, #3
 801a068:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801a06a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a06c:	885b      	ldrh	r3, [r3, #2]
 801a06e:	b29b      	uxth	r3, r3
 801a070:	4618      	mov	r0, r3
 801a072:	f7f4 fe5b 	bl	800ed2c <lwip_htons>
 801a076:	4603      	mov	r3, r0
 801a078:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801a07a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a07c:	781b      	ldrb	r3, [r3, #0]
 801a07e:	f003 030f 	and.w	r3, r3, #15
 801a082:	b2db      	uxtb	r3, r3
 801a084:	009b      	lsls	r3, r3, #2
 801a086:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 801a08a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801a08e:	b29b      	uxth	r3, r3
 801a090:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801a092:	429a      	cmp	r2, r3
 801a094:	f0c0 8146 	bcc.w	801a324 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 801a098:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801a09c:	b29b      	uxth	r3, r3
 801a09e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801a0a0:	1ad3      	subs	r3, r2, r3
 801a0a2:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 801a0a4:	6878      	ldr	r0, [r7, #4]
 801a0a6:	f7f6 f965 	bl	8010374 <pbuf_clen>
 801a0aa:	4603      	mov	r3, r0
 801a0ac:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801a0ae:	4b9f      	ldr	r3, [pc, #636]	; (801a32c <ip4_reass+0x2fc>)
 801a0b0:	881b      	ldrh	r3, [r3, #0]
 801a0b2:	461a      	mov	r2, r3
 801a0b4:	8c3b      	ldrh	r3, [r7, #32]
 801a0b6:	4413      	add	r3, r2
 801a0b8:	2b0a      	cmp	r3, #10
 801a0ba:	dd10      	ble.n	801a0de <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801a0bc:	8c3b      	ldrh	r3, [r7, #32]
 801a0be:	4619      	mov	r1, r3
 801a0c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801a0c2:	f7ff fd81 	bl	8019bc8 <ip_reass_remove_oldest_datagram>
 801a0c6:	4603      	mov	r3, r0
 801a0c8:	2b00      	cmp	r3, #0
 801a0ca:	f000 812d 	beq.w	801a328 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801a0ce:	4b97      	ldr	r3, [pc, #604]	; (801a32c <ip4_reass+0x2fc>)
 801a0d0:	881b      	ldrh	r3, [r3, #0]
 801a0d2:	461a      	mov	r2, r3
 801a0d4:	8c3b      	ldrh	r3, [r7, #32]
 801a0d6:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801a0d8:	2b0a      	cmp	r3, #10
 801a0da:	f300 8125 	bgt.w	801a328 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801a0de:	4b94      	ldr	r3, [pc, #592]	; (801a330 <ip4_reass+0x300>)
 801a0e0:	681b      	ldr	r3, [r3, #0]
 801a0e2:	633b      	str	r3, [r7, #48]	; 0x30
 801a0e4:	e015      	b.n	801a112 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801a0e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a0e8:	695a      	ldr	r2, [r3, #20]
 801a0ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a0ec:	68db      	ldr	r3, [r3, #12]
 801a0ee:	429a      	cmp	r2, r3
 801a0f0:	d10c      	bne.n	801a10c <ip4_reass+0xdc>
 801a0f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a0f4:	699a      	ldr	r2, [r3, #24]
 801a0f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a0f8:	691b      	ldr	r3, [r3, #16]
 801a0fa:	429a      	cmp	r2, r3
 801a0fc:	d106      	bne.n	801a10c <ip4_reass+0xdc>
 801a0fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a100:	899a      	ldrh	r2, [r3, #12]
 801a102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a104:	889b      	ldrh	r3, [r3, #4]
 801a106:	b29b      	uxth	r3, r3
 801a108:	429a      	cmp	r2, r3
 801a10a:	d006      	beq.n	801a11a <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801a10c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a10e:	681b      	ldr	r3, [r3, #0]
 801a110:	633b      	str	r3, [r7, #48]	; 0x30
 801a112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a114:	2b00      	cmp	r3, #0
 801a116:	d1e6      	bne.n	801a0e6 <ip4_reass+0xb6>
 801a118:	e000      	b.n	801a11c <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801a11a:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 801a11c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a11e:	2b00      	cmp	r3, #0
 801a120:	d109      	bne.n	801a136 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801a122:	8c3b      	ldrh	r3, [r7, #32]
 801a124:	4619      	mov	r1, r3
 801a126:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801a128:	f7ff fdb0 	bl	8019c8c <ip_reass_enqueue_new_datagram>
 801a12c:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801a12e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a130:	2b00      	cmp	r3, #0
 801a132:	d11c      	bne.n	801a16e <ip4_reass+0x13e>
      goto nullreturn;
 801a134:	e109      	b.n	801a34a <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801a136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a138:	88db      	ldrh	r3, [r3, #6]
 801a13a:	b29b      	uxth	r3, r3
 801a13c:	4618      	mov	r0, r3
 801a13e:	f7f4 fdf5 	bl	800ed2c <lwip_htons>
 801a142:	4603      	mov	r3, r0
 801a144:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801a148:	2b00      	cmp	r3, #0
 801a14a:	d110      	bne.n	801a16e <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801a14c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a14e:	89db      	ldrh	r3, [r3, #14]
 801a150:	4618      	mov	r0, r3
 801a152:	f7f4 fdeb 	bl	800ed2c <lwip_htons>
 801a156:	4603      	mov	r3, r0
 801a158:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801a15c:	2b00      	cmp	r3, #0
 801a15e:	d006      	beq.n	801a16e <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801a160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a162:	3308      	adds	r3, #8
 801a164:	2214      	movs	r2, #20
 801a166:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801a168:	4618      	mov	r0, r3
 801a16a:	f000 fbb5 	bl	801a8d8 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801a16e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a170:	88db      	ldrh	r3, [r3, #6]
 801a172:	b29b      	uxth	r3, r3
 801a174:	f003 0320 	and.w	r3, r3, #32
 801a178:	2b00      	cmp	r3, #0
 801a17a:	bf0c      	ite	eq
 801a17c:	2301      	moveq	r3, #1
 801a17e:	2300      	movne	r3, #0
 801a180:	b2db      	uxtb	r3, r3
 801a182:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 801a184:	69fb      	ldr	r3, [r7, #28]
 801a186:	2b00      	cmp	r3, #0
 801a188:	d00e      	beq.n	801a1a8 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801a18a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801a18c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801a18e:	4413      	add	r3, r2
 801a190:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801a192:	8b7a      	ldrh	r2, [r7, #26]
 801a194:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801a196:	429a      	cmp	r2, r3
 801a198:	f0c0 80a0 	bcc.w	801a2dc <ip4_reass+0x2ac>
 801a19c:	8b7b      	ldrh	r3, [r7, #26]
 801a19e:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 801a1a2:	4293      	cmp	r3, r2
 801a1a4:	f200 809a 	bhi.w	801a2dc <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 801a1a8:	69fa      	ldr	r2, [r7, #28]
 801a1aa:	6879      	ldr	r1, [r7, #4]
 801a1ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801a1ae:	f7ff fdd5 	bl	8019d5c <ip_reass_chain_frag_into_datagram_and_validate>
 801a1b2:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801a1b4:	697b      	ldr	r3, [r7, #20]
 801a1b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a1ba:	f000 8091 	beq.w	801a2e0 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801a1be:	4b5b      	ldr	r3, [pc, #364]	; (801a32c <ip4_reass+0x2fc>)
 801a1c0:	881a      	ldrh	r2, [r3, #0]
 801a1c2:	8c3b      	ldrh	r3, [r7, #32]
 801a1c4:	4413      	add	r3, r2
 801a1c6:	b29a      	uxth	r2, r3
 801a1c8:	4b58      	ldr	r3, [pc, #352]	; (801a32c <ip4_reass+0x2fc>)
 801a1ca:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801a1cc:	69fb      	ldr	r3, [r7, #28]
 801a1ce:	2b00      	cmp	r3, #0
 801a1d0:	d00d      	beq.n	801a1ee <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801a1d2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801a1d4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801a1d6:	4413      	add	r3, r2
 801a1d8:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801a1da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a1dc:	8a7a      	ldrh	r2, [r7, #18]
 801a1de:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801a1e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a1e2:	7f9b      	ldrb	r3, [r3, #30]
 801a1e4:	f043 0301 	orr.w	r3, r3, #1
 801a1e8:	b2da      	uxtb	r2, r3
 801a1ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a1ec:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801a1ee:	697b      	ldr	r3, [r7, #20]
 801a1f0:	2b01      	cmp	r3, #1
 801a1f2:	d171      	bne.n	801a2d8 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 801a1f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a1f6:	8b9b      	ldrh	r3, [r3, #28]
 801a1f8:	3314      	adds	r3, #20
 801a1fa:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 801a1fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a1fe:	685b      	ldr	r3, [r3, #4]
 801a200:	685b      	ldr	r3, [r3, #4]
 801a202:	681b      	ldr	r3, [r3, #0]
 801a204:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801a206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a208:	685b      	ldr	r3, [r3, #4]
 801a20a:	685b      	ldr	r3, [r3, #4]
 801a20c:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801a20e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a210:	3308      	adds	r3, #8
 801a212:	2214      	movs	r2, #20
 801a214:	4619      	mov	r1, r3
 801a216:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801a218:	f000 fb5e 	bl	801a8d8 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801a21c:	8a3b      	ldrh	r3, [r7, #16]
 801a21e:	4618      	mov	r0, r3
 801a220:	f7f4 fd84 	bl	800ed2c <lwip_htons>
 801a224:	4603      	mov	r3, r0
 801a226:	461a      	mov	r2, r3
 801a228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a22a:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 801a22c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a22e:	2200      	movs	r2, #0
 801a230:	719a      	strb	r2, [r3, #6]
 801a232:	2200      	movs	r2, #0
 801a234:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801a236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a238:	2200      	movs	r2, #0
 801a23a:	729a      	strb	r2, [r3, #10]
 801a23c:	2200      	movs	r2, #0
 801a23e:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 801a240:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a242:	685b      	ldr	r3, [r3, #4]
 801a244:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801a246:	e00d      	b.n	801a264 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 801a248:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a24a:	685b      	ldr	r3, [r3, #4]
 801a24c:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801a24e:	2114      	movs	r1, #20
 801a250:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801a252:	f7f5 ff81 	bl	8010158 <pbuf_remove_header>
      pbuf_cat(p, r);
 801a256:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801a258:	6878      	ldr	r0, [r7, #4]
 801a25a:	f7f6 f8c5 	bl	80103e8 <pbuf_cat>
      r = iprh->next_pbuf;
 801a25e:	68fb      	ldr	r3, [r7, #12]
 801a260:	681b      	ldr	r3, [r3, #0]
 801a262:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 801a264:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a266:	2b00      	cmp	r3, #0
 801a268:	d1ee      	bne.n	801a248 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801a26a:	4b31      	ldr	r3, [pc, #196]	; (801a330 <ip4_reass+0x300>)
 801a26c:	681b      	ldr	r3, [r3, #0]
 801a26e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801a270:	429a      	cmp	r2, r3
 801a272:	d102      	bne.n	801a27a <ip4_reass+0x24a>
      ipr_prev = NULL;
 801a274:	2300      	movs	r3, #0
 801a276:	62fb      	str	r3, [r7, #44]	; 0x2c
 801a278:	e010      	b.n	801a29c <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801a27a:	4b2d      	ldr	r3, [pc, #180]	; (801a330 <ip4_reass+0x300>)
 801a27c:	681b      	ldr	r3, [r3, #0]
 801a27e:	62fb      	str	r3, [r7, #44]	; 0x2c
 801a280:	e007      	b.n	801a292 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801a282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a284:	681b      	ldr	r3, [r3, #0]
 801a286:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801a288:	429a      	cmp	r2, r3
 801a28a:	d006      	beq.n	801a29a <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801a28c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a28e:	681b      	ldr	r3, [r3, #0]
 801a290:	62fb      	str	r3, [r7, #44]	; 0x2c
 801a292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a294:	2b00      	cmp	r3, #0
 801a296:	d1f4      	bne.n	801a282 <ip4_reass+0x252>
 801a298:	e000      	b.n	801a29c <ip4_reass+0x26c>
          break;
 801a29a:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 801a29c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801a29e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801a2a0:	f7ff fd2e 	bl	8019d00 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 801a2a4:	6878      	ldr	r0, [r7, #4]
 801a2a6:	f7f6 f865 	bl	8010374 <pbuf_clen>
 801a2aa:	4603      	mov	r3, r0
 801a2ac:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801a2ae:	4b1f      	ldr	r3, [pc, #124]	; (801a32c <ip4_reass+0x2fc>)
 801a2b0:	881b      	ldrh	r3, [r3, #0]
 801a2b2:	8c3a      	ldrh	r2, [r7, #32]
 801a2b4:	429a      	cmp	r2, r3
 801a2b6:	d906      	bls.n	801a2c6 <ip4_reass+0x296>
 801a2b8:	4b1e      	ldr	r3, [pc, #120]	; (801a334 <ip4_reass+0x304>)
 801a2ba:	f240 229b 	movw	r2, #667	; 0x29b
 801a2be:	491e      	ldr	r1, [pc, #120]	; (801a338 <ip4_reass+0x308>)
 801a2c0:	481e      	ldr	r0, [pc, #120]	; (801a33c <ip4_reass+0x30c>)
 801a2c2:	f001 f84d 	bl	801b360 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801a2c6:	4b19      	ldr	r3, [pc, #100]	; (801a32c <ip4_reass+0x2fc>)
 801a2c8:	881a      	ldrh	r2, [r3, #0]
 801a2ca:	8c3b      	ldrh	r3, [r7, #32]
 801a2cc:	1ad3      	subs	r3, r2, r3
 801a2ce:	b29a      	uxth	r2, r3
 801a2d0:	4b16      	ldr	r3, [pc, #88]	; (801a32c <ip4_reass+0x2fc>)
 801a2d2:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 801a2d4:	687b      	ldr	r3, [r7, #4]
 801a2d6:	e03c      	b.n	801a352 <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 801a2d8:	2300      	movs	r3, #0
 801a2da:	e03a      	b.n	801a352 <ip4_reass+0x322>
      goto nullreturn_ipr;
 801a2dc:	bf00      	nop
 801a2de:	e000      	b.n	801a2e2 <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 801a2e0:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801a2e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a2e4:	2b00      	cmp	r3, #0
 801a2e6:	d106      	bne.n	801a2f6 <ip4_reass+0x2c6>
 801a2e8:	4b12      	ldr	r3, [pc, #72]	; (801a334 <ip4_reass+0x304>)
 801a2ea:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 801a2ee:	4914      	ldr	r1, [pc, #80]	; (801a340 <ip4_reass+0x310>)
 801a2f0:	4812      	ldr	r0, [pc, #72]	; (801a33c <ip4_reass+0x30c>)
 801a2f2:	f001 f835 	bl	801b360 <iprintf>
  if (ipr->p == NULL) {
 801a2f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a2f8:	685b      	ldr	r3, [r3, #4]
 801a2fa:	2b00      	cmp	r3, #0
 801a2fc:	d124      	bne.n	801a348 <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801a2fe:	4b0c      	ldr	r3, [pc, #48]	; (801a330 <ip4_reass+0x300>)
 801a300:	681b      	ldr	r3, [r3, #0]
 801a302:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801a304:	429a      	cmp	r2, r3
 801a306:	d006      	beq.n	801a316 <ip4_reass+0x2e6>
 801a308:	4b0a      	ldr	r3, [pc, #40]	; (801a334 <ip4_reass+0x304>)
 801a30a:	f240 22ab 	movw	r2, #683	; 0x2ab
 801a30e:	490d      	ldr	r1, [pc, #52]	; (801a344 <ip4_reass+0x314>)
 801a310:	480a      	ldr	r0, [pc, #40]	; (801a33c <ip4_reass+0x30c>)
 801a312:	f001 f825 	bl	801b360 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801a316:	2100      	movs	r1, #0
 801a318:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801a31a:	f7ff fcf1 	bl	8019d00 <ip_reass_dequeue_datagram>
 801a31e:	e014      	b.n	801a34a <ip4_reass+0x31a>
    goto nullreturn;
 801a320:	bf00      	nop
 801a322:	e012      	b.n	801a34a <ip4_reass+0x31a>
    goto nullreturn;
 801a324:	bf00      	nop
 801a326:	e010      	b.n	801a34a <ip4_reass+0x31a>
      goto nullreturn;
 801a328:	bf00      	nop
 801a32a:	e00e      	b.n	801a34a <ip4_reass+0x31a>
 801a32c:	20000624 	.word	0x20000624
 801a330:	20000620 	.word	0x20000620
 801a334:	0802362c 	.word	0x0802362c
 801a338:	0802379c 	.word	0x0802379c
 801a33c:	08023674 	.word	0x08023674
 801a340:	080237b8 	.word	0x080237b8
 801a344:	080237c4 	.word	0x080237c4
  }

nullreturn:
 801a348:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801a34a:	6878      	ldr	r0, [r7, #4]
 801a34c:	f7f5 ff8a 	bl	8010264 <pbuf_free>
  return NULL;
 801a350:	2300      	movs	r3, #0
}
 801a352:	4618      	mov	r0, r3
 801a354:	3738      	adds	r7, #56	; 0x38
 801a356:	46bd      	mov	sp, r7
 801a358:	bd80      	pop	{r7, pc}
 801a35a:	bf00      	nop

0801a35c <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 801a35c:	b580      	push	{r7, lr}
 801a35e:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 801a360:	2005      	movs	r0, #5
 801a362:	f7f5 f939 	bl	800f5d8 <memp_malloc>
 801a366:	4603      	mov	r3, r0
}
 801a368:	4618      	mov	r0, r3
 801a36a:	bd80      	pop	{r7, pc}

0801a36c <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 801a36c:	b580      	push	{r7, lr}
 801a36e:	b082      	sub	sp, #8
 801a370:	af00      	add	r7, sp, #0
 801a372:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 801a374:	687b      	ldr	r3, [r7, #4]
 801a376:	2b00      	cmp	r3, #0
 801a378:	d106      	bne.n	801a388 <ip_frag_free_pbuf_custom_ref+0x1c>
 801a37a:	4b07      	ldr	r3, [pc, #28]	; (801a398 <ip_frag_free_pbuf_custom_ref+0x2c>)
 801a37c:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 801a380:	4906      	ldr	r1, [pc, #24]	; (801a39c <ip_frag_free_pbuf_custom_ref+0x30>)
 801a382:	4807      	ldr	r0, [pc, #28]	; (801a3a0 <ip_frag_free_pbuf_custom_ref+0x34>)
 801a384:	f000 ffec 	bl	801b360 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 801a388:	6879      	ldr	r1, [r7, #4]
 801a38a:	2005      	movs	r0, #5
 801a38c:	f7f5 f970 	bl	800f670 <memp_free>
}
 801a390:	bf00      	nop
 801a392:	3708      	adds	r7, #8
 801a394:	46bd      	mov	sp, r7
 801a396:	bd80      	pop	{r7, pc}
 801a398:	0802362c 	.word	0x0802362c
 801a39c:	080237e4 	.word	0x080237e4
 801a3a0:	08023674 	.word	0x08023674

0801a3a4 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 801a3a4:	b580      	push	{r7, lr}
 801a3a6:	b084      	sub	sp, #16
 801a3a8:	af00      	add	r7, sp, #0
 801a3aa:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 801a3ac:	687b      	ldr	r3, [r7, #4]
 801a3ae:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801a3b0:	68fb      	ldr	r3, [r7, #12]
 801a3b2:	2b00      	cmp	r3, #0
 801a3b4:	d106      	bne.n	801a3c4 <ipfrag_free_pbuf_custom+0x20>
 801a3b6:	4b11      	ldr	r3, [pc, #68]	; (801a3fc <ipfrag_free_pbuf_custom+0x58>)
 801a3b8:	f240 22ce 	movw	r2, #718	; 0x2ce
 801a3bc:	4910      	ldr	r1, [pc, #64]	; (801a400 <ipfrag_free_pbuf_custom+0x5c>)
 801a3be:	4811      	ldr	r0, [pc, #68]	; (801a404 <ipfrag_free_pbuf_custom+0x60>)
 801a3c0:	f000 ffce 	bl	801b360 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 801a3c4:	68fa      	ldr	r2, [r7, #12]
 801a3c6:	687b      	ldr	r3, [r7, #4]
 801a3c8:	429a      	cmp	r2, r3
 801a3ca:	d006      	beq.n	801a3da <ipfrag_free_pbuf_custom+0x36>
 801a3cc:	4b0b      	ldr	r3, [pc, #44]	; (801a3fc <ipfrag_free_pbuf_custom+0x58>)
 801a3ce:	f240 22cf 	movw	r2, #719	; 0x2cf
 801a3d2:	490d      	ldr	r1, [pc, #52]	; (801a408 <ipfrag_free_pbuf_custom+0x64>)
 801a3d4:	480b      	ldr	r0, [pc, #44]	; (801a404 <ipfrag_free_pbuf_custom+0x60>)
 801a3d6:	f000 ffc3 	bl	801b360 <iprintf>
  if (pcr->original != NULL) {
 801a3da:	68fb      	ldr	r3, [r7, #12]
 801a3dc:	695b      	ldr	r3, [r3, #20]
 801a3de:	2b00      	cmp	r3, #0
 801a3e0:	d004      	beq.n	801a3ec <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801a3e2:	68fb      	ldr	r3, [r7, #12]
 801a3e4:	695b      	ldr	r3, [r3, #20]
 801a3e6:	4618      	mov	r0, r3
 801a3e8:	f7f5 ff3c 	bl	8010264 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801a3ec:	68f8      	ldr	r0, [r7, #12]
 801a3ee:	f7ff ffbd 	bl	801a36c <ip_frag_free_pbuf_custom_ref>
}
 801a3f2:	bf00      	nop
 801a3f4:	3710      	adds	r7, #16
 801a3f6:	46bd      	mov	sp, r7
 801a3f8:	bd80      	pop	{r7, pc}
 801a3fa:	bf00      	nop
 801a3fc:	0802362c 	.word	0x0802362c
 801a400:	080237f0 	.word	0x080237f0
 801a404:	08023674 	.word	0x08023674
 801a408:	080237fc 	.word	0x080237fc

0801a40c <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801a40c:	b580      	push	{r7, lr}
 801a40e:	b094      	sub	sp, #80	; 0x50
 801a410:	af02      	add	r7, sp, #8
 801a412:	60f8      	str	r0, [r7, #12]
 801a414:	60b9      	str	r1, [r7, #8]
 801a416:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801a418:	2300      	movs	r3, #0
 801a41a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801a41e:	68bb      	ldr	r3, [r7, #8]
 801a420:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801a422:	3b14      	subs	r3, #20
 801a424:	2b00      	cmp	r3, #0
 801a426:	da00      	bge.n	801a42a <ip4_frag+0x1e>
 801a428:	3307      	adds	r3, #7
 801a42a:	10db      	asrs	r3, r3, #3
 801a42c:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801a42e:	2314      	movs	r3, #20
 801a430:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801a432:	68fb      	ldr	r3, [r7, #12]
 801a434:	685b      	ldr	r3, [r3, #4]
 801a436:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 801a438:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a43a:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 801a43c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a43e:	781b      	ldrb	r3, [r3, #0]
 801a440:	f003 030f 	and.w	r3, r3, #15
 801a444:	b2db      	uxtb	r3, r3
 801a446:	009b      	lsls	r3, r3, #2
 801a448:	b2db      	uxtb	r3, r3
 801a44a:	2b14      	cmp	r3, #20
 801a44c:	d002      	beq.n	801a454 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801a44e:	f06f 0305 	mvn.w	r3, #5
 801a452:	e110      	b.n	801a676 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 801a454:	68fb      	ldr	r3, [r7, #12]
 801a456:	895b      	ldrh	r3, [r3, #10]
 801a458:	2b13      	cmp	r3, #19
 801a45a:	d809      	bhi.n	801a470 <ip4_frag+0x64>
 801a45c:	4b88      	ldr	r3, [pc, #544]	; (801a680 <ip4_frag+0x274>)
 801a45e:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 801a462:	4988      	ldr	r1, [pc, #544]	; (801a684 <ip4_frag+0x278>)
 801a464:	4888      	ldr	r0, [pc, #544]	; (801a688 <ip4_frag+0x27c>)
 801a466:	f000 ff7b 	bl	801b360 <iprintf>
 801a46a:	f06f 0305 	mvn.w	r3, #5
 801a46e:	e102      	b.n	801a676 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801a470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a472:	88db      	ldrh	r3, [r3, #6]
 801a474:	b29b      	uxth	r3, r3
 801a476:	4618      	mov	r0, r3
 801a478:	f7f4 fc58 	bl	800ed2c <lwip_htons>
 801a47c:	4603      	mov	r3, r0
 801a47e:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 801a480:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801a482:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801a486:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801a48a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801a48c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801a490:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801a492:	68fb      	ldr	r3, [r7, #12]
 801a494:	891b      	ldrh	r3, [r3, #8]
 801a496:	3b14      	subs	r3, #20
 801a498:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 801a49c:	e0e1      	b.n	801a662 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801a49e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801a4a0:	00db      	lsls	r3, r3, #3
 801a4a2:	b29b      	uxth	r3, r3
 801a4a4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801a4a8:	4293      	cmp	r3, r2
 801a4aa:	bf28      	it	cs
 801a4ac:	4613      	movcs	r3, r2
 801a4ae:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801a4b0:	f44f 7220 	mov.w	r2, #640	; 0x280
 801a4b4:	2114      	movs	r1, #20
 801a4b6:	200e      	movs	r0, #14
 801a4b8:	f7f5 fbf0 	bl	800fc9c <pbuf_alloc>
 801a4bc:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 801a4be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a4c0:	2b00      	cmp	r3, #0
 801a4c2:	f000 80d5 	beq.w	801a670 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801a4c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a4c8:	895b      	ldrh	r3, [r3, #10]
 801a4ca:	2b13      	cmp	r3, #19
 801a4cc:	d806      	bhi.n	801a4dc <ip4_frag+0xd0>
 801a4ce:	4b6c      	ldr	r3, [pc, #432]	; (801a680 <ip4_frag+0x274>)
 801a4d0:	f44f 7249 	mov.w	r2, #804	; 0x324
 801a4d4:	496d      	ldr	r1, [pc, #436]	; (801a68c <ip4_frag+0x280>)
 801a4d6:	486c      	ldr	r0, [pc, #432]	; (801a688 <ip4_frag+0x27c>)
 801a4d8:	f000 ff42 	bl	801b360 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 801a4dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a4de:	685b      	ldr	r3, [r3, #4]
 801a4e0:	2214      	movs	r2, #20
 801a4e2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801a4e4:	4618      	mov	r0, r3
 801a4e6:	f000 f9f7 	bl	801a8d8 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801a4ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a4ec:	685b      	ldr	r3, [r3, #4]
 801a4ee:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 801a4f0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801a4f2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 801a4f6:	e064      	b.n	801a5c2 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 801a4f8:	68fb      	ldr	r3, [r7, #12]
 801a4fa:	895a      	ldrh	r2, [r3, #10]
 801a4fc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801a4fe:	1ad3      	subs	r3, r2, r3
 801a500:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801a502:	68fb      	ldr	r3, [r7, #12]
 801a504:	895b      	ldrh	r3, [r3, #10]
 801a506:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801a508:	429a      	cmp	r2, r3
 801a50a:	d906      	bls.n	801a51a <ip4_frag+0x10e>
 801a50c:	4b5c      	ldr	r3, [pc, #368]	; (801a680 <ip4_frag+0x274>)
 801a50e:	f240 322d 	movw	r2, #813	; 0x32d
 801a512:	495f      	ldr	r1, [pc, #380]	; (801a690 <ip4_frag+0x284>)
 801a514:	485c      	ldr	r0, [pc, #368]	; (801a688 <ip4_frag+0x27c>)
 801a516:	f000 ff23 	bl	801b360 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801a51a:	8bfa      	ldrh	r2, [r7, #30]
 801a51c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801a520:	4293      	cmp	r3, r2
 801a522:	bf28      	it	cs
 801a524:	4613      	movcs	r3, r2
 801a526:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801a52a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801a52e:	2b00      	cmp	r3, #0
 801a530:	d105      	bne.n	801a53e <ip4_frag+0x132>
        poff = 0;
 801a532:	2300      	movs	r3, #0
 801a534:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801a536:	68fb      	ldr	r3, [r7, #12]
 801a538:	681b      	ldr	r3, [r3, #0]
 801a53a:	60fb      	str	r3, [r7, #12]
        continue;
 801a53c:	e041      	b.n	801a5c2 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801a53e:	f7ff ff0d 	bl	801a35c <ip_frag_alloc_pbuf_custom_ref>
 801a542:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 801a544:	69bb      	ldr	r3, [r7, #24]
 801a546:	2b00      	cmp	r3, #0
 801a548:	d103      	bne.n	801a552 <ip4_frag+0x146>
        pbuf_free(rambuf);
 801a54a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801a54c:	f7f5 fe8a 	bl	8010264 <pbuf_free>
        goto memerr;
 801a550:	e08f      	b.n	801a672 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801a552:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 801a554:	68fb      	ldr	r3, [r7, #12]
 801a556:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801a558:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801a55a:	4413      	add	r3, r2
 801a55c:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 801a560:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 801a564:	9201      	str	r2, [sp, #4]
 801a566:	9300      	str	r3, [sp, #0]
 801a568:	4603      	mov	r3, r0
 801a56a:	2241      	movs	r2, #65	; 0x41
 801a56c:	2000      	movs	r0, #0
 801a56e:	f7f5 fcbf 	bl	800fef0 <pbuf_alloced_custom>
 801a572:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 801a574:	697b      	ldr	r3, [r7, #20]
 801a576:	2b00      	cmp	r3, #0
 801a578:	d106      	bne.n	801a588 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801a57a:	69b8      	ldr	r0, [r7, #24]
 801a57c:	f7ff fef6 	bl	801a36c <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 801a580:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801a582:	f7f5 fe6f 	bl	8010264 <pbuf_free>
        goto memerr;
 801a586:	e074      	b.n	801a672 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 801a588:	68f8      	ldr	r0, [r7, #12]
 801a58a:	f7f5 ff0b 	bl	80103a4 <pbuf_ref>
      pcr->original = p;
 801a58e:	69bb      	ldr	r3, [r7, #24]
 801a590:	68fa      	ldr	r2, [r7, #12]
 801a592:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801a594:	69bb      	ldr	r3, [r7, #24]
 801a596:	4a3f      	ldr	r2, [pc, #252]	; (801a694 <ip4_frag+0x288>)
 801a598:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801a59a:	6979      	ldr	r1, [r7, #20]
 801a59c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801a59e:	f7f5 ff23 	bl	80103e8 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801a5a2:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 801a5a6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801a5aa:	1ad3      	subs	r3, r2, r3
 801a5ac:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 801a5b0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801a5b4:	2b00      	cmp	r3, #0
 801a5b6:	d004      	beq.n	801a5c2 <ip4_frag+0x1b6>
        poff = 0;
 801a5b8:	2300      	movs	r3, #0
 801a5ba:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801a5bc:	68fb      	ldr	r3, [r7, #12]
 801a5be:	681b      	ldr	r3, [r3, #0]
 801a5c0:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801a5c2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801a5c6:	2b00      	cmp	r3, #0
 801a5c8:	d196      	bne.n	801a4f8 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801a5ca:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801a5cc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801a5d0:	4413      	add	r3, r2
 801a5d2:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 801a5d4:	68bb      	ldr	r3, [r7, #8]
 801a5d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801a5d8:	f1a3 0213 	sub.w	r2, r3, #19
 801a5dc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801a5e0:	429a      	cmp	r2, r3
 801a5e2:	bfcc      	ite	gt
 801a5e4:	2301      	movgt	r3, #1
 801a5e6:	2300      	movle	r3, #0
 801a5e8:	b2db      	uxtb	r3, r3
 801a5ea:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801a5ec:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801a5f0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801a5f4:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 801a5f6:	6a3b      	ldr	r3, [r7, #32]
 801a5f8:	2b00      	cmp	r3, #0
 801a5fa:	d002      	beq.n	801a602 <ip4_frag+0x1f6>
 801a5fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a5fe:	2b00      	cmp	r3, #0
 801a600:	d003      	beq.n	801a60a <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801a602:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801a604:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801a608:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801a60a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801a60c:	4618      	mov	r0, r3
 801a60e:	f7f4 fb8d 	bl	800ed2c <lwip_htons>
 801a612:	4603      	mov	r3, r0
 801a614:	461a      	mov	r2, r3
 801a616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a618:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801a61a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801a61c:	3314      	adds	r3, #20
 801a61e:	b29b      	uxth	r3, r3
 801a620:	4618      	mov	r0, r3
 801a622:	f7f4 fb83 	bl	800ed2c <lwip_htons>
 801a626:	4603      	mov	r3, r0
 801a628:	461a      	mov	r2, r3
 801a62a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a62c:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801a62e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a630:	2200      	movs	r2, #0
 801a632:	729a      	strb	r2, [r3, #10]
 801a634:	2200      	movs	r2, #0
 801a636:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 801a638:	68bb      	ldr	r3, [r7, #8]
 801a63a:	695b      	ldr	r3, [r3, #20]
 801a63c:	687a      	ldr	r2, [r7, #4]
 801a63e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801a640:	68b8      	ldr	r0, [r7, #8]
 801a642:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801a644:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801a646:	f7f5 fe0d 	bl	8010264 <pbuf_free>
    left = (u16_t)(left - fragsize);
 801a64a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801a64e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801a650:	1ad3      	subs	r3, r2, r3
 801a652:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 801a656:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801a65a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801a65c:	4413      	add	r3, r2
 801a65e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 801a662:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801a666:	2b00      	cmp	r3, #0
 801a668:	f47f af19 	bne.w	801a49e <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801a66c:	2300      	movs	r3, #0
 801a66e:	e002      	b.n	801a676 <ip4_frag+0x26a>
      goto memerr;
 801a670:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801a672:	f04f 33ff 	mov.w	r3, #4294967295
}
 801a676:	4618      	mov	r0, r3
 801a678:	3748      	adds	r7, #72	; 0x48
 801a67a:	46bd      	mov	sp, r7
 801a67c:	bd80      	pop	{r7, pc}
 801a67e:	bf00      	nop
 801a680:	0802362c 	.word	0x0802362c
 801a684:	08023808 	.word	0x08023808
 801a688:	08023674 	.word	0x08023674
 801a68c:	08023824 	.word	0x08023824
 801a690:	08023844 	.word	0x08023844
 801a694:	0801a3a5 	.word	0x0801a3a5

0801a698 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801a698:	b580      	push	{r7, lr}
 801a69a:	b086      	sub	sp, #24
 801a69c:	af00      	add	r7, sp, #0
 801a69e:	6078      	str	r0, [r7, #4]
 801a6a0:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801a6a2:	230e      	movs	r3, #14
 801a6a4:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801a6a6:	687b      	ldr	r3, [r7, #4]
 801a6a8:	895b      	ldrh	r3, [r3, #10]
 801a6aa:	2b0e      	cmp	r3, #14
 801a6ac:	d96e      	bls.n	801a78c <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801a6ae:	687b      	ldr	r3, [r7, #4]
 801a6b0:	7bdb      	ldrb	r3, [r3, #15]
 801a6b2:	2b00      	cmp	r3, #0
 801a6b4:	d106      	bne.n	801a6c4 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801a6b6:	683b      	ldr	r3, [r7, #0]
 801a6b8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801a6bc:	3301      	adds	r3, #1
 801a6be:	b2da      	uxtb	r2, r3
 801a6c0:	687b      	ldr	r3, [r7, #4]
 801a6c2:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801a6c4:	687b      	ldr	r3, [r7, #4]
 801a6c6:	685b      	ldr	r3, [r3, #4]
 801a6c8:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801a6ca:	693b      	ldr	r3, [r7, #16]
 801a6cc:	7b1a      	ldrb	r2, [r3, #12]
 801a6ce:	7b5b      	ldrb	r3, [r3, #13]
 801a6d0:	021b      	lsls	r3, r3, #8
 801a6d2:	4313      	orrs	r3, r2
 801a6d4:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801a6d6:	693b      	ldr	r3, [r7, #16]
 801a6d8:	781b      	ldrb	r3, [r3, #0]
 801a6da:	f003 0301 	and.w	r3, r3, #1
 801a6de:	2b00      	cmp	r3, #0
 801a6e0:	d023      	beq.n	801a72a <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801a6e2:	693b      	ldr	r3, [r7, #16]
 801a6e4:	781b      	ldrb	r3, [r3, #0]
 801a6e6:	2b01      	cmp	r3, #1
 801a6e8:	d10f      	bne.n	801a70a <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801a6ea:	693b      	ldr	r3, [r7, #16]
 801a6ec:	785b      	ldrb	r3, [r3, #1]
 801a6ee:	2b00      	cmp	r3, #0
 801a6f0:	d11b      	bne.n	801a72a <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801a6f2:	693b      	ldr	r3, [r7, #16]
 801a6f4:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801a6f6:	2b5e      	cmp	r3, #94	; 0x5e
 801a6f8:	d117      	bne.n	801a72a <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801a6fa:	687b      	ldr	r3, [r7, #4]
 801a6fc:	7b5b      	ldrb	r3, [r3, #13]
 801a6fe:	f043 0310 	orr.w	r3, r3, #16
 801a702:	b2da      	uxtb	r2, r3
 801a704:	687b      	ldr	r3, [r7, #4]
 801a706:	735a      	strb	r2, [r3, #13]
 801a708:	e00f      	b.n	801a72a <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801a70a:	693b      	ldr	r3, [r7, #16]
 801a70c:	2206      	movs	r2, #6
 801a70e:	4928      	ldr	r1, [pc, #160]	; (801a7b0 <ethernet_input+0x118>)
 801a710:	4618      	mov	r0, r3
 801a712:	f000 f8d3 	bl	801a8bc <memcmp>
 801a716:	4603      	mov	r3, r0
 801a718:	2b00      	cmp	r3, #0
 801a71a:	d106      	bne.n	801a72a <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801a71c:	687b      	ldr	r3, [r7, #4]
 801a71e:	7b5b      	ldrb	r3, [r3, #13]
 801a720:	f043 0308 	orr.w	r3, r3, #8
 801a724:	b2da      	uxtb	r2, r3
 801a726:	687b      	ldr	r3, [r7, #4]
 801a728:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801a72a:	89fb      	ldrh	r3, [r7, #14]
 801a72c:	2b08      	cmp	r3, #8
 801a72e:	d003      	beq.n	801a738 <ethernet_input+0xa0>
 801a730:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 801a734:	d014      	beq.n	801a760 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801a736:	e032      	b.n	801a79e <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801a738:	683b      	ldr	r3, [r7, #0]
 801a73a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801a73e:	f003 0308 	and.w	r3, r3, #8
 801a742:	2b00      	cmp	r3, #0
 801a744:	d024      	beq.n	801a790 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801a746:	8afb      	ldrh	r3, [r7, #22]
 801a748:	4619      	mov	r1, r3
 801a74a:	6878      	ldr	r0, [r7, #4]
 801a74c:	f7f5 fd04 	bl	8010158 <pbuf_remove_header>
 801a750:	4603      	mov	r3, r0
 801a752:	2b00      	cmp	r3, #0
 801a754:	d11e      	bne.n	801a794 <ethernet_input+0xfc>
        ip4_input(p, netif);
 801a756:	6839      	ldr	r1, [r7, #0]
 801a758:	6878      	ldr	r0, [r7, #4]
 801a75a:	f7fe ff09 	bl	8019570 <ip4_input>
      break;
 801a75e:	e013      	b.n	801a788 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801a760:	683b      	ldr	r3, [r7, #0]
 801a762:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801a766:	f003 0308 	and.w	r3, r3, #8
 801a76a:	2b00      	cmp	r3, #0
 801a76c:	d014      	beq.n	801a798 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801a76e:	8afb      	ldrh	r3, [r7, #22]
 801a770:	4619      	mov	r1, r3
 801a772:	6878      	ldr	r0, [r7, #4]
 801a774:	f7f5 fcf0 	bl	8010158 <pbuf_remove_header>
 801a778:	4603      	mov	r3, r0
 801a77a:	2b00      	cmp	r3, #0
 801a77c:	d10e      	bne.n	801a79c <ethernet_input+0x104>
        etharp_input(p, netif);
 801a77e:	6839      	ldr	r1, [r7, #0]
 801a780:	6878      	ldr	r0, [r7, #4]
 801a782:	f7fe f8a5 	bl	80188d0 <etharp_input>
      break;
 801a786:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 801a788:	2300      	movs	r3, #0
 801a78a:	e00c      	b.n	801a7a6 <ethernet_input+0x10e>
    goto free_and_return;
 801a78c:	bf00      	nop
 801a78e:	e006      	b.n	801a79e <ethernet_input+0x106>
        goto free_and_return;
 801a790:	bf00      	nop
 801a792:	e004      	b.n	801a79e <ethernet_input+0x106>
        goto free_and_return;
 801a794:	bf00      	nop
 801a796:	e002      	b.n	801a79e <ethernet_input+0x106>
        goto free_and_return;
 801a798:	bf00      	nop
 801a79a:	e000      	b.n	801a79e <ethernet_input+0x106>
        goto free_and_return;
 801a79c:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801a79e:	6878      	ldr	r0, [r7, #4]
 801a7a0:	f7f5 fd60 	bl	8010264 <pbuf_free>
  return ERR_OK;
 801a7a4:	2300      	movs	r3, #0
}
 801a7a6:	4618      	mov	r0, r3
 801a7a8:	3718      	adds	r7, #24
 801a7aa:	46bd      	mov	sp, r7
 801a7ac:	bd80      	pop	{r7, pc}
 801a7ae:	bf00      	nop
 801a7b0:	08023f48 	.word	0x08023f48

0801a7b4 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 801a7b4:	b580      	push	{r7, lr}
 801a7b6:	b086      	sub	sp, #24
 801a7b8:	af00      	add	r7, sp, #0
 801a7ba:	60f8      	str	r0, [r7, #12]
 801a7bc:	60b9      	str	r1, [r7, #8]
 801a7be:	607a      	str	r2, [r7, #4]
 801a7c0:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801a7c2:	8c3b      	ldrh	r3, [r7, #32]
 801a7c4:	4618      	mov	r0, r3
 801a7c6:	f7f4 fab1 	bl	800ed2c <lwip_htons>
 801a7ca:	4603      	mov	r3, r0
 801a7cc:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801a7ce:	210e      	movs	r1, #14
 801a7d0:	68b8      	ldr	r0, [r7, #8]
 801a7d2:	f7f5 fcb1 	bl	8010138 <pbuf_add_header>
 801a7d6:	4603      	mov	r3, r0
 801a7d8:	2b00      	cmp	r3, #0
 801a7da:	d125      	bne.n	801a828 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 801a7dc:	68bb      	ldr	r3, [r7, #8]
 801a7de:	685b      	ldr	r3, [r3, #4]
 801a7e0:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801a7e2:	693b      	ldr	r3, [r7, #16]
 801a7e4:	8afa      	ldrh	r2, [r7, #22]
 801a7e6:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 801a7e8:	693b      	ldr	r3, [r7, #16]
 801a7ea:	2206      	movs	r2, #6
 801a7ec:	6839      	ldr	r1, [r7, #0]
 801a7ee:	4618      	mov	r0, r3
 801a7f0:	f000 f872 	bl	801a8d8 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 801a7f4:	693b      	ldr	r3, [r7, #16]
 801a7f6:	3306      	adds	r3, #6
 801a7f8:	2206      	movs	r2, #6
 801a7fa:	6879      	ldr	r1, [r7, #4]
 801a7fc:	4618      	mov	r0, r3
 801a7fe:	f000 f86b 	bl	801a8d8 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801a802:	68fb      	ldr	r3, [r7, #12]
 801a804:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801a808:	2b06      	cmp	r3, #6
 801a80a:	d006      	beq.n	801a81a <ethernet_output+0x66>
 801a80c:	4b0a      	ldr	r3, [pc, #40]	; (801a838 <ethernet_output+0x84>)
 801a80e:	f44f 7299 	mov.w	r2, #306	; 0x132
 801a812:	490a      	ldr	r1, [pc, #40]	; (801a83c <ethernet_output+0x88>)
 801a814:	480a      	ldr	r0, [pc, #40]	; (801a840 <ethernet_output+0x8c>)
 801a816:	f000 fda3 	bl	801b360 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801a81a:	68fb      	ldr	r3, [r7, #12]
 801a81c:	699b      	ldr	r3, [r3, #24]
 801a81e:	68b9      	ldr	r1, [r7, #8]
 801a820:	68f8      	ldr	r0, [r7, #12]
 801a822:	4798      	blx	r3
 801a824:	4603      	mov	r3, r0
 801a826:	e002      	b.n	801a82e <ethernet_output+0x7a>
      goto pbuf_header_failed;
 801a828:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801a82a:	f06f 0301 	mvn.w	r3, #1
}
 801a82e:	4618      	mov	r0, r3
 801a830:	3718      	adds	r7, #24
 801a832:	46bd      	mov	sp, r7
 801a834:	bd80      	pop	{r7, pc}
 801a836:	bf00      	nop
 801a838:	08023854 	.word	0x08023854
 801a83c:	0802388c 	.word	0x0802388c
 801a840:	080238c0 	.word	0x080238c0

0801a844 <atof>:
 801a844:	2100      	movs	r1, #0
 801a846:	f001 bc99 	b.w	801c17c <strtod>

0801a84a <atoi>:
 801a84a:	220a      	movs	r2, #10
 801a84c:	2100      	movs	r1, #0
 801a84e:	f001 bd25 	b.w	801c29c <strtol>
	...

0801a854 <__libc_init_array>:
 801a854:	b570      	push	{r4, r5, r6, lr}
 801a856:	4d0d      	ldr	r5, [pc, #52]	; (801a88c <__libc_init_array+0x38>)
 801a858:	4c0d      	ldr	r4, [pc, #52]	; (801a890 <__libc_init_array+0x3c>)
 801a85a:	1b64      	subs	r4, r4, r5
 801a85c:	10a4      	asrs	r4, r4, #2
 801a85e:	2600      	movs	r6, #0
 801a860:	42a6      	cmp	r6, r4
 801a862:	d109      	bne.n	801a878 <__libc_init_array+0x24>
 801a864:	4d0b      	ldr	r5, [pc, #44]	; (801a894 <__libc_init_array+0x40>)
 801a866:	4c0c      	ldr	r4, [pc, #48]	; (801a898 <__libc_init_array+0x44>)
 801a868:	f005 faa8 	bl	801fdbc <_init>
 801a86c:	1b64      	subs	r4, r4, r5
 801a86e:	10a4      	asrs	r4, r4, #2
 801a870:	2600      	movs	r6, #0
 801a872:	42a6      	cmp	r6, r4
 801a874:	d105      	bne.n	801a882 <__libc_init_array+0x2e>
 801a876:	bd70      	pop	{r4, r5, r6, pc}
 801a878:	f855 3b04 	ldr.w	r3, [r5], #4
 801a87c:	4798      	blx	r3
 801a87e:	3601      	adds	r6, #1
 801a880:	e7ee      	b.n	801a860 <__libc_init_array+0xc>
 801a882:	f855 3b04 	ldr.w	r3, [r5], #4
 801a886:	4798      	blx	r3
 801a888:	3601      	adds	r6, #1
 801a88a:	e7f2      	b.n	801a872 <__libc_init_array+0x1e>
 801a88c:	080244b0 	.word	0x080244b0
 801a890:	080244b0 	.word	0x080244b0
 801a894:	080244b0 	.word	0x080244b0
 801a898:	080244b4 	.word	0x080244b4

0801a89c <malloc>:
 801a89c:	4b02      	ldr	r3, [pc, #8]	; (801a8a8 <malloc+0xc>)
 801a89e:	4601      	mov	r1, r0
 801a8a0:	6818      	ldr	r0, [r3, #0]
 801a8a2:	f000 b899 	b.w	801a9d8 <_malloc_r>
 801a8a6:	bf00      	nop
 801a8a8:	20000084 	.word	0x20000084

0801a8ac <free>:
 801a8ac:	4b02      	ldr	r3, [pc, #8]	; (801a8b8 <free+0xc>)
 801a8ae:	4601      	mov	r1, r0
 801a8b0:	6818      	ldr	r0, [r3, #0]
 801a8b2:	f000 b841 	b.w	801a938 <_free_r>
 801a8b6:	bf00      	nop
 801a8b8:	20000084 	.word	0x20000084

0801a8bc <memcmp>:
 801a8bc:	b530      	push	{r4, r5, lr}
 801a8be:	3901      	subs	r1, #1
 801a8c0:	2400      	movs	r4, #0
 801a8c2:	42a2      	cmp	r2, r4
 801a8c4:	d101      	bne.n	801a8ca <memcmp+0xe>
 801a8c6:	2000      	movs	r0, #0
 801a8c8:	e005      	b.n	801a8d6 <memcmp+0x1a>
 801a8ca:	5d03      	ldrb	r3, [r0, r4]
 801a8cc:	3401      	adds	r4, #1
 801a8ce:	5d0d      	ldrb	r5, [r1, r4]
 801a8d0:	42ab      	cmp	r3, r5
 801a8d2:	d0f6      	beq.n	801a8c2 <memcmp+0x6>
 801a8d4:	1b58      	subs	r0, r3, r5
 801a8d6:	bd30      	pop	{r4, r5, pc}

0801a8d8 <memcpy>:
 801a8d8:	440a      	add	r2, r1
 801a8da:	4291      	cmp	r1, r2
 801a8dc:	f100 33ff 	add.w	r3, r0, #4294967295
 801a8e0:	d100      	bne.n	801a8e4 <memcpy+0xc>
 801a8e2:	4770      	bx	lr
 801a8e4:	b510      	push	{r4, lr}
 801a8e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 801a8ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 801a8ee:	4291      	cmp	r1, r2
 801a8f0:	d1f9      	bne.n	801a8e6 <memcpy+0xe>
 801a8f2:	bd10      	pop	{r4, pc}

0801a8f4 <memmove>:
 801a8f4:	4288      	cmp	r0, r1
 801a8f6:	b510      	push	{r4, lr}
 801a8f8:	eb01 0402 	add.w	r4, r1, r2
 801a8fc:	d902      	bls.n	801a904 <memmove+0x10>
 801a8fe:	4284      	cmp	r4, r0
 801a900:	4623      	mov	r3, r4
 801a902:	d807      	bhi.n	801a914 <memmove+0x20>
 801a904:	1e43      	subs	r3, r0, #1
 801a906:	42a1      	cmp	r1, r4
 801a908:	d008      	beq.n	801a91c <memmove+0x28>
 801a90a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801a90e:	f803 2f01 	strb.w	r2, [r3, #1]!
 801a912:	e7f8      	b.n	801a906 <memmove+0x12>
 801a914:	4402      	add	r2, r0
 801a916:	4601      	mov	r1, r0
 801a918:	428a      	cmp	r2, r1
 801a91a:	d100      	bne.n	801a91e <memmove+0x2a>
 801a91c:	bd10      	pop	{r4, pc}
 801a91e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801a922:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801a926:	e7f7      	b.n	801a918 <memmove+0x24>

0801a928 <memset>:
 801a928:	4402      	add	r2, r0
 801a92a:	4603      	mov	r3, r0
 801a92c:	4293      	cmp	r3, r2
 801a92e:	d100      	bne.n	801a932 <memset+0xa>
 801a930:	4770      	bx	lr
 801a932:	f803 1b01 	strb.w	r1, [r3], #1
 801a936:	e7f9      	b.n	801a92c <memset+0x4>

0801a938 <_free_r>:
 801a938:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a93a:	2900      	cmp	r1, #0
 801a93c:	d048      	beq.n	801a9d0 <_free_r+0x98>
 801a93e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a942:	9001      	str	r0, [sp, #4]
 801a944:	2b00      	cmp	r3, #0
 801a946:	f1a1 0404 	sub.w	r4, r1, #4
 801a94a:	bfb8      	it	lt
 801a94c:	18e4      	addlt	r4, r4, r3
 801a94e:	f002 ffdd 	bl	801d90c <__malloc_lock>
 801a952:	4a20      	ldr	r2, [pc, #128]	; (801a9d4 <_free_r+0x9c>)
 801a954:	9801      	ldr	r0, [sp, #4]
 801a956:	6813      	ldr	r3, [r2, #0]
 801a958:	4615      	mov	r5, r2
 801a95a:	b933      	cbnz	r3, 801a96a <_free_r+0x32>
 801a95c:	6063      	str	r3, [r4, #4]
 801a95e:	6014      	str	r4, [r2, #0]
 801a960:	b003      	add	sp, #12
 801a962:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801a966:	f002 bfd7 	b.w	801d918 <__malloc_unlock>
 801a96a:	42a3      	cmp	r3, r4
 801a96c:	d90b      	bls.n	801a986 <_free_r+0x4e>
 801a96e:	6821      	ldr	r1, [r4, #0]
 801a970:	1862      	adds	r2, r4, r1
 801a972:	4293      	cmp	r3, r2
 801a974:	bf04      	itt	eq
 801a976:	681a      	ldreq	r2, [r3, #0]
 801a978:	685b      	ldreq	r3, [r3, #4]
 801a97a:	6063      	str	r3, [r4, #4]
 801a97c:	bf04      	itt	eq
 801a97e:	1852      	addeq	r2, r2, r1
 801a980:	6022      	streq	r2, [r4, #0]
 801a982:	602c      	str	r4, [r5, #0]
 801a984:	e7ec      	b.n	801a960 <_free_r+0x28>
 801a986:	461a      	mov	r2, r3
 801a988:	685b      	ldr	r3, [r3, #4]
 801a98a:	b10b      	cbz	r3, 801a990 <_free_r+0x58>
 801a98c:	42a3      	cmp	r3, r4
 801a98e:	d9fa      	bls.n	801a986 <_free_r+0x4e>
 801a990:	6811      	ldr	r1, [r2, #0]
 801a992:	1855      	adds	r5, r2, r1
 801a994:	42a5      	cmp	r5, r4
 801a996:	d10b      	bne.n	801a9b0 <_free_r+0x78>
 801a998:	6824      	ldr	r4, [r4, #0]
 801a99a:	4421      	add	r1, r4
 801a99c:	1854      	adds	r4, r2, r1
 801a99e:	42a3      	cmp	r3, r4
 801a9a0:	6011      	str	r1, [r2, #0]
 801a9a2:	d1dd      	bne.n	801a960 <_free_r+0x28>
 801a9a4:	681c      	ldr	r4, [r3, #0]
 801a9a6:	685b      	ldr	r3, [r3, #4]
 801a9a8:	6053      	str	r3, [r2, #4]
 801a9aa:	4421      	add	r1, r4
 801a9ac:	6011      	str	r1, [r2, #0]
 801a9ae:	e7d7      	b.n	801a960 <_free_r+0x28>
 801a9b0:	d902      	bls.n	801a9b8 <_free_r+0x80>
 801a9b2:	230c      	movs	r3, #12
 801a9b4:	6003      	str	r3, [r0, #0]
 801a9b6:	e7d3      	b.n	801a960 <_free_r+0x28>
 801a9b8:	6825      	ldr	r5, [r4, #0]
 801a9ba:	1961      	adds	r1, r4, r5
 801a9bc:	428b      	cmp	r3, r1
 801a9be:	bf04      	itt	eq
 801a9c0:	6819      	ldreq	r1, [r3, #0]
 801a9c2:	685b      	ldreq	r3, [r3, #4]
 801a9c4:	6063      	str	r3, [r4, #4]
 801a9c6:	bf04      	itt	eq
 801a9c8:	1949      	addeq	r1, r1, r5
 801a9ca:	6021      	streq	r1, [r4, #0]
 801a9cc:	6054      	str	r4, [r2, #4]
 801a9ce:	e7c7      	b.n	801a960 <_free_r+0x28>
 801a9d0:	b003      	add	sp, #12
 801a9d2:	bd30      	pop	{r4, r5, pc}
 801a9d4:	20000628 	.word	0x20000628

0801a9d8 <_malloc_r>:
 801a9d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a9da:	1ccd      	adds	r5, r1, #3
 801a9dc:	f025 0503 	bic.w	r5, r5, #3
 801a9e0:	3508      	adds	r5, #8
 801a9e2:	2d0c      	cmp	r5, #12
 801a9e4:	bf38      	it	cc
 801a9e6:	250c      	movcc	r5, #12
 801a9e8:	2d00      	cmp	r5, #0
 801a9ea:	4606      	mov	r6, r0
 801a9ec:	db01      	blt.n	801a9f2 <_malloc_r+0x1a>
 801a9ee:	42a9      	cmp	r1, r5
 801a9f0:	d903      	bls.n	801a9fa <_malloc_r+0x22>
 801a9f2:	230c      	movs	r3, #12
 801a9f4:	6033      	str	r3, [r6, #0]
 801a9f6:	2000      	movs	r0, #0
 801a9f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a9fa:	f002 ff87 	bl	801d90c <__malloc_lock>
 801a9fe:	4921      	ldr	r1, [pc, #132]	; (801aa84 <_malloc_r+0xac>)
 801aa00:	680a      	ldr	r2, [r1, #0]
 801aa02:	4614      	mov	r4, r2
 801aa04:	b99c      	cbnz	r4, 801aa2e <_malloc_r+0x56>
 801aa06:	4f20      	ldr	r7, [pc, #128]	; (801aa88 <_malloc_r+0xb0>)
 801aa08:	683b      	ldr	r3, [r7, #0]
 801aa0a:	b923      	cbnz	r3, 801aa16 <_malloc_r+0x3e>
 801aa0c:	4621      	mov	r1, r4
 801aa0e:	4630      	mov	r0, r6
 801aa10:	f000 fcfe 	bl	801b410 <_sbrk_r>
 801aa14:	6038      	str	r0, [r7, #0]
 801aa16:	4629      	mov	r1, r5
 801aa18:	4630      	mov	r0, r6
 801aa1a:	f000 fcf9 	bl	801b410 <_sbrk_r>
 801aa1e:	1c43      	adds	r3, r0, #1
 801aa20:	d123      	bne.n	801aa6a <_malloc_r+0x92>
 801aa22:	230c      	movs	r3, #12
 801aa24:	6033      	str	r3, [r6, #0]
 801aa26:	4630      	mov	r0, r6
 801aa28:	f002 ff76 	bl	801d918 <__malloc_unlock>
 801aa2c:	e7e3      	b.n	801a9f6 <_malloc_r+0x1e>
 801aa2e:	6823      	ldr	r3, [r4, #0]
 801aa30:	1b5b      	subs	r3, r3, r5
 801aa32:	d417      	bmi.n	801aa64 <_malloc_r+0x8c>
 801aa34:	2b0b      	cmp	r3, #11
 801aa36:	d903      	bls.n	801aa40 <_malloc_r+0x68>
 801aa38:	6023      	str	r3, [r4, #0]
 801aa3a:	441c      	add	r4, r3
 801aa3c:	6025      	str	r5, [r4, #0]
 801aa3e:	e004      	b.n	801aa4a <_malloc_r+0x72>
 801aa40:	6863      	ldr	r3, [r4, #4]
 801aa42:	42a2      	cmp	r2, r4
 801aa44:	bf0c      	ite	eq
 801aa46:	600b      	streq	r3, [r1, #0]
 801aa48:	6053      	strne	r3, [r2, #4]
 801aa4a:	4630      	mov	r0, r6
 801aa4c:	f002 ff64 	bl	801d918 <__malloc_unlock>
 801aa50:	f104 000b 	add.w	r0, r4, #11
 801aa54:	1d23      	adds	r3, r4, #4
 801aa56:	f020 0007 	bic.w	r0, r0, #7
 801aa5a:	1ac2      	subs	r2, r0, r3
 801aa5c:	d0cc      	beq.n	801a9f8 <_malloc_r+0x20>
 801aa5e:	1a1b      	subs	r3, r3, r0
 801aa60:	50a3      	str	r3, [r4, r2]
 801aa62:	e7c9      	b.n	801a9f8 <_malloc_r+0x20>
 801aa64:	4622      	mov	r2, r4
 801aa66:	6864      	ldr	r4, [r4, #4]
 801aa68:	e7cc      	b.n	801aa04 <_malloc_r+0x2c>
 801aa6a:	1cc4      	adds	r4, r0, #3
 801aa6c:	f024 0403 	bic.w	r4, r4, #3
 801aa70:	42a0      	cmp	r0, r4
 801aa72:	d0e3      	beq.n	801aa3c <_malloc_r+0x64>
 801aa74:	1a21      	subs	r1, r4, r0
 801aa76:	4630      	mov	r0, r6
 801aa78:	f000 fcca 	bl	801b410 <_sbrk_r>
 801aa7c:	3001      	adds	r0, #1
 801aa7e:	d1dd      	bne.n	801aa3c <_malloc_r+0x64>
 801aa80:	e7cf      	b.n	801aa22 <_malloc_r+0x4a>
 801aa82:	bf00      	nop
 801aa84:	20000628 	.word	0x20000628
 801aa88:	2000062c 	.word	0x2000062c

0801aa8c <__cvt>:
 801aa8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801aa90:	ec55 4b10 	vmov	r4, r5, d0
 801aa94:	2d00      	cmp	r5, #0
 801aa96:	460e      	mov	r6, r1
 801aa98:	4619      	mov	r1, r3
 801aa9a:	462b      	mov	r3, r5
 801aa9c:	bfbb      	ittet	lt
 801aa9e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801aaa2:	461d      	movlt	r5, r3
 801aaa4:	2300      	movge	r3, #0
 801aaa6:	232d      	movlt	r3, #45	; 0x2d
 801aaa8:	700b      	strb	r3, [r1, #0]
 801aaaa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801aaac:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 801aab0:	4691      	mov	r9, r2
 801aab2:	f023 0820 	bic.w	r8, r3, #32
 801aab6:	bfbc      	itt	lt
 801aab8:	4622      	movlt	r2, r4
 801aaba:	4614      	movlt	r4, r2
 801aabc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801aac0:	d005      	beq.n	801aace <__cvt+0x42>
 801aac2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 801aac6:	d100      	bne.n	801aaca <__cvt+0x3e>
 801aac8:	3601      	adds	r6, #1
 801aaca:	2102      	movs	r1, #2
 801aacc:	e000      	b.n	801aad0 <__cvt+0x44>
 801aace:	2103      	movs	r1, #3
 801aad0:	ab03      	add	r3, sp, #12
 801aad2:	9301      	str	r3, [sp, #4]
 801aad4:	ab02      	add	r3, sp, #8
 801aad6:	9300      	str	r3, [sp, #0]
 801aad8:	ec45 4b10 	vmov	d0, r4, r5
 801aadc:	4653      	mov	r3, sl
 801aade:	4632      	mov	r2, r6
 801aae0:	f001 fc92 	bl	801c408 <_dtoa_r>
 801aae4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 801aae8:	4607      	mov	r7, r0
 801aaea:	d102      	bne.n	801aaf2 <__cvt+0x66>
 801aaec:	f019 0f01 	tst.w	r9, #1
 801aaf0:	d022      	beq.n	801ab38 <__cvt+0xac>
 801aaf2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801aaf6:	eb07 0906 	add.w	r9, r7, r6
 801aafa:	d110      	bne.n	801ab1e <__cvt+0x92>
 801aafc:	783b      	ldrb	r3, [r7, #0]
 801aafe:	2b30      	cmp	r3, #48	; 0x30
 801ab00:	d10a      	bne.n	801ab18 <__cvt+0x8c>
 801ab02:	2200      	movs	r2, #0
 801ab04:	2300      	movs	r3, #0
 801ab06:	4620      	mov	r0, r4
 801ab08:	4629      	mov	r1, r5
 801ab0a:	f7e5 ffed 	bl	8000ae8 <__aeabi_dcmpeq>
 801ab0e:	b918      	cbnz	r0, 801ab18 <__cvt+0x8c>
 801ab10:	f1c6 0601 	rsb	r6, r6, #1
 801ab14:	f8ca 6000 	str.w	r6, [sl]
 801ab18:	f8da 3000 	ldr.w	r3, [sl]
 801ab1c:	4499      	add	r9, r3
 801ab1e:	2200      	movs	r2, #0
 801ab20:	2300      	movs	r3, #0
 801ab22:	4620      	mov	r0, r4
 801ab24:	4629      	mov	r1, r5
 801ab26:	f7e5 ffdf 	bl	8000ae8 <__aeabi_dcmpeq>
 801ab2a:	b108      	cbz	r0, 801ab30 <__cvt+0xa4>
 801ab2c:	f8cd 900c 	str.w	r9, [sp, #12]
 801ab30:	2230      	movs	r2, #48	; 0x30
 801ab32:	9b03      	ldr	r3, [sp, #12]
 801ab34:	454b      	cmp	r3, r9
 801ab36:	d307      	bcc.n	801ab48 <__cvt+0xbc>
 801ab38:	9b03      	ldr	r3, [sp, #12]
 801ab3a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801ab3c:	1bdb      	subs	r3, r3, r7
 801ab3e:	4638      	mov	r0, r7
 801ab40:	6013      	str	r3, [r2, #0]
 801ab42:	b004      	add	sp, #16
 801ab44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ab48:	1c59      	adds	r1, r3, #1
 801ab4a:	9103      	str	r1, [sp, #12]
 801ab4c:	701a      	strb	r2, [r3, #0]
 801ab4e:	e7f0      	b.n	801ab32 <__cvt+0xa6>

0801ab50 <__exponent>:
 801ab50:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801ab52:	4603      	mov	r3, r0
 801ab54:	2900      	cmp	r1, #0
 801ab56:	bfb8      	it	lt
 801ab58:	4249      	neglt	r1, r1
 801ab5a:	f803 2b02 	strb.w	r2, [r3], #2
 801ab5e:	bfb4      	ite	lt
 801ab60:	222d      	movlt	r2, #45	; 0x2d
 801ab62:	222b      	movge	r2, #43	; 0x2b
 801ab64:	2909      	cmp	r1, #9
 801ab66:	7042      	strb	r2, [r0, #1]
 801ab68:	dd2a      	ble.n	801abc0 <__exponent+0x70>
 801ab6a:	f10d 0407 	add.w	r4, sp, #7
 801ab6e:	46a4      	mov	ip, r4
 801ab70:	270a      	movs	r7, #10
 801ab72:	46a6      	mov	lr, r4
 801ab74:	460a      	mov	r2, r1
 801ab76:	fb91 f6f7 	sdiv	r6, r1, r7
 801ab7a:	fb07 1516 	mls	r5, r7, r6, r1
 801ab7e:	3530      	adds	r5, #48	; 0x30
 801ab80:	2a63      	cmp	r2, #99	; 0x63
 801ab82:	f104 34ff 	add.w	r4, r4, #4294967295
 801ab86:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801ab8a:	4631      	mov	r1, r6
 801ab8c:	dcf1      	bgt.n	801ab72 <__exponent+0x22>
 801ab8e:	3130      	adds	r1, #48	; 0x30
 801ab90:	f1ae 0502 	sub.w	r5, lr, #2
 801ab94:	f804 1c01 	strb.w	r1, [r4, #-1]
 801ab98:	1c44      	adds	r4, r0, #1
 801ab9a:	4629      	mov	r1, r5
 801ab9c:	4561      	cmp	r1, ip
 801ab9e:	d30a      	bcc.n	801abb6 <__exponent+0x66>
 801aba0:	f10d 0209 	add.w	r2, sp, #9
 801aba4:	eba2 020e 	sub.w	r2, r2, lr
 801aba8:	4565      	cmp	r5, ip
 801abaa:	bf88      	it	hi
 801abac:	2200      	movhi	r2, #0
 801abae:	4413      	add	r3, r2
 801abb0:	1a18      	subs	r0, r3, r0
 801abb2:	b003      	add	sp, #12
 801abb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801abb6:	f811 2b01 	ldrb.w	r2, [r1], #1
 801abba:	f804 2f01 	strb.w	r2, [r4, #1]!
 801abbe:	e7ed      	b.n	801ab9c <__exponent+0x4c>
 801abc0:	2330      	movs	r3, #48	; 0x30
 801abc2:	3130      	adds	r1, #48	; 0x30
 801abc4:	7083      	strb	r3, [r0, #2]
 801abc6:	70c1      	strb	r1, [r0, #3]
 801abc8:	1d03      	adds	r3, r0, #4
 801abca:	e7f1      	b.n	801abb0 <__exponent+0x60>

0801abcc <_printf_float>:
 801abcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801abd0:	ed2d 8b02 	vpush	{d8}
 801abd4:	b08d      	sub	sp, #52	; 0x34
 801abd6:	460c      	mov	r4, r1
 801abd8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801abdc:	4616      	mov	r6, r2
 801abde:	461f      	mov	r7, r3
 801abe0:	4605      	mov	r5, r0
 801abe2:	f002 fe79 	bl	801d8d8 <_localeconv_r>
 801abe6:	f8d0 a000 	ldr.w	sl, [r0]
 801abea:	4650      	mov	r0, sl
 801abec:	f7e5 fafa 	bl	80001e4 <strlen>
 801abf0:	2300      	movs	r3, #0
 801abf2:	930a      	str	r3, [sp, #40]	; 0x28
 801abf4:	6823      	ldr	r3, [r4, #0]
 801abf6:	9305      	str	r3, [sp, #20]
 801abf8:	f8d8 3000 	ldr.w	r3, [r8]
 801abfc:	f894 b018 	ldrb.w	fp, [r4, #24]
 801ac00:	3307      	adds	r3, #7
 801ac02:	f023 0307 	bic.w	r3, r3, #7
 801ac06:	f103 0208 	add.w	r2, r3, #8
 801ac0a:	f8c8 2000 	str.w	r2, [r8]
 801ac0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ac12:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 801ac16:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 801ac1a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801ac1e:	9307      	str	r3, [sp, #28]
 801ac20:	f8cd 8018 	str.w	r8, [sp, #24]
 801ac24:	ee08 0a10 	vmov	s16, r0
 801ac28:	4b9f      	ldr	r3, [pc, #636]	; (801aea8 <_printf_float+0x2dc>)
 801ac2a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801ac2e:	f04f 32ff 	mov.w	r2, #4294967295
 801ac32:	f7e5 ff8b 	bl	8000b4c <__aeabi_dcmpun>
 801ac36:	bb88      	cbnz	r0, 801ac9c <_printf_float+0xd0>
 801ac38:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801ac3c:	4b9a      	ldr	r3, [pc, #616]	; (801aea8 <_printf_float+0x2dc>)
 801ac3e:	f04f 32ff 	mov.w	r2, #4294967295
 801ac42:	f7e5 ff65 	bl	8000b10 <__aeabi_dcmple>
 801ac46:	bb48      	cbnz	r0, 801ac9c <_printf_float+0xd0>
 801ac48:	2200      	movs	r2, #0
 801ac4a:	2300      	movs	r3, #0
 801ac4c:	4640      	mov	r0, r8
 801ac4e:	4649      	mov	r1, r9
 801ac50:	f7e5 ff54 	bl	8000afc <__aeabi_dcmplt>
 801ac54:	b110      	cbz	r0, 801ac5c <_printf_float+0x90>
 801ac56:	232d      	movs	r3, #45	; 0x2d
 801ac58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801ac5c:	4b93      	ldr	r3, [pc, #588]	; (801aeac <_printf_float+0x2e0>)
 801ac5e:	4894      	ldr	r0, [pc, #592]	; (801aeb0 <_printf_float+0x2e4>)
 801ac60:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 801ac64:	bf94      	ite	ls
 801ac66:	4698      	movls	r8, r3
 801ac68:	4680      	movhi	r8, r0
 801ac6a:	2303      	movs	r3, #3
 801ac6c:	6123      	str	r3, [r4, #16]
 801ac6e:	9b05      	ldr	r3, [sp, #20]
 801ac70:	f023 0204 	bic.w	r2, r3, #4
 801ac74:	6022      	str	r2, [r4, #0]
 801ac76:	f04f 0900 	mov.w	r9, #0
 801ac7a:	9700      	str	r7, [sp, #0]
 801ac7c:	4633      	mov	r3, r6
 801ac7e:	aa0b      	add	r2, sp, #44	; 0x2c
 801ac80:	4621      	mov	r1, r4
 801ac82:	4628      	mov	r0, r5
 801ac84:	f000 f9d8 	bl	801b038 <_printf_common>
 801ac88:	3001      	adds	r0, #1
 801ac8a:	f040 8090 	bne.w	801adae <_printf_float+0x1e2>
 801ac8e:	f04f 30ff 	mov.w	r0, #4294967295
 801ac92:	b00d      	add	sp, #52	; 0x34
 801ac94:	ecbd 8b02 	vpop	{d8}
 801ac98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ac9c:	4642      	mov	r2, r8
 801ac9e:	464b      	mov	r3, r9
 801aca0:	4640      	mov	r0, r8
 801aca2:	4649      	mov	r1, r9
 801aca4:	f7e5 ff52 	bl	8000b4c <__aeabi_dcmpun>
 801aca8:	b140      	cbz	r0, 801acbc <_printf_float+0xf0>
 801acaa:	464b      	mov	r3, r9
 801acac:	2b00      	cmp	r3, #0
 801acae:	bfbc      	itt	lt
 801acb0:	232d      	movlt	r3, #45	; 0x2d
 801acb2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801acb6:	487f      	ldr	r0, [pc, #508]	; (801aeb4 <_printf_float+0x2e8>)
 801acb8:	4b7f      	ldr	r3, [pc, #508]	; (801aeb8 <_printf_float+0x2ec>)
 801acba:	e7d1      	b.n	801ac60 <_printf_float+0x94>
 801acbc:	6863      	ldr	r3, [r4, #4]
 801acbe:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 801acc2:	9206      	str	r2, [sp, #24]
 801acc4:	1c5a      	adds	r2, r3, #1
 801acc6:	d13f      	bne.n	801ad48 <_printf_float+0x17c>
 801acc8:	2306      	movs	r3, #6
 801acca:	6063      	str	r3, [r4, #4]
 801accc:	9b05      	ldr	r3, [sp, #20]
 801acce:	6861      	ldr	r1, [r4, #4]
 801acd0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 801acd4:	2300      	movs	r3, #0
 801acd6:	9303      	str	r3, [sp, #12]
 801acd8:	ab0a      	add	r3, sp, #40	; 0x28
 801acda:	e9cd b301 	strd	fp, r3, [sp, #4]
 801acde:	ab09      	add	r3, sp, #36	; 0x24
 801ace0:	ec49 8b10 	vmov	d0, r8, r9
 801ace4:	9300      	str	r3, [sp, #0]
 801ace6:	6022      	str	r2, [r4, #0]
 801ace8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801acec:	4628      	mov	r0, r5
 801acee:	f7ff fecd 	bl	801aa8c <__cvt>
 801acf2:	9b06      	ldr	r3, [sp, #24]
 801acf4:	9909      	ldr	r1, [sp, #36]	; 0x24
 801acf6:	2b47      	cmp	r3, #71	; 0x47
 801acf8:	4680      	mov	r8, r0
 801acfa:	d108      	bne.n	801ad0e <_printf_float+0x142>
 801acfc:	1cc8      	adds	r0, r1, #3
 801acfe:	db02      	blt.n	801ad06 <_printf_float+0x13a>
 801ad00:	6863      	ldr	r3, [r4, #4]
 801ad02:	4299      	cmp	r1, r3
 801ad04:	dd41      	ble.n	801ad8a <_printf_float+0x1be>
 801ad06:	f1ab 0b02 	sub.w	fp, fp, #2
 801ad0a:	fa5f fb8b 	uxtb.w	fp, fp
 801ad0e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801ad12:	d820      	bhi.n	801ad56 <_printf_float+0x18a>
 801ad14:	3901      	subs	r1, #1
 801ad16:	465a      	mov	r2, fp
 801ad18:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801ad1c:	9109      	str	r1, [sp, #36]	; 0x24
 801ad1e:	f7ff ff17 	bl	801ab50 <__exponent>
 801ad22:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801ad24:	1813      	adds	r3, r2, r0
 801ad26:	2a01      	cmp	r2, #1
 801ad28:	4681      	mov	r9, r0
 801ad2a:	6123      	str	r3, [r4, #16]
 801ad2c:	dc02      	bgt.n	801ad34 <_printf_float+0x168>
 801ad2e:	6822      	ldr	r2, [r4, #0]
 801ad30:	07d2      	lsls	r2, r2, #31
 801ad32:	d501      	bpl.n	801ad38 <_printf_float+0x16c>
 801ad34:	3301      	adds	r3, #1
 801ad36:	6123      	str	r3, [r4, #16]
 801ad38:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 801ad3c:	2b00      	cmp	r3, #0
 801ad3e:	d09c      	beq.n	801ac7a <_printf_float+0xae>
 801ad40:	232d      	movs	r3, #45	; 0x2d
 801ad42:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801ad46:	e798      	b.n	801ac7a <_printf_float+0xae>
 801ad48:	9a06      	ldr	r2, [sp, #24]
 801ad4a:	2a47      	cmp	r2, #71	; 0x47
 801ad4c:	d1be      	bne.n	801accc <_printf_float+0x100>
 801ad4e:	2b00      	cmp	r3, #0
 801ad50:	d1bc      	bne.n	801accc <_printf_float+0x100>
 801ad52:	2301      	movs	r3, #1
 801ad54:	e7b9      	b.n	801acca <_printf_float+0xfe>
 801ad56:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 801ad5a:	d118      	bne.n	801ad8e <_printf_float+0x1c2>
 801ad5c:	2900      	cmp	r1, #0
 801ad5e:	6863      	ldr	r3, [r4, #4]
 801ad60:	dd0b      	ble.n	801ad7a <_printf_float+0x1ae>
 801ad62:	6121      	str	r1, [r4, #16]
 801ad64:	b913      	cbnz	r3, 801ad6c <_printf_float+0x1a0>
 801ad66:	6822      	ldr	r2, [r4, #0]
 801ad68:	07d0      	lsls	r0, r2, #31
 801ad6a:	d502      	bpl.n	801ad72 <_printf_float+0x1a6>
 801ad6c:	3301      	adds	r3, #1
 801ad6e:	440b      	add	r3, r1
 801ad70:	6123      	str	r3, [r4, #16]
 801ad72:	65a1      	str	r1, [r4, #88]	; 0x58
 801ad74:	f04f 0900 	mov.w	r9, #0
 801ad78:	e7de      	b.n	801ad38 <_printf_float+0x16c>
 801ad7a:	b913      	cbnz	r3, 801ad82 <_printf_float+0x1b6>
 801ad7c:	6822      	ldr	r2, [r4, #0]
 801ad7e:	07d2      	lsls	r2, r2, #31
 801ad80:	d501      	bpl.n	801ad86 <_printf_float+0x1ba>
 801ad82:	3302      	adds	r3, #2
 801ad84:	e7f4      	b.n	801ad70 <_printf_float+0x1a4>
 801ad86:	2301      	movs	r3, #1
 801ad88:	e7f2      	b.n	801ad70 <_printf_float+0x1a4>
 801ad8a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801ad8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ad90:	4299      	cmp	r1, r3
 801ad92:	db05      	blt.n	801ada0 <_printf_float+0x1d4>
 801ad94:	6823      	ldr	r3, [r4, #0]
 801ad96:	6121      	str	r1, [r4, #16]
 801ad98:	07d8      	lsls	r0, r3, #31
 801ad9a:	d5ea      	bpl.n	801ad72 <_printf_float+0x1a6>
 801ad9c:	1c4b      	adds	r3, r1, #1
 801ad9e:	e7e7      	b.n	801ad70 <_printf_float+0x1a4>
 801ada0:	2900      	cmp	r1, #0
 801ada2:	bfd4      	ite	le
 801ada4:	f1c1 0202 	rsble	r2, r1, #2
 801ada8:	2201      	movgt	r2, #1
 801adaa:	4413      	add	r3, r2
 801adac:	e7e0      	b.n	801ad70 <_printf_float+0x1a4>
 801adae:	6823      	ldr	r3, [r4, #0]
 801adb0:	055a      	lsls	r2, r3, #21
 801adb2:	d407      	bmi.n	801adc4 <_printf_float+0x1f8>
 801adb4:	6923      	ldr	r3, [r4, #16]
 801adb6:	4642      	mov	r2, r8
 801adb8:	4631      	mov	r1, r6
 801adba:	4628      	mov	r0, r5
 801adbc:	47b8      	blx	r7
 801adbe:	3001      	adds	r0, #1
 801adc0:	d12c      	bne.n	801ae1c <_printf_float+0x250>
 801adc2:	e764      	b.n	801ac8e <_printf_float+0xc2>
 801adc4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801adc8:	f240 80e0 	bls.w	801af8c <_printf_float+0x3c0>
 801adcc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801add0:	2200      	movs	r2, #0
 801add2:	2300      	movs	r3, #0
 801add4:	f7e5 fe88 	bl	8000ae8 <__aeabi_dcmpeq>
 801add8:	2800      	cmp	r0, #0
 801adda:	d034      	beq.n	801ae46 <_printf_float+0x27a>
 801addc:	4a37      	ldr	r2, [pc, #220]	; (801aebc <_printf_float+0x2f0>)
 801adde:	2301      	movs	r3, #1
 801ade0:	4631      	mov	r1, r6
 801ade2:	4628      	mov	r0, r5
 801ade4:	47b8      	blx	r7
 801ade6:	3001      	adds	r0, #1
 801ade8:	f43f af51 	beq.w	801ac8e <_printf_float+0xc2>
 801adec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801adf0:	429a      	cmp	r2, r3
 801adf2:	db02      	blt.n	801adfa <_printf_float+0x22e>
 801adf4:	6823      	ldr	r3, [r4, #0]
 801adf6:	07d8      	lsls	r0, r3, #31
 801adf8:	d510      	bpl.n	801ae1c <_printf_float+0x250>
 801adfa:	ee18 3a10 	vmov	r3, s16
 801adfe:	4652      	mov	r2, sl
 801ae00:	4631      	mov	r1, r6
 801ae02:	4628      	mov	r0, r5
 801ae04:	47b8      	blx	r7
 801ae06:	3001      	adds	r0, #1
 801ae08:	f43f af41 	beq.w	801ac8e <_printf_float+0xc2>
 801ae0c:	f04f 0800 	mov.w	r8, #0
 801ae10:	f104 091a 	add.w	r9, r4, #26
 801ae14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ae16:	3b01      	subs	r3, #1
 801ae18:	4543      	cmp	r3, r8
 801ae1a:	dc09      	bgt.n	801ae30 <_printf_float+0x264>
 801ae1c:	6823      	ldr	r3, [r4, #0]
 801ae1e:	079b      	lsls	r3, r3, #30
 801ae20:	f100 8105 	bmi.w	801b02e <_printf_float+0x462>
 801ae24:	68e0      	ldr	r0, [r4, #12]
 801ae26:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ae28:	4298      	cmp	r0, r3
 801ae2a:	bfb8      	it	lt
 801ae2c:	4618      	movlt	r0, r3
 801ae2e:	e730      	b.n	801ac92 <_printf_float+0xc6>
 801ae30:	2301      	movs	r3, #1
 801ae32:	464a      	mov	r2, r9
 801ae34:	4631      	mov	r1, r6
 801ae36:	4628      	mov	r0, r5
 801ae38:	47b8      	blx	r7
 801ae3a:	3001      	adds	r0, #1
 801ae3c:	f43f af27 	beq.w	801ac8e <_printf_float+0xc2>
 801ae40:	f108 0801 	add.w	r8, r8, #1
 801ae44:	e7e6      	b.n	801ae14 <_printf_float+0x248>
 801ae46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ae48:	2b00      	cmp	r3, #0
 801ae4a:	dc39      	bgt.n	801aec0 <_printf_float+0x2f4>
 801ae4c:	4a1b      	ldr	r2, [pc, #108]	; (801aebc <_printf_float+0x2f0>)
 801ae4e:	2301      	movs	r3, #1
 801ae50:	4631      	mov	r1, r6
 801ae52:	4628      	mov	r0, r5
 801ae54:	47b8      	blx	r7
 801ae56:	3001      	adds	r0, #1
 801ae58:	f43f af19 	beq.w	801ac8e <_printf_float+0xc2>
 801ae5c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801ae60:	4313      	orrs	r3, r2
 801ae62:	d102      	bne.n	801ae6a <_printf_float+0x29e>
 801ae64:	6823      	ldr	r3, [r4, #0]
 801ae66:	07d9      	lsls	r1, r3, #31
 801ae68:	d5d8      	bpl.n	801ae1c <_printf_float+0x250>
 801ae6a:	ee18 3a10 	vmov	r3, s16
 801ae6e:	4652      	mov	r2, sl
 801ae70:	4631      	mov	r1, r6
 801ae72:	4628      	mov	r0, r5
 801ae74:	47b8      	blx	r7
 801ae76:	3001      	adds	r0, #1
 801ae78:	f43f af09 	beq.w	801ac8e <_printf_float+0xc2>
 801ae7c:	f04f 0900 	mov.w	r9, #0
 801ae80:	f104 0a1a 	add.w	sl, r4, #26
 801ae84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ae86:	425b      	negs	r3, r3
 801ae88:	454b      	cmp	r3, r9
 801ae8a:	dc01      	bgt.n	801ae90 <_printf_float+0x2c4>
 801ae8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ae8e:	e792      	b.n	801adb6 <_printf_float+0x1ea>
 801ae90:	2301      	movs	r3, #1
 801ae92:	4652      	mov	r2, sl
 801ae94:	4631      	mov	r1, r6
 801ae96:	4628      	mov	r0, r5
 801ae98:	47b8      	blx	r7
 801ae9a:	3001      	adds	r0, #1
 801ae9c:	f43f aef7 	beq.w	801ac8e <_printf_float+0xc2>
 801aea0:	f109 0901 	add.w	r9, r9, #1
 801aea4:	e7ee      	b.n	801ae84 <_printf_float+0x2b8>
 801aea6:	bf00      	nop
 801aea8:	7fefffff 	.word	0x7fefffff
 801aeac:	0802405c 	.word	0x0802405c
 801aeb0:	08024060 	.word	0x08024060
 801aeb4:	08024068 	.word	0x08024068
 801aeb8:	08024064 	.word	0x08024064
 801aebc:	0802406c 	.word	0x0802406c
 801aec0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801aec2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801aec4:	429a      	cmp	r2, r3
 801aec6:	bfa8      	it	ge
 801aec8:	461a      	movge	r2, r3
 801aeca:	2a00      	cmp	r2, #0
 801aecc:	4691      	mov	r9, r2
 801aece:	dc37      	bgt.n	801af40 <_printf_float+0x374>
 801aed0:	f04f 0b00 	mov.w	fp, #0
 801aed4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801aed8:	f104 021a 	add.w	r2, r4, #26
 801aedc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801aede:	9305      	str	r3, [sp, #20]
 801aee0:	eba3 0309 	sub.w	r3, r3, r9
 801aee4:	455b      	cmp	r3, fp
 801aee6:	dc33      	bgt.n	801af50 <_printf_float+0x384>
 801aee8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801aeec:	429a      	cmp	r2, r3
 801aeee:	db3b      	blt.n	801af68 <_printf_float+0x39c>
 801aef0:	6823      	ldr	r3, [r4, #0]
 801aef2:	07da      	lsls	r2, r3, #31
 801aef4:	d438      	bmi.n	801af68 <_printf_float+0x39c>
 801aef6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801aef8:	9b05      	ldr	r3, [sp, #20]
 801aefa:	9909      	ldr	r1, [sp, #36]	; 0x24
 801aefc:	1ad3      	subs	r3, r2, r3
 801aefe:	eba2 0901 	sub.w	r9, r2, r1
 801af02:	4599      	cmp	r9, r3
 801af04:	bfa8      	it	ge
 801af06:	4699      	movge	r9, r3
 801af08:	f1b9 0f00 	cmp.w	r9, #0
 801af0c:	dc35      	bgt.n	801af7a <_printf_float+0x3ae>
 801af0e:	f04f 0800 	mov.w	r8, #0
 801af12:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801af16:	f104 0a1a 	add.w	sl, r4, #26
 801af1a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801af1e:	1a9b      	subs	r3, r3, r2
 801af20:	eba3 0309 	sub.w	r3, r3, r9
 801af24:	4543      	cmp	r3, r8
 801af26:	f77f af79 	ble.w	801ae1c <_printf_float+0x250>
 801af2a:	2301      	movs	r3, #1
 801af2c:	4652      	mov	r2, sl
 801af2e:	4631      	mov	r1, r6
 801af30:	4628      	mov	r0, r5
 801af32:	47b8      	blx	r7
 801af34:	3001      	adds	r0, #1
 801af36:	f43f aeaa 	beq.w	801ac8e <_printf_float+0xc2>
 801af3a:	f108 0801 	add.w	r8, r8, #1
 801af3e:	e7ec      	b.n	801af1a <_printf_float+0x34e>
 801af40:	4613      	mov	r3, r2
 801af42:	4631      	mov	r1, r6
 801af44:	4642      	mov	r2, r8
 801af46:	4628      	mov	r0, r5
 801af48:	47b8      	blx	r7
 801af4a:	3001      	adds	r0, #1
 801af4c:	d1c0      	bne.n	801aed0 <_printf_float+0x304>
 801af4e:	e69e      	b.n	801ac8e <_printf_float+0xc2>
 801af50:	2301      	movs	r3, #1
 801af52:	4631      	mov	r1, r6
 801af54:	4628      	mov	r0, r5
 801af56:	9205      	str	r2, [sp, #20]
 801af58:	47b8      	blx	r7
 801af5a:	3001      	adds	r0, #1
 801af5c:	f43f ae97 	beq.w	801ac8e <_printf_float+0xc2>
 801af60:	9a05      	ldr	r2, [sp, #20]
 801af62:	f10b 0b01 	add.w	fp, fp, #1
 801af66:	e7b9      	b.n	801aedc <_printf_float+0x310>
 801af68:	ee18 3a10 	vmov	r3, s16
 801af6c:	4652      	mov	r2, sl
 801af6e:	4631      	mov	r1, r6
 801af70:	4628      	mov	r0, r5
 801af72:	47b8      	blx	r7
 801af74:	3001      	adds	r0, #1
 801af76:	d1be      	bne.n	801aef6 <_printf_float+0x32a>
 801af78:	e689      	b.n	801ac8e <_printf_float+0xc2>
 801af7a:	9a05      	ldr	r2, [sp, #20]
 801af7c:	464b      	mov	r3, r9
 801af7e:	4442      	add	r2, r8
 801af80:	4631      	mov	r1, r6
 801af82:	4628      	mov	r0, r5
 801af84:	47b8      	blx	r7
 801af86:	3001      	adds	r0, #1
 801af88:	d1c1      	bne.n	801af0e <_printf_float+0x342>
 801af8a:	e680      	b.n	801ac8e <_printf_float+0xc2>
 801af8c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801af8e:	2a01      	cmp	r2, #1
 801af90:	dc01      	bgt.n	801af96 <_printf_float+0x3ca>
 801af92:	07db      	lsls	r3, r3, #31
 801af94:	d538      	bpl.n	801b008 <_printf_float+0x43c>
 801af96:	2301      	movs	r3, #1
 801af98:	4642      	mov	r2, r8
 801af9a:	4631      	mov	r1, r6
 801af9c:	4628      	mov	r0, r5
 801af9e:	47b8      	blx	r7
 801afa0:	3001      	adds	r0, #1
 801afa2:	f43f ae74 	beq.w	801ac8e <_printf_float+0xc2>
 801afa6:	ee18 3a10 	vmov	r3, s16
 801afaa:	4652      	mov	r2, sl
 801afac:	4631      	mov	r1, r6
 801afae:	4628      	mov	r0, r5
 801afb0:	47b8      	blx	r7
 801afb2:	3001      	adds	r0, #1
 801afb4:	f43f ae6b 	beq.w	801ac8e <_printf_float+0xc2>
 801afb8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801afbc:	2200      	movs	r2, #0
 801afbe:	2300      	movs	r3, #0
 801afc0:	f7e5 fd92 	bl	8000ae8 <__aeabi_dcmpeq>
 801afc4:	b9d8      	cbnz	r0, 801affe <_printf_float+0x432>
 801afc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801afc8:	f108 0201 	add.w	r2, r8, #1
 801afcc:	3b01      	subs	r3, #1
 801afce:	4631      	mov	r1, r6
 801afd0:	4628      	mov	r0, r5
 801afd2:	47b8      	blx	r7
 801afd4:	3001      	adds	r0, #1
 801afd6:	d10e      	bne.n	801aff6 <_printf_float+0x42a>
 801afd8:	e659      	b.n	801ac8e <_printf_float+0xc2>
 801afda:	2301      	movs	r3, #1
 801afdc:	4652      	mov	r2, sl
 801afde:	4631      	mov	r1, r6
 801afe0:	4628      	mov	r0, r5
 801afe2:	47b8      	blx	r7
 801afe4:	3001      	adds	r0, #1
 801afe6:	f43f ae52 	beq.w	801ac8e <_printf_float+0xc2>
 801afea:	f108 0801 	add.w	r8, r8, #1
 801afee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801aff0:	3b01      	subs	r3, #1
 801aff2:	4543      	cmp	r3, r8
 801aff4:	dcf1      	bgt.n	801afda <_printf_float+0x40e>
 801aff6:	464b      	mov	r3, r9
 801aff8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801affc:	e6dc      	b.n	801adb8 <_printf_float+0x1ec>
 801affe:	f04f 0800 	mov.w	r8, #0
 801b002:	f104 0a1a 	add.w	sl, r4, #26
 801b006:	e7f2      	b.n	801afee <_printf_float+0x422>
 801b008:	2301      	movs	r3, #1
 801b00a:	4642      	mov	r2, r8
 801b00c:	e7df      	b.n	801afce <_printf_float+0x402>
 801b00e:	2301      	movs	r3, #1
 801b010:	464a      	mov	r2, r9
 801b012:	4631      	mov	r1, r6
 801b014:	4628      	mov	r0, r5
 801b016:	47b8      	blx	r7
 801b018:	3001      	adds	r0, #1
 801b01a:	f43f ae38 	beq.w	801ac8e <_printf_float+0xc2>
 801b01e:	f108 0801 	add.w	r8, r8, #1
 801b022:	68e3      	ldr	r3, [r4, #12]
 801b024:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801b026:	1a5b      	subs	r3, r3, r1
 801b028:	4543      	cmp	r3, r8
 801b02a:	dcf0      	bgt.n	801b00e <_printf_float+0x442>
 801b02c:	e6fa      	b.n	801ae24 <_printf_float+0x258>
 801b02e:	f04f 0800 	mov.w	r8, #0
 801b032:	f104 0919 	add.w	r9, r4, #25
 801b036:	e7f4      	b.n	801b022 <_printf_float+0x456>

0801b038 <_printf_common>:
 801b038:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b03c:	4616      	mov	r6, r2
 801b03e:	4699      	mov	r9, r3
 801b040:	688a      	ldr	r2, [r1, #8]
 801b042:	690b      	ldr	r3, [r1, #16]
 801b044:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801b048:	4293      	cmp	r3, r2
 801b04a:	bfb8      	it	lt
 801b04c:	4613      	movlt	r3, r2
 801b04e:	6033      	str	r3, [r6, #0]
 801b050:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801b054:	4607      	mov	r7, r0
 801b056:	460c      	mov	r4, r1
 801b058:	b10a      	cbz	r2, 801b05e <_printf_common+0x26>
 801b05a:	3301      	adds	r3, #1
 801b05c:	6033      	str	r3, [r6, #0]
 801b05e:	6823      	ldr	r3, [r4, #0]
 801b060:	0699      	lsls	r1, r3, #26
 801b062:	bf42      	ittt	mi
 801b064:	6833      	ldrmi	r3, [r6, #0]
 801b066:	3302      	addmi	r3, #2
 801b068:	6033      	strmi	r3, [r6, #0]
 801b06a:	6825      	ldr	r5, [r4, #0]
 801b06c:	f015 0506 	ands.w	r5, r5, #6
 801b070:	d106      	bne.n	801b080 <_printf_common+0x48>
 801b072:	f104 0a19 	add.w	sl, r4, #25
 801b076:	68e3      	ldr	r3, [r4, #12]
 801b078:	6832      	ldr	r2, [r6, #0]
 801b07a:	1a9b      	subs	r3, r3, r2
 801b07c:	42ab      	cmp	r3, r5
 801b07e:	dc26      	bgt.n	801b0ce <_printf_common+0x96>
 801b080:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801b084:	1e13      	subs	r3, r2, #0
 801b086:	6822      	ldr	r2, [r4, #0]
 801b088:	bf18      	it	ne
 801b08a:	2301      	movne	r3, #1
 801b08c:	0692      	lsls	r2, r2, #26
 801b08e:	d42b      	bmi.n	801b0e8 <_printf_common+0xb0>
 801b090:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801b094:	4649      	mov	r1, r9
 801b096:	4638      	mov	r0, r7
 801b098:	47c0      	blx	r8
 801b09a:	3001      	adds	r0, #1
 801b09c:	d01e      	beq.n	801b0dc <_printf_common+0xa4>
 801b09e:	6823      	ldr	r3, [r4, #0]
 801b0a0:	68e5      	ldr	r5, [r4, #12]
 801b0a2:	6832      	ldr	r2, [r6, #0]
 801b0a4:	f003 0306 	and.w	r3, r3, #6
 801b0a8:	2b04      	cmp	r3, #4
 801b0aa:	bf08      	it	eq
 801b0ac:	1aad      	subeq	r5, r5, r2
 801b0ae:	68a3      	ldr	r3, [r4, #8]
 801b0b0:	6922      	ldr	r2, [r4, #16]
 801b0b2:	bf0c      	ite	eq
 801b0b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801b0b8:	2500      	movne	r5, #0
 801b0ba:	4293      	cmp	r3, r2
 801b0bc:	bfc4      	itt	gt
 801b0be:	1a9b      	subgt	r3, r3, r2
 801b0c0:	18ed      	addgt	r5, r5, r3
 801b0c2:	2600      	movs	r6, #0
 801b0c4:	341a      	adds	r4, #26
 801b0c6:	42b5      	cmp	r5, r6
 801b0c8:	d11a      	bne.n	801b100 <_printf_common+0xc8>
 801b0ca:	2000      	movs	r0, #0
 801b0cc:	e008      	b.n	801b0e0 <_printf_common+0xa8>
 801b0ce:	2301      	movs	r3, #1
 801b0d0:	4652      	mov	r2, sl
 801b0d2:	4649      	mov	r1, r9
 801b0d4:	4638      	mov	r0, r7
 801b0d6:	47c0      	blx	r8
 801b0d8:	3001      	adds	r0, #1
 801b0da:	d103      	bne.n	801b0e4 <_printf_common+0xac>
 801b0dc:	f04f 30ff 	mov.w	r0, #4294967295
 801b0e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b0e4:	3501      	adds	r5, #1
 801b0e6:	e7c6      	b.n	801b076 <_printf_common+0x3e>
 801b0e8:	18e1      	adds	r1, r4, r3
 801b0ea:	1c5a      	adds	r2, r3, #1
 801b0ec:	2030      	movs	r0, #48	; 0x30
 801b0ee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801b0f2:	4422      	add	r2, r4
 801b0f4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801b0f8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801b0fc:	3302      	adds	r3, #2
 801b0fe:	e7c7      	b.n	801b090 <_printf_common+0x58>
 801b100:	2301      	movs	r3, #1
 801b102:	4622      	mov	r2, r4
 801b104:	4649      	mov	r1, r9
 801b106:	4638      	mov	r0, r7
 801b108:	47c0      	blx	r8
 801b10a:	3001      	adds	r0, #1
 801b10c:	d0e6      	beq.n	801b0dc <_printf_common+0xa4>
 801b10e:	3601      	adds	r6, #1
 801b110:	e7d9      	b.n	801b0c6 <_printf_common+0x8e>
	...

0801b114 <_printf_i>:
 801b114:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801b118:	460c      	mov	r4, r1
 801b11a:	4691      	mov	r9, r2
 801b11c:	7e27      	ldrb	r7, [r4, #24]
 801b11e:	990c      	ldr	r1, [sp, #48]	; 0x30
 801b120:	2f78      	cmp	r7, #120	; 0x78
 801b122:	4680      	mov	r8, r0
 801b124:	469a      	mov	sl, r3
 801b126:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801b12a:	d807      	bhi.n	801b13c <_printf_i+0x28>
 801b12c:	2f62      	cmp	r7, #98	; 0x62
 801b12e:	d80a      	bhi.n	801b146 <_printf_i+0x32>
 801b130:	2f00      	cmp	r7, #0
 801b132:	f000 80d8 	beq.w	801b2e6 <_printf_i+0x1d2>
 801b136:	2f58      	cmp	r7, #88	; 0x58
 801b138:	f000 80a3 	beq.w	801b282 <_printf_i+0x16e>
 801b13c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801b140:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801b144:	e03a      	b.n	801b1bc <_printf_i+0xa8>
 801b146:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801b14a:	2b15      	cmp	r3, #21
 801b14c:	d8f6      	bhi.n	801b13c <_printf_i+0x28>
 801b14e:	a001      	add	r0, pc, #4	; (adr r0, 801b154 <_printf_i+0x40>)
 801b150:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 801b154:	0801b1ad 	.word	0x0801b1ad
 801b158:	0801b1c1 	.word	0x0801b1c1
 801b15c:	0801b13d 	.word	0x0801b13d
 801b160:	0801b13d 	.word	0x0801b13d
 801b164:	0801b13d 	.word	0x0801b13d
 801b168:	0801b13d 	.word	0x0801b13d
 801b16c:	0801b1c1 	.word	0x0801b1c1
 801b170:	0801b13d 	.word	0x0801b13d
 801b174:	0801b13d 	.word	0x0801b13d
 801b178:	0801b13d 	.word	0x0801b13d
 801b17c:	0801b13d 	.word	0x0801b13d
 801b180:	0801b2cd 	.word	0x0801b2cd
 801b184:	0801b1f1 	.word	0x0801b1f1
 801b188:	0801b2af 	.word	0x0801b2af
 801b18c:	0801b13d 	.word	0x0801b13d
 801b190:	0801b13d 	.word	0x0801b13d
 801b194:	0801b2ef 	.word	0x0801b2ef
 801b198:	0801b13d 	.word	0x0801b13d
 801b19c:	0801b1f1 	.word	0x0801b1f1
 801b1a0:	0801b13d 	.word	0x0801b13d
 801b1a4:	0801b13d 	.word	0x0801b13d
 801b1a8:	0801b2b7 	.word	0x0801b2b7
 801b1ac:	680b      	ldr	r3, [r1, #0]
 801b1ae:	1d1a      	adds	r2, r3, #4
 801b1b0:	681b      	ldr	r3, [r3, #0]
 801b1b2:	600a      	str	r2, [r1, #0]
 801b1b4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801b1b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801b1bc:	2301      	movs	r3, #1
 801b1be:	e0a3      	b.n	801b308 <_printf_i+0x1f4>
 801b1c0:	6825      	ldr	r5, [r4, #0]
 801b1c2:	6808      	ldr	r0, [r1, #0]
 801b1c4:	062e      	lsls	r6, r5, #24
 801b1c6:	f100 0304 	add.w	r3, r0, #4
 801b1ca:	d50a      	bpl.n	801b1e2 <_printf_i+0xce>
 801b1cc:	6805      	ldr	r5, [r0, #0]
 801b1ce:	600b      	str	r3, [r1, #0]
 801b1d0:	2d00      	cmp	r5, #0
 801b1d2:	da03      	bge.n	801b1dc <_printf_i+0xc8>
 801b1d4:	232d      	movs	r3, #45	; 0x2d
 801b1d6:	426d      	negs	r5, r5
 801b1d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b1dc:	485e      	ldr	r0, [pc, #376]	; (801b358 <_printf_i+0x244>)
 801b1de:	230a      	movs	r3, #10
 801b1e0:	e019      	b.n	801b216 <_printf_i+0x102>
 801b1e2:	f015 0f40 	tst.w	r5, #64	; 0x40
 801b1e6:	6805      	ldr	r5, [r0, #0]
 801b1e8:	600b      	str	r3, [r1, #0]
 801b1ea:	bf18      	it	ne
 801b1ec:	b22d      	sxthne	r5, r5
 801b1ee:	e7ef      	b.n	801b1d0 <_printf_i+0xbc>
 801b1f0:	680b      	ldr	r3, [r1, #0]
 801b1f2:	6825      	ldr	r5, [r4, #0]
 801b1f4:	1d18      	adds	r0, r3, #4
 801b1f6:	6008      	str	r0, [r1, #0]
 801b1f8:	0628      	lsls	r0, r5, #24
 801b1fa:	d501      	bpl.n	801b200 <_printf_i+0xec>
 801b1fc:	681d      	ldr	r5, [r3, #0]
 801b1fe:	e002      	b.n	801b206 <_printf_i+0xf2>
 801b200:	0669      	lsls	r1, r5, #25
 801b202:	d5fb      	bpl.n	801b1fc <_printf_i+0xe8>
 801b204:	881d      	ldrh	r5, [r3, #0]
 801b206:	4854      	ldr	r0, [pc, #336]	; (801b358 <_printf_i+0x244>)
 801b208:	2f6f      	cmp	r7, #111	; 0x6f
 801b20a:	bf0c      	ite	eq
 801b20c:	2308      	moveq	r3, #8
 801b20e:	230a      	movne	r3, #10
 801b210:	2100      	movs	r1, #0
 801b212:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801b216:	6866      	ldr	r6, [r4, #4]
 801b218:	60a6      	str	r6, [r4, #8]
 801b21a:	2e00      	cmp	r6, #0
 801b21c:	bfa2      	ittt	ge
 801b21e:	6821      	ldrge	r1, [r4, #0]
 801b220:	f021 0104 	bicge.w	r1, r1, #4
 801b224:	6021      	strge	r1, [r4, #0]
 801b226:	b90d      	cbnz	r5, 801b22c <_printf_i+0x118>
 801b228:	2e00      	cmp	r6, #0
 801b22a:	d04d      	beq.n	801b2c8 <_printf_i+0x1b4>
 801b22c:	4616      	mov	r6, r2
 801b22e:	fbb5 f1f3 	udiv	r1, r5, r3
 801b232:	fb03 5711 	mls	r7, r3, r1, r5
 801b236:	5dc7      	ldrb	r7, [r0, r7]
 801b238:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801b23c:	462f      	mov	r7, r5
 801b23e:	42bb      	cmp	r3, r7
 801b240:	460d      	mov	r5, r1
 801b242:	d9f4      	bls.n	801b22e <_printf_i+0x11a>
 801b244:	2b08      	cmp	r3, #8
 801b246:	d10b      	bne.n	801b260 <_printf_i+0x14c>
 801b248:	6823      	ldr	r3, [r4, #0]
 801b24a:	07df      	lsls	r7, r3, #31
 801b24c:	d508      	bpl.n	801b260 <_printf_i+0x14c>
 801b24e:	6923      	ldr	r3, [r4, #16]
 801b250:	6861      	ldr	r1, [r4, #4]
 801b252:	4299      	cmp	r1, r3
 801b254:	bfde      	ittt	le
 801b256:	2330      	movle	r3, #48	; 0x30
 801b258:	f806 3c01 	strble.w	r3, [r6, #-1]
 801b25c:	f106 36ff 	addle.w	r6, r6, #4294967295
 801b260:	1b92      	subs	r2, r2, r6
 801b262:	6122      	str	r2, [r4, #16]
 801b264:	f8cd a000 	str.w	sl, [sp]
 801b268:	464b      	mov	r3, r9
 801b26a:	aa03      	add	r2, sp, #12
 801b26c:	4621      	mov	r1, r4
 801b26e:	4640      	mov	r0, r8
 801b270:	f7ff fee2 	bl	801b038 <_printf_common>
 801b274:	3001      	adds	r0, #1
 801b276:	d14c      	bne.n	801b312 <_printf_i+0x1fe>
 801b278:	f04f 30ff 	mov.w	r0, #4294967295
 801b27c:	b004      	add	sp, #16
 801b27e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b282:	4835      	ldr	r0, [pc, #212]	; (801b358 <_printf_i+0x244>)
 801b284:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801b288:	6823      	ldr	r3, [r4, #0]
 801b28a:	680e      	ldr	r6, [r1, #0]
 801b28c:	061f      	lsls	r7, r3, #24
 801b28e:	f856 5b04 	ldr.w	r5, [r6], #4
 801b292:	600e      	str	r6, [r1, #0]
 801b294:	d514      	bpl.n	801b2c0 <_printf_i+0x1ac>
 801b296:	07d9      	lsls	r1, r3, #31
 801b298:	bf44      	itt	mi
 801b29a:	f043 0320 	orrmi.w	r3, r3, #32
 801b29e:	6023      	strmi	r3, [r4, #0]
 801b2a0:	b91d      	cbnz	r5, 801b2aa <_printf_i+0x196>
 801b2a2:	6823      	ldr	r3, [r4, #0]
 801b2a4:	f023 0320 	bic.w	r3, r3, #32
 801b2a8:	6023      	str	r3, [r4, #0]
 801b2aa:	2310      	movs	r3, #16
 801b2ac:	e7b0      	b.n	801b210 <_printf_i+0xfc>
 801b2ae:	6823      	ldr	r3, [r4, #0]
 801b2b0:	f043 0320 	orr.w	r3, r3, #32
 801b2b4:	6023      	str	r3, [r4, #0]
 801b2b6:	2378      	movs	r3, #120	; 0x78
 801b2b8:	4828      	ldr	r0, [pc, #160]	; (801b35c <_printf_i+0x248>)
 801b2ba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801b2be:	e7e3      	b.n	801b288 <_printf_i+0x174>
 801b2c0:	065e      	lsls	r6, r3, #25
 801b2c2:	bf48      	it	mi
 801b2c4:	b2ad      	uxthmi	r5, r5
 801b2c6:	e7e6      	b.n	801b296 <_printf_i+0x182>
 801b2c8:	4616      	mov	r6, r2
 801b2ca:	e7bb      	b.n	801b244 <_printf_i+0x130>
 801b2cc:	680b      	ldr	r3, [r1, #0]
 801b2ce:	6826      	ldr	r6, [r4, #0]
 801b2d0:	6960      	ldr	r0, [r4, #20]
 801b2d2:	1d1d      	adds	r5, r3, #4
 801b2d4:	600d      	str	r5, [r1, #0]
 801b2d6:	0635      	lsls	r5, r6, #24
 801b2d8:	681b      	ldr	r3, [r3, #0]
 801b2da:	d501      	bpl.n	801b2e0 <_printf_i+0x1cc>
 801b2dc:	6018      	str	r0, [r3, #0]
 801b2de:	e002      	b.n	801b2e6 <_printf_i+0x1d2>
 801b2e0:	0671      	lsls	r1, r6, #25
 801b2e2:	d5fb      	bpl.n	801b2dc <_printf_i+0x1c8>
 801b2e4:	8018      	strh	r0, [r3, #0]
 801b2e6:	2300      	movs	r3, #0
 801b2e8:	6123      	str	r3, [r4, #16]
 801b2ea:	4616      	mov	r6, r2
 801b2ec:	e7ba      	b.n	801b264 <_printf_i+0x150>
 801b2ee:	680b      	ldr	r3, [r1, #0]
 801b2f0:	1d1a      	adds	r2, r3, #4
 801b2f2:	600a      	str	r2, [r1, #0]
 801b2f4:	681e      	ldr	r6, [r3, #0]
 801b2f6:	6862      	ldr	r2, [r4, #4]
 801b2f8:	2100      	movs	r1, #0
 801b2fa:	4630      	mov	r0, r6
 801b2fc:	f7e4 ff80 	bl	8000200 <memchr>
 801b300:	b108      	cbz	r0, 801b306 <_printf_i+0x1f2>
 801b302:	1b80      	subs	r0, r0, r6
 801b304:	6060      	str	r0, [r4, #4]
 801b306:	6863      	ldr	r3, [r4, #4]
 801b308:	6123      	str	r3, [r4, #16]
 801b30a:	2300      	movs	r3, #0
 801b30c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b310:	e7a8      	b.n	801b264 <_printf_i+0x150>
 801b312:	6923      	ldr	r3, [r4, #16]
 801b314:	4632      	mov	r2, r6
 801b316:	4649      	mov	r1, r9
 801b318:	4640      	mov	r0, r8
 801b31a:	47d0      	blx	sl
 801b31c:	3001      	adds	r0, #1
 801b31e:	d0ab      	beq.n	801b278 <_printf_i+0x164>
 801b320:	6823      	ldr	r3, [r4, #0]
 801b322:	079b      	lsls	r3, r3, #30
 801b324:	d413      	bmi.n	801b34e <_printf_i+0x23a>
 801b326:	68e0      	ldr	r0, [r4, #12]
 801b328:	9b03      	ldr	r3, [sp, #12]
 801b32a:	4298      	cmp	r0, r3
 801b32c:	bfb8      	it	lt
 801b32e:	4618      	movlt	r0, r3
 801b330:	e7a4      	b.n	801b27c <_printf_i+0x168>
 801b332:	2301      	movs	r3, #1
 801b334:	4632      	mov	r2, r6
 801b336:	4649      	mov	r1, r9
 801b338:	4640      	mov	r0, r8
 801b33a:	47d0      	blx	sl
 801b33c:	3001      	adds	r0, #1
 801b33e:	d09b      	beq.n	801b278 <_printf_i+0x164>
 801b340:	3501      	adds	r5, #1
 801b342:	68e3      	ldr	r3, [r4, #12]
 801b344:	9903      	ldr	r1, [sp, #12]
 801b346:	1a5b      	subs	r3, r3, r1
 801b348:	42ab      	cmp	r3, r5
 801b34a:	dcf2      	bgt.n	801b332 <_printf_i+0x21e>
 801b34c:	e7eb      	b.n	801b326 <_printf_i+0x212>
 801b34e:	2500      	movs	r5, #0
 801b350:	f104 0619 	add.w	r6, r4, #25
 801b354:	e7f5      	b.n	801b342 <_printf_i+0x22e>
 801b356:	bf00      	nop
 801b358:	0802406e 	.word	0x0802406e
 801b35c:	0802407f 	.word	0x0802407f

0801b360 <iprintf>:
 801b360:	b40f      	push	{r0, r1, r2, r3}
 801b362:	4b0a      	ldr	r3, [pc, #40]	; (801b38c <iprintf+0x2c>)
 801b364:	b513      	push	{r0, r1, r4, lr}
 801b366:	681c      	ldr	r4, [r3, #0]
 801b368:	b124      	cbz	r4, 801b374 <iprintf+0x14>
 801b36a:	69a3      	ldr	r3, [r4, #24]
 801b36c:	b913      	cbnz	r3, 801b374 <iprintf+0x14>
 801b36e:	4620      	mov	r0, r4
 801b370:	f001 fe94 	bl	801d09c <__sinit>
 801b374:	ab05      	add	r3, sp, #20
 801b376:	9a04      	ldr	r2, [sp, #16]
 801b378:	68a1      	ldr	r1, [r4, #8]
 801b37a:	9301      	str	r3, [sp, #4]
 801b37c:	4620      	mov	r0, r4
 801b37e:	f003 f921 	bl	801e5c4 <_vfiprintf_r>
 801b382:	b002      	add	sp, #8
 801b384:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b388:	b004      	add	sp, #16
 801b38a:	4770      	bx	lr
 801b38c:	20000084 	.word	0x20000084

0801b390 <rand>:
 801b390:	4b17      	ldr	r3, [pc, #92]	; (801b3f0 <rand+0x60>)
 801b392:	b510      	push	{r4, lr}
 801b394:	681c      	ldr	r4, [r3, #0]
 801b396:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801b398:	b9b3      	cbnz	r3, 801b3c8 <rand+0x38>
 801b39a:	2018      	movs	r0, #24
 801b39c:	f7ff fa7e 	bl	801a89c <malloc>
 801b3a0:	63a0      	str	r0, [r4, #56]	; 0x38
 801b3a2:	b928      	cbnz	r0, 801b3b0 <rand+0x20>
 801b3a4:	4602      	mov	r2, r0
 801b3a6:	4b13      	ldr	r3, [pc, #76]	; (801b3f4 <rand+0x64>)
 801b3a8:	4813      	ldr	r0, [pc, #76]	; (801b3f8 <rand+0x68>)
 801b3aa:	214e      	movs	r1, #78	; 0x4e
 801b3ac:	f000 ff80 	bl	801c2b0 <__assert_func>
 801b3b0:	4a12      	ldr	r2, [pc, #72]	; (801b3fc <rand+0x6c>)
 801b3b2:	4b13      	ldr	r3, [pc, #76]	; (801b400 <rand+0x70>)
 801b3b4:	e9c0 2300 	strd	r2, r3, [r0]
 801b3b8:	4b12      	ldr	r3, [pc, #72]	; (801b404 <rand+0x74>)
 801b3ba:	6083      	str	r3, [r0, #8]
 801b3bc:	230b      	movs	r3, #11
 801b3be:	8183      	strh	r3, [r0, #12]
 801b3c0:	2201      	movs	r2, #1
 801b3c2:	2300      	movs	r3, #0
 801b3c4:	e9c0 2304 	strd	r2, r3, [r0, #16]
 801b3c8:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801b3ca:	480f      	ldr	r0, [pc, #60]	; (801b408 <rand+0x78>)
 801b3cc:	690a      	ldr	r2, [r1, #16]
 801b3ce:	694b      	ldr	r3, [r1, #20]
 801b3d0:	4c0e      	ldr	r4, [pc, #56]	; (801b40c <rand+0x7c>)
 801b3d2:	4350      	muls	r0, r2
 801b3d4:	fb04 0003 	mla	r0, r4, r3, r0
 801b3d8:	fba2 3404 	umull	r3, r4, r2, r4
 801b3dc:	1c5a      	adds	r2, r3, #1
 801b3de:	4404      	add	r4, r0
 801b3e0:	f144 0000 	adc.w	r0, r4, #0
 801b3e4:	e9c1 2004 	strd	r2, r0, [r1, #16]
 801b3e8:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801b3ec:	bd10      	pop	{r4, pc}
 801b3ee:	bf00      	nop
 801b3f0:	20000084 	.word	0x20000084
 801b3f4:	08024090 	.word	0x08024090
 801b3f8:	080240a7 	.word	0x080240a7
 801b3fc:	abcd330e 	.word	0xabcd330e
 801b400:	e66d1234 	.word	0xe66d1234
 801b404:	0005deec 	.word	0x0005deec
 801b408:	5851f42d 	.word	0x5851f42d
 801b40c:	4c957f2d 	.word	0x4c957f2d

0801b410 <_sbrk_r>:
 801b410:	b538      	push	{r3, r4, r5, lr}
 801b412:	4d06      	ldr	r5, [pc, #24]	; (801b42c <_sbrk_r+0x1c>)
 801b414:	2300      	movs	r3, #0
 801b416:	4604      	mov	r4, r0
 801b418:	4608      	mov	r0, r1
 801b41a:	602b      	str	r3, [r5, #0]
 801b41c:	f7e8 fbbc 	bl	8003b98 <_sbrk>
 801b420:	1c43      	adds	r3, r0, #1
 801b422:	d102      	bne.n	801b42a <_sbrk_r+0x1a>
 801b424:	682b      	ldr	r3, [r5, #0]
 801b426:	b103      	cbz	r3, 801b42a <_sbrk_r+0x1a>
 801b428:	6023      	str	r3, [r4, #0]
 801b42a:	bd38      	pop	{r3, r4, r5, pc}
 801b42c:	20007674 	.word	0x20007674

0801b430 <sniprintf>:
 801b430:	b40c      	push	{r2, r3}
 801b432:	b530      	push	{r4, r5, lr}
 801b434:	4b17      	ldr	r3, [pc, #92]	; (801b494 <sniprintf+0x64>)
 801b436:	1e0c      	subs	r4, r1, #0
 801b438:	681d      	ldr	r5, [r3, #0]
 801b43a:	b09d      	sub	sp, #116	; 0x74
 801b43c:	da08      	bge.n	801b450 <sniprintf+0x20>
 801b43e:	238b      	movs	r3, #139	; 0x8b
 801b440:	602b      	str	r3, [r5, #0]
 801b442:	f04f 30ff 	mov.w	r0, #4294967295
 801b446:	b01d      	add	sp, #116	; 0x74
 801b448:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801b44c:	b002      	add	sp, #8
 801b44e:	4770      	bx	lr
 801b450:	f44f 7302 	mov.w	r3, #520	; 0x208
 801b454:	f8ad 3014 	strh.w	r3, [sp, #20]
 801b458:	bf14      	ite	ne
 801b45a:	f104 33ff 	addne.w	r3, r4, #4294967295
 801b45e:	4623      	moveq	r3, r4
 801b460:	9304      	str	r3, [sp, #16]
 801b462:	9307      	str	r3, [sp, #28]
 801b464:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801b468:	9002      	str	r0, [sp, #8]
 801b46a:	9006      	str	r0, [sp, #24]
 801b46c:	f8ad 3016 	strh.w	r3, [sp, #22]
 801b470:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801b472:	ab21      	add	r3, sp, #132	; 0x84
 801b474:	a902      	add	r1, sp, #8
 801b476:	4628      	mov	r0, r5
 801b478:	9301      	str	r3, [sp, #4]
 801b47a:	f002 ff79 	bl	801e370 <_svfiprintf_r>
 801b47e:	1c43      	adds	r3, r0, #1
 801b480:	bfbc      	itt	lt
 801b482:	238b      	movlt	r3, #139	; 0x8b
 801b484:	602b      	strlt	r3, [r5, #0]
 801b486:	2c00      	cmp	r4, #0
 801b488:	d0dd      	beq.n	801b446 <sniprintf+0x16>
 801b48a:	9b02      	ldr	r3, [sp, #8]
 801b48c:	2200      	movs	r2, #0
 801b48e:	701a      	strb	r2, [r3, #0]
 801b490:	e7d9      	b.n	801b446 <sniprintf+0x16>
 801b492:	bf00      	nop
 801b494:	20000084 	.word	0x20000084

0801b498 <siprintf>:
 801b498:	b40e      	push	{r1, r2, r3}
 801b49a:	b500      	push	{lr}
 801b49c:	b09c      	sub	sp, #112	; 0x70
 801b49e:	ab1d      	add	r3, sp, #116	; 0x74
 801b4a0:	9002      	str	r0, [sp, #8]
 801b4a2:	9006      	str	r0, [sp, #24]
 801b4a4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801b4a8:	4809      	ldr	r0, [pc, #36]	; (801b4d0 <siprintf+0x38>)
 801b4aa:	9107      	str	r1, [sp, #28]
 801b4ac:	9104      	str	r1, [sp, #16]
 801b4ae:	4909      	ldr	r1, [pc, #36]	; (801b4d4 <siprintf+0x3c>)
 801b4b0:	f853 2b04 	ldr.w	r2, [r3], #4
 801b4b4:	9105      	str	r1, [sp, #20]
 801b4b6:	6800      	ldr	r0, [r0, #0]
 801b4b8:	9301      	str	r3, [sp, #4]
 801b4ba:	a902      	add	r1, sp, #8
 801b4bc:	f002 ff58 	bl	801e370 <_svfiprintf_r>
 801b4c0:	9b02      	ldr	r3, [sp, #8]
 801b4c2:	2200      	movs	r2, #0
 801b4c4:	701a      	strb	r2, [r3, #0]
 801b4c6:	b01c      	add	sp, #112	; 0x70
 801b4c8:	f85d eb04 	ldr.w	lr, [sp], #4
 801b4cc:	b003      	add	sp, #12
 801b4ce:	4770      	bx	lr
 801b4d0:	20000084 	.word	0x20000084
 801b4d4:	ffff0208 	.word	0xffff0208

0801b4d8 <strncmp>:
 801b4d8:	b510      	push	{r4, lr}
 801b4da:	b16a      	cbz	r2, 801b4f8 <strncmp+0x20>
 801b4dc:	3901      	subs	r1, #1
 801b4de:	1884      	adds	r4, r0, r2
 801b4e0:	f810 3b01 	ldrb.w	r3, [r0], #1
 801b4e4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801b4e8:	4293      	cmp	r3, r2
 801b4ea:	d103      	bne.n	801b4f4 <strncmp+0x1c>
 801b4ec:	42a0      	cmp	r0, r4
 801b4ee:	d001      	beq.n	801b4f4 <strncmp+0x1c>
 801b4f0:	2b00      	cmp	r3, #0
 801b4f2:	d1f5      	bne.n	801b4e0 <strncmp+0x8>
 801b4f4:	1a98      	subs	r0, r3, r2
 801b4f6:	bd10      	pop	{r4, pc}
 801b4f8:	4610      	mov	r0, r2
 801b4fa:	e7fc      	b.n	801b4f6 <strncmp+0x1e>

0801b4fc <strstr>:
 801b4fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b4fe:	780c      	ldrb	r4, [r1, #0]
 801b500:	b164      	cbz	r4, 801b51c <strstr+0x20>
 801b502:	4603      	mov	r3, r0
 801b504:	781a      	ldrb	r2, [r3, #0]
 801b506:	4618      	mov	r0, r3
 801b508:	1c5e      	adds	r6, r3, #1
 801b50a:	b90a      	cbnz	r2, 801b510 <strstr+0x14>
 801b50c:	4610      	mov	r0, r2
 801b50e:	e005      	b.n	801b51c <strstr+0x20>
 801b510:	4294      	cmp	r4, r2
 801b512:	d108      	bne.n	801b526 <strstr+0x2a>
 801b514:	460d      	mov	r5, r1
 801b516:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 801b51a:	b902      	cbnz	r2, 801b51e <strstr+0x22>
 801b51c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b51e:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 801b522:	4297      	cmp	r7, r2
 801b524:	d0f7      	beq.n	801b516 <strstr+0x1a>
 801b526:	4633      	mov	r3, r6
 801b528:	e7ec      	b.n	801b504 <strstr+0x8>

0801b52a <sulp>:
 801b52a:	b570      	push	{r4, r5, r6, lr}
 801b52c:	4604      	mov	r4, r0
 801b52e:	460d      	mov	r5, r1
 801b530:	ec45 4b10 	vmov	d0, r4, r5
 801b534:	4616      	mov	r6, r2
 801b536:	f002 fd61 	bl	801dffc <__ulp>
 801b53a:	ec51 0b10 	vmov	r0, r1, d0
 801b53e:	b17e      	cbz	r6, 801b560 <sulp+0x36>
 801b540:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801b544:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801b548:	2b00      	cmp	r3, #0
 801b54a:	dd09      	ble.n	801b560 <sulp+0x36>
 801b54c:	051b      	lsls	r3, r3, #20
 801b54e:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 801b552:	2400      	movs	r4, #0
 801b554:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 801b558:	4622      	mov	r2, r4
 801b55a:	462b      	mov	r3, r5
 801b55c:	f7e5 f85c 	bl	8000618 <__aeabi_dmul>
 801b560:	bd70      	pop	{r4, r5, r6, pc}
 801b562:	0000      	movs	r0, r0
 801b564:	0000      	movs	r0, r0
	...

0801b568 <_strtod_l>:
 801b568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b56c:	b0a3      	sub	sp, #140	; 0x8c
 801b56e:	461f      	mov	r7, r3
 801b570:	2300      	movs	r3, #0
 801b572:	931e      	str	r3, [sp, #120]	; 0x78
 801b574:	4ba4      	ldr	r3, [pc, #656]	; (801b808 <_strtod_l+0x2a0>)
 801b576:	9219      	str	r2, [sp, #100]	; 0x64
 801b578:	681b      	ldr	r3, [r3, #0]
 801b57a:	9307      	str	r3, [sp, #28]
 801b57c:	4604      	mov	r4, r0
 801b57e:	4618      	mov	r0, r3
 801b580:	4688      	mov	r8, r1
 801b582:	f7e4 fe2f 	bl	80001e4 <strlen>
 801b586:	f04f 0a00 	mov.w	sl, #0
 801b58a:	4605      	mov	r5, r0
 801b58c:	f04f 0b00 	mov.w	fp, #0
 801b590:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 801b594:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801b596:	781a      	ldrb	r2, [r3, #0]
 801b598:	2a2b      	cmp	r2, #43	; 0x2b
 801b59a:	d04c      	beq.n	801b636 <_strtod_l+0xce>
 801b59c:	d839      	bhi.n	801b612 <_strtod_l+0xaa>
 801b59e:	2a0d      	cmp	r2, #13
 801b5a0:	d832      	bhi.n	801b608 <_strtod_l+0xa0>
 801b5a2:	2a08      	cmp	r2, #8
 801b5a4:	d832      	bhi.n	801b60c <_strtod_l+0xa4>
 801b5a6:	2a00      	cmp	r2, #0
 801b5a8:	d03c      	beq.n	801b624 <_strtod_l+0xbc>
 801b5aa:	2300      	movs	r3, #0
 801b5ac:	930e      	str	r3, [sp, #56]	; 0x38
 801b5ae:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 801b5b0:	7833      	ldrb	r3, [r6, #0]
 801b5b2:	2b30      	cmp	r3, #48	; 0x30
 801b5b4:	f040 80b4 	bne.w	801b720 <_strtod_l+0x1b8>
 801b5b8:	7873      	ldrb	r3, [r6, #1]
 801b5ba:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801b5be:	2b58      	cmp	r3, #88	; 0x58
 801b5c0:	d16c      	bne.n	801b69c <_strtod_l+0x134>
 801b5c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b5c4:	9301      	str	r3, [sp, #4]
 801b5c6:	ab1e      	add	r3, sp, #120	; 0x78
 801b5c8:	9702      	str	r7, [sp, #8]
 801b5ca:	9300      	str	r3, [sp, #0]
 801b5cc:	4a8f      	ldr	r2, [pc, #572]	; (801b80c <_strtod_l+0x2a4>)
 801b5ce:	ab1f      	add	r3, sp, #124	; 0x7c
 801b5d0:	a91d      	add	r1, sp, #116	; 0x74
 801b5d2:	4620      	mov	r0, r4
 801b5d4:	f001 fe78 	bl	801d2c8 <__gethex>
 801b5d8:	f010 0707 	ands.w	r7, r0, #7
 801b5dc:	4605      	mov	r5, r0
 801b5de:	d005      	beq.n	801b5ec <_strtod_l+0x84>
 801b5e0:	2f06      	cmp	r7, #6
 801b5e2:	d12a      	bne.n	801b63a <_strtod_l+0xd2>
 801b5e4:	3601      	adds	r6, #1
 801b5e6:	2300      	movs	r3, #0
 801b5e8:	961d      	str	r6, [sp, #116]	; 0x74
 801b5ea:	930e      	str	r3, [sp, #56]	; 0x38
 801b5ec:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801b5ee:	2b00      	cmp	r3, #0
 801b5f0:	f040 8596 	bne.w	801c120 <_strtod_l+0xbb8>
 801b5f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b5f6:	b1db      	cbz	r3, 801b630 <_strtod_l+0xc8>
 801b5f8:	4652      	mov	r2, sl
 801b5fa:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801b5fe:	ec43 2b10 	vmov	d0, r2, r3
 801b602:	b023      	add	sp, #140	; 0x8c
 801b604:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b608:	2a20      	cmp	r2, #32
 801b60a:	d1ce      	bne.n	801b5aa <_strtod_l+0x42>
 801b60c:	3301      	adds	r3, #1
 801b60e:	931d      	str	r3, [sp, #116]	; 0x74
 801b610:	e7c0      	b.n	801b594 <_strtod_l+0x2c>
 801b612:	2a2d      	cmp	r2, #45	; 0x2d
 801b614:	d1c9      	bne.n	801b5aa <_strtod_l+0x42>
 801b616:	2201      	movs	r2, #1
 801b618:	920e      	str	r2, [sp, #56]	; 0x38
 801b61a:	1c5a      	adds	r2, r3, #1
 801b61c:	921d      	str	r2, [sp, #116]	; 0x74
 801b61e:	785b      	ldrb	r3, [r3, #1]
 801b620:	2b00      	cmp	r3, #0
 801b622:	d1c4      	bne.n	801b5ae <_strtod_l+0x46>
 801b624:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801b626:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 801b62a:	2b00      	cmp	r3, #0
 801b62c:	f040 8576 	bne.w	801c11c <_strtod_l+0xbb4>
 801b630:	4652      	mov	r2, sl
 801b632:	465b      	mov	r3, fp
 801b634:	e7e3      	b.n	801b5fe <_strtod_l+0x96>
 801b636:	2200      	movs	r2, #0
 801b638:	e7ee      	b.n	801b618 <_strtod_l+0xb0>
 801b63a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801b63c:	b13a      	cbz	r2, 801b64e <_strtod_l+0xe6>
 801b63e:	2135      	movs	r1, #53	; 0x35
 801b640:	a820      	add	r0, sp, #128	; 0x80
 801b642:	f002 fde6 	bl	801e212 <__copybits>
 801b646:	991e      	ldr	r1, [sp, #120]	; 0x78
 801b648:	4620      	mov	r0, r4
 801b64a:	f002 f9ab 	bl	801d9a4 <_Bfree>
 801b64e:	3f01      	subs	r7, #1
 801b650:	2f05      	cmp	r7, #5
 801b652:	d807      	bhi.n	801b664 <_strtod_l+0xfc>
 801b654:	e8df f007 	tbb	[pc, r7]
 801b658:	1d180b0e 	.word	0x1d180b0e
 801b65c:	030e      	.short	0x030e
 801b65e:	f04f 0b00 	mov.w	fp, #0
 801b662:	46da      	mov	sl, fp
 801b664:	0728      	lsls	r0, r5, #28
 801b666:	d5c1      	bpl.n	801b5ec <_strtod_l+0x84>
 801b668:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 801b66c:	e7be      	b.n	801b5ec <_strtod_l+0x84>
 801b66e:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 801b672:	e7f7      	b.n	801b664 <_strtod_l+0xfc>
 801b674:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 801b678:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801b67a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801b67e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801b682:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801b686:	e7ed      	b.n	801b664 <_strtod_l+0xfc>
 801b688:	f8df b184 	ldr.w	fp, [pc, #388]	; 801b810 <_strtod_l+0x2a8>
 801b68c:	f04f 0a00 	mov.w	sl, #0
 801b690:	e7e8      	b.n	801b664 <_strtod_l+0xfc>
 801b692:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 801b696:	f04f 3aff 	mov.w	sl, #4294967295
 801b69a:	e7e3      	b.n	801b664 <_strtod_l+0xfc>
 801b69c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801b69e:	1c5a      	adds	r2, r3, #1
 801b6a0:	921d      	str	r2, [sp, #116]	; 0x74
 801b6a2:	785b      	ldrb	r3, [r3, #1]
 801b6a4:	2b30      	cmp	r3, #48	; 0x30
 801b6a6:	d0f9      	beq.n	801b69c <_strtod_l+0x134>
 801b6a8:	2b00      	cmp	r3, #0
 801b6aa:	d09f      	beq.n	801b5ec <_strtod_l+0x84>
 801b6ac:	2301      	movs	r3, #1
 801b6ae:	f04f 0900 	mov.w	r9, #0
 801b6b2:	9304      	str	r3, [sp, #16]
 801b6b4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801b6b6:	930a      	str	r3, [sp, #40]	; 0x28
 801b6b8:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 801b6bc:	464f      	mov	r7, r9
 801b6be:	220a      	movs	r2, #10
 801b6c0:	981d      	ldr	r0, [sp, #116]	; 0x74
 801b6c2:	7806      	ldrb	r6, [r0, #0]
 801b6c4:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 801b6c8:	b2d9      	uxtb	r1, r3
 801b6ca:	2909      	cmp	r1, #9
 801b6cc:	d92a      	bls.n	801b724 <_strtod_l+0x1bc>
 801b6ce:	9907      	ldr	r1, [sp, #28]
 801b6d0:	462a      	mov	r2, r5
 801b6d2:	f7ff ff01 	bl	801b4d8 <strncmp>
 801b6d6:	b398      	cbz	r0, 801b740 <_strtod_l+0x1d8>
 801b6d8:	2000      	movs	r0, #0
 801b6da:	4633      	mov	r3, r6
 801b6dc:	463d      	mov	r5, r7
 801b6de:	9007      	str	r0, [sp, #28]
 801b6e0:	4602      	mov	r2, r0
 801b6e2:	2b65      	cmp	r3, #101	; 0x65
 801b6e4:	d001      	beq.n	801b6ea <_strtod_l+0x182>
 801b6e6:	2b45      	cmp	r3, #69	; 0x45
 801b6e8:	d118      	bne.n	801b71c <_strtod_l+0x1b4>
 801b6ea:	b91d      	cbnz	r5, 801b6f4 <_strtod_l+0x18c>
 801b6ec:	9b04      	ldr	r3, [sp, #16]
 801b6ee:	4303      	orrs	r3, r0
 801b6f0:	d098      	beq.n	801b624 <_strtod_l+0xbc>
 801b6f2:	2500      	movs	r5, #0
 801b6f4:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 801b6f8:	f108 0301 	add.w	r3, r8, #1
 801b6fc:	931d      	str	r3, [sp, #116]	; 0x74
 801b6fe:	f898 3001 	ldrb.w	r3, [r8, #1]
 801b702:	2b2b      	cmp	r3, #43	; 0x2b
 801b704:	d075      	beq.n	801b7f2 <_strtod_l+0x28a>
 801b706:	2b2d      	cmp	r3, #45	; 0x2d
 801b708:	d07b      	beq.n	801b802 <_strtod_l+0x29a>
 801b70a:	f04f 0c00 	mov.w	ip, #0
 801b70e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 801b712:	2909      	cmp	r1, #9
 801b714:	f240 8082 	bls.w	801b81c <_strtod_l+0x2b4>
 801b718:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 801b71c:	2600      	movs	r6, #0
 801b71e:	e09d      	b.n	801b85c <_strtod_l+0x2f4>
 801b720:	2300      	movs	r3, #0
 801b722:	e7c4      	b.n	801b6ae <_strtod_l+0x146>
 801b724:	2f08      	cmp	r7, #8
 801b726:	bfd8      	it	le
 801b728:	9909      	ldrle	r1, [sp, #36]	; 0x24
 801b72a:	f100 0001 	add.w	r0, r0, #1
 801b72e:	bfda      	itte	le
 801b730:	fb02 3301 	mlale	r3, r2, r1, r3
 801b734:	9309      	strle	r3, [sp, #36]	; 0x24
 801b736:	fb02 3909 	mlagt	r9, r2, r9, r3
 801b73a:	3701      	adds	r7, #1
 801b73c:	901d      	str	r0, [sp, #116]	; 0x74
 801b73e:	e7bf      	b.n	801b6c0 <_strtod_l+0x158>
 801b740:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801b742:	195a      	adds	r2, r3, r5
 801b744:	921d      	str	r2, [sp, #116]	; 0x74
 801b746:	5d5b      	ldrb	r3, [r3, r5]
 801b748:	2f00      	cmp	r7, #0
 801b74a:	d037      	beq.n	801b7bc <_strtod_l+0x254>
 801b74c:	9007      	str	r0, [sp, #28]
 801b74e:	463d      	mov	r5, r7
 801b750:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 801b754:	2a09      	cmp	r2, #9
 801b756:	d912      	bls.n	801b77e <_strtod_l+0x216>
 801b758:	2201      	movs	r2, #1
 801b75a:	e7c2      	b.n	801b6e2 <_strtod_l+0x17a>
 801b75c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801b75e:	1c5a      	adds	r2, r3, #1
 801b760:	921d      	str	r2, [sp, #116]	; 0x74
 801b762:	785b      	ldrb	r3, [r3, #1]
 801b764:	3001      	adds	r0, #1
 801b766:	2b30      	cmp	r3, #48	; 0x30
 801b768:	d0f8      	beq.n	801b75c <_strtod_l+0x1f4>
 801b76a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 801b76e:	2a08      	cmp	r2, #8
 801b770:	f200 84db 	bhi.w	801c12a <_strtod_l+0xbc2>
 801b774:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801b776:	9007      	str	r0, [sp, #28]
 801b778:	2000      	movs	r0, #0
 801b77a:	920a      	str	r2, [sp, #40]	; 0x28
 801b77c:	4605      	mov	r5, r0
 801b77e:	3b30      	subs	r3, #48	; 0x30
 801b780:	f100 0201 	add.w	r2, r0, #1
 801b784:	d014      	beq.n	801b7b0 <_strtod_l+0x248>
 801b786:	9907      	ldr	r1, [sp, #28]
 801b788:	4411      	add	r1, r2
 801b78a:	9107      	str	r1, [sp, #28]
 801b78c:	462a      	mov	r2, r5
 801b78e:	eb00 0e05 	add.w	lr, r0, r5
 801b792:	210a      	movs	r1, #10
 801b794:	4572      	cmp	r2, lr
 801b796:	d113      	bne.n	801b7c0 <_strtod_l+0x258>
 801b798:	182a      	adds	r2, r5, r0
 801b79a:	2a08      	cmp	r2, #8
 801b79c:	f105 0501 	add.w	r5, r5, #1
 801b7a0:	4405      	add	r5, r0
 801b7a2:	dc1c      	bgt.n	801b7de <_strtod_l+0x276>
 801b7a4:	9909      	ldr	r1, [sp, #36]	; 0x24
 801b7a6:	220a      	movs	r2, #10
 801b7a8:	fb02 3301 	mla	r3, r2, r1, r3
 801b7ac:	9309      	str	r3, [sp, #36]	; 0x24
 801b7ae:	2200      	movs	r2, #0
 801b7b0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801b7b2:	1c59      	adds	r1, r3, #1
 801b7b4:	911d      	str	r1, [sp, #116]	; 0x74
 801b7b6:	785b      	ldrb	r3, [r3, #1]
 801b7b8:	4610      	mov	r0, r2
 801b7ba:	e7c9      	b.n	801b750 <_strtod_l+0x1e8>
 801b7bc:	4638      	mov	r0, r7
 801b7be:	e7d2      	b.n	801b766 <_strtod_l+0x1fe>
 801b7c0:	2a08      	cmp	r2, #8
 801b7c2:	dc04      	bgt.n	801b7ce <_strtod_l+0x266>
 801b7c4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 801b7c6:	434e      	muls	r6, r1
 801b7c8:	9609      	str	r6, [sp, #36]	; 0x24
 801b7ca:	3201      	adds	r2, #1
 801b7cc:	e7e2      	b.n	801b794 <_strtod_l+0x22c>
 801b7ce:	f102 0c01 	add.w	ip, r2, #1
 801b7d2:	f1bc 0f10 	cmp.w	ip, #16
 801b7d6:	bfd8      	it	le
 801b7d8:	fb01 f909 	mulle.w	r9, r1, r9
 801b7dc:	e7f5      	b.n	801b7ca <_strtod_l+0x262>
 801b7de:	2d10      	cmp	r5, #16
 801b7e0:	bfdc      	itt	le
 801b7e2:	220a      	movle	r2, #10
 801b7e4:	fb02 3909 	mlale	r9, r2, r9, r3
 801b7e8:	e7e1      	b.n	801b7ae <_strtod_l+0x246>
 801b7ea:	2300      	movs	r3, #0
 801b7ec:	9307      	str	r3, [sp, #28]
 801b7ee:	2201      	movs	r2, #1
 801b7f0:	e77c      	b.n	801b6ec <_strtod_l+0x184>
 801b7f2:	f04f 0c00 	mov.w	ip, #0
 801b7f6:	f108 0302 	add.w	r3, r8, #2
 801b7fa:	931d      	str	r3, [sp, #116]	; 0x74
 801b7fc:	f898 3002 	ldrb.w	r3, [r8, #2]
 801b800:	e785      	b.n	801b70e <_strtod_l+0x1a6>
 801b802:	f04f 0c01 	mov.w	ip, #1
 801b806:	e7f6      	b.n	801b7f6 <_strtod_l+0x28e>
 801b808:	080242e0 	.word	0x080242e0
 801b80c:	08024108 	.word	0x08024108
 801b810:	7ff00000 	.word	0x7ff00000
 801b814:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801b816:	1c59      	adds	r1, r3, #1
 801b818:	911d      	str	r1, [sp, #116]	; 0x74
 801b81a:	785b      	ldrb	r3, [r3, #1]
 801b81c:	2b30      	cmp	r3, #48	; 0x30
 801b81e:	d0f9      	beq.n	801b814 <_strtod_l+0x2ac>
 801b820:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 801b824:	2908      	cmp	r1, #8
 801b826:	f63f af79 	bhi.w	801b71c <_strtod_l+0x1b4>
 801b82a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 801b82e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801b830:	9308      	str	r3, [sp, #32]
 801b832:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801b834:	1c59      	adds	r1, r3, #1
 801b836:	911d      	str	r1, [sp, #116]	; 0x74
 801b838:	785b      	ldrb	r3, [r3, #1]
 801b83a:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 801b83e:	2e09      	cmp	r6, #9
 801b840:	d937      	bls.n	801b8b2 <_strtod_l+0x34a>
 801b842:	9e08      	ldr	r6, [sp, #32]
 801b844:	1b89      	subs	r1, r1, r6
 801b846:	2908      	cmp	r1, #8
 801b848:	f644 661f 	movw	r6, #19999	; 0x4e1f
 801b84c:	dc02      	bgt.n	801b854 <_strtod_l+0x2ec>
 801b84e:	4576      	cmp	r6, lr
 801b850:	bfa8      	it	ge
 801b852:	4676      	movge	r6, lr
 801b854:	f1bc 0f00 	cmp.w	ip, #0
 801b858:	d000      	beq.n	801b85c <_strtod_l+0x2f4>
 801b85a:	4276      	negs	r6, r6
 801b85c:	2d00      	cmp	r5, #0
 801b85e:	d14f      	bne.n	801b900 <_strtod_l+0x398>
 801b860:	9904      	ldr	r1, [sp, #16]
 801b862:	4301      	orrs	r1, r0
 801b864:	f47f aec2 	bne.w	801b5ec <_strtod_l+0x84>
 801b868:	2a00      	cmp	r2, #0
 801b86a:	f47f aedb 	bne.w	801b624 <_strtod_l+0xbc>
 801b86e:	2b69      	cmp	r3, #105	; 0x69
 801b870:	d027      	beq.n	801b8c2 <_strtod_l+0x35a>
 801b872:	dc24      	bgt.n	801b8be <_strtod_l+0x356>
 801b874:	2b49      	cmp	r3, #73	; 0x49
 801b876:	d024      	beq.n	801b8c2 <_strtod_l+0x35a>
 801b878:	2b4e      	cmp	r3, #78	; 0x4e
 801b87a:	f47f aed3 	bne.w	801b624 <_strtod_l+0xbc>
 801b87e:	499e      	ldr	r1, [pc, #632]	; (801baf8 <_strtod_l+0x590>)
 801b880:	a81d      	add	r0, sp, #116	; 0x74
 801b882:	f001 ff79 	bl	801d778 <__match>
 801b886:	2800      	cmp	r0, #0
 801b888:	f43f aecc 	beq.w	801b624 <_strtod_l+0xbc>
 801b88c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801b88e:	781b      	ldrb	r3, [r3, #0]
 801b890:	2b28      	cmp	r3, #40	; 0x28
 801b892:	d12d      	bne.n	801b8f0 <_strtod_l+0x388>
 801b894:	4999      	ldr	r1, [pc, #612]	; (801bafc <_strtod_l+0x594>)
 801b896:	aa20      	add	r2, sp, #128	; 0x80
 801b898:	a81d      	add	r0, sp, #116	; 0x74
 801b89a:	f001 ff81 	bl	801d7a0 <__hexnan>
 801b89e:	2805      	cmp	r0, #5
 801b8a0:	d126      	bne.n	801b8f0 <_strtod_l+0x388>
 801b8a2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801b8a4:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 801b8a8:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 801b8ac:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 801b8b0:	e69c      	b.n	801b5ec <_strtod_l+0x84>
 801b8b2:	210a      	movs	r1, #10
 801b8b4:	fb01 3e0e 	mla	lr, r1, lr, r3
 801b8b8:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 801b8bc:	e7b9      	b.n	801b832 <_strtod_l+0x2ca>
 801b8be:	2b6e      	cmp	r3, #110	; 0x6e
 801b8c0:	e7db      	b.n	801b87a <_strtod_l+0x312>
 801b8c2:	498f      	ldr	r1, [pc, #572]	; (801bb00 <_strtod_l+0x598>)
 801b8c4:	a81d      	add	r0, sp, #116	; 0x74
 801b8c6:	f001 ff57 	bl	801d778 <__match>
 801b8ca:	2800      	cmp	r0, #0
 801b8cc:	f43f aeaa 	beq.w	801b624 <_strtod_l+0xbc>
 801b8d0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801b8d2:	498c      	ldr	r1, [pc, #560]	; (801bb04 <_strtod_l+0x59c>)
 801b8d4:	3b01      	subs	r3, #1
 801b8d6:	a81d      	add	r0, sp, #116	; 0x74
 801b8d8:	931d      	str	r3, [sp, #116]	; 0x74
 801b8da:	f001 ff4d 	bl	801d778 <__match>
 801b8de:	b910      	cbnz	r0, 801b8e6 <_strtod_l+0x37e>
 801b8e0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801b8e2:	3301      	adds	r3, #1
 801b8e4:	931d      	str	r3, [sp, #116]	; 0x74
 801b8e6:	f8df b22c 	ldr.w	fp, [pc, #556]	; 801bb14 <_strtod_l+0x5ac>
 801b8ea:	f04f 0a00 	mov.w	sl, #0
 801b8ee:	e67d      	b.n	801b5ec <_strtod_l+0x84>
 801b8f0:	4885      	ldr	r0, [pc, #532]	; (801bb08 <_strtod_l+0x5a0>)
 801b8f2:	f002 ff99 	bl	801e828 <nan>
 801b8f6:	ed8d 0b04 	vstr	d0, [sp, #16]
 801b8fa:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 801b8fe:	e675      	b.n	801b5ec <_strtod_l+0x84>
 801b900:	9b07      	ldr	r3, [sp, #28]
 801b902:	9809      	ldr	r0, [sp, #36]	; 0x24
 801b904:	1af3      	subs	r3, r6, r3
 801b906:	2f00      	cmp	r7, #0
 801b908:	bf08      	it	eq
 801b90a:	462f      	moveq	r7, r5
 801b90c:	2d10      	cmp	r5, #16
 801b90e:	9308      	str	r3, [sp, #32]
 801b910:	46a8      	mov	r8, r5
 801b912:	bfa8      	it	ge
 801b914:	f04f 0810 	movge.w	r8, #16
 801b918:	f7e4 fe04 	bl	8000524 <__aeabi_ui2d>
 801b91c:	2d09      	cmp	r5, #9
 801b91e:	4682      	mov	sl, r0
 801b920:	468b      	mov	fp, r1
 801b922:	dd13      	ble.n	801b94c <_strtod_l+0x3e4>
 801b924:	4b79      	ldr	r3, [pc, #484]	; (801bb0c <_strtod_l+0x5a4>)
 801b926:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801b92a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801b92e:	f7e4 fe73 	bl	8000618 <__aeabi_dmul>
 801b932:	4682      	mov	sl, r0
 801b934:	4648      	mov	r0, r9
 801b936:	468b      	mov	fp, r1
 801b938:	f7e4 fdf4 	bl	8000524 <__aeabi_ui2d>
 801b93c:	4602      	mov	r2, r0
 801b93e:	460b      	mov	r3, r1
 801b940:	4650      	mov	r0, sl
 801b942:	4659      	mov	r1, fp
 801b944:	f7e4 fcb2 	bl	80002ac <__adddf3>
 801b948:	4682      	mov	sl, r0
 801b94a:	468b      	mov	fp, r1
 801b94c:	2d0f      	cmp	r5, #15
 801b94e:	dc38      	bgt.n	801b9c2 <_strtod_l+0x45a>
 801b950:	9b08      	ldr	r3, [sp, #32]
 801b952:	2b00      	cmp	r3, #0
 801b954:	f43f ae4a 	beq.w	801b5ec <_strtod_l+0x84>
 801b958:	dd24      	ble.n	801b9a4 <_strtod_l+0x43c>
 801b95a:	2b16      	cmp	r3, #22
 801b95c:	dc0b      	bgt.n	801b976 <_strtod_l+0x40e>
 801b95e:	4d6b      	ldr	r5, [pc, #428]	; (801bb0c <_strtod_l+0x5a4>)
 801b960:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 801b964:	e9d5 0100 	ldrd	r0, r1, [r5]
 801b968:	4652      	mov	r2, sl
 801b96a:	465b      	mov	r3, fp
 801b96c:	f7e4 fe54 	bl	8000618 <__aeabi_dmul>
 801b970:	4682      	mov	sl, r0
 801b972:	468b      	mov	fp, r1
 801b974:	e63a      	b.n	801b5ec <_strtod_l+0x84>
 801b976:	9a08      	ldr	r2, [sp, #32]
 801b978:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 801b97c:	4293      	cmp	r3, r2
 801b97e:	db20      	blt.n	801b9c2 <_strtod_l+0x45a>
 801b980:	4c62      	ldr	r4, [pc, #392]	; (801bb0c <_strtod_l+0x5a4>)
 801b982:	f1c5 050f 	rsb	r5, r5, #15
 801b986:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 801b98a:	4652      	mov	r2, sl
 801b98c:	465b      	mov	r3, fp
 801b98e:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b992:	f7e4 fe41 	bl	8000618 <__aeabi_dmul>
 801b996:	9b08      	ldr	r3, [sp, #32]
 801b998:	1b5d      	subs	r5, r3, r5
 801b99a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 801b99e:	e9d4 2300 	ldrd	r2, r3, [r4]
 801b9a2:	e7e3      	b.n	801b96c <_strtod_l+0x404>
 801b9a4:	9b08      	ldr	r3, [sp, #32]
 801b9a6:	3316      	adds	r3, #22
 801b9a8:	db0b      	blt.n	801b9c2 <_strtod_l+0x45a>
 801b9aa:	9b07      	ldr	r3, [sp, #28]
 801b9ac:	4a57      	ldr	r2, [pc, #348]	; (801bb0c <_strtod_l+0x5a4>)
 801b9ae:	1b9e      	subs	r6, r3, r6
 801b9b0:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 801b9b4:	e9d6 2300 	ldrd	r2, r3, [r6]
 801b9b8:	4650      	mov	r0, sl
 801b9ba:	4659      	mov	r1, fp
 801b9bc:	f7e4 ff56 	bl	800086c <__aeabi_ddiv>
 801b9c0:	e7d6      	b.n	801b970 <_strtod_l+0x408>
 801b9c2:	9b08      	ldr	r3, [sp, #32]
 801b9c4:	eba5 0808 	sub.w	r8, r5, r8
 801b9c8:	4498      	add	r8, r3
 801b9ca:	f1b8 0f00 	cmp.w	r8, #0
 801b9ce:	dd71      	ble.n	801bab4 <_strtod_l+0x54c>
 801b9d0:	f018 030f 	ands.w	r3, r8, #15
 801b9d4:	d00a      	beq.n	801b9ec <_strtod_l+0x484>
 801b9d6:	494d      	ldr	r1, [pc, #308]	; (801bb0c <_strtod_l+0x5a4>)
 801b9d8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801b9dc:	4652      	mov	r2, sl
 801b9de:	465b      	mov	r3, fp
 801b9e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b9e4:	f7e4 fe18 	bl	8000618 <__aeabi_dmul>
 801b9e8:	4682      	mov	sl, r0
 801b9ea:	468b      	mov	fp, r1
 801b9ec:	f038 080f 	bics.w	r8, r8, #15
 801b9f0:	d04d      	beq.n	801ba8e <_strtod_l+0x526>
 801b9f2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 801b9f6:	dd22      	ble.n	801ba3e <_strtod_l+0x4d6>
 801b9f8:	2500      	movs	r5, #0
 801b9fa:	462e      	mov	r6, r5
 801b9fc:	9509      	str	r5, [sp, #36]	; 0x24
 801b9fe:	9507      	str	r5, [sp, #28]
 801ba00:	2322      	movs	r3, #34	; 0x22
 801ba02:	f8df b110 	ldr.w	fp, [pc, #272]	; 801bb14 <_strtod_l+0x5ac>
 801ba06:	6023      	str	r3, [r4, #0]
 801ba08:	f04f 0a00 	mov.w	sl, #0
 801ba0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ba0e:	2b00      	cmp	r3, #0
 801ba10:	f43f adec 	beq.w	801b5ec <_strtod_l+0x84>
 801ba14:	991e      	ldr	r1, [sp, #120]	; 0x78
 801ba16:	4620      	mov	r0, r4
 801ba18:	f001 ffc4 	bl	801d9a4 <_Bfree>
 801ba1c:	9907      	ldr	r1, [sp, #28]
 801ba1e:	4620      	mov	r0, r4
 801ba20:	f001 ffc0 	bl	801d9a4 <_Bfree>
 801ba24:	4631      	mov	r1, r6
 801ba26:	4620      	mov	r0, r4
 801ba28:	f001 ffbc 	bl	801d9a4 <_Bfree>
 801ba2c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801ba2e:	4620      	mov	r0, r4
 801ba30:	f001 ffb8 	bl	801d9a4 <_Bfree>
 801ba34:	4629      	mov	r1, r5
 801ba36:	4620      	mov	r0, r4
 801ba38:	f001 ffb4 	bl	801d9a4 <_Bfree>
 801ba3c:	e5d6      	b.n	801b5ec <_strtod_l+0x84>
 801ba3e:	2300      	movs	r3, #0
 801ba40:	ea4f 1828 	mov.w	r8, r8, asr #4
 801ba44:	4650      	mov	r0, sl
 801ba46:	4659      	mov	r1, fp
 801ba48:	4699      	mov	r9, r3
 801ba4a:	f1b8 0f01 	cmp.w	r8, #1
 801ba4e:	dc21      	bgt.n	801ba94 <_strtod_l+0x52c>
 801ba50:	b10b      	cbz	r3, 801ba56 <_strtod_l+0x4ee>
 801ba52:	4682      	mov	sl, r0
 801ba54:	468b      	mov	fp, r1
 801ba56:	4b2e      	ldr	r3, [pc, #184]	; (801bb10 <_strtod_l+0x5a8>)
 801ba58:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 801ba5c:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 801ba60:	4652      	mov	r2, sl
 801ba62:	465b      	mov	r3, fp
 801ba64:	e9d9 0100 	ldrd	r0, r1, [r9]
 801ba68:	f7e4 fdd6 	bl	8000618 <__aeabi_dmul>
 801ba6c:	4b29      	ldr	r3, [pc, #164]	; (801bb14 <_strtod_l+0x5ac>)
 801ba6e:	460a      	mov	r2, r1
 801ba70:	400b      	ands	r3, r1
 801ba72:	4929      	ldr	r1, [pc, #164]	; (801bb18 <_strtod_l+0x5b0>)
 801ba74:	428b      	cmp	r3, r1
 801ba76:	4682      	mov	sl, r0
 801ba78:	d8be      	bhi.n	801b9f8 <_strtod_l+0x490>
 801ba7a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801ba7e:	428b      	cmp	r3, r1
 801ba80:	bf86      	itte	hi
 801ba82:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 801bb1c <_strtod_l+0x5b4>
 801ba86:	f04f 3aff 	movhi.w	sl, #4294967295
 801ba8a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 801ba8e:	2300      	movs	r3, #0
 801ba90:	9304      	str	r3, [sp, #16]
 801ba92:	e081      	b.n	801bb98 <_strtod_l+0x630>
 801ba94:	f018 0f01 	tst.w	r8, #1
 801ba98:	d007      	beq.n	801baaa <_strtod_l+0x542>
 801ba9a:	4b1d      	ldr	r3, [pc, #116]	; (801bb10 <_strtod_l+0x5a8>)
 801ba9c:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 801baa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801baa4:	f7e4 fdb8 	bl	8000618 <__aeabi_dmul>
 801baa8:	2301      	movs	r3, #1
 801baaa:	f109 0901 	add.w	r9, r9, #1
 801baae:	ea4f 0868 	mov.w	r8, r8, asr #1
 801bab2:	e7ca      	b.n	801ba4a <_strtod_l+0x4e2>
 801bab4:	d0eb      	beq.n	801ba8e <_strtod_l+0x526>
 801bab6:	f1c8 0800 	rsb	r8, r8, #0
 801baba:	f018 020f 	ands.w	r2, r8, #15
 801babe:	d00a      	beq.n	801bad6 <_strtod_l+0x56e>
 801bac0:	4b12      	ldr	r3, [pc, #72]	; (801bb0c <_strtod_l+0x5a4>)
 801bac2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801bac6:	4650      	mov	r0, sl
 801bac8:	4659      	mov	r1, fp
 801baca:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bace:	f7e4 fecd 	bl	800086c <__aeabi_ddiv>
 801bad2:	4682      	mov	sl, r0
 801bad4:	468b      	mov	fp, r1
 801bad6:	ea5f 1828 	movs.w	r8, r8, asr #4
 801bada:	d0d8      	beq.n	801ba8e <_strtod_l+0x526>
 801badc:	f1b8 0f1f 	cmp.w	r8, #31
 801bae0:	dd1e      	ble.n	801bb20 <_strtod_l+0x5b8>
 801bae2:	2500      	movs	r5, #0
 801bae4:	462e      	mov	r6, r5
 801bae6:	9509      	str	r5, [sp, #36]	; 0x24
 801bae8:	9507      	str	r5, [sp, #28]
 801baea:	2322      	movs	r3, #34	; 0x22
 801baec:	f04f 0a00 	mov.w	sl, #0
 801baf0:	f04f 0b00 	mov.w	fp, #0
 801baf4:	6023      	str	r3, [r4, #0]
 801baf6:	e789      	b.n	801ba0c <_strtod_l+0x4a4>
 801baf8:	08024069 	.word	0x08024069
 801bafc:	0802411c 	.word	0x0802411c
 801bb00:	08024061 	.word	0x08024061
 801bb04:	08024197 	.word	0x08024197
 801bb08:	08024193 	.word	0x08024193
 801bb0c:	08024380 	.word	0x08024380
 801bb10:	08024358 	.word	0x08024358
 801bb14:	7ff00000 	.word	0x7ff00000
 801bb18:	7ca00000 	.word	0x7ca00000
 801bb1c:	7fefffff 	.word	0x7fefffff
 801bb20:	f018 0310 	ands.w	r3, r8, #16
 801bb24:	bf18      	it	ne
 801bb26:	236a      	movne	r3, #106	; 0x6a
 801bb28:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 801bee0 <_strtod_l+0x978>
 801bb2c:	9304      	str	r3, [sp, #16]
 801bb2e:	4650      	mov	r0, sl
 801bb30:	4659      	mov	r1, fp
 801bb32:	2300      	movs	r3, #0
 801bb34:	f018 0f01 	tst.w	r8, #1
 801bb38:	d004      	beq.n	801bb44 <_strtod_l+0x5dc>
 801bb3a:	e9d9 2300 	ldrd	r2, r3, [r9]
 801bb3e:	f7e4 fd6b 	bl	8000618 <__aeabi_dmul>
 801bb42:	2301      	movs	r3, #1
 801bb44:	ea5f 0868 	movs.w	r8, r8, asr #1
 801bb48:	f109 0908 	add.w	r9, r9, #8
 801bb4c:	d1f2      	bne.n	801bb34 <_strtod_l+0x5cc>
 801bb4e:	b10b      	cbz	r3, 801bb54 <_strtod_l+0x5ec>
 801bb50:	4682      	mov	sl, r0
 801bb52:	468b      	mov	fp, r1
 801bb54:	9b04      	ldr	r3, [sp, #16]
 801bb56:	b1bb      	cbz	r3, 801bb88 <_strtod_l+0x620>
 801bb58:	f3cb 530a 	ubfx	r3, fp, #20, #11
 801bb5c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801bb60:	2b00      	cmp	r3, #0
 801bb62:	4659      	mov	r1, fp
 801bb64:	dd10      	ble.n	801bb88 <_strtod_l+0x620>
 801bb66:	2b1f      	cmp	r3, #31
 801bb68:	f340 8128 	ble.w	801bdbc <_strtod_l+0x854>
 801bb6c:	2b34      	cmp	r3, #52	; 0x34
 801bb6e:	bfde      	ittt	le
 801bb70:	3b20      	suble	r3, #32
 801bb72:	f04f 32ff 	movle.w	r2, #4294967295
 801bb76:	fa02 f303 	lslle.w	r3, r2, r3
 801bb7a:	f04f 0a00 	mov.w	sl, #0
 801bb7e:	bfcc      	ite	gt
 801bb80:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 801bb84:	ea03 0b01 	andle.w	fp, r3, r1
 801bb88:	2200      	movs	r2, #0
 801bb8a:	2300      	movs	r3, #0
 801bb8c:	4650      	mov	r0, sl
 801bb8e:	4659      	mov	r1, fp
 801bb90:	f7e4 ffaa 	bl	8000ae8 <__aeabi_dcmpeq>
 801bb94:	2800      	cmp	r0, #0
 801bb96:	d1a4      	bne.n	801bae2 <_strtod_l+0x57a>
 801bb98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bb9a:	9300      	str	r3, [sp, #0]
 801bb9c:	990a      	ldr	r1, [sp, #40]	; 0x28
 801bb9e:	462b      	mov	r3, r5
 801bba0:	463a      	mov	r2, r7
 801bba2:	4620      	mov	r0, r4
 801bba4:	f001 ff6a 	bl	801da7c <__s2b>
 801bba8:	9009      	str	r0, [sp, #36]	; 0x24
 801bbaa:	2800      	cmp	r0, #0
 801bbac:	f43f af24 	beq.w	801b9f8 <_strtod_l+0x490>
 801bbb0:	9b07      	ldr	r3, [sp, #28]
 801bbb2:	1b9e      	subs	r6, r3, r6
 801bbb4:	9b08      	ldr	r3, [sp, #32]
 801bbb6:	2b00      	cmp	r3, #0
 801bbb8:	bfb4      	ite	lt
 801bbba:	4633      	movlt	r3, r6
 801bbbc:	2300      	movge	r3, #0
 801bbbe:	9310      	str	r3, [sp, #64]	; 0x40
 801bbc0:	9b08      	ldr	r3, [sp, #32]
 801bbc2:	2500      	movs	r5, #0
 801bbc4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801bbc8:	9318      	str	r3, [sp, #96]	; 0x60
 801bbca:	462e      	mov	r6, r5
 801bbcc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bbce:	4620      	mov	r0, r4
 801bbd0:	6859      	ldr	r1, [r3, #4]
 801bbd2:	f001 fea7 	bl	801d924 <_Balloc>
 801bbd6:	9007      	str	r0, [sp, #28]
 801bbd8:	2800      	cmp	r0, #0
 801bbda:	f43f af11 	beq.w	801ba00 <_strtod_l+0x498>
 801bbde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bbe0:	691a      	ldr	r2, [r3, #16]
 801bbe2:	3202      	adds	r2, #2
 801bbe4:	f103 010c 	add.w	r1, r3, #12
 801bbe8:	0092      	lsls	r2, r2, #2
 801bbea:	300c      	adds	r0, #12
 801bbec:	f7fe fe74 	bl	801a8d8 <memcpy>
 801bbf0:	ec4b ab10 	vmov	d0, sl, fp
 801bbf4:	aa20      	add	r2, sp, #128	; 0x80
 801bbf6:	a91f      	add	r1, sp, #124	; 0x7c
 801bbf8:	4620      	mov	r0, r4
 801bbfa:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 801bbfe:	f002 fa79 	bl	801e0f4 <__d2b>
 801bc02:	901e      	str	r0, [sp, #120]	; 0x78
 801bc04:	2800      	cmp	r0, #0
 801bc06:	f43f aefb 	beq.w	801ba00 <_strtod_l+0x498>
 801bc0a:	2101      	movs	r1, #1
 801bc0c:	4620      	mov	r0, r4
 801bc0e:	f001 ffcf 	bl	801dbb0 <__i2b>
 801bc12:	4606      	mov	r6, r0
 801bc14:	2800      	cmp	r0, #0
 801bc16:	f43f aef3 	beq.w	801ba00 <_strtod_l+0x498>
 801bc1a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801bc1c:	9904      	ldr	r1, [sp, #16]
 801bc1e:	2b00      	cmp	r3, #0
 801bc20:	bfab      	itete	ge
 801bc22:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 801bc24:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 801bc26:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 801bc28:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 801bc2c:	bfac      	ite	ge
 801bc2e:	eb03 0902 	addge.w	r9, r3, r2
 801bc32:	1ad7      	sublt	r7, r2, r3
 801bc34:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801bc36:	eba3 0801 	sub.w	r8, r3, r1
 801bc3a:	4490      	add	r8, r2
 801bc3c:	4ba3      	ldr	r3, [pc, #652]	; (801becc <_strtod_l+0x964>)
 801bc3e:	f108 38ff 	add.w	r8, r8, #4294967295
 801bc42:	4598      	cmp	r8, r3
 801bc44:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801bc48:	f280 80cc 	bge.w	801bde4 <_strtod_l+0x87c>
 801bc4c:	eba3 0308 	sub.w	r3, r3, r8
 801bc50:	2b1f      	cmp	r3, #31
 801bc52:	eba2 0203 	sub.w	r2, r2, r3
 801bc56:	f04f 0101 	mov.w	r1, #1
 801bc5a:	f300 80b6 	bgt.w	801bdca <_strtod_l+0x862>
 801bc5e:	fa01 f303 	lsl.w	r3, r1, r3
 801bc62:	9311      	str	r3, [sp, #68]	; 0x44
 801bc64:	2300      	movs	r3, #0
 801bc66:	930c      	str	r3, [sp, #48]	; 0x30
 801bc68:	eb09 0802 	add.w	r8, r9, r2
 801bc6c:	9b04      	ldr	r3, [sp, #16]
 801bc6e:	45c1      	cmp	r9, r8
 801bc70:	4417      	add	r7, r2
 801bc72:	441f      	add	r7, r3
 801bc74:	464b      	mov	r3, r9
 801bc76:	bfa8      	it	ge
 801bc78:	4643      	movge	r3, r8
 801bc7a:	42bb      	cmp	r3, r7
 801bc7c:	bfa8      	it	ge
 801bc7e:	463b      	movge	r3, r7
 801bc80:	2b00      	cmp	r3, #0
 801bc82:	bfc2      	ittt	gt
 801bc84:	eba8 0803 	subgt.w	r8, r8, r3
 801bc88:	1aff      	subgt	r7, r7, r3
 801bc8a:	eba9 0903 	subgt.w	r9, r9, r3
 801bc8e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801bc90:	2b00      	cmp	r3, #0
 801bc92:	dd17      	ble.n	801bcc4 <_strtod_l+0x75c>
 801bc94:	4631      	mov	r1, r6
 801bc96:	461a      	mov	r2, r3
 801bc98:	4620      	mov	r0, r4
 801bc9a:	f002 f845 	bl	801dd28 <__pow5mult>
 801bc9e:	4606      	mov	r6, r0
 801bca0:	2800      	cmp	r0, #0
 801bca2:	f43f aead 	beq.w	801ba00 <_strtod_l+0x498>
 801bca6:	4601      	mov	r1, r0
 801bca8:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801bcaa:	4620      	mov	r0, r4
 801bcac:	f001 ff96 	bl	801dbdc <__multiply>
 801bcb0:	900f      	str	r0, [sp, #60]	; 0x3c
 801bcb2:	2800      	cmp	r0, #0
 801bcb4:	f43f aea4 	beq.w	801ba00 <_strtod_l+0x498>
 801bcb8:	991e      	ldr	r1, [sp, #120]	; 0x78
 801bcba:	4620      	mov	r0, r4
 801bcbc:	f001 fe72 	bl	801d9a4 <_Bfree>
 801bcc0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801bcc2:	931e      	str	r3, [sp, #120]	; 0x78
 801bcc4:	f1b8 0f00 	cmp.w	r8, #0
 801bcc8:	f300 8091 	bgt.w	801bdee <_strtod_l+0x886>
 801bccc:	9b08      	ldr	r3, [sp, #32]
 801bcce:	2b00      	cmp	r3, #0
 801bcd0:	dd08      	ble.n	801bce4 <_strtod_l+0x77c>
 801bcd2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801bcd4:	9907      	ldr	r1, [sp, #28]
 801bcd6:	4620      	mov	r0, r4
 801bcd8:	f002 f826 	bl	801dd28 <__pow5mult>
 801bcdc:	9007      	str	r0, [sp, #28]
 801bcde:	2800      	cmp	r0, #0
 801bce0:	f43f ae8e 	beq.w	801ba00 <_strtod_l+0x498>
 801bce4:	2f00      	cmp	r7, #0
 801bce6:	dd08      	ble.n	801bcfa <_strtod_l+0x792>
 801bce8:	9907      	ldr	r1, [sp, #28]
 801bcea:	463a      	mov	r2, r7
 801bcec:	4620      	mov	r0, r4
 801bcee:	f002 f875 	bl	801dddc <__lshift>
 801bcf2:	9007      	str	r0, [sp, #28]
 801bcf4:	2800      	cmp	r0, #0
 801bcf6:	f43f ae83 	beq.w	801ba00 <_strtod_l+0x498>
 801bcfa:	f1b9 0f00 	cmp.w	r9, #0
 801bcfe:	dd08      	ble.n	801bd12 <_strtod_l+0x7aa>
 801bd00:	4631      	mov	r1, r6
 801bd02:	464a      	mov	r2, r9
 801bd04:	4620      	mov	r0, r4
 801bd06:	f002 f869 	bl	801dddc <__lshift>
 801bd0a:	4606      	mov	r6, r0
 801bd0c:	2800      	cmp	r0, #0
 801bd0e:	f43f ae77 	beq.w	801ba00 <_strtod_l+0x498>
 801bd12:	9a07      	ldr	r2, [sp, #28]
 801bd14:	991e      	ldr	r1, [sp, #120]	; 0x78
 801bd16:	4620      	mov	r0, r4
 801bd18:	f002 f8e8 	bl	801deec <__mdiff>
 801bd1c:	4605      	mov	r5, r0
 801bd1e:	2800      	cmp	r0, #0
 801bd20:	f43f ae6e 	beq.w	801ba00 <_strtod_l+0x498>
 801bd24:	68c3      	ldr	r3, [r0, #12]
 801bd26:	930f      	str	r3, [sp, #60]	; 0x3c
 801bd28:	2300      	movs	r3, #0
 801bd2a:	60c3      	str	r3, [r0, #12]
 801bd2c:	4631      	mov	r1, r6
 801bd2e:	f002 f8c1 	bl	801deb4 <__mcmp>
 801bd32:	2800      	cmp	r0, #0
 801bd34:	da65      	bge.n	801be02 <_strtod_l+0x89a>
 801bd36:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801bd38:	ea53 030a 	orrs.w	r3, r3, sl
 801bd3c:	f040 8087 	bne.w	801be4e <_strtod_l+0x8e6>
 801bd40:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801bd44:	2b00      	cmp	r3, #0
 801bd46:	f040 8082 	bne.w	801be4e <_strtod_l+0x8e6>
 801bd4a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801bd4e:	0d1b      	lsrs	r3, r3, #20
 801bd50:	051b      	lsls	r3, r3, #20
 801bd52:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801bd56:	d97a      	bls.n	801be4e <_strtod_l+0x8e6>
 801bd58:	696b      	ldr	r3, [r5, #20]
 801bd5a:	b913      	cbnz	r3, 801bd62 <_strtod_l+0x7fa>
 801bd5c:	692b      	ldr	r3, [r5, #16]
 801bd5e:	2b01      	cmp	r3, #1
 801bd60:	dd75      	ble.n	801be4e <_strtod_l+0x8e6>
 801bd62:	4629      	mov	r1, r5
 801bd64:	2201      	movs	r2, #1
 801bd66:	4620      	mov	r0, r4
 801bd68:	f002 f838 	bl	801dddc <__lshift>
 801bd6c:	4631      	mov	r1, r6
 801bd6e:	4605      	mov	r5, r0
 801bd70:	f002 f8a0 	bl	801deb4 <__mcmp>
 801bd74:	2800      	cmp	r0, #0
 801bd76:	dd6a      	ble.n	801be4e <_strtod_l+0x8e6>
 801bd78:	9904      	ldr	r1, [sp, #16]
 801bd7a:	4a55      	ldr	r2, [pc, #340]	; (801bed0 <_strtod_l+0x968>)
 801bd7c:	465b      	mov	r3, fp
 801bd7e:	2900      	cmp	r1, #0
 801bd80:	f000 8085 	beq.w	801be8e <_strtod_l+0x926>
 801bd84:	ea02 010b 	and.w	r1, r2, fp
 801bd88:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801bd8c:	dc7f      	bgt.n	801be8e <_strtod_l+0x926>
 801bd8e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801bd92:	f77f aeaa 	ble.w	801baea <_strtod_l+0x582>
 801bd96:	4a4f      	ldr	r2, [pc, #316]	; (801bed4 <_strtod_l+0x96c>)
 801bd98:	2300      	movs	r3, #0
 801bd9a:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 801bd9e:	4650      	mov	r0, sl
 801bda0:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 801bda4:	4659      	mov	r1, fp
 801bda6:	f7e4 fc37 	bl	8000618 <__aeabi_dmul>
 801bdaa:	460b      	mov	r3, r1
 801bdac:	4303      	orrs	r3, r0
 801bdae:	bf08      	it	eq
 801bdb0:	2322      	moveq	r3, #34	; 0x22
 801bdb2:	4682      	mov	sl, r0
 801bdb4:	468b      	mov	fp, r1
 801bdb6:	bf08      	it	eq
 801bdb8:	6023      	streq	r3, [r4, #0]
 801bdba:	e62b      	b.n	801ba14 <_strtod_l+0x4ac>
 801bdbc:	f04f 32ff 	mov.w	r2, #4294967295
 801bdc0:	fa02 f303 	lsl.w	r3, r2, r3
 801bdc4:	ea03 0a0a 	and.w	sl, r3, sl
 801bdc8:	e6de      	b.n	801bb88 <_strtod_l+0x620>
 801bdca:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 801bdce:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 801bdd2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 801bdd6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 801bdda:	fa01 f308 	lsl.w	r3, r1, r8
 801bdde:	930c      	str	r3, [sp, #48]	; 0x30
 801bde0:	9111      	str	r1, [sp, #68]	; 0x44
 801bde2:	e741      	b.n	801bc68 <_strtod_l+0x700>
 801bde4:	2300      	movs	r3, #0
 801bde6:	930c      	str	r3, [sp, #48]	; 0x30
 801bde8:	2301      	movs	r3, #1
 801bdea:	9311      	str	r3, [sp, #68]	; 0x44
 801bdec:	e73c      	b.n	801bc68 <_strtod_l+0x700>
 801bdee:	991e      	ldr	r1, [sp, #120]	; 0x78
 801bdf0:	4642      	mov	r2, r8
 801bdf2:	4620      	mov	r0, r4
 801bdf4:	f001 fff2 	bl	801dddc <__lshift>
 801bdf8:	901e      	str	r0, [sp, #120]	; 0x78
 801bdfa:	2800      	cmp	r0, #0
 801bdfc:	f47f af66 	bne.w	801bccc <_strtod_l+0x764>
 801be00:	e5fe      	b.n	801ba00 <_strtod_l+0x498>
 801be02:	465f      	mov	r7, fp
 801be04:	d16e      	bne.n	801bee4 <_strtod_l+0x97c>
 801be06:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801be08:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801be0c:	b342      	cbz	r2, 801be60 <_strtod_l+0x8f8>
 801be0e:	4a32      	ldr	r2, [pc, #200]	; (801bed8 <_strtod_l+0x970>)
 801be10:	4293      	cmp	r3, r2
 801be12:	d128      	bne.n	801be66 <_strtod_l+0x8fe>
 801be14:	9b04      	ldr	r3, [sp, #16]
 801be16:	4650      	mov	r0, sl
 801be18:	b1eb      	cbz	r3, 801be56 <_strtod_l+0x8ee>
 801be1a:	4a2d      	ldr	r2, [pc, #180]	; (801bed0 <_strtod_l+0x968>)
 801be1c:	403a      	ands	r2, r7
 801be1e:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 801be22:	f04f 31ff 	mov.w	r1, #4294967295
 801be26:	d819      	bhi.n	801be5c <_strtod_l+0x8f4>
 801be28:	0d12      	lsrs	r2, r2, #20
 801be2a:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801be2e:	fa01 f303 	lsl.w	r3, r1, r3
 801be32:	4298      	cmp	r0, r3
 801be34:	d117      	bne.n	801be66 <_strtod_l+0x8fe>
 801be36:	4b29      	ldr	r3, [pc, #164]	; (801bedc <_strtod_l+0x974>)
 801be38:	429f      	cmp	r7, r3
 801be3a:	d102      	bne.n	801be42 <_strtod_l+0x8da>
 801be3c:	3001      	adds	r0, #1
 801be3e:	f43f addf 	beq.w	801ba00 <_strtod_l+0x498>
 801be42:	4b23      	ldr	r3, [pc, #140]	; (801bed0 <_strtod_l+0x968>)
 801be44:	403b      	ands	r3, r7
 801be46:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 801be4a:	f04f 0a00 	mov.w	sl, #0
 801be4e:	9b04      	ldr	r3, [sp, #16]
 801be50:	2b00      	cmp	r3, #0
 801be52:	d1a0      	bne.n	801bd96 <_strtod_l+0x82e>
 801be54:	e5de      	b.n	801ba14 <_strtod_l+0x4ac>
 801be56:	f04f 33ff 	mov.w	r3, #4294967295
 801be5a:	e7ea      	b.n	801be32 <_strtod_l+0x8ca>
 801be5c:	460b      	mov	r3, r1
 801be5e:	e7e8      	b.n	801be32 <_strtod_l+0x8ca>
 801be60:	ea53 030a 	orrs.w	r3, r3, sl
 801be64:	d088      	beq.n	801bd78 <_strtod_l+0x810>
 801be66:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801be68:	b1db      	cbz	r3, 801bea2 <_strtod_l+0x93a>
 801be6a:	423b      	tst	r3, r7
 801be6c:	d0ef      	beq.n	801be4e <_strtod_l+0x8e6>
 801be6e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801be70:	9a04      	ldr	r2, [sp, #16]
 801be72:	4650      	mov	r0, sl
 801be74:	4659      	mov	r1, fp
 801be76:	b1c3      	cbz	r3, 801beaa <_strtod_l+0x942>
 801be78:	f7ff fb57 	bl	801b52a <sulp>
 801be7c:	4602      	mov	r2, r0
 801be7e:	460b      	mov	r3, r1
 801be80:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801be84:	f7e4 fa12 	bl	80002ac <__adddf3>
 801be88:	4682      	mov	sl, r0
 801be8a:	468b      	mov	fp, r1
 801be8c:	e7df      	b.n	801be4e <_strtod_l+0x8e6>
 801be8e:	4013      	ands	r3, r2
 801be90:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801be94:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801be98:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801be9c:	f04f 3aff 	mov.w	sl, #4294967295
 801bea0:	e7d5      	b.n	801be4e <_strtod_l+0x8e6>
 801bea2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801bea4:	ea13 0f0a 	tst.w	r3, sl
 801bea8:	e7e0      	b.n	801be6c <_strtod_l+0x904>
 801beaa:	f7ff fb3e 	bl	801b52a <sulp>
 801beae:	4602      	mov	r2, r0
 801beb0:	460b      	mov	r3, r1
 801beb2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801beb6:	f7e4 f9f7 	bl	80002a8 <__aeabi_dsub>
 801beba:	2200      	movs	r2, #0
 801bebc:	2300      	movs	r3, #0
 801bebe:	4682      	mov	sl, r0
 801bec0:	468b      	mov	fp, r1
 801bec2:	f7e4 fe11 	bl	8000ae8 <__aeabi_dcmpeq>
 801bec6:	2800      	cmp	r0, #0
 801bec8:	d0c1      	beq.n	801be4e <_strtod_l+0x8e6>
 801beca:	e60e      	b.n	801baea <_strtod_l+0x582>
 801becc:	fffffc02 	.word	0xfffffc02
 801bed0:	7ff00000 	.word	0x7ff00000
 801bed4:	39500000 	.word	0x39500000
 801bed8:	000fffff 	.word	0x000fffff
 801bedc:	7fefffff 	.word	0x7fefffff
 801bee0:	08024130 	.word	0x08024130
 801bee4:	4631      	mov	r1, r6
 801bee6:	4628      	mov	r0, r5
 801bee8:	f002 f960 	bl	801e1ac <__ratio>
 801beec:	ec59 8b10 	vmov	r8, r9, d0
 801bef0:	ee10 0a10 	vmov	r0, s0
 801bef4:	2200      	movs	r2, #0
 801bef6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801befa:	4649      	mov	r1, r9
 801befc:	f7e4 fe08 	bl	8000b10 <__aeabi_dcmple>
 801bf00:	2800      	cmp	r0, #0
 801bf02:	d07c      	beq.n	801bffe <_strtod_l+0xa96>
 801bf04:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801bf06:	2b00      	cmp	r3, #0
 801bf08:	d04c      	beq.n	801bfa4 <_strtod_l+0xa3c>
 801bf0a:	4b95      	ldr	r3, [pc, #596]	; (801c160 <_strtod_l+0xbf8>)
 801bf0c:	2200      	movs	r2, #0
 801bf0e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 801bf12:	f8df 924c 	ldr.w	r9, [pc, #588]	; 801c160 <_strtod_l+0xbf8>
 801bf16:	f04f 0800 	mov.w	r8, #0
 801bf1a:	4b92      	ldr	r3, [pc, #584]	; (801c164 <_strtod_l+0xbfc>)
 801bf1c:	403b      	ands	r3, r7
 801bf1e:	9311      	str	r3, [sp, #68]	; 0x44
 801bf20:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801bf22:	4b91      	ldr	r3, [pc, #580]	; (801c168 <_strtod_l+0xc00>)
 801bf24:	429a      	cmp	r2, r3
 801bf26:	f040 80b2 	bne.w	801c08e <_strtod_l+0xb26>
 801bf2a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801bf2e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801bf32:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 801bf36:	ec4b ab10 	vmov	d0, sl, fp
 801bf3a:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 801bf3e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801bf42:	f002 f85b 	bl	801dffc <__ulp>
 801bf46:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801bf4a:	ec53 2b10 	vmov	r2, r3, d0
 801bf4e:	f7e4 fb63 	bl	8000618 <__aeabi_dmul>
 801bf52:	4652      	mov	r2, sl
 801bf54:	465b      	mov	r3, fp
 801bf56:	f7e4 f9a9 	bl	80002ac <__adddf3>
 801bf5a:	460b      	mov	r3, r1
 801bf5c:	4981      	ldr	r1, [pc, #516]	; (801c164 <_strtod_l+0xbfc>)
 801bf5e:	4a83      	ldr	r2, [pc, #524]	; (801c16c <_strtod_l+0xc04>)
 801bf60:	4019      	ands	r1, r3
 801bf62:	4291      	cmp	r1, r2
 801bf64:	4682      	mov	sl, r0
 801bf66:	d95e      	bls.n	801c026 <_strtod_l+0xabe>
 801bf68:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801bf6a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 801bf6e:	4293      	cmp	r3, r2
 801bf70:	d103      	bne.n	801bf7a <_strtod_l+0xa12>
 801bf72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801bf74:	3301      	adds	r3, #1
 801bf76:	f43f ad43 	beq.w	801ba00 <_strtod_l+0x498>
 801bf7a:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 801c178 <_strtod_l+0xc10>
 801bf7e:	f04f 3aff 	mov.w	sl, #4294967295
 801bf82:	991e      	ldr	r1, [sp, #120]	; 0x78
 801bf84:	4620      	mov	r0, r4
 801bf86:	f001 fd0d 	bl	801d9a4 <_Bfree>
 801bf8a:	9907      	ldr	r1, [sp, #28]
 801bf8c:	4620      	mov	r0, r4
 801bf8e:	f001 fd09 	bl	801d9a4 <_Bfree>
 801bf92:	4631      	mov	r1, r6
 801bf94:	4620      	mov	r0, r4
 801bf96:	f001 fd05 	bl	801d9a4 <_Bfree>
 801bf9a:	4629      	mov	r1, r5
 801bf9c:	4620      	mov	r0, r4
 801bf9e:	f001 fd01 	bl	801d9a4 <_Bfree>
 801bfa2:	e613      	b.n	801bbcc <_strtod_l+0x664>
 801bfa4:	f1ba 0f00 	cmp.w	sl, #0
 801bfa8:	d11b      	bne.n	801bfe2 <_strtod_l+0xa7a>
 801bfaa:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801bfae:	b9f3      	cbnz	r3, 801bfee <_strtod_l+0xa86>
 801bfb0:	4b6b      	ldr	r3, [pc, #428]	; (801c160 <_strtod_l+0xbf8>)
 801bfb2:	2200      	movs	r2, #0
 801bfb4:	4640      	mov	r0, r8
 801bfb6:	4649      	mov	r1, r9
 801bfb8:	f7e4 fda0 	bl	8000afc <__aeabi_dcmplt>
 801bfbc:	b9d0      	cbnz	r0, 801bff4 <_strtod_l+0xa8c>
 801bfbe:	4640      	mov	r0, r8
 801bfc0:	4649      	mov	r1, r9
 801bfc2:	4b6b      	ldr	r3, [pc, #428]	; (801c170 <_strtod_l+0xc08>)
 801bfc4:	2200      	movs	r2, #0
 801bfc6:	f7e4 fb27 	bl	8000618 <__aeabi_dmul>
 801bfca:	4680      	mov	r8, r0
 801bfcc:	4689      	mov	r9, r1
 801bfce:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801bfd2:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 801bfd6:	931b      	str	r3, [sp, #108]	; 0x6c
 801bfd8:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 801bfdc:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 801bfe0:	e79b      	b.n	801bf1a <_strtod_l+0x9b2>
 801bfe2:	f1ba 0f01 	cmp.w	sl, #1
 801bfe6:	d102      	bne.n	801bfee <_strtod_l+0xa86>
 801bfe8:	2f00      	cmp	r7, #0
 801bfea:	f43f ad7e 	beq.w	801baea <_strtod_l+0x582>
 801bfee:	4b61      	ldr	r3, [pc, #388]	; (801c174 <_strtod_l+0xc0c>)
 801bff0:	2200      	movs	r2, #0
 801bff2:	e78c      	b.n	801bf0e <_strtod_l+0x9a6>
 801bff4:	f8df 9178 	ldr.w	r9, [pc, #376]	; 801c170 <_strtod_l+0xc08>
 801bff8:	f04f 0800 	mov.w	r8, #0
 801bffc:	e7e7      	b.n	801bfce <_strtod_l+0xa66>
 801bffe:	4b5c      	ldr	r3, [pc, #368]	; (801c170 <_strtod_l+0xc08>)
 801c000:	4640      	mov	r0, r8
 801c002:	4649      	mov	r1, r9
 801c004:	2200      	movs	r2, #0
 801c006:	f7e4 fb07 	bl	8000618 <__aeabi_dmul>
 801c00a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801c00c:	4680      	mov	r8, r0
 801c00e:	4689      	mov	r9, r1
 801c010:	b933      	cbnz	r3, 801c020 <_strtod_l+0xab8>
 801c012:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801c016:	9012      	str	r0, [sp, #72]	; 0x48
 801c018:	9313      	str	r3, [sp, #76]	; 0x4c
 801c01a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 801c01e:	e7dd      	b.n	801bfdc <_strtod_l+0xa74>
 801c020:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 801c024:	e7f9      	b.n	801c01a <_strtod_l+0xab2>
 801c026:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 801c02a:	9b04      	ldr	r3, [sp, #16]
 801c02c:	2b00      	cmp	r3, #0
 801c02e:	d1a8      	bne.n	801bf82 <_strtod_l+0xa1a>
 801c030:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801c034:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801c036:	0d1b      	lsrs	r3, r3, #20
 801c038:	051b      	lsls	r3, r3, #20
 801c03a:	429a      	cmp	r2, r3
 801c03c:	d1a1      	bne.n	801bf82 <_strtod_l+0xa1a>
 801c03e:	4640      	mov	r0, r8
 801c040:	4649      	mov	r1, r9
 801c042:	f7e4 fe49 	bl	8000cd8 <__aeabi_d2lz>
 801c046:	f7e4 fab9 	bl	80005bc <__aeabi_l2d>
 801c04a:	4602      	mov	r2, r0
 801c04c:	460b      	mov	r3, r1
 801c04e:	4640      	mov	r0, r8
 801c050:	4649      	mov	r1, r9
 801c052:	f7e4 f929 	bl	80002a8 <__aeabi_dsub>
 801c056:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801c058:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801c05c:	ea43 030a 	orr.w	r3, r3, sl
 801c060:	4313      	orrs	r3, r2
 801c062:	4680      	mov	r8, r0
 801c064:	4689      	mov	r9, r1
 801c066:	d053      	beq.n	801c110 <_strtod_l+0xba8>
 801c068:	a335      	add	r3, pc, #212	; (adr r3, 801c140 <_strtod_l+0xbd8>)
 801c06a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c06e:	f7e4 fd45 	bl	8000afc <__aeabi_dcmplt>
 801c072:	2800      	cmp	r0, #0
 801c074:	f47f acce 	bne.w	801ba14 <_strtod_l+0x4ac>
 801c078:	a333      	add	r3, pc, #204	; (adr r3, 801c148 <_strtod_l+0xbe0>)
 801c07a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c07e:	4640      	mov	r0, r8
 801c080:	4649      	mov	r1, r9
 801c082:	f7e4 fd59 	bl	8000b38 <__aeabi_dcmpgt>
 801c086:	2800      	cmp	r0, #0
 801c088:	f43f af7b 	beq.w	801bf82 <_strtod_l+0xa1a>
 801c08c:	e4c2      	b.n	801ba14 <_strtod_l+0x4ac>
 801c08e:	9b04      	ldr	r3, [sp, #16]
 801c090:	b333      	cbz	r3, 801c0e0 <_strtod_l+0xb78>
 801c092:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801c094:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801c098:	d822      	bhi.n	801c0e0 <_strtod_l+0xb78>
 801c09a:	a32d      	add	r3, pc, #180	; (adr r3, 801c150 <_strtod_l+0xbe8>)
 801c09c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c0a0:	4640      	mov	r0, r8
 801c0a2:	4649      	mov	r1, r9
 801c0a4:	f7e4 fd34 	bl	8000b10 <__aeabi_dcmple>
 801c0a8:	b1a0      	cbz	r0, 801c0d4 <_strtod_l+0xb6c>
 801c0aa:	4649      	mov	r1, r9
 801c0ac:	4640      	mov	r0, r8
 801c0ae:	f7e4 fd8b 	bl	8000bc8 <__aeabi_d2uiz>
 801c0b2:	2801      	cmp	r0, #1
 801c0b4:	bf38      	it	cc
 801c0b6:	2001      	movcc	r0, #1
 801c0b8:	f7e4 fa34 	bl	8000524 <__aeabi_ui2d>
 801c0bc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801c0be:	4680      	mov	r8, r0
 801c0c0:	4689      	mov	r9, r1
 801c0c2:	bb13      	cbnz	r3, 801c10a <_strtod_l+0xba2>
 801c0c4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801c0c8:	9014      	str	r0, [sp, #80]	; 0x50
 801c0ca:	9315      	str	r3, [sp, #84]	; 0x54
 801c0cc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 801c0d0:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 801c0d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c0d6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801c0d8:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 801c0dc:	1a9b      	subs	r3, r3, r2
 801c0de:	930d      	str	r3, [sp, #52]	; 0x34
 801c0e0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801c0e4:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 801c0e8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801c0ec:	f001 ff86 	bl	801dffc <__ulp>
 801c0f0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801c0f4:	ec53 2b10 	vmov	r2, r3, d0
 801c0f8:	f7e4 fa8e 	bl	8000618 <__aeabi_dmul>
 801c0fc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801c100:	f7e4 f8d4 	bl	80002ac <__adddf3>
 801c104:	4682      	mov	sl, r0
 801c106:	468b      	mov	fp, r1
 801c108:	e78f      	b.n	801c02a <_strtod_l+0xac2>
 801c10a:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 801c10e:	e7dd      	b.n	801c0cc <_strtod_l+0xb64>
 801c110:	a311      	add	r3, pc, #68	; (adr r3, 801c158 <_strtod_l+0xbf0>)
 801c112:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c116:	f7e4 fcf1 	bl	8000afc <__aeabi_dcmplt>
 801c11a:	e7b4      	b.n	801c086 <_strtod_l+0xb1e>
 801c11c:	2300      	movs	r3, #0
 801c11e:	930e      	str	r3, [sp, #56]	; 0x38
 801c120:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801c122:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801c124:	6013      	str	r3, [r2, #0]
 801c126:	f7ff ba65 	b.w	801b5f4 <_strtod_l+0x8c>
 801c12a:	2b65      	cmp	r3, #101	; 0x65
 801c12c:	f43f ab5d 	beq.w	801b7ea <_strtod_l+0x282>
 801c130:	2b45      	cmp	r3, #69	; 0x45
 801c132:	f43f ab5a 	beq.w	801b7ea <_strtod_l+0x282>
 801c136:	2201      	movs	r2, #1
 801c138:	f7ff bb92 	b.w	801b860 <_strtod_l+0x2f8>
 801c13c:	f3af 8000 	nop.w
 801c140:	94a03595 	.word	0x94a03595
 801c144:	3fdfffff 	.word	0x3fdfffff
 801c148:	35afe535 	.word	0x35afe535
 801c14c:	3fe00000 	.word	0x3fe00000
 801c150:	ffc00000 	.word	0xffc00000
 801c154:	41dfffff 	.word	0x41dfffff
 801c158:	94a03595 	.word	0x94a03595
 801c15c:	3fcfffff 	.word	0x3fcfffff
 801c160:	3ff00000 	.word	0x3ff00000
 801c164:	7ff00000 	.word	0x7ff00000
 801c168:	7fe00000 	.word	0x7fe00000
 801c16c:	7c9fffff 	.word	0x7c9fffff
 801c170:	3fe00000 	.word	0x3fe00000
 801c174:	bff00000 	.word	0xbff00000
 801c178:	7fefffff 	.word	0x7fefffff

0801c17c <strtod>:
 801c17c:	460a      	mov	r2, r1
 801c17e:	4601      	mov	r1, r0
 801c180:	4802      	ldr	r0, [pc, #8]	; (801c18c <strtod+0x10>)
 801c182:	4b03      	ldr	r3, [pc, #12]	; (801c190 <strtod+0x14>)
 801c184:	6800      	ldr	r0, [r0, #0]
 801c186:	f7ff b9ef 	b.w	801b568 <_strtod_l>
 801c18a:	bf00      	nop
 801c18c:	20000084 	.word	0x20000084
 801c190:	200000ec 	.word	0x200000ec

0801c194 <_strtol_l.isra.0>:
 801c194:	2b01      	cmp	r3, #1
 801c196:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c19a:	d001      	beq.n	801c1a0 <_strtol_l.isra.0+0xc>
 801c19c:	2b24      	cmp	r3, #36	; 0x24
 801c19e:	d906      	bls.n	801c1ae <_strtol_l.isra.0+0x1a>
 801c1a0:	f000 ff1e 	bl	801cfe0 <__errno>
 801c1a4:	2316      	movs	r3, #22
 801c1a6:	6003      	str	r3, [r0, #0]
 801c1a8:	2000      	movs	r0, #0
 801c1aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c1ae:	4f3a      	ldr	r7, [pc, #232]	; (801c298 <_strtol_l.isra.0+0x104>)
 801c1b0:	468e      	mov	lr, r1
 801c1b2:	4676      	mov	r6, lr
 801c1b4:	f81e 4b01 	ldrb.w	r4, [lr], #1
 801c1b8:	5de5      	ldrb	r5, [r4, r7]
 801c1ba:	f015 0508 	ands.w	r5, r5, #8
 801c1be:	d1f8      	bne.n	801c1b2 <_strtol_l.isra.0+0x1e>
 801c1c0:	2c2d      	cmp	r4, #45	; 0x2d
 801c1c2:	d134      	bne.n	801c22e <_strtol_l.isra.0+0x9a>
 801c1c4:	f89e 4000 	ldrb.w	r4, [lr]
 801c1c8:	f04f 0801 	mov.w	r8, #1
 801c1cc:	f106 0e02 	add.w	lr, r6, #2
 801c1d0:	2b00      	cmp	r3, #0
 801c1d2:	d05c      	beq.n	801c28e <_strtol_l.isra.0+0xfa>
 801c1d4:	2b10      	cmp	r3, #16
 801c1d6:	d10c      	bne.n	801c1f2 <_strtol_l.isra.0+0x5e>
 801c1d8:	2c30      	cmp	r4, #48	; 0x30
 801c1da:	d10a      	bne.n	801c1f2 <_strtol_l.isra.0+0x5e>
 801c1dc:	f89e 4000 	ldrb.w	r4, [lr]
 801c1e0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801c1e4:	2c58      	cmp	r4, #88	; 0x58
 801c1e6:	d14d      	bne.n	801c284 <_strtol_l.isra.0+0xf0>
 801c1e8:	f89e 4001 	ldrb.w	r4, [lr, #1]
 801c1ec:	2310      	movs	r3, #16
 801c1ee:	f10e 0e02 	add.w	lr, lr, #2
 801c1f2:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 801c1f6:	f10c 3cff 	add.w	ip, ip, #4294967295
 801c1fa:	2600      	movs	r6, #0
 801c1fc:	fbbc f9f3 	udiv	r9, ip, r3
 801c200:	4635      	mov	r5, r6
 801c202:	fb03 ca19 	mls	sl, r3, r9, ip
 801c206:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 801c20a:	2f09      	cmp	r7, #9
 801c20c:	d818      	bhi.n	801c240 <_strtol_l.isra.0+0xac>
 801c20e:	463c      	mov	r4, r7
 801c210:	42a3      	cmp	r3, r4
 801c212:	dd24      	ble.n	801c25e <_strtol_l.isra.0+0xca>
 801c214:	2e00      	cmp	r6, #0
 801c216:	db1f      	blt.n	801c258 <_strtol_l.isra.0+0xc4>
 801c218:	45a9      	cmp	r9, r5
 801c21a:	d31d      	bcc.n	801c258 <_strtol_l.isra.0+0xc4>
 801c21c:	d101      	bne.n	801c222 <_strtol_l.isra.0+0x8e>
 801c21e:	45a2      	cmp	sl, r4
 801c220:	db1a      	blt.n	801c258 <_strtol_l.isra.0+0xc4>
 801c222:	fb05 4503 	mla	r5, r5, r3, r4
 801c226:	2601      	movs	r6, #1
 801c228:	f81e 4b01 	ldrb.w	r4, [lr], #1
 801c22c:	e7eb      	b.n	801c206 <_strtol_l.isra.0+0x72>
 801c22e:	2c2b      	cmp	r4, #43	; 0x2b
 801c230:	bf08      	it	eq
 801c232:	f89e 4000 	ldrbeq.w	r4, [lr]
 801c236:	46a8      	mov	r8, r5
 801c238:	bf08      	it	eq
 801c23a:	f106 0e02 	addeq.w	lr, r6, #2
 801c23e:	e7c7      	b.n	801c1d0 <_strtol_l.isra.0+0x3c>
 801c240:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 801c244:	2f19      	cmp	r7, #25
 801c246:	d801      	bhi.n	801c24c <_strtol_l.isra.0+0xb8>
 801c248:	3c37      	subs	r4, #55	; 0x37
 801c24a:	e7e1      	b.n	801c210 <_strtol_l.isra.0+0x7c>
 801c24c:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 801c250:	2f19      	cmp	r7, #25
 801c252:	d804      	bhi.n	801c25e <_strtol_l.isra.0+0xca>
 801c254:	3c57      	subs	r4, #87	; 0x57
 801c256:	e7db      	b.n	801c210 <_strtol_l.isra.0+0x7c>
 801c258:	f04f 36ff 	mov.w	r6, #4294967295
 801c25c:	e7e4      	b.n	801c228 <_strtol_l.isra.0+0x94>
 801c25e:	2e00      	cmp	r6, #0
 801c260:	da05      	bge.n	801c26e <_strtol_l.isra.0+0xda>
 801c262:	2322      	movs	r3, #34	; 0x22
 801c264:	6003      	str	r3, [r0, #0]
 801c266:	4665      	mov	r5, ip
 801c268:	b942      	cbnz	r2, 801c27c <_strtol_l.isra.0+0xe8>
 801c26a:	4628      	mov	r0, r5
 801c26c:	e79d      	b.n	801c1aa <_strtol_l.isra.0+0x16>
 801c26e:	f1b8 0f00 	cmp.w	r8, #0
 801c272:	d000      	beq.n	801c276 <_strtol_l.isra.0+0xe2>
 801c274:	426d      	negs	r5, r5
 801c276:	2a00      	cmp	r2, #0
 801c278:	d0f7      	beq.n	801c26a <_strtol_l.isra.0+0xd6>
 801c27a:	b10e      	cbz	r6, 801c280 <_strtol_l.isra.0+0xec>
 801c27c:	f10e 31ff 	add.w	r1, lr, #4294967295
 801c280:	6011      	str	r1, [r2, #0]
 801c282:	e7f2      	b.n	801c26a <_strtol_l.isra.0+0xd6>
 801c284:	2430      	movs	r4, #48	; 0x30
 801c286:	2b00      	cmp	r3, #0
 801c288:	d1b3      	bne.n	801c1f2 <_strtol_l.isra.0+0x5e>
 801c28a:	2308      	movs	r3, #8
 801c28c:	e7b1      	b.n	801c1f2 <_strtol_l.isra.0+0x5e>
 801c28e:	2c30      	cmp	r4, #48	; 0x30
 801c290:	d0a4      	beq.n	801c1dc <_strtol_l.isra.0+0x48>
 801c292:	230a      	movs	r3, #10
 801c294:	e7ad      	b.n	801c1f2 <_strtol_l.isra.0+0x5e>
 801c296:	bf00      	nop
 801c298:	08023f57 	.word	0x08023f57

0801c29c <strtol>:
 801c29c:	4613      	mov	r3, r2
 801c29e:	460a      	mov	r2, r1
 801c2a0:	4601      	mov	r1, r0
 801c2a2:	4802      	ldr	r0, [pc, #8]	; (801c2ac <strtol+0x10>)
 801c2a4:	6800      	ldr	r0, [r0, #0]
 801c2a6:	f7ff bf75 	b.w	801c194 <_strtol_l.isra.0>
 801c2aa:	bf00      	nop
 801c2ac:	20000084 	.word	0x20000084

0801c2b0 <__assert_func>:
 801c2b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801c2b2:	4614      	mov	r4, r2
 801c2b4:	461a      	mov	r2, r3
 801c2b6:	4b09      	ldr	r3, [pc, #36]	; (801c2dc <__assert_func+0x2c>)
 801c2b8:	681b      	ldr	r3, [r3, #0]
 801c2ba:	4605      	mov	r5, r0
 801c2bc:	68d8      	ldr	r0, [r3, #12]
 801c2be:	b14c      	cbz	r4, 801c2d4 <__assert_func+0x24>
 801c2c0:	4b07      	ldr	r3, [pc, #28]	; (801c2e0 <__assert_func+0x30>)
 801c2c2:	9100      	str	r1, [sp, #0]
 801c2c4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801c2c8:	4906      	ldr	r1, [pc, #24]	; (801c2e4 <__assert_func+0x34>)
 801c2ca:	462b      	mov	r3, r5
 801c2cc:	f000 ff64 	bl	801d198 <fiprintf>
 801c2d0:	f002 fbd6 	bl	801ea80 <abort>
 801c2d4:	4b04      	ldr	r3, [pc, #16]	; (801c2e8 <__assert_func+0x38>)
 801c2d6:	461c      	mov	r4, r3
 801c2d8:	e7f3      	b.n	801c2c2 <__assert_func+0x12>
 801c2da:	bf00      	nop
 801c2dc:	20000084 	.word	0x20000084
 801c2e0:	08024158 	.word	0x08024158
 801c2e4:	08024165 	.word	0x08024165
 801c2e8:	08024193 	.word	0x08024193

0801c2ec <quorem>:
 801c2ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c2f0:	6903      	ldr	r3, [r0, #16]
 801c2f2:	690c      	ldr	r4, [r1, #16]
 801c2f4:	42a3      	cmp	r3, r4
 801c2f6:	4607      	mov	r7, r0
 801c2f8:	f2c0 8081 	blt.w	801c3fe <quorem+0x112>
 801c2fc:	3c01      	subs	r4, #1
 801c2fe:	f101 0814 	add.w	r8, r1, #20
 801c302:	f100 0514 	add.w	r5, r0, #20
 801c306:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801c30a:	9301      	str	r3, [sp, #4]
 801c30c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801c310:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801c314:	3301      	adds	r3, #1
 801c316:	429a      	cmp	r2, r3
 801c318:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801c31c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801c320:	fbb2 f6f3 	udiv	r6, r2, r3
 801c324:	d331      	bcc.n	801c38a <quorem+0x9e>
 801c326:	f04f 0e00 	mov.w	lr, #0
 801c32a:	4640      	mov	r0, r8
 801c32c:	46ac      	mov	ip, r5
 801c32e:	46f2      	mov	sl, lr
 801c330:	f850 2b04 	ldr.w	r2, [r0], #4
 801c334:	b293      	uxth	r3, r2
 801c336:	fb06 e303 	mla	r3, r6, r3, lr
 801c33a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801c33e:	b29b      	uxth	r3, r3
 801c340:	ebaa 0303 	sub.w	r3, sl, r3
 801c344:	0c12      	lsrs	r2, r2, #16
 801c346:	f8dc a000 	ldr.w	sl, [ip]
 801c34a:	fb06 e202 	mla	r2, r6, r2, lr
 801c34e:	fa13 f38a 	uxtah	r3, r3, sl
 801c352:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801c356:	fa1f fa82 	uxth.w	sl, r2
 801c35a:	f8dc 2000 	ldr.w	r2, [ip]
 801c35e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 801c362:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801c366:	b29b      	uxth	r3, r3
 801c368:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801c36c:	4581      	cmp	r9, r0
 801c36e:	f84c 3b04 	str.w	r3, [ip], #4
 801c372:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801c376:	d2db      	bcs.n	801c330 <quorem+0x44>
 801c378:	f855 300b 	ldr.w	r3, [r5, fp]
 801c37c:	b92b      	cbnz	r3, 801c38a <quorem+0x9e>
 801c37e:	9b01      	ldr	r3, [sp, #4]
 801c380:	3b04      	subs	r3, #4
 801c382:	429d      	cmp	r5, r3
 801c384:	461a      	mov	r2, r3
 801c386:	d32e      	bcc.n	801c3e6 <quorem+0xfa>
 801c388:	613c      	str	r4, [r7, #16]
 801c38a:	4638      	mov	r0, r7
 801c38c:	f001 fd92 	bl	801deb4 <__mcmp>
 801c390:	2800      	cmp	r0, #0
 801c392:	db24      	blt.n	801c3de <quorem+0xf2>
 801c394:	3601      	adds	r6, #1
 801c396:	4628      	mov	r0, r5
 801c398:	f04f 0c00 	mov.w	ip, #0
 801c39c:	f858 2b04 	ldr.w	r2, [r8], #4
 801c3a0:	f8d0 e000 	ldr.w	lr, [r0]
 801c3a4:	b293      	uxth	r3, r2
 801c3a6:	ebac 0303 	sub.w	r3, ip, r3
 801c3aa:	0c12      	lsrs	r2, r2, #16
 801c3ac:	fa13 f38e 	uxtah	r3, r3, lr
 801c3b0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801c3b4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801c3b8:	b29b      	uxth	r3, r3
 801c3ba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801c3be:	45c1      	cmp	r9, r8
 801c3c0:	f840 3b04 	str.w	r3, [r0], #4
 801c3c4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801c3c8:	d2e8      	bcs.n	801c39c <quorem+0xb0>
 801c3ca:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801c3ce:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801c3d2:	b922      	cbnz	r2, 801c3de <quorem+0xf2>
 801c3d4:	3b04      	subs	r3, #4
 801c3d6:	429d      	cmp	r5, r3
 801c3d8:	461a      	mov	r2, r3
 801c3da:	d30a      	bcc.n	801c3f2 <quorem+0x106>
 801c3dc:	613c      	str	r4, [r7, #16]
 801c3de:	4630      	mov	r0, r6
 801c3e0:	b003      	add	sp, #12
 801c3e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c3e6:	6812      	ldr	r2, [r2, #0]
 801c3e8:	3b04      	subs	r3, #4
 801c3ea:	2a00      	cmp	r2, #0
 801c3ec:	d1cc      	bne.n	801c388 <quorem+0x9c>
 801c3ee:	3c01      	subs	r4, #1
 801c3f0:	e7c7      	b.n	801c382 <quorem+0x96>
 801c3f2:	6812      	ldr	r2, [r2, #0]
 801c3f4:	3b04      	subs	r3, #4
 801c3f6:	2a00      	cmp	r2, #0
 801c3f8:	d1f0      	bne.n	801c3dc <quorem+0xf0>
 801c3fa:	3c01      	subs	r4, #1
 801c3fc:	e7eb      	b.n	801c3d6 <quorem+0xea>
 801c3fe:	2000      	movs	r0, #0
 801c400:	e7ee      	b.n	801c3e0 <quorem+0xf4>
 801c402:	0000      	movs	r0, r0
 801c404:	0000      	movs	r0, r0
	...

0801c408 <_dtoa_r>:
 801c408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c40c:	ed2d 8b02 	vpush	{d8}
 801c410:	ec57 6b10 	vmov	r6, r7, d0
 801c414:	b095      	sub	sp, #84	; 0x54
 801c416:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801c418:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801c41c:	9105      	str	r1, [sp, #20]
 801c41e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 801c422:	4604      	mov	r4, r0
 801c424:	9209      	str	r2, [sp, #36]	; 0x24
 801c426:	930f      	str	r3, [sp, #60]	; 0x3c
 801c428:	b975      	cbnz	r5, 801c448 <_dtoa_r+0x40>
 801c42a:	2010      	movs	r0, #16
 801c42c:	f7fe fa36 	bl	801a89c <malloc>
 801c430:	4602      	mov	r2, r0
 801c432:	6260      	str	r0, [r4, #36]	; 0x24
 801c434:	b920      	cbnz	r0, 801c440 <_dtoa_r+0x38>
 801c436:	4bb2      	ldr	r3, [pc, #712]	; (801c700 <_dtoa_r+0x2f8>)
 801c438:	21ea      	movs	r1, #234	; 0xea
 801c43a:	48b2      	ldr	r0, [pc, #712]	; (801c704 <_dtoa_r+0x2fc>)
 801c43c:	f7ff ff38 	bl	801c2b0 <__assert_func>
 801c440:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801c444:	6005      	str	r5, [r0, #0]
 801c446:	60c5      	str	r5, [r0, #12]
 801c448:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801c44a:	6819      	ldr	r1, [r3, #0]
 801c44c:	b151      	cbz	r1, 801c464 <_dtoa_r+0x5c>
 801c44e:	685a      	ldr	r2, [r3, #4]
 801c450:	604a      	str	r2, [r1, #4]
 801c452:	2301      	movs	r3, #1
 801c454:	4093      	lsls	r3, r2
 801c456:	608b      	str	r3, [r1, #8]
 801c458:	4620      	mov	r0, r4
 801c45a:	f001 faa3 	bl	801d9a4 <_Bfree>
 801c45e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801c460:	2200      	movs	r2, #0
 801c462:	601a      	str	r2, [r3, #0]
 801c464:	1e3b      	subs	r3, r7, #0
 801c466:	bfb9      	ittee	lt
 801c468:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801c46c:	9303      	strlt	r3, [sp, #12]
 801c46e:	2300      	movge	r3, #0
 801c470:	f8c8 3000 	strge.w	r3, [r8]
 801c474:	f8dd 900c 	ldr.w	r9, [sp, #12]
 801c478:	4ba3      	ldr	r3, [pc, #652]	; (801c708 <_dtoa_r+0x300>)
 801c47a:	bfbc      	itt	lt
 801c47c:	2201      	movlt	r2, #1
 801c47e:	f8c8 2000 	strlt.w	r2, [r8]
 801c482:	ea33 0309 	bics.w	r3, r3, r9
 801c486:	d11b      	bne.n	801c4c0 <_dtoa_r+0xb8>
 801c488:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801c48a:	f242 730f 	movw	r3, #9999	; 0x270f
 801c48e:	6013      	str	r3, [r2, #0]
 801c490:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801c494:	4333      	orrs	r3, r6
 801c496:	f000 857a 	beq.w	801cf8e <_dtoa_r+0xb86>
 801c49a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801c49c:	b963      	cbnz	r3, 801c4b8 <_dtoa_r+0xb0>
 801c49e:	4b9b      	ldr	r3, [pc, #620]	; (801c70c <_dtoa_r+0x304>)
 801c4a0:	e024      	b.n	801c4ec <_dtoa_r+0xe4>
 801c4a2:	4b9b      	ldr	r3, [pc, #620]	; (801c710 <_dtoa_r+0x308>)
 801c4a4:	9300      	str	r3, [sp, #0]
 801c4a6:	3308      	adds	r3, #8
 801c4a8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801c4aa:	6013      	str	r3, [r2, #0]
 801c4ac:	9800      	ldr	r0, [sp, #0]
 801c4ae:	b015      	add	sp, #84	; 0x54
 801c4b0:	ecbd 8b02 	vpop	{d8}
 801c4b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c4b8:	4b94      	ldr	r3, [pc, #592]	; (801c70c <_dtoa_r+0x304>)
 801c4ba:	9300      	str	r3, [sp, #0]
 801c4bc:	3303      	adds	r3, #3
 801c4be:	e7f3      	b.n	801c4a8 <_dtoa_r+0xa0>
 801c4c0:	ed9d 7b02 	vldr	d7, [sp, #8]
 801c4c4:	2200      	movs	r2, #0
 801c4c6:	ec51 0b17 	vmov	r0, r1, d7
 801c4ca:	2300      	movs	r3, #0
 801c4cc:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 801c4d0:	f7e4 fb0a 	bl	8000ae8 <__aeabi_dcmpeq>
 801c4d4:	4680      	mov	r8, r0
 801c4d6:	b158      	cbz	r0, 801c4f0 <_dtoa_r+0xe8>
 801c4d8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801c4da:	2301      	movs	r3, #1
 801c4dc:	6013      	str	r3, [r2, #0]
 801c4de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801c4e0:	2b00      	cmp	r3, #0
 801c4e2:	f000 8551 	beq.w	801cf88 <_dtoa_r+0xb80>
 801c4e6:	488b      	ldr	r0, [pc, #556]	; (801c714 <_dtoa_r+0x30c>)
 801c4e8:	6018      	str	r0, [r3, #0]
 801c4ea:	1e43      	subs	r3, r0, #1
 801c4ec:	9300      	str	r3, [sp, #0]
 801c4ee:	e7dd      	b.n	801c4ac <_dtoa_r+0xa4>
 801c4f0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 801c4f4:	aa12      	add	r2, sp, #72	; 0x48
 801c4f6:	a913      	add	r1, sp, #76	; 0x4c
 801c4f8:	4620      	mov	r0, r4
 801c4fa:	f001 fdfb 	bl	801e0f4 <__d2b>
 801c4fe:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801c502:	4683      	mov	fp, r0
 801c504:	2d00      	cmp	r5, #0
 801c506:	d07c      	beq.n	801c602 <_dtoa_r+0x1fa>
 801c508:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c50a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 801c50e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801c512:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 801c516:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 801c51a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 801c51e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801c522:	4b7d      	ldr	r3, [pc, #500]	; (801c718 <_dtoa_r+0x310>)
 801c524:	2200      	movs	r2, #0
 801c526:	4630      	mov	r0, r6
 801c528:	4639      	mov	r1, r7
 801c52a:	f7e3 febd 	bl	80002a8 <__aeabi_dsub>
 801c52e:	a36e      	add	r3, pc, #440	; (adr r3, 801c6e8 <_dtoa_r+0x2e0>)
 801c530:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c534:	f7e4 f870 	bl	8000618 <__aeabi_dmul>
 801c538:	a36d      	add	r3, pc, #436	; (adr r3, 801c6f0 <_dtoa_r+0x2e8>)
 801c53a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c53e:	f7e3 feb5 	bl	80002ac <__adddf3>
 801c542:	4606      	mov	r6, r0
 801c544:	4628      	mov	r0, r5
 801c546:	460f      	mov	r7, r1
 801c548:	f7e3 fffc 	bl	8000544 <__aeabi_i2d>
 801c54c:	a36a      	add	r3, pc, #424	; (adr r3, 801c6f8 <_dtoa_r+0x2f0>)
 801c54e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c552:	f7e4 f861 	bl	8000618 <__aeabi_dmul>
 801c556:	4602      	mov	r2, r0
 801c558:	460b      	mov	r3, r1
 801c55a:	4630      	mov	r0, r6
 801c55c:	4639      	mov	r1, r7
 801c55e:	f7e3 fea5 	bl	80002ac <__adddf3>
 801c562:	4606      	mov	r6, r0
 801c564:	460f      	mov	r7, r1
 801c566:	f7e4 fb07 	bl	8000b78 <__aeabi_d2iz>
 801c56a:	2200      	movs	r2, #0
 801c56c:	4682      	mov	sl, r0
 801c56e:	2300      	movs	r3, #0
 801c570:	4630      	mov	r0, r6
 801c572:	4639      	mov	r1, r7
 801c574:	f7e4 fac2 	bl	8000afc <__aeabi_dcmplt>
 801c578:	b148      	cbz	r0, 801c58e <_dtoa_r+0x186>
 801c57a:	4650      	mov	r0, sl
 801c57c:	f7e3 ffe2 	bl	8000544 <__aeabi_i2d>
 801c580:	4632      	mov	r2, r6
 801c582:	463b      	mov	r3, r7
 801c584:	f7e4 fab0 	bl	8000ae8 <__aeabi_dcmpeq>
 801c588:	b908      	cbnz	r0, 801c58e <_dtoa_r+0x186>
 801c58a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801c58e:	f1ba 0f16 	cmp.w	sl, #22
 801c592:	d854      	bhi.n	801c63e <_dtoa_r+0x236>
 801c594:	4b61      	ldr	r3, [pc, #388]	; (801c71c <_dtoa_r+0x314>)
 801c596:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801c59a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c59e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801c5a2:	f7e4 faab 	bl	8000afc <__aeabi_dcmplt>
 801c5a6:	2800      	cmp	r0, #0
 801c5a8:	d04b      	beq.n	801c642 <_dtoa_r+0x23a>
 801c5aa:	f10a 3aff 	add.w	sl, sl, #4294967295
 801c5ae:	2300      	movs	r3, #0
 801c5b0:	930e      	str	r3, [sp, #56]	; 0x38
 801c5b2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801c5b4:	1b5d      	subs	r5, r3, r5
 801c5b6:	1e6b      	subs	r3, r5, #1
 801c5b8:	9304      	str	r3, [sp, #16]
 801c5ba:	bf43      	ittte	mi
 801c5bc:	2300      	movmi	r3, #0
 801c5be:	f1c5 0801 	rsbmi	r8, r5, #1
 801c5c2:	9304      	strmi	r3, [sp, #16]
 801c5c4:	f04f 0800 	movpl.w	r8, #0
 801c5c8:	f1ba 0f00 	cmp.w	sl, #0
 801c5cc:	db3b      	blt.n	801c646 <_dtoa_r+0x23e>
 801c5ce:	9b04      	ldr	r3, [sp, #16]
 801c5d0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 801c5d4:	4453      	add	r3, sl
 801c5d6:	9304      	str	r3, [sp, #16]
 801c5d8:	2300      	movs	r3, #0
 801c5da:	9306      	str	r3, [sp, #24]
 801c5dc:	9b05      	ldr	r3, [sp, #20]
 801c5de:	2b09      	cmp	r3, #9
 801c5e0:	d869      	bhi.n	801c6b6 <_dtoa_r+0x2ae>
 801c5e2:	2b05      	cmp	r3, #5
 801c5e4:	bfc4      	itt	gt
 801c5e6:	3b04      	subgt	r3, #4
 801c5e8:	9305      	strgt	r3, [sp, #20]
 801c5ea:	9b05      	ldr	r3, [sp, #20]
 801c5ec:	f1a3 0302 	sub.w	r3, r3, #2
 801c5f0:	bfcc      	ite	gt
 801c5f2:	2500      	movgt	r5, #0
 801c5f4:	2501      	movle	r5, #1
 801c5f6:	2b03      	cmp	r3, #3
 801c5f8:	d869      	bhi.n	801c6ce <_dtoa_r+0x2c6>
 801c5fa:	e8df f003 	tbb	[pc, r3]
 801c5fe:	4e2c      	.short	0x4e2c
 801c600:	5a4c      	.short	0x5a4c
 801c602:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 801c606:	441d      	add	r5, r3
 801c608:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801c60c:	2b20      	cmp	r3, #32
 801c60e:	bfc1      	itttt	gt
 801c610:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801c614:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 801c618:	fa09 f303 	lslgt.w	r3, r9, r3
 801c61c:	fa26 f000 	lsrgt.w	r0, r6, r0
 801c620:	bfda      	itte	le
 801c622:	f1c3 0320 	rsble	r3, r3, #32
 801c626:	fa06 f003 	lslle.w	r0, r6, r3
 801c62a:	4318      	orrgt	r0, r3
 801c62c:	f7e3 ff7a 	bl	8000524 <__aeabi_ui2d>
 801c630:	2301      	movs	r3, #1
 801c632:	4606      	mov	r6, r0
 801c634:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 801c638:	3d01      	subs	r5, #1
 801c63a:	9310      	str	r3, [sp, #64]	; 0x40
 801c63c:	e771      	b.n	801c522 <_dtoa_r+0x11a>
 801c63e:	2301      	movs	r3, #1
 801c640:	e7b6      	b.n	801c5b0 <_dtoa_r+0x1a8>
 801c642:	900e      	str	r0, [sp, #56]	; 0x38
 801c644:	e7b5      	b.n	801c5b2 <_dtoa_r+0x1aa>
 801c646:	f1ca 0300 	rsb	r3, sl, #0
 801c64a:	9306      	str	r3, [sp, #24]
 801c64c:	2300      	movs	r3, #0
 801c64e:	eba8 080a 	sub.w	r8, r8, sl
 801c652:	930d      	str	r3, [sp, #52]	; 0x34
 801c654:	e7c2      	b.n	801c5dc <_dtoa_r+0x1d4>
 801c656:	2300      	movs	r3, #0
 801c658:	9308      	str	r3, [sp, #32]
 801c65a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c65c:	2b00      	cmp	r3, #0
 801c65e:	dc39      	bgt.n	801c6d4 <_dtoa_r+0x2cc>
 801c660:	f04f 0901 	mov.w	r9, #1
 801c664:	f8cd 9004 	str.w	r9, [sp, #4]
 801c668:	464b      	mov	r3, r9
 801c66a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 801c66e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801c670:	2200      	movs	r2, #0
 801c672:	6042      	str	r2, [r0, #4]
 801c674:	2204      	movs	r2, #4
 801c676:	f102 0614 	add.w	r6, r2, #20
 801c67a:	429e      	cmp	r6, r3
 801c67c:	6841      	ldr	r1, [r0, #4]
 801c67e:	d92f      	bls.n	801c6e0 <_dtoa_r+0x2d8>
 801c680:	4620      	mov	r0, r4
 801c682:	f001 f94f 	bl	801d924 <_Balloc>
 801c686:	9000      	str	r0, [sp, #0]
 801c688:	2800      	cmp	r0, #0
 801c68a:	d14b      	bne.n	801c724 <_dtoa_r+0x31c>
 801c68c:	4b24      	ldr	r3, [pc, #144]	; (801c720 <_dtoa_r+0x318>)
 801c68e:	4602      	mov	r2, r0
 801c690:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801c694:	e6d1      	b.n	801c43a <_dtoa_r+0x32>
 801c696:	2301      	movs	r3, #1
 801c698:	e7de      	b.n	801c658 <_dtoa_r+0x250>
 801c69a:	2300      	movs	r3, #0
 801c69c:	9308      	str	r3, [sp, #32]
 801c69e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c6a0:	eb0a 0903 	add.w	r9, sl, r3
 801c6a4:	f109 0301 	add.w	r3, r9, #1
 801c6a8:	2b01      	cmp	r3, #1
 801c6aa:	9301      	str	r3, [sp, #4]
 801c6ac:	bfb8      	it	lt
 801c6ae:	2301      	movlt	r3, #1
 801c6b0:	e7dd      	b.n	801c66e <_dtoa_r+0x266>
 801c6b2:	2301      	movs	r3, #1
 801c6b4:	e7f2      	b.n	801c69c <_dtoa_r+0x294>
 801c6b6:	2501      	movs	r5, #1
 801c6b8:	2300      	movs	r3, #0
 801c6ba:	9305      	str	r3, [sp, #20]
 801c6bc:	9508      	str	r5, [sp, #32]
 801c6be:	f04f 39ff 	mov.w	r9, #4294967295
 801c6c2:	2200      	movs	r2, #0
 801c6c4:	f8cd 9004 	str.w	r9, [sp, #4]
 801c6c8:	2312      	movs	r3, #18
 801c6ca:	9209      	str	r2, [sp, #36]	; 0x24
 801c6cc:	e7cf      	b.n	801c66e <_dtoa_r+0x266>
 801c6ce:	2301      	movs	r3, #1
 801c6d0:	9308      	str	r3, [sp, #32]
 801c6d2:	e7f4      	b.n	801c6be <_dtoa_r+0x2b6>
 801c6d4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801c6d8:	f8cd 9004 	str.w	r9, [sp, #4]
 801c6dc:	464b      	mov	r3, r9
 801c6de:	e7c6      	b.n	801c66e <_dtoa_r+0x266>
 801c6e0:	3101      	adds	r1, #1
 801c6e2:	6041      	str	r1, [r0, #4]
 801c6e4:	0052      	lsls	r2, r2, #1
 801c6e6:	e7c6      	b.n	801c676 <_dtoa_r+0x26e>
 801c6e8:	636f4361 	.word	0x636f4361
 801c6ec:	3fd287a7 	.word	0x3fd287a7
 801c6f0:	8b60c8b3 	.word	0x8b60c8b3
 801c6f4:	3fc68a28 	.word	0x3fc68a28
 801c6f8:	509f79fb 	.word	0x509f79fb
 801c6fc:	3fd34413 	.word	0x3fd34413
 801c700:	08024090 	.word	0x08024090
 801c704:	080241a1 	.word	0x080241a1
 801c708:	7ff00000 	.word	0x7ff00000
 801c70c:	0802419d 	.word	0x0802419d
 801c710:	08024194 	.word	0x08024194
 801c714:	0802406d 	.word	0x0802406d
 801c718:	3ff80000 	.word	0x3ff80000
 801c71c:	08024380 	.word	0x08024380
 801c720:	08024200 	.word	0x08024200
 801c724:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801c726:	9a00      	ldr	r2, [sp, #0]
 801c728:	601a      	str	r2, [r3, #0]
 801c72a:	9b01      	ldr	r3, [sp, #4]
 801c72c:	2b0e      	cmp	r3, #14
 801c72e:	f200 80ad 	bhi.w	801c88c <_dtoa_r+0x484>
 801c732:	2d00      	cmp	r5, #0
 801c734:	f000 80aa 	beq.w	801c88c <_dtoa_r+0x484>
 801c738:	f1ba 0f00 	cmp.w	sl, #0
 801c73c:	dd36      	ble.n	801c7ac <_dtoa_r+0x3a4>
 801c73e:	4ac3      	ldr	r2, [pc, #780]	; (801ca4c <_dtoa_r+0x644>)
 801c740:	f00a 030f 	and.w	r3, sl, #15
 801c744:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801c748:	ed93 7b00 	vldr	d7, [r3]
 801c74c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 801c750:	ea4f 172a 	mov.w	r7, sl, asr #4
 801c754:	eeb0 8a47 	vmov.f32	s16, s14
 801c758:	eef0 8a67 	vmov.f32	s17, s15
 801c75c:	d016      	beq.n	801c78c <_dtoa_r+0x384>
 801c75e:	4bbc      	ldr	r3, [pc, #752]	; (801ca50 <_dtoa_r+0x648>)
 801c760:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801c764:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801c768:	f7e4 f880 	bl	800086c <__aeabi_ddiv>
 801c76c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801c770:	f007 070f 	and.w	r7, r7, #15
 801c774:	2503      	movs	r5, #3
 801c776:	4eb6      	ldr	r6, [pc, #728]	; (801ca50 <_dtoa_r+0x648>)
 801c778:	b957      	cbnz	r7, 801c790 <_dtoa_r+0x388>
 801c77a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801c77e:	ec53 2b18 	vmov	r2, r3, d8
 801c782:	f7e4 f873 	bl	800086c <__aeabi_ddiv>
 801c786:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801c78a:	e029      	b.n	801c7e0 <_dtoa_r+0x3d8>
 801c78c:	2502      	movs	r5, #2
 801c78e:	e7f2      	b.n	801c776 <_dtoa_r+0x36e>
 801c790:	07f9      	lsls	r1, r7, #31
 801c792:	d508      	bpl.n	801c7a6 <_dtoa_r+0x39e>
 801c794:	ec51 0b18 	vmov	r0, r1, d8
 801c798:	e9d6 2300 	ldrd	r2, r3, [r6]
 801c79c:	f7e3 ff3c 	bl	8000618 <__aeabi_dmul>
 801c7a0:	ec41 0b18 	vmov	d8, r0, r1
 801c7a4:	3501      	adds	r5, #1
 801c7a6:	107f      	asrs	r7, r7, #1
 801c7a8:	3608      	adds	r6, #8
 801c7aa:	e7e5      	b.n	801c778 <_dtoa_r+0x370>
 801c7ac:	f000 80a6 	beq.w	801c8fc <_dtoa_r+0x4f4>
 801c7b0:	f1ca 0600 	rsb	r6, sl, #0
 801c7b4:	4ba5      	ldr	r3, [pc, #660]	; (801ca4c <_dtoa_r+0x644>)
 801c7b6:	4fa6      	ldr	r7, [pc, #664]	; (801ca50 <_dtoa_r+0x648>)
 801c7b8:	f006 020f 	and.w	r2, r6, #15
 801c7bc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801c7c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c7c4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801c7c8:	f7e3 ff26 	bl	8000618 <__aeabi_dmul>
 801c7cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801c7d0:	1136      	asrs	r6, r6, #4
 801c7d2:	2300      	movs	r3, #0
 801c7d4:	2502      	movs	r5, #2
 801c7d6:	2e00      	cmp	r6, #0
 801c7d8:	f040 8085 	bne.w	801c8e6 <_dtoa_r+0x4de>
 801c7dc:	2b00      	cmp	r3, #0
 801c7de:	d1d2      	bne.n	801c786 <_dtoa_r+0x37e>
 801c7e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c7e2:	2b00      	cmp	r3, #0
 801c7e4:	f000 808c 	beq.w	801c900 <_dtoa_r+0x4f8>
 801c7e8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801c7ec:	4b99      	ldr	r3, [pc, #612]	; (801ca54 <_dtoa_r+0x64c>)
 801c7ee:	2200      	movs	r2, #0
 801c7f0:	4630      	mov	r0, r6
 801c7f2:	4639      	mov	r1, r7
 801c7f4:	f7e4 f982 	bl	8000afc <__aeabi_dcmplt>
 801c7f8:	2800      	cmp	r0, #0
 801c7fa:	f000 8081 	beq.w	801c900 <_dtoa_r+0x4f8>
 801c7fe:	9b01      	ldr	r3, [sp, #4]
 801c800:	2b00      	cmp	r3, #0
 801c802:	d07d      	beq.n	801c900 <_dtoa_r+0x4f8>
 801c804:	f1b9 0f00 	cmp.w	r9, #0
 801c808:	dd3c      	ble.n	801c884 <_dtoa_r+0x47c>
 801c80a:	f10a 33ff 	add.w	r3, sl, #4294967295
 801c80e:	9307      	str	r3, [sp, #28]
 801c810:	2200      	movs	r2, #0
 801c812:	4b91      	ldr	r3, [pc, #580]	; (801ca58 <_dtoa_r+0x650>)
 801c814:	4630      	mov	r0, r6
 801c816:	4639      	mov	r1, r7
 801c818:	f7e3 fefe 	bl	8000618 <__aeabi_dmul>
 801c81c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801c820:	3501      	adds	r5, #1
 801c822:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 801c826:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801c82a:	4628      	mov	r0, r5
 801c82c:	f7e3 fe8a 	bl	8000544 <__aeabi_i2d>
 801c830:	4632      	mov	r2, r6
 801c832:	463b      	mov	r3, r7
 801c834:	f7e3 fef0 	bl	8000618 <__aeabi_dmul>
 801c838:	4b88      	ldr	r3, [pc, #544]	; (801ca5c <_dtoa_r+0x654>)
 801c83a:	2200      	movs	r2, #0
 801c83c:	f7e3 fd36 	bl	80002ac <__adddf3>
 801c840:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 801c844:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801c848:	9303      	str	r3, [sp, #12]
 801c84a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c84c:	2b00      	cmp	r3, #0
 801c84e:	d15c      	bne.n	801c90a <_dtoa_r+0x502>
 801c850:	4b83      	ldr	r3, [pc, #524]	; (801ca60 <_dtoa_r+0x658>)
 801c852:	2200      	movs	r2, #0
 801c854:	4630      	mov	r0, r6
 801c856:	4639      	mov	r1, r7
 801c858:	f7e3 fd26 	bl	80002a8 <__aeabi_dsub>
 801c85c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801c860:	4606      	mov	r6, r0
 801c862:	460f      	mov	r7, r1
 801c864:	f7e4 f968 	bl	8000b38 <__aeabi_dcmpgt>
 801c868:	2800      	cmp	r0, #0
 801c86a:	f040 8296 	bne.w	801cd9a <_dtoa_r+0x992>
 801c86e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 801c872:	4630      	mov	r0, r6
 801c874:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801c878:	4639      	mov	r1, r7
 801c87a:	f7e4 f93f 	bl	8000afc <__aeabi_dcmplt>
 801c87e:	2800      	cmp	r0, #0
 801c880:	f040 8288 	bne.w	801cd94 <_dtoa_r+0x98c>
 801c884:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801c888:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801c88c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801c88e:	2b00      	cmp	r3, #0
 801c890:	f2c0 8158 	blt.w	801cb44 <_dtoa_r+0x73c>
 801c894:	f1ba 0f0e 	cmp.w	sl, #14
 801c898:	f300 8154 	bgt.w	801cb44 <_dtoa_r+0x73c>
 801c89c:	4b6b      	ldr	r3, [pc, #428]	; (801ca4c <_dtoa_r+0x644>)
 801c89e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801c8a2:	e9d3 8900 	ldrd	r8, r9, [r3]
 801c8a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c8a8:	2b00      	cmp	r3, #0
 801c8aa:	f280 80e3 	bge.w	801ca74 <_dtoa_r+0x66c>
 801c8ae:	9b01      	ldr	r3, [sp, #4]
 801c8b0:	2b00      	cmp	r3, #0
 801c8b2:	f300 80df 	bgt.w	801ca74 <_dtoa_r+0x66c>
 801c8b6:	f040 826d 	bne.w	801cd94 <_dtoa_r+0x98c>
 801c8ba:	4b69      	ldr	r3, [pc, #420]	; (801ca60 <_dtoa_r+0x658>)
 801c8bc:	2200      	movs	r2, #0
 801c8be:	4640      	mov	r0, r8
 801c8c0:	4649      	mov	r1, r9
 801c8c2:	f7e3 fea9 	bl	8000618 <__aeabi_dmul>
 801c8c6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801c8ca:	f7e4 f92b 	bl	8000b24 <__aeabi_dcmpge>
 801c8ce:	9e01      	ldr	r6, [sp, #4]
 801c8d0:	4637      	mov	r7, r6
 801c8d2:	2800      	cmp	r0, #0
 801c8d4:	f040 8243 	bne.w	801cd5e <_dtoa_r+0x956>
 801c8d8:	9d00      	ldr	r5, [sp, #0]
 801c8da:	2331      	movs	r3, #49	; 0x31
 801c8dc:	f805 3b01 	strb.w	r3, [r5], #1
 801c8e0:	f10a 0a01 	add.w	sl, sl, #1
 801c8e4:	e23f      	b.n	801cd66 <_dtoa_r+0x95e>
 801c8e6:	07f2      	lsls	r2, r6, #31
 801c8e8:	d505      	bpl.n	801c8f6 <_dtoa_r+0x4ee>
 801c8ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 801c8ee:	f7e3 fe93 	bl	8000618 <__aeabi_dmul>
 801c8f2:	3501      	adds	r5, #1
 801c8f4:	2301      	movs	r3, #1
 801c8f6:	1076      	asrs	r6, r6, #1
 801c8f8:	3708      	adds	r7, #8
 801c8fa:	e76c      	b.n	801c7d6 <_dtoa_r+0x3ce>
 801c8fc:	2502      	movs	r5, #2
 801c8fe:	e76f      	b.n	801c7e0 <_dtoa_r+0x3d8>
 801c900:	9b01      	ldr	r3, [sp, #4]
 801c902:	f8cd a01c 	str.w	sl, [sp, #28]
 801c906:	930c      	str	r3, [sp, #48]	; 0x30
 801c908:	e78d      	b.n	801c826 <_dtoa_r+0x41e>
 801c90a:	9900      	ldr	r1, [sp, #0]
 801c90c:	980c      	ldr	r0, [sp, #48]	; 0x30
 801c90e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801c910:	4b4e      	ldr	r3, [pc, #312]	; (801ca4c <_dtoa_r+0x644>)
 801c912:	ed9d 7b02 	vldr	d7, [sp, #8]
 801c916:	4401      	add	r1, r0
 801c918:	9102      	str	r1, [sp, #8]
 801c91a:	9908      	ldr	r1, [sp, #32]
 801c91c:	eeb0 8a47 	vmov.f32	s16, s14
 801c920:	eef0 8a67 	vmov.f32	s17, s15
 801c924:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801c928:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801c92c:	2900      	cmp	r1, #0
 801c92e:	d045      	beq.n	801c9bc <_dtoa_r+0x5b4>
 801c930:	494c      	ldr	r1, [pc, #304]	; (801ca64 <_dtoa_r+0x65c>)
 801c932:	2000      	movs	r0, #0
 801c934:	f7e3 ff9a 	bl	800086c <__aeabi_ddiv>
 801c938:	ec53 2b18 	vmov	r2, r3, d8
 801c93c:	f7e3 fcb4 	bl	80002a8 <__aeabi_dsub>
 801c940:	9d00      	ldr	r5, [sp, #0]
 801c942:	ec41 0b18 	vmov	d8, r0, r1
 801c946:	4639      	mov	r1, r7
 801c948:	4630      	mov	r0, r6
 801c94a:	f7e4 f915 	bl	8000b78 <__aeabi_d2iz>
 801c94e:	900c      	str	r0, [sp, #48]	; 0x30
 801c950:	f7e3 fdf8 	bl	8000544 <__aeabi_i2d>
 801c954:	4602      	mov	r2, r0
 801c956:	460b      	mov	r3, r1
 801c958:	4630      	mov	r0, r6
 801c95a:	4639      	mov	r1, r7
 801c95c:	f7e3 fca4 	bl	80002a8 <__aeabi_dsub>
 801c960:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c962:	3330      	adds	r3, #48	; 0x30
 801c964:	f805 3b01 	strb.w	r3, [r5], #1
 801c968:	ec53 2b18 	vmov	r2, r3, d8
 801c96c:	4606      	mov	r6, r0
 801c96e:	460f      	mov	r7, r1
 801c970:	f7e4 f8c4 	bl	8000afc <__aeabi_dcmplt>
 801c974:	2800      	cmp	r0, #0
 801c976:	d165      	bne.n	801ca44 <_dtoa_r+0x63c>
 801c978:	4632      	mov	r2, r6
 801c97a:	463b      	mov	r3, r7
 801c97c:	4935      	ldr	r1, [pc, #212]	; (801ca54 <_dtoa_r+0x64c>)
 801c97e:	2000      	movs	r0, #0
 801c980:	f7e3 fc92 	bl	80002a8 <__aeabi_dsub>
 801c984:	ec53 2b18 	vmov	r2, r3, d8
 801c988:	f7e4 f8b8 	bl	8000afc <__aeabi_dcmplt>
 801c98c:	2800      	cmp	r0, #0
 801c98e:	f040 80b9 	bne.w	801cb04 <_dtoa_r+0x6fc>
 801c992:	9b02      	ldr	r3, [sp, #8]
 801c994:	429d      	cmp	r5, r3
 801c996:	f43f af75 	beq.w	801c884 <_dtoa_r+0x47c>
 801c99a:	4b2f      	ldr	r3, [pc, #188]	; (801ca58 <_dtoa_r+0x650>)
 801c99c:	ec51 0b18 	vmov	r0, r1, d8
 801c9a0:	2200      	movs	r2, #0
 801c9a2:	f7e3 fe39 	bl	8000618 <__aeabi_dmul>
 801c9a6:	4b2c      	ldr	r3, [pc, #176]	; (801ca58 <_dtoa_r+0x650>)
 801c9a8:	ec41 0b18 	vmov	d8, r0, r1
 801c9ac:	2200      	movs	r2, #0
 801c9ae:	4630      	mov	r0, r6
 801c9b0:	4639      	mov	r1, r7
 801c9b2:	f7e3 fe31 	bl	8000618 <__aeabi_dmul>
 801c9b6:	4606      	mov	r6, r0
 801c9b8:	460f      	mov	r7, r1
 801c9ba:	e7c4      	b.n	801c946 <_dtoa_r+0x53e>
 801c9bc:	ec51 0b17 	vmov	r0, r1, d7
 801c9c0:	f7e3 fe2a 	bl	8000618 <__aeabi_dmul>
 801c9c4:	9b02      	ldr	r3, [sp, #8]
 801c9c6:	9d00      	ldr	r5, [sp, #0]
 801c9c8:	930c      	str	r3, [sp, #48]	; 0x30
 801c9ca:	ec41 0b18 	vmov	d8, r0, r1
 801c9ce:	4639      	mov	r1, r7
 801c9d0:	4630      	mov	r0, r6
 801c9d2:	f7e4 f8d1 	bl	8000b78 <__aeabi_d2iz>
 801c9d6:	9011      	str	r0, [sp, #68]	; 0x44
 801c9d8:	f7e3 fdb4 	bl	8000544 <__aeabi_i2d>
 801c9dc:	4602      	mov	r2, r0
 801c9de:	460b      	mov	r3, r1
 801c9e0:	4630      	mov	r0, r6
 801c9e2:	4639      	mov	r1, r7
 801c9e4:	f7e3 fc60 	bl	80002a8 <__aeabi_dsub>
 801c9e8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801c9ea:	3330      	adds	r3, #48	; 0x30
 801c9ec:	f805 3b01 	strb.w	r3, [r5], #1
 801c9f0:	9b02      	ldr	r3, [sp, #8]
 801c9f2:	429d      	cmp	r5, r3
 801c9f4:	4606      	mov	r6, r0
 801c9f6:	460f      	mov	r7, r1
 801c9f8:	f04f 0200 	mov.w	r2, #0
 801c9fc:	d134      	bne.n	801ca68 <_dtoa_r+0x660>
 801c9fe:	4b19      	ldr	r3, [pc, #100]	; (801ca64 <_dtoa_r+0x65c>)
 801ca00:	ec51 0b18 	vmov	r0, r1, d8
 801ca04:	f7e3 fc52 	bl	80002ac <__adddf3>
 801ca08:	4602      	mov	r2, r0
 801ca0a:	460b      	mov	r3, r1
 801ca0c:	4630      	mov	r0, r6
 801ca0e:	4639      	mov	r1, r7
 801ca10:	f7e4 f892 	bl	8000b38 <__aeabi_dcmpgt>
 801ca14:	2800      	cmp	r0, #0
 801ca16:	d175      	bne.n	801cb04 <_dtoa_r+0x6fc>
 801ca18:	ec53 2b18 	vmov	r2, r3, d8
 801ca1c:	4911      	ldr	r1, [pc, #68]	; (801ca64 <_dtoa_r+0x65c>)
 801ca1e:	2000      	movs	r0, #0
 801ca20:	f7e3 fc42 	bl	80002a8 <__aeabi_dsub>
 801ca24:	4602      	mov	r2, r0
 801ca26:	460b      	mov	r3, r1
 801ca28:	4630      	mov	r0, r6
 801ca2a:	4639      	mov	r1, r7
 801ca2c:	f7e4 f866 	bl	8000afc <__aeabi_dcmplt>
 801ca30:	2800      	cmp	r0, #0
 801ca32:	f43f af27 	beq.w	801c884 <_dtoa_r+0x47c>
 801ca36:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801ca38:	1e6b      	subs	r3, r5, #1
 801ca3a:	930c      	str	r3, [sp, #48]	; 0x30
 801ca3c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801ca40:	2b30      	cmp	r3, #48	; 0x30
 801ca42:	d0f8      	beq.n	801ca36 <_dtoa_r+0x62e>
 801ca44:	f8dd a01c 	ldr.w	sl, [sp, #28]
 801ca48:	e04a      	b.n	801cae0 <_dtoa_r+0x6d8>
 801ca4a:	bf00      	nop
 801ca4c:	08024380 	.word	0x08024380
 801ca50:	08024358 	.word	0x08024358
 801ca54:	3ff00000 	.word	0x3ff00000
 801ca58:	40240000 	.word	0x40240000
 801ca5c:	401c0000 	.word	0x401c0000
 801ca60:	40140000 	.word	0x40140000
 801ca64:	3fe00000 	.word	0x3fe00000
 801ca68:	4baf      	ldr	r3, [pc, #700]	; (801cd28 <_dtoa_r+0x920>)
 801ca6a:	f7e3 fdd5 	bl	8000618 <__aeabi_dmul>
 801ca6e:	4606      	mov	r6, r0
 801ca70:	460f      	mov	r7, r1
 801ca72:	e7ac      	b.n	801c9ce <_dtoa_r+0x5c6>
 801ca74:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801ca78:	9d00      	ldr	r5, [sp, #0]
 801ca7a:	4642      	mov	r2, r8
 801ca7c:	464b      	mov	r3, r9
 801ca7e:	4630      	mov	r0, r6
 801ca80:	4639      	mov	r1, r7
 801ca82:	f7e3 fef3 	bl	800086c <__aeabi_ddiv>
 801ca86:	f7e4 f877 	bl	8000b78 <__aeabi_d2iz>
 801ca8a:	9002      	str	r0, [sp, #8]
 801ca8c:	f7e3 fd5a 	bl	8000544 <__aeabi_i2d>
 801ca90:	4642      	mov	r2, r8
 801ca92:	464b      	mov	r3, r9
 801ca94:	f7e3 fdc0 	bl	8000618 <__aeabi_dmul>
 801ca98:	4602      	mov	r2, r0
 801ca9a:	460b      	mov	r3, r1
 801ca9c:	4630      	mov	r0, r6
 801ca9e:	4639      	mov	r1, r7
 801caa0:	f7e3 fc02 	bl	80002a8 <__aeabi_dsub>
 801caa4:	9e02      	ldr	r6, [sp, #8]
 801caa6:	9f01      	ldr	r7, [sp, #4]
 801caa8:	3630      	adds	r6, #48	; 0x30
 801caaa:	f805 6b01 	strb.w	r6, [r5], #1
 801caae:	9e00      	ldr	r6, [sp, #0]
 801cab0:	1bae      	subs	r6, r5, r6
 801cab2:	42b7      	cmp	r7, r6
 801cab4:	4602      	mov	r2, r0
 801cab6:	460b      	mov	r3, r1
 801cab8:	d137      	bne.n	801cb2a <_dtoa_r+0x722>
 801caba:	f7e3 fbf7 	bl	80002ac <__adddf3>
 801cabe:	4642      	mov	r2, r8
 801cac0:	464b      	mov	r3, r9
 801cac2:	4606      	mov	r6, r0
 801cac4:	460f      	mov	r7, r1
 801cac6:	f7e4 f837 	bl	8000b38 <__aeabi_dcmpgt>
 801caca:	b9c8      	cbnz	r0, 801cb00 <_dtoa_r+0x6f8>
 801cacc:	4642      	mov	r2, r8
 801cace:	464b      	mov	r3, r9
 801cad0:	4630      	mov	r0, r6
 801cad2:	4639      	mov	r1, r7
 801cad4:	f7e4 f808 	bl	8000ae8 <__aeabi_dcmpeq>
 801cad8:	b110      	cbz	r0, 801cae0 <_dtoa_r+0x6d8>
 801cada:	9b02      	ldr	r3, [sp, #8]
 801cadc:	07d9      	lsls	r1, r3, #31
 801cade:	d40f      	bmi.n	801cb00 <_dtoa_r+0x6f8>
 801cae0:	4620      	mov	r0, r4
 801cae2:	4659      	mov	r1, fp
 801cae4:	f000 ff5e 	bl	801d9a4 <_Bfree>
 801cae8:	2300      	movs	r3, #0
 801caea:	702b      	strb	r3, [r5, #0]
 801caec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801caee:	f10a 0001 	add.w	r0, sl, #1
 801caf2:	6018      	str	r0, [r3, #0]
 801caf4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801caf6:	2b00      	cmp	r3, #0
 801caf8:	f43f acd8 	beq.w	801c4ac <_dtoa_r+0xa4>
 801cafc:	601d      	str	r5, [r3, #0]
 801cafe:	e4d5      	b.n	801c4ac <_dtoa_r+0xa4>
 801cb00:	f8cd a01c 	str.w	sl, [sp, #28]
 801cb04:	462b      	mov	r3, r5
 801cb06:	461d      	mov	r5, r3
 801cb08:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801cb0c:	2a39      	cmp	r2, #57	; 0x39
 801cb0e:	d108      	bne.n	801cb22 <_dtoa_r+0x71a>
 801cb10:	9a00      	ldr	r2, [sp, #0]
 801cb12:	429a      	cmp	r2, r3
 801cb14:	d1f7      	bne.n	801cb06 <_dtoa_r+0x6fe>
 801cb16:	9a07      	ldr	r2, [sp, #28]
 801cb18:	9900      	ldr	r1, [sp, #0]
 801cb1a:	3201      	adds	r2, #1
 801cb1c:	9207      	str	r2, [sp, #28]
 801cb1e:	2230      	movs	r2, #48	; 0x30
 801cb20:	700a      	strb	r2, [r1, #0]
 801cb22:	781a      	ldrb	r2, [r3, #0]
 801cb24:	3201      	adds	r2, #1
 801cb26:	701a      	strb	r2, [r3, #0]
 801cb28:	e78c      	b.n	801ca44 <_dtoa_r+0x63c>
 801cb2a:	4b7f      	ldr	r3, [pc, #508]	; (801cd28 <_dtoa_r+0x920>)
 801cb2c:	2200      	movs	r2, #0
 801cb2e:	f7e3 fd73 	bl	8000618 <__aeabi_dmul>
 801cb32:	2200      	movs	r2, #0
 801cb34:	2300      	movs	r3, #0
 801cb36:	4606      	mov	r6, r0
 801cb38:	460f      	mov	r7, r1
 801cb3a:	f7e3 ffd5 	bl	8000ae8 <__aeabi_dcmpeq>
 801cb3e:	2800      	cmp	r0, #0
 801cb40:	d09b      	beq.n	801ca7a <_dtoa_r+0x672>
 801cb42:	e7cd      	b.n	801cae0 <_dtoa_r+0x6d8>
 801cb44:	9a08      	ldr	r2, [sp, #32]
 801cb46:	2a00      	cmp	r2, #0
 801cb48:	f000 80c4 	beq.w	801ccd4 <_dtoa_r+0x8cc>
 801cb4c:	9a05      	ldr	r2, [sp, #20]
 801cb4e:	2a01      	cmp	r2, #1
 801cb50:	f300 80a8 	bgt.w	801cca4 <_dtoa_r+0x89c>
 801cb54:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801cb56:	2a00      	cmp	r2, #0
 801cb58:	f000 80a0 	beq.w	801cc9c <_dtoa_r+0x894>
 801cb5c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801cb60:	9e06      	ldr	r6, [sp, #24]
 801cb62:	4645      	mov	r5, r8
 801cb64:	9a04      	ldr	r2, [sp, #16]
 801cb66:	2101      	movs	r1, #1
 801cb68:	441a      	add	r2, r3
 801cb6a:	4620      	mov	r0, r4
 801cb6c:	4498      	add	r8, r3
 801cb6e:	9204      	str	r2, [sp, #16]
 801cb70:	f001 f81e 	bl	801dbb0 <__i2b>
 801cb74:	4607      	mov	r7, r0
 801cb76:	2d00      	cmp	r5, #0
 801cb78:	dd0b      	ble.n	801cb92 <_dtoa_r+0x78a>
 801cb7a:	9b04      	ldr	r3, [sp, #16]
 801cb7c:	2b00      	cmp	r3, #0
 801cb7e:	dd08      	ble.n	801cb92 <_dtoa_r+0x78a>
 801cb80:	42ab      	cmp	r3, r5
 801cb82:	9a04      	ldr	r2, [sp, #16]
 801cb84:	bfa8      	it	ge
 801cb86:	462b      	movge	r3, r5
 801cb88:	eba8 0803 	sub.w	r8, r8, r3
 801cb8c:	1aed      	subs	r5, r5, r3
 801cb8e:	1ad3      	subs	r3, r2, r3
 801cb90:	9304      	str	r3, [sp, #16]
 801cb92:	9b06      	ldr	r3, [sp, #24]
 801cb94:	b1fb      	cbz	r3, 801cbd6 <_dtoa_r+0x7ce>
 801cb96:	9b08      	ldr	r3, [sp, #32]
 801cb98:	2b00      	cmp	r3, #0
 801cb9a:	f000 809f 	beq.w	801ccdc <_dtoa_r+0x8d4>
 801cb9e:	2e00      	cmp	r6, #0
 801cba0:	dd11      	ble.n	801cbc6 <_dtoa_r+0x7be>
 801cba2:	4639      	mov	r1, r7
 801cba4:	4632      	mov	r2, r6
 801cba6:	4620      	mov	r0, r4
 801cba8:	f001 f8be 	bl	801dd28 <__pow5mult>
 801cbac:	465a      	mov	r2, fp
 801cbae:	4601      	mov	r1, r0
 801cbb0:	4607      	mov	r7, r0
 801cbb2:	4620      	mov	r0, r4
 801cbb4:	f001 f812 	bl	801dbdc <__multiply>
 801cbb8:	4659      	mov	r1, fp
 801cbba:	9007      	str	r0, [sp, #28]
 801cbbc:	4620      	mov	r0, r4
 801cbbe:	f000 fef1 	bl	801d9a4 <_Bfree>
 801cbc2:	9b07      	ldr	r3, [sp, #28]
 801cbc4:	469b      	mov	fp, r3
 801cbc6:	9b06      	ldr	r3, [sp, #24]
 801cbc8:	1b9a      	subs	r2, r3, r6
 801cbca:	d004      	beq.n	801cbd6 <_dtoa_r+0x7ce>
 801cbcc:	4659      	mov	r1, fp
 801cbce:	4620      	mov	r0, r4
 801cbd0:	f001 f8aa 	bl	801dd28 <__pow5mult>
 801cbd4:	4683      	mov	fp, r0
 801cbd6:	2101      	movs	r1, #1
 801cbd8:	4620      	mov	r0, r4
 801cbda:	f000 ffe9 	bl	801dbb0 <__i2b>
 801cbde:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801cbe0:	2b00      	cmp	r3, #0
 801cbe2:	4606      	mov	r6, r0
 801cbe4:	dd7c      	ble.n	801cce0 <_dtoa_r+0x8d8>
 801cbe6:	461a      	mov	r2, r3
 801cbe8:	4601      	mov	r1, r0
 801cbea:	4620      	mov	r0, r4
 801cbec:	f001 f89c 	bl	801dd28 <__pow5mult>
 801cbf0:	9b05      	ldr	r3, [sp, #20]
 801cbf2:	2b01      	cmp	r3, #1
 801cbf4:	4606      	mov	r6, r0
 801cbf6:	dd76      	ble.n	801cce6 <_dtoa_r+0x8de>
 801cbf8:	2300      	movs	r3, #0
 801cbfa:	9306      	str	r3, [sp, #24]
 801cbfc:	6933      	ldr	r3, [r6, #16]
 801cbfe:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801cc02:	6918      	ldr	r0, [r3, #16]
 801cc04:	f000 ff84 	bl	801db10 <__hi0bits>
 801cc08:	f1c0 0020 	rsb	r0, r0, #32
 801cc0c:	9b04      	ldr	r3, [sp, #16]
 801cc0e:	4418      	add	r0, r3
 801cc10:	f010 001f 	ands.w	r0, r0, #31
 801cc14:	f000 8086 	beq.w	801cd24 <_dtoa_r+0x91c>
 801cc18:	f1c0 0320 	rsb	r3, r0, #32
 801cc1c:	2b04      	cmp	r3, #4
 801cc1e:	dd7f      	ble.n	801cd20 <_dtoa_r+0x918>
 801cc20:	f1c0 001c 	rsb	r0, r0, #28
 801cc24:	9b04      	ldr	r3, [sp, #16]
 801cc26:	4403      	add	r3, r0
 801cc28:	4480      	add	r8, r0
 801cc2a:	4405      	add	r5, r0
 801cc2c:	9304      	str	r3, [sp, #16]
 801cc2e:	f1b8 0f00 	cmp.w	r8, #0
 801cc32:	dd05      	ble.n	801cc40 <_dtoa_r+0x838>
 801cc34:	4659      	mov	r1, fp
 801cc36:	4642      	mov	r2, r8
 801cc38:	4620      	mov	r0, r4
 801cc3a:	f001 f8cf 	bl	801dddc <__lshift>
 801cc3e:	4683      	mov	fp, r0
 801cc40:	9b04      	ldr	r3, [sp, #16]
 801cc42:	2b00      	cmp	r3, #0
 801cc44:	dd05      	ble.n	801cc52 <_dtoa_r+0x84a>
 801cc46:	4631      	mov	r1, r6
 801cc48:	461a      	mov	r2, r3
 801cc4a:	4620      	mov	r0, r4
 801cc4c:	f001 f8c6 	bl	801dddc <__lshift>
 801cc50:	4606      	mov	r6, r0
 801cc52:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801cc54:	2b00      	cmp	r3, #0
 801cc56:	d069      	beq.n	801cd2c <_dtoa_r+0x924>
 801cc58:	4631      	mov	r1, r6
 801cc5a:	4658      	mov	r0, fp
 801cc5c:	f001 f92a 	bl	801deb4 <__mcmp>
 801cc60:	2800      	cmp	r0, #0
 801cc62:	da63      	bge.n	801cd2c <_dtoa_r+0x924>
 801cc64:	2300      	movs	r3, #0
 801cc66:	4659      	mov	r1, fp
 801cc68:	220a      	movs	r2, #10
 801cc6a:	4620      	mov	r0, r4
 801cc6c:	f000 febc 	bl	801d9e8 <__multadd>
 801cc70:	9b08      	ldr	r3, [sp, #32]
 801cc72:	f10a 3aff 	add.w	sl, sl, #4294967295
 801cc76:	4683      	mov	fp, r0
 801cc78:	2b00      	cmp	r3, #0
 801cc7a:	f000 818f 	beq.w	801cf9c <_dtoa_r+0xb94>
 801cc7e:	4639      	mov	r1, r7
 801cc80:	2300      	movs	r3, #0
 801cc82:	220a      	movs	r2, #10
 801cc84:	4620      	mov	r0, r4
 801cc86:	f000 feaf 	bl	801d9e8 <__multadd>
 801cc8a:	f1b9 0f00 	cmp.w	r9, #0
 801cc8e:	4607      	mov	r7, r0
 801cc90:	f300 808e 	bgt.w	801cdb0 <_dtoa_r+0x9a8>
 801cc94:	9b05      	ldr	r3, [sp, #20]
 801cc96:	2b02      	cmp	r3, #2
 801cc98:	dc50      	bgt.n	801cd3c <_dtoa_r+0x934>
 801cc9a:	e089      	b.n	801cdb0 <_dtoa_r+0x9a8>
 801cc9c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801cc9e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801cca2:	e75d      	b.n	801cb60 <_dtoa_r+0x758>
 801cca4:	9b01      	ldr	r3, [sp, #4]
 801cca6:	1e5e      	subs	r6, r3, #1
 801cca8:	9b06      	ldr	r3, [sp, #24]
 801ccaa:	42b3      	cmp	r3, r6
 801ccac:	bfbf      	itttt	lt
 801ccae:	9b06      	ldrlt	r3, [sp, #24]
 801ccb0:	9606      	strlt	r6, [sp, #24]
 801ccb2:	1af2      	sublt	r2, r6, r3
 801ccb4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 801ccb6:	bfb6      	itet	lt
 801ccb8:	189b      	addlt	r3, r3, r2
 801ccba:	1b9e      	subge	r6, r3, r6
 801ccbc:	930d      	strlt	r3, [sp, #52]	; 0x34
 801ccbe:	9b01      	ldr	r3, [sp, #4]
 801ccc0:	bfb8      	it	lt
 801ccc2:	2600      	movlt	r6, #0
 801ccc4:	2b00      	cmp	r3, #0
 801ccc6:	bfb5      	itete	lt
 801ccc8:	eba8 0503 	sublt.w	r5, r8, r3
 801cccc:	9b01      	ldrge	r3, [sp, #4]
 801ccce:	2300      	movlt	r3, #0
 801ccd0:	4645      	movge	r5, r8
 801ccd2:	e747      	b.n	801cb64 <_dtoa_r+0x75c>
 801ccd4:	9e06      	ldr	r6, [sp, #24]
 801ccd6:	9f08      	ldr	r7, [sp, #32]
 801ccd8:	4645      	mov	r5, r8
 801ccda:	e74c      	b.n	801cb76 <_dtoa_r+0x76e>
 801ccdc:	9a06      	ldr	r2, [sp, #24]
 801ccde:	e775      	b.n	801cbcc <_dtoa_r+0x7c4>
 801cce0:	9b05      	ldr	r3, [sp, #20]
 801cce2:	2b01      	cmp	r3, #1
 801cce4:	dc18      	bgt.n	801cd18 <_dtoa_r+0x910>
 801cce6:	9b02      	ldr	r3, [sp, #8]
 801cce8:	b9b3      	cbnz	r3, 801cd18 <_dtoa_r+0x910>
 801ccea:	9b03      	ldr	r3, [sp, #12]
 801ccec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801ccf0:	b9a3      	cbnz	r3, 801cd1c <_dtoa_r+0x914>
 801ccf2:	9b03      	ldr	r3, [sp, #12]
 801ccf4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801ccf8:	0d1b      	lsrs	r3, r3, #20
 801ccfa:	051b      	lsls	r3, r3, #20
 801ccfc:	b12b      	cbz	r3, 801cd0a <_dtoa_r+0x902>
 801ccfe:	9b04      	ldr	r3, [sp, #16]
 801cd00:	3301      	adds	r3, #1
 801cd02:	9304      	str	r3, [sp, #16]
 801cd04:	f108 0801 	add.w	r8, r8, #1
 801cd08:	2301      	movs	r3, #1
 801cd0a:	9306      	str	r3, [sp, #24]
 801cd0c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801cd0e:	2b00      	cmp	r3, #0
 801cd10:	f47f af74 	bne.w	801cbfc <_dtoa_r+0x7f4>
 801cd14:	2001      	movs	r0, #1
 801cd16:	e779      	b.n	801cc0c <_dtoa_r+0x804>
 801cd18:	2300      	movs	r3, #0
 801cd1a:	e7f6      	b.n	801cd0a <_dtoa_r+0x902>
 801cd1c:	9b02      	ldr	r3, [sp, #8]
 801cd1e:	e7f4      	b.n	801cd0a <_dtoa_r+0x902>
 801cd20:	d085      	beq.n	801cc2e <_dtoa_r+0x826>
 801cd22:	4618      	mov	r0, r3
 801cd24:	301c      	adds	r0, #28
 801cd26:	e77d      	b.n	801cc24 <_dtoa_r+0x81c>
 801cd28:	40240000 	.word	0x40240000
 801cd2c:	9b01      	ldr	r3, [sp, #4]
 801cd2e:	2b00      	cmp	r3, #0
 801cd30:	dc38      	bgt.n	801cda4 <_dtoa_r+0x99c>
 801cd32:	9b05      	ldr	r3, [sp, #20]
 801cd34:	2b02      	cmp	r3, #2
 801cd36:	dd35      	ble.n	801cda4 <_dtoa_r+0x99c>
 801cd38:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801cd3c:	f1b9 0f00 	cmp.w	r9, #0
 801cd40:	d10d      	bne.n	801cd5e <_dtoa_r+0x956>
 801cd42:	4631      	mov	r1, r6
 801cd44:	464b      	mov	r3, r9
 801cd46:	2205      	movs	r2, #5
 801cd48:	4620      	mov	r0, r4
 801cd4a:	f000 fe4d 	bl	801d9e8 <__multadd>
 801cd4e:	4601      	mov	r1, r0
 801cd50:	4606      	mov	r6, r0
 801cd52:	4658      	mov	r0, fp
 801cd54:	f001 f8ae 	bl	801deb4 <__mcmp>
 801cd58:	2800      	cmp	r0, #0
 801cd5a:	f73f adbd 	bgt.w	801c8d8 <_dtoa_r+0x4d0>
 801cd5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801cd60:	9d00      	ldr	r5, [sp, #0]
 801cd62:	ea6f 0a03 	mvn.w	sl, r3
 801cd66:	f04f 0800 	mov.w	r8, #0
 801cd6a:	4631      	mov	r1, r6
 801cd6c:	4620      	mov	r0, r4
 801cd6e:	f000 fe19 	bl	801d9a4 <_Bfree>
 801cd72:	2f00      	cmp	r7, #0
 801cd74:	f43f aeb4 	beq.w	801cae0 <_dtoa_r+0x6d8>
 801cd78:	f1b8 0f00 	cmp.w	r8, #0
 801cd7c:	d005      	beq.n	801cd8a <_dtoa_r+0x982>
 801cd7e:	45b8      	cmp	r8, r7
 801cd80:	d003      	beq.n	801cd8a <_dtoa_r+0x982>
 801cd82:	4641      	mov	r1, r8
 801cd84:	4620      	mov	r0, r4
 801cd86:	f000 fe0d 	bl	801d9a4 <_Bfree>
 801cd8a:	4639      	mov	r1, r7
 801cd8c:	4620      	mov	r0, r4
 801cd8e:	f000 fe09 	bl	801d9a4 <_Bfree>
 801cd92:	e6a5      	b.n	801cae0 <_dtoa_r+0x6d8>
 801cd94:	2600      	movs	r6, #0
 801cd96:	4637      	mov	r7, r6
 801cd98:	e7e1      	b.n	801cd5e <_dtoa_r+0x956>
 801cd9a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801cd9c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 801cda0:	4637      	mov	r7, r6
 801cda2:	e599      	b.n	801c8d8 <_dtoa_r+0x4d0>
 801cda4:	9b08      	ldr	r3, [sp, #32]
 801cda6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801cdaa:	2b00      	cmp	r3, #0
 801cdac:	f000 80fd 	beq.w	801cfaa <_dtoa_r+0xba2>
 801cdb0:	2d00      	cmp	r5, #0
 801cdb2:	dd05      	ble.n	801cdc0 <_dtoa_r+0x9b8>
 801cdb4:	4639      	mov	r1, r7
 801cdb6:	462a      	mov	r2, r5
 801cdb8:	4620      	mov	r0, r4
 801cdba:	f001 f80f 	bl	801dddc <__lshift>
 801cdbe:	4607      	mov	r7, r0
 801cdc0:	9b06      	ldr	r3, [sp, #24]
 801cdc2:	2b00      	cmp	r3, #0
 801cdc4:	d05c      	beq.n	801ce80 <_dtoa_r+0xa78>
 801cdc6:	6879      	ldr	r1, [r7, #4]
 801cdc8:	4620      	mov	r0, r4
 801cdca:	f000 fdab 	bl	801d924 <_Balloc>
 801cdce:	4605      	mov	r5, r0
 801cdd0:	b928      	cbnz	r0, 801cdde <_dtoa_r+0x9d6>
 801cdd2:	4b80      	ldr	r3, [pc, #512]	; (801cfd4 <_dtoa_r+0xbcc>)
 801cdd4:	4602      	mov	r2, r0
 801cdd6:	f240 21ea 	movw	r1, #746	; 0x2ea
 801cdda:	f7ff bb2e 	b.w	801c43a <_dtoa_r+0x32>
 801cdde:	693a      	ldr	r2, [r7, #16]
 801cde0:	3202      	adds	r2, #2
 801cde2:	0092      	lsls	r2, r2, #2
 801cde4:	f107 010c 	add.w	r1, r7, #12
 801cde8:	300c      	adds	r0, #12
 801cdea:	f7fd fd75 	bl	801a8d8 <memcpy>
 801cdee:	2201      	movs	r2, #1
 801cdf0:	4629      	mov	r1, r5
 801cdf2:	4620      	mov	r0, r4
 801cdf4:	f000 fff2 	bl	801dddc <__lshift>
 801cdf8:	9b00      	ldr	r3, [sp, #0]
 801cdfa:	3301      	adds	r3, #1
 801cdfc:	9301      	str	r3, [sp, #4]
 801cdfe:	9b00      	ldr	r3, [sp, #0]
 801ce00:	444b      	add	r3, r9
 801ce02:	9307      	str	r3, [sp, #28]
 801ce04:	9b02      	ldr	r3, [sp, #8]
 801ce06:	f003 0301 	and.w	r3, r3, #1
 801ce0a:	46b8      	mov	r8, r7
 801ce0c:	9306      	str	r3, [sp, #24]
 801ce0e:	4607      	mov	r7, r0
 801ce10:	9b01      	ldr	r3, [sp, #4]
 801ce12:	4631      	mov	r1, r6
 801ce14:	3b01      	subs	r3, #1
 801ce16:	4658      	mov	r0, fp
 801ce18:	9302      	str	r3, [sp, #8]
 801ce1a:	f7ff fa67 	bl	801c2ec <quorem>
 801ce1e:	4603      	mov	r3, r0
 801ce20:	3330      	adds	r3, #48	; 0x30
 801ce22:	9004      	str	r0, [sp, #16]
 801ce24:	4641      	mov	r1, r8
 801ce26:	4658      	mov	r0, fp
 801ce28:	9308      	str	r3, [sp, #32]
 801ce2a:	f001 f843 	bl	801deb4 <__mcmp>
 801ce2e:	463a      	mov	r2, r7
 801ce30:	4681      	mov	r9, r0
 801ce32:	4631      	mov	r1, r6
 801ce34:	4620      	mov	r0, r4
 801ce36:	f001 f859 	bl	801deec <__mdiff>
 801ce3a:	68c2      	ldr	r2, [r0, #12]
 801ce3c:	9b08      	ldr	r3, [sp, #32]
 801ce3e:	4605      	mov	r5, r0
 801ce40:	bb02      	cbnz	r2, 801ce84 <_dtoa_r+0xa7c>
 801ce42:	4601      	mov	r1, r0
 801ce44:	4658      	mov	r0, fp
 801ce46:	f001 f835 	bl	801deb4 <__mcmp>
 801ce4a:	9b08      	ldr	r3, [sp, #32]
 801ce4c:	4602      	mov	r2, r0
 801ce4e:	4629      	mov	r1, r5
 801ce50:	4620      	mov	r0, r4
 801ce52:	e9cd 3208 	strd	r3, r2, [sp, #32]
 801ce56:	f000 fda5 	bl	801d9a4 <_Bfree>
 801ce5a:	9b05      	ldr	r3, [sp, #20]
 801ce5c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801ce5e:	9d01      	ldr	r5, [sp, #4]
 801ce60:	ea43 0102 	orr.w	r1, r3, r2
 801ce64:	9b06      	ldr	r3, [sp, #24]
 801ce66:	430b      	orrs	r3, r1
 801ce68:	9b08      	ldr	r3, [sp, #32]
 801ce6a:	d10d      	bne.n	801ce88 <_dtoa_r+0xa80>
 801ce6c:	2b39      	cmp	r3, #57	; 0x39
 801ce6e:	d029      	beq.n	801cec4 <_dtoa_r+0xabc>
 801ce70:	f1b9 0f00 	cmp.w	r9, #0
 801ce74:	dd01      	ble.n	801ce7a <_dtoa_r+0xa72>
 801ce76:	9b04      	ldr	r3, [sp, #16]
 801ce78:	3331      	adds	r3, #49	; 0x31
 801ce7a:	9a02      	ldr	r2, [sp, #8]
 801ce7c:	7013      	strb	r3, [r2, #0]
 801ce7e:	e774      	b.n	801cd6a <_dtoa_r+0x962>
 801ce80:	4638      	mov	r0, r7
 801ce82:	e7b9      	b.n	801cdf8 <_dtoa_r+0x9f0>
 801ce84:	2201      	movs	r2, #1
 801ce86:	e7e2      	b.n	801ce4e <_dtoa_r+0xa46>
 801ce88:	f1b9 0f00 	cmp.w	r9, #0
 801ce8c:	db06      	blt.n	801ce9c <_dtoa_r+0xa94>
 801ce8e:	9905      	ldr	r1, [sp, #20]
 801ce90:	ea41 0909 	orr.w	r9, r1, r9
 801ce94:	9906      	ldr	r1, [sp, #24]
 801ce96:	ea59 0101 	orrs.w	r1, r9, r1
 801ce9a:	d120      	bne.n	801cede <_dtoa_r+0xad6>
 801ce9c:	2a00      	cmp	r2, #0
 801ce9e:	ddec      	ble.n	801ce7a <_dtoa_r+0xa72>
 801cea0:	4659      	mov	r1, fp
 801cea2:	2201      	movs	r2, #1
 801cea4:	4620      	mov	r0, r4
 801cea6:	9301      	str	r3, [sp, #4]
 801cea8:	f000 ff98 	bl	801dddc <__lshift>
 801ceac:	4631      	mov	r1, r6
 801ceae:	4683      	mov	fp, r0
 801ceb0:	f001 f800 	bl	801deb4 <__mcmp>
 801ceb4:	2800      	cmp	r0, #0
 801ceb6:	9b01      	ldr	r3, [sp, #4]
 801ceb8:	dc02      	bgt.n	801cec0 <_dtoa_r+0xab8>
 801ceba:	d1de      	bne.n	801ce7a <_dtoa_r+0xa72>
 801cebc:	07da      	lsls	r2, r3, #31
 801cebe:	d5dc      	bpl.n	801ce7a <_dtoa_r+0xa72>
 801cec0:	2b39      	cmp	r3, #57	; 0x39
 801cec2:	d1d8      	bne.n	801ce76 <_dtoa_r+0xa6e>
 801cec4:	9a02      	ldr	r2, [sp, #8]
 801cec6:	2339      	movs	r3, #57	; 0x39
 801cec8:	7013      	strb	r3, [r2, #0]
 801ceca:	462b      	mov	r3, r5
 801cecc:	461d      	mov	r5, r3
 801cece:	3b01      	subs	r3, #1
 801ced0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801ced4:	2a39      	cmp	r2, #57	; 0x39
 801ced6:	d050      	beq.n	801cf7a <_dtoa_r+0xb72>
 801ced8:	3201      	adds	r2, #1
 801ceda:	701a      	strb	r2, [r3, #0]
 801cedc:	e745      	b.n	801cd6a <_dtoa_r+0x962>
 801cede:	2a00      	cmp	r2, #0
 801cee0:	dd03      	ble.n	801ceea <_dtoa_r+0xae2>
 801cee2:	2b39      	cmp	r3, #57	; 0x39
 801cee4:	d0ee      	beq.n	801cec4 <_dtoa_r+0xabc>
 801cee6:	3301      	adds	r3, #1
 801cee8:	e7c7      	b.n	801ce7a <_dtoa_r+0xa72>
 801ceea:	9a01      	ldr	r2, [sp, #4]
 801ceec:	9907      	ldr	r1, [sp, #28]
 801ceee:	f802 3c01 	strb.w	r3, [r2, #-1]
 801cef2:	428a      	cmp	r2, r1
 801cef4:	d02a      	beq.n	801cf4c <_dtoa_r+0xb44>
 801cef6:	4659      	mov	r1, fp
 801cef8:	2300      	movs	r3, #0
 801cefa:	220a      	movs	r2, #10
 801cefc:	4620      	mov	r0, r4
 801cefe:	f000 fd73 	bl	801d9e8 <__multadd>
 801cf02:	45b8      	cmp	r8, r7
 801cf04:	4683      	mov	fp, r0
 801cf06:	f04f 0300 	mov.w	r3, #0
 801cf0a:	f04f 020a 	mov.w	r2, #10
 801cf0e:	4641      	mov	r1, r8
 801cf10:	4620      	mov	r0, r4
 801cf12:	d107      	bne.n	801cf24 <_dtoa_r+0xb1c>
 801cf14:	f000 fd68 	bl	801d9e8 <__multadd>
 801cf18:	4680      	mov	r8, r0
 801cf1a:	4607      	mov	r7, r0
 801cf1c:	9b01      	ldr	r3, [sp, #4]
 801cf1e:	3301      	adds	r3, #1
 801cf20:	9301      	str	r3, [sp, #4]
 801cf22:	e775      	b.n	801ce10 <_dtoa_r+0xa08>
 801cf24:	f000 fd60 	bl	801d9e8 <__multadd>
 801cf28:	4639      	mov	r1, r7
 801cf2a:	4680      	mov	r8, r0
 801cf2c:	2300      	movs	r3, #0
 801cf2e:	220a      	movs	r2, #10
 801cf30:	4620      	mov	r0, r4
 801cf32:	f000 fd59 	bl	801d9e8 <__multadd>
 801cf36:	4607      	mov	r7, r0
 801cf38:	e7f0      	b.n	801cf1c <_dtoa_r+0xb14>
 801cf3a:	f1b9 0f00 	cmp.w	r9, #0
 801cf3e:	9a00      	ldr	r2, [sp, #0]
 801cf40:	bfcc      	ite	gt
 801cf42:	464d      	movgt	r5, r9
 801cf44:	2501      	movle	r5, #1
 801cf46:	4415      	add	r5, r2
 801cf48:	f04f 0800 	mov.w	r8, #0
 801cf4c:	4659      	mov	r1, fp
 801cf4e:	2201      	movs	r2, #1
 801cf50:	4620      	mov	r0, r4
 801cf52:	9301      	str	r3, [sp, #4]
 801cf54:	f000 ff42 	bl	801dddc <__lshift>
 801cf58:	4631      	mov	r1, r6
 801cf5a:	4683      	mov	fp, r0
 801cf5c:	f000 ffaa 	bl	801deb4 <__mcmp>
 801cf60:	2800      	cmp	r0, #0
 801cf62:	dcb2      	bgt.n	801ceca <_dtoa_r+0xac2>
 801cf64:	d102      	bne.n	801cf6c <_dtoa_r+0xb64>
 801cf66:	9b01      	ldr	r3, [sp, #4]
 801cf68:	07db      	lsls	r3, r3, #31
 801cf6a:	d4ae      	bmi.n	801ceca <_dtoa_r+0xac2>
 801cf6c:	462b      	mov	r3, r5
 801cf6e:	461d      	mov	r5, r3
 801cf70:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801cf74:	2a30      	cmp	r2, #48	; 0x30
 801cf76:	d0fa      	beq.n	801cf6e <_dtoa_r+0xb66>
 801cf78:	e6f7      	b.n	801cd6a <_dtoa_r+0x962>
 801cf7a:	9a00      	ldr	r2, [sp, #0]
 801cf7c:	429a      	cmp	r2, r3
 801cf7e:	d1a5      	bne.n	801cecc <_dtoa_r+0xac4>
 801cf80:	f10a 0a01 	add.w	sl, sl, #1
 801cf84:	2331      	movs	r3, #49	; 0x31
 801cf86:	e779      	b.n	801ce7c <_dtoa_r+0xa74>
 801cf88:	4b13      	ldr	r3, [pc, #76]	; (801cfd8 <_dtoa_r+0xbd0>)
 801cf8a:	f7ff baaf 	b.w	801c4ec <_dtoa_r+0xe4>
 801cf8e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801cf90:	2b00      	cmp	r3, #0
 801cf92:	f47f aa86 	bne.w	801c4a2 <_dtoa_r+0x9a>
 801cf96:	4b11      	ldr	r3, [pc, #68]	; (801cfdc <_dtoa_r+0xbd4>)
 801cf98:	f7ff baa8 	b.w	801c4ec <_dtoa_r+0xe4>
 801cf9c:	f1b9 0f00 	cmp.w	r9, #0
 801cfa0:	dc03      	bgt.n	801cfaa <_dtoa_r+0xba2>
 801cfa2:	9b05      	ldr	r3, [sp, #20]
 801cfa4:	2b02      	cmp	r3, #2
 801cfa6:	f73f aec9 	bgt.w	801cd3c <_dtoa_r+0x934>
 801cfaa:	9d00      	ldr	r5, [sp, #0]
 801cfac:	4631      	mov	r1, r6
 801cfae:	4658      	mov	r0, fp
 801cfb0:	f7ff f99c 	bl	801c2ec <quorem>
 801cfb4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 801cfb8:	f805 3b01 	strb.w	r3, [r5], #1
 801cfbc:	9a00      	ldr	r2, [sp, #0]
 801cfbe:	1aaa      	subs	r2, r5, r2
 801cfc0:	4591      	cmp	r9, r2
 801cfc2:	ddba      	ble.n	801cf3a <_dtoa_r+0xb32>
 801cfc4:	4659      	mov	r1, fp
 801cfc6:	2300      	movs	r3, #0
 801cfc8:	220a      	movs	r2, #10
 801cfca:	4620      	mov	r0, r4
 801cfcc:	f000 fd0c 	bl	801d9e8 <__multadd>
 801cfd0:	4683      	mov	fp, r0
 801cfd2:	e7eb      	b.n	801cfac <_dtoa_r+0xba4>
 801cfd4:	08024200 	.word	0x08024200
 801cfd8:	0802406c 	.word	0x0802406c
 801cfdc:	08024194 	.word	0x08024194

0801cfe0 <__errno>:
 801cfe0:	4b01      	ldr	r3, [pc, #4]	; (801cfe8 <__errno+0x8>)
 801cfe2:	6818      	ldr	r0, [r3, #0]
 801cfe4:	4770      	bx	lr
 801cfe6:	bf00      	nop
 801cfe8:	20000084 	.word	0x20000084

0801cfec <std>:
 801cfec:	2300      	movs	r3, #0
 801cfee:	b510      	push	{r4, lr}
 801cff0:	4604      	mov	r4, r0
 801cff2:	e9c0 3300 	strd	r3, r3, [r0]
 801cff6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801cffa:	6083      	str	r3, [r0, #8]
 801cffc:	8181      	strh	r1, [r0, #12]
 801cffe:	6643      	str	r3, [r0, #100]	; 0x64
 801d000:	81c2      	strh	r2, [r0, #14]
 801d002:	6183      	str	r3, [r0, #24]
 801d004:	4619      	mov	r1, r3
 801d006:	2208      	movs	r2, #8
 801d008:	305c      	adds	r0, #92	; 0x5c
 801d00a:	f7fd fc8d 	bl	801a928 <memset>
 801d00e:	4b05      	ldr	r3, [pc, #20]	; (801d024 <std+0x38>)
 801d010:	6263      	str	r3, [r4, #36]	; 0x24
 801d012:	4b05      	ldr	r3, [pc, #20]	; (801d028 <std+0x3c>)
 801d014:	62a3      	str	r3, [r4, #40]	; 0x28
 801d016:	4b05      	ldr	r3, [pc, #20]	; (801d02c <std+0x40>)
 801d018:	62e3      	str	r3, [r4, #44]	; 0x2c
 801d01a:	4b05      	ldr	r3, [pc, #20]	; (801d030 <std+0x44>)
 801d01c:	6224      	str	r4, [r4, #32]
 801d01e:	6323      	str	r3, [r4, #48]	; 0x30
 801d020:	bd10      	pop	{r4, pc}
 801d022:	bf00      	nop
 801d024:	0801e839 	.word	0x0801e839
 801d028:	0801e85b 	.word	0x0801e85b
 801d02c:	0801e893 	.word	0x0801e893
 801d030:	0801e8b7 	.word	0x0801e8b7

0801d034 <_cleanup_r>:
 801d034:	4901      	ldr	r1, [pc, #4]	; (801d03c <_cleanup_r+0x8>)
 801d036:	f000 b8c1 	b.w	801d1bc <_fwalk_reent>
 801d03a:	bf00      	nop
 801d03c:	0801ebbd 	.word	0x0801ebbd

0801d040 <__sfmoreglue>:
 801d040:	b570      	push	{r4, r5, r6, lr}
 801d042:	1e4a      	subs	r2, r1, #1
 801d044:	2568      	movs	r5, #104	; 0x68
 801d046:	4355      	muls	r5, r2
 801d048:	460e      	mov	r6, r1
 801d04a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801d04e:	f7fd fcc3 	bl	801a9d8 <_malloc_r>
 801d052:	4604      	mov	r4, r0
 801d054:	b140      	cbz	r0, 801d068 <__sfmoreglue+0x28>
 801d056:	2100      	movs	r1, #0
 801d058:	e9c0 1600 	strd	r1, r6, [r0]
 801d05c:	300c      	adds	r0, #12
 801d05e:	60a0      	str	r0, [r4, #8]
 801d060:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801d064:	f7fd fc60 	bl	801a928 <memset>
 801d068:	4620      	mov	r0, r4
 801d06a:	bd70      	pop	{r4, r5, r6, pc}

0801d06c <__sfp_lock_acquire>:
 801d06c:	4801      	ldr	r0, [pc, #4]	; (801d074 <__sfp_lock_acquire+0x8>)
 801d06e:	f000 bc38 	b.w	801d8e2 <__retarget_lock_acquire_recursive>
 801d072:	bf00      	nop
 801d074:	20007680 	.word	0x20007680

0801d078 <__sfp_lock_release>:
 801d078:	4801      	ldr	r0, [pc, #4]	; (801d080 <__sfp_lock_release+0x8>)
 801d07a:	f000 bc33 	b.w	801d8e4 <__retarget_lock_release_recursive>
 801d07e:	bf00      	nop
 801d080:	20007680 	.word	0x20007680

0801d084 <__sinit_lock_acquire>:
 801d084:	4801      	ldr	r0, [pc, #4]	; (801d08c <__sinit_lock_acquire+0x8>)
 801d086:	f000 bc2c 	b.w	801d8e2 <__retarget_lock_acquire_recursive>
 801d08a:	bf00      	nop
 801d08c:	2000767b 	.word	0x2000767b

0801d090 <__sinit_lock_release>:
 801d090:	4801      	ldr	r0, [pc, #4]	; (801d098 <__sinit_lock_release+0x8>)
 801d092:	f000 bc27 	b.w	801d8e4 <__retarget_lock_release_recursive>
 801d096:	bf00      	nop
 801d098:	2000767b 	.word	0x2000767b

0801d09c <__sinit>:
 801d09c:	b510      	push	{r4, lr}
 801d09e:	4604      	mov	r4, r0
 801d0a0:	f7ff fff0 	bl	801d084 <__sinit_lock_acquire>
 801d0a4:	69a3      	ldr	r3, [r4, #24]
 801d0a6:	b11b      	cbz	r3, 801d0b0 <__sinit+0x14>
 801d0a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d0ac:	f7ff bff0 	b.w	801d090 <__sinit_lock_release>
 801d0b0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801d0b4:	6523      	str	r3, [r4, #80]	; 0x50
 801d0b6:	4b13      	ldr	r3, [pc, #76]	; (801d104 <__sinit+0x68>)
 801d0b8:	4a13      	ldr	r2, [pc, #76]	; (801d108 <__sinit+0x6c>)
 801d0ba:	681b      	ldr	r3, [r3, #0]
 801d0bc:	62a2      	str	r2, [r4, #40]	; 0x28
 801d0be:	42a3      	cmp	r3, r4
 801d0c0:	bf04      	itt	eq
 801d0c2:	2301      	moveq	r3, #1
 801d0c4:	61a3      	streq	r3, [r4, #24]
 801d0c6:	4620      	mov	r0, r4
 801d0c8:	f000 f820 	bl	801d10c <__sfp>
 801d0cc:	6060      	str	r0, [r4, #4]
 801d0ce:	4620      	mov	r0, r4
 801d0d0:	f000 f81c 	bl	801d10c <__sfp>
 801d0d4:	60a0      	str	r0, [r4, #8]
 801d0d6:	4620      	mov	r0, r4
 801d0d8:	f000 f818 	bl	801d10c <__sfp>
 801d0dc:	2200      	movs	r2, #0
 801d0de:	60e0      	str	r0, [r4, #12]
 801d0e0:	2104      	movs	r1, #4
 801d0e2:	6860      	ldr	r0, [r4, #4]
 801d0e4:	f7ff ff82 	bl	801cfec <std>
 801d0e8:	68a0      	ldr	r0, [r4, #8]
 801d0ea:	2201      	movs	r2, #1
 801d0ec:	2109      	movs	r1, #9
 801d0ee:	f7ff ff7d 	bl	801cfec <std>
 801d0f2:	68e0      	ldr	r0, [r4, #12]
 801d0f4:	2202      	movs	r2, #2
 801d0f6:	2112      	movs	r1, #18
 801d0f8:	f7ff ff78 	bl	801cfec <std>
 801d0fc:	2301      	movs	r3, #1
 801d0fe:	61a3      	str	r3, [r4, #24]
 801d100:	e7d2      	b.n	801d0a8 <__sinit+0xc>
 801d102:	bf00      	nop
 801d104:	08024058 	.word	0x08024058
 801d108:	0801d035 	.word	0x0801d035

0801d10c <__sfp>:
 801d10c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d10e:	4607      	mov	r7, r0
 801d110:	f7ff ffac 	bl	801d06c <__sfp_lock_acquire>
 801d114:	4b1e      	ldr	r3, [pc, #120]	; (801d190 <__sfp+0x84>)
 801d116:	681e      	ldr	r6, [r3, #0]
 801d118:	69b3      	ldr	r3, [r6, #24]
 801d11a:	b913      	cbnz	r3, 801d122 <__sfp+0x16>
 801d11c:	4630      	mov	r0, r6
 801d11e:	f7ff ffbd 	bl	801d09c <__sinit>
 801d122:	3648      	adds	r6, #72	; 0x48
 801d124:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801d128:	3b01      	subs	r3, #1
 801d12a:	d503      	bpl.n	801d134 <__sfp+0x28>
 801d12c:	6833      	ldr	r3, [r6, #0]
 801d12e:	b30b      	cbz	r3, 801d174 <__sfp+0x68>
 801d130:	6836      	ldr	r6, [r6, #0]
 801d132:	e7f7      	b.n	801d124 <__sfp+0x18>
 801d134:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801d138:	b9d5      	cbnz	r5, 801d170 <__sfp+0x64>
 801d13a:	4b16      	ldr	r3, [pc, #88]	; (801d194 <__sfp+0x88>)
 801d13c:	60e3      	str	r3, [r4, #12]
 801d13e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801d142:	6665      	str	r5, [r4, #100]	; 0x64
 801d144:	f000 fbcc 	bl	801d8e0 <__retarget_lock_init_recursive>
 801d148:	f7ff ff96 	bl	801d078 <__sfp_lock_release>
 801d14c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801d150:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801d154:	6025      	str	r5, [r4, #0]
 801d156:	61a5      	str	r5, [r4, #24]
 801d158:	2208      	movs	r2, #8
 801d15a:	4629      	mov	r1, r5
 801d15c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801d160:	f7fd fbe2 	bl	801a928 <memset>
 801d164:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801d168:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801d16c:	4620      	mov	r0, r4
 801d16e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d170:	3468      	adds	r4, #104	; 0x68
 801d172:	e7d9      	b.n	801d128 <__sfp+0x1c>
 801d174:	2104      	movs	r1, #4
 801d176:	4638      	mov	r0, r7
 801d178:	f7ff ff62 	bl	801d040 <__sfmoreglue>
 801d17c:	4604      	mov	r4, r0
 801d17e:	6030      	str	r0, [r6, #0]
 801d180:	2800      	cmp	r0, #0
 801d182:	d1d5      	bne.n	801d130 <__sfp+0x24>
 801d184:	f7ff ff78 	bl	801d078 <__sfp_lock_release>
 801d188:	230c      	movs	r3, #12
 801d18a:	603b      	str	r3, [r7, #0]
 801d18c:	e7ee      	b.n	801d16c <__sfp+0x60>
 801d18e:	bf00      	nop
 801d190:	08024058 	.word	0x08024058
 801d194:	ffff0001 	.word	0xffff0001

0801d198 <fiprintf>:
 801d198:	b40e      	push	{r1, r2, r3}
 801d19a:	b503      	push	{r0, r1, lr}
 801d19c:	4601      	mov	r1, r0
 801d19e:	ab03      	add	r3, sp, #12
 801d1a0:	4805      	ldr	r0, [pc, #20]	; (801d1b8 <fiprintf+0x20>)
 801d1a2:	f853 2b04 	ldr.w	r2, [r3], #4
 801d1a6:	6800      	ldr	r0, [r0, #0]
 801d1a8:	9301      	str	r3, [sp, #4]
 801d1aa:	f001 fa0b 	bl	801e5c4 <_vfiprintf_r>
 801d1ae:	b002      	add	sp, #8
 801d1b0:	f85d eb04 	ldr.w	lr, [sp], #4
 801d1b4:	b003      	add	sp, #12
 801d1b6:	4770      	bx	lr
 801d1b8:	20000084 	.word	0x20000084

0801d1bc <_fwalk_reent>:
 801d1bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d1c0:	4606      	mov	r6, r0
 801d1c2:	4688      	mov	r8, r1
 801d1c4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801d1c8:	2700      	movs	r7, #0
 801d1ca:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801d1ce:	f1b9 0901 	subs.w	r9, r9, #1
 801d1d2:	d505      	bpl.n	801d1e0 <_fwalk_reent+0x24>
 801d1d4:	6824      	ldr	r4, [r4, #0]
 801d1d6:	2c00      	cmp	r4, #0
 801d1d8:	d1f7      	bne.n	801d1ca <_fwalk_reent+0xe>
 801d1da:	4638      	mov	r0, r7
 801d1dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d1e0:	89ab      	ldrh	r3, [r5, #12]
 801d1e2:	2b01      	cmp	r3, #1
 801d1e4:	d907      	bls.n	801d1f6 <_fwalk_reent+0x3a>
 801d1e6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801d1ea:	3301      	adds	r3, #1
 801d1ec:	d003      	beq.n	801d1f6 <_fwalk_reent+0x3a>
 801d1ee:	4629      	mov	r1, r5
 801d1f0:	4630      	mov	r0, r6
 801d1f2:	47c0      	blx	r8
 801d1f4:	4307      	orrs	r7, r0
 801d1f6:	3568      	adds	r5, #104	; 0x68
 801d1f8:	e7e9      	b.n	801d1ce <_fwalk_reent+0x12>

0801d1fa <rshift>:
 801d1fa:	6903      	ldr	r3, [r0, #16]
 801d1fc:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801d200:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801d204:	ea4f 1261 	mov.w	r2, r1, asr #5
 801d208:	f100 0414 	add.w	r4, r0, #20
 801d20c:	dd45      	ble.n	801d29a <rshift+0xa0>
 801d20e:	f011 011f 	ands.w	r1, r1, #31
 801d212:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801d216:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801d21a:	d10c      	bne.n	801d236 <rshift+0x3c>
 801d21c:	f100 0710 	add.w	r7, r0, #16
 801d220:	4629      	mov	r1, r5
 801d222:	42b1      	cmp	r1, r6
 801d224:	d334      	bcc.n	801d290 <rshift+0x96>
 801d226:	1a9b      	subs	r3, r3, r2
 801d228:	009b      	lsls	r3, r3, #2
 801d22a:	1eea      	subs	r2, r5, #3
 801d22c:	4296      	cmp	r6, r2
 801d22e:	bf38      	it	cc
 801d230:	2300      	movcc	r3, #0
 801d232:	4423      	add	r3, r4
 801d234:	e015      	b.n	801d262 <rshift+0x68>
 801d236:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801d23a:	f1c1 0820 	rsb	r8, r1, #32
 801d23e:	40cf      	lsrs	r7, r1
 801d240:	f105 0e04 	add.w	lr, r5, #4
 801d244:	46a1      	mov	r9, r4
 801d246:	4576      	cmp	r6, lr
 801d248:	46f4      	mov	ip, lr
 801d24a:	d815      	bhi.n	801d278 <rshift+0x7e>
 801d24c:	1a9b      	subs	r3, r3, r2
 801d24e:	009a      	lsls	r2, r3, #2
 801d250:	3a04      	subs	r2, #4
 801d252:	3501      	adds	r5, #1
 801d254:	42ae      	cmp	r6, r5
 801d256:	bf38      	it	cc
 801d258:	2200      	movcc	r2, #0
 801d25a:	18a3      	adds	r3, r4, r2
 801d25c:	50a7      	str	r7, [r4, r2]
 801d25e:	b107      	cbz	r7, 801d262 <rshift+0x68>
 801d260:	3304      	adds	r3, #4
 801d262:	1b1a      	subs	r2, r3, r4
 801d264:	42a3      	cmp	r3, r4
 801d266:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801d26a:	bf08      	it	eq
 801d26c:	2300      	moveq	r3, #0
 801d26e:	6102      	str	r2, [r0, #16]
 801d270:	bf08      	it	eq
 801d272:	6143      	streq	r3, [r0, #20]
 801d274:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801d278:	f8dc c000 	ldr.w	ip, [ip]
 801d27c:	fa0c fc08 	lsl.w	ip, ip, r8
 801d280:	ea4c 0707 	orr.w	r7, ip, r7
 801d284:	f849 7b04 	str.w	r7, [r9], #4
 801d288:	f85e 7b04 	ldr.w	r7, [lr], #4
 801d28c:	40cf      	lsrs	r7, r1
 801d28e:	e7da      	b.n	801d246 <rshift+0x4c>
 801d290:	f851 cb04 	ldr.w	ip, [r1], #4
 801d294:	f847 cf04 	str.w	ip, [r7, #4]!
 801d298:	e7c3      	b.n	801d222 <rshift+0x28>
 801d29a:	4623      	mov	r3, r4
 801d29c:	e7e1      	b.n	801d262 <rshift+0x68>

0801d29e <__hexdig_fun>:
 801d29e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801d2a2:	2b09      	cmp	r3, #9
 801d2a4:	d802      	bhi.n	801d2ac <__hexdig_fun+0xe>
 801d2a6:	3820      	subs	r0, #32
 801d2a8:	b2c0      	uxtb	r0, r0
 801d2aa:	4770      	bx	lr
 801d2ac:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801d2b0:	2b05      	cmp	r3, #5
 801d2b2:	d801      	bhi.n	801d2b8 <__hexdig_fun+0x1a>
 801d2b4:	3847      	subs	r0, #71	; 0x47
 801d2b6:	e7f7      	b.n	801d2a8 <__hexdig_fun+0xa>
 801d2b8:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801d2bc:	2b05      	cmp	r3, #5
 801d2be:	d801      	bhi.n	801d2c4 <__hexdig_fun+0x26>
 801d2c0:	3827      	subs	r0, #39	; 0x27
 801d2c2:	e7f1      	b.n	801d2a8 <__hexdig_fun+0xa>
 801d2c4:	2000      	movs	r0, #0
 801d2c6:	4770      	bx	lr

0801d2c8 <__gethex>:
 801d2c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d2cc:	ed2d 8b02 	vpush	{d8}
 801d2d0:	b089      	sub	sp, #36	; 0x24
 801d2d2:	ee08 0a10 	vmov	s16, r0
 801d2d6:	9304      	str	r3, [sp, #16]
 801d2d8:	4bbc      	ldr	r3, [pc, #752]	; (801d5cc <__gethex+0x304>)
 801d2da:	681b      	ldr	r3, [r3, #0]
 801d2dc:	9301      	str	r3, [sp, #4]
 801d2de:	4618      	mov	r0, r3
 801d2e0:	468b      	mov	fp, r1
 801d2e2:	4690      	mov	r8, r2
 801d2e4:	f7e2 ff7e 	bl	80001e4 <strlen>
 801d2e8:	9b01      	ldr	r3, [sp, #4]
 801d2ea:	f8db 2000 	ldr.w	r2, [fp]
 801d2ee:	4403      	add	r3, r0
 801d2f0:	4682      	mov	sl, r0
 801d2f2:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801d2f6:	9305      	str	r3, [sp, #20]
 801d2f8:	1c93      	adds	r3, r2, #2
 801d2fa:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801d2fe:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801d302:	32fe      	adds	r2, #254	; 0xfe
 801d304:	18d1      	adds	r1, r2, r3
 801d306:	461f      	mov	r7, r3
 801d308:	f813 0b01 	ldrb.w	r0, [r3], #1
 801d30c:	9100      	str	r1, [sp, #0]
 801d30e:	2830      	cmp	r0, #48	; 0x30
 801d310:	d0f8      	beq.n	801d304 <__gethex+0x3c>
 801d312:	f7ff ffc4 	bl	801d29e <__hexdig_fun>
 801d316:	4604      	mov	r4, r0
 801d318:	2800      	cmp	r0, #0
 801d31a:	d13a      	bne.n	801d392 <__gethex+0xca>
 801d31c:	9901      	ldr	r1, [sp, #4]
 801d31e:	4652      	mov	r2, sl
 801d320:	4638      	mov	r0, r7
 801d322:	f7fe f8d9 	bl	801b4d8 <strncmp>
 801d326:	4605      	mov	r5, r0
 801d328:	2800      	cmp	r0, #0
 801d32a:	d168      	bne.n	801d3fe <__gethex+0x136>
 801d32c:	f817 000a 	ldrb.w	r0, [r7, sl]
 801d330:	eb07 060a 	add.w	r6, r7, sl
 801d334:	f7ff ffb3 	bl	801d29e <__hexdig_fun>
 801d338:	2800      	cmp	r0, #0
 801d33a:	d062      	beq.n	801d402 <__gethex+0x13a>
 801d33c:	4633      	mov	r3, r6
 801d33e:	7818      	ldrb	r0, [r3, #0]
 801d340:	2830      	cmp	r0, #48	; 0x30
 801d342:	461f      	mov	r7, r3
 801d344:	f103 0301 	add.w	r3, r3, #1
 801d348:	d0f9      	beq.n	801d33e <__gethex+0x76>
 801d34a:	f7ff ffa8 	bl	801d29e <__hexdig_fun>
 801d34e:	2301      	movs	r3, #1
 801d350:	fab0 f480 	clz	r4, r0
 801d354:	0964      	lsrs	r4, r4, #5
 801d356:	4635      	mov	r5, r6
 801d358:	9300      	str	r3, [sp, #0]
 801d35a:	463a      	mov	r2, r7
 801d35c:	4616      	mov	r6, r2
 801d35e:	3201      	adds	r2, #1
 801d360:	7830      	ldrb	r0, [r6, #0]
 801d362:	f7ff ff9c 	bl	801d29e <__hexdig_fun>
 801d366:	2800      	cmp	r0, #0
 801d368:	d1f8      	bne.n	801d35c <__gethex+0x94>
 801d36a:	9901      	ldr	r1, [sp, #4]
 801d36c:	4652      	mov	r2, sl
 801d36e:	4630      	mov	r0, r6
 801d370:	f7fe f8b2 	bl	801b4d8 <strncmp>
 801d374:	b980      	cbnz	r0, 801d398 <__gethex+0xd0>
 801d376:	b94d      	cbnz	r5, 801d38c <__gethex+0xc4>
 801d378:	eb06 050a 	add.w	r5, r6, sl
 801d37c:	462a      	mov	r2, r5
 801d37e:	4616      	mov	r6, r2
 801d380:	3201      	adds	r2, #1
 801d382:	7830      	ldrb	r0, [r6, #0]
 801d384:	f7ff ff8b 	bl	801d29e <__hexdig_fun>
 801d388:	2800      	cmp	r0, #0
 801d38a:	d1f8      	bne.n	801d37e <__gethex+0xb6>
 801d38c:	1bad      	subs	r5, r5, r6
 801d38e:	00ad      	lsls	r5, r5, #2
 801d390:	e004      	b.n	801d39c <__gethex+0xd4>
 801d392:	2400      	movs	r4, #0
 801d394:	4625      	mov	r5, r4
 801d396:	e7e0      	b.n	801d35a <__gethex+0x92>
 801d398:	2d00      	cmp	r5, #0
 801d39a:	d1f7      	bne.n	801d38c <__gethex+0xc4>
 801d39c:	7833      	ldrb	r3, [r6, #0]
 801d39e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801d3a2:	2b50      	cmp	r3, #80	; 0x50
 801d3a4:	d13b      	bne.n	801d41e <__gethex+0x156>
 801d3a6:	7873      	ldrb	r3, [r6, #1]
 801d3a8:	2b2b      	cmp	r3, #43	; 0x2b
 801d3aa:	d02c      	beq.n	801d406 <__gethex+0x13e>
 801d3ac:	2b2d      	cmp	r3, #45	; 0x2d
 801d3ae:	d02e      	beq.n	801d40e <__gethex+0x146>
 801d3b0:	1c71      	adds	r1, r6, #1
 801d3b2:	f04f 0900 	mov.w	r9, #0
 801d3b6:	7808      	ldrb	r0, [r1, #0]
 801d3b8:	f7ff ff71 	bl	801d29e <__hexdig_fun>
 801d3bc:	1e43      	subs	r3, r0, #1
 801d3be:	b2db      	uxtb	r3, r3
 801d3c0:	2b18      	cmp	r3, #24
 801d3c2:	d82c      	bhi.n	801d41e <__gethex+0x156>
 801d3c4:	f1a0 0210 	sub.w	r2, r0, #16
 801d3c8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801d3cc:	f7ff ff67 	bl	801d29e <__hexdig_fun>
 801d3d0:	1e43      	subs	r3, r0, #1
 801d3d2:	b2db      	uxtb	r3, r3
 801d3d4:	2b18      	cmp	r3, #24
 801d3d6:	d91d      	bls.n	801d414 <__gethex+0x14c>
 801d3d8:	f1b9 0f00 	cmp.w	r9, #0
 801d3dc:	d000      	beq.n	801d3e0 <__gethex+0x118>
 801d3de:	4252      	negs	r2, r2
 801d3e0:	4415      	add	r5, r2
 801d3e2:	f8cb 1000 	str.w	r1, [fp]
 801d3e6:	b1e4      	cbz	r4, 801d422 <__gethex+0x15a>
 801d3e8:	9b00      	ldr	r3, [sp, #0]
 801d3ea:	2b00      	cmp	r3, #0
 801d3ec:	bf14      	ite	ne
 801d3ee:	2700      	movne	r7, #0
 801d3f0:	2706      	moveq	r7, #6
 801d3f2:	4638      	mov	r0, r7
 801d3f4:	b009      	add	sp, #36	; 0x24
 801d3f6:	ecbd 8b02 	vpop	{d8}
 801d3fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d3fe:	463e      	mov	r6, r7
 801d400:	4625      	mov	r5, r4
 801d402:	2401      	movs	r4, #1
 801d404:	e7ca      	b.n	801d39c <__gethex+0xd4>
 801d406:	f04f 0900 	mov.w	r9, #0
 801d40a:	1cb1      	adds	r1, r6, #2
 801d40c:	e7d3      	b.n	801d3b6 <__gethex+0xee>
 801d40e:	f04f 0901 	mov.w	r9, #1
 801d412:	e7fa      	b.n	801d40a <__gethex+0x142>
 801d414:	230a      	movs	r3, #10
 801d416:	fb03 0202 	mla	r2, r3, r2, r0
 801d41a:	3a10      	subs	r2, #16
 801d41c:	e7d4      	b.n	801d3c8 <__gethex+0x100>
 801d41e:	4631      	mov	r1, r6
 801d420:	e7df      	b.n	801d3e2 <__gethex+0x11a>
 801d422:	1bf3      	subs	r3, r6, r7
 801d424:	3b01      	subs	r3, #1
 801d426:	4621      	mov	r1, r4
 801d428:	2b07      	cmp	r3, #7
 801d42a:	dc0b      	bgt.n	801d444 <__gethex+0x17c>
 801d42c:	ee18 0a10 	vmov	r0, s16
 801d430:	f000 fa78 	bl	801d924 <_Balloc>
 801d434:	4604      	mov	r4, r0
 801d436:	b940      	cbnz	r0, 801d44a <__gethex+0x182>
 801d438:	4b65      	ldr	r3, [pc, #404]	; (801d5d0 <__gethex+0x308>)
 801d43a:	4602      	mov	r2, r0
 801d43c:	21de      	movs	r1, #222	; 0xde
 801d43e:	4865      	ldr	r0, [pc, #404]	; (801d5d4 <__gethex+0x30c>)
 801d440:	f7fe ff36 	bl	801c2b0 <__assert_func>
 801d444:	3101      	adds	r1, #1
 801d446:	105b      	asrs	r3, r3, #1
 801d448:	e7ee      	b.n	801d428 <__gethex+0x160>
 801d44a:	f100 0914 	add.w	r9, r0, #20
 801d44e:	f04f 0b00 	mov.w	fp, #0
 801d452:	f1ca 0301 	rsb	r3, sl, #1
 801d456:	f8cd 9008 	str.w	r9, [sp, #8]
 801d45a:	f8cd b000 	str.w	fp, [sp]
 801d45e:	9306      	str	r3, [sp, #24]
 801d460:	42b7      	cmp	r7, r6
 801d462:	d340      	bcc.n	801d4e6 <__gethex+0x21e>
 801d464:	9802      	ldr	r0, [sp, #8]
 801d466:	9b00      	ldr	r3, [sp, #0]
 801d468:	f840 3b04 	str.w	r3, [r0], #4
 801d46c:	eba0 0009 	sub.w	r0, r0, r9
 801d470:	1080      	asrs	r0, r0, #2
 801d472:	0146      	lsls	r6, r0, #5
 801d474:	6120      	str	r0, [r4, #16]
 801d476:	4618      	mov	r0, r3
 801d478:	f000 fb4a 	bl	801db10 <__hi0bits>
 801d47c:	1a30      	subs	r0, r6, r0
 801d47e:	f8d8 6000 	ldr.w	r6, [r8]
 801d482:	42b0      	cmp	r0, r6
 801d484:	dd63      	ble.n	801d54e <__gethex+0x286>
 801d486:	1b87      	subs	r7, r0, r6
 801d488:	4639      	mov	r1, r7
 801d48a:	4620      	mov	r0, r4
 801d48c:	f000 fee4 	bl	801e258 <__any_on>
 801d490:	4682      	mov	sl, r0
 801d492:	b1a8      	cbz	r0, 801d4c0 <__gethex+0x1f8>
 801d494:	1e7b      	subs	r3, r7, #1
 801d496:	1159      	asrs	r1, r3, #5
 801d498:	f003 021f 	and.w	r2, r3, #31
 801d49c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 801d4a0:	f04f 0a01 	mov.w	sl, #1
 801d4a4:	fa0a f202 	lsl.w	r2, sl, r2
 801d4a8:	420a      	tst	r2, r1
 801d4aa:	d009      	beq.n	801d4c0 <__gethex+0x1f8>
 801d4ac:	4553      	cmp	r3, sl
 801d4ae:	dd05      	ble.n	801d4bc <__gethex+0x1f4>
 801d4b0:	1eb9      	subs	r1, r7, #2
 801d4b2:	4620      	mov	r0, r4
 801d4b4:	f000 fed0 	bl	801e258 <__any_on>
 801d4b8:	2800      	cmp	r0, #0
 801d4ba:	d145      	bne.n	801d548 <__gethex+0x280>
 801d4bc:	f04f 0a02 	mov.w	sl, #2
 801d4c0:	4639      	mov	r1, r7
 801d4c2:	4620      	mov	r0, r4
 801d4c4:	f7ff fe99 	bl	801d1fa <rshift>
 801d4c8:	443d      	add	r5, r7
 801d4ca:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801d4ce:	42ab      	cmp	r3, r5
 801d4d0:	da4c      	bge.n	801d56c <__gethex+0x2a4>
 801d4d2:	ee18 0a10 	vmov	r0, s16
 801d4d6:	4621      	mov	r1, r4
 801d4d8:	f000 fa64 	bl	801d9a4 <_Bfree>
 801d4dc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801d4de:	2300      	movs	r3, #0
 801d4e0:	6013      	str	r3, [r2, #0]
 801d4e2:	27a3      	movs	r7, #163	; 0xa3
 801d4e4:	e785      	b.n	801d3f2 <__gethex+0x12a>
 801d4e6:	1e73      	subs	r3, r6, #1
 801d4e8:	9a05      	ldr	r2, [sp, #20]
 801d4ea:	9303      	str	r3, [sp, #12]
 801d4ec:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801d4f0:	4293      	cmp	r3, r2
 801d4f2:	d019      	beq.n	801d528 <__gethex+0x260>
 801d4f4:	f1bb 0f20 	cmp.w	fp, #32
 801d4f8:	d107      	bne.n	801d50a <__gethex+0x242>
 801d4fa:	9b02      	ldr	r3, [sp, #8]
 801d4fc:	9a00      	ldr	r2, [sp, #0]
 801d4fe:	f843 2b04 	str.w	r2, [r3], #4
 801d502:	9302      	str	r3, [sp, #8]
 801d504:	2300      	movs	r3, #0
 801d506:	9300      	str	r3, [sp, #0]
 801d508:	469b      	mov	fp, r3
 801d50a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 801d50e:	f7ff fec6 	bl	801d29e <__hexdig_fun>
 801d512:	9b00      	ldr	r3, [sp, #0]
 801d514:	f000 000f 	and.w	r0, r0, #15
 801d518:	fa00 f00b 	lsl.w	r0, r0, fp
 801d51c:	4303      	orrs	r3, r0
 801d51e:	9300      	str	r3, [sp, #0]
 801d520:	f10b 0b04 	add.w	fp, fp, #4
 801d524:	9b03      	ldr	r3, [sp, #12]
 801d526:	e00d      	b.n	801d544 <__gethex+0x27c>
 801d528:	9b03      	ldr	r3, [sp, #12]
 801d52a:	9a06      	ldr	r2, [sp, #24]
 801d52c:	4413      	add	r3, r2
 801d52e:	42bb      	cmp	r3, r7
 801d530:	d3e0      	bcc.n	801d4f4 <__gethex+0x22c>
 801d532:	4618      	mov	r0, r3
 801d534:	9901      	ldr	r1, [sp, #4]
 801d536:	9307      	str	r3, [sp, #28]
 801d538:	4652      	mov	r2, sl
 801d53a:	f7fd ffcd 	bl	801b4d8 <strncmp>
 801d53e:	9b07      	ldr	r3, [sp, #28]
 801d540:	2800      	cmp	r0, #0
 801d542:	d1d7      	bne.n	801d4f4 <__gethex+0x22c>
 801d544:	461e      	mov	r6, r3
 801d546:	e78b      	b.n	801d460 <__gethex+0x198>
 801d548:	f04f 0a03 	mov.w	sl, #3
 801d54c:	e7b8      	b.n	801d4c0 <__gethex+0x1f8>
 801d54e:	da0a      	bge.n	801d566 <__gethex+0x29e>
 801d550:	1a37      	subs	r7, r6, r0
 801d552:	4621      	mov	r1, r4
 801d554:	ee18 0a10 	vmov	r0, s16
 801d558:	463a      	mov	r2, r7
 801d55a:	f000 fc3f 	bl	801dddc <__lshift>
 801d55e:	1bed      	subs	r5, r5, r7
 801d560:	4604      	mov	r4, r0
 801d562:	f100 0914 	add.w	r9, r0, #20
 801d566:	f04f 0a00 	mov.w	sl, #0
 801d56a:	e7ae      	b.n	801d4ca <__gethex+0x202>
 801d56c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801d570:	42a8      	cmp	r0, r5
 801d572:	dd72      	ble.n	801d65a <__gethex+0x392>
 801d574:	1b45      	subs	r5, r0, r5
 801d576:	42ae      	cmp	r6, r5
 801d578:	dc36      	bgt.n	801d5e8 <__gethex+0x320>
 801d57a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801d57e:	2b02      	cmp	r3, #2
 801d580:	d02a      	beq.n	801d5d8 <__gethex+0x310>
 801d582:	2b03      	cmp	r3, #3
 801d584:	d02c      	beq.n	801d5e0 <__gethex+0x318>
 801d586:	2b01      	cmp	r3, #1
 801d588:	d115      	bne.n	801d5b6 <__gethex+0x2ee>
 801d58a:	42ae      	cmp	r6, r5
 801d58c:	d113      	bne.n	801d5b6 <__gethex+0x2ee>
 801d58e:	2e01      	cmp	r6, #1
 801d590:	d10b      	bne.n	801d5aa <__gethex+0x2e2>
 801d592:	9a04      	ldr	r2, [sp, #16]
 801d594:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801d598:	6013      	str	r3, [r2, #0]
 801d59a:	2301      	movs	r3, #1
 801d59c:	6123      	str	r3, [r4, #16]
 801d59e:	f8c9 3000 	str.w	r3, [r9]
 801d5a2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801d5a4:	2762      	movs	r7, #98	; 0x62
 801d5a6:	601c      	str	r4, [r3, #0]
 801d5a8:	e723      	b.n	801d3f2 <__gethex+0x12a>
 801d5aa:	1e71      	subs	r1, r6, #1
 801d5ac:	4620      	mov	r0, r4
 801d5ae:	f000 fe53 	bl	801e258 <__any_on>
 801d5b2:	2800      	cmp	r0, #0
 801d5b4:	d1ed      	bne.n	801d592 <__gethex+0x2ca>
 801d5b6:	ee18 0a10 	vmov	r0, s16
 801d5ba:	4621      	mov	r1, r4
 801d5bc:	f000 f9f2 	bl	801d9a4 <_Bfree>
 801d5c0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801d5c2:	2300      	movs	r3, #0
 801d5c4:	6013      	str	r3, [r2, #0]
 801d5c6:	2750      	movs	r7, #80	; 0x50
 801d5c8:	e713      	b.n	801d3f2 <__gethex+0x12a>
 801d5ca:	bf00      	nop
 801d5cc:	080242e0 	.word	0x080242e0
 801d5d0:	08024200 	.word	0x08024200
 801d5d4:	08024274 	.word	0x08024274
 801d5d8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801d5da:	2b00      	cmp	r3, #0
 801d5dc:	d1eb      	bne.n	801d5b6 <__gethex+0x2ee>
 801d5de:	e7d8      	b.n	801d592 <__gethex+0x2ca>
 801d5e0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801d5e2:	2b00      	cmp	r3, #0
 801d5e4:	d1d5      	bne.n	801d592 <__gethex+0x2ca>
 801d5e6:	e7e6      	b.n	801d5b6 <__gethex+0x2ee>
 801d5e8:	1e6f      	subs	r7, r5, #1
 801d5ea:	f1ba 0f00 	cmp.w	sl, #0
 801d5ee:	d131      	bne.n	801d654 <__gethex+0x38c>
 801d5f0:	b127      	cbz	r7, 801d5fc <__gethex+0x334>
 801d5f2:	4639      	mov	r1, r7
 801d5f4:	4620      	mov	r0, r4
 801d5f6:	f000 fe2f 	bl	801e258 <__any_on>
 801d5fa:	4682      	mov	sl, r0
 801d5fc:	117b      	asrs	r3, r7, #5
 801d5fe:	2101      	movs	r1, #1
 801d600:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 801d604:	f007 071f 	and.w	r7, r7, #31
 801d608:	fa01 f707 	lsl.w	r7, r1, r7
 801d60c:	421f      	tst	r7, r3
 801d60e:	4629      	mov	r1, r5
 801d610:	4620      	mov	r0, r4
 801d612:	bf18      	it	ne
 801d614:	f04a 0a02 	orrne.w	sl, sl, #2
 801d618:	1b76      	subs	r6, r6, r5
 801d61a:	f7ff fdee 	bl	801d1fa <rshift>
 801d61e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801d622:	2702      	movs	r7, #2
 801d624:	f1ba 0f00 	cmp.w	sl, #0
 801d628:	d048      	beq.n	801d6bc <__gethex+0x3f4>
 801d62a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801d62e:	2b02      	cmp	r3, #2
 801d630:	d015      	beq.n	801d65e <__gethex+0x396>
 801d632:	2b03      	cmp	r3, #3
 801d634:	d017      	beq.n	801d666 <__gethex+0x39e>
 801d636:	2b01      	cmp	r3, #1
 801d638:	d109      	bne.n	801d64e <__gethex+0x386>
 801d63a:	f01a 0f02 	tst.w	sl, #2
 801d63e:	d006      	beq.n	801d64e <__gethex+0x386>
 801d640:	f8d9 0000 	ldr.w	r0, [r9]
 801d644:	ea4a 0a00 	orr.w	sl, sl, r0
 801d648:	f01a 0f01 	tst.w	sl, #1
 801d64c:	d10e      	bne.n	801d66c <__gethex+0x3a4>
 801d64e:	f047 0710 	orr.w	r7, r7, #16
 801d652:	e033      	b.n	801d6bc <__gethex+0x3f4>
 801d654:	f04f 0a01 	mov.w	sl, #1
 801d658:	e7d0      	b.n	801d5fc <__gethex+0x334>
 801d65a:	2701      	movs	r7, #1
 801d65c:	e7e2      	b.n	801d624 <__gethex+0x35c>
 801d65e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801d660:	f1c3 0301 	rsb	r3, r3, #1
 801d664:	9315      	str	r3, [sp, #84]	; 0x54
 801d666:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801d668:	2b00      	cmp	r3, #0
 801d66a:	d0f0      	beq.n	801d64e <__gethex+0x386>
 801d66c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801d670:	f104 0314 	add.w	r3, r4, #20
 801d674:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801d678:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801d67c:	f04f 0c00 	mov.w	ip, #0
 801d680:	4618      	mov	r0, r3
 801d682:	f853 2b04 	ldr.w	r2, [r3], #4
 801d686:	f1b2 3fff 	cmp.w	r2, #4294967295
 801d68a:	d01c      	beq.n	801d6c6 <__gethex+0x3fe>
 801d68c:	3201      	adds	r2, #1
 801d68e:	6002      	str	r2, [r0, #0]
 801d690:	2f02      	cmp	r7, #2
 801d692:	f104 0314 	add.w	r3, r4, #20
 801d696:	d13f      	bne.n	801d718 <__gethex+0x450>
 801d698:	f8d8 2000 	ldr.w	r2, [r8]
 801d69c:	3a01      	subs	r2, #1
 801d69e:	42b2      	cmp	r2, r6
 801d6a0:	d10a      	bne.n	801d6b8 <__gethex+0x3f0>
 801d6a2:	1171      	asrs	r1, r6, #5
 801d6a4:	2201      	movs	r2, #1
 801d6a6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801d6aa:	f006 061f 	and.w	r6, r6, #31
 801d6ae:	fa02 f606 	lsl.w	r6, r2, r6
 801d6b2:	421e      	tst	r6, r3
 801d6b4:	bf18      	it	ne
 801d6b6:	4617      	movne	r7, r2
 801d6b8:	f047 0720 	orr.w	r7, r7, #32
 801d6bc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801d6be:	601c      	str	r4, [r3, #0]
 801d6c0:	9b04      	ldr	r3, [sp, #16]
 801d6c2:	601d      	str	r5, [r3, #0]
 801d6c4:	e695      	b.n	801d3f2 <__gethex+0x12a>
 801d6c6:	4299      	cmp	r1, r3
 801d6c8:	f843 cc04 	str.w	ip, [r3, #-4]
 801d6cc:	d8d8      	bhi.n	801d680 <__gethex+0x3b8>
 801d6ce:	68a3      	ldr	r3, [r4, #8]
 801d6d0:	459b      	cmp	fp, r3
 801d6d2:	db19      	blt.n	801d708 <__gethex+0x440>
 801d6d4:	6861      	ldr	r1, [r4, #4]
 801d6d6:	ee18 0a10 	vmov	r0, s16
 801d6da:	3101      	adds	r1, #1
 801d6dc:	f000 f922 	bl	801d924 <_Balloc>
 801d6e0:	4681      	mov	r9, r0
 801d6e2:	b918      	cbnz	r0, 801d6ec <__gethex+0x424>
 801d6e4:	4b1a      	ldr	r3, [pc, #104]	; (801d750 <__gethex+0x488>)
 801d6e6:	4602      	mov	r2, r0
 801d6e8:	2184      	movs	r1, #132	; 0x84
 801d6ea:	e6a8      	b.n	801d43e <__gethex+0x176>
 801d6ec:	6922      	ldr	r2, [r4, #16]
 801d6ee:	3202      	adds	r2, #2
 801d6f0:	f104 010c 	add.w	r1, r4, #12
 801d6f4:	0092      	lsls	r2, r2, #2
 801d6f6:	300c      	adds	r0, #12
 801d6f8:	f7fd f8ee 	bl	801a8d8 <memcpy>
 801d6fc:	4621      	mov	r1, r4
 801d6fe:	ee18 0a10 	vmov	r0, s16
 801d702:	f000 f94f 	bl	801d9a4 <_Bfree>
 801d706:	464c      	mov	r4, r9
 801d708:	6923      	ldr	r3, [r4, #16]
 801d70a:	1c5a      	adds	r2, r3, #1
 801d70c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801d710:	6122      	str	r2, [r4, #16]
 801d712:	2201      	movs	r2, #1
 801d714:	615a      	str	r2, [r3, #20]
 801d716:	e7bb      	b.n	801d690 <__gethex+0x3c8>
 801d718:	6922      	ldr	r2, [r4, #16]
 801d71a:	455a      	cmp	r2, fp
 801d71c:	dd0b      	ble.n	801d736 <__gethex+0x46e>
 801d71e:	2101      	movs	r1, #1
 801d720:	4620      	mov	r0, r4
 801d722:	f7ff fd6a 	bl	801d1fa <rshift>
 801d726:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801d72a:	3501      	adds	r5, #1
 801d72c:	42ab      	cmp	r3, r5
 801d72e:	f6ff aed0 	blt.w	801d4d2 <__gethex+0x20a>
 801d732:	2701      	movs	r7, #1
 801d734:	e7c0      	b.n	801d6b8 <__gethex+0x3f0>
 801d736:	f016 061f 	ands.w	r6, r6, #31
 801d73a:	d0fa      	beq.n	801d732 <__gethex+0x46a>
 801d73c:	449a      	add	sl, r3
 801d73e:	f1c6 0620 	rsb	r6, r6, #32
 801d742:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 801d746:	f000 f9e3 	bl	801db10 <__hi0bits>
 801d74a:	42b0      	cmp	r0, r6
 801d74c:	dbe7      	blt.n	801d71e <__gethex+0x456>
 801d74e:	e7f0      	b.n	801d732 <__gethex+0x46a>
 801d750:	08024200 	.word	0x08024200

0801d754 <L_shift>:
 801d754:	f1c2 0208 	rsb	r2, r2, #8
 801d758:	0092      	lsls	r2, r2, #2
 801d75a:	b570      	push	{r4, r5, r6, lr}
 801d75c:	f1c2 0620 	rsb	r6, r2, #32
 801d760:	6843      	ldr	r3, [r0, #4]
 801d762:	6804      	ldr	r4, [r0, #0]
 801d764:	fa03 f506 	lsl.w	r5, r3, r6
 801d768:	432c      	orrs	r4, r5
 801d76a:	40d3      	lsrs	r3, r2
 801d76c:	6004      	str	r4, [r0, #0]
 801d76e:	f840 3f04 	str.w	r3, [r0, #4]!
 801d772:	4288      	cmp	r0, r1
 801d774:	d3f4      	bcc.n	801d760 <L_shift+0xc>
 801d776:	bd70      	pop	{r4, r5, r6, pc}

0801d778 <__match>:
 801d778:	b530      	push	{r4, r5, lr}
 801d77a:	6803      	ldr	r3, [r0, #0]
 801d77c:	3301      	adds	r3, #1
 801d77e:	f811 4b01 	ldrb.w	r4, [r1], #1
 801d782:	b914      	cbnz	r4, 801d78a <__match+0x12>
 801d784:	6003      	str	r3, [r0, #0]
 801d786:	2001      	movs	r0, #1
 801d788:	bd30      	pop	{r4, r5, pc}
 801d78a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801d78e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801d792:	2d19      	cmp	r5, #25
 801d794:	bf98      	it	ls
 801d796:	3220      	addls	r2, #32
 801d798:	42a2      	cmp	r2, r4
 801d79a:	d0f0      	beq.n	801d77e <__match+0x6>
 801d79c:	2000      	movs	r0, #0
 801d79e:	e7f3      	b.n	801d788 <__match+0x10>

0801d7a0 <__hexnan>:
 801d7a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d7a4:	680b      	ldr	r3, [r1, #0]
 801d7a6:	6801      	ldr	r1, [r0, #0]
 801d7a8:	115e      	asrs	r6, r3, #5
 801d7aa:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801d7ae:	f013 031f 	ands.w	r3, r3, #31
 801d7b2:	b087      	sub	sp, #28
 801d7b4:	bf18      	it	ne
 801d7b6:	3604      	addne	r6, #4
 801d7b8:	2500      	movs	r5, #0
 801d7ba:	1f37      	subs	r7, r6, #4
 801d7bc:	4682      	mov	sl, r0
 801d7be:	4690      	mov	r8, r2
 801d7c0:	9301      	str	r3, [sp, #4]
 801d7c2:	f846 5c04 	str.w	r5, [r6, #-4]
 801d7c6:	46b9      	mov	r9, r7
 801d7c8:	463c      	mov	r4, r7
 801d7ca:	9502      	str	r5, [sp, #8]
 801d7cc:	46ab      	mov	fp, r5
 801d7ce:	784a      	ldrb	r2, [r1, #1]
 801d7d0:	1c4b      	adds	r3, r1, #1
 801d7d2:	9303      	str	r3, [sp, #12]
 801d7d4:	b342      	cbz	r2, 801d828 <__hexnan+0x88>
 801d7d6:	4610      	mov	r0, r2
 801d7d8:	9105      	str	r1, [sp, #20]
 801d7da:	9204      	str	r2, [sp, #16]
 801d7dc:	f7ff fd5f 	bl	801d29e <__hexdig_fun>
 801d7e0:	2800      	cmp	r0, #0
 801d7e2:	d14f      	bne.n	801d884 <__hexnan+0xe4>
 801d7e4:	9a04      	ldr	r2, [sp, #16]
 801d7e6:	9905      	ldr	r1, [sp, #20]
 801d7e8:	2a20      	cmp	r2, #32
 801d7ea:	d818      	bhi.n	801d81e <__hexnan+0x7e>
 801d7ec:	9b02      	ldr	r3, [sp, #8]
 801d7ee:	459b      	cmp	fp, r3
 801d7f0:	dd13      	ble.n	801d81a <__hexnan+0x7a>
 801d7f2:	454c      	cmp	r4, r9
 801d7f4:	d206      	bcs.n	801d804 <__hexnan+0x64>
 801d7f6:	2d07      	cmp	r5, #7
 801d7f8:	dc04      	bgt.n	801d804 <__hexnan+0x64>
 801d7fa:	462a      	mov	r2, r5
 801d7fc:	4649      	mov	r1, r9
 801d7fe:	4620      	mov	r0, r4
 801d800:	f7ff ffa8 	bl	801d754 <L_shift>
 801d804:	4544      	cmp	r4, r8
 801d806:	d950      	bls.n	801d8aa <__hexnan+0x10a>
 801d808:	2300      	movs	r3, #0
 801d80a:	f1a4 0904 	sub.w	r9, r4, #4
 801d80e:	f844 3c04 	str.w	r3, [r4, #-4]
 801d812:	f8cd b008 	str.w	fp, [sp, #8]
 801d816:	464c      	mov	r4, r9
 801d818:	461d      	mov	r5, r3
 801d81a:	9903      	ldr	r1, [sp, #12]
 801d81c:	e7d7      	b.n	801d7ce <__hexnan+0x2e>
 801d81e:	2a29      	cmp	r2, #41	; 0x29
 801d820:	d156      	bne.n	801d8d0 <__hexnan+0x130>
 801d822:	3102      	adds	r1, #2
 801d824:	f8ca 1000 	str.w	r1, [sl]
 801d828:	f1bb 0f00 	cmp.w	fp, #0
 801d82c:	d050      	beq.n	801d8d0 <__hexnan+0x130>
 801d82e:	454c      	cmp	r4, r9
 801d830:	d206      	bcs.n	801d840 <__hexnan+0xa0>
 801d832:	2d07      	cmp	r5, #7
 801d834:	dc04      	bgt.n	801d840 <__hexnan+0xa0>
 801d836:	462a      	mov	r2, r5
 801d838:	4649      	mov	r1, r9
 801d83a:	4620      	mov	r0, r4
 801d83c:	f7ff ff8a 	bl	801d754 <L_shift>
 801d840:	4544      	cmp	r4, r8
 801d842:	d934      	bls.n	801d8ae <__hexnan+0x10e>
 801d844:	f1a8 0204 	sub.w	r2, r8, #4
 801d848:	4623      	mov	r3, r4
 801d84a:	f853 1b04 	ldr.w	r1, [r3], #4
 801d84e:	f842 1f04 	str.w	r1, [r2, #4]!
 801d852:	429f      	cmp	r7, r3
 801d854:	d2f9      	bcs.n	801d84a <__hexnan+0xaa>
 801d856:	1b3b      	subs	r3, r7, r4
 801d858:	f023 0303 	bic.w	r3, r3, #3
 801d85c:	3304      	adds	r3, #4
 801d85e:	3401      	adds	r4, #1
 801d860:	3e03      	subs	r6, #3
 801d862:	42b4      	cmp	r4, r6
 801d864:	bf88      	it	hi
 801d866:	2304      	movhi	r3, #4
 801d868:	4443      	add	r3, r8
 801d86a:	2200      	movs	r2, #0
 801d86c:	f843 2b04 	str.w	r2, [r3], #4
 801d870:	429f      	cmp	r7, r3
 801d872:	d2fb      	bcs.n	801d86c <__hexnan+0xcc>
 801d874:	683b      	ldr	r3, [r7, #0]
 801d876:	b91b      	cbnz	r3, 801d880 <__hexnan+0xe0>
 801d878:	4547      	cmp	r7, r8
 801d87a:	d127      	bne.n	801d8cc <__hexnan+0x12c>
 801d87c:	2301      	movs	r3, #1
 801d87e:	603b      	str	r3, [r7, #0]
 801d880:	2005      	movs	r0, #5
 801d882:	e026      	b.n	801d8d2 <__hexnan+0x132>
 801d884:	3501      	adds	r5, #1
 801d886:	2d08      	cmp	r5, #8
 801d888:	f10b 0b01 	add.w	fp, fp, #1
 801d88c:	dd06      	ble.n	801d89c <__hexnan+0xfc>
 801d88e:	4544      	cmp	r4, r8
 801d890:	d9c3      	bls.n	801d81a <__hexnan+0x7a>
 801d892:	2300      	movs	r3, #0
 801d894:	f844 3c04 	str.w	r3, [r4, #-4]
 801d898:	2501      	movs	r5, #1
 801d89a:	3c04      	subs	r4, #4
 801d89c:	6822      	ldr	r2, [r4, #0]
 801d89e:	f000 000f 	and.w	r0, r0, #15
 801d8a2:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 801d8a6:	6022      	str	r2, [r4, #0]
 801d8a8:	e7b7      	b.n	801d81a <__hexnan+0x7a>
 801d8aa:	2508      	movs	r5, #8
 801d8ac:	e7b5      	b.n	801d81a <__hexnan+0x7a>
 801d8ae:	9b01      	ldr	r3, [sp, #4]
 801d8b0:	2b00      	cmp	r3, #0
 801d8b2:	d0df      	beq.n	801d874 <__hexnan+0xd4>
 801d8b4:	f04f 32ff 	mov.w	r2, #4294967295
 801d8b8:	f1c3 0320 	rsb	r3, r3, #32
 801d8bc:	fa22 f303 	lsr.w	r3, r2, r3
 801d8c0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801d8c4:	401a      	ands	r2, r3
 801d8c6:	f846 2c04 	str.w	r2, [r6, #-4]
 801d8ca:	e7d3      	b.n	801d874 <__hexnan+0xd4>
 801d8cc:	3f04      	subs	r7, #4
 801d8ce:	e7d1      	b.n	801d874 <__hexnan+0xd4>
 801d8d0:	2004      	movs	r0, #4
 801d8d2:	b007      	add	sp, #28
 801d8d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d8d8 <_localeconv_r>:
 801d8d8:	4800      	ldr	r0, [pc, #0]	; (801d8dc <_localeconv_r+0x4>)
 801d8da:	4770      	bx	lr
 801d8dc:	200001dc 	.word	0x200001dc

0801d8e0 <__retarget_lock_init_recursive>:
 801d8e0:	4770      	bx	lr

0801d8e2 <__retarget_lock_acquire_recursive>:
 801d8e2:	4770      	bx	lr

0801d8e4 <__retarget_lock_release_recursive>:
 801d8e4:	4770      	bx	lr

0801d8e6 <__ascii_mbtowc>:
 801d8e6:	b082      	sub	sp, #8
 801d8e8:	b901      	cbnz	r1, 801d8ec <__ascii_mbtowc+0x6>
 801d8ea:	a901      	add	r1, sp, #4
 801d8ec:	b142      	cbz	r2, 801d900 <__ascii_mbtowc+0x1a>
 801d8ee:	b14b      	cbz	r3, 801d904 <__ascii_mbtowc+0x1e>
 801d8f0:	7813      	ldrb	r3, [r2, #0]
 801d8f2:	600b      	str	r3, [r1, #0]
 801d8f4:	7812      	ldrb	r2, [r2, #0]
 801d8f6:	1e10      	subs	r0, r2, #0
 801d8f8:	bf18      	it	ne
 801d8fa:	2001      	movne	r0, #1
 801d8fc:	b002      	add	sp, #8
 801d8fe:	4770      	bx	lr
 801d900:	4610      	mov	r0, r2
 801d902:	e7fb      	b.n	801d8fc <__ascii_mbtowc+0x16>
 801d904:	f06f 0001 	mvn.w	r0, #1
 801d908:	e7f8      	b.n	801d8fc <__ascii_mbtowc+0x16>
	...

0801d90c <__malloc_lock>:
 801d90c:	4801      	ldr	r0, [pc, #4]	; (801d914 <__malloc_lock+0x8>)
 801d90e:	f7ff bfe8 	b.w	801d8e2 <__retarget_lock_acquire_recursive>
 801d912:	bf00      	nop
 801d914:	2000767c 	.word	0x2000767c

0801d918 <__malloc_unlock>:
 801d918:	4801      	ldr	r0, [pc, #4]	; (801d920 <__malloc_unlock+0x8>)
 801d91a:	f7ff bfe3 	b.w	801d8e4 <__retarget_lock_release_recursive>
 801d91e:	bf00      	nop
 801d920:	2000767c 	.word	0x2000767c

0801d924 <_Balloc>:
 801d924:	b570      	push	{r4, r5, r6, lr}
 801d926:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801d928:	4604      	mov	r4, r0
 801d92a:	460d      	mov	r5, r1
 801d92c:	b976      	cbnz	r6, 801d94c <_Balloc+0x28>
 801d92e:	2010      	movs	r0, #16
 801d930:	f7fc ffb4 	bl	801a89c <malloc>
 801d934:	4602      	mov	r2, r0
 801d936:	6260      	str	r0, [r4, #36]	; 0x24
 801d938:	b920      	cbnz	r0, 801d944 <_Balloc+0x20>
 801d93a:	4b18      	ldr	r3, [pc, #96]	; (801d99c <_Balloc+0x78>)
 801d93c:	4818      	ldr	r0, [pc, #96]	; (801d9a0 <_Balloc+0x7c>)
 801d93e:	2166      	movs	r1, #102	; 0x66
 801d940:	f7fe fcb6 	bl	801c2b0 <__assert_func>
 801d944:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801d948:	6006      	str	r6, [r0, #0]
 801d94a:	60c6      	str	r6, [r0, #12]
 801d94c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801d94e:	68f3      	ldr	r3, [r6, #12]
 801d950:	b183      	cbz	r3, 801d974 <_Balloc+0x50>
 801d952:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801d954:	68db      	ldr	r3, [r3, #12]
 801d956:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801d95a:	b9b8      	cbnz	r0, 801d98c <_Balloc+0x68>
 801d95c:	2101      	movs	r1, #1
 801d95e:	fa01 f605 	lsl.w	r6, r1, r5
 801d962:	1d72      	adds	r2, r6, #5
 801d964:	0092      	lsls	r2, r2, #2
 801d966:	4620      	mov	r0, r4
 801d968:	f000 fc97 	bl	801e29a <_calloc_r>
 801d96c:	b160      	cbz	r0, 801d988 <_Balloc+0x64>
 801d96e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801d972:	e00e      	b.n	801d992 <_Balloc+0x6e>
 801d974:	2221      	movs	r2, #33	; 0x21
 801d976:	2104      	movs	r1, #4
 801d978:	4620      	mov	r0, r4
 801d97a:	f000 fc8e 	bl	801e29a <_calloc_r>
 801d97e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801d980:	60f0      	str	r0, [r6, #12]
 801d982:	68db      	ldr	r3, [r3, #12]
 801d984:	2b00      	cmp	r3, #0
 801d986:	d1e4      	bne.n	801d952 <_Balloc+0x2e>
 801d988:	2000      	movs	r0, #0
 801d98a:	bd70      	pop	{r4, r5, r6, pc}
 801d98c:	6802      	ldr	r2, [r0, #0]
 801d98e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801d992:	2300      	movs	r3, #0
 801d994:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801d998:	e7f7      	b.n	801d98a <_Balloc+0x66>
 801d99a:	bf00      	nop
 801d99c:	08024090 	.word	0x08024090
 801d9a0:	080242f4 	.word	0x080242f4

0801d9a4 <_Bfree>:
 801d9a4:	b570      	push	{r4, r5, r6, lr}
 801d9a6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801d9a8:	4605      	mov	r5, r0
 801d9aa:	460c      	mov	r4, r1
 801d9ac:	b976      	cbnz	r6, 801d9cc <_Bfree+0x28>
 801d9ae:	2010      	movs	r0, #16
 801d9b0:	f7fc ff74 	bl	801a89c <malloc>
 801d9b4:	4602      	mov	r2, r0
 801d9b6:	6268      	str	r0, [r5, #36]	; 0x24
 801d9b8:	b920      	cbnz	r0, 801d9c4 <_Bfree+0x20>
 801d9ba:	4b09      	ldr	r3, [pc, #36]	; (801d9e0 <_Bfree+0x3c>)
 801d9bc:	4809      	ldr	r0, [pc, #36]	; (801d9e4 <_Bfree+0x40>)
 801d9be:	218a      	movs	r1, #138	; 0x8a
 801d9c0:	f7fe fc76 	bl	801c2b0 <__assert_func>
 801d9c4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801d9c8:	6006      	str	r6, [r0, #0]
 801d9ca:	60c6      	str	r6, [r0, #12]
 801d9cc:	b13c      	cbz	r4, 801d9de <_Bfree+0x3a>
 801d9ce:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801d9d0:	6862      	ldr	r2, [r4, #4]
 801d9d2:	68db      	ldr	r3, [r3, #12]
 801d9d4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801d9d8:	6021      	str	r1, [r4, #0]
 801d9da:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801d9de:	bd70      	pop	{r4, r5, r6, pc}
 801d9e0:	08024090 	.word	0x08024090
 801d9e4:	080242f4 	.word	0x080242f4

0801d9e8 <__multadd>:
 801d9e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d9ec:	690e      	ldr	r6, [r1, #16]
 801d9ee:	4607      	mov	r7, r0
 801d9f0:	4698      	mov	r8, r3
 801d9f2:	460c      	mov	r4, r1
 801d9f4:	f101 0014 	add.w	r0, r1, #20
 801d9f8:	2300      	movs	r3, #0
 801d9fa:	6805      	ldr	r5, [r0, #0]
 801d9fc:	b2a9      	uxth	r1, r5
 801d9fe:	fb02 8101 	mla	r1, r2, r1, r8
 801da02:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 801da06:	0c2d      	lsrs	r5, r5, #16
 801da08:	fb02 c505 	mla	r5, r2, r5, ip
 801da0c:	b289      	uxth	r1, r1
 801da0e:	3301      	adds	r3, #1
 801da10:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 801da14:	429e      	cmp	r6, r3
 801da16:	f840 1b04 	str.w	r1, [r0], #4
 801da1a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 801da1e:	dcec      	bgt.n	801d9fa <__multadd+0x12>
 801da20:	f1b8 0f00 	cmp.w	r8, #0
 801da24:	d022      	beq.n	801da6c <__multadd+0x84>
 801da26:	68a3      	ldr	r3, [r4, #8]
 801da28:	42b3      	cmp	r3, r6
 801da2a:	dc19      	bgt.n	801da60 <__multadd+0x78>
 801da2c:	6861      	ldr	r1, [r4, #4]
 801da2e:	4638      	mov	r0, r7
 801da30:	3101      	adds	r1, #1
 801da32:	f7ff ff77 	bl	801d924 <_Balloc>
 801da36:	4605      	mov	r5, r0
 801da38:	b928      	cbnz	r0, 801da46 <__multadd+0x5e>
 801da3a:	4602      	mov	r2, r0
 801da3c:	4b0d      	ldr	r3, [pc, #52]	; (801da74 <__multadd+0x8c>)
 801da3e:	480e      	ldr	r0, [pc, #56]	; (801da78 <__multadd+0x90>)
 801da40:	21b5      	movs	r1, #181	; 0xb5
 801da42:	f7fe fc35 	bl	801c2b0 <__assert_func>
 801da46:	6922      	ldr	r2, [r4, #16]
 801da48:	3202      	adds	r2, #2
 801da4a:	f104 010c 	add.w	r1, r4, #12
 801da4e:	0092      	lsls	r2, r2, #2
 801da50:	300c      	adds	r0, #12
 801da52:	f7fc ff41 	bl	801a8d8 <memcpy>
 801da56:	4621      	mov	r1, r4
 801da58:	4638      	mov	r0, r7
 801da5a:	f7ff ffa3 	bl	801d9a4 <_Bfree>
 801da5e:	462c      	mov	r4, r5
 801da60:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 801da64:	3601      	adds	r6, #1
 801da66:	f8c3 8014 	str.w	r8, [r3, #20]
 801da6a:	6126      	str	r6, [r4, #16]
 801da6c:	4620      	mov	r0, r4
 801da6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801da72:	bf00      	nop
 801da74:	08024200 	.word	0x08024200
 801da78:	080242f4 	.word	0x080242f4

0801da7c <__s2b>:
 801da7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801da80:	460c      	mov	r4, r1
 801da82:	4615      	mov	r5, r2
 801da84:	461f      	mov	r7, r3
 801da86:	2209      	movs	r2, #9
 801da88:	3308      	adds	r3, #8
 801da8a:	4606      	mov	r6, r0
 801da8c:	fb93 f3f2 	sdiv	r3, r3, r2
 801da90:	2100      	movs	r1, #0
 801da92:	2201      	movs	r2, #1
 801da94:	429a      	cmp	r2, r3
 801da96:	db09      	blt.n	801daac <__s2b+0x30>
 801da98:	4630      	mov	r0, r6
 801da9a:	f7ff ff43 	bl	801d924 <_Balloc>
 801da9e:	b940      	cbnz	r0, 801dab2 <__s2b+0x36>
 801daa0:	4602      	mov	r2, r0
 801daa2:	4b19      	ldr	r3, [pc, #100]	; (801db08 <__s2b+0x8c>)
 801daa4:	4819      	ldr	r0, [pc, #100]	; (801db0c <__s2b+0x90>)
 801daa6:	21ce      	movs	r1, #206	; 0xce
 801daa8:	f7fe fc02 	bl	801c2b0 <__assert_func>
 801daac:	0052      	lsls	r2, r2, #1
 801daae:	3101      	adds	r1, #1
 801dab0:	e7f0      	b.n	801da94 <__s2b+0x18>
 801dab2:	9b08      	ldr	r3, [sp, #32]
 801dab4:	6143      	str	r3, [r0, #20]
 801dab6:	2d09      	cmp	r5, #9
 801dab8:	f04f 0301 	mov.w	r3, #1
 801dabc:	6103      	str	r3, [r0, #16]
 801dabe:	dd16      	ble.n	801daee <__s2b+0x72>
 801dac0:	f104 0909 	add.w	r9, r4, #9
 801dac4:	46c8      	mov	r8, r9
 801dac6:	442c      	add	r4, r5
 801dac8:	f818 3b01 	ldrb.w	r3, [r8], #1
 801dacc:	4601      	mov	r1, r0
 801dace:	3b30      	subs	r3, #48	; 0x30
 801dad0:	220a      	movs	r2, #10
 801dad2:	4630      	mov	r0, r6
 801dad4:	f7ff ff88 	bl	801d9e8 <__multadd>
 801dad8:	45a0      	cmp	r8, r4
 801dada:	d1f5      	bne.n	801dac8 <__s2b+0x4c>
 801dadc:	f1a5 0408 	sub.w	r4, r5, #8
 801dae0:	444c      	add	r4, r9
 801dae2:	1b2d      	subs	r5, r5, r4
 801dae4:	1963      	adds	r3, r4, r5
 801dae6:	42bb      	cmp	r3, r7
 801dae8:	db04      	blt.n	801daf4 <__s2b+0x78>
 801daea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801daee:	340a      	adds	r4, #10
 801daf0:	2509      	movs	r5, #9
 801daf2:	e7f6      	b.n	801dae2 <__s2b+0x66>
 801daf4:	f814 3b01 	ldrb.w	r3, [r4], #1
 801daf8:	4601      	mov	r1, r0
 801dafa:	3b30      	subs	r3, #48	; 0x30
 801dafc:	220a      	movs	r2, #10
 801dafe:	4630      	mov	r0, r6
 801db00:	f7ff ff72 	bl	801d9e8 <__multadd>
 801db04:	e7ee      	b.n	801dae4 <__s2b+0x68>
 801db06:	bf00      	nop
 801db08:	08024200 	.word	0x08024200
 801db0c:	080242f4 	.word	0x080242f4

0801db10 <__hi0bits>:
 801db10:	0c03      	lsrs	r3, r0, #16
 801db12:	041b      	lsls	r3, r3, #16
 801db14:	b9d3      	cbnz	r3, 801db4c <__hi0bits+0x3c>
 801db16:	0400      	lsls	r0, r0, #16
 801db18:	2310      	movs	r3, #16
 801db1a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801db1e:	bf04      	itt	eq
 801db20:	0200      	lsleq	r0, r0, #8
 801db22:	3308      	addeq	r3, #8
 801db24:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801db28:	bf04      	itt	eq
 801db2a:	0100      	lsleq	r0, r0, #4
 801db2c:	3304      	addeq	r3, #4
 801db2e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801db32:	bf04      	itt	eq
 801db34:	0080      	lsleq	r0, r0, #2
 801db36:	3302      	addeq	r3, #2
 801db38:	2800      	cmp	r0, #0
 801db3a:	db05      	blt.n	801db48 <__hi0bits+0x38>
 801db3c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801db40:	f103 0301 	add.w	r3, r3, #1
 801db44:	bf08      	it	eq
 801db46:	2320      	moveq	r3, #32
 801db48:	4618      	mov	r0, r3
 801db4a:	4770      	bx	lr
 801db4c:	2300      	movs	r3, #0
 801db4e:	e7e4      	b.n	801db1a <__hi0bits+0xa>

0801db50 <__lo0bits>:
 801db50:	6803      	ldr	r3, [r0, #0]
 801db52:	f013 0207 	ands.w	r2, r3, #7
 801db56:	4601      	mov	r1, r0
 801db58:	d00b      	beq.n	801db72 <__lo0bits+0x22>
 801db5a:	07da      	lsls	r2, r3, #31
 801db5c:	d424      	bmi.n	801dba8 <__lo0bits+0x58>
 801db5e:	0798      	lsls	r0, r3, #30
 801db60:	bf49      	itett	mi
 801db62:	085b      	lsrmi	r3, r3, #1
 801db64:	089b      	lsrpl	r3, r3, #2
 801db66:	2001      	movmi	r0, #1
 801db68:	600b      	strmi	r3, [r1, #0]
 801db6a:	bf5c      	itt	pl
 801db6c:	600b      	strpl	r3, [r1, #0]
 801db6e:	2002      	movpl	r0, #2
 801db70:	4770      	bx	lr
 801db72:	b298      	uxth	r0, r3
 801db74:	b9b0      	cbnz	r0, 801dba4 <__lo0bits+0x54>
 801db76:	0c1b      	lsrs	r3, r3, #16
 801db78:	2010      	movs	r0, #16
 801db7a:	f013 0fff 	tst.w	r3, #255	; 0xff
 801db7e:	bf04      	itt	eq
 801db80:	0a1b      	lsreq	r3, r3, #8
 801db82:	3008      	addeq	r0, #8
 801db84:	071a      	lsls	r2, r3, #28
 801db86:	bf04      	itt	eq
 801db88:	091b      	lsreq	r3, r3, #4
 801db8a:	3004      	addeq	r0, #4
 801db8c:	079a      	lsls	r2, r3, #30
 801db8e:	bf04      	itt	eq
 801db90:	089b      	lsreq	r3, r3, #2
 801db92:	3002      	addeq	r0, #2
 801db94:	07da      	lsls	r2, r3, #31
 801db96:	d403      	bmi.n	801dba0 <__lo0bits+0x50>
 801db98:	085b      	lsrs	r3, r3, #1
 801db9a:	f100 0001 	add.w	r0, r0, #1
 801db9e:	d005      	beq.n	801dbac <__lo0bits+0x5c>
 801dba0:	600b      	str	r3, [r1, #0]
 801dba2:	4770      	bx	lr
 801dba4:	4610      	mov	r0, r2
 801dba6:	e7e8      	b.n	801db7a <__lo0bits+0x2a>
 801dba8:	2000      	movs	r0, #0
 801dbaa:	4770      	bx	lr
 801dbac:	2020      	movs	r0, #32
 801dbae:	4770      	bx	lr

0801dbb0 <__i2b>:
 801dbb0:	b510      	push	{r4, lr}
 801dbb2:	460c      	mov	r4, r1
 801dbb4:	2101      	movs	r1, #1
 801dbb6:	f7ff feb5 	bl	801d924 <_Balloc>
 801dbba:	4602      	mov	r2, r0
 801dbbc:	b928      	cbnz	r0, 801dbca <__i2b+0x1a>
 801dbbe:	4b05      	ldr	r3, [pc, #20]	; (801dbd4 <__i2b+0x24>)
 801dbc0:	4805      	ldr	r0, [pc, #20]	; (801dbd8 <__i2b+0x28>)
 801dbc2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801dbc6:	f7fe fb73 	bl	801c2b0 <__assert_func>
 801dbca:	2301      	movs	r3, #1
 801dbcc:	6144      	str	r4, [r0, #20]
 801dbce:	6103      	str	r3, [r0, #16]
 801dbd0:	bd10      	pop	{r4, pc}
 801dbd2:	bf00      	nop
 801dbd4:	08024200 	.word	0x08024200
 801dbd8:	080242f4 	.word	0x080242f4

0801dbdc <__multiply>:
 801dbdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dbe0:	4614      	mov	r4, r2
 801dbe2:	690a      	ldr	r2, [r1, #16]
 801dbe4:	6923      	ldr	r3, [r4, #16]
 801dbe6:	429a      	cmp	r2, r3
 801dbe8:	bfb8      	it	lt
 801dbea:	460b      	movlt	r3, r1
 801dbec:	460d      	mov	r5, r1
 801dbee:	bfbc      	itt	lt
 801dbf0:	4625      	movlt	r5, r4
 801dbf2:	461c      	movlt	r4, r3
 801dbf4:	f8d5 a010 	ldr.w	sl, [r5, #16]
 801dbf8:	f8d4 9010 	ldr.w	r9, [r4, #16]
 801dbfc:	68ab      	ldr	r3, [r5, #8]
 801dbfe:	6869      	ldr	r1, [r5, #4]
 801dc00:	eb0a 0709 	add.w	r7, sl, r9
 801dc04:	42bb      	cmp	r3, r7
 801dc06:	b085      	sub	sp, #20
 801dc08:	bfb8      	it	lt
 801dc0a:	3101      	addlt	r1, #1
 801dc0c:	f7ff fe8a 	bl	801d924 <_Balloc>
 801dc10:	b930      	cbnz	r0, 801dc20 <__multiply+0x44>
 801dc12:	4602      	mov	r2, r0
 801dc14:	4b42      	ldr	r3, [pc, #264]	; (801dd20 <__multiply+0x144>)
 801dc16:	4843      	ldr	r0, [pc, #268]	; (801dd24 <__multiply+0x148>)
 801dc18:	f240 115d 	movw	r1, #349	; 0x15d
 801dc1c:	f7fe fb48 	bl	801c2b0 <__assert_func>
 801dc20:	f100 0614 	add.w	r6, r0, #20
 801dc24:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 801dc28:	4633      	mov	r3, r6
 801dc2a:	2200      	movs	r2, #0
 801dc2c:	4543      	cmp	r3, r8
 801dc2e:	d31e      	bcc.n	801dc6e <__multiply+0x92>
 801dc30:	f105 0c14 	add.w	ip, r5, #20
 801dc34:	f104 0314 	add.w	r3, r4, #20
 801dc38:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 801dc3c:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 801dc40:	9202      	str	r2, [sp, #8]
 801dc42:	ebac 0205 	sub.w	r2, ip, r5
 801dc46:	3a15      	subs	r2, #21
 801dc48:	f022 0203 	bic.w	r2, r2, #3
 801dc4c:	3204      	adds	r2, #4
 801dc4e:	f105 0115 	add.w	r1, r5, #21
 801dc52:	458c      	cmp	ip, r1
 801dc54:	bf38      	it	cc
 801dc56:	2204      	movcc	r2, #4
 801dc58:	9201      	str	r2, [sp, #4]
 801dc5a:	9a02      	ldr	r2, [sp, #8]
 801dc5c:	9303      	str	r3, [sp, #12]
 801dc5e:	429a      	cmp	r2, r3
 801dc60:	d808      	bhi.n	801dc74 <__multiply+0x98>
 801dc62:	2f00      	cmp	r7, #0
 801dc64:	dc55      	bgt.n	801dd12 <__multiply+0x136>
 801dc66:	6107      	str	r7, [r0, #16]
 801dc68:	b005      	add	sp, #20
 801dc6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dc6e:	f843 2b04 	str.w	r2, [r3], #4
 801dc72:	e7db      	b.n	801dc2c <__multiply+0x50>
 801dc74:	f8b3 a000 	ldrh.w	sl, [r3]
 801dc78:	f1ba 0f00 	cmp.w	sl, #0
 801dc7c:	d020      	beq.n	801dcc0 <__multiply+0xe4>
 801dc7e:	f105 0e14 	add.w	lr, r5, #20
 801dc82:	46b1      	mov	r9, r6
 801dc84:	2200      	movs	r2, #0
 801dc86:	f85e 4b04 	ldr.w	r4, [lr], #4
 801dc8a:	f8d9 b000 	ldr.w	fp, [r9]
 801dc8e:	b2a1      	uxth	r1, r4
 801dc90:	fa1f fb8b 	uxth.w	fp, fp
 801dc94:	fb0a b101 	mla	r1, sl, r1, fp
 801dc98:	4411      	add	r1, r2
 801dc9a:	f8d9 2000 	ldr.w	r2, [r9]
 801dc9e:	0c24      	lsrs	r4, r4, #16
 801dca0:	0c12      	lsrs	r2, r2, #16
 801dca2:	fb0a 2404 	mla	r4, sl, r4, r2
 801dca6:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 801dcaa:	b289      	uxth	r1, r1
 801dcac:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 801dcb0:	45f4      	cmp	ip, lr
 801dcb2:	f849 1b04 	str.w	r1, [r9], #4
 801dcb6:	ea4f 4214 	mov.w	r2, r4, lsr #16
 801dcba:	d8e4      	bhi.n	801dc86 <__multiply+0xaa>
 801dcbc:	9901      	ldr	r1, [sp, #4]
 801dcbe:	5072      	str	r2, [r6, r1]
 801dcc0:	9a03      	ldr	r2, [sp, #12]
 801dcc2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801dcc6:	3304      	adds	r3, #4
 801dcc8:	f1b9 0f00 	cmp.w	r9, #0
 801dccc:	d01f      	beq.n	801dd0e <__multiply+0x132>
 801dcce:	6834      	ldr	r4, [r6, #0]
 801dcd0:	f105 0114 	add.w	r1, r5, #20
 801dcd4:	46b6      	mov	lr, r6
 801dcd6:	f04f 0a00 	mov.w	sl, #0
 801dcda:	880a      	ldrh	r2, [r1, #0]
 801dcdc:	f8be b002 	ldrh.w	fp, [lr, #2]
 801dce0:	fb09 b202 	mla	r2, r9, r2, fp
 801dce4:	4492      	add	sl, r2
 801dce6:	b2a4      	uxth	r4, r4
 801dce8:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 801dcec:	f84e 4b04 	str.w	r4, [lr], #4
 801dcf0:	f851 4b04 	ldr.w	r4, [r1], #4
 801dcf4:	f8be 2000 	ldrh.w	r2, [lr]
 801dcf8:	0c24      	lsrs	r4, r4, #16
 801dcfa:	fb09 2404 	mla	r4, r9, r4, r2
 801dcfe:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 801dd02:	458c      	cmp	ip, r1
 801dd04:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 801dd08:	d8e7      	bhi.n	801dcda <__multiply+0xfe>
 801dd0a:	9a01      	ldr	r2, [sp, #4]
 801dd0c:	50b4      	str	r4, [r6, r2]
 801dd0e:	3604      	adds	r6, #4
 801dd10:	e7a3      	b.n	801dc5a <__multiply+0x7e>
 801dd12:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801dd16:	2b00      	cmp	r3, #0
 801dd18:	d1a5      	bne.n	801dc66 <__multiply+0x8a>
 801dd1a:	3f01      	subs	r7, #1
 801dd1c:	e7a1      	b.n	801dc62 <__multiply+0x86>
 801dd1e:	bf00      	nop
 801dd20:	08024200 	.word	0x08024200
 801dd24:	080242f4 	.word	0x080242f4

0801dd28 <__pow5mult>:
 801dd28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801dd2c:	4615      	mov	r5, r2
 801dd2e:	f012 0203 	ands.w	r2, r2, #3
 801dd32:	4606      	mov	r6, r0
 801dd34:	460f      	mov	r7, r1
 801dd36:	d007      	beq.n	801dd48 <__pow5mult+0x20>
 801dd38:	4c25      	ldr	r4, [pc, #148]	; (801ddd0 <__pow5mult+0xa8>)
 801dd3a:	3a01      	subs	r2, #1
 801dd3c:	2300      	movs	r3, #0
 801dd3e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801dd42:	f7ff fe51 	bl	801d9e8 <__multadd>
 801dd46:	4607      	mov	r7, r0
 801dd48:	10ad      	asrs	r5, r5, #2
 801dd4a:	d03d      	beq.n	801ddc8 <__pow5mult+0xa0>
 801dd4c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801dd4e:	b97c      	cbnz	r4, 801dd70 <__pow5mult+0x48>
 801dd50:	2010      	movs	r0, #16
 801dd52:	f7fc fda3 	bl	801a89c <malloc>
 801dd56:	4602      	mov	r2, r0
 801dd58:	6270      	str	r0, [r6, #36]	; 0x24
 801dd5a:	b928      	cbnz	r0, 801dd68 <__pow5mult+0x40>
 801dd5c:	4b1d      	ldr	r3, [pc, #116]	; (801ddd4 <__pow5mult+0xac>)
 801dd5e:	481e      	ldr	r0, [pc, #120]	; (801ddd8 <__pow5mult+0xb0>)
 801dd60:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801dd64:	f7fe faa4 	bl	801c2b0 <__assert_func>
 801dd68:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801dd6c:	6004      	str	r4, [r0, #0]
 801dd6e:	60c4      	str	r4, [r0, #12]
 801dd70:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801dd74:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801dd78:	b94c      	cbnz	r4, 801dd8e <__pow5mult+0x66>
 801dd7a:	f240 2171 	movw	r1, #625	; 0x271
 801dd7e:	4630      	mov	r0, r6
 801dd80:	f7ff ff16 	bl	801dbb0 <__i2b>
 801dd84:	2300      	movs	r3, #0
 801dd86:	f8c8 0008 	str.w	r0, [r8, #8]
 801dd8a:	4604      	mov	r4, r0
 801dd8c:	6003      	str	r3, [r0, #0]
 801dd8e:	f04f 0900 	mov.w	r9, #0
 801dd92:	07eb      	lsls	r3, r5, #31
 801dd94:	d50a      	bpl.n	801ddac <__pow5mult+0x84>
 801dd96:	4639      	mov	r1, r7
 801dd98:	4622      	mov	r2, r4
 801dd9a:	4630      	mov	r0, r6
 801dd9c:	f7ff ff1e 	bl	801dbdc <__multiply>
 801dda0:	4639      	mov	r1, r7
 801dda2:	4680      	mov	r8, r0
 801dda4:	4630      	mov	r0, r6
 801dda6:	f7ff fdfd 	bl	801d9a4 <_Bfree>
 801ddaa:	4647      	mov	r7, r8
 801ddac:	106d      	asrs	r5, r5, #1
 801ddae:	d00b      	beq.n	801ddc8 <__pow5mult+0xa0>
 801ddb0:	6820      	ldr	r0, [r4, #0]
 801ddb2:	b938      	cbnz	r0, 801ddc4 <__pow5mult+0x9c>
 801ddb4:	4622      	mov	r2, r4
 801ddb6:	4621      	mov	r1, r4
 801ddb8:	4630      	mov	r0, r6
 801ddba:	f7ff ff0f 	bl	801dbdc <__multiply>
 801ddbe:	6020      	str	r0, [r4, #0]
 801ddc0:	f8c0 9000 	str.w	r9, [r0]
 801ddc4:	4604      	mov	r4, r0
 801ddc6:	e7e4      	b.n	801dd92 <__pow5mult+0x6a>
 801ddc8:	4638      	mov	r0, r7
 801ddca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ddce:	bf00      	nop
 801ddd0:	08024448 	.word	0x08024448
 801ddd4:	08024090 	.word	0x08024090
 801ddd8:	080242f4 	.word	0x080242f4

0801dddc <__lshift>:
 801dddc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801dde0:	460c      	mov	r4, r1
 801dde2:	6849      	ldr	r1, [r1, #4]
 801dde4:	6923      	ldr	r3, [r4, #16]
 801dde6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801ddea:	68a3      	ldr	r3, [r4, #8]
 801ddec:	4607      	mov	r7, r0
 801ddee:	4691      	mov	r9, r2
 801ddf0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801ddf4:	f108 0601 	add.w	r6, r8, #1
 801ddf8:	42b3      	cmp	r3, r6
 801ddfa:	db0b      	blt.n	801de14 <__lshift+0x38>
 801ddfc:	4638      	mov	r0, r7
 801ddfe:	f7ff fd91 	bl	801d924 <_Balloc>
 801de02:	4605      	mov	r5, r0
 801de04:	b948      	cbnz	r0, 801de1a <__lshift+0x3e>
 801de06:	4602      	mov	r2, r0
 801de08:	4b28      	ldr	r3, [pc, #160]	; (801deac <__lshift+0xd0>)
 801de0a:	4829      	ldr	r0, [pc, #164]	; (801deb0 <__lshift+0xd4>)
 801de0c:	f240 11d9 	movw	r1, #473	; 0x1d9
 801de10:	f7fe fa4e 	bl	801c2b0 <__assert_func>
 801de14:	3101      	adds	r1, #1
 801de16:	005b      	lsls	r3, r3, #1
 801de18:	e7ee      	b.n	801ddf8 <__lshift+0x1c>
 801de1a:	2300      	movs	r3, #0
 801de1c:	f100 0114 	add.w	r1, r0, #20
 801de20:	f100 0210 	add.w	r2, r0, #16
 801de24:	4618      	mov	r0, r3
 801de26:	4553      	cmp	r3, sl
 801de28:	db33      	blt.n	801de92 <__lshift+0xb6>
 801de2a:	6920      	ldr	r0, [r4, #16]
 801de2c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801de30:	f104 0314 	add.w	r3, r4, #20
 801de34:	f019 091f 	ands.w	r9, r9, #31
 801de38:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801de3c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801de40:	d02b      	beq.n	801de9a <__lshift+0xbe>
 801de42:	f1c9 0e20 	rsb	lr, r9, #32
 801de46:	468a      	mov	sl, r1
 801de48:	2200      	movs	r2, #0
 801de4a:	6818      	ldr	r0, [r3, #0]
 801de4c:	fa00 f009 	lsl.w	r0, r0, r9
 801de50:	4302      	orrs	r2, r0
 801de52:	f84a 2b04 	str.w	r2, [sl], #4
 801de56:	f853 2b04 	ldr.w	r2, [r3], #4
 801de5a:	459c      	cmp	ip, r3
 801de5c:	fa22 f20e 	lsr.w	r2, r2, lr
 801de60:	d8f3      	bhi.n	801de4a <__lshift+0x6e>
 801de62:	ebac 0304 	sub.w	r3, ip, r4
 801de66:	3b15      	subs	r3, #21
 801de68:	f023 0303 	bic.w	r3, r3, #3
 801de6c:	3304      	adds	r3, #4
 801de6e:	f104 0015 	add.w	r0, r4, #21
 801de72:	4584      	cmp	ip, r0
 801de74:	bf38      	it	cc
 801de76:	2304      	movcc	r3, #4
 801de78:	50ca      	str	r2, [r1, r3]
 801de7a:	b10a      	cbz	r2, 801de80 <__lshift+0xa4>
 801de7c:	f108 0602 	add.w	r6, r8, #2
 801de80:	3e01      	subs	r6, #1
 801de82:	4638      	mov	r0, r7
 801de84:	612e      	str	r6, [r5, #16]
 801de86:	4621      	mov	r1, r4
 801de88:	f7ff fd8c 	bl	801d9a4 <_Bfree>
 801de8c:	4628      	mov	r0, r5
 801de8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801de92:	f842 0f04 	str.w	r0, [r2, #4]!
 801de96:	3301      	adds	r3, #1
 801de98:	e7c5      	b.n	801de26 <__lshift+0x4a>
 801de9a:	3904      	subs	r1, #4
 801de9c:	f853 2b04 	ldr.w	r2, [r3], #4
 801dea0:	f841 2f04 	str.w	r2, [r1, #4]!
 801dea4:	459c      	cmp	ip, r3
 801dea6:	d8f9      	bhi.n	801de9c <__lshift+0xc0>
 801dea8:	e7ea      	b.n	801de80 <__lshift+0xa4>
 801deaa:	bf00      	nop
 801deac:	08024200 	.word	0x08024200
 801deb0:	080242f4 	.word	0x080242f4

0801deb4 <__mcmp>:
 801deb4:	b530      	push	{r4, r5, lr}
 801deb6:	6902      	ldr	r2, [r0, #16]
 801deb8:	690c      	ldr	r4, [r1, #16]
 801deba:	1b12      	subs	r2, r2, r4
 801debc:	d10e      	bne.n	801dedc <__mcmp+0x28>
 801debe:	f100 0314 	add.w	r3, r0, #20
 801dec2:	3114      	adds	r1, #20
 801dec4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801dec8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801decc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801ded0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801ded4:	42a5      	cmp	r5, r4
 801ded6:	d003      	beq.n	801dee0 <__mcmp+0x2c>
 801ded8:	d305      	bcc.n	801dee6 <__mcmp+0x32>
 801deda:	2201      	movs	r2, #1
 801dedc:	4610      	mov	r0, r2
 801dede:	bd30      	pop	{r4, r5, pc}
 801dee0:	4283      	cmp	r3, r0
 801dee2:	d3f3      	bcc.n	801decc <__mcmp+0x18>
 801dee4:	e7fa      	b.n	801dedc <__mcmp+0x28>
 801dee6:	f04f 32ff 	mov.w	r2, #4294967295
 801deea:	e7f7      	b.n	801dedc <__mcmp+0x28>

0801deec <__mdiff>:
 801deec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801def0:	460c      	mov	r4, r1
 801def2:	4606      	mov	r6, r0
 801def4:	4611      	mov	r1, r2
 801def6:	4620      	mov	r0, r4
 801def8:	4617      	mov	r7, r2
 801defa:	f7ff ffdb 	bl	801deb4 <__mcmp>
 801defe:	1e05      	subs	r5, r0, #0
 801df00:	d110      	bne.n	801df24 <__mdiff+0x38>
 801df02:	4629      	mov	r1, r5
 801df04:	4630      	mov	r0, r6
 801df06:	f7ff fd0d 	bl	801d924 <_Balloc>
 801df0a:	b930      	cbnz	r0, 801df1a <__mdiff+0x2e>
 801df0c:	4b39      	ldr	r3, [pc, #228]	; (801dff4 <__mdiff+0x108>)
 801df0e:	4602      	mov	r2, r0
 801df10:	f240 2132 	movw	r1, #562	; 0x232
 801df14:	4838      	ldr	r0, [pc, #224]	; (801dff8 <__mdiff+0x10c>)
 801df16:	f7fe f9cb 	bl	801c2b0 <__assert_func>
 801df1a:	2301      	movs	r3, #1
 801df1c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801df20:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801df24:	bfa4      	itt	ge
 801df26:	463b      	movge	r3, r7
 801df28:	4627      	movge	r7, r4
 801df2a:	4630      	mov	r0, r6
 801df2c:	6879      	ldr	r1, [r7, #4]
 801df2e:	bfa6      	itte	ge
 801df30:	461c      	movge	r4, r3
 801df32:	2500      	movge	r5, #0
 801df34:	2501      	movlt	r5, #1
 801df36:	f7ff fcf5 	bl	801d924 <_Balloc>
 801df3a:	b920      	cbnz	r0, 801df46 <__mdiff+0x5a>
 801df3c:	4b2d      	ldr	r3, [pc, #180]	; (801dff4 <__mdiff+0x108>)
 801df3e:	4602      	mov	r2, r0
 801df40:	f44f 7110 	mov.w	r1, #576	; 0x240
 801df44:	e7e6      	b.n	801df14 <__mdiff+0x28>
 801df46:	693e      	ldr	r6, [r7, #16]
 801df48:	60c5      	str	r5, [r0, #12]
 801df4a:	6925      	ldr	r5, [r4, #16]
 801df4c:	f107 0114 	add.w	r1, r7, #20
 801df50:	f104 0914 	add.w	r9, r4, #20
 801df54:	f100 0e14 	add.w	lr, r0, #20
 801df58:	f107 0210 	add.w	r2, r7, #16
 801df5c:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 801df60:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 801df64:	46f2      	mov	sl, lr
 801df66:	2700      	movs	r7, #0
 801df68:	f859 3b04 	ldr.w	r3, [r9], #4
 801df6c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801df70:	fa1f f883 	uxth.w	r8, r3
 801df74:	fa17 f78b 	uxtah	r7, r7, fp
 801df78:	0c1b      	lsrs	r3, r3, #16
 801df7a:	eba7 0808 	sub.w	r8, r7, r8
 801df7e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801df82:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801df86:	fa1f f888 	uxth.w	r8, r8
 801df8a:	141f      	asrs	r7, r3, #16
 801df8c:	454d      	cmp	r5, r9
 801df8e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801df92:	f84a 3b04 	str.w	r3, [sl], #4
 801df96:	d8e7      	bhi.n	801df68 <__mdiff+0x7c>
 801df98:	1b2b      	subs	r3, r5, r4
 801df9a:	3b15      	subs	r3, #21
 801df9c:	f023 0303 	bic.w	r3, r3, #3
 801dfa0:	3304      	adds	r3, #4
 801dfa2:	3415      	adds	r4, #21
 801dfa4:	42a5      	cmp	r5, r4
 801dfa6:	bf38      	it	cc
 801dfa8:	2304      	movcc	r3, #4
 801dfaa:	4419      	add	r1, r3
 801dfac:	4473      	add	r3, lr
 801dfae:	469e      	mov	lr, r3
 801dfb0:	460d      	mov	r5, r1
 801dfb2:	4565      	cmp	r5, ip
 801dfb4:	d30e      	bcc.n	801dfd4 <__mdiff+0xe8>
 801dfb6:	f10c 0203 	add.w	r2, ip, #3
 801dfba:	1a52      	subs	r2, r2, r1
 801dfbc:	f022 0203 	bic.w	r2, r2, #3
 801dfc0:	3903      	subs	r1, #3
 801dfc2:	458c      	cmp	ip, r1
 801dfc4:	bf38      	it	cc
 801dfc6:	2200      	movcc	r2, #0
 801dfc8:	441a      	add	r2, r3
 801dfca:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801dfce:	b17b      	cbz	r3, 801dff0 <__mdiff+0x104>
 801dfd0:	6106      	str	r6, [r0, #16]
 801dfd2:	e7a5      	b.n	801df20 <__mdiff+0x34>
 801dfd4:	f855 8b04 	ldr.w	r8, [r5], #4
 801dfd8:	fa17 f488 	uxtah	r4, r7, r8
 801dfdc:	1422      	asrs	r2, r4, #16
 801dfde:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 801dfe2:	b2a4      	uxth	r4, r4
 801dfe4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 801dfe8:	f84e 4b04 	str.w	r4, [lr], #4
 801dfec:	1417      	asrs	r7, r2, #16
 801dfee:	e7e0      	b.n	801dfb2 <__mdiff+0xc6>
 801dff0:	3e01      	subs	r6, #1
 801dff2:	e7ea      	b.n	801dfca <__mdiff+0xde>
 801dff4:	08024200 	.word	0x08024200
 801dff8:	080242f4 	.word	0x080242f4

0801dffc <__ulp>:
 801dffc:	b082      	sub	sp, #8
 801dffe:	ed8d 0b00 	vstr	d0, [sp]
 801e002:	9b01      	ldr	r3, [sp, #4]
 801e004:	4912      	ldr	r1, [pc, #72]	; (801e050 <__ulp+0x54>)
 801e006:	4019      	ands	r1, r3
 801e008:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 801e00c:	2900      	cmp	r1, #0
 801e00e:	dd05      	ble.n	801e01c <__ulp+0x20>
 801e010:	2200      	movs	r2, #0
 801e012:	460b      	mov	r3, r1
 801e014:	ec43 2b10 	vmov	d0, r2, r3
 801e018:	b002      	add	sp, #8
 801e01a:	4770      	bx	lr
 801e01c:	4249      	negs	r1, r1
 801e01e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 801e022:	ea4f 5021 	mov.w	r0, r1, asr #20
 801e026:	f04f 0200 	mov.w	r2, #0
 801e02a:	f04f 0300 	mov.w	r3, #0
 801e02e:	da04      	bge.n	801e03a <__ulp+0x3e>
 801e030:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 801e034:	fa41 f300 	asr.w	r3, r1, r0
 801e038:	e7ec      	b.n	801e014 <__ulp+0x18>
 801e03a:	f1a0 0114 	sub.w	r1, r0, #20
 801e03e:	291e      	cmp	r1, #30
 801e040:	bfda      	itte	le
 801e042:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 801e046:	fa20 f101 	lsrle.w	r1, r0, r1
 801e04a:	2101      	movgt	r1, #1
 801e04c:	460a      	mov	r2, r1
 801e04e:	e7e1      	b.n	801e014 <__ulp+0x18>
 801e050:	7ff00000 	.word	0x7ff00000

0801e054 <__b2d>:
 801e054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e056:	6905      	ldr	r5, [r0, #16]
 801e058:	f100 0714 	add.w	r7, r0, #20
 801e05c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 801e060:	1f2e      	subs	r6, r5, #4
 801e062:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801e066:	4620      	mov	r0, r4
 801e068:	f7ff fd52 	bl	801db10 <__hi0bits>
 801e06c:	f1c0 0320 	rsb	r3, r0, #32
 801e070:	280a      	cmp	r0, #10
 801e072:	f8df c07c 	ldr.w	ip, [pc, #124]	; 801e0f0 <__b2d+0x9c>
 801e076:	600b      	str	r3, [r1, #0]
 801e078:	dc14      	bgt.n	801e0a4 <__b2d+0x50>
 801e07a:	f1c0 0e0b 	rsb	lr, r0, #11
 801e07e:	fa24 f10e 	lsr.w	r1, r4, lr
 801e082:	42b7      	cmp	r7, r6
 801e084:	ea41 030c 	orr.w	r3, r1, ip
 801e088:	bf34      	ite	cc
 801e08a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801e08e:	2100      	movcs	r1, #0
 801e090:	3015      	adds	r0, #21
 801e092:	fa04 f000 	lsl.w	r0, r4, r0
 801e096:	fa21 f10e 	lsr.w	r1, r1, lr
 801e09a:	ea40 0201 	orr.w	r2, r0, r1
 801e09e:	ec43 2b10 	vmov	d0, r2, r3
 801e0a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e0a4:	42b7      	cmp	r7, r6
 801e0a6:	bf3a      	itte	cc
 801e0a8:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801e0ac:	f1a5 0608 	subcc.w	r6, r5, #8
 801e0b0:	2100      	movcs	r1, #0
 801e0b2:	380b      	subs	r0, #11
 801e0b4:	d017      	beq.n	801e0e6 <__b2d+0x92>
 801e0b6:	f1c0 0c20 	rsb	ip, r0, #32
 801e0ba:	fa04 f500 	lsl.w	r5, r4, r0
 801e0be:	42be      	cmp	r6, r7
 801e0c0:	fa21 f40c 	lsr.w	r4, r1, ip
 801e0c4:	ea45 0504 	orr.w	r5, r5, r4
 801e0c8:	bf8c      	ite	hi
 801e0ca:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 801e0ce:	2400      	movls	r4, #0
 801e0d0:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 801e0d4:	fa01 f000 	lsl.w	r0, r1, r0
 801e0d8:	fa24 f40c 	lsr.w	r4, r4, ip
 801e0dc:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801e0e0:	ea40 0204 	orr.w	r2, r0, r4
 801e0e4:	e7db      	b.n	801e09e <__b2d+0x4a>
 801e0e6:	ea44 030c 	orr.w	r3, r4, ip
 801e0ea:	460a      	mov	r2, r1
 801e0ec:	e7d7      	b.n	801e09e <__b2d+0x4a>
 801e0ee:	bf00      	nop
 801e0f0:	3ff00000 	.word	0x3ff00000

0801e0f4 <__d2b>:
 801e0f4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801e0f8:	4689      	mov	r9, r1
 801e0fa:	2101      	movs	r1, #1
 801e0fc:	ec57 6b10 	vmov	r6, r7, d0
 801e100:	4690      	mov	r8, r2
 801e102:	f7ff fc0f 	bl	801d924 <_Balloc>
 801e106:	4604      	mov	r4, r0
 801e108:	b930      	cbnz	r0, 801e118 <__d2b+0x24>
 801e10a:	4602      	mov	r2, r0
 801e10c:	4b25      	ldr	r3, [pc, #148]	; (801e1a4 <__d2b+0xb0>)
 801e10e:	4826      	ldr	r0, [pc, #152]	; (801e1a8 <__d2b+0xb4>)
 801e110:	f240 310a 	movw	r1, #778	; 0x30a
 801e114:	f7fe f8cc 	bl	801c2b0 <__assert_func>
 801e118:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801e11c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801e120:	bb35      	cbnz	r5, 801e170 <__d2b+0x7c>
 801e122:	2e00      	cmp	r6, #0
 801e124:	9301      	str	r3, [sp, #4]
 801e126:	d028      	beq.n	801e17a <__d2b+0x86>
 801e128:	4668      	mov	r0, sp
 801e12a:	9600      	str	r6, [sp, #0]
 801e12c:	f7ff fd10 	bl	801db50 <__lo0bits>
 801e130:	9900      	ldr	r1, [sp, #0]
 801e132:	b300      	cbz	r0, 801e176 <__d2b+0x82>
 801e134:	9a01      	ldr	r2, [sp, #4]
 801e136:	f1c0 0320 	rsb	r3, r0, #32
 801e13a:	fa02 f303 	lsl.w	r3, r2, r3
 801e13e:	430b      	orrs	r3, r1
 801e140:	40c2      	lsrs	r2, r0
 801e142:	6163      	str	r3, [r4, #20]
 801e144:	9201      	str	r2, [sp, #4]
 801e146:	9b01      	ldr	r3, [sp, #4]
 801e148:	61a3      	str	r3, [r4, #24]
 801e14a:	2b00      	cmp	r3, #0
 801e14c:	bf14      	ite	ne
 801e14e:	2202      	movne	r2, #2
 801e150:	2201      	moveq	r2, #1
 801e152:	6122      	str	r2, [r4, #16]
 801e154:	b1d5      	cbz	r5, 801e18c <__d2b+0x98>
 801e156:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801e15a:	4405      	add	r5, r0
 801e15c:	f8c9 5000 	str.w	r5, [r9]
 801e160:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801e164:	f8c8 0000 	str.w	r0, [r8]
 801e168:	4620      	mov	r0, r4
 801e16a:	b003      	add	sp, #12
 801e16c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801e170:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801e174:	e7d5      	b.n	801e122 <__d2b+0x2e>
 801e176:	6161      	str	r1, [r4, #20]
 801e178:	e7e5      	b.n	801e146 <__d2b+0x52>
 801e17a:	a801      	add	r0, sp, #4
 801e17c:	f7ff fce8 	bl	801db50 <__lo0bits>
 801e180:	9b01      	ldr	r3, [sp, #4]
 801e182:	6163      	str	r3, [r4, #20]
 801e184:	2201      	movs	r2, #1
 801e186:	6122      	str	r2, [r4, #16]
 801e188:	3020      	adds	r0, #32
 801e18a:	e7e3      	b.n	801e154 <__d2b+0x60>
 801e18c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801e190:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801e194:	f8c9 0000 	str.w	r0, [r9]
 801e198:	6918      	ldr	r0, [r3, #16]
 801e19a:	f7ff fcb9 	bl	801db10 <__hi0bits>
 801e19e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801e1a2:	e7df      	b.n	801e164 <__d2b+0x70>
 801e1a4:	08024200 	.word	0x08024200
 801e1a8:	080242f4 	.word	0x080242f4

0801e1ac <__ratio>:
 801e1ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e1b0:	4688      	mov	r8, r1
 801e1b2:	4669      	mov	r1, sp
 801e1b4:	4681      	mov	r9, r0
 801e1b6:	f7ff ff4d 	bl	801e054 <__b2d>
 801e1ba:	a901      	add	r1, sp, #4
 801e1bc:	4640      	mov	r0, r8
 801e1be:	ec55 4b10 	vmov	r4, r5, d0
 801e1c2:	f7ff ff47 	bl	801e054 <__b2d>
 801e1c6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801e1ca:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801e1ce:	eba3 0c02 	sub.w	ip, r3, r2
 801e1d2:	e9dd 3200 	ldrd	r3, r2, [sp]
 801e1d6:	1a9b      	subs	r3, r3, r2
 801e1d8:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801e1dc:	ec51 0b10 	vmov	r0, r1, d0
 801e1e0:	2b00      	cmp	r3, #0
 801e1e2:	bfd6      	itet	le
 801e1e4:	460a      	movle	r2, r1
 801e1e6:	462a      	movgt	r2, r5
 801e1e8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801e1ec:	468b      	mov	fp, r1
 801e1ee:	462f      	mov	r7, r5
 801e1f0:	bfd4      	ite	le
 801e1f2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 801e1f6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801e1fa:	4620      	mov	r0, r4
 801e1fc:	ee10 2a10 	vmov	r2, s0
 801e200:	465b      	mov	r3, fp
 801e202:	4639      	mov	r1, r7
 801e204:	f7e2 fb32 	bl	800086c <__aeabi_ddiv>
 801e208:	ec41 0b10 	vmov	d0, r0, r1
 801e20c:	b003      	add	sp, #12
 801e20e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e212 <__copybits>:
 801e212:	3901      	subs	r1, #1
 801e214:	b570      	push	{r4, r5, r6, lr}
 801e216:	1149      	asrs	r1, r1, #5
 801e218:	6914      	ldr	r4, [r2, #16]
 801e21a:	3101      	adds	r1, #1
 801e21c:	f102 0314 	add.w	r3, r2, #20
 801e220:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801e224:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801e228:	1f05      	subs	r5, r0, #4
 801e22a:	42a3      	cmp	r3, r4
 801e22c:	d30c      	bcc.n	801e248 <__copybits+0x36>
 801e22e:	1aa3      	subs	r3, r4, r2
 801e230:	3b11      	subs	r3, #17
 801e232:	f023 0303 	bic.w	r3, r3, #3
 801e236:	3211      	adds	r2, #17
 801e238:	42a2      	cmp	r2, r4
 801e23a:	bf88      	it	hi
 801e23c:	2300      	movhi	r3, #0
 801e23e:	4418      	add	r0, r3
 801e240:	2300      	movs	r3, #0
 801e242:	4288      	cmp	r0, r1
 801e244:	d305      	bcc.n	801e252 <__copybits+0x40>
 801e246:	bd70      	pop	{r4, r5, r6, pc}
 801e248:	f853 6b04 	ldr.w	r6, [r3], #4
 801e24c:	f845 6f04 	str.w	r6, [r5, #4]!
 801e250:	e7eb      	b.n	801e22a <__copybits+0x18>
 801e252:	f840 3b04 	str.w	r3, [r0], #4
 801e256:	e7f4      	b.n	801e242 <__copybits+0x30>

0801e258 <__any_on>:
 801e258:	f100 0214 	add.w	r2, r0, #20
 801e25c:	6900      	ldr	r0, [r0, #16]
 801e25e:	114b      	asrs	r3, r1, #5
 801e260:	4298      	cmp	r0, r3
 801e262:	b510      	push	{r4, lr}
 801e264:	db11      	blt.n	801e28a <__any_on+0x32>
 801e266:	dd0a      	ble.n	801e27e <__any_on+0x26>
 801e268:	f011 011f 	ands.w	r1, r1, #31
 801e26c:	d007      	beq.n	801e27e <__any_on+0x26>
 801e26e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801e272:	fa24 f001 	lsr.w	r0, r4, r1
 801e276:	fa00 f101 	lsl.w	r1, r0, r1
 801e27a:	428c      	cmp	r4, r1
 801e27c:	d10b      	bne.n	801e296 <__any_on+0x3e>
 801e27e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801e282:	4293      	cmp	r3, r2
 801e284:	d803      	bhi.n	801e28e <__any_on+0x36>
 801e286:	2000      	movs	r0, #0
 801e288:	bd10      	pop	{r4, pc}
 801e28a:	4603      	mov	r3, r0
 801e28c:	e7f7      	b.n	801e27e <__any_on+0x26>
 801e28e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801e292:	2900      	cmp	r1, #0
 801e294:	d0f5      	beq.n	801e282 <__any_on+0x2a>
 801e296:	2001      	movs	r0, #1
 801e298:	e7f6      	b.n	801e288 <__any_on+0x30>

0801e29a <_calloc_r>:
 801e29a:	b513      	push	{r0, r1, r4, lr}
 801e29c:	434a      	muls	r2, r1
 801e29e:	4611      	mov	r1, r2
 801e2a0:	9201      	str	r2, [sp, #4]
 801e2a2:	f7fc fb99 	bl	801a9d8 <_malloc_r>
 801e2a6:	4604      	mov	r4, r0
 801e2a8:	b118      	cbz	r0, 801e2b2 <_calloc_r+0x18>
 801e2aa:	9a01      	ldr	r2, [sp, #4]
 801e2ac:	2100      	movs	r1, #0
 801e2ae:	f7fc fb3b 	bl	801a928 <memset>
 801e2b2:	4620      	mov	r0, r4
 801e2b4:	b002      	add	sp, #8
 801e2b6:	bd10      	pop	{r4, pc}

0801e2b8 <__ssputs_r>:
 801e2b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e2bc:	688e      	ldr	r6, [r1, #8]
 801e2be:	429e      	cmp	r6, r3
 801e2c0:	4682      	mov	sl, r0
 801e2c2:	460c      	mov	r4, r1
 801e2c4:	4690      	mov	r8, r2
 801e2c6:	461f      	mov	r7, r3
 801e2c8:	d838      	bhi.n	801e33c <__ssputs_r+0x84>
 801e2ca:	898a      	ldrh	r2, [r1, #12]
 801e2cc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801e2d0:	d032      	beq.n	801e338 <__ssputs_r+0x80>
 801e2d2:	6825      	ldr	r5, [r4, #0]
 801e2d4:	6909      	ldr	r1, [r1, #16]
 801e2d6:	eba5 0901 	sub.w	r9, r5, r1
 801e2da:	6965      	ldr	r5, [r4, #20]
 801e2dc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801e2e0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801e2e4:	3301      	adds	r3, #1
 801e2e6:	444b      	add	r3, r9
 801e2e8:	106d      	asrs	r5, r5, #1
 801e2ea:	429d      	cmp	r5, r3
 801e2ec:	bf38      	it	cc
 801e2ee:	461d      	movcc	r5, r3
 801e2f0:	0553      	lsls	r3, r2, #21
 801e2f2:	d531      	bpl.n	801e358 <__ssputs_r+0xa0>
 801e2f4:	4629      	mov	r1, r5
 801e2f6:	f7fc fb6f 	bl	801a9d8 <_malloc_r>
 801e2fa:	4606      	mov	r6, r0
 801e2fc:	b950      	cbnz	r0, 801e314 <__ssputs_r+0x5c>
 801e2fe:	230c      	movs	r3, #12
 801e300:	f8ca 3000 	str.w	r3, [sl]
 801e304:	89a3      	ldrh	r3, [r4, #12]
 801e306:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801e30a:	81a3      	strh	r3, [r4, #12]
 801e30c:	f04f 30ff 	mov.w	r0, #4294967295
 801e310:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e314:	6921      	ldr	r1, [r4, #16]
 801e316:	464a      	mov	r2, r9
 801e318:	f7fc fade 	bl	801a8d8 <memcpy>
 801e31c:	89a3      	ldrh	r3, [r4, #12]
 801e31e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801e322:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801e326:	81a3      	strh	r3, [r4, #12]
 801e328:	6126      	str	r6, [r4, #16]
 801e32a:	6165      	str	r5, [r4, #20]
 801e32c:	444e      	add	r6, r9
 801e32e:	eba5 0509 	sub.w	r5, r5, r9
 801e332:	6026      	str	r6, [r4, #0]
 801e334:	60a5      	str	r5, [r4, #8]
 801e336:	463e      	mov	r6, r7
 801e338:	42be      	cmp	r6, r7
 801e33a:	d900      	bls.n	801e33e <__ssputs_r+0x86>
 801e33c:	463e      	mov	r6, r7
 801e33e:	4632      	mov	r2, r6
 801e340:	6820      	ldr	r0, [r4, #0]
 801e342:	4641      	mov	r1, r8
 801e344:	f7fc fad6 	bl	801a8f4 <memmove>
 801e348:	68a3      	ldr	r3, [r4, #8]
 801e34a:	6822      	ldr	r2, [r4, #0]
 801e34c:	1b9b      	subs	r3, r3, r6
 801e34e:	4432      	add	r2, r6
 801e350:	60a3      	str	r3, [r4, #8]
 801e352:	6022      	str	r2, [r4, #0]
 801e354:	2000      	movs	r0, #0
 801e356:	e7db      	b.n	801e310 <__ssputs_r+0x58>
 801e358:	462a      	mov	r2, r5
 801e35a:	f000 fce1 	bl	801ed20 <_realloc_r>
 801e35e:	4606      	mov	r6, r0
 801e360:	2800      	cmp	r0, #0
 801e362:	d1e1      	bne.n	801e328 <__ssputs_r+0x70>
 801e364:	6921      	ldr	r1, [r4, #16]
 801e366:	4650      	mov	r0, sl
 801e368:	f7fc fae6 	bl	801a938 <_free_r>
 801e36c:	e7c7      	b.n	801e2fe <__ssputs_r+0x46>
	...

0801e370 <_svfiprintf_r>:
 801e370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e374:	4698      	mov	r8, r3
 801e376:	898b      	ldrh	r3, [r1, #12]
 801e378:	061b      	lsls	r3, r3, #24
 801e37a:	b09d      	sub	sp, #116	; 0x74
 801e37c:	4607      	mov	r7, r0
 801e37e:	460d      	mov	r5, r1
 801e380:	4614      	mov	r4, r2
 801e382:	d50e      	bpl.n	801e3a2 <_svfiprintf_r+0x32>
 801e384:	690b      	ldr	r3, [r1, #16]
 801e386:	b963      	cbnz	r3, 801e3a2 <_svfiprintf_r+0x32>
 801e388:	2140      	movs	r1, #64	; 0x40
 801e38a:	f7fc fb25 	bl	801a9d8 <_malloc_r>
 801e38e:	6028      	str	r0, [r5, #0]
 801e390:	6128      	str	r0, [r5, #16]
 801e392:	b920      	cbnz	r0, 801e39e <_svfiprintf_r+0x2e>
 801e394:	230c      	movs	r3, #12
 801e396:	603b      	str	r3, [r7, #0]
 801e398:	f04f 30ff 	mov.w	r0, #4294967295
 801e39c:	e0d1      	b.n	801e542 <_svfiprintf_r+0x1d2>
 801e39e:	2340      	movs	r3, #64	; 0x40
 801e3a0:	616b      	str	r3, [r5, #20]
 801e3a2:	2300      	movs	r3, #0
 801e3a4:	9309      	str	r3, [sp, #36]	; 0x24
 801e3a6:	2320      	movs	r3, #32
 801e3a8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801e3ac:	f8cd 800c 	str.w	r8, [sp, #12]
 801e3b0:	2330      	movs	r3, #48	; 0x30
 801e3b2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801e55c <_svfiprintf_r+0x1ec>
 801e3b6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801e3ba:	f04f 0901 	mov.w	r9, #1
 801e3be:	4623      	mov	r3, r4
 801e3c0:	469a      	mov	sl, r3
 801e3c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 801e3c6:	b10a      	cbz	r2, 801e3cc <_svfiprintf_r+0x5c>
 801e3c8:	2a25      	cmp	r2, #37	; 0x25
 801e3ca:	d1f9      	bne.n	801e3c0 <_svfiprintf_r+0x50>
 801e3cc:	ebba 0b04 	subs.w	fp, sl, r4
 801e3d0:	d00b      	beq.n	801e3ea <_svfiprintf_r+0x7a>
 801e3d2:	465b      	mov	r3, fp
 801e3d4:	4622      	mov	r2, r4
 801e3d6:	4629      	mov	r1, r5
 801e3d8:	4638      	mov	r0, r7
 801e3da:	f7ff ff6d 	bl	801e2b8 <__ssputs_r>
 801e3de:	3001      	adds	r0, #1
 801e3e0:	f000 80aa 	beq.w	801e538 <_svfiprintf_r+0x1c8>
 801e3e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801e3e6:	445a      	add	r2, fp
 801e3e8:	9209      	str	r2, [sp, #36]	; 0x24
 801e3ea:	f89a 3000 	ldrb.w	r3, [sl]
 801e3ee:	2b00      	cmp	r3, #0
 801e3f0:	f000 80a2 	beq.w	801e538 <_svfiprintf_r+0x1c8>
 801e3f4:	2300      	movs	r3, #0
 801e3f6:	f04f 32ff 	mov.w	r2, #4294967295
 801e3fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801e3fe:	f10a 0a01 	add.w	sl, sl, #1
 801e402:	9304      	str	r3, [sp, #16]
 801e404:	9307      	str	r3, [sp, #28]
 801e406:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801e40a:	931a      	str	r3, [sp, #104]	; 0x68
 801e40c:	4654      	mov	r4, sl
 801e40e:	2205      	movs	r2, #5
 801e410:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e414:	4851      	ldr	r0, [pc, #324]	; (801e55c <_svfiprintf_r+0x1ec>)
 801e416:	f7e1 fef3 	bl	8000200 <memchr>
 801e41a:	9a04      	ldr	r2, [sp, #16]
 801e41c:	b9d8      	cbnz	r0, 801e456 <_svfiprintf_r+0xe6>
 801e41e:	06d0      	lsls	r0, r2, #27
 801e420:	bf44      	itt	mi
 801e422:	2320      	movmi	r3, #32
 801e424:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801e428:	0711      	lsls	r1, r2, #28
 801e42a:	bf44      	itt	mi
 801e42c:	232b      	movmi	r3, #43	; 0x2b
 801e42e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801e432:	f89a 3000 	ldrb.w	r3, [sl]
 801e436:	2b2a      	cmp	r3, #42	; 0x2a
 801e438:	d015      	beq.n	801e466 <_svfiprintf_r+0xf6>
 801e43a:	9a07      	ldr	r2, [sp, #28]
 801e43c:	4654      	mov	r4, sl
 801e43e:	2000      	movs	r0, #0
 801e440:	f04f 0c0a 	mov.w	ip, #10
 801e444:	4621      	mov	r1, r4
 801e446:	f811 3b01 	ldrb.w	r3, [r1], #1
 801e44a:	3b30      	subs	r3, #48	; 0x30
 801e44c:	2b09      	cmp	r3, #9
 801e44e:	d94e      	bls.n	801e4ee <_svfiprintf_r+0x17e>
 801e450:	b1b0      	cbz	r0, 801e480 <_svfiprintf_r+0x110>
 801e452:	9207      	str	r2, [sp, #28]
 801e454:	e014      	b.n	801e480 <_svfiprintf_r+0x110>
 801e456:	eba0 0308 	sub.w	r3, r0, r8
 801e45a:	fa09 f303 	lsl.w	r3, r9, r3
 801e45e:	4313      	orrs	r3, r2
 801e460:	9304      	str	r3, [sp, #16]
 801e462:	46a2      	mov	sl, r4
 801e464:	e7d2      	b.n	801e40c <_svfiprintf_r+0x9c>
 801e466:	9b03      	ldr	r3, [sp, #12]
 801e468:	1d19      	adds	r1, r3, #4
 801e46a:	681b      	ldr	r3, [r3, #0]
 801e46c:	9103      	str	r1, [sp, #12]
 801e46e:	2b00      	cmp	r3, #0
 801e470:	bfbb      	ittet	lt
 801e472:	425b      	neglt	r3, r3
 801e474:	f042 0202 	orrlt.w	r2, r2, #2
 801e478:	9307      	strge	r3, [sp, #28]
 801e47a:	9307      	strlt	r3, [sp, #28]
 801e47c:	bfb8      	it	lt
 801e47e:	9204      	strlt	r2, [sp, #16]
 801e480:	7823      	ldrb	r3, [r4, #0]
 801e482:	2b2e      	cmp	r3, #46	; 0x2e
 801e484:	d10c      	bne.n	801e4a0 <_svfiprintf_r+0x130>
 801e486:	7863      	ldrb	r3, [r4, #1]
 801e488:	2b2a      	cmp	r3, #42	; 0x2a
 801e48a:	d135      	bne.n	801e4f8 <_svfiprintf_r+0x188>
 801e48c:	9b03      	ldr	r3, [sp, #12]
 801e48e:	1d1a      	adds	r2, r3, #4
 801e490:	681b      	ldr	r3, [r3, #0]
 801e492:	9203      	str	r2, [sp, #12]
 801e494:	2b00      	cmp	r3, #0
 801e496:	bfb8      	it	lt
 801e498:	f04f 33ff 	movlt.w	r3, #4294967295
 801e49c:	3402      	adds	r4, #2
 801e49e:	9305      	str	r3, [sp, #20]
 801e4a0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801e56c <_svfiprintf_r+0x1fc>
 801e4a4:	7821      	ldrb	r1, [r4, #0]
 801e4a6:	2203      	movs	r2, #3
 801e4a8:	4650      	mov	r0, sl
 801e4aa:	f7e1 fea9 	bl	8000200 <memchr>
 801e4ae:	b140      	cbz	r0, 801e4c2 <_svfiprintf_r+0x152>
 801e4b0:	2340      	movs	r3, #64	; 0x40
 801e4b2:	eba0 000a 	sub.w	r0, r0, sl
 801e4b6:	fa03 f000 	lsl.w	r0, r3, r0
 801e4ba:	9b04      	ldr	r3, [sp, #16]
 801e4bc:	4303      	orrs	r3, r0
 801e4be:	3401      	adds	r4, #1
 801e4c0:	9304      	str	r3, [sp, #16]
 801e4c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e4c6:	4826      	ldr	r0, [pc, #152]	; (801e560 <_svfiprintf_r+0x1f0>)
 801e4c8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801e4cc:	2206      	movs	r2, #6
 801e4ce:	f7e1 fe97 	bl	8000200 <memchr>
 801e4d2:	2800      	cmp	r0, #0
 801e4d4:	d038      	beq.n	801e548 <_svfiprintf_r+0x1d8>
 801e4d6:	4b23      	ldr	r3, [pc, #140]	; (801e564 <_svfiprintf_r+0x1f4>)
 801e4d8:	bb1b      	cbnz	r3, 801e522 <_svfiprintf_r+0x1b2>
 801e4da:	9b03      	ldr	r3, [sp, #12]
 801e4dc:	3307      	adds	r3, #7
 801e4de:	f023 0307 	bic.w	r3, r3, #7
 801e4e2:	3308      	adds	r3, #8
 801e4e4:	9303      	str	r3, [sp, #12]
 801e4e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e4e8:	4433      	add	r3, r6
 801e4ea:	9309      	str	r3, [sp, #36]	; 0x24
 801e4ec:	e767      	b.n	801e3be <_svfiprintf_r+0x4e>
 801e4ee:	fb0c 3202 	mla	r2, ip, r2, r3
 801e4f2:	460c      	mov	r4, r1
 801e4f4:	2001      	movs	r0, #1
 801e4f6:	e7a5      	b.n	801e444 <_svfiprintf_r+0xd4>
 801e4f8:	2300      	movs	r3, #0
 801e4fa:	3401      	adds	r4, #1
 801e4fc:	9305      	str	r3, [sp, #20]
 801e4fe:	4619      	mov	r1, r3
 801e500:	f04f 0c0a 	mov.w	ip, #10
 801e504:	4620      	mov	r0, r4
 801e506:	f810 2b01 	ldrb.w	r2, [r0], #1
 801e50a:	3a30      	subs	r2, #48	; 0x30
 801e50c:	2a09      	cmp	r2, #9
 801e50e:	d903      	bls.n	801e518 <_svfiprintf_r+0x1a8>
 801e510:	2b00      	cmp	r3, #0
 801e512:	d0c5      	beq.n	801e4a0 <_svfiprintf_r+0x130>
 801e514:	9105      	str	r1, [sp, #20]
 801e516:	e7c3      	b.n	801e4a0 <_svfiprintf_r+0x130>
 801e518:	fb0c 2101 	mla	r1, ip, r1, r2
 801e51c:	4604      	mov	r4, r0
 801e51e:	2301      	movs	r3, #1
 801e520:	e7f0      	b.n	801e504 <_svfiprintf_r+0x194>
 801e522:	ab03      	add	r3, sp, #12
 801e524:	9300      	str	r3, [sp, #0]
 801e526:	462a      	mov	r2, r5
 801e528:	4b0f      	ldr	r3, [pc, #60]	; (801e568 <_svfiprintf_r+0x1f8>)
 801e52a:	a904      	add	r1, sp, #16
 801e52c:	4638      	mov	r0, r7
 801e52e:	f7fc fb4d 	bl	801abcc <_printf_float>
 801e532:	1c42      	adds	r2, r0, #1
 801e534:	4606      	mov	r6, r0
 801e536:	d1d6      	bne.n	801e4e6 <_svfiprintf_r+0x176>
 801e538:	89ab      	ldrh	r3, [r5, #12]
 801e53a:	065b      	lsls	r3, r3, #25
 801e53c:	f53f af2c 	bmi.w	801e398 <_svfiprintf_r+0x28>
 801e540:	9809      	ldr	r0, [sp, #36]	; 0x24
 801e542:	b01d      	add	sp, #116	; 0x74
 801e544:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e548:	ab03      	add	r3, sp, #12
 801e54a:	9300      	str	r3, [sp, #0]
 801e54c:	462a      	mov	r2, r5
 801e54e:	4b06      	ldr	r3, [pc, #24]	; (801e568 <_svfiprintf_r+0x1f8>)
 801e550:	a904      	add	r1, sp, #16
 801e552:	4638      	mov	r0, r7
 801e554:	f7fc fdde 	bl	801b114 <_printf_i>
 801e558:	e7eb      	b.n	801e532 <_svfiprintf_r+0x1c2>
 801e55a:	bf00      	nop
 801e55c:	08024454 	.word	0x08024454
 801e560:	0802445e 	.word	0x0802445e
 801e564:	0801abcd 	.word	0x0801abcd
 801e568:	0801e2b9 	.word	0x0801e2b9
 801e56c:	0802445a 	.word	0x0802445a

0801e570 <__sfputc_r>:
 801e570:	6893      	ldr	r3, [r2, #8]
 801e572:	3b01      	subs	r3, #1
 801e574:	2b00      	cmp	r3, #0
 801e576:	b410      	push	{r4}
 801e578:	6093      	str	r3, [r2, #8]
 801e57a:	da08      	bge.n	801e58e <__sfputc_r+0x1e>
 801e57c:	6994      	ldr	r4, [r2, #24]
 801e57e:	42a3      	cmp	r3, r4
 801e580:	db01      	blt.n	801e586 <__sfputc_r+0x16>
 801e582:	290a      	cmp	r1, #10
 801e584:	d103      	bne.n	801e58e <__sfputc_r+0x1e>
 801e586:	f85d 4b04 	ldr.w	r4, [sp], #4
 801e58a:	f000 b999 	b.w	801e8c0 <__swbuf_r>
 801e58e:	6813      	ldr	r3, [r2, #0]
 801e590:	1c58      	adds	r0, r3, #1
 801e592:	6010      	str	r0, [r2, #0]
 801e594:	7019      	strb	r1, [r3, #0]
 801e596:	4608      	mov	r0, r1
 801e598:	f85d 4b04 	ldr.w	r4, [sp], #4
 801e59c:	4770      	bx	lr

0801e59e <__sfputs_r>:
 801e59e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e5a0:	4606      	mov	r6, r0
 801e5a2:	460f      	mov	r7, r1
 801e5a4:	4614      	mov	r4, r2
 801e5a6:	18d5      	adds	r5, r2, r3
 801e5a8:	42ac      	cmp	r4, r5
 801e5aa:	d101      	bne.n	801e5b0 <__sfputs_r+0x12>
 801e5ac:	2000      	movs	r0, #0
 801e5ae:	e007      	b.n	801e5c0 <__sfputs_r+0x22>
 801e5b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e5b4:	463a      	mov	r2, r7
 801e5b6:	4630      	mov	r0, r6
 801e5b8:	f7ff ffda 	bl	801e570 <__sfputc_r>
 801e5bc:	1c43      	adds	r3, r0, #1
 801e5be:	d1f3      	bne.n	801e5a8 <__sfputs_r+0xa>
 801e5c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801e5c4 <_vfiprintf_r>:
 801e5c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e5c8:	460d      	mov	r5, r1
 801e5ca:	b09d      	sub	sp, #116	; 0x74
 801e5cc:	4614      	mov	r4, r2
 801e5ce:	4698      	mov	r8, r3
 801e5d0:	4606      	mov	r6, r0
 801e5d2:	b118      	cbz	r0, 801e5dc <_vfiprintf_r+0x18>
 801e5d4:	6983      	ldr	r3, [r0, #24]
 801e5d6:	b90b      	cbnz	r3, 801e5dc <_vfiprintf_r+0x18>
 801e5d8:	f7fe fd60 	bl	801d09c <__sinit>
 801e5dc:	4b89      	ldr	r3, [pc, #548]	; (801e804 <_vfiprintf_r+0x240>)
 801e5de:	429d      	cmp	r5, r3
 801e5e0:	d11b      	bne.n	801e61a <_vfiprintf_r+0x56>
 801e5e2:	6875      	ldr	r5, [r6, #4]
 801e5e4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801e5e6:	07d9      	lsls	r1, r3, #31
 801e5e8:	d405      	bmi.n	801e5f6 <_vfiprintf_r+0x32>
 801e5ea:	89ab      	ldrh	r3, [r5, #12]
 801e5ec:	059a      	lsls	r2, r3, #22
 801e5ee:	d402      	bmi.n	801e5f6 <_vfiprintf_r+0x32>
 801e5f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801e5f2:	f7ff f976 	bl	801d8e2 <__retarget_lock_acquire_recursive>
 801e5f6:	89ab      	ldrh	r3, [r5, #12]
 801e5f8:	071b      	lsls	r3, r3, #28
 801e5fa:	d501      	bpl.n	801e600 <_vfiprintf_r+0x3c>
 801e5fc:	692b      	ldr	r3, [r5, #16]
 801e5fe:	b9eb      	cbnz	r3, 801e63c <_vfiprintf_r+0x78>
 801e600:	4629      	mov	r1, r5
 801e602:	4630      	mov	r0, r6
 801e604:	f000 f9ce 	bl	801e9a4 <__swsetup_r>
 801e608:	b1c0      	cbz	r0, 801e63c <_vfiprintf_r+0x78>
 801e60a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801e60c:	07dc      	lsls	r4, r3, #31
 801e60e:	d50e      	bpl.n	801e62e <_vfiprintf_r+0x6a>
 801e610:	f04f 30ff 	mov.w	r0, #4294967295
 801e614:	b01d      	add	sp, #116	; 0x74
 801e616:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e61a:	4b7b      	ldr	r3, [pc, #492]	; (801e808 <_vfiprintf_r+0x244>)
 801e61c:	429d      	cmp	r5, r3
 801e61e:	d101      	bne.n	801e624 <_vfiprintf_r+0x60>
 801e620:	68b5      	ldr	r5, [r6, #8]
 801e622:	e7df      	b.n	801e5e4 <_vfiprintf_r+0x20>
 801e624:	4b79      	ldr	r3, [pc, #484]	; (801e80c <_vfiprintf_r+0x248>)
 801e626:	429d      	cmp	r5, r3
 801e628:	bf08      	it	eq
 801e62a:	68f5      	ldreq	r5, [r6, #12]
 801e62c:	e7da      	b.n	801e5e4 <_vfiprintf_r+0x20>
 801e62e:	89ab      	ldrh	r3, [r5, #12]
 801e630:	0598      	lsls	r0, r3, #22
 801e632:	d4ed      	bmi.n	801e610 <_vfiprintf_r+0x4c>
 801e634:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801e636:	f7ff f955 	bl	801d8e4 <__retarget_lock_release_recursive>
 801e63a:	e7e9      	b.n	801e610 <_vfiprintf_r+0x4c>
 801e63c:	2300      	movs	r3, #0
 801e63e:	9309      	str	r3, [sp, #36]	; 0x24
 801e640:	2320      	movs	r3, #32
 801e642:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801e646:	f8cd 800c 	str.w	r8, [sp, #12]
 801e64a:	2330      	movs	r3, #48	; 0x30
 801e64c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801e810 <_vfiprintf_r+0x24c>
 801e650:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801e654:	f04f 0901 	mov.w	r9, #1
 801e658:	4623      	mov	r3, r4
 801e65a:	469a      	mov	sl, r3
 801e65c:	f813 2b01 	ldrb.w	r2, [r3], #1
 801e660:	b10a      	cbz	r2, 801e666 <_vfiprintf_r+0xa2>
 801e662:	2a25      	cmp	r2, #37	; 0x25
 801e664:	d1f9      	bne.n	801e65a <_vfiprintf_r+0x96>
 801e666:	ebba 0b04 	subs.w	fp, sl, r4
 801e66a:	d00b      	beq.n	801e684 <_vfiprintf_r+0xc0>
 801e66c:	465b      	mov	r3, fp
 801e66e:	4622      	mov	r2, r4
 801e670:	4629      	mov	r1, r5
 801e672:	4630      	mov	r0, r6
 801e674:	f7ff ff93 	bl	801e59e <__sfputs_r>
 801e678:	3001      	adds	r0, #1
 801e67a:	f000 80aa 	beq.w	801e7d2 <_vfiprintf_r+0x20e>
 801e67e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801e680:	445a      	add	r2, fp
 801e682:	9209      	str	r2, [sp, #36]	; 0x24
 801e684:	f89a 3000 	ldrb.w	r3, [sl]
 801e688:	2b00      	cmp	r3, #0
 801e68a:	f000 80a2 	beq.w	801e7d2 <_vfiprintf_r+0x20e>
 801e68e:	2300      	movs	r3, #0
 801e690:	f04f 32ff 	mov.w	r2, #4294967295
 801e694:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801e698:	f10a 0a01 	add.w	sl, sl, #1
 801e69c:	9304      	str	r3, [sp, #16]
 801e69e:	9307      	str	r3, [sp, #28]
 801e6a0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801e6a4:	931a      	str	r3, [sp, #104]	; 0x68
 801e6a6:	4654      	mov	r4, sl
 801e6a8:	2205      	movs	r2, #5
 801e6aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e6ae:	4858      	ldr	r0, [pc, #352]	; (801e810 <_vfiprintf_r+0x24c>)
 801e6b0:	f7e1 fda6 	bl	8000200 <memchr>
 801e6b4:	9a04      	ldr	r2, [sp, #16]
 801e6b6:	b9d8      	cbnz	r0, 801e6f0 <_vfiprintf_r+0x12c>
 801e6b8:	06d1      	lsls	r1, r2, #27
 801e6ba:	bf44      	itt	mi
 801e6bc:	2320      	movmi	r3, #32
 801e6be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801e6c2:	0713      	lsls	r3, r2, #28
 801e6c4:	bf44      	itt	mi
 801e6c6:	232b      	movmi	r3, #43	; 0x2b
 801e6c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801e6cc:	f89a 3000 	ldrb.w	r3, [sl]
 801e6d0:	2b2a      	cmp	r3, #42	; 0x2a
 801e6d2:	d015      	beq.n	801e700 <_vfiprintf_r+0x13c>
 801e6d4:	9a07      	ldr	r2, [sp, #28]
 801e6d6:	4654      	mov	r4, sl
 801e6d8:	2000      	movs	r0, #0
 801e6da:	f04f 0c0a 	mov.w	ip, #10
 801e6de:	4621      	mov	r1, r4
 801e6e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 801e6e4:	3b30      	subs	r3, #48	; 0x30
 801e6e6:	2b09      	cmp	r3, #9
 801e6e8:	d94e      	bls.n	801e788 <_vfiprintf_r+0x1c4>
 801e6ea:	b1b0      	cbz	r0, 801e71a <_vfiprintf_r+0x156>
 801e6ec:	9207      	str	r2, [sp, #28]
 801e6ee:	e014      	b.n	801e71a <_vfiprintf_r+0x156>
 801e6f0:	eba0 0308 	sub.w	r3, r0, r8
 801e6f4:	fa09 f303 	lsl.w	r3, r9, r3
 801e6f8:	4313      	orrs	r3, r2
 801e6fa:	9304      	str	r3, [sp, #16]
 801e6fc:	46a2      	mov	sl, r4
 801e6fe:	e7d2      	b.n	801e6a6 <_vfiprintf_r+0xe2>
 801e700:	9b03      	ldr	r3, [sp, #12]
 801e702:	1d19      	adds	r1, r3, #4
 801e704:	681b      	ldr	r3, [r3, #0]
 801e706:	9103      	str	r1, [sp, #12]
 801e708:	2b00      	cmp	r3, #0
 801e70a:	bfbb      	ittet	lt
 801e70c:	425b      	neglt	r3, r3
 801e70e:	f042 0202 	orrlt.w	r2, r2, #2
 801e712:	9307      	strge	r3, [sp, #28]
 801e714:	9307      	strlt	r3, [sp, #28]
 801e716:	bfb8      	it	lt
 801e718:	9204      	strlt	r2, [sp, #16]
 801e71a:	7823      	ldrb	r3, [r4, #0]
 801e71c:	2b2e      	cmp	r3, #46	; 0x2e
 801e71e:	d10c      	bne.n	801e73a <_vfiprintf_r+0x176>
 801e720:	7863      	ldrb	r3, [r4, #1]
 801e722:	2b2a      	cmp	r3, #42	; 0x2a
 801e724:	d135      	bne.n	801e792 <_vfiprintf_r+0x1ce>
 801e726:	9b03      	ldr	r3, [sp, #12]
 801e728:	1d1a      	adds	r2, r3, #4
 801e72a:	681b      	ldr	r3, [r3, #0]
 801e72c:	9203      	str	r2, [sp, #12]
 801e72e:	2b00      	cmp	r3, #0
 801e730:	bfb8      	it	lt
 801e732:	f04f 33ff 	movlt.w	r3, #4294967295
 801e736:	3402      	adds	r4, #2
 801e738:	9305      	str	r3, [sp, #20]
 801e73a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801e820 <_vfiprintf_r+0x25c>
 801e73e:	7821      	ldrb	r1, [r4, #0]
 801e740:	2203      	movs	r2, #3
 801e742:	4650      	mov	r0, sl
 801e744:	f7e1 fd5c 	bl	8000200 <memchr>
 801e748:	b140      	cbz	r0, 801e75c <_vfiprintf_r+0x198>
 801e74a:	2340      	movs	r3, #64	; 0x40
 801e74c:	eba0 000a 	sub.w	r0, r0, sl
 801e750:	fa03 f000 	lsl.w	r0, r3, r0
 801e754:	9b04      	ldr	r3, [sp, #16]
 801e756:	4303      	orrs	r3, r0
 801e758:	3401      	adds	r4, #1
 801e75a:	9304      	str	r3, [sp, #16]
 801e75c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e760:	482c      	ldr	r0, [pc, #176]	; (801e814 <_vfiprintf_r+0x250>)
 801e762:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801e766:	2206      	movs	r2, #6
 801e768:	f7e1 fd4a 	bl	8000200 <memchr>
 801e76c:	2800      	cmp	r0, #0
 801e76e:	d03f      	beq.n	801e7f0 <_vfiprintf_r+0x22c>
 801e770:	4b29      	ldr	r3, [pc, #164]	; (801e818 <_vfiprintf_r+0x254>)
 801e772:	bb1b      	cbnz	r3, 801e7bc <_vfiprintf_r+0x1f8>
 801e774:	9b03      	ldr	r3, [sp, #12]
 801e776:	3307      	adds	r3, #7
 801e778:	f023 0307 	bic.w	r3, r3, #7
 801e77c:	3308      	adds	r3, #8
 801e77e:	9303      	str	r3, [sp, #12]
 801e780:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e782:	443b      	add	r3, r7
 801e784:	9309      	str	r3, [sp, #36]	; 0x24
 801e786:	e767      	b.n	801e658 <_vfiprintf_r+0x94>
 801e788:	fb0c 3202 	mla	r2, ip, r2, r3
 801e78c:	460c      	mov	r4, r1
 801e78e:	2001      	movs	r0, #1
 801e790:	e7a5      	b.n	801e6de <_vfiprintf_r+0x11a>
 801e792:	2300      	movs	r3, #0
 801e794:	3401      	adds	r4, #1
 801e796:	9305      	str	r3, [sp, #20]
 801e798:	4619      	mov	r1, r3
 801e79a:	f04f 0c0a 	mov.w	ip, #10
 801e79e:	4620      	mov	r0, r4
 801e7a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 801e7a4:	3a30      	subs	r2, #48	; 0x30
 801e7a6:	2a09      	cmp	r2, #9
 801e7a8:	d903      	bls.n	801e7b2 <_vfiprintf_r+0x1ee>
 801e7aa:	2b00      	cmp	r3, #0
 801e7ac:	d0c5      	beq.n	801e73a <_vfiprintf_r+0x176>
 801e7ae:	9105      	str	r1, [sp, #20]
 801e7b0:	e7c3      	b.n	801e73a <_vfiprintf_r+0x176>
 801e7b2:	fb0c 2101 	mla	r1, ip, r1, r2
 801e7b6:	4604      	mov	r4, r0
 801e7b8:	2301      	movs	r3, #1
 801e7ba:	e7f0      	b.n	801e79e <_vfiprintf_r+0x1da>
 801e7bc:	ab03      	add	r3, sp, #12
 801e7be:	9300      	str	r3, [sp, #0]
 801e7c0:	462a      	mov	r2, r5
 801e7c2:	4b16      	ldr	r3, [pc, #88]	; (801e81c <_vfiprintf_r+0x258>)
 801e7c4:	a904      	add	r1, sp, #16
 801e7c6:	4630      	mov	r0, r6
 801e7c8:	f7fc fa00 	bl	801abcc <_printf_float>
 801e7cc:	4607      	mov	r7, r0
 801e7ce:	1c78      	adds	r0, r7, #1
 801e7d0:	d1d6      	bne.n	801e780 <_vfiprintf_r+0x1bc>
 801e7d2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801e7d4:	07d9      	lsls	r1, r3, #31
 801e7d6:	d405      	bmi.n	801e7e4 <_vfiprintf_r+0x220>
 801e7d8:	89ab      	ldrh	r3, [r5, #12]
 801e7da:	059a      	lsls	r2, r3, #22
 801e7dc:	d402      	bmi.n	801e7e4 <_vfiprintf_r+0x220>
 801e7de:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801e7e0:	f7ff f880 	bl	801d8e4 <__retarget_lock_release_recursive>
 801e7e4:	89ab      	ldrh	r3, [r5, #12]
 801e7e6:	065b      	lsls	r3, r3, #25
 801e7e8:	f53f af12 	bmi.w	801e610 <_vfiprintf_r+0x4c>
 801e7ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 801e7ee:	e711      	b.n	801e614 <_vfiprintf_r+0x50>
 801e7f0:	ab03      	add	r3, sp, #12
 801e7f2:	9300      	str	r3, [sp, #0]
 801e7f4:	462a      	mov	r2, r5
 801e7f6:	4b09      	ldr	r3, [pc, #36]	; (801e81c <_vfiprintf_r+0x258>)
 801e7f8:	a904      	add	r1, sp, #16
 801e7fa:	4630      	mov	r0, r6
 801e7fc:	f7fc fc8a 	bl	801b114 <_printf_i>
 801e800:	e7e4      	b.n	801e7cc <_vfiprintf_r+0x208>
 801e802:	bf00      	nop
 801e804:	08024234 	.word	0x08024234
 801e808:	08024254 	.word	0x08024254
 801e80c:	08024214 	.word	0x08024214
 801e810:	08024454 	.word	0x08024454
 801e814:	0802445e 	.word	0x0802445e
 801e818:	0801abcd 	.word	0x0801abcd
 801e81c:	0801e59f 	.word	0x0801e59f
 801e820:	0802445a 	.word	0x0802445a
 801e824:	00000000 	.word	0x00000000

0801e828 <nan>:
 801e828:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801e830 <nan+0x8>
 801e82c:	4770      	bx	lr
 801e82e:	bf00      	nop
 801e830:	00000000 	.word	0x00000000
 801e834:	7ff80000 	.word	0x7ff80000

0801e838 <__sread>:
 801e838:	b510      	push	{r4, lr}
 801e83a:	460c      	mov	r4, r1
 801e83c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e840:	f000 fa94 	bl	801ed6c <_read_r>
 801e844:	2800      	cmp	r0, #0
 801e846:	bfab      	itete	ge
 801e848:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801e84a:	89a3      	ldrhlt	r3, [r4, #12]
 801e84c:	181b      	addge	r3, r3, r0
 801e84e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801e852:	bfac      	ite	ge
 801e854:	6563      	strge	r3, [r4, #84]	; 0x54
 801e856:	81a3      	strhlt	r3, [r4, #12]
 801e858:	bd10      	pop	{r4, pc}

0801e85a <__swrite>:
 801e85a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e85e:	461f      	mov	r7, r3
 801e860:	898b      	ldrh	r3, [r1, #12]
 801e862:	05db      	lsls	r3, r3, #23
 801e864:	4605      	mov	r5, r0
 801e866:	460c      	mov	r4, r1
 801e868:	4616      	mov	r6, r2
 801e86a:	d505      	bpl.n	801e878 <__swrite+0x1e>
 801e86c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e870:	2302      	movs	r3, #2
 801e872:	2200      	movs	r2, #0
 801e874:	f000 f9de 	bl	801ec34 <_lseek_r>
 801e878:	89a3      	ldrh	r3, [r4, #12]
 801e87a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801e87e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801e882:	81a3      	strh	r3, [r4, #12]
 801e884:	4632      	mov	r2, r6
 801e886:	463b      	mov	r3, r7
 801e888:	4628      	mov	r0, r5
 801e88a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801e88e:	f000 b877 	b.w	801e980 <_write_r>

0801e892 <__sseek>:
 801e892:	b510      	push	{r4, lr}
 801e894:	460c      	mov	r4, r1
 801e896:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e89a:	f000 f9cb 	bl	801ec34 <_lseek_r>
 801e89e:	1c43      	adds	r3, r0, #1
 801e8a0:	89a3      	ldrh	r3, [r4, #12]
 801e8a2:	bf15      	itete	ne
 801e8a4:	6560      	strne	r0, [r4, #84]	; 0x54
 801e8a6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801e8aa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801e8ae:	81a3      	strheq	r3, [r4, #12]
 801e8b0:	bf18      	it	ne
 801e8b2:	81a3      	strhne	r3, [r4, #12]
 801e8b4:	bd10      	pop	{r4, pc}

0801e8b6 <__sclose>:
 801e8b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e8ba:	f000 b8e9 	b.w	801ea90 <_close_r>
	...

0801e8c0 <__swbuf_r>:
 801e8c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e8c2:	460e      	mov	r6, r1
 801e8c4:	4614      	mov	r4, r2
 801e8c6:	4605      	mov	r5, r0
 801e8c8:	b118      	cbz	r0, 801e8d2 <__swbuf_r+0x12>
 801e8ca:	6983      	ldr	r3, [r0, #24]
 801e8cc:	b90b      	cbnz	r3, 801e8d2 <__swbuf_r+0x12>
 801e8ce:	f7fe fbe5 	bl	801d09c <__sinit>
 801e8d2:	4b21      	ldr	r3, [pc, #132]	; (801e958 <__swbuf_r+0x98>)
 801e8d4:	429c      	cmp	r4, r3
 801e8d6:	d12b      	bne.n	801e930 <__swbuf_r+0x70>
 801e8d8:	686c      	ldr	r4, [r5, #4]
 801e8da:	69a3      	ldr	r3, [r4, #24]
 801e8dc:	60a3      	str	r3, [r4, #8]
 801e8de:	89a3      	ldrh	r3, [r4, #12]
 801e8e0:	071a      	lsls	r2, r3, #28
 801e8e2:	d52f      	bpl.n	801e944 <__swbuf_r+0x84>
 801e8e4:	6923      	ldr	r3, [r4, #16]
 801e8e6:	b36b      	cbz	r3, 801e944 <__swbuf_r+0x84>
 801e8e8:	6923      	ldr	r3, [r4, #16]
 801e8ea:	6820      	ldr	r0, [r4, #0]
 801e8ec:	1ac0      	subs	r0, r0, r3
 801e8ee:	6963      	ldr	r3, [r4, #20]
 801e8f0:	b2f6      	uxtb	r6, r6
 801e8f2:	4283      	cmp	r3, r0
 801e8f4:	4637      	mov	r7, r6
 801e8f6:	dc04      	bgt.n	801e902 <__swbuf_r+0x42>
 801e8f8:	4621      	mov	r1, r4
 801e8fa:	4628      	mov	r0, r5
 801e8fc:	f000 f95e 	bl	801ebbc <_fflush_r>
 801e900:	bb30      	cbnz	r0, 801e950 <__swbuf_r+0x90>
 801e902:	68a3      	ldr	r3, [r4, #8]
 801e904:	3b01      	subs	r3, #1
 801e906:	60a3      	str	r3, [r4, #8]
 801e908:	6823      	ldr	r3, [r4, #0]
 801e90a:	1c5a      	adds	r2, r3, #1
 801e90c:	6022      	str	r2, [r4, #0]
 801e90e:	701e      	strb	r6, [r3, #0]
 801e910:	6963      	ldr	r3, [r4, #20]
 801e912:	3001      	adds	r0, #1
 801e914:	4283      	cmp	r3, r0
 801e916:	d004      	beq.n	801e922 <__swbuf_r+0x62>
 801e918:	89a3      	ldrh	r3, [r4, #12]
 801e91a:	07db      	lsls	r3, r3, #31
 801e91c:	d506      	bpl.n	801e92c <__swbuf_r+0x6c>
 801e91e:	2e0a      	cmp	r6, #10
 801e920:	d104      	bne.n	801e92c <__swbuf_r+0x6c>
 801e922:	4621      	mov	r1, r4
 801e924:	4628      	mov	r0, r5
 801e926:	f000 f949 	bl	801ebbc <_fflush_r>
 801e92a:	b988      	cbnz	r0, 801e950 <__swbuf_r+0x90>
 801e92c:	4638      	mov	r0, r7
 801e92e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e930:	4b0a      	ldr	r3, [pc, #40]	; (801e95c <__swbuf_r+0x9c>)
 801e932:	429c      	cmp	r4, r3
 801e934:	d101      	bne.n	801e93a <__swbuf_r+0x7a>
 801e936:	68ac      	ldr	r4, [r5, #8]
 801e938:	e7cf      	b.n	801e8da <__swbuf_r+0x1a>
 801e93a:	4b09      	ldr	r3, [pc, #36]	; (801e960 <__swbuf_r+0xa0>)
 801e93c:	429c      	cmp	r4, r3
 801e93e:	bf08      	it	eq
 801e940:	68ec      	ldreq	r4, [r5, #12]
 801e942:	e7ca      	b.n	801e8da <__swbuf_r+0x1a>
 801e944:	4621      	mov	r1, r4
 801e946:	4628      	mov	r0, r5
 801e948:	f000 f82c 	bl	801e9a4 <__swsetup_r>
 801e94c:	2800      	cmp	r0, #0
 801e94e:	d0cb      	beq.n	801e8e8 <__swbuf_r+0x28>
 801e950:	f04f 37ff 	mov.w	r7, #4294967295
 801e954:	e7ea      	b.n	801e92c <__swbuf_r+0x6c>
 801e956:	bf00      	nop
 801e958:	08024234 	.word	0x08024234
 801e95c:	08024254 	.word	0x08024254
 801e960:	08024214 	.word	0x08024214

0801e964 <__ascii_wctomb>:
 801e964:	b149      	cbz	r1, 801e97a <__ascii_wctomb+0x16>
 801e966:	2aff      	cmp	r2, #255	; 0xff
 801e968:	bf85      	ittet	hi
 801e96a:	238a      	movhi	r3, #138	; 0x8a
 801e96c:	6003      	strhi	r3, [r0, #0]
 801e96e:	700a      	strbls	r2, [r1, #0]
 801e970:	f04f 30ff 	movhi.w	r0, #4294967295
 801e974:	bf98      	it	ls
 801e976:	2001      	movls	r0, #1
 801e978:	4770      	bx	lr
 801e97a:	4608      	mov	r0, r1
 801e97c:	4770      	bx	lr
	...

0801e980 <_write_r>:
 801e980:	b538      	push	{r3, r4, r5, lr}
 801e982:	4d07      	ldr	r5, [pc, #28]	; (801e9a0 <_write_r+0x20>)
 801e984:	4604      	mov	r4, r0
 801e986:	4608      	mov	r0, r1
 801e988:	4611      	mov	r1, r2
 801e98a:	2200      	movs	r2, #0
 801e98c:	602a      	str	r2, [r5, #0]
 801e98e:	461a      	mov	r2, r3
 801e990:	f7e5 f8b1 	bl	8003af6 <_write>
 801e994:	1c43      	adds	r3, r0, #1
 801e996:	d102      	bne.n	801e99e <_write_r+0x1e>
 801e998:	682b      	ldr	r3, [r5, #0]
 801e99a:	b103      	cbz	r3, 801e99e <_write_r+0x1e>
 801e99c:	6023      	str	r3, [r4, #0]
 801e99e:	bd38      	pop	{r3, r4, r5, pc}
 801e9a0:	20007674 	.word	0x20007674

0801e9a4 <__swsetup_r>:
 801e9a4:	4b32      	ldr	r3, [pc, #200]	; (801ea70 <__swsetup_r+0xcc>)
 801e9a6:	b570      	push	{r4, r5, r6, lr}
 801e9a8:	681d      	ldr	r5, [r3, #0]
 801e9aa:	4606      	mov	r6, r0
 801e9ac:	460c      	mov	r4, r1
 801e9ae:	b125      	cbz	r5, 801e9ba <__swsetup_r+0x16>
 801e9b0:	69ab      	ldr	r3, [r5, #24]
 801e9b2:	b913      	cbnz	r3, 801e9ba <__swsetup_r+0x16>
 801e9b4:	4628      	mov	r0, r5
 801e9b6:	f7fe fb71 	bl	801d09c <__sinit>
 801e9ba:	4b2e      	ldr	r3, [pc, #184]	; (801ea74 <__swsetup_r+0xd0>)
 801e9bc:	429c      	cmp	r4, r3
 801e9be:	d10f      	bne.n	801e9e0 <__swsetup_r+0x3c>
 801e9c0:	686c      	ldr	r4, [r5, #4]
 801e9c2:	89a3      	ldrh	r3, [r4, #12]
 801e9c4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801e9c8:	0719      	lsls	r1, r3, #28
 801e9ca:	d42c      	bmi.n	801ea26 <__swsetup_r+0x82>
 801e9cc:	06dd      	lsls	r5, r3, #27
 801e9ce:	d411      	bmi.n	801e9f4 <__swsetup_r+0x50>
 801e9d0:	2309      	movs	r3, #9
 801e9d2:	6033      	str	r3, [r6, #0]
 801e9d4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801e9d8:	81a3      	strh	r3, [r4, #12]
 801e9da:	f04f 30ff 	mov.w	r0, #4294967295
 801e9de:	e03e      	b.n	801ea5e <__swsetup_r+0xba>
 801e9e0:	4b25      	ldr	r3, [pc, #148]	; (801ea78 <__swsetup_r+0xd4>)
 801e9e2:	429c      	cmp	r4, r3
 801e9e4:	d101      	bne.n	801e9ea <__swsetup_r+0x46>
 801e9e6:	68ac      	ldr	r4, [r5, #8]
 801e9e8:	e7eb      	b.n	801e9c2 <__swsetup_r+0x1e>
 801e9ea:	4b24      	ldr	r3, [pc, #144]	; (801ea7c <__swsetup_r+0xd8>)
 801e9ec:	429c      	cmp	r4, r3
 801e9ee:	bf08      	it	eq
 801e9f0:	68ec      	ldreq	r4, [r5, #12]
 801e9f2:	e7e6      	b.n	801e9c2 <__swsetup_r+0x1e>
 801e9f4:	0758      	lsls	r0, r3, #29
 801e9f6:	d512      	bpl.n	801ea1e <__swsetup_r+0x7a>
 801e9f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801e9fa:	b141      	cbz	r1, 801ea0e <__swsetup_r+0x6a>
 801e9fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801ea00:	4299      	cmp	r1, r3
 801ea02:	d002      	beq.n	801ea0a <__swsetup_r+0x66>
 801ea04:	4630      	mov	r0, r6
 801ea06:	f7fb ff97 	bl	801a938 <_free_r>
 801ea0a:	2300      	movs	r3, #0
 801ea0c:	6363      	str	r3, [r4, #52]	; 0x34
 801ea0e:	89a3      	ldrh	r3, [r4, #12]
 801ea10:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801ea14:	81a3      	strh	r3, [r4, #12]
 801ea16:	2300      	movs	r3, #0
 801ea18:	6063      	str	r3, [r4, #4]
 801ea1a:	6923      	ldr	r3, [r4, #16]
 801ea1c:	6023      	str	r3, [r4, #0]
 801ea1e:	89a3      	ldrh	r3, [r4, #12]
 801ea20:	f043 0308 	orr.w	r3, r3, #8
 801ea24:	81a3      	strh	r3, [r4, #12]
 801ea26:	6923      	ldr	r3, [r4, #16]
 801ea28:	b94b      	cbnz	r3, 801ea3e <__swsetup_r+0x9a>
 801ea2a:	89a3      	ldrh	r3, [r4, #12]
 801ea2c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801ea30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801ea34:	d003      	beq.n	801ea3e <__swsetup_r+0x9a>
 801ea36:	4621      	mov	r1, r4
 801ea38:	4630      	mov	r0, r6
 801ea3a:	f000 f931 	bl	801eca0 <__smakebuf_r>
 801ea3e:	89a0      	ldrh	r0, [r4, #12]
 801ea40:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801ea44:	f010 0301 	ands.w	r3, r0, #1
 801ea48:	d00a      	beq.n	801ea60 <__swsetup_r+0xbc>
 801ea4a:	2300      	movs	r3, #0
 801ea4c:	60a3      	str	r3, [r4, #8]
 801ea4e:	6963      	ldr	r3, [r4, #20]
 801ea50:	425b      	negs	r3, r3
 801ea52:	61a3      	str	r3, [r4, #24]
 801ea54:	6923      	ldr	r3, [r4, #16]
 801ea56:	b943      	cbnz	r3, 801ea6a <__swsetup_r+0xc6>
 801ea58:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801ea5c:	d1ba      	bne.n	801e9d4 <__swsetup_r+0x30>
 801ea5e:	bd70      	pop	{r4, r5, r6, pc}
 801ea60:	0781      	lsls	r1, r0, #30
 801ea62:	bf58      	it	pl
 801ea64:	6963      	ldrpl	r3, [r4, #20]
 801ea66:	60a3      	str	r3, [r4, #8]
 801ea68:	e7f4      	b.n	801ea54 <__swsetup_r+0xb0>
 801ea6a:	2000      	movs	r0, #0
 801ea6c:	e7f7      	b.n	801ea5e <__swsetup_r+0xba>
 801ea6e:	bf00      	nop
 801ea70:	20000084 	.word	0x20000084
 801ea74:	08024234 	.word	0x08024234
 801ea78:	08024254 	.word	0x08024254
 801ea7c:	08024214 	.word	0x08024214

0801ea80 <abort>:
 801ea80:	b508      	push	{r3, lr}
 801ea82:	2006      	movs	r0, #6
 801ea84:	f000 f9ac 	bl	801ede0 <raise>
 801ea88:	2001      	movs	r0, #1
 801ea8a:	f7e5 f80d 	bl	8003aa8 <_exit>
	...

0801ea90 <_close_r>:
 801ea90:	b538      	push	{r3, r4, r5, lr}
 801ea92:	4d06      	ldr	r5, [pc, #24]	; (801eaac <_close_r+0x1c>)
 801ea94:	2300      	movs	r3, #0
 801ea96:	4604      	mov	r4, r0
 801ea98:	4608      	mov	r0, r1
 801ea9a:	602b      	str	r3, [r5, #0]
 801ea9c:	f7e5 f847 	bl	8003b2e <_close>
 801eaa0:	1c43      	adds	r3, r0, #1
 801eaa2:	d102      	bne.n	801eaaa <_close_r+0x1a>
 801eaa4:	682b      	ldr	r3, [r5, #0]
 801eaa6:	b103      	cbz	r3, 801eaaa <_close_r+0x1a>
 801eaa8:	6023      	str	r3, [r4, #0]
 801eaaa:	bd38      	pop	{r3, r4, r5, pc}
 801eaac:	20007674 	.word	0x20007674

0801eab0 <__sflush_r>:
 801eab0:	898a      	ldrh	r2, [r1, #12]
 801eab2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801eab6:	4605      	mov	r5, r0
 801eab8:	0710      	lsls	r0, r2, #28
 801eaba:	460c      	mov	r4, r1
 801eabc:	d458      	bmi.n	801eb70 <__sflush_r+0xc0>
 801eabe:	684b      	ldr	r3, [r1, #4]
 801eac0:	2b00      	cmp	r3, #0
 801eac2:	dc05      	bgt.n	801ead0 <__sflush_r+0x20>
 801eac4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801eac6:	2b00      	cmp	r3, #0
 801eac8:	dc02      	bgt.n	801ead0 <__sflush_r+0x20>
 801eaca:	2000      	movs	r0, #0
 801eacc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ead0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801ead2:	2e00      	cmp	r6, #0
 801ead4:	d0f9      	beq.n	801eaca <__sflush_r+0x1a>
 801ead6:	2300      	movs	r3, #0
 801ead8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801eadc:	682f      	ldr	r7, [r5, #0]
 801eade:	602b      	str	r3, [r5, #0]
 801eae0:	d032      	beq.n	801eb48 <__sflush_r+0x98>
 801eae2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801eae4:	89a3      	ldrh	r3, [r4, #12]
 801eae6:	075a      	lsls	r2, r3, #29
 801eae8:	d505      	bpl.n	801eaf6 <__sflush_r+0x46>
 801eaea:	6863      	ldr	r3, [r4, #4]
 801eaec:	1ac0      	subs	r0, r0, r3
 801eaee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801eaf0:	b10b      	cbz	r3, 801eaf6 <__sflush_r+0x46>
 801eaf2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801eaf4:	1ac0      	subs	r0, r0, r3
 801eaf6:	2300      	movs	r3, #0
 801eaf8:	4602      	mov	r2, r0
 801eafa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801eafc:	6a21      	ldr	r1, [r4, #32]
 801eafe:	4628      	mov	r0, r5
 801eb00:	47b0      	blx	r6
 801eb02:	1c43      	adds	r3, r0, #1
 801eb04:	89a3      	ldrh	r3, [r4, #12]
 801eb06:	d106      	bne.n	801eb16 <__sflush_r+0x66>
 801eb08:	6829      	ldr	r1, [r5, #0]
 801eb0a:	291d      	cmp	r1, #29
 801eb0c:	d82c      	bhi.n	801eb68 <__sflush_r+0xb8>
 801eb0e:	4a2a      	ldr	r2, [pc, #168]	; (801ebb8 <__sflush_r+0x108>)
 801eb10:	40ca      	lsrs	r2, r1
 801eb12:	07d6      	lsls	r6, r2, #31
 801eb14:	d528      	bpl.n	801eb68 <__sflush_r+0xb8>
 801eb16:	2200      	movs	r2, #0
 801eb18:	6062      	str	r2, [r4, #4]
 801eb1a:	04d9      	lsls	r1, r3, #19
 801eb1c:	6922      	ldr	r2, [r4, #16]
 801eb1e:	6022      	str	r2, [r4, #0]
 801eb20:	d504      	bpl.n	801eb2c <__sflush_r+0x7c>
 801eb22:	1c42      	adds	r2, r0, #1
 801eb24:	d101      	bne.n	801eb2a <__sflush_r+0x7a>
 801eb26:	682b      	ldr	r3, [r5, #0]
 801eb28:	b903      	cbnz	r3, 801eb2c <__sflush_r+0x7c>
 801eb2a:	6560      	str	r0, [r4, #84]	; 0x54
 801eb2c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801eb2e:	602f      	str	r7, [r5, #0]
 801eb30:	2900      	cmp	r1, #0
 801eb32:	d0ca      	beq.n	801eaca <__sflush_r+0x1a>
 801eb34:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801eb38:	4299      	cmp	r1, r3
 801eb3a:	d002      	beq.n	801eb42 <__sflush_r+0x92>
 801eb3c:	4628      	mov	r0, r5
 801eb3e:	f7fb fefb 	bl	801a938 <_free_r>
 801eb42:	2000      	movs	r0, #0
 801eb44:	6360      	str	r0, [r4, #52]	; 0x34
 801eb46:	e7c1      	b.n	801eacc <__sflush_r+0x1c>
 801eb48:	6a21      	ldr	r1, [r4, #32]
 801eb4a:	2301      	movs	r3, #1
 801eb4c:	4628      	mov	r0, r5
 801eb4e:	47b0      	blx	r6
 801eb50:	1c41      	adds	r1, r0, #1
 801eb52:	d1c7      	bne.n	801eae4 <__sflush_r+0x34>
 801eb54:	682b      	ldr	r3, [r5, #0]
 801eb56:	2b00      	cmp	r3, #0
 801eb58:	d0c4      	beq.n	801eae4 <__sflush_r+0x34>
 801eb5a:	2b1d      	cmp	r3, #29
 801eb5c:	d001      	beq.n	801eb62 <__sflush_r+0xb2>
 801eb5e:	2b16      	cmp	r3, #22
 801eb60:	d101      	bne.n	801eb66 <__sflush_r+0xb6>
 801eb62:	602f      	str	r7, [r5, #0]
 801eb64:	e7b1      	b.n	801eaca <__sflush_r+0x1a>
 801eb66:	89a3      	ldrh	r3, [r4, #12]
 801eb68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801eb6c:	81a3      	strh	r3, [r4, #12]
 801eb6e:	e7ad      	b.n	801eacc <__sflush_r+0x1c>
 801eb70:	690f      	ldr	r7, [r1, #16]
 801eb72:	2f00      	cmp	r7, #0
 801eb74:	d0a9      	beq.n	801eaca <__sflush_r+0x1a>
 801eb76:	0793      	lsls	r3, r2, #30
 801eb78:	680e      	ldr	r6, [r1, #0]
 801eb7a:	bf08      	it	eq
 801eb7c:	694b      	ldreq	r3, [r1, #20]
 801eb7e:	600f      	str	r7, [r1, #0]
 801eb80:	bf18      	it	ne
 801eb82:	2300      	movne	r3, #0
 801eb84:	eba6 0807 	sub.w	r8, r6, r7
 801eb88:	608b      	str	r3, [r1, #8]
 801eb8a:	f1b8 0f00 	cmp.w	r8, #0
 801eb8e:	dd9c      	ble.n	801eaca <__sflush_r+0x1a>
 801eb90:	6a21      	ldr	r1, [r4, #32]
 801eb92:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801eb94:	4643      	mov	r3, r8
 801eb96:	463a      	mov	r2, r7
 801eb98:	4628      	mov	r0, r5
 801eb9a:	47b0      	blx	r6
 801eb9c:	2800      	cmp	r0, #0
 801eb9e:	dc06      	bgt.n	801ebae <__sflush_r+0xfe>
 801eba0:	89a3      	ldrh	r3, [r4, #12]
 801eba2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801eba6:	81a3      	strh	r3, [r4, #12]
 801eba8:	f04f 30ff 	mov.w	r0, #4294967295
 801ebac:	e78e      	b.n	801eacc <__sflush_r+0x1c>
 801ebae:	4407      	add	r7, r0
 801ebb0:	eba8 0800 	sub.w	r8, r8, r0
 801ebb4:	e7e9      	b.n	801eb8a <__sflush_r+0xda>
 801ebb6:	bf00      	nop
 801ebb8:	20400001 	.word	0x20400001

0801ebbc <_fflush_r>:
 801ebbc:	b538      	push	{r3, r4, r5, lr}
 801ebbe:	690b      	ldr	r3, [r1, #16]
 801ebc0:	4605      	mov	r5, r0
 801ebc2:	460c      	mov	r4, r1
 801ebc4:	b913      	cbnz	r3, 801ebcc <_fflush_r+0x10>
 801ebc6:	2500      	movs	r5, #0
 801ebc8:	4628      	mov	r0, r5
 801ebca:	bd38      	pop	{r3, r4, r5, pc}
 801ebcc:	b118      	cbz	r0, 801ebd6 <_fflush_r+0x1a>
 801ebce:	6983      	ldr	r3, [r0, #24]
 801ebd0:	b90b      	cbnz	r3, 801ebd6 <_fflush_r+0x1a>
 801ebd2:	f7fe fa63 	bl	801d09c <__sinit>
 801ebd6:	4b14      	ldr	r3, [pc, #80]	; (801ec28 <_fflush_r+0x6c>)
 801ebd8:	429c      	cmp	r4, r3
 801ebda:	d11b      	bne.n	801ec14 <_fflush_r+0x58>
 801ebdc:	686c      	ldr	r4, [r5, #4]
 801ebde:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ebe2:	2b00      	cmp	r3, #0
 801ebe4:	d0ef      	beq.n	801ebc6 <_fflush_r+0xa>
 801ebe6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801ebe8:	07d0      	lsls	r0, r2, #31
 801ebea:	d404      	bmi.n	801ebf6 <_fflush_r+0x3a>
 801ebec:	0599      	lsls	r1, r3, #22
 801ebee:	d402      	bmi.n	801ebf6 <_fflush_r+0x3a>
 801ebf0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801ebf2:	f7fe fe76 	bl	801d8e2 <__retarget_lock_acquire_recursive>
 801ebf6:	4628      	mov	r0, r5
 801ebf8:	4621      	mov	r1, r4
 801ebfa:	f7ff ff59 	bl	801eab0 <__sflush_r>
 801ebfe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801ec00:	07da      	lsls	r2, r3, #31
 801ec02:	4605      	mov	r5, r0
 801ec04:	d4e0      	bmi.n	801ebc8 <_fflush_r+0xc>
 801ec06:	89a3      	ldrh	r3, [r4, #12]
 801ec08:	059b      	lsls	r3, r3, #22
 801ec0a:	d4dd      	bmi.n	801ebc8 <_fflush_r+0xc>
 801ec0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801ec0e:	f7fe fe69 	bl	801d8e4 <__retarget_lock_release_recursive>
 801ec12:	e7d9      	b.n	801ebc8 <_fflush_r+0xc>
 801ec14:	4b05      	ldr	r3, [pc, #20]	; (801ec2c <_fflush_r+0x70>)
 801ec16:	429c      	cmp	r4, r3
 801ec18:	d101      	bne.n	801ec1e <_fflush_r+0x62>
 801ec1a:	68ac      	ldr	r4, [r5, #8]
 801ec1c:	e7df      	b.n	801ebde <_fflush_r+0x22>
 801ec1e:	4b04      	ldr	r3, [pc, #16]	; (801ec30 <_fflush_r+0x74>)
 801ec20:	429c      	cmp	r4, r3
 801ec22:	bf08      	it	eq
 801ec24:	68ec      	ldreq	r4, [r5, #12]
 801ec26:	e7da      	b.n	801ebde <_fflush_r+0x22>
 801ec28:	08024234 	.word	0x08024234
 801ec2c:	08024254 	.word	0x08024254
 801ec30:	08024214 	.word	0x08024214

0801ec34 <_lseek_r>:
 801ec34:	b538      	push	{r3, r4, r5, lr}
 801ec36:	4d07      	ldr	r5, [pc, #28]	; (801ec54 <_lseek_r+0x20>)
 801ec38:	4604      	mov	r4, r0
 801ec3a:	4608      	mov	r0, r1
 801ec3c:	4611      	mov	r1, r2
 801ec3e:	2200      	movs	r2, #0
 801ec40:	602a      	str	r2, [r5, #0]
 801ec42:	461a      	mov	r2, r3
 801ec44:	f7e4 ff9a 	bl	8003b7c <_lseek>
 801ec48:	1c43      	adds	r3, r0, #1
 801ec4a:	d102      	bne.n	801ec52 <_lseek_r+0x1e>
 801ec4c:	682b      	ldr	r3, [r5, #0]
 801ec4e:	b103      	cbz	r3, 801ec52 <_lseek_r+0x1e>
 801ec50:	6023      	str	r3, [r4, #0]
 801ec52:	bd38      	pop	{r3, r4, r5, pc}
 801ec54:	20007674 	.word	0x20007674

0801ec58 <__swhatbuf_r>:
 801ec58:	b570      	push	{r4, r5, r6, lr}
 801ec5a:	460e      	mov	r6, r1
 801ec5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ec60:	2900      	cmp	r1, #0
 801ec62:	b096      	sub	sp, #88	; 0x58
 801ec64:	4614      	mov	r4, r2
 801ec66:	461d      	mov	r5, r3
 801ec68:	da07      	bge.n	801ec7a <__swhatbuf_r+0x22>
 801ec6a:	2300      	movs	r3, #0
 801ec6c:	602b      	str	r3, [r5, #0]
 801ec6e:	89b3      	ldrh	r3, [r6, #12]
 801ec70:	061a      	lsls	r2, r3, #24
 801ec72:	d410      	bmi.n	801ec96 <__swhatbuf_r+0x3e>
 801ec74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801ec78:	e00e      	b.n	801ec98 <__swhatbuf_r+0x40>
 801ec7a:	466a      	mov	r2, sp
 801ec7c:	f000 f8cc 	bl	801ee18 <_fstat_r>
 801ec80:	2800      	cmp	r0, #0
 801ec82:	dbf2      	blt.n	801ec6a <__swhatbuf_r+0x12>
 801ec84:	9a01      	ldr	r2, [sp, #4]
 801ec86:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801ec8a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801ec8e:	425a      	negs	r2, r3
 801ec90:	415a      	adcs	r2, r3
 801ec92:	602a      	str	r2, [r5, #0]
 801ec94:	e7ee      	b.n	801ec74 <__swhatbuf_r+0x1c>
 801ec96:	2340      	movs	r3, #64	; 0x40
 801ec98:	2000      	movs	r0, #0
 801ec9a:	6023      	str	r3, [r4, #0]
 801ec9c:	b016      	add	sp, #88	; 0x58
 801ec9e:	bd70      	pop	{r4, r5, r6, pc}

0801eca0 <__smakebuf_r>:
 801eca0:	898b      	ldrh	r3, [r1, #12]
 801eca2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801eca4:	079d      	lsls	r5, r3, #30
 801eca6:	4606      	mov	r6, r0
 801eca8:	460c      	mov	r4, r1
 801ecaa:	d507      	bpl.n	801ecbc <__smakebuf_r+0x1c>
 801ecac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801ecb0:	6023      	str	r3, [r4, #0]
 801ecb2:	6123      	str	r3, [r4, #16]
 801ecb4:	2301      	movs	r3, #1
 801ecb6:	6163      	str	r3, [r4, #20]
 801ecb8:	b002      	add	sp, #8
 801ecba:	bd70      	pop	{r4, r5, r6, pc}
 801ecbc:	ab01      	add	r3, sp, #4
 801ecbe:	466a      	mov	r2, sp
 801ecc0:	f7ff ffca 	bl	801ec58 <__swhatbuf_r>
 801ecc4:	9900      	ldr	r1, [sp, #0]
 801ecc6:	4605      	mov	r5, r0
 801ecc8:	4630      	mov	r0, r6
 801ecca:	f7fb fe85 	bl	801a9d8 <_malloc_r>
 801ecce:	b948      	cbnz	r0, 801ece4 <__smakebuf_r+0x44>
 801ecd0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ecd4:	059a      	lsls	r2, r3, #22
 801ecd6:	d4ef      	bmi.n	801ecb8 <__smakebuf_r+0x18>
 801ecd8:	f023 0303 	bic.w	r3, r3, #3
 801ecdc:	f043 0302 	orr.w	r3, r3, #2
 801ece0:	81a3      	strh	r3, [r4, #12]
 801ece2:	e7e3      	b.n	801ecac <__smakebuf_r+0xc>
 801ece4:	4b0d      	ldr	r3, [pc, #52]	; (801ed1c <__smakebuf_r+0x7c>)
 801ece6:	62b3      	str	r3, [r6, #40]	; 0x28
 801ece8:	89a3      	ldrh	r3, [r4, #12]
 801ecea:	6020      	str	r0, [r4, #0]
 801ecec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801ecf0:	81a3      	strh	r3, [r4, #12]
 801ecf2:	9b00      	ldr	r3, [sp, #0]
 801ecf4:	6163      	str	r3, [r4, #20]
 801ecf6:	9b01      	ldr	r3, [sp, #4]
 801ecf8:	6120      	str	r0, [r4, #16]
 801ecfa:	b15b      	cbz	r3, 801ed14 <__smakebuf_r+0x74>
 801ecfc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801ed00:	4630      	mov	r0, r6
 801ed02:	f000 f89b 	bl	801ee3c <_isatty_r>
 801ed06:	b128      	cbz	r0, 801ed14 <__smakebuf_r+0x74>
 801ed08:	89a3      	ldrh	r3, [r4, #12]
 801ed0a:	f023 0303 	bic.w	r3, r3, #3
 801ed0e:	f043 0301 	orr.w	r3, r3, #1
 801ed12:	81a3      	strh	r3, [r4, #12]
 801ed14:	89a0      	ldrh	r0, [r4, #12]
 801ed16:	4305      	orrs	r5, r0
 801ed18:	81a5      	strh	r5, [r4, #12]
 801ed1a:	e7cd      	b.n	801ecb8 <__smakebuf_r+0x18>
 801ed1c:	0801d035 	.word	0x0801d035

0801ed20 <_realloc_r>:
 801ed20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ed22:	4607      	mov	r7, r0
 801ed24:	4614      	mov	r4, r2
 801ed26:	460e      	mov	r6, r1
 801ed28:	b921      	cbnz	r1, 801ed34 <_realloc_r+0x14>
 801ed2a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801ed2e:	4611      	mov	r1, r2
 801ed30:	f7fb be52 	b.w	801a9d8 <_malloc_r>
 801ed34:	b922      	cbnz	r2, 801ed40 <_realloc_r+0x20>
 801ed36:	f7fb fdff 	bl	801a938 <_free_r>
 801ed3a:	4625      	mov	r5, r4
 801ed3c:	4628      	mov	r0, r5
 801ed3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ed40:	f000 f88c 	bl	801ee5c <_malloc_usable_size_r>
 801ed44:	42a0      	cmp	r0, r4
 801ed46:	d20f      	bcs.n	801ed68 <_realloc_r+0x48>
 801ed48:	4621      	mov	r1, r4
 801ed4a:	4638      	mov	r0, r7
 801ed4c:	f7fb fe44 	bl	801a9d8 <_malloc_r>
 801ed50:	4605      	mov	r5, r0
 801ed52:	2800      	cmp	r0, #0
 801ed54:	d0f2      	beq.n	801ed3c <_realloc_r+0x1c>
 801ed56:	4631      	mov	r1, r6
 801ed58:	4622      	mov	r2, r4
 801ed5a:	f7fb fdbd 	bl	801a8d8 <memcpy>
 801ed5e:	4631      	mov	r1, r6
 801ed60:	4638      	mov	r0, r7
 801ed62:	f7fb fde9 	bl	801a938 <_free_r>
 801ed66:	e7e9      	b.n	801ed3c <_realloc_r+0x1c>
 801ed68:	4635      	mov	r5, r6
 801ed6a:	e7e7      	b.n	801ed3c <_realloc_r+0x1c>

0801ed6c <_read_r>:
 801ed6c:	b538      	push	{r3, r4, r5, lr}
 801ed6e:	4d07      	ldr	r5, [pc, #28]	; (801ed8c <_read_r+0x20>)
 801ed70:	4604      	mov	r4, r0
 801ed72:	4608      	mov	r0, r1
 801ed74:	4611      	mov	r1, r2
 801ed76:	2200      	movs	r2, #0
 801ed78:	602a      	str	r2, [r5, #0]
 801ed7a:	461a      	mov	r2, r3
 801ed7c:	f7e4 fe9e 	bl	8003abc <_read>
 801ed80:	1c43      	adds	r3, r0, #1
 801ed82:	d102      	bne.n	801ed8a <_read_r+0x1e>
 801ed84:	682b      	ldr	r3, [r5, #0]
 801ed86:	b103      	cbz	r3, 801ed8a <_read_r+0x1e>
 801ed88:	6023      	str	r3, [r4, #0]
 801ed8a:	bd38      	pop	{r3, r4, r5, pc}
 801ed8c:	20007674 	.word	0x20007674

0801ed90 <_raise_r>:
 801ed90:	291f      	cmp	r1, #31
 801ed92:	b538      	push	{r3, r4, r5, lr}
 801ed94:	4604      	mov	r4, r0
 801ed96:	460d      	mov	r5, r1
 801ed98:	d904      	bls.n	801eda4 <_raise_r+0x14>
 801ed9a:	2316      	movs	r3, #22
 801ed9c:	6003      	str	r3, [r0, #0]
 801ed9e:	f04f 30ff 	mov.w	r0, #4294967295
 801eda2:	bd38      	pop	{r3, r4, r5, pc}
 801eda4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801eda6:	b112      	cbz	r2, 801edae <_raise_r+0x1e>
 801eda8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801edac:	b94b      	cbnz	r3, 801edc2 <_raise_r+0x32>
 801edae:	4620      	mov	r0, r4
 801edb0:	f000 f830 	bl	801ee14 <_getpid_r>
 801edb4:	462a      	mov	r2, r5
 801edb6:	4601      	mov	r1, r0
 801edb8:	4620      	mov	r0, r4
 801edba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801edbe:	f000 b817 	b.w	801edf0 <_kill_r>
 801edc2:	2b01      	cmp	r3, #1
 801edc4:	d00a      	beq.n	801eddc <_raise_r+0x4c>
 801edc6:	1c59      	adds	r1, r3, #1
 801edc8:	d103      	bne.n	801edd2 <_raise_r+0x42>
 801edca:	2316      	movs	r3, #22
 801edcc:	6003      	str	r3, [r0, #0]
 801edce:	2001      	movs	r0, #1
 801edd0:	e7e7      	b.n	801eda2 <_raise_r+0x12>
 801edd2:	2400      	movs	r4, #0
 801edd4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801edd8:	4628      	mov	r0, r5
 801edda:	4798      	blx	r3
 801eddc:	2000      	movs	r0, #0
 801edde:	e7e0      	b.n	801eda2 <_raise_r+0x12>

0801ede0 <raise>:
 801ede0:	4b02      	ldr	r3, [pc, #8]	; (801edec <raise+0xc>)
 801ede2:	4601      	mov	r1, r0
 801ede4:	6818      	ldr	r0, [r3, #0]
 801ede6:	f7ff bfd3 	b.w	801ed90 <_raise_r>
 801edea:	bf00      	nop
 801edec:	20000084 	.word	0x20000084

0801edf0 <_kill_r>:
 801edf0:	b538      	push	{r3, r4, r5, lr}
 801edf2:	4d07      	ldr	r5, [pc, #28]	; (801ee10 <_kill_r+0x20>)
 801edf4:	2300      	movs	r3, #0
 801edf6:	4604      	mov	r4, r0
 801edf8:	4608      	mov	r0, r1
 801edfa:	4611      	mov	r1, r2
 801edfc:	602b      	str	r3, [r5, #0]
 801edfe:	f7e4 fe41 	bl	8003a84 <_kill>
 801ee02:	1c43      	adds	r3, r0, #1
 801ee04:	d102      	bne.n	801ee0c <_kill_r+0x1c>
 801ee06:	682b      	ldr	r3, [r5, #0]
 801ee08:	b103      	cbz	r3, 801ee0c <_kill_r+0x1c>
 801ee0a:	6023      	str	r3, [r4, #0]
 801ee0c:	bd38      	pop	{r3, r4, r5, pc}
 801ee0e:	bf00      	nop
 801ee10:	20007674 	.word	0x20007674

0801ee14 <_getpid_r>:
 801ee14:	f7e4 be2e 	b.w	8003a74 <_getpid>

0801ee18 <_fstat_r>:
 801ee18:	b538      	push	{r3, r4, r5, lr}
 801ee1a:	4d07      	ldr	r5, [pc, #28]	; (801ee38 <_fstat_r+0x20>)
 801ee1c:	2300      	movs	r3, #0
 801ee1e:	4604      	mov	r4, r0
 801ee20:	4608      	mov	r0, r1
 801ee22:	4611      	mov	r1, r2
 801ee24:	602b      	str	r3, [r5, #0]
 801ee26:	f7e4 fe8e 	bl	8003b46 <_fstat>
 801ee2a:	1c43      	adds	r3, r0, #1
 801ee2c:	d102      	bne.n	801ee34 <_fstat_r+0x1c>
 801ee2e:	682b      	ldr	r3, [r5, #0]
 801ee30:	b103      	cbz	r3, 801ee34 <_fstat_r+0x1c>
 801ee32:	6023      	str	r3, [r4, #0]
 801ee34:	bd38      	pop	{r3, r4, r5, pc}
 801ee36:	bf00      	nop
 801ee38:	20007674 	.word	0x20007674

0801ee3c <_isatty_r>:
 801ee3c:	b538      	push	{r3, r4, r5, lr}
 801ee3e:	4d06      	ldr	r5, [pc, #24]	; (801ee58 <_isatty_r+0x1c>)
 801ee40:	2300      	movs	r3, #0
 801ee42:	4604      	mov	r4, r0
 801ee44:	4608      	mov	r0, r1
 801ee46:	602b      	str	r3, [r5, #0]
 801ee48:	f7e4 fe8d 	bl	8003b66 <_isatty>
 801ee4c:	1c43      	adds	r3, r0, #1
 801ee4e:	d102      	bne.n	801ee56 <_isatty_r+0x1a>
 801ee50:	682b      	ldr	r3, [r5, #0]
 801ee52:	b103      	cbz	r3, 801ee56 <_isatty_r+0x1a>
 801ee54:	6023      	str	r3, [r4, #0]
 801ee56:	bd38      	pop	{r3, r4, r5, pc}
 801ee58:	20007674 	.word	0x20007674

0801ee5c <_malloc_usable_size_r>:
 801ee5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801ee60:	1f18      	subs	r0, r3, #4
 801ee62:	2b00      	cmp	r3, #0
 801ee64:	bfbc      	itt	lt
 801ee66:	580b      	ldrlt	r3, [r1, r0]
 801ee68:	18c0      	addlt	r0, r0, r3
 801ee6a:	4770      	bx	lr

0801ee6c <pow>:
 801ee6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ee70:	ec59 8b10 	vmov	r8, r9, d0
 801ee74:	ec57 6b11 	vmov	r6, r7, d1
 801ee78:	f000 f8a6 	bl	801efc8 <__ieee754_pow>
 801ee7c:	4b4e      	ldr	r3, [pc, #312]	; (801efb8 <pow+0x14c>)
 801ee7e:	f993 3000 	ldrsb.w	r3, [r3]
 801ee82:	3301      	adds	r3, #1
 801ee84:	ec55 4b10 	vmov	r4, r5, d0
 801ee88:	d015      	beq.n	801eeb6 <pow+0x4a>
 801ee8a:	4632      	mov	r2, r6
 801ee8c:	463b      	mov	r3, r7
 801ee8e:	4630      	mov	r0, r6
 801ee90:	4639      	mov	r1, r7
 801ee92:	f7e1 fe5b 	bl	8000b4c <__aeabi_dcmpun>
 801ee96:	b970      	cbnz	r0, 801eeb6 <pow+0x4a>
 801ee98:	4642      	mov	r2, r8
 801ee9a:	464b      	mov	r3, r9
 801ee9c:	4640      	mov	r0, r8
 801ee9e:	4649      	mov	r1, r9
 801eea0:	f7e1 fe54 	bl	8000b4c <__aeabi_dcmpun>
 801eea4:	2200      	movs	r2, #0
 801eea6:	2300      	movs	r3, #0
 801eea8:	b148      	cbz	r0, 801eebe <pow+0x52>
 801eeaa:	4630      	mov	r0, r6
 801eeac:	4639      	mov	r1, r7
 801eeae:	f7e1 fe1b 	bl	8000ae8 <__aeabi_dcmpeq>
 801eeb2:	2800      	cmp	r0, #0
 801eeb4:	d17d      	bne.n	801efb2 <pow+0x146>
 801eeb6:	ec45 4b10 	vmov	d0, r4, r5
 801eeba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801eebe:	4640      	mov	r0, r8
 801eec0:	4649      	mov	r1, r9
 801eec2:	f7e1 fe11 	bl	8000ae8 <__aeabi_dcmpeq>
 801eec6:	b1e0      	cbz	r0, 801ef02 <pow+0x96>
 801eec8:	2200      	movs	r2, #0
 801eeca:	2300      	movs	r3, #0
 801eecc:	4630      	mov	r0, r6
 801eece:	4639      	mov	r1, r7
 801eed0:	f7e1 fe0a 	bl	8000ae8 <__aeabi_dcmpeq>
 801eed4:	2800      	cmp	r0, #0
 801eed6:	d16c      	bne.n	801efb2 <pow+0x146>
 801eed8:	ec47 6b10 	vmov	d0, r6, r7
 801eedc:	f000 fe53 	bl	801fb86 <finite>
 801eee0:	2800      	cmp	r0, #0
 801eee2:	d0e8      	beq.n	801eeb6 <pow+0x4a>
 801eee4:	2200      	movs	r2, #0
 801eee6:	2300      	movs	r3, #0
 801eee8:	4630      	mov	r0, r6
 801eeea:	4639      	mov	r1, r7
 801eeec:	f7e1 fe06 	bl	8000afc <__aeabi_dcmplt>
 801eef0:	2800      	cmp	r0, #0
 801eef2:	d0e0      	beq.n	801eeb6 <pow+0x4a>
 801eef4:	f7fe f874 	bl	801cfe0 <__errno>
 801eef8:	2321      	movs	r3, #33	; 0x21
 801eefa:	6003      	str	r3, [r0, #0]
 801eefc:	2400      	movs	r4, #0
 801eefe:	4d2f      	ldr	r5, [pc, #188]	; (801efbc <pow+0x150>)
 801ef00:	e7d9      	b.n	801eeb6 <pow+0x4a>
 801ef02:	ec45 4b10 	vmov	d0, r4, r5
 801ef06:	f000 fe3e 	bl	801fb86 <finite>
 801ef0a:	bbb8      	cbnz	r0, 801ef7c <pow+0x110>
 801ef0c:	ec49 8b10 	vmov	d0, r8, r9
 801ef10:	f000 fe39 	bl	801fb86 <finite>
 801ef14:	b390      	cbz	r0, 801ef7c <pow+0x110>
 801ef16:	ec47 6b10 	vmov	d0, r6, r7
 801ef1a:	f000 fe34 	bl	801fb86 <finite>
 801ef1e:	b368      	cbz	r0, 801ef7c <pow+0x110>
 801ef20:	4622      	mov	r2, r4
 801ef22:	462b      	mov	r3, r5
 801ef24:	4620      	mov	r0, r4
 801ef26:	4629      	mov	r1, r5
 801ef28:	f7e1 fe10 	bl	8000b4c <__aeabi_dcmpun>
 801ef2c:	b160      	cbz	r0, 801ef48 <pow+0xdc>
 801ef2e:	f7fe f857 	bl	801cfe0 <__errno>
 801ef32:	2321      	movs	r3, #33	; 0x21
 801ef34:	6003      	str	r3, [r0, #0]
 801ef36:	2200      	movs	r2, #0
 801ef38:	2300      	movs	r3, #0
 801ef3a:	4610      	mov	r0, r2
 801ef3c:	4619      	mov	r1, r3
 801ef3e:	f7e1 fc95 	bl	800086c <__aeabi_ddiv>
 801ef42:	4604      	mov	r4, r0
 801ef44:	460d      	mov	r5, r1
 801ef46:	e7b6      	b.n	801eeb6 <pow+0x4a>
 801ef48:	f7fe f84a 	bl	801cfe0 <__errno>
 801ef4c:	2322      	movs	r3, #34	; 0x22
 801ef4e:	6003      	str	r3, [r0, #0]
 801ef50:	2200      	movs	r2, #0
 801ef52:	2300      	movs	r3, #0
 801ef54:	4640      	mov	r0, r8
 801ef56:	4649      	mov	r1, r9
 801ef58:	f7e1 fdd0 	bl	8000afc <__aeabi_dcmplt>
 801ef5c:	2400      	movs	r4, #0
 801ef5e:	b158      	cbz	r0, 801ef78 <pow+0x10c>
 801ef60:	ec47 6b10 	vmov	d0, r6, r7
 801ef64:	f000 fe1a 	bl	801fb9c <rint>
 801ef68:	4632      	mov	r2, r6
 801ef6a:	ec51 0b10 	vmov	r0, r1, d0
 801ef6e:	463b      	mov	r3, r7
 801ef70:	f7e1 fdba 	bl	8000ae8 <__aeabi_dcmpeq>
 801ef74:	2800      	cmp	r0, #0
 801ef76:	d0c2      	beq.n	801eefe <pow+0x92>
 801ef78:	4d11      	ldr	r5, [pc, #68]	; (801efc0 <pow+0x154>)
 801ef7a:	e79c      	b.n	801eeb6 <pow+0x4a>
 801ef7c:	2200      	movs	r2, #0
 801ef7e:	2300      	movs	r3, #0
 801ef80:	4620      	mov	r0, r4
 801ef82:	4629      	mov	r1, r5
 801ef84:	f7e1 fdb0 	bl	8000ae8 <__aeabi_dcmpeq>
 801ef88:	2800      	cmp	r0, #0
 801ef8a:	d094      	beq.n	801eeb6 <pow+0x4a>
 801ef8c:	ec49 8b10 	vmov	d0, r8, r9
 801ef90:	f000 fdf9 	bl	801fb86 <finite>
 801ef94:	2800      	cmp	r0, #0
 801ef96:	d08e      	beq.n	801eeb6 <pow+0x4a>
 801ef98:	ec47 6b10 	vmov	d0, r6, r7
 801ef9c:	f000 fdf3 	bl	801fb86 <finite>
 801efa0:	2800      	cmp	r0, #0
 801efa2:	d088      	beq.n	801eeb6 <pow+0x4a>
 801efa4:	f7fe f81c 	bl	801cfe0 <__errno>
 801efa8:	2322      	movs	r3, #34	; 0x22
 801efaa:	6003      	str	r3, [r0, #0]
 801efac:	2400      	movs	r4, #0
 801efae:	2500      	movs	r5, #0
 801efb0:	e781      	b.n	801eeb6 <pow+0x4a>
 801efb2:	4d04      	ldr	r5, [pc, #16]	; (801efc4 <pow+0x158>)
 801efb4:	2400      	movs	r4, #0
 801efb6:	e77e      	b.n	801eeb6 <pow+0x4a>
 801efb8:	20000258 	.word	0x20000258
 801efbc:	fff00000 	.word	0xfff00000
 801efc0:	7ff00000 	.word	0x7ff00000
 801efc4:	3ff00000 	.word	0x3ff00000

0801efc8 <__ieee754_pow>:
 801efc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801efcc:	ed2d 8b06 	vpush	{d8-d10}
 801efd0:	b08d      	sub	sp, #52	; 0x34
 801efd2:	ed8d 1b02 	vstr	d1, [sp, #8]
 801efd6:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 801efda:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 801efde:	ea56 0100 	orrs.w	r1, r6, r0
 801efe2:	ec53 2b10 	vmov	r2, r3, d0
 801efe6:	f000 84d1 	beq.w	801f98c <__ieee754_pow+0x9c4>
 801efea:	497f      	ldr	r1, [pc, #508]	; (801f1e8 <__ieee754_pow+0x220>)
 801efec:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 801eff0:	428c      	cmp	r4, r1
 801eff2:	ee10 8a10 	vmov	r8, s0
 801eff6:	4699      	mov	r9, r3
 801eff8:	dc09      	bgt.n	801f00e <__ieee754_pow+0x46>
 801effa:	d103      	bne.n	801f004 <__ieee754_pow+0x3c>
 801effc:	b97a      	cbnz	r2, 801f01e <__ieee754_pow+0x56>
 801effe:	42a6      	cmp	r6, r4
 801f000:	dd02      	ble.n	801f008 <__ieee754_pow+0x40>
 801f002:	e00c      	b.n	801f01e <__ieee754_pow+0x56>
 801f004:	428e      	cmp	r6, r1
 801f006:	dc02      	bgt.n	801f00e <__ieee754_pow+0x46>
 801f008:	428e      	cmp	r6, r1
 801f00a:	d110      	bne.n	801f02e <__ieee754_pow+0x66>
 801f00c:	b178      	cbz	r0, 801f02e <__ieee754_pow+0x66>
 801f00e:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801f012:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801f016:	ea54 0308 	orrs.w	r3, r4, r8
 801f01a:	f000 84b7 	beq.w	801f98c <__ieee754_pow+0x9c4>
 801f01e:	4873      	ldr	r0, [pc, #460]	; (801f1ec <__ieee754_pow+0x224>)
 801f020:	b00d      	add	sp, #52	; 0x34
 801f022:	ecbd 8b06 	vpop	{d8-d10}
 801f026:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f02a:	f7ff bbfd 	b.w	801e828 <nan>
 801f02e:	f1b9 0f00 	cmp.w	r9, #0
 801f032:	da36      	bge.n	801f0a2 <__ieee754_pow+0xda>
 801f034:	496e      	ldr	r1, [pc, #440]	; (801f1f0 <__ieee754_pow+0x228>)
 801f036:	428e      	cmp	r6, r1
 801f038:	dc51      	bgt.n	801f0de <__ieee754_pow+0x116>
 801f03a:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 801f03e:	428e      	cmp	r6, r1
 801f040:	f340 84af 	ble.w	801f9a2 <__ieee754_pow+0x9da>
 801f044:	1531      	asrs	r1, r6, #20
 801f046:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 801f04a:	2914      	cmp	r1, #20
 801f04c:	dd0f      	ble.n	801f06e <__ieee754_pow+0xa6>
 801f04e:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 801f052:	fa20 fc01 	lsr.w	ip, r0, r1
 801f056:	fa0c f101 	lsl.w	r1, ip, r1
 801f05a:	4281      	cmp	r1, r0
 801f05c:	f040 84a1 	bne.w	801f9a2 <__ieee754_pow+0x9da>
 801f060:	f00c 0c01 	and.w	ip, ip, #1
 801f064:	f1cc 0102 	rsb	r1, ip, #2
 801f068:	9100      	str	r1, [sp, #0]
 801f06a:	b180      	cbz	r0, 801f08e <__ieee754_pow+0xc6>
 801f06c:	e059      	b.n	801f122 <__ieee754_pow+0x15a>
 801f06e:	2800      	cmp	r0, #0
 801f070:	d155      	bne.n	801f11e <__ieee754_pow+0x156>
 801f072:	f1c1 0114 	rsb	r1, r1, #20
 801f076:	fa46 fc01 	asr.w	ip, r6, r1
 801f07a:	fa0c f101 	lsl.w	r1, ip, r1
 801f07e:	42b1      	cmp	r1, r6
 801f080:	f040 848c 	bne.w	801f99c <__ieee754_pow+0x9d4>
 801f084:	f00c 0c01 	and.w	ip, ip, #1
 801f088:	f1cc 0102 	rsb	r1, ip, #2
 801f08c:	9100      	str	r1, [sp, #0]
 801f08e:	4959      	ldr	r1, [pc, #356]	; (801f1f4 <__ieee754_pow+0x22c>)
 801f090:	428e      	cmp	r6, r1
 801f092:	d12d      	bne.n	801f0f0 <__ieee754_pow+0x128>
 801f094:	2f00      	cmp	r7, #0
 801f096:	da79      	bge.n	801f18c <__ieee754_pow+0x1c4>
 801f098:	4956      	ldr	r1, [pc, #344]	; (801f1f4 <__ieee754_pow+0x22c>)
 801f09a:	2000      	movs	r0, #0
 801f09c:	f7e1 fbe6 	bl	800086c <__aeabi_ddiv>
 801f0a0:	e016      	b.n	801f0d0 <__ieee754_pow+0x108>
 801f0a2:	2100      	movs	r1, #0
 801f0a4:	9100      	str	r1, [sp, #0]
 801f0a6:	2800      	cmp	r0, #0
 801f0a8:	d13b      	bne.n	801f122 <__ieee754_pow+0x15a>
 801f0aa:	494f      	ldr	r1, [pc, #316]	; (801f1e8 <__ieee754_pow+0x220>)
 801f0ac:	428e      	cmp	r6, r1
 801f0ae:	d1ee      	bne.n	801f08e <__ieee754_pow+0xc6>
 801f0b0:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 801f0b4:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 801f0b8:	ea53 0308 	orrs.w	r3, r3, r8
 801f0bc:	f000 8466 	beq.w	801f98c <__ieee754_pow+0x9c4>
 801f0c0:	4b4d      	ldr	r3, [pc, #308]	; (801f1f8 <__ieee754_pow+0x230>)
 801f0c2:	429c      	cmp	r4, r3
 801f0c4:	dd0d      	ble.n	801f0e2 <__ieee754_pow+0x11a>
 801f0c6:	2f00      	cmp	r7, #0
 801f0c8:	f280 8464 	bge.w	801f994 <__ieee754_pow+0x9cc>
 801f0cc:	2000      	movs	r0, #0
 801f0ce:	2100      	movs	r1, #0
 801f0d0:	ec41 0b10 	vmov	d0, r0, r1
 801f0d4:	b00d      	add	sp, #52	; 0x34
 801f0d6:	ecbd 8b06 	vpop	{d8-d10}
 801f0da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f0de:	2102      	movs	r1, #2
 801f0e0:	e7e0      	b.n	801f0a4 <__ieee754_pow+0xdc>
 801f0e2:	2f00      	cmp	r7, #0
 801f0e4:	daf2      	bge.n	801f0cc <__ieee754_pow+0x104>
 801f0e6:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 801f0ea:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801f0ee:	e7ef      	b.n	801f0d0 <__ieee754_pow+0x108>
 801f0f0:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 801f0f4:	d104      	bne.n	801f100 <__ieee754_pow+0x138>
 801f0f6:	4610      	mov	r0, r2
 801f0f8:	4619      	mov	r1, r3
 801f0fa:	f7e1 fa8d 	bl	8000618 <__aeabi_dmul>
 801f0fe:	e7e7      	b.n	801f0d0 <__ieee754_pow+0x108>
 801f100:	493e      	ldr	r1, [pc, #248]	; (801f1fc <__ieee754_pow+0x234>)
 801f102:	428f      	cmp	r7, r1
 801f104:	d10d      	bne.n	801f122 <__ieee754_pow+0x15a>
 801f106:	f1b9 0f00 	cmp.w	r9, #0
 801f10a:	db0a      	blt.n	801f122 <__ieee754_pow+0x15a>
 801f10c:	ec43 2b10 	vmov	d0, r2, r3
 801f110:	b00d      	add	sp, #52	; 0x34
 801f112:	ecbd 8b06 	vpop	{d8-d10}
 801f116:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f11a:	f000 bc77 	b.w	801fa0c <__ieee754_sqrt>
 801f11e:	2100      	movs	r1, #0
 801f120:	9100      	str	r1, [sp, #0]
 801f122:	ec43 2b10 	vmov	d0, r2, r3
 801f126:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801f12a:	f000 fd23 	bl	801fb74 <fabs>
 801f12e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801f132:	ec51 0b10 	vmov	r0, r1, d0
 801f136:	f1b8 0f00 	cmp.w	r8, #0
 801f13a:	d12a      	bne.n	801f192 <__ieee754_pow+0x1ca>
 801f13c:	b12c      	cbz	r4, 801f14a <__ieee754_pow+0x182>
 801f13e:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 801f1f4 <__ieee754_pow+0x22c>
 801f142:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 801f146:	45e6      	cmp	lr, ip
 801f148:	d123      	bne.n	801f192 <__ieee754_pow+0x1ca>
 801f14a:	2f00      	cmp	r7, #0
 801f14c:	da05      	bge.n	801f15a <__ieee754_pow+0x192>
 801f14e:	4602      	mov	r2, r0
 801f150:	460b      	mov	r3, r1
 801f152:	2000      	movs	r0, #0
 801f154:	4927      	ldr	r1, [pc, #156]	; (801f1f4 <__ieee754_pow+0x22c>)
 801f156:	f7e1 fb89 	bl	800086c <__aeabi_ddiv>
 801f15a:	f1b9 0f00 	cmp.w	r9, #0
 801f15e:	dab7      	bge.n	801f0d0 <__ieee754_pow+0x108>
 801f160:	9b00      	ldr	r3, [sp, #0]
 801f162:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801f166:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801f16a:	4323      	orrs	r3, r4
 801f16c:	d108      	bne.n	801f180 <__ieee754_pow+0x1b8>
 801f16e:	4602      	mov	r2, r0
 801f170:	460b      	mov	r3, r1
 801f172:	4610      	mov	r0, r2
 801f174:	4619      	mov	r1, r3
 801f176:	f7e1 f897 	bl	80002a8 <__aeabi_dsub>
 801f17a:	4602      	mov	r2, r0
 801f17c:	460b      	mov	r3, r1
 801f17e:	e78d      	b.n	801f09c <__ieee754_pow+0xd4>
 801f180:	9b00      	ldr	r3, [sp, #0]
 801f182:	2b01      	cmp	r3, #1
 801f184:	d1a4      	bne.n	801f0d0 <__ieee754_pow+0x108>
 801f186:	4602      	mov	r2, r0
 801f188:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801f18c:	4610      	mov	r0, r2
 801f18e:	4619      	mov	r1, r3
 801f190:	e79e      	b.n	801f0d0 <__ieee754_pow+0x108>
 801f192:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 801f196:	f10c 35ff 	add.w	r5, ip, #4294967295
 801f19a:	950a      	str	r5, [sp, #40]	; 0x28
 801f19c:	9d00      	ldr	r5, [sp, #0]
 801f19e:	46ac      	mov	ip, r5
 801f1a0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801f1a2:	ea5c 0505 	orrs.w	r5, ip, r5
 801f1a6:	d0e4      	beq.n	801f172 <__ieee754_pow+0x1aa>
 801f1a8:	4b15      	ldr	r3, [pc, #84]	; (801f200 <__ieee754_pow+0x238>)
 801f1aa:	429e      	cmp	r6, r3
 801f1ac:	f340 80fc 	ble.w	801f3a8 <__ieee754_pow+0x3e0>
 801f1b0:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 801f1b4:	429e      	cmp	r6, r3
 801f1b6:	4b10      	ldr	r3, [pc, #64]	; (801f1f8 <__ieee754_pow+0x230>)
 801f1b8:	dd07      	ble.n	801f1ca <__ieee754_pow+0x202>
 801f1ba:	429c      	cmp	r4, r3
 801f1bc:	dc0a      	bgt.n	801f1d4 <__ieee754_pow+0x20c>
 801f1be:	2f00      	cmp	r7, #0
 801f1c0:	da84      	bge.n	801f0cc <__ieee754_pow+0x104>
 801f1c2:	a307      	add	r3, pc, #28	; (adr r3, 801f1e0 <__ieee754_pow+0x218>)
 801f1c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f1c8:	e795      	b.n	801f0f6 <__ieee754_pow+0x12e>
 801f1ca:	429c      	cmp	r4, r3
 801f1cc:	dbf7      	blt.n	801f1be <__ieee754_pow+0x1f6>
 801f1ce:	4b09      	ldr	r3, [pc, #36]	; (801f1f4 <__ieee754_pow+0x22c>)
 801f1d0:	429c      	cmp	r4, r3
 801f1d2:	dd17      	ble.n	801f204 <__ieee754_pow+0x23c>
 801f1d4:	2f00      	cmp	r7, #0
 801f1d6:	dcf4      	bgt.n	801f1c2 <__ieee754_pow+0x1fa>
 801f1d8:	e778      	b.n	801f0cc <__ieee754_pow+0x104>
 801f1da:	bf00      	nop
 801f1dc:	f3af 8000 	nop.w
 801f1e0:	8800759c 	.word	0x8800759c
 801f1e4:	7e37e43c 	.word	0x7e37e43c
 801f1e8:	7ff00000 	.word	0x7ff00000
 801f1ec:	08024193 	.word	0x08024193
 801f1f0:	433fffff 	.word	0x433fffff
 801f1f4:	3ff00000 	.word	0x3ff00000
 801f1f8:	3fefffff 	.word	0x3fefffff
 801f1fc:	3fe00000 	.word	0x3fe00000
 801f200:	41e00000 	.word	0x41e00000
 801f204:	4b64      	ldr	r3, [pc, #400]	; (801f398 <__ieee754_pow+0x3d0>)
 801f206:	2200      	movs	r2, #0
 801f208:	f7e1 f84e 	bl	80002a8 <__aeabi_dsub>
 801f20c:	a356      	add	r3, pc, #344	; (adr r3, 801f368 <__ieee754_pow+0x3a0>)
 801f20e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f212:	4604      	mov	r4, r0
 801f214:	460d      	mov	r5, r1
 801f216:	f7e1 f9ff 	bl	8000618 <__aeabi_dmul>
 801f21a:	a355      	add	r3, pc, #340	; (adr r3, 801f370 <__ieee754_pow+0x3a8>)
 801f21c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f220:	4606      	mov	r6, r0
 801f222:	460f      	mov	r7, r1
 801f224:	4620      	mov	r0, r4
 801f226:	4629      	mov	r1, r5
 801f228:	f7e1 f9f6 	bl	8000618 <__aeabi_dmul>
 801f22c:	4b5b      	ldr	r3, [pc, #364]	; (801f39c <__ieee754_pow+0x3d4>)
 801f22e:	4682      	mov	sl, r0
 801f230:	468b      	mov	fp, r1
 801f232:	2200      	movs	r2, #0
 801f234:	4620      	mov	r0, r4
 801f236:	4629      	mov	r1, r5
 801f238:	f7e1 f9ee 	bl	8000618 <__aeabi_dmul>
 801f23c:	4602      	mov	r2, r0
 801f23e:	460b      	mov	r3, r1
 801f240:	a14d      	add	r1, pc, #308	; (adr r1, 801f378 <__ieee754_pow+0x3b0>)
 801f242:	e9d1 0100 	ldrd	r0, r1, [r1]
 801f246:	f7e1 f82f 	bl	80002a8 <__aeabi_dsub>
 801f24a:	4622      	mov	r2, r4
 801f24c:	462b      	mov	r3, r5
 801f24e:	f7e1 f9e3 	bl	8000618 <__aeabi_dmul>
 801f252:	4602      	mov	r2, r0
 801f254:	460b      	mov	r3, r1
 801f256:	2000      	movs	r0, #0
 801f258:	4951      	ldr	r1, [pc, #324]	; (801f3a0 <__ieee754_pow+0x3d8>)
 801f25a:	f7e1 f825 	bl	80002a8 <__aeabi_dsub>
 801f25e:	4622      	mov	r2, r4
 801f260:	4680      	mov	r8, r0
 801f262:	4689      	mov	r9, r1
 801f264:	462b      	mov	r3, r5
 801f266:	4620      	mov	r0, r4
 801f268:	4629      	mov	r1, r5
 801f26a:	f7e1 f9d5 	bl	8000618 <__aeabi_dmul>
 801f26e:	4602      	mov	r2, r0
 801f270:	460b      	mov	r3, r1
 801f272:	4640      	mov	r0, r8
 801f274:	4649      	mov	r1, r9
 801f276:	f7e1 f9cf 	bl	8000618 <__aeabi_dmul>
 801f27a:	a341      	add	r3, pc, #260	; (adr r3, 801f380 <__ieee754_pow+0x3b8>)
 801f27c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f280:	f7e1 f9ca 	bl	8000618 <__aeabi_dmul>
 801f284:	4602      	mov	r2, r0
 801f286:	460b      	mov	r3, r1
 801f288:	4650      	mov	r0, sl
 801f28a:	4659      	mov	r1, fp
 801f28c:	f7e1 f80c 	bl	80002a8 <__aeabi_dsub>
 801f290:	4602      	mov	r2, r0
 801f292:	460b      	mov	r3, r1
 801f294:	4680      	mov	r8, r0
 801f296:	4689      	mov	r9, r1
 801f298:	4630      	mov	r0, r6
 801f29a:	4639      	mov	r1, r7
 801f29c:	f7e1 f806 	bl	80002ac <__adddf3>
 801f2a0:	2400      	movs	r4, #0
 801f2a2:	4632      	mov	r2, r6
 801f2a4:	463b      	mov	r3, r7
 801f2a6:	4620      	mov	r0, r4
 801f2a8:	460d      	mov	r5, r1
 801f2aa:	f7e0 fffd 	bl	80002a8 <__aeabi_dsub>
 801f2ae:	4602      	mov	r2, r0
 801f2b0:	460b      	mov	r3, r1
 801f2b2:	4640      	mov	r0, r8
 801f2b4:	4649      	mov	r1, r9
 801f2b6:	f7e0 fff7 	bl	80002a8 <__aeabi_dsub>
 801f2ba:	9b00      	ldr	r3, [sp, #0]
 801f2bc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801f2be:	3b01      	subs	r3, #1
 801f2c0:	4313      	orrs	r3, r2
 801f2c2:	4682      	mov	sl, r0
 801f2c4:	468b      	mov	fp, r1
 801f2c6:	f040 81f1 	bne.w	801f6ac <__ieee754_pow+0x6e4>
 801f2ca:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 801f388 <__ieee754_pow+0x3c0>
 801f2ce:	eeb0 8a47 	vmov.f32	s16, s14
 801f2d2:	eef0 8a67 	vmov.f32	s17, s15
 801f2d6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801f2da:	2600      	movs	r6, #0
 801f2dc:	4632      	mov	r2, r6
 801f2de:	463b      	mov	r3, r7
 801f2e0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801f2e4:	f7e0 ffe0 	bl	80002a8 <__aeabi_dsub>
 801f2e8:	4622      	mov	r2, r4
 801f2ea:	462b      	mov	r3, r5
 801f2ec:	f7e1 f994 	bl	8000618 <__aeabi_dmul>
 801f2f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801f2f4:	4680      	mov	r8, r0
 801f2f6:	4689      	mov	r9, r1
 801f2f8:	4650      	mov	r0, sl
 801f2fa:	4659      	mov	r1, fp
 801f2fc:	f7e1 f98c 	bl	8000618 <__aeabi_dmul>
 801f300:	4602      	mov	r2, r0
 801f302:	460b      	mov	r3, r1
 801f304:	4640      	mov	r0, r8
 801f306:	4649      	mov	r1, r9
 801f308:	f7e0 ffd0 	bl	80002ac <__adddf3>
 801f30c:	4632      	mov	r2, r6
 801f30e:	463b      	mov	r3, r7
 801f310:	4680      	mov	r8, r0
 801f312:	4689      	mov	r9, r1
 801f314:	4620      	mov	r0, r4
 801f316:	4629      	mov	r1, r5
 801f318:	f7e1 f97e 	bl	8000618 <__aeabi_dmul>
 801f31c:	460b      	mov	r3, r1
 801f31e:	4604      	mov	r4, r0
 801f320:	460d      	mov	r5, r1
 801f322:	4602      	mov	r2, r0
 801f324:	4649      	mov	r1, r9
 801f326:	4640      	mov	r0, r8
 801f328:	f7e0 ffc0 	bl	80002ac <__adddf3>
 801f32c:	4b1d      	ldr	r3, [pc, #116]	; (801f3a4 <__ieee754_pow+0x3dc>)
 801f32e:	4299      	cmp	r1, r3
 801f330:	ec45 4b19 	vmov	d9, r4, r5
 801f334:	4606      	mov	r6, r0
 801f336:	460f      	mov	r7, r1
 801f338:	468b      	mov	fp, r1
 801f33a:	f340 82fe 	ble.w	801f93a <__ieee754_pow+0x972>
 801f33e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 801f342:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 801f346:	4303      	orrs	r3, r0
 801f348:	f000 81f0 	beq.w	801f72c <__ieee754_pow+0x764>
 801f34c:	a310      	add	r3, pc, #64	; (adr r3, 801f390 <__ieee754_pow+0x3c8>)
 801f34e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f352:	ec51 0b18 	vmov	r0, r1, d8
 801f356:	f7e1 f95f 	bl	8000618 <__aeabi_dmul>
 801f35a:	a30d      	add	r3, pc, #52	; (adr r3, 801f390 <__ieee754_pow+0x3c8>)
 801f35c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f360:	e6cb      	b.n	801f0fa <__ieee754_pow+0x132>
 801f362:	bf00      	nop
 801f364:	f3af 8000 	nop.w
 801f368:	60000000 	.word	0x60000000
 801f36c:	3ff71547 	.word	0x3ff71547
 801f370:	f85ddf44 	.word	0xf85ddf44
 801f374:	3e54ae0b 	.word	0x3e54ae0b
 801f378:	55555555 	.word	0x55555555
 801f37c:	3fd55555 	.word	0x3fd55555
 801f380:	652b82fe 	.word	0x652b82fe
 801f384:	3ff71547 	.word	0x3ff71547
 801f388:	00000000 	.word	0x00000000
 801f38c:	bff00000 	.word	0xbff00000
 801f390:	8800759c 	.word	0x8800759c
 801f394:	7e37e43c 	.word	0x7e37e43c
 801f398:	3ff00000 	.word	0x3ff00000
 801f39c:	3fd00000 	.word	0x3fd00000
 801f3a0:	3fe00000 	.word	0x3fe00000
 801f3a4:	408fffff 	.word	0x408fffff
 801f3a8:	4bd7      	ldr	r3, [pc, #860]	; (801f708 <__ieee754_pow+0x740>)
 801f3aa:	ea03 0309 	and.w	r3, r3, r9
 801f3ae:	2200      	movs	r2, #0
 801f3b0:	b92b      	cbnz	r3, 801f3be <__ieee754_pow+0x3f6>
 801f3b2:	4bd6      	ldr	r3, [pc, #856]	; (801f70c <__ieee754_pow+0x744>)
 801f3b4:	f7e1 f930 	bl	8000618 <__aeabi_dmul>
 801f3b8:	f06f 0234 	mvn.w	r2, #52	; 0x34
 801f3bc:	460c      	mov	r4, r1
 801f3be:	1523      	asrs	r3, r4, #20
 801f3c0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801f3c4:	4413      	add	r3, r2
 801f3c6:	9309      	str	r3, [sp, #36]	; 0x24
 801f3c8:	4bd1      	ldr	r3, [pc, #836]	; (801f710 <__ieee754_pow+0x748>)
 801f3ca:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801f3ce:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 801f3d2:	429c      	cmp	r4, r3
 801f3d4:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 801f3d8:	dd08      	ble.n	801f3ec <__ieee754_pow+0x424>
 801f3da:	4bce      	ldr	r3, [pc, #824]	; (801f714 <__ieee754_pow+0x74c>)
 801f3dc:	429c      	cmp	r4, r3
 801f3de:	f340 8163 	ble.w	801f6a8 <__ieee754_pow+0x6e0>
 801f3e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f3e4:	3301      	adds	r3, #1
 801f3e6:	9309      	str	r3, [sp, #36]	; 0x24
 801f3e8:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 801f3ec:	2400      	movs	r4, #0
 801f3ee:	00e3      	lsls	r3, r4, #3
 801f3f0:	930b      	str	r3, [sp, #44]	; 0x2c
 801f3f2:	4bc9      	ldr	r3, [pc, #804]	; (801f718 <__ieee754_pow+0x750>)
 801f3f4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801f3f8:	ed93 7b00 	vldr	d7, [r3]
 801f3fc:	4629      	mov	r1, r5
 801f3fe:	ec53 2b17 	vmov	r2, r3, d7
 801f402:	eeb0 8a47 	vmov.f32	s16, s14
 801f406:	eef0 8a67 	vmov.f32	s17, s15
 801f40a:	4682      	mov	sl, r0
 801f40c:	f7e0 ff4c 	bl	80002a8 <__aeabi_dsub>
 801f410:	4652      	mov	r2, sl
 801f412:	4606      	mov	r6, r0
 801f414:	460f      	mov	r7, r1
 801f416:	462b      	mov	r3, r5
 801f418:	ec51 0b18 	vmov	r0, r1, d8
 801f41c:	f7e0 ff46 	bl	80002ac <__adddf3>
 801f420:	4602      	mov	r2, r0
 801f422:	460b      	mov	r3, r1
 801f424:	2000      	movs	r0, #0
 801f426:	49bd      	ldr	r1, [pc, #756]	; (801f71c <__ieee754_pow+0x754>)
 801f428:	f7e1 fa20 	bl	800086c <__aeabi_ddiv>
 801f42c:	ec41 0b19 	vmov	d9, r0, r1
 801f430:	4602      	mov	r2, r0
 801f432:	460b      	mov	r3, r1
 801f434:	4630      	mov	r0, r6
 801f436:	4639      	mov	r1, r7
 801f438:	f7e1 f8ee 	bl	8000618 <__aeabi_dmul>
 801f43c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801f440:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801f444:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801f448:	2300      	movs	r3, #0
 801f44a:	9304      	str	r3, [sp, #16]
 801f44c:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 801f450:	46ab      	mov	fp, r5
 801f452:	106d      	asrs	r5, r5, #1
 801f454:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 801f458:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 801f45c:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 801f460:	2200      	movs	r2, #0
 801f462:	4640      	mov	r0, r8
 801f464:	4649      	mov	r1, r9
 801f466:	4614      	mov	r4, r2
 801f468:	461d      	mov	r5, r3
 801f46a:	f7e1 f8d5 	bl	8000618 <__aeabi_dmul>
 801f46e:	4602      	mov	r2, r0
 801f470:	460b      	mov	r3, r1
 801f472:	4630      	mov	r0, r6
 801f474:	4639      	mov	r1, r7
 801f476:	f7e0 ff17 	bl	80002a8 <__aeabi_dsub>
 801f47a:	ec53 2b18 	vmov	r2, r3, d8
 801f47e:	4606      	mov	r6, r0
 801f480:	460f      	mov	r7, r1
 801f482:	4620      	mov	r0, r4
 801f484:	4629      	mov	r1, r5
 801f486:	f7e0 ff0f 	bl	80002a8 <__aeabi_dsub>
 801f48a:	4602      	mov	r2, r0
 801f48c:	460b      	mov	r3, r1
 801f48e:	4650      	mov	r0, sl
 801f490:	4659      	mov	r1, fp
 801f492:	f7e0 ff09 	bl	80002a8 <__aeabi_dsub>
 801f496:	4642      	mov	r2, r8
 801f498:	464b      	mov	r3, r9
 801f49a:	f7e1 f8bd 	bl	8000618 <__aeabi_dmul>
 801f49e:	4602      	mov	r2, r0
 801f4a0:	460b      	mov	r3, r1
 801f4a2:	4630      	mov	r0, r6
 801f4a4:	4639      	mov	r1, r7
 801f4a6:	f7e0 feff 	bl	80002a8 <__aeabi_dsub>
 801f4aa:	ec53 2b19 	vmov	r2, r3, d9
 801f4ae:	f7e1 f8b3 	bl	8000618 <__aeabi_dmul>
 801f4b2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801f4b6:	ec41 0b18 	vmov	d8, r0, r1
 801f4ba:	4610      	mov	r0, r2
 801f4bc:	4619      	mov	r1, r3
 801f4be:	f7e1 f8ab 	bl	8000618 <__aeabi_dmul>
 801f4c2:	a37d      	add	r3, pc, #500	; (adr r3, 801f6b8 <__ieee754_pow+0x6f0>)
 801f4c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f4c8:	4604      	mov	r4, r0
 801f4ca:	460d      	mov	r5, r1
 801f4cc:	f7e1 f8a4 	bl	8000618 <__aeabi_dmul>
 801f4d0:	a37b      	add	r3, pc, #492	; (adr r3, 801f6c0 <__ieee754_pow+0x6f8>)
 801f4d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f4d6:	f7e0 fee9 	bl	80002ac <__adddf3>
 801f4da:	4622      	mov	r2, r4
 801f4dc:	462b      	mov	r3, r5
 801f4de:	f7e1 f89b 	bl	8000618 <__aeabi_dmul>
 801f4e2:	a379      	add	r3, pc, #484	; (adr r3, 801f6c8 <__ieee754_pow+0x700>)
 801f4e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f4e8:	f7e0 fee0 	bl	80002ac <__adddf3>
 801f4ec:	4622      	mov	r2, r4
 801f4ee:	462b      	mov	r3, r5
 801f4f0:	f7e1 f892 	bl	8000618 <__aeabi_dmul>
 801f4f4:	a376      	add	r3, pc, #472	; (adr r3, 801f6d0 <__ieee754_pow+0x708>)
 801f4f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f4fa:	f7e0 fed7 	bl	80002ac <__adddf3>
 801f4fe:	4622      	mov	r2, r4
 801f500:	462b      	mov	r3, r5
 801f502:	f7e1 f889 	bl	8000618 <__aeabi_dmul>
 801f506:	a374      	add	r3, pc, #464	; (adr r3, 801f6d8 <__ieee754_pow+0x710>)
 801f508:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f50c:	f7e0 fece 	bl	80002ac <__adddf3>
 801f510:	4622      	mov	r2, r4
 801f512:	462b      	mov	r3, r5
 801f514:	f7e1 f880 	bl	8000618 <__aeabi_dmul>
 801f518:	a371      	add	r3, pc, #452	; (adr r3, 801f6e0 <__ieee754_pow+0x718>)
 801f51a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f51e:	f7e0 fec5 	bl	80002ac <__adddf3>
 801f522:	4622      	mov	r2, r4
 801f524:	4606      	mov	r6, r0
 801f526:	460f      	mov	r7, r1
 801f528:	462b      	mov	r3, r5
 801f52a:	4620      	mov	r0, r4
 801f52c:	4629      	mov	r1, r5
 801f52e:	f7e1 f873 	bl	8000618 <__aeabi_dmul>
 801f532:	4602      	mov	r2, r0
 801f534:	460b      	mov	r3, r1
 801f536:	4630      	mov	r0, r6
 801f538:	4639      	mov	r1, r7
 801f53a:	f7e1 f86d 	bl	8000618 <__aeabi_dmul>
 801f53e:	4642      	mov	r2, r8
 801f540:	4604      	mov	r4, r0
 801f542:	460d      	mov	r5, r1
 801f544:	464b      	mov	r3, r9
 801f546:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801f54a:	f7e0 feaf 	bl	80002ac <__adddf3>
 801f54e:	ec53 2b18 	vmov	r2, r3, d8
 801f552:	f7e1 f861 	bl	8000618 <__aeabi_dmul>
 801f556:	4622      	mov	r2, r4
 801f558:	462b      	mov	r3, r5
 801f55a:	f7e0 fea7 	bl	80002ac <__adddf3>
 801f55e:	4642      	mov	r2, r8
 801f560:	4682      	mov	sl, r0
 801f562:	468b      	mov	fp, r1
 801f564:	464b      	mov	r3, r9
 801f566:	4640      	mov	r0, r8
 801f568:	4649      	mov	r1, r9
 801f56a:	f7e1 f855 	bl	8000618 <__aeabi_dmul>
 801f56e:	4b6c      	ldr	r3, [pc, #432]	; (801f720 <__ieee754_pow+0x758>)
 801f570:	2200      	movs	r2, #0
 801f572:	4606      	mov	r6, r0
 801f574:	460f      	mov	r7, r1
 801f576:	f7e0 fe99 	bl	80002ac <__adddf3>
 801f57a:	4652      	mov	r2, sl
 801f57c:	465b      	mov	r3, fp
 801f57e:	f7e0 fe95 	bl	80002ac <__adddf3>
 801f582:	9c04      	ldr	r4, [sp, #16]
 801f584:	460d      	mov	r5, r1
 801f586:	4622      	mov	r2, r4
 801f588:	460b      	mov	r3, r1
 801f58a:	4640      	mov	r0, r8
 801f58c:	4649      	mov	r1, r9
 801f58e:	f7e1 f843 	bl	8000618 <__aeabi_dmul>
 801f592:	4b63      	ldr	r3, [pc, #396]	; (801f720 <__ieee754_pow+0x758>)
 801f594:	4680      	mov	r8, r0
 801f596:	4689      	mov	r9, r1
 801f598:	2200      	movs	r2, #0
 801f59a:	4620      	mov	r0, r4
 801f59c:	4629      	mov	r1, r5
 801f59e:	f7e0 fe83 	bl	80002a8 <__aeabi_dsub>
 801f5a2:	4632      	mov	r2, r6
 801f5a4:	463b      	mov	r3, r7
 801f5a6:	f7e0 fe7f 	bl	80002a8 <__aeabi_dsub>
 801f5aa:	4602      	mov	r2, r0
 801f5ac:	460b      	mov	r3, r1
 801f5ae:	4650      	mov	r0, sl
 801f5b0:	4659      	mov	r1, fp
 801f5b2:	f7e0 fe79 	bl	80002a8 <__aeabi_dsub>
 801f5b6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801f5ba:	f7e1 f82d 	bl	8000618 <__aeabi_dmul>
 801f5be:	4622      	mov	r2, r4
 801f5c0:	4606      	mov	r6, r0
 801f5c2:	460f      	mov	r7, r1
 801f5c4:	462b      	mov	r3, r5
 801f5c6:	ec51 0b18 	vmov	r0, r1, d8
 801f5ca:	f7e1 f825 	bl	8000618 <__aeabi_dmul>
 801f5ce:	4602      	mov	r2, r0
 801f5d0:	460b      	mov	r3, r1
 801f5d2:	4630      	mov	r0, r6
 801f5d4:	4639      	mov	r1, r7
 801f5d6:	f7e0 fe69 	bl	80002ac <__adddf3>
 801f5da:	4606      	mov	r6, r0
 801f5dc:	460f      	mov	r7, r1
 801f5de:	4602      	mov	r2, r0
 801f5e0:	460b      	mov	r3, r1
 801f5e2:	4640      	mov	r0, r8
 801f5e4:	4649      	mov	r1, r9
 801f5e6:	f7e0 fe61 	bl	80002ac <__adddf3>
 801f5ea:	9c04      	ldr	r4, [sp, #16]
 801f5ec:	a33e      	add	r3, pc, #248	; (adr r3, 801f6e8 <__ieee754_pow+0x720>)
 801f5ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f5f2:	4620      	mov	r0, r4
 801f5f4:	460d      	mov	r5, r1
 801f5f6:	f7e1 f80f 	bl	8000618 <__aeabi_dmul>
 801f5fa:	4642      	mov	r2, r8
 801f5fc:	ec41 0b18 	vmov	d8, r0, r1
 801f600:	464b      	mov	r3, r9
 801f602:	4620      	mov	r0, r4
 801f604:	4629      	mov	r1, r5
 801f606:	f7e0 fe4f 	bl	80002a8 <__aeabi_dsub>
 801f60a:	4602      	mov	r2, r0
 801f60c:	460b      	mov	r3, r1
 801f60e:	4630      	mov	r0, r6
 801f610:	4639      	mov	r1, r7
 801f612:	f7e0 fe49 	bl	80002a8 <__aeabi_dsub>
 801f616:	a336      	add	r3, pc, #216	; (adr r3, 801f6f0 <__ieee754_pow+0x728>)
 801f618:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f61c:	f7e0 fffc 	bl	8000618 <__aeabi_dmul>
 801f620:	a335      	add	r3, pc, #212	; (adr r3, 801f6f8 <__ieee754_pow+0x730>)
 801f622:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f626:	4606      	mov	r6, r0
 801f628:	460f      	mov	r7, r1
 801f62a:	4620      	mov	r0, r4
 801f62c:	4629      	mov	r1, r5
 801f62e:	f7e0 fff3 	bl	8000618 <__aeabi_dmul>
 801f632:	4602      	mov	r2, r0
 801f634:	460b      	mov	r3, r1
 801f636:	4630      	mov	r0, r6
 801f638:	4639      	mov	r1, r7
 801f63a:	f7e0 fe37 	bl	80002ac <__adddf3>
 801f63e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801f640:	4b38      	ldr	r3, [pc, #224]	; (801f724 <__ieee754_pow+0x75c>)
 801f642:	4413      	add	r3, r2
 801f644:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f648:	f7e0 fe30 	bl	80002ac <__adddf3>
 801f64c:	4682      	mov	sl, r0
 801f64e:	9809      	ldr	r0, [sp, #36]	; 0x24
 801f650:	468b      	mov	fp, r1
 801f652:	f7e0 ff77 	bl	8000544 <__aeabi_i2d>
 801f656:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801f658:	4b33      	ldr	r3, [pc, #204]	; (801f728 <__ieee754_pow+0x760>)
 801f65a:	4413      	add	r3, r2
 801f65c:	e9d3 8900 	ldrd	r8, r9, [r3]
 801f660:	4606      	mov	r6, r0
 801f662:	460f      	mov	r7, r1
 801f664:	4652      	mov	r2, sl
 801f666:	465b      	mov	r3, fp
 801f668:	ec51 0b18 	vmov	r0, r1, d8
 801f66c:	f7e0 fe1e 	bl	80002ac <__adddf3>
 801f670:	4642      	mov	r2, r8
 801f672:	464b      	mov	r3, r9
 801f674:	f7e0 fe1a 	bl	80002ac <__adddf3>
 801f678:	4632      	mov	r2, r6
 801f67a:	463b      	mov	r3, r7
 801f67c:	f7e0 fe16 	bl	80002ac <__adddf3>
 801f680:	9c04      	ldr	r4, [sp, #16]
 801f682:	4632      	mov	r2, r6
 801f684:	463b      	mov	r3, r7
 801f686:	4620      	mov	r0, r4
 801f688:	460d      	mov	r5, r1
 801f68a:	f7e0 fe0d 	bl	80002a8 <__aeabi_dsub>
 801f68e:	4642      	mov	r2, r8
 801f690:	464b      	mov	r3, r9
 801f692:	f7e0 fe09 	bl	80002a8 <__aeabi_dsub>
 801f696:	ec53 2b18 	vmov	r2, r3, d8
 801f69a:	f7e0 fe05 	bl	80002a8 <__aeabi_dsub>
 801f69e:	4602      	mov	r2, r0
 801f6a0:	460b      	mov	r3, r1
 801f6a2:	4650      	mov	r0, sl
 801f6a4:	4659      	mov	r1, fp
 801f6a6:	e606      	b.n	801f2b6 <__ieee754_pow+0x2ee>
 801f6a8:	2401      	movs	r4, #1
 801f6aa:	e6a0      	b.n	801f3ee <__ieee754_pow+0x426>
 801f6ac:	ed9f 7b14 	vldr	d7, [pc, #80]	; 801f700 <__ieee754_pow+0x738>
 801f6b0:	e60d      	b.n	801f2ce <__ieee754_pow+0x306>
 801f6b2:	bf00      	nop
 801f6b4:	f3af 8000 	nop.w
 801f6b8:	4a454eef 	.word	0x4a454eef
 801f6bc:	3fca7e28 	.word	0x3fca7e28
 801f6c0:	93c9db65 	.word	0x93c9db65
 801f6c4:	3fcd864a 	.word	0x3fcd864a
 801f6c8:	a91d4101 	.word	0xa91d4101
 801f6cc:	3fd17460 	.word	0x3fd17460
 801f6d0:	518f264d 	.word	0x518f264d
 801f6d4:	3fd55555 	.word	0x3fd55555
 801f6d8:	db6fabff 	.word	0xdb6fabff
 801f6dc:	3fdb6db6 	.word	0x3fdb6db6
 801f6e0:	33333303 	.word	0x33333303
 801f6e4:	3fe33333 	.word	0x3fe33333
 801f6e8:	e0000000 	.word	0xe0000000
 801f6ec:	3feec709 	.word	0x3feec709
 801f6f0:	dc3a03fd 	.word	0xdc3a03fd
 801f6f4:	3feec709 	.word	0x3feec709
 801f6f8:	145b01f5 	.word	0x145b01f5
 801f6fc:	be3e2fe0 	.word	0xbe3e2fe0
 801f700:	00000000 	.word	0x00000000
 801f704:	3ff00000 	.word	0x3ff00000
 801f708:	7ff00000 	.word	0x7ff00000
 801f70c:	43400000 	.word	0x43400000
 801f710:	0003988e 	.word	0x0003988e
 801f714:	000bb679 	.word	0x000bb679
 801f718:	08024468 	.word	0x08024468
 801f71c:	3ff00000 	.word	0x3ff00000
 801f720:	40080000 	.word	0x40080000
 801f724:	08024488 	.word	0x08024488
 801f728:	08024478 	.word	0x08024478
 801f72c:	a3b5      	add	r3, pc, #724	; (adr r3, 801fa04 <__ieee754_pow+0xa3c>)
 801f72e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f732:	4640      	mov	r0, r8
 801f734:	4649      	mov	r1, r9
 801f736:	f7e0 fdb9 	bl	80002ac <__adddf3>
 801f73a:	4622      	mov	r2, r4
 801f73c:	ec41 0b1a 	vmov	d10, r0, r1
 801f740:	462b      	mov	r3, r5
 801f742:	4630      	mov	r0, r6
 801f744:	4639      	mov	r1, r7
 801f746:	f7e0 fdaf 	bl	80002a8 <__aeabi_dsub>
 801f74a:	4602      	mov	r2, r0
 801f74c:	460b      	mov	r3, r1
 801f74e:	ec51 0b1a 	vmov	r0, r1, d10
 801f752:	f7e1 f9f1 	bl	8000b38 <__aeabi_dcmpgt>
 801f756:	2800      	cmp	r0, #0
 801f758:	f47f adf8 	bne.w	801f34c <__ieee754_pow+0x384>
 801f75c:	4aa4      	ldr	r2, [pc, #656]	; (801f9f0 <__ieee754_pow+0xa28>)
 801f75e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801f762:	4293      	cmp	r3, r2
 801f764:	f340 810b 	ble.w	801f97e <__ieee754_pow+0x9b6>
 801f768:	151b      	asrs	r3, r3, #20
 801f76a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 801f76e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 801f772:	fa4a f303 	asr.w	r3, sl, r3
 801f776:	445b      	add	r3, fp
 801f778:	f3c3 520a 	ubfx	r2, r3, #20, #11
 801f77c:	4e9d      	ldr	r6, [pc, #628]	; (801f9f4 <__ieee754_pow+0xa2c>)
 801f77e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 801f782:	4116      	asrs	r6, r2
 801f784:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 801f788:	2000      	movs	r0, #0
 801f78a:	ea23 0106 	bic.w	r1, r3, r6
 801f78e:	f1c2 0214 	rsb	r2, r2, #20
 801f792:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 801f796:	fa4a fa02 	asr.w	sl, sl, r2
 801f79a:	f1bb 0f00 	cmp.w	fp, #0
 801f79e:	4602      	mov	r2, r0
 801f7a0:	460b      	mov	r3, r1
 801f7a2:	4620      	mov	r0, r4
 801f7a4:	4629      	mov	r1, r5
 801f7a6:	bfb8      	it	lt
 801f7a8:	f1ca 0a00 	rsblt	sl, sl, #0
 801f7ac:	f7e0 fd7c 	bl	80002a8 <__aeabi_dsub>
 801f7b0:	ec41 0b19 	vmov	d9, r0, r1
 801f7b4:	4642      	mov	r2, r8
 801f7b6:	464b      	mov	r3, r9
 801f7b8:	ec51 0b19 	vmov	r0, r1, d9
 801f7bc:	f7e0 fd76 	bl	80002ac <__adddf3>
 801f7c0:	2400      	movs	r4, #0
 801f7c2:	a379      	add	r3, pc, #484	; (adr r3, 801f9a8 <__ieee754_pow+0x9e0>)
 801f7c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f7c8:	4620      	mov	r0, r4
 801f7ca:	460d      	mov	r5, r1
 801f7cc:	f7e0 ff24 	bl	8000618 <__aeabi_dmul>
 801f7d0:	ec53 2b19 	vmov	r2, r3, d9
 801f7d4:	4606      	mov	r6, r0
 801f7d6:	460f      	mov	r7, r1
 801f7d8:	4620      	mov	r0, r4
 801f7da:	4629      	mov	r1, r5
 801f7dc:	f7e0 fd64 	bl	80002a8 <__aeabi_dsub>
 801f7e0:	4602      	mov	r2, r0
 801f7e2:	460b      	mov	r3, r1
 801f7e4:	4640      	mov	r0, r8
 801f7e6:	4649      	mov	r1, r9
 801f7e8:	f7e0 fd5e 	bl	80002a8 <__aeabi_dsub>
 801f7ec:	a370      	add	r3, pc, #448	; (adr r3, 801f9b0 <__ieee754_pow+0x9e8>)
 801f7ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f7f2:	f7e0 ff11 	bl	8000618 <__aeabi_dmul>
 801f7f6:	a370      	add	r3, pc, #448	; (adr r3, 801f9b8 <__ieee754_pow+0x9f0>)
 801f7f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f7fc:	4680      	mov	r8, r0
 801f7fe:	4689      	mov	r9, r1
 801f800:	4620      	mov	r0, r4
 801f802:	4629      	mov	r1, r5
 801f804:	f7e0 ff08 	bl	8000618 <__aeabi_dmul>
 801f808:	4602      	mov	r2, r0
 801f80a:	460b      	mov	r3, r1
 801f80c:	4640      	mov	r0, r8
 801f80e:	4649      	mov	r1, r9
 801f810:	f7e0 fd4c 	bl	80002ac <__adddf3>
 801f814:	4604      	mov	r4, r0
 801f816:	460d      	mov	r5, r1
 801f818:	4602      	mov	r2, r0
 801f81a:	460b      	mov	r3, r1
 801f81c:	4630      	mov	r0, r6
 801f81e:	4639      	mov	r1, r7
 801f820:	f7e0 fd44 	bl	80002ac <__adddf3>
 801f824:	4632      	mov	r2, r6
 801f826:	463b      	mov	r3, r7
 801f828:	4680      	mov	r8, r0
 801f82a:	4689      	mov	r9, r1
 801f82c:	f7e0 fd3c 	bl	80002a8 <__aeabi_dsub>
 801f830:	4602      	mov	r2, r0
 801f832:	460b      	mov	r3, r1
 801f834:	4620      	mov	r0, r4
 801f836:	4629      	mov	r1, r5
 801f838:	f7e0 fd36 	bl	80002a8 <__aeabi_dsub>
 801f83c:	4642      	mov	r2, r8
 801f83e:	4606      	mov	r6, r0
 801f840:	460f      	mov	r7, r1
 801f842:	464b      	mov	r3, r9
 801f844:	4640      	mov	r0, r8
 801f846:	4649      	mov	r1, r9
 801f848:	f7e0 fee6 	bl	8000618 <__aeabi_dmul>
 801f84c:	a35c      	add	r3, pc, #368	; (adr r3, 801f9c0 <__ieee754_pow+0x9f8>)
 801f84e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f852:	4604      	mov	r4, r0
 801f854:	460d      	mov	r5, r1
 801f856:	f7e0 fedf 	bl	8000618 <__aeabi_dmul>
 801f85a:	a35b      	add	r3, pc, #364	; (adr r3, 801f9c8 <__ieee754_pow+0xa00>)
 801f85c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f860:	f7e0 fd22 	bl	80002a8 <__aeabi_dsub>
 801f864:	4622      	mov	r2, r4
 801f866:	462b      	mov	r3, r5
 801f868:	f7e0 fed6 	bl	8000618 <__aeabi_dmul>
 801f86c:	a358      	add	r3, pc, #352	; (adr r3, 801f9d0 <__ieee754_pow+0xa08>)
 801f86e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f872:	f7e0 fd1b 	bl	80002ac <__adddf3>
 801f876:	4622      	mov	r2, r4
 801f878:	462b      	mov	r3, r5
 801f87a:	f7e0 fecd 	bl	8000618 <__aeabi_dmul>
 801f87e:	a356      	add	r3, pc, #344	; (adr r3, 801f9d8 <__ieee754_pow+0xa10>)
 801f880:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f884:	f7e0 fd10 	bl	80002a8 <__aeabi_dsub>
 801f888:	4622      	mov	r2, r4
 801f88a:	462b      	mov	r3, r5
 801f88c:	f7e0 fec4 	bl	8000618 <__aeabi_dmul>
 801f890:	a353      	add	r3, pc, #332	; (adr r3, 801f9e0 <__ieee754_pow+0xa18>)
 801f892:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f896:	f7e0 fd09 	bl	80002ac <__adddf3>
 801f89a:	4622      	mov	r2, r4
 801f89c:	462b      	mov	r3, r5
 801f89e:	f7e0 febb 	bl	8000618 <__aeabi_dmul>
 801f8a2:	4602      	mov	r2, r0
 801f8a4:	460b      	mov	r3, r1
 801f8a6:	4640      	mov	r0, r8
 801f8a8:	4649      	mov	r1, r9
 801f8aa:	f7e0 fcfd 	bl	80002a8 <__aeabi_dsub>
 801f8ae:	4604      	mov	r4, r0
 801f8b0:	460d      	mov	r5, r1
 801f8b2:	4602      	mov	r2, r0
 801f8b4:	460b      	mov	r3, r1
 801f8b6:	4640      	mov	r0, r8
 801f8b8:	4649      	mov	r1, r9
 801f8ba:	f7e0 fead 	bl	8000618 <__aeabi_dmul>
 801f8be:	2200      	movs	r2, #0
 801f8c0:	ec41 0b19 	vmov	d9, r0, r1
 801f8c4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801f8c8:	4620      	mov	r0, r4
 801f8ca:	4629      	mov	r1, r5
 801f8cc:	f7e0 fcec 	bl	80002a8 <__aeabi_dsub>
 801f8d0:	4602      	mov	r2, r0
 801f8d2:	460b      	mov	r3, r1
 801f8d4:	ec51 0b19 	vmov	r0, r1, d9
 801f8d8:	f7e0 ffc8 	bl	800086c <__aeabi_ddiv>
 801f8dc:	4632      	mov	r2, r6
 801f8de:	4604      	mov	r4, r0
 801f8e0:	460d      	mov	r5, r1
 801f8e2:	463b      	mov	r3, r7
 801f8e4:	4640      	mov	r0, r8
 801f8e6:	4649      	mov	r1, r9
 801f8e8:	f7e0 fe96 	bl	8000618 <__aeabi_dmul>
 801f8ec:	4632      	mov	r2, r6
 801f8ee:	463b      	mov	r3, r7
 801f8f0:	f7e0 fcdc 	bl	80002ac <__adddf3>
 801f8f4:	4602      	mov	r2, r0
 801f8f6:	460b      	mov	r3, r1
 801f8f8:	4620      	mov	r0, r4
 801f8fa:	4629      	mov	r1, r5
 801f8fc:	f7e0 fcd4 	bl	80002a8 <__aeabi_dsub>
 801f900:	4642      	mov	r2, r8
 801f902:	464b      	mov	r3, r9
 801f904:	f7e0 fcd0 	bl	80002a8 <__aeabi_dsub>
 801f908:	460b      	mov	r3, r1
 801f90a:	4602      	mov	r2, r0
 801f90c:	493a      	ldr	r1, [pc, #232]	; (801f9f8 <__ieee754_pow+0xa30>)
 801f90e:	2000      	movs	r0, #0
 801f910:	f7e0 fcca 	bl	80002a8 <__aeabi_dsub>
 801f914:	e9cd 0100 	strd	r0, r1, [sp]
 801f918:	9b01      	ldr	r3, [sp, #4]
 801f91a:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 801f91e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801f922:	da2f      	bge.n	801f984 <__ieee754_pow+0x9bc>
 801f924:	4650      	mov	r0, sl
 801f926:	ed9d 0b00 	vldr	d0, [sp]
 801f92a:	f000 f9c1 	bl	801fcb0 <scalbn>
 801f92e:	ec51 0b10 	vmov	r0, r1, d0
 801f932:	ec53 2b18 	vmov	r2, r3, d8
 801f936:	f7ff bbe0 	b.w	801f0fa <__ieee754_pow+0x132>
 801f93a:	4b30      	ldr	r3, [pc, #192]	; (801f9fc <__ieee754_pow+0xa34>)
 801f93c:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 801f940:	429e      	cmp	r6, r3
 801f942:	f77f af0b 	ble.w	801f75c <__ieee754_pow+0x794>
 801f946:	4b2e      	ldr	r3, [pc, #184]	; (801fa00 <__ieee754_pow+0xa38>)
 801f948:	440b      	add	r3, r1
 801f94a:	4303      	orrs	r3, r0
 801f94c:	d00b      	beq.n	801f966 <__ieee754_pow+0x99e>
 801f94e:	a326      	add	r3, pc, #152	; (adr r3, 801f9e8 <__ieee754_pow+0xa20>)
 801f950:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f954:	ec51 0b18 	vmov	r0, r1, d8
 801f958:	f7e0 fe5e 	bl	8000618 <__aeabi_dmul>
 801f95c:	a322      	add	r3, pc, #136	; (adr r3, 801f9e8 <__ieee754_pow+0xa20>)
 801f95e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f962:	f7ff bbca 	b.w	801f0fa <__ieee754_pow+0x132>
 801f966:	4622      	mov	r2, r4
 801f968:	462b      	mov	r3, r5
 801f96a:	f7e0 fc9d 	bl	80002a8 <__aeabi_dsub>
 801f96e:	4642      	mov	r2, r8
 801f970:	464b      	mov	r3, r9
 801f972:	f7e1 f8d7 	bl	8000b24 <__aeabi_dcmpge>
 801f976:	2800      	cmp	r0, #0
 801f978:	f43f aef0 	beq.w	801f75c <__ieee754_pow+0x794>
 801f97c:	e7e7      	b.n	801f94e <__ieee754_pow+0x986>
 801f97e:	f04f 0a00 	mov.w	sl, #0
 801f982:	e717      	b.n	801f7b4 <__ieee754_pow+0x7ec>
 801f984:	e9dd 0100 	ldrd	r0, r1, [sp]
 801f988:	4619      	mov	r1, r3
 801f98a:	e7d2      	b.n	801f932 <__ieee754_pow+0x96a>
 801f98c:	491a      	ldr	r1, [pc, #104]	; (801f9f8 <__ieee754_pow+0xa30>)
 801f98e:	2000      	movs	r0, #0
 801f990:	f7ff bb9e 	b.w	801f0d0 <__ieee754_pow+0x108>
 801f994:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801f998:	f7ff bb9a 	b.w	801f0d0 <__ieee754_pow+0x108>
 801f99c:	9000      	str	r0, [sp, #0]
 801f99e:	f7ff bb76 	b.w	801f08e <__ieee754_pow+0xc6>
 801f9a2:	2100      	movs	r1, #0
 801f9a4:	f7ff bb60 	b.w	801f068 <__ieee754_pow+0xa0>
 801f9a8:	00000000 	.word	0x00000000
 801f9ac:	3fe62e43 	.word	0x3fe62e43
 801f9b0:	fefa39ef 	.word	0xfefa39ef
 801f9b4:	3fe62e42 	.word	0x3fe62e42
 801f9b8:	0ca86c39 	.word	0x0ca86c39
 801f9bc:	be205c61 	.word	0xbe205c61
 801f9c0:	72bea4d0 	.word	0x72bea4d0
 801f9c4:	3e663769 	.word	0x3e663769
 801f9c8:	c5d26bf1 	.word	0xc5d26bf1
 801f9cc:	3ebbbd41 	.word	0x3ebbbd41
 801f9d0:	af25de2c 	.word	0xaf25de2c
 801f9d4:	3f11566a 	.word	0x3f11566a
 801f9d8:	16bebd93 	.word	0x16bebd93
 801f9dc:	3f66c16c 	.word	0x3f66c16c
 801f9e0:	5555553e 	.word	0x5555553e
 801f9e4:	3fc55555 	.word	0x3fc55555
 801f9e8:	c2f8f359 	.word	0xc2f8f359
 801f9ec:	01a56e1f 	.word	0x01a56e1f
 801f9f0:	3fe00000 	.word	0x3fe00000
 801f9f4:	000fffff 	.word	0x000fffff
 801f9f8:	3ff00000 	.word	0x3ff00000
 801f9fc:	4090cbff 	.word	0x4090cbff
 801fa00:	3f6f3400 	.word	0x3f6f3400
 801fa04:	652b82fe 	.word	0x652b82fe
 801fa08:	3c971547 	.word	0x3c971547

0801fa0c <__ieee754_sqrt>:
 801fa0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801fa10:	ec55 4b10 	vmov	r4, r5, d0
 801fa14:	4e56      	ldr	r6, [pc, #344]	; (801fb70 <__ieee754_sqrt+0x164>)
 801fa16:	43ae      	bics	r6, r5
 801fa18:	ee10 0a10 	vmov	r0, s0
 801fa1c:	ee10 3a10 	vmov	r3, s0
 801fa20:	4629      	mov	r1, r5
 801fa22:	462a      	mov	r2, r5
 801fa24:	d110      	bne.n	801fa48 <__ieee754_sqrt+0x3c>
 801fa26:	ee10 2a10 	vmov	r2, s0
 801fa2a:	462b      	mov	r3, r5
 801fa2c:	f7e0 fdf4 	bl	8000618 <__aeabi_dmul>
 801fa30:	4602      	mov	r2, r0
 801fa32:	460b      	mov	r3, r1
 801fa34:	4620      	mov	r0, r4
 801fa36:	4629      	mov	r1, r5
 801fa38:	f7e0 fc38 	bl	80002ac <__adddf3>
 801fa3c:	4604      	mov	r4, r0
 801fa3e:	460d      	mov	r5, r1
 801fa40:	ec45 4b10 	vmov	d0, r4, r5
 801fa44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801fa48:	2d00      	cmp	r5, #0
 801fa4a:	dc10      	bgt.n	801fa6e <__ieee754_sqrt+0x62>
 801fa4c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801fa50:	4330      	orrs	r0, r6
 801fa52:	d0f5      	beq.n	801fa40 <__ieee754_sqrt+0x34>
 801fa54:	b15d      	cbz	r5, 801fa6e <__ieee754_sqrt+0x62>
 801fa56:	ee10 2a10 	vmov	r2, s0
 801fa5a:	462b      	mov	r3, r5
 801fa5c:	ee10 0a10 	vmov	r0, s0
 801fa60:	f7e0 fc22 	bl	80002a8 <__aeabi_dsub>
 801fa64:	4602      	mov	r2, r0
 801fa66:	460b      	mov	r3, r1
 801fa68:	f7e0 ff00 	bl	800086c <__aeabi_ddiv>
 801fa6c:	e7e6      	b.n	801fa3c <__ieee754_sqrt+0x30>
 801fa6e:	1509      	asrs	r1, r1, #20
 801fa70:	d076      	beq.n	801fb60 <__ieee754_sqrt+0x154>
 801fa72:	f3c2 0213 	ubfx	r2, r2, #0, #20
 801fa76:	07ce      	lsls	r6, r1, #31
 801fa78:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 801fa7c:	bf5e      	ittt	pl
 801fa7e:	0fda      	lsrpl	r2, r3, #31
 801fa80:	005b      	lslpl	r3, r3, #1
 801fa82:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 801fa86:	0fda      	lsrs	r2, r3, #31
 801fa88:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 801fa8c:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 801fa90:	2000      	movs	r0, #0
 801fa92:	106d      	asrs	r5, r5, #1
 801fa94:	005b      	lsls	r3, r3, #1
 801fa96:	f04f 0e16 	mov.w	lr, #22
 801fa9a:	4684      	mov	ip, r0
 801fa9c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801faa0:	eb0c 0401 	add.w	r4, ip, r1
 801faa4:	4294      	cmp	r4, r2
 801faa6:	bfde      	ittt	le
 801faa8:	1b12      	suble	r2, r2, r4
 801faaa:	eb04 0c01 	addle.w	ip, r4, r1
 801faae:	1840      	addle	r0, r0, r1
 801fab0:	0052      	lsls	r2, r2, #1
 801fab2:	f1be 0e01 	subs.w	lr, lr, #1
 801fab6:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 801faba:	ea4f 0151 	mov.w	r1, r1, lsr #1
 801fabe:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801fac2:	d1ed      	bne.n	801faa0 <__ieee754_sqrt+0x94>
 801fac4:	4671      	mov	r1, lr
 801fac6:	2720      	movs	r7, #32
 801fac8:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 801facc:	4562      	cmp	r2, ip
 801face:	eb04 060e 	add.w	r6, r4, lr
 801fad2:	dc02      	bgt.n	801fada <__ieee754_sqrt+0xce>
 801fad4:	d113      	bne.n	801fafe <__ieee754_sqrt+0xf2>
 801fad6:	429e      	cmp	r6, r3
 801fad8:	d811      	bhi.n	801fafe <__ieee754_sqrt+0xf2>
 801fada:	2e00      	cmp	r6, #0
 801fadc:	eb06 0e04 	add.w	lr, r6, r4
 801fae0:	da43      	bge.n	801fb6a <__ieee754_sqrt+0x15e>
 801fae2:	f1be 0f00 	cmp.w	lr, #0
 801fae6:	db40      	blt.n	801fb6a <__ieee754_sqrt+0x15e>
 801fae8:	f10c 0801 	add.w	r8, ip, #1
 801faec:	eba2 020c 	sub.w	r2, r2, ip
 801faf0:	429e      	cmp	r6, r3
 801faf2:	bf88      	it	hi
 801faf4:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801faf8:	1b9b      	subs	r3, r3, r6
 801fafa:	4421      	add	r1, r4
 801fafc:	46c4      	mov	ip, r8
 801fafe:	0052      	lsls	r2, r2, #1
 801fb00:	3f01      	subs	r7, #1
 801fb02:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 801fb06:	ea4f 0454 	mov.w	r4, r4, lsr #1
 801fb0a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801fb0e:	d1dd      	bne.n	801facc <__ieee754_sqrt+0xc0>
 801fb10:	4313      	orrs	r3, r2
 801fb12:	d006      	beq.n	801fb22 <__ieee754_sqrt+0x116>
 801fb14:	1c4c      	adds	r4, r1, #1
 801fb16:	bf13      	iteet	ne
 801fb18:	3101      	addne	r1, #1
 801fb1a:	3001      	addeq	r0, #1
 801fb1c:	4639      	moveq	r1, r7
 801fb1e:	f021 0101 	bicne.w	r1, r1, #1
 801fb22:	1043      	asrs	r3, r0, #1
 801fb24:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 801fb28:	0849      	lsrs	r1, r1, #1
 801fb2a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 801fb2e:	07c2      	lsls	r2, r0, #31
 801fb30:	bf48      	it	mi
 801fb32:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 801fb36:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 801fb3a:	460c      	mov	r4, r1
 801fb3c:	463d      	mov	r5, r7
 801fb3e:	e77f      	b.n	801fa40 <__ieee754_sqrt+0x34>
 801fb40:	0ada      	lsrs	r2, r3, #11
 801fb42:	3815      	subs	r0, #21
 801fb44:	055b      	lsls	r3, r3, #21
 801fb46:	2a00      	cmp	r2, #0
 801fb48:	d0fa      	beq.n	801fb40 <__ieee754_sqrt+0x134>
 801fb4a:	02d7      	lsls	r7, r2, #11
 801fb4c:	d50a      	bpl.n	801fb64 <__ieee754_sqrt+0x158>
 801fb4e:	f1c1 0420 	rsb	r4, r1, #32
 801fb52:	fa23 f404 	lsr.w	r4, r3, r4
 801fb56:	1e4d      	subs	r5, r1, #1
 801fb58:	408b      	lsls	r3, r1
 801fb5a:	4322      	orrs	r2, r4
 801fb5c:	1b41      	subs	r1, r0, r5
 801fb5e:	e788      	b.n	801fa72 <__ieee754_sqrt+0x66>
 801fb60:	4608      	mov	r0, r1
 801fb62:	e7f0      	b.n	801fb46 <__ieee754_sqrt+0x13a>
 801fb64:	0052      	lsls	r2, r2, #1
 801fb66:	3101      	adds	r1, #1
 801fb68:	e7ef      	b.n	801fb4a <__ieee754_sqrt+0x13e>
 801fb6a:	46e0      	mov	r8, ip
 801fb6c:	e7be      	b.n	801faec <__ieee754_sqrt+0xe0>
 801fb6e:	bf00      	nop
 801fb70:	7ff00000 	.word	0x7ff00000

0801fb74 <fabs>:
 801fb74:	ec51 0b10 	vmov	r0, r1, d0
 801fb78:	ee10 2a10 	vmov	r2, s0
 801fb7c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801fb80:	ec43 2b10 	vmov	d0, r2, r3
 801fb84:	4770      	bx	lr

0801fb86 <finite>:
 801fb86:	b082      	sub	sp, #8
 801fb88:	ed8d 0b00 	vstr	d0, [sp]
 801fb8c:	9801      	ldr	r0, [sp, #4]
 801fb8e:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 801fb92:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 801fb96:	0fc0      	lsrs	r0, r0, #31
 801fb98:	b002      	add	sp, #8
 801fb9a:	4770      	bx	lr

0801fb9c <rint>:
 801fb9c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801fb9e:	ec51 0b10 	vmov	r0, r1, d0
 801fba2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801fba6:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 801fbaa:	2e13      	cmp	r6, #19
 801fbac:	ee10 4a10 	vmov	r4, s0
 801fbb0:	460b      	mov	r3, r1
 801fbb2:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 801fbb6:	dc58      	bgt.n	801fc6a <rint+0xce>
 801fbb8:	2e00      	cmp	r6, #0
 801fbba:	da2b      	bge.n	801fc14 <rint+0x78>
 801fbbc:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 801fbc0:	4302      	orrs	r2, r0
 801fbc2:	d023      	beq.n	801fc0c <rint+0x70>
 801fbc4:	f3c1 0213 	ubfx	r2, r1, #0, #20
 801fbc8:	4302      	orrs	r2, r0
 801fbca:	4254      	negs	r4, r2
 801fbcc:	4314      	orrs	r4, r2
 801fbce:	0c4b      	lsrs	r3, r1, #17
 801fbd0:	0b24      	lsrs	r4, r4, #12
 801fbd2:	045b      	lsls	r3, r3, #17
 801fbd4:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 801fbd8:	ea44 0103 	orr.w	r1, r4, r3
 801fbdc:	4b32      	ldr	r3, [pc, #200]	; (801fca8 <rint+0x10c>)
 801fbde:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801fbe2:	e9d3 6700 	ldrd	r6, r7, [r3]
 801fbe6:	4602      	mov	r2, r0
 801fbe8:	460b      	mov	r3, r1
 801fbea:	4630      	mov	r0, r6
 801fbec:	4639      	mov	r1, r7
 801fbee:	f7e0 fb5d 	bl	80002ac <__adddf3>
 801fbf2:	e9cd 0100 	strd	r0, r1, [sp]
 801fbf6:	463b      	mov	r3, r7
 801fbf8:	e9dd 0100 	ldrd	r0, r1, [sp]
 801fbfc:	4632      	mov	r2, r6
 801fbfe:	f7e0 fb53 	bl	80002a8 <__aeabi_dsub>
 801fc02:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801fc06:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 801fc0a:	4639      	mov	r1, r7
 801fc0c:	ec41 0b10 	vmov	d0, r0, r1
 801fc10:	b003      	add	sp, #12
 801fc12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801fc14:	4a25      	ldr	r2, [pc, #148]	; (801fcac <rint+0x110>)
 801fc16:	4132      	asrs	r2, r6
 801fc18:	ea01 0702 	and.w	r7, r1, r2
 801fc1c:	4307      	orrs	r7, r0
 801fc1e:	d0f5      	beq.n	801fc0c <rint+0x70>
 801fc20:	0851      	lsrs	r1, r2, #1
 801fc22:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 801fc26:	4314      	orrs	r4, r2
 801fc28:	d00c      	beq.n	801fc44 <rint+0xa8>
 801fc2a:	ea23 0201 	bic.w	r2, r3, r1
 801fc2e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 801fc32:	2e13      	cmp	r6, #19
 801fc34:	fa43 f606 	asr.w	r6, r3, r6
 801fc38:	bf0c      	ite	eq
 801fc3a:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 801fc3e:	2400      	movne	r4, #0
 801fc40:	ea42 0306 	orr.w	r3, r2, r6
 801fc44:	4918      	ldr	r1, [pc, #96]	; (801fca8 <rint+0x10c>)
 801fc46:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 801fc4a:	4622      	mov	r2, r4
 801fc4c:	e9d5 4500 	ldrd	r4, r5, [r5]
 801fc50:	4620      	mov	r0, r4
 801fc52:	4629      	mov	r1, r5
 801fc54:	f7e0 fb2a 	bl	80002ac <__adddf3>
 801fc58:	e9cd 0100 	strd	r0, r1, [sp]
 801fc5c:	e9dd 0100 	ldrd	r0, r1, [sp]
 801fc60:	4622      	mov	r2, r4
 801fc62:	462b      	mov	r3, r5
 801fc64:	f7e0 fb20 	bl	80002a8 <__aeabi_dsub>
 801fc68:	e7d0      	b.n	801fc0c <rint+0x70>
 801fc6a:	2e33      	cmp	r6, #51	; 0x33
 801fc6c:	dd07      	ble.n	801fc7e <rint+0xe2>
 801fc6e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801fc72:	d1cb      	bne.n	801fc0c <rint+0x70>
 801fc74:	ee10 2a10 	vmov	r2, s0
 801fc78:	f7e0 fb18 	bl	80002ac <__adddf3>
 801fc7c:	e7c6      	b.n	801fc0c <rint+0x70>
 801fc7e:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 801fc82:	f04f 36ff 	mov.w	r6, #4294967295
 801fc86:	40d6      	lsrs	r6, r2
 801fc88:	4230      	tst	r0, r6
 801fc8a:	d0bf      	beq.n	801fc0c <rint+0x70>
 801fc8c:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 801fc90:	ea4f 0156 	mov.w	r1, r6, lsr #1
 801fc94:	bf1f      	itttt	ne
 801fc96:	ea24 0101 	bicne.w	r1, r4, r1
 801fc9a:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 801fc9e:	fa44 f202 	asrne.w	r2, r4, r2
 801fca2:	ea41 0402 	orrne.w	r4, r1, r2
 801fca6:	e7cd      	b.n	801fc44 <rint+0xa8>
 801fca8:	08024498 	.word	0x08024498
 801fcac:	000fffff 	.word	0x000fffff

0801fcb0 <scalbn>:
 801fcb0:	b570      	push	{r4, r5, r6, lr}
 801fcb2:	ec55 4b10 	vmov	r4, r5, d0
 801fcb6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801fcba:	4606      	mov	r6, r0
 801fcbc:	462b      	mov	r3, r5
 801fcbe:	b99a      	cbnz	r2, 801fce8 <scalbn+0x38>
 801fcc0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801fcc4:	4323      	orrs	r3, r4
 801fcc6:	d036      	beq.n	801fd36 <scalbn+0x86>
 801fcc8:	4b39      	ldr	r3, [pc, #228]	; (801fdb0 <scalbn+0x100>)
 801fcca:	4629      	mov	r1, r5
 801fccc:	ee10 0a10 	vmov	r0, s0
 801fcd0:	2200      	movs	r2, #0
 801fcd2:	f7e0 fca1 	bl	8000618 <__aeabi_dmul>
 801fcd6:	4b37      	ldr	r3, [pc, #220]	; (801fdb4 <scalbn+0x104>)
 801fcd8:	429e      	cmp	r6, r3
 801fcda:	4604      	mov	r4, r0
 801fcdc:	460d      	mov	r5, r1
 801fcde:	da10      	bge.n	801fd02 <scalbn+0x52>
 801fce0:	a32b      	add	r3, pc, #172	; (adr r3, 801fd90 <scalbn+0xe0>)
 801fce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fce6:	e03a      	b.n	801fd5e <scalbn+0xae>
 801fce8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 801fcec:	428a      	cmp	r2, r1
 801fcee:	d10c      	bne.n	801fd0a <scalbn+0x5a>
 801fcf0:	ee10 2a10 	vmov	r2, s0
 801fcf4:	4620      	mov	r0, r4
 801fcf6:	4629      	mov	r1, r5
 801fcf8:	f7e0 fad8 	bl	80002ac <__adddf3>
 801fcfc:	4604      	mov	r4, r0
 801fcfe:	460d      	mov	r5, r1
 801fd00:	e019      	b.n	801fd36 <scalbn+0x86>
 801fd02:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801fd06:	460b      	mov	r3, r1
 801fd08:	3a36      	subs	r2, #54	; 0x36
 801fd0a:	4432      	add	r2, r6
 801fd0c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801fd10:	428a      	cmp	r2, r1
 801fd12:	dd08      	ble.n	801fd26 <scalbn+0x76>
 801fd14:	2d00      	cmp	r5, #0
 801fd16:	a120      	add	r1, pc, #128	; (adr r1, 801fd98 <scalbn+0xe8>)
 801fd18:	e9d1 0100 	ldrd	r0, r1, [r1]
 801fd1c:	da1c      	bge.n	801fd58 <scalbn+0xa8>
 801fd1e:	a120      	add	r1, pc, #128	; (adr r1, 801fda0 <scalbn+0xf0>)
 801fd20:	e9d1 0100 	ldrd	r0, r1, [r1]
 801fd24:	e018      	b.n	801fd58 <scalbn+0xa8>
 801fd26:	2a00      	cmp	r2, #0
 801fd28:	dd08      	ble.n	801fd3c <scalbn+0x8c>
 801fd2a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801fd2e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801fd32:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801fd36:	ec45 4b10 	vmov	d0, r4, r5
 801fd3a:	bd70      	pop	{r4, r5, r6, pc}
 801fd3c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801fd40:	da19      	bge.n	801fd76 <scalbn+0xc6>
 801fd42:	f24c 3350 	movw	r3, #50000	; 0xc350
 801fd46:	429e      	cmp	r6, r3
 801fd48:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 801fd4c:	dd0a      	ble.n	801fd64 <scalbn+0xb4>
 801fd4e:	a112      	add	r1, pc, #72	; (adr r1, 801fd98 <scalbn+0xe8>)
 801fd50:	e9d1 0100 	ldrd	r0, r1, [r1]
 801fd54:	2b00      	cmp	r3, #0
 801fd56:	d1e2      	bne.n	801fd1e <scalbn+0x6e>
 801fd58:	a30f      	add	r3, pc, #60	; (adr r3, 801fd98 <scalbn+0xe8>)
 801fd5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fd5e:	f7e0 fc5b 	bl	8000618 <__aeabi_dmul>
 801fd62:	e7cb      	b.n	801fcfc <scalbn+0x4c>
 801fd64:	a10a      	add	r1, pc, #40	; (adr r1, 801fd90 <scalbn+0xe0>)
 801fd66:	e9d1 0100 	ldrd	r0, r1, [r1]
 801fd6a:	2b00      	cmp	r3, #0
 801fd6c:	d0b8      	beq.n	801fce0 <scalbn+0x30>
 801fd6e:	a10e      	add	r1, pc, #56	; (adr r1, 801fda8 <scalbn+0xf8>)
 801fd70:	e9d1 0100 	ldrd	r0, r1, [r1]
 801fd74:	e7b4      	b.n	801fce0 <scalbn+0x30>
 801fd76:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801fd7a:	3236      	adds	r2, #54	; 0x36
 801fd7c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801fd80:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801fd84:	4620      	mov	r0, r4
 801fd86:	4b0c      	ldr	r3, [pc, #48]	; (801fdb8 <scalbn+0x108>)
 801fd88:	2200      	movs	r2, #0
 801fd8a:	e7e8      	b.n	801fd5e <scalbn+0xae>
 801fd8c:	f3af 8000 	nop.w
 801fd90:	c2f8f359 	.word	0xc2f8f359
 801fd94:	01a56e1f 	.word	0x01a56e1f
 801fd98:	8800759c 	.word	0x8800759c
 801fd9c:	7e37e43c 	.word	0x7e37e43c
 801fda0:	8800759c 	.word	0x8800759c
 801fda4:	fe37e43c 	.word	0xfe37e43c
 801fda8:	c2f8f359 	.word	0xc2f8f359
 801fdac:	81a56e1f 	.word	0x81a56e1f
 801fdb0:	43500000 	.word	0x43500000
 801fdb4:	ffff3cb0 	.word	0xffff3cb0
 801fdb8:	3c900000 	.word	0x3c900000

0801fdbc <_init>:
 801fdbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801fdbe:	bf00      	nop
 801fdc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801fdc2:	bc08      	pop	{r3}
 801fdc4:	469e      	mov	lr, r3
 801fdc6:	4770      	bx	lr

0801fdc8 <_fini>:
 801fdc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801fdca:	bf00      	nop
 801fdcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801fdce:	bc08      	pop	{r3}
 801fdd0:	469e      	mov	lr, r3
 801fdd2:	4770      	bx	lr
